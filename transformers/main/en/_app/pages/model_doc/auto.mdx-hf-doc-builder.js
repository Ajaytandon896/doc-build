import{S as $Qt,i as kQt,s as SQt,e as a,k as l,w as F,t as o,M as RQt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as PQt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as rtt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function BQt($){let g,v,u,f,p,d,h,Co,Li,Rm,lt,yi,xi,ey,Pm,Oe,We,$i,Pn,oy,Bn,In,ry,ki,Nn,ty,Si,Bm,Sa;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Co=o(`, make sure its
`),Li=a("code"),Rm=o("model_type"),lt=o(" attribute is set to the same key you use when registering the config (here "),yi=a("code"),xi=o('"new-model"'),ey=o(")."),Pm=l(),Oe=a("p"),We=o("Likewise, if your "),$i=a("code"),Pn=o("NewModel"),oy=o(" is a subclass of "),Bn=a("a"),In=o("PreTrainedModel"),ry=o(`, make sure its
`),ki=a("code"),Nn=o("config_class"),ty=o(` attribute is set to the same class you use when registering the model (here
`),Si=a("code"),Bm=o("NewModelConfig"),Sa=o(")."),this.h()},l(He){g=n(He,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var BS=s(u);f=r(BS,"NewModelConfig"),BS.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Ri=s(d);h=r(Ri,"PretrainedConfig"),Ri.forEach(t),Co=r(Ae,`, make sure its
`),Li=n(Ae,"CODE",{});var IS=s(Li);Rm=r(IS,"model_type"),IS.forEach(t),lt=r(Ae," attribute is set to the same key you use when registering the config (here "),yi=n(Ae,"CODE",{});var NS=s(yi);xi=r(NS,'"new-model"'),NS.forEach(t),ey=r(Ae,")."),Ae.forEach(t),Pm=i(He),Oe=n(He,"P",{});var wo=s(Oe);We=r(wo,"Likewise, if your "),$i=n(wo,"CODE",{});var Ra=s($i);Pn=r(Ra,"NewModel"),Ra.forEach(t),oy=r(wo," is a subclass of "),Bn=n(wo,"A",{href:!0});var qS=s(Bn);In=r(qS,"PreTrainedModel"),qS.forEach(t),ry=r(wo,`, make sure its
`),ki=n(wo,"CODE",{});var Im=s(ki);Nn=r(Im,"config_class"),Im.forEach(t),ty=r(wo,` attribute is set to the same class you use when registering the model (here
`),Si=n(wo,"CODE",{});var jS=s(Si);Bm=r(jS,"NewModelConfig"),jS.forEach(t),Sa=r(wo,")."),wo.forEach(t),this.h()},h(){c(Bn,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(He,Ae){b(He,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,Co),e(g,Li),e(Li,Rm),e(g,lt),e(g,yi),e(yi,xi),e(g,ey),b(He,Pm,Ae),b(He,Oe,Ae),e(Oe,We),e(Oe,$i),e($i,Pn),e(Oe,oy),e(Oe,Bn),e(Bn,In),e(Oe,ry),e(Oe,ki),e(ki,Nn),e(Oe,ty),e(Oe,Si),e(Si,Bm),e(Oe,Sa)},d(He){He&&t(g),He&&t(Pm),He&&t(Oe)}}}function IQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function NQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qQt($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Co=s(u);f=r(Co,"use_auth_token=True"),Co.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function jQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function DQt($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Co=s(u);f=r(Co,"use_auth_token=True"),Co.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function GQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function OQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function VQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function XQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function QQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function WQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function HQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function UQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function JQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function YQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function KQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ZQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _Wt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function FWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function TWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function MWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function EWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function CWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function AWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function LWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $Wt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function SWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function RWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function PWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function BWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function IWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function NWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function DWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function GWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function OWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function VWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function XWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function QWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function WWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function HWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function UWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function JWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function YWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function KWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ZWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _Ht($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function FHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function THt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function MHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function EHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function CHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function AHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function LHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $Ht($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function SHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function RHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function PHt($){let g,v,u,f,p,d,h,Co,Li,Rm,lt,yi,xi,ey,Pm,Oe,We,$i,Pn,oy,Bn,In,ry,ki,Nn,ty,Si,Bm,Sa,He,Ae,BS,Ri,IS,NS,wo,Ra,qS,Im,jS,fHe,YVe,Pi,Nm,Cae,ay,gHe,wae,hHe,KVe,qn,uHe,Aae,pHe,_He,Lae,bHe,vHe,ZVe,ny,eXe,DS,FHe,oXe,qm,rXe,Bi,jm,yae,sy,THe,xae,MHe,tXe,Ao,ly,EHe,iy,CHe,GS,wHe,AHe,LHe,dy,yHe,$ae,xHe,$He,kHe,Lr,cy,SHe,kae,RHe,PHe,Ii,BHe,Sae,IHe,NHe,Rae,qHe,jHe,DHe,A,Dm,Pae,GHe,OHe,OS,VHe,XHe,zHe,Gm,Bae,QHe,WHe,VS,HHe,UHe,JHe,Om,Iae,YHe,KHe,XS,ZHe,eUe,oUe,Vm,Nae,rUe,tUe,zS,aUe,nUe,sUe,Xm,qae,lUe,iUe,QS,dUe,cUe,mUe,zm,jae,fUe,gUe,WS,hUe,uUe,pUe,Qm,Dae,_Ue,bUe,HS,vUe,FUe,TUe,Wm,Gae,MUe,EUe,US,CUe,wUe,AUe,Hm,Oae,LUe,yUe,JS,xUe,$Ue,kUe,Um,Vae,SUe,RUe,YS,PUe,BUe,IUe,Jm,Xae,NUe,qUe,KS,jUe,DUe,GUe,Ym,zae,OUe,VUe,ZS,XUe,zUe,QUe,Km,Qae,WUe,HUe,eR,UUe,JUe,YUe,Zm,Wae,KUe,ZUe,oR,eJe,oJe,rJe,ef,Hae,tJe,aJe,rR,nJe,sJe,lJe,of,Uae,iJe,dJe,tR,cJe,mJe,fJe,rf,Jae,gJe,hJe,aR,uJe,pJe,_Je,tf,Yae,bJe,vJe,nR,FJe,TJe,MJe,af,Kae,EJe,CJe,sR,wJe,AJe,LJe,nf,Zae,yJe,xJe,lR,$Je,kJe,SJe,sf,ene,RJe,PJe,iR,BJe,IJe,NJe,lf,one,qJe,jJe,dR,DJe,GJe,OJe,df,rne,VJe,XJe,cR,zJe,QJe,WJe,cf,tne,HJe,UJe,mR,JJe,YJe,KJe,mf,ane,ZJe,eYe,fR,oYe,rYe,tYe,ff,nne,aYe,nYe,gR,sYe,lYe,iYe,gf,sne,dYe,cYe,hR,mYe,fYe,gYe,hf,lne,hYe,uYe,uR,pYe,_Ye,bYe,uf,ine,vYe,FYe,pR,TYe,MYe,EYe,pf,dne,CYe,wYe,_R,AYe,LYe,yYe,_f,cne,xYe,$Ye,bR,kYe,SYe,RYe,bf,mne,PYe,BYe,vR,IYe,NYe,qYe,vf,fne,jYe,DYe,FR,GYe,OYe,VYe,Ff,gne,XYe,zYe,TR,QYe,WYe,HYe,Tf,hne,UYe,JYe,MR,YYe,KYe,ZYe,Mf,une,eKe,oKe,ER,rKe,tKe,aKe,Ef,pne,nKe,sKe,CR,lKe,iKe,dKe,Cf,_ne,cKe,mKe,wR,fKe,gKe,hKe,wf,bne,uKe,pKe,AR,_Ke,bKe,vKe,Af,vne,FKe,TKe,LR,MKe,EKe,CKe,Lf,Fne,wKe,AKe,yR,LKe,yKe,xKe,yf,Tne,$Ke,kKe,xR,SKe,RKe,PKe,xf,Mne,BKe,IKe,$R,NKe,qKe,jKe,$f,Ene,DKe,GKe,kR,OKe,VKe,XKe,kf,Cne,zKe,QKe,SR,WKe,HKe,UKe,Sf,wne,JKe,YKe,RR,KKe,ZKe,eZe,Rf,Ane,oZe,rZe,PR,tZe,aZe,nZe,Pf,Lne,sZe,lZe,BR,iZe,dZe,cZe,Bf,yne,mZe,fZe,IR,gZe,hZe,uZe,If,xne,pZe,_Ze,NR,bZe,vZe,FZe,Nf,$ne,TZe,MZe,qR,EZe,CZe,wZe,qf,kne,AZe,LZe,jR,yZe,xZe,$Ze,jf,Sne,kZe,SZe,DR,RZe,PZe,BZe,Df,Rne,IZe,NZe,GR,qZe,jZe,DZe,Gf,Pne,GZe,OZe,OR,VZe,XZe,zZe,Of,Bne,QZe,WZe,VR,HZe,UZe,JZe,Vf,Ine,YZe,KZe,XR,ZZe,eeo,oeo,Xf,Nne,reo,teo,zR,aeo,neo,seo,zf,qne,leo,ieo,QR,deo,ceo,meo,Qf,jne,feo,geo,WR,heo,ueo,peo,Wf,Dne,_eo,beo,HR,veo,Feo,Teo,Hf,Gne,Meo,Eeo,UR,Ceo,weo,Aeo,Uf,One,Leo,yeo,JR,xeo,$eo,keo,Jf,Vne,Seo,Reo,YR,Peo,Beo,Ieo,Yf,Xne,Neo,qeo,KR,jeo,Deo,Geo,Kf,zne,Oeo,Veo,ZR,Xeo,zeo,Qeo,Zf,Qne,Weo,Heo,eP,Ueo,Jeo,Yeo,eg,Wne,Keo,Zeo,oP,eoo,ooo,roo,og,Hne,too,aoo,rP,noo,soo,loo,rg,Une,ioo,doo,tP,coo,moo,foo,tg,Jne,goo,hoo,aP,uoo,poo,_oo,ag,Yne,boo,voo,nP,Foo,Too,Moo,ng,Kne,Eoo,Coo,sP,woo,Aoo,Loo,sg,Zne,yoo,xoo,lP,$oo,koo,Soo,lg,ese,Roo,Poo,iP,Boo,Ioo,Noo,ig,ose,qoo,joo,dP,Doo,Goo,Ooo,dg,rse,Voo,Xoo,cP,zoo,Qoo,Woo,cg,tse,Hoo,Uoo,mP,Joo,Yoo,Koo,mg,ase,Zoo,ero,fP,oro,rro,tro,fg,nse,aro,nro,gP,sro,lro,iro,gg,sse,dro,cro,hP,mro,fro,gro,hg,lse,hro,uro,uP,pro,_ro,bro,ug,ise,vro,Fro,pP,Tro,Mro,Ero,pg,dse,Cro,wro,_P,Aro,Lro,yro,_g,cse,xro,$ro,bP,kro,Sro,Rro,bg,mse,Pro,Bro,vP,Iro,Nro,qro,vg,fse,jro,Dro,FP,Gro,Oro,Vro,Fg,gse,Xro,zro,TP,Qro,Wro,Hro,Tg,hse,Uro,Jro,MP,Yro,Kro,Zro,Mg,use,eto,oto,EP,rto,tto,ato,Eg,pse,nto,sto,CP,lto,ito,dto,Cg,_se,cto,mto,wP,fto,gto,hto,wg,bse,uto,pto,AP,_to,bto,vto,Ag,vse,Fto,Tto,LP,Mto,Eto,Cto,Lg,Fse,wto,Ato,yP,Lto,yto,xto,yg,Tse,$to,kto,xP,Sto,Rto,Pto,xg,Mse,Bto,Ito,$P,Nto,qto,jto,$g,Ese,Dto,Gto,kP,Oto,Vto,Xto,kg,Cse,zto,Qto,SP,Wto,Hto,Uto,Sg,wse,Jto,Yto,RP,Kto,Zto,eao,Rg,Ase,oao,rao,PP,tao,aao,nao,Pg,Lse,sao,lao,BP,iao,dao,cao,Bg,yse,mao,fao,IP,gao,hao,uao,Ig,xse,pao,_ao,NP,bao,vao,Fao,Ng,$se,Tao,Mao,qP,Eao,Cao,wao,qg,kse,Aao,Lao,jP,yao,xao,$ao,jg,Sse,kao,Sao,DP,Rao,Pao,Bao,Dg,Rse,Iao,Nao,GP,qao,jao,Dao,Gg,Pse,Gao,Oao,OP,Vao,Xao,zao,Og,Bse,Qao,Wao,VP,Hao,Uao,Jao,Vg,Ise,Yao,Kao,XP,Zao,eno,ono,Xg,Nse,rno,tno,zP,ano,nno,sno,zg,qse,lno,ino,QP,dno,cno,mno,Qg,jse,fno,gno,WP,hno,uno,pno,Wg,Dse,_no,bno,HP,vno,Fno,Tno,Hg,Gse,Mno,Eno,UP,Cno,wno,Ano,Ug,Ose,Lno,yno,JP,xno,$no,kno,Jg,Vse,Sno,Rno,YP,Pno,Bno,Ino,Yg,Nno,Kg,my,qno,Xse,jno,aXe,Ni,Zg,zse,fy,Dno,Qse,Gno,nXe,Lo,gy,Ono,hy,Vno,KP,Xno,zno,Qno,uy,Wno,Wse,Hno,Uno,Jno,yr,py,Yno,Hse,Kno,Zno,Pa,eso,Use,oso,rso,Jse,tso,aso,Yse,nso,sso,lso,k,jn,Kse,iso,dso,ZP,cso,mso,eB,fso,gso,hso,Dn,Zse,uso,pso,oB,_so,bso,rB,vso,Fso,Tso,Gn,ele,Mso,Eso,tB,Cso,wso,aB,Aso,Lso,yso,eh,ole,xso,$so,nB,kso,Sso,Rso,On,rle,Pso,Bso,sB,Iso,Nso,lB,qso,jso,Dso,oh,tle,Gso,Oso,iB,Vso,Xso,zso,rh,ale,Qso,Wso,dB,Hso,Uso,Jso,th,nle,Yso,Kso,cB,Zso,elo,olo,Vn,sle,rlo,tlo,mB,alo,nlo,fB,slo,llo,ilo,Xn,lle,dlo,clo,gB,mlo,flo,hB,glo,hlo,ulo,zn,ile,plo,_lo,uB,blo,vlo,pB,Flo,Tlo,Mlo,ah,dle,Elo,Clo,_B,wlo,Alo,Llo,nh,cle,ylo,xlo,bB,$lo,klo,Slo,sh,mle,Rlo,Plo,vB,Blo,Ilo,Nlo,Qn,fle,qlo,jlo,FB,Dlo,Glo,TB,Olo,Vlo,Xlo,lh,gle,zlo,Qlo,MB,Wlo,Hlo,Ulo,Wn,hle,Jlo,Ylo,EB,Klo,Zlo,CB,eio,oio,rio,Hn,ule,tio,aio,wB,nio,sio,AB,lio,iio,dio,Un,ple,cio,mio,LB,fio,gio,yB,hio,uio,pio,Jn,_le,_io,bio,xB,vio,Fio,$B,Tio,Mio,Eio,ih,ble,Cio,wio,kB,Aio,Lio,yio,Yn,vle,xio,$io,SB,kio,Sio,RB,Rio,Pio,Bio,Kn,Fle,Iio,Nio,PB,qio,jio,BB,Dio,Gio,Oio,Zn,Tle,Vio,Xio,IB,zio,Qio,NB,Wio,Hio,Uio,es,Mle,Jio,Yio,qB,Kio,Zio,jB,edo,odo,rdo,os,Ele,tdo,ado,DB,ndo,sdo,GB,ldo,ido,ddo,rs,Cle,cdo,mdo,OB,fdo,gdo,VB,hdo,udo,pdo,dh,wle,_do,bdo,XB,vdo,Fdo,Tdo,ts,Ale,Mdo,Edo,zB,Cdo,wdo,QB,Ado,Ldo,ydo,ch,Lle,xdo,$do,WB,kdo,Sdo,Rdo,as,yle,Pdo,Bdo,HB,Ido,Ndo,UB,qdo,jdo,Ddo,ns,xle,Gdo,Odo,JB,Vdo,Xdo,YB,zdo,Qdo,Wdo,ss,$le,Hdo,Udo,KB,Jdo,Ydo,ZB,Kdo,Zdo,eco,mh,kle,oco,rco,eI,tco,aco,nco,ls,Sle,sco,lco,oI,ico,dco,rI,cco,mco,fco,is,Rle,gco,hco,tI,uco,pco,aI,_co,bco,vco,ds,Ple,Fco,Tco,nI,Mco,Eco,sI,Cco,wco,Aco,fh,Ble,Lco,yco,lI,xco,$co,kco,cs,Ile,Sco,Rco,iI,Pco,Bco,dI,Ico,Nco,qco,ms,Nle,jco,Dco,cI,Gco,Oco,mI,Vco,Xco,zco,fs,qle,Qco,Wco,fI,Hco,Uco,gI,Jco,Yco,Kco,gs,jle,Zco,emo,hI,omo,rmo,uI,tmo,amo,nmo,hs,Dle,smo,lmo,pI,imo,dmo,_I,cmo,mmo,fmo,us,Gle,gmo,hmo,bI,umo,pmo,vI,_mo,bmo,vmo,ps,Ole,Fmo,Tmo,FI,Mmo,Emo,TI,Cmo,wmo,Amo,_s,Vle,Lmo,ymo,MI,xmo,$mo,EI,kmo,Smo,Rmo,gh,Xle,Pmo,Bmo,CI,Imo,Nmo,qmo,bs,zle,jmo,Dmo,wI,Gmo,Omo,AI,Vmo,Xmo,zmo,hh,Qle,Qmo,Wmo,LI,Hmo,Umo,Jmo,uh,Wle,Ymo,Kmo,yI,Zmo,efo,ofo,vs,Hle,rfo,tfo,xI,afo,nfo,$I,sfo,lfo,ifo,Fs,Ule,dfo,cfo,kI,mfo,ffo,SI,gfo,hfo,ufo,Ts,Jle,pfo,_fo,RI,bfo,vfo,PI,Ffo,Tfo,Mfo,ph,Yle,Efo,Cfo,BI,wfo,Afo,Lfo,Ms,Kle,yfo,xfo,II,$fo,kfo,NI,Sfo,Rfo,Pfo,Es,Zle,Bfo,Ifo,qI,Nfo,qfo,jI,jfo,Dfo,Gfo,Cs,eie,Ofo,Vfo,DI,Xfo,zfo,GI,Qfo,Wfo,Hfo,ws,oie,Ufo,Jfo,OI,Yfo,Kfo,VI,Zfo,ego,ogo,As,rie,rgo,tgo,XI,ago,ngo,zI,sgo,lgo,igo,Ls,tie,dgo,cgo,QI,mgo,fgo,WI,ggo,hgo,ugo,ys,aie,pgo,_go,HI,bgo,vgo,UI,Fgo,Tgo,Mgo,_h,nie,Ego,Cgo,JI,wgo,Ago,Lgo,xs,sie,ygo,xgo,YI,$go,kgo,KI,Sgo,Rgo,Pgo,bh,lie,Bgo,Igo,ZI,Ngo,qgo,jgo,vh,iie,Dgo,Ggo,eN,Ogo,Vgo,Xgo,Fh,die,zgo,Qgo,oN,Wgo,Hgo,Ugo,Th,cie,Jgo,Ygo,rN,Kgo,Zgo,eho,$s,mie,oho,rho,tN,tho,aho,aN,nho,sho,lho,Mh,fie,iho,dho,nN,cho,mho,fho,ks,gie,gho,hho,sN,uho,pho,lN,_ho,bho,vho,Ss,hie,Fho,Tho,iN,Mho,Eho,dN,Cho,who,Aho,Rs,uie,Lho,yho,cN,xho,$ho,mN,kho,Sho,Rho,Ps,pie,Pho,Bho,fN,Iho,Nho,gN,qho,jho,Dho,Bs,_ie,Gho,Oho,hN,Vho,Xho,uN,zho,Qho,Who,Is,bie,Hho,Uho,pN,Jho,Yho,_N,Kho,Zho,euo,Eh,vie,ouo,ruo,bN,tuo,auo,nuo,Ch,Fie,suo,luo,vN,iuo,duo,cuo,Ns,Tie,muo,fuo,FN,guo,huo,TN,uuo,puo,_uo,qs,Mie,buo,vuo,MN,Fuo,Tuo,EN,Muo,Euo,Cuo,js,Eie,wuo,Auo,CN,Luo,yuo,wN,xuo,$uo,kuo,wh,Cie,Suo,Ruo,AN,Puo,Buo,Iuo,Ah,wie,Nuo,quo,LN,juo,Duo,Guo,Lh,Aie,Ouo,Vuo,yN,Xuo,zuo,Quo,Ds,Lie,Wuo,Huo,xN,Uuo,Juo,$N,Yuo,Kuo,Zuo,Gs,yie,epo,opo,kN,rpo,tpo,SN,apo,npo,spo,yh,xie,lpo,ipo,RN,dpo,cpo,mpo,xh,$ie,fpo,gpo,PN,hpo,upo,ppo,$h,kie,_po,bpo,BN,vpo,Fpo,Tpo,Os,Sie,Mpo,Epo,IN,Cpo,wpo,NN,Apo,Lpo,ypo,kh,Rie,xpo,$po,qN,kpo,Spo,Rpo,Sh,Pie,Ppo,Bpo,jN,Ipo,Npo,qpo,Vs,Bie,jpo,Dpo,DN,Gpo,Opo,GN,Vpo,Xpo,zpo,Xs,Iie,Qpo,Wpo,ON,Hpo,Upo,VN,Jpo,Ypo,Kpo,zs,Nie,Zpo,e_o,XN,o_o,r_o,zN,t_o,a_o,n_o,Qs,qie,s_o,l_o,QN,i_o,d_o,WN,c_o,m_o,f_o,Rh,g_o,Ph,_y,h_o,jie,u_o,sXe,qi,Bh,Die,by,p_o,Gie,__o,lXe,yo,vy,b_o,Fy,v_o,HN,F_o,T_o,M_o,Ty,E_o,Oie,C_o,w_o,A_o,Ue,My,L_o,Vie,y_o,x_o,Ba,$_o,Xie,k_o,S_o,zie,R_o,P_o,Qie,B_o,I_o,N_o,Y,Ih,Wie,q_o,j_o,UN,D_o,G_o,O_o,Nh,Hie,V_o,X_o,JN,z_o,Q_o,W_o,qh,Uie,H_o,U_o,YN,J_o,Y_o,K_o,jh,Jie,Z_o,e2o,KN,o2o,r2o,t2o,Dh,Yie,a2o,n2o,ZN,s2o,l2o,i2o,Gh,Kie,d2o,c2o,eq,m2o,f2o,g2o,Oh,Zie,h2o,u2o,oq,p2o,_2o,b2o,Vh,ede,v2o,F2o,rq,T2o,M2o,E2o,Xh,ode,C2o,w2o,tq,A2o,L2o,y2o,zh,rde,x2o,$2o,aq,k2o,S2o,R2o,Qh,tde,P2o,B2o,nq,I2o,N2o,q2o,Wh,ade,j2o,D2o,sq,G2o,O2o,V2o,Hh,nde,X2o,z2o,lq,Q2o,W2o,H2o,Uh,sde,U2o,J2o,iq,Y2o,K2o,Z2o,Jh,lde,ebo,obo,dq,rbo,tbo,abo,Yh,ide,nbo,sbo,cq,lbo,ibo,dbo,Kh,dde,cbo,mbo,mq,fbo,gbo,hbo,Zh,cde,ubo,pbo,fq,_bo,bbo,vbo,eu,mde,Fbo,Tbo,gq,Mbo,Ebo,Cbo,ou,fde,wbo,Abo,hq,Lbo,ybo,xbo,ru,gde,$bo,kbo,uq,Sbo,Rbo,Pbo,tu,hde,Bbo,Ibo,pq,Nbo,qbo,jbo,au,ude,Dbo,Gbo,_q,Obo,Vbo,Xbo,nu,pde,zbo,Qbo,bq,Wbo,Hbo,Ubo,su,_de,Jbo,Ybo,vq,Kbo,Zbo,evo,lu,bde,ovo,rvo,Fq,tvo,avo,nvo,iu,vde,svo,lvo,Tq,ivo,dvo,cvo,du,Fde,mvo,fvo,Mq,gvo,hvo,uvo,cu,Tde,pvo,_vo,Eq,bvo,vvo,Fvo,mu,Mde,Tvo,Mvo,Cq,Evo,Cvo,wvo,fu,Ede,Avo,Lvo,wq,yvo,xvo,$vo,gu,Cde,kvo,Svo,Aq,Rvo,Pvo,Bvo,hu,wde,Ivo,Nvo,Lq,qvo,jvo,Dvo,uu,Ade,Gvo,Ovo,yq,Vvo,Xvo,zvo,pu,Qvo,_u,Wvo,bu,Ey,Hvo,Lde,Uvo,iXe,ji,vu,yde,Cy,Jvo,xde,Yvo,dXe,xo,wy,Kvo,Ay,Zvo,xq,e1o,o1o,r1o,Ly,t1o,$de,a1o,n1o,s1o,Je,yy,l1o,kde,i1o,d1o,Di,c1o,Sde,m1o,f1o,Rde,g1o,h1o,u1o,he,Fu,Pde,p1o,_1o,$q,b1o,v1o,F1o,Tu,Bde,T1o,M1o,Ide,E1o,C1o,w1o,Mu,Nde,A1o,L1o,kq,y1o,x1o,$1o,Eu,qde,k1o,S1o,Sq,R1o,P1o,B1o,Cu,jde,I1o,N1o,Rq,q1o,j1o,D1o,wu,Dde,G1o,O1o,Pq,V1o,X1o,z1o,Au,Gde,Q1o,W1o,Bq,H1o,U1o,J1o,Lu,Ode,Y1o,K1o,Iq,Z1o,eFo,oFo,yu,Vde,rFo,tFo,Nq,aFo,nFo,sFo,xu,Xde,lFo,iFo,qq,dFo,cFo,mFo,$u,zde,fFo,gFo,jq,hFo,uFo,pFo,ku,Qde,_Fo,bFo,Dq,vFo,FFo,TFo,Su,Wde,MFo,EFo,Gq,CFo,wFo,AFo,Ru,Hde,LFo,yFo,Oq,xFo,$Fo,kFo,Pu,Ude,SFo,RFo,Vq,PFo,BFo,IFo,Bu,Jde,NFo,qFo,Xq,jFo,DFo,GFo,Iu,Yde,OFo,VFo,zq,XFo,zFo,QFo,Nu,Kde,WFo,HFo,Qq,UFo,JFo,YFo,qu,KFo,ju,ZFo,Du,xy,eTo,Zde,oTo,cXe,Gi,Gu,ece,$y,rTo,oce,tTo,mXe,$o,ky,aTo,Oi,nTo,Wq,sTo,lTo,Hq,iTo,dTo,cTo,Sy,mTo,rce,fTo,gTo,hTo,it,Ry,uTo,tce,pTo,_To,Vi,bTo,ace,vTo,FTo,Uq,TTo,MTo,ETo,Ou,CTo,Ye,Py,wTo,nce,ATo,LTo,Ia,yTo,sce,xTo,$To,lce,kTo,STo,ice,RTo,PTo,BTo,y,Vu,dce,ITo,NTo,Jq,qTo,jTo,DTo,Xu,cce,GTo,OTo,Yq,VTo,XTo,zTo,zu,mce,QTo,WTo,Kq,HTo,UTo,JTo,Qu,fce,YTo,KTo,Zq,ZTo,eMo,oMo,Wu,gce,rMo,tMo,ej,aMo,nMo,sMo,Hu,hce,lMo,iMo,oj,dMo,cMo,mMo,Uu,uce,fMo,gMo,rj,hMo,uMo,pMo,Ju,pce,_Mo,bMo,tj,vMo,FMo,TMo,Yu,_ce,MMo,EMo,aj,CMo,wMo,AMo,Ku,bce,LMo,yMo,nj,xMo,$Mo,kMo,Zu,vce,SMo,RMo,sj,PMo,BMo,IMo,ep,Fce,NMo,qMo,lj,jMo,DMo,GMo,op,Tce,OMo,VMo,ij,XMo,zMo,QMo,rp,Mce,WMo,HMo,dj,UMo,JMo,YMo,tp,Ece,KMo,ZMo,cj,e4o,o4o,r4o,ap,Cce,t4o,a4o,mj,n4o,s4o,l4o,np,wce,i4o,d4o,fj,c4o,m4o,f4o,sp,Ace,g4o,h4o,gj,u4o,p4o,_4o,lp,Lce,b4o,v4o,hj,F4o,T4o,M4o,ip,yce,E4o,C4o,uj,w4o,A4o,L4o,dp,xce,y4o,x4o,pj,$4o,k4o,S4o,cp,$ce,R4o,P4o,_j,B4o,I4o,N4o,mp,kce,q4o,j4o,bj,D4o,G4o,O4o,fp,Sce,V4o,X4o,vj,z4o,Q4o,W4o,gp,Rce,H4o,U4o,Fj,J4o,Y4o,K4o,hp,Pce,Z4o,eEo,Tj,oEo,rEo,tEo,up,Bce,aEo,nEo,Mj,sEo,lEo,iEo,pp,Ice,dEo,cEo,Ej,mEo,fEo,gEo,_p,Nce,hEo,uEo,Cj,pEo,_Eo,bEo,bp,qce,vEo,FEo,wj,TEo,MEo,EEo,vp,jce,CEo,wEo,Aj,AEo,LEo,yEo,Fp,Dce,xEo,$Eo,Lj,kEo,SEo,REo,Tp,Gce,PEo,BEo,yj,IEo,NEo,qEo,Mp,Oce,jEo,DEo,xj,GEo,OEo,VEo,Ws,Vce,XEo,zEo,$j,QEo,WEo,kj,HEo,UEo,JEo,Ep,Xce,YEo,KEo,Sj,ZEo,eCo,oCo,Cp,zce,rCo,tCo,Rj,aCo,nCo,sCo,wp,Qce,lCo,iCo,Pj,dCo,cCo,mCo,Ap,Wce,fCo,gCo,Bj,hCo,uCo,pCo,Lp,Hce,_Co,bCo,Ij,vCo,FCo,TCo,yp,Uce,MCo,ECo,Nj,CCo,wCo,ACo,xp,Jce,LCo,yCo,qj,xCo,$Co,kCo,$p,Yce,SCo,RCo,jj,PCo,BCo,ICo,kp,Kce,NCo,qCo,Dj,jCo,DCo,GCo,Sp,Zce,OCo,VCo,Gj,XCo,zCo,QCo,Rp,eme,WCo,HCo,Oj,UCo,JCo,YCo,Pp,ome,KCo,ZCo,Vj,e3o,o3o,r3o,Bp,rme,t3o,a3o,Xj,n3o,s3o,l3o,Ip,tme,i3o,d3o,zj,c3o,m3o,f3o,Np,ame,g3o,h3o,Qj,u3o,p3o,_3o,qp,nme,b3o,v3o,Wj,F3o,T3o,M3o,jp,sme,E3o,C3o,Hj,w3o,A3o,L3o,Dp,lme,y3o,x3o,Uj,$3o,k3o,S3o,Gp,ime,R3o,P3o,Jj,B3o,I3o,N3o,Op,dme,q3o,j3o,Yj,D3o,G3o,O3o,Vp,cme,V3o,X3o,Kj,z3o,Q3o,W3o,Xp,mme,H3o,U3o,Zj,J3o,Y3o,K3o,zp,fme,Z3o,e5o,eD,o5o,r5o,t5o,Qp,gme,a5o,n5o,oD,s5o,l5o,i5o,Wp,hme,d5o,c5o,rD,m5o,f5o,g5o,Hp,ume,h5o,u5o,tD,p5o,_5o,b5o,Up,pme,v5o,F5o,aD,T5o,M5o,E5o,Jp,_me,C5o,w5o,nD,A5o,L5o,y5o,Yp,bme,x5o,$5o,sD,k5o,S5o,R5o,Kp,vme,P5o,B5o,lD,I5o,N5o,q5o,Zp,Fme,j5o,D5o,iD,G5o,O5o,V5o,e_,Tme,X5o,z5o,dD,Q5o,W5o,H5o,o_,Mme,U5o,J5o,cD,Y5o,K5o,Z5o,r_,Eme,e0o,o0o,mD,r0o,t0o,a0o,t_,Cme,n0o,s0o,fD,l0o,i0o,d0o,a_,wme,c0o,m0o,gD,f0o,g0o,h0o,n_,Ame,u0o,p0o,hD,_0o,b0o,v0o,s_,Lme,F0o,T0o,uD,M0o,E0o,C0o,l_,yme,w0o,A0o,pD,L0o,y0o,x0o,i_,xme,$0o,k0o,_D,S0o,R0o,P0o,d_,$me,B0o,I0o,bD,N0o,q0o,j0o,c_,kme,D0o,G0o,vD,O0o,V0o,X0o,m_,Sme,z0o,Q0o,FD,W0o,H0o,U0o,f_,Rme,J0o,Y0o,TD,K0o,Z0o,ewo,g_,Pme,owo,rwo,MD,two,awo,nwo,h_,Bme,swo,lwo,ED,iwo,dwo,cwo,u_,Ime,mwo,fwo,CD,gwo,hwo,uwo,p_,Nme,pwo,_wo,wD,bwo,vwo,Fwo,__,qme,Two,Mwo,AD,Ewo,Cwo,wwo,b_,jme,Awo,Lwo,LD,ywo,xwo,$wo,v_,Dme,kwo,Swo,yD,Rwo,Pwo,Bwo,F_,Gme,Iwo,Nwo,xD,qwo,jwo,Dwo,T_,Ome,Gwo,Owo,$D,Vwo,Xwo,zwo,M_,Vme,Qwo,Wwo,kD,Hwo,Uwo,Jwo,E_,Xme,Ywo,Kwo,SD,Zwo,eAo,oAo,C_,zme,rAo,tAo,RD,aAo,nAo,sAo,w_,Qme,lAo,iAo,PD,dAo,cAo,mAo,A_,Wme,fAo,gAo,BD,hAo,uAo,pAo,L_,Hme,_Ao,bAo,ID,vAo,FAo,TAo,y_,Ume,MAo,EAo,ND,CAo,wAo,AAo,x_,Jme,LAo,yAo,qD,xAo,$Ao,kAo,$_,Yme,SAo,RAo,jD,PAo,BAo,IAo,k_,Kme,NAo,qAo,DD,jAo,DAo,GAo,S_,Zme,OAo,VAo,GD,XAo,zAo,QAo,R_,efe,WAo,HAo,OD,UAo,JAo,YAo,P_,ofe,KAo,ZAo,VD,e6o,o6o,r6o,B_,rfe,t6o,a6o,XD,n6o,s6o,l6o,I_,tfe,i6o,d6o,zD,c6o,m6o,f6o,N_,afe,g6o,h6o,QD,u6o,p6o,_6o,q_,nfe,b6o,v6o,WD,F6o,T6o,M6o,j_,sfe,E6o,C6o,HD,w6o,A6o,L6o,D_,lfe,y6o,x6o,UD,$6o,k6o,S6o,G_,ife,R6o,P6o,JD,B6o,I6o,N6o,O_,dfe,q6o,j6o,YD,D6o,G6o,O6o,V_,cfe,V6o,X6o,KD,z6o,Q6o,W6o,X_,mfe,H6o,U6o,ZD,J6o,Y6o,K6o,z_,Z6o,ffe,e7o,o7o,gfe,r7o,t7o,Q_,fXe,Xi,W_,hfe,By,a7o,ufe,n7o,gXe,ko,Iy,s7o,zi,l7o,eG,i7o,d7o,oG,c7o,m7o,f7o,Ny,g7o,pfe,h7o,u7o,p7o,dt,qy,_7o,_fe,b7o,v7o,Qi,F7o,bfe,T7o,M7o,rG,E7o,C7o,w7o,H_,A7o,Ke,jy,L7o,vfe,y7o,x7o,Na,$7o,Ffe,k7o,S7o,Tfe,R7o,P7o,Mfe,B7o,I7o,N7o,G,U_,Efe,q7o,j7o,tG,D7o,G7o,O7o,J_,Cfe,V7o,X7o,aG,z7o,Q7o,W7o,Y_,wfe,H7o,U7o,nG,J7o,Y7o,K7o,K_,Afe,Z7o,eLo,sG,oLo,rLo,tLo,Z_,Lfe,aLo,nLo,lG,sLo,lLo,iLo,e2,yfe,dLo,cLo,iG,mLo,fLo,gLo,o2,xfe,hLo,uLo,dG,pLo,_Lo,bLo,r2,$fe,vLo,FLo,cG,TLo,MLo,ELo,t2,kfe,CLo,wLo,mG,ALo,LLo,yLo,a2,Sfe,xLo,$Lo,fG,kLo,SLo,RLo,n2,Rfe,PLo,BLo,gG,ILo,NLo,qLo,s2,Pfe,jLo,DLo,hG,GLo,OLo,VLo,l2,Bfe,XLo,zLo,uG,QLo,WLo,HLo,i2,Ife,ULo,JLo,pG,YLo,KLo,ZLo,d2,Nfe,eyo,oyo,_G,ryo,tyo,ayo,c2,qfe,nyo,syo,bG,lyo,iyo,dyo,m2,jfe,cyo,myo,vG,fyo,gyo,hyo,f2,Dfe,uyo,pyo,FG,_yo,byo,vyo,g2,Gfe,Fyo,Tyo,TG,Myo,Eyo,Cyo,h2,Ofe,wyo,Ayo,MG,Lyo,yyo,xyo,u2,Vfe,$yo,kyo,EG,Syo,Ryo,Pyo,p2,Xfe,Byo,Iyo,CG,Nyo,qyo,jyo,_2,zfe,Dyo,Gyo,wG,Oyo,Vyo,Xyo,b2,Qfe,zyo,Qyo,AG,Wyo,Hyo,Uyo,v2,Wfe,Jyo,Yyo,LG,Kyo,Zyo,e8o,F2,Hfe,o8o,r8o,yG,t8o,a8o,n8o,T2,Ufe,s8o,l8o,xG,i8o,d8o,c8o,M2,Jfe,m8o,f8o,$G,g8o,h8o,u8o,E2,Yfe,p8o,_8o,kG,b8o,v8o,F8o,C2,Kfe,T8o,M8o,SG,E8o,C8o,w8o,w2,Zfe,A8o,L8o,RG,y8o,x8o,$8o,A2,ege,k8o,S8o,PG,R8o,P8o,B8o,L2,oge,I8o,N8o,BG,q8o,j8o,D8o,y2,rge,G8o,O8o,IG,V8o,X8o,z8o,x2,tge,Q8o,W8o,NG,H8o,U8o,J8o,$2,age,Y8o,K8o,qG,Z8o,e9o,o9o,k2,nge,r9o,t9o,jG,a9o,n9o,s9o,S2,sge,l9o,i9o,DG,d9o,c9o,m9o,R2,lge,f9o,g9o,GG,h9o,u9o,p9o,P2,ige,_9o,b9o,OG,v9o,F9o,T9o,B2,dge,M9o,E9o,VG,C9o,w9o,A9o,I2,cge,L9o,y9o,XG,x9o,$9o,k9o,N2,mge,S9o,R9o,zG,P9o,B9o,I9o,q2,fge,N9o,q9o,QG,j9o,D9o,G9o,j2,gge,O9o,V9o,WG,X9o,z9o,Q9o,D2,W9o,hge,H9o,U9o,uge,J9o,Y9o,G2,hXe,Wi,O2,pge,Dy,K9o,_ge,Z9o,uXe,So,Gy,exo,Hi,oxo,HG,rxo,txo,UG,axo,nxo,sxo,Oy,lxo,bge,ixo,dxo,cxo,ct,Vy,mxo,vge,fxo,gxo,Ui,hxo,Fge,uxo,pxo,JG,_xo,bxo,vxo,V2,Fxo,Ze,Xy,Txo,Tge,Mxo,Exo,qa,Cxo,Mge,wxo,Axo,Ege,Lxo,yxo,Cge,xxo,$xo,kxo,z,X2,wge,Sxo,Rxo,YG,Pxo,Bxo,Ixo,z2,Age,Nxo,qxo,KG,jxo,Dxo,Gxo,Q2,Lge,Oxo,Vxo,ZG,Xxo,zxo,Qxo,W2,yge,Wxo,Hxo,eO,Uxo,Jxo,Yxo,H2,xge,Kxo,Zxo,oO,e$o,o$o,r$o,U2,$ge,t$o,a$o,rO,n$o,s$o,l$o,J2,kge,i$o,d$o,tO,c$o,m$o,f$o,Y2,Sge,g$o,h$o,aO,u$o,p$o,_$o,K2,Rge,b$o,v$o,nO,F$o,T$o,M$o,Z2,Pge,E$o,C$o,sO,w$o,A$o,L$o,eb,Bge,y$o,x$o,lO,$$o,k$o,S$o,ob,Ige,R$o,P$o,iO,B$o,I$o,N$o,rb,Nge,q$o,j$o,dO,D$o,G$o,O$o,tb,qge,V$o,X$o,cO,z$o,Q$o,W$o,ab,jge,H$o,U$o,mO,J$o,Y$o,K$o,nb,Dge,Z$o,eko,fO,oko,rko,tko,sb,Gge,ako,nko,gO,sko,lko,iko,lb,Oge,dko,cko,hO,mko,fko,gko,ib,Vge,hko,uko,uO,pko,_ko,bko,db,Xge,vko,Fko,pO,Tko,Mko,Eko,cb,zge,Cko,wko,_O,Ako,Lko,yko,mb,Qge,xko,$ko,bO,kko,Sko,Rko,fb,Wge,Pko,Bko,vO,Iko,Nko,qko,gb,Hge,jko,Dko,FO,Gko,Oko,Vko,hb,Uge,Xko,zko,TO,Qko,Wko,Hko,ub,Jge,Uko,Jko,MO,Yko,Kko,Zko,pb,Yge,eSo,oSo,EO,rSo,tSo,aSo,_b,Kge,nSo,sSo,CO,lSo,iSo,dSo,bb,Zge,cSo,mSo,wO,fSo,gSo,hSo,vb,ehe,uSo,pSo,AO,_So,bSo,vSo,Fb,ohe,FSo,TSo,LO,MSo,ESo,CSo,Tb,rhe,wSo,ASo,yO,LSo,ySo,xSo,Mb,the,$So,kSo,xO,SSo,RSo,PSo,Eb,ahe,BSo,ISo,$O,NSo,qSo,jSo,Cb,nhe,DSo,GSo,kO,OSo,VSo,XSo,wb,she,zSo,QSo,SO,WSo,HSo,USo,Ab,lhe,JSo,YSo,RO,KSo,ZSo,eRo,Lb,ihe,oRo,rRo,PO,tRo,aRo,nRo,yb,dhe,sRo,lRo,BO,iRo,dRo,cRo,xb,che,mRo,fRo,IO,gRo,hRo,uRo,$b,pRo,mhe,_Ro,bRo,fhe,vRo,FRo,kb,pXe,Ji,Sb,ghe,zy,TRo,hhe,MRo,_Xe,Ro,Qy,ERo,Yi,CRo,NO,wRo,ARo,qO,LRo,yRo,xRo,Wy,$Ro,uhe,kRo,SRo,RRo,mt,Hy,PRo,phe,BRo,IRo,Ki,NRo,_he,qRo,jRo,jO,DRo,GRo,ORo,Rb,VRo,eo,Uy,XRo,bhe,zRo,QRo,ja,WRo,vhe,HRo,URo,Fhe,JRo,YRo,The,KRo,ZRo,ePo,W,Pb,Mhe,oPo,rPo,DO,tPo,aPo,nPo,Bb,Ehe,sPo,lPo,GO,iPo,dPo,cPo,Ib,Che,mPo,fPo,OO,gPo,hPo,uPo,Nb,whe,pPo,_Po,VO,bPo,vPo,FPo,qb,Ahe,TPo,MPo,XO,EPo,CPo,wPo,jb,Lhe,APo,LPo,zO,yPo,xPo,$Po,Db,yhe,kPo,SPo,QO,RPo,PPo,BPo,Gb,xhe,IPo,NPo,WO,qPo,jPo,DPo,Ob,$he,GPo,OPo,HO,VPo,XPo,zPo,Vb,khe,QPo,WPo,UO,HPo,UPo,JPo,Xb,She,YPo,KPo,JO,ZPo,eBo,oBo,zb,Rhe,rBo,tBo,YO,aBo,nBo,sBo,Qb,Phe,lBo,iBo,KO,dBo,cBo,mBo,Wb,Bhe,fBo,gBo,ZO,hBo,uBo,pBo,Hb,Ihe,_Bo,bBo,eV,vBo,FBo,TBo,Ub,Nhe,MBo,EBo,oV,CBo,wBo,ABo,Jb,qhe,LBo,yBo,rV,xBo,$Bo,kBo,Yb,jhe,SBo,RBo,tV,PBo,BBo,IBo,Kb,Dhe,NBo,qBo,aV,jBo,DBo,GBo,Zb,Ghe,OBo,VBo,nV,XBo,zBo,QBo,ev,Ohe,WBo,HBo,sV,UBo,JBo,YBo,ov,Vhe,KBo,ZBo,lV,eIo,oIo,rIo,rv,Xhe,tIo,aIo,iV,nIo,sIo,lIo,tv,zhe,iIo,dIo,dV,cIo,mIo,fIo,av,Qhe,gIo,hIo,cV,uIo,pIo,_Io,nv,Whe,bIo,vIo,mV,FIo,TIo,MIo,sv,Hhe,EIo,CIo,fV,wIo,AIo,LIo,lv,Uhe,yIo,xIo,gV,$Io,kIo,SIo,iv,Jhe,RIo,PIo,hV,BIo,IIo,NIo,dv,Yhe,qIo,jIo,uV,DIo,GIo,OIo,cv,Khe,VIo,XIo,pV,zIo,QIo,WIo,mv,Zhe,HIo,UIo,_V,JIo,YIo,KIo,fv,eue,ZIo,eNo,bV,oNo,rNo,tNo,gv,oue,aNo,nNo,rue,sNo,lNo,iNo,hv,tue,dNo,cNo,vV,mNo,fNo,gNo,uv,aue,hNo,uNo,FV,pNo,_No,bNo,pv,nue,vNo,FNo,TV,TNo,MNo,ENo,_v,sue,CNo,wNo,MV,ANo,LNo,yNo,bv,xNo,lue,$No,kNo,iue,SNo,RNo,vv,bXe,Zi,Fv,due,Jy,PNo,cue,BNo,vXe,Po,Yy,INo,ed,NNo,EV,qNo,jNo,CV,DNo,GNo,ONo,Ky,VNo,mue,XNo,zNo,QNo,ft,Zy,WNo,fue,HNo,UNo,od,JNo,gue,YNo,KNo,wV,ZNo,eqo,oqo,Tv,rqo,oo,e8,tqo,hue,aqo,nqo,Da,sqo,uue,lqo,iqo,pue,dqo,cqo,_ue,mqo,fqo,gqo,ue,Mv,bue,hqo,uqo,AV,pqo,_qo,bqo,Ev,vue,vqo,Fqo,LV,Tqo,Mqo,Eqo,Cv,Fue,Cqo,wqo,yV,Aqo,Lqo,yqo,wv,Tue,xqo,$qo,xV,kqo,Sqo,Rqo,Av,Mue,Pqo,Bqo,$V,Iqo,Nqo,qqo,Lv,Eue,jqo,Dqo,kV,Gqo,Oqo,Vqo,yv,Cue,Xqo,zqo,SV,Qqo,Wqo,Hqo,xv,wue,Uqo,Jqo,RV,Yqo,Kqo,Zqo,$v,Aue,ejo,ojo,PV,rjo,tjo,ajo,kv,Lue,njo,sjo,BV,ljo,ijo,djo,Sv,yue,cjo,mjo,IV,fjo,gjo,hjo,Rv,xue,ujo,pjo,NV,_jo,bjo,vjo,Pv,$ue,Fjo,Tjo,qV,Mjo,Ejo,Cjo,Bv,kue,wjo,Ajo,jV,Ljo,yjo,xjo,Iv,Sue,$jo,kjo,DV,Sjo,Rjo,Pjo,Nv,Rue,Bjo,Ijo,GV,Njo,qjo,jjo,qv,Pue,Djo,Gjo,OV,Ojo,Vjo,Xjo,jv,Bue,zjo,Qjo,VV,Wjo,Hjo,Ujo,Dv,Jjo,Iue,Yjo,Kjo,Nue,Zjo,eDo,Gv,FXe,rd,Ov,que,o8,oDo,jue,rDo,TXe,Bo,r8,tDo,td,aDo,XV,nDo,sDo,zV,lDo,iDo,dDo,t8,cDo,Due,mDo,fDo,gDo,gt,a8,hDo,Gue,uDo,pDo,ad,_Do,Oue,bDo,vDo,QV,FDo,TDo,MDo,Vv,EDo,ro,n8,CDo,Vue,wDo,ADo,Ga,LDo,Xue,yDo,xDo,zue,$Do,kDo,Que,SDo,RDo,PDo,N,Xv,Wue,BDo,IDo,WV,NDo,qDo,jDo,zv,Hue,DDo,GDo,HV,ODo,VDo,XDo,Qv,Uue,zDo,QDo,UV,WDo,HDo,UDo,Wv,Jue,JDo,YDo,JV,KDo,ZDo,eGo,Hv,Yue,oGo,rGo,YV,tGo,aGo,nGo,Uv,Kue,sGo,lGo,KV,iGo,dGo,cGo,Jv,Zue,mGo,fGo,ZV,gGo,hGo,uGo,Yv,epe,pGo,_Go,eX,bGo,vGo,FGo,Kv,ope,TGo,MGo,oX,EGo,CGo,wGo,Zv,rpe,AGo,LGo,rX,yGo,xGo,$Go,e1,tpe,kGo,SGo,tX,RGo,PGo,BGo,o1,ape,IGo,NGo,aX,qGo,jGo,DGo,r1,npe,GGo,OGo,nX,VGo,XGo,zGo,t1,spe,QGo,WGo,sX,HGo,UGo,JGo,a1,lpe,YGo,KGo,lX,ZGo,eOo,oOo,n1,ipe,rOo,tOo,iX,aOo,nOo,sOo,s1,dpe,lOo,iOo,dX,dOo,cOo,mOo,l1,cpe,fOo,gOo,cX,hOo,uOo,pOo,i1,mpe,_Oo,bOo,mX,vOo,FOo,TOo,d1,fpe,MOo,EOo,fX,COo,wOo,AOo,c1,gpe,LOo,yOo,gX,xOo,$Oo,kOo,m1,hpe,SOo,ROo,hX,POo,BOo,IOo,f1,upe,NOo,qOo,uX,jOo,DOo,GOo,g1,ppe,OOo,VOo,pX,XOo,zOo,QOo,h1,_pe,WOo,HOo,_X,UOo,JOo,YOo,u1,bpe,KOo,ZOo,bX,eVo,oVo,rVo,p1,vpe,tVo,aVo,vX,nVo,sVo,lVo,_1,Fpe,iVo,dVo,FX,cVo,mVo,fVo,b1,Tpe,gVo,hVo,TX,uVo,pVo,_Vo,v1,Mpe,bVo,vVo,MX,FVo,TVo,MVo,F1,Epe,EVo,CVo,EX,wVo,AVo,LVo,T1,Cpe,yVo,xVo,CX,$Vo,kVo,SVo,M1,wpe,RVo,PVo,wX,BVo,IVo,NVo,E1,Ape,qVo,jVo,AX,DVo,GVo,OVo,C1,Lpe,VVo,XVo,LX,zVo,QVo,WVo,w1,ype,HVo,UVo,yX,JVo,YVo,KVo,A1,xpe,ZVo,eXo,xX,oXo,rXo,tXo,L1,$pe,aXo,nXo,$X,sXo,lXo,iXo,y1,kpe,dXo,cXo,kX,mXo,fXo,gXo,x1,Spe,hXo,uXo,SX,pXo,_Xo,bXo,$1,Rpe,vXo,FXo,RX,TXo,MXo,EXo,k1,Ppe,CXo,wXo,PX,AXo,LXo,yXo,S1,Bpe,xXo,$Xo,BX,kXo,SXo,RXo,R1,Ipe,PXo,BXo,IX,IXo,NXo,qXo,P1,Npe,jXo,DXo,NX,GXo,OXo,VXo,B1,qpe,XXo,zXo,qX,QXo,WXo,HXo,I1,jpe,UXo,JXo,jX,YXo,KXo,ZXo,N1,Dpe,ezo,ozo,DX,rzo,tzo,azo,q1,Gpe,nzo,szo,GX,lzo,izo,dzo,j1,Ope,czo,mzo,OX,fzo,gzo,hzo,D1,uzo,Vpe,pzo,_zo,Xpe,bzo,vzo,G1,MXe,nd,O1,zpe,s8,Fzo,Qpe,Tzo,EXe,Io,l8,Mzo,sd,Ezo,VX,Czo,wzo,XX,Azo,Lzo,yzo,i8,xzo,Wpe,$zo,kzo,Szo,ht,d8,Rzo,Hpe,Pzo,Bzo,ld,Izo,Upe,Nzo,qzo,zX,jzo,Dzo,Gzo,V1,Ozo,to,c8,Vzo,Jpe,Xzo,zzo,Oa,Qzo,Ype,Wzo,Hzo,Kpe,Uzo,Jzo,Zpe,Yzo,Kzo,Zzo,Z,X1,e_e,eQo,oQo,QX,rQo,tQo,aQo,z1,o_e,nQo,sQo,WX,lQo,iQo,dQo,Q1,r_e,cQo,mQo,HX,fQo,gQo,hQo,W1,t_e,uQo,pQo,UX,_Qo,bQo,vQo,H1,a_e,FQo,TQo,JX,MQo,EQo,CQo,U1,n_e,wQo,AQo,YX,LQo,yQo,xQo,J1,s_e,$Qo,kQo,KX,SQo,RQo,PQo,Y1,l_e,BQo,IQo,ZX,NQo,qQo,jQo,K1,i_e,DQo,GQo,ez,OQo,VQo,XQo,Z1,d_e,zQo,QQo,oz,WQo,HQo,UQo,eF,c_e,JQo,YQo,rz,KQo,ZQo,eWo,oF,m_e,oWo,rWo,tz,tWo,aWo,nWo,rF,f_e,sWo,lWo,az,iWo,dWo,cWo,tF,g_e,mWo,fWo,nz,gWo,hWo,uWo,aF,h_e,pWo,_Wo,sz,bWo,vWo,FWo,nF,u_e,TWo,MWo,lz,EWo,CWo,wWo,sF,p_e,AWo,LWo,iz,yWo,xWo,$Wo,lF,__e,kWo,SWo,dz,RWo,PWo,BWo,iF,b_e,IWo,NWo,cz,qWo,jWo,DWo,dF,v_e,GWo,OWo,mz,VWo,XWo,zWo,cF,F_e,QWo,WWo,fz,HWo,UWo,JWo,mF,T_e,YWo,KWo,gz,ZWo,eHo,oHo,fF,M_e,rHo,tHo,hz,aHo,nHo,sHo,gF,E_e,lHo,iHo,uz,dHo,cHo,mHo,hF,C_e,fHo,gHo,pz,hHo,uHo,pHo,uF,w_e,_Ho,bHo,_z,vHo,FHo,THo,pF,A_e,MHo,EHo,bz,CHo,wHo,AHo,_F,L_e,LHo,yHo,vz,xHo,$Ho,kHo,bF,y_e,SHo,RHo,Fz,PHo,BHo,IHo,vF,x_e,NHo,qHo,Tz,jHo,DHo,GHo,FF,OHo,$_e,VHo,XHo,k_e,zHo,QHo,TF,CXe,id,MF,S_e,m8,WHo,R_e,HHo,wXe,No,f8,UHo,dd,JHo,Mz,YHo,KHo,Ez,ZHo,eUo,oUo,g8,rUo,P_e,tUo,aUo,nUo,ut,h8,sUo,B_e,lUo,iUo,cd,dUo,I_e,cUo,mUo,Cz,fUo,gUo,hUo,EF,uUo,ao,u8,pUo,N_e,_Uo,bUo,Va,vUo,q_e,FUo,TUo,j_e,MUo,EUo,D_e,CUo,wUo,AUo,qo,CF,G_e,LUo,yUo,wz,xUo,$Uo,kUo,wF,O_e,SUo,RUo,Az,PUo,BUo,IUo,AF,V_e,NUo,qUo,Lz,jUo,DUo,GUo,LF,X_e,OUo,VUo,yz,XUo,zUo,QUo,yF,z_e,WUo,HUo,xz,UUo,JUo,YUo,xF,Q_e,KUo,ZUo,$z,eJo,oJo,rJo,$F,tJo,W_e,aJo,nJo,H_e,sJo,lJo,kF,AXe,md,SF,U_e,p8,iJo,J_e,dJo,LXe,jo,_8,cJo,fd,mJo,kz,fJo,gJo,Sz,hJo,uJo,pJo,b8,_Jo,Y_e,bJo,vJo,FJo,pt,v8,TJo,K_e,MJo,EJo,gd,CJo,Z_e,wJo,AJo,Rz,LJo,yJo,xJo,RF,$Jo,no,F8,kJo,e2e,SJo,RJo,Xa,PJo,o2e,BJo,IJo,r2e,NJo,qJo,t2e,jJo,DJo,GJo,U,PF,a2e,OJo,VJo,Pz,XJo,zJo,QJo,BF,n2e,WJo,HJo,Bz,UJo,JJo,YJo,IF,s2e,KJo,ZJo,Iz,eYo,oYo,rYo,NF,l2e,tYo,aYo,Nz,nYo,sYo,lYo,qF,i2e,iYo,dYo,qz,cYo,mYo,fYo,jF,d2e,gYo,hYo,jz,uYo,pYo,_Yo,DF,c2e,bYo,vYo,Dz,FYo,TYo,MYo,GF,m2e,EYo,CYo,Gz,wYo,AYo,LYo,OF,f2e,yYo,xYo,Oz,$Yo,kYo,SYo,VF,g2e,RYo,PYo,Vz,BYo,IYo,NYo,XF,h2e,qYo,jYo,Xz,DYo,GYo,OYo,zF,u2e,VYo,XYo,zz,zYo,QYo,WYo,QF,p2e,HYo,UYo,Qz,JYo,YYo,KYo,WF,_2e,ZYo,eKo,Wz,oKo,rKo,tKo,HF,b2e,aKo,nKo,Hz,sKo,lKo,iKo,UF,v2e,dKo,cKo,Uz,mKo,fKo,gKo,JF,F2e,hKo,uKo,Jz,pKo,_Ko,bKo,YF,T2e,vKo,FKo,Yz,TKo,MKo,EKo,KF,M2e,CKo,wKo,Kz,AKo,LKo,yKo,ZF,E2e,xKo,$Ko,Zz,kKo,SKo,RKo,eT,C2e,PKo,BKo,eQ,IKo,NKo,qKo,oT,w2e,jKo,DKo,oQ,GKo,OKo,VKo,rT,A2e,XKo,zKo,rQ,QKo,WKo,HKo,tT,L2e,UKo,JKo,tQ,YKo,KKo,ZKo,aT,y2e,eZo,oZo,aQ,rZo,tZo,aZo,nT,x2e,nZo,sZo,nQ,lZo,iZo,dZo,sT,$2e,cZo,mZo,sQ,fZo,gZo,hZo,lT,k2e,uZo,pZo,lQ,_Zo,bZo,vZo,iT,S2e,FZo,TZo,iQ,MZo,EZo,CZo,dT,R2e,wZo,AZo,dQ,LZo,yZo,xZo,cT,P2e,$Zo,kZo,cQ,SZo,RZo,PZo,mT,B2e,BZo,IZo,mQ,NZo,qZo,jZo,fT,I2e,DZo,GZo,fQ,OZo,VZo,XZo,gT,N2e,zZo,QZo,gQ,WZo,HZo,UZo,hT,q2e,JZo,YZo,hQ,KZo,ZZo,eer,uT,j2e,oer,rer,uQ,ter,aer,ner,pT,ser,D2e,ler,ier,G2e,der,cer,_T,yXe,hd,bT,O2e,T8,mer,V2e,fer,xXe,Do,M8,ger,ud,her,pQ,uer,per,_Q,_er,ber,ver,E8,Fer,X2e,Ter,Mer,Eer,_t,C8,Cer,z2e,wer,Aer,pd,Ler,Q2e,yer,xer,bQ,$er,ker,Ser,vT,Rer,so,w8,Per,W2e,Ber,Ier,za,Ner,H2e,qer,jer,U2e,Der,Ger,J2e,Oer,Ver,Xer,V,FT,Y2e,zer,Qer,vQ,Wer,Her,Uer,TT,K2e,Jer,Yer,FQ,Ker,Zer,eor,MT,Z2e,oor,ror,TQ,tor,aor,nor,ET,ebe,sor,lor,MQ,ior,dor,cor,CT,obe,mor,gor,EQ,hor,uor,por,wT,rbe,_or,bor,CQ,vor,For,Tor,AT,tbe,Mor,Eor,wQ,Cor,wor,Aor,LT,abe,Lor,yor,AQ,xor,$or,kor,yT,nbe,Sor,Ror,LQ,Por,Bor,Ior,xT,sbe,Nor,qor,yQ,jor,Dor,Gor,$T,lbe,Oor,Vor,xQ,Xor,zor,Qor,kT,ibe,Wor,Hor,$Q,Uor,Jor,Yor,ST,dbe,Kor,Zor,kQ,err,orr,rrr,RT,cbe,trr,arr,SQ,nrr,srr,lrr,PT,mbe,irr,drr,RQ,crr,mrr,frr,BT,fbe,grr,hrr,PQ,urr,prr,_rr,IT,gbe,brr,vrr,BQ,Frr,Trr,Mrr,NT,hbe,Err,Crr,IQ,wrr,Arr,Lrr,qT,ube,yrr,xrr,NQ,$rr,krr,Srr,jT,pbe,Rrr,Prr,qQ,Brr,Irr,Nrr,DT,_be,qrr,jrr,jQ,Drr,Grr,Orr,GT,bbe,Vrr,Xrr,DQ,zrr,Qrr,Wrr,OT,vbe,Hrr,Urr,GQ,Jrr,Yrr,Krr,VT,Fbe,Zrr,etr,OQ,otr,rtr,ttr,XT,Tbe,atr,ntr,VQ,str,ltr,itr,zT,Mbe,dtr,ctr,XQ,mtr,ftr,gtr,QT,Ebe,htr,utr,zQ,ptr,_tr,btr,WT,Cbe,vtr,Ftr,QQ,Ttr,Mtr,Etr,HT,wbe,Ctr,wtr,WQ,Atr,Ltr,ytr,UT,Abe,xtr,$tr,HQ,ktr,Str,Rtr,JT,Lbe,Ptr,Btr,UQ,Itr,Ntr,qtr,YT,ybe,jtr,Dtr,JQ,Gtr,Otr,Vtr,KT,xbe,Xtr,ztr,YQ,Qtr,Wtr,Htr,ZT,$be,Utr,Jtr,KQ,Ytr,Ktr,Ztr,eM,kbe,ear,oar,ZQ,rar,tar,aar,oM,Sbe,nar,sar,eW,lar,iar,dar,rM,Rbe,car,mar,oW,far,gar,har,tM,Pbe,uar,par,rW,_ar,bar,Far,aM,Bbe,Tar,Mar,tW,Ear,Car,war,nM,Ibe,Aar,Lar,aW,yar,xar,$ar,sM,Nbe,kar,Sar,nW,Rar,Par,Bar,lM,qbe,Iar,Nar,sW,qar,jar,Dar,iM,Gar,jbe,Oar,Var,Dbe,Xar,zar,dM,$Xe,_d,cM,Gbe,A8,Qar,Obe,War,kXe,Go,L8,Har,bd,Uar,lW,Jar,Yar,iW,Kar,Zar,enr,y8,onr,Vbe,rnr,tnr,anr,bt,x8,nnr,Xbe,snr,lnr,vd,inr,zbe,dnr,cnr,dW,mnr,fnr,gnr,mM,hnr,lo,$8,unr,Qbe,pnr,_nr,Qa,bnr,Wbe,vnr,Fnr,Hbe,Tnr,Mnr,Ube,Enr,Cnr,wnr,Jbe,fM,Ybe,Anr,Lnr,cW,ynr,xnr,$nr,gM,knr,Kbe,Snr,Rnr,Zbe,Pnr,Bnr,hM,SXe,Fd,uM,eve,k8,Inr,ove,Nnr,RXe,Oo,S8,qnr,Td,jnr,mW,Dnr,Gnr,fW,Onr,Vnr,Xnr,R8,znr,rve,Qnr,Wnr,Hnr,vt,P8,Unr,tve,Jnr,Ynr,Md,Knr,ave,Znr,esr,gW,osr,rsr,tsr,pM,asr,io,B8,nsr,nve,ssr,lsr,Wa,isr,sve,dsr,csr,lve,msr,fsr,ive,gsr,hsr,usr,ve,_M,dve,psr,_sr,hW,bsr,vsr,Fsr,bM,cve,Tsr,Msr,uW,Esr,Csr,wsr,vM,mve,Asr,Lsr,pW,ysr,xsr,$sr,FM,fve,ksr,Ssr,_W,Rsr,Psr,Bsr,Hs,gve,Isr,Nsr,bW,qsr,jsr,vW,Dsr,Gsr,Osr,TM,hve,Vsr,Xsr,FW,zsr,Qsr,Wsr,Us,uve,Hsr,Usr,TW,Jsr,Ysr,MW,Ksr,Zsr,elr,MM,pve,olr,rlr,EW,tlr,alr,nlr,Ft,_ve,slr,llr,CW,ilr,dlr,wW,clr,mlr,AW,flr,glr,hlr,EM,bve,ulr,plr,LW,_lr,blr,vlr,CM,vve,Flr,Tlr,yW,Mlr,Elr,Clr,wM,Fve,wlr,Alr,xW,Llr,ylr,xlr,AM,Tve,$lr,klr,$W,Slr,Rlr,Plr,LM,Mve,Blr,Ilr,kW,Nlr,qlr,jlr,yM,Eve,Dlr,Glr,SW,Olr,Vlr,Xlr,xM,Cve,zlr,Qlr,RW,Wlr,Hlr,Ulr,$M,Jlr,wve,Ylr,Klr,Ave,Zlr,eir,kM,PXe,Ed,SM,Lve,I8,oir,yve,rir,BXe,Vo,N8,tir,Cd,air,PW,nir,sir,BW,lir,iir,dir,q8,cir,xve,mir,fir,gir,Tt,j8,hir,$ve,uir,pir,wd,_ir,kve,bir,vir,IW,Fir,Tir,Mir,RM,Eir,co,D8,Cir,Sve,wir,Air,Ha,Lir,Rve,yir,xir,Pve,$ir,kir,Bve,Sir,Rir,Pir,Ive,PM,Nve,Bir,Iir,NW,Nir,qir,jir,BM,Dir,qve,Gir,Oir,jve,Vir,Xir,IM,IXe,Ad,NM,Dve,G8,zir,Gve,Qir,NXe,Xo,O8,Wir,Ld,Hir,qW,Uir,Jir,jW,Yir,Kir,Zir,V8,edr,Ove,odr,rdr,tdr,Mt,X8,adr,Vve,ndr,sdr,yd,ldr,Xve,idr,ddr,DW,cdr,mdr,fdr,qM,gdr,mo,z8,hdr,zve,udr,pdr,Ua,_dr,Qve,bdr,vdr,Wve,Fdr,Tdr,Hve,Mdr,Edr,Cdr,Uve,jM,Jve,wdr,Adr,GW,Ldr,ydr,xdr,DM,$dr,Yve,kdr,Sdr,Kve,Rdr,Pdr,GM,qXe,xd,OM,Zve,Q8,Bdr,e1e,Idr,jXe,zo,W8,Ndr,$d,qdr,OW,jdr,Ddr,VW,Gdr,Odr,Vdr,H8,Xdr,o1e,zdr,Qdr,Wdr,Et,U8,Hdr,r1e,Udr,Jdr,kd,Ydr,t1e,Kdr,Zdr,XW,ecr,ocr,rcr,VM,tcr,fo,J8,acr,a1e,ncr,scr,Ja,lcr,n1e,icr,dcr,s1e,ccr,mcr,l1e,fcr,gcr,hcr,Pe,XM,i1e,ucr,pcr,zW,_cr,bcr,vcr,zM,d1e,Fcr,Tcr,QW,Mcr,Ecr,Ccr,QM,c1e,wcr,Acr,WW,Lcr,ycr,xcr,WM,m1e,$cr,kcr,HW,Scr,Rcr,Pcr,HM,f1e,Bcr,Icr,UW,Ncr,qcr,jcr,UM,g1e,Dcr,Gcr,JW,Ocr,Vcr,Xcr,JM,h1e,zcr,Qcr,YW,Wcr,Hcr,Ucr,YM,u1e,Jcr,Ycr,KW,Kcr,Zcr,emr,KM,p1e,omr,rmr,ZW,tmr,amr,nmr,ZM,smr,_1e,lmr,imr,b1e,dmr,cmr,e4,DXe,Sd,o4,v1e,Y8,mmr,F1e,fmr,GXe,Qo,K8,gmr,Rd,hmr,eH,umr,pmr,oH,_mr,bmr,vmr,Z8,Fmr,T1e,Tmr,Mmr,Emr,Ct,e9,Cmr,M1e,wmr,Amr,Pd,Lmr,E1e,ymr,xmr,rH,$mr,kmr,Smr,r4,Rmr,go,o9,Pmr,C1e,Bmr,Imr,Ya,Nmr,w1e,qmr,jmr,A1e,Dmr,Gmr,L1e,Omr,Vmr,Xmr,rt,t4,y1e,zmr,Qmr,tH,Wmr,Hmr,Umr,a4,x1e,Jmr,Ymr,aH,Kmr,Zmr,efr,n4,$1e,ofr,rfr,nH,tfr,afr,nfr,s4,k1e,sfr,lfr,sH,ifr,dfr,cfr,l4,S1e,mfr,ffr,lH,gfr,hfr,ufr,i4,pfr,R1e,_fr,bfr,P1e,vfr,Ffr,d4,OXe,Bd,c4,B1e,r9,Tfr,I1e,Mfr,VXe,Wo,t9,Efr,Id,Cfr,iH,wfr,Afr,dH,Lfr,yfr,xfr,a9,$fr,N1e,kfr,Sfr,Rfr,wt,n9,Pfr,q1e,Bfr,Ifr,Nd,Nfr,j1e,qfr,jfr,cH,Dfr,Gfr,Ofr,m4,Vfr,ho,s9,Xfr,D1e,zfr,Qfr,Ka,Wfr,G1e,Hfr,Ufr,O1e,Jfr,Yfr,V1e,Kfr,Zfr,egr,Le,f4,X1e,ogr,rgr,mH,tgr,agr,ngr,g4,z1e,sgr,lgr,fH,igr,dgr,cgr,h4,Q1e,mgr,fgr,gH,ggr,hgr,ugr,u4,W1e,pgr,_gr,hH,bgr,vgr,Fgr,p4,H1e,Tgr,Mgr,uH,Egr,Cgr,wgr,_4,U1e,Agr,Lgr,pH,ygr,xgr,$gr,b4,J1e,kgr,Sgr,_H,Rgr,Pgr,Bgr,v4,Y1e,Igr,Ngr,bH,qgr,jgr,Dgr,F4,K1e,Ggr,Ogr,vH,Vgr,Xgr,zgr,T4,Z1e,Qgr,Wgr,FH,Hgr,Ugr,Jgr,M4,Ygr,eFe,Kgr,Zgr,oFe,ehr,ohr,E4,XXe,qd,C4,rFe,l9,rhr,tFe,thr,zXe,Ho,i9,ahr,jd,nhr,TH,shr,lhr,MH,ihr,dhr,chr,d9,mhr,aFe,fhr,ghr,hhr,At,c9,uhr,nFe,phr,_hr,Dd,bhr,sFe,vhr,Fhr,EH,Thr,Mhr,Ehr,w4,Chr,uo,m9,whr,lFe,Ahr,Lhr,Za,yhr,iFe,xhr,$hr,dFe,khr,Shr,cFe,Rhr,Phr,Bhr,f9,A4,mFe,Ihr,Nhr,CH,qhr,jhr,Dhr,L4,fFe,Ghr,Ohr,wH,Vhr,Xhr,zhr,y4,Qhr,gFe,Whr,Hhr,hFe,Uhr,Jhr,x4,QXe,Gd,$4,uFe,g9,Yhr,pFe,Khr,WXe,Uo,h9,Zhr,Od,eur,AH,our,rur,LH,tur,aur,nur,u9,sur,_Fe,lur,iur,dur,Lt,p9,cur,bFe,mur,fur,Vd,gur,vFe,hur,uur,yH,pur,_ur,bur,k4,vur,po,_9,Fur,FFe,Tur,Mur,en,Eur,TFe,Cur,wur,MFe,Aur,Lur,EFe,yur,xur,$ur,tt,S4,CFe,kur,Sur,xH,Rur,Pur,Bur,R4,wFe,Iur,Nur,$H,qur,jur,Dur,P4,AFe,Gur,Our,kH,Vur,Xur,zur,B4,LFe,Qur,Wur,SH,Hur,Uur,Jur,I4,yFe,Yur,Kur,RH,Zur,epr,opr,N4,rpr,xFe,tpr,apr,$Fe,npr,spr,q4,HXe,Xd,j4,kFe,b9,lpr,SFe,ipr,UXe,Jo,v9,dpr,zd,cpr,PH,mpr,fpr,BH,gpr,hpr,upr,F9,ppr,RFe,_pr,bpr,vpr,yt,T9,Fpr,PFe,Tpr,Mpr,Qd,Epr,BFe,Cpr,wpr,IH,Apr,Lpr,ypr,D4,xpr,_o,M9,$pr,IFe,kpr,Spr,on,Rpr,NFe,Ppr,Bpr,qFe,Ipr,Npr,jFe,qpr,jpr,Dpr,Wd,G4,DFe,Gpr,Opr,NH,Vpr,Xpr,zpr,O4,GFe,Qpr,Wpr,qH,Hpr,Upr,Jpr,V4,OFe,Ypr,Kpr,jH,Zpr,e_r,o_r,X4,r_r,VFe,t_r,a_r,XFe,n_r,s_r,z4,JXe,Hd,Q4,zFe,E9,l_r,QFe,i_r,YXe,Yo,C9,d_r,Ud,c_r,DH,m_r,f_r,GH,g_r,h_r,u_r,w9,p_r,WFe,__r,b_r,v_r,xt,A9,F_r,HFe,T_r,M_r,Jd,E_r,UFe,C_r,w_r,OH,A_r,L_r,y_r,W4,x_r,bo,L9,$_r,JFe,k_r,S_r,rn,R_r,YFe,P_r,B_r,KFe,I_r,N_r,ZFe,q_r,j_r,D_r,y9,H4,eTe,G_r,O_r,VH,V_r,X_r,z_r,U4,oTe,Q_r,W_r,XH,H_r,U_r,J_r,J4,Y_r,rTe,K_r,Z_r,tTe,e2r,o2r,Y4,KXe,Yd,K4,aTe,x9,r2r,nTe,t2r,ZXe,Ko,$9,a2r,Kd,n2r,zH,s2r,l2r,QH,i2r,d2r,c2r,k9,m2r,sTe,f2r,g2r,h2r,$t,S9,u2r,lTe,p2r,_2r,Zd,b2r,iTe,v2r,F2r,WH,T2r,M2r,E2r,Z4,C2r,vo,R9,w2r,dTe,A2r,L2r,tn,y2r,cTe,x2r,$2r,mTe,k2r,S2r,fTe,R2r,P2r,B2r,gTe,eE,hTe,I2r,N2r,HH,q2r,j2r,D2r,oE,G2r,uTe,O2r,V2r,pTe,X2r,z2r,rE,eze,ec,tE,_Te,P9,Q2r,bTe,W2r,oze,Zo,B9,H2r,oc,U2r,UH,J2r,Y2r,JH,K2r,Z2r,ebr,I9,obr,vTe,rbr,tbr,abr,kt,N9,nbr,FTe,sbr,lbr,rc,ibr,TTe,dbr,cbr,YH,mbr,fbr,gbr,aE,hbr,Fo,q9,ubr,MTe,pbr,_br,an,bbr,ETe,vbr,Fbr,CTe,Tbr,Mbr,wTe,Ebr,Cbr,wbr,at,nE,ATe,Abr,Lbr,KH,ybr,xbr,$br,sE,LTe,kbr,Sbr,ZH,Rbr,Pbr,Bbr,lE,yTe,Ibr,Nbr,eU,qbr,jbr,Dbr,iE,xTe,Gbr,Obr,oU,Vbr,Xbr,zbr,dE,$Te,Qbr,Wbr,rU,Hbr,Ubr,Jbr,cE,Ybr,kTe,Kbr,Zbr,STe,evr,ovr,mE,rze,tc,fE,RTe,j9,rvr,PTe,tvr,tze,er,D9,avr,ac,nvr,tU,svr,lvr,aU,ivr,dvr,cvr,G9,mvr,BTe,fvr,gvr,hvr,St,O9,uvr,ITe,pvr,_vr,nc,bvr,NTe,vvr,Fvr,nU,Tvr,Mvr,Evr,gE,Cvr,To,V9,wvr,qTe,Avr,Lvr,nn,yvr,jTe,xvr,$vr,DTe,kvr,Svr,GTe,Rvr,Pvr,Bvr,OTe,hE,VTe,Ivr,Nvr,sU,qvr,jvr,Dvr,uE,Gvr,XTe,Ovr,Vvr,zTe,Xvr,zvr,pE,aze,sc,_E,QTe,X9,Qvr,WTe,Wvr,nze,or,z9,Hvr,lc,Uvr,lU,Jvr,Yvr,iU,Kvr,Zvr,e1r,Q9,o1r,HTe,r1r,t1r,a1r,Rt,W9,n1r,UTe,s1r,l1r,ic,i1r,JTe,d1r,c1r,dU,m1r,f1r,g1r,bE,h1r,xr,H9,u1r,YTe,p1r,_1r,sn,b1r,KTe,v1r,F1r,ZTe,T1r,M1r,eMe,E1r,C1r,w1r,q,vE,oMe,A1r,L1r,cU,y1r,x1r,$1r,FE,rMe,k1r,S1r,mU,R1r,P1r,B1r,TE,tMe,I1r,N1r,fU,q1r,j1r,D1r,ME,aMe,G1r,O1r,gU,V1r,X1r,z1r,EE,nMe,Q1r,W1r,hU,H1r,U1r,J1r,CE,sMe,Y1r,K1r,uU,Z1r,eFr,oFr,wE,lMe,rFr,tFr,pU,aFr,nFr,sFr,AE,iMe,lFr,iFr,_U,dFr,cFr,mFr,LE,dMe,fFr,gFr,bU,hFr,uFr,pFr,yE,cMe,_Fr,bFr,vU,vFr,FFr,TFr,xE,mMe,MFr,EFr,FU,CFr,wFr,AFr,$E,fMe,LFr,yFr,TU,xFr,$Fr,kFr,kE,gMe,SFr,RFr,MU,PFr,BFr,IFr,SE,hMe,NFr,qFr,EU,jFr,DFr,GFr,RE,uMe,OFr,VFr,CU,XFr,zFr,QFr,PE,pMe,WFr,HFr,wU,UFr,JFr,YFr,BE,_Me,KFr,ZFr,AU,eTr,oTr,rTr,IE,bMe,tTr,aTr,LU,nTr,sTr,lTr,Js,vMe,iTr,dTr,yU,cTr,mTr,xU,fTr,gTr,hTr,NE,FMe,uTr,pTr,$U,_Tr,bTr,vTr,qE,TMe,FTr,TTr,kU,MTr,ETr,CTr,jE,MMe,wTr,ATr,SU,LTr,yTr,xTr,DE,EMe,$Tr,kTr,RU,STr,RTr,PTr,GE,CMe,BTr,ITr,PU,NTr,qTr,jTr,OE,wMe,DTr,GTr,BU,OTr,VTr,XTr,VE,AMe,zTr,QTr,IU,WTr,HTr,UTr,XE,LMe,JTr,YTr,NU,KTr,ZTr,eMr,zE,yMe,oMr,rMr,qU,tMr,aMr,nMr,QE,xMe,sMr,lMr,jU,iMr,dMr,cMr,WE,$Me,mMr,fMr,DU,gMr,hMr,uMr,HE,kMe,pMr,_Mr,GU,bMr,vMr,FMr,UE,SMe,TMr,MMr,OU,EMr,CMr,wMr,JE,RMe,AMr,LMr,VU,yMr,xMr,$Mr,YE,PMe,kMr,SMr,XU,RMr,PMr,BMr,KE,BMe,IMr,NMr,zU,qMr,jMr,DMr,ZE,IMe,GMr,OMr,QU,VMr,XMr,zMr,eC,NMe,QMr,WMr,WU,HMr,UMr,JMr,oC,qMe,YMr,KMr,HU,ZMr,e4r,o4r,rC,jMe,r4r,t4r,UU,a4r,n4r,s4r,tC,DMe,l4r,i4r,JU,d4r,c4r,m4r,aC,GMe,f4r,g4r,YU,h4r,u4r,p4r,nC,OMe,_4r,b4r,KU,v4r,F4r,T4r,sC,VMe,M4r,E4r,ZU,C4r,w4r,A4r,lC,XMe,L4r,y4r,eJ,x4r,$4r,k4r,iC,zMe,S4r,R4r,oJ,P4r,B4r,I4r,dC,QMe,N4r,q4r,rJ,j4r,D4r,G4r,cC,WMe,O4r,V4r,tJ,X4r,z4r,Q4r,mC,HMe,W4r,H4r,aJ,U4r,J4r,Y4r,fC,UMe,K4r,Z4r,nJ,eEr,oEr,rEr,gC,JMe,tEr,aEr,sJ,nEr,sEr,lEr,hC,sze,dc,uC,YMe,U9,iEr,KMe,dEr,lze,rr,J9,cEr,cc,mEr,lJ,fEr,gEr,iJ,hEr,uEr,pEr,Y9,_Er,ZMe,bEr,vEr,FEr,Pt,K9,TEr,e4e,MEr,EEr,mc,CEr,o4e,wEr,AEr,dJ,LEr,yEr,xEr,pC,$Er,$r,Z9,kEr,r4e,SEr,REr,ln,PEr,t4e,BEr,IEr,a4e,NEr,qEr,n4e,jEr,DEr,GEr,se,_C,s4e,OEr,VEr,cJ,XEr,zEr,QEr,bC,l4e,WEr,HEr,mJ,UEr,JEr,YEr,vC,i4e,KEr,ZEr,fJ,eCr,oCr,rCr,FC,d4e,tCr,aCr,gJ,nCr,sCr,lCr,TC,c4e,iCr,dCr,hJ,cCr,mCr,fCr,MC,m4e,gCr,hCr,uJ,uCr,pCr,_Cr,EC,f4e,bCr,vCr,pJ,FCr,TCr,MCr,CC,g4e,ECr,CCr,_J,wCr,ACr,LCr,wC,h4e,yCr,xCr,bJ,$Cr,kCr,SCr,AC,u4e,RCr,PCr,vJ,BCr,ICr,NCr,LC,p4e,qCr,jCr,FJ,DCr,GCr,OCr,yC,_4e,VCr,XCr,TJ,zCr,QCr,WCr,xC,b4e,HCr,UCr,MJ,JCr,YCr,KCr,$C,v4e,ZCr,e3r,EJ,o3r,r3r,t3r,kC,F4e,a3r,n3r,CJ,s3r,l3r,i3r,SC,T4e,d3r,c3r,wJ,m3r,f3r,g3r,RC,M4e,h3r,u3r,AJ,p3r,_3r,b3r,PC,E4e,v3r,F3r,LJ,T3r,M3r,E3r,BC,C4e,C3r,w3r,yJ,A3r,L3r,y3r,IC,w4e,x3r,$3r,xJ,k3r,S3r,R3r,NC,A4e,P3r,B3r,$J,I3r,N3r,q3r,qC,L4e,j3r,D3r,kJ,G3r,O3r,V3r,jC,y4e,X3r,z3r,SJ,Q3r,W3r,H3r,DC,ize,fc,GC,x4e,ex,U3r,$4e,J3r,dze,tr,ox,Y3r,gc,K3r,RJ,Z3r,e5r,PJ,o5r,r5r,t5r,rx,a5r,k4e,n5r,s5r,l5r,Bt,tx,i5r,S4e,d5r,c5r,hc,m5r,R4e,f5r,g5r,BJ,h5r,u5r,p5r,OC,_5r,kr,ax,b5r,P4e,v5r,F5r,dn,T5r,B4e,M5r,E5r,I4e,C5r,w5r,N4e,A5r,L5r,y5r,Me,VC,q4e,x5r,$5r,IJ,k5r,S5r,R5r,XC,j4e,P5r,B5r,NJ,I5r,N5r,q5r,zC,D4e,j5r,D5r,qJ,G5r,O5r,V5r,QC,G4e,X5r,z5r,jJ,Q5r,W5r,H5r,WC,O4e,U5r,J5r,DJ,Y5r,K5r,Z5r,HC,V4e,e0r,o0r,GJ,r0r,t0r,a0r,UC,X4e,n0r,s0r,OJ,l0r,i0r,d0r,JC,z4e,c0r,m0r,VJ,f0r,g0r,h0r,YC,Q4e,u0r,p0r,XJ,_0r,b0r,v0r,KC,W4e,F0r,T0r,zJ,M0r,E0r,C0r,ZC,H4e,w0r,A0r,QJ,L0r,y0r,x0r,e3,U4e,$0r,k0r,WJ,S0r,R0r,P0r,o3,J4e,B0r,I0r,HJ,N0r,q0r,j0r,r3,cze,uc,t3,Y4e,nx,D0r,K4e,G0r,mze,ar,sx,O0r,pc,V0r,UJ,X0r,z0r,JJ,Q0r,W0r,H0r,lx,U0r,Z4e,J0r,Y0r,K0r,It,ix,Z0r,eEe,ewr,owr,_c,rwr,oEe,twr,awr,YJ,nwr,swr,lwr,a3,iwr,Sr,dx,dwr,rEe,cwr,mwr,cn,fwr,tEe,gwr,hwr,aEe,uwr,pwr,nEe,_wr,bwr,vwr,Qe,n3,sEe,Fwr,Twr,KJ,Mwr,Ewr,Cwr,s3,lEe,wwr,Awr,ZJ,Lwr,ywr,xwr,Ys,iEe,$wr,kwr,eY,Swr,Rwr,oY,Pwr,Bwr,Iwr,l3,dEe,Nwr,qwr,rY,jwr,Dwr,Gwr,i3,cEe,Owr,Vwr,tY,Xwr,zwr,Qwr,d3,mEe,Wwr,Hwr,aY,Uwr,Jwr,Ywr,c3,fEe,Kwr,Zwr,nY,eAr,oAr,rAr,m3,fze,bc,f3,gEe,cx,tAr,hEe,aAr,gze,nr,mx,nAr,vc,sAr,sY,lAr,iAr,lY,dAr,cAr,mAr,fx,fAr,uEe,gAr,hAr,uAr,Nt,gx,pAr,pEe,_Ar,bAr,Fc,vAr,_Ee,FAr,TAr,iY,MAr,EAr,CAr,g3,wAr,Rr,hx,AAr,bEe,LAr,yAr,mn,xAr,vEe,$Ar,kAr,FEe,SAr,RAr,TEe,PAr,BAr,IAr,ie,h3,MEe,NAr,qAr,dY,jAr,DAr,GAr,u3,EEe,OAr,VAr,cY,XAr,zAr,QAr,p3,CEe,WAr,HAr,mY,UAr,JAr,YAr,_3,wEe,KAr,ZAr,fY,e6r,o6r,r6r,b3,AEe,t6r,a6r,gY,n6r,s6r,l6r,v3,LEe,i6r,d6r,hY,c6r,m6r,f6r,F3,yEe,g6r,h6r,uY,u6r,p6r,_6r,T3,xEe,b6r,v6r,pY,F6r,T6r,M6r,M3,$Ee,E6r,C6r,_Y,w6r,A6r,L6r,E3,kEe,y6r,x6r,bY,$6r,k6r,S6r,C3,SEe,R6r,P6r,vY,B6r,I6r,N6r,w3,REe,q6r,j6r,FY,D6r,G6r,O6r,A3,PEe,V6r,X6r,TY,z6r,Q6r,W6r,L3,BEe,H6r,U6r,MY,J6r,Y6r,K6r,y3,IEe,Z6r,e7r,EY,o7r,r7r,t7r,x3,NEe,a7r,n7r,CY,s7r,l7r,i7r,$3,qEe,d7r,c7r,wY,m7r,f7r,g7r,k3,jEe,h7r,u7r,AY,p7r,_7r,b7r,S3,DEe,v7r,F7r,LY,T7r,M7r,E7r,R3,GEe,C7r,w7r,yY,A7r,L7r,y7r,P3,hze,Tc,B3,OEe,ux,x7r,VEe,$7r,uze,sr,px,k7r,Mc,S7r,xY,R7r,P7r,$Y,B7r,I7r,N7r,_x,q7r,XEe,j7r,D7r,G7r,qt,bx,O7r,zEe,V7r,X7r,Ec,z7r,QEe,Q7r,W7r,kY,H7r,U7r,J7r,I3,Y7r,Pr,vx,K7r,WEe,Z7r,eLr,fn,oLr,HEe,rLr,tLr,UEe,aLr,nLr,JEe,sLr,lLr,iLr,ye,N3,YEe,dLr,cLr,SY,mLr,fLr,gLr,q3,KEe,hLr,uLr,RY,pLr,_Lr,bLr,j3,ZEe,vLr,FLr,PY,TLr,MLr,ELr,D3,eCe,CLr,wLr,BY,ALr,LLr,yLr,G3,oCe,xLr,$Lr,IY,kLr,SLr,RLr,O3,rCe,PLr,BLr,NY,ILr,NLr,qLr,V3,tCe,jLr,DLr,qY,GLr,OLr,VLr,X3,aCe,XLr,zLr,jY,QLr,WLr,HLr,z3,nCe,ULr,JLr,DY,YLr,KLr,ZLr,Q3,sCe,eyr,oyr,GY,ryr,tyr,ayr,W3,pze,Cc,H3,lCe,Fx,nyr,iCe,syr,_ze,lr,Tx,lyr,wc,iyr,OY,dyr,cyr,VY,myr,fyr,gyr,Mx,hyr,dCe,uyr,pyr,_yr,jt,Ex,byr,cCe,vyr,Fyr,Ac,Tyr,mCe,Myr,Eyr,XY,Cyr,wyr,Ayr,U3,Lyr,Br,Cx,yyr,fCe,xyr,$yr,gn,kyr,gCe,Syr,Ryr,hCe,Pyr,Byr,uCe,Iyr,Nyr,qyr,te,J3,pCe,jyr,Dyr,zY,Gyr,Oyr,Vyr,Y3,_Ce,Xyr,zyr,QY,Qyr,Wyr,Hyr,K3,bCe,Uyr,Jyr,WY,Yyr,Kyr,Zyr,Z3,vCe,e8r,o8r,HY,r8r,t8r,a8r,e5,FCe,n8r,s8r,UY,l8r,i8r,d8r,o5,TCe,c8r,m8r,JY,f8r,g8r,h8r,r5,MCe,u8r,p8r,YY,_8r,b8r,v8r,t5,ECe,F8r,T8r,KY,M8r,E8r,C8r,a5,CCe,w8r,A8r,ZY,L8r,y8r,x8r,n5,wCe,$8r,k8r,eK,S8r,R8r,P8r,s5,ACe,B8r,I8r,oK,N8r,q8r,j8r,l5,LCe,D8r,G8r,rK,O8r,V8r,X8r,i5,yCe,z8r,Q8r,tK,W8r,H8r,U8r,d5,xCe,J8r,Y8r,aK,K8r,Z8r,e9r,c5,$Ce,o9r,r9r,nK,t9r,a9r,n9r,m5,kCe,s9r,l9r,sK,i9r,d9r,c9r,f5,SCe,m9r,f9r,lK,g9r,h9r,u9r,g5,RCe,p9r,_9r,iK,b9r,v9r,F9r,h5,PCe,T9r,M9r,dK,E9r,C9r,w9r,u5,BCe,A9r,L9r,cK,y9r,x9r,$9r,p5,ICe,k9r,S9r,mK,R9r,P9r,B9r,_5,NCe,I9r,N9r,fK,q9r,j9r,D9r,b5,qCe,G9r,O9r,gK,V9r,X9r,z9r,v5,jCe,Q9r,W9r,hK,H9r,U9r,J9r,F5,DCe,Y9r,K9r,uK,Z9r,exr,oxr,T5,GCe,rxr,txr,pK,axr,nxr,sxr,M5,bze,Lc,E5,OCe,wx,lxr,VCe,ixr,vze,ir,Ax,dxr,yc,cxr,_K,mxr,fxr,bK,gxr,hxr,uxr,Lx,pxr,XCe,_xr,bxr,vxr,Dt,yx,Fxr,zCe,Txr,Mxr,xc,Exr,QCe,Cxr,wxr,vK,Axr,Lxr,yxr,C5,xxr,Ir,xx,$xr,WCe,kxr,Sxr,hn,Rxr,HCe,Pxr,Bxr,UCe,Ixr,Nxr,JCe,qxr,jxr,Dxr,pe,w5,YCe,Gxr,Oxr,FK,Vxr,Xxr,zxr,A5,KCe,Qxr,Wxr,TK,Hxr,Uxr,Jxr,L5,ZCe,Yxr,Kxr,MK,Zxr,e$r,o$r,y5,e3e,r$r,t$r,EK,a$r,n$r,s$r,x5,o3e,l$r,i$r,CK,d$r,c$r,m$r,$5,r3e,f$r,g$r,wK,h$r,u$r,p$r,k5,t3e,_$r,b$r,AK,v$r,F$r,T$r,S5,a3e,M$r,E$r,LK,C$r,w$r,A$r,R5,n3e,L$r,y$r,yK,x$r,$$r,k$r,P5,s3e,S$r,R$r,xK,P$r,B$r,I$r,B5,l3e,N$r,q$r,$K,j$r,D$r,G$r,I5,i3e,O$r,V$r,kK,X$r,z$r,Q$r,N5,d3e,W$r,H$r,SK,U$r,J$r,Y$r,q5,c3e,K$r,Z$r,RK,ekr,okr,rkr,j5,m3e,tkr,akr,PK,nkr,skr,lkr,D5,f3e,ikr,dkr,BK,ckr,mkr,fkr,G5,g3e,gkr,hkr,IK,ukr,pkr,_kr,O5,Fze,$c,V5,h3e,$x,bkr,u3e,vkr,Tze,dr,kx,Fkr,kc,Tkr,NK,Mkr,Ekr,qK,Ckr,wkr,Akr,Sx,Lkr,p3e,ykr,xkr,$kr,Gt,Rx,kkr,_3e,Skr,Rkr,Sc,Pkr,b3e,Bkr,Ikr,jK,Nkr,qkr,jkr,X5,Dkr,Nr,Px,Gkr,v3e,Okr,Vkr,un,Xkr,F3e,zkr,Qkr,T3e,Wkr,Hkr,M3e,Ukr,Jkr,Ykr,Bx,z5,E3e,Kkr,Zkr,DK,eSr,oSr,rSr,Q5,C3e,tSr,aSr,GK,nSr,sSr,lSr,W5,Mze,Rc,H5,w3e,Ix,iSr,A3e,dSr,Eze,cr,Nx,cSr,Pc,mSr,OK,fSr,gSr,VK,hSr,uSr,pSr,qx,_Sr,L3e,bSr,vSr,FSr,Ot,jx,TSr,y3e,MSr,ESr,Bc,CSr,x3e,wSr,ASr,XK,LSr,ySr,xSr,U5,$Sr,qr,Dx,kSr,$3e,SSr,RSr,pn,PSr,k3e,BSr,ISr,S3e,NSr,qSr,R3e,jSr,DSr,GSr,P3e,J5,B3e,OSr,VSr,zK,XSr,zSr,QSr,Y5,Cze,Ic,K5,I3e,Gx,WSr,N3e,HSr,wze,mr,Ox,USr,Nc,JSr,QK,YSr,KSr,WK,ZSr,eRr,oRr,Vx,rRr,q3e,tRr,aRr,nRr,Vt,Xx,sRr,j3e,lRr,iRr,qc,dRr,D3e,cRr,mRr,HK,fRr,gRr,hRr,Z5,uRr,jr,zx,pRr,G3e,_Rr,bRr,_n,vRr,O3e,FRr,TRr,V3e,MRr,ERr,X3e,CRr,wRr,ARr,de,e0,z3e,LRr,yRr,UK,xRr,$Rr,kRr,o0,Q3e,SRr,RRr,JK,PRr,BRr,IRr,r0,W3e,NRr,qRr,YK,jRr,DRr,GRr,t0,H3e,ORr,VRr,KK,XRr,zRr,QRr,a0,U3e,WRr,HRr,ZK,URr,JRr,YRr,n0,J3e,KRr,ZRr,eZ,ePr,oPr,rPr,s0,Y3e,tPr,aPr,oZ,nPr,sPr,lPr,l0,K3e,iPr,dPr,rZ,cPr,mPr,fPr,i0,Z3e,gPr,hPr,tZ,uPr,pPr,_Pr,d0,e5e,bPr,vPr,aZ,FPr,TPr,MPr,c0,o5e,EPr,CPr,nZ,wPr,APr,LPr,m0,r5e,yPr,xPr,sZ,$Pr,kPr,SPr,f0,t5e,RPr,PPr,lZ,BPr,IPr,NPr,g0,a5e,qPr,jPr,iZ,DPr,GPr,OPr,h0,n5e,VPr,XPr,dZ,zPr,QPr,WPr,u0,s5e,HPr,UPr,cZ,JPr,YPr,KPr,p0,l5e,ZPr,eBr,mZ,oBr,rBr,tBr,_0,i5e,aBr,nBr,fZ,sBr,lBr,iBr,b0,d5e,dBr,cBr,gZ,mBr,fBr,gBr,v0,c5e,hBr,uBr,hZ,pBr,_Br,bBr,F0,Aze,jc,T0,m5e,Qx,vBr,f5e,FBr,Lze,fr,Wx,TBr,Dc,MBr,uZ,EBr,CBr,pZ,wBr,ABr,LBr,Hx,yBr,g5e,xBr,$Br,kBr,Xt,Ux,SBr,h5e,RBr,PBr,Gc,BBr,u5e,IBr,NBr,_Z,qBr,jBr,DBr,M0,GBr,Dr,Jx,OBr,p5e,VBr,XBr,bn,zBr,_5e,QBr,WBr,b5e,HBr,UBr,v5e,JBr,YBr,KBr,ce,E0,F5e,ZBr,eIr,bZ,oIr,rIr,tIr,C0,T5e,aIr,nIr,vZ,sIr,lIr,iIr,w0,M5e,dIr,cIr,FZ,mIr,fIr,gIr,A0,E5e,hIr,uIr,TZ,pIr,_Ir,bIr,L0,C5e,vIr,FIr,MZ,TIr,MIr,EIr,y0,w5e,CIr,wIr,EZ,AIr,LIr,yIr,x0,A5e,xIr,$Ir,CZ,kIr,SIr,RIr,$0,L5e,PIr,BIr,wZ,IIr,NIr,qIr,k0,y5e,jIr,DIr,AZ,GIr,OIr,VIr,S0,x5e,XIr,zIr,LZ,QIr,WIr,HIr,R0,$5e,UIr,JIr,yZ,YIr,KIr,ZIr,P0,k5e,eNr,oNr,xZ,rNr,tNr,aNr,B0,S5e,nNr,sNr,$Z,lNr,iNr,dNr,I0,R5e,cNr,mNr,kZ,fNr,gNr,hNr,N0,P5e,uNr,pNr,SZ,_Nr,bNr,vNr,q0,B5e,FNr,TNr,RZ,MNr,ENr,CNr,j0,I5e,wNr,ANr,PZ,LNr,yNr,xNr,D0,N5e,$Nr,kNr,BZ,SNr,RNr,PNr,G0,q5e,BNr,INr,IZ,NNr,qNr,jNr,O0,j5e,DNr,GNr,NZ,ONr,VNr,XNr,V0,yze,Oc,X0,D5e,Yx,zNr,G5e,QNr,xze,gr,Kx,WNr,Vc,HNr,qZ,UNr,JNr,jZ,YNr,KNr,ZNr,Zx,eqr,O5e,oqr,rqr,tqr,zt,e$,aqr,V5e,nqr,sqr,Xc,lqr,X5e,iqr,dqr,DZ,cqr,mqr,fqr,z0,gqr,Gr,o$,hqr,z5e,uqr,pqr,vn,_qr,Q5e,bqr,vqr,W5e,Fqr,Tqr,H5e,Mqr,Eqr,Cqr,U5e,Q0,J5e,wqr,Aqr,GZ,Lqr,yqr,xqr,W0,$ze,zc,H0,Y5e,r$,$qr,K5e,kqr,kze,hr,t$,Sqr,Qc,Rqr,OZ,Pqr,Bqr,VZ,Iqr,Nqr,qqr,a$,jqr,Z5e,Dqr,Gqr,Oqr,Qt,n$,Vqr,e0e,Xqr,zqr,Wc,Qqr,o0e,Wqr,Hqr,XZ,Uqr,Jqr,Yqr,U0,Kqr,Or,s$,Zqr,r0e,ejr,ojr,Fn,rjr,t0e,tjr,ajr,a0e,njr,sjr,n0e,ljr,ijr,djr,s0e,J0,l0e,cjr,mjr,zZ,fjr,gjr,hjr,Y0,Sze,Hc,K0,i0e,l$,ujr,d0e,pjr,Rze,ur,i$,_jr,Uc,bjr,QZ,vjr,Fjr,WZ,Tjr,Mjr,Ejr,d$,Cjr,c0e,wjr,Ajr,Ljr,Wt,c$,yjr,m0e,xjr,$jr,Jc,kjr,f0e,Sjr,Rjr,HZ,Pjr,Bjr,Ijr,Z0,Njr,Vr,m$,qjr,g0e,jjr,Djr,Tn,Gjr,h0e,Ojr,Vjr,u0e,Xjr,zjr,p0e,Qjr,Wjr,Hjr,oe,ew,_0e,Ujr,Jjr,UZ,Yjr,Kjr,Zjr,ow,b0e,eDr,oDr,JZ,rDr,tDr,aDr,rw,v0e,nDr,sDr,YZ,lDr,iDr,dDr,tw,F0e,cDr,mDr,KZ,fDr,gDr,hDr,aw,T0e,uDr,pDr,ZZ,_Dr,bDr,vDr,nw,M0e,FDr,TDr,eee,MDr,EDr,CDr,sw,E0e,wDr,ADr,oee,LDr,yDr,xDr,lw,C0e,$Dr,kDr,ree,SDr,RDr,PDr,iw,w0e,BDr,IDr,tee,NDr,qDr,jDr,dw,A0e,DDr,GDr,aee,ODr,VDr,XDr,cw,L0e,zDr,QDr,nee,WDr,HDr,UDr,mw,y0e,JDr,YDr,see,KDr,ZDr,eGr,fw,x0e,oGr,rGr,lee,tGr,aGr,nGr,gw,$0e,sGr,lGr,iee,iGr,dGr,cGr,hw,k0e,mGr,fGr,dee,gGr,hGr,uGr,uw,S0e,pGr,_Gr,cee,bGr,vGr,FGr,pw,R0e,TGr,MGr,mee,EGr,CGr,wGr,_w,P0e,AGr,LGr,fee,yGr,xGr,$Gr,bw,B0e,kGr,SGr,gee,RGr,PGr,BGr,vw,I0e,IGr,NGr,hee,qGr,jGr,DGr,Fw,N0e,GGr,OGr,uee,VGr,XGr,zGr,Tw,q0e,QGr,WGr,pee,HGr,UGr,JGr,Mw,j0e,YGr,KGr,_ee,ZGr,eOr,oOr,Ew,D0e,rOr,tOr,bee,aOr,nOr,sOr,Cw,G0e,lOr,iOr,vee,dOr,cOr,mOr,ww,O0e,fOr,gOr,Fee,hOr,uOr,pOr,Aw,V0e,_Or,bOr,Tee,vOr,FOr,TOr,Lw,Pze,Yc,yw,X0e,f$,MOr,z0e,EOr,Bze,pr,g$,COr,Kc,wOr,Mee,AOr,LOr,Eee,yOr,xOr,$Or,h$,kOr,Q0e,SOr,ROr,POr,Ht,u$,BOr,W0e,IOr,NOr,Zc,qOr,H0e,jOr,DOr,Cee,GOr,OOr,VOr,xw,XOr,Xr,p$,zOr,U0e,QOr,WOr,Mn,HOr,J0e,UOr,JOr,Y0e,YOr,KOr,K0e,ZOr,eVr,oVr,xe,$w,Z0e,rVr,tVr,wee,aVr,nVr,sVr,kw,ewe,lVr,iVr,Aee,dVr,cVr,mVr,Sw,owe,fVr,gVr,Lee,hVr,uVr,pVr,Rw,rwe,_Vr,bVr,yee,vVr,FVr,TVr,Pw,twe,MVr,EVr,xee,CVr,wVr,AVr,Bw,awe,LVr,yVr,$ee,xVr,$Vr,kVr,Iw,nwe,SVr,RVr,kee,PVr,BVr,IVr,Nw,swe,NVr,qVr,See,jVr,DVr,GVr,qw,lwe,OVr,VVr,Ree,XVr,zVr,QVr,jw,iwe,WVr,HVr,Pee,UVr,JVr,YVr,Dw,Ize,em,Gw,dwe,_$,KVr,cwe,ZVr,Nze,_r,b$,eXr,om,oXr,Bee,rXr,tXr,Iee,aXr,nXr,sXr,v$,lXr,mwe,iXr,dXr,cXr,Ut,F$,mXr,fwe,fXr,gXr,rm,hXr,gwe,uXr,pXr,Nee,_Xr,bXr,vXr,Ow,FXr,zr,T$,TXr,hwe,MXr,EXr,En,CXr,uwe,wXr,AXr,pwe,LXr,yXr,_we,xXr,$Xr,kXr,Ee,Vw,bwe,SXr,RXr,qee,PXr,BXr,IXr,Xw,vwe,NXr,qXr,jee,jXr,DXr,GXr,zw,Fwe,OXr,VXr,Dee,XXr,zXr,QXr,Qw,Twe,WXr,HXr,Gee,UXr,JXr,YXr,Ww,Mwe,KXr,ZXr,Oee,ezr,ozr,rzr,Hw,Ewe,tzr,azr,Vee,nzr,szr,lzr,Uw,Cwe,izr,dzr,Xee,czr,mzr,fzr,Jw,wwe,gzr,hzr,zee,uzr,pzr,_zr,Yw,Awe,bzr,vzr,Qee,Fzr,Tzr,Mzr,Kw,Lwe,Ezr,Czr,Wee,wzr,Azr,Lzr,Zw,ywe,yzr,xzr,Hee,$zr,kzr,Szr,eA,xwe,Rzr,Pzr,Uee,Bzr,Izr,Nzr,oA,$we,qzr,jzr,Jee,Dzr,Gzr,Ozr,rA,qze,tm,tA,kwe,M$,Vzr,Swe,Xzr,jze,br,E$,zzr,am,Qzr,Yee,Wzr,Hzr,Kee,Uzr,Jzr,Yzr,C$,Kzr,Rwe,Zzr,eQr,oQr,Jt,w$,rQr,Pwe,tQr,aQr,nm,nQr,Bwe,sQr,lQr,Zee,iQr,dQr,cQr,aA,mQr,Qr,A$,fQr,Iwe,gQr,hQr,Cn,uQr,Nwe,pQr,_Qr,qwe,bQr,vQr,jwe,FQr,TQr,MQr,$e,nA,Dwe,EQr,CQr,eoe,wQr,AQr,LQr,sA,Gwe,yQr,xQr,ooe,$Qr,kQr,SQr,lA,Owe,RQr,PQr,roe,BQr,IQr,NQr,iA,Vwe,qQr,jQr,toe,DQr,GQr,OQr,dA,Xwe,VQr,XQr,aoe,zQr,QQr,WQr,cA,zwe,HQr,UQr,noe,JQr,YQr,KQr,mA,Qwe,ZQr,eWr,soe,oWr,rWr,tWr,fA,Wwe,aWr,nWr,loe,sWr,lWr,iWr,gA,Hwe,dWr,cWr,ioe,mWr,fWr,gWr,hA,Uwe,hWr,uWr,doe,pWr,_Wr,bWr,uA,Dze,sm,pA,Jwe,L$,vWr,Ywe,FWr,Gze,vr,y$,TWr,lm,MWr,coe,EWr,CWr,moe,wWr,AWr,LWr,x$,yWr,Kwe,xWr,$Wr,kWr,Yt,$$,SWr,Zwe,RWr,PWr,im,BWr,eAe,IWr,NWr,foe,qWr,jWr,DWr,_A,GWr,Wr,k$,OWr,oAe,VWr,XWr,wn,zWr,rAe,QWr,WWr,tAe,HWr,UWr,aAe,JWr,YWr,KWr,ke,bA,nAe,ZWr,eHr,goe,oHr,rHr,tHr,vA,sAe,aHr,nHr,hoe,sHr,lHr,iHr,FA,lAe,dHr,cHr,uoe,mHr,fHr,gHr,TA,iAe,hHr,uHr,poe,pHr,_Hr,bHr,MA,dAe,vHr,FHr,_oe,THr,MHr,EHr,EA,cAe,CHr,wHr,boe,AHr,LHr,yHr,CA,mAe,xHr,$Hr,voe,kHr,SHr,RHr,wA,fAe,PHr,BHr,Foe,IHr,NHr,qHr,AA,gAe,jHr,DHr,Toe,GHr,OHr,VHr,LA,hAe,XHr,zHr,Moe,QHr,WHr,HHr,yA,Oze,dm,xA,uAe,S$,UHr,pAe,JHr,Vze,Fr,R$,YHr,cm,KHr,Eoe,ZHr,eUr,Coe,oUr,rUr,tUr,P$,aUr,_Ae,nUr,sUr,lUr,Kt,B$,iUr,bAe,dUr,cUr,mm,mUr,vAe,fUr,gUr,woe,hUr,uUr,pUr,$A,_Ur,Hr,I$,bUr,FAe,vUr,FUr,An,TUr,TAe,MUr,EUr,MAe,CUr,wUr,EAe,AUr,LUr,yUr,Se,kA,CAe,xUr,$Ur,Aoe,kUr,SUr,RUr,SA,wAe,PUr,BUr,Loe,IUr,NUr,qUr,RA,AAe,jUr,DUr,yoe,GUr,OUr,VUr,PA,LAe,XUr,zUr,xoe,QUr,WUr,HUr,BA,yAe,UUr,JUr,$oe,YUr,KUr,ZUr,IA,xAe,eJr,oJr,koe,rJr,tJr,aJr,NA,$Ae,nJr,sJr,Soe,lJr,iJr,dJr,qA,kAe,cJr,mJr,Roe,fJr,gJr,hJr,jA,SAe,uJr,pJr,Poe,_Jr,bJr,vJr,DA,RAe,FJr,TJr,Boe,MJr,EJr,CJr,GA,Xze,fm,OA,PAe,N$,wJr,BAe,AJr,zze,Tr,q$,LJr,gm,yJr,Ioe,xJr,$Jr,Noe,kJr,SJr,RJr,j$,PJr,IAe,BJr,IJr,NJr,Zt,D$,qJr,NAe,jJr,DJr,hm,GJr,qAe,OJr,VJr,qoe,XJr,zJr,QJr,VA,WJr,Ur,G$,HJr,jAe,UJr,JJr,Ln,YJr,DAe,KJr,ZJr,GAe,eYr,oYr,OAe,rYr,tYr,aYr,Re,XA,VAe,nYr,sYr,joe,lYr,iYr,dYr,zA,XAe,cYr,mYr,Doe,fYr,gYr,hYr,QA,zAe,uYr,pYr,Goe,_Yr,bYr,vYr,WA,QAe,FYr,TYr,Ooe,MYr,EYr,CYr,HA,WAe,wYr,AYr,Voe,LYr,yYr,xYr,UA,HAe,$Yr,kYr,Xoe,SYr,RYr,PYr,JA,UAe,BYr,IYr,zoe,NYr,qYr,jYr,YA,JAe,DYr,GYr,Qoe,OYr,VYr,XYr,KA,YAe,zYr,QYr,Woe,WYr,HYr,UYr,ZA,KAe,JYr,YYr,Hoe,KYr,ZYr,eKr,e6,Qze,um,o6,ZAe,O$,oKr,e6e,rKr,Wze,Mr,V$,tKr,pm,aKr,Uoe,nKr,sKr,Joe,lKr,iKr,dKr,X$,cKr,o6e,mKr,fKr,gKr,ea,z$,hKr,r6e,uKr,pKr,_m,_Kr,t6e,bKr,vKr,Yoe,FKr,TKr,MKr,r6,EKr,Jr,Q$,CKr,a6e,wKr,AKr,yn,LKr,n6e,yKr,xKr,s6e,$Kr,kKr,l6e,SKr,RKr,PKr,Ve,t6,i6e,BKr,IKr,Koe,NKr,qKr,jKr,a6,d6e,DKr,GKr,Zoe,OKr,VKr,XKr,n6,c6e,zKr,QKr,ere,WKr,HKr,UKr,s6,m6e,JKr,YKr,ore,KKr,ZKr,eZr,l6,f6e,oZr,rZr,rre,tZr,aZr,nZr,i6,g6e,sZr,lZr,tre,iZr,dZr,cZr,d6,h6e,mZr,fZr,are,gZr,hZr,uZr,c6,u6e,pZr,_Zr,nre,bZr,vZr,FZr,m6,Hze,bm,f6,p6e,W$,TZr,_6e,MZr,Uze,Er,H$,EZr,vm,CZr,sre,wZr,AZr,lre,LZr,yZr,xZr,U$,$Zr,b6e,kZr,SZr,RZr,oa,J$,PZr,v6e,BZr,IZr,Fm,NZr,F6e,qZr,jZr,ire,DZr,GZr,OZr,g6,VZr,Yr,Y$,XZr,T6e,zZr,QZr,xn,WZr,M6e,HZr,UZr,E6e,JZr,YZr,C6e,KZr,ZZr,eet,Xe,h6,w6e,oet,ret,dre,tet,aet,net,u6,A6e,set,iet,cre,det,cet,met,p6,L6e,fet,get,mre,het,uet,pet,_6,y6e,_et,bet,fre,vet,Fet,Tet,b6,x6e,Met,Eet,gre,Cet,wet,Aet,v6,$6e,Let,yet,hre,xet,$et,ket,F6,k6e,Set,Ret,ure,Pet,Bet,Iet,T6,S6e,Net,qet,pre,jet,Det,Get,M6,Jze,Tm,E6,R6e,K$,Oet,P6e,Vet,Yze,Cr,Z$,Xet,Mm,zet,_re,Qet,Wet,bre,Het,Uet,Jet,ek,Yet,B6e,Ket,Zet,eot,ra,ok,oot,I6e,rot,tot,Em,aot,N6e,not,sot,vre,lot,iot,dot,C6,cot,Kr,rk,mot,q6e,fot,got,$n,hot,j6e,uot,pot,D6e,_ot,bot,G6e,vot,Fot,Tot,O6e,w6,V6e,Mot,Eot,Fre,Cot,wot,Aot,A6,Kze,Cm,L6,X6e,tk,Lot,z6e,yot,Zze,wr,ak,xot,wm,$ot,Tre,kot,Sot,Mre,Rot,Pot,Bot,nk,Iot,Q6e,Not,qot,jot,ta,sk,Dot,W6e,Got,Oot,Am,Vot,H6e,Xot,zot,Ere,Qot,Wot,Hot,y6,Uot,Zr,lk,Jot,U6e,Yot,Kot,kn,Zot,J6e,ert,ort,Y6e,rrt,trt,K6e,art,nrt,srt,ik,x6,Z6e,lrt,irt,Cre,drt,crt,mrt,$6,e7e,frt,grt,wre,hrt,urt,prt,k6,eQe,Lm,S6,o7e,dk,_rt,r7e,brt,oQe,Ar,ck,vrt,ym,Frt,Are,Trt,Mrt,Lre,Ert,Crt,wrt,mk,Art,t7e,Lrt,yrt,xrt,aa,fk,$rt,a7e,krt,Srt,xm,Rrt,n7e,Prt,Brt,yre,Irt,Nrt,qrt,R6,jrt,et,gk,Drt,s7e,Grt,Ort,Sn,Vrt,l7e,Xrt,zrt,i7e,Qrt,Wrt,d7e,Hrt,Urt,Jrt,c7e,P6,m7e,Yrt,Krt,xre,Zrt,ett,ott,B6,rQe;return d=new re({}),Sa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),ay=new re({}),ny=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),qm=new rtt({props:{warning:!0,$$slots:{default:[BQt]},$$scope:{ctx:$}}}),sy=new re({}),ly=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L610"}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L633"}}),Yg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[IQt]},$$scope:{ctx:$}}}),my=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L756"}}),fy=new re({}),gy=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L403"}}),py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L417"}}),Rh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[NQt]},$$scope:{ctx:$}}}),_y=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L616"}}),by=new re({}),vy=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L195"}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L209"}}),pu=new rtt({props:{$$slots:{default:[qQt]},$$scope:{ctx:$}}}),_u=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[jQt]},$$scope:{ctx:$}}}),Ey=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L336"}}),Cy=new re({}),wy=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L89"}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L103"}}),qu=new rtt({props:{$$slots:{default:[DQt]},$$scope:{ctx:$}}}),ju=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[GQt]},$$scope:{ctx:$}}}),xy=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L256"}}),$y=new re({}),ky=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L782"}}),Ry=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Ou=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[OQt]},$$scope:{ctx:$}}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Q_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[VQt]},$$scope:{ctx:$}}}),By=new re({}),Iy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L789"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),H_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[XQt]},$$scope:{ctx:$}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),G2=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[zQt]},$$scope:{ctx:$}}}),Dy=new re({}),Gy=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L804"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),V2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[QQt]},$$scope:{ctx:$}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),kb=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[WQt]},$$scope:{ctx:$}}}),zy=new re({}),Qy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L811"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Rb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[HQt]},$$scope:{ctx:$}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),vv=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[UQt]},$$scope:{ctx:$}}}),Jy=new re({}),Yy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L818"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Tv=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[JQt]},$$scope:{ctx:$}}}),e8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Gv=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[YQt]},$$scope:{ctx:$}}}),o8=new re({}),r8=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L827"}}),a8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Vv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[KQt]},$$scope:{ctx:$}}}),n8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),G1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[ZQt]},$$scope:{ctx:$}}}),s8=new re({}),l8=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L872"}}),d8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),V1=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[eWt]},$$scope:{ctx:$}}}),c8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),TF=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[oWt]},$$scope:{ctx:$}}}),m8=new re({}),f8=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L879"}}),h8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),EF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[rWt]},$$scope:{ctx:$}}}),u8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),kF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[tWt]},$$scope:{ctx:$}}}),p8=new re({}),_8=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L865"}}),v8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),RF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[aWt]},$$scope:{ctx:$}}}),F8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_T=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[nWt]},$$scope:{ctx:$}}}),T8=new re({}),M8=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L836"}}),C8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),vT=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[sWt]},$$scope:{ctx:$}}}),w8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),dM=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[lWt]},$$scope:{ctx:$}}}),A8=new re({}),L8=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L843"}}),x8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),mM=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[iWt]},$$scope:{ctx:$}}}),$8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),hM=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[dWt]},$$scope:{ctx:$}}}),k8=new re({}),S8=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L888"}}),P8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),pM=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[cWt]},$$scope:{ctx:$}}}),B8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),kM=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[mWt]},$$scope:{ctx:$}}}),I8=new re({}),N8=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L927"}}),j8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),RM=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[fWt]},$$scope:{ctx:$}}}),D8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),IM=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[gWt]},$$scope:{ctx:$}}}),G8=new re({}),O8=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L854"}}),X8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),qM=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[hWt]},$$scope:{ctx:$}}}),z8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),GM=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[uWt]},$$scope:{ctx:$}}}),Q8=new re({}),W8=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L934"}}),U8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),VM=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[pWt]},$$scope:{ctx:$}}}),J8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),e4=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[_Wt]},$$scope:{ctx:$}}}),Y8=new re({}),K8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L957"}}),e9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),r4=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[bWt]},$$scope:{ctx:$}}}),o9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),d4=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[vWt]},$$scope:{ctx:$}}}),r9=new re({}),t9=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L941"}}),n9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),m4=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[FWt]},$$scope:{ctx:$}}}),s9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),E4=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[TWt]},$$scope:{ctx:$}}}),l9=new re({}),i9=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L948"}}),c9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),w4=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[MWt]},$$scope:{ctx:$}}}),m9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),x4=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[EWt]},$$scope:{ctx:$}}}),g9=new re({}),h9=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L966"}}),p9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),k4=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[CWt]},$$scope:{ctx:$}}}),_9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),q4=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[wWt]},$$scope:{ctx:$}}}),b9=new re({}),v9=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L973"}}),T9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),D4=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[AWt]},$$scope:{ctx:$}}}),M9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),z4=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[LWt]},$$scope:{ctx:$}}}),E9=new re({}),C9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L920"}}),A9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),W4=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[yWt]},$$scope:{ctx:$}}}),L9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Y4=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[xWt]},$$scope:{ctx:$}}}),x9=new re({}),$9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L895"}}),S9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Z4=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[$Wt]},$$scope:{ctx:$}}}),R9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),rE=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[kWt]},$$scope:{ctx:$}}}),P9=new re({}),B9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L902"}}),N9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),aE=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[SWt]},$$scope:{ctx:$}}}),q9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),mE=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[RWt]},$$scope:{ctx:$}}}),j9=new re({}),D9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L911"}}),O9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),gE=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[PWt]},$$scope:{ctx:$}}}),V9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),pE=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[BWt]},$$scope:{ctx:$}}}),X9=new re({}),z9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),W9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),bE=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[IWt]},$$scope:{ctx:$}}}),H9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),hC=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[NWt]},$$scope:{ctx:$}}}),U9=new re({}),J9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L420"}}),K9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),pC=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[qWt]},$$scope:{ctx:$}}}),Z9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),DC=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[jWt]},$$scope:{ctx:$}}}),ex=new re({}),ox=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),OC=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[DWt]},$$scope:{ctx:$}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),r3=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[GWt]},$$scope:{ctx:$}}}),nx=new re({}),sx=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L451"}}),ix=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),a3=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[OWt]},$$scope:{ctx:$}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),m3=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[VWt]},$$scope:{ctx:$}}}),cx=new re({}),mx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),gx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),g3=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[XWt]},$$scope:{ctx:$}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),P3=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[zWt]},$$scope:{ctx:$}}}),ux=new re({}),px=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L483"}}),bx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),I3=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[QWt]},$$scope:{ctx:$}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),W3=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[WWt]},$$scope:{ctx:$}}}),Fx=new re({}),Tx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),U3=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[HWt]},$$scope:{ctx:$}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),M5=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[UWt]},$$scope:{ctx:$}}}),wx=new re({}),Ax=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),yx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),C5=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[JWt]},$$scope:{ctx:$}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),O5=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[YWt]},$$scope:{ctx:$}}}),$x=new re({}),kx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L535"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),X5=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[KWt]},$$scope:{ctx:$}}}),Px=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),W5=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[ZWt]},$$scope:{ctx:$}}}),Ix=new re({}),Nx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L508"}}),jx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),U5=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[eHt]},$$scope:{ctx:$}}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Y5=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[oHt]},$$scope:{ctx:$}}}),Gx=new re({}),Ox=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L519"}}),Xx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Z5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[rHt]},$$scope:{ctx:$}}}),zx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),F0=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[tHt]},$$scope:{ctx:$}}}),Qx=new re({}),Wx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),Ux=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),M0=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[aHt]},$$scope:{ctx:$}}}),Jx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),V0=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[nHt]},$$scope:{ctx:$}}}),Yx=new re({}),Kx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),e$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),z0=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[sHt]},$$scope:{ctx:$}}}),o$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),W0=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[lHt]},$$scope:{ctx:$}}}),r$=new re({}),t$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L544"}}),n$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),U0=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[iHt]},$$scope:{ctx:$}}}),s$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Y0=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[dHt]},$$scope:{ctx:$}}}),l$=new re({}),i$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),c$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Z0=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[cHt]},$$scope:{ctx:$}}}),m$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Lw=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[mHt]},$$scope:{ctx:$}}}),f$=new re({}),g$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),u$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),xw=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[fHt]},$$scope:{ctx:$}}}),p$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Dw=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[gHt]},$$scope:{ctx:$}}}),_$=new re({}),b$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),F$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Ow=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[hHt]},$$scope:{ctx:$}}}),T$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),rA=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[uHt]},$$scope:{ctx:$}}}),M$=new re({}),E$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),w$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),aA=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[pHt]},$$scope:{ctx:$}}}),A$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),uA=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[_Ht]},$$scope:{ctx:$}}}),L$=new re({}),y$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),$$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_A=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[bHt]},$$scope:{ctx:$}}}),k$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),yA=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[vHt]},$$scope:{ctx:$}}}),S$=new re({}),R$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),B$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$A=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[FHt]},$$scope:{ctx:$}}}),I$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),GA=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[THt]},$$scope:{ctx:$}}}),N$=new re({}),q$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),D$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),VA=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[MHt]},$$scope:{ctx:$}}}),G$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),e6=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[EHt]},$$scope:{ctx:$}}}),O$=new re({}),V$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),z$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),r6=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[CHt]},$$scope:{ctx:$}}}),Q$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),m6=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[wHt]},$$scope:{ctx:$}}}),W$=new re({}),H$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),J$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),g6=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[AHt]},$$scope:{ctx:$}}}),Y$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),M6=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[LHt]},$$scope:{ctx:$}}}),K$=new re({}),Z$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),ok=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),C6=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[yHt]},$$scope:{ctx:$}}}),rk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),A6=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[xHt]},$$scope:{ctx:$}}}),tk=new re({}),ak=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),sk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),y6=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[$Ht]},$$scope:{ctx:$}}}),lk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),k6=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[kHt]},$$scope:{ctx:$}}}),dk=new re({}),ck=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),fk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),R6=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[SHt]},$$scope:{ctx:$}}}),gk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),B6=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[RHt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(d.$$.fragment),h=l(),Co=a("span"),Li=o("Auto Classes"),Rm=l(),lt=a("p"),yi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),xi=a("code"),ey=o("from_pretrained()"),Pm=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),We=a("p"),$i=o("Instantiating one of "),Pn=a("a"),oy=o("AutoConfig"),Bn=o(", "),In=a("a"),ry=o("AutoModel"),ki=o(`, and
`),Nn=a("a"),ty=o("AutoTokenizer"),Si=o(" will directly create a class of the relevant architecture. For instance"),Bm=l(),F(Sa.$$.fragment),He=l(),Ae=a("p"),BS=o("will create a model that is an instance of "),Ri=a("a"),IS=o("BertModel"),NS=o("."),wo=l(),Ra=a("p"),qS=o("There is one class of "),Im=a("code"),jS=o("AutoModel"),fHe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),YVe=l(),Pi=a("h2"),Nm=a("a"),Cae=a("span"),F(ay.$$.fragment),gHe=l(),wae=a("span"),hHe=o("Extending the Auto Classes"),KVe=l(),qn=a("p"),uHe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Aae=a("code"),pHe=o("NewModel"),_He=o(", make sure you have a "),Lae=a("code"),bHe=o("NewModelConfig"),vHe=o(` then you can add those to the auto
classes like this:`),ZVe=l(),F(ny.$$.fragment),eXe=l(),DS=a("p"),FHe=o("You will then be able to use the auto classes like you would usually do!"),oXe=l(),F(qm.$$.fragment),rXe=l(),Bi=a("h2"),jm=a("a"),yae=a("span"),F(sy.$$.fragment),THe=l(),xae=a("span"),MHe=o("AutoConfig"),tXe=l(),Ao=a("div"),F(ly.$$.fragment),EHe=l(),iy=a("p"),CHe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),GS=a("a"),wHe=o("from_pretrained()"),AHe=o(" class method."),LHe=l(),dy=a("p"),yHe=o("This class cannot be instantiated directly using "),$ae=a("code"),xHe=o("__init__()"),$He=o(" (throws an error)."),kHe=l(),Lr=a("div"),F(cy.$$.fragment),SHe=l(),kae=a("p"),RHe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),PHe=l(),Ii=a("p"),BHe=o("The configuration class to instantiate is selected based on the "),Sae=a("code"),IHe=o("model_type"),NHe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Rae=a("code"),qHe=o("pretrained_model_name_or_path"),jHe=o(":"),DHe=l(),A=a("ul"),Dm=a("li"),Pae=a("strong"),GHe=o("albert"),OHe=o(" \u2014 "),OS=a("a"),VHe=o("AlbertConfig"),XHe=o(" (ALBERT model)"),zHe=l(),Gm=a("li"),Bae=a("strong"),QHe=o("bart"),WHe=o(" \u2014 "),VS=a("a"),HHe=o("BartConfig"),UHe=o(" (BART model)"),JHe=l(),Om=a("li"),Iae=a("strong"),YHe=o("beit"),KHe=o(" \u2014 "),XS=a("a"),ZHe=o("BeitConfig"),eUe=o(" (BEiT model)"),oUe=l(),Vm=a("li"),Nae=a("strong"),rUe=o("bert"),tUe=o(" \u2014 "),zS=a("a"),aUe=o("BertConfig"),nUe=o(" (BERT model)"),sUe=l(),Xm=a("li"),qae=a("strong"),lUe=o("bert-generation"),iUe=o(" \u2014 "),QS=a("a"),dUe=o("BertGenerationConfig"),cUe=o(" (Bert Generation model)"),mUe=l(),zm=a("li"),jae=a("strong"),fUe=o("big_bird"),gUe=o(" \u2014 "),WS=a("a"),hUe=o("BigBirdConfig"),uUe=o(" (BigBird model)"),pUe=l(),Qm=a("li"),Dae=a("strong"),_Ue=o("bigbird_pegasus"),bUe=o(" \u2014 "),HS=a("a"),vUe=o("BigBirdPegasusConfig"),FUe=o(" (BigBird-Pegasus model)"),TUe=l(),Wm=a("li"),Gae=a("strong"),MUe=o("blenderbot"),EUe=o(" \u2014 "),US=a("a"),CUe=o("BlenderbotConfig"),wUe=o(" (Blenderbot model)"),AUe=l(),Hm=a("li"),Oae=a("strong"),LUe=o("blenderbot-small"),yUe=o(" \u2014 "),JS=a("a"),xUe=o("BlenderbotSmallConfig"),$Ue=o(" (BlenderbotSmall model)"),kUe=l(),Um=a("li"),Vae=a("strong"),SUe=o("bloom"),RUe=o(" \u2014 "),YS=a("a"),PUe=o("BloomConfig"),BUe=o(" (BLOOM model)"),IUe=l(),Jm=a("li"),Xae=a("strong"),NUe=o("camembert"),qUe=o(" \u2014 "),KS=a("a"),jUe=o("CamembertConfig"),DUe=o(" (CamemBERT model)"),GUe=l(),Ym=a("li"),zae=a("strong"),OUe=o("canine"),VUe=o(" \u2014 "),ZS=a("a"),XUe=o("CanineConfig"),zUe=o(" (CANINE model)"),QUe=l(),Km=a("li"),Qae=a("strong"),WUe=o("clip"),HUe=o(" \u2014 "),eR=a("a"),UUe=o("CLIPConfig"),JUe=o(" (CLIP model)"),YUe=l(),Zm=a("li"),Wae=a("strong"),KUe=o("codegen"),ZUe=o(" \u2014 "),oR=a("a"),eJe=o("CodeGenConfig"),oJe=o(" (CodeGen model)"),rJe=l(),ef=a("li"),Hae=a("strong"),tJe=o("convbert"),aJe=o(" \u2014 "),rR=a("a"),nJe=o("ConvBertConfig"),sJe=o(" (ConvBERT model)"),lJe=l(),of=a("li"),Uae=a("strong"),iJe=o("convnext"),dJe=o(" \u2014 "),tR=a("a"),cJe=o("ConvNextConfig"),mJe=o(" (ConvNeXT model)"),fJe=l(),rf=a("li"),Jae=a("strong"),gJe=o("ctrl"),hJe=o(" \u2014 "),aR=a("a"),uJe=o("CTRLConfig"),pJe=o(" (CTRL model)"),_Je=l(),tf=a("li"),Yae=a("strong"),bJe=o("cvt"),vJe=o(" \u2014 "),nR=a("a"),FJe=o("CvtConfig"),TJe=o(" (CvT model)"),MJe=l(),af=a("li"),Kae=a("strong"),EJe=o("data2vec-audio"),CJe=o(" \u2014 "),sR=a("a"),wJe=o("Data2VecAudioConfig"),AJe=o(" (Data2VecAudio model)"),LJe=l(),nf=a("li"),Zae=a("strong"),yJe=o("data2vec-text"),xJe=o(" \u2014 "),lR=a("a"),$Je=o("Data2VecTextConfig"),kJe=o(" (Data2VecText model)"),SJe=l(),sf=a("li"),ene=a("strong"),RJe=o("data2vec-vision"),PJe=o(" \u2014 "),iR=a("a"),BJe=o("Data2VecVisionConfig"),IJe=o(" (Data2VecVision model)"),NJe=l(),lf=a("li"),one=a("strong"),qJe=o("deberta"),jJe=o(" \u2014 "),dR=a("a"),DJe=o("DebertaConfig"),GJe=o(" (DeBERTa model)"),OJe=l(),df=a("li"),rne=a("strong"),VJe=o("deberta-v2"),XJe=o(" \u2014 "),cR=a("a"),zJe=o("DebertaV2Config"),QJe=o(" (DeBERTa-v2 model)"),WJe=l(),cf=a("li"),tne=a("strong"),HJe=o("decision_transformer"),UJe=o(" \u2014 "),mR=a("a"),JJe=o("DecisionTransformerConfig"),YJe=o(" (Decision Transformer model)"),KJe=l(),mf=a("li"),ane=a("strong"),ZJe=o("deit"),eYe=o(" \u2014 "),fR=a("a"),oYe=o("DeiTConfig"),rYe=o(" (DeiT model)"),tYe=l(),ff=a("li"),nne=a("strong"),aYe=o("detr"),nYe=o(" \u2014 "),gR=a("a"),sYe=o("DetrConfig"),lYe=o(" (DETR model)"),iYe=l(),gf=a("li"),sne=a("strong"),dYe=o("distilbert"),cYe=o(" \u2014 "),hR=a("a"),mYe=o("DistilBertConfig"),fYe=o(" (DistilBERT model)"),gYe=l(),hf=a("li"),lne=a("strong"),hYe=o("dpr"),uYe=o(" \u2014 "),uR=a("a"),pYe=o("DPRConfig"),_Ye=o(" (DPR model)"),bYe=l(),uf=a("li"),ine=a("strong"),vYe=o("dpt"),FYe=o(" \u2014 "),pR=a("a"),TYe=o("DPTConfig"),MYe=o(" (DPT model)"),EYe=l(),pf=a("li"),dne=a("strong"),CYe=o("electra"),wYe=o(" \u2014 "),_R=a("a"),AYe=o("ElectraConfig"),LYe=o(" (ELECTRA model)"),yYe=l(),_f=a("li"),cne=a("strong"),xYe=o("encoder-decoder"),$Ye=o(" \u2014 "),bR=a("a"),kYe=o("EncoderDecoderConfig"),SYe=o(" (Encoder decoder model)"),RYe=l(),bf=a("li"),mne=a("strong"),PYe=o("flaubert"),BYe=o(" \u2014 "),vR=a("a"),IYe=o("FlaubertConfig"),NYe=o(" (FlauBERT model)"),qYe=l(),vf=a("li"),fne=a("strong"),jYe=o("flava"),DYe=o(" \u2014 "),FR=a("a"),GYe=o("FlavaConfig"),OYe=o(" (FLAVA model)"),VYe=l(),Ff=a("li"),gne=a("strong"),XYe=o("fnet"),zYe=o(" \u2014 "),TR=a("a"),QYe=o("FNetConfig"),WYe=o(" (FNet model)"),HYe=l(),Tf=a("li"),hne=a("strong"),UYe=o("fsmt"),JYe=o(" \u2014 "),MR=a("a"),YYe=o("FSMTConfig"),KYe=o(" (FairSeq Machine-Translation model)"),ZYe=l(),Mf=a("li"),une=a("strong"),eKe=o("funnel"),oKe=o(" \u2014 "),ER=a("a"),rKe=o("FunnelConfig"),tKe=o(" (Funnel Transformer model)"),aKe=l(),Ef=a("li"),pne=a("strong"),nKe=o("glpn"),sKe=o(" \u2014 "),CR=a("a"),lKe=o("GLPNConfig"),iKe=o(" (GLPN model)"),dKe=l(),Cf=a("li"),_ne=a("strong"),cKe=o("gpt2"),mKe=o(" \u2014 "),wR=a("a"),fKe=o("GPT2Config"),gKe=o(" (OpenAI GPT-2 model)"),hKe=l(),wf=a("li"),bne=a("strong"),uKe=o("gpt_neo"),pKe=o(" \u2014 "),AR=a("a"),_Ke=o("GPTNeoConfig"),bKe=o(" (GPT Neo model)"),vKe=l(),Af=a("li"),vne=a("strong"),FKe=o("gpt_neox"),TKe=o(" \u2014 "),LR=a("a"),MKe=o("GPTNeoXConfig"),EKe=o(" (GPT NeoX model)"),CKe=l(),Lf=a("li"),Fne=a("strong"),wKe=o("gptj"),AKe=o(" \u2014 "),yR=a("a"),LKe=o("GPTJConfig"),yKe=o(" (GPT-J model)"),xKe=l(),yf=a("li"),Tne=a("strong"),$Ke=o("groupvit"),kKe=o(" \u2014 "),xR=a("a"),SKe=o("GroupViTConfig"),RKe=o(" (GroupViT model)"),PKe=l(),xf=a("li"),Mne=a("strong"),BKe=o("hubert"),IKe=o(" \u2014 "),$R=a("a"),NKe=o("HubertConfig"),qKe=o(" (Hubert model)"),jKe=l(),$f=a("li"),Ene=a("strong"),DKe=o("ibert"),GKe=o(" \u2014 "),kR=a("a"),OKe=o("IBertConfig"),VKe=o(" (I-BERT model)"),XKe=l(),kf=a("li"),Cne=a("strong"),zKe=o("imagegpt"),QKe=o(" \u2014 "),SR=a("a"),WKe=o("ImageGPTConfig"),HKe=o(" (ImageGPT model)"),UKe=l(),Sf=a("li"),wne=a("strong"),JKe=o("layoutlm"),YKe=o(" \u2014 "),RR=a("a"),KKe=o("LayoutLMConfig"),ZKe=o(" (LayoutLM model)"),eZe=l(),Rf=a("li"),Ane=a("strong"),oZe=o("layoutlmv2"),rZe=o(" \u2014 "),PR=a("a"),tZe=o("LayoutLMv2Config"),aZe=o(" (LayoutLMv2 model)"),nZe=l(),Pf=a("li"),Lne=a("strong"),sZe=o("layoutlmv3"),lZe=o(" \u2014 "),BR=a("a"),iZe=o("LayoutLMv3Config"),dZe=o(" (LayoutLMv3 model)"),cZe=l(),Bf=a("li"),yne=a("strong"),mZe=o("led"),fZe=o(" \u2014 "),IR=a("a"),gZe=o("LEDConfig"),hZe=o(" (LED model)"),uZe=l(),If=a("li"),xne=a("strong"),pZe=o("levit"),_Ze=o(" \u2014 "),NR=a("a"),bZe=o("LevitConfig"),vZe=o(" (LeViT model)"),FZe=l(),Nf=a("li"),$ne=a("strong"),TZe=o("longformer"),MZe=o(" \u2014 "),qR=a("a"),EZe=o("LongformerConfig"),CZe=o(" (Longformer model)"),wZe=l(),qf=a("li"),kne=a("strong"),AZe=o("longt5"),LZe=o(" \u2014 "),jR=a("a"),yZe=o("LongT5Config"),xZe=o(" (LongT5 model)"),$Ze=l(),jf=a("li"),Sne=a("strong"),kZe=o("luke"),SZe=o(" \u2014 "),DR=a("a"),RZe=o("LukeConfig"),PZe=o(" (LUKE model)"),BZe=l(),Df=a("li"),Rne=a("strong"),IZe=o("lxmert"),NZe=o(" \u2014 "),GR=a("a"),qZe=o("LxmertConfig"),jZe=o(" (LXMERT model)"),DZe=l(),Gf=a("li"),Pne=a("strong"),GZe=o("m2m_100"),OZe=o(" \u2014 "),OR=a("a"),VZe=o("M2M100Config"),XZe=o(" (M2M100 model)"),zZe=l(),Of=a("li"),Bne=a("strong"),QZe=o("marian"),WZe=o(" \u2014 "),VR=a("a"),HZe=o("MarianConfig"),UZe=o(" (Marian model)"),JZe=l(),Vf=a("li"),Ine=a("strong"),YZe=o("maskformer"),KZe=o(" \u2014 "),XR=a("a"),ZZe=o("MaskFormerConfig"),eeo=o(" (MaskFormer model)"),oeo=l(),Xf=a("li"),Nne=a("strong"),reo=o("mbart"),teo=o(" \u2014 "),zR=a("a"),aeo=o("MBartConfig"),neo=o(" (mBART model)"),seo=l(),zf=a("li"),qne=a("strong"),leo=o("mctct"),ieo=o(" \u2014 "),QR=a("a"),deo=o("MCTCTConfig"),ceo=o(" (M-CTC-T model)"),meo=l(),Qf=a("li"),jne=a("strong"),feo=o("megatron-bert"),geo=o(" \u2014 "),WR=a("a"),heo=o("MegatronBertConfig"),ueo=o(" (Megatron-BERT model)"),peo=l(),Wf=a("li"),Dne=a("strong"),_eo=o("mobilebert"),beo=o(" \u2014 "),HR=a("a"),veo=o("MobileBertConfig"),Feo=o(" (MobileBERT model)"),Teo=l(),Hf=a("li"),Gne=a("strong"),Meo=o("mobilevit"),Eeo=o(" \u2014 "),UR=a("a"),Ceo=o("MobileViTConfig"),weo=o(" (MobileViT model)"),Aeo=l(),Uf=a("li"),One=a("strong"),Leo=o("mpnet"),yeo=o(" \u2014 "),JR=a("a"),xeo=o("MPNetConfig"),$eo=o(" (MPNet model)"),keo=l(),Jf=a("li"),Vne=a("strong"),Seo=o("mt5"),Reo=o(" \u2014 "),YR=a("a"),Peo=o("MT5Config"),Beo=o(" (MT5 model)"),Ieo=l(),Yf=a("li"),Xne=a("strong"),Neo=o("mvp"),qeo=o(" \u2014 "),KR=a("a"),jeo=o("MvpConfig"),Deo=o(" (MVP model)"),Geo=l(),Kf=a("li"),zne=a("strong"),Oeo=o("nezha"),Veo=o(" \u2014 "),ZR=a("a"),Xeo=o("NezhaConfig"),zeo=o(" (Nezha model)"),Qeo=l(),Zf=a("li"),Qne=a("strong"),Weo=o("nystromformer"),Heo=o(" \u2014 "),eP=a("a"),Ueo=o("NystromformerConfig"),Jeo=o(" (Nystr\xF6mformer model)"),Yeo=l(),eg=a("li"),Wne=a("strong"),Keo=o("openai-gpt"),Zeo=o(" \u2014 "),oP=a("a"),eoo=o("OpenAIGPTConfig"),ooo=o(" (OpenAI GPT model)"),roo=l(),og=a("li"),Hne=a("strong"),too=o("opt"),aoo=o(" \u2014 "),rP=a("a"),noo=o("OPTConfig"),soo=o(" (OPT model)"),loo=l(),rg=a("li"),Une=a("strong"),ioo=o("pegasus"),doo=o(" \u2014 "),tP=a("a"),coo=o("PegasusConfig"),moo=o(" (Pegasus model)"),foo=l(),tg=a("li"),Jne=a("strong"),goo=o("perceiver"),hoo=o(" \u2014 "),aP=a("a"),uoo=o("PerceiverConfig"),poo=o(" (Perceiver model)"),_oo=l(),ag=a("li"),Yne=a("strong"),boo=o("plbart"),voo=o(" \u2014 "),nP=a("a"),Foo=o("PLBartConfig"),Too=o(" (PLBart model)"),Moo=l(),ng=a("li"),Kne=a("strong"),Eoo=o("poolformer"),Coo=o(" \u2014 "),sP=a("a"),woo=o("PoolFormerConfig"),Aoo=o(" (PoolFormer model)"),Loo=l(),sg=a("li"),Zne=a("strong"),yoo=o("prophetnet"),xoo=o(" \u2014 "),lP=a("a"),$oo=o("ProphetNetConfig"),koo=o(" (ProphetNet model)"),Soo=l(),lg=a("li"),ese=a("strong"),Roo=o("qdqbert"),Poo=o(" \u2014 "),iP=a("a"),Boo=o("QDQBertConfig"),Ioo=o(" (QDQBert model)"),Noo=l(),ig=a("li"),ose=a("strong"),qoo=o("rag"),joo=o(" \u2014 "),dP=a("a"),Doo=o("RagConfig"),Goo=o(" (RAG model)"),Ooo=l(),dg=a("li"),rse=a("strong"),Voo=o("realm"),Xoo=o(" \u2014 "),cP=a("a"),zoo=o("RealmConfig"),Qoo=o(" (REALM model)"),Woo=l(),cg=a("li"),tse=a("strong"),Hoo=o("reformer"),Uoo=o(" \u2014 "),mP=a("a"),Joo=o("ReformerConfig"),Yoo=o(" (Reformer model)"),Koo=l(),mg=a("li"),ase=a("strong"),Zoo=o("regnet"),ero=o(" \u2014 "),fP=a("a"),oro=o("RegNetConfig"),rro=o(" (RegNet model)"),tro=l(),fg=a("li"),nse=a("strong"),aro=o("rembert"),nro=o(" \u2014 "),gP=a("a"),sro=o("RemBertConfig"),lro=o(" (RemBERT model)"),iro=l(),gg=a("li"),sse=a("strong"),dro=o("resnet"),cro=o(" \u2014 "),hP=a("a"),mro=o("ResNetConfig"),fro=o(" (ResNet model)"),gro=l(),hg=a("li"),lse=a("strong"),hro=o("retribert"),uro=o(" \u2014 "),uP=a("a"),pro=o("RetriBertConfig"),_ro=o(" (RetriBERT model)"),bro=l(),ug=a("li"),ise=a("strong"),vro=o("roberta"),Fro=o(" \u2014 "),pP=a("a"),Tro=o("RobertaConfig"),Mro=o(" (RoBERTa model)"),Ero=l(),pg=a("li"),dse=a("strong"),Cro=o("roformer"),wro=o(" \u2014 "),_P=a("a"),Aro=o("RoFormerConfig"),Lro=o(" (RoFormer model)"),yro=l(),_g=a("li"),cse=a("strong"),xro=o("segformer"),$ro=o(" \u2014 "),bP=a("a"),kro=o("SegformerConfig"),Sro=o(" (SegFormer model)"),Rro=l(),bg=a("li"),mse=a("strong"),Pro=o("sew"),Bro=o(" \u2014 "),vP=a("a"),Iro=o("SEWConfig"),Nro=o(" (SEW model)"),qro=l(),vg=a("li"),fse=a("strong"),jro=o("sew-d"),Dro=o(" \u2014 "),FP=a("a"),Gro=o("SEWDConfig"),Oro=o(" (SEW-D model)"),Vro=l(),Fg=a("li"),gse=a("strong"),Xro=o("speech-encoder-decoder"),zro=o(" \u2014 "),TP=a("a"),Qro=o("SpeechEncoderDecoderConfig"),Wro=o(" (Speech Encoder decoder model)"),Hro=l(),Tg=a("li"),hse=a("strong"),Uro=o("speech_to_text"),Jro=o(" \u2014 "),MP=a("a"),Yro=o("Speech2TextConfig"),Kro=o(" (Speech2Text model)"),Zro=l(),Mg=a("li"),use=a("strong"),eto=o("speech_to_text_2"),oto=o(" \u2014 "),EP=a("a"),rto=o("Speech2Text2Config"),tto=o(" (Speech2Text2 model)"),ato=l(),Eg=a("li"),pse=a("strong"),nto=o("splinter"),sto=o(" \u2014 "),CP=a("a"),lto=o("SplinterConfig"),ito=o(" (Splinter model)"),dto=l(),Cg=a("li"),_se=a("strong"),cto=o("squeezebert"),mto=o(" \u2014 "),wP=a("a"),fto=o("SqueezeBertConfig"),gto=o(" (SqueezeBERT model)"),hto=l(),wg=a("li"),bse=a("strong"),uto=o("swin"),pto=o(" \u2014 "),AP=a("a"),_to=o("SwinConfig"),bto=o(" (Swin Transformer model)"),vto=l(),Ag=a("li"),vse=a("strong"),Fto=o("t5"),Tto=o(" \u2014 "),LP=a("a"),Mto=o("T5Config"),Eto=o(" (T5 model)"),Cto=l(),Lg=a("li"),Fse=a("strong"),wto=o("tapas"),Ato=o(" \u2014 "),yP=a("a"),Lto=o("TapasConfig"),yto=o(" (TAPAS model)"),xto=l(),yg=a("li"),Tse=a("strong"),$to=o("trajectory_transformer"),kto=o(" \u2014 "),xP=a("a"),Sto=o("TrajectoryTransformerConfig"),Rto=o(" (Trajectory Transformer model)"),Pto=l(),xg=a("li"),Mse=a("strong"),Bto=o("transfo-xl"),Ito=o(" \u2014 "),$P=a("a"),Nto=o("TransfoXLConfig"),qto=o(" (Transformer-XL model)"),jto=l(),$g=a("li"),Ese=a("strong"),Dto=o("trocr"),Gto=o(" \u2014 "),kP=a("a"),Oto=o("TrOCRConfig"),Vto=o(" (TrOCR model)"),Xto=l(),kg=a("li"),Cse=a("strong"),zto=o("unispeech"),Qto=o(" \u2014 "),SP=a("a"),Wto=o("UniSpeechConfig"),Hto=o(" (UniSpeech model)"),Uto=l(),Sg=a("li"),wse=a("strong"),Jto=o("unispeech-sat"),Yto=o(" \u2014 "),RP=a("a"),Kto=o("UniSpeechSatConfig"),Zto=o(" (UniSpeechSat model)"),eao=l(),Rg=a("li"),Ase=a("strong"),oao=o("van"),rao=o(" \u2014 "),PP=a("a"),tao=o("VanConfig"),aao=o(" (VAN model)"),nao=l(),Pg=a("li"),Lse=a("strong"),sao=o("vilt"),lao=o(" \u2014 "),BP=a("a"),iao=o("ViltConfig"),dao=o(" (ViLT model)"),cao=l(),Bg=a("li"),yse=a("strong"),mao=o("vision-encoder-decoder"),fao=o(" \u2014 "),IP=a("a"),gao=o("VisionEncoderDecoderConfig"),hao=o(" (Vision Encoder decoder model)"),uao=l(),Ig=a("li"),xse=a("strong"),pao=o("vision-text-dual-encoder"),_ao=o(" \u2014 "),NP=a("a"),bao=o("VisionTextDualEncoderConfig"),vao=o(" (VisionTextDualEncoder model)"),Fao=l(),Ng=a("li"),$se=a("strong"),Tao=o("visual_bert"),Mao=o(" \u2014 "),qP=a("a"),Eao=o("VisualBertConfig"),Cao=o(" (VisualBERT model)"),wao=l(),qg=a("li"),kse=a("strong"),Aao=o("vit"),Lao=o(" \u2014 "),jP=a("a"),yao=o("ViTConfig"),xao=o(" (ViT model)"),$ao=l(),jg=a("li"),Sse=a("strong"),kao=o("vit_mae"),Sao=o(" \u2014 "),DP=a("a"),Rao=o("ViTMAEConfig"),Pao=o(" (ViTMAE model)"),Bao=l(),Dg=a("li"),Rse=a("strong"),Iao=o("wav2vec2"),Nao=o(" \u2014 "),GP=a("a"),qao=o("Wav2Vec2Config"),jao=o(" (Wav2Vec2 model)"),Dao=l(),Gg=a("li"),Pse=a("strong"),Gao=o("wav2vec2-conformer"),Oao=o(" \u2014 "),OP=a("a"),Vao=o("Wav2Vec2ConformerConfig"),Xao=o(" (Wav2Vec2-Conformer model)"),zao=l(),Og=a("li"),Bse=a("strong"),Qao=o("wavlm"),Wao=o(" \u2014 "),VP=a("a"),Hao=o("WavLMConfig"),Uao=o(" (WavLM model)"),Jao=l(),Vg=a("li"),Ise=a("strong"),Yao=o("xglm"),Kao=o(" \u2014 "),XP=a("a"),Zao=o("XGLMConfig"),eno=o(" (XGLM model)"),ono=l(),Xg=a("li"),Nse=a("strong"),rno=o("xlm"),tno=o(" \u2014 "),zP=a("a"),ano=o("XLMConfig"),nno=o(" (XLM model)"),sno=l(),zg=a("li"),qse=a("strong"),lno=o("xlm-prophetnet"),ino=o(" \u2014 "),QP=a("a"),dno=o("XLMProphetNetConfig"),cno=o(" (XLM-ProphetNet model)"),mno=l(),Qg=a("li"),jse=a("strong"),fno=o("xlm-roberta"),gno=o(" \u2014 "),WP=a("a"),hno=o("XLMRobertaConfig"),uno=o(" (XLM-RoBERTa model)"),pno=l(),Wg=a("li"),Dse=a("strong"),_no=o("xlm-roberta-xl"),bno=o(" \u2014 "),HP=a("a"),vno=o("XLMRobertaXLConfig"),Fno=o(" (XLM-RoBERTa-XL model)"),Tno=l(),Hg=a("li"),Gse=a("strong"),Mno=o("xlnet"),Eno=o(" \u2014 "),UP=a("a"),Cno=o("XLNetConfig"),wno=o(" (XLNet model)"),Ano=l(),Ug=a("li"),Ose=a("strong"),Lno=o("yolos"),yno=o(" \u2014 "),JP=a("a"),xno=o("YolosConfig"),$no=o(" (YOLOS model)"),kno=l(),Jg=a("li"),Vse=a("strong"),Sno=o("yoso"),Rno=o(" \u2014 "),YP=a("a"),Pno=o("YosoConfig"),Bno=o(" (YOSO model)"),Ino=l(),F(Yg.$$.fragment),Nno=l(),Kg=a("div"),F(my.$$.fragment),qno=l(),Xse=a("p"),jno=o("Register a new configuration for this class."),aXe=l(),Ni=a("h2"),Zg=a("a"),zse=a("span"),F(fy.$$.fragment),Dno=l(),Qse=a("span"),Gno=o("AutoTokenizer"),nXe=l(),Lo=a("div"),F(gy.$$.fragment),Ono=l(),hy=a("p"),Vno=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),KP=a("a"),Xno=o("AutoTokenizer.from_pretrained()"),zno=o(" class method."),Qno=l(),uy=a("p"),Wno=o("This class cannot be instantiated directly using "),Wse=a("code"),Hno=o("__init__()"),Uno=o(" (throws an error)."),Jno=l(),yr=a("div"),F(py.$$.fragment),Yno=l(),Hse=a("p"),Kno=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Zno=l(),Pa=a("p"),eso=o("The tokenizer class to instantiate is selected based on the "),Use=a("code"),oso=o("model_type"),rso=o(` property of the config object (either
passed as an argument or loaded from `),Jse=a("code"),tso=o("pretrained_model_name_or_path"),aso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yse=a("code"),nso=o("pretrained_model_name_or_path"),sso=o(":"),lso=l(),k=a("ul"),jn=a("li"),Kse=a("strong"),iso=o("albert"),dso=o(" \u2014 "),ZP=a("a"),cso=o("AlbertTokenizer"),mso=o(" or "),eB=a("a"),fso=o("AlbertTokenizerFast"),gso=o(" (ALBERT model)"),hso=l(),Dn=a("li"),Zse=a("strong"),uso=o("bart"),pso=o(" \u2014 "),oB=a("a"),_so=o("BartTokenizer"),bso=o(" or "),rB=a("a"),vso=o("BartTokenizerFast"),Fso=o(" (BART model)"),Tso=l(),Gn=a("li"),ele=a("strong"),Mso=o("barthez"),Eso=o(" \u2014 "),tB=a("a"),Cso=o("BarthezTokenizer"),wso=o(" or "),aB=a("a"),Aso=o("BarthezTokenizerFast"),Lso=o(" (BARThez model)"),yso=l(),eh=a("li"),ole=a("strong"),xso=o("bartpho"),$so=o(" \u2014 "),nB=a("a"),kso=o("BartphoTokenizer"),Sso=o(" (BARTpho model)"),Rso=l(),On=a("li"),rle=a("strong"),Pso=o("bert"),Bso=o(" \u2014 "),sB=a("a"),Iso=o("BertTokenizer"),Nso=o(" or "),lB=a("a"),qso=o("BertTokenizerFast"),jso=o(" (BERT model)"),Dso=l(),oh=a("li"),tle=a("strong"),Gso=o("bert-generation"),Oso=o(" \u2014 "),iB=a("a"),Vso=o("BertGenerationTokenizer"),Xso=o(" (Bert Generation model)"),zso=l(),rh=a("li"),ale=a("strong"),Qso=o("bert-japanese"),Wso=o(" \u2014 "),dB=a("a"),Hso=o("BertJapaneseTokenizer"),Uso=o(" (BertJapanese model)"),Jso=l(),th=a("li"),nle=a("strong"),Yso=o("bertweet"),Kso=o(" \u2014 "),cB=a("a"),Zso=o("BertweetTokenizer"),elo=o(" (BERTweet model)"),olo=l(),Vn=a("li"),sle=a("strong"),rlo=o("big_bird"),tlo=o(" \u2014 "),mB=a("a"),alo=o("BigBirdTokenizer"),nlo=o(" or "),fB=a("a"),slo=o("BigBirdTokenizerFast"),llo=o(" (BigBird model)"),ilo=l(),Xn=a("li"),lle=a("strong"),dlo=o("bigbird_pegasus"),clo=o(" \u2014 "),gB=a("a"),mlo=o("PegasusTokenizer"),flo=o(" or "),hB=a("a"),glo=o("PegasusTokenizerFast"),hlo=o(" (BigBird-Pegasus model)"),ulo=l(),zn=a("li"),ile=a("strong"),plo=o("blenderbot"),_lo=o(" \u2014 "),uB=a("a"),blo=o("BlenderbotTokenizer"),vlo=o(" or "),pB=a("a"),Flo=o("BlenderbotTokenizerFast"),Tlo=o(" (Blenderbot model)"),Mlo=l(),ah=a("li"),dle=a("strong"),Elo=o("blenderbot-small"),Clo=o(" \u2014 "),_B=a("a"),wlo=o("BlenderbotSmallTokenizer"),Alo=o(" (BlenderbotSmall model)"),Llo=l(),nh=a("li"),cle=a("strong"),ylo=o("bloom"),xlo=o(" \u2014 "),bB=a("a"),$lo=o("BloomTokenizerFast"),klo=o(" (BLOOM model)"),Slo=l(),sh=a("li"),mle=a("strong"),Rlo=o("byt5"),Plo=o(" \u2014 "),vB=a("a"),Blo=o("ByT5Tokenizer"),Ilo=o(" (ByT5 model)"),Nlo=l(),Qn=a("li"),fle=a("strong"),qlo=o("camembert"),jlo=o(" \u2014 "),FB=a("a"),Dlo=o("CamembertTokenizer"),Glo=o(" or "),TB=a("a"),Olo=o("CamembertTokenizerFast"),Vlo=o(" (CamemBERT model)"),Xlo=l(),lh=a("li"),gle=a("strong"),zlo=o("canine"),Qlo=o(" \u2014 "),MB=a("a"),Wlo=o("CanineTokenizer"),Hlo=o(" (CANINE model)"),Ulo=l(),Wn=a("li"),hle=a("strong"),Jlo=o("clip"),Ylo=o(" \u2014 "),EB=a("a"),Klo=o("CLIPTokenizer"),Zlo=o(" or "),CB=a("a"),eio=o("CLIPTokenizerFast"),oio=o(" (CLIP model)"),rio=l(),Hn=a("li"),ule=a("strong"),tio=o("codegen"),aio=o(" \u2014 "),wB=a("a"),nio=o("CodeGenTokenizer"),sio=o(" or "),AB=a("a"),lio=o("CodeGenTokenizerFast"),iio=o(" (CodeGen model)"),dio=l(),Un=a("li"),ple=a("strong"),cio=o("convbert"),mio=o(" \u2014 "),LB=a("a"),fio=o("ConvBertTokenizer"),gio=o(" or "),yB=a("a"),hio=o("ConvBertTokenizerFast"),uio=o(" (ConvBERT model)"),pio=l(),Jn=a("li"),_le=a("strong"),_io=o("cpm"),bio=o(" \u2014 "),xB=a("a"),vio=o("CpmTokenizer"),Fio=o(" or "),$B=a("a"),Tio=o("CpmTokenizerFast"),Mio=o(" (CPM model)"),Eio=l(),ih=a("li"),ble=a("strong"),Cio=o("ctrl"),wio=o(" \u2014 "),kB=a("a"),Aio=o("CTRLTokenizer"),Lio=o(" (CTRL model)"),yio=l(),Yn=a("li"),vle=a("strong"),xio=o("data2vec-text"),$io=o(" \u2014 "),SB=a("a"),kio=o("RobertaTokenizer"),Sio=o(" or "),RB=a("a"),Rio=o("RobertaTokenizerFast"),Pio=o(" (Data2VecText model)"),Bio=l(),Kn=a("li"),Fle=a("strong"),Iio=o("deberta"),Nio=o(" \u2014 "),PB=a("a"),qio=o("DebertaTokenizer"),jio=o(" or "),BB=a("a"),Dio=o("DebertaTokenizerFast"),Gio=o(" (DeBERTa model)"),Oio=l(),Zn=a("li"),Tle=a("strong"),Vio=o("deberta-v2"),Xio=o(" \u2014 "),IB=a("a"),zio=o("DebertaV2Tokenizer"),Qio=o(" or "),NB=a("a"),Wio=o("DebertaV2TokenizerFast"),Hio=o(" (DeBERTa-v2 model)"),Uio=l(),es=a("li"),Mle=a("strong"),Jio=o("distilbert"),Yio=o(" \u2014 "),qB=a("a"),Kio=o("DistilBertTokenizer"),Zio=o(" or "),jB=a("a"),edo=o("DistilBertTokenizerFast"),odo=o(" (DistilBERT model)"),rdo=l(),os=a("li"),Ele=a("strong"),tdo=o("dpr"),ado=o(" \u2014 "),DB=a("a"),ndo=o("DPRQuestionEncoderTokenizer"),sdo=o(" or "),GB=a("a"),ldo=o("DPRQuestionEncoderTokenizerFast"),ido=o(" (DPR model)"),ddo=l(),rs=a("li"),Cle=a("strong"),cdo=o("electra"),mdo=o(" \u2014 "),OB=a("a"),fdo=o("ElectraTokenizer"),gdo=o(" or "),VB=a("a"),hdo=o("ElectraTokenizerFast"),udo=o(" (ELECTRA model)"),pdo=l(),dh=a("li"),wle=a("strong"),_do=o("flaubert"),bdo=o(" \u2014 "),XB=a("a"),vdo=o("FlaubertTokenizer"),Fdo=o(" (FlauBERT model)"),Tdo=l(),ts=a("li"),Ale=a("strong"),Mdo=o("fnet"),Edo=o(" \u2014 "),zB=a("a"),Cdo=o("FNetTokenizer"),wdo=o(" or "),QB=a("a"),Ado=o("FNetTokenizerFast"),Ldo=o(" (FNet model)"),ydo=l(),ch=a("li"),Lle=a("strong"),xdo=o("fsmt"),$do=o(" \u2014 "),WB=a("a"),kdo=o("FSMTTokenizer"),Sdo=o(" (FairSeq Machine-Translation model)"),Rdo=l(),as=a("li"),yle=a("strong"),Pdo=o("funnel"),Bdo=o(" \u2014 "),HB=a("a"),Ido=o("FunnelTokenizer"),Ndo=o(" or "),UB=a("a"),qdo=o("FunnelTokenizerFast"),jdo=o(" (Funnel Transformer model)"),Ddo=l(),ns=a("li"),xle=a("strong"),Gdo=o("gpt2"),Odo=o(" \u2014 "),JB=a("a"),Vdo=o("GPT2Tokenizer"),Xdo=o(" or "),YB=a("a"),zdo=o("GPT2TokenizerFast"),Qdo=o(" (OpenAI GPT-2 model)"),Wdo=l(),ss=a("li"),$le=a("strong"),Hdo=o("gpt_neo"),Udo=o(" \u2014 "),KB=a("a"),Jdo=o("GPT2Tokenizer"),Ydo=o(" or "),ZB=a("a"),Kdo=o("GPT2TokenizerFast"),Zdo=o(" (GPT Neo model)"),eco=l(),mh=a("li"),kle=a("strong"),oco=o("gpt_neox"),rco=o(" \u2014 "),eI=a("a"),tco=o("GPTNeoXTokenizerFast"),aco=o(" (GPT NeoX model)"),nco=l(),ls=a("li"),Sle=a("strong"),sco=o("gptj"),lco=o(" \u2014 "),oI=a("a"),ico=o("GPT2Tokenizer"),dco=o(" or "),rI=a("a"),cco=o("GPT2TokenizerFast"),mco=o(" (GPT-J model)"),fco=l(),is=a("li"),Rle=a("strong"),gco=o("groupvit"),hco=o(" \u2014 "),tI=a("a"),uco=o("CLIPTokenizer"),pco=o(" or "),aI=a("a"),_co=o("CLIPTokenizerFast"),bco=o(" (GroupViT model)"),vco=l(),ds=a("li"),Ple=a("strong"),Fco=o("herbert"),Tco=o(" \u2014 "),nI=a("a"),Mco=o("HerbertTokenizer"),Eco=o(" or "),sI=a("a"),Cco=o("HerbertTokenizerFast"),wco=o(" (HerBERT model)"),Aco=l(),fh=a("li"),Ble=a("strong"),Lco=o("hubert"),yco=o(" \u2014 "),lI=a("a"),xco=o("Wav2Vec2CTCTokenizer"),$co=o(" (Hubert model)"),kco=l(),cs=a("li"),Ile=a("strong"),Sco=o("ibert"),Rco=o(" \u2014 "),iI=a("a"),Pco=o("RobertaTokenizer"),Bco=o(" or "),dI=a("a"),Ico=o("RobertaTokenizerFast"),Nco=o(" (I-BERT model)"),qco=l(),ms=a("li"),Nle=a("strong"),jco=o("layoutlm"),Dco=o(" \u2014 "),cI=a("a"),Gco=o("LayoutLMTokenizer"),Oco=o(" or "),mI=a("a"),Vco=o("LayoutLMTokenizerFast"),Xco=o(" (LayoutLM model)"),zco=l(),fs=a("li"),qle=a("strong"),Qco=o("layoutlmv2"),Wco=o(" \u2014 "),fI=a("a"),Hco=o("LayoutLMv2Tokenizer"),Uco=o(" or "),gI=a("a"),Jco=o("LayoutLMv2TokenizerFast"),Yco=o(" (LayoutLMv2 model)"),Kco=l(),gs=a("li"),jle=a("strong"),Zco=o("layoutlmv3"),emo=o(" \u2014 "),hI=a("a"),omo=o("LayoutLMv3Tokenizer"),rmo=o(" or "),uI=a("a"),tmo=o("LayoutLMv3TokenizerFast"),amo=o(" (LayoutLMv3 model)"),nmo=l(),hs=a("li"),Dle=a("strong"),smo=o("layoutxlm"),lmo=o(" \u2014 "),pI=a("a"),imo=o("LayoutXLMTokenizer"),dmo=o(" or "),_I=a("a"),cmo=o("LayoutXLMTokenizerFast"),mmo=o(" (LayoutXLM model)"),fmo=l(),us=a("li"),Gle=a("strong"),gmo=o("led"),hmo=o(" \u2014 "),bI=a("a"),umo=o("LEDTokenizer"),pmo=o(" or "),vI=a("a"),_mo=o("LEDTokenizerFast"),bmo=o(" (LED model)"),vmo=l(),ps=a("li"),Ole=a("strong"),Fmo=o("longformer"),Tmo=o(" \u2014 "),FI=a("a"),Mmo=o("LongformerTokenizer"),Emo=o(" or "),TI=a("a"),Cmo=o("LongformerTokenizerFast"),wmo=o(" (Longformer model)"),Amo=l(),_s=a("li"),Vle=a("strong"),Lmo=o("longt5"),ymo=o(" \u2014 "),MI=a("a"),xmo=o("T5Tokenizer"),$mo=o(" or "),EI=a("a"),kmo=o("T5TokenizerFast"),Smo=o(" (LongT5 model)"),Rmo=l(),gh=a("li"),Xle=a("strong"),Pmo=o("luke"),Bmo=o(" \u2014 "),CI=a("a"),Imo=o("LukeTokenizer"),Nmo=o(" (LUKE model)"),qmo=l(),bs=a("li"),zle=a("strong"),jmo=o("lxmert"),Dmo=o(" \u2014 "),wI=a("a"),Gmo=o("LxmertTokenizer"),Omo=o(" or "),AI=a("a"),Vmo=o("LxmertTokenizerFast"),Xmo=o(" (LXMERT model)"),zmo=l(),hh=a("li"),Qle=a("strong"),Qmo=o("m2m_100"),Wmo=o(" \u2014 "),LI=a("a"),Hmo=o("M2M100Tokenizer"),Umo=o(" (M2M100 model)"),Jmo=l(),uh=a("li"),Wle=a("strong"),Ymo=o("marian"),Kmo=o(" \u2014 "),yI=a("a"),Zmo=o("MarianTokenizer"),efo=o(" (Marian model)"),ofo=l(),vs=a("li"),Hle=a("strong"),rfo=o("mbart"),tfo=o(" \u2014 "),xI=a("a"),afo=o("MBartTokenizer"),nfo=o(" or "),$I=a("a"),sfo=o("MBartTokenizerFast"),lfo=o(" (mBART model)"),ifo=l(),Fs=a("li"),Ule=a("strong"),dfo=o("mbart50"),cfo=o(" \u2014 "),kI=a("a"),mfo=o("MBart50Tokenizer"),ffo=o(" or "),SI=a("a"),gfo=o("MBart50TokenizerFast"),hfo=o(" (mBART-50 model)"),ufo=l(),Ts=a("li"),Jle=a("strong"),pfo=o("megatron-bert"),_fo=o(" \u2014 "),RI=a("a"),bfo=o("BertTokenizer"),vfo=o(" or "),PI=a("a"),Ffo=o("BertTokenizerFast"),Tfo=o(" (Megatron-BERT model)"),Mfo=l(),ph=a("li"),Yle=a("strong"),Efo=o("mluke"),Cfo=o(" \u2014 "),BI=a("a"),wfo=o("MLukeTokenizer"),Afo=o(" (mLUKE model)"),Lfo=l(),Ms=a("li"),Kle=a("strong"),yfo=o("mobilebert"),xfo=o(" \u2014 "),II=a("a"),$fo=o("MobileBertTokenizer"),kfo=o(" or "),NI=a("a"),Sfo=o("MobileBertTokenizerFast"),Rfo=o(" (MobileBERT model)"),Pfo=l(),Es=a("li"),Zle=a("strong"),Bfo=o("mpnet"),Ifo=o(" \u2014 "),qI=a("a"),Nfo=o("MPNetTokenizer"),qfo=o(" or "),jI=a("a"),jfo=o("MPNetTokenizerFast"),Dfo=o(" (MPNet model)"),Gfo=l(),Cs=a("li"),eie=a("strong"),Ofo=o("mt5"),Vfo=o(" \u2014 "),DI=a("a"),Xfo=o("MT5Tokenizer"),zfo=o(" or "),GI=a("a"),Qfo=o("MT5TokenizerFast"),Wfo=o(" (MT5 model)"),Hfo=l(),ws=a("li"),oie=a("strong"),Ufo=o("mvp"),Jfo=o(" \u2014 "),OI=a("a"),Yfo=o("MvpTokenizer"),Kfo=o(" or "),VI=a("a"),Zfo=o("MvpTokenizerFast"),ego=o(" (MVP model)"),ogo=l(),As=a("li"),rie=a("strong"),rgo=o("nezha"),tgo=o(" \u2014 "),XI=a("a"),ago=o("BertTokenizer"),ngo=o(" or "),zI=a("a"),sgo=o("BertTokenizerFast"),lgo=o(" (Nezha model)"),igo=l(),Ls=a("li"),tie=a("strong"),dgo=o("nystromformer"),cgo=o(" \u2014 "),QI=a("a"),mgo=o("AlbertTokenizer"),fgo=o(" or "),WI=a("a"),ggo=o("AlbertTokenizerFast"),hgo=o(" (Nystr\xF6mformer model)"),ugo=l(),ys=a("li"),aie=a("strong"),pgo=o("openai-gpt"),_go=o(" \u2014 "),HI=a("a"),bgo=o("OpenAIGPTTokenizer"),vgo=o(" or "),UI=a("a"),Fgo=o("OpenAIGPTTokenizerFast"),Tgo=o(" (OpenAI GPT model)"),Mgo=l(),_h=a("li"),nie=a("strong"),Ego=o("opt"),Cgo=o(" \u2014 "),JI=a("a"),wgo=o("GPT2Tokenizer"),Ago=o(" (OPT model)"),Lgo=l(),xs=a("li"),sie=a("strong"),ygo=o("pegasus"),xgo=o(" \u2014 "),YI=a("a"),$go=o("PegasusTokenizer"),kgo=o(" or "),KI=a("a"),Sgo=o("PegasusTokenizerFast"),Rgo=o(" (Pegasus model)"),Pgo=l(),bh=a("li"),lie=a("strong"),Bgo=o("perceiver"),Igo=o(" \u2014 "),ZI=a("a"),Ngo=o("PerceiverTokenizer"),qgo=o(" (Perceiver model)"),jgo=l(),vh=a("li"),iie=a("strong"),Dgo=o("phobert"),Ggo=o(" \u2014 "),eN=a("a"),Ogo=o("PhobertTokenizer"),Vgo=o(" (PhoBERT model)"),Xgo=l(),Fh=a("li"),die=a("strong"),zgo=o("plbart"),Qgo=o(" \u2014 "),oN=a("a"),Wgo=o("PLBartTokenizer"),Hgo=o(" (PLBart model)"),Ugo=l(),Th=a("li"),cie=a("strong"),Jgo=o("prophetnet"),Ygo=o(" \u2014 "),rN=a("a"),Kgo=o("ProphetNetTokenizer"),Zgo=o(" (ProphetNet model)"),eho=l(),$s=a("li"),mie=a("strong"),oho=o("qdqbert"),rho=o(" \u2014 "),tN=a("a"),tho=o("BertTokenizer"),aho=o(" or "),aN=a("a"),nho=o("BertTokenizerFast"),sho=o(" (QDQBert model)"),lho=l(),Mh=a("li"),fie=a("strong"),iho=o("rag"),dho=o(" \u2014 "),nN=a("a"),cho=o("RagTokenizer"),mho=o(" (RAG model)"),fho=l(),ks=a("li"),gie=a("strong"),gho=o("realm"),hho=o(" \u2014 "),sN=a("a"),uho=o("RealmTokenizer"),pho=o(" or "),lN=a("a"),_ho=o("RealmTokenizerFast"),bho=o(" (REALM model)"),vho=l(),Ss=a("li"),hie=a("strong"),Fho=o("reformer"),Tho=o(" \u2014 "),iN=a("a"),Mho=o("ReformerTokenizer"),Eho=o(" or "),dN=a("a"),Cho=o("ReformerTokenizerFast"),who=o(" (Reformer model)"),Aho=l(),Rs=a("li"),uie=a("strong"),Lho=o("rembert"),yho=o(" \u2014 "),cN=a("a"),xho=o("RemBertTokenizer"),$ho=o(" or "),mN=a("a"),kho=o("RemBertTokenizerFast"),Sho=o(" (RemBERT model)"),Rho=l(),Ps=a("li"),pie=a("strong"),Pho=o("retribert"),Bho=o(" \u2014 "),fN=a("a"),Iho=o("RetriBertTokenizer"),Nho=o(" or "),gN=a("a"),qho=o("RetriBertTokenizerFast"),jho=o(" (RetriBERT model)"),Dho=l(),Bs=a("li"),_ie=a("strong"),Gho=o("roberta"),Oho=o(" \u2014 "),hN=a("a"),Vho=o("RobertaTokenizer"),Xho=o(" or "),uN=a("a"),zho=o("RobertaTokenizerFast"),Qho=o(" (RoBERTa model)"),Who=l(),Is=a("li"),bie=a("strong"),Hho=o("roformer"),Uho=o(" \u2014 "),pN=a("a"),Jho=o("RoFormerTokenizer"),Yho=o(" or "),_N=a("a"),Kho=o("RoFormerTokenizerFast"),Zho=o(" (RoFormer model)"),euo=l(),Eh=a("li"),vie=a("strong"),ouo=o("speech_to_text"),ruo=o(" \u2014 "),bN=a("a"),tuo=o("Speech2TextTokenizer"),auo=o(" (Speech2Text model)"),nuo=l(),Ch=a("li"),Fie=a("strong"),suo=o("speech_to_text_2"),luo=o(" \u2014 "),vN=a("a"),iuo=o("Speech2Text2Tokenizer"),duo=o(" (Speech2Text2 model)"),cuo=l(),Ns=a("li"),Tie=a("strong"),muo=o("splinter"),fuo=o(" \u2014 "),FN=a("a"),guo=o("SplinterTokenizer"),huo=o(" or "),TN=a("a"),uuo=o("SplinterTokenizerFast"),puo=o(" (Splinter model)"),_uo=l(),qs=a("li"),Mie=a("strong"),buo=o("squeezebert"),vuo=o(" \u2014 "),MN=a("a"),Fuo=o("SqueezeBertTokenizer"),Tuo=o(" or "),EN=a("a"),Muo=o("SqueezeBertTokenizerFast"),Euo=o(" (SqueezeBERT model)"),Cuo=l(),js=a("li"),Eie=a("strong"),wuo=o("t5"),Auo=o(" \u2014 "),CN=a("a"),Luo=o("T5Tokenizer"),yuo=o(" or "),wN=a("a"),xuo=o("T5TokenizerFast"),$uo=o(" (T5 model)"),kuo=l(),wh=a("li"),Cie=a("strong"),Suo=o("tapas"),Ruo=o(" \u2014 "),AN=a("a"),Puo=o("TapasTokenizer"),Buo=o(" (TAPAS model)"),Iuo=l(),Ah=a("li"),wie=a("strong"),Nuo=o("tapex"),quo=o(" \u2014 "),LN=a("a"),juo=o("TapexTokenizer"),Duo=o(" (TAPEX model)"),Guo=l(),Lh=a("li"),Aie=a("strong"),Ouo=o("transfo-xl"),Vuo=o(" \u2014 "),yN=a("a"),Xuo=o("TransfoXLTokenizer"),zuo=o(" (Transformer-XL model)"),Quo=l(),Ds=a("li"),Lie=a("strong"),Wuo=o("vilt"),Huo=o(" \u2014 "),xN=a("a"),Uuo=o("BertTokenizer"),Juo=o(" or "),$N=a("a"),Yuo=o("BertTokenizerFast"),Kuo=o(" (ViLT model)"),Zuo=l(),Gs=a("li"),yie=a("strong"),epo=o("visual_bert"),opo=o(" \u2014 "),kN=a("a"),rpo=o("BertTokenizer"),tpo=o(" or "),SN=a("a"),apo=o("BertTokenizerFast"),npo=o(" (VisualBERT model)"),spo=l(),yh=a("li"),xie=a("strong"),lpo=o("wav2vec2"),ipo=o(" \u2014 "),RN=a("a"),dpo=o("Wav2Vec2CTCTokenizer"),cpo=o(" (Wav2Vec2 model)"),mpo=l(),xh=a("li"),$ie=a("strong"),fpo=o("wav2vec2-conformer"),gpo=o(" \u2014 "),PN=a("a"),hpo=o("Wav2Vec2CTCTokenizer"),upo=o(" (Wav2Vec2-Conformer model)"),ppo=l(),$h=a("li"),kie=a("strong"),_po=o("wav2vec2_phoneme"),bpo=o(" \u2014 "),BN=a("a"),vpo=o("Wav2Vec2PhonemeCTCTokenizer"),Fpo=o(" (Wav2Vec2Phoneme model)"),Tpo=l(),Os=a("li"),Sie=a("strong"),Mpo=o("xglm"),Epo=o(" \u2014 "),IN=a("a"),Cpo=o("XGLMTokenizer"),wpo=o(" or "),NN=a("a"),Apo=o("XGLMTokenizerFast"),Lpo=o(" (XGLM model)"),ypo=l(),kh=a("li"),Rie=a("strong"),xpo=o("xlm"),$po=o(" \u2014 "),qN=a("a"),kpo=o("XLMTokenizer"),Spo=o(" (XLM model)"),Rpo=l(),Sh=a("li"),Pie=a("strong"),Ppo=o("xlm-prophetnet"),Bpo=o(" \u2014 "),jN=a("a"),Ipo=o("XLMProphetNetTokenizer"),Npo=o(" (XLM-ProphetNet model)"),qpo=l(),Vs=a("li"),Bie=a("strong"),jpo=o("xlm-roberta"),Dpo=o(" \u2014 "),DN=a("a"),Gpo=o("XLMRobertaTokenizer"),Opo=o(" or "),GN=a("a"),Vpo=o("XLMRobertaTokenizerFast"),Xpo=o(" (XLM-RoBERTa model)"),zpo=l(),Xs=a("li"),Iie=a("strong"),Qpo=o("xlm-roberta-xl"),Wpo=o(" \u2014 "),ON=a("a"),Hpo=o("RobertaTokenizer"),Upo=o(" or "),VN=a("a"),Jpo=o("RobertaTokenizerFast"),Ypo=o(" (XLM-RoBERTa-XL model)"),Kpo=l(),zs=a("li"),Nie=a("strong"),Zpo=o("xlnet"),e_o=o(" \u2014 "),XN=a("a"),o_o=o("XLNetTokenizer"),r_o=o(" or "),zN=a("a"),t_o=o("XLNetTokenizerFast"),a_o=o(" (XLNet model)"),n_o=l(),Qs=a("li"),qie=a("strong"),s_o=o("yoso"),l_o=o(" \u2014 "),QN=a("a"),i_o=o("AlbertTokenizer"),d_o=o(" or "),WN=a("a"),c_o=o("AlbertTokenizerFast"),m_o=o(" (YOSO model)"),f_o=l(),F(Rh.$$.fragment),g_o=l(),Ph=a("div"),F(_y.$$.fragment),h_o=l(),jie=a("p"),u_o=o("Register a new tokenizer in this mapping."),sXe=l(),qi=a("h2"),Bh=a("a"),Die=a("span"),F(by.$$.fragment),p_o=l(),Gie=a("span"),__o=o("AutoFeatureExtractor"),lXe=l(),yo=a("div"),F(vy.$$.fragment),b_o=l(),Fy=a("p"),v_o=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),HN=a("a"),F_o=o("AutoFeatureExtractor.from_pretrained()"),T_o=o(" class method."),M_o=l(),Ty=a("p"),E_o=o("This class cannot be instantiated directly using "),Oie=a("code"),C_o=o("__init__()"),w_o=o(" (throws an error)."),A_o=l(),Ue=a("div"),F(My.$$.fragment),L_o=l(),Vie=a("p"),y_o=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),x_o=l(),Ba=a("p"),$_o=o("The feature extractor class to instantiate is selected based on the "),Xie=a("code"),k_o=o("model_type"),S_o=o(` property of the config object
(either passed as an argument or loaded from `),zie=a("code"),R_o=o("pretrained_model_name_or_path"),P_o=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Qie=a("code"),B_o=o("pretrained_model_name_or_path"),I_o=o(":"),N_o=l(),Y=a("ul"),Ih=a("li"),Wie=a("strong"),q_o=o("beit"),j_o=o(" \u2014 "),UN=a("a"),D_o=o("BeitFeatureExtractor"),G_o=o(" (BEiT model)"),O_o=l(),Nh=a("li"),Hie=a("strong"),V_o=o("clip"),X_o=o(" \u2014 "),JN=a("a"),z_o=o("CLIPFeatureExtractor"),Q_o=o(" (CLIP model)"),W_o=l(),qh=a("li"),Uie=a("strong"),H_o=o("convnext"),U_o=o(" \u2014 "),YN=a("a"),J_o=o("ConvNextFeatureExtractor"),Y_o=o(" (ConvNeXT model)"),K_o=l(),jh=a("li"),Jie=a("strong"),Z_o=o("cvt"),e2o=o(" \u2014 "),KN=a("a"),o2o=o("ConvNextFeatureExtractor"),r2o=o(" (CvT model)"),t2o=l(),Dh=a("li"),Yie=a("strong"),a2o=o("data2vec-audio"),n2o=o(" \u2014 "),ZN=a("a"),s2o=o("Wav2Vec2FeatureExtractor"),l2o=o(" (Data2VecAudio model)"),i2o=l(),Gh=a("li"),Kie=a("strong"),d2o=o("data2vec-vision"),c2o=o(" \u2014 "),eq=a("a"),m2o=o("BeitFeatureExtractor"),f2o=o(" (Data2VecVision model)"),g2o=l(),Oh=a("li"),Zie=a("strong"),h2o=o("deit"),u2o=o(" \u2014 "),oq=a("a"),p2o=o("DeiTFeatureExtractor"),_2o=o(" (DeiT model)"),b2o=l(),Vh=a("li"),ede=a("strong"),v2o=o("detr"),F2o=o(" \u2014 "),rq=a("a"),T2o=o("DetrFeatureExtractor"),M2o=o(" (DETR model)"),E2o=l(),Xh=a("li"),ode=a("strong"),C2o=o("dpt"),w2o=o(" \u2014 "),tq=a("a"),A2o=o("DPTFeatureExtractor"),L2o=o(" (DPT model)"),y2o=l(),zh=a("li"),rde=a("strong"),x2o=o("flava"),$2o=o(" \u2014 "),aq=a("a"),k2o=o("FlavaFeatureExtractor"),S2o=o(" (FLAVA model)"),R2o=l(),Qh=a("li"),tde=a("strong"),P2o=o("glpn"),B2o=o(" \u2014 "),nq=a("a"),I2o=o("GLPNFeatureExtractor"),N2o=o(" (GLPN model)"),q2o=l(),Wh=a("li"),ade=a("strong"),j2o=o("groupvit"),D2o=o(" \u2014 "),sq=a("a"),G2o=o("CLIPFeatureExtractor"),O2o=o(" (GroupViT model)"),V2o=l(),Hh=a("li"),nde=a("strong"),X2o=o("hubert"),z2o=o(" \u2014 "),lq=a("a"),Q2o=o("Wav2Vec2FeatureExtractor"),W2o=o(" (Hubert model)"),H2o=l(),Uh=a("li"),sde=a("strong"),U2o=o("imagegpt"),J2o=o(" \u2014 "),iq=a("a"),Y2o=o("ImageGPTFeatureExtractor"),K2o=o(" (ImageGPT model)"),Z2o=l(),Jh=a("li"),lde=a("strong"),ebo=o("layoutlmv2"),obo=o(" \u2014 "),dq=a("a"),rbo=o("LayoutLMv2FeatureExtractor"),tbo=o(" (LayoutLMv2 model)"),abo=l(),Yh=a("li"),ide=a("strong"),nbo=o("layoutlmv3"),sbo=o(" \u2014 "),cq=a("a"),lbo=o("LayoutLMv3FeatureExtractor"),ibo=o(" (LayoutLMv3 model)"),dbo=l(),Kh=a("li"),dde=a("strong"),cbo=o("levit"),mbo=o(" \u2014 "),mq=a("a"),fbo=o("LevitFeatureExtractor"),gbo=o(" (LeViT model)"),hbo=l(),Zh=a("li"),cde=a("strong"),ubo=o("maskformer"),pbo=o(" \u2014 "),fq=a("a"),_bo=o("MaskFormerFeatureExtractor"),bbo=o(" (MaskFormer model)"),vbo=l(),eu=a("li"),mde=a("strong"),Fbo=o("mctct"),Tbo=o(" \u2014 "),gq=a("a"),Mbo=o("MCTCTFeatureExtractor"),Ebo=o(" (M-CTC-T model)"),Cbo=l(),ou=a("li"),fde=a("strong"),wbo=o("mobilevit"),Abo=o(" \u2014 "),hq=a("a"),Lbo=o("MobileViTFeatureExtractor"),ybo=o(" (MobileViT model)"),xbo=l(),ru=a("li"),gde=a("strong"),$bo=o("perceiver"),kbo=o(" \u2014 "),uq=a("a"),Sbo=o("PerceiverFeatureExtractor"),Rbo=o(" (Perceiver model)"),Pbo=l(),tu=a("li"),hde=a("strong"),Bbo=o("poolformer"),Ibo=o(" \u2014 "),pq=a("a"),Nbo=o("PoolFormerFeatureExtractor"),qbo=o(" (PoolFormer model)"),jbo=l(),au=a("li"),ude=a("strong"),Dbo=o("regnet"),Gbo=o(" \u2014 "),_q=a("a"),Obo=o("ConvNextFeatureExtractor"),Vbo=o(" (RegNet model)"),Xbo=l(),nu=a("li"),pde=a("strong"),zbo=o("resnet"),Qbo=o(" \u2014 "),bq=a("a"),Wbo=o("ConvNextFeatureExtractor"),Hbo=o(" (ResNet model)"),Ubo=l(),su=a("li"),_de=a("strong"),Jbo=o("segformer"),Ybo=o(" \u2014 "),vq=a("a"),Kbo=o("SegformerFeatureExtractor"),Zbo=o(" (SegFormer model)"),evo=l(),lu=a("li"),bde=a("strong"),ovo=o("speech_to_text"),rvo=o(" \u2014 "),Fq=a("a"),tvo=o("Speech2TextFeatureExtractor"),avo=o(" (Speech2Text model)"),nvo=l(),iu=a("li"),vde=a("strong"),svo=o("swin"),lvo=o(" \u2014 "),Tq=a("a"),ivo=o("ViTFeatureExtractor"),dvo=o(" (Swin Transformer model)"),cvo=l(),du=a("li"),Fde=a("strong"),mvo=o("van"),fvo=o(" \u2014 "),Mq=a("a"),gvo=o("ConvNextFeatureExtractor"),hvo=o(" (VAN model)"),uvo=l(),cu=a("li"),Tde=a("strong"),pvo=o("vilt"),_vo=o(" \u2014 "),Eq=a("a"),bvo=o("ViltFeatureExtractor"),vvo=o(" (ViLT model)"),Fvo=l(),mu=a("li"),Mde=a("strong"),Tvo=o("vit"),Mvo=o(" \u2014 "),Cq=a("a"),Evo=o("ViTFeatureExtractor"),Cvo=o(" (ViT model)"),wvo=l(),fu=a("li"),Ede=a("strong"),Avo=o("vit_mae"),Lvo=o(" \u2014 "),wq=a("a"),yvo=o("ViTFeatureExtractor"),xvo=o(" (ViTMAE model)"),$vo=l(),gu=a("li"),Cde=a("strong"),kvo=o("wav2vec2"),Svo=o(" \u2014 "),Aq=a("a"),Rvo=o("Wav2Vec2FeatureExtractor"),Pvo=o(" (Wav2Vec2 model)"),Bvo=l(),hu=a("li"),wde=a("strong"),Ivo=o("wav2vec2-conformer"),Nvo=o(" \u2014 "),Lq=a("a"),qvo=o("Wav2Vec2FeatureExtractor"),jvo=o(" (Wav2Vec2-Conformer model)"),Dvo=l(),uu=a("li"),Ade=a("strong"),Gvo=o("yolos"),Ovo=o(" \u2014 "),yq=a("a"),Vvo=o("YolosFeatureExtractor"),Xvo=o(" (YOLOS model)"),zvo=l(),F(pu.$$.fragment),Qvo=l(),F(_u.$$.fragment),Wvo=l(),bu=a("div"),F(Ey.$$.fragment),Hvo=l(),Lde=a("p"),Uvo=o("Register a new feature extractor for this class."),iXe=l(),ji=a("h2"),vu=a("a"),yde=a("span"),F(Cy.$$.fragment),Jvo=l(),xde=a("span"),Yvo=o("AutoProcessor"),dXe=l(),xo=a("div"),F(wy.$$.fragment),Kvo=l(),Ay=a("p"),Zvo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),xq=a("a"),e1o=o("AutoProcessor.from_pretrained()"),o1o=o(" class method."),r1o=l(),Ly=a("p"),t1o=o("This class cannot be instantiated directly using "),$de=a("code"),a1o=o("__init__()"),n1o=o(" (throws an error)."),s1o=l(),Je=a("div"),F(yy.$$.fragment),l1o=l(),kde=a("p"),i1o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),d1o=l(),Di=a("p"),c1o=o("The processor class to instantiate is selected based on the "),Sde=a("code"),m1o=o("model_type"),f1o=o(` property of the config object (either
passed as an argument or loaded from `),Rde=a("code"),g1o=o("pretrained_model_name_or_path"),h1o=o(" if possible):"),u1o=l(),he=a("ul"),Fu=a("li"),Pde=a("strong"),p1o=o("clip"),_1o=o(" \u2014 "),$q=a("a"),b1o=o("CLIPProcessor"),v1o=o(" (CLIP model)"),F1o=l(),Tu=a("li"),Bde=a("strong"),T1o=o("flava"),M1o=o(" \u2014 "),Ide=a("code"),E1o=o("FLAVAProcessor"),C1o=o(" (FLAVA model)"),w1o=l(),Mu=a("li"),Nde=a("strong"),A1o=o("groupvit"),L1o=o(" \u2014 "),kq=a("a"),y1o=o("CLIPProcessor"),x1o=o(" (GroupViT model)"),$1o=l(),Eu=a("li"),qde=a("strong"),k1o=o("layoutlmv2"),S1o=o(" \u2014 "),Sq=a("a"),R1o=o("LayoutLMv2Processor"),P1o=o(" (LayoutLMv2 model)"),B1o=l(),Cu=a("li"),jde=a("strong"),I1o=o("layoutlmv3"),N1o=o(" \u2014 "),Rq=a("a"),q1o=o("LayoutLMv3Processor"),j1o=o(" (LayoutLMv3 model)"),D1o=l(),wu=a("li"),Dde=a("strong"),G1o=o("layoutxlm"),O1o=o(" \u2014 "),Pq=a("a"),V1o=o("LayoutXLMProcessor"),X1o=o(" (LayoutXLM model)"),z1o=l(),Au=a("li"),Gde=a("strong"),Q1o=o("sew"),W1o=o(" \u2014 "),Bq=a("a"),H1o=o("Wav2Vec2Processor"),U1o=o(" (SEW model)"),J1o=l(),Lu=a("li"),Ode=a("strong"),Y1o=o("sew-d"),K1o=o(" \u2014 "),Iq=a("a"),Z1o=o("Wav2Vec2Processor"),eFo=o(" (SEW-D model)"),oFo=l(),yu=a("li"),Vde=a("strong"),rFo=o("speech_to_text"),tFo=o(" \u2014 "),Nq=a("a"),aFo=o("Speech2TextProcessor"),nFo=o(" (Speech2Text model)"),sFo=l(),xu=a("li"),Xde=a("strong"),lFo=o("speech_to_text_2"),iFo=o(" \u2014 "),qq=a("a"),dFo=o("Speech2Text2Processor"),cFo=o(" (Speech2Text2 model)"),mFo=l(),$u=a("li"),zde=a("strong"),fFo=o("trocr"),gFo=o(" \u2014 "),jq=a("a"),hFo=o("TrOCRProcessor"),uFo=o(" (TrOCR model)"),pFo=l(),ku=a("li"),Qde=a("strong"),_Fo=o("unispeech"),bFo=o(" \u2014 "),Dq=a("a"),vFo=o("Wav2Vec2Processor"),FFo=o(" (UniSpeech model)"),TFo=l(),Su=a("li"),Wde=a("strong"),MFo=o("unispeech-sat"),EFo=o(" \u2014 "),Gq=a("a"),CFo=o("Wav2Vec2Processor"),wFo=o(" (UniSpeechSat model)"),AFo=l(),Ru=a("li"),Hde=a("strong"),LFo=o("vilt"),yFo=o(" \u2014 "),Oq=a("a"),xFo=o("ViltProcessor"),$Fo=o(" (ViLT model)"),kFo=l(),Pu=a("li"),Ude=a("strong"),SFo=o("vision-text-dual-encoder"),RFo=o(" \u2014 "),Vq=a("a"),PFo=o("VisionTextDualEncoderProcessor"),BFo=o(" (VisionTextDualEncoder model)"),IFo=l(),Bu=a("li"),Jde=a("strong"),NFo=o("wav2vec2"),qFo=o(" \u2014 "),Xq=a("a"),jFo=o("Wav2Vec2Processor"),DFo=o(" (Wav2Vec2 model)"),GFo=l(),Iu=a("li"),Yde=a("strong"),OFo=o("wav2vec2-conformer"),VFo=o(" \u2014 "),zq=a("a"),XFo=o("Wav2Vec2Processor"),zFo=o(" (Wav2Vec2-Conformer model)"),QFo=l(),Nu=a("li"),Kde=a("strong"),WFo=o("wavlm"),HFo=o(" \u2014 "),Qq=a("a"),UFo=o("Wav2Vec2Processor"),JFo=o(" (WavLM model)"),YFo=l(),F(qu.$$.fragment),KFo=l(),F(ju.$$.fragment),ZFo=l(),Du=a("div"),F(xy.$$.fragment),eTo=l(),Zde=a("p"),oTo=o("Register a new processor for this class."),cXe=l(),Gi=a("h2"),Gu=a("a"),ece=a("span"),F($y.$$.fragment),rTo=l(),oce=a("span"),tTo=o("AutoModel"),mXe=l(),$o=a("div"),F(ky.$$.fragment),aTo=l(),Oi=a("p"),nTo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Wq=a("a"),sTo=o("from_pretrained()"),lTo=o(" class method or the "),Hq=a("a"),iTo=o("from_config()"),dTo=o(` class
method.`),cTo=l(),Sy=a("p"),mTo=o("This class cannot be instantiated directly using "),rce=a("code"),fTo=o("__init__()"),gTo=o(" (throws an error)."),hTo=l(),it=a("div"),F(Ry.$$.fragment),uTo=l(),tce=a("p"),pTo=o("Instantiates one of the base model classes of the library from a configuration."),_To=l(),Vi=a("p"),bTo=o(`Note:
Loading a model from its configuration file does `),ace=a("strong"),vTo=o("not"),FTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uq=a("a"),TTo=o("from_pretrained()"),MTo=o(" to load the model weights."),ETo=l(),F(Ou.$$.fragment),CTo=l(),Ye=a("div"),F(Py.$$.fragment),wTo=l(),nce=a("p"),ATo=o("Instantiate one of the base model classes of the library from a pretrained model."),LTo=l(),Ia=a("p"),yTo=o("The model class to instantiate is selected based on the "),sce=a("code"),xTo=o("model_type"),$To=o(` property of the config object (either
passed as an argument or loaded from `),lce=a("code"),kTo=o("pretrained_model_name_or_path"),STo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ice=a("code"),RTo=o("pretrained_model_name_or_path"),PTo=o(":"),BTo=l(),y=a("ul"),Vu=a("li"),dce=a("strong"),ITo=o("albert"),NTo=o(" \u2014 "),Jq=a("a"),qTo=o("AlbertModel"),jTo=o(" (ALBERT model)"),DTo=l(),Xu=a("li"),cce=a("strong"),GTo=o("bart"),OTo=o(" \u2014 "),Yq=a("a"),VTo=o("BartModel"),XTo=o(" (BART model)"),zTo=l(),zu=a("li"),mce=a("strong"),QTo=o("beit"),WTo=o(" \u2014 "),Kq=a("a"),HTo=o("BeitModel"),UTo=o(" (BEiT model)"),JTo=l(),Qu=a("li"),fce=a("strong"),YTo=o("bert"),KTo=o(" \u2014 "),Zq=a("a"),ZTo=o("BertModel"),eMo=o(" (BERT model)"),oMo=l(),Wu=a("li"),gce=a("strong"),rMo=o("bert-generation"),tMo=o(" \u2014 "),ej=a("a"),aMo=o("BertGenerationEncoder"),nMo=o(" (Bert Generation model)"),sMo=l(),Hu=a("li"),hce=a("strong"),lMo=o("big_bird"),iMo=o(" \u2014 "),oj=a("a"),dMo=o("BigBirdModel"),cMo=o(" (BigBird model)"),mMo=l(),Uu=a("li"),uce=a("strong"),fMo=o("bigbird_pegasus"),gMo=o(" \u2014 "),rj=a("a"),hMo=o("BigBirdPegasusModel"),uMo=o(" (BigBird-Pegasus model)"),pMo=l(),Ju=a("li"),pce=a("strong"),_Mo=o("blenderbot"),bMo=o(" \u2014 "),tj=a("a"),vMo=o("BlenderbotModel"),FMo=o(" (Blenderbot model)"),TMo=l(),Yu=a("li"),_ce=a("strong"),MMo=o("blenderbot-small"),EMo=o(" \u2014 "),aj=a("a"),CMo=o("BlenderbotSmallModel"),wMo=o(" (BlenderbotSmall model)"),AMo=l(),Ku=a("li"),bce=a("strong"),LMo=o("bloom"),yMo=o(" \u2014 "),nj=a("a"),xMo=o("BloomModel"),$Mo=o(" (BLOOM model)"),kMo=l(),Zu=a("li"),vce=a("strong"),SMo=o("camembert"),RMo=o(" \u2014 "),sj=a("a"),PMo=o("CamembertModel"),BMo=o(" (CamemBERT model)"),IMo=l(),ep=a("li"),Fce=a("strong"),NMo=o("canine"),qMo=o(" \u2014 "),lj=a("a"),jMo=o("CanineModel"),DMo=o(" (CANINE model)"),GMo=l(),op=a("li"),Tce=a("strong"),OMo=o("clip"),VMo=o(" \u2014 "),ij=a("a"),XMo=o("CLIPModel"),zMo=o(" (CLIP model)"),QMo=l(),rp=a("li"),Mce=a("strong"),WMo=o("codegen"),HMo=o(" \u2014 "),dj=a("a"),UMo=o("CodeGenModel"),JMo=o(" (CodeGen model)"),YMo=l(),tp=a("li"),Ece=a("strong"),KMo=o("convbert"),ZMo=o(" \u2014 "),cj=a("a"),e4o=o("ConvBertModel"),o4o=o(" (ConvBERT model)"),r4o=l(),ap=a("li"),Cce=a("strong"),t4o=o("convnext"),a4o=o(" \u2014 "),mj=a("a"),n4o=o("ConvNextModel"),s4o=o(" (ConvNeXT model)"),l4o=l(),np=a("li"),wce=a("strong"),i4o=o("ctrl"),d4o=o(" \u2014 "),fj=a("a"),c4o=o("CTRLModel"),m4o=o(" (CTRL model)"),f4o=l(),sp=a("li"),Ace=a("strong"),g4o=o("cvt"),h4o=o(" \u2014 "),gj=a("a"),u4o=o("CvtModel"),p4o=o(" (CvT model)"),_4o=l(),lp=a("li"),Lce=a("strong"),b4o=o("data2vec-audio"),v4o=o(" \u2014 "),hj=a("a"),F4o=o("Data2VecAudioModel"),T4o=o(" (Data2VecAudio model)"),M4o=l(),ip=a("li"),yce=a("strong"),E4o=o("data2vec-text"),C4o=o(" \u2014 "),uj=a("a"),w4o=o("Data2VecTextModel"),A4o=o(" (Data2VecText model)"),L4o=l(),dp=a("li"),xce=a("strong"),y4o=o("data2vec-vision"),x4o=o(" \u2014 "),pj=a("a"),$4o=o("Data2VecVisionModel"),k4o=o(" (Data2VecVision model)"),S4o=l(),cp=a("li"),$ce=a("strong"),R4o=o("deberta"),P4o=o(" \u2014 "),_j=a("a"),B4o=o("DebertaModel"),I4o=o(" (DeBERTa model)"),N4o=l(),mp=a("li"),kce=a("strong"),q4o=o("deberta-v2"),j4o=o(" \u2014 "),bj=a("a"),D4o=o("DebertaV2Model"),G4o=o(" (DeBERTa-v2 model)"),O4o=l(),fp=a("li"),Sce=a("strong"),V4o=o("decision_transformer"),X4o=o(" \u2014 "),vj=a("a"),z4o=o("DecisionTransformerModel"),Q4o=o(" (Decision Transformer model)"),W4o=l(),gp=a("li"),Rce=a("strong"),H4o=o("deit"),U4o=o(" \u2014 "),Fj=a("a"),J4o=o("DeiTModel"),Y4o=o(" (DeiT model)"),K4o=l(),hp=a("li"),Pce=a("strong"),Z4o=o("detr"),eEo=o(" \u2014 "),Tj=a("a"),oEo=o("DetrModel"),rEo=o(" (DETR model)"),tEo=l(),up=a("li"),Bce=a("strong"),aEo=o("distilbert"),nEo=o(" \u2014 "),Mj=a("a"),sEo=o("DistilBertModel"),lEo=o(" (DistilBERT model)"),iEo=l(),pp=a("li"),Ice=a("strong"),dEo=o("dpr"),cEo=o(" \u2014 "),Ej=a("a"),mEo=o("DPRQuestionEncoder"),fEo=o(" (DPR model)"),gEo=l(),_p=a("li"),Nce=a("strong"),hEo=o("dpt"),uEo=o(" \u2014 "),Cj=a("a"),pEo=o("DPTModel"),_Eo=o(" (DPT model)"),bEo=l(),bp=a("li"),qce=a("strong"),vEo=o("electra"),FEo=o(" \u2014 "),wj=a("a"),TEo=o("ElectraModel"),MEo=o(" (ELECTRA model)"),EEo=l(),vp=a("li"),jce=a("strong"),CEo=o("flaubert"),wEo=o(" \u2014 "),Aj=a("a"),AEo=o("FlaubertModel"),LEo=o(" (FlauBERT model)"),yEo=l(),Fp=a("li"),Dce=a("strong"),xEo=o("flava"),$Eo=o(" \u2014 "),Lj=a("a"),kEo=o("FlavaModel"),SEo=o(" (FLAVA model)"),REo=l(),Tp=a("li"),Gce=a("strong"),PEo=o("fnet"),BEo=o(" \u2014 "),yj=a("a"),IEo=o("FNetModel"),NEo=o(" (FNet model)"),qEo=l(),Mp=a("li"),Oce=a("strong"),jEo=o("fsmt"),DEo=o(" \u2014 "),xj=a("a"),GEo=o("FSMTModel"),OEo=o(" (FairSeq Machine-Translation model)"),VEo=l(),Ws=a("li"),Vce=a("strong"),XEo=o("funnel"),zEo=o(" \u2014 "),$j=a("a"),QEo=o("FunnelModel"),WEo=o(" or "),kj=a("a"),HEo=o("FunnelBaseModel"),UEo=o(" (Funnel Transformer model)"),JEo=l(),Ep=a("li"),Xce=a("strong"),YEo=o("glpn"),KEo=o(" \u2014 "),Sj=a("a"),ZEo=o("GLPNModel"),eCo=o(" (GLPN model)"),oCo=l(),Cp=a("li"),zce=a("strong"),rCo=o("gpt2"),tCo=o(" \u2014 "),Rj=a("a"),aCo=o("GPT2Model"),nCo=o(" (OpenAI GPT-2 model)"),sCo=l(),wp=a("li"),Qce=a("strong"),lCo=o("gpt_neo"),iCo=o(" \u2014 "),Pj=a("a"),dCo=o("GPTNeoModel"),cCo=o(" (GPT Neo model)"),mCo=l(),Ap=a("li"),Wce=a("strong"),fCo=o("gpt_neox"),gCo=o(" \u2014 "),Bj=a("a"),hCo=o("GPTNeoXModel"),uCo=o(" (GPT NeoX model)"),pCo=l(),Lp=a("li"),Hce=a("strong"),_Co=o("gptj"),bCo=o(" \u2014 "),Ij=a("a"),vCo=o("GPTJModel"),FCo=o(" (GPT-J model)"),TCo=l(),yp=a("li"),Uce=a("strong"),MCo=o("groupvit"),ECo=o(" \u2014 "),Nj=a("a"),CCo=o("GroupViTModel"),wCo=o(" (GroupViT model)"),ACo=l(),xp=a("li"),Jce=a("strong"),LCo=o("hubert"),yCo=o(" \u2014 "),qj=a("a"),xCo=o("HubertModel"),$Co=o(" (Hubert model)"),kCo=l(),$p=a("li"),Yce=a("strong"),SCo=o("ibert"),RCo=o(" \u2014 "),jj=a("a"),PCo=o("IBertModel"),BCo=o(" (I-BERT model)"),ICo=l(),kp=a("li"),Kce=a("strong"),NCo=o("imagegpt"),qCo=o(" \u2014 "),Dj=a("a"),jCo=o("ImageGPTModel"),DCo=o(" (ImageGPT model)"),GCo=l(),Sp=a("li"),Zce=a("strong"),OCo=o("layoutlm"),VCo=o(" \u2014 "),Gj=a("a"),XCo=o("LayoutLMModel"),zCo=o(" (LayoutLM model)"),QCo=l(),Rp=a("li"),eme=a("strong"),WCo=o("layoutlmv2"),HCo=o(" \u2014 "),Oj=a("a"),UCo=o("LayoutLMv2Model"),JCo=o(" (LayoutLMv2 model)"),YCo=l(),Pp=a("li"),ome=a("strong"),KCo=o("layoutlmv3"),ZCo=o(" \u2014 "),Vj=a("a"),e3o=o("LayoutLMv3Model"),o3o=o(" (LayoutLMv3 model)"),r3o=l(),Bp=a("li"),rme=a("strong"),t3o=o("led"),a3o=o(" \u2014 "),Xj=a("a"),n3o=o("LEDModel"),s3o=o(" (LED model)"),l3o=l(),Ip=a("li"),tme=a("strong"),i3o=o("levit"),d3o=o(" \u2014 "),zj=a("a"),c3o=o("LevitModel"),m3o=o(" (LeViT model)"),f3o=l(),Np=a("li"),ame=a("strong"),g3o=o("longformer"),h3o=o(" \u2014 "),Qj=a("a"),u3o=o("LongformerModel"),p3o=o(" (Longformer model)"),_3o=l(),qp=a("li"),nme=a("strong"),b3o=o("longt5"),v3o=o(" \u2014 "),Wj=a("a"),F3o=o("LongT5Model"),T3o=o(" (LongT5 model)"),M3o=l(),jp=a("li"),sme=a("strong"),E3o=o("luke"),C3o=o(" \u2014 "),Hj=a("a"),w3o=o("LukeModel"),A3o=o(" (LUKE model)"),L3o=l(),Dp=a("li"),lme=a("strong"),y3o=o("lxmert"),x3o=o(" \u2014 "),Uj=a("a"),$3o=o("LxmertModel"),k3o=o(" (LXMERT model)"),S3o=l(),Gp=a("li"),ime=a("strong"),R3o=o("m2m_100"),P3o=o(" \u2014 "),Jj=a("a"),B3o=o("M2M100Model"),I3o=o(" (M2M100 model)"),N3o=l(),Op=a("li"),dme=a("strong"),q3o=o("marian"),j3o=o(" \u2014 "),Yj=a("a"),D3o=o("MarianModel"),G3o=o(" (Marian model)"),O3o=l(),Vp=a("li"),cme=a("strong"),V3o=o("maskformer"),X3o=o(" \u2014 "),Kj=a("a"),z3o=o("MaskFormerModel"),Q3o=o(" (MaskFormer model)"),W3o=l(),Xp=a("li"),mme=a("strong"),H3o=o("mbart"),U3o=o(" \u2014 "),Zj=a("a"),J3o=o("MBartModel"),Y3o=o(" (mBART model)"),K3o=l(),zp=a("li"),fme=a("strong"),Z3o=o("mctct"),e5o=o(" \u2014 "),eD=a("a"),o5o=o("MCTCTModel"),r5o=o(" (M-CTC-T model)"),t5o=l(),Qp=a("li"),gme=a("strong"),a5o=o("megatron-bert"),n5o=o(" \u2014 "),oD=a("a"),s5o=o("MegatronBertModel"),l5o=o(" (Megatron-BERT model)"),i5o=l(),Wp=a("li"),hme=a("strong"),d5o=o("mobilebert"),c5o=o(" \u2014 "),rD=a("a"),m5o=o("MobileBertModel"),f5o=o(" (MobileBERT model)"),g5o=l(),Hp=a("li"),ume=a("strong"),h5o=o("mobilevit"),u5o=o(" \u2014 "),tD=a("a"),p5o=o("MobileViTModel"),_5o=o(" (MobileViT model)"),b5o=l(),Up=a("li"),pme=a("strong"),v5o=o("mpnet"),F5o=o(" \u2014 "),aD=a("a"),T5o=o("MPNetModel"),M5o=o(" (MPNet model)"),E5o=l(),Jp=a("li"),_me=a("strong"),C5o=o("mt5"),w5o=o(" \u2014 "),nD=a("a"),A5o=o("MT5Model"),L5o=o(" (MT5 model)"),y5o=l(),Yp=a("li"),bme=a("strong"),x5o=o("mvp"),$5o=o(" \u2014 "),sD=a("a"),k5o=o("MvpModel"),S5o=o(" (MVP model)"),R5o=l(),Kp=a("li"),vme=a("strong"),P5o=o("nezha"),B5o=o(" \u2014 "),lD=a("a"),I5o=o("NezhaModel"),N5o=o(" (Nezha model)"),q5o=l(),Zp=a("li"),Fme=a("strong"),j5o=o("nystromformer"),D5o=o(" \u2014 "),iD=a("a"),G5o=o("NystromformerModel"),O5o=o(" (Nystr\xF6mformer model)"),V5o=l(),e_=a("li"),Tme=a("strong"),X5o=o("openai-gpt"),z5o=o(" \u2014 "),dD=a("a"),Q5o=o("OpenAIGPTModel"),W5o=o(" (OpenAI GPT model)"),H5o=l(),o_=a("li"),Mme=a("strong"),U5o=o("opt"),J5o=o(" \u2014 "),cD=a("a"),Y5o=o("OPTModel"),K5o=o(" (OPT model)"),Z5o=l(),r_=a("li"),Eme=a("strong"),e0o=o("pegasus"),o0o=o(" \u2014 "),mD=a("a"),r0o=o("PegasusModel"),t0o=o(" (Pegasus model)"),a0o=l(),t_=a("li"),Cme=a("strong"),n0o=o("perceiver"),s0o=o(" \u2014 "),fD=a("a"),l0o=o("PerceiverModel"),i0o=o(" (Perceiver model)"),d0o=l(),a_=a("li"),wme=a("strong"),c0o=o("plbart"),m0o=o(" \u2014 "),gD=a("a"),f0o=o("PLBartModel"),g0o=o(" (PLBart model)"),h0o=l(),n_=a("li"),Ame=a("strong"),u0o=o("poolformer"),p0o=o(" \u2014 "),hD=a("a"),_0o=o("PoolFormerModel"),b0o=o(" (PoolFormer model)"),v0o=l(),s_=a("li"),Lme=a("strong"),F0o=o("prophetnet"),T0o=o(" \u2014 "),uD=a("a"),M0o=o("ProphetNetModel"),E0o=o(" (ProphetNet model)"),C0o=l(),l_=a("li"),yme=a("strong"),w0o=o("qdqbert"),A0o=o(" \u2014 "),pD=a("a"),L0o=o("QDQBertModel"),y0o=o(" (QDQBert model)"),x0o=l(),i_=a("li"),xme=a("strong"),$0o=o("reformer"),k0o=o(" \u2014 "),_D=a("a"),S0o=o("ReformerModel"),R0o=o(" (Reformer model)"),P0o=l(),d_=a("li"),$me=a("strong"),B0o=o("regnet"),I0o=o(" \u2014 "),bD=a("a"),N0o=o("RegNetModel"),q0o=o(" (RegNet model)"),j0o=l(),c_=a("li"),kme=a("strong"),D0o=o("rembert"),G0o=o(" \u2014 "),vD=a("a"),O0o=o("RemBertModel"),V0o=o(" (RemBERT model)"),X0o=l(),m_=a("li"),Sme=a("strong"),z0o=o("resnet"),Q0o=o(" \u2014 "),FD=a("a"),W0o=o("ResNetModel"),H0o=o(" (ResNet model)"),U0o=l(),f_=a("li"),Rme=a("strong"),J0o=o("retribert"),Y0o=o(" \u2014 "),TD=a("a"),K0o=o("RetriBertModel"),Z0o=o(" (RetriBERT model)"),ewo=l(),g_=a("li"),Pme=a("strong"),owo=o("roberta"),rwo=o(" \u2014 "),MD=a("a"),two=o("RobertaModel"),awo=o(" (RoBERTa model)"),nwo=l(),h_=a("li"),Bme=a("strong"),swo=o("roformer"),lwo=o(" \u2014 "),ED=a("a"),iwo=o("RoFormerModel"),dwo=o(" (RoFormer model)"),cwo=l(),u_=a("li"),Ime=a("strong"),mwo=o("segformer"),fwo=o(" \u2014 "),CD=a("a"),gwo=o("SegformerModel"),hwo=o(" (SegFormer model)"),uwo=l(),p_=a("li"),Nme=a("strong"),pwo=o("sew"),_wo=o(" \u2014 "),wD=a("a"),bwo=o("SEWModel"),vwo=o(" (SEW model)"),Fwo=l(),__=a("li"),qme=a("strong"),Two=o("sew-d"),Mwo=o(" \u2014 "),AD=a("a"),Ewo=o("SEWDModel"),Cwo=o(" (SEW-D model)"),wwo=l(),b_=a("li"),jme=a("strong"),Awo=o("speech_to_text"),Lwo=o(" \u2014 "),LD=a("a"),ywo=o("Speech2TextModel"),xwo=o(" (Speech2Text model)"),$wo=l(),v_=a("li"),Dme=a("strong"),kwo=o("splinter"),Swo=o(" \u2014 "),yD=a("a"),Rwo=o("SplinterModel"),Pwo=o(" (Splinter model)"),Bwo=l(),F_=a("li"),Gme=a("strong"),Iwo=o("squeezebert"),Nwo=o(" \u2014 "),xD=a("a"),qwo=o("SqueezeBertModel"),jwo=o(" (SqueezeBERT model)"),Dwo=l(),T_=a("li"),Ome=a("strong"),Gwo=o("swin"),Owo=o(" \u2014 "),$D=a("a"),Vwo=o("SwinModel"),Xwo=o(" (Swin Transformer model)"),zwo=l(),M_=a("li"),Vme=a("strong"),Qwo=o("t5"),Wwo=o(" \u2014 "),kD=a("a"),Hwo=o("T5Model"),Uwo=o(" (T5 model)"),Jwo=l(),E_=a("li"),Xme=a("strong"),Ywo=o("tapas"),Kwo=o(" \u2014 "),SD=a("a"),Zwo=o("TapasModel"),eAo=o(" (TAPAS model)"),oAo=l(),C_=a("li"),zme=a("strong"),rAo=o("trajectory_transformer"),tAo=o(" \u2014 "),RD=a("a"),aAo=o("TrajectoryTransformerModel"),nAo=o(" (Trajectory Transformer model)"),sAo=l(),w_=a("li"),Qme=a("strong"),lAo=o("transfo-xl"),iAo=o(" \u2014 "),PD=a("a"),dAo=o("TransfoXLModel"),cAo=o(" (Transformer-XL model)"),mAo=l(),A_=a("li"),Wme=a("strong"),fAo=o("unispeech"),gAo=o(" \u2014 "),BD=a("a"),hAo=o("UniSpeechModel"),uAo=o(" (UniSpeech model)"),pAo=l(),L_=a("li"),Hme=a("strong"),_Ao=o("unispeech-sat"),bAo=o(" \u2014 "),ID=a("a"),vAo=o("UniSpeechSatModel"),FAo=o(" (UniSpeechSat model)"),TAo=l(),y_=a("li"),Ume=a("strong"),MAo=o("van"),EAo=o(" \u2014 "),ND=a("a"),CAo=o("VanModel"),wAo=o(" (VAN model)"),AAo=l(),x_=a("li"),Jme=a("strong"),LAo=o("vilt"),yAo=o(" \u2014 "),qD=a("a"),xAo=o("ViltModel"),$Ao=o(" (ViLT model)"),kAo=l(),$_=a("li"),Yme=a("strong"),SAo=o("vision-text-dual-encoder"),RAo=o(" \u2014 "),jD=a("a"),PAo=o("VisionTextDualEncoderModel"),BAo=o(" (VisionTextDualEncoder model)"),IAo=l(),k_=a("li"),Kme=a("strong"),NAo=o("visual_bert"),qAo=o(" \u2014 "),DD=a("a"),jAo=o("VisualBertModel"),DAo=o(" (VisualBERT model)"),GAo=l(),S_=a("li"),Zme=a("strong"),OAo=o("vit"),VAo=o(" \u2014 "),GD=a("a"),XAo=o("ViTModel"),zAo=o(" (ViT model)"),QAo=l(),R_=a("li"),efe=a("strong"),WAo=o("vit_mae"),HAo=o(" \u2014 "),OD=a("a"),UAo=o("ViTMAEModel"),JAo=o(" (ViTMAE model)"),YAo=l(),P_=a("li"),ofe=a("strong"),KAo=o("wav2vec2"),ZAo=o(" \u2014 "),VD=a("a"),e6o=o("Wav2Vec2Model"),o6o=o(" (Wav2Vec2 model)"),r6o=l(),B_=a("li"),rfe=a("strong"),t6o=o("wav2vec2-conformer"),a6o=o(" \u2014 "),XD=a("a"),n6o=o("Wav2Vec2ConformerModel"),s6o=o(" (Wav2Vec2-Conformer model)"),l6o=l(),I_=a("li"),tfe=a("strong"),i6o=o("wavlm"),d6o=o(" \u2014 "),zD=a("a"),c6o=o("WavLMModel"),m6o=o(" (WavLM model)"),f6o=l(),N_=a("li"),afe=a("strong"),g6o=o("xglm"),h6o=o(" \u2014 "),QD=a("a"),u6o=o("XGLMModel"),p6o=o(" (XGLM model)"),_6o=l(),q_=a("li"),nfe=a("strong"),b6o=o("xlm"),v6o=o(" \u2014 "),WD=a("a"),F6o=o("XLMModel"),T6o=o(" (XLM model)"),M6o=l(),j_=a("li"),sfe=a("strong"),E6o=o("xlm-prophetnet"),C6o=o(" \u2014 "),HD=a("a"),w6o=o("XLMProphetNetModel"),A6o=o(" (XLM-ProphetNet model)"),L6o=l(),D_=a("li"),lfe=a("strong"),y6o=o("xlm-roberta"),x6o=o(" \u2014 "),UD=a("a"),$6o=o("XLMRobertaModel"),k6o=o(" (XLM-RoBERTa model)"),S6o=l(),G_=a("li"),ife=a("strong"),R6o=o("xlm-roberta-xl"),P6o=o(" \u2014 "),JD=a("a"),B6o=o("XLMRobertaXLModel"),I6o=o(" (XLM-RoBERTa-XL model)"),N6o=l(),O_=a("li"),dfe=a("strong"),q6o=o("xlnet"),j6o=o(" \u2014 "),YD=a("a"),D6o=o("XLNetModel"),G6o=o(" (XLNet model)"),O6o=l(),V_=a("li"),cfe=a("strong"),V6o=o("yolos"),X6o=o(" \u2014 "),KD=a("a"),z6o=o("YolosModel"),Q6o=o(" (YOLOS model)"),W6o=l(),X_=a("li"),mfe=a("strong"),H6o=o("yoso"),U6o=o(" \u2014 "),ZD=a("a"),J6o=o("YosoModel"),Y6o=o(" (YOSO model)"),K6o=l(),z_=a("p"),Z6o=o("The model is set in evaluation mode by default using "),ffe=a("code"),e7o=o("model.eval()"),o7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gfe=a("code"),r7o=o("model.train()"),t7o=l(),F(Q_.$$.fragment),fXe=l(),Xi=a("h2"),W_=a("a"),hfe=a("span"),F(By.$$.fragment),a7o=l(),ufe=a("span"),n7o=o("AutoModelForPreTraining"),gXe=l(),ko=a("div"),F(Iy.$$.fragment),s7o=l(),zi=a("p"),l7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),eG=a("a"),i7o=o("from_pretrained()"),d7o=o(" class method or the "),oG=a("a"),c7o=o("from_config()"),m7o=o(` class
method.`),f7o=l(),Ny=a("p"),g7o=o("This class cannot be instantiated directly using "),pfe=a("code"),h7o=o("__init__()"),u7o=o(" (throws an error)."),p7o=l(),dt=a("div"),F(qy.$$.fragment),_7o=l(),_fe=a("p"),b7o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),v7o=l(),Qi=a("p"),F7o=o(`Note:
Loading a model from its configuration file does `),bfe=a("strong"),T7o=o("not"),M7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rG=a("a"),E7o=o("from_pretrained()"),C7o=o(" to load the model weights."),w7o=l(),F(H_.$$.fragment),A7o=l(),Ke=a("div"),F(jy.$$.fragment),L7o=l(),vfe=a("p"),y7o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),x7o=l(),Na=a("p"),$7o=o("The model class to instantiate is selected based on the "),Ffe=a("code"),k7o=o("model_type"),S7o=o(` property of the config object (either
passed as an argument or loaded from `),Tfe=a("code"),R7o=o("pretrained_model_name_or_path"),P7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mfe=a("code"),B7o=o("pretrained_model_name_or_path"),I7o=o(":"),N7o=l(),G=a("ul"),U_=a("li"),Efe=a("strong"),q7o=o("albert"),j7o=o(" \u2014 "),tG=a("a"),D7o=o("AlbertForPreTraining"),G7o=o(" (ALBERT model)"),O7o=l(),J_=a("li"),Cfe=a("strong"),V7o=o("bart"),X7o=o(" \u2014 "),aG=a("a"),z7o=o("BartForConditionalGeneration"),Q7o=o(" (BART model)"),W7o=l(),Y_=a("li"),wfe=a("strong"),H7o=o("bert"),U7o=o(" \u2014 "),nG=a("a"),J7o=o("BertForPreTraining"),Y7o=o(" (BERT model)"),K7o=l(),K_=a("li"),Afe=a("strong"),Z7o=o("big_bird"),eLo=o(" \u2014 "),sG=a("a"),oLo=o("BigBirdForPreTraining"),rLo=o(" (BigBird model)"),tLo=l(),Z_=a("li"),Lfe=a("strong"),aLo=o("bloom"),nLo=o(" \u2014 "),lG=a("a"),sLo=o("BloomForCausalLM"),lLo=o(" (BLOOM model)"),iLo=l(),e2=a("li"),yfe=a("strong"),dLo=o("camembert"),cLo=o(" \u2014 "),iG=a("a"),mLo=o("CamembertForMaskedLM"),fLo=o(" (CamemBERT model)"),gLo=l(),o2=a("li"),xfe=a("strong"),hLo=o("ctrl"),uLo=o(" \u2014 "),dG=a("a"),pLo=o("CTRLLMHeadModel"),_Lo=o(" (CTRL model)"),bLo=l(),r2=a("li"),$fe=a("strong"),vLo=o("data2vec-text"),FLo=o(" \u2014 "),cG=a("a"),TLo=o("Data2VecTextForMaskedLM"),MLo=o(" (Data2VecText model)"),ELo=l(),t2=a("li"),kfe=a("strong"),CLo=o("deberta"),wLo=o(" \u2014 "),mG=a("a"),ALo=o("DebertaForMaskedLM"),LLo=o(" (DeBERTa model)"),yLo=l(),a2=a("li"),Sfe=a("strong"),xLo=o("deberta-v2"),$Lo=o(" \u2014 "),fG=a("a"),kLo=o("DebertaV2ForMaskedLM"),SLo=o(" (DeBERTa-v2 model)"),RLo=l(),n2=a("li"),Rfe=a("strong"),PLo=o("distilbert"),BLo=o(" \u2014 "),gG=a("a"),ILo=o("DistilBertForMaskedLM"),NLo=o(" (DistilBERT model)"),qLo=l(),s2=a("li"),Pfe=a("strong"),jLo=o("electra"),DLo=o(" \u2014 "),hG=a("a"),GLo=o("ElectraForPreTraining"),OLo=o(" (ELECTRA model)"),VLo=l(),l2=a("li"),Bfe=a("strong"),XLo=o("flaubert"),zLo=o(" \u2014 "),uG=a("a"),QLo=o("FlaubertWithLMHeadModel"),WLo=o(" (FlauBERT model)"),HLo=l(),i2=a("li"),Ife=a("strong"),ULo=o("flava"),JLo=o(" \u2014 "),pG=a("a"),YLo=o("FlavaForPreTraining"),KLo=o(" (FLAVA model)"),ZLo=l(),d2=a("li"),Nfe=a("strong"),eyo=o("fnet"),oyo=o(" \u2014 "),_G=a("a"),ryo=o("FNetForPreTraining"),tyo=o(" (FNet model)"),ayo=l(),c2=a("li"),qfe=a("strong"),nyo=o("fsmt"),syo=o(" \u2014 "),bG=a("a"),lyo=o("FSMTForConditionalGeneration"),iyo=o(" (FairSeq Machine-Translation model)"),dyo=l(),m2=a("li"),jfe=a("strong"),cyo=o("funnel"),myo=o(" \u2014 "),vG=a("a"),fyo=o("FunnelForPreTraining"),gyo=o(" (Funnel Transformer model)"),hyo=l(),f2=a("li"),Dfe=a("strong"),uyo=o("gpt2"),pyo=o(" \u2014 "),FG=a("a"),_yo=o("GPT2LMHeadModel"),byo=o(" (OpenAI GPT-2 model)"),vyo=l(),g2=a("li"),Gfe=a("strong"),Fyo=o("ibert"),Tyo=o(" \u2014 "),TG=a("a"),Myo=o("IBertForMaskedLM"),Eyo=o(" (I-BERT model)"),Cyo=l(),h2=a("li"),Ofe=a("strong"),wyo=o("layoutlm"),Ayo=o(" \u2014 "),MG=a("a"),Lyo=o("LayoutLMForMaskedLM"),yyo=o(" (LayoutLM model)"),xyo=l(),u2=a("li"),Vfe=a("strong"),$yo=o("longformer"),kyo=o(" \u2014 "),EG=a("a"),Syo=o("LongformerForMaskedLM"),Ryo=o(" (Longformer model)"),Pyo=l(),p2=a("li"),Xfe=a("strong"),Byo=o("lxmert"),Iyo=o(" \u2014 "),CG=a("a"),Nyo=o("LxmertForPreTraining"),qyo=o(" (LXMERT model)"),jyo=l(),_2=a("li"),zfe=a("strong"),Dyo=o("megatron-bert"),Gyo=o(" \u2014 "),wG=a("a"),Oyo=o("MegatronBertForPreTraining"),Vyo=o(" (Megatron-BERT model)"),Xyo=l(),b2=a("li"),Qfe=a("strong"),zyo=o("mobilebert"),Qyo=o(" \u2014 "),AG=a("a"),Wyo=o("MobileBertForPreTraining"),Hyo=o(" (MobileBERT model)"),Uyo=l(),v2=a("li"),Wfe=a("strong"),Jyo=o("mpnet"),Yyo=o(" \u2014 "),LG=a("a"),Kyo=o("MPNetForMaskedLM"),Zyo=o(" (MPNet model)"),e8o=l(),F2=a("li"),Hfe=a("strong"),o8o=o("mvp"),r8o=o(" \u2014 "),yG=a("a"),t8o=o("MvpForConditionalGeneration"),a8o=o(" (MVP model)"),n8o=l(),T2=a("li"),Ufe=a("strong"),s8o=o("nezha"),l8o=o(" \u2014 "),xG=a("a"),i8o=o("NezhaForPreTraining"),d8o=o(" (Nezha model)"),c8o=l(),M2=a("li"),Jfe=a("strong"),m8o=o("openai-gpt"),f8o=o(" \u2014 "),$G=a("a"),g8o=o("OpenAIGPTLMHeadModel"),h8o=o(" (OpenAI GPT model)"),u8o=l(),E2=a("li"),Yfe=a("strong"),p8o=o("retribert"),_8o=o(" \u2014 "),kG=a("a"),b8o=o("RetriBertModel"),v8o=o(" (RetriBERT model)"),F8o=l(),C2=a("li"),Kfe=a("strong"),T8o=o("roberta"),M8o=o(" \u2014 "),SG=a("a"),E8o=o("RobertaForMaskedLM"),C8o=o(" (RoBERTa model)"),w8o=l(),w2=a("li"),Zfe=a("strong"),A8o=o("splinter"),L8o=o(" \u2014 "),RG=a("a"),y8o=o("SplinterForPreTraining"),x8o=o(" (Splinter model)"),$8o=l(),A2=a("li"),ege=a("strong"),k8o=o("squeezebert"),S8o=o(" \u2014 "),PG=a("a"),R8o=o("SqueezeBertForMaskedLM"),P8o=o(" (SqueezeBERT model)"),B8o=l(),L2=a("li"),oge=a("strong"),I8o=o("t5"),N8o=o(" \u2014 "),BG=a("a"),q8o=o("T5ForConditionalGeneration"),j8o=o(" (T5 model)"),D8o=l(),y2=a("li"),rge=a("strong"),G8o=o("tapas"),O8o=o(" \u2014 "),IG=a("a"),V8o=o("TapasForMaskedLM"),X8o=o(" (TAPAS model)"),z8o=l(),x2=a("li"),tge=a("strong"),Q8o=o("transfo-xl"),W8o=o(" \u2014 "),NG=a("a"),H8o=o("TransfoXLLMHeadModel"),U8o=o(" (Transformer-XL model)"),J8o=l(),$2=a("li"),age=a("strong"),Y8o=o("unispeech"),K8o=o(" \u2014 "),qG=a("a"),Z8o=o("UniSpeechForPreTraining"),e9o=o(" (UniSpeech model)"),o9o=l(),k2=a("li"),nge=a("strong"),r9o=o("unispeech-sat"),t9o=o(" \u2014 "),jG=a("a"),a9o=o("UniSpeechSatForPreTraining"),n9o=o(" (UniSpeechSat model)"),s9o=l(),S2=a("li"),sge=a("strong"),l9o=o("visual_bert"),i9o=o(" \u2014 "),DG=a("a"),d9o=o("VisualBertForPreTraining"),c9o=o(" (VisualBERT model)"),m9o=l(),R2=a("li"),lge=a("strong"),f9o=o("vit_mae"),g9o=o(" \u2014 "),GG=a("a"),h9o=o("ViTMAEForPreTraining"),u9o=o(" (ViTMAE model)"),p9o=l(),P2=a("li"),ige=a("strong"),_9o=o("wav2vec2"),b9o=o(" \u2014 "),OG=a("a"),v9o=o("Wav2Vec2ForPreTraining"),F9o=o(" (Wav2Vec2 model)"),T9o=l(),B2=a("li"),dge=a("strong"),M9o=o("wav2vec2-conformer"),E9o=o(" \u2014 "),VG=a("a"),C9o=o("Wav2Vec2ConformerForPreTraining"),w9o=o(" (Wav2Vec2-Conformer model)"),A9o=l(),I2=a("li"),cge=a("strong"),L9o=o("xlm"),y9o=o(" \u2014 "),XG=a("a"),x9o=o("XLMWithLMHeadModel"),$9o=o(" (XLM model)"),k9o=l(),N2=a("li"),mge=a("strong"),S9o=o("xlm-roberta"),R9o=o(" \u2014 "),zG=a("a"),P9o=o("XLMRobertaForMaskedLM"),B9o=o(" (XLM-RoBERTa model)"),I9o=l(),q2=a("li"),fge=a("strong"),N9o=o("xlm-roberta-xl"),q9o=o(" \u2014 "),QG=a("a"),j9o=o("XLMRobertaXLForMaskedLM"),D9o=o(" (XLM-RoBERTa-XL model)"),G9o=l(),j2=a("li"),gge=a("strong"),O9o=o("xlnet"),V9o=o(" \u2014 "),WG=a("a"),X9o=o("XLNetLMHeadModel"),z9o=o(" (XLNet model)"),Q9o=l(),D2=a("p"),W9o=o("The model is set in evaluation mode by default using "),hge=a("code"),H9o=o("model.eval()"),U9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uge=a("code"),J9o=o("model.train()"),Y9o=l(),F(G2.$$.fragment),hXe=l(),Wi=a("h2"),O2=a("a"),pge=a("span"),F(Dy.$$.fragment),K9o=l(),_ge=a("span"),Z9o=o("AutoModelForCausalLM"),uXe=l(),So=a("div"),F(Gy.$$.fragment),exo=l(),Hi=a("p"),oxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),HG=a("a"),rxo=o("from_pretrained()"),txo=o(" class method or the "),UG=a("a"),axo=o("from_config()"),nxo=o(` class
method.`),sxo=l(),Oy=a("p"),lxo=o("This class cannot be instantiated directly using "),bge=a("code"),ixo=o("__init__()"),dxo=o(" (throws an error)."),cxo=l(),ct=a("div"),F(Vy.$$.fragment),mxo=l(),vge=a("p"),fxo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),gxo=l(),Ui=a("p"),hxo=o(`Note:
Loading a model from its configuration file does `),Fge=a("strong"),uxo=o("not"),pxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=a("a"),_xo=o("from_pretrained()"),bxo=o(" to load the model weights."),vxo=l(),F(V2.$$.fragment),Fxo=l(),Ze=a("div"),F(Xy.$$.fragment),Txo=l(),Tge=a("p"),Mxo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Exo=l(),qa=a("p"),Cxo=o("The model class to instantiate is selected based on the "),Mge=a("code"),wxo=o("model_type"),Axo=o(` property of the config object (either
passed as an argument or loaded from `),Ege=a("code"),Lxo=o("pretrained_model_name_or_path"),yxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cge=a("code"),xxo=o("pretrained_model_name_or_path"),$xo=o(":"),kxo=l(),z=a("ul"),X2=a("li"),wge=a("strong"),Sxo=o("bart"),Rxo=o(" \u2014 "),YG=a("a"),Pxo=o("BartForCausalLM"),Bxo=o(" (BART model)"),Ixo=l(),z2=a("li"),Age=a("strong"),Nxo=o("bert"),qxo=o(" \u2014 "),KG=a("a"),jxo=o("BertLMHeadModel"),Dxo=o(" (BERT model)"),Gxo=l(),Q2=a("li"),Lge=a("strong"),Oxo=o("bert-generation"),Vxo=o(" \u2014 "),ZG=a("a"),Xxo=o("BertGenerationDecoder"),zxo=o(" (Bert Generation model)"),Qxo=l(),W2=a("li"),yge=a("strong"),Wxo=o("big_bird"),Hxo=o(" \u2014 "),eO=a("a"),Uxo=o("BigBirdForCausalLM"),Jxo=o(" (BigBird model)"),Yxo=l(),H2=a("li"),xge=a("strong"),Kxo=o("bigbird_pegasus"),Zxo=o(" \u2014 "),oO=a("a"),e$o=o("BigBirdPegasusForCausalLM"),o$o=o(" (BigBird-Pegasus model)"),r$o=l(),U2=a("li"),$ge=a("strong"),t$o=o("blenderbot"),a$o=o(" \u2014 "),rO=a("a"),n$o=o("BlenderbotForCausalLM"),s$o=o(" (Blenderbot model)"),l$o=l(),J2=a("li"),kge=a("strong"),i$o=o("blenderbot-small"),d$o=o(" \u2014 "),tO=a("a"),c$o=o("BlenderbotSmallForCausalLM"),m$o=o(" (BlenderbotSmall model)"),f$o=l(),Y2=a("li"),Sge=a("strong"),g$o=o("bloom"),h$o=o(" \u2014 "),aO=a("a"),u$o=o("BloomForCausalLM"),p$o=o(" (BLOOM model)"),_$o=l(),K2=a("li"),Rge=a("strong"),b$o=o("camembert"),v$o=o(" \u2014 "),nO=a("a"),F$o=o("CamembertForCausalLM"),T$o=o(" (CamemBERT model)"),M$o=l(),Z2=a("li"),Pge=a("strong"),E$o=o("codegen"),C$o=o(" \u2014 "),sO=a("a"),w$o=o("CodeGenForCausalLM"),A$o=o(" (CodeGen model)"),L$o=l(),eb=a("li"),Bge=a("strong"),y$o=o("ctrl"),x$o=o(" \u2014 "),lO=a("a"),$$o=o("CTRLLMHeadModel"),k$o=o(" (CTRL model)"),S$o=l(),ob=a("li"),Ige=a("strong"),R$o=o("data2vec-text"),P$o=o(" \u2014 "),iO=a("a"),B$o=o("Data2VecTextForCausalLM"),I$o=o(" (Data2VecText model)"),N$o=l(),rb=a("li"),Nge=a("strong"),q$o=o("electra"),j$o=o(" \u2014 "),dO=a("a"),D$o=o("ElectraForCausalLM"),G$o=o(" (ELECTRA model)"),O$o=l(),tb=a("li"),qge=a("strong"),V$o=o("gpt2"),X$o=o(" \u2014 "),cO=a("a"),z$o=o("GPT2LMHeadModel"),Q$o=o(" (OpenAI GPT-2 model)"),W$o=l(),ab=a("li"),jge=a("strong"),H$o=o("gpt_neo"),U$o=o(" \u2014 "),mO=a("a"),J$o=o("GPTNeoForCausalLM"),Y$o=o(" (GPT Neo model)"),K$o=l(),nb=a("li"),Dge=a("strong"),Z$o=o("gpt_neox"),eko=o(" \u2014 "),fO=a("a"),oko=o("GPTNeoXForCausalLM"),rko=o(" (GPT NeoX model)"),tko=l(),sb=a("li"),Gge=a("strong"),ako=o("gptj"),nko=o(" \u2014 "),gO=a("a"),sko=o("GPTJForCausalLM"),lko=o(" (GPT-J model)"),iko=l(),lb=a("li"),Oge=a("strong"),dko=o("marian"),cko=o(" \u2014 "),hO=a("a"),mko=o("MarianForCausalLM"),fko=o(" (Marian model)"),gko=l(),ib=a("li"),Vge=a("strong"),hko=o("mbart"),uko=o(" \u2014 "),uO=a("a"),pko=o("MBartForCausalLM"),_ko=o(" (mBART model)"),bko=l(),db=a("li"),Xge=a("strong"),vko=o("megatron-bert"),Fko=o(" \u2014 "),pO=a("a"),Tko=o("MegatronBertForCausalLM"),Mko=o(" (Megatron-BERT model)"),Eko=l(),cb=a("li"),zge=a("strong"),Cko=o("mvp"),wko=o(" \u2014 "),_O=a("a"),Ako=o("MvpForCausalLM"),Lko=o(" (MVP model)"),yko=l(),mb=a("li"),Qge=a("strong"),xko=o("openai-gpt"),$ko=o(" \u2014 "),bO=a("a"),kko=o("OpenAIGPTLMHeadModel"),Sko=o(" (OpenAI GPT model)"),Rko=l(),fb=a("li"),Wge=a("strong"),Pko=o("opt"),Bko=o(" \u2014 "),vO=a("a"),Iko=o("OPTForCausalLM"),Nko=o(" (OPT model)"),qko=l(),gb=a("li"),Hge=a("strong"),jko=o("pegasus"),Dko=o(" \u2014 "),FO=a("a"),Gko=o("PegasusForCausalLM"),Oko=o(" (Pegasus model)"),Vko=l(),hb=a("li"),Uge=a("strong"),Xko=o("plbart"),zko=o(" \u2014 "),TO=a("a"),Qko=o("PLBartForCausalLM"),Wko=o(" (PLBart model)"),Hko=l(),ub=a("li"),Jge=a("strong"),Uko=o("prophetnet"),Jko=o(" \u2014 "),MO=a("a"),Yko=o("ProphetNetForCausalLM"),Kko=o(" (ProphetNet model)"),Zko=l(),pb=a("li"),Yge=a("strong"),eSo=o("qdqbert"),oSo=o(" \u2014 "),EO=a("a"),rSo=o("QDQBertLMHeadModel"),tSo=o(" (QDQBert model)"),aSo=l(),_b=a("li"),Kge=a("strong"),nSo=o("reformer"),sSo=o(" \u2014 "),CO=a("a"),lSo=o("ReformerModelWithLMHead"),iSo=o(" (Reformer model)"),dSo=l(),bb=a("li"),Zge=a("strong"),cSo=o("rembert"),mSo=o(" \u2014 "),wO=a("a"),fSo=o("RemBertForCausalLM"),gSo=o(" (RemBERT model)"),hSo=l(),vb=a("li"),ehe=a("strong"),uSo=o("roberta"),pSo=o(" \u2014 "),AO=a("a"),_So=o("RobertaForCausalLM"),bSo=o(" (RoBERTa model)"),vSo=l(),Fb=a("li"),ohe=a("strong"),FSo=o("roformer"),TSo=o(" \u2014 "),LO=a("a"),MSo=o("RoFormerForCausalLM"),ESo=o(" (RoFormer model)"),CSo=l(),Tb=a("li"),rhe=a("strong"),wSo=o("speech_to_text_2"),ASo=o(" \u2014 "),yO=a("a"),LSo=o("Speech2Text2ForCausalLM"),ySo=o(" (Speech2Text2 model)"),xSo=l(),Mb=a("li"),the=a("strong"),$So=o("transfo-xl"),kSo=o(" \u2014 "),xO=a("a"),SSo=o("TransfoXLLMHeadModel"),RSo=o(" (Transformer-XL model)"),PSo=l(),Eb=a("li"),ahe=a("strong"),BSo=o("trocr"),ISo=o(" \u2014 "),$O=a("a"),NSo=o("TrOCRForCausalLM"),qSo=o(" (TrOCR model)"),jSo=l(),Cb=a("li"),nhe=a("strong"),DSo=o("xglm"),GSo=o(" \u2014 "),kO=a("a"),OSo=o("XGLMForCausalLM"),VSo=o(" (XGLM model)"),XSo=l(),wb=a("li"),she=a("strong"),zSo=o("xlm"),QSo=o(" \u2014 "),SO=a("a"),WSo=o("XLMWithLMHeadModel"),HSo=o(" (XLM model)"),USo=l(),Ab=a("li"),lhe=a("strong"),JSo=o("xlm-prophetnet"),YSo=o(" \u2014 "),RO=a("a"),KSo=o("XLMProphetNetForCausalLM"),ZSo=o(" (XLM-ProphetNet model)"),eRo=l(),Lb=a("li"),ihe=a("strong"),oRo=o("xlm-roberta"),rRo=o(" \u2014 "),PO=a("a"),tRo=o("XLMRobertaForCausalLM"),aRo=o(" (XLM-RoBERTa model)"),nRo=l(),yb=a("li"),dhe=a("strong"),sRo=o("xlm-roberta-xl"),lRo=o(" \u2014 "),BO=a("a"),iRo=o("XLMRobertaXLForCausalLM"),dRo=o(" (XLM-RoBERTa-XL model)"),cRo=l(),xb=a("li"),che=a("strong"),mRo=o("xlnet"),fRo=o(" \u2014 "),IO=a("a"),gRo=o("XLNetLMHeadModel"),hRo=o(" (XLNet model)"),uRo=l(),$b=a("p"),pRo=o("The model is set in evaluation mode by default using "),mhe=a("code"),_Ro=o("model.eval()"),bRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fhe=a("code"),vRo=o("model.train()"),FRo=l(),F(kb.$$.fragment),pXe=l(),Ji=a("h2"),Sb=a("a"),ghe=a("span"),F(zy.$$.fragment),TRo=l(),hhe=a("span"),MRo=o("AutoModelForMaskedLM"),_Xe=l(),Ro=a("div"),F(Qy.$$.fragment),ERo=l(),Yi=a("p"),CRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),NO=a("a"),wRo=o("from_pretrained()"),ARo=o(" class method or the "),qO=a("a"),LRo=o("from_config()"),yRo=o(` class
method.`),xRo=l(),Wy=a("p"),$Ro=o("This class cannot be instantiated directly using "),uhe=a("code"),kRo=o("__init__()"),SRo=o(" (throws an error)."),RRo=l(),mt=a("div"),F(Hy.$$.fragment),PRo=l(),phe=a("p"),BRo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),IRo=l(),Ki=a("p"),NRo=o(`Note:
Loading a model from its configuration file does `),_he=a("strong"),qRo=o("not"),jRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jO=a("a"),DRo=o("from_pretrained()"),GRo=o(" to load the model weights."),ORo=l(),F(Rb.$$.fragment),VRo=l(),eo=a("div"),F(Uy.$$.fragment),XRo=l(),bhe=a("p"),zRo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),QRo=l(),ja=a("p"),WRo=o("The model class to instantiate is selected based on the "),vhe=a("code"),HRo=o("model_type"),URo=o(` property of the config object (either
passed as an argument or loaded from `),Fhe=a("code"),JRo=o("pretrained_model_name_or_path"),YRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),The=a("code"),KRo=o("pretrained_model_name_or_path"),ZRo=o(":"),ePo=l(),W=a("ul"),Pb=a("li"),Mhe=a("strong"),oPo=o("albert"),rPo=o(" \u2014 "),DO=a("a"),tPo=o("AlbertForMaskedLM"),aPo=o(" (ALBERT model)"),nPo=l(),Bb=a("li"),Ehe=a("strong"),sPo=o("bart"),lPo=o(" \u2014 "),GO=a("a"),iPo=o("BartForConditionalGeneration"),dPo=o(" (BART model)"),cPo=l(),Ib=a("li"),Che=a("strong"),mPo=o("bert"),fPo=o(" \u2014 "),OO=a("a"),gPo=o("BertForMaskedLM"),hPo=o(" (BERT model)"),uPo=l(),Nb=a("li"),whe=a("strong"),pPo=o("big_bird"),_Po=o(" \u2014 "),VO=a("a"),bPo=o("BigBirdForMaskedLM"),vPo=o(" (BigBird model)"),FPo=l(),qb=a("li"),Ahe=a("strong"),TPo=o("camembert"),MPo=o(" \u2014 "),XO=a("a"),EPo=o("CamembertForMaskedLM"),CPo=o(" (CamemBERT model)"),wPo=l(),jb=a("li"),Lhe=a("strong"),APo=o("convbert"),LPo=o(" \u2014 "),zO=a("a"),yPo=o("ConvBertForMaskedLM"),xPo=o(" (ConvBERT model)"),$Po=l(),Db=a("li"),yhe=a("strong"),kPo=o("data2vec-text"),SPo=o(" \u2014 "),QO=a("a"),RPo=o("Data2VecTextForMaskedLM"),PPo=o(" (Data2VecText model)"),BPo=l(),Gb=a("li"),xhe=a("strong"),IPo=o("deberta"),NPo=o(" \u2014 "),WO=a("a"),qPo=o("DebertaForMaskedLM"),jPo=o(" (DeBERTa model)"),DPo=l(),Ob=a("li"),$he=a("strong"),GPo=o("deberta-v2"),OPo=o(" \u2014 "),HO=a("a"),VPo=o("DebertaV2ForMaskedLM"),XPo=o(" (DeBERTa-v2 model)"),zPo=l(),Vb=a("li"),khe=a("strong"),QPo=o("distilbert"),WPo=o(" \u2014 "),UO=a("a"),HPo=o("DistilBertForMaskedLM"),UPo=o(" (DistilBERT model)"),JPo=l(),Xb=a("li"),She=a("strong"),YPo=o("electra"),KPo=o(" \u2014 "),JO=a("a"),ZPo=o("ElectraForMaskedLM"),eBo=o(" (ELECTRA model)"),oBo=l(),zb=a("li"),Rhe=a("strong"),rBo=o("flaubert"),tBo=o(" \u2014 "),YO=a("a"),aBo=o("FlaubertWithLMHeadModel"),nBo=o(" (FlauBERT model)"),sBo=l(),Qb=a("li"),Phe=a("strong"),lBo=o("fnet"),iBo=o(" \u2014 "),KO=a("a"),dBo=o("FNetForMaskedLM"),cBo=o(" (FNet model)"),mBo=l(),Wb=a("li"),Bhe=a("strong"),fBo=o("funnel"),gBo=o(" \u2014 "),ZO=a("a"),hBo=o("FunnelForMaskedLM"),uBo=o(" (Funnel Transformer model)"),pBo=l(),Hb=a("li"),Ihe=a("strong"),_Bo=o("ibert"),bBo=o(" \u2014 "),eV=a("a"),vBo=o("IBertForMaskedLM"),FBo=o(" (I-BERT model)"),TBo=l(),Ub=a("li"),Nhe=a("strong"),MBo=o("layoutlm"),EBo=o(" \u2014 "),oV=a("a"),CBo=o("LayoutLMForMaskedLM"),wBo=o(" (LayoutLM model)"),ABo=l(),Jb=a("li"),qhe=a("strong"),LBo=o("longformer"),yBo=o(" \u2014 "),rV=a("a"),xBo=o("LongformerForMaskedLM"),$Bo=o(" (Longformer model)"),kBo=l(),Yb=a("li"),jhe=a("strong"),SBo=o("luke"),RBo=o(" \u2014 "),tV=a("a"),PBo=o("LukeForMaskedLM"),BBo=o(" (LUKE model)"),IBo=l(),Kb=a("li"),Dhe=a("strong"),NBo=o("mbart"),qBo=o(" \u2014 "),aV=a("a"),jBo=o("MBartForConditionalGeneration"),DBo=o(" (mBART model)"),GBo=l(),Zb=a("li"),Ghe=a("strong"),OBo=o("megatron-bert"),VBo=o(" \u2014 "),nV=a("a"),XBo=o("MegatronBertForMaskedLM"),zBo=o(" (Megatron-BERT model)"),QBo=l(),ev=a("li"),Ohe=a("strong"),WBo=o("mobilebert"),HBo=o(" \u2014 "),sV=a("a"),UBo=o("MobileBertForMaskedLM"),JBo=o(" (MobileBERT model)"),YBo=l(),ov=a("li"),Vhe=a("strong"),KBo=o("mpnet"),ZBo=o(" \u2014 "),lV=a("a"),eIo=o("MPNetForMaskedLM"),oIo=o(" (MPNet model)"),rIo=l(),rv=a("li"),Xhe=a("strong"),tIo=o("mvp"),aIo=o(" \u2014 "),iV=a("a"),nIo=o("MvpForConditionalGeneration"),sIo=o(" (MVP model)"),lIo=l(),tv=a("li"),zhe=a("strong"),iIo=o("nezha"),dIo=o(" \u2014 "),dV=a("a"),cIo=o("NezhaForMaskedLM"),mIo=o(" (Nezha model)"),fIo=l(),av=a("li"),Qhe=a("strong"),gIo=o("nystromformer"),hIo=o(" \u2014 "),cV=a("a"),uIo=o("NystromformerForMaskedLM"),pIo=o(" (Nystr\xF6mformer model)"),_Io=l(),nv=a("li"),Whe=a("strong"),bIo=o("perceiver"),vIo=o(" \u2014 "),mV=a("a"),FIo=o("PerceiverForMaskedLM"),TIo=o(" (Perceiver model)"),MIo=l(),sv=a("li"),Hhe=a("strong"),EIo=o("qdqbert"),CIo=o(" \u2014 "),fV=a("a"),wIo=o("QDQBertForMaskedLM"),AIo=o(" (QDQBert model)"),LIo=l(),lv=a("li"),Uhe=a("strong"),yIo=o("reformer"),xIo=o(" \u2014 "),gV=a("a"),$Io=o("ReformerForMaskedLM"),kIo=o(" (Reformer model)"),SIo=l(),iv=a("li"),Jhe=a("strong"),RIo=o("rembert"),PIo=o(" \u2014 "),hV=a("a"),BIo=o("RemBertForMaskedLM"),IIo=o(" (RemBERT model)"),NIo=l(),dv=a("li"),Yhe=a("strong"),qIo=o("roberta"),jIo=o(" \u2014 "),uV=a("a"),DIo=o("RobertaForMaskedLM"),GIo=o(" (RoBERTa model)"),OIo=l(),cv=a("li"),Khe=a("strong"),VIo=o("roformer"),XIo=o(" \u2014 "),pV=a("a"),zIo=o("RoFormerForMaskedLM"),QIo=o(" (RoFormer model)"),WIo=l(),mv=a("li"),Zhe=a("strong"),HIo=o("squeezebert"),UIo=o(" \u2014 "),_V=a("a"),JIo=o("SqueezeBertForMaskedLM"),YIo=o(" (SqueezeBERT model)"),KIo=l(),fv=a("li"),eue=a("strong"),ZIo=o("tapas"),eNo=o(" \u2014 "),bV=a("a"),oNo=o("TapasForMaskedLM"),rNo=o(" (TAPAS model)"),tNo=l(),gv=a("li"),oue=a("strong"),aNo=o("wav2vec2"),nNo=o(" \u2014 "),rue=a("code"),sNo=o("Wav2Vec2ForMaskedLM"),lNo=o(" (Wav2Vec2 model)"),iNo=l(),hv=a("li"),tue=a("strong"),dNo=o("xlm"),cNo=o(" \u2014 "),vV=a("a"),mNo=o("XLMWithLMHeadModel"),fNo=o(" (XLM model)"),gNo=l(),uv=a("li"),aue=a("strong"),hNo=o("xlm-roberta"),uNo=o(" \u2014 "),FV=a("a"),pNo=o("XLMRobertaForMaskedLM"),_No=o(" (XLM-RoBERTa model)"),bNo=l(),pv=a("li"),nue=a("strong"),vNo=o("xlm-roberta-xl"),FNo=o(" \u2014 "),TV=a("a"),TNo=o("XLMRobertaXLForMaskedLM"),MNo=o(" (XLM-RoBERTa-XL model)"),ENo=l(),_v=a("li"),sue=a("strong"),CNo=o("yoso"),wNo=o(" \u2014 "),MV=a("a"),ANo=o("YosoForMaskedLM"),LNo=o(" (YOSO model)"),yNo=l(),bv=a("p"),xNo=o("The model is set in evaluation mode by default using "),lue=a("code"),$No=o("model.eval()"),kNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iue=a("code"),SNo=o("model.train()"),RNo=l(),F(vv.$$.fragment),bXe=l(),Zi=a("h2"),Fv=a("a"),due=a("span"),F(Jy.$$.fragment),PNo=l(),cue=a("span"),BNo=o("AutoModelForSeq2SeqLM"),vXe=l(),Po=a("div"),F(Yy.$$.fragment),INo=l(),ed=a("p"),NNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EV=a("a"),qNo=o("from_pretrained()"),jNo=o(" class method or the "),CV=a("a"),DNo=o("from_config()"),GNo=o(` class
method.`),ONo=l(),Ky=a("p"),VNo=o("This class cannot be instantiated directly using "),mue=a("code"),XNo=o("__init__()"),zNo=o(" (throws an error)."),QNo=l(),ft=a("div"),F(Zy.$$.fragment),WNo=l(),fue=a("p"),HNo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),UNo=l(),od=a("p"),JNo=o(`Note:
Loading a model from its configuration file does `),gue=a("strong"),YNo=o("not"),KNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wV=a("a"),ZNo=o("from_pretrained()"),eqo=o(" to load the model weights."),oqo=l(),F(Tv.$$.fragment),rqo=l(),oo=a("div"),F(e8.$$.fragment),tqo=l(),hue=a("p"),aqo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),nqo=l(),Da=a("p"),sqo=o("The model class to instantiate is selected based on the "),uue=a("code"),lqo=o("model_type"),iqo=o(` property of the config object (either
passed as an argument or loaded from `),pue=a("code"),dqo=o("pretrained_model_name_or_path"),cqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ue=a("code"),mqo=o("pretrained_model_name_or_path"),fqo=o(":"),gqo=l(),ue=a("ul"),Mv=a("li"),bue=a("strong"),hqo=o("bart"),uqo=o(" \u2014 "),AV=a("a"),pqo=o("BartForConditionalGeneration"),_qo=o(" (BART model)"),bqo=l(),Ev=a("li"),vue=a("strong"),vqo=o("bigbird_pegasus"),Fqo=o(" \u2014 "),LV=a("a"),Tqo=o("BigBirdPegasusForConditionalGeneration"),Mqo=o(" (BigBird-Pegasus model)"),Eqo=l(),Cv=a("li"),Fue=a("strong"),Cqo=o("blenderbot"),wqo=o(" \u2014 "),yV=a("a"),Aqo=o("BlenderbotForConditionalGeneration"),Lqo=o(" (Blenderbot model)"),yqo=l(),wv=a("li"),Tue=a("strong"),xqo=o("blenderbot-small"),$qo=o(" \u2014 "),xV=a("a"),kqo=o("BlenderbotSmallForConditionalGeneration"),Sqo=o(" (BlenderbotSmall model)"),Rqo=l(),Av=a("li"),Mue=a("strong"),Pqo=o("encoder-decoder"),Bqo=o(" \u2014 "),$V=a("a"),Iqo=o("EncoderDecoderModel"),Nqo=o(" (Encoder decoder model)"),qqo=l(),Lv=a("li"),Eue=a("strong"),jqo=o("fsmt"),Dqo=o(" \u2014 "),kV=a("a"),Gqo=o("FSMTForConditionalGeneration"),Oqo=o(" (FairSeq Machine-Translation model)"),Vqo=l(),yv=a("li"),Cue=a("strong"),Xqo=o("led"),zqo=o(" \u2014 "),SV=a("a"),Qqo=o("LEDForConditionalGeneration"),Wqo=o(" (LED model)"),Hqo=l(),xv=a("li"),wue=a("strong"),Uqo=o("longt5"),Jqo=o(" \u2014 "),RV=a("a"),Yqo=o("LongT5ForConditionalGeneration"),Kqo=o(" (LongT5 model)"),Zqo=l(),$v=a("li"),Aue=a("strong"),ejo=o("m2m_100"),ojo=o(" \u2014 "),PV=a("a"),rjo=o("M2M100ForConditionalGeneration"),tjo=o(" (M2M100 model)"),ajo=l(),kv=a("li"),Lue=a("strong"),njo=o("marian"),sjo=o(" \u2014 "),BV=a("a"),ljo=o("MarianMTModel"),ijo=o(" (Marian model)"),djo=l(),Sv=a("li"),yue=a("strong"),cjo=o("mbart"),mjo=o(" \u2014 "),IV=a("a"),fjo=o("MBartForConditionalGeneration"),gjo=o(" (mBART model)"),hjo=l(),Rv=a("li"),xue=a("strong"),ujo=o("mt5"),pjo=o(" \u2014 "),NV=a("a"),_jo=o("MT5ForConditionalGeneration"),bjo=o(" (MT5 model)"),vjo=l(),Pv=a("li"),$ue=a("strong"),Fjo=o("mvp"),Tjo=o(" \u2014 "),qV=a("a"),Mjo=o("MvpForConditionalGeneration"),Ejo=o(" (MVP model)"),Cjo=l(),Bv=a("li"),kue=a("strong"),wjo=o("pegasus"),Ajo=o(" \u2014 "),jV=a("a"),Ljo=o("PegasusForConditionalGeneration"),yjo=o(" (Pegasus model)"),xjo=l(),Iv=a("li"),Sue=a("strong"),$jo=o("plbart"),kjo=o(" \u2014 "),DV=a("a"),Sjo=o("PLBartForConditionalGeneration"),Rjo=o(" (PLBart model)"),Pjo=l(),Nv=a("li"),Rue=a("strong"),Bjo=o("prophetnet"),Ijo=o(" \u2014 "),GV=a("a"),Njo=o("ProphetNetForConditionalGeneration"),qjo=o(" (ProphetNet model)"),jjo=l(),qv=a("li"),Pue=a("strong"),Djo=o("t5"),Gjo=o(" \u2014 "),OV=a("a"),Ojo=o("T5ForConditionalGeneration"),Vjo=o(" (T5 model)"),Xjo=l(),jv=a("li"),Bue=a("strong"),zjo=o("xlm-prophetnet"),Qjo=o(" \u2014 "),VV=a("a"),Wjo=o("XLMProphetNetForConditionalGeneration"),Hjo=o(" (XLM-ProphetNet model)"),Ujo=l(),Dv=a("p"),Jjo=o("The model is set in evaluation mode by default using "),Iue=a("code"),Yjo=o("model.eval()"),Kjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nue=a("code"),Zjo=o("model.train()"),eDo=l(),F(Gv.$$.fragment),FXe=l(),rd=a("h2"),Ov=a("a"),que=a("span"),F(o8.$$.fragment),oDo=l(),jue=a("span"),rDo=o("AutoModelForSequenceClassification"),TXe=l(),Bo=a("div"),F(r8.$$.fragment),tDo=l(),td=a("p"),aDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),XV=a("a"),nDo=o("from_pretrained()"),sDo=o(" class method or the "),zV=a("a"),lDo=o("from_config()"),iDo=o(` class
method.`),dDo=l(),t8=a("p"),cDo=o("This class cannot be instantiated directly using "),Due=a("code"),mDo=o("__init__()"),fDo=o(" (throws an error)."),gDo=l(),gt=a("div"),F(a8.$$.fragment),hDo=l(),Gue=a("p"),uDo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),pDo=l(),ad=a("p"),_Do=o(`Note:
Loading a model from its configuration file does `),Oue=a("strong"),bDo=o("not"),vDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QV=a("a"),FDo=o("from_pretrained()"),TDo=o(" to load the model weights."),MDo=l(),F(Vv.$$.fragment),EDo=l(),ro=a("div"),F(n8.$$.fragment),CDo=l(),Vue=a("p"),wDo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ADo=l(),Ga=a("p"),LDo=o("The model class to instantiate is selected based on the "),Xue=a("code"),yDo=o("model_type"),xDo=o(` property of the config object (either
passed as an argument or loaded from `),zue=a("code"),$Do=o("pretrained_model_name_or_path"),kDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Que=a("code"),SDo=o("pretrained_model_name_or_path"),RDo=o(":"),PDo=l(),N=a("ul"),Xv=a("li"),Wue=a("strong"),BDo=o("albert"),IDo=o(" \u2014 "),WV=a("a"),NDo=o("AlbertForSequenceClassification"),qDo=o(" (ALBERT model)"),jDo=l(),zv=a("li"),Hue=a("strong"),DDo=o("bart"),GDo=o(" \u2014 "),HV=a("a"),ODo=o("BartForSequenceClassification"),VDo=o(" (BART model)"),XDo=l(),Qv=a("li"),Uue=a("strong"),zDo=o("bert"),QDo=o(" \u2014 "),UV=a("a"),WDo=o("BertForSequenceClassification"),HDo=o(" (BERT model)"),UDo=l(),Wv=a("li"),Jue=a("strong"),JDo=o("big_bird"),YDo=o(" \u2014 "),JV=a("a"),KDo=o("BigBirdForSequenceClassification"),ZDo=o(" (BigBird model)"),eGo=l(),Hv=a("li"),Yue=a("strong"),oGo=o("bigbird_pegasus"),rGo=o(" \u2014 "),YV=a("a"),tGo=o("BigBirdPegasusForSequenceClassification"),aGo=o(" (BigBird-Pegasus model)"),nGo=l(),Uv=a("li"),Kue=a("strong"),sGo=o("bloom"),lGo=o(" \u2014 "),KV=a("a"),iGo=o("BloomForSequenceClassification"),dGo=o(" (BLOOM model)"),cGo=l(),Jv=a("li"),Zue=a("strong"),mGo=o("camembert"),fGo=o(" \u2014 "),ZV=a("a"),gGo=o("CamembertForSequenceClassification"),hGo=o(" (CamemBERT model)"),uGo=l(),Yv=a("li"),epe=a("strong"),pGo=o("canine"),_Go=o(" \u2014 "),eX=a("a"),bGo=o("CanineForSequenceClassification"),vGo=o(" (CANINE model)"),FGo=l(),Kv=a("li"),ope=a("strong"),TGo=o("convbert"),MGo=o(" \u2014 "),oX=a("a"),EGo=o("ConvBertForSequenceClassification"),CGo=o(" (ConvBERT model)"),wGo=l(),Zv=a("li"),rpe=a("strong"),AGo=o("ctrl"),LGo=o(" \u2014 "),rX=a("a"),yGo=o("CTRLForSequenceClassification"),xGo=o(" (CTRL model)"),$Go=l(),e1=a("li"),tpe=a("strong"),kGo=o("data2vec-text"),SGo=o(" \u2014 "),tX=a("a"),RGo=o("Data2VecTextForSequenceClassification"),PGo=o(" (Data2VecText model)"),BGo=l(),o1=a("li"),ape=a("strong"),IGo=o("deberta"),NGo=o(" \u2014 "),aX=a("a"),qGo=o("DebertaForSequenceClassification"),jGo=o(" (DeBERTa model)"),DGo=l(),r1=a("li"),npe=a("strong"),GGo=o("deberta-v2"),OGo=o(" \u2014 "),nX=a("a"),VGo=o("DebertaV2ForSequenceClassification"),XGo=o(" (DeBERTa-v2 model)"),zGo=l(),t1=a("li"),spe=a("strong"),QGo=o("distilbert"),WGo=o(" \u2014 "),sX=a("a"),HGo=o("DistilBertForSequenceClassification"),UGo=o(" (DistilBERT model)"),JGo=l(),a1=a("li"),lpe=a("strong"),YGo=o("electra"),KGo=o(" \u2014 "),lX=a("a"),ZGo=o("ElectraForSequenceClassification"),eOo=o(" (ELECTRA model)"),oOo=l(),n1=a("li"),ipe=a("strong"),rOo=o("flaubert"),tOo=o(" \u2014 "),iX=a("a"),aOo=o("FlaubertForSequenceClassification"),nOo=o(" (FlauBERT model)"),sOo=l(),s1=a("li"),dpe=a("strong"),lOo=o("fnet"),iOo=o(" \u2014 "),dX=a("a"),dOo=o("FNetForSequenceClassification"),cOo=o(" (FNet model)"),mOo=l(),l1=a("li"),cpe=a("strong"),fOo=o("funnel"),gOo=o(" \u2014 "),cX=a("a"),hOo=o("FunnelForSequenceClassification"),uOo=o(" (Funnel Transformer model)"),pOo=l(),i1=a("li"),mpe=a("strong"),_Oo=o("gpt2"),bOo=o(" \u2014 "),mX=a("a"),vOo=o("GPT2ForSequenceClassification"),FOo=o(" (OpenAI GPT-2 model)"),TOo=l(),d1=a("li"),fpe=a("strong"),MOo=o("gpt_neo"),EOo=o(" \u2014 "),fX=a("a"),COo=o("GPTNeoForSequenceClassification"),wOo=o(" (GPT Neo model)"),AOo=l(),c1=a("li"),gpe=a("strong"),LOo=o("gptj"),yOo=o(" \u2014 "),gX=a("a"),xOo=o("GPTJForSequenceClassification"),$Oo=o(" (GPT-J model)"),kOo=l(),m1=a("li"),hpe=a("strong"),SOo=o("ibert"),ROo=o(" \u2014 "),hX=a("a"),POo=o("IBertForSequenceClassification"),BOo=o(" (I-BERT model)"),IOo=l(),f1=a("li"),upe=a("strong"),NOo=o("layoutlm"),qOo=o(" \u2014 "),uX=a("a"),jOo=o("LayoutLMForSequenceClassification"),DOo=o(" (LayoutLM model)"),GOo=l(),g1=a("li"),ppe=a("strong"),OOo=o("layoutlmv2"),VOo=o(" \u2014 "),pX=a("a"),XOo=o("LayoutLMv2ForSequenceClassification"),zOo=o(" (LayoutLMv2 model)"),QOo=l(),h1=a("li"),_pe=a("strong"),WOo=o("layoutlmv3"),HOo=o(" \u2014 "),_X=a("a"),UOo=o("LayoutLMv3ForSequenceClassification"),JOo=o(" (LayoutLMv3 model)"),YOo=l(),u1=a("li"),bpe=a("strong"),KOo=o("led"),ZOo=o(" \u2014 "),bX=a("a"),eVo=o("LEDForSequenceClassification"),oVo=o(" (LED model)"),rVo=l(),p1=a("li"),vpe=a("strong"),tVo=o("longformer"),aVo=o(" \u2014 "),vX=a("a"),nVo=o("LongformerForSequenceClassification"),sVo=o(" (Longformer model)"),lVo=l(),_1=a("li"),Fpe=a("strong"),iVo=o("mbart"),dVo=o(" \u2014 "),FX=a("a"),cVo=o("MBartForSequenceClassification"),mVo=o(" (mBART model)"),fVo=l(),b1=a("li"),Tpe=a("strong"),gVo=o("megatron-bert"),hVo=o(" \u2014 "),TX=a("a"),uVo=o("MegatronBertForSequenceClassification"),pVo=o(" (Megatron-BERT model)"),_Vo=l(),v1=a("li"),Mpe=a("strong"),bVo=o("mobilebert"),vVo=o(" \u2014 "),MX=a("a"),FVo=o("MobileBertForSequenceClassification"),TVo=o(" (MobileBERT model)"),MVo=l(),F1=a("li"),Epe=a("strong"),EVo=o("mpnet"),CVo=o(" \u2014 "),EX=a("a"),wVo=o("MPNetForSequenceClassification"),AVo=o(" (MPNet model)"),LVo=l(),T1=a("li"),Cpe=a("strong"),yVo=o("mvp"),xVo=o(" \u2014 "),CX=a("a"),$Vo=o("MvpForSequenceClassification"),kVo=o(" (MVP model)"),SVo=l(),M1=a("li"),wpe=a("strong"),RVo=o("nezha"),PVo=o(" \u2014 "),wX=a("a"),BVo=o("NezhaForSequenceClassification"),IVo=o(" (Nezha model)"),NVo=l(),E1=a("li"),Ape=a("strong"),qVo=o("nystromformer"),jVo=o(" \u2014 "),AX=a("a"),DVo=o("NystromformerForSequenceClassification"),GVo=o(" (Nystr\xF6mformer model)"),OVo=l(),C1=a("li"),Lpe=a("strong"),VVo=o("openai-gpt"),XVo=o(" \u2014 "),LX=a("a"),zVo=o("OpenAIGPTForSequenceClassification"),QVo=o(" (OpenAI GPT model)"),WVo=l(),w1=a("li"),ype=a("strong"),HVo=o("perceiver"),UVo=o(" \u2014 "),yX=a("a"),JVo=o("PerceiverForSequenceClassification"),YVo=o(" (Perceiver model)"),KVo=l(),A1=a("li"),xpe=a("strong"),ZVo=o("plbart"),eXo=o(" \u2014 "),xX=a("a"),oXo=o("PLBartForSequenceClassification"),rXo=o(" (PLBart model)"),tXo=l(),L1=a("li"),$pe=a("strong"),aXo=o("qdqbert"),nXo=o(" \u2014 "),$X=a("a"),sXo=o("QDQBertForSequenceClassification"),lXo=o(" (QDQBert model)"),iXo=l(),y1=a("li"),kpe=a("strong"),dXo=o("reformer"),cXo=o(" \u2014 "),kX=a("a"),mXo=o("ReformerForSequenceClassification"),fXo=o(" (Reformer model)"),gXo=l(),x1=a("li"),Spe=a("strong"),hXo=o("rembert"),uXo=o(" \u2014 "),SX=a("a"),pXo=o("RemBertForSequenceClassification"),_Xo=o(" (RemBERT model)"),bXo=l(),$1=a("li"),Rpe=a("strong"),vXo=o("roberta"),FXo=o(" \u2014 "),RX=a("a"),TXo=o("RobertaForSequenceClassification"),MXo=o(" (RoBERTa model)"),EXo=l(),k1=a("li"),Ppe=a("strong"),CXo=o("roformer"),wXo=o(" \u2014 "),PX=a("a"),AXo=o("RoFormerForSequenceClassification"),LXo=o(" (RoFormer model)"),yXo=l(),S1=a("li"),Bpe=a("strong"),xXo=o("squeezebert"),$Xo=o(" \u2014 "),BX=a("a"),kXo=o("SqueezeBertForSequenceClassification"),SXo=o(" (SqueezeBERT model)"),RXo=l(),R1=a("li"),Ipe=a("strong"),PXo=o("tapas"),BXo=o(" \u2014 "),IX=a("a"),IXo=o("TapasForSequenceClassification"),NXo=o(" (TAPAS model)"),qXo=l(),P1=a("li"),Npe=a("strong"),jXo=o("transfo-xl"),DXo=o(" \u2014 "),NX=a("a"),GXo=o("TransfoXLForSequenceClassification"),OXo=o(" (Transformer-XL model)"),VXo=l(),B1=a("li"),qpe=a("strong"),XXo=o("xlm"),zXo=o(" \u2014 "),qX=a("a"),QXo=o("XLMForSequenceClassification"),WXo=o(" (XLM model)"),HXo=l(),I1=a("li"),jpe=a("strong"),UXo=o("xlm-roberta"),JXo=o(" \u2014 "),jX=a("a"),YXo=o("XLMRobertaForSequenceClassification"),KXo=o(" (XLM-RoBERTa model)"),ZXo=l(),N1=a("li"),Dpe=a("strong"),ezo=o("xlm-roberta-xl"),ozo=o(" \u2014 "),DX=a("a"),rzo=o("XLMRobertaXLForSequenceClassification"),tzo=o(" (XLM-RoBERTa-XL model)"),azo=l(),q1=a("li"),Gpe=a("strong"),nzo=o("xlnet"),szo=o(" \u2014 "),GX=a("a"),lzo=o("XLNetForSequenceClassification"),izo=o(" (XLNet model)"),dzo=l(),j1=a("li"),Ope=a("strong"),czo=o("yoso"),mzo=o(" \u2014 "),OX=a("a"),fzo=o("YosoForSequenceClassification"),gzo=o(" (YOSO model)"),hzo=l(),D1=a("p"),uzo=o("The model is set in evaluation mode by default using "),Vpe=a("code"),pzo=o("model.eval()"),_zo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xpe=a("code"),bzo=o("model.train()"),vzo=l(),F(G1.$$.fragment),MXe=l(),nd=a("h2"),O1=a("a"),zpe=a("span"),F(s8.$$.fragment),Fzo=l(),Qpe=a("span"),Tzo=o("AutoModelForMultipleChoice"),EXe=l(),Io=a("div"),F(l8.$$.fragment),Mzo=l(),sd=a("p"),Ezo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),VX=a("a"),Czo=o("from_pretrained()"),wzo=o(" class method or the "),XX=a("a"),Azo=o("from_config()"),Lzo=o(` class
method.`),yzo=l(),i8=a("p"),xzo=o("This class cannot be instantiated directly using "),Wpe=a("code"),$zo=o("__init__()"),kzo=o(" (throws an error)."),Szo=l(),ht=a("div"),F(d8.$$.fragment),Rzo=l(),Hpe=a("p"),Pzo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Bzo=l(),ld=a("p"),Izo=o(`Note:
Loading a model from its configuration file does `),Upe=a("strong"),Nzo=o("not"),qzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zX=a("a"),jzo=o("from_pretrained()"),Dzo=o(" to load the model weights."),Gzo=l(),F(V1.$$.fragment),Ozo=l(),to=a("div"),F(c8.$$.fragment),Vzo=l(),Jpe=a("p"),Xzo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zzo=l(),Oa=a("p"),Qzo=o("The model class to instantiate is selected based on the "),Ype=a("code"),Wzo=o("model_type"),Hzo=o(` property of the config object (either
passed as an argument or loaded from `),Kpe=a("code"),Uzo=o("pretrained_model_name_or_path"),Jzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zpe=a("code"),Yzo=o("pretrained_model_name_or_path"),Kzo=o(":"),Zzo=l(),Z=a("ul"),X1=a("li"),e_e=a("strong"),eQo=o("albert"),oQo=o(" \u2014 "),QX=a("a"),rQo=o("AlbertForMultipleChoice"),tQo=o(" (ALBERT model)"),aQo=l(),z1=a("li"),o_e=a("strong"),nQo=o("bert"),sQo=o(" \u2014 "),WX=a("a"),lQo=o("BertForMultipleChoice"),iQo=o(" (BERT model)"),dQo=l(),Q1=a("li"),r_e=a("strong"),cQo=o("big_bird"),mQo=o(" \u2014 "),HX=a("a"),fQo=o("BigBirdForMultipleChoice"),gQo=o(" (BigBird model)"),hQo=l(),W1=a("li"),t_e=a("strong"),uQo=o("camembert"),pQo=o(" \u2014 "),UX=a("a"),_Qo=o("CamembertForMultipleChoice"),bQo=o(" (CamemBERT model)"),vQo=l(),H1=a("li"),a_e=a("strong"),FQo=o("canine"),TQo=o(" \u2014 "),JX=a("a"),MQo=o("CanineForMultipleChoice"),EQo=o(" (CANINE model)"),CQo=l(),U1=a("li"),n_e=a("strong"),wQo=o("convbert"),AQo=o(" \u2014 "),YX=a("a"),LQo=o("ConvBertForMultipleChoice"),yQo=o(" (ConvBERT model)"),xQo=l(),J1=a("li"),s_e=a("strong"),$Qo=o("data2vec-text"),kQo=o(" \u2014 "),KX=a("a"),SQo=o("Data2VecTextForMultipleChoice"),RQo=o(" (Data2VecText model)"),PQo=l(),Y1=a("li"),l_e=a("strong"),BQo=o("deberta-v2"),IQo=o(" \u2014 "),ZX=a("a"),NQo=o("DebertaV2ForMultipleChoice"),qQo=o(" (DeBERTa-v2 model)"),jQo=l(),K1=a("li"),i_e=a("strong"),DQo=o("distilbert"),GQo=o(" \u2014 "),ez=a("a"),OQo=o("DistilBertForMultipleChoice"),VQo=o(" (DistilBERT model)"),XQo=l(),Z1=a("li"),d_e=a("strong"),zQo=o("electra"),QQo=o(" \u2014 "),oz=a("a"),WQo=o("ElectraForMultipleChoice"),HQo=o(" (ELECTRA model)"),UQo=l(),eF=a("li"),c_e=a("strong"),JQo=o("flaubert"),YQo=o(" \u2014 "),rz=a("a"),KQo=o("FlaubertForMultipleChoice"),ZQo=o(" (FlauBERT model)"),eWo=l(),oF=a("li"),m_e=a("strong"),oWo=o("fnet"),rWo=o(" \u2014 "),tz=a("a"),tWo=o("FNetForMultipleChoice"),aWo=o(" (FNet model)"),nWo=l(),rF=a("li"),f_e=a("strong"),sWo=o("funnel"),lWo=o(" \u2014 "),az=a("a"),iWo=o("FunnelForMultipleChoice"),dWo=o(" (Funnel Transformer model)"),cWo=l(),tF=a("li"),g_e=a("strong"),mWo=o("ibert"),fWo=o(" \u2014 "),nz=a("a"),gWo=o("IBertForMultipleChoice"),hWo=o(" (I-BERT model)"),uWo=l(),aF=a("li"),h_e=a("strong"),pWo=o("longformer"),_Wo=o(" \u2014 "),sz=a("a"),bWo=o("LongformerForMultipleChoice"),vWo=o(" (Longformer model)"),FWo=l(),nF=a("li"),u_e=a("strong"),TWo=o("megatron-bert"),MWo=o(" \u2014 "),lz=a("a"),EWo=o("MegatronBertForMultipleChoice"),CWo=o(" (Megatron-BERT model)"),wWo=l(),sF=a("li"),p_e=a("strong"),AWo=o("mobilebert"),LWo=o(" \u2014 "),iz=a("a"),yWo=o("MobileBertForMultipleChoice"),xWo=o(" (MobileBERT model)"),$Wo=l(),lF=a("li"),__e=a("strong"),kWo=o("mpnet"),SWo=o(" \u2014 "),dz=a("a"),RWo=o("MPNetForMultipleChoice"),PWo=o(" (MPNet model)"),BWo=l(),iF=a("li"),b_e=a("strong"),IWo=o("nezha"),NWo=o(" \u2014 "),cz=a("a"),qWo=o("NezhaForMultipleChoice"),jWo=o(" (Nezha model)"),DWo=l(),dF=a("li"),v_e=a("strong"),GWo=o("nystromformer"),OWo=o(" \u2014 "),mz=a("a"),VWo=o("NystromformerForMultipleChoice"),XWo=o(" (Nystr\xF6mformer model)"),zWo=l(),cF=a("li"),F_e=a("strong"),QWo=o("qdqbert"),WWo=o(" \u2014 "),fz=a("a"),HWo=o("QDQBertForMultipleChoice"),UWo=o(" (QDQBert model)"),JWo=l(),mF=a("li"),T_e=a("strong"),YWo=o("rembert"),KWo=o(" \u2014 "),gz=a("a"),ZWo=o("RemBertForMultipleChoice"),eHo=o(" (RemBERT model)"),oHo=l(),fF=a("li"),M_e=a("strong"),rHo=o("roberta"),tHo=o(" \u2014 "),hz=a("a"),aHo=o("RobertaForMultipleChoice"),nHo=o(" (RoBERTa model)"),sHo=l(),gF=a("li"),E_e=a("strong"),lHo=o("roformer"),iHo=o(" \u2014 "),uz=a("a"),dHo=o("RoFormerForMultipleChoice"),cHo=o(" (RoFormer model)"),mHo=l(),hF=a("li"),C_e=a("strong"),fHo=o("squeezebert"),gHo=o(" \u2014 "),pz=a("a"),hHo=o("SqueezeBertForMultipleChoice"),uHo=o(" (SqueezeBERT model)"),pHo=l(),uF=a("li"),w_e=a("strong"),_Ho=o("xlm"),bHo=o(" \u2014 "),_z=a("a"),vHo=o("XLMForMultipleChoice"),FHo=o(" (XLM model)"),THo=l(),pF=a("li"),A_e=a("strong"),MHo=o("xlm-roberta"),EHo=o(" \u2014 "),bz=a("a"),CHo=o("XLMRobertaForMultipleChoice"),wHo=o(" (XLM-RoBERTa model)"),AHo=l(),_F=a("li"),L_e=a("strong"),LHo=o("xlm-roberta-xl"),yHo=o(" \u2014 "),vz=a("a"),xHo=o("XLMRobertaXLForMultipleChoice"),$Ho=o(" (XLM-RoBERTa-XL model)"),kHo=l(),bF=a("li"),y_e=a("strong"),SHo=o("xlnet"),RHo=o(" \u2014 "),Fz=a("a"),PHo=o("XLNetForMultipleChoice"),BHo=o(" (XLNet model)"),IHo=l(),vF=a("li"),x_e=a("strong"),NHo=o("yoso"),qHo=o(" \u2014 "),Tz=a("a"),jHo=o("YosoForMultipleChoice"),DHo=o(" (YOSO model)"),GHo=l(),FF=a("p"),OHo=o("The model is set in evaluation mode by default using "),$_e=a("code"),VHo=o("model.eval()"),XHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k_e=a("code"),zHo=o("model.train()"),QHo=l(),F(TF.$$.fragment),CXe=l(),id=a("h2"),MF=a("a"),S_e=a("span"),F(m8.$$.fragment),WHo=l(),R_e=a("span"),HHo=o("AutoModelForNextSentencePrediction"),wXe=l(),No=a("div"),F(f8.$$.fragment),UHo=l(),dd=a("p"),JHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Mz=a("a"),YHo=o("from_pretrained()"),KHo=o(" class method or the "),Ez=a("a"),ZHo=o("from_config()"),eUo=o(` class
method.`),oUo=l(),g8=a("p"),rUo=o("This class cannot be instantiated directly using "),P_e=a("code"),tUo=o("__init__()"),aUo=o(" (throws an error)."),nUo=l(),ut=a("div"),F(h8.$$.fragment),sUo=l(),B_e=a("p"),lUo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),iUo=l(),cd=a("p"),dUo=o(`Note:
Loading a model from its configuration file does `),I_e=a("strong"),cUo=o("not"),mUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cz=a("a"),fUo=o("from_pretrained()"),gUo=o(" to load the model weights."),hUo=l(),F(EF.$$.fragment),uUo=l(),ao=a("div"),F(u8.$$.fragment),pUo=l(),N_e=a("p"),_Uo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),bUo=l(),Va=a("p"),vUo=o("The model class to instantiate is selected based on the "),q_e=a("code"),FUo=o("model_type"),TUo=o(` property of the config object (either
passed as an argument or loaded from `),j_e=a("code"),MUo=o("pretrained_model_name_or_path"),EUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D_e=a("code"),CUo=o("pretrained_model_name_or_path"),wUo=o(":"),AUo=l(),qo=a("ul"),CF=a("li"),G_e=a("strong"),LUo=o("bert"),yUo=o(" \u2014 "),wz=a("a"),xUo=o("BertForNextSentencePrediction"),$Uo=o(" (BERT model)"),kUo=l(),wF=a("li"),O_e=a("strong"),SUo=o("fnet"),RUo=o(" \u2014 "),Az=a("a"),PUo=o("FNetForNextSentencePrediction"),BUo=o(" (FNet model)"),IUo=l(),AF=a("li"),V_e=a("strong"),NUo=o("megatron-bert"),qUo=o(" \u2014 "),Lz=a("a"),jUo=o("MegatronBertForNextSentencePrediction"),DUo=o(" (Megatron-BERT model)"),GUo=l(),LF=a("li"),X_e=a("strong"),OUo=o("mobilebert"),VUo=o(" \u2014 "),yz=a("a"),XUo=o("MobileBertForNextSentencePrediction"),zUo=o(" (MobileBERT model)"),QUo=l(),yF=a("li"),z_e=a("strong"),WUo=o("nezha"),HUo=o(" \u2014 "),xz=a("a"),UUo=o("NezhaForNextSentencePrediction"),JUo=o(" (Nezha model)"),YUo=l(),xF=a("li"),Q_e=a("strong"),KUo=o("qdqbert"),ZUo=o(" \u2014 "),$z=a("a"),eJo=o("QDQBertForNextSentencePrediction"),oJo=o(" (QDQBert model)"),rJo=l(),$F=a("p"),tJo=o("The model is set in evaluation mode by default using "),W_e=a("code"),aJo=o("model.eval()"),nJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H_e=a("code"),sJo=o("model.train()"),lJo=l(),F(kF.$$.fragment),AXe=l(),md=a("h2"),SF=a("a"),U_e=a("span"),F(p8.$$.fragment),iJo=l(),J_e=a("span"),dJo=o("AutoModelForTokenClassification"),LXe=l(),jo=a("div"),F(_8.$$.fragment),cJo=l(),fd=a("p"),mJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),kz=a("a"),fJo=o("from_pretrained()"),gJo=o(" class method or the "),Sz=a("a"),hJo=o("from_config()"),uJo=o(` class
method.`),pJo=l(),b8=a("p"),_Jo=o("This class cannot be instantiated directly using "),Y_e=a("code"),bJo=o("__init__()"),vJo=o(" (throws an error)."),FJo=l(),pt=a("div"),F(v8.$$.fragment),TJo=l(),K_e=a("p"),MJo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),EJo=l(),gd=a("p"),CJo=o(`Note:
Loading a model from its configuration file does `),Z_e=a("strong"),wJo=o("not"),AJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rz=a("a"),LJo=o("from_pretrained()"),yJo=o(" to load the model weights."),xJo=l(),F(RF.$$.fragment),$Jo=l(),no=a("div"),F(F8.$$.fragment),kJo=l(),e2e=a("p"),SJo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),RJo=l(),Xa=a("p"),PJo=o("The model class to instantiate is selected based on the "),o2e=a("code"),BJo=o("model_type"),IJo=o(` property of the config object (either
passed as an argument or loaded from `),r2e=a("code"),NJo=o("pretrained_model_name_or_path"),qJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t2e=a("code"),jJo=o("pretrained_model_name_or_path"),DJo=o(":"),GJo=l(),U=a("ul"),PF=a("li"),a2e=a("strong"),OJo=o("albert"),VJo=o(" \u2014 "),Pz=a("a"),XJo=o("AlbertForTokenClassification"),zJo=o(" (ALBERT model)"),QJo=l(),BF=a("li"),n2e=a("strong"),WJo=o("bert"),HJo=o(" \u2014 "),Bz=a("a"),UJo=o("BertForTokenClassification"),JJo=o(" (BERT model)"),YJo=l(),IF=a("li"),s2e=a("strong"),KJo=o("big_bird"),ZJo=o(" \u2014 "),Iz=a("a"),eYo=o("BigBirdForTokenClassification"),oYo=o(" (BigBird model)"),rYo=l(),NF=a("li"),l2e=a("strong"),tYo=o("bloom"),aYo=o(" \u2014 "),Nz=a("a"),nYo=o("BloomForTokenClassification"),sYo=o(" (BLOOM model)"),lYo=l(),qF=a("li"),i2e=a("strong"),iYo=o("camembert"),dYo=o(" \u2014 "),qz=a("a"),cYo=o("CamembertForTokenClassification"),mYo=o(" (CamemBERT model)"),fYo=l(),jF=a("li"),d2e=a("strong"),gYo=o("canine"),hYo=o(" \u2014 "),jz=a("a"),uYo=o("CanineForTokenClassification"),pYo=o(" (CANINE model)"),_Yo=l(),DF=a("li"),c2e=a("strong"),bYo=o("convbert"),vYo=o(" \u2014 "),Dz=a("a"),FYo=o("ConvBertForTokenClassification"),TYo=o(" (ConvBERT model)"),MYo=l(),GF=a("li"),m2e=a("strong"),EYo=o("data2vec-text"),CYo=o(" \u2014 "),Gz=a("a"),wYo=o("Data2VecTextForTokenClassification"),AYo=o(" (Data2VecText model)"),LYo=l(),OF=a("li"),f2e=a("strong"),yYo=o("deberta"),xYo=o(" \u2014 "),Oz=a("a"),$Yo=o("DebertaForTokenClassification"),kYo=o(" (DeBERTa model)"),SYo=l(),VF=a("li"),g2e=a("strong"),RYo=o("deberta-v2"),PYo=o(" \u2014 "),Vz=a("a"),BYo=o("DebertaV2ForTokenClassification"),IYo=o(" (DeBERTa-v2 model)"),NYo=l(),XF=a("li"),h2e=a("strong"),qYo=o("distilbert"),jYo=o(" \u2014 "),Xz=a("a"),DYo=o("DistilBertForTokenClassification"),GYo=o(" (DistilBERT model)"),OYo=l(),zF=a("li"),u2e=a("strong"),VYo=o("electra"),XYo=o(" \u2014 "),zz=a("a"),zYo=o("ElectraForTokenClassification"),QYo=o(" (ELECTRA model)"),WYo=l(),QF=a("li"),p2e=a("strong"),HYo=o("flaubert"),UYo=o(" \u2014 "),Qz=a("a"),JYo=o("FlaubertForTokenClassification"),YYo=o(" (FlauBERT model)"),KYo=l(),WF=a("li"),_2e=a("strong"),ZYo=o("fnet"),eKo=o(" \u2014 "),Wz=a("a"),oKo=o("FNetForTokenClassification"),rKo=o(" (FNet model)"),tKo=l(),HF=a("li"),b2e=a("strong"),aKo=o("funnel"),nKo=o(" \u2014 "),Hz=a("a"),sKo=o("FunnelForTokenClassification"),lKo=o(" (Funnel Transformer model)"),iKo=l(),UF=a("li"),v2e=a("strong"),dKo=o("gpt2"),cKo=o(" \u2014 "),Uz=a("a"),mKo=o("GPT2ForTokenClassification"),fKo=o(" (OpenAI GPT-2 model)"),gKo=l(),JF=a("li"),F2e=a("strong"),hKo=o("ibert"),uKo=o(" \u2014 "),Jz=a("a"),pKo=o("IBertForTokenClassification"),_Ko=o(" (I-BERT model)"),bKo=l(),YF=a("li"),T2e=a("strong"),vKo=o("layoutlm"),FKo=o(" \u2014 "),Yz=a("a"),TKo=o("LayoutLMForTokenClassification"),MKo=o(" (LayoutLM model)"),EKo=l(),KF=a("li"),M2e=a("strong"),CKo=o("layoutlmv2"),wKo=o(" \u2014 "),Kz=a("a"),AKo=o("LayoutLMv2ForTokenClassification"),LKo=o(" (LayoutLMv2 model)"),yKo=l(),ZF=a("li"),E2e=a("strong"),xKo=o("layoutlmv3"),$Ko=o(" \u2014 "),Zz=a("a"),kKo=o("LayoutLMv3ForTokenClassification"),SKo=o(" (LayoutLMv3 model)"),RKo=l(),eT=a("li"),C2e=a("strong"),PKo=o("longformer"),BKo=o(" \u2014 "),eQ=a("a"),IKo=o("LongformerForTokenClassification"),NKo=o(" (Longformer model)"),qKo=l(),oT=a("li"),w2e=a("strong"),jKo=o("megatron-bert"),DKo=o(" \u2014 "),oQ=a("a"),GKo=o("MegatronBertForTokenClassification"),OKo=o(" (Megatron-BERT model)"),VKo=l(),rT=a("li"),A2e=a("strong"),XKo=o("mobilebert"),zKo=o(" \u2014 "),rQ=a("a"),QKo=o("MobileBertForTokenClassification"),WKo=o(" (MobileBERT model)"),HKo=l(),tT=a("li"),L2e=a("strong"),UKo=o("mpnet"),JKo=o(" \u2014 "),tQ=a("a"),YKo=o("MPNetForTokenClassification"),KKo=o(" (MPNet model)"),ZKo=l(),aT=a("li"),y2e=a("strong"),eZo=o("nezha"),oZo=o(" \u2014 "),aQ=a("a"),rZo=o("NezhaForTokenClassification"),tZo=o(" (Nezha model)"),aZo=l(),nT=a("li"),x2e=a("strong"),nZo=o("nystromformer"),sZo=o(" \u2014 "),nQ=a("a"),lZo=o("NystromformerForTokenClassification"),iZo=o(" (Nystr\xF6mformer model)"),dZo=l(),sT=a("li"),$2e=a("strong"),cZo=o("qdqbert"),mZo=o(" \u2014 "),sQ=a("a"),fZo=o("QDQBertForTokenClassification"),gZo=o(" (QDQBert model)"),hZo=l(),lT=a("li"),k2e=a("strong"),uZo=o("rembert"),pZo=o(" \u2014 "),lQ=a("a"),_Zo=o("RemBertForTokenClassification"),bZo=o(" (RemBERT model)"),vZo=l(),iT=a("li"),S2e=a("strong"),FZo=o("roberta"),TZo=o(" \u2014 "),iQ=a("a"),MZo=o("RobertaForTokenClassification"),EZo=o(" (RoBERTa model)"),CZo=l(),dT=a("li"),R2e=a("strong"),wZo=o("roformer"),AZo=o(" \u2014 "),dQ=a("a"),LZo=o("RoFormerForTokenClassification"),yZo=o(" (RoFormer model)"),xZo=l(),cT=a("li"),P2e=a("strong"),$Zo=o("squeezebert"),kZo=o(" \u2014 "),cQ=a("a"),SZo=o("SqueezeBertForTokenClassification"),RZo=o(" (SqueezeBERT model)"),PZo=l(),mT=a("li"),B2e=a("strong"),BZo=o("xlm"),IZo=o(" \u2014 "),mQ=a("a"),NZo=o("XLMForTokenClassification"),qZo=o(" (XLM model)"),jZo=l(),fT=a("li"),I2e=a("strong"),DZo=o("xlm-roberta"),GZo=o(" \u2014 "),fQ=a("a"),OZo=o("XLMRobertaForTokenClassification"),VZo=o(" (XLM-RoBERTa model)"),XZo=l(),gT=a("li"),N2e=a("strong"),zZo=o("xlm-roberta-xl"),QZo=o(" \u2014 "),gQ=a("a"),WZo=o("XLMRobertaXLForTokenClassification"),HZo=o(" (XLM-RoBERTa-XL model)"),UZo=l(),hT=a("li"),q2e=a("strong"),JZo=o("xlnet"),YZo=o(" \u2014 "),hQ=a("a"),KZo=o("XLNetForTokenClassification"),ZZo=o(" (XLNet model)"),eer=l(),uT=a("li"),j2e=a("strong"),oer=o("yoso"),rer=o(" \u2014 "),uQ=a("a"),ter=o("YosoForTokenClassification"),aer=o(" (YOSO model)"),ner=l(),pT=a("p"),ser=o("The model is set in evaluation mode by default using "),D2e=a("code"),ler=o("model.eval()"),ier=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G2e=a("code"),der=o("model.train()"),cer=l(),F(_T.$$.fragment),yXe=l(),hd=a("h2"),bT=a("a"),O2e=a("span"),F(T8.$$.fragment),mer=l(),V2e=a("span"),fer=o("AutoModelForQuestionAnswering"),xXe=l(),Do=a("div"),F(M8.$$.fragment),ger=l(),ud=a("p"),her=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),pQ=a("a"),uer=o("from_pretrained()"),per=o(" class method or the "),_Q=a("a"),_er=o("from_config()"),ber=o(` class
method.`),ver=l(),E8=a("p"),Fer=o("This class cannot be instantiated directly using "),X2e=a("code"),Ter=o("__init__()"),Mer=o(" (throws an error)."),Eer=l(),_t=a("div"),F(C8.$$.fragment),Cer=l(),z2e=a("p"),wer=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Aer=l(),pd=a("p"),Ler=o(`Note:
Loading a model from its configuration file does `),Q2e=a("strong"),yer=o("not"),xer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=a("a"),$er=o("from_pretrained()"),ker=o(" to load the model weights."),Ser=l(),F(vT.$$.fragment),Rer=l(),so=a("div"),F(w8.$$.fragment),Per=l(),W2e=a("p"),Ber=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Ier=l(),za=a("p"),Ner=o("The model class to instantiate is selected based on the "),H2e=a("code"),qer=o("model_type"),jer=o(` property of the config object (either
passed as an argument or loaded from `),U2e=a("code"),Der=o("pretrained_model_name_or_path"),Ger=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J2e=a("code"),Oer=o("pretrained_model_name_or_path"),Ver=o(":"),Xer=l(),V=a("ul"),FT=a("li"),Y2e=a("strong"),zer=o("albert"),Qer=o(" \u2014 "),vQ=a("a"),Wer=o("AlbertForQuestionAnswering"),Her=o(" (ALBERT model)"),Uer=l(),TT=a("li"),K2e=a("strong"),Jer=o("bart"),Yer=o(" \u2014 "),FQ=a("a"),Ker=o("BartForQuestionAnswering"),Zer=o(" (BART model)"),eor=l(),MT=a("li"),Z2e=a("strong"),oor=o("bert"),ror=o(" \u2014 "),TQ=a("a"),tor=o("BertForQuestionAnswering"),aor=o(" (BERT model)"),nor=l(),ET=a("li"),ebe=a("strong"),sor=o("big_bird"),lor=o(" \u2014 "),MQ=a("a"),ior=o("BigBirdForQuestionAnswering"),dor=o(" (BigBird model)"),cor=l(),CT=a("li"),obe=a("strong"),mor=o("bigbird_pegasus"),gor=o(" \u2014 "),EQ=a("a"),hor=o("BigBirdPegasusForQuestionAnswering"),uor=o(" (BigBird-Pegasus model)"),por=l(),wT=a("li"),rbe=a("strong"),_or=o("camembert"),bor=o(" \u2014 "),CQ=a("a"),vor=o("CamembertForQuestionAnswering"),For=o(" (CamemBERT model)"),Tor=l(),AT=a("li"),tbe=a("strong"),Mor=o("canine"),Eor=o(" \u2014 "),wQ=a("a"),Cor=o("CanineForQuestionAnswering"),wor=o(" (CANINE model)"),Aor=l(),LT=a("li"),abe=a("strong"),Lor=o("convbert"),yor=o(" \u2014 "),AQ=a("a"),xor=o("ConvBertForQuestionAnswering"),$or=o(" (ConvBERT model)"),kor=l(),yT=a("li"),nbe=a("strong"),Sor=o("data2vec-text"),Ror=o(" \u2014 "),LQ=a("a"),Por=o("Data2VecTextForQuestionAnswering"),Bor=o(" (Data2VecText model)"),Ior=l(),xT=a("li"),sbe=a("strong"),Nor=o("deberta"),qor=o(" \u2014 "),yQ=a("a"),jor=o("DebertaForQuestionAnswering"),Dor=o(" (DeBERTa model)"),Gor=l(),$T=a("li"),lbe=a("strong"),Oor=o("deberta-v2"),Vor=o(" \u2014 "),xQ=a("a"),Xor=o("DebertaV2ForQuestionAnswering"),zor=o(" (DeBERTa-v2 model)"),Qor=l(),kT=a("li"),ibe=a("strong"),Wor=o("distilbert"),Hor=o(" \u2014 "),$Q=a("a"),Uor=o("DistilBertForQuestionAnswering"),Jor=o(" (DistilBERT model)"),Yor=l(),ST=a("li"),dbe=a("strong"),Kor=o("electra"),Zor=o(" \u2014 "),kQ=a("a"),err=o("ElectraForQuestionAnswering"),orr=o(" (ELECTRA model)"),rrr=l(),RT=a("li"),cbe=a("strong"),trr=o("flaubert"),arr=o(" \u2014 "),SQ=a("a"),nrr=o("FlaubertForQuestionAnsweringSimple"),srr=o(" (FlauBERT model)"),lrr=l(),PT=a("li"),mbe=a("strong"),irr=o("fnet"),drr=o(" \u2014 "),RQ=a("a"),crr=o("FNetForQuestionAnswering"),mrr=o(" (FNet model)"),frr=l(),BT=a("li"),fbe=a("strong"),grr=o("funnel"),hrr=o(" \u2014 "),PQ=a("a"),urr=o("FunnelForQuestionAnswering"),prr=o(" (Funnel Transformer model)"),_rr=l(),IT=a("li"),gbe=a("strong"),brr=o("gptj"),vrr=o(" \u2014 "),BQ=a("a"),Frr=o("GPTJForQuestionAnswering"),Trr=o(" (GPT-J model)"),Mrr=l(),NT=a("li"),hbe=a("strong"),Err=o("ibert"),Crr=o(" \u2014 "),IQ=a("a"),wrr=o("IBertForQuestionAnswering"),Arr=o(" (I-BERT model)"),Lrr=l(),qT=a("li"),ube=a("strong"),yrr=o("layoutlmv2"),xrr=o(" \u2014 "),NQ=a("a"),$rr=o("LayoutLMv2ForQuestionAnswering"),krr=o(" (LayoutLMv2 model)"),Srr=l(),jT=a("li"),pbe=a("strong"),Rrr=o("layoutlmv3"),Prr=o(" \u2014 "),qQ=a("a"),Brr=o("LayoutLMv3ForQuestionAnswering"),Irr=o(" (LayoutLMv3 model)"),Nrr=l(),DT=a("li"),_be=a("strong"),qrr=o("led"),jrr=o(" \u2014 "),jQ=a("a"),Drr=o("LEDForQuestionAnswering"),Grr=o(" (LED model)"),Orr=l(),GT=a("li"),bbe=a("strong"),Vrr=o("longformer"),Xrr=o(" \u2014 "),DQ=a("a"),zrr=o("LongformerForQuestionAnswering"),Qrr=o(" (Longformer model)"),Wrr=l(),OT=a("li"),vbe=a("strong"),Hrr=o("lxmert"),Urr=o(" \u2014 "),GQ=a("a"),Jrr=o("LxmertForQuestionAnswering"),Yrr=o(" (LXMERT model)"),Krr=l(),VT=a("li"),Fbe=a("strong"),Zrr=o("mbart"),etr=o(" \u2014 "),OQ=a("a"),otr=o("MBartForQuestionAnswering"),rtr=o(" (mBART model)"),ttr=l(),XT=a("li"),Tbe=a("strong"),atr=o("megatron-bert"),ntr=o(" \u2014 "),VQ=a("a"),str=o("MegatronBertForQuestionAnswering"),ltr=o(" (Megatron-BERT model)"),itr=l(),zT=a("li"),Mbe=a("strong"),dtr=o("mobilebert"),ctr=o(" \u2014 "),XQ=a("a"),mtr=o("MobileBertForQuestionAnswering"),ftr=o(" (MobileBERT model)"),gtr=l(),QT=a("li"),Ebe=a("strong"),htr=o("mpnet"),utr=o(" \u2014 "),zQ=a("a"),ptr=o("MPNetForQuestionAnswering"),_tr=o(" (MPNet model)"),btr=l(),WT=a("li"),Cbe=a("strong"),vtr=o("mvp"),Ftr=o(" \u2014 "),QQ=a("a"),Ttr=o("MvpForQuestionAnswering"),Mtr=o(" (MVP model)"),Etr=l(),HT=a("li"),wbe=a("strong"),Ctr=o("nezha"),wtr=o(" \u2014 "),WQ=a("a"),Atr=o("NezhaForQuestionAnswering"),Ltr=o(" (Nezha model)"),ytr=l(),UT=a("li"),Abe=a("strong"),xtr=o("nystromformer"),$tr=o(" \u2014 "),HQ=a("a"),ktr=o("NystromformerForQuestionAnswering"),Str=o(" (Nystr\xF6mformer model)"),Rtr=l(),JT=a("li"),Lbe=a("strong"),Ptr=o("qdqbert"),Btr=o(" \u2014 "),UQ=a("a"),Itr=o("QDQBertForQuestionAnswering"),Ntr=o(" (QDQBert model)"),qtr=l(),YT=a("li"),ybe=a("strong"),jtr=o("reformer"),Dtr=o(" \u2014 "),JQ=a("a"),Gtr=o("ReformerForQuestionAnswering"),Otr=o(" (Reformer model)"),Vtr=l(),KT=a("li"),xbe=a("strong"),Xtr=o("rembert"),ztr=o(" \u2014 "),YQ=a("a"),Qtr=o("RemBertForQuestionAnswering"),Wtr=o(" (RemBERT model)"),Htr=l(),ZT=a("li"),$be=a("strong"),Utr=o("roberta"),Jtr=o(" \u2014 "),KQ=a("a"),Ytr=o("RobertaForQuestionAnswering"),Ktr=o(" (RoBERTa model)"),Ztr=l(),eM=a("li"),kbe=a("strong"),ear=o("roformer"),oar=o(" \u2014 "),ZQ=a("a"),rar=o("RoFormerForQuestionAnswering"),tar=o(" (RoFormer model)"),aar=l(),oM=a("li"),Sbe=a("strong"),nar=o("splinter"),sar=o(" \u2014 "),eW=a("a"),lar=o("SplinterForQuestionAnswering"),iar=o(" (Splinter model)"),dar=l(),rM=a("li"),Rbe=a("strong"),car=o("squeezebert"),mar=o(" \u2014 "),oW=a("a"),far=o("SqueezeBertForQuestionAnswering"),gar=o(" (SqueezeBERT model)"),har=l(),tM=a("li"),Pbe=a("strong"),uar=o("xlm"),par=o(" \u2014 "),rW=a("a"),_ar=o("XLMForQuestionAnsweringSimple"),bar=o(" (XLM model)"),Far=l(),aM=a("li"),Bbe=a("strong"),Tar=o("xlm-roberta"),Mar=o(" \u2014 "),tW=a("a"),Ear=o("XLMRobertaForQuestionAnswering"),Car=o(" (XLM-RoBERTa model)"),war=l(),nM=a("li"),Ibe=a("strong"),Aar=o("xlm-roberta-xl"),Lar=o(" \u2014 "),aW=a("a"),yar=o("XLMRobertaXLForQuestionAnswering"),xar=o(" (XLM-RoBERTa-XL model)"),$ar=l(),sM=a("li"),Nbe=a("strong"),kar=o("xlnet"),Sar=o(" \u2014 "),nW=a("a"),Rar=o("XLNetForQuestionAnsweringSimple"),Par=o(" (XLNet model)"),Bar=l(),lM=a("li"),qbe=a("strong"),Iar=o("yoso"),Nar=o(" \u2014 "),sW=a("a"),qar=o("YosoForQuestionAnswering"),jar=o(" (YOSO model)"),Dar=l(),iM=a("p"),Gar=o("The model is set in evaluation mode by default using "),jbe=a("code"),Oar=o("model.eval()"),Var=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dbe=a("code"),Xar=o("model.train()"),zar=l(),F(dM.$$.fragment),$Xe=l(),_d=a("h2"),cM=a("a"),Gbe=a("span"),F(A8.$$.fragment),Qar=l(),Obe=a("span"),War=o("AutoModelForTableQuestionAnswering"),kXe=l(),Go=a("div"),F(L8.$$.fragment),Har=l(),bd=a("p"),Uar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),lW=a("a"),Jar=o("from_pretrained()"),Yar=o(" class method or the "),iW=a("a"),Kar=o("from_config()"),Zar=o(` class
method.`),enr=l(),y8=a("p"),onr=o("This class cannot be instantiated directly using "),Vbe=a("code"),rnr=o("__init__()"),tnr=o(" (throws an error)."),anr=l(),bt=a("div"),F(x8.$$.fragment),nnr=l(),Xbe=a("p"),snr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),lnr=l(),vd=a("p"),inr=o(`Note:
Loading a model from its configuration file does `),zbe=a("strong"),dnr=o("not"),cnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=a("a"),mnr=o("from_pretrained()"),fnr=o(" to load the model weights."),gnr=l(),F(mM.$$.fragment),hnr=l(),lo=a("div"),F($8.$$.fragment),unr=l(),Qbe=a("p"),pnr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),_nr=l(),Qa=a("p"),bnr=o("The model class to instantiate is selected based on the "),Wbe=a("code"),vnr=o("model_type"),Fnr=o(` property of the config object (either
passed as an argument or loaded from `),Hbe=a("code"),Tnr=o("pretrained_model_name_or_path"),Mnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ube=a("code"),Enr=o("pretrained_model_name_or_path"),Cnr=o(":"),wnr=l(),Jbe=a("ul"),fM=a("li"),Ybe=a("strong"),Anr=o("tapas"),Lnr=o(" \u2014 "),cW=a("a"),ynr=o("TapasForQuestionAnswering"),xnr=o(" (TAPAS model)"),$nr=l(),gM=a("p"),knr=o("The model is set in evaluation mode by default using "),Kbe=a("code"),Snr=o("model.eval()"),Rnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zbe=a("code"),Pnr=o("model.train()"),Bnr=l(),F(hM.$$.fragment),SXe=l(),Fd=a("h2"),uM=a("a"),eve=a("span"),F(k8.$$.fragment),Inr=l(),ove=a("span"),Nnr=o("AutoModelForImageClassification"),RXe=l(),Oo=a("div"),F(S8.$$.fragment),qnr=l(),Td=a("p"),jnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),mW=a("a"),Dnr=o("from_pretrained()"),Gnr=o(" class method or the "),fW=a("a"),Onr=o("from_config()"),Vnr=o(` class
method.`),Xnr=l(),R8=a("p"),znr=o("This class cannot be instantiated directly using "),rve=a("code"),Qnr=o("__init__()"),Wnr=o(" (throws an error)."),Hnr=l(),vt=a("div"),F(P8.$$.fragment),Unr=l(),tve=a("p"),Jnr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ynr=l(),Md=a("p"),Knr=o(`Note:
Loading a model from its configuration file does `),ave=a("strong"),Znr=o("not"),esr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=a("a"),osr=o("from_pretrained()"),rsr=o(" to load the model weights."),tsr=l(),F(pM.$$.fragment),asr=l(),io=a("div"),F(B8.$$.fragment),nsr=l(),nve=a("p"),ssr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),lsr=l(),Wa=a("p"),isr=o("The model class to instantiate is selected based on the "),sve=a("code"),dsr=o("model_type"),csr=o(` property of the config object (either
passed as an argument or loaded from `),lve=a("code"),msr=o("pretrained_model_name_or_path"),fsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ive=a("code"),gsr=o("pretrained_model_name_or_path"),hsr=o(":"),usr=l(),ve=a("ul"),_M=a("li"),dve=a("strong"),psr=o("beit"),_sr=o(" \u2014 "),hW=a("a"),bsr=o("BeitForImageClassification"),vsr=o(" (BEiT model)"),Fsr=l(),bM=a("li"),cve=a("strong"),Tsr=o("convnext"),Msr=o(" \u2014 "),uW=a("a"),Esr=o("ConvNextForImageClassification"),Csr=o(" (ConvNeXT model)"),wsr=l(),vM=a("li"),mve=a("strong"),Asr=o("cvt"),Lsr=o(" \u2014 "),pW=a("a"),ysr=o("CvtForImageClassification"),xsr=o(" (CvT model)"),$sr=l(),FM=a("li"),fve=a("strong"),ksr=o("data2vec-vision"),Ssr=o(" \u2014 "),_W=a("a"),Rsr=o("Data2VecVisionForImageClassification"),Psr=o(" (Data2VecVision model)"),Bsr=l(),Hs=a("li"),gve=a("strong"),Isr=o("deit"),Nsr=o(" \u2014 "),bW=a("a"),qsr=o("DeiTForImageClassification"),jsr=o(" or "),vW=a("a"),Dsr=o("DeiTForImageClassificationWithTeacher"),Gsr=o(" (DeiT model)"),Osr=l(),TM=a("li"),hve=a("strong"),Vsr=o("imagegpt"),Xsr=o(" \u2014 "),FW=a("a"),zsr=o("ImageGPTForImageClassification"),Qsr=o(" (ImageGPT model)"),Wsr=l(),Us=a("li"),uve=a("strong"),Hsr=o("levit"),Usr=o(" \u2014 "),TW=a("a"),Jsr=o("LevitForImageClassification"),Ysr=o(" or "),MW=a("a"),Ksr=o("LevitForImageClassificationWithTeacher"),Zsr=o(" (LeViT model)"),elr=l(),MM=a("li"),pve=a("strong"),olr=o("mobilevit"),rlr=o(" \u2014 "),EW=a("a"),tlr=o("MobileViTForImageClassification"),alr=o(" (MobileViT model)"),nlr=l(),Ft=a("li"),_ve=a("strong"),slr=o("perceiver"),llr=o(" \u2014 "),CW=a("a"),ilr=o("PerceiverForImageClassificationLearned"),dlr=o(" or "),wW=a("a"),clr=o("PerceiverForImageClassificationFourier"),mlr=o(" or "),AW=a("a"),flr=o("PerceiverForImageClassificationConvProcessing"),glr=o(" (Perceiver model)"),hlr=l(),EM=a("li"),bve=a("strong"),ulr=o("poolformer"),plr=o(" \u2014 "),LW=a("a"),_lr=o("PoolFormerForImageClassification"),blr=o(" (PoolFormer model)"),vlr=l(),CM=a("li"),vve=a("strong"),Flr=o("regnet"),Tlr=o(" \u2014 "),yW=a("a"),Mlr=o("RegNetForImageClassification"),Elr=o(" (RegNet model)"),Clr=l(),wM=a("li"),Fve=a("strong"),wlr=o("resnet"),Alr=o(" \u2014 "),xW=a("a"),Llr=o("ResNetForImageClassification"),ylr=o(" (ResNet model)"),xlr=l(),AM=a("li"),Tve=a("strong"),$lr=o("segformer"),klr=o(" \u2014 "),$W=a("a"),Slr=o("SegformerForImageClassification"),Rlr=o(" (SegFormer model)"),Plr=l(),LM=a("li"),Mve=a("strong"),Blr=o("swin"),Ilr=o(" \u2014 "),kW=a("a"),Nlr=o("SwinForImageClassification"),qlr=o(" (Swin Transformer model)"),jlr=l(),yM=a("li"),Eve=a("strong"),Dlr=o("van"),Glr=o(" \u2014 "),SW=a("a"),Olr=o("VanForImageClassification"),Vlr=o(" (VAN model)"),Xlr=l(),xM=a("li"),Cve=a("strong"),zlr=o("vit"),Qlr=o(" \u2014 "),RW=a("a"),Wlr=o("ViTForImageClassification"),Hlr=o(" (ViT model)"),Ulr=l(),$M=a("p"),Jlr=o("The model is set in evaluation mode by default using "),wve=a("code"),Ylr=o("model.eval()"),Klr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ave=a("code"),Zlr=o("model.train()"),eir=l(),F(kM.$$.fragment),PXe=l(),Ed=a("h2"),SM=a("a"),Lve=a("span"),F(I8.$$.fragment),oir=l(),yve=a("span"),rir=o("AutoModelForVision2Seq"),BXe=l(),Vo=a("div"),F(N8.$$.fragment),tir=l(),Cd=a("p"),air=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),PW=a("a"),nir=o("from_pretrained()"),sir=o(" class method or the "),BW=a("a"),lir=o("from_config()"),iir=o(` class
method.`),dir=l(),q8=a("p"),cir=o("This class cannot be instantiated directly using "),xve=a("code"),mir=o("__init__()"),fir=o(" (throws an error)."),gir=l(),Tt=a("div"),F(j8.$$.fragment),hir=l(),$ve=a("p"),uir=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),pir=l(),wd=a("p"),_ir=o(`Note:
Loading a model from its configuration file does `),kve=a("strong"),bir=o("not"),vir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=a("a"),Fir=o("from_pretrained()"),Tir=o(" to load the model weights."),Mir=l(),F(RM.$$.fragment),Eir=l(),co=a("div"),F(D8.$$.fragment),Cir=l(),Sve=a("p"),wir=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Air=l(),Ha=a("p"),Lir=o("The model class to instantiate is selected based on the "),Rve=a("code"),yir=o("model_type"),xir=o(` property of the config object (either
passed as an argument or loaded from `),Pve=a("code"),$ir=o("pretrained_model_name_or_path"),kir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=a("code"),Sir=o("pretrained_model_name_or_path"),Rir=o(":"),Pir=l(),Ive=a("ul"),PM=a("li"),Nve=a("strong"),Bir=o("vision-encoder-decoder"),Iir=o(" \u2014 "),NW=a("a"),Nir=o("VisionEncoderDecoderModel"),qir=o(" (Vision Encoder decoder model)"),jir=l(),BM=a("p"),Dir=o("The model is set in evaluation mode by default using "),qve=a("code"),Gir=o("model.eval()"),Oir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jve=a("code"),Vir=o("model.train()"),Xir=l(),F(IM.$$.fragment),IXe=l(),Ad=a("h2"),NM=a("a"),Dve=a("span"),F(G8.$$.fragment),zir=l(),Gve=a("span"),Qir=o("AutoModelForVisualQuestionAnswering"),NXe=l(),Xo=a("div"),F(O8.$$.fragment),Wir=l(),Ld=a("p"),Hir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),qW=a("a"),Uir=o("from_pretrained()"),Jir=o(" class method or the "),jW=a("a"),Yir=o("from_config()"),Kir=o(` class
method.`),Zir=l(),V8=a("p"),edr=o("This class cannot be instantiated directly using "),Ove=a("code"),odr=o("__init__()"),rdr=o(" (throws an error)."),tdr=l(),Mt=a("div"),F(X8.$$.fragment),adr=l(),Vve=a("p"),ndr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),sdr=l(),yd=a("p"),ldr=o(`Note:
Loading a model from its configuration file does `),Xve=a("strong"),idr=o("not"),ddr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DW=a("a"),cdr=o("from_pretrained()"),mdr=o(" to load the model weights."),fdr=l(),F(qM.$$.fragment),gdr=l(),mo=a("div"),F(z8.$$.fragment),hdr=l(),zve=a("p"),udr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),pdr=l(),Ua=a("p"),_dr=o("The model class to instantiate is selected based on the "),Qve=a("code"),bdr=o("model_type"),vdr=o(` property of the config object (either
passed as an argument or loaded from `),Wve=a("code"),Fdr=o("pretrained_model_name_or_path"),Tdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hve=a("code"),Mdr=o("pretrained_model_name_or_path"),Edr=o(":"),Cdr=l(),Uve=a("ul"),jM=a("li"),Jve=a("strong"),wdr=o("vilt"),Adr=o(" \u2014 "),GW=a("a"),Ldr=o("ViltForQuestionAnswering"),ydr=o(" (ViLT model)"),xdr=l(),DM=a("p"),$dr=o("The model is set in evaluation mode by default using "),Yve=a("code"),kdr=o("model.eval()"),Sdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kve=a("code"),Rdr=o("model.train()"),Pdr=l(),F(GM.$$.fragment),qXe=l(),xd=a("h2"),OM=a("a"),Zve=a("span"),F(Q8.$$.fragment),Bdr=l(),e1e=a("span"),Idr=o("AutoModelForAudioClassification"),jXe=l(),zo=a("div"),F(W8.$$.fragment),Ndr=l(),$d=a("p"),qdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),OW=a("a"),jdr=o("from_pretrained()"),Ddr=o(" class method or the "),VW=a("a"),Gdr=o("from_config()"),Odr=o(` class
method.`),Vdr=l(),H8=a("p"),Xdr=o("This class cannot be instantiated directly using "),o1e=a("code"),zdr=o("__init__()"),Qdr=o(" (throws an error)."),Wdr=l(),Et=a("div"),F(U8.$$.fragment),Hdr=l(),r1e=a("p"),Udr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Jdr=l(),kd=a("p"),Ydr=o(`Note:
Loading a model from its configuration file does `),t1e=a("strong"),Kdr=o("not"),Zdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=a("a"),ecr=o("from_pretrained()"),ocr=o(" to load the model weights."),rcr=l(),F(VM.$$.fragment),tcr=l(),fo=a("div"),F(J8.$$.fragment),acr=l(),a1e=a("p"),ncr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),scr=l(),Ja=a("p"),lcr=o("The model class to instantiate is selected based on the "),n1e=a("code"),icr=o("model_type"),dcr=o(` property of the config object (either
passed as an argument or loaded from `),s1e=a("code"),ccr=o("pretrained_model_name_or_path"),mcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l1e=a("code"),fcr=o("pretrained_model_name_or_path"),gcr=o(":"),hcr=l(),Pe=a("ul"),XM=a("li"),i1e=a("strong"),ucr=o("data2vec-audio"),pcr=o(" \u2014 "),zW=a("a"),_cr=o("Data2VecAudioForSequenceClassification"),bcr=o(" (Data2VecAudio model)"),vcr=l(),zM=a("li"),d1e=a("strong"),Fcr=o("hubert"),Tcr=o(" \u2014 "),QW=a("a"),Mcr=o("HubertForSequenceClassification"),Ecr=o(" (Hubert model)"),Ccr=l(),QM=a("li"),c1e=a("strong"),wcr=o("sew"),Acr=o(" \u2014 "),WW=a("a"),Lcr=o("SEWForSequenceClassification"),ycr=o(" (SEW model)"),xcr=l(),WM=a("li"),m1e=a("strong"),$cr=o("sew-d"),kcr=o(" \u2014 "),HW=a("a"),Scr=o("SEWDForSequenceClassification"),Rcr=o(" (SEW-D model)"),Pcr=l(),HM=a("li"),f1e=a("strong"),Bcr=o("unispeech"),Icr=o(" \u2014 "),UW=a("a"),Ncr=o("UniSpeechForSequenceClassification"),qcr=o(" (UniSpeech model)"),jcr=l(),UM=a("li"),g1e=a("strong"),Dcr=o("unispeech-sat"),Gcr=o(" \u2014 "),JW=a("a"),Ocr=o("UniSpeechSatForSequenceClassification"),Vcr=o(" (UniSpeechSat model)"),Xcr=l(),JM=a("li"),h1e=a("strong"),zcr=o("wav2vec2"),Qcr=o(" \u2014 "),YW=a("a"),Wcr=o("Wav2Vec2ForSequenceClassification"),Hcr=o(" (Wav2Vec2 model)"),Ucr=l(),YM=a("li"),u1e=a("strong"),Jcr=o("wav2vec2-conformer"),Ycr=o(" \u2014 "),KW=a("a"),Kcr=o("Wav2Vec2ConformerForSequenceClassification"),Zcr=o(" (Wav2Vec2-Conformer model)"),emr=l(),KM=a("li"),p1e=a("strong"),omr=o("wavlm"),rmr=o(" \u2014 "),ZW=a("a"),tmr=o("WavLMForSequenceClassification"),amr=o(" (WavLM model)"),nmr=l(),ZM=a("p"),smr=o("The model is set in evaluation mode by default using "),_1e=a("code"),lmr=o("model.eval()"),imr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b1e=a("code"),dmr=o("model.train()"),cmr=l(),F(e4.$$.fragment),DXe=l(),Sd=a("h2"),o4=a("a"),v1e=a("span"),F(Y8.$$.fragment),mmr=l(),F1e=a("span"),fmr=o("AutoModelForAudioFrameClassification"),GXe=l(),Qo=a("div"),F(K8.$$.fragment),gmr=l(),Rd=a("p"),hmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),eH=a("a"),umr=o("from_pretrained()"),pmr=o(" class method or the "),oH=a("a"),_mr=o("from_config()"),bmr=o(` class
method.`),vmr=l(),Z8=a("p"),Fmr=o("This class cannot be instantiated directly using "),T1e=a("code"),Tmr=o("__init__()"),Mmr=o(" (throws an error)."),Emr=l(),Ct=a("div"),F(e9.$$.fragment),Cmr=l(),M1e=a("p"),wmr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Amr=l(),Pd=a("p"),Lmr=o(`Note:
Loading a model from its configuration file does `),E1e=a("strong"),ymr=o("not"),xmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=a("a"),$mr=o("from_pretrained()"),kmr=o(" to load the model weights."),Smr=l(),F(r4.$$.fragment),Rmr=l(),go=a("div"),F(o9.$$.fragment),Pmr=l(),C1e=a("p"),Bmr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Imr=l(),Ya=a("p"),Nmr=o("The model class to instantiate is selected based on the "),w1e=a("code"),qmr=o("model_type"),jmr=o(` property of the config object (either
passed as an argument or loaded from `),A1e=a("code"),Dmr=o("pretrained_model_name_or_path"),Gmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L1e=a("code"),Omr=o("pretrained_model_name_or_path"),Vmr=o(":"),Xmr=l(),rt=a("ul"),t4=a("li"),y1e=a("strong"),zmr=o("data2vec-audio"),Qmr=o(" \u2014 "),tH=a("a"),Wmr=o("Data2VecAudioForAudioFrameClassification"),Hmr=o(" (Data2VecAudio model)"),Umr=l(),a4=a("li"),x1e=a("strong"),Jmr=o("unispeech-sat"),Ymr=o(" \u2014 "),aH=a("a"),Kmr=o("UniSpeechSatForAudioFrameClassification"),Zmr=o(" (UniSpeechSat model)"),efr=l(),n4=a("li"),$1e=a("strong"),ofr=o("wav2vec2"),rfr=o(" \u2014 "),nH=a("a"),tfr=o("Wav2Vec2ForAudioFrameClassification"),afr=o(" (Wav2Vec2 model)"),nfr=l(),s4=a("li"),k1e=a("strong"),sfr=o("wav2vec2-conformer"),lfr=o(" \u2014 "),sH=a("a"),ifr=o("Wav2Vec2ConformerForAudioFrameClassification"),dfr=o(" (Wav2Vec2-Conformer model)"),cfr=l(),l4=a("li"),S1e=a("strong"),mfr=o("wavlm"),ffr=o(" \u2014 "),lH=a("a"),gfr=o("WavLMForAudioFrameClassification"),hfr=o(" (WavLM model)"),ufr=l(),i4=a("p"),pfr=o("The model is set in evaluation mode by default using "),R1e=a("code"),_fr=o("model.eval()"),bfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P1e=a("code"),vfr=o("model.train()"),Ffr=l(),F(d4.$$.fragment),OXe=l(),Bd=a("h2"),c4=a("a"),B1e=a("span"),F(r9.$$.fragment),Tfr=l(),I1e=a("span"),Mfr=o("AutoModelForCTC"),VXe=l(),Wo=a("div"),F(t9.$$.fragment),Efr=l(),Id=a("p"),Cfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),iH=a("a"),wfr=o("from_pretrained()"),Afr=o(" class method or the "),dH=a("a"),Lfr=o("from_config()"),yfr=o(` class
method.`),xfr=l(),a9=a("p"),$fr=o("This class cannot be instantiated directly using "),N1e=a("code"),kfr=o("__init__()"),Sfr=o(" (throws an error)."),Rfr=l(),wt=a("div"),F(n9.$$.fragment),Pfr=l(),q1e=a("p"),Bfr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Ifr=l(),Nd=a("p"),Nfr=o(`Note:
Loading a model from its configuration file does `),j1e=a("strong"),qfr=o("not"),jfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cH=a("a"),Dfr=o("from_pretrained()"),Gfr=o(" to load the model weights."),Ofr=l(),F(m4.$$.fragment),Vfr=l(),ho=a("div"),F(s9.$$.fragment),Xfr=l(),D1e=a("p"),zfr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Qfr=l(),Ka=a("p"),Wfr=o("The model class to instantiate is selected based on the "),G1e=a("code"),Hfr=o("model_type"),Ufr=o(` property of the config object (either
passed as an argument or loaded from `),O1e=a("code"),Jfr=o("pretrained_model_name_or_path"),Yfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=a("code"),Kfr=o("pretrained_model_name_or_path"),Zfr=o(":"),egr=l(),Le=a("ul"),f4=a("li"),X1e=a("strong"),ogr=o("data2vec-audio"),rgr=o(" \u2014 "),mH=a("a"),tgr=o("Data2VecAudioForCTC"),agr=o(" (Data2VecAudio model)"),ngr=l(),g4=a("li"),z1e=a("strong"),sgr=o("hubert"),lgr=o(" \u2014 "),fH=a("a"),igr=o("HubertForCTC"),dgr=o(" (Hubert model)"),cgr=l(),h4=a("li"),Q1e=a("strong"),mgr=o("mctct"),fgr=o(" \u2014 "),gH=a("a"),ggr=o("MCTCTForCTC"),hgr=o(" (M-CTC-T model)"),ugr=l(),u4=a("li"),W1e=a("strong"),pgr=o("sew"),_gr=o(" \u2014 "),hH=a("a"),bgr=o("SEWForCTC"),vgr=o(" (SEW model)"),Fgr=l(),p4=a("li"),H1e=a("strong"),Tgr=o("sew-d"),Mgr=o(" \u2014 "),uH=a("a"),Egr=o("SEWDForCTC"),Cgr=o(" (SEW-D model)"),wgr=l(),_4=a("li"),U1e=a("strong"),Agr=o("unispeech"),Lgr=o(" \u2014 "),pH=a("a"),ygr=o("UniSpeechForCTC"),xgr=o(" (UniSpeech model)"),$gr=l(),b4=a("li"),J1e=a("strong"),kgr=o("unispeech-sat"),Sgr=o(" \u2014 "),_H=a("a"),Rgr=o("UniSpeechSatForCTC"),Pgr=o(" (UniSpeechSat model)"),Bgr=l(),v4=a("li"),Y1e=a("strong"),Igr=o("wav2vec2"),Ngr=o(" \u2014 "),bH=a("a"),qgr=o("Wav2Vec2ForCTC"),jgr=o(" (Wav2Vec2 model)"),Dgr=l(),F4=a("li"),K1e=a("strong"),Ggr=o("wav2vec2-conformer"),Ogr=o(" \u2014 "),vH=a("a"),Vgr=o("Wav2Vec2ConformerForCTC"),Xgr=o(" (Wav2Vec2-Conformer model)"),zgr=l(),T4=a("li"),Z1e=a("strong"),Qgr=o("wavlm"),Wgr=o(" \u2014 "),FH=a("a"),Hgr=o("WavLMForCTC"),Ugr=o(" (WavLM model)"),Jgr=l(),M4=a("p"),Ygr=o("The model is set in evaluation mode by default using "),eFe=a("code"),Kgr=o("model.eval()"),Zgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oFe=a("code"),ehr=o("model.train()"),ohr=l(),F(E4.$$.fragment),XXe=l(),qd=a("h2"),C4=a("a"),rFe=a("span"),F(l9.$$.fragment),rhr=l(),tFe=a("span"),thr=o("AutoModelForSpeechSeq2Seq"),zXe=l(),Ho=a("div"),F(i9.$$.fragment),ahr=l(),jd=a("p"),nhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),TH=a("a"),shr=o("from_pretrained()"),lhr=o(" class method or the "),MH=a("a"),ihr=o("from_config()"),dhr=o(` class
method.`),chr=l(),d9=a("p"),mhr=o("This class cannot be instantiated directly using "),aFe=a("code"),fhr=o("__init__()"),ghr=o(" (throws an error)."),hhr=l(),At=a("div"),F(c9.$$.fragment),uhr=l(),nFe=a("p"),phr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),_hr=l(),Dd=a("p"),bhr=o(`Note:
Loading a model from its configuration file does `),sFe=a("strong"),vhr=o("not"),Fhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EH=a("a"),Thr=o("from_pretrained()"),Mhr=o(" to load the model weights."),Ehr=l(),F(w4.$$.fragment),Chr=l(),uo=a("div"),F(m9.$$.fragment),whr=l(),lFe=a("p"),Ahr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Lhr=l(),Za=a("p"),yhr=o("The model class to instantiate is selected based on the "),iFe=a("code"),xhr=o("model_type"),$hr=o(` property of the config object (either
passed as an argument or loaded from `),dFe=a("code"),khr=o("pretrained_model_name_or_path"),Shr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=a("code"),Rhr=o("pretrained_model_name_or_path"),Phr=o(":"),Bhr=l(),f9=a("ul"),A4=a("li"),mFe=a("strong"),Ihr=o("speech-encoder-decoder"),Nhr=o(" \u2014 "),CH=a("a"),qhr=o("SpeechEncoderDecoderModel"),jhr=o(" (Speech Encoder decoder model)"),Dhr=l(),L4=a("li"),fFe=a("strong"),Ghr=o("speech_to_text"),Ohr=o(" \u2014 "),wH=a("a"),Vhr=o("Speech2TextForConditionalGeneration"),Xhr=o(" (Speech2Text model)"),zhr=l(),y4=a("p"),Qhr=o("The model is set in evaluation mode by default using "),gFe=a("code"),Whr=o("model.eval()"),Hhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hFe=a("code"),Uhr=o("model.train()"),Jhr=l(),F(x4.$$.fragment),QXe=l(),Gd=a("h2"),$4=a("a"),uFe=a("span"),F(g9.$$.fragment),Yhr=l(),pFe=a("span"),Khr=o("AutoModelForAudioXVector"),WXe=l(),Uo=a("div"),F(h9.$$.fragment),Zhr=l(),Od=a("p"),eur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),AH=a("a"),our=o("from_pretrained()"),rur=o(" class method or the "),LH=a("a"),tur=o("from_config()"),aur=o(` class
method.`),nur=l(),u9=a("p"),sur=o("This class cannot be instantiated directly using "),_Fe=a("code"),lur=o("__init__()"),iur=o(" (throws an error)."),dur=l(),Lt=a("div"),F(p9.$$.fragment),cur=l(),bFe=a("p"),mur=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),fur=l(),Vd=a("p"),gur=o(`Note:
Loading a model from its configuration file does `),vFe=a("strong"),hur=o("not"),uur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yH=a("a"),pur=o("from_pretrained()"),_ur=o(" to load the model weights."),bur=l(),F(k4.$$.fragment),vur=l(),po=a("div"),F(_9.$$.fragment),Fur=l(),FFe=a("p"),Tur=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Mur=l(),en=a("p"),Eur=o("The model class to instantiate is selected based on the "),TFe=a("code"),Cur=o("model_type"),wur=o(` property of the config object (either
passed as an argument or loaded from `),MFe=a("code"),Aur=o("pretrained_model_name_or_path"),Lur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=a("code"),yur=o("pretrained_model_name_or_path"),xur=o(":"),$ur=l(),tt=a("ul"),S4=a("li"),CFe=a("strong"),kur=o("data2vec-audio"),Sur=o(" \u2014 "),xH=a("a"),Rur=o("Data2VecAudioForXVector"),Pur=o(" (Data2VecAudio model)"),Bur=l(),R4=a("li"),wFe=a("strong"),Iur=o("unispeech-sat"),Nur=o(" \u2014 "),$H=a("a"),qur=o("UniSpeechSatForXVector"),jur=o(" (UniSpeechSat model)"),Dur=l(),P4=a("li"),AFe=a("strong"),Gur=o("wav2vec2"),Our=o(" \u2014 "),kH=a("a"),Vur=o("Wav2Vec2ForXVector"),Xur=o(" (Wav2Vec2 model)"),zur=l(),B4=a("li"),LFe=a("strong"),Qur=o("wav2vec2-conformer"),Wur=o(" \u2014 "),SH=a("a"),Hur=o("Wav2Vec2ConformerForXVector"),Uur=o(" (Wav2Vec2-Conformer model)"),Jur=l(),I4=a("li"),yFe=a("strong"),Yur=o("wavlm"),Kur=o(" \u2014 "),RH=a("a"),Zur=o("WavLMForXVector"),epr=o(" (WavLM model)"),opr=l(),N4=a("p"),rpr=o("The model is set in evaluation mode by default using "),xFe=a("code"),tpr=o("model.eval()"),apr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$Fe=a("code"),npr=o("model.train()"),spr=l(),F(q4.$$.fragment),HXe=l(),Xd=a("h2"),j4=a("a"),kFe=a("span"),F(b9.$$.fragment),lpr=l(),SFe=a("span"),ipr=o("AutoModelForMaskedImageModeling"),UXe=l(),Jo=a("div"),F(v9.$$.fragment),dpr=l(),zd=a("p"),cpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),PH=a("a"),mpr=o("from_pretrained()"),fpr=o(" class method or the "),BH=a("a"),gpr=o("from_config()"),hpr=o(` class
method.`),upr=l(),F9=a("p"),ppr=o("This class cannot be instantiated directly using "),RFe=a("code"),_pr=o("__init__()"),bpr=o(" (throws an error)."),vpr=l(),yt=a("div"),F(T9.$$.fragment),Fpr=l(),PFe=a("p"),Tpr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Mpr=l(),Qd=a("p"),Epr=o(`Note:
Loading a model from its configuration file does `),BFe=a("strong"),Cpr=o("not"),wpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=a("a"),Apr=o("from_pretrained()"),Lpr=o(" to load the model weights."),ypr=l(),F(D4.$$.fragment),xpr=l(),_o=a("div"),F(M9.$$.fragment),$pr=l(),IFe=a("p"),kpr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Spr=l(),on=a("p"),Rpr=o("The model class to instantiate is selected based on the "),NFe=a("code"),Ppr=o("model_type"),Bpr=o(` property of the config object (either
passed as an argument or loaded from `),qFe=a("code"),Ipr=o("pretrained_model_name_or_path"),Npr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jFe=a("code"),qpr=o("pretrained_model_name_or_path"),jpr=o(":"),Dpr=l(),Wd=a("ul"),G4=a("li"),DFe=a("strong"),Gpr=o("deit"),Opr=o(" \u2014 "),NH=a("a"),Vpr=o("DeiTForMaskedImageModeling"),Xpr=o(" (DeiT model)"),zpr=l(),O4=a("li"),GFe=a("strong"),Qpr=o("swin"),Wpr=o(" \u2014 "),qH=a("a"),Hpr=o("SwinForMaskedImageModeling"),Upr=o(" (Swin Transformer model)"),Jpr=l(),V4=a("li"),OFe=a("strong"),Ypr=o("vit"),Kpr=o(" \u2014 "),jH=a("a"),Zpr=o("ViTForMaskedImageModeling"),e_r=o(" (ViT model)"),o_r=l(),X4=a("p"),r_r=o("The model is set in evaluation mode by default using "),VFe=a("code"),t_r=o("model.eval()"),a_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),XFe=a("code"),n_r=o("model.train()"),s_r=l(),F(z4.$$.fragment),JXe=l(),Hd=a("h2"),Q4=a("a"),zFe=a("span"),F(E9.$$.fragment),l_r=l(),QFe=a("span"),i_r=o("AutoModelForObjectDetection"),YXe=l(),Yo=a("div"),F(C9.$$.fragment),d_r=l(),Ud=a("p"),c_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),DH=a("a"),m_r=o("from_pretrained()"),f_r=o(" class method or the "),GH=a("a"),g_r=o("from_config()"),h_r=o(` class
method.`),u_r=l(),w9=a("p"),p_r=o("This class cannot be instantiated directly using "),WFe=a("code"),__r=o("__init__()"),b_r=o(" (throws an error)."),v_r=l(),xt=a("div"),F(A9.$$.fragment),F_r=l(),HFe=a("p"),T_r=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),M_r=l(),Jd=a("p"),E_r=o(`Note:
Loading a model from its configuration file does `),UFe=a("strong"),C_r=o("not"),w_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OH=a("a"),A_r=o("from_pretrained()"),L_r=o(" to load the model weights."),y_r=l(),F(W4.$$.fragment),x_r=l(),bo=a("div"),F(L9.$$.fragment),$_r=l(),JFe=a("p"),k_r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),S_r=l(),rn=a("p"),R_r=o("The model class to instantiate is selected based on the "),YFe=a("code"),P_r=o("model_type"),B_r=o(` property of the config object (either
passed as an argument or loaded from `),KFe=a("code"),I_r=o("pretrained_model_name_or_path"),N_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZFe=a("code"),q_r=o("pretrained_model_name_or_path"),j_r=o(":"),D_r=l(),y9=a("ul"),H4=a("li"),eTe=a("strong"),G_r=o("detr"),O_r=o(" \u2014 "),VH=a("a"),V_r=o("DetrForObjectDetection"),X_r=o(" (DETR model)"),z_r=l(),U4=a("li"),oTe=a("strong"),Q_r=o("yolos"),W_r=o(" \u2014 "),XH=a("a"),H_r=o("YolosForObjectDetection"),U_r=o(" (YOLOS model)"),J_r=l(),J4=a("p"),Y_r=o("The model is set in evaluation mode by default using "),rTe=a("code"),K_r=o("model.eval()"),Z_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tTe=a("code"),e2r=o("model.train()"),o2r=l(),F(Y4.$$.fragment),KXe=l(),Yd=a("h2"),K4=a("a"),aTe=a("span"),F(x9.$$.fragment),r2r=l(),nTe=a("span"),t2r=o("AutoModelForImageSegmentation"),ZXe=l(),Ko=a("div"),F($9.$$.fragment),a2r=l(),Kd=a("p"),n2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),zH=a("a"),s2r=o("from_pretrained()"),l2r=o(" class method or the "),QH=a("a"),i2r=o("from_config()"),d2r=o(` class
method.`),c2r=l(),k9=a("p"),m2r=o("This class cannot be instantiated directly using "),sTe=a("code"),f2r=o("__init__()"),g2r=o(" (throws an error)."),h2r=l(),$t=a("div"),F(S9.$$.fragment),u2r=l(),lTe=a("p"),p2r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),_2r=l(),Zd=a("p"),b2r=o(`Note:
Loading a model from its configuration file does `),iTe=a("strong"),v2r=o("not"),F2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=a("a"),T2r=o("from_pretrained()"),M2r=o(" to load the model weights."),E2r=l(),F(Z4.$$.fragment),C2r=l(),vo=a("div"),F(R9.$$.fragment),w2r=l(),dTe=a("p"),A2r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),L2r=l(),tn=a("p"),y2r=o("The model class to instantiate is selected based on the "),cTe=a("code"),x2r=o("model_type"),$2r=o(` property of the config object (either
passed as an argument or loaded from `),mTe=a("code"),k2r=o("pretrained_model_name_or_path"),S2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fTe=a("code"),R2r=o("pretrained_model_name_or_path"),P2r=o(":"),B2r=l(),gTe=a("ul"),eE=a("li"),hTe=a("strong"),I2r=o("detr"),N2r=o(" \u2014 "),HH=a("a"),q2r=o("DetrForSegmentation"),j2r=o(" (DETR model)"),D2r=l(),oE=a("p"),G2r=o("The model is set in evaluation mode by default using "),uTe=a("code"),O2r=o("model.eval()"),V2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pTe=a("code"),X2r=o("model.train()"),z2r=l(),F(rE.$$.fragment),eze=l(),ec=a("h2"),tE=a("a"),_Te=a("span"),F(P9.$$.fragment),Q2r=l(),bTe=a("span"),W2r=o("AutoModelForSemanticSegmentation"),oze=l(),Zo=a("div"),F(B9.$$.fragment),H2r=l(),oc=a("p"),U2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),UH=a("a"),J2r=o("from_pretrained()"),Y2r=o(" class method or the "),JH=a("a"),K2r=o("from_config()"),Z2r=o(` class
method.`),ebr=l(),I9=a("p"),obr=o("This class cannot be instantiated directly using "),vTe=a("code"),rbr=o("__init__()"),tbr=o(" (throws an error)."),abr=l(),kt=a("div"),F(N9.$$.fragment),nbr=l(),FTe=a("p"),sbr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),lbr=l(),rc=a("p"),ibr=o(`Note:
Loading a model from its configuration file does `),TTe=a("strong"),dbr=o("not"),cbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=a("a"),mbr=o("from_pretrained()"),fbr=o(" to load the model weights."),gbr=l(),F(aE.$$.fragment),hbr=l(),Fo=a("div"),F(q9.$$.fragment),ubr=l(),MTe=a("p"),pbr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),_br=l(),an=a("p"),bbr=o("The model class to instantiate is selected based on the "),ETe=a("code"),vbr=o("model_type"),Fbr=o(` property of the config object (either
passed as an argument or loaded from `),CTe=a("code"),Tbr=o("pretrained_model_name_or_path"),Mbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wTe=a("code"),Ebr=o("pretrained_model_name_or_path"),Cbr=o(":"),wbr=l(),at=a("ul"),nE=a("li"),ATe=a("strong"),Abr=o("beit"),Lbr=o(" \u2014 "),KH=a("a"),ybr=o("BeitForSemanticSegmentation"),xbr=o(" (BEiT model)"),$br=l(),sE=a("li"),LTe=a("strong"),kbr=o("data2vec-vision"),Sbr=o(" \u2014 "),ZH=a("a"),Rbr=o("Data2VecVisionForSemanticSegmentation"),Pbr=o(" (Data2VecVision model)"),Bbr=l(),lE=a("li"),yTe=a("strong"),Ibr=o("dpt"),Nbr=o(" \u2014 "),eU=a("a"),qbr=o("DPTForSemanticSegmentation"),jbr=o(" (DPT model)"),Dbr=l(),iE=a("li"),xTe=a("strong"),Gbr=o("mobilevit"),Obr=o(" \u2014 "),oU=a("a"),Vbr=o("MobileViTForSemanticSegmentation"),Xbr=o(" (MobileViT model)"),zbr=l(),dE=a("li"),$Te=a("strong"),Qbr=o("segformer"),Wbr=o(" \u2014 "),rU=a("a"),Hbr=o("SegformerForSemanticSegmentation"),Ubr=o(" (SegFormer model)"),Jbr=l(),cE=a("p"),Ybr=o("The model is set in evaluation mode by default using "),kTe=a("code"),Kbr=o("model.eval()"),Zbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),STe=a("code"),evr=o("model.train()"),ovr=l(),F(mE.$$.fragment),rze=l(),tc=a("h2"),fE=a("a"),RTe=a("span"),F(j9.$$.fragment),rvr=l(),PTe=a("span"),tvr=o("AutoModelForInstanceSegmentation"),tze=l(),er=a("div"),F(D9.$$.fragment),avr=l(),ac=a("p"),nvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),tU=a("a"),svr=o("from_pretrained()"),lvr=o(" class method or the "),aU=a("a"),ivr=o("from_config()"),dvr=o(` class
method.`),cvr=l(),G9=a("p"),mvr=o("This class cannot be instantiated directly using "),BTe=a("code"),fvr=o("__init__()"),gvr=o(" (throws an error)."),hvr=l(),St=a("div"),F(O9.$$.fragment),uvr=l(),ITe=a("p"),pvr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),_vr=l(),nc=a("p"),bvr=o(`Note:
Loading a model from its configuration file does `),NTe=a("strong"),vvr=o("not"),Fvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=a("a"),Tvr=o("from_pretrained()"),Mvr=o(" to load the model weights."),Evr=l(),F(gE.$$.fragment),Cvr=l(),To=a("div"),F(V9.$$.fragment),wvr=l(),qTe=a("p"),Avr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Lvr=l(),nn=a("p"),yvr=o("The model class to instantiate is selected based on the "),jTe=a("code"),xvr=o("model_type"),$vr=o(` property of the config object (either
passed as an argument or loaded from `),DTe=a("code"),kvr=o("pretrained_model_name_or_path"),Svr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GTe=a("code"),Rvr=o("pretrained_model_name_or_path"),Pvr=o(":"),Bvr=l(),OTe=a("ul"),hE=a("li"),VTe=a("strong"),Ivr=o("maskformer"),Nvr=o(" \u2014 "),sU=a("a"),qvr=o("MaskFormerForInstanceSegmentation"),jvr=o(" (MaskFormer model)"),Dvr=l(),uE=a("p"),Gvr=o("The model is set in evaluation mode by default using "),XTe=a("code"),Ovr=o("model.eval()"),Vvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zTe=a("code"),Xvr=o("model.train()"),zvr=l(),F(pE.$$.fragment),aze=l(),sc=a("h2"),_E=a("a"),QTe=a("span"),F(X9.$$.fragment),Qvr=l(),WTe=a("span"),Wvr=o("TFAutoModel"),nze=l(),or=a("div"),F(z9.$$.fragment),Hvr=l(),lc=a("p"),Uvr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lU=a("a"),Jvr=o("from_pretrained()"),Yvr=o(" class method or the "),iU=a("a"),Kvr=o("from_config()"),Zvr=o(` class
method.`),e1r=l(),Q9=a("p"),o1r=o("This class cannot be instantiated directly using "),HTe=a("code"),r1r=o("__init__()"),t1r=o(" (throws an error)."),a1r=l(),Rt=a("div"),F(W9.$$.fragment),n1r=l(),UTe=a("p"),s1r=o("Instantiates one of the base model classes of the library from a configuration."),l1r=l(),ic=a("p"),i1r=o(`Note:
Loading a model from its configuration file does `),JTe=a("strong"),d1r=o("not"),c1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=a("a"),m1r=o("from_pretrained()"),f1r=o(" to load the model weights."),g1r=l(),F(bE.$$.fragment),h1r=l(),xr=a("div"),F(H9.$$.fragment),u1r=l(),YTe=a("p"),p1r=o("Instantiate one of the base model classes of the library from a pretrained model."),_1r=l(),sn=a("p"),b1r=o("The model class to instantiate is selected based on the "),KTe=a("code"),v1r=o("model_type"),F1r=o(` property of the config object (either
passed as an argument or loaded from `),ZTe=a("code"),T1r=o("pretrained_model_name_or_path"),M1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eMe=a("code"),E1r=o("pretrained_model_name_or_path"),C1r=o(":"),w1r=l(),q=a("ul"),vE=a("li"),oMe=a("strong"),A1r=o("albert"),L1r=o(" \u2014 "),cU=a("a"),y1r=o("TFAlbertModel"),x1r=o(" (ALBERT model)"),$1r=l(),FE=a("li"),rMe=a("strong"),k1r=o("bart"),S1r=o(" \u2014 "),mU=a("a"),R1r=o("TFBartModel"),P1r=o(" (BART model)"),B1r=l(),TE=a("li"),tMe=a("strong"),I1r=o("bert"),N1r=o(" \u2014 "),fU=a("a"),q1r=o("TFBertModel"),j1r=o(" (BERT model)"),D1r=l(),ME=a("li"),aMe=a("strong"),G1r=o("blenderbot"),O1r=o(" \u2014 "),gU=a("a"),V1r=o("TFBlenderbotModel"),X1r=o(" (Blenderbot model)"),z1r=l(),EE=a("li"),nMe=a("strong"),Q1r=o("blenderbot-small"),W1r=o(" \u2014 "),hU=a("a"),H1r=o("TFBlenderbotSmallModel"),U1r=o(" (BlenderbotSmall model)"),J1r=l(),CE=a("li"),sMe=a("strong"),Y1r=o("camembert"),K1r=o(" \u2014 "),uU=a("a"),Z1r=o("TFCamembertModel"),eFr=o(" (CamemBERT model)"),oFr=l(),wE=a("li"),lMe=a("strong"),rFr=o("clip"),tFr=o(" \u2014 "),pU=a("a"),aFr=o("TFCLIPModel"),nFr=o(" (CLIP model)"),sFr=l(),AE=a("li"),iMe=a("strong"),lFr=o("convbert"),iFr=o(" \u2014 "),_U=a("a"),dFr=o("TFConvBertModel"),cFr=o(" (ConvBERT model)"),mFr=l(),LE=a("li"),dMe=a("strong"),fFr=o("convnext"),gFr=o(" \u2014 "),bU=a("a"),hFr=o("TFConvNextModel"),uFr=o(" (ConvNeXT model)"),pFr=l(),yE=a("li"),cMe=a("strong"),_Fr=o("ctrl"),bFr=o(" \u2014 "),vU=a("a"),vFr=o("TFCTRLModel"),FFr=o(" (CTRL model)"),TFr=l(),xE=a("li"),mMe=a("strong"),MFr=o("data2vec-vision"),EFr=o(" \u2014 "),FU=a("a"),CFr=o("TFData2VecVisionModel"),wFr=o(" (Data2VecVision model)"),AFr=l(),$E=a("li"),fMe=a("strong"),LFr=o("deberta"),yFr=o(" \u2014 "),TU=a("a"),xFr=o("TFDebertaModel"),$Fr=o(" (DeBERTa model)"),kFr=l(),kE=a("li"),gMe=a("strong"),SFr=o("deberta-v2"),RFr=o(" \u2014 "),MU=a("a"),PFr=o("TFDebertaV2Model"),BFr=o(" (DeBERTa-v2 model)"),IFr=l(),SE=a("li"),hMe=a("strong"),NFr=o("deit"),qFr=o(" \u2014 "),EU=a("a"),jFr=o("TFDeiTModel"),DFr=o(" (DeiT model)"),GFr=l(),RE=a("li"),uMe=a("strong"),OFr=o("distilbert"),VFr=o(" \u2014 "),CU=a("a"),XFr=o("TFDistilBertModel"),zFr=o(" (DistilBERT model)"),QFr=l(),PE=a("li"),pMe=a("strong"),WFr=o("dpr"),HFr=o(" \u2014 "),wU=a("a"),UFr=o("TFDPRQuestionEncoder"),JFr=o(" (DPR model)"),YFr=l(),BE=a("li"),_Me=a("strong"),KFr=o("electra"),ZFr=o(" \u2014 "),AU=a("a"),eTr=o("TFElectraModel"),oTr=o(" (ELECTRA model)"),rTr=l(),IE=a("li"),bMe=a("strong"),tTr=o("flaubert"),aTr=o(" \u2014 "),LU=a("a"),nTr=o("TFFlaubertModel"),sTr=o(" (FlauBERT model)"),lTr=l(),Js=a("li"),vMe=a("strong"),iTr=o("funnel"),dTr=o(" \u2014 "),yU=a("a"),cTr=o("TFFunnelModel"),mTr=o(" or "),xU=a("a"),fTr=o("TFFunnelBaseModel"),gTr=o(" (Funnel Transformer model)"),hTr=l(),NE=a("li"),FMe=a("strong"),uTr=o("gpt2"),pTr=o(" \u2014 "),$U=a("a"),_Tr=o("TFGPT2Model"),bTr=o(" (OpenAI GPT-2 model)"),vTr=l(),qE=a("li"),TMe=a("strong"),FTr=o("gptj"),TTr=o(" \u2014 "),kU=a("a"),MTr=o("TFGPTJModel"),ETr=o(" (GPT-J model)"),CTr=l(),jE=a("li"),MMe=a("strong"),wTr=o("hubert"),ATr=o(" \u2014 "),SU=a("a"),LTr=o("TFHubertModel"),yTr=o(" (Hubert model)"),xTr=l(),DE=a("li"),EMe=a("strong"),$Tr=o("layoutlm"),kTr=o(" \u2014 "),RU=a("a"),STr=o("TFLayoutLMModel"),RTr=o(" (LayoutLM model)"),PTr=l(),GE=a("li"),CMe=a("strong"),BTr=o("led"),ITr=o(" \u2014 "),PU=a("a"),NTr=o("TFLEDModel"),qTr=o(" (LED model)"),jTr=l(),OE=a("li"),wMe=a("strong"),DTr=o("longformer"),GTr=o(" \u2014 "),BU=a("a"),OTr=o("TFLongformerModel"),VTr=o(" (Longformer model)"),XTr=l(),VE=a("li"),AMe=a("strong"),zTr=o("lxmert"),QTr=o(" \u2014 "),IU=a("a"),WTr=o("TFLxmertModel"),HTr=o(" (LXMERT model)"),UTr=l(),XE=a("li"),LMe=a("strong"),JTr=o("marian"),YTr=o(" \u2014 "),NU=a("a"),KTr=o("TFMarianModel"),ZTr=o(" (Marian model)"),eMr=l(),zE=a("li"),yMe=a("strong"),oMr=o("mbart"),rMr=o(" \u2014 "),qU=a("a"),tMr=o("TFMBartModel"),aMr=o(" (mBART model)"),nMr=l(),QE=a("li"),xMe=a("strong"),sMr=o("mobilebert"),lMr=o(" \u2014 "),jU=a("a"),iMr=o("TFMobileBertModel"),dMr=o(" (MobileBERT model)"),cMr=l(),WE=a("li"),$Me=a("strong"),mMr=o("mpnet"),fMr=o(" \u2014 "),DU=a("a"),gMr=o("TFMPNetModel"),hMr=o(" (MPNet model)"),uMr=l(),HE=a("li"),kMe=a("strong"),pMr=o("mt5"),_Mr=o(" \u2014 "),GU=a("a"),bMr=o("TFMT5Model"),vMr=o(" (MT5 model)"),FMr=l(),UE=a("li"),SMe=a("strong"),TMr=o("openai-gpt"),MMr=o(" \u2014 "),OU=a("a"),EMr=o("TFOpenAIGPTModel"),CMr=o(" (OpenAI GPT model)"),wMr=l(),JE=a("li"),RMe=a("strong"),AMr=o("opt"),LMr=o(" \u2014 "),VU=a("a"),yMr=o("TFOPTModel"),xMr=o(" (OPT model)"),$Mr=l(),YE=a("li"),PMe=a("strong"),kMr=o("pegasus"),SMr=o(" \u2014 "),XU=a("a"),RMr=o("TFPegasusModel"),PMr=o(" (Pegasus model)"),BMr=l(),KE=a("li"),BMe=a("strong"),IMr=o("regnet"),NMr=o(" \u2014 "),zU=a("a"),qMr=o("TFRegNetModel"),jMr=o(" (RegNet model)"),DMr=l(),ZE=a("li"),IMe=a("strong"),GMr=o("rembert"),OMr=o(" \u2014 "),QU=a("a"),VMr=o("TFRemBertModel"),XMr=o(" (RemBERT model)"),zMr=l(),eC=a("li"),NMe=a("strong"),QMr=o("resnet"),WMr=o(" \u2014 "),WU=a("a"),HMr=o("TFResNetModel"),UMr=o(" (ResNet model)"),JMr=l(),oC=a("li"),qMe=a("strong"),YMr=o("roberta"),KMr=o(" \u2014 "),HU=a("a"),ZMr=o("TFRobertaModel"),e4r=o(" (RoBERTa model)"),o4r=l(),rC=a("li"),jMe=a("strong"),r4r=o("roformer"),t4r=o(" \u2014 "),UU=a("a"),a4r=o("TFRoFormerModel"),n4r=o(" (RoFormer model)"),s4r=l(),tC=a("li"),DMe=a("strong"),l4r=o("speech_to_text"),i4r=o(" \u2014 "),JU=a("a"),d4r=o("TFSpeech2TextModel"),c4r=o(" (Speech2Text model)"),m4r=l(),aC=a("li"),GMe=a("strong"),f4r=o("swin"),g4r=o(" \u2014 "),YU=a("a"),h4r=o("TFSwinModel"),u4r=o(" (Swin Transformer model)"),p4r=l(),nC=a("li"),OMe=a("strong"),_4r=o("t5"),b4r=o(" \u2014 "),KU=a("a"),v4r=o("TFT5Model"),F4r=o(" (T5 model)"),T4r=l(),sC=a("li"),VMe=a("strong"),M4r=o("tapas"),E4r=o(" \u2014 "),ZU=a("a"),C4r=o("TFTapasModel"),w4r=o(" (TAPAS model)"),A4r=l(),lC=a("li"),XMe=a("strong"),L4r=o("transfo-xl"),y4r=o(" \u2014 "),eJ=a("a"),x4r=o("TFTransfoXLModel"),$4r=o(" (Transformer-XL model)"),k4r=l(),iC=a("li"),zMe=a("strong"),S4r=o("vit"),R4r=o(" \u2014 "),oJ=a("a"),P4r=o("TFViTModel"),B4r=o(" (ViT model)"),I4r=l(),dC=a("li"),QMe=a("strong"),N4r=o("vit_mae"),q4r=o(" \u2014 "),rJ=a("a"),j4r=o("TFViTMAEModel"),D4r=o(" (ViTMAE model)"),G4r=l(),cC=a("li"),WMe=a("strong"),O4r=o("wav2vec2"),V4r=o(" \u2014 "),tJ=a("a"),X4r=o("TFWav2Vec2Model"),z4r=o(" (Wav2Vec2 model)"),Q4r=l(),mC=a("li"),HMe=a("strong"),W4r=o("xlm"),H4r=o(" \u2014 "),aJ=a("a"),U4r=o("TFXLMModel"),J4r=o(" (XLM model)"),Y4r=l(),fC=a("li"),UMe=a("strong"),K4r=o("xlm-roberta"),Z4r=o(" \u2014 "),nJ=a("a"),eEr=o("TFXLMRobertaModel"),oEr=o(" (XLM-RoBERTa model)"),rEr=l(),gC=a("li"),JMe=a("strong"),tEr=o("xlnet"),aEr=o(" \u2014 "),sJ=a("a"),nEr=o("TFXLNetModel"),sEr=o(" (XLNet model)"),lEr=l(),F(hC.$$.fragment),sze=l(),dc=a("h2"),uC=a("a"),YMe=a("span"),F(U9.$$.fragment),iEr=l(),KMe=a("span"),dEr=o("TFAutoModelForPreTraining"),lze=l(),rr=a("div"),F(J9.$$.fragment),cEr=l(),cc=a("p"),mEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lJ=a("a"),fEr=o("from_pretrained()"),gEr=o(" class method or the "),iJ=a("a"),hEr=o("from_config()"),uEr=o(` class
method.`),pEr=l(),Y9=a("p"),_Er=o("This class cannot be instantiated directly using "),ZMe=a("code"),bEr=o("__init__()"),vEr=o(" (throws an error)."),FEr=l(),Pt=a("div"),F(K9.$$.fragment),TEr=l(),e4e=a("p"),MEr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),EEr=l(),mc=a("p"),CEr=o(`Note:
Loading a model from its configuration file does `),o4e=a("strong"),wEr=o("not"),AEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dJ=a("a"),LEr=o("from_pretrained()"),yEr=o(" to load the model weights."),xEr=l(),F(pC.$$.fragment),$Er=l(),$r=a("div"),F(Z9.$$.fragment),kEr=l(),r4e=a("p"),SEr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),REr=l(),ln=a("p"),PEr=o("The model class to instantiate is selected based on the "),t4e=a("code"),BEr=o("model_type"),IEr=o(` property of the config object (either
passed as an argument or loaded from `),a4e=a("code"),NEr=o("pretrained_model_name_or_path"),qEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n4e=a("code"),jEr=o("pretrained_model_name_or_path"),DEr=o(":"),GEr=l(),se=a("ul"),_C=a("li"),s4e=a("strong"),OEr=o("albert"),VEr=o(" \u2014 "),cJ=a("a"),XEr=o("TFAlbertForPreTraining"),zEr=o(" (ALBERT model)"),QEr=l(),bC=a("li"),l4e=a("strong"),WEr=o("bart"),HEr=o(" \u2014 "),mJ=a("a"),UEr=o("TFBartForConditionalGeneration"),JEr=o(" (BART model)"),YEr=l(),vC=a("li"),i4e=a("strong"),KEr=o("bert"),ZEr=o(" \u2014 "),fJ=a("a"),eCr=o("TFBertForPreTraining"),oCr=o(" (BERT model)"),rCr=l(),FC=a("li"),d4e=a("strong"),tCr=o("camembert"),aCr=o(" \u2014 "),gJ=a("a"),nCr=o("TFCamembertForMaskedLM"),sCr=o(" (CamemBERT model)"),lCr=l(),TC=a("li"),c4e=a("strong"),iCr=o("ctrl"),dCr=o(" \u2014 "),hJ=a("a"),cCr=o("TFCTRLLMHeadModel"),mCr=o(" (CTRL model)"),fCr=l(),MC=a("li"),m4e=a("strong"),gCr=o("distilbert"),hCr=o(" \u2014 "),uJ=a("a"),uCr=o("TFDistilBertForMaskedLM"),pCr=o(" (DistilBERT model)"),_Cr=l(),EC=a("li"),f4e=a("strong"),bCr=o("electra"),vCr=o(" \u2014 "),pJ=a("a"),FCr=o("TFElectraForPreTraining"),TCr=o(" (ELECTRA model)"),MCr=l(),CC=a("li"),g4e=a("strong"),ECr=o("flaubert"),CCr=o(" \u2014 "),_J=a("a"),wCr=o("TFFlaubertWithLMHeadModel"),ACr=o(" (FlauBERT model)"),LCr=l(),wC=a("li"),h4e=a("strong"),yCr=o("funnel"),xCr=o(" \u2014 "),bJ=a("a"),$Cr=o("TFFunnelForPreTraining"),kCr=o(" (Funnel Transformer model)"),SCr=l(),AC=a("li"),u4e=a("strong"),RCr=o("gpt2"),PCr=o(" \u2014 "),vJ=a("a"),BCr=o("TFGPT2LMHeadModel"),ICr=o(" (OpenAI GPT-2 model)"),NCr=l(),LC=a("li"),p4e=a("strong"),qCr=o("layoutlm"),jCr=o(" \u2014 "),FJ=a("a"),DCr=o("TFLayoutLMForMaskedLM"),GCr=o(" (LayoutLM model)"),OCr=l(),yC=a("li"),_4e=a("strong"),VCr=o("lxmert"),XCr=o(" \u2014 "),TJ=a("a"),zCr=o("TFLxmertForPreTraining"),QCr=o(" (LXMERT model)"),WCr=l(),xC=a("li"),b4e=a("strong"),HCr=o("mobilebert"),UCr=o(" \u2014 "),MJ=a("a"),JCr=o("TFMobileBertForPreTraining"),YCr=o(" (MobileBERT model)"),KCr=l(),$C=a("li"),v4e=a("strong"),ZCr=o("mpnet"),e3r=o(" \u2014 "),EJ=a("a"),o3r=o("TFMPNetForMaskedLM"),r3r=o(" (MPNet model)"),t3r=l(),kC=a("li"),F4e=a("strong"),a3r=o("openai-gpt"),n3r=o(" \u2014 "),CJ=a("a"),s3r=o("TFOpenAIGPTLMHeadModel"),l3r=o(" (OpenAI GPT model)"),i3r=l(),SC=a("li"),T4e=a("strong"),d3r=o("roberta"),c3r=o(" \u2014 "),wJ=a("a"),m3r=o("TFRobertaForMaskedLM"),f3r=o(" (RoBERTa model)"),g3r=l(),RC=a("li"),M4e=a("strong"),h3r=o("t5"),u3r=o(" \u2014 "),AJ=a("a"),p3r=o("TFT5ForConditionalGeneration"),_3r=o(" (T5 model)"),b3r=l(),PC=a("li"),E4e=a("strong"),v3r=o("tapas"),F3r=o(" \u2014 "),LJ=a("a"),T3r=o("TFTapasForMaskedLM"),M3r=o(" (TAPAS model)"),E3r=l(),BC=a("li"),C4e=a("strong"),C3r=o("transfo-xl"),w3r=o(" \u2014 "),yJ=a("a"),A3r=o("TFTransfoXLLMHeadModel"),L3r=o(" (Transformer-XL model)"),y3r=l(),IC=a("li"),w4e=a("strong"),x3r=o("vit_mae"),$3r=o(" \u2014 "),xJ=a("a"),k3r=o("TFViTMAEForPreTraining"),S3r=o(" (ViTMAE model)"),R3r=l(),NC=a("li"),A4e=a("strong"),P3r=o("xlm"),B3r=o(" \u2014 "),$J=a("a"),I3r=o("TFXLMWithLMHeadModel"),N3r=o(" (XLM model)"),q3r=l(),qC=a("li"),L4e=a("strong"),j3r=o("xlm-roberta"),D3r=o(" \u2014 "),kJ=a("a"),G3r=o("TFXLMRobertaForMaskedLM"),O3r=o(" (XLM-RoBERTa model)"),V3r=l(),jC=a("li"),y4e=a("strong"),X3r=o("xlnet"),z3r=o(" \u2014 "),SJ=a("a"),Q3r=o("TFXLNetLMHeadModel"),W3r=o(" (XLNet model)"),H3r=l(),F(DC.$$.fragment),ize=l(),fc=a("h2"),GC=a("a"),x4e=a("span"),F(ex.$$.fragment),U3r=l(),$4e=a("span"),J3r=o("TFAutoModelForCausalLM"),dze=l(),tr=a("div"),F(ox.$$.fragment),Y3r=l(),gc=a("p"),K3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),RJ=a("a"),Z3r=o("from_pretrained()"),e5r=o(" class method or the "),PJ=a("a"),o5r=o("from_config()"),r5r=o(` class
method.`),t5r=l(),rx=a("p"),a5r=o("This class cannot be instantiated directly using "),k4e=a("code"),n5r=o("__init__()"),s5r=o(" (throws an error)."),l5r=l(),Bt=a("div"),F(tx.$$.fragment),i5r=l(),S4e=a("p"),d5r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),c5r=l(),hc=a("p"),m5r=o(`Note:
Loading a model from its configuration file does `),R4e=a("strong"),f5r=o("not"),g5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=a("a"),h5r=o("from_pretrained()"),u5r=o(" to load the model weights."),p5r=l(),F(OC.$$.fragment),_5r=l(),kr=a("div"),F(ax.$$.fragment),b5r=l(),P4e=a("p"),v5r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),F5r=l(),dn=a("p"),T5r=o("The model class to instantiate is selected based on the "),B4e=a("code"),M5r=o("model_type"),E5r=o(` property of the config object (either
passed as an argument or loaded from `),I4e=a("code"),C5r=o("pretrained_model_name_or_path"),w5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N4e=a("code"),A5r=o("pretrained_model_name_or_path"),L5r=o(":"),y5r=l(),Me=a("ul"),VC=a("li"),q4e=a("strong"),x5r=o("bert"),$5r=o(" \u2014 "),IJ=a("a"),k5r=o("TFBertLMHeadModel"),S5r=o(" (BERT model)"),R5r=l(),XC=a("li"),j4e=a("strong"),P5r=o("camembert"),B5r=o(" \u2014 "),NJ=a("a"),I5r=o("TFCamembertForCausalLM"),N5r=o(" (CamemBERT model)"),q5r=l(),zC=a("li"),D4e=a("strong"),j5r=o("ctrl"),D5r=o(" \u2014 "),qJ=a("a"),G5r=o("TFCTRLLMHeadModel"),O5r=o(" (CTRL model)"),V5r=l(),QC=a("li"),G4e=a("strong"),X5r=o("gpt2"),z5r=o(" \u2014 "),jJ=a("a"),Q5r=o("TFGPT2LMHeadModel"),W5r=o(" (OpenAI GPT-2 model)"),H5r=l(),WC=a("li"),O4e=a("strong"),U5r=o("gptj"),J5r=o(" \u2014 "),DJ=a("a"),Y5r=o("TFGPTJForCausalLM"),K5r=o(" (GPT-J model)"),Z5r=l(),HC=a("li"),V4e=a("strong"),e0r=o("openai-gpt"),o0r=o(" \u2014 "),GJ=a("a"),r0r=o("TFOpenAIGPTLMHeadModel"),t0r=o(" (OpenAI GPT model)"),a0r=l(),UC=a("li"),X4e=a("strong"),n0r=o("opt"),s0r=o(" \u2014 "),OJ=a("a"),l0r=o("TFOPTForCausalLM"),i0r=o(" (OPT model)"),d0r=l(),JC=a("li"),z4e=a("strong"),c0r=o("rembert"),m0r=o(" \u2014 "),VJ=a("a"),f0r=o("TFRemBertForCausalLM"),g0r=o(" (RemBERT model)"),h0r=l(),YC=a("li"),Q4e=a("strong"),u0r=o("roberta"),p0r=o(" \u2014 "),XJ=a("a"),_0r=o("TFRobertaForCausalLM"),b0r=o(" (RoBERTa model)"),v0r=l(),KC=a("li"),W4e=a("strong"),F0r=o("roformer"),T0r=o(" \u2014 "),zJ=a("a"),M0r=o("TFRoFormerForCausalLM"),E0r=o(" (RoFormer model)"),C0r=l(),ZC=a("li"),H4e=a("strong"),w0r=o("transfo-xl"),A0r=o(" \u2014 "),QJ=a("a"),L0r=o("TFTransfoXLLMHeadModel"),y0r=o(" (Transformer-XL model)"),x0r=l(),e3=a("li"),U4e=a("strong"),$0r=o("xlm"),k0r=o(" \u2014 "),WJ=a("a"),S0r=o("TFXLMWithLMHeadModel"),R0r=o(" (XLM model)"),P0r=l(),o3=a("li"),J4e=a("strong"),B0r=o("xlnet"),I0r=o(" \u2014 "),HJ=a("a"),N0r=o("TFXLNetLMHeadModel"),q0r=o(" (XLNet model)"),j0r=l(),F(r3.$$.fragment),cze=l(),uc=a("h2"),t3=a("a"),Y4e=a("span"),F(nx.$$.fragment),D0r=l(),K4e=a("span"),G0r=o("TFAutoModelForImageClassification"),mze=l(),ar=a("div"),F(sx.$$.fragment),O0r=l(),pc=a("p"),V0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),UJ=a("a"),X0r=o("from_pretrained()"),z0r=o(" class method or the "),JJ=a("a"),Q0r=o("from_config()"),W0r=o(` class
method.`),H0r=l(),lx=a("p"),U0r=o("This class cannot be instantiated directly using "),Z4e=a("code"),J0r=o("__init__()"),Y0r=o(" (throws an error)."),K0r=l(),It=a("div"),F(ix.$$.fragment),Z0r=l(),eEe=a("p"),ewr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),owr=l(),_c=a("p"),rwr=o(`Note:
Loading a model from its configuration file does `),oEe=a("strong"),twr=o("not"),awr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=a("a"),nwr=o("from_pretrained()"),swr=o(" to load the model weights."),lwr=l(),F(a3.$$.fragment),iwr=l(),Sr=a("div"),F(dx.$$.fragment),dwr=l(),rEe=a("p"),cwr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),mwr=l(),cn=a("p"),fwr=o("The model class to instantiate is selected based on the "),tEe=a("code"),gwr=o("model_type"),hwr=o(` property of the config object (either
passed as an argument or loaded from `),aEe=a("code"),uwr=o("pretrained_model_name_or_path"),pwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nEe=a("code"),_wr=o("pretrained_model_name_or_path"),bwr=o(":"),vwr=l(),Qe=a("ul"),n3=a("li"),sEe=a("strong"),Fwr=o("convnext"),Twr=o(" \u2014 "),KJ=a("a"),Mwr=o("TFConvNextForImageClassification"),Ewr=o(" (ConvNeXT model)"),Cwr=l(),s3=a("li"),lEe=a("strong"),wwr=o("data2vec-vision"),Awr=o(" \u2014 "),ZJ=a("a"),Lwr=o("TFData2VecVisionForImageClassification"),ywr=o(" (Data2VecVision model)"),xwr=l(),Ys=a("li"),iEe=a("strong"),$wr=o("deit"),kwr=o(" \u2014 "),eY=a("a"),Swr=o("TFDeiTForImageClassification"),Rwr=o(" or "),oY=a("a"),Pwr=o("TFDeiTForImageClassificationWithTeacher"),Bwr=o(" (DeiT model)"),Iwr=l(),l3=a("li"),dEe=a("strong"),Nwr=o("regnet"),qwr=o(" \u2014 "),rY=a("a"),jwr=o("TFRegNetForImageClassification"),Dwr=o(" (RegNet model)"),Gwr=l(),i3=a("li"),cEe=a("strong"),Owr=o("resnet"),Vwr=o(" \u2014 "),tY=a("a"),Xwr=o("TFResNetForImageClassification"),zwr=o(" (ResNet model)"),Qwr=l(),d3=a("li"),mEe=a("strong"),Wwr=o("swin"),Hwr=o(" \u2014 "),aY=a("a"),Uwr=o("TFSwinForImageClassification"),Jwr=o(" (Swin Transformer model)"),Ywr=l(),c3=a("li"),fEe=a("strong"),Kwr=o("vit"),Zwr=o(" \u2014 "),nY=a("a"),eAr=o("TFViTForImageClassification"),oAr=o(" (ViT model)"),rAr=l(),F(m3.$$.fragment),fze=l(),bc=a("h2"),f3=a("a"),gEe=a("span"),F(cx.$$.fragment),tAr=l(),hEe=a("span"),aAr=o("TFAutoModelForMaskedLM"),gze=l(),nr=a("div"),F(mx.$$.fragment),nAr=l(),vc=a("p"),sAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sY=a("a"),lAr=o("from_pretrained()"),iAr=o(" class method or the "),lY=a("a"),dAr=o("from_config()"),cAr=o(` class
method.`),mAr=l(),fx=a("p"),fAr=o("This class cannot be instantiated directly using "),uEe=a("code"),gAr=o("__init__()"),hAr=o(" (throws an error)."),uAr=l(),Nt=a("div"),F(gx.$$.fragment),pAr=l(),pEe=a("p"),_Ar=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),bAr=l(),Fc=a("p"),vAr=o(`Note:
Loading a model from its configuration file does `),_Ee=a("strong"),FAr=o("not"),TAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iY=a("a"),MAr=o("from_pretrained()"),EAr=o(" to load the model weights."),CAr=l(),F(g3.$$.fragment),wAr=l(),Rr=a("div"),F(hx.$$.fragment),AAr=l(),bEe=a("p"),LAr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),yAr=l(),mn=a("p"),xAr=o("The model class to instantiate is selected based on the "),vEe=a("code"),$Ar=o("model_type"),kAr=o(` property of the config object (either
passed as an argument or loaded from `),FEe=a("code"),SAr=o("pretrained_model_name_or_path"),RAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TEe=a("code"),PAr=o("pretrained_model_name_or_path"),BAr=o(":"),IAr=l(),ie=a("ul"),h3=a("li"),MEe=a("strong"),NAr=o("albert"),qAr=o(" \u2014 "),dY=a("a"),jAr=o("TFAlbertForMaskedLM"),DAr=o(" (ALBERT model)"),GAr=l(),u3=a("li"),EEe=a("strong"),OAr=o("bert"),VAr=o(" \u2014 "),cY=a("a"),XAr=o("TFBertForMaskedLM"),zAr=o(" (BERT model)"),QAr=l(),p3=a("li"),CEe=a("strong"),WAr=o("camembert"),HAr=o(" \u2014 "),mY=a("a"),UAr=o("TFCamembertForMaskedLM"),JAr=o(" (CamemBERT model)"),YAr=l(),_3=a("li"),wEe=a("strong"),KAr=o("convbert"),ZAr=o(" \u2014 "),fY=a("a"),e6r=o("TFConvBertForMaskedLM"),o6r=o(" (ConvBERT model)"),r6r=l(),b3=a("li"),AEe=a("strong"),t6r=o("deberta"),a6r=o(" \u2014 "),gY=a("a"),n6r=o("TFDebertaForMaskedLM"),s6r=o(" (DeBERTa model)"),l6r=l(),v3=a("li"),LEe=a("strong"),i6r=o("deberta-v2"),d6r=o(" \u2014 "),hY=a("a"),c6r=o("TFDebertaV2ForMaskedLM"),m6r=o(" (DeBERTa-v2 model)"),f6r=l(),F3=a("li"),yEe=a("strong"),g6r=o("distilbert"),h6r=o(" \u2014 "),uY=a("a"),u6r=o("TFDistilBertForMaskedLM"),p6r=o(" (DistilBERT model)"),_6r=l(),T3=a("li"),xEe=a("strong"),b6r=o("electra"),v6r=o(" \u2014 "),pY=a("a"),F6r=o("TFElectraForMaskedLM"),T6r=o(" (ELECTRA model)"),M6r=l(),M3=a("li"),$Ee=a("strong"),E6r=o("flaubert"),C6r=o(" \u2014 "),_Y=a("a"),w6r=o("TFFlaubertWithLMHeadModel"),A6r=o(" (FlauBERT model)"),L6r=l(),E3=a("li"),kEe=a("strong"),y6r=o("funnel"),x6r=o(" \u2014 "),bY=a("a"),$6r=o("TFFunnelForMaskedLM"),k6r=o(" (Funnel Transformer model)"),S6r=l(),C3=a("li"),SEe=a("strong"),R6r=o("layoutlm"),P6r=o(" \u2014 "),vY=a("a"),B6r=o("TFLayoutLMForMaskedLM"),I6r=o(" (LayoutLM model)"),N6r=l(),w3=a("li"),REe=a("strong"),q6r=o("longformer"),j6r=o(" \u2014 "),FY=a("a"),D6r=o("TFLongformerForMaskedLM"),G6r=o(" (Longformer model)"),O6r=l(),A3=a("li"),PEe=a("strong"),V6r=o("mobilebert"),X6r=o(" \u2014 "),TY=a("a"),z6r=o("TFMobileBertForMaskedLM"),Q6r=o(" (MobileBERT model)"),W6r=l(),L3=a("li"),BEe=a("strong"),H6r=o("mpnet"),U6r=o(" \u2014 "),MY=a("a"),J6r=o("TFMPNetForMaskedLM"),Y6r=o(" (MPNet model)"),K6r=l(),y3=a("li"),IEe=a("strong"),Z6r=o("rembert"),e7r=o(" \u2014 "),EY=a("a"),o7r=o("TFRemBertForMaskedLM"),r7r=o(" (RemBERT model)"),t7r=l(),x3=a("li"),NEe=a("strong"),a7r=o("roberta"),n7r=o(" \u2014 "),CY=a("a"),s7r=o("TFRobertaForMaskedLM"),l7r=o(" (RoBERTa model)"),i7r=l(),$3=a("li"),qEe=a("strong"),d7r=o("roformer"),c7r=o(" \u2014 "),wY=a("a"),m7r=o("TFRoFormerForMaskedLM"),f7r=o(" (RoFormer model)"),g7r=l(),k3=a("li"),jEe=a("strong"),h7r=o("tapas"),u7r=o(" \u2014 "),AY=a("a"),p7r=o("TFTapasForMaskedLM"),_7r=o(" (TAPAS model)"),b7r=l(),S3=a("li"),DEe=a("strong"),v7r=o("xlm"),F7r=o(" \u2014 "),LY=a("a"),T7r=o("TFXLMWithLMHeadModel"),M7r=o(" (XLM model)"),E7r=l(),R3=a("li"),GEe=a("strong"),C7r=o("xlm-roberta"),w7r=o(" \u2014 "),yY=a("a"),A7r=o("TFXLMRobertaForMaskedLM"),L7r=o(" (XLM-RoBERTa model)"),y7r=l(),F(P3.$$.fragment),hze=l(),Tc=a("h2"),B3=a("a"),OEe=a("span"),F(ux.$$.fragment),x7r=l(),VEe=a("span"),$7r=o("TFAutoModelForSeq2SeqLM"),uze=l(),sr=a("div"),F(px.$$.fragment),k7r=l(),Mc=a("p"),S7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),xY=a("a"),R7r=o("from_pretrained()"),P7r=o(" class method or the "),$Y=a("a"),B7r=o("from_config()"),I7r=o(` class
method.`),N7r=l(),_x=a("p"),q7r=o("This class cannot be instantiated directly using "),XEe=a("code"),j7r=o("__init__()"),D7r=o(" (throws an error)."),G7r=l(),qt=a("div"),F(bx.$$.fragment),O7r=l(),zEe=a("p"),V7r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),X7r=l(),Ec=a("p"),z7r=o(`Note:
Loading a model from its configuration file does `),QEe=a("strong"),Q7r=o("not"),W7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kY=a("a"),H7r=o("from_pretrained()"),U7r=o(" to load the model weights."),J7r=l(),F(I3.$$.fragment),Y7r=l(),Pr=a("div"),F(vx.$$.fragment),K7r=l(),WEe=a("p"),Z7r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),eLr=l(),fn=a("p"),oLr=o("The model class to instantiate is selected based on the "),HEe=a("code"),rLr=o("model_type"),tLr=o(` property of the config object (either
passed as an argument or loaded from `),UEe=a("code"),aLr=o("pretrained_model_name_or_path"),nLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JEe=a("code"),sLr=o("pretrained_model_name_or_path"),lLr=o(":"),iLr=l(),ye=a("ul"),N3=a("li"),YEe=a("strong"),dLr=o("bart"),cLr=o(" \u2014 "),SY=a("a"),mLr=o("TFBartForConditionalGeneration"),fLr=o(" (BART model)"),gLr=l(),q3=a("li"),KEe=a("strong"),hLr=o("blenderbot"),uLr=o(" \u2014 "),RY=a("a"),pLr=o("TFBlenderbotForConditionalGeneration"),_Lr=o(" (Blenderbot model)"),bLr=l(),j3=a("li"),ZEe=a("strong"),vLr=o("blenderbot-small"),FLr=o(" \u2014 "),PY=a("a"),TLr=o("TFBlenderbotSmallForConditionalGeneration"),MLr=o(" (BlenderbotSmall model)"),ELr=l(),D3=a("li"),eCe=a("strong"),CLr=o("encoder-decoder"),wLr=o(" \u2014 "),BY=a("a"),ALr=o("TFEncoderDecoderModel"),LLr=o(" (Encoder decoder model)"),yLr=l(),G3=a("li"),oCe=a("strong"),xLr=o("led"),$Lr=o(" \u2014 "),IY=a("a"),kLr=o("TFLEDForConditionalGeneration"),SLr=o(" (LED model)"),RLr=l(),O3=a("li"),rCe=a("strong"),PLr=o("marian"),BLr=o(" \u2014 "),NY=a("a"),ILr=o("TFMarianMTModel"),NLr=o(" (Marian model)"),qLr=l(),V3=a("li"),tCe=a("strong"),jLr=o("mbart"),DLr=o(" \u2014 "),qY=a("a"),GLr=o("TFMBartForConditionalGeneration"),OLr=o(" (mBART model)"),VLr=l(),X3=a("li"),aCe=a("strong"),XLr=o("mt5"),zLr=o(" \u2014 "),jY=a("a"),QLr=o("TFMT5ForConditionalGeneration"),WLr=o(" (MT5 model)"),HLr=l(),z3=a("li"),nCe=a("strong"),ULr=o("pegasus"),JLr=o(" \u2014 "),DY=a("a"),YLr=o("TFPegasusForConditionalGeneration"),KLr=o(" (Pegasus model)"),ZLr=l(),Q3=a("li"),sCe=a("strong"),eyr=o("t5"),oyr=o(" \u2014 "),GY=a("a"),ryr=o("TFT5ForConditionalGeneration"),tyr=o(" (T5 model)"),ayr=l(),F(W3.$$.fragment),pze=l(),Cc=a("h2"),H3=a("a"),lCe=a("span"),F(Fx.$$.fragment),nyr=l(),iCe=a("span"),syr=o("TFAutoModelForSequenceClassification"),_ze=l(),lr=a("div"),F(Tx.$$.fragment),lyr=l(),wc=a("p"),iyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),OY=a("a"),dyr=o("from_pretrained()"),cyr=o(" class method or the "),VY=a("a"),myr=o("from_config()"),fyr=o(` class
method.`),gyr=l(),Mx=a("p"),hyr=o("This class cannot be instantiated directly using "),dCe=a("code"),uyr=o("__init__()"),pyr=o(" (throws an error)."),_yr=l(),jt=a("div"),F(Ex.$$.fragment),byr=l(),cCe=a("p"),vyr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Fyr=l(),Ac=a("p"),Tyr=o(`Note:
Loading a model from its configuration file does `),mCe=a("strong"),Myr=o("not"),Eyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XY=a("a"),Cyr=o("from_pretrained()"),wyr=o(" to load the model weights."),Ayr=l(),F(U3.$$.fragment),Lyr=l(),Br=a("div"),F(Cx.$$.fragment),yyr=l(),fCe=a("p"),xyr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),$yr=l(),gn=a("p"),kyr=o("The model class to instantiate is selected based on the "),gCe=a("code"),Syr=o("model_type"),Ryr=o(` property of the config object (either
passed as an argument or loaded from `),hCe=a("code"),Pyr=o("pretrained_model_name_or_path"),Byr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uCe=a("code"),Iyr=o("pretrained_model_name_or_path"),Nyr=o(":"),qyr=l(),te=a("ul"),J3=a("li"),pCe=a("strong"),jyr=o("albert"),Dyr=o(" \u2014 "),zY=a("a"),Gyr=o("TFAlbertForSequenceClassification"),Oyr=o(" (ALBERT model)"),Vyr=l(),Y3=a("li"),_Ce=a("strong"),Xyr=o("bert"),zyr=o(" \u2014 "),QY=a("a"),Qyr=o("TFBertForSequenceClassification"),Wyr=o(" (BERT model)"),Hyr=l(),K3=a("li"),bCe=a("strong"),Uyr=o("camembert"),Jyr=o(" \u2014 "),WY=a("a"),Yyr=o("TFCamembertForSequenceClassification"),Kyr=o(" (CamemBERT model)"),Zyr=l(),Z3=a("li"),vCe=a("strong"),e8r=o("convbert"),o8r=o(" \u2014 "),HY=a("a"),r8r=o("TFConvBertForSequenceClassification"),t8r=o(" (ConvBERT model)"),a8r=l(),e5=a("li"),FCe=a("strong"),n8r=o("ctrl"),s8r=o(" \u2014 "),UY=a("a"),l8r=o("TFCTRLForSequenceClassification"),i8r=o(" (CTRL model)"),d8r=l(),o5=a("li"),TCe=a("strong"),c8r=o("deberta"),m8r=o(" \u2014 "),JY=a("a"),f8r=o("TFDebertaForSequenceClassification"),g8r=o(" (DeBERTa model)"),h8r=l(),r5=a("li"),MCe=a("strong"),u8r=o("deberta-v2"),p8r=o(" \u2014 "),YY=a("a"),_8r=o("TFDebertaV2ForSequenceClassification"),b8r=o(" (DeBERTa-v2 model)"),v8r=l(),t5=a("li"),ECe=a("strong"),F8r=o("distilbert"),T8r=o(" \u2014 "),KY=a("a"),M8r=o("TFDistilBertForSequenceClassification"),E8r=o(" (DistilBERT model)"),C8r=l(),a5=a("li"),CCe=a("strong"),w8r=o("electra"),A8r=o(" \u2014 "),ZY=a("a"),L8r=o("TFElectraForSequenceClassification"),y8r=o(" (ELECTRA model)"),x8r=l(),n5=a("li"),wCe=a("strong"),$8r=o("flaubert"),k8r=o(" \u2014 "),eK=a("a"),S8r=o("TFFlaubertForSequenceClassification"),R8r=o(" (FlauBERT model)"),P8r=l(),s5=a("li"),ACe=a("strong"),B8r=o("funnel"),I8r=o(" \u2014 "),oK=a("a"),N8r=o("TFFunnelForSequenceClassification"),q8r=o(" (Funnel Transformer model)"),j8r=l(),l5=a("li"),LCe=a("strong"),D8r=o("gpt2"),G8r=o(" \u2014 "),rK=a("a"),O8r=o("TFGPT2ForSequenceClassification"),V8r=o(" (OpenAI GPT-2 model)"),X8r=l(),i5=a("li"),yCe=a("strong"),z8r=o("gptj"),Q8r=o(" \u2014 "),tK=a("a"),W8r=o("TFGPTJForSequenceClassification"),H8r=o(" (GPT-J model)"),U8r=l(),d5=a("li"),xCe=a("strong"),J8r=o("layoutlm"),Y8r=o(" \u2014 "),aK=a("a"),K8r=o("TFLayoutLMForSequenceClassification"),Z8r=o(" (LayoutLM model)"),e9r=l(),c5=a("li"),$Ce=a("strong"),o9r=o("longformer"),r9r=o(" \u2014 "),nK=a("a"),t9r=o("TFLongformerForSequenceClassification"),a9r=o(" (Longformer model)"),n9r=l(),m5=a("li"),kCe=a("strong"),s9r=o("mobilebert"),l9r=o(" \u2014 "),sK=a("a"),i9r=o("TFMobileBertForSequenceClassification"),d9r=o(" (MobileBERT model)"),c9r=l(),f5=a("li"),SCe=a("strong"),m9r=o("mpnet"),f9r=o(" \u2014 "),lK=a("a"),g9r=o("TFMPNetForSequenceClassification"),h9r=o(" (MPNet model)"),u9r=l(),g5=a("li"),RCe=a("strong"),p9r=o("openai-gpt"),_9r=o(" \u2014 "),iK=a("a"),b9r=o("TFOpenAIGPTForSequenceClassification"),v9r=o(" (OpenAI GPT model)"),F9r=l(),h5=a("li"),PCe=a("strong"),T9r=o("rembert"),M9r=o(" \u2014 "),dK=a("a"),E9r=o("TFRemBertForSequenceClassification"),C9r=o(" (RemBERT model)"),w9r=l(),u5=a("li"),BCe=a("strong"),A9r=o("roberta"),L9r=o(" \u2014 "),cK=a("a"),y9r=o("TFRobertaForSequenceClassification"),x9r=o(" (RoBERTa model)"),$9r=l(),p5=a("li"),ICe=a("strong"),k9r=o("roformer"),S9r=o(" \u2014 "),mK=a("a"),R9r=o("TFRoFormerForSequenceClassification"),P9r=o(" (RoFormer model)"),B9r=l(),_5=a("li"),NCe=a("strong"),I9r=o("tapas"),N9r=o(" \u2014 "),fK=a("a"),q9r=o("TFTapasForSequenceClassification"),j9r=o(" (TAPAS model)"),D9r=l(),b5=a("li"),qCe=a("strong"),G9r=o("transfo-xl"),O9r=o(" \u2014 "),gK=a("a"),V9r=o("TFTransfoXLForSequenceClassification"),X9r=o(" (Transformer-XL model)"),z9r=l(),v5=a("li"),jCe=a("strong"),Q9r=o("xlm"),W9r=o(" \u2014 "),hK=a("a"),H9r=o("TFXLMForSequenceClassification"),U9r=o(" (XLM model)"),J9r=l(),F5=a("li"),DCe=a("strong"),Y9r=o("xlm-roberta"),K9r=o(" \u2014 "),uK=a("a"),Z9r=o("TFXLMRobertaForSequenceClassification"),exr=o(" (XLM-RoBERTa model)"),oxr=l(),T5=a("li"),GCe=a("strong"),rxr=o("xlnet"),txr=o(" \u2014 "),pK=a("a"),axr=o("TFXLNetForSequenceClassification"),nxr=o(" (XLNet model)"),sxr=l(),F(M5.$$.fragment),bze=l(),Lc=a("h2"),E5=a("a"),OCe=a("span"),F(wx.$$.fragment),lxr=l(),VCe=a("span"),ixr=o("TFAutoModelForMultipleChoice"),vze=l(),ir=a("div"),F(Ax.$$.fragment),dxr=l(),yc=a("p"),cxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_K=a("a"),mxr=o("from_pretrained()"),fxr=o(" class method or the "),bK=a("a"),gxr=o("from_config()"),hxr=o(` class
method.`),uxr=l(),Lx=a("p"),pxr=o("This class cannot be instantiated directly using "),XCe=a("code"),_xr=o("__init__()"),bxr=o(" (throws an error)."),vxr=l(),Dt=a("div"),F(yx.$$.fragment),Fxr=l(),zCe=a("p"),Txr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Mxr=l(),xc=a("p"),Exr=o(`Note:
Loading a model from its configuration file does `),QCe=a("strong"),Cxr=o("not"),wxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=a("a"),Axr=o("from_pretrained()"),Lxr=o(" to load the model weights."),yxr=l(),F(C5.$$.fragment),xxr=l(),Ir=a("div"),F(xx.$$.fragment),$xr=l(),WCe=a("p"),kxr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Sxr=l(),hn=a("p"),Rxr=o("The model class to instantiate is selected based on the "),HCe=a("code"),Pxr=o("model_type"),Bxr=o(` property of the config object (either
passed as an argument or loaded from `),UCe=a("code"),Ixr=o("pretrained_model_name_or_path"),Nxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JCe=a("code"),qxr=o("pretrained_model_name_or_path"),jxr=o(":"),Dxr=l(),pe=a("ul"),w5=a("li"),YCe=a("strong"),Gxr=o("albert"),Oxr=o(" \u2014 "),FK=a("a"),Vxr=o("TFAlbertForMultipleChoice"),Xxr=o(" (ALBERT model)"),zxr=l(),A5=a("li"),KCe=a("strong"),Qxr=o("bert"),Wxr=o(" \u2014 "),TK=a("a"),Hxr=o("TFBertForMultipleChoice"),Uxr=o(" (BERT model)"),Jxr=l(),L5=a("li"),ZCe=a("strong"),Yxr=o("camembert"),Kxr=o(" \u2014 "),MK=a("a"),Zxr=o("TFCamembertForMultipleChoice"),e$r=o(" (CamemBERT model)"),o$r=l(),y5=a("li"),e3e=a("strong"),r$r=o("convbert"),t$r=o(" \u2014 "),EK=a("a"),a$r=o("TFConvBertForMultipleChoice"),n$r=o(" (ConvBERT model)"),s$r=l(),x5=a("li"),o3e=a("strong"),l$r=o("distilbert"),i$r=o(" \u2014 "),CK=a("a"),d$r=o("TFDistilBertForMultipleChoice"),c$r=o(" (DistilBERT model)"),m$r=l(),$5=a("li"),r3e=a("strong"),f$r=o("electra"),g$r=o(" \u2014 "),wK=a("a"),h$r=o("TFElectraForMultipleChoice"),u$r=o(" (ELECTRA model)"),p$r=l(),k5=a("li"),t3e=a("strong"),_$r=o("flaubert"),b$r=o(" \u2014 "),AK=a("a"),v$r=o("TFFlaubertForMultipleChoice"),F$r=o(" (FlauBERT model)"),T$r=l(),S5=a("li"),a3e=a("strong"),M$r=o("funnel"),E$r=o(" \u2014 "),LK=a("a"),C$r=o("TFFunnelForMultipleChoice"),w$r=o(" (Funnel Transformer model)"),A$r=l(),R5=a("li"),n3e=a("strong"),L$r=o("longformer"),y$r=o(" \u2014 "),yK=a("a"),x$r=o("TFLongformerForMultipleChoice"),$$r=o(" (Longformer model)"),k$r=l(),P5=a("li"),s3e=a("strong"),S$r=o("mobilebert"),R$r=o(" \u2014 "),xK=a("a"),P$r=o("TFMobileBertForMultipleChoice"),B$r=o(" (MobileBERT model)"),I$r=l(),B5=a("li"),l3e=a("strong"),N$r=o("mpnet"),q$r=o(" \u2014 "),$K=a("a"),j$r=o("TFMPNetForMultipleChoice"),D$r=o(" (MPNet model)"),G$r=l(),I5=a("li"),i3e=a("strong"),O$r=o("rembert"),V$r=o(" \u2014 "),kK=a("a"),X$r=o("TFRemBertForMultipleChoice"),z$r=o(" (RemBERT model)"),Q$r=l(),N5=a("li"),d3e=a("strong"),W$r=o("roberta"),H$r=o(" \u2014 "),SK=a("a"),U$r=o("TFRobertaForMultipleChoice"),J$r=o(" (RoBERTa model)"),Y$r=l(),q5=a("li"),c3e=a("strong"),K$r=o("roformer"),Z$r=o(" \u2014 "),RK=a("a"),ekr=o("TFRoFormerForMultipleChoice"),okr=o(" (RoFormer model)"),rkr=l(),j5=a("li"),m3e=a("strong"),tkr=o("xlm"),akr=o(" \u2014 "),PK=a("a"),nkr=o("TFXLMForMultipleChoice"),skr=o(" (XLM model)"),lkr=l(),D5=a("li"),f3e=a("strong"),ikr=o("xlm-roberta"),dkr=o(" \u2014 "),BK=a("a"),ckr=o("TFXLMRobertaForMultipleChoice"),mkr=o(" (XLM-RoBERTa model)"),fkr=l(),G5=a("li"),g3e=a("strong"),gkr=o("xlnet"),hkr=o(" \u2014 "),IK=a("a"),ukr=o("TFXLNetForMultipleChoice"),pkr=o(" (XLNet model)"),_kr=l(),F(O5.$$.fragment),Fze=l(),$c=a("h2"),V5=a("a"),h3e=a("span"),F($x.$$.fragment),bkr=l(),u3e=a("span"),vkr=o("TFAutoModelForNextSentencePrediction"),Tze=l(),dr=a("div"),F(kx.$$.fragment),Fkr=l(),kc=a("p"),Tkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),NK=a("a"),Mkr=o("from_pretrained()"),Ekr=o(" class method or the "),qK=a("a"),Ckr=o("from_config()"),wkr=o(` class
method.`),Akr=l(),Sx=a("p"),Lkr=o("This class cannot be instantiated directly using "),p3e=a("code"),ykr=o("__init__()"),xkr=o(" (throws an error)."),$kr=l(),Gt=a("div"),F(Rx.$$.fragment),kkr=l(),_3e=a("p"),Skr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Rkr=l(),Sc=a("p"),Pkr=o(`Note:
Loading a model from its configuration file does `),b3e=a("strong"),Bkr=o("not"),Ikr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=a("a"),Nkr=o("from_pretrained()"),qkr=o(" to load the model weights."),jkr=l(),F(X5.$$.fragment),Dkr=l(),Nr=a("div"),F(Px.$$.fragment),Gkr=l(),v3e=a("p"),Okr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Vkr=l(),un=a("p"),Xkr=o("The model class to instantiate is selected based on the "),F3e=a("code"),zkr=o("model_type"),Qkr=o(` property of the config object (either
passed as an argument or loaded from `),T3e=a("code"),Wkr=o("pretrained_model_name_or_path"),Hkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M3e=a("code"),Ukr=o("pretrained_model_name_or_path"),Jkr=o(":"),Ykr=l(),Bx=a("ul"),z5=a("li"),E3e=a("strong"),Kkr=o("bert"),Zkr=o(" \u2014 "),DK=a("a"),eSr=o("TFBertForNextSentencePrediction"),oSr=o(" (BERT model)"),rSr=l(),Q5=a("li"),C3e=a("strong"),tSr=o("mobilebert"),aSr=o(" \u2014 "),GK=a("a"),nSr=o("TFMobileBertForNextSentencePrediction"),sSr=o(" (MobileBERT model)"),lSr=l(),F(W5.$$.fragment),Mze=l(),Rc=a("h2"),H5=a("a"),w3e=a("span"),F(Ix.$$.fragment),iSr=l(),A3e=a("span"),dSr=o("TFAutoModelForTableQuestionAnswering"),Eze=l(),cr=a("div"),F(Nx.$$.fragment),cSr=l(),Pc=a("p"),mSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),OK=a("a"),fSr=o("from_pretrained()"),gSr=o(" class method or the "),VK=a("a"),hSr=o("from_config()"),uSr=o(` class
method.`),pSr=l(),qx=a("p"),_Sr=o("This class cannot be instantiated directly using "),L3e=a("code"),bSr=o("__init__()"),vSr=o(" (throws an error)."),FSr=l(),Ot=a("div"),F(jx.$$.fragment),TSr=l(),y3e=a("p"),MSr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ESr=l(),Bc=a("p"),CSr=o(`Note:
Loading a model from its configuration file does `),x3e=a("strong"),wSr=o("not"),ASr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XK=a("a"),LSr=o("from_pretrained()"),ySr=o(" to load the model weights."),xSr=l(),F(U5.$$.fragment),$Sr=l(),qr=a("div"),F(Dx.$$.fragment),kSr=l(),$3e=a("p"),SSr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),RSr=l(),pn=a("p"),PSr=o("The model class to instantiate is selected based on the "),k3e=a("code"),BSr=o("model_type"),ISr=o(` property of the config object (either
passed as an argument or loaded from `),S3e=a("code"),NSr=o("pretrained_model_name_or_path"),qSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R3e=a("code"),jSr=o("pretrained_model_name_or_path"),DSr=o(":"),GSr=l(),P3e=a("ul"),J5=a("li"),B3e=a("strong"),OSr=o("tapas"),VSr=o(" \u2014 "),zK=a("a"),XSr=o("TFTapasForQuestionAnswering"),zSr=o(" (TAPAS model)"),QSr=l(),F(Y5.$$.fragment),Cze=l(),Ic=a("h2"),K5=a("a"),I3e=a("span"),F(Gx.$$.fragment),WSr=l(),N3e=a("span"),HSr=o("TFAutoModelForTokenClassification"),wze=l(),mr=a("div"),F(Ox.$$.fragment),USr=l(),Nc=a("p"),JSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),QK=a("a"),YSr=o("from_pretrained()"),KSr=o(" class method or the "),WK=a("a"),ZSr=o("from_config()"),eRr=o(` class
method.`),oRr=l(),Vx=a("p"),rRr=o("This class cannot be instantiated directly using "),q3e=a("code"),tRr=o("__init__()"),aRr=o(" (throws an error)."),nRr=l(),Vt=a("div"),F(Xx.$$.fragment),sRr=l(),j3e=a("p"),lRr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),iRr=l(),qc=a("p"),dRr=o(`Note:
Loading a model from its configuration file does `),D3e=a("strong"),cRr=o("not"),mRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=a("a"),fRr=o("from_pretrained()"),gRr=o(" to load the model weights."),hRr=l(),F(Z5.$$.fragment),uRr=l(),jr=a("div"),F(zx.$$.fragment),pRr=l(),G3e=a("p"),_Rr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),bRr=l(),_n=a("p"),vRr=o("The model class to instantiate is selected based on the "),O3e=a("code"),FRr=o("model_type"),TRr=o(` property of the config object (either
passed as an argument or loaded from `),V3e=a("code"),MRr=o("pretrained_model_name_or_path"),ERr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X3e=a("code"),CRr=o("pretrained_model_name_or_path"),wRr=o(":"),ARr=l(),de=a("ul"),e0=a("li"),z3e=a("strong"),LRr=o("albert"),yRr=o(" \u2014 "),UK=a("a"),xRr=o("TFAlbertForTokenClassification"),$Rr=o(" (ALBERT model)"),kRr=l(),o0=a("li"),Q3e=a("strong"),SRr=o("bert"),RRr=o(" \u2014 "),JK=a("a"),PRr=o("TFBertForTokenClassification"),BRr=o(" (BERT model)"),IRr=l(),r0=a("li"),W3e=a("strong"),NRr=o("camembert"),qRr=o(" \u2014 "),YK=a("a"),jRr=o("TFCamembertForTokenClassification"),DRr=o(" (CamemBERT model)"),GRr=l(),t0=a("li"),H3e=a("strong"),ORr=o("convbert"),VRr=o(" \u2014 "),KK=a("a"),XRr=o("TFConvBertForTokenClassification"),zRr=o(" (ConvBERT model)"),QRr=l(),a0=a("li"),U3e=a("strong"),WRr=o("deberta"),HRr=o(" \u2014 "),ZK=a("a"),URr=o("TFDebertaForTokenClassification"),JRr=o(" (DeBERTa model)"),YRr=l(),n0=a("li"),J3e=a("strong"),KRr=o("deberta-v2"),ZRr=o(" \u2014 "),eZ=a("a"),ePr=o("TFDebertaV2ForTokenClassification"),oPr=o(" (DeBERTa-v2 model)"),rPr=l(),s0=a("li"),Y3e=a("strong"),tPr=o("distilbert"),aPr=o(" \u2014 "),oZ=a("a"),nPr=o("TFDistilBertForTokenClassification"),sPr=o(" (DistilBERT model)"),lPr=l(),l0=a("li"),K3e=a("strong"),iPr=o("electra"),dPr=o(" \u2014 "),rZ=a("a"),cPr=o("TFElectraForTokenClassification"),mPr=o(" (ELECTRA model)"),fPr=l(),i0=a("li"),Z3e=a("strong"),gPr=o("flaubert"),hPr=o(" \u2014 "),tZ=a("a"),uPr=o("TFFlaubertForTokenClassification"),pPr=o(" (FlauBERT model)"),_Pr=l(),d0=a("li"),e5e=a("strong"),bPr=o("funnel"),vPr=o(" \u2014 "),aZ=a("a"),FPr=o("TFFunnelForTokenClassification"),TPr=o(" (Funnel Transformer model)"),MPr=l(),c0=a("li"),o5e=a("strong"),EPr=o("layoutlm"),CPr=o(" \u2014 "),nZ=a("a"),wPr=o("TFLayoutLMForTokenClassification"),APr=o(" (LayoutLM model)"),LPr=l(),m0=a("li"),r5e=a("strong"),yPr=o("longformer"),xPr=o(" \u2014 "),sZ=a("a"),$Pr=o("TFLongformerForTokenClassification"),kPr=o(" (Longformer model)"),SPr=l(),f0=a("li"),t5e=a("strong"),RPr=o("mobilebert"),PPr=o(" \u2014 "),lZ=a("a"),BPr=o("TFMobileBertForTokenClassification"),IPr=o(" (MobileBERT model)"),NPr=l(),g0=a("li"),a5e=a("strong"),qPr=o("mpnet"),jPr=o(" \u2014 "),iZ=a("a"),DPr=o("TFMPNetForTokenClassification"),GPr=o(" (MPNet model)"),OPr=l(),h0=a("li"),n5e=a("strong"),VPr=o("rembert"),XPr=o(" \u2014 "),dZ=a("a"),zPr=o("TFRemBertForTokenClassification"),QPr=o(" (RemBERT model)"),WPr=l(),u0=a("li"),s5e=a("strong"),HPr=o("roberta"),UPr=o(" \u2014 "),cZ=a("a"),JPr=o("TFRobertaForTokenClassification"),YPr=o(" (RoBERTa model)"),KPr=l(),p0=a("li"),l5e=a("strong"),ZPr=o("roformer"),eBr=o(" \u2014 "),mZ=a("a"),oBr=o("TFRoFormerForTokenClassification"),rBr=o(" (RoFormer model)"),tBr=l(),_0=a("li"),i5e=a("strong"),aBr=o("xlm"),nBr=o(" \u2014 "),fZ=a("a"),sBr=o("TFXLMForTokenClassification"),lBr=o(" (XLM model)"),iBr=l(),b0=a("li"),d5e=a("strong"),dBr=o("xlm-roberta"),cBr=o(" \u2014 "),gZ=a("a"),mBr=o("TFXLMRobertaForTokenClassification"),fBr=o(" (XLM-RoBERTa model)"),gBr=l(),v0=a("li"),c5e=a("strong"),hBr=o("xlnet"),uBr=o(" \u2014 "),hZ=a("a"),pBr=o("TFXLNetForTokenClassification"),_Br=o(" (XLNet model)"),bBr=l(),F(F0.$$.fragment),Aze=l(),jc=a("h2"),T0=a("a"),m5e=a("span"),F(Qx.$$.fragment),vBr=l(),f5e=a("span"),FBr=o("TFAutoModelForQuestionAnswering"),Lze=l(),fr=a("div"),F(Wx.$$.fragment),TBr=l(),Dc=a("p"),MBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uZ=a("a"),EBr=o("from_pretrained()"),CBr=o(" class method or the "),pZ=a("a"),wBr=o("from_config()"),ABr=o(` class
method.`),LBr=l(),Hx=a("p"),yBr=o("This class cannot be instantiated directly using "),g5e=a("code"),xBr=o("__init__()"),$Br=o(" (throws an error)."),kBr=l(),Xt=a("div"),F(Ux.$$.fragment),SBr=l(),h5e=a("p"),RBr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),PBr=l(),Gc=a("p"),BBr=o(`Note:
Loading a model from its configuration file does `),u5e=a("strong"),IBr=o("not"),NBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Z=a("a"),qBr=o("from_pretrained()"),jBr=o(" to load the model weights."),DBr=l(),F(M0.$$.fragment),GBr=l(),Dr=a("div"),F(Jx.$$.fragment),OBr=l(),p5e=a("p"),VBr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),XBr=l(),bn=a("p"),zBr=o("The model class to instantiate is selected based on the "),_5e=a("code"),QBr=o("model_type"),WBr=o(` property of the config object (either
passed as an argument or loaded from `),b5e=a("code"),HBr=o("pretrained_model_name_or_path"),UBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v5e=a("code"),JBr=o("pretrained_model_name_or_path"),YBr=o(":"),KBr=l(),ce=a("ul"),E0=a("li"),F5e=a("strong"),ZBr=o("albert"),eIr=o(" \u2014 "),bZ=a("a"),oIr=o("TFAlbertForQuestionAnswering"),rIr=o(" (ALBERT model)"),tIr=l(),C0=a("li"),T5e=a("strong"),aIr=o("bert"),nIr=o(" \u2014 "),vZ=a("a"),sIr=o("TFBertForQuestionAnswering"),lIr=o(" (BERT model)"),iIr=l(),w0=a("li"),M5e=a("strong"),dIr=o("camembert"),cIr=o(" \u2014 "),FZ=a("a"),mIr=o("TFCamembertForQuestionAnswering"),fIr=o(" (CamemBERT model)"),gIr=l(),A0=a("li"),E5e=a("strong"),hIr=o("convbert"),uIr=o(" \u2014 "),TZ=a("a"),pIr=o("TFConvBertForQuestionAnswering"),_Ir=o(" (ConvBERT model)"),bIr=l(),L0=a("li"),C5e=a("strong"),vIr=o("deberta"),FIr=o(" \u2014 "),MZ=a("a"),TIr=o("TFDebertaForQuestionAnswering"),MIr=o(" (DeBERTa model)"),EIr=l(),y0=a("li"),w5e=a("strong"),CIr=o("deberta-v2"),wIr=o(" \u2014 "),EZ=a("a"),AIr=o("TFDebertaV2ForQuestionAnswering"),LIr=o(" (DeBERTa-v2 model)"),yIr=l(),x0=a("li"),A5e=a("strong"),xIr=o("distilbert"),$Ir=o(" \u2014 "),CZ=a("a"),kIr=o("TFDistilBertForQuestionAnswering"),SIr=o(" (DistilBERT model)"),RIr=l(),$0=a("li"),L5e=a("strong"),PIr=o("electra"),BIr=o(" \u2014 "),wZ=a("a"),IIr=o("TFElectraForQuestionAnswering"),NIr=o(" (ELECTRA model)"),qIr=l(),k0=a("li"),y5e=a("strong"),jIr=o("flaubert"),DIr=o(" \u2014 "),AZ=a("a"),GIr=o("TFFlaubertForQuestionAnsweringSimple"),OIr=o(" (FlauBERT model)"),VIr=l(),S0=a("li"),x5e=a("strong"),XIr=o("funnel"),zIr=o(" \u2014 "),LZ=a("a"),QIr=o("TFFunnelForQuestionAnswering"),WIr=o(" (Funnel Transformer model)"),HIr=l(),R0=a("li"),$5e=a("strong"),UIr=o("gptj"),JIr=o(" \u2014 "),yZ=a("a"),YIr=o("TFGPTJForQuestionAnswering"),KIr=o(" (GPT-J model)"),ZIr=l(),P0=a("li"),k5e=a("strong"),eNr=o("longformer"),oNr=o(" \u2014 "),xZ=a("a"),rNr=o("TFLongformerForQuestionAnswering"),tNr=o(" (Longformer model)"),aNr=l(),B0=a("li"),S5e=a("strong"),nNr=o("mobilebert"),sNr=o(" \u2014 "),$Z=a("a"),lNr=o("TFMobileBertForQuestionAnswering"),iNr=o(" (MobileBERT model)"),dNr=l(),I0=a("li"),R5e=a("strong"),cNr=o("mpnet"),mNr=o(" \u2014 "),kZ=a("a"),fNr=o("TFMPNetForQuestionAnswering"),gNr=o(" (MPNet model)"),hNr=l(),N0=a("li"),P5e=a("strong"),uNr=o("rembert"),pNr=o(" \u2014 "),SZ=a("a"),_Nr=o("TFRemBertForQuestionAnswering"),bNr=o(" (RemBERT model)"),vNr=l(),q0=a("li"),B5e=a("strong"),FNr=o("roberta"),TNr=o(" \u2014 "),RZ=a("a"),MNr=o("TFRobertaForQuestionAnswering"),ENr=o(" (RoBERTa model)"),CNr=l(),j0=a("li"),I5e=a("strong"),wNr=o("roformer"),ANr=o(" \u2014 "),PZ=a("a"),LNr=o("TFRoFormerForQuestionAnswering"),yNr=o(" (RoFormer model)"),xNr=l(),D0=a("li"),N5e=a("strong"),$Nr=o("xlm"),kNr=o(" \u2014 "),BZ=a("a"),SNr=o("TFXLMForQuestionAnsweringSimple"),RNr=o(" (XLM model)"),PNr=l(),G0=a("li"),q5e=a("strong"),BNr=o("xlm-roberta"),INr=o(" \u2014 "),IZ=a("a"),NNr=o("TFXLMRobertaForQuestionAnswering"),qNr=o(" (XLM-RoBERTa model)"),jNr=l(),O0=a("li"),j5e=a("strong"),DNr=o("xlnet"),GNr=o(" \u2014 "),NZ=a("a"),ONr=o("TFXLNetForQuestionAnsweringSimple"),VNr=o(" (XLNet model)"),XNr=l(),F(V0.$$.fragment),yze=l(),Oc=a("h2"),X0=a("a"),D5e=a("span"),F(Yx.$$.fragment),zNr=l(),G5e=a("span"),QNr=o("TFAutoModelForVision2Seq"),xze=l(),gr=a("div"),F(Kx.$$.fragment),WNr=l(),Vc=a("p"),HNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qZ=a("a"),UNr=o("from_pretrained()"),JNr=o(" class method or the "),jZ=a("a"),YNr=o("from_config()"),KNr=o(` class
method.`),ZNr=l(),Zx=a("p"),eqr=o("This class cannot be instantiated directly using "),O5e=a("code"),oqr=o("__init__()"),rqr=o(" (throws an error)."),tqr=l(),zt=a("div"),F(e$.$$.fragment),aqr=l(),V5e=a("p"),nqr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),sqr=l(),Xc=a("p"),lqr=o(`Note:
Loading a model from its configuration file does `),X5e=a("strong"),iqr=o("not"),dqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DZ=a("a"),cqr=o("from_pretrained()"),mqr=o(" to load the model weights."),fqr=l(),F(z0.$$.fragment),gqr=l(),Gr=a("div"),F(o$.$$.fragment),hqr=l(),z5e=a("p"),uqr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),pqr=l(),vn=a("p"),_qr=o("The model class to instantiate is selected based on the "),Q5e=a("code"),bqr=o("model_type"),vqr=o(` property of the config object (either
passed as an argument or loaded from `),W5e=a("code"),Fqr=o("pretrained_model_name_or_path"),Tqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H5e=a("code"),Mqr=o("pretrained_model_name_or_path"),Eqr=o(":"),Cqr=l(),U5e=a("ul"),Q0=a("li"),J5e=a("strong"),wqr=o("vision-encoder-decoder"),Aqr=o(" \u2014 "),GZ=a("a"),Lqr=o("TFVisionEncoderDecoderModel"),yqr=o(" (Vision Encoder decoder model)"),xqr=l(),F(W0.$$.fragment),$ze=l(),zc=a("h2"),H0=a("a"),Y5e=a("span"),F(r$.$$.fragment),$qr=l(),K5e=a("span"),kqr=o("TFAutoModelForSpeechSeq2Seq"),kze=l(),hr=a("div"),F(t$.$$.fragment),Sqr=l(),Qc=a("p"),Rqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),OZ=a("a"),Pqr=o("from_pretrained()"),Bqr=o(" class method or the "),VZ=a("a"),Iqr=o("from_config()"),Nqr=o(` class
method.`),qqr=l(),a$=a("p"),jqr=o("This class cannot be instantiated directly using "),Z5e=a("code"),Dqr=o("__init__()"),Gqr=o(" (throws an error)."),Oqr=l(),Qt=a("div"),F(n$.$$.fragment),Vqr=l(),e0e=a("p"),Xqr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),zqr=l(),Wc=a("p"),Qqr=o(`Note:
Loading a model from its configuration file does `),o0e=a("strong"),Wqr=o("not"),Hqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XZ=a("a"),Uqr=o("from_pretrained()"),Jqr=o(" to load the model weights."),Yqr=l(),F(U0.$$.fragment),Kqr=l(),Or=a("div"),F(s$.$$.fragment),Zqr=l(),r0e=a("p"),ejr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ojr=l(),Fn=a("p"),rjr=o("The model class to instantiate is selected based on the "),t0e=a("code"),tjr=o("model_type"),ajr=o(` property of the config object (either
passed as an argument or loaded from `),a0e=a("code"),njr=o("pretrained_model_name_or_path"),sjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n0e=a("code"),ljr=o("pretrained_model_name_or_path"),ijr=o(":"),djr=l(),s0e=a("ul"),J0=a("li"),l0e=a("strong"),cjr=o("speech_to_text"),mjr=o(" \u2014 "),zZ=a("a"),fjr=o("TFSpeech2TextForConditionalGeneration"),gjr=o(" (Speech2Text model)"),hjr=l(),F(Y0.$$.fragment),Sze=l(),Hc=a("h2"),K0=a("a"),i0e=a("span"),F(l$.$$.fragment),ujr=l(),d0e=a("span"),pjr=o("FlaxAutoModel"),Rze=l(),ur=a("div"),F(i$.$$.fragment),_jr=l(),Uc=a("p"),bjr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),QZ=a("a"),vjr=o("from_pretrained()"),Fjr=o(" class method or the "),WZ=a("a"),Tjr=o("from_config()"),Mjr=o(` class
method.`),Ejr=l(),d$=a("p"),Cjr=o("This class cannot be instantiated directly using "),c0e=a("code"),wjr=o("__init__()"),Ajr=o(" (throws an error)."),Ljr=l(),Wt=a("div"),F(c$.$$.fragment),yjr=l(),m0e=a("p"),xjr=o("Instantiates one of the base model classes of the library from a configuration."),$jr=l(),Jc=a("p"),kjr=o(`Note:
Loading a model from its configuration file does `),f0e=a("strong"),Sjr=o("not"),Rjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HZ=a("a"),Pjr=o("from_pretrained()"),Bjr=o(" to load the model weights."),Ijr=l(),F(Z0.$$.fragment),Njr=l(),Vr=a("div"),F(m$.$$.fragment),qjr=l(),g0e=a("p"),jjr=o("Instantiate one of the base model classes of the library from a pretrained model."),Djr=l(),Tn=a("p"),Gjr=o("The model class to instantiate is selected based on the "),h0e=a("code"),Ojr=o("model_type"),Vjr=o(` property of the config object (either
passed as an argument or loaded from `),u0e=a("code"),Xjr=o("pretrained_model_name_or_path"),zjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p0e=a("code"),Qjr=o("pretrained_model_name_or_path"),Wjr=o(":"),Hjr=l(),oe=a("ul"),ew=a("li"),_0e=a("strong"),Ujr=o("albert"),Jjr=o(" \u2014 "),UZ=a("a"),Yjr=o("FlaxAlbertModel"),Kjr=o(" (ALBERT model)"),Zjr=l(),ow=a("li"),b0e=a("strong"),eDr=o("bart"),oDr=o(" \u2014 "),JZ=a("a"),rDr=o("FlaxBartModel"),tDr=o(" (BART model)"),aDr=l(),rw=a("li"),v0e=a("strong"),nDr=o("beit"),sDr=o(" \u2014 "),YZ=a("a"),lDr=o("FlaxBeitModel"),iDr=o(" (BEiT model)"),dDr=l(),tw=a("li"),F0e=a("strong"),cDr=o("bert"),mDr=o(" \u2014 "),KZ=a("a"),fDr=o("FlaxBertModel"),gDr=o(" (BERT model)"),hDr=l(),aw=a("li"),T0e=a("strong"),uDr=o("big_bird"),pDr=o(" \u2014 "),ZZ=a("a"),_Dr=o("FlaxBigBirdModel"),bDr=o(" (BigBird model)"),vDr=l(),nw=a("li"),M0e=a("strong"),FDr=o("blenderbot"),TDr=o(" \u2014 "),eee=a("a"),MDr=o("FlaxBlenderbotModel"),EDr=o(" (Blenderbot model)"),CDr=l(),sw=a("li"),E0e=a("strong"),wDr=o("blenderbot-small"),ADr=o(" \u2014 "),oee=a("a"),LDr=o("FlaxBlenderbotSmallModel"),yDr=o(" (BlenderbotSmall model)"),xDr=l(),lw=a("li"),C0e=a("strong"),$Dr=o("clip"),kDr=o(" \u2014 "),ree=a("a"),SDr=o("FlaxCLIPModel"),RDr=o(" (CLIP model)"),PDr=l(),iw=a("li"),w0e=a("strong"),BDr=o("distilbert"),IDr=o(" \u2014 "),tee=a("a"),NDr=o("FlaxDistilBertModel"),qDr=o(" (DistilBERT model)"),jDr=l(),dw=a("li"),A0e=a("strong"),DDr=o("electra"),GDr=o(" \u2014 "),aee=a("a"),ODr=o("FlaxElectraModel"),VDr=o(" (ELECTRA model)"),XDr=l(),cw=a("li"),L0e=a("strong"),zDr=o("gpt2"),QDr=o(" \u2014 "),nee=a("a"),WDr=o("FlaxGPT2Model"),HDr=o(" (OpenAI GPT-2 model)"),UDr=l(),mw=a("li"),y0e=a("strong"),JDr=o("gpt_neo"),YDr=o(" \u2014 "),see=a("a"),KDr=o("FlaxGPTNeoModel"),ZDr=o(" (GPT Neo model)"),eGr=l(),fw=a("li"),x0e=a("strong"),oGr=o("gptj"),rGr=o(" \u2014 "),lee=a("a"),tGr=o("FlaxGPTJModel"),aGr=o(" (GPT-J model)"),nGr=l(),gw=a("li"),$0e=a("strong"),sGr=o("longt5"),lGr=o(" \u2014 "),iee=a("a"),iGr=o("FlaxLongT5Model"),dGr=o(" (LongT5 model)"),cGr=l(),hw=a("li"),k0e=a("strong"),mGr=o("marian"),fGr=o(" \u2014 "),dee=a("a"),gGr=o("FlaxMarianModel"),hGr=o(" (Marian model)"),uGr=l(),uw=a("li"),S0e=a("strong"),pGr=o("mbart"),_Gr=o(" \u2014 "),cee=a("a"),bGr=o("FlaxMBartModel"),vGr=o(" (mBART model)"),FGr=l(),pw=a("li"),R0e=a("strong"),TGr=o("mt5"),MGr=o(" \u2014 "),mee=a("a"),EGr=o("FlaxMT5Model"),CGr=o(" (MT5 model)"),wGr=l(),_w=a("li"),P0e=a("strong"),AGr=o("opt"),LGr=o(" \u2014 "),fee=a("a"),yGr=o("FlaxOPTModel"),xGr=o(" (OPT model)"),$Gr=l(),bw=a("li"),B0e=a("strong"),kGr=o("pegasus"),SGr=o(" \u2014 "),gee=a("a"),RGr=o("FlaxPegasusModel"),PGr=o(" (Pegasus model)"),BGr=l(),vw=a("li"),I0e=a("strong"),IGr=o("roberta"),NGr=o(" \u2014 "),hee=a("a"),qGr=o("FlaxRobertaModel"),jGr=o(" (RoBERTa model)"),DGr=l(),Fw=a("li"),N0e=a("strong"),GGr=o("roformer"),OGr=o(" \u2014 "),uee=a("a"),VGr=o("FlaxRoFormerModel"),XGr=o(" (RoFormer model)"),zGr=l(),Tw=a("li"),q0e=a("strong"),QGr=o("t5"),WGr=o(" \u2014 "),pee=a("a"),HGr=o("FlaxT5Model"),UGr=o(" (T5 model)"),JGr=l(),Mw=a("li"),j0e=a("strong"),YGr=o("vision-text-dual-encoder"),KGr=o(" \u2014 "),_ee=a("a"),ZGr=o("FlaxVisionTextDualEncoderModel"),eOr=o(" (VisionTextDualEncoder model)"),oOr=l(),Ew=a("li"),D0e=a("strong"),rOr=o("vit"),tOr=o(" \u2014 "),bee=a("a"),aOr=o("FlaxViTModel"),nOr=o(" (ViT model)"),sOr=l(),Cw=a("li"),G0e=a("strong"),lOr=o("wav2vec2"),iOr=o(" \u2014 "),vee=a("a"),dOr=o("FlaxWav2Vec2Model"),cOr=o(" (Wav2Vec2 model)"),mOr=l(),ww=a("li"),O0e=a("strong"),fOr=o("xglm"),gOr=o(" \u2014 "),Fee=a("a"),hOr=o("FlaxXGLMModel"),uOr=o(" (XGLM model)"),pOr=l(),Aw=a("li"),V0e=a("strong"),_Or=o("xlm-roberta"),bOr=o(" \u2014 "),Tee=a("a"),vOr=o("FlaxXLMRobertaModel"),FOr=o(" (XLM-RoBERTa model)"),TOr=l(),F(Lw.$$.fragment),Pze=l(),Yc=a("h2"),yw=a("a"),X0e=a("span"),F(f$.$$.fragment),MOr=l(),z0e=a("span"),EOr=o("FlaxAutoModelForCausalLM"),Bze=l(),pr=a("div"),F(g$.$$.fragment),COr=l(),Kc=a("p"),wOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Mee=a("a"),AOr=o("from_pretrained()"),LOr=o(" class method or the "),Eee=a("a"),yOr=o("from_config()"),xOr=o(` class
method.`),$Or=l(),h$=a("p"),kOr=o("This class cannot be instantiated directly using "),Q0e=a("code"),SOr=o("__init__()"),ROr=o(" (throws an error)."),POr=l(),Ht=a("div"),F(u$.$$.fragment),BOr=l(),W0e=a("p"),IOr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),NOr=l(),Zc=a("p"),qOr=o(`Note:
Loading a model from its configuration file does `),H0e=a("strong"),jOr=o("not"),DOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cee=a("a"),GOr=o("from_pretrained()"),OOr=o(" to load the model weights."),VOr=l(),F(xw.$$.fragment),XOr=l(),Xr=a("div"),F(p$.$$.fragment),zOr=l(),U0e=a("p"),QOr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),WOr=l(),Mn=a("p"),HOr=o("The model class to instantiate is selected based on the "),J0e=a("code"),UOr=o("model_type"),JOr=o(` property of the config object (either
passed as an argument or loaded from `),Y0e=a("code"),YOr=o("pretrained_model_name_or_path"),KOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K0e=a("code"),ZOr=o("pretrained_model_name_or_path"),eVr=o(":"),oVr=l(),xe=a("ul"),$w=a("li"),Z0e=a("strong"),rVr=o("bart"),tVr=o(" \u2014 "),wee=a("a"),aVr=o("FlaxBartForCausalLM"),nVr=o(" (BART model)"),sVr=l(),kw=a("li"),ewe=a("strong"),lVr=o("bert"),iVr=o(" \u2014 "),Aee=a("a"),dVr=o("FlaxBertForCausalLM"),cVr=o(" (BERT model)"),mVr=l(),Sw=a("li"),owe=a("strong"),fVr=o("big_bird"),gVr=o(" \u2014 "),Lee=a("a"),hVr=o("FlaxBigBirdForCausalLM"),uVr=o(" (BigBird model)"),pVr=l(),Rw=a("li"),rwe=a("strong"),_Vr=o("electra"),bVr=o(" \u2014 "),yee=a("a"),vVr=o("FlaxElectraForCausalLM"),FVr=o(" (ELECTRA model)"),TVr=l(),Pw=a("li"),twe=a("strong"),MVr=o("gpt2"),EVr=o(" \u2014 "),xee=a("a"),CVr=o("FlaxGPT2LMHeadModel"),wVr=o(" (OpenAI GPT-2 model)"),AVr=l(),Bw=a("li"),awe=a("strong"),LVr=o("gpt_neo"),yVr=o(" \u2014 "),$ee=a("a"),xVr=o("FlaxGPTNeoForCausalLM"),$Vr=o(" (GPT Neo model)"),kVr=l(),Iw=a("li"),nwe=a("strong"),SVr=o("gptj"),RVr=o(" \u2014 "),kee=a("a"),PVr=o("FlaxGPTJForCausalLM"),BVr=o(" (GPT-J model)"),IVr=l(),Nw=a("li"),swe=a("strong"),NVr=o("opt"),qVr=o(" \u2014 "),See=a("a"),jVr=o("FlaxOPTForCausalLM"),DVr=o(" (OPT model)"),GVr=l(),qw=a("li"),lwe=a("strong"),OVr=o("roberta"),VVr=o(" \u2014 "),Ree=a("a"),XVr=o("FlaxRobertaForCausalLM"),zVr=o(" (RoBERTa model)"),QVr=l(),jw=a("li"),iwe=a("strong"),WVr=o("xglm"),HVr=o(" \u2014 "),Pee=a("a"),UVr=o("FlaxXGLMForCausalLM"),JVr=o(" (XGLM model)"),YVr=l(),F(Dw.$$.fragment),Ize=l(),em=a("h2"),Gw=a("a"),dwe=a("span"),F(_$.$$.fragment),KVr=l(),cwe=a("span"),ZVr=o("FlaxAutoModelForPreTraining"),Nze=l(),_r=a("div"),F(b$.$$.fragment),eXr=l(),om=a("p"),oXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Bee=a("a"),rXr=o("from_pretrained()"),tXr=o(" class method or the "),Iee=a("a"),aXr=o("from_config()"),nXr=o(` class
method.`),sXr=l(),v$=a("p"),lXr=o("This class cannot be instantiated directly using "),mwe=a("code"),iXr=o("__init__()"),dXr=o(" (throws an error)."),cXr=l(),Ut=a("div"),F(F$.$$.fragment),mXr=l(),fwe=a("p"),fXr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),gXr=l(),rm=a("p"),hXr=o(`Note:
Loading a model from its configuration file does `),gwe=a("strong"),uXr=o("not"),pXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nee=a("a"),_Xr=o("from_pretrained()"),bXr=o(" to load the model weights."),vXr=l(),F(Ow.$$.fragment),FXr=l(),zr=a("div"),F(T$.$$.fragment),TXr=l(),hwe=a("p"),MXr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),EXr=l(),En=a("p"),CXr=o("The model class to instantiate is selected based on the "),uwe=a("code"),wXr=o("model_type"),AXr=o(` property of the config object (either
passed as an argument or loaded from `),pwe=a("code"),LXr=o("pretrained_model_name_or_path"),yXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_we=a("code"),xXr=o("pretrained_model_name_or_path"),$Xr=o(":"),kXr=l(),Ee=a("ul"),Vw=a("li"),bwe=a("strong"),SXr=o("albert"),RXr=o(" \u2014 "),qee=a("a"),PXr=o("FlaxAlbertForPreTraining"),BXr=o(" (ALBERT model)"),IXr=l(),Xw=a("li"),vwe=a("strong"),NXr=o("bart"),qXr=o(" \u2014 "),jee=a("a"),jXr=o("FlaxBartForConditionalGeneration"),DXr=o(" (BART model)"),GXr=l(),zw=a("li"),Fwe=a("strong"),OXr=o("bert"),VXr=o(" \u2014 "),Dee=a("a"),XXr=o("FlaxBertForPreTraining"),zXr=o(" (BERT model)"),QXr=l(),Qw=a("li"),Twe=a("strong"),WXr=o("big_bird"),HXr=o(" \u2014 "),Gee=a("a"),UXr=o("FlaxBigBirdForPreTraining"),JXr=o(" (BigBird model)"),YXr=l(),Ww=a("li"),Mwe=a("strong"),KXr=o("electra"),ZXr=o(" \u2014 "),Oee=a("a"),ezr=o("FlaxElectraForPreTraining"),ozr=o(" (ELECTRA model)"),rzr=l(),Hw=a("li"),Ewe=a("strong"),tzr=o("longt5"),azr=o(" \u2014 "),Vee=a("a"),nzr=o("FlaxLongT5ForConditionalGeneration"),szr=o(" (LongT5 model)"),lzr=l(),Uw=a("li"),Cwe=a("strong"),izr=o("mbart"),dzr=o(" \u2014 "),Xee=a("a"),czr=o("FlaxMBartForConditionalGeneration"),mzr=o(" (mBART model)"),fzr=l(),Jw=a("li"),wwe=a("strong"),gzr=o("mt5"),hzr=o(" \u2014 "),zee=a("a"),uzr=o("FlaxMT5ForConditionalGeneration"),pzr=o(" (MT5 model)"),_zr=l(),Yw=a("li"),Awe=a("strong"),bzr=o("roberta"),vzr=o(" \u2014 "),Qee=a("a"),Fzr=o("FlaxRobertaForMaskedLM"),Tzr=o(" (RoBERTa model)"),Mzr=l(),Kw=a("li"),Lwe=a("strong"),Ezr=o("roformer"),Czr=o(" \u2014 "),Wee=a("a"),wzr=o("FlaxRoFormerForMaskedLM"),Azr=o(" (RoFormer model)"),Lzr=l(),Zw=a("li"),ywe=a("strong"),yzr=o("t5"),xzr=o(" \u2014 "),Hee=a("a"),$zr=o("FlaxT5ForConditionalGeneration"),kzr=o(" (T5 model)"),Szr=l(),eA=a("li"),xwe=a("strong"),Rzr=o("wav2vec2"),Pzr=o(" \u2014 "),Uee=a("a"),Bzr=o("FlaxWav2Vec2ForPreTraining"),Izr=o(" (Wav2Vec2 model)"),Nzr=l(),oA=a("li"),$we=a("strong"),qzr=o("xlm-roberta"),jzr=o(" \u2014 "),Jee=a("a"),Dzr=o("FlaxXLMRobertaForMaskedLM"),Gzr=o(" (XLM-RoBERTa model)"),Ozr=l(),F(rA.$$.fragment),qze=l(),tm=a("h2"),tA=a("a"),kwe=a("span"),F(M$.$$.fragment),Vzr=l(),Swe=a("span"),Xzr=o("FlaxAutoModelForMaskedLM"),jze=l(),br=a("div"),F(E$.$$.fragment),zzr=l(),am=a("p"),Qzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Yee=a("a"),Wzr=o("from_pretrained()"),Hzr=o(" class method or the "),Kee=a("a"),Uzr=o("from_config()"),Jzr=o(` class
method.`),Yzr=l(),C$=a("p"),Kzr=o("This class cannot be instantiated directly using "),Rwe=a("code"),Zzr=o("__init__()"),eQr=o(" (throws an error)."),oQr=l(),Jt=a("div"),F(w$.$$.fragment),rQr=l(),Pwe=a("p"),tQr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),aQr=l(),nm=a("p"),nQr=o(`Note:
Loading a model from its configuration file does `),Bwe=a("strong"),sQr=o("not"),lQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zee=a("a"),iQr=o("from_pretrained()"),dQr=o(" to load the model weights."),cQr=l(),F(aA.$$.fragment),mQr=l(),Qr=a("div"),F(A$.$$.fragment),fQr=l(),Iwe=a("p"),gQr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),hQr=l(),Cn=a("p"),uQr=o("The model class to instantiate is selected based on the "),Nwe=a("code"),pQr=o("model_type"),_Qr=o(` property of the config object (either
passed as an argument or loaded from `),qwe=a("code"),bQr=o("pretrained_model_name_or_path"),vQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jwe=a("code"),FQr=o("pretrained_model_name_or_path"),TQr=o(":"),MQr=l(),$e=a("ul"),nA=a("li"),Dwe=a("strong"),EQr=o("albert"),CQr=o(" \u2014 "),eoe=a("a"),wQr=o("FlaxAlbertForMaskedLM"),AQr=o(" (ALBERT model)"),LQr=l(),sA=a("li"),Gwe=a("strong"),yQr=o("bart"),xQr=o(" \u2014 "),ooe=a("a"),$Qr=o("FlaxBartForConditionalGeneration"),kQr=o(" (BART model)"),SQr=l(),lA=a("li"),Owe=a("strong"),RQr=o("bert"),PQr=o(" \u2014 "),roe=a("a"),BQr=o("FlaxBertForMaskedLM"),IQr=o(" (BERT model)"),NQr=l(),iA=a("li"),Vwe=a("strong"),qQr=o("big_bird"),jQr=o(" \u2014 "),toe=a("a"),DQr=o("FlaxBigBirdForMaskedLM"),GQr=o(" (BigBird model)"),OQr=l(),dA=a("li"),Xwe=a("strong"),VQr=o("distilbert"),XQr=o(" \u2014 "),aoe=a("a"),zQr=o("FlaxDistilBertForMaskedLM"),QQr=o(" (DistilBERT model)"),WQr=l(),cA=a("li"),zwe=a("strong"),HQr=o("electra"),UQr=o(" \u2014 "),noe=a("a"),JQr=o("FlaxElectraForMaskedLM"),YQr=o(" (ELECTRA model)"),KQr=l(),mA=a("li"),Qwe=a("strong"),ZQr=o("mbart"),eWr=o(" \u2014 "),soe=a("a"),oWr=o("FlaxMBartForConditionalGeneration"),rWr=o(" (mBART model)"),tWr=l(),fA=a("li"),Wwe=a("strong"),aWr=o("roberta"),nWr=o(" \u2014 "),loe=a("a"),sWr=o("FlaxRobertaForMaskedLM"),lWr=o(" (RoBERTa model)"),iWr=l(),gA=a("li"),Hwe=a("strong"),dWr=o("roformer"),cWr=o(" \u2014 "),ioe=a("a"),mWr=o("FlaxRoFormerForMaskedLM"),fWr=o(" (RoFormer model)"),gWr=l(),hA=a("li"),Uwe=a("strong"),hWr=o("xlm-roberta"),uWr=o(" \u2014 "),doe=a("a"),pWr=o("FlaxXLMRobertaForMaskedLM"),_Wr=o(" (XLM-RoBERTa model)"),bWr=l(),F(uA.$$.fragment),Dze=l(),sm=a("h2"),pA=a("a"),Jwe=a("span"),F(L$.$$.fragment),vWr=l(),Ywe=a("span"),FWr=o("FlaxAutoModelForSeq2SeqLM"),Gze=l(),vr=a("div"),F(y$.$$.fragment),TWr=l(),lm=a("p"),MWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),coe=a("a"),EWr=o("from_pretrained()"),CWr=o(" class method or the "),moe=a("a"),wWr=o("from_config()"),AWr=o(` class
method.`),LWr=l(),x$=a("p"),yWr=o("This class cannot be instantiated directly using "),Kwe=a("code"),xWr=o("__init__()"),$Wr=o(" (throws an error)."),kWr=l(),Yt=a("div"),F($$.$$.fragment),SWr=l(),Zwe=a("p"),RWr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),PWr=l(),im=a("p"),BWr=o(`Note:
Loading a model from its configuration file does `),eAe=a("strong"),IWr=o("not"),NWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),foe=a("a"),qWr=o("from_pretrained()"),jWr=o(" to load the model weights."),DWr=l(),F(_A.$$.fragment),GWr=l(),Wr=a("div"),F(k$.$$.fragment),OWr=l(),oAe=a("p"),VWr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),XWr=l(),wn=a("p"),zWr=o("The model class to instantiate is selected based on the "),rAe=a("code"),QWr=o("model_type"),WWr=o(` property of the config object (either
passed as an argument or loaded from `),tAe=a("code"),HWr=o("pretrained_model_name_or_path"),UWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aAe=a("code"),JWr=o("pretrained_model_name_or_path"),YWr=o(":"),KWr=l(),ke=a("ul"),bA=a("li"),nAe=a("strong"),ZWr=o("bart"),eHr=o(" \u2014 "),goe=a("a"),oHr=o("FlaxBartForConditionalGeneration"),rHr=o(" (BART model)"),tHr=l(),vA=a("li"),sAe=a("strong"),aHr=o("blenderbot"),nHr=o(" \u2014 "),hoe=a("a"),sHr=o("FlaxBlenderbotForConditionalGeneration"),lHr=o(" (Blenderbot model)"),iHr=l(),FA=a("li"),lAe=a("strong"),dHr=o("blenderbot-small"),cHr=o(" \u2014 "),uoe=a("a"),mHr=o("FlaxBlenderbotSmallForConditionalGeneration"),fHr=o(" (BlenderbotSmall model)"),gHr=l(),TA=a("li"),iAe=a("strong"),hHr=o("encoder-decoder"),uHr=o(" \u2014 "),poe=a("a"),pHr=o("FlaxEncoderDecoderModel"),_Hr=o(" (Encoder decoder model)"),bHr=l(),MA=a("li"),dAe=a("strong"),vHr=o("longt5"),FHr=o(" \u2014 "),_oe=a("a"),THr=o("FlaxLongT5ForConditionalGeneration"),MHr=o(" (LongT5 model)"),EHr=l(),EA=a("li"),cAe=a("strong"),CHr=o("marian"),wHr=o(" \u2014 "),boe=a("a"),AHr=o("FlaxMarianMTModel"),LHr=o(" (Marian model)"),yHr=l(),CA=a("li"),mAe=a("strong"),xHr=o("mbart"),$Hr=o(" \u2014 "),voe=a("a"),kHr=o("FlaxMBartForConditionalGeneration"),SHr=o(" (mBART model)"),RHr=l(),wA=a("li"),fAe=a("strong"),PHr=o("mt5"),BHr=o(" \u2014 "),Foe=a("a"),IHr=o("FlaxMT5ForConditionalGeneration"),NHr=o(" (MT5 model)"),qHr=l(),AA=a("li"),gAe=a("strong"),jHr=o("pegasus"),DHr=o(" \u2014 "),Toe=a("a"),GHr=o("FlaxPegasusForConditionalGeneration"),OHr=o(" (Pegasus model)"),VHr=l(),LA=a("li"),hAe=a("strong"),XHr=o("t5"),zHr=o(" \u2014 "),Moe=a("a"),QHr=o("FlaxT5ForConditionalGeneration"),WHr=o(" (T5 model)"),HHr=l(),F(yA.$$.fragment),Oze=l(),dm=a("h2"),xA=a("a"),uAe=a("span"),F(S$.$$.fragment),UHr=l(),pAe=a("span"),JHr=o("FlaxAutoModelForSequenceClassification"),Vze=l(),Fr=a("div"),F(R$.$$.fragment),YHr=l(),cm=a("p"),KHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Eoe=a("a"),ZHr=o("from_pretrained()"),eUr=o(" class method or the "),Coe=a("a"),oUr=o("from_config()"),rUr=o(` class
method.`),tUr=l(),P$=a("p"),aUr=o("This class cannot be instantiated directly using "),_Ae=a("code"),nUr=o("__init__()"),sUr=o(" (throws an error)."),lUr=l(),Kt=a("div"),F(B$.$$.fragment),iUr=l(),bAe=a("p"),dUr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),cUr=l(),mm=a("p"),mUr=o(`Note:
Loading a model from its configuration file does `),vAe=a("strong"),fUr=o("not"),gUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),woe=a("a"),hUr=o("from_pretrained()"),uUr=o(" to load the model weights."),pUr=l(),F($A.$$.fragment),_Ur=l(),Hr=a("div"),F(I$.$$.fragment),bUr=l(),FAe=a("p"),vUr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),FUr=l(),An=a("p"),TUr=o("The model class to instantiate is selected based on the "),TAe=a("code"),MUr=o("model_type"),EUr=o(` property of the config object (either
passed as an argument or loaded from `),MAe=a("code"),CUr=o("pretrained_model_name_or_path"),wUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EAe=a("code"),AUr=o("pretrained_model_name_or_path"),LUr=o(":"),yUr=l(),Se=a("ul"),kA=a("li"),CAe=a("strong"),xUr=o("albert"),$Ur=o(" \u2014 "),Aoe=a("a"),kUr=o("FlaxAlbertForSequenceClassification"),SUr=o(" (ALBERT model)"),RUr=l(),SA=a("li"),wAe=a("strong"),PUr=o("bart"),BUr=o(" \u2014 "),Loe=a("a"),IUr=o("FlaxBartForSequenceClassification"),NUr=o(" (BART model)"),qUr=l(),RA=a("li"),AAe=a("strong"),jUr=o("bert"),DUr=o(" \u2014 "),yoe=a("a"),GUr=o("FlaxBertForSequenceClassification"),OUr=o(" (BERT model)"),VUr=l(),PA=a("li"),LAe=a("strong"),XUr=o("big_bird"),zUr=o(" \u2014 "),xoe=a("a"),QUr=o("FlaxBigBirdForSequenceClassification"),WUr=o(" (BigBird model)"),HUr=l(),BA=a("li"),yAe=a("strong"),UUr=o("distilbert"),JUr=o(" \u2014 "),$oe=a("a"),YUr=o("FlaxDistilBertForSequenceClassification"),KUr=o(" (DistilBERT model)"),ZUr=l(),IA=a("li"),xAe=a("strong"),eJr=o("electra"),oJr=o(" \u2014 "),koe=a("a"),rJr=o("FlaxElectraForSequenceClassification"),tJr=o(" (ELECTRA model)"),aJr=l(),NA=a("li"),$Ae=a("strong"),nJr=o("mbart"),sJr=o(" \u2014 "),Soe=a("a"),lJr=o("FlaxMBartForSequenceClassification"),iJr=o(" (mBART model)"),dJr=l(),qA=a("li"),kAe=a("strong"),cJr=o("roberta"),mJr=o(" \u2014 "),Roe=a("a"),fJr=o("FlaxRobertaForSequenceClassification"),gJr=o(" (RoBERTa model)"),hJr=l(),jA=a("li"),SAe=a("strong"),uJr=o("roformer"),pJr=o(" \u2014 "),Poe=a("a"),_Jr=o("FlaxRoFormerForSequenceClassification"),bJr=o(" (RoFormer model)"),vJr=l(),DA=a("li"),RAe=a("strong"),FJr=o("xlm-roberta"),TJr=o(" \u2014 "),Boe=a("a"),MJr=o("FlaxXLMRobertaForSequenceClassification"),EJr=o(" (XLM-RoBERTa model)"),CJr=l(),F(GA.$$.fragment),Xze=l(),fm=a("h2"),OA=a("a"),PAe=a("span"),F(N$.$$.fragment),wJr=l(),BAe=a("span"),AJr=o("FlaxAutoModelForQuestionAnswering"),zze=l(),Tr=a("div"),F(q$.$$.fragment),LJr=l(),gm=a("p"),yJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Ioe=a("a"),xJr=o("from_pretrained()"),$Jr=o(" class method or the "),Noe=a("a"),kJr=o("from_config()"),SJr=o(` class
method.`),RJr=l(),j$=a("p"),PJr=o("This class cannot be instantiated directly using "),IAe=a("code"),BJr=o("__init__()"),IJr=o(" (throws an error)."),NJr=l(),Zt=a("div"),F(D$.$$.fragment),qJr=l(),NAe=a("p"),jJr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),DJr=l(),hm=a("p"),GJr=o(`Note:
Loading a model from its configuration file does `),qAe=a("strong"),OJr=o("not"),VJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qoe=a("a"),XJr=o("from_pretrained()"),zJr=o(" to load the model weights."),QJr=l(),F(VA.$$.fragment),WJr=l(),Ur=a("div"),F(G$.$$.fragment),HJr=l(),jAe=a("p"),UJr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),JJr=l(),Ln=a("p"),YJr=o("The model class to instantiate is selected based on the "),DAe=a("code"),KJr=o("model_type"),ZJr=o(` property of the config object (either
passed as an argument or loaded from `),GAe=a("code"),eYr=o("pretrained_model_name_or_path"),oYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OAe=a("code"),rYr=o("pretrained_model_name_or_path"),tYr=o(":"),aYr=l(),Re=a("ul"),XA=a("li"),VAe=a("strong"),nYr=o("albert"),sYr=o(" \u2014 "),joe=a("a"),lYr=o("FlaxAlbertForQuestionAnswering"),iYr=o(" (ALBERT model)"),dYr=l(),zA=a("li"),XAe=a("strong"),cYr=o("bart"),mYr=o(" \u2014 "),Doe=a("a"),fYr=o("FlaxBartForQuestionAnswering"),gYr=o(" (BART model)"),hYr=l(),QA=a("li"),zAe=a("strong"),uYr=o("bert"),pYr=o(" \u2014 "),Goe=a("a"),_Yr=o("FlaxBertForQuestionAnswering"),bYr=o(" (BERT model)"),vYr=l(),WA=a("li"),QAe=a("strong"),FYr=o("big_bird"),TYr=o(" \u2014 "),Ooe=a("a"),MYr=o("FlaxBigBirdForQuestionAnswering"),EYr=o(" (BigBird model)"),CYr=l(),HA=a("li"),WAe=a("strong"),wYr=o("distilbert"),AYr=o(" \u2014 "),Voe=a("a"),LYr=o("FlaxDistilBertForQuestionAnswering"),yYr=o(" (DistilBERT model)"),xYr=l(),UA=a("li"),HAe=a("strong"),$Yr=o("electra"),kYr=o(" \u2014 "),Xoe=a("a"),SYr=o("FlaxElectraForQuestionAnswering"),RYr=o(" (ELECTRA model)"),PYr=l(),JA=a("li"),UAe=a("strong"),BYr=o("mbart"),IYr=o(" \u2014 "),zoe=a("a"),NYr=o("FlaxMBartForQuestionAnswering"),qYr=o(" (mBART model)"),jYr=l(),YA=a("li"),JAe=a("strong"),DYr=o("roberta"),GYr=o(" \u2014 "),Qoe=a("a"),OYr=o("FlaxRobertaForQuestionAnswering"),VYr=o(" (RoBERTa model)"),XYr=l(),KA=a("li"),YAe=a("strong"),zYr=o("roformer"),QYr=o(" \u2014 "),Woe=a("a"),WYr=o("FlaxRoFormerForQuestionAnswering"),HYr=o(" (RoFormer model)"),UYr=l(),ZA=a("li"),KAe=a("strong"),JYr=o("xlm-roberta"),YYr=o(" \u2014 "),Hoe=a("a"),KYr=o("FlaxXLMRobertaForQuestionAnswering"),ZYr=o(" (XLM-RoBERTa model)"),eKr=l(),F(e6.$$.fragment),Qze=l(),um=a("h2"),o6=a("a"),ZAe=a("span"),F(O$.$$.fragment),oKr=l(),e6e=a("span"),rKr=o("FlaxAutoModelForTokenClassification"),Wze=l(),Mr=a("div"),F(V$.$$.fragment),tKr=l(),pm=a("p"),aKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Uoe=a("a"),nKr=o("from_pretrained()"),sKr=o(" class method or the "),Joe=a("a"),lKr=o("from_config()"),iKr=o(` class
method.`),dKr=l(),X$=a("p"),cKr=o("This class cannot be instantiated directly using "),o6e=a("code"),mKr=o("__init__()"),fKr=o(" (throws an error)."),gKr=l(),ea=a("div"),F(z$.$$.fragment),hKr=l(),r6e=a("p"),uKr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),pKr=l(),_m=a("p"),_Kr=o(`Note:
Loading a model from its configuration file does `),t6e=a("strong"),bKr=o("not"),vKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yoe=a("a"),FKr=o("from_pretrained()"),TKr=o(" to load the model weights."),MKr=l(),F(r6.$$.fragment),EKr=l(),Jr=a("div"),F(Q$.$$.fragment),CKr=l(),a6e=a("p"),wKr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),AKr=l(),yn=a("p"),LKr=o("The model class to instantiate is selected based on the "),n6e=a("code"),yKr=o("model_type"),xKr=o(` property of the config object (either
passed as an argument or loaded from `),s6e=a("code"),$Kr=o("pretrained_model_name_or_path"),kKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l6e=a("code"),SKr=o("pretrained_model_name_or_path"),RKr=o(":"),PKr=l(),Ve=a("ul"),t6=a("li"),i6e=a("strong"),BKr=o("albert"),IKr=o(" \u2014 "),Koe=a("a"),NKr=o("FlaxAlbertForTokenClassification"),qKr=o(" (ALBERT model)"),jKr=l(),a6=a("li"),d6e=a("strong"),DKr=o("bert"),GKr=o(" \u2014 "),Zoe=a("a"),OKr=o("FlaxBertForTokenClassification"),VKr=o(" (BERT model)"),XKr=l(),n6=a("li"),c6e=a("strong"),zKr=o("big_bird"),QKr=o(" \u2014 "),ere=a("a"),WKr=o("FlaxBigBirdForTokenClassification"),HKr=o(" (BigBird model)"),UKr=l(),s6=a("li"),m6e=a("strong"),JKr=o("distilbert"),YKr=o(" \u2014 "),ore=a("a"),KKr=o("FlaxDistilBertForTokenClassification"),ZKr=o(" (DistilBERT model)"),eZr=l(),l6=a("li"),f6e=a("strong"),oZr=o("electra"),rZr=o(" \u2014 "),rre=a("a"),tZr=o("FlaxElectraForTokenClassification"),aZr=o(" (ELECTRA model)"),nZr=l(),i6=a("li"),g6e=a("strong"),sZr=o("roberta"),lZr=o(" \u2014 "),tre=a("a"),iZr=o("FlaxRobertaForTokenClassification"),dZr=o(" (RoBERTa model)"),cZr=l(),d6=a("li"),h6e=a("strong"),mZr=o("roformer"),fZr=o(" \u2014 "),are=a("a"),gZr=o("FlaxRoFormerForTokenClassification"),hZr=o(" (RoFormer model)"),uZr=l(),c6=a("li"),u6e=a("strong"),pZr=o("xlm-roberta"),_Zr=o(" \u2014 "),nre=a("a"),bZr=o("FlaxXLMRobertaForTokenClassification"),vZr=o(" (XLM-RoBERTa model)"),FZr=l(),F(m6.$$.fragment),Hze=l(),bm=a("h2"),f6=a("a"),p6e=a("span"),F(W$.$$.fragment),TZr=l(),_6e=a("span"),MZr=o("FlaxAutoModelForMultipleChoice"),Uze=l(),Er=a("div"),F(H$.$$.fragment),EZr=l(),vm=a("p"),CZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),sre=a("a"),wZr=o("from_pretrained()"),AZr=o(" class method or the "),lre=a("a"),LZr=o("from_config()"),yZr=o(` class
method.`),xZr=l(),U$=a("p"),$Zr=o("This class cannot be instantiated directly using "),b6e=a("code"),kZr=o("__init__()"),SZr=o(" (throws an error)."),RZr=l(),oa=a("div"),F(J$.$$.fragment),PZr=l(),v6e=a("p"),BZr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),IZr=l(),Fm=a("p"),NZr=o(`Note:
Loading a model from its configuration file does `),F6e=a("strong"),qZr=o("not"),jZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ire=a("a"),DZr=o("from_pretrained()"),GZr=o(" to load the model weights."),OZr=l(),F(g6.$$.fragment),VZr=l(),Yr=a("div"),F(Y$.$$.fragment),XZr=l(),T6e=a("p"),zZr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),QZr=l(),xn=a("p"),WZr=o("The model class to instantiate is selected based on the "),M6e=a("code"),HZr=o("model_type"),UZr=o(` property of the config object (either
passed as an argument or loaded from `),E6e=a("code"),JZr=o("pretrained_model_name_or_path"),YZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C6e=a("code"),KZr=o("pretrained_model_name_or_path"),ZZr=o(":"),eet=l(),Xe=a("ul"),h6=a("li"),w6e=a("strong"),oet=o("albert"),ret=o(" \u2014 "),dre=a("a"),tet=o("FlaxAlbertForMultipleChoice"),aet=o(" (ALBERT model)"),net=l(),u6=a("li"),A6e=a("strong"),set=o("bert"),iet=o(" \u2014 "),cre=a("a"),det=o("FlaxBertForMultipleChoice"),cet=o(" (BERT model)"),met=l(),p6=a("li"),L6e=a("strong"),fet=o("big_bird"),get=o(" \u2014 "),mre=a("a"),het=o("FlaxBigBirdForMultipleChoice"),uet=o(" (BigBird model)"),pet=l(),_6=a("li"),y6e=a("strong"),_et=o("distilbert"),bet=o(" \u2014 "),fre=a("a"),vet=o("FlaxDistilBertForMultipleChoice"),Fet=o(" (DistilBERT model)"),Tet=l(),b6=a("li"),x6e=a("strong"),Met=o("electra"),Eet=o(" \u2014 "),gre=a("a"),Cet=o("FlaxElectraForMultipleChoice"),wet=o(" (ELECTRA model)"),Aet=l(),v6=a("li"),$6e=a("strong"),Let=o("roberta"),yet=o(" \u2014 "),hre=a("a"),xet=o("FlaxRobertaForMultipleChoice"),$et=o(" (RoBERTa model)"),ket=l(),F6=a("li"),k6e=a("strong"),Set=o("roformer"),Ret=o(" \u2014 "),ure=a("a"),Pet=o("FlaxRoFormerForMultipleChoice"),Bet=o(" (RoFormer model)"),Iet=l(),T6=a("li"),S6e=a("strong"),Net=o("xlm-roberta"),qet=o(" \u2014 "),pre=a("a"),jet=o("FlaxXLMRobertaForMultipleChoice"),Det=o(" (XLM-RoBERTa model)"),Get=l(),F(M6.$$.fragment),Jze=l(),Tm=a("h2"),E6=a("a"),R6e=a("span"),F(K$.$$.fragment),Oet=l(),P6e=a("span"),Vet=o("FlaxAutoModelForNextSentencePrediction"),Yze=l(),Cr=a("div"),F(Z$.$$.fragment),Xet=l(),Mm=a("p"),zet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),_re=a("a"),Qet=o("from_pretrained()"),Wet=o(" class method or the "),bre=a("a"),Het=o("from_config()"),Uet=o(` class
method.`),Jet=l(),ek=a("p"),Yet=o("This class cannot be instantiated directly using "),B6e=a("code"),Ket=o("__init__()"),Zet=o(" (throws an error)."),eot=l(),ra=a("div"),F(ok.$$.fragment),oot=l(),I6e=a("p"),rot=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),tot=l(),Em=a("p"),aot=o(`Note:
Loading a model from its configuration file does `),N6e=a("strong"),not=o("not"),sot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vre=a("a"),lot=o("from_pretrained()"),iot=o(" to load the model weights."),dot=l(),F(C6.$$.fragment),cot=l(),Kr=a("div"),F(rk.$$.fragment),mot=l(),q6e=a("p"),fot=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),got=l(),$n=a("p"),hot=o("The model class to instantiate is selected based on the "),j6e=a("code"),uot=o("model_type"),pot=o(` property of the config object (either
passed as an argument or loaded from `),D6e=a("code"),_ot=o("pretrained_model_name_or_path"),bot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G6e=a("code"),vot=o("pretrained_model_name_or_path"),Fot=o(":"),Tot=l(),O6e=a("ul"),w6=a("li"),V6e=a("strong"),Mot=o("bert"),Eot=o(" \u2014 "),Fre=a("a"),Cot=o("FlaxBertForNextSentencePrediction"),wot=o(" (BERT model)"),Aot=l(),F(A6.$$.fragment),Kze=l(),Cm=a("h2"),L6=a("a"),X6e=a("span"),F(tk.$$.fragment),Lot=l(),z6e=a("span"),yot=o("FlaxAutoModelForImageClassification"),Zze=l(),wr=a("div"),F(ak.$$.fragment),xot=l(),wm=a("p"),$ot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Tre=a("a"),kot=o("from_pretrained()"),Sot=o(" class method or the "),Mre=a("a"),Rot=o("from_config()"),Pot=o(` class
method.`),Bot=l(),nk=a("p"),Iot=o("This class cannot be instantiated directly using "),Q6e=a("code"),Not=o("__init__()"),qot=o(" (throws an error)."),jot=l(),ta=a("div"),F(sk.$$.fragment),Dot=l(),W6e=a("p"),Got=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Oot=l(),Am=a("p"),Vot=o(`Note:
Loading a model from its configuration file does `),H6e=a("strong"),Xot=o("not"),zot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ere=a("a"),Qot=o("from_pretrained()"),Wot=o(" to load the model weights."),Hot=l(),F(y6.$$.fragment),Uot=l(),Zr=a("div"),F(lk.$$.fragment),Jot=l(),U6e=a("p"),Yot=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Kot=l(),kn=a("p"),Zot=o("The model class to instantiate is selected based on the "),J6e=a("code"),ert=o("model_type"),ort=o(` property of the config object (either
passed as an argument or loaded from `),Y6e=a("code"),rrt=o("pretrained_model_name_or_path"),trt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K6e=a("code"),art=o("pretrained_model_name_or_path"),nrt=o(":"),srt=l(),ik=a("ul"),x6=a("li"),Z6e=a("strong"),lrt=o("beit"),irt=o(" \u2014 "),Cre=a("a"),drt=o("FlaxBeitForImageClassification"),crt=o(" (BEiT model)"),mrt=l(),$6=a("li"),e7e=a("strong"),frt=o("vit"),grt=o(" \u2014 "),wre=a("a"),hrt=o("FlaxViTForImageClassification"),urt=o(" (ViT model)"),prt=l(),F(k6.$$.fragment),eQe=l(),Lm=a("h2"),S6=a("a"),o7e=a("span"),F(dk.$$.fragment),_rt=l(),r7e=a("span"),brt=o("FlaxAutoModelForVision2Seq"),oQe=l(),Ar=a("div"),F(ck.$$.fragment),vrt=l(),ym=a("p"),Frt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Are=a("a"),Trt=o("from_pretrained()"),Mrt=o(" class method or the "),Lre=a("a"),Ert=o("from_config()"),Crt=o(` class
method.`),wrt=l(),mk=a("p"),Art=o("This class cannot be instantiated directly using "),t7e=a("code"),Lrt=o("__init__()"),yrt=o(" (throws an error)."),xrt=l(),aa=a("div"),F(fk.$$.fragment),$rt=l(),a7e=a("p"),krt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Srt=l(),xm=a("p"),Rrt=o(`Note:
Loading a model from its configuration file does `),n7e=a("strong"),Prt=o("not"),Brt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yre=a("a"),Irt=o("from_pretrained()"),Nrt=o(" to load the model weights."),qrt=l(),F(R6.$$.fragment),jrt=l(),et=a("div"),F(gk.$$.fragment),Drt=l(),s7e=a("p"),Grt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ort=l(),Sn=a("p"),Vrt=o("The model class to instantiate is selected based on the "),l7e=a("code"),Xrt=o("model_type"),zrt=o(` property of the config object (either
passed as an argument or loaded from `),i7e=a("code"),Qrt=o("pretrained_model_name_or_path"),Wrt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d7e=a("code"),Hrt=o("pretrained_model_name_or_path"),Urt=o(":"),Jrt=l(),c7e=a("ul"),P6=a("li"),m7e=a("strong"),Yrt=o("vision-encoder-decoder"),Krt=o(" \u2014 "),xre=a("a"),Zrt=o("FlaxVisionEncoderDecoderModel"),ett=o(" (Vision Encoder decoder model)"),ott=l(),F(B6.$$.fragment),this.h()},l(m){const _=RQt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(m),u=n(m,"H1",{class:!0});var hk=s(u);f=n(hk,"A",{id:!0,class:!0,href:!0});var f7e=s(f);p=n(f7e,"SPAN",{});var g7e=s(p);T(d.$$.fragment,g7e),g7e.forEach(t),f7e.forEach(t),h=i(hk),Co=n(hk,"SPAN",{});var h7e=s(Co);Li=r(h7e,"Auto Classes"),h7e.forEach(t),hk.forEach(t),Rm=i(m),lt=n(m,"P",{});var uk=s(lt);yi=r(uk,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),xi=n(uk,"CODE",{});var u7e=s(xi);ey=r(u7e,"from_pretrained()"),u7e.forEach(t),Pm=r(uk,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),uk.forEach(t),Oe=i(m),We=n(m,"P",{});var Rn=s(We);$i=r(Rn,"Instantiating one of "),Pn=n(Rn,"A",{href:!0});var p7e=s(Pn);oy=r(p7e,"AutoConfig"),p7e.forEach(t),Bn=r(Rn,", "),In=n(Rn,"A",{href:!0});var _7e=s(In);ry=r(_7e,"AutoModel"),_7e.forEach(t),ki=r(Rn,`, and
`),Nn=n(Rn,"A",{href:!0});var b7e=s(Nn);ty=r(b7e,"AutoTokenizer"),b7e.forEach(t),Si=r(Rn," will directly create a class of the relevant architecture. For instance"),Rn.forEach(t),Bm=i(m),T(Sa.$$.fragment,m),He=i(m),Ae=n(m,"P",{});var pk=s(Ae);BS=r(pk,"will create a model that is an instance of "),Ri=n(pk,"A",{href:!0});var v7e=s(Ri);IS=r(v7e,"BertModel"),v7e.forEach(t),NS=r(pk,"."),pk.forEach(t),wo=i(m),Ra=n(m,"P",{});var _k=s(Ra);qS=r(_k,"There is one class of "),Im=n(_k,"CODE",{});var F7e=s(Im);jS=r(F7e,"AutoModel"),F7e.forEach(t),fHe=r(_k," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),_k.forEach(t),YVe=i(m),Pi=n(m,"H2",{class:!0});var bk=s(Pi);Nm=n(bk,"A",{id:!0,class:!0,href:!0});var T7e=s(Nm);Cae=n(T7e,"SPAN",{});var M7e=s(Cae);T(ay.$$.fragment,M7e),M7e.forEach(t),T7e.forEach(t),gHe=i(bk),wae=n(bk,"SPAN",{});var E7e=s(wae);hHe=r(E7e,"Extending the Auto Classes"),E7e.forEach(t),bk.forEach(t),KVe=i(m),qn=n(m,"P",{});var $m=s(qn);uHe=r($m,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Aae=n($m,"CODE",{});var C7e=s(Aae);pHe=r(C7e,"NewModel"),C7e.forEach(t),_He=r($m,", make sure you have a "),Lae=n($m,"CODE",{});var w7e=s(Lae);bHe=r(w7e,"NewModelConfig"),w7e.forEach(t),vHe=r($m,` then you can add those to the auto
classes like this:`),$m.forEach(t),ZVe=i(m),T(ny.$$.fragment,m),eXe=i(m),DS=n(m,"P",{});var A7e=s(DS);FHe=r(A7e,"You will then be able to use the auto classes like you would usually do!"),A7e.forEach(t),oXe=i(m),T(qm.$$.fragment,m),rXe=i(m),Bi=n(m,"H2",{class:!0});var vk=s(Bi);jm=n(vk,"A",{id:!0,class:!0,href:!0});var L7e=s(jm);yae=n(L7e,"SPAN",{});var y7e=s(yae);T(sy.$$.fragment,y7e),y7e.forEach(t),L7e.forEach(t),THe=i(vk),xae=n(vk,"SPAN",{});var x7e=s(xae);MHe=r(x7e,"AutoConfig"),x7e.forEach(t),vk.forEach(t),tXe=i(m),Ao=n(m,"DIV",{class:!0});var nt=s(Ao);T(ly.$$.fragment,nt),EHe=i(nt),iy=n(nt,"P",{});var Fk=s(iy);CHe=r(Fk,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),GS=n(Fk,"A",{href:!0});var $7e=s(GS);wHe=r($7e,"from_pretrained()"),$7e.forEach(t),AHe=r(Fk," class method."),Fk.forEach(t),LHe=i(nt),dy=n(nt,"P",{});var Tk=s(dy);yHe=r(Tk,"This class cannot be instantiated directly using "),$ae=n(Tk,"CODE",{});var k7e=s($ae);xHe=r(k7e,"__init__()"),k7e.forEach(t),$He=r(Tk," (throws an error)."),Tk.forEach(t),kHe=i(nt),Lr=n(nt,"DIV",{class:!0});var st=s(Lr);T(cy.$$.fragment,st),SHe=i(st),kae=n(st,"P",{});var S7e=s(kae);RHe=r(S7e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),S7e.forEach(t),PHe=i(st),Ii=n(st,"P",{});var km=s(Ii);BHe=r(km,"The configuration class to instantiate is selected based on the "),Sae=n(km,"CODE",{});var R7e=s(Sae);IHe=r(R7e,"model_type"),R7e.forEach(t),NHe=r(km,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Rae=n(km,"CODE",{});var P7e=s(Rae);qHe=r(P7e,"pretrained_model_name_or_path"),P7e.forEach(t),jHe=r(km,":"),km.forEach(t),DHe=i(st),A=n(st,"UL",{});var L=s(A);Dm=n(L,"LI",{});var I6=s(Dm);Pae=n(I6,"STRONG",{});var B7e=s(Pae);GHe=r(B7e,"albert"),B7e.forEach(t),OHe=r(I6," \u2014 "),OS=n(I6,"A",{href:!0});var I7e=s(OS);VHe=r(I7e,"AlbertConfig"),I7e.forEach(t),XHe=r(I6," (ALBERT model)"),I6.forEach(t),zHe=i(L),Gm=n(L,"LI",{});var N6=s(Gm);Bae=n(N6,"STRONG",{});var N7e=s(Bae);QHe=r(N7e,"bart"),N7e.forEach(t),WHe=r(N6," \u2014 "),VS=n(N6,"A",{href:!0});var q7e=s(VS);HHe=r(q7e,"BartConfig"),q7e.forEach(t),UHe=r(N6," (BART model)"),N6.forEach(t),JHe=i(L),Om=n(L,"LI",{});var q6=s(Om);Iae=n(q6,"STRONG",{});var j7e=s(Iae);YHe=r(j7e,"beit"),j7e.forEach(t),KHe=r(q6," \u2014 "),XS=n(q6,"A",{href:!0});var D7e=s(XS);ZHe=r(D7e,"BeitConfig"),D7e.forEach(t),eUe=r(q6," (BEiT model)"),q6.forEach(t),oUe=i(L),Vm=n(L,"LI",{});var j6=s(Vm);Nae=n(j6,"STRONG",{});var G7e=s(Nae);rUe=r(G7e,"bert"),G7e.forEach(t),tUe=r(j6," \u2014 "),zS=n(j6,"A",{href:!0});var O7e=s(zS);aUe=r(O7e,"BertConfig"),O7e.forEach(t),nUe=r(j6," (BERT model)"),j6.forEach(t),sUe=i(L),Xm=n(L,"LI",{});var D6=s(Xm);qae=n(D6,"STRONG",{});var V7e=s(qae);lUe=r(V7e,"bert-generation"),V7e.forEach(t),iUe=r(D6," \u2014 "),QS=n(D6,"A",{href:!0});var X7e=s(QS);dUe=r(X7e,"BertGenerationConfig"),X7e.forEach(t),cUe=r(D6," (Bert Generation model)"),D6.forEach(t),mUe=i(L),zm=n(L,"LI",{});var G6=s(zm);jae=n(G6,"STRONG",{});var z7e=s(jae);fUe=r(z7e,"big_bird"),z7e.forEach(t),gUe=r(G6," \u2014 "),WS=n(G6,"A",{href:!0});var Q7e=s(WS);hUe=r(Q7e,"BigBirdConfig"),Q7e.forEach(t),uUe=r(G6," (BigBird model)"),G6.forEach(t),pUe=i(L),Qm=n(L,"LI",{});var O6=s(Qm);Dae=n(O6,"STRONG",{});var W7e=s(Dae);_Ue=r(W7e,"bigbird_pegasus"),W7e.forEach(t),bUe=r(O6," \u2014 "),HS=n(O6,"A",{href:!0});var H7e=s(HS);vUe=r(H7e,"BigBirdPegasusConfig"),H7e.forEach(t),FUe=r(O6," (BigBird-Pegasus model)"),O6.forEach(t),TUe=i(L),Wm=n(L,"LI",{});var V6=s(Wm);Gae=n(V6,"STRONG",{});var U7e=s(Gae);MUe=r(U7e,"blenderbot"),U7e.forEach(t),EUe=r(V6," \u2014 "),US=n(V6,"A",{href:!0});var J7e=s(US);CUe=r(J7e,"BlenderbotConfig"),J7e.forEach(t),wUe=r(V6," (Blenderbot model)"),V6.forEach(t),AUe=i(L),Hm=n(L,"LI",{});var X6=s(Hm);Oae=n(X6,"STRONG",{});var Y7e=s(Oae);LUe=r(Y7e,"blenderbot-small"),Y7e.forEach(t),yUe=r(X6," \u2014 "),JS=n(X6,"A",{href:!0});var K7e=s(JS);xUe=r(K7e,"BlenderbotSmallConfig"),K7e.forEach(t),$Ue=r(X6," (BlenderbotSmall model)"),X6.forEach(t),kUe=i(L),Um=n(L,"LI",{});var z6=s(Um);Vae=n(z6,"STRONG",{});var Z7e=s(Vae);SUe=r(Z7e,"bloom"),Z7e.forEach(t),RUe=r(z6," \u2014 "),YS=n(z6,"A",{href:!0});var eLe=s(YS);PUe=r(eLe,"BloomConfig"),eLe.forEach(t),BUe=r(z6," (BLOOM model)"),z6.forEach(t),IUe=i(L),Jm=n(L,"LI",{});var Q6=s(Jm);Xae=n(Q6,"STRONG",{});var oLe=s(Xae);NUe=r(oLe,"camembert"),oLe.forEach(t),qUe=r(Q6," \u2014 "),KS=n(Q6,"A",{href:!0});var rLe=s(KS);jUe=r(rLe,"CamembertConfig"),rLe.forEach(t),DUe=r(Q6," (CamemBERT model)"),Q6.forEach(t),GUe=i(L),Ym=n(L,"LI",{});var W6=s(Ym);zae=n(W6,"STRONG",{});var tLe=s(zae);OUe=r(tLe,"canine"),tLe.forEach(t),VUe=r(W6," \u2014 "),ZS=n(W6,"A",{href:!0});var aLe=s(ZS);XUe=r(aLe,"CanineConfig"),aLe.forEach(t),zUe=r(W6," (CANINE model)"),W6.forEach(t),QUe=i(L),Km=n(L,"LI",{});var H6=s(Km);Qae=n(H6,"STRONG",{});var nLe=s(Qae);WUe=r(nLe,"clip"),nLe.forEach(t),HUe=r(H6," \u2014 "),eR=n(H6,"A",{href:!0});var sLe=s(eR);UUe=r(sLe,"CLIPConfig"),sLe.forEach(t),JUe=r(H6," (CLIP model)"),H6.forEach(t),YUe=i(L),Zm=n(L,"LI",{});var U6=s(Zm);Wae=n(U6,"STRONG",{});var lLe=s(Wae);KUe=r(lLe,"codegen"),lLe.forEach(t),ZUe=r(U6," \u2014 "),oR=n(U6,"A",{href:!0});var iLe=s(oR);eJe=r(iLe,"CodeGenConfig"),iLe.forEach(t),oJe=r(U6," (CodeGen model)"),U6.forEach(t),rJe=i(L),ef=n(L,"LI",{});var J6=s(ef);Hae=n(J6,"STRONG",{});var dLe=s(Hae);tJe=r(dLe,"convbert"),dLe.forEach(t),aJe=r(J6," \u2014 "),rR=n(J6,"A",{href:!0});var cLe=s(rR);nJe=r(cLe,"ConvBertConfig"),cLe.forEach(t),sJe=r(J6," (ConvBERT model)"),J6.forEach(t),lJe=i(L),of=n(L,"LI",{});var Y6=s(of);Uae=n(Y6,"STRONG",{});var mLe=s(Uae);iJe=r(mLe,"convnext"),mLe.forEach(t),dJe=r(Y6," \u2014 "),tR=n(Y6,"A",{href:!0});var fLe=s(tR);cJe=r(fLe,"ConvNextConfig"),fLe.forEach(t),mJe=r(Y6," (ConvNeXT model)"),Y6.forEach(t),fJe=i(L),rf=n(L,"LI",{});var K6=s(rf);Jae=n(K6,"STRONG",{});var gLe=s(Jae);gJe=r(gLe,"ctrl"),gLe.forEach(t),hJe=r(K6," \u2014 "),aR=n(K6,"A",{href:!0});var hLe=s(aR);uJe=r(hLe,"CTRLConfig"),hLe.forEach(t),pJe=r(K6," (CTRL model)"),K6.forEach(t),_Je=i(L),tf=n(L,"LI",{});var Z6=s(tf);Yae=n(Z6,"STRONG",{});var uLe=s(Yae);bJe=r(uLe,"cvt"),uLe.forEach(t),vJe=r(Z6," \u2014 "),nR=n(Z6,"A",{href:!0});var pLe=s(nR);FJe=r(pLe,"CvtConfig"),pLe.forEach(t),TJe=r(Z6," (CvT model)"),Z6.forEach(t),MJe=i(L),af=n(L,"LI",{});var e7=s(af);Kae=n(e7,"STRONG",{});var _Le=s(Kae);EJe=r(_Le,"data2vec-audio"),_Le.forEach(t),CJe=r(e7," \u2014 "),sR=n(e7,"A",{href:!0});var bLe=s(sR);wJe=r(bLe,"Data2VecAudioConfig"),bLe.forEach(t),AJe=r(e7," (Data2VecAudio model)"),e7.forEach(t),LJe=i(L),nf=n(L,"LI",{});var o7=s(nf);Zae=n(o7,"STRONG",{});var vLe=s(Zae);yJe=r(vLe,"data2vec-text"),vLe.forEach(t),xJe=r(o7," \u2014 "),lR=n(o7,"A",{href:!0});var FLe=s(lR);$Je=r(FLe,"Data2VecTextConfig"),FLe.forEach(t),kJe=r(o7," (Data2VecText model)"),o7.forEach(t),SJe=i(L),sf=n(L,"LI",{});var r7=s(sf);ene=n(r7,"STRONG",{});var TLe=s(ene);RJe=r(TLe,"data2vec-vision"),TLe.forEach(t),PJe=r(r7," \u2014 "),iR=n(r7,"A",{href:!0});var MLe=s(iR);BJe=r(MLe,"Data2VecVisionConfig"),MLe.forEach(t),IJe=r(r7," (Data2VecVision model)"),r7.forEach(t),NJe=i(L),lf=n(L,"LI",{});var t7=s(lf);one=n(t7,"STRONG",{});var ELe=s(one);qJe=r(ELe,"deberta"),ELe.forEach(t),jJe=r(t7," \u2014 "),dR=n(t7,"A",{href:!0});var CLe=s(dR);DJe=r(CLe,"DebertaConfig"),CLe.forEach(t),GJe=r(t7," (DeBERTa model)"),t7.forEach(t),OJe=i(L),df=n(L,"LI",{});var a7=s(df);rne=n(a7,"STRONG",{});var wLe=s(rne);VJe=r(wLe,"deberta-v2"),wLe.forEach(t),XJe=r(a7," \u2014 "),cR=n(a7,"A",{href:!0});var ALe=s(cR);zJe=r(ALe,"DebertaV2Config"),ALe.forEach(t),QJe=r(a7," (DeBERTa-v2 model)"),a7.forEach(t),WJe=i(L),cf=n(L,"LI",{});var n7=s(cf);tne=n(n7,"STRONG",{});var ttt=s(tne);HJe=r(ttt,"decision_transformer"),ttt.forEach(t),UJe=r(n7," \u2014 "),mR=n(n7,"A",{href:!0});var att=s(mR);JJe=r(att,"DecisionTransformerConfig"),att.forEach(t),YJe=r(n7," (Decision Transformer model)"),n7.forEach(t),KJe=i(L),mf=n(L,"LI",{});var LLe=s(mf);ane=n(LLe,"STRONG",{});var ntt=s(ane);ZJe=r(ntt,"deit"),ntt.forEach(t),eYe=r(LLe," \u2014 "),fR=n(LLe,"A",{href:!0});var stt=s(fR);oYe=r(stt,"DeiTConfig"),stt.forEach(t),rYe=r(LLe," (DeiT model)"),LLe.forEach(t),tYe=i(L),ff=n(L,"LI",{});var yLe=s(ff);nne=n(yLe,"STRONG",{});var ltt=s(nne);aYe=r(ltt,"detr"),ltt.forEach(t),nYe=r(yLe," \u2014 "),gR=n(yLe,"A",{href:!0});var itt=s(gR);sYe=r(itt,"DetrConfig"),itt.forEach(t),lYe=r(yLe," (DETR model)"),yLe.forEach(t),iYe=i(L),gf=n(L,"LI",{});var xLe=s(gf);sne=n(xLe,"STRONG",{});var dtt=s(sne);dYe=r(dtt,"distilbert"),dtt.forEach(t),cYe=r(xLe," \u2014 "),hR=n(xLe,"A",{href:!0});var ctt=s(hR);mYe=r(ctt,"DistilBertConfig"),ctt.forEach(t),fYe=r(xLe," (DistilBERT model)"),xLe.forEach(t),gYe=i(L),hf=n(L,"LI",{});var $Le=s(hf);lne=n($Le,"STRONG",{});var mtt=s(lne);hYe=r(mtt,"dpr"),mtt.forEach(t),uYe=r($Le," \u2014 "),uR=n($Le,"A",{href:!0});var ftt=s(uR);pYe=r(ftt,"DPRConfig"),ftt.forEach(t),_Ye=r($Le," (DPR model)"),$Le.forEach(t),bYe=i(L),uf=n(L,"LI",{});var kLe=s(uf);ine=n(kLe,"STRONG",{});var gtt=s(ine);vYe=r(gtt,"dpt"),gtt.forEach(t),FYe=r(kLe," \u2014 "),pR=n(kLe,"A",{href:!0});var htt=s(pR);TYe=r(htt,"DPTConfig"),htt.forEach(t),MYe=r(kLe," (DPT model)"),kLe.forEach(t),EYe=i(L),pf=n(L,"LI",{});var SLe=s(pf);dne=n(SLe,"STRONG",{});var utt=s(dne);CYe=r(utt,"electra"),utt.forEach(t),wYe=r(SLe," \u2014 "),_R=n(SLe,"A",{href:!0});var ptt=s(_R);AYe=r(ptt,"ElectraConfig"),ptt.forEach(t),LYe=r(SLe," (ELECTRA model)"),SLe.forEach(t),yYe=i(L),_f=n(L,"LI",{});var RLe=s(_f);cne=n(RLe,"STRONG",{});var _tt=s(cne);xYe=r(_tt,"encoder-decoder"),_tt.forEach(t),$Ye=r(RLe," \u2014 "),bR=n(RLe,"A",{href:!0});var btt=s(bR);kYe=r(btt,"EncoderDecoderConfig"),btt.forEach(t),SYe=r(RLe," (Encoder decoder model)"),RLe.forEach(t),RYe=i(L),bf=n(L,"LI",{});var PLe=s(bf);mne=n(PLe,"STRONG",{});var vtt=s(mne);PYe=r(vtt,"flaubert"),vtt.forEach(t),BYe=r(PLe," \u2014 "),vR=n(PLe,"A",{href:!0});var Ftt=s(vR);IYe=r(Ftt,"FlaubertConfig"),Ftt.forEach(t),NYe=r(PLe," (FlauBERT model)"),PLe.forEach(t),qYe=i(L),vf=n(L,"LI",{});var BLe=s(vf);fne=n(BLe,"STRONG",{});var Ttt=s(fne);jYe=r(Ttt,"flava"),Ttt.forEach(t),DYe=r(BLe," \u2014 "),FR=n(BLe,"A",{href:!0});var Mtt=s(FR);GYe=r(Mtt,"FlavaConfig"),Mtt.forEach(t),OYe=r(BLe," (FLAVA model)"),BLe.forEach(t),VYe=i(L),Ff=n(L,"LI",{});var ILe=s(Ff);gne=n(ILe,"STRONG",{});var Ett=s(gne);XYe=r(Ett,"fnet"),Ett.forEach(t),zYe=r(ILe," \u2014 "),TR=n(ILe,"A",{href:!0});var Ctt=s(TR);QYe=r(Ctt,"FNetConfig"),Ctt.forEach(t),WYe=r(ILe," (FNet model)"),ILe.forEach(t),HYe=i(L),Tf=n(L,"LI",{});var NLe=s(Tf);hne=n(NLe,"STRONG",{});var wtt=s(hne);UYe=r(wtt,"fsmt"),wtt.forEach(t),JYe=r(NLe," \u2014 "),MR=n(NLe,"A",{href:!0});var Att=s(MR);YYe=r(Att,"FSMTConfig"),Att.forEach(t),KYe=r(NLe," (FairSeq Machine-Translation model)"),NLe.forEach(t),ZYe=i(L),Mf=n(L,"LI",{});var qLe=s(Mf);une=n(qLe,"STRONG",{});var Ltt=s(une);eKe=r(Ltt,"funnel"),Ltt.forEach(t),oKe=r(qLe," \u2014 "),ER=n(qLe,"A",{href:!0});var ytt=s(ER);rKe=r(ytt,"FunnelConfig"),ytt.forEach(t),tKe=r(qLe," (Funnel Transformer model)"),qLe.forEach(t),aKe=i(L),Ef=n(L,"LI",{});var jLe=s(Ef);pne=n(jLe,"STRONG",{});var xtt=s(pne);nKe=r(xtt,"glpn"),xtt.forEach(t),sKe=r(jLe," \u2014 "),CR=n(jLe,"A",{href:!0});var $tt=s(CR);lKe=r($tt,"GLPNConfig"),$tt.forEach(t),iKe=r(jLe," (GLPN model)"),jLe.forEach(t),dKe=i(L),Cf=n(L,"LI",{});var DLe=s(Cf);_ne=n(DLe,"STRONG",{});var ktt=s(_ne);cKe=r(ktt,"gpt2"),ktt.forEach(t),mKe=r(DLe," \u2014 "),wR=n(DLe,"A",{href:!0});var Stt=s(wR);fKe=r(Stt,"GPT2Config"),Stt.forEach(t),gKe=r(DLe," (OpenAI GPT-2 model)"),DLe.forEach(t),hKe=i(L),wf=n(L,"LI",{});var GLe=s(wf);bne=n(GLe,"STRONG",{});var Rtt=s(bne);uKe=r(Rtt,"gpt_neo"),Rtt.forEach(t),pKe=r(GLe," \u2014 "),AR=n(GLe,"A",{href:!0});var Ptt=s(AR);_Ke=r(Ptt,"GPTNeoConfig"),Ptt.forEach(t),bKe=r(GLe," (GPT Neo model)"),GLe.forEach(t),vKe=i(L),Af=n(L,"LI",{});var OLe=s(Af);vne=n(OLe,"STRONG",{});var Btt=s(vne);FKe=r(Btt,"gpt_neox"),Btt.forEach(t),TKe=r(OLe," \u2014 "),LR=n(OLe,"A",{href:!0});var Itt=s(LR);MKe=r(Itt,"GPTNeoXConfig"),Itt.forEach(t),EKe=r(OLe," (GPT NeoX model)"),OLe.forEach(t),CKe=i(L),Lf=n(L,"LI",{});var VLe=s(Lf);Fne=n(VLe,"STRONG",{});var Ntt=s(Fne);wKe=r(Ntt,"gptj"),Ntt.forEach(t),AKe=r(VLe," \u2014 "),yR=n(VLe,"A",{href:!0});var qtt=s(yR);LKe=r(qtt,"GPTJConfig"),qtt.forEach(t),yKe=r(VLe," (GPT-J model)"),VLe.forEach(t),xKe=i(L),yf=n(L,"LI",{});var XLe=s(yf);Tne=n(XLe,"STRONG",{});var jtt=s(Tne);$Ke=r(jtt,"groupvit"),jtt.forEach(t),kKe=r(XLe," \u2014 "),xR=n(XLe,"A",{href:!0});var Dtt=s(xR);SKe=r(Dtt,"GroupViTConfig"),Dtt.forEach(t),RKe=r(XLe," (GroupViT model)"),XLe.forEach(t),PKe=i(L),xf=n(L,"LI",{});var zLe=s(xf);Mne=n(zLe,"STRONG",{});var Gtt=s(Mne);BKe=r(Gtt,"hubert"),Gtt.forEach(t),IKe=r(zLe," \u2014 "),$R=n(zLe,"A",{href:!0});var Ott=s($R);NKe=r(Ott,"HubertConfig"),Ott.forEach(t),qKe=r(zLe," (Hubert model)"),zLe.forEach(t),jKe=i(L),$f=n(L,"LI",{});var QLe=s($f);Ene=n(QLe,"STRONG",{});var Vtt=s(Ene);DKe=r(Vtt,"ibert"),Vtt.forEach(t),GKe=r(QLe," \u2014 "),kR=n(QLe,"A",{href:!0});var Xtt=s(kR);OKe=r(Xtt,"IBertConfig"),Xtt.forEach(t),VKe=r(QLe," (I-BERT model)"),QLe.forEach(t),XKe=i(L),kf=n(L,"LI",{});var WLe=s(kf);Cne=n(WLe,"STRONG",{});var ztt=s(Cne);zKe=r(ztt,"imagegpt"),ztt.forEach(t),QKe=r(WLe," \u2014 "),SR=n(WLe,"A",{href:!0});var Qtt=s(SR);WKe=r(Qtt,"ImageGPTConfig"),Qtt.forEach(t),HKe=r(WLe," (ImageGPT model)"),WLe.forEach(t),UKe=i(L),Sf=n(L,"LI",{});var HLe=s(Sf);wne=n(HLe,"STRONG",{});var Wtt=s(wne);JKe=r(Wtt,"layoutlm"),Wtt.forEach(t),YKe=r(HLe," \u2014 "),RR=n(HLe,"A",{href:!0});var Htt=s(RR);KKe=r(Htt,"LayoutLMConfig"),Htt.forEach(t),ZKe=r(HLe," (LayoutLM model)"),HLe.forEach(t),eZe=i(L),Rf=n(L,"LI",{});var ULe=s(Rf);Ane=n(ULe,"STRONG",{});var Utt=s(Ane);oZe=r(Utt,"layoutlmv2"),Utt.forEach(t),rZe=r(ULe," \u2014 "),PR=n(ULe,"A",{href:!0});var Jtt=s(PR);tZe=r(Jtt,"LayoutLMv2Config"),Jtt.forEach(t),aZe=r(ULe," (LayoutLMv2 model)"),ULe.forEach(t),nZe=i(L),Pf=n(L,"LI",{});var JLe=s(Pf);Lne=n(JLe,"STRONG",{});var Ytt=s(Lne);sZe=r(Ytt,"layoutlmv3"),Ytt.forEach(t),lZe=r(JLe," \u2014 "),BR=n(JLe,"A",{href:!0});var Ktt=s(BR);iZe=r(Ktt,"LayoutLMv3Config"),Ktt.forEach(t),dZe=r(JLe," (LayoutLMv3 model)"),JLe.forEach(t),cZe=i(L),Bf=n(L,"LI",{});var YLe=s(Bf);yne=n(YLe,"STRONG",{});var Ztt=s(yne);mZe=r(Ztt,"led"),Ztt.forEach(t),fZe=r(YLe," \u2014 "),IR=n(YLe,"A",{href:!0});var eat=s(IR);gZe=r(eat,"LEDConfig"),eat.forEach(t),hZe=r(YLe," (LED model)"),YLe.forEach(t),uZe=i(L),If=n(L,"LI",{});var KLe=s(If);xne=n(KLe,"STRONG",{});var oat=s(xne);pZe=r(oat,"levit"),oat.forEach(t),_Ze=r(KLe," \u2014 "),NR=n(KLe,"A",{href:!0});var rat=s(NR);bZe=r(rat,"LevitConfig"),rat.forEach(t),vZe=r(KLe," (LeViT model)"),KLe.forEach(t),FZe=i(L),Nf=n(L,"LI",{});var ZLe=s(Nf);$ne=n(ZLe,"STRONG",{});var tat=s($ne);TZe=r(tat,"longformer"),tat.forEach(t),MZe=r(ZLe," \u2014 "),qR=n(ZLe,"A",{href:!0});var aat=s(qR);EZe=r(aat,"LongformerConfig"),aat.forEach(t),CZe=r(ZLe," (Longformer model)"),ZLe.forEach(t),wZe=i(L),qf=n(L,"LI",{});var eye=s(qf);kne=n(eye,"STRONG",{});var nat=s(kne);AZe=r(nat,"longt5"),nat.forEach(t),LZe=r(eye," \u2014 "),jR=n(eye,"A",{href:!0});var sat=s(jR);yZe=r(sat,"LongT5Config"),sat.forEach(t),xZe=r(eye," (LongT5 model)"),eye.forEach(t),$Ze=i(L),jf=n(L,"LI",{});var oye=s(jf);Sne=n(oye,"STRONG",{});var lat=s(Sne);kZe=r(lat,"luke"),lat.forEach(t),SZe=r(oye," \u2014 "),DR=n(oye,"A",{href:!0});var iat=s(DR);RZe=r(iat,"LukeConfig"),iat.forEach(t),PZe=r(oye," (LUKE model)"),oye.forEach(t),BZe=i(L),Df=n(L,"LI",{});var rye=s(Df);Rne=n(rye,"STRONG",{});var dat=s(Rne);IZe=r(dat,"lxmert"),dat.forEach(t),NZe=r(rye," \u2014 "),GR=n(rye,"A",{href:!0});var cat=s(GR);qZe=r(cat,"LxmertConfig"),cat.forEach(t),jZe=r(rye," (LXMERT model)"),rye.forEach(t),DZe=i(L),Gf=n(L,"LI",{});var tye=s(Gf);Pne=n(tye,"STRONG",{});var mat=s(Pne);GZe=r(mat,"m2m_100"),mat.forEach(t),OZe=r(tye," \u2014 "),OR=n(tye,"A",{href:!0});var fat=s(OR);VZe=r(fat,"M2M100Config"),fat.forEach(t),XZe=r(tye," (M2M100 model)"),tye.forEach(t),zZe=i(L),Of=n(L,"LI",{});var aye=s(Of);Bne=n(aye,"STRONG",{});var gat=s(Bne);QZe=r(gat,"marian"),gat.forEach(t),WZe=r(aye," \u2014 "),VR=n(aye,"A",{href:!0});var hat=s(VR);HZe=r(hat,"MarianConfig"),hat.forEach(t),UZe=r(aye," (Marian model)"),aye.forEach(t),JZe=i(L),Vf=n(L,"LI",{});var nye=s(Vf);Ine=n(nye,"STRONG",{});var uat=s(Ine);YZe=r(uat,"maskformer"),uat.forEach(t),KZe=r(nye," \u2014 "),XR=n(nye,"A",{href:!0});var pat=s(XR);ZZe=r(pat,"MaskFormerConfig"),pat.forEach(t),eeo=r(nye," (MaskFormer model)"),nye.forEach(t),oeo=i(L),Xf=n(L,"LI",{});var sye=s(Xf);Nne=n(sye,"STRONG",{});var _at=s(Nne);reo=r(_at,"mbart"),_at.forEach(t),teo=r(sye," \u2014 "),zR=n(sye,"A",{href:!0});var bat=s(zR);aeo=r(bat,"MBartConfig"),bat.forEach(t),neo=r(sye," (mBART model)"),sye.forEach(t),seo=i(L),zf=n(L,"LI",{});var lye=s(zf);qne=n(lye,"STRONG",{});var vat=s(qne);leo=r(vat,"mctct"),vat.forEach(t),ieo=r(lye," \u2014 "),QR=n(lye,"A",{href:!0});var Fat=s(QR);deo=r(Fat,"MCTCTConfig"),Fat.forEach(t),ceo=r(lye," (M-CTC-T model)"),lye.forEach(t),meo=i(L),Qf=n(L,"LI",{});var iye=s(Qf);jne=n(iye,"STRONG",{});var Tat=s(jne);feo=r(Tat,"megatron-bert"),Tat.forEach(t),geo=r(iye," \u2014 "),WR=n(iye,"A",{href:!0});var Mat=s(WR);heo=r(Mat,"MegatronBertConfig"),Mat.forEach(t),ueo=r(iye," (Megatron-BERT model)"),iye.forEach(t),peo=i(L),Wf=n(L,"LI",{});var dye=s(Wf);Dne=n(dye,"STRONG",{});var Eat=s(Dne);_eo=r(Eat,"mobilebert"),Eat.forEach(t),beo=r(dye," \u2014 "),HR=n(dye,"A",{href:!0});var Cat=s(HR);veo=r(Cat,"MobileBertConfig"),Cat.forEach(t),Feo=r(dye," (MobileBERT model)"),dye.forEach(t),Teo=i(L),Hf=n(L,"LI",{});var cye=s(Hf);Gne=n(cye,"STRONG",{});var wat=s(Gne);Meo=r(wat,"mobilevit"),wat.forEach(t),Eeo=r(cye," \u2014 "),UR=n(cye,"A",{href:!0});var Aat=s(UR);Ceo=r(Aat,"MobileViTConfig"),Aat.forEach(t),weo=r(cye," (MobileViT model)"),cye.forEach(t),Aeo=i(L),Uf=n(L,"LI",{});var mye=s(Uf);One=n(mye,"STRONG",{});var Lat=s(One);Leo=r(Lat,"mpnet"),Lat.forEach(t),yeo=r(mye," \u2014 "),JR=n(mye,"A",{href:!0});var yat=s(JR);xeo=r(yat,"MPNetConfig"),yat.forEach(t),$eo=r(mye," (MPNet model)"),mye.forEach(t),keo=i(L),Jf=n(L,"LI",{});var fye=s(Jf);Vne=n(fye,"STRONG",{});var xat=s(Vne);Seo=r(xat,"mt5"),xat.forEach(t),Reo=r(fye," \u2014 "),YR=n(fye,"A",{href:!0});var $at=s(YR);Peo=r($at,"MT5Config"),$at.forEach(t),Beo=r(fye," (MT5 model)"),fye.forEach(t),Ieo=i(L),Yf=n(L,"LI",{});var gye=s(Yf);Xne=n(gye,"STRONG",{});var kat=s(Xne);Neo=r(kat,"mvp"),kat.forEach(t),qeo=r(gye," \u2014 "),KR=n(gye,"A",{href:!0});var Sat=s(KR);jeo=r(Sat,"MvpConfig"),Sat.forEach(t),Deo=r(gye," (MVP model)"),gye.forEach(t),Geo=i(L),Kf=n(L,"LI",{});var hye=s(Kf);zne=n(hye,"STRONG",{});var Rat=s(zne);Oeo=r(Rat,"nezha"),Rat.forEach(t),Veo=r(hye," \u2014 "),ZR=n(hye,"A",{href:!0});var Pat=s(ZR);Xeo=r(Pat,"NezhaConfig"),Pat.forEach(t),zeo=r(hye," (Nezha model)"),hye.forEach(t),Qeo=i(L),Zf=n(L,"LI",{});var uye=s(Zf);Qne=n(uye,"STRONG",{});var Bat=s(Qne);Weo=r(Bat,"nystromformer"),Bat.forEach(t),Heo=r(uye," \u2014 "),eP=n(uye,"A",{href:!0});var Iat=s(eP);Ueo=r(Iat,"NystromformerConfig"),Iat.forEach(t),Jeo=r(uye," (Nystr\xF6mformer model)"),uye.forEach(t),Yeo=i(L),eg=n(L,"LI",{});var pye=s(eg);Wne=n(pye,"STRONG",{});var Nat=s(Wne);Keo=r(Nat,"openai-gpt"),Nat.forEach(t),Zeo=r(pye," \u2014 "),oP=n(pye,"A",{href:!0});var qat=s(oP);eoo=r(qat,"OpenAIGPTConfig"),qat.forEach(t),ooo=r(pye," (OpenAI GPT model)"),pye.forEach(t),roo=i(L),og=n(L,"LI",{});var _ye=s(og);Hne=n(_ye,"STRONG",{});var jat=s(Hne);too=r(jat,"opt"),jat.forEach(t),aoo=r(_ye," \u2014 "),rP=n(_ye,"A",{href:!0});var Dat=s(rP);noo=r(Dat,"OPTConfig"),Dat.forEach(t),soo=r(_ye," (OPT model)"),_ye.forEach(t),loo=i(L),rg=n(L,"LI",{});var bye=s(rg);Une=n(bye,"STRONG",{});var Gat=s(Une);ioo=r(Gat,"pegasus"),Gat.forEach(t),doo=r(bye," \u2014 "),tP=n(bye,"A",{href:!0});var Oat=s(tP);coo=r(Oat,"PegasusConfig"),Oat.forEach(t),moo=r(bye," (Pegasus model)"),bye.forEach(t),foo=i(L),tg=n(L,"LI",{});var vye=s(tg);Jne=n(vye,"STRONG",{});var Vat=s(Jne);goo=r(Vat,"perceiver"),Vat.forEach(t),hoo=r(vye," \u2014 "),aP=n(vye,"A",{href:!0});var Xat=s(aP);uoo=r(Xat,"PerceiverConfig"),Xat.forEach(t),poo=r(vye," (Perceiver model)"),vye.forEach(t),_oo=i(L),ag=n(L,"LI",{});var Fye=s(ag);Yne=n(Fye,"STRONG",{});var zat=s(Yne);boo=r(zat,"plbart"),zat.forEach(t),voo=r(Fye," \u2014 "),nP=n(Fye,"A",{href:!0});var Qat=s(nP);Foo=r(Qat,"PLBartConfig"),Qat.forEach(t),Too=r(Fye," (PLBart model)"),Fye.forEach(t),Moo=i(L),ng=n(L,"LI",{});var Tye=s(ng);Kne=n(Tye,"STRONG",{});var Wat=s(Kne);Eoo=r(Wat,"poolformer"),Wat.forEach(t),Coo=r(Tye," \u2014 "),sP=n(Tye,"A",{href:!0});var Hat=s(sP);woo=r(Hat,"PoolFormerConfig"),Hat.forEach(t),Aoo=r(Tye," (PoolFormer model)"),Tye.forEach(t),Loo=i(L),sg=n(L,"LI",{});var Mye=s(sg);Zne=n(Mye,"STRONG",{});var Uat=s(Zne);yoo=r(Uat,"prophetnet"),Uat.forEach(t),xoo=r(Mye," \u2014 "),lP=n(Mye,"A",{href:!0});var Jat=s(lP);$oo=r(Jat,"ProphetNetConfig"),Jat.forEach(t),koo=r(Mye," (ProphetNet model)"),Mye.forEach(t),Soo=i(L),lg=n(L,"LI",{});var Eye=s(lg);ese=n(Eye,"STRONG",{});var Yat=s(ese);Roo=r(Yat,"qdqbert"),Yat.forEach(t),Poo=r(Eye," \u2014 "),iP=n(Eye,"A",{href:!0});var Kat=s(iP);Boo=r(Kat,"QDQBertConfig"),Kat.forEach(t),Ioo=r(Eye," (QDQBert model)"),Eye.forEach(t),Noo=i(L),ig=n(L,"LI",{});var Cye=s(ig);ose=n(Cye,"STRONG",{});var Zat=s(ose);qoo=r(Zat,"rag"),Zat.forEach(t),joo=r(Cye," \u2014 "),dP=n(Cye,"A",{href:!0});var ent=s(dP);Doo=r(ent,"RagConfig"),ent.forEach(t),Goo=r(Cye," (RAG model)"),Cye.forEach(t),Ooo=i(L),dg=n(L,"LI",{});var wye=s(dg);rse=n(wye,"STRONG",{});var ont=s(rse);Voo=r(ont,"realm"),ont.forEach(t),Xoo=r(wye," \u2014 "),cP=n(wye,"A",{href:!0});var rnt=s(cP);zoo=r(rnt,"RealmConfig"),rnt.forEach(t),Qoo=r(wye," (REALM model)"),wye.forEach(t),Woo=i(L),cg=n(L,"LI",{});var Aye=s(cg);tse=n(Aye,"STRONG",{});var tnt=s(tse);Hoo=r(tnt,"reformer"),tnt.forEach(t),Uoo=r(Aye," \u2014 "),mP=n(Aye,"A",{href:!0});var ant=s(mP);Joo=r(ant,"ReformerConfig"),ant.forEach(t),Yoo=r(Aye," (Reformer model)"),Aye.forEach(t),Koo=i(L),mg=n(L,"LI",{});var Lye=s(mg);ase=n(Lye,"STRONG",{});var nnt=s(ase);Zoo=r(nnt,"regnet"),nnt.forEach(t),ero=r(Lye," \u2014 "),fP=n(Lye,"A",{href:!0});var snt=s(fP);oro=r(snt,"RegNetConfig"),snt.forEach(t),rro=r(Lye," (RegNet model)"),Lye.forEach(t),tro=i(L),fg=n(L,"LI",{});var yye=s(fg);nse=n(yye,"STRONG",{});var lnt=s(nse);aro=r(lnt,"rembert"),lnt.forEach(t),nro=r(yye," \u2014 "),gP=n(yye,"A",{href:!0});var int=s(gP);sro=r(int,"RemBertConfig"),int.forEach(t),lro=r(yye," (RemBERT model)"),yye.forEach(t),iro=i(L),gg=n(L,"LI",{});var xye=s(gg);sse=n(xye,"STRONG",{});var dnt=s(sse);dro=r(dnt,"resnet"),dnt.forEach(t),cro=r(xye," \u2014 "),hP=n(xye,"A",{href:!0});var cnt=s(hP);mro=r(cnt,"ResNetConfig"),cnt.forEach(t),fro=r(xye," (ResNet model)"),xye.forEach(t),gro=i(L),hg=n(L,"LI",{});var $ye=s(hg);lse=n($ye,"STRONG",{});var mnt=s(lse);hro=r(mnt,"retribert"),mnt.forEach(t),uro=r($ye," \u2014 "),uP=n($ye,"A",{href:!0});var fnt=s(uP);pro=r(fnt,"RetriBertConfig"),fnt.forEach(t),_ro=r($ye," (RetriBERT model)"),$ye.forEach(t),bro=i(L),ug=n(L,"LI",{});var kye=s(ug);ise=n(kye,"STRONG",{});var gnt=s(ise);vro=r(gnt,"roberta"),gnt.forEach(t),Fro=r(kye," \u2014 "),pP=n(kye,"A",{href:!0});var hnt=s(pP);Tro=r(hnt,"RobertaConfig"),hnt.forEach(t),Mro=r(kye," (RoBERTa model)"),kye.forEach(t),Ero=i(L),pg=n(L,"LI",{});var Sye=s(pg);dse=n(Sye,"STRONG",{});var unt=s(dse);Cro=r(unt,"roformer"),unt.forEach(t),wro=r(Sye," \u2014 "),_P=n(Sye,"A",{href:!0});var pnt=s(_P);Aro=r(pnt,"RoFormerConfig"),pnt.forEach(t),Lro=r(Sye," (RoFormer model)"),Sye.forEach(t),yro=i(L),_g=n(L,"LI",{});var Rye=s(_g);cse=n(Rye,"STRONG",{});var _nt=s(cse);xro=r(_nt,"segformer"),_nt.forEach(t),$ro=r(Rye," \u2014 "),bP=n(Rye,"A",{href:!0});var bnt=s(bP);kro=r(bnt,"SegformerConfig"),bnt.forEach(t),Sro=r(Rye," (SegFormer model)"),Rye.forEach(t),Rro=i(L),bg=n(L,"LI",{});var Pye=s(bg);mse=n(Pye,"STRONG",{});var vnt=s(mse);Pro=r(vnt,"sew"),vnt.forEach(t),Bro=r(Pye," \u2014 "),vP=n(Pye,"A",{href:!0});var Fnt=s(vP);Iro=r(Fnt,"SEWConfig"),Fnt.forEach(t),Nro=r(Pye," (SEW model)"),Pye.forEach(t),qro=i(L),vg=n(L,"LI",{});var Bye=s(vg);fse=n(Bye,"STRONG",{});var Tnt=s(fse);jro=r(Tnt,"sew-d"),Tnt.forEach(t),Dro=r(Bye," \u2014 "),FP=n(Bye,"A",{href:!0});var Mnt=s(FP);Gro=r(Mnt,"SEWDConfig"),Mnt.forEach(t),Oro=r(Bye," (SEW-D model)"),Bye.forEach(t),Vro=i(L),Fg=n(L,"LI",{});var Iye=s(Fg);gse=n(Iye,"STRONG",{});var Ent=s(gse);Xro=r(Ent,"speech-encoder-decoder"),Ent.forEach(t),zro=r(Iye," \u2014 "),TP=n(Iye,"A",{href:!0});var Cnt=s(TP);Qro=r(Cnt,"SpeechEncoderDecoderConfig"),Cnt.forEach(t),Wro=r(Iye," (Speech Encoder decoder model)"),Iye.forEach(t),Hro=i(L),Tg=n(L,"LI",{});var Nye=s(Tg);hse=n(Nye,"STRONG",{});var wnt=s(hse);Uro=r(wnt,"speech_to_text"),wnt.forEach(t),Jro=r(Nye," \u2014 "),MP=n(Nye,"A",{href:!0});var Ant=s(MP);Yro=r(Ant,"Speech2TextConfig"),Ant.forEach(t),Kro=r(Nye," (Speech2Text model)"),Nye.forEach(t),Zro=i(L),Mg=n(L,"LI",{});var qye=s(Mg);use=n(qye,"STRONG",{});var Lnt=s(use);eto=r(Lnt,"speech_to_text_2"),Lnt.forEach(t),oto=r(qye," \u2014 "),EP=n(qye,"A",{href:!0});var ynt=s(EP);rto=r(ynt,"Speech2Text2Config"),ynt.forEach(t),tto=r(qye," (Speech2Text2 model)"),qye.forEach(t),ato=i(L),Eg=n(L,"LI",{});var jye=s(Eg);pse=n(jye,"STRONG",{});var xnt=s(pse);nto=r(xnt,"splinter"),xnt.forEach(t),sto=r(jye," \u2014 "),CP=n(jye,"A",{href:!0});var $nt=s(CP);lto=r($nt,"SplinterConfig"),$nt.forEach(t),ito=r(jye," (Splinter model)"),jye.forEach(t),dto=i(L),Cg=n(L,"LI",{});var Dye=s(Cg);_se=n(Dye,"STRONG",{});var knt=s(_se);cto=r(knt,"squeezebert"),knt.forEach(t),mto=r(Dye," \u2014 "),wP=n(Dye,"A",{href:!0});var Snt=s(wP);fto=r(Snt,"SqueezeBertConfig"),Snt.forEach(t),gto=r(Dye," (SqueezeBERT model)"),Dye.forEach(t),hto=i(L),wg=n(L,"LI",{});var Gye=s(wg);bse=n(Gye,"STRONG",{});var Rnt=s(bse);uto=r(Rnt,"swin"),Rnt.forEach(t),pto=r(Gye," \u2014 "),AP=n(Gye,"A",{href:!0});var Pnt=s(AP);_to=r(Pnt,"SwinConfig"),Pnt.forEach(t),bto=r(Gye," (Swin Transformer model)"),Gye.forEach(t),vto=i(L),Ag=n(L,"LI",{});var Oye=s(Ag);vse=n(Oye,"STRONG",{});var Bnt=s(vse);Fto=r(Bnt,"t5"),Bnt.forEach(t),Tto=r(Oye," \u2014 "),LP=n(Oye,"A",{href:!0});var Int=s(LP);Mto=r(Int,"T5Config"),Int.forEach(t),Eto=r(Oye," (T5 model)"),Oye.forEach(t),Cto=i(L),Lg=n(L,"LI",{});var Vye=s(Lg);Fse=n(Vye,"STRONG",{});var Nnt=s(Fse);wto=r(Nnt,"tapas"),Nnt.forEach(t),Ato=r(Vye," \u2014 "),yP=n(Vye,"A",{href:!0});var qnt=s(yP);Lto=r(qnt,"TapasConfig"),qnt.forEach(t),yto=r(Vye," (TAPAS model)"),Vye.forEach(t),xto=i(L),yg=n(L,"LI",{});var Xye=s(yg);Tse=n(Xye,"STRONG",{});var jnt=s(Tse);$to=r(jnt,"trajectory_transformer"),jnt.forEach(t),kto=r(Xye," \u2014 "),xP=n(Xye,"A",{href:!0});var Dnt=s(xP);Sto=r(Dnt,"TrajectoryTransformerConfig"),Dnt.forEach(t),Rto=r(Xye," (Trajectory Transformer model)"),Xye.forEach(t),Pto=i(L),xg=n(L,"LI",{});var zye=s(xg);Mse=n(zye,"STRONG",{});var Gnt=s(Mse);Bto=r(Gnt,"transfo-xl"),Gnt.forEach(t),Ito=r(zye," \u2014 "),$P=n(zye,"A",{href:!0});var Ont=s($P);Nto=r(Ont,"TransfoXLConfig"),Ont.forEach(t),qto=r(zye," (Transformer-XL model)"),zye.forEach(t),jto=i(L),$g=n(L,"LI",{});var Qye=s($g);Ese=n(Qye,"STRONG",{});var Vnt=s(Ese);Dto=r(Vnt,"trocr"),Vnt.forEach(t),Gto=r(Qye," \u2014 "),kP=n(Qye,"A",{href:!0});var Xnt=s(kP);Oto=r(Xnt,"TrOCRConfig"),Xnt.forEach(t),Vto=r(Qye," (TrOCR model)"),Qye.forEach(t),Xto=i(L),kg=n(L,"LI",{});var Wye=s(kg);Cse=n(Wye,"STRONG",{});var znt=s(Cse);zto=r(znt,"unispeech"),znt.forEach(t),Qto=r(Wye," \u2014 "),SP=n(Wye,"A",{href:!0});var Qnt=s(SP);Wto=r(Qnt,"UniSpeechConfig"),Qnt.forEach(t),Hto=r(Wye," (UniSpeech model)"),Wye.forEach(t),Uto=i(L),Sg=n(L,"LI",{});var Hye=s(Sg);wse=n(Hye,"STRONG",{});var Wnt=s(wse);Jto=r(Wnt,"unispeech-sat"),Wnt.forEach(t),Yto=r(Hye," \u2014 "),RP=n(Hye,"A",{href:!0});var Hnt=s(RP);Kto=r(Hnt,"UniSpeechSatConfig"),Hnt.forEach(t),Zto=r(Hye," (UniSpeechSat model)"),Hye.forEach(t),eao=i(L),Rg=n(L,"LI",{});var Uye=s(Rg);Ase=n(Uye,"STRONG",{});var Unt=s(Ase);oao=r(Unt,"van"),Unt.forEach(t),rao=r(Uye," \u2014 "),PP=n(Uye,"A",{href:!0});var Jnt=s(PP);tao=r(Jnt,"VanConfig"),Jnt.forEach(t),aao=r(Uye," (VAN model)"),Uye.forEach(t),nao=i(L),Pg=n(L,"LI",{});var Jye=s(Pg);Lse=n(Jye,"STRONG",{});var Ynt=s(Lse);sao=r(Ynt,"vilt"),Ynt.forEach(t),lao=r(Jye," \u2014 "),BP=n(Jye,"A",{href:!0});var Knt=s(BP);iao=r(Knt,"ViltConfig"),Knt.forEach(t),dao=r(Jye," (ViLT model)"),Jye.forEach(t),cao=i(L),Bg=n(L,"LI",{});var Yye=s(Bg);yse=n(Yye,"STRONG",{});var Znt=s(yse);mao=r(Znt,"vision-encoder-decoder"),Znt.forEach(t),fao=r(Yye," \u2014 "),IP=n(Yye,"A",{href:!0});var est=s(IP);gao=r(est,"VisionEncoderDecoderConfig"),est.forEach(t),hao=r(Yye," (Vision Encoder decoder model)"),Yye.forEach(t),uao=i(L),Ig=n(L,"LI",{});var Kye=s(Ig);xse=n(Kye,"STRONG",{});var ost=s(xse);pao=r(ost,"vision-text-dual-encoder"),ost.forEach(t),_ao=r(Kye," \u2014 "),NP=n(Kye,"A",{href:!0});var rst=s(NP);bao=r(rst,"VisionTextDualEncoderConfig"),rst.forEach(t),vao=r(Kye," (VisionTextDualEncoder model)"),Kye.forEach(t),Fao=i(L),Ng=n(L,"LI",{});var Zye=s(Ng);$se=n(Zye,"STRONG",{});var tst=s($se);Tao=r(tst,"visual_bert"),tst.forEach(t),Mao=r(Zye," \u2014 "),qP=n(Zye,"A",{href:!0});var ast=s(qP);Eao=r(ast,"VisualBertConfig"),ast.forEach(t),Cao=r(Zye," (VisualBERT model)"),Zye.forEach(t),wao=i(L),qg=n(L,"LI",{});var e8e=s(qg);kse=n(e8e,"STRONG",{});var nst=s(kse);Aao=r(nst,"vit"),nst.forEach(t),Lao=r(e8e," \u2014 "),jP=n(e8e,"A",{href:!0});var sst=s(jP);yao=r(sst,"ViTConfig"),sst.forEach(t),xao=r(e8e," (ViT model)"),e8e.forEach(t),$ao=i(L),jg=n(L,"LI",{});var o8e=s(jg);Sse=n(o8e,"STRONG",{});var lst=s(Sse);kao=r(lst,"vit_mae"),lst.forEach(t),Sao=r(o8e," \u2014 "),DP=n(o8e,"A",{href:!0});var ist=s(DP);Rao=r(ist,"ViTMAEConfig"),ist.forEach(t),Pao=r(o8e," (ViTMAE model)"),o8e.forEach(t),Bao=i(L),Dg=n(L,"LI",{});var r8e=s(Dg);Rse=n(r8e,"STRONG",{});var dst=s(Rse);Iao=r(dst,"wav2vec2"),dst.forEach(t),Nao=r(r8e," \u2014 "),GP=n(r8e,"A",{href:!0});var cst=s(GP);qao=r(cst,"Wav2Vec2Config"),cst.forEach(t),jao=r(r8e," (Wav2Vec2 model)"),r8e.forEach(t),Dao=i(L),Gg=n(L,"LI",{});var t8e=s(Gg);Pse=n(t8e,"STRONG",{});var mst=s(Pse);Gao=r(mst,"wav2vec2-conformer"),mst.forEach(t),Oao=r(t8e," \u2014 "),OP=n(t8e,"A",{href:!0});var fst=s(OP);Vao=r(fst,"Wav2Vec2ConformerConfig"),fst.forEach(t),Xao=r(t8e," (Wav2Vec2-Conformer model)"),t8e.forEach(t),zao=i(L),Og=n(L,"LI",{});var a8e=s(Og);Bse=n(a8e,"STRONG",{});var gst=s(Bse);Qao=r(gst,"wavlm"),gst.forEach(t),Wao=r(a8e," \u2014 "),VP=n(a8e,"A",{href:!0});var hst=s(VP);Hao=r(hst,"WavLMConfig"),hst.forEach(t),Uao=r(a8e," (WavLM model)"),a8e.forEach(t),Jao=i(L),Vg=n(L,"LI",{});var n8e=s(Vg);Ise=n(n8e,"STRONG",{});var ust=s(Ise);Yao=r(ust,"xglm"),ust.forEach(t),Kao=r(n8e," \u2014 "),XP=n(n8e,"A",{href:!0});var pst=s(XP);Zao=r(pst,"XGLMConfig"),pst.forEach(t),eno=r(n8e," (XGLM model)"),n8e.forEach(t),ono=i(L),Xg=n(L,"LI",{});var s8e=s(Xg);Nse=n(s8e,"STRONG",{});var _st=s(Nse);rno=r(_st,"xlm"),_st.forEach(t),tno=r(s8e," \u2014 "),zP=n(s8e,"A",{href:!0});var bst=s(zP);ano=r(bst,"XLMConfig"),bst.forEach(t),nno=r(s8e," (XLM model)"),s8e.forEach(t),sno=i(L),zg=n(L,"LI",{});var l8e=s(zg);qse=n(l8e,"STRONG",{});var vst=s(qse);lno=r(vst,"xlm-prophetnet"),vst.forEach(t),ino=r(l8e," \u2014 "),QP=n(l8e,"A",{href:!0});var Fst=s(QP);dno=r(Fst,"XLMProphetNetConfig"),Fst.forEach(t),cno=r(l8e," (XLM-ProphetNet model)"),l8e.forEach(t),mno=i(L),Qg=n(L,"LI",{});var i8e=s(Qg);jse=n(i8e,"STRONG",{});var Tst=s(jse);fno=r(Tst,"xlm-roberta"),Tst.forEach(t),gno=r(i8e," \u2014 "),WP=n(i8e,"A",{href:!0});var Mst=s(WP);hno=r(Mst,"XLMRobertaConfig"),Mst.forEach(t),uno=r(i8e," (XLM-RoBERTa model)"),i8e.forEach(t),pno=i(L),Wg=n(L,"LI",{});var d8e=s(Wg);Dse=n(d8e,"STRONG",{});var Est=s(Dse);_no=r(Est,"xlm-roberta-xl"),Est.forEach(t),bno=r(d8e," \u2014 "),HP=n(d8e,"A",{href:!0});var Cst=s(HP);vno=r(Cst,"XLMRobertaXLConfig"),Cst.forEach(t),Fno=r(d8e," (XLM-RoBERTa-XL model)"),d8e.forEach(t),Tno=i(L),Hg=n(L,"LI",{});var c8e=s(Hg);Gse=n(c8e,"STRONG",{});var wst=s(Gse);Mno=r(wst,"xlnet"),wst.forEach(t),Eno=r(c8e," \u2014 "),UP=n(c8e,"A",{href:!0});var Ast=s(UP);Cno=r(Ast,"XLNetConfig"),Ast.forEach(t),wno=r(c8e," (XLNet model)"),c8e.forEach(t),Ano=i(L),Ug=n(L,"LI",{});var m8e=s(Ug);Ose=n(m8e,"STRONG",{});var Lst=s(Ose);Lno=r(Lst,"yolos"),Lst.forEach(t),yno=r(m8e," \u2014 "),JP=n(m8e,"A",{href:!0});var yst=s(JP);xno=r(yst,"YolosConfig"),yst.forEach(t),$no=r(m8e," (YOLOS model)"),m8e.forEach(t),kno=i(L),Jg=n(L,"LI",{});var f8e=s(Jg);Vse=n(f8e,"STRONG",{});var xst=s(Vse);Sno=r(xst,"yoso"),xst.forEach(t),Rno=r(f8e," \u2014 "),YP=n(f8e,"A",{href:!0});var $st=s(YP);Pno=r($st,"YosoConfig"),$st.forEach(t),Bno=r(f8e," (YOSO model)"),f8e.forEach(t),L.forEach(t),Ino=i(st),T(Yg.$$.fragment,st),st.forEach(t),Nno=i(nt),Kg=n(nt,"DIV",{class:!0});var tQe=s(Kg);T(my.$$.fragment,tQe),qno=i(tQe),Xse=n(tQe,"P",{});var kst=s(Xse);jno=r(kst,"Register a new configuration for this class."),kst.forEach(t),tQe.forEach(t),nt.forEach(t),aXe=i(m),Ni=n(m,"H2",{class:!0});var aQe=s(Ni);Zg=n(aQe,"A",{id:!0,class:!0,href:!0});var Sst=s(Zg);zse=n(Sst,"SPAN",{});var Rst=s(zse);T(fy.$$.fragment,Rst),Rst.forEach(t),Sst.forEach(t),Dno=i(aQe),Qse=n(aQe,"SPAN",{});var Pst=s(Qse);Gno=r(Pst,"AutoTokenizer"),Pst.forEach(t),aQe.forEach(t),nXe=i(m),Lo=n(m,"DIV",{class:!0});var Ks=s(Lo);T(gy.$$.fragment,Ks),Ono=i(Ks),hy=n(Ks,"P",{});var nQe=s(hy);Vno=r(nQe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),KP=n(nQe,"A",{href:!0});var Bst=s(KP);Xno=r(Bst,"AutoTokenizer.from_pretrained()"),Bst.forEach(t),zno=r(nQe," class method."),nQe.forEach(t),Qno=i(Ks),uy=n(Ks,"P",{});var sQe=s(uy);Wno=r(sQe,"This class cannot be instantiated directly using "),Wse=n(sQe,"CODE",{});var Ist=s(Wse);Hno=r(Ist,"__init__()"),Ist.forEach(t),Uno=r(sQe," (throws an error)."),sQe.forEach(t),Jno=i(Ks),yr=n(Ks,"DIV",{class:!0});var Zs=s(yr);T(py.$$.fragment,Zs),Yno=i(Zs),Hse=n(Zs,"P",{});var Nst=s(Hse);Kno=r(Nst,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Nst.forEach(t),Zno=i(Zs),Pa=n(Zs,"P",{});var s7=s(Pa);eso=r(s7,"The tokenizer class to instantiate is selected based on the "),Use=n(s7,"CODE",{});var qst=s(Use);oso=r(qst,"model_type"),qst.forEach(t),rso=r(s7,` property of the config object (either
passed as an argument or loaded from `),Jse=n(s7,"CODE",{});var jst=s(Jse);tso=r(jst,"pretrained_model_name_or_path"),jst.forEach(t),aso=r(s7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yse=n(s7,"CODE",{});var Dst=s(Yse);nso=r(Dst,"pretrained_model_name_or_path"),Dst.forEach(t),sso=r(s7,":"),s7.forEach(t),lso=i(Zs),k=n(Zs,"UL",{});var S=s(k);jn=n(S,"LI",{});var Mk=s(jn);Kse=n(Mk,"STRONG",{});var Gst=s(Kse);iso=r(Gst,"albert"),Gst.forEach(t),dso=r(Mk," \u2014 "),ZP=n(Mk,"A",{href:!0});var Ost=s(ZP);cso=r(Ost,"AlbertTokenizer"),Ost.forEach(t),mso=r(Mk," or "),eB=n(Mk,"A",{href:!0});var Vst=s(eB);fso=r(Vst,"AlbertTokenizerFast"),Vst.forEach(t),gso=r(Mk," (ALBERT model)"),Mk.forEach(t),hso=i(S),Dn=n(S,"LI",{});var Ek=s(Dn);Zse=n(Ek,"STRONG",{});var Xst=s(Zse);uso=r(Xst,"bart"),Xst.forEach(t),pso=r(Ek," \u2014 "),oB=n(Ek,"A",{href:!0});var zst=s(oB);_so=r(zst,"BartTokenizer"),zst.forEach(t),bso=r(Ek," or "),rB=n(Ek,"A",{href:!0});var Qst=s(rB);vso=r(Qst,"BartTokenizerFast"),Qst.forEach(t),Fso=r(Ek," (BART model)"),Ek.forEach(t),Tso=i(S),Gn=n(S,"LI",{});var Ck=s(Gn);ele=n(Ck,"STRONG",{});var Wst=s(ele);Mso=r(Wst,"barthez"),Wst.forEach(t),Eso=r(Ck," \u2014 "),tB=n(Ck,"A",{href:!0});var Hst=s(tB);Cso=r(Hst,"BarthezTokenizer"),Hst.forEach(t),wso=r(Ck," or "),aB=n(Ck,"A",{href:!0});var Ust=s(aB);Aso=r(Ust,"BarthezTokenizerFast"),Ust.forEach(t),Lso=r(Ck," (BARThez model)"),Ck.forEach(t),yso=i(S),eh=n(S,"LI",{});var g8e=s(eh);ole=n(g8e,"STRONG",{});var Jst=s(ole);xso=r(Jst,"bartpho"),Jst.forEach(t),$so=r(g8e," \u2014 "),nB=n(g8e,"A",{href:!0});var Yst=s(nB);kso=r(Yst,"BartphoTokenizer"),Yst.forEach(t),Sso=r(g8e," (BARTpho model)"),g8e.forEach(t),Rso=i(S),On=n(S,"LI",{});var wk=s(On);rle=n(wk,"STRONG",{});var Kst=s(rle);Pso=r(Kst,"bert"),Kst.forEach(t),Bso=r(wk," \u2014 "),sB=n(wk,"A",{href:!0});var Zst=s(sB);Iso=r(Zst,"BertTokenizer"),Zst.forEach(t),Nso=r(wk," or "),lB=n(wk,"A",{href:!0});var elt=s(lB);qso=r(elt,"BertTokenizerFast"),elt.forEach(t),jso=r(wk," (BERT model)"),wk.forEach(t),Dso=i(S),oh=n(S,"LI",{});var h8e=s(oh);tle=n(h8e,"STRONG",{});var olt=s(tle);Gso=r(olt,"bert-generation"),olt.forEach(t),Oso=r(h8e," \u2014 "),iB=n(h8e,"A",{href:!0});var rlt=s(iB);Vso=r(rlt,"BertGenerationTokenizer"),rlt.forEach(t),Xso=r(h8e," (Bert Generation model)"),h8e.forEach(t),zso=i(S),rh=n(S,"LI",{});var u8e=s(rh);ale=n(u8e,"STRONG",{});var tlt=s(ale);Qso=r(tlt,"bert-japanese"),tlt.forEach(t),Wso=r(u8e," \u2014 "),dB=n(u8e,"A",{href:!0});var alt=s(dB);Hso=r(alt,"BertJapaneseTokenizer"),alt.forEach(t),Uso=r(u8e," (BertJapanese model)"),u8e.forEach(t),Jso=i(S),th=n(S,"LI",{});var p8e=s(th);nle=n(p8e,"STRONG",{});var nlt=s(nle);Yso=r(nlt,"bertweet"),nlt.forEach(t),Kso=r(p8e," \u2014 "),cB=n(p8e,"A",{href:!0});var slt=s(cB);Zso=r(slt,"BertweetTokenizer"),slt.forEach(t),elo=r(p8e," (BERTweet model)"),p8e.forEach(t),olo=i(S),Vn=n(S,"LI",{});var Ak=s(Vn);sle=n(Ak,"STRONG",{});var llt=s(sle);rlo=r(llt,"big_bird"),llt.forEach(t),tlo=r(Ak," \u2014 "),mB=n(Ak,"A",{href:!0});var ilt=s(mB);alo=r(ilt,"BigBirdTokenizer"),ilt.forEach(t),nlo=r(Ak," or "),fB=n(Ak,"A",{href:!0});var dlt=s(fB);slo=r(dlt,"BigBirdTokenizerFast"),dlt.forEach(t),llo=r(Ak," (BigBird model)"),Ak.forEach(t),ilo=i(S),Xn=n(S,"LI",{});var Lk=s(Xn);lle=n(Lk,"STRONG",{});var clt=s(lle);dlo=r(clt,"bigbird_pegasus"),clt.forEach(t),clo=r(Lk," \u2014 "),gB=n(Lk,"A",{href:!0});var mlt=s(gB);mlo=r(mlt,"PegasusTokenizer"),mlt.forEach(t),flo=r(Lk," or "),hB=n(Lk,"A",{href:!0});var flt=s(hB);glo=r(flt,"PegasusTokenizerFast"),flt.forEach(t),hlo=r(Lk," (BigBird-Pegasus model)"),Lk.forEach(t),ulo=i(S),zn=n(S,"LI",{});var yk=s(zn);ile=n(yk,"STRONG",{});var glt=s(ile);plo=r(glt,"blenderbot"),glt.forEach(t),_lo=r(yk," \u2014 "),uB=n(yk,"A",{href:!0});var hlt=s(uB);blo=r(hlt,"BlenderbotTokenizer"),hlt.forEach(t),vlo=r(yk," or "),pB=n(yk,"A",{href:!0});var ult=s(pB);Flo=r(ult,"BlenderbotTokenizerFast"),ult.forEach(t),Tlo=r(yk," (Blenderbot model)"),yk.forEach(t),Mlo=i(S),ah=n(S,"LI",{});var _8e=s(ah);dle=n(_8e,"STRONG",{});var plt=s(dle);Elo=r(plt,"blenderbot-small"),plt.forEach(t),Clo=r(_8e," \u2014 "),_B=n(_8e,"A",{href:!0});var _lt=s(_B);wlo=r(_lt,"BlenderbotSmallTokenizer"),_lt.forEach(t),Alo=r(_8e," (BlenderbotSmall model)"),_8e.forEach(t),Llo=i(S),nh=n(S,"LI",{});var b8e=s(nh);cle=n(b8e,"STRONG",{});var blt=s(cle);ylo=r(blt,"bloom"),blt.forEach(t),xlo=r(b8e," \u2014 "),bB=n(b8e,"A",{href:!0});var vlt=s(bB);$lo=r(vlt,"BloomTokenizerFast"),vlt.forEach(t),klo=r(b8e," (BLOOM model)"),b8e.forEach(t),Slo=i(S),sh=n(S,"LI",{});var v8e=s(sh);mle=n(v8e,"STRONG",{});var Flt=s(mle);Rlo=r(Flt,"byt5"),Flt.forEach(t),Plo=r(v8e," \u2014 "),vB=n(v8e,"A",{href:!0});var Tlt=s(vB);Blo=r(Tlt,"ByT5Tokenizer"),Tlt.forEach(t),Ilo=r(v8e," (ByT5 model)"),v8e.forEach(t),Nlo=i(S),Qn=n(S,"LI",{});var xk=s(Qn);fle=n(xk,"STRONG",{});var Mlt=s(fle);qlo=r(Mlt,"camembert"),Mlt.forEach(t),jlo=r(xk," \u2014 "),FB=n(xk,"A",{href:!0});var Elt=s(FB);Dlo=r(Elt,"CamembertTokenizer"),Elt.forEach(t),Glo=r(xk," or "),TB=n(xk,"A",{href:!0});var Clt=s(TB);Olo=r(Clt,"CamembertTokenizerFast"),Clt.forEach(t),Vlo=r(xk," (CamemBERT model)"),xk.forEach(t),Xlo=i(S),lh=n(S,"LI",{});var F8e=s(lh);gle=n(F8e,"STRONG",{});var wlt=s(gle);zlo=r(wlt,"canine"),wlt.forEach(t),Qlo=r(F8e," \u2014 "),MB=n(F8e,"A",{href:!0});var Alt=s(MB);Wlo=r(Alt,"CanineTokenizer"),Alt.forEach(t),Hlo=r(F8e," (CANINE model)"),F8e.forEach(t),Ulo=i(S),Wn=n(S,"LI",{});var $k=s(Wn);hle=n($k,"STRONG",{});var Llt=s(hle);Jlo=r(Llt,"clip"),Llt.forEach(t),Ylo=r($k," \u2014 "),EB=n($k,"A",{href:!0});var ylt=s(EB);Klo=r(ylt,"CLIPTokenizer"),ylt.forEach(t),Zlo=r($k," or "),CB=n($k,"A",{href:!0});var xlt=s(CB);eio=r(xlt,"CLIPTokenizerFast"),xlt.forEach(t),oio=r($k," (CLIP model)"),$k.forEach(t),rio=i(S),Hn=n(S,"LI",{});var kk=s(Hn);ule=n(kk,"STRONG",{});var $lt=s(ule);tio=r($lt,"codegen"),$lt.forEach(t),aio=r(kk," \u2014 "),wB=n(kk,"A",{href:!0});var klt=s(wB);nio=r(klt,"CodeGenTokenizer"),klt.forEach(t),sio=r(kk," or "),AB=n(kk,"A",{href:!0});var Slt=s(AB);lio=r(Slt,"CodeGenTokenizerFast"),Slt.forEach(t),iio=r(kk," (CodeGen model)"),kk.forEach(t),dio=i(S),Un=n(S,"LI",{});var Sk=s(Un);ple=n(Sk,"STRONG",{});var Rlt=s(ple);cio=r(Rlt,"convbert"),Rlt.forEach(t),mio=r(Sk," \u2014 "),LB=n(Sk,"A",{href:!0});var Plt=s(LB);fio=r(Plt,"ConvBertTokenizer"),Plt.forEach(t),gio=r(Sk," or "),yB=n(Sk,"A",{href:!0});var Blt=s(yB);hio=r(Blt,"ConvBertTokenizerFast"),Blt.forEach(t),uio=r(Sk," (ConvBERT model)"),Sk.forEach(t),pio=i(S),Jn=n(S,"LI",{});var Rk=s(Jn);_le=n(Rk,"STRONG",{});var Ilt=s(_le);_io=r(Ilt,"cpm"),Ilt.forEach(t),bio=r(Rk," \u2014 "),xB=n(Rk,"A",{href:!0});var Nlt=s(xB);vio=r(Nlt,"CpmTokenizer"),Nlt.forEach(t),Fio=r(Rk," or "),$B=n(Rk,"A",{href:!0});var qlt=s($B);Tio=r(qlt,"CpmTokenizerFast"),qlt.forEach(t),Mio=r(Rk," (CPM model)"),Rk.forEach(t),Eio=i(S),ih=n(S,"LI",{});var T8e=s(ih);ble=n(T8e,"STRONG",{});var jlt=s(ble);Cio=r(jlt,"ctrl"),jlt.forEach(t),wio=r(T8e," \u2014 "),kB=n(T8e,"A",{href:!0});var Dlt=s(kB);Aio=r(Dlt,"CTRLTokenizer"),Dlt.forEach(t),Lio=r(T8e," (CTRL model)"),T8e.forEach(t),yio=i(S),Yn=n(S,"LI",{});var Pk=s(Yn);vle=n(Pk,"STRONG",{});var Glt=s(vle);xio=r(Glt,"data2vec-text"),Glt.forEach(t),$io=r(Pk," \u2014 "),SB=n(Pk,"A",{href:!0});var Olt=s(SB);kio=r(Olt,"RobertaTokenizer"),Olt.forEach(t),Sio=r(Pk," or "),RB=n(Pk,"A",{href:!0});var Vlt=s(RB);Rio=r(Vlt,"RobertaTokenizerFast"),Vlt.forEach(t),Pio=r(Pk," (Data2VecText model)"),Pk.forEach(t),Bio=i(S),Kn=n(S,"LI",{});var Bk=s(Kn);Fle=n(Bk,"STRONG",{});var Xlt=s(Fle);Iio=r(Xlt,"deberta"),Xlt.forEach(t),Nio=r(Bk," \u2014 "),PB=n(Bk,"A",{href:!0});var zlt=s(PB);qio=r(zlt,"DebertaTokenizer"),zlt.forEach(t),jio=r(Bk," or "),BB=n(Bk,"A",{href:!0});var Qlt=s(BB);Dio=r(Qlt,"DebertaTokenizerFast"),Qlt.forEach(t),Gio=r(Bk," (DeBERTa model)"),Bk.forEach(t),Oio=i(S),Zn=n(S,"LI",{});var Ik=s(Zn);Tle=n(Ik,"STRONG",{});var Wlt=s(Tle);Vio=r(Wlt,"deberta-v2"),Wlt.forEach(t),Xio=r(Ik," \u2014 "),IB=n(Ik,"A",{href:!0});var Hlt=s(IB);zio=r(Hlt,"DebertaV2Tokenizer"),Hlt.forEach(t),Qio=r(Ik," or "),NB=n(Ik,"A",{href:!0});var Ult=s(NB);Wio=r(Ult,"DebertaV2TokenizerFast"),Ult.forEach(t),Hio=r(Ik," (DeBERTa-v2 model)"),Ik.forEach(t),Uio=i(S),es=n(S,"LI",{});var Nk=s(es);Mle=n(Nk,"STRONG",{});var Jlt=s(Mle);Jio=r(Jlt,"distilbert"),Jlt.forEach(t),Yio=r(Nk," \u2014 "),qB=n(Nk,"A",{href:!0});var Ylt=s(qB);Kio=r(Ylt,"DistilBertTokenizer"),Ylt.forEach(t),Zio=r(Nk," or "),jB=n(Nk,"A",{href:!0});var Klt=s(jB);edo=r(Klt,"DistilBertTokenizerFast"),Klt.forEach(t),odo=r(Nk," (DistilBERT model)"),Nk.forEach(t),rdo=i(S),os=n(S,"LI",{});var qk=s(os);Ele=n(qk,"STRONG",{});var Zlt=s(Ele);tdo=r(Zlt,"dpr"),Zlt.forEach(t),ado=r(qk," \u2014 "),DB=n(qk,"A",{href:!0});var eit=s(DB);ndo=r(eit,"DPRQuestionEncoderTokenizer"),eit.forEach(t),sdo=r(qk," or "),GB=n(qk,"A",{href:!0});var oit=s(GB);ldo=r(oit,"DPRQuestionEncoderTokenizerFast"),oit.forEach(t),ido=r(qk," (DPR model)"),qk.forEach(t),ddo=i(S),rs=n(S,"LI",{});var jk=s(rs);Cle=n(jk,"STRONG",{});var rit=s(Cle);cdo=r(rit,"electra"),rit.forEach(t),mdo=r(jk," \u2014 "),OB=n(jk,"A",{href:!0});var tit=s(OB);fdo=r(tit,"ElectraTokenizer"),tit.forEach(t),gdo=r(jk," or "),VB=n(jk,"A",{href:!0});var ait=s(VB);hdo=r(ait,"ElectraTokenizerFast"),ait.forEach(t),udo=r(jk," (ELECTRA model)"),jk.forEach(t),pdo=i(S),dh=n(S,"LI",{});var M8e=s(dh);wle=n(M8e,"STRONG",{});var nit=s(wle);_do=r(nit,"flaubert"),nit.forEach(t),bdo=r(M8e," \u2014 "),XB=n(M8e,"A",{href:!0});var sit=s(XB);vdo=r(sit,"FlaubertTokenizer"),sit.forEach(t),Fdo=r(M8e," (FlauBERT model)"),M8e.forEach(t),Tdo=i(S),ts=n(S,"LI",{});var Dk=s(ts);Ale=n(Dk,"STRONG",{});var lit=s(Ale);Mdo=r(lit,"fnet"),lit.forEach(t),Edo=r(Dk," \u2014 "),zB=n(Dk,"A",{href:!0});var iit=s(zB);Cdo=r(iit,"FNetTokenizer"),iit.forEach(t),wdo=r(Dk," or "),QB=n(Dk,"A",{href:!0});var dit=s(QB);Ado=r(dit,"FNetTokenizerFast"),dit.forEach(t),Ldo=r(Dk," (FNet model)"),Dk.forEach(t),ydo=i(S),ch=n(S,"LI",{});var E8e=s(ch);Lle=n(E8e,"STRONG",{});var cit=s(Lle);xdo=r(cit,"fsmt"),cit.forEach(t),$do=r(E8e," \u2014 "),WB=n(E8e,"A",{href:!0});var mit=s(WB);kdo=r(mit,"FSMTTokenizer"),mit.forEach(t),Sdo=r(E8e," (FairSeq Machine-Translation model)"),E8e.forEach(t),Rdo=i(S),as=n(S,"LI",{});var Gk=s(as);yle=n(Gk,"STRONG",{});var fit=s(yle);Pdo=r(fit,"funnel"),fit.forEach(t),Bdo=r(Gk," \u2014 "),HB=n(Gk,"A",{href:!0});var git=s(HB);Ido=r(git,"FunnelTokenizer"),git.forEach(t),Ndo=r(Gk," or "),UB=n(Gk,"A",{href:!0});var hit=s(UB);qdo=r(hit,"FunnelTokenizerFast"),hit.forEach(t),jdo=r(Gk," (Funnel Transformer model)"),Gk.forEach(t),Ddo=i(S),ns=n(S,"LI",{});var Ok=s(ns);xle=n(Ok,"STRONG",{});var uit=s(xle);Gdo=r(uit,"gpt2"),uit.forEach(t),Odo=r(Ok," \u2014 "),JB=n(Ok,"A",{href:!0});var pit=s(JB);Vdo=r(pit,"GPT2Tokenizer"),pit.forEach(t),Xdo=r(Ok," or "),YB=n(Ok,"A",{href:!0});var _it=s(YB);zdo=r(_it,"GPT2TokenizerFast"),_it.forEach(t),Qdo=r(Ok," (OpenAI GPT-2 model)"),Ok.forEach(t),Wdo=i(S),ss=n(S,"LI",{});var Vk=s(ss);$le=n(Vk,"STRONG",{});var bit=s($le);Hdo=r(bit,"gpt_neo"),bit.forEach(t),Udo=r(Vk," \u2014 "),KB=n(Vk,"A",{href:!0});var vit=s(KB);Jdo=r(vit,"GPT2Tokenizer"),vit.forEach(t),Ydo=r(Vk," or "),ZB=n(Vk,"A",{href:!0});var Fit=s(ZB);Kdo=r(Fit,"GPT2TokenizerFast"),Fit.forEach(t),Zdo=r(Vk," (GPT Neo model)"),Vk.forEach(t),eco=i(S),mh=n(S,"LI",{});var C8e=s(mh);kle=n(C8e,"STRONG",{});var Tit=s(kle);oco=r(Tit,"gpt_neox"),Tit.forEach(t),rco=r(C8e," \u2014 "),eI=n(C8e,"A",{href:!0});var Mit=s(eI);tco=r(Mit,"GPTNeoXTokenizerFast"),Mit.forEach(t),aco=r(C8e," (GPT NeoX model)"),C8e.forEach(t),nco=i(S),ls=n(S,"LI",{});var Xk=s(ls);Sle=n(Xk,"STRONG",{});var Eit=s(Sle);sco=r(Eit,"gptj"),Eit.forEach(t),lco=r(Xk," \u2014 "),oI=n(Xk,"A",{href:!0});var Cit=s(oI);ico=r(Cit,"GPT2Tokenizer"),Cit.forEach(t),dco=r(Xk," or "),rI=n(Xk,"A",{href:!0});var wit=s(rI);cco=r(wit,"GPT2TokenizerFast"),wit.forEach(t),mco=r(Xk," (GPT-J model)"),Xk.forEach(t),fco=i(S),is=n(S,"LI",{});var zk=s(is);Rle=n(zk,"STRONG",{});var Ait=s(Rle);gco=r(Ait,"groupvit"),Ait.forEach(t),hco=r(zk," \u2014 "),tI=n(zk,"A",{href:!0});var Lit=s(tI);uco=r(Lit,"CLIPTokenizer"),Lit.forEach(t),pco=r(zk," or "),aI=n(zk,"A",{href:!0});var yit=s(aI);_co=r(yit,"CLIPTokenizerFast"),yit.forEach(t),bco=r(zk," (GroupViT model)"),zk.forEach(t),vco=i(S),ds=n(S,"LI",{});var Qk=s(ds);Ple=n(Qk,"STRONG",{});var xit=s(Ple);Fco=r(xit,"herbert"),xit.forEach(t),Tco=r(Qk," \u2014 "),nI=n(Qk,"A",{href:!0});var $it=s(nI);Mco=r($it,"HerbertTokenizer"),$it.forEach(t),Eco=r(Qk," or "),sI=n(Qk,"A",{href:!0});var kit=s(sI);Cco=r(kit,"HerbertTokenizerFast"),kit.forEach(t),wco=r(Qk," (HerBERT model)"),Qk.forEach(t),Aco=i(S),fh=n(S,"LI",{});var w8e=s(fh);Ble=n(w8e,"STRONG",{});var Sit=s(Ble);Lco=r(Sit,"hubert"),Sit.forEach(t),yco=r(w8e," \u2014 "),lI=n(w8e,"A",{href:!0});var Rit=s(lI);xco=r(Rit,"Wav2Vec2CTCTokenizer"),Rit.forEach(t),$co=r(w8e," (Hubert model)"),w8e.forEach(t),kco=i(S),cs=n(S,"LI",{});var Wk=s(cs);Ile=n(Wk,"STRONG",{});var Pit=s(Ile);Sco=r(Pit,"ibert"),Pit.forEach(t),Rco=r(Wk," \u2014 "),iI=n(Wk,"A",{href:!0});var Bit=s(iI);Pco=r(Bit,"RobertaTokenizer"),Bit.forEach(t),Bco=r(Wk," or "),dI=n(Wk,"A",{href:!0});var Iit=s(dI);Ico=r(Iit,"RobertaTokenizerFast"),Iit.forEach(t),Nco=r(Wk," (I-BERT model)"),Wk.forEach(t),qco=i(S),ms=n(S,"LI",{});var Hk=s(ms);Nle=n(Hk,"STRONG",{});var Nit=s(Nle);jco=r(Nit,"layoutlm"),Nit.forEach(t),Dco=r(Hk," \u2014 "),cI=n(Hk,"A",{href:!0});var qit=s(cI);Gco=r(qit,"LayoutLMTokenizer"),qit.forEach(t),Oco=r(Hk," or "),mI=n(Hk,"A",{href:!0});var jit=s(mI);Vco=r(jit,"LayoutLMTokenizerFast"),jit.forEach(t),Xco=r(Hk," (LayoutLM model)"),Hk.forEach(t),zco=i(S),fs=n(S,"LI",{});var Uk=s(fs);qle=n(Uk,"STRONG",{});var Dit=s(qle);Qco=r(Dit,"layoutlmv2"),Dit.forEach(t),Wco=r(Uk," \u2014 "),fI=n(Uk,"A",{href:!0});var Git=s(fI);Hco=r(Git,"LayoutLMv2Tokenizer"),Git.forEach(t),Uco=r(Uk," or "),gI=n(Uk,"A",{href:!0});var Oit=s(gI);Jco=r(Oit,"LayoutLMv2TokenizerFast"),Oit.forEach(t),Yco=r(Uk," (LayoutLMv2 model)"),Uk.forEach(t),Kco=i(S),gs=n(S,"LI",{});var Jk=s(gs);jle=n(Jk,"STRONG",{});var Vit=s(jle);Zco=r(Vit,"layoutlmv3"),Vit.forEach(t),emo=r(Jk," \u2014 "),hI=n(Jk,"A",{href:!0});var Xit=s(hI);omo=r(Xit,"LayoutLMv3Tokenizer"),Xit.forEach(t),rmo=r(Jk," or "),uI=n(Jk,"A",{href:!0});var zit=s(uI);tmo=r(zit,"LayoutLMv3TokenizerFast"),zit.forEach(t),amo=r(Jk," (LayoutLMv3 model)"),Jk.forEach(t),nmo=i(S),hs=n(S,"LI",{});var Yk=s(hs);Dle=n(Yk,"STRONG",{});var Qit=s(Dle);smo=r(Qit,"layoutxlm"),Qit.forEach(t),lmo=r(Yk," \u2014 "),pI=n(Yk,"A",{href:!0});var Wit=s(pI);imo=r(Wit,"LayoutXLMTokenizer"),Wit.forEach(t),dmo=r(Yk," or "),_I=n(Yk,"A",{href:!0});var Hit=s(_I);cmo=r(Hit,"LayoutXLMTokenizerFast"),Hit.forEach(t),mmo=r(Yk," (LayoutXLM model)"),Yk.forEach(t),fmo=i(S),us=n(S,"LI",{});var Kk=s(us);Gle=n(Kk,"STRONG",{});var Uit=s(Gle);gmo=r(Uit,"led"),Uit.forEach(t),hmo=r(Kk," \u2014 "),bI=n(Kk,"A",{href:!0});var Jit=s(bI);umo=r(Jit,"LEDTokenizer"),Jit.forEach(t),pmo=r(Kk," or "),vI=n(Kk,"A",{href:!0});var Yit=s(vI);_mo=r(Yit,"LEDTokenizerFast"),Yit.forEach(t),bmo=r(Kk," (LED model)"),Kk.forEach(t),vmo=i(S),ps=n(S,"LI",{});var Zk=s(ps);Ole=n(Zk,"STRONG",{});var Kit=s(Ole);Fmo=r(Kit,"longformer"),Kit.forEach(t),Tmo=r(Zk," \u2014 "),FI=n(Zk,"A",{href:!0});var Zit=s(FI);Mmo=r(Zit,"LongformerTokenizer"),Zit.forEach(t),Emo=r(Zk," or "),TI=n(Zk,"A",{href:!0});var edt=s(TI);Cmo=r(edt,"LongformerTokenizerFast"),edt.forEach(t),wmo=r(Zk," (Longformer model)"),Zk.forEach(t),Amo=i(S),_s=n(S,"LI",{});var eS=s(_s);Vle=n(eS,"STRONG",{});var odt=s(Vle);Lmo=r(odt,"longt5"),odt.forEach(t),ymo=r(eS," \u2014 "),MI=n(eS,"A",{href:!0});var rdt=s(MI);xmo=r(rdt,"T5Tokenizer"),rdt.forEach(t),$mo=r(eS," or "),EI=n(eS,"A",{href:!0});var tdt=s(EI);kmo=r(tdt,"T5TokenizerFast"),tdt.forEach(t),Smo=r(eS," (LongT5 model)"),eS.forEach(t),Rmo=i(S),gh=n(S,"LI",{});var A8e=s(gh);Xle=n(A8e,"STRONG",{});var adt=s(Xle);Pmo=r(adt,"luke"),adt.forEach(t),Bmo=r(A8e," \u2014 "),CI=n(A8e,"A",{href:!0});var ndt=s(CI);Imo=r(ndt,"LukeTokenizer"),ndt.forEach(t),Nmo=r(A8e," (LUKE model)"),A8e.forEach(t),qmo=i(S),bs=n(S,"LI",{});var oS=s(bs);zle=n(oS,"STRONG",{});var sdt=s(zle);jmo=r(sdt,"lxmert"),sdt.forEach(t),Dmo=r(oS," \u2014 "),wI=n(oS,"A",{href:!0});var ldt=s(wI);Gmo=r(ldt,"LxmertTokenizer"),ldt.forEach(t),Omo=r(oS," or "),AI=n(oS,"A",{href:!0});var idt=s(AI);Vmo=r(idt,"LxmertTokenizerFast"),idt.forEach(t),Xmo=r(oS," (LXMERT model)"),oS.forEach(t),zmo=i(S),hh=n(S,"LI",{});var L8e=s(hh);Qle=n(L8e,"STRONG",{});var ddt=s(Qle);Qmo=r(ddt,"m2m_100"),ddt.forEach(t),Wmo=r(L8e," \u2014 "),LI=n(L8e,"A",{href:!0});var cdt=s(LI);Hmo=r(cdt,"M2M100Tokenizer"),cdt.forEach(t),Umo=r(L8e," (M2M100 model)"),L8e.forEach(t),Jmo=i(S),uh=n(S,"LI",{});var y8e=s(uh);Wle=n(y8e,"STRONG",{});var mdt=s(Wle);Ymo=r(mdt,"marian"),mdt.forEach(t),Kmo=r(y8e," \u2014 "),yI=n(y8e,"A",{href:!0});var fdt=s(yI);Zmo=r(fdt,"MarianTokenizer"),fdt.forEach(t),efo=r(y8e," (Marian model)"),y8e.forEach(t),ofo=i(S),vs=n(S,"LI",{});var rS=s(vs);Hle=n(rS,"STRONG",{});var gdt=s(Hle);rfo=r(gdt,"mbart"),gdt.forEach(t),tfo=r(rS," \u2014 "),xI=n(rS,"A",{href:!0});var hdt=s(xI);afo=r(hdt,"MBartTokenizer"),hdt.forEach(t),nfo=r(rS," or "),$I=n(rS,"A",{href:!0});var udt=s($I);sfo=r(udt,"MBartTokenizerFast"),udt.forEach(t),lfo=r(rS," (mBART model)"),rS.forEach(t),ifo=i(S),Fs=n(S,"LI",{});var tS=s(Fs);Ule=n(tS,"STRONG",{});var pdt=s(Ule);dfo=r(pdt,"mbart50"),pdt.forEach(t),cfo=r(tS," \u2014 "),kI=n(tS,"A",{href:!0});var _dt=s(kI);mfo=r(_dt,"MBart50Tokenizer"),_dt.forEach(t),ffo=r(tS," or "),SI=n(tS,"A",{href:!0});var bdt=s(SI);gfo=r(bdt,"MBart50TokenizerFast"),bdt.forEach(t),hfo=r(tS," (mBART-50 model)"),tS.forEach(t),ufo=i(S),Ts=n(S,"LI",{});var aS=s(Ts);Jle=n(aS,"STRONG",{});var vdt=s(Jle);pfo=r(vdt,"megatron-bert"),vdt.forEach(t),_fo=r(aS," \u2014 "),RI=n(aS,"A",{href:!0});var Fdt=s(RI);bfo=r(Fdt,"BertTokenizer"),Fdt.forEach(t),vfo=r(aS," or "),PI=n(aS,"A",{href:!0});var Tdt=s(PI);Ffo=r(Tdt,"BertTokenizerFast"),Tdt.forEach(t),Tfo=r(aS," (Megatron-BERT model)"),aS.forEach(t),Mfo=i(S),ph=n(S,"LI",{});var x8e=s(ph);Yle=n(x8e,"STRONG",{});var Mdt=s(Yle);Efo=r(Mdt,"mluke"),Mdt.forEach(t),Cfo=r(x8e," \u2014 "),BI=n(x8e,"A",{href:!0});var Edt=s(BI);wfo=r(Edt,"MLukeTokenizer"),Edt.forEach(t),Afo=r(x8e," (mLUKE model)"),x8e.forEach(t),Lfo=i(S),Ms=n(S,"LI",{});var nS=s(Ms);Kle=n(nS,"STRONG",{});var Cdt=s(Kle);yfo=r(Cdt,"mobilebert"),Cdt.forEach(t),xfo=r(nS," \u2014 "),II=n(nS,"A",{href:!0});var wdt=s(II);$fo=r(wdt,"MobileBertTokenizer"),wdt.forEach(t),kfo=r(nS," or "),NI=n(nS,"A",{href:!0});var Adt=s(NI);Sfo=r(Adt,"MobileBertTokenizerFast"),Adt.forEach(t),Rfo=r(nS," (MobileBERT model)"),nS.forEach(t),Pfo=i(S),Es=n(S,"LI",{});var sS=s(Es);Zle=n(sS,"STRONG",{});var Ldt=s(Zle);Bfo=r(Ldt,"mpnet"),Ldt.forEach(t),Ifo=r(sS," \u2014 "),qI=n(sS,"A",{href:!0});var ydt=s(qI);Nfo=r(ydt,"MPNetTokenizer"),ydt.forEach(t),qfo=r(sS," or "),jI=n(sS,"A",{href:!0});var xdt=s(jI);jfo=r(xdt,"MPNetTokenizerFast"),xdt.forEach(t),Dfo=r(sS," (MPNet model)"),sS.forEach(t),Gfo=i(S),Cs=n(S,"LI",{});var lS=s(Cs);eie=n(lS,"STRONG",{});var $dt=s(eie);Ofo=r($dt,"mt5"),$dt.forEach(t),Vfo=r(lS," \u2014 "),DI=n(lS,"A",{href:!0});var kdt=s(DI);Xfo=r(kdt,"MT5Tokenizer"),kdt.forEach(t),zfo=r(lS," or "),GI=n(lS,"A",{href:!0});var Sdt=s(GI);Qfo=r(Sdt,"MT5TokenizerFast"),Sdt.forEach(t),Wfo=r(lS," (MT5 model)"),lS.forEach(t),Hfo=i(S),ws=n(S,"LI",{});var iS=s(ws);oie=n(iS,"STRONG",{});var Rdt=s(oie);Ufo=r(Rdt,"mvp"),Rdt.forEach(t),Jfo=r(iS," \u2014 "),OI=n(iS,"A",{href:!0});var Pdt=s(OI);Yfo=r(Pdt,"MvpTokenizer"),Pdt.forEach(t),Kfo=r(iS," or "),VI=n(iS,"A",{href:!0});var Bdt=s(VI);Zfo=r(Bdt,"MvpTokenizerFast"),Bdt.forEach(t),ego=r(iS," (MVP model)"),iS.forEach(t),ogo=i(S),As=n(S,"LI",{});var dS=s(As);rie=n(dS,"STRONG",{});var Idt=s(rie);rgo=r(Idt,"nezha"),Idt.forEach(t),tgo=r(dS," \u2014 "),XI=n(dS,"A",{href:!0});var Ndt=s(XI);ago=r(Ndt,"BertTokenizer"),Ndt.forEach(t),ngo=r(dS," or "),zI=n(dS,"A",{href:!0});var qdt=s(zI);sgo=r(qdt,"BertTokenizerFast"),qdt.forEach(t),lgo=r(dS," (Nezha model)"),dS.forEach(t),igo=i(S),Ls=n(S,"LI",{});var cS=s(Ls);tie=n(cS,"STRONG",{});var jdt=s(tie);dgo=r(jdt,"nystromformer"),jdt.forEach(t),cgo=r(cS," \u2014 "),QI=n(cS,"A",{href:!0});var Ddt=s(QI);mgo=r(Ddt,"AlbertTokenizer"),Ddt.forEach(t),fgo=r(cS," or "),WI=n(cS,"A",{href:!0});var Gdt=s(WI);ggo=r(Gdt,"AlbertTokenizerFast"),Gdt.forEach(t),hgo=r(cS," (Nystr\xF6mformer model)"),cS.forEach(t),ugo=i(S),ys=n(S,"LI",{});var mS=s(ys);aie=n(mS,"STRONG",{});var Odt=s(aie);pgo=r(Odt,"openai-gpt"),Odt.forEach(t),_go=r(mS," \u2014 "),HI=n(mS,"A",{href:!0});var Vdt=s(HI);bgo=r(Vdt,"OpenAIGPTTokenizer"),Vdt.forEach(t),vgo=r(mS," or "),UI=n(mS,"A",{href:!0});var Xdt=s(UI);Fgo=r(Xdt,"OpenAIGPTTokenizerFast"),Xdt.forEach(t),Tgo=r(mS," (OpenAI GPT model)"),mS.forEach(t),Mgo=i(S),_h=n(S,"LI",{});var $8e=s(_h);nie=n($8e,"STRONG",{});var zdt=s(nie);Ego=r(zdt,"opt"),zdt.forEach(t),Cgo=r($8e," \u2014 "),JI=n($8e,"A",{href:!0});var Qdt=s(JI);wgo=r(Qdt,"GPT2Tokenizer"),Qdt.forEach(t),Ago=r($8e," (OPT model)"),$8e.forEach(t),Lgo=i(S),xs=n(S,"LI",{});var fS=s(xs);sie=n(fS,"STRONG",{});var Wdt=s(sie);ygo=r(Wdt,"pegasus"),Wdt.forEach(t),xgo=r(fS," \u2014 "),YI=n(fS,"A",{href:!0});var Hdt=s(YI);$go=r(Hdt,"PegasusTokenizer"),Hdt.forEach(t),kgo=r(fS," or "),KI=n(fS,"A",{href:!0});var Udt=s(KI);Sgo=r(Udt,"PegasusTokenizerFast"),Udt.forEach(t),Rgo=r(fS," (Pegasus model)"),fS.forEach(t),Pgo=i(S),bh=n(S,"LI",{});var k8e=s(bh);lie=n(k8e,"STRONG",{});var Jdt=s(lie);Bgo=r(Jdt,"perceiver"),Jdt.forEach(t),Igo=r(k8e," \u2014 "),ZI=n(k8e,"A",{href:!0});var Ydt=s(ZI);Ngo=r(Ydt,"PerceiverTokenizer"),Ydt.forEach(t),qgo=r(k8e," (Perceiver model)"),k8e.forEach(t),jgo=i(S),vh=n(S,"LI",{});var S8e=s(vh);iie=n(S8e,"STRONG",{});var Kdt=s(iie);Dgo=r(Kdt,"phobert"),Kdt.forEach(t),Ggo=r(S8e," \u2014 "),eN=n(S8e,"A",{href:!0});var Zdt=s(eN);Ogo=r(Zdt,"PhobertTokenizer"),Zdt.forEach(t),Vgo=r(S8e," (PhoBERT model)"),S8e.forEach(t),Xgo=i(S),Fh=n(S,"LI",{});var R8e=s(Fh);die=n(R8e,"STRONG",{});var ect=s(die);zgo=r(ect,"plbart"),ect.forEach(t),Qgo=r(R8e," \u2014 "),oN=n(R8e,"A",{href:!0});var oct=s(oN);Wgo=r(oct,"PLBartTokenizer"),oct.forEach(t),Hgo=r(R8e," (PLBart model)"),R8e.forEach(t),Ugo=i(S),Th=n(S,"LI",{});var P8e=s(Th);cie=n(P8e,"STRONG",{});var rct=s(cie);Jgo=r(rct,"prophetnet"),rct.forEach(t),Ygo=r(P8e," \u2014 "),rN=n(P8e,"A",{href:!0});var tct=s(rN);Kgo=r(tct,"ProphetNetTokenizer"),tct.forEach(t),Zgo=r(P8e," (ProphetNet model)"),P8e.forEach(t),eho=i(S),$s=n(S,"LI",{});var gS=s($s);mie=n(gS,"STRONG",{});var act=s(mie);oho=r(act,"qdqbert"),act.forEach(t),rho=r(gS," \u2014 "),tN=n(gS,"A",{href:!0});var nct=s(tN);tho=r(nct,"BertTokenizer"),nct.forEach(t),aho=r(gS," or "),aN=n(gS,"A",{href:!0});var sct=s(aN);nho=r(sct,"BertTokenizerFast"),sct.forEach(t),sho=r(gS," (QDQBert model)"),gS.forEach(t),lho=i(S),Mh=n(S,"LI",{});var B8e=s(Mh);fie=n(B8e,"STRONG",{});var lct=s(fie);iho=r(lct,"rag"),lct.forEach(t),dho=r(B8e," \u2014 "),nN=n(B8e,"A",{href:!0});var ict=s(nN);cho=r(ict,"RagTokenizer"),ict.forEach(t),mho=r(B8e," (RAG model)"),B8e.forEach(t),fho=i(S),ks=n(S,"LI",{});var hS=s(ks);gie=n(hS,"STRONG",{});var dct=s(gie);gho=r(dct,"realm"),dct.forEach(t),hho=r(hS," \u2014 "),sN=n(hS,"A",{href:!0});var cct=s(sN);uho=r(cct,"RealmTokenizer"),cct.forEach(t),pho=r(hS," or "),lN=n(hS,"A",{href:!0});var mct=s(lN);_ho=r(mct,"RealmTokenizerFast"),mct.forEach(t),bho=r(hS," (REALM model)"),hS.forEach(t),vho=i(S),Ss=n(S,"LI",{});var uS=s(Ss);hie=n(uS,"STRONG",{});var fct=s(hie);Fho=r(fct,"reformer"),fct.forEach(t),Tho=r(uS," \u2014 "),iN=n(uS,"A",{href:!0});var gct=s(iN);Mho=r(gct,"ReformerTokenizer"),gct.forEach(t),Eho=r(uS," or "),dN=n(uS,"A",{href:!0});var hct=s(dN);Cho=r(hct,"ReformerTokenizerFast"),hct.forEach(t),who=r(uS," (Reformer model)"),uS.forEach(t),Aho=i(S),Rs=n(S,"LI",{});var pS=s(Rs);uie=n(pS,"STRONG",{});var uct=s(uie);Lho=r(uct,"rembert"),uct.forEach(t),yho=r(pS," \u2014 "),cN=n(pS,"A",{href:!0});var pct=s(cN);xho=r(pct,"RemBertTokenizer"),pct.forEach(t),$ho=r(pS," or "),mN=n(pS,"A",{href:!0});var _ct=s(mN);kho=r(_ct,"RemBertTokenizerFast"),_ct.forEach(t),Sho=r(pS," (RemBERT model)"),pS.forEach(t),Rho=i(S),Ps=n(S,"LI",{});var _S=s(Ps);pie=n(_S,"STRONG",{});var bct=s(pie);Pho=r(bct,"retribert"),bct.forEach(t),Bho=r(_S," \u2014 "),fN=n(_S,"A",{href:!0});var vct=s(fN);Iho=r(vct,"RetriBertTokenizer"),vct.forEach(t),Nho=r(_S," or "),gN=n(_S,"A",{href:!0});var Fct=s(gN);qho=r(Fct,"RetriBertTokenizerFast"),Fct.forEach(t),jho=r(_S," (RetriBERT model)"),_S.forEach(t),Dho=i(S),Bs=n(S,"LI",{});var bS=s(Bs);_ie=n(bS,"STRONG",{});var Tct=s(_ie);Gho=r(Tct,"roberta"),Tct.forEach(t),Oho=r(bS," \u2014 "),hN=n(bS,"A",{href:!0});var Mct=s(hN);Vho=r(Mct,"RobertaTokenizer"),Mct.forEach(t),Xho=r(bS," or "),uN=n(bS,"A",{href:!0});var Ect=s(uN);zho=r(Ect,"RobertaTokenizerFast"),Ect.forEach(t),Qho=r(bS," (RoBERTa model)"),bS.forEach(t),Who=i(S),Is=n(S,"LI",{});var vS=s(Is);bie=n(vS,"STRONG",{});var Cct=s(bie);Hho=r(Cct,"roformer"),Cct.forEach(t),Uho=r(vS," \u2014 "),pN=n(vS,"A",{href:!0});var wct=s(pN);Jho=r(wct,"RoFormerTokenizer"),wct.forEach(t),Yho=r(vS," or "),_N=n(vS,"A",{href:!0});var Act=s(_N);Kho=r(Act,"RoFormerTokenizerFast"),Act.forEach(t),Zho=r(vS," (RoFormer model)"),vS.forEach(t),euo=i(S),Eh=n(S,"LI",{});var I8e=s(Eh);vie=n(I8e,"STRONG",{});var Lct=s(vie);ouo=r(Lct,"speech_to_text"),Lct.forEach(t),ruo=r(I8e," \u2014 "),bN=n(I8e,"A",{href:!0});var yct=s(bN);tuo=r(yct,"Speech2TextTokenizer"),yct.forEach(t),auo=r(I8e," (Speech2Text model)"),I8e.forEach(t),nuo=i(S),Ch=n(S,"LI",{});var N8e=s(Ch);Fie=n(N8e,"STRONG",{});var xct=s(Fie);suo=r(xct,"speech_to_text_2"),xct.forEach(t),luo=r(N8e," \u2014 "),vN=n(N8e,"A",{href:!0});var $ct=s(vN);iuo=r($ct,"Speech2Text2Tokenizer"),$ct.forEach(t),duo=r(N8e," (Speech2Text2 model)"),N8e.forEach(t),cuo=i(S),Ns=n(S,"LI",{});var FS=s(Ns);Tie=n(FS,"STRONG",{});var kct=s(Tie);muo=r(kct,"splinter"),kct.forEach(t),fuo=r(FS," \u2014 "),FN=n(FS,"A",{href:!0});var Sct=s(FN);guo=r(Sct,"SplinterTokenizer"),Sct.forEach(t),huo=r(FS," or "),TN=n(FS,"A",{href:!0});var Rct=s(TN);uuo=r(Rct,"SplinterTokenizerFast"),Rct.forEach(t),puo=r(FS," (Splinter model)"),FS.forEach(t),_uo=i(S),qs=n(S,"LI",{});var TS=s(qs);Mie=n(TS,"STRONG",{});var Pct=s(Mie);buo=r(Pct,"squeezebert"),Pct.forEach(t),vuo=r(TS," \u2014 "),MN=n(TS,"A",{href:!0});var Bct=s(MN);Fuo=r(Bct,"SqueezeBertTokenizer"),Bct.forEach(t),Tuo=r(TS," or "),EN=n(TS,"A",{href:!0});var Ict=s(EN);Muo=r(Ict,"SqueezeBertTokenizerFast"),Ict.forEach(t),Euo=r(TS," (SqueezeBERT model)"),TS.forEach(t),Cuo=i(S),js=n(S,"LI",{});var MS=s(js);Eie=n(MS,"STRONG",{});var Nct=s(Eie);wuo=r(Nct,"t5"),Nct.forEach(t),Auo=r(MS," \u2014 "),CN=n(MS,"A",{href:!0});var qct=s(CN);Luo=r(qct,"T5Tokenizer"),qct.forEach(t),yuo=r(MS," or "),wN=n(MS,"A",{href:!0});var jct=s(wN);xuo=r(jct,"T5TokenizerFast"),jct.forEach(t),$uo=r(MS," (T5 model)"),MS.forEach(t),kuo=i(S),wh=n(S,"LI",{});var q8e=s(wh);Cie=n(q8e,"STRONG",{});var Dct=s(Cie);Suo=r(Dct,"tapas"),Dct.forEach(t),Ruo=r(q8e," \u2014 "),AN=n(q8e,"A",{href:!0});var Gct=s(AN);Puo=r(Gct,"TapasTokenizer"),Gct.forEach(t),Buo=r(q8e," (TAPAS model)"),q8e.forEach(t),Iuo=i(S),Ah=n(S,"LI",{});var j8e=s(Ah);wie=n(j8e,"STRONG",{});var Oct=s(wie);Nuo=r(Oct,"tapex"),Oct.forEach(t),quo=r(j8e," \u2014 "),LN=n(j8e,"A",{href:!0});var Vct=s(LN);juo=r(Vct,"TapexTokenizer"),Vct.forEach(t),Duo=r(j8e," (TAPEX model)"),j8e.forEach(t),Guo=i(S),Lh=n(S,"LI",{});var D8e=s(Lh);Aie=n(D8e,"STRONG",{});var Xct=s(Aie);Ouo=r(Xct,"transfo-xl"),Xct.forEach(t),Vuo=r(D8e," \u2014 "),yN=n(D8e,"A",{href:!0});var zct=s(yN);Xuo=r(zct,"TransfoXLTokenizer"),zct.forEach(t),zuo=r(D8e," (Transformer-XL model)"),D8e.forEach(t),Quo=i(S),Ds=n(S,"LI",{});var ES=s(Ds);Lie=n(ES,"STRONG",{});var Qct=s(Lie);Wuo=r(Qct,"vilt"),Qct.forEach(t),Huo=r(ES," \u2014 "),xN=n(ES,"A",{href:!0});var Wct=s(xN);Uuo=r(Wct,"BertTokenizer"),Wct.forEach(t),Juo=r(ES," or "),$N=n(ES,"A",{href:!0});var Hct=s($N);Yuo=r(Hct,"BertTokenizerFast"),Hct.forEach(t),Kuo=r(ES," (ViLT model)"),ES.forEach(t),Zuo=i(S),Gs=n(S,"LI",{});var CS=s(Gs);yie=n(CS,"STRONG",{});var Uct=s(yie);epo=r(Uct,"visual_bert"),Uct.forEach(t),opo=r(CS," \u2014 "),kN=n(CS,"A",{href:!0});var Jct=s(kN);rpo=r(Jct,"BertTokenizer"),Jct.forEach(t),tpo=r(CS," or "),SN=n(CS,"A",{href:!0});var Yct=s(SN);apo=r(Yct,"BertTokenizerFast"),Yct.forEach(t),npo=r(CS," (VisualBERT model)"),CS.forEach(t),spo=i(S),yh=n(S,"LI",{});var G8e=s(yh);xie=n(G8e,"STRONG",{});var Kct=s(xie);lpo=r(Kct,"wav2vec2"),Kct.forEach(t),ipo=r(G8e," \u2014 "),RN=n(G8e,"A",{href:!0});var Zct=s(RN);dpo=r(Zct,"Wav2Vec2CTCTokenizer"),Zct.forEach(t),cpo=r(G8e," (Wav2Vec2 model)"),G8e.forEach(t),mpo=i(S),xh=n(S,"LI",{});var O8e=s(xh);$ie=n(O8e,"STRONG",{});var emt=s($ie);fpo=r(emt,"wav2vec2-conformer"),emt.forEach(t),gpo=r(O8e," \u2014 "),PN=n(O8e,"A",{href:!0});var omt=s(PN);hpo=r(omt,"Wav2Vec2CTCTokenizer"),omt.forEach(t),upo=r(O8e," (Wav2Vec2-Conformer model)"),O8e.forEach(t),ppo=i(S),$h=n(S,"LI",{});var V8e=s($h);kie=n(V8e,"STRONG",{});var rmt=s(kie);_po=r(rmt,"wav2vec2_phoneme"),rmt.forEach(t),bpo=r(V8e," \u2014 "),BN=n(V8e,"A",{href:!0});var tmt=s(BN);vpo=r(tmt,"Wav2Vec2PhonemeCTCTokenizer"),tmt.forEach(t),Fpo=r(V8e," (Wav2Vec2Phoneme model)"),V8e.forEach(t),Tpo=i(S),Os=n(S,"LI",{});var wS=s(Os);Sie=n(wS,"STRONG",{});var amt=s(Sie);Mpo=r(amt,"xglm"),amt.forEach(t),Epo=r(wS," \u2014 "),IN=n(wS,"A",{href:!0});var nmt=s(IN);Cpo=r(nmt,"XGLMTokenizer"),nmt.forEach(t),wpo=r(wS," or "),NN=n(wS,"A",{href:!0});var smt=s(NN);Apo=r(smt,"XGLMTokenizerFast"),smt.forEach(t),Lpo=r(wS," (XGLM model)"),wS.forEach(t),ypo=i(S),kh=n(S,"LI",{});var X8e=s(kh);Rie=n(X8e,"STRONG",{});var lmt=s(Rie);xpo=r(lmt,"xlm"),lmt.forEach(t),$po=r(X8e," \u2014 "),qN=n(X8e,"A",{href:!0});var imt=s(qN);kpo=r(imt,"XLMTokenizer"),imt.forEach(t),Spo=r(X8e," (XLM model)"),X8e.forEach(t),Rpo=i(S),Sh=n(S,"LI",{});var z8e=s(Sh);Pie=n(z8e,"STRONG",{});var dmt=s(Pie);Ppo=r(dmt,"xlm-prophetnet"),dmt.forEach(t),Bpo=r(z8e," \u2014 "),jN=n(z8e,"A",{href:!0});var cmt=s(jN);Ipo=r(cmt,"XLMProphetNetTokenizer"),cmt.forEach(t),Npo=r(z8e," (XLM-ProphetNet model)"),z8e.forEach(t),qpo=i(S),Vs=n(S,"LI",{});var AS=s(Vs);Bie=n(AS,"STRONG",{});var mmt=s(Bie);jpo=r(mmt,"xlm-roberta"),mmt.forEach(t),Dpo=r(AS," \u2014 "),DN=n(AS,"A",{href:!0});var fmt=s(DN);Gpo=r(fmt,"XLMRobertaTokenizer"),fmt.forEach(t),Opo=r(AS," or "),GN=n(AS,"A",{href:!0});var gmt=s(GN);Vpo=r(gmt,"XLMRobertaTokenizerFast"),gmt.forEach(t),Xpo=r(AS," (XLM-RoBERTa model)"),AS.forEach(t),zpo=i(S),Xs=n(S,"LI",{});var LS=s(Xs);Iie=n(LS,"STRONG",{});var hmt=s(Iie);Qpo=r(hmt,"xlm-roberta-xl"),hmt.forEach(t),Wpo=r(LS," \u2014 "),ON=n(LS,"A",{href:!0});var umt=s(ON);Hpo=r(umt,"RobertaTokenizer"),umt.forEach(t),Upo=r(LS," or "),VN=n(LS,"A",{href:!0});var pmt=s(VN);Jpo=r(pmt,"RobertaTokenizerFast"),pmt.forEach(t),Ypo=r(LS," (XLM-RoBERTa-XL model)"),LS.forEach(t),Kpo=i(S),zs=n(S,"LI",{});var yS=s(zs);Nie=n(yS,"STRONG",{});var _mt=s(Nie);Zpo=r(_mt,"xlnet"),_mt.forEach(t),e_o=r(yS," \u2014 "),XN=n(yS,"A",{href:!0});var bmt=s(XN);o_o=r(bmt,"XLNetTokenizer"),bmt.forEach(t),r_o=r(yS," or "),zN=n(yS,"A",{href:!0});var vmt=s(zN);t_o=r(vmt,"XLNetTokenizerFast"),vmt.forEach(t),a_o=r(yS," (XLNet model)"),yS.forEach(t),n_o=i(S),Qs=n(S,"LI",{});var xS=s(Qs);qie=n(xS,"STRONG",{});var Fmt=s(qie);s_o=r(Fmt,"yoso"),Fmt.forEach(t),l_o=r(xS," \u2014 "),QN=n(xS,"A",{href:!0});var Tmt=s(QN);i_o=r(Tmt,"AlbertTokenizer"),Tmt.forEach(t),d_o=r(xS," or "),WN=n(xS,"A",{href:!0});var Mmt=s(WN);c_o=r(Mmt,"AlbertTokenizerFast"),Mmt.forEach(t),m_o=r(xS," (YOSO model)"),xS.forEach(t),S.forEach(t),f_o=i(Zs),T(Rh.$$.fragment,Zs),Zs.forEach(t),g_o=i(Ks),Ph=n(Ks,"DIV",{class:!0});var lQe=s(Ph);T(_y.$$.fragment,lQe),h_o=i(lQe),jie=n(lQe,"P",{});var Emt=s(jie);u_o=r(Emt,"Register a new tokenizer in this mapping."),Emt.forEach(t),lQe.forEach(t),Ks.forEach(t),sXe=i(m),qi=n(m,"H2",{class:!0});var iQe=s(qi);Bh=n(iQe,"A",{id:!0,class:!0,href:!0});var Cmt=s(Bh);Die=n(Cmt,"SPAN",{});var wmt=s(Die);T(by.$$.fragment,wmt),wmt.forEach(t),Cmt.forEach(t),p_o=i(iQe),Gie=n(iQe,"SPAN",{});var Amt=s(Gie);__o=r(Amt,"AutoFeatureExtractor"),Amt.forEach(t),iQe.forEach(t),lXe=i(m),yo=n(m,"DIV",{class:!0});var el=s(yo);T(vy.$$.fragment,el),b_o=i(el),Fy=n(el,"P",{});var dQe=s(Fy);v_o=r(dQe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),HN=n(dQe,"A",{href:!0});var Lmt=s(HN);F_o=r(Lmt,"AutoFeatureExtractor.from_pretrained()"),Lmt.forEach(t),T_o=r(dQe," class method."),dQe.forEach(t),M_o=i(el),Ty=n(el,"P",{});var cQe=s(Ty);E_o=r(cQe,"This class cannot be instantiated directly using "),Oie=n(cQe,"CODE",{});var ymt=s(Oie);C_o=r(ymt,"__init__()"),ymt.forEach(t),w_o=r(cQe," (throws an error)."),cQe.forEach(t),A_o=i(el),Ue=n(el,"DIV",{class:!0});var na=s(Ue);T(My.$$.fragment,na),L_o=i(na),Vie=n(na,"P",{});var xmt=s(Vie);y_o=r(xmt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),xmt.forEach(t),x_o=i(na),Ba=n(na,"P",{});var l7=s(Ba);$_o=r(l7,"The feature extractor class to instantiate is selected based on the "),Xie=n(l7,"CODE",{});var $mt=s(Xie);k_o=r($mt,"model_type"),$mt.forEach(t),S_o=r(l7,` property of the config object
(either passed as an argument or loaded from `),zie=n(l7,"CODE",{});var kmt=s(zie);R_o=r(kmt,"pretrained_model_name_or_path"),kmt.forEach(t),P_o=r(l7,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Qie=n(l7,"CODE",{});var Smt=s(Qie);B_o=r(Smt,"pretrained_model_name_or_path"),Smt.forEach(t),I_o=r(l7,":"),l7.forEach(t),N_o=i(na),Y=n(na,"UL",{});var K=s(Y);Ih=n(K,"LI",{});var Q8e=s(Ih);Wie=n(Q8e,"STRONG",{});var Rmt=s(Wie);q_o=r(Rmt,"beit"),Rmt.forEach(t),j_o=r(Q8e," \u2014 "),UN=n(Q8e,"A",{href:!0});var Pmt=s(UN);D_o=r(Pmt,"BeitFeatureExtractor"),Pmt.forEach(t),G_o=r(Q8e," (BEiT model)"),Q8e.forEach(t),O_o=i(K),Nh=n(K,"LI",{});var W8e=s(Nh);Hie=n(W8e,"STRONG",{});var Bmt=s(Hie);V_o=r(Bmt,"clip"),Bmt.forEach(t),X_o=r(W8e," \u2014 "),JN=n(W8e,"A",{href:!0});var Imt=s(JN);z_o=r(Imt,"CLIPFeatureExtractor"),Imt.forEach(t),Q_o=r(W8e," (CLIP model)"),W8e.forEach(t),W_o=i(K),qh=n(K,"LI",{});var H8e=s(qh);Uie=n(H8e,"STRONG",{});var Nmt=s(Uie);H_o=r(Nmt,"convnext"),Nmt.forEach(t),U_o=r(H8e," \u2014 "),YN=n(H8e,"A",{href:!0});var qmt=s(YN);J_o=r(qmt,"ConvNextFeatureExtractor"),qmt.forEach(t),Y_o=r(H8e," (ConvNeXT model)"),H8e.forEach(t),K_o=i(K),jh=n(K,"LI",{});var U8e=s(jh);Jie=n(U8e,"STRONG",{});var jmt=s(Jie);Z_o=r(jmt,"cvt"),jmt.forEach(t),e2o=r(U8e," \u2014 "),KN=n(U8e,"A",{href:!0});var Dmt=s(KN);o2o=r(Dmt,"ConvNextFeatureExtractor"),Dmt.forEach(t),r2o=r(U8e," (CvT model)"),U8e.forEach(t),t2o=i(K),Dh=n(K,"LI",{});var J8e=s(Dh);Yie=n(J8e,"STRONG",{});var Gmt=s(Yie);a2o=r(Gmt,"data2vec-audio"),Gmt.forEach(t),n2o=r(J8e," \u2014 "),ZN=n(J8e,"A",{href:!0});var Omt=s(ZN);s2o=r(Omt,"Wav2Vec2FeatureExtractor"),Omt.forEach(t),l2o=r(J8e," (Data2VecAudio model)"),J8e.forEach(t),i2o=i(K),Gh=n(K,"LI",{});var Y8e=s(Gh);Kie=n(Y8e,"STRONG",{});var Vmt=s(Kie);d2o=r(Vmt,"data2vec-vision"),Vmt.forEach(t),c2o=r(Y8e," \u2014 "),eq=n(Y8e,"A",{href:!0});var Xmt=s(eq);m2o=r(Xmt,"BeitFeatureExtractor"),Xmt.forEach(t),f2o=r(Y8e," (Data2VecVision model)"),Y8e.forEach(t),g2o=i(K),Oh=n(K,"LI",{});var K8e=s(Oh);Zie=n(K8e,"STRONG",{});var zmt=s(Zie);h2o=r(zmt,"deit"),zmt.forEach(t),u2o=r(K8e," \u2014 "),oq=n(K8e,"A",{href:!0});var Qmt=s(oq);p2o=r(Qmt,"DeiTFeatureExtractor"),Qmt.forEach(t),_2o=r(K8e," (DeiT model)"),K8e.forEach(t),b2o=i(K),Vh=n(K,"LI",{});var Z8e=s(Vh);ede=n(Z8e,"STRONG",{});var Wmt=s(ede);v2o=r(Wmt,"detr"),Wmt.forEach(t),F2o=r(Z8e," \u2014 "),rq=n(Z8e,"A",{href:!0});var Hmt=s(rq);T2o=r(Hmt,"DetrFeatureExtractor"),Hmt.forEach(t),M2o=r(Z8e," (DETR model)"),Z8e.forEach(t),E2o=i(K),Xh=n(K,"LI",{});var e9e=s(Xh);ode=n(e9e,"STRONG",{});var Umt=s(ode);C2o=r(Umt,"dpt"),Umt.forEach(t),w2o=r(e9e," \u2014 "),tq=n(e9e,"A",{href:!0});var Jmt=s(tq);A2o=r(Jmt,"DPTFeatureExtractor"),Jmt.forEach(t),L2o=r(e9e," (DPT model)"),e9e.forEach(t),y2o=i(K),zh=n(K,"LI",{});var o9e=s(zh);rde=n(o9e,"STRONG",{});var Ymt=s(rde);x2o=r(Ymt,"flava"),Ymt.forEach(t),$2o=r(o9e," \u2014 "),aq=n(o9e,"A",{href:!0});var Kmt=s(aq);k2o=r(Kmt,"FlavaFeatureExtractor"),Kmt.forEach(t),S2o=r(o9e," (FLAVA model)"),o9e.forEach(t),R2o=i(K),Qh=n(K,"LI",{});var r9e=s(Qh);tde=n(r9e,"STRONG",{});var Zmt=s(tde);P2o=r(Zmt,"glpn"),Zmt.forEach(t),B2o=r(r9e," \u2014 "),nq=n(r9e,"A",{href:!0});var eft=s(nq);I2o=r(eft,"GLPNFeatureExtractor"),eft.forEach(t),N2o=r(r9e," (GLPN model)"),r9e.forEach(t),q2o=i(K),Wh=n(K,"LI",{});var t9e=s(Wh);ade=n(t9e,"STRONG",{});var oft=s(ade);j2o=r(oft,"groupvit"),oft.forEach(t),D2o=r(t9e," \u2014 "),sq=n(t9e,"A",{href:!0});var rft=s(sq);G2o=r(rft,"CLIPFeatureExtractor"),rft.forEach(t),O2o=r(t9e," (GroupViT model)"),t9e.forEach(t),V2o=i(K),Hh=n(K,"LI",{});var a9e=s(Hh);nde=n(a9e,"STRONG",{});var tft=s(nde);X2o=r(tft,"hubert"),tft.forEach(t),z2o=r(a9e," \u2014 "),lq=n(a9e,"A",{href:!0});var aft=s(lq);Q2o=r(aft,"Wav2Vec2FeatureExtractor"),aft.forEach(t),W2o=r(a9e," (Hubert model)"),a9e.forEach(t),H2o=i(K),Uh=n(K,"LI",{});var n9e=s(Uh);sde=n(n9e,"STRONG",{});var nft=s(sde);U2o=r(nft,"imagegpt"),nft.forEach(t),J2o=r(n9e," \u2014 "),iq=n(n9e,"A",{href:!0});var sft=s(iq);Y2o=r(sft,"ImageGPTFeatureExtractor"),sft.forEach(t),K2o=r(n9e," (ImageGPT model)"),n9e.forEach(t),Z2o=i(K),Jh=n(K,"LI",{});var s9e=s(Jh);lde=n(s9e,"STRONG",{});var lft=s(lde);ebo=r(lft,"layoutlmv2"),lft.forEach(t),obo=r(s9e," \u2014 "),dq=n(s9e,"A",{href:!0});var ift=s(dq);rbo=r(ift,"LayoutLMv2FeatureExtractor"),ift.forEach(t),tbo=r(s9e," (LayoutLMv2 model)"),s9e.forEach(t),abo=i(K),Yh=n(K,"LI",{});var l9e=s(Yh);ide=n(l9e,"STRONG",{});var dft=s(ide);nbo=r(dft,"layoutlmv3"),dft.forEach(t),sbo=r(l9e," \u2014 "),cq=n(l9e,"A",{href:!0});var cft=s(cq);lbo=r(cft,"LayoutLMv3FeatureExtractor"),cft.forEach(t),ibo=r(l9e," (LayoutLMv3 model)"),l9e.forEach(t),dbo=i(K),Kh=n(K,"LI",{});var i9e=s(Kh);dde=n(i9e,"STRONG",{});var mft=s(dde);cbo=r(mft,"levit"),mft.forEach(t),mbo=r(i9e," \u2014 "),mq=n(i9e,"A",{href:!0});var fft=s(mq);fbo=r(fft,"LevitFeatureExtractor"),fft.forEach(t),gbo=r(i9e," (LeViT model)"),i9e.forEach(t),hbo=i(K),Zh=n(K,"LI",{});var d9e=s(Zh);cde=n(d9e,"STRONG",{});var gft=s(cde);ubo=r(gft,"maskformer"),gft.forEach(t),pbo=r(d9e," \u2014 "),fq=n(d9e,"A",{href:!0});var hft=s(fq);_bo=r(hft,"MaskFormerFeatureExtractor"),hft.forEach(t),bbo=r(d9e," (MaskFormer model)"),d9e.forEach(t),vbo=i(K),eu=n(K,"LI",{});var c9e=s(eu);mde=n(c9e,"STRONG",{});var uft=s(mde);Fbo=r(uft,"mctct"),uft.forEach(t),Tbo=r(c9e," \u2014 "),gq=n(c9e,"A",{href:!0});var pft=s(gq);Mbo=r(pft,"MCTCTFeatureExtractor"),pft.forEach(t),Ebo=r(c9e," (M-CTC-T model)"),c9e.forEach(t),Cbo=i(K),ou=n(K,"LI",{});var m9e=s(ou);fde=n(m9e,"STRONG",{});var _ft=s(fde);wbo=r(_ft,"mobilevit"),_ft.forEach(t),Abo=r(m9e," \u2014 "),hq=n(m9e,"A",{href:!0});var bft=s(hq);Lbo=r(bft,"MobileViTFeatureExtractor"),bft.forEach(t),ybo=r(m9e," (MobileViT model)"),m9e.forEach(t),xbo=i(K),ru=n(K,"LI",{});var f9e=s(ru);gde=n(f9e,"STRONG",{});var vft=s(gde);$bo=r(vft,"perceiver"),vft.forEach(t),kbo=r(f9e," \u2014 "),uq=n(f9e,"A",{href:!0});var Fft=s(uq);Sbo=r(Fft,"PerceiverFeatureExtractor"),Fft.forEach(t),Rbo=r(f9e," (Perceiver model)"),f9e.forEach(t),Pbo=i(K),tu=n(K,"LI",{});var g9e=s(tu);hde=n(g9e,"STRONG",{});var Tft=s(hde);Bbo=r(Tft,"poolformer"),Tft.forEach(t),Ibo=r(g9e," \u2014 "),pq=n(g9e,"A",{href:!0});var Mft=s(pq);Nbo=r(Mft,"PoolFormerFeatureExtractor"),Mft.forEach(t),qbo=r(g9e," (PoolFormer model)"),g9e.forEach(t),jbo=i(K),au=n(K,"LI",{});var h9e=s(au);ude=n(h9e,"STRONG",{});var Eft=s(ude);Dbo=r(Eft,"regnet"),Eft.forEach(t),Gbo=r(h9e," \u2014 "),_q=n(h9e,"A",{href:!0});var Cft=s(_q);Obo=r(Cft,"ConvNextFeatureExtractor"),Cft.forEach(t),Vbo=r(h9e," (RegNet model)"),h9e.forEach(t),Xbo=i(K),nu=n(K,"LI",{});var u9e=s(nu);pde=n(u9e,"STRONG",{});var wft=s(pde);zbo=r(wft,"resnet"),wft.forEach(t),Qbo=r(u9e," \u2014 "),bq=n(u9e,"A",{href:!0});var Aft=s(bq);Wbo=r(Aft,"ConvNextFeatureExtractor"),Aft.forEach(t),Hbo=r(u9e," (ResNet model)"),u9e.forEach(t),Ubo=i(K),su=n(K,"LI",{});var p9e=s(su);_de=n(p9e,"STRONG",{});var Lft=s(_de);Jbo=r(Lft,"segformer"),Lft.forEach(t),Ybo=r(p9e," \u2014 "),vq=n(p9e,"A",{href:!0});var yft=s(vq);Kbo=r(yft,"SegformerFeatureExtractor"),yft.forEach(t),Zbo=r(p9e," (SegFormer model)"),p9e.forEach(t),evo=i(K),lu=n(K,"LI",{});var _9e=s(lu);bde=n(_9e,"STRONG",{});var xft=s(bde);ovo=r(xft,"speech_to_text"),xft.forEach(t),rvo=r(_9e," \u2014 "),Fq=n(_9e,"A",{href:!0});var $ft=s(Fq);tvo=r($ft,"Speech2TextFeatureExtractor"),$ft.forEach(t),avo=r(_9e," (Speech2Text model)"),_9e.forEach(t),nvo=i(K),iu=n(K,"LI",{});var b9e=s(iu);vde=n(b9e,"STRONG",{});var kft=s(vde);svo=r(kft,"swin"),kft.forEach(t),lvo=r(b9e," \u2014 "),Tq=n(b9e,"A",{href:!0});var Sft=s(Tq);ivo=r(Sft,"ViTFeatureExtractor"),Sft.forEach(t),dvo=r(b9e," (Swin Transformer model)"),b9e.forEach(t),cvo=i(K),du=n(K,"LI",{});var v9e=s(du);Fde=n(v9e,"STRONG",{});var Rft=s(Fde);mvo=r(Rft,"van"),Rft.forEach(t),fvo=r(v9e," \u2014 "),Mq=n(v9e,"A",{href:!0});var Pft=s(Mq);gvo=r(Pft,"ConvNextFeatureExtractor"),Pft.forEach(t),hvo=r(v9e," (VAN model)"),v9e.forEach(t),uvo=i(K),cu=n(K,"LI",{});var F9e=s(cu);Tde=n(F9e,"STRONG",{});var Bft=s(Tde);pvo=r(Bft,"vilt"),Bft.forEach(t),_vo=r(F9e," \u2014 "),Eq=n(F9e,"A",{href:!0});var Ift=s(Eq);bvo=r(Ift,"ViltFeatureExtractor"),Ift.forEach(t),vvo=r(F9e," (ViLT model)"),F9e.forEach(t),Fvo=i(K),mu=n(K,"LI",{});var T9e=s(mu);Mde=n(T9e,"STRONG",{});var Nft=s(Mde);Tvo=r(Nft,"vit"),Nft.forEach(t),Mvo=r(T9e," \u2014 "),Cq=n(T9e,"A",{href:!0});var qft=s(Cq);Evo=r(qft,"ViTFeatureExtractor"),qft.forEach(t),Cvo=r(T9e," (ViT model)"),T9e.forEach(t),wvo=i(K),fu=n(K,"LI",{});var M9e=s(fu);Ede=n(M9e,"STRONG",{});var jft=s(Ede);Avo=r(jft,"vit_mae"),jft.forEach(t),Lvo=r(M9e," \u2014 "),wq=n(M9e,"A",{href:!0});var Dft=s(wq);yvo=r(Dft,"ViTFeatureExtractor"),Dft.forEach(t),xvo=r(M9e," (ViTMAE model)"),M9e.forEach(t),$vo=i(K),gu=n(K,"LI",{});var E9e=s(gu);Cde=n(E9e,"STRONG",{});var Gft=s(Cde);kvo=r(Gft,"wav2vec2"),Gft.forEach(t),Svo=r(E9e," \u2014 "),Aq=n(E9e,"A",{href:!0});var Oft=s(Aq);Rvo=r(Oft,"Wav2Vec2FeatureExtractor"),Oft.forEach(t),Pvo=r(E9e," (Wav2Vec2 model)"),E9e.forEach(t),Bvo=i(K),hu=n(K,"LI",{});var C9e=s(hu);wde=n(C9e,"STRONG",{});var Vft=s(wde);Ivo=r(Vft,"wav2vec2-conformer"),Vft.forEach(t),Nvo=r(C9e," \u2014 "),Lq=n(C9e,"A",{href:!0});var Xft=s(Lq);qvo=r(Xft,"Wav2Vec2FeatureExtractor"),Xft.forEach(t),jvo=r(C9e," (Wav2Vec2-Conformer model)"),C9e.forEach(t),Dvo=i(K),uu=n(K,"LI",{});var w9e=s(uu);Ade=n(w9e,"STRONG",{});var zft=s(Ade);Gvo=r(zft,"yolos"),zft.forEach(t),Ovo=r(w9e," \u2014 "),yq=n(w9e,"A",{href:!0});var Qft=s(yq);Vvo=r(Qft,"YolosFeatureExtractor"),Qft.forEach(t),Xvo=r(w9e," (YOLOS model)"),w9e.forEach(t),K.forEach(t),zvo=i(na),T(pu.$$.fragment,na),Qvo=i(na),T(_u.$$.fragment,na),na.forEach(t),Wvo=i(el),bu=n(el,"DIV",{class:!0});var mQe=s(bu);T(Ey.$$.fragment,mQe),Hvo=i(mQe),Lde=n(mQe,"P",{});var Wft=s(Lde);Uvo=r(Wft,"Register a new feature extractor for this class."),Wft.forEach(t),mQe.forEach(t),el.forEach(t),iXe=i(m),ji=n(m,"H2",{class:!0});var fQe=s(ji);vu=n(fQe,"A",{id:!0,class:!0,href:!0});var Hft=s(vu);yde=n(Hft,"SPAN",{});var Uft=s(yde);T(Cy.$$.fragment,Uft),Uft.forEach(t),Hft.forEach(t),Jvo=i(fQe),xde=n(fQe,"SPAN",{});var Jft=s(xde);Yvo=r(Jft,"AutoProcessor"),Jft.forEach(t),fQe.forEach(t),dXe=i(m),xo=n(m,"DIV",{class:!0});var ol=s(xo);T(wy.$$.fragment,ol),Kvo=i(ol),Ay=n(ol,"P",{});var gQe=s(Ay);Zvo=r(gQe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),xq=n(gQe,"A",{href:!0});var Yft=s(xq);e1o=r(Yft,"AutoProcessor.from_pretrained()"),Yft.forEach(t),o1o=r(gQe," class method."),gQe.forEach(t),r1o=i(ol),Ly=n(ol,"P",{});var hQe=s(Ly);t1o=r(hQe,"This class cannot be instantiated directly using "),$de=n(hQe,"CODE",{});var Kft=s($de);a1o=r(Kft,"__init__()"),Kft.forEach(t),n1o=r(hQe," (throws an error)."),hQe.forEach(t),s1o=i(ol),Je=n(ol,"DIV",{class:!0});var sa=s(Je);T(yy.$$.fragment,sa),l1o=i(sa),kde=n(sa,"P",{});var Zft=s(kde);i1o=r(Zft,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Zft.forEach(t),d1o=i(sa),Di=n(sa,"P",{});var $re=s(Di);c1o=r($re,"The processor class to instantiate is selected based on the "),Sde=n($re,"CODE",{});var egt=s(Sde);m1o=r(egt,"model_type"),egt.forEach(t),f1o=r($re,` property of the config object (either
passed as an argument or loaded from `),Rde=n($re,"CODE",{});var ogt=s(Rde);g1o=r(ogt,"pretrained_model_name_or_path"),ogt.forEach(t),h1o=r($re," if possible):"),$re.forEach(t),u1o=i(sa),he=n(sa,"UL",{});var _e=s(he);Fu=n(_e,"LI",{});var A9e=s(Fu);Pde=n(A9e,"STRONG",{});var rgt=s(Pde);p1o=r(rgt,"clip"),rgt.forEach(t),_1o=r(A9e," \u2014 "),$q=n(A9e,"A",{href:!0});var tgt=s($q);b1o=r(tgt,"CLIPProcessor"),tgt.forEach(t),v1o=r(A9e," (CLIP model)"),A9e.forEach(t),F1o=i(_e),Tu=n(_e,"LI",{});var L9e=s(Tu);Bde=n(L9e,"STRONG",{});var agt=s(Bde);T1o=r(agt,"flava"),agt.forEach(t),M1o=r(L9e," \u2014 "),Ide=n(L9e,"CODE",{});var ngt=s(Ide);E1o=r(ngt,"FLAVAProcessor"),ngt.forEach(t),C1o=r(L9e," (FLAVA model)"),L9e.forEach(t),w1o=i(_e),Mu=n(_e,"LI",{});var y9e=s(Mu);Nde=n(y9e,"STRONG",{});var sgt=s(Nde);A1o=r(sgt,"groupvit"),sgt.forEach(t),L1o=r(y9e," \u2014 "),kq=n(y9e,"A",{href:!0});var lgt=s(kq);y1o=r(lgt,"CLIPProcessor"),lgt.forEach(t),x1o=r(y9e," (GroupViT model)"),y9e.forEach(t),$1o=i(_e),Eu=n(_e,"LI",{});var x9e=s(Eu);qde=n(x9e,"STRONG",{});var igt=s(qde);k1o=r(igt,"layoutlmv2"),igt.forEach(t),S1o=r(x9e," \u2014 "),Sq=n(x9e,"A",{href:!0});var dgt=s(Sq);R1o=r(dgt,"LayoutLMv2Processor"),dgt.forEach(t),P1o=r(x9e," (LayoutLMv2 model)"),x9e.forEach(t),B1o=i(_e),Cu=n(_e,"LI",{});var $9e=s(Cu);jde=n($9e,"STRONG",{});var cgt=s(jde);I1o=r(cgt,"layoutlmv3"),cgt.forEach(t),N1o=r($9e," \u2014 "),Rq=n($9e,"A",{href:!0});var mgt=s(Rq);q1o=r(mgt,"LayoutLMv3Processor"),mgt.forEach(t),j1o=r($9e," (LayoutLMv3 model)"),$9e.forEach(t),D1o=i(_e),wu=n(_e,"LI",{});var k9e=s(wu);Dde=n(k9e,"STRONG",{});var fgt=s(Dde);G1o=r(fgt,"layoutxlm"),fgt.forEach(t),O1o=r(k9e," \u2014 "),Pq=n(k9e,"A",{href:!0});var ggt=s(Pq);V1o=r(ggt,"LayoutXLMProcessor"),ggt.forEach(t),X1o=r(k9e," (LayoutXLM model)"),k9e.forEach(t),z1o=i(_e),Au=n(_e,"LI",{});var S9e=s(Au);Gde=n(S9e,"STRONG",{});var hgt=s(Gde);Q1o=r(hgt,"sew"),hgt.forEach(t),W1o=r(S9e," \u2014 "),Bq=n(S9e,"A",{href:!0});var ugt=s(Bq);H1o=r(ugt,"Wav2Vec2Processor"),ugt.forEach(t),U1o=r(S9e," (SEW model)"),S9e.forEach(t),J1o=i(_e),Lu=n(_e,"LI",{});var R9e=s(Lu);Ode=n(R9e,"STRONG",{});var pgt=s(Ode);Y1o=r(pgt,"sew-d"),pgt.forEach(t),K1o=r(R9e," \u2014 "),Iq=n(R9e,"A",{href:!0});var _gt=s(Iq);Z1o=r(_gt,"Wav2Vec2Processor"),_gt.forEach(t),eFo=r(R9e," (SEW-D model)"),R9e.forEach(t),oFo=i(_e),yu=n(_e,"LI",{});var P9e=s(yu);Vde=n(P9e,"STRONG",{});var bgt=s(Vde);rFo=r(bgt,"speech_to_text"),bgt.forEach(t),tFo=r(P9e," \u2014 "),Nq=n(P9e,"A",{href:!0});var vgt=s(Nq);aFo=r(vgt,"Speech2TextProcessor"),vgt.forEach(t),nFo=r(P9e," (Speech2Text model)"),P9e.forEach(t),sFo=i(_e),xu=n(_e,"LI",{});var B9e=s(xu);Xde=n(B9e,"STRONG",{});var Fgt=s(Xde);lFo=r(Fgt,"speech_to_text_2"),Fgt.forEach(t),iFo=r(B9e," \u2014 "),qq=n(B9e,"A",{href:!0});var Tgt=s(qq);dFo=r(Tgt,"Speech2Text2Processor"),Tgt.forEach(t),cFo=r(B9e," (Speech2Text2 model)"),B9e.forEach(t),mFo=i(_e),$u=n(_e,"LI",{});var I9e=s($u);zde=n(I9e,"STRONG",{});var Mgt=s(zde);fFo=r(Mgt,"trocr"),Mgt.forEach(t),gFo=r(I9e," \u2014 "),jq=n(I9e,"A",{href:!0});var Egt=s(jq);hFo=r(Egt,"TrOCRProcessor"),Egt.forEach(t),uFo=r(I9e," (TrOCR model)"),I9e.forEach(t),pFo=i(_e),ku=n(_e,"LI",{});var N9e=s(ku);Qde=n(N9e,"STRONG",{});var Cgt=s(Qde);_Fo=r(Cgt,"unispeech"),Cgt.forEach(t),bFo=r(N9e," \u2014 "),Dq=n(N9e,"A",{href:!0});var wgt=s(Dq);vFo=r(wgt,"Wav2Vec2Processor"),wgt.forEach(t),FFo=r(N9e," (UniSpeech model)"),N9e.forEach(t),TFo=i(_e),Su=n(_e,"LI",{});var q9e=s(Su);Wde=n(q9e,"STRONG",{});var Agt=s(Wde);MFo=r(Agt,"unispeech-sat"),Agt.forEach(t),EFo=r(q9e," \u2014 "),Gq=n(q9e,"A",{href:!0});var Lgt=s(Gq);CFo=r(Lgt,"Wav2Vec2Processor"),Lgt.forEach(t),wFo=r(q9e," (UniSpeechSat model)"),q9e.forEach(t),AFo=i(_e),Ru=n(_e,"LI",{});var j9e=s(Ru);Hde=n(j9e,"STRONG",{});var ygt=s(Hde);LFo=r(ygt,"vilt"),ygt.forEach(t),yFo=r(j9e," \u2014 "),Oq=n(j9e,"A",{href:!0});var xgt=s(Oq);xFo=r(xgt,"ViltProcessor"),xgt.forEach(t),$Fo=r(j9e," (ViLT model)"),j9e.forEach(t),kFo=i(_e),Pu=n(_e,"LI",{});var D9e=s(Pu);Ude=n(D9e,"STRONG",{});var $gt=s(Ude);SFo=r($gt,"vision-text-dual-encoder"),$gt.forEach(t),RFo=r(D9e," \u2014 "),Vq=n(D9e,"A",{href:!0});var kgt=s(Vq);PFo=r(kgt,"VisionTextDualEncoderProcessor"),kgt.forEach(t),BFo=r(D9e," (VisionTextDualEncoder model)"),D9e.forEach(t),IFo=i(_e),Bu=n(_e,"LI",{});var G9e=s(Bu);Jde=n(G9e,"STRONG",{});var Sgt=s(Jde);NFo=r(Sgt,"wav2vec2"),Sgt.forEach(t),qFo=r(G9e," \u2014 "),Xq=n(G9e,"A",{href:!0});var Rgt=s(Xq);jFo=r(Rgt,"Wav2Vec2Processor"),Rgt.forEach(t),DFo=r(G9e," (Wav2Vec2 model)"),G9e.forEach(t),GFo=i(_e),Iu=n(_e,"LI",{});var O9e=s(Iu);Yde=n(O9e,"STRONG",{});var Pgt=s(Yde);OFo=r(Pgt,"wav2vec2-conformer"),Pgt.forEach(t),VFo=r(O9e," \u2014 "),zq=n(O9e,"A",{href:!0});var Bgt=s(zq);XFo=r(Bgt,"Wav2Vec2Processor"),Bgt.forEach(t),zFo=r(O9e," (Wav2Vec2-Conformer model)"),O9e.forEach(t),QFo=i(_e),Nu=n(_e,"LI",{});var V9e=s(Nu);Kde=n(V9e,"STRONG",{});var Igt=s(Kde);WFo=r(Igt,"wavlm"),Igt.forEach(t),HFo=r(V9e," \u2014 "),Qq=n(V9e,"A",{href:!0});var Ngt=s(Qq);UFo=r(Ngt,"Wav2Vec2Processor"),Ngt.forEach(t),JFo=r(V9e," (WavLM model)"),V9e.forEach(t),_e.forEach(t),YFo=i(sa),T(qu.$$.fragment,sa),KFo=i(sa),T(ju.$$.fragment,sa),sa.forEach(t),ZFo=i(ol),Du=n(ol,"DIV",{class:!0});var uQe=s(Du);T(xy.$$.fragment,uQe),eTo=i(uQe),Zde=n(uQe,"P",{});var qgt=s(Zde);oTo=r(qgt,"Register a new processor for this class."),qgt.forEach(t),uQe.forEach(t),ol.forEach(t),cXe=i(m),Gi=n(m,"H2",{class:!0});var pQe=s(Gi);Gu=n(pQe,"A",{id:!0,class:!0,href:!0});var jgt=s(Gu);ece=n(jgt,"SPAN",{});var Dgt=s(ece);T($y.$$.fragment,Dgt),Dgt.forEach(t),jgt.forEach(t),rTo=i(pQe),oce=n(pQe,"SPAN",{});var Ggt=s(oce);tTo=r(Ggt,"AutoModel"),Ggt.forEach(t),pQe.forEach(t),mXe=i(m),$o=n(m,"DIV",{class:!0});var rl=s($o);T(ky.$$.fragment,rl),aTo=i(rl),Oi=n(rl,"P",{});var kre=s(Oi);nTo=r(kre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Wq=n(kre,"A",{href:!0});var Ogt=s(Wq);sTo=r(Ogt,"from_pretrained()"),Ogt.forEach(t),lTo=r(kre," class method or the "),Hq=n(kre,"A",{href:!0});var Vgt=s(Hq);iTo=r(Vgt,"from_config()"),Vgt.forEach(t),dTo=r(kre,` class
method.`),kre.forEach(t),cTo=i(rl),Sy=n(rl,"P",{});var _Qe=s(Sy);mTo=r(_Qe,"This class cannot be instantiated directly using "),rce=n(_Qe,"CODE",{});var Xgt=s(rce);fTo=r(Xgt,"__init__()"),Xgt.forEach(t),gTo=r(_Qe," (throws an error)."),_Qe.forEach(t),hTo=i(rl),it=n(rl,"DIV",{class:!0});var i7=s(it);T(Ry.$$.fragment,i7),uTo=i(i7),tce=n(i7,"P",{});var zgt=s(tce);pTo=r(zgt,"Instantiates one of the base model classes of the library from a configuration."),zgt.forEach(t),_To=i(i7),Vi=n(i7,"P",{});var Sre=s(Vi);bTo=r(Sre,`Note:
Loading a model from its configuration file does `),ace=n(Sre,"STRONG",{});var Qgt=s(ace);vTo=r(Qgt,"not"),Qgt.forEach(t),FTo=r(Sre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uq=n(Sre,"A",{href:!0});var Wgt=s(Uq);TTo=r(Wgt,"from_pretrained()"),Wgt.forEach(t),MTo=r(Sre," to load the model weights."),Sre.forEach(t),ETo=i(i7),T(Ou.$$.fragment,i7),i7.forEach(t),CTo=i(rl),Ye=n(rl,"DIV",{class:!0});var la=s(Ye);T(Py.$$.fragment,la),wTo=i(la),nce=n(la,"P",{});var Hgt=s(nce);ATo=r(Hgt,"Instantiate one of the base model classes of the library from a pretrained model."),Hgt.forEach(t),LTo=i(la),Ia=n(la,"P",{});var d7=s(Ia);yTo=r(d7,"The model class to instantiate is selected based on the "),sce=n(d7,"CODE",{});var Ugt=s(sce);xTo=r(Ugt,"model_type"),Ugt.forEach(t),$To=r(d7,` property of the config object (either
passed as an argument or loaded from `),lce=n(d7,"CODE",{});var Jgt=s(lce);kTo=r(Jgt,"pretrained_model_name_or_path"),Jgt.forEach(t),STo=r(d7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ice=n(d7,"CODE",{});var Ygt=s(ice);RTo=r(Ygt,"pretrained_model_name_or_path"),Ygt.forEach(t),PTo=r(d7,":"),d7.forEach(t),BTo=i(la),y=n(la,"UL",{});var x=s(y);Vu=n(x,"LI",{});var X9e=s(Vu);dce=n(X9e,"STRONG",{});var Kgt=s(dce);ITo=r(Kgt,"albert"),Kgt.forEach(t),NTo=r(X9e," \u2014 "),Jq=n(X9e,"A",{href:!0});var Zgt=s(Jq);qTo=r(Zgt,"AlbertModel"),Zgt.forEach(t),jTo=r(X9e," (ALBERT model)"),X9e.forEach(t),DTo=i(x),Xu=n(x,"LI",{});var z9e=s(Xu);cce=n(z9e,"STRONG",{});var eht=s(cce);GTo=r(eht,"bart"),eht.forEach(t),OTo=r(z9e," \u2014 "),Yq=n(z9e,"A",{href:!0});var oht=s(Yq);VTo=r(oht,"BartModel"),oht.forEach(t),XTo=r(z9e," (BART model)"),z9e.forEach(t),zTo=i(x),zu=n(x,"LI",{});var Q9e=s(zu);mce=n(Q9e,"STRONG",{});var rht=s(mce);QTo=r(rht,"beit"),rht.forEach(t),WTo=r(Q9e," \u2014 "),Kq=n(Q9e,"A",{href:!0});var tht=s(Kq);HTo=r(tht,"BeitModel"),tht.forEach(t),UTo=r(Q9e," (BEiT model)"),Q9e.forEach(t),JTo=i(x),Qu=n(x,"LI",{});var W9e=s(Qu);fce=n(W9e,"STRONG",{});var aht=s(fce);YTo=r(aht,"bert"),aht.forEach(t),KTo=r(W9e," \u2014 "),Zq=n(W9e,"A",{href:!0});var nht=s(Zq);ZTo=r(nht,"BertModel"),nht.forEach(t),eMo=r(W9e," (BERT model)"),W9e.forEach(t),oMo=i(x),Wu=n(x,"LI",{});var H9e=s(Wu);gce=n(H9e,"STRONG",{});var sht=s(gce);rMo=r(sht,"bert-generation"),sht.forEach(t),tMo=r(H9e," \u2014 "),ej=n(H9e,"A",{href:!0});var lht=s(ej);aMo=r(lht,"BertGenerationEncoder"),lht.forEach(t),nMo=r(H9e," (Bert Generation model)"),H9e.forEach(t),sMo=i(x),Hu=n(x,"LI",{});var U9e=s(Hu);hce=n(U9e,"STRONG",{});var iht=s(hce);lMo=r(iht,"big_bird"),iht.forEach(t),iMo=r(U9e," \u2014 "),oj=n(U9e,"A",{href:!0});var dht=s(oj);dMo=r(dht,"BigBirdModel"),dht.forEach(t),cMo=r(U9e," (BigBird model)"),U9e.forEach(t),mMo=i(x),Uu=n(x,"LI",{});var J9e=s(Uu);uce=n(J9e,"STRONG",{});var cht=s(uce);fMo=r(cht,"bigbird_pegasus"),cht.forEach(t),gMo=r(J9e," \u2014 "),rj=n(J9e,"A",{href:!0});var mht=s(rj);hMo=r(mht,"BigBirdPegasusModel"),mht.forEach(t),uMo=r(J9e," (BigBird-Pegasus model)"),J9e.forEach(t),pMo=i(x),Ju=n(x,"LI",{});var Y9e=s(Ju);pce=n(Y9e,"STRONG",{});var fht=s(pce);_Mo=r(fht,"blenderbot"),fht.forEach(t),bMo=r(Y9e," \u2014 "),tj=n(Y9e,"A",{href:!0});var ght=s(tj);vMo=r(ght,"BlenderbotModel"),ght.forEach(t),FMo=r(Y9e," (Blenderbot model)"),Y9e.forEach(t),TMo=i(x),Yu=n(x,"LI",{});var K9e=s(Yu);_ce=n(K9e,"STRONG",{});var hht=s(_ce);MMo=r(hht,"blenderbot-small"),hht.forEach(t),EMo=r(K9e," \u2014 "),aj=n(K9e,"A",{href:!0});var uht=s(aj);CMo=r(uht,"BlenderbotSmallModel"),uht.forEach(t),wMo=r(K9e," (BlenderbotSmall model)"),K9e.forEach(t),AMo=i(x),Ku=n(x,"LI",{});var Z9e=s(Ku);bce=n(Z9e,"STRONG",{});var pht=s(bce);LMo=r(pht,"bloom"),pht.forEach(t),yMo=r(Z9e," \u2014 "),nj=n(Z9e,"A",{href:!0});var _ht=s(nj);xMo=r(_ht,"BloomModel"),_ht.forEach(t),$Mo=r(Z9e," (BLOOM model)"),Z9e.forEach(t),kMo=i(x),Zu=n(x,"LI",{});var exe=s(Zu);vce=n(exe,"STRONG",{});var bht=s(vce);SMo=r(bht,"camembert"),bht.forEach(t),RMo=r(exe," \u2014 "),sj=n(exe,"A",{href:!0});var vht=s(sj);PMo=r(vht,"CamembertModel"),vht.forEach(t),BMo=r(exe," (CamemBERT model)"),exe.forEach(t),IMo=i(x),ep=n(x,"LI",{});var oxe=s(ep);Fce=n(oxe,"STRONG",{});var Fht=s(Fce);NMo=r(Fht,"canine"),Fht.forEach(t),qMo=r(oxe," \u2014 "),lj=n(oxe,"A",{href:!0});var Tht=s(lj);jMo=r(Tht,"CanineModel"),Tht.forEach(t),DMo=r(oxe," (CANINE model)"),oxe.forEach(t),GMo=i(x),op=n(x,"LI",{});var rxe=s(op);Tce=n(rxe,"STRONG",{});var Mht=s(Tce);OMo=r(Mht,"clip"),Mht.forEach(t),VMo=r(rxe," \u2014 "),ij=n(rxe,"A",{href:!0});var Eht=s(ij);XMo=r(Eht,"CLIPModel"),Eht.forEach(t),zMo=r(rxe," (CLIP model)"),rxe.forEach(t),QMo=i(x),rp=n(x,"LI",{});var txe=s(rp);Mce=n(txe,"STRONG",{});var Cht=s(Mce);WMo=r(Cht,"codegen"),Cht.forEach(t),HMo=r(txe," \u2014 "),dj=n(txe,"A",{href:!0});var wht=s(dj);UMo=r(wht,"CodeGenModel"),wht.forEach(t),JMo=r(txe," (CodeGen model)"),txe.forEach(t),YMo=i(x),tp=n(x,"LI",{});var axe=s(tp);Ece=n(axe,"STRONG",{});var Aht=s(Ece);KMo=r(Aht,"convbert"),Aht.forEach(t),ZMo=r(axe," \u2014 "),cj=n(axe,"A",{href:!0});var Lht=s(cj);e4o=r(Lht,"ConvBertModel"),Lht.forEach(t),o4o=r(axe," (ConvBERT model)"),axe.forEach(t),r4o=i(x),ap=n(x,"LI",{});var nxe=s(ap);Cce=n(nxe,"STRONG",{});var yht=s(Cce);t4o=r(yht,"convnext"),yht.forEach(t),a4o=r(nxe," \u2014 "),mj=n(nxe,"A",{href:!0});var xht=s(mj);n4o=r(xht,"ConvNextModel"),xht.forEach(t),s4o=r(nxe," (ConvNeXT model)"),nxe.forEach(t),l4o=i(x),np=n(x,"LI",{});var sxe=s(np);wce=n(sxe,"STRONG",{});var $ht=s(wce);i4o=r($ht,"ctrl"),$ht.forEach(t),d4o=r(sxe," \u2014 "),fj=n(sxe,"A",{href:!0});var kht=s(fj);c4o=r(kht,"CTRLModel"),kht.forEach(t),m4o=r(sxe," (CTRL model)"),sxe.forEach(t),f4o=i(x),sp=n(x,"LI",{});var lxe=s(sp);Ace=n(lxe,"STRONG",{});var Sht=s(Ace);g4o=r(Sht,"cvt"),Sht.forEach(t),h4o=r(lxe," \u2014 "),gj=n(lxe,"A",{href:!0});var Rht=s(gj);u4o=r(Rht,"CvtModel"),Rht.forEach(t),p4o=r(lxe," (CvT model)"),lxe.forEach(t),_4o=i(x),lp=n(x,"LI",{});var ixe=s(lp);Lce=n(ixe,"STRONG",{});var Pht=s(Lce);b4o=r(Pht,"data2vec-audio"),Pht.forEach(t),v4o=r(ixe," \u2014 "),hj=n(ixe,"A",{href:!0});var Bht=s(hj);F4o=r(Bht,"Data2VecAudioModel"),Bht.forEach(t),T4o=r(ixe," (Data2VecAudio model)"),ixe.forEach(t),M4o=i(x),ip=n(x,"LI",{});var dxe=s(ip);yce=n(dxe,"STRONG",{});var Iht=s(yce);E4o=r(Iht,"data2vec-text"),Iht.forEach(t),C4o=r(dxe," \u2014 "),uj=n(dxe,"A",{href:!0});var Nht=s(uj);w4o=r(Nht,"Data2VecTextModel"),Nht.forEach(t),A4o=r(dxe," (Data2VecText model)"),dxe.forEach(t),L4o=i(x),dp=n(x,"LI",{});var cxe=s(dp);xce=n(cxe,"STRONG",{});var qht=s(xce);y4o=r(qht,"data2vec-vision"),qht.forEach(t),x4o=r(cxe," \u2014 "),pj=n(cxe,"A",{href:!0});var jht=s(pj);$4o=r(jht,"Data2VecVisionModel"),jht.forEach(t),k4o=r(cxe," (Data2VecVision model)"),cxe.forEach(t),S4o=i(x),cp=n(x,"LI",{});var mxe=s(cp);$ce=n(mxe,"STRONG",{});var Dht=s($ce);R4o=r(Dht,"deberta"),Dht.forEach(t),P4o=r(mxe," \u2014 "),_j=n(mxe,"A",{href:!0});var Ght=s(_j);B4o=r(Ght,"DebertaModel"),Ght.forEach(t),I4o=r(mxe," (DeBERTa model)"),mxe.forEach(t),N4o=i(x),mp=n(x,"LI",{});var fxe=s(mp);kce=n(fxe,"STRONG",{});var Oht=s(kce);q4o=r(Oht,"deberta-v2"),Oht.forEach(t),j4o=r(fxe," \u2014 "),bj=n(fxe,"A",{href:!0});var Vht=s(bj);D4o=r(Vht,"DebertaV2Model"),Vht.forEach(t),G4o=r(fxe," (DeBERTa-v2 model)"),fxe.forEach(t),O4o=i(x),fp=n(x,"LI",{});var gxe=s(fp);Sce=n(gxe,"STRONG",{});var Xht=s(Sce);V4o=r(Xht,"decision_transformer"),Xht.forEach(t),X4o=r(gxe," \u2014 "),vj=n(gxe,"A",{href:!0});var zht=s(vj);z4o=r(zht,"DecisionTransformerModel"),zht.forEach(t),Q4o=r(gxe," (Decision Transformer model)"),gxe.forEach(t),W4o=i(x),gp=n(x,"LI",{});var hxe=s(gp);Rce=n(hxe,"STRONG",{});var Qht=s(Rce);H4o=r(Qht,"deit"),Qht.forEach(t),U4o=r(hxe," \u2014 "),Fj=n(hxe,"A",{href:!0});var Wht=s(Fj);J4o=r(Wht,"DeiTModel"),Wht.forEach(t),Y4o=r(hxe," (DeiT model)"),hxe.forEach(t),K4o=i(x),hp=n(x,"LI",{});var uxe=s(hp);Pce=n(uxe,"STRONG",{});var Hht=s(Pce);Z4o=r(Hht,"detr"),Hht.forEach(t),eEo=r(uxe," \u2014 "),Tj=n(uxe,"A",{href:!0});var Uht=s(Tj);oEo=r(Uht,"DetrModel"),Uht.forEach(t),rEo=r(uxe," (DETR model)"),uxe.forEach(t),tEo=i(x),up=n(x,"LI",{});var pxe=s(up);Bce=n(pxe,"STRONG",{});var Jht=s(Bce);aEo=r(Jht,"distilbert"),Jht.forEach(t),nEo=r(pxe," \u2014 "),Mj=n(pxe,"A",{href:!0});var Yht=s(Mj);sEo=r(Yht,"DistilBertModel"),Yht.forEach(t),lEo=r(pxe," (DistilBERT model)"),pxe.forEach(t),iEo=i(x),pp=n(x,"LI",{});var _xe=s(pp);Ice=n(_xe,"STRONG",{});var Kht=s(Ice);dEo=r(Kht,"dpr"),Kht.forEach(t),cEo=r(_xe," \u2014 "),Ej=n(_xe,"A",{href:!0});var Zht=s(Ej);mEo=r(Zht,"DPRQuestionEncoder"),Zht.forEach(t),fEo=r(_xe," (DPR model)"),_xe.forEach(t),gEo=i(x),_p=n(x,"LI",{});var bxe=s(_p);Nce=n(bxe,"STRONG",{});var eut=s(Nce);hEo=r(eut,"dpt"),eut.forEach(t),uEo=r(bxe," \u2014 "),Cj=n(bxe,"A",{href:!0});var out=s(Cj);pEo=r(out,"DPTModel"),out.forEach(t),_Eo=r(bxe," (DPT model)"),bxe.forEach(t),bEo=i(x),bp=n(x,"LI",{});var vxe=s(bp);qce=n(vxe,"STRONG",{});var rut=s(qce);vEo=r(rut,"electra"),rut.forEach(t),FEo=r(vxe," \u2014 "),wj=n(vxe,"A",{href:!0});var tut=s(wj);TEo=r(tut,"ElectraModel"),tut.forEach(t),MEo=r(vxe," (ELECTRA model)"),vxe.forEach(t),EEo=i(x),vp=n(x,"LI",{});var Fxe=s(vp);jce=n(Fxe,"STRONG",{});var aut=s(jce);CEo=r(aut,"flaubert"),aut.forEach(t),wEo=r(Fxe," \u2014 "),Aj=n(Fxe,"A",{href:!0});var nut=s(Aj);AEo=r(nut,"FlaubertModel"),nut.forEach(t),LEo=r(Fxe," (FlauBERT model)"),Fxe.forEach(t),yEo=i(x),Fp=n(x,"LI",{});var Txe=s(Fp);Dce=n(Txe,"STRONG",{});var sut=s(Dce);xEo=r(sut,"flava"),sut.forEach(t),$Eo=r(Txe," \u2014 "),Lj=n(Txe,"A",{href:!0});var lut=s(Lj);kEo=r(lut,"FlavaModel"),lut.forEach(t),SEo=r(Txe," (FLAVA model)"),Txe.forEach(t),REo=i(x),Tp=n(x,"LI",{});var Mxe=s(Tp);Gce=n(Mxe,"STRONG",{});var iut=s(Gce);PEo=r(iut,"fnet"),iut.forEach(t),BEo=r(Mxe," \u2014 "),yj=n(Mxe,"A",{href:!0});var dut=s(yj);IEo=r(dut,"FNetModel"),dut.forEach(t),NEo=r(Mxe," (FNet model)"),Mxe.forEach(t),qEo=i(x),Mp=n(x,"LI",{});var Exe=s(Mp);Oce=n(Exe,"STRONG",{});var cut=s(Oce);jEo=r(cut,"fsmt"),cut.forEach(t),DEo=r(Exe," \u2014 "),xj=n(Exe,"A",{href:!0});var mut=s(xj);GEo=r(mut,"FSMTModel"),mut.forEach(t),OEo=r(Exe," (FairSeq Machine-Translation model)"),Exe.forEach(t),VEo=i(x),Ws=n(x,"LI",{});var $S=s(Ws);Vce=n($S,"STRONG",{});var fut=s(Vce);XEo=r(fut,"funnel"),fut.forEach(t),zEo=r($S," \u2014 "),$j=n($S,"A",{href:!0});var gut=s($j);QEo=r(gut,"FunnelModel"),gut.forEach(t),WEo=r($S," or "),kj=n($S,"A",{href:!0});var hut=s(kj);HEo=r(hut,"FunnelBaseModel"),hut.forEach(t),UEo=r($S," (Funnel Transformer model)"),$S.forEach(t),JEo=i(x),Ep=n(x,"LI",{});var Cxe=s(Ep);Xce=n(Cxe,"STRONG",{});var uut=s(Xce);YEo=r(uut,"glpn"),uut.forEach(t),KEo=r(Cxe," \u2014 "),Sj=n(Cxe,"A",{href:!0});var put=s(Sj);ZEo=r(put,"GLPNModel"),put.forEach(t),eCo=r(Cxe," (GLPN model)"),Cxe.forEach(t),oCo=i(x),Cp=n(x,"LI",{});var wxe=s(Cp);zce=n(wxe,"STRONG",{});var _ut=s(zce);rCo=r(_ut,"gpt2"),_ut.forEach(t),tCo=r(wxe," \u2014 "),Rj=n(wxe,"A",{href:!0});var but=s(Rj);aCo=r(but,"GPT2Model"),but.forEach(t),nCo=r(wxe," (OpenAI GPT-2 model)"),wxe.forEach(t),sCo=i(x),wp=n(x,"LI",{});var Axe=s(wp);Qce=n(Axe,"STRONG",{});var vut=s(Qce);lCo=r(vut,"gpt_neo"),vut.forEach(t),iCo=r(Axe," \u2014 "),Pj=n(Axe,"A",{href:!0});var Fut=s(Pj);dCo=r(Fut,"GPTNeoModel"),Fut.forEach(t),cCo=r(Axe," (GPT Neo model)"),Axe.forEach(t),mCo=i(x),Ap=n(x,"LI",{});var Lxe=s(Ap);Wce=n(Lxe,"STRONG",{});var Tut=s(Wce);fCo=r(Tut,"gpt_neox"),Tut.forEach(t),gCo=r(Lxe," \u2014 "),Bj=n(Lxe,"A",{href:!0});var Mut=s(Bj);hCo=r(Mut,"GPTNeoXModel"),Mut.forEach(t),uCo=r(Lxe," (GPT NeoX model)"),Lxe.forEach(t),pCo=i(x),Lp=n(x,"LI",{});var yxe=s(Lp);Hce=n(yxe,"STRONG",{});var Eut=s(Hce);_Co=r(Eut,"gptj"),Eut.forEach(t),bCo=r(yxe," \u2014 "),Ij=n(yxe,"A",{href:!0});var Cut=s(Ij);vCo=r(Cut,"GPTJModel"),Cut.forEach(t),FCo=r(yxe," (GPT-J model)"),yxe.forEach(t),TCo=i(x),yp=n(x,"LI",{});var xxe=s(yp);Uce=n(xxe,"STRONG",{});var wut=s(Uce);MCo=r(wut,"groupvit"),wut.forEach(t),ECo=r(xxe," \u2014 "),Nj=n(xxe,"A",{href:!0});var Aut=s(Nj);CCo=r(Aut,"GroupViTModel"),Aut.forEach(t),wCo=r(xxe," (GroupViT model)"),xxe.forEach(t),ACo=i(x),xp=n(x,"LI",{});var $xe=s(xp);Jce=n($xe,"STRONG",{});var Lut=s(Jce);LCo=r(Lut,"hubert"),Lut.forEach(t),yCo=r($xe," \u2014 "),qj=n($xe,"A",{href:!0});var yut=s(qj);xCo=r(yut,"HubertModel"),yut.forEach(t),$Co=r($xe," (Hubert model)"),$xe.forEach(t),kCo=i(x),$p=n(x,"LI",{});var kxe=s($p);Yce=n(kxe,"STRONG",{});var xut=s(Yce);SCo=r(xut,"ibert"),xut.forEach(t),RCo=r(kxe," \u2014 "),jj=n(kxe,"A",{href:!0});var $ut=s(jj);PCo=r($ut,"IBertModel"),$ut.forEach(t),BCo=r(kxe," (I-BERT model)"),kxe.forEach(t),ICo=i(x),kp=n(x,"LI",{});var Sxe=s(kp);Kce=n(Sxe,"STRONG",{});var kut=s(Kce);NCo=r(kut,"imagegpt"),kut.forEach(t),qCo=r(Sxe," \u2014 "),Dj=n(Sxe,"A",{href:!0});var Sut=s(Dj);jCo=r(Sut,"ImageGPTModel"),Sut.forEach(t),DCo=r(Sxe," (ImageGPT model)"),Sxe.forEach(t),GCo=i(x),Sp=n(x,"LI",{});var Rxe=s(Sp);Zce=n(Rxe,"STRONG",{});var Rut=s(Zce);OCo=r(Rut,"layoutlm"),Rut.forEach(t),VCo=r(Rxe," \u2014 "),Gj=n(Rxe,"A",{href:!0});var Put=s(Gj);XCo=r(Put,"LayoutLMModel"),Put.forEach(t),zCo=r(Rxe," (LayoutLM model)"),Rxe.forEach(t),QCo=i(x),Rp=n(x,"LI",{});var Pxe=s(Rp);eme=n(Pxe,"STRONG",{});var But=s(eme);WCo=r(But,"layoutlmv2"),But.forEach(t),HCo=r(Pxe," \u2014 "),Oj=n(Pxe,"A",{href:!0});var Iut=s(Oj);UCo=r(Iut,"LayoutLMv2Model"),Iut.forEach(t),JCo=r(Pxe," (LayoutLMv2 model)"),Pxe.forEach(t),YCo=i(x),Pp=n(x,"LI",{});var Bxe=s(Pp);ome=n(Bxe,"STRONG",{});var Nut=s(ome);KCo=r(Nut,"layoutlmv3"),Nut.forEach(t),ZCo=r(Bxe," \u2014 "),Vj=n(Bxe,"A",{href:!0});var qut=s(Vj);e3o=r(qut,"LayoutLMv3Model"),qut.forEach(t),o3o=r(Bxe," (LayoutLMv3 model)"),Bxe.forEach(t),r3o=i(x),Bp=n(x,"LI",{});var Ixe=s(Bp);rme=n(Ixe,"STRONG",{});var jut=s(rme);t3o=r(jut,"led"),jut.forEach(t),a3o=r(Ixe," \u2014 "),Xj=n(Ixe,"A",{href:!0});var Dut=s(Xj);n3o=r(Dut,"LEDModel"),Dut.forEach(t),s3o=r(Ixe," (LED model)"),Ixe.forEach(t),l3o=i(x),Ip=n(x,"LI",{});var Nxe=s(Ip);tme=n(Nxe,"STRONG",{});var Gut=s(tme);i3o=r(Gut,"levit"),Gut.forEach(t),d3o=r(Nxe," \u2014 "),zj=n(Nxe,"A",{href:!0});var Out=s(zj);c3o=r(Out,"LevitModel"),Out.forEach(t),m3o=r(Nxe," (LeViT model)"),Nxe.forEach(t),f3o=i(x),Np=n(x,"LI",{});var qxe=s(Np);ame=n(qxe,"STRONG",{});var Vut=s(ame);g3o=r(Vut,"longformer"),Vut.forEach(t),h3o=r(qxe," \u2014 "),Qj=n(qxe,"A",{href:!0});var Xut=s(Qj);u3o=r(Xut,"LongformerModel"),Xut.forEach(t),p3o=r(qxe," (Longformer model)"),qxe.forEach(t),_3o=i(x),qp=n(x,"LI",{});var jxe=s(qp);nme=n(jxe,"STRONG",{});var zut=s(nme);b3o=r(zut,"longt5"),zut.forEach(t),v3o=r(jxe," \u2014 "),Wj=n(jxe,"A",{href:!0});var Qut=s(Wj);F3o=r(Qut,"LongT5Model"),Qut.forEach(t),T3o=r(jxe," (LongT5 model)"),jxe.forEach(t),M3o=i(x),jp=n(x,"LI",{});var Dxe=s(jp);sme=n(Dxe,"STRONG",{});var Wut=s(sme);E3o=r(Wut,"luke"),Wut.forEach(t),C3o=r(Dxe," \u2014 "),Hj=n(Dxe,"A",{href:!0});var Hut=s(Hj);w3o=r(Hut,"LukeModel"),Hut.forEach(t),A3o=r(Dxe," (LUKE model)"),Dxe.forEach(t),L3o=i(x),Dp=n(x,"LI",{});var Gxe=s(Dp);lme=n(Gxe,"STRONG",{});var Uut=s(lme);y3o=r(Uut,"lxmert"),Uut.forEach(t),x3o=r(Gxe," \u2014 "),Uj=n(Gxe,"A",{href:!0});var Jut=s(Uj);$3o=r(Jut,"LxmertModel"),Jut.forEach(t),k3o=r(Gxe," (LXMERT model)"),Gxe.forEach(t),S3o=i(x),Gp=n(x,"LI",{});var Oxe=s(Gp);ime=n(Oxe,"STRONG",{});var Yut=s(ime);R3o=r(Yut,"m2m_100"),Yut.forEach(t),P3o=r(Oxe," \u2014 "),Jj=n(Oxe,"A",{href:!0});var Kut=s(Jj);B3o=r(Kut,"M2M100Model"),Kut.forEach(t),I3o=r(Oxe," (M2M100 model)"),Oxe.forEach(t),N3o=i(x),Op=n(x,"LI",{});var Vxe=s(Op);dme=n(Vxe,"STRONG",{});var Zut=s(dme);q3o=r(Zut,"marian"),Zut.forEach(t),j3o=r(Vxe," \u2014 "),Yj=n(Vxe,"A",{href:!0});var ept=s(Yj);D3o=r(ept,"MarianModel"),ept.forEach(t),G3o=r(Vxe," (Marian model)"),Vxe.forEach(t),O3o=i(x),Vp=n(x,"LI",{});var Xxe=s(Vp);cme=n(Xxe,"STRONG",{});var opt=s(cme);V3o=r(opt,"maskformer"),opt.forEach(t),X3o=r(Xxe," \u2014 "),Kj=n(Xxe,"A",{href:!0});var rpt=s(Kj);z3o=r(rpt,"MaskFormerModel"),rpt.forEach(t),Q3o=r(Xxe," (MaskFormer model)"),Xxe.forEach(t),W3o=i(x),Xp=n(x,"LI",{});var zxe=s(Xp);mme=n(zxe,"STRONG",{});var tpt=s(mme);H3o=r(tpt,"mbart"),tpt.forEach(t),U3o=r(zxe," \u2014 "),Zj=n(zxe,"A",{href:!0});var apt=s(Zj);J3o=r(apt,"MBartModel"),apt.forEach(t),Y3o=r(zxe," (mBART model)"),zxe.forEach(t),K3o=i(x),zp=n(x,"LI",{});var Qxe=s(zp);fme=n(Qxe,"STRONG",{});var npt=s(fme);Z3o=r(npt,"mctct"),npt.forEach(t),e5o=r(Qxe," \u2014 "),eD=n(Qxe,"A",{href:!0});var spt=s(eD);o5o=r(spt,"MCTCTModel"),spt.forEach(t),r5o=r(Qxe," (M-CTC-T model)"),Qxe.forEach(t),t5o=i(x),Qp=n(x,"LI",{});var Wxe=s(Qp);gme=n(Wxe,"STRONG",{});var lpt=s(gme);a5o=r(lpt,"megatron-bert"),lpt.forEach(t),n5o=r(Wxe," \u2014 "),oD=n(Wxe,"A",{href:!0});var ipt=s(oD);s5o=r(ipt,"MegatronBertModel"),ipt.forEach(t),l5o=r(Wxe," (Megatron-BERT model)"),Wxe.forEach(t),i5o=i(x),Wp=n(x,"LI",{});var Hxe=s(Wp);hme=n(Hxe,"STRONG",{});var dpt=s(hme);d5o=r(dpt,"mobilebert"),dpt.forEach(t),c5o=r(Hxe," \u2014 "),rD=n(Hxe,"A",{href:!0});var cpt=s(rD);m5o=r(cpt,"MobileBertModel"),cpt.forEach(t),f5o=r(Hxe," (MobileBERT model)"),Hxe.forEach(t),g5o=i(x),Hp=n(x,"LI",{});var Uxe=s(Hp);ume=n(Uxe,"STRONG",{});var mpt=s(ume);h5o=r(mpt,"mobilevit"),mpt.forEach(t),u5o=r(Uxe," \u2014 "),tD=n(Uxe,"A",{href:!0});var fpt=s(tD);p5o=r(fpt,"MobileViTModel"),fpt.forEach(t),_5o=r(Uxe," (MobileViT model)"),Uxe.forEach(t),b5o=i(x),Up=n(x,"LI",{});var Jxe=s(Up);pme=n(Jxe,"STRONG",{});var gpt=s(pme);v5o=r(gpt,"mpnet"),gpt.forEach(t),F5o=r(Jxe," \u2014 "),aD=n(Jxe,"A",{href:!0});var hpt=s(aD);T5o=r(hpt,"MPNetModel"),hpt.forEach(t),M5o=r(Jxe," (MPNet model)"),Jxe.forEach(t),E5o=i(x),Jp=n(x,"LI",{});var Yxe=s(Jp);_me=n(Yxe,"STRONG",{});var upt=s(_me);C5o=r(upt,"mt5"),upt.forEach(t),w5o=r(Yxe," \u2014 "),nD=n(Yxe,"A",{href:!0});var ppt=s(nD);A5o=r(ppt,"MT5Model"),ppt.forEach(t),L5o=r(Yxe," (MT5 model)"),Yxe.forEach(t),y5o=i(x),Yp=n(x,"LI",{});var Kxe=s(Yp);bme=n(Kxe,"STRONG",{});var _pt=s(bme);x5o=r(_pt,"mvp"),_pt.forEach(t),$5o=r(Kxe," \u2014 "),sD=n(Kxe,"A",{href:!0});var bpt=s(sD);k5o=r(bpt,"MvpModel"),bpt.forEach(t),S5o=r(Kxe," (MVP model)"),Kxe.forEach(t),R5o=i(x),Kp=n(x,"LI",{});var Zxe=s(Kp);vme=n(Zxe,"STRONG",{});var vpt=s(vme);P5o=r(vpt,"nezha"),vpt.forEach(t),B5o=r(Zxe," \u2014 "),lD=n(Zxe,"A",{href:!0});var Fpt=s(lD);I5o=r(Fpt,"NezhaModel"),Fpt.forEach(t),N5o=r(Zxe," (Nezha model)"),Zxe.forEach(t),q5o=i(x),Zp=n(x,"LI",{});var e$e=s(Zp);Fme=n(e$e,"STRONG",{});var Tpt=s(Fme);j5o=r(Tpt,"nystromformer"),Tpt.forEach(t),D5o=r(e$e," \u2014 "),iD=n(e$e,"A",{href:!0});var Mpt=s(iD);G5o=r(Mpt,"NystromformerModel"),Mpt.forEach(t),O5o=r(e$e," (Nystr\xF6mformer model)"),e$e.forEach(t),V5o=i(x),e_=n(x,"LI",{});var o$e=s(e_);Tme=n(o$e,"STRONG",{});var Ept=s(Tme);X5o=r(Ept,"openai-gpt"),Ept.forEach(t),z5o=r(o$e," \u2014 "),dD=n(o$e,"A",{href:!0});var Cpt=s(dD);Q5o=r(Cpt,"OpenAIGPTModel"),Cpt.forEach(t),W5o=r(o$e," (OpenAI GPT model)"),o$e.forEach(t),H5o=i(x),o_=n(x,"LI",{});var r$e=s(o_);Mme=n(r$e,"STRONG",{});var wpt=s(Mme);U5o=r(wpt,"opt"),wpt.forEach(t),J5o=r(r$e," \u2014 "),cD=n(r$e,"A",{href:!0});var Apt=s(cD);Y5o=r(Apt,"OPTModel"),Apt.forEach(t),K5o=r(r$e," (OPT model)"),r$e.forEach(t),Z5o=i(x),r_=n(x,"LI",{});var t$e=s(r_);Eme=n(t$e,"STRONG",{});var Lpt=s(Eme);e0o=r(Lpt,"pegasus"),Lpt.forEach(t),o0o=r(t$e," \u2014 "),mD=n(t$e,"A",{href:!0});var ypt=s(mD);r0o=r(ypt,"PegasusModel"),ypt.forEach(t),t0o=r(t$e," (Pegasus model)"),t$e.forEach(t),a0o=i(x),t_=n(x,"LI",{});var a$e=s(t_);Cme=n(a$e,"STRONG",{});var xpt=s(Cme);n0o=r(xpt,"perceiver"),xpt.forEach(t),s0o=r(a$e," \u2014 "),fD=n(a$e,"A",{href:!0});var $pt=s(fD);l0o=r($pt,"PerceiverModel"),$pt.forEach(t),i0o=r(a$e," (Perceiver model)"),a$e.forEach(t),d0o=i(x),a_=n(x,"LI",{});var n$e=s(a_);wme=n(n$e,"STRONG",{});var kpt=s(wme);c0o=r(kpt,"plbart"),kpt.forEach(t),m0o=r(n$e," \u2014 "),gD=n(n$e,"A",{href:!0});var Spt=s(gD);f0o=r(Spt,"PLBartModel"),Spt.forEach(t),g0o=r(n$e," (PLBart model)"),n$e.forEach(t),h0o=i(x),n_=n(x,"LI",{});var s$e=s(n_);Ame=n(s$e,"STRONG",{});var Rpt=s(Ame);u0o=r(Rpt,"poolformer"),Rpt.forEach(t),p0o=r(s$e," \u2014 "),hD=n(s$e,"A",{href:!0});var Ppt=s(hD);_0o=r(Ppt,"PoolFormerModel"),Ppt.forEach(t),b0o=r(s$e," (PoolFormer model)"),s$e.forEach(t),v0o=i(x),s_=n(x,"LI",{});var l$e=s(s_);Lme=n(l$e,"STRONG",{});var Bpt=s(Lme);F0o=r(Bpt,"prophetnet"),Bpt.forEach(t),T0o=r(l$e," \u2014 "),uD=n(l$e,"A",{href:!0});var Ipt=s(uD);M0o=r(Ipt,"ProphetNetModel"),Ipt.forEach(t),E0o=r(l$e," (ProphetNet model)"),l$e.forEach(t),C0o=i(x),l_=n(x,"LI",{});var i$e=s(l_);yme=n(i$e,"STRONG",{});var Npt=s(yme);w0o=r(Npt,"qdqbert"),Npt.forEach(t),A0o=r(i$e," \u2014 "),pD=n(i$e,"A",{href:!0});var qpt=s(pD);L0o=r(qpt,"QDQBertModel"),qpt.forEach(t),y0o=r(i$e," (QDQBert model)"),i$e.forEach(t),x0o=i(x),i_=n(x,"LI",{});var d$e=s(i_);xme=n(d$e,"STRONG",{});var jpt=s(xme);$0o=r(jpt,"reformer"),jpt.forEach(t),k0o=r(d$e," \u2014 "),_D=n(d$e,"A",{href:!0});var Dpt=s(_D);S0o=r(Dpt,"ReformerModel"),Dpt.forEach(t),R0o=r(d$e," (Reformer model)"),d$e.forEach(t),P0o=i(x),d_=n(x,"LI",{});var c$e=s(d_);$me=n(c$e,"STRONG",{});var Gpt=s($me);B0o=r(Gpt,"regnet"),Gpt.forEach(t),I0o=r(c$e," \u2014 "),bD=n(c$e,"A",{href:!0});var Opt=s(bD);N0o=r(Opt,"RegNetModel"),Opt.forEach(t),q0o=r(c$e," (RegNet model)"),c$e.forEach(t),j0o=i(x),c_=n(x,"LI",{});var m$e=s(c_);kme=n(m$e,"STRONG",{});var Vpt=s(kme);D0o=r(Vpt,"rembert"),Vpt.forEach(t),G0o=r(m$e," \u2014 "),vD=n(m$e,"A",{href:!0});var Xpt=s(vD);O0o=r(Xpt,"RemBertModel"),Xpt.forEach(t),V0o=r(m$e," (RemBERT model)"),m$e.forEach(t),X0o=i(x),m_=n(x,"LI",{});var f$e=s(m_);Sme=n(f$e,"STRONG",{});var zpt=s(Sme);z0o=r(zpt,"resnet"),zpt.forEach(t),Q0o=r(f$e," \u2014 "),FD=n(f$e,"A",{href:!0});var Qpt=s(FD);W0o=r(Qpt,"ResNetModel"),Qpt.forEach(t),H0o=r(f$e," (ResNet model)"),f$e.forEach(t),U0o=i(x),f_=n(x,"LI",{});var g$e=s(f_);Rme=n(g$e,"STRONG",{});var Wpt=s(Rme);J0o=r(Wpt,"retribert"),Wpt.forEach(t),Y0o=r(g$e," \u2014 "),TD=n(g$e,"A",{href:!0});var Hpt=s(TD);K0o=r(Hpt,"RetriBertModel"),Hpt.forEach(t),Z0o=r(g$e," (RetriBERT model)"),g$e.forEach(t),ewo=i(x),g_=n(x,"LI",{});var h$e=s(g_);Pme=n(h$e,"STRONG",{});var Upt=s(Pme);owo=r(Upt,"roberta"),Upt.forEach(t),rwo=r(h$e," \u2014 "),MD=n(h$e,"A",{href:!0});var Jpt=s(MD);two=r(Jpt,"RobertaModel"),Jpt.forEach(t),awo=r(h$e," (RoBERTa model)"),h$e.forEach(t),nwo=i(x),h_=n(x,"LI",{});var u$e=s(h_);Bme=n(u$e,"STRONG",{});var Ypt=s(Bme);swo=r(Ypt,"roformer"),Ypt.forEach(t),lwo=r(u$e," \u2014 "),ED=n(u$e,"A",{href:!0});var Kpt=s(ED);iwo=r(Kpt,"RoFormerModel"),Kpt.forEach(t),dwo=r(u$e," (RoFormer model)"),u$e.forEach(t),cwo=i(x),u_=n(x,"LI",{});var p$e=s(u_);Ime=n(p$e,"STRONG",{});var Zpt=s(Ime);mwo=r(Zpt,"segformer"),Zpt.forEach(t),fwo=r(p$e," \u2014 "),CD=n(p$e,"A",{href:!0});var e_t=s(CD);gwo=r(e_t,"SegformerModel"),e_t.forEach(t),hwo=r(p$e," (SegFormer model)"),p$e.forEach(t),uwo=i(x),p_=n(x,"LI",{});var _$e=s(p_);Nme=n(_$e,"STRONG",{});var o_t=s(Nme);pwo=r(o_t,"sew"),o_t.forEach(t),_wo=r(_$e," \u2014 "),wD=n(_$e,"A",{href:!0});var r_t=s(wD);bwo=r(r_t,"SEWModel"),r_t.forEach(t),vwo=r(_$e," (SEW model)"),_$e.forEach(t),Fwo=i(x),__=n(x,"LI",{});var b$e=s(__);qme=n(b$e,"STRONG",{});var t_t=s(qme);Two=r(t_t,"sew-d"),t_t.forEach(t),Mwo=r(b$e," \u2014 "),AD=n(b$e,"A",{href:!0});var a_t=s(AD);Ewo=r(a_t,"SEWDModel"),a_t.forEach(t),Cwo=r(b$e," (SEW-D model)"),b$e.forEach(t),wwo=i(x),b_=n(x,"LI",{});var v$e=s(b_);jme=n(v$e,"STRONG",{});var n_t=s(jme);Awo=r(n_t,"speech_to_text"),n_t.forEach(t),Lwo=r(v$e," \u2014 "),LD=n(v$e,"A",{href:!0});var s_t=s(LD);ywo=r(s_t,"Speech2TextModel"),s_t.forEach(t),xwo=r(v$e," (Speech2Text model)"),v$e.forEach(t),$wo=i(x),v_=n(x,"LI",{});var F$e=s(v_);Dme=n(F$e,"STRONG",{});var l_t=s(Dme);kwo=r(l_t,"splinter"),l_t.forEach(t),Swo=r(F$e," \u2014 "),yD=n(F$e,"A",{href:!0});var i_t=s(yD);Rwo=r(i_t,"SplinterModel"),i_t.forEach(t),Pwo=r(F$e," (Splinter model)"),F$e.forEach(t),Bwo=i(x),F_=n(x,"LI",{});var T$e=s(F_);Gme=n(T$e,"STRONG",{});var d_t=s(Gme);Iwo=r(d_t,"squeezebert"),d_t.forEach(t),Nwo=r(T$e," \u2014 "),xD=n(T$e,"A",{href:!0});var c_t=s(xD);qwo=r(c_t,"SqueezeBertModel"),c_t.forEach(t),jwo=r(T$e," (SqueezeBERT model)"),T$e.forEach(t),Dwo=i(x),T_=n(x,"LI",{});var M$e=s(T_);Ome=n(M$e,"STRONG",{});var m_t=s(Ome);Gwo=r(m_t,"swin"),m_t.forEach(t),Owo=r(M$e," \u2014 "),$D=n(M$e,"A",{href:!0});var f_t=s($D);Vwo=r(f_t,"SwinModel"),f_t.forEach(t),Xwo=r(M$e," (Swin Transformer model)"),M$e.forEach(t),zwo=i(x),M_=n(x,"LI",{});var E$e=s(M_);Vme=n(E$e,"STRONG",{});var g_t=s(Vme);Qwo=r(g_t,"t5"),g_t.forEach(t),Wwo=r(E$e," \u2014 "),kD=n(E$e,"A",{href:!0});var h_t=s(kD);Hwo=r(h_t,"T5Model"),h_t.forEach(t),Uwo=r(E$e," (T5 model)"),E$e.forEach(t),Jwo=i(x),E_=n(x,"LI",{});var C$e=s(E_);Xme=n(C$e,"STRONG",{});var u_t=s(Xme);Ywo=r(u_t,"tapas"),u_t.forEach(t),Kwo=r(C$e," \u2014 "),SD=n(C$e,"A",{href:!0});var p_t=s(SD);Zwo=r(p_t,"TapasModel"),p_t.forEach(t),eAo=r(C$e," (TAPAS model)"),C$e.forEach(t),oAo=i(x),C_=n(x,"LI",{});var w$e=s(C_);zme=n(w$e,"STRONG",{});var __t=s(zme);rAo=r(__t,"trajectory_transformer"),__t.forEach(t),tAo=r(w$e," \u2014 "),RD=n(w$e,"A",{href:!0});var b_t=s(RD);aAo=r(b_t,"TrajectoryTransformerModel"),b_t.forEach(t),nAo=r(w$e," (Trajectory Transformer model)"),w$e.forEach(t),sAo=i(x),w_=n(x,"LI",{});var A$e=s(w_);Qme=n(A$e,"STRONG",{});var v_t=s(Qme);lAo=r(v_t,"transfo-xl"),v_t.forEach(t),iAo=r(A$e," \u2014 "),PD=n(A$e,"A",{href:!0});var F_t=s(PD);dAo=r(F_t,"TransfoXLModel"),F_t.forEach(t),cAo=r(A$e," (Transformer-XL model)"),A$e.forEach(t),mAo=i(x),A_=n(x,"LI",{});var L$e=s(A_);Wme=n(L$e,"STRONG",{});var T_t=s(Wme);fAo=r(T_t,"unispeech"),T_t.forEach(t),gAo=r(L$e," \u2014 "),BD=n(L$e,"A",{href:!0});var M_t=s(BD);hAo=r(M_t,"UniSpeechModel"),M_t.forEach(t),uAo=r(L$e," (UniSpeech model)"),L$e.forEach(t),pAo=i(x),L_=n(x,"LI",{});var y$e=s(L_);Hme=n(y$e,"STRONG",{});var E_t=s(Hme);_Ao=r(E_t,"unispeech-sat"),E_t.forEach(t),bAo=r(y$e," \u2014 "),ID=n(y$e,"A",{href:!0});var C_t=s(ID);vAo=r(C_t,"UniSpeechSatModel"),C_t.forEach(t),FAo=r(y$e," (UniSpeechSat model)"),y$e.forEach(t),TAo=i(x),y_=n(x,"LI",{});var x$e=s(y_);Ume=n(x$e,"STRONG",{});var w_t=s(Ume);MAo=r(w_t,"van"),w_t.forEach(t),EAo=r(x$e," \u2014 "),ND=n(x$e,"A",{href:!0});var A_t=s(ND);CAo=r(A_t,"VanModel"),A_t.forEach(t),wAo=r(x$e," (VAN model)"),x$e.forEach(t),AAo=i(x),x_=n(x,"LI",{});var $$e=s(x_);Jme=n($$e,"STRONG",{});var L_t=s(Jme);LAo=r(L_t,"vilt"),L_t.forEach(t),yAo=r($$e," \u2014 "),qD=n($$e,"A",{href:!0});var y_t=s(qD);xAo=r(y_t,"ViltModel"),y_t.forEach(t),$Ao=r($$e," (ViLT model)"),$$e.forEach(t),kAo=i(x),$_=n(x,"LI",{});var k$e=s($_);Yme=n(k$e,"STRONG",{});var x_t=s(Yme);SAo=r(x_t,"vision-text-dual-encoder"),x_t.forEach(t),RAo=r(k$e," \u2014 "),jD=n(k$e,"A",{href:!0});var $_t=s(jD);PAo=r($_t,"VisionTextDualEncoderModel"),$_t.forEach(t),BAo=r(k$e," (VisionTextDualEncoder model)"),k$e.forEach(t),IAo=i(x),k_=n(x,"LI",{});var S$e=s(k_);Kme=n(S$e,"STRONG",{});var k_t=s(Kme);NAo=r(k_t,"visual_bert"),k_t.forEach(t),qAo=r(S$e," \u2014 "),DD=n(S$e,"A",{href:!0});var S_t=s(DD);jAo=r(S_t,"VisualBertModel"),S_t.forEach(t),DAo=r(S$e," (VisualBERT model)"),S$e.forEach(t),GAo=i(x),S_=n(x,"LI",{});var R$e=s(S_);Zme=n(R$e,"STRONG",{});var R_t=s(Zme);OAo=r(R_t,"vit"),R_t.forEach(t),VAo=r(R$e," \u2014 "),GD=n(R$e,"A",{href:!0});var P_t=s(GD);XAo=r(P_t,"ViTModel"),P_t.forEach(t),zAo=r(R$e," (ViT model)"),R$e.forEach(t),QAo=i(x),R_=n(x,"LI",{});var P$e=s(R_);efe=n(P$e,"STRONG",{});var B_t=s(efe);WAo=r(B_t,"vit_mae"),B_t.forEach(t),HAo=r(P$e," \u2014 "),OD=n(P$e,"A",{href:!0});var I_t=s(OD);UAo=r(I_t,"ViTMAEModel"),I_t.forEach(t),JAo=r(P$e," (ViTMAE model)"),P$e.forEach(t),YAo=i(x),P_=n(x,"LI",{});var B$e=s(P_);ofe=n(B$e,"STRONG",{});var N_t=s(ofe);KAo=r(N_t,"wav2vec2"),N_t.forEach(t),ZAo=r(B$e," \u2014 "),VD=n(B$e,"A",{href:!0});var q_t=s(VD);e6o=r(q_t,"Wav2Vec2Model"),q_t.forEach(t),o6o=r(B$e," (Wav2Vec2 model)"),B$e.forEach(t),r6o=i(x),B_=n(x,"LI",{});var I$e=s(B_);rfe=n(I$e,"STRONG",{});var j_t=s(rfe);t6o=r(j_t,"wav2vec2-conformer"),j_t.forEach(t),a6o=r(I$e," \u2014 "),XD=n(I$e,"A",{href:!0});var D_t=s(XD);n6o=r(D_t,"Wav2Vec2ConformerModel"),D_t.forEach(t),s6o=r(I$e," (Wav2Vec2-Conformer model)"),I$e.forEach(t),l6o=i(x),I_=n(x,"LI",{});var N$e=s(I_);tfe=n(N$e,"STRONG",{});var G_t=s(tfe);i6o=r(G_t,"wavlm"),G_t.forEach(t),d6o=r(N$e," \u2014 "),zD=n(N$e,"A",{href:!0});var O_t=s(zD);c6o=r(O_t,"WavLMModel"),O_t.forEach(t),m6o=r(N$e," (WavLM model)"),N$e.forEach(t),f6o=i(x),N_=n(x,"LI",{});var q$e=s(N_);afe=n(q$e,"STRONG",{});var V_t=s(afe);g6o=r(V_t,"xglm"),V_t.forEach(t),h6o=r(q$e," \u2014 "),QD=n(q$e,"A",{href:!0});var X_t=s(QD);u6o=r(X_t,"XGLMModel"),X_t.forEach(t),p6o=r(q$e," (XGLM model)"),q$e.forEach(t),_6o=i(x),q_=n(x,"LI",{});var j$e=s(q_);nfe=n(j$e,"STRONG",{});var z_t=s(nfe);b6o=r(z_t,"xlm"),z_t.forEach(t),v6o=r(j$e," \u2014 "),WD=n(j$e,"A",{href:!0});var Q_t=s(WD);F6o=r(Q_t,"XLMModel"),Q_t.forEach(t),T6o=r(j$e," (XLM model)"),j$e.forEach(t),M6o=i(x),j_=n(x,"LI",{});var D$e=s(j_);sfe=n(D$e,"STRONG",{});var W_t=s(sfe);E6o=r(W_t,"xlm-prophetnet"),W_t.forEach(t),C6o=r(D$e," \u2014 "),HD=n(D$e,"A",{href:!0});var H_t=s(HD);w6o=r(H_t,"XLMProphetNetModel"),H_t.forEach(t),A6o=r(D$e," (XLM-ProphetNet model)"),D$e.forEach(t),L6o=i(x),D_=n(x,"LI",{});var G$e=s(D_);lfe=n(G$e,"STRONG",{});var U_t=s(lfe);y6o=r(U_t,"xlm-roberta"),U_t.forEach(t),x6o=r(G$e," \u2014 "),UD=n(G$e,"A",{href:!0});var J_t=s(UD);$6o=r(J_t,"XLMRobertaModel"),J_t.forEach(t),k6o=r(G$e," (XLM-RoBERTa model)"),G$e.forEach(t),S6o=i(x),G_=n(x,"LI",{});var O$e=s(G_);ife=n(O$e,"STRONG",{});var Y_t=s(ife);R6o=r(Y_t,"xlm-roberta-xl"),Y_t.forEach(t),P6o=r(O$e," \u2014 "),JD=n(O$e,"A",{href:!0});var K_t=s(JD);B6o=r(K_t,"XLMRobertaXLModel"),K_t.forEach(t),I6o=r(O$e," (XLM-RoBERTa-XL model)"),O$e.forEach(t),N6o=i(x),O_=n(x,"LI",{});var V$e=s(O_);dfe=n(V$e,"STRONG",{});var Z_t=s(dfe);q6o=r(Z_t,"xlnet"),Z_t.forEach(t),j6o=r(V$e," \u2014 "),YD=n(V$e,"A",{href:!0});var e2t=s(YD);D6o=r(e2t,"XLNetModel"),e2t.forEach(t),G6o=r(V$e," (XLNet model)"),V$e.forEach(t),O6o=i(x),V_=n(x,"LI",{});var X$e=s(V_);cfe=n(X$e,"STRONG",{});var o2t=s(cfe);V6o=r(o2t,"yolos"),o2t.forEach(t),X6o=r(X$e," \u2014 "),KD=n(X$e,"A",{href:!0});var r2t=s(KD);z6o=r(r2t,"YolosModel"),r2t.forEach(t),Q6o=r(X$e," (YOLOS model)"),X$e.forEach(t),W6o=i(x),X_=n(x,"LI",{});var z$e=s(X_);mfe=n(z$e,"STRONG",{});var t2t=s(mfe);H6o=r(t2t,"yoso"),t2t.forEach(t),U6o=r(z$e," \u2014 "),ZD=n(z$e,"A",{href:!0});var a2t=s(ZD);J6o=r(a2t,"YosoModel"),a2t.forEach(t),Y6o=r(z$e," (YOSO model)"),z$e.forEach(t),x.forEach(t),K6o=i(la),z_=n(la,"P",{});var Q$e=s(z_);Z6o=r(Q$e,"The model is set in evaluation mode by default using "),ffe=n(Q$e,"CODE",{});var n2t=s(ffe);e7o=r(n2t,"model.eval()"),n2t.forEach(t),o7o=r(Q$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gfe=n(Q$e,"CODE",{});var s2t=s(gfe);r7o=r(s2t,"model.train()"),s2t.forEach(t),Q$e.forEach(t),t7o=i(la),T(Q_.$$.fragment,la),la.forEach(t),rl.forEach(t),fXe=i(m),Xi=n(m,"H2",{class:!0});var bQe=s(Xi);W_=n(bQe,"A",{id:!0,class:!0,href:!0});var l2t=s(W_);hfe=n(l2t,"SPAN",{});var i2t=s(hfe);T(By.$$.fragment,i2t),i2t.forEach(t),l2t.forEach(t),a7o=i(bQe),ufe=n(bQe,"SPAN",{});var d2t=s(ufe);n7o=r(d2t,"AutoModelForPreTraining"),d2t.forEach(t),bQe.forEach(t),gXe=i(m),ko=n(m,"DIV",{class:!0});var tl=s(ko);T(Iy.$$.fragment,tl),s7o=i(tl),zi=n(tl,"P",{});var Rre=s(zi);l7o=r(Rre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),eG=n(Rre,"A",{href:!0});var c2t=s(eG);i7o=r(c2t,"from_pretrained()"),c2t.forEach(t),d7o=r(Rre," class method or the "),oG=n(Rre,"A",{href:!0});var m2t=s(oG);c7o=r(m2t,"from_config()"),m2t.forEach(t),m7o=r(Rre,` class
method.`),Rre.forEach(t),f7o=i(tl),Ny=n(tl,"P",{});var vQe=s(Ny);g7o=r(vQe,"This class cannot be instantiated directly using "),pfe=n(vQe,"CODE",{});var f2t=s(pfe);h7o=r(f2t,"__init__()"),f2t.forEach(t),u7o=r(vQe," (throws an error)."),vQe.forEach(t),p7o=i(tl),dt=n(tl,"DIV",{class:!0});var c7=s(dt);T(qy.$$.fragment,c7),_7o=i(c7),_fe=n(c7,"P",{});var g2t=s(_fe);b7o=r(g2t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),g2t.forEach(t),v7o=i(c7),Qi=n(c7,"P",{});var Pre=s(Qi);F7o=r(Pre,`Note:
Loading a model from its configuration file does `),bfe=n(Pre,"STRONG",{});var h2t=s(bfe);T7o=r(h2t,"not"),h2t.forEach(t),M7o=r(Pre,` load the model weights. It only affects the
model\u2019s configuration. Use `),rG=n(Pre,"A",{href:!0});var u2t=s(rG);E7o=r(u2t,"from_pretrained()"),u2t.forEach(t),C7o=r(Pre," to load the model weights."),Pre.forEach(t),w7o=i(c7),T(H_.$$.fragment,c7),c7.forEach(t),A7o=i(tl),Ke=n(tl,"DIV",{class:!0});var ia=s(Ke);T(jy.$$.fragment,ia),L7o=i(ia),vfe=n(ia,"P",{});var p2t=s(vfe);y7o=r(p2t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),p2t.forEach(t),x7o=i(ia),Na=n(ia,"P",{});var m7=s(Na);$7o=r(m7,"The model class to instantiate is selected based on the "),Ffe=n(m7,"CODE",{});var _2t=s(Ffe);k7o=r(_2t,"model_type"),_2t.forEach(t),S7o=r(m7,` property of the config object (either
passed as an argument or loaded from `),Tfe=n(m7,"CODE",{});var b2t=s(Tfe);R7o=r(b2t,"pretrained_model_name_or_path"),b2t.forEach(t),P7o=r(m7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mfe=n(m7,"CODE",{});var v2t=s(Mfe);B7o=r(v2t,"pretrained_model_name_or_path"),v2t.forEach(t),I7o=r(m7,":"),m7.forEach(t),N7o=i(ia),G=n(ia,"UL",{});var O=s(G);U_=n(O,"LI",{});var W$e=s(U_);Efe=n(W$e,"STRONG",{});var F2t=s(Efe);q7o=r(F2t,"albert"),F2t.forEach(t),j7o=r(W$e," \u2014 "),tG=n(W$e,"A",{href:!0});var T2t=s(tG);D7o=r(T2t,"AlbertForPreTraining"),T2t.forEach(t),G7o=r(W$e," (ALBERT model)"),W$e.forEach(t),O7o=i(O),J_=n(O,"LI",{});var H$e=s(J_);Cfe=n(H$e,"STRONG",{});var M2t=s(Cfe);V7o=r(M2t,"bart"),M2t.forEach(t),X7o=r(H$e," \u2014 "),aG=n(H$e,"A",{href:!0});var E2t=s(aG);z7o=r(E2t,"BartForConditionalGeneration"),E2t.forEach(t),Q7o=r(H$e," (BART model)"),H$e.forEach(t),W7o=i(O),Y_=n(O,"LI",{});var U$e=s(Y_);wfe=n(U$e,"STRONG",{});var C2t=s(wfe);H7o=r(C2t,"bert"),C2t.forEach(t),U7o=r(U$e," \u2014 "),nG=n(U$e,"A",{href:!0});var w2t=s(nG);J7o=r(w2t,"BertForPreTraining"),w2t.forEach(t),Y7o=r(U$e," (BERT model)"),U$e.forEach(t),K7o=i(O),K_=n(O,"LI",{});var J$e=s(K_);Afe=n(J$e,"STRONG",{});var A2t=s(Afe);Z7o=r(A2t,"big_bird"),A2t.forEach(t),eLo=r(J$e," \u2014 "),sG=n(J$e,"A",{href:!0});var L2t=s(sG);oLo=r(L2t,"BigBirdForPreTraining"),L2t.forEach(t),rLo=r(J$e," (BigBird model)"),J$e.forEach(t),tLo=i(O),Z_=n(O,"LI",{});var Y$e=s(Z_);Lfe=n(Y$e,"STRONG",{});var y2t=s(Lfe);aLo=r(y2t,"bloom"),y2t.forEach(t),nLo=r(Y$e," \u2014 "),lG=n(Y$e,"A",{href:!0});var x2t=s(lG);sLo=r(x2t,"BloomForCausalLM"),x2t.forEach(t),lLo=r(Y$e," (BLOOM model)"),Y$e.forEach(t),iLo=i(O),e2=n(O,"LI",{});var K$e=s(e2);yfe=n(K$e,"STRONG",{});var $2t=s(yfe);dLo=r($2t,"camembert"),$2t.forEach(t),cLo=r(K$e," \u2014 "),iG=n(K$e,"A",{href:!0});var k2t=s(iG);mLo=r(k2t,"CamembertForMaskedLM"),k2t.forEach(t),fLo=r(K$e," (CamemBERT model)"),K$e.forEach(t),gLo=i(O),o2=n(O,"LI",{});var Z$e=s(o2);xfe=n(Z$e,"STRONG",{});var S2t=s(xfe);hLo=r(S2t,"ctrl"),S2t.forEach(t),uLo=r(Z$e," \u2014 "),dG=n(Z$e,"A",{href:!0});var R2t=s(dG);pLo=r(R2t,"CTRLLMHeadModel"),R2t.forEach(t),_Lo=r(Z$e," (CTRL model)"),Z$e.forEach(t),bLo=i(O),r2=n(O,"LI",{});var eke=s(r2);$fe=n(eke,"STRONG",{});var P2t=s($fe);vLo=r(P2t,"data2vec-text"),P2t.forEach(t),FLo=r(eke," \u2014 "),cG=n(eke,"A",{href:!0});var B2t=s(cG);TLo=r(B2t,"Data2VecTextForMaskedLM"),B2t.forEach(t),MLo=r(eke," (Data2VecText model)"),eke.forEach(t),ELo=i(O),t2=n(O,"LI",{});var oke=s(t2);kfe=n(oke,"STRONG",{});var I2t=s(kfe);CLo=r(I2t,"deberta"),I2t.forEach(t),wLo=r(oke," \u2014 "),mG=n(oke,"A",{href:!0});var N2t=s(mG);ALo=r(N2t,"DebertaForMaskedLM"),N2t.forEach(t),LLo=r(oke," (DeBERTa model)"),oke.forEach(t),yLo=i(O),a2=n(O,"LI",{});var rke=s(a2);Sfe=n(rke,"STRONG",{});var q2t=s(Sfe);xLo=r(q2t,"deberta-v2"),q2t.forEach(t),$Lo=r(rke," \u2014 "),fG=n(rke,"A",{href:!0});var j2t=s(fG);kLo=r(j2t,"DebertaV2ForMaskedLM"),j2t.forEach(t),SLo=r(rke," (DeBERTa-v2 model)"),rke.forEach(t),RLo=i(O),n2=n(O,"LI",{});var tke=s(n2);Rfe=n(tke,"STRONG",{});var D2t=s(Rfe);PLo=r(D2t,"distilbert"),D2t.forEach(t),BLo=r(tke," \u2014 "),gG=n(tke,"A",{href:!0});var G2t=s(gG);ILo=r(G2t,"DistilBertForMaskedLM"),G2t.forEach(t),NLo=r(tke," (DistilBERT model)"),tke.forEach(t),qLo=i(O),s2=n(O,"LI",{});var ake=s(s2);Pfe=n(ake,"STRONG",{});var O2t=s(Pfe);jLo=r(O2t,"electra"),O2t.forEach(t),DLo=r(ake," \u2014 "),hG=n(ake,"A",{href:!0});var V2t=s(hG);GLo=r(V2t,"ElectraForPreTraining"),V2t.forEach(t),OLo=r(ake," (ELECTRA model)"),ake.forEach(t),VLo=i(O),l2=n(O,"LI",{});var nke=s(l2);Bfe=n(nke,"STRONG",{});var X2t=s(Bfe);XLo=r(X2t,"flaubert"),X2t.forEach(t),zLo=r(nke," \u2014 "),uG=n(nke,"A",{href:!0});var z2t=s(uG);QLo=r(z2t,"FlaubertWithLMHeadModel"),z2t.forEach(t),WLo=r(nke," (FlauBERT model)"),nke.forEach(t),HLo=i(O),i2=n(O,"LI",{});var ske=s(i2);Ife=n(ske,"STRONG",{});var Q2t=s(Ife);ULo=r(Q2t,"flava"),Q2t.forEach(t),JLo=r(ske," \u2014 "),pG=n(ske,"A",{href:!0});var W2t=s(pG);YLo=r(W2t,"FlavaForPreTraining"),W2t.forEach(t),KLo=r(ske," (FLAVA model)"),ske.forEach(t),ZLo=i(O),d2=n(O,"LI",{});var lke=s(d2);Nfe=n(lke,"STRONG",{});var H2t=s(Nfe);eyo=r(H2t,"fnet"),H2t.forEach(t),oyo=r(lke," \u2014 "),_G=n(lke,"A",{href:!0});var U2t=s(_G);ryo=r(U2t,"FNetForPreTraining"),U2t.forEach(t),tyo=r(lke," (FNet model)"),lke.forEach(t),ayo=i(O),c2=n(O,"LI",{});var ike=s(c2);qfe=n(ike,"STRONG",{});var J2t=s(qfe);nyo=r(J2t,"fsmt"),J2t.forEach(t),syo=r(ike," \u2014 "),bG=n(ike,"A",{href:!0});var Y2t=s(bG);lyo=r(Y2t,"FSMTForConditionalGeneration"),Y2t.forEach(t),iyo=r(ike," (FairSeq Machine-Translation model)"),ike.forEach(t),dyo=i(O),m2=n(O,"LI",{});var dke=s(m2);jfe=n(dke,"STRONG",{});var K2t=s(jfe);cyo=r(K2t,"funnel"),K2t.forEach(t),myo=r(dke," \u2014 "),vG=n(dke,"A",{href:!0});var Z2t=s(vG);fyo=r(Z2t,"FunnelForPreTraining"),Z2t.forEach(t),gyo=r(dke," (Funnel Transformer model)"),dke.forEach(t),hyo=i(O),f2=n(O,"LI",{});var cke=s(f2);Dfe=n(cke,"STRONG",{});var ebt=s(Dfe);uyo=r(ebt,"gpt2"),ebt.forEach(t),pyo=r(cke," \u2014 "),FG=n(cke,"A",{href:!0});var obt=s(FG);_yo=r(obt,"GPT2LMHeadModel"),obt.forEach(t),byo=r(cke," (OpenAI GPT-2 model)"),cke.forEach(t),vyo=i(O),g2=n(O,"LI",{});var mke=s(g2);Gfe=n(mke,"STRONG",{});var rbt=s(Gfe);Fyo=r(rbt,"ibert"),rbt.forEach(t),Tyo=r(mke," \u2014 "),TG=n(mke,"A",{href:!0});var tbt=s(TG);Myo=r(tbt,"IBertForMaskedLM"),tbt.forEach(t),Eyo=r(mke," (I-BERT model)"),mke.forEach(t),Cyo=i(O),h2=n(O,"LI",{});var fke=s(h2);Ofe=n(fke,"STRONG",{});var abt=s(Ofe);wyo=r(abt,"layoutlm"),abt.forEach(t),Ayo=r(fke," \u2014 "),MG=n(fke,"A",{href:!0});var nbt=s(MG);Lyo=r(nbt,"LayoutLMForMaskedLM"),nbt.forEach(t),yyo=r(fke," (LayoutLM model)"),fke.forEach(t),xyo=i(O),u2=n(O,"LI",{});var gke=s(u2);Vfe=n(gke,"STRONG",{});var sbt=s(Vfe);$yo=r(sbt,"longformer"),sbt.forEach(t),kyo=r(gke," \u2014 "),EG=n(gke,"A",{href:!0});var lbt=s(EG);Syo=r(lbt,"LongformerForMaskedLM"),lbt.forEach(t),Ryo=r(gke," (Longformer model)"),gke.forEach(t),Pyo=i(O),p2=n(O,"LI",{});var hke=s(p2);Xfe=n(hke,"STRONG",{});var ibt=s(Xfe);Byo=r(ibt,"lxmert"),ibt.forEach(t),Iyo=r(hke," \u2014 "),CG=n(hke,"A",{href:!0});var dbt=s(CG);Nyo=r(dbt,"LxmertForPreTraining"),dbt.forEach(t),qyo=r(hke," (LXMERT model)"),hke.forEach(t),jyo=i(O),_2=n(O,"LI",{});var uke=s(_2);zfe=n(uke,"STRONG",{});var cbt=s(zfe);Dyo=r(cbt,"megatron-bert"),cbt.forEach(t),Gyo=r(uke," \u2014 "),wG=n(uke,"A",{href:!0});var mbt=s(wG);Oyo=r(mbt,"MegatronBertForPreTraining"),mbt.forEach(t),Vyo=r(uke," (Megatron-BERT model)"),uke.forEach(t),Xyo=i(O),b2=n(O,"LI",{});var pke=s(b2);Qfe=n(pke,"STRONG",{});var fbt=s(Qfe);zyo=r(fbt,"mobilebert"),fbt.forEach(t),Qyo=r(pke," \u2014 "),AG=n(pke,"A",{href:!0});var gbt=s(AG);Wyo=r(gbt,"MobileBertForPreTraining"),gbt.forEach(t),Hyo=r(pke," (MobileBERT model)"),pke.forEach(t),Uyo=i(O),v2=n(O,"LI",{});var _ke=s(v2);Wfe=n(_ke,"STRONG",{});var hbt=s(Wfe);Jyo=r(hbt,"mpnet"),hbt.forEach(t),Yyo=r(_ke," \u2014 "),LG=n(_ke,"A",{href:!0});var ubt=s(LG);Kyo=r(ubt,"MPNetForMaskedLM"),ubt.forEach(t),Zyo=r(_ke," (MPNet model)"),_ke.forEach(t),e8o=i(O),F2=n(O,"LI",{});var bke=s(F2);Hfe=n(bke,"STRONG",{});var pbt=s(Hfe);o8o=r(pbt,"mvp"),pbt.forEach(t),r8o=r(bke," \u2014 "),yG=n(bke,"A",{href:!0});var _bt=s(yG);t8o=r(_bt,"MvpForConditionalGeneration"),_bt.forEach(t),a8o=r(bke," (MVP model)"),bke.forEach(t),n8o=i(O),T2=n(O,"LI",{});var vke=s(T2);Ufe=n(vke,"STRONG",{});var bbt=s(Ufe);s8o=r(bbt,"nezha"),bbt.forEach(t),l8o=r(vke," \u2014 "),xG=n(vke,"A",{href:!0});var vbt=s(xG);i8o=r(vbt,"NezhaForPreTraining"),vbt.forEach(t),d8o=r(vke," (Nezha model)"),vke.forEach(t),c8o=i(O),M2=n(O,"LI",{});var Fke=s(M2);Jfe=n(Fke,"STRONG",{});var Fbt=s(Jfe);m8o=r(Fbt,"openai-gpt"),Fbt.forEach(t),f8o=r(Fke," \u2014 "),$G=n(Fke,"A",{href:!0});var Tbt=s($G);g8o=r(Tbt,"OpenAIGPTLMHeadModel"),Tbt.forEach(t),h8o=r(Fke," (OpenAI GPT model)"),Fke.forEach(t),u8o=i(O),E2=n(O,"LI",{});var Tke=s(E2);Yfe=n(Tke,"STRONG",{});var Mbt=s(Yfe);p8o=r(Mbt,"retribert"),Mbt.forEach(t),_8o=r(Tke," \u2014 "),kG=n(Tke,"A",{href:!0});var Ebt=s(kG);b8o=r(Ebt,"RetriBertModel"),Ebt.forEach(t),v8o=r(Tke," (RetriBERT model)"),Tke.forEach(t),F8o=i(O),C2=n(O,"LI",{});var Mke=s(C2);Kfe=n(Mke,"STRONG",{});var Cbt=s(Kfe);T8o=r(Cbt,"roberta"),Cbt.forEach(t),M8o=r(Mke," \u2014 "),SG=n(Mke,"A",{href:!0});var wbt=s(SG);E8o=r(wbt,"RobertaForMaskedLM"),wbt.forEach(t),C8o=r(Mke," (RoBERTa model)"),Mke.forEach(t),w8o=i(O),w2=n(O,"LI",{});var Eke=s(w2);Zfe=n(Eke,"STRONG",{});var Abt=s(Zfe);A8o=r(Abt,"splinter"),Abt.forEach(t),L8o=r(Eke," \u2014 "),RG=n(Eke,"A",{href:!0});var Lbt=s(RG);y8o=r(Lbt,"SplinterForPreTraining"),Lbt.forEach(t),x8o=r(Eke," (Splinter model)"),Eke.forEach(t),$8o=i(O),A2=n(O,"LI",{});var Cke=s(A2);ege=n(Cke,"STRONG",{});var ybt=s(ege);k8o=r(ybt,"squeezebert"),ybt.forEach(t),S8o=r(Cke," \u2014 "),PG=n(Cke,"A",{href:!0});var xbt=s(PG);R8o=r(xbt,"SqueezeBertForMaskedLM"),xbt.forEach(t),P8o=r(Cke," (SqueezeBERT model)"),Cke.forEach(t),B8o=i(O),L2=n(O,"LI",{});var wke=s(L2);oge=n(wke,"STRONG",{});var $bt=s(oge);I8o=r($bt,"t5"),$bt.forEach(t),N8o=r(wke," \u2014 "),BG=n(wke,"A",{href:!0});var kbt=s(BG);q8o=r(kbt,"T5ForConditionalGeneration"),kbt.forEach(t),j8o=r(wke," (T5 model)"),wke.forEach(t),D8o=i(O),y2=n(O,"LI",{});var Ake=s(y2);rge=n(Ake,"STRONG",{});var Sbt=s(rge);G8o=r(Sbt,"tapas"),Sbt.forEach(t),O8o=r(Ake," \u2014 "),IG=n(Ake,"A",{href:!0});var Rbt=s(IG);V8o=r(Rbt,"TapasForMaskedLM"),Rbt.forEach(t),X8o=r(Ake," (TAPAS model)"),Ake.forEach(t),z8o=i(O),x2=n(O,"LI",{});var Lke=s(x2);tge=n(Lke,"STRONG",{});var Pbt=s(tge);Q8o=r(Pbt,"transfo-xl"),Pbt.forEach(t),W8o=r(Lke," \u2014 "),NG=n(Lke,"A",{href:!0});var Bbt=s(NG);H8o=r(Bbt,"TransfoXLLMHeadModel"),Bbt.forEach(t),U8o=r(Lke," (Transformer-XL model)"),Lke.forEach(t),J8o=i(O),$2=n(O,"LI",{});var yke=s($2);age=n(yke,"STRONG",{});var Ibt=s(age);Y8o=r(Ibt,"unispeech"),Ibt.forEach(t),K8o=r(yke," \u2014 "),qG=n(yke,"A",{href:!0});var Nbt=s(qG);Z8o=r(Nbt,"UniSpeechForPreTraining"),Nbt.forEach(t),e9o=r(yke," (UniSpeech model)"),yke.forEach(t),o9o=i(O),k2=n(O,"LI",{});var xke=s(k2);nge=n(xke,"STRONG",{});var qbt=s(nge);r9o=r(qbt,"unispeech-sat"),qbt.forEach(t),t9o=r(xke," \u2014 "),jG=n(xke,"A",{href:!0});var jbt=s(jG);a9o=r(jbt,"UniSpeechSatForPreTraining"),jbt.forEach(t),n9o=r(xke," (UniSpeechSat model)"),xke.forEach(t),s9o=i(O),S2=n(O,"LI",{});var $ke=s(S2);sge=n($ke,"STRONG",{});var Dbt=s(sge);l9o=r(Dbt,"visual_bert"),Dbt.forEach(t),i9o=r($ke," \u2014 "),DG=n($ke,"A",{href:!0});var Gbt=s(DG);d9o=r(Gbt,"VisualBertForPreTraining"),Gbt.forEach(t),c9o=r($ke," (VisualBERT model)"),$ke.forEach(t),m9o=i(O),R2=n(O,"LI",{});var kke=s(R2);lge=n(kke,"STRONG",{});var Obt=s(lge);f9o=r(Obt,"vit_mae"),Obt.forEach(t),g9o=r(kke," \u2014 "),GG=n(kke,"A",{href:!0});var Vbt=s(GG);h9o=r(Vbt,"ViTMAEForPreTraining"),Vbt.forEach(t),u9o=r(kke," (ViTMAE model)"),kke.forEach(t),p9o=i(O),P2=n(O,"LI",{});var Ske=s(P2);ige=n(Ske,"STRONG",{});var Xbt=s(ige);_9o=r(Xbt,"wav2vec2"),Xbt.forEach(t),b9o=r(Ske," \u2014 "),OG=n(Ske,"A",{href:!0});var zbt=s(OG);v9o=r(zbt,"Wav2Vec2ForPreTraining"),zbt.forEach(t),F9o=r(Ske," (Wav2Vec2 model)"),Ske.forEach(t),T9o=i(O),B2=n(O,"LI",{});var Rke=s(B2);dge=n(Rke,"STRONG",{});var Qbt=s(dge);M9o=r(Qbt,"wav2vec2-conformer"),Qbt.forEach(t),E9o=r(Rke," \u2014 "),VG=n(Rke,"A",{href:!0});var Wbt=s(VG);C9o=r(Wbt,"Wav2Vec2ConformerForPreTraining"),Wbt.forEach(t),w9o=r(Rke," (Wav2Vec2-Conformer model)"),Rke.forEach(t),A9o=i(O),I2=n(O,"LI",{});var Pke=s(I2);cge=n(Pke,"STRONG",{});var Hbt=s(cge);L9o=r(Hbt,"xlm"),Hbt.forEach(t),y9o=r(Pke," \u2014 "),XG=n(Pke,"A",{href:!0});var Ubt=s(XG);x9o=r(Ubt,"XLMWithLMHeadModel"),Ubt.forEach(t),$9o=r(Pke," (XLM model)"),Pke.forEach(t),k9o=i(O),N2=n(O,"LI",{});var Bke=s(N2);mge=n(Bke,"STRONG",{});var Jbt=s(mge);S9o=r(Jbt,"xlm-roberta"),Jbt.forEach(t),R9o=r(Bke," \u2014 "),zG=n(Bke,"A",{href:!0});var Ybt=s(zG);P9o=r(Ybt,"XLMRobertaForMaskedLM"),Ybt.forEach(t),B9o=r(Bke," (XLM-RoBERTa model)"),Bke.forEach(t),I9o=i(O),q2=n(O,"LI",{});var Ike=s(q2);fge=n(Ike,"STRONG",{});var Kbt=s(fge);N9o=r(Kbt,"xlm-roberta-xl"),Kbt.forEach(t),q9o=r(Ike," \u2014 "),QG=n(Ike,"A",{href:!0});var Zbt=s(QG);j9o=r(Zbt,"XLMRobertaXLForMaskedLM"),Zbt.forEach(t),D9o=r(Ike," (XLM-RoBERTa-XL model)"),Ike.forEach(t),G9o=i(O),j2=n(O,"LI",{});var Nke=s(j2);gge=n(Nke,"STRONG",{});var evt=s(gge);O9o=r(evt,"xlnet"),evt.forEach(t),V9o=r(Nke," \u2014 "),WG=n(Nke,"A",{href:!0});var ovt=s(WG);X9o=r(ovt,"XLNetLMHeadModel"),ovt.forEach(t),z9o=r(Nke," (XLNet model)"),Nke.forEach(t),O.forEach(t),Q9o=i(ia),D2=n(ia,"P",{});var qke=s(D2);W9o=r(qke,"The model is set in evaluation mode by default using "),hge=n(qke,"CODE",{});var rvt=s(hge);H9o=r(rvt,"model.eval()"),rvt.forEach(t),U9o=r(qke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uge=n(qke,"CODE",{});var tvt=s(uge);J9o=r(tvt,"model.train()"),tvt.forEach(t),qke.forEach(t),Y9o=i(ia),T(G2.$$.fragment,ia),ia.forEach(t),tl.forEach(t),hXe=i(m),Wi=n(m,"H2",{class:!0});var FQe=s(Wi);O2=n(FQe,"A",{id:!0,class:!0,href:!0});var avt=s(O2);pge=n(avt,"SPAN",{});var nvt=s(pge);T(Dy.$$.fragment,nvt),nvt.forEach(t),avt.forEach(t),K9o=i(FQe),_ge=n(FQe,"SPAN",{});var svt=s(_ge);Z9o=r(svt,"AutoModelForCausalLM"),svt.forEach(t),FQe.forEach(t),uXe=i(m),So=n(m,"DIV",{class:!0});var al=s(So);T(Gy.$$.fragment,al),exo=i(al),Hi=n(al,"P",{});var Bre=s(Hi);oxo=r(Bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),HG=n(Bre,"A",{href:!0});var lvt=s(HG);rxo=r(lvt,"from_pretrained()"),lvt.forEach(t),txo=r(Bre," class method or the "),UG=n(Bre,"A",{href:!0});var ivt=s(UG);axo=r(ivt,"from_config()"),ivt.forEach(t),nxo=r(Bre,` class
method.`),Bre.forEach(t),sxo=i(al),Oy=n(al,"P",{});var TQe=s(Oy);lxo=r(TQe,"This class cannot be instantiated directly using "),bge=n(TQe,"CODE",{});var dvt=s(bge);ixo=r(dvt,"__init__()"),dvt.forEach(t),dxo=r(TQe," (throws an error)."),TQe.forEach(t),cxo=i(al),ct=n(al,"DIV",{class:!0});var f7=s(ct);T(Vy.$$.fragment,f7),mxo=i(f7),vge=n(f7,"P",{});var cvt=s(vge);fxo=r(cvt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),cvt.forEach(t),gxo=i(f7),Ui=n(f7,"P",{});var Ire=s(Ui);hxo=r(Ire,`Note:
Loading a model from its configuration file does `),Fge=n(Ire,"STRONG",{});var mvt=s(Fge);uxo=r(mvt,"not"),mvt.forEach(t),pxo=r(Ire,` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=n(Ire,"A",{href:!0});var fvt=s(JG);_xo=r(fvt,"from_pretrained()"),fvt.forEach(t),bxo=r(Ire," to load the model weights."),Ire.forEach(t),vxo=i(f7),T(V2.$$.fragment,f7),f7.forEach(t),Fxo=i(al),Ze=n(al,"DIV",{class:!0});var da=s(Ze);T(Xy.$$.fragment,da),Txo=i(da),Tge=n(da,"P",{});var gvt=s(Tge);Mxo=r(gvt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),gvt.forEach(t),Exo=i(da),qa=n(da,"P",{});var g7=s(qa);Cxo=r(g7,"The model class to instantiate is selected based on the "),Mge=n(g7,"CODE",{});var hvt=s(Mge);wxo=r(hvt,"model_type"),hvt.forEach(t),Axo=r(g7,` property of the config object (either
passed as an argument or loaded from `),Ege=n(g7,"CODE",{});var uvt=s(Ege);Lxo=r(uvt,"pretrained_model_name_or_path"),uvt.forEach(t),yxo=r(g7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cge=n(g7,"CODE",{});var pvt=s(Cge);xxo=r(pvt,"pretrained_model_name_or_path"),pvt.forEach(t),$xo=r(g7,":"),g7.forEach(t),kxo=i(da),z=n(da,"UL",{});var Q=s(z);X2=n(Q,"LI",{});var jke=s(X2);wge=n(jke,"STRONG",{});var _vt=s(wge);Sxo=r(_vt,"bart"),_vt.forEach(t),Rxo=r(jke," \u2014 "),YG=n(jke,"A",{href:!0});var bvt=s(YG);Pxo=r(bvt,"BartForCausalLM"),bvt.forEach(t),Bxo=r(jke," (BART model)"),jke.forEach(t),Ixo=i(Q),z2=n(Q,"LI",{});var Dke=s(z2);Age=n(Dke,"STRONG",{});var vvt=s(Age);Nxo=r(vvt,"bert"),vvt.forEach(t),qxo=r(Dke," \u2014 "),KG=n(Dke,"A",{href:!0});var Fvt=s(KG);jxo=r(Fvt,"BertLMHeadModel"),Fvt.forEach(t),Dxo=r(Dke," (BERT model)"),Dke.forEach(t),Gxo=i(Q),Q2=n(Q,"LI",{});var Gke=s(Q2);Lge=n(Gke,"STRONG",{});var Tvt=s(Lge);Oxo=r(Tvt,"bert-generation"),Tvt.forEach(t),Vxo=r(Gke," \u2014 "),ZG=n(Gke,"A",{href:!0});var Mvt=s(ZG);Xxo=r(Mvt,"BertGenerationDecoder"),Mvt.forEach(t),zxo=r(Gke," (Bert Generation model)"),Gke.forEach(t),Qxo=i(Q),W2=n(Q,"LI",{});var Oke=s(W2);yge=n(Oke,"STRONG",{});var Evt=s(yge);Wxo=r(Evt,"big_bird"),Evt.forEach(t),Hxo=r(Oke," \u2014 "),eO=n(Oke,"A",{href:!0});var Cvt=s(eO);Uxo=r(Cvt,"BigBirdForCausalLM"),Cvt.forEach(t),Jxo=r(Oke," (BigBird model)"),Oke.forEach(t),Yxo=i(Q),H2=n(Q,"LI",{});var Vke=s(H2);xge=n(Vke,"STRONG",{});var wvt=s(xge);Kxo=r(wvt,"bigbird_pegasus"),wvt.forEach(t),Zxo=r(Vke," \u2014 "),oO=n(Vke,"A",{href:!0});var Avt=s(oO);e$o=r(Avt,"BigBirdPegasusForCausalLM"),Avt.forEach(t),o$o=r(Vke," (BigBird-Pegasus model)"),Vke.forEach(t),r$o=i(Q),U2=n(Q,"LI",{});var Xke=s(U2);$ge=n(Xke,"STRONG",{});var Lvt=s($ge);t$o=r(Lvt,"blenderbot"),Lvt.forEach(t),a$o=r(Xke," \u2014 "),rO=n(Xke,"A",{href:!0});var yvt=s(rO);n$o=r(yvt,"BlenderbotForCausalLM"),yvt.forEach(t),s$o=r(Xke," (Blenderbot model)"),Xke.forEach(t),l$o=i(Q),J2=n(Q,"LI",{});var zke=s(J2);kge=n(zke,"STRONG",{});var xvt=s(kge);i$o=r(xvt,"blenderbot-small"),xvt.forEach(t),d$o=r(zke," \u2014 "),tO=n(zke,"A",{href:!0});var $vt=s(tO);c$o=r($vt,"BlenderbotSmallForCausalLM"),$vt.forEach(t),m$o=r(zke," (BlenderbotSmall model)"),zke.forEach(t),f$o=i(Q),Y2=n(Q,"LI",{});var Qke=s(Y2);Sge=n(Qke,"STRONG",{});var kvt=s(Sge);g$o=r(kvt,"bloom"),kvt.forEach(t),h$o=r(Qke," \u2014 "),aO=n(Qke,"A",{href:!0});var Svt=s(aO);u$o=r(Svt,"BloomForCausalLM"),Svt.forEach(t),p$o=r(Qke," (BLOOM model)"),Qke.forEach(t),_$o=i(Q),K2=n(Q,"LI",{});var Wke=s(K2);Rge=n(Wke,"STRONG",{});var Rvt=s(Rge);b$o=r(Rvt,"camembert"),Rvt.forEach(t),v$o=r(Wke," \u2014 "),nO=n(Wke,"A",{href:!0});var Pvt=s(nO);F$o=r(Pvt,"CamembertForCausalLM"),Pvt.forEach(t),T$o=r(Wke," (CamemBERT model)"),Wke.forEach(t),M$o=i(Q),Z2=n(Q,"LI",{});var Hke=s(Z2);Pge=n(Hke,"STRONG",{});var Bvt=s(Pge);E$o=r(Bvt,"codegen"),Bvt.forEach(t),C$o=r(Hke," \u2014 "),sO=n(Hke,"A",{href:!0});var Ivt=s(sO);w$o=r(Ivt,"CodeGenForCausalLM"),Ivt.forEach(t),A$o=r(Hke," (CodeGen model)"),Hke.forEach(t),L$o=i(Q),eb=n(Q,"LI",{});var Uke=s(eb);Bge=n(Uke,"STRONG",{});var Nvt=s(Bge);y$o=r(Nvt,"ctrl"),Nvt.forEach(t),x$o=r(Uke," \u2014 "),lO=n(Uke,"A",{href:!0});var qvt=s(lO);$$o=r(qvt,"CTRLLMHeadModel"),qvt.forEach(t),k$o=r(Uke," (CTRL model)"),Uke.forEach(t),S$o=i(Q),ob=n(Q,"LI",{});var Jke=s(ob);Ige=n(Jke,"STRONG",{});var jvt=s(Ige);R$o=r(jvt,"data2vec-text"),jvt.forEach(t),P$o=r(Jke," \u2014 "),iO=n(Jke,"A",{href:!0});var Dvt=s(iO);B$o=r(Dvt,"Data2VecTextForCausalLM"),Dvt.forEach(t),I$o=r(Jke," (Data2VecText model)"),Jke.forEach(t),N$o=i(Q),rb=n(Q,"LI",{});var Yke=s(rb);Nge=n(Yke,"STRONG",{});var Gvt=s(Nge);q$o=r(Gvt,"electra"),Gvt.forEach(t),j$o=r(Yke," \u2014 "),dO=n(Yke,"A",{href:!0});var Ovt=s(dO);D$o=r(Ovt,"ElectraForCausalLM"),Ovt.forEach(t),G$o=r(Yke," (ELECTRA model)"),Yke.forEach(t),O$o=i(Q),tb=n(Q,"LI",{});var Kke=s(tb);qge=n(Kke,"STRONG",{});var Vvt=s(qge);V$o=r(Vvt,"gpt2"),Vvt.forEach(t),X$o=r(Kke," \u2014 "),cO=n(Kke,"A",{href:!0});var Xvt=s(cO);z$o=r(Xvt,"GPT2LMHeadModel"),Xvt.forEach(t),Q$o=r(Kke," (OpenAI GPT-2 model)"),Kke.forEach(t),W$o=i(Q),ab=n(Q,"LI",{});var Zke=s(ab);jge=n(Zke,"STRONG",{});var zvt=s(jge);H$o=r(zvt,"gpt_neo"),zvt.forEach(t),U$o=r(Zke," \u2014 "),mO=n(Zke,"A",{href:!0});var Qvt=s(mO);J$o=r(Qvt,"GPTNeoForCausalLM"),Qvt.forEach(t),Y$o=r(Zke," (GPT Neo model)"),Zke.forEach(t),K$o=i(Q),nb=n(Q,"LI",{});var eSe=s(nb);Dge=n(eSe,"STRONG",{});var Wvt=s(Dge);Z$o=r(Wvt,"gpt_neox"),Wvt.forEach(t),eko=r(eSe," \u2014 "),fO=n(eSe,"A",{href:!0});var Hvt=s(fO);oko=r(Hvt,"GPTNeoXForCausalLM"),Hvt.forEach(t),rko=r(eSe," (GPT NeoX model)"),eSe.forEach(t),tko=i(Q),sb=n(Q,"LI",{});var oSe=s(sb);Gge=n(oSe,"STRONG",{});var Uvt=s(Gge);ako=r(Uvt,"gptj"),Uvt.forEach(t),nko=r(oSe," \u2014 "),gO=n(oSe,"A",{href:!0});var Jvt=s(gO);sko=r(Jvt,"GPTJForCausalLM"),Jvt.forEach(t),lko=r(oSe," (GPT-J model)"),oSe.forEach(t),iko=i(Q),lb=n(Q,"LI",{});var rSe=s(lb);Oge=n(rSe,"STRONG",{});var Yvt=s(Oge);dko=r(Yvt,"marian"),Yvt.forEach(t),cko=r(rSe," \u2014 "),hO=n(rSe,"A",{href:!0});var Kvt=s(hO);mko=r(Kvt,"MarianForCausalLM"),Kvt.forEach(t),fko=r(rSe," (Marian model)"),rSe.forEach(t),gko=i(Q),ib=n(Q,"LI",{});var tSe=s(ib);Vge=n(tSe,"STRONG",{});var Zvt=s(Vge);hko=r(Zvt,"mbart"),Zvt.forEach(t),uko=r(tSe," \u2014 "),uO=n(tSe,"A",{href:!0});var e1t=s(uO);pko=r(e1t,"MBartForCausalLM"),e1t.forEach(t),_ko=r(tSe," (mBART model)"),tSe.forEach(t),bko=i(Q),db=n(Q,"LI",{});var aSe=s(db);Xge=n(aSe,"STRONG",{});var o1t=s(Xge);vko=r(o1t,"megatron-bert"),o1t.forEach(t),Fko=r(aSe," \u2014 "),pO=n(aSe,"A",{href:!0});var r1t=s(pO);Tko=r(r1t,"MegatronBertForCausalLM"),r1t.forEach(t),Mko=r(aSe," (Megatron-BERT model)"),aSe.forEach(t),Eko=i(Q),cb=n(Q,"LI",{});var nSe=s(cb);zge=n(nSe,"STRONG",{});var t1t=s(zge);Cko=r(t1t,"mvp"),t1t.forEach(t),wko=r(nSe," \u2014 "),_O=n(nSe,"A",{href:!0});var a1t=s(_O);Ako=r(a1t,"MvpForCausalLM"),a1t.forEach(t),Lko=r(nSe," (MVP model)"),nSe.forEach(t),yko=i(Q),mb=n(Q,"LI",{});var sSe=s(mb);Qge=n(sSe,"STRONG",{});var n1t=s(Qge);xko=r(n1t,"openai-gpt"),n1t.forEach(t),$ko=r(sSe," \u2014 "),bO=n(sSe,"A",{href:!0});var s1t=s(bO);kko=r(s1t,"OpenAIGPTLMHeadModel"),s1t.forEach(t),Sko=r(sSe," (OpenAI GPT model)"),sSe.forEach(t),Rko=i(Q),fb=n(Q,"LI",{});var lSe=s(fb);Wge=n(lSe,"STRONG",{});var l1t=s(Wge);Pko=r(l1t,"opt"),l1t.forEach(t),Bko=r(lSe," \u2014 "),vO=n(lSe,"A",{href:!0});var i1t=s(vO);Iko=r(i1t,"OPTForCausalLM"),i1t.forEach(t),Nko=r(lSe," (OPT model)"),lSe.forEach(t),qko=i(Q),gb=n(Q,"LI",{});var iSe=s(gb);Hge=n(iSe,"STRONG",{});var d1t=s(Hge);jko=r(d1t,"pegasus"),d1t.forEach(t),Dko=r(iSe," \u2014 "),FO=n(iSe,"A",{href:!0});var c1t=s(FO);Gko=r(c1t,"PegasusForCausalLM"),c1t.forEach(t),Oko=r(iSe," (Pegasus model)"),iSe.forEach(t),Vko=i(Q),hb=n(Q,"LI",{});var dSe=s(hb);Uge=n(dSe,"STRONG",{});var m1t=s(Uge);Xko=r(m1t,"plbart"),m1t.forEach(t),zko=r(dSe," \u2014 "),TO=n(dSe,"A",{href:!0});var f1t=s(TO);Qko=r(f1t,"PLBartForCausalLM"),f1t.forEach(t),Wko=r(dSe," (PLBart model)"),dSe.forEach(t),Hko=i(Q),ub=n(Q,"LI",{});var cSe=s(ub);Jge=n(cSe,"STRONG",{});var g1t=s(Jge);Uko=r(g1t,"prophetnet"),g1t.forEach(t),Jko=r(cSe," \u2014 "),MO=n(cSe,"A",{href:!0});var h1t=s(MO);Yko=r(h1t,"ProphetNetForCausalLM"),h1t.forEach(t),Kko=r(cSe," (ProphetNet model)"),cSe.forEach(t),Zko=i(Q),pb=n(Q,"LI",{});var mSe=s(pb);Yge=n(mSe,"STRONG",{});var u1t=s(Yge);eSo=r(u1t,"qdqbert"),u1t.forEach(t),oSo=r(mSe," \u2014 "),EO=n(mSe,"A",{href:!0});var p1t=s(EO);rSo=r(p1t,"QDQBertLMHeadModel"),p1t.forEach(t),tSo=r(mSe," (QDQBert model)"),mSe.forEach(t),aSo=i(Q),_b=n(Q,"LI",{});var fSe=s(_b);Kge=n(fSe,"STRONG",{});var _1t=s(Kge);nSo=r(_1t,"reformer"),_1t.forEach(t),sSo=r(fSe," \u2014 "),CO=n(fSe,"A",{href:!0});var b1t=s(CO);lSo=r(b1t,"ReformerModelWithLMHead"),b1t.forEach(t),iSo=r(fSe," (Reformer model)"),fSe.forEach(t),dSo=i(Q),bb=n(Q,"LI",{});var gSe=s(bb);Zge=n(gSe,"STRONG",{});var v1t=s(Zge);cSo=r(v1t,"rembert"),v1t.forEach(t),mSo=r(gSe," \u2014 "),wO=n(gSe,"A",{href:!0});var F1t=s(wO);fSo=r(F1t,"RemBertForCausalLM"),F1t.forEach(t),gSo=r(gSe," (RemBERT model)"),gSe.forEach(t),hSo=i(Q),vb=n(Q,"LI",{});var hSe=s(vb);ehe=n(hSe,"STRONG",{});var T1t=s(ehe);uSo=r(T1t,"roberta"),T1t.forEach(t),pSo=r(hSe," \u2014 "),AO=n(hSe,"A",{href:!0});var M1t=s(AO);_So=r(M1t,"RobertaForCausalLM"),M1t.forEach(t),bSo=r(hSe," (RoBERTa model)"),hSe.forEach(t),vSo=i(Q),Fb=n(Q,"LI",{});var uSe=s(Fb);ohe=n(uSe,"STRONG",{});var E1t=s(ohe);FSo=r(E1t,"roformer"),E1t.forEach(t),TSo=r(uSe," \u2014 "),LO=n(uSe,"A",{href:!0});var C1t=s(LO);MSo=r(C1t,"RoFormerForCausalLM"),C1t.forEach(t),ESo=r(uSe," (RoFormer model)"),uSe.forEach(t),CSo=i(Q),Tb=n(Q,"LI",{});var pSe=s(Tb);rhe=n(pSe,"STRONG",{});var w1t=s(rhe);wSo=r(w1t,"speech_to_text_2"),w1t.forEach(t),ASo=r(pSe," \u2014 "),yO=n(pSe,"A",{href:!0});var A1t=s(yO);LSo=r(A1t,"Speech2Text2ForCausalLM"),A1t.forEach(t),ySo=r(pSe," (Speech2Text2 model)"),pSe.forEach(t),xSo=i(Q),Mb=n(Q,"LI",{});var _Se=s(Mb);the=n(_Se,"STRONG",{});var L1t=s(the);$So=r(L1t,"transfo-xl"),L1t.forEach(t),kSo=r(_Se," \u2014 "),xO=n(_Se,"A",{href:!0});var y1t=s(xO);SSo=r(y1t,"TransfoXLLMHeadModel"),y1t.forEach(t),RSo=r(_Se," (Transformer-XL model)"),_Se.forEach(t),PSo=i(Q),Eb=n(Q,"LI",{});var bSe=s(Eb);ahe=n(bSe,"STRONG",{});var x1t=s(ahe);BSo=r(x1t,"trocr"),x1t.forEach(t),ISo=r(bSe," \u2014 "),$O=n(bSe,"A",{href:!0});var $1t=s($O);NSo=r($1t,"TrOCRForCausalLM"),$1t.forEach(t),qSo=r(bSe," (TrOCR model)"),bSe.forEach(t),jSo=i(Q),Cb=n(Q,"LI",{});var vSe=s(Cb);nhe=n(vSe,"STRONG",{});var k1t=s(nhe);DSo=r(k1t,"xglm"),k1t.forEach(t),GSo=r(vSe," \u2014 "),kO=n(vSe,"A",{href:!0});var S1t=s(kO);OSo=r(S1t,"XGLMForCausalLM"),S1t.forEach(t),VSo=r(vSe," (XGLM model)"),vSe.forEach(t),XSo=i(Q),wb=n(Q,"LI",{});var FSe=s(wb);she=n(FSe,"STRONG",{});var R1t=s(she);zSo=r(R1t,"xlm"),R1t.forEach(t),QSo=r(FSe," \u2014 "),SO=n(FSe,"A",{href:!0});var P1t=s(SO);WSo=r(P1t,"XLMWithLMHeadModel"),P1t.forEach(t),HSo=r(FSe," (XLM model)"),FSe.forEach(t),USo=i(Q),Ab=n(Q,"LI",{});var TSe=s(Ab);lhe=n(TSe,"STRONG",{});var B1t=s(lhe);JSo=r(B1t,"xlm-prophetnet"),B1t.forEach(t),YSo=r(TSe," \u2014 "),RO=n(TSe,"A",{href:!0});var I1t=s(RO);KSo=r(I1t,"XLMProphetNetForCausalLM"),I1t.forEach(t),ZSo=r(TSe," (XLM-ProphetNet model)"),TSe.forEach(t),eRo=i(Q),Lb=n(Q,"LI",{});var MSe=s(Lb);ihe=n(MSe,"STRONG",{});var N1t=s(ihe);oRo=r(N1t,"xlm-roberta"),N1t.forEach(t),rRo=r(MSe," \u2014 "),PO=n(MSe,"A",{href:!0});var q1t=s(PO);tRo=r(q1t,"XLMRobertaForCausalLM"),q1t.forEach(t),aRo=r(MSe," (XLM-RoBERTa model)"),MSe.forEach(t),nRo=i(Q),yb=n(Q,"LI",{});var ESe=s(yb);dhe=n(ESe,"STRONG",{});var j1t=s(dhe);sRo=r(j1t,"xlm-roberta-xl"),j1t.forEach(t),lRo=r(ESe," \u2014 "),BO=n(ESe,"A",{href:!0});var D1t=s(BO);iRo=r(D1t,"XLMRobertaXLForCausalLM"),D1t.forEach(t),dRo=r(ESe," (XLM-RoBERTa-XL model)"),ESe.forEach(t),cRo=i(Q),xb=n(Q,"LI",{});var CSe=s(xb);che=n(CSe,"STRONG",{});var G1t=s(che);mRo=r(G1t,"xlnet"),G1t.forEach(t),fRo=r(CSe," \u2014 "),IO=n(CSe,"A",{href:!0});var O1t=s(IO);gRo=r(O1t,"XLNetLMHeadModel"),O1t.forEach(t),hRo=r(CSe," (XLNet model)"),CSe.forEach(t),Q.forEach(t),uRo=i(da),$b=n(da,"P",{});var wSe=s($b);pRo=r(wSe,"The model is set in evaluation mode by default using "),mhe=n(wSe,"CODE",{});var V1t=s(mhe);_Ro=r(V1t,"model.eval()"),V1t.forEach(t),bRo=r(wSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fhe=n(wSe,"CODE",{});var X1t=s(fhe);vRo=r(X1t,"model.train()"),X1t.forEach(t),wSe.forEach(t),FRo=i(da),T(kb.$$.fragment,da),da.forEach(t),al.forEach(t),pXe=i(m),Ji=n(m,"H2",{class:!0});var MQe=s(Ji);Sb=n(MQe,"A",{id:!0,class:!0,href:!0});var z1t=s(Sb);ghe=n(z1t,"SPAN",{});var Q1t=s(ghe);T(zy.$$.fragment,Q1t),Q1t.forEach(t),z1t.forEach(t),TRo=i(MQe),hhe=n(MQe,"SPAN",{});var W1t=s(hhe);MRo=r(W1t,"AutoModelForMaskedLM"),W1t.forEach(t),MQe.forEach(t),_Xe=i(m),Ro=n(m,"DIV",{class:!0});var nl=s(Ro);T(Qy.$$.fragment,nl),ERo=i(nl),Yi=n(nl,"P",{});var Nre=s(Yi);CRo=r(Nre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),NO=n(Nre,"A",{href:!0});var H1t=s(NO);wRo=r(H1t,"from_pretrained()"),H1t.forEach(t),ARo=r(Nre," class method or the "),qO=n(Nre,"A",{href:!0});var U1t=s(qO);LRo=r(U1t,"from_config()"),U1t.forEach(t),yRo=r(Nre,` class
method.`),Nre.forEach(t),xRo=i(nl),Wy=n(nl,"P",{});var EQe=s(Wy);$Ro=r(EQe,"This class cannot be instantiated directly using "),uhe=n(EQe,"CODE",{});var J1t=s(uhe);kRo=r(J1t,"__init__()"),J1t.forEach(t),SRo=r(EQe," (throws an error)."),EQe.forEach(t),RRo=i(nl),mt=n(nl,"DIV",{class:!0});var h7=s(mt);T(Hy.$$.fragment,h7),PRo=i(h7),phe=n(h7,"P",{});var Y1t=s(phe);BRo=r(Y1t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Y1t.forEach(t),IRo=i(h7),Ki=n(h7,"P",{});var qre=s(Ki);NRo=r(qre,`Note:
Loading a model from its configuration file does `),_he=n(qre,"STRONG",{});var K1t=s(_he);qRo=r(K1t,"not"),K1t.forEach(t),jRo=r(qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),jO=n(qre,"A",{href:!0});var Z1t=s(jO);DRo=r(Z1t,"from_pretrained()"),Z1t.forEach(t),GRo=r(qre," to load the model weights."),qre.forEach(t),ORo=i(h7),T(Rb.$$.fragment,h7),h7.forEach(t),VRo=i(nl),eo=n(nl,"DIV",{class:!0});var ca=s(eo);T(Uy.$$.fragment,ca),XRo=i(ca),bhe=n(ca,"P",{});var eFt=s(bhe);zRo=r(eFt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),eFt.forEach(t),QRo=i(ca),ja=n(ca,"P",{});var u7=s(ja);WRo=r(u7,"The model class to instantiate is selected based on the "),vhe=n(u7,"CODE",{});var oFt=s(vhe);HRo=r(oFt,"model_type"),oFt.forEach(t),URo=r(u7,` property of the config object (either
passed as an argument or loaded from `),Fhe=n(u7,"CODE",{});var rFt=s(Fhe);JRo=r(rFt,"pretrained_model_name_or_path"),rFt.forEach(t),YRo=r(u7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),The=n(u7,"CODE",{});var tFt=s(The);KRo=r(tFt,"pretrained_model_name_or_path"),tFt.forEach(t),ZRo=r(u7,":"),u7.forEach(t),ePo=i(ca),W=n(ca,"UL",{});var H=s(W);Pb=n(H,"LI",{});var ASe=s(Pb);Mhe=n(ASe,"STRONG",{});var aFt=s(Mhe);oPo=r(aFt,"albert"),aFt.forEach(t),rPo=r(ASe," \u2014 "),DO=n(ASe,"A",{href:!0});var nFt=s(DO);tPo=r(nFt,"AlbertForMaskedLM"),nFt.forEach(t),aPo=r(ASe," (ALBERT model)"),ASe.forEach(t),nPo=i(H),Bb=n(H,"LI",{});var LSe=s(Bb);Ehe=n(LSe,"STRONG",{});var sFt=s(Ehe);sPo=r(sFt,"bart"),sFt.forEach(t),lPo=r(LSe," \u2014 "),GO=n(LSe,"A",{href:!0});var lFt=s(GO);iPo=r(lFt,"BartForConditionalGeneration"),lFt.forEach(t),dPo=r(LSe," (BART model)"),LSe.forEach(t),cPo=i(H),Ib=n(H,"LI",{});var ySe=s(Ib);Che=n(ySe,"STRONG",{});var iFt=s(Che);mPo=r(iFt,"bert"),iFt.forEach(t),fPo=r(ySe," \u2014 "),OO=n(ySe,"A",{href:!0});var dFt=s(OO);gPo=r(dFt,"BertForMaskedLM"),dFt.forEach(t),hPo=r(ySe," (BERT model)"),ySe.forEach(t),uPo=i(H),Nb=n(H,"LI",{});var xSe=s(Nb);whe=n(xSe,"STRONG",{});var cFt=s(whe);pPo=r(cFt,"big_bird"),cFt.forEach(t),_Po=r(xSe," \u2014 "),VO=n(xSe,"A",{href:!0});var mFt=s(VO);bPo=r(mFt,"BigBirdForMaskedLM"),mFt.forEach(t),vPo=r(xSe," (BigBird model)"),xSe.forEach(t),FPo=i(H),qb=n(H,"LI",{});var $Se=s(qb);Ahe=n($Se,"STRONG",{});var fFt=s(Ahe);TPo=r(fFt,"camembert"),fFt.forEach(t),MPo=r($Se," \u2014 "),XO=n($Se,"A",{href:!0});var gFt=s(XO);EPo=r(gFt,"CamembertForMaskedLM"),gFt.forEach(t),CPo=r($Se," (CamemBERT model)"),$Se.forEach(t),wPo=i(H),jb=n(H,"LI",{});var kSe=s(jb);Lhe=n(kSe,"STRONG",{});var hFt=s(Lhe);APo=r(hFt,"convbert"),hFt.forEach(t),LPo=r(kSe," \u2014 "),zO=n(kSe,"A",{href:!0});var uFt=s(zO);yPo=r(uFt,"ConvBertForMaskedLM"),uFt.forEach(t),xPo=r(kSe," (ConvBERT model)"),kSe.forEach(t),$Po=i(H),Db=n(H,"LI",{});var SSe=s(Db);yhe=n(SSe,"STRONG",{});var pFt=s(yhe);kPo=r(pFt,"data2vec-text"),pFt.forEach(t),SPo=r(SSe," \u2014 "),QO=n(SSe,"A",{href:!0});var _Ft=s(QO);RPo=r(_Ft,"Data2VecTextForMaskedLM"),_Ft.forEach(t),PPo=r(SSe," (Data2VecText model)"),SSe.forEach(t),BPo=i(H),Gb=n(H,"LI",{});var RSe=s(Gb);xhe=n(RSe,"STRONG",{});var bFt=s(xhe);IPo=r(bFt,"deberta"),bFt.forEach(t),NPo=r(RSe," \u2014 "),WO=n(RSe,"A",{href:!0});var vFt=s(WO);qPo=r(vFt,"DebertaForMaskedLM"),vFt.forEach(t),jPo=r(RSe," (DeBERTa model)"),RSe.forEach(t),DPo=i(H),Ob=n(H,"LI",{});var PSe=s(Ob);$he=n(PSe,"STRONG",{});var FFt=s($he);GPo=r(FFt,"deberta-v2"),FFt.forEach(t),OPo=r(PSe," \u2014 "),HO=n(PSe,"A",{href:!0});var TFt=s(HO);VPo=r(TFt,"DebertaV2ForMaskedLM"),TFt.forEach(t),XPo=r(PSe," (DeBERTa-v2 model)"),PSe.forEach(t),zPo=i(H),Vb=n(H,"LI",{});var BSe=s(Vb);khe=n(BSe,"STRONG",{});var MFt=s(khe);QPo=r(MFt,"distilbert"),MFt.forEach(t),WPo=r(BSe," \u2014 "),UO=n(BSe,"A",{href:!0});var EFt=s(UO);HPo=r(EFt,"DistilBertForMaskedLM"),EFt.forEach(t),UPo=r(BSe," (DistilBERT model)"),BSe.forEach(t),JPo=i(H),Xb=n(H,"LI",{});var ISe=s(Xb);She=n(ISe,"STRONG",{});var CFt=s(She);YPo=r(CFt,"electra"),CFt.forEach(t),KPo=r(ISe," \u2014 "),JO=n(ISe,"A",{href:!0});var wFt=s(JO);ZPo=r(wFt,"ElectraForMaskedLM"),wFt.forEach(t),eBo=r(ISe," (ELECTRA model)"),ISe.forEach(t),oBo=i(H),zb=n(H,"LI",{});var NSe=s(zb);Rhe=n(NSe,"STRONG",{});var AFt=s(Rhe);rBo=r(AFt,"flaubert"),AFt.forEach(t),tBo=r(NSe," \u2014 "),YO=n(NSe,"A",{href:!0});var LFt=s(YO);aBo=r(LFt,"FlaubertWithLMHeadModel"),LFt.forEach(t),nBo=r(NSe," (FlauBERT model)"),NSe.forEach(t),sBo=i(H),Qb=n(H,"LI",{});var qSe=s(Qb);Phe=n(qSe,"STRONG",{});var yFt=s(Phe);lBo=r(yFt,"fnet"),yFt.forEach(t),iBo=r(qSe," \u2014 "),KO=n(qSe,"A",{href:!0});var xFt=s(KO);dBo=r(xFt,"FNetForMaskedLM"),xFt.forEach(t),cBo=r(qSe," (FNet model)"),qSe.forEach(t),mBo=i(H),Wb=n(H,"LI",{});var jSe=s(Wb);Bhe=n(jSe,"STRONG",{});var $Ft=s(Bhe);fBo=r($Ft,"funnel"),$Ft.forEach(t),gBo=r(jSe," \u2014 "),ZO=n(jSe,"A",{href:!0});var kFt=s(ZO);hBo=r(kFt,"FunnelForMaskedLM"),kFt.forEach(t),uBo=r(jSe," (Funnel Transformer model)"),jSe.forEach(t),pBo=i(H),Hb=n(H,"LI",{});var DSe=s(Hb);Ihe=n(DSe,"STRONG",{});var SFt=s(Ihe);_Bo=r(SFt,"ibert"),SFt.forEach(t),bBo=r(DSe," \u2014 "),eV=n(DSe,"A",{href:!0});var RFt=s(eV);vBo=r(RFt,"IBertForMaskedLM"),RFt.forEach(t),FBo=r(DSe," (I-BERT model)"),DSe.forEach(t),TBo=i(H),Ub=n(H,"LI",{});var GSe=s(Ub);Nhe=n(GSe,"STRONG",{});var PFt=s(Nhe);MBo=r(PFt,"layoutlm"),PFt.forEach(t),EBo=r(GSe," \u2014 "),oV=n(GSe,"A",{href:!0});var BFt=s(oV);CBo=r(BFt,"LayoutLMForMaskedLM"),BFt.forEach(t),wBo=r(GSe," (LayoutLM model)"),GSe.forEach(t),ABo=i(H),Jb=n(H,"LI",{});var OSe=s(Jb);qhe=n(OSe,"STRONG",{});var IFt=s(qhe);LBo=r(IFt,"longformer"),IFt.forEach(t),yBo=r(OSe," \u2014 "),rV=n(OSe,"A",{href:!0});var NFt=s(rV);xBo=r(NFt,"LongformerForMaskedLM"),NFt.forEach(t),$Bo=r(OSe," (Longformer model)"),OSe.forEach(t),kBo=i(H),Yb=n(H,"LI",{});var VSe=s(Yb);jhe=n(VSe,"STRONG",{});var qFt=s(jhe);SBo=r(qFt,"luke"),qFt.forEach(t),RBo=r(VSe," \u2014 "),tV=n(VSe,"A",{href:!0});var jFt=s(tV);PBo=r(jFt,"LukeForMaskedLM"),jFt.forEach(t),BBo=r(VSe," (LUKE model)"),VSe.forEach(t),IBo=i(H),Kb=n(H,"LI",{});var XSe=s(Kb);Dhe=n(XSe,"STRONG",{});var DFt=s(Dhe);NBo=r(DFt,"mbart"),DFt.forEach(t),qBo=r(XSe," \u2014 "),aV=n(XSe,"A",{href:!0});var GFt=s(aV);jBo=r(GFt,"MBartForConditionalGeneration"),GFt.forEach(t),DBo=r(XSe," (mBART model)"),XSe.forEach(t),GBo=i(H),Zb=n(H,"LI",{});var zSe=s(Zb);Ghe=n(zSe,"STRONG",{});var OFt=s(Ghe);OBo=r(OFt,"megatron-bert"),OFt.forEach(t),VBo=r(zSe," \u2014 "),nV=n(zSe,"A",{href:!0});var VFt=s(nV);XBo=r(VFt,"MegatronBertForMaskedLM"),VFt.forEach(t),zBo=r(zSe," (Megatron-BERT model)"),zSe.forEach(t),QBo=i(H),ev=n(H,"LI",{});var QSe=s(ev);Ohe=n(QSe,"STRONG",{});var XFt=s(Ohe);WBo=r(XFt,"mobilebert"),XFt.forEach(t),HBo=r(QSe," \u2014 "),sV=n(QSe,"A",{href:!0});var zFt=s(sV);UBo=r(zFt,"MobileBertForMaskedLM"),zFt.forEach(t),JBo=r(QSe," (MobileBERT model)"),QSe.forEach(t),YBo=i(H),ov=n(H,"LI",{});var WSe=s(ov);Vhe=n(WSe,"STRONG",{});var QFt=s(Vhe);KBo=r(QFt,"mpnet"),QFt.forEach(t),ZBo=r(WSe," \u2014 "),lV=n(WSe,"A",{href:!0});var WFt=s(lV);eIo=r(WFt,"MPNetForMaskedLM"),WFt.forEach(t),oIo=r(WSe," (MPNet model)"),WSe.forEach(t),rIo=i(H),rv=n(H,"LI",{});var HSe=s(rv);Xhe=n(HSe,"STRONG",{});var HFt=s(Xhe);tIo=r(HFt,"mvp"),HFt.forEach(t),aIo=r(HSe," \u2014 "),iV=n(HSe,"A",{href:!0});var UFt=s(iV);nIo=r(UFt,"MvpForConditionalGeneration"),UFt.forEach(t),sIo=r(HSe," (MVP model)"),HSe.forEach(t),lIo=i(H),tv=n(H,"LI",{});var USe=s(tv);zhe=n(USe,"STRONG",{});var JFt=s(zhe);iIo=r(JFt,"nezha"),JFt.forEach(t),dIo=r(USe," \u2014 "),dV=n(USe,"A",{href:!0});var YFt=s(dV);cIo=r(YFt,"NezhaForMaskedLM"),YFt.forEach(t),mIo=r(USe," (Nezha model)"),USe.forEach(t),fIo=i(H),av=n(H,"LI",{});var JSe=s(av);Qhe=n(JSe,"STRONG",{});var KFt=s(Qhe);gIo=r(KFt,"nystromformer"),KFt.forEach(t),hIo=r(JSe," \u2014 "),cV=n(JSe,"A",{href:!0});var ZFt=s(cV);uIo=r(ZFt,"NystromformerForMaskedLM"),ZFt.forEach(t),pIo=r(JSe," (Nystr\xF6mformer model)"),JSe.forEach(t),_Io=i(H),nv=n(H,"LI",{});var YSe=s(nv);Whe=n(YSe,"STRONG",{});var eTt=s(Whe);bIo=r(eTt,"perceiver"),eTt.forEach(t),vIo=r(YSe," \u2014 "),mV=n(YSe,"A",{href:!0});var oTt=s(mV);FIo=r(oTt,"PerceiverForMaskedLM"),oTt.forEach(t),TIo=r(YSe," (Perceiver model)"),YSe.forEach(t),MIo=i(H),sv=n(H,"LI",{});var KSe=s(sv);Hhe=n(KSe,"STRONG",{});var rTt=s(Hhe);EIo=r(rTt,"qdqbert"),rTt.forEach(t),CIo=r(KSe," \u2014 "),fV=n(KSe,"A",{href:!0});var tTt=s(fV);wIo=r(tTt,"QDQBertForMaskedLM"),tTt.forEach(t),AIo=r(KSe," (QDQBert model)"),KSe.forEach(t),LIo=i(H),lv=n(H,"LI",{});var ZSe=s(lv);Uhe=n(ZSe,"STRONG",{});var aTt=s(Uhe);yIo=r(aTt,"reformer"),aTt.forEach(t),xIo=r(ZSe," \u2014 "),gV=n(ZSe,"A",{href:!0});var nTt=s(gV);$Io=r(nTt,"ReformerForMaskedLM"),nTt.forEach(t),kIo=r(ZSe," (Reformer model)"),ZSe.forEach(t),SIo=i(H),iv=n(H,"LI",{});var eRe=s(iv);Jhe=n(eRe,"STRONG",{});var sTt=s(Jhe);RIo=r(sTt,"rembert"),sTt.forEach(t),PIo=r(eRe," \u2014 "),hV=n(eRe,"A",{href:!0});var lTt=s(hV);BIo=r(lTt,"RemBertForMaskedLM"),lTt.forEach(t),IIo=r(eRe," (RemBERT model)"),eRe.forEach(t),NIo=i(H),dv=n(H,"LI",{});var oRe=s(dv);Yhe=n(oRe,"STRONG",{});var iTt=s(Yhe);qIo=r(iTt,"roberta"),iTt.forEach(t),jIo=r(oRe," \u2014 "),uV=n(oRe,"A",{href:!0});var dTt=s(uV);DIo=r(dTt,"RobertaForMaskedLM"),dTt.forEach(t),GIo=r(oRe," (RoBERTa model)"),oRe.forEach(t),OIo=i(H),cv=n(H,"LI",{});var rRe=s(cv);Khe=n(rRe,"STRONG",{});var cTt=s(Khe);VIo=r(cTt,"roformer"),cTt.forEach(t),XIo=r(rRe," \u2014 "),pV=n(rRe,"A",{href:!0});var mTt=s(pV);zIo=r(mTt,"RoFormerForMaskedLM"),mTt.forEach(t),QIo=r(rRe," (RoFormer model)"),rRe.forEach(t),WIo=i(H),mv=n(H,"LI",{});var tRe=s(mv);Zhe=n(tRe,"STRONG",{});var fTt=s(Zhe);HIo=r(fTt,"squeezebert"),fTt.forEach(t),UIo=r(tRe," \u2014 "),_V=n(tRe,"A",{href:!0});var gTt=s(_V);JIo=r(gTt,"SqueezeBertForMaskedLM"),gTt.forEach(t),YIo=r(tRe," (SqueezeBERT model)"),tRe.forEach(t),KIo=i(H),fv=n(H,"LI",{});var aRe=s(fv);eue=n(aRe,"STRONG",{});var hTt=s(eue);ZIo=r(hTt,"tapas"),hTt.forEach(t),eNo=r(aRe," \u2014 "),bV=n(aRe,"A",{href:!0});var uTt=s(bV);oNo=r(uTt,"TapasForMaskedLM"),uTt.forEach(t),rNo=r(aRe," (TAPAS model)"),aRe.forEach(t),tNo=i(H),gv=n(H,"LI",{});var nRe=s(gv);oue=n(nRe,"STRONG",{});var pTt=s(oue);aNo=r(pTt,"wav2vec2"),pTt.forEach(t),nNo=r(nRe," \u2014 "),rue=n(nRe,"CODE",{});var _Tt=s(rue);sNo=r(_Tt,"Wav2Vec2ForMaskedLM"),_Tt.forEach(t),lNo=r(nRe," (Wav2Vec2 model)"),nRe.forEach(t),iNo=i(H),hv=n(H,"LI",{});var sRe=s(hv);tue=n(sRe,"STRONG",{});var bTt=s(tue);dNo=r(bTt,"xlm"),bTt.forEach(t),cNo=r(sRe," \u2014 "),vV=n(sRe,"A",{href:!0});var vTt=s(vV);mNo=r(vTt,"XLMWithLMHeadModel"),vTt.forEach(t),fNo=r(sRe," (XLM model)"),sRe.forEach(t),gNo=i(H),uv=n(H,"LI",{});var lRe=s(uv);aue=n(lRe,"STRONG",{});var FTt=s(aue);hNo=r(FTt,"xlm-roberta"),FTt.forEach(t),uNo=r(lRe," \u2014 "),FV=n(lRe,"A",{href:!0});var TTt=s(FV);pNo=r(TTt,"XLMRobertaForMaskedLM"),TTt.forEach(t),_No=r(lRe," (XLM-RoBERTa model)"),lRe.forEach(t),bNo=i(H),pv=n(H,"LI",{});var iRe=s(pv);nue=n(iRe,"STRONG",{});var MTt=s(nue);vNo=r(MTt,"xlm-roberta-xl"),MTt.forEach(t),FNo=r(iRe," \u2014 "),TV=n(iRe,"A",{href:!0});var ETt=s(TV);TNo=r(ETt,"XLMRobertaXLForMaskedLM"),ETt.forEach(t),MNo=r(iRe," (XLM-RoBERTa-XL model)"),iRe.forEach(t),ENo=i(H),_v=n(H,"LI",{});var dRe=s(_v);sue=n(dRe,"STRONG",{});var CTt=s(sue);CNo=r(CTt,"yoso"),CTt.forEach(t),wNo=r(dRe," \u2014 "),MV=n(dRe,"A",{href:!0});var wTt=s(MV);ANo=r(wTt,"YosoForMaskedLM"),wTt.forEach(t),LNo=r(dRe," (YOSO model)"),dRe.forEach(t),H.forEach(t),yNo=i(ca),bv=n(ca,"P",{});var cRe=s(bv);xNo=r(cRe,"The model is set in evaluation mode by default using "),lue=n(cRe,"CODE",{});var ATt=s(lue);$No=r(ATt,"model.eval()"),ATt.forEach(t),kNo=r(cRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iue=n(cRe,"CODE",{});var LTt=s(iue);SNo=r(LTt,"model.train()"),LTt.forEach(t),cRe.forEach(t),RNo=i(ca),T(vv.$$.fragment,ca),ca.forEach(t),nl.forEach(t),bXe=i(m),Zi=n(m,"H2",{class:!0});var CQe=s(Zi);Fv=n(CQe,"A",{id:!0,class:!0,href:!0});var yTt=s(Fv);due=n(yTt,"SPAN",{});var xTt=s(due);T(Jy.$$.fragment,xTt),xTt.forEach(t),yTt.forEach(t),PNo=i(CQe),cue=n(CQe,"SPAN",{});var $Tt=s(cue);BNo=r($Tt,"AutoModelForSeq2SeqLM"),$Tt.forEach(t),CQe.forEach(t),vXe=i(m),Po=n(m,"DIV",{class:!0});var sl=s(Po);T(Yy.$$.fragment,sl),INo=i(sl),ed=n(sl,"P",{});var jre=s(ed);NNo=r(jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EV=n(jre,"A",{href:!0});var kTt=s(EV);qNo=r(kTt,"from_pretrained()"),kTt.forEach(t),jNo=r(jre," class method or the "),CV=n(jre,"A",{href:!0});var STt=s(CV);DNo=r(STt,"from_config()"),STt.forEach(t),GNo=r(jre,` class
method.`),jre.forEach(t),ONo=i(sl),Ky=n(sl,"P",{});var wQe=s(Ky);VNo=r(wQe,"This class cannot be instantiated directly using "),mue=n(wQe,"CODE",{});var RTt=s(mue);XNo=r(RTt,"__init__()"),RTt.forEach(t),zNo=r(wQe," (throws an error)."),wQe.forEach(t),QNo=i(sl),ft=n(sl,"DIV",{class:!0});var p7=s(ft);T(Zy.$$.fragment,p7),WNo=i(p7),fue=n(p7,"P",{});var PTt=s(fue);HNo=r(PTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),PTt.forEach(t),UNo=i(p7),od=n(p7,"P",{});var Dre=s(od);JNo=r(Dre,`Note:
Loading a model from its configuration file does `),gue=n(Dre,"STRONG",{});var BTt=s(gue);YNo=r(BTt,"not"),BTt.forEach(t),KNo=r(Dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),wV=n(Dre,"A",{href:!0});var ITt=s(wV);ZNo=r(ITt,"from_pretrained()"),ITt.forEach(t),eqo=r(Dre," to load the model weights."),Dre.forEach(t),oqo=i(p7),T(Tv.$$.fragment,p7),p7.forEach(t),rqo=i(sl),oo=n(sl,"DIV",{class:!0});var ma=s(oo);T(e8.$$.fragment,ma),tqo=i(ma),hue=n(ma,"P",{});var NTt=s(hue);aqo=r(NTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),NTt.forEach(t),nqo=i(ma),Da=n(ma,"P",{});var _7=s(Da);sqo=r(_7,"The model class to instantiate is selected based on the "),uue=n(_7,"CODE",{});var qTt=s(uue);lqo=r(qTt,"model_type"),qTt.forEach(t),iqo=r(_7,` property of the config object (either
passed as an argument or loaded from `),pue=n(_7,"CODE",{});var jTt=s(pue);dqo=r(jTt,"pretrained_model_name_or_path"),jTt.forEach(t),cqo=r(_7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ue=n(_7,"CODE",{});var DTt=s(_ue);mqo=r(DTt,"pretrained_model_name_or_path"),DTt.forEach(t),fqo=r(_7,":"),_7.forEach(t),gqo=i(ma),ue=n(ma,"UL",{});var be=s(ue);Mv=n(be,"LI",{});var mRe=s(Mv);bue=n(mRe,"STRONG",{});var GTt=s(bue);hqo=r(GTt,"bart"),GTt.forEach(t),uqo=r(mRe," \u2014 "),AV=n(mRe,"A",{href:!0});var OTt=s(AV);pqo=r(OTt,"BartForConditionalGeneration"),OTt.forEach(t),_qo=r(mRe," (BART model)"),mRe.forEach(t),bqo=i(be),Ev=n(be,"LI",{});var fRe=s(Ev);vue=n(fRe,"STRONG",{});var VTt=s(vue);vqo=r(VTt,"bigbird_pegasus"),VTt.forEach(t),Fqo=r(fRe," \u2014 "),LV=n(fRe,"A",{href:!0});var XTt=s(LV);Tqo=r(XTt,"BigBirdPegasusForConditionalGeneration"),XTt.forEach(t),Mqo=r(fRe," (BigBird-Pegasus model)"),fRe.forEach(t),Eqo=i(be),Cv=n(be,"LI",{});var gRe=s(Cv);Fue=n(gRe,"STRONG",{});var zTt=s(Fue);Cqo=r(zTt,"blenderbot"),zTt.forEach(t),wqo=r(gRe," \u2014 "),yV=n(gRe,"A",{href:!0});var QTt=s(yV);Aqo=r(QTt,"BlenderbotForConditionalGeneration"),QTt.forEach(t),Lqo=r(gRe," (Blenderbot model)"),gRe.forEach(t),yqo=i(be),wv=n(be,"LI",{});var hRe=s(wv);Tue=n(hRe,"STRONG",{});var WTt=s(Tue);xqo=r(WTt,"blenderbot-small"),WTt.forEach(t),$qo=r(hRe," \u2014 "),xV=n(hRe,"A",{href:!0});var HTt=s(xV);kqo=r(HTt,"BlenderbotSmallForConditionalGeneration"),HTt.forEach(t),Sqo=r(hRe," (BlenderbotSmall model)"),hRe.forEach(t),Rqo=i(be),Av=n(be,"LI",{});var uRe=s(Av);Mue=n(uRe,"STRONG",{});var UTt=s(Mue);Pqo=r(UTt,"encoder-decoder"),UTt.forEach(t),Bqo=r(uRe," \u2014 "),$V=n(uRe,"A",{href:!0});var JTt=s($V);Iqo=r(JTt,"EncoderDecoderModel"),JTt.forEach(t),Nqo=r(uRe," (Encoder decoder model)"),uRe.forEach(t),qqo=i(be),Lv=n(be,"LI",{});var pRe=s(Lv);Eue=n(pRe,"STRONG",{});var YTt=s(Eue);jqo=r(YTt,"fsmt"),YTt.forEach(t),Dqo=r(pRe," \u2014 "),kV=n(pRe,"A",{href:!0});var KTt=s(kV);Gqo=r(KTt,"FSMTForConditionalGeneration"),KTt.forEach(t),Oqo=r(pRe," (FairSeq Machine-Translation model)"),pRe.forEach(t),Vqo=i(be),yv=n(be,"LI",{});var _Re=s(yv);Cue=n(_Re,"STRONG",{});var ZTt=s(Cue);Xqo=r(ZTt,"led"),ZTt.forEach(t),zqo=r(_Re," \u2014 "),SV=n(_Re,"A",{href:!0});var eMt=s(SV);Qqo=r(eMt,"LEDForConditionalGeneration"),eMt.forEach(t),Wqo=r(_Re," (LED model)"),_Re.forEach(t),Hqo=i(be),xv=n(be,"LI",{});var bRe=s(xv);wue=n(bRe,"STRONG",{});var oMt=s(wue);Uqo=r(oMt,"longt5"),oMt.forEach(t),Jqo=r(bRe," \u2014 "),RV=n(bRe,"A",{href:!0});var rMt=s(RV);Yqo=r(rMt,"LongT5ForConditionalGeneration"),rMt.forEach(t),Kqo=r(bRe," (LongT5 model)"),bRe.forEach(t),Zqo=i(be),$v=n(be,"LI",{});var vRe=s($v);Aue=n(vRe,"STRONG",{});var tMt=s(Aue);ejo=r(tMt,"m2m_100"),tMt.forEach(t),ojo=r(vRe," \u2014 "),PV=n(vRe,"A",{href:!0});var aMt=s(PV);rjo=r(aMt,"M2M100ForConditionalGeneration"),aMt.forEach(t),tjo=r(vRe," (M2M100 model)"),vRe.forEach(t),ajo=i(be),kv=n(be,"LI",{});var FRe=s(kv);Lue=n(FRe,"STRONG",{});var nMt=s(Lue);njo=r(nMt,"marian"),nMt.forEach(t),sjo=r(FRe," \u2014 "),BV=n(FRe,"A",{href:!0});var sMt=s(BV);ljo=r(sMt,"MarianMTModel"),sMt.forEach(t),ijo=r(FRe," (Marian model)"),FRe.forEach(t),djo=i(be),Sv=n(be,"LI",{});var TRe=s(Sv);yue=n(TRe,"STRONG",{});var lMt=s(yue);cjo=r(lMt,"mbart"),lMt.forEach(t),mjo=r(TRe," \u2014 "),IV=n(TRe,"A",{href:!0});var iMt=s(IV);fjo=r(iMt,"MBartForConditionalGeneration"),iMt.forEach(t),gjo=r(TRe," (mBART model)"),TRe.forEach(t),hjo=i(be),Rv=n(be,"LI",{});var MRe=s(Rv);xue=n(MRe,"STRONG",{});var dMt=s(xue);ujo=r(dMt,"mt5"),dMt.forEach(t),pjo=r(MRe," \u2014 "),NV=n(MRe,"A",{href:!0});var cMt=s(NV);_jo=r(cMt,"MT5ForConditionalGeneration"),cMt.forEach(t),bjo=r(MRe," (MT5 model)"),MRe.forEach(t),vjo=i(be),Pv=n(be,"LI",{});var ERe=s(Pv);$ue=n(ERe,"STRONG",{});var mMt=s($ue);Fjo=r(mMt,"mvp"),mMt.forEach(t),Tjo=r(ERe," \u2014 "),qV=n(ERe,"A",{href:!0});var fMt=s(qV);Mjo=r(fMt,"MvpForConditionalGeneration"),fMt.forEach(t),Ejo=r(ERe," (MVP model)"),ERe.forEach(t),Cjo=i(be),Bv=n(be,"LI",{});var CRe=s(Bv);kue=n(CRe,"STRONG",{});var gMt=s(kue);wjo=r(gMt,"pegasus"),gMt.forEach(t),Ajo=r(CRe," \u2014 "),jV=n(CRe,"A",{href:!0});var hMt=s(jV);Ljo=r(hMt,"PegasusForConditionalGeneration"),hMt.forEach(t),yjo=r(CRe," (Pegasus model)"),CRe.forEach(t),xjo=i(be),Iv=n(be,"LI",{});var wRe=s(Iv);Sue=n(wRe,"STRONG",{});var uMt=s(Sue);$jo=r(uMt,"plbart"),uMt.forEach(t),kjo=r(wRe," \u2014 "),DV=n(wRe,"A",{href:!0});var pMt=s(DV);Sjo=r(pMt,"PLBartForConditionalGeneration"),pMt.forEach(t),Rjo=r(wRe," (PLBart model)"),wRe.forEach(t),Pjo=i(be),Nv=n(be,"LI",{});var ARe=s(Nv);Rue=n(ARe,"STRONG",{});var _Mt=s(Rue);Bjo=r(_Mt,"prophetnet"),_Mt.forEach(t),Ijo=r(ARe," \u2014 "),GV=n(ARe,"A",{href:!0});var bMt=s(GV);Njo=r(bMt,"ProphetNetForConditionalGeneration"),bMt.forEach(t),qjo=r(ARe," (ProphetNet model)"),ARe.forEach(t),jjo=i(be),qv=n(be,"LI",{});var LRe=s(qv);Pue=n(LRe,"STRONG",{});var vMt=s(Pue);Djo=r(vMt,"t5"),vMt.forEach(t),Gjo=r(LRe," \u2014 "),OV=n(LRe,"A",{href:!0});var FMt=s(OV);Ojo=r(FMt,"T5ForConditionalGeneration"),FMt.forEach(t),Vjo=r(LRe," (T5 model)"),LRe.forEach(t),Xjo=i(be),jv=n(be,"LI",{});var yRe=s(jv);Bue=n(yRe,"STRONG",{});var TMt=s(Bue);zjo=r(TMt,"xlm-prophetnet"),TMt.forEach(t),Qjo=r(yRe," \u2014 "),VV=n(yRe,"A",{href:!0});var MMt=s(VV);Wjo=r(MMt,"XLMProphetNetForConditionalGeneration"),MMt.forEach(t),Hjo=r(yRe," (XLM-ProphetNet model)"),yRe.forEach(t),be.forEach(t),Ujo=i(ma),Dv=n(ma,"P",{});var xRe=s(Dv);Jjo=r(xRe,"The model is set in evaluation mode by default using "),Iue=n(xRe,"CODE",{});var EMt=s(Iue);Yjo=r(EMt,"model.eval()"),EMt.forEach(t),Kjo=r(xRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nue=n(xRe,"CODE",{});var CMt=s(Nue);Zjo=r(CMt,"model.train()"),CMt.forEach(t),xRe.forEach(t),eDo=i(ma),T(Gv.$$.fragment,ma),ma.forEach(t),sl.forEach(t),FXe=i(m),rd=n(m,"H2",{class:!0});var AQe=s(rd);Ov=n(AQe,"A",{id:!0,class:!0,href:!0});var wMt=s(Ov);que=n(wMt,"SPAN",{});var AMt=s(que);T(o8.$$.fragment,AMt),AMt.forEach(t),wMt.forEach(t),oDo=i(AQe),jue=n(AQe,"SPAN",{});var LMt=s(jue);rDo=r(LMt,"AutoModelForSequenceClassification"),LMt.forEach(t),AQe.forEach(t),TXe=i(m),Bo=n(m,"DIV",{class:!0});var ll=s(Bo);T(r8.$$.fragment,ll),tDo=i(ll),td=n(ll,"P",{});var Gre=s(td);aDo=r(Gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),XV=n(Gre,"A",{href:!0});var yMt=s(XV);nDo=r(yMt,"from_pretrained()"),yMt.forEach(t),sDo=r(Gre," class method or the "),zV=n(Gre,"A",{href:!0});var xMt=s(zV);lDo=r(xMt,"from_config()"),xMt.forEach(t),iDo=r(Gre,` class
method.`),Gre.forEach(t),dDo=i(ll),t8=n(ll,"P",{});var LQe=s(t8);cDo=r(LQe,"This class cannot be instantiated directly using "),Due=n(LQe,"CODE",{});var $Mt=s(Due);mDo=r($Mt,"__init__()"),$Mt.forEach(t),fDo=r(LQe," (throws an error)."),LQe.forEach(t),gDo=i(ll),gt=n(ll,"DIV",{class:!0});var b7=s(gt);T(a8.$$.fragment,b7),hDo=i(b7),Gue=n(b7,"P",{});var kMt=s(Gue);uDo=r(kMt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),kMt.forEach(t),pDo=i(b7),ad=n(b7,"P",{});var Ore=s(ad);_Do=r(Ore,`Note:
Loading a model from its configuration file does `),Oue=n(Ore,"STRONG",{});var SMt=s(Oue);bDo=r(SMt,"not"),SMt.forEach(t),vDo=r(Ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),QV=n(Ore,"A",{href:!0});var RMt=s(QV);FDo=r(RMt,"from_pretrained()"),RMt.forEach(t),TDo=r(Ore," to load the model weights."),Ore.forEach(t),MDo=i(b7),T(Vv.$$.fragment,b7),b7.forEach(t),EDo=i(ll),ro=n(ll,"DIV",{class:!0});var fa=s(ro);T(n8.$$.fragment,fa),CDo=i(fa),Vue=n(fa,"P",{});var PMt=s(Vue);wDo=r(PMt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),PMt.forEach(t),ADo=i(fa),Ga=n(fa,"P",{});var v7=s(Ga);LDo=r(v7,"The model class to instantiate is selected based on the "),Xue=n(v7,"CODE",{});var BMt=s(Xue);yDo=r(BMt,"model_type"),BMt.forEach(t),xDo=r(v7,` property of the config object (either
passed as an argument or loaded from `),zue=n(v7,"CODE",{});var IMt=s(zue);$Do=r(IMt,"pretrained_model_name_or_path"),IMt.forEach(t),kDo=r(v7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Que=n(v7,"CODE",{});var NMt=s(Que);SDo=r(NMt,"pretrained_model_name_or_path"),NMt.forEach(t),RDo=r(v7,":"),v7.forEach(t),PDo=i(fa),N=n(fa,"UL",{});var j=s(N);Xv=n(j,"LI",{});var $Re=s(Xv);Wue=n($Re,"STRONG",{});var qMt=s(Wue);BDo=r(qMt,"albert"),qMt.forEach(t),IDo=r($Re," \u2014 "),WV=n($Re,"A",{href:!0});var jMt=s(WV);NDo=r(jMt,"AlbertForSequenceClassification"),jMt.forEach(t),qDo=r($Re," (ALBERT model)"),$Re.forEach(t),jDo=i(j),zv=n(j,"LI",{});var kRe=s(zv);Hue=n(kRe,"STRONG",{});var DMt=s(Hue);DDo=r(DMt,"bart"),DMt.forEach(t),GDo=r(kRe," \u2014 "),HV=n(kRe,"A",{href:!0});var GMt=s(HV);ODo=r(GMt,"BartForSequenceClassification"),GMt.forEach(t),VDo=r(kRe," (BART model)"),kRe.forEach(t),XDo=i(j),Qv=n(j,"LI",{});var SRe=s(Qv);Uue=n(SRe,"STRONG",{});var OMt=s(Uue);zDo=r(OMt,"bert"),OMt.forEach(t),QDo=r(SRe," \u2014 "),UV=n(SRe,"A",{href:!0});var VMt=s(UV);WDo=r(VMt,"BertForSequenceClassification"),VMt.forEach(t),HDo=r(SRe," (BERT model)"),SRe.forEach(t),UDo=i(j),Wv=n(j,"LI",{});var RRe=s(Wv);Jue=n(RRe,"STRONG",{});var XMt=s(Jue);JDo=r(XMt,"big_bird"),XMt.forEach(t),YDo=r(RRe," \u2014 "),JV=n(RRe,"A",{href:!0});var zMt=s(JV);KDo=r(zMt,"BigBirdForSequenceClassification"),zMt.forEach(t),ZDo=r(RRe," (BigBird model)"),RRe.forEach(t),eGo=i(j),Hv=n(j,"LI",{});var PRe=s(Hv);Yue=n(PRe,"STRONG",{});var QMt=s(Yue);oGo=r(QMt,"bigbird_pegasus"),QMt.forEach(t),rGo=r(PRe," \u2014 "),YV=n(PRe,"A",{href:!0});var WMt=s(YV);tGo=r(WMt,"BigBirdPegasusForSequenceClassification"),WMt.forEach(t),aGo=r(PRe," (BigBird-Pegasus model)"),PRe.forEach(t),nGo=i(j),Uv=n(j,"LI",{});var BRe=s(Uv);Kue=n(BRe,"STRONG",{});var HMt=s(Kue);sGo=r(HMt,"bloom"),HMt.forEach(t),lGo=r(BRe," \u2014 "),KV=n(BRe,"A",{href:!0});var UMt=s(KV);iGo=r(UMt,"BloomForSequenceClassification"),UMt.forEach(t),dGo=r(BRe," (BLOOM model)"),BRe.forEach(t),cGo=i(j),Jv=n(j,"LI",{});var IRe=s(Jv);Zue=n(IRe,"STRONG",{});var JMt=s(Zue);mGo=r(JMt,"camembert"),JMt.forEach(t),fGo=r(IRe," \u2014 "),ZV=n(IRe,"A",{href:!0});var YMt=s(ZV);gGo=r(YMt,"CamembertForSequenceClassification"),YMt.forEach(t),hGo=r(IRe," (CamemBERT model)"),IRe.forEach(t),uGo=i(j),Yv=n(j,"LI",{});var NRe=s(Yv);epe=n(NRe,"STRONG",{});var KMt=s(epe);pGo=r(KMt,"canine"),KMt.forEach(t),_Go=r(NRe," \u2014 "),eX=n(NRe,"A",{href:!0});var ZMt=s(eX);bGo=r(ZMt,"CanineForSequenceClassification"),ZMt.forEach(t),vGo=r(NRe," (CANINE model)"),NRe.forEach(t),FGo=i(j),Kv=n(j,"LI",{});var qRe=s(Kv);ope=n(qRe,"STRONG",{});var e4t=s(ope);TGo=r(e4t,"convbert"),e4t.forEach(t),MGo=r(qRe," \u2014 "),oX=n(qRe,"A",{href:!0});var o4t=s(oX);EGo=r(o4t,"ConvBertForSequenceClassification"),o4t.forEach(t),CGo=r(qRe," (ConvBERT model)"),qRe.forEach(t),wGo=i(j),Zv=n(j,"LI",{});var jRe=s(Zv);rpe=n(jRe,"STRONG",{});var r4t=s(rpe);AGo=r(r4t,"ctrl"),r4t.forEach(t),LGo=r(jRe," \u2014 "),rX=n(jRe,"A",{href:!0});var t4t=s(rX);yGo=r(t4t,"CTRLForSequenceClassification"),t4t.forEach(t),xGo=r(jRe," (CTRL model)"),jRe.forEach(t),$Go=i(j),e1=n(j,"LI",{});var DRe=s(e1);tpe=n(DRe,"STRONG",{});var a4t=s(tpe);kGo=r(a4t,"data2vec-text"),a4t.forEach(t),SGo=r(DRe," \u2014 "),tX=n(DRe,"A",{href:!0});var n4t=s(tX);RGo=r(n4t,"Data2VecTextForSequenceClassification"),n4t.forEach(t),PGo=r(DRe," (Data2VecText model)"),DRe.forEach(t),BGo=i(j),o1=n(j,"LI",{});var GRe=s(o1);ape=n(GRe,"STRONG",{});var s4t=s(ape);IGo=r(s4t,"deberta"),s4t.forEach(t),NGo=r(GRe," \u2014 "),aX=n(GRe,"A",{href:!0});var l4t=s(aX);qGo=r(l4t,"DebertaForSequenceClassification"),l4t.forEach(t),jGo=r(GRe," (DeBERTa model)"),GRe.forEach(t),DGo=i(j),r1=n(j,"LI",{});var ORe=s(r1);npe=n(ORe,"STRONG",{});var i4t=s(npe);GGo=r(i4t,"deberta-v2"),i4t.forEach(t),OGo=r(ORe," \u2014 "),nX=n(ORe,"A",{href:!0});var d4t=s(nX);VGo=r(d4t,"DebertaV2ForSequenceClassification"),d4t.forEach(t),XGo=r(ORe," (DeBERTa-v2 model)"),ORe.forEach(t),zGo=i(j),t1=n(j,"LI",{});var VRe=s(t1);spe=n(VRe,"STRONG",{});var c4t=s(spe);QGo=r(c4t,"distilbert"),c4t.forEach(t),WGo=r(VRe," \u2014 "),sX=n(VRe,"A",{href:!0});var m4t=s(sX);HGo=r(m4t,"DistilBertForSequenceClassification"),m4t.forEach(t),UGo=r(VRe," (DistilBERT model)"),VRe.forEach(t),JGo=i(j),a1=n(j,"LI",{});var XRe=s(a1);lpe=n(XRe,"STRONG",{});var f4t=s(lpe);YGo=r(f4t,"electra"),f4t.forEach(t),KGo=r(XRe," \u2014 "),lX=n(XRe,"A",{href:!0});var g4t=s(lX);ZGo=r(g4t,"ElectraForSequenceClassification"),g4t.forEach(t),eOo=r(XRe," (ELECTRA model)"),XRe.forEach(t),oOo=i(j),n1=n(j,"LI",{});var zRe=s(n1);ipe=n(zRe,"STRONG",{});var h4t=s(ipe);rOo=r(h4t,"flaubert"),h4t.forEach(t),tOo=r(zRe," \u2014 "),iX=n(zRe,"A",{href:!0});var u4t=s(iX);aOo=r(u4t,"FlaubertForSequenceClassification"),u4t.forEach(t),nOo=r(zRe," (FlauBERT model)"),zRe.forEach(t),sOo=i(j),s1=n(j,"LI",{});var QRe=s(s1);dpe=n(QRe,"STRONG",{});var p4t=s(dpe);lOo=r(p4t,"fnet"),p4t.forEach(t),iOo=r(QRe," \u2014 "),dX=n(QRe,"A",{href:!0});var _4t=s(dX);dOo=r(_4t,"FNetForSequenceClassification"),_4t.forEach(t),cOo=r(QRe," (FNet model)"),QRe.forEach(t),mOo=i(j),l1=n(j,"LI",{});var WRe=s(l1);cpe=n(WRe,"STRONG",{});var b4t=s(cpe);fOo=r(b4t,"funnel"),b4t.forEach(t),gOo=r(WRe," \u2014 "),cX=n(WRe,"A",{href:!0});var v4t=s(cX);hOo=r(v4t,"FunnelForSequenceClassification"),v4t.forEach(t),uOo=r(WRe," (Funnel Transformer model)"),WRe.forEach(t),pOo=i(j),i1=n(j,"LI",{});var HRe=s(i1);mpe=n(HRe,"STRONG",{});var F4t=s(mpe);_Oo=r(F4t,"gpt2"),F4t.forEach(t),bOo=r(HRe," \u2014 "),mX=n(HRe,"A",{href:!0});var T4t=s(mX);vOo=r(T4t,"GPT2ForSequenceClassification"),T4t.forEach(t),FOo=r(HRe," (OpenAI GPT-2 model)"),HRe.forEach(t),TOo=i(j),d1=n(j,"LI",{});var URe=s(d1);fpe=n(URe,"STRONG",{});var M4t=s(fpe);MOo=r(M4t,"gpt_neo"),M4t.forEach(t),EOo=r(URe," \u2014 "),fX=n(URe,"A",{href:!0});var E4t=s(fX);COo=r(E4t,"GPTNeoForSequenceClassification"),E4t.forEach(t),wOo=r(URe," (GPT Neo model)"),URe.forEach(t),AOo=i(j),c1=n(j,"LI",{});var JRe=s(c1);gpe=n(JRe,"STRONG",{});var C4t=s(gpe);LOo=r(C4t,"gptj"),C4t.forEach(t),yOo=r(JRe," \u2014 "),gX=n(JRe,"A",{href:!0});var w4t=s(gX);xOo=r(w4t,"GPTJForSequenceClassification"),w4t.forEach(t),$Oo=r(JRe," (GPT-J model)"),JRe.forEach(t),kOo=i(j),m1=n(j,"LI",{});var YRe=s(m1);hpe=n(YRe,"STRONG",{});var A4t=s(hpe);SOo=r(A4t,"ibert"),A4t.forEach(t),ROo=r(YRe," \u2014 "),hX=n(YRe,"A",{href:!0});var L4t=s(hX);POo=r(L4t,"IBertForSequenceClassification"),L4t.forEach(t),BOo=r(YRe," (I-BERT model)"),YRe.forEach(t),IOo=i(j),f1=n(j,"LI",{});var KRe=s(f1);upe=n(KRe,"STRONG",{});var y4t=s(upe);NOo=r(y4t,"layoutlm"),y4t.forEach(t),qOo=r(KRe," \u2014 "),uX=n(KRe,"A",{href:!0});var x4t=s(uX);jOo=r(x4t,"LayoutLMForSequenceClassification"),x4t.forEach(t),DOo=r(KRe," (LayoutLM model)"),KRe.forEach(t),GOo=i(j),g1=n(j,"LI",{});var ZRe=s(g1);ppe=n(ZRe,"STRONG",{});var $4t=s(ppe);OOo=r($4t,"layoutlmv2"),$4t.forEach(t),VOo=r(ZRe," \u2014 "),pX=n(ZRe,"A",{href:!0});var k4t=s(pX);XOo=r(k4t,"LayoutLMv2ForSequenceClassification"),k4t.forEach(t),zOo=r(ZRe," (LayoutLMv2 model)"),ZRe.forEach(t),QOo=i(j),h1=n(j,"LI",{});var ePe=s(h1);_pe=n(ePe,"STRONG",{});var S4t=s(_pe);WOo=r(S4t,"layoutlmv3"),S4t.forEach(t),HOo=r(ePe," \u2014 "),_X=n(ePe,"A",{href:!0});var R4t=s(_X);UOo=r(R4t,"LayoutLMv3ForSequenceClassification"),R4t.forEach(t),JOo=r(ePe," (LayoutLMv3 model)"),ePe.forEach(t),YOo=i(j),u1=n(j,"LI",{});var oPe=s(u1);bpe=n(oPe,"STRONG",{});var P4t=s(bpe);KOo=r(P4t,"led"),P4t.forEach(t),ZOo=r(oPe," \u2014 "),bX=n(oPe,"A",{href:!0});var B4t=s(bX);eVo=r(B4t,"LEDForSequenceClassification"),B4t.forEach(t),oVo=r(oPe," (LED model)"),oPe.forEach(t),rVo=i(j),p1=n(j,"LI",{});var rPe=s(p1);vpe=n(rPe,"STRONG",{});var I4t=s(vpe);tVo=r(I4t,"longformer"),I4t.forEach(t),aVo=r(rPe," \u2014 "),vX=n(rPe,"A",{href:!0});var N4t=s(vX);nVo=r(N4t,"LongformerForSequenceClassification"),N4t.forEach(t),sVo=r(rPe," (Longformer model)"),rPe.forEach(t),lVo=i(j),_1=n(j,"LI",{});var tPe=s(_1);Fpe=n(tPe,"STRONG",{});var q4t=s(Fpe);iVo=r(q4t,"mbart"),q4t.forEach(t),dVo=r(tPe," \u2014 "),FX=n(tPe,"A",{href:!0});var j4t=s(FX);cVo=r(j4t,"MBartForSequenceClassification"),j4t.forEach(t),mVo=r(tPe," (mBART model)"),tPe.forEach(t),fVo=i(j),b1=n(j,"LI",{});var aPe=s(b1);Tpe=n(aPe,"STRONG",{});var D4t=s(Tpe);gVo=r(D4t,"megatron-bert"),D4t.forEach(t),hVo=r(aPe," \u2014 "),TX=n(aPe,"A",{href:!0});var G4t=s(TX);uVo=r(G4t,"MegatronBertForSequenceClassification"),G4t.forEach(t),pVo=r(aPe," (Megatron-BERT model)"),aPe.forEach(t),_Vo=i(j),v1=n(j,"LI",{});var nPe=s(v1);Mpe=n(nPe,"STRONG",{});var O4t=s(Mpe);bVo=r(O4t,"mobilebert"),O4t.forEach(t),vVo=r(nPe," \u2014 "),MX=n(nPe,"A",{href:!0});var V4t=s(MX);FVo=r(V4t,"MobileBertForSequenceClassification"),V4t.forEach(t),TVo=r(nPe," (MobileBERT model)"),nPe.forEach(t),MVo=i(j),F1=n(j,"LI",{});var sPe=s(F1);Epe=n(sPe,"STRONG",{});var X4t=s(Epe);EVo=r(X4t,"mpnet"),X4t.forEach(t),CVo=r(sPe," \u2014 "),EX=n(sPe,"A",{href:!0});var z4t=s(EX);wVo=r(z4t,"MPNetForSequenceClassification"),z4t.forEach(t),AVo=r(sPe," (MPNet model)"),sPe.forEach(t),LVo=i(j),T1=n(j,"LI",{});var lPe=s(T1);Cpe=n(lPe,"STRONG",{});var Q4t=s(Cpe);yVo=r(Q4t,"mvp"),Q4t.forEach(t),xVo=r(lPe," \u2014 "),CX=n(lPe,"A",{href:!0});var W4t=s(CX);$Vo=r(W4t,"MvpForSequenceClassification"),W4t.forEach(t),kVo=r(lPe," (MVP model)"),lPe.forEach(t),SVo=i(j),M1=n(j,"LI",{});var iPe=s(M1);wpe=n(iPe,"STRONG",{});var H4t=s(wpe);RVo=r(H4t,"nezha"),H4t.forEach(t),PVo=r(iPe," \u2014 "),wX=n(iPe,"A",{href:!0});var U4t=s(wX);BVo=r(U4t,"NezhaForSequenceClassification"),U4t.forEach(t),IVo=r(iPe," (Nezha model)"),iPe.forEach(t),NVo=i(j),E1=n(j,"LI",{});var dPe=s(E1);Ape=n(dPe,"STRONG",{});var J4t=s(Ape);qVo=r(J4t,"nystromformer"),J4t.forEach(t),jVo=r(dPe," \u2014 "),AX=n(dPe,"A",{href:!0});var Y4t=s(AX);DVo=r(Y4t,"NystromformerForSequenceClassification"),Y4t.forEach(t),GVo=r(dPe," (Nystr\xF6mformer model)"),dPe.forEach(t),OVo=i(j),C1=n(j,"LI",{});var cPe=s(C1);Lpe=n(cPe,"STRONG",{});var K4t=s(Lpe);VVo=r(K4t,"openai-gpt"),K4t.forEach(t),XVo=r(cPe," \u2014 "),LX=n(cPe,"A",{href:!0});var Z4t=s(LX);zVo=r(Z4t,"OpenAIGPTForSequenceClassification"),Z4t.forEach(t),QVo=r(cPe," (OpenAI GPT model)"),cPe.forEach(t),WVo=i(j),w1=n(j,"LI",{});var mPe=s(w1);ype=n(mPe,"STRONG",{});var eEt=s(ype);HVo=r(eEt,"perceiver"),eEt.forEach(t),UVo=r(mPe," \u2014 "),yX=n(mPe,"A",{href:!0});var oEt=s(yX);JVo=r(oEt,"PerceiverForSequenceClassification"),oEt.forEach(t),YVo=r(mPe," (Perceiver model)"),mPe.forEach(t),KVo=i(j),A1=n(j,"LI",{});var fPe=s(A1);xpe=n(fPe,"STRONG",{});var rEt=s(xpe);ZVo=r(rEt,"plbart"),rEt.forEach(t),eXo=r(fPe," \u2014 "),xX=n(fPe,"A",{href:!0});var tEt=s(xX);oXo=r(tEt,"PLBartForSequenceClassification"),tEt.forEach(t),rXo=r(fPe," (PLBart model)"),fPe.forEach(t),tXo=i(j),L1=n(j,"LI",{});var gPe=s(L1);$pe=n(gPe,"STRONG",{});var aEt=s($pe);aXo=r(aEt,"qdqbert"),aEt.forEach(t),nXo=r(gPe," \u2014 "),$X=n(gPe,"A",{href:!0});var nEt=s($X);sXo=r(nEt,"QDQBertForSequenceClassification"),nEt.forEach(t),lXo=r(gPe," (QDQBert model)"),gPe.forEach(t),iXo=i(j),y1=n(j,"LI",{});var hPe=s(y1);kpe=n(hPe,"STRONG",{});var sEt=s(kpe);dXo=r(sEt,"reformer"),sEt.forEach(t),cXo=r(hPe," \u2014 "),kX=n(hPe,"A",{href:!0});var lEt=s(kX);mXo=r(lEt,"ReformerForSequenceClassification"),lEt.forEach(t),fXo=r(hPe," (Reformer model)"),hPe.forEach(t),gXo=i(j),x1=n(j,"LI",{});var uPe=s(x1);Spe=n(uPe,"STRONG",{});var iEt=s(Spe);hXo=r(iEt,"rembert"),iEt.forEach(t),uXo=r(uPe," \u2014 "),SX=n(uPe,"A",{href:!0});var dEt=s(SX);pXo=r(dEt,"RemBertForSequenceClassification"),dEt.forEach(t),_Xo=r(uPe," (RemBERT model)"),uPe.forEach(t),bXo=i(j),$1=n(j,"LI",{});var pPe=s($1);Rpe=n(pPe,"STRONG",{});var cEt=s(Rpe);vXo=r(cEt,"roberta"),cEt.forEach(t),FXo=r(pPe," \u2014 "),RX=n(pPe,"A",{href:!0});var mEt=s(RX);TXo=r(mEt,"RobertaForSequenceClassification"),mEt.forEach(t),MXo=r(pPe," (RoBERTa model)"),pPe.forEach(t),EXo=i(j),k1=n(j,"LI",{});var _Pe=s(k1);Ppe=n(_Pe,"STRONG",{});var fEt=s(Ppe);CXo=r(fEt,"roformer"),fEt.forEach(t),wXo=r(_Pe," \u2014 "),PX=n(_Pe,"A",{href:!0});var gEt=s(PX);AXo=r(gEt,"RoFormerForSequenceClassification"),gEt.forEach(t),LXo=r(_Pe," (RoFormer model)"),_Pe.forEach(t),yXo=i(j),S1=n(j,"LI",{});var bPe=s(S1);Bpe=n(bPe,"STRONG",{});var hEt=s(Bpe);xXo=r(hEt,"squeezebert"),hEt.forEach(t),$Xo=r(bPe," \u2014 "),BX=n(bPe,"A",{href:!0});var uEt=s(BX);kXo=r(uEt,"SqueezeBertForSequenceClassification"),uEt.forEach(t),SXo=r(bPe," (SqueezeBERT model)"),bPe.forEach(t),RXo=i(j),R1=n(j,"LI",{});var vPe=s(R1);Ipe=n(vPe,"STRONG",{});var pEt=s(Ipe);PXo=r(pEt,"tapas"),pEt.forEach(t),BXo=r(vPe," \u2014 "),IX=n(vPe,"A",{href:!0});var _Et=s(IX);IXo=r(_Et,"TapasForSequenceClassification"),_Et.forEach(t),NXo=r(vPe," (TAPAS model)"),vPe.forEach(t),qXo=i(j),P1=n(j,"LI",{});var FPe=s(P1);Npe=n(FPe,"STRONG",{});var bEt=s(Npe);jXo=r(bEt,"transfo-xl"),bEt.forEach(t),DXo=r(FPe," \u2014 "),NX=n(FPe,"A",{href:!0});var vEt=s(NX);GXo=r(vEt,"TransfoXLForSequenceClassification"),vEt.forEach(t),OXo=r(FPe," (Transformer-XL model)"),FPe.forEach(t),VXo=i(j),B1=n(j,"LI",{});var TPe=s(B1);qpe=n(TPe,"STRONG",{});var FEt=s(qpe);XXo=r(FEt,"xlm"),FEt.forEach(t),zXo=r(TPe," \u2014 "),qX=n(TPe,"A",{href:!0});var TEt=s(qX);QXo=r(TEt,"XLMForSequenceClassification"),TEt.forEach(t),WXo=r(TPe," (XLM model)"),TPe.forEach(t),HXo=i(j),I1=n(j,"LI",{});var MPe=s(I1);jpe=n(MPe,"STRONG",{});var MEt=s(jpe);UXo=r(MEt,"xlm-roberta"),MEt.forEach(t),JXo=r(MPe," \u2014 "),jX=n(MPe,"A",{href:!0});var EEt=s(jX);YXo=r(EEt,"XLMRobertaForSequenceClassification"),EEt.forEach(t),KXo=r(MPe," (XLM-RoBERTa model)"),MPe.forEach(t),ZXo=i(j),N1=n(j,"LI",{});var EPe=s(N1);Dpe=n(EPe,"STRONG",{});var CEt=s(Dpe);ezo=r(CEt,"xlm-roberta-xl"),CEt.forEach(t),ozo=r(EPe," \u2014 "),DX=n(EPe,"A",{href:!0});var wEt=s(DX);rzo=r(wEt,"XLMRobertaXLForSequenceClassification"),wEt.forEach(t),tzo=r(EPe," (XLM-RoBERTa-XL model)"),EPe.forEach(t),azo=i(j),q1=n(j,"LI",{});var CPe=s(q1);Gpe=n(CPe,"STRONG",{});var AEt=s(Gpe);nzo=r(AEt,"xlnet"),AEt.forEach(t),szo=r(CPe," \u2014 "),GX=n(CPe,"A",{href:!0});var LEt=s(GX);lzo=r(LEt,"XLNetForSequenceClassification"),LEt.forEach(t),izo=r(CPe," (XLNet model)"),CPe.forEach(t),dzo=i(j),j1=n(j,"LI",{});var wPe=s(j1);Ope=n(wPe,"STRONG",{});var yEt=s(Ope);czo=r(yEt,"yoso"),yEt.forEach(t),mzo=r(wPe," \u2014 "),OX=n(wPe,"A",{href:!0});var xEt=s(OX);fzo=r(xEt,"YosoForSequenceClassification"),xEt.forEach(t),gzo=r(wPe," (YOSO model)"),wPe.forEach(t),j.forEach(t),hzo=i(fa),D1=n(fa,"P",{});var APe=s(D1);uzo=r(APe,"The model is set in evaluation mode by default using "),Vpe=n(APe,"CODE",{});var $Et=s(Vpe);pzo=r($Et,"model.eval()"),$Et.forEach(t),_zo=r(APe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xpe=n(APe,"CODE",{});var kEt=s(Xpe);bzo=r(kEt,"model.train()"),kEt.forEach(t),APe.forEach(t),vzo=i(fa),T(G1.$$.fragment,fa),fa.forEach(t),ll.forEach(t),MXe=i(m),nd=n(m,"H2",{class:!0});var yQe=s(nd);O1=n(yQe,"A",{id:!0,class:!0,href:!0});var SEt=s(O1);zpe=n(SEt,"SPAN",{});var REt=s(zpe);T(s8.$$.fragment,REt),REt.forEach(t),SEt.forEach(t),Fzo=i(yQe),Qpe=n(yQe,"SPAN",{});var PEt=s(Qpe);Tzo=r(PEt,"AutoModelForMultipleChoice"),PEt.forEach(t),yQe.forEach(t),EXe=i(m),Io=n(m,"DIV",{class:!0});var il=s(Io);T(l8.$$.fragment,il),Mzo=i(il),sd=n(il,"P",{});var Vre=s(sd);Ezo=r(Vre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),VX=n(Vre,"A",{href:!0});var BEt=s(VX);Czo=r(BEt,"from_pretrained()"),BEt.forEach(t),wzo=r(Vre," class method or the "),XX=n(Vre,"A",{href:!0});var IEt=s(XX);Azo=r(IEt,"from_config()"),IEt.forEach(t),Lzo=r(Vre,` class
method.`),Vre.forEach(t),yzo=i(il),i8=n(il,"P",{});var xQe=s(i8);xzo=r(xQe,"This class cannot be instantiated directly using "),Wpe=n(xQe,"CODE",{});var NEt=s(Wpe);$zo=r(NEt,"__init__()"),NEt.forEach(t),kzo=r(xQe," (throws an error)."),xQe.forEach(t),Szo=i(il),ht=n(il,"DIV",{class:!0});var F7=s(ht);T(d8.$$.fragment,F7),Rzo=i(F7),Hpe=n(F7,"P",{});var qEt=s(Hpe);Pzo=r(qEt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),qEt.forEach(t),Bzo=i(F7),ld=n(F7,"P",{});var Xre=s(ld);Izo=r(Xre,`Note:
Loading a model from its configuration file does `),Upe=n(Xre,"STRONG",{});var jEt=s(Upe);Nzo=r(jEt,"not"),jEt.forEach(t),qzo=r(Xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),zX=n(Xre,"A",{href:!0});var DEt=s(zX);jzo=r(DEt,"from_pretrained()"),DEt.forEach(t),Dzo=r(Xre," to load the model weights."),Xre.forEach(t),Gzo=i(F7),T(V1.$$.fragment,F7),F7.forEach(t),Ozo=i(il),to=n(il,"DIV",{class:!0});var ga=s(to);T(c8.$$.fragment,ga),Vzo=i(ga),Jpe=n(ga,"P",{});var GEt=s(Jpe);Xzo=r(GEt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),GEt.forEach(t),zzo=i(ga),Oa=n(ga,"P",{});var T7=s(Oa);Qzo=r(T7,"The model class to instantiate is selected based on the "),Ype=n(T7,"CODE",{});var OEt=s(Ype);Wzo=r(OEt,"model_type"),OEt.forEach(t),Hzo=r(T7,` property of the config object (either
passed as an argument or loaded from `),Kpe=n(T7,"CODE",{});var VEt=s(Kpe);Uzo=r(VEt,"pretrained_model_name_or_path"),VEt.forEach(t),Jzo=r(T7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zpe=n(T7,"CODE",{});var XEt=s(Zpe);Yzo=r(XEt,"pretrained_model_name_or_path"),XEt.forEach(t),Kzo=r(T7,":"),T7.forEach(t),Zzo=i(ga),Z=n(ga,"UL",{});var ee=s(Z);X1=n(ee,"LI",{});var LPe=s(X1);e_e=n(LPe,"STRONG",{});var zEt=s(e_e);eQo=r(zEt,"albert"),zEt.forEach(t),oQo=r(LPe," \u2014 "),QX=n(LPe,"A",{href:!0});var QEt=s(QX);rQo=r(QEt,"AlbertForMultipleChoice"),QEt.forEach(t),tQo=r(LPe," (ALBERT model)"),LPe.forEach(t),aQo=i(ee),z1=n(ee,"LI",{});var yPe=s(z1);o_e=n(yPe,"STRONG",{});var WEt=s(o_e);nQo=r(WEt,"bert"),WEt.forEach(t),sQo=r(yPe," \u2014 "),WX=n(yPe,"A",{href:!0});var HEt=s(WX);lQo=r(HEt,"BertForMultipleChoice"),HEt.forEach(t),iQo=r(yPe," (BERT model)"),yPe.forEach(t),dQo=i(ee),Q1=n(ee,"LI",{});var xPe=s(Q1);r_e=n(xPe,"STRONG",{});var UEt=s(r_e);cQo=r(UEt,"big_bird"),UEt.forEach(t),mQo=r(xPe," \u2014 "),HX=n(xPe,"A",{href:!0});var JEt=s(HX);fQo=r(JEt,"BigBirdForMultipleChoice"),JEt.forEach(t),gQo=r(xPe," (BigBird model)"),xPe.forEach(t),hQo=i(ee),W1=n(ee,"LI",{});var $Pe=s(W1);t_e=n($Pe,"STRONG",{});var YEt=s(t_e);uQo=r(YEt,"camembert"),YEt.forEach(t),pQo=r($Pe," \u2014 "),UX=n($Pe,"A",{href:!0});var KEt=s(UX);_Qo=r(KEt,"CamembertForMultipleChoice"),KEt.forEach(t),bQo=r($Pe," (CamemBERT model)"),$Pe.forEach(t),vQo=i(ee),H1=n(ee,"LI",{});var kPe=s(H1);a_e=n(kPe,"STRONG",{});var ZEt=s(a_e);FQo=r(ZEt,"canine"),ZEt.forEach(t),TQo=r(kPe," \u2014 "),JX=n(kPe,"A",{href:!0});var eCt=s(JX);MQo=r(eCt,"CanineForMultipleChoice"),eCt.forEach(t),EQo=r(kPe," (CANINE model)"),kPe.forEach(t),CQo=i(ee),U1=n(ee,"LI",{});var SPe=s(U1);n_e=n(SPe,"STRONG",{});var oCt=s(n_e);wQo=r(oCt,"convbert"),oCt.forEach(t),AQo=r(SPe," \u2014 "),YX=n(SPe,"A",{href:!0});var rCt=s(YX);LQo=r(rCt,"ConvBertForMultipleChoice"),rCt.forEach(t),yQo=r(SPe," (ConvBERT model)"),SPe.forEach(t),xQo=i(ee),J1=n(ee,"LI",{});var RPe=s(J1);s_e=n(RPe,"STRONG",{});var tCt=s(s_e);$Qo=r(tCt,"data2vec-text"),tCt.forEach(t),kQo=r(RPe," \u2014 "),KX=n(RPe,"A",{href:!0});var aCt=s(KX);SQo=r(aCt,"Data2VecTextForMultipleChoice"),aCt.forEach(t),RQo=r(RPe," (Data2VecText model)"),RPe.forEach(t),PQo=i(ee),Y1=n(ee,"LI",{});var PPe=s(Y1);l_e=n(PPe,"STRONG",{});var nCt=s(l_e);BQo=r(nCt,"deberta-v2"),nCt.forEach(t),IQo=r(PPe," \u2014 "),ZX=n(PPe,"A",{href:!0});var sCt=s(ZX);NQo=r(sCt,"DebertaV2ForMultipleChoice"),sCt.forEach(t),qQo=r(PPe," (DeBERTa-v2 model)"),PPe.forEach(t),jQo=i(ee),K1=n(ee,"LI",{});var BPe=s(K1);i_e=n(BPe,"STRONG",{});var lCt=s(i_e);DQo=r(lCt,"distilbert"),lCt.forEach(t),GQo=r(BPe," \u2014 "),ez=n(BPe,"A",{href:!0});var iCt=s(ez);OQo=r(iCt,"DistilBertForMultipleChoice"),iCt.forEach(t),VQo=r(BPe," (DistilBERT model)"),BPe.forEach(t),XQo=i(ee),Z1=n(ee,"LI",{});var IPe=s(Z1);d_e=n(IPe,"STRONG",{});var dCt=s(d_e);zQo=r(dCt,"electra"),dCt.forEach(t),QQo=r(IPe," \u2014 "),oz=n(IPe,"A",{href:!0});var cCt=s(oz);WQo=r(cCt,"ElectraForMultipleChoice"),cCt.forEach(t),HQo=r(IPe," (ELECTRA model)"),IPe.forEach(t),UQo=i(ee),eF=n(ee,"LI",{});var NPe=s(eF);c_e=n(NPe,"STRONG",{});var mCt=s(c_e);JQo=r(mCt,"flaubert"),mCt.forEach(t),YQo=r(NPe," \u2014 "),rz=n(NPe,"A",{href:!0});var fCt=s(rz);KQo=r(fCt,"FlaubertForMultipleChoice"),fCt.forEach(t),ZQo=r(NPe," (FlauBERT model)"),NPe.forEach(t),eWo=i(ee),oF=n(ee,"LI",{});var qPe=s(oF);m_e=n(qPe,"STRONG",{});var gCt=s(m_e);oWo=r(gCt,"fnet"),gCt.forEach(t),rWo=r(qPe," \u2014 "),tz=n(qPe,"A",{href:!0});var hCt=s(tz);tWo=r(hCt,"FNetForMultipleChoice"),hCt.forEach(t),aWo=r(qPe," (FNet model)"),qPe.forEach(t),nWo=i(ee),rF=n(ee,"LI",{});var jPe=s(rF);f_e=n(jPe,"STRONG",{});var uCt=s(f_e);sWo=r(uCt,"funnel"),uCt.forEach(t),lWo=r(jPe," \u2014 "),az=n(jPe,"A",{href:!0});var pCt=s(az);iWo=r(pCt,"FunnelForMultipleChoice"),pCt.forEach(t),dWo=r(jPe," (Funnel Transformer model)"),jPe.forEach(t),cWo=i(ee),tF=n(ee,"LI",{});var DPe=s(tF);g_e=n(DPe,"STRONG",{});var _Ct=s(g_e);mWo=r(_Ct,"ibert"),_Ct.forEach(t),fWo=r(DPe," \u2014 "),nz=n(DPe,"A",{href:!0});var bCt=s(nz);gWo=r(bCt,"IBertForMultipleChoice"),bCt.forEach(t),hWo=r(DPe," (I-BERT model)"),DPe.forEach(t),uWo=i(ee),aF=n(ee,"LI",{});var GPe=s(aF);h_e=n(GPe,"STRONG",{});var vCt=s(h_e);pWo=r(vCt,"longformer"),vCt.forEach(t),_Wo=r(GPe," \u2014 "),sz=n(GPe,"A",{href:!0});var FCt=s(sz);bWo=r(FCt,"LongformerForMultipleChoice"),FCt.forEach(t),vWo=r(GPe," (Longformer model)"),GPe.forEach(t),FWo=i(ee),nF=n(ee,"LI",{});var OPe=s(nF);u_e=n(OPe,"STRONG",{});var TCt=s(u_e);TWo=r(TCt,"megatron-bert"),TCt.forEach(t),MWo=r(OPe," \u2014 "),lz=n(OPe,"A",{href:!0});var MCt=s(lz);EWo=r(MCt,"MegatronBertForMultipleChoice"),MCt.forEach(t),CWo=r(OPe," (Megatron-BERT model)"),OPe.forEach(t),wWo=i(ee),sF=n(ee,"LI",{});var VPe=s(sF);p_e=n(VPe,"STRONG",{});var ECt=s(p_e);AWo=r(ECt,"mobilebert"),ECt.forEach(t),LWo=r(VPe," \u2014 "),iz=n(VPe,"A",{href:!0});var CCt=s(iz);yWo=r(CCt,"MobileBertForMultipleChoice"),CCt.forEach(t),xWo=r(VPe," (MobileBERT model)"),VPe.forEach(t),$Wo=i(ee),lF=n(ee,"LI",{});var XPe=s(lF);__e=n(XPe,"STRONG",{});var wCt=s(__e);kWo=r(wCt,"mpnet"),wCt.forEach(t),SWo=r(XPe," \u2014 "),dz=n(XPe,"A",{href:!0});var ACt=s(dz);RWo=r(ACt,"MPNetForMultipleChoice"),ACt.forEach(t),PWo=r(XPe," (MPNet model)"),XPe.forEach(t),BWo=i(ee),iF=n(ee,"LI",{});var zPe=s(iF);b_e=n(zPe,"STRONG",{});var LCt=s(b_e);IWo=r(LCt,"nezha"),LCt.forEach(t),NWo=r(zPe," \u2014 "),cz=n(zPe,"A",{href:!0});var yCt=s(cz);qWo=r(yCt,"NezhaForMultipleChoice"),yCt.forEach(t),jWo=r(zPe," (Nezha model)"),zPe.forEach(t),DWo=i(ee),dF=n(ee,"LI",{});var QPe=s(dF);v_e=n(QPe,"STRONG",{});var xCt=s(v_e);GWo=r(xCt,"nystromformer"),xCt.forEach(t),OWo=r(QPe," \u2014 "),mz=n(QPe,"A",{href:!0});var $Ct=s(mz);VWo=r($Ct,"NystromformerForMultipleChoice"),$Ct.forEach(t),XWo=r(QPe," (Nystr\xF6mformer model)"),QPe.forEach(t),zWo=i(ee),cF=n(ee,"LI",{});var WPe=s(cF);F_e=n(WPe,"STRONG",{});var kCt=s(F_e);QWo=r(kCt,"qdqbert"),kCt.forEach(t),WWo=r(WPe," \u2014 "),fz=n(WPe,"A",{href:!0});var SCt=s(fz);HWo=r(SCt,"QDQBertForMultipleChoice"),SCt.forEach(t),UWo=r(WPe," (QDQBert model)"),WPe.forEach(t),JWo=i(ee),mF=n(ee,"LI",{});var HPe=s(mF);T_e=n(HPe,"STRONG",{});var RCt=s(T_e);YWo=r(RCt,"rembert"),RCt.forEach(t),KWo=r(HPe," \u2014 "),gz=n(HPe,"A",{href:!0});var PCt=s(gz);ZWo=r(PCt,"RemBertForMultipleChoice"),PCt.forEach(t),eHo=r(HPe," (RemBERT model)"),HPe.forEach(t),oHo=i(ee),fF=n(ee,"LI",{});var UPe=s(fF);M_e=n(UPe,"STRONG",{});var BCt=s(M_e);rHo=r(BCt,"roberta"),BCt.forEach(t),tHo=r(UPe," \u2014 "),hz=n(UPe,"A",{href:!0});var ICt=s(hz);aHo=r(ICt,"RobertaForMultipleChoice"),ICt.forEach(t),nHo=r(UPe," (RoBERTa model)"),UPe.forEach(t),sHo=i(ee),gF=n(ee,"LI",{});var JPe=s(gF);E_e=n(JPe,"STRONG",{});var NCt=s(E_e);lHo=r(NCt,"roformer"),NCt.forEach(t),iHo=r(JPe," \u2014 "),uz=n(JPe,"A",{href:!0});var qCt=s(uz);dHo=r(qCt,"RoFormerForMultipleChoice"),qCt.forEach(t),cHo=r(JPe," (RoFormer model)"),JPe.forEach(t),mHo=i(ee),hF=n(ee,"LI",{});var YPe=s(hF);C_e=n(YPe,"STRONG",{});var jCt=s(C_e);fHo=r(jCt,"squeezebert"),jCt.forEach(t),gHo=r(YPe," \u2014 "),pz=n(YPe,"A",{href:!0});var DCt=s(pz);hHo=r(DCt,"SqueezeBertForMultipleChoice"),DCt.forEach(t),uHo=r(YPe," (SqueezeBERT model)"),YPe.forEach(t),pHo=i(ee),uF=n(ee,"LI",{});var KPe=s(uF);w_e=n(KPe,"STRONG",{});var GCt=s(w_e);_Ho=r(GCt,"xlm"),GCt.forEach(t),bHo=r(KPe," \u2014 "),_z=n(KPe,"A",{href:!0});var OCt=s(_z);vHo=r(OCt,"XLMForMultipleChoice"),OCt.forEach(t),FHo=r(KPe," (XLM model)"),KPe.forEach(t),THo=i(ee),pF=n(ee,"LI",{});var ZPe=s(pF);A_e=n(ZPe,"STRONG",{});var VCt=s(A_e);MHo=r(VCt,"xlm-roberta"),VCt.forEach(t),EHo=r(ZPe," \u2014 "),bz=n(ZPe,"A",{href:!0});var XCt=s(bz);CHo=r(XCt,"XLMRobertaForMultipleChoice"),XCt.forEach(t),wHo=r(ZPe," (XLM-RoBERTa model)"),ZPe.forEach(t),AHo=i(ee),_F=n(ee,"LI",{});var eBe=s(_F);L_e=n(eBe,"STRONG",{});var zCt=s(L_e);LHo=r(zCt,"xlm-roberta-xl"),zCt.forEach(t),yHo=r(eBe," \u2014 "),vz=n(eBe,"A",{href:!0});var QCt=s(vz);xHo=r(QCt,"XLMRobertaXLForMultipleChoice"),QCt.forEach(t),$Ho=r(eBe," (XLM-RoBERTa-XL model)"),eBe.forEach(t),kHo=i(ee),bF=n(ee,"LI",{});var oBe=s(bF);y_e=n(oBe,"STRONG",{});var WCt=s(y_e);SHo=r(WCt,"xlnet"),WCt.forEach(t),RHo=r(oBe," \u2014 "),Fz=n(oBe,"A",{href:!0});var HCt=s(Fz);PHo=r(HCt,"XLNetForMultipleChoice"),HCt.forEach(t),BHo=r(oBe," (XLNet model)"),oBe.forEach(t),IHo=i(ee),vF=n(ee,"LI",{});var rBe=s(vF);x_e=n(rBe,"STRONG",{});var UCt=s(x_e);NHo=r(UCt,"yoso"),UCt.forEach(t),qHo=r(rBe," \u2014 "),Tz=n(rBe,"A",{href:!0});var JCt=s(Tz);jHo=r(JCt,"YosoForMultipleChoice"),JCt.forEach(t),DHo=r(rBe," (YOSO model)"),rBe.forEach(t),ee.forEach(t),GHo=i(ga),FF=n(ga,"P",{});var tBe=s(FF);OHo=r(tBe,"The model is set in evaluation mode by default using "),$_e=n(tBe,"CODE",{});var YCt=s($_e);VHo=r(YCt,"model.eval()"),YCt.forEach(t),XHo=r(tBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k_e=n(tBe,"CODE",{});var KCt=s(k_e);zHo=r(KCt,"model.train()"),KCt.forEach(t),tBe.forEach(t),QHo=i(ga),T(TF.$$.fragment,ga),ga.forEach(t),il.forEach(t),CXe=i(m),id=n(m,"H2",{class:!0});var $Qe=s(id);MF=n($Qe,"A",{id:!0,class:!0,href:!0});var ZCt=s(MF);S_e=n(ZCt,"SPAN",{});var e3t=s(S_e);T(m8.$$.fragment,e3t),e3t.forEach(t),ZCt.forEach(t),WHo=i($Qe),R_e=n($Qe,"SPAN",{});var o3t=s(R_e);HHo=r(o3t,"AutoModelForNextSentencePrediction"),o3t.forEach(t),$Qe.forEach(t),wXe=i(m),No=n(m,"DIV",{class:!0});var dl=s(No);T(f8.$$.fragment,dl),UHo=i(dl),dd=n(dl,"P",{});var zre=s(dd);JHo=r(zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Mz=n(zre,"A",{href:!0});var r3t=s(Mz);YHo=r(r3t,"from_pretrained()"),r3t.forEach(t),KHo=r(zre," class method or the "),Ez=n(zre,"A",{href:!0});var t3t=s(Ez);ZHo=r(t3t,"from_config()"),t3t.forEach(t),eUo=r(zre,` class
method.`),zre.forEach(t),oUo=i(dl),g8=n(dl,"P",{});var kQe=s(g8);rUo=r(kQe,"This class cannot be instantiated directly using "),P_e=n(kQe,"CODE",{});var a3t=s(P_e);tUo=r(a3t,"__init__()"),a3t.forEach(t),aUo=r(kQe," (throws an error)."),kQe.forEach(t),nUo=i(dl),ut=n(dl,"DIV",{class:!0});var M7=s(ut);T(h8.$$.fragment,M7),sUo=i(M7),B_e=n(M7,"P",{});var n3t=s(B_e);lUo=r(n3t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),n3t.forEach(t),iUo=i(M7),cd=n(M7,"P",{});var Qre=s(cd);dUo=r(Qre,`Note:
Loading a model from its configuration file does `),I_e=n(Qre,"STRONG",{});var s3t=s(I_e);cUo=r(s3t,"not"),s3t.forEach(t),mUo=r(Qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cz=n(Qre,"A",{href:!0});var l3t=s(Cz);fUo=r(l3t,"from_pretrained()"),l3t.forEach(t),gUo=r(Qre," to load the model weights."),Qre.forEach(t),hUo=i(M7),T(EF.$$.fragment,M7),M7.forEach(t),uUo=i(dl),ao=n(dl,"DIV",{class:!0});var ha=s(ao);T(u8.$$.fragment,ha),pUo=i(ha),N_e=n(ha,"P",{});var i3t=s(N_e);_Uo=r(i3t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),i3t.forEach(t),bUo=i(ha),Va=n(ha,"P",{});var E7=s(Va);vUo=r(E7,"The model class to instantiate is selected based on the "),q_e=n(E7,"CODE",{});var d3t=s(q_e);FUo=r(d3t,"model_type"),d3t.forEach(t),TUo=r(E7,` property of the config object (either
passed as an argument or loaded from `),j_e=n(E7,"CODE",{});var c3t=s(j_e);MUo=r(c3t,"pretrained_model_name_or_path"),c3t.forEach(t),EUo=r(E7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D_e=n(E7,"CODE",{});var m3t=s(D_e);CUo=r(m3t,"pretrained_model_name_or_path"),m3t.forEach(t),wUo=r(E7,":"),E7.forEach(t),AUo=i(ha),qo=n(ha,"UL",{});var ua=s(qo);CF=n(ua,"LI",{});var aBe=s(CF);G_e=n(aBe,"STRONG",{});var f3t=s(G_e);LUo=r(f3t,"bert"),f3t.forEach(t),yUo=r(aBe," \u2014 "),wz=n(aBe,"A",{href:!0});var g3t=s(wz);xUo=r(g3t,"BertForNextSentencePrediction"),g3t.forEach(t),$Uo=r(aBe," (BERT model)"),aBe.forEach(t),kUo=i(ua),wF=n(ua,"LI",{});var nBe=s(wF);O_e=n(nBe,"STRONG",{});var h3t=s(O_e);SUo=r(h3t,"fnet"),h3t.forEach(t),RUo=r(nBe," \u2014 "),Az=n(nBe,"A",{href:!0});var u3t=s(Az);PUo=r(u3t,"FNetForNextSentencePrediction"),u3t.forEach(t),BUo=r(nBe," (FNet model)"),nBe.forEach(t),IUo=i(ua),AF=n(ua,"LI",{});var sBe=s(AF);V_e=n(sBe,"STRONG",{});var p3t=s(V_e);NUo=r(p3t,"megatron-bert"),p3t.forEach(t),qUo=r(sBe," \u2014 "),Lz=n(sBe,"A",{href:!0});var _3t=s(Lz);jUo=r(_3t,"MegatronBertForNextSentencePrediction"),_3t.forEach(t),DUo=r(sBe," (Megatron-BERT model)"),sBe.forEach(t),GUo=i(ua),LF=n(ua,"LI",{});var lBe=s(LF);X_e=n(lBe,"STRONG",{});var b3t=s(X_e);OUo=r(b3t,"mobilebert"),b3t.forEach(t),VUo=r(lBe," \u2014 "),yz=n(lBe,"A",{href:!0});var v3t=s(yz);XUo=r(v3t,"MobileBertForNextSentencePrediction"),v3t.forEach(t),zUo=r(lBe," (MobileBERT model)"),lBe.forEach(t),QUo=i(ua),yF=n(ua,"LI",{});var iBe=s(yF);z_e=n(iBe,"STRONG",{});var F3t=s(z_e);WUo=r(F3t,"nezha"),F3t.forEach(t),HUo=r(iBe," \u2014 "),xz=n(iBe,"A",{href:!0});var T3t=s(xz);UUo=r(T3t,"NezhaForNextSentencePrediction"),T3t.forEach(t),JUo=r(iBe," (Nezha model)"),iBe.forEach(t),YUo=i(ua),xF=n(ua,"LI",{});var dBe=s(xF);Q_e=n(dBe,"STRONG",{});var M3t=s(Q_e);KUo=r(M3t,"qdqbert"),M3t.forEach(t),ZUo=r(dBe," \u2014 "),$z=n(dBe,"A",{href:!0});var E3t=s($z);eJo=r(E3t,"QDQBertForNextSentencePrediction"),E3t.forEach(t),oJo=r(dBe," (QDQBert model)"),dBe.forEach(t),ua.forEach(t),rJo=i(ha),$F=n(ha,"P",{});var cBe=s($F);tJo=r(cBe,"The model is set in evaluation mode by default using "),W_e=n(cBe,"CODE",{});var C3t=s(W_e);aJo=r(C3t,"model.eval()"),C3t.forEach(t),nJo=r(cBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H_e=n(cBe,"CODE",{});var w3t=s(H_e);sJo=r(w3t,"model.train()"),w3t.forEach(t),cBe.forEach(t),lJo=i(ha),T(kF.$$.fragment,ha),ha.forEach(t),dl.forEach(t),AXe=i(m),md=n(m,"H2",{class:!0});var SQe=s(md);SF=n(SQe,"A",{id:!0,class:!0,href:!0});var A3t=s(SF);U_e=n(A3t,"SPAN",{});var L3t=s(U_e);T(p8.$$.fragment,L3t),L3t.forEach(t),A3t.forEach(t),iJo=i(SQe),J_e=n(SQe,"SPAN",{});var y3t=s(J_e);dJo=r(y3t,"AutoModelForTokenClassification"),y3t.forEach(t),SQe.forEach(t),LXe=i(m),jo=n(m,"DIV",{class:!0});var cl=s(jo);T(_8.$$.fragment,cl),cJo=i(cl),fd=n(cl,"P",{});var Wre=s(fd);mJo=r(Wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),kz=n(Wre,"A",{href:!0});var x3t=s(kz);fJo=r(x3t,"from_pretrained()"),x3t.forEach(t),gJo=r(Wre," class method or the "),Sz=n(Wre,"A",{href:!0});var $3t=s(Sz);hJo=r($3t,"from_config()"),$3t.forEach(t),uJo=r(Wre,` class
method.`),Wre.forEach(t),pJo=i(cl),b8=n(cl,"P",{});var RQe=s(b8);_Jo=r(RQe,"This class cannot be instantiated directly using "),Y_e=n(RQe,"CODE",{});var k3t=s(Y_e);bJo=r(k3t,"__init__()"),k3t.forEach(t),vJo=r(RQe," (throws an error)."),RQe.forEach(t),FJo=i(cl),pt=n(cl,"DIV",{class:!0});var C7=s(pt);T(v8.$$.fragment,C7),TJo=i(C7),K_e=n(C7,"P",{});var S3t=s(K_e);MJo=r(S3t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),S3t.forEach(t),EJo=i(C7),gd=n(C7,"P",{});var Hre=s(gd);CJo=r(Hre,`Note:
Loading a model from its configuration file does `),Z_e=n(Hre,"STRONG",{});var R3t=s(Z_e);wJo=r(R3t,"not"),R3t.forEach(t),AJo=r(Hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rz=n(Hre,"A",{href:!0});var P3t=s(Rz);LJo=r(P3t,"from_pretrained()"),P3t.forEach(t),yJo=r(Hre," to load the model weights."),Hre.forEach(t),xJo=i(C7),T(RF.$$.fragment,C7),C7.forEach(t),$Jo=i(cl),no=n(cl,"DIV",{class:!0});var pa=s(no);T(F8.$$.fragment,pa),kJo=i(pa),e2e=n(pa,"P",{});var B3t=s(e2e);SJo=r(B3t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),B3t.forEach(t),RJo=i(pa),Xa=n(pa,"P",{});var w7=s(Xa);PJo=r(w7,"The model class to instantiate is selected based on the "),o2e=n(w7,"CODE",{});var I3t=s(o2e);BJo=r(I3t,"model_type"),I3t.forEach(t),IJo=r(w7,` property of the config object (either
passed as an argument or loaded from `),r2e=n(w7,"CODE",{});var N3t=s(r2e);NJo=r(N3t,"pretrained_model_name_or_path"),N3t.forEach(t),qJo=r(w7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t2e=n(w7,"CODE",{});var q3t=s(t2e);jJo=r(q3t,"pretrained_model_name_or_path"),q3t.forEach(t),DJo=r(w7,":"),w7.forEach(t),GJo=i(pa),U=n(pa,"UL",{});var J=s(U);PF=n(J,"LI",{});var mBe=s(PF);a2e=n(mBe,"STRONG",{});var j3t=s(a2e);OJo=r(j3t,"albert"),j3t.forEach(t),VJo=r(mBe," \u2014 "),Pz=n(mBe,"A",{href:!0});var D3t=s(Pz);XJo=r(D3t,"AlbertForTokenClassification"),D3t.forEach(t),zJo=r(mBe," (ALBERT model)"),mBe.forEach(t),QJo=i(J),BF=n(J,"LI",{});var fBe=s(BF);n2e=n(fBe,"STRONG",{});var G3t=s(n2e);WJo=r(G3t,"bert"),G3t.forEach(t),HJo=r(fBe," \u2014 "),Bz=n(fBe,"A",{href:!0});var O3t=s(Bz);UJo=r(O3t,"BertForTokenClassification"),O3t.forEach(t),JJo=r(fBe," (BERT model)"),fBe.forEach(t),YJo=i(J),IF=n(J,"LI",{});var gBe=s(IF);s2e=n(gBe,"STRONG",{});var V3t=s(s2e);KJo=r(V3t,"big_bird"),V3t.forEach(t),ZJo=r(gBe," \u2014 "),Iz=n(gBe,"A",{href:!0});var X3t=s(Iz);eYo=r(X3t,"BigBirdForTokenClassification"),X3t.forEach(t),oYo=r(gBe," (BigBird model)"),gBe.forEach(t),rYo=i(J),NF=n(J,"LI",{});var hBe=s(NF);l2e=n(hBe,"STRONG",{});var z3t=s(l2e);tYo=r(z3t,"bloom"),z3t.forEach(t),aYo=r(hBe," \u2014 "),Nz=n(hBe,"A",{href:!0});var Q3t=s(Nz);nYo=r(Q3t,"BloomForTokenClassification"),Q3t.forEach(t),sYo=r(hBe," (BLOOM model)"),hBe.forEach(t),lYo=i(J),qF=n(J,"LI",{});var uBe=s(qF);i2e=n(uBe,"STRONG",{});var W3t=s(i2e);iYo=r(W3t,"camembert"),W3t.forEach(t),dYo=r(uBe," \u2014 "),qz=n(uBe,"A",{href:!0});var H3t=s(qz);cYo=r(H3t,"CamembertForTokenClassification"),H3t.forEach(t),mYo=r(uBe," (CamemBERT model)"),uBe.forEach(t),fYo=i(J),jF=n(J,"LI",{});var pBe=s(jF);d2e=n(pBe,"STRONG",{});var U3t=s(d2e);gYo=r(U3t,"canine"),U3t.forEach(t),hYo=r(pBe," \u2014 "),jz=n(pBe,"A",{href:!0});var J3t=s(jz);uYo=r(J3t,"CanineForTokenClassification"),J3t.forEach(t),pYo=r(pBe," (CANINE model)"),pBe.forEach(t),_Yo=i(J),DF=n(J,"LI",{});var _Be=s(DF);c2e=n(_Be,"STRONG",{});var Y3t=s(c2e);bYo=r(Y3t,"convbert"),Y3t.forEach(t),vYo=r(_Be," \u2014 "),Dz=n(_Be,"A",{href:!0});var K3t=s(Dz);FYo=r(K3t,"ConvBertForTokenClassification"),K3t.forEach(t),TYo=r(_Be," (ConvBERT model)"),_Be.forEach(t),MYo=i(J),GF=n(J,"LI",{});var bBe=s(GF);m2e=n(bBe,"STRONG",{});var Z3t=s(m2e);EYo=r(Z3t,"data2vec-text"),Z3t.forEach(t),CYo=r(bBe," \u2014 "),Gz=n(bBe,"A",{href:!0});var e5t=s(Gz);wYo=r(e5t,"Data2VecTextForTokenClassification"),e5t.forEach(t),AYo=r(bBe," (Data2VecText model)"),bBe.forEach(t),LYo=i(J),OF=n(J,"LI",{});var vBe=s(OF);f2e=n(vBe,"STRONG",{});var o5t=s(f2e);yYo=r(o5t,"deberta"),o5t.forEach(t),xYo=r(vBe," \u2014 "),Oz=n(vBe,"A",{href:!0});var r5t=s(Oz);$Yo=r(r5t,"DebertaForTokenClassification"),r5t.forEach(t),kYo=r(vBe," (DeBERTa model)"),vBe.forEach(t),SYo=i(J),VF=n(J,"LI",{});var FBe=s(VF);g2e=n(FBe,"STRONG",{});var t5t=s(g2e);RYo=r(t5t,"deberta-v2"),t5t.forEach(t),PYo=r(FBe," \u2014 "),Vz=n(FBe,"A",{href:!0});var a5t=s(Vz);BYo=r(a5t,"DebertaV2ForTokenClassification"),a5t.forEach(t),IYo=r(FBe," (DeBERTa-v2 model)"),FBe.forEach(t),NYo=i(J),XF=n(J,"LI",{});var TBe=s(XF);h2e=n(TBe,"STRONG",{});var n5t=s(h2e);qYo=r(n5t,"distilbert"),n5t.forEach(t),jYo=r(TBe," \u2014 "),Xz=n(TBe,"A",{href:!0});var s5t=s(Xz);DYo=r(s5t,"DistilBertForTokenClassification"),s5t.forEach(t),GYo=r(TBe," (DistilBERT model)"),TBe.forEach(t),OYo=i(J),zF=n(J,"LI",{});var MBe=s(zF);u2e=n(MBe,"STRONG",{});var l5t=s(u2e);VYo=r(l5t,"electra"),l5t.forEach(t),XYo=r(MBe," \u2014 "),zz=n(MBe,"A",{href:!0});var i5t=s(zz);zYo=r(i5t,"ElectraForTokenClassification"),i5t.forEach(t),QYo=r(MBe," (ELECTRA model)"),MBe.forEach(t),WYo=i(J),QF=n(J,"LI",{});var EBe=s(QF);p2e=n(EBe,"STRONG",{});var d5t=s(p2e);HYo=r(d5t,"flaubert"),d5t.forEach(t),UYo=r(EBe," \u2014 "),Qz=n(EBe,"A",{href:!0});var c5t=s(Qz);JYo=r(c5t,"FlaubertForTokenClassification"),c5t.forEach(t),YYo=r(EBe," (FlauBERT model)"),EBe.forEach(t),KYo=i(J),WF=n(J,"LI",{});var CBe=s(WF);_2e=n(CBe,"STRONG",{});var m5t=s(_2e);ZYo=r(m5t,"fnet"),m5t.forEach(t),eKo=r(CBe," \u2014 "),Wz=n(CBe,"A",{href:!0});var f5t=s(Wz);oKo=r(f5t,"FNetForTokenClassification"),f5t.forEach(t),rKo=r(CBe," (FNet model)"),CBe.forEach(t),tKo=i(J),HF=n(J,"LI",{});var wBe=s(HF);b2e=n(wBe,"STRONG",{});var g5t=s(b2e);aKo=r(g5t,"funnel"),g5t.forEach(t),nKo=r(wBe," \u2014 "),Hz=n(wBe,"A",{href:!0});var h5t=s(Hz);sKo=r(h5t,"FunnelForTokenClassification"),h5t.forEach(t),lKo=r(wBe," (Funnel Transformer model)"),wBe.forEach(t),iKo=i(J),UF=n(J,"LI",{});var ABe=s(UF);v2e=n(ABe,"STRONG",{});var u5t=s(v2e);dKo=r(u5t,"gpt2"),u5t.forEach(t),cKo=r(ABe," \u2014 "),Uz=n(ABe,"A",{href:!0});var p5t=s(Uz);mKo=r(p5t,"GPT2ForTokenClassification"),p5t.forEach(t),fKo=r(ABe," (OpenAI GPT-2 model)"),ABe.forEach(t),gKo=i(J),JF=n(J,"LI",{});var LBe=s(JF);F2e=n(LBe,"STRONG",{});var _5t=s(F2e);hKo=r(_5t,"ibert"),_5t.forEach(t),uKo=r(LBe," \u2014 "),Jz=n(LBe,"A",{href:!0});var b5t=s(Jz);pKo=r(b5t,"IBertForTokenClassification"),b5t.forEach(t),_Ko=r(LBe," (I-BERT model)"),LBe.forEach(t),bKo=i(J),YF=n(J,"LI",{});var yBe=s(YF);T2e=n(yBe,"STRONG",{});var v5t=s(T2e);vKo=r(v5t,"layoutlm"),v5t.forEach(t),FKo=r(yBe," \u2014 "),Yz=n(yBe,"A",{href:!0});var F5t=s(Yz);TKo=r(F5t,"LayoutLMForTokenClassification"),F5t.forEach(t),MKo=r(yBe," (LayoutLM model)"),yBe.forEach(t),EKo=i(J),KF=n(J,"LI",{});var xBe=s(KF);M2e=n(xBe,"STRONG",{});var T5t=s(M2e);CKo=r(T5t,"layoutlmv2"),T5t.forEach(t),wKo=r(xBe," \u2014 "),Kz=n(xBe,"A",{href:!0});var M5t=s(Kz);AKo=r(M5t,"LayoutLMv2ForTokenClassification"),M5t.forEach(t),LKo=r(xBe," (LayoutLMv2 model)"),xBe.forEach(t),yKo=i(J),ZF=n(J,"LI",{});var $Be=s(ZF);E2e=n($Be,"STRONG",{});var E5t=s(E2e);xKo=r(E5t,"layoutlmv3"),E5t.forEach(t),$Ko=r($Be," \u2014 "),Zz=n($Be,"A",{href:!0});var C5t=s(Zz);kKo=r(C5t,"LayoutLMv3ForTokenClassification"),C5t.forEach(t),SKo=r($Be," (LayoutLMv3 model)"),$Be.forEach(t),RKo=i(J),eT=n(J,"LI",{});var kBe=s(eT);C2e=n(kBe,"STRONG",{});var w5t=s(C2e);PKo=r(w5t,"longformer"),w5t.forEach(t),BKo=r(kBe," \u2014 "),eQ=n(kBe,"A",{href:!0});var A5t=s(eQ);IKo=r(A5t,"LongformerForTokenClassification"),A5t.forEach(t),NKo=r(kBe," (Longformer model)"),kBe.forEach(t),qKo=i(J),oT=n(J,"LI",{});var SBe=s(oT);w2e=n(SBe,"STRONG",{});var L5t=s(w2e);jKo=r(L5t,"megatron-bert"),L5t.forEach(t),DKo=r(SBe," \u2014 "),oQ=n(SBe,"A",{href:!0});var y5t=s(oQ);GKo=r(y5t,"MegatronBertForTokenClassification"),y5t.forEach(t),OKo=r(SBe," (Megatron-BERT model)"),SBe.forEach(t),VKo=i(J),rT=n(J,"LI",{});var RBe=s(rT);A2e=n(RBe,"STRONG",{});var x5t=s(A2e);XKo=r(x5t,"mobilebert"),x5t.forEach(t),zKo=r(RBe," \u2014 "),rQ=n(RBe,"A",{href:!0});var $5t=s(rQ);QKo=r($5t,"MobileBertForTokenClassification"),$5t.forEach(t),WKo=r(RBe," (MobileBERT model)"),RBe.forEach(t),HKo=i(J),tT=n(J,"LI",{});var PBe=s(tT);L2e=n(PBe,"STRONG",{});var k5t=s(L2e);UKo=r(k5t,"mpnet"),k5t.forEach(t),JKo=r(PBe," \u2014 "),tQ=n(PBe,"A",{href:!0});var S5t=s(tQ);YKo=r(S5t,"MPNetForTokenClassification"),S5t.forEach(t),KKo=r(PBe," (MPNet model)"),PBe.forEach(t),ZKo=i(J),aT=n(J,"LI",{});var BBe=s(aT);y2e=n(BBe,"STRONG",{});var R5t=s(y2e);eZo=r(R5t,"nezha"),R5t.forEach(t),oZo=r(BBe," \u2014 "),aQ=n(BBe,"A",{href:!0});var P5t=s(aQ);rZo=r(P5t,"NezhaForTokenClassification"),P5t.forEach(t),tZo=r(BBe," (Nezha model)"),BBe.forEach(t),aZo=i(J),nT=n(J,"LI",{});var IBe=s(nT);x2e=n(IBe,"STRONG",{});var B5t=s(x2e);nZo=r(B5t,"nystromformer"),B5t.forEach(t),sZo=r(IBe," \u2014 "),nQ=n(IBe,"A",{href:!0});var I5t=s(nQ);lZo=r(I5t,"NystromformerForTokenClassification"),I5t.forEach(t),iZo=r(IBe," (Nystr\xF6mformer model)"),IBe.forEach(t),dZo=i(J),sT=n(J,"LI",{});var NBe=s(sT);$2e=n(NBe,"STRONG",{});var N5t=s($2e);cZo=r(N5t,"qdqbert"),N5t.forEach(t),mZo=r(NBe," \u2014 "),sQ=n(NBe,"A",{href:!0});var q5t=s(sQ);fZo=r(q5t,"QDQBertForTokenClassification"),q5t.forEach(t),gZo=r(NBe," (QDQBert model)"),NBe.forEach(t),hZo=i(J),lT=n(J,"LI",{});var qBe=s(lT);k2e=n(qBe,"STRONG",{});var j5t=s(k2e);uZo=r(j5t,"rembert"),j5t.forEach(t),pZo=r(qBe," \u2014 "),lQ=n(qBe,"A",{href:!0});var D5t=s(lQ);_Zo=r(D5t,"RemBertForTokenClassification"),D5t.forEach(t),bZo=r(qBe," (RemBERT model)"),qBe.forEach(t),vZo=i(J),iT=n(J,"LI",{});var jBe=s(iT);S2e=n(jBe,"STRONG",{});var G5t=s(S2e);FZo=r(G5t,"roberta"),G5t.forEach(t),TZo=r(jBe," \u2014 "),iQ=n(jBe,"A",{href:!0});var O5t=s(iQ);MZo=r(O5t,"RobertaForTokenClassification"),O5t.forEach(t),EZo=r(jBe," (RoBERTa model)"),jBe.forEach(t),CZo=i(J),dT=n(J,"LI",{});var DBe=s(dT);R2e=n(DBe,"STRONG",{});var V5t=s(R2e);wZo=r(V5t,"roformer"),V5t.forEach(t),AZo=r(DBe," \u2014 "),dQ=n(DBe,"A",{href:!0});var X5t=s(dQ);LZo=r(X5t,"RoFormerForTokenClassification"),X5t.forEach(t),yZo=r(DBe," (RoFormer model)"),DBe.forEach(t),xZo=i(J),cT=n(J,"LI",{});var GBe=s(cT);P2e=n(GBe,"STRONG",{});var z5t=s(P2e);$Zo=r(z5t,"squeezebert"),z5t.forEach(t),kZo=r(GBe," \u2014 "),cQ=n(GBe,"A",{href:!0});var Q5t=s(cQ);SZo=r(Q5t,"SqueezeBertForTokenClassification"),Q5t.forEach(t),RZo=r(GBe," (SqueezeBERT model)"),GBe.forEach(t),PZo=i(J),mT=n(J,"LI",{});var OBe=s(mT);B2e=n(OBe,"STRONG",{});var W5t=s(B2e);BZo=r(W5t,"xlm"),W5t.forEach(t),IZo=r(OBe," \u2014 "),mQ=n(OBe,"A",{href:!0});var H5t=s(mQ);NZo=r(H5t,"XLMForTokenClassification"),H5t.forEach(t),qZo=r(OBe," (XLM model)"),OBe.forEach(t),jZo=i(J),fT=n(J,"LI",{});var VBe=s(fT);I2e=n(VBe,"STRONG",{});var U5t=s(I2e);DZo=r(U5t,"xlm-roberta"),U5t.forEach(t),GZo=r(VBe," \u2014 "),fQ=n(VBe,"A",{href:!0});var J5t=s(fQ);OZo=r(J5t,"XLMRobertaForTokenClassification"),J5t.forEach(t),VZo=r(VBe," (XLM-RoBERTa model)"),VBe.forEach(t),XZo=i(J),gT=n(J,"LI",{});var XBe=s(gT);N2e=n(XBe,"STRONG",{});var Y5t=s(N2e);zZo=r(Y5t,"xlm-roberta-xl"),Y5t.forEach(t),QZo=r(XBe," \u2014 "),gQ=n(XBe,"A",{href:!0});var K5t=s(gQ);WZo=r(K5t,"XLMRobertaXLForTokenClassification"),K5t.forEach(t),HZo=r(XBe," (XLM-RoBERTa-XL model)"),XBe.forEach(t),UZo=i(J),hT=n(J,"LI",{});var zBe=s(hT);q2e=n(zBe,"STRONG",{});var Z5t=s(q2e);JZo=r(Z5t,"xlnet"),Z5t.forEach(t),YZo=r(zBe," \u2014 "),hQ=n(zBe,"A",{href:!0});var e0t=s(hQ);KZo=r(e0t,"XLNetForTokenClassification"),e0t.forEach(t),ZZo=r(zBe," (XLNet model)"),zBe.forEach(t),eer=i(J),uT=n(J,"LI",{});var QBe=s(uT);j2e=n(QBe,"STRONG",{});var o0t=s(j2e);oer=r(o0t,"yoso"),o0t.forEach(t),rer=r(QBe," \u2014 "),uQ=n(QBe,"A",{href:!0});var r0t=s(uQ);ter=r(r0t,"YosoForTokenClassification"),r0t.forEach(t),aer=r(QBe," (YOSO model)"),QBe.forEach(t),J.forEach(t),ner=i(pa),pT=n(pa,"P",{});var WBe=s(pT);ser=r(WBe,"The model is set in evaluation mode by default using "),D2e=n(WBe,"CODE",{});var t0t=s(D2e);ler=r(t0t,"model.eval()"),t0t.forEach(t),ier=r(WBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G2e=n(WBe,"CODE",{});var a0t=s(G2e);der=r(a0t,"model.train()"),a0t.forEach(t),WBe.forEach(t),cer=i(pa),T(_T.$$.fragment,pa),pa.forEach(t),cl.forEach(t),yXe=i(m),hd=n(m,"H2",{class:!0});var PQe=s(hd);bT=n(PQe,"A",{id:!0,class:!0,href:!0});var n0t=s(bT);O2e=n(n0t,"SPAN",{});var s0t=s(O2e);T(T8.$$.fragment,s0t),s0t.forEach(t),n0t.forEach(t),mer=i(PQe),V2e=n(PQe,"SPAN",{});var l0t=s(V2e);fer=r(l0t,"AutoModelForQuestionAnswering"),l0t.forEach(t),PQe.forEach(t),xXe=i(m),Do=n(m,"DIV",{class:!0});var ml=s(Do);T(M8.$$.fragment,ml),ger=i(ml),ud=n(ml,"P",{});var Ure=s(ud);her=r(Ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),pQ=n(Ure,"A",{href:!0});var i0t=s(pQ);uer=r(i0t,"from_pretrained()"),i0t.forEach(t),per=r(Ure," class method or the "),_Q=n(Ure,"A",{href:!0});var d0t=s(_Q);_er=r(d0t,"from_config()"),d0t.forEach(t),ber=r(Ure,` class
method.`),Ure.forEach(t),ver=i(ml),E8=n(ml,"P",{});var BQe=s(E8);Fer=r(BQe,"This class cannot be instantiated directly using "),X2e=n(BQe,"CODE",{});var c0t=s(X2e);Ter=r(c0t,"__init__()"),c0t.forEach(t),Mer=r(BQe," (throws an error)."),BQe.forEach(t),Eer=i(ml),_t=n(ml,"DIV",{class:!0});var A7=s(_t);T(C8.$$.fragment,A7),Cer=i(A7),z2e=n(A7,"P",{});var m0t=s(z2e);wer=r(m0t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),m0t.forEach(t),Aer=i(A7),pd=n(A7,"P",{});var Jre=s(pd);Ler=r(Jre,`Note:
Loading a model from its configuration file does `),Q2e=n(Jre,"STRONG",{});var f0t=s(Q2e);yer=r(f0t,"not"),f0t.forEach(t),xer=r(Jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=n(Jre,"A",{href:!0});var g0t=s(bQ);$er=r(g0t,"from_pretrained()"),g0t.forEach(t),ker=r(Jre," to load the model weights."),Jre.forEach(t),Ser=i(A7),T(vT.$$.fragment,A7),A7.forEach(t),Rer=i(ml),so=n(ml,"DIV",{class:!0});var _a=s(so);T(w8.$$.fragment,_a),Per=i(_a),W2e=n(_a,"P",{});var h0t=s(W2e);Ber=r(h0t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),h0t.forEach(t),Ier=i(_a),za=n(_a,"P",{});var L7=s(za);Ner=r(L7,"The model class to instantiate is selected based on the "),H2e=n(L7,"CODE",{});var u0t=s(H2e);qer=r(u0t,"model_type"),u0t.forEach(t),jer=r(L7,` property of the config object (either
passed as an argument or loaded from `),U2e=n(L7,"CODE",{});var p0t=s(U2e);Der=r(p0t,"pretrained_model_name_or_path"),p0t.forEach(t),Ger=r(L7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J2e=n(L7,"CODE",{});var _0t=s(J2e);Oer=r(_0t,"pretrained_model_name_or_path"),_0t.forEach(t),Ver=r(L7,":"),L7.forEach(t),Xer=i(_a),V=n(_a,"UL",{});var X=s(V);FT=n(X,"LI",{});var HBe=s(FT);Y2e=n(HBe,"STRONG",{});var b0t=s(Y2e);zer=r(b0t,"albert"),b0t.forEach(t),Qer=r(HBe," \u2014 "),vQ=n(HBe,"A",{href:!0});var v0t=s(vQ);Wer=r(v0t,"AlbertForQuestionAnswering"),v0t.forEach(t),Her=r(HBe," (ALBERT model)"),HBe.forEach(t),Uer=i(X),TT=n(X,"LI",{});var UBe=s(TT);K2e=n(UBe,"STRONG",{});var F0t=s(K2e);Jer=r(F0t,"bart"),F0t.forEach(t),Yer=r(UBe," \u2014 "),FQ=n(UBe,"A",{href:!0});var T0t=s(FQ);Ker=r(T0t,"BartForQuestionAnswering"),T0t.forEach(t),Zer=r(UBe," (BART model)"),UBe.forEach(t),eor=i(X),MT=n(X,"LI",{});var JBe=s(MT);Z2e=n(JBe,"STRONG",{});var M0t=s(Z2e);oor=r(M0t,"bert"),M0t.forEach(t),ror=r(JBe," \u2014 "),TQ=n(JBe,"A",{href:!0});var E0t=s(TQ);tor=r(E0t,"BertForQuestionAnswering"),E0t.forEach(t),aor=r(JBe," (BERT model)"),JBe.forEach(t),nor=i(X),ET=n(X,"LI",{});var YBe=s(ET);ebe=n(YBe,"STRONG",{});var C0t=s(ebe);sor=r(C0t,"big_bird"),C0t.forEach(t),lor=r(YBe," \u2014 "),MQ=n(YBe,"A",{href:!0});var w0t=s(MQ);ior=r(w0t,"BigBirdForQuestionAnswering"),w0t.forEach(t),dor=r(YBe," (BigBird model)"),YBe.forEach(t),cor=i(X),CT=n(X,"LI",{});var KBe=s(CT);obe=n(KBe,"STRONG",{});var A0t=s(obe);mor=r(A0t,"bigbird_pegasus"),A0t.forEach(t),gor=r(KBe," \u2014 "),EQ=n(KBe,"A",{href:!0});var L0t=s(EQ);hor=r(L0t,"BigBirdPegasusForQuestionAnswering"),L0t.forEach(t),uor=r(KBe," (BigBird-Pegasus model)"),KBe.forEach(t),por=i(X),wT=n(X,"LI",{});var ZBe=s(wT);rbe=n(ZBe,"STRONG",{});var y0t=s(rbe);_or=r(y0t,"camembert"),y0t.forEach(t),bor=r(ZBe," \u2014 "),CQ=n(ZBe,"A",{href:!0});var x0t=s(CQ);vor=r(x0t,"CamembertForQuestionAnswering"),x0t.forEach(t),For=r(ZBe," (CamemBERT model)"),ZBe.forEach(t),Tor=i(X),AT=n(X,"LI",{});var eIe=s(AT);tbe=n(eIe,"STRONG",{});var $0t=s(tbe);Mor=r($0t,"canine"),$0t.forEach(t),Eor=r(eIe," \u2014 "),wQ=n(eIe,"A",{href:!0});var k0t=s(wQ);Cor=r(k0t,"CanineForQuestionAnswering"),k0t.forEach(t),wor=r(eIe," (CANINE model)"),eIe.forEach(t),Aor=i(X),LT=n(X,"LI",{});var oIe=s(LT);abe=n(oIe,"STRONG",{});var S0t=s(abe);Lor=r(S0t,"convbert"),S0t.forEach(t),yor=r(oIe," \u2014 "),AQ=n(oIe,"A",{href:!0});var R0t=s(AQ);xor=r(R0t,"ConvBertForQuestionAnswering"),R0t.forEach(t),$or=r(oIe," (ConvBERT model)"),oIe.forEach(t),kor=i(X),yT=n(X,"LI",{});var rIe=s(yT);nbe=n(rIe,"STRONG",{});var P0t=s(nbe);Sor=r(P0t,"data2vec-text"),P0t.forEach(t),Ror=r(rIe," \u2014 "),LQ=n(rIe,"A",{href:!0});var B0t=s(LQ);Por=r(B0t,"Data2VecTextForQuestionAnswering"),B0t.forEach(t),Bor=r(rIe," (Data2VecText model)"),rIe.forEach(t),Ior=i(X),xT=n(X,"LI",{});var tIe=s(xT);sbe=n(tIe,"STRONG",{});var I0t=s(sbe);Nor=r(I0t,"deberta"),I0t.forEach(t),qor=r(tIe," \u2014 "),yQ=n(tIe,"A",{href:!0});var N0t=s(yQ);jor=r(N0t,"DebertaForQuestionAnswering"),N0t.forEach(t),Dor=r(tIe," (DeBERTa model)"),tIe.forEach(t),Gor=i(X),$T=n(X,"LI",{});var aIe=s($T);lbe=n(aIe,"STRONG",{});var q0t=s(lbe);Oor=r(q0t,"deberta-v2"),q0t.forEach(t),Vor=r(aIe," \u2014 "),xQ=n(aIe,"A",{href:!0});var j0t=s(xQ);Xor=r(j0t,"DebertaV2ForQuestionAnswering"),j0t.forEach(t),zor=r(aIe," (DeBERTa-v2 model)"),aIe.forEach(t),Qor=i(X),kT=n(X,"LI",{});var nIe=s(kT);ibe=n(nIe,"STRONG",{});var D0t=s(ibe);Wor=r(D0t,"distilbert"),D0t.forEach(t),Hor=r(nIe," \u2014 "),$Q=n(nIe,"A",{href:!0});var G0t=s($Q);Uor=r(G0t,"DistilBertForQuestionAnswering"),G0t.forEach(t),Jor=r(nIe," (DistilBERT model)"),nIe.forEach(t),Yor=i(X),ST=n(X,"LI",{});var sIe=s(ST);dbe=n(sIe,"STRONG",{});var O0t=s(dbe);Kor=r(O0t,"electra"),O0t.forEach(t),Zor=r(sIe," \u2014 "),kQ=n(sIe,"A",{href:!0});var V0t=s(kQ);err=r(V0t,"ElectraForQuestionAnswering"),V0t.forEach(t),orr=r(sIe," (ELECTRA model)"),sIe.forEach(t),rrr=i(X),RT=n(X,"LI",{});var lIe=s(RT);cbe=n(lIe,"STRONG",{});var X0t=s(cbe);trr=r(X0t,"flaubert"),X0t.forEach(t),arr=r(lIe," \u2014 "),SQ=n(lIe,"A",{href:!0});var z0t=s(SQ);nrr=r(z0t,"FlaubertForQuestionAnsweringSimple"),z0t.forEach(t),srr=r(lIe," (FlauBERT model)"),lIe.forEach(t),lrr=i(X),PT=n(X,"LI",{});var iIe=s(PT);mbe=n(iIe,"STRONG",{});var Q0t=s(mbe);irr=r(Q0t,"fnet"),Q0t.forEach(t),drr=r(iIe," \u2014 "),RQ=n(iIe,"A",{href:!0});var W0t=s(RQ);crr=r(W0t,"FNetForQuestionAnswering"),W0t.forEach(t),mrr=r(iIe," (FNet model)"),iIe.forEach(t),frr=i(X),BT=n(X,"LI",{});var dIe=s(BT);fbe=n(dIe,"STRONG",{});var H0t=s(fbe);grr=r(H0t,"funnel"),H0t.forEach(t),hrr=r(dIe," \u2014 "),PQ=n(dIe,"A",{href:!0});var U0t=s(PQ);urr=r(U0t,"FunnelForQuestionAnswering"),U0t.forEach(t),prr=r(dIe," (Funnel Transformer model)"),dIe.forEach(t),_rr=i(X),IT=n(X,"LI",{});var cIe=s(IT);gbe=n(cIe,"STRONG",{});var J0t=s(gbe);brr=r(J0t,"gptj"),J0t.forEach(t),vrr=r(cIe," \u2014 "),BQ=n(cIe,"A",{href:!0});var Y0t=s(BQ);Frr=r(Y0t,"GPTJForQuestionAnswering"),Y0t.forEach(t),Trr=r(cIe," (GPT-J model)"),cIe.forEach(t),Mrr=i(X),NT=n(X,"LI",{});var mIe=s(NT);hbe=n(mIe,"STRONG",{});var K0t=s(hbe);Err=r(K0t,"ibert"),K0t.forEach(t),Crr=r(mIe," \u2014 "),IQ=n(mIe,"A",{href:!0});var Z0t=s(IQ);wrr=r(Z0t,"IBertForQuestionAnswering"),Z0t.forEach(t),Arr=r(mIe," (I-BERT model)"),mIe.forEach(t),Lrr=i(X),qT=n(X,"LI",{});var fIe=s(qT);ube=n(fIe,"STRONG",{});var ewt=s(ube);yrr=r(ewt,"layoutlmv2"),ewt.forEach(t),xrr=r(fIe," \u2014 "),NQ=n(fIe,"A",{href:!0});var owt=s(NQ);$rr=r(owt,"LayoutLMv2ForQuestionAnswering"),owt.forEach(t),krr=r(fIe," (LayoutLMv2 model)"),fIe.forEach(t),Srr=i(X),jT=n(X,"LI",{});var gIe=s(jT);pbe=n(gIe,"STRONG",{});var rwt=s(pbe);Rrr=r(rwt,"layoutlmv3"),rwt.forEach(t),Prr=r(gIe," \u2014 "),qQ=n(gIe,"A",{href:!0});var twt=s(qQ);Brr=r(twt,"LayoutLMv3ForQuestionAnswering"),twt.forEach(t),Irr=r(gIe," (LayoutLMv3 model)"),gIe.forEach(t),Nrr=i(X),DT=n(X,"LI",{});var hIe=s(DT);_be=n(hIe,"STRONG",{});var awt=s(_be);qrr=r(awt,"led"),awt.forEach(t),jrr=r(hIe," \u2014 "),jQ=n(hIe,"A",{href:!0});var nwt=s(jQ);Drr=r(nwt,"LEDForQuestionAnswering"),nwt.forEach(t),Grr=r(hIe," (LED model)"),hIe.forEach(t),Orr=i(X),GT=n(X,"LI",{});var uIe=s(GT);bbe=n(uIe,"STRONG",{});var swt=s(bbe);Vrr=r(swt,"longformer"),swt.forEach(t),Xrr=r(uIe," \u2014 "),DQ=n(uIe,"A",{href:!0});var lwt=s(DQ);zrr=r(lwt,"LongformerForQuestionAnswering"),lwt.forEach(t),Qrr=r(uIe," (Longformer model)"),uIe.forEach(t),Wrr=i(X),OT=n(X,"LI",{});var pIe=s(OT);vbe=n(pIe,"STRONG",{});var iwt=s(vbe);Hrr=r(iwt,"lxmert"),iwt.forEach(t),Urr=r(pIe," \u2014 "),GQ=n(pIe,"A",{href:!0});var dwt=s(GQ);Jrr=r(dwt,"LxmertForQuestionAnswering"),dwt.forEach(t),Yrr=r(pIe," (LXMERT model)"),pIe.forEach(t),Krr=i(X),VT=n(X,"LI",{});var _Ie=s(VT);Fbe=n(_Ie,"STRONG",{});var cwt=s(Fbe);Zrr=r(cwt,"mbart"),cwt.forEach(t),etr=r(_Ie," \u2014 "),OQ=n(_Ie,"A",{href:!0});var mwt=s(OQ);otr=r(mwt,"MBartForQuestionAnswering"),mwt.forEach(t),rtr=r(_Ie," (mBART model)"),_Ie.forEach(t),ttr=i(X),XT=n(X,"LI",{});var bIe=s(XT);Tbe=n(bIe,"STRONG",{});var fwt=s(Tbe);atr=r(fwt,"megatron-bert"),fwt.forEach(t),ntr=r(bIe," \u2014 "),VQ=n(bIe,"A",{href:!0});var gwt=s(VQ);str=r(gwt,"MegatronBertForQuestionAnswering"),gwt.forEach(t),ltr=r(bIe," (Megatron-BERT model)"),bIe.forEach(t),itr=i(X),zT=n(X,"LI",{});var vIe=s(zT);Mbe=n(vIe,"STRONG",{});var hwt=s(Mbe);dtr=r(hwt,"mobilebert"),hwt.forEach(t),ctr=r(vIe," \u2014 "),XQ=n(vIe,"A",{href:!0});var uwt=s(XQ);mtr=r(uwt,"MobileBertForQuestionAnswering"),uwt.forEach(t),ftr=r(vIe," (MobileBERT model)"),vIe.forEach(t),gtr=i(X),QT=n(X,"LI",{});var FIe=s(QT);Ebe=n(FIe,"STRONG",{});var pwt=s(Ebe);htr=r(pwt,"mpnet"),pwt.forEach(t),utr=r(FIe," \u2014 "),zQ=n(FIe,"A",{href:!0});var _wt=s(zQ);ptr=r(_wt,"MPNetForQuestionAnswering"),_wt.forEach(t),_tr=r(FIe," (MPNet model)"),FIe.forEach(t),btr=i(X),WT=n(X,"LI",{});var TIe=s(WT);Cbe=n(TIe,"STRONG",{});var bwt=s(Cbe);vtr=r(bwt,"mvp"),bwt.forEach(t),Ftr=r(TIe," \u2014 "),QQ=n(TIe,"A",{href:!0});var vwt=s(QQ);Ttr=r(vwt,"MvpForQuestionAnswering"),vwt.forEach(t),Mtr=r(TIe," (MVP model)"),TIe.forEach(t),Etr=i(X),HT=n(X,"LI",{});var MIe=s(HT);wbe=n(MIe,"STRONG",{});var Fwt=s(wbe);Ctr=r(Fwt,"nezha"),Fwt.forEach(t),wtr=r(MIe," \u2014 "),WQ=n(MIe,"A",{href:!0});var Twt=s(WQ);Atr=r(Twt,"NezhaForQuestionAnswering"),Twt.forEach(t),Ltr=r(MIe," (Nezha model)"),MIe.forEach(t),ytr=i(X),UT=n(X,"LI",{});var EIe=s(UT);Abe=n(EIe,"STRONG",{});var Mwt=s(Abe);xtr=r(Mwt,"nystromformer"),Mwt.forEach(t),$tr=r(EIe," \u2014 "),HQ=n(EIe,"A",{href:!0});var Ewt=s(HQ);ktr=r(Ewt,"NystromformerForQuestionAnswering"),Ewt.forEach(t),Str=r(EIe," (Nystr\xF6mformer model)"),EIe.forEach(t),Rtr=i(X),JT=n(X,"LI",{});var CIe=s(JT);Lbe=n(CIe,"STRONG",{});var Cwt=s(Lbe);Ptr=r(Cwt,"qdqbert"),Cwt.forEach(t),Btr=r(CIe," \u2014 "),UQ=n(CIe,"A",{href:!0});var wwt=s(UQ);Itr=r(wwt,"QDQBertForQuestionAnswering"),wwt.forEach(t),Ntr=r(CIe," (QDQBert model)"),CIe.forEach(t),qtr=i(X),YT=n(X,"LI",{});var wIe=s(YT);ybe=n(wIe,"STRONG",{});var Awt=s(ybe);jtr=r(Awt,"reformer"),Awt.forEach(t),Dtr=r(wIe," \u2014 "),JQ=n(wIe,"A",{href:!0});var Lwt=s(JQ);Gtr=r(Lwt,"ReformerForQuestionAnswering"),Lwt.forEach(t),Otr=r(wIe," (Reformer model)"),wIe.forEach(t),Vtr=i(X),KT=n(X,"LI",{});var AIe=s(KT);xbe=n(AIe,"STRONG",{});var ywt=s(xbe);Xtr=r(ywt,"rembert"),ywt.forEach(t),ztr=r(AIe," \u2014 "),YQ=n(AIe,"A",{href:!0});var xwt=s(YQ);Qtr=r(xwt,"RemBertForQuestionAnswering"),xwt.forEach(t),Wtr=r(AIe," (RemBERT model)"),AIe.forEach(t),Htr=i(X),ZT=n(X,"LI",{});var LIe=s(ZT);$be=n(LIe,"STRONG",{});var $wt=s($be);Utr=r($wt,"roberta"),$wt.forEach(t),Jtr=r(LIe," \u2014 "),KQ=n(LIe,"A",{href:!0});var kwt=s(KQ);Ytr=r(kwt,"RobertaForQuestionAnswering"),kwt.forEach(t),Ktr=r(LIe," (RoBERTa model)"),LIe.forEach(t),Ztr=i(X),eM=n(X,"LI",{});var yIe=s(eM);kbe=n(yIe,"STRONG",{});var Swt=s(kbe);ear=r(Swt,"roformer"),Swt.forEach(t),oar=r(yIe," \u2014 "),ZQ=n(yIe,"A",{href:!0});var Rwt=s(ZQ);rar=r(Rwt,"RoFormerForQuestionAnswering"),Rwt.forEach(t),tar=r(yIe," (RoFormer model)"),yIe.forEach(t),aar=i(X),oM=n(X,"LI",{});var xIe=s(oM);Sbe=n(xIe,"STRONG",{});var Pwt=s(Sbe);nar=r(Pwt,"splinter"),Pwt.forEach(t),sar=r(xIe," \u2014 "),eW=n(xIe,"A",{href:!0});var Bwt=s(eW);lar=r(Bwt,"SplinterForQuestionAnswering"),Bwt.forEach(t),iar=r(xIe," (Splinter model)"),xIe.forEach(t),dar=i(X),rM=n(X,"LI",{});var $Ie=s(rM);Rbe=n($Ie,"STRONG",{});var Iwt=s(Rbe);car=r(Iwt,"squeezebert"),Iwt.forEach(t),mar=r($Ie," \u2014 "),oW=n($Ie,"A",{href:!0});var Nwt=s(oW);far=r(Nwt,"SqueezeBertForQuestionAnswering"),Nwt.forEach(t),gar=r($Ie," (SqueezeBERT model)"),$Ie.forEach(t),har=i(X),tM=n(X,"LI",{});var kIe=s(tM);Pbe=n(kIe,"STRONG",{});var qwt=s(Pbe);uar=r(qwt,"xlm"),qwt.forEach(t),par=r(kIe," \u2014 "),rW=n(kIe,"A",{href:!0});var jwt=s(rW);_ar=r(jwt,"XLMForQuestionAnsweringSimple"),jwt.forEach(t),bar=r(kIe," (XLM model)"),kIe.forEach(t),Far=i(X),aM=n(X,"LI",{});var SIe=s(aM);Bbe=n(SIe,"STRONG",{});var Dwt=s(Bbe);Tar=r(Dwt,"xlm-roberta"),Dwt.forEach(t),Mar=r(SIe," \u2014 "),tW=n(SIe,"A",{href:!0});var Gwt=s(tW);Ear=r(Gwt,"XLMRobertaForQuestionAnswering"),Gwt.forEach(t),Car=r(SIe," (XLM-RoBERTa model)"),SIe.forEach(t),war=i(X),nM=n(X,"LI",{});var RIe=s(nM);Ibe=n(RIe,"STRONG",{});var Owt=s(Ibe);Aar=r(Owt,"xlm-roberta-xl"),Owt.forEach(t),Lar=r(RIe," \u2014 "),aW=n(RIe,"A",{href:!0});var Vwt=s(aW);yar=r(Vwt,"XLMRobertaXLForQuestionAnswering"),Vwt.forEach(t),xar=r(RIe," (XLM-RoBERTa-XL model)"),RIe.forEach(t),$ar=i(X),sM=n(X,"LI",{});var PIe=s(sM);Nbe=n(PIe,"STRONG",{});var Xwt=s(Nbe);kar=r(Xwt,"xlnet"),Xwt.forEach(t),Sar=r(PIe," \u2014 "),nW=n(PIe,"A",{href:!0});var zwt=s(nW);Rar=r(zwt,"XLNetForQuestionAnsweringSimple"),zwt.forEach(t),Par=r(PIe," (XLNet model)"),PIe.forEach(t),Bar=i(X),lM=n(X,"LI",{});var BIe=s(lM);qbe=n(BIe,"STRONG",{});var Qwt=s(qbe);Iar=r(Qwt,"yoso"),Qwt.forEach(t),Nar=r(BIe," \u2014 "),sW=n(BIe,"A",{href:!0});var Wwt=s(sW);qar=r(Wwt,"YosoForQuestionAnswering"),Wwt.forEach(t),jar=r(BIe," (YOSO model)"),BIe.forEach(t),X.forEach(t),Dar=i(_a),iM=n(_a,"P",{});var IIe=s(iM);Gar=r(IIe,"The model is set in evaluation mode by default using "),jbe=n(IIe,"CODE",{});var Hwt=s(jbe);Oar=r(Hwt,"model.eval()"),Hwt.forEach(t),Var=r(IIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dbe=n(IIe,"CODE",{});var Uwt=s(Dbe);Xar=r(Uwt,"model.train()"),Uwt.forEach(t),IIe.forEach(t),zar=i(_a),T(dM.$$.fragment,_a),_a.forEach(t),ml.forEach(t),$Xe=i(m),_d=n(m,"H2",{class:!0});var IQe=s(_d);cM=n(IQe,"A",{id:!0,class:!0,href:!0});var Jwt=s(cM);Gbe=n(Jwt,"SPAN",{});var Ywt=s(Gbe);T(A8.$$.fragment,Ywt),Ywt.forEach(t),Jwt.forEach(t),Qar=i(IQe),Obe=n(IQe,"SPAN",{});var Kwt=s(Obe);War=r(Kwt,"AutoModelForTableQuestionAnswering"),Kwt.forEach(t),IQe.forEach(t),kXe=i(m),Go=n(m,"DIV",{class:!0});var fl=s(Go);T(L8.$$.fragment,fl),Har=i(fl),bd=n(fl,"P",{});var Yre=s(bd);Uar=r(Yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),lW=n(Yre,"A",{href:!0});var Zwt=s(lW);Jar=r(Zwt,"from_pretrained()"),Zwt.forEach(t),Yar=r(Yre," class method or the "),iW=n(Yre,"A",{href:!0});var eAt=s(iW);Kar=r(eAt,"from_config()"),eAt.forEach(t),Zar=r(Yre,` class
method.`),Yre.forEach(t),enr=i(fl),y8=n(fl,"P",{});var NQe=s(y8);onr=r(NQe,"This class cannot be instantiated directly using "),Vbe=n(NQe,"CODE",{});var oAt=s(Vbe);rnr=r(oAt,"__init__()"),oAt.forEach(t),tnr=r(NQe," (throws an error)."),NQe.forEach(t),anr=i(fl),bt=n(fl,"DIV",{class:!0});var y7=s(bt);T(x8.$$.fragment,y7),nnr=i(y7),Xbe=n(y7,"P",{});var rAt=s(Xbe);snr=r(rAt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),rAt.forEach(t),lnr=i(y7),vd=n(y7,"P",{});var Kre=s(vd);inr=r(Kre,`Note:
Loading a model from its configuration file does `),zbe=n(Kre,"STRONG",{});var tAt=s(zbe);dnr=r(tAt,"not"),tAt.forEach(t),cnr=r(Kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=n(Kre,"A",{href:!0});var aAt=s(dW);mnr=r(aAt,"from_pretrained()"),aAt.forEach(t),fnr=r(Kre," to load the model weights."),Kre.forEach(t),gnr=i(y7),T(mM.$$.fragment,y7),y7.forEach(t),hnr=i(fl),lo=n(fl,"DIV",{class:!0});var ba=s(lo);T($8.$$.fragment,ba),unr=i(ba),Qbe=n(ba,"P",{});var nAt=s(Qbe);pnr=r(nAt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),nAt.forEach(t),_nr=i(ba),Qa=n(ba,"P",{});var x7=s(Qa);bnr=r(x7,"The model class to instantiate is selected based on the "),Wbe=n(x7,"CODE",{});var sAt=s(Wbe);vnr=r(sAt,"model_type"),sAt.forEach(t),Fnr=r(x7,` property of the config object (either
passed as an argument or loaded from `),Hbe=n(x7,"CODE",{});var lAt=s(Hbe);Tnr=r(lAt,"pretrained_model_name_or_path"),lAt.forEach(t),Mnr=r(x7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ube=n(x7,"CODE",{});var iAt=s(Ube);Enr=r(iAt,"pretrained_model_name_or_path"),iAt.forEach(t),Cnr=r(x7,":"),x7.forEach(t),wnr=i(ba),Jbe=n(ba,"UL",{});var dAt=s(Jbe);fM=n(dAt,"LI",{});var NIe=s(fM);Ybe=n(NIe,"STRONG",{});var cAt=s(Ybe);Anr=r(cAt,"tapas"),cAt.forEach(t),Lnr=r(NIe," \u2014 "),cW=n(NIe,"A",{href:!0});var mAt=s(cW);ynr=r(mAt,"TapasForQuestionAnswering"),mAt.forEach(t),xnr=r(NIe," (TAPAS model)"),NIe.forEach(t),dAt.forEach(t),$nr=i(ba),gM=n(ba,"P",{});var qIe=s(gM);knr=r(qIe,"The model is set in evaluation mode by default using "),Kbe=n(qIe,"CODE",{});var fAt=s(Kbe);Snr=r(fAt,"model.eval()"),fAt.forEach(t),Rnr=r(qIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zbe=n(qIe,"CODE",{});var gAt=s(Zbe);Pnr=r(gAt,"model.train()"),gAt.forEach(t),qIe.forEach(t),Bnr=i(ba),T(hM.$$.fragment,ba),ba.forEach(t),fl.forEach(t),SXe=i(m),Fd=n(m,"H2",{class:!0});var qQe=s(Fd);uM=n(qQe,"A",{id:!0,class:!0,href:!0});var hAt=s(uM);eve=n(hAt,"SPAN",{});var uAt=s(eve);T(k8.$$.fragment,uAt),uAt.forEach(t),hAt.forEach(t),Inr=i(qQe),ove=n(qQe,"SPAN",{});var pAt=s(ove);Nnr=r(pAt,"AutoModelForImageClassification"),pAt.forEach(t),qQe.forEach(t),RXe=i(m),Oo=n(m,"DIV",{class:!0});var gl=s(Oo);T(S8.$$.fragment,gl),qnr=i(gl),Td=n(gl,"P",{});var Zre=s(Td);jnr=r(Zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),mW=n(Zre,"A",{href:!0});var _At=s(mW);Dnr=r(_At,"from_pretrained()"),_At.forEach(t),Gnr=r(Zre," class method or the "),fW=n(Zre,"A",{href:!0});var bAt=s(fW);Onr=r(bAt,"from_config()"),bAt.forEach(t),Vnr=r(Zre,` class
method.`),Zre.forEach(t),Xnr=i(gl),R8=n(gl,"P",{});var jQe=s(R8);znr=r(jQe,"This class cannot be instantiated directly using "),rve=n(jQe,"CODE",{});var vAt=s(rve);Qnr=r(vAt,"__init__()"),vAt.forEach(t),Wnr=r(jQe," (throws an error)."),jQe.forEach(t),Hnr=i(gl),vt=n(gl,"DIV",{class:!0});var $7=s(vt);T(P8.$$.fragment,$7),Unr=i($7),tve=n($7,"P",{});var FAt=s(tve);Jnr=r(FAt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),FAt.forEach(t),Ynr=i($7),Md=n($7,"P",{});var ete=s(Md);Knr=r(ete,`Note:
Loading a model from its configuration file does `),ave=n(ete,"STRONG",{});var TAt=s(ave);Znr=r(TAt,"not"),TAt.forEach(t),esr=r(ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=n(ete,"A",{href:!0});var MAt=s(gW);osr=r(MAt,"from_pretrained()"),MAt.forEach(t),rsr=r(ete," to load the model weights."),ete.forEach(t),tsr=i($7),T(pM.$$.fragment,$7),$7.forEach(t),asr=i(gl),io=n(gl,"DIV",{class:!0});var va=s(io);T(B8.$$.fragment,va),nsr=i(va),nve=n(va,"P",{});var EAt=s(nve);ssr=r(EAt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),EAt.forEach(t),lsr=i(va),Wa=n(va,"P",{});var k7=s(Wa);isr=r(k7,"The model class to instantiate is selected based on the "),sve=n(k7,"CODE",{});var CAt=s(sve);dsr=r(CAt,"model_type"),CAt.forEach(t),csr=r(k7,` property of the config object (either
passed as an argument or loaded from `),lve=n(k7,"CODE",{});var wAt=s(lve);msr=r(wAt,"pretrained_model_name_or_path"),wAt.forEach(t),fsr=r(k7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ive=n(k7,"CODE",{});var AAt=s(ive);gsr=r(AAt,"pretrained_model_name_or_path"),AAt.forEach(t),hsr=r(k7,":"),k7.forEach(t),usr=i(va),ve=n(va,"UL",{});var Te=s(ve);_M=n(Te,"LI",{});var jIe=s(_M);dve=n(jIe,"STRONG",{});var LAt=s(dve);psr=r(LAt,"beit"),LAt.forEach(t),_sr=r(jIe," \u2014 "),hW=n(jIe,"A",{href:!0});var yAt=s(hW);bsr=r(yAt,"BeitForImageClassification"),yAt.forEach(t),vsr=r(jIe," (BEiT model)"),jIe.forEach(t),Fsr=i(Te),bM=n(Te,"LI",{});var DIe=s(bM);cve=n(DIe,"STRONG",{});var xAt=s(cve);Tsr=r(xAt,"convnext"),xAt.forEach(t),Msr=r(DIe," \u2014 "),uW=n(DIe,"A",{href:!0});var $At=s(uW);Esr=r($At,"ConvNextForImageClassification"),$At.forEach(t),Csr=r(DIe," (ConvNeXT model)"),DIe.forEach(t),wsr=i(Te),vM=n(Te,"LI",{});var GIe=s(vM);mve=n(GIe,"STRONG",{});var kAt=s(mve);Asr=r(kAt,"cvt"),kAt.forEach(t),Lsr=r(GIe," \u2014 "),pW=n(GIe,"A",{href:!0});var SAt=s(pW);ysr=r(SAt,"CvtForImageClassification"),SAt.forEach(t),xsr=r(GIe," (CvT model)"),GIe.forEach(t),$sr=i(Te),FM=n(Te,"LI",{});var OIe=s(FM);fve=n(OIe,"STRONG",{});var RAt=s(fve);ksr=r(RAt,"data2vec-vision"),RAt.forEach(t),Ssr=r(OIe," \u2014 "),_W=n(OIe,"A",{href:!0});var PAt=s(_W);Rsr=r(PAt,"Data2VecVisionForImageClassification"),PAt.forEach(t),Psr=r(OIe," (Data2VecVision model)"),OIe.forEach(t),Bsr=i(Te),Hs=n(Te,"LI",{});var kS=s(Hs);gve=n(kS,"STRONG",{});var BAt=s(gve);Isr=r(BAt,"deit"),BAt.forEach(t),Nsr=r(kS," \u2014 "),bW=n(kS,"A",{href:!0});var IAt=s(bW);qsr=r(IAt,"DeiTForImageClassification"),IAt.forEach(t),jsr=r(kS," or "),vW=n(kS,"A",{href:!0});var NAt=s(vW);Dsr=r(NAt,"DeiTForImageClassificationWithTeacher"),NAt.forEach(t),Gsr=r(kS," (DeiT model)"),kS.forEach(t),Osr=i(Te),TM=n(Te,"LI",{});var VIe=s(TM);hve=n(VIe,"STRONG",{});var qAt=s(hve);Vsr=r(qAt,"imagegpt"),qAt.forEach(t),Xsr=r(VIe," \u2014 "),FW=n(VIe,"A",{href:!0});var jAt=s(FW);zsr=r(jAt,"ImageGPTForImageClassification"),jAt.forEach(t),Qsr=r(VIe," (ImageGPT model)"),VIe.forEach(t),Wsr=i(Te),Us=n(Te,"LI",{});var SS=s(Us);uve=n(SS,"STRONG",{});var DAt=s(uve);Hsr=r(DAt,"levit"),DAt.forEach(t),Usr=r(SS," \u2014 "),TW=n(SS,"A",{href:!0});var GAt=s(TW);Jsr=r(GAt,"LevitForImageClassification"),GAt.forEach(t),Ysr=r(SS," or "),MW=n(SS,"A",{href:!0});var OAt=s(MW);Ksr=r(OAt,"LevitForImageClassificationWithTeacher"),OAt.forEach(t),Zsr=r(SS," (LeViT model)"),SS.forEach(t),elr=i(Te),MM=n(Te,"LI",{});var XIe=s(MM);pve=n(XIe,"STRONG",{});var VAt=s(pve);olr=r(VAt,"mobilevit"),VAt.forEach(t),rlr=r(XIe," \u2014 "),EW=n(XIe,"A",{href:!0});var XAt=s(EW);tlr=r(XAt,"MobileViTForImageClassification"),XAt.forEach(t),alr=r(XIe," (MobileViT model)"),XIe.forEach(t),nlr=i(Te),Ft=n(Te,"LI",{});var Sm=s(Ft);_ve=n(Sm,"STRONG",{});var zAt=s(_ve);slr=r(zAt,"perceiver"),zAt.forEach(t),llr=r(Sm," \u2014 "),CW=n(Sm,"A",{href:!0});var QAt=s(CW);ilr=r(QAt,"PerceiverForImageClassificationLearned"),QAt.forEach(t),dlr=r(Sm," or "),wW=n(Sm,"A",{href:!0});var WAt=s(wW);clr=r(WAt,"PerceiverForImageClassificationFourier"),WAt.forEach(t),mlr=r(Sm," or "),AW=n(Sm,"A",{href:!0});var HAt=s(AW);flr=r(HAt,"PerceiverForImageClassificationConvProcessing"),HAt.forEach(t),glr=r(Sm," (Perceiver model)"),Sm.forEach(t),hlr=i(Te),EM=n(Te,"LI",{});var zIe=s(EM);bve=n(zIe,"STRONG",{});var UAt=s(bve);ulr=r(UAt,"poolformer"),UAt.forEach(t),plr=r(zIe," \u2014 "),LW=n(zIe,"A",{href:!0});var JAt=s(LW);_lr=r(JAt,"PoolFormerForImageClassification"),JAt.forEach(t),blr=r(zIe," (PoolFormer model)"),zIe.forEach(t),vlr=i(Te),CM=n(Te,"LI",{});var QIe=s(CM);vve=n(QIe,"STRONG",{});var YAt=s(vve);Flr=r(YAt,"regnet"),YAt.forEach(t),Tlr=r(QIe," \u2014 "),yW=n(QIe,"A",{href:!0});var KAt=s(yW);Mlr=r(KAt,"RegNetForImageClassification"),KAt.forEach(t),Elr=r(QIe," (RegNet model)"),QIe.forEach(t),Clr=i(Te),wM=n(Te,"LI",{});var WIe=s(wM);Fve=n(WIe,"STRONG",{});var ZAt=s(Fve);wlr=r(ZAt,"resnet"),ZAt.forEach(t),Alr=r(WIe," \u2014 "),xW=n(WIe,"A",{href:!0});var e6t=s(xW);Llr=r(e6t,"ResNetForImageClassification"),e6t.forEach(t),ylr=r(WIe," (ResNet model)"),WIe.forEach(t),xlr=i(Te),AM=n(Te,"LI",{});var HIe=s(AM);Tve=n(HIe,"STRONG",{});var o6t=s(Tve);$lr=r(o6t,"segformer"),o6t.forEach(t),klr=r(HIe," \u2014 "),$W=n(HIe,"A",{href:!0});var r6t=s($W);Slr=r(r6t,"SegformerForImageClassification"),r6t.forEach(t),Rlr=r(HIe," (SegFormer model)"),HIe.forEach(t),Plr=i(Te),LM=n(Te,"LI",{});var UIe=s(LM);Mve=n(UIe,"STRONG",{});var t6t=s(Mve);Blr=r(t6t,"swin"),t6t.forEach(t),Ilr=r(UIe," \u2014 "),kW=n(UIe,"A",{href:!0});var a6t=s(kW);Nlr=r(a6t,"SwinForImageClassification"),a6t.forEach(t),qlr=r(UIe," (Swin Transformer model)"),UIe.forEach(t),jlr=i(Te),yM=n(Te,"LI",{});var JIe=s(yM);Eve=n(JIe,"STRONG",{});var n6t=s(Eve);Dlr=r(n6t,"van"),n6t.forEach(t),Glr=r(JIe," \u2014 "),SW=n(JIe,"A",{href:!0});var s6t=s(SW);Olr=r(s6t,"VanForImageClassification"),s6t.forEach(t),Vlr=r(JIe," (VAN model)"),JIe.forEach(t),Xlr=i(Te),xM=n(Te,"LI",{});var YIe=s(xM);Cve=n(YIe,"STRONG",{});var l6t=s(Cve);zlr=r(l6t,"vit"),l6t.forEach(t),Qlr=r(YIe," \u2014 "),RW=n(YIe,"A",{href:!0});var i6t=s(RW);Wlr=r(i6t,"ViTForImageClassification"),i6t.forEach(t),Hlr=r(YIe," (ViT model)"),YIe.forEach(t),Te.forEach(t),Ulr=i(va),$M=n(va,"P",{});var KIe=s($M);Jlr=r(KIe,"The model is set in evaluation mode by default using "),wve=n(KIe,"CODE",{});var d6t=s(wve);Ylr=r(d6t,"model.eval()"),d6t.forEach(t),Klr=r(KIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ave=n(KIe,"CODE",{});var c6t=s(Ave);Zlr=r(c6t,"model.train()"),c6t.forEach(t),KIe.forEach(t),eir=i(va),T(kM.$$.fragment,va),va.forEach(t),gl.forEach(t),PXe=i(m),Ed=n(m,"H2",{class:!0});var DQe=s(Ed);SM=n(DQe,"A",{id:!0,class:!0,href:!0});var m6t=s(SM);Lve=n(m6t,"SPAN",{});var f6t=s(Lve);T(I8.$$.fragment,f6t),f6t.forEach(t),m6t.forEach(t),oir=i(DQe),yve=n(DQe,"SPAN",{});var g6t=s(yve);rir=r(g6t,"AutoModelForVision2Seq"),g6t.forEach(t),DQe.forEach(t),BXe=i(m),Vo=n(m,"DIV",{class:!0});var hl=s(Vo);T(N8.$$.fragment,hl),tir=i(hl),Cd=n(hl,"P",{});var ote=s(Cd);air=r(ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),PW=n(ote,"A",{href:!0});var h6t=s(PW);nir=r(h6t,"from_pretrained()"),h6t.forEach(t),sir=r(ote," class method or the "),BW=n(ote,"A",{href:!0});var u6t=s(BW);lir=r(u6t,"from_config()"),u6t.forEach(t),iir=r(ote,` class
method.`),ote.forEach(t),dir=i(hl),q8=n(hl,"P",{});var GQe=s(q8);cir=r(GQe,"This class cannot be instantiated directly using "),xve=n(GQe,"CODE",{});var p6t=s(xve);mir=r(p6t,"__init__()"),p6t.forEach(t),fir=r(GQe," (throws an error)."),GQe.forEach(t),gir=i(hl),Tt=n(hl,"DIV",{class:!0});var S7=s(Tt);T(j8.$$.fragment,S7),hir=i(S7),$ve=n(S7,"P",{});var _6t=s($ve);uir=r(_6t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_6t.forEach(t),pir=i(S7),wd=n(S7,"P",{});var rte=s(wd);_ir=r(rte,`Note:
Loading a model from its configuration file does `),kve=n(rte,"STRONG",{});var b6t=s(kve);bir=r(b6t,"not"),b6t.forEach(t),vir=r(rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=n(rte,"A",{href:!0});var v6t=s(IW);Fir=r(v6t,"from_pretrained()"),v6t.forEach(t),Tir=r(rte," to load the model weights."),rte.forEach(t),Mir=i(S7),T(RM.$$.fragment,S7),S7.forEach(t),Eir=i(hl),co=n(hl,"DIV",{class:!0});var Fa=s(co);T(D8.$$.fragment,Fa),Cir=i(Fa),Sve=n(Fa,"P",{});var F6t=s(Sve);wir=r(F6t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),F6t.forEach(t),Air=i(Fa),Ha=n(Fa,"P",{});var R7=s(Ha);Lir=r(R7,"The model class to instantiate is selected based on the "),Rve=n(R7,"CODE",{});var T6t=s(Rve);yir=r(T6t,"model_type"),T6t.forEach(t),xir=r(R7,` property of the config object (either
passed as an argument or loaded from `),Pve=n(R7,"CODE",{});var M6t=s(Pve);$ir=r(M6t,"pretrained_model_name_or_path"),M6t.forEach(t),kir=r(R7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=n(R7,"CODE",{});var E6t=s(Bve);Sir=r(E6t,"pretrained_model_name_or_path"),E6t.forEach(t),Rir=r(R7,":"),R7.forEach(t),Pir=i(Fa),Ive=n(Fa,"UL",{});var C6t=s(Ive);PM=n(C6t,"LI",{});var ZIe=s(PM);Nve=n(ZIe,"STRONG",{});var w6t=s(Nve);Bir=r(w6t,"vision-encoder-decoder"),w6t.forEach(t),Iir=r(ZIe," \u2014 "),NW=n(ZIe,"A",{href:!0});var A6t=s(NW);Nir=r(A6t,"VisionEncoderDecoderModel"),A6t.forEach(t),qir=r(ZIe," (Vision Encoder decoder model)"),ZIe.forEach(t),C6t.forEach(t),jir=i(Fa),BM=n(Fa,"P",{});var eNe=s(BM);Dir=r(eNe,"The model is set in evaluation mode by default using "),qve=n(eNe,"CODE",{});var L6t=s(qve);Gir=r(L6t,"model.eval()"),L6t.forEach(t),Oir=r(eNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jve=n(eNe,"CODE",{});var y6t=s(jve);Vir=r(y6t,"model.train()"),y6t.forEach(t),eNe.forEach(t),Xir=i(Fa),T(IM.$$.fragment,Fa),Fa.forEach(t),hl.forEach(t),IXe=i(m),Ad=n(m,"H2",{class:!0});var OQe=s(Ad);NM=n(OQe,"A",{id:!0,class:!0,href:!0});var x6t=s(NM);Dve=n(x6t,"SPAN",{});var $6t=s(Dve);T(G8.$$.fragment,$6t),$6t.forEach(t),x6t.forEach(t),zir=i(OQe),Gve=n(OQe,"SPAN",{});var k6t=s(Gve);Qir=r(k6t,"AutoModelForVisualQuestionAnswering"),k6t.forEach(t),OQe.forEach(t),NXe=i(m),Xo=n(m,"DIV",{class:!0});var ul=s(Xo);T(O8.$$.fragment,ul),Wir=i(ul),Ld=n(ul,"P",{});var tte=s(Ld);Hir=r(tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),qW=n(tte,"A",{href:!0});var S6t=s(qW);Uir=r(S6t,"from_pretrained()"),S6t.forEach(t),Jir=r(tte," class method or the "),jW=n(tte,"A",{href:!0});var R6t=s(jW);Yir=r(R6t,"from_config()"),R6t.forEach(t),Kir=r(tte,` class
method.`),tte.forEach(t),Zir=i(ul),V8=n(ul,"P",{});var VQe=s(V8);edr=r(VQe,"This class cannot be instantiated directly using "),Ove=n(VQe,"CODE",{});var P6t=s(Ove);odr=r(P6t,"__init__()"),P6t.forEach(t),rdr=r(VQe," (throws an error)."),VQe.forEach(t),tdr=i(ul),Mt=n(ul,"DIV",{class:!0});var P7=s(Mt);T(X8.$$.fragment,P7),adr=i(P7),Vve=n(P7,"P",{});var B6t=s(Vve);ndr=r(B6t,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),B6t.forEach(t),sdr=i(P7),yd=n(P7,"P",{});var ate=s(yd);ldr=r(ate,`Note:
Loading a model from its configuration file does `),Xve=n(ate,"STRONG",{});var I6t=s(Xve);idr=r(I6t,"not"),I6t.forEach(t),ddr=r(ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),DW=n(ate,"A",{href:!0});var N6t=s(DW);cdr=r(N6t,"from_pretrained()"),N6t.forEach(t),mdr=r(ate," to load the model weights."),ate.forEach(t),fdr=i(P7),T(qM.$$.fragment,P7),P7.forEach(t),gdr=i(ul),mo=n(ul,"DIV",{class:!0});var Ta=s(mo);T(z8.$$.fragment,Ta),hdr=i(Ta),zve=n(Ta,"P",{});var q6t=s(zve);udr=r(q6t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),q6t.forEach(t),pdr=i(Ta),Ua=n(Ta,"P",{});var B7=s(Ua);_dr=r(B7,"The model class to instantiate is selected based on the "),Qve=n(B7,"CODE",{});var j6t=s(Qve);bdr=r(j6t,"model_type"),j6t.forEach(t),vdr=r(B7,` property of the config object (either
passed as an argument or loaded from `),Wve=n(B7,"CODE",{});var D6t=s(Wve);Fdr=r(D6t,"pretrained_model_name_or_path"),D6t.forEach(t),Tdr=r(B7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hve=n(B7,"CODE",{});var G6t=s(Hve);Mdr=r(G6t,"pretrained_model_name_or_path"),G6t.forEach(t),Edr=r(B7,":"),B7.forEach(t),Cdr=i(Ta),Uve=n(Ta,"UL",{});var O6t=s(Uve);jM=n(O6t,"LI",{});var oNe=s(jM);Jve=n(oNe,"STRONG",{});var V6t=s(Jve);wdr=r(V6t,"vilt"),V6t.forEach(t),Adr=r(oNe," \u2014 "),GW=n(oNe,"A",{href:!0});var X6t=s(GW);Ldr=r(X6t,"ViltForQuestionAnswering"),X6t.forEach(t),ydr=r(oNe," (ViLT model)"),oNe.forEach(t),O6t.forEach(t),xdr=i(Ta),DM=n(Ta,"P",{});var rNe=s(DM);$dr=r(rNe,"The model is set in evaluation mode by default using "),Yve=n(rNe,"CODE",{});var z6t=s(Yve);kdr=r(z6t,"model.eval()"),z6t.forEach(t),Sdr=r(rNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kve=n(rNe,"CODE",{});var Q6t=s(Kve);Rdr=r(Q6t,"model.train()"),Q6t.forEach(t),rNe.forEach(t),Pdr=i(Ta),T(GM.$$.fragment,Ta),Ta.forEach(t),ul.forEach(t),qXe=i(m),xd=n(m,"H2",{class:!0});var XQe=s(xd);OM=n(XQe,"A",{id:!0,class:!0,href:!0});var W6t=s(OM);Zve=n(W6t,"SPAN",{});var H6t=s(Zve);T(Q8.$$.fragment,H6t),H6t.forEach(t),W6t.forEach(t),Bdr=i(XQe),e1e=n(XQe,"SPAN",{});var U6t=s(e1e);Idr=r(U6t,"AutoModelForAudioClassification"),U6t.forEach(t),XQe.forEach(t),jXe=i(m),zo=n(m,"DIV",{class:!0});var pl=s(zo);T(W8.$$.fragment,pl),Ndr=i(pl),$d=n(pl,"P",{});var nte=s($d);qdr=r(nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),OW=n(nte,"A",{href:!0});var J6t=s(OW);jdr=r(J6t,"from_pretrained()"),J6t.forEach(t),Ddr=r(nte," class method or the "),VW=n(nte,"A",{href:!0});var Y6t=s(VW);Gdr=r(Y6t,"from_config()"),Y6t.forEach(t),Odr=r(nte,` class
method.`),nte.forEach(t),Vdr=i(pl),H8=n(pl,"P",{});var zQe=s(H8);Xdr=r(zQe,"This class cannot be instantiated directly using "),o1e=n(zQe,"CODE",{});var K6t=s(o1e);zdr=r(K6t,"__init__()"),K6t.forEach(t),Qdr=r(zQe," (throws an error)."),zQe.forEach(t),Wdr=i(pl),Et=n(pl,"DIV",{class:!0});var I7=s(Et);T(U8.$$.fragment,I7),Hdr=i(I7),r1e=n(I7,"P",{});var Z6t=s(r1e);Udr=r(Z6t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Z6t.forEach(t),Jdr=i(I7),kd=n(I7,"P",{});var ste=s(kd);Ydr=r(ste,`Note:
Loading a model from its configuration file does `),t1e=n(ste,"STRONG",{});var e7t=s(t1e);Kdr=r(e7t,"not"),e7t.forEach(t),Zdr=r(ste,` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=n(ste,"A",{href:!0});var o7t=s(XW);ecr=r(o7t,"from_pretrained()"),o7t.forEach(t),ocr=r(ste," to load the model weights."),ste.forEach(t),rcr=i(I7),T(VM.$$.fragment,I7),I7.forEach(t),tcr=i(pl),fo=n(pl,"DIV",{class:!0});var Ma=s(fo);T(J8.$$.fragment,Ma),acr=i(Ma),a1e=n(Ma,"P",{});var r7t=s(a1e);ncr=r(r7t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),r7t.forEach(t),scr=i(Ma),Ja=n(Ma,"P",{});var N7=s(Ja);lcr=r(N7,"The model class to instantiate is selected based on the "),n1e=n(N7,"CODE",{});var t7t=s(n1e);icr=r(t7t,"model_type"),t7t.forEach(t),dcr=r(N7,` property of the config object (either
passed as an argument or loaded from `),s1e=n(N7,"CODE",{});var a7t=s(s1e);ccr=r(a7t,"pretrained_model_name_or_path"),a7t.forEach(t),mcr=r(N7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l1e=n(N7,"CODE",{});var n7t=s(l1e);fcr=r(n7t,"pretrained_model_name_or_path"),n7t.forEach(t),gcr=r(N7,":"),N7.forEach(t),hcr=i(Ma),Pe=n(Ma,"UL",{});var ze=s(Pe);XM=n(ze,"LI",{});var tNe=s(XM);i1e=n(tNe,"STRONG",{});var s7t=s(i1e);ucr=r(s7t,"data2vec-audio"),s7t.forEach(t),pcr=r(tNe," \u2014 "),zW=n(tNe,"A",{href:!0});var l7t=s(zW);_cr=r(l7t,"Data2VecAudioForSequenceClassification"),l7t.forEach(t),bcr=r(tNe," (Data2VecAudio model)"),tNe.forEach(t),vcr=i(ze),zM=n(ze,"LI",{});var aNe=s(zM);d1e=n(aNe,"STRONG",{});var i7t=s(d1e);Fcr=r(i7t,"hubert"),i7t.forEach(t),Tcr=r(aNe," \u2014 "),QW=n(aNe,"A",{href:!0});var d7t=s(QW);Mcr=r(d7t,"HubertForSequenceClassification"),d7t.forEach(t),Ecr=r(aNe," (Hubert model)"),aNe.forEach(t),Ccr=i(ze),QM=n(ze,"LI",{});var nNe=s(QM);c1e=n(nNe,"STRONG",{});var c7t=s(c1e);wcr=r(c7t,"sew"),c7t.forEach(t),Acr=r(nNe," \u2014 "),WW=n(nNe,"A",{href:!0});var m7t=s(WW);Lcr=r(m7t,"SEWForSequenceClassification"),m7t.forEach(t),ycr=r(nNe," (SEW model)"),nNe.forEach(t),xcr=i(ze),WM=n(ze,"LI",{});var sNe=s(WM);m1e=n(sNe,"STRONG",{});var f7t=s(m1e);$cr=r(f7t,"sew-d"),f7t.forEach(t),kcr=r(sNe," \u2014 "),HW=n(sNe,"A",{href:!0});var g7t=s(HW);Scr=r(g7t,"SEWDForSequenceClassification"),g7t.forEach(t),Rcr=r(sNe," (SEW-D model)"),sNe.forEach(t),Pcr=i(ze),HM=n(ze,"LI",{});var lNe=s(HM);f1e=n(lNe,"STRONG",{});var h7t=s(f1e);Bcr=r(h7t,"unispeech"),h7t.forEach(t),Icr=r(lNe," \u2014 "),UW=n(lNe,"A",{href:!0});var u7t=s(UW);Ncr=r(u7t,"UniSpeechForSequenceClassification"),u7t.forEach(t),qcr=r(lNe," (UniSpeech model)"),lNe.forEach(t),jcr=i(ze),UM=n(ze,"LI",{});var iNe=s(UM);g1e=n(iNe,"STRONG",{});var p7t=s(g1e);Dcr=r(p7t,"unispeech-sat"),p7t.forEach(t),Gcr=r(iNe," \u2014 "),JW=n(iNe,"A",{href:!0});var _7t=s(JW);Ocr=r(_7t,"UniSpeechSatForSequenceClassification"),_7t.forEach(t),Vcr=r(iNe," (UniSpeechSat model)"),iNe.forEach(t),Xcr=i(ze),JM=n(ze,"LI",{});var dNe=s(JM);h1e=n(dNe,"STRONG",{});var b7t=s(h1e);zcr=r(b7t,"wav2vec2"),b7t.forEach(t),Qcr=r(dNe," \u2014 "),YW=n(dNe,"A",{href:!0});var v7t=s(YW);Wcr=r(v7t,"Wav2Vec2ForSequenceClassification"),v7t.forEach(t),Hcr=r(dNe," (Wav2Vec2 model)"),dNe.forEach(t),Ucr=i(ze),YM=n(ze,"LI",{});var cNe=s(YM);u1e=n(cNe,"STRONG",{});var F7t=s(u1e);Jcr=r(F7t,"wav2vec2-conformer"),F7t.forEach(t),Ycr=r(cNe," \u2014 "),KW=n(cNe,"A",{href:!0});var T7t=s(KW);Kcr=r(T7t,"Wav2Vec2ConformerForSequenceClassification"),T7t.forEach(t),Zcr=r(cNe," (Wav2Vec2-Conformer model)"),cNe.forEach(t),emr=i(ze),KM=n(ze,"LI",{});var mNe=s(KM);p1e=n(mNe,"STRONG",{});var M7t=s(p1e);omr=r(M7t,"wavlm"),M7t.forEach(t),rmr=r(mNe," \u2014 "),ZW=n(mNe,"A",{href:!0});var E7t=s(ZW);tmr=r(E7t,"WavLMForSequenceClassification"),E7t.forEach(t),amr=r(mNe," (WavLM model)"),mNe.forEach(t),ze.forEach(t),nmr=i(Ma),ZM=n(Ma,"P",{});var fNe=s(ZM);smr=r(fNe,"The model is set in evaluation mode by default using "),_1e=n(fNe,"CODE",{});var C7t=s(_1e);lmr=r(C7t,"model.eval()"),C7t.forEach(t),imr=r(fNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b1e=n(fNe,"CODE",{});var w7t=s(b1e);dmr=r(w7t,"model.train()"),w7t.forEach(t),fNe.forEach(t),cmr=i(Ma),T(e4.$$.fragment,Ma),Ma.forEach(t),pl.forEach(t),DXe=i(m),Sd=n(m,"H2",{class:!0});var QQe=s(Sd);o4=n(QQe,"A",{id:!0,class:!0,href:!0});var A7t=s(o4);v1e=n(A7t,"SPAN",{});var L7t=s(v1e);T(Y8.$$.fragment,L7t),L7t.forEach(t),A7t.forEach(t),mmr=i(QQe),F1e=n(QQe,"SPAN",{});var y7t=s(F1e);fmr=r(y7t,"AutoModelForAudioFrameClassification"),y7t.forEach(t),QQe.forEach(t),GXe=i(m),Qo=n(m,"DIV",{class:!0});var _l=s(Qo);T(K8.$$.fragment,_l),gmr=i(_l),Rd=n(_l,"P",{});var lte=s(Rd);hmr=r(lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),eH=n(lte,"A",{href:!0});var x7t=s(eH);umr=r(x7t,"from_pretrained()"),x7t.forEach(t),pmr=r(lte," class method or the "),oH=n(lte,"A",{href:!0});var $7t=s(oH);_mr=r($7t,"from_config()"),$7t.forEach(t),bmr=r(lte,` class
method.`),lte.forEach(t),vmr=i(_l),Z8=n(_l,"P",{});var WQe=s(Z8);Fmr=r(WQe,"This class cannot be instantiated directly using "),T1e=n(WQe,"CODE",{});var k7t=s(T1e);Tmr=r(k7t,"__init__()"),k7t.forEach(t),Mmr=r(WQe," (throws an error)."),WQe.forEach(t),Emr=i(_l),Ct=n(_l,"DIV",{class:!0});var q7=s(Ct);T(e9.$$.fragment,q7),Cmr=i(q7),M1e=n(q7,"P",{});var S7t=s(M1e);wmr=r(S7t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),S7t.forEach(t),Amr=i(q7),Pd=n(q7,"P",{});var ite=s(Pd);Lmr=r(ite,`Note:
Loading a model from its configuration file does `),E1e=n(ite,"STRONG",{});var R7t=s(E1e);ymr=r(R7t,"not"),R7t.forEach(t),xmr=r(ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=n(ite,"A",{href:!0});var P7t=s(rH);$mr=r(P7t,"from_pretrained()"),P7t.forEach(t),kmr=r(ite," to load the model weights."),ite.forEach(t),Smr=i(q7),T(r4.$$.fragment,q7),q7.forEach(t),Rmr=i(_l),go=n(_l,"DIV",{class:!0});var Ea=s(go);T(o9.$$.fragment,Ea),Pmr=i(Ea),C1e=n(Ea,"P",{});var B7t=s(C1e);Bmr=r(B7t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),B7t.forEach(t),Imr=i(Ea),Ya=n(Ea,"P",{});var j7=s(Ya);Nmr=r(j7,"The model class to instantiate is selected based on the "),w1e=n(j7,"CODE",{});var I7t=s(w1e);qmr=r(I7t,"model_type"),I7t.forEach(t),jmr=r(j7,` property of the config object (either
passed as an argument or loaded from `),A1e=n(j7,"CODE",{});var N7t=s(A1e);Dmr=r(N7t,"pretrained_model_name_or_path"),N7t.forEach(t),Gmr=r(j7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L1e=n(j7,"CODE",{});var q7t=s(L1e);Omr=r(q7t,"pretrained_model_name_or_path"),q7t.forEach(t),Vmr=r(j7,":"),j7.forEach(t),Xmr=i(Ea),rt=n(Ea,"UL",{});var bl=s(rt);t4=n(bl,"LI",{});var gNe=s(t4);y1e=n(gNe,"STRONG",{});var j7t=s(y1e);zmr=r(j7t,"data2vec-audio"),j7t.forEach(t),Qmr=r(gNe," \u2014 "),tH=n(gNe,"A",{href:!0});var D7t=s(tH);Wmr=r(D7t,"Data2VecAudioForAudioFrameClassification"),D7t.forEach(t),Hmr=r(gNe," (Data2VecAudio model)"),gNe.forEach(t),Umr=i(bl),a4=n(bl,"LI",{});var hNe=s(a4);x1e=n(hNe,"STRONG",{});var G7t=s(x1e);Jmr=r(G7t,"unispeech-sat"),G7t.forEach(t),Ymr=r(hNe," \u2014 "),aH=n(hNe,"A",{href:!0});var O7t=s(aH);Kmr=r(O7t,"UniSpeechSatForAudioFrameClassification"),O7t.forEach(t),Zmr=r(hNe," (UniSpeechSat model)"),hNe.forEach(t),efr=i(bl),n4=n(bl,"LI",{});var uNe=s(n4);$1e=n(uNe,"STRONG",{});var V7t=s($1e);ofr=r(V7t,"wav2vec2"),V7t.forEach(t),rfr=r(uNe," \u2014 "),nH=n(uNe,"A",{href:!0});var X7t=s(nH);tfr=r(X7t,"Wav2Vec2ForAudioFrameClassification"),X7t.forEach(t),afr=r(uNe," (Wav2Vec2 model)"),uNe.forEach(t),nfr=i(bl),s4=n(bl,"LI",{});var pNe=s(s4);k1e=n(pNe,"STRONG",{});var z7t=s(k1e);sfr=r(z7t,"wav2vec2-conformer"),z7t.forEach(t),lfr=r(pNe," \u2014 "),sH=n(pNe,"A",{href:!0});var Q7t=s(sH);ifr=r(Q7t,"Wav2Vec2ConformerForAudioFrameClassification"),Q7t.forEach(t),dfr=r(pNe," (Wav2Vec2-Conformer model)"),pNe.forEach(t),cfr=i(bl),l4=n(bl,"LI",{});var _Ne=s(l4);S1e=n(_Ne,"STRONG",{});var W7t=s(S1e);mfr=r(W7t,"wavlm"),W7t.forEach(t),ffr=r(_Ne," \u2014 "),lH=n(_Ne,"A",{href:!0});var H7t=s(lH);gfr=r(H7t,"WavLMForAudioFrameClassification"),H7t.forEach(t),hfr=r(_Ne," (WavLM model)"),_Ne.forEach(t),bl.forEach(t),ufr=i(Ea),i4=n(Ea,"P",{});var bNe=s(i4);pfr=r(bNe,"The model is set in evaluation mode by default using "),R1e=n(bNe,"CODE",{});var U7t=s(R1e);_fr=r(U7t,"model.eval()"),U7t.forEach(t),bfr=r(bNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P1e=n(bNe,"CODE",{});var J7t=s(P1e);vfr=r(J7t,"model.train()"),J7t.forEach(t),bNe.forEach(t),Ffr=i(Ea),T(d4.$$.fragment,Ea),Ea.forEach(t),_l.forEach(t),OXe=i(m),Bd=n(m,"H2",{class:!0});var HQe=s(Bd);c4=n(HQe,"A",{id:!0,class:!0,href:!0});var Y7t=s(c4);B1e=n(Y7t,"SPAN",{});var K7t=s(B1e);T(r9.$$.fragment,K7t),K7t.forEach(t),Y7t.forEach(t),Tfr=i(HQe),I1e=n(HQe,"SPAN",{});var Z7t=s(I1e);Mfr=r(Z7t,"AutoModelForCTC"),Z7t.forEach(t),HQe.forEach(t),VXe=i(m),Wo=n(m,"DIV",{class:!0});var vl=s(Wo);T(t9.$$.fragment,vl),Efr=i(vl),Id=n(vl,"P",{});var dte=s(Id);Cfr=r(dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),iH=n(dte,"A",{href:!0});var eLt=s(iH);wfr=r(eLt,"from_pretrained()"),eLt.forEach(t),Afr=r(dte," class method or the "),dH=n(dte,"A",{href:!0});var oLt=s(dH);Lfr=r(oLt,"from_config()"),oLt.forEach(t),yfr=r(dte,` class
method.`),dte.forEach(t),xfr=i(vl),a9=n(vl,"P",{});var UQe=s(a9);$fr=r(UQe,"This class cannot be instantiated directly using "),N1e=n(UQe,"CODE",{});var rLt=s(N1e);kfr=r(rLt,"__init__()"),rLt.forEach(t),Sfr=r(UQe," (throws an error)."),UQe.forEach(t),Rfr=i(vl),wt=n(vl,"DIV",{class:!0});var D7=s(wt);T(n9.$$.fragment,D7),Pfr=i(D7),q1e=n(D7,"P",{});var tLt=s(q1e);Bfr=r(tLt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),tLt.forEach(t),Ifr=i(D7),Nd=n(D7,"P",{});var cte=s(Nd);Nfr=r(cte,`Note:
Loading a model from its configuration file does `),j1e=n(cte,"STRONG",{});var aLt=s(j1e);qfr=r(aLt,"not"),aLt.forEach(t),jfr=r(cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),cH=n(cte,"A",{href:!0});var nLt=s(cH);Dfr=r(nLt,"from_pretrained()"),nLt.forEach(t),Gfr=r(cte," to load the model weights."),cte.forEach(t),Ofr=i(D7),T(m4.$$.fragment,D7),D7.forEach(t),Vfr=i(vl),ho=n(vl,"DIV",{class:!0});var Ca=s(ho);T(s9.$$.fragment,Ca),Xfr=i(Ca),D1e=n(Ca,"P",{});var sLt=s(D1e);zfr=r(sLt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),sLt.forEach(t),Qfr=i(Ca),Ka=n(Ca,"P",{});var G7=s(Ka);Wfr=r(G7,"The model class to instantiate is selected based on the "),G1e=n(G7,"CODE",{});var lLt=s(G1e);Hfr=r(lLt,"model_type"),lLt.forEach(t),Ufr=r(G7,` property of the config object (either
passed as an argument or loaded from `),O1e=n(G7,"CODE",{});var iLt=s(O1e);Jfr=r(iLt,"pretrained_model_name_or_path"),iLt.forEach(t),Yfr=r(G7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=n(G7,"CODE",{});var dLt=s(V1e);Kfr=r(dLt,"pretrained_model_name_or_path"),dLt.forEach(t),Zfr=r(G7,":"),G7.forEach(t),egr=i(Ca),Le=n(Ca,"UL",{});var Be=s(Le);f4=n(Be,"LI",{});var vNe=s(f4);X1e=n(vNe,"STRONG",{});var cLt=s(X1e);ogr=r(cLt,"data2vec-audio"),cLt.forEach(t),rgr=r(vNe," \u2014 "),mH=n(vNe,"A",{href:!0});var mLt=s(mH);tgr=r(mLt,"Data2VecAudioForCTC"),mLt.forEach(t),agr=r(vNe," (Data2VecAudio model)"),vNe.forEach(t),ngr=i(Be),g4=n(Be,"LI",{});var FNe=s(g4);z1e=n(FNe,"STRONG",{});var fLt=s(z1e);sgr=r(fLt,"hubert"),fLt.forEach(t),lgr=r(FNe," \u2014 "),fH=n(FNe,"A",{href:!0});var gLt=s(fH);igr=r(gLt,"HubertForCTC"),gLt.forEach(t),dgr=r(FNe," (Hubert model)"),FNe.forEach(t),cgr=i(Be),h4=n(Be,"LI",{});var TNe=s(h4);Q1e=n(TNe,"STRONG",{});var hLt=s(Q1e);mgr=r(hLt,"mctct"),hLt.forEach(t),fgr=r(TNe," \u2014 "),gH=n(TNe,"A",{href:!0});var uLt=s(gH);ggr=r(uLt,"MCTCTForCTC"),uLt.forEach(t),hgr=r(TNe," (M-CTC-T model)"),TNe.forEach(t),ugr=i(Be),u4=n(Be,"LI",{});var MNe=s(u4);W1e=n(MNe,"STRONG",{});var pLt=s(W1e);pgr=r(pLt,"sew"),pLt.forEach(t),_gr=r(MNe," \u2014 "),hH=n(MNe,"A",{href:!0});var _Lt=s(hH);bgr=r(_Lt,"SEWForCTC"),_Lt.forEach(t),vgr=r(MNe," (SEW model)"),MNe.forEach(t),Fgr=i(Be),p4=n(Be,"LI",{});var ENe=s(p4);H1e=n(ENe,"STRONG",{});var bLt=s(H1e);Tgr=r(bLt,"sew-d"),bLt.forEach(t),Mgr=r(ENe," \u2014 "),uH=n(ENe,"A",{href:!0});var vLt=s(uH);Egr=r(vLt,"SEWDForCTC"),vLt.forEach(t),Cgr=r(ENe," (SEW-D model)"),ENe.forEach(t),wgr=i(Be),_4=n(Be,"LI",{});var CNe=s(_4);U1e=n(CNe,"STRONG",{});var FLt=s(U1e);Agr=r(FLt,"unispeech"),FLt.forEach(t),Lgr=r(CNe," \u2014 "),pH=n(CNe,"A",{href:!0});var TLt=s(pH);ygr=r(TLt,"UniSpeechForCTC"),TLt.forEach(t),xgr=r(CNe," (UniSpeech model)"),CNe.forEach(t),$gr=i(Be),b4=n(Be,"LI",{});var wNe=s(b4);J1e=n(wNe,"STRONG",{});var MLt=s(J1e);kgr=r(MLt,"unispeech-sat"),MLt.forEach(t),Sgr=r(wNe," \u2014 "),_H=n(wNe,"A",{href:!0});var ELt=s(_H);Rgr=r(ELt,"UniSpeechSatForCTC"),ELt.forEach(t),Pgr=r(wNe," (UniSpeechSat model)"),wNe.forEach(t),Bgr=i(Be),v4=n(Be,"LI",{});var ANe=s(v4);Y1e=n(ANe,"STRONG",{});var CLt=s(Y1e);Igr=r(CLt,"wav2vec2"),CLt.forEach(t),Ngr=r(ANe," \u2014 "),bH=n(ANe,"A",{href:!0});var wLt=s(bH);qgr=r(wLt,"Wav2Vec2ForCTC"),wLt.forEach(t),jgr=r(ANe," (Wav2Vec2 model)"),ANe.forEach(t),Dgr=i(Be),F4=n(Be,"LI",{});var LNe=s(F4);K1e=n(LNe,"STRONG",{});var ALt=s(K1e);Ggr=r(ALt,"wav2vec2-conformer"),ALt.forEach(t),Ogr=r(LNe," \u2014 "),vH=n(LNe,"A",{href:!0});var LLt=s(vH);Vgr=r(LLt,"Wav2Vec2ConformerForCTC"),LLt.forEach(t),Xgr=r(LNe," (Wav2Vec2-Conformer model)"),LNe.forEach(t),zgr=i(Be),T4=n(Be,"LI",{});var yNe=s(T4);Z1e=n(yNe,"STRONG",{});var yLt=s(Z1e);Qgr=r(yLt,"wavlm"),yLt.forEach(t),Wgr=r(yNe," \u2014 "),FH=n(yNe,"A",{href:!0});var xLt=s(FH);Hgr=r(xLt,"WavLMForCTC"),xLt.forEach(t),Ugr=r(yNe," (WavLM model)"),yNe.forEach(t),Be.forEach(t),Jgr=i(Ca),M4=n(Ca,"P",{});var xNe=s(M4);Ygr=r(xNe,"The model is set in evaluation mode by default using "),eFe=n(xNe,"CODE",{});var $Lt=s(eFe);Kgr=r($Lt,"model.eval()"),$Lt.forEach(t),Zgr=r(xNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oFe=n(xNe,"CODE",{});var kLt=s(oFe);ehr=r(kLt,"model.train()"),kLt.forEach(t),xNe.forEach(t),ohr=i(Ca),T(E4.$$.fragment,Ca),Ca.forEach(t),vl.forEach(t),XXe=i(m),qd=n(m,"H2",{class:!0});var JQe=s(qd);C4=n(JQe,"A",{id:!0,class:!0,href:!0});var SLt=s(C4);rFe=n(SLt,"SPAN",{});var RLt=s(rFe);T(l9.$$.fragment,RLt),RLt.forEach(t),SLt.forEach(t),rhr=i(JQe),tFe=n(JQe,"SPAN",{});var PLt=s(tFe);thr=r(PLt,"AutoModelForSpeechSeq2Seq"),PLt.forEach(t),JQe.forEach(t),zXe=i(m),Ho=n(m,"DIV",{class:!0});var Fl=s(Ho);T(i9.$$.fragment,Fl),ahr=i(Fl),jd=n(Fl,"P",{});var mte=s(jd);nhr=r(mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),TH=n(mte,"A",{href:!0});var BLt=s(TH);shr=r(BLt,"from_pretrained()"),BLt.forEach(t),lhr=r(mte," class method or the "),MH=n(mte,"A",{href:!0});var ILt=s(MH);ihr=r(ILt,"from_config()"),ILt.forEach(t),dhr=r(mte,` class
method.`),mte.forEach(t),chr=i(Fl),d9=n(Fl,"P",{});var YQe=s(d9);mhr=r(YQe,"This class cannot be instantiated directly using "),aFe=n(YQe,"CODE",{});var NLt=s(aFe);fhr=r(NLt,"__init__()"),NLt.forEach(t),ghr=r(YQe," (throws an error)."),YQe.forEach(t),hhr=i(Fl),At=n(Fl,"DIV",{class:!0});var O7=s(At);T(c9.$$.fragment,O7),uhr=i(O7),nFe=n(O7,"P",{});var qLt=s(nFe);phr=r(qLt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),qLt.forEach(t),_hr=i(O7),Dd=n(O7,"P",{});var fte=s(Dd);bhr=r(fte,`Note:
Loading a model from its configuration file does `),sFe=n(fte,"STRONG",{});var jLt=s(sFe);vhr=r(jLt,"not"),jLt.forEach(t),Fhr=r(fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),EH=n(fte,"A",{href:!0});var DLt=s(EH);Thr=r(DLt,"from_pretrained()"),DLt.forEach(t),Mhr=r(fte," to load the model weights."),fte.forEach(t),Ehr=i(O7),T(w4.$$.fragment,O7),O7.forEach(t),Chr=i(Fl),uo=n(Fl,"DIV",{class:!0});var wa=s(uo);T(m9.$$.fragment,wa),whr=i(wa),lFe=n(wa,"P",{});var GLt=s(lFe);Ahr=r(GLt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),GLt.forEach(t),Lhr=i(wa),Za=n(wa,"P",{});var V7=s(Za);yhr=r(V7,"The model class to instantiate is selected based on the "),iFe=n(V7,"CODE",{});var OLt=s(iFe);xhr=r(OLt,"model_type"),OLt.forEach(t),$hr=r(V7,` property of the config object (either
passed as an argument or loaded from `),dFe=n(V7,"CODE",{});var VLt=s(dFe);khr=r(VLt,"pretrained_model_name_or_path"),VLt.forEach(t),Shr=r(V7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=n(V7,"CODE",{});var XLt=s(cFe);Rhr=r(XLt,"pretrained_model_name_or_path"),XLt.forEach(t),Phr=r(V7,":"),V7.forEach(t),Bhr=i(wa),f9=n(wa,"UL",{});var KQe=s(f9);A4=n(KQe,"LI",{});var $Ne=s(A4);mFe=n($Ne,"STRONG",{});var zLt=s(mFe);Ihr=r(zLt,"speech-encoder-decoder"),zLt.forEach(t),Nhr=r($Ne," \u2014 "),CH=n($Ne,"A",{href:!0});var QLt=s(CH);qhr=r(QLt,"SpeechEncoderDecoderModel"),QLt.forEach(t),jhr=r($Ne," (Speech Encoder decoder model)"),$Ne.forEach(t),Dhr=i(KQe),L4=n(KQe,"LI",{});var kNe=s(L4);fFe=n(kNe,"STRONG",{});var WLt=s(fFe);Ghr=r(WLt,"speech_to_text"),WLt.forEach(t),Ohr=r(kNe," \u2014 "),wH=n(kNe,"A",{href:!0});var HLt=s(wH);Vhr=r(HLt,"Speech2TextForConditionalGeneration"),HLt.forEach(t),Xhr=r(kNe," (Speech2Text model)"),kNe.forEach(t),KQe.forEach(t),zhr=i(wa),y4=n(wa,"P",{});var SNe=s(y4);Qhr=r(SNe,"The model is set in evaluation mode by default using "),gFe=n(SNe,"CODE",{});var ULt=s(gFe);Whr=r(ULt,"model.eval()"),ULt.forEach(t),Hhr=r(SNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hFe=n(SNe,"CODE",{});var JLt=s(hFe);Uhr=r(JLt,"model.train()"),JLt.forEach(t),SNe.forEach(t),Jhr=i(wa),T(x4.$$.fragment,wa),wa.forEach(t),Fl.forEach(t),QXe=i(m),Gd=n(m,"H2",{class:!0});var ZQe=s(Gd);$4=n(ZQe,"A",{id:!0,class:!0,href:!0});var YLt=s($4);uFe=n(YLt,"SPAN",{});var KLt=s(uFe);T(g9.$$.fragment,KLt),KLt.forEach(t),YLt.forEach(t),Yhr=i(ZQe),pFe=n(ZQe,"SPAN",{});var ZLt=s(pFe);Khr=r(ZLt,"AutoModelForAudioXVector"),ZLt.forEach(t),ZQe.forEach(t),WXe=i(m),Uo=n(m,"DIV",{class:!0});var Tl=s(Uo);T(h9.$$.fragment,Tl),Zhr=i(Tl),Od=n(Tl,"P",{});var gte=s(Od);eur=r(gte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),AH=n(gte,"A",{href:!0});var eyt=s(AH);our=r(eyt,"from_pretrained()"),eyt.forEach(t),rur=r(gte," class method or the "),LH=n(gte,"A",{href:!0});var oyt=s(LH);tur=r(oyt,"from_config()"),oyt.forEach(t),aur=r(gte,` class
method.`),gte.forEach(t),nur=i(Tl),u9=n(Tl,"P",{});var eWe=s(u9);sur=r(eWe,"This class cannot be instantiated directly using "),_Fe=n(eWe,"CODE",{});var ryt=s(_Fe);lur=r(ryt,"__init__()"),ryt.forEach(t),iur=r(eWe," (throws an error)."),eWe.forEach(t),dur=i(Tl),Lt=n(Tl,"DIV",{class:!0});var X7=s(Lt);T(p9.$$.fragment,X7),cur=i(X7),bFe=n(X7,"P",{});var tyt=s(bFe);mur=r(tyt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),tyt.forEach(t),fur=i(X7),Vd=n(X7,"P",{});var hte=s(Vd);gur=r(hte,`Note:
Loading a model from its configuration file does `),vFe=n(hte,"STRONG",{});var ayt=s(vFe);hur=r(ayt,"not"),ayt.forEach(t),uur=r(hte,` load the model weights. It only affects the
model\u2019s configuration. Use `),yH=n(hte,"A",{href:!0});var nyt=s(yH);pur=r(nyt,"from_pretrained()"),nyt.forEach(t),_ur=r(hte," to load the model weights."),hte.forEach(t),bur=i(X7),T(k4.$$.fragment,X7),X7.forEach(t),vur=i(Tl),po=n(Tl,"DIV",{class:!0});var Aa=s(po);T(_9.$$.fragment,Aa),Fur=i(Aa),FFe=n(Aa,"P",{});var syt=s(FFe);Tur=r(syt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),syt.forEach(t),Mur=i(Aa),en=n(Aa,"P",{});var z7=s(en);Eur=r(z7,"The model class to instantiate is selected based on the "),TFe=n(z7,"CODE",{});var lyt=s(TFe);Cur=r(lyt,"model_type"),lyt.forEach(t),wur=r(z7,` property of the config object (either
passed as an argument or loaded from `),MFe=n(z7,"CODE",{});var iyt=s(MFe);Aur=r(iyt,"pretrained_model_name_or_path"),iyt.forEach(t),Lur=r(z7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=n(z7,"CODE",{});var dyt=s(EFe);yur=r(dyt,"pretrained_model_name_or_path"),dyt.forEach(t),xur=r(z7,":"),z7.forEach(t),$ur=i(Aa),tt=n(Aa,"UL",{});var Ml=s(tt);S4=n(Ml,"LI",{});var RNe=s(S4);CFe=n(RNe,"STRONG",{});var cyt=s(CFe);kur=r(cyt,"data2vec-audio"),cyt.forEach(t),Sur=r(RNe," \u2014 "),xH=n(RNe,"A",{href:!0});var myt=s(xH);Rur=r(myt,"Data2VecAudioForXVector"),myt.forEach(t),Pur=r(RNe," (Data2VecAudio model)"),RNe.forEach(t),Bur=i(Ml),R4=n(Ml,"LI",{});var PNe=s(R4);wFe=n(PNe,"STRONG",{});var fyt=s(wFe);Iur=r(fyt,"unispeech-sat"),fyt.forEach(t),Nur=r(PNe," \u2014 "),$H=n(PNe,"A",{href:!0});var gyt=s($H);qur=r(gyt,"UniSpeechSatForXVector"),gyt.forEach(t),jur=r(PNe," (UniSpeechSat model)"),PNe.forEach(t),Dur=i(Ml),P4=n(Ml,"LI",{});var BNe=s(P4);AFe=n(BNe,"STRONG",{});var hyt=s(AFe);Gur=r(hyt,"wav2vec2"),hyt.forEach(t),Our=r(BNe," \u2014 "),kH=n(BNe,"A",{href:!0});var uyt=s(kH);Vur=r(uyt,"Wav2Vec2ForXVector"),uyt.forEach(t),Xur=r(BNe," (Wav2Vec2 model)"),BNe.forEach(t),zur=i(Ml),B4=n(Ml,"LI",{});var INe=s(B4);LFe=n(INe,"STRONG",{});var pyt=s(LFe);Qur=r(pyt,"wav2vec2-conformer"),pyt.forEach(t),Wur=r(INe," \u2014 "),SH=n(INe,"A",{href:!0});var _yt=s(SH);Hur=r(_yt,"Wav2Vec2ConformerForXVector"),_yt.forEach(t),Uur=r(INe," (Wav2Vec2-Conformer model)"),INe.forEach(t),Jur=i(Ml),I4=n(Ml,"LI",{});var NNe=s(I4);yFe=n(NNe,"STRONG",{});var byt=s(yFe);Yur=r(byt,"wavlm"),byt.forEach(t),Kur=r(NNe," \u2014 "),RH=n(NNe,"A",{href:!0});var vyt=s(RH);Zur=r(vyt,"WavLMForXVector"),vyt.forEach(t),epr=r(NNe," (WavLM model)"),NNe.forEach(t),Ml.forEach(t),opr=i(Aa),N4=n(Aa,"P",{});var qNe=s(N4);rpr=r(qNe,"The model is set in evaluation mode by default using "),xFe=n(qNe,"CODE",{});var Fyt=s(xFe);tpr=r(Fyt,"model.eval()"),Fyt.forEach(t),apr=r(qNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$Fe=n(qNe,"CODE",{});var Tyt=s($Fe);npr=r(Tyt,"model.train()"),Tyt.forEach(t),qNe.forEach(t),spr=i(Aa),T(q4.$$.fragment,Aa),Aa.forEach(t),Tl.forEach(t),HXe=i(m),Xd=n(m,"H2",{class:!0});var oWe=s(Xd);j4=n(oWe,"A",{id:!0,class:!0,href:!0});var Myt=s(j4);kFe=n(Myt,"SPAN",{});var Eyt=s(kFe);T(b9.$$.fragment,Eyt),Eyt.forEach(t),Myt.forEach(t),lpr=i(oWe),SFe=n(oWe,"SPAN",{});var Cyt=s(SFe);ipr=r(Cyt,"AutoModelForMaskedImageModeling"),Cyt.forEach(t),oWe.forEach(t),UXe=i(m),Jo=n(m,"DIV",{class:!0});var El=s(Jo);T(v9.$$.fragment,El),dpr=i(El),zd=n(El,"P",{});var ute=s(zd);cpr=r(ute,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),PH=n(ute,"A",{href:!0});var wyt=s(PH);mpr=r(wyt,"from_pretrained()"),wyt.forEach(t),fpr=r(ute," class method or the "),BH=n(ute,"A",{href:!0});var Ayt=s(BH);gpr=r(Ayt,"from_config()"),Ayt.forEach(t),hpr=r(ute,` class
method.`),ute.forEach(t),upr=i(El),F9=n(El,"P",{});var rWe=s(F9);ppr=r(rWe,"This class cannot be instantiated directly using "),RFe=n(rWe,"CODE",{});var Lyt=s(RFe);_pr=r(Lyt,"__init__()"),Lyt.forEach(t),bpr=r(rWe," (throws an error)."),rWe.forEach(t),vpr=i(El),yt=n(El,"DIV",{class:!0});var Q7=s(yt);T(T9.$$.fragment,Q7),Fpr=i(Q7),PFe=n(Q7,"P",{});var yyt=s(PFe);Tpr=r(yyt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),yyt.forEach(t),Mpr=i(Q7),Qd=n(Q7,"P",{});var pte=s(Qd);Epr=r(pte,`Note:
Loading a model from its configuration file does `),BFe=n(pte,"STRONG",{});var xyt=s(BFe);Cpr=r(xyt,"not"),xyt.forEach(t),wpr=r(pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=n(pte,"A",{href:!0});var $yt=s(IH);Apr=r($yt,"from_pretrained()"),$yt.forEach(t),Lpr=r(pte," to load the model weights."),pte.forEach(t),ypr=i(Q7),T(D4.$$.fragment,Q7),Q7.forEach(t),xpr=i(El),_o=n(El,"DIV",{class:!0});var La=s(_o);T(M9.$$.fragment,La),$pr=i(La),IFe=n(La,"P",{});var kyt=s(IFe);kpr=r(kyt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),kyt.forEach(t),Spr=i(La),on=n(La,"P",{});var W7=s(on);Rpr=r(W7,"The model class to instantiate is selected based on the "),NFe=n(W7,"CODE",{});var Syt=s(NFe);Ppr=r(Syt,"model_type"),Syt.forEach(t),Bpr=r(W7,` property of the config object (either
passed as an argument or loaded from `),qFe=n(W7,"CODE",{});var Ryt=s(qFe);Ipr=r(Ryt,"pretrained_model_name_or_path"),Ryt.forEach(t),Npr=r(W7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jFe=n(W7,"CODE",{});var Pyt=s(jFe);qpr=r(Pyt,"pretrained_model_name_or_path"),Pyt.forEach(t),jpr=r(W7,":"),W7.forEach(t),Dpr=i(La),Wd=n(La,"UL",{});var _te=s(Wd);G4=n(_te,"LI",{});var jNe=s(G4);DFe=n(jNe,"STRONG",{});var Byt=s(DFe);Gpr=r(Byt,"deit"),Byt.forEach(t),Opr=r(jNe," \u2014 "),NH=n(jNe,"A",{href:!0});var Iyt=s(NH);Vpr=r(Iyt,"DeiTForMaskedImageModeling"),Iyt.forEach(t),Xpr=r(jNe," (DeiT model)"),jNe.forEach(t),zpr=i(_te),O4=n(_te,"LI",{});var DNe=s(O4);GFe=n(DNe,"STRONG",{});var Nyt=s(GFe);Qpr=r(Nyt,"swin"),Nyt.forEach(t),Wpr=r(DNe," \u2014 "),qH=n(DNe,"A",{href:!0});var qyt=s(qH);Hpr=r(qyt,"SwinForMaskedImageModeling"),qyt.forEach(t),Upr=r(DNe," (Swin Transformer model)"),DNe.forEach(t),Jpr=i(_te),V4=n(_te,"LI",{});var GNe=s(V4);OFe=n(GNe,"STRONG",{});var jyt=s(OFe);Ypr=r(jyt,"vit"),jyt.forEach(t),Kpr=r(GNe," \u2014 "),jH=n(GNe,"A",{href:!0});var Dyt=s(jH);Zpr=r(Dyt,"ViTForMaskedImageModeling"),Dyt.forEach(t),e_r=r(GNe," (ViT model)"),GNe.forEach(t),_te.forEach(t),o_r=i(La),X4=n(La,"P",{});var ONe=s(X4);r_r=r(ONe,"The model is set in evaluation mode by default using "),VFe=n(ONe,"CODE",{});var Gyt=s(VFe);t_r=r(Gyt,"model.eval()"),Gyt.forEach(t),a_r=r(ONe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),XFe=n(ONe,"CODE",{});var Oyt=s(XFe);n_r=r(Oyt,"model.train()"),Oyt.forEach(t),ONe.forEach(t),s_r=i(La),T(z4.$$.fragment,La),La.forEach(t),El.forEach(t),JXe=i(m),Hd=n(m,"H2",{class:!0});var tWe=s(Hd);Q4=n(tWe,"A",{id:!0,class:!0,href:!0});var Vyt=s(Q4);zFe=n(Vyt,"SPAN",{});var Xyt=s(zFe);T(E9.$$.fragment,Xyt),Xyt.forEach(t),Vyt.forEach(t),l_r=i(tWe),QFe=n(tWe,"SPAN",{});var zyt=s(QFe);i_r=r(zyt,"AutoModelForObjectDetection"),zyt.forEach(t),tWe.forEach(t),YXe=i(m),Yo=n(m,"DIV",{class:!0});var Cl=s(Yo);T(C9.$$.fragment,Cl),d_r=i(Cl),Ud=n(Cl,"P",{});var bte=s(Ud);c_r=r(bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),DH=n(bte,"A",{href:!0});var Qyt=s(DH);m_r=r(Qyt,"from_pretrained()"),Qyt.forEach(t),f_r=r(bte," class method or the "),GH=n(bte,"A",{href:!0});var Wyt=s(GH);g_r=r(Wyt,"from_config()"),Wyt.forEach(t),h_r=r(bte,` class
method.`),bte.forEach(t),u_r=i(Cl),w9=n(Cl,"P",{});var aWe=s(w9);p_r=r(aWe,"This class cannot be instantiated directly using "),WFe=n(aWe,"CODE",{});var Hyt=s(WFe);__r=r(Hyt,"__init__()"),Hyt.forEach(t),b_r=r(aWe," (throws an error)."),aWe.forEach(t),v_r=i(Cl),xt=n(Cl,"DIV",{class:!0});var H7=s(xt);T(A9.$$.fragment,H7),F_r=i(H7),HFe=n(H7,"P",{});var Uyt=s(HFe);T_r=r(Uyt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Uyt.forEach(t),M_r=i(H7),Jd=n(H7,"P",{});var vte=s(Jd);E_r=r(vte,`Note:
Loading a model from its configuration file does `),UFe=n(vte,"STRONG",{});var Jyt=s(UFe);C_r=r(Jyt,"not"),Jyt.forEach(t),w_r=r(vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),OH=n(vte,"A",{href:!0});var Yyt=s(OH);A_r=r(Yyt,"from_pretrained()"),Yyt.forEach(t),L_r=r(vte," to load the model weights."),vte.forEach(t),y_r=i(H7),T(W4.$$.fragment,H7),H7.forEach(t),x_r=i(Cl),bo=n(Cl,"DIV",{class:!0});var ya=s(bo);T(L9.$$.fragment,ya),$_r=i(ya),JFe=n(ya,"P",{});var Kyt=s(JFe);k_r=r(Kyt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Kyt.forEach(t),S_r=i(ya),rn=n(ya,"P",{});var U7=s(rn);R_r=r(U7,"The model class to instantiate is selected based on the "),YFe=n(U7,"CODE",{});var Zyt=s(YFe);P_r=r(Zyt,"model_type"),Zyt.forEach(t),B_r=r(U7,` property of the config object (either
passed as an argument or loaded from `),KFe=n(U7,"CODE",{});var e8t=s(KFe);I_r=r(e8t,"pretrained_model_name_or_path"),e8t.forEach(t),N_r=r(U7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZFe=n(U7,"CODE",{});var o8t=s(ZFe);q_r=r(o8t,"pretrained_model_name_or_path"),o8t.forEach(t),j_r=r(U7,":"),U7.forEach(t),D_r=i(ya),y9=n(ya,"UL",{});var nWe=s(y9);H4=n(nWe,"LI",{});var VNe=s(H4);eTe=n(VNe,"STRONG",{});var r8t=s(eTe);G_r=r(r8t,"detr"),r8t.forEach(t),O_r=r(VNe," \u2014 "),VH=n(VNe,"A",{href:!0});var t8t=s(VH);V_r=r(t8t,"DetrForObjectDetection"),t8t.forEach(t),X_r=r(VNe," (DETR model)"),VNe.forEach(t),z_r=i(nWe),U4=n(nWe,"LI",{});var XNe=s(U4);oTe=n(XNe,"STRONG",{});var a8t=s(oTe);Q_r=r(a8t,"yolos"),a8t.forEach(t),W_r=r(XNe," \u2014 "),XH=n(XNe,"A",{href:!0});var n8t=s(XH);H_r=r(n8t,"YolosForObjectDetection"),n8t.forEach(t),U_r=r(XNe," (YOLOS model)"),XNe.forEach(t),nWe.forEach(t),J_r=i(ya),J4=n(ya,"P",{});var zNe=s(J4);Y_r=r(zNe,"The model is set in evaluation mode by default using "),rTe=n(zNe,"CODE",{});var s8t=s(rTe);K_r=r(s8t,"model.eval()"),s8t.forEach(t),Z_r=r(zNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tTe=n(zNe,"CODE",{});var l8t=s(tTe);e2r=r(l8t,"model.train()"),l8t.forEach(t),zNe.forEach(t),o2r=i(ya),T(Y4.$$.fragment,ya),ya.forEach(t),Cl.forEach(t),KXe=i(m),Yd=n(m,"H2",{class:!0});var sWe=s(Yd);K4=n(sWe,"A",{id:!0,class:!0,href:!0});var i8t=s(K4);aTe=n(i8t,"SPAN",{});var d8t=s(aTe);T(x9.$$.fragment,d8t),d8t.forEach(t),i8t.forEach(t),r2r=i(sWe),nTe=n(sWe,"SPAN",{});var c8t=s(nTe);t2r=r(c8t,"AutoModelForImageSegmentation"),c8t.forEach(t),sWe.forEach(t),ZXe=i(m),Ko=n(m,"DIV",{class:!0});var wl=s(Ko);T($9.$$.fragment,wl),a2r=i(wl),Kd=n(wl,"P",{});var Fte=s(Kd);n2r=r(Fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),zH=n(Fte,"A",{href:!0});var m8t=s(zH);s2r=r(m8t,"from_pretrained()"),m8t.forEach(t),l2r=r(Fte," class method or the "),QH=n(Fte,"A",{href:!0});var f8t=s(QH);i2r=r(f8t,"from_config()"),f8t.forEach(t),d2r=r(Fte,` class
method.`),Fte.forEach(t),c2r=i(wl),k9=n(wl,"P",{});var lWe=s(k9);m2r=r(lWe,"This class cannot be instantiated directly using "),sTe=n(lWe,"CODE",{});var g8t=s(sTe);f2r=r(g8t,"__init__()"),g8t.forEach(t),g2r=r(lWe," (throws an error)."),lWe.forEach(t),h2r=i(wl),$t=n(wl,"DIV",{class:!0});var J7=s($t);T(S9.$$.fragment,J7),u2r=i(J7),lTe=n(J7,"P",{});var h8t=s(lTe);p2r=r(h8t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),h8t.forEach(t),_2r=i(J7),Zd=n(J7,"P",{});var Tte=s(Zd);b2r=r(Tte,`Note:
Loading a model from its configuration file does `),iTe=n(Tte,"STRONG",{});var u8t=s(iTe);v2r=r(u8t,"not"),u8t.forEach(t),F2r=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=n(Tte,"A",{href:!0});var p8t=s(WH);T2r=r(p8t,"from_pretrained()"),p8t.forEach(t),M2r=r(Tte," to load the model weights."),Tte.forEach(t),E2r=i(J7),T(Z4.$$.fragment,J7),J7.forEach(t),C2r=i(wl),vo=n(wl,"DIV",{class:!0});var xa=s(vo);T(R9.$$.fragment,xa),w2r=i(xa),dTe=n(xa,"P",{});var _8t=s(dTe);A2r=r(_8t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),_8t.forEach(t),L2r=i(xa),tn=n(xa,"P",{});var Y7=s(tn);y2r=r(Y7,"The model class to instantiate is selected based on the "),cTe=n(Y7,"CODE",{});var b8t=s(cTe);x2r=r(b8t,"model_type"),b8t.forEach(t),$2r=r(Y7,` property of the config object (either
passed as an argument or loaded from `),mTe=n(Y7,"CODE",{});var v8t=s(mTe);k2r=r(v8t,"pretrained_model_name_or_path"),v8t.forEach(t),S2r=r(Y7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fTe=n(Y7,"CODE",{});var F8t=s(fTe);R2r=r(F8t,"pretrained_model_name_or_path"),F8t.forEach(t),P2r=r(Y7,":"),Y7.forEach(t),B2r=i(xa),gTe=n(xa,"UL",{});var T8t=s(gTe);eE=n(T8t,"LI",{});var QNe=s(eE);hTe=n(QNe,"STRONG",{});var M8t=s(hTe);I2r=r(M8t,"detr"),M8t.forEach(t),N2r=r(QNe," \u2014 "),HH=n(QNe,"A",{href:!0});var E8t=s(HH);q2r=r(E8t,"DetrForSegmentation"),E8t.forEach(t),j2r=r(QNe," (DETR model)"),QNe.forEach(t),T8t.forEach(t),D2r=i(xa),oE=n(xa,"P",{});var WNe=s(oE);G2r=r(WNe,"The model is set in evaluation mode by default using "),uTe=n(WNe,"CODE",{});var C8t=s(uTe);O2r=r(C8t,"model.eval()"),C8t.forEach(t),V2r=r(WNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pTe=n(WNe,"CODE",{});var w8t=s(pTe);X2r=r(w8t,"model.train()"),w8t.forEach(t),WNe.forEach(t),z2r=i(xa),T(rE.$$.fragment,xa),xa.forEach(t),wl.forEach(t),eze=i(m),ec=n(m,"H2",{class:!0});var iWe=s(ec);tE=n(iWe,"A",{id:!0,class:!0,href:!0});var A8t=s(tE);_Te=n(A8t,"SPAN",{});var L8t=s(_Te);T(P9.$$.fragment,L8t),L8t.forEach(t),A8t.forEach(t),Q2r=i(iWe),bTe=n(iWe,"SPAN",{});var y8t=s(bTe);W2r=r(y8t,"AutoModelForSemanticSegmentation"),y8t.forEach(t),iWe.forEach(t),oze=i(m),Zo=n(m,"DIV",{class:!0});var Al=s(Zo);T(B9.$$.fragment,Al),H2r=i(Al),oc=n(Al,"P",{});var Mte=s(oc);U2r=r(Mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),UH=n(Mte,"A",{href:!0});var x8t=s(UH);J2r=r(x8t,"from_pretrained()"),x8t.forEach(t),Y2r=r(Mte," class method or the "),JH=n(Mte,"A",{href:!0});var $8t=s(JH);K2r=r($8t,"from_config()"),$8t.forEach(t),Z2r=r(Mte,` class
method.`),Mte.forEach(t),ebr=i(Al),I9=n(Al,"P",{});var dWe=s(I9);obr=r(dWe,"This class cannot be instantiated directly using "),vTe=n(dWe,"CODE",{});var k8t=s(vTe);rbr=r(k8t,"__init__()"),k8t.forEach(t),tbr=r(dWe," (throws an error)."),dWe.forEach(t),abr=i(Al),kt=n(Al,"DIV",{class:!0});var K7=s(kt);T(N9.$$.fragment,K7),nbr=i(K7),FTe=n(K7,"P",{});var S8t=s(FTe);sbr=r(S8t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),S8t.forEach(t),lbr=i(K7),rc=n(K7,"P",{});var Ete=s(rc);ibr=r(Ete,`Note:
Loading a model from its configuration file does `),TTe=n(Ete,"STRONG",{});var R8t=s(TTe);dbr=r(R8t,"not"),R8t.forEach(t),cbr=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=n(Ete,"A",{href:!0});var P8t=s(YH);mbr=r(P8t,"from_pretrained()"),P8t.forEach(t),fbr=r(Ete," to load the model weights."),Ete.forEach(t),gbr=i(K7),T(aE.$$.fragment,K7),K7.forEach(t),hbr=i(Al),Fo=n(Al,"DIV",{class:!0});var $a=s(Fo);T(q9.$$.fragment,$a),ubr=i($a),MTe=n($a,"P",{});var B8t=s(MTe);pbr=r(B8t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),B8t.forEach(t),_br=i($a),an=n($a,"P",{});var Z7=s(an);bbr=r(Z7,"The model class to instantiate is selected based on the "),ETe=n(Z7,"CODE",{});var I8t=s(ETe);vbr=r(I8t,"model_type"),I8t.forEach(t),Fbr=r(Z7,` property of the config object (either
passed as an argument or loaded from `),CTe=n(Z7,"CODE",{});var N8t=s(CTe);Tbr=r(N8t,"pretrained_model_name_or_path"),N8t.forEach(t),Mbr=r(Z7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wTe=n(Z7,"CODE",{});var q8t=s(wTe);Ebr=r(q8t,"pretrained_model_name_or_path"),q8t.forEach(t),Cbr=r(Z7,":"),Z7.forEach(t),wbr=i($a),at=n($a,"UL",{});var Ll=s(at);nE=n(Ll,"LI",{});var HNe=s(nE);ATe=n(HNe,"STRONG",{});var j8t=s(ATe);Abr=r(j8t,"beit"),j8t.forEach(t),Lbr=r(HNe," \u2014 "),KH=n(HNe,"A",{href:!0});var D8t=s(KH);ybr=r(D8t,"BeitForSemanticSegmentation"),D8t.forEach(t),xbr=r(HNe," (BEiT model)"),HNe.forEach(t),$br=i(Ll),sE=n(Ll,"LI",{});var UNe=s(sE);LTe=n(UNe,"STRONG",{});var G8t=s(LTe);kbr=r(G8t,"data2vec-vision"),G8t.forEach(t),Sbr=r(UNe," \u2014 "),ZH=n(UNe,"A",{href:!0});var O8t=s(ZH);Rbr=r(O8t,"Data2VecVisionForSemanticSegmentation"),O8t.forEach(t),Pbr=r(UNe," (Data2VecVision model)"),UNe.forEach(t),Bbr=i(Ll),lE=n(Ll,"LI",{});var JNe=s(lE);yTe=n(JNe,"STRONG",{});var V8t=s(yTe);Ibr=r(V8t,"dpt"),V8t.forEach(t),Nbr=r(JNe," \u2014 "),eU=n(JNe,"A",{href:!0});var X8t=s(eU);qbr=r(X8t,"DPTForSemanticSegmentation"),X8t.forEach(t),jbr=r(JNe," (DPT model)"),JNe.forEach(t),Dbr=i(Ll),iE=n(Ll,"LI",{});var YNe=s(iE);xTe=n(YNe,"STRONG",{});var z8t=s(xTe);Gbr=r(z8t,"mobilevit"),z8t.forEach(t),Obr=r(YNe," \u2014 "),oU=n(YNe,"A",{href:!0});var Q8t=s(oU);Vbr=r(Q8t,"MobileViTForSemanticSegmentation"),Q8t.forEach(t),Xbr=r(YNe," (MobileViT model)"),YNe.forEach(t),zbr=i(Ll),dE=n(Ll,"LI",{});var KNe=s(dE);$Te=n(KNe,"STRONG",{});var W8t=s($Te);Qbr=r(W8t,"segformer"),W8t.forEach(t),Wbr=r(KNe," \u2014 "),rU=n(KNe,"A",{href:!0});var H8t=s(rU);Hbr=r(H8t,"SegformerForSemanticSegmentation"),H8t.forEach(t),Ubr=r(KNe," (SegFormer model)"),KNe.forEach(t),Ll.forEach(t),Jbr=i($a),cE=n($a,"P",{});var ZNe=s(cE);Ybr=r(ZNe,"The model is set in evaluation mode by default using "),kTe=n(ZNe,"CODE",{});var U8t=s(kTe);Kbr=r(U8t,"model.eval()"),U8t.forEach(t),Zbr=r(ZNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),STe=n(ZNe,"CODE",{});var J8t=s(STe);evr=r(J8t,"model.train()"),J8t.forEach(t),ZNe.forEach(t),ovr=i($a),T(mE.$$.fragment,$a),$a.forEach(t),Al.forEach(t),rze=i(m),tc=n(m,"H2",{class:!0});var cWe=s(tc);fE=n(cWe,"A",{id:!0,class:!0,href:!0});var Y8t=s(fE);RTe=n(Y8t,"SPAN",{});var K8t=s(RTe);T(j9.$$.fragment,K8t),K8t.forEach(t),Y8t.forEach(t),rvr=i(cWe),PTe=n(cWe,"SPAN",{});var Z8t=s(PTe);tvr=r(Z8t,"AutoModelForInstanceSegmentation"),Z8t.forEach(t),cWe.forEach(t),tze=i(m),er=n(m,"DIV",{class:!0});var yl=s(er);T(D9.$$.fragment,yl),avr=i(yl),ac=n(yl,"P",{});var Cte=s(ac);nvr=r(Cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),tU=n(Cte,"A",{href:!0});var e9t=s(tU);svr=r(e9t,"from_pretrained()"),e9t.forEach(t),lvr=r(Cte," class method or the "),aU=n(Cte,"A",{href:!0});var o9t=s(aU);ivr=r(o9t,"from_config()"),o9t.forEach(t),dvr=r(Cte,` class
method.`),Cte.forEach(t),cvr=i(yl),G9=n(yl,"P",{});var mWe=s(G9);mvr=r(mWe,"This class cannot be instantiated directly using "),BTe=n(mWe,"CODE",{});var r9t=s(BTe);fvr=r(r9t,"__init__()"),r9t.forEach(t),gvr=r(mWe," (throws an error)."),mWe.forEach(t),hvr=i(yl),St=n(yl,"DIV",{class:!0});var eL=s(St);T(O9.$$.fragment,eL),uvr=i(eL),ITe=n(eL,"P",{});var t9t=s(ITe);pvr=r(t9t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),t9t.forEach(t),_vr=i(eL),nc=n(eL,"P",{});var wte=s(nc);bvr=r(wte,`Note:
Loading a model from its configuration file does `),NTe=n(wte,"STRONG",{});var a9t=s(NTe);vvr=r(a9t,"not"),a9t.forEach(t),Fvr=r(wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=n(wte,"A",{href:!0});var n9t=s(nU);Tvr=r(n9t,"from_pretrained()"),n9t.forEach(t),Mvr=r(wte," to load the model weights."),wte.forEach(t),Evr=i(eL),T(gE.$$.fragment,eL),eL.forEach(t),Cvr=i(yl),To=n(yl,"DIV",{class:!0});var ka=s(To);T(V9.$$.fragment,ka),wvr=i(ka),qTe=n(ka,"P",{});var s9t=s(qTe);Avr=r(s9t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),s9t.forEach(t),Lvr=i(ka),nn=n(ka,"P",{});var oL=s(nn);yvr=r(oL,"The model class to instantiate is selected based on the "),jTe=n(oL,"CODE",{});var l9t=s(jTe);xvr=r(l9t,"model_type"),l9t.forEach(t),$vr=r(oL,` property of the config object (either
passed as an argument or loaded from `),DTe=n(oL,"CODE",{});var i9t=s(DTe);kvr=r(i9t,"pretrained_model_name_or_path"),i9t.forEach(t),Svr=r(oL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GTe=n(oL,"CODE",{});var d9t=s(GTe);Rvr=r(d9t,"pretrained_model_name_or_path"),d9t.forEach(t),Pvr=r(oL,":"),oL.forEach(t),Bvr=i(ka),OTe=n(ka,"UL",{});var c9t=s(OTe);hE=n(c9t,"LI",{});var eqe=s(hE);VTe=n(eqe,"STRONG",{});var m9t=s(VTe);Ivr=r(m9t,"maskformer"),m9t.forEach(t),Nvr=r(eqe," \u2014 "),sU=n(eqe,"A",{href:!0});var f9t=s(sU);qvr=r(f9t,"MaskFormerForInstanceSegmentation"),f9t.forEach(t),jvr=r(eqe," (MaskFormer model)"),eqe.forEach(t),c9t.forEach(t),Dvr=i(ka),uE=n(ka,"P",{});var oqe=s(uE);Gvr=r(oqe,"The model is set in evaluation mode by default using "),XTe=n(oqe,"CODE",{});var g9t=s(XTe);Ovr=r(g9t,"model.eval()"),g9t.forEach(t),Vvr=r(oqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zTe=n(oqe,"CODE",{});var h9t=s(zTe);Xvr=r(h9t,"model.train()"),h9t.forEach(t),oqe.forEach(t),zvr=i(ka),T(pE.$$.fragment,ka),ka.forEach(t),yl.forEach(t),aze=i(m),sc=n(m,"H2",{class:!0});var fWe=s(sc);_E=n(fWe,"A",{id:!0,class:!0,href:!0});var u9t=s(_E);QTe=n(u9t,"SPAN",{});var p9t=s(QTe);T(X9.$$.fragment,p9t),p9t.forEach(t),u9t.forEach(t),Qvr=i(fWe),WTe=n(fWe,"SPAN",{});var _9t=s(WTe);Wvr=r(_9t,"TFAutoModel"),_9t.forEach(t),fWe.forEach(t),nze=i(m),or=n(m,"DIV",{class:!0});var xl=s(or);T(z9.$$.fragment,xl),Hvr=i(xl),lc=n(xl,"P",{});var Ate=s(lc);Uvr=r(Ate,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lU=n(Ate,"A",{href:!0});var b9t=s(lU);Jvr=r(b9t,"from_pretrained()"),b9t.forEach(t),Yvr=r(Ate," class method or the "),iU=n(Ate,"A",{href:!0});var v9t=s(iU);Kvr=r(v9t,"from_config()"),v9t.forEach(t),Zvr=r(Ate,` class
method.`),Ate.forEach(t),e1r=i(xl),Q9=n(xl,"P",{});var gWe=s(Q9);o1r=r(gWe,"This class cannot be instantiated directly using "),HTe=n(gWe,"CODE",{});var F9t=s(HTe);r1r=r(F9t,"__init__()"),F9t.forEach(t),t1r=r(gWe," (throws an error)."),gWe.forEach(t),a1r=i(xl),Rt=n(xl,"DIV",{class:!0});var rL=s(Rt);T(W9.$$.fragment,rL),n1r=i(rL),UTe=n(rL,"P",{});var T9t=s(UTe);s1r=r(T9t,"Instantiates one of the base model classes of the library from a configuration."),T9t.forEach(t),l1r=i(rL),ic=n(rL,"P",{});var Lte=s(ic);i1r=r(Lte,`Note:
Loading a model from its configuration file does `),JTe=n(Lte,"STRONG",{});var M9t=s(JTe);d1r=r(M9t,"not"),M9t.forEach(t),c1r=r(Lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=n(Lte,"A",{href:!0});var E9t=s(dU);m1r=r(E9t,"from_pretrained()"),E9t.forEach(t),f1r=r(Lte," to load the model weights."),Lte.forEach(t),g1r=i(rL),T(bE.$$.fragment,rL),rL.forEach(t),h1r=i(xl),xr=n(xl,"DIV",{class:!0});var $l=s(xr);T(H9.$$.fragment,$l),u1r=i($l),YTe=n($l,"P",{});var C9t=s(YTe);p1r=r(C9t,"Instantiate one of the base model classes of the library from a pretrained model."),C9t.forEach(t),_1r=i($l),sn=n($l,"P",{});var tL=s(sn);b1r=r(tL,"The model class to instantiate is selected based on the "),KTe=n(tL,"CODE",{});var w9t=s(KTe);v1r=r(w9t,"model_type"),w9t.forEach(t),F1r=r(tL,` property of the config object (either
passed as an argument or loaded from `),ZTe=n(tL,"CODE",{});var A9t=s(ZTe);T1r=r(A9t,"pretrained_model_name_or_path"),A9t.forEach(t),M1r=r(tL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eMe=n(tL,"CODE",{});var L9t=s(eMe);E1r=r(L9t,"pretrained_model_name_or_path"),L9t.forEach(t),C1r=r(tL,":"),tL.forEach(t),w1r=i($l),q=n($l,"UL",{});var D=s(q);vE=n(D,"LI",{});var rqe=s(vE);oMe=n(rqe,"STRONG",{});var y9t=s(oMe);A1r=r(y9t,"albert"),y9t.forEach(t),L1r=r(rqe," \u2014 "),cU=n(rqe,"A",{href:!0});var x9t=s(cU);y1r=r(x9t,"TFAlbertModel"),x9t.forEach(t),x1r=r(rqe," (ALBERT model)"),rqe.forEach(t),$1r=i(D),FE=n(D,"LI",{});var tqe=s(FE);rMe=n(tqe,"STRONG",{});var $9t=s(rMe);k1r=r($9t,"bart"),$9t.forEach(t),S1r=r(tqe," \u2014 "),mU=n(tqe,"A",{href:!0});var k9t=s(mU);R1r=r(k9t,"TFBartModel"),k9t.forEach(t),P1r=r(tqe," (BART model)"),tqe.forEach(t),B1r=i(D),TE=n(D,"LI",{});var aqe=s(TE);tMe=n(aqe,"STRONG",{});var S9t=s(tMe);I1r=r(S9t,"bert"),S9t.forEach(t),N1r=r(aqe," \u2014 "),fU=n(aqe,"A",{href:!0});var R9t=s(fU);q1r=r(R9t,"TFBertModel"),R9t.forEach(t),j1r=r(aqe," (BERT model)"),aqe.forEach(t),D1r=i(D),ME=n(D,"LI",{});var nqe=s(ME);aMe=n(nqe,"STRONG",{});var P9t=s(aMe);G1r=r(P9t,"blenderbot"),P9t.forEach(t),O1r=r(nqe," \u2014 "),gU=n(nqe,"A",{href:!0});var B9t=s(gU);V1r=r(B9t,"TFBlenderbotModel"),B9t.forEach(t),X1r=r(nqe," (Blenderbot model)"),nqe.forEach(t),z1r=i(D),EE=n(D,"LI",{});var sqe=s(EE);nMe=n(sqe,"STRONG",{});var I9t=s(nMe);Q1r=r(I9t,"blenderbot-small"),I9t.forEach(t),W1r=r(sqe," \u2014 "),hU=n(sqe,"A",{href:!0});var N9t=s(hU);H1r=r(N9t,"TFBlenderbotSmallModel"),N9t.forEach(t),U1r=r(sqe," (BlenderbotSmall model)"),sqe.forEach(t),J1r=i(D),CE=n(D,"LI",{});var lqe=s(CE);sMe=n(lqe,"STRONG",{});var q9t=s(sMe);Y1r=r(q9t,"camembert"),q9t.forEach(t),K1r=r(lqe," \u2014 "),uU=n(lqe,"A",{href:!0});var j9t=s(uU);Z1r=r(j9t,"TFCamembertModel"),j9t.forEach(t),eFr=r(lqe," (CamemBERT model)"),lqe.forEach(t),oFr=i(D),wE=n(D,"LI",{});var iqe=s(wE);lMe=n(iqe,"STRONG",{});var D9t=s(lMe);rFr=r(D9t,"clip"),D9t.forEach(t),tFr=r(iqe," \u2014 "),pU=n(iqe,"A",{href:!0});var G9t=s(pU);aFr=r(G9t,"TFCLIPModel"),G9t.forEach(t),nFr=r(iqe," (CLIP model)"),iqe.forEach(t),sFr=i(D),AE=n(D,"LI",{});var dqe=s(AE);iMe=n(dqe,"STRONG",{});var O9t=s(iMe);lFr=r(O9t,"convbert"),O9t.forEach(t),iFr=r(dqe," \u2014 "),_U=n(dqe,"A",{href:!0});var V9t=s(_U);dFr=r(V9t,"TFConvBertModel"),V9t.forEach(t),cFr=r(dqe," (ConvBERT model)"),dqe.forEach(t),mFr=i(D),LE=n(D,"LI",{});var cqe=s(LE);dMe=n(cqe,"STRONG",{});var X9t=s(dMe);fFr=r(X9t,"convnext"),X9t.forEach(t),gFr=r(cqe," \u2014 "),bU=n(cqe,"A",{href:!0});var z9t=s(bU);hFr=r(z9t,"TFConvNextModel"),z9t.forEach(t),uFr=r(cqe," (ConvNeXT model)"),cqe.forEach(t),pFr=i(D),yE=n(D,"LI",{});var mqe=s(yE);cMe=n(mqe,"STRONG",{});var Q9t=s(cMe);_Fr=r(Q9t,"ctrl"),Q9t.forEach(t),bFr=r(mqe," \u2014 "),vU=n(mqe,"A",{href:!0});var W9t=s(vU);vFr=r(W9t,"TFCTRLModel"),W9t.forEach(t),FFr=r(mqe," (CTRL model)"),mqe.forEach(t),TFr=i(D),xE=n(D,"LI",{});var fqe=s(xE);mMe=n(fqe,"STRONG",{});var H9t=s(mMe);MFr=r(H9t,"data2vec-vision"),H9t.forEach(t),EFr=r(fqe," \u2014 "),FU=n(fqe,"A",{href:!0});var U9t=s(FU);CFr=r(U9t,"TFData2VecVisionModel"),U9t.forEach(t),wFr=r(fqe," (Data2VecVision model)"),fqe.forEach(t),AFr=i(D),$E=n(D,"LI",{});var gqe=s($E);fMe=n(gqe,"STRONG",{});var J9t=s(fMe);LFr=r(J9t,"deberta"),J9t.forEach(t),yFr=r(gqe," \u2014 "),TU=n(gqe,"A",{href:!0});var Y9t=s(TU);xFr=r(Y9t,"TFDebertaModel"),Y9t.forEach(t),$Fr=r(gqe," (DeBERTa model)"),gqe.forEach(t),kFr=i(D),kE=n(D,"LI",{});var hqe=s(kE);gMe=n(hqe,"STRONG",{});var K9t=s(gMe);SFr=r(K9t,"deberta-v2"),K9t.forEach(t),RFr=r(hqe," \u2014 "),MU=n(hqe,"A",{href:!0});var Z9t=s(MU);PFr=r(Z9t,"TFDebertaV2Model"),Z9t.forEach(t),BFr=r(hqe," (DeBERTa-v2 model)"),hqe.forEach(t),IFr=i(D),SE=n(D,"LI",{});var uqe=s(SE);hMe=n(uqe,"STRONG",{});var ext=s(hMe);NFr=r(ext,"deit"),ext.forEach(t),qFr=r(uqe," \u2014 "),EU=n(uqe,"A",{href:!0});var oxt=s(EU);jFr=r(oxt,"TFDeiTModel"),oxt.forEach(t),DFr=r(uqe," (DeiT model)"),uqe.forEach(t),GFr=i(D),RE=n(D,"LI",{});var pqe=s(RE);uMe=n(pqe,"STRONG",{});var rxt=s(uMe);OFr=r(rxt,"distilbert"),rxt.forEach(t),VFr=r(pqe," \u2014 "),CU=n(pqe,"A",{href:!0});var txt=s(CU);XFr=r(txt,"TFDistilBertModel"),txt.forEach(t),zFr=r(pqe," (DistilBERT model)"),pqe.forEach(t),QFr=i(D),PE=n(D,"LI",{});var _qe=s(PE);pMe=n(_qe,"STRONG",{});var axt=s(pMe);WFr=r(axt,"dpr"),axt.forEach(t),HFr=r(_qe," \u2014 "),wU=n(_qe,"A",{href:!0});var nxt=s(wU);UFr=r(nxt,"TFDPRQuestionEncoder"),nxt.forEach(t),JFr=r(_qe," (DPR model)"),_qe.forEach(t),YFr=i(D),BE=n(D,"LI",{});var bqe=s(BE);_Me=n(bqe,"STRONG",{});var sxt=s(_Me);KFr=r(sxt,"electra"),sxt.forEach(t),ZFr=r(bqe," \u2014 "),AU=n(bqe,"A",{href:!0});var lxt=s(AU);eTr=r(lxt,"TFElectraModel"),lxt.forEach(t),oTr=r(bqe," (ELECTRA model)"),bqe.forEach(t),rTr=i(D),IE=n(D,"LI",{});var vqe=s(IE);bMe=n(vqe,"STRONG",{});var ixt=s(bMe);tTr=r(ixt,"flaubert"),ixt.forEach(t),aTr=r(vqe," \u2014 "),LU=n(vqe,"A",{href:!0});var dxt=s(LU);nTr=r(dxt,"TFFlaubertModel"),dxt.forEach(t),sTr=r(vqe," (FlauBERT model)"),vqe.forEach(t),lTr=i(D),Js=n(D,"LI",{});var RS=s(Js);vMe=n(RS,"STRONG",{});var cxt=s(vMe);iTr=r(cxt,"funnel"),cxt.forEach(t),dTr=r(RS," \u2014 "),yU=n(RS,"A",{href:!0});var mxt=s(yU);cTr=r(mxt,"TFFunnelModel"),mxt.forEach(t),mTr=r(RS," or "),xU=n(RS,"A",{href:!0});var fxt=s(xU);fTr=r(fxt,"TFFunnelBaseModel"),fxt.forEach(t),gTr=r(RS," (Funnel Transformer model)"),RS.forEach(t),hTr=i(D),NE=n(D,"LI",{});var Fqe=s(NE);FMe=n(Fqe,"STRONG",{});var gxt=s(FMe);uTr=r(gxt,"gpt2"),gxt.forEach(t),pTr=r(Fqe," \u2014 "),$U=n(Fqe,"A",{href:!0});var hxt=s($U);_Tr=r(hxt,"TFGPT2Model"),hxt.forEach(t),bTr=r(Fqe," (OpenAI GPT-2 model)"),Fqe.forEach(t),vTr=i(D),qE=n(D,"LI",{});var Tqe=s(qE);TMe=n(Tqe,"STRONG",{});var uxt=s(TMe);FTr=r(uxt,"gptj"),uxt.forEach(t),TTr=r(Tqe," \u2014 "),kU=n(Tqe,"A",{href:!0});var pxt=s(kU);MTr=r(pxt,"TFGPTJModel"),pxt.forEach(t),ETr=r(Tqe," (GPT-J model)"),Tqe.forEach(t),CTr=i(D),jE=n(D,"LI",{});var Mqe=s(jE);MMe=n(Mqe,"STRONG",{});var _xt=s(MMe);wTr=r(_xt,"hubert"),_xt.forEach(t),ATr=r(Mqe," \u2014 "),SU=n(Mqe,"A",{href:!0});var bxt=s(SU);LTr=r(bxt,"TFHubertModel"),bxt.forEach(t),yTr=r(Mqe," (Hubert model)"),Mqe.forEach(t),xTr=i(D),DE=n(D,"LI",{});var Eqe=s(DE);EMe=n(Eqe,"STRONG",{});var vxt=s(EMe);$Tr=r(vxt,"layoutlm"),vxt.forEach(t),kTr=r(Eqe," \u2014 "),RU=n(Eqe,"A",{href:!0});var Fxt=s(RU);STr=r(Fxt,"TFLayoutLMModel"),Fxt.forEach(t),RTr=r(Eqe," (LayoutLM model)"),Eqe.forEach(t),PTr=i(D),GE=n(D,"LI",{});var Cqe=s(GE);CMe=n(Cqe,"STRONG",{});var Txt=s(CMe);BTr=r(Txt,"led"),Txt.forEach(t),ITr=r(Cqe," \u2014 "),PU=n(Cqe,"A",{href:!0});var Mxt=s(PU);NTr=r(Mxt,"TFLEDModel"),Mxt.forEach(t),qTr=r(Cqe," (LED model)"),Cqe.forEach(t),jTr=i(D),OE=n(D,"LI",{});var wqe=s(OE);wMe=n(wqe,"STRONG",{});var Ext=s(wMe);DTr=r(Ext,"longformer"),Ext.forEach(t),GTr=r(wqe," \u2014 "),BU=n(wqe,"A",{href:!0});var Cxt=s(BU);OTr=r(Cxt,"TFLongformerModel"),Cxt.forEach(t),VTr=r(wqe," (Longformer model)"),wqe.forEach(t),XTr=i(D),VE=n(D,"LI",{});var Aqe=s(VE);AMe=n(Aqe,"STRONG",{});var wxt=s(AMe);zTr=r(wxt,"lxmert"),wxt.forEach(t),QTr=r(Aqe," \u2014 "),IU=n(Aqe,"A",{href:!0});var Axt=s(IU);WTr=r(Axt,"TFLxmertModel"),Axt.forEach(t),HTr=r(Aqe," (LXMERT model)"),Aqe.forEach(t),UTr=i(D),XE=n(D,"LI",{});var Lqe=s(XE);LMe=n(Lqe,"STRONG",{});var Lxt=s(LMe);JTr=r(Lxt,"marian"),Lxt.forEach(t),YTr=r(Lqe," \u2014 "),NU=n(Lqe,"A",{href:!0});var yxt=s(NU);KTr=r(yxt,"TFMarianModel"),yxt.forEach(t),ZTr=r(Lqe," (Marian model)"),Lqe.forEach(t),eMr=i(D),zE=n(D,"LI",{});var yqe=s(zE);yMe=n(yqe,"STRONG",{});var xxt=s(yMe);oMr=r(xxt,"mbart"),xxt.forEach(t),rMr=r(yqe," \u2014 "),qU=n(yqe,"A",{href:!0});var $xt=s(qU);tMr=r($xt,"TFMBartModel"),$xt.forEach(t),aMr=r(yqe," (mBART model)"),yqe.forEach(t),nMr=i(D),QE=n(D,"LI",{});var xqe=s(QE);xMe=n(xqe,"STRONG",{});var kxt=s(xMe);sMr=r(kxt,"mobilebert"),kxt.forEach(t),lMr=r(xqe," \u2014 "),jU=n(xqe,"A",{href:!0});var Sxt=s(jU);iMr=r(Sxt,"TFMobileBertModel"),Sxt.forEach(t),dMr=r(xqe," (MobileBERT model)"),xqe.forEach(t),cMr=i(D),WE=n(D,"LI",{});var $qe=s(WE);$Me=n($qe,"STRONG",{});var Rxt=s($Me);mMr=r(Rxt,"mpnet"),Rxt.forEach(t),fMr=r($qe," \u2014 "),DU=n($qe,"A",{href:!0});var Pxt=s(DU);gMr=r(Pxt,"TFMPNetModel"),Pxt.forEach(t),hMr=r($qe," (MPNet model)"),$qe.forEach(t),uMr=i(D),HE=n(D,"LI",{});var kqe=s(HE);kMe=n(kqe,"STRONG",{});var Bxt=s(kMe);pMr=r(Bxt,"mt5"),Bxt.forEach(t),_Mr=r(kqe," \u2014 "),GU=n(kqe,"A",{href:!0});var Ixt=s(GU);bMr=r(Ixt,"TFMT5Model"),Ixt.forEach(t),vMr=r(kqe," (MT5 model)"),kqe.forEach(t),FMr=i(D),UE=n(D,"LI",{});var Sqe=s(UE);SMe=n(Sqe,"STRONG",{});var Nxt=s(SMe);TMr=r(Nxt,"openai-gpt"),Nxt.forEach(t),MMr=r(Sqe," \u2014 "),OU=n(Sqe,"A",{href:!0});var qxt=s(OU);EMr=r(qxt,"TFOpenAIGPTModel"),qxt.forEach(t),CMr=r(Sqe," (OpenAI GPT model)"),Sqe.forEach(t),wMr=i(D),JE=n(D,"LI",{});var Rqe=s(JE);RMe=n(Rqe,"STRONG",{});var jxt=s(RMe);AMr=r(jxt,"opt"),jxt.forEach(t),LMr=r(Rqe," \u2014 "),VU=n(Rqe,"A",{href:!0});var Dxt=s(VU);yMr=r(Dxt,"TFOPTModel"),Dxt.forEach(t),xMr=r(Rqe," (OPT model)"),Rqe.forEach(t),$Mr=i(D),YE=n(D,"LI",{});var Pqe=s(YE);PMe=n(Pqe,"STRONG",{});var Gxt=s(PMe);kMr=r(Gxt,"pegasus"),Gxt.forEach(t),SMr=r(Pqe," \u2014 "),XU=n(Pqe,"A",{href:!0});var Oxt=s(XU);RMr=r(Oxt,"TFPegasusModel"),Oxt.forEach(t),PMr=r(Pqe," (Pegasus model)"),Pqe.forEach(t),BMr=i(D),KE=n(D,"LI",{});var Bqe=s(KE);BMe=n(Bqe,"STRONG",{});var Vxt=s(BMe);IMr=r(Vxt,"regnet"),Vxt.forEach(t),NMr=r(Bqe," \u2014 "),zU=n(Bqe,"A",{href:!0});var Xxt=s(zU);qMr=r(Xxt,"TFRegNetModel"),Xxt.forEach(t),jMr=r(Bqe," (RegNet model)"),Bqe.forEach(t),DMr=i(D),ZE=n(D,"LI",{});var Iqe=s(ZE);IMe=n(Iqe,"STRONG",{});var zxt=s(IMe);GMr=r(zxt,"rembert"),zxt.forEach(t),OMr=r(Iqe," \u2014 "),QU=n(Iqe,"A",{href:!0});var Qxt=s(QU);VMr=r(Qxt,"TFRemBertModel"),Qxt.forEach(t),XMr=r(Iqe," (RemBERT model)"),Iqe.forEach(t),zMr=i(D),eC=n(D,"LI",{});var Nqe=s(eC);NMe=n(Nqe,"STRONG",{});var Wxt=s(NMe);QMr=r(Wxt,"resnet"),Wxt.forEach(t),WMr=r(Nqe," \u2014 "),WU=n(Nqe,"A",{href:!0});var Hxt=s(WU);HMr=r(Hxt,"TFResNetModel"),Hxt.forEach(t),UMr=r(Nqe," (ResNet model)"),Nqe.forEach(t),JMr=i(D),oC=n(D,"LI",{});var qqe=s(oC);qMe=n(qqe,"STRONG",{});var Uxt=s(qMe);YMr=r(Uxt,"roberta"),Uxt.forEach(t),KMr=r(qqe," \u2014 "),HU=n(qqe,"A",{href:!0});var Jxt=s(HU);ZMr=r(Jxt,"TFRobertaModel"),Jxt.forEach(t),e4r=r(qqe," (RoBERTa model)"),qqe.forEach(t),o4r=i(D),rC=n(D,"LI",{});var jqe=s(rC);jMe=n(jqe,"STRONG",{});var Yxt=s(jMe);r4r=r(Yxt,"roformer"),Yxt.forEach(t),t4r=r(jqe," \u2014 "),UU=n(jqe,"A",{href:!0});var Kxt=s(UU);a4r=r(Kxt,"TFRoFormerModel"),Kxt.forEach(t),n4r=r(jqe," (RoFormer model)"),jqe.forEach(t),s4r=i(D),tC=n(D,"LI",{});var Dqe=s(tC);DMe=n(Dqe,"STRONG",{});var Zxt=s(DMe);l4r=r(Zxt,"speech_to_text"),Zxt.forEach(t),i4r=r(Dqe," \u2014 "),JU=n(Dqe,"A",{href:!0});var e$t=s(JU);d4r=r(e$t,"TFSpeech2TextModel"),e$t.forEach(t),c4r=r(Dqe," (Speech2Text model)"),Dqe.forEach(t),m4r=i(D),aC=n(D,"LI",{});var Gqe=s(aC);GMe=n(Gqe,"STRONG",{});var o$t=s(GMe);f4r=r(o$t,"swin"),o$t.forEach(t),g4r=r(Gqe," \u2014 "),YU=n(Gqe,"A",{href:!0});var r$t=s(YU);h4r=r(r$t,"TFSwinModel"),r$t.forEach(t),u4r=r(Gqe," (Swin Transformer model)"),Gqe.forEach(t),p4r=i(D),nC=n(D,"LI",{});var Oqe=s(nC);OMe=n(Oqe,"STRONG",{});var t$t=s(OMe);_4r=r(t$t,"t5"),t$t.forEach(t),b4r=r(Oqe," \u2014 "),KU=n(Oqe,"A",{href:!0});var a$t=s(KU);v4r=r(a$t,"TFT5Model"),a$t.forEach(t),F4r=r(Oqe," (T5 model)"),Oqe.forEach(t),T4r=i(D),sC=n(D,"LI",{});var Vqe=s(sC);VMe=n(Vqe,"STRONG",{});var n$t=s(VMe);M4r=r(n$t,"tapas"),n$t.forEach(t),E4r=r(Vqe," \u2014 "),ZU=n(Vqe,"A",{href:!0});var s$t=s(ZU);C4r=r(s$t,"TFTapasModel"),s$t.forEach(t),w4r=r(Vqe," (TAPAS model)"),Vqe.forEach(t),A4r=i(D),lC=n(D,"LI",{});var Xqe=s(lC);XMe=n(Xqe,"STRONG",{});var l$t=s(XMe);L4r=r(l$t,"transfo-xl"),l$t.forEach(t),y4r=r(Xqe," \u2014 "),eJ=n(Xqe,"A",{href:!0});var i$t=s(eJ);x4r=r(i$t,"TFTransfoXLModel"),i$t.forEach(t),$4r=r(Xqe," (Transformer-XL model)"),Xqe.forEach(t),k4r=i(D),iC=n(D,"LI",{});var zqe=s(iC);zMe=n(zqe,"STRONG",{});var d$t=s(zMe);S4r=r(d$t,"vit"),d$t.forEach(t),R4r=r(zqe," \u2014 "),oJ=n(zqe,"A",{href:!0});var c$t=s(oJ);P4r=r(c$t,"TFViTModel"),c$t.forEach(t),B4r=r(zqe," (ViT model)"),zqe.forEach(t),I4r=i(D),dC=n(D,"LI",{});var Qqe=s(dC);QMe=n(Qqe,"STRONG",{});var m$t=s(QMe);N4r=r(m$t,"vit_mae"),m$t.forEach(t),q4r=r(Qqe," \u2014 "),rJ=n(Qqe,"A",{href:!0});var f$t=s(rJ);j4r=r(f$t,"TFViTMAEModel"),f$t.forEach(t),D4r=r(Qqe," (ViTMAE model)"),Qqe.forEach(t),G4r=i(D),cC=n(D,"LI",{});var Wqe=s(cC);WMe=n(Wqe,"STRONG",{});var g$t=s(WMe);O4r=r(g$t,"wav2vec2"),g$t.forEach(t),V4r=r(Wqe," \u2014 "),tJ=n(Wqe,"A",{href:!0});var h$t=s(tJ);X4r=r(h$t,"TFWav2Vec2Model"),h$t.forEach(t),z4r=r(Wqe," (Wav2Vec2 model)"),Wqe.forEach(t),Q4r=i(D),mC=n(D,"LI",{});var Hqe=s(mC);HMe=n(Hqe,"STRONG",{});var u$t=s(HMe);W4r=r(u$t,"xlm"),u$t.forEach(t),H4r=r(Hqe," \u2014 "),aJ=n(Hqe,"A",{href:!0});var p$t=s(aJ);U4r=r(p$t,"TFXLMModel"),p$t.forEach(t),J4r=r(Hqe," (XLM model)"),Hqe.forEach(t),Y4r=i(D),fC=n(D,"LI",{});var Uqe=s(fC);UMe=n(Uqe,"STRONG",{});var _$t=s(UMe);K4r=r(_$t,"xlm-roberta"),_$t.forEach(t),Z4r=r(Uqe," \u2014 "),nJ=n(Uqe,"A",{href:!0});var b$t=s(nJ);eEr=r(b$t,"TFXLMRobertaModel"),b$t.forEach(t),oEr=r(Uqe," (XLM-RoBERTa model)"),Uqe.forEach(t),rEr=i(D),gC=n(D,"LI",{});var Jqe=s(gC);JMe=n(Jqe,"STRONG",{});var v$t=s(JMe);tEr=r(v$t,"xlnet"),v$t.forEach(t),aEr=r(Jqe," \u2014 "),sJ=n(Jqe,"A",{href:!0});var F$t=s(sJ);nEr=r(F$t,"TFXLNetModel"),F$t.forEach(t),sEr=r(Jqe," (XLNet model)"),Jqe.forEach(t),D.forEach(t),lEr=i($l),T(hC.$$.fragment,$l),$l.forEach(t),xl.forEach(t),sze=i(m),dc=n(m,"H2",{class:!0});var hWe=s(dc);uC=n(hWe,"A",{id:!0,class:!0,href:!0});var T$t=s(uC);YMe=n(T$t,"SPAN",{});var M$t=s(YMe);T(U9.$$.fragment,M$t),M$t.forEach(t),T$t.forEach(t),iEr=i(hWe),KMe=n(hWe,"SPAN",{});var E$t=s(KMe);dEr=r(E$t,"TFAutoModelForPreTraining"),E$t.forEach(t),hWe.forEach(t),lze=i(m),rr=n(m,"DIV",{class:!0});var kl=s(rr);T(J9.$$.fragment,kl),cEr=i(kl),cc=n(kl,"P",{});var yte=s(cc);mEr=r(yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lJ=n(yte,"A",{href:!0});var C$t=s(lJ);fEr=r(C$t,"from_pretrained()"),C$t.forEach(t),gEr=r(yte," class method or the "),iJ=n(yte,"A",{href:!0});var w$t=s(iJ);hEr=r(w$t,"from_config()"),w$t.forEach(t),uEr=r(yte,` class
method.`),yte.forEach(t),pEr=i(kl),Y9=n(kl,"P",{});var uWe=s(Y9);_Er=r(uWe,"This class cannot be instantiated directly using "),ZMe=n(uWe,"CODE",{});var A$t=s(ZMe);bEr=r(A$t,"__init__()"),A$t.forEach(t),vEr=r(uWe," (throws an error)."),uWe.forEach(t),FEr=i(kl),Pt=n(kl,"DIV",{class:!0});var aL=s(Pt);T(K9.$$.fragment,aL),TEr=i(aL),e4e=n(aL,"P",{});var L$t=s(e4e);MEr=r(L$t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),L$t.forEach(t),EEr=i(aL),mc=n(aL,"P",{});var xte=s(mc);CEr=r(xte,`Note:
Loading a model from its configuration file does `),o4e=n(xte,"STRONG",{});var y$t=s(o4e);wEr=r(y$t,"not"),y$t.forEach(t),AEr=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),dJ=n(xte,"A",{href:!0});var x$t=s(dJ);LEr=r(x$t,"from_pretrained()"),x$t.forEach(t),yEr=r(xte," to load the model weights."),xte.forEach(t),xEr=i(aL),T(pC.$$.fragment,aL),aL.forEach(t),$Er=i(kl),$r=n(kl,"DIV",{class:!0});var Sl=s($r);T(Z9.$$.fragment,Sl),kEr=i(Sl),r4e=n(Sl,"P",{});var $$t=s(r4e);SEr=r($$t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$$t.forEach(t),REr=i(Sl),ln=n(Sl,"P",{});var nL=s(ln);PEr=r(nL,"The model class to instantiate is selected based on the "),t4e=n(nL,"CODE",{});var k$t=s(t4e);BEr=r(k$t,"model_type"),k$t.forEach(t),IEr=r(nL,` property of the config object (either
passed as an argument or loaded from `),a4e=n(nL,"CODE",{});var S$t=s(a4e);NEr=r(S$t,"pretrained_model_name_or_path"),S$t.forEach(t),qEr=r(nL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n4e=n(nL,"CODE",{});var R$t=s(n4e);jEr=r(R$t,"pretrained_model_name_or_path"),R$t.forEach(t),DEr=r(nL,":"),nL.forEach(t),GEr=i(Sl),se=n(Sl,"UL",{});var le=s(se);_C=n(le,"LI",{});var Yqe=s(_C);s4e=n(Yqe,"STRONG",{});var P$t=s(s4e);OEr=r(P$t,"albert"),P$t.forEach(t),VEr=r(Yqe," \u2014 "),cJ=n(Yqe,"A",{href:!0});var B$t=s(cJ);XEr=r(B$t,"TFAlbertForPreTraining"),B$t.forEach(t),zEr=r(Yqe," (ALBERT model)"),Yqe.forEach(t),QEr=i(le),bC=n(le,"LI",{});var Kqe=s(bC);l4e=n(Kqe,"STRONG",{});var I$t=s(l4e);WEr=r(I$t,"bart"),I$t.forEach(t),HEr=r(Kqe," \u2014 "),mJ=n(Kqe,"A",{href:!0});var N$t=s(mJ);UEr=r(N$t,"TFBartForConditionalGeneration"),N$t.forEach(t),JEr=r(Kqe," (BART model)"),Kqe.forEach(t),YEr=i(le),vC=n(le,"LI",{});var Zqe=s(vC);i4e=n(Zqe,"STRONG",{});var q$t=s(i4e);KEr=r(q$t,"bert"),q$t.forEach(t),ZEr=r(Zqe," \u2014 "),fJ=n(Zqe,"A",{href:!0});var j$t=s(fJ);eCr=r(j$t,"TFBertForPreTraining"),j$t.forEach(t),oCr=r(Zqe," (BERT model)"),Zqe.forEach(t),rCr=i(le),FC=n(le,"LI",{});var eje=s(FC);d4e=n(eje,"STRONG",{});var D$t=s(d4e);tCr=r(D$t,"camembert"),D$t.forEach(t),aCr=r(eje," \u2014 "),gJ=n(eje,"A",{href:!0});var G$t=s(gJ);nCr=r(G$t,"TFCamembertForMaskedLM"),G$t.forEach(t),sCr=r(eje," (CamemBERT model)"),eje.forEach(t),lCr=i(le),TC=n(le,"LI",{});var oje=s(TC);c4e=n(oje,"STRONG",{});var O$t=s(c4e);iCr=r(O$t,"ctrl"),O$t.forEach(t),dCr=r(oje," \u2014 "),hJ=n(oje,"A",{href:!0});var V$t=s(hJ);cCr=r(V$t,"TFCTRLLMHeadModel"),V$t.forEach(t),mCr=r(oje," (CTRL model)"),oje.forEach(t),fCr=i(le),MC=n(le,"LI",{});var rje=s(MC);m4e=n(rje,"STRONG",{});var X$t=s(m4e);gCr=r(X$t,"distilbert"),X$t.forEach(t),hCr=r(rje," \u2014 "),uJ=n(rje,"A",{href:!0});var z$t=s(uJ);uCr=r(z$t,"TFDistilBertForMaskedLM"),z$t.forEach(t),pCr=r(rje," (DistilBERT model)"),rje.forEach(t),_Cr=i(le),EC=n(le,"LI",{});var tje=s(EC);f4e=n(tje,"STRONG",{});var Q$t=s(f4e);bCr=r(Q$t,"electra"),Q$t.forEach(t),vCr=r(tje," \u2014 "),pJ=n(tje,"A",{href:!0});var W$t=s(pJ);FCr=r(W$t,"TFElectraForPreTraining"),W$t.forEach(t),TCr=r(tje," (ELECTRA model)"),tje.forEach(t),MCr=i(le),CC=n(le,"LI",{});var aje=s(CC);g4e=n(aje,"STRONG",{});var H$t=s(g4e);ECr=r(H$t,"flaubert"),H$t.forEach(t),CCr=r(aje," \u2014 "),_J=n(aje,"A",{href:!0});var U$t=s(_J);wCr=r(U$t,"TFFlaubertWithLMHeadModel"),U$t.forEach(t),ACr=r(aje," (FlauBERT model)"),aje.forEach(t),LCr=i(le),wC=n(le,"LI",{});var nje=s(wC);h4e=n(nje,"STRONG",{});var J$t=s(h4e);yCr=r(J$t,"funnel"),J$t.forEach(t),xCr=r(nje," \u2014 "),bJ=n(nje,"A",{href:!0});var Y$t=s(bJ);$Cr=r(Y$t,"TFFunnelForPreTraining"),Y$t.forEach(t),kCr=r(nje," (Funnel Transformer model)"),nje.forEach(t),SCr=i(le),AC=n(le,"LI",{});var sje=s(AC);u4e=n(sje,"STRONG",{});var K$t=s(u4e);RCr=r(K$t,"gpt2"),K$t.forEach(t),PCr=r(sje," \u2014 "),vJ=n(sje,"A",{href:!0});var Z$t=s(vJ);BCr=r(Z$t,"TFGPT2LMHeadModel"),Z$t.forEach(t),ICr=r(sje," (OpenAI GPT-2 model)"),sje.forEach(t),NCr=i(le),LC=n(le,"LI",{});var lje=s(LC);p4e=n(lje,"STRONG",{});var ekt=s(p4e);qCr=r(ekt,"layoutlm"),ekt.forEach(t),jCr=r(lje," \u2014 "),FJ=n(lje,"A",{href:!0});var okt=s(FJ);DCr=r(okt,"TFLayoutLMForMaskedLM"),okt.forEach(t),GCr=r(lje," (LayoutLM model)"),lje.forEach(t),OCr=i(le),yC=n(le,"LI",{});var ije=s(yC);_4e=n(ije,"STRONG",{});var rkt=s(_4e);VCr=r(rkt,"lxmert"),rkt.forEach(t),XCr=r(ije," \u2014 "),TJ=n(ije,"A",{href:!0});var tkt=s(TJ);zCr=r(tkt,"TFLxmertForPreTraining"),tkt.forEach(t),QCr=r(ije," (LXMERT model)"),ije.forEach(t),WCr=i(le),xC=n(le,"LI",{});var dje=s(xC);b4e=n(dje,"STRONG",{});var akt=s(b4e);HCr=r(akt,"mobilebert"),akt.forEach(t),UCr=r(dje," \u2014 "),MJ=n(dje,"A",{href:!0});var nkt=s(MJ);JCr=r(nkt,"TFMobileBertForPreTraining"),nkt.forEach(t),YCr=r(dje," (MobileBERT model)"),dje.forEach(t),KCr=i(le),$C=n(le,"LI",{});var cje=s($C);v4e=n(cje,"STRONG",{});var skt=s(v4e);ZCr=r(skt,"mpnet"),skt.forEach(t),e3r=r(cje," \u2014 "),EJ=n(cje,"A",{href:!0});var lkt=s(EJ);o3r=r(lkt,"TFMPNetForMaskedLM"),lkt.forEach(t),r3r=r(cje," (MPNet model)"),cje.forEach(t),t3r=i(le),kC=n(le,"LI",{});var mje=s(kC);F4e=n(mje,"STRONG",{});var ikt=s(F4e);a3r=r(ikt,"openai-gpt"),ikt.forEach(t),n3r=r(mje," \u2014 "),CJ=n(mje,"A",{href:!0});var dkt=s(CJ);s3r=r(dkt,"TFOpenAIGPTLMHeadModel"),dkt.forEach(t),l3r=r(mje," (OpenAI GPT model)"),mje.forEach(t),i3r=i(le),SC=n(le,"LI",{});var fje=s(SC);T4e=n(fje,"STRONG",{});var ckt=s(T4e);d3r=r(ckt,"roberta"),ckt.forEach(t),c3r=r(fje," \u2014 "),wJ=n(fje,"A",{href:!0});var mkt=s(wJ);m3r=r(mkt,"TFRobertaForMaskedLM"),mkt.forEach(t),f3r=r(fje," (RoBERTa model)"),fje.forEach(t),g3r=i(le),RC=n(le,"LI",{});var gje=s(RC);M4e=n(gje,"STRONG",{});var fkt=s(M4e);h3r=r(fkt,"t5"),fkt.forEach(t),u3r=r(gje," \u2014 "),AJ=n(gje,"A",{href:!0});var gkt=s(AJ);p3r=r(gkt,"TFT5ForConditionalGeneration"),gkt.forEach(t),_3r=r(gje," (T5 model)"),gje.forEach(t),b3r=i(le),PC=n(le,"LI",{});var hje=s(PC);E4e=n(hje,"STRONG",{});var hkt=s(E4e);v3r=r(hkt,"tapas"),hkt.forEach(t),F3r=r(hje," \u2014 "),LJ=n(hje,"A",{href:!0});var ukt=s(LJ);T3r=r(ukt,"TFTapasForMaskedLM"),ukt.forEach(t),M3r=r(hje," (TAPAS model)"),hje.forEach(t),E3r=i(le),BC=n(le,"LI",{});var uje=s(BC);C4e=n(uje,"STRONG",{});var pkt=s(C4e);C3r=r(pkt,"transfo-xl"),pkt.forEach(t),w3r=r(uje," \u2014 "),yJ=n(uje,"A",{href:!0});var _kt=s(yJ);A3r=r(_kt,"TFTransfoXLLMHeadModel"),_kt.forEach(t),L3r=r(uje," (Transformer-XL model)"),uje.forEach(t),y3r=i(le),IC=n(le,"LI",{});var pje=s(IC);w4e=n(pje,"STRONG",{});var bkt=s(w4e);x3r=r(bkt,"vit_mae"),bkt.forEach(t),$3r=r(pje," \u2014 "),xJ=n(pje,"A",{href:!0});var vkt=s(xJ);k3r=r(vkt,"TFViTMAEForPreTraining"),vkt.forEach(t),S3r=r(pje," (ViTMAE model)"),pje.forEach(t),R3r=i(le),NC=n(le,"LI",{});var _je=s(NC);A4e=n(_je,"STRONG",{});var Fkt=s(A4e);P3r=r(Fkt,"xlm"),Fkt.forEach(t),B3r=r(_je," \u2014 "),$J=n(_je,"A",{href:!0});var Tkt=s($J);I3r=r(Tkt,"TFXLMWithLMHeadModel"),Tkt.forEach(t),N3r=r(_je," (XLM model)"),_je.forEach(t),q3r=i(le),qC=n(le,"LI",{});var bje=s(qC);L4e=n(bje,"STRONG",{});var Mkt=s(L4e);j3r=r(Mkt,"xlm-roberta"),Mkt.forEach(t),D3r=r(bje," \u2014 "),kJ=n(bje,"A",{href:!0});var Ekt=s(kJ);G3r=r(Ekt,"TFXLMRobertaForMaskedLM"),Ekt.forEach(t),O3r=r(bje," (XLM-RoBERTa model)"),bje.forEach(t),V3r=i(le),jC=n(le,"LI",{});var vje=s(jC);y4e=n(vje,"STRONG",{});var Ckt=s(y4e);X3r=r(Ckt,"xlnet"),Ckt.forEach(t),z3r=r(vje," \u2014 "),SJ=n(vje,"A",{href:!0});var wkt=s(SJ);Q3r=r(wkt,"TFXLNetLMHeadModel"),wkt.forEach(t),W3r=r(vje," (XLNet model)"),vje.forEach(t),le.forEach(t),H3r=i(Sl),T(DC.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),ize=i(m),fc=n(m,"H2",{class:!0});var pWe=s(fc);GC=n(pWe,"A",{id:!0,class:!0,href:!0});var Akt=s(GC);x4e=n(Akt,"SPAN",{});var Lkt=s(x4e);T(ex.$$.fragment,Lkt),Lkt.forEach(t),Akt.forEach(t),U3r=i(pWe),$4e=n(pWe,"SPAN",{});var ykt=s($4e);J3r=r(ykt,"TFAutoModelForCausalLM"),ykt.forEach(t),pWe.forEach(t),dze=i(m),tr=n(m,"DIV",{class:!0});var Rl=s(tr);T(ox.$$.fragment,Rl),Y3r=i(Rl),gc=n(Rl,"P",{});var $te=s(gc);K3r=r($te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),RJ=n($te,"A",{href:!0});var xkt=s(RJ);Z3r=r(xkt,"from_pretrained()"),xkt.forEach(t),e5r=r($te," class method or the "),PJ=n($te,"A",{href:!0});var $kt=s(PJ);o5r=r($kt,"from_config()"),$kt.forEach(t),r5r=r($te,` class
method.`),$te.forEach(t),t5r=i(Rl),rx=n(Rl,"P",{});var _We=s(rx);a5r=r(_We,"This class cannot be instantiated directly using "),k4e=n(_We,"CODE",{});var kkt=s(k4e);n5r=r(kkt,"__init__()"),kkt.forEach(t),s5r=r(_We," (throws an error)."),_We.forEach(t),l5r=i(Rl),Bt=n(Rl,"DIV",{class:!0});var sL=s(Bt);T(tx.$$.fragment,sL),i5r=i(sL),S4e=n(sL,"P",{});var Skt=s(S4e);d5r=r(Skt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Skt.forEach(t),c5r=i(sL),hc=n(sL,"P",{});var kte=s(hc);m5r=r(kte,`Note:
Loading a model from its configuration file does `),R4e=n(kte,"STRONG",{});var Rkt=s(R4e);f5r=r(Rkt,"not"),Rkt.forEach(t),g5r=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=n(kte,"A",{href:!0});var Pkt=s(BJ);h5r=r(Pkt,"from_pretrained()"),Pkt.forEach(t),u5r=r(kte," to load the model weights."),kte.forEach(t),p5r=i(sL),T(OC.$$.fragment,sL),sL.forEach(t),_5r=i(Rl),kr=n(Rl,"DIV",{class:!0});var Pl=s(kr);T(ax.$$.fragment,Pl),b5r=i(Pl),P4e=n(Pl,"P",{});var Bkt=s(P4e);v5r=r(Bkt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Bkt.forEach(t),F5r=i(Pl),dn=n(Pl,"P",{});var lL=s(dn);T5r=r(lL,"The model class to instantiate is selected based on the "),B4e=n(lL,"CODE",{});var Ikt=s(B4e);M5r=r(Ikt,"model_type"),Ikt.forEach(t),E5r=r(lL,` property of the config object (either
passed as an argument or loaded from `),I4e=n(lL,"CODE",{});var Nkt=s(I4e);C5r=r(Nkt,"pretrained_model_name_or_path"),Nkt.forEach(t),w5r=r(lL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N4e=n(lL,"CODE",{});var qkt=s(N4e);A5r=r(qkt,"pretrained_model_name_or_path"),qkt.forEach(t),L5r=r(lL,":"),lL.forEach(t),y5r=i(Pl),Me=n(Pl,"UL",{});var Ce=s(Me);VC=n(Ce,"LI",{});var Fje=s(VC);q4e=n(Fje,"STRONG",{});var jkt=s(q4e);x5r=r(jkt,"bert"),jkt.forEach(t),$5r=r(Fje," \u2014 "),IJ=n(Fje,"A",{href:!0});var Dkt=s(IJ);k5r=r(Dkt,"TFBertLMHeadModel"),Dkt.forEach(t),S5r=r(Fje," (BERT model)"),Fje.forEach(t),R5r=i(Ce),XC=n(Ce,"LI",{});var Tje=s(XC);j4e=n(Tje,"STRONG",{});var Gkt=s(j4e);P5r=r(Gkt,"camembert"),Gkt.forEach(t),B5r=r(Tje," \u2014 "),NJ=n(Tje,"A",{href:!0});var Okt=s(NJ);I5r=r(Okt,"TFCamembertForCausalLM"),Okt.forEach(t),N5r=r(Tje," (CamemBERT model)"),Tje.forEach(t),q5r=i(Ce),zC=n(Ce,"LI",{});var Mje=s(zC);D4e=n(Mje,"STRONG",{});var Vkt=s(D4e);j5r=r(Vkt,"ctrl"),Vkt.forEach(t),D5r=r(Mje," \u2014 "),qJ=n(Mje,"A",{href:!0});var Xkt=s(qJ);G5r=r(Xkt,"TFCTRLLMHeadModel"),Xkt.forEach(t),O5r=r(Mje," (CTRL model)"),Mje.forEach(t),V5r=i(Ce),QC=n(Ce,"LI",{});var Eje=s(QC);G4e=n(Eje,"STRONG",{});var zkt=s(G4e);X5r=r(zkt,"gpt2"),zkt.forEach(t),z5r=r(Eje," \u2014 "),jJ=n(Eje,"A",{href:!0});var Qkt=s(jJ);Q5r=r(Qkt,"TFGPT2LMHeadModel"),Qkt.forEach(t),W5r=r(Eje," (OpenAI GPT-2 model)"),Eje.forEach(t),H5r=i(Ce),WC=n(Ce,"LI",{});var Cje=s(WC);O4e=n(Cje,"STRONG",{});var Wkt=s(O4e);U5r=r(Wkt,"gptj"),Wkt.forEach(t),J5r=r(Cje," \u2014 "),DJ=n(Cje,"A",{href:!0});var Hkt=s(DJ);Y5r=r(Hkt,"TFGPTJForCausalLM"),Hkt.forEach(t),K5r=r(Cje," (GPT-J model)"),Cje.forEach(t),Z5r=i(Ce),HC=n(Ce,"LI",{});var wje=s(HC);V4e=n(wje,"STRONG",{});var Ukt=s(V4e);e0r=r(Ukt,"openai-gpt"),Ukt.forEach(t),o0r=r(wje," \u2014 "),GJ=n(wje,"A",{href:!0});var Jkt=s(GJ);r0r=r(Jkt,"TFOpenAIGPTLMHeadModel"),Jkt.forEach(t),t0r=r(wje," (OpenAI GPT model)"),wje.forEach(t),a0r=i(Ce),UC=n(Ce,"LI",{});var Aje=s(UC);X4e=n(Aje,"STRONG",{});var Ykt=s(X4e);n0r=r(Ykt,"opt"),Ykt.forEach(t),s0r=r(Aje," \u2014 "),OJ=n(Aje,"A",{href:!0});var Kkt=s(OJ);l0r=r(Kkt,"TFOPTForCausalLM"),Kkt.forEach(t),i0r=r(Aje," (OPT model)"),Aje.forEach(t),d0r=i(Ce),JC=n(Ce,"LI",{});var Lje=s(JC);z4e=n(Lje,"STRONG",{});var Zkt=s(z4e);c0r=r(Zkt,"rembert"),Zkt.forEach(t),m0r=r(Lje," \u2014 "),VJ=n(Lje,"A",{href:!0});var eSt=s(VJ);f0r=r(eSt,"TFRemBertForCausalLM"),eSt.forEach(t),g0r=r(Lje," (RemBERT model)"),Lje.forEach(t),h0r=i(Ce),YC=n(Ce,"LI",{});var yje=s(YC);Q4e=n(yje,"STRONG",{});var oSt=s(Q4e);u0r=r(oSt,"roberta"),oSt.forEach(t),p0r=r(yje," \u2014 "),XJ=n(yje,"A",{href:!0});var rSt=s(XJ);_0r=r(rSt,"TFRobertaForCausalLM"),rSt.forEach(t),b0r=r(yje," (RoBERTa model)"),yje.forEach(t),v0r=i(Ce),KC=n(Ce,"LI",{});var xje=s(KC);W4e=n(xje,"STRONG",{});var tSt=s(W4e);F0r=r(tSt,"roformer"),tSt.forEach(t),T0r=r(xje," \u2014 "),zJ=n(xje,"A",{href:!0});var aSt=s(zJ);M0r=r(aSt,"TFRoFormerForCausalLM"),aSt.forEach(t),E0r=r(xje," (RoFormer model)"),xje.forEach(t),C0r=i(Ce),ZC=n(Ce,"LI",{});var $je=s(ZC);H4e=n($je,"STRONG",{});var nSt=s(H4e);w0r=r(nSt,"transfo-xl"),nSt.forEach(t),A0r=r($je," \u2014 "),QJ=n($je,"A",{href:!0});var sSt=s(QJ);L0r=r(sSt,"TFTransfoXLLMHeadModel"),sSt.forEach(t),y0r=r($je," (Transformer-XL model)"),$je.forEach(t),x0r=i(Ce),e3=n(Ce,"LI",{});var kje=s(e3);U4e=n(kje,"STRONG",{});var lSt=s(U4e);$0r=r(lSt,"xlm"),lSt.forEach(t),k0r=r(kje," \u2014 "),WJ=n(kje,"A",{href:!0});var iSt=s(WJ);S0r=r(iSt,"TFXLMWithLMHeadModel"),iSt.forEach(t),R0r=r(kje," (XLM model)"),kje.forEach(t),P0r=i(Ce),o3=n(Ce,"LI",{});var Sje=s(o3);J4e=n(Sje,"STRONG",{});var dSt=s(J4e);B0r=r(dSt,"xlnet"),dSt.forEach(t),I0r=r(Sje," \u2014 "),HJ=n(Sje,"A",{href:!0});var cSt=s(HJ);N0r=r(cSt,"TFXLNetLMHeadModel"),cSt.forEach(t),q0r=r(Sje," (XLNet model)"),Sje.forEach(t),Ce.forEach(t),j0r=i(Pl),T(r3.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),cze=i(m),uc=n(m,"H2",{class:!0});var bWe=s(uc);t3=n(bWe,"A",{id:!0,class:!0,href:!0});var mSt=s(t3);Y4e=n(mSt,"SPAN",{});var fSt=s(Y4e);T(nx.$$.fragment,fSt),fSt.forEach(t),mSt.forEach(t),D0r=i(bWe),K4e=n(bWe,"SPAN",{});var gSt=s(K4e);G0r=r(gSt,"TFAutoModelForImageClassification"),gSt.forEach(t),bWe.forEach(t),mze=i(m),ar=n(m,"DIV",{class:!0});var Bl=s(ar);T(sx.$$.fragment,Bl),O0r=i(Bl),pc=n(Bl,"P",{});var Ste=s(pc);V0r=r(Ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),UJ=n(Ste,"A",{href:!0});var hSt=s(UJ);X0r=r(hSt,"from_pretrained()"),hSt.forEach(t),z0r=r(Ste," class method or the "),JJ=n(Ste,"A",{href:!0});var uSt=s(JJ);Q0r=r(uSt,"from_config()"),uSt.forEach(t),W0r=r(Ste,` class
method.`),Ste.forEach(t),H0r=i(Bl),lx=n(Bl,"P",{});var vWe=s(lx);U0r=r(vWe,"This class cannot be instantiated directly using "),Z4e=n(vWe,"CODE",{});var pSt=s(Z4e);J0r=r(pSt,"__init__()"),pSt.forEach(t),Y0r=r(vWe," (throws an error)."),vWe.forEach(t),K0r=i(Bl),It=n(Bl,"DIV",{class:!0});var iL=s(It);T(ix.$$.fragment,iL),Z0r=i(iL),eEe=n(iL,"P",{});var _St=s(eEe);ewr=r(_St,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_St.forEach(t),owr=i(iL),_c=n(iL,"P",{});var Rte=s(_c);rwr=r(Rte,`Note:
Loading a model from its configuration file does `),oEe=n(Rte,"STRONG",{});var bSt=s(oEe);twr=r(bSt,"not"),bSt.forEach(t),awr=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=n(Rte,"A",{href:!0});var vSt=s(YJ);nwr=r(vSt,"from_pretrained()"),vSt.forEach(t),swr=r(Rte," to load the model weights."),Rte.forEach(t),lwr=i(iL),T(a3.$$.fragment,iL),iL.forEach(t),iwr=i(Bl),Sr=n(Bl,"DIV",{class:!0});var Il=s(Sr);T(dx.$$.fragment,Il),dwr=i(Il),rEe=n(Il,"P",{});var FSt=s(rEe);cwr=r(FSt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),FSt.forEach(t),mwr=i(Il),cn=n(Il,"P",{});var dL=s(cn);fwr=r(dL,"The model class to instantiate is selected based on the "),tEe=n(dL,"CODE",{});var TSt=s(tEe);gwr=r(TSt,"model_type"),TSt.forEach(t),hwr=r(dL,` property of the config object (either
passed as an argument or loaded from `),aEe=n(dL,"CODE",{});var MSt=s(aEe);uwr=r(MSt,"pretrained_model_name_or_path"),MSt.forEach(t),pwr=r(dL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nEe=n(dL,"CODE",{});var ESt=s(nEe);_wr=r(ESt,"pretrained_model_name_or_path"),ESt.forEach(t),bwr=r(dL,":"),dL.forEach(t),vwr=i(Il),Qe=n(Il,"UL",{});var ot=s(Qe);n3=n(ot,"LI",{});var Rje=s(n3);sEe=n(Rje,"STRONG",{});var CSt=s(sEe);Fwr=r(CSt,"convnext"),CSt.forEach(t),Twr=r(Rje," \u2014 "),KJ=n(Rje,"A",{href:!0});var wSt=s(KJ);Mwr=r(wSt,"TFConvNextForImageClassification"),wSt.forEach(t),Ewr=r(Rje," (ConvNeXT model)"),Rje.forEach(t),Cwr=i(ot),s3=n(ot,"LI",{});var Pje=s(s3);lEe=n(Pje,"STRONG",{});var ASt=s(lEe);wwr=r(ASt,"data2vec-vision"),ASt.forEach(t),Awr=r(Pje," \u2014 "),ZJ=n(Pje,"A",{href:!0});var LSt=s(ZJ);Lwr=r(LSt,"TFData2VecVisionForImageClassification"),LSt.forEach(t),ywr=r(Pje," (Data2VecVision model)"),Pje.forEach(t),xwr=i(ot),Ys=n(ot,"LI",{});var PS=s(Ys);iEe=n(PS,"STRONG",{});var ySt=s(iEe);$wr=r(ySt,"deit"),ySt.forEach(t),kwr=r(PS," \u2014 "),eY=n(PS,"A",{href:!0});var xSt=s(eY);Swr=r(xSt,"TFDeiTForImageClassification"),xSt.forEach(t),Rwr=r(PS," or "),oY=n(PS,"A",{href:!0});var $St=s(oY);Pwr=r($St,"TFDeiTForImageClassificationWithTeacher"),$St.forEach(t),Bwr=r(PS," (DeiT model)"),PS.forEach(t),Iwr=i(ot),l3=n(ot,"LI",{});var Bje=s(l3);dEe=n(Bje,"STRONG",{});var kSt=s(dEe);Nwr=r(kSt,"regnet"),kSt.forEach(t),qwr=r(Bje," \u2014 "),rY=n(Bje,"A",{href:!0});var SSt=s(rY);jwr=r(SSt,"TFRegNetForImageClassification"),SSt.forEach(t),Dwr=r(Bje," (RegNet model)"),Bje.forEach(t),Gwr=i(ot),i3=n(ot,"LI",{});var Ije=s(i3);cEe=n(Ije,"STRONG",{});var RSt=s(cEe);Owr=r(RSt,"resnet"),RSt.forEach(t),Vwr=r(Ije," \u2014 "),tY=n(Ije,"A",{href:!0});var PSt=s(tY);Xwr=r(PSt,"TFResNetForImageClassification"),PSt.forEach(t),zwr=r(Ije," (ResNet model)"),Ije.forEach(t),Qwr=i(ot),d3=n(ot,"LI",{});var Nje=s(d3);mEe=n(Nje,"STRONG",{});var BSt=s(mEe);Wwr=r(BSt,"swin"),BSt.forEach(t),Hwr=r(Nje," \u2014 "),aY=n(Nje,"A",{href:!0});var ISt=s(aY);Uwr=r(ISt,"TFSwinForImageClassification"),ISt.forEach(t),Jwr=r(Nje," (Swin Transformer model)"),Nje.forEach(t),Ywr=i(ot),c3=n(ot,"LI",{});var qje=s(c3);fEe=n(qje,"STRONG",{});var NSt=s(fEe);Kwr=r(NSt,"vit"),NSt.forEach(t),Zwr=r(qje," \u2014 "),nY=n(qje,"A",{href:!0});var qSt=s(nY);eAr=r(qSt,"TFViTForImageClassification"),qSt.forEach(t),oAr=r(qje," (ViT model)"),qje.forEach(t),ot.forEach(t),rAr=i(Il),T(m3.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),fze=i(m),bc=n(m,"H2",{class:!0});var FWe=s(bc);f3=n(FWe,"A",{id:!0,class:!0,href:!0});var jSt=s(f3);gEe=n(jSt,"SPAN",{});var DSt=s(gEe);T(cx.$$.fragment,DSt),DSt.forEach(t),jSt.forEach(t),tAr=i(FWe),hEe=n(FWe,"SPAN",{});var GSt=s(hEe);aAr=r(GSt,"TFAutoModelForMaskedLM"),GSt.forEach(t),FWe.forEach(t),gze=i(m),nr=n(m,"DIV",{class:!0});var Nl=s(nr);T(mx.$$.fragment,Nl),nAr=i(Nl),vc=n(Nl,"P",{});var Pte=s(vc);sAr=r(Pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sY=n(Pte,"A",{href:!0});var OSt=s(sY);lAr=r(OSt,"from_pretrained()"),OSt.forEach(t),iAr=r(Pte," class method or the "),lY=n(Pte,"A",{href:!0});var VSt=s(lY);dAr=r(VSt,"from_config()"),VSt.forEach(t),cAr=r(Pte,` class
method.`),Pte.forEach(t),mAr=i(Nl),fx=n(Nl,"P",{});var TWe=s(fx);fAr=r(TWe,"This class cannot be instantiated directly using "),uEe=n(TWe,"CODE",{});var XSt=s(uEe);gAr=r(XSt,"__init__()"),XSt.forEach(t),hAr=r(TWe," (throws an error)."),TWe.forEach(t),uAr=i(Nl),Nt=n(Nl,"DIV",{class:!0});var cL=s(Nt);T(gx.$$.fragment,cL),pAr=i(cL),pEe=n(cL,"P",{});var zSt=s(pEe);_Ar=r(zSt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),zSt.forEach(t),bAr=i(cL),Fc=n(cL,"P",{});var Bte=s(Fc);vAr=r(Bte,`Note:
Loading a model from its configuration file does `),_Ee=n(Bte,"STRONG",{});var QSt=s(_Ee);FAr=r(QSt,"not"),QSt.forEach(t),TAr=r(Bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),iY=n(Bte,"A",{href:!0});var WSt=s(iY);MAr=r(WSt,"from_pretrained()"),WSt.forEach(t),EAr=r(Bte," to load the model weights."),Bte.forEach(t),CAr=i(cL),T(g3.$$.fragment,cL),cL.forEach(t),wAr=i(Nl),Rr=n(Nl,"DIV",{class:!0});var ql=s(Rr);T(hx.$$.fragment,ql),AAr=i(ql),bEe=n(ql,"P",{});var HSt=s(bEe);LAr=r(HSt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),HSt.forEach(t),yAr=i(ql),mn=n(ql,"P",{});var mL=s(mn);xAr=r(mL,"The model class to instantiate is selected based on the "),vEe=n(mL,"CODE",{});var USt=s(vEe);$Ar=r(USt,"model_type"),USt.forEach(t),kAr=r(mL,` property of the config object (either
passed as an argument or loaded from `),FEe=n(mL,"CODE",{});var JSt=s(FEe);SAr=r(JSt,"pretrained_model_name_or_path"),JSt.forEach(t),RAr=r(mL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TEe=n(mL,"CODE",{});var YSt=s(TEe);PAr=r(YSt,"pretrained_model_name_or_path"),YSt.forEach(t),BAr=r(mL,":"),mL.forEach(t),IAr=i(ql),ie=n(ql,"UL",{});var me=s(ie);h3=n(me,"LI",{});var jje=s(h3);MEe=n(jje,"STRONG",{});var KSt=s(MEe);NAr=r(KSt,"albert"),KSt.forEach(t),qAr=r(jje," \u2014 "),dY=n(jje,"A",{href:!0});var ZSt=s(dY);jAr=r(ZSt,"TFAlbertForMaskedLM"),ZSt.forEach(t),DAr=r(jje," (ALBERT model)"),jje.forEach(t),GAr=i(me),u3=n(me,"LI",{});var Dje=s(u3);EEe=n(Dje,"STRONG",{});var eRt=s(EEe);OAr=r(eRt,"bert"),eRt.forEach(t),VAr=r(Dje," \u2014 "),cY=n(Dje,"A",{href:!0});var oRt=s(cY);XAr=r(oRt,"TFBertForMaskedLM"),oRt.forEach(t),zAr=r(Dje," (BERT model)"),Dje.forEach(t),QAr=i(me),p3=n(me,"LI",{});var Gje=s(p3);CEe=n(Gje,"STRONG",{});var rRt=s(CEe);WAr=r(rRt,"camembert"),rRt.forEach(t),HAr=r(Gje," \u2014 "),mY=n(Gje,"A",{href:!0});var tRt=s(mY);UAr=r(tRt,"TFCamembertForMaskedLM"),tRt.forEach(t),JAr=r(Gje," (CamemBERT model)"),Gje.forEach(t),YAr=i(me),_3=n(me,"LI",{});var Oje=s(_3);wEe=n(Oje,"STRONG",{});var aRt=s(wEe);KAr=r(aRt,"convbert"),aRt.forEach(t),ZAr=r(Oje," \u2014 "),fY=n(Oje,"A",{href:!0});var nRt=s(fY);e6r=r(nRt,"TFConvBertForMaskedLM"),nRt.forEach(t),o6r=r(Oje," (ConvBERT model)"),Oje.forEach(t),r6r=i(me),b3=n(me,"LI",{});var Vje=s(b3);AEe=n(Vje,"STRONG",{});var sRt=s(AEe);t6r=r(sRt,"deberta"),sRt.forEach(t),a6r=r(Vje," \u2014 "),gY=n(Vje,"A",{href:!0});var lRt=s(gY);n6r=r(lRt,"TFDebertaForMaskedLM"),lRt.forEach(t),s6r=r(Vje," (DeBERTa model)"),Vje.forEach(t),l6r=i(me),v3=n(me,"LI",{});var Xje=s(v3);LEe=n(Xje,"STRONG",{});var iRt=s(LEe);i6r=r(iRt,"deberta-v2"),iRt.forEach(t),d6r=r(Xje," \u2014 "),hY=n(Xje,"A",{href:!0});var dRt=s(hY);c6r=r(dRt,"TFDebertaV2ForMaskedLM"),dRt.forEach(t),m6r=r(Xje," (DeBERTa-v2 model)"),Xje.forEach(t),f6r=i(me),F3=n(me,"LI",{});var zje=s(F3);yEe=n(zje,"STRONG",{});var cRt=s(yEe);g6r=r(cRt,"distilbert"),cRt.forEach(t),h6r=r(zje," \u2014 "),uY=n(zje,"A",{href:!0});var mRt=s(uY);u6r=r(mRt,"TFDistilBertForMaskedLM"),mRt.forEach(t),p6r=r(zje," (DistilBERT model)"),zje.forEach(t),_6r=i(me),T3=n(me,"LI",{});var Qje=s(T3);xEe=n(Qje,"STRONG",{});var fRt=s(xEe);b6r=r(fRt,"electra"),fRt.forEach(t),v6r=r(Qje," \u2014 "),pY=n(Qje,"A",{href:!0});var gRt=s(pY);F6r=r(gRt,"TFElectraForMaskedLM"),gRt.forEach(t),T6r=r(Qje," (ELECTRA model)"),Qje.forEach(t),M6r=i(me),M3=n(me,"LI",{});var Wje=s(M3);$Ee=n(Wje,"STRONG",{});var hRt=s($Ee);E6r=r(hRt,"flaubert"),hRt.forEach(t),C6r=r(Wje," \u2014 "),_Y=n(Wje,"A",{href:!0});var uRt=s(_Y);w6r=r(uRt,"TFFlaubertWithLMHeadModel"),uRt.forEach(t),A6r=r(Wje," (FlauBERT model)"),Wje.forEach(t),L6r=i(me),E3=n(me,"LI",{});var Hje=s(E3);kEe=n(Hje,"STRONG",{});var pRt=s(kEe);y6r=r(pRt,"funnel"),pRt.forEach(t),x6r=r(Hje," \u2014 "),bY=n(Hje,"A",{href:!0});var _Rt=s(bY);$6r=r(_Rt,"TFFunnelForMaskedLM"),_Rt.forEach(t),k6r=r(Hje," (Funnel Transformer model)"),Hje.forEach(t),S6r=i(me),C3=n(me,"LI",{});var Uje=s(C3);SEe=n(Uje,"STRONG",{});var bRt=s(SEe);R6r=r(bRt,"layoutlm"),bRt.forEach(t),P6r=r(Uje," \u2014 "),vY=n(Uje,"A",{href:!0});var vRt=s(vY);B6r=r(vRt,"TFLayoutLMForMaskedLM"),vRt.forEach(t),I6r=r(Uje," (LayoutLM model)"),Uje.forEach(t),N6r=i(me),w3=n(me,"LI",{});var Jje=s(w3);REe=n(Jje,"STRONG",{});var FRt=s(REe);q6r=r(FRt,"longformer"),FRt.forEach(t),j6r=r(Jje," \u2014 "),FY=n(Jje,"A",{href:!0});var TRt=s(FY);D6r=r(TRt,"TFLongformerForMaskedLM"),TRt.forEach(t),G6r=r(Jje," (Longformer model)"),Jje.forEach(t),O6r=i(me),A3=n(me,"LI",{});var Yje=s(A3);PEe=n(Yje,"STRONG",{});var MRt=s(PEe);V6r=r(MRt,"mobilebert"),MRt.forEach(t),X6r=r(Yje," \u2014 "),TY=n(Yje,"A",{href:!0});var ERt=s(TY);z6r=r(ERt,"TFMobileBertForMaskedLM"),ERt.forEach(t),Q6r=r(Yje," (MobileBERT model)"),Yje.forEach(t),W6r=i(me),L3=n(me,"LI",{});var Kje=s(L3);BEe=n(Kje,"STRONG",{});var CRt=s(BEe);H6r=r(CRt,"mpnet"),CRt.forEach(t),U6r=r(Kje," \u2014 "),MY=n(Kje,"A",{href:!0});var wRt=s(MY);J6r=r(wRt,"TFMPNetForMaskedLM"),wRt.forEach(t),Y6r=r(Kje," (MPNet model)"),Kje.forEach(t),K6r=i(me),y3=n(me,"LI",{});var Zje=s(y3);IEe=n(Zje,"STRONG",{});var ARt=s(IEe);Z6r=r(ARt,"rembert"),ARt.forEach(t),e7r=r(Zje," \u2014 "),EY=n(Zje,"A",{href:!0});var LRt=s(EY);o7r=r(LRt,"TFRemBertForMaskedLM"),LRt.forEach(t),r7r=r(Zje," (RemBERT model)"),Zje.forEach(t),t7r=i(me),x3=n(me,"LI",{});var eDe=s(x3);NEe=n(eDe,"STRONG",{});var yRt=s(NEe);a7r=r(yRt,"roberta"),yRt.forEach(t),n7r=r(eDe," \u2014 "),CY=n(eDe,"A",{href:!0});var xRt=s(CY);s7r=r(xRt,"TFRobertaForMaskedLM"),xRt.forEach(t),l7r=r(eDe," (RoBERTa model)"),eDe.forEach(t),i7r=i(me),$3=n(me,"LI",{});var oDe=s($3);qEe=n(oDe,"STRONG",{});var $Rt=s(qEe);d7r=r($Rt,"roformer"),$Rt.forEach(t),c7r=r(oDe," \u2014 "),wY=n(oDe,"A",{href:!0});var kRt=s(wY);m7r=r(kRt,"TFRoFormerForMaskedLM"),kRt.forEach(t),f7r=r(oDe," (RoFormer model)"),oDe.forEach(t),g7r=i(me),k3=n(me,"LI",{});var rDe=s(k3);jEe=n(rDe,"STRONG",{});var SRt=s(jEe);h7r=r(SRt,"tapas"),SRt.forEach(t),u7r=r(rDe," \u2014 "),AY=n(rDe,"A",{href:!0});var RRt=s(AY);p7r=r(RRt,"TFTapasForMaskedLM"),RRt.forEach(t),_7r=r(rDe," (TAPAS model)"),rDe.forEach(t),b7r=i(me),S3=n(me,"LI",{});var tDe=s(S3);DEe=n(tDe,"STRONG",{});var PRt=s(DEe);v7r=r(PRt,"xlm"),PRt.forEach(t),F7r=r(tDe," \u2014 "),LY=n(tDe,"A",{href:!0});var BRt=s(LY);T7r=r(BRt,"TFXLMWithLMHeadModel"),BRt.forEach(t),M7r=r(tDe," (XLM model)"),tDe.forEach(t),E7r=i(me),R3=n(me,"LI",{});var aDe=s(R3);GEe=n(aDe,"STRONG",{});var IRt=s(GEe);C7r=r(IRt,"xlm-roberta"),IRt.forEach(t),w7r=r(aDe," \u2014 "),yY=n(aDe,"A",{href:!0});var NRt=s(yY);A7r=r(NRt,"TFXLMRobertaForMaskedLM"),NRt.forEach(t),L7r=r(aDe," (XLM-RoBERTa model)"),aDe.forEach(t),me.forEach(t),y7r=i(ql),T(P3.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),hze=i(m),Tc=n(m,"H2",{class:!0});var MWe=s(Tc);B3=n(MWe,"A",{id:!0,class:!0,href:!0});var qRt=s(B3);OEe=n(qRt,"SPAN",{});var jRt=s(OEe);T(ux.$$.fragment,jRt),jRt.forEach(t),qRt.forEach(t),x7r=i(MWe),VEe=n(MWe,"SPAN",{});var DRt=s(VEe);$7r=r(DRt,"TFAutoModelForSeq2SeqLM"),DRt.forEach(t),MWe.forEach(t),uze=i(m),sr=n(m,"DIV",{class:!0});var jl=s(sr);T(px.$$.fragment,jl),k7r=i(jl),Mc=n(jl,"P",{});var Ite=s(Mc);S7r=r(Ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),xY=n(Ite,"A",{href:!0});var GRt=s(xY);R7r=r(GRt,"from_pretrained()"),GRt.forEach(t),P7r=r(Ite," class method or the "),$Y=n(Ite,"A",{href:!0});var ORt=s($Y);B7r=r(ORt,"from_config()"),ORt.forEach(t),I7r=r(Ite,` class
method.`),Ite.forEach(t),N7r=i(jl),_x=n(jl,"P",{});var EWe=s(_x);q7r=r(EWe,"This class cannot be instantiated directly using "),XEe=n(EWe,"CODE",{});var VRt=s(XEe);j7r=r(VRt,"__init__()"),VRt.forEach(t),D7r=r(EWe," (throws an error)."),EWe.forEach(t),G7r=i(jl),qt=n(jl,"DIV",{class:!0});var fL=s(qt);T(bx.$$.fragment,fL),O7r=i(fL),zEe=n(fL,"P",{});var XRt=s(zEe);V7r=r(XRt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),XRt.forEach(t),X7r=i(fL),Ec=n(fL,"P",{});var Nte=s(Ec);z7r=r(Nte,`Note:
Loading a model from its configuration file does `),QEe=n(Nte,"STRONG",{});var zRt=s(QEe);Q7r=r(zRt,"not"),zRt.forEach(t),W7r=r(Nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),kY=n(Nte,"A",{href:!0});var QRt=s(kY);H7r=r(QRt,"from_pretrained()"),QRt.forEach(t),U7r=r(Nte," to load the model weights."),Nte.forEach(t),J7r=i(fL),T(I3.$$.fragment,fL),fL.forEach(t),Y7r=i(jl),Pr=n(jl,"DIV",{class:!0});var Dl=s(Pr);T(vx.$$.fragment,Dl),K7r=i(Dl),WEe=n(Dl,"P",{});var WRt=s(WEe);Z7r=r(WRt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),WRt.forEach(t),eLr=i(Dl),fn=n(Dl,"P",{});var gL=s(fn);oLr=r(gL,"The model class to instantiate is selected based on the "),HEe=n(gL,"CODE",{});var HRt=s(HEe);rLr=r(HRt,"model_type"),HRt.forEach(t),tLr=r(gL,` property of the config object (either
passed as an argument or loaded from `),UEe=n(gL,"CODE",{});var URt=s(UEe);aLr=r(URt,"pretrained_model_name_or_path"),URt.forEach(t),nLr=r(gL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JEe=n(gL,"CODE",{});var JRt=s(JEe);sLr=r(JRt,"pretrained_model_name_or_path"),JRt.forEach(t),lLr=r(gL,":"),gL.forEach(t),iLr=i(Dl),ye=n(Dl,"UL",{});var Ie=s(ye);N3=n(Ie,"LI",{});var nDe=s(N3);YEe=n(nDe,"STRONG",{});var YRt=s(YEe);dLr=r(YRt,"bart"),YRt.forEach(t),cLr=r(nDe," \u2014 "),SY=n(nDe,"A",{href:!0});var KRt=s(SY);mLr=r(KRt,"TFBartForConditionalGeneration"),KRt.forEach(t),fLr=r(nDe," (BART model)"),nDe.forEach(t),gLr=i(Ie),q3=n(Ie,"LI",{});var sDe=s(q3);KEe=n(sDe,"STRONG",{});var ZRt=s(KEe);hLr=r(ZRt,"blenderbot"),ZRt.forEach(t),uLr=r(sDe," \u2014 "),RY=n(sDe,"A",{href:!0});var ePt=s(RY);pLr=r(ePt,"TFBlenderbotForConditionalGeneration"),ePt.forEach(t),_Lr=r(sDe," (Blenderbot model)"),sDe.forEach(t),bLr=i(Ie),j3=n(Ie,"LI",{});var lDe=s(j3);ZEe=n(lDe,"STRONG",{});var oPt=s(ZEe);vLr=r(oPt,"blenderbot-small"),oPt.forEach(t),FLr=r(lDe," \u2014 "),PY=n(lDe,"A",{href:!0});var rPt=s(PY);TLr=r(rPt,"TFBlenderbotSmallForConditionalGeneration"),rPt.forEach(t),MLr=r(lDe," (BlenderbotSmall model)"),lDe.forEach(t),ELr=i(Ie),D3=n(Ie,"LI",{});var iDe=s(D3);eCe=n(iDe,"STRONG",{});var tPt=s(eCe);CLr=r(tPt,"encoder-decoder"),tPt.forEach(t),wLr=r(iDe," \u2014 "),BY=n(iDe,"A",{href:!0});var aPt=s(BY);ALr=r(aPt,"TFEncoderDecoderModel"),aPt.forEach(t),LLr=r(iDe," (Encoder decoder model)"),iDe.forEach(t),yLr=i(Ie),G3=n(Ie,"LI",{});var dDe=s(G3);oCe=n(dDe,"STRONG",{});var nPt=s(oCe);xLr=r(nPt,"led"),nPt.forEach(t),$Lr=r(dDe," \u2014 "),IY=n(dDe,"A",{href:!0});var sPt=s(IY);kLr=r(sPt,"TFLEDForConditionalGeneration"),sPt.forEach(t),SLr=r(dDe," (LED model)"),dDe.forEach(t),RLr=i(Ie),O3=n(Ie,"LI",{});var cDe=s(O3);rCe=n(cDe,"STRONG",{});var lPt=s(rCe);PLr=r(lPt,"marian"),lPt.forEach(t),BLr=r(cDe," \u2014 "),NY=n(cDe,"A",{href:!0});var iPt=s(NY);ILr=r(iPt,"TFMarianMTModel"),iPt.forEach(t),NLr=r(cDe," (Marian model)"),cDe.forEach(t),qLr=i(Ie),V3=n(Ie,"LI",{});var mDe=s(V3);tCe=n(mDe,"STRONG",{});var dPt=s(tCe);jLr=r(dPt,"mbart"),dPt.forEach(t),DLr=r(mDe," \u2014 "),qY=n(mDe,"A",{href:!0});var cPt=s(qY);GLr=r(cPt,"TFMBartForConditionalGeneration"),cPt.forEach(t),OLr=r(mDe," (mBART model)"),mDe.forEach(t),VLr=i(Ie),X3=n(Ie,"LI",{});var fDe=s(X3);aCe=n(fDe,"STRONG",{});var mPt=s(aCe);XLr=r(mPt,"mt5"),mPt.forEach(t),zLr=r(fDe," \u2014 "),jY=n(fDe,"A",{href:!0});var fPt=s(jY);QLr=r(fPt,"TFMT5ForConditionalGeneration"),fPt.forEach(t),WLr=r(fDe," (MT5 model)"),fDe.forEach(t),HLr=i(Ie),z3=n(Ie,"LI",{});var gDe=s(z3);nCe=n(gDe,"STRONG",{});var gPt=s(nCe);ULr=r(gPt,"pegasus"),gPt.forEach(t),JLr=r(gDe," \u2014 "),DY=n(gDe,"A",{href:!0});var hPt=s(DY);YLr=r(hPt,"TFPegasusForConditionalGeneration"),hPt.forEach(t),KLr=r(gDe," (Pegasus model)"),gDe.forEach(t),ZLr=i(Ie),Q3=n(Ie,"LI",{});var hDe=s(Q3);sCe=n(hDe,"STRONG",{});var uPt=s(sCe);eyr=r(uPt,"t5"),uPt.forEach(t),oyr=r(hDe," \u2014 "),GY=n(hDe,"A",{href:!0});var pPt=s(GY);ryr=r(pPt,"TFT5ForConditionalGeneration"),pPt.forEach(t),tyr=r(hDe," (T5 model)"),hDe.forEach(t),Ie.forEach(t),ayr=i(Dl),T(W3.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),pze=i(m),Cc=n(m,"H2",{class:!0});var CWe=s(Cc);H3=n(CWe,"A",{id:!0,class:!0,href:!0});var _Pt=s(H3);lCe=n(_Pt,"SPAN",{});var bPt=s(lCe);T(Fx.$$.fragment,bPt),bPt.forEach(t),_Pt.forEach(t),nyr=i(CWe),iCe=n(CWe,"SPAN",{});var vPt=s(iCe);syr=r(vPt,"TFAutoModelForSequenceClassification"),vPt.forEach(t),CWe.forEach(t),_ze=i(m),lr=n(m,"DIV",{class:!0});var Gl=s(lr);T(Tx.$$.fragment,Gl),lyr=i(Gl),wc=n(Gl,"P",{});var qte=s(wc);iyr=r(qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),OY=n(qte,"A",{href:!0});var FPt=s(OY);dyr=r(FPt,"from_pretrained()"),FPt.forEach(t),cyr=r(qte," class method or the "),VY=n(qte,"A",{href:!0});var TPt=s(VY);myr=r(TPt,"from_config()"),TPt.forEach(t),fyr=r(qte,` class
method.`),qte.forEach(t),gyr=i(Gl),Mx=n(Gl,"P",{});var wWe=s(Mx);hyr=r(wWe,"This class cannot be instantiated directly using "),dCe=n(wWe,"CODE",{});var MPt=s(dCe);uyr=r(MPt,"__init__()"),MPt.forEach(t),pyr=r(wWe," (throws an error)."),wWe.forEach(t),_yr=i(Gl),jt=n(Gl,"DIV",{class:!0});var hL=s(jt);T(Ex.$$.fragment,hL),byr=i(hL),cCe=n(hL,"P",{});var EPt=s(cCe);vyr=r(EPt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),EPt.forEach(t),Fyr=i(hL),Ac=n(hL,"P",{});var jte=s(Ac);Tyr=r(jte,`Note:
Loading a model from its configuration file does `),mCe=n(jte,"STRONG",{});var CPt=s(mCe);Myr=r(CPt,"not"),CPt.forEach(t),Eyr=r(jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),XY=n(jte,"A",{href:!0});var wPt=s(XY);Cyr=r(wPt,"from_pretrained()"),wPt.forEach(t),wyr=r(jte," to load the model weights."),jte.forEach(t),Ayr=i(hL),T(U3.$$.fragment,hL),hL.forEach(t),Lyr=i(Gl),Br=n(Gl,"DIV",{class:!0});var Ol=s(Br);T(Cx.$$.fragment,Ol),yyr=i(Ol),fCe=n(Ol,"P",{});var APt=s(fCe);xyr=r(APt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),APt.forEach(t),$yr=i(Ol),gn=n(Ol,"P",{});var uL=s(gn);kyr=r(uL,"The model class to instantiate is selected based on the "),gCe=n(uL,"CODE",{});var LPt=s(gCe);Syr=r(LPt,"model_type"),LPt.forEach(t),Ryr=r(uL,` property of the config object (either
passed as an argument or loaded from `),hCe=n(uL,"CODE",{});var yPt=s(hCe);Pyr=r(yPt,"pretrained_model_name_or_path"),yPt.forEach(t),Byr=r(uL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uCe=n(uL,"CODE",{});var xPt=s(uCe);Iyr=r(xPt,"pretrained_model_name_or_path"),xPt.forEach(t),Nyr=r(uL,":"),uL.forEach(t),qyr=i(Ol),te=n(Ol,"UL",{});var ne=s(te);J3=n(ne,"LI",{});var uDe=s(J3);pCe=n(uDe,"STRONG",{});var $Pt=s(pCe);jyr=r($Pt,"albert"),$Pt.forEach(t),Dyr=r(uDe," \u2014 "),zY=n(uDe,"A",{href:!0});var kPt=s(zY);Gyr=r(kPt,"TFAlbertForSequenceClassification"),kPt.forEach(t),Oyr=r(uDe," (ALBERT model)"),uDe.forEach(t),Vyr=i(ne),Y3=n(ne,"LI",{});var pDe=s(Y3);_Ce=n(pDe,"STRONG",{});var SPt=s(_Ce);Xyr=r(SPt,"bert"),SPt.forEach(t),zyr=r(pDe," \u2014 "),QY=n(pDe,"A",{href:!0});var RPt=s(QY);Qyr=r(RPt,"TFBertForSequenceClassification"),RPt.forEach(t),Wyr=r(pDe," (BERT model)"),pDe.forEach(t),Hyr=i(ne),K3=n(ne,"LI",{});var _De=s(K3);bCe=n(_De,"STRONG",{});var PPt=s(bCe);Uyr=r(PPt,"camembert"),PPt.forEach(t),Jyr=r(_De," \u2014 "),WY=n(_De,"A",{href:!0});var BPt=s(WY);Yyr=r(BPt,"TFCamembertForSequenceClassification"),BPt.forEach(t),Kyr=r(_De," (CamemBERT model)"),_De.forEach(t),Zyr=i(ne),Z3=n(ne,"LI",{});var bDe=s(Z3);vCe=n(bDe,"STRONG",{});var IPt=s(vCe);e8r=r(IPt,"convbert"),IPt.forEach(t),o8r=r(bDe," \u2014 "),HY=n(bDe,"A",{href:!0});var NPt=s(HY);r8r=r(NPt,"TFConvBertForSequenceClassification"),NPt.forEach(t),t8r=r(bDe," (ConvBERT model)"),bDe.forEach(t),a8r=i(ne),e5=n(ne,"LI",{});var vDe=s(e5);FCe=n(vDe,"STRONG",{});var qPt=s(FCe);n8r=r(qPt,"ctrl"),qPt.forEach(t),s8r=r(vDe," \u2014 "),UY=n(vDe,"A",{href:!0});var jPt=s(UY);l8r=r(jPt,"TFCTRLForSequenceClassification"),jPt.forEach(t),i8r=r(vDe," (CTRL model)"),vDe.forEach(t),d8r=i(ne),o5=n(ne,"LI",{});var FDe=s(o5);TCe=n(FDe,"STRONG",{});var DPt=s(TCe);c8r=r(DPt,"deberta"),DPt.forEach(t),m8r=r(FDe," \u2014 "),JY=n(FDe,"A",{href:!0});var GPt=s(JY);f8r=r(GPt,"TFDebertaForSequenceClassification"),GPt.forEach(t),g8r=r(FDe," (DeBERTa model)"),FDe.forEach(t),h8r=i(ne),r5=n(ne,"LI",{});var TDe=s(r5);MCe=n(TDe,"STRONG",{});var OPt=s(MCe);u8r=r(OPt,"deberta-v2"),OPt.forEach(t),p8r=r(TDe," \u2014 "),YY=n(TDe,"A",{href:!0});var VPt=s(YY);_8r=r(VPt,"TFDebertaV2ForSequenceClassification"),VPt.forEach(t),b8r=r(TDe," (DeBERTa-v2 model)"),TDe.forEach(t),v8r=i(ne),t5=n(ne,"LI",{});var MDe=s(t5);ECe=n(MDe,"STRONG",{});var XPt=s(ECe);F8r=r(XPt,"distilbert"),XPt.forEach(t),T8r=r(MDe," \u2014 "),KY=n(MDe,"A",{href:!0});var zPt=s(KY);M8r=r(zPt,"TFDistilBertForSequenceClassification"),zPt.forEach(t),E8r=r(MDe," (DistilBERT model)"),MDe.forEach(t),C8r=i(ne),a5=n(ne,"LI",{});var EDe=s(a5);CCe=n(EDe,"STRONG",{});var QPt=s(CCe);w8r=r(QPt,"electra"),QPt.forEach(t),A8r=r(EDe," \u2014 "),ZY=n(EDe,"A",{href:!0});var WPt=s(ZY);L8r=r(WPt,"TFElectraForSequenceClassification"),WPt.forEach(t),y8r=r(EDe," (ELECTRA model)"),EDe.forEach(t),x8r=i(ne),n5=n(ne,"LI",{});var CDe=s(n5);wCe=n(CDe,"STRONG",{});var HPt=s(wCe);$8r=r(HPt,"flaubert"),HPt.forEach(t),k8r=r(CDe," \u2014 "),eK=n(CDe,"A",{href:!0});var UPt=s(eK);S8r=r(UPt,"TFFlaubertForSequenceClassification"),UPt.forEach(t),R8r=r(CDe," (FlauBERT model)"),CDe.forEach(t),P8r=i(ne),s5=n(ne,"LI",{});var wDe=s(s5);ACe=n(wDe,"STRONG",{});var JPt=s(ACe);B8r=r(JPt,"funnel"),JPt.forEach(t),I8r=r(wDe," \u2014 "),oK=n(wDe,"A",{href:!0});var YPt=s(oK);N8r=r(YPt,"TFFunnelForSequenceClassification"),YPt.forEach(t),q8r=r(wDe," (Funnel Transformer model)"),wDe.forEach(t),j8r=i(ne),l5=n(ne,"LI",{});var ADe=s(l5);LCe=n(ADe,"STRONG",{});var KPt=s(LCe);D8r=r(KPt,"gpt2"),KPt.forEach(t),G8r=r(ADe," \u2014 "),rK=n(ADe,"A",{href:!0});var ZPt=s(rK);O8r=r(ZPt,"TFGPT2ForSequenceClassification"),ZPt.forEach(t),V8r=r(ADe," (OpenAI GPT-2 model)"),ADe.forEach(t),X8r=i(ne),i5=n(ne,"LI",{});var LDe=s(i5);yCe=n(LDe,"STRONG",{});var eBt=s(yCe);z8r=r(eBt,"gptj"),eBt.forEach(t),Q8r=r(LDe," \u2014 "),tK=n(LDe,"A",{href:!0});var oBt=s(tK);W8r=r(oBt,"TFGPTJForSequenceClassification"),oBt.forEach(t),H8r=r(LDe," (GPT-J model)"),LDe.forEach(t),U8r=i(ne),d5=n(ne,"LI",{});var yDe=s(d5);xCe=n(yDe,"STRONG",{});var rBt=s(xCe);J8r=r(rBt,"layoutlm"),rBt.forEach(t),Y8r=r(yDe," \u2014 "),aK=n(yDe,"A",{href:!0});var tBt=s(aK);K8r=r(tBt,"TFLayoutLMForSequenceClassification"),tBt.forEach(t),Z8r=r(yDe," (LayoutLM model)"),yDe.forEach(t),e9r=i(ne),c5=n(ne,"LI",{});var xDe=s(c5);$Ce=n(xDe,"STRONG",{});var aBt=s($Ce);o9r=r(aBt,"longformer"),aBt.forEach(t),r9r=r(xDe," \u2014 "),nK=n(xDe,"A",{href:!0});var nBt=s(nK);t9r=r(nBt,"TFLongformerForSequenceClassification"),nBt.forEach(t),a9r=r(xDe," (Longformer model)"),xDe.forEach(t),n9r=i(ne),m5=n(ne,"LI",{});var $De=s(m5);kCe=n($De,"STRONG",{});var sBt=s(kCe);s9r=r(sBt,"mobilebert"),sBt.forEach(t),l9r=r($De," \u2014 "),sK=n($De,"A",{href:!0});var lBt=s(sK);i9r=r(lBt,"TFMobileBertForSequenceClassification"),lBt.forEach(t),d9r=r($De," (MobileBERT model)"),$De.forEach(t),c9r=i(ne),f5=n(ne,"LI",{});var kDe=s(f5);SCe=n(kDe,"STRONG",{});var iBt=s(SCe);m9r=r(iBt,"mpnet"),iBt.forEach(t),f9r=r(kDe," \u2014 "),lK=n(kDe,"A",{href:!0});var dBt=s(lK);g9r=r(dBt,"TFMPNetForSequenceClassification"),dBt.forEach(t),h9r=r(kDe," (MPNet model)"),kDe.forEach(t),u9r=i(ne),g5=n(ne,"LI",{});var SDe=s(g5);RCe=n(SDe,"STRONG",{});var cBt=s(RCe);p9r=r(cBt,"openai-gpt"),cBt.forEach(t),_9r=r(SDe," \u2014 "),iK=n(SDe,"A",{href:!0});var mBt=s(iK);b9r=r(mBt,"TFOpenAIGPTForSequenceClassification"),mBt.forEach(t),v9r=r(SDe," (OpenAI GPT model)"),SDe.forEach(t),F9r=i(ne),h5=n(ne,"LI",{});var RDe=s(h5);PCe=n(RDe,"STRONG",{});var fBt=s(PCe);T9r=r(fBt,"rembert"),fBt.forEach(t),M9r=r(RDe," \u2014 "),dK=n(RDe,"A",{href:!0});var gBt=s(dK);E9r=r(gBt,"TFRemBertForSequenceClassification"),gBt.forEach(t),C9r=r(RDe," (RemBERT model)"),RDe.forEach(t),w9r=i(ne),u5=n(ne,"LI",{});var PDe=s(u5);BCe=n(PDe,"STRONG",{});var hBt=s(BCe);A9r=r(hBt,"roberta"),hBt.forEach(t),L9r=r(PDe," \u2014 "),cK=n(PDe,"A",{href:!0});var uBt=s(cK);y9r=r(uBt,"TFRobertaForSequenceClassification"),uBt.forEach(t),x9r=r(PDe," (RoBERTa model)"),PDe.forEach(t),$9r=i(ne),p5=n(ne,"LI",{});var BDe=s(p5);ICe=n(BDe,"STRONG",{});var pBt=s(ICe);k9r=r(pBt,"roformer"),pBt.forEach(t),S9r=r(BDe," \u2014 "),mK=n(BDe,"A",{href:!0});var _Bt=s(mK);R9r=r(_Bt,"TFRoFormerForSequenceClassification"),_Bt.forEach(t),P9r=r(BDe," (RoFormer model)"),BDe.forEach(t),B9r=i(ne),_5=n(ne,"LI",{});var IDe=s(_5);NCe=n(IDe,"STRONG",{});var bBt=s(NCe);I9r=r(bBt,"tapas"),bBt.forEach(t),N9r=r(IDe," \u2014 "),fK=n(IDe,"A",{href:!0});var vBt=s(fK);q9r=r(vBt,"TFTapasForSequenceClassification"),vBt.forEach(t),j9r=r(IDe," (TAPAS model)"),IDe.forEach(t),D9r=i(ne),b5=n(ne,"LI",{});var NDe=s(b5);qCe=n(NDe,"STRONG",{});var FBt=s(qCe);G9r=r(FBt,"transfo-xl"),FBt.forEach(t),O9r=r(NDe," \u2014 "),gK=n(NDe,"A",{href:!0});var TBt=s(gK);V9r=r(TBt,"TFTransfoXLForSequenceClassification"),TBt.forEach(t),X9r=r(NDe," (Transformer-XL model)"),NDe.forEach(t),z9r=i(ne),v5=n(ne,"LI",{});var qDe=s(v5);jCe=n(qDe,"STRONG",{});var MBt=s(jCe);Q9r=r(MBt,"xlm"),MBt.forEach(t),W9r=r(qDe," \u2014 "),hK=n(qDe,"A",{href:!0});var EBt=s(hK);H9r=r(EBt,"TFXLMForSequenceClassification"),EBt.forEach(t),U9r=r(qDe," (XLM model)"),qDe.forEach(t),J9r=i(ne),F5=n(ne,"LI",{});var jDe=s(F5);DCe=n(jDe,"STRONG",{});var CBt=s(DCe);Y9r=r(CBt,"xlm-roberta"),CBt.forEach(t),K9r=r(jDe," \u2014 "),uK=n(jDe,"A",{href:!0});var wBt=s(uK);Z9r=r(wBt,"TFXLMRobertaForSequenceClassification"),wBt.forEach(t),exr=r(jDe," (XLM-RoBERTa model)"),jDe.forEach(t),oxr=i(ne),T5=n(ne,"LI",{});var DDe=s(T5);GCe=n(DDe,"STRONG",{});var ABt=s(GCe);rxr=r(ABt,"xlnet"),ABt.forEach(t),txr=r(DDe," \u2014 "),pK=n(DDe,"A",{href:!0});var LBt=s(pK);axr=r(LBt,"TFXLNetForSequenceClassification"),LBt.forEach(t),nxr=r(DDe," (XLNet model)"),DDe.forEach(t),ne.forEach(t),sxr=i(Ol),T(M5.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),bze=i(m),Lc=n(m,"H2",{class:!0});var AWe=s(Lc);E5=n(AWe,"A",{id:!0,class:!0,href:!0});var yBt=s(E5);OCe=n(yBt,"SPAN",{});var xBt=s(OCe);T(wx.$$.fragment,xBt),xBt.forEach(t),yBt.forEach(t),lxr=i(AWe),VCe=n(AWe,"SPAN",{});var $Bt=s(VCe);ixr=r($Bt,"TFAutoModelForMultipleChoice"),$Bt.forEach(t),AWe.forEach(t),vze=i(m),ir=n(m,"DIV",{class:!0});var Vl=s(ir);T(Ax.$$.fragment,Vl),dxr=i(Vl),yc=n(Vl,"P",{});var Dte=s(yc);cxr=r(Dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_K=n(Dte,"A",{href:!0});var kBt=s(_K);mxr=r(kBt,"from_pretrained()"),kBt.forEach(t),fxr=r(Dte," class method or the "),bK=n(Dte,"A",{href:!0});var SBt=s(bK);gxr=r(SBt,"from_config()"),SBt.forEach(t),hxr=r(Dte,` class
method.`),Dte.forEach(t),uxr=i(Vl),Lx=n(Vl,"P",{});var LWe=s(Lx);pxr=r(LWe,"This class cannot be instantiated directly using "),XCe=n(LWe,"CODE",{});var RBt=s(XCe);_xr=r(RBt,"__init__()"),RBt.forEach(t),bxr=r(LWe," (throws an error)."),LWe.forEach(t),vxr=i(Vl),Dt=n(Vl,"DIV",{class:!0});var pL=s(Dt);T(yx.$$.fragment,pL),Fxr=i(pL),zCe=n(pL,"P",{});var PBt=s(zCe);Txr=r(PBt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),PBt.forEach(t),Mxr=i(pL),xc=n(pL,"P",{});var Gte=s(xc);Exr=r(Gte,`Note:
Loading a model from its configuration file does `),QCe=n(Gte,"STRONG",{});var BBt=s(QCe);Cxr=r(BBt,"not"),BBt.forEach(t),wxr=r(Gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=n(Gte,"A",{href:!0});var IBt=s(vK);Axr=r(IBt,"from_pretrained()"),IBt.forEach(t),Lxr=r(Gte," to load the model weights."),Gte.forEach(t),yxr=i(pL),T(C5.$$.fragment,pL),pL.forEach(t),xxr=i(Vl),Ir=n(Vl,"DIV",{class:!0});var Xl=s(Ir);T(xx.$$.fragment,Xl),$xr=i(Xl),WCe=n(Xl,"P",{});var NBt=s(WCe);kxr=r(NBt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),NBt.forEach(t),Sxr=i(Xl),hn=n(Xl,"P",{});var _L=s(hn);Rxr=r(_L,"The model class to instantiate is selected based on the "),HCe=n(_L,"CODE",{});var qBt=s(HCe);Pxr=r(qBt,"model_type"),qBt.forEach(t),Bxr=r(_L,` property of the config object (either
passed as an argument or loaded from `),UCe=n(_L,"CODE",{});var jBt=s(UCe);Ixr=r(jBt,"pretrained_model_name_or_path"),jBt.forEach(t),Nxr=r(_L,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JCe=n(_L,"CODE",{});var DBt=s(JCe);qxr=r(DBt,"pretrained_model_name_or_path"),DBt.forEach(t),jxr=r(_L,":"),_L.forEach(t),Dxr=i(Xl),pe=n(Xl,"UL",{});var Fe=s(pe);w5=n(Fe,"LI",{});var GDe=s(w5);YCe=n(GDe,"STRONG",{});var GBt=s(YCe);Gxr=r(GBt,"albert"),GBt.forEach(t),Oxr=r(GDe," \u2014 "),FK=n(GDe,"A",{href:!0});var OBt=s(FK);Vxr=r(OBt,"TFAlbertForMultipleChoice"),OBt.forEach(t),Xxr=r(GDe," (ALBERT model)"),GDe.forEach(t),zxr=i(Fe),A5=n(Fe,"LI",{});var ODe=s(A5);KCe=n(ODe,"STRONG",{});var VBt=s(KCe);Qxr=r(VBt,"bert"),VBt.forEach(t),Wxr=r(ODe," \u2014 "),TK=n(ODe,"A",{href:!0});var XBt=s(TK);Hxr=r(XBt,"TFBertForMultipleChoice"),XBt.forEach(t),Uxr=r(ODe," (BERT model)"),ODe.forEach(t),Jxr=i(Fe),L5=n(Fe,"LI",{});var VDe=s(L5);ZCe=n(VDe,"STRONG",{});var zBt=s(ZCe);Yxr=r(zBt,"camembert"),zBt.forEach(t),Kxr=r(VDe," \u2014 "),MK=n(VDe,"A",{href:!0});var QBt=s(MK);Zxr=r(QBt,"TFCamembertForMultipleChoice"),QBt.forEach(t),e$r=r(VDe," (CamemBERT model)"),VDe.forEach(t),o$r=i(Fe),y5=n(Fe,"LI",{});var XDe=s(y5);e3e=n(XDe,"STRONG",{});var WBt=s(e3e);r$r=r(WBt,"convbert"),WBt.forEach(t),t$r=r(XDe," \u2014 "),EK=n(XDe,"A",{href:!0});var HBt=s(EK);a$r=r(HBt,"TFConvBertForMultipleChoice"),HBt.forEach(t),n$r=r(XDe," (ConvBERT model)"),XDe.forEach(t),s$r=i(Fe),x5=n(Fe,"LI",{});var zDe=s(x5);o3e=n(zDe,"STRONG",{});var UBt=s(o3e);l$r=r(UBt,"distilbert"),UBt.forEach(t),i$r=r(zDe," \u2014 "),CK=n(zDe,"A",{href:!0});var JBt=s(CK);d$r=r(JBt,"TFDistilBertForMultipleChoice"),JBt.forEach(t),c$r=r(zDe," (DistilBERT model)"),zDe.forEach(t),m$r=i(Fe),$5=n(Fe,"LI",{});var QDe=s($5);r3e=n(QDe,"STRONG",{});var YBt=s(r3e);f$r=r(YBt,"electra"),YBt.forEach(t),g$r=r(QDe," \u2014 "),wK=n(QDe,"A",{href:!0});var KBt=s(wK);h$r=r(KBt,"TFElectraForMultipleChoice"),KBt.forEach(t),u$r=r(QDe," (ELECTRA model)"),QDe.forEach(t),p$r=i(Fe),k5=n(Fe,"LI",{});var WDe=s(k5);t3e=n(WDe,"STRONG",{});var ZBt=s(t3e);_$r=r(ZBt,"flaubert"),ZBt.forEach(t),b$r=r(WDe," \u2014 "),AK=n(WDe,"A",{href:!0});var eIt=s(AK);v$r=r(eIt,"TFFlaubertForMultipleChoice"),eIt.forEach(t),F$r=r(WDe," (FlauBERT model)"),WDe.forEach(t),T$r=i(Fe),S5=n(Fe,"LI",{});var HDe=s(S5);a3e=n(HDe,"STRONG",{});var oIt=s(a3e);M$r=r(oIt,"funnel"),oIt.forEach(t),E$r=r(HDe," \u2014 "),LK=n(HDe,"A",{href:!0});var rIt=s(LK);C$r=r(rIt,"TFFunnelForMultipleChoice"),rIt.forEach(t),w$r=r(HDe," (Funnel Transformer model)"),HDe.forEach(t),A$r=i(Fe),R5=n(Fe,"LI",{});var UDe=s(R5);n3e=n(UDe,"STRONG",{});var tIt=s(n3e);L$r=r(tIt,"longformer"),tIt.forEach(t),y$r=r(UDe," \u2014 "),yK=n(UDe,"A",{href:!0});var aIt=s(yK);x$r=r(aIt,"TFLongformerForMultipleChoice"),aIt.forEach(t),$$r=r(UDe," (Longformer model)"),UDe.forEach(t),k$r=i(Fe),P5=n(Fe,"LI",{});var JDe=s(P5);s3e=n(JDe,"STRONG",{});var nIt=s(s3e);S$r=r(nIt,"mobilebert"),nIt.forEach(t),R$r=r(JDe," \u2014 "),xK=n(JDe,"A",{href:!0});var sIt=s(xK);P$r=r(sIt,"TFMobileBertForMultipleChoice"),sIt.forEach(t),B$r=r(JDe," (MobileBERT model)"),JDe.forEach(t),I$r=i(Fe),B5=n(Fe,"LI",{});var YDe=s(B5);l3e=n(YDe,"STRONG",{});var lIt=s(l3e);N$r=r(lIt,"mpnet"),lIt.forEach(t),q$r=r(YDe," \u2014 "),$K=n(YDe,"A",{href:!0});var iIt=s($K);j$r=r(iIt,"TFMPNetForMultipleChoice"),iIt.forEach(t),D$r=r(YDe," (MPNet model)"),YDe.forEach(t),G$r=i(Fe),I5=n(Fe,"LI",{});var KDe=s(I5);i3e=n(KDe,"STRONG",{});var dIt=s(i3e);O$r=r(dIt,"rembert"),dIt.forEach(t),V$r=r(KDe," \u2014 "),kK=n(KDe,"A",{href:!0});var cIt=s(kK);X$r=r(cIt,"TFRemBertForMultipleChoice"),cIt.forEach(t),z$r=r(KDe," (RemBERT model)"),KDe.forEach(t),Q$r=i(Fe),N5=n(Fe,"LI",{});var ZDe=s(N5);d3e=n(ZDe,"STRONG",{});var mIt=s(d3e);W$r=r(mIt,"roberta"),mIt.forEach(t),H$r=r(ZDe," \u2014 "),SK=n(ZDe,"A",{href:!0});var fIt=s(SK);U$r=r(fIt,"TFRobertaForMultipleChoice"),fIt.forEach(t),J$r=r(ZDe," (RoBERTa model)"),ZDe.forEach(t),Y$r=i(Fe),q5=n(Fe,"LI",{});var eGe=s(q5);c3e=n(eGe,"STRONG",{});var gIt=s(c3e);K$r=r(gIt,"roformer"),gIt.forEach(t),Z$r=r(eGe," \u2014 "),RK=n(eGe,"A",{href:!0});var hIt=s(RK);ekr=r(hIt,"TFRoFormerForMultipleChoice"),hIt.forEach(t),okr=r(eGe," (RoFormer model)"),eGe.forEach(t),rkr=i(Fe),j5=n(Fe,"LI",{});var oGe=s(j5);m3e=n(oGe,"STRONG",{});var uIt=s(m3e);tkr=r(uIt,"xlm"),uIt.forEach(t),akr=r(oGe," \u2014 "),PK=n(oGe,"A",{href:!0});var pIt=s(PK);nkr=r(pIt,"TFXLMForMultipleChoice"),pIt.forEach(t),skr=r(oGe," (XLM model)"),oGe.forEach(t),lkr=i(Fe),D5=n(Fe,"LI",{});var rGe=s(D5);f3e=n(rGe,"STRONG",{});var _It=s(f3e);ikr=r(_It,"xlm-roberta"),_It.forEach(t),dkr=r(rGe," \u2014 "),BK=n(rGe,"A",{href:!0});var bIt=s(BK);ckr=r(bIt,"TFXLMRobertaForMultipleChoice"),bIt.forEach(t),mkr=r(rGe," (XLM-RoBERTa model)"),rGe.forEach(t),fkr=i(Fe),G5=n(Fe,"LI",{});var tGe=s(G5);g3e=n(tGe,"STRONG",{});var vIt=s(g3e);gkr=r(vIt,"xlnet"),vIt.forEach(t),hkr=r(tGe," \u2014 "),IK=n(tGe,"A",{href:!0});var FIt=s(IK);ukr=r(FIt,"TFXLNetForMultipleChoice"),FIt.forEach(t),pkr=r(tGe," (XLNet model)"),tGe.forEach(t),Fe.forEach(t),_kr=i(Xl),T(O5.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),Fze=i(m),$c=n(m,"H2",{class:!0});var yWe=s($c);V5=n(yWe,"A",{id:!0,class:!0,href:!0});var TIt=s(V5);h3e=n(TIt,"SPAN",{});var MIt=s(h3e);T($x.$$.fragment,MIt),MIt.forEach(t),TIt.forEach(t),bkr=i(yWe),u3e=n(yWe,"SPAN",{});var EIt=s(u3e);vkr=r(EIt,"TFAutoModelForNextSentencePrediction"),EIt.forEach(t),yWe.forEach(t),Tze=i(m),dr=n(m,"DIV",{class:!0});var zl=s(dr);T(kx.$$.fragment,zl),Fkr=i(zl),kc=n(zl,"P",{});var Ote=s(kc);Tkr=r(Ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),NK=n(Ote,"A",{href:!0});var CIt=s(NK);Mkr=r(CIt,"from_pretrained()"),CIt.forEach(t),Ekr=r(Ote," class method or the "),qK=n(Ote,"A",{href:!0});var wIt=s(qK);Ckr=r(wIt,"from_config()"),wIt.forEach(t),wkr=r(Ote,` class
method.`),Ote.forEach(t),Akr=i(zl),Sx=n(zl,"P",{});var xWe=s(Sx);Lkr=r(xWe,"This class cannot be instantiated directly using "),p3e=n(xWe,"CODE",{});var AIt=s(p3e);ykr=r(AIt,"__init__()"),AIt.forEach(t),xkr=r(xWe," (throws an error)."),xWe.forEach(t),$kr=i(zl),Gt=n(zl,"DIV",{class:!0});var bL=s(Gt);T(Rx.$$.fragment,bL),kkr=i(bL),_3e=n(bL,"P",{});var LIt=s(_3e);Skr=r(LIt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),LIt.forEach(t),Rkr=i(bL),Sc=n(bL,"P",{});var Vte=s(Sc);Pkr=r(Vte,`Note:
Loading a model from its configuration file does `),b3e=n(Vte,"STRONG",{});var yIt=s(b3e);Bkr=r(yIt,"not"),yIt.forEach(t),Ikr=r(Vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=n(Vte,"A",{href:!0});var xIt=s(jK);Nkr=r(xIt,"from_pretrained()"),xIt.forEach(t),qkr=r(Vte," to load the model weights."),Vte.forEach(t),jkr=i(bL),T(X5.$$.fragment,bL),bL.forEach(t),Dkr=i(zl),Nr=n(zl,"DIV",{class:!0});var Ql=s(Nr);T(Px.$$.fragment,Ql),Gkr=i(Ql),v3e=n(Ql,"P",{});var $It=s(v3e);Okr=r($It,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),$It.forEach(t),Vkr=i(Ql),un=n(Ql,"P",{});var vL=s(un);Xkr=r(vL,"The model class to instantiate is selected based on the "),F3e=n(vL,"CODE",{});var kIt=s(F3e);zkr=r(kIt,"model_type"),kIt.forEach(t),Qkr=r(vL,` property of the config object (either
passed as an argument or loaded from `),T3e=n(vL,"CODE",{});var SIt=s(T3e);Wkr=r(SIt,"pretrained_model_name_or_path"),SIt.forEach(t),Hkr=r(vL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M3e=n(vL,"CODE",{});var RIt=s(M3e);Ukr=r(RIt,"pretrained_model_name_or_path"),RIt.forEach(t),Jkr=r(vL,":"),vL.forEach(t),Ykr=i(Ql),Bx=n(Ql,"UL",{});var $We=s(Bx);z5=n($We,"LI",{});var aGe=s(z5);E3e=n(aGe,"STRONG",{});var PIt=s(E3e);Kkr=r(PIt,"bert"),PIt.forEach(t),Zkr=r(aGe," \u2014 "),DK=n(aGe,"A",{href:!0});var BIt=s(DK);eSr=r(BIt,"TFBertForNextSentencePrediction"),BIt.forEach(t),oSr=r(aGe," (BERT model)"),aGe.forEach(t),rSr=i($We),Q5=n($We,"LI",{});var nGe=s(Q5);C3e=n(nGe,"STRONG",{});var IIt=s(C3e);tSr=r(IIt,"mobilebert"),IIt.forEach(t),aSr=r(nGe," \u2014 "),GK=n(nGe,"A",{href:!0});var NIt=s(GK);nSr=r(NIt,"TFMobileBertForNextSentencePrediction"),NIt.forEach(t),sSr=r(nGe," (MobileBERT model)"),nGe.forEach(t),$We.forEach(t),lSr=i(Ql),T(W5.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),Mze=i(m),Rc=n(m,"H2",{class:!0});var kWe=s(Rc);H5=n(kWe,"A",{id:!0,class:!0,href:!0});var qIt=s(H5);w3e=n(qIt,"SPAN",{});var jIt=s(w3e);T(Ix.$$.fragment,jIt),jIt.forEach(t),qIt.forEach(t),iSr=i(kWe),A3e=n(kWe,"SPAN",{});var DIt=s(A3e);dSr=r(DIt,"TFAutoModelForTableQuestionAnswering"),DIt.forEach(t),kWe.forEach(t),Eze=i(m),cr=n(m,"DIV",{class:!0});var Wl=s(cr);T(Nx.$$.fragment,Wl),cSr=i(Wl),Pc=n(Wl,"P",{});var Xte=s(Pc);mSr=r(Xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),OK=n(Xte,"A",{href:!0});var GIt=s(OK);fSr=r(GIt,"from_pretrained()"),GIt.forEach(t),gSr=r(Xte," class method or the "),VK=n(Xte,"A",{href:!0});var OIt=s(VK);hSr=r(OIt,"from_config()"),OIt.forEach(t),uSr=r(Xte,` class
method.`),Xte.forEach(t),pSr=i(Wl),qx=n(Wl,"P",{});var SWe=s(qx);_Sr=r(SWe,"This class cannot be instantiated directly using "),L3e=n(SWe,"CODE",{});var VIt=s(L3e);bSr=r(VIt,"__init__()"),VIt.forEach(t),vSr=r(SWe," (throws an error)."),SWe.forEach(t),FSr=i(Wl),Ot=n(Wl,"DIV",{class:!0});var FL=s(Ot);T(jx.$$.fragment,FL),TSr=i(FL),y3e=n(FL,"P",{});var XIt=s(y3e);MSr=r(XIt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),XIt.forEach(t),ESr=i(FL),Bc=n(FL,"P",{});var zte=s(Bc);CSr=r(zte,`Note:
Loading a model from its configuration file does `),x3e=n(zte,"STRONG",{});var zIt=s(x3e);wSr=r(zIt,"not"),zIt.forEach(t),ASr=r(zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),XK=n(zte,"A",{href:!0});var QIt=s(XK);LSr=r(QIt,"from_pretrained()"),QIt.forEach(t),ySr=r(zte," to load the model weights."),zte.forEach(t),xSr=i(FL),T(U5.$$.fragment,FL),FL.forEach(t),$Sr=i(Wl),qr=n(Wl,"DIV",{class:!0});var Hl=s(qr);T(Dx.$$.fragment,Hl),kSr=i(Hl),$3e=n(Hl,"P",{});var WIt=s($3e);SSr=r(WIt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),WIt.forEach(t),RSr=i(Hl),pn=n(Hl,"P",{});var TL=s(pn);PSr=r(TL,"The model class to instantiate is selected based on the "),k3e=n(TL,"CODE",{});var HIt=s(k3e);BSr=r(HIt,"model_type"),HIt.forEach(t),ISr=r(TL,` property of the config object (either
passed as an argument or loaded from `),S3e=n(TL,"CODE",{});var UIt=s(S3e);NSr=r(UIt,"pretrained_model_name_or_path"),UIt.forEach(t),qSr=r(TL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R3e=n(TL,"CODE",{});var JIt=s(R3e);jSr=r(JIt,"pretrained_model_name_or_path"),JIt.forEach(t),DSr=r(TL,":"),TL.forEach(t),GSr=i(Hl),P3e=n(Hl,"UL",{});var YIt=s(P3e);J5=n(YIt,"LI",{});var sGe=s(J5);B3e=n(sGe,"STRONG",{});var KIt=s(B3e);OSr=r(KIt,"tapas"),KIt.forEach(t),VSr=r(sGe," \u2014 "),zK=n(sGe,"A",{href:!0});var ZIt=s(zK);XSr=r(ZIt,"TFTapasForQuestionAnswering"),ZIt.forEach(t),zSr=r(sGe," (TAPAS model)"),sGe.forEach(t),YIt.forEach(t),QSr=i(Hl),T(Y5.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),Cze=i(m),Ic=n(m,"H2",{class:!0});var RWe=s(Ic);K5=n(RWe,"A",{id:!0,class:!0,href:!0});var eNt=s(K5);I3e=n(eNt,"SPAN",{});var oNt=s(I3e);T(Gx.$$.fragment,oNt),oNt.forEach(t),eNt.forEach(t),WSr=i(RWe),N3e=n(RWe,"SPAN",{});var rNt=s(N3e);HSr=r(rNt,"TFAutoModelForTokenClassification"),rNt.forEach(t),RWe.forEach(t),wze=i(m),mr=n(m,"DIV",{class:!0});var Ul=s(mr);T(Ox.$$.fragment,Ul),USr=i(Ul),Nc=n(Ul,"P",{});var Qte=s(Nc);JSr=r(Qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),QK=n(Qte,"A",{href:!0});var tNt=s(QK);YSr=r(tNt,"from_pretrained()"),tNt.forEach(t),KSr=r(Qte," class method or the "),WK=n(Qte,"A",{href:!0});var aNt=s(WK);ZSr=r(aNt,"from_config()"),aNt.forEach(t),eRr=r(Qte,` class
method.`),Qte.forEach(t),oRr=i(Ul),Vx=n(Ul,"P",{});var PWe=s(Vx);rRr=r(PWe,"This class cannot be instantiated directly using "),q3e=n(PWe,"CODE",{});var nNt=s(q3e);tRr=r(nNt,"__init__()"),nNt.forEach(t),aRr=r(PWe," (throws an error)."),PWe.forEach(t),nRr=i(Ul),Vt=n(Ul,"DIV",{class:!0});var ML=s(Vt);T(Xx.$$.fragment,ML),sRr=i(ML),j3e=n(ML,"P",{});var sNt=s(j3e);lRr=r(sNt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),sNt.forEach(t),iRr=i(ML),qc=n(ML,"P",{});var Wte=s(qc);dRr=r(Wte,`Note:
Loading a model from its configuration file does `),D3e=n(Wte,"STRONG",{});var lNt=s(D3e);cRr=r(lNt,"not"),lNt.forEach(t),mRr=r(Wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=n(Wte,"A",{href:!0});var iNt=s(HK);fRr=r(iNt,"from_pretrained()"),iNt.forEach(t),gRr=r(Wte," to load the model weights."),Wte.forEach(t),hRr=i(ML),T(Z5.$$.fragment,ML),ML.forEach(t),uRr=i(Ul),jr=n(Ul,"DIV",{class:!0});var Jl=s(jr);T(zx.$$.fragment,Jl),pRr=i(Jl),G3e=n(Jl,"P",{});var dNt=s(G3e);_Rr=r(dNt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),dNt.forEach(t),bRr=i(Jl),_n=n(Jl,"P",{});var EL=s(_n);vRr=r(EL,"The model class to instantiate is selected based on the "),O3e=n(EL,"CODE",{});var cNt=s(O3e);FRr=r(cNt,"model_type"),cNt.forEach(t),TRr=r(EL,` property of the config object (either
passed as an argument or loaded from `),V3e=n(EL,"CODE",{});var mNt=s(V3e);MRr=r(mNt,"pretrained_model_name_or_path"),mNt.forEach(t),ERr=r(EL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X3e=n(EL,"CODE",{});var fNt=s(X3e);CRr=r(fNt,"pretrained_model_name_or_path"),fNt.forEach(t),wRr=r(EL,":"),EL.forEach(t),ARr=i(Jl),de=n(Jl,"UL",{});var fe=s(de);e0=n(fe,"LI",{});var lGe=s(e0);z3e=n(lGe,"STRONG",{});var gNt=s(z3e);LRr=r(gNt,"albert"),gNt.forEach(t),yRr=r(lGe," \u2014 "),UK=n(lGe,"A",{href:!0});var hNt=s(UK);xRr=r(hNt,"TFAlbertForTokenClassification"),hNt.forEach(t),$Rr=r(lGe," (ALBERT model)"),lGe.forEach(t),kRr=i(fe),o0=n(fe,"LI",{});var iGe=s(o0);Q3e=n(iGe,"STRONG",{});var uNt=s(Q3e);SRr=r(uNt,"bert"),uNt.forEach(t),RRr=r(iGe," \u2014 "),JK=n(iGe,"A",{href:!0});var pNt=s(JK);PRr=r(pNt,"TFBertForTokenClassification"),pNt.forEach(t),BRr=r(iGe," (BERT model)"),iGe.forEach(t),IRr=i(fe),r0=n(fe,"LI",{});var dGe=s(r0);W3e=n(dGe,"STRONG",{});var _Nt=s(W3e);NRr=r(_Nt,"camembert"),_Nt.forEach(t),qRr=r(dGe," \u2014 "),YK=n(dGe,"A",{href:!0});var bNt=s(YK);jRr=r(bNt,"TFCamembertForTokenClassification"),bNt.forEach(t),DRr=r(dGe," (CamemBERT model)"),dGe.forEach(t),GRr=i(fe),t0=n(fe,"LI",{});var cGe=s(t0);H3e=n(cGe,"STRONG",{});var vNt=s(H3e);ORr=r(vNt,"convbert"),vNt.forEach(t),VRr=r(cGe," \u2014 "),KK=n(cGe,"A",{href:!0});var FNt=s(KK);XRr=r(FNt,"TFConvBertForTokenClassification"),FNt.forEach(t),zRr=r(cGe," (ConvBERT model)"),cGe.forEach(t),QRr=i(fe),a0=n(fe,"LI",{});var mGe=s(a0);U3e=n(mGe,"STRONG",{});var TNt=s(U3e);WRr=r(TNt,"deberta"),TNt.forEach(t),HRr=r(mGe," \u2014 "),ZK=n(mGe,"A",{href:!0});var MNt=s(ZK);URr=r(MNt,"TFDebertaForTokenClassification"),MNt.forEach(t),JRr=r(mGe," (DeBERTa model)"),mGe.forEach(t),YRr=i(fe),n0=n(fe,"LI",{});var fGe=s(n0);J3e=n(fGe,"STRONG",{});var ENt=s(J3e);KRr=r(ENt,"deberta-v2"),ENt.forEach(t),ZRr=r(fGe," \u2014 "),eZ=n(fGe,"A",{href:!0});var CNt=s(eZ);ePr=r(CNt,"TFDebertaV2ForTokenClassification"),CNt.forEach(t),oPr=r(fGe," (DeBERTa-v2 model)"),fGe.forEach(t),rPr=i(fe),s0=n(fe,"LI",{});var gGe=s(s0);Y3e=n(gGe,"STRONG",{});var wNt=s(Y3e);tPr=r(wNt,"distilbert"),wNt.forEach(t),aPr=r(gGe," \u2014 "),oZ=n(gGe,"A",{href:!0});var ANt=s(oZ);nPr=r(ANt,"TFDistilBertForTokenClassification"),ANt.forEach(t),sPr=r(gGe," (DistilBERT model)"),gGe.forEach(t),lPr=i(fe),l0=n(fe,"LI",{});var hGe=s(l0);K3e=n(hGe,"STRONG",{});var LNt=s(K3e);iPr=r(LNt,"electra"),LNt.forEach(t),dPr=r(hGe," \u2014 "),rZ=n(hGe,"A",{href:!0});var yNt=s(rZ);cPr=r(yNt,"TFElectraForTokenClassification"),yNt.forEach(t),mPr=r(hGe," (ELECTRA model)"),hGe.forEach(t),fPr=i(fe),i0=n(fe,"LI",{});var uGe=s(i0);Z3e=n(uGe,"STRONG",{});var xNt=s(Z3e);gPr=r(xNt,"flaubert"),xNt.forEach(t),hPr=r(uGe," \u2014 "),tZ=n(uGe,"A",{href:!0});var $Nt=s(tZ);uPr=r($Nt,"TFFlaubertForTokenClassification"),$Nt.forEach(t),pPr=r(uGe," (FlauBERT model)"),uGe.forEach(t),_Pr=i(fe),d0=n(fe,"LI",{});var pGe=s(d0);e5e=n(pGe,"STRONG",{});var kNt=s(e5e);bPr=r(kNt,"funnel"),kNt.forEach(t),vPr=r(pGe," \u2014 "),aZ=n(pGe,"A",{href:!0});var SNt=s(aZ);FPr=r(SNt,"TFFunnelForTokenClassification"),SNt.forEach(t),TPr=r(pGe," (Funnel Transformer model)"),pGe.forEach(t),MPr=i(fe),c0=n(fe,"LI",{});var _Ge=s(c0);o5e=n(_Ge,"STRONG",{});var RNt=s(o5e);EPr=r(RNt,"layoutlm"),RNt.forEach(t),CPr=r(_Ge," \u2014 "),nZ=n(_Ge,"A",{href:!0});var PNt=s(nZ);wPr=r(PNt,"TFLayoutLMForTokenClassification"),PNt.forEach(t),APr=r(_Ge," (LayoutLM model)"),_Ge.forEach(t),LPr=i(fe),m0=n(fe,"LI",{});var bGe=s(m0);r5e=n(bGe,"STRONG",{});var BNt=s(r5e);yPr=r(BNt,"longformer"),BNt.forEach(t),xPr=r(bGe," \u2014 "),sZ=n(bGe,"A",{href:!0});var INt=s(sZ);$Pr=r(INt,"TFLongformerForTokenClassification"),INt.forEach(t),kPr=r(bGe," (Longformer model)"),bGe.forEach(t),SPr=i(fe),f0=n(fe,"LI",{});var vGe=s(f0);t5e=n(vGe,"STRONG",{});var NNt=s(t5e);RPr=r(NNt,"mobilebert"),NNt.forEach(t),PPr=r(vGe," \u2014 "),lZ=n(vGe,"A",{href:!0});var qNt=s(lZ);BPr=r(qNt,"TFMobileBertForTokenClassification"),qNt.forEach(t),IPr=r(vGe," (MobileBERT model)"),vGe.forEach(t),NPr=i(fe),g0=n(fe,"LI",{});var FGe=s(g0);a5e=n(FGe,"STRONG",{});var jNt=s(a5e);qPr=r(jNt,"mpnet"),jNt.forEach(t),jPr=r(FGe," \u2014 "),iZ=n(FGe,"A",{href:!0});var DNt=s(iZ);DPr=r(DNt,"TFMPNetForTokenClassification"),DNt.forEach(t),GPr=r(FGe," (MPNet model)"),FGe.forEach(t),OPr=i(fe),h0=n(fe,"LI",{});var TGe=s(h0);n5e=n(TGe,"STRONG",{});var GNt=s(n5e);VPr=r(GNt,"rembert"),GNt.forEach(t),XPr=r(TGe," \u2014 "),dZ=n(TGe,"A",{href:!0});var ONt=s(dZ);zPr=r(ONt,"TFRemBertForTokenClassification"),ONt.forEach(t),QPr=r(TGe," (RemBERT model)"),TGe.forEach(t),WPr=i(fe),u0=n(fe,"LI",{});var MGe=s(u0);s5e=n(MGe,"STRONG",{});var VNt=s(s5e);HPr=r(VNt,"roberta"),VNt.forEach(t),UPr=r(MGe," \u2014 "),cZ=n(MGe,"A",{href:!0});var XNt=s(cZ);JPr=r(XNt,"TFRobertaForTokenClassification"),XNt.forEach(t),YPr=r(MGe," (RoBERTa model)"),MGe.forEach(t),KPr=i(fe),p0=n(fe,"LI",{});var EGe=s(p0);l5e=n(EGe,"STRONG",{});var zNt=s(l5e);ZPr=r(zNt,"roformer"),zNt.forEach(t),eBr=r(EGe," \u2014 "),mZ=n(EGe,"A",{href:!0});var QNt=s(mZ);oBr=r(QNt,"TFRoFormerForTokenClassification"),QNt.forEach(t),rBr=r(EGe," (RoFormer model)"),EGe.forEach(t),tBr=i(fe),_0=n(fe,"LI",{});var CGe=s(_0);i5e=n(CGe,"STRONG",{});var WNt=s(i5e);aBr=r(WNt,"xlm"),WNt.forEach(t),nBr=r(CGe," \u2014 "),fZ=n(CGe,"A",{href:!0});var HNt=s(fZ);sBr=r(HNt,"TFXLMForTokenClassification"),HNt.forEach(t),lBr=r(CGe," (XLM model)"),CGe.forEach(t),iBr=i(fe),b0=n(fe,"LI",{});var wGe=s(b0);d5e=n(wGe,"STRONG",{});var UNt=s(d5e);dBr=r(UNt,"xlm-roberta"),UNt.forEach(t),cBr=r(wGe," \u2014 "),gZ=n(wGe,"A",{href:!0});var JNt=s(gZ);mBr=r(JNt,"TFXLMRobertaForTokenClassification"),JNt.forEach(t),fBr=r(wGe," (XLM-RoBERTa model)"),wGe.forEach(t),gBr=i(fe),v0=n(fe,"LI",{});var AGe=s(v0);c5e=n(AGe,"STRONG",{});var YNt=s(c5e);hBr=r(YNt,"xlnet"),YNt.forEach(t),uBr=r(AGe," \u2014 "),hZ=n(AGe,"A",{href:!0});var KNt=s(hZ);pBr=r(KNt,"TFXLNetForTokenClassification"),KNt.forEach(t),_Br=r(AGe," (XLNet model)"),AGe.forEach(t),fe.forEach(t),bBr=i(Jl),T(F0.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),Aze=i(m),jc=n(m,"H2",{class:!0});var BWe=s(jc);T0=n(BWe,"A",{id:!0,class:!0,href:!0});var ZNt=s(T0);m5e=n(ZNt,"SPAN",{});var eqt=s(m5e);T(Qx.$$.fragment,eqt),eqt.forEach(t),ZNt.forEach(t),vBr=i(BWe),f5e=n(BWe,"SPAN",{});var oqt=s(f5e);FBr=r(oqt,"TFAutoModelForQuestionAnswering"),oqt.forEach(t),BWe.forEach(t),Lze=i(m),fr=n(m,"DIV",{class:!0});var Yl=s(fr);T(Wx.$$.fragment,Yl),TBr=i(Yl),Dc=n(Yl,"P",{});var Hte=s(Dc);MBr=r(Hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uZ=n(Hte,"A",{href:!0});var rqt=s(uZ);EBr=r(rqt,"from_pretrained()"),rqt.forEach(t),CBr=r(Hte," class method or the "),pZ=n(Hte,"A",{href:!0});var tqt=s(pZ);wBr=r(tqt,"from_config()"),tqt.forEach(t),ABr=r(Hte,` class
method.`),Hte.forEach(t),LBr=i(Yl),Hx=n(Yl,"P",{});var IWe=s(Hx);yBr=r(IWe,"This class cannot be instantiated directly using "),g5e=n(IWe,"CODE",{});var aqt=s(g5e);xBr=r(aqt,"__init__()"),aqt.forEach(t),$Br=r(IWe," (throws an error)."),IWe.forEach(t),kBr=i(Yl),Xt=n(Yl,"DIV",{class:!0});var CL=s(Xt);T(Ux.$$.fragment,CL),SBr=i(CL),h5e=n(CL,"P",{});var nqt=s(h5e);RBr=r(nqt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),nqt.forEach(t),PBr=i(CL),Gc=n(CL,"P",{});var Ute=s(Gc);BBr=r(Ute,`Note:
Loading a model from its configuration file does `),u5e=n(Ute,"STRONG",{});var sqt=s(u5e);IBr=r(sqt,"not"),sqt.forEach(t),NBr=r(Ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Z=n(Ute,"A",{href:!0});var lqt=s(_Z);qBr=r(lqt,"from_pretrained()"),lqt.forEach(t),jBr=r(Ute," to load the model weights."),Ute.forEach(t),DBr=i(CL),T(M0.$$.fragment,CL),CL.forEach(t),GBr=i(Yl),Dr=n(Yl,"DIV",{class:!0});var Kl=s(Dr);T(Jx.$$.fragment,Kl),OBr=i(Kl),p5e=n(Kl,"P",{});var iqt=s(p5e);VBr=r(iqt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),iqt.forEach(t),XBr=i(Kl),bn=n(Kl,"P",{});var wL=s(bn);zBr=r(wL,"The model class to instantiate is selected based on the "),_5e=n(wL,"CODE",{});var dqt=s(_5e);QBr=r(dqt,"model_type"),dqt.forEach(t),WBr=r(wL,` property of the config object (either
passed as an argument or loaded from `),b5e=n(wL,"CODE",{});var cqt=s(b5e);HBr=r(cqt,"pretrained_model_name_or_path"),cqt.forEach(t),UBr=r(wL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v5e=n(wL,"CODE",{});var mqt=s(v5e);JBr=r(mqt,"pretrained_model_name_or_path"),mqt.forEach(t),YBr=r(wL,":"),wL.forEach(t),KBr=i(Kl),ce=n(Kl,"UL",{});var ge=s(ce);E0=n(ge,"LI",{});var LGe=s(E0);F5e=n(LGe,"STRONG",{});var fqt=s(F5e);ZBr=r(fqt,"albert"),fqt.forEach(t),eIr=r(LGe," \u2014 "),bZ=n(LGe,"A",{href:!0});var gqt=s(bZ);oIr=r(gqt,"TFAlbertForQuestionAnswering"),gqt.forEach(t),rIr=r(LGe," (ALBERT model)"),LGe.forEach(t),tIr=i(ge),C0=n(ge,"LI",{});var yGe=s(C0);T5e=n(yGe,"STRONG",{});var hqt=s(T5e);aIr=r(hqt,"bert"),hqt.forEach(t),nIr=r(yGe," \u2014 "),vZ=n(yGe,"A",{href:!0});var uqt=s(vZ);sIr=r(uqt,"TFBertForQuestionAnswering"),uqt.forEach(t),lIr=r(yGe," (BERT model)"),yGe.forEach(t),iIr=i(ge),w0=n(ge,"LI",{});var xGe=s(w0);M5e=n(xGe,"STRONG",{});var pqt=s(M5e);dIr=r(pqt,"camembert"),pqt.forEach(t),cIr=r(xGe," \u2014 "),FZ=n(xGe,"A",{href:!0});var _qt=s(FZ);mIr=r(_qt,"TFCamembertForQuestionAnswering"),_qt.forEach(t),fIr=r(xGe," (CamemBERT model)"),xGe.forEach(t),gIr=i(ge),A0=n(ge,"LI",{});var $Ge=s(A0);E5e=n($Ge,"STRONG",{});var bqt=s(E5e);hIr=r(bqt,"convbert"),bqt.forEach(t),uIr=r($Ge," \u2014 "),TZ=n($Ge,"A",{href:!0});var vqt=s(TZ);pIr=r(vqt,"TFConvBertForQuestionAnswering"),vqt.forEach(t),_Ir=r($Ge," (ConvBERT model)"),$Ge.forEach(t),bIr=i(ge),L0=n(ge,"LI",{});var kGe=s(L0);C5e=n(kGe,"STRONG",{});var Fqt=s(C5e);vIr=r(Fqt,"deberta"),Fqt.forEach(t),FIr=r(kGe," \u2014 "),MZ=n(kGe,"A",{href:!0});var Tqt=s(MZ);TIr=r(Tqt,"TFDebertaForQuestionAnswering"),Tqt.forEach(t),MIr=r(kGe," (DeBERTa model)"),kGe.forEach(t),EIr=i(ge),y0=n(ge,"LI",{});var SGe=s(y0);w5e=n(SGe,"STRONG",{});var Mqt=s(w5e);CIr=r(Mqt,"deberta-v2"),Mqt.forEach(t),wIr=r(SGe," \u2014 "),EZ=n(SGe,"A",{href:!0});var Eqt=s(EZ);AIr=r(Eqt,"TFDebertaV2ForQuestionAnswering"),Eqt.forEach(t),LIr=r(SGe," (DeBERTa-v2 model)"),SGe.forEach(t),yIr=i(ge),x0=n(ge,"LI",{});var RGe=s(x0);A5e=n(RGe,"STRONG",{});var Cqt=s(A5e);xIr=r(Cqt,"distilbert"),Cqt.forEach(t),$Ir=r(RGe," \u2014 "),CZ=n(RGe,"A",{href:!0});var wqt=s(CZ);kIr=r(wqt,"TFDistilBertForQuestionAnswering"),wqt.forEach(t),SIr=r(RGe," (DistilBERT model)"),RGe.forEach(t),RIr=i(ge),$0=n(ge,"LI",{});var PGe=s($0);L5e=n(PGe,"STRONG",{});var Aqt=s(L5e);PIr=r(Aqt,"electra"),Aqt.forEach(t),BIr=r(PGe," \u2014 "),wZ=n(PGe,"A",{href:!0});var Lqt=s(wZ);IIr=r(Lqt,"TFElectraForQuestionAnswering"),Lqt.forEach(t),NIr=r(PGe," (ELECTRA model)"),PGe.forEach(t),qIr=i(ge),k0=n(ge,"LI",{});var BGe=s(k0);y5e=n(BGe,"STRONG",{});var yqt=s(y5e);jIr=r(yqt,"flaubert"),yqt.forEach(t),DIr=r(BGe," \u2014 "),AZ=n(BGe,"A",{href:!0});var xqt=s(AZ);GIr=r(xqt,"TFFlaubertForQuestionAnsweringSimple"),xqt.forEach(t),OIr=r(BGe," (FlauBERT model)"),BGe.forEach(t),VIr=i(ge),S0=n(ge,"LI",{});var IGe=s(S0);x5e=n(IGe,"STRONG",{});var $qt=s(x5e);XIr=r($qt,"funnel"),$qt.forEach(t),zIr=r(IGe," \u2014 "),LZ=n(IGe,"A",{href:!0});var kqt=s(LZ);QIr=r(kqt,"TFFunnelForQuestionAnswering"),kqt.forEach(t),WIr=r(IGe," (Funnel Transformer model)"),IGe.forEach(t),HIr=i(ge),R0=n(ge,"LI",{});var NGe=s(R0);$5e=n(NGe,"STRONG",{});var Sqt=s($5e);UIr=r(Sqt,"gptj"),Sqt.forEach(t),JIr=r(NGe," \u2014 "),yZ=n(NGe,"A",{href:!0});var Rqt=s(yZ);YIr=r(Rqt,"TFGPTJForQuestionAnswering"),Rqt.forEach(t),KIr=r(NGe," (GPT-J model)"),NGe.forEach(t),ZIr=i(ge),P0=n(ge,"LI",{});var qGe=s(P0);k5e=n(qGe,"STRONG",{});var Pqt=s(k5e);eNr=r(Pqt,"longformer"),Pqt.forEach(t),oNr=r(qGe," \u2014 "),xZ=n(qGe,"A",{href:!0});var Bqt=s(xZ);rNr=r(Bqt,"TFLongformerForQuestionAnswering"),Bqt.forEach(t),tNr=r(qGe," (Longformer model)"),qGe.forEach(t),aNr=i(ge),B0=n(ge,"LI",{});var jGe=s(B0);S5e=n(jGe,"STRONG",{});var Iqt=s(S5e);nNr=r(Iqt,"mobilebert"),Iqt.forEach(t),sNr=r(jGe," \u2014 "),$Z=n(jGe,"A",{href:!0});var Nqt=s($Z);lNr=r(Nqt,"TFMobileBertForQuestionAnswering"),Nqt.forEach(t),iNr=r(jGe," (MobileBERT model)"),jGe.forEach(t),dNr=i(ge),I0=n(ge,"LI",{});var DGe=s(I0);R5e=n(DGe,"STRONG",{});var qqt=s(R5e);cNr=r(qqt,"mpnet"),qqt.forEach(t),mNr=r(DGe," \u2014 "),kZ=n(DGe,"A",{href:!0});var jqt=s(kZ);fNr=r(jqt,"TFMPNetForQuestionAnswering"),jqt.forEach(t),gNr=r(DGe," (MPNet model)"),DGe.forEach(t),hNr=i(ge),N0=n(ge,"LI",{});var GGe=s(N0);P5e=n(GGe,"STRONG",{});var Dqt=s(P5e);uNr=r(Dqt,"rembert"),Dqt.forEach(t),pNr=r(GGe," \u2014 "),SZ=n(GGe,"A",{href:!0});var Gqt=s(SZ);_Nr=r(Gqt,"TFRemBertForQuestionAnswering"),Gqt.forEach(t),bNr=r(GGe," (RemBERT model)"),GGe.forEach(t),vNr=i(ge),q0=n(ge,"LI",{});var OGe=s(q0);B5e=n(OGe,"STRONG",{});var Oqt=s(B5e);FNr=r(Oqt,"roberta"),Oqt.forEach(t),TNr=r(OGe," \u2014 "),RZ=n(OGe,"A",{href:!0});var Vqt=s(RZ);MNr=r(Vqt,"TFRobertaForQuestionAnswering"),Vqt.forEach(t),ENr=r(OGe," (RoBERTa model)"),OGe.forEach(t),CNr=i(ge),j0=n(ge,"LI",{});var VGe=s(j0);I5e=n(VGe,"STRONG",{});var Xqt=s(I5e);wNr=r(Xqt,"roformer"),Xqt.forEach(t),ANr=r(VGe," \u2014 "),PZ=n(VGe,"A",{href:!0});var zqt=s(PZ);LNr=r(zqt,"TFRoFormerForQuestionAnswering"),zqt.forEach(t),yNr=r(VGe," (RoFormer model)"),VGe.forEach(t),xNr=i(ge),D0=n(ge,"LI",{});var XGe=s(D0);N5e=n(XGe,"STRONG",{});var Qqt=s(N5e);$Nr=r(Qqt,"xlm"),Qqt.forEach(t),kNr=r(XGe," \u2014 "),BZ=n(XGe,"A",{href:!0});var Wqt=s(BZ);SNr=r(Wqt,"TFXLMForQuestionAnsweringSimple"),Wqt.forEach(t),RNr=r(XGe," (XLM model)"),XGe.forEach(t),PNr=i(ge),G0=n(ge,"LI",{});var zGe=s(G0);q5e=n(zGe,"STRONG",{});var Hqt=s(q5e);BNr=r(Hqt,"xlm-roberta"),Hqt.forEach(t),INr=r(zGe," \u2014 "),IZ=n(zGe,"A",{href:!0});var Uqt=s(IZ);NNr=r(Uqt,"TFXLMRobertaForQuestionAnswering"),Uqt.forEach(t),qNr=r(zGe," (XLM-RoBERTa model)"),zGe.forEach(t),jNr=i(ge),O0=n(ge,"LI",{});var QGe=s(O0);j5e=n(QGe,"STRONG",{});var Jqt=s(j5e);DNr=r(Jqt,"xlnet"),Jqt.forEach(t),GNr=r(QGe," \u2014 "),NZ=n(QGe,"A",{href:!0});var Yqt=s(NZ);ONr=r(Yqt,"TFXLNetForQuestionAnsweringSimple"),Yqt.forEach(t),VNr=r(QGe," (XLNet model)"),QGe.forEach(t),ge.forEach(t),XNr=i(Kl),T(V0.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),yze=i(m),Oc=n(m,"H2",{class:!0});var NWe=s(Oc);X0=n(NWe,"A",{id:!0,class:!0,href:!0});var Kqt=s(X0);D5e=n(Kqt,"SPAN",{});var Zqt=s(D5e);T(Yx.$$.fragment,Zqt),Zqt.forEach(t),Kqt.forEach(t),zNr=i(NWe),G5e=n(NWe,"SPAN",{});var ejt=s(G5e);QNr=r(ejt,"TFAutoModelForVision2Seq"),ejt.forEach(t),NWe.forEach(t),xze=i(m),gr=n(m,"DIV",{class:!0});var Zl=s(gr);T(Kx.$$.fragment,Zl),WNr=i(Zl),Vc=n(Zl,"P",{});var Jte=s(Vc);HNr=r(Jte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qZ=n(Jte,"A",{href:!0});var ojt=s(qZ);UNr=r(ojt,"from_pretrained()"),ojt.forEach(t),JNr=r(Jte," class method or the "),jZ=n(Jte,"A",{href:!0});var rjt=s(jZ);YNr=r(rjt,"from_config()"),rjt.forEach(t),KNr=r(Jte,` class
method.`),Jte.forEach(t),ZNr=i(Zl),Zx=n(Zl,"P",{});var qWe=s(Zx);eqr=r(qWe,"This class cannot be instantiated directly using "),O5e=n(qWe,"CODE",{});var tjt=s(O5e);oqr=r(tjt,"__init__()"),tjt.forEach(t),rqr=r(qWe," (throws an error)."),qWe.forEach(t),tqr=i(Zl),zt=n(Zl,"DIV",{class:!0});var AL=s(zt);T(e$.$$.fragment,AL),aqr=i(AL),V5e=n(AL,"P",{});var ajt=s(V5e);nqr=r(ajt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ajt.forEach(t),sqr=i(AL),Xc=n(AL,"P",{});var Yte=s(Xc);lqr=r(Yte,`Note:
Loading a model from its configuration file does `),X5e=n(Yte,"STRONG",{});var njt=s(X5e);iqr=r(njt,"not"),njt.forEach(t),dqr=r(Yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),DZ=n(Yte,"A",{href:!0});var sjt=s(DZ);cqr=r(sjt,"from_pretrained()"),sjt.forEach(t),mqr=r(Yte," to load the model weights."),Yte.forEach(t),fqr=i(AL),T(z0.$$.fragment,AL),AL.forEach(t),gqr=i(Zl),Gr=n(Zl,"DIV",{class:!0});var ei=s(Gr);T(o$.$$.fragment,ei),hqr=i(ei),z5e=n(ei,"P",{});var ljt=s(z5e);uqr=r(ljt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ljt.forEach(t),pqr=i(ei),vn=n(ei,"P",{});var LL=s(vn);_qr=r(LL,"The model class to instantiate is selected based on the "),Q5e=n(LL,"CODE",{});var ijt=s(Q5e);bqr=r(ijt,"model_type"),ijt.forEach(t),vqr=r(LL,` property of the config object (either
passed as an argument or loaded from `),W5e=n(LL,"CODE",{});var djt=s(W5e);Fqr=r(djt,"pretrained_model_name_or_path"),djt.forEach(t),Tqr=r(LL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H5e=n(LL,"CODE",{});var cjt=s(H5e);Mqr=r(cjt,"pretrained_model_name_or_path"),cjt.forEach(t),Eqr=r(LL,":"),LL.forEach(t),Cqr=i(ei),U5e=n(ei,"UL",{});var mjt=s(U5e);Q0=n(mjt,"LI",{});var WGe=s(Q0);J5e=n(WGe,"STRONG",{});var fjt=s(J5e);wqr=r(fjt,"vision-encoder-decoder"),fjt.forEach(t),Aqr=r(WGe," \u2014 "),GZ=n(WGe,"A",{href:!0});var gjt=s(GZ);Lqr=r(gjt,"TFVisionEncoderDecoderModel"),gjt.forEach(t),yqr=r(WGe," (Vision Encoder decoder model)"),WGe.forEach(t),mjt.forEach(t),xqr=i(ei),T(W0.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),$ze=i(m),zc=n(m,"H2",{class:!0});var jWe=s(zc);H0=n(jWe,"A",{id:!0,class:!0,href:!0});var hjt=s(H0);Y5e=n(hjt,"SPAN",{});var ujt=s(Y5e);T(r$.$$.fragment,ujt),ujt.forEach(t),hjt.forEach(t),$qr=i(jWe),K5e=n(jWe,"SPAN",{});var pjt=s(K5e);kqr=r(pjt,"TFAutoModelForSpeechSeq2Seq"),pjt.forEach(t),jWe.forEach(t),kze=i(m),hr=n(m,"DIV",{class:!0});var oi=s(hr);T(t$.$$.fragment,oi),Sqr=i(oi),Qc=n(oi,"P",{});var Kte=s(Qc);Rqr=r(Kte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),OZ=n(Kte,"A",{href:!0});var _jt=s(OZ);Pqr=r(_jt,"from_pretrained()"),_jt.forEach(t),Bqr=r(Kte," class method or the "),VZ=n(Kte,"A",{href:!0});var bjt=s(VZ);Iqr=r(bjt,"from_config()"),bjt.forEach(t),Nqr=r(Kte,` class
method.`),Kte.forEach(t),qqr=i(oi),a$=n(oi,"P",{});var DWe=s(a$);jqr=r(DWe,"This class cannot be instantiated directly using "),Z5e=n(DWe,"CODE",{});var vjt=s(Z5e);Dqr=r(vjt,"__init__()"),vjt.forEach(t),Gqr=r(DWe," (throws an error)."),DWe.forEach(t),Oqr=i(oi),Qt=n(oi,"DIV",{class:!0});var yL=s(Qt);T(n$.$$.fragment,yL),Vqr=i(yL),e0e=n(yL,"P",{});var Fjt=s(e0e);Xqr=r(Fjt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Fjt.forEach(t),zqr=i(yL),Wc=n(yL,"P",{});var Zte=s(Wc);Qqr=r(Zte,`Note:
Loading a model from its configuration file does `),o0e=n(Zte,"STRONG",{});var Tjt=s(o0e);Wqr=r(Tjt,"not"),Tjt.forEach(t),Hqr=r(Zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),XZ=n(Zte,"A",{href:!0});var Mjt=s(XZ);Uqr=r(Mjt,"from_pretrained()"),Mjt.forEach(t),Jqr=r(Zte," to load the model weights."),Zte.forEach(t),Yqr=i(yL),T(U0.$$.fragment,yL),yL.forEach(t),Kqr=i(oi),Or=n(oi,"DIV",{class:!0});var ri=s(Or);T(s$.$$.fragment,ri),Zqr=i(ri),r0e=n(ri,"P",{});var Ejt=s(r0e);ejr=r(Ejt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Ejt.forEach(t),ojr=i(ri),Fn=n(ri,"P",{});var xL=s(Fn);rjr=r(xL,"The model class to instantiate is selected based on the "),t0e=n(xL,"CODE",{});var Cjt=s(t0e);tjr=r(Cjt,"model_type"),Cjt.forEach(t),ajr=r(xL,` property of the config object (either
passed as an argument or loaded from `),a0e=n(xL,"CODE",{});var wjt=s(a0e);njr=r(wjt,"pretrained_model_name_or_path"),wjt.forEach(t),sjr=r(xL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n0e=n(xL,"CODE",{});var Ajt=s(n0e);ljr=r(Ajt,"pretrained_model_name_or_path"),Ajt.forEach(t),ijr=r(xL,":"),xL.forEach(t),djr=i(ri),s0e=n(ri,"UL",{});var Ljt=s(s0e);J0=n(Ljt,"LI",{});var HGe=s(J0);l0e=n(HGe,"STRONG",{});var yjt=s(l0e);cjr=r(yjt,"speech_to_text"),yjt.forEach(t),mjr=r(HGe," \u2014 "),zZ=n(HGe,"A",{href:!0});var xjt=s(zZ);fjr=r(xjt,"TFSpeech2TextForConditionalGeneration"),xjt.forEach(t),gjr=r(HGe," (Speech2Text model)"),HGe.forEach(t),Ljt.forEach(t),hjr=i(ri),T(Y0.$$.fragment,ri),ri.forEach(t),oi.forEach(t),Sze=i(m),Hc=n(m,"H2",{class:!0});var GWe=s(Hc);K0=n(GWe,"A",{id:!0,class:!0,href:!0});var $jt=s(K0);i0e=n($jt,"SPAN",{});var kjt=s(i0e);T(l$.$$.fragment,kjt),kjt.forEach(t),$jt.forEach(t),ujr=i(GWe),d0e=n(GWe,"SPAN",{});var Sjt=s(d0e);pjr=r(Sjt,"FlaxAutoModel"),Sjt.forEach(t),GWe.forEach(t),Rze=i(m),ur=n(m,"DIV",{class:!0});var ti=s(ur);T(i$.$$.fragment,ti),_jr=i(ti),Uc=n(ti,"P",{});var eae=s(Uc);bjr=r(eae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),QZ=n(eae,"A",{href:!0});var Rjt=s(QZ);vjr=r(Rjt,"from_pretrained()"),Rjt.forEach(t),Fjr=r(eae," class method or the "),WZ=n(eae,"A",{href:!0});var Pjt=s(WZ);Tjr=r(Pjt,"from_config()"),Pjt.forEach(t),Mjr=r(eae,` class
method.`),eae.forEach(t),Ejr=i(ti),d$=n(ti,"P",{});var OWe=s(d$);Cjr=r(OWe,"This class cannot be instantiated directly using "),c0e=n(OWe,"CODE",{});var Bjt=s(c0e);wjr=r(Bjt,"__init__()"),Bjt.forEach(t),Ajr=r(OWe," (throws an error)."),OWe.forEach(t),Ljr=i(ti),Wt=n(ti,"DIV",{class:!0});var $L=s(Wt);T(c$.$$.fragment,$L),yjr=i($L),m0e=n($L,"P",{});var Ijt=s(m0e);xjr=r(Ijt,"Instantiates one of the base model classes of the library from a configuration."),Ijt.forEach(t),$jr=i($L),Jc=n($L,"P",{});var oae=s(Jc);kjr=r(oae,`Note:
Loading a model from its configuration file does `),f0e=n(oae,"STRONG",{});var Njt=s(f0e);Sjr=r(Njt,"not"),Njt.forEach(t),Rjr=r(oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),HZ=n(oae,"A",{href:!0});var qjt=s(HZ);Pjr=r(qjt,"from_pretrained()"),qjt.forEach(t),Bjr=r(oae," to load the model weights."),oae.forEach(t),Ijr=i($L),T(Z0.$$.fragment,$L),$L.forEach(t),Njr=i(ti),Vr=n(ti,"DIV",{class:!0});var ai=s(Vr);T(m$.$$.fragment,ai),qjr=i(ai),g0e=n(ai,"P",{});var jjt=s(g0e);jjr=r(jjt,"Instantiate one of the base model classes of the library from a pretrained model."),jjt.forEach(t),Djr=i(ai),Tn=n(ai,"P",{});var kL=s(Tn);Gjr=r(kL,"The model class to instantiate is selected based on the "),h0e=n(kL,"CODE",{});var Djt=s(h0e);Ojr=r(Djt,"model_type"),Djt.forEach(t),Vjr=r(kL,` property of the config object (either
passed as an argument or loaded from `),u0e=n(kL,"CODE",{});var Gjt=s(u0e);Xjr=r(Gjt,"pretrained_model_name_or_path"),Gjt.forEach(t),zjr=r(kL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p0e=n(kL,"CODE",{});var Ojt=s(p0e);Qjr=r(Ojt,"pretrained_model_name_or_path"),Ojt.forEach(t),Wjr=r(kL,":"),kL.forEach(t),Hjr=i(ai),oe=n(ai,"UL",{});var ae=s(oe);ew=n(ae,"LI",{});var UGe=s(ew);_0e=n(UGe,"STRONG",{});var Vjt=s(_0e);Ujr=r(Vjt,"albert"),Vjt.forEach(t),Jjr=r(UGe," \u2014 "),UZ=n(UGe,"A",{href:!0});var Xjt=s(UZ);Yjr=r(Xjt,"FlaxAlbertModel"),Xjt.forEach(t),Kjr=r(UGe," (ALBERT model)"),UGe.forEach(t),Zjr=i(ae),ow=n(ae,"LI",{});var JGe=s(ow);b0e=n(JGe,"STRONG",{});var zjt=s(b0e);eDr=r(zjt,"bart"),zjt.forEach(t),oDr=r(JGe," \u2014 "),JZ=n(JGe,"A",{href:!0});var Qjt=s(JZ);rDr=r(Qjt,"FlaxBartModel"),Qjt.forEach(t),tDr=r(JGe," (BART model)"),JGe.forEach(t),aDr=i(ae),rw=n(ae,"LI",{});var YGe=s(rw);v0e=n(YGe,"STRONG",{});var Wjt=s(v0e);nDr=r(Wjt,"beit"),Wjt.forEach(t),sDr=r(YGe," \u2014 "),YZ=n(YGe,"A",{href:!0});var Hjt=s(YZ);lDr=r(Hjt,"FlaxBeitModel"),Hjt.forEach(t),iDr=r(YGe," (BEiT model)"),YGe.forEach(t),dDr=i(ae),tw=n(ae,"LI",{});var KGe=s(tw);F0e=n(KGe,"STRONG",{});var Ujt=s(F0e);cDr=r(Ujt,"bert"),Ujt.forEach(t),mDr=r(KGe," \u2014 "),KZ=n(KGe,"A",{href:!0});var Jjt=s(KZ);fDr=r(Jjt,"FlaxBertModel"),Jjt.forEach(t),gDr=r(KGe," (BERT model)"),KGe.forEach(t),hDr=i(ae),aw=n(ae,"LI",{});var ZGe=s(aw);T0e=n(ZGe,"STRONG",{});var Yjt=s(T0e);uDr=r(Yjt,"big_bird"),Yjt.forEach(t),pDr=r(ZGe," \u2014 "),ZZ=n(ZGe,"A",{href:!0});var Kjt=s(ZZ);_Dr=r(Kjt,"FlaxBigBirdModel"),Kjt.forEach(t),bDr=r(ZGe," (BigBird model)"),ZGe.forEach(t),vDr=i(ae),nw=n(ae,"LI",{});var eOe=s(nw);M0e=n(eOe,"STRONG",{});var Zjt=s(M0e);FDr=r(Zjt,"blenderbot"),Zjt.forEach(t),TDr=r(eOe," \u2014 "),eee=n(eOe,"A",{href:!0});var eDt=s(eee);MDr=r(eDt,"FlaxBlenderbotModel"),eDt.forEach(t),EDr=r(eOe," (Blenderbot model)"),eOe.forEach(t),CDr=i(ae),sw=n(ae,"LI",{});var oOe=s(sw);E0e=n(oOe,"STRONG",{});var oDt=s(E0e);wDr=r(oDt,"blenderbot-small"),oDt.forEach(t),ADr=r(oOe," \u2014 "),oee=n(oOe,"A",{href:!0});var rDt=s(oee);LDr=r(rDt,"FlaxBlenderbotSmallModel"),rDt.forEach(t),yDr=r(oOe," (BlenderbotSmall model)"),oOe.forEach(t),xDr=i(ae),lw=n(ae,"LI",{});var rOe=s(lw);C0e=n(rOe,"STRONG",{});var tDt=s(C0e);$Dr=r(tDt,"clip"),tDt.forEach(t),kDr=r(rOe," \u2014 "),ree=n(rOe,"A",{href:!0});var aDt=s(ree);SDr=r(aDt,"FlaxCLIPModel"),aDt.forEach(t),RDr=r(rOe," (CLIP model)"),rOe.forEach(t),PDr=i(ae),iw=n(ae,"LI",{});var tOe=s(iw);w0e=n(tOe,"STRONG",{});var nDt=s(w0e);BDr=r(nDt,"distilbert"),nDt.forEach(t),IDr=r(tOe," \u2014 "),tee=n(tOe,"A",{href:!0});var sDt=s(tee);NDr=r(sDt,"FlaxDistilBertModel"),sDt.forEach(t),qDr=r(tOe," (DistilBERT model)"),tOe.forEach(t),jDr=i(ae),dw=n(ae,"LI",{});var aOe=s(dw);A0e=n(aOe,"STRONG",{});var lDt=s(A0e);DDr=r(lDt,"electra"),lDt.forEach(t),GDr=r(aOe," \u2014 "),aee=n(aOe,"A",{href:!0});var iDt=s(aee);ODr=r(iDt,"FlaxElectraModel"),iDt.forEach(t),VDr=r(aOe," (ELECTRA model)"),aOe.forEach(t),XDr=i(ae),cw=n(ae,"LI",{});var nOe=s(cw);L0e=n(nOe,"STRONG",{});var dDt=s(L0e);zDr=r(dDt,"gpt2"),dDt.forEach(t),QDr=r(nOe," \u2014 "),nee=n(nOe,"A",{href:!0});var cDt=s(nee);WDr=r(cDt,"FlaxGPT2Model"),cDt.forEach(t),HDr=r(nOe," (OpenAI GPT-2 model)"),nOe.forEach(t),UDr=i(ae),mw=n(ae,"LI",{});var sOe=s(mw);y0e=n(sOe,"STRONG",{});var mDt=s(y0e);JDr=r(mDt,"gpt_neo"),mDt.forEach(t),YDr=r(sOe," \u2014 "),see=n(sOe,"A",{href:!0});var fDt=s(see);KDr=r(fDt,"FlaxGPTNeoModel"),fDt.forEach(t),ZDr=r(sOe," (GPT Neo model)"),sOe.forEach(t),eGr=i(ae),fw=n(ae,"LI",{});var lOe=s(fw);x0e=n(lOe,"STRONG",{});var gDt=s(x0e);oGr=r(gDt,"gptj"),gDt.forEach(t),rGr=r(lOe," \u2014 "),lee=n(lOe,"A",{href:!0});var hDt=s(lee);tGr=r(hDt,"FlaxGPTJModel"),hDt.forEach(t),aGr=r(lOe," (GPT-J model)"),lOe.forEach(t),nGr=i(ae),gw=n(ae,"LI",{});var iOe=s(gw);$0e=n(iOe,"STRONG",{});var uDt=s($0e);sGr=r(uDt,"longt5"),uDt.forEach(t),lGr=r(iOe," \u2014 "),iee=n(iOe,"A",{href:!0});var pDt=s(iee);iGr=r(pDt,"FlaxLongT5Model"),pDt.forEach(t),dGr=r(iOe," (LongT5 model)"),iOe.forEach(t),cGr=i(ae),hw=n(ae,"LI",{});var dOe=s(hw);k0e=n(dOe,"STRONG",{});var _Dt=s(k0e);mGr=r(_Dt,"marian"),_Dt.forEach(t),fGr=r(dOe," \u2014 "),dee=n(dOe,"A",{href:!0});var bDt=s(dee);gGr=r(bDt,"FlaxMarianModel"),bDt.forEach(t),hGr=r(dOe," (Marian model)"),dOe.forEach(t),uGr=i(ae),uw=n(ae,"LI",{});var cOe=s(uw);S0e=n(cOe,"STRONG",{});var vDt=s(S0e);pGr=r(vDt,"mbart"),vDt.forEach(t),_Gr=r(cOe," \u2014 "),cee=n(cOe,"A",{href:!0});var FDt=s(cee);bGr=r(FDt,"FlaxMBartModel"),FDt.forEach(t),vGr=r(cOe," (mBART model)"),cOe.forEach(t),FGr=i(ae),pw=n(ae,"LI",{});var mOe=s(pw);R0e=n(mOe,"STRONG",{});var TDt=s(R0e);TGr=r(TDt,"mt5"),TDt.forEach(t),MGr=r(mOe," \u2014 "),mee=n(mOe,"A",{href:!0});var MDt=s(mee);EGr=r(MDt,"FlaxMT5Model"),MDt.forEach(t),CGr=r(mOe," (MT5 model)"),mOe.forEach(t),wGr=i(ae),_w=n(ae,"LI",{});var fOe=s(_w);P0e=n(fOe,"STRONG",{});var EDt=s(P0e);AGr=r(EDt,"opt"),EDt.forEach(t),LGr=r(fOe," \u2014 "),fee=n(fOe,"A",{href:!0});var CDt=s(fee);yGr=r(CDt,"FlaxOPTModel"),CDt.forEach(t),xGr=r(fOe," (OPT model)"),fOe.forEach(t),$Gr=i(ae),bw=n(ae,"LI",{});var gOe=s(bw);B0e=n(gOe,"STRONG",{});var wDt=s(B0e);kGr=r(wDt,"pegasus"),wDt.forEach(t),SGr=r(gOe," \u2014 "),gee=n(gOe,"A",{href:!0});var ADt=s(gee);RGr=r(ADt,"FlaxPegasusModel"),ADt.forEach(t),PGr=r(gOe," (Pegasus model)"),gOe.forEach(t),BGr=i(ae),vw=n(ae,"LI",{});var hOe=s(vw);I0e=n(hOe,"STRONG",{});var LDt=s(I0e);IGr=r(LDt,"roberta"),LDt.forEach(t),NGr=r(hOe," \u2014 "),hee=n(hOe,"A",{href:!0});var yDt=s(hee);qGr=r(yDt,"FlaxRobertaModel"),yDt.forEach(t),jGr=r(hOe," (RoBERTa model)"),hOe.forEach(t),DGr=i(ae),Fw=n(ae,"LI",{});var uOe=s(Fw);N0e=n(uOe,"STRONG",{});var xDt=s(N0e);GGr=r(xDt,"roformer"),xDt.forEach(t),OGr=r(uOe," \u2014 "),uee=n(uOe,"A",{href:!0});var $Dt=s(uee);VGr=r($Dt,"FlaxRoFormerModel"),$Dt.forEach(t),XGr=r(uOe," (RoFormer model)"),uOe.forEach(t),zGr=i(ae),Tw=n(ae,"LI",{});var pOe=s(Tw);q0e=n(pOe,"STRONG",{});var kDt=s(q0e);QGr=r(kDt,"t5"),kDt.forEach(t),WGr=r(pOe," \u2014 "),pee=n(pOe,"A",{href:!0});var SDt=s(pee);HGr=r(SDt,"FlaxT5Model"),SDt.forEach(t),UGr=r(pOe," (T5 model)"),pOe.forEach(t),JGr=i(ae),Mw=n(ae,"LI",{});var _Oe=s(Mw);j0e=n(_Oe,"STRONG",{});var RDt=s(j0e);YGr=r(RDt,"vision-text-dual-encoder"),RDt.forEach(t),KGr=r(_Oe," \u2014 "),_ee=n(_Oe,"A",{href:!0});var PDt=s(_ee);ZGr=r(PDt,"FlaxVisionTextDualEncoderModel"),PDt.forEach(t),eOr=r(_Oe," (VisionTextDualEncoder model)"),_Oe.forEach(t),oOr=i(ae),Ew=n(ae,"LI",{});var bOe=s(Ew);D0e=n(bOe,"STRONG",{});var BDt=s(D0e);rOr=r(BDt,"vit"),BDt.forEach(t),tOr=r(bOe," \u2014 "),bee=n(bOe,"A",{href:!0});var IDt=s(bee);aOr=r(IDt,"FlaxViTModel"),IDt.forEach(t),nOr=r(bOe," (ViT model)"),bOe.forEach(t),sOr=i(ae),Cw=n(ae,"LI",{});var vOe=s(Cw);G0e=n(vOe,"STRONG",{});var NDt=s(G0e);lOr=r(NDt,"wav2vec2"),NDt.forEach(t),iOr=r(vOe," \u2014 "),vee=n(vOe,"A",{href:!0});var qDt=s(vee);dOr=r(qDt,"FlaxWav2Vec2Model"),qDt.forEach(t),cOr=r(vOe," (Wav2Vec2 model)"),vOe.forEach(t),mOr=i(ae),ww=n(ae,"LI",{});var FOe=s(ww);O0e=n(FOe,"STRONG",{});var jDt=s(O0e);fOr=r(jDt,"xglm"),jDt.forEach(t),gOr=r(FOe," \u2014 "),Fee=n(FOe,"A",{href:!0});var DDt=s(Fee);hOr=r(DDt,"FlaxXGLMModel"),DDt.forEach(t),uOr=r(FOe," (XGLM model)"),FOe.forEach(t),pOr=i(ae),Aw=n(ae,"LI",{});var TOe=s(Aw);V0e=n(TOe,"STRONG",{});var GDt=s(V0e);_Or=r(GDt,"xlm-roberta"),GDt.forEach(t),bOr=r(TOe," \u2014 "),Tee=n(TOe,"A",{href:!0});var ODt=s(Tee);vOr=r(ODt,"FlaxXLMRobertaModel"),ODt.forEach(t),FOr=r(TOe," (XLM-RoBERTa model)"),TOe.forEach(t),ae.forEach(t),TOr=i(ai),T(Lw.$$.fragment,ai),ai.forEach(t),ti.forEach(t),Pze=i(m),Yc=n(m,"H2",{class:!0});var VWe=s(Yc);yw=n(VWe,"A",{id:!0,class:!0,href:!0});var VDt=s(yw);X0e=n(VDt,"SPAN",{});var XDt=s(X0e);T(f$.$$.fragment,XDt),XDt.forEach(t),VDt.forEach(t),MOr=i(VWe),z0e=n(VWe,"SPAN",{});var zDt=s(z0e);EOr=r(zDt,"FlaxAutoModelForCausalLM"),zDt.forEach(t),VWe.forEach(t),Bze=i(m),pr=n(m,"DIV",{class:!0});var ni=s(pr);T(g$.$$.fragment,ni),COr=i(ni),Kc=n(ni,"P",{});var rae=s(Kc);wOr=r(rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Mee=n(rae,"A",{href:!0});var QDt=s(Mee);AOr=r(QDt,"from_pretrained()"),QDt.forEach(t),LOr=r(rae," class method or the "),Eee=n(rae,"A",{href:!0});var WDt=s(Eee);yOr=r(WDt,"from_config()"),WDt.forEach(t),xOr=r(rae,` class
method.`),rae.forEach(t),$Or=i(ni),h$=n(ni,"P",{});var XWe=s(h$);kOr=r(XWe,"This class cannot be instantiated directly using "),Q0e=n(XWe,"CODE",{});var HDt=s(Q0e);SOr=r(HDt,"__init__()"),HDt.forEach(t),ROr=r(XWe," (throws an error)."),XWe.forEach(t),POr=i(ni),Ht=n(ni,"DIV",{class:!0});var SL=s(Ht);T(u$.$$.fragment,SL),BOr=i(SL),W0e=n(SL,"P",{});var UDt=s(W0e);IOr=r(UDt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),UDt.forEach(t),NOr=i(SL),Zc=n(SL,"P",{});var tae=s(Zc);qOr=r(tae,`Note:
Loading a model from its configuration file does `),H0e=n(tae,"STRONG",{});var JDt=s(H0e);jOr=r(JDt,"not"),JDt.forEach(t),DOr=r(tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cee=n(tae,"A",{href:!0});var YDt=s(Cee);GOr=r(YDt,"from_pretrained()"),YDt.forEach(t),OOr=r(tae," to load the model weights."),tae.forEach(t),VOr=i(SL),T(xw.$$.fragment,SL),SL.forEach(t),XOr=i(ni),Xr=n(ni,"DIV",{class:!0});var si=s(Xr);T(p$.$$.fragment,si),zOr=i(si),U0e=n(si,"P",{});var KDt=s(U0e);QOr=r(KDt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),KDt.forEach(t),WOr=i(si),Mn=n(si,"P",{});var RL=s(Mn);HOr=r(RL,"The model class to instantiate is selected based on the "),J0e=n(RL,"CODE",{});var ZDt=s(J0e);UOr=r(ZDt,"model_type"),ZDt.forEach(t),JOr=r(RL,` property of the config object (either
passed as an argument or loaded from `),Y0e=n(RL,"CODE",{});var eGt=s(Y0e);YOr=r(eGt,"pretrained_model_name_or_path"),eGt.forEach(t),KOr=r(RL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K0e=n(RL,"CODE",{});var oGt=s(K0e);ZOr=r(oGt,"pretrained_model_name_or_path"),oGt.forEach(t),eVr=r(RL,":"),RL.forEach(t),oVr=i(si),xe=n(si,"UL",{});var Ne=s(xe);$w=n(Ne,"LI",{});var MOe=s($w);Z0e=n(MOe,"STRONG",{});var rGt=s(Z0e);rVr=r(rGt,"bart"),rGt.forEach(t),tVr=r(MOe," \u2014 "),wee=n(MOe,"A",{href:!0});var tGt=s(wee);aVr=r(tGt,"FlaxBartForCausalLM"),tGt.forEach(t),nVr=r(MOe," (BART model)"),MOe.forEach(t),sVr=i(Ne),kw=n(Ne,"LI",{});var EOe=s(kw);ewe=n(EOe,"STRONG",{});var aGt=s(ewe);lVr=r(aGt,"bert"),aGt.forEach(t),iVr=r(EOe," \u2014 "),Aee=n(EOe,"A",{href:!0});var nGt=s(Aee);dVr=r(nGt,"FlaxBertForCausalLM"),nGt.forEach(t),cVr=r(EOe," (BERT model)"),EOe.forEach(t),mVr=i(Ne),Sw=n(Ne,"LI",{});var COe=s(Sw);owe=n(COe,"STRONG",{});var sGt=s(owe);fVr=r(sGt,"big_bird"),sGt.forEach(t),gVr=r(COe," \u2014 "),Lee=n(COe,"A",{href:!0});var lGt=s(Lee);hVr=r(lGt,"FlaxBigBirdForCausalLM"),lGt.forEach(t),uVr=r(COe," (BigBird model)"),COe.forEach(t),pVr=i(Ne),Rw=n(Ne,"LI",{});var wOe=s(Rw);rwe=n(wOe,"STRONG",{});var iGt=s(rwe);_Vr=r(iGt,"electra"),iGt.forEach(t),bVr=r(wOe," \u2014 "),yee=n(wOe,"A",{href:!0});var dGt=s(yee);vVr=r(dGt,"FlaxElectraForCausalLM"),dGt.forEach(t),FVr=r(wOe," (ELECTRA model)"),wOe.forEach(t),TVr=i(Ne),Pw=n(Ne,"LI",{});var AOe=s(Pw);twe=n(AOe,"STRONG",{});var cGt=s(twe);MVr=r(cGt,"gpt2"),cGt.forEach(t),EVr=r(AOe," \u2014 "),xee=n(AOe,"A",{href:!0});var mGt=s(xee);CVr=r(mGt,"FlaxGPT2LMHeadModel"),mGt.forEach(t),wVr=r(AOe," (OpenAI GPT-2 model)"),AOe.forEach(t),AVr=i(Ne),Bw=n(Ne,"LI",{});var LOe=s(Bw);awe=n(LOe,"STRONG",{});var fGt=s(awe);LVr=r(fGt,"gpt_neo"),fGt.forEach(t),yVr=r(LOe," \u2014 "),$ee=n(LOe,"A",{href:!0});var gGt=s($ee);xVr=r(gGt,"FlaxGPTNeoForCausalLM"),gGt.forEach(t),$Vr=r(LOe," (GPT Neo model)"),LOe.forEach(t),kVr=i(Ne),Iw=n(Ne,"LI",{});var yOe=s(Iw);nwe=n(yOe,"STRONG",{});var hGt=s(nwe);SVr=r(hGt,"gptj"),hGt.forEach(t),RVr=r(yOe," \u2014 "),kee=n(yOe,"A",{href:!0});var uGt=s(kee);PVr=r(uGt,"FlaxGPTJForCausalLM"),uGt.forEach(t),BVr=r(yOe," (GPT-J model)"),yOe.forEach(t),IVr=i(Ne),Nw=n(Ne,"LI",{});var xOe=s(Nw);swe=n(xOe,"STRONG",{});var pGt=s(swe);NVr=r(pGt,"opt"),pGt.forEach(t),qVr=r(xOe," \u2014 "),See=n(xOe,"A",{href:!0});var _Gt=s(See);jVr=r(_Gt,"FlaxOPTForCausalLM"),_Gt.forEach(t),DVr=r(xOe," (OPT model)"),xOe.forEach(t),GVr=i(Ne),qw=n(Ne,"LI",{});var $Oe=s(qw);lwe=n($Oe,"STRONG",{});var bGt=s(lwe);OVr=r(bGt,"roberta"),bGt.forEach(t),VVr=r($Oe," \u2014 "),Ree=n($Oe,"A",{href:!0});var vGt=s(Ree);XVr=r(vGt,"FlaxRobertaForCausalLM"),vGt.forEach(t),zVr=r($Oe," (RoBERTa model)"),$Oe.forEach(t),QVr=i(Ne),jw=n(Ne,"LI",{});var kOe=s(jw);iwe=n(kOe,"STRONG",{});var FGt=s(iwe);WVr=r(FGt,"xglm"),FGt.forEach(t),HVr=r(kOe," \u2014 "),Pee=n(kOe,"A",{href:!0});var TGt=s(Pee);UVr=r(TGt,"FlaxXGLMForCausalLM"),TGt.forEach(t),JVr=r(kOe," (XGLM model)"),kOe.forEach(t),Ne.forEach(t),YVr=i(si),T(Dw.$$.fragment,si),si.forEach(t),ni.forEach(t),Ize=i(m),em=n(m,"H2",{class:!0});var zWe=s(em);Gw=n(zWe,"A",{id:!0,class:!0,href:!0});var MGt=s(Gw);dwe=n(MGt,"SPAN",{});var EGt=s(dwe);T(_$.$$.fragment,EGt),EGt.forEach(t),MGt.forEach(t),KVr=i(zWe),cwe=n(zWe,"SPAN",{});var CGt=s(cwe);ZVr=r(CGt,"FlaxAutoModelForPreTraining"),CGt.forEach(t),zWe.forEach(t),Nze=i(m),_r=n(m,"DIV",{class:!0});var li=s(_r);T(b$.$$.fragment,li),eXr=i(li),om=n(li,"P",{});var aae=s(om);oXr=r(aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Bee=n(aae,"A",{href:!0});var wGt=s(Bee);rXr=r(wGt,"from_pretrained()"),wGt.forEach(t),tXr=r(aae," class method or the "),Iee=n(aae,"A",{href:!0});var AGt=s(Iee);aXr=r(AGt,"from_config()"),AGt.forEach(t),nXr=r(aae,` class
method.`),aae.forEach(t),sXr=i(li),v$=n(li,"P",{});var QWe=s(v$);lXr=r(QWe,"This class cannot be instantiated directly using "),mwe=n(QWe,"CODE",{});var LGt=s(mwe);iXr=r(LGt,"__init__()"),LGt.forEach(t),dXr=r(QWe," (throws an error)."),QWe.forEach(t),cXr=i(li),Ut=n(li,"DIV",{class:!0});var PL=s(Ut);T(F$.$$.fragment,PL),mXr=i(PL),fwe=n(PL,"P",{});var yGt=s(fwe);fXr=r(yGt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),yGt.forEach(t),gXr=i(PL),rm=n(PL,"P",{});var nae=s(rm);hXr=r(nae,`Note:
Loading a model from its configuration file does `),gwe=n(nae,"STRONG",{});var xGt=s(gwe);uXr=r(xGt,"not"),xGt.forEach(t),pXr=r(nae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nee=n(nae,"A",{href:!0});var $Gt=s(Nee);_Xr=r($Gt,"from_pretrained()"),$Gt.forEach(t),bXr=r(nae," to load the model weights."),nae.forEach(t),vXr=i(PL),T(Ow.$$.fragment,PL),PL.forEach(t),FXr=i(li),zr=n(li,"DIV",{class:!0});var ii=s(zr);T(T$.$$.fragment,ii),TXr=i(ii),hwe=n(ii,"P",{});var kGt=s(hwe);MXr=r(kGt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),kGt.forEach(t),EXr=i(ii),En=n(ii,"P",{});var BL=s(En);CXr=r(BL,"The model class to instantiate is selected based on the "),uwe=n(BL,"CODE",{});var SGt=s(uwe);wXr=r(SGt,"model_type"),SGt.forEach(t),AXr=r(BL,` property of the config object (either
passed as an argument or loaded from `),pwe=n(BL,"CODE",{});var RGt=s(pwe);LXr=r(RGt,"pretrained_model_name_or_path"),RGt.forEach(t),yXr=r(BL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_we=n(BL,"CODE",{});var PGt=s(_we);xXr=r(PGt,"pretrained_model_name_or_path"),PGt.forEach(t),$Xr=r(BL,":"),BL.forEach(t),kXr=i(ii),Ee=n(ii,"UL",{});var we=s(Ee);Vw=n(we,"LI",{});var SOe=s(Vw);bwe=n(SOe,"STRONG",{});var BGt=s(bwe);SXr=r(BGt,"albert"),BGt.forEach(t),RXr=r(SOe," \u2014 "),qee=n(SOe,"A",{href:!0});var IGt=s(qee);PXr=r(IGt,"FlaxAlbertForPreTraining"),IGt.forEach(t),BXr=r(SOe," (ALBERT model)"),SOe.forEach(t),IXr=i(we),Xw=n(we,"LI",{});var ROe=s(Xw);vwe=n(ROe,"STRONG",{});var NGt=s(vwe);NXr=r(NGt,"bart"),NGt.forEach(t),qXr=r(ROe," \u2014 "),jee=n(ROe,"A",{href:!0});var qGt=s(jee);jXr=r(qGt,"FlaxBartForConditionalGeneration"),qGt.forEach(t),DXr=r(ROe," (BART model)"),ROe.forEach(t),GXr=i(we),zw=n(we,"LI",{});var POe=s(zw);Fwe=n(POe,"STRONG",{});var jGt=s(Fwe);OXr=r(jGt,"bert"),jGt.forEach(t),VXr=r(POe," \u2014 "),Dee=n(POe,"A",{href:!0});var DGt=s(Dee);XXr=r(DGt,"FlaxBertForPreTraining"),DGt.forEach(t),zXr=r(POe," (BERT model)"),POe.forEach(t),QXr=i(we),Qw=n(we,"LI",{});var BOe=s(Qw);Twe=n(BOe,"STRONG",{});var GGt=s(Twe);WXr=r(GGt,"big_bird"),GGt.forEach(t),HXr=r(BOe," \u2014 "),Gee=n(BOe,"A",{href:!0});var OGt=s(Gee);UXr=r(OGt,"FlaxBigBirdForPreTraining"),OGt.forEach(t),JXr=r(BOe," (BigBird model)"),BOe.forEach(t),YXr=i(we),Ww=n(we,"LI",{});var IOe=s(Ww);Mwe=n(IOe,"STRONG",{});var VGt=s(Mwe);KXr=r(VGt,"electra"),VGt.forEach(t),ZXr=r(IOe," \u2014 "),Oee=n(IOe,"A",{href:!0});var XGt=s(Oee);ezr=r(XGt,"FlaxElectraForPreTraining"),XGt.forEach(t),ozr=r(IOe," (ELECTRA model)"),IOe.forEach(t),rzr=i(we),Hw=n(we,"LI",{});var NOe=s(Hw);Ewe=n(NOe,"STRONG",{});var zGt=s(Ewe);tzr=r(zGt,"longt5"),zGt.forEach(t),azr=r(NOe," \u2014 "),Vee=n(NOe,"A",{href:!0});var QGt=s(Vee);nzr=r(QGt,"FlaxLongT5ForConditionalGeneration"),QGt.forEach(t),szr=r(NOe," (LongT5 model)"),NOe.forEach(t),lzr=i(we),Uw=n(we,"LI",{});var qOe=s(Uw);Cwe=n(qOe,"STRONG",{});var WGt=s(Cwe);izr=r(WGt,"mbart"),WGt.forEach(t),dzr=r(qOe," \u2014 "),Xee=n(qOe,"A",{href:!0});var HGt=s(Xee);czr=r(HGt,"FlaxMBartForConditionalGeneration"),HGt.forEach(t),mzr=r(qOe," (mBART model)"),qOe.forEach(t),fzr=i(we),Jw=n(we,"LI",{});var jOe=s(Jw);wwe=n(jOe,"STRONG",{});var UGt=s(wwe);gzr=r(UGt,"mt5"),UGt.forEach(t),hzr=r(jOe," \u2014 "),zee=n(jOe,"A",{href:!0});var JGt=s(zee);uzr=r(JGt,"FlaxMT5ForConditionalGeneration"),JGt.forEach(t),pzr=r(jOe," (MT5 model)"),jOe.forEach(t),_zr=i(we),Yw=n(we,"LI",{});var DOe=s(Yw);Awe=n(DOe,"STRONG",{});var YGt=s(Awe);bzr=r(YGt,"roberta"),YGt.forEach(t),vzr=r(DOe," \u2014 "),Qee=n(DOe,"A",{href:!0});var KGt=s(Qee);Fzr=r(KGt,"FlaxRobertaForMaskedLM"),KGt.forEach(t),Tzr=r(DOe," (RoBERTa model)"),DOe.forEach(t),Mzr=i(we),Kw=n(we,"LI",{});var GOe=s(Kw);Lwe=n(GOe,"STRONG",{});var ZGt=s(Lwe);Ezr=r(ZGt,"roformer"),ZGt.forEach(t),Czr=r(GOe," \u2014 "),Wee=n(GOe,"A",{href:!0});var eOt=s(Wee);wzr=r(eOt,"FlaxRoFormerForMaskedLM"),eOt.forEach(t),Azr=r(GOe," (RoFormer model)"),GOe.forEach(t),Lzr=i(we),Zw=n(we,"LI",{});var OOe=s(Zw);ywe=n(OOe,"STRONG",{});var oOt=s(ywe);yzr=r(oOt,"t5"),oOt.forEach(t),xzr=r(OOe," \u2014 "),Hee=n(OOe,"A",{href:!0});var rOt=s(Hee);$zr=r(rOt,"FlaxT5ForConditionalGeneration"),rOt.forEach(t),kzr=r(OOe," (T5 model)"),OOe.forEach(t),Szr=i(we),eA=n(we,"LI",{});var VOe=s(eA);xwe=n(VOe,"STRONG",{});var tOt=s(xwe);Rzr=r(tOt,"wav2vec2"),tOt.forEach(t),Pzr=r(VOe," \u2014 "),Uee=n(VOe,"A",{href:!0});var aOt=s(Uee);Bzr=r(aOt,"FlaxWav2Vec2ForPreTraining"),aOt.forEach(t),Izr=r(VOe," (Wav2Vec2 model)"),VOe.forEach(t),Nzr=i(we),oA=n(we,"LI",{});var XOe=s(oA);$we=n(XOe,"STRONG",{});var nOt=s($we);qzr=r(nOt,"xlm-roberta"),nOt.forEach(t),jzr=r(XOe," \u2014 "),Jee=n(XOe,"A",{href:!0});var sOt=s(Jee);Dzr=r(sOt,"FlaxXLMRobertaForMaskedLM"),sOt.forEach(t),Gzr=r(XOe," (XLM-RoBERTa model)"),XOe.forEach(t),we.forEach(t),Ozr=i(ii),T(rA.$$.fragment,ii),ii.forEach(t),li.forEach(t),qze=i(m),tm=n(m,"H2",{class:!0});var WWe=s(tm);tA=n(WWe,"A",{id:!0,class:!0,href:!0});var lOt=s(tA);kwe=n(lOt,"SPAN",{});var iOt=s(kwe);T(M$.$$.fragment,iOt),iOt.forEach(t),lOt.forEach(t),Vzr=i(WWe),Swe=n(WWe,"SPAN",{});var dOt=s(Swe);Xzr=r(dOt,"FlaxAutoModelForMaskedLM"),dOt.forEach(t),WWe.forEach(t),jze=i(m),br=n(m,"DIV",{class:!0});var di=s(br);T(E$.$$.fragment,di),zzr=i(di),am=n(di,"P",{});var sae=s(am);Qzr=r(sae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Yee=n(sae,"A",{href:!0});var cOt=s(Yee);Wzr=r(cOt,"from_pretrained()"),cOt.forEach(t),Hzr=r(sae," class method or the "),Kee=n(sae,"A",{href:!0});var mOt=s(Kee);Uzr=r(mOt,"from_config()"),mOt.forEach(t),Jzr=r(sae,` class
method.`),sae.forEach(t),Yzr=i(di),C$=n(di,"P",{});var HWe=s(C$);Kzr=r(HWe,"This class cannot be instantiated directly using "),Rwe=n(HWe,"CODE",{});var fOt=s(Rwe);Zzr=r(fOt,"__init__()"),fOt.forEach(t),eQr=r(HWe," (throws an error)."),HWe.forEach(t),oQr=i(di),Jt=n(di,"DIV",{class:!0});var IL=s(Jt);T(w$.$$.fragment,IL),rQr=i(IL),Pwe=n(IL,"P",{});var gOt=s(Pwe);tQr=r(gOt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),gOt.forEach(t),aQr=i(IL),nm=n(IL,"P",{});var lae=s(nm);nQr=r(lae,`Note:
Loading a model from its configuration file does `),Bwe=n(lae,"STRONG",{});var hOt=s(Bwe);sQr=r(hOt,"not"),hOt.forEach(t),lQr=r(lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zee=n(lae,"A",{href:!0});var uOt=s(Zee);iQr=r(uOt,"from_pretrained()"),uOt.forEach(t),dQr=r(lae," to load the model weights."),lae.forEach(t),cQr=i(IL),T(aA.$$.fragment,IL),IL.forEach(t),mQr=i(di),Qr=n(di,"DIV",{class:!0});var ci=s(Qr);T(A$.$$.fragment,ci),fQr=i(ci),Iwe=n(ci,"P",{});var pOt=s(Iwe);gQr=r(pOt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),pOt.forEach(t),hQr=i(ci),Cn=n(ci,"P",{});var NL=s(Cn);uQr=r(NL,"The model class to instantiate is selected based on the "),Nwe=n(NL,"CODE",{});var _Ot=s(Nwe);pQr=r(_Ot,"model_type"),_Ot.forEach(t),_Qr=r(NL,` property of the config object (either
passed as an argument or loaded from `),qwe=n(NL,"CODE",{});var bOt=s(qwe);bQr=r(bOt,"pretrained_model_name_or_path"),bOt.forEach(t),vQr=r(NL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jwe=n(NL,"CODE",{});var vOt=s(jwe);FQr=r(vOt,"pretrained_model_name_or_path"),vOt.forEach(t),TQr=r(NL,":"),NL.forEach(t),MQr=i(ci),$e=n(ci,"UL",{});var qe=s($e);nA=n(qe,"LI",{});var zOe=s(nA);Dwe=n(zOe,"STRONG",{});var FOt=s(Dwe);EQr=r(FOt,"albert"),FOt.forEach(t),CQr=r(zOe," \u2014 "),eoe=n(zOe,"A",{href:!0});var TOt=s(eoe);wQr=r(TOt,"FlaxAlbertForMaskedLM"),TOt.forEach(t),AQr=r(zOe," (ALBERT model)"),zOe.forEach(t),LQr=i(qe),sA=n(qe,"LI",{});var QOe=s(sA);Gwe=n(QOe,"STRONG",{});var MOt=s(Gwe);yQr=r(MOt,"bart"),MOt.forEach(t),xQr=r(QOe," \u2014 "),ooe=n(QOe,"A",{href:!0});var EOt=s(ooe);$Qr=r(EOt,"FlaxBartForConditionalGeneration"),EOt.forEach(t),kQr=r(QOe," (BART model)"),QOe.forEach(t),SQr=i(qe),lA=n(qe,"LI",{});var WOe=s(lA);Owe=n(WOe,"STRONG",{});var COt=s(Owe);RQr=r(COt,"bert"),COt.forEach(t),PQr=r(WOe," \u2014 "),roe=n(WOe,"A",{href:!0});var wOt=s(roe);BQr=r(wOt,"FlaxBertForMaskedLM"),wOt.forEach(t),IQr=r(WOe," (BERT model)"),WOe.forEach(t),NQr=i(qe),iA=n(qe,"LI",{});var HOe=s(iA);Vwe=n(HOe,"STRONG",{});var AOt=s(Vwe);qQr=r(AOt,"big_bird"),AOt.forEach(t),jQr=r(HOe," \u2014 "),toe=n(HOe,"A",{href:!0});var LOt=s(toe);DQr=r(LOt,"FlaxBigBirdForMaskedLM"),LOt.forEach(t),GQr=r(HOe," (BigBird model)"),HOe.forEach(t),OQr=i(qe),dA=n(qe,"LI",{});var UOe=s(dA);Xwe=n(UOe,"STRONG",{});var yOt=s(Xwe);VQr=r(yOt,"distilbert"),yOt.forEach(t),XQr=r(UOe," \u2014 "),aoe=n(UOe,"A",{href:!0});var xOt=s(aoe);zQr=r(xOt,"FlaxDistilBertForMaskedLM"),xOt.forEach(t),QQr=r(UOe," (DistilBERT model)"),UOe.forEach(t),WQr=i(qe),cA=n(qe,"LI",{});var JOe=s(cA);zwe=n(JOe,"STRONG",{});var $Ot=s(zwe);HQr=r($Ot,"electra"),$Ot.forEach(t),UQr=r(JOe," \u2014 "),noe=n(JOe,"A",{href:!0});var kOt=s(noe);JQr=r(kOt,"FlaxElectraForMaskedLM"),kOt.forEach(t),YQr=r(JOe," (ELECTRA model)"),JOe.forEach(t),KQr=i(qe),mA=n(qe,"LI",{});var YOe=s(mA);Qwe=n(YOe,"STRONG",{});var SOt=s(Qwe);ZQr=r(SOt,"mbart"),SOt.forEach(t),eWr=r(YOe," \u2014 "),soe=n(YOe,"A",{href:!0});var ROt=s(soe);oWr=r(ROt,"FlaxMBartForConditionalGeneration"),ROt.forEach(t),rWr=r(YOe," (mBART model)"),YOe.forEach(t),tWr=i(qe),fA=n(qe,"LI",{});var KOe=s(fA);Wwe=n(KOe,"STRONG",{});var POt=s(Wwe);aWr=r(POt,"roberta"),POt.forEach(t),nWr=r(KOe," \u2014 "),loe=n(KOe,"A",{href:!0});var BOt=s(loe);sWr=r(BOt,"FlaxRobertaForMaskedLM"),BOt.forEach(t),lWr=r(KOe," (RoBERTa model)"),KOe.forEach(t),iWr=i(qe),gA=n(qe,"LI",{});var ZOe=s(gA);Hwe=n(ZOe,"STRONG",{});var IOt=s(Hwe);dWr=r(IOt,"roformer"),IOt.forEach(t),cWr=r(ZOe," \u2014 "),ioe=n(ZOe,"A",{href:!0});var NOt=s(ioe);mWr=r(NOt,"FlaxRoFormerForMaskedLM"),NOt.forEach(t),fWr=r(ZOe," (RoFormer model)"),ZOe.forEach(t),gWr=i(qe),hA=n(qe,"LI",{});var eVe=s(hA);Uwe=n(eVe,"STRONG",{});var qOt=s(Uwe);hWr=r(qOt,"xlm-roberta"),qOt.forEach(t),uWr=r(eVe," \u2014 "),doe=n(eVe,"A",{href:!0});var jOt=s(doe);pWr=r(jOt,"FlaxXLMRobertaForMaskedLM"),jOt.forEach(t),_Wr=r(eVe," (XLM-RoBERTa model)"),eVe.forEach(t),qe.forEach(t),bWr=i(ci),T(uA.$$.fragment,ci),ci.forEach(t),di.forEach(t),Dze=i(m),sm=n(m,"H2",{class:!0});var UWe=s(sm);pA=n(UWe,"A",{id:!0,class:!0,href:!0});var DOt=s(pA);Jwe=n(DOt,"SPAN",{});var GOt=s(Jwe);T(L$.$$.fragment,GOt),GOt.forEach(t),DOt.forEach(t),vWr=i(UWe),Ywe=n(UWe,"SPAN",{});var OOt=s(Ywe);FWr=r(OOt,"FlaxAutoModelForSeq2SeqLM"),OOt.forEach(t),UWe.forEach(t),Gze=i(m),vr=n(m,"DIV",{class:!0});var mi=s(vr);T(y$.$$.fragment,mi),TWr=i(mi),lm=n(mi,"P",{});var iae=s(lm);MWr=r(iae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),coe=n(iae,"A",{href:!0});var VOt=s(coe);EWr=r(VOt,"from_pretrained()"),VOt.forEach(t),CWr=r(iae," class method or the "),moe=n(iae,"A",{href:!0});var XOt=s(moe);wWr=r(XOt,"from_config()"),XOt.forEach(t),AWr=r(iae,` class
method.`),iae.forEach(t),LWr=i(mi),x$=n(mi,"P",{});var JWe=s(x$);yWr=r(JWe,"This class cannot be instantiated directly using "),Kwe=n(JWe,"CODE",{});var zOt=s(Kwe);xWr=r(zOt,"__init__()"),zOt.forEach(t),$Wr=r(JWe," (throws an error)."),JWe.forEach(t),kWr=i(mi),Yt=n(mi,"DIV",{class:!0});var qL=s(Yt);T($$.$$.fragment,qL),SWr=i(qL),Zwe=n(qL,"P",{});var QOt=s(Zwe);RWr=r(QOt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),QOt.forEach(t),PWr=i(qL),im=n(qL,"P",{});var dae=s(im);BWr=r(dae,`Note:
Loading a model from its configuration file does `),eAe=n(dae,"STRONG",{});var WOt=s(eAe);IWr=r(WOt,"not"),WOt.forEach(t),NWr=r(dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),foe=n(dae,"A",{href:!0});var HOt=s(foe);qWr=r(HOt,"from_pretrained()"),HOt.forEach(t),jWr=r(dae," to load the model weights."),dae.forEach(t),DWr=i(qL),T(_A.$$.fragment,qL),qL.forEach(t),GWr=i(mi),Wr=n(mi,"DIV",{class:!0});var fi=s(Wr);T(k$.$$.fragment,fi),OWr=i(fi),oAe=n(fi,"P",{});var UOt=s(oAe);VWr=r(UOt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),UOt.forEach(t),XWr=i(fi),wn=n(fi,"P",{});var jL=s(wn);zWr=r(jL,"The model class to instantiate is selected based on the "),rAe=n(jL,"CODE",{});var JOt=s(rAe);QWr=r(JOt,"model_type"),JOt.forEach(t),WWr=r(jL,` property of the config object (either
passed as an argument or loaded from `),tAe=n(jL,"CODE",{});var YOt=s(tAe);HWr=r(YOt,"pretrained_model_name_or_path"),YOt.forEach(t),UWr=r(jL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aAe=n(jL,"CODE",{});var KOt=s(aAe);JWr=r(KOt,"pretrained_model_name_or_path"),KOt.forEach(t),YWr=r(jL,":"),jL.forEach(t),KWr=i(fi),ke=n(fi,"UL",{});var je=s(ke);bA=n(je,"LI",{});var oVe=s(bA);nAe=n(oVe,"STRONG",{});var ZOt=s(nAe);ZWr=r(ZOt,"bart"),ZOt.forEach(t),eHr=r(oVe," \u2014 "),goe=n(oVe,"A",{href:!0});var eVt=s(goe);oHr=r(eVt,"FlaxBartForConditionalGeneration"),eVt.forEach(t),rHr=r(oVe," (BART model)"),oVe.forEach(t),tHr=i(je),vA=n(je,"LI",{});var rVe=s(vA);sAe=n(rVe,"STRONG",{});var oVt=s(sAe);aHr=r(oVt,"blenderbot"),oVt.forEach(t),nHr=r(rVe," \u2014 "),hoe=n(rVe,"A",{href:!0});var rVt=s(hoe);sHr=r(rVt,"FlaxBlenderbotForConditionalGeneration"),rVt.forEach(t),lHr=r(rVe," (Blenderbot model)"),rVe.forEach(t),iHr=i(je),FA=n(je,"LI",{});var tVe=s(FA);lAe=n(tVe,"STRONG",{});var tVt=s(lAe);dHr=r(tVt,"blenderbot-small"),tVt.forEach(t),cHr=r(tVe," \u2014 "),uoe=n(tVe,"A",{href:!0});var aVt=s(uoe);mHr=r(aVt,"FlaxBlenderbotSmallForConditionalGeneration"),aVt.forEach(t),fHr=r(tVe," (BlenderbotSmall model)"),tVe.forEach(t),gHr=i(je),TA=n(je,"LI",{});var aVe=s(TA);iAe=n(aVe,"STRONG",{});var nVt=s(iAe);hHr=r(nVt,"encoder-decoder"),nVt.forEach(t),uHr=r(aVe," \u2014 "),poe=n(aVe,"A",{href:!0});var sVt=s(poe);pHr=r(sVt,"FlaxEncoderDecoderModel"),sVt.forEach(t),_Hr=r(aVe," (Encoder decoder model)"),aVe.forEach(t),bHr=i(je),MA=n(je,"LI",{});var nVe=s(MA);dAe=n(nVe,"STRONG",{});var lVt=s(dAe);vHr=r(lVt,"longt5"),lVt.forEach(t),FHr=r(nVe," \u2014 "),_oe=n(nVe,"A",{href:!0});var iVt=s(_oe);THr=r(iVt,"FlaxLongT5ForConditionalGeneration"),iVt.forEach(t),MHr=r(nVe," (LongT5 model)"),nVe.forEach(t),EHr=i(je),EA=n(je,"LI",{});var sVe=s(EA);cAe=n(sVe,"STRONG",{});var dVt=s(cAe);CHr=r(dVt,"marian"),dVt.forEach(t),wHr=r(sVe," \u2014 "),boe=n(sVe,"A",{href:!0});var cVt=s(boe);AHr=r(cVt,"FlaxMarianMTModel"),cVt.forEach(t),LHr=r(sVe," (Marian model)"),sVe.forEach(t),yHr=i(je),CA=n(je,"LI",{});var lVe=s(CA);mAe=n(lVe,"STRONG",{});var mVt=s(mAe);xHr=r(mVt,"mbart"),mVt.forEach(t),$Hr=r(lVe," \u2014 "),voe=n(lVe,"A",{href:!0});var fVt=s(voe);kHr=r(fVt,"FlaxMBartForConditionalGeneration"),fVt.forEach(t),SHr=r(lVe," (mBART model)"),lVe.forEach(t),RHr=i(je),wA=n(je,"LI",{});var iVe=s(wA);fAe=n(iVe,"STRONG",{});var gVt=s(fAe);PHr=r(gVt,"mt5"),gVt.forEach(t),BHr=r(iVe," \u2014 "),Foe=n(iVe,"A",{href:!0});var hVt=s(Foe);IHr=r(hVt,"FlaxMT5ForConditionalGeneration"),hVt.forEach(t),NHr=r(iVe," (MT5 model)"),iVe.forEach(t),qHr=i(je),AA=n(je,"LI",{});var dVe=s(AA);gAe=n(dVe,"STRONG",{});var uVt=s(gAe);jHr=r(uVt,"pegasus"),uVt.forEach(t),DHr=r(dVe," \u2014 "),Toe=n(dVe,"A",{href:!0});var pVt=s(Toe);GHr=r(pVt,"FlaxPegasusForConditionalGeneration"),pVt.forEach(t),OHr=r(dVe," (Pegasus model)"),dVe.forEach(t),VHr=i(je),LA=n(je,"LI",{});var cVe=s(LA);hAe=n(cVe,"STRONG",{});var _Vt=s(hAe);XHr=r(_Vt,"t5"),_Vt.forEach(t),zHr=r(cVe," \u2014 "),Moe=n(cVe,"A",{href:!0});var bVt=s(Moe);QHr=r(bVt,"FlaxT5ForConditionalGeneration"),bVt.forEach(t),WHr=r(cVe," (T5 model)"),cVe.forEach(t),je.forEach(t),HHr=i(fi),T(yA.$$.fragment,fi),fi.forEach(t),mi.forEach(t),Oze=i(m),dm=n(m,"H2",{class:!0});var YWe=s(dm);xA=n(YWe,"A",{id:!0,class:!0,href:!0});var vVt=s(xA);uAe=n(vVt,"SPAN",{});var FVt=s(uAe);T(S$.$$.fragment,FVt),FVt.forEach(t),vVt.forEach(t),UHr=i(YWe),pAe=n(YWe,"SPAN",{});var TVt=s(pAe);JHr=r(TVt,"FlaxAutoModelForSequenceClassification"),TVt.forEach(t),YWe.forEach(t),Vze=i(m),Fr=n(m,"DIV",{class:!0});var gi=s(Fr);T(R$.$$.fragment,gi),YHr=i(gi),cm=n(gi,"P",{});var cae=s(cm);KHr=r(cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Eoe=n(cae,"A",{href:!0});var MVt=s(Eoe);ZHr=r(MVt,"from_pretrained()"),MVt.forEach(t),eUr=r(cae," class method or the "),Coe=n(cae,"A",{href:!0});var EVt=s(Coe);oUr=r(EVt,"from_config()"),EVt.forEach(t),rUr=r(cae,` class
method.`),cae.forEach(t),tUr=i(gi),P$=n(gi,"P",{});var KWe=s(P$);aUr=r(KWe,"This class cannot be instantiated directly using "),_Ae=n(KWe,"CODE",{});var CVt=s(_Ae);nUr=r(CVt,"__init__()"),CVt.forEach(t),sUr=r(KWe," (throws an error)."),KWe.forEach(t),lUr=i(gi),Kt=n(gi,"DIV",{class:!0});var DL=s(Kt);T(B$.$$.fragment,DL),iUr=i(DL),bAe=n(DL,"P",{});var wVt=s(bAe);dUr=r(wVt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),wVt.forEach(t),cUr=i(DL),mm=n(DL,"P",{});var mae=s(mm);mUr=r(mae,`Note:
Loading a model from its configuration file does `),vAe=n(mae,"STRONG",{});var AVt=s(vAe);fUr=r(AVt,"not"),AVt.forEach(t),gUr=r(mae,` load the model weights. It only affects the
model\u2019s configuration. Use `),woe=n(mae,"A",{href:!0});var LVt=s(woe);hUr=r(LVt,"from_pretrained()"),LVt.forEach(t),uUr=r(mae," to load the model weights."),mae.forEach(t),pUr=i(DL),T($A.$$.fragment,DL),DL.forEach(t),_Ur=i(gi),Hr=n(gi,"DIV",{class:!0});var hi=s(Hr);T(I$.$$.fragment,hi),bUr=i(hi),FAe=n(hi,"P",{});var yVt=s(FAe);vUr=r(yVt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),yVt.forEach(t),FUr=i(hi),An=n(hi,"P",{});var GL=s(An);TUr=r(GL,"The model class to instantiate is selected based on the "),TAe=n(GL,"CODE",{});var xVt=s(TAe);MUr=r(xVt,"model_type"),xVt.forEach(t),EUr=r(GL,` property of the config object (either
passed as an argument or loaded from `),MAe=n(GL,"CODE",{});var $Vt=s(MAe);CUr=r($Vt,"pretrained_model_name_or_path"),$Vt.forEach(t),wUr=r(GL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EAe=n(GL,"CODE",{});var kVt=s(EAe);AUr=r(kVt,"pretrained_model_name_or_path"),kVt.forEach(t),LUr=r(GL,":"),GL.forEach(t),yUr=i(hi),Se=n(hi,"UL",{});var De=s(Se);kA=n(De,"LI",{});var mVe=s(kA);CAe=n(mVe,"STRONG",{});var SVt=s(CAe);xUr=r(SVt,"albert"),SVt.forEach(t),$Ur=r(mVe," \u2014 "),Aoe=n(mVe,"A",{href:!0});var RVt=s(Aoe);kUr=r(RVt,"FlaxAlbertForSequenceClassification"),RVt.forEach(t),SUr=r(mVe," (ALBERT model)"),mVe.forEach(t),RUr=i(De),SA=n(De,"LI",{});var fVe=s(SA);wAe=n(fVe,"STRONG",{});var PVt=s(wAe);PUr=r(PVt,"bart"),PVt.forEach(t),BUr=r(fVe," \u2014 "),Loe=n(fVe,"A",{href:!0});var BVt=s(Loe);IUr=r(BVt,"FlaxBartForSequenceClassification"),BVt.forEach(t),NUr=r(fVe," (BART model)"),fVe.forEach(t),qUr=i(De),RA=n(De,"LI",{});var gVe=s(RA);AAe=n(gVe,"STRONG",{});var IVt=s(AAe);jUr=r(IVt,"bert"),IVt.forEach(t),DUr=r(gVe," \u2014 "),yoe=n(gVe,"A",{href:!0});var NVt=s(yoe);GUr=r(NVt,"FlaxBertForSequenceClassification"),NVt.forEach(t),OUr=r(gVe," (BERT model)"),gVe.forEach(t),VUr=i(De),PA=n(De,"LI",{});var hVe=s(PA);LAe=n(hVe,"STRONG",{});var qVt=s(LAe);XUr=r(qVt,"big_bird"),qVt.forEach(t),zUr=r(hVe," \u2014 "),xoe=n(hVe,"A",{href:!0});var jVt=s(xoe);QUr=r(jVt,"FlaxBigBirdForSequenceClassification"),jVt.forEach(t),WUr=r(hVe," (BigBird model)"),hVe.forEach(t),HUr=i(De),BA=n(De,"LI",{});var uVe=s(BA);yAe=n(uVe,"STRONG",{});var DVt=s(yAe);UUr=r(DVt,"distilbert"),DVt.forEach(t),JUr=r(uVe," \u2014 "),$oe=n(uVe,"A",{href:!0});var GVt=s($oe);YUr=r(GVt,"FlaxDistilBertForSequenceClassification"),GVt.forEach(t),KUr=r(uVe," (DistilBERT model)"),uVe.forEach(t),ZUr=i(De),IA=n(De,"LI",{});var pVe=s(IA);xAe=n(pVe,"STRONG",{});var OVt=s(xAe);eJr=r(OVt,"electra"),OVt.forEach(t),oJr=r(pVe," \u2014 "),koe=n(pVe,"A",{href:!0});var VVt=s(koe);rJr=r(VVt,"FlaxElectraForSequenceClassification"),VVt.forEach(t),tJr=r(pVe," (ELECTRA model)"),pVe.forEach(t),aJr=i(De),NA=n(De,"LI",{});var _Ve=s(NA);$Ae=n(_Ve,"STRONG",{});var XVt=s($Ae);nJr=r(XVt,"mbart"),XVt.forEach(t),sJr=r(_Ve," \u2014 "),Soe=n(_Ve,"A",{href:!0});var zVt=s(Soe);lJr=r(zVt,"FlaxMBartForSequenceClassification"),zVt.forEach(t),iJr=r(_Ve," (mBART model)"),_Ve.forEach(t),dJr=i(De),qA=n(De,"LI",{});var bVe=s(qA);kAe=n(bVe,"STRONG",{});var QVt=s(kAe);cJr=r(QVt,"roberta"),QVt.forEach(t),mJr=r(bVe," \u2014 "),Roe=n(bVe,"A",{href:!0});var WVt=s(Roe);fJr=r(WVt,"FlaxRobertaForSequenceClassification"),WVt.forEach(t),gJr=r(bVe," (RoBERTa model)"),bVe.forEach(t),hJr=i(De),jA=n(De,"LI",{});var vVe=s(jA);SAe=n(vVe,"STRONG",{});var HVt=s(SAe);uJr=r(HVt,"roformer"),HVt.forEach(t),pJr=r(vVe," \u2014 "),Poe=n(vVe,"A",{href:!0});var UVt=s(Poe);_Jr=r(UVt,"FlaxRoFormerForSequenceClassification"),UVt.forEach(t),bJr=r(vVe," (RoFormer model)"),vVe.forEach(t),vJr=i(De),DA=n(De,"LI",{});var FVe=s(DA);RAe=n(FVe,"STRONG",{});var JVt=s(RAe);FJr=r(JVt,"xlm-roberta"),JVt.forEach(t),TJr=r(FVe," \u2014 "),Boe=n(FVe,"A",{href:!0});var YVt=s(Boe);MJr=r(YVt,"FlaxXLMRobertaForSequenceClassification"),YVt.forEach(t),EJr=r(FVe," (XLM-RoBERTa model)"),FVe.forEach(t),De.forEach(t),CJr=i(hi),T(GA.$$.fragment,hi),hi.forEach(t),gi.forEach(t),Xze=i(m),fm=n(m,"H2",{class:!0});var ZWe=s(fm);OA=n(ZWe,"A",{id:!0,class:!0,href:!0});var KVt=s(OA);PAe=n(KVt,"SPAN",{});var ZVt=s(PAe);T(N$.$$.fragment,ZVt),ZVt.forEach(t),KVt.forEach(t),wJr=i(ZWe),BAe=n(ZWe,"SPAN",{});var eXt=s(BAe);AJr=r(eXt,"FlaxAutoModelForQuestionAnswering"),eXt.forEach(t),ZWe.forEach(t),zze=i(m),Tr=n(m,"DIV",{class:!0});var ui=s(Tr);T(q$.$$.fragment,ui),LJr=i(ui),gm=n(ui,"P",{});var fae=s(gm);yJr=r(fae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Ioe=n(fae,"A",{href:!0});var oXt=s(Ioe);xJr=r(oXt,"from_pretrained()"),oXt.forEach(t),$Jr=r(fae," class method or the "),Noe=n(fae,"A",{href:!0});var rXt=s(Noe);kJr=r(rXt,"from_config()"),rXt.forEach(t),SJr=r(fae,` class
method.`),fae.forEach(t),RJr=i(ui),j$=n(ui,"P",{});var eHe=s(j$);PJr=r(eHe,"This class cannot be instantiated directly using "),IAe=n(eHe,"CODE",{});var tXt=s(IAe);BJr=r(tXt,"__init__()"),tXt.forEach(t),IJr=r(eHe," (throws an error)."),eHe.forEach(t),NJr=i(ui),Zt=n(ui,"DIV",{class:!0});var OL=s(Zt);T(D$.$$.fragment,OL),qJr=i(OL),NAe=n(OL,"P",{});var aXt=s(NAe);jJr=r(aXt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),aXt.forEach(t),DJr=i(OL),hm=n(OL,"P",{});var gae=s(hm);GJr=r(gae,`Note:
Loading a model from its configuration file does `),qAe=n(gae,"STRONG",{});var nXt=s(qAe);OJr=r(nXt,"not"),nXt.forEach(t),VJr=r(gae,` load the model weights. It only affects the
model\u2019s configuration. Use `),qoe=n(gae,"A",{href:!0});var sXt=s(qoe);XJr=r(sXt,"from_pretrained()"),sXt.forEach(t),zJr=r(gae," to load the model weights."),gae.forEach(t),QJr=i(OL),T(VA.$$.fragment,OL),OL.forEach(t),WJr=i(ui),Ur=n(ui,"DIV",{class:!0});var pi=s(Ur);T(G$.$$.fragment,pi),HJr=i(pi),jAe=n(pi,"P",{});var lXt=s(jAe);UJr=r(lXt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),lXt.forEach(t),JJr=i(pi),Ln=n(pi,"P",{});var VL=s(Ln);YJr=r(VL,"The model class to instantiate is selected based on the "),DAe=n(VL,"CODE",{});var iXt=s(DAe);KJr=r(iXt,"model_type"),iXt.forEach(t),ZJr=r(VL,` property of the config object (either
passed as an argument or loaded from `),GAe=n(VL,"CODE",{});var dXt=s(GAe);eYr=r(dXt,"pretrained_model_name_or_path"),dXt.forEach(t),oYr=r(VL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OAe=n(VL,"CODE",{});var cXt=s(OAe);rYr=r(cXt,"pretrained_model_name_or_path"),cXt.forEach(t),tYr=r(VL,":"),VL.forEach(t),aYr=i(pi),Re=n(pi,"UL",{});var Ge=s(Re);XA=n(Ge,"LI",{});var TVe=s(XA);VAe=n(TVe,"STRONG",{});var mXt=s(VAe);nYr=r(mXt,"albert"),mXt.forEach(t),sYr=r(TVe," \u2014 "),joe=n(TVe,"A",{href:!0});var fXt=s(joe);lYr=r(fXt,"FlaxAlbertForQuestionAnswering"),fXt.forEach(t),iYr=r(TVe," (ALBERT model)"),TVe.forEach(t),dYr=i(Ge),zA=n(Ge,"LI",{});var MVe=s(zA);XAe=n(MVe,"STRONG",{});var gXt=s(XAe);cYr=r(gXt,"bart"),gXt.forEach(t),mYr=r(MVe," \u2014 "),Doe=n(MVe,"A",{href:!0});var hXt=s(Doe);fYr=r(hXt,"FlaxBartForQuestionAnswering"),hXt.forEach(t),gYr=r(MVe," (BART model)"),MVe.forEach(t),hYr=i(Ge),QA=n(Ge,"LI",{});var EVe=s(QA);zAe=n(EVe,"STRONG",{});var uXt=s(zAe);uYr=r(uXt,"bert"),uXt.forEach(t),pYr=r(EVe," \u2014 "),Goe=n(EVe,"A",{href:!0});var pXt=s(Goe);_Yr=r(pXt,"FlaxBertForQuestionAnswering"),pXt.forEach(t),bYr=r(EVe," (BERT model)"),EVe.forEach(t),vYr=i(Ge),WA=n(Ge,"LI",{});var CVe=s(WA);QAe=n(CVe,"STRONG",{});var _Xt=s(QAe);FYr=r(_Xt,"big_bird"),_Xt.forEach(t),TYr=r(CVe," \u2014 "),Ooe=n(CVe,"A",{href:!0});var bXt=s(Ooe);MYr=r(bXt,"FlaxBigBirdForQuestionAnswering"),bXt.forEach(t),EYr=r(CVe," (BigBird model)"),CVe.forEach(t),CYr=i(Ge),HA=n(Ge,"LI",{});var wVe=s(HA);WAe=n(wVe,"STRONG",{});var vXt=s(WAe);wYr=r(vXt,"distilbert"),vXt.forEach(t),AYr=r(wVe," \u2014 "),Voe=n(wVe,"A",{href:!0});var FXt=s(Voe);LYr=r(FXt,"FlaxDistilBertForQuestionAnswering"),FXt.forEach(t),yYr=r(wVe," (DistilBERT model)"),wVe.forEach(t),xYr=i(Ge),UA=n(Ge,"LI",{});var AVe=s(UA);HAe=n(AVe,"STRONG",{});var TXt=s(HAe);$Yr=r(TXt,"electra"),TXt.forEach(t),kYr=r(AVe," \u2014 "),Xoe=n(AVe,"A",{href:!0});var MXt=s(Xoe);SYr=r(MXt,"FlaxElectraForQuestionAnswering"),MXt.forEach(t),RYr=r(AVe," (ELECTRA model)"),AVe.forEach(t),PYr=i(Ge),JA=n(Ge,"LI",{});var LVe=s(JA);UAe=n(LVe,"STRONG",{});var EXt=s(UAe);BYr=r(EXt,"mbart"),EXt.forEach(t),IYr=r(LVe," \u2014 "),zoe=n(LVe,"A",{href:!0});var CXt=s(zoe);NYr=r(CXt,"FlaxMBartForQuestionAnswering"),CXt.forEach(t),qYr=r(LVe," (mBART model)"),LVe.forEach(t),jYr=i(Ge),YA=n(Ge,"LI",{});var yVe=s(YA);JAe=n(yVe,"STRONG",{});var wXt=s(JAe);DYr=r(wXt,"roberta"),wXt.forEach(t),GYr=r(yVe," \u2014 "),Qoe=n(yVe,"A",{href:!0});var AXt=s(Qoe);OYr=r(AXt,"FlaxRobertaForQuestionAnswering"),AXt.forEach(t),VYr=r(yVe," (RoBERTa model)"),yVe.forEach(t),XYr=i(Ge),KA=n(Ge,"LI",{});var xVe=s(KA);YAe=n(xVe,"STRONG",{});var LXt=s(YAe);zYr=r(LXt,"roformer"),LXt.forEach(t),QYr=r(xVe," \u2014 "),Woe=n(xVe,"A",{href:!0});var yXt=s(Woe);WYr=r(yXt,"FlaxRoFormerForQuestionAnswering"),yXt.forEach(t),HYr=r(xVe," (RoFormer model)"),xVe.forEach(t),UYr=i(Ge),ZA=n(Ge,"LI",{});var $Ve=s(ZA);KAe=n($Ve,"STRONG",{});var xXt=s(KAe);JYr=r(xXt,"xlm-roberta"),xXt.forEach(t),YYr=r($Ve," \u2014 "),Hoe=n($Ve,"A",{href:!0});var $Xt=s(Hoe);KYr=r($Xt,"FlaxXLMRobertaForQuestionAnswering"),$Xt.forEach(t),ZYr=r($Ve," (XLM-RoBERTa model)"),$Ve.forEach(t),Ge.forEach(t),eKr=i(pi),T(e6.$$.fragment,pi),pi.forEach(t),ui.forEach(t),Qze=i(m),um=n(m,"H2",{class:!0});var oHe=s(um);o6=n(oHe,"A",{id:!0,class:!0,href:!0});var kXt=s(o6);ZAe=n(kXt,"SPAN",{});var SXt=s(ZAe);T(O$.$$.fragment,SXt),SXt.forEach(t),kXt.forEach(t),oKr=i(oHe),e6e=n(oHe,"SPAN",{});var RXt=s(e6e);rKr=r(RXt,"FlaxAutoModelForTokenClassification"),RXt.forEach(t),oHe.forEach(t),Wze=i(m),Mr=n(m,"DIV",{class:!0});var _i=s(Mr);T(V$.$$.fragment,_i),tKr=i(_i),pm=n(_i,"P",{});var hae=s(pm);aKr=r(hae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Uoe=n(hae,"A",{href:!0});var PXt=s(Uoe);nKr=r(PXt,"from_pretrained()"),PXt.forEach(t),sKr=r(hae," class method or the "),Joe=n(hae,"A",{href:!0});var BXt=s(Joe);lKr=r(BXt,"from_config()"),BXt.forEach(t),iKr=r(hae,` class
method.`),hae.forEach(t),dKr=i(_i),X$=n(_i,"P",{});var rHe=s(X$);cKr=r(rHe,"This class cannot be instantiated directly using "),o6e=n(rHe,"CODE",{});var IXt=s(o6e);mKr=r(IXt,"__init__()"),IXt.forEach(t),fKr=r(rHe," (throws an error)."),rHe.forEach(t),gKr=i(_i),ea=n(_i,"DIV",{class:!0});var XL=s(ea);T(z$.$$.fragment,XL),hKr=i(XL),r6e=n(XL,"P",{});var NXt=s(r6e);uKr=r(NXt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),NXt.forEach(t),pKr=i(XL),_m=n(XL,"P",{});var uae=s(_m);_Kr=r(uae,`Note:
Loading a model from its configuration file does `),t6e=n(uae,"STRONG",{});var qXt=s(t6e);bKr=r(qXt,"not"),qXt.forEach(t),vKr=r(uae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yoe=n(uae,"A",{href:!0});var jXt=s(Yoe);FKr=r(jXt,"from_pretrained()"),jXt.forEach(t),TKr=r(uae," to load the model weights."),uae.forEach(t),MKr=i(XL),T(r6.$$.fragment,XL),XL.forEach(t),EKr=i(_i),Jr=n(_i,"DIV",{class:!0});var bi=s(Jr);T(Q$.$$.fragment,bi),CKr=i(bi),a6e=n(bi,"P",{});var DXt=s(a6e);wKr=r(DXt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),DXt.forEach(t),AKr=i(bi),yn=n(bi,"P",{});var zL=s(yn);LKr=r(zL,"The model class to instantiate is selected based on the "),n6e=n(zL,"CODE",{});var GXt=s(n6e);yKr=r(GXt,"model_type"),GXt.forEach(t),xKr=r(zL,` property of the config object (either
passed as an argument or loaded from `),s6e=n(zL,"CODE",{});var OXt=s(s6e);$Kr=r(OXt,"pretrained_model_name_or_path"),OXt.forEach(t),kKr=r(zL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l6e=n(zL,"CODE",{});var VXt=s(l6e);SKr=r(VXt,"pretrained_model_name_or_path"),VXt.forEach(t),RKr=r(zL,":"),zL.forEach(t),PKr=i(bi),Ve=n(bi,"UL",{});var Mo=s(Ve);t6=n(Mo,"LI",{});var kVe=s(t6);i6e=n(kVe,"STRONG",{});var XXt=s(i6e);BKr=r(XXt,"albert"),XXt.forEach(t),IKr=r(kVe," \u2014 "),Koe=n(kVe,"A",{href:!0});var zXt=s(Koe);NKr=r(zXt,"FlaxAlbertForTokenClassification"),zXt.forEach(t),qKr=r(kVe," (ALBERT model)"),kVe.forEach(t),jKr=i(Mo),a6=n(Mo,"LI",{});var SVe=s(a6);d6e=n(SVe,"STRONG",{});var QXt=s(d6e);DKr=r(QXt,"bert"),QXt.forEach(t),GKr=r(SVe," \u2014 "),Zoe=n(SVe,"A",{href:!0});var WXt=s(Zoe);OKr=r(WXt,"FlaxBertForTokenClassification"),WXt.forEach(t),VKr=r(SVe," (BERT model)"),SVe.forEach(t),XKr=i(Mo),n6=n(Mo,"LI",{});var RVe=s(n6);c6e=n(RVe,"STRONG",{});var HXt=s(c6e);zKr=r(HXt,"big_bird"),HXt.forEach(t),QKr=r(RVe," \u2014 "),ere=n(RVe,"A",{href:!0});var UXt=s(ere);WKr=r(UXt,"FlaxBigBirdForTokenClassification"),UXt.forEach(t),HKr=r(RVe," (BigBird model)"),RVe.forEach(t),UKr=i(Mo),s6=n(Mo,"LI",{});var PVe=s(s6);m6e=n(PVe,"STRONG",{});var JXt=s(m6e);JKr=r(JXt,"distilbert"),JXt.forEach(t),YKr=r(PVe," \u2014 "),ore=n(PVe,"A",{href:!0});var YXt=s(ore);KKr=r(YXt,"FlaxDistilBertForTokenClassification"),YXt.forEach(t),ZKr=r(PVe," (DistilBERT model)"),PVe.forEach(t),eZr=i(Mo),l6=n(Mo,"LI",{});var BVe=s(l6);f6e=n(BVe,"STRONG",{});var KXt=s(f6e);oZr=r(KXt,"electra"),KXt.forEach(t),rZr=r(BVe," \u2014 "),rre=n(BVe,"A",{href:!0});var ZXt=s(rre);tZr=r(ZXt,"FlaxElectraForTokenClassification"),ZXt.forEach(t),aZr=r(BVe," (ELECTRA model)"),BVe.forEach(t),nZr=i(Mo),i6=n(Mo,"LI",{});var IVe=s(i6);g6e=n(IVe,"STRONG",{});var ezt=s(g6e);sZr=r(ezt,"roberta"),ezt.forEach(t),lZr=r(IVe," \u2014 "),tre=n(IVe,"A",{href:!0});var ozt=s(tre);iZr=r(ozt,"FlaxRobertaForTokenClassification"),ozt.forEach(t),dZr=r(IVe," (RoBERTa model)"),IVe.forEach(t),cZr=i(Mo),d6=n(Mo,"LI",{});var NVe=s(d6);h6e=n(NVe,"STRONG",{});var rzt=s(h6e);mZr=r(rzt,"roformer"),rzt.forEach(t),fZr=r(NVe," \u2014 "),are=n(NVe,"A",{href:!0});var tzt=s(are);gZr=r(tzt,"FlaxRoFormerForTokenClassification"),tzt.forEach(t),hZr=r(NVe," (RoFormer model)"),NVe.forEach(t),uZr=i(Mo),c6=n(Mo,"LI",{});var qVe=s(c6);u6e=n(qVe,"STRONG",{});var azt=s(u6e);pZr=r(azt,"xlm-roberta"),azt.forEach(t),_Zr=r(qVe," \u2014 "),nre=n(qVe,"A",{href:!0});var nzt=s(nre);bZr=r(nzt,"FlaxXLMRobertaForTokenClassification"),nzt.forEach(t),vZr=r(qVe," (XLM-RoBERTa model)"),qVe.forEach(t),Mo.forEach(t),FZr=i(bi),T(m6.$$.fragment,bi),bi.forEach(t),_i.forEach(t),Hze=i(m),bm=n(m,"H2",{class:!0});var tHe=s(bm);f6=n(tHe,"A",{id:!0,class:!0,href:!0});var szt=s(f6);p6e=n(szt,"SPAN",{});var lzt=s(p6e);T(W$.$$.fragment,lzt),lzt.forEach(t),szt.forEach(t),TZr=i(tHe),_6e=n(tHe,"SPAN",{});var izt=s(_6e);MZr=r(izt,"FlaxAutoModelForMultipleChoice"),izt.forEach(t),tHe.forEach(t),Uze=i(m),Er=n(m,"DIV",{class:!0});var vi=s(Er);T(H$.$$.fragment,vi),EZr=i(vi),vm=n(vi,"P",{});var pae=s(vm);CZr=r(pae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),sre=n(pae,"A",{href:!0});var dzt=s(sre);wZr=r(dzt,"from_pretrained()"),dzt.forEach(t),AZr=r(pae," class method or the "),lre=n(pae,"A",{href:!0});var czt=s(lre);LZr=r(czt,"from_config()"),czt.forEach(t),yZr=r(pae,` class
method.`),pae.forEach(t),xZr=i(vi),U$=n(vi,"P",{});var aHe=s(U$);$Zr=r(aHe,"This class cannot be instantiated directly using "),b6e=n(aHe,"CODE",{});var mzt=s(b6e);kZr=r(mzt,"__init__()"),mzt.forEach(t),SZr=r(aHe," (throws an error)."),aHe.forEach(t),RZr=i(vi),oa=n(vi,"DIV",{class:!0});var QL=s(oa);T(J$.$$.fragment,QL),PZr=i(QL),v6e=n(QL,"P",{});var fzt=s(v6e);BZr=r(fzt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),fzt.forEach(t),IZr=i(QL),Fm=n(QL,"P",{});var _ae=s(Fm);NZr=r(_ae,`Note:
Loading a model from its configuration file does `),F6e=n(_ae,"STRONG",{});var gzt=s(F6e);qZr=r(gzt,"not"),gzt.forEach(t),jZr=r(_ae,` load the model weights. It only affects the
model\u2019s configuration. Use `),ire=n(_ae,"A",{href:!0});var hzt=s(ire);DZr=r(hzt,"from_pretrained()"),hzt.forEach(t),GZr=r(_ae," to load the model weights."),_ae.forEach(t),OZr=i(QL),T(g6.$$.fragment,QL),QL.forEach(t),VZr=i(vi),Yr=n(vi,"DIV",{class:!0});var Fi=s(Yr);T(Y$.$$.fragment,Fi),XZr=i(Fi),T6e=n(Fi,"P",{});var uzt=s(T6e);zZr=r(uzt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),uzt.forEach(t),QZr=i(Fi),xn=n(Fi,"P",{});var WL=s(xn);WZr=r(WL,"The model class to instantiate is selected based on the "),M6e=n(WL,"CODE",{});var pzt=s(M6e);HZr=r(pzt,"model_type"),pzt.forEach(t),UZr=r(WL,` property of the config object (either
passed as an argument or loaded from `),E6e=n(WL,"CODE",{});var _zt=s(E6e);JZr=r(_zt,"pretrained_model_name_or_path"),_zt.forEach(t),YZr=r(WL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C6e=n(WL,"CODE",{});var bzt=s(C6e);KZr=r(bzt,"pretrained_model_name_or_path"),bzt.forEach(t),ZZr=r(WL,":"),WL.forEach(t),eet=i(Fi),Xe=n(Fi,"UL",{});var Eo=s(Xe);h6=n(Eo,"LI",{});var jVe=s(h6);w6e=n(jVe,"STRONG",{});var vzt=s(w6e);oet=r(vzt,"albert"),vzt.forEach(t),ret=r(jVe," \u2014 "),dre=n(jVe,"A",{href:!0});var Fzt=s(dre);tet=r(Fzt,"FlaxAlbertForMultipleChoice"),Fzt.forEach(t),aet=r(jVe," (ALBERT model)"),jVe.forEach(t),net=i(Eo),u6=n(Eo,"LI",{});var DVe=s(u6);A6e=n(DVe,"STRONG",{});var Tzt=s(A6e);set=r(Tzt,"bert"),Tzt.forEach(t),iet=r(DVe," \u2014 "),cre=n(DVe,"A",{href:!0});var Mzt=s(cre);det=r(Mzt,"FlaxBertForMultipleChoice"),Mzt.forEach(t),cet=r(DVe," (BERT model)"),DVe.forEach(t),met=i(Eo),p6=n(Eo,"LI",{});var GVe=s(p6);L6e=n(GVe,"STRONG",{});var Ezt=s(L6e);fet=r(Ezt,"big_bird"),Ezt.forEach(t),get=r(GVe," \u2014 "),mre=n(GVe,"A",{href:!0});var Czt=s(mre);het=r(Czt,"FlaxBigBirdForMultipleChoice"),Czt.forEach(t),uet=r(GVe," (BigBird model)"),GVe.forEach(t),pet=i(Eo),_6=n(Eo,"LI",{});var OVe=s(_6);y6e=n(OVe,"STRONG",{});var wzt=s(y6e);_et=r(wzt,"distilbert"),wzt.forEach(t),bet=r(OVe," \u2014 "),fre=n(OVe,"A",{href:!0});var Azt=s(fre);vet=r(Azt,"FlaxDistilBertForMultipleChoice"),Azt.forEach(t),Fet=r(OVe," (DistilBERT model)"),OVe.forEach(t),Tet=i(Eo),b6=n(Eo,"LI",{});var VVe=s(b6);x6e=n(VVe,"STRONG",{});var Lzt=s(x6e);Met=r(Lzt,"electra"),Lzt.forEach(t),Eet=r(VVe," \u2014 "),gre=n(VVe,"A",{href:!0});var yzt=s(gre);Cet=r(yzt,"FlaxElectraForMultipleChoice"),yzt.forEach(t),wet=r(VVe," (ELECTRA model)"),VVe.forEach(t),Aet=i(Eo),v6=n(Eo,"LI",{});var XVe=s(v6);$6e=n(XVe,"STRONG",{});var xzt=s($6e);Let=r(xzt,"roberta"),xzt.forEach(t),yet=r(XVe," \u2014 "),hre=n(XVe,"A",{href:!0});var $zt=s(hre);xet=r($zt,"FlaxRobertaForMultipleChoice"),$zt.forEach(t),$et=r(XVe," (RoBERTa model)"),XVe.forEach(t),ket=i(Eo),F6=n(Eo,"LI",{});var zVe=s(F6);k6e=n(zVe,"STRONG",{});var kzt=s(k6e);Set=r(kzt,"roformer"),kzt.forEach(t),Ret=r(zVe," \u2014 "),ure=n(zVe,"A",{href:!0});var Szt=s(ure);Pet=r(Szt,"FlaxRoFormerForMultipleChoice"),Szt.forEach(t),Bet=r(zVe," (RoFormer model)"),zVe.forEach(t),Iet=i(Eo),T6=n(Eo,"LI",{});var QVe=s(T6);S6e=n(QVe,"STRONG",{});var Rzt=s(S6e);Net=r(Rzt,"xlm-roberta"),Rzt.forEach(t),qet=r(QVe," \u2014 "),pre=n(QVe,"A",{href:!0});var Pzt=s(pre);jet=r(Pzt,"FlaxXLMRobertaForMultipleChoice"),Pzt.forEach(t),Det=r(QVe," (XLM-RoBERTa model)"),QVe.forEach(t),Eo.forEach(t),Get=i(Fi),T(M6.$$.fragment,Fi),Fi.forEach(t),vi.forEach(t),Jze=i(m),Tm=n(m,"H2",{class:!0});var nHe=s(Tm);E6=n(nHe,"A",{id:!0,class:!0,href:!0});var Bzt=s(E6);R6e=n(Bzt,"SPAN",{});var Izt=s(R6e);T(K$.$$.fragment,Izt),Izt.forEach(t),Bzt.forEach(t),Oet=i(nHe),P6e=n(nHe,"SPAN",{});var Nzt=s(P6e);Vet=r(Nzt,"FlaxAutoModelForNextSentencePrediction"),Nzt.forEach(t),nHe.forEach(t),Yze=i(m),Cr=n(m,"DIV",{class:!0});var Ti=s(Cr);T(Z$.$$.fragment,Ti),Xet=i(Ti),Mm=n(Ti,"P",{});var bae=s(Mm);zet=r(bae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),_re=n(bae,"A",{href:!0});var qzt=s(_re);Qet=r(qzt,"from_pretrained()"),qzt.forEach(t),Wet=r(bae," class method or the "),bre=n(bae,"A",{href:!0});var jzt=s(bre);Het=r(jzt,"from_config()"),jzt.forEach(t),Uet=r(bae,` class
method.`),bae.forEach(t),Jet=i(Ti),ek=n(Ti,"P",{});var sHe=s(ek);Yet=r(sHe,"This class cannot be instantiated directly using "),B6e=n(sHe,"CODE",{});var Dzt=s(B6e);Ket=r(Dzt,"__init__()"),Dzt.forEach(t),Zet=r(sHe," (throws an error)."),sHe.forEach(t),eot=i(Ti),ra=n(Ti,"DIV",{class:!0});var HL=s(ra);T(ok.$$.fragment,HL),oot=i(HL),I6e=n(HL,"P",{});var Gzt=s(I6e);rot=r(Gzt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Gzt.forEach(t),tot=i(HL),Em=n(HL,"P",{});var vae=s(Em);aot=r(vae,`Note:
Loading a model from its configuration file does `),N6e=n(vae,"STRONG",{});var Ozt=s(N6e);not=r(Ozt,"not"),Ozt.forEach(t),sot=r(vae,` load the model weights. It only affects the
model\u2019s configuration. Use `),vre=n(vae,"A",{href:!0});var Vzt=s(vre);lot=r(Vzt,"from_pretrained()"),Vzt.forEach(t),iot=r(vae," to load the model weights."),vae.forEach(t),dot=i(HL),T(C6.$$.fragment,HL),HL.forEach(t),cot=i(Ti),Kr=n(Ti,"DIV",{class:!0});var Mi=s(Kr);T(rk.$$.fragment,Mi),mot=i(Mi),q6e=n(Mi,"P",{});var Xzt=s(q6e);fot=r(Xzt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Xzt.forEach(t),got=i(Mi),$n=n(Mi,"P",{});var UL=s($n);hot=r(UL,"The model class to instantiate is selected based on the "),j6e=n(UL,"CODE",{});var zzt=s(j6e);uot=r(zzt,"model_type"),zzt.forEach(t),pot=r(UL,` property of the config object (either
passed as an argument or loaded from `),D6e=n(UL,"CODE",{});var Qzt=s(D6e);_ot=r(Qzt,"pretrained_model_name_or_path"),Qzt.forEach(t),bot=r(UL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G6e=n(UL,"CODE",{});var Wzt=s(G6e);vot=r(Wzt,"pretrained_model_name_or_path"),Wzt.forEach(t),Fot=r(UL,":"),UL.forEach(t),Tot=i(Mi),O6e=n(Mi,"UL",{});var Hzt=s(O6e);w6=n(Hzt,"LI",{});var WVe=s(w6);V6e=n(WVe,"STRONG",{});var Uzt=s(V6e);Mot=r(Uzt,"bert"),Uzt.forEach(t),Eot=r(WVe," \u2014 "),Fre=n(WVe,"A",{href:!0});var Jzt=s(Fre);Cot=r(Jzt,"FlaxBertForNextSentencePrediction"),Jzt.forEach(t),wot=r(WVe," (BERT model)"),WVe.forEach(t),Hzt.forEach(t),Aot=i(Mi),T(A6.$$.fragment,Mi),Mi.forEach(t),Ti.forEach(t),Kze=i(m),Cm=n(m,"H2",{class:!0});var lHe=s(Cm);L6=n(lHe,"A",{id:!0,class:!0,href:!0});var Yzt=s(L6);X6e=n(Yzt,"SPAN",{});var Kzt=s(X6e);T(tk.$$.fragment,Kzt),Kzt.forEach(t),Yzt.forEach(t),Lot=i(lHe),z6e=n(lHe,"SPAN",{});var Zzt=s(z6e);yot=r(Zzt,"FlaxAutoModelForImageClassification"),Zzt.forEach(t),lHe.forEach(t),Zze=i(m),wr=n(m,"DIV",{class:!0});var Ei=s(wr);T(ak.$$.fragment,Ei),xot=i(Ei),wm=n(Ei,"P",{});var Fae=s(wm);$ot=r(Fae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Tre=n(Fae,"A",{href:!0});var eQt=s(Tre);kot=r(eQt,"from_pretrained()"),eQt.forEach(t),Sot=r(Fae," class method or the "),Mre=n(Fae,"A",{href:!0});var oQt=s(Mre);Rot=r(oQt,"from_config()"),oQt.forEach(t),Pot=r(Fae,` class
method.`),Fae.forEach(t),Bot=i(Ei),nk=n(Ei,"P",{});var iHe=s(nk);Iot=r(iHe,"This class cannot be instantiated directly using "),Q6e=n(iHe,"CODE",{});var rQt=s(Q6e);Not=r(rQt,"__init__()"),rQt.forEach(t),qot=r(iHe," (throws an error)."),iHe.forEach(t),jot=i(Ei),ta=n(Ei,"DIV",{class:!0});var JL=s(ta);T(sk.$$.fragment,JL),Dot=i(JL),W6e=n(JL,"P",{});var tQt=s(W6e);Got=r(tQt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),tQt.forEach(t),Oot=i(JL),Am=n(JL,"P",{});var Tae=s(Am);Vot=r(Tae,`Note:
Loading a model from its configuration file does `),H6e=n(Tae,"STRONG",{});var aQt=s(H6e);Xot=r(aQt,"not"),aQt.forEach(t),zot=r(Tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ere=n(Tae,"A",{href:!0});var nQt=s(Ere);Qot=r(nQt,"from_pretrained()"),nQt.forEach(t),Wot=r(Tae," to load the model weights."),Tae.forEach(t),Hot=i(JL),T(y6.$$.fragment,JL),JL.forEach(t),Uot=i(Ei),Zr=n(Ei,"DIV",{class:!0});var Ci=s(Zr);T(lk.$$.fragment,Ci),Jot=i(Ci),U6e=n(Ci,"P",{});var sQt=s(U6e);Yot=r(sQt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),sQt.forEach(t),Kot=i(Ci),kn=n(Ci,"P",{});var YL=s(kn);Zot=r(YL,"The model class to instantiate is selected based on the "),J6e=n(YL,"CODE",{});var lQt=s(J6e);ert=r(lQt,"model_type"),lQt.forEach(t),ort=r(YL,` property of the config object (either
passed as an argument or loaded from `),Y6e=n(YL,"CODE",{});var iQt=s(Y6e);rrt=r(iQt,"pretrained_model_name_or_path"),iQt.forEach(t),trt=r(YL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K6e=n(YL,"CODE",{});var dQt=s(K6e);art=r(dQt,"pretrained_model_name_or_path"),dQt.forEach(t),nrt=r(YL,":"),YL.forEach(t),srt=i(Ci),ik=n(Ci,"UL",{});var dHe=s(ik);x6=n(dHe,"LI",{});var HVe=s(x6);Z6e=n(HVe,"STRONG",{});var cQt=s(Z6e);lrt=r(cQt,"beit"),cQt.forEach(t),irt=r(HVe," \u2014 "),Cre=n(HVe,"A",{href:!0});var mQt=s(Cre);drt=r(mQt,"FlaxBeitForImageClassification"),mQt.forEach(t),crt=r(HVe," (BEiT model)"),HVe.forEach(t),mrt=i(dHe),$6=n(dHe,"LI",{});var UVe=s($6);e7e=n(UVe,"STRONG",{});var fQt=s(e7e);frt=r(fQt,"vit"),fQt.forEach(t),grt=r(UVe," \u2014 "),wre=n(UVe,"A",{href:!0});var gQt=s(wre);hrt=r(gQt,"FlaxViTForImageClassification"),gQt.forEach(t),urt=r(UVe," (ViT model)"),UVe.forEach(t),dHe.forEach(t),prt=i(Ci),T(k6.$$.fragment,Ci),Ci.forEach(t),Ei.forEach(t),eQe=i(m),Lm=n(m,"H2",{class:!0});var cHe=s(Lm);S6=n(cHe,"A",{id:!0,class:!0,href:!0});var hQt=s(S6);o7e=n(hQt,"SPAN",{});var uQt=s(o7e);T(dk.$$.fragment,uQt),uQt.forEach(t),hQt.forEach(t),_rt=i(cHe),r7e=n(cHe,"SPAN",{});var pQt=s(r7e);brt=r(pQt,"FlaxAutoModelForVision2Seq"),pQt.forEach(t),cHe.forEach(t),oQe=i(m),Ar=n(m,"DIV",{class:!0});var wi=s(Ar);T(ck.$$.fragment,wi),vrt=i(wi),ym=n(wi,"P",{});var Mae=s(ym);Frt=r(Mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Are=n(Mae,"A",{href:!0});var _Qt=s(Are);Trt=r(_Qt,"from_pretrained()"),_Qt.forEach(t),Mrt=r(Mae," class method or the "),Lre=n(Mae,"A",{href:!0});var bQt=s(Lre);Ert=r(bQt,"from_config()"),bQt.forEach(t),Crt=r(Mae,` class
method.`),Mae.forEach(t),wrt=i(wi),mk=n(wi,"P",{});var mHe=s(mk);Art=r(mHe,"This class cannot be instantiated directly using "),t7e=n(mHe,"CODE",{});var vQt=s(t7e);Lrt=r(vQt,"__init__()"),vQt.forEach(t),yrt=r(mHe," (throws an error)."),mHe.forEach(t),xrt=i(wi),aa=n(wi,"DIV",{class:!0});var KL=s(aa);T(fk.$$.fragment,KL),$rt=i(KL),a7e=n(KL,"P",{});var FQt=s(a7e);krt=r(FQt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),FQt.forEach(t),Srt=i(KL),xm=n(KL,"P",{});var Eae=s(xm);Rrt=r(Eae,`Note:
Loading a model from its configuration file does `),n7e=n(Eae,"STRONG",{});var TQt=s(n7e);Prt=r(TQt,"not"),TQt.forEach(t),Brt=r(Eae,` load the model weights. It only affects the
model\u2019s configuration. Use `),yre=n(Eae,"A",{href:!0});var MQt=s(yre);Irt=r(MQt,"from_pretrained()"),MQt.forEach(t),Nrt=r(Eae," to load the model weights."),Eae.forEach(t),qrt=i(KL),T(R6.$$.fragment,KL),KL.forEach(t),jrt=i(wi),et=n(wi,"DIV",{class:!0});var Ai=s(et);T(gk.$$.fragment,Ai),Drt=i(Ai),s7e=n(Ai,"P",{});var EQt=s(s7e);Grt=r(EQt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),EQt.forEach(t),Ort=i(Ai),Sn=n(Ai,"P",{});var ZL=s(Sn);Vrt=r(ZL,"The model class to instantiate is selected based on the "),l7e=n(ZL,"CODE",{});var CQt=s(l7e);Xrt=r(CQt,"model_type"),CQt.forEach(t),zrt=r(ZL,` property of the config object (either
passed as an argument or loaded from `),i7e=n(ZL,"CODE",{});var wQt=s(i7e);Qrt=r(wQt,"pretrained_model_name_or_path"),wQt.forEach(t),Wrt=r(ZL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d7e=n(ZL,"CODE",{});var AQt=s(d7e);Hrt=r(AQt,"pretrained_model_name_or_path"),AQt.forEach(t),Urt=r(ZL,":"),ZL.forEach(t),Jrt=i(Ai),c7e=n(Ai,"UL",{});var LQt=s(c7e);P6=n(LQt,"LI",{});var JVe=s(P6);m7e=n(JVe,"STRONG",{});var yQt=s(m7e);Yrt=r(yQt,"vision-encoder-decoder"),yQt.forEach(t),Krt=r(JVe," \u2014 "),xre=n(JVe,"A",{href:!0});var xQt=s(xre);Zrt=r(xQt,"FlaxVisionEncoderDecoderModel"),xQt.forEach(t),ett=r(JVe," (Vision Encoder decoder model)"),JVe.forEach(t),LQt.forEach(t),ott=i(Ai),T(B6.$$.fragment,Ai),Ai.forEach(t),wi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(BHt)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(Pn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(In,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c(Nn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(Ri,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(Nm,"id","extending-the-auto-classes"),c(Nm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nm,"href","#extending-the-auto-classes"),c(Pi,"class","relative group"),c(jm,"id","transformers.AutoConfig"),c(jm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jm,"href","#transformers.AutoConfig"),c(Bi,"class","relative group"),c(GS,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(OS,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(VS,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(XS,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(zS,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(QS,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(WS,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(HS,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(US,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(JS,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(YS,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig"),c(KS,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(ZS,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(eR,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(oR,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig"),c(rR,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(tR,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(aR,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(nR,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig"),c(sR,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(lR,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(iR,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(dR,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(cR,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(mR,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(fR,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(gR,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(hR,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(uR,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(pR,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(_R,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(bR,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(vR,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(FR,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),c(TR,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(MR,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(ER,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(CR,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(wR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(AR,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(LR,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(yR,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(xR,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig"),c($R,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(kR,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(SR,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(RR,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(PR,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(BR,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(IR,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(NR,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig"),c(qR,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(jR,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config"),c(DR,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(GR,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(OR,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(VR,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(XR,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(zR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(QR,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig"),c(WR,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(HR,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(UR,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(JR,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(YR,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(KR,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig"),c(ZR,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig"),c(eP,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(oP,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(rP,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),c(tP,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(aP,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(nP,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(sP,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(lP,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(iP,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(dP,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(cP,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(mP,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(fP,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(gP,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(hP,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(uP,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(pP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(_P,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(bP,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(vP,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(FP,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(TP,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(MP,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(EP,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(CP,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(wP,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(AP,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(LP,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(yP,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(xP,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c($P,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(kP,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(SP,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(RP,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(PP,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(BP,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(IP,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(NP,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(qP,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(jP,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(DP,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(GP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(OP,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(VP,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(XP,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(zP,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(QP,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(WP,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(HP,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(UP,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(JP,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(YP,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zg,"id","transformers.AutoTokenizer"),c(Zg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zg,"href","#transformers.AutoTokenizer"),c(Ni,"class","relative group"),c(KP,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(ZP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(eB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(oB,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(rB,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(tB,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(aB,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(nB,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(sB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(lB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(iB,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(dB,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(cB,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(mB,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(fB,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(gB,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(hB,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(uB,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(pB,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(_B,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(bB,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(vB,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(FB,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(TB,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(MB,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(EB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(CB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(wB,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(AB,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(LB,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(yB,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(xB,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c($B,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(kB,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(SB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(RB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(PB,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(BB,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(IB,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(NB,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(qB,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(jB,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(DB,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(GB,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(OB,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(VB,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(XB,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(zB,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(QB,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(WB,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(HB,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(UB,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(JB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(YB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(KB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(ZB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(eI,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(oI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(rI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(tI,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(aI,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(nI,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(sI,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(lI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(iI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(dI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(cI,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(mI,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(fI,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(gI,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(hI,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(uI,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(pI,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(_I,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(bI,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(vI,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(FI,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(TI,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(MI,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(EI,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(CI,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(wI,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(AI,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(LI,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(yI,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(xI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c($I,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(kI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(SI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(RI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(PI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(BI,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(II,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(NI,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(qI,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(jI,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(DI,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(GI,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(OI,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizer"),c(VI,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(XI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(zI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(QI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(WI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(HI,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(UI,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(JI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(YI,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(KI,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(ZI,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(eN,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(oN,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(rN,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(tN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(aN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(nN,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(sN,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(lN,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(iN,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(dN,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(cN,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(mN,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(fN,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(gN,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(hN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(uN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(pN,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(_N,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(bN,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(vN,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(FN,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(TN,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(MN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(EN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(CN,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(wN,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(AN,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(LN,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(yN,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(xN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c($N,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(kN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(SN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(RN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(PN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(BN,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(IN,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(NN,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(qN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(jN,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(DN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(GN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(ON,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(VN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(XN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(zN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(QN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(WN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ph,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bh,"id","transformers.AutoFeatureExtractor"),c(Bh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bh,"href","#transformers.AutoFeatureExtractor"),c(qi,"class","relative group"),c(HN,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(UN,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(JN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(YN,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(KN,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(ZN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(eq,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(oq,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(rq,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(tq,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(aq,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(nq,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(sq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(lq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(iq,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(dq,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(cq,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(mq,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(fq,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(gq,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(hq,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(uq,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(pq,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(_q,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(bq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(vq,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(Fq,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(Tq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Mq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Eq,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(Cq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(wq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Aq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Lq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(yq,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vu,"id","transformers.AutoProcessor"),c(vu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vu,"href","#transformers.AutoProcessor"),c(ji,"class","relative group"),c(xq,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c($q,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(kq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(Sq,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(Rq,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(Pq,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(Bq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Iq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Nq,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(qq,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(jq,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(Dq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Gq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Oq,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(Vq,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(Xq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(zq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Qq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Du,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gu,"id","transformers.AutoModel"),c(Gu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gu,"href","#transformers.AutoModel"),c(Gi,"class","relative group"),c(Wq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(Yq,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(Kq,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(Zq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(ej,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(oj,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(rj,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(tj,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(aj,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(nj,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel"),c(sj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(lj,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(ij,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(dj,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel"),c(cj,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(mj,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(fj,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(gj,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel"),c(hj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(uj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(pj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(_j,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(bj,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(vj,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(Fj,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(Tj,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(Mj,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(Ej,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Cj,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(wj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(Aj,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(Lj,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),c(yj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(xj,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c($j,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(kj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Sj,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(Rj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(Pj,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Bj,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Ij,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(Nj,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel"),c(qj,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(jj,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c(Dj,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Gj,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Oj,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Vj,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Xj,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(zj,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitModel"),c(Qj,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(Wj,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model"),c(Hj,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(Uj,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(Jj,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(Yj,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(Kj,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(Zj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(eD,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel"),c(oD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(rD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(tD,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel"),c(aD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(nD,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(sD,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel"),c(lD,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel"),c(iD,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(dD,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(cD,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),c(mD,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(fD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(gD,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(hD,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(uD,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(pD,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(_D,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(bD,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(vD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(FD,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(TD,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(MD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(ED,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(CD,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(wD,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(AD,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(LD,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(yD,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(xD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c($D,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(kD,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(SD,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(RD,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(PD,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(BD,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(ID,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(ND,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(qD,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(jD,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(DD,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(GD,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(OD,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(VD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(XD,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(zD,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(QD,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(WD,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(HD,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(UD,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(JD,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(YD,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(KD,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(ZD,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W_,"id","transformers.AutoModelForPreTraining"),c(W_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W_,"href","#transformers.AutoModelForPreTraining"),c(Xi,"class","relative group"),c(eG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(aG,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(nG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(sG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(lG,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(iG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(dG,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(cG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(mG,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(fG,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(gG,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(hG,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(uG,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(pG,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),c(_G,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(bG,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(vG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(FG,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(TG,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(MG,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(EG,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(CG,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(wG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(AG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(LG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(yG,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(xG,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining"),c($G,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(kG,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(SG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(RG,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(PG,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(BG,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(IG,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(NG,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(qG,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(jG,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(DG,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(GG,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(OG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(VG,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(XG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(zG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(QG,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(WG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O2,"id","transformers.AutoModelForCausalLM"),c(O2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O2,"href","#transformers.AutoModelForCausalLM"),c(Wi,"class","relative group"),c(HG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YG,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(KG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(ZG,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(eO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(oO,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(rO,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(tO,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(aO,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(nO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(sO,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(lO,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(iO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(dO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(cO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(mO,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(fO,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(gO,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(hO,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(uO,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(pO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(_O,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM"),c(bO,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(vO,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),c(FO,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(TO,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(MO,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(EO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(CO,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(wO,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(AO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(LO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(yO,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(xO,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c($O,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(kO,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(SO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(RO,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(PO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(BO,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(IO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sb,"id","transformers.AutoModelForMaskedLM"),c(Sb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sb,"href","#transformers.AutoModelForMaskedLM"),c(Ji,"class","relative group"),c(NO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(GO,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(OO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(VO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(XO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(zO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(QO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(WO,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(HO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(UO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(JO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(YO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(KO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(ZO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(eV,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(oV,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(rV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(tV,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(aV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(nV,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(sV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(lV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(iV,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(dV,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(cV,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(mV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(fV,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(gV,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(hV,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(uV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(pV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(_V,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(bV,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(vV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(FV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(TV,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(MV,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fv,"id","transformers.AutoModelForSeq2SeqLM"),c(Fv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fv,"href","#transformers.AutoModelForSeq2SeqLM"),c(Zi,"class","relative group"),c(EV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AV,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(LV,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(yV,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(xV,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c($V,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(kV,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(SV,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(RV,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(PV,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(BV,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(IV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(NV,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(qV,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(jV,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(DV,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(GV,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(OV,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(VV,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ov,"id","transformers.AutoModelForSequenceClassification"),c(Ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ov,"href","#transformers.AutoModelForSequenceClassification"),c(rd,"class","relative group"),c(XV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WV,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(HV,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(UV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(JV,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(YV,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(KV,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(ZV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(eX,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(oX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(rX,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(tX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(aX,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(nX,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(sX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(lX,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(iX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(dX,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(cX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(mX,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(fX,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(gX,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(hX,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(uX,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(pX,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(_X,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(bX,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(vX,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(FX,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(TX,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(MX,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(EX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(CX,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(wX,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(AX,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(LX,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(yX,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(xX,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c($X,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(kX,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(SX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(RX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(PX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(BX,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(IX,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(NX,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(qX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(jX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(DX,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(GX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(OX,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O1,"id","transformers.AutoModelForMultipleChoice"),c(O1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O1,"href","#transformers.AutoModelForMultipleChoice"),c(nd,"class","relative group"),c(VX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QX,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(WX,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(HX,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(UX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(JX,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(YX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(KX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(ZX,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(ez,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(oz,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(rz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(tz,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(az,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(nz,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(sz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(lz,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(iz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(dz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(cz,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(mz,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(fz,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(gz,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(hz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(uz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(pz,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(_z,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(bz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(vz,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(Fz,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(Tz,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MF,"id","transformers.AutoModelForNextSentencePrediction"),c(MF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MF,"href","#transformers.AutoModelForNextSentencePrediction"),c(id,"class","relative group"),c(Mz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ez,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wz,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(Az,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(Lz,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(yz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(xz,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c($z,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SF,"id","transformers.AutoModelForTokenClassification"),c(SF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SF,"href","#transformers.AutoModelForTokenClassification"),c(md,"class","relative group"),c(kz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pz,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(Bz,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(Iz,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(Nz,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(qz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(jz,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(Dz,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(Gz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(Oz,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(Vz,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(Xz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(zz,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(Qz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(Wz,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(Hz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(Uz,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(Jz,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(Yz,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(Kz,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(Zz,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(eQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(oQ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(rQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(tQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(aQ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(nQ,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(sQ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(lQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(iQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(dQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(cQ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(mQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(fQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(gQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(hQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(uQ,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bT,"id","transformers.AutoModelForQuestionAnswering"),c(bT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bT,"href","#transformers.AutoModelForQuestionAnswering"),c(hd,"class","relative group"),c(pQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Q,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(FQ,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(TQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(MQ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(EQ,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(CQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(wQ,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(AQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(LQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(yQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(xQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c($Q,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(kQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(SQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(RQ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(PQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(BQ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(IQ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(NQ,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(qQ,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(jQ,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(DQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(GQ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(OQ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(VQ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(XQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(zQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(QQ,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(WQ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(HQ,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(UQ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(JQ,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(YQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(KQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(ZQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(eW,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(oW,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(rW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(tW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(aW,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(nW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(sW,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cM,"id","transformers.AutoModelForTableQuestionAnswering"),c(cM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cM,"href","#transformers.AutoModelForTableQuestionAnswering"),c(_d,"class","relative group"),c(lW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uM,"id","transformers.AutoModelForImageClassification"),c(uM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uM,"href","#transformers.AutoModelForImageClassification"),c(Fd,"class","relative group"),c(mW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hW,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(uW,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(pW,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification"),c(_W,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(bW,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(vW,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(FW,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(TW,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification"),c(MW,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(EW,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(CW,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(wW,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(AW,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(LW,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(yW,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(xW,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c($W,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(kW,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(SW,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(RW,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SM,"id","transformers.AutoModelForVision2Seq"),c(SM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SM,"href","#transformers.AutoModelForVision2Seq"),c(Ed,"class","relative group"),c(PW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NW,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NM,"id","transformers.AutoModelForVisualQuestionAnswering"),c(NM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NM,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Ad,"class","relative group"),c(qW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GW,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OM,"id","transformers.AutoModelForAudioClassification"),c(OM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OM,"href","#transformers.AutoModelForAudioClassification"),c(xd,"class","relative group"),c(OW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(QW,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(WW,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(HW,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(UW,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(JW,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(YW,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(KW,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(ZW,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o4,"id","transformers.AutoModelForAudioFrameClassification"),c(o4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o4,"href","#transformers.AutoModelForAudioFrameClassification"),c(Sd,"class","relative group"),c(eH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(aH,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(nH,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(sH,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(lH,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c4,"id","transformers.AutoModelForCTC"),c(c4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c4,"href","#transformers.AutoModelForCTC"),c(Bd,"class","relative group"),c(iH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(fH,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(gH,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC"),c(hH,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(uH,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(pH,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(_H,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(bH,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(vH,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(FH,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C4,"id","transformers.AutoModelForSpeechSeq2Seq"),c(C4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C4,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(qd,"class","relative group"),c(TH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CH,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(wH,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($4,"id","transformers.AutoModelForAudioXVector"),c($4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($4,"href","#transformers.AutoModelForAudioXVector"),c(Gd,"class","relative group"),c(AH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c($H,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(kH,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(SH,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(RH,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j4,"id","transformers.AutoModelForMaskedImageModeling"),c(j4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j4,"href","#transformers.AutoModelForMaskedImageModeling"),c(Xd,"class","relative group"),c(PH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NH,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(qH,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(jH,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q4,"id","transformers.AutoModelForObjectDetection"),c(Q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q4,"href","#transformers.AutoModelForObjectDetection"),c(Hd,"class","relative group"),c(DH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VH,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(XH,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K4,"id","transformers.AutoModelForImageSegmentation"),c(K4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K4,"href","#transformers.AutoModelForImageSegmentation"),c(Yd,"class","relative group"),c(zH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HH,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tE,"id","transformers.AutoModelForSemanticSegmentation"),c(tE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tE,"href","#transformers.AutoModelForSemanticSegmentation"),c(ec,"class","relative group"),c(UH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KH,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(ZH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(eU,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(oU,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(rU,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fE,"id","transformers.AutoModelForInstanceSegmentation"),c(fE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fE,"href","#transformers.AutoModelForInstanceSegmentation"),c(tc,"class","relative group"),c(tU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sU,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_E,"id","transformers.TFAutoModel"),c(_E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_E,"href","#transformers.TFAutoModel"),c(sc,"class","relative group"),c(lU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cU,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(mU,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(fU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(gU,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(hU,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(uU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(pU,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(_U,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(bU,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(vU,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(FU,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(TU,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(MU,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(EU,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel"),c(CU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(wU,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(AU,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(LU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(yU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(xU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c($U,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(kU,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(SU,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(RU,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(PU,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(BU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(IU,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(NU,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(qU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(jU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(DU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(GU,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(OU,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(VU,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel"),c(XU,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(zU,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel"),c(QU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(WU,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel"),c(HU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(UU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(JU,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(YU,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),c(KU,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(ZU,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(eJ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(oJ,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(rJ,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(tJ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(aJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(nJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(sJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uC,"id","transformers.TFAutoModelForPreTraining"),c(uC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uC,"href","#transformers.TFAutoModelForPreTraining"),c(dc,"class","relative group"),c(lJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(mJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(fJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(gJ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(hJ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(uJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(pJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(_J,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(bJ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(vJ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(FJ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(TJ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(MJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(EJ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(CJ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(wJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(AJ,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(LJ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(yJ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(xJ,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c($J,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(kJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(SJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GC,"id","transformers.TFAutoModelForCausalLM"),c(GC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GC,"href","#transformers.TFAutoModelForCausalLM"),c(fc,"class","relative group"),c(RJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(NJ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(qJ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(jJ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(DJ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(GJ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(OJ,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(VJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(XJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(zJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(QJ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(WJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(HJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t3,"id","transformers.TFAutoModelForImageClassification"),c(t3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t3,"href","#transformers.TFAutoModelForImageClassification"),c(uc,"class","relative group"),c(UJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KJ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(ZJ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(eY,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(oY,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(rY,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(tY,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(aY,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(nY,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f3,"id","transformers.TFAutoModelForMaskedLM"),c(f3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f3,"href","#transformers.TFAutoModelForMaskedLM"),c(bc,"class","relative group"),c(sY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dY,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(cY,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(mY,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(fY,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(gY,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(hY,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(uY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(pY,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(_Y,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(bY,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(vY,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(FY,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(TY,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(MY,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(EY,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(CY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(wY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(AY,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(LY,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(yY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B3,"id","transformers.TFAutoModelForSeq2SeqLM"),c(B3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B3,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Tc,"class","relative group"),c(xY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($Y,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SY,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(RY,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(PY,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(BY,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(IY,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(NY,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(qY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(jY,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(DY,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(GY,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H3,"id","transformers.TFAutoModelForSequenceClassification"),c(H3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H3,"href","#transformers.TFAutoModelForSequenceClassification"),c(Cc,"class","relative group"),c(OY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zY,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(QY,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(WY,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(HY,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(UY,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(JY,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(YY,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(KY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(ZY,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(eK,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(oK,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(rK,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(tK,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(aK,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(nK,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(sK,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(lK,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(iK,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(dK,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(cK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(mK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(fK,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(gK,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(hK,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(uK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(pK,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E5,"id","transformers.TFAutoModelForMultipleChoice"),c(E5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E5,"href","#transformers.TFAutoModelForMultipleChoice"),c(Lc,"class","relative group"),c(_K,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FK,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(TK,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(MK,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(EK,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(CK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(wK,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(AK,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(LK,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(yK,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(xK,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c($K,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(kK,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(SK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(RK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(PK,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(BK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(IK,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V5,"id","transformers.TFAutoModelForNextSentencePrediction"),c(V5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V5,"href","#transformers.TFAutoModelForNextSentencePrediction"),c($c,"class","relative group"),c(NK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DK,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(GK,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H5,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(H5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H5,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Rc,"class","relative group"),c(OK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zK,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K5,"id","transformers.TFAutoModelForTokenClassification"),c(K5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K5,"href","#transformers.TFAutoModelForTokenClassification"),c(Ic,"class","relative group"),c(QK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UK,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(JK,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(YK,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(KK,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(ZK,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(eZ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(oZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(rZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(tZ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(aZ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(nZ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(sZ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(lZ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(iZ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(dZ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(cZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(mZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(fZ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(gZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(hZ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T0,"id","transformers.TFAutoModelForQuestionAnswering"),c(T0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T0,"href","#transformers.TFAutoModelForQuestionAnswering"),c(jc,"class","relative group"),c(uZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_Z,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(vZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(FZ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(TZ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(MZ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(EZ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(CZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(wZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(AZ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(LZ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(yZ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(xZ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c($Z,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(kZ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(SZ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(RZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(PZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(BZ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(IZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(NZ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X0,"id","transformers.TFAutoModelForVision2Seq"),c(X0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X0,"href","#transformers.TFAutoModelForVision2Seq"),c(Oc,"class","relative group"),c(qZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GZ,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H0,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(H0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H0,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(zc,"class","relative group"),c(OZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zZ,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K0,"id","transformers.FlaxAutoModel"),c(K0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K0,"href","#transformers.FlaxAutoModel"),c(Hc,"class","relative group"),c(QZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(JZ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(YZ,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(KZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(ZZ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(eee,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(oee,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(ree,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(tee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(aee,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(nee,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(see,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(lee,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(iee,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(dee,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(cee,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(mee,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(fee,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel"),c(gee,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(hee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(uee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(pee,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(_ee,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(bee,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(vee,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(Fee,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(Tee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yw,"id","transformers.FlaxAutoModelForCausalLM"),c(yw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yw,"href","#transformers.FlaxAutoModelForCausalLM"),c(Yc,"class","relative group"),c(Mee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Eee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wee,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Aee,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(Lee,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(yee,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(xee,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c($ee,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(kee,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(See,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(Ree,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(Pee,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gw,"id","transformers.FlaxAutoModelForPreTraining"),c(Gw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gw,"href","#transformers.FlaxAutoModelForPreTraining"),c(em,"class","relative group"),c(Bee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qee,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(jee,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Dee,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(Gee,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Oee,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(Vee,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Xee,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(zee,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Qee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Wee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Hee,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Uee,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(Jee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tA,"id","transformers.FlaxAutoModelForMaskedLM"),c(tA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tA,"href","#transformers.FlaxAutoModelForMaskedLM"),c(tm,"class","relative group"),c(Yee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eoe,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(ooe,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(roe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(toe,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(aoe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(noe,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(soe,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(loe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(ioe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(doe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pA,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(pA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pA,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(sm,"class","relative group"),c(coe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(moe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(foe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(goe,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(hoe,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(uoe,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(poe,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(_oe,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(boe,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(voe,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Foe,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Toe,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Moe,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xA,"id","transformers.FlaxAutoModelForSequenceClassification"),c(xA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xA,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(dm,"class","relative group"),c(Eoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Coe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(woe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Aoe,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Loe,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(yoe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(xoe,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c($oe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(koe,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Soe,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Roe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Poe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Boe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OA,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(OA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OA,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(fm,"class","relative group"),c(Ioe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Noe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(joe,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Doe,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Goe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Ooe,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Voe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Xoe,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(zoe,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Qoe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Woe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Hoe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o6,"id","transformers.FlaxAutoModelForTokenClassification"),c(o6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o6,"href","#transformers.FlaxAutoModelForTokenClassification"),c(um,"class","relative group"),c(Uoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Joe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Koe,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Zoe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(ere,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(ore,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(rre,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(tre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(are,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(nre,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f6,"id","transformers.FlaxAutoModelForMultipleChoice"),c(f6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f6,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(bm,"class","relative group"),c(sre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ire,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dre,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(cre,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(mre,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(fre,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(gre,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(hre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(ure,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(pre,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E6,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(E6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E6,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Tm,"class","relative group"),c(_re,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fre,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L6,"id","transformers.FlaxAutoModelForImageClassification"),c(L6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L6,"href","#transformers.FlaxAutoModelForImageClassification"),c(Cm,"class","relative group"),c(Tre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ere,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cre,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(wre,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S6,"id","transformers.FlaxAutoModelForVision2Seq"),c(S6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S6,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Lm,"class","relative group"),c(Are,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xre,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,v,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,Co),e(Co,Li),b(m,Rm,_),b(m,lt,_),e(lt,yi),e(lt,xi),e(xi,ey),e(lt,Pm),b(m,Oe,_),b(m,We,_),e(We,$i),e(We,Pn),e(Pn,oy),e(We,Bn),e(We,In),e(In,ry),e(We,ki),e(We,Nn),e(Nn,ty),e(We,Si),b(m,Bm,_),M(Sa,m,_),b(m,He,_),b(m,Ae,_),e(Ae,BS),e(Ae,Ri),e(Ri,IS),e(Ae,NS),b(m,wo,_),b(m,Ra,_),e(Ra,qS),e(Ra,Im),e(Im,jS),e(Ra,fHe),b(m,YVe,_),b(m,Pi,_),e(Pi,Nm),e(Nm,Cae),M(ay,Cae,null),e(Pi,gHe),e(Pi,wae),e(wae,hHe),b(m,KVe,_),b(m,qn,_),e(qn,uHe),e(qn,Aae),e(Aae,pHe),e(qn,_He),e(qn,Lae),e(Lae,bHe),e(qn,vHe),b(m,ZVe,_),M(ny,m,_),b(m,eXe,_),b(m,DS,_),e(DS,FHe),b(m,oXe,_),M(qm,m,_),b(m,rXe,_),b(m,Bi,_),e(Bi,jm),e(jm,yae),M(sy,yae,null),e(Bi,THe),e(Bi,xae),e(xae,MHe),b(m,tXe,_),b(m,Ao,_),M(ly,Ao,null),e(Ao,EHe),e(Ao,iy),e(iy,CHe),e(iy,GS),e(GS,wHe),e(iy,AHe),e(Ao,LHe),e(Ao,dy),e(dy,yHe),e(dy,$ae),e($ae,xHe),e(dy,$He),e(Ao,kHe),e(Ao,Lr),M(cy,Lr,null),e(Lr,SHe),e(Lr,kae),e(kae,RHe),e(Lr,PHe),e(Lr,Ii),e(Ii,BHe),e(Ii,Sae),e(Sae,IHe),e(Ii,NHe),e(Ii,Rae),e(Rae,qHe),e(Ii,jHe),e(Lr,DHe),e(Lr,A),e(A,Dm),e(Dm,Pae),e(Pae,GHe),e(Dm,OHe),e(Dm,OS),e(OS,VHe),e(Dm,XHe),e(A,zHe),e(A,Gm),e(Gm,Bae),e(Bae,QHe),e(Gm,WHe),e(Gm,VS),e(VS,HHe),e(Gm,UHe),e(A,JHe),e(A,Om),e(Om,Iae),e(Iae,YHe),e(Om,KHe),e(Om,XS),e(XS,ZHe),e(Om,eUe),e(A,oUe),e(A,Vm),e(Vm,Nae),e(Nae,rUe),e(Vm,tUe),e(Vm,zS),e(zS,aUe),e(Vm,nUe),e(A,sUe),e(A,Xm),e(Xm,qae),e(qae,lUe),e(Xm,iUe),e(Xm,QS),e(QS,dUe),e(Xm,cUe),e(A,mUe),e(A,zm),e(zm,jae),e(jae,fUe),e(zm,gUe),e(zm,WS),e(WS,hUe),e(zm,uUe),e(A,pUe),e(A,Qm),e(Qm,Dae),e(Dae,_Ue),e(Qm,bUe),e(Qm,HS),e(HS,vUe),e(Qm,FUe),e(A,TUe),e(A,Wm),e(Wm,Gae),e(Gae,MUe),e(Wm,EUe),e(Wm,US),e(US,CUe),e(Wm,wUe),e(A,AUe),e(A,Hm),e(Hm,Oae),e(Oae,LUe),e(Hm,yUe),e(Hm,JS),e(JS,xUe),e(Hm,$Ue),e(A,kUe),e(A,Um),e(Um,Vae),e(Vae,SUe),e(Um,RUe),e(Um,YS),e(YS,PUe),e(Um,BUe),e(A,IUe),e(A,Jm),e(Jm,Xae),e(Xae,NUe),e(Jm,qUe),e(Jm,KS),e(KS,jUe),e(Jm,DUe),e(A,GUe),e(A,Ym),e(Ym,zae),e(zae,OUe),e(Ym,VUe),e(Ym,ZS),e(ZS,XUe),e(Ym,zUe),e(A,QUe),e(A,Km),e(Km,Qae),e(Qae,WUe),e(Km,HUe),e(Km,eR),e(eR,UUe),e(Km,JUe),e(A,YUe),e(A,Zm),e(Zm,Wae),e(Wae,KUe),e(Zm,ZUe),e(Zm,oR),e(oR,eJe),e(Zm,oJe),e(A,rJe),e(A,ef),e(ef,Hae),e(Hae,tJe),e(ef,aJe),e(ef,rR),e(rR,nJe),e(ef,sJe),e(A,lJe),e(A,of),e(of,Uae),e(Uae,iJe),e(of,dJe),e(of,tR),e(tR,cJe),e(of,mJe),e(A,fJe),e(A,rf),e(rf,Jae),e(Jae,gJe),e(rf,hJe),e(rf,aR),e(aR,uJe),e(rf,pJe),e(A,_Je),e(A,tf),e(tf,Yae),e(Yae,bJe),e(tf,vJe),e(tf,nR),e(nR,FJe),e(tf,TJe),e(A,MJe),e(A,af),e(af,Kae),e(Kae,EJe),e(af,CJe),e(af,sR),e(sR,wJe),e(af,AJe),e(A,LJe),e(A,nf),e(nf,Zae),e(Zae,yJe),e(nf,xJe),e(nf,lR),e(lR,$Je),e(nf,kJe),e(A,SJe),e(A,sf),e(sf,ene),e(ene,RJe),e(sf,PJe),e(sf,iR),e(iR,BJe),e(sf,IJe),e(A,NJe),e(A,lf),e(lf,one),e(one,qJe),e(lf,jJe),e(lf,dR),e(dR,DJe),e(lf,GJe),e(A,OJe),e(A,df),e(df,rne),e(rne,VJe),e(df,XJe),e(df,cR),e(cR,zJe),e(df,QJe),e(A,WJe),e(A,cf),e(cf,tne),e(tne,HJe),e(cf,UJe),e(cf,mR),e(mR,JJe),e(cf,YJe),e(A,KJe),e(A,mf),e(mf,ane),e(ane,ZJe),e(mf,eYe),e(mf,fR),e(fR,oYe),e(mf,rYe),e(A,tYe),e(A,ff),e(ff,nne),e(nne,aYe),e(ff,nYe),e(ff,gR),e(gR,sYe),e(ff,lYe),e(A,iYe),e(A,gf),e(gf,sne),e(sne,dYe),e(gf,cYe),e(gf,hR),e(hR,mYe),e(gf,fYe),e(A,gYe),e(A,hf),e(hf,lne),e(lne,hYe),e(hf,uYe),e(hf,uR),e(uR,pYe),e(hf,_Ye),e(A,bYe),e(A,uf),e(uf,ine),e(ine,vYe),e(uf,FYe),e(uf,pR),e(pR,TYe),e(uf,MYe),e(A,EYe),e(A,pf),e(pf,dne),e(dne,CYe),e(pf,wYe),e(pf,_R),e(_R,AYe),e(pf,LYe),e(A,yYe),e(A,_f),e(_f,cne),e(cne,xYe),e(_f,$Ye),e(_f,bR),e(bR,kYe),e(_f,SYe),e(A,RYe),e(A,bf),e(bf,mne),e(mne,PYe),e(bf,BYe),e(bf,vR),e(vR,IYe),e(bf,NYe),e(A,qYe),e(A,vf),e(vf,fne),e(fne,jYe),e(vf,DYe),e(vf,FR),e(FR,GYe),e(vf,OYe),e(A,VYe),e(A,Ff),e(Ff,gne),e(gne,XYe),e(Ff,zYe),e(Ff,TR),e(TR,QYe),e(Ff,WYe),e(A,HYe),e(A,Tf),e(Tf,hne),e(hne,UYe),e(Tf,JYe),e(Tf,MR),e(MR,YYe),e(Tf,KYe),e(A,ZYe),e(A,Mf),e(Mf,une),e(une,eKe),e(Mf,oKe),e(Mf,ER),e(ER,rKe),e(Mf,tKe),e(A,aKe),e(A,Ef),e(Ef,pne),e(pne,nKe),e(Ef,sKe),e(Ef,CR),e(CR,lKe),e(Ef,iKe),e(A,dKe),e(A,Cf),e(Cf,_ne),e(_ne,cKe),e(Cf,mKe),e(Cf,wR),e(wR,fKe),e(Cf,gKe),e(A,hKe),e(A,wf),e(wf,bne),e(bne,uKe),e(wf,pKe),e(wf,AR),e(AR,_Ke),e(wf,bKe),e(A,vKe),e(A,Af),e(Af,vne),e(vne,FKe),e(Af,TKe),e(Af,LR),e(LR,MKe),e(Af,EKe),e(A,CKe),e(A,Lf),e(Lf,Fne),e(Fne,wKe),e(Lf,AKe),e(Lf,yR),e(yR,LKe),e(Lf,yKe),e(A,xKe),e(A,yf),e(yf,Tne),e(Tne,$Ke),e(yf,kKe),e(yf,xR),e(xR,SKe),e(yf,RKe),e(A,PKe),e(A,xf),e(xf,Mne),e(Mne,BKe),e(xf,IKe),e(xf,$R),e($R,NKe),e(xf,qKe),e(A,jKe),e(A,$f),e($f,Ene),e(Ene,DKe),e($f,GKe),e($f,kR),e(kR,OKe),e($f,VKe),e(A,XKe),e(A,kf),e(kf,Cne),e(Cne,zKe),e(kf,QKe),e(kf,SR),e(SR,WKe),e(kf,HKe),e(A,UKe),e(A,Sf),e(Sf,wne),e(wne,JKe),e(Sf,YKe),e(Sf,RR),e(RR,KKe),e(Sf,ZKe),e(A,eZe),e(A,Rf),e(Rf,Ane),e(Ane,oZe),e(Rf,rZe),e(Rf,PR),e(PR,tZe),e(Rf,aZe),e(A,nZe),e(A,Pf),e(Pf,Lne),e(Lne,sZe),e(Pf,lZe),e(Pf,BR),e(BR,iZe),e(Pf,dZe),e(A,cZe),e(A,Bf),e(Bf,yne),e(yne,mZe),e(Bf,fZe),e(Bf,IR),e(IR,gZe),e(Bf,hZe),e(A,uZe),e(A,If),e(If,xne),e(xne,pZe),e(If,_Ze),e(If,NR),e(NR,bZe),e(If,vZe),e(A,FZe),e(A,Nf),e(Nf,$ne),e($ne,TZe),e(Nf,MZe),e(Nf,qR),e(qR,EZe),e(Nf,CZe),e(A,wZe),e(A,qf),e(qf,kne),e(kne,AZe),e(qf,LZe),e(qf,jR),e(jR,yZe),e(qf,xZe),e(A,$Ze),e(A,jf),e(jf,Sne),e(Sne,kZe),e(jf,SZe),e(jf,DR),e(DR,RZe),e(jf,PZe),e(A,BZe),e(A,Df),e(Df,Rne),e(Rne,IZe),e(Df,NZe),e(Df,GR),e(GR,qZe),e(Df,jZe),e(A,DZe),e(A,Gf),e(Gf,Pne),e(Pne,GZe),e(Gf,OZe),e(Gf,OR),e(OR,VZe),e(Gf,XZe),e(A,zZe),e(A,Of),e(Of,Bne),e(Bne,QZe),e(Of,WZe),e(Of,VR),e(VR,HZe),e(Of,UZe),e(A,JZe),e(A,Vf),e(Vf,Ine),e(Ine,YZe),e(Vf,KZe),e(Vf,XR),e(XR,ZZe),e(Vf,eeo),e(A,oeo),e(A,Xf),e(Xf,Nne),e(Nne,reo),e(Xf,teo),e(Xf,zR),e(zR,aeo),e(Xf,neo),e(A,seo),e(A,zf),e(zf,qne),e(qne,leo),e(zf,ieo),e(zf,QR),e(QR,deo),e(zf,ceo),e(A,meo),e(A,Qf),e(Qf,jne),e(jne,feo),e(Qf,geo),e(Qf,WR),e(WR,heo),e(Qf,ueo),e(A,peo),e(A,Wf),e(Wf,Dne),e(Dne,_eo),e(Wf,beo),e(Wf,HR),e(HR,veo),e(Wf,Feo),e(A,Teo),e(A,Hf),e(Hf,Gne),e(Gne,Meo),e(Hf,Eeo),e(Hf,UR),e(UR,Ceo),e(Hf,weo),e(A,Aeo),e(A,Uf),e(Uf,One),e(One,Leo),e(Uf,yeo),e(Uf,JR),e(JR,xeo),e(Uf,$eo),e(A,keo),e(A,Jf),e(Jf,Vne),e(Vne,Seo),e(Jf,Reo),e(Jf,YR),e(YR,Peo),e(Jf,Beo),e(A,Ieo),e(A,Yf),e(Yf,Xne),e(Xne,Neo),e(Yf,qeo),e(Yf,KR),e(KR,jeo),e(Yf,Deo),e(A,Geo),e(A,Kf),e(Kf,zne),e(zne,Oeo),e(Kf,Veo),e(Kf,ZR),e(ZR,Xeo),e(Kf,zeo),e(A,Qeo),e(A,Zf),e(Zf,Qne),e(Qne,Weo),e(Zf,Heo),e(Zf,eP),e(eP,Ueo),e(Zf,Jeo),e(A,Yeo),e(A,eg),e(eg,Wne),e(Wne,Keo),e(eg,Zeo),e(eg,oP),e(oP,eoo),e(eg,ooo),e(A,roo),e(A,og),e(og,Hne),e(Hne,too),e(og,aoo),e(og,rP),e(rP,noo),e(og,soo),e(A,loo),e(A,rg),e(rg,Une),e(Une,ioo),e(rg,doo),e(rg,tP),e(tP,coo),e(rg,moo),e(A,foo),e(A,tg),e(tg,Jne),e(Jne,goo),e(tg,hoo),e(tg,aP),e(aP,uoo),e(tg,poo),e(A,_oo),e(A,ag),e(ag,Yne),e(Yne,boo),e(ag,voo),e(ag,nP),e(nP,Foo),e(ag,Too),e(A,Moo),e(A,ng),e(ng,Kne),e(Kne,Eoo),e(ng,Coo),e(ng,sP),e(sP,woo),e(ng,Aoo),e(A,Loo),e(A,sg),e(sg,Zne),e(Zne,yoo),e(sg,xoo),e(sg,lP),e(lP,$oo),e(sg,koo),e(A,Soo),e(A,lg),e(lg,ese),e(ese,Roo),e(lg,Poo),e(lg,iP),e(iP,Boo),e(lg,Ioo),e(A,Noo),e(A,ig),e(ig,ose),e(ose,qoo),e(ig,joo),e(ig,dP),e(dP,Doo),e(ig,Goo),e(A,Ooo),e(A,dg),e(dg,rse),e(rse,Voo),e(dg,Xoo),e(dg,cP),e(cP,zoo),e(dg,Qoo),e(A,Woo),e(A,cg),e(cg,tse),e(tse,Hoo),e(cg,Uoo),e(cg,mP),e(mP,Joo),e(cg,Yoo),e(A,Koo),e(A,mg),e(mg,ase),e(ase,Zoo),e(mg,ero),e(mg,fP),e(fP,oro),e(mg,rro),e(A,tro),e(A,fg),e(fg,nse),e(nse,aro),e(fg,nro),e(fg,gP),e(gP,sro),e(fg,lro),e(A,iro),e(A,gg),e(gg,sse),e(sse,dro),e(gg,cro),e(gg,hP),e(hP,mro),e(gg,fro),e(A,gro),e(A,hg),e(hg,lse),e(lse,hro),e(hg,uro),e(hg,uP),e(uP,pro),e(hg,_ro),e(A,bro),e(A,ug),e(ug,ise),e(ise,vro),e(ug,Fro),e(ug,pP),e(pP,Tro),e(ug,Mro),e(A,Ero),e(A,pg),e(pg,dse),e(dse,Cro),e(pg,wro),e(pg,_P),e(_P,Aro),e(pg,Lro),e(A,yro),e(A,_g),e(_g,cse),e(cse,xro),e(_g,$ro),e(_g,bP),e(bP,kro),e(_g,Sro),e(A,Rro),e(A,bg),e(bg,mse),e(mse,Pro),e(bg,Bro),e(bg,vP),e(vP,Iro),e(bg,Nro),e(A,qro),e(A,vg),e(vg,fse),e(fse,jro),e(vg,Dro),e(vg,FP),e(FP,Gro),e(vg,Oro),e(A,Vro),e(A,Fg),e(Fg,gse),e(gse,Xro),e(Fg,zro),e(Fg,TP),e(TP,Qro),e(Fg,Wro),e(A,Hro),e(A,Tg),e(Tg,hse),e(hse,Uro),e(Tg,Jro),e(Tg,MP),e(MP,Yro),e(Tg,Kro),e(A,Zro),e(A,Mg),e(Mg,use),e(use,eto),e(Mg,oto),e(Mg,EP),e(EP,rto),e(Mg,tto),e(A,ato),e(A,Eg),e(Eg,pse),e(pse,nto),e(Eg,sto),e(Eg,CP),e(CP,lto),e(Eg,ito),e(A,dto),e(A,Cg),e(Cg,_se),e(_se,cto),e(Cg,mto),e(Cg,wP),e(wP,fto),e(Cg,gto),e(A,hto),e(A,wg),e(wg,bse),e(bse,uto),e(wg,pto),e(wg,AP),e(AP,_to),e(wg,bto),e(A,vto),e(A,Ag),e(Ag,vse),e(vse,Fto),e(Ag,Tto),e(Ag,LP),e(LP,Mto),e(Ag,Eto),e(A,Cto),e(A,Lg),e(Lg,Fse),e(Fse,wto),e(Lg,Ato),e(Lg,yP),e(yP,Lto),e(Lg,yto),e(A,xto),e(A,yg),e(yg,Tse),e(Tse,$to),e(yg,kto),e(yg,xP),e(xP,Sto),e(yg,Rto),e(A,Pto),e(A,xg),e(xg,Mse),e(Mse,Bto),e(xg,Ito),e(xg,$P),e($P,Nto),e(xg,qto),e(A,jto),e(A,$g),e($g,Ese),e(Ese,Dto),e($g,Gto),e($g,kP),e(kP,Oto),e($g,Vto),e(A,Xto),e(A,kg),e(kg,Cse),e(Cse,zto),e(kg,Qto),e(kg,SP),e(SP,Wto),e(kg,Hto),e(A,Uto),e(A,Sg),e(Sg,wse),e(wse,Jto),e(Sg,Yto),e(Sg,RP),e(RP,Kto),e(Sg,Zto),e(A,eao),e(A,Rg),e(Rg,Ase),e(Ase,oao),e(Rg,rao),e(Rg,PP),e(PP,tao),e(Rg,aao),e(A,nao),e(A,Pg),e(Pg,Lse),e(Lse,sao),e(Pg,lao),e(Pg,BP),e(BP,iao),e(Pg,dao),e(A,cao),e(A,Bg),e(Bg,yse),e(yse,mao),e(Bg,fao),e(Bg,IP),e(IP,gao),e(Bg,hao),e(A,uao),e(A,Ig),e(Ig,xse),e(xse,pao),e(Ig,_ao),e(Ig,NP),e(NP,bao),e(Ig,vao),e(A,Fao),e(A,Ng),e(Ng,$se),e($se,Tao),e(Ng,Mao),e(Ng,qP),e(qP,Eao),e(Ng,Cao),e(A,wao),e(A,qg),e(qg,kse),e(kse,Aao),e(qg,Lao),e(qg,jP),e(jP,yao),e(qg,xao),e(A,$ao),e(A,jg),e(jg,Sse),e(Sse,kao),e(jg,Sao),e(jg,DP),e(DP,Rao),e(jg,Pao),e(A,Bao),e(A,Dg),e(Dg,Rse),e(Rse,Iao),e(Dg,Nao),e(Dg,GP),e(GP,qao),e(Dg,jao),e(A,Dao),e(A,Gg),e(Gg,Pse),e(Pse,Gao),e(Gg,Oao),e(Gg,OP),e(OP,Vao),e(Gg,Xao),e(A,zao),e(A,Og),e(Og,Bse),e(Bse,Qao),e(Og,Wao),e(Og,VP),e(VP,Hao),e(Og,Uao),e(A,Jao),e(A,Vg),e(Vg,Ise),e(Ise,Yao),e(Vg,Kao),e(Vg,XP),e(XP,Zao),e(Vg,eno),e(A,ono),e(A,Xg),e(Xg,Nse),e(Nse,rno),e(Xg,tno),e(Xg,zP),e(zP,ano),e(Xg,nno),e(A,sno),e(A,zg),e(zg,qse),e(qse,lno),e(zg,ino),e(zg,QP),e(QP,dno),e(zg,cno),e(A,mno),e(A,Qg),e(Qg,jse),e(jse,fno),e(Qg,gno),e(Qg,WP),e(WP,hno),e(Qg,uno),e(A,pno),e(A,Wg),e(Wg,Dse),e(Dse,_no),e(Wg,bno),e(Wg,HP),e(HP,vno),e(Wg,Fno),e(A,Tno),e(A,Hg),e(Hg,Gse),e(Gse,Mno),e(Hg,Eno),e(Hg,UP),e(UP,Cno),e(Hg,wno),e(A,Ano),e(A,Ug),e(Ug,Ose),e(Ose,Lno),e(Ug,yno),e(Ug,JP),e(JP,xno),e(Ug,$no),e(A,kno),e(A,Jg),e(Jg,Vse),e(Vse,Sno),e(Jg,Rno),e(Jg,YP),e(YP,Pno),e(Jg,Bno),e(Lr,Ino),M(Yg,Lr,null),e(Ao,Nno),e(Ao,Kg),M(my,Kg,null),e(Kg,qno),e(Kg,Xse),e(Xse,jno),b(m,aXe,_),b(m,Ni,_),e(Ni,Zg),e(Zg,zse),M(fy,zse,null),e(Ni,Dno),e(Ni,Qse),e(Qse,Gno),b(m,nXe,_),b(m,Lo,_),M(gy,Lo,null),e(Lo,Ono),e(Lo,hy),e(hy,Vno),e(hy,KP),e(KP,Xno),e(hy,zno),e(Lo,Qno),e(Lo,uy),e(uy,Wno),e(uy,Wse),e(Wse,Hno),e(uy,Uno),e(Lo,Jno),e(Lo,yr),M(py,yr,null),e(yr,Yno),e(yr,Hse),e(Hse,Kno),e(yr,Zno),e(yr,Pa),e(Pa,eso),e(Pa,Use),e(Use,oso),e(Pa,rso),e(Pa,Jse),e(Jse,tso),e(Pa,aso),e(Pa,Yse),e(Yse,nso),e(Pa,sso),e(yr,lso),e(yr,k),e(k,jn),e(jn,Kse),e(Kse,iso),e(jn,dso),e(jn,ZP),e(ZP,cso),e(jn,mso),e(jn,eB),e(eB,fso),e(jn,gso),e(k,hso),e(k,Dn),e(Dn,Zse),e(Zse,uso),e(Dn,pso),e(Dn,oB),e(oB,_so),e(Dn,bso),e(Dn,rB),e(rB,vso),e(Dn,Fso),e(k,Tso),e(k,Gn),e(Gn,ele),e(ele,Mso),e(Gn,Eso),e(Gn,tB),e(tB,Cso),e(Gn,wso),e(Gn,aB),e(aB,Aso),e(Gn,Lso),e(k,yso),e(k,eh),e(eh,ole),e(ole,xso),e(eh,$so),e(eh,nB),e(nB,kso),e(eh,Sso),e(k,Rso),e(k,On),e(On,rle),e(rle,Pso),e(On,Bso),e(On,sB),e(sB,Iso),e(On,Nso),e(On,lB),e(lB,qso),e(On,jso),e(k,Dso),e(k,oh),e(oh,tle),e(tle,Gso),e(oh,Oso),e(oh,iB),e(iB,Vso),e(oh,Xso),e(k,zso),e(k,rh),e(rh,ale),e(ale,Qso),e(rh,Wso),e(rh,dB),e(dB,Hso),e(rh,Uso),e(k,Jso),e(k,th),e(th,nle),e(nle,Yso),e(th,Kso),e(th,cB),e(cB,Zso),e(th,elo),e(k,olo),e(k,Vn),e(Vn,sle),e(sle,rlo),e(Vn,tlo),e(Vn,mB),e(mB,alo),e(Vn,nlo),e(Vn,fB),e(fB,slo),e(Vn,llo),e(k,ilo),e(k,Xn),e(Xn,lle),e(lle,dlo),e(Xn,clo),e(Xn,gB),e(gB,mlo),e(Xn,flo),e(Xn,hB),e(hB,glo),e(Xn,hlo),e(k,ulo),e(k,zn),e(zn,ile),e(ile,plo),e(zn,_lo),e(zn,uB),e(uB,blo),e(zn,vlo),e(zn,pB),e(pB,Flo),e(zn,Tlo),e(k,Mlo),e(k,ah),e(ah,dle),e(dle,Elo),e(ah,Clo),e(ah,_B),e(_B,wlo),e(ah,Alo),e(k,Llo),e(k,nh),e(nh,cle),e(cle,ylo),e(nh,xlo),e(nh,bB),e(bB,$lo),e(nh,klo),e(k,Slo),e(k,sh),e(sh,mle),e(mle,Rlo),e(sh,Plo),e(sh,vB),e(vB,Blo),e(sh,Ilo),e(k,Nlo),e(k,Qn),e(Qn,fle),e(fle,qlo),e(Qn,jlo),e(Qn,FB),e(FB,Dlo),e(Qn,Glo),e(Qn,TB),e(TB,Olo),e(Qn,Vlo),e(k,Xlo),e(k,lh),e(lh,gle),e(gle,zlo),e(lh,Qlo),e(lh,MB),e(MB,Wlo),e(lh,Hlo),e(k,Ulo),e(k,Wn),e(Wn,hle),e(hle,Jlo),e(Wn,Ylo),e(Wn,EB),e(EB,Klo),e(Wn,Zlo),e(Wn,CB),e(CB,eio),e(Wn,oio),e(k,rio),e(k,Hn),e(Hn,ule),e(ule,tio),e(Hn,aio),e(Hn,wB),e(wB,nio),e(Hn,sio),e(Hn,AB),e(AB,lio),e(Hn,iio),e(k,dio),e(k,Un),e(Un,ple),e(ple,cio),e(Un,mio),e(Un,LB),e(LB,fio),e(Un,gio),e(Un,yB),e(yB,hio),e(Un,uio),e(k,pio),e(k,Jn),e(Jn,_le),e(_le,_io),e(Jn,bio),e(Jn,xB),e(xB,vio),e(Jn,Fio),e(Jn,$B),e($B,Tio),e(Jn,Mio),e(k,Eio),e(k,ih),e(ih,ble),e(ble,Cio),e(ih,wio),e(ih,kB),e(kB,Aio),e(ih,Lio),e(k,yio),e(k,Yn),e(Yn,vle),e(vle,xio),e(Yn,$io),e(Yn,SB),e(SB,kio),e(Yn,Sio),e(Yn,RB),e(RB,Rio),e(Yn,Pio),e(k,Bio),e(k,Kn),e(Kn,Fle),e(Fle,Iio),e(Kn,Nio),e(Kn,PB),e(PB,qio),e(Kn,jio),e(Kn,BB),e(BB,Dio),e(Kn,Gio),e(k,Oio),e(k,Zn),e(Zn,Tle),e(Tle,Vio),e(Zn,Xio),e(Zn,IB),e(IB,zio),e(Zn,Qio),e(Zn,NB),e(NB,Wio),e(Zn,Hio),e(k,Uio),e(k,es),e(es,Mle),e(Mle,Jio),e(es,Yio),e(es,qB),e(qB,Kio),e(es,Zio),e(es,jB),e(jB,edo),e(es,odo),e(k,rdo),e(k,os),e(os,Ele),e(Ele,tdo),e(os,ado),e(os,DB),e(DB,ndo),e(os,sdo),e(os,GB),e(GB,ldo),e(os,ido),e(k,ddo),e(k,rs),e(rs,Cle),e(Cle,cdo),e(rs,mdo),e(rs,OB),e(OB,fdo),e(rs,gdo),e(rs,VB),e(VB,hdo),e(rs,udo),e(k,pdo),e(k,dh),e(dh,wle),e(wle,_do),e(dh,bdo),e(dh,XB),e(XB,vdo),e(dh,Fdo),e(k,Tdo),e(k,ts),e(ts,Ale),e(Ale,Mdo),e(ts,Edo),e(ts,zB),e(zB,Cdo),e(ts,wdo),e(ts,QB),e(QB,Ado),e(ts,Ldo),e(k,ydo),e(k,ch),e(ch,Lle),e(Lle,xdo),e(ch,$do),e(ch,WB),e(WB,kdo),e(ch,Sdo),e(k,Rdo),e(k,as),e(as,yle),e(yle,Pdo),e(as,Bdo),e(as,HB),e(HB,Ido),e(as,Ndo),e(as,UB),e(UB,qdo),e(as,jdo),e(k,Ddo),e(k,ns),e(ns,xle),e(xle,Gdo),e(ns,Odo),e(ns,JB),e(JB,Vdo),e(ns,Xdo),e(ns,YB),e(YB,zdo),e(ns,Qdo),e(k,Wdo),e(k,ss),e(ss,$le),e($le,Hdo),e(ss,Udo),e(ss,KB),e(KB,Jdo),e(ss,Ydo),e(ss,ZB),e(ZB,Kdo),e(ss,Zdo),e(k,eco),e(k,mh),e(mh,kle),e(kle,oco),e(mh,rco),e(mh,eI),e(eI,tco),e(mh,aco),e(k,nco),e(k,ls),e(ls,Sle),e(Sle,sco),e(ls,lco),e(ls,oI),e(oI,ico),e(ls,dco),e(ls,rI),e(rI,cco),e(ls,mco),e(k,fco),e(k,is),e(is,Rle),e(Rle,gco),e(is,hco),e(is,tI),e(tI,uco),e(is,pco),e(is,aI),e(aI,_co),e(is,bco),e(k,vco),e(k,ds),e(ds,Ple),e(Ple,Fco),e(ds,Tco),e(ds,nI),e(nI,Mco),e(ds,Eco),e(ds,sI),e(sI,Cco),e(ds,wco),e(k,Aco),e(k,fh),e(fh,Ble),e(Ble,Lco),e(fh,yco),e(fh,lI),e(lI,xco),e(fh,$co),e(k,kco),e(k,cs),e(cs,Ile),e(Ile,Sco),e(cs,Rco),e(cs,iI),e(iI,Pco),e(cs,Bco),e(cs,dI),e(dI,Ico),e(cs,Nco),e(k,qco),e(k,ms),e(ms,Nle),e(Nle,jco),e(ms,Dco),e(ms,cI),e(cI,Gco),e(ms,Oco),e(ms,mI),e(mI,Vco),e(ms,Xco),e(k,zco),e(k,fs),e(fs,qle),e(qle,Qco),e(fs,Wco),e(fs,fI),e(fI,Hco),e(fs,Uco),e(fs,gI),e(gI,Jco),e(fs,Yco),e(k,Kco),e(k,gs),e(gs,jle),e(jle,Zco),e(gs,emo),e(gs,hI),e(hI,omo),e(gs,rmo),e(gs,uI),e(uI,tmo),e(gs,amo),e(k,nmo),e(k,hs),e(hs,Dle),e(Dle,smo),e(hs,lmo),e(hs,pI),e(pI,imo),e(hs,dmo),e(hs,_I),e(_I,cmo),e(hs,mmo),e(k,fmo),e(k,us),e(us,Gle),e(Gle,gmo),e(us,hmo),e(us,bI),e(bI,umo),e(us,pmo),e(us,vI),e(vI,_mo),e(us,bmo),e(k,vmo),e(k,ps),e(ps,Ole),e(Ole,Fmo),e(ps,Tmo),e(ps,FI),e(FI,Mmo),e(ps,Emo),e(ps,TI),e(TI,Cmo),e(ps,wmo),e(k,Amo),e(k,_s),e(_s,Vle),e(Vle,Lmo),e(_s,ymo),e(_s,MI),e(MI,xmo),e(_s,$mo),e(_s,EI),e(EI,kmo),e(_s,Smo),e(k,Rmo),e(k,gh),e(gh,Xle),e(Xle,Pmo),e(gh,Bmo),e(gh,CI),e(CI,Imo),e(gh,Nmo),e(k,qmo),e(k,bs),e(bs,zle),e(zle,jmo),e(bs,Dmo),e(bs,wI),e(wI,Gmo),e(bs,Omo),e(bs,AI),e(AI,Vmo),e(bs,Xmo),e(k,zmo),e(k,hh),e(hh,Qle),e(Qle,Qmo),e(hh,Wmo),e(hh,LI),e(LI,Hmo),e(hh,Umo),e(k,Jmo),e(k,uh),e(uh,Wle),e(Wle,Ymo),e(uh,Kmo),e(uh,yI),e(yI,Zmo),e(uh,efo),e(k,ofo),e(k,vs),e(vs,Hle),e(Hle,rfo),e(vs,tfo),e(vs,xI),e(xI,afo),e(vs,nfo),e(vs,$I),e($I,sfo),e(vs,lfo),e(k,ifo),e(k,Fs),e(Fs,Ule),e(Ule,dfo),e(Fs,cfo),e(Fs,kI),e(kI,mfo),e(Fs,ffo),e(Fs,SI),e(SI,gfo),e(Fs,hfo),e(k,ufo),e(k,Ts),e(Ts,Jle),e(Jle,pfo),e(Ts,_fo),e(Ts,RI),e(RI,bfo),e(Ts,vfo),e(Ts,PI),e(PI,Ffo),e(Ts,Tfo),e(k,Mfo),e(k,ph),e(ph,Yle),e(Yle,Efo),e(ph,Cfo),e(ph,BI),e(BI,wfo),e(ph,Afo),e(k,Lfo),e(k,Ms),e(Ms,Kle),e(Kle,yfo),e(Ms,xfo),e(Ms,II),e(II,$fo),e(Ms,kfo),e(Ms,NI),e(NI,Sfo),e(Ms,Rfo),e(k,Pfo),e(k,Es),e(Es,Zle),e(Zle,Bfo),e(Es,Ifo),e(Es,qI),e(qI,Nfo),e(Es,qfo),e(Es,jI),e(jI,jfo),e(Es,Dfo),e(k,Gfo),e(k,Cs),e(Cs,eie),e(eie,Ofo),e(Cs,Vfo),e(Cs,DI),e(DI,Xfo),e(Cs,zfo),e(Cs,GI),e(GI,Qfo),e(Cs,Wfo),e(k,Hfo),e(k,ws),e(ws,oie),e(oie,Ufo),e(ws,Jfo),e(ws,OI),e(OI,Yfo),e(ws,Kfo),e(ws,VI),e(VI,Zfo),e(ws,ego),e(k,ogo),e(k,As),e(As,rie),e(rie,rgo),e(As,tgo),e(As,XI),e(XI,ago),e(As,ngo),e(As,zI),e(zI,sgo),e(As,lgo),e(k,igo),e(k,Ls),e(Ls,tie),e(tie,dgo),e(Ls,cgo),e(Ls,QI),e(QI,mgo),e(Ls,fgo),e(Ls,WI),e(WI,ggo),e(Ls,hgo),e(k,ugo),e(k,ys),e(ys,aie),e(aie,pgo),e(ys,_go),e(ys,HI),e(HI,bgo),e(ys,vgo),e(ys,UI),e(UI,Fgo),e(ys,Tgo),e(k,Mgo),e(k,_h),e(_h,nie),e(nie,Ego),e(_h,Cgo),e(_h,JI),e(JI,wgo),e(_h,Ago),e(k,Lgo),e(k,xs),e(xs,sie),e(sie,ygo),e(xs,xgo),e(xs,YI),e(YI,$go),e(xs,kgo),e(xs,KI),e(KI,Sgo),e(xs,Rgo),e(k,Pgo),e(k,bh),e(bh,lie),e(lie,Bgo),e(bh,Igo),e(bh,ZI),e(ZI,Ngo),e(bh,qgo),e(k,jgo),e(k,vh),e(vh,iie),e(iie,Dgo),e(vh,Ggo),e(vh,eN),e(eN,Ogo),e(vh,Vgo),e(k,Xgo),e(k,Fh),e(Fh,die),e(die,zgo),e(Fh,Qgo),e(Fh,oN),e(oN,Wgo),e(Fh,Hgo),e(k,Ugo),e(k,Th),e(Th,cie),e(cie,Jgo),e(Th,Ygo),e(Th,rN),e(rN,Kgo),e(Th,Zgo),e(k,eho),e(k,$s),e($s,mie),e(mie,oho),e($s,rho),e($s,tN),e(tN,tho),e($s,aho),e($s,aN),e(aN,nho),e($s,sho),e(k,lho),e(k,Mh),e(Mh,fie),e(fie,iho),e(Mh,dho),e(Mh,nN),e(nN,cho),e(Mh,mho),e(k,fho),e(k,ks),e(ks,gie),e(gie,gho),e(ks,hho),e(ks,sN),e(sN,uho),e(ks,pho),e(ks,lN),e(lN,_ho),e(ks,bho),e(k,vho),e(k,Ss),e(Ss,hie),e(hie,Fho),e(Ss,Tho),e(Ss,iN),e(iN,Mho),e(Ss,Eho),e(Ss,dN),e(dN,Cho),e(Ss,who),e(k,Aho),e(k,Rs),e(Rs,uie),e(uie,Lho),e(Rs,yho),e(Rs,cN),e(cN,xho),e(Rs,$ho),e(Rs,mN),e(mN,kho),e(Rs,Sho),e(k,Rho),e(k,Ps),e(Ps,pie),e(pie,Pho),e(Ps,Bho),e(Ps,fN),e(fN,Iho),e(Ps,Nho),e(Ps,gN),e(gN,qho),e(Ps,jho),e(k,Dho),e(k,Bs),e(Bs,_ie),e(_ie,Gho),e(Bs,Oho),e(Bs,hN),e(hN,Vho),e(Bs,Xho),e(Bs,uN),e(uN,zho),e(Bs,Qho),e(k,Who),e(k,Is),e(Is,bie),e(bie,Hho),e(Is,Uho),e(Is,pN),e(pN,Jho),e(Is,Yho),e(Is,_N),e(_N,Kho),e(Is,Zho),e(k,euo),e(k,Eh),e(Eh,vie),e(vie,ouo),e(Eh,ruo),e(Eh,bN),e(bN,tuo),e(Eh,auo),e(k,nuo),e(k,Ch),e(Ch,Fie),e(Fie,suo),e(Ch,luo),e(Ch,vN),e(vN,iuo),e(Ch,duo),e(k,cuo),e(k,Ns),e(Ns,Tie),e(Tie,muo),e(Ns,fuo),e(Ns,FN),e(FN,guo),e(Ns,huo),e(Ns,TN),e(TN,uuo),e(Ns,puo),e(k,_uo),e(k,qs),e(qs,Mie),e(Mie,buo),e(qs,vuo),e(qs,MN),e(MN,Fuo),e(qs,Tuo),e(qs,EN),e(EN,Muo),e(qs,Euo),e(k,Cuo),e(k,js),e(js,Eie),e(Eie,wuo),e(js,Auo),e(js,CN),e(CN,Luo),e(js,yuo),e(js,wN),e(wN,xuo),e(js,$uo),e(k,kuo),e(k,wh),e(wh,Cie),e(Cie,Suo),e(wh,Ruo),e(wh,AN),e(AN,Puo),e(wh,Buo),e(k,Iuo),e(k,Ah),e(Ah,wie),e(wie,Nuo),e(Ah,quo),e(Ah,LN),e(LN,juo),e(Ah,Duo),e(k,Guo),e(k,Lh),e(Lh,Aie),e(Aie,Ouo),e(Lh,Vuo),e(Lh,yN),e(yN,Xuo),e(Lh,zuo),e(k,Quo),e(k,Ds),e(Ds,Lie),e(Lie,Wuo),e(Ds,Huo),e(Ds,xN),e(xN,Uuo),e(Ds,Juo),e(Ds,$N),e($N,Yuo),e(Ds,Kuo),e(k,Zuo),e(k,Gs),e(Gs,yie),e(yie,epo),e(Gs,opo),e(Gs,kN),e(kN,rpo),e(Gs,tpo),e(Gs,SN),e(SN,apo),e(Gs,npo),e(k,spo),e(k,yh),e(yh,xie),e(xie,lpo),e(yh,ipo),e(yh,RN),e(RN,dpo),e(yh,cpo),e(k,mpo),e(k,xh),e(xh,$ie),e($ie,fpo),e(xh,gpo),e(xh,PN),e(PN,hpo),e(xh,upo),e(k,ppo),e(k,$h),e($h,kie),e(kie,_po),e($h,bpo),e($h,BN),e(BN,vpo),e($h,Fpo),e(k,Tpo),e(k,Os),e(Os,Sie),e(Sie,Mpo),e(Os,Epo),e(Os,IN),e(IN,Cpo),e(Os,wpo),e(Os,NN),e(NN,Apo),e(Os,Lpo),e(k,ypo),e(k,kh),e(kh,Rie),e(Rie,xpo),e(kh,$po),e(kh,qN),e(qN,kpo),e(kh,Spo),e(k,Rpo),e(k,Sh),e(Sh,Pie),e(Pie,Ppo),e(Sh,Bpo),e(Sh,jN),e(jN,Ipo),e(Sh,Npo),e(k,qpo),e(k,Vs),e(Vs,Bie),e(Bie,jpo),e(Vs,Dpo),e(Vs,DN),e(DN,Gpo),e(Vs,Opo),e(Vs,GN),e(GN,Vpo),e(Vs,Xpo),e(k,zpo),e(k,Xs),e(Xs,Iie),e(Iie,Qpo),e(Xs,Wpo),e(Xs,ON),e(ON,Hpo),e(Xs,Upo),e(Xs,VN),e(VN,Jpo),e(Xs,Ypo),e(k,Kpo),e(k,zs),e(zs,Nie),e(Nie,Zpo),e(zs,e_o),e(zs,XN),e(XN,o_o),e(zs,r_o),e(zs,zN),e(zN,t_o),e(zs,a_o),e(k,n_o),e(k,Qs),e(Qs,qie),e(qie,s_o),e(Qs,l_o),e(Qs,QN),e(QN,i_o),e(Qs,d_o),e(Qs,WN),e(WN,c_o),e(Qs,m_o),e(yr,f_o),M(Rh,yr,null),e(Lo,g_o),e(Lo,Ph),M(_y,Ph,null),e(Ph,h_o),e(Ph,jie),e(jie,u_o),b(m,sXe,_),b(m,qi,_),e(qi,Bh),e(Bh,Die),M(by,Die,null),e(qi,p_o),e(qi,Gie),e(Gie,__o),b(m,lXe,_),b(m,yo,_),M(vy,yo,null),e(yo,b_o),e(yo,Fy),e(Fy,v_o),e(Fy,HN),e(HN,F_o),e(Fy,T_o),e(yo,M_o),e(yo,Ty),e(Ty,E_o),e(Ty,Oie),e(Oie,C_o),e(Ty,w_o),e(yo,A_o),e(yo,Ue),M(My,Ue,null),e(Ue,L_o),e(Ue,Vie),e(Vie,y_o),e(Ue,x_o),e(Ue,Ba),e(Ba,$_o),e(Ba,Xie),e(Xie,k_o),e(Ba,S_o),e(Ba,zie),e(zie,R_o),e(Ba,P_o),e(Ba,Qie),e(Qie,B_o),e(Ba,I_o),e(Ue,N_o),e(Ue,Y),e(Y,Ih),e(Ih,Wie),e(Wie,q_o),e(Ih,j_o),e(Ih,UN),e(UN,D_o),e(Ih,G_o),e(Y,O_o),e(Y,Nh),e(Nh,Hie),e(Hie,V_o),e(Nh,X_o),e(Nh,JN),e(JN,z_o),e(Nh,Q_o),e(Y,W_o),e(Y,qh),e(qh,Uie),e(Uie,H_o),e(qh,U_o),e(qh,YN),e(YN,J_o),e(qh,Y_o),e(Y,K_o),e(Y,jh),e(jh,Jie),e(Jie,Z_o),e(jh,e2o),e(jh,KN),e(KN,o2o),e(jh,r2o),e(Y,t2o),e(Y,Dh),e(Dh,Yie),e(Yie,a2o),e(Dh,n2o),e(Dh,ZN),e(ZN,s2o),e(Dh,l2o),e(Y,i2o),e(Y,Gh),e(Gh,Kie),e(Kie,d2o),e(Gh,c2o),e(Gh,eq),e(eq,m2o),e(Gh,f2o),e(Y,g2o),e(Y,Oh),e(Oh,Zie),e(Zie,h2o),e(Oh,u2o),e(Oh,oq),e(oq,p2o),e(Oh,_2o),e(Y,b2o),e(Y,Vh),e(Vh,ede),e(ede,v2o),e(Vh,F2o),e(Vh,rq),e(rq,T2o),e(Vh,M2o),e(Y,E2o),e(Y,Xh),e(Xh,ode),e(ode,C2o),e(Xh,w2o),e(Xh,tq),e(tq,A2o),e(Xh,L2o),e(Y,y2o),e(Y,zh),e(zh,rde),e(rde,x2o),e(zh,$2o),e(zh,aq),e(aq,k2o),e(zh,S2o),e(Y,R2o),e(Y,Qh),e(Qh,tde),e(tde,P2o),e(Qh,B2o),e(Qh,nq),e(nq,I2o),e(Qh,N2o),e(Y,q2o),e(Y,Wh),e(Wh,ade),e(ade,j2o),e(Wh,D2o),e(Wh,sq),e(sq,G2o),e(Wh,O2o),e(Y,V2o),e(Y,Hh),e(Hh,nde),e(nde,X2o),e(Hh,z2o),e(Hh,lq),e(lq,Q2o),e(Hh,W2o),e(Y,H2o),e(Y,Uh),e(Uh,sde),e(sde,U2o),e(Uh,J2o),e(Uh,iq),e(iq,Y2o),e(Uh,K2o),e(Y,Z2o),e(Y,Jh),e(Jh,lde),e(lde,ebo),e(Jh,obo),e(Jh,dq),e(dq,rbo),e(Jh,tbo),e(Y,abo),e(Y,Yh),e(Yh,ide),e(ide,nbo),e(Yh,sbo),e(Yh,cq),e(cq,lbo),e(Yh,ibo),e(Y,dbo),e(Y,Kh),e(Kh,dde),e(dde,cbo),e(Kh,mbo),e(Kh,mq),e(mq,fbo),e(Kh,gbo),e(Y,hbo),e(Y,Zh),e(Zh,cde),e(cde,ubo),e(Zh,pbo),e(Zh,fq),e(fq,_bo),e(Zh,bbo),e(Y,vbo),e(Y,eu),e(eu,mde),e(mde,Fbo),e(eu,Tbo),e(eu,gq),e(gq,Mbo),e(eu,Ebo),e(Y,Cbo),e(Y,ou),e(ou,fde),e(fde,wbo),e(ou,Abo),e(ou,hq),e(hq,Lbo),e(ou,ybo),e(Y,xbo),e(Y,ru),e(ru,gde),e(gde,$bo),e(ru,kbo),e(ru,uq),e(uq,Sbo),e(ru,Rbo),e(Y,Pbo),e(Y,tu),e(tu,hde),e(hde,Bbo),e(tu,Ibo),e(tu,pq),e(pq,Nbo),e(tu,qbo),e(Y,jbo),e(Y,au),e(au,ude),e(ude,Dbo),e(au,Gbo),e(au,_q),e(_q,Obo),e(au,Vbo),e(Y,Xbo),e(Y,nu),e(nu,pde),e(pde,zbo),e(nu,Qbo),e(nu,bq),e(bq,Wbo),e(nu,Hbo),e(Y,Ubo),e(Y,su),e(su,_de),e(_de,Jbo),e(su,Ybo),e(su,vq),e(vq,Kbo),e(su,Zbo),e(Y,evo),e(Y,lu),e(lu,bde),e(bde,ovo),e(lu,rvo),e(lu,Fq),e(Fq,tvo),e(lu,avo),e(Y,nvo),e(Y,iu),e(iu,vde),e(vde,svo),e(iu,lvo),e(iu,Tq),e(Tq,ivo),e(iu,dvo),e(Y,cvo),e(Y,du),e(du,Fde),e(Fde,mvo),e(du,fvo),e(du,Mq),e(Mq,gvo),e(du,hvo),e(Y,uvo),e(Y,cu),e(cu,Tde),e(Tde,pvo),e(cu,_vo),e(cu,Eq),e(Eq,bvo),e(cu,vvo),e(Y,Fvo),e(Y,mu),e(mu,Mde),e(Mde,Tvo),e(mu,Mvo),e(mu,Cq),e(Cq,Evo),e(mu,Cvo),e(Y,wvo),e(Y,fu),e(fu,Ede),e(Ede,Avo),e(fu,Lvo),e(fu,wq),e(wq,yvo),e(fu,xvo),e(Y,$vo),e(Y,gu),e(gu,Cde),e(Cde,kvo),e(gu,Svo),e(gu,Aq),e(Aq,Rvo),e(gu,Pvo),e(Y,Bvo),e(Y,hu),e(hu,wde),e(wde,Ivo),e(hu,Nvo),e(hu,Lq),e(Lq,qvo),e(hu,jvo),e(Y,Dvo),e(Y,uu),e(uu,Ade),e(Ade,Gvo),e(uu,Ovo),e(uu,yq),e(yq,Vvo),e(uu,Xvo),e(Ue,zvo),M(pu,Ue,null),e(Ue,Qvo),M(_u,Ue,null),e(yo,Wvo),e(yo,bu),M(Ey,bu,null),e(bu,Hvo),e(bu,Lde),e(Lde,Uvo),b(m,iXe,_),b(m,ji,_),e(ji,vu),e(vu,yde),M(Cy,yde,null),e(ji,Jvo),e(ji,xde),e(xde,Yvo),b(m,dXe,_),b(m,xo,_),M(wy,xo,null),e(xo,Kvo),e(xo,Ay),e(Ay,Zvo),e(Ay,xq),e(xq,e1o),e(Ay,o1o),e(xo,r1o),e(xo,Ly),e(Ly,t1o),e(Ly,$de),e($de,a1o),e(Ly,n1o),e(xo,s1o),e(xo,Je),M(yy,Je,null),e(Je,l1o),e(Je,kde),e(kde,i1o),e(Je,d1o),e(Je,Di),e(Di,c1o),e(Di,Sde),e(Sde,m1o),e(Di,f1o),e(Di,Rde),e(Rde,g1o),e(Di,h1o),e(Je,u1o),e(Je,he),e(he,Fu),e(Fu,Pde),e(Pde,p1o),e(Fu,_1o),e(Fu,$q),e($q,b1o),e(Fu,v1o),e(he,F1o),e(he,Tu),e(Tu,Bde),e(Bde,T1o),e(Tu,M1o),e(Tu,Ide),e(Ide,E1o),e(Tu,C1o),e(he,w1o),e(he,Mu),e(Mu,Nde),e(Nde,A1o),e(Mu,L1o),e(Mu,kq),e(kq,y1o),e(Mu,x1o),e(he,$1o),e(he,Eu),e(Eu,qde),e(qde,k1o),e(Eu,S1o),e(Eu,Sq),e(Sq,R1o),e(Eu,P1o),e(he,B1o),e(he,Cu),e(Cu,jde),e(jde,I1o),e(Cu,N1o),e(Cu,Rq),e(Rq,q1o),e(Cu,j1o),e(he,D1o),e(he,wu),e(wu,Dde),e(Dde,G1o),e(wu,O1o),e(wu,Pq),e(Pq,V1o),e(wu,X1o),e(he,z1o),e(he,Au),e(Au,Gde),e(Gde,Q1o),e(Au,W1o),e(Au,Bq),e(Bq,H1o),e(Au,U1o),e(he,J1o),e(he,Lu),e(Lu,Ode),e(Ode,Y1o),e(Lu,K1o),e(Lu,Iq),e(Iq,Z1o),e(Lu,eFo),e(he,oFo),e(he,yu),e(yu,Vde),e(Vde,rFo),e(yu,tFo),e(yu,Nq),e(Nq,aFo),e(yu,nFo),e(he,sFo),e(he,xu),e(xu,Xde),e(Xde,lFo),e(xu,iFo),e(xu,qq),e(qq,dFo),e(xu,cFo),e(he,mFo),e(he,$u),e($u,zde),e(zde,fFo),e($u,gFo),e($u,jq),e(jq,hFo),e($u,uFo),e(he,pFo),e(he,ku),e(ku,Qde),e(Qde,_Fo),e(ku,bFo),e(ku,Dq),e(Dq,vFo),e(ku,FFo),e(he,TFo),e(he,Su),e(Su,Wde),e(Wde,MFo),e(Su,EFo),e(Su,Gq),e(Gq,CFo),e(Su,wFo),e(he,AFo),e(he,Ru),e(Ru,Hde),e(Hde,LFo),e(Ru,yFo),e(Ru,Oq),e(Oq,xFo),e(Ru,$Fo),e(he,kFo),e(he,Pu),e(Pu,Ude),e(Ude,SFo),e(Pu,RFo),e(Pu,Vq),e(Vq,PFo),e(Pu,BFo),e(he,IFo),e(he,Bu),e(Bu,Jde),e(Jde,NFo),e(Bu,qFo),e(Bu,Xq),e(Xq,jFo),e(Bu,DFo),e(he,GFo),e(he,Iu),e(Iu,Yde),e(Yde,OFo),e(Iu,VFo),e(Iu,zq),e(zq,XFo),e(Iu,zFo),e(he,QFo),e(he,Nu),e(Nu,Kde),e(Kde,WFo),e(Nu,HFo),e(Nu,Qq),e(Qq,UFo),e(Nu,JFo),e(Je,YFo),M(qu,Je,null),e(Je,KFo),M(ju,Je,null),e(xo,ZFo),e(xo,Du),M(xy,Du,null),e(Du,eTo),e(Du,Zde),e(Zde,oTo),b(m,cXe,_),b(m,Gi,_),e(Gi,Gu),e(Gu,ece),M($y,ece,null),e(Gi,rTo),e(Gi,oce),e(oce,tTo),b(m,mXe,_),b(m,$o,_),M(ky,$o,null),e($o,aTo),e($o,Oi),e(Oi,nTo),e(Oi,Wq),e(Wq,sTo),e(Oi,lTo),e(Oi,Hq),e(Hq,iTo),e(Oi,dTo),e($o,cTo),e($o,Sy),e(Sy,mTo),e(Sy,rce),e(rce,fTo),e(Sy,gTo),e($o,hTo),e($o,it),M(Ry,it,null),e(it,uTo),e(it,tce),e(tce,pTo),e(it,_To),e(it,Vi),e(Vi,bTo),e(Vi,ace),e(ace,vTo),e(Vi,FTo),e(Vi,Uq),e(Uq,TTo),e(Vi,MTo),e(it,ETo),M(Ou,it,null),e($o,CTo),e($o,Ye),M(Py,Ye,null),e(Ye,wTo),e(Ye,nce),e(nce,ATo),e(Ye,LTo),e(Ye,Ia),e(Ia,yTo),e(Ia,sce),e(sce,xTo),e(Ia,$To),e(Ia,lce),e(lce,kTo),e(Ia,STo),e(Ia,ice),e(ice,RTo),e(Ia,PTo),e(Ye,BTo),e(Ye,y),e(y,Vu),e(Vu,dce),e(dce,ITo),e(Vu,NTo),e(Vu,Jq),e(Jq,qTo),e(Vu,jTo),e(y,DTo),e(y,Xu),e(Xu,cce),e(cce,GTo),e(Xu,OTo),e(Xu,Yq),e(Yq,VTo),e(Xu,XTo),e(y,zTo),e(y,zu),e(zu,mce),e(mce,QTo),e(zu,WTo),e(zu,Kq),e(Kq,HTo),e(zu,UTo),e(y,JTo),e(y,Qu),e(Qu,fce),e(fce,YTo),e(Qu,KTo),e(Qu,Zq),e(Zq,ZTo),e(Qu,eMo),e(y,oMo),e(y,Wu),e(Wu,gce),e(gce,rMo),e(Wu,tMo),e(Wu,ej),e(ej,aMo),e(Wu,nMo),e(y,sMo),e(y,Hu),e(Hu,hce),e(hce,lMo),e(Hu,iMo),e(Hu,oj),e(oj,dMo),e(Hu,cMo),e(y,mMo),e(y,Uu),e(Uu,uce),e(uce,fMo),e(Uu,gMo),e(Uu,rj),e(rj,hMo),e(Uu,uMo),e(y,pMo),e(y,Ju),e(Ju,pce),e(pce,_Mo),e(Ju,bMo),e(Ju,tj),e(tj,vMo),e(Ju,FMo),e(y,TMo),e(y,Yu),e(Yu,_ce),e(_ce,MMo),e(Yu,EMo),e(Yu,aj),e(aj,CMo),e(Yu,wMo),e(y,AMo),e(y,Ku),e(Ku,bce),e(bce,LMo),e(Ku,yMo),e(Ku,nj),e(nj,xMo),e(Ku,$Mo),e(y,kMo),e(y,Zu),e(Zu,vce),e(vce,SMo),e(Zu,RMo),e(Zu,sj),e(sj,PMo),e(Zu,BMo),e(y,IMo),e(y,ep),e(ep,Fce),e(Fce,NMo),e(ep,qMo),e(ep,lj),e(lj,jMo),e(ep,DMo),e(y,GMo),e(y,op),e(op,Tce),e(Tce,OMo),e(op,VMo),e(op,ij),e(ij,XMo),e(op,zMo),e(y,QMo),e(y,rp),e(rp,Mce),e(Mce,WMo),e(rp,HMo),e(rp,dj),e(dj,UMo),e(rp,JMo),e(y,YMo),e(y,tp),e(tp,Ece),e(Ece,KMo),e(tp,ZMo),e(tp,cj),e(cj,e4o),e(tp,o4o),e(y,r4o),e(y,ap),e(ap,Cce),e(Cce,t4o),e(ap,a4o),e(ap,mj),e(mj,n4o),e(ap,s4o),e(y,l4o),e(y,np),e(np,wce),e(wce,i4o),e(np,d4o),e(np,fj),e(fj,c4o),e(np,m4o),e(y,f4o),e(y,sp),e(sp,Ace),e(Ace,g4o),e(sp,h4o),e(sp,gj),e(gj,u4o),e(sp,p4o),e(y,_4o),e(y,lp),e(lp,Lce),e(Lce,b4o),e(lp,v4o),e(lp,hj),e(hj,F4o),e(lp,T4o),e(y,M4o),e(y,ip),e(ip,yce),e(yce,E4o),e(ip,C4o),e(ip,uj),e(uj,w4o),e(ip,A4o),e(y,L4o),e(y,dp),e(dp,xce),e(xce,y4o),e(dp,x4o),e(dp,pj),e(pj,$4o),e(dp,k4o),e(y,S4o),e(y,cp),e(cp,$ce),e($ce,R4o),e(cp,P4o),e(cp,_j),e(_j,B4o),e(cp,I4o),e(y,N4o),e(y,mp),e(mp,kce),e(kce,q4o),e(mp,j4o),e(mp,bj),e(bj,D4o),e(mp,G4o),e(y,O4o),e(y,fp),e(fp,Sce),e(Sce,V4o),e(fp,X4o),e(fp,vj),e(vj,z4o),e(fp,Q4o),e(y,W4o),e(y,gp),e(gp,Rce),e(Rce,H4o),e(gp,U4o),e(gp,Fj),e(Fj,J4o),e(gp,Y4o),e(y,K4o),e(y,hp),e(hp,Pce),e(Pce,Z4o),e(hp,eEo),e(hp,Tj),e(Tj,oEo),e(hp,rEo),e(y,tEo),e(y,up),e(up,Bce),e(Bce,aEo),e(up,nEo),e(up,Mj),e(Mj,sEo),e(up,lEo),e(y,iEo),e(y,pp),e(pp,Ice),e(Ice,dEo),e(pp,cEo),e(pp,Ej),e(Ej,mEo),e(pp,fEo),e(y,gEo),e(y,_p),e(_p,Nce),e(Nce,hEo),e(_p,uEo),e(_p,Cj),e(Cj,pEo),e(_p,_Eo),e(y,bEo),e(y,bp),e(bp,qce),e(qce,vEo),e(bp,FEo),e(bp,wj),e(wj,TEo),e(bp,MEo),e(y,EEo),e(y,vp),e(vp,jce),e(jce,CEo),e(vp,wEo),e(vp,Aj),e(Aj,AEo),e(vp,LEo),e(y,yEo),e(y,Fp),e(Fp,Dce),e(Dce,xEo),e(Fp,$Eo),e(Fp,Lj),e(Lj,kEo),e(Fp,SEo),e(y,REo),e(y,Tp),e(Tp,Gce),e(Gce,PEo),e(Tp,BEo),e(Tp,yj),e(yj,IEo),e(Tp,NEo),e(y,qEo),e(y,Mp),e(Mp,Oce),e(Oce,jEo),e(Mp,DEo),e(Mp,xj),e(xj,GEo),e(Mp,OEo),e(y,VEo),e(y,Ws),e(Ws,Vce),e(Vce,XEo),e(Ws,zEo),e(Ws,$j),e($j,QEo),e(Ws,WEo),e(Ws,kj),e(kj,HEo),e(Ws,UEo),e(y,JEo),e(y,Ep),e(Ep,Xce),e(Xce,YEo),e(Ep,KEo),e(Ep,Sj),e(Sj,ZEo),e(Ep,eCo),e(y,oCo),e(y,Cp),e(Cp,zce),e(zce,rCo),e(Cp,tCo),e(Cp,Rj),e(Rj,aCo),e(Cp,nCo),e(y,sCo),e(y,wp),e(wp,Qce),e(Qce,lCo),e(wp,iCo),e(wp,Pj),e(Pj,dCo),e(wp,cCo),e(y,mCo),e(y,Ap),e(Ap,Wce),e(Wce,fCo),e(Ap,gCo),e(Ap,Bj),e(Bj,hCo),e(Ap,uCo),e(y,pCo),e(y,Lp),e(Lp,Hce),e(Hce,_Co),e(Lp,bCo),e(Lp,Ij),e(Ij,vCo),e(Lp,FCo),e(y,TCo),e(y,yp),e(yp,Uce),e(Uce,MCo),e(yp,ECo),e(yp,Nj),e(Nj,CCo),e(yp,wCo),e(y,ACo),e(y,xp),e(xp,Jce),e(Jce,LCo),e(xp,yCo),e(xp,qj),e(qj,xCo),e(xp,$Co),e(y,kCo),e(y,$p),e($p,Yce),e(Yce,SCo),e($p,RCo),e($p,jj),e(jj,PCo),e($p,BCo),e(y,ICo),e(y,kp),e(kp,Kce),e(Kce,NCo),e(kp,qCo),e(kp,Dj),e(Dj,jCo),e(kp,DCo),e(y,GCo),e(y,Sp),e(Sp,Zce),e(Zce,OCo),e(Sp,VCo),e(Sp,Gj),e(Gj,XCo),e(Sp,zCo),e(y,QCo),e(y,Rp),e(Rp,eme),e(eme,WCo),e(Rp,HCo),e(Rp,Oj),e(Oj,UCo),e(Rp,JCo),e(y,YCo),e(y,Pp),e(Pp,ome),e(ome,KCo),e(Pp,ZCo),e(Pp,Vj),e(Vj,e3o),e(Pp,o3o),e(y,r3o),e(y,Bp),e(Bp,rme),e(rme,t3o),e(Bp,a3o),e(Bp,Xj),e(Xj,n3o),e(Bp,s3o),e(y,l3o),e(y,Ip),e(Ip,tme),e(tme,i3o),e(Ip,d3o),e(Ip,zj),e(zj,c3o),e(Ip,m3o),e(y,f3o),e(y,Np),e(Np,ame),e(ame,g3o),e(Np,h3o),e(Np,Qj),e(Qj,u3o),e(Np,p3o),e(y,_3o),e(y,qp),e(qp,nme),e(nme,b3o),e(qp,v3o),e(qp,Wj),e(Wj,F3o),e(qp,T3o),e(y,M3o),e(y,jp),e(jp,sme),e(sme,E3o),e(jp,C3o),e(jp,Hj),e(Hj,w3o),e(jp,A3o),e(y,L3o),e(y,Dp),e(Dp,lme),e(lme,y3o),e(Dp,x3o),e(Dp,Uj),e(Uj,$3o),e(Dp,k3o),e(y,S3o),e(y,Gp),e(Gp,ime),e(ime,R3o),e(Gp,P3o),e(Gp,Jj),e(Jj,B3o),e(Gp,I3o),e(y,N3o),e(y,Op),e(Op,dme),e(dme,q3o),e(Op,j3o),e(Op,Yj),e(Yj,D3o),e(Op,G3o),e(y,O3o),e(y,Vp),e(Vp,cme),e(cme,V3o),e(Vp,X3o),e(Vp,Kj),e(Kj,z3o),e(Vp,Q3o),e(y,W3o),e(y,Xp),e(Xp,mme),e(mme,H3o),e(Xp,U3o),e(Xp,Zj),e(Zj,J3o),e(Xp,Y3o),e(y,K3o),e(y,zp),e(zp,fme),e(fme,Z3o),e(zp,e5o),e(zp,eD),e(eD,o5o),e(zp,r5o),e(y,t5o),e(y,Qp),e(Qp,gme),e(gme,a5o),e(Qp,n5o),e(Qp,oD),e(oD,s5o),e(Qp,l5o),e(y,i5o),e(y,Wp),e(Wp,hme),e(hme,d5o),e(Wp,c5o),e(Wp,rD),e(rD,m5o),e(Wp,f5o),e(y,g5o),e(y,Hp),e(Hp,ume),e(ume,h5o),e(Hp,u5o),e(Hp,tD),e(tD,p5o),e(Hp,_5o),e(y,b5o),e(y,Up),e(Up,pme),e(pme,v5o),e(Up,F5o),e(Up,aD),e(aD,T5o),e(Up,M5o),e(y,E5o),e(y,Jp),e(Jp,_me),e(_me,C5o),e(Jp,w5o),e(Jp,nD),e(nD,A5o),e(Jp,L5o),e(y,y5o),e(y,Yp),e(Yp,bme),e(bme,x5o),e(Yp,$5o),e(Yp,sD),e(sD,k5o),e(Yp,S5o),e(y,R5o),e(y,Kp),e(Kp,vme),e(vme,P5o),e(Kp,B5o),e(Kp,lD),e(lD,I5o),e(Kp,N5o),e(y,q5o),e(y,Zp),e(Zp,Fme),e(Fme,j5o),e(Zp,D5o),e(Zp,iD),e(iD,G5o),e(Zp,O5o),e(y,V5o),e(y,e_),e(e_,Tme),e(Tme,X5o),e(e_,z5o),e(e_,dD),e(dD,Q5o),e(e_,W5o),e(y,H5o),e(y,o_),e(o_,Mme),e(Mme,U5o),e(o_,J5o),e(o_,cD),e(cD,Y5o),e(o_,K5o),e(y,Z5o),e(y,r_),e(r_,Eme),e(Eme,e0o),e(r_,o0o),e(r_,mD),e(mD,r0o),e(r_,t0o),e(y,a0o),e(y,t_),e(t_,Cme),e(Cme,n0o),e(t_,s0o),e(t_,fD),e(fD,l0o),e(t_,i0o),e(y,d0o),e(y,a_),e(a_,wme),e(wme,c0o),e(a_,m0o),e(a_,gD),e(gD,f0o),e(a_,g0o),e(y,h0o),e(y,n_),e(n_,Ame),e(Ame,u0o),e(n_,p0o),e(n_,hD),e(hD,_0o),e(n_,b0o),e(y,v0o),e(y,s_),e(s_,Lme),e(Lme,F0o),e(s_,T0o),e(s_,uD),e(uD,M0o),e(s_,E0o),e(y,C0o),e(y,l_),e(l_,yme),e(yme,w0o),e(l_,A0o),e(l_,pD),e(pD,L0o),e(l_,y0o),e(y,x0o),e(y,i_),e(i_,xme),e(xme,$0o),e(i_,k0o),e(i_,_D),e(_D,S0o),e(i_,R0o),e(y,P0o),e(y,d_),e(d_,$me),e($me,B0o),e(d_,I0o),e(d_,bD),e(bD,N0o),e(d_,q0o),e(y,j0o),e(y,c_),e(c_,kme),e(kme,D0o),e(c_,G0o),e(c_,vD),e(vD,O0o),e(c_,V0o),e(y,X0o),e(y,m_),e(m_,Sme),e(Sme,z0o),e(m_,Q0o),e(m_,FD),e(FD,W0o),e(m_,H0o),e(y,U0o),e(y,f_),e(f_,Rme),e(Rme,J0o),e(f_,Y0o),e(f_,TD),e(TD,K0o),e(f_,Z0o),e(y,ewo),e(y,g_),e(g_,Pme),e(Pme,owo),e(g_,rwo),e(g_,MD),e(MD,two),e(g_,awo),e(y,nwo),e(y,h_),e(h_,Bme),e(Bme,swo),e(h_,lwo),e(h_,ED),e(ED,iwo),e(h_,dwo),e(y,cwo),e(y,u_),e(u_,Ime),e(Ime,mwo),e(u_,fwo),e(u_,CD),e(CD,gwo),e(u_,hwo),e(y,uwo),e(y,p_),e(p_,Nme),e(Nme,pwo),e(p_,_wo),e(p_,wD),e(wD,bwo),e(p_,vwo),e(y,Fwo),e(y,__),e(__,qme),e(qme,Two),e(__,Mwo),e(__,AD),e(AD,Ewo),e(__,Cwo),e(y,wwo),e(y,b_),e(b_,jme),e(jme,Awo),e(b_,Lwo),e(b_,LD),e(LD,ywo),e(b_,xwo),e(y,$wo),e(y,v_),e(v_,Dme),e(Dme,kwo),e(v_,Swo),e(v_,yD),e(yD,Rwo),e(v_,Pwo),e(y,Bwo),e(y,F_),e(F_,Gme),e(Gme,Iwo),e(F_,Nwo),e(F_,xD),e(xD,qwo),e(F_,jwo),e(y,Dwo),e(y,T_),e(T_,Ome),e(Ome,Gwo),e(T_,Owo),e(T_,$D),e($D,Vwo),e(T_,Xwo),e(y,zwo),e(y,M_),e(M_,Vme),e(Vme,Qwo),e(M_,Wwo),e(M_,kD),e(kD,Hwo),e(M_,Uwo),e(y,Jwo),e(y,E_),e(E_,Xme),e(Xme,Ywo),e(E_,Kwo),e(E_,SD),e(SD,Zwo),e(E_,eAo),e(y,oAo),e(y,C_),e(C_,zme),e(zme,rAo),e(C_,tAo),e(C_,RD),e(RD,aAo),e(C_,nAo),e(y,sAo),e(y,w_),e(w_,Qme),e(Qme,lAo),e(w_,iAo),e(w_,PD),e(PD,dAo),e(w_,cAo),e(y,mAo),e(y,A_),e(A_,Wme),e(Wme,fAo),e(A_,gAo),e(A_,BD),e(BD,hAo),e(A_,uAo),e(y,pAo),e(y,L_),e(L_,Hme),e(Hme,_Ao),e(L_,bAo),e(L_,ID),e(ID,vAo),e(L_,FAo),e(y,TAo),e(y,y_),e(y_,Ume),e(Ume,MAo),e(y_,EAo),e(y_,ND),e(ND,CAo),e(y_,wAo),e(y,AAo),e(y,x_),e(x_,Jme),e(Jme,LAo),e(x_,yAo),e(x_,qD),e(qD,xAo),e(x_,$Ao),e(y,kAo),e(y,$_),e($_,Yme),e(Yme,SAo),e($_,RAo),e($_,jD),e(jD,PAo),e($_,BAo),e(y,IAo),e(y,k_),e(k_,Kme),e(Kme,NAo),e(k_,qAo),e(k_,DD),e(DD,jAo),e(k_,DAo),e(y,GAo),e(y,S_),e(S_,Zme),e(Zme,OAo),e(S_,VAo),e(S_,GD),e(GD,XAo),e(S_,zAo),e(y,QAo),e(y,R_),e(R_,efe),e(efe,WAo),e(R_,HAo),e(R_,OD),e(OD,UAo),e(R_,JAo),e(y,YAo),e(y,P_),e(P_,ofe),e(ofe,KAo),e(P_,ZAo),e(P_,VD),e(VD,e6o),e(P_,o6o),e(y,r6o),e(y,B_),e(B_,rfe),e(rfe,t6o),e(B_,a6o),e(B_,XD),e(XD,n6o),e(B_,s6o),e(y,l6o),e(y,I_),e(I_,tfe),e(tfe,i6o),e(I_,d6o),e(I_,zD),e(zD,c6o),e(I_,m6o),e(y,f6o),e(y,N_),e(N_,afe),e(afe,g6o),e(N_,h6o),e(N_,QD),e(QD,u6o),e(N_,p6o),e(y,_6o),e(y,q_),e(q_,nfe),e(nfe,b6o),e(q_,v6o),e(q_,WD),e(WD,F6o),e(q_,T6o),e(y,M6o),e(y,j_),e(j_,sfe),e(sfe,E6o),e(j_,C6o),e(j_,HD),e(HD,w6o),e(j_,A6o),e(y,L6o),e(y,D_),e(D_,lfe),e(lfe,y6o),e(D_,x6o),e(D_,UD),e(UD,$6o),e(D_,k6o),e(y,S6o),e(y,G_),e(G_,ife),e(ife,R6o),e(G_,P6o),e(G_,JD),e(JD,B6o),e(G_,I6o),e(y,N6o),e(y,O_),e(O_,dfe),e(dfe,q6o),e(O_,j6o),e(O_,YD),e(YD,D6o),e(O_,G6o),e(y,O6o),e(y,V_),e(V_,cfe),e(cfe,V6o),e(V_,X6o),e(V_,KD),e(KD,z6o),e(V_,Q6o),e(y,W6o),e(y,X_),e(X_,mfe),e(mfe,H6o),e(X_,U6o),e(X_,ZD),e(ZD,J6o),e(X_,Y6o),e(Ye,K6o),e(Ye,z_),e(z_,Z6o),e(z_,ffe),e(ffe,e7o),e(z_,o7o),e(z_,gfe),e(gfe,r7o),e(Ye,t7o),M(Q_,Ye,null),b(m,fXe,_),b(m,Xi,_),e(Xi,W_),e(W_,hfe),M(By,hfe,null),e(Xi,a7o),e(Xi,ufe),e(ufe,n7o),b(m,gXe,_),b(m,ko,_),M(Iy,ko,null),e(ko,s7o),e(ko,zi),e(zi,l7o),e(zi,eG),e(eG,i7o),e(zi,d7o),e(zi,oG),e(oG,c7o),e(zi,m7o),e(ko,f7o),e(ko,Ny),e(Ny,g7o),e(Ny,pfe),e(pfe,h7o),e(Ny,u7o),e(ko,p7o),e(ko,dt),M(qy,dt,null),e(dt,_7o),e(dt,_fe),e(_fe,b7o),e(dt,v7o),e(dt,Qi),e(Qi,F7o),e(Qi,bfe),e(bfe,T7o),e(Qi,M7o),e(Qi,rG),e(rG,E7o),e(Qi,C7o),e(dt,w7o),M(H_,dt,null),e(ko,A7o),e(ko,Ke),M(jy,Ke,null),e(Ke,L7o),e(Ke,vfe),e(vfe,y7o),e(Ke,x7o),e(Ke,Na),e(Na,$7o),e(Na,Ffe),e(Ffe,k7o),e(Na,S7o),e(Na,Tfe),e(Tfe,R7o),e(Na,P7o),e(Na,Mfe),e(Mfe,B7o),e(Na,I7o),e(Ke,N7o),e(Ke,G),e(G,U_),e(U_,Efe),e(Efe,q7o),e(U_,j7o),e(U_,tG),e(tG,D7o),e(U_,G7o),e(G,O7o),e(G,J_),e(J_,Cfe),e(Cfe,V7o),e(J_,X7o),e(J_,aG),e(aG,z7o),e(J_,Q7o),e(G,W7o),e(G,Y_),e(Y_,wfe),e(wfe,H7o),e(Y_,U7o),e(Y_,nG),e(nG,J7o),e(Y_,Y7o),e(G,K7o),e(G,K_),e(K_,Afe),e(Afe,Z7o),e(K_,eLo),e(K_,sG),e(sG,oLo),e(K_,rLo),e(G,tLo),e(G,Z_),e(Z_,Lfe),e(Lfe,aLo),e(Z_,nLo),e(Z_,lG),e(lG,sLo),e(Z_,lLo),e(G,iLo),e(G,e2),e(e2,yfe),e(yfe,dLo),e(e2,cLo),e(e2,iG),e(iG,mLo),e(e2,fLo),e(G,gLo),e(G,o2),e(o2,xfe),e(xfe,hLo),e(o2,uLo),e(o2,dG),e(dG,pLo),e(o2,_Lo),e(G,bLo),e(G,r2),e(r2,$fe),e($fe,vLo),e(r2,FLo),e(r2,cG),e(cG,TLo),e(r2,MLo),e(G,ELo),e(G,t2),e(t2,kfe),e(kfe,CLo),e(t2,wLo),e(t2,mG),e(mG,ALo),e(t2,LLo),e(G,yLo),e(G,a2),e(a2,Sfe),e(Sfe,xLo),e(a2,$Lo),e(a2,fG),e(fG,kLo),e(a2,SLo),e(G,RLo),e(G,n2),e(n2,Rfe),e(Rfe,PLo),e(n2,BLo),e(n2,gG),e(gG,ILo),e(n2,NLo),e(G,qLo),e(G,s2),e(s2,Pfe),e(Pfe,jLo),e(s2,DLo),e(s2,hG),e(hG,GLo),e(s2,OLo),e(G,VLo),e(G,l2),e(l2,Bfe),e(Bfe,XLo),e(l2,zLo),e(l2,uG),e(uG,QLo),e(l2,WLo),e(G,HLo),e(G,i2),e(i2,Ife),e(Ife,ULo),e(i2,JLo),e(i2,pG),e(pG,YLo),e(i2,KLo),e(G,ZLo),e(G,d2),e(d2,Nfe),e(Nfe,eyo),e(d2,oyo),e(d2,_G),e(_G,ryo),e(d2,tyo),e(G,ayo),e(G,c2),e(c2,qfe),e(qfe,nyo),e(c2,syo),e(c2,bG),e(bG,lyo),e(c2,iyo),e(G,dyo),e(G,m2),e(m2,jfe),e(jfe,cyo),e(m2,myo),e(m2,vG),e(vG,fyo),e(m2,gyo),e(G,hyo),e(G,f2),e(f2,Dfe),e(Dfe,uyo),e(f2,pyo),e(f2,FG),e(FG,_yo),e(f2,byo),e(G,vyo),e(G,g2),e(g2,Gfe),e(Gfe,Fyo),e(g2,Tyo),e(g2,TG),e(TG,Myo),e(g2,Eyo),e(G,Cyo),e(G,h2),e(h2,Ofe),e(Ofe,wyo),e(h2,Ayo),e(h2,MG),e(MG,Lyo),e(h2,yyo),e(G,xyo),e(G,u2),e(u2,Vfe),e(Vfe,$yo),e(u2,kyo),e(u2,EG),e(EG,Syo),e(u2,Ryo),e(G,Pyo),e(G,p2),e(p2,Xfe),e(Xfe,Byo),e(p2,Iyo),e(p2,CG),e(CG,Nyo),e(p2,qyo),e(G,jyo),e(G,_2),e(_2,zfe),e(zfe,Dyo),e(_2,Gyo),e(_2,wG),e(wG,Oyo),e(_2,Vyo),e(G,Xyo),e(G,b2),e(b2,Qfe),e(Qfe,zyo),e(b2,Qyo),e(b2,AG),e(AG,Wyo),e(b2,Hyo),e(G,Uyo),e(G,v2),e(v2,Wfe),e(Wfe,Jyo),e(v2,Yyo),e(v2,LG),e(LG,Kyo),e(v2,Zyo),e(G,e8o),e(G,F2),e(F2,Hfe),e(Hfe,o8o),e(F2,r8o),e(F2,yG),e(yG,t8o),e(F2,a8o),e(G,n8o),e(G,T2),e(T2,Ufe),e(Ufe,s8o),e(T2,l8o),e(T2,xG),e(xG,i8o),e(T2,d8o),e(G,c8o),e(G,M2),e(M2,Jfe),e(Jfe,m8o),e(M2,f8o),e(M2,$G),e($G,g8o),e(M2,h8o),e(G,u8o),e(G,E2),e(E2,Yfe),e(Yfe,p8o),e(E2,_8o),e(E2,kG),e(kG,b8o),e(E2,v8o),e(G,F8o),e(G,C2),e(C2,Kfe),e(Kfe,T8o),e(C2,M8o),e(C2,SG),e(SG,E8o),e(C2,C8o),e(G,w8o),e(G,w2),e(w2,Zfe),e(Zfe,A8o),e(w2,L8o),e(w2,RG),e(RG,y8o),e(w2,x8o),e(G,$8o),e(G,A2),e(A2,ege),e(ege,k8o),e(A2,S8o),e(A2,PG),e(PG,R8o),e(A2,P8o),e(G,B8o),e(G,L2),e(L2,oge),e(oge,I8o),e(L2,N8o),e(L2,BG),e(BG,q8o),e(L2,j8o),e(G,D8o),e(G,y2),e(y2,rge),e(rge,G8o),e(y2,O8o),e(y2,IG),e(IG,V8o),e(y2,X8o),e(G,z8o),e(G,x2),e(x2,tge),e(tge,Q8o),e(x2,W8o),e(x2,NG),e(NG,H8o),e(x2,U8o),e(G,J8o),e(G,$2),e($2,age),e(age,Y8o),e($2,K8o),e($2,qG),e(qG,Z8o),e($2,e9o),e(G,o9o),e(G,k2),e(k2,nge),e(nge,r9o),e(k2,t9o),e(k2,jG),e(jG,a9o),e(k2,n9o),e(G,s9o),e(G,S2),e(S2,sge),e(sge,l9o),e(S2,i9o),e(S2,DG),e(DG,d9o),e(S2,c9o),e(G,m9o),e(G,R2),e(R2,lge),e(lge,f9o),e(R2,g9o),e(R2,GG),e(GG,h9o),e(R2,u9o),e(G,p9o),e(G,P2),e(P2,ige),e(ige,_9o),e(P2,b9o),e(P2,OG),e(OG,v9o),e(P2,F9o),e(G,T9o),e(G,B2),e(B2,dge),e(dge,M9o),e(B2,E9o),e(B2,VG),e(VG,C9o),e(B2,w9o),e(G,A9o),e(G,I2),e(I2,cge),e(cge,L9o),e(I2,y9o),e(I2,XG),e(XG,x9o),e(I2,$9o),e(G,k9o),e(G,N2),e(N2,mge),e(mge,S9o),e(N2,R9o),e(N2,zG),e(zG,P9o),e(N2,B9o),e(G,I9o),e(G,q2),e(q2,fge),e(fge,N9o),e(q2,q9o),e(q2,QG),e(QG,j9o),e(q2,D9o),e(G,G9o),e(G,j2),e(j2,gge),e(gge,O9o),e(j2,V9o),e(j2,WG),e(WG,X9o),e(j2,z9o),e(Ke,Q9o),e(Ke,D2),e(D2,W9o),e(D2,hge),e(hge,H9o),e(D2,U9o),e(D2,uge),e(uge,J9o),e(Ke,Y9o),M(G2,Ke,null),b(m,hXe,_),b(m,Wi,_),e(Wi,O2),e(O2,pge),M(Dy,pge,null),e(Wi,K9o),e(Wi,_ge),e(_ge,Z9o),b(m,uXe,_),b(m,So,_),M(Gy,So,null),e(So,exo),e(So,Hi),e(Hi,oxo),e(Hi,HG),e(HG,rxo),e(Hi,txo),e(Hi,UG),e(UG,axo),e(Hi,nxo),e(So,sxo),e(So,Oy),e(Oy,lxo),e(Oy,bge),e(bge,ixo),e(Oy,dxo),e(So,cxo),e(So,ct),M(Vy,ct,null),e(ct,mxo),e(ct,vge),e(vge,fxo),e(ct,gxo),e(ct,Ui),e(Ui,hxo),e(Ui,Fge),e(Fge,uxo),e(Ui,pxo),e(Ui,JG),e(JG,_xo),e(Ui,bxo),e(ct,vxo),M(V2,ct,null),e(So,Fxo),e(So,Ze),M(Xy,Ze,null),e(Ze,Txo),e(Ze,Tge),e(Tge,Mxo),e(Ze,Exo),e(Ze,qa),e(qa,Cxo),e(qa,Mge),e(Mge,wxo),e(qa,Axo),e(qa,Ege),e(Ege,Lxo),e(qa,yxo),e(qa,Cge),e(Cge,xxo),e(qa,$xo),e(Ze,kxo),e(Ze,z),e(z,X2),e(X2,wge),e(wge,Sxo),e(X2,Rxo),e(X2,YG),e(YG,Pxo),e(X2,Bxo),e(z,Ixo),e(z,z2),e(z2,Age),e(Age,Nxo),e(z2,qxo),e(z2,KG),e(KG,jxo),e(z2,Dxo),e(z,Gxo),e(z,Q2),e(Q2,Lge),e(Lge,Oxo),e(Q2,Vxo),e(Q2,ZG),e(ZG,Xxo),e(Q2,zxo),e(z,Qxo),e(z,W2),e(W2,yge),e(yge,Wxo),e(W2,Hxo),e(W2,eO),e(eO,Uxo),e(W2,Jxo),e(z,Yxo),e(z,H2),e(H2,xge),e(xge,Kxo),e(H2,Zxo),e(H2,oO),e(oO,e$o),e(H2,o$o),e(z,r$o),e(z,U2),e(U2,$ge),e($ge,t$o),e(U2,a$o),e(U2,rO),e(rO,n$o),e(U2,s$o),e(z,l$o),e(z,J2),e(J2,kge),e(kge,i$o),e(J2,d$o),e(J2,tO),e(tO,c$o),e(J2,m$o),e(z,f$o),e(z,Y2),e(Y2,Sge),e(Sge,g$o),e(Y2,h$o),e(Y2,aO),e(aO,u$o),e(Y2,p$o),e(z,_$o),e(z,K2),e(K2,Rge),e(Rge,b$o),e(K2,v$o),e(K2,nO),e(nO,F$o),e(K2,T$o),e(z,M$o),e(z,Z2),e(Z2,Pge),e(Pge,E$o),e(Z2,C$o),e(Z2,sO),e(sO,w$o),e(Z2,A$o),e(z,L$o),e(z,eb),e(eb,Bge),e(Bge,y$o),e(eb,x$o),e(eb,lO),e(lO,$$o),e(eb,k$o),e(z,S$o),e(z,ob),e(ob,Ige),e(Ige,R$o),e(ob,P$o),e(ob,iO),e(iO,B$o),e(ob,I$o),e(z,N$o),e(z,rb),e(rb,Nge),e(Nge,q$o),e(rb,j$o),e(rb,dO),e(dO,D$o),e(rb,G$o),e(z,O$o),e(z,tb),e(tb,qge),e(qge,V$o),e(tb,X$o),e(tb,cO),e(cO,z$o),e(tb,Q$o),e(z,W$o),e(z,ab),e(ab,jge),e(jge,H$o),e(ab,U$o),e(ab,mO),e(mO,J$o),e(ab,Y$o),e(z,K$o),e(z,nb),e(nb,Dge),e(Dge,Z$o),e(nb,eko),e(nb,fO),e(fO,oko),e(nb,rko),e(z,tko),e(z,sb),e(sb,Gge),e(Gge,ako),e(sb,nko),e(sb,gO),e(gO,sko),e(sb,lko),e(z,iko),e(z,lb),e(lb,Oge),e(Oge,dko),e(lb,cko),e(lb,hO),e(hO,mko),e(lb,fko),e(z,gko),e(z,ib),e(ib,Vge),e(Vge,hko),e(ib,uko),e(ib,uO),e(uO,pko),e(ib,_ko),e(z,bko),e(z,db),e(db,Xge),e(Xge,vko),e(db,Fko),e(db,pO),e(pO,Tko),e(db,Mko),e(z,Eko),e(z,cb),e(cb,zge),e(zge,Cko),e(cb,wko),e(cb,_O),e(_O,Ako),e(cb,Lko),e(z,yko),e(z,mb),e(mb,Qge),e(Qge,xko),e(mb,$ko),e(mb,bO),e(bO,kko),e(mb,Sko),e(z,Rko),e(z,fb),e(fb,Wge),e(Wge,Pko),e(fb,Bko),e(fb,vO),e(vO,Iko),e(fb,Nko),e(z,qko),e(z,gb),e(gb,Hge),e(Hge,jko),e(gb,Dko),e(gb,FO),e(FO,Gko),e(gb,Oko),e(z,Vko),e(z,hb),e(hb,Uge),e(Uge,Xko),e(hb,zko),e(hb,TO),e(TO,Qko),e(hb,Wko),e(z,Hko),e(z,ub),e(ub,Jge),e(Jge,Uko),e(ub,Jko),e(ub,MO),e(MO,Yko),e(ub,Kko),e(z,Zko),e(z,pb),e(pb,Yge),e(Yge,eSo),e(pb,oSo),e(pb,EO),e(EO,rSo),e(pb,tSo),e(z,aSo),e(z,_b),e(_b,Kge),e(Kge,nSo),e(_b,sSo),e(_b,CO),e(CO,lSo),e(_b,iSo),e(z,dSo),e(z,bb),e(bb,Zge),e(Zge,cSo),e(bb,mSo),e(bb,wO),e(wO,fSo),e(bb,gSo),e(z,hSo),e(z,vb),e(vb,ehe),e(ehe,uSo),e(vb,pSo),e(vb,AO),e(AO,_So),e(vb,bSo),e(z,vSo),e(z,Fb),e(Fb,ohe),e(ohe,FSo),e(Fb,TSo),e(Fb,LO),e(LO,MSo),e(Fb,ESo),e(z,CSo),e(z,Tb),e(Tb,rhe),e(rhe,wSo),e(Tb,ASo),e(Tb,yO),e(yO,LSo),e(Tb,ySo),e(z,xSo),e(z,Mb),e(Mb,the),e(the,$So),e(Mb,kSo),e(Mb,xO),e(xO,SSo),e(Mb,RSo),e(z,PSo),e(z,Eb),e(Eb,ahe),e(ahe,BSo),e(Eb,ISo),e(Eb,$O),e($O,NSo),e(Eb,qSo),e(z,jSo),e(z,Cb),e(Cb,nhe),e(nhe,DSo),e(Cb,GSo),e(Cb,kO),e(kO,OSo),e(Cb,VSo),e(z,XSo),e(z,wb),e(wb,she),e(she,zSo),e(wb,QSo),e(wb,SO),e(SO,WSo),e(wb,HSo),e(z,USo),e(z,Ab),e(Ab,lhe),e(lhe,JSo),e(Ab,YSo),e(Ab,RO),e(RO,KSo),e(Ab,ZSo),e(z,eRo),e(z,Lb),e(Lb,ihe),e(ihe,oRo),e(Lb,rRo),e(Lb,PO),e(PO,tRo),e(Lb,aRo),e(z,nRo),e(z,yb),e(yb,dhe),e(dhe,sRo),e(yb,lRo),e(yb,BO),e(BO,iRo),e(yb,dRo),e(z,cRo),e(z,xb),e(xb,che),e(che,mRo),e(xb,fRo),e(xb,IO),e(IO,gRo),e(xb,hRo),e(Ze,uRo),e(Ze,$b),e($b,pRo),e($b,mhe),e(mhe,_Ro),e($b,bRo),e($b,fhe),e(fhe,vRo),e(Ze,FRo),M(kb,Ze,null),b(m,pXe,_),b(m,Ji,_),e(Ji,Sb),e(Sb,ghe),M(zy,ghe,null),e(Ji,TRo),e(Ji,hhe),e(hhe,MRo),b(m,_Xe,_),b(m,Ro,_),M(Qy,Ro,null),e(Ro,ERo),e(Ro,Yi),e(Yi,CRo),e(Yi,NO),e(NO,wRo),e(Yi,ARo),e(Yi,qO),e(qO,LRo),e(Yi,yRo),e(Ro,xRo),e(Ro,Wy),e(Wy,$Ro),e(Wy,uhe),e(uhe,kRo),e(Wy,SRo),e(Ro,RRo),e(Ro,mt),M(Hy,mt,null),e(mt,PRo),e(mt,phe),e(phe,BRo),e(mt,IRo),e(mt,Ki),e(Ki,NRo),e(Ki,_he),e(_he,qRo),e(Ki,jRo),e(Ki,jO),e(jO,DRo),e(Ki,GRo),e(mt,ORo),M(Rb,mt,null),e(Ro,VRo),e(Ro,eo),M(Uy,eo,null),e(eo,XRo),e(eo,bhe),e(bhe,zRo),e(eo,QRo),e(eo,ja),e(ja,WRo),e(ja,vhe),e(vhe,HRo),e(ja,URo),e(ja,Fhe),e(Fhe,JRo),e(ja,YRo),e(ja,The),e(The,KRo),e(ja,ZRo),e(eo,ePo),e(eo,W),e(W,Pb),e(Pb,Mhe),e(Mhe,oPo),e(Pb,rPo),e(Pb,DO),e(DO,tPo),e(Pb,aPo),e(W,nPo),e(W,Bb),e(Bb,Ehe),e(Ehe,sPo),e(Bb,lPo),e(Bb,GO),e(GO,iPo),e(Bb,dPo),e(W,cPo),e(W,Ib),e(Ib,Che),e(Che,mPo),e(Ib,fPo),e(Ib,OO),e(OO,gPo),e(Ib,hPo),e(W,uPo),e(W,Nb),e(Nb,whe),e(whe,pPo),e(Nb,_Po),e(Nb,VO),e(VO,bPo),e(Nb,vPo),e(W,FPo),e(W,qb),e(qb,Ahe),e(Ahe,TPo),e(qb,MPo),e(qb,XO),e(XO,EPo),e(qb,CPo),e(W,wPo),e(W,jb),e(jb,Lhe),e(Lhe,APo),e(jb,LPo),e(jb,zO),e(zO,yPo),e(jb,xPo),e(W,$Po),e(W,Db),e(Db,yhe),e(yhe,kPo),e(Db,SPo),e(Db,QO),e(QO,RPo),e(Db,PPo),e(W,BPo),e(W,Gb),e(Gb,xhe),e(xhe,IPo),e(Gb,NPo),e(Gb,WO),e(WO,qPo),e(Gb,jPo),e(W,DPo),e(W,Ob),e(Ob,$he),e($he,GPo),e(Ob,OPo),e(Ob,HO),e(HO,VPo),e(Ob,XPo),e(W,zPo),e(W,Vb),e(Vb,khe),e(khe,QPo),e(Vb,WPo),e(Vb,UO),e(UO,HPo),e(Vb,UPo),e(W,JPo),e(W,Xb),e(Xb,She),e(She,YPo),e(Xb,KPo),e(Xb,JO),e(JO,ZPo),e(Xb,eBo),e(W,oBo),e(W,zb),e(zb,Rhe),e(Rhe,rBo),e(zb,tBo),e(zb,YO),e(YO,aBo),e(zb,nBo),e(W,sBo),e(W,Qb),e(Qb,Phe),e(Phe,lBo),e(Qb,iBo),e(Qb,KO),e(KO,dBo),e(Qb,cBo),e(W,mBo),e(W,Wb),e(Wb,Bhe),e(Bhe,fBo),e(Wb,gBo),e(Wb,ZO),e(ZO,hBo),e(Wb,uBo),e(W,pBo),e(W,Hb),e(Hb,Ihe),e(Ihe,_Bo),e(Hb,bBo),e(Hb,eV),e(eV,vBo),e(Hb,FBo),e(W,TBo),e(W,Ub),e(Ub,Nhe),e(Nhe,MBo),e(Ub,EBo),e(Ub,oV),e(oV,CBo),e(Ub,wBo),e(W,ABo),e(W,Jb),e(Jb,qhe),e(qhe,LBo),e(Jb,yBo),e(Jb,rV),e(rV,xBo),e(Jb,$Bo),e(W,kBo),e(W,Yb),e(Yb,jhe),e(jhe,SBo),e(Yb,RBo),e(Yb,tV),e(tV,PBo),e(Yb,BBo),e(W,IBo),e(W,Kb),e(Kb,Dhe),e(Dhe,NBo),e(Kb,qBo),e(Kb,aV),e(aV,jBo),e(Kb,DBo),e(W,GBo),e(W,Zb),e(Zb,Ghe),e(Ghe,OBo),e(Zb,VBo),e(Zb,nV),e(nV,XBo),e(Zb,zBo),e(W,QBo),e(W,ev),e(ev,Ohe),e(Ohe,WBo),e(ev,HBo),e(ev,sV),e(sV,UBo),e(ev,JBo),e(W,YBo),e(W,ov),e(ov,Vhe),e(Vhe,KBo),e(ov,ZBo),e(ov,lV),e(lV,eIo),e(ov,oIo),e(W,rIo),e(W,rv),e(rv,Xhe),e(Xhe,tIo),e(rv,aIo),e(rv,iV),e(iV,nIo),e(rv,sIo),e(W,lIo),e(W,tv),e(tv,zhe),e(zhe,iIo),e(tv,dIo),e(tv,dV),e(dV,cIo),e(tv,mIo),e(W,fIo),e(W,av),e(av,Qhe),e(Qhe,gIo),e(av,hIo),e(av,cV),e(cV,uIo),e(av,pIo),e(W,_Io),e(W,nv),e(nv,Whe),e(Whe,bIo),e(nv,vIo),e(nv,mV),e(mV,FIo),e(nv,TIo),e(W,MIo),e(W,sv),e(sv,Hhe),e(Hhe,EIo),e(sv,CIo),e(sv,fV),e(fV,wIo),e(sv,AIo),e(W,LIo),e(W,lv),e(lv,Uhe),e(Uhe,yIo),e(lv,xIo),e(lv,gV),e(gV,$Io),e(lv,kIo),e(W,SIo),e(W,iv),e(iv,Jhe),e(Jhe,RIo),e(iv,PIo),e(iv,hV),e(hV,BIo),e(iv,IIo),e(W,NIo),e(W,dv),e(dv,Yhe),e(Yhe,qIo),e(dv,jIo),e(dv,uV),e(uV,DIo),e(dv,GIo),e(W,OIo),e(W,cv),e(cv,Khe),e(Khe,VIo),e(cv,XIo),e(cv,pV),e(pV,zIo),e(cv,QIo),e(W,WIo),e(W,mv),e(mv,Zhe),e(Zhe,HIo),e(mv,UIo),e(mv,_V),e(_V,JIo),e(mv,YIo),e(W,KIo),e(W,fv),e(fv,eue),e(eue,ZIo),e(fv,eNo),e(fv,bV),e(bV,oNo),e(fv,rNo),e(W,tNo),e(W,gv),e(gv,oue),e(oue,aNo),e(gv,nNo),e(gv,rue),e(rue,sNo),e(gv,lNo),e(W,iNo),e(W,hv),e(hv,tue),e(tue,dNo),e(hv,cNo),e(hv,vV),e(vV,mNo),e(hv,fNo),e(W,gNo),e(W,uv),e(uv,aue),e(aue,hNo),e(uv,uNo),e(uv,FV),e(FV,pNo),e(uv,_No),e(W,bNo),e(W,pv),e(pv,nue),e(nue,vNo),e(pv,FNo),e(pv,TV),e(TV,TNo),e(pv,MNo),e(W,ENo),e(W,_v),e(_v,sue),e(sue,CNo),e(_v,wNo),e(_v,MV),e(MV,ANo),e(_v,LNo),e(eo,yNo),e(eo,bv),e(bv,xNo),e(bv,lue),e(lue,$No),e(bv,kNo),e(bv,iue),e(iue,SNo),e(eo,RNo),M(vv,eo,null),b(m,bXe,_),b(m,Zi,_),e(Zi,Fv),e(Fv,due),M(Jy,due,null),e(Zi,PNo),e(Zi,cue),e(cue,BNo),b(m,vXe,_),b(m,Po,_),M(Yy,Po,null),e(Po,INo),e(Po,ed),e(ed,NNo),e(ed,EV),e(EV,qNo),e(ed,jNo),e(ed,CV),e(CV,DNo),e(ed,GNo),e(Po,ONo),e(Po,Ky),e(Ky,VNo),e(Ky,mue),e(mue,XNo),e(Ky,zNo),e(Po,QNo),e(Po,ft),M(Zy,ft,null),e(ft,WNo),e(ft,fue),e(fue,HNo),e(ft,UNo),e(ft,od),e(od,JNo),e(od,gue),e(gue,YNo),e(od,KNo),e(od,wV),e(wV,ZNo),e(od,eqo),e(ft,oqo),M(Tv,ft,null),e(Po,rqo),e(Po,oo),M(e8,oo,null),e(oo,tqo),e(oo,hue),e(hue,aqo),e(oo,nqo),e(oo,Da),e(Da,sqo),e(Da,uue),e(uue,lqo),e(Da,iqo),e(Da,pue),e(pue,dqo),e(Da,cqo),e(Da,_ue),e(_ue,mqo),e(Da,fqo),e(oo,gqo),e(oo,ue),e(ue,Mv),e(Mv,bue),e(bue,hqo),e(Mv,uqo),e(Mv,AV),e(AV,pqo),e(Mv,_qo),e(ue,bqo),e(ue,Ev),e(Ev,vue),e(vue,vqo),e(Ev,Fqo),e(Ev,LV),e(LV,Tqo),e(Ev,Mqo),e(ue,Eqo),e(ue,Cv),e(Cv,Fue),e(Fue,Cqo),e(Cv,wqo),e(Cv,yV),e(yV,Aqo),e(Cv,Lqo),e(ue,yqo),e(ue,wv),e(wv,Tue),e(Tue,xqo),e(wv,$qo),e(wv,xV),e(xV,kqo),e(wv,Sqo),e(ue,Rqo),e(ue,Av),e(Av,Mue),e(Mue,Pqo),e(Av,Bqo),e(Av,$V),e($V,Iqo),e(Av,Nqo),e(ue,qqo),e(ue,Lv),e(Lv,Eue),e(Eue,jqo),e(Lv,Dqo),e(Lv,kV),e(kV,Gqo),e(Lv,Oqo),e(ue,Vqo),e(ue,yv),e(yv,Cue),e(Cue,Xqo),e(yv,zqo),e(yv,SV),e(SV,Qqo),e(yv,Wqo),e(ue,Hqo),e(ue,xv),e(xv,wue),e(wue,Uqo),e(xv,Jqo),e(xv,RV),e(RV,Yqo),e(xv,Kqo),e(ue,Zqo),e(ue,$v),e($v,Aue),e(Aue,ejo),e($v,ojo),e($v,PV),e(PV,rjo),e($v,tjo),e(ue,ajo),e(ue,kv),e(kv,Lue),e(Lue,njo),e(kv,sjo),e(kv,BV),e(BV,ljo),e(kv,ijo),e(ue,djo),e(ue,Sv),e(Sv,yue),e(yue,cjo),e(Sv,mjo),e(Sv,IV),e(IV,fjo),e(Sv,gjo),e(ue,hjo),e(ue,Rv),e(Rv,xue),e(xue,ujo),e(Rv,pjo),e(Rv,NV),e(NV,_jo),e(Rv,bjo),e(ue,vjo),e(ue,Pv),e(Pv,$ue),e($ue,Fjo),e(Pv,Tjo),e(Pv,qV),e(qV,Mjo),e(Pv,Ejo),e(ue,Cjo),e(ue,Bv),e(Bv,kue),e(kue,wjo),e(Bv,Ajo),e(Bv,jV),e(jV,Ljo),e(Bv,yjo),e(ue,xjo),e(ue,Iv),e(Iv,Sue),e(Sue,$jo),e(Iv,kjo),e(Iv,DV),e(DV,Sjo),e(Iv,Rjo),e(ue,Pjo),e(ue,Nv),e(Nv,Rue),e(Rue,Bjo),e(Nv,Ijo),e(Nv,GV),e(GV,Njo),e(Nv,qjo),e(ue,jjo),e(ue,qv),e(qv,Pue),e(Pue,Djo),e(qv,Gjo),e(qv,OV),e(OV,Ojo),e(qv,Vjo),e(ue,Xjo),e(ue,jv),e(jv,Bue),e(Bue,zjo),e(jv,Qjo),e(jv,VV),e(VV,Wjo),e(jv,Hjo),e(oo,Ujo),e(oo,Dv),e(Dv,Jjo),e(Dv,Iue),e(Iue,Yjo),e(Dv,Kjo),e(Dv,Nue),e(Nue,Zjo),e(oo,eDo),M(Gv,oo,null),b(m,FXe,_),b(m,rd,_),e(rd,Ov),e(Ov,que),M(o8,que,null),e(rd,oDo),e(rd,jue),e(jue,rDo),b(m,TXe,_),b(m,Bo,_),M(r8,Bo,null),e(Bo,tDo),e(Bo,td),e(td,aDo),e(td,XV),e(XV,nDo),e(td,sDo),e(td,zV),e(zV,lDo),e(td,iDo),e(Bo,dDo),e(Bo,t8),e(t8,cDo),e(t8,Due),e(Due,mDo),e(t8,fDo),e(Bo,gDo),e(Bo,gt),M(a8,gt,null),e(gt,hDo),e(gt,Gue),e(Gue,uDo),e(gt,pDo),e(gt,ad),e(ad,_Do),e(ad,Oue),e(Oue,bDo),e(ad,vDo),e(ad,QV),e(QV,FDo),e(ad,TDo),e(gt,MDo),M(Vv,gt,null),e(Bo,EDo),e(Bo,ro),M(n8,ro,null),e(ro,CDo),e(ro,Vue),e(Vue,wDo),e(ro,ADo),e(ro,Ga),e(Ga,LDo),e(Ga,Xue),e(Xue,yDo),e(Ga,xDo),e(Ga,zue),e(zue,$Do),e(Ga,kDo),e(Ga,Que),e(Que,SDo),e(Ga,RDo),e(ro,PDo),e(ro,N),e(N,Xv),e(Xv,Wue),e(Wue,BDo),e(Xv,IDo),e(Xv,WV),e(WV,NDo),e(Xv,qDo),e(N,jDo),e(N,zv),e(zv,Hue),e(Hue,DDo),e(zv,GDo),e(zv,HV),e(HV,ODo),e(zv,VDo),e(N,XDo),e(N,Qv),e(Qv,Uue),e(Uue,zDo),e(Qv,QDo),e(Qv,UV),e(UV,WDo),e(Qv,HDo),e(N,UDo),e(N,Wv),e(Wv,Jue),e(Jue,JDo),e(Wv,YDo),e(Wv,JV),e(JV,KDo),e(Wv,ZDo),e(N,eGo),e(N,Hv),e(Hv,Yue),e(Yue,oGo),e(Hv,rGo),e(Hv,YV),e(YV,tGo),e(Hv,aGo),e(N,nGo),e(N,Uv),e(Uv,Kue),e(Kue,sGo),e(Uv,lGo),e(Uv,KV),e(KV,iGo),e(Uv,dGo),e(N,cGo),e(N,Jv),e(Jv,Zue),e(Zue,mGo),e(Jv,fGo),e(Jv,ZV),e(ZV,gGo),e(Jv,hGo),e(N,uGo),e(N,Yv),e(Yv,epe),e(epe,pGo),e(Yv,_Go),e(Yv,eX),e(eX,bGo),e(Yv,vGo),e(N,FGo),e(N,Kv),e(Kv,ope),e(ope,TGo),e(Kv,MGo),e(Kv,oX),e(oX,EGo),e(Kv,CGo),e(N,wGo),e(N,Zv),e(Zv,rpe),e(rpe,AGo),e(Zv,LGo),e(Zv,rX),e(rX,yGo),e(Zv,xGo),e(N,$Go),e(N,e1),e(e1,tpe),e(tpe,kGo),e(e1,SGo),e(e1,tX),e(tX,RGo),e(e1,PGo),e(N,BGo),e(N,o1),e(o1,ape),e(ape,IGo),e(o1,NGo),e(o1,aX),e(aX,qGo),e(o1,jGo),e(N,DGo),e(N,r1),e(r1,npe),e(npe,GGo),e(r1,OGo),e(r1,nX),e(nX,VGo),e(r1,XGo),e(N,zGo),e(N,t1),e(t1,spe),e(spe,QGo),e(t1,WGo),e(t1,sX),e(sX,HGo),e(t1,UGo),e(N,JGo),e(N,a1),e(a1,lpe),e(lpe,YGo),e(a1,KGo),e(a1,lX),e(lX,ZGo),e(a1,eOo),e(N,oOo),e(N,n1),e(n1,ipe),e(ipe,rOo),e(n1,tOo),e(n1,iX),e(iX,aOo),e(n1,nOo),e(N,sOo),e(N,s1),e(s1,dpe),e(dpe,lOo),e(s1,iOo),e(s1,dX),e(dX,dOo),e(s1,cOo),e(N,mOo),e(N,l1),e(l1,cpe),e(cpe,fOo),e(l1,gOo),e(l1,cX),e(cX,hOo),e(l1,uOo),e(N,pOo),e(N,i1),e(i1,mpe),e(mpe,_Oo),e(i1,bOo),e(i1,mX),e(mX,vOo),e(i1,FOo),e(N,TOo),e(N,d1),e(d1,fpe),e(fpe,MOo),e(d1,EOo),e(d1,fX),e(fX,COo),e(d1,wOo),e(N,AOo),e(N,c1),e(c1,gpe),e(gpe,LOo),e(c1,yOo),e(c1,gX),e(gX,xOo),e(c1,$Oo),e(N,kOo),e(N,m1),e(m1,hpe),e(hpe,SOo),e(m1,ROo),e(m1,hX),e(hX,POo),e(m1,BOo),e(N,IOo),e(N,f1),e(f1,upe),e(upe,NOo),e(f1,qOo),e(f1,uX),e(uX,jOo),e(f1,DOo),e(N,GOo),e(N,g1),e(g1,ppe),e(ppe,OOo),e(g1,VOo),e(g1,pX),e(pX,XOo),e(g1,zOo),e(N,QOo),e(N,h1),e(h1,_pe),e(_pe,WOo),e(h1,HOo),e(h1,_X),e(_X,UOo),e(h1,JOo),e(N,YOo),e(N,u1),e(u1,bpe),e(bpe,KOo),e(u1,ZOo),e(u1,bX),e(bX,eVo),e(u1,oVo),e(N,rVo),e(N,p1),e(p1,vpe),e(vpe,tVo),e(p1,aVo),e(p1,vX),e(vX,nVo),e(p1,sVo),e(N,lVo),e(N,_1),e(_1,Fpe),e(Fpe,iVo),e(_1,dVo),e(_1,FX),e(FX,cVo),e(_1,mVo),e(N,fVo),e(N,b1),e(b1,Tpe),e(Tpe,gVo),e(b1,hVo),e(b1,TX),e(TX,uVo),e(b1,pVo),e(N,_Vo),e(N,v1),e(v1,Mpe),e(Mpe,bVo),e(v1,vVo),e(v1,MX),e(MX,FVo),e(v1,TVo),e(N,MVo),e(N,F1),e(F1,Epe),e(Epe,EVo),e(F1,CVo),e(F1,EX),e(EX,wVo),e(F1,AVo),e(N,LVo),e(N,T1),e(T1,Cpe),e(Cpe,yVo),e(T1,xVo),e(T1,CX),e(CX,$Vo),e(T1,kVo),e(N,SVo),e(N,M1),e(M1,wpe),e(wpe,RVo),e(M1,PVo),e(M1,wX),e(wX,BVo),e(M1,IVo),e(N,NVo),e(N,E1),e(E1,Ape),e(Ape,qVo),e(E1,jVo),e(E1,AX),e(AX,DVo),e(E1,GVo),e(N,OVo),e(N,C1),e(C1,Lpe),e(Lpe,VVo),e(C1,XVo),e(C1,LX),e(LX,zVo),e(C1,QVo),e(N,WVo),e(N,w1),e(w1,ype),e(ype,HVo),e(w1,UVo),e(w1,yX),e(yX,JVo),e(w1,YVo),e(N,KVo),e(N,A1),e(A1,xpe),e(xpe,ZVo),e(A1,eXo),e(A1,xX),e(xX,oXo),e(A1,rXo),e(N,tXo),e(N,L1),e(L1,$pe),e($pe,aXo),e(L1,nXo),e(L1,$X),e($X,sXo),e(L1,lXo),e(N,iXo),e(N,y1),e(y1,kpe),e(kpe,dXo),e(y1,cXo),e(y1,kX),e(kX,mXo),e(y1,fXo),e(N,gXo),e(N,x1),e(x1,Spe),e(Spe,hXo),e(x1,uXo),e(x1,SX),e(SX,pXo),e(x1,_Xo),e(N,bXo),e(N,$1),e($1,Rpe),e(Rpe,vXo),e($1,FXo),e($1,RX),e(RX,TXo),e($1,MXo),e(N,EXo),e(N,k1),e(k1,Ppe),e(Ppe,CXo),e(k1,wXo),e(k1,PX),e(PX,AXo),e(k1,LXo),e(N,yXo),e(N,S1),e(S1,Bpe),e(Bpe,xXo),e(S1,$Xo),e(S1,BX),e(BX,kXo),e(S1,SXo),e(N,RXo),e(N,R1),e(R1,Ipe),e(Ipe,PXo),e(R1,BXo),e(R1,IX),e(IX,IXo),e(R1,NXo),e(N,qXo),e(N,P1),e(P1,Npe),e(Npe,jXo),e(P1,DXo),e(P1,NX),e(NX,GXo),e(P1,OXo),e(N,VXo),e(N,B1),e(B1,qpe),e(qpe,XXo),e(B1,zXo),e(B1,qX),e(qX,QXo),e(B1,WXo),e(N,HXo),e(N,I1),e(I1,jpe),e(jpe,UXo),e(I1,JXo),e(I1,jX),e(jX,YXo),e(I1,KXo),e(N,ZXo),e(N,N1),e(N1,Dpe),e(Dpe,ezo),e(N1,ozo),e(N1,DX),e(DX,rzo),e(N1,tzo),e(N,azo),e(N,q1),e(q1,Gpe),e(Gpe,nzo),e(q1,szo),e(q1,GX),e(GX,lzo),e(q1,izo),e(N,dzo),e(N,j1),e(j1,Ope),e(Ope,czo),e(j1,mzo),e(j1,OX),e(OX,fzo),e(j1,gzo),e(ro,hzo),e(ro,D1),e(D1,uzo),e(D1,Vpe),e(Vpe,pzo),e(D1,_zo),e(D1,Xpe),e(Xpe,bzo),e(ro,vzo),M(G1,ro,null),b(m,MXe,_),b(m,nd,_),e(nd,O1),e(O1,zpe),M(s8,zpe,null),e(nd,Fzo),e(nd,Qpe),e(Qpe,Tzo),b(m,EXe,_),b(m,Io,_),M(l8,Io,null),e(Io,Mzo),e(Io,sd),e(sd,Ezo),e(sd,VX),e(VX,Czo),e(sd,wzo),e(sd,XX),e(XX,Azo),e(sd,Lzo),e(Io,yzo),e(Io,i8),e(i8,xzo),e(i8,Wpe),e(Wpe,$zo),e(i8,kzo),e(Io,Szo),e(Io,ht),M(d8,ht,null),e(ht,Rzo),e(ht,Hpe),e(Hpe,Pzo),e(ht,Bzo),e(ht,ld),e(ld,Izo),e(ld,Upe),e(Upe,Nzo),e(ld,qzo),e(ld,zX),e(zX,jzo),e(ld,Dzo),e(ht,Gzo),M(V1,ht,null),e(Io,Ozo),e(Io,to),M(c8,to,null),e(to,Vzo),e(to,Jpe),e(Jpe,Xzo),e(to,zzo),e(to,Oa),e(Oa,Qzo),e(Oa,Ype),e(Ype,Wzo),e(Oa,Hzo),e(Oa,Kpe),e(Kpe,Uzo),e(Oa,Jzo),e(Oa,Zpe),e(Zpe,Yzo),e(Oa,Kzo),e(to,Zzo),e(to,Z),e(Z,X1),e(X1,e_e),e(e_e,eQo),e(X1,oQo),e(X1,QX),e(QX,rQo),e(X1,tQo),e(Z,aQo),e(Z,z1),e(z1,o_e),e(o_e,nQo),e(z1,sQo),e(z1,WX),e(WX,lQo),e(z1,iQo),e(Z,dQo),e(Z,Q1),e(Q1,r_e),e(r_e,cQo),e(Q1,mQo),e(Q1,HX),e(HX,fQo),e(Q1,gQo),e(Z,hQo),e(Z,W1),e(W1,t_e),e(t_e,uQo),e(W1,pQo),e(W1,UX),e(UX,_Qo),e(W1,bQo),e(Z,vQo),e(Z,H1),e(H1,a_e),e(a_e,FQo),e(H1,TQo),e(H1,JX),e(JX,MQo),e(H1,EQo),e(Z,CQo),e(Z,U1),e(U1,n_e),e(n_e,wQo),e(U1,AQo),e(U1,YX),e(YX,LQo),e(U1,yQo),e(Z,xQo),e(Z,J1),e(J1,s_e),e(s_e,$Qo),e(J1,kQo),e(J1,KX),e(KX,SQo),e(J1,RQo),e(Z,PQo),e(Z,Y1),e(Y1,l_e),e(l_e,BQo),e(Y1,IQo),e(Y1,ZX),e(ZX,NQo),e(Y1,qQo),e(Z,jQo),e(Z,K1),e(K1,i_e),e(i_e,DQo),e(K1,GQo),e(K1,ez),e(ez,OQo),e(K1,VQo),e(Z,XQo),e(Z,Z1),e(Z1,d_e),e(d_e,zQo),e(Z1,QQo),e(Z1,oz),e(oz,WQo),e(Z1,HQo),e(Z,UQo),e(Z,eF),e(eF,c_e),e(c_e,JQo),e(eF,YQo),e(eF,rz),e(rz,KQo),e(eF,ZQo),e(Z,eWo),e(Z,oF),e(oF,m_e),e(m_e,oWo),e(oF,rWo),e(oF,tz),e(tz,tWo),e(oF,aWo),e(Z,nWo),e(Z,rF),e(rF,f_e),e(f_e,sWo),e(rF,lWo),e(rF,az),e(az,iWo),e(rF,dWo),e(Z,cWo),e(Z,tF),e(tF,g_e),e(g_e,mWo),e(tF,fWo),e(tF,nz),e(nz,gWo),e(tF,hWo),e(Z,uWo),e(Z,aF),e(aF,h_e),e(h_e,pWo),e(aF,_Wo),e(aF,sz),e(sz,bWo),e(aF,vWo),e(Z,FWo),e(Z,nF),e(nF,u_e),e(u_e,TWo),e(nF,MWo),e(nF,lz),e(lz,EWo),e(nF,CWo),e(Z,wWo),e(Z,sF),e(sF,p_e),e(p_e,AWo),e(sF,LWo),e(sF,iz),e(iz,yWo),e(sF,xWo),e(Z,$Wo),e(Z,lF),e(lF,__e),e(__e,kWo),e(lF,SWo),e(lF,dz),e(dz,RWo),e(lF,PWo),e(Z,BWo),e(Z,iF),e(iF,b_e),e(b_e,IWo),e(iF,NWo),e(iF,cz),e(cz,qWo),e(iF,jWo),e(Z,DWo),e(Z,dF),e(dF,v_e),e(v_e,GWo),e(dF,OWo),e(dF,mz),e(mz,VWo),e(dF,XWo),e(Z,zWo),e(Z,cF),e(cF,F_e),e(F_e,QWo),e(cF,WWo),e(cF,fz),e(fz,HWo),e(cF,UWo),e(Z,JWo),e(Z,mF),e(mF,T_e),e(T_e,YWo),e(mF,KWo),e(mF,gz),e(gz,ZWo),e(mF,eHo),e(Z,oHo),e(Z,fF),e(fF,M_e),e(M_e,rHo),e(fF,tHo),e(fF,hz),e(hz,aHo),e(fF,nHo),e(Z,sHo),e(Z,gF),e(gF,E_e),e(E_e,lHo),e(gF,iHo),e(gF,uz),e(uz,dHo),e(gF,cHo),e(Z,mHo),e(Z,hF),e(hF,C_e),e(C_e,fHo),e(hF,gHo),e(hF,pz),e(pz,hHo),e(hF,uHo),e(Z,pHo),e(Z,uF),e(uF,w_e),e(w_e,_Ho),e(uF,bHo),e(uF,_z),e(_z,vHo),e(uF,FHo),e(Z,THo),e(Z,pF),e(pF,A_e),e(A_e,MHo),e(pF,EHo),e(pF,bz),e(bz,CHo),e(pF,wHo),e(Z,AHo),e(Z,_F),e(_F,L_e),e(L_e,LHo),e(_F,yHo),e(_F,vz),e(vz,xHo),e(_F,$Ho),e(Z,kHo),e(Z,bF),e(bF,y_e),e(y_e,SHo),e(bF,RHo),e(bF,Fz),e(Fz,PHo),e(bF,BHo),e(Z,IHo),e(Z,vF),e(vF,x_e),e(x_e,NHo),e(vF,qHo),e(vF,Tz),e(Tz,jHo),e(vF,DHo),e(to,GHo),e(to,FF),e(FF,OHo),e(FF,$_e),e($_e,VHo),e(FF,XHo),e(FF,k_e),e(k_e,zHo),e(to,QHo),M(TF,to,null),b(m,CXe,_),b(m,id,_),e(id,MF),e(MF,S_e),M(m8,S_e,null),e(id,WHo),e(id,R_e),e(R_e,HHo),b(m,wXe,_),b(m,No,_),M(f8,No,null),e(No,UHo),e(No,dd),e(dd,JHo),e(dd,Mz),e(Mz,YHo),e(dd,KHo),e(dd,Ez),e(Ez,ZHo),e(dd,eUo),e(No,oUo),e(No,g8),e(g8,rUo),e(g8,P_e),e(P_e,tUo),e(g8,aUo),e(No,nUo),e(No,ut),M(h8,ut,null),e(ut,sUo),e(ut,B_e),e(B_e,lUo),e(ut,iUo),e(ut,cd),e(cd,dUo),e(cd,I_e),e(I_e,cUo),e(cd,mUo),e(cd,Cz),e(Cz,fUo),e(cd,gUo),e(ut,hUo),M(EF,ut,null),e(No,uUo),e(No,ao),M(u8,ao,null),e(ao,pUo),e(ao,N_e),e(N_e,_Uo),e(ao,bUo),e(ao,Va),e(Va,vUo),e(Va,q_e),e(q_e,FUo),e(Va,TUo),e(Va,j_e),e(j_e,MUo),e(Va,EUo),e(Va,D_e),e(D_e,CUo),e(Va,wUo),e(ao,AUo),e(ao,qo),e(qo,CF),e(CF,G_e),e(G_e,LUo),e(CF,yUo),e(CF,wz),e(wz,xUo),e(CF,$Uo),e(qo,kUo),e(qo,wF),e(wF,O_e),e(O_e,SUo),e(wF,RUo),e(wF,Az),e(Az,PUo),e(wF,BUo),e(qo,IUo),e(qo,AF),e(AF,V_e),e(V_e,NUo),e(AF,qUo),e(AF,Lz),e(Lz,jUo),e(AF,DUo),e(qo,GUo),e(qo,LF),e(LF,X_e),e(X_e,OUo),e(LF,VUo),e(LF,yz),e(yz,XUo),e(LF,zUo),e(qo,QUo),e(qo,yF),e(yF,z_e),e(z_e,WUo),e(yF,HUo),e(yF,xz),e(xz,UUo),e(yF,JUo),e(qo,YUo),e(qo,xF),e(xF,Q_e),e(Q_e,KUo),e(xF,ZUo),e(xF,$z),e($z,eJo),e(xF,oJo),e(ao,rJo),e(ao,$F),e($F,tJo),e($F,W_e),e(W_e,aJo),e($F,nJo),e($F,H_e),e(H_e,sJo),e(ao,lJo),M(kF,ao,null),b(m,AXe,_),b(m,md,_),e(md,SF),e(SF,U_e),M(p8,U_e,null),e(md,iJo),e(md,J_e),e(J_e,dJo),b(m,LXe,_),b(m,jo,_),M(_8,jo,null),e(jo,cJo),e(jo,fd),e(fd,mJo),e(fd,kz),e(kz,fJo),e(fd,gJo),e(fd,Sz),e(Sz,hJo),e(fd,uJo),e(jo,pJo),e(jo,b8),e(b8,_Jo),e(b8,Y_e),e(Y_e,bJo),e(b8,vJo),e(jo,FJo),e(jo,pt),M(v8,pt,null),e(pt,TJo),e(pt,K_e),e(K_e,MJo),e(pt,EJo),e(pt,gd),e(gd,CJo),e(gd,Z_e),e(Z_e,wJo),e(gd,AJo),e(gd,Rz),e(Rz,LJo),e(gd,yJo),e(pt,xJo),M(RF,pt,null),e(jo,$Jo),e(jo,no),M(F8,no,null),e(no,kJo),e(no,e2e),e(e2e,SJo),e(no,RJo),e(no,Xa),e(Xa,PJo),e(Xa,o2e),e(o2e,BJo),e(Xa,IJo),e(Xa,r2e),e(r2e,NJo),e(Xa,qJo),e(Xa,t2e),e(t2e,jJo),e(Xa,DJo),e(no,GJo),e(no,U),e(U,PF),e(PF,a2e),e(a2e,OJo),e(PF,VJo),e(PF,Pz),e(Pz,XJo),e(PF,zJo),e(U,QJo),e(U,BF),e(BF,n2e),e(n2e,WJo),e(BF,HJo),e(BF,Bz),e(Bz,UJo),e(BF,JJo),e(U,YJo),e(U,IF),e(IF,s2e),e(s2e,KJo),e(IF,ZJo),e(IF,Iz),e(Iz,eYo),e(IF,oYo),e(U,rYo),e(U,NF),e(NF,l2e),e(l2e,tYo),e(NF,aYo),e(NF,Nz),e(Nz,nYo),e(NF,sYo),e(U,lYo),e(U,qF),e(qF,i2e),e(i2e,iYo),e(qF,dYo),e(qF,qz),e(qz,cYo),e(qF,mYo),e(U,fYo),e(U,jF),e(jF,d2e),e(d2e,gYo),e(jF,hYo),e(jF,jz),e(jz,uYo),e(jF,pYo),e(U,_Yo),e(U,DF),e(DF,c2e),e(c2e,bYo),e(DF,vYo),e(DF,Dz),e(Dz,FYo),e(DF,TYo),e(U,MYo),e(U,GF),e(GF,m2e),e(m2e,EYo),e(GF,CYo),e(GF,Gz),e(Gz,wYo),e(GF,AYo),e(U,LYo),e(U,OF),e(OF,f2e),e(f2e,yYo),e(OF,xYo),e(OF,Oz),e(Oz,$Yo),e(OF,kYo),e(U,SYo),e(U,VF),e(VF,g2e),e(g2e,RYo),e(VF,PYo),e(VF,Vz),e(Vz,BYo),e(VF,IYo),e(U,NYo),e(U,XF),e(XF,h2e),e(h2e,qYo),e(XF,jYo),e(XF,Xz),e(Xz,DYo),e(XF,GYo),e(U,OYo),e(U,zF),e(zF,u2e),e(u2e,VYo),e(zF,XYo),e(zF,zz),e(zz,zYo),e(zF,QYo),e(U,WYo),e(U,QF),e(QF,p2e),e(p2e,HYo),e(QF,UYo),e(QF,Qz),e(Qz,JYo),e(QF,YYo),e(U,KYo),e(U,WF),e(WF,_2e),e(_2e,ZYo),e(WF,eKo),e(WF,Wz),e(Wz,oKo),e(WF,rKo),e(U,tKo),e(U,HF),e(HF,b2e),e(b2e,aKo),e(HF,nKo),e(HF,Hz),e(Hz,sKo),e(HF,lKo),e(U,iKo),e(U,UF),e(UF,v2e),e(v2e,dKo),e(UF,cKo),e(UF,Uz),e(Uz,mKo),e(UF,fKo),e(U,gKo),e(U,JF),e(JF,F2e),e(F2e,hKo),e(JF,uKo),e(JF,Jz),e(Jz,pKo),e(JF,_Ko),e(U,bKo),e(U,YF),e(YF,T2e),e(T2e,vKo),e(YF,FKo),e(YF,Yz),e(Yz,TKo),e(YF,MKo),e(U,EKo),e(U,KF),e(KF,M2e),e(M2e,CKo),e(KF,wKo),e(KF,Kz),e(Kz,AKo),e(KF,LKo),e(U,yKo),e(U,ZF),e(ZF,E2e),e(E2e,xKo),e(ZF,$Ko),e(ZF,Zz),e(Zz,kKo),e(ZF,SKo),e(U,RKo),e(U,eT),e(eT,C2e),e(C2e,PKo),e(eT,BKo),e(eT,eQ),e(eQ,IKo),e(eT,NKo),e(U,qKo),e(U,oT),e(oT,w2e),e(w2e,jKo),e(oT,DKo),e(oT,oQ),e(oQ,GKo),e(oT,OKo),e(U,VKo),e(U,rT),e(rT,A2e),e(A2e,XKo),e(rT,zKo),e(rT,rQ),e(rQ,QKo),e(rT,WKo),e(U,HKo),e(U,tT),e(tT,L2e),e(L2e,UKo),e(tT,JKo),e(tT,tQ),e(tQ,YKo),e(tT,KKo),e(U,ZKo),e(U,aT),e(aT,y2e),e(y2e,eZo),e(aT,oZo),e(aT,aQ),e(aQ,rZo),e(aT,tZo),e(U,aZo),e(U,nT),e(nT,x2e),e(x2e,nZo),e(nT,sZo),e(nT,nQ),e(nQ,lZo),e(nT,iZo),e(U,dZo),e(U,sT),e(sT,$2e),e($2e,cZo),e(sT,mZo),e(sT,sQ),e(sQ,fZo),e(sT,gZo),e(U,hZo),e(U,lT),e(lT,k2e),e(k2e,uZo),e(lT,pZo),e(lT,lQ),e(lQ,_Zo),e(lT,bZo),e(U,vZo),e(U,iT),e(iT,S2e),e(S2e,FZo),e(iT,TZo),e(iT,iQ),e(iQ,MZo),e(iT,EZo),e(U,CZo),e(U,dT),e(dT,R2e),e(R2e,wZo),e(dT,AZo),e(dT,dQ),e(dQ,LZo),e(dT,yZo),e(U,xZo),e(U,cT),e(cT,P2e),e(P2e,$Zo),e(cT,kZo),e(cT,cQ),e(cQ,SZo),e(cT,RZo),e(U,PZo),e(U,mT),e(mT,B2e),e(B2e,BZo),e(mT,IZo),e(mT,mQ),e(mQ,NZo),e(mT,qZo),e(U,jZo),e(U,fT),e(fT,I2e),e(I2e,DZo),e(fT,GZo),e(fT,fQ),e(fQ,OZo),e(fT,VZo),e(U,XZo),e(U,gT),e(gT,N2e),e(N2e,zZo),e(gT,QZo),e(gT,gQ),e(gQ,WZo),e(gT,HZo),e(U,UZo),e(U,hT),e(hT,q2e),e(q2e,JZo),e(hT,YZo),e(hT,hQ),e(hQ,KZo),e(hT,ZZo),e(U,eer),e(U,uT),e(uT,j2e),e(j2e,oer),e(uT,rer),e(uT,uQ),e(uQ,ter),e(uT,aer),e(no,ner),e(no,pT),e(pT,ser),e(pT,D2e),e(D2e,ler),e(pT,ier),e(pT,G2e),e(G2e,der),e(no,cer),M(_T,no,null),b(m,yXe,_),b(m,hd,_),e(hd,bT),e(bT,O2e),M(T8,O2e,null),e(hd,mer),e(hd,V2e),e(V2e,fer),b(m,xXe,_),b(m,Do,_),M(M8,Do,null),e(Do,ger),e(Do,ud),e(ud,her),e(ud,pQ),e(pQ,uer),e(ud,per),e(ud,_Q),e(_Q,_er),e(ud,ber),e(Do,ver),e(Do,E8),e(E8,Fer),e(E8,X2e),e(X2e,Ter),e(E8,Mer),e(Do,Eer),e(Do,_t),M(C8,_t,null),e(_t,Cer),e(_t,z2e),e(z2e,wer),e(_t,Aer),e(_t,pd),e(pd,Ler),e(pd,Q2e),e(Q2e,yer),e(pd,xer),e(pd,bQ),e(bQ,$er),e(pd,ker),e(_t,Ser),M(vT,_t,null),e(Do,Rer),e(Do,so),M(w8,so,null),e(so,Per),e(so,W2e),e(W2e,Ber),e(so,Ier),e(so,za),e(za,Ner),e(za,H2e),e(H2e,qer),e(za,jer),e(za,U2e),e(U2e,Der),e(za,Ger),e(za,J2e),e(J2e,Oer),e(za,Ver),e(so,Xer),e(so,V),e(V,FT),e(FT,Y2e),e(Y2e,zer),e(FT,Qer),e(FT,vQ),e(vQ,Wer),e(FT,Her),e(V,Uer),e(V,TT),e(TT,K2e),e(K2e,Jer),e(TT,Yer),e(TT,FQ),e(FQ,Ker),e(TT,Zer),e(V,eor),e(V,MT),e(MT,Z2e),e(Z2e,oor),e(MT,ror),e(MT,TQ),e(TQ,tor),e(MT,aor),e(V,nor),e(V,ET),e(ET,ebe),e(ebe,sor),e(ET,lor),e(ET,MQ),e(MQ,ior),e(ET,dor),e(V,cor),e(V,CT),e(CT,obe),e(obe,mor),e(CT,gor),e(CT,EQ),e(EQ,hor),e(CT,uor),e(V,por),e(V,wT),e(wT,rbe),e(rbe,_or),e(wT,bor),e(wT,CQ),e(CQ,vor),e(wT,For),e(V,Tor),e(V,AT),e(AT,tbe),e(tbe,Mor),e(AT,Eor),e(AT,wQ),e(wQ,Cor),e(AT,wor),e(V,Aor),e(V,LT),e(LT,abe),e(abe,Lor),e(LT,yor),e(LT,AQ),e(AQ,xor),e(LT,$or),e(V,kor),e(V,yT),e(yT,nbe),e(nbe,Sor),e(yT,Ror),e(yT,LQ),e(LQ,Por),e(yT,Bor),e(V,Ior),e(V,xT),e(xT,sbe),e(sbe,Nor),e(xT,qor),e(xT,yQ),e(yQ,jor),e(xT,Dor),e(V,Gor),e(V,$T),e($T,lbe),e(lbe,Oor),e($T,Vor),e($T,xQ),e(xQ,Xor),e($T,zor),e(V,Qor),e(V,kT),e(kT,ibe),e(ibe,Wor),e(kT,Hor),e(kT,$Q),e($Q,Uor),e(kT,Jor),e(V,Yor),e(V,ST),e(ST,dbe),e(dbe,Kor),e(ST,Zor),e(ST,kQ),e(kQ,err),e(ST,orr),e(V,rrr),e(V,RT),e(RT,cbe),e(cbe,trr),e(RT,arr),e(RT,SQ),e(SQ,nrr),e(RT,srr),e(V,lrr),e(V,PT),e(PT,mbe),e(mbe,irr),e(PT,drr),e(PT,RQ),e(RQ,crr),e(PT,mrr),e(V,frr),e(V,BT),e(BT,fbe),e(fbe,grr),e(BT,hrr),e(BT,PQ),e(PQ,urr),e(BT,prr),e(V,_rr),e(V,IT),e(IT,gbe),e(gbe,brr),e(IT,vrr),e(IT,BQ),e(BQ,Frr),e(IT,Trr),e(V,Mrr),e(V,NT),e(NT,hbe),e(hbe,Err),e(NT,Crr),e(NT,IQ),e(IQ,wrr),e(NT,Arr),e(V,Lrr),e(V,qT),e(qT,ube),e(ube,yrr),e(qT,xrr),e(qT,NQ),e(NQ,$rr),e(qT,krr),e(V,Srr),e(V,jT),e(jT,pbe),e(pbe,Rrr),e(jT,Prr),e(jT,qQ),e(qQ,Brr),e(jT,Irr),e(V,Nrr),e(V,DT),e(DT,_be),e(_be,qrr),e(DT,jrr),e(DT,jQ),e(jQ,Drr),e(DT,Grr),e(V,Orr),e(V,GT),e(GT,bbe),e(bbe,Vrr),e(GT,Xrr),e(GT,DQ),e(DQ,zrr),e(GT,Qrr),e(V,Wrr),e(V,OT),e(OT,vbe),e(vbe,Hrr),e(OT,Urr),e(OT,GQ),e(GQ,Jrr),e(OT,Yrr),e(V,Krr),e(V,VT),e(VT,Fbe),e(Fbe,Zrr),e(VT,etr),e(VT,OQ),e(OQ,otr),e(VT,rtr),e(V,ttr),e(V,XT),e(XT,Tbe),e(Tbe,atr),e(XT,ntr),e(XT,VQ),e(VQ,str),e(XT,ltr),e(V,itr),e(V,zT),e(zT,Mbe),e(Mbe,dtr),e(zT,ctr),e(zT,XQ),e(XQ,mtr),e(zT,ftr),e(V,gtr),e(V,QT),e(QT,Ebe),e(Ebe,htr),e(QT,utr),e(QT,zQ),e(zQ,ptr),e(QT,_tr),e(V,btr),e(V,WT),e(WT,Cbe),e(Cbe,vtr),e(WT,Ftr),e(WT,QQ),e(QQ,Ttr),e(WT,Mtr),e(V,Etr),e(V,HT),e(HT,wbe),e(wbe,Ctr),e(HT,wtr),e(HT,WQ),e(WQ,Atr),e(HT,Ltr),e(V,ytr),e(V,UT),e(UT,Abe),e(Abe,xtr),e(UT,$tr),e(UT,HQ),e(HQ,ktr),e(UT,Str),e(V,Rtr),e(V,JT),e(JT,Lbe),e(Lbe,Ptr),e(JT,Btr),e(JT,UQ),e(UQ,Itr),e(JT,Ntr),e(V,qtr),e(V,YT),e(YT,ybe),e(ybe,jtr),e(YT,Dtr),e(YT,JQ),e(JQ,Gtr),e(YT,Otr),e(V,Vtr),e(V,KT),e(KT,xbe),e(xbe,Xtr),e(KT,ztr),e(KT,YQ),e(YQ,Qtr),e(KT,Wtr),e(V,Htr),e(V,ZT),e(ZT,$be),e($be,Utr),e(ZT,Jtr),e(ZT,KQ),e(KQ,Ytr),e(ZT,Ktr),e(V,Ztr),e(V,eM),e(eM,kbe),e(kbe,ear),e(eM,oar),e(eM,ZQ),e(ZQ,rar),e(eM,tar),e(V,aar),e(V,oM),e(oM,Sbe),e(Sbe,nar),e(oM,sar),e(oM,eW),e(eW,lar),e(oM,iar),e(V,dar),e(V,rM),e(rM,Rbe),e(Rbe,car),e(rM,mar),e(rM,oW),e(oW,far),e(rM,gar),e(V,har),e(V,tM),e(tM,Pbe),e(Pbe,uar),e(tM,par),e(tM,rW),e(rW,_ar),e(tM,bar),e(V,Far),e(V,aM),e(aM,Bbe),e(Bbe,Tar),e(aM,Mar),e(aM,tW),e(tW,Ear),e(aM,Car),e(V,war),e(V,nM),e(nM,Ibe),e(Ibe,Aar),e(nM,Lar),e(nM,aW),e(aW,yar),e(nM,xar),e(V,$ar),e(V,sM),e(sM,Nbe),e(Nbe,kar),e(sM,Sar),e(sM,nW),e(nW,Rar),e(sM,Par),e(V,Bar),e(V,lM),e(lM,qbe),e(qbe,Iar),e(lM,Nar),e(lM,sW),e(sW,qar),e(lM,jar),e(so,Dar),e(so,iM),e(iM,Gar),e(iM,jbe),e(jbe,Oar),e(iM,Var),e(iM,Dbe),e(Dbe,Xar),e(so,zar),M(dM,so,null),b(m,$Xe,_),b(m,_d,_),e(_d,cM),e(cM,Gbe),M(A8,Gbe,null),e(_d,Qar),e(_d,Obe),e(Obe,War),b(m,kXe,_),b(m,Go,_),M(L8,Go,null),e(Go,Har),e(Go,bd),e(bd,Uar),e(bd,lW),e(lW,Jar),e(bd,Yar),e(bd,iW),e(iW,Kar),e(bd,Zar),e(Go,enr),e(Go,y8),e(y8,onr),e(y8,Vbe),e(Vbe,rnr),e(y8,tnr),e(Go,anr),e(Go,bt),M(x8,bt,null),e(bt,nnr),e(bt,Xbe),e(Xbe,snr),e(bt,lnr),e(bt,vd),e(vd,inr),e(vd,zbe),e(zbe,dnr),e(vd,cnr),e(vd,dW),e(dW,mnr),e(vd,fnr),e(bt,gnr),M(mM,bt,null),e(Go,hnr),e(Go,lo),M($8,lo,null),e(lo,unr),e(lo,Qbe),e(Qbe,pnr),e(lo,_nr),e(lo,Qa),e(Qa,bnr),e(Qa,Wbe),e(Wbe,vnr),e(Qa,Fnr),e(Qa,Hbe),e(Hbe,Tnr),e(Qa,Mnr),e(Qa,Ube),e(Ube,Enr),e(Qa,Cnr),e(lo,wnr),e(lo,Jbe),e(Jbe,fM),e(fM,Ybe),e(Ybe,Anr),e(fM,Lnr),e(fM,cW),e(cW,ynr),e(fM,xnr),e(lo,$nr),e(lo,gM),e(gM,knr),e(gM,Kbe),e(Kbe,Snr),e(gM,Rnr),e(gM,Zbe),e(Zbe,Pnr),e(lo,Bnr),M(hM,lo,null),b(m,SXe,_),b(m,Fd,_),e(Fd,uM),e(uM,eve),M(k8,eve,null),e(Fd,Inr),e(Fd,ove),e(ove,Nnr),b(m,RXe,_),b(m,Oo,_),M(S8,Oo,null),e(Oo,qnr),e(Oo,Td),e(Td,jnr),e(Td,mW),e(mW,Dnr),e(Td,Gnr),e(Td,fW),e(fW,Onr),e(Td,Vnr),e(Oo,Xnr),e(Oo,R8),e(R8,znr),e(R8,rve),e(rve,Qnr),e(R8,Wnr),e(Oo,Hnr),e(Oo,vt),M(P8,vt,null),e(vt,Unr),e(vt,tve),e(tve,Jnr),e(vt,Ynr),e(vt,Md),e(Md,Knr),e(Md,ave),e(ave,Znr),e(Md,esr),e(Md,gW),e(gW,osr),e(Md,rsr),e(vt,tsr),M(pM,vt,null),e(Oo,asr),e(Oo,io),M(B8,io,null),e(io,nsr),e(io,nve),e(nve,ssr),e(io,lsr),e(io,Wa),e(Wa,isr),e(Wa,sve),e(sve,dsr),e(Wa,csr),e(Wa,lve),e(lve,msr),e(Wa,fsr),e(Wa,ive),e(ive,gsr),e(Wa,hsr),e(io,usr),e(io,ve),e(ve,_M),e(_M,dve),e(dve,psr),e(_M,_sr),e(_M,hW),e(hW,bsr),e(_M,vsr),e(ve,Fsr),e(ve,bM),e(bM,cve),e(cve,Tsr),e(bM,Msr),e(bM,uW),e(uW,Esr),e(bM,Csr),e(ve,wsr),e(ve,vM),e(vM,mve),e(mve,Asr),e(vM,Lsr),e(vM,pW),e(pW,ysr),e(vM,xsr),e(ve,$sr),e(ve,FM),e(FM,fve),e(fve,ksr),e(FM,Ssr),e(FM,_W),e(_W,Rsr),e(FM,Psr),e(ve,Bsr),e(ve,Hs),e(Hs,gve),e(gve,Isr),e(Hs,Nsr),e(Hs,bW),e(bW,qsr),e(Hs,jsr),e(Hs,vW),e(vW,Dsr),e(Hs,Gsr),e(ve,Osr),e(ve,TM),e(TM,hve),e(hve,Vsr),e(TM,Xsr),e(TM,FW),e(FW,zsr),e(TM,Qsr),e(ve,Wsr),e(ve,Us),e(Us,uve),e(uve,Hsr),e(Us,Usr),e(Us,TW),e(TW,Jsr),e(Us,Ysr),e(Us,MW),e(MW,Ksr),e(Us,Zsr),e(ve,elr),e(ve,MM),e(MM,pve),e(pve,olr),e(MM,rlr),e(MM,EW),e(EW,tlr),e(MM,alr),e(ve,nlr),e(ve,Ft),e(Ft,_ve),e(_ve,slr),e(Ft,llr),e(Ft,CW),e(CW,ilr),e(Ft,dlr),e(Ft,wW),e(wW,clr),e(Ft,mlr),e(Ft,AW),e(AW,flr),e(Ft,glr),e(ve,hlr),e(ve,EM),e(EM,bve),e(bve,ulr),e(EM,plr),e(EM,LW),e(LW,_lr),e(EM,blr),e(ve,vlr),e(ve,CM),e(CM,vve),e(vve,Flr),e(CM,Tlr),e(CM,yW),e(yW,Mlr),e(CM,Elr),e(ve,Clr),e(ve,wM),e(wM,Fve),e(Fve,wlr),e(wM,Alr),e(wM,xW),e(xW,Llr),e(wM,ylr),e(ve,xlr),e(ve,AM),e(AM,Tve),e(Tve,$lr),e(AM,klr),e(AM,$W),e($W,Slr),e(AM,Rlr),e(ve,Plr),e(ve,LM),e(LM,Mve),e(Mve,Blr),e(LM,Ilr),e(LM,kW),e(kW,Nlr),e(LM,qlr),e(ve,jlr),e(ve,yM),e(yM,Eve),e(Eve,Dlr),e(yM,Glr),e(yM,SW),e(SW,Olr),e(yM,Vlr),e(ve,Xlr),e(ve,xM),e(xM,Cve),e(Cve,zlr),e(xM,Qlr),e(xM,RW),e(RW,Wlr),e(xM,Hlr),e(io,Ulr),e(io,$M),e($M,Jlr),e($M,wve),e(wve,Ylr),e($M,Klr),e($M,Ave),e(Ave,Zlr),e(io,eir),M(kM,io,null),b(m,PXe,_),b(m,Ed,_),e(Ed,SM),e(SM,Lve),M(I8,Lve,null),e(Ed,oir),e(Ed,yve),e(yve,rir),b(m,BXe,_),b(m,Vo,_),M(N8,Vo,null),e(Vo,tir),e(Vo,Cd),e(Cd,air),e(Cd,PW),e(PW,nir),e(Cd,sir),e(Cd,BW),e(BW,lir),e(Cd,iir),e(Vo,dir),e(Vo,q8),e(q8,cir),e(q8,xve),e(xve,mir),e(q8,fir),e(Vo,gir),e(Vo,Tt),M(j8,Tt,null),e(Tt,hir),e(Tt,$ve),e($ve,uir),e(Tt,pir),e(Tt,wd),e(wd,_ir),e(wd,kve),e(kve,bir),e(wd,vir),e(wd,IW),e(IW,Fir),e(wd,Tir),e(Tt,Mir),M(RM,Tt,null),e(Vo,Eir),e(Vo,co),M(D8,co,null),e(co,Cir),e(co,Sve),e(Sve,wir),e(co,Air),e(co,Ha),e(Ha,Lir),e(Ha,Rve),e(Rve,yir),e(Ha,xir),e(Ha,Pve),e(Pve,$ir),e(Ha,kir),e(Ha,Bve),e(Bve,Sir),e(Ha,Rir),e(co,Pir),e(co,Ive),e(Ive,PM),e(PM,Nve),e(Nve,Bir),e(PM,Iir),e(PM,NW),e(NW,Nir),e(PM,qir),e(co,jir),e(co,BM),e(BM,Dir),e(BM,qve),e(qve,Gir),e(BM,Oir),e(BM,jve),e(jve,Vir),e(co,Xir),M(IM,co,null),b(m,IXe,_),b(m,Ad,_),e(Ad,NM),e(NM,Dve),M(G8,Dve,null),e(Ad,zir),e(Ad,Gve),e(Gve,Qir),b(m,NXe,_),b(m,Xo,_),M(O8,Xo,null),e(Xo,Wir),e(Xo,Ld),e(Ld,Hir),e(Ld,qW),e(qW,Uir),e(Ld,Jir),e(Ld,jW),e(jW,Yir),e(Ld,Kir),e(Xo,Zir),e(Xo,V8),e(V8,edr),e(V8,Ove),e(Ove,odr),e(V8,rdr),e(Xo,tdr),e(Xo,Mt),M(X8,Mt,null),e(Mt,adr),e(Mt,Vve),e(Vve,ndr),e(Mt,sdr),e(Mt,yd),e(yd,ldr),e(yd,Xve),e(Xve,idr),e(yd,ddr),e(yd,DW),e(DW,cdr),e(yd,mdr),e(Mt,fdr),M(qM,Mt,null),e(Xo,gdr),e(Xo,mo),M(z8,mo,null),e(mo,hdr),e(mo,zve),e(zve,udr),e(mo,pdr),e(mo,Ua),e(Ua,_dr),e(Ua,Qve),e(Qve,bdr),e(Ua,vdr),e(Ua,Wve),e(Wve,Fdr),e(Ua,Tdr),e(Ua,Hve),e(Hve,Mdr),e(Ua,Edr),e(mo,Cdr),e(mo,Uve),e(Uve,jM),e(jM,Jve),e(Jve,wdr),e(jM,Adr),e(jM,GW),e(GW,Ldr),e(jM,ydr),e(mo,xdr),e(mo,DM),e(DM,$dr),e(DM,Yve),e(Yve,kdr),e(DM,Sdr),e(DM,Kve),e(Kve,Rdr),e(mo,Pdr),M(GM,mo,null),b(m,qXe,_),b(m,xd,_),e(xd,OM),e(OM,Zve),M(Q8,Zve,null),e(xd,Bdr),e(xd,e1e),e(e1e,Idr),b(m,jXe,_),b(m,zo,_),M(W8,zo,null),e(zo,Ndr),e(zo,$d),e($d,qdr),e($d,OW),e(OW,jdr),e($d,Ddr),e($d,VW),e(VW,Gdr),e($d,Odr),e(zo,Vdr),e(zo,H8),e(H8,Xdr),e(H8,o1e),e(o1e,zdr),e(H8,Qdr),e(zo,Wdr),e(zo,Et),M(U8,Et,null),e(Et,Hdr),e(Et,r1e),e(r1e,Udr),e(Et,Jdr),e(Et,kd),e(kd,Ydr),e(kd,t1e),e(t1e,Kdr),e(kd,Zdr),e(kd,XW),e(XW,ecr),e(kd,ocr),e(Et,rcr),M(VM,Et,null),e(zo,tcr),e(zo,fo),M(J8,fo,null),e(fo,acr),e(fo,a1e),e(a1e,ncr),e(fo,scr),e(fo,Ja),e(Ja,lcr),e(Ja,n1e),e(n1e,icr),e(Ja,dcr),e(Ja,s1e),e(s1e,ccr),e(Ja,mcr),e(Ja,l1e),e(l1e,fcr),e(Ja,gcr),e(fo,hcr),e(fo,Pe),e(Pe,XM),e(XM,i1e),e(i1e,ucr),e(XM,pcr),e(XM,zW),e(zW,_cr),e(XM,bcr),e(Pe,vcr),e(Pe,zM),e(zM,d1e),e(d1e,Fcr),e(zM,Tcr),e(zM,QW),e(QW,Mcr),e(zM,Ecr),e(Pe,Ccr),e(Pe,QM),e(QM,c1e),e(c1e,wcr),e(QM,Acr),e(QM,WW),e(WW,Lcr),e(QM,ycr),e(Pe,xcr),e(Pe,WM),e(WM,m1e),e(m1e,$cr),e(WM,kcr),e(WM,HW),e(HW,Scr),e(WM,Rcr),e(Pe,Pcr),e(Pe,HM),e(HM,f1e),e(f1e,Bcr),e(HM,Icr),e(HM,UW),e(UW,Ncr),e(HM,qcr),e(Pe,jcr),e(Pe,UM),e(UM,g1e),e(g1e,Dcr),e(UM,Gcr),e(UM,JW),e(JW,Ocr),e(UM,Vcr),e(Pe,Xcr),e(Pe,JM),e(JM,h1e),e(h1e,zcr),e(JM,Qcr),e(JM,YW),e(YW,Wcr),e(JM,Hcr),e(Pe,Ucr),e(Pe,YM),e(YM,u1e),e(u1e,Jcr),e(YM,Ycr),e(YM,KW),e(KW,Kcr),e(YM,Zcr),e(Pe,emr),e(Pe,KM),e(KM,p1e),e(p1e,omr),e(KM,rmr),e(KM,ZW),e(ZW,tmr),e(KM,amr),e(fo,nmr),e(fo,ZM),e(ZM,smr),e(ZM,_1e),e(_1e,lmr),e(ZM,imr),e(ZM,b1e),e(b1e,dmr),e(fo,cmr),M(e4,fo,null),b(m,DXe,_),b(m,Sd,_),e(Sd,o4),e(o4,v1e),M(Y8,v1e,null),e(Sd,mmr),e(Sd,F1e),e(F1e,fmr),b(m,GXe,_),b(m,Qo,_),M(K8,Qo,null),e(Qo,gmr),e(Qo,Rd),e(Rd,hmr),e(Rd,eH),e(eH,umr),e(Rd,pmr),e(Rd,oH),e(oH,_mr),e(Rd,bmr),e(Qo,vmr),e(Qo,Z8),e(Z8,Fmr),e(Z8,T1e),e(T1e,Tmr),e(Z8,Mmr),e(Qo,Emr),e(Qo,Ct),M(e9,Ct,null),e(Ct,Cmr),e(Ct,M1e),e(M1e,wmr),e(Ct,Amr),e(Ct,Pd),e(Pd,Lmr),e(Pd,E1e),e(E1e,ymr),e(Pd,xmr),e(Pd,rH),e(rH,$mr),e(Pd,kmr),e(Ct,Smr),M(r4,Ct,null),e(Qo,Rmr),e(Qo,go),M(o9,go,null),e(go,Pmr),e(go,C1e),e(C1e,Bmr),e(go,Imr),e(go,Ya),e(Ya,Nmr),e(Ya,w1e),e(w1e,qmr),e(Ya,jmr),e(Ya,A1e),e(A1e,Dmr),e(Ya,Gmr),e(Ya,L1e),e(L1e,Omr),e(Ya,Vmr),e(go,Xmr),e(go,rt),e(rt,t4),e(t4,y1e),e(y1e,zmr),e(t4,Qmr),e(t4,tH),e(tH,Wmr),e(t4,Hmr),e(rt,Umr),e(rt,a4),e(a4,x1e),e(x1e,Jmr),e(a4,Ymr),e(a4,aH),e(aH,Kmr),e(a4,Zmr),e(rt,efr),e(rt,n4),e(n4,$1e),e($1e,ofr),e(n4,rfr),e(n4,nH),e(nH,tfr),e(n4,afr),e(rt,nfr),e(rt,s4),e(s4,k1e),e(k1e,sfr),e(s4,lfr),e(s4,sH),e(sH,ifr),e(s4,dfr),e(rt,cfr),e(rt,l4),e(l4,S1e),e(S1e,mfr),e(l4,ffr),e(l4,lH),e(lH,gfr),e(l4,hfr),e(go,ufr),e(go,i4),e(i4,pfr),e(i4,R1e),e(R1e,_fr),e(i4,bfr),e(i4,P1e),e(P1e,vfr),e(go,Ffr),M(d4,go,null),b(m,OXe,_),b(m,Bd,_),e(Bd,c4),e(c4,B1e),M(r9,B1e,null),e(Bd,Tfr),e(Bd,I1e),e(I1e,Mfr),b(m,VXe,_),b(m,Wo,_),M(t9,Wo,null),e(Wo,Efr),e(Wo,Id),e(Id,Cfr),e(Id,iH),e(iH,wfr),e(Id,Afr),e(Id,dH),e(dH,Lfr),e(Id,yfr),e(Wo,xfr),e(Wo,a9),e(a9,$fr),e(a9,N1e),e(N1e,kfr),e(a9,Sfr),e(Wo,Rfr),e(Wo,wt),M(n9,wt,null),e(wt,Pfr),e(wt,q1e),e(q1e,Bfr),e(wt,Ifr),e(wt,Nd),e(Nd,Nfr),e(Nd,j1e),e(j1e,qfr),e(Nd,jfr),e(Nd,cH),e(cH,Dfr),e(Nd,Gfr),e(wt,Ofr),M(m4,wt,null),e(Wo,Vfr),e(Wo,ho),M(s9,ho,null),e(ho,Xfr),e(ho,D1e),e(D1e,zfr),e(ho,Qfr),e(ho,Ka),e(Ka,Wfr),e(Ka,G1e),e(G1e,Hfr),e(Ka,Ufr),e(Ka,O1e),e(O1e,Jfr),e(Ka,Yfr),e(Ka,V1e),e(V1e,Kfr),e(Ka,Zfr),e(ho,egr),e(ho,Le),e(Le,f4),e(f4,X1e),e(X1e,ogr),e(f4,rgr),e(f4,mH),e(mH,tgr),e(f4,agr),e(Le,ngr),e(Le,g4),e(g4,z1e),e(z1e,sgr),e(g4,lgr),e(g4,fH),e(fH,igr),e(g4,dgr),e(Le,cgr),e(Le,h4),e(h4,Q1e),e(Q1e,mgr),e(h4,fgr),e(h4,gH),e(gH,ggr),e(h4,hgr),e(Le,ugr),e(Le,u4),e(u4,W1e),e(W1e,pgr),e(u4,_gr),e(u4,hH),e(hH,bgr),e(u4,vgr),e(Le,Fgr),e(Le,p4),e(p4,H1e),e(H1e,Tgr),e(p4,Mgr),e(p4,uH),e(uH,Egr),e(p4,Cgr),e(Le,wgr),e(Le,_4),e(_4,U1e),e(U1e,Agr),e(_4,Lgr),e(_4,pH),e(pH,ygr),e(_4,xgr),e(Le,$gr),e(Le,b4),e(b4,J1e),e(J1e,kgr),e(b4,Sgr),e(b4,_H),e(_H,Rgr),e(b4,Pgr),e(Le,Bgr),e(Le,v4),e(v4,Y1e),e(Y1e,Igr),e(v4,Ngr),e(v4,bH),e(bH,qgr),e(v4,jgr),e(Le,Dgr),e(Le,F4),e(F4,K1e),e(K1e,Ggr),e(F4,Ogr),e(F4,vH),e(vH,Vgr),e(F4,Xgr),e(Le,zgr),e(Le,T4),e(T4,Z1e),e(Z1e,Qgr),e(T4,Wgr),e(T4,FH),e(FH,Hgr),e(T4,Ugr),e(ho,Jgr),e(ho,M4),e(M4,Ygr),e(M4,eFe),e(eFe,Kgr),e(M4,Zgr),e(M4,oFe),e(oFe,ehr),e(ho,ohr),M(E4,ho,null),b(m,XXe,_),b(m,qd,_),e(qd,C4),e(C4,rFe),M(l9,rFe,null),e(qd,rhr),e(qd,tFe),e(tFe,thr),b(m,zXe,_),b(m,Ho,_),M(i9,Ho,null),e(Ho,ahr),e(Ho,jd),e(jd,nhr),e(jd,TH),e(TH,shr),e(jd,lhr),e(jd,MH),e(MH,ihr),e(jd,dhr),e(Ho,chr),e(Ho,d9),e(d9,mhr),e(d9,aFe),e(aFe,fhr),e(d9,ghr),e(Ho,hhr),e(Ho,At),M(c9,At,null),e(At,uhr),e(At,nFe),e(nFe,phr),e(At,_hr),e(At,Dd),e(Dd,bhr),e(Dd,sFe),e(sFe,vhr),e(Dd,Fhr),e(Dd,EH),e(EH,Thr),e(Dd,Mhr),e(At,Ehr),M(w4,At,null),e(Ho,Chr),e(Ho,uo),M(m9,uo,null),e(uo,whr),e(uo,lFe),e(lFe,Ahr),e(uo,Lhr),e(uo,Za),e(Za,yhr),e(Za,iFe),e(iFe,xhr),e(Za,$hr),e(Za,dFe),e(dFe,khr),e(Za,Shr),e(Za,cFe),e(cFe,Rhr),e(Za,Phr),e(uo,Bhr),e(uo,f9),e(f9,A4),e(A4,mFe),e(mFe,Ihr),e(A4,Nhr),e(A4,CH),e(CH,qhr),e(A4,jhr),e(f9,Dhr),e(f9,L4),e(L4,fFe),e(fFe,Ghr),e(L4,Ohr),e(L4,wH),e(wH,Vhr),e(L4,Xhr),e(uo,zhr),e(uo,y4),e(y4,Qhr),e(y4,gFe),e(gFe,Whr),e(y4,Hhr),e(y4,hFe),e(hFe,Uhr),e(uo,Jhr),M(x4,uo,null),b(m,QXe,_),b(m,Gd,_),e(Gd,$4),e($4,uFe),M(g9,uFe,null),e(Gd,Yhr),e(Gd,pFe),e(pFe,Khr),b(m,WXe,_),b(m,Uo,_),M(h9,Uo,null),e(Uo,Zhr),e(Uo,Od),e(Od,eur),e(Od,AH),e(AH,our),e(Od,rur),e(Od,LH),e(LH,tur),e(Od,aur),e(Uo,nur),e(Uo,u9),e(u9,sur),e(u9,_Fe),e(_Fe,lur),e(u9,iur),e(Uo,dur),e(Uo,Lt),M(p9,Lt,null),e(Lt,cur),e(Lt,bFe),e(bFe,mur),e(Lt,fur),e(Lt,Vd),e(Vd,gur),e(Vd,vFe),e(vFe,hur),e(Vd,uur),e(Vd,yH),e(yH,pur),e(Vd,_ur),e(Lt,bur),M(k4,Lt,null),e(Uo,vur),e(Uo,po),M(_9,po,null),e(po,Fur),e(po,FFe),e(FFe,Tur),e(po,Mur),e(po,en),e(en,Eur),e(en,TFe),e(TFe,Cur),e(en,wur),e(en,MFe),e(MFe,Aur),e(en,Lur),e(en,EFe),e(EFe,yur),e(en,xur),e(po,$ur),e(po,tt),e(tt,S4),e(S4,CFe),e(CFe,kur),e(S4,Sur),e(S4,xH),e(xH,Rur),e(S4,Pur),e(tt,Bur),e(tt,R4),e(R4,wFe),e(wFe,Iur),e(R4,Nur),e(R4,$H),e($H,qur),e(R4,jur),e(tt,Dur),e(tt,P4),e(P4,AFe),e(AFe,Gur),e(P4,Our),e(P4,kH),e(kH,Vur),e(P4,Xur),e(tt,zur),e(tt,B4),e(B4,LFe),e(LFe,Qur),e(B4,Wur),e(B4,SH),e(SH,Hur),e(B4,Uur),e(tt,Jur),e(tt,I4),e(I4,yFe),e(yFe,Yur),e(I4,Kur),e(I4,RH),e(RH,Zur),e(I4,epr),e(po,opr),e(po,N4),e(N4,rpr),e(N4,xFe),e(xFe,tpr),e(N4,apr),e(N4,$Fe),e($Fe,npr),e(po,spr),M(q4,po,null),b(m,HXe,_),b(m,Xd,_),e(Xd,j4),e(j4,kFe),M(b9,kFe,null),e(Xd,lpr),e(Xd,SFe),e(SFe,ipr),b(m,UXe,_),b(m,Jo,_),M(v9,Jo,null),e(Jo,dpr),e(Jo,zd),e(zd,cpr),e(zd,PH),e(PH,mpr),e(zd,fpr),e(zd,BH),e(BH,gpr),e(zd,hpr),e(Jo,upr),e(Jo,F9),e(F9,ppr),e(F9,RFe),e(RFe,_pr),e(F9,bpr),e(Jo,vpr),e(Jo,yt),M(T9,yt,null),e(yt,Fpr),e(yt,PFe),e(PFe,Tpr),e(yt,Mpr),e(yt,Qd),e(Qd,Epr),e(Qd,BFe),e(BFe,Cpr),e(Qd,wpr),e(Qd,IH),e(IH,Apr),e(Qd,Lpr),e(yt,ypr),M(D4,yt,null),e(Jo,xpr),e(Jo,_o),M(M9,_o,null),e(_o,$pr),e(_o,IFe),e(IFe,kpr),e(_o,Spr),e(_o,on),e(on,Rpr),e(on,NFe),e(NFe,Ppr),e(on,Bpr),e(on,qFe),e(qFe,Ipr),e(on,Npr),e(on,jFe),e(jFe,qpr),e(on,jpr),e(_o,Dpr),e(_o,Wd),e(Wd,G4),e(G4,DFe),e(DFe,Gpr),e(G4,Opr),e(G4,NH),e(NH,Vpr),e(G4,Xpr),e(Wd,zpr),e(Wd,O4),e(O4,GFe),e(GFe,Qpr),e(O4,Wpr),e(O4,qH),e(qH,Hpr),e(O4,Upr),e(Wd,Jpr),e(Wd,V4),e(V4,OFe),e(OFe,Ypr),e(V4,Kpr),e(V4,jH),e(jH,Zpr),e(V4,e_r),e(_o,o_r),e(_o,X4),e(X4,r_r),e(X4,VFe),e(VFe,t_r),e(X4,a_r),e(X4,XFe),e(XFe,n_r),e(_o,s_r),M(z4,_o,null),b(m,JXe,_),b(m,Hd,_),e(Hd,Q4),e(Q4,zFe),M(E9,zFe,null),e(Hd,l_r),e(Hd,QFe),e(QFe,i_r),b(m,YXe,_),b(m,Yo,_),M(C9,Yo,null),e(Yo,d_r),e(Yo,Ud),e(Ud,c_r),e(Ud,DH),e(DH,m_r),e(Ud,f_r),e(Ud,GH),e(GH,g_r),e(Ud,h_r),e(Yo,u_r),e(Yo,w9),e(w9,p_r),e(w9,WFe),e(WFe,__r),e(w9,b_r),e(Yo,v_r),e(Yo,xt),M(A9,xt,null),e(xt,F_r),e(xt,HFe),e(HFe,T_r),e(xt,M_r),e(xt,Jd),e(Jd,E_r),e(Jd,UFe),e(UFe,C_r),e(Jd,w_r),e(Jd,OH),e(OH,A_r),e(Jd,L_r),e(xt,y_r),M(W4,xt,null),e(Yo,x_r),e(Yo,bo),M(L9,bo,null),e(bo,$_r),e(bo,JFe),e(JFe,k_r),e(bo,S_r),e(bo,rn),e(rn,R_r),e(rn,YFe),e(YFe,P_r),e(rn,B_r),e(rn,KFe),e(KFe,I_r),e(rn,N_r),e(rn,ZFe),e(ZFe,q_r),e(rn,j_r),e(bo,D_r),e(bo,y9),e(y9,H4),e(H4,eTe),e(eTe,G_r),e(H4,O_r),e(H4,VH),e(VH,V_r),e(H4,X_r),e(y9,z_r),e(y9,U4),e(U4,oTe),e(oTe,Q_r),e(U4,W_r),e(U4,XH),e(XH,H_r),e(U4,U_r),e(bo,J_r),e(bo,J4),e(J4,Y_r),e(J4,rTe),e(rTe,K_r),e(J4,Z_r),e(J4,tTe),e(tTe,e2r),e(bo,o2r),M(Y4,bo,null),b(m,KXe,_),b(m,Yd,_),e(Yd,K4),e(K4,aTe),M(x9,aTe,null),e(Yd,r2r),e(Yd,nTe),e(nTe,t2r),b(m,ZXe,_),b(m,Ko,_),M($9,Ko,null),e(Ko,a2r),e(Ko,Kd),e(Kd,n2r),e(Kd,zH),e(zH,s2r),e(Kd,l2r),e(Kd,QH),e(QH,i2r),e(Kd,d2r),e(Ko,c2r),e(Ko,k9),e(k9,m2r),e(k9,sTe),e(sTe,f2r),e(k9,g2r),e(Ko,h2r),e(Ko,$t),M(S9,$t,null),e($t,u2r),e($t,lTe),e(lTe,p2r),e($t,_2r),e($t,Zd),e(Zd,b2r),e(Zd,iTe),e(iTe,v2r),e(Zd,F2r),e(Zd,WH),e(WH,T2r),e(Zd,M2r),e($t,E2r),M(Z4,$t,null),e(Ko,C2r),e(Ko,vo),M(R9,vo,null),e(vo,w2r),e(vo,dTe),e(dTe,A2r),e(vo,L2r),e(vo,tn),e(tn,y2r),e(tn,cTe),e(cTe,x2r),e(tn,$2r),e(tn,mTe),e(mTe,k2r),e(tn,S2r),e(tn,fTe),e(fTe,R2r),e(tn,P2r),e(vo,B2r),e(vo,gTe),e(gTe,eE),e(eE,hTe),e(hTe,I2r),e(eE,N2r),e(eE,HH),e(HH,q2r),e(eE,j2r),e(vo,D2r),e(vo,oE),e(oE,G2r),e(oE,uTe),e(uTe,O2r),e(oE,V2r),e(oE,pTe),e(pTe,X2r),e(vo,z2r),M(rE,vo,null),b(m,eze,_),b(m,ec,_),e(ec,tE),e(tE,_Te),M(P9,_Te,null),e(ec,Q2r),e(ec,bTe),e(bTe,W2r),b(m,oze,_),b(m,Zo,_),M(B9,Zo,null),e(Zo,H2r),e(Zo,oc),e(oc,U2r),e(oc,UH),e(UH,J2r),e(oc,Y2r),e(oc,JH),e(JH,K2r),e(oc,Z2r),e(Zo,ebr),e(Zo,I9),e(I9,obr),e(I9,vTe),e(vTe,rbr),e(I9,tbr),e(Zo,abr),e(Zo,kt),M(N9,kt,null),e(kt,nbr),e(kt,FTe),e(FTe,sbr),e(kt,lbr),e(kt,rc),e(rc,ibr),e(rc,TTe),e(TTe,dbr),e(rc,cbr),e(rc,YH),e(YH,mbr),e(rc,fbr),e(kt,gbr),M(aE,kt,null),e(Zo,hbr),e(Zo,Fo),M(q9,Fo,null),e(Fo,ubr),e(Fo,MTe),e(MTe,pbr),e(Fo,_br),e(Fo,an),e(an,bbr),e(an,ETe),e(ETe,vbr),e(an,Fbr),e(an,CTe),e(CTe,Tbr),e(an,Mbr),e(an,wTe),e(wTe,Ebr),e(an,Cbr),e(Fo,wbr),e(Fo,at),e(at,nE),e(nE,ATe),e(ATe,Abr),e(nE,Lbr),e(nE,KH),e(KH,ybr),e(nE,xbr),e(at,$br),e(at,sE),e(sE,LTe),e(LTe,kbr),e(sE,Sbr),e(sE,ZH),e(ZH,Rbr),e(sE,Pbr),e(at,Bbr),e(at,lE),e(lE,yTe),e(yTe,Ibr),e(lE,Nbr),e(lE,eU),e(eU,qbr),e(lE,jbr),e(at,Dbr),e(at,iE),e(iE,xTe),e(xTe,Gbr),e(iE,Obr),e(iE,oU),e(oU,Vbr),e(iE,Xbr),e(at,zbr),e(at,dE),e(dE,$Te),e($Te,Qbr),e(dE,Wbr),e(dE,rU),e(rU,Hbr),e(dE,Ubr),e(Fo,Jbr),e(Fo,cE),e(cE,Ybr),e(cE,kTe),e(kTe,Kbr),e(cE,Zbr),e(cE,STe),e(STe,evr),e(Fo,ovr),M(mE,Fo,null),b(m,rze,_),b(m,tc,_),e(tc,fE),e(fE,RTe),M(j9,RTe,null),e(tc,rvr),e(tc,PTe),e(PTe,tvr),b(m,tze,_),b(m,er,_),M(D9,er,null),e(er,avr),e(er,ac),e(ac,nvr),e(ac,tU),e(tU,svr),e(ac,lvr),e(ac,aU),e(aU,ivr),e(ac,dvr),e(er,cvr),e(er,G9),e(G9,mvr),e(G9,BTe),e(BTe,fvr),e(G9,gvr),e(er,hvr),e(er,St),M(O9,St,null),e(St,uvr),e(St,ITe),e(ITe,pvr),e(St,_vr),e(St,nc),e(nc,bvr),e(nc,NTe),e(NTe,vvr),e(nc,Fvr),e(nc,nU),e(nU,Tvr),e(nc,Mvr),e(St,Evr),M(gE,St,null),e(er,Cvr),e(er,To),M(V9,To,null),e(To,wvr),e(To,qTe),e(qTe,Avr),e(To,Lvr),e(To,nn),e(nn,yvr),e(nn,jTe),e(jTe,xvr),e(nn,$vr),e(nn,DTe),e(DTe,kvr),e(nn,Svr),e(nn,GTe),e(GTe,Rvr),e(nn,Pvr),e(To,Bvr),e(To,OTe),e(OTe,hE),e(hE,VTe),e(VTe,Ivr),e(hE,Nvr),e(hE,sU),e(sU,qvr),e(hE,jvr),e(To,Dvr),e(To,uE),e(uE,Gvr),e(uE,XTe),e(XTe,Ovr),e(uE,Vvr),e(uE,zTe),e(zTe,Xvr),e(To,zvr),M(pE,To,null),b(m,aze,_),b(m,sc,_),e(sc,_E),e(_E,QTe),M(X9,QTe,null),e(sc,Qvr),e(sc,WTe),e(WTe,Wvr),b(m,nze,_),b(m,or,_),M(z9,or,null),e(or,Hvr),e(or,lc),e(lc,Uvr),e(lc,lU),e(lU,Jvr),e(lc,Yvr),e(lc,iU),e(iU,Kvr),e(lc,Zvr),e(or,e1r),e(or,Q9),e(Q9,o1r),e(Q9,HTe),e(HTe,r1r),e(Q9,t1r),e(or,a1r),e(or,Rt),M(W9,Rt,null),e(Rt,n1r),e(Rt,UTe),e(UTe,s1r),e(Rt,l1r),e(Rt,ic),e(ic,i1r),e(ic,JTe),e(JTe,d1r),e(ic,c1r),e(ic,dU),e(dU,m1r),e(ic,f1r),e(Rt,g1r),M(bE,Rt,null),e(or,h1r),e(or,xr),M(H9,xr,null),e(xr,u1r),e(xr,YTe),e(YTe,p1r),e(xr,_1r),e(xr,sn),e(sn,b1r),e(sn,KTe),e(KTe,v1r),e(sn,F1r),e(sn,ZTe),e(ZTe,T1r),e(sn,M1r),e(sn,eMe),e(eMe,E1r),e(sn,C1r),e(xr,w1r),e(xr,q),e(q,vE),e(vE,oMe),e(oMe,A1r),e(vE,L1r),e(vE,cU),e(cU,y1r),e(vE,x1r),e(q,$1r),e(q,FE),e(FE,rMe),e(rMe,k1r),e(FE,S1r),e(FE,mU),e(mU,R1r),e(FE,P1r),e(q,B1r),e(q,TE),e(TE,tMe),e(tMe,I1r),e(TE,N1r),e(TE,fU),e(fU,q1r),e(TE,j1r),e(q,D1r),e(q,ME),e(ME,aMe),e(aMe,G1r),e(ME,O1r),e(ME,gU),e(gU,V1r),e(ME,X1r),e(q,z1r),e(q,EE),e(EE,nMe),e(nMe,Q1r),e(EE,W1r),e(EE,hU),e(hU,H1r),e(EE,U1r),e(q,J1r),e(q,CE),e(CE,sMe),e(sMe,Y1r),e(CE,K1r),e(CE,uU),e(uU,Z1r),e(CE,eFr),e(q,oFr),e(q,wE),e(wE,lMe),e(lMe,rFr),e(wE,tFr),e(wE,pU),e(pU,aFr),e(wE,nFr),e(q,sFr),e(q,AE),e(AE,iMe),e(iMe,lFr),e(AE,iFr),e(AE,_U),e(_U,dFr),e(AE,cFr),e(q,mFr),e(q,LE),e(LE,dMe),e(dMe,fFr),e(LE,gFr),e(LE,bU),e(bU,hFr),e(LE,uFr),e(q,pFr),e(q,yE),e(yE,cMe),e(cMe,_Fr),e(yE,bFr),e(yE,vU),e(vU,vFr),e(yE,FFr),e(q,TFr),e(q,xE),e(xE,mMe),e(mMe,MFr),e(xE,EFr),e(xE,FU),e(FU,CFr),e(xE,wFr),e(q,AFr),e(q,$E),e($E,fMe),e(fMe,LFr),e($E,yFr),e($E,TU),e(TU,xFr),e($E,$Fr),e(q,kFr),e(q,kE),e(kE,gMe),e(gMe,SFr),e(kE,RFr),e(kE,MU),e(MU,PFr),e(kE,BFr),e(q,IFr),e(q,SE),e(SE,hMe),e(hMe,NFr),e(SE,qFr),e(SE,EU),e(EU,jFr),e(SE,DFr),e(q,GFr),e(q,RE),e(RE,uMe),e(uMe,OFr),e(RE,VFr),e(RE,CU),e(CU,XFr),e(RE,zFr),e(q,QFr),e(q,PE),e(PE,pMe),e(pMe,WFr),e(PE,HFr),e(PE,wU),e(wU,UFr),e(PE,JFr),e(q,YFr),e(q,BE),e(BE,_Me),e(_Me,KFr),e(BE,ZFr),e(BE,AU),e(AU,eTr),e(BE,oTr),e(q,rTr),e(q,IE),e(IE,bMe),e(bMe,tTr),e(IE,aTr),e(IE,LU),e(LU,nTr),e(IE,sTr),e(q,lTr),e(q,Js),e(Js,vMe),e(vMe,iTr),e(Js,dTr),e(Js,yU),e(yU,cTr),e(Js,mTr),e(Js,xU),e(xU,fTr),e(Js,gTr),e(q,hTr),e(q,NE),e(NE,FMe),e(FMe,uTr),e(NE,pTr),e(NE,$U),e($U,_Tr),e(NE,bTr),e(q,vTr),e(q,qE),e(qE,TMe),e(TMe,FTr),e(qE,TTr),e(qE,kU),e(kU,MTr),e(qE,ETr),e(q,CTr),e(q,jE),e(jE,MMe),e(MMe,wTr),e(jE,ATr),e(jE,SU),e(SU,LTr),e(jE,yTr),e(q,xTr),e(q,DE),e(DE,EMe),e(EMe,$Tr),e(DE,kTr),e(DE,RU),e(RU,STr),e(DE,RTr),e(q,PTr),e(q,GE),e(GE,CMe),e(CMe,BTr),e(GE,ITr),e(GE,PU),e(PU,NTr),e(GE,qTr),e(q,jTr),e(q,OE),e(OE,wMe),e(wMe,DTr),e(OE,GTr),e(OE,BU),e(BU,OTr),e(OE,VTr),e(q,XTr),e(q,VE),e(VE,AMe),e(AMe,zTr),e(VE,QTr),e(VE,IU),e(IU,WTr),e(VE,HTr),e(q,UTr),e(q,XE),e(XE,LMe),e(LMe,JTr),e(XE,YTr),e(XE,NU),e(NU,KTr),e(XE,ZTr),e(q,eMr),e(q,zE),e(zE,yMe),e(yMe,oMr),e(zE,rMr),e(zE,qU),e(qU,tMr),e(zE,aMr),e(q,nMr),e(q,QE),e(QE,xMe),e(xMe,sMr),e(QE,lMr),e(QE,jU),e(jU,iMr),e(QE,dMr),e(q,cMr),e(q,WE),e(WE,$Me),e($Me,mMr),e(WE,fMr),e(WE,DU),e(DU,gMr),e(WE,hMr),e(q,uMr),e(q,HE),e(HE,kMe),e(kMe,pMr),e(HE,_Mr),e(HE,GU),e(GU,bMr),e(HE,vMr),e(q,FMr),e(q,UE),e(UE,SMe),e(SMe,TMr),e(UE,MMr),e(UE,OU),e(OU,EMr),e(UE,CMr),e(q,wMr),e(q,JE),e(JE,RMe),e(RMe,AMr),e(JE,LMr),e(JE,VU),e(VU,yMr),e(JE,xMr),e(q,$Mr),e(q,YE),e(YE,PMe),e(PMe,kMr),e(YE,SMr),e(YE,XU),e(XU,RMr),e(YE,PMr),e(q,BMr),e(q,KE),e(KE,BMe),e(BMe,IMr),e(KE,NMr),e(KE,zU),e(zU,qMr),e(KE,jMr),e(q,DMr),e(q,ZE),e(ZE,IMe),e(IMe,GMr),e(ZE,OMr),e(ZE,QU),e(QU,VMr),e(ZE,XMr),e(q,zMr),e(q,eC),e(eC,NMe),e(NMe,QMr),e(eC,WMr),e(eC,WU),e(WU,HMr),e(eC,UMr),e(q,JMr),e(q,oC),e(oC,qMe),e(qMe,YMr),e(oC,KMr),e(oC,HU),e(HU,ZMr),e(oC,e4r),e(q,o4r),e(q,rC),e(rC,jMe),e(jMe,r4r),e(rC,t4r),e(rC,UU),e(UU,a4r),e(rC,n4r),e(q,s4r),e(q,tC),e(tC,DMe),e(DMe,l4r),e(tC,i4r),e(tC,JU),e(JU,d4r),e(tC,c4r),e(q,m4r),e(q,aC),e(aC,GMe),e(GMe,f4r),e(aC,g4r),e(aC,YU),e(YU,h4r),e(aC,u4r),e(q,p4r),e(q,nC),e(nC,OMe),e(OMe,_4r),e(nC,b4r),e(nC,KU),e(KU,v4r),e(nC,F4r),e(q,T4r),e(q,sC),e(sC,VMe),e(VMe,M4r),e(sC,E4r),e(sC,ZU),e(ZU,C4r),e(sC,w4r),e(q,A4r),e(q,lC),e(lC,XMe),e(XMe,L4r),e(lC,y4r),e(lC,eJ),e(eJ,x4r),e(lC,$4r),e(q,k4r),e(q,iC),e(iC,zMe),e(zMe,S4r),e(iC,R4r),e(iC,oJ),e(oJ,P4r),e(iC,B4r),e(q,I4r),e(q,dC),e(dC,QMe),e(QMe,N4r),e(dC,q4r),e(dC,rJ),e(rJ,j4r),e(dC,D4r),e(q,G4r),e(q,cC),e(cC,WMe),e(WMe,O4r),e(cC,V4r),e(cC,tJ),e(tJ,X4r),e(cC,z4r),e(q,Q4r),e(q,mC),e(mC,HMe),e(HMe,W4r),e(mC,H4r),e(mC,aJ),e(aJ,U4r),e(mC,J4r),e(q,Y4r),e(q,fC),e(fC,UMe),e(UMe,K4r),e(fC,Z4r),e(fC,nJ),e(nJ,eEr),e(fC,oEr),e(q,rEr),e(q,gC),e(gC,JMe),e(JMe,tEr),e(gC,aEr),e(gC,sJ),e(sJ,nEr),e(gC,sEr),e(xr,lEr),M(hC,xr,null),b(m,sze,_),b(m,dc,_),e(dc,uC),e(uC,YMe),M(U9,YMe,null),e(dc,iEr),e(dc,KMe),e(KMe,dEr),b(m,lze,_),b(m,rr,_),M(J9,rr,null),e(rr,cEr),e(rr,cc),e(cc,mEr),e(cc,lJ),e(lJ,fEr),e(cc,gEr),e(cc,iJ),e(iJ,hEr),e(cc,uEr),e(rr,pEr),e(rr,Y9),e(Y9,_Er),e(Y9,ZMe),e(ZMe,bEr),e(Y9,vEr),e(rr,FEr),e(rr,Pt),M(K9,Pt,null),e(Pt,TEr),e(Pt,e4e),e(e4e,MEr),e(Pt,EEr),e(Pt,mc),e(mc,CEr),e(mc,o4e),e(o4e,wEr),e(mc,AEr),e(mc,dJ),e(dJ,LEr),e(mc,yEr),e(Pt,xEr),M(pC,Pt,null),e(rr,$Er),e(rr,$r),M(Z9,$r,null),e($r,kEr),e($r,r4e),e(r4e,SEr),e($r,REr),e($r,ln),e(ln,PEr),e(ln,t4e),e(t4e,BEr),e(ln,IEr),e(ln,a4e),e(a4e,NEr),e(ln,qEr),e(ln,n4e),e(n4e,jEr),e(ln,DEr),e($r,GEr),e($r,se),e(se,_C),e(_C,s4e),e(s4e,OEr),e(_C,VEr),e(_C,cJ),e(cJ,XEr),e(_C,zEr),e(se,QEr),e(se,bC),e(bC,l4e),e(l4e,WEr),e(bC,HEr),e(bC,mJ),e(mJ,UEr),e(bC,JEr),e(se,YEr),e(se,vC),e(vC,i4e),e(i4e,KEr),e(vC,ZEr),e(vC,fJ),e(fJ,eCr),e(vC,oCr),e(se,rCr),e(se,FC),e(FC,d4e),e(d4e,tCr),e(FC,aCr),e(FC,gJ),e(gJ,nCr),e(FC,sCr),e(se,lCr),e(se,TC),e(TC,c4e),e(c4e,iCr),e(TC,dCr),e(TC,hJ),e(hJ,cCr),e(TC,mCr),e(se,fCr),e(se,MC),e(MC,m4e),e(m4e,gCr),e(MC,hCr),e(MC,uJ),e(uJ,uCr),e(MC,pCr),e(se,_Cr),e(se,EC),e(EC,f4e),e(f4e,bCr),e(EC,vCr),e(EC,pJ),e(pJ,FCr),e(EC,TCr),e(se,MCr),e(se,CC),e(CC,g4e),e(g4e,ECr),e(CC,CCr),e(CC,_J),e(_J,wCr),e(CC,ACr),e(se,LCr),e(se,wC),e(wC,h4e),e(h4e,yCr),e(wC,xCr),e(wC,bJ),e(bJ,$Cr),e(wC,kCr),e(se,SCr),e(se,AC),e(AC,u4e),e(u4e,RCr),e(AC,PCr),e(AC,vJ),e(vJ,BCr),e(AC,ICr),e(se,NCr),e(se,LC),e(LC,p4e),e(p4e,qCr),e(LC,jCr),e(LC,FJ),e(FJ,DCr),e(LC,GCr),e(se,OCr),e(se,yC),e(yC,_4e),e(_4e,VCr),e(yC,XCr),e(yC,TJ),e(TJ,zCr),e(yC,QCr),e(se,WCr),e(se,xC),e(xC,b4e),e(b4e,HCr),e(xC,UCr),e(xC,MJ),e(MJ,JCr),e(xC,YCr),e(se,KCr),e(se,$C),e($C,v4e),e(v4e,ZCr),e($C,e3r),e($C,EJ),e(EJ,o3r),e($C,r3r),e(se,t3r),e(se,kC),e(kC,F4e),e(F4e,a3r),e(kC,n3r),e(kC,CJ),e(CJ,s3r),e(kC,l3r),e(se,i3r),e(se,SC),e(SC,T4e),e(T4e,d3r),e(SC,c3r),e(SC,wJ),e(wJ,m3r),e(SC,f3r),e(se,g3r),e(se,RC),e(RC,M4e),e(M4e,h3r),e(RC,u3r),e(RC,AJ),e(AJ,p3r),e(RC,_3r),e(se,b3r),e(se,PC),e(PC,E4e),e(E4e,v3r),e(PC,F3r),e(PC,LJ),e(LJ,T3r),e(PC,M3r),e(se,E3r),e(se,BC),e(BC,C4e),e(C4e,C3r),e(BC,w3r),e(BC,yJ),e(yJ,A3r),e(BC,L3r),e(se,y3r),e(se,IC),e(IC,w4e),e(w4e,x3r),e(IC,$3r),e(IC,xJ),e(xJ,k3r),e(IC,S3r),e(se,R3r),e(se,NC),e(NC,A4e),e(A4e,P3r),e(NC,B3r),e(NC,$J),e($J,I3r),e(NC,N3r),e(se,q3r),e(se,qC),e(qC,L4e),e(L4e,j3r),e(qC,D3r),e(qC,kJ),e(kJ,G3r),e(qC,O3r),e(se,V3r),e(se,jC),e(jC,y4e),e(y4e,X3r),e(jC,z3r),e(jC,SJ),e(SJ,Q3r),e(jC,W3r),e($r,H3r),M(DC,$r,null),b(m,ize,_),b(m,fc,_),e(fc,GC),e(GC,x4e),M(ex,x4e,null),e(fc,U3r),e(fc,$4e),e($4e,J3r),b(m,dze,_),b(m,tr,_),M(ox,tr,null),e(tr,Y3r),e(tr,gc),e(gc,K3r),e(gc,RJ),e(RJ,Z3r),e(gc,e5r),e(gc,PJ),e(PJ,o5r),e(gc,r5r),e(tr,t5r),e(tr,rx),e(rx,a5r),e(rx,k4e),e(k4e,n5r),e(rx,s5r),e(tr,l5r),e(tr,Bt),M(tx,Bt,null),e(Bt,i5r),e(Bt,S4e),e(S4e,d5r),e(Bt,c5r),e(Bt,hc),e(hc,m5r),e(hc,R4e),e(R4e,f5r),e(hc,g5r),e(hc,BJ),e(BJ,h5r),e(hc,u5r),e(Bt,p5r),M(OC,Bt,null),e(tr,_5r),e(tr,kr),M(ax,kr,null),e(kr,b5r),e(kr,P4e),e(P4e,v5r),e(kr,F5r),e(kr,dn),e(dn,T5r),e(dn,B4e),e(B4e,M5r),e(dn,E5r),e(dn,I4e),e(I4e,C5r),e(dn,w5r),e(dn,N4e),e(N4e,A5r),e(dn,L5r),e(kr,y5r),e(kr,Me),e(Me,VC),e(VC,q4e),e(q4e,x5r),e(VC,$5r),e(VC,IJ),e(IJ,k5r),e(VC,S5r),e(Me,R5r),e(Me,XC),e(XC,j4e),e(j4e,P5r),e(XC,B5r),e(XC,NJ),e(NJ,I5r),e(XC,N5r),e(Me,q5r),e(Me,zC),e(zC,D4e),e(D4e,j5r),e(zC,D5r),e(zC,qJ),e(qJ,G5r),e(zC,O5r),e(Me,V5r),e(Me,QC),e(QC,G4e),e(G4e,X5r),e(QC,z5r),e(QC,jJ),e(jJ,Q5r),e(QC,W5r),e(Me,H5r),e(Me,WC),e(WC,O4e),e(O4e,U5r),e(WC,J5r),e(WC,DJ),e(DJ,Y5r),e(WC,K5r),e(Me,Z5r),e(Me,HC),e(HC,V4e),e(V4e,e0r),e(HC,o0r),e(HC,GJ),e(GJ,r0r),e(HC,t0r),e(Me,a0r),e(Me,UC),e(UC,X4e),e(X4e,n0r),e(UC,s0r),e(UC,OJ),e(OJ,l0r),e(UC,i0r),e(Me,d0r),e(Me,JC),e(JC,z4e),e(z4e,c0r),e(JC,m0r),e(JC,VJ),e(VJ,f0r),e(JC,g0r),e(Me,h0r),e(Me,YC),e(YC,Q4e),e(Q4e,u0r),e(YC,p0r),e(YC,XJ),e(XJ,_0r),e(YC,b0r),e(Me,v0r),e(Me,KC),e(KC,W4e),e(W4e,F0r),e(KC,T0r),e(KC,zJ),e(zJ,M0r),e(KC,E0r),e(Me,C0r),e(Me,ZC),e(ZC,H4e),e(H4e,w0r),e(ZC,A0r),e(ZC,QJ),e(QJ,L0r),e(ZC,y0r),e(Me,x0r),e(Me,e3),e(e3,U4e),e(U4e,$0r),e(e3,k0r),e(e3,WJ),e(WJ,S0r),e(e3,R0r),e(Me,P0r),e(Me,o3),e(o3,J4e),e(J4e,B0r),e(o3,I0r),e(o3,HJ),e(HJ,N0r),e(o3,q0r),e(kr,j0r),M(r3,kr,null),b(m,cze,_),b(m,uc,_),e(uc,t3),e(t3,Y4e),M(nx,Y4e,null),e(uc,D0r),e(uc,K4e),e(K4e,G0r),b(m,mze,_),b(m,ar,_),M(sx,ar,null),e(ar,O0r),e(ar,pc),e(pc,V0r),e(pc,UJ),e(UJ,X0r),e(pc,z0r),e(pc,JJ),e(JJ,Q0r),e(pc,W0r),e(ar,H0r),e(ar,lx),e(lx,U0r),e(lx,Z4e),e(Z4e,J0r),e(lx,Y0r),e(ar,K0r),e(ar,It),M(ix,It,null),e(It,Z0r),e(It,eEe),e(eEe,ewr),e(It,owr),e(It,_c),e(_c,rwr),e(_c,oEe),e(oEe,twr),e(_c,awr),e(_c,YJ),e(YJ,nwr),e(_c,swr),e(It,lwr),M(a3,It,null),e(ar,iwr),e(ar,Sr),M(dx,Sr,null),e(Sr,dwr),e(Sr,rEe),e(rEe,cwr),e(Sr,mwr),e(Sr,cn),e(cn,fwr),e(cn,tEe),e(tEe,gwr),e(cn,hwr),e(cn,aEe),e(aEe,uwr),e(cn,pwr),e(cn,nEe),e(nEe,_wr),e(cn,bwr),e(Sr,vwr),e(Sr,Qe),e(Qe,n3),e(n3,sEe),e(sEe,Fwr),e(n3,Twr),e(n3,KJ),e(KJ,Mwr),e(n3,Ewr),e(Qe,Cwr),e(Qe,s3),e(s3,lEe),e(lEe,wwr),e(s3,Awr),e(s3,ZJ),e(ZJ,Lwr),e(s3,ywr),e(Qe,xwr),e(Qe,Ys),e(Ys,iEe),e(iEe,$wr),e(Ys,kwr),e(Ys,eY),e(eY,Swr),e(Ys,Rwr),e(Ys,oY),e(oY,Pwr),e(Ys,Bwr),e(Qe,Iwr),e(Qe,l3),e(l3,dEe),e(dEe,Nwr),e(l3,qwr),e(l3,rY),e(rY,jwr),e(l3,Dwr),e(Qe,Gwr),e(Qe,i3),e(i3,cEe),e(cEe,Owr),e(i3,Vwr),e(i3,tY),e(tY,Xwr),e(i3,zwr),e(Qe,Qwr),e(Qe,d3),e(d3,mEe),e(mEe,Wwr),e(d3,Hwr),e(d3,aY),e(aY,Uwr),e(d3,Jwr),e(Qe,Ywr),e(Qe,c3),e(c3,fEe),e(fEe,Kwr),e(c3,Zwr),e(c3,nY),e(nY,eAr),e(c3,oAr),e(Sr,rAr),M(m3,Sr,null),b(m,fze,_),b(m,bc,_),e(bc,f3),e(f3,gEe),M(cx,gEe,null),e(bc,tAr),e(bc,hEe),e(hEe,aAr),b(m,gze,_),b(m,nr,_),M(mx,nr,null),e(nr,nAr),e(nr,vc),e(vc,sAr),e(vc,sY),e(sY,lAr),e(vc,iAr),e(vc,lY),e(lY,dAr),e(vc,cAr),e(nr,mAr),e(nr,fx),e(fx,fAr),e(fx,uEe),e(uEe,gAr),e(fx,hAr),e(nr,uAr),e(nr,Nt),M(gx,Nt,null),e(Nt,pAr),e(Nt,pEe),e(pEe,_Ar),e(Nt,bAr),e(Nt,Fc),e(Fc,vAr),e(Fc,_Ee),e(_Ee,FAr),e(Fc,TAr),e(Fc,iY),e(iY,MAr),e(Fc,EAr),e(Nt,CAr),M(g3,Nt,null),e(nr,wAr),e(nr,Rr),M(hx,Rr,null),e(Rr,AAr),e(Rr,bEe),e(bEe,LAr),e(Rr,yAr),e(Rr,mn),e(mn,xAr),e(mn,vEe),e(vEe,$Ar),e(mn,kAr),e(mn,FEe),e(FEe,SAr),e(mn,RAr),e(mn,TEe),e(TEe,PAr),e(mn,BAr),e(Rr,IAr),e(Rr,ie),e(ie,h3),e(h3,MEe),e(MEe,NAr),e(h3,qAr),e(h3,dY),e(dY,jAr),e(h3,DAr),e(ie,GAr),e(ie,u3),e(u3,EEe),e(EEe,OAr),e(u3,VAr),e(u3,cY),e(cY,XAr),e(u3,zAr),e(ie,QAr),e(ie,p3),e(p3,CEe),e(CEe,WAr),e(p3,HAr),e(p3,mY),e(mY,UAr),e(p3,JAr),e(ie,YAr),e(ie,_3),e(_3,wEe),e(wEe,KAr),e(_3,ZAr),e(_3,fY),e(fY,e6r),e(_3,o6r),e(ie,r6r),e(ie,b3),e(b3,AEe),e(AEe,t6r),e(b3,a6r),e(b3,gY),e(gY,n6r),e(b3,s6r),e(ie,l6r),e(ie,v3),e(v3,LEe),e(LEe,i6r),e(v3,d6r),e(v3,hY),e(hY,c6r),e(v3,m6r),e(ie,f6r),e(ie,F3),e(F3,yEe),e(yEe,g6r),e(F3,h6r),e(F3,uY),e(uY,u6r),e(F3,p6r),e(ie,_6r),e(ie,T3),e(T3,xEe),e(xEe,b6r),e(T3,v6r),e(T3,pY),e(pY,F6r),e(T3,T6r),e(ie,M6r),e(ie,M3),e(M3,$Ee),e($Ee,E6r),e(M3,C6r),e(M3,_Y),e(_Y,w6r),e(M3,A6r),e(ie,L6r),e(ie,E3),e(E3,kEe),e(kEe,y6r),e(E3,x6r),e(E3,bY),e(bY,$6r),e(E3,k6r),e(ie,S6r),e(ie,C3),e(C3,SEe),e(SEe,R6r),e(C3,P6r),e(C3,vY),e(vY,B6r),e(C3,I6r),e(ie,N6r),e(ie,w3),e(w3,REe),e(REe,q6r),e(w3,j6r),e(w3,FY),e(FY,D6r),e(w3,G6r),e(ie,O6r),e(ie,A3),e(A3,PEe),e(PEe,V6r),e(A3,X6r),e(A3,TY),e(TY,z6r),e(A3,Q6r),e(ie,W6r),e(ie,L3),e(L3,BEe),e(BEe,H6r),e(L3,U6r),e(L3,MY),e(MY,J6r),e(L3,Y6r),e(ie,K6r),e(ie,y3),e(y3,IEe),e(IEe,Z6r),e(y3,e7r),e(y3,EY),e(EY,o7r),e(y3,r7r),e(ie,t7r),e(ie,x3),e(x3,NEe),e(NEe,a7r),e(x3,n7r),e(x3,CY),e(CY,s7r),e(x3,l7r),e(ie,i7r),e(ie,$3),e($3,qEe),e(qEe,d7r),e($3,c7r),e($3,wY),e(wY,m7r),e($3,f7r),e(ie,g7r),e(ie,k3),e(k3,jEe),e(jEe,h7r),e(k3,u7r),e(k3,AY),e(AY,p7r),e(k3,_7r),e(ie,b7r),e(ie,S3),e(S3,DEe),e(DEe,v7r),e(S3,F7r),e(S3,LY),e(LY,T7r),e(S3,M7r),e(ie,E7r),e(ie,R3),e(R3,GEe),e(GEe,C7r),e(R3,w7r),e(R3,yY),e(yY,A7r),e(R3,L7r),e(Rr,y7r),M(P3,Rr,null),b(m,hze,_),b(m,Tc,_),e(Tc,B3),e(B3,OEe),M(ux,OEe,null),e(Tc,x7r),e(Tc,VEe),e(VEe,$7r),b(m,uze,_),b(m,sr,_),M(px,sr,null),e(sr,k7r),e(sr,Mc),e(Mc,S7r),e(Mc,xY),e(xY,R7r),e(Mc,P7r),e(Mc,$Y),e($Y,B7r),e(Mc,I7r),e(sr,N7r),e(sr,_x),e(_x,q7r),e(_x,XEe),e(XEe,j7r),e(_x,D7r),e(sr,G7r),e(sr,qt),M(bx,qt,null),e(qt,O7r),e(qt,zEe),e(zEe,V7r),e(qt,X7r),e(qt,Ec),e(Ec,z7r),e(Ec,QEe),e(QEe,Q7r),e(Ec,W7r),e(Ec,kY),e(kY,H7r),e(Ec,U7r),e(qt,J7r),M(I3,qt,null),e(sr,Y7r),e(sr,Pr),M(vx,Pr,null),e(Pr,K7r),e(Pr,WEe),e(WEe,Z7r),e(Pr,eLr),e(Pr,fn),e(fn,oLr),e(fn,HEe),e(HEe,rLr),e(fn,tLr),e(fn,UEe),e(UEe,aLr),e(fn,nLr),e(fn,JEe),e(JEe,sLr),e(fn,lLr),e(Pr,iLr),e(Pr,ye),e(ye,N3),e(N3,YEe),e(YEe,dLr),e(N3,cLr),e(N3,SY),e(SY,mLr),e(N3,fLr),e(ye,gLr),e(ye,q3),e(q3,KEe),e(KEe,hLr),e(q3,uLr),e(q3,RY),e(RY,pLr),e(q3,_Lr),e(ye,bLr),e(ye,j3),e(j3,ZEe),e(ZEe,vLr),e(j3,FLr),e(j3,PY),e(PY,TLr),e(j3,MLr),e(ye,ELr),e(ye,D3),e(D3,eCe),e(eCe,CLr),e(D3,wLr),e(D3,BY),e(BY,ALr),e(D3,LLr),e(ye,yLr),e(ye,G3),e(G3,oCe),e(oCe,xLr),e(G3,$Lr),e(G3,IY),e(IY,kLr),e(G3,SLr),e(ye,RLr),e(ye,O3),e(O3,rCe),e(rCe,PLr),e(O3,BLr),e(O3,NY),e(NY,ILr),e(O3,NLr),e(ye,qLr),e(ye,V3),e(V3,tCe),e(tCe,jLr),e(V3,DLr),e(V3,qY),e(qY,GLr),e(V3,OLr),e(ye,VLr),e(ye,X3),e(X3,aCe),e(aCe,XLr),e(X3,zLr),e(X3,jY),e(jY,QLr),e(X3,WLr),e(ye,HLr),e(ye,z3),e(z3,nCe),e(nCe,ULr),e(z3,JLr),e(z3,DY),e(DY,YLr),e(z3,KLr),e(ye,ZLr),e(ye,Q3),e(Q3,sCe),e(sCe,eyr),e(Q3,oyr),e(Q3,GY),e(GY,ryr),e(Q3,tyr),e(Pr,ayr),M(W3,Pr,null),b(m,pze,_),b(m,Cc,_),e(Cc,H3),e(H3,lCe),M(Fx,lCe,null),e(Cc,nyr),e(Cc,iCe),e(iCe,syr),b(m,_ze,_),b(m,lr,_),M(Tx,lr,null),e(lr,lyr),e(lr,wc),e(wc,iyr),e(wc,OY),e(OY,dyr),e(wc,cyr),e(wc,VY),e(VY,myr),e(wc,fyr),e(lr,gyr),e(lr,Mx),e(Mx,hyr),e(Mx,dCe),e(dCe,uyr),e(Mx,pyr),e(lr,_yr),e(lr,jt),M(Ex,jt,null),e(jt,byr),e(jt,cCe),e(cCe,vyr),e(jt,Fyr),e(jt,Ac),e(Ac,Tyr),e(Ac,mCe),e(mCe,Myr),e(Ac,Eyr),e(Ac,XY),e(XY,Cyr),e(Ac,wyr),e(jt,Ayr),M(U3,jt,null),e(lr,Lyr),e(lr,Br),M(Cx,Br,null),e(Br,yyr),e(Br,fCe),e(fCe,xyr),e(Br,$yr),e(Br,gn),e(gn,kyr),e(gn,gCe),e(gCe,Syr),e(gn,Ryr),e(gn,hCe),e(hCe,Pyr),e(gn,Byr),e(gn,uCe),e(uCe,Iyr),e(gn,Nyr),e(Br,qyr),e(Br,te),e(te,J3),e(J3,pCe),e(pCe,jyr),e(J3,Dyr),e(J3,zY),e(zY,Gyr),e(J3,Oyr),e(te,Vyr),e(te,Y3),e(Y3,_Ce),e(_Ce,Xyr),e(Y3,zyr),e(Y3,QY),e(QY,Qyr),e(Y3,Wyr),e(te,Hyr),e(te,K3),e(K3,bCe),e(bCe,Uyr),e(K3,Jyr),e(K3,WY),e(WY,Yyr),e(K3,Kyr),e(te,Zyr),e(te,Z3),e(Z3,vCe),e(vCe,e8r),e(Z3,o8r),e(Z3,HY),e(HY,r8r),e(Z3,t8r),e(te,a8r),e(te,e5),e(e5,FCe),e(FCe,n8r),e(e5,s8r),e(e5,UY),e(UY,l8r),e(e5,i8r),e(te,d8r),e(te,o5),e(o5,TCe),e(TCe,c8r),e(o5,m8r),e(o5,JY),e(JY,f8r),e(o5,g8r),e(te,h8r),e(te,r5),e(r5,MCe),e(MCe,u8r),e(r5,p8r),e(r5,YY),e(YY,_8r),e(r5,b8r),e(te,v8r),e(te,t5),e(t5,ECe),e(ECe,F8r),e(t5,T8r),e(t5,KY),e(KY,M8r),e(t5,E8r),e(te,C8r),e(te,a5),e(a5,CCe),e(CCe,w8r),e(a5,A8r),e(a5,ZY),e(ZY,L8r),e(a5,y8r),e(te,x8r),e(te,n5),e(n5,wCe),e(wCe,$8r),e(n5,k8r),e(n5,eK),e(eK,S8r),e(n5,R8r),e(te,P8r),e(te,s5),e(s5,ACe),e(ACe,B8r),e(s5,I8r),e(s5,oK),e(oK,N8r),e(s5,q8r),e(te,j8r),e(te,l5),e(l5,LCe),e(LCe,D8r),e(l5,G8r),e(l5,rK),e(rK,O8r),e(l5,V8r),e(te,X8r),e(te,i5),e(i5,yCe),e(yCe,z8r),e(i5,Q8r),e(i5,tK),e(tK,W8r),e(i5,H8r),e(te,U8r),e(te,d5),e(d5,xCe),e(xCe,J8r),e(d5,Y8r),e(d5,aK),e(aK,K8r),e(d5,Z8r),e(te,e9r),e(te,c5),e(c5,$Ce),e($Ce,o9r),e(c5,r9r),e(c5,nK),e(nK,t9r),e(c5,a9r),e(te,n9r),e(te,m5),e(m5,kCe),e(kCe,s9r),e(m5,l9r),e(m5,sK),e(sK,i9r),e(m5,d9r),e(te,c9r),e(te,f5),e(f5,SCe),e(SCe,m9r),e(f5,f9r),e(f5,lK),e(lK,g9r),e(f5,h9r),e(te,u9r),e(te,g5),e(g5,RCe),e(RCe,p9r),e(g5,_9r),e(g5,iK),e(iK,b9r),e(g5,v9r),e(te,F9r),e(te,h5),e(h5,PCe),e(PCe,T9r),e(h5,M9r),e(h5,dK),e(dK,E9r),e(h5,C9r),e(te,w9r),e(te,u5),e(u5,BCe),e(BCe,A9r),e(u5,L9r),e(u5,cK),e(cK,y9r),e(u5,x9r),e(te,$9r),e(te,p5),e(p5,ICe),e(ICe,k9r),e(p5,S9r),e(p5,mK),e(mK,R9r),e(p5,P9r),e(te,B9r),e(te,_5),e(_5,NCe),e(NCe,I9r),e(_5,N9r),e(_5,fK),e(fK,q9r),e(_5,j9r),e(te,D9r),e(te,b5),e(b5,qCe),e(qCe,G9r),e(b5,O9r),e(b5,gK),e(gK,V9r),e(b5,X9r),e(te,z9r),e(te,v5),e(v5,jCe),e(jCe,Q9r),e(v5,W9r),e(v5,hK),e(hK,H9r),e(v5,U9r),e(te,J9r),e(te,F5),e(F5,DCe),e(DCe,Y9r),e(F5,K9r),e(F5,uK),e(uK,Z9r),e(F5,exr),e(te,oxr),e(te,T5),e(T5,GCe),e(GCe,rxr),e(T5,txr),e(T5,pK),e(pK,axr),e(T5,nxr),e(Br,sxr),M(M5,Br,null),b(m,bze,_),b(m,Lc,_),e(Lc,E5),e(E5,OCe),M(wx,OCe,null),e(Lc,lxr),e(Lc,VCe),e(VCe,ixr),b(m,vze,_),b(m,ir,_),M(Ax,ir,null),e(ir,dxr),e(ir,yc),e(yc,cxr),e(yc,_K),e(_K,mxr),e(yc,fxr),e(yc,bK),e(bK,gxr),e(yc,hxr),e(ir,uxr),e(ir,Lx),e(Lx,pxr),e(Lx,XCe),e(XCe,_xr),e(Lx,bxr),e(ir,vxr),e(ir,Dt),M(yx,Dt,null),e(Dt,Fxr),e(Dt,zCe),e(zCe,Txr),e(Dt,Mxr),e(Dt,xc),e(xc,Exr),e(xc,QCe),e(QCe,Cxr),e(xc,wxr),e(xc,vK),e(vK,Axr),e(xc,Lxr),e(Dt,yxr),M(C5,Dt,null),e(ir,xxr),e(ir,Ir),M(xx,Ir,null),e(Ir,$xr),e(Ir,WCe),e(WCe,kxr),e(Ir,Sxr),e(Ir,hn),e(hn,Rxr),e(hn,HCe),e(HCe,Pxr),e(hn,Bxr),e(hn,UCe),e(UCe,Ixr),e(hn,Nxr),e(hn,JCe),e(JCe,qxr),e(hn,jxr),e(Ir,Dxr),e(Ir,pe),e(pe,w5),e(w5,YCe),e(YCe,Gxr),e(w5,Oxr),e(w5,FK),e(FK,Vxr),e(w5,Xxr),e(pe,zxr),e(pe,A5),e(A5,KCe),e(KCe,Qxr),e(A5,Wxr),e(A5,TK),e(TK,Hxr),e(A5,Uxr),e(pe,Jxr),e(pe,L5),e(L5,ZCe),e(ZCe,Yxr),e(L5,Kxr),e(L5,MK),e(MK,Zxr),e(L5,e$r),e(pe,o$r),e(pe,y5),e(y5,e3e),e(e3e,r$r),e(y5,t$r),e(y5,EK),e(EK,a$r),e(y5,n$r),e(pe,s$r),e(pe,x5),e(x5,o3e),e(o3e,l$r),e(x5,i$r),e(x5,CK),e(CK,d$r),e(x5,c$r),e(pe,m$r),e(pe,$5),e($5,r3e),e(r3e,f$r),e($5,g$r),e($5,wK),e(wK,h$r),e($5,u$r),e(pe,p$r),e(pe,k5),e(k5,t3e),e(t3e,_$r),e(k5,b$r),e(k5,AK),e(AK,v$r),e(k5,F$r),e(pe,T$r),e(pe,S5),e(S5,a3e),e(a3e,M$r),e(S5,E$r),e(S5,LK),e(LK,C$r),e(S5,w$r),e(pe,A$r),e(pe,R5),e(R5,n3e),e(n3e,L$r),e(R5,y$r),e(R5,yK),e(yK,x$r),e(R5,$$r),e(pe,k$r),e(pe,P5),e(P5,s3e),e(s3e,S$r),e(P5,R$r),e(P5,xK),e(xK,P$r),e(P5,B$r),e(pe,I$r),e(pe,B5),e(B5,l3e),e(l3e,N$r),e(B5,q$r),e(B5,$K),e($K,j$r),e(B5,D$r),e(pe,G$r),e(pe,I5),e(I5,i3e),e(i3e,O$r),e(I5,V$r),e(I5,kK),e(kK,X$r),e(I5,z$r),e(pe,Q$r),e(pe,N5),e(N5,d3e),e(d3e,W$r),e(N5,H$r),e(N5,SK),e(SK,U$r),e(N5,J$r),e(pe,Y$r),e(pe,q5),e(q5,c3e),e(c3e,K$r),e(q5,Z$r),e(q5,RK),e(RK,ekr),e(q5,okr),e(pe,rkr),e(pe,j5),e(j5,m3e),e(m3e,tkr),e(j5,akr),e(j5,PK),e(PK,nkr),e(j5,skr),e(pe,lkr),e(pe,D5),e(D5,f3e),e(f3e,ikr),e(D5,dkr),e(D5,BK),e(BK,ckr),e(D5,mkr),e(pe,fkr),e(pe,G5),e(G5,g3e),e(g3e,gkr),e(G5,hkr),e(G5,IK),e(IK,ukr),e(G5,pkr),e(Ir,_kr),M(O5,Ir,null),b(m,Fze,_),b(m,$c,_),e($c,V5),e(V5,h3e),M($x,h3e,null),e($c,bkr),e($c,u3e),e(u3e,vkr),b(m,Tze,_),b(m,dr,_),M(kx,dr,null),e(dr,Fkr),e(dr,kc),e(kc,Tkr),e(kc,NK),e(NK,Mkr),e(kc,Ekr),e(kc,qK),e(qK,Ckr),e(kc,wkr),e(dr,Akr),e(dr,Sx),e(Sx,Lkr),e(Sx,p3e),e(p3e,ykr),e(Sx,xkr),e(dr,$kr),e(dr,Gt),M(Rx,Gt,null),e(Gt,kkr),e(Gt,_3e),e(_3e,Skr),e(Gt,Rkr),e(Gt,Sc),e(Sc,Pkr),e(Sc,b3e),e(b3e,Bkr),e(Sc,Ikr),e(Sc,jK),e(jK,Nkr),e(Sc,qkr),e(Gt,jkr),M(X5,Gt,null),e(dr,Dkr),e(dr,Nr),M(Px,Nr,null),e(Nr,Gkr),e(Nr,v3e),e(v3e,Okr),e(Nr,Vkr),e(Nr,un),e(un,Xkr),e(un,F3e),e(F3e,zkr),e(un,Qkr),e(un,T3e),e(T3e,Wkr),e(un,Hkr),e(un,M3e),e(M3e,Ukr),e(un,Jkr),e(Nr,Ykr),e(Nr,Bx),e(Bx,z5),e(z5,E3e),e(E3e,Kkr),e(z5,Zkr),e(z5,DK),e(DK,eSr),e(z5,oSr),e(Bx,rSr),e(Bx,Q5),e(Q5,C3e),e(C3e,tSr),e(Q5,aSr),e(Q5,GK),e(GK,nSr),e(Q5,sSr),e(Nr,lSr),M(W5,Nr,null),b(m,Mze,_),b(m,Rc,_),e(Rc,H5),e(H5,w3e),M(Ix,w3e,null),e(Rc,iSr),e(Rc,A3e),e(A3e,dSr),b(m,Eze,_),b(m,cr,_),M(Nx,cr,null),e(cr,cSr),e(cr,Pc),e(Pc,mSr),e(Pc,OK),e(OK,fSr),e(Pc,gSr),e(Pc,VK),e(VK,hSr),e(Pc,uSr),e(cr,pSr),e(cr,qx),e(qx,_Sr),e(qx,L3e),e(L3e,bSr),e(qx,vSr),e(cr,FSr),e(cr,Ot),M(jx,Ot,null),e(Ot,TSr),e(Ot,y3e),e(y3e,MSr),e(Ot,ESr),e(Ot,Bc),e(Bc,CSr),e(Bc,x3e),e(x3e,wSr),e(Bc,ASr),e(Bc,XK),e(XK,LSr),e(Bc,ySr),e(Ot,xSr),M(U5,Ot,null),e(cr,$Sr),e(cr,qr),M(Dx,qr,null),e(qr,kSr),e(qr,$3e),e($3e,SSr),e(qr,RSr),e(qr,pn),e(pn,PSr),e(pn,k3e),e(k3e,BSr),e(pn,ISr),e(pn,S3e),e(S3e,NSr),e(pn,qSr),e(pn,R3e),e(R3e,jSr),e(pn,DSr),e(qr,GSr),e(qr,P3e),e(P3e,J5),e(J5,B3e),e(B3e,OSr),e(J5,VSr),e(J5,zK),e(zK,XSr),e(J5,zSr),e(qr,QSr),M(Y5,qr,null),b(m,Cze,_),b(m,Ic,_),e(Ic,K5),e(K5,I3e),M(Gx,I3e,null),e(Ic,WSr),e(Ic,N3e),e(N3e,HSr),b(m,wze,_),b(m,mr,_),M(Ox,mr,null),e(mr,USr),e(mr,Nc),e(Nc,JSr),e(Nc,QK),e(QK,YSr),e(Nc,KSr),e(Nc,WK),e(WK,ZSr),e(Nc,eRr),e(mr,oRr),e(mr,Vx),e(Vx,rRr),e(Vx,q3e),e(q3e,tRr),e(Vx,aRr),e(mr,nRr),e(mr,Vt),M(Xx,Vt,null),e(Vt,sRr),e(Vt,j3e),e(j3e,lRr),e(Vt,iRr),e(Vt,qc),e(qc,dRr),e(qc,D3e),e(D3e,cRr),e(qc,mRr),e(qc,HK),e(HK,fRr),e(qc,gRr),e(Vt,hRr),M(Z5,Vt,null),e(mr,uRr),e(mr,jr),M(zx,jr,null),e(jr,pRr),e(jr,G3e),e(G3e,_Rr),e(jr,bRr),e(jr,_n),e(_n,vRr),e(_n,O3e),e(O3e,FRr),e(_n,TRr),e(_n,V3e),e(V3e,MRr),e(_n,ERr),e(_n,X3e),e(X3e,CRr),e(_n,wRr),e(jr,ARr),e(jr,de),e(de,e0),e(e0,z3e),e(z3e,LRr),e(e0,yRr),e(e0,UK),e(UK,xRr),e(e0,$Rr),e(de,kRr),e(de,o0),e(o0,Q3e),e(Q3e,SRr),e(o0,RRr),e(o0,JK),e(JK,PRr),e(o0,BRr),e(de,IRr),e(de,r0),e(r0,W3e),e(W3e,NRr),e(r0,qRr),e(r0,YK),e(YK,jRr),e(r0,DRr),e(de,GRr),e(de,t0),e(t0,H3e),e(H3e,ORr),e(t0,VRr),e(t0,KK),e(KK,XRr),e(t0,zRr),e(de,QRr),e(de,a0),e(a0,U3e),e(U3e,WRr),e(a0,HRr),e(a0,ZK),e(ZK,URr),e(a0,JRr),e(de,YRr),e(de,n0),e(n0,J3e),e(J3e,KRr),e(n0,ZRr),e(n0,eZ),e(eZ,ePr),e(n0,oPr),e(de,rPr),e(de,s0),e(s0,Y3e),e(Y3e,tPr),e(s0,aPr),e(s0,oZ),e(oZ,nPr),e(s0,sPr),e(de,lPr),e(de,l0),e(l0,K3e),e(K3e,iPr),e(l0,dPr),e(l0,rZ),e(rZ,cPr),e(l0,mPr),e(de,fPr),e(de,i0),e(i0,Z3e),e(Z3e,gPr),e(i0,hPr),e(i0,tZ),e(tZ,uPr),e(i0,pPr),e(de,_Pr),e(de,d0),e(d0,e5e),e(e5e,bPr),e(d0,vPr),e(d0,aZ),e(aZ,FPr),e(d0,TPr),e(de,MPr),e(de,c0),e(c0,o5e),e(o5e,EPr),e(c0,CPr),e(c0,nZ),e(nZ,wPr),e(c0,APr),e(de,LPr),e(de,m0),e(m0,r5e),e(r5e,yPr),e(m0,xPr),e(m0,sZ),e(sZ,$Pr),e(m0,kPr),e(de,SPr),e(de,f0),e(f0,t5e),e(t5e,RPr),e(f0,PPr),e(f0,lZ),e(lZ,BPr),e(f0,IPr),e(de,NPr),e(de,g0),e(g0,a5e),e(a5e,qPr),e(g0,jPr),e(g0,iZ),e(iZ,DPr),e(g0,GPr),e(de,OPr),e(de,h0),e(h0,n5e),e(n5e,VPr),e(h0,XPr),e(h0,dZ),e(dZ,zPr),e(h0,QPr),e(de,WPr),e(de,u0),e(u0,s5e),e(s5e,HPr),e(u0,UPr),e(u0,cZ),e(cZ,JPr),e(u0,YPr),e(de,KPr),e(de,p0),e(p0,l5e),e(l5e,ZPr),e(p0,eBr),e(p0,mZ),e(mZ,oBr),e(p0,rBr),e(de,tBr),e(de,_0),e(_0,i5e),e(i5e,aBr),e(_0,nBr),e(_0,fZ),e(fZ,sBr),e(_0,lBr),e(de,iBr),e(de,b0),e(b0,d5e),e(d5e,dBr),e(b0,cBr),e(b0,gZ),e(gZ,mBr),e(b0,fBr),e(de,gBr),e(de,v0),e(v0,c5e),e(c5e,hBr),e(v0,uBr),e(v0,hZ),e(hZ,pBr),e(v0,_Br),e(jr,bBr),M(F0,jr,null),b(m,Aze,_),b(m,jc,_),e(jc,T0),e(T0,m5e),M(Qx,m5e,null),e(jc,vBr),e(jc,f5e),e(f5e,FBr),b(m,Lze,_),b(m,fr,_),M(Wx,fr,null),e(fr,TBr),e(fr,Dc),e(Dc,MBr),e(Dc,uZ),e(uZ,EBr),e(Dc,CBr),e(Dc,pZ),e(pZ,wBr),e(Dc,ABr),e(fr,LBr),e(fr,Hx),e(Hx,yBr),e(Hx,g5e),e(g5e,xBr),e(Hx,$Br),e(fr,kBr),e(fr,Xt),M(Ux,Xt,null),e(Xt,SBr),e(Xt,h5e),e(h5e,RBr),e(Xt,PBr),e(Xt,Gc),e(Gc,BBr),e(Gc,u5e),e(u5e,IBr),e(Gc,NBr),e(Gc,_Z),e(_Z,qBr),e(Gc,jBr),e(Xt,DBr),M(M0,Xt,null),e(fr,GBr),e(fr,Dr),M(Jx,Dr,null),e(Dr,OBr),e(Dr,p5e),e(p5e,VBr),e(Dr,XBr),e(Dr,bn),e(bn,zBr),e(bn,_5e),e(_5e,QBr),e(bn,WBr),e(bn,b5e),e(b5e,HBr),e(bn,UBr),e(bn,v5e),e(v5e,JBr),e(bn,YBr),e(Dr,KBr),e(Dr,ce),e(ce,E0),e(E0,F5e),e(F5e,ZBr),e(E0,eIr),e(E0,bZ),e(bZ,oIr),e(E0,rIr),e(ce,tIr),e(ce,C0),e(C0,T5e),e(T5e,aIr),e(C0,nIr),e(C0,vZ),e(vZ,sIr),e(C0,lIr),e(ce,iIr),e(ce,w0),e(w0,M5e),e(M5e,dIr),e(w0,cIr),e(w0,FZ),e(FZ,mIr),e(w0,fIr),e(ce,gIr),e(ce,A0),e(A0,E5e),e(E5e,hIr),e(A0,uIr),e(A0,TZ),e(TZ,pIr),e(A0,_Ir),e(ce,bIr),e(ce,L0),e(L0,C5e),e(C5e,vIr),e(L0,FIr),e(L0,MZ),e(MZ,TIr),e(L0,MIr),e(ce,EIr),e(ce,y0),e(y0,w5e),e(w5e,CIr),e(y0,wIr),e(y0,EZ),e(EZ,AIr),e(y0,LIr),e(ce,yIr),e(ce,x0),e(x0,A5e),e(A5e,xIr),e(x0,$Ir),e(x0,CZ),e(CZ,kIr),e(x0,SIr),e(ce,RIr),e(ce,$0),e($0,L5e),e(L5e,PIr),e($0,BIr),e($0,wZ),e(wZ,IIr),e($0,NIr),e(ce,qIr),e(ce,k0),e(k0,y5e),e(y5e,jIr),e(k0,DIr),e(k0,AZ),e(AZ,GIr),e(k0,OIr),e(ce,VIr),e(ce,S0),e(S0,x5e),e(x5e,XIr),e(S0,zIr),e(S0,LZ),e(LZ,QIr),e(S0,WIr),e(ce,HIr),e(ce,R0),e(R0,$5e),e($5e,UIr),e(R0,JIr),e(R0,yZ),e(yZ,YIr),e(R0,KIr),e(ce,ZIr),e(ce,P0),e(P0,k5e),e(k5e,eNr),e(P0,oNr),e(P0,xZ),e(xZ,rNr),e(P0,tNr),e(ce,aNr),e(ce,B0),e(B0,S5e),e(S5e,nNr),e(B0,sNr),e(B0,$Z),e($Z,lNr),e(B0,iNr),e(ce,dNr),e(ce,I0),e(I0,R5e),e(R5e,cNr),e(I0,mNr),e(I0,kZ),e(kZ,fNr),e(I0,gNr),e(ce,hNr),e(ce,N0),e(N0,P5e),e(P5e,uNr),e(N0,pNr),e(N0,SZ),e(SZ,_Nr),e(N0,bNr),e(ce,vNr),e(ce,q0),e(q0,B5e),e(B5e,FNr),e(q0,TNr),e(q0,RZ),e(RZ,MNr),e(q0,ENr),e(ce,CNr),e(ce,j0),e(j0,I5e),e(I5e,wNr),e(j0,ANr),e(j0,PZ),e(PZ,LNr),e(j0,yNr),e(ce,xNr),e(ce,D0),e(D0,N5e),e(N5e,$Nr),e(D0,kNr),e(D0,BZ),e(BZ,SNr),e(D0,RNr),e(ce,PNr),e(ce,G0),e(G0,q5e),e(q5e,BNr),e(G0,INr),e(G0,IZ),e(IZ,NNr),e(G0,qNr),e(ce,jNr),e(ce,O0),e(O0,j5e),e(j5e,DNr),e(O0,GNr),e(O0,NZ),e(NZ,ONr),e(O0,VNr),e(Dr,XNr),M(V0,Dr,null),b(m,yze,_),b(m,Oc,_),e(Oc,X0),e(X0,D5e),M(Yx,D5e,null),e(Oc,zNr),e(Oc,G5e),e(G5e,QNr),b(m,xze,_),b(m,gr,_),M(Kx,gr,null),e(gr,WNr),e(gr,Vc),e(Vc,HNr),e(Vc,qZ),e(qZ,UNr),e(Vc,JNr),e(Vc,jZ),e(jZ,YNr),e(Vc,KNr),e(gr,ZNr),e(gr,Zx),e(Zx,eqr),e(Zx,O5e),e(O5e,oqr),e(Zx,rqr),e(gr,tqr),e(gr,zt),M(e$,zt,null),e(zt,aqr),e(zt,V5e),e(V5e,nqr),e(zt,sqr),e(zt,Xc),e(Xc,lqr),e(Xc,X5e),e(X5e,iqr),e(Xc,dqr),e(Xc,DZ),e(DZ,cqr),e(Xc,mqr),e(zt,fqr),M(z0,zt,null),e(gr,gqr),e(gr,Gr),M(o$,Gr,null),e(Gr,hqr),e(Gr,z5e),e(z5e,uqr),e(Gr,pqr),e(Gr,vn),e(vn,_qr),e(vn,Q5e),e(Q5e,bqr),e(vn,vqr),e(vn,W5e),e(W5e,Fqr),e(vn,Tqr),e(vn,H5e),e(H5e,Mqr),e(vn,Eqr),e(Gr,Cqr),e(Gr,U5e),e(U5e,Q0),e(Q0,J5e),e(J5e,wqr),e(Q0,Aqr),e(Q0,GZ),e(GZ,Lqr),e(Q0,yqr),e(Gr,xqr),M(W0,Gr,null),b(m,$ze,_),b(m,zc,_),e(zc,H0),e(H0,Y5e),M(r$,Y5e,null),e(zc,$qr),e(zc,K5e),e(K5e,kqr),b(m,kze,_),b(m,hr,_),M(t$,hr,null),e(hr,Sqr),e(hr,Qc),e(Qc,Rqr),e(Qc,OZ),e(OZ,Pqr),e(Qc,Bqr),e(Qc,VZ),e(VZ,Iqr),e(Qc,Nqr),e(hr,qqr),e(hr,a$),e(a$,jqr),e(a$,Z5e),e(Z5e,Dqr),e(a$,Gqr),e(hr,Oqr),e(hr,Qt),M(n$,Qt,null),e(Qt,Vqr),e(Qt,e0e),e(e0e,Xqr),e(Qt,zqr),e(Qt,Wc),e(Wc,Qqr),e(Wc,o0e),e(o0e,Wqr),e(Wc,Hqr),e(Wc,XZ),e(XZ,Uqr),e(Wc,Jqr),e(Qt,Yqr),M(U0,Qt,null),e(hr,Kqr),e(hr,Or),M(s$,Or,null),e(Or,Zqr),e(Or,r0e),e(r0e,ejr),e(Or,ojr),e(Or,Fn),e(Fn,rjr),e(Fn,t0e),e(t0e,tjr),e(Fn,ajr),e(Fn,a0e),e(a0e,njr),e(Fn,sjr),e(Fn,n0e),e(n0e,ljr),e(Fn,ijr),e(Or,djr),e(Or,s0e),e(s0e,J0),e(J0,l0e),e(l0e,cjr),e(J0,mjr),e(J0,zZ),e(zZ,fjr),e(J0,gjr),e(Or,hjr),M(Y0,Or,null),b(m,Sze,_),b(m,Hc,_),e(Hc,K0),e(K0,i0e),M(l$,i0e,null),e(Hc,ujr),e(Hc,d0e),e(d0e,pjr),b(m,Rze,_),b(m,ur,_),M(i$,ur,null),e(ur,_jr),e(ur,Uc),e(Uc,bjr),e(Uc,QZ),e(QZ,vjr),e(Uc,Fjr),e(Uc,WZ),e(WZ,Tjr),e(Uc,Mjr),e(ur,Ejr),e(ur,d$),e(d$,Cjr),e(d$,c0e),e(c0e,wjr),e(d$,Ajr),e(ur,Ljr),e(ur,Wt),M(c$,Wt,null),e(Wt,yjr),e(Wt,m0e),e(m0e,xjr),e(Wt,$jr),e(Wt,Jc),e(Jc,kjr),e(Jc,f0e),e(f0e,Sjr),e(Jc,Rjr),e(Jc,HZ),e(HZ,Pjr),e(Jc,Bjr),e(Wt,Ijr),M(Z0,Wt,null),e(ur,Njr),e(ur,Vr),M(m$,Vr,null),e(Vr,qjr),e(Vr,g0e),e(g0e,jjr),e(Vr,Djr),e(Vr,Tn),e(Tn,Gjr),e(Tn,h0e),e(h0e,Ojr),e(Tn,Vjr),e(Tn,u0e),e(u0e,Xjr),e(Tn,zjr),e(Tn,p0e),e(p0e,Qjr),e(Tn,Wjr),e(Vr,Hjr),e(Vr,oe),e(oe,ew),e(ew,_0e),e(_0e,Ujr),e(ew,Jjr),e(ew,UZ),e(UZ,Yjr),e(ew,Kjr),e(oe,Zjr),e(oe,ow),e(ow,b0e),e(b0e,eDr),e(ow,oDr),e(ow,JZ),e(JZ,rDr),e(ow,tDr),e(oe,aDr),e(oe,rw),e(rw,v0e),e(v0e,nDr),e(rw,sDr),e(rw,YZ),e(YZ,lDr),e(rw,iDr),e(oe,dDr),e(oe,tw),e(tw,F0e),e(F0e,cDr),e(tw,mDr),e(tw,KZ),e(KZ,fDr),e(tw,gDr),e(oe,hDr),e(oe,aw),e(aw,T0e),e(T0e,uDr),e(aw,pDr),e(aw,ZZ),e(ZZ,_Dr),e(aw,bDr),e(oe,vDr),e(oe,nw),e(nw,M0e),e(M0e,FDr),e(nw,TDr),e(nw,eee),e(eee,MDr),e(nw,EDr),e(oe,CDr),e(oe,sw),e(sw,E0e),e(E0e,wDr),e(sw,ADr),e(sw,oee),e(oee,LDr),e(sw,yDr),e(oe,xDr),e(oe,lw),e(lw,C0e),e(C0e,$Dr),e(lw,kDr),e(lw,ree),e(ree,SDr),e(lw,RDr),e(oe,PDr),e(oe,iw),e(iw,w0e),e(w0e,BDr),e(iw,IDr),e(iw,tee),e(tee,NDr),e(iw,qDr),e(oe,jDr),e(oe,dw),e(dw,A0e),e(A0e,DDr),e(dw,GDr),e(dw,aee),e(aee,ODr),e(dw,VDr),e(oe,XDr),e(oe,cw),e(cw,L0e),e(L0e,zDr),e(cw,QDr),e(cw,nee),e(nee,WDr),e(cw,HDr),e(oe,UDr),e(oe,mw),e(mw,y0e),e(y0e,JDr),e(mw,YDr),e(mw,see),e(see,KDr),e(mw,ZDr),e(oe,eGr),e(oe,fw),e(fw,x0e),e(x0e,oGr),e(fw,rGr),e(fw,lee),e(lee,tGr),e(fw,aGr),e(oe,nGr),e(oe,gw),e(gw,$0e),e($0e,sGr),e(gw,lGr),e(gw,iee),e(iee,iGr),e(gw,dGr),e(oe,cGr),e(oe,hw),e(hw,k0e),e(k0e,mGr),e(hw,fGr),e(hw,dee),e(dee,gGr),e(hw,hGr),e(oe,uGr),e(oe,uw),e(uw,S0e),e(S0e,pGr),e(uw,_Gr),e(uw,cee),e(cee,bGr),e(uw,vGr),e(oe,FGr),e(oe,pw),e(pw,R0e),e(R0e,TGr),e(pw,MGr),e(pw,mee),e(mee,EGr),e(pw,CGr),e(oe,wGr),e(oe,_w),e(_w,P0e),e(P0e,AGr),e(_w,LGr),e(_w,fee),e(fee,yGr),e(_w,xGr),e(oe,$Gr),e(oe,bw),e(bw,B0e),e(B0e,kGr),e(bw,SGr),e(bw,gee),e(gee,RGr),e(bw,PGr),e(oe,BGr),e(oe,vw),e(vw,I0e),e(I0e,IGr),e(vw,NGr),e(vw,hee),e(hee,qGr),e(vw,jGr),e(oe,DGr),e(oe,Fw),e(Fw,N0e),e(N0e,GGr),e(Fw,OGr),e(Fw,uee),e(uee,VGr),e(Fw,XGr),e(oe,zGr),e(oe,Tw),e(Tw,q0e),e(q0e,QGr),e(Tw,WGr),e(Tw,pee),e(pee,HGr),e(Tw,UGr),e(oe,JGr),e(oe,Mw),e(Mw,j0e),e(j0e,YGr),e(Mw,KGr),e(Mw,_ee),e(_ee,ZGr),e(Mw,eOr),e(oe,oOr),e(oe,Ew),e(Ew,D0e),e(D0e,rOr),e(Ew,tOr),e(Ew,bee),e(bee,aOr),e(Ew,nOr),e(oe,sOr),e(oe,Cw),e(Cw,G0e),e(G0e,lOr),e(Cw,iOr),e(Cw,vee),e(vee,dOr),e(Cw,cOr),e(oe,mOr),e(oe,ww),e(ww,O0e),e(O0e,fOr),e(ww,gOr),e(ww,Fee),e(Fee,hOr),e(ww,uOr),e(oe,pOr),e(oe,Aw),e(Aw,V0e),e(V0e,_Or),e(Aw,bOr),e(Aw,Tee),e(Tee,vOr),e(Aw,FOr),e(Vr,TOr),M(Lw,Vr,null),b(m,Pze,_),b(m,Yc,_),e(Yc,yw),e(yw,X0e),M(f$,X0e,null),e(Yc,MOr),e(Yc,z0e),e(z0e,EOr),b(m,Bze,_),b(m,pr,_),M(g$,pr,null),e(pr,COr),e(pr,Kc),e(Kc,wOr),e(Kc,Mee),e(Mee,AOr),e(Kc,LOr),e(Kc,Eee),e(Eee,yOr),e(Kc,xOr),e(pr,$Or),e(pr,h$),e(h$,kOr),e(h$,Q0e),e(Q0e,SOr),e(h$,ROr),e(pr,POr),e(pr,Ht),M(u$,Ht,null),e(Ht,BOr),e(Ht,W0e),e(W0e,IOr),e(Ht,NOr),e(Ht,Zc),e(Zc,qOr),e(Zc,H0e),e(H0e,jOr),e(Zc,DOr),e(Zc,Cee),e(Cee,GOr),e(Zc,OOr),e(Ht,VOr),M(xw,Ht,null),e(pr,XOr),e(pr,Xr),M(p$,Xr,null),e(Xr,zOr),e(Xr,U0e),e(U0e,QOr),e(Xr,WOr),e(Xr,Mn),e(Mn,HOr),e(Mn,J0e),e(J0e,UOr),e(Mn,JOr),e(Mn,Y0e),e(Y0e,YOr),e(Mn,KOr),e(Mn,K0e),e(K0e,ZOr),e(Mn,eVr),e(Xr,oVr),e(Xr,xe),e(xe,$w),e($w,Z0e),e(Z0e,rVr),e($w,tVr),e($w,wee),e(wee,aVr),e($w,nVr),e(xe,sVr),e(xe,kw),e(kw,ewe),e(ewe,lVr),e(kw,iVr),e(kw,Aee),e(Aee,dVr),e(kw,cVr),e(xe,mVr),e(xe,Sw),e(Sw,owe),e(owe,fVr),e(Sw,gVr),e(Sw,Lee),e(Lee,hVr),e(Sw,uVr),e(xe,pVr),e(xe,Rw),e(Rw,rwe),e(rwe,_Vr),e(Rw,bVr),e(Rw,yee),e(yee,vVr),e(Rw,FVr),e(xe,TVr),e(xe,Pw),e(Pw,twe),e(twe,MVr),e(Pw,EVr),e(Pw,xee),e(xee,CVr),e(Pw,wVr),e(xe,AVr),e(xe,Bw),e(Bw,awe),e(awe,LVr),e(Bw,yVr),e(Bw,$ee),e($ee,xVr),e(Bw,$Vr),e(xe,kVr),e(xe,Iw),e(Iw,nwe),e(nwe,SVr),e(Iw,RVr),e(Iw,kee),e(kee,PVr),e(Iw,BVr),e(xe,IVr),e(xe,Nw),e(Nw,swe),e(swe,NVr),e(Nw,qVr),e(Nw,See),e(See,jVr),e(Nw,DVr),e(xe,GVr),e(xe,qw),e(qw,lwe),e(lwe,OVr),e(qw,VVr),e(qw,Ree),e(Ree,XVr),e(qw,zVr),e(xe,QVr),e(xe,jw),e(jw,iwe),e(iwe,WVr),e(jw,HVr),e(jw,Pee),e(Pee,UVr),e(jw,JVr),e(Xr,YVr),M(Dw,Xr,null),b(m,Ize,_),b(m,em,_),e(em,Gw),e(Gw,dwe),M(_$,dwe,null),e(em,KVr),e(em,cwe),e(cwe,ZVr),b(m,Nze,_),b(m,_r,_),M(b$,_r,null),e(_r,eXr),e(_r,om),e(om,oXr),e(om,Bee),e(Bee,rXr),e(om,tXr),e(om,Iee),e(Iee,aXr),e(om,nXr),e(_r,sXr),e(_r,v$),e(v$,lXr),e(v$,mwe),e(mwe,iXr),e(v$,dXr),e(_r,cXr),e(_r,Ut),M(F$,Ut,null),e(Ut,mXr),e(Ut,fwe),e(fwe,fXr),e(Ut,gXr),e(Ut,rm),e(rm,hXr),e(rm,gwe),e(gwe,uXr),e(rm,pXr),e(rm,Nee),e(Nee,_Xr),e(rm,bXr),e(Ut,vXr),M(Ow,Ut,null),e(_r,FXr),e(_r,zr),M(T$,zr,null),e(zr,TXr),e(zr,hwe),e(hwe,MXr),e(zr,EXr),e(zr,En),e(En,CXr),e(En,uwe),e(uwe,wXr),e(En,AXr),e(En,pwe),e(pwe,LXr),e(En,yXr),e(En,_we),e(_we,xXr),e(En,$Xr),e(zr,kXr),e(zr,Ee),e(Ee,Vw),e(Vw,bwe),e(bwe,SXr),e(Vw,RXr),e(Vw,qee),e(qee,PXr),e(Vw,BXr),e(Ee,IXr),e(Ee,Xw),e(Xw,vwe),e(vwe,NXr),e(Xw,qXr),e(Xw,jee),e(jee,jXr),e(Xw,DXr),e(Ee,GXr),e(Ee,zw),e(zw,Fwe),e(Fwe,OXr),e(zw,VXr),e(zw,Dee),e(Dee,XXr),e(zw,zXr),e(Ee,QXr),e(Ee,Qw),e(Qw,Twe),e(Twe,WXr),e(Qw,HXr),e(Qw,Gee),e(Gee,UXr),e(Qw,JXr),e(Ee,YXr),e(Ee,Ww),e(Ww,Mwe),e(Mwe,KXr),e(Ww,ZXr),e(Ww,Oee),e(Oee,ezr),e(Ww,ozr),e(Ee,rzr),e(Ee,Hw),e(Hw,Ewe),e(Ewe,tzr),e(Hw,azr),e(Hw,Vee),e(Vee,nzr),e(Hw,szr),e(Ee,lzr),e(Ee,Uw),e(Uw,Cwe),e(Cwe,izr),e(Uw,dzr),e(Uw,Xee),e(Xee,czr),e(Uw,mzr),e(Ee,fzr),e(Ee,Jw),e(Jw,wwe),e(wwe,gzr),e(Jw,hzr),e(Jw,zee),e(zee,uzr),e(Jw,pzr),e(Ee,_zr),e(Ee,Yw),e(Yw,Awe),e(Awe,bzr),e(Yw,vzr),e(Yw,Qee),e(Qee,Fzr),e(Yw,Tzr),e(Ee,Mzr),e(Ee,Kw),e(Kw,Lwe),e(Lwe,Ezr),e(Kw,Czr),e(Kw,Wee),e(Wee,wzr),e(Kw,Azr),e(Ee,Lzr),e(Ee,Zw),e(Zw,ywe),e(ywe,yzr),e(Zw,xzr),e(Zw,Hee),e(Hee,$zr),e(Zw,kzr),e(Ee,Szr),e(Ee,eA),e(eA,xwe),e(xwe,Rzr),e(eA,Pzr),e(eA,Uee),e(Uee,Bzr),e(eA,Izr),e(Ee,Nzr),e(Ee,oA),e(oA,$we),e($we,qzr),e(oA,jzr),e(oA,Jee),e(Jee,Dzr),e(oA,Gzr),e(zr,Ozr),M(rA,zr,null),b(m,qze,_),b(m,tm,_),e(tm,tA),e(tA,kwe),M(M$,kwe,null),e(tm,Vzr),e(tm,Swe),e(Swe,Xzr),b(m,jze,_),b(m,br,_),M(E$,br,null),e(br,zzr),e(br,am),e(am,Qzr),e(am,Yee),e(Yee,Wzr),e(am,Hzr),e(am,Kee),e(Kee,Uzr),e(am,Jzr),e(br,Yzr),e(br,C$),e(C$,Kzr),e(C$,Rwe),e(Rwe,Zzr),e(C$,eQr),e(br,oQr),e(br,Jt),M(w$,Jt,null),e(Jt,rQr),e(Jt,Pwe),e(Pwe,tQr),e(Jt,aQr),e(Jt,nm),e(nm,nQr),e(nm,Bwe),e(Bwe,sQr),e(nm,lQr),e(nm,Zee),e(Zee,iQr),e(nm,dQr),e(Jt,cQr),M(aA,Jt,null),e(br,mQr),e(br,Qr),M(A$,Qr,null),e(Qr,fQr),e(Qr,Iwe),e(Iwe,gQr),e(Qr,hQr),e(Qr,Cn),e(Cn,uQr),e(Cn,Nwe),e(Nwe,pQr),e(Cn,_Qr),e(Cn,qwe),e(qwe,bQr),e(Cn,vQr),e(Cn,jwe),e(jwe,FQr),e(Cn,TQr),e(Qr,MQr),e(Qr,$e),e($e,nA),e(nA,Dwe),e(Dwe,EQr),e(nA,CQr),e(nA,eoe),e(eoe,wQr),e(nA,AQr),e($e,LQr),e($e,sA),e(sA,Gwe),e(Gwe,yQr),e(sA,xQr),e(sA,ooe),e(ooe,$Qr),e(sA,kQr),e($e,SQr),e($e,lA),e(lA,Owe),e(Owe,RQr),e(lA,PQr),e(lA,roe),e(roe,BQr),e(lA,IQr),e($e,NQr),e($e,iA),e(iA,Vwe),e(Vwe,qQr),e(iA,jQr),e(iA,toe),e(toe,DQr),e(iA,GQr),e($e,OQr),e($e,dA),e(dA,Xwe),e(Xwe,VQr),e(dA,XQr),e(dA,aoe),e(aoe,zQr),e(dA,QQr),e($e,WQr),e($e,cA),e(cA,zwe),e(zwe,HQr),e(cA,UQr),e(cA,noe),e(noe,JQr),e(cA,YQr),e($e,KQr),e($e,mA),e(mA,Qwe),e(Qwe,ZQr),e(mA,eWr),e(mA,soe),e(soe,oWr),e(mA,rWr),e($e,tWr),e($e,fA),e(fA,Wwe),e(Wwe,aWr),e(fA,nWr),e(fA,loe),e(loe,sWr),e(fA,lWr),e($e,iWr),e($e,gA),e(gA,Hwe),e(Hwe,dWr),e(gA,cWr),e(gA,ioe),e(ioe,mWr),e(gA,fWr),e($e,gWr),e($e,hA),e(hA,Uwe),e(Uwe,hWr),e(hA,uWr),e(hA,doe),e(doe,pWr),e(hA,_Wr),e(Qr,bWr),M(uA,Qr,null),b(m,Dze,_),b(m,sm,_),e(sm,pA),e(pA,Jwe),M(L$,Jwe,null),e(sm,vWr),e(sm,Ywe),e(Ywe,FWr),b(m,Gze,_),b(m,vr,_),M(y$,vr,null),e(vr,TWr),e(vr,lm),e(lm,MWr),e(lm,coe),e(coe,EWr),e(lm,CWr),e(lm,moe),e(moe,wWr),e(lm,AWr),e(vr,LWr),e(vr,x$),e(x$,yWr),e(x$,Kwe),e(Kwe,xWr),e(x$,$Wr),e(vr,kWr),e(vr,Yt),M($$,Yt,null),e(Yt,SWr),e(Yt,Zwe),e(Zwe,RWr),e(Yt,PWr),e(Yt,im),e(im,BWr),e(im,eAe),e(eAe,IWr),e(im,NWr),e(im,foe),e(foe,qWr),e(im,jWr),e(Yt,DWr),M(_A,Yt,null),e(vr,GWr),e(vr,Wr),M(k$,Wr,null),e(Wr,OWr),e(Wr,oAe),e(oAe,VWr),e(Wr,XWr),e(Wr,wn),e(wn,zWr),e(wn,rAe),e(rAe,QWr),e(wn,WWr),e(wn,tAe),e(tAe,HWr),e(wn,UWr),e(wn,aAe),e(aAe,JWr),e(wn,YWr),e(Wr,KWr),e(Wr,ke),e(ke,bA),e(bA,nAe),e(nAe,ZWr),e(bA,eHr),e(bA,goe),e(goe,oHr),e(bA,rHr),e(ke,tHr),e(ke,vA),e(vA,sAe),e(sAe,aHr),e(vA,nHr),e(vA,hoe),e(hoe,sHr),e(vA,lHr),e(ke,iHr),e(ke,FA),e(FA,lAe),e(lAe,dHr),e(FA,cHr),e(FA,uoe),e(uoe,mHr),e(FA,fHr),e(ke,gHr),e(ke,TA),e(TA,iAe),e(iAe,hHr),e(TA,uHr),e(TA,poe),e(poe,pHr),e(TA,_Hr),e(ke,bHr),e(ke,MA),e(MA,dAe),e(dAe,vHr),e(MA,FHr),e(MA,_oe),e(_oe,THr),e(MA,MHr),e(ke,EHr),e(ke,EA),e(EA,cAe),e(cAe,CHr),e(EA,wHr),e(EA,boe),e(boe,AHr),e(EA,LHr),e(ke,yHr),e(ke,CA),e(CA,mAe),e(mAe,xHr),e(CA,$Hr),e(CA,voe),e(voe,kHr),e(CA,SHr),e(ke,RHr),e(ke,wA),e(wA,fAe),e(fAe,PHr),e(wA,BHr),e(wA,Foe),e(Foe,IHr),e(wA,NHr),e(ke,qHr),e(ke,AA),e(AA,gAe),e(gAe,jHr),e(AA,DHr),e(AA,Toe),e(Toe,GHr),e(AA,OHr),e(ke,VHr),e(ke,LA),e(LA,hAe),e(hAe,XHr),e(LA,zHr),e(LA,Moe),e(Moe,QHr),e(LA,WHr),e(Wr,HHr),M(yA,Wr,null),b(m,Oze,_),b(m,dm,_),e(dm,xA),e(xA,uAe),M(S$,uAe,null),e(dm,UHr),e(dm,pAe),e(pAe,JHr),b(m,Vze,_),b(m,Fr,_),M(R$,Fr,null),e(Fr,YHr),e(Fr,cm),e(cm,KHr),e(cm,Eoe),e(Eoe,ZHr),e(cm,eUr),e(cm,Coe),e(Coe,oUr),e(cm,rUr),e(Fr,tUr),e(Fr,P$),e(P$,aUr),e(P$,_Ae),e(_Ae,nUr),e(P$,sUr),e(Fr,lUr),e(Fr,Kt),M(B$,Kt,null),e(Kt,iUr),e(Kt,bAe),e(bAe,dUr),e(Kt,cUr),e(Kt,mm),e(mm,mUr),e(mm,vAe),e(vAe,fUr),e(mm,gUr),e(mm,woe),e(woe,hUr),e(mm,uUr),e(Kt,pUr),M($A,Kt,null),e(Fr,_Ur),e(Fr,Hr),M(I$,Hr,null),e(Hr,bUr),e(Hr,FAe),e(FAe,vUr),e(Hr,FUr),e(Hr,An),e(An,TUr),e(An,TAe),e(TAe,MUr),e(An,EUr),e(An,MAe),e(MAe,CUr),e(An,wUr),e(An,EAe),e(EAe,AUr),e(An,LUr),e(Hr,yUr),e(Hr,Se),e(Se,kA),e(kA,CAe),e(CAe,xUr),e(kA,$Ur),e(kA,Aoe),e(Aoe,kUr),e(kA,SUr),e(Se,RUr),e(Se,SA),e(SA,wAe),e(wAe,PUr),e(SA,BUr),e(SA,Loe),e(Loe,IUr),e(SA,NUr),e(Se,qUr),e(Se,RA),e(RA,AAe),e(AAe,jUr),e(RA,DUr),e(RA,yoe),e(yoe,GUr),e(RA,OUr),e(Se,VUr),e(Se,PA),e(PA,LAe),e(LAe,XUr),e(PA,zUr),e(PA,xoe),e(xoe,QUr),e(PA,WUr),e(Se,HUr),e(Se,BA),e(BA,yAe),e(yAe,UUr),e(BA,JUr),e(BA,$oe),e($oe,YUr),e(BA,KUr),e(Se,ZUr),e(Se,IA),e(IA,xAe),e(xAe,eJr),e(IA,oJr),e(IA,koe),e(koe,rJr),e(IA,tJr),e(Se,aJr),e(Se,NA),e(NA,$Ae),e($Ae,nJr),e(NA,sJr),e(NA,Soe),e(Soe,lJr),e(NA,iJr),e(Se,dJr),e(Se,qA),e(qA,kAe),e(kAe,cJr),e(qA,mJr),e(qA,Roe),e(Roe,fJr),e(qA,gJr),e(Se,hJr),e(Se,jA),e(jA,SAe),e(SAe,uJr),e(jA,pJr),e(jA,Poe),e(Poe,_Jr),e(jA,bJr),e(Se,vJr),e(Se,DA),e(DA,RAe),e(RAe,FJr),e(DA,TJr),e(DA,Boe),e(Boe,MJr),e(DA,EJr),e(Hr,CJr),M(GA,Hr,null),b(m,Xze,_),b(m,fm,_),e(fm,OA),e(OA,PAe),M(N$,PAe,null),e(fm,wJr),e(fm,BAe),e(BAe,AJr),b(m,zze,_),b(m,Tr,_),M(q$,Tr,null),e(Tr,LJr),e(Tr,gm),e(gm,yJr),e(gm,Ioe),e(Ioe,xJr),e(gm,$Jr),e(gm,Noe),e(Noe,kJr),e(gm,SJr),e(Tr,RJr),e(Tr,j$),e(j$,PJr),e(j$,IAe),e(IAe,BJr),e(j$,IJr),e(Tr,NJr),e(Tr,Zt),M(D$,Zt,null),e(Zt,qJr),e(Zt,NAe),e(NAe,jJr),e(Zt,DJr),e(Zt,hm),e(hm,GJr),e(hm,qAe),e(qAe,OJr),e(hm,VJr),e(hm,qoe),e(qoe,XJr),e(hm,zJr),e(Zt,QJr),M(VA,Zt,null),e(Tr,WJr),e(Tr,Ur),M(G$,Ur,null),e(Ur,HJr),e(Ur,jAe),e(jAe,UJr),e(Ur,JJr),e(Ur,Ln),e(Ln,YJr),e(Ln,DAe),e(DAe,KJr),e(Ln,ZJr),e(Ln,GAe),e(GAe,eYr),e(Ln,oYr),e(Ln,OAe),e(OAe,rYr),e(Ln,tYr),e(Ur,aYr),e(Ur,Re),e(Re,XA),e(XA,VAe),e(VAe,nYr),e(XA,sYr),e(XA,joe),e(joe,lYr),e(XA,iYr),e(Re,dYr),e(Re,zA),e(zA,XAe),e(XAe,cYr),e(zA,mYr),e(zA,Doe),e(Doe,fYr),e(zA,gYr),e(Re,hYr),e(Re,QA),e(QA,zAe),e(zAe,uYr),e(QA,pYr),e(QA,Goe),e(Goe,_Yr),e(QA,bYr),e(Re,vYr),e(Re,WA),e(WA,QAe),e(QAe,FYr),e(WA,TYr),e(WA,Ooe),e(Ooe,MYr),e(WA,EYr),e(Re,CYr),e(Re,HA),e(HA,WAe),e(WAe,wYr),e(HA,AYr),e(HA,Voe),e(Voe,LYr),e(HA,yYr),e(Re,xYr),e(Re,UA),e(UA,HAe),e(HAe,$Yr),e(UA,kYr),e(UA,Xoe),e(Xoe,SYr),e(UA,RYr),e(Re,PYr),e(Re,JA),e(JA,UAe),e(UAe,BYr),e(JA,IYr),e(JA,zoe),e(zoe,NYr),e(JA,qYr),e(Re,jYr),e(Re,YA),e(YA,JAe),e(JAe,DYr),e(YA,GYr),e(YA,Qoe),e(Qoe,OYr),e(YA,VYr),e(Re,XYr),e(Re,KA),e(KA,YAe),e(YAe,zYr),e(KA,QYr),e(KA,Woe),e(Woe,WYr),e(KA,HYr),e(Re,UYr),e(Re,ZA),e(ZA,KAe),e(KAe,JYr),e(ZA,YYr),e(ZA,Hoe),e(Hoe,KYr),e(ZA,ZYr),e(Ur,eKr),M(e6,Ur,null),b(m,Qze,_),b(m,um,_),e(um,o6),e(o6,ZAe),M(O$,ZAe,null),e(um,oKr),e(um,e6e),e(e6e,rKr),b(m,Wze,_),b(m,Mr,_),M(V$,Mr,null),e(Mr,tKr),e(Mr,pm),e(pm,aKr),e(pm,Uoe),e(Uoe,nKr),e(pm,sKr),e(pm,Joe),e(Joe,lKr),e(pm,iKr),e(Mr,dKr),e(Mr,X$),e(X$,cKr),e(X$,o6e),e(o6e,mKr),e(X$,fKr),e(Mr,gKr),e(Mr,ea),M(z$,ea,null),e(ea,hKr),e(ea,r6e),e(r6e,uKr),e(ea,pKr),e(ea,_m),e(_m,_Kr),e(_m,t6e),e(t6e,bKr),e(_m,vKr),e(_m,Yoe),e(Yoe,FKr),e(_m,TKr),e(ea,MKr),M(r6,ea,null),e(Mr,EKr),e(Mr,Jr),M(Q$,Jr,null),e(Jr,CKr),e(Jr,a6e),e(a6e,wKr),e(Jr,AKr),e(Jr,yn),e(yn,LKr),e(yn,n6e),e(n6e,yKr),e(yn,xKr),e(yn,s6e),e(s6e,$Kr),e(yn,kKr),e(yn,l6e),e(l6e,SKr),e(yn,RKr),e(Jr,PKr),e(Jr,Ve),e(Ve,t6),e(t6,i6e),e(i6e,BKr),e(t6,IKr),e(t6,Koe),e(Koe,NKr),e(t6,qKr),e(Ve,jKr),e(Ve,a6),e(a6,d6e),e(d6e,DKr),e(a6,GKr),e(a6,Zoe),e(Zoe,OKr),e(a6,VKr),e(Ve,XKr),e(Ve,n6),e(n6,c6e),e(c6e,zKr),e(n6,QKr),e(n6,ere),e(ere,WKr),e(n6,HKr),e(Ve,UKr),e(Ve,s6),e(s6,m6e),e(m6e,JKr),e(s6,YKr),e(s6,ore),e(ore,KKr),e(s6,ZKr),e(Ve,eZr),e(Ve,l6),e(l6,f6e),e(f6e,oZr),e(l6,rZr),e(l6,rre),e(rre,tZr),e(l6,aZr),e(Ve,nZr),e(Ve,i6),e(i6,g6e),e(g6e,sZr),e(i6,lZr),e(i6,tre),e(tre,iZr),e(i6,dZr),e(Ve,cZr),e(Ve,d6),e(d6,h6e),e(h6e,mZr),e(d6,fZr),e(d6,are),e(are,gZr),e(d6,hZr),e(Ve,uZr),e(Ve,c6),e(c6,u6e),e(u6e,pZr),e(c6,_Zr),e(c6,nre),e(nre,bZr),e(c6,vZr),e(Jr,FZr),M(m6,Jr,null),b(m,Hze,_),b(m,bm,_),e(bm,f6),e(f6,p6e),M(W$,p6e,null),e(bm,TZr),e(bm,_6e),e(_6e,MZr),b(m,Uze,_),b(m,Er,_),M(H$,Er,null),e(Er,EZr),e(Er,vm),e(vm,CZr),e(vm,sre),e(sre,wZr),e(vm,AZr),e(vm,lre),e(lre,LZr),e(vm,yZr),e(Er,xZr),e(Er,U$),e(U$,$Zr),e(U$,b6e),e(b6e,kZr),e(U$,SZr),e(Er,RZr),e(Er,oa),M(J$,oa,null),e(oa,PZr),e(oa,v6e),e(v6e,BZr),e(oa,IZr),e(oa,Fm),e(Fm,NZr),e(Fm,F6e),e(F6e,qZr),e(Fm,jZr),e(Fm,ire),e(ire,DZr),e(Fm,GZr),e(oa,OZr),M(g6,oa,null),e(Er,VZr),e(Er,Yr),M(Y$,Yr,null),e(Yr,XZr),e(Yr,T6e),e(T6e,zZr),e(Yr,QZr),e(Yr,xn),e(xn,WZr),e(xn,M6e),e(M6e,HZr),e(xn,UZr),e(xn,E6e),e(E6e,JZr),e(xn,YZr),e(xn,C6e),e(C6e,KZr),e(xn,ZZr),e(Yr,eet),e(Yr,Xe),e(Xe,h6),e(h6,w6e),e(w6e,oet),e(h6,ret),e(h6,dre),e(dre,tet),e(h6,aet),e(Xe,net),e(Xe,u6),e(u6,A6e),e(A6e,set),e(u6,iet),e(u6,cre),e(cre,det),e(u6,cet),e(Xe,met),e(Xe,p6),e(p6,L6e),e(L6e,fet),e(p6,get),e(p6,mre),e(mre,het),e(p6,uet),e(Xe,pet),e(Xe,_6),e(_6,y6e),e(y6e,_et),e(_6,bet),e(_6,fre),e(fre,vet),e(_6,Fet),e(Xe,Tet),e(Xe,b6),e(b6,x6e),e(x6e,Met),e(b6,Eet),e(b6,gre),e(gre,Cet),e(b6,wet),e(Xe,Aet),e(Xe,v6),e(v6,$6e),e($6e,Let),e(v6,yet),e(v6,hre),e(hre,xet),e(v6,$et),e(Xe,ket),e(Xe,F6),e(F6,k6e),e(k6e,Set),e(F6,Ret),e(F6,ure),e(ure,Pet),e(F6,Bet),e(Xe,Iet),e(Xe,T6),e(T6,S6e),e(S6e,Net),e(T6,qet),e(T6,pre),e(pre,jet),e(T6,Det),e(Yr,Get),M(M6,Yr,null),b(m,Jze,_),b(m,Tm,_),e(Tm,E6),e(E6,R6e),M(K$,R6e,null),e(Tm,Oet),e(Tm,P6e),e(P6e,Vet),b(m,Yze,_),b(m,Cr,_),M(Z$,Cr,null),e(Cr,Xet),e(Cr,Mm),e(Mm,zet),e(Mm,_re),e(_re,Qet),e(Mm,Wet),e(Mm,bre),e(bre,Het),e(Mm,Uet),e(Cr,Jet),e(Cr,ek),e(ek,Yet),e(ek,B6e),e(B6e,Ket),e(ek,Zet),e(Cr,eot),e(Cr,ra),M(ok,ra,null),e(ra,oot),e(ra,I6e),e(I6e,rot),e(ra,tot),e(ra,Em),e(Em,aot),e(Em,N6e),e(N6e,not),e(Em,sot),e(Em,vre),e(vre,lot),e(Em,iot),e(ra,dot),M(C6,ra,null),e(Cr,cot),e(Cr,Kr),M(rk,Kr,null),e(Kr,mot),e(Kr,q6e),e(q6e,fot),e(Kr,got),e(Kr,$n),e($n,hot),e($n,j6e),e(j6e,uot),e($n,pot),e($n,D6e),e(D6e,_ot),e($n,bot),e($n,G6e),e(G6e,vot),e($n,Fot),e(Kr,Tot),e(Kr,O6e),e(O6e,w6),e(w6,V6e),e(V6e,Mot),e(w6,Eot),e(w6,Fre),e(Fre,Cot),e(w6,wot),e(Kr,Aot),M(A6,Kr,null),b(m,Kze,_),b(m,Cm,_),e(Cm,L6),e(L6,X6e),M(tk,X6e,null),e(Cm,Lot),e(Cm,z6e),e(z6e,yot),b(m,Zze,_),b(m,wr,_),M(ak,wr,null),e(wr,xot),e(wr,wm),e(wm,$ot),e(wm,Tre),e(Tre,kot),e(wm,Sot),e(wm,Mre),e(Mre,Rot),e(wm,Pot),e(wr,Bot),e(wr,nk),e(nk,Iot),e(nk,Q6e),e(Q6e,Not),e(nk,qot),e(wr,jot),e(wr,ta),M(sk,ta,null),e(ta,Dot),e(ta,W6e),e(W6e,Got),e(ta,Oot),e(ta,Am),e(Am,Vot),e(Am,H6e),e(H6e,Xot),e(Am,zot),e(Am,Ere),e(Ere,Qot),e(Am,Wot),e(ta,Hot),M(y6,ta,null),e(wr,Uot),e(wr,Zr),M(lk,Zr,null),e(Zr,Jot),e(Zr,U6e),e(U6e,Yot),e(Zr,Kot),e(Zr,kn),e(kn,Zot),e(kn,J6e),e(J6e,ert),e(kn,ort),e(kn,Y6e),e(Y6e,rrt),e(kn,trt),e(kn,K6e),e(K6e,art),e(kn,nrt),e(Zr,srt),e(Zr,ik),e(ik,x6),e(x6,Z6e),e(Z6e,lrt),e(x6,irt),e(x6,Cre),e(Cre,drt),e(x6,crt),e(ik,mrt),e(ik,$6),e($6,e7e),e(e7e,frt),e($6,grt),e($6,wre),e(wre,hrt),e($6,urt),e(Zr,prt),M(k6,Zr,null),b(m,eQe,_),b(m,Lm,_),e(Lm,S6),e(S6,o7e),M(dk,o7e,null),e(Lm,_rt),e(Lm,r7e),e(r7e,brt),b(m,oQe,_),b(m,Ar,_),M(ck,Ar,null),e(Ar,vrt),e(Ar,ym),e(ym,Frt),e(ym,Are),e(Are,Trt),e(ym,Mrt),e(ym,Lre),e(Lre,Ert),e(ym,Crt),e(Ar,wrt),e(Ar,mk),e(mk,Art),e(mk,t7e),e(t7e,Lrt),e(mk,yrt),e(Ar,xrt),e(Ar,aa),M(fk,aa,null),e(aa,$rt),e(aa,a7e),e(a7e,krt),e(aa,Srt),e(aa,xm),e(xm,Rrt),e(xm,n7e),e(n7e,Prt),e(xm,Brt),e(xm,yre),e(yre,Irt),e(xm,Nrt),e(aa,qrt),M(R6,aa,null),e(Ar,jrt),e(Ar,et),M(gk,et,null),e(et,Drt),e(et,s7e),e(s7e,Grt),e(et,Ort),e(et,Sn),e(Sn,Vrt),e(Sn,l7e),e(l7e,Xrt),e(Sn,zrt),e(Sn,i7e),e(i7e,Qrt),e(Sn,Wrt),e(Sn,d7e),e(d7e,Hrt),e(Sn,Urt),e(et,Jrt),e(et,c7e),e(c7e,P6),e(P6,m7e),e(m7e,Yrt),e(P6,Krt),e(P6,xre),e(xre,Zrt),e(P6,ett),e(et,ott),M(B6,et,null),rQe=!0},p(m,[_]){const hk={};_&2&&(hk.$$scope={dirty:_,ctx:m}),qm.$set(hk);const f7e={};_&2&&(f7e.$$scope={dirty:_,ctx:m}),Yg.$set(f7e);const g7e={};_&2&&(g7e.$$scope={dirty:_,ctx:m}),Rh.$set(g7e);const h7e={};_&2&&(h7e.$$scope={dirty:_,ctx:m}),pu.$set(h7e);const uk={};_&2&&(uk.$$scope={dirty:_,ctx:m}),_u.$set(uk);const u7e={};_&2&&(u7e.$$scope={dirty:_,ctx:m}),qu.$set(u7e);const Rn={};_&2&&(Rn.$$scope={dirty:_,ctx:m}),ju.$set(Rn);const p7e={};_&2&&(p7e.$$scope={dirty:_,ctx:m}),Ou.$set(p7e);const _7e={};_&2&&(_7e.$$scope={dirty:_,ctx:m}),Q_.$set(_7e);const b7e={};_&2&&(b7e.$$scope={dirty:_,ctx:m}),H_.$set(b7e);const pk={};_&2&&(pk.$$scope={dirty:_,ctx:m}),G2.$set(pk);const v7e={};_&2&&(v7e.$$scope={dirty:_,ctx:m}),V2.$set(v7e);const _k={};_&2&&(_k.$$scope={dirty:_,ctx:m}),kb.$set(_k);const F7e={};_&2&&(F7e.$$scope={dirty:_,ctx:m}),Rb.$set(F7e);const bk={};_&2&&(bk.$$scope={dirty:_,ctx:m}),vv.$set(bk);const T7e={};_&2&&(T7e.$$scope={dirty:_,ctx:m}),Tv.$set(T7e);const M7e={};_&2&&(M7e.$$scope={dirty:_,ctx:m}),Gv.$set(M7e);const E7e={};_&2&&(E7e.$$scope={dirty:_,ctx:m}),Vv.$set(E7e);const $m={};_&2&&($m.$$scope={dirty:_,ctx:m}),G1.$set($m);const C7e={};_&2&&(C7e.$$scope={dirty:_,ctx:m}),V1.$set(C7e);const w7e={};_&2&&(w7e.$$scope={dirty:_,ctx:m}),TF.$set(w7e);const A7e={};_&2&&(A7e.$$scope={dirty:_,ctx:m}),EF.$set(A7e);const vk={};_&2&&(vk.$$scope={dirty:_,ctx:m}),kF.$set(vk);const L7e={};_&2&&(L7e.$$scope={dirty:_,ctx:m}),RF.$set(L7e);const y7e={};_&2&&(y7e.$$scope={dirty:_,ctx:m}),_T.$set(y7e);const x7e={};_&2&&(x7e.$$scope={dirty:_,ctx:m}),vT.$set(x7e);const nt={};_&2&&(nt.$$scope={dirty:_,ctx:m}),dM.$set(nt);const Fk={};_&2&&(Fk.$$scope={dirty:_,ctx:m}),mM.$set(Fk);const $7e={};_&2&&($7e.$$scope={dirty:_,ctx:m}),hM.$set($7e);const Tk={};_&2&&(Tk.$$scope={dirty:_,ctx:m}),pM.$set(Tk);const k7e={};_&2&&(k7e.$$scope={dirty:_,ctx:m}),kM.$set(k7e);const st={};_&2&&(st.$$scope={dirty:_,ctx:m}),RM.$set(st);const S7e={};_&2&&(S7e.$$scope={dirty:_,ctx:m}),IM.$set(S7e);const km={};_&2&&(km.$$scope={dirty:_,ctx:m}),qM.$set(km);const R7e={};_&2&&(R7e.$$scope={dirty:_,ctx:m}),GM.$set(R7e);const P7e={};_&2&&(P7e.$$scope={dirty:_,ctx:m}),VM.$set(P7e);const L={};_&2&&(L.$$scope={dirty:_,ctx:m}),e4.$set(L);const I6={};_&2&&(I6.$$scope={dirty:_,ctx:m}),r4.$set(I6);const B7e={};_&2&&(B7e.$$scope={dirty:_,ctx:m}),d4.$set(B7e);const I7e={};_&2&&(I7e.$$scope={dirty:_,ctx:m}),m4.$set(I7e);const N6={};_&2&&(N6.$$scope={dirty:_,ctx:m}),E4.$set(N6);const N7e={};_&2&&(N7e.$$scope={dirty:_,ctx:m}),w4.$set(N7e);const q7e={};_&2&&(q7e.$$scope={dirty:_,ctx:m}),x4.$set(q7e);const q6={};_&2&&(q6.$$scope={dirty:_,ctx:m}),k4.$set(q6);const j7e={};_&2&&(j7e.$$scope={dirty:_,ctx:m}),q4.$set(j7e);const D7e={};_&2&&(D7e.$$scope={dirty:_,ctx:m}),D4.$set(D7e);const j6={};_&2&&(j6.$$scope={dirty:_,ctx:m}),z4.$set(j6);const G7e={};_&2&&(G7e.$$scope={dirty:_,ctx:m}),W4.$set(G7e);const O7e={};_&2&&(O7e.$$scope={dirty:_,ctx:m}),Y4.$set(O7e);const D6={};_&2&&(D6.$$scope={dirty:_,ctx:m}),Z4.$set(D6);const V7e={};_&2&&(V7e.$$scope={dirty:_,ctx:m}),rE.$set(V7e);const X7e={};_&2&&(X7e.$$scope={dirty:_,ctx:m}),aE.$set(X7e);const G6={};_&2&&(G6.$$scope={dirty:_,ctx:m}),mE.$set(G6);const z7e={};_&2&&(z7e.$$scope={dirty:_,ctx:m}),gE.$set(z7e);const Q7e={};_&2&&(Q7e.$$scope={dirty:_,ctx:m}),pE.$set(Q7e);const O6={};_&2&&(O6.$$scope={dirty:_,ctx:m}),bE.$set(O6);const W7e={};_&2&&(W7e.$$scope={dirty:_,ctx:m}),hC.$set(W7e);const H7e={};_&2&&(H7e.$$scope={dirty:_,ctx:m}),pC.$set(H7e);const V6={};_&2&&(V6.$$scope={dirty:_,ctx:m}),DC.$set(V6);const U7e={};_&2&&(U7e.$$scope={dirty:_,ctx:m}),OC.$set(U7e);const J7e={};_&2&&(J7e.$$scope={dirty:_,ctx:m}),r3.$set(J7e);const X6={};_&2&&(X6.$$scope={dirty:_,ctx:m}),a3.$set(X6);const Y7e={};_&2&&(Y7e.$$scope={dirty:_,ctx:m}),m3.$set(Y7e);const K7e={};_&2&&(K7e.$$scope={dirty:_,ctx:m}),g3.$set(K7e);const z6={};_&2&&(z6.$$scope={dirty:_,ctx:m}),P3.$set(z6);const Z7e={};_&2&&(Z7e.$$scope={dirty:_,ctx:m}),I3.$set(Z7e);const eLe={};_&2&&(eLe.$$scope={dirty:_,ctx:m}),W3.$set(eLe);const Q6={};_&2&&(Q6.$$scope={dirty:_,ctx:m}),U3.$set(Q6);const oLe={};_&2&&(oLe.$$scope={dirty:_,ctx:m}),M5.$set(oLe);const rLe={};_&2&&(rLe.$$scope={dirty:_,ctx:m}),C5.$set(rLe);const W6={};_&2&&(W6.$$scope={dirty:_,ctx:m}),O5.$set(W6);const tLe={};_&2&&(tLe.$$scope={dirty:_,ctx:m}),X5.$set(tLe);const aLe={};_&2&&(aLe.$$scope={dirty:_,ctx:m}),W5.$set(aLe);const H6={};_&2&&(H6.$$scope={dirty:_,ctx:m}),U5.$set(H6);const nLe={};_&2&&(nLe.$$scope={dirty:_,ctx:m}),Y5.$set(nLe);const sLe={};_&2&&(sLe.$$scope={dirty:_,ctx:m}),Z5.$set(sLe);const U6={};_&2&&(U6.$$scope={dirty:_,ctx:m}),F0.$set(U6);const lLe={};_&2&&(lLe.$$scope={dirty:_,ctx:m}),M0.$set(lLe);const iLe={};_&2&&(iLe.$$scope={dirty:_,ctx:m}),V0.$set(iLe);const J6={};_&2&&(J6.$$scope={dirty:_,ctx:m}),z0.$set(J6);const dLe={};_&2&&(dLe.$$scope={dirty:_,ctx:m}),W0.$set(dLe);const cLe={};_&2&&(cLe.$$scope={dirty:_,ctx:m}),U0.$set(cLe);const Y6={};_&2&&(Y6.$$scope={dirty:_,ctx:m}),Y0.$set(Y6);const mLe={};_&2&&(mLe.$$scope={dirty:_,ctx:m}),Z0.$set(mLe);const fLe={};_&2&&(fLe.$$scope={dirty:_,ctx:m}),Lw.$set(fLe);const K6={};_&2&&(K6.$$scope={dirty:_,ctx:m}),xw.$set(K6);const gLe={};_&2&&(gLe.$$scope={dirty:_,ctx:m}),Dw.$set(gLe);const hLe={};_&2&&(hLe.$$scope={dirty:_,ctx:m}),Ow.$set(hLe);const Z6={};_&2&&(Z6.$$scope={dirty:_,ctx:m}),rA.$set(Z6);const uLe={};_&2&&(uLe.$$scope={dirty:_,ctx:m}),aA.$set(uLe);const pLe={};_&2&&(pLe.$$scope={dirty:_,ctx:m}),uA.$set(pLe);const e7={};_&2&&(e7.$$scope={dirty:_,ctx:m}),_A.$set(e7);const _Le={};_&2&&(_Le.$$scope={dirty:_,ctx:m}),yA.$set(_Le);const bLe={};_&2&&(bLe.$$scope={dirty:_,ctx:m}),$A.$set(bLe);const o7={};_&2&&(o7.$$scope={dirty:_,ctx:m}),GA.$set(o7);const vLe={};_&2&&(vLe.$$scope={dirty:_,ctx:m}),VA.$set(vLe);const FLe={};_&2&&(FLe.$$scope={dirty:_,ctx:m}),e6.$set(FLe);const r7={};_&2&&(r7.$$scope={dirty:_,ctx:m}),r6.$set(r7);const TLe={};_&2&&(TLe.$$scope={dirty:_,ctx:m}),m6.$set(TLe);const MLe={};_&2&&(MLe.$$scope={dirty:_,ctx:m}),g6.$set(MLe);const t7={};_&2&&(t7.$$scope={dirty:_,ctx:m}),M6.$set(t7);const ELe={};_&2&&(ELe.$$scope={dirty:_,ctx:m}),C6.$set(ELe);const CLe={};_&2&&(CLe.$$scope={dirty:_,ctx:m}),A6.$set(CLe);const a7={};_&2&&(a7.$$scope={dirty:_,ctx:m}),y6.$set(a7);const wLe={};_&2&&(wLe.$$scope={dirty:_,ctx:m}),k6.$set(wLe);const ALe={};_&2&&(ALe.$$scope={dirty:_,ctx:m}),R6.$set(ALe);const n7={};_&2&&(n7.$$scope={dirty:_,ctx:m}),B6.$set(n7)},i(m){rQe||(E(d.$$.fragment,m),E(Sa.$$.fragment,m),E(ay.$$.fragment,m),E(ny.$$.fragment,m),E(qm.$$.fragment,m),E(sy.$$.fragment,m),E(ly.$$.fragment,m),E(cy.$$.fragment,m),E(Yg.$$.fragment,m),E(my.$$.fragment,m),E(fy.$$.fragment,m),E(gy.$$.fragment,m),E(py.$$.fragment,m),E(Rh.$$.fragment,m),E(_y.$$.fragment,m),E(by.$$.fragment,m),E(vy.$$.fragment,m),E(My.$$.fragment,m),E(pu.$$.fragment,m),E(_u.$$.fragment,m),E(Ey.$$.fragment,m),E(Cy.$$.fragment,m),E(wy.$$.fragment,m),E(yy.$$.fragment,m),E(qu.$$.fragment,m),E(ju.$$.fragment,m),E(xy.$$.fragment,m),E($y.$$.fragment,m),E(ky.$$.fragment,m),E(Ry.$$.fragment,m),E(Ou.$$.fragment,m),E(Py.$$.fragment,m),E(Q_.$$.fragment,m),E(By.$$.fragment,m),E(Iy.$$.fragment,m),E(qy.$$.fragment,m),E(H_.$$.fragment,m),E(jy.$$.fragment,m),E(G2.$$.fragment,m),E(Dy.$$.fragment,m),E(Gy.$$.fragment,m),E(Vy.$$.fragment,m),E(V2.$$.fragment,m),E(Xy.$$.fragment,m),E(kb.$$.fragment,m),E(zy.$$.fragment,m),E(Qy.$$.fragment,m),E(Hy.$$.fragment,m),E(Rb.$$.fragment,m),E(Uy.$$.fragment,m),E(vv.$$.fragment,m),E(Jy.$$.fragment,m),E(Yy.$$.fragment,m),E(Zy.$$.fragment,m),E(Tv.$$.fragment,m),E(e8.$$.fragment,m),E(Gv.$$.fragment,m),E(o8.$$.fragment,m),E(r8.$$.fragment,m),E(a8.$$.fragment,m),E(Vv.$$.fragment,m),E(n8.$$.fragment,m),E(G1.$$.fragment,m),E(s8.$$.fragment,m),E(l8.$$.fragment,m),E(d8.$$.fragment,m),E(V1.$$.fragment,m),E(c8.$$.fragment,m),E(TF.$$.fragment,m),E(m8.$$.fragment,m),E(f8.$$.fragment,m),E(h8.$$.fragment,m),E(EF.$$.fragment,m),E(u8.$$.fragment,m),E(kF.$$.fragment,m),E(p8.$$.fragment,m),E(_8.$$.fragment,m),E(v8.$$.fragment,m),E(RF.$$.fragment,m),E(F8.$$.fragment,m),E(_T.$$.fragment,m),E(T8.$$.fragment,m),E(M8.$$.fragment,m),E(C8.$$.fragment,m),E(vT.$$.fragment,m),E(w8.$$.fragment,m),E(dM.$$.fragment,m),E(A8.$$.fragment,m),E(L8.$$.fragment,m),E(x8.$$.fragment,m),E(mM.$$.fragment,m),E($8.$$.fragment,m),E(hM.$$.fragment,m),E(k8.$$.fragment,m),E(S8.$$.fragment,m),E(P8.$$.fragment,m),E(pM.$$.fragment,m),E(B8.$$.fragment,m),E(kM.$$.fragment,m),E(I8.$$.fragment,m),E(N8.$$.fragment,m),E(j8.$$.fragment,m),E(RM.$$.fragment,m),E(D8.$$.fragment,m),E(IM.$$.fragment,m),E(G8.$$.fragment,m),E(O8.$$.fragment,m),E(X8.$$.fragment,m),E(qM.$$.fragment,m),E(z8.$$.fragment,m),E(GM.$$.fragment,m),E(Q8.$$.fragment,m),E(W8.$$.fragment,m),E(U8.$$.fragment,m),E(VM.$$.fragment,m),E(J8.$$.fragment,m),E(e4.$$.fragment,m),E(Y8.$$.fragment,m),E(K8.$$.fragment,m),E(e9.$$.fragment,m),E(r4.$$.fragment,m),E(o9.$$.fragment,m),E(d4.$$.fragment,m),E(r9.$$.fragment,m),E(t9.$$.fragment,m),E(n9.$$.fragment,m),E(m4.$$.fragment,m),E(s9.$$.fragment,m),E(E4.$$.fragment,m),E(l9.$$.fragment,m),E(i9.$$.fragment,m),E(c9.$$.fragment,m),E(w4.$$.fragment,m),E(m9.$$.fragment,m),E(x4.$$.fragment,m),E(g9.$$.fragment,m),E(h9.$$.fragment,m),E(p9.$$.fragment,m),E(k4.$$.fragment,m),E(_9.$$.fragment,m),E(q4.$$.fragment,m),E(b9.$$.fragment,m),E(v9.$$.fragment,m),E(T9.$$.fragment,m),E(D4.$$.fragment,m),E(M9.$$.fragment,m),E(z4.$$.fragment,m),E(E9.$$.fragment,m),E(C9.$$.fragment,m),E(A9.$$.fragment,m),E(W4.$$.fragment,m),E(L9.$$.fragment,m),E(Y4.$$.fragment,m),E(x9.$$.fragment,m),E($9.$$.fragment,m),E(S9.$$.fragment,m),E(Z4.$$.fragment,m),E(R9.$$.fragment,m),E(rE.$$.fragment,m),E(P9.$$.fragment,m),E(B9.$$.fragment,m),E(N9.$$.fragment,m),E(aE.$$.fragment,m),E(q9.$$.fragment,m),E(mE.$$.fragment,m),E(j9.$$.fragment,m),E(D9.$$.fragment,m),E(O9.$$.fragment,m),E(gE.$$.fragment,m),E(V9.$$.fragment,m),E(pE.$$.fragment,m),E(X9.$$.fragment,m),E(z9.$$.fragment,m),E(W9.$$.fragment,m),E(bE.$$.fragment,m),E(H9.$$.fragment,m),E(hC.$$.fragment,m),E(U9.$$.fragment,m),E(J9.$$.fragment,m),E(K9.$$.fragment,m),E(pC.$$.fragment,m),E(Z9.$$.fragment,m),E(DC.$$.fragment,m),E(ex.$$.fragment,m),E(ox.$$.fragment,m),E(tx.$$.fragment,m),E(OC.$$.fragment,m),E(ax.$$.fragment,m),E(r3.$$.fragment,m),E(nx.$$.fragment,m),E(sx.$$.fragment,m),E(ix.$$.fragment,m),E(a3.$$.fragment,m),E(dx.$$.fragment,m),E(m3.$$.fragment,m),E(cx.$$.fragment,m),E(mx.$$.fragment,m),E(gx.$$.fragment,m),E(g3.$$.fragment,m),E(hx.$$.fragment,m),E(P3.$$.fragment,m),E(ux.$$.fragment,m),E(px.$$.fragment,m),E(bx.$$.fragment,m),E(I3.$$.fragment,m),E(vx.$$.fragment,m),E(W3.$$.fragment,m),E(Fx.$$.fragment,m),E(Tx.$$.fragment,m),E(Ex.$$.fragment,m),E(U3.$$.fragment,m),E(Cx.$$.fragment,m),E(M5.$$.fragment,m),E(wx.$$.fragment,m),E(Ax.$$.fragment,m),E(yx.$$.fragment,m),E(C5.$$.fragment,m),E(xx.$$.fragment,m),E(O5.$$.fragment,m),E($x.$$.fragment,m),E(kx.$$.fragment,m),E(Rx.$$.fragment,m),E(X5.$$.fragment,m),E(Px.$$.fragment,m),E(W5.$$.fragment,m),E(Ix.$$.fragment,m),E(Nx.$$.fragment,m),E(jx.$$.fragment,m),E(U5.$$.fragment,m),E(Dx.$$.fragment,m),E(Y5.$$.fragment,m),E(Gx.$$.fragment,m),E(Ox.$$.fragment,m),E(Xx.$$.fragment,m),E(Z5.$$.fragment,m),E(zx.$$.fragment,m),E(F0.$$.fragment,m),E(Qx.$$.fragment,m),E(Wx.$$.fragment,m),E(Ux.$$.fragment,m),E(M0.$$.fragment,m),E(Jx.$$.fragment,m),E(V0.$$.fragment,m),E(Yx.$$.fragment,m),E(Kx.$$.fragment,m),E(e$.$$.fragment,m),E(z0.$$.fragment,m),E(o$.$$.fragment,m),E(W0.$$.fragment,m),E(r$.$$.fragment,m),E(t$.$$.fragment,m),E(n$.$$.fragment,m),E(U0.$$.fragment,m),E(s$.$$.fragment,m),E(Y0.$$.fragment,m),E(l$.$$.fragment,m),E(i$.$$.fragment,m),E(c$.$$.fragment,m),E(Z0.$$.fragment,m),E(m$.$$.fragment,m),E(Lw.$$.fragment,m),E(f$.$$.fragment,m),E(g$.$$.fragment,m),E(u$.$$.fragment,m),E(xw.$$.fragment,m),E(p$.$$.fragment,m),E(Dw.$$.fragment,m),E(_$.$$.fragment,m),E(b$.$$.fragment,m),E(F$.$$.fragment,m),E(Ow.$$.fragment,m),E(T$.$$.fragment,m),E(rA.$$.fragment,m),E(M$.$$.fragment,m),E(E$.$$.fragment,m),E(w$.$$.fragment,m),E(aA.$$.fragment,m),E(A$.$$.fragment,m),E(uA.$$.fragment,m),E(L$.$$.fragment,m),E(y$.$$.fragment,m),E($$.$$.fragment,m),E(_A.$$.fragment,m),E(k$.$$.fragment,m),E(yA.$$.fragment,m),E(S$.$$.fragment,m),E(R$.$$.fragment,m),E(B$.$$.fragment,m),E($A.$$.fragment,m),E(I$.$$.fragment,m),E(GA.$$.fragment,m),E(N$.$$.fragment,m),E(q$.$$.fragment,m),E(D$.$$.fragment,m),E(VA.$$.fragment,m),E(G$.$$.fragment,m),E(e6.$$.fragment,m),E(O$.$$.fragment,m),E(V$.$$.fragment,m),E(z$.$$.fragment,m),E(r6.$$.fragment,m),E(Q$.$$.fragment,m),E(m6.$$.fragment,m),E(W$.$$.fragment,m),E(H$.$$.fragment,m),E(J$.$$.fragment,m),E(g6.$$.fragment,m),E(Y$.$$.fragment,m),E(M6.$$.fragment,m),E(K$.$$.fragment,m),E(Z$.$$.fragment,m),E(ok.$$.fragment,m),E(C6.$$.fragment,m),E(rk.$$.fragment,m),E(A6.$$.fragment,m),E(tk.$$.fragment,m),E(ak.$$.fragment,m),E(sk.$$.fragment,m),E(y6.$$.fragment,m),E(lk.$$.fragment,m),E(k6.$$.fragment,m),E(dk.$$.fragment,m),E(ck.$$.fragment,m),E(fk.$$.fragment,m),E(R6.$$.fragment,m),E(gk.$$.fragment,m),E(B6.$$.fragment,m),rQe=!0)},o(m){C(d.$$.fragment,m),C(Sa.$$.fragment,m),C(ay.$$.fragment,m),C(ny.$$.fragment,m),C(qm.$$.fragment,m),C(sy.$$.fragment,m),C(ly.$$.fragment,m),C(cy.$$.fragment,m),C(Yg.$$.fragment,m),C(my.$$.fragment,m),C(fy.$$.fragment,m),C(gy.$$.fragment,m),C(py.$$.fragment,m),C(Rh.$$.fragment,m),C(_y.$$.fragment,m),C(by.$$.fragment,m),C(vy.$$.fragment,m),C(My.$$.fragment,m),C(pu.$$.fragment,m),C(_u.$$.fragment,m),C(Ey.$$.fragment,m),C(Cy.$$.fragment,m),C(wy.$$.fragment,m),C(yy.$$.fragment,m),C(qu.$$.fragment,m),C(ju.$$.fragment,m),C(xy.$$.fragment,m),C($y.$$.fragment,m),C(ky.$$.fragment,m),C(Ry.$$.fragment,m),C(Ou.$$.fragment,m),C(Py.$$.fragment,m),C(Q_.$$.fragment,m),C(By.$$.fragment,m),C(Iy.$$.fragment,m),C(qy.$$.fragment,m),C(H_.$$.fragment,m),C(jy.$$.fragment,m),C(G2.$$.fragment,m),C(Dy.$$.fragment,m),C(Gy.$$.fragment,m),C(Vy.$$.fragment,m),C(V2.$$.fragment,m),C(Xy.$$.fragment,m),C(kb.$$.fragment,m),C(zy.$$.fragment,m),C(Qy.$$.fragment,m),C(Hy.$$.fragment,m),C(Rb.$$.fragment,m),C(Uy.$$.fragment,m),C(vv.$$.fragment,m),C(Jy.$$.fragment,m),C(Yy.$$.fragment,m),C(Zy.$$.fragment,m),C(Tv.$$.fragment,m),C(e8.$$.fragment,m),C(Gv.$$.fragment,m),C(o8.$$.fragment,m),C(r8.$$.fragment,m),C(a8.$$.fragment,m),C(Vv.$$.fragment,m),C(n8.$$.fragment,m),C(G1.$$.fragment,m),C(s8.$$.fragment,m),C(l8.$$.fragment,m),C(d8.$$.fragment,m),C(V1.$$.fragment,m),C(c8.$$.fragment,m),C(TF.$$.fragment,m),C(m8.$$.fragment,m),C(f8.$$.fragment,m),C(h8.$$.fragment,m),C(EF.$$.fragment,m),C(u8.$$.fragment,m),C(kF.$$.fragment,m),C(p8.$$.fragment,m),C(_8.$$.fragment,m),C(v8.$$.fragment,m),C(RF.$$.fragment,m),C(F8.$$.fragment,m),C(_T.$$.fragment,m),C(T8.$$.fragment,m),C(M8.$$.fragment,m),C(C8.$$.fragment,m),C(vT.$$.fragment,m),C(w8.$$.fragment,m),C(dM.$$.fragment,m),C(A8.$$.fragment,m),C(L8.$$.fragment,m),C(x8.$$.fragment,m),C(mM.$$.fragment,m),C($8.$$.fragment,m),C(hM.$$.fragment,m),C(k8.$$.fragment,m),C(S8.$$.fragment,m),C(P8.$$.fragment,m),C(pM.$$.fragment,m),C(B8.$$.fragment,m),C(kM.$$.fragment,m),C(I8.$$.fragment,m),C(N8.$$.fragment,m),C(j8.$$.fragment,m),C(RM.$$.fragment,m),C(D8.$$.fragment,m),C(IM.$$.fragment,m),C(G8.$$.fragment,m),C(O8.$$.fragment,m),C(X8.$$.fragment,m),C(qM.$$.fragment,m),C(z8.$$.fragment,m),C(GM.$$.fragment,m),C(Q8.$$.fragment,m),C(W8.$$.fragment,m),C(U8.$$.fragment,m),C(VM.$$.fragment,m),C(J8.$$.fragment,m),C(e4.$$.fragment,m),C(Y8.$$.fragment,m),C(K8.$$.fragment,m),C(e9.$$.fragment,m),C(r4.$$.fragment,m),C(o9.$$.fragment,m),C(d4.$$.fragment,m),C(r9.$$.fragment,m),C(t9.$$.fragment,m),C(n9.$$.fragment,m),C(m4.$$.fragment,m),C(s9.$$.fragment,m),C(E4.$$.fragment,m),C(l9.$$.fragment,m),C(i9.$$.fragment,m),C(c9.$$.fragment,m),C(w4.$$.fragment,m),C(m9.$$.fragment,m),C(x4.$$.fragment,m),C(g9.$$.fragment,m),C(h9.$$.fragment,m),C(p9.$$.fragment,m),C(k4.$$.fragment,m),C(_9.$$.fragment,m),C(q4.$$.fragment,m),C(b9.$$.fragment,m),C(v9.$$.fragment,m),C(T9.$$.fragment,m),C(D4.$$.fragment,m),C(M9.$$.fragment,m),C(z4.$$.fragment,m),C(E9.$$.fragment,m),C(C9.$$.fragment,m),C(A9.$$.fragment,m),C(W4.$$.fragment,m),C(L9.$$.fragment,m),C(Y4.$$.fragment,m),C(x9.$$.fragment,m),C($9.$$.fragment,m),C(S9.$$.fragment,m),C(Z4.$$.fragment,m),C(R9.$$.fragment,m),C(rE.$$.fragment,m),C(P9.$$.fragment,m),C(B9.$$.fragment,m),C(N9.$$.fragment,m),C(aE.$$.fragment,m),C(q9.$$.fragment,m),C(mE.$$.fragment,m),C(j9.$$.fragment,m),C(D9.$$.fragment,m),C(O9.$$.fragment,m),C(gE.$$.fragment,m),C(V9.$$.fragment,m),C(pE.$$.fragment,m),C(X9.$$.fragment,m),C(z9.$$.fragment,m),C(W9.$$.fragment,m),C(bE.$$.fragment,m),C(H9.$$.fragment,m),C(hC.$$.fragment,m),C(U9.$$.fragment,m),C(J9.$$.fragment,m),C(K9.$$.fragment,m),C(pC.$$.fragment,m),C(Z9.$$.fragment,m),C(DC.$$.fragment,m),C(ex.$$.fragment,m),C(ox.$$.fragment,m),C(tx.$$.fragment,m),C(OC.$$.fragment,m),C(ax.$$.fragment,m),C(r3.$$.fragment,m),C(nx.$$.fragment,m),C(sx.$$.fragment,m),C(ix.$$.fragment,m),C(a3.$$.fragment,m),C(dx.$$.fragment,m),C(m3.$$.fragment,m),C(cx.$$.fragment,m),C(mx.$$.fragment,m),C(gx.$$.fragment,m),C(g3.$$.fragment,m),C(hx.$$.fragment,m),C(P3.$$.fragment,m),C(ux.$$.fragment,m),C(px.$$.fragment,m),C(bx.$$.fragment,m),C(I3.$$.fragment,m),C(vx.$$.fragment,m),C(W3.$$.fragment,m),C(Fx.$$.fragment,m),C(Tx.$$.fragment,m),C(Ex.$$.fragment,m),C(U3.$$.fragment,m),C(Cx.$$.fragment,m),C(M5.$$.fragment,m),C(wx.$$.fragment,m),C(Ax.$$.fragment,m),C(yx.$$.fragment,m),C(C5.$$.fragment,m),C(xx.$$.fragment,m),C(O5.$$.fragment,m),C($x.$$.fragment,m),C(kx.$$.fragment,m),C(Rx.$$.fragment,m),C(X5.$$.fragment,m),C(Px.$$.fragment,m),C(W5.$$.fragment,m),C(Ix.$$.fragment,m),C(Nx.$$.fragment,m),C(jx.$$.fragment,m),C(U5.$$.fragment,m),C(Dx.$$.fragment,m),C(Y5.$$.fragment,m),C(Gx.$$.fragment,m),C(Ox.$$.fragment,m),C(Xx.$$.fragment,m),C(Z5.$$.fragment,m),C(zx.$$.fragment,m),C(F0.$$.fragment,m),C(Qx.$$.fragment,m),C(Wx.$$.fragment,m),C(Ux.$$.fragment,m),C(M0.$$.fragment,m),C(Jx.$$.fragment,m),C(V0.$$.fragment,m),C(Yx.$$.fragment,m),C(Kx.$$.fragment,m),C(e$.$$.fragment,m),C(z0.$$.fragment,m),C(o$.$$.fragment,m),C(W0.$$.fragment,m),C(r$.$$.fragment,m),C(t$.$$.fragment,m),C(n$.$$.fragment,m),C(U0.$$.fragment,m),C(s$.$$.fragment,m),C(Y0.$$.fragment,m),C(l$.$$.fragment,m),C(i$.$$.fragment,m),C(c$.$$.fragment,m),C(Z0.$$.fragment,m),C(m$.$$.fragment,m),C(Lw.$$.fragment,m),C(f$.$$.fragment,m),C(g$.$$.fragment,m),C(u$.$$.fragment,m),C(xw.$$.fragment,m),C(p$.$$.fragment,m),C(Dw.$$.fragment,m),C(_$.$$.fragment,m),C(b$.$$.fragment,m),C(F$.$$.fragment,m),C(Ow.$$.fragment,m),C(T$.$$.fragment,m),C(rA.$$.fragment,m),C(M$.$$.fragment,m),C(E$.$$.fragment,m),C(w$.$$.fragment,m),C(aA.$$.fragment,m),C(A$.$$.fragment,m),C(uA.$$.fragment,m),C(L$.$$.fragment,m),C(y$.$$.fragment,m),C($$.$$.fragment,m),C(_A.$$.fragment,m),C(k$.$$.fragment,m),C(yA.$$.fragment,m),C(S$.$$.fragment,m),C(R$.$$.fragment,m),C(B$.$$.fragment,m),C($A.$$.fragment,m),C(I$.$$.fragment,m),C(GA.$$.fragment,m),C(N$.$$.fragment,m),C(q$.$$.fragment,m),C(D$.$$.fragment,m),C(VA.$$.fragment,m),C(G$.$$.fragment,m),C(e6.$$.fragment,m),C(O$.$$.fragment,m),C(V$.$$.fragment,m),C(z$.$$.fragment,m),C(r6.$$.fragment,m),C(Q$.$$.fragment,m),C(m6.$$.fragment,m),C(W$.$$.fragment,m),C(H$.$$.fragment,m),C(J$.$$.fragment,m),C(g6.$$.fragment,m),C(Y$.$$.fragment,m),C(M6.$$.fragment,m),C(K$.$$.fragment,m),C(Z$.$$.fragment,m),C(ok.$$.fragment,m),C(C6.$$.fragment,m),C(rk.$$.fragment,m),C(A6.$$.fragment,m),C(tk.$$.fragment,m),C(ak.$$.fragment,m),C(sk.$$.fragment,m),C(y6.$$.fragment,m),C(lk.$$.fragment,m),C(k6.$$.fragment,m),C(dk.$$.fragment,m),C(ck.$$.fragment,m),C(fk.$$.fragment,m),C(R6.$$.fragment,m),C(gk.$$.fragment,m),C(B6.$$.fragment,m),rQe=!1},d(m){t(g),m&&t(v),m&&t(u),w(d),m&&t(Rm),m&&t(lt),m&&t(Oe),m&&t(We),m&&t(Bm),w(Sa,m),m&&t(He),m&&t(Ae),m&&t(wo),m&&t(Ra),m&&t(YVe),m&&t(Pi),w(ay),m&&t(KVe),m&&t(qn),m&&t(ZVe),w(ny,m),m&&t(eXe),m&&t(DS),m&&t(oXe),w(qm,m),m&&t(rXe),m&&t(Bi),w(sy),m&&t(tXe),m&&t(Ao),w(ly),w(cy),w(Yg),w(my),m&&t(aXe),m&&t(Ni),w(fy),m&&t(nXe),m&&t(Lo),w(gy),w(py),w(Rh),w(_y),m&&t(sXe),m&&t(qi),w(by),m&&t(lXe),m&&t(yo),w(vy),w(My),w(pu),w(_u),w(Ey),m&&t(iXe),m&&t(ji),w(Cy),m&&t(dXe),m&&t(xo),w(wy),w(yy),w(qu),w(ju),w(xy),m&&t(cXe),m&&t(Gi),w($y),m&&t(mXe),m&&t($o),w(ky),w(Ry),w(Ou),w(Py),w(Q_),m&&t(fXe),m&&t(Xi),w(By),m&&t(gXe),m&&t(ko),w(Iy),w(qy),w(H_),w(jy),w(G2),m&&t(hXe),m&&t(Wi),w(Dy),m&&t(uXe),m&&t(So),w(Gy),w(Vy),w(V2),w(Xy),w(kb),m&&t(pXe),m&&t(Ji),w(zy),m&&t(_Xe),m&&t(Ro),w(Qy),w(Hy),w(Rb),w(Uy),w(vv),m&&t(bXe),m&&t(Zi),w(Jy),m&&t(vXe),m&&t(Po),w(Yy),w(Zy),w(Tv),w(e8),w(Gv),m&&t(FXe),m&&t(rd),w(o8),m&&t(TXe),m&&t(Bo),w(r8),w(a8),w(Vv),w(n8),w(G1),m&&t(MXe),m&&t(nd),w(s8),m&&t(EXe),m&&t(Io),w(l8),w(d8),w(V1),w(c8),w(TF),m&&t(CXe),m&&t(id),w(m8),m&&t(wXe),m&&t(No),w(f8),w(h8),w(EF),w(u8),w(kF),m&&t(AXe),m&&t(md),w(p8),m&&t(LXe),m&&t(jo),w(_8),w(v8),w(RF),w(F8),w(_T),m&&t(yXe),m&&t(hd),w(T8),m&&t(xXe),m&&t(Do),w(M8),w(C8),w(vT),w(w8),w(dM),m&&t($Xe),m&&t(_d),w(A8),m&&t(kXe),m&&t(Go),w(L8),w(x8),w(mM),w($8),w(hM),m&&t(SXe),m&&t(Fd),w(k8),m&&t(RXe),m&&t(Oo),w(S8),w(P8),w(pM),w(B8),w(kM),m&&t(PXe),m&&t(Ed),w(I8),m&&t(BXe),m&&t(Vo),w(N8),w(j8),w(RM),w(D8),w(IM),m&&t(IXe),m&&t(Ad),w(G8),m&&t(NXe),m&&t(Xo),w(O8),w(X8),w(qM),w(z8),w(GM),m&&t(qXe),m&&t(xd),w(Q8),m&&t(jXe),m&&t(zo),w(W8),w(U8),w(VM),w(J8),w(e4),m&&t(DXe),m&&t(Sd),w(Y8),m&&t(GXe),m&&t(Qo),w(K8),w(e9),w(r4),w(o9),w(d4),m&&t(OXe),m&&t(Bd),w(r9),m&&t(VXe),m&&t(Wo),w(t9),w(n9),w(m4),w(s9),w(E4),m&&t(XXe),m&&t(qd),w(l9),m&&t(zXe),m&&t(Ho),w(i9),w(c9),w(w4),w(m9),w(x4),m&&t(QXe),m&&t(Gd),w(g9),m&&t(WXe),m&&t(Uo),w(h9),w(p9),w(k4),w(_9),w(q4),m&&t(HXe),m&&t(Xd),w(b9),m&&t(UXe),m&&t(Jo),w(v9),w(T9),w(D4),w(M9),w(z4),m&&t(JXe),m&&t(Hd),w(E9),m&&t(YXe),m&&t(Yo),w(C9),w(A9),w(W4),w(L9),w(Y4),m&&t(KXe),m&&t(Yd),w(x9),m&&t(ZXe),m&&t(Ko),w($9),w(S9),w(Z4),w(R9),w(rE),m&&t(eze),m&&t(ec),w(P9),m&&t(oze),m&&t(Zo),w(B9),w(N9),w(aE),w(q9),w(mE),m&&t(rze),m&&t(tc),w(j9),m&&t(tze),m&&t(er),w(D9),w(O9),w(gE),w(V9),w(pE),m&&t(aze),m&&t(sc),w(X9),m&&t(nze),m&&t(or),w(z9),w(W9),w(bE),w(H9),w(hC),m&&t(sze),m&&t(dc),w(U9),m&&t(lze),m&&t(rr),w(J9),w(K9),w(pC),w(Z9),w(DC),m&&t(ize),m&&t(fc),w(ex),m&&t(dze),m&&t(tr),w(ox),w(tx),w(OC),w(ax),w(r3),m&&t(cze),m&&t(uc),w(nx),m&&t(mze),m&&t(ar),w(sx),w(ix),w(a3),w(dx),w(m3),m&&t(fze),m&&t(bc),w(cx),m&&t(gze),m&&t(nr),w(mx),w(gx),w(g3),w(hx),w(P3),m&&t(hze),m&&t(Tc),w(ux),m&&t(uze),m&&t(sr),w(px),w(bx),w(I3),w(vx),w(W3),m&&t(pze),m&&t(Cc),w(Fx),m&&t(_ze),m&&t(lr),w(Tx),w(Ex),w(U3),w(Cx),w(M5),m&&t(bze),m&&t(Lc),w(wx),m&&t(vze),m&&t(ir),w(Ax),w(yx),w(C5),w(xx),w(O5),m&&t(Fze),m&&t($c),w($x),m&&t(Tze),m&&t(dr),w(kx),w(Rx),w(X5),w(Px),w(W5),m&&t(Mze),m&&t(Rc),w(Ix),m&&t(Eze),m&&t(cr),w(Nx),w(jx),w(U5),w(Dx),w(Y5),m&&t(Cze),m&&t(Ic),w(Gx),m&&t(wze),m&&t(mr),w(Ox),w(Xx),w(Z5),w(zx),w(F0),m&&t(Aze),m&&t(jc),w(Qx),m&&t(Lze),m&&t(fr),w(Wx),w(Ux),w(M0),w(Jx),w(V0),m&&t(yze),m&&t(Oc),w(Yx),m&&t(xze),m&&t(gr),w(Kx),w(e$),w(z0),w(o$),w(W0),m&&t($ze),m&&t(zc),w(r$),m&&t(kze),m&&t(hr),w(t$),w(n$),w(U0),w(s$),w(Y0),m&&t(Sze),m&&t(Hc),w(l$),m&&t(Rze),m&&t(ur),w(i$),w(c$),w(Z0),w(m$),w(Lw),m&&t(Pze),m&&t(Yc),w(f$),m&&t(Bze),m&&t(pr),w(g$),w(u$),w(xw),w(p$),w(Dw),m&&t(Ize),m&&t(em),w(_$),m&&t(Nze),m&&t(_r),w(b$),w(F$),w(Ow),w(T$),w(rA),m&&t(qze),m&&t(tm),w(M$),m&&t(jze),m&&t(br),w(E$),w(w$),w(aA),w(A$),w(uA),m&&t(Dze),m&&t(sm),w(L$),m&&t(Gze),m&&t(vr),w(y$),w($$),w(_A),w(k$),w(yA),m&&t(Oze),m&&t(dm),w(S$),m&&t(Vze),m&&t(Fr),w(R$),w(B$),w($A),w(I$),w(GA),m&&t(Xze),m&&t(fm),w(N$),m&&t(zze),m&&t(Tr),w(q$),w(D$),w(VA),w(G$),w(e6),m&&t(Qze),m&&t(um),w(O$),m&&t(Wze),m&&t(Mr),w(V$),w(z$),w(r6),w(Q$),w(m6),m&&t(Hze),m&&t(bm),w(W$),m&&t(Uze),m&&t(Er),w(H$),w(J$),w(g6),w(Y$),w(M6),m&&t(Jze),m&&t(Tm),w(K$),m&&t(Yze),m&&t(Cr),w(Z$),w(ok),w(C6),w(rk),w(A6),m&&t(Kze),m&&t(Cm),w(tk),m&&t(Zze),m&&t(wr),w(ak),w(sk),w(y6),w(lk),w(k6),m&&t(eQe),m&&t(Lm),w(dk),m&&t(oQe),m&&t(Ar),w(ck),w(fk),w(R6),w(gk),w(B6)}}}const BHt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function IHt($){return PQt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class VHt extends $Qt{constructor(g){super();kQt(this,g,IHt,PHt,SQt,{})}}export{VHt as default,BHt as metadata};
