import{S as CWt,i as wWt,s as AWt,e as a,k as l,w as F,t as o,M as LWt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as yWt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as Gtt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as N}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function xWt($){let g,v,u,f,p,d,h,Co,yi,Pm,lt,xi,$i,ay,Bm,Oe,We,ki,Pn,ny,Bn,Nn,sy,Si,In,ly,Ri,Nm,Sa;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Co=o(`, make sure its
`),yi=a("code"),Pm=o("model_type"),lt=o(" attribute is set to the same key you use when registering the config (here "),xi=a("code"),$i=o('"new-model"'),ay=o(")."),Bm=l(),Oe=a("p"),We=o("Likewise, if your "),ki=a("code"),Pn=o("NewModel"),ny=o(" is a subclass of "),Bn=a("a"),Nn=o("PreTrainedModel"),sy=o(`, make sure its
`),Si=a("code"),In=o("config_class"),ly=o(` attribute is set to the same class you use when registering the model (here
`),Ri=a("code"),Nm=o("NewModelConfig"),Sa=o(")."),this.h()},l(He){g=n(He,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var DS=s(u);f=r(DS,"NewModelConfig"),DS.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Pi=s(d);h=r(Pi,"PretrainedConfig"),Pi.forEach(t),Co=r(Ae,`, make sure its
`),yi=n(Ae,"CODE",{});var GS=s(yi);Pm=r(GS,"model_type"),GS.forEach(t),lt=r(Ae," attribute is set to the same key you use when registering the config (here "),xi=n(Ae,"CODE",{});var OS=s(xi);$i=r(OS,'"new-model"'),OS.forEach(t),ay=r(Ae,")."),Ae.forEach(t),Bm=i(He),Oe=n(He,"P",{});var wo=s(Oe);We=r(wo,"Likewise, if your "),ki=n(wo,"CODE",{});var Ra=s(ki);Pn=r(Ra,"NewModel"),Ra.forEach(t),ny=r(wo," is a subclass of "),Bn=n(wo,"A",{href:!0});var VS=s(Bn);Nn=r(VS,"PreTrainedModel"),VS.forEach(t),sy=r(wo,`, make sure its
`),Si=n(wo,"CODE",{});var Im=s(Si);In=r(Im,"config_class"),Im.forEach(t),ly=r(wo,` attribute is set to the same class you use when registering the model (here
`),Ri=n(wo,"CODE",{});var XS=s(Ri);Nm=r(XS,"NewModelConfig"),XS.forEach(t),Sa=r(wo,")."),wo.forEach(t),this.h()},h(){c(Bn,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(He,Ae){b(He,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,Co),e(g,yi),e(yi,Pm),e(g,lt),e(g,xi),e(xi,$i),e(g,ay),b(He,Bm,Ae),b(He,Oe,Ae),e(Oe,We),e(Oe,ki),e(ki,Pn),e(Oe,ny),e(Oe,Bn),e(Bn,Nn),e(Oe,sy),e(Oe,Si),e(Si,In),e(Oe,ly),e(Oe,Ri),e(Ri,Nm),e(Oe,Sa)},d(He){He&&t(g),He&&t(Bm),He&&t(Oe)}}}function $Wt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function SWt($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Co=s(u);f=r(Co,"use_auth_token=True"),Co.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function RWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function PWt($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Co=s(u);f=r(Co,"use_auth_token=True"),Co.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function BWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function NWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function IWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function DWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function GWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function OWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function VWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function XWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function QWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function WWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function HWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function UWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function JWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function YWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function KWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ZWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _Ht($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function FHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function THt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function MHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function EHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function CHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function AHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function LHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $Ht($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function SHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function RHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function PHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function BHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function NHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function IHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function DHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function GHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function OHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function VHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function XHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function QHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function WHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function HHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function UHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function JHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function YHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function KHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ZHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _Ut($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function FUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function TUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function MUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function EUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function CUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function AUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function LUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yUt($){let g,v,u,f,p,d,h,Co,yi,Pm,lt,xi,$i,ay,Bm,Oe,We,ki,Pn,ny,Bn,Nn,sy,Si,In,ly,Ri,Nm,Sa,He,Ae,DS,Pi,GS,OS,wo,Ra,VS,Im,XS,xHe,hXe,Bi,qm,Pae,iy,$He,Bae,kHe,uXe,qn,SHe,Nae,RHe,PHe,Iae,BHe,NHe,pXe,dy,_Xe,zS,IHe,bXe,jm,vXe,Ni,Dm,qae,cy,qHe,jae,jHe,FXe,Ao,my,DHe,fy,GHe,QS,OHe,VHe,XHe,gy,zHe,Dae,QHe,WHe,HHe,Lr,hy,UHe,Gae,JHe,YHe,Ii,KHe,Oae,ZHe,eUe,Vae,oUe,rUe,tUe,A,Gm,Xae,aUe,nUe,WS,sUe,lUe,iUe,Om,zae,dUe,cUe,HS,mUe,fUe,gUe,Vm,Qae,hUe,uUe,US,pUe,_Ue,bUe,Xm,Wae,vUe,FUe,JS,TUe,MUe,EUe,zm,Hae,CUe,wUe,YS,AUe,LUe,yUe,Qm,Uae,xUe,$Ue,KS,kUe,SUe,RUe,Wm,Jae,PUe,BUe,ZS,NUe,IUe,qUe,Hm,Yae,jUe,DUe,eR,GUe,OUe,VUe,Um,Kae,XUe,zUe,oR,QUe,WUe,HUe,Jm,Zae,UUe,JUe,rR,YUe,KUe,ZUe,Ym,ene,eJe,oJe,tR,rJe,tJe,aJe,Km,one,nJe,sJe,aR,lJe,iJe,dJe,Zm,rne,cJe,mJe,nR,fJe,gJe,hJe,ef,tne,uJe,pJe,sR,_Je,bJe,vJe,of,ane,FJe,TJe,lR,MJe,EJe,CJe,rf,nne,wJe,AJe,iR,LJe,yJe,xJe,tf,sne,$Je,kJe,dR,SJe,RJe,PJe,af,lne,BJe,NJe,cR,IJe,qJe,jJe,nf,ine,DJe,GJe,mR,OJe,VJe,XJe,sf,dne,zJe,QJe,fR,WJe,HJe,UJe,lf,cne,JJe,YJe,gR,KJe,ZJe,eYe,df,mne,oYe,rYe,hR,tYe,aYe,nYe,cf,fne,sYe,lYe,uR,iYe,dYe,cYe,mf,gne,mYe,fYe,pR,gYe,hYe,uYe,ff,hne,pYe,_Ye,_R,bYe,vYe,FYe,gf,une,TYe,MYe,bR,EYe,CYe,wYe,hf,pne,AYe,LYe,vR,yYe,xYe,$Ye,uf,_ne,kYe,SYe,FR,RYe,PYe,BYe,pf,bne,NYe,IYe,TR,qYe,jYe,DYe,_f,vne,GYe,OYe,MR,VYe,XYe,zYe,bf,Fne,QYe,WYe,ER,HYe,UYe,JYe,vf,Tne,YYe,KYe,CR,ZYe,eKe,oKe,Ff,Mne,rKe,tKe,wR,aKe,nKe,sKe,Tf,Ene,lKe,iKe,AR,dKe,cKe,mKe,Mf,Cne,fKe,gKe,LR,hKe,uKe,pKe,Ef,wne,_Ke,bKe,yR,vKe,FKe,TKe,Cf,Ane,MKe,EKe,xR,CKe,wKe,AKe,wf,Lne,LKe,yKe,$R,xKe,$Ke,kKe,Af,yne,SKe,RKe,kR,PKe,BKe,NKe,Lf,xne,IKe,qKe,SR,jKe,DKe,GKe,yf,$ne,OKe,VKe,RR,XKe,zKe,QKe,xf,kne,WKe,HKe,PR,UKe,JKe,YKe,$f,Sne,KKe,ZKe,BR,eZe,oZe,rZe,kf,Rne,tZe,aZe,NR,nZe,sZe,lZe,Sf,Pne,iZe,dZe,IR,cZe,mZe,fZe,Rf,Bne,gZe,hZe,qR,uZe,pZe,_Ze,Pf,Nne,bZe,vZe,jR,FZe,TZe,MZe,Bf,Ine,EZe,CZe,DR,wZe,AZe,LZe,Nf,qne,yZe,xZe,GR,$Ze,kZe,SZe,If,jne,RZe,PZe,OR,BZe,NZe,IZe,qf,Dne,qZe,jZe,VR,DZe,GZe,OZe,jf,Gne,VZe,XZe,XR,zZe,QZe,WZe,Df,One,HZe,UZe,zR,JZe,YZe,KZe,Gf,Vne,ZZe,eeo,QR,oeo,reo,teo,Of,Xne,aeo,neo,WR,seo,leo,ieo,Vf,zne,deo,ceo,HR,meo,feo,geo,Xf,Qne,heo,ueo,UR,peo,_eo,beo,zf,Wne,veo,Feo,JR,Teo,Meo,Eeo,Qf,Hne,Ceo,weo,YR,Aeo,Leo,yeo,Wf,Une,xeo,$eo,KR,keo,Seo,Reo,Hf,Jne,Peo,Beo,ZR,Neo,Ieo,qeo,Uf,Yne,jeo,Deo,eP,Geo,Oeo,Veo,Jf,Kne,Xeo,zeo,oP,Qeo,Weo,Heo,Yf,Zne,Ueo,Jeo,rP,Yeo,Keo,Zeo,Kf,ese,eoo,ooo,tP,roo,too,aoo,Zf,ose,noo,soo,aP,loo,ioo,doo,eg,rse,coo,moo,nP,foo,goo,hoo,og,tse,uoo,poo,sP,_oo,boo,voo,rg,ase,Foo,Too,lP,Moo,Eoo,Coo,tg,nse,woo,Aoo,iP,Loo,yoo,xoo,ag,sse,$oo,koo,dP,Soo,Roo,Poo,ng,lse,Boo,Noo,cP,Ioo,qoo,joo,sg,ise,Doo,Goo,mP,Ooo,Voo,Xoo,lg,dse,zoo,Qoo,fP,Woo,Hoo,Uoo,ig,cse,Joo,Yoo,gP,Koo,Zoo,ero,dg,mse,oro,rro,hP,tro,aro,nro,cg,fse,sro,lro,uP,iro,dro,cro,mg,gse,mro,fro,pP,gro,hro,uro,fg,hse,pro,_ro,_P,bro,vro,Fro,gg,use,Tro,Mro,bP,Ero,Cro,wro,hg,pse,Aro,Lro,vP,yro,xro,$ro,ug,_se,kro,Sro,FP,Rro,Pro,Bro,pg,bse,Nro,Iro,TP,qro,jro,Dro,_g,vse,Gro,Oro,MP,Vro,Xro,zro,bg,Fse,Qro,Wro,EP,Hro,Uro,Jro,vg,Tse,Yro,Kro,CP,Zro,eto,oto,Fg,Mse,rto,tto,wP,ato,nto,sto,Tg,Ese,lto,ito,AP,dto,cto,mto,Mg,Cse,fto,gto,LP,hto,uto,pto,Eg,wse,_to,bto,yP,vto,Fto,Tto,Cg,Ase,Mto,Eto,xP,Cto,wto,Ato,wg,Lse,Lto,yto,$P,xto,$to,kto,Ag,yse,Sto,Rto,kP,Pto,Bto,Nto,Lg,xse,Ito,qto,SP,jto,Dto,Gto,yg,$se,Oto,Vto,RP,Xto,zto,Qto,xg,kse,Wto,Hto,PP,Uto,Jto,Yto,$g,Sse,Kto,Zto,BP,eao,oao,rao,kg,Rse,tao,aao,NP,nao,sao,lao,Sg,Pse,iao,dao,IP,cao,mao,fao,Rg,Bse,gao,hao,qP,uao,pao,_ao,Pg,Nse,bao,vao,jP,Fao,Tao,Mao,Bg,Ise,Eao,Cao,DP,wao,Aao,Lao,Ng,qse,yao,xao,GP,$ao,kao,Sao,Ig,jse,Rao,Pao,OP,Bao,Nao,Iao,qg,Dse,qao,jao,VP,Dao,Gao,Oao,jg,Gse,Vao,Xao,XP,zao,Qao,Wao,Dg,Ose,Hao,Uao,zP,Jao,Yao,Kao,Gg,Vse,Zao,eno,QP,ono,rno,tno,Og,Xse,ano,nno,WP,sno,lno,ino,Vg,zse,dno,cno,HP,mno,fno,gno,Xg,Qse,hno,uno,UP,pno,_no,bno,zg,Wse,vno,Fno,JP,Tno,Mno,Eno,Qg,Hse,Cno,wno,YP,Ano,Lno,yno,Wg,Use,xno,$no,KP,kno,Sno,Rno,Hg,Jse,Pno,Bno,ZP,Nno,Ino,qno,Ug,Yse,jno,Dno,eB,Gno,Ono,Vno,Jg,Kse,Xno,zno,oB,Qno,Wno,Hno,Yg,Zse,Uno,Jno,rB,Yno,Kno,Zno,Kg,eso,Zg,uy,oso,ele,rso,TXe,qi,eh,ole,py,tso,rle,aso,MXe,Lo,_y,nso,by,sso,tB,lso,iso,dso,vy,cso,tle,mso,fso,gso,yr,Fy,hso,ale,uso,pso,Pa,_so,nle,bso,vso,sle,Fso,Tso,lle,Mso,Eso,Cso,k,jn,ile,wso,Aso,aB,Lso,yso,nB,xso,$so,kso,Dn,dle,Sso,Rso,sB,Pso,Bso,lB,Nso,Iso,qso,Gn,cle,jso,Dso,iB,Gso,Oso,dB,Vso,Xso,zso,oh,mle,Qso,Wso,cB,Hso,Uso,Jso,On,fle,Yso,Kso,mB,Zso,elo,fB,olo,rlo,tlo,rh,gle,alo,nlo,gB,slo,llo,ilo,th,hle,dlo,clo,hB,mlo,flo,glo,ah,ule,hlo,ulo,uB,plo,_lo,blo,Vn,ple,vlo,Flo,pB,Tlo,Mlo,_B,Elo,Clo,wlo,Xn,_le,Alo,Llo,bB,ylo,xlo,vB,$lo,klo,Slo,zn,ble,Rlo,Plo,FB,Blo,Nlo,TB,Ilo,qlo,jlo,nh,vle,Dlo,Glo,MB,Olo,Vlo,Xlo,sh,Fle,zlo,Qlo,EB,Wlo,Hlo,Ulo,lh,Tle,Jlo,Ylo,CB,Klo,Zlo,eio,Qn,Mle,oio,rio,wB,tio,aio,AB,nio,sio,lio,ih,Ele,iio,dio,LB,cio,mio,fio,Wn,Cle,gio,hio,yB,uio,pio,xB,_io,bio,vio,Hn,wle,Fio,Tio,$B,Mio,Eio,kB,Cio,wio,Aio,Un,Ale,Lio,yio,SB,xio,$io,RB,kio,Sio,Rio,Jn,Lle,Pio,Bio,PB,Nio,Iio,BB,qio,jio,Dio,dh,yle,Gio,Oio,NB,Vio,Xio,zio,Yn,xle,Qio,Wio,IB,Hio,Uio,qB,Jio,Yio,Kio,Kn,$le,Zio,edo,jB,odo,rdo,DB,tdo,ado,ndo,Zn,kle,sdo,ldo,GB,ido,ddo,OB,cdo,mdo,fdo,es,Sle,gdo,hdo,VB,udo,pdo,XB,_do,bdo,vdo,os,Rle,Fdo,Tdo,zB,Mdo,Edo,QB,Cdo,wdo,Ado,rs,Ple,Ldo,ydo,WB,xdo,$do,HB,kdo,Sdo,Rdo,ch,Ble,Pdo,Bdo,UB,Ndo,Ido,qdo,ts,Nle,jdo,Ddo,JB,Gdo,Odo,YB,Vdo,Xdo,zdo,mh,Ile,Qdo,Wdo,KB,Hdo,Udo,Jdo,as,qle,Ydo,Kdo,ZB,Zdo,eco,eN,oco,rco,tco,ns,jle,aco,nco,oN,sco,lco,rN,ico,dco,cco,ss,Dle,mco,fco,tN,gco,hco,aN,uco,pco,_co,fh,Gle,bco,vco,nN,Fco,Tco,Mco,ls,Ole,Eco,Cco,sN,wco,Aco,lN,Lco,yco,xco,is,Vle,$co,kco,iN,Sco,Rco,dN,Pco,Bco,Nco,ds,Xle,Ico,qco,cN,jco,Dco,mN,Gco,Oco,Vco,gh,zle,Xco,zco,fN,Qco,Wco,Hco,cs,Qle,Uco,Jco,gN,Yco,Kco,hN,Zco,emo,omo,ms,Wle,rmo,tmo,uN,amo,nmo,pN,smo,lmo,imo,fs,Hle,dmo,cmo,_N,mmo,fmo,bN,gmo,hmo,umo,gs,Ule,pmo,_mo,vN,bmo,vmo,FN,Fmo,Tmo,Mmo,hs,Jle,Emo,Cmo,TN,wmo,Amo,MN,Lmo,ymo,xmo,us,Yle,$mo,kmo,EN,Smo,Rmo,CN,Pmo,Bmo,Nmo,ps,Kle,Imo,qmo,wN,jmo,Dmo,AN,Gmo,Omo,Vmo,_s,Zle,Xmo,zmo,LN,Qmo,Wmo,yN,Hmo,Umo,Jmo,hh,eie,Ymo,Kmo,xN,Zmo,efo,ofo,bs,oie,rfo,tfo,$N,afo,nfo,kN,sfo,lfo,ifo,uh,rie,dfo,cfo,SN,mfo,ffo,gfo,ph,tie,hfo,ufo,RN,pfo,_fo,bfo,vs,aie,vfo,Ffo,PN,Tfo,Mfo,BN,Efo,Cfo,wfo,Fs,nie,Afo,Lfo,NN,yfo,xfo,IN,$fo,kfo,Sfo,Ts,sie,Rfo,Pfo,qN,Bfo,Nfo,jN,Ifo,qfo,jfo,_h,lie,Dfo,Gfo,DN,Ofo,Vfo,Xfo,Ms,iie,zfo,Qfo,GN,Wfo,Hfo,ON,Ufo,Jfo,Yfo,Es,die,Kfo,Zfo,VN,ego,ogo,XN,rgo,tgo,ago,Cs,cie,ngo,sgo,zN,lgo,igo,QN,dgo,cgo,mgo,ws,mie,fgo,ggo,WN,hgo,ugo,HN,pgo,_go,bgo,As,fie,vgo,Fgo,UN,Tgo,Mgo,JN,Ego,Cgo,wgo,Ls,gie,Ago,Lgo,YN,ygo,xgo,KN,$go,kgo,Sgo,ys,hie,Rgo,Pgo,ZN,Bgo,Ngo,eI,Igo,qgo,jgo,xs,uie,Dgo,Ggo,oI,Ogo,Vgo,rI,Xgo,zgo,Qgo,bh,pie,Wgo,Hgo,tI,Ugo,Jgo,Ygo,$s,_ie,Kgo,Zgo,aI,eho,oho,nI,rho,tho,aho,vh,bie,nho,sho,sI,lho,iho,dho,Fh,vie,cho,mho,lI,fho,gho,hho,Th,Fie,uho,pho,iI,_ho,bho,vho,Mh,Tie,Fho,Tho,dI,Mho,Eho,Cho,ks,Mie,who,Aho,cI,Lho,yho,mI,xho,$ho,kho,Eh,Eie,Sho,Rho,fI,Pho,Bho,Nho,Ss,Cie,Iho,qho,gI,jho,Dho,hI,Gho,Oho,Vho,Rs,wie,Xho,zho,uI,Qho,Who,pI,Hho,Uho,Jho,Ps,Aie,Yho,Kho,_I,Zho,euo,bI,ouo,ruo,tuo,Bs,Lie,auo,nuo,vI,suo,luo,FI,iuo,duo,cuo,Ns,yie,muo,fuo,TI,guo,huo,MI,uuo,puo,_uo,Is,xie,buo,vuo,EI,Fuo,Tuo,CI,Muo,Euo,Cuo,Ch,$ie,wuo,Auo,wI,Luo,yuo,xuo,wh,kie,$uo,kuo,AI,Suo,Ruo,Puo,qs,Sie,Buo,Nuo,LI,Iuo,quo,yI,juo,Duo,Guo,js,Rie,Ouo,Vuo,xI,Xuo,zuo,$I,Quo,Wuo,Huo,Ds,Pie,Uuo,Juo,kI,Yuo,Kuo,SI,Zuo,epo,opo,Ah,Bie,rpo,tpo,RI,apo,npo,spo,Lh,Nie,lpo,ipo,PI,dpo,cpo,mpo,yh,Iie,fpo,gpo,BI,hpo,upo,ppo,Gs,qie,_po,bpo,NI,vpo,Fpo,II,Tpo,Mpo,Epo,Os,jie,Cpo,wpo,qI,Apo,Lpo,jI,ypo,xpo,$po,xh,Die,kpo,Spo,DI,Rpo,Ppo,Bpo,$h,Gie,Npo,Ipo,GI,qpo,jpo,Dpo,kh,Oie,Gpo,Opo,OI,Vpo,Xpo,zpo,Vs,Vie,Qpo,Wpo,VI,Hpo,Upo,XI,Jpo,Ypo,Kpo,Sh,Xie,Zpo,e_o,zI,o_o,r_o,t_o,Rh,zie,a_o,n_o,QI,s_o,l_o,i_o,Xs,Qie,d_o,c_o,WI,m_o,f_o,HI,g_o,h_o,u_o,zs,Wie,p_o,__o,UI,b_o,v_o,JI,F_o,T_o,M_o,Qs,Hie,E_o,C_o,YI,w_o,A_o,KI,L_o,y_o,x_o,Ws,Uie,$_o,k_o,ZI,S_o,R_o,eq,P_o,B_o,N_o,Ph,I_o,Bh,Ty,q_o,Jie,j_o,EXe,ji,Nh,Yie,My,D_o,Kie,G_o,CXe,yo,Ey,O_o,Cy,V_o,oq,X_o,z_o,Q_o,wy,W_o,Zie,H_o,U_o,J_o,Ue,Ay,Y_o,ede,K_o,Z_o,Ba,e2o,ode,o2o,r2o,rde,t2o,a2o,tde,n2o,s2o,l2o,Y,Ih,ade,i2o,d2o,rq,c2o,m2o,f2o,qh,nde,g2o,h2o,tq,u2o,p2o,_2o,jh,sde,b2o,v2o,aq,F2o,T2o,M2o,Dh,lde,E2o,C2o,nq,w2o,A2o,L2o,Gh,ide,y2o,x2o,sq,$2o,k2o,S2o,Oh,dde,R2o,P2o,lq,B2o,N2o,I2o,Vh,cde,q2o,j2o,iq,D2o,G2o,O2o,Xh,mde,V2o,X2o,dq,z2o,Q2o,W2o,zh,fde,H2o,U2o,cq,J2o,Y2o,K2o,Qh,gde,Z2o,ebo,mq,obo,rbo,tbo,Wh,hde,abo,nbo,fq,sbo,lbo,ibo,Hh,ude,dbo,cbo,gq,mbo,fbo,gbo,Uh,pde,hbo,ubo,hq,pbo,_bo,bbo,Jh,_de,vbo,Fbo,uq,Tbo,Mbo,Ebo,Yh,bde,Cbo,wbo,pq,Abo,Lbo,ybo,Kh,vde,xbo,$bo,_q,kbo,Sbo,Rbo,Zh,Fde,Pbo,Bbo,bq,Nbo,Ibo,qbo,eu,Tde,jbo,Dbo,vq,Gbo,Obo,Vbo,ou,Mde,Xbo,zbo,Fq,Qbo,Wbo,Hbo,ru,Ede,Ubo,Jbo,Tq,Ybo,Kbo,Zbo,tu,Cde,evo,ovo,Mq,rvo,tvo,avo,au,wde,nvo,svo,Eq,lvo,ivo,dvo,nu,Ade,cvo,mvo,Cq,fvo,gvo,hvo,su,Lde,uvo,pvo,wq,_vo,bvo,vvo,lu,yde,Fvo,Tvo,Aq,Mvo,Evo,Cvo,iu,xde,wvo,Avo,Lq,Lvo,yvo,xvo,du,$de,$vo,kvo,yq,Svo,Rvo,Pvo,cu,kde,Bvo,Nvo,xq,Ivo,qvo,jvo,mu,Sde,Dvo,Gvo,$q,Ovo,Vvo,Xvo,fu,Rde,zvo,Qvo,kq,Wvo,Hvo,Uvo,gu,Pde,Jvo,Yvo,Sq,Kvo,Zvo,e1o,hu,Bde,o1o,r1o,Rq,t1o,a1o,n1o,uu,Nde,s1o,l1o,Pq,i1o,d1o,c1o,pu,Ide,m1o,f1o,Bq,g1o,h1o,u1o,_u,p1o,bu,_1o,vu,Ly,b1o,qde,v1o,wXe,Di,Fu,jde,yy,F1o,Dde,T1o,AXe,xo,xy,M1o,$y,E1o,Nq,C1o,w1o,A1o,ky,L1o,Gde,y1o,x1o,$1o,Je,Sy,k1o,Ode,S1o,R1o,Gi,P1o,Vde,B1o,N1o,Xde,I1o,q1o,j1o,ue,Tu,zde,D1o,G1o,Iq,O1o,V1o,X1o,Mu,Qde,z1o,Q1o,Wde,W1o,H1o,U1o,Eu,Hde,J1o,Y1o,qq,K1o,Z1o,eFo,Cu,Ude,oFo,rFo,jq,tFo,aFo,nFo,wu,Jde,sFo,lFo,Dq,iFo,dFo,cFo,Au,Yde,mFo,fFo,Gq,gFo,hFo,uFo,Lu,Kde,pFo,_Fo,Oq,bFo,vFo,FFo,yu,Zde,TFo,MFo,Vq,EFo,CFo,wFo,xu,ece,AFo,LFo,Xq,yFo,xFo,$Fo,$u,oce,kFo,SFo,zq,RFo,PFo,BFo,ku,rce,NFo,IFo,Qq,qFo,jFo,DFo,Su,tce,GFo,OFo,Wq,VFo,XFo,zFo,Ru,ace,QFo,WFo,Hq,HFo,UFo,JFo,Pu,nce,YFo,KFo,Uq,ZFo,eTo,oTo,Bu,sce,rTo,tTo,Jq,aTo,nTo,sTo,Nu,lce,lTo,iTo,Yq,dTo,cTo,mTo,Iu,ice,fTo,gTo,Kq,hTo,uTo,pTo,qu,dce,_To,bTo,Zq,vTo,FTo,TTo,ju,MTo,Du,ETo,Gu,Ry,CTo,cce,wTo,LXe,Oi,Ou,mce,Py,ATo,fce,LTo,yXe,$o,By,yTo,Vi,xTo,ej,$To,kTo,oj,STo,RTo,PTo,Ny,BTo,gce,NTo,ITo,qTo,it,Iy,jTo,hce,DTo,GTo,Xi,OTo,uce,VTo,XTo,rj,zTo,QTo,WTo,Vu,HTo,Ye,qy,UTo,pce,JTo,YTo,Na,KTo,_ce,ZTo,eMo,bce,oMo,rMo,vce,tMo,aMo,nMo,y,Xu,Fce,sMo,lMo,tj,iMo,dMo,cMo,zu,Tce,mMo,fMo,aj,gMo,hMo,uMo,Qu,Mce,pMo,_Mo,nj,bMo,vMo,FMo,Wu,Ece,TMo,MMo,sj,EMo,CMo,wMo,Hu,Cce,AMo,LMo,lj,yMo,xMo,$Mo,Uu,wce,kMo,SMo,ij,RMo,PMo,BMo,Ju,Ace,NMo,IMo,dj,qMo,jMo,DMo,Yu,Lce,GMo,OMo,cj,VMo,XMo,zMo,Ku,yce,QMo,WMo,mj,HMo,UMo,JMo,Zu,xce,YMo,KMo,fj,ZMo,e4o,o4o,ep,$ce,r4o,t4o,gj,a4o,n4o,s4o,op,kce,l4o,i4o,hj,d4o,c4o,m4o,rp,Sce,f4o,g4o,uj,h4o,u4o,p4o,tp,Rce,_4o,b4o,pj,v4o,F4o,T4o,ap,Pce,M4o,E4o,_j,C4o,w4o,A4o,np,Bce,L4o,y4o,bj,x4o,$4o,k4o,sp,Nce,S4o,R4o,vj,P4o,B4o,N4o,lp,Ice,I4o,q4o,Fj,j4o,D4o,G4o,ip,qce,O4o,V4o,Tj,X4o,z4o,Q4o,dp,jce,W4o,H4o,Mj,U4o,J4o,Y4o,cp,Dce,K4o,Z4o,Ej,eEo,oEo,rEo,mp,Gce,tEo,aEo,Cj,nEo,sEo,lEo,fp,Oce,iEo,dEo,wj,cEo,mEo,fEo,gp,Vce,gEo,hEo,Aj,uEo,pEo,_Eo,hp,Xce,bEo,vEo,Lj,FEo,TEo,MEo,up,zce,EEo,CEo,yj,wEo,AEo,LEo,pp,Qce,yEo,xEo,xj,$Eo,kEo,SEo,_p,Wce,REo,PEo,$j,BEo,NEo,IEo,bp,Hce,qEo,jEo,kj,DEo,GEo,OEo,vp,Uce,VEo,XEo,Sj,zEo,QEo,WEo,Fp,Jce,HEo,UEo,Rj,JEo,YEo,KEo,Tp,Yce,ZEo,eCo,Pj,oCo,rCo,tCo,Mp,Kce,aCo,nCo,Bj,sCo,lCo,iCo,Ep,Zce,dCo,cCo,Nj,mCo,fCo,gCo,Hs,eme,hCo,uCo,Ij,pCo,_Co,qj,bCo,vCo,FCo,Cp,ome,TCo,MCo,jj,ECo,CCo,wCo,wp,rme,ACo,LCo,Dj,yCo,xCo,$Co,Ap,tme,kCo,SCo,Gj,RCo,PCo,BCo,Lp,ame,NCo,ICo,Oj,qCo,jCo,DCo,yp,nme,GCo,OCo,Vj,VCo,XCo,zCo,xp,sme,QCo,WCo,Xj,HCo,UCo,JCo,$p,lme,YCo,KCo,zj,ZCo,e3o,o3o,kp,ime,r3o,t3o,Qj,a3o,n3o,s3o,Sp,dme,l3o,i3o,Wj,d3o,c3o,m3o,Rp,cme,f3o,g3o,Hj,h3o,u3o,p3o,Pp,mme,_3o,b3o,Uj,v3o,F3o,T3o,Bp,fme,M3o,E3o,Jj,C3o,w3o,A3o,Np,gme,L3o,y3o,Yj,x3o,$3o,k3o,Ip,hme,S3o,R3o,Kj,P3o,B3o,N3o,qp,ume,I3o,q3o,Zj,j3o,D3o,G3o,jp,pme,O3o,V3o,eD,X3o,z3o,Q3o,Dp,_me,W3o,H3o,oD,U3o,J3o,Y3o,Gp,bme,K3o,Z3o,rD,e5o,o5o,r5o,Op,vme,t5o,a5o,tD,n5o,s5o,l5o,Vp,Fme,i5o,d5o,aD,c5o,m5o,f5o,Xp,Tme,g5o,h5o,nD,u5o,p5o,_5o,zp,Mme,b5o,v5o,sD,F5o,T5o,M5o,Qp,Eme,E5o,C5o,lD,w5o,A5o,L5o,Wp,Cme,y5o,x5o,iD,$5o,k5o,S5o,Hp,wme,R5o,P5o,dD,B5o,N5o,I5o,Up,Ame,q5o,j5o,cD,D5o,G5o,O5o,Jp,Lme,V5o,X5o,mD,z5o,Q5o,W5o,Yp,yme,H5o,U5o,fD,J5o,Y5o,K5o,Kp,xme,Z5o,e0o,gD,o0o,r0o,t0o,Zp,$me,a0o,n0o,hD,s0o,l0o,i0o,e_,kme,d0o,c0o,uD,m0o,f0o,g0o,o_,Sme,h0o,u0o,pD,p0o,_0o,b0o,r_,Rme,v0o,F0o,_D,T0o,M0o,E0o,t_,Pme,C0o,w0o,bD,A0o,L0o,y0o,a_,Bme,x0o,$0o,vD,k0o,S0o,R0o,n_,Nme,P0o,B0o,FD,N0o,I0o,q0o,s_,Ime,j0o,D0o,TD,G0o,O0o,V0o,l_,qme,X0o,z0o,MD,Q0o,W0o,H0o,i_,jme,U0o,J0o,ED,Y0o,K0o,Z0o,d_,Dme,ewo,owo,CD,rwo,two,awo,c_,Gme,nwo,swo,wD,lwo,iwo,dwo,m_,Ome,cwo,mwo,AD,fwo,gwo,hwo,f_,Vme,uwo,pwo,LD,_wo,bwo,vwo,g_,Xme,Fwo,Two,yD,Mwo,Ewo,Cwo,h_,zme,wwo,Awo,xD,Lwo,ywo,xwo,u_,Qme,$wo,kwo,$D,Swo,Rwo,Pwo,p_,Wme,Bwo,Nwo,kD,Iwo,qwo,jwo,__,Hme,Dwo,Gwo,SD,Owo,Vwo,Xwo,b_,Ume,zwo,Qwo,RD,Wwo,Hwo,Uwo,v_,Jme,Jwo,Ywo,PD,Kwo,Zwo,eAo,F_,Yme,oAo,rAo,BD,tAo,aAo,nAo,T_,Kme,sAo,lAo,ND,iAo,dAo,cAo,M_,Zme,mAo,fAo,ID,gAo,hAo,uAo,E_,efe,pAo,_Ao,qD,bAo,vAo,FAo,C_,ofe,TAo,MAo,jD,EAo,CAo,wAo,w_,rfe,AAo,LAo,DD,yAo,xAo,$Ao,A_,tfe,kAo,SAo,GD,RAo,PAo,BAo,L_,afe,NAo,IAo,OD,qAo,jAo,DAo,y_,nfe,GAo,OAo,VD,VAo,XAo,zAo,x_,sfe,QAo,WAo,XD,HAo,UAo,JAo,$_,lfe,YAo,KAo,zD,ZAo,e6o,o6o,k_,ife,r6o,t6o,QD,a6o,n6o,s6o,S_,dfe,l6o,i6o,WD,d6o,c6o,m6o,R_,cfe,f6o,g6o,HD,h6o,u6o,p6o,P_,mfe,_6o,b6o,UD,v6o,F6o,T6o,B_,ffe,M6o,E6o,JD,C6o,w6o,A6o,N_,gfe,L6o,y6o,YD,x6o,$6o,k6o,I_,hfe,S6o,R6o,KD,P6o,B6o,N6o,q_,ufe,I6o,q6o,ZD,j6o,D6o,G6o,j_,pfe,O6o,V6o,eG,X6o,z6o,Q6o,D_,_fe,W6o,H6o,oG,U6o,J6o,Y6o,G_,bfe,K6o,Z6o,rG,e7o,o7o,r7o,O_,vfe,t7o,a7o,tG,n7o,s7o,l7o,V_,Ffe,i7o,d7o,aG,c7o,m7o,f7o,X_,Tfe,g7o,h7o,nG,u7o,p7o,_7o,z_,Mfe,b7o,v7o,sG,F7o,T7o,M7o,Q_,Efe,E7o,C7o,lG,w7o,A7o,L7o,W_,y7o,Cfe,x7o,$7o,wfe,k7o,S7o,H_,xXe,zi,U_,Afe,jy,R7o,Lfe,P7o,$Xe,ko,Dy,B7o,Qi,N7o,iG,I7o,q7o,dG,j7o,D7o,G7o,Gy,O7o,yfe,V7o,X7o,z7o,dt,Oy,Q7o,xfe,W7o,H7o,Wi,U7o,$fe,J7o,Y7o,cG,K7o,Z7o,eLo,J_,oLo,Ke,Vy,rLo,kfe,tLo,aLo,Ia,nLo,Sfe,sLo,lLo,Rfe,iLo,dLo,Pfe,cLo,mLo,fLo,G,Y_,Bfe,gLo,hLo,mG,uLo,pLo,_Lo,K_,Nfe,bLo,vLo,fG,FLo,TLo,MLo,Z_,Ife,ELo,CLo,gG,wLo,ALo,LLo,e2,qfe,yLo,xLo,hG,$Lo,kLo,SLo,o2,jfe,RLo,PLo,uG,BLo,NLo,ILo,r2,Dfe,qLo,jLo,pG,DLo,GLo,OLo,t2,Gfe,VLo,XLo,_G,zLo,QLo,WLo,a2,Ofe,HLo,ULo,bG,JLo,YLo,KLo,n2,Vfe,ZLo,eyo,vG,oyo,ryo,tyo,s2,Xfe,ayo,nyo,FG,syo,lyo,iyo,l2,zfe,dyo,cyo,TG,myo,fyo,gyo,i2,Qfe,hyo,uyo,MG,pyo,_yo,byo,d2,Wfe,vyo,Fyo,EG,Tyo,Myo,Eyo,c2,Hfe,Cyo,wyo,CG,Ayo,Lyo,yyo,m2,Ufe,xyo,$yo,wG,kyo,Syo,Ryo,f2,Jfe,Pyo,Byo,AG,Nyo,Iyo,qyo,g2,Yfe,jyo,Dyo,LG,Gyo,Oyo,Vyo,h2,Kfe,Xyo,zyo,yG,Qyo,Wyo,Hyo,u2,Zfe,Uyo,Jyo,xG,Yyo,Kyo,Zyo,p2,ege,e8o,o8o,$G,r8o,t8o,a8o,_2,oge,n8o,s8o,kG,l8o,i8o,d8o,b2,rge,c8o,m8o,SG,f8o,g8o,h8o,v2,tge,u8o,p8o,RG,_8o,b8o,v8o,F2,age,F8o,T8o,PG,M8o,E8o,C8o,T2,nge,w8o,A8o,BG,L8o,y8o,x8o,M2,sge,$8o,k8o,NG,S8o,R8o,P8o,E2,lge,B8o,N8o,IG,I8o,q8o,j8o,C2,ige,D8o,G8o,qG,O8o,V8o,X8o,w2,dge,z8o,Q8o,jG,W8o,H8o,U8o,A2,cge,J8o,Y8o,DG,K8o,Z8o,e9o,L2,mge,o9o,r9o,GG,t9o,a9o,n9o,y2,fge,s9o,l9o,OG,i9o,d9o,c9o,x2,gge,m9o,f9o,VG,g9o,h9o,u9o,$2,hge,p9o,_9o,XG,b9o,v9o,F9o,k2,uge,T9o,M9o,zG,E9o,C9o,w9o,S2,pge,A9o,L9o,QG,y9o,x9o,$9o,R2,_ge,k9o,S9o,WG,R9o,P9o,B9o,P2,bge,N9o,I9o,HG,q9o,j9o,D9o,B2,vge,G9o,O9o,UG,V9o,X9o,z9o,N2,Fge,Q9o,W9o,JG,H9o,U9o,J9o,I2,Tge,Y9o,K9o,YG,Z9o,exo,oxo,q2,Mge,rxo,txo,KG,axo,nxo,sxo,j2,Ege,lxo,ixo,ZG,dxo,cxo,mxo,D2,Cge,fxo,gxo,eO,hxo,uxo,pxo,G2,wge,_xo,bxo,oO,vxo,Fxo,Txo,O2,Mxo,Age,Exo,Cxo,Lge,wxo,Axo,V2,kXe,Hi,X2,yge,Xy,Lxo,xge,yxo,SXe,So,zy,xxo,Ui,$xo,rO,kxo,Sxo,tO,Rxo,Pxo,Bxo,Qy,Nxo,$ge,Ixo,qxo,jxo,ct,Wy,Dxo,kge,Gxo,Oxo,Ji,Vxo,Sge,Xxo,zxo,aO,Qxo,Wxo,Hxo,z2,Uxo,Ze,Hy,Jxo,Rge,Yxo,Kxo,qa,Zxo,Pge,e$o,o$o,Bge,r$o,t$o,Nge,a$o,n$o,s$o,z,Q2,Ige,l$o,i$o,nO,d$o,c$o,m$o,W2,qge,f$o,g$o,sO,h$o,u$o,p$o,H2,jge,_$o,b$o,lO,v$o,F$o,T$o,U2,Dge,M$o,E$o,iO,C$o,w$o,A$o,J2,Gge,L$o,y$o,dO,x$o,$$o,k$o,Y2,Oge,S$o,R$o,cO,P$o,B$o,N$o,K2,Vge,I$o,q$o,mO,j$o,D$o,G$o,Z2,Xge,O$o,V$o,fO,X$o,z$o,Q$o,eb,zge,W$o,H$o,gO,U$o,J$o,Y$o,ob,Qge,K$o,Z$o,hO,eko,oko,rko,rb,Wge,tko,ako,uO,nko,sko,lko,tb,Hge,iko,dko,pO,cko,mko,fko,ab,Uge,gko,hko,_O,uko,pko,_ko,nb,Jge,bko,vko,bO,Fko,Tko,Mko,sb,Yge,Eko,Cko,vO,wko,Ako,Lko,lb,Kge,yko,xko,FO,$ko,kko,Sko,ib,Zge,Rko,Pko,TO,Bko,Nko,Iko,db,ehe,qko,jko,MO,Dko,Gko,Oko,cb,ohe,Vko,Xko,EO,zko,Qko,Wko,mb,rhe,Hko,Uko,CO,Jko,Yko,Kko,fb,the,Zko,eSo,wO,oSo,rSo,tSo,gb,ahe,aSo,nSo,AO,sSo,lSo,iSo,hb,nhe,dSo,cSo,LO,mSo,fSo,gSo,ub,she,hSo,uSo,yO,pSo,_So,bSo,pb,lhe,vSo,FSo,xO,TSo,MSo,ESo,_b,ihe,CSo,wSo,$O,ASo,LSo,ySo,bb,dhe,xSo,$So,kO,kSo,SSo,RSo,vb,che,PSo,BSo,SO,NSo,ISo,qSo,Fb,mhe,jSo,DSo,RO,GSo,OSo,VSo,Tb,fhe,XSo,zSo,PO,QSo,WSo,HSo,Mb,ghe,USo,JSo,BO,YSo,KSo,ZSo,Eb,hhe,eRo,oRo,NO,rRo,tRo,aRo,Cb,uhe,nRo,sRo,IO,lRo,iRo,dRo,wb,phe,cRo,mRo,qO,fRo,gRo,hRo,Ab,_he,uRo,pRo,jO,_Ro,bRo,vRo,Lb,bhe,FRo,TRo,DO,MRo,ERo,CRo,yb,vhe,wRo,ARo,GO,LRo,yRo,xRo,xb,Fhe,$Ro,kRo,OO,SRo,RRo,PRo,$b,The,BRo,NRo,VO,IRo,qRo,jRo,kb,Mhe,DRo,GRo,XO,ORo,VRo,XRo,Sb,zRo,Ehe,QRo,WRo,Che,HRo,URo,Rb,RXe,Yi,Pb,whe,Uy,JRo,Ahe,YRo,PXe,Ro,Jy,KRo,Ki,ZRo,zO,ePo,oPo,QO,rPo,tPo,aPo,Yy,nPo,Lhe,sPo,lPo,iPo,mt,Ky,dPo,yhe,cPo,mPo,Zi,fPo,xhe,gPo,hPo,WO,uPo,pPo,_Po,Bb,bPo,eo,Zy,vPo,$he,FPo,TPo,ja,MPo,khe,EPo,CPo,She,wPo,APo,Rhe,LPo,yPo,xPo,W,Nb,Phe,$Po,kPo,HO,SPo,RPo,PPo,Ib,Bhe,BPo,NPo,UO,IPo,qPo,jPo,qb,Nhe,DPo,GPo,JO,OPo,VPo,XPo,jb,Ihe,zPo,QPo,YO,WPo,HPo,UPo,Db,qhe,JPo,YPo,KO,KPo,ZPo,eBo,Gb,jhe,oBo,rBo,ZO,tBo,aBo,nBo,Ob,Dhe,sBo,lBo,eV,iBo,dBo,cBo,Vb,Ghe,mBo,fBo,oV,gBo,hBo,uBo,Xb,Ohe,pBo,_Bo,rV,bBo,vBo,FBo,zb,Vhe,TBo,MBo,tV,EBo,CBo,wBo,Qb,Xhe,ABo,LBo,aV,yBo,xBo,$Bo,Wb,zhe,kBo,SBo,nV,RBo,PBo,BBo,Hb,Qhe,NBo,IBo,sV,qBo,jBo,DBo,Ub,Whe,GBo,OBo,lV,VBo,XBo,zBo,Jb,Hhe,QBo,WBo,iV,HBo,UBo,JBo,Yb,Uhe,YBo,KBo,dV,ZBo,eNo,oNo,Kb,Jhe,rNo,tNo,cV,aNo,nNo,sNo,Zb,Yhe,lNo,iNo,mV,dNo,cNo,mNo,ev,Khe,fNo,gNo,fV,hNo,uNo,pNo,ov,Zhe,_No,bNo,gV,vNo,FNo,TNo,rv,eue,MNo,ENo,hV,CNo,wNo,ANo,tv,oue,LNo,yNo,uV,xNo,$No,kNo,av,rue,SNo,RNo,pV,PNo,BNo,NNo,nv,tue,INo,qNo,_V,jNo,DNo,GNo,sv,aue,ONo,VNo,bV,XNo,zNo,QNo,lv,nue,WNo,HNo,vV,UNo,JNo,YNo,iv,sue,KNo,ZNo,FV,eIo,oIo,rIo,dv,lue,tIo,aIo,TV,nIo,sIo,lIo,cv,iue,iIo,dIo,MV,cIo,mIo,fIo,mv,due,gIo,hIo,EV,uIo,pIo,_Io,fv,cue,bIo,vIo,CV,FIo,TIo,MIo,gv,mue,EIo,CIo,wV,wIo,AIo,LIo,hv,fue,yIo,xIo,AV,$Io,kIo,SIo,uv,gue,RIo,PIo,hue,BIo,NIo,IIo,pv,uue,qIo,jIo,LV,DIo,GIo,OIo,_v,pue,VIo,XIo,yV,zIo,QIo,WIo,bv,_ue,HIo,UIo,xV,JIo,YIo,KIo,vv,bue,ZIo,eqo,$V,oqo,rqo,tqo,Fv,aqo,vue,nqo,sqo,Fue,lqo,iqo,Tv,BXe,ed,Mv,Tue,e8,dqo,Mue,cqo,NXe,Po,o8,mqo,od,fqo,kV,gqo,hqo,SV,uqo,pqo,_qo,r8,bqo,Eue,vqo,Fqo,Tqo,ft,t8,Mqo,Cue,Eqo,Cqo,rd,wqo,wue,Aqo,Lqo,RV,yqo,xqo,$qo,Ev,kqo,oo,a8,Sqo,Aue,Rqo,Pqo,Da,Bqo,Lue,Nqo,Iqo,yue,qqo,jqo,xue,Dqo,Gqo,Oqo,me,Cv,$ue,Vqo,Xqo,PV,zqo,Qqo,Wqo,wv,kue,Hqo,Uqo,BV,Jqo,Yqo,Kqo,Av,Sue,Zqo,ejo,NV,ojo,rjo,tjo,Lv,Rue,ajo,njo,IV,sjo,ljo,ijo,yv,Pue,djo,cjo,qV,mjo,fjo,gjo,xv,Bue,hjo,ujo,jV,pjo,_jo,bjo,$v,Nue,vjo,Fjo,DV,Tjo,Mjo,Ejo,kv,Iue,Cjo,wjo,GV,Ajo,Ljo,yjo,Sv,que,xjo,$jo,OV,kjo,Sjo,Rjo,Rv,jue,Pjo,Bjo,VV,Njo,Ijo,qjo,Pv,Due,jjo,Djo,XV,Gjo,Ojo,Vjo,Bv,Gue,Xjo,zjo,zV,Qjo,Wjo,Hjo,Nv,Oue,Ujo,Jjo,QV,Yjo,Kjo,Zjo,Iv,Vue,eDo,oDo,WV,rDo,tDo,aDo,qv,Xue,nDo,sDo,HV,lDo,iDo,dDo,jv,zue,cDo,mDo,UV,fDo,gDo,hDo,Dv,Que,uDo,pDo,JV,_Do,bDo,vDo,Gv,Wue,FDo,TDo,YV,MDo,EDo,CDo,Ov,Hue,wDo,ADo,KV,LDo,yDo,xDo,Vv,$Do,Uue,kDo,SDo,Jue,RDo,PDo,Xv,IXe,td,zv,Yue,n8,BDo,Kue,NDo,qXe,Bo,s8,IDo,ad,qDo,ZV,jDo,DDo,eX,GDo,ODo,VDo,l8,XDo,Zue,zDo,QDo,WDo,gt,i8,HDo,epe,UDo,JDo,nd,YDo,ope,KDo,ZDo,oX,eGo,oGo,rGo,Qv,tGo,ro,d8,aGo,rpe,nGo,sGo,Ga,lGo,tpe,iGo,dGo,ape,cGo,mGo,npe,fGo,gGo,hGo,B,Wv,spe,uGo,pGo,rX,_Go,bGo,vGo,Hv,lpe,FGo,TGo,tX,MGo,EGo,CGo,Uv,ipe,wGo,AGo,aX,LGo,yGo,xGo,Jv,dpe,$Go,kGo,nX,SGo,RGo,PGo,Yv,cpe,BGo,NGo,sX,IGo,qGo,jGo,Kv,mpe,DGo,GGo,lX,OGo,VGo,XGo,Zv,fpe,zGo,QGo,iX,WGo,HGo,UGo,e1,gpe,JGo,YGo,dX,KGo,ZGo,eOo,o1,hpe,oOo,rOo,cX,tOo,aOo,nOo,r1,upe,sOo,lOo,mX,iOo,dOo,cOo,t1,ppe,mOo,fOo,fX,gOo,hOo,uOo,a1,_pe,pOo,_Oo,gX,bOo,vOo,FOo,n1,bpe,TOo,MOo,hX,EOo,COo,wOo,s1,vpe,AOo,LOo,uX,yOo,xOo,$Oo,l1,Fpe,kOo,SOo,pX,ROo,POo,BOo,i1,Tpe,NOo,IOo,_X,qOo,jOo,DOo,d1,Mpe,GOo,OOo,bX,VOo,XOo,zOo,c1,Epe,QOo,WOo,vX,HOo,UOo,JOo,m1,Cpe,YOo,KOo,FX,ZOo,eVo,oVo,f1,wpe,rVo,tVo,TX,aVo,nVo,sVo,g1,Ape,lVo,iVo,MX,dVo,cVo,mVo,h1,Lpe,fVo,gVo,EX,hVo,uVo,pVo,u1,ype,_Vo,bVo,CX,vVo,FVo,TVo,p1,xpe,MVo,EVo,wX,CVo,wVo,AVo,_1,$pe,LVo,yVo,AX,xVo,$Vo,kVo,b1,kpe,SVo,RVo,LX,PVo,BVo,NVo,v1,Spe,IVo,qVo,yX,jVo,DVo,GVo,F1,Rpe,OVo,VVo,xX,XVo,zVo,QVo,T1,Ppe,WVo,HVo,$X,UVo,JVo,YVo,M1,Bpe,KVo,ZVo,kX,eXo,oXo,rXo,E1,Npe,tXo,aXo,SX,nXo,sXo,lXo,C1,Ipe,iXo,dXo,RX,cXo,mXo,fXo,w1,qpe,gXo,hXo,PX,uXo,pXo,_Xo,A1,jpe,bXo,vXo,BX,FXo,TXo,MXo,L1,Dpe,EXo,CXo,NX,wXo,AXo,LXo,y1,Gpe,yXo,xXo,IX,$Xo,kXo,SXo,x1,Ope,RXo,PXo,qX,BXo,NXo,IXo,$1,Vpe,qXo,jXo,jX,DXo,GXo,OXo,k1,Xpe,VXo,XXo,DX,zXo,QXo,WXo,S1,zpe,HXo,UXo,GX,JXo,YXo,KXo,R1,Qpe,ZXo,ezo,OX,ozo,rzo,tzo,P1,Wpe,azo,nzo,VX,szo,lzo,izo,B1,Hpe,dzo,czo,XX,mzo,fzo,gzo,N1,Upe,hzo,uzo,zX,pzo,_zo,bzo,I1,Jpe,vzo,Fzo,QX,Tzo,Mzo,Ezo,q1,Ype,Czo,wzo,WX,Azo,Lzo,yzo,j1,Kpe,xzo,$zo,HX,kzo,Szo,Rzo,D1,Zpe,Pzo,Bzo,UX,Nzo,Izo,qzo,G1,e_e,jzo,Dzo,JX,Gzo,Ozo,Vzo,O1,o_e,Xzo,zzo,YX,Qzo,Wzo,Hzo,V1,r_e,Uzo,Jzo,KX,Yzo,Kzo,Zzo,X1,eQo,t_e,oQo,rQo,a_e,tQo,aQo,z1,jXe,sd,Q1,n_e,c8,nQo,s_e,sQo,DXe,No,m8,lQo,ld,iQo,ZX,dQo,cQo,ez,mQo,fQo,gQo,f8,hQo,l_e,uQo,pQo,_Qo,ht,g8,bQo,i_e,vQo,FQo,id,TQo,d_e,MQo,EQo,oz,CQo,wQo,AQo,W1,LQo,to,h8,yQo,c_e,xQo,$Qo,Oa,kQo,m_e,SQo,RQo,f_e,PQo,BQo,g_e,NQo,IQo,qQo,Z,H1,h_e,jQo,DQo,rz,GQo,OQo,VQo,U1,u_e,XQo,zQo,tz,QQo,WQo,HQo,J1,p_e,UQo,JQo,az,YQo,KQo,ZQo,Y1,__e,eWo,oWo,nz,rWo,tWo,aWo,K1,b_e,nWo,sWo,sz,lWo,iWo,dWo,Z1,v_e,cWo,mWo,lz,fWo,gWo,hWo,eF,F_e,uWo,pWo,iz,_Wo,bWo,vWo,oF,T_e,FWo,TWo,dz,MWo,EWo,CWo,rF,M_e,wWo,AWo,cz,LWo,yWo,xWo,tF,E_e,$Wo,kWo,mz,SWo,RWo,PWo,aF,C_e,BWo,NWo,fz,IWo,qWo,jWo,nF,w_e,DWo,GWo,gz,OWo,VWo,XWo,sF,A_e,zWo,QWo,hz,WWo,HWo,UWo,lF,L_e,JWo,YWo,uz,KWo,ZWo,eHo,iF,y_e,oHo,rHo,pz,tHo,aHo,nHo,dF,x_e,sHo,lHo,_z,iHo,dHo,cHo,cF,$_e,mHo,fHo,bz,gHo,hHo,uHo,mF,k_e,pHo,_Ho,vz,bHo,vHo,FHo,fF,S_e,THo,MHo,Fz,EHo,CHo,wHo,gF,R_e,AHo,LHo,Tz,yHo,xHo,$Ho,hF,P_e,kHo,SHo,Mz,RHo,PHo,BHo,uF,B_e,NHo,IHo,Ez,qHo,jHo,DHo,pF,N_e,GHo,OHo,Cz,VHo,XHo,zHo,_F,I_e,QHo,WHo,wz,HHo,UHo,JHo,bF,q_e,YHo,KHo,Az,ZHo,eUo,oUo,vF,j_e,rUo,tUo,Lz,aUo,nUo,sUo,FF,D_e,lUo,iUo,yz,dUo,cUo,mUo,TF,G_e,fUo,gUo,xz,hUo,uUo,pUo,MF,O_e,_Uo,bUo,$z,vUo,FUo,TUo,EF,V_e,MUo,EUo,kz,CUo,wUo,AUo,CF,LUo,X_e,yUo,xUo,z_e,$Uo,kUo,wF,GXe,dd,AF,Q_e,u8,SUo,W_e,RUo,OXe,Io,p8,PUo,cd,BUo,Sz,NUo,IUo,Rz,qUo,jUo,DUo,_8,GUo,H_e,OUo,VUo,XUo,ut,b8,zUo,U_e,QUo,WUo,md,HUo,J_e,UUo,JUo,Pz,YUo,KUo,ZUo,LF,eJo,ao,v8,oJo,Y_e,rJo,tJo,Va,aJo,K_e,nJo,sJo,Z_e,lJo,iJo,e2e,dJo,cJo,mJo,qo,yF,o2e,fJo,gJo,Bz,hJo,uJo,pJo,xF,r2e,_Jo,bJo,Nz,vJo,FJo,TJo,$F,t2e,MJo,EJo,Iz,CJo,wJo,AJo,kF,a2e,LJo,yJo,qz,xJo,$Jo,kJo,SF,n2e,SJo,RJo,jz,PJo,BJo,NJo,RF,s2e,IJo,qJo,Dz,jJo,DJo,GJo,PF,OJo,l2e,VJo,XJo,i2e,zJo,QJo,BF,VXe,fd,NF,d2e,F8,WJo,c2e,HJo,XXe,jo,T8,UJo,gd,JJo,Gz,YJo,KJo,Oz,ZJo,eYo,oYo,M8,rYo,m2e,tYo,aYo,nYo,pt,E8,sYo,f2e,lYo,iYo,hd,dYo,g2e,cYo,mYo,Vz,fYo,gYo,hYo,IF,uYo,no,C8,pYo,h2e,_Yo,bYo,Xa,vYo,u2e,FYo,TYo,p2e,MYo,EYo,_2e,CYo,wYo,AYo,U,qF,b2e,LYo,yYo,Xz,xYo,$Yo,kYo,jF,v2e,SYo,RYo,zz,PYo,BYo,NYo,DF,F2e,IYo,qYo,Qz,jYo,DYo,GYo,GF,T2e,OYo,VYo,Wz,XYo,zYo,QYo,OF,M2e,WYo,HYo,Hz,UYo,JYo,YYo,VF,E2e,KYo,ZYo,Uz,eKo,oKo,rKo,XF,C2e,tKo,aKo,Jz,nKo,sKo,lKo,zF,w2e,iKo,dKo,Yz,cKo,mKo,fKo,QF,A2e,gKo,hKo,Kz,uKo,pKo,_Ko,WF,L2e,bKo,vKo,Zz,FKo,TKo,MKo,HF,y2e,EKo,CKo,eQ,wKo,AKo,LKo,UF,x2e,yKo,xKo,oQ,$Ko,kKo,SKo,JF,$2e,RKo,PKo,rQ,BKo,NKo,IKo,YF,k2e,qKo,jKo,tQ,DKo,GKo,OKo,KF,S2e,VKo,XKo,aQ,zKo,QKo,WKo,ZF,R2e,HKo,UKo,nQ,JKo,YKo,KKo,eT,P2e,ZKo,eZo,sQ,oZo,rZo,tZo,oT,B2e,aZo,nZo,lQ,sZo,lZo,iZo,rT,N2e,dZo,cZo,iQ,mZo,fZo,gZo,tT,I2e,hZo,uZo,dQ,pZo,_Zo,bZo,aT,q2e,vZo,FZo,cQ,TZo,MZo,EZo,nT,j2e,CZo,wZo,mQ,AZo,LZo,yZo,sT,D2e,xZo,$Zo,fQ,kZo,SZo,RZo,lT,G2e,PZo,BZo,gQ,NZo,IZo,qZo,iT,O2e,jZo,DZo,hQ,GZo,OZo,VZo,dT,V2e,XZo,zZo,uQ,QZo,WZo,HZo,cT,X2e,UZo,JZo,pQ,YZo,KZo,ZZo,mT,z2e,eer,oer,_Q,rer,ter,aer,fT,Q2e,ner,ser,bQ,ler,ier,der,gT,W2e,cer,mer,vQ,fer,ger,her,hT,H2e,uer,per,FQ,_er,ber,ver,uT,U2e,Fer,Ter,TQ,Mer,Eer,Cer,pT,J2e,wer,Aer,MQ,Ler,yer,xer,_T,Y2e,$er,ker,EQ,Ser,Rer,Per,bT,K2e,Ber,Ner,CQ,Ier,qer,jer,vT,Z2e,Der,Ger,wQ,Oer,Ver,Xer,FT,zer,ebe,Qer,Wer,obe,Her,Uer,TT,zXe,ud,MT,rbe,w8,Jer,tbe,Yer,QXe,Do,A8,Ker,pd,Zer,AQ,eor,oor,LQ,ror,tor,aor,L8,nor,abe,sor,lor,ior,_t,y8,dor,nbe,cor,mor,_d,gor,sbe,hor,uor,yQ,por,_or,bor,ET,vor,so,x8,For,lbe,Tor,Mor,za,Eor,ibe,Cor,wor,dbe,Aor,Lor,cbe,yor,xor,$or,V,CT,mbe,kor,Sor,xQ,Ror,Por,Bor,wT,fbe,Nor,Ior,$Q,qor,jor,Dor,AT,gbe,Gor,Oor,kQ,Vor,Xor,zor,LT,hbe,Qor,Wor,SQ,Hor,Uor,Jor,yT,ube,Yor,Kor,RQ,Zor,err,orr,xT,pbe,rrr,trr,PQ,arr,nrr,srr,$T,_be,lrr,irr,BQ,drr,crr,mrr,kT,bbe,frr,grr,NQ,hrr,urr,prr,ST,vbe,_rr,brr,IQ,vrr,Frr,Trr,RT,Fbe,Mrr,Err,qQ,Crr,wrr,Arr,PT,Tbe,Lrr,yrr,jQ,xrr,$rr,krr,BT,Mbe,Srr,Rrr,DQ,Prr,Brr,Nrr,NT,Ebe,Irr,qrr,GQ,jrr,Drr,Grr,IT,Cbe,Orr,Vrr,OQ,Xrr,zrr,Qrr,qT,wbe,Wrr,Hrr,VQ,Urr,Jrr,Yrr,jT,Abe,Krr,Zrr,XQ,etr,otr,rtr,DT,Lbe,ttr,atr,zQ,ntr,str,ltr,GT,ybe,itr,dtr,QQ,ctr,mtr,ftr,OT,xbe,gtr,htr,WQ,utr,ptr,_tr,VT,$be,btr,vtr,HQ,Ftr,Ttr,Mtr,XT,kbe,Etr,Ctr,UQ,wtr,Atr,Ltr,zT,Sbe,ytr,xtr,JQ,$tr,ktr,Str,QT,Rbe,Rtr,Ptr,YQ,Btr,Ntr,Itr,WT,Pbe,qtr,jtr,KQ,Dtr,Gtr,Otr,HT,Bbe,Vtr,Xtr,ZQ,ztr,Qtr,Wtr,UT,Nbe,Htr,Utr,eW,Jtr,Ytr,Ktr,JT,Ibe,Ztr,ear,oW,oar,rar,tar,YT,qbe,aar,nar,rW,sar,lar,iar,KT,jbe,dar,car,tW,mar,far,gar,ZT,Dbe,har,uar,aW,par,_ar,bar,eM,Gbe,Far,Tar,nW,Mar,Ear,Car,oM,Obe,war,Aar,sW,Lar,yar,xar,rM,Vbe,$ar,kar,lW,Sar,Rar,Par,tM,Xbe,Bar,Nar,iW,Iar,qar,jar,aM,zbe,Dar,Gar,dW,Oar,Var,Xar,nM,Qbe,zar,Qar,cW,War,Har,Uar,sM,Wbe,Jar,Yar,mW,Kar,Zar,enr,lM,Hbe,onr,rnr,fW,tnr,anr,nnr,iM,Ube,snr,lnr,gW,inr,dnr,cnr,dM,Jbe,mnr,fnr,hW,gnr,hnr,unr,cM,Ybe,pnr,_nr,uW,bnr,vnr,Fnr,mM,Kbe,Tnr,Mnr,pW,Enr,Cnr,wnr,fM,Anr,Zbe,Lnr,ynr,eve,xnr,$nr,gM,WXe,bd,hM,ove,$8,knr,rve,Snr,HXe,Go,k8,Rnr,vd,Pnr,_W,Bnr,Nnr,bW,Inr,qnr,jnr,S8,Dnr,tve,Gnr,Onr,Vnr,bt,R8,Xnr,ave,znr,Qnr,Fd,Wnr,nve,Hnr,Unr,vW,Jnr,Ynr,Knr,uM,Znr,lo,P8,esr,sve,osr,rsr,Qa,tsr,lve,asr,nsr,ive,ssr,lsr,dve,isr,dsr,csr,cve,pM,mve,msr,fsr,FW,gsr,hsr,usr,_M,psr,fve,_sr,bsr,gve,vsr,Fsr,bM,UXe,Td,vM,hve,B8,Tsr,uve,Msr,JXe,Oo,N8,Esr,Md,Csr,TW,wsr,Asr,MW,Lsr,ysr,xsr,I8,$sr,pve,ksr,Ssr,Rsr,vt,q8,Psr,_ve,Bsr,Nsr,Ed,Isr,bve,qsr,jsr,EW,Dsr,Gsr,Osr,FM,Vsr,io,j8,Xsr,vve,zsr,Qsr,Wa,Wsr,Fve,Hsr,Usr,Tve,Jsr,Ysr,Mve,Ksr,Zsr,elr,ve,TM,Eve,olr,rlr,CW,tlr,alr,nlr,MM,Cve,slr,llr,wW,ilr,dlr,clr,EM,wve,mlr,flr,AW,glr,hlr,ulr,CM,Ave,plr,_lr,LW,blr,vlr,Flr,Us,Lve,Tlr,Mlr,yW,Elr,Clr,xW,wlr,Alr,Llr,wM,yve,ylr,xlr,$W,$lr,klr,Slr,Js,xve,Rlr,Plr,kW,Blr,Nlr,SW,Ilr,qlr,jlr,AM,$ve,Dlr,Glr,RW,Olr,Vlr,Xlr,Ft,kve,zlr,Qlr,PW,Wlr,Hlr,BW,Ulr,Jlr,NW,Ylr,Klr,Zlr,LM,Sve,eir,oir,IW,rir,tir,air,yM,Rve,nir,sir,qW,lir,iir,dir,xM,Pve,cir,mir,jW,fir,gir,hir,$M,Bve,uir,pir,DW,_ir,bir,vir,kM,Nve,Fir,Tir,GW,Mir,Eir,Cir,SM,Ive,wir,Air,OW,Lir,yir,xir,RM,qve,$ir,kir,VW,Sir,Rir,Pir,PM,Bir,jve,Nir,Iir,Dve,qir,jir,BM,YXe,Cd,NM,Gve,D8,Dir,Ove,Gir,KXe,Vo,G8,Oir,wd,Vir,XW,Xir,zir,zW,Qir,Wir,Hir,O8,Uir,Vve,Jir,Yir,Kir,Tt,V8,Zir,Xve,edr,odr,Ad,rdr,zve,tdr,adr,QW,ndr,sdr,ldr,IM,idr,co,X8,ddr,Qve,cdr,mdr,Ha,fdr,Wve,gdr,hdr,Hve,udr,pdr,Uve,_dr,bdr,vdr,Jve,qM,Yve,Fdr,Tdr,WW,Mdr,Edr,Cdr,jM,wdr,Kve,Adr,Ldr,Zve,ydr,xdr,DM,ZXe,Ld,GM,e1e,z8,$dr,o1e,kdr,eze,Xo,Q8,Sdr,yd,Rdr,HW,Pdr,Bdr,UW,Ndr,Idr,qdr,W8,jdr,r1e,Ddr,Gdr,Odr,Mt,H8,Vdr,t1e,Xdr,zdr,xd,Qdr,a1e,Wdr,Hdr,JW,Udr,Jdr,Ydr,OM,Kdr,mo,U8,Zdr,n1e,ecr,ocr,Ua,rcr,s1e,tcr,acr,l1e,ncr,scr,i1e,lcr,icr,dcr,d1e,VM,c1e,ccr,mcr,YW,fcr,gcr,hcr,XM,ucr,m1e,pcr,_cr,f1e,bcr,vcr,zM,oze,$d,QM,g1e,J8,Fcr,h1e,Tcr,rze,zo,Y8,Mcr,kd,Ecr,KW,Ccr,wcr,ZW,Acr,Lcr,ycr,K8,xcr,u1e,$cr,kcr,Scr,Et,Z8,Rcr,p1e,Pcr,Bcr,Sd,Ncr,_1e,Icr,qcr,eH,jcr,Dcr,Gcr,WM,Ocr,fo,e9,Vcr,b1e,Xcr,zcr,Ja,Qcr,v1e,Wcr,Hcr,F1e,Ucr,Jcr,T1e,Ycr,Kcr,Zcr,Pe,HM,M1e,emr,omr,oH,rmr,tmr,amr,UM,E1e,nmr,smr,rH,lmr,imr,dmr,JM,C1e,cmr,mmr,tH,fmr,gmr,hmr,YM,w1e,umr,pmr,aH,_mr,bmr,vmr,KM,A1e,Fmr,Tmr,nH,Mmr,Emr,Cmr,ZM,L1e,wmr,Amr,sH,Lmr,ymr,xmr,e4,y1e,$mr,kmr,lH,Smr,Rmr,Pmr,o4,x1e,Bmr,Nmr,iH,Imr,qmr,jmr,r4,$1e,Dmr,Gmr,dH,Omr,Vmr,Xmr,t4,zmr,k1e,Qmr,Wmr,S1e,Hmr,Umr,a4,tze,Rd,n4,R1e,o9,Jmr,P1e,Ymr,aze,Qo,r9,Kmr,Pd,Zmr,cH,efr,ofr,mH,rfr,tfr,afr,t9,nfr,B1e,sfr,lfr,ifr,Ct,a9,dfr,N1e,cfr,mfr,Bd,ffr,I1e,gfr,hfr,fH,ufr,pfr,_fr,s4,bfr,go,n9,vfr,q1e,Ffr,Tfr,Ya,Mfr,j1e,Efr,Cfr,D1e,wfr,Afr,G1e,Lfr,yfr,xfr,rt,l4,O1e,$fr,kfr,gH,Sfr,Rfr,Pfr,i4,V1e,Bfr,Nfr,hH,Ifr,qfr,jfr,d4,X1e,Dfr,Gfr,uH,Ofr,Vfr,Xfr,c4,z1e,zfr,Qfr,pH,Wfr,Hfr,Ufr,m4,Q1e,Jfr,Yfr,_H,Kfr,Zfr,egr,f4,ogr,W1e,rgr,tgr,H1e,agr,ngr,g4,nze,Nd,h4,U1e,s9,sgr,J1e,lgr,sze,Wo,l9,igr,Id,dgr,bH,cgr,mgr,vH,fgr,ggr,hgr,i9,ugr,Y1e,pgr,_gr,bgr,wt,d9,vgr,K1e,Fgr,Tgr,qd,Mgr,Z1e,Egr,Cgr,FH,wgr,Agr,Lgr,u4,ygr,ho,c9,xgr,eFe,$gr,kgr,Ka,Sgr,oFe,Rgr,Pgr,rFe,Bgr,Ngr,tFe,Igr,qgr,jgr,Le,p4,aFe,Dgr,Ggr,TH,Ogr,Vgr,Xgr,_4,nFe,zgr,Qgr,MH,Wgr,Hgr,Ugr,b4,sFe,Jgr,Ygr,EH,Kgr,Zgr,ehr,v4,lFe,ohr,rhr,CH,thr,ahr,nhr,F4,iFe,shr,lhr,wH,ihr,dhr,chr,T4,dFe,mhr,fhr,AH,ghr,hhr,uhr,M4,cFe,phr,_hr,LH,bhr,vhr,Fhr,E4,mFe,Thr,Mhr,yH,Ehr,Chr,whr,C4,fFe,Ahr,Lhr,xH,yhr,xhr,$hr,w4,gFe,khr,Shr,$H,Rhr,Phr,Bhr,A4,Nhr,hFe,Ihr,qhr,uFe,jhr,Dhr,L4,lze,jd,y4,pFe,m9,Ghr,_Fe,Ohr,ize,Ho,f9,Vhr,Dd,Xhr,kH,zhr,Qhr,SH,Whr,Hhr,Uhr,g9,Jhr,bFe,Yhr,Khr,Zhr,At,h9,eur,vFe,our,rur,Gd,tur,FFe,aur,nur,RH,sur,lur,iur,x4,dur,uo,u9,cur,TFe,mur,fur,Za,gur,MFe,hur,uur,EFe,pur,_ur,CFe,bur,vur,Fur,p9,$4,wFe,Tur,Mur,PH,Eur,Cur,wur,k4,AFe,Aur,Lur,BH,yur,xur,$ur,S4,kur,LFe,Sur,Rur,yFe,Pur,Bur,R4,dze,Od,P4,xFe,_9,Nur,$Fe,Iur,cze,Uo,b9,qur,Vd,jur,NH,Dur,Gur,IH,Our,Vur,Xur,v9,zur,kFe,Qur,Wur,Hur,Lt,F9,Uur,SFe,Jur,Yur,Xd,Kur,RFe,Zur,epr,qH,opr,rpr,tpr,B4,apr,po,T9,npr,PFe,spr,lpr,en,ipr,BFe,dpr,cpr,NFe,mpr,fpr,IFe,gpr,hpr,upr,tt,N4,qFe,ppr,_pr,jH,bpr,vpr,Fpr,I4,jFe,Tpr,Mpr,DH,Epr,Cpr,wpr,q4,DFe,Apr,Lpr,GH,ypr,xpr,$pr,j4,GFe,kpr,Spr,OH,Rpr,Ppr,Bpr,D4,OFe,Npr,Ipr,VH,qpr,jpr,Dpr,G4,Gpr,VFe,Opr,Vpr,XFe,Xpr,zpr,O4,mze,zd,V4,zFe,M9,Qpr,QFe,Wpr,fze,Jo,E9,Hpr,Qd,Upr,XH,Jpr,Ypr,zH,Kpr,Zpr,e_r,C9,o_r,WFe,r_r,t_r,a_r,yt,w9,n_r,HFe,s_r,l_r,Wd,i_r,UFe,d_r,c_r,QH,m_r,f_r,g_r,X4,h_r,_o,A9,u_r,JFe,p_r,__r,on,b_r,YFe,v_r,F_r,KFe,T_r,M_r,ZFe,E_r,C_r,w_r,Hd,z4,eTe,A_r,L_r,WH,y_r,x_r,$_r,Q4,oTe,k_r,S_r,HH,R_r,P_r,B_r,W4,rTe,N_r,I_r,UH,q_r,j_r,D_r,H4,G_r,tTe,O_r,V_r,aTe,X_r,z_r,U4,gze,Ud,J4,nTe,L9,Q_r,sTe,W_r,hze,Yo,y9,H_r,Jd,U_r,JH,J_r,Y_r,YH,K_r,Z_r,e2r,x9,o2r,lTe,r2r,t2r,a2r,xt,$9,n2r,iTe,s2r,l2r,Yd,i2r,dTe,d2r,c2r,KH,m2r,f2r,g2r,Y4,h2r,bo,k9,u2r,cTe,p2r,_2r,rn,b2r,mTe,v2r,F2r,fTe,T2r,M2r,gTe,E2r,C2r,w2r,S9,K4,hTe,A2r,L2r,ZH,y2r,x2r,$2r,Z4,uTe,k2r,S2r,eU,R2r,P2r,B2r,eE,N2r,pTe,I2r,q2r,_Te,j2r,D2r,oE,uze,Kd,rE,bTe,R9,G2r,vTe,O2r,pze,Ko,P9,V2r,Zd,X2r,oU,z2r,Q2r,rU,W2r,H2r,U2r,B9,J2r,FTe,Y2r,K2r,Z2r,$t,N9,ebr,TTe,obr,rbr,ec,tbr,MTe,abr,nbr,tU,sbr,lbr,ibr,tE,dbr,vo,I9,cbr,ETe,mbr,fbr,tn,gbr,CTe,hbr,ubr,wTe,pbr,_br,ATe,bbr,vbr,Fbr,LTe,aE,yTe,Tbr,Mbr,aU,Ebr,Cbr,wbr,nE,Abr,xTe,Lbr,ybr,$Te,xbr,$br,sE,_ze,oc,lE,kTe,q9,kbr,STe,Sbr,bze,Zo,j9,Rbr,rc,Pbr,nU,Bbr,Nbr,sU,Ibr,qbr,jbr,D9,Dbr,RTe,Gbr,Obr,Vbr,kt,G9,Xbr,PTe,zbr,Qbr,tc,Wbr,BTe,Hbr,Ubr,lU,Jbr,Ybr,Kbr,iE,Zbr,Fo,O9,evr,NTe,ovr,rvr,an,tvr,ITe,avr,nvr,qTe,svr,lvr,jTe,ivr,dvr,cvr,at,dE,DTe,mvr,fvr,iU,gvr,hvr,uvr,cE,GTe,pvr,_vr,dU,bvr,vvr,Fvr,mE,OTe,Tvr,Mvr,cU,Evr,Cvr,wvr,fE,VTe,Avr,Lvr,mU,yvr,xvr,$vr,gE,XTe,kvr,Svr,fU,Rvr,Pvr,Bvr,hE,Nvr,zTe,Ivr,qvr,QTe,jvr,Dvr,uE,vze,ac,pE,WTe,V9,Gvr,HTe,Ovr,Fze,er,X9,Vvr,nc,Xvr,gU,zvr,Qvr,hU,Wvr,Hvr,Uvr,z9,Jvr,UTe,Yvr,Kvr,Zvr,St,Q9,e1r,JTe,o1r,r1r,sc,t1r,YTe,a1r,n1r,uU,s1r,l1r,i1r,_E,d1r,To,W9,c1r,KTe,m1r,f1r,nn,g1r,ZTe,h1r,u1r,eMe,p1r,_1r,oMe,b1r,v1r,F1r,rMe,bE,tMe,T1r,M1r,pU,E1r,C1r,w1r,vE,A1r,aMe,L1r,y1r,nMe,x1r,$1r,FE,Tze,lc,TE,sMe,H9,k1r,lMe,S1r,Mze,or,U9,R1r,ic,P1r,_U,B1r,N1r,bU,I1r,q1r,j1r,J9,D1r,iMe,G1r,O1r,V1r,Rt,Y9,X1r,dMe,z1r,Q1r,dc,W1r,cMe,H1r,U1r,vU,J1r,Y1r,K1r,ME,Z1r,xr,K9,eFr,mMe,oFr,rFr,sn,tFr,fMe,aFr,nFr,gMe,sFr,lFr,hMe,iFr,dFr,cFr,q,EE,uMe,mFr,fFr,FU,gFr,hFr,uFr,CE,pMe,pFr,_Fr,TU,bFr,vFr,FFr,wE,_Me,TFr,MFr,MU,EFr,CFr,wFr,AE,bMe,AFr,LFr,EU,yFr,xFr,$Fr,LE,vMe,kFr,SFr,CU,RFr,PFr,BFr,yE,FMe,NFr,IFr,wU,qFr,jFr,DFr,xE,TMe,GFr,OFr,AU,VFr,XFr,zFr,$E,MMe,QFr,WFr,LU,HFr,UFr,JFr,kE,EMe,YFr,KFr,yU,ZFr,eTr,oTr,SE,CMe,rTr,tTr,xU,aTr,nTr,sTr,RE,wMe,lTr,iTr,$U,dTr,cTr,mTr,PE,AMe,fTr,gTr,kU,hTr,uTr,pTr,BE,LMe,_Tr,bTr,SU,vTr,FTr,TTr,NE,yMe,MTr,ETr,RU,CTr,wTr,ATr,IE,xMe,LTr,yTr,PU,xTr,$Tr,kTr,qE,$Me,STr,RTr,BU,PTr,BTr,NTr,jE,kMe,ITr,qTr,NU,jTr,DTr,GTr,DE,SMe,OTr,VTr,IU,XTr,zTr,QTr,Ys,RMe,WTr,HTr,qU,UTr,JTr,jU,YTr,KTr,ZTr,GE,PMe,eMr,oMr,DU,rMr,tMr,aMr,OE,BMe,nMr,sMr,GU,lMr,iMr,dMr,VE,NMe,cMr,mMr,OU,fMr,gMr,hMr,XE,IMe,uMr,pMr,VU,_Mr,bMr,vMr,zE,qMe,FMr,TMr,XU,MMr,EMr,CMr,QE,jMe,wMr,AMr,zU,LMr,yMr,xMr,WE,DMe,$Mr,kMr,QU,SMr,RMr,PMr,HE,GMe,BMr,NMr,WU,IMr,qMr,jMr,UE,OMe,DMr,GMr,HU,OMr,VMr,XMr,JE,VMe,zMr,QMr,UU,WMr,HMr,UMr,YE,XMe,JMr,YMr,JU,KMr,ZMr,e4r,KE,zMe,o4r,r4r,YU,t4r,a4r,n4r,ZE,QMe,s4r,l4r,KU,i4r,d4r,c4r,eC,WMe,m4r,f4r,ZU,g4r,h4r,u4r,oC,HMe,p4r,_4r,eJ,b4r,v4r,F4r,rC,UMe,T4r,M4r,oJ,E4r,C4r,w4r,tC,JMe,A4r,L4r,rJ,y4r,x4r,$4r,aC,YMe,k4r,S4r,tJ,R4r,P4r,B4r,nC,KMe,N4r,I4r,aJ,q4r,j4r,D4r,sC,ZMe,G4r,O4r,nJ,V4r,X4r,z4r,lC,e4e,Q4r,W4r,sJ,H4r,U4r,J4r,iC,o4e,Y4r,K4r,lJ,Z4r,eEr,oEr,dC,r4e,rEr,tEr,iJ,aEr,nEr,sEr,cC,t4e,lEr,iEr,dJ,dEr,cEr,mEr,mC,a4e,fEr,gEr,cJ,hEr,uEr,pEr,fC,n4e,_Er,bEr,mJ,vEr,FEr,TEr,gC,s4e,MEr,EEr,fJ,CEr,wEr,AEr,hC,l4e,LEr,yEr,gJ,xEr,$Er,kEr,uC,i4e,SEr,REr,hJ,PEr,BEr,NEr,pC,d4e,IEr,qEr,uJ,jEr,DEr,GEr,_C,c4e,OEr,VEr,pJ,XEr,zEr,QEr,bC,Eze,cc,vC,m4e,Z9,WEr,f4e,HEr,Cze,rr,ex,UEr,mc,JEr,_J,YEr,KEr,bJ,ZEr,eCr,oCr,ox,rCr,g4e,tCr,aCr,nCr,Pt,rx,sCr,h4e,lCr,iCr,fc,dCr,u4e,cCr,mCr,vJ,fCr,gCr,hCr,FC,uCr,$r,tx,pCr,p4e,_Cr,bCr,ln,vCr,_4e,FCr,TCr,b4e,MCr,ECr,v4e,CCr,wCr,ACr,se,TC,F4e,LCr,yCr,FJ,xCr,$Cr,kCr,MC,T4e,SCr,RCr,TJ,PCr,BCr,NCr,EC,M4e,ICr,qCr,MJ,jCr,DCr,GCr,CC,E4e,OCr,VCr,EJ,XCr,zCr,QCr,wC,C4e,WCr,HCr,CJ,UCr,JCr,YCr,AC,w4e,KCr,ZCr,wJ,e3r,o3r,r3r,LC,A4e,t3r,a3r,AJ,n3r,s3r,l3r,yC,L4e,i3r,d3r,LJ,c3r,m3r,f3r,xC,y4e,g3r,h3r,yJ,u3r,p3r,_3r,$C,x4e,b3r,v3r,xJ,F3r,T3r,M3r,kC,$4e,E3r,C3r,$J,w3r,A3r,L3r,SC,k4e,y3r,x3r,kJ,$3r,k3r,S3r,RC,S4e,R3r,P3r,SJ,B3r,N3r,I3r,PC,R4e,q3r,j3r,RJ,D3r,G3r,O3r,BC,P4e,V3r,X3r,PJ,z3r,Q3r,W3r,NC,B4e,H3r,U3r,BJ,J3r,Y3r,K3r,IC,N4e,Z3r,e5r,NJ,o5r,r5r,t5r,qC,I4e,a5r,n5r,IJ,s5r,l5r,i5r,jC,q4e,d5r,c5r,qJ,m5r,f5r,g5r,DC,j4e,h5r,u5r,jJ,p5r,_5r,b5r,GC,D4e,v5r,F5r,DJ,T5r,M5r,E5r,OC,G4e,C5r,w5r,GJ,A5r,L5r,y5r,VC,O4e,x5r,$5r,OJ,k5r,S5r,R5r,XC,wze,gc,zC,V4e,ax,P5r,X4e,B5r,Aze,tr,nx,N5r,hc,I5r,VJ,q5r,j5r,XJ,D5r,G5r,O5r,sx,V5r,z4e,X5r,z5r,Q5r,Bt,lx,W5r,Q4e,H5r,U5r,uc,J5r,W4e,Y5r,K5r,zJ,Z5r,e0r,o0r,QC,r0r,kr,ix,t0r,H4e,a0r,n0r,dn,s0r,U4e,l0r,i0r,J4e,d0r,c0r,Y4e,m0r,f0r,g0r,Me,WC,K4e,h0r,u0r,QJ,p0r,_0r,b0r,HC,Z4e,v0r,F0r,WJ,T0r,M0r,E0r,UC,eEe,C0r,w0r,HJ,A0r,L0r,y0r,JC,oEe,x0r,$0r,UJ,k0r,S0r,R0r,YC,rEe,P0r,B0r,JJ,N0r,I0r,q0r,KC,tEe,j0r,D0r,YJ,G0r,O0r,V0r,ZC,aEe,X0r,z0r,KJ,Q0r,W0r,H0r,e3,nEe,U0r,J0r,ZJ,Y0r,K0r,Z0r,o3,sEe,ewr,owr,eY,rwr,twr,awr,r3,lEe,nwr,swr,oY,lwr,iwr,dwr,t3,iEe,cwr,mwr,rY,fwr,gwr,hwr,a3,dEe,uwr,pwr,tY,_wr,bwr,vwr,n3,cEe,Fwr,Twr,aY,Mwr,Ewr,Cwr,s3,Lze,pc,l3,mEe,dx,wwr,fEe,Awr,yze,ar,cx,Lwr,_c,ywr,nY,xwr,$wr,sY,kwr,Swr,Rwr,mx,Pwr,gEe,Bwr,Nwr,Iwr,Nt,fx,qwr,hEe,jwr,Dwr,bc,Gwr,uEe,Owr,Vwr,lY,Xwr,zwr,Qwr,i3,Wwr,Sr,gx,Hwr,pEe,Uwr,Jwr,cn,Ywr,_Ee,Kwr,Zwr,bEe,eAr,oAr,vEe,rAr,tAr,aAr,Qe,d3,FEe,nAr,sAr,iY,lAr,iAr,dAr,c3,TEe,cAr,mAr,dY,fAr,gAr,hAr,Ks,MEe,uAr,pAr,cY,_Ar,bAr,mY,vAr,FAr,TAr,m3,EEe,MAr,EAr,fY,CAr,wAr,AAr,f3,CEe,LAr,yAr,gY,xAr,$Ar,kAr,g3,wEe,SAr,RAr,hY,PAr,BAr,NAr,h3,AEe,IAr,qAr,uY,jAr,DAr,GAr,u3,xze,vc,p3,LEe,hx,OAr,yEe,VAr,$ze,nr,ux,XAr,Fc,zAr,pY,QAr,WAr,_Y,HAr,UAr,JAr,px,YAr,xEe,KAr,ZAr,e6r,It,_x,o6r,$Ee,r6r,t6r,Tc,a6r,kEe,n6r,s6r,bY,l6r,i6r,d6r,_3,c6r,Rr,bx,m6r,SEe,f6r,g6r,mn,h6r,REe,u6r,p6r,PEe,_6r,b6r,BEe,v6r,F6r,T6r,ie,b3,NEe,M6r,E6r,vY,C6r,w6r,A6r,v3,IEe,L6r,y6r,FY,x6r,$6r,k6r,F3,qEe,S6r,R6r,TY,P6r,B6r,N6r,T3,jEe,I6r,q6r,MY,j6r,D6r,G6r,M3,DEe,O6r,V6r,EY,X6r,z6r,Q6r,E3,GEe,W6r,H6r,CY,U6r,J6r,Y6r,C3,OEe,K6r,Z6r,wY,e7r,o7r,r7r,w3,VEe,t7r,a7r,AY,n7r,s7r,l7r,A3,XEe,i7r,d7r,LY,c7r,m7r,f7r,L3,zEe,g7r,h7r,yY,u7r,p7r,_7r,y3,QEe,b7r,v7r,xY,F7r,T7r,M7r,x3,WEe,E7r,C7r,$Y,w7r,A7r,L7r,$3,HEe,y7r,x7r,kY,$7r,k7r,S7r,k3,UEe,R7r,P7r,SY,B7r,N7r,I7r,S3,JEe,q7r,j7r,RY,D7r,G7r,O7r,R3,YEe,V7r,X7r,PY,z7r,Q7r,W7r,P3,KEe,H7r,U7r,BY,J7r,Y7r,K7r,B3,ZEe,Z7r,eLr,NY,oLr,rLr,tLr,N3,eCe,aLr,nLr,IY,sLr,lLr,iLr,I3,oCe,dLr,cLr,qY,mLr,fLr,gLr,q3,kze,Mc,j3,rCe,vx,hLr,tCe,uLr,Sze,sr,Fx,pLr,Ec,_Lr,jY,bLr,vLr,DY,FLr,TLr,MLr,Tx,ELr,aCe,CLr,wLr,ALr,qt,Mx,LLr,nCe,yLr,xLr,Cc,$Lr,sCe,kLr,SLr,GY,RLr,PLr,BLr,D3,NLr,Pr,Ex,ILr,lCe,qLr,jLr,fn,DLr,iCe,GLr,OLr,dCe,VLr,XLr,cCe,zLr,QLr,WLr,ye,G3,mCe,HLr,ULr,OY,JLr,YLr,KLr,O3,fCe,ZLr,eyr,VY,oyr,ryr,tyr,V3,gCe,ayr,nyr,XY,syr,lyr,iyr,X3,hCe,dyr,cyr,zY,myr,fyr,gyr,z3,uCe,hyr,uyr,QY,pyr,_yr,byr,Q3,pCe,vyr,Fyr,WY,Tyr,Myr,Eyr,W3,_Ce,Cyr,wyr,HY,Ayr,Lyr,yyr,H3,bCe,xyr,$yr,UY,kyr,Syr,Ryr,U3,vCe,Pyr,Byr,JY,Nyr,Iyr,qyr,J3,FCe,jyr,Dyr,YY,Gyr,Oyr,Vyr,Y3,Rze,wc,K3,TCe,Cx,Xyr,MCe,zyr,Pze,lr,wx,Qyr,Ac,Wyr,KY,Hyr,Uyr,ZY,Jyr,Yyr,Kyr,Ax,Zyr,ECe,e8r,o8r,r8r,jt,Lx,t8r,CCe,a8r,n8r,Lc,s8r,wCe,l8r,i8r,eK,d8r,c8r,m8r,Z3,f8r,Br,yx,g8r,ACe,h8r,u8r,gn,p8r,LCe,_8r,b8r,yCe,v8r,F8r,xCe,T8r,M8r,E8r,te,e5,$Ce,C8r,w8r,oK,A8r,L8r,y8r,o5,kCe,x8r,$8r,rK,k8r,S8r,R8r,r5,SCe,P8r,B8r,tK,N8r,I8r,q8r,t5,RCe,j8r,D8r,aK,G8r,O8r,V8r,a5,PCe,X8r,z8r,nK,Q8r,W8r,H8r,n5,BCe,U8r,J8r,sK,Y8r,K8r,Z8r,s5,NCe,e9r,o9r,lK,r9r,t9r,a9r,l5,ICe,n9r,s9r,iK,l9r,i9r,d9r,i5,qCe,c9r,m9r,dK,f9r,g9r,h9r,d5,jCe,u9r,p9r,cK,_9r,b9r,v9r,c5,DCe,F9r,T9r,mK,M9r,E9r,C9r,m5,GCe,w9r,A9r,fK,L9r,y9r,x9r,f5,OCe,$9r,k9r,gK,S9r,R9r,P9r,g5,VCe,B9r,N9r,hK,I9r,q9r,j9r,h5,XCe,D9r,G9r,uK,O9r,V9r,X9r,u5,zCe,z9r,Q9r,pK,W9r,H9r,U9r,p5,QCe,J9r,Y9r,_K,K9r,Z9r,exr,_5,WCe,oxr,rxr,bK,txr,axr,nxr,b5,HCe,sxr,lxr,vK,ixr,dxr,cxr,v5,UCe,mxr,fxr,FK,gxr,hxr,uxr,F5,JCe,pxr,_xr,TK,bxr,vxr,Fxr,T5,YCe,Txr,Mxr,MK,Exr,Cxr,wxr,M5,KCe,Axr,Lxr,EK,yxr,xxr,$xr,E5,ZCe,kxr,Sxr,CK,Rxr,Pxr,Bxr,C5,e3e,Nxr,Ixr,wK,qxr,jxr,Dxr,w5,o3e,Gxr,Oxr,AK,Vxr,Xxr,zxr,A5,Bze,yc,L5,r3e,xx,Qxr,t3e,Wxr,Nze,ir,$x,Hxr,xc,Uxr,LK,Jxr,Yxr,yK,Kxr,Zxr,e$r,kx,o$r,a3e,r$r,t$r,a$r,Dt,Sx,n$r,n3e,s$r,l$r,$c,i$r,s3e,d$r,c$r,xK,m$r,f$r,g$r,y5,h$r,Nr,Rx,u$r,l3e,p$r,_$r,hn,b$r,i3e,v$r,F$r,d3e,T$r,M$r,c3e,E$r,C$r,w$r,_e,x5,m3e,A$r,L$r,$K,y$r,x$r,$$r,$5,f3e,k$r,S$r,kK,R$r,P$r,B$r,k5,g3e,N$r,I$r,SK,q$r,j$r,D$r,S5,h3e,G$r,O$r,RK,V$r,X$r,z$r,R5,u3e,Q$r,W$r,PK,H$r,U$r,J$r,P5,p3e,Y$r,K$r,BK,Z$r,ekr,okr,B5,_3e,rkr,tkr,NK,akr,nkr,skr,N5,b3e,lkr,ikr,IK,dkr,ckr,mkr,I5,v3e,fkr,gkr,qK,hkr,ukr,pkr,q5,F3e,_kr,bkr,jK,vkr,Fkr,Tkr,j5,T3e,Mkr,Ekr,DK,Ckr,wkr,Akr,D5,M3e,Lkr,ykr,GK,xkr,$kr,kkr,G5,E3e,Skr,Rkr,OK,Pkr,Bkr,Nkr,O5,C3e,Ikr,qkr,VK,jkr,Dkr,Gkr,V5,w3e,Okr,Vkr,XK,Xkr,zkr,Qkr,X5,A3e,Wkr,Hkr,zK,Ukr,Jkr,Ykr,z5,L3e,Kkr,Zkr,QK,eSr,oSr,rSr,Q5,Ize,kc,W5,y3e,Px,tSr,x3e,aSr,qze,dr,Bx,nSr,Sc,sSr,WK,lSr,iSr,HK,dSr,cSr,mSr,Nx,fSr,$3e,gSr,hSr,uSr,Gt,Ix,pSr,k3e,_Sr,bSr,Rc,vSr,S3e,FSr,TSr,UK,MSr,ESr,CSr,H5,wSr,Ir,qx,ASr,R3e,LSr,ySr,un,xSr,P3e,$Sr,kSr,B3e,SSr,RSr,N3e,PSr,BSr,NSr,jx,U5,I3e,ISr,qSr,JK,jSr,DSr,GSr,J5,q3e,OSr,VSr,YK,XSr,zSr,QSr,Y5,jze,Pc,K5,j3e,Dx,WSr,D3e,HSr,Dze,cr,Gx,USr,Bc,JSr,KK,YSr,KSr,ZK,ZSr,eRr,oRr,Ox,rRr,G3e,tRr,aRr,nRr,Ot,Vx,sRr,O3e,lRr,iRr,Nc,dRr,V3e,cRr,mRr,eZ,fRr,gRr,hRr,Z5,uRr,qr,Xx,pRr,X3e,_Rr,bRr,pn,vRr,z3e,FRr,TRr,Q3e,MRr,ERr,W3e,CRr,wRr,ARr,H3e,e0,U3e,LRr,yRr,oZ,xRr,$Rr,kRr,o0,Gze,Ic,r0,J3e,zx,SRr,Y3e,RRr,Oze,mr,Qx,PRr,qc,BRr,rZ,NRr,IRr,tZ,qRr,jRr,DRr,Wx,GRr,K3e,ORr,VRr,XRr,Vt,Hx,zRr,Z3e,QRr,WRr,jc,HRr,e5e,URr,JRr,aZ,YRr,KRr,ZRr,t0,ePr,jr,Ux,oPr,o5e,rPr,tPr,_n,aPr,r5e,nPr,sPr,t5e,lPr,iPr,a5e,dPr,cPr,mPr,de,a0,n5e,fPr,gPr,nZ,hPr,uPr,pPr,n0,s5e,_Pr,bPr,sZ,vPr,FPr,TPr,s0,l5e,MPr,EPr,lZ,CPr,wPr,APr,l0,i5e,LPr,yPr,iZ,xPr,$Pr,kPr,i0,d5e,SPr,RPr,dZ,PPr,BPr,NPr,d0,c5e,IPr,qPr,cZ,jPr,DPr,GPr,c0,m5e,OPr,VPr,mZ,XPr,zPr,QPr,m0,f5e,WPr,HPr,fZ,UPr,JPr,YPr,f0,g5e,KPr,ZPr,gZ,eBr,oBr,rBr,g0,h5e,tBr,aBr,hZ,nBr,sBr,lBr,h0,u5e,iBr,dBr,uZ,cBr,mBr,fBr,u0,p5e,gBr,hBr,pZ,uBr,pBr,_Br,p0,_5e,bBr,vBr,_Z,FBr,TBr,MBr,_0,b5e,EBr,CBr,bZ,wBr,ABr,LBr,b0,v5e,yBr,xBr,vZ,$Br,kBr,SBr,v0,F5e,RBr,PBr,FZ,BBr,NBr,IBr,F0,T5e,qBr,jBr,TZ,DBr,GBr,OBr,T0,M5e,VBr,XBr,MZ,zBr,QBr,WBr,M0,E5e,HBr,UBr,EZ,JBr,YBr,KBr,E0,C5e,ZBr,eNr,CZ,oNr,rNr,tNr,C0,Vze,Dc,w0,w5e,Jx,aNr,A5e,nNr,Xze,fr,Yx,sNr,Gc,lNr,wZ,iNr,dNr,AZ,cNr,mNr,fNr,Kx,gNr,L5e,hNr,uNr,pNr,Xt,Zx,_Nr,y5e,bNr,vNr,Oc,FNr,x5e,TNr,MNr,LZ,ENr,CNr,wNr,A0,ANr,Dr,e$,LNr,$5e,yNr,xNr,bn,$Nr,k5e,kNr,SNr,S5e,RNr,PNr,R5e,BNr,NNr,INr,ce,L0,P5e,qNr,jNr,yZ,DNr,GNr,ONr,y0,B5e,VNr,XNr,xZ,zNr,QNr,WNr,x0,N5e,HNr,UNr,$Z,JNr,YNr,KNr,$0,I5e,ZNr,eIr,kZ,oIr,rIr,tIr,k0,q5e,aIr,nIr,SZ,sIr,lIr,iIr,S0,j5e,dIr,cIr,RZ,mIr,fIr,gIr,R0,D5e,hIr,uIr,PZ,pIr,_Ir,bIr,P0,G5e,vIr,FIr,BZ,TIr,MIr,EIr,B0,O5e,CIr,wIr,NZ,AIr,LIr,yIr,N0,V5e,xIr,$Ir,IZ,kIr,SIr,RIr,I0,X5e,PIr,BIr,qZ,NIr,IIr,qIr,q0,z5e,jIr,DIr,jZ,GIr,OIr,VIr,j0,Q5e,XIr,zIr,DZ,QIr,WIr,HIr,D0,W5e,UIr,JIr,GZ,YIr,KIr,ZIr,G0,H5e,eqr,oqr,OZ,rqr,tqr,aqr,O0,U5e,nqr,sqr,VZ,lqr,iqr,dqr,V0,J5e,cqr,mqr,XZ,fqr,gqr,hqr,X0,Y5e,uqr,pqr,zZ,_qr,bqr,vqr,z0,K5e,Fqr,Tqr,QZ,Mqr,Eqr,Cqr,Q0,Z5e,wqr,Aqr,WZ,Lqr,yqr,xqr,W0,zze,Vc,H0,e0e,o$,$qr,o0e,kqr,Qze,gr,r$,Sqr,Xc,Rqr,HZ,Pqr,Bqr,UZ,Nqr,Iqr,qqr,t$,jqr,r0e,Dqr,Gqr,Oqr,zt,a$,Vqr,t0e,Xqr,zqr,zc,Qqr,a0e,Wqr,Hqr,JZ,Uqr,Jqr,Yqr,U0,Kqr,Gr,n$,Zqr,n0e,ejr,ojr,vn,rjr,s0e,tjr,ajr,l0e,njr,sjr,i0e,ljr,ijr,djr,d0e,J0,c0e,cjr,mjr,YZ,fjr,gjr,hjr,Y0,Wze,Qc,K0,m0e,s$,ujr,f0e,pjr,Hze,hr,l$,_jr,Wc,bjr,KZ,vjr,Fjr,ZZ,Tjr,Mjr,Ejr,i$,Cjr,g0e,wjr,Ajr,Ljr,Qt,d$,yjr,h0e,xjr,$jr,Hc,kjr,u0e,Sjr,Rjr,eee,Pjr,Bjr,Njr,Z0,Ijr,Or,c$,qjr,p0e,jjr,Djr,Fn,Gjr,_0e,Ojr,Vjr,b0e,Xjr,zjr,v0e,Qjr,Wjr,Hjr,F0e,ew,T0e,Ujr,Jjr,oee,Yjr,Kjr,Zjr,ow,Uze,Uc,rw,M0e,m$,eDr,E0e,oDr,Jze,ur,f$,rDr,Jc,tDr,ree,aDr,nDr,tee,sDr,lDr,iDr,g$,dDr,C0e,cDr,mDr,fDr,Wt,h$,gDr,w0e,hDr,uDr,Yc,pDr,A0e,_Dr,bDr,aee,vDr,FDr,TDr,tw,MDr,Vr,u$,EDr,L0e,CDr,wDr,Tn,ADr,y0e,LDr,yDr,x0e,xDr,$Dr,$0e,kDr,SDr,RDr,oe,aw,k0e,PDr,BDr,nee,NDr,IDr,qDr,nw,S0e,jDr,DDr,see,GDr,ODr,VDr,sw,R0e,XDr,zDr,lee,QDr,WDr,HDr,lw,P0e,UDr,JDr,iee,YDr,KDr,ZDr,iw,B0e,eGr,oGr,dee,rGr,tGr,aGr,dw,N0e,nGr,sGr,cee,lGr,iGr,dGr,cw,I0e,cGr,mGr,mee,fGr,gGr,hGr,mw,q0e,uGr,pGr,fee,_Gr,bGr,vGr,fw,j0e,FGr,TGr,gee,MGr,EGr,CGr,gw,D0e,wGr,AGr,hee,LGr,yGr,xGr,hw,G0e,$Gr,kGr,uee,SGr,RGr,PGr,uw,O0e,BGr,NGr,pee,IGr,qGr,jGr,pw,V0e,DGr,GGr,_ee,OGr,VGr,XGr,_w,X0e,zGr,QGr,bee,WGr,HGr,UGr,bw,z0e,JGr,YGr,vee,KGr,ZGr,eOr,vw,Q0e,oOr,rOr,Fee,tOr,aOr,nOr,Fw,W0e,sOr,lOr,Tee,iOr,dOr,cOr,Tw,H0e,mOr,fOr,Mee,gOr,hOr,uOr,Mw,U0e,pOr,_Or,Eee,bOr,vOr,FOr,Ew,J0e,TOr,MOr,Cee,EOr,COr,wOr,Cw,Y0e,AOr,LOr,wee,yOr,xOr,$Or,ww,K0e,kOr,SOr,Aee,ROr,POr,BOr,Aw,Z0e,NOr,IOr,Lee,qOr,jOr,DOr,Lw,ewe,GOr,OOr,yee,VOr,XOr,zOr,yw,owe,QOr,WOr,xee,HOr,UOr,JOr,xw,rwe,YOr,KOr,$ee,ZOr,eVr,oVr,$w,twe,rVr,tVr,kee,aVr,nVr,sVr,kw,Yze,Kc,Sw,awe,p$,lVr,nwe,iVr,Kze,pr,_$,dVr,Zc,cVr,See,mVr,fVr,Ree,gVr,hVr,uVr,b$,pVr,swe,_Vr,bVr,vVr,Ht,v$,FVr,lwe,TVr,MVr,em,EVr,iwe,CVr,wVr,Pee,AVr,LVr,yVr,Rw,xVr,Xr,F$,$Vr,dwe,kVr,SVr,Mn,RVr,cwe,PVr,BVr,mwe,NVr,IVr,fwe,qVr,jVr,DVr,xe,Pw,gwe,GVr,OVr,Bee,VVr,XVr,zVr,Bw,hwe,QVr,WVr,Nee,HVr,UVr,JVr,Nw,uwe,YVr,KVr,Iee,ZVr,eXr,oXr,Iw,pwe,rXr,tXr,qee,aXr,nXr,sXr,qw,_we,lXr,iXr,jee,dXr,cXr,mXr,jw,bwe,fXr,gXr,Dee,hXr,uXr,pXr,Dw,vwe,_Xr,bXr,Gee,vXr,FXr,TXr,Gw,Fwe,MXr,EXr,Oee,CXr,wXr,AXr,Ow,Twe,LXr,yXr,Vee,xXr,$Xr,kXr,Vw,Mwe,SXr,RXr,Xee,PXr,BXr,NXr,Xw,Zze,om,zw,Ewe,T$,IXr,Cwe,qXr,eQe,_r,M$,jXr,rm,DXr,zee,GXr,OXr,Qee,VXr,XXr,zXr,E$,QXr,wwe,WXr,HXr,UXr,Ut,C$,JXr,Awe,YXr,KXr,tm,ZXr,Lwe,ezr,ozr,Wee,rzr,tzr,azr,Qw,nzr,zr,w$,szr,ywe,lzr,izr,En,dzr,xwe,czr,mzr,$we,fzr,gzr,kwe,hzr,uzr,pzr,Ee,Ww,Swe,_zr,bzr,Hee,vzr,Fzr,Tzr,Hw,Rwe,Mzr,Ezr,Uee,Czr,wzr,Azr,Uw,Pwe,Lzr,yzr,Jee,xzr,$zr,kzr,Jw,Bwe,Szr,Rzr,Yee,Pzr,Bzr,Nzr,Yw,Nwe,Izr,qzr,Kee,jzr,Dzr,Gzr,Kw,Iwe,Ozr,Vzr,Zee,Xzr,zzr,Qzr,Zw,qwe,Wzr,Hzr,eoe,Uzr,Jzr,Yzr,eA,jwe,Kzr,Zzr,ooe,eQr,oQr,rQr,oA,Dwe,tQr,aQr,roe,nQr,sQr,lQr,rA,Gwe,iQr,dQr,toe,cQr,mQr,fQr,tA,Owe,gQr,hQr,aoe,uQr,pQr,_Qr,aA,Vwe,bQr,vQr,noe,FQr,TQr,MQr,nA,Xwe,EQr,CQr,soe,wQr,AQr,LQr,sA,oQe,am,lA,zwe,A$,yQr,Qwe,xQr,rQe,br,L$,$Qr,nm,kQr,loe,SQr,RQr,ioe,PQr,BQr,NQr,y$,IQr,Wwe,qQr,jQr,DQr,Jt,x$,GQr,Hwe,OQr,VQr,sm,XQr,Uwe,zQr,QQr,doe,WQr,HQr,UQr,iA,JQr,Qr,$$,YQr,Jwe,KQr,ZQr,Cn,eWr,Ywe,oWr,rWr,Kwe,tWr,aWr,Zwe,nWr,sWr,lWr,$e,dA,eAe,iWr,dWr,coe,cWr,mWr,fWr,cA,oAe,gWr,hWr,moe,uWr,pWr,_Wr,mA,rAe,bWr,vWr,foe,FWr,TWr,MWr,fA,tAe,EWr,CWr,goe,wWr,AWr,LWr,gA,aAe,yWr,xWr,hoe,$Wr,kWr,SWr,hA,nAe,RWr,PWr,uoe,BWr,NWr,IWr,uA,sAe,qWr,jWr,poe,DWr,GWr,OWr,pA,lAe,VWr,XWr,_oe,zWr,QWr,WWr,_A,iAe,HWr,UWr,boe,JWr,YWr,KWr,bA,dAe,ZWr,eHr,voe,oHr,rHr,tHr,vA,tQe,lm,FA,cAe,k$,aHr,mAe,nHr,aQe,vr,S$,sHr,im,lHr,Foe,iHr,dHr,Toe,cHr,mHr,fHr,R$,gHr,fAe,hHr,uHr,pHr,Yt,P$,_Hr,gAe,bHr,vHr,dm,FHr,hAe,THr,MHr,Moe,EHr,CHr,wHr,TA,AHr,Wr,B$,LHr,uAe,yHr,xHr,wn,$Hr,pAe,kHr,SHr,_Ae,RHr,PHr,bAe,BHr,NHr,IHr,ke,MA,vAe,qHr,jHr,Eoe,DHr,GHr,OHr,EA,FAe,VHr,XHr,Coe,zHr,QHr,WHr,CA,TAe,HHr,UHr,woe,JHr,YHr,KHr,wA,MAe,ZHr,eUr,Aoe,oUr,rUr,tUr,AA,EAe,aUr,nUr,Loe,sUr,lUr,iUr,LA,CAe,dUr,cUr,yoe,mUr,fUr,gUr,yA,wAe,hUr,uUr,xoe,pUr,_Ur,bUr,xA,AAe,vUr,FUr,$oe,TUr,MUr,EUr,$A,LAe,CUr,wUr,koe,AUr,LUr,yUr,kA,yAe,xUr,$Ur,Soe,kUr,SUr,RUr,SA,nQe,cm,RA,xAe,N$,PUr,$Ae,BUr,sQe,Fr,I$,NUr,mm,IUr,Roe,qUr,jUr,Poe,DUr,GUr,OUr,q$,VUr,kAe,XUr,zUr,QUr,Kt,j$,WUr,SAe,HUr,UUr,fm,JUr,RAe,YUr,KUr,Boe,ZUr,eJr,oJr,PA,rJr,Hr,D$,tJr,PAe,aJr,nJr,An,sJr,BAe,lJr,iJr,NAe,dJr,cJr,IAe,mJr,fJr,gJr,Se,BA,qAe,hJr,uJr,Noe,pJr,_Jr,bJr,NA,jAe,vJr,FJr,Ioe,TJr,MJr,EJr,IA,DAe,CJr,wJr,qoe,AJr,LJr,yJr,qA,GAe,xJr,$Jr,joe,kJr,SJr,RJr,jA,OAe,PJr,BJr,Doe,NJr,IJr,qJr,DA,VAe,jJr,DJr,Goe,GJr,OJr,VJr,GA,XAe,XJr,zJr,Ooe,QJr,WJr,HJr,OA,zAe,UJr,JJr,Voe,YJr,KJr,ZJr,VA,QAe,eYr,oYr,Xoe,rYr,tYr,aYr,XA,WAe,nYr,sYr,zoe,lYr,iYr,dYr,zA,lQe,gm,QA,HAe,G$,cYr,UAe,mYr,iQe,Tr,O$,fYr,hm,gYr,Qoe,hYr,uYr,Woe,pYr,_Yr,bYr,V$,vYr,JAe,FYr,TYr,MYr,Zt,X$,EYr,YAe,CYr,wYr,um,AYr,KAe,LYr,yYr,Hoe,xYr,$Yr,kYr,WA,SYr,Ur,z$,RYr,ZAe,PYr,BYr,Ln,NYr,e6e,IYr,qYr,o6e,jYr,DYr,r6e,GYr,OYr,VYr,Re,HA,t6e,XYr,zYr,Uoe,QYr,WYr,HYr,UA,a6e,UYr,JYr,Joe,YYr,KYr,ZYr,JA,n6e,eKr,oKr,Yoe,rKr,tKr,aKr,YA,s6e,nKr,sKr,Koe,lKr,iKr,dKr,KA,l6e,cKr,mKr,Zoe,fKr,gKr,hKr,ZA,i6e,uKr,pKr,ere,_Kr,bKr,vKr,e6,d6e,FKr,TKr,ore,MKr,EKr,CKr,o6,c6e,wKr,AKr,rre,LKr,yKr,xKr,r6,m6e,$Kr,kKr,tre,SKr,RKr,PKr,t6,f6e,BKr,NKr,are,IKr,qKr,jKr,a6,dQe,pm,n6,g6e,Q$,DKr,h6e,GKr,cQe,Mr,W$,OKr,_m,VKr,nre,XKr,zKr,sre,QKr,WKr,HKr,H$,UKr,u6e,JKr,YKr,KKr,ea,U$,ZKr,p6e,eZr,oZr,bm,rZr,_6e,tZr,aZr,lre,nZr,sZr,lZr,s6,iZr,Jr,J$,dZr,b6e,cZr,mZr,yn,fZr,v6e,gZr,hZr,F6e,uZr,pZr,T6e,_Zr,bZr,vZr,Ve,l6,M6e,FZr,TZr,ire,MZr,EZr,CZr,i6,E6e,wZr,AZr,dre,LZr,yZr,xZr,d6,C6e,$Zr,kZr,cre,SZr,RZr,PZr,c6,w6e,BZr,NZr,mre,IZr,qZr,jZr,m6,A6e,DZr,GZr,fre,OZr,VZr,XZr,f6,L6e,zZr,QZr,gre,WZr,HZr,UZr,g6,y6e,JZr,YZr,hre,KZr,ZZr,eet,h6,x6e,oet,ret,ure,tet,aet,net,u6,mQe,vm,p6,$6e,Y$,set,k6e,iet,fQe,Er,K$,det,Fm,cet,pre,met,fet,_re,get,het,uet,Z$,pet,S6e,_et,bet,vet,oa,ek,Fet,R6e,Tet,Met,Tm,Eet,P6e,Cet,wet,bre,Aet,Let,yet,_6,xet,Yr,ok,$et,B6e,ket,Set,xn,Ret,N6e,Pet,Bet,I6e,Net,Iet,q6e,qet,jet,Det,Xe,b6,j6e,Get,Oet,vre,Vet,Xet,zet,v6,D6e,Qet,Wet,Fre,Het,Uet,Jet,F6,G6e,Yet,Ket,Tre,Zet,eot,oot,T6,O6e,rot,tot,Mre,aot,not,sot,M6,V6e,lot,iot,Ere,dot,cot,mot,E6,X6e,fot,got,Cre,hot,uot,pot,C6,z6e,_ot,bot,wre,vot,Fot,Tot,w6,Q6e,Mot,Eot,Are,Cot,wot,Aot,A6,gQe,Mm,L6,W6e,rk,Lot,H6e,yot,hQe,Cr,tk,xot,Em,$ot,Lre,kot,Sot,yre,Rot,Pot,Bot,ak,Not,U6e,Iot,qot,jot,ra,nk,Dot,J6e,Got,Oot,Cm,Vot,Y6e,Xot,zot,xre,Qot,Wot,Hot,y6,Uot,Kr,sk,Jot,K6e,Yot,Kot,$n,Zot,Z6e,ert,ort,e7e,rrt,trt,o7e,art,nrt,srt,r7e,x6,t7e,lrt,irt,$re,drt,crt,mrt,$6,uQe,wm,k6,a7e,lk,frt,n7e,grt,pQe,wr,ik,hrt,Am,urt,kre,prt,_rt,Sre,brt,vrt,Frt,dk,Trt,s7e,Mrt,Ert,Crt,ta,ck,wrt,l7e,Art,Lrt,Lm,yrt,i7e,xrt,$rt,Rre,krt,Srt,Rrt,S6,Prt,Zr,mk,Brt,d7e,Nrt,Irt,kn,qrt,c7e,jrt,Drt,m7e,Grt,Ort,f7e,Vrt,Xrt,zrt,fk,R6,g7e,Qrt,Wrt,Pre,Hrt,Urt,Jrt,P6,h7e,Yrt,Krt,Bre,Zrt,ett,ott,B6,_Qe,ym,N6,u7e,gk,rtt,p7e,ttt,bQe,Ar,hk,att,xm,ntt,Nre,stt,ltt,Ire,itt,dtt,ctt,uk,mtt,_7e,ftt,gtt,htt,aa,pk,utt,b7e,ptt,_tt,$m,btt,v7e,vtt,Ftt,qre,Ttt,Mtt,Ett,I6,Ctt,et,_k,wtt,F7e,Att,Ltt,Sn,ytt,T7e,xtt,$tt,M7e,ktt,Stt,E7e,Rtt,Ptt,Btt,C7e,q6,w7e,Ntt,Itt,jre,qtt,jtt,Dtt,j6,vQe;return d=new re({}),Sa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),iy=new re({}),dy=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),jm=new Gtt({props:{warning:!0,$$slots:{default:[xWt]},$$scope:{ctx:$}}}),cy=new re({}),my=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L611"}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L634"}}),Kg=new N({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[$Wt]},$$scope:{ctx:$}}}),uy=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L757"}}),py=new re({}),_y=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L410"}}),Fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L424"}}),Ph=new N({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[kWt]},$$scope:{ctx:$}}}),Ty=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L623"}}),My=new re({}),Ey=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L195"}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L209"}}),_u=new Gtt({props:{$$slots:{default:[SWt]},$$scope:{ctx:$}}}),bu=new N({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[RWt]},$$scope:{ctx:$}}}),Ly=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L336"}}),yy=new re({}),xy=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L89"}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L103"}}),ju=new Gtt({props:{$$slots:{default:[PWt]},$$scope:{ctx:$}}}),Du=new N({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[BWt]},$$scope:{ctx:$}}}),Ry=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L256"}}),Py=new re({}),By=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L786"}}),Iy=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Vu=new N({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[NWt]},$$scope:{ctx:$}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),H_=new N({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[IWt]},$$scope:{ctx:$}}}),jy=new re({}),Dy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L793"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),J_=new N({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[qWt]},$$scope:{ctx:$}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),V2=new N({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[jWt]},$$scope:{ctx:$}}}),Xy=new re({}),zy=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L808"}}),Wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),z2=new N({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[DWt]},$$scope:{ctx:$}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Rb=new N({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[GWt]},$$scope:{ctx:$}}}),Uy=new re({}),Jy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L815"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Bb=new N({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[OWt]},$$scope:{ctx:$}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Tv=new N({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[VWt]},$$scope:{ctx:$}}}),e8=new re({}),o8=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L822"}}),t8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Ev=new N({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[XWt]},$$scope:{ctx:$}}}),a8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Xv=new N({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[zWt]},$$scope:{ctx:$}}}),n8=new re({}),s8=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L831"}}),i8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Qv=new N({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[QWt]},$$scope:{ctx:$}}}),d8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),z1=new N({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[WWt]},$$scope:{ctx:$}}}),c8=new re({}),m8=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L876"}}),g8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),W1=new N({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[HWt]},$$scope:{ctx:$}}}),h8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),wF=new N({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[UWt]},$$scope:{ctx:$}}}),u8=new re({}),p8=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L883"}}),b8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),LF=new N({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[JWt]},$$scope:{ctx:$}}}),v8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),BF=new N({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[YWt]},$$scope:{ctx:$}}}),F8=new re({}),T8=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L869"}}),E8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),IF=new N({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[KWt]},$$scope:{ctx:$}}}),C8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),TT=new N({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[ZWt]},$$scope:{ctx:$}}}),w8=new re({}),A8=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L840"}}),y8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ET=new N({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[eHt]},$$scope:{ctx:$}}}),x8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),gM=new N({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[oHt]},$$scope:{ctx:$}}}),$8=new re({}),k8=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L847"}}),R8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),uM=new N({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[rHt]},$$scope:{ctx:$}}}),P8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),bM=new N({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[tHt]},$$scope:{ctx:$}}}),B8=new re({}),N8=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L892"}}),q8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),FM=new N({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[aHt]},$$scope:{ctx:$}}}),j8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),BM=new N({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[nHt]},$$scope:{ctx:$}}}),D8=new re({}),G8=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L931"}}),V8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),IM=new N({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[sHt]},$$scope:{ctx:$}}}),X8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),DM=new N({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[lHt]},$$scope:{ctx:$}}}),z8=new re({}),Q8=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L858"}}),H8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),OM=new N({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[iHt]},$$scope:{ctx:$}}}),U8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),zM=new N({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[dHt]},$$scope:{ctx:$}}}),J8=new re({}),Y8=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L938"}}),Z8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),WM=new N({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[cHt]},$$scope:{ctx:$}}}),e9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),a4=new N({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[mHt]},$$scope:{ctx:$}}}),o9=new re({}),r9=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L961"}}),a9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),s4=new N({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[fHt]},$$scope:{ctx:$}}}),n9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),g4=new N({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[gHt]},$$scope:{ctx:$}}}),s9=new re({}),l9=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L945"}}),d9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),u4=new N({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[hHt]},$$scope:{ctx:$}}}),c9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),L4=new N({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[uHt]},$$scope:{ctx:$}}}),m9=new re({}),f9=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L952"}}),h9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),x4=new N({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[pHt]},$$scope:{ctx:$}}}),u9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),R4=new N({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[_Ht]},$$scope:{ctx:$}}}),_9=new re({}),b9=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L970"}}),F9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),B4=new N({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[bHt]},$$scope:{ctx:$}}}),T9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),O4=new N({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[vHt]},$$scope:{ctx:$}}}),M9=new re({}),E9=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L977"}}),w9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),X4=new N({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[FHt]},$$scope:{ctx:$}}}),A9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),U4=new N({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[THt]},$$scope:{ctx:$}}}),L9=new re({}),y9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L924"}}),$9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Y4=new N({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[MHt]},$$scope:{ctx:$}}}),k9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),oE=new N({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[EHt]},$$scope:{ctx:$}}}),R9=new re({}),P9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L899"}}),N9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),tE=new N({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[CHt]},$$scope:{ctx:$}}}),I9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),sE=new N({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[wHt]},$$scope:{ctx:$}}}),q9=new re({}),j9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L906"}}),G9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),iE=new N({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[AHt]},$$scope:{ctx:$}}}),O9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),uE=new N({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[LHt]},$$scope:{ctx:$}}}),V9=new re({}),X9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L915"}}),Q9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_E=new N({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[yHt]},$$scope:{ctx:$}}}),W9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),FE=new N({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[xHt]},$$scope:{ctx:$}}}),H9=new re({}),U9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),Y9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ME=new N({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[$Ht]},$$scope:{ctx:$}}}),K9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),bC=new N({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[kHt]},$$scope:{ctx:$}}}),Z9=new re({}),ex=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L420"}}),rx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),FC=new N({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[SHt]},$$scope:{ctx:$}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),XC=new N({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[RHt]},$$scope:{ctx:$}}}),ax=new re({}),nx=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),lx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),QC=new N({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[PHt]},$$scope:{ctx:$}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),s3=new N({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[BHt]},$$scope:{ctx:$}}}),dx=new re({}),cx=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L451"}}),fx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),i3=new N({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[NHt]},$$scope:{ctx:$}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),u3=new N({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[IHt]},$$scope:{ctx:$}}}),hx=new re({}),ux=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),_x=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_3=new N({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[qHt]},$$scope:{ctx:$}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),q3=new N({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[jHt]},$$scope:{ctx:$}}}),vx=new re({}),Fx=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L483"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),D3=new N({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[DHt]},$$scope:{ctx:$}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Y3=new N({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[GHt]},$$scope:{ctx:$}}}),Cx=new re({}),wx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Z3=new N({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[OHt]},$$scope:{ctx:$}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),A5=new N({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[VHt]},$$scope:{ctx:$}}}),xx=new re({}),$x=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),y5=new N({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[XHt]},$$scope:{ctx:$}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Q5=new N({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[zHt]},$$scope:{ctx:$}}}),Px=new re({}),Bx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L535"}}),Ix=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),H5=new N({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[QHt]},$$scope:{ctx:$}}}),qx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Y5=new N({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[WHt]},$$scope:{ctx:$}}}),Dx=new re({}),Gx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L508"}}),Vx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Z5=new N({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[HHt]},$$scope:{ctx:$}}}),Xx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),o0=new N({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[UHt]},$$scope:{ctx:$}}}),zx=new re({}),Qx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L519"}}),Hx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),t0=new N({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[JHt]},$$scope:{ctx:$}}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),C0=new N({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[YHt]},$$scope:{ctx:$}}}),Jx=new re({}),Yx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),Zx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),A0=new N({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[KHt]},$$scope:{ctx:$}}}),e$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),W0=new N({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[ZHt]},$$scope:{ctx:$}}}),o$=new re({}),r$=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),a$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),U0=new N({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[eUt]},$$scope:{ctx:$}}}),n$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Y0=new N({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[oUt]},$$scope:{ctx:$}}}),s$=new re({}),l$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L544"}}),d$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Z0=new N({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[rUt]},$$scope:{ctx:$}}}),c$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ow=new N({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[tUt]},$$scope:{ctx:$}}}),m$=new re({}),f$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),h$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),tw=new N({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[aUt]},$$scope:{ctx:$}}}),u$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),kw=new N({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[nUt]},$$scope:{ctx:$}}}),p$=new re({}),_$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),v$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Rw=new N({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[sUt]},$$scope:{ctx:$}}}),F$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Xw=new N({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[lUt]},$$scope:{ctx:$}}}),T$=new re({}),M$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),C$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Qw=new N({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[iUt]},$$scope:{ctx:$}}}),w$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),sA=new N({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[dUt]},$$scope:{ctx:$}}}),A$=new re({}),L$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),x$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),iA=new N({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[cUt]},$$scope:{ctx:$}}}),$$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),vA=new N({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[mUt]},$$scope:{ctx:$}}}),k$=new re({}),S$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),P$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),TA=new N({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[fUt]},$$scope:{ctx:$}}}),B$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),SA=new N({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[gUt]},$$scope:{ctx:$}}}),N$=new re({}),I$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),j$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),PA=new N({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[hUt]},$$scope:{ctx:$}}}),D$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),zA=new N({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[uUt]},$$scope:{ctx:$}}}),G$=new re({}),O$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),X$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),WA=new N({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[pUt]},$$scope:{ctx:$}}}),z$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),a6=new N({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[_Ut]},$$scope:{ctx:$}}}),Q$=new re({}),W$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),U$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),s6=new N({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[bUt]},$$scope:{ctx:$}}}),J$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),u6=new N({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[vUt]},$$scope:{ctx:$}}}),Y$=new re({}),K$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),ek=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_6=new N({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[FUt]},$$scope:{ctx:$}}}),ok=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),A6=new N({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[TUt]},$$scope:{ctx:$}}}),rk=new re({}),tk=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),nk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),y6=new N({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[MUt]},$$scope:{ctx:$}}}),sk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),$6=new N({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[EUt]},$$scope:{ctx:$}}}),lk=new re({}),ik=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),ck=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),S6=new N({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[CUt]},$$scope:{ctx:$}}}),mk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),B6=new N({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[wUt]},$$scope:{ctx:$}}}),gk=new re({}),hk=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),pk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),I6=new N({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[AUt]},$$scope:{ctx:$}}}),_k=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),j6=new N({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[LUt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(d.$$.fragment),h=l(),Co=a("span"),yi=o("Auto Classes"),Pm=l(),lt=a("p"),xi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),$i=a("code"),ay=o("from_pretrained()"),Bm=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),We=a("p"),ki=o("Instantiating one of "),Pn=a("a"),ny=o("AutoConfig"),Bn=o(", "),Nn=a("a"),sy=o("AutoModel"),Si=o(`, and
`),In=a("a"),ly=o("AutoTokenizer"),Ri=o(" will directly create a class of the relevant architecture. For instance"),Nm=l(),F(Sa.$$.fragment),He=l(),Ae=a("p"),DS=o("will create a model that is an instance of "),Pi=a("a"),GS=o("BertModel"),OS=o("."),wo=l(),Ra=a("p"),VS=o("There is one class of "),Im=a("code"),XS=o("AutoModel"),xHe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),hXe=l(),Bi=a("h2"),qm=a("a"),Pae=a("span"),F(iy.$$.fragment),$He=l(),Bae=a("span"),kHe=o("Extending the Auto Classes"),uXe=l(),qn=a("p"),SHe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Nae=a("code"),RHe=o("NewModel"),PHe=o(", make sure you have a "),Iae=a("code"),BHe=o("NewModelConfig"),NHe=o(` then you can add those to the auto
classes like this:`),pXe=l(),F(dy.$$.fragment),_Xe=l(),zS=a("p"),IHe=o("You will then be able to use the auto classes like you would usually do!"),bXe=l(),F(jm.$$.fragment),vXe=l(),Ni=a("h2"),Dm=a("a"),qae=a("span"),F(cy.$$.fragment),qHe=l(),jae=a("span"),jHe=o("AutoConfig"),FXe=l(),Ao=a("div"),F(my.$$.fragment),DHe=l(),fy=a("p"),GHe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),QS=a("a"),OHe=o("from_pretrained()"),VHe=o(" class method."),XHe=l(),gy=a("p"),zHe=o("This class cannot be instantiated directly using "),Dae=a("code"),QHe=o("__init__()"),WHe=o(" (throws an error)."),HHe=l(),Lr=a("div"),F(hy.$$.fragment),UHe=l(),Gae=a("p"),JHe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),YHe=l(),Ii=a("p"),KHe=o("The configuration class to instantiate is selected based on the "),Oae=a("code"),ZHe=o("model_type"),eUe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Vae=a("code"),oUe=o("pretrained_model_name_or_path"),rUe=o(":"),tUe=l(),A=a("ul"),Gm=a("li"),Xae=a("strong"),aUe=o("albert"),nUe=o(" \u2014 "),WS=a("a"),sUe=o("AlbertConfig"),lUe=o(" (ALBERT model)"),iUe=l(),Om=a("li"),zae=a("strong"),dUe=o("bart"),cUe=o(" \u2014 "),HS=a("a"),mUe=o("BartConfig"),fUe=o(" (BART model)"),gUe=l(),Vm=a("li"),Qae=a("strong"),hUe=o("beit"),uUe=o(" \u2014 "),US=a("a"),pUe=o("BeitConfig"),_Ue=o(" (BEiT model)"),bUe=l(),Xm=a("li"),Wae=a("strong"),vUe=o("bert"),FUe=o(" \u2014 "),JS=a("a"),TUe=o("BertConfig"),MUe=o(" (BERT model)"),EUe=l(),zm=a("li"),Hae=a("strong"),CUe=o("bert-generation"),wUe=o(" \u2014 "),YS=a("a"),AUe=o("BertGenerationConfig"),LUe=o(" (Bert Generation model)"),yUe=l(),Qm=a("li"),Uae=a("strong"),xUe=o("big_bird"),$Ue=o(" \u2014 "),KS=a("a"),kUe=o("BigBirdConfig"),SUe=o(" (BigBird model)"),RUe=l(),Wm=a("li"),Jae=a("strong"),PUe=o("bigbird_pegasus"),BUe=o(" \u2014 "),ZS=a("a"),NUe=o("BigBirdPegasusConfig"),IUe=o(" (BigBird-Pegasus model)"),qUe=l(),Hm=a("li"),Yae=a("strong"),jUe=o("blenderbot"),DUe=o(" \u2014 "),eR=a("a"),GUe=o("BlenderbotConfig"),OUe=o(" (Blenderbot model)"),VUe=l(),Um=a("li"),Kae=a("strong"),XUe=o("blenderbot-small"),zUe=o(" \u2014 "),oR=a("a"),QUe=o("BlenderbotSmallConfig"),WUe=o(" (BlenderbotSmall model)"),HUe=l(),Jm=a("li"),Zae=a("strong"),UUe=o("bloom"),JUe=o(" \u2014 "),rR=a("a"),YUe=o("BloomConfig"),KUe=o(" (BLOOM model)"),ZUe=l(),Ym=a("li"),ene=a("strong"),eJe=o("camembert"),oJe=o(" \u2014 "),tR=a("a"),rJe=o("CamembertConfig"),tJe=o(" (CamemBERT model)"),aJe=l(),Km=a("li"),one=a("strong"),nJe=o("canine"),sJe=o(" \u2014 "),aR=a("a"),lJe=o("CanineConfig"),iJe=o(" (CANINE model)"),dJe=l(),Zm=a("li"),rne=a("strong"),cJe=o("clip"),mJe=o(" \u2014 "),nR=a("a"),fJe=o("CLIPConfig"),gJe=o(" (CLIP model)"),hJe=l(),ef=a("li"),tne=a("strong"),uJe=o("codegen"),pJe=o(" \u2014 "),sR=a("a"),_Je=o("CodeGenConfig"),bJe=o(" (CodeGen model)"),vJe=l(),of=a("li"),ane=a("strong"),FJe=o("convbert"),TJe=o(" \u2014 "),lR=a("a"),MJe=o("ConvBertConfig"),EJe=o(" (ConvBERT model)"),CJe=l(),rf=a("li"),nne=a("strong"),wJe=o("convnext"),AJe=o(" \u2014 "),iR=a("a"),LJe=o("ConvNextConfig"),yJe=o(" (ConvNeXT model)"),xJe=l(),tf=a("li"),sne=a("strong"),$Je=o("ctrl"),kJe=o(" \u2014 "),dR=a("a"),SJe=o("CTRLConfig"),RJe=o(" (CTRL model)"),PJe=l(),af=a("li"),lne=a("strong"),BJe=o("cvt"),NJe=o(" \u2014 "),cR=a("a"),IJe=o("CvtConfig"),qJe=o(" (CvT model)"),jJe=l(),nf=a("li"),ine=a("strong"),DJe=o("data2vec-audio"),GJe=o(" \u2014 "),mR=a("a"),OJe=o("Data2VecAudioConfig"),VJe=o(" (Data2VecAudio model)"),XJe=l(),sf=a("li"),dne=a("strong"),zJe=o("data2vec-text"),QJe=o(" \u2014 "),fR=a("a"),WJe=o("Data2VecTextConfig"),HJe=o(" (Data2VecText model)"),UJe=l(),lf=a("li"),cne=a("strong"),JJe=o("data2vec-vision"),YJe=o(" \u2014 "),gR=a("a"),KJe=o("Data2VecVisionConfig"),ZJe=o(" (Data2VecVision model)"),eYe=l(),df=a("li"),mne=a("strong"),oYe=o("deberta"),rYe=o(" \u2014 "),hR=a("a"),tYe=o("DebertaConfig"),aYe=o(" (DeBERTa model)"),nYe=l(),cf=a("li"),fne=a("strong"),sYe=o("deberta-v2"),lYe=o(" \u2014 "),uR=a("a"),iYe=o("DebertaV2Config"),dYe=o(" (DeBERTa-v2 model)"),cYe=l(),mf=a("li"),gne=a("strong"),mYe=o("decision_transformer"),fYe=o(" \u2014 "),pR=a("a"),gYe=o("DecisionTransformerConfig"),hYe=o(" (Decision Transformer model)"),uYe=l(),ff=a("li"),hne=a("strong"),pYe=o("deit"),_Ye=o(" \u2014 "),_R=a("a"),bYe=o("DeiTConfig"),vYe=o(" (DeiT model)"),FYe=l(),gf=a("li"),une=a("strong"),TYe=o("detr"),MYe=o(" \u2014 "),bR=a("a"),EYe=o("DetrConfig"),CYe=o(" (DETR model)"),wYe=l(),hf=a("li"),pne=a("strong"),AYe=o("distilbert"),LYe=o(" \u2014 "),vR=a("a"),yYe=o("DistilBertConfig"),xYe=o(" (DistilBERT model)"),$Ye=l(),uf=a("li"),_ne=a("strong"),kYe=o("dpr"),SYe=o(" \u2014 "),FR=a("a"),RYe=o("DPRConfig"),PYe=o(" (DPR model)"),BYe=l(),pf=a("li"),bne=a("strong"),NYe=o("dpt"),IYe=o(" \u2014 "),TR=a("a"),qYe=o("DPTConfig"),jYe=o(" (DPT model)"),DYe=l(),_f=a("li"),vne=a("strong"),GYe=o("electra"),OYe=o(" \u2014 "),MR=a("a"),VYe=o("ElectraConfig"),XYe=o(" (ELECTRA model)"),zYe=l(),bf=a("li"),Fne=a("strong"),QYe=o("encoder-decoder"),WYe=o(" \u2014 "),ER=a("a"),HYe=o("EncoderDecoderConfig"),UYe=o(" (Encoder decoder model)"),JYe=l(),vf=a("li"),Tne=a("strong"),YYe=o("flaubert"),KYe=o(" \u2014 "),CR=a("a"),ZYe=o("FlaubertConfig"),eKe=o(" (FlauBERT model)"),oKe=l(),Ff=a("li"),Mne=a("strong"),rKe=o("flava"),tKe=o(" \u2014 "),wR=a("a"),aKe=o("FlavaConfig"),nKe=o(" (FLAVA model)"),sKe=l(),Tf=a("li"),Ene=a("strong"),lKe=o("fnet"),iKe=o(" \u2014 "),AR=a("a"),dKe=o("FNetConfig"),cKe=o(" (FNet model)"),mKe=l(),Mf=a("li"),Cne=a("strong"),fKe=o("fsmt"),gKe=o(" \u2014 "),LR=a("a"),hKe=o("FSMTConfig"),uKe=o(" (FairSeq Machine-Translation model)"),pKe=l(),Ef=a("li"),wne=a("strong"),_Ke=o("funnel"),bKe=o(" \u2014 "),yR=a("a"),vKe=o("FunnelConfig"),FKe=o(" (Funnel Transformer model)"),TKe=l(),Cf=a("li"),Ane=a("strong"),MKe=o("glpn"),EKe=o(" \u2014 "),xR=a("a"),CKe=o("GLPNConfig"),wKe=o(" (GLPN model)"),AKe=l(),wf=a("li"),Lne=a("strong"),LKe=o("gpt2"),yKe=o(" \u2014 "),$R=a("a"),xKe=o("GPT2Config"),$Ke=o(" (OpenAI GPT-2 model)"),kKe=l(),Af=a("li"),yne=a("strong"),SKe=o("gpt_neo"),RKe=o(" \u2014 "),kR=a("a"),PKe=o("GPTNeoConfig"),BKe=o(" (GPT Neo model)"),NKe=l(),Lf=a("li"),xne=a("strong"),IKe=o("gpt_neox"),qKe=o(" \u2014 "),SR=a("a"),jKe=o("GPTNeoXConfig"),DKe=o(" (GPT NeoX model)"),GKe=l(),yf=a("li"),$ne=a("strong"),OKe=o("gptj"),VKe=o(" \u2014 "),RR=a("a"),XKe=o("GPTJConfig"),zKe=o(" (GPT-J model)"),QKe=l(),xf=a("li"),kne=a("strong"),WKe=o("groupvit"),HKe=o(" \u2014 "),PR=a("a"),UKe=o("GroupViTConfig"),JKe=o(" (GroupViT model)"),YKe=l(),$f=a("li"),Sne=a("strong"),KKe=o("hubert"),ZKe=o(" \u2014 "),BR=a("a"),eZe=o("HubertConfig"),oZe=o(" (Hubert model)"),rZe=l(),kf=a("li"),Rne=a("strong"),tZe=o("ibert"),aZe=o(" \u2014 "),NR=a("a"),nZe=o("IBertConfig"),sZe=o(" (I-BERT model)"),lZe=l(),Sf=a("li"),Pne=a("strong"),iZe=o("imagegpt"),dZe=o(" \u2014 "),IR=a("a"),cZe=o("ImageGPTConfig"),mZe=o(" (ImageGPT model)"),fZe=l(),Rf=a("li"),Bne=a("strong"),gZe=o("layoutlm"),hZe=o(" \u2014 "),qR=a("a"),uZe=o("LayoutLMConfig"),pZe=o(" (LayoutLM model)"),_Ze=l(),Pf=a("li"),Nne=a("strong"),bZe=o("layoutlmv2"),vZe=o(" \u2014 "),jR=a("a"),FZe=o("LayoutLMv2Config"),TZe=o(" (LayoutLMv2 model)"),MZe=l(),Bf=a("li"),Ine=a("strong"),EZe=o("layoutlmv3"),CZe=o(" \u2014 "),DR=a("a"),wZe=o("LayoutLMv3Config"),AZe=o(" (LayoutLMv3 model)"),LZe=l(),Nf=a("li"),qne=a("strong"),yZe=o("led"),xZe=o(" \u2014 "),GR=a("a"),$Ze=o("LEDConfig"),kZe=o(" (LED model)"),SZe=l(),If=a("li"),jne=a("strong"),RZe=o("levit"),PZe=o(" \u2014 "),OR=a("a"),BZe=o("LevitConfig"),NZe=o(" (LeViT model)"),IZe=l(),qf=a("li"),Dne=a("strong"),qZe=o("longformer"),jZe=o(" \u2014 "),VR=a("a"),DZe=o("LongformerConfig"),GZe=o(" (Longformer model)"),OZe=l(),jf=a("li"),Gne=a("strong"),VZe=o("longt5"),XZe=o(" \u2014 "),XR=a("a"),zZe=o("LongT5Config"),QZe=o(" (LongT5 model)"),WZe=l(),Df=a("li"),One=a("strong"),HZe=o("luke"),UZe=o(" \u2014 "),zR=a("a"),JZe=o("LukeConfig"),YZe=o(" (LUKE model)"),KZe=l(),Gf=a("li"),Vne=a("strong"),ZZe=o("lxmert"),eeo=o(" \u2014 "),QR=a("a"),oeo=o("LxmertConfig"),reo=o(" (LXMERT model)"),teo=l(),Of=a("li"),Xne=a("strong"),aeo=o("m2m_100"),neo=o(" \u2014 "),WR=a("a"),seo=o("M2M100Config"),leo=o(" (M2M100 model)"),ieo=l(),Vf=a("li"),zne=a("strong"),deo=o("marian"),ceo=o(" \u2014 "),HR=a("a"),meo=o("MarianConfig"),feo=o(" (Marian model)"),geo=l(),Xf=a("li"),Qne=a("strong"),heo=o("maskformer"),ueo=o(" \u2014 "),UR=a("a"),peo=o("MaskFormerConfig"),_eo=o(" (MaskFormer model)"),beo=l(),zf=a("li"),Wne=a("strong"),veo=o("mbart"),Feo=o(" \u2014 "),JR=a("a"),Teo=o("MBartConfig"),Meo=o(" (mBART model)"),Eeo=l(),Qf=a("li"),Hne=a("strong"),Ceo=o("mctct"),weo=o(" \u2014 "),YR=a("a"),Aeo=o("MCTCTConfig"),Leo=o(" (M-CTC-T model)"),yeo=l(),Wf=a("li"),Une=a("strong"),xeo=o("megatron-bert"),$eo=o(" \u2014 "),KR=a("a"),keo=o("MegatronBertConfig"),Seo=o(" (Megatron-BERT model)"),Reo=l(),Hf=a("li"),Jne=a("strong"),Peo=o("mobilebert"),Beo=o(" \u2014 "),ZR=a("a"),Neo=o("MobileBertConfig"),Ieo=o(" (MobileBERT model)"),qeo=l(),Uf=a("li"),Yne=a("strong"),jeo=o("mobilevit"),Deo=o(" \u2014 "),eP=a("a"),Geo=o("MobileViTConfig"),Oeo=o(" (MobileViT model)"),Veo=l(),Jf=a("li"),Kne=a("strong"),Xeo=o("mpnet"),zeo=o(" \u2014 "),oP=a("a"),Qeo=o("MPNetConfig"),Weo=o(" (MPNet model)"),Heo=l(),Yf=a("li"),Zne=a("strong"),Ueo=o("mt5"),Jeo=o(" \u2014 "),rP=a("a"),Yeo=o("MT5Config"),Keo=o(" (MT5 model)"),Zeo=l(),Kf=a("li"),ese=a("strong"),eoo=o("mvp"),ooo=o(" \u2014 "),tP=a("a"),roo=o("MvpConfig"),too=o(" (MVP model)"),aoo=l(),Zf=a("li"),ose=a("strong"),noo=o("nezha"),soo=o(" \u2014 "),aP=a("a"),loo=o("NezhaConfig"),ioo=o(" (Nezha model)"),doo=l(),eg=a("li"),rse=a("strong"),coo=o("nystromformer"),moo=o(" \u2014 "),nP=a("a"),foo=o("NystromformerConfig"),goo=o(" (Nystr\xF6mformer model)"),hoo=l(),og=a("li"),tse=a("strong"),uoo=o("openai-gpt"),poo=o(" \u2014 "),sP=a("a"),_oo=o("OpenAIGPTConfig"),boo=o(" (OpenAI GPT model)"),voo=l(),rg=a("li"),ase=a("strong"),Foo=o("opt"),Too=o(" \u2014 "),lP=a("a"),Moo=o("OPTConfig"),Eoo=o(" (OPT model)"),Coo=l(),tg=a("li"),nse=a("strong"),woo=o("pegasus"),Aoo=o(" \u2014 "),iP=a("a"),Loo=o("PegasusConfig"),yoo=o(" (Pegasus model)"),xoo=l(),ag=a("li"),sse=a("strong"),$oo=o("perceiver"),koo=o(" \u2014 "),dP=a("a"),Soo=o("PerceiverConfig"),Roo=o(" (Perceiver model)"),Poo=l(),ng=a("li"),lse=a("strong"),Boo=o("plbart"),Noo=o(" \u2014 "),cP=a("a"),Ioo=o("PLBartConfig"),qoo=o(" (PLBart model)"),joo=l(),sg=a("li"),ise=a("strong"),Doo=o("poolformer"),Goo=o(" \u2014 "),mP=a("a"),Ooo=o("PoolFormerConfig"),Voo=o(" (PoolFormer model)"),Xoo=l(),lg=a("li"),dse=a("strong"),zoo=o("prophetnet"),Qoo=o(" \u2014 "),fP=a("a"),Woo=o("ProphetNetConfig"),Hoo=o(" (ProphetNet model)"),Uoo=l(),ig=a("li"),cse=a("strong"),Joo=o("qdqbert"),Yoo=o(" \u2014 "),gP=a("a"),Koo=o("QDQBertConfig"),Zoo=o(" (QDQBert model)"),ero=l(),dg=a("li"),mse=a("strong"),oro=o("rag"),rro=o(" \u2014 "),hP=a("a"),tro=o("RagConfig"),aro=o(" (RAG model)"),nro=l(),cg=a("li"),fse=a("strong"),sro=o("realm"),lro=o(" \u2014 "),uP=a("a"),iro=o("RealmConfig"),dro=o(" (REALM model)"),cro=l(),mg=a("li"),gse=a("strong"),mro=o("reformer"),fro=o(" \u2014 "),pP=a("a"),gro=o("ReformerConfig"),hro=o(" (Reformer model)"),uro=l(),fg=a("li"),hse=a("strong"),pro=o("regnet"),_ro=o(" \u2014 "),_P=a("a"),bro=o("RegNetConfig"),vro=o(" (RegNet model)"),Fro=l(),gg=a("li"),use=a("strong"),Tro=o("rembert"),Mro=o(" \u2014 "),bP=a("a"),Ero=o("RemBertConfig"),Cro=o(" (RemBERT model)"),wro=l(),hg=a("li"),pse=a("strong"),Aro=o("resnet"),Lro=o(" \u2014 "),vP=a("a"),yro=o("ResNetConfig"),xro=o(" (ResNet model)"),$ro=l(),ug=a("li"),_se=a("strong"),kro=o("retribert"),Sro=o(" \u2014 "),FP=a("a"),Rro=o("RetriBertConfig"),Pro=o(" (RetriBERT model)"),Bro=l(),pg=a("li"),bse=a("strong"),Nro=o("roberta"),Iro=o(" \u2014 "),TP=a("a"),qro=o("RobertaConfig"),jro=o(" (RoBERTa model)"),Dro=l(),_g=a("li"),vse=a("strong"),Gro=o("roformer"),Oro=o(" \u2014 "),MP=a("a"),Vro=o("RoFormerConfig"),Xro=o(" (RoFormer model)"),zro=l(),bg=a("li"),Fse=a("strong"),Qro=o("segformer"),Wro=o(" \u2014 "),EP=a("a"),Hro=o("SegformerConfig"),Uro=o(" (SegFormer model)"),Jro=l(),vg=a("li"),Tse=a("strong"),Yro=o("sew"),Kro=o(" \u2014 "),CP=a("a"),Zro=o("SEWConfig"),eto=o(" (SEW model)"),oto=l(),Fg=a("li"),Mse=a("strong"),rto=o("sew-d"),tto=o(" \u2014 "),wP=a("a"),ato=o("SEWDConfig"),nto=o(" (SEW-D model)"),sto=l(),Tg=a("li"),Ese=a("strong"),lto=o("speech-encoder-decoder"),ito=o(" \u2014 "),AP=a("a"),dto=o("SpeechEncoderDecoderConfig"),cto=o(" (Speech Encoder decoder model)"),mto=l(),Mg=a("li"),Cse=a("strong"),fto=o("speech_to_text"),gto=o(" \u2014 "),LP=a("a"),hto=o("Speech2TextConfig"),uto=o(" (Speech2Text model)"),pto=l(),Eg=a("li"),wse=a("strong"),_to=o("speech_to_text_2"),bto=o(" \u2014 "),yP=a("a"),vto=o("Speech2Text2Config"),Fto=o(" (Speech2Text2 model)"),Tto=l(),Cg=a("li"),Ase=a("strong"),Mto=o("splinter"),Eto=o(" \u2014 "),xP=a("a"),Cto=o("SplinterConfig"),wto=o(" (Splinter model)"),Ato=l(),wg=a("li"),Lse=a("strong"),Lto=o("squeezebert"),yto=o(" \u2014 "),$P=a("a"),xto=o("SqueezeBertConfig"),$to=o(" (SqueezeBERT model)"),kto=l(),Ag=a("li"),yse=a("strong"),Sto=o("swin"),Rto=o(" \u2014 "),kP=a("a"),Pto=o("SwinConfig"),Bto=o(" (Swin Transformer model)"),Nto=l(),Lg=a("li"),xse=a("strong"),Ito=o("t5"),qto=o(" \u2014 "),SP=a("a"),jto=o("T5Config"),Dto=o(" (T5 model)"),Gto=l(),yg=a("li"),$se=a("strong"),Oto=o("tapas"),Vto=o(" \u2014 "),RP=a("a"),Xto=o("TapasConfig"),zto=o(" (TAPAS model)"),Qto=l(),xg=a("li"),kse=a("strong"),Wto=o("trajectory_transformer"),Hto=o(" \u2014 "),PP=a("a"),Uto=o("TrajectoryTransformerConfig"),Jto=o(" (Trajectory Transformer model)"),Yto=l(),$g=a("li"),Sse=a("strong"),Kto=o("transfo-xl"),Zto=o(" \u2014 "),BP=a("a"),eao=o("TransfoXLConfig"),oao=o(" (Transformer-XL model)"),rao=l(),kg=a("li"),Rse=a("strong"),tao=o("trocr"),aao=o(" \u2014 "),NP=a("a"),nao=o("TrOCRConfig"),sao=o(" (TrOCR model)"),lao=l(),Sg=a("li"),Pse=a("strong"),iao=o("unispeech"),dao=o(" \u2014 "),IP=a("a"),cao=o("UniSpeechConfig"),mao=o(" (UniSpeech model)"),fao=l(),Rg=a("li"),Bse=a("strong"),gao=o("unispeech-sat"),hao=o(" \u2014 "),qP=a("a"),uao=o("UniSpeechSatConfig"),pao=o(" (UniSpeechSat model)"),_ao=l(),Pg=a("li"),Nse=a("strong"),bao=o("van"),vao=o(" \u2014 "),jP=a("a"),Fao=o("VanConfig"),Tao=o(" (VAN model)"),Mao=l(),Bg=a("li"),Ise=a("strong"),Eao=o("vilt"),Cao=o(" \u2014 "),DP=a("a"),wao=o("ViltConfig"),Aao=o(" (ViLT model)"),Lao=l(),Ng=a("li"),qse=a("strong"),yao=o("vision-encoder-decoder"),xao=o(" \u2014 "),GP=a("a"),$ao=o("VisionEncoderDecoderConfig"),kao=o(" (Vision Encoder decoder model)"),Sao=l(),Ig=a("li"),jse=a("strong"),Rao=o("vision-text-dual-encoder"),Pao=o(" \u2014 "),OP=a("a"),Bao=o("VisionTextDualEncoderConfig"),Nao=o(" (VisionTextDualEncoder model)"),Iao=l(),qg=a("li"),Dse=a("strong"),qao=o("visual_bert"),jao=o(" \u2014 "),VP=a("a"),Dao=o("VisualBertConfig"),Gao=o(" (VisualBERT model)"),Oao=l(),jg=a("li"),Gse=a("strong"),Vao=o("vit"),Xao=o(" \u2014 "),XP=a("a"),zao=o("ViTConfig"),Qao=o(" (ViT model)"),Wao=l(),Dg=a("li"),Ose=a("strong"),Hao=o("vit_mae"),Uao=o(" \u2014 "),zP=a("a"),Jao=o("ViTMAEConfig"),Yao=o(" (ViTMAE model)"),Kao=l(),Gg=a("li"),Vse=a("strong"),Zao=o("wav2vec2"),eno=o(" \u2014 "),QP=a("a"),ono=o("Wav2Vec2Config"),rno=o(" (Wav2Vec2 model)"),tno=l(),Og=a("li"),Xse=a("strong"),ano=o("wav2vec2-conformer"),nno=o(" \u2014 "),WP=a("a"),sno=o("Wav2Vec2ConformerConfig"),lno=o(" (Wav2Vec2-Conformer model)"),ino=l(),Vg=a("li"),zse=a("strong"),dno=o("wavlm"),cno=o(" \u2014 "),HP=a("a"),mno=o("WavLMConfig"),fno=o(" (WavLM model)"),gno=l(),Xg=a("li"),Qse=a("strong"),hno=o("xglm"),uno=o(" \u2014 "),UP=a("a"),pno=o("XGLMConfig"),_no=o(" (XGLM model)"),bno=l(),zg=a("li"),Wse=a("strong"),vno=o("xlm"),Fno=o(" \u2014 "),JP=a("a"),Tno=o("XLMConfig"),Mno=o(" (XLM model)"),Eno=l(),Qg=a("li"),Hse=a("strong"),Cno=o("xlm-prophetnet"),wno=o(" \u2014 "),YP=a("a"),Ano=o("XLMProphetNetConfig"),Lno=o(" (XLM-ProphetNet model)"),yno=l(),Wg=a("li"),Use=a("strong"),xno=o("xlm-roberta"),$no=o(" \u2014 "),KP=a("a"),kno=o("XLMRobertaConfig"),Sno=o(" (XLM-RoBERTa model)"),Rno=l(),Hg=a("li"),Jse=a("strong"),Pno=o("xlm-roberta-xl"),Bno=o(" \u2014 "),ZP=a("a"),Nno=o("XLMRobertaXLConfig"),Ino=o(" (XLM-RoBERTa-XL model)"),qno=l(),Ug=a("li"),Yse=a("strong"),jno=o("xlnet"),Dno=o(" \u2014 "),eB=a("a"),Gno=o("XLNetConfig"),Ono=o(" (XLNet model)"),Vno=l(),Jg=a("li"),Kse=a("strong"),Xno=o("yolos"),zno=o(" \u2014 "),oB=a("a"),Qno=o("YolosConfig"),Wno=o(" (YOLOS model)"),Hno=l(),Yg=a("li"),Zse=a("strong"),Uno=o("yoso"),Jno=o(" \u2014 "),rB=a("a"),Yno=o("YosoConfig"),Kno=o(" (YOSO model)"),Zno=l(),F(Kg.$$.fragment),eso=l(),Zg=a("div"),F(uy.$$.fragment),oso=l(),ele=a("p"),rso=o("Register a new configuration for this class."),TXe=l(),qi=a("h2"),eh=a("a"),ole=a("span"),F(py.$$.fragment),tso=l(),rle=a("span"),aso=o("AutoTokenizer"),MXe=l(),Lo=a("div"),F(_y.$$.fragment),nso=l(),by=a("p"),sso=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),tB=a("a"),lso=o("AutoTokenizer.from_pretrained()"),iso=o(" class method."),dso=l(),vy=a("p"),cso=o("This class cannot be instantiated directly using "),tle=a("code"),mso=o("__init__()"),fso=o(" (throws an error)."),gso=l(),yr=a("div"),F(Fy.$$.fragment),hso=l(),ale=a("p"),uso=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),pso=l(),Pa=a("p"),_so=o("The tokenizer class to instantiate is selected based on the "),nle=a("code"),bso=o("model_type"),vso=o(` property of the config object (either
passed as an argument or loaded from `),sle=a("code"),Fso=o("pretrained_model_name_or_path"),Tso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lle=a("code"),Mso=o("pretrained_model_name_or_path"),Eso=o(":"),Cso=l(),k=a("ul"),jn=a("li"),ile=a("strong"),wso=o("albert"),Aso=o(" \u2014 "),aB=a("a"),Lso=o("AlbertTokenizer"),yso=o(" or "),nB=a("a"),xso=o("AlbertTokenizerFast"),$so=o(" (ALBERT model)"),kso=l(),Dn=a("li"),dle=a("strong"),Sso=o("bart"),Rso=o(" \u2014 "),sB=a("a"),Pso=o("BartTokenizer"),Bso=o(" or "),lB=a("a"),Nso=o("BartTokenizerFast"),Iso=o(" (BART model)"),qso=l(),Gn=a("li"),cle=a("strong"),jso=o("barthez"),Dso=o(" \u2014 "),iB=a("a"),Gso=o("BarthezTokenizer"),Oso=o(" or "),dB=a("a"),Vso=o("BarthezTokenizerFast"),Xso=o(" (BARThez model)"),zso=l(),oh=a("li"),mle=a("strong"),Qso=o("bartpho"),Wso=o(" \u2014 "),cB=a("a"),Hso=o("BartphoTokenizer"),Uso=o(" (BARTpho model)"),Jso=l(),On=a("li"),fle=a("strong"),Yso=o("bert"),Kso=o(" \u2014 "),mB=a("a"),Zso=o("BertTokenizer"),elo=o(" or "),fB=a("a"),olo=o("BertTokenizerFast"),rlo=o(" (BERT model)"),tlo=l(),rh=a("li"),gle=a("strong"),alo=o("bert-generation"),nlo=o(" \u2014 "),gB=a("a"),slo=o("BertGenerationTokenizer"),llo=o(" (Bert Generation model)"),ilo=l(),th=a("li"),hle=a("strong"),dlo=o("bert-japanese"),clo=o(" \u2014 "),hB=a("a"),mlo=o("BertJapaneseTokenizer"),flo=o(" (BertJapanese model)"),glo=l(),ah=a("li"),ule=a("strong"),hlo=o("bertweet"),ulo=o(" \u2014 "),uB=a("a"),plo=o("BertweetTokenizer"),_lo=o(" (BERTweet model)"),blo=l(),Vn=a("li"),ple=a("strong"),vlo=o("big_bird"),Flo=o(" \u2014 "),pB=a("a"),Tlo=o("BigBirdTokenizer"),Mlo=o(" or "),_B=a("a"),Elo=o("BigBirdTokenizerFast"),Clo=o(" (BigBird model)"),wlo=l(),Xn=a("li"),_le=a("strong"),Alo=o("bigbird_pegasus"),Llo=o(" \u2014 "),bB=a("a"),ylo=o("PegasusTokenizer"),xlo=o(" or "),vB=a("a"),$lo=o("PegasusTokenizerFast"),klo=o(" (BigBird-Pegasus model)"),Slo=l(),zn=a("li"),ble=a("strong"),Rlo=o("blenderbot"),Plo=o(" \u2014 "),FB=a("a"),Blo=o("BlenderbotTokenizer"),Nlo=o(" or "),TB=a("a"),Ilo=o("BlenderbotTokenizerFast"),qlo=o(" (Blenderbot model)"),jlo=l(),nh=a("li"),vle=a("strong"),Dlo=o("blenderbot-small"),Glo=o(" \u2014 "),MB=a("a"),Olo=o("BlenderbotSmallTokenizer"),Vlo=o(" (BlenderbotSmall model)"),Xlo=l(),sh=a("li"),Fle=a("strong"),zlo=o("bloom"),Qlo=o(" \u2014 "),EB=a("a"),Wlo=o("BloomTokenizerFast"),Hlo=o(" (BLOOM model)"),Ulo=l(),lh=a("li"),Tle=a("strong"),Jlo=o("byt5"),Ylo=o(" \u2014 "),CB=a("a"),Klo=o("ByT5Tokenizer"),Zlo=o(" (ByT5 model)"),eio=l(),Qn=a("li"),Mle=a("strong"),oio=o("camembert"),rio=o(" \u2014 "),wB=a("a"),tio=o("CamembertTokenizer"),aio=o(" or "),AB=a("a"),nio=o("CamembertTokenizerFast"),sio=o(" (CamemBERT model)"),lio=l(),ih=a("li"),Ele=a("strong"),iio=o("canine"),dio=o(" \u2014 "),LB=a("a"),cio=o("CanineTokenizer"),mio=o(" (CANINE model)"),fio=l(),Wn=a("li"),Cle=a("strong"),gio=o("clip"),hio=o(" \u2014 "),yB=a("a"),uio=o("CLIPTokenizer"),pio=o(" or "),xB=a("a"),_io=o("CLIPTokenizerFast"),bio=o(" (CLIP model)"),vio=l(),Hn=a("li"),wle=a("strong"),Fio=o("codegen"),Tio=o(" \u2014 "),$B=a("a"),Mio=o("CodeGenTokenizer"),Eio=o(" or "),kB=a("a"),Cio=o("CodeGenTokenizerFast"),wio=o(" (CodeGen model)"),Aio=l(),Un=a("li"),Ale=a("strong"),Lio=o("convbert"),yio=o(" \u2014 "),SB=a("a"),xio=o("ConvBertTokenizer"),$io=o(" or "),RB=a("a"),kio=o("ConvBertTokenizerFast"),Sio=o(" (ConvBERT model)"),Rio=l(),Jn=a("li"),Lle=a("strong"),Pio=o("cpm"),Bio=o(" \u2014 "),PB=a("a"),Nio=o("CpmTokenizer"),Iio=o(" or "),BB=a("a"),qio=o("CpmTokenizerFast"),jio=o(" (CPM model)"),Dio=l(),dh=a("li"),yle=a("strong"),Gio=o("ctrl"),Oio=o(" \u2014 "),NB=a("a"),Vio=o("CTRLTokenizer"),Xio=o(" (CTRL model)"),zio=l(),Yn=a("li"),xle=a("strong"),Qio=o("data2vec-text"),Wio=o(" \u2014 "),IB=a("a"),Hio=o("RobertaTokenizer"),Uio=o(" or "),qB=a("a"),Jio=o("RobertaTokenizerFast"),Yio=o(" (Data2VecText model)"),Kio=l(),Kn=a("li"),$le=a("strong"),Zio=o("deberta"),edo=o(" \u2014 "),jB=a("a"),odo=o("DebertaTokenizer"),rdo=o(" or "),DB=a("a"),tdo=o("DebertaTokenizerFast"),ado=o(" (DeBERTa model)"),ndo=l(),Zn=a("li"),kle=a("strong"),sdo=o("deberta-v2"),ldo=o(" \u2014 "),GB=a("a"),ido=o("DebertaV2Tokenizer"),ddo=o(" or "),OB=a("a"),cdo=o("DebertaV2TokenizerFast"),mdo=o(" (DeBERTa-v2 model)"),fdo=l(),es=a("li"),Sle=a("strong"),gdo=o("distilbert"),hdo=o(" \u2014 "),VB=a("a"),udo=o("DistilBertTokenizer"),pdo=o(" or "),XB=a("a"),_do=o("DistilBertTokenizerFast"),bdo=o(" (DistilBERT model)"),vdo=l(),os=a("li"),Rle=a("strong"),Fdo=o("dpr"),Tdo=o(" \u2014 "),zB=a("a"),Mdo=o("DPRQuestionEncoderTokenizer"),Edo=o(" or "),QB=a("a"),Cdo=o("DPRQuestionEncoderTokenizerFast"),wdo=o(" (DPR model)"),Ado=l(),rs=a("li"),Ple=a("strong"),Ldo=o("electra"),ydo=o(" \u2014 "),WB=a("a"),xdo=o("ElectraTokenizer"),$do=o(" or "),HB=a("a"),kdo=o("ElectraTokenizerFast"),Sdo=o(" (ELECTRA model)"),Rdo=l(),ch=a("li"),Ble=a("strong"),Pdo=o("flaubert"),Bdo=o(" \u2014 "),UB=a("a"),Ndo=o("FlaubertTokenizer"),Ido=o(" (FlauBERT model)"),qdo=l(),ts=a("li"),Nle=a("strong"),jdo=o("fnet"),Ddo=o(" \u2014 "),JB=a("a"),Gdo=o("FNetTokenizer"),Odo=o(" or "),YB=a("a"),Vdo=o("FNetTokenizerFast"),Xdo=o(" (FNet model)"),zdo=l(),mh=a("li"),Ile=a("strong"),Qdo=o("fsmt"),Wdo=o(" \u2014 "),KB=a("a"),Hdo=o("FSMTTokenizer"),Udo=o(" (FairSeq Machine-Translation model)"),Jdo=l(),as=a("li"),qle=a("strong"),Ydo=o("funnel"),Kdo=o(" \u2014 "),ZB=a("a"),Zdo=o("FunnelTokenizer"),eco=o(" or "),eN=a("a"),oco=o("FunnelTokenizerFast"),rco=o(" (Funnel Transformer model)"),tco=l(),ns=a("li"),jle=a("strong"),aco=o("gpt2"),nco=o(" \u2014 "),oN=a("a"),sco=o("GPT2Tokenizer"),lco=o(" or "),rN=a("a"),ico=o("GPT2TokenizerFast"),dco=o(" (OpenAI GPT-2 model)"),cco=l(),ss=a("li"),Dle=a("strong"),mco=o("gpt_neo"),fco=o(" \u2014 "),tN=a("a"),gco=o("GPT2Tokenizer"),hco=o(" or "),aN=a("a"),uco=o("GPT2TokenizerFast"),pco=o(" (GPT Neo model)"),_co=l(),fh=a("li"),Gle=a("strong"),bco=o("gpt_neox"),vco=o(" \u2014 "),nN=a("a"),Fco=o("GPTNeoXTokenizerFast"),Tco=o(" (GPT NeoX model)"),Mco=l(),ls=a("li"),Ole=a("strong"),Eco=o("gptj"),Cco=o(" \u2014 "),sN=a("a"),wco=o("GPT2Tokenizer"),Aco=o(" or "),lN=a("a"),Lco=o("GPT2TokenizerFast"),yco=o(" (GPT-J model)"),xco=l(),is=a("li"),Vle=a("strong"),$co=o("groupvit"),kco=o(" \u2014 "),iN=a("a"),Sco=o("CLIPTokenizer"),Rco=o(" or "),dN=a("a"),Pco=o("CLIPTokenizerFast"),Bco=o(" (GroupViT model)"),Nco=l(),ds=a("li"),Xle=a("strong"),Ico=o("herbert"),qco=o(" \u2014 "),cN=a("a"),jco=o("HerbertTokenizer"),Dco=o(" or "),mN=a("a"),Gco=o("HerbertTokenizerFast"),Oco=o(" (HerBERT model)"),Vco=l(),gh=a("li"),zle=a("strong"),Xco=o("hubert"),zco=o(" \u2014 "),fN=a("a"),Qco=o("Wav2Vec2CTCTokenizer"),Wco=o(" (Hubert model)"),Hco=l(),cs=a("li"),Qle=a("strong"),Uco=o("ibert"),Jco=o(" \u2014 "),gN=a("a"),Yco=o("RobertaTokenizer"),Kco=o(" or "),hN=a("a"),Zco=o("RobertaTokenizerFast"),emo=o(" (I-BERT model)"),omo=l(),ms=a("li"),Wle=a("strong"),rmo=o("layoutlm"),tmo=o(" \u2014 "),uN=a("a"),amo=o("LayoutLMTokenizer"),nmo=o(" or "),pN=a("a"),smo=o("LayoutLMTokenizerFast"),lmo=o(" (LayoutLM model)"),imo=l(),fs=a("li"),Hle=a("strong"),dmo=o("layoutlmv2"),cmo=o(" \u2014 "),_N=a("a"),mmo=o("LayoutLMv2Tokenizer"),fmo=o(" or "),bN=a("a"),gmo=o("LayoutLMv2TokenizerFast"),hmo=o(" (LayoutLMv2 model)"),umo=l(),gs=a("li"),Ule=a("strong"),pmo=o("layoutlmv3"),_mo=o(" \u2014 "),vN=a("a"),bmo=o("LayoutLMv3Tokenizer"),vmo=o(" or "),FN=a("a"),Fmo=o("LayoutLMv3TokenizerFast"),Tmo=o(" (LayoutLMv3 model)"),Mmo=l(),hs=a("li"),Jle=a("strong"),Emo=o("layoutxlm"),Cmo=o(" \u2014 "),TN=a("a"),wmo=o("LayoutXLMTokenizer"),Amo=o(" or "),MN=a("a"),Lmo=o("LayoutXLMTokenizerFast"),ymo=o(" (LayoutXLM model)"),xmo=l(),us=a("li"),Yle=a("strong"),$mo=o("led"),kmo=o(" \u2014 "),EN=a("a"),Smo=o("LEDTokenizer"),Rmo=o(" or "),CN=a("a"),Pmo=o("LEDTokenizerFast"),Bmo=o(" (LED model)"),Nmo=l(),ps=a("li"),Kle=a("strong"),Imo=o("longformer"),qmo=o(" \u2014 "),wN=a("a"),jmo=o("LongformerTokenizer"),Dmo=o(" or "),AN=a("a"),Gmo=o("LongformerTokenizerFast"),Omo=o(" (Longformer model)"),Vmo=l(),_s=a("li"),Zle=a("strong"),Xmo=o("longt5"),zmo=o(" \u2014 "),LN=a("a"),Qmo=o("T5Tokenizer"),Wmo=o(" or "),yN=a("a"),Hmo=o("T5TokenizerFast"),Umo=o(" (LongT5 model)"),Jmo=l(),hh=a("li"),eie=a("strong"),Ymo=o("luke"),Kmo=o(" \u2014 "),xN=a("a"),Zmo=o("LukeTokenizer"),efo=o(" (LUKE model)"),ofo=l(),bs=a("li"),oie=a("strong"),rfo=o("lxmert"),tfo=o(" \u2014 "),$N=a("a"),afo=o("LxmertTokenizer"),nfo=o(" or "),kN=a("a"),sfo=o("LxmertTokenizerFast"),lfo=o(" (LXMERT model)"),ifo=l(),uh=a("li"),rie=a("strong"),dfo=o("m2m_100"),cfo=o(" \u2014 "),SN=a("a"),mfo=o("M2M100Tokenizer"),ffo=o(" (M2M100 model)"),gfo=l(),ph=a("li"),tie=a("strong"),hfo=o("marian"),ufo=o(" \u2014 "),RN=a("a"),pfo=o("MarianTokenizer"),_fo=o(" (Marian model)"),bfo=l(),vs=a("li"),aie=a("strong"),vfo=o("mbart"),Ffo=o(" \u2014 "),PN=a("a"),Tfo=o("MBartTokenizer"),Mfo=o(" or "),BN=a("a"),Efo=o("MBartTokenizerFast"),Cfo=o(" (mBART model)"),wfo=l(),Fs=a("li"),nie=a("strong"),Afo=o("mbart50"),Lfo=o(" \u2014 "),NN=a("a"),yfo=o("MBart50Tokenizer"),xfo=o(" or "),IN=a("a"),$fo=o("MBart50TokenizerFast"),kfo=o(" (mBART-50 model)"),Sfo=l(),Ts=a("li"),sie=a("strong"),Rfo=o("megatron-bert"),Pfo=o(" \u2014 "),qN=a("a"),Bfo=o("BertTokenizer"),Nfo=o(" or "),jN=a("a"),Ifo=o("BertTokenizerFast"),qfo=o(" (Megatron-BERT model)"),jfo=l(),_h=a("li"),lie=a("strong"),Dfo=o("mluke"),Gfo=o(" \u2014 "),DN=a("a"),Ofo=o("MLukeTokenizer"),Vfo=o(" (mLUKE model)"),Xfo=l(),Ms=a("li"),iie=a("strong"),zfo=o("mobilebert"),Qfo=o(" \u2014 "),GN=a("a"),Wfo=o("MobileBertTokenizer"),Hfo=o(" or "),ON=a("a"),Ufo=o("MobileBertTokenizerFast"),Jfo=o(" (MobileBERT model)"),Yfo=l(),Es=a("li"),die=a("strong"),Kfo=o("mpnet"),Zfo=o(" \u2014 "),VN=a("a"),ego=o("MPNetTokenizer"),ogo=o(" or "),XN=a("a"),rgo=o("MPNetTokenizerFast"),tgo=o(" (MPNet model)"),ago=l(),Cs=a("li"),cie=a("strong"),ngo=o("mt5"),sgo=o(" \u2014 "),zN=a("a"),lgo=o("MT5Tokenizer"),igo=o(" or "),QN=a("a"),dgo=o("MT5TokenizerFast"),cgo=o(" (MT5 model)"),mgo=l(),ws=a("li"),mie=a("strong"),fgo=o("mvp"),ggo=o(" \u2014 "),WN=a("a"),hgo=o("MvpTokenizer"),ugo=o(" or "),HN=a("a"),pgo=o("MvpTokenizerFast"),_go=o(" (MVP model)"),bgo=l(),As=a("li"),fie=a("strong"),vgo=o("nezha"),Fgo=o(" \u2014 "),UN=a("a"),Tgo=o("BertTokenizer"),Mgo=o(" or "),JN=a("a"),Ego=o("BertTokenizerFast"),Cgo=o(" (Nezha model)"),wgo=l(),Ls=a("li"),gie=a("strong"),Ago=o("nllb"),Lgo=o(" \u2014 "),YN=a("a"),ygo=o("NllbTokenizer"),xgo=o(" or "),KN=a("a"),$go=o("NllbTokenizerFast"),kgo=o(" (NLLB model)"),Sgo=l(),ys=a("li"),hie=a("strong"),Rgo=o("nystromformer"),Pgo=o(" \u2014 "),ZN=a("a"),Bgo=o("AlbertTokenizer"),Ngo=o(" or "),eI=a("a"),Igo=o("AlbertTokenizerFast"),qgo=o(" (Nystr\xF6mformer model)"),jgo=l(),xs=a("li"),uie=a("strong"),Dgo=o("openai-gpt"),Ggo=o(" \u2014 "),oI=a("a"),Ogo=o("OpenAIGPTTokenizer"),Vgo=o(" or "),rI=a("a"),Xgo=o("OpenAIGPTTokenizerFast"),zgo=o(" (OpenAI GPT model)"),Qgo=l(),bh=a("li"),pie=a("strong"),Wgo=o("opt"),Hgo=o(" \u2014 "),tI=a("a"),Ugo=o("GPT2Tokenizer"),Jgo=o(" (OPT model)"),Ygo=l(),$s=a("li"),_ie=a("strong"),Kgo=o("pegasus"),Zgo=o(" \u2014 "),aI=a("a"),eho=o("PegasusTokenizer"),oho=o(" or "),nI=a("a"),rho=o("PegasusTokenizerFast"),tho=o(" (Pegasus model)"),aho=l(),vh=a("li"),bie=a("strong"),nho=o("perceiver"),sho=o(" \u2014 "),sI=a("a"),lho=o("PerceiverTokenizer"),iho=o(" (Perceiver model)"),dho=l(),Fh=a("li"),vie=a("strong"),cho=o("phobert"),mho=o(" \u2014 "),lI=a("a"),fho=o("PhobertTokenizer"),gho=o(" (PhoBERT model)"),hho=l(),Th=a("li"),Fie=a("strong"),uho=o("plbart"),pho=o(" \u2014 "),iI=a("a"),_ho=o("PLBartTokenizer"),bho=o(" (PLBart model)"),vho=l(),Mh=a("li"),Tie=a("strong"),Fho=o("prophetnet"),Tho=o(" \u2014 "),dI=a("a"),Mho=o("ProphetNetTokenizer"),Eho=o(" (ProphetNet model)"),Cho=l(),ks=a("li"),Mie=a("strong"),who=o("qdqbert"),Aho=o(" \u2014 "),cI=a("a"),Lho=o("BertTokenizer"),yho=o(" or "),mI=a("a"),xho=o("BertTokenizerFast"),$ho=o(" (QDQBert model)"),kho=l(),Eh=a("li"),Eie=a("strong"),Sho=o("rag"),Rho=o(" \u2014 "),fI=a("a"),Pho=o("RagTokenizer"),Bho=o(" (RAG model)"),Nho=l(),Ss=a("li"),Cie=a("strong"),Iho=o("realm"),qho=o(" \u2014 "),gI=a("a"),jho=o("RealmTokenizer"),Dho=o(" or "),hI=a("a"),Gho=o("RealmTokenizerFast"),Oho=o(" (REALM model)"),Vho=l(),Rs=a("li"),wie=a("strong"),Xho=o("reformer"),zho=o(" \u2014 "),uI=a("a"),Qho=o("ReformerTokenizer"),Who=o(" or "),pI=a("a"),Hho=o("ReformerTokenizerFast"),Uho=o(" (Reformer model)"),Jho=l(),Ps=a("li"),Aie=a("strong"),Yho=o("rembert"),Kho=o(" \u2014 "),_I=a("a"),Zho=o("RemBertTokenizer"),euo=o(" or "),bI=a("a"),ouo=o("RemBertTokenizerFast"),ruo=o(" (RemBERT model)"),tuo=l(),Bs=a("li"),Lie=a("strong"),auo=o("retribert"),nuo=o(" \u2014 "),vI=a("a"),suo=o("RetriBertTokenizer"),luo=o(" or "),FI=a("a"),iuo=o("RetriBertTokenizerFast"),duo=o(" (RetriBERT model)"),cuo=l(),Ns=a("li"),yie=a("strong"),muo=o("roberta"),fuo=o(" \u2014 "),TI=a("a"),guo=o("RobertaTokenizer"),huo=o(" or "),MI=a("a"),uuo=o("RobertaTokenizerFast"),puo=o(" (RoBERTa model)"),_uo=l(),Is=a("li"),xie=a("strong"),buo=o("roformer"),vuo=o(" \u2014 "),EI=a("a"),Fuo=o("RoFormerTokenizer"),Tuo=o(" or "),CI=a("a"),Muo=o("RoFormerTokenizerFast"),Euo=o(" (RoFormer model)"),Cuo=l(),Ch=a("li"),$ie=a("strong"),wuo=o("speech_to_text"),Auo=o(" \u2014 "),wI=a("a"),Luo=o("Speech2TextTokenizer"),yuo=o(" (Speech2Text model)"),xuo=l(),wh=a("li"),kie=a("strong"),$uo=o("speech_to_text_2"),kuo=o(" \u2014 "),AI=a("a"),Suo=o("Speech2Text2Tokenizer"),Ruo=o(" (Speech2Text2 model)"),Puo=l(),qs=a("li"),Sie=a("strong"),Buo=o("splinter"),Nuo=o(" \u2014 "),LI=a("a"),Iuo=o("SplinterTokenizer"),quo=o(" or "),yI=a("a"),juo=o("SplinterTokenizerFast"),Duo=o(" (Splinter model)"),Guo=l(),js=a("li"),Rie=a("strong"),Ouo=o("squeezebert"),Vuo=o(" \u2014 "),xI=a("a"),Xuo=o("SqueezeBertTokenizer"),zuo=o(" or "),$I=a("a"),Quo=o("SqueezeBertTokenizerFast"),Wuo=o(" (SqueezeBERT model)"),Huo=l(),Ds=a("li"),Pie=a("strong"),Uuo=o("t5"),Juo=o(" \u2014 "),kI=a("a"),Yuo=o("T5Tokenizer"),Kuo=o(" or "),SI=a("a"),Zuo=o("T5TokenizerFast"),epo=o(" (T5 model)"),opo=l(),Ah=a("li"),Bie=a("strong"),rpo=o("tapas"),tpo=o(" \u2014 "),RI=a("a"),apo=o("TapasTokenizer"),npo=o(" (TAPAS model)"),spo=l(),Lh=a("li"),Nie=a("strong"),lpo=o("tapex"),ipo=o(" \u2014 "),PI=a("a"),dpo=o("TapexTokenizer"),cpo=o(" (TAPEX model)"),mpo=l(),yh=a("li"),Iie=a("strong"),fpo=o("transfo-xl"),gpo=o(" \u2014 "),BI=a("a"),hpo=o("TransfoXLTokenizer"),upo=o(" (Transformer-XL model)"),ppo=l(),Gs=a("li"),qie=a("strong"),_po=o("vilt"),bpo=o(" \u2014 "),NI=a("a"),vpo=o("BertTokenizer"),Fpo=o(" or "),II=a("a"),Tpo=o("BertTokenizerFast"),Mpo=o(" (ViLT model)"),Epo=l(),Os=a("li"),jie=a("strong"),Cpo=o("visual_bert"),wpo=o(" \u2014 "),qI=a("a"),Apo=o("BertTokenizer"),Lpo=o(" or "),jI=a("a"),ypo=o("BertTokenizerFast"),xpo=o(" (VisualBERT model)"),$po=l(),xh=a("li"),Die=a("strong"),kpo=o("wav2vec2"),Spo=o(" \u2014 "),DI=a("a"),Rpo=o("Wav2Vec2CTCTokenizer"),Ppo=o(" (Wav2Vec2 model)"),Bpo=l(),$h=a("li"),Gie=a("strong"),Npo=o("wav2vec2-conformer"),Ipo=o(" \u2014 "),GI=a("a"),qpo=o("Wav2Vec2CTCTokenizer"),jpo=o(" (Wav2Vec2-Conformer model)"),Dpo=l(),kh=a("li"),Oie=a("strong"),Gpo=o("wav2vec2_phoneme"),Opo=o(" \u2014 "),OI=a("a"),Vpo=o("Wav2Vec2PhonemeCTCTokenizer"),Xpo=o(" (Wav2Vec2Phoneme model)"),zpo=l(),Vs=a("li"),Vie=a("strong"),Qpo=o("xglm"),Wpo=o(" \u2014 "),VI=a("a"),Hpo=o("XGLMTokenizer"),Upo=o(" or "),XI=a("a"),Jpo=o("XGLMTokenizerFast"),Ypo=o(" (XGLM model)"),Kpo=l(),Sh=a("li"),Xie=a("strong"),Zpo=o("xlm"),e_o=o(" \u2014 "),zI=a("a"),o_o=o("XLMTokenizer"),r_o=o(" (XLM model)"),t_o=l(),Rh=a("li"),zie=a("strong"),a_o=o("xlm-prophetnet"),n_o=o(" \u2014 "),QI=a("a"),s_o=o("XLMProphetNetTokenizer"),l_o=o(" (XLM-ProphetNet model)"),i_o=l(),Xs=a("li"),Qie=a("strong"),d_o=o("xlm-roberta"),c_o=o(" \u2014 "),WI=a("a"),m_o=o("XLMRobertaTokenizer"),f_o=o(" or "),HI=a("a"),g_o=o("XLMRobertaTokenizerFast"),h_o=o(" (XLM-RoBERTa model)"),u_o=l(),zs=a("li"),Wie=a("strong"),p_o=o("xlm-roberta-xl"),__o=o(" \u2014 "),UI=a("a"),b_o=o("RobertaTokenizer"),v_o=o(" or "),JI=a("a"),F_o=o("RobertaTokenizerFast"),T_o=o(" (XLM-RoBERTa-XL model)"),M_o=l(),Qs=a("li"),Hie=a("strong"),E_o=o("xlnet"),C_o=o(" \u2014 "),YI=a("a"),w_o=o("XLNetTokenizer"),A_o=o(" or "),KI=a("a"),L_o=o("XLNetTokenizerFast"),y_o=o(" (XLNet model)"),x_o=l(),Ws=a("li"),Uie=a("strong"),$_o=o("yoso"),k_o=o(" \u2014 "),ZI=a("a"),S_o=o("AlbertTokenizer"),R_o=o(" or "),eq=a("a"),P_o=o("AlbertTokenizerFast"),B_o=o(" (YOSO model)"),N_o=l(),F(Ph.$$.fragment),I_o=l(),Bh=a("div"),F(Ty.$$.fragment),q_o=l(),Jie=a("p"),j_o=o("Register a new tokenizer in this mapping."),EXe=l(),ji=a("h2"),Nh=a("a"),Yie=a("span"),F(My.$$.fragment),D_o=l(),Kie=a("span"),G_o=o("AutoFeatureExtractor"),CXe=l(),yo=a("div"),F(Ey.$$.fragment),O_o=l(),Cy=a("p"),V_o=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),oq=a("a"),X_o=o("AutoFeatureExtractor.from_pretrained()"),z_o=o(" class method."),Q_o=l(),wy=a("p"),W_o=o("This class cannot be instantiated directly using "),Zie=a("code"),H_o=o("__init__()"),U_o=o(" (throws an error)."),J_o=l(),Ue=a("div"),F(Ay.$$.fragment),Y_o=l(),ede=a("p"),K_o=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Z_o=l(),Ba=a("p"),e2o=o("The feature extractor class to instantiate is selected based on the "),ode=a("code"),o2o=o("model_type"),r2o=o(` property of the config object
(either passed as an argument or loaded from `),rde=a("code"),t2o=o("pretrained_model_name_or_path"),a2o=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),tde=a("code"),n2o=o("pretrained_model_name_or_path"),s2o=o(":"),l2o=l(),Y=a("ul"),Ih=a("li"),ade=a("strong"),i2o=o("beit"),d2o=o(" \u2014 "),rq=a("a"),c2o=o("BeitFeatureExtractor"),m2o=o(" (BEiT model)"),f2o=l(),qh=a("li"),nde=a("strong"),g2o=o("clip"),h2o=o(" \u2014 "),tq=a("a"),u2o=o("CLIPFeatureExtractor"),p2o=o(" (CLIP model)"),_2o=l(),jh=a("li"),sde=a("strong"),b2o=o("convnext"),v2o=o(" \u2014 "),aq=a("a"),F2o=o("ConvNextFeatureExtractor"),T2o=o(" (ConvNeXT model)"),M2o=l(),Dh=a("li"),lde=a("strong"),E2o=o("cvt"),C2o=o(" \u2014 "),nq=a("a"),w2o=o("ConvNextFeatureExtractor"),A2o=o(" (CvT model)"),L2o=l(),Gh=a("li"),ide=a("strong"),y2o=o("data2vec-audio"),x2o=o(" \u2014 "),sq=a("a"),$2o=o("Wav2Vec2FeatureExtractor"),k2o=o(" (Data2VecAudio model)"),S2o=l(),Oh=a("li"),dde=a("strong"),R2o=o("data2vec-vision"),P2o=o(" \u2014 "),lq=a("a"),B2o=o("BeitFeatureExtractor"),N2o=o(" (Data2VecVision model)"),I2o=l(),Vh=a("li"),cde=a("strong"),q2o=o("deit"),j2o=o(" \u2014 "),iq=a("a"),D2o=o("DeiTFeatureExtractor"),G2o=o(" (DeiT model)"),O2o=l(),Xh=a("li"),mde=a("strong"),V2o=o("detr"),X2o=o(" \u2014 "),dq=a("a"),z2o=o("DetrFeatureExtractor"),Q2o=o(" (DETR model)"),W2o=l(),zh=a("li"),fde=a("strong"),H2o=o("dpt"),U2o=o(" \u2014 "),cq=a("a"),J2o=o("DPTFeatureExtractor"),Y2o=o(" (DPT model)"),K2o=l(),Qh=a("li"),gde=a("strong"),Z2o=o("flava"),ebo=o(" \u2014 "),mq=a("a"),obo=o("FlavaFeatureExtractor"),rbo=o(" (FLAVA model)"),tbo=l(),Wh=a("li"),hde=a("strong"),abo=o("glpn"),nbo=o(" \u2014 "),fq=a("a"),sbo=o("GLPNFeatureExtractor"),lbo=o(" (GLPN model)"),ibo=l(),Hh=a("li"),ude=a("strong"),dbo=o("groupvit"),cbo=o(" \u2014 "),gq=a("a"),mbo=o("CLIPFeatureExtractor"),fbo=o(" (GroupViT model)"),gbo=l(),Uh=a("li"),pde=a("strong"),hbo=o("hubert"),ubo=o(" \u2014 "),hq=a("a"),pbo=o("Wav2Vec2FeatureExtractor"),_bo=o(" (Hubert model)"),bbo=l(),Jh=a("li"),_de=a("strong"),vbo=o("imagegpt"),Fbo=o(" \u2014 "),uq=a("a"),Tbo=o("ImageGPTFeatureExtractor"),Mbo=o(" (ImageGPT model)"),Ebo=l(),Yh=a("li"),bde=a("strong"),Cbo=o("layoutlmv2"),wbo=o(" \u2014 "),pq=a("a"),Abo=o("LayoutLMv2FeatureExtractor"),Lbo=o(" (LayoutLMv2 model)"),ybo=l(),Kh=a("li"),vde=a("strong"),xbo=o("layoutlmv3"),$bo=o(" \u2014 "),_q=a("a"),kbo=o("LayoutLMv3FeatureExtractor"),Sbo=o(" (LayoutLMv3 model)"),Rbo=l(),Zh=a("li"),Fde=a("strong"),Pbo=o("levit"),Bbo=o(" \u2014 "),bq=a("a"),Nbo=o("LevitFeatureExtractor"),Ibo=o(" (LeViT model)"),qbo=l(),eu=a("li"),Tde=a("strong"),jbo=o("maskformer"),Dbo=o(" \u2014 "),vq=a("a"),Gbo=o("MaskFormerFeatureExtractor"),Obo=o(" (MaskFormer model)"),Vbo=l(),ou=a("li"),Mde=a("strong"),Xbo=o("mctct"),zbo=o(" \u2014 "),Fq=a("a"),Qbo=o("MCTCTFeatureExtractor"),Wbo=o(" (M-CTC-T model)"),Hbo=l(),ru=a("li"),Ede=a("strong"),Ubo=o("mobilevit"),Jbo=o(" \u2014 "),Tq=a("a"),Ybo=o("MobileViTFeatureExtractor"),Kbo=o(" (MobileViT model)"),Zbo=l(),tu=a("li"),Cde=a("strong"),evo=o("perceiver"),ovo=o(" \u2014 "),Mq=a("a"),rvo=o("PerceiverFeatureExtractor"),tvo=o(" (Perceiver model)"),avo=l(),au=a("li"),wde=a("strong"),nvo=o("poolformer"),svo=o(" \u2014 "),Eq=a("a"),lvo=o("PoolFormerFeatureExtractor"),ivo=o(" (PoolFormer model)"),dvo=l(),nu=a("li"),Ade=a("strong"),cvo=o("regnet"),mvo=o(" \u2014 "),Cq=a("a"),fvo=o("ConvNextFeatureExtractor"),gvo=o(" (RegNet model)"),hvo=l(),su=a("li"),Lde=a("strong"),uvo=o("resnet"),pvo=o(" \u2014 "),wq=a("a"),_vo=o("ConvNextFeatureExtractor"),bvo=o(" (ResNet model)"),vvo=l(),lu=a("li"),yde=a("strong"),Fvo=o("segformer"),Tvo=o(" \u2014 "),Aq=a("a"),Mvo=o("SegformerFeatureExtractor"),Evo=o(" (SegFormer model)"),Cvo=l(),iu=a("li"),xde=a("strong"),wvo=o("speech_to_text"),Avo=o(" \u2014 "),Lq=a("a"),Lvo=o("Speech2TextFeatureExtractor"),yvo=o(" (Speech2Text model)"),xvo=l(),du=a("li"),$de=a("strong"),$vo=o("swin"),kvo=o(" \u2014 "),yq=a("a"),Svo=o("ViTFeatureExtractor"),Rvo=o(" (Swin Transformer model)"),Pvo=l(),cu=a("li"),kde=a("strong"),Bvo=o("van"),Nvo=o(" \u2014 "),xq=a("a"),Ivo=o("ConvNextFeatureExtractor"),qvo=o(" (VAN model)"),jvo=l(),mu=a("li"),Sde=a("strong"),Dvo=o("vilt"),Gvo=o(" \u2014 "),$q=a("a"),Ovo=o("ViltFeatureExtractor"),Vvo=o(" (ViLT model)"),Xvo=l(),fu=a("li"),Rde=a("strong"),zvo=o("vit"),Qvo=o(" \u2014 "),kq=a("a"),Wvo=o("ViTFeatureExtractor"),Hvo=o(" (ViT model)"),Uvo=l(),gu=a("li"),Pde=a("strong"),Jvo=o("vit_mae"),Yvo=o(" \u2014 "),Sq=a("a"),Kvo=o("ViTFeatureExtractor"),Zvo=o(" (ViTMAE model)"),e1o=l(),hu=a("li"),Bde=a("strong"),o1o=o("wav2vec2"),r1o=o(" \u2014 "),Rq=a("a"),t1o=o("Wav2Vec2FeatureExtractor"),a1o=o(" (Wav2Vec2 model)"),n1o=l(),uu=a("li"),Nde=a("strong"),s1o=o("wav2vec2-conformer"),l1o=o(" \u2014 "),Pq=a("a"),i1o=o("Wav2Vec2FeatureExtractor"),d1o=o(" (Wav2Vec2-Conformer model)"),c1o=l(),pu=a("li"),Ide=a("strong"),m1o=o("yolos"),f1o=o(" \u2014 "),Bq=a("a"),g1o=o("YolosFeatureExtractor"),h1o=o(" (YOLOS model)"),u1o=l(),F(_u.$$.fragment),p1o=l(),F(bu.$$.fragment),_1o=l(),vu=a("div"),F(Ly.$$.fragment),b1o=l(),qde=a("p"),v1o=o("Register a new feature extractor for this class."),wXe=l(),Di=a("h2"),Fu=a("a"),jde=a("span"),F(yy.$$.fragment),F1o=l(),Dde=a("span"),T1o=o("AutoProcessor"),AXe=l(),xo=a("div"),F(xy.$$.fragment),M1o=l(),$y=a("p"),E1o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Nq=a("a"),C1o=o("AutoProcessor.from_pretrained()"),w1o=o(" class method."),A1o=l(),ky=a("p"),L1o=o("This class cannot be instantiated directly using "),Gde=a("code"),y1o=o("__init__()"),x1o=o(" (throws an error)."),$1o=l(),Je=a("div"),F(Sy.$$.fragment),k1o=l(),Ode=a("p"),S1o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),R1o=l(),Gi=a("p"),P1o=o("The processor class to instantiate is selected based on the "),Vde=a("code"),B1o=o("model_type"),N1o=o(` property of the config object (either
passed as an argument or loaded from `),Xde=a("code"),I1o=o("pretrained_model_name_or_path"),q1o=o(" if possible):"),j1o=l(),ue=a("ul"),Tu=a("li"),zde=a("strong"),D1o=o("clip"),G1o=o(" \u2014 "),Iq=a("a"),O1o=o("CLIPProcessor"),V1o=o(" (CLIP model)"),X1o=l(),Mu=a("li"),Qde=a("strong"),z1o=o("flava"),Q1o=o(" \u2014 "),Wde=a("code"),W1o=o("FLAVAProcessor"),H1o=o(" (FLAVA model)"),U1o=l(),Eu=a("li"),Hde=a("strong"),J1o=o("groupvit"),Y1o=o(" \u2014 "),qq=a("a"),K1o=o("CLIPProcessor"),Z1o=o(" (GroupViT model)"),eFo=l(),Cu=a("li"),Ude=a("strong"),oFo=o("layoutlmv2"),rFo=o(" \u2014 "),jq=a("a"),tFo=o("LayoutLMv2Processor"),aFo=o(" (LayoutLMv2 model)"),nFo=l(),wu=a("li"),Jde=a("strong"),sFo=o("layoutlmv3"),lFo=o(" \u2014 "),Dq=a("a"),iFo=o("LayoutLMv3Processor"),dFo=o(" (LayoutLMv3 model)"),cFo=l(),Au=a("li"),Yde=a("strong"),mFo=o("layoutxlm"),fFo=o(" \u2014 "),Gq=a("a"),gFo=o("LayoutXLMProcessor"),hFo=o(" (LayoutXLM model)"),uFo=l(),Lu=a("li"),Kde=a("strong"),pFo=o("sew"),_Fo=o(" \u2014 "),Oq=a("a"),bFo=o("Wav2Vec2Processor"),vFo=o(" (SEW model)"),FFo=l(),yu=a("li"),Zde=a("strong"),TFo=o("sew-d"),MFo=o(" \u2014 "),Vq=a("a"),EFo=o("Wav2Vec2Processor"),CFo=o(" (SEW-D model)"),wFo=l(),xu=a("li"),ece=a("strong"),AFo=o("speech_to_text"),LFo=o(" \u2014 "),Xq=a("a"),yFo=o("Speech2TextProcessor"),xFo=o(" (Speech2Text model)"),$Fo=l(),$u=a("li"),oce=a("strong"),kFo=o("speech_to_text_2"),SFo=o(" \u2014 "),zq=a("a"),RFo=o("Speech2Text2Processor"),PFo=o(" (Speech2Text2 model)"),BFo=l(),ku=a("li"),rce=a("strong"),NFo=o("trocr"),IFo=o(" \u2014 "),Qq=a("a"),qFo=o("TrOCRProcessor"),jFo=o(" (TrOCR model)"),DFo=l(),Su=a("li"),tce=a("strong"),GFo=o("unispeech"),OFo=o(" \u2014 "),Wq=a("a"),VFo=o("Wav2Vec2Processor"),XFo=o(" (UniSpeech model)"),zFo=l(),Ru=a("li"),ace=a("strong"),QFo=o("unispeech-sat"),WFo=o(" \u2014 "),Hq=a("a"),HFo=o("Wav2Vec2Processor"),UFo=o(" (UniSpeechSat model)"),JFo=l(),Pu=a("li"),nce=a("strong"),YFo=o("vilt"),KFo=o(" \u2014 "),Uq=a("a"),ZFo=o("ViltProcessor"),eTo=o(" (ViLT model)"),oTo=l(),Bu=a("li"),sce=a("strong"),rTo=o("vision-text-dual-encoder"),tTo=o(" \u2014 "),Jq=a("a"),aTo=o("VisionTextDualEncoderProcessor"),nTo=o(" (VisionTextDualEncoder model)"),sTo=l(),Nu=a("li"),lce=a("strong"),lTo=o("wav2vec2"),iTo=o(" \u2014 "),Yq=a("a"),dTo=o("Wav2Vec2Processor"),cTo=o(" (Wav2Vec2 model)"),mTo=l(),Iu=a("li"),ice=a("strong"),fTo=o("wav2vec2-conformer"),gTo=o(" \u2014 "),Kq=a("a"),hTo=o("Wav2Vec2Processor"),uTo=o(" (Wav2Vec2-Conformer model)"),pTo=l(),qu=a("li"),dce=a("strong"),_To=o("wavlm"),bTo=o(" \u2014 "),Zq=a("a"),vTo=o("Wav2Vec2Processor"),FTo=o(" (WavLM model)"),TTo=l(),F(ju.$$.fragment),MTo=l(),F(Du.$$.fragment),ETo=l(),Gu=a("div"),F(Ry.$$.fragment),CTo=l(),cce=a("p"),wTo=o("Register a new processor for this class."),LXe=l(),Oi=a("h2"),Ou=a("a"),mce=a("span"),F(Py.$$.fragment),ATo=l(),fce=a("span"),LTo=o("AutoModel"),yXe=l(),$o=a("div"),F(By.$$.fragment),yTo=l(),Vi=a("p"),xTo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ej=a("a"),$To=o("from_pretrained()"),kTo=o(" class method or the "),oj=a("a"),STo=o("from_config()"),RTo=o(` class
method.`),PTo=l(),Ny=a("p"),BTo=o("This class cannot be instantiated directly using "),gce=a("code"),NTo=o("__init__()"),ITo=o(" (throws an error)."),qTo=l(),it=a("div"),F(Iy.$$.fragment),jTo=l(),hce=a("p"),DTo=o("Instantiates one of the base model classes of the library from a configuration."),GTo=l(),Xi=a("p"),OTo=o(`Note:
Loading a model from its configuration file does `),uce=a("strong"),VTo=o("not"),XTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rj=a("a"),zTo=o("from_pretrained()"),QTo=o(" to load the model weights."),WTo=l(),F(Vu.$$.fragment),HTo=l(),Ye=a("div"),F(qy.$$.fragment),UTo=l(),pce=a("p"),JTo=o("Instantiate one of the base model classes of the library from a pretrained model."),YTo=l(),Na=a("p"),KTo=o("The model class to instantiate is selected based on the "),_ce=a("code"),ZTo=o("model_type"),eMo=o(` property of the config object (either
passed as an argument or loaded from `),bce=a("code"),oMo=o("pretrained_model_name_or_path"),rMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vce=a("code"),tMo=o("pretrained_model_name_or_path"),aMo=o(":"),nMo=l(),y=a("ul"),Xu=a("li"),Fce=a("strong"),sMo=o("albert"),lMo=o(" \u2014 "),tj=a("a"),iMo=o("AlbertModel"),dMo=o(" (ALBERT model)"),cMo=l(),zu=a("li"),Tce=a("strong"),mMo=o("bart"),fMo=o(" \u2014 "),aj=a("a"),gMo=o("BartModel"),hMo=o(" (BART model)"),uMo=l(),Qu=a("li"),Mce=a("strong"),pMo=o("beit"),_Mo=o(" \u2014 "),nj=a("a"),bMo=o("BeitModel"),vMo=o(" (BEiT model)"),FMo=l(),Wu=a("li"),Ece=a("strong"),TMo=o("bert"),MMo=o(" \u2014 "),sj=a("a"),EMo=o("BertModel"),CMo=o(" (BERT model)"),wMo=l(),Hu=a("li"),Cce=a("strong"),AMo=o("bert-generation"),LMo=o(" \u2014 "),lj=a("a"),yMo=o("BertGenerationEncoder"),xMo=o(" (Bert Generation model)"),$Mo=l(),Uu=a("li"),wce=a("strong"),kMo=o("big_bird"),SMo=o(" \u2014 "),ij=a("a"),RMo=o("BigBirdModel"),PMo=o(" (BigBird model)"),BMo=l(),Ju=a("li"),Ace=a("strong"),NMo=o("bigbird_pegasus"),IMo=o(" \u2014 "),dj=a("a"),qMo=o("BigBirdPegasusModel"),jMo=o(" (BigBird-Pegasus model)"),DMo=l(),Yu=a("li"),Lce=a("strong"),GMo=o("blenderbot"),OMo=o(" \u2014 "),cj=a("a"),VMo=o("BlenderbotModel"),XMo=o(" (Blenderbot model)"),zMo=l(),Ku=a("li"),yce=a("strong"),QMo=o("blenderbot-small"),WMo=o(" \u2014 "),mj=a("a"),HMo=o("BlenderbotSmallModel"),UMo=o(" (BlenderbotSmall model)"),JMo=l(),Zu=a("li"),xce=a("strong"),YMo=o("bloom"),KMo=o(" \u2014 "),fj=a("a"),ZMo=o("BloomModel"),e4o=o(" (BLOOM model)"),o4o=l(),ep=a("li"),$ce=a("strong"),r4o=o("camembert"),t4o=o(" \u2014 "),gj=a("a"),a4o=o("CamembertModel"),n4o=o(" (CamemBERT model)"),s4o=l(),op=a("li"),kce=a("strong"),l4o=o("canine"),i4o=o(" \u2014 "),hj=a("a"),d4o=o("CanineModel"),c4o=o(" (CANINE model)"),m4o=l(),rp=a("li"),Sce=a("strong"),f4o=o("clip"),g4o=o(" \u2014 "),uj=a("a"),h4o=o("CLIPModel"),u4o=o(" (CLIP model)"),p4o=l(),tp=a("li"),Rce=a("strong"),_4o=o("codegen"),b4o=o(" \u2014 "),pj=a("a"),v4o=o("CodeGenModel"),F4o=o(" (CodeGen model)"),T4o=l(),ap=a("li"),Pce=a("strong"),M4o=o("convbert"),E4o=o(" \u2014 "),_j=a("a"),C4o=o("ConvBertModel"),w4o=o(" (ConvBERT model)"),A4o=l(),np=a("li"),Bce=a("strong"),L4o=o("convnext"),y4o=o(" \u2014 "),bj=a("a"),x4o=o("ConvNextModel"),$4o=o(" (ConvNeXT model)"),k4o=l(),sp=a("li"),Nce=a("strong"),S4o=o("ctrl"),R4o=o(" \u2014 "),vj=a("a"),P4o=o("CTRLModel"),B4o=o(" (CTRL model)"),N4o=l(),lp=a("li"),Ice=a("strong"),I4o=o("cvt"),q4o=o(" \u2014 "),Fj=a("a"),j4o=o("CvtModel"),D4o=o(" (CvT model)"),G4o=l(),ip=a("li"),qce=a("strong"),O4o=o("data2vec-audio"),V4o=o(" \u2014 "),Tj=a("a"),X4o=o("Data2VecAudioModel"),z4o=o(" (Data2VecAudio model)"),Q4o=l(),dp=a("li"),jce=a("strong"),W4o=o("data2vec-text"),H4o=o(" \u2014 "),Mj=a("a"),U4o=o("Data2VecTextModel"),J4o=o(" (Data2VecText model)"),Y4o=l(),cp=a("li"),Dce=a("strong"),K4o=o("data2vec-vision"),Z4o=o(" \u2014 "),Ej=a("a"),eEo=o("Data2VecVisionModel"),oEo=o(" (Data2VecVision model)"),rEo=l(),mp=a("li"),Gce=a("strong"),tEo=o("deberta"),aEo=o(" \u2014 "),Cj=a("a"),nEo=o("DebertaModel"),sEo=o(" (DeBERTa model)"),lEo=l(),fp=a("li"),Oce=a("strong"),iEo=o("deberta-v2"),dEo=o(" \u2014 "),wj=a("a"),cEo=o("DebertaV2Model"),mEo=o(" (DeBERTa-v2 model)"),fEo=l(),gp=a("li"),Vce=a("strong"),gEo=o("decision_transformer"),hEo=o(" \u2014 "),Aj=a("a"),uEo=o("DecisionTransformerModel"),pEo=o(" (Decision Transformer model)"),_Eo=l(),hp=a("li"),Xce=a("strong"),bEo=o("deit"),vEo=o(" \u2014 "),Lj=a("a"),FEo=o("DeiTModel"),TEo=o(" (DeiT model)"),MEo=l(),up=a("li"),zce=a("strong"),EEo=o("detr"),CEo=o(" \u2014 "),yj=a("a"),wEo=o("DetrModel"),AEo=o(" (DETR model)"),LEo=l(),pp=a("li"),Qce=a("strong"),yEo=o("distilbert"),xEo=o(" \u2014 "),xj=a("a"),$Eo=o("DistilBertModel"),kEo=o(" (DistilBERT model)"),SEo=l(),_p=a("li"),Wce=a("strong"),REo=o("dpr"),PEo=o(" \u2014 "),$j=a("a"),BEo=o("DPRQuestionEncoder"),NEo=o(" (DPR model)"),IEo=l(),bp=a("li"),Hce=a("strong"),qEo=o("dpt"),jEo=o(" \u2014 "),kj=a("a"),DEo=o("DPTModel"),GEo=o(" (DPT model)"),OEo=l(),vp=a("li"),Uce=a("strong"),VEo=o("electra"),XEo=o(" \u2014 "),Sj=a("a"),zEo=o("ElectraModel"),QEo=o(" (ELECTRA model)"),WEo=l(),Fp=a("li"),Jce=a("strong"),HEo=o("flaubert"),UEo=o(" \u2014 "),Rj=a("a"),JEo=o("FlaubertModel"),YEo=o(" (FlauBERT model)"),KEo=l(),Tp=a("li"),Yce=a("strong"),ZEo=o("flava"),eCo=o(" \u2014 "),Pj=a("a"),oCo=o("FlavaModel"),rCo=o(" (FLAVA model)"),tCo=l(),Mp=a("li"),Kce=a("strong"),aCo=o("fnet"),nCo=o(" \u2014 "),Bj=a("a"),sCo=o("FNetModel"),lCo=o(" (FNet model)"),iCo=l(),Ep=a("li"),Zce=a("strong"),dCo=o("fsmt"),cCo=o(" \u2014 "),Nj=a("a"),mCo=o("FSMTModel"),fCo=o(" (FairSeq Machine-Translation model)"),gCo=l(),Hs=a("li"),eme=a("strong"),hCo=o("funnel"),uCo=o(" \u2014 "),Ij=a("a"),pCo=o("FunnelModel"),_Co=o(" or "),qj=a("a"),bCo=o("FunnelBaseModel"),vCo=o(" (Funnel Transformer model)"),FCo=l(),Cp=a("li"),ome=a("strong"),TCo=o("glpn"),MCo=o(" \u2014 "),jj=a("a"),ECo=o("GLPNModel"),CCo=o(" (GLPN model)"),wCo=l(),wp=a("li"),rme=a("strong"),ACo=o("gpt2"),LCo=o(" \u2014 "),Dj=a("a"),yCo=o("GPT2Model"),xCo=o(" (OpenAI GPT-2 model)"),$Co=l(),Ap=a("li"),tme=a("strong"),kCo=o("gpt_neo"),SCo=o(" \u2014 "),Gj=a("a"),RCo=o("GPTNeoModel"),PCo=o(" (GPT Neo model)"),BCo=l(),Lp=a("li"),ame=a("strong"),NCo=o("gpt_neox"),ICo=o(" \u2014 "),Oj=a("a"),qCo=o("GPTNeoXModel"),jCo=o(" (GPT NeoX model)"),DCo=l(),yp=a("li"),nme=a("strong"),GCo=o("gptj"),OCo=o(" \u2014 "),Vj=a("a"),VCo=o("GPTJModel"),XCo=o(" (GPT-J model)"),zCo=l(),xp=a("li"),sme=a("strong"),QCo=o("groupvit"),WCo=o(" \u2014 "),Xj=a("a"),HCo=o("GroupViTModel"),UCo=o(" (GroupViT model)"),JCo=l(),$p=a("li"),lme=a("strong"),YCo=o("hubert"),KCo=o(" \u2014 "),zj=a("a"),ZCo=o("HubertModel"),e3o=o(" (Hubert model)"),o3o=l(),kp=a("li"),ime=a("strong"),r3o=o("ibert"),t3o=o(" \u2014 "),Qj=a("a"),a3o=o("IBertModel"),n3o=o(" (I-BERT model)"),s3o=l(),Sp=a("li"),dme=a("strong"),l3o=o("imagegpt"),i3o=o(" \u2014 "),Wj=a("a"),d3o=o("ImageGPTModel"),c3o=o(" (ImageGPT model)"),m3o=l(),Rp=a("li"),cme=a("strong"),f3o=o("layoutlm"),g3o=o(" \u2014 "),Hj=a("a"),h3o=o("LayoutLMModel"),u3o=o(" (LayoutLM model)"),p3o=l(),Pp=a("li"),mme=a("strong"),_3o=o("layoutlmv2"),b3o=o(" \u2014 "),Uj=a("a"),v3o=o("LayoutLMv2Model"),F3o=o(" (LayoutLMv2 model)"),T3o=l(),Bp=a("li"),fme=a("strong"),M3o=o("layoutlmv3"),E3o=o(" \u2014 "),Jj=a("a"),C3o=o("LayoutLMv3Model"),w3o=o(" (LayoutLMv3 model)"),A3o=l(),Np=a("li"),gme=a("strong"),L3o=o("led"),y3o=o(" \u2014 "),Yj=a("a"),x3o=o("LEDModel"),$3o=o(" (LED model)"),k3o=l(),Ip=a("li"),hme=a("strong"),S3o=o("levit"),R3o=o(" \u2014 "),Kj=a("a"),P3o=o("LevitModel"),B3o=o(" (LeViT model)"),N3o=l(),qp=a("li"),ume=a("strong"),I3o=o("longformer"),q3o=o(" \u2014 "),Zj=a("a"),j3o=o("LongformerModel"),D3o=o(" (Longformer model)"),G3o=l(),jp=a("li"),pme=a("strong"),O3o=o("longt5"),V3o=o(" \u2014 "),eD=a("a"),X3o=o("LongT5Model"),z3o=o(" (LongT5 model)"),Q3o=l(),Dp=a("li"),_me=a("strong"),W3o=o("luke"),H3o=o(" \u2014 "),oD=a("a"),U3o=o("LukeModel"),J3o=o(" (LUKE model)"),Y3o=l(),Gp=a("li"),bme=a("strong"),K3o=o("lxmert"),Z3o=o(" \u2014 "),rD=a("a"),e5o=o("LxmertModel"),o5o=o(" (LXMERT model)"),r5o=l(),Op=a("li"),vme=a("strong"),t5o=o("m2m_100"),a5o=o(" \u2014 "),tD=a("a"),n5o=o("M2M100Model"),s5o=o(" (M2M100 model)"),l5o=l(),Vp=a("li"),Fme=a("strong"),i5o=o("marian"),d5o=o(" \u2014 "),aD=a("a"),c5o=o("MarianModel"),m5o=o(" (Marian model)"),f5o=l(),Xp=a("li"),Tme=a("strong"),g5o=o("maskformer"),h5o=o(" \u2014 "),nD=a("a"),u5o=o("MaskFormerModel"),p5o=o(" (MaskFormer model)"),_5o=l(),zp=a("li"),Mme=a("strong"),b5o=o("mbart"),v5o=o(" \u2014 "),sD=a("a"),F5o=o("MBartModel"),T5o=o(" (mBART model)"),M5o=l(),Qp=a("li"),Eme=a("strong"),E5o=o("mctct"),C5o=o(" \u2014 "),lD=a("a"),w5o=o("MCTCTModel"),A5o=o(" (M-CTC-T model)"),L5o=l(),Wp=a("li"),Cme=a("strong"),y5o=o("megatron-bert"),x5o=o(" \u2014 "),iD=a("a"),$5o=o("MegatronBertModel"),k5o=o(" (Megatron-BERT model)"),S5o=l(),Hp=a("li"),wme=a("strong"),R5o=o("mobilebert"),P5o=o(" \u2014 "),dD=a("a"),B5o=o("MobileBertModel"),N5o=o(" (MobileBERT model)"),I5o=l(),Up=a("li"),Ame=a("strong"),q5o=o("mobilevit"),j5o=o(" \u2014 "),cD=a("a"),D5o=o("MobileViTModel"),G5o=o(" (MobileViT model)"),O5o=l(),Jp=a("li"),Lme=a("strong"),V5o=o("mpnet"),X5o=o(" \u2014 "),mD=a("a"),z5o=o("MPNetModel"),Q5o=o(" (MPNet model)"),W5o=l(),Yp=a("li"),yme=a("strong"),H5o=o("mt5"),U5o=o(" \u2014 "),fD=a("a"),J5o=o("MT5Model"),Y5o=o(" (MT5 model)"),K5o=l(),Kp=a("li"),xme=a("strong"),Z5o=o("mvp"),e0o=o(" \u2014 "),gD=a("a"),o0o=o("MvpModel"),r0o=o(" (MVP model)"),t0o=l(),Zp=a("li"),$me=a("strong"),a0o=o("nezha"),n0o=o(" \u2014 "),hD=a("a"),s0o=o("NezhaModel"),l0o=o(" (Nezha model)"),i0o=l(),e_=a("li"),kme=a("strong"),d0o=o("nllb"),c0o=o(" \u2014 "),uD=a("a"),m0o=o("M2M100Model"),f0o=o(" (NLLB model)"),g0o=l(),o_=a("li"),Sme=a("strong"),h0o=o("nystromformer"),u0o=o(" \u2014 "),pD=a("a"),p0o=o("NystromformerModel"),_0o=o(" (Nystr\xF6mformer model)"),b0o=l(),r_=a("li"),Rme=a("strong"),v0o=o("openai-gpt"),F0o=o(" \u2014 "),_D=a("a"),T0o=o("OpenAIGPTModel"),M0o=o(" (OpenAI GPT model)"),E0o=l(),t_=a("li"),Pme=a("strong"),C0o=o("opt"),w0o=o(" \u2014 "),bD=a("a"),A0o=o("OPTModel"),L0o=o(" (OPT model)"),y0o=l(),a_=a("li"),Bme=a("strong"),x0o=o("pegasus"),$0o=o(" \u2014 "),vD=a("a"),k0o=o("PegasusModel"),S0o=o(" (Pegasus model)"),R0o=l(),n_=a("li"),Nme=a("strong"),P0o=o("perceiver"),B0o=o(" \u2014 "),FD=a("a"),N0o=o("PerceiverModel"),I0o=o(" (Perceiver model)"),q0o=l(),s_=a("li"),Ime=a("strong"),j0o=o("plbart"),D0o=o(" \u2014 "),TD=a("a"),G0o=o("PLBartModel"),O0o=o(" (PLBart model)"),V0o=l(),l_=a("li"),qme=a("strong"),X0o=o("poolformer"),z0o=o(" \u2014 "),MD=a("a"),Q0o=o("PoolFormerModel"),W0o=o(" (PoolFormer model)"),H0o=l(),i_=a("li"),jme=a("strong"),U0o=o("prophetnet"),J0o=o(" \u2014 "),ED=a("a"),Y0o=o("ProphetNetModel"),K0o=o(" (ProphetNet model)"),Z0o=l(),d_=a("li"),Dme=a("strong"),ewo=o("qdqbert"),owo=o(" \u2014 "),CD=a("a"),rwo=o("QDQBertModel"),two=o(" (QDQBert model)"),awo=l(),c_=a("li"),Gme=a("strong"),nwo=o("reformer"),swo=o(" \u2014 "),wD=a("a"),lwo=o("ReformerModel"),iwo=o(" (Reformer model)"),dwo=l(),m_=a("li"),Ome=a("strong"),cwo=o("regnet"),mwo=o(" \u2014 "),AD=a("a"),fwo=o("RegNetModel"),gwo=o(" (RegNet model)"),hwo=l(),f_=a("li"),Vme=a("strong"),uwo=o("rembert"),pwo=o(" \u2014 "),LD=a("a"),_wo=o("RemBertModel"),bwo=o(" (RemBERT model)"),vwo=l(),g_=a("li"),Xme=a("strong"),Fwo=o("resnet"),Two=o(" \u2014 "),yD=a("a"),Mwo=o("ResNetModel"),Ewo=o(" (ResNet model)"),Cwo=l(),h_=a("li"),zme=a("strong"),wwo=o("retribert"),Awo=o(" \u2014 "),xD=a("a"),Lwo=o("RetriBertModel"),ywo=o(" (RetriBERT model)"),xwo=l(),u_=a("li"),Qme=a("strong"),$wo=o("roberta"),kwo=o(" \u2014 "),$D=a("a"),Swo=o("RobertaModel"),Rwo=o(" (RoBERTa model)"),Pwo=l(),p_=a("li"),Wme=a("strong"),Bwo=o("roformer"),Nwo=o(" \u2014 "),kD=a("a"),Iwo=o("RoFormerModel"),qwo=o(" (RoFormer model)"),jwo=l(),__=a("li"),Hme=a("strong"),Dwo=o("segformer"),Gwo=o(" \u2014 "),SD=a("a"),Owo=o("SegformerModel"),Vwo=o(" (SegFormer model)"),Xwo=l(),b_=a("li"),Ume=a("strong"),zwo=o("sew"),Qwo=o(" \u2014 "),RD=a("a"),Wwo=o("SEWModel"),Hwo=o(" (SEW model)"),Uwo=l(),v_=a("li"),Jme=a("strong"),Jwo=o("sew-d"),Ywo=o(" \u2014 "),PD=a("a"),Kwo=o("SEWDModel"),Zwo=o(" (SEW-D model)"),eAo=l(),F_=a("li"),Yme=a("strong"),oAo=o("speech_to_text"),rAo=o(" \u2014 "),BD=a("a"),tAo=o("Speech2TextModel"),aAo=o(" (Speech2Text model)"),nAo=l(),T_=a("li"),Kme=a("strong"),sAo=o("splinter"),lAo=o(" \u2014 "),ND=a("a"),iAo=o("SplinterModel"),dAo=o(" (Splinter model)"),cAo=l(),M_=a("li"),Zme=a("strong"),mAo=o("squeezebert"),fAo=o(" \u2014 "),ID=a("a"),gAo=o("SqueezeBertModel"),hAo=o(" (SqueezeBERT model)"),uAo=l(),E_=a("li"),efe=a("strong"),pAo=o("swin"),_Ao=o(" \u2014 "),qD=a("a"),bAo=o("SwinModel"),vAo=o(" (Swin Transformer model)"),FAo=l(),C_=a("li"),ofe=a("strong"),TAo=o("t5"),MAo=o(" \u2014 "),jD=a("a"),EAo=o("T5Model"),CAo=o(" (T5 model)"),wAo=l(),w_=a("li"),rfe=a("strong"),AAo=o("tapas"),LAo=o(" \u2014 "),DD=a("a"),yAo=o("TapasModel"),xAo=o(" (TAPAS model)"),$Ao=l(),A_=a("li"),tfe=a("strong"),kAo=o("trajectory_transformer"),SAo=o(" \u2014 "),GD=a("a"),RAo=o("TrajectoryTransformerModel"),PAo=o(" (Trajectory Transformer model)"),BAo=l(),L_=a("li"),afe=a("strong"),NAo=o("transfo-xl"),IAo=o(" \u2014 "),OD=a("a"),qAo=o("TransfoXLModel"),jAo=o(" (Transformer-XL model)"),DAo=l(),y_=a("li"),nfe=a("strong"),GAo=o("unispeech"),OAo=o(" \u2014 "),VD=a("a"),VAo=o("UniSpeechModel"),XAo=o(" (UniSpeech model)"),zAo=l(),x_=a("li"),sfe=a("strong"),QAo=o("unispeech-sat"),WAo=o(" \u2014 "),XD=a("a"),HAo=o("UniSpeechSatModel"),UAo=o(" (UniSpeechSat model)"),JAo=l(),$_=a("li"),lfe=a("strong"),YAo=o("van"),KAo=o(" \u2014 "),zD=a("a"),ZAo=o("VanModel"),e6o=o(" (VAN model)"),o6o=l(),k_=a("li"),ife=a("strong"),r6o=o("vilt"),t6o=o(" \u2014 "),QD=a("a"),a6o=o("ViltModel"),n6o=o(" (ViLT model)"),s6o=l(),S_=a("li"),dfe=a("strong"),l6o=o("vision-text-dual-encoder"),i6o=o(" \u2014 "),WD=a("a"),d6o=o("VisionTextDualEncoderModel"),c6o=o(" (VisionTextDualEncoder model)"),m6o=l(),R_=a("li"),cfe=a("strong"),f6o=o("visual_bert"),g6o=o(" \u2014 "),HD=a("a"),h6o=o("VisualBertModel"),u6o=o(" (VisualBERT model)"),p6o=l(),P_=a("li"),mfe=a("strong"),_6o=o("vit"),b6o=o(" \u2014 "),UD=a("a"),v6o=o("ViTModel"),F6o=o(" (ViT model)"),T6o=l(),B_=a("li"),ffe=a("strong"),M6o=o("vit_mae"),E6o=o(" \u2014 "),JD=a("a"),C6o=o("ViTMAEModel"),w6o=o(" (ViTMAE model)"),A6o=l(),N_=a("li"),gfe=a("strong"),L6o=o("wav2vec2"),y6o=o(" \u2014 "),YD=a("a"),x6o=o("Wav2Vec2Model"),$6o=o(" (Wav2Vec2 model)"),k6o=l(),I_=a("li"),hfe=a("strong"),S6o=o("wav2vec2-conformer"),R6o=o(" \u2014 "),KD=a("a"),P6o=o("Wav2Vec2ConformerModel"),B6o=o(" (Wav2Vec2-Conformer model)"),N6o=l(),q_=a("li"),ufe=a("strong"),I6o=o("wavlm"),q6o=o(" \u2014 "),ZD=a("a"),j6o=o("WavLMModel"),D6o=o(" (WavLM model)"),G6o=l(),j_=a("li"),pfe=a("strong"),O6o=o("xglm"),V6o=o(" \u2014 "),eG=a("a"),X6o=o("XGLMModel"),z6o=o(" (XGLM model)"),Q6o=l(),D_=a("li"),_fe=a("strong"),W6o=o("xlm"),H6o=o(" \u2014 "),oG=a("a"),U6o=o("XLMModel"),J6o=o(" (XLM model)"),Y6o=l(),G_=a("li"),bfe=a("strong"),K6o=o("xlm-prophetnet"),Z6o=o(" \u2014 "),rG=a("a"),e7o=o("XLMProphetNetModel"),o7o=o(" (XLM-ProphetNet model)"),r7o=l(),O_=a("li"),vfe=a("strong"),t7o=o("xlm-roberta"),a7o=o(" \u2014 "),tG=a("a"),n7o=o("XLMRobertaModel"),s7o=o(" (XLM-RoBERTa model)"),l7o=l(),V_=a("li"),Ffe=a("strong"),i7o=o("xlm-roberta-xl"),d7o=o(" \u2014 "),aG=a("a"),c7o=o("XLMRobertaXLModel"),m7o=o(" (XLM-RoBERTa-XL model)"),f7o=l(),X_=a("li"),Tfe=a("strong"),g7o=o("xlnet"),h7o=o(" \u2014 "),nG=a("a"),u7o=o("XLNetModel"),p7o=o(" (XLNet model)"),_7o=l(),z_=a("li"),Mfe=a("strong"),b7o=o("yolos"),v7o=o(" \u2014 "),sG=a("a"),F7o=o("YolosModel"),T7o=o(" (YOLOS model)"),M7o=l(),Q_=a("li"),Efe=a("strong"),E7o=o("yoso"),C7o=o(" \u2014 "),lG=a("a"),w7o=o("YosoModel"),A7o=o(" (YOSO model)"),L7o=l(),W_=a("p"),y7o=o("The model is set in evaluation mode by default using "),Cfe=a("code"),x7o=o("model.eval()"),$7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wfe=a("code"),k7o=o("model.train()"),S7o=l(),F(H_.$$.fragment),xXe=l(),zi=a("h2"),U_=a("a"),Afe=a("span"),F(jy.$$.fragment),R7o=l(),Lfe=a("span"),P7o=o("AutoModelForPreTraining"),$Xe=l(),ko=a("div"),F(Dy.$$.fragment),B7o=l(),Qi=a("p"),N7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),iG=a("a"),I7o=o("from_pretrained()"),q7o=o(" class method or the "),dG=a("a"),j7o=o("from_config()"),D7o=o(` class
method.`),G7o=l(),Gy=a("p"),O7o=o("This class cannot be instantiated directly using "),yfe=a("code"),V7o=o("__init__()"),X7o=o(" (throws an error)."),z7o=l(),dt=a("div"),F(Oy.$$.fragment),Q7o=l(),xfe=a("p"),W7o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),H7o=l(),Wi=a("p"),U7o=o(`Note:
Loading a model from its configuration file does `),$fe=a("strong"),J7o=o("not"),Y7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cG=a("a"),K7o=o("from_pretrained()"),Z7o=o(" to load the model weights."),eLo=l(),F(J_.$$.fragment),oLo=l(),Ke=a("div"),F(Vy.$$.fragment),rLo=l(),kfe=a("p"),tLo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),aLo=l(),Ia=a("p"),nLo=o("The model class to instantiate is selected based on the "),Sfe=a("code"),sLo=o("model_type"),lLo=o(` property of the config object (either
passed as an argument or loaded from `),Rfe=a("code"),iLo=o("pretrained_model_name_or_path"),dLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pfe=a("code"),cLo=o("pretrained_model_name_or_path"),mLo=o(":"),fLo=l(),G=a("ul"),Y_=a("li"),Bfe=a("strong"),gLo=o("albert"),hLo=o(" \u2014 "),mG=a("a"),uLo=o("AlbertForPreTraining"),pLo=o(" (ALBERT model)"),_Lo=l(),K_=a("li"),Nfe=a("strong"),bLo=o("bart"),vLo=o(" \u2014 "),fG=a("a"),FLo=o("BartForConditionalGeneration"),TLo=o(" (BART model)"),MLo=l(),Z_=a("li"),Ife=a("strong"),ELo=o("bert"),CLo=o(" \u2014 "),gG=a("a"),wLo=o("BertForPreTraining"),ALo=o(" (BERT model)"),LLo=l(),e2=a("li"),qfe=a("strong"),yLo=o("big_bird"),xLo=o(" \u2014 "),hG=a("a"),$Lo=o("BigBirdForPreTraining"),kLo=o(" (BigBird model)"),SLo=l(),o2=a("li"),jfe=a("strong"),RLo=o("bloom"),PLo=o(" \u2014 "),uG=a("a"),BLo=o("BloomForCausalLM"),NLo=o(" (BLOOM model)"),ILo=l(),r2=a("li"),Dfe=a("strong"),qLo=o("camembert"),jLo=o(" \u2014 "),pG=a("a"),DLo=o("CamembertForMaskedLM"),GLo=o(" (CamemBERT model)"),OLo=l(),t2=a("li"),Gfe=a("strong"),VLo=o("ctrl"),XLo=o(" \u2014 "),_G=a("a"),zLo=o("CTRLLMHeadModel"),QLo=o(" (CTRL model)"),WLo=l(),a2=a("li"),Ofe=a("strong"),HLo=o("data2vec-text"),ULo=o(" \u2014 "),bG=a("a"),JLo=o("Data2VecTextForMaskedLM"),YLo=o(" (Data2VecText model)"),KLo=l(),n2=a("li"),Vfe=a("strong"),ZLo=o("deberta"),eyo=o(" \u2014 "),vG=a("a"),oyo=o("DebertaForMaskedLM"),ryo=o(" (DeBERTa model)"),tyo=l(),s2=a("li"),Xfe=a("strong"),ayo=o("deberta-v2"),nyo=o(" \u2014 "),FG=a("a"),syo=o("DebertaV2ForMaskedLM"),lyo=o(" (DeBERTa-v2 model)"),iyo=l(),l2=a("li"),zfe=a("strong"),dyo=o("distilbert"),cyo=o(" \u2014 "),TG=a("a"),myo=o("DistilBertForMaskedLM"),fyo=o(" (DistilBERT model)"),gyo=l(),i2=a("li"),Qfe=a("strong"),hyo=o("electra"),uyo=o(" \u2014 "),MG=a("a"),pyo=o("ElectraForPreTraining"),_yo=o(" (ELECTRA model)"),byo=l(),d2=a("li"),Wfe=a("strong"),vyo=o("flaubert"),Fyo=o(" \u2014 "),EG=a("a"),Tyo=o("FlaubertWithLMHeadModel"),Myo=o(" (FlauBERT model)"),Eyo=l(),c2=a("li"),Hfe=a("strong"),Cyo=o("flava"),wyo=o(" \u2014 "),CG=a("a"),Ayo=o("FlavaForPreTraining"),Lyo=o(" (FLAVA model)"),yyo=l(),m2=a("li"),Ufe=a("strong"),xyo=o("fnet"),$yo=o(" \u2014 "),wG=a("a"),kyo=o("FNetForPreTraining"),Syo=o(" (FNet model)"),Ryo=l(),f2=a("li"),Jfe=a("strong"),Pyo=o("fsmt"),Byo=o(" \u2014 "),AG=a("a"),Nyo=o("FSMTForConditionalGeneration"),Iyo=o(" (FairSeq Machine-Translation model)"),qyo=l(),g2=a("li"),Yfe=a("strong"),jyo=o("funnel"),Dyo=o(" \u2014 "),LG=a("a"),Gyo=o("FunnelForPreTraining"),Oyo=o(" (Funnel Transformer model)"),Vyo=l(),h2=a("li"),Kfe=a("strong"),Xyo=o("gpt2"),zyo=o(" \u2014 "),yG=a("a"),Qyo=o("GPT2LMHeadModel"),Wyo=o(" (OpenAI GPT-2 model)"),Hyo=l(),u2=a("li"),Zfe=a("strong"),Uyo=o("ibert"),Jyo=o(" \u2014 "),xG=a("a"),Yyo=o("IBertForMaskedLM"),Kyo=o(" (I-BERT model)"),Zyo=l(),p2=a("li"),ege=a("strong"),e8o=o("layoutlm"),o8o=o(" \u2014 "),$G=a("a"),r8o=o("LayoutLMForMaskedLM"),t8o=o(" (LayoutLM model)"),a8o=l(),_2=a("li"),oge=a("strong"),n8o=o("longformer"),s8o=o(" \u2014 "),kG=a("a"),l8o=o("LongformerForMaskedLM"),i8o=o(" (Longformer model)"),d8o=l(),b2=a("li"),rge=a("strong"),c8o=o("lxmert"),m8o=o(" \u2014 "),SG=a("a"),f8o=o("LxmertForPreTraining"),g8o=o(" (LXMERT model)"),h8o=l(),v2=a("li"),tge=a("strong"),u8o=o("megatron-bert"),p8o=o(" \u2014 "),RG=a("a"),_8o=o("MegatronBertForPreTraining"),b8o=o(" (Megatron-BERT model)"),v8o=l(),F2=a("li"),age=a("strong"),F8o=o("mobilebert"),T8o=o(" \u2014 "),PG=a("a"),M8o=o("MobileBertForPreTraining"),E8o=o(" (MobileBERT model)"),C8o=l(),T2=a("li"),nge=a("strong"),w8o=o("mpnet"),A8o=o(" \u2014 "),BG=a("a"),L8o=o("MPNetForMaskedLM"),y8o=o(" (MPNet model)"),x8o=l(),M2=a("li"),sge=a("strong"),$8o=o("mvp"),k8o=o(" \u2014 "),NG=a("a"),S8o=o("MvpForConditionalGeneration"),R8o=o(" (MVP model)"),P8o=l(),E2=a("li"),lge=a("strong"),B8o=o("nezha"),N8o=o(" \u2014 "),IG=a("a"),I8o=o("NezhaForPreTraining"),q8o=o(" (Nezha model)"),j8o=l(),C2=a("li"),ige=a("strong"),D8o=o("openai-gpt"),G8o=o(" \u2014 "),qG=a("a"),O8o=o("OpenAIGPTLMHeadModel"),V8o=o(" (OpenAI GPT model)"),X8o=l(),w2=a("li"),dge=a("strong"),z8o=o("retribert"),Q8o=o(" \u2014 "),jG=a("a"),W8o=o("RetriBertModel"),H8o=o(" (RetriBERT model)"),U8o=l(),A2=a("li"),cge=a("strong"),J8o=o("roberta"),Y8o=o(" \u2014 "),DG=a("a"),K8o=o("RobertaForMaskedLM"),Z8o=o(" (RoBERTa model)"),e9o=l(),L2=a("li"),mge=a("strong"),o9o=o("splinter"),r9o=o(" \u2014 "),GG=a("a"),t9o=o("SplinterForPreTraining"),a9o=o(" (Splinter model)"),n9o=l(),y2=a("li"),fge=a("strong"),s9o=o("squeezebert"),l9o=o(" \u2014 "),OG=a("a"),i9o=o("SqueezeBertForMaskedLM"),d9o=o(" (SqueezeBERT model)"),c9o=l(),x2=a("li"),gge=a("strong"),m9o=o("t5"),f9o=o(" \u2014 "),VG=a("a"),g9o=o("T5ForConditionalGeneration"),h9o=o(" (T5 model)"),u9o=l(),$2=a("li"),hge=a("strong"),p9o=o("tapas"),_9o=o(" \u2014 "),XG=a("a"),b9o=o("TapasForMaskedLM"),v9o=o(" (TAPAS model)"),F9o=l(),k2=a("li"),uge=a("strong"),T9o=o("transfo-xl"),M9o=o(" \u2014 "),zG=a("a"),E9o=o("TransfoXLLMHeadModel"),C9o=o(" (Transformer-XL model)"),w9o=l(),S2=a("li"),pge=a("strong"),A9o=o("unispeech"),L9o=o(" \u2014 "),QG=a("a"),y9o=o("UniSpeechForPreTraining"),x9o=o(" (UniSpeech model)"),$9o=l(),R2=a("li"),_ge=a("strong"),k9o=o("unispeech-sat"),S9o=o(" \u2014 "),WG=a("a"),R9o=o("UniSpeechSatForPreTraining"),P9o=o(" (UniSpeechSat model)"),B9o=l(),P2=a("li"),bge=a("strong"),N9o=o("visual_bert"),I9o=o(" \u2014 "),HG=a("a"),q9o=o("VisualBertForPreTraining"),j9o=o(" (VisualBERT model)"),D9o=l(),B2=a("li"),vge=a("strong"),G9o=o("vit_mae"),O9o=o(" \u2014 "),UG=a("a"),V9o=o("ViTMAEForPreTraining"),X9o=o(" (ViTMAE model)"),z9o=l(),N2=a("li"),Fge=a("strong"),Q9o=o("wav2vec2"),W9o=o(" \u2014 "),JG=a("a"),H9o=o("Wav2Vec2ForPreTraining"),U9o=o(" (Wav2Vec2 model)"),J9o=l(),I2=a("li"),Tge=a("strong"),Y9o=o("wav2vec2-conformer"),K9o=o(" \u2014 "),YG=a("a"),Z9o=o("Wav2Vec2ConformerForPreTraining"),exo=o(" (Wav2Vec2-Conformer model)"),oxo=l(),q2=a("li"),Mge=a("strong"),rxo=o("xlm"),txo=o(" \u2014 "),KG=a("a"),axo=o("XLMWithLMHeadModel"),nxo=o(" (XLM model)"),sxo=l(),j2=a("li"),Ege=a("strong"),lxo=o("xlm-roberta"),ixo=o(" \u2014 "),ZG=a("a"),dxo=o("XLMRobertaForMaskedLM"),cxo=o(" (XLM-RoBERTa model)"),mxo=l(),D2=a("li"),Cge=a("strong"),fxo=o("xlm-roberta-xl"),gxo=o(" \u2014 "),eO=a("a"),hxo=o("XLMRobertaXLForMaskedLM"),uxo=o(" (XLM-RoBERTa-XL model)"),pxo=l(),G2=a("li"),wge=a("strong"),_xo=o("xlnet"),bxo=o(" \u2014 "),oO=a("a"),vxo=o("XLNetLMHeadModel"),Fxo=o(" (XLNet model)"),Txo=l(),O2=a("p"),Mxo=o("The model is set in evaluation mode by default using "),Age=a("code"),Exo=o("model.eval()"),Cxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lge=a("code"),wxo=o("model.train()"),Axo=l(),F(V2.$$.fragment),kXe=l(),Hi=a("h2"),X2=a("a"),yge=a("span"),F(Xy.$$.fragment),Lxo=l(),xge=a("span"),yxo=o("AutoModelForCausalLM"),SXe=l(),So=a("div"),F(zy.$$.fragment),xxo=l(),Ui=a("p"),$xo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),rO=a("a"),kxo=o("from_pretrained()"),Sxo=o(" class method or the "),tO=a("a"),Rxo=o("from_config()"),Pxo=o(` class
method.`),Bxo=l(),Qy=a("p"),Nxo=o("This class cannot be instantiated directly using "),$ge=a("code"),Ixo=o("__init__()"),qxo=o(" (throws an error)."),jxo=l(),ct=a("div"),F(Wy.$$.fragment),Dxo=l(),kge=a("p"),Gxo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Oxo=l(),Ji=a("p"),Vxo=o(`Note:
Loading a model from its configuration file does `),Sge=a("strong"),Xxo=o("not"),zxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=a("a"),Qxo=o("from_pretrained()"),Wxo=o(" to load the model weights."),Hxo=l(),F(z2.$$.fragment),Uxo=l(),Ze=a("div"),F(Hy.$$.fragment),Jxo=l(),Rge=a("p"),Yxo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Kxo=l(),qa=a("p"),Zxo=o("The model class to instantiate is selected based on the "),Pge=a("code"),e$o=o("model_type"),o$o=o(` property of the config object (either
passed as an argument or loaded from `),Bge=a("code"),r$o=o("pretrained_model_name_or_path"),t$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nge=a("code"),a$o=o("pretrained_model_name_or_path"),n$o=o(":"),s$o=l(),z=a("ul"),Q2=a("li"),Ige=a("strong"),l$o=o("bart"),i$o=o(" \u2014 "),nO=a("a"),d$o=o("BartForCausalLM"),c$o=o(" (BART model)"),m$o=l(),W2=a("li"),qge=a("strong"),f$o=o("bert"),g$o=o(" \u2014 "),sO=a("a"),h$o=o("BertLMHeadModel"),u$o=o(" (BERT model)"),p$o=l(),H2=a("li"),jge=a("strong"),_$o=o("bert-generation"),b$o=o(" \u2014 "),lO=a("a"),v$o=o("BertGenerationDecoder"),F$o=o(" (Bert Generation model)"),T$o=l(),U2=a("li"),Dge=a("strong"),M$o=o("big_bird"),E$o=o(" \u2014 "),iO=a("a"),C$o=o("BigBirdForCausalLM"),w$o=o(" (BigBird model)"),A$o=l(),J2=a("li"),Gge=a("strong"),L$o=o("bigbird_pegasus"),y$o=o(" \u2014 "),dO=a("a"),x$o=o("BigBirdPegasusForCausalLM"),$$o=o(" (BigBird-Pegasus model)"),k$o=l(),Y2=a("li"),Oge=a("strong"),S$o=o("blenderbot"),R$o=o(" \u2014 "),cO=a("a"),P$o=o("BlenderbotForCausalLM"),B$o=o(" (Blenderbot model)"),N$o=l(),K2=a("li"),Vge=a("strong"),I$o=o("blenderbot-small"),q$o=o(" \u2014 "),mO=a("a"),j$o=o("BlenderbotSmallForCausalLM"),D$o=o(" (BlenderbotSmall model)"),G$o=l(),Z2=a("li"),Xge=a("strong"),O$o=o("bloom"),V$o=o(" \u2014 "),fO=a("a"),X$o=o("BloomForCausalLM"),z$o=o(" (BLOOM model)"),Q$o=l(),eb=a("li"),zge=a("strong"),W$o=o("camembert"),H$o=o(" \u2014 "),gO=a("a"),U$o=o("CamembertForCausalLM"),J$o=o(" (CamemBERT model)"),Y$o=l(),ob=a("li"),Qge=a("strong"),K$o=o("codegen"),Z$o=o(" \u2014 "),hO=a("a"),eko=o("CodeGenForCausalLM"),oko=o(" (CodeGen model)"),rko=l(),rb=a("li"),Wge=a("strong"),tko=o("ctrl"),ako=o(" \u2014 "),uO=a("a"),nko=o("CTRLLMHeadModel"),sko=o(" (CTRL model)"),lko=l(),tb=a("li"),Hge=a("strong"),iko=o("data2vec-text"),dko=o(" \u2014 "),pO=a("a"),cko=o("Data2VecTextForCausalLM"),mko=o(" (Data2VecText model)"),fko=l(),ab=a("li"),Uge=a("strong"),gko=o("electra"),hko=o(" \u2014 "),_O=a("a"),uko=o("ElectraForCausalLM"),pko=o(" (ELECTRA model)"),_ko=l(),nb=a("li"),Jge=a("strong"),bko=o("gpt2"),vko=o(" \u2014 "),bO=a("a"),Fko=o("GPT2LMHeadModel"),Tko=o(" (OpenAI GPT-2 model)"),Mko=l(),sb=a("li"),Yge=a("strong"),Eko=o("gpt_neo"),Cko=o(" \u2014 "),vO=a("a"),wko=o("GPTNeoForCausalLM"),Ako=o(" (GPT Neo model)"),Lko=l(),lb=a("li"),Kge=a("strong"),yko=o("gpt_neox"),xko=o(" \u2014 "),FO=a("a"),$ko=o("GPTNeoXForCausalLM"),kko=o(" (GPT NeoX model)"),Sko=l(),ib=a("li"),Zge=a("strong"),Rko=o("gptj"),Pko=o(" \u2014 "),TO=a("a"),Bko=o("GPTJForCausalLM"),Nko=o(" (GPT-J model)"),Iko=l(),db=a("li"),ehe=a("strong"),qko=o("marian"),jko=o(" \u2014 "),MO=a("a"),Dko=o("MarianForCausalLM"),Gko=o(" (Marian model)"),Oko=l(),cb=a("li"),ohe=a("strong"),Vko=o("mbart"),Xko=o(" \u2014 "),EO=a("a"),zko=o("MBartForCausalLM"),Qko=o(" (mBART model)"),Wko=l(),mb=a("li"),rhe=a("strong"),Hko=o("megatron-bert"),Uko=o(" \u2014 "),CO=a("a"),Jko=o("MegatronBertForCausalLM"),Yko=o(" (Megatron-BERT model)"),Kko=l(),fb=a("li"),the=a("strong"),Zko=o("mvp"),eSo=o(" \u2014 "),wO=a("a"),oSo=o("MvpForCausalLM"),rSo=o(" (MVP model)"),tSo=l(),gb=a("li"),ahe=a("strong"),aSo=o("openai-gpt"),nSo=o(" \u2014 "),AO=a("a"),sSo=o("OpenAIGPTLMHeadModel"),lSo=o(" (OpenAI GPT model)"),iSo=l(),hb=a("li"),nhe=a("strong"),dSo=o("opt"),cSo=o(" \u2014 "),LO=a("a"),mSo=o("OPTForCausalLM"),fSo=o(" (OPT model)"),gSo=l(),ub=a("li"),she=a("strong"),hSo=o("pegasus"),uSo=o(" \u2014 "),yO=a("a"),pSo=o("PegasusForCausalLM"),_So=o(" (Pegasus model)"),bSo=l(),pb=a("li"),lhe=a("strong"),vSo=o("plbart"),FSo=o(" \u2014 "),xO=a("a"),TSo=o("PLBartForCausalLM"),MSo=o(" (PLBart model)"),ESo=l(),_b=a("li"),ihe=a("strong"),CSo=o("prophetnet"),wSo=o(" \u2014 "),$O=a("a"),ASo=o("ProphetNetForCausalLM"),LSo=o(" (ProphetNet model)"),ySo=l(),bb=a("li"),dhe=a("strong"),xSo=o("qdqbert"),$So=o(" \u2014 "),kO=a("a"),kSo=o("QDQBertLMHeadModel"),SSo=o(" (QDQBert model)"),RSo=l(),vb=a("li"),che=a("strong"),PSo=o("reformer"),BSo=o(" \u2014 "),SO=a("a"),NSo=o("ReformerModelWithLMHead"),ISo=o(" (Reformer model)"),qSo=l(),Fb=a("li"),mhe=a("strong"),jSo=o("rembert"),DSo=o(" \u2014 "),RO=a("a"),GSo=o("RemBertForCausalLM"),OSo=o(" (RemBERT model)"),VSo=l(),Tb=a("li"),fhe=a("strong"),XSo=o("roberta"),zSo=o(" \u2014 "),PO=a("a"),QSo=o("RobertaForCausalLM"),WSo=o(" (RoBERTa model)"),HSo=l(),Mb=a("li"),ghe=a("strong"),USo=o("roformer"),JSo=o(" \u2014 "),BO=a("a"),YSo=o("RoFormerForCausalLM"),KSo=o(" (RoFormer model)"),ZSo=l(),Eb=a("li"),hhe=a("strong"),eRo=o("speech_to_text_2"),oRo=o(" \u2014 "),NO=a("a"),rRo=o("Speech2Text2ForCausalLM"),tRo=o(" (Speech2Text2 model)"),aRo=l(),Cb=a("li"),uhe=a("strong"),nRo=o("transfo-xl"),sRo=o(" \u2014 "),IO=a("a"),lRo=o("TransfoXLLMHeadModel"),iRo=o(" (Transformer-XL model)"),dRo=l(),wb=a("li"),phe=a("strong"),cRo=o("trocr"),mRo=o(" \u2014 "),qO=a("a"),fRo=o("TrOCRForCausalLM"),gRo=o(" (TrOCR model)"),hRo=l(),Ab=a("li"),_he=a("strong"),uRo=o("xglm"),pRo=o(" \u2014 "),jO=a("a"),_Ro=o("XGLMForCausalLM"),bRo=o(" (XGLM model)"),vRo=l(),Lb=a("li"),bhe=a("strong"),FRo=o("xlm"),TRo=o(" \u2014 "),DO=a("a"),MRo=o("XLMWithLMHeadModel"),ERo=o(" (XLM model)"),CRo=l(),yb=a("li"),vhe=a("strong"),wRo=o("xlm-prophetnet"),ARo=o(" \u2014 "),GO=a("a"),LRo=o("XLMProphetNetForCausalLM"),yRo=o(" (XLM-ProphetNet model)"),xRo=l(),xb=a("li"),Fhe=a("strong"),$Ro=o("xlm-roberta"),kRo=o(" \u2014 "),OO=a("a"),SRo=o("XLMRobertaForCausalLM"),RRo=o(" (XLM-RoBERTa model)"),PRo=l(),$b=a("li"),The=a("strong"),BRo=o("xlm-roberta-xl"),NRo=o(" \u2014 "),VO=a("a"),IRo=o("XLMRobertaXLForCausalLM"),qRo=o(" (XLM-RoBERTa-XL model)"),jRo=l(),kb=a("li"),Mhe=a("strong"),DRo=o("xlnet"),GRo=o(" \u2014 "),XO=a("a"),ORo=o("XLNetLMHeadModel"),VRo=o(" (XLNet model)"),XRo=l(),Sb=a("p"),zRo=o("The model is set in evaluation mode by default using "),Ehe=a("code"),QRo=o("model.eval()"),WRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Che=a("code"),HRo=o("model.train()"),URo=l(),F(Rb.$$.fragment),RXe=l(),Yi=a("h2"),Pb=a("a"),whe=a("span"),F(Uy.$$.fragment),JRo=l(),Ahe=a("span"),YRo=o("AutoModelForMaskedLM"),PXe=l(),Ro=a("div"),F(Jy.$$.fragment),KRo=l(),Ki=a("p"),ZRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zO=a("a"),ePo=o("from_pretrained()"),oPo=o(" class method or the "),QO=a("a"),rPo=o("from_config()"),tPo=o(` class
method.`),aPo=l(),Yy=a("p"),nPo=o("This class cannot be instantiated directly using "),Lhe=a("code"),sPo=o("__init__()"),lPo=o(" (throws an error)."),iPo=l(),mt=a("div"),F(Ky.$$.fragment),dPo=l(),yhe=a("p"),cPo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),mPo=l(),Zi=a("p"),fPo=o(`Note:
Loading a model from its configuration file does `),xhe=a("strong"),gPo=o("not"),hPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WO=a("a"),uPo=o("from_pretrained()"),pPo=o(" to load the model weights."),_Po=l(),F(Bb.$$.fragment),bPo=l(),eo=a("div"),F(Zy.$$.fragment),vPo=l(),$he=a("p"),FPo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),TPo=l(),ja=a("p"),MPo=o("The model class to instantiate is selected based on the "),khe=a("code"),EPo=o("model_type"),CPo=o(` property of the config object (either
passed as an argument or loaded from `),She=a("code"),wPo=o("pretrained_model_name_or_path"),APo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rhe=a("code"),LPo=o("pretrained_model_name_or_path"),yPo=o(":"),xPo=l(),W=a("ul"),Nb=a("li"),Phe=a("strong"),$Po=o("albert"),kPo=o(" \u2014 "),HO=a("a"),SPo=o("AlbertForMaskedLM"),RPo=o(" (ALBERT model)"),PPo=l(),Ib=a("li"),Bhe=a("strong"),BPo=o("bart"),NPo=o(" \u2014 "),UO=a("a"),IPo=o("BartForConditionalGeneration"),qPo=o(" (BART model)"),jPo=l(),qb=a("li"),Nhe=a("strong"),DPo=o("bert"),GPo=o(" \u2014 "),JO=a("a"),OPo=o("BertForMaskedLM"),VPo=o(" (BERT model)"),XPo=l(),jb=a("li"),Ihe=a("strong"),zPo=o("big_bird"),QPo=o(" \u2014 "),YO=a("a"),WPo=o("BigBirdForMaskedLM"),HPo=o(" (BigBird model)"),UPo=l(),Db=a("li"),qhe=a("strong"),JPo=o("camembert"),YPo=o(" \u2014 "),KO=a("a"),KPo=o("CamembertForMaskedLM"),ZPo=o(" (CamemBERT model)"),eBo=l(),Gb=a("li"),jhe=a("strong"),oBo=o("convbert"),rBo=o(" \u2014 "),ZO=a("a"),tBo=o("ConvBertForMaskedLM"),aBo=o(" (ConvBERT model)"),nBo=l(),Ob=a("li"),Dhe=a("strong"),sBo=o("data2vec-text"),lBo=o(" \u2014 "),eV=a("a"),iBo=o("Data2VecTextForMaskedLM"),dBo=o(" (Data2VecText model)"),cBo=l(),Vb=a("li"),Ghe=a("strong"),mBo=o("deberta"),fBo=o(" \u2014 "),oV=a("a"),gBo=o("DebertaForMaskedLM"),hBo=o(" (DeBERTa model)"),uBo=l(),Xb=a("li"),Ohe=a("strong"),pBo=o("deberta-v2"),_Bo=o(" \u2014 "),rV=a("a"),bBo=o("DebertaV2ForMaskedLM"),vBo=o(" (DeBERTa-v2 model)"),FBo=l(),zb=a("li"),Vhe=a("strong"),TBo=o("distilbert"),MBo=o(" \u2014 "),tV=a("a"),EBo=o("DistilBertForMaskedLM"),CBo=o(" (DistilBERT model)"),wBo=l(),Qb=a("li"),Xhe=a("strong"),ABo=o("electra"),LBo=o(" \u2014 "),aV=a("a"),yBo=o("ElectraForMaskedLM"),xBo=o(" (ELECTRA model)"),$Bo=l(),Wb=a("li"),zhe=a("strong"),kBo=o("flaubert"),SBo=o(" \u2014 "),nV=a("a"),RBo=o("FlaubertWithLMHeadModel"),PBo=o(" (FlauBERT model)"),BBo=l(),Hb=a("li"),Qhe=a("strong"),NBo=o("fnet"),IBo=o(" \u2014 "),sV=a("a"),qBo=o("FNetForMaskedLM"),jBo=o(" (FNet model)"),DBo=l(),Ub=a("li"),Whe=a("strong"),GBo=o("funnel"),OBo=o(" \u2014 "),lV=a("a"),VBo=o("FunnelForMaskedLM"),XBo=o(" (Funnel Transformer model)"),zBo=l(),Jb=a("li"),Hhe=a("strong"),QBo=o("ibert"),WBo=o(" \u2014 "),iV=a("a"),HBo=o("IBertForMaskedLM"),UBo=o(" (I-BERT model)"),JBo=l(),Yb=a("li"),Uhe=a("strong"),YBo=o("layoutlm"),KBo=o(" \u2014 "),dV=a("a"),ZBo=o("LayoutLMForMaskedLM"),eNo=o(" (LayoutLM model)"),oNo=l(),Kb=a("li"),Jhe=a("strong"),rNo=o("longformer"),tNo=o(" \u2014 "),cV=a("a"),aNo=o("LongformerForMaskedLM"),nNo=o(" (Longformer model)"),sNo=l(),Zb=a("li"),Yhe=a("strong"),lNo=o("luke"),iNo=o(" \u2014 "),mV=a("a"),dNo=o("LukeForMaskedLM"),cNo=o(" (LUKE model)"),mNo=l(),ev=a("li"),Khe=a("strong"),fNo=o("mbart"),gNo=o(" \u2014 "),fV=a("a"),hNo=o("MBartForConditionalGeneration"),uNo=o(" (mBART model)"),pNo=l(),ov=a("li"),Zhe=a("strong"),_No=o("megatron-bert"),bNo=o(" \u2014 "),gV=a("a"),vNo=o("MegatronBertForMaskedLM"),FNo=o(" (Megatron-BERT model)"),TNo=l(),rv=a("li"),eue=a("strong"),MNo=o("mobilebert"),ENo=o(" \u2014 "),hV=a("a"),CNo=o("MobileBertForMaskedLM"),wNo=o(" (MobileBERT model)"),ANo=l(),tv=a("li"),oue=a("strong"),LNo=o("mpnet"),yNo=o(" \u2014 "),uV=a("a"),xNo=o("MPNetForMaskedLM"),$No=o(" (MPNet model)"),kNo=l(),av=a("li"),rue=a("strong"),SNo=o("mvp"),RNo=o(" \u2014 "),pV=a("a"),PNo=o("MvpForConditionalGeneration"),BNo=o(" (MVP model)"),NNo=l(),nv=a("li"),tue=a("strong"),INo=o("nezha"),qNo=o(" \u2014 "),_V=a("a"),jNo=o("NezhaForMaskedLM"),DNo=o(" (Nezha model)"),GNo=l(),sv=a("li"),aue=a("strong"),ONo=o("nystromformer"),VNo=o(" \u2014 "),bV=a("a"),XNo=o("NystromformerForMaskedLM"),zNo=o(" (Nystr\xF6mformer model)"),QNo=l(),lv=a("li"),nue=a("strong"),WNo=o("perceiver"),HNo=o(" \u2014 "),vV=a("a"),UNo=o("PerceiverForMaskedLM"),JNo=o(" (Perceiver model)"),YNo=l(),iv=a("li"),sue=a("strong"),KNo=o("qdqbert"),ZNo=o(" \u2014 "),FV=a("a"),eIo=o("QDQBertForMaskedLM"),oIo=o(" (QDQBert model)"),rIo=l(),dv=a("li"),lue=a("strong"),tIo=o("reformer"),aIo=o(" \u2014 "),TV=a("a"),nIo=o("ReformerForMaskedLM"),sIo=o(" (Reformer model)"),lIo=l(),cv=a("li"),iue=a("strong"),iIo=o("rembert"),dIo=o(" \u2014 "),MV=a("a"),cIo=o("RemBertForMaskedLM"),mIo=o(" (RemBERT model)"),fIo=l(),mv=a("li"),due=a("strong"),gIo=o("roberta"),hIo=o(" \u2014 "),EV=a("a"),uIo=o("RobertaForMaskedLM"),pIo=o(" (RoBERTa model)"),_Io=l(),fv=a("li"),cue=a("strong"),bIo=o("roformer"),vIo=o(" \u2014 "),CV=a("a"),FIo=o("RoFormerForMaskedLM"),TIo=o(" (RoFormer model)"),MIo=l(),gv=a("li"),mue=a("strong"),EIo=o("squeezebert"),CIo=o(" \u2014 "),wV=a("a"),wIo=o("SqueezeBertForMaskedLM"),AIo=o(" (SqueezeBERT model)"),LIo=l(),hv=a("li"),fue=a("strong"),yIo=o("tapas"),xIo=o(" \u2014 "),AV=a("a"),$Io=o("TapasForMaskedLM"),kIo=o(" (TAPAS model)"),SIo=l(),uv=a("li"),gue=a("strong"),RIo=o("wav2vec2"),PIo=o(" \u2014 "),hue=a("code"),BIo=o("Wav2Vec2ForMaskedLM"),NIo=o(" (Wav2Vec2 model)"),IIo=l(),pv=a("li"),uue=a("strong"),qIo=o("xlm"),jIo=o(" \u2014 "),LV=a("a"),DIo=o("XLMWithLMHeadModel"),GIo=o(" (XLM model)"),OIo=l(),_v=a("li"),pue=a("strong"),VIo=o("xlm-roberta"),XIo=o(" \u2014 "),yV=a("a"),zIo=o("XLMRobertaForMaskedLM"),QIo=o(" (XLM-RoBERTa model)"),WIo=l(),bv=a("li"),_ue=a("strong"),HIo=o("xlm-roberta-xl"),UIo=o(" \u2014 "),xV=a("a"),JIo=o("XLMRobertaXLForMaskedLM"),YIo=o(" (XLM-RoBERTa-XL model)"),KIo=l(),vv=a("li"),bue=a("strong"),ZIo=o("yoso"),eqo=o(" \u2014 "),$V=a("a"),oqo=o("YosoForMaskedLM"),rqo=o(" (YOSO model)"),tqo=l(),Fv=a("p"),aqo=o("The model is set in evaluation mode by default using "),vue=a("code"),nqo=o("model.eval()"),sqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fue=a("code"),lqo=o("model.train()"),iqo=l(),F(Tv.$$.fragment),BXe=l(),ed=a("h2"),Mv=a("a"),Tue=a("span"),F(e8.$$.fragment),dqo=l(),Mue=a("span"),cqo=o("AutoModelForSeq2SeqLM"),NXe=l(),Po=a("div"),F(o8.$$.fragment),mqo=l(),od=a("p"),fqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kV=a("a"),gqo=o("from_pretrained()"),hqo=o(" class method or the "),SV=a("a"),uqo=o("from_config()"),pqo=o(` class
method.`),_qo=l(),r8=a("p"),bqo=o("This class cannot be instantiated directly using "),Eue=a("code"),vqo=o("__init__()"),Fqo=o(" (throws an error)."),Tqo=l(),ft=a("div"),F(t8.$$.fragment),Mqo=l(),Cue=a("p"),Eqo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Cqo=l(),rd=a("p"),wqo=o(`Note:
Loading a model from its configuration file does `),wue=a("strong"),Aqo=o("not"),Lqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=a("a"),yqo=o("from_pretrained()"),xqo=o(" to load the model weights."),$qo=l(),F(Ev.$$.fragment),kqo=l(),oo=a("div"),F(a8.$$.fragment),Sqo=l(),Aue=a("p"),Rqo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Pqo=l(),Da=a("p"),Bqo=o("The model class to instantiate is selected based on the "),Lue=a("code"),Nqo=o("model_type"),Iqo=o(` property of the config object (either
passed as an argument or loaded from `),yue=a("code"),qqo=o("pretrained_model_name_or_path"),jqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xue=a("code"),Dqo=o("pretrained_model_name_or_path"),Gqo=o(":"),Oqo=l(),me=a("ul"),Cv=a("li"),$ue=a("strong"),Vqo=o("bart"),Xqo=o(" \u2014 "),PV=a("a"),zqo=o("BartForConditionalGeneration"),Qqo=o(" (BART model)"),Wqo=l(),wv=a("li"),kue=a("strong"),Hqo=o("bigbird_pegasus"),Uqo=o(" \u2014 "),BV=a("a"),Jqo=o("BigBirdPegasusForConditionalGeneration"),Yqo=o(" (BigBird-Pegasus model)"),Kqo=l(),Av=a("li"),Sue=a("strong"),Zqo=o("blenderbot"),ejo=o(" \u2014 "),NV=a("a"),ojo=o("BlenderbotForConditionalGeneration"),rjo=o(" (Blenderbot model)"),tjo=l(),Lv=a("li"),Rue=a("strong"),ajo=o("blenderbot-small"),njo=o(" \u2014 "),IV=a("a"),sjo=o("BlenderbotSmallForConditionalGeneration"),ljo=o(" (BlenderbotSmall model)"),ijo=l(),yv=a("li"),Pue=a("strong"),djo=o("encoder-decoder"),cjo=o(" \u2014 "),qV=a("a"),mjo=o("EncoderDecoderModel"),fjo=o(" (Encoder decoder model)"),gjo=l(),xv=a("li"),Bue=a("strong"),hjo=o("fsmt"),ujo=o(" \u2014 "),jV=a("a"),pjo=o("FSMTForConditionalGeneration"),_jo=o(" (FairSeq Machine-Translation model)"),bjo=l(),$v=a("li"),Nue=a("strong"),vjo=o("led"),Fjo=o(" \u2014 "),DV=a("a"),Tjo=o("LEDForConditionalGeneration"),Mjo=o(" (LED model)"),Ejo=l(),kv=a("li"),Iue=a("strong"),Cjo=o("longt5"),wjo=o(" \u2014 "),GV=a("a"),Ajo=o("LongT5ForConditionalGeneration"),Ljo=o(" (LongT5 model)"),yjo=l(),Sv=a("li"),que=a("strong"),xjo=o("m2m_100"),$jo=o(" \u2014 "),OV=a("a"),kjo=o("M2M100ForConditionalGeneration"),Sjo=o(" (M2M100 model)"),Rjo=l(),Rv=a("li"),jue=a("strong"),Pjo=o("marian"),Bjo=o(" \u2014 "),VV=a("a"),Njo=o("MarianMTModel"),Ijo=o(" (Marian model)"),qjo=l(),Pv=a("li"),Due=a("strong"),jjo=o("mbart"),Djo=o(" \u2014 "),XV=a("a"),Gjo=o("MBartForConditionalGeneration"),Ojo=o(" (mBART model)"),Vjo=l(),Bv=a("li"),Gue=a("strong"),Xjo=o("mt5"),zjo=o(" \u2014 "),zV=a("a"),Qjo=o("MT5ForConditionalGeneration"),Wjo=o(" (MT5 model)"),Hjo=l(),Nv=a("li"),Oue=a("strong"),Ujo=o("mvp"),Jjo=o(" \u2014 "),QV=a("a"),Yjo=o("MvpForConditionalGeneration"),Kjo=o(" (MVP model)"),Zjo=l(),Iv=a("li"),Vue=a("strong"),eDo=o("nllb"),oDo=o(" \u2014 "),WV=a("a"),rDo=o("M2M100ForConditionalGeneration"),tDo=o(" (NLLB model)"),aDo=l(),qv=a("li"),Xue=a("strong"),nDo=o("pegasus"),sDo=o(" \u2014 "),HV=a("a"),lDo=o("PegasusForConditionalGeneration"),iDo=o(" (Pegasus model)"),dDo=l(),jv=a("li"),zue=a("strong"),cDo=o("plbart"),mDo=o(" \u2014 "),UV=a("a"),fDo=o("PLBartForConditionalGeneration"),gDo=o(" (PLBart model)"),hDo=l(),Dv=a("li"),Que=a("strong"),uDo=o("prophetnet"),pDo=o(" \u2014 "),JV=a("a"),_Do=o("ProphetNetForConditionalGeneration"),bDo=o(" (ProphetNet model)"),vDo=l(),Gv=a("li"),Wue=a("strong"),FDo=o("t5"),TDo=o(" \u2014 "),YV=a("a"),MDo=o("T5ForConditionalGeneration"),EDo=o(" (T5 model)"),CDo=l(),Ov=a("li"),Hue=a("strong"),wDo=o("xlm-prophetnet"),ADo=o(" \u2014 "),KV=a("a"),LDo=o("XLMProphetNetForConditionalGeneration"),yDo=o(" (XLM-ProphetNet model)"),xDo=l(),Vv=a("p"),$Do=o("The model is set in evaluation mode by default using "),Uue=a("code"),kDo=o("model.eval()"),SDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jue=a("code"),RDo=o("model.train()"),PDo=l(),F(Xv.$$.fragment),IXe=l(),td=a("h2"),zv=a("a"),Yue=a("span"),F(n8.$$.fragment),BDo=l(),Kue=a("span"),NDo=o("AutoModelForSequenceClassification"),qXe=l(),Bo=a("div"),F(s8.$$.fragment),IDo=l(),ad=a("p"),qDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZV=a("a"),jDo=o("from_pretrained()"),DDo=o(" class method or the "),eX=a("a"),GDo=o("from_config()"),ODo=o(` class
method.`),VDo=l(),l8=a("p"),XDo=o("This class cannot be instantiated directly using "),Zue=a("code"),zDo=o("__init__()"),QDo=o(" (throws an error)."),WDo=l(),gt=a("div"),F(i8.$$.fragment),HDo=l(),epe=a("p"),UDo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),JDo=l(),nd=a("p"),YDo=o(`Note:
Loading a model from its configuration file does `),ope=a("strong"),KDo=o("not"),ZDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=a("a"),eGo=o("from_pretrained()"),oGo=o(" to load the model weights."),rGo=l(),F(Qv.$$.fragment),tGo=l(),ro=a("div"),F(d8.$$.fragment),aGo=l(),rpe=a("p"),nGo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),sGo=l(),Ga=a("p"),lGo=o("The model class to instantiate is selected based on the "),tpe=a("code"),iGo=o("model_type"),dGo=o(` property of the config object (either
passed as an argument or loaded from `),ape=a("code"),cGo=o("pretrained_model_name_or_path"),mGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),npe=a("code"),fGo=o("pretrained_model_name_or_path"),gGo=o(":"),hGo=l(),B=a("ul"),Wv=a("li"),spe=a("strong"),uGo=o("albert"),pGo=o(" \u2014 "),rX=a("a"),_Go=o("AlbertForSequenceClassification"),bGo=o(" (ALBERT model)"),vGo=l(),Hv=a("li"),lpe=a("strong"),FGo=o("bart"),TGo=o(" \u2014 "),tX=a("a"),MGo=o("BartForSequenceClassification"),EGo=o(" (BART model)"),CGo=l(),Uv=a("li"),ipe=a("strong"),wGo=o("bert"),AGo=o(" \u2014 "),aX=a("a"),LGo=o("BertForSequenceClassification"),yGo=o(" (BERT model)"),xGo=l(),Jv=a("li"),dpe=a("strong"),$Go=o("big_bird"),kGo=o(" \u2014 "),nX=a("a"),SGo=o("BigBirdForSequenceClassification"),RGo=o(" (BigBird model)"),PGo=l(),Yv=a("li"),cpe=a("strong"),BGo=o("bigbird_pegasus"),NGo=o(" \u2014 "),sX=a("a"),IGo=o("BigBirdPegasusForSequenceClassification"),qGo=o(" (BigBird-Pegasus model)"),jGo=l(),Kv=a("li"),mpe=a("strong"),DGo=o("bloom"),GGo=o(" \u2014 "),lX=a("a"),OGo=o("BloomForSequenceClassification"),VGo=o(" (BLOOM model)"),XGo=l(),Zv=a("li"),fpe=a("strong"),zGo=o("camembert"),QGo=o(" \u2014 "),iX=a("a"),WGo=o("CamembertForSequenceClassification"),HGo=o(" (CamemBERT model)"),UGo=l(),e1=a("li"),gpe=a("strong"),JGo=o("canine"),YGo=o(" \u2014 "),dX=a("a"),KGo=o("CanineForSequenceClassification"),ZGo=o(" (CANINE model)"),eOo=l(),o1=a("li"),hpe=a("strong"),oOo=o("convbert"),rOo=o(" \u2014 "),cX=a("a"),tOo=o("ConvBertForSequenceClassification"),aOo=o(" (ConvBERT model)"),nOo=l(),r1=a("li"),upe=a("strong"),sOo=o("ctrl"),lOo=o(" \u2014 "),mX=a("a"),iOo=o("CTRLForSequenceClassification"),dOo=o(" (CTRL model)"),cOo=l(),t1=a("li"),ppe=a("strong"),mOo=o("data2vec-text"),fOo=o(" \u2014 "),fX=a("a"),gOo=o("Data2VecTextForSequenceClassification"),hOo=o(" (Data2VecText model)"),uOo=l(),a1=a("li"),_pe=a("strong"),pOo=o("deberta"),_Oo=o(" \u2014 "),gX=a("a"),bOo=o("DebertaForSequenceClassification"),vOo=o(" (DeBERTa model)"),FOo=l(),n1=a("li"),bpe=a("strong"),TOo=o("deberta-v2"),MOo=o(" \u2014 "),hX=a("a"),EOo=o("DebertaV2ForSequenceClassification"),COo=o(" (DeBERTa-v2 model)"),wOo=l(),s1=a("li"),vpe=a("strong"),AOo=o("distilbert"),LOo=o(" \u2014 "),uX=a("a"),yOo=o("DistilBertForSequenceClassification"),xOo=o(" (DistilBERT model)"),$Oo=l(),l1=a("li"),Fpe=a("strong"),kOo=o("electra"),SOo=o(" \u2014 "),pX=a("a"),ROo=o("ElectraForSequenceClassification"),POo=o(" (ELECTRA model)"),BOo=l(),i1=a("li"),Tpe=a("strong"),NOo=o("flaubert"),IOo=o(" \u2014 "),_X=a("a"),qOo=o("FlaubertForSequenceClassification"),jOo=o(" (FlauBERT model)"),DOo=l(),d1=a("li"),Mpe=a("strong"),GOo=o("fnet"),OOo=o(" \u2014 "),bX=a("a"),VOo=o("FNetForSequenceClassification"),XOo=o(" (FNet model)"),zOo=l(),c1=a("li"),Epe=a("strong"),QOo=o("funnel"),WOo=o(" \u2014 "),vX=a("a"),HOo=o("FunnelForSequenceClassification"),UOo=o(" (Funnel Transformer model)"),JOo=l(),m1=a("li"),Cpe=a("strong"),YOo=o("gpt2"),KOo=o(" \u2014 "),FX=a("a"),ZOo=o("GPT2ForSequenceClassification"),eVo=o(" (OpenAI GPT-2 model)"),oVo=l(),f1=a("li"),wpe=a("strong"),rVo=o("gpt_neo"),tVo=o(" \u2014 "),TX=a("a"),aVo=o("GPTNeoForSequenceClassification"),nVo=o(" (GPT Neo model)"),sVo=l(),g1=a("li"),Ape=a("strong"),lVo=o("gptj"),iVo=o(" \u2014 "),MX=a("a"),dVo=o("GPTJForSequenceClassification"),cVo=o(" (GPT-J model)"),mVo=l(),h1=a("li"),Lpe=a("strong"),fVo=o("ibert"),gVo=o(" \u2014 "),EX=a("a"),hVo=o("IBertForSequenceClassification"),uVo=o(" (I-BERT model)"),pVo=l(),u1=a("li"),ype=a("strong"),_Vo=o("layoutlm"),bVo=o(" \u2014 "),CX=a("a"),vVo=o("LayoutLMForSequenceClassification"),FVo=o(" (LayoutLM model)"),TVo=l(),p1=a("li"),xpe=a("strong"),MVo=o("layoutlmv2"),EVo=o(" \u2014 "),wX=a("a"),CVo=o("LayoutLMv2ForSequenceClassification"),wVo=o(" (LayoutLMv2 model)"),AVo=l(),_1=a("li"),$pe=a("strong"),LVo=o("layoutlmv3"),yVo=o(" \u2014 "),AX=a("a"),xVo=o("LayoutLMv3ForSequenceClassification"),$Vo=o(" (LayoutLMv3 model)"),kVo=l(),b1=a("li"),kpe=a("strong"),SVo=o("led"),RVo=o(" \u2014 "),LX=a("a"),PVo=o("LEDForSequenceClassification"),BVo=o(" (LED model)"),NVo=l(),v1=a("li"),Spe=a("strong"),IVo=o("longformer"),qVo=o(" \u2014 "),yX=a("a"),jVo=o("LongformerForSequenceClassification"),DVo=o(" (Longformer model)"),GVo=l(),F1=a("li"),Rpe=a("strong"),OVo=o("mbart"),VVo=o(" \u2014 "),xX=a("a"),XVo=o("MBartForSequenceClassification"),zVo=o(" (mBART model)"),QVo=l(),T1=a("li"),Ppe=a("strong"),WVo=o("megatron-bert"),HVo=o(" \u2014 "),$X=a("a"),UVo=o("MegatronBertForSequenceClassification"),JVo=o(" (Megatron-BERT model)"),YVo=l(),M1=a("li"),Bpe=a("strong"),KVo=o("mobilebert"),ZVo=o(" \u2014 "),kX=a("a"),eXo=o("MobileBertForSequenceClassification"),oXo=o(" (MobileBERT model)"),rXo=l(),E1=a("li"),Npe=a("strong"),tXo=o("mpnet"),aXo=o(" \u2014 "),SX=a("a"),nXo=o("MPNetForSequenceClassification"),sXo=o(" (MPNet model)"),lXo=l(),C1=a("li"),Ipe=a("strong"),iXo=o("mvp"),dXo=o(" \u2014 "),RX=a("a"),cXo=o("MvpForSequenceClassification"),mXo=o(" (MVP model)"),fXo=l(),w1=a("li"),qpe=a("strong"),gXo=o("nezha"),hXo=o(" \u2014 "),PX=a("a"),uXo=o("NezhaForSequenceClassification"),pXo=o(" (Nezha model)"),_Xo=l(),A1=a("li"),jpe=a("strong"),bXo=o("nystromformer"),vXo=o(" \u2014 "),BX=a("a"),FXo=o("NystromformerForSequenceClassification"),TXo=o(" (Nystr\xF6mformer model)"),MXo=l(),L1=a("li"),Dpe=a("strong"),EXo=o("openai-gpt"),CXo=o(" \u2014 "),NX=a("a"),wXo=o("OpenAIGPTForSequenceClassification"),AXo=o(" (OpenAI GPT model)"),LXo=l(),y1=a("li"),Gpe=a("strong"),yXo=o("opt"),xXo=o(" \u2014 "),IX=a("a"),$Xo=o("OPTForSequenceClassification"),kXo=o(" (OPT model)"),SXo=l(),x1=a("li"),Ope=a("strong"),RXo=o("perceiver"),PXo=o(" \u2014 "),qX=a("a"),BXo=o("PerceiverForSequenceClassification"),NXo=o(" (Perceiver model)"),IXo=l(),$1=a("li"),Vpe=a("strong"),qXo=o("plbart"),jXo=o(" \u2014 "),jX=a("a"),DXo=o("PLBartForSequenceClassification"),GXo=o(" (PLBart model)"),OXo=l(),k1=a("li"),Xpe=a("strong"),VXo=o("qdqbert"),XXo=o(" \u2014 "),DX=a("a"),zXo=o("QDQBertForSequenceClassification"),QXo=o(" (QDQBert model)"),WXo=l(),S1=a("li"),zpe=a("strong"),HXo=o("reformer"),UXo=o(" \u2014 "),GX=a("a"),JXo=o("ReformerForSequenceClassification"),YXo=o(" (Reformer model)"),KXo=l(),R1=a("li"),Qpe=a("strong"),ZXo=o("rembert"),ezo=o(" \u2014 "),OX=a("a"),ozo=o("RemBertForSequenceClassification"),rzo=o(" (RemBERT model)"),tzo=l(),P1=a("li"),Wpe=a("strong"),azo=o("roberta"),nzo=o(" \u2014 "),VX=a("a"),szo=o("RobertaForSequenceClassification"),lzo=o(" (RoBERTa model)"),izo=l(),B1=a("li"),Hpe=a("strong"),dzo=o("roformer"),czo=o(" \u2014 "),XX=a("a"),mzo=o("RoFormerForSequenceClassification"),fzo=o(" (RoFormer model)"),gzo=l(),N1=a("li"),Upe=a("strong"),hzo=o("squeezebert"),uzo=o(" \u2014 "),zX=a("a"),pzo=o("SqueezeBertForSequenceClassification"),_zo=o(" (SqueezeBERT model)"),bzo=l(),I1=a("li"),Jpe=a("strong"),vzo=o("tapas"),Fzo=o(" \u2014 "),QX=a("a"),Tzo=o("TapasForSequenceClassification"),Mzo=o(" (TAPAS model)"),Ezo=l(),q1=a("li"),Ype=a("strong"),Czo=o("transfo-xl"),wzo=o(" \u2014 "),WX=a("a"),Azo=o("TransfoXLForSequenceClassification"),Lzo=o(" (Transformer-XL model)"),yzo=l(),j1=a("li"),Kpe=a("strong"),xzo=o("xlm"),$zo=o(" \u2014 "),HX=a("a"),kzo=o("XLMForSequenceClassification"),Szo=o(" (XLM model)"),Rzo=l(),D1=a("li"),Zpe=a("strong"),Pzo=o("xlm-roberta"),Bzo=o(" \u2014 "),UX=a("a"),Nzo=o("XLMRobertaForSequenceClassification"),Izo=o(" (XLM-RoBERTa model)"),qzo=l(),G1=a("li"),e_e=a("strong"),jzo=o("xlm-roberta-xl"),Dzo=o(" \u2014 "),JX=a("a"),Gzo=o("XLMRobertaXLForSequenceClassification"),Ozo=o(" (XLM-RoBERTa-XL model)"),Vzo=l(),O1=a("li"),o_e=a("strong"),Xzo=o("xlnet"),zzo=o(" \u2014 "),YX=a("a"),Qzo=o("XLNetForSequenceClassification"),Wzo=o(" (XLNet model)"),Hzo=l(),V1=a("li"),r_e=a("strong"),Uzo=o("yoso"),Jzo=o(" \u2014 "),KX=a("a"),Yzo=o("YosoForSequenceClassification"),Kzo=o(" (YOSO model)"),Zzo=l(),X1=a("p"),eQo=o("The model is set in evaluation mode by default using "),t_e=a("code"),oQo=o("model.eval()"),rQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a_e=a("code"),tQo=o("model.train()"),aQo=l(),F(z1.$$.fragment),jXe=l(),sd=a("h2"),Q1=a("a"),n_e=a("span"),F(c8.$$.fragment),nQo=l(),s_e=a("span"),sQo=o("AutoModelForMultipleChoice"),DXe=l(),No=a("div"),F(m8.$$.fragment),lQo=l(),ld=a("p"),iQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ZX=a("a"),dQo=o("from_pretrained()"),cQo=o(" class method or the "),ez=a("a"),mQo=o("from_config()"),fQo=o(` class
method.`),gQo=l(),f8=a("p"),hQo=o("This class cannot be instantiated directly using "),l_e=a("code"),uQo=o("__init__()"),pQo=o(" (throws an error)."),_Qo=l(),ht=a("div"),F(g8.$$.fragment),bQo=l(),i_e=a("p"),vQo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),FQo=l(),id=a("p"),TQo=o(`Note:
Loading a model from its configuration file does `),d_e=a("strong"),MQo=o("not"),EQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=a("a"),CQo=o("from_pretrained()"),wQo=o(" to load the model weights."),AQo=l(),F(W1.$$.fragment),LQo=l(),to=a("div"),F(h8.$$.fragment),yQo=l(),c_e=a("p"),xQo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$Qo=l(),Oa=a("p"),kQo=o("The model class to instantiate is selected based on the "),m_e=a("code"),SQo=o("model_type"),RQo=o(` property of the config object (either
passed as an argument or loaded from `),f_e=a("code"),PQo=o("pretrained_model_name_or_path"),BQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g_e=a("code"),NQo=o("pretrained_model_name_or_path"),IQo=o(":"),qQo=l(),Z=a("ul"),H1=a("li"),h_e=a("strong"),jQo=o("albert"),DQo=o(" \u2014 "),rz=a("a"),GQo=o("AlbertForMultipleChoice"),OQo=o(" (ALBERT model)"),VQo=l(),U1=a("li"),u_e=a("strong"),XQo=o("bert"),zQo=o(" \u2014 "),tz=a("a"),QQo=o("BertForMultipleChoice"),WQo=o(" (BERT model)"),HQo=l(),J1=a("li"),p_e=a("strong"),UQo=o("big_bird"),JQo=o(" \u2014 "),az=a("a"),YQo=o("BigBirdForMultipleChoice"),KQo=o(" (BigBird model)"),ZQo=l(),Y1=a("li"),__e=a("strong"),eWo=o("camembert"),oWo=o(" \u2014 "),nz=a("a"),rWo=o("CamembertForMultipleChoice"),tWo=o(" (CamemBERT model)"),aWo=l(),K1=a("li"),b_e=a("strong"),nWo=o("canine"),sWo=o(" \u2014 "),sz=a("a"),lWo=o("CanineForMultipleChoice"),iWo=o(" (CANINE model)"),dWo=l(),Z1=a("li"),v_e=a("strong"),cWo=o("convbert"),mWo=o(" \u2014 "),lz=a("a"),fWo=o("ConvBertForMultipleChoice"),gWo=o(" (ConvBERT model)"),hWo=l(),eF=a("li"),F_e=a("strong"),uWo=o("data2vec-text"),pWo=o(" \u2014 "),iz=a("a"),_Wo=o("Data2VecTextForMultipleChoice"),bWo=o(" (Data2VecText model)"),vWo=l(),oF=a("li"),T_e=a("strong"),FWo=o("deberta-v2"),TWo=o(" \u2014 "),dz=a("a"),MWo=o("DebertaV2ForMultipleChoice"),EWo=o(" (DeBERTa-v2 model)"),CWo=l(),rF=a("li"),M_e=a("strong"),wWo=o("distilbert"),AWo=o(" \u2014 "),cz=a("a"),LWo=o("DistilBertForMultipleChoice"),yWo=o(" (DistilBERT model)"),xWo=l(),tF=a("li"),E_e=a("strong"),$Wo=o("electra"),kWo=o(" \u2014 "),mz=a("a"),SWo=o("ElectraForMultipleChoice"),RWo=o(" (ELECTRA model)"),PWo=l(),aF=a("li"),C_e=a("strong"),BWo=o("flaubert"),NWo=o(" \u2014 "),fz=a("a"),IWo=o("FlaubertForMultipleChoice"),qWo=o(" (FlauBERT model)"),jWo=l(),nF=a("li"),w_e=a("strong"),DWo=o("fnet"),GWo=o(" \u2014 "),gz=a("a"),OWo=o("FNetForMultipleChoice"),VWo=o(" (FNet model)"),XWo=l(),sF=a("li"),A_e=a("strong"),zWo=o("funnel"),QWo=o(" \u2014 "),hz=a("a"),WWo=o("FunnelForMultipleChoice"),HWo=o(" (Funnel Transformer model)"),UWo=l(),lF=a("li"),L_e=a("strong"),JWo=o("ibert"),YWo=o(" \u2014 "),uz=a("a"),KWo=o("IBertForMultipleChoice"),ZWo=o(" (I-BERT model)"),eHo=l(),iF=a("li"),y_e=a("strong"),oHo=o("longformer"),rHo=o(" \u2014 "),pz=a("a"),tHo=o("LongformerForMultipleChoice"),aHo=o(" (Longformer model)"),nHo=l(),dF=a("li"),x_e=a("strong"),sHo=o("megatron-bert"),lHo=o(" \u2014 "),_z=a("a"),iHo=o("MegatronBertForMultipleChoice"),dHo=o(" (Megatron-BERT model)"),cHo=l(),cF=a("li"),$_e=a("strong"),mHo=o("mobilebert"),fHo=o(" \u2014 "),bz=a("a"),gHo=o("MobileBertForMultipleChoice"),hHo=o(" (MobileBERT model)"),uHo=l(),mF=a("li"),k_e=a("strong"),pHo=o("mpnet"),_Ho=o(" \u2014 "),vz=a("a"),bHo=o("MPNetForMultipleChoice"),vHo=o(" (MPNet model)"),FHo=l(),fF=a("li"),S_e=a("strong"),THo=o("nezha"),MHo=o(" \u2014 "),Fz=a("a"),EHo=o("NezhaForMultipleChoice"),CHo=o(" (Nezha model)"),wHo=l(),gF=a("li"),R_e=a("strong"),AHo=o("nystromformer"),LHo=o(" \u2014 "),Tz=a("a"),yHo=o("NystromformerForMultipleChoice"),xHo=o(" (Nystr\xF6mformer model)"),$Ho=l(),hF=a("li"),P_e=a("strong"),kHo=o("qdqbert"),SHo=o(" \u2014 "),Mz=a("a"),RHo=o("QDQBertForMultipleChoice"),PHo=o(" (QDQBert model)"),BHo=l(),uF=a("li"),B_e=a("strong"),NHo=o("rembert"),IHo=o(" \u2014 "),Ez=a("a"),qHo=o("RemBertForMultipleChoice"),jHo=o(" (RemBERT model)"),DHo=l(),pF=a("li"),N_e=a("strong"),GHo=o("roberta"),OHo=o(" \u2014 "),Cz=a("a"),VHo=o("RobertaForMultipleChoice"),XHo=o(" (RoBERTa model)"),zHo=l(),_F=a("li"),I_e=a("strong"),QHo=o("roformer"),WHo=o(" \u2014 "),wz=a("a"),HHo=o("RoFormerForMultipleChoice"),UHo=o(" (RoFormer model)"),JHo=l(),bF=a("li"),q_e=a("strong"),YHo=o("squeezebert"),KHo=o(" \u2014 "),Az=a("a"),ZHo=o("SqueezeBertForMultipleChoice"),eUo=o(" (SqueezeBERT model)"),oUo=l(),vF=a("li"),j_e=a("strong"),rUo=o("xlm"),tUo=o(" \u2014 "),Lz=a("a"),aUo=o("XLMForMultipleChoice"),nUo=o(" (XLM model)"),sUo=l(),FF=a("li"),D_e=a("strong"),lUo=o("xlm-roberta"),iUo=o(" \u2014 "),yz=a("a"),dUo=o("XLMRobertaForMultipleChoice"),cUo=o(" (XLM-RoBERTa model)"),mUo=l(),TF=a("li"),G_e=a("strong"),fUo=o("xlm-roberta-xl"),gUo=o(" \u2014 "),xz=a("a"),hUo=o("XLMRobertaXLForMultipleChoice"),uUo=o(" (XLM-RoBERTa-XL model)"),pUo=l(),MF=a("li"),O_e=a("strong"),_Uo=o("xlnet"),bUo=o(" \u2014 "),$z=a("a"),vUo=o("XLNetForMultipleChoice"),FUo=o(" (XLNet model)"),TUo=l(),EF=a("li"),V_e=a("strong"),MUo=o("yoso"),EUo=o(" \u2014 "),kz=a("a"),CUo=o("YosoForMultipleChoice"),wUo=o(" (YOSO model)"),AUo=l(),CF=a("p"),LUo=o("The model is set in evaluation mode by default using "),X_e=a("code"),yUo=o("model.eval()"),xUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z_e=a("code"),$Uo=o("model.train()"),kUo=l(),F(wF.$$.fragment),GXe=l(),dd=a("h2"),AF=a("a"),Q_e=a("span"),F(u8.$$.fragment),SUo=l(),W_e=a("span"),RUo=o("AutoModelForNextSentencePrediction"),OXe=l(),Io=a("div"),F(p8.$$.fragment),PUo=l(),cd=a("p"),BUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Sz=a("a"),NUo=o("from_pretrained()"),IUo=o(" class method or the "),Rz=a("a"),qUo=o("from_config()"),jUo=o(` class
method.`),DUo=l(),_8=a("p"),GUo=o("This class cannot be instantiated directly using "),H_e=a("code"),OUo=o("__init__()"),VUo=o(" (throws an error)."),XUo=l(),ut=a("div"),F(b8.$$.fragment),zUo=l(),U_e=a("p"),QUo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),WUo=l(),md=a("p"),HUo=o(`Note:
Loading a model from its configuration file does `),J_e=a("strong"),UUo=o("not"),JUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pz=a("a"),YUo=o("from_pretrained()"),KUo=o(" to load the model weights."),ZUo=l(),F(LF.$$.fragment),eJo=l(),ao=a("div"),F(v8.$$.fragment),oJo=l(),Y_e=a("p"),rJo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),tJo=l(),Va=a("p"),aJo=o("The model class to instantiate is selected based on the "),K_e=a("code"),nJo=o("model_type"),sJo=o(` property of the config object (either
passed as an argument or loaded from `),Z_e=a("code"),lJo=o("pretrained_model_name_or_path"),iJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e2e=a("code"),dJo=o("pretrained_model_name_or_path"),cJo=o(":"),mJo=l(),qo=a("ul"),yF=a("li"),o2e=a("strong"),fJo=o("bert"),gJo=o(" \u2014 "),Bz=a("a"),hJo=o("BertForNextSentencePrediction"),uJo=o(" (BERT model)"),pJo=l(),xF=a("li"),r2e=a("strong"),_Jo=o("fnet"),bJo=o(" \u2014 "),Nz=a("a"),vJo=o("FNetForNextSentencePrediction"),FJo=o(" (FNet model)"),TJo=l(),$F=a("li"),t2e=a("strong"),MJo=o("megatron-bert"),EJo=o(" \u2014 "),Iz=a("a"),CJo=o("MegatronBertForNextSentencePrediction"),wJo=o(" (Megatron-BERT model)"),AJo=l(),kF=a("li"),a2e=a("strong"),LJo=o("mobilebert"),yJo=o(" \u2014 "),qz=a("a"),xJo=o("MobileBertForNextSentencePrediction"),$Jo=o(" (MobileBERT model)"),kJo=l(),SF=a("li"),n2e=a("strong"),SJo=o("nezha"),RJo=o(" \u2014 "),jz=a("a"),PJo=o("NezhaForNextSentencePrediction"),BJo=o(" (Nezha model)"),NJo=l(),RF=a("li"),s2e=a("strong"),IJo=o("qdqbert"),qJo=o(" \u2014 "),Dz=a("a"),jJo=o("QDQBertForNextSentencePrediction"),DJo=o(" (QDQBert model)"),GJo=l(),PF=a("p"),OJo=o("The model is set in evaluation mode by default using "),l2e=a("code"),VJo=o("model.eval()"),XJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i2e=a("code"),zJo=o("model.train()"),QJo=l(),F(BF.$$.fragment),VXe=l(),fd=a("h2"),NF=a("a"),d2e=a("span"),F(F8.$$.fragment),WJo=l(),c2e=a("span"),HJo=o("AutoModelForTokenClassification"),XXe=l(),jo=a("div"),F(T8.$$.fragment),UJo=l(),gd=a("p"),JJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Gz=a("a"),YJo=o("from_pretrained()"),KJo=o(" class method or the "),Oz=a("a"),ZJo=o("from_config()"),eYo=o(` class
method.`),oYo=l(),M8=a("p"),rYo=o("This class cannot be instantiated directly using "),m2e=a("code"),tYo=o("__init__()"),aYo=o(" (throws an error)."),nYo=l(),pt=a("div"),F(E8.$$.fragment),sYo=l(),f2e=a("p"),lYo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),iYo=l(),hd=a("p"),dYo=o(`Note:
Loading a model from its configuration file does `),g2e=a("strong"),cYo=o("not"),mYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=a("a"),fYo=o("from_pretrained()"),gYo=o(" to load the model weights."),hYo=l(),F(IF.$$.fragment),uYo=l(),no=a("div"),F(C8.$$.fragment),pYo=l(),h2e=a("p"),_Yo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),bYo=l(),Xa=a("p"),vYo=o("The model class to instantiate is selected based on the "),u2e=a("code"),FYo=o("model_type"),TYo=o(` property of the config object (either
passed as an argument or loaded from `),p2e=a("code"),MYo=o("pretrained_model_name_or_path"),EYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_2e=a("code"),CYo=o("pretrained_model_name_or_path"),wYo=o(":"),AYo=l(),U=a("ul"),qF=a("li"),b2e=a("strong"),LYo=o("albert"),yYo=o(" \u2014 "),Xz=a("a"),xYo=o("AlbertForTokenClassification"),$Yo=o(" (ALBERT model)"),kYo=l(),jF=a("li"),v2e=a("strong"),SYo=o("bert"),RYo=o(" \u2014 "),zz=a("a"),PYo=o("BertForTokenClassification"),BYo=o(" (BERT model)"),NYo=l(),DF=a("li"),F2e=a("strong"),IYo=o("big_bird"),qYo=o(" \u2014 "),Qz=a("a"),jYo=o("BigBirdForTokenClassification"),DYo=o(" (BigBird model)"),GYo=l(),GF=a("li"),T2e=a("strong"),OYo=o("bloom"),VYo=o(" \u2014 "),Wz=a("a"),XYo=o("BloomForTokenClassification"),zYo=o(" (BLOOM model)"),QYo=l(),OF=a("li"),M2e=a("strong"),WYo=o("camembert"),HYo=o(" \u2014 "),Hz=a("a"),UYo=o("CamembertForTokenClassification"),JYo=o(" (CamemBERT model)"),YYo=l(),VF=a("li"),E2e=a("strong"),KYo=o("canine"),ZYo=o(" \u2014 "),Uz=a("a"),eKo=o("CanineForTokenClassification"),oKo=o(" (CANINE model)"),rKo=l(),XF=a("li"),C2e=a("strong"),tKo=o("convbert"),aKo=o(" \u2014 "),Jz=a("a"),nKo=o("ConvBertForTokenClassification"),sKo=o(" (ConvBERT model)"),lKo=l(),zF=a("li"),w2e=a("strong"),iKo=o("data2vec-text"),dKo=o(" \u2014 "),Yz=a("a"),cKo=o("Data2VecTextForTokenClassification"),mKo=o(" (Data2VecText model)"),fKo=l(),QF=a("li"),A2e=a("strong"),gKo=o("deberta"),hKo=o(" \u2014 "),Kz=a("a"),uKo=o("DebertaForTokenClassification"),pKo=o(" (DeBERTa model)"),_Ko=l(),WF=a("li"),L2e=a("strong"),bKo=o("deberta-v2"),vKo=o(" \u2014 "),Zz=a("a"),FKo=o("DebertaV2ForTokenClassification"),TKo=o(" (DeBERTa-v2 model)"),MKo=l(),HF=a("li"),y2e=a("strong"),EKo=o("distilbert"),CKo=o(" \u2014 "),eQ=a("a"),wKo=o("DistilBertForTokenClassification"),AKo=o(" (DistilBERT model)"),LKo=l(),UF=a("li"),x2e=a("strong"),yKo=o("electra"),xKo=o(" \u2014 "),oQ=a("a"),$Ko=o("ElectraForTokenClassification"),kKo=o(" (ELECTRA model)"),SKo=l(),JF=a("li"),$2e=a("strong"),RKo=o("flaubert"),PKo=o(" \u2014 "),rQ=a("a"),BKo=o("FlaubertForTokenClassification"),NKo=o(" (FlauBERT model)"),IKo=l(),YF=a("li"),k2e=a("strong"),qKo=o("fnet"),jKo=o(" \u2014 "),tQ=a("a"),DKo=o("FNetForTokenClassification"),GKo=o(" (FNet model)"),OKo=l(),KF=a("li"),S2e=a("strong"),VKo=o("funnel"),XKo=o(" \u2014 "),aQ=a("a"),zKo=o("FunnelForTokenClassification"),QKo=o(" (Funnel Transformer model)"),WKo=l(),ZF=a("li"),R2e=a("strong"),HKo=o("gpt2"),UKo=o(" \u2014 "),nQ=a("a"),JKo=o("GPT2ForTokenClassification"),YKo=o(" (OpenAI GPT-2 model)"),KKo=l(),eT=a("li"),P2e=a("strong"),ZKo=o("ibert"),eZo=o(" \u2014 "),sQ=a("a"),oZo=o("IBertForTokenClassification"),rZo=o(" (I-BERT model)"),tZo=l(),oT=a("li"),B2e=a("strong"),aZo=o("layoutlm"),nZo=o(" \u2014 "),lQ=a("a"),sZo=o("LayoutLMForTokenClassification"),lZo=o(" (LayoutLM model)"),iZo=l(),rT=a("li"),N2e=a("strong"),dZo=o("layoutlmv2"),cZo=o(" \u2014 "),iQ=a("a"),mZo=o("LayoutLMv2ForTokenClassification"),fZo=o(" (LayoutLMv2 model)"),gZo=l(),tT=a("li"),I2e=a("strong"),hZo=o("layoutlmv3"),uZo=o(" \u2014 "),dQ=a("a"),pZo=o("LayoutLMv3ForTokenClassification"),_Zo=o(" (LayoutLMv3 model)"),bZo=l(),aT=a("li"),q2e=a("strong"),vZo=o("longformer"),FZo=o(" \u2014 "),cQ=a("a"),TZo=o("LongformerForTokenClassification"),MZo=o(" (Longformer model)"),EZo=l(),nT=a("li"),j2e=a("strong"),CZo=o("megatron-bert"),wZo=o(" \u2014 "),mQ=a("a"),AZo=o("MegatronBertForTokenClassification"),LZo=o(" (Megatron-BERT model)"),yZo=l(),sT=a("li"),D2e=a("strong"),xZo=o("mobilebert"),$Zo=o(" \u2014 "),fQ=a("a"),kZo=o("MobileBertForTokenClassification"),SZo=o(" (MobileBERT model)"),RZo=l(),lT=a("li"),G2e=a("strong"),PZo=o("mpnet"),BZo=o(" \u2014 "),gQ=a("a"),NZo=o("MPNetForTokenClassification"),IZo=o(" (MPNet model)"),qZo=l(),iT=a("li"),O2e=a("strong"),jZo=o("nezha"),DZo=o(" \u2014 "),hQ=a("a"),GZo=o("NezhaForTokenClassification"),OZo=o(" (Nezha model)"),VZo=l(),dT=a("li"),V2e=a("strong"),XZo=o("nystromformer"),zZo=o(" \u2014 "),uQ=a("a"),QZo=o("NystromformerForTokenClassification"),WZo=o(" (Nystr\xF6mformer model)"),HZo=l(),cT=a("li"),X2e=a("strong"),UZo=o("qdqbert"),JZo=o(" \u2014 "),pQ=a("a"),YZo=o("QDQBertForTokenClassification"),KZo=o(" (QDQBert model)"),ZZo=l(),mT=a("li"),z2e=a("strong"),eer=o("rembert"),oer=o(" \u2014 "),_Q=a("a"),rer=o("RemBertForTokenClassification"),ter=o(" (RemBERT model)"),aer=l(),fT=a("li"),Q2e=a("strong"),ner=o("roberta"),ser=o(" \u2014 "),bQ=a("a"),ler=o("RobertaForTokenClassification"),ier=o(" (RoBERTa model)"),der=l(),gT=a("li"),W2e=a("strong"),cer=o("roformer"),mer=o(" \u2014 "),vQ=a("a"),fer=o("RoFormerForTokenClassification"),ger=o(" (RoFormer model)"),her=l(),hT=a("li"),H2e=a("strong"),uer=o("squeezebert"),per=o(" \u2014 "),FQ=a("a"),_er=o("SqueezeBertForTokenClassification"),ber=o(" (SqueezeBERT model)"),ver=l(),uT=a("li"),U2e=a("strong"),Fer=o("xlm"),Ter=o(" \u2014 "),TQ=a("a"),Mer=o("XLMForTokenClassification"),Eer=o(" (XLM model)"),Cer=l(),pT=a("li"),J2e=a("strong"),wer=o("xlm-roberta"),Aer=o(" \u2014 "),MQ=a("a"),Ler=o("XLMRobertaForTokenClassification"),yer=o(" (XLM-RoBERTa model)"),xer=l(),_T=a("li"),Y2e=a("strong"),$er=o("xlm-roberta-xl"),ker=o(" \u2014 "),EQ=a("a"),Ser=o("XLMRobertaXLForTokenClassification"),Rer=o(" (XLM-RoBERTa-XL model)"),Per=l(),bT=a("li"),K2e=a("strong"),Ber=o("xlnet"),Ner=o(" \u2014 "),CQ=a("a"),Ier=o("XLNetForTokenClassification"),qer=o(" (XLNet model)"),jer=l(),vT=a("li"),Z2e=a("strong"),Der=o("yoso"),Ger=o(" \u2014 "),wQ=a("a"),Oer=o("YosoForTokenClassification"),Ver=o(" (YOSO model)"),Xer=l(),FT=a("p"),zer=o("The model is set in evaluation mode by default using "),ebe=a("code"),Qer=o("model.eval()"),Wer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),obe=a("code"),Her=o("model.train()"),Uer=l(),F(TT.$$.fragment),zXe=l(),ud=a("h2"),MT=a("a"),rbe=a("span"),F(w8.$$.fragment),Jer=l(),tbe=a("span"),Yer=o("AutoModelForQuestionAnswering"),QXe=l(),Do=a("div"),F(A8.$$.fragment),Ker=l(),pd=a("p"),Zer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),AQ=a("a"),eor=o("from_pretrained()"),oor=o(" class method or the "),LQ=a("a"),ror=o("from_config()"),tor=o(` class
method.`),aor=l(),L8=a("p"),nor=o("This class cannot be instantiated directly using "),abe=a("code"),sor=o("__init__()"),lor=o(" (throws an error)."),ior=l(),_t=a("div"),F(y8.$$.fragment),dor=l(),nbe=a("p"),cor=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),mor=l(),_d=a("p"),gor=o(`Note:
Loading a model from its configuration file does `),sbe=a("strong"),hor=o("not"),uor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=a("a"),por=o("from_pretrained()"),_or=o(" to load the model weights."),bor=l(),F(ET.$$.fragment),vor=l(),so=a("div"),F(x8.$$.fragment),For=l(),lbe=a("p"),Tor=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Mor=l(),za=a("p"),Eor=o("The model class to instantiate is selected based on the "),ibe=a("code"),Cor=o("model_type"),wor=o(` property of the config object (either
passed as an argument or loaded from `),dbe=a("code"),Aor=o("pretrained_model_name_or_path"),Lor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cbe=a("code"),yor=o("pretrained_model_name_or_path"),xor=o(":"),$or=l(),V=a("ul"),CT=a("li"),mbe=a("strong"),kor=o("albert"),Sor=o(" \u2014 "),xQ=a("a"),Ror=o("AlbertForQuestionAnswering"),Por=o(" (ALBERT model)"),Bor=l(),wT=a("li"),fbe=a("strong"),Nor=o("bart"),Ior=o(" \u2014 "),$Q=a("a"),qor=o("BartForQuestionAnswering"),jor=o(" (BART model)"),Dor=l(),AT=a("li"),gbe=a("strong"),Gor=o("bert"),Oor=o(" \u2014 "),kQ=a("a"),Vor=o("BertForQuestionAnswering"),Xor=o(" (BERT model)"),zor=l(),LT=a("li"),hbe=a("strong"),Qor=o("big_bird"),Wor=o(" \u2014 "),SQ=a("a"),Hor=o("BigBirdForQuestionAnswering"),Uor=o(" (BigBird model)"),Jor=l(),yT=a("li"),ube=a("strong"),Yor=o("bigbird_pegasus"),Kor=o(" \u2014 "),RQ=a("a"),Zor=o("BigBirdPegasusForQuestionAnswering"),err=o(" (BigBird-Pegasus model)"),orr=l(),xT=a("li"),pbe=a("strong"),rrr=o("camembert"),trr=o(" \u2014 "),PQ=a("a"),arr=o("CamembertForQuestionAnswering"),nrr=o(" (CamemBERT model)"),srr=l(),$T=a("li"),_be=a("strong"),lrr=o("canine"),irr=o(" \u2014 "),BQ=a("a"),drr=o("CanineForQuestionAnswering"),crr=o(" (CANINE model)"),mrr=l(),kT=a("li"),bbe=a("strong"),frr=o("convbert"),grr=o(" \u2014 "),NQ=a("a"),hrr=o("ConvBertForQuestionAnswering"),urr=o(" (ConvBERT model)"),prr=l(),ST=a("li"),vbe=a("strong"),_rr=o("data2vec-text"),brr=o(" \u2014 "),IQ=a("a"),vrr=o("Data2VecTextForQuestionAnswering"),Frr=o(" (Data2VecText model)"),Trr=l(),RT=a("li"),Fbe=a("strong"),Mrr=o("deberta"),Err=o(" \u2014 "),qQ=a("a"),Crr=o("DebertaForQuestionAnswering"),wrr=o(" (DeBERTa model)"),Arr=l(),PT=a("li"),Tbe=a("strong"),Lrr=o("deberta-v2"),yrr=o(" \u2014 "),jQ=a("a"),xrr=o("DebertaV2ForQuestionAnswering"),$rr=o(" (DeBERTa-v2 model)"),krr=l(),BT=a("li"),Mbe=a("strong"),Srr=o("distilbert"),Rrr=o(" \u2014 "),DQ=a("a"),Prr=o("DistilBertForQuestionAnswering"),Brr=o(" (DistilBERT model)"),Nrr=l(),NT=a("li"),Ebe=a("strong"),Irr=o("electra"),qrr=o(" \u2014 "),GQ=a("a"),jrr=o("ElectraForQuestionAnswering"),Drr=o(" (ELECTRA model)"),Grr=l(),IT=a("li"),Cbe=a("strong"),Orr=o("flaubert"),Vrr=o(" \u2014 "),OQ=a("a"),Xrr=o("FlaubertForQuestionAnsweringSimple"),zrr=o(" (FlauBERT model)"),Qrr=l(),qT=a("li"),wbe=a("strong"),Wrr=o("fnet"),Hrr=o(" \u2014 "),VQ=a("a"),Urr=o("FNetForQuestionAnswering"),Jrr=o(" (FNet model)"),Yrr=l(),jT=a("li"),Abe=a("strong"),Krr=o("funnel"),Zrr=o(" \u2014 "),XQ=a("a"),etr=o("FunnelForQuestionAnswering"),otr=o(" (Funnel Transformer model)"),rtr=l(),DT=a("li"),Lbe=a("strong"),ttr=o("gptj"),atr=o(" \u2014 "),zQ=a("a"),ntr=o("GPTJForQuestionAnswering"),str=o(" (GPT-J model)"),ltr=l(),GT=a("li"),ybe=a("strong"),itr=o("ibert"),dtr=o(" \u2014 "),QQ=a("a"),ctr=o("IBertForQuestionAnswering"),mtr=o(" (I-BERT model)"),ftr=l(),OT=a("li"),xbe=a("strong"),gtr=o("layoutlmv2"),htr=o(" \u2014 "),WQ=a("a"),utr=o("LayoutLMv2ForQuestionAnswering"),ptr=o(" (LayoutLMv2 model)"),_tr=l(),VT=a("li"),$be=a("strong"),btr=o("layoutlmv3"),vtr=o(" \u2014 "),HQ=a("a"),Ftr=o("LayoutLMv3ForQuestionAnswering"),Ttr=o(" (LayoutLMv3 model)"),Mtr=l(),XT=a("li"),kbe=a("strong"),Etr=o("led"),Ctr=o(" \u2014 "),UQ=a("a"),wtr=o("LEDForQuestionAnswering"),Atr=o(" (LED model)"),Ltr=l(),zT=a("li"),Sbe=a("strong"),ytr=o("longformer"),xtr=o(" \u2014 "),JQ=a("a"),$tr=o("LongformerForQuestionAnswering"),ktr=o(" (Longformer model)"),Str=l(),QT=a("li"),Rbe=a("strong"),Rtr=o("lxmert"),Ptr=o(" \u2014 "),YQ=a("a"),Btr=o("LxmertForQuestionAnswering"),Ntr=o(" (LXMERT model)"),Itr=l(),WT=a("li"),Pbe=a("strong"),qtr=o("mbart"),jtr=o(" \u2014 "),KQ=a("a"),Dtr=o("MBartForQuestionAnswering"),Gtr=o(" (mBART model)"),Otr=l(),HT=a("li"),Bbe=a("strong"),Vtr=o("megatron-bert"),Xtr=o(" \u2014 "),ZQ=a("a"),ztr=o("MegatronBertForQuestionAnswering"),Qtr=o(" (Megatron-BERT model)"),Wtr=l(),UT=a("li"),Nbe=a("strong"),Htr=o("mobilebert"),Utr=o(" \u2014 "),eW=a("a"),Jtr=o("MobileBertForQuestionAnswering"),Ytr=o(" (MobileBERT model)"),Ktr=l(),JT=a("li"),Ibe=a("strong"),Ztr=o("mpnet"),ear=o(" \u2014 "),oW=a("a"),oar=o("MPNetForQuestionAnswering"),rar=o(" (MPNet model)"),tar=l(),YT=a("li"),qbe=a("strong"),aar=o("mvp"),nar=o(" \u2014 "),rW=a("a"),sar=o("MvpForQuestionAnswering"),lar=o(" (MVP model)"),iar=l(),KT=a("li"),jbe=a("strong"),dar=o("nezha"),car=o(" \u2014 "),tW=a("a"),mar=o("NezhaForQuestionAnswering"),far=o(" (Nezha model)"),gar=l(),ZT=a("li"),Dbe=a("strong"),har=o("nystromformer"),uar=o(" \u2014 "),aW=a("a"),par=o("NystromformerForQuestionAnswering"),_ar=o(" (Nystr\xF6mformer model)"),bar=l(),eM=a("li"),Gbe=a("strong"),Far=o("qdqbert"),Tar=o(" \u2014 "),nW=a("a"),Mar=o("QDQBertForQuestionAnswering"),Ear=o(" (QDQBert model)"),Car=l(),oM=a("li"),Obe=a("strong"),war=o("reformer"),Aar=o(" \u2014 "),sW=a("a"),Lar=o("ReformerForQuestionAnswering"),yar=o(" (Reformer model)"),xar=l(),rM=a("li"),Vbe=a("strong"),$ar=o("rembert"),kar=o(" \u2014 "),lW=a("a"),Sar=o("RemBertForQuestionAnswering"),Rar=o(" (RemBERT model)"),Par=l(),tM=a("li"),Xbe=a("strong"),Bar=o("roberta"),Nar=o(" \u2014 "),iW=a("a"),Iar=o("RobertaForQuestionAnswering"),qar=o(" (RoBERTa model)"),jar=l(),aM=a("li"),zbe=a("strong"),Dar=o("roformer"),Gar=o(" \u2014 "),dW=a("a"),Oar=o("RoFormerForQuestionAnswering"),Var=o(" (RoFormer model)"),Xar=l(),nM=a("li"),Qbe=a("strong"),zar=o("splinter"),Qar=o(" \u2014 "),cW=a("a"),War=o("SplinterForQuestionAnswering"),Har=o(" (Splinter model)"),Uar=l(),sM=a("li"),Wbe=a("strong"),Jar=o("squeezebert"),Yar=o(" \u2014 "),mW=a("a"),Kar=o("SqueezeBertForQuestionAnswering"),Zar=o(" (SqueezeBERT model)"),enr=l(),lM=a("li"),Hbe=a("strong"),onr=o("xlm"),rnr=o(" \u2014 "),fW=a("a"),tnr=o("XLMForQuestionAnsweringSimple"),anr=o(" (XLM model)"),nnr=l(),iM=a("li"),Ube=a("strong"),snr=o("xlm-roberta"),lnr=o(" \u2014 "),gW=a("a"),inr=o("XLMRobertaForQuestionAnswering"),dnr=o(" (XLM-RoBERTa model)"),cnr=l(),dM=a("li"),Jbe=a("strong"),mnr=o("xlm-roberta-xl"),fnr=o(" \u2014 "),hW=a("a"),gnr=o("XLMRobertaXLForQuestionAnswering"),hnr=o(" (XLM-RoBERTa-XL model)"),unr=l(),cM=a("li"),Ybe=a("strong"),pnr=o("xlnet"),_nr=o(" \u2014 "),uW=a("a"),bnr=o("XLNetForQuestionAnsweringSimple"),vnr=o(" (XLNet model)"),Fnr=l(),mM=a("li"),Kbe=a("strong"),Tnr=o("yoso"),Mnr=o(" \u2014 "),pW=a("a"),Enr=o("YosoForQuestionAnswering"),Cnr=o(" (YOSO model)"),wnr=l(),fM=a("p"),Anr=o("The model is set in evaluation mode by default using "),Zbe=a("code"),Lnr=o("model.eval()"),ynr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eve=a("code"),xnr=o("model.train()"),$nr=l(),F(gM.$$.fragment),WXe=l(),bd=a("h2"),hM=a("a"),ove=a("span"),F($8.$$.fragment),knr=l(),rve=a("span"),Snr=o("AutoModelForTableQuestionAnswering"),HXe=l(),Go=a("div"),F(k8.$$.fragment),Rnr=l(),vd=a("p"),Pnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),_W=a("a"),Bnr=o("from_pretrained()"),Nnr=o(" class method or the "),bW=a("a"),Inr=o("from_config()"),qnr=o(` class
method.`),jnr=l(),S8=a("p"),Dnr=o("This class cannot be instantiated directly using "),tve=a("code"),Gnr=o("__init__()"),Onr=o(" (throws an error)."),Vnr=l(),bt=a("div"),F(R8.$$.fragment),Xnr=l(),ave=a("p"),znr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Qnr=l(),Fd=a("p"),Wnr=o(`Note:
Loading a model from its configuration file does `),nve=a("strong"),Hnr=o("not"),Unr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vW=a("a"),Jnr=o("from_pretrained()"),Ynr=o(" to load the model weights."),Knr=l(),F(uM.$$.fragment),Znr=l(),lo=a("div"),F(P8.$$.fragment),esr=l(),sve=a("p"),osr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),rsr=l(),Qa=a("p"),tsr=o("The model class to instantiate is selected based on the "),lve=a("code"),asr=o("model_type"),nsr=o(` property of the config object (either
passed as an argument or loaded from `),ive=a("code"),ssr=o("pretrained_model_name_or_path"),lsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dve=a("code"),isr=o("pretrained_model_name_or_path"),dsr=o(":"),csr=l(),cve=a("ul"),pM=a("li"),mve=a("strong"),msr=o("tapas"),fsr=o(" \u2014 "),FW=a("a"),gsr=o("TapasForQuestionAnswering"),hsr=o(" (TAPAS model)"),usr=l(),_M=a("p"),psr=o("The model is set in evaluation mode by default using "),fve=a("code"),_sr=o("model.eval()"),bsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gve=a("code"),vsr=o("model.train()"),Fsr=l(),F(bM.$$.fragment),UXe=l(),Td=a("h2"),vM=a("a"),hve=a("span"),F(B8.$$.fragment),Tsr=l(),uve=a("span"),Msr=o("AutoModelForImageClassification"),JXe=l(),Oo=a("div"),F(N8.$$.fragment),Esr=l(),Md=a("p"),Csr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),TW=a("a"),wsr=o("from_pretrained()"),Asr=o(" class method or the "),MW=a("a"),Lsr=o("from_config()"),ysr=o(` class
method.`),xsr=l(),I8=a("p"),$sr=o("This class cannot be instantiated directly using "),pve=a("code"),ksr=o("__init__()"),Ssr=o(" (throws an error)."),Rsr=l(),vt=a("div"),F(q8.$$.fragment),Psr=l(),_ve=a("p"),Bsr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Nsr=l(),Ed=a("p"),Isr=o(`Note:
Loading a model from its configuration file does `),bve=a("strong"),qsr=o("not"),jsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=a("a"),Dsr=o("from_pretrained()"),Gsr=o(" to load the model weights."),Osr=l(),F(FM.$$.fragment),Vsr=l(),io=a("div"),F(j8.$$.fragment),Xsr=l(),vve=a("p"),zsr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Qsr=l(),Wa=a("p"),Wsr=o("The model class to instantiate is selected based on the "),Fve=a("code"),Hsr=o("model_type"),Usr=o(` property of the config object (either
passed as an argument or loaded from `),Tve=a("code"),Jsr=o("pretrained_model_name_or_path"),Ysr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mve=a("code"),Ksr=o("pretrained_model_name_or_path"),Zsr=o(":"),elr=l(),ve=a("ul"),TM=a("li"),Eve=a("strong"),olr=o("beit"),rlr=o(" \u2014 "),CW=a("a"),tlr=o("BeitForImageClassification"),alr=o(" (BEiT model)"),nlr=l(),MM=a("li"),Cve=a("strong"),slr=o("convnext"),llr=o(" \u2014 "),wW=a("a"),ilr=o("ConvNextForImageClassification"),dlr=o(" (ConvNeXT model)"),clr=l(),EM=a("li"),wve=a("strong"),mlr=o("cvt"),flr=o(" \u2014 "),AW=a("a"),glr=o("CvtForImageClassification"),hlr=o(" (CvT model)"),ulr=l(),CM=a("li"),Ave=a("strong"),plr=o("data2vec-vision"),_lr=o(" \u2014 "),LW=a("a"),blr=o("Data2VecVisionForImageClassification"),vlr=o(" (Data2VecVision model)"),Flr=l(),Us=a("li"),Lve=a("strong"),Tlr=o("deit"),Mlr=o(" \u2014 "),yW=a("a"),Elr=o("DeiTForImageClassification"),Clr=o(" or "),xW=a("a"),wlr=o("DeiTForImageClassificationWithTeacher"),Alr=o(" (DeiT model)"),Llr=l(),wM=a("li"),yve=a("strong"),ylr=o("imagegpt"),xlr=o(" \u2014 "),$W=a("a"),$lr=o("ImageGPTForImageClassification"),klr=o(" (ImageGPT model)"),Slr=l(),Js=a("li"),xve=a("strong"),Rlr=o("levit"),Plr=o(" \u2014 "),kW=a("a"),Blr=o("LevitForImageClassification"),Nlr=o(" or "),SW=a("a"),Ilr=o("LevitForImageClassificationWithTeacher"),qlr=o(" (LeViT model)"),jlr=l(),AM=a("li"),$ve=a("strong"),Dlr=o("mobilevit"),Glr=o(" \u2014 "),RW=a("a"),Olr=o("MobileViTForImageClassification"),Vlr=o(" (MobileViT model)"),Xlr=l(),Ft=a("li"),kve=a("strong"),zlr=o("perceiver"),Qlr=o(" \u2014 "),PW=a("a"),Wlr=o("PerceiverForImageClassificationLearned"),Hlr=o(" or "),BW=a("a"),Ulr=o("PerceiverForImageClassificationFourier"),Jlr=o(" or "),NW=a("a"),Ylr=o("PerceiverForImageClassificationConvProcessing"),Klr=o(" (Perceiver model)"),Zlr=l(),LM=a("li"),Sve=a("strong"),eir=o("poolformer"),oir=o(" \u2014 "),IW=a("a"),rir=o("PoolFormerForImageClassification"),tir=o(" (PoolFormer model)"),air=l(),yM=a("li"),Rve=a("strong"),nir=o("regnet"),sir=o(" \u2014 "),qW=a("a"),lir=o("RegNetForImageClassification"),iir=o(" (RegNet model)"),dir=l(),xM=a("li"),Pve=a("strong"),cir=o("resnet"),mir=o(" \u2014 "),jW=a("a"),fir=o("ResNetForImageClassification"),gir=o(" (ResNet model)"),hir=l(),$M=a("li"),Bve=a("strong"),uir=o("segformer"),pir=o(" \u2014 "),DW=a("a"),_ir=o("SegformerForImageClassification"),bir=o(" (SegFormer model)"),vir=l(),kM=a("li"),Nve=a("strong"),Fir=o("swin"),Tir=o(" \u2014 "),GW=a("a"),Mir=o("SwinForImageClassification"),Eir=o(" (Swin Transformer model)"),Cir=l(),SM=a("li"),Ive=a("strong"),wir=o("van"),Air=o(" \u2014 "),OW=a("a"),Lir=o("VanForImageClassification"),yir=o(" (VAN model)"),xir=l(),RM=a("li"),qve=a("strong"),$ir=o("vit"),kir=o(" \u2014 "),VW=a("a"),Sir=o("ViTForImageClassification"),Rir=o(" (ViT model)"),Pir=l(),PM=a("p"),Bir=o("The model is set in evaluation mode by default using "),jve=a("code"),Nir=o("model.eval()"),Iir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dve=a("code"),qir=o("model.train()"),jir=l(),F(BM.$$.fragment),YXe=l(),Cd=a("h2"),NM=a("a"),Gve=a("span"),F(D8.$$.fragment),Dir=l(),Ove=a("span"),Gir=o("AutoModelForVision2Seq"),KXe=l(),Vo=a("div"),F(G8.$$.fragment),Oir=l(),wd=a("p"),Vir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),XW=a("a"),Xir=o("from_pretrained()"),zir=o(" class method or the "),zW=a("a"),Qir=o("from_config()"),Wir=o(` class
method.`),Hir=l(),O8=a("p"),Uir=o("This class cannot be instantiated directly using "),Vve=a("code"),Jir=o("__init__()"),Yir=o(" (throws an error)."),Kir=l(),Tt=a("div"),F(V8.$$.fragment),Zir=l(),Xve=a("p"),edr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),odr=l(),Ad=a("p"),rdr=o(`Note:
Loading a model from its configuration file does `),zve=a("strong"),tdr=o("not"),adr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=a("a"),ndr=o("from_pretrained()"),sdr=o(" to load the model weights."),ldr=l(),F(IM.$$.fragment),idr=l(),co=a("div"),F(X8.$$.fragment),ddr=l(),Qve=a("p"),cdr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),mdr=l(),Ha=a("p"),fdr=o("The model class to instantiate is selected based on the "),Wve=a("code"),gdr=o("model_type"),hdr=o(` property of the config object (either
passed as an argument or loaded from `),Hve=a("code"),udr=o("pretrained_model_name_or_path"),pdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=a("code"),_dr=o("pretrained_model_name_or_path"),bdr=o(":"),vdr=l(),Jve=a("ul"),qM=a("li"),Yve=a("strong"),Fdr=o("vision-encoder-decoder"),Tdr=o(" \u2014 "),WW=a("a"),Mdr=o("VisionEncoderDecoderModel"),Edr=o(" (Vision Encoder decoder model)"),Cdr=l(),jM=a("p"),wdr=o("The model is set in evaluation mode by default using "),Kve=a("code"),Adr=o("model.eval()"),Ldr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zve=a("code"),ydr=o("model.train()"),xdr=l(),F(DM.$$.fragment),ZXe=l(),Ld=a("h2"),GM=a("a"),e1e=a("span"),F(z8.$$.fragment),$dr=l(),o1e=a("span"),kdr=o("AutoModelForVisualQuestionAnswering"),eze=l(),Xo=a("div"),F(Q8.$$.fragment),Sdr=l(),yd=a("p"),Rdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),HW=a("a"),Pdr=o("from_pretrained()"),Bdr=o(" class method or the "),UW=a("a"),Ndr=o("from_config()"),Idr=o(` class
method.`),qdr=l(),W8=a("p"),jdr=o("This class cannot be instantiated directly using "),r1e=a("code"),Ddr=o("__init__()"),Gdr=o(" (throws an error)."),Odr=l(),Mt=a("div"),F(H8.$$.fragment),Vdr=l(),t1e=a("p"),Xdr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),zdr=l(),xd=a("p"),Qdr=o(`Note:
Loading a model from its configuration file does `),a1e=a("strong"),Wdr=o("not"),Hdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=a("a"),Udr=o("from_pretrained()"),Jdr=o(" to load the model weights."),Ydr=l(),F(OM.$$.fragment),Kdr=l(),mo=a("div"),F(U8.$$.fragment),Zdr=l(),n1e=a("p"),ecr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),ocr=l(),Ua=a("p"),rcr=o("The model class to instantiate is selected based on the "),s1e=a("code"),tcr=o("model_type"),acr=o(` property of the config object (either
passed as an argument or loaded from `),l1e=a("code"),ncr=o("pretrained_model_name_or_path"),scr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i1e=a("code"),lcr=o("pretrained_model_name_or_path"),icr=o(":"),dcr=l(),d1e=a("ul"),VM=a("li"),c1e=a("strong"),ccr=o("vilt"),mcr=o(" \u2014 "),YW=a("a"),fcr=o("ViltForQuestionAnswering"),gcr=o(" (ViLT model)"),hcr=l(),XM=a("p"),ucr=o("The model is set in evaluation mode by default using "),m1e=a("code"),pcr=o("model.eval()"),_cr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f1e=a("code"),bcr=o("model.train()"),vcr=l(),F(zM.$$.fragment),oze=l(),$d=a("h2"),QM=a("a"),g1e=a("span"),F(J8.$$.fragment),Fcr=l(),h1e=a("span"),Tcr=o("AutoModelForAudioClassification"),rze=l(),zo=a("div"),F(Y8.$$.fragment),Mcr=l(),kd=a("p"),Ecr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),KW=a("a"),Ccr=o("from_pretrained()"),wcr=o(" class method or the "),ZW=a("a"),Acr=o("from_config()"),Lcr=o(` class
method.`),ycr=l(),K8=a("p"),xcr=o("This class cannot be instantiated directly using "),u1e=a("code"),$cr=o("__init__()"),kcr=o(" (throws an error)."),Scr=l(),Et=a("div"),F(Z8.$$.fragment),Rcr=l(),p1e=a("p"),Pcr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Bcr=l(),Sd=a("p"),Ncr=o(`Note:
Loading a model from its configuration file does `),_1e=a("strong"),Icr=o("not"),qcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=a("a"),jcr=o("from_pretrained()"),Dcr=o(" to load the model weights."),Gcr=l(),F(WM.$$.fragment),Ocr=l(),fo=a("div"),F(e9.$$.fragment),Vcr=l(),b1e=a("p"),Xcr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),zcr=l(),Ja=a("p"),Qcr=o("The model class to instantiate is selected based on the "),v1e=a("code"),Wcr=o("model_type"),Hcr=o(` property of the config object (either
passed as an argument or loaded from `),F1e=a("code"),Ucr=o("pretrained_model_name_or_path"),Jcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T1e=a("code"),Ycr=o("pretrained_model_name_or_path"),Kcr=o(":"),Zcr=l(),Pe=a("ul"),HM=a("li"),M1e=a("strong"),emr=o("data2vec-audio"),omr=o(" \u2014 "),oH=a("a"),rmr=o("Data2VecAudioForSequenceClassification"),tmr=o(" (Data2VecAudio model)"),amr=l(),UM=a("li"),E1e=a("strong"),nmr=o("hubert"),smr=o(" \u2014 "),rH=a("a"),lmr=o("HubertForSequenceClassification"),imr=o(" (Hubert model)"),dmr=l(),JM=a("li"),C1e=a("strong"),cmr=o("sew"),mmr=o(" \u2014 "),tH=a("a"),fmr=o("SEWForSequenceClassification"),gmr=o(" (SEW model)"),hmr=l(),YM=a("li"),w1e=a("strong"),umr=o("sew-d"),pmr=o(" \u2014 "),aH=a("a"),_mr=o("SEWDForSequenceClassification"),bmr=o(" (SEW-D model)"),vmr=l(),KM=a("li"),A1e=a("strong"),Fmr=o("unispeech"),Tmr=o(" \u2014 "),nH=a("a"),Mmr=o("UniSpeechForSequenceClassification"),Emr=o(" (UniSpeech model)"),Cmr=l(),ZM=a("li"),L1e=a("strong"),wmr=o("unispeech-sat"),Amr=o(" \u2014 "),sH=a("a"),Lmr=o("UniSpeechSatForSequenceClassification"),ymr=o(" (UniSpeechSat model)"),xmr=l(),e4=a("li"),y1e=a("strong"),$mr=o("wav2vec2"),kmr=o(" \u2014 "),lH=a("a"),Smr=o("Wav2Vec2ForSequenceClassification"),Rmr=o(" (Wav2Vec2 model)"),Pmr=l(),o4=a("li"),x1e=a("strong"),Bmr=o("wav2vec2-conformer"),Nmr=o(" \u2014 "),iH=a("a"),Imr=o("Wav2Vec2ConformerForSequenceClassification"),qmr=o(" (Wav2Vec2-Conformer model)"),jmr=l(),r4=a("li"),$1e=a("strong"),Dmr=o("wavlm"),Gmr=o(" \u2014 "),dH=a("a"),Omr=o("WavLMForSequenceClassification"),Vmr=o(" (WavLM model)"),Xmr=l(),t4=a("p"),zmr=o("The model is set in evaluation mode by default using "),k1e=a("code"),Qmr=o("model.eval()"),Wmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S1e=a("code"),Hmr=o("model.train()"),Umr=l(),F(a4.$$.fragment),tze=l(),Rd=a("h2"),n4=a("a"),R1e=a("span"),F(o9.$$.fragment),Jmr=l(),P1e=a("span"),Ymr=o("AutoModelForAudioFrameClassification"),aze=l(),Qo=a("div"),F(r9.$$.fragment),Kmr=l(),Pd=a("p"),Zmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),cH=a("a"),efr=o("from_pretrained()"),ofr=o(" class method or the "),mH=a("a"),rfr=o("from_config()"),tfr=o(` class
method.`),afr=l(),t9=a("p"),nfr=o("This class cannot be instantiated directly using "),B1e=a("code"),sfr=o("__init__()"),lfr=o(" (throws an error)."),ifr=l(),Ct=a("div"),F(a9.$$.fragment),dfr=l(),N1e=a("p"),cfr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),mfr=l(),Bd=a("p"),ffr=o(`Note:
Loading a model from its configuration file does `),I1e=a("strong"),gfr=o("not"),hfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=a("a"),ufr=o("from_pretrained()"),pfr=o(" to load the model weights."),_fr=l(),F(s4.$$.fragment),bfr=l(),go=a("div"),F(n9.$$.fragment),vfr=l(),q1e=a("p"),Ffr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Tfr=l(),Ya=a("p"),Mfr=o("The model class to instantiate is selected based on the "),j1e=a("code"),Efr=o("model_type"),Cfr=o(` property of the config object (either
passed as an argument or loaded from `),D1e=a("code"),wfr=o("pretrained_model_name_or_path"),Afr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G1e=a("code"),Lfr=o("pretrained_model_name_or_path"),yfr=o(":"),xfr=l(),rt=a("ul"),l4=a("li"),O1e=a("strong"),$fr=o("data2vec-audio"),kfr=o(" \u2014 "),gH=a("a"),Sfr=o("Data2VecAudioForAudioFrameClassification"),Rfr=o(" (Data2VecAudio model)"),Pfr=l(),i4=a("li"),V1e=a("strong"),Bfr=o("unispeech-sat"),Nfr=o(" \u2014 "),hH=a("a"),Ifr=o("UniSpeechSatForAudioFrameClassification"),qfr=o(" (UniSpeechSat model)"),jfr=l(),d4=a("li"),X1e=a("strong"),Dfr=o("wav2vec2"),Gfr=o(" \u2014 "),uH=a("a"),Ofr=o("Wav2Vec2ForAudioFrameClassification"),Vfr=o(" (Wav2Vec2 model)"),Xfr=l(),c4=a("li"),z1e=a("strong"),zfr=o("wav2vec2-conformer"),Qfr=o(" \u2014 "),pH=a("a"),Wfr=o("Wav2Vec2ConformerForAudioFrameClassification"),Hfr=o(" (Wav2Vec2-Conformer model)"),Ufr=l(),m4=a("li"),Q1e=a("strong"),Jfr=o("wavlm"),Yfr=o(" \u2014 "),_H=a("a"),Kfr=o("WavLMForAudioFrameClassification"),Zfr=o(" (WavLM model)"),egr=l(),f4=a("p"),ogr=o("The model is set in evaluation mode by default using "),W1e=a("code"),rgr=o("model.eval()"),tgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H1e=a("code"),agr=o("model.train()"),ngr=l(),F(g4.$$.fragment),nze=l(),Nd=a("h2"),h4=a("a"),U1e=a("span"),F(s9.$$.fragment),sgr=l(),J1e=a("span"),lgr=o("AutoModelForCTC"),sze=l(),Wo=a("div"),F(l9.$$.fragment),igr=l(),Id=a("p"),dgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),bH=a("a"),cgr=o("from_pretrained()"),mgr=o(" class method or the "),vH=a("a"),fgr=o("from_config()"),ggr=o(` class
method.`),hgr=l(),i9=a("p"),ugr=o("This class cannot be instantiated directly using "),Y1e=a("code"),pgr=o("__init__()"),_gr=o(" (throws an error)."),bgr=l(),wt=a("div"),F(d9.$$.fragment),vgr=l(),K1e=a("p"),Fgr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Tgr=l(),qd=a("p"),Mgr=o(`Note:
Loading a model from its configuration file does `),Z1e=a("strong"),Egr=o("not"),Cgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=a("a"),wgr=o("from_pretrained()"),Agr=o(" to load the model weights."),Lgr=l(),F(u4.$$.fragment),ygr=l(),ho=a("div"),F(c9.$$.fragment),xgr=l(),eFe=a("p"),$gr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),kgr=l(),Ka=a("p"),Sgr=o("The model class to instantiate is selected based on the "),oFe=a("code"),Rgr=o("model_type"),Pgr=o(` property of the config object (either
passed as an argument or loaded from `),rFe=a("code"),Bgr=o("pretrained_model_name_or_path"),Ngr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tFe=a("code"),Igr=o("pretrained_model_name_or_path"),qgr=o(":"),jgr=l(),Le=a("ul"),p4=a("li"),aFe=a("strong"),Dgr=o("data2vec-audio"),Ggr=o(" \u2014 "),TH=a("a"),Ogr=o("Data2VecAudioForCTC"),Vgr=o(" (Data2VecAudio model)"),Xgr=l(),_4=a("li"),nFe=a("strong"),zgr=o("hubert"),Qgr=o(" \u2014 "),MH=a("a"),Wgr=o("HubertForCTC"),Hgr=o(" (Hubert model)"),Ugr=l(),b4=a("li"),sFe=a("strong"),Jgr=o("mctct"),Ygr=o(" \u2014 "),EH=a("a"),Kgr=o("MCTCTForCTC"),Zgr=o(" (M-CTC-T model)"),ehr=l(),v4=a("li"),lFe=a("strong"),ohr=o("sew"),rhr=o(" \u2014 "),CH=a("a"),thr=o("SEWForCTC"),ahr=o(" (SEW model)"),nhr=l(),F4=a("li"),iFe=a("strong"),shr=o("sew-d"),lhr=o(" \u2014 "),wH=a("a"),ihr=o("SEWDForCTC"),dhr=o(" (SEW-D model)"),chr=l(),T4=a("li"),dFe=a("strong"),mhr=o("unispeech"),fhr=o(" \u2014 "),AH=a("a"),ghr=o("UniSpeechForCTC"),hhr=o(" (UniSpeech model)"),uhr=l(),M4=a("li"),cFe=a("strong"),phr=o("unispeech-sat"),_hr=o(" \u2014 "),LH=a("a"),bhr=o("UniSpeechSatForCTC"),vhr=o(" (UniSpeechSat model)"),Fhr=l(),E4=a("li"),mFe=a("strong"),Thr=o("wav2vec2"),Mhr=o(" \u2014 "),yH=a("a"),Ehr=o("Wav2Vec2ForCTC"),Chr=o(" (Wav2Vec2 model)"),whr=l(),C4=a("li"),fFe=a("strong"),Ahr=o("wav2vec2-conformer"),Lhr=o(" \u2014 "),xH=a("a"),yhr=o("Wav2Vec2ConformerForCTC"),xhr=o(" (Wav2Vec2-Conformer model)"),$hr=l(),w4=a("li"),gFe=a("strong"),khr=o("wavlm"),Shr=o(" \u2014 "),$H=a("a"),Rhr=o("WavLMForCTC"),Phr=o(" (WavLM model)"),Bhr=l(),A4=a("p"),Nhr=o("The model is set in evaluation mode by default using "),hFe=a("code"),Ihr=o("model.eval()"),qhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uFe=a("code"),jhr=o("model.train()"),Dhr=l(),F(L4.$$.fragment),lze=l(),jd=a("h2"),y4=a("a"),pFe=a("span"),F(m9.$$.fragment),Ghr=l(),_Fe=a("span"),Ohr=o("AutoModelForSpeechSeq2Seq"),ize=l(),Ho=a("div"),F(f9.$$.fragment),Vhr=l(),Dd=a("p"),Xhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),kH=a("a"),zhr=o("from_pretrained()"),Qhr=o(" class method or the "),SH=a("a"),Whr=o("from_config()"),Hhr=o(` class
method.`),Uhr=l(),g9=a("p"),Jhr=o("This class cannot be instantiated directly using "),bFe=a("code"),Yhr=o("__init__()"),Khr=o(" (throws an error)."),Zhr=l(),At=a("div"),F(h9.$$.fragment),eur=l(),vFe=a("p"),our=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),rur=l(),Gd=a("p"),tur=o(`Note:
Loading a model from its configuration file does `),FFe=a("strong"),aur=o("not"),nur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=a("a"),sur=o("from_pretrained()"),lur=o(" to load the model weights."),iur=l(),F(x4.$$.fragment),dur=l(),uo=a("div"),F(u9.$$.fragment),cur=l(),TFe=a("p"),mur=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),fur=l(),Za=a("p"),gur=o("The model class to instantiate is selected based on the "),MFe=a("code"),hur=o("model_type"),uur=o(` property of the config object (either
passed as an argument or loaded from `),EFe=a("code"),pur=o("pretrained_model_name_or_path"),_ur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CFe=a("code"),bur=o("pretrained_model_name_or_path"),vur=o(":"),Fur=l(),p9=a("ul"),$4=a("li"),wFe=a("strong"),Tur=o("speech-encoder-decoder"),Mur=o(" \u2014 "),PH=a("a"),Eur=o("SpeechEncoderDecoderModel"),Cur=o(" (Speech Encoder decoder model)"),wur=l(),k4=a("li"),AFe=a("strong"),Aur=o("speech_to_text"),Lur=o(" \u2014 "),BH=a("a"),yur=o("Speech2TextForConditionalGeneration"),xur=o(" (Speech2Text model)"),$ur=l(),S4=a("p"),kur=o("The model is set in evaluation mode by default using "),LFe=a("code"),Sur=o("model.eval()"),Rur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yFe=a("code"),Pur=o("model.train()"),Bur=l(),F(R4.$$.fragment),dze=l(),Od=a("h2"),P4=a("a"),xFe=a("span"),F(_9.$$.fragment),Nur=l(),$Fe=a("span"),Iur=o("AutoModelForAudioXVector"),cze=l(),Uo=a("div"),F(b9.$$.fragment),qur=l(),Vd=a("p"),jur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),NH=a("a"),Dur=o("from_pretrained()"),Gur=o(" class method or the "),IH=a("a"),Our=o("from_config()"),Vur=o(` class
method.`),Xur=l(),v9=a("p"),zur=o("This class cannot be instantiated directly using "),kFe=a("code"),Qur=o("__init__()"),Wur=o(" (throws an error)."),Hur=l(),Lt=a("div"),F(F9.$$.fragment),Uur=l(),SFe=a("p"),Jur=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Yur=l(),Xd=a("p"),Kur=o(`Note:
Loading a model from its configuration file does `),RFe=a("strong"),Zur=o("not"),epr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=a("a"),opr=o("from_pretrained()"),rpr=o(" to load the model weights."),tpr=l(),F(B4.$$.fragment),apr=l(),po=a("div"),F(T9.$$.fragment),npr=l(),PFe=a("p"),spr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),lpr=l(),en=a("p"),ipr=o("The model class to instantiate is selected based on the "),BFe=a("code"),dpr=o("model_type"),cpr=o(` property of the config object (either
passed as an argument or loaded from `),NFe=a("code"),mpr=o("pretrained_model_name_or_path"),fpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IFe=a("code"),gpr=o("pretrained_model_name_or_path"),hpr=o(":"),upr=l(),tt=a("ul"),N4=a("li"),qFe=a("strong"),ppr=o("data2vec-audio"),_pr=o(" \u2014 "),jH=a("a"),bpr=o("Data2VecAudioForXVector"),vpr=o(" (Data2VecAudio model)"),Fpr=l(),I4=a("li"),jFe=a("strong"),Tpr=o("unispeech-sat"),Mpr=o(" \u2014 "),DH=a("a"),Epr=o("UniSpeechSatForXVector"),Cpr=o(" (UniSpeechSat model)"),wpr=l(),q4=a("li"),DFe=a("strong"),Apr=o("wav2vec2"),Lpr=o(" \u2014 "),GH=a("a"),ypr=o("Wav2Vec2ForXVector"),xpr=o(" (Wav2Vec2 model)"),$pr=l(),j4=a("li"),GFe=a("strong"),kpr=o("wav2vec2-conformer"),Spr=o(" \u2014 "),OH=a("a"),Rpr=o("Wav2Vec2ConformerForXVector"),Ppr=o(" (Wav2Vec2-Conformer model)"),Bpr=l(),D4=a("li"),OFe=a("strong"),Npr=o("wavlm"),Ipr=o(" \u2014 "),VH=a("a"),qpr=o("WavLMForXVector"),jpr=o(" (WavLM model)"),Dpr=l(),G4=a("p"),Gpr=o("The model is set in evaluation mode by default using "),VFe=a("code"),Opr=o("model.eval()"),Vpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),XFe=a("code"),Xpr=o("model.train()"),zpr=l(),F(O4.$$.fragment),mze=l(),zd=a("h2"),V4=a("a"),zFe=a("span"),F(M9.$$.fragment),Qpr=l(),QFe=a("span"),Wpr=o("AutoModelForMaskedImageModeling"),fze=l(),Jo=a("div"),F(E9.$$.fragment),Hpr=l(),Qd=a("p"),Upr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),XH=a("a"),Jpr=o("from_pretrained()"),Ypr=o(" class method or the "),zH=a("a"),Kpr=o("from_config()"),Zpr=o(` class
method.`),e_r=l(),C9=a("p"),o_r=o("This class cannot be instantiated directly using "),WFe=a("code"),r_r=o("__init__()"),t_r=o(" (throws an error)."),a_r=l(),yt=a("div"),F(w9.$$.fragment),n_r=l(),HFe=a("p"),s_r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),l_r=l(),Wd=a("p"),i_r=o(`Note:
Loading a model from its configuration file does `),UFe=a("strong"),d_r=o("not"),c_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=a("a"),m_r=o("from_pretrained()"),f_r=o(" to load the model weights."),g_r=l(),F(X4.$$.fragment),h_r=l(),_o=a("div"),F(A9.$$.fragment),u_r=l(),JFe=a("p"),p_r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),__r=l(),on=a("p"),b_r=o("The model class to instantiate is selected based on the "),YFe=a("code"),v_r=o("model_type"),F_r=o(` property of the config object (either
passed as an argument or loaded from `),KFe=a("code"),T_r=o("pretrained_model_name_or_path"),M_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZFe=a("code"),E_r=o("pretrained_model_name_or_path"),C_r=o(":"),w_r=l(),Hd=a("ul"),z4=a("li"),eTe=a("strong"),A_r=o("deit"),L_r=o(" \u2014 "),WH=a("a"),y_r=o("DeiTForMaskedImageModeling"),x_r=o(" (DeiT model)"),$_r=l(),Q4=a("li"),oTe=a("strong"),k_r=o("swin"),S_r=o(" \u2014 "),HH=a("a"),R_r=o("SwinForMaskedImageModeling"),P_r=o(" (Swin Transformer model)"),B_r=l(),W4=a("li"),rTe=a("strong"),N_r=o("vit"),I_r=o(" \u2014 "),UH=a("a"),q_r=o("ViTForMaskedImageModeling"),j_r=o(" (ViT model)"),D_r=l(),H4=a("p"),G_r=o("The model is set in evaluation mode by default using "),tTe=a("code"),O_r=o("model.eval()"),V_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aTe=a("code"),X_r=o("model.train()"),z_r=l(),F(U4.$$.fragment),gze=l(),Ud=a("h2"),J4=a("a"),nTe=a("span"),F(L9.$$.fragment),Q_r=l(),sTe=a("span"),W_r=o("AutoModelForObjectDetection"),hze=l(),Yo=a("div"),F(y9.$$.fragment),H_r=l(),Jd=a("p"),U_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),JH=a("a"),J_r=o("from_pretrained()"),Y_r=o(" class method or the "),YH=a("a"),K_r=o("from_config()"),Z_r=o(` class
method.`),e2r=l(),x9=a("p"),o2r=o("This class cannot be instantiated directly using "),lTe=a("code"),r2r=o("__init__()"),t2r=o(" (throws an error)."),a2r=l(),xt=a("div"),F($9.$$.fragment),n2r=l(),iTe=a("p"),s2r=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),l2r=l(),Yd=a("p"),i2r=o(`Note:
Loading a model from its configuration file does `),dTe=a("strong"),d2r=o("not"),c2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KH=a("a"),m2r=o("from_pretrained()"),f2r=o(" to load the model weights."),g2r=l(),F(Y4.$$.fragment),h2r=l(),bo=a("div"),F(k9.$$.fragment),u2r=l(),cTe=a("p"),p2r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),_2r=l(),rn=a("p"),b2r=o("The model class to instantiate is selected based on the "),mTe=a("code"),v2r=o("model_type"),F2r=o(` property of the config object (either
passed as an argument or loaded from `),fTe=a("code"),T2r=o("pretrained_model_name_or_path"),M2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gTe=a("code"),E2r=o("pretrained_model_name_or_path"),C2r=o(":"),w2r=l(),S9=a("ul"),K4=a("li"),hTe=a("strong"),A2r=o("detr"),L2r=o(" \u2014 "),ZH=a("a"),y2r=o("DetrForObjectDetection"),x2r=o(" (DETR model)"),$2r=l(),Z4=a("li"),uTe=a("strong"),k2r=o("yolos"),S2r=o(" \u2014 "),eU=a("a"),R2r=o("YolosForObjectDetection"),P2r=o(" (YOLOS model)"),B2r=l(),eE=a("p"),N2r=o("The model is set in evaluation mode by default using "),pTe=a("code"),I2r=o("model.eval()"),q2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_Te=a("code"),j2r=o("model.train()"),D2r=l(),F(oE.$$.fragment),uze=l(),Kd=a("h2"),rE=a("a"),bTe=a("span"),F(R9.$$.fragment),G2r=l(),vTe=a("span"),O2r=o("AutoModelForImageSegmentation"),pze=l(),Ko=a("div"),F(P9.$$.fragment),V2r=l(),Zd=a("p"),X2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),oU=a("a"),z2r=o("from_pretrained()"),Q2r=o(" class method or the "),rU=a("a"),W2r=o("from_config()"),H2r=o(` class
method.`),U2r=l(),B9=a("p"),J2r=o("This class cannot be instantiated directly using "),FTe=a("code"),Y2r=o("__init__()"),K2r=o(" (throws an error)."),Z2r=l(),$t=a("div"),F(N9.$$.fragment),ebr=l(),TTe=a("p"),obr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),rbr=l(),ec=a("p"),tbr=o(`Note:
Loading a model from its configuration file does `),MTe=a("strong"),abr=o("not"),nbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=a("a"),sbr=o("from_pretrained()"),lbr=o(" to load the model weights."),ibr=l(),F(tE.$$.fragment),dbr=l(),vo=a("div"),F(I9.$$.fragment),cbr=l(),ETe=a("p"),mbr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),fbr=l(),tn=a("p"),gbr=o("The model class to instantiate is selected based on the "),CTe=a("code"),hbr=o("model_type"),ubr=o(` property of the config object (either
passed as an argument or loaded from `),wTe=a("code"),pbr=o("pretrained_model_name_or_path"),_br=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ATe=a("code"),bbr=o("pretrained_model_name_or_path"),vbr=o(":"),Fbr=l(),LTe=a("ul"),aE=a("li"),yTe=a("strong"),Tbr=o("detr"),Mbr=o(" \u2014 "),aU=a("a"),Ebr=o("DetrForSegmentation"),Cbr=o(" (DETR model)"),wbr=l(),nE=a("p"),Abr=o("The model is set in evaluation mode by default using "),xTe=a("code"),Lbr=o("model.eval()"),ybr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$Te=a("code"),xbr=o("model.train()"),$br=l(),F(sE.$$.fragment),_ze=l(),oc=a("h2"),lE=a("a"),kTe=a("span"),F(q9.$$.fragment),kbr=l(),STe=a("span"),Sbr=o("AutoModelForSemanticSegmentation"),bze=l(),Zo=a("div"),F(j9.$$.fragment),Rbr=l(),rc=a("p"),Pbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),nU=a("a"),Bbr=o("from_pretrained()"),Nbr=o(" class method or the "),sU=a("a"),Ibr=o("from_config()"),qbr=o(` class
method.`),jbr=l(),D9=a("p"),Dbr=o("This class cannot be instantiated directly using "),RTe=a("code"),Gbr=o("__init__()"),Obr=o(" (throws an error)."),Vbr=l(),kt=a("div"),F(G9.$$.fragment),Xbr=l(),PTe=a("p"),zbr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Qbr=l(),tc=a("p"),Wbr=o(`Note:
Loading a model from its configuration file does `),BTe=a("strong"),Hbr=o("not"),Ubr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=a("a"),Jbr=o("from_pretrained()"),Ybr=o(" to load the model weights."),Kbr=l(),F(iE.$$.fragment),Zbr=l(),Fo=a("div"),F(O9.$$.fragment),evr=l(),NTe=a("p"),ovr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),rvr=l(),an=a("p"),tvr=o("The model class to instantiate is selected based on the "),ITe=a("code"),avr=o("model_type"),nvr=o(` property of the config object (either
passed as an argument or loaded from `),qTe=a("code"),svr=o("pretrained_model_name_or_path"),lvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jTe=a("code"),ivr=o("pretrained_model_name_or_path"),dvr=o(":"),cvr=l(),at=a("ul"),dE=a("li"),DTe=a("strong"),mvr=o("beit"),fvr=o(" \u2014 "),iU=a("a"),gvr=o("BeitForSemanticSegmentation"),hvr=o(" (BEiT model)"),uvr=l(),cE=a("li"),GTe=a("strong"),pvr=o("data2vec-vision"),_vr=o(" \u2014 "),dU=a("a"),bvr=o("Data2VecVisionForSemanticSegmentation"),vvr=o(" (Data2VecVision model)"),Fvr=l(),mE=a("li"),OTe=a("strong"),Tvr=o("dpt"),Mvr=o(" \u2014 "),cU=a("a"),Evr=o("DPTForSemanticSegmentation"),Cvr=o(" (DPT model)"),wvr=l(),fE=a("li"),VTe=a("strong"),Avr=o("mobilevit"),Lvr=o(" \u2014 "),mU=a("a"),yvr=o("MobileViTForSemanticSegmentation"),xvr=o(" (MobileViT model)"),$vr=l(),gE=a("li"),XTe=a("strong"),kvr=o("segformer"),Svr=o(" \u2014 "),fU=a("a"),Rvr=o("SegformerForSemanticSegmentation"),Pvr=o(" (SegFormer model)"),Bvr=l(),hE=a("p"),Nvr=o("The model is set in evaluation mode by default using "),zTe=a("code"),Ivr=o("model.eval()"),qvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),QTe=a("code"),jvr=o("model.train()"),Dvr=l(),F(uE.$$.fragment),vze=l(),ac=a("h2"),pE=a("a"),WTe=a("span"),F(V9.$$.fragment),Gvr=l(),HTe=a("span"),Ovr=o("AutoModelForInstanceSegmentation"),Fze=l(),er=a("div"),F(X9.$$.fragment),Vvr=l(),nc=a("p"),Xvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),gU=a("a"),zvr=o("from_pretrained()"),Qvr=o(" class method or the "),hU=a("a"),Wvr=o("from_config()"),Hvr=o(` class
method.`),Uvr=l(),z9=a("p"),Jvr=o("This class cannot be instantiated directly using "),UTe=a("code"),Yvr=o("__init__()"),Kvr=o(" (throws an error)."),Zvr=l(),St=a("div"),F(Q9.$$.fragment),e1r=l(),JTe=a("p"),o1r=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),r1r=l(),sc=a("p"),t1r=o(`Note:
Loading a model from its configuration file does `),YTe=a("strong"),a1r=o("not"),n1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=a("a"),s1r=o("from_pretrained()"),l1r=o(" to load the model weights."),i1r=l(),F(_E.$$.fragment),d1r=l(),To=a("div"),F(W9.$$.fragment),c1r=l(),KTe=a("p"),m1r=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),f1r=l(),nn=a("p"),g1r=o("The model class to instantiate is selected based on the "),ZTe=a("code"),h1r=o("model_type"),u1r=o(` property of the config object (either
passed as an argument or loaded from `),eMe=a("code"),p1r=o("pretrained_model_name_or_path"),_1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oMe=a("code"),b1r=o("pretrained_model_name_or_path"),v1r=o(":"),F1r=l(),rMe=a("ul"),bE=a("li"),tMe=a("strong"),T1r=o("maskformer"),M1r=o(" \u2014 "),pU=a("a"),E1r=o("MaskFormerForInstanceSegmentation"),C1r=o(" (MaskFormer model)"),w1r=l(),vE=a("p"),A1r=o("The model is set in evaluation mode by default using "),aMe=a("code"),L1r=o("model.eval()"),y1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nMe=a("code"),x1r=o("model.train()"),$1r=l(),F(FE.$$.fragment),Tze=l(),lc=a("h2"),TE=a("a"),sMe=a("span"),F(H9.$$.fragment),k1r=l(),lMe=a("span"),S1r=o("TFAutoModel"),Mze=l(),or=a("div"),F(U9.$$.fragment),R1r=l(),ic=a("p"),P1r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_U=a("a"),B1r=o("from_pretrained()"),N1r=o(" class method or the "),bU=a("a"),I1r=o("from_config()"),q1r=o(` class
method.`),j1r=l(),J9=a("p"),D1r=o("This class cannot be instantiated directly using "),iMe=a("code"),G1r=o("__init__()"),O1r=o(" (throws an error)."),V1r=l(),Rt=a("div"),F(Y9.$$.fragment),X1r=l(),dMe=a("p"),z1r=o("Instantiates one of the base model classes of the library from a configuration."),Q1r=l(),dc=a("p"),W1r=o(`Note:
Loading a model from its configuration file does `),cMe=a("strong"),H1r=o("not"),U1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=a("a"),J1r=o("from_pretrained()"),Y1r=o(" to load the model weights."),K1r=l(),F(ME.$$.fragment),Z1r=l(),xr=a("div"),F(K9.$$.fragment),eFr=l(),mMe=a("p"),oFr=o("Instantiate one of the base model classes of the library from a pretrained model."),rFr=l(),sn=a("p"),tFr=o("The model class to instantiate is selected based on the "),fMe=a("code"),aFr=o("model_type"),nFr=o(` property of the config object (either
passed as an argument or loaded from `),gMe=a("code"),sFr=o("pretrained_model_name_or_path"),lFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hMe=a("code"),iFr=o("pretrained_model_name_or_path"),dFr=o(":"),cFr=l(),q=a("ul"),EE=a("li"),uMe=a("strong"),mFr=o("albert"),fFr=o(" \u2014 "),FU=a("a"),gFr=o("TFAlbertModel"),hFr=o(" (ALBERT model)"),uFr=l(),CE=a("li"),pMe=a("strong"),pFr=o("bart"),_Fr=o(" \u2014 "),TU=a("a"),bFr=o("TFBartModel"),vFr=o(" (BART model)"),FFr=l(),wE=a("li"),_Me=a("strong"),TFr=o("bert"),MFr=o(" \u2014 "),MU=a("a"),EFr=o("TFBertModel"),CFr=o(" (BERT model)"),wFr=l(),AE=a("li"),bMe=a("strong"),AFr=o("blenderbot"),LFr=o(" \u2014 "),EU=a("a"),yFr=o("TFBlenderbotModel"),xFr=o(" (Blenderbot model)"),$Fr=l(),LE=a("li"),vMe=a("strong"),kFr=o("blenderbot-small"),SFr=o(" \u2014 "),CU=a("a"),RFr=o("TFBlenderbotSmallModel"),PFr=o(" (BlenderbotSmall model)"),BFr=l(),yE=a("li"),FMe=a("strong"),NFr=o("camembert"),IFr=o(" \u2014 "),wU=a("a"),qFr=o("TFCamembertModel"),jFr=o(" (CamemBERT model)"),DFr=l(),xE=a("li"),TMe=a("strong"),GFr=o("clip"),OFr=o(" \u2014 "),AU=a("a"),VFr=o("TFCLIPModel"),XFr=o(" (CLIP model)"),zFr=l(),$E=a("li"),MMe=a("strong"),QFr=o("convbert"),WFr=o(" \u2014 "),LU=a("a"),HFr=o("TFConvBertModel"),UFr=o(" (ConvBERT model)"),JFr=l(),kE=a("li"),EMe=a("strong"),YFr=o("convnext"),KFr=o(" \u2014 "),yU=a("a"),ZFr=o("TFConvNextModel"),eTr=o(" (ConvNeXT model)"),oTr=l(),SE=a("li"),CMe=a("strong"),rTr=o("ctrl"),tTr=o(" \u2014 "),xU=a("a"),aTr=o("TFCTRLModel"),nTr=o(" (CTRL model)"),sTr=l(),RE=a("li"),wMe=a("strong"),lTr=o("data2vec-vision"),iTr=o(" \u2014 "),$U=a("a"),dTr=o("TFData2VecVisionModel"),cTr=o(" (Data2VecVision model)"),mTr=l(),PE=a("li"),AMe=a("strong"),fTr=o("deberta"),gTr=o(" \u2014 "),kU=a("a"),hTr=o("TFDebertaModel"),uTr=o(" (DeBERTa model)"),pTr=l(),BE=a("li"),LMe=a("strong"),_Tr=o("deberta-v2"),bTr=o(" \u2014 "),SU=a("a"),vTr=o("TFDebertaV2Model"),FTr=o(" (DeBERTa-v2 model)"),TTr=l(),NE=a("li"),yMe=a("strong"),MTr=o("deit"),ETr=o(" \u2014 "),RU=a("a"),CTr=o("TFDeiTModel"),wTr=o(" (DeiT model)"),ATr=l(),IE=a("li"),xMe=a("strong"),LTr=o("distilbert"),yTr=o(" \u2014 "),PU=a("a"),xTr=o("TFDistilBertModel"),$Tr=o(" (DistilBERT model)"),kTr=l(),qE=a("li"),$Me=a("strong"),STr=o("dpr"),RTr=o(" \u2014 "),BU=a("a"),PTr=o("TFDPRQuestionEncoder"),BTr=o(" (DPR model)"),NTr=l(),jE=a("li"),kMe=a("strong"),ITr=o("electra"),qTr=o(" \u2014 "),NU=a("a"),jTr=o("TFElectraModel"),DTr=o(" (ELECTRA model)"),GTr=l(),DE=a("li"),SMe=a("strong"),OTr=o("flaubert"),VTr=o(" \u2014 "),IU=a("a"),XTr=o("TFFlaubertModel"),zTr=o(" (FlauBERT model)"),QTr=l(),Ys=a("li"),RMe=a("strong"),WTr=o("funnel"),HTr=o(" \u2014 "),qU=a("a"),UTr=o("TFFunnelModel"),JTr=o(" or "),jU=a("a"),YTr=o("TFFunnelBaseModel"),KTr=o(" (Funnel Transformer model)"),ZTr=l(),GE=a("li"),PMe=a("strong"),eMr=o("gpt2"),oMr=o(" \u2014 "),DU=a("a"),rMr=o("TFGPT2Model"),tMr=o(" (OpenAI GPT-2 model)"),aMr=l(),OE=a("li"),BMe=a("strong"),nMr=o("gptj"),sMr=o(" \u2014 "),GU=a("a"),lMr=o("TFGPTJModel"),iMr=o(" (GPT-J model)"),dMr=l(),VE=a("li"),NMe=a("strong"),cMr=o("hubert"),mMr=o(" \u2014 "),OU=a("a"),fMr=o("TFHubertModel"),gMr=o(" (Hubert model)"),hMr=l(),XE=a("li"),IMe=a("strong"),uMr=o("layoutlm"),pMr=o(" \u2014 "),VU=a("a"),_Mr=o("TFLayoutLMModel"),bMr=o(" (LayoutLM model)"),vMr=l(),zE=a("li"),qMe=a("strong"),FMr=o("led"),TMr=o(" \u2014 "),XU=a("a"),MMr=o("TFLEDModel"),EMr=o(" (LED model)"),CMr=l(),QE=a("li"),jMe=a("strong"),wMr=o("longformer"),AMr=o(" \u2014 "),zU=a("a"),LMr=o("TFLongformerModel"),yMr=o(" (Longformer model)"),xMr=l(),WE=a("li"),DMe=a("strong"),$Mr=o("lxmert"),kMr=o(" \u2014 "),QU=a("a"),SMr=o("TFLxmertModel"),RMr=o(" (LXMERT model)"),PMr=l(),HE=a("li"),GMe=a("strong"),BMr=o("marian"),NMr=o(" \u2014 "),WU=a("a"),IMr=o("TFMarianModel"),qMr=o(" (Marian model)"),jMr=l(),UE=a("li"),OMe=a("strong"),DMr=o("mbart"),GMr=o(" \u2014 "),HU=a("a"),OMr=o("TFMBartModel"),VMr=o(" (mBART model)"),XMr=l(),JE=a("li"),VMe=a("strong"),zMr=o("mobilebert"),QMr=o(" \u2014 "),UU=a("a"),WMr=o("TFMobileBertModel"),HMr=o(" (MobileBERT model)"),UMr=l(),YE=a("li"),XMe=a("strong"),JMr=o("mpnet"),YMr=o(" \u2014 "),JU=a("a"),KMr=o("TFMPNetModel"),ZMr=o(" (MPNet model)"),e4r=l(),KE=a("li"),zMe=a("strong"),o4r=o("mt5"),r4r=o(" \u2014 "),YU=a("a"),t4r=o("TFMT5Model"),a4r=o(" (MT5 model)"),n4r=l(),ZE=a("li"),QMe=a("strong"),s4r=o("openai-gpt"),l4r=o(" \u2014 "),KU=a("a"),i4r=o("TFOpenAIGPTModel"),d4r=o(" (OpenAI GPT model)"),c4r=l(),eC=a("li"),WMe=a("strong"),m4r=o("opt"),f4r=o(" \u2014 "),ZU=a("a"),g4r=o("TFOPTModel"),h4r=o(" (OPT model)"),u4r=l(),oC=a("li"),HMe=a("strong"),p4r=o("pegasus"),_4r=o(" \u2014 "),eJ=a("a"),b4r=o("TFPegasusModel"),v4r=o(" (Pegasus model)"),F4r=l(),rC=a("li"),UMe=a("strong"),T4r=o("regnet"),M4r=o(" \u2014 "),oJ=a("a"),E4r=o("TFRegNetModel"),C4r=o(" (RegNet model)"),w4r=l(),tC=a("li"),JMe=a("strong"),A4r=o("rembert"),L4r=o(" \u2014 "),rJ=a("a"),y4r=o("TFRemBertModel"),x4r=o(" (RemBERT model)"),$4r=l(),aC=a("li"),YMe=a("strong"),k4r=o("resnet"),S4r=o(" \u2014 "),tJ=a("a"),R4r=o("TFResNetModel"),P4r=o(" (ResNet model)"),B4r=l(),nC=a("li"),KMe=a("strong"),N4r=o("roberta"),I4r=o(" \u2014 "),aJ=a("a"),q4r=o("TFRobertaModel"),j4r=o(" (RoBERTa model)"),D4r=l(),sC=a("li"),ZMe=a("strong"),G4r=o("roformer"),O4r=o(" \u2014 "),nJ=a("a"),V4r=o("TFRoFormerModel"),X4r=o(" (RoFormer model)"),z4r=l(),lC=a("li"),e4e=a("strong"),Q4r=o("speech_to_text"),W4r=o(" \u2014 "),sJ=a("a"),H4r=o("TFSpeech2TextModel"),U4r=o(" (Speech2Text model)"),J4r=l(),iC=a("li"),o4e=a("strong"),Y4r=o("swin"),K4r=o(" \u2014 "),lJ=a("a"),Z4r=o("TFSwinModel"),eEr=o(" (Swin Transformer model)"),oEr=l(),dC=a("li"),r4e=a("strong"),rEr=o("t5"),tEr=o(" \u2014 "),iJ=a("a"),aEr=o("TFT5Model"),nEr=o(" (T5 model)"),sEr=l(),cC=a("li"),t4e=a("strong"),lEr=o("tapas"),iEr=o(" \u2014 "),dJ=a("a"),dEr=o("TFTapasModel"),cEr=o(" (TAPAS model)"),mEr=l(),mC=a("li"),a4e=a("strong"),fEr=o("transfo-xl"),gEr=o(" \u2014 "),cJ=a("a"),hEr=o("TFTransfoXLModel"),uEr=o(" (Transformer-XL model)"),pEr=l(),fC=a("li"),n4e=a("strong"),_Er=o("vit"),bEr=o(" \u2014 "),mJ=a("a"),vEr=o("TFViTModel"),FEr=o(" (ViT model)"),TEr=l(),gC=a("li"),s4e=a("strong"),MEr=o("vit_mae"),EEr=o(" \u2014 "),fJ=a("a"),CEr=o("TFViTMAEModel"),wEr=o(" (ViTMAE model)"),AEr=l(),hC=a("li"),l4e=a("strong"),LEr=o("wav2vec2"),yEr=o(" \u2014 "),gJ=a("a"),xEr=o("TFWav2Vec2Model"),$Er=o(" (Wav2Vec2 model)"),kEr=l(),uC=a("li"),i4e=a("strong"),SEr=o("xlm"),REr=o(" \u2014 "),hJ=a("a"),PEr=o("TFXLMModel"),BEr=o(" (XLM model)"),NEr=l(),pC=a("li"),d4e=a("strong"),IEr=o("xlm-roberta"),qEr=o(" \u2014 "),uJ=a("a"),jEr=o("TFXLMRobertaModel"),DEr=o(" (XLM-RoBERTa model)"),GEr=l(),_C=a("li"),c4e=a("strong"),OEr=o("xlnet"),VEr=o(" \u2014 "),pJ=a("a"),XEr=o("TFXLNetModel"),zEr=o(" (XLNet model)"),QEr=l(),F(bC.$$.fragment),Eze=l(),cc=a("h2"),vC=a("a"),m4e=a("span"),F(Z9.$$.fragment),WEr=l(),f4e=a("span"),HEr=o("TFAutoModelForPreTraining"),Cze=l(),rr=a("div"),F(ex.$$.fragment),UEr=l(),mc=a("p"),JEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_J=a("a"),YEr=o("from_pretrained()"),KEr=o(" class method or the "),bJ=a("a"),ZEr=o("from_config()"),eCr=o(` class
method.`),oCr=l(),ox=a("p"),rCr=o("This class cannot be instantiated directly using "),g4e=a("code"),tCr=o("__init__()"),aCr=o(" (throws an error)."),nCr=l(),Pt=a("div"),F(rx.$$.fragment),sCr=l(),h4e=a("p"),lCr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),iCr=l(),fc=a("p"),dCr=o(`Note:
Loading a model from its configuration file does `),u4e=a("strong"),cCr=o("not"),mCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vJ=a("a"),fCr=o("from_pretrained()"),gCr=o(" to load the model weights."),hCr=l(),F(FC.$$.fragment),uCr=l(),$r=a("div"),F(tx.$$.fragment),pCr=l(),p4e=a("p"),_Cr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),bCr=l(),ln=a("p"),vCr=o("The model class to instantiate is selected based on the "),_4e=a("code"),FCr=o("model_type"),TCr=o(` property of the config object (either
passed as an argument or loaded from `),b4e=a("code"),MCr=o("pretrained_model_name_or_path"),ECr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v4e=a("code"),CCr=o("pretrained_model_name_or_path"),wCr=o(":"),ACr=l(),se=a("ul"),TC=a("li"),F4e=a("strong"),LCr=o("albert"),yCr=o(" \u2014 "),FJ=a("a"),xCr=o("TFAlbertForPreTraining"),$Cr=o(" (ALBERT model)"),kCr=l(),MC=a("li"),T4e=a("strong"),SCr=o("bart"),RCr=o(" \u2014 "),TJ=a("a"),PCr=o("TFBartForConditionalGeneration"),BCr=o(" (BART model)"),NCr=l(),EC=a("li"),M4e=a("strong"),ICr=o("bert"),qCr=o(" \u2014 "),MJ=a("a"),jCr=o("TFBertForPreTraining"),DCr=o(" (BERT model)"),GCr=l(),CC=a("li"),E4e=a("strong"),OCr=o("camembert"),VCr=o(" \u2014 "),EJ=a("a"),XCr=o("TFCamembertForMaskedLM"),zCr=o(" (CamemBERT model)"),QCr=l(),wC=a("li"),C4e=a("strong"),WCr=o("ctrl"),HCr=o(" \u2014 "),CJ=a("a"),UCr=o("TFCTRLLMHeadModel"),JCr=o(" (CTRL model)"),YCr=l(),AC=a("li"),w4e=a("strong"),KCr=o("distilbert"),ZCr=o(" \u2014 "),wJ=a("a"),e3r=o("TFDistilBertForMaskedLM"),o3r=o(" (DistilBERT model)"),r3r=l(),LC=a("li"),A4e=a("strong"),t3r=o("electra"),a3r=o(" \u2014 "),AJ=a("a"),n3r=o("TFElectraForPreTraining"),s3r=o(" (ELECTRA model)"),l3r=l(),yC=a("li"),L4e=a("strong"),i3r=o("flaubert"),d3r=o(" \u2014 "),LJ=a("a"),c3r=o("TFFlaubertWithLMHeadModel"),m3r=o(" (FlauBERT model)"),f3r=l(),xC=a("li"),y4e=a("strong"),g3r=o("funnel"),h3r=o(" \u2014 "),yJ=a("a"),u3r=o("TFFunnelForPreTraining"),p3r=o(" (Funnel Transformer model)"),_3r=l(),$C=a("li"),x4e=a("strong"),b3r=o("gpt2"),v3r=o(" \u2014 "),xJ=a("a"),F3r=o("TFGPT2LMHeadModel"),T3r=o(" (OpenAI GPT-2 model)"),M3r=l(),kC=a("li"),$4e=a("strong"),E3r=o("layoutlm"),C3r=o(" \u2014 "),$J=a("a"),w3r=o("TFLayoutLMForMaskedLM"),A3r=o(" (LayoutLM model)"),L3r=l(),SC=a("li"),k4e=a("strong"),y3r=o("lxmert"),x3r=o(" \u2014 "),kJ=a("a"),$3r=o("TFLxmertForPreTraining"),k3r=o(" (LXMERT model)"),S3r=l(),RC=a("li"),S4e=a("strong"),R3r=o("mobilebert"),P3r=o(" \u2014 "),SJ=a("a"),B3r=o("TFMobileBertForPreTraining"),N3r=o(" (MobileBERT model)"),I3r=l(),PC=a("li"),R4e=a("strong"),q3r=o("mpnet"),j3r=o(" \u2014 "),RJ=a("a"),D3r=o("TFMPNetForMaskedLM"),G3r=o(" (MPNet model)"),O3r=l(),BC=a("li"),P4e=a("strong"),V3r=o("openai-gpt"),X3r=o(" \u2014 "),PJ=a("a"),z3r=o("TFOpenAIGPTLMHeadModel"),Q3r=o(" (OpenAI GPT model)"),W3r=l(),NC=a("li"),B4e=a("strong"),H3r=o("roberta"),U3r=o(" \u2014 "),BJ=a("a"),J3r=o("TFRobertaForMaskedLM"),Y3r=o(" (RoBERTa model)"),K3r=l(),IC=a("li"),N4e=a("strong"),Z3r=o("t5"),e5r=o(" \u2014 "),NJ=a("a"),o5r=o("TFT5ForConditionalGeneration"),r5r=o(" (T5 model)"),t5r=l(),qC=a("li"),I4e=a("strong"),a5r=o("tapas"),n5r=o(" \u2014 "),IJ=a("a"),s5r=o("TFTapasForMaskedLM"),l5r=o(" (TAPAS model)"),i5r=l(),jC=a("li"),q4e=a("strong"),d5r=o("transfo-xl"),c5r=o(" \u2014 "),qJ=a("a"),m5r=o("TFTransfoXLLMHeadModel"),f5r=o(" (Transformer-XL model)"),g5r=l(),DC=a("li"),j4e=a("strong"),h5r=o("vit_mae"),u5r=o(" \u2014 "),jJ=a("a"),p5r=o("TFViTMAEForPreTraining"),_5r=o(" (ViTMAE model)"),b5r=l(),GC=a("li"),D4e=a("strong"),v5r=o("xlm"),F5r=o(" \u2014 "),DJ=a("a"),T5r=o("TFXLMWithLMHeadModel"),M5r=o(" (XLM model)"),E5r=l(),OC=a("li"),G4e=a("strong"),C5r=o("xlm-roberta"),w5r=o(" \u2014 "),GJ=a("a"),A5r=o("TFXLMRobertaForMaskedLM"),L5r=o(" (XLM-RoBERTa model)"),y5r=l(),VC=a("li"),O4e=a("strong"),x5r=o("xlnet"),$5r=o(" \u2014 "),OJ=a("a"),k5r=o("TFXLNetLMHeadModel"),S5r=o(" (XLNet model)"),R5r=l(),F(XC.$$.fragment),wze=l(),gc=a("h2"),zC=a("a"),V4e=a("span"),F(ax.$$.fragment),P5r=l(),X4e=a("span"),B5r=o("TFAutoModelForCausalLM"),Aze=l(),tr=a("div"),F(nx.$$.fragment),N5r=l(),hc=a("p"),I5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),VJ=a("a"),q5r=o("from_pretrained()"),j5r=o(" class method or the "),XJ=a("a"),D5r=o("from_config()"),G5r=o(` class
method.`),O5r=l(),sx=a("p"),V5r=o("This class cannot be instantiated directly using "),z4e=a("code"),X5r=o("__init__()"),z5r=o(" (throws an error)."),Q5r=l(),Bt=a("div"),F(lx.$$.fragment),W5r=l(),Q4e=a("p"),H5r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),U5r=l(),uc=a("p"),J5r=o(`Note:
Loading a model from its configuration file does `),W4e=a("strong"),Y5r=o("not"),K5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=a("a"),Z5r=o("from_pretrained()"),e0r=o(" to load the model weights."),o0r=l(),F(QC.$$.fragment),r0r=l(),kr=a("div"),F(ix.$$.fragment),t0r=l(),H4e=a("p"),a0r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),n0r=l(),dn=a("p"),s0r=o("The model class to instantiate is selected based on the "),U4e=a("code"),l0r=o("model_type"),i0r=o(` property of the config object (either
passed as an argument or loaded from `),J4e=a("code"),d0r=o("pretrained_model_name_or_path"),c0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y4e=a("code"),m0r=o("pretrained_model_name_or_path"),f0r=o(":"),g0r=l(),Me=a("ul"),WC=a("li"),K4e=a("strong"),h0r=o("bert"),u0r=o(" \u2014 "),QJ=a("a"),p0r=o("TFBertLMHeadModel"),_0r=o(" (BERT model)"),b0r=l(),HC=a("li"),Z4e=a("strong"),v0r=o("camembert"),F0r=o(" \u2014 "),WJ=a("a"),T0r=o("TFCamembertForCausalLM"),M0r=o(" (CamemBERT model)"),E0r=l(),UC=a("li"),eEe=a("strong"),C0r=o("ctrl"),w0r=o(" \u2014 "),HJ=a("a"),A0r=o("TFCTRLLMHeadModel"),L0r=o(" (CTRL model)"),y0r=l(),JC=a("li"),oEe=a("strong"),x0r=o("gpt2"),$0r=o(" \u2014 "),UJ=a("a"),k0r=o("TFGPT2LMHeadModel"),S0r=o(" (OpenAI GPT-2 model)"),R0r=l(),YC=a("li"),rEe=a("strong"),P0r=o("gptj"),B0r=o(" \u2014 "),JJ=a("a"),N0r=o("TFGPTJForCausalLM"),I0r=o(" (GPT-J model)"),q0r=l(),KC=a("li"),tEe=a("strong"),j0r=o("openai-gpt"),D0r=o(" \u2014 "),YJ=a("a"),G0r=o("TFOpenAIGPTLMHeadModel"),O0r=o(" (OpenAI GPT model)"),V0r=l(),ZC=a("li"),aEe=a("strong"),X0r=o("opt"),z0r=o(" \u2014 "),KJ=a("a"),Q0r=o("TFOPTForCausalLM"),W0r=o(" (OPT model)"),H0r=l(),e3=a("li"),nEe=a("strong"),U0r=o("rembert"),J0r=o(" \u2014 "),ZJ=a("a"),Y0r=o("TFRemBertForCausalLM"),K0r=o(" (RemBERT model)"),Z0r=l(),o3=a("li"),sEe=a("strong"),ewr=o("roberta"),owr=o(" \u2014 "),eY=a("a"),rwr=o("TFRobertaForCausalLM"),twr=o(" (RoBERTa model)"),awr=l(),r3=a("li"),lEe=a("strong"),nwr=o("roformer"),swr=o(" \u2014 "),oY=a("a"),lwr=o("TFRoFormerForCausalLM"),iwr=o(" (RoFormer model)"),dwr=l(),t3=a("li"),iEe=a("strong"),cwr=o("transfo-xl"),mwr=o(" \u2014 "),rY=a("a"),fwr=o("TFTransfoXLLMHeadModel"),gwr=o(" (Transformer-XL model)"),hwr=l(),a3=a("li"),dEe=a("strong"),uwr=o("xlm"),pwr=o(" \u2014 "),tY=a("a"),_wr=o("TFXLMWithLMHeadModel"),bwr=o(" (XLM model)"),vwr=l(),n3=a("li"),cEe=a("strong"),Fwr=o("xlnet"),Twr=o(" \u2014 "),aY=a("a"),Mwr=o("TFXLNetLMHeadModel"),Ewr=o(" (XLNet model)"),Cwr=l(),F(s3.$$.fragment),Lze=l(),pc=a("h2"),l3=a("a"),mEe=a("span"),F(dx.$$.fragment),wwr=l(),fEe=a("span"),Awr=o("TFAutoModelForImageClassification"),yze=l(),ar=a("div"),F(cx.$$.fragment),Lwr=l(),_c=a("p"),ywr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nY=a("a"),xwr=o("from_pretrained()"),$wr=o(" class method or the "),sY=a("a"),kwr=o("from_config()"),Swr=o(` class
method.`),Rwr=l(),mx=a("p"),Pwr=o("This class cannot be instantiated directly using "),gEe=a("code"),Bwr=o("__init__()"),Nwr=o(" (throws an error)."),Iwr=l(),Nt=a("div"),F(fx.$$.fragment),qwr=l(),hEe=a("p"),jwr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Dwr=l(),bc=a("p"),Gwr=o(`Note:
Loading a model from its configuration file does `),uEe=a("strong"),Owr=o("not"),Vwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lY=a("a"),Xwr=o("from_pretrained()"),zwr=o(" to load the model weights."),Qwr=l(),F(i3.$$.fragment),Wwr=l(),Sr=a("div"),F(gx.$$.fragment),Hwr=l(),pEe=a("p"),Uwr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Jwr=l(),cn=a("p"),Ywr=o("The model class to instantiate is selected based on the "),_Ee=a("code"),Kwr=o("model_type"),Zwr=o(` property of the config object (either
passed as an argument or loaded from `),bEe=a("code"),eAr=o("pretrained_model_name_or_path"),oAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vEe=a("code"),rAr=o("pretrained_model_name_or_path"),tAr=o(":"),aAr=l(),Qe=a("ul"),d3=a("li"),FEe=a("strong"),nAr=o("convnext"),sAr=o(" \u2014 "),iY=a("a"),lAr=o("TFConvNextForImageClassification"),iAr=o(" (ConvNeXT model)"),dAr=l(),c3=a("li"),TEe=a("strong"),cAr=o("data2vec-vision"),mAr=o(" \u2014 "),dY=a("a"),fAr=o("TFData2VecVisionForImageClassification"),gAr=o(" (Data2VecVision model)"),hAr=l(),Ks=a("li"),MEe=a("strong"),uAr=o("deit"),pAr=o(" \u2014 "),cY=a("a"),_Ar=o("TFDeiTForImageClassification"),bAr=o(" or "),mY=a("a"),vAr=o("TFDeiTForImageClassificationWithTeacher"),FAr=o(" (DeiT model)"),TAr=l(),m3=a("li"),EEe=a("strong"),MAr=o("regnet"),EAr=o(" \u2014 "),fY=a("a"),CAr=o("TFRegNetForImageClassification"),wAr=o(" (RegNet model)"),AAr=l(),f3=a("li"),CEe=a("strong"),LAr=o("resnet"),yAr=o(" \u2014 "),gY=a("a"),xAr=o("TFResNetForImageClassification"),$Ar=o(" (ResNet model)"),kAr=l(),g3=a("li"),wEe=a("strong"),SAr=o("swin"),RAr=o(" \u2014 "),hY=a("a"),PAr=o("TFSwinForImageClassification"),BAr=o(" (Swin Transformer model)"),NAr=l(),h3=a("li"),AEe=a("strong"),IAr=o("vit"),qAr=o(" \u2014 "),uY=a("a"),jAr=o("TFViTForImageClassification"),DAr=o(" (ViT model)"),GAr=l(),F(u3.$$.fragment),xze=l(),vc=a("h2"),p3=a("a"),LEe=a("span"),F(hx.$$.fragment),OAr=l(),yEe=a("span"),VAr=o("TFAutoModelForMaskedLM"),$ze=l(),nr=a("div"),F(ux.$$.fragment),XAr=l(),Fc=a("p"),zAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pY=a("a"),QAr=o("from_pretrained()"),WAr=o(" class method or the "),_Y=a("a"),HAr=o("from_config()"),UAr=o(` class
method.`),JAr=l(),px=a("p"),YAr=o("This class cannot be instantiated directly using "),xEe=a("code"),KAr=o("__init__()"),ZAr=o(" (throws an error)."),e6r=l(),It=a("div"),F(_x.$$.fragment),o6r=l(),$Ee=a("p"),r6r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),t6r=l(),Tc=a("p"),a6r=o(`Note:
Loading a model from its configuration file does `),kEe=a("strong"),n6r=o("not"),s6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bY=a("a"),l6r=o("from_pretrained()"),i6r=o(" to load the model weights."),d6r=l(),F(_3.$$.fragment),c6r=l(),Rr=a("div"),F(bx.$$.fragment),m6r=l(),SEe=a("p"),f6r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),g6r=l(),mn=a("p"),h6r=o("The model class to instantiate is selected based on the "),REe=a("code"),u6r=o("model_type"),p6r=o(` property of the config object (either
passed as an argument or loaded from `),PEe=a("code"),_6r=o("pretrained_model_name_or_path"),b6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BEe=a("code"),v6r=o("pretrained_model_name_or_path"),F6r=o(":"),T6r=l(),ie=a("ul"),b3=a("li"),NEe=a("strong"),M6r=o("albert"),E6r=o(" \u2014 "),vY=a("a"),C6r=o("TFAlbertForMaskedLM"),w6r=o(" (ALBERT model)"),A6r=l(),v3=a("li"),IEe=a("strong"),L6r=o("bert"),y6r=o(" \u2014 "),FY=a("a"),x6r=o("TFBertForMaskedLM"),$6r=o(" (BERT model)"),k6r=l(),F3=a("li"),qEe=a("strong"),S6r=o("camembert"),R6r=o(" \u2014 "),TY=a("a"),P6r=o("TFCamembertForMaskedLM"),B6r=o(" (CamemBERT model)"),N6r=l(),T3=a("li"),jEe=a("strong"),I6r=o("convbert"),q6r=o(" \u2014 "),MY=a("a"),j6r=o("TFConvBertForMaskedLM"),D6r=o(" (ConvBERT model)"),G6r=l(),M3=a("li"),DEe=a("strong"),O6r=o("deberta"),V6r=o(" \u2014 "),EY=a("a"),X6r=o("TFDebertaForMaskedLM"),z6r=o(" (DeBERTa model)"),Q6r=l(),E3=a("li"),GEe=a("strong"),W6r=o("deberta-v2"),H6r=o(" \u2014 "),CY=a("a"),U6r=o("TFDebertaV2ForMaskedLM"),J6r=o(" (DeBERTa-v2 model)"),Y6r=l(),C3=a("li"),OEe=a("strong"),K6r=o("distilbert"),Z6r=o(" \u2014 "),wY=a("a"),e7r=o("TFDistilBertForMaskedLM"),o7r=o(" (DistilBERT model)"),r7r=l(),w3=a("li"),VEe=a("strong"),t7r=o("electra"),a7r=o(" \u2014 "),AY=a("a"),n7r=o("TFElectraForMaskedLM"),s7r=o(" (ELECTRA model)"),l7r=l(),A3=a("li"),XEe=a("strong"),i7r=o("flaubert"),d7r=o(" \u2014 "),LY=a("a"),c7r=o("TFFlaubertWithLMHeadModel"),m7r=o(" (FlauBERT model)"),f7r=l(),L3=a("li"),zEe=a("strong"),g7r=o("funnel"),h7r=o(" \u2014 "),yY=a("a"),u7r=o("TFFunnelForMaskedLM"),p7r=o(" (Funnel Transformer model)"),_7r=l(),y3=a("li"),QEe=a("strong"),b7r=o("layoutlm"),v7r=o(" \u2014 "),xY=a("a"),F7r=o("TFLayoutLMForMaskedLM"),T7r=o(" (LayoutLM model)"),M7r=l(),x3=a("li"),WEe=a("strong"),E7r=o("longformer"),C7r=o(" \u2014 "),$Y=a("a"),w7r=o("TFLongformerForMaskedLM"),A7r=o(" (Longformer model)"),L7r=l(),$3=a("li"),HEe=a("strong"),y7r=o("mobilebert"),x7r=o(" \u2014 "),kY=a("a"),$7r=o("TFMobileBertForMaskedLM"),k7r=o(" (MobileBERT model)"),S7r=l(),k3=a("li"),UEe=a("strong"),R7r=o("mpnet"),P7r=o(" \u2014 "),SY=a("a"),B7r=o("TFMPNetForMaskedLM"),N7r=o(" (MPNet model)"),I7r=l(),S3=a("li"),JEe=a("strong"),q7r=o("rembert"),j7r=o(" \u2014 "),RY=a("a"),D7r=o("TFRemBertForMaskedLM"),G7r=o(" (RemBERT model)"),O7r=l(),R3=a("li"),YEe=a("strong"),V7r=o("roberta"),X7r=o(" \u2014 "),PY=a("a"),z7r=o("TFRobertaForMaskedLM"),Q7r=o(" (RoBERTa model)"),W7r=l(),P3=a("li"),KEe=a("strong"),H7r=o("roformer"),U7r=o(" \u2014 "),BY=a("a"),J7r=o("TFRoFormerForMaskedLM"),Y7r=o(" (RoFormer model)"),K7r=l(),B3=a("li"),ZEe=a("strong"),Z7r=o("tapas"),eLr=o(" \u2014 "),NY=a("a"),oLr=o("TFTapasForMaskedLM"),rLr=o(" (TAPAS model)"),tLr=l(),N3=a("li"),eCe=a("strong"),aLr=o("xlm"),nLr=o(" \u2014 "),IY=a("a"),sLr=o("TFXLMWithLMHeadModel"),lLr=o(" (XLM model)"),iLr=l(),I3=a("li"),oCe=a("strong"),dLr=o("xlm-roberta"),cLr=o(" \u2014 "),qY=a("a"),mLr=o("TFXLMRobertaForMaskedLM"),fLr=o(" (XLM-RoBERTa model)"),gLr=l(),F(q3.$$.fragment),kze=l(),Mc=a("h2"),j3=a("a"),rCe=a("span"),F(vx.$$.fragment),hLr=l(),tCe=a("span"),uLr=o("TFAutoModelForSeq2SeqLM"),Sze=l(),sr=a("div"),F(Fx.$$.fragment),pLr=l(),Ec=a("p"),_Lr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),jY=a("a"),bLr=o("from_pretrained()"),vLr=o(" class method or the "),DY=a("a"),FLr=o("from_config()"),TLr=o(` class
method.`),MLr=l(),Tx=a("p"),ELr=o("This class cannot be instantiated directly using "),aCe=a("code"),CLr=o("__init__()"),wLr=o(" (throws an error)."),ALr=l(),qt=a("div"),F(Mx.$$.fragment),LLr=l(),nCe=a("p"),yLr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),xLr=l(),Cc=a("p"),$Lr=o(`Note:
Loading a model from its configuration file does `),sCe=a("strong"),kLr=o("not"),SLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=a("a"),RLr=o("from_pretrained()"),PLr=o(" to load the model weights."),BLr=l(),F(D3.$$.fragment),NLr=l(),Pr=a("div"),F(Ex.$$.fragment),ILr=l(),lCe=a("p"),qLr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),jLr=l(),fn=a("p"),DLr=o("The model class to instantiate is selected based on the "),iCe=a("code"),GLr=o("model_type"),OLr=o(` property of the config object (either
passed as an argument or loaded from `),dCe=a("code"),VLr=o("pretrained_model_name_or_path"),XLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cCe=a("code"),zLr=o("pretrained_model_name_or_path"),QLr=o(":"),WLr=l(),ye=a("ul"),G3=a("li"),mCe=a("strong"),HLr=o("bart"),ULr=o(" \u2014 "),OY=a("a"),JLr=o("TFBartForConditionalGeneration"),YLr=o(" (BART model)"),KLr=l(),O3=a("li"),fCe=a("strong"),ZLr=o("blenderbot"),eyr=o(" \u2014 "),VY=a("a"),oyr=o("TFBlenderbotForConditionalGeneration"),ryr=o(" (Blenderbot model)"),tyr=l(),V3=a("li"),gCe=a("strong"),ayr=o("blenderbot-small"),nyr=o(" \u2014 "),XY=a("a"),syr=o("TFBlenderbotSmallForConditionalGeneration"),lyr=o(" (BlenderbotSmall model)"),iyr=l(),X3=a("li"),hCe=a("strong"),dyr=o("encoder-decoder"),cyr=o(" \u2014 "),zY=a("a"),myr=o("TFEncoderDecoderModel"),fyr=o(" (Encoder decoder model)"),gyr=l(),z3=a("li"),uCe=a("strong"),hyr=o("led"),uyr=o(" \u2014 "),QY=a("a"),pyr=o("TFLEDForConditionalGeneration"),_yr=o(" (LED model)"),byr=l(),Q3=a("li"),pCe=a("strong"),vyr=o("marian"),Fyr=o(" \u2014 "),WY=a("a"),Tyr=o("TFMarianMTModel"),Myr=o(" (Marian model)"),Eyr=l(),W3=a("li"),_Ce=a("strong"),Cyr=o("mbart"),wyr=o(" \u2014 "),HY=a("a"),Ayr=o("TFMBartForConditionalGeneration"),Lyr=o(" (mBART model)"),yyr=l(),H3=a("li"),bCe=a("strong"),xyr=o("mt5"),$yr=o(" \u2014 "),UY=a("a"),kyr=o("TFMT5ForConditionalGeneration"),Syr=o(" (MT5 model)"),Ryr=l(),U3=a("li"),vCe=a("strong"),Pyr=o("pegasus"),Byr=o(" \u2014 "),JY=a("a"),Nyr=o("TFPegasusForConditionalGeneration"),Iyr=o(" (Pegasus model)"),qyr=l(),J3=a("li"),FCe=a("strong"),jyr=o("t5"),Dyr=o(" \u2014 "),YY=a("a"),Gyr=o("TFT5ForConditionalGeneration"),Oyr=o(" (T5 model)"),Vyr=l(),F(Y3.$$.fragment),Rze=l(),wc=a("h2"),K3=a("a"),TCe=a("span"),F(Cx.$$.fragment),Xyr=l(),MCe=a("span"),zyr=o("TFAutoModelForSequenceClassification"),Pze=l(),lr=a("div"),F(wx.$$.fragment),Qyr=l(),Ac=a("p"),Wyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),KY=a("a"),Hyr=o("from_pretrained()"),Uyr=o(" class method or the "),ZY=a("a"),Jyr=o("from_config()"),Yyr=o(` class
method.`),Kyr=l(),Ax=a("p"),Zyr=o("This class cannot be instantiated directly using "),ECe=a("code"),e8r=o("__init__()"),o8r=o(" (throws an error)."),r8r=l(),jt=a("div"),F(Lx.$$.fragment),t8r=l(),CCe=a("p"),a8r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),n8r=l(),Lc=a("p"),s8r=o(`Note:
Loading a model from its configuration file does `),wCe=a("strong"),l8r=o("not"),i8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eK=a("a"),d8r=o("from_pretrained()"),c8r=o(" to load the model weights."),m8r=l(),F(Z3.$$.fragment),f8r=l(),Br=a("div"),F(yx.$$.fragment),g8r=l(),ACe=a("p"),h8r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),u8r=l(),gn=a("p"),p8r=o("The model class to instantiate is selected based on the "),LCe=a("code"),_8r=o("model_type"),b8r=o(` property of the config object (either
passed as an argument or loaded from `),yCe=a("code"),v8r=o("pretrained_model_name_or_path"),F8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xCe=a("code"),T8r=o("pretrained_model_name_or_path"),M8r=o(":"),E8r=l(),te=a("ul"),e5=a("li"),$Ce=a("strong"),C8r=o("albert"),w8r=o(" \u2014 "),oK=a("a"),A8r=o("TFAlbertForSequenceClassification"),L8r=o(" (ALBERT model)"),y8r=l(),o5=a("li"),kCe=a("strong"),x8r=o("bert"),$8r=o(" \u2014 "),rK=a("a"),k8r=o("TFBertForSequenceClassification"),S8r=o(" (BERT model)"),R8r=l(),r5=a("li"),SCe=a("strong"),P8r=o("camembert"),B8r=o(" \u2014 "),tK=a("a"),N8r=o("TFCamembertForSequenceClassification"),I8r=o(" (CamemBERT model)"),q8r=l(),t5=a("li"),RCe=a("strong"),j8r=o("convbert"),D8r=o(" \u2014 "),aK=a("a"),G8r=o("TFConvBertForSequenceClassification"),O8r=o(" (ConvBERT model)"),V8r=l(),a5=a("li"),PCe=a("strong"),X8r=o("ctrl"),z8r=o(" \u2014 "),nK=a("a"),Q8r=o("TFCTRLForSequenceClassification"),W8r=o(" (CTRL model)"),H8r=l(),n5=a("li"),BCe=a("strong"),U8r=o("deberta"),J8r=o(" \u2014 "),sK=a("a"),Y8r=o("TFDebertaForSequenceClassification"),K8r=o(" (DeBERTa model)"),Z8r=l(),s5=a("li"),NCe=a("strong"),e9r=o("deberta-v2"),o9r=o(" \u2014 "),lK=a("a"),r9r=o("TFDebertaV2ForSequenceClassification"),t9r=o(" (DeBERTa-v2 model)"),a9r=l(),l5=a("li"),ICe=a("strong"),n9r=o("distilbert"),s9r=o(" \u2014 "),iK=a("a"),l9r=o("TFDistilBertForSequenceClassification"),i9r=o(" (DistilBERT model)"),d9r=l(),i5=a("li"),qCe=a("strong"),c9r=o("electra"),m9r=o(" \u2014 "),dK=a("a"),f9r=o("TFElectraForSequenceClassification"),g9r=o(" (ELECTRA model)"),h9r=l(),d5=a("li"),jCe=a("strong"),u9r=o("flaubert"),p9r=o(" \u2014 "),cK=a("a"),_9r=o("TFFlaubertForSequenceClassification"),b9r=o(" (FlauBERT model)"),v9r=l(),c5=a("li"),DCe=a("strong"),F9r=o("funnel"),T9r=o(" \u2014 "),mK=a("a"),M9r=o("TFFunnelForSequenceClassification"),E9r=o(" (Funnel Transformer model)"),C9r=l(),m5=a("li"),GCe=a("strong"),w9r=o("gpt2"),A9r=o(" \u2014 "),fK=a("a"),L9r=o("TFGPT2ForSequenceClassification"),y9r=o(" (OpenAI GPT-2 model)"),x9r=l(),f5=a("li"),OCe=a("strong"),$9r=o("gptj"),k9r=o(" \u2014 "),gK=a("a"),S9r=o("TFGPTJForSequenceClassification"),R9r=o(" (GPT-J model)"),P9r=l(),g5=a("li"),VCe=a("strong"),B9r=o("layoutlm"),N9r=o(" \u2014 "),hK=a("a"),I9r=o("TFLayoutLMForSequenceClassification"),q9r=o(" (LayoutLM model)"),j9r=l(),h5=a("li"),XCe=a("strong"),D9r=o("longformer"),G9r=o(" \u2014 "),uK=a("a"),O9r=o("TFLongformerForSequenceClassification"),V9r=o(" (Longformer model)"),X9r=l(),u5=a("li"),zCe=a("strong"),z9r=o("mobilebert"),Q9r=o(" \u2014 "),pK=a("a"),W9r=o("TFMobileBertForSequenceClassification"),H9r=o(" (MobileBERT model)"),U9r=l(),p5=a("li"),QCe=a("strong"),J9r=o("mpnet"),Y9r=o(" \u2014 "),_K=a("a"),K9r=o("TFMPNetForSequenceClassification"),Z9r=o(" (MPNet model)"),exr=l(),_5=a("li"),WCe=a("strong"),oxr=o("openai-gpt"),rxr=o(" \u2014 "),bK=a("a"),txr=o("TFOpenAIGPTForSequenceClassification"),axr=o(" (OpenAI GPT model)"),nxr=l(),b5=a("li"),HCe=a("strong"),sxr=o("rembert"),lxr=o(" \u2014 "),vK=a("a"),ixr=o("TFRemBertForSequenceClassification"),dxr=o(" (RemBERT model)"),cxr=l(),v5=a("li"),UCe=a("strong"),mxr=o("roberta"),fxr=o(" \u2014 "),FK=a("a"),gxr=o("TFRobertaForSequenceClassification"),hxr=o(" (RoBERTa model)"),uxr=l(),F5=a("li"),JCe=a("strong"),pxr=o("roformer"),_xr=o(" \u2014 "),TK=a("a"),bxr=o("TFRoFormerForSequenceClassification"),vxr=o(" (RoFormer model)"),Fxr=l(),T5=a("li"),YCe=a("strong"),Txr=o("tapas"),Mxr=o(" \u2014 "),MK=a("a"),Exr=o("TFTapasForSequenceClassification"),Cxr=o(" (TAPAS model)"),wxr=l(),M5=a("li"),KCe=a("strong"),Axr=o("transfo-xl"),Lxr=o(" \u2014 "),EK=a("a"),yxr=o("TFTransfoXLForSequenceClassification"),xxr=o(" (Transformer-XL model)"),$xr=l(),E5=a("li"),ZCe=a("strong"),kxr=o("xlm"),Sxr=o(" \u2014 "),CK=a("a"),Rxr=o("TFXLMForSequenceClassification"),Pxr=o(" (XLM model)"),Bxr=l(),C5=a("li"),e3e=a("strong"),Nxr=o("xlm-roberta"),Ixr=o(" \u2014 "),wK=a("a"),qxr=o("TFXLMRobertaForSequenceClassification"),jxr=o(" (XLM-RoBERTa model)"),Dxr=l(),w5=a("li"),o3e=a("strong"),Gxr=o("xlnet"),Oxr=o(" \u2014 "),AK=a("a"),Vxr=o("TFXLNetForSequenceClassification"),Xxr=o(" (XLNet model)"),zxr=l(),F(A5.$$.fragment),Bze=l(),yc=a("h2"),L5=a("a"),r3e=a("span"),F(xx.$$.fragment),Qxr=l(),t3e=a("span"),Wxr=o("TFAutoModelForMultipleChoice"),Nze=l(),ir=a("div"),F($x.$$.fragment),Hxr=l(),xc=a("p"),Uxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),LK=a("a"),Jxr=o("from_pretrained()"),Yxr=o(" class method or the "),yK=a("a"),Kxr=o("from_config()"),Zxr=o(` class
method.`),e$r=l(),kx=a("p"),o$r=o("This class cannot be instantiated directly using "),a3e=a("code"),r$r=o("__init__()"),t$r=o(" (throws an error)."),a$r=l(),Dt=a("div"),F(Sx.$$.fragment),n$r=l(),n3e=a("p"),s$r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),l$r=l(),$c=a("p"),i$r=o(`Note:
Loading a model from its configuration file does `),s3e=a("strong"),d$r=o("not"),c$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xK=a("a"),m$r=o("from_pretrained()"),f$r=o(" to load the model weights."),g$r=l(),F(y5.$$.fragment),h$r=l(),Nr=a("div"),F(Rx.$$.fragment),u$r=l(),l3e=a("p"),p$r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),_$r=l(),hn=a("p"),b$r=o("The model class to instantiate is selected based on the "),i3e=a("code"),v$r=o("model_type"),F$r=o(` property of the config object (either
passed as an argument or loaded from `),d3e=a("code"),T$r=o("pretrained_model_name_or_path"),M$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c3e=a("code"),E$r=o("pretrained_model_name_or_path"),C$r=o(":"),w$r=l(),_e=a("ul"),x5=a("li"),m3e=a("strong"),A$r=o("albert"),L$r=o(" \u2014 "),$K=a("a"),y$r=o("TFAlbertForMultipleChoice"),x$r=o(" (ALBERT model)"),$$r=l(),$5=a("li"),f3e=a("strong"),k$r=o("bert"),S$r=o(" \u2014 "),kK=a("a"),R$r=o("TFBertForMultipleChoice"),P$r=o(" (BERT model)"),B$r=l(),k5=a("li"),g3e=a("strong"),N$r=o("camembert"),I$r=o(" \u2014 "),SK=a("a"),q$r=o("TFCamembertForMultipleChoice"),j$r=o(" (CamemBERT model)"),D$r=l(),S5=a("li"),h3e=a("strong"),G$r=o("convbert"),O$r=o(" \u2014 "),RK=a("a"),V$r=o("TFConvBertForMultipleChoice"),X$r=o(" (ConvBERT model)"),z$r=l(),R5=a("li"),u3e=a("strong"),Q$r=o("distilbert"),W$r=o(" \u2014 "),PK=a("a"),H$r=o("TFDistilBertForMultipleChoice"),U$r=o(" (DistilBERT model)"),J$r=l(),P5=a("li"),p3e=a("strong"),Y$r=o("electra"),K$r=o(" \u2014 "),BK=a("a"),Z$r=o("TFElectraForMultipleChoice"),ekr=o(" (ELECTRA model)"),okr=l(),B5=a("li"),_3e=a("strong"),rkr=o("flaubert"),tkr=o(" \u2014 "),NK=a("a"),akr=o("TFFlaubertForMultipleChoice"),nkr=o(" (FlauBERT model)"),skr=l(),N5=a("li"),b3e=a("strong"),lkr=o("funnel"),ikr=o(" \u2014 "),IK=a("a"),dkr=o("TFFunnelForMultipleChoice"),ckr=o(" (Funnel Transformer model)"),mkr=l(),I5=a("li"),v3e=a("strong"),fkr=o("longformer"),gkr=o(" \u2014 "),qK=a("a"),hkr=o("TFLongformerForMultipleChoice"),ukr=o(" (Longformer model)"),pkr=l(),q5=a("li"),F3e=a("strong"),_kr=o("mobilebert"),bkr=o(" \u2014 "),jK=a("a"),vkr=o("TFMobileBertForMultipleChoice"),Fkr=o(" (MobileBERT model)"),Tkr=l(),j5=a("li"),T3e=a("strong"),Mkr=o("mpnet"),Ekr=o(" \u2014 "),DK=a("a"),Ckr=o("TFMPNetForMultipleChoice"),wkr=o(" (MPNet model)"),Akr=l(),D5=a("li"),M3e=a("strong"),Lkr=o("rembert"),ykr=o(" \u2014 "),GK=a("a"),xkr=o("TFRemBertForMultipleChoice"),$kr=o(" (RemBERT model)"),kkr=l(),G5=a("li"),E3e=a("strong"),Skr=o("roberta"),Rkr=o(" \u2014 "),OK=a("a"),Pkr=o("TFRobertaForMultipleChoice"),Bkr=o(" (RoBERTa model)"),Nkr=l(),O5=a("li"),C3e=a("strong"),Ikr=o("roformer"),qkr=o(" \u2014 "),VK=a("a"),jkr=o("TFRoFormerForMultipleChoice"),Dkr=o(" (RoFormer model)"),Gkr=l(),V5=a("li"),w3e=a("strong"),Okr=o("xlm"),Vkr=o(" \u2014 "),XK=a("a"),Xkr=o("TFXLMForMultipleChoice"),zkr=o(" (XLM model)"),Qkr=l(),X5=a("li"),A3e=a("strong"),Wkr=o("xlm-roberta"),Hkr=o(" \u2014 "),zK=a("a"),Ukr=o("TFXLMRobertaForMultipleChoice"),Jkr=o(" (XLM-RoBERTa model)"),Ykr=l(),z5=a("li"),L3e=a("strong"),Kkr=o("xlnet"),Zkr=o(" \u2014 "),QK=a("a"),eSr=o("TFXLNetForMultipleChoice"),oSr=o(" (XLNet model)"),rSr=l(),F(Q5.$$.fragment),Ize=l(),kc=a("h2"),W5=a("a"),y3e=a("span"),F(Px.$$.fragment),tSr=l(),x3e=a("span"),aSr=o("TFAutoModelForNextSentencePrediction"),qze=l(),dr=a("div"),F(Bx.$$.fragment),nSr=l(),Sc=a("p"),sSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),WK=a("a"),lSr=o("from_pretrained()"),iSr=o(" class method or the "),HK=a("a"),dSr=o("from_config()"),cSr=o(` class
method.`),mSr=l(),Nx=a("p"),fSr=o("This class cannot be instantiated directly using "),$3e=a("code"),gSr=o("__init__()"),hSr=o(" (throws an error)."),uSr=l(),Gt=a("div"),F(Ix.$$.fragment),pSr=l(),k3e=a("p"),_Sr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),bSr=l(),Rc=a("p"),vSr=o(`Note:
Loading a model from its configuration file does `),S3e=a("strong"),FSr=o("not"),TSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UK=a("a"),MSr=o("from_pretrained()"),ESr=o(" to load the model weights."),CSr=l(),F(H5.$$.fragment),wSr=l(),Ir=a("div"),F(qx.$$.fragment),ASr=l(),R3e=a("p"),LSr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ySr=l(),un=a("p"),xSr=o("The model class to instantiate is selected based on the "),P3e=a("code"),$Sr=o("model_type"),kSr=o(` property of the config object (either
passed as an argument or loaded from `),B3e=a("code"),SSr=o("pretrained_model_name_or_path"),RSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N3e=a("code"),PSr=o("pretrained_model_name_or_path"),BSr=o(":"),NSr=l(),jx=a("ul"),U5=a("li"),I3e=a("strong"),ISr=o("bert"),qSr=o(" \u2014 "),JK=a("a"),jSr=o("TFBertForNextSentencePrediction"),DSr=o(" (BERT model)"),GSr=l(),J5=a("li"),q3e=a("strong"),OSr=o("mobilebert"),VSr=o(" \u2014 "),YK=a("a"),XSr=o("TFMobileBertForNextSentencePrediction"),zSr=o(" (MobileBERT model)"),QSr=l(),F(Y5.$$.fragment),jze=l(),Pc=a("h2"),K5=a("a"),j3e=a("span"),F(Dx.$$.fragment),WSr=l(),D3e=a("span"),HSr=o("TFAutoModelForTableQuestionAnswering"),Dze=l(),cr=a("div"),F(Gx.$$.fragment),USr=l(),Bc=a("p"),JSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),KK=a("a"),YSr=o("from_pretrained()"),KSr=o(" class method or the "),ZK=a("a"),ZSr=o("from_config()"),eRr=o(` class
method.`),oRr=l(),Ox=a("p"),rRr=o("This class cannot be instantiated directly using "),G3e=a("code"),tRr=o("__init__()"),aRr=o(" (throws an error)."),nRr=l(),Ot=a("div"),F(Vx.$$.fragment),sRr=l(),O3e=a("p"),lRr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),iRr=l(),Nc=a("p"),dRr=o(`Note:
Loading a model from its configuration file does `),V3e=a("strong"),cRr=o("not"),mRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=a("a"),fRr=o("from_pretrained()"),gRr=o(" to load the model weights."),hRr=l(),F(Z5.$$.fragment),uRr=l(),qr=a("div"),F(Xx.$$.fragment),pRr=l(),X3e=a("p"),_Rr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),bRr=l(),pn=a("p"),vRr=o("The model class to instantiate is selected based on the "),z3e=a("code"),FRr=o("model_type"),TRr=o(` property of the config object (either
passed as an argument or loaded from `),Q3e=a("code"),MRr=o("pretrained_model_name_or_path"),ERr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W3e=a("code"),CRr=o("pretrained_model_name_or_path"),wRr=o(":"),ARr=l(),H3e=a("ul"),e0=a("li"),U3e=a("strong"),LRr=o("tapas"),yRr=o(" \u2014 "),oZ=a("a"),xRr=o("TFTapasForQuestionAnswering"),$Rr=o(" (TAPAS model)"),kRr=l(),F(o0.$$.fragment),Gze=l(),Ic=a("h2"),r0=a("a"),J3e=a("span"),F(zx.$$.fragment),SRr=l(),Y3e=a("span"),RRr=o("TFAutoModelForTokenClassification"),Oze=l(),mr=a("div"),F(Qx.$$.fragment),PRr=l(),qc=a("p"),BRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rZ=a("a"),NRr=o("from_pretrained()"),IRr=o(" class method or the "),tZ=a("a"),qRr=o("from_config()"),jRr=o(` class
method.`),DRr=l(),Wx=a("p"),GRr=o("This class cannot be instantiated directly using "),K3e=a("code"),ORr=o("__init__()"),VRr=o(" (throws an error)."),XRr=l(),Vt=a("div"),F(Hx.$$.fragment),zRr=l(),Z3e=a("p"),QRr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),WRr=l(),jc=a("p"),HRr=o(`Note:
Loading a model from its configuration file does `),e5e=a("strong"),URr=o("not"),JRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=a("a"),YRr=o("from_pretrained()"),KRr=o(" to load the model weights."),ZRr=l(),F(t0.$$.fragment),ePr=l(),jr=a("div"),F(Ux.$$.fragment),oPr=l(),o5e=a("p"),rPr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),tPr=l(),_n=a("p"),aPr=o("The model class to instantiate is selected based on the "),r5e=a("code"),nPr=o("model_type"),sPr=o(` property of the config object (either
passed as an argument or loaded from `),t5e=a("code"),lPr=o("pretrained_model_name_or_path"),iPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a5e=a("code"),dPr=o("pretrained_model_name_or_path"),cPr=o(":"),mPr=l(),de=a("ul"),a0=a("li"),n5e=a("strong"),fPr=o("albert"),gPr=o(" \u2014 "),nZ=a("a"),hPr=o("TFAlbertForTokenClassification"),uPr=o(" (ALBERT model)"),pPr=l(),n0=a("li"),s5e=a("strong"),_Pr=o("bert"),bPr=o(" \u2014 "),sZ=a("a"),vPr=o("TFBertForTokenClassification"),FPr=o(" (BERT model)"),TPr=l(),s0=a("li"),l5e=a("strong"),MPr=o("camembert"),EPr=o(" \u2014 "),lZ=a("a"),CPr=o("TFCamembertForTokenClassification"),wPr=o(" (CamemBERT model)"),APr=l(),l0=a("li"),i5e=a("strong"),LPr=o("convbert"),yPr=o(" \u2014 "),iZ=a("a"),xPr=o("TFConvBertForTokenClassification"),$Pr=o(" (ConvBERT model)"),kPr=l(),i0=a("li"),d5e=a("strong"),SPr=o("deberta"),RPr=o(" \u2014 "),dZ=a("a"),PPr=o("TFDebertaForTokenClassification"),BPr=o(" (DeBERTa model)"),NPr=l(),d0=a("li"),c5e=a("strong"),IPr=o("deberta-v2"),qPr=o(" \u2014 "),cZ=a("a"),jPr=o("TFDebertaV2ForTokenClassification"),DPr=o(" (DeBERTa-v2 model)"),GPr=l(),c0=a("li"),m5e=a("strong"),OPr=o("distilbert"),VPr=o(" \u2014 "),mZ=a("a"),XPr=o("TFDistilBertForTokenClassification"),zPr=o(" (DistilBERT model)"),QPr=l(),m0=a("li"),f5e=a("strong"),WPr=o("electra"),HPr=o(" \u2014 "),fZ=a("a"),UPr=o("TFElectraForTokenClassification"),JPr=o(" (ELECTRA model)"),YPr=l(),f0=a("li"),g5e=a("strong"),KPr=o("flaubert"),ZPr=o(" \u2014 "),gZ=a("a"),eBr=o("TFFlaubertForTokenClassification"),oBr=o(" (FlauBERT model)"),rBr=l(),g0=a("li"),h5e=a("strong"),tBr=o("funnel"),aBr=o(" \u2014 "),hZ=a("a"),nBr=o("TFFunnelForTokenClassification"),sBr=o(" (Funnel Transformer model)"),lBr=l(),h0=a("li"),u5e=a("strong"),iBr=o("layoutlm"),dBr=o(" \u2014 "),uZ=a("a"),cBr=o("TFLayoutLMForTokenClassification"),mBr=o(" (LayoutLM model)"),fBr=l(),u0=a("li"),p5e=a("strong"),gBr=o("longformer"),hBr=o(" \u2014 "),pZ=a("a"),uBr=o("TFLongformerForTokenClassification"),pBr=o(" (Longformer model)"),_Br=l(),p0=a("li"),_5e=a("strong"),bBr=o("mobilebert"),vBr=o(" \u2014 "),_Z=a("a"),FBr=o("TFMobileBertForTokenClassification"),TBr=o(" (MobileBERT model)"),MBr=l(),_0=a("li"),b5e=a("strong"),EBr=o("mpnet"),CBr=o(" \u2014 "),bZ=a("a"),wBr=o("TFMPNetForTokenClassification"),ABr=o(" (MPNet model)"),LBr=l(),b0=a("li"),v5e=a("strong"),yBr=o("rembert"),xBr=o(" \u2014 "),vZ=a("a"),$Br=o("TFRemBertForTokenClassification"),kBr=o(" (RemBERT model)"),SBr=l(),v0=a("li"),F5e=a("strong"),RBr=o("roberta"),PBr=o(" \u2014 "),FZ=a("a"),BBr=o("TFRobertaForTokenClassification"),NBr=o(" (RoBERTa model)"),IBr=l(),F0=a("li"),T5e=a("strong"),qBr=o("roformer"),jBr=o(" \u2014 "),TZ=a("a"),DBr=o("TFRoFormerForTokenClassification"),GBr=o(" (RoFormer model)"),OBr=l(),T0=a("li"),M5e=a("strong"),VBr=o("xlm"),XBr=o(" \u2014 "),MZ=a("a"),zBr=o("TFXLMForTokenClassification"),QBr=o(" (XLM model)"),WBr=l(),M0=a("li"),E5e=a("strong"),HBr=o("xlm-roberta"),UBr=o(" \u2014 "),EZ=a("a"),JBr=o("TFXLMRobertaForTokenClassification"),YBr=o(" (XLM-RoBERTa model)"),KBr=l(),E0=a("li"),C5e=a("strong"),ZBr=o("xlnet"),eNr=o(" \u2014 "),CZ=a("a"),oNr=o("TFXLNetForTokenClassification"),rNr=o(" (XLNet model)"),tNr=l(),F(C0.$$.fragment),Vze=l(),Dc=a("h2"),w0=a("a"),w5e=a("span"),F(Jx.$$.fragment),aNr=l(),A5e=a("span"),nNr=o("TFAutoModelForQuestionAnswering"),Xze=l(),fr=a("div"),F(Yx.$$.fragment),sNr=l(),Gc=a("p"),lNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),wZ=a("a"),iNr=o("from_pretrained()"),dNr=o(" class method or the "),AZ=a("a"),cNr=o("from_config()"),mNr=o(` class
method.`),fNr=l(),Kx=a("p"),gNr=o("This class cannot be instantiated directly using "),L5e=a("code"),hNr=o("__init__()"),uNr=o(" (throws an error)."),pNr=l(),Xt=a("div"),F(Zx.$$.fragment),_Nr=l(),y5e=a("p"),bNr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),vNr=l(),Oc=a("p"),FNr=o(`Note:
Loading a model from its configuration file does `),x5e=a("strong"),TNr=o("not"),MNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LZ=a("a"),ENr=o("from_pretrained()"),CNr=o(" to load the model weights."),wNr=l(),F(A0.$$.fragment),ANr=l(),Dr=a("div"),F(e$.$$.fragment),LNr=l(),$5e=a("p"),yNr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),xNr=l(),bn=a("p"),$Nr=o("The model class to instantiate is selected based on the "),k5e=a("code"),kNr=o("model_type"),SNr=o(` property of the config object (either
passed as an argument or loaded from `),S5e=a("code"),RNr=o("pretrained_model_name_or_path"),PNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R5e=a("code"),BNr=o("pretrained_model_name_or_path"),NNr=o(":"),INr=l(),ce=a("ul"),L0=a("li"),P5e=a("strong"),qNr=o("albert"),jNr=o(" \u2014 "),yZ=a("a"),DNr=o("TFAlbertForQuestionAnswering"),GNr=o(" (ALBERT model)"),ONr=l(),y0=a("li"),B5e=a("strong"),VNr=o("bert"),XNr=o(" \u2014 "),xZ=a("a"),zNr=o("TFBertForQuestionAnswering"),QNr=o(" (BERT model)"),WNr=l(),x0=a("li"),N5e=a("strong"),HNr=o("camembert"),UNr=o(" \u2014 "),$Z=a("a"),JNr=o("TFCamembertForQuestionAnswering"),YNr=o(" (CamemBERT model)"),KNr=l(),$0=a("li"),I5e=a("strong"),ZNr=o("convbert"),eIr=o(" \u2014 "),kZ=a("a"),oIr=o("TFConvBertForQuestionAnswering"),rIr=o(" (ConvBERT model)"),tIr=l(),k0=a("li"),q5e=a("strong"),aIr=o("deberta"),nIr=o(" \u2014 "),SZ=a("a"),sIr=o("TFDebertaForQuestionAnswering"),lIr=o(" (DeBERTa model)"),iIr=l(),S0=a("li"),j5e=a("strong"),dIr=o("deberta-v2"),cIr=o(" \u2014 "),RZ=a("a"),mIr=o("TFDebertaV2ForQuestionAnswering"),fIr=o(" (DeBERTa-v2 model)"),gIr=l(),R0=a("li"),D5e=a("strong"),hIr=o("distilbert"),uIr=o(" \u2014 "),PZ=a("a"),pIr=o("TFDistilBertForQuestionAnswering"),_Ir=o(" (DistilBERT model)"),bIr=l(),P0=a("li"),G5e=a("strong"),vIr=o("electra"),FIr=o(" \u2014 "),BZ=a("a"),TIr=o("TFElectraForQuestionAnswering"),MIr=o(" (ELECTRA model)"),EIr=l(),B0=a("li"),O5e=a("strong"),CIr=o("flaubert"),wIr=o(" \u2014 "),NZ=a("a"),AIr=o("TFFlaubertForQuestionAnsweringSimple"),LIr=o(" (FlauBERT model)"),yIr=l(),N0=a("li"),V5e=a("strong"),xIr=o("funnel"),$Ir=o(" \u2014 "),IZ=a("a"),kIr=o("TFFunnelForQuestionAnswering"),SIr=o(" (Funnel Transformer model)"),RIr=l(),I0=a("li"),X5e=a("strong"),PIr=o("gptj"),BIr=o(" \u2014 "),qZ=a("a"),NIr=o("TFGPTJForQuestionAnswering"),IIr=o(" (GPT-J model)"),qIr=l(),q0=a("li"),z5e=a("strong"),jIr=o("longformer"),DIr=o(" \u2014 "),jZ=a("a"),GIr=o("TFLongformerForQuestionAnswering"),OIr=o(" (Longformer model)"),VIr=l(),j0=a("li"),Q5e=a("strong"),XIr=o("mobilebert"),zIr=o(" \u2014 "),DZ=a("a"),QIr=o("TFMobileBertForQuestionAnswering"),WIr=o(" (MobileBERT model)"),HIr=l(),D0=a("li"),W5e=a("strong"),UIr=o("mpnet"),JIr=o(" \u2014 "),GZ=a("a"),YIr=o("TFMPNetForQuestionAnswering"),KIr=o(" (MPNet model)"),ZIr=l(),G0=a("li"),H5e=a("strong"),eqr=o("rembert"),oqr=o(" \u2014 "),OZ=a("a"),rqr=o("TFRemBertForQuestionAnswering"),tqr=o(" (RemBERT model)"),aqr=l(),O0=a("li"),U5e=a("strong"),nqr=o("roberta"),sqr=o(" \u2014 "),VZ=a("a"),lqr=o("TFRobertaForQuestionAnswering"),iqr=o(" (RoBERTa model)"),dqr=l(),V0=a("li"),J5e=a("strong"),cqr=o("roformer"),mqr=o(" \u2014 "),XZ=a("a"),fqr=o("TFRoFormerForQuestionAnswering"),gqr=o(" (RoFormer model)"),hqr=l(),X0=a("li"),Y5e=a("strong"),uqr=o("xlm"),pqr=o(" \u2014 "),zZ=a("a"),_qr=o("TFXLMForQuestionAnsweringSimple"),bqr=o(" (XLM model)"),vqr=l(),z0=a("li"),K5e=a("strong"),Fqr=o("xlm-roberta"),Tqr=o(" \u2014 "),QZ=a("a"),Mqr=o("TFXLMRobertaForQuestionAnswering"),Eqr=o(" (XLM-RoBERTa model)"),Cqr=l(),Q0=a("li"),Z5e=a("strong"),wqr=o("xlnet"),Aqr=o(" \u2014 "),WZ=a("a"),Lqr=o("TFXLNetForQuestionAnsweringSimple"),yqr=o(" (XLNet model)"),xqr=l(),F(W0.$$.fragment),zze=l(),Vc=a("h2"),H0=a("a"),e0e=a("span"),F(o$.$$.fragment),$qr=l(),o0e=a("span"),kqr=o("TFAutoModelForVision2Seq"),Qze=l(),gr=a("div"),F(r$.$$.fragment),Sqr=l(),Xc=a("p"),Rqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),HZ=a("a"),Pqr=o("from_pretrained()"),Bqr=o(" class method or the "),UZ=a("a"),Nqr=o("from_config()"),Iqr=o(` class
method.`),qqr=l(),t$=a("p"),jqr=o("This class cannot be instantiated directly using "),r0e=a("code"),Dqr=o("__init__()"),Gqr=o(" (throws an error)."),Oqr=l(),zt=a("div"),F(a$.$$.fragment),Vqr=l(),t0e=a("p"),Xqr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),zqr=l(),zc=a("p"),Qqr=o(`Note:
Loading a model from its configuration file does `),a0e=a("strong"),Wqr=o("not"),Hqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JZ=a("a"),Uqr=o("from_pretrained()"),Jqr=o(" to load the model weights."),Yqr=l(),F(U0.$$.fragment),Kqr=l(),Gr=a("div"),F(n$.$$.fragment),Zqr=l(),n0e=a("p"),ejr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ojr=l(),vn=a("p"),rjr=o("The model class to instantiate is selected based on the "),s0e=a("code"),tjr=o("model_type"),ajr=o(` property of the config object (either
passed as an argument or loaded from `),l0e=a("code"),njr=o("pretrained_model_name_or_path"),sjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i0e=a("code"),ljr=o("pretrained_model_name_or_path"),ijr=o(":"),djr=l(),d0e=a("ul"),J0=a("li"),c0e=a("strong"),cjr=o("vision-encoder-decoder"),mjr=o(" \u2014 "),YZ=a("a"),fjr=o("TFVisionEncoderDecoderModel"),gjr=o(" (Vision Encoder decoder model)"),hjr=l(),F(Y0.$$.fragment),Wze=l(),Qc=a("h2"),K0=a("a"),m0e=a("span"),F(s$.$$.fragment),ujr=l(),f0e=a("span"),pjr=o("TFAutoModelForSpeechSeq2Seq"),Hze=l(),hr=a("div"),F(l$.$$.fragment),_jr=l(),Wc=a("p"),bjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),KZ=a("a"),vjr=o("from_pretrained()"),Fjr=o(" class method or the "),ZZ=a("a"),Tjr=o("from_config()"),Mjr=o(` class
method.`),Ejr=l(),i$=a("p"),Cjr=o("This class cannot be instantiated directly using "),g0e=a("code"),wjr=o("__init__()"),Ajr=o(" (throws an error)."),Ljr=l(),Qt=a("div"),F(d$.$$.fragment),yjr=l(),h0e=a("p"),xjr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),$jr=l(),Hc=a("p"),kjr=o(`Note:
Loading a model from its configuration file does `),u0e=a("strong"),Sjr=o("not"),Rjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eee=a("a"),Pjr=o("from_pretrained()"),Bjr=o(" to load the model weights."),Njr=l(),F(Z0.$$.fragment),Ijr=l(),Or=a("div"),F(c$.$$.fragment),qjr=l(),p0e=a("p"),jjr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Djr=l(),Fn=a("p"),Gjr=o("The model class to instantiate is selected based on the "),_0e=a("code"),Ojr=o("model_type"),Vjr=o(` property of the config object (either
passed as an argument or loaded from `),b0e=a("code"),Xjr=o("pretrained_model_name_or_path"),zjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v0e=a("code"),Qjr=o("pretrained_model_name_or_path"),Wjr=o(":"),Hjr=l(),F0e=a("ul"),ew=a("li"),T0e=a("strong"),Ujr=o("speech_to_text"),Jjr=o(" \u2014 "),oee=a("a"),Yjr=o("TFSpeech2TextForConditionalGeneration"),Kjr=o(" (Speech2Text model)"),Zjr=l(),F(ow.$$.fragment),Uze=l(),Uc=a("h2"),rw=a("a"),M0e=a("span"),F(m$.$$.fragment),eDr=l(),E0e=a("span"),oDr=o("FlaxAutoModel"),Jze=l(),ur=a("div"),F(f$.$$.fragment),rDr=l(),Jc=a("p"),tDr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ree=a("a"),aDr=o("from_pretrained()"),nDr=o(" class method or the "),tee=a("a"),sDr=o("from_config()"),lDr=o(` class
method.`),iDr=l(),g$=a("p"),dDr=o("This class cannot be instantiated directly using "),C0e=a("code"),cDr=o("__init__()"),mDr=o(" (throws an error)."),fDr=l(),Wt=a("div"),F(h$.$$.fragment),gDr=l(),w0e=a("p"),hDr=o("Instantiates one of the base model classes of the library from a configuration."),uDr=l(),Yc=a("p"),pDr=o(`Note:
Loading a model from its configuration file does `),A0e=a("strong"),_Dr=o("not"),bDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aee=a("a"),vDr=o("from_pretrained()"),FDr=o(" to load the model weights."),TDr=l(),F(tw.$$.fragment),MDr=l(),Vr=a("div"),F(u$.$$.fragment),EDr=l(),L0e=a("p"),CDr=o("Instantiate one of the base model classes of the library from a pretrained model."),wDr=l(),Tn=a("p"),ADr=o("The model class to instantiate is selected based on the "),y0e=a("code"),LDr=o("model_type"),yDr=o(` property of the config object (either
passed as an argument or loaded from `),x0e=a("code"),xDr=o("pretrained_model_name_or_path"),$Dr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$0e=a("code"),kDr=o("pretrained_model_name_or_path"),SDr=o(":"),RDr=l(),oe=a("ul"),aw=a("li"),k0e=a("strong"),PDr=o("albert"),BDr=o(" \u2014 "),nee=a("a"),NDr=o("FlaxAlbertModel"),IDr=o(" (ALBERT model)"),qDr=l(),nw=a("li"),S0e=a("strong"),jDr=o("bart"),DDr=o(" \u2014 "),see=a("a"),GDr=o("FlaxBartModel"),ODr=o(" (BART model)"),VDr=l(),sw=a("li"),R0e=a("strong"),XDr=o("beit"),zDr=o(" \u2014 "),lee=a("a"),QDr=o("FlaxBeitModel"),WDr=o(" (BEiT model)"),HDr=l(),lw=a("li"),P0e=a("strong"),UDr=o("bert"),JDr=o(" \u2014 "),iee=a("a"),YDr=o("FlaxBertModel"),KDr=o(" (BERT model)"),ZDr=l(),iw=a("li"),B0e=a("strong"),eGr=o("big_bird"),oGr=o(" \u2014 "),dee=a("a"),rGr=o("FlaxBigBirdModel"),tGr=o(" (BigBird model)"),aGr=l(),dw=a("li"),N0e=a("strong"),nGr=o("blenderbot"),sGr=o(" \u2014 "),cee=a("a"),lGr=o("FlaxBlenderbotModel"),iGr=o(" (Blenderbot model)"),dGr=l(),cw=a("li"),I0e=a("strong"),cGr=o("blenderbot-small"),mGr=o(" \u2014 "),mee=a("a"),fGr=o("FlaxBlenderbotSmallModel"),gGr=o(" (BlenderbotSmall model)"),hGr=l(),mw=a("li"),q0e=a("strong"),uGr=o("clip"),pGr=o(" \u2014 "),fee=a("a"),_Gr=o("FlaxCLIPModel"),bGr=o(" (CLIP model)"),vGr=l(),fw=a("li"),j0e=a("strong"),FGr=o("distilbert"),TGr=o(" \u2014 "),gee=a("a"),MGr=o("FlaxDistilBertModel"),EGr=o(" (DistilBERT model)"),CGr=l(),gw=a("li"),D0e=a("strong"),wGr=o("electra"),AGr=o(" \u2014 "),hee=a("a"),LGr=o("FlaxElectraModel"),yGr=o(" (ELECTRA model)"),xGr=l(),hw=a("li"),G0e=a("strong"),$Gr=o("gpt2"),kGr=o(" \u2014 "),uee=a("a"),SGr=o("FlaxGPT2Model"),RGr=o(" (OpenAI GPT-2 model)"),PGr=l(),uw=a("li"),O0e=a("strong"),BGr=o("gpt_neo"),NGr=o(" \u2014 "),pee=a("a"),IGr=o("FlaxGPTNeoModel"),qGr=o(" (GPT Neo model)"),jGr=l(),pw=a("li"),V0e=a("strong"),DGr=o("gptj"),GGr=o(" \u2014 "),_ee=a("a"),OGr=o("FlaxGPTJModel"),VGr=o(" (GPT-J model)"),XGr=l(),_w=a("li"),X0e=a("strong"),zGr=o("longt5"),QGr=o(" \u2014 "),bee=a("a"),WGr=o("FlaxLongT5Model"),HGr=o(" (LongT5 model)"),UGr=l(),bw=a("li"),z0e=a("strong"),JGr=o("marian"),YGr=o(" \u2014 "),vee=a("a"),KGr=o("FlaxMarianModel"),ZGr=o(" (Marian model)"),eOr=l(),vw=a("li"),Q0e=a("strong"),oOr=o("mbart"),rOr=o(" \u2014 "),Fee=a("a"),tOr=o("FlaxMBartModel"),aOr=o(" (mBART model)"),nOr=l(),Fw=a("li"),W0e=a("strong"),sOr=o("mt5"),lOr=o(" \u2014 "),Tee=a("a"),iOr=o("FlaxMT5Model"),dOr=o(" (MT5 model)"),cOr=l(),Tw=a("li"),H0e=a("strong"),mOr=o("opt"),fOr=o(" \u2014 "),Mee=a("a"),gOr=o("FlaxOPTModel"),hOr=o(" (OPT model)"),uOr=l(),Mw=a("li"),U0e=a("strong"),pOr=o("pegasus"),_Or=o(" \u2014 "),Eee=a("a"),bOr=o("FlaxPegasusModel"),vOr=o(" (Pegasus model)"),FOr=l(),Ew=a("li"),J0e=a("strong"),TOr=o("roberta"),MOr=o(" \u2014 "),Cee=a("a"),EOr=o("FlaxRobertaModel"),COr=o(" (RoBERTa model)"),wOr=l(),Cw=a("li"),Y0e=a("strong"),AOr=o("roformer"),LOr=o(" \u2014 "),wee=a("a"),yOr=o("FlaxRoFormerModel"),xOr=o(" (RoFormer model)"),$Or=l(),ww=a("li"),K0e=a("strong"),kOr=o("t5"),SOr=o(" \u2014 "),Aee=a("a"),ROr=o("FlaxT5Model"),POr=o(" (T5 model)"),BOr=l(),Aw=a("li"),Z0e=a("strong"),NOr=o("vision-text-dual-encoder"),IOr=o(" \u2014 "),Lee=a("a"),qOr=o("FlaxVisionTextDualEncoderModel"),jOr=o(" (VisionTextDualEncoder model)"),DOr=l(),Lw=a("li"),ewe=a("strong"),GOr=o("vit"),OOr=o(" \u2014 "),yee=a("a"),VOr=o("FlaxViTModel"),XOr=o(" (ViT model)"),zOr=l(),yw=a("li"),owe=a("strong"),QOr=o("wav2vec2"),WOr=o(" \u2014 "),xee=a("a"),HOr=o("FlaxWav2Vec2Model"),UOr=o(" (Wav2Vec2 model)"),JOr=l(),xw=a("li"),rwe=a("strong"),YOr=o("xglm"),KOr=o(" \u2014 "),$ee=a("a"),ZOr=o("FlaxXGLMModel"),eVr=o(" (XGLM model)"),oVr=l(),$w=a("li"),twe=a("strong"),rVr=o("xlm-roberta"),tVr=o(" \u2014 "),kee=a("a"),aVr=o("FlaxXLMRobertaModel"),nVr=o(" (XLM-RoBERTa model)"),sVr=l(),F(kw.$$.fragment),Yze=l(),Kc=a("h2"),Sw=a("a"),awe=a("span"),F(p$.$$.fragment),lVr=l(),nwe=a("span"),iVr=o("FlaxAutoModelForCausalLM"),Kze=l(),pr=a("div"),F(_$.$$.fragment),dVr=l(),Zc=a("p"),cVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),See=a("a"),mVr=o("from_pretrained()"),fVr=o(" class method or the "),Ree=a("a"),gVr=o("from_config()"),hVr=o(` class
method.`),uVr=l(),b$=a("p"),pVr=o("This class cannot be instantiated directly using "),swe=a("code"),_Vr=o("__init__()"),bVr=o(" (throws an error)."),vVr=l(),Ht=a("div"),F(v$.$$.fragment),FVr=l(),lwe=a("p"),TVr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),MVr=l(),em=a("p"),EVr=o(`Note:
Loading a model from its configuration file does `),iwe=a("strong"),CVr=o("not"),wVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pee=a("a"),AVr=o("from_pretrained()"),LVr=o(" to load the model weights."),yVr=l(),F(Rw.$$.fragment),xVr=l(),Xr=a("div"),F(F$.$$.fragment),$Vr=l(),dwe=a("p"),kVr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),SVr=l(),Mn=a("p"),RVr=o("The model class to instantiate is selected based on the "),cwe=a("code"),PVr=o("model_type"),BVr=o(` property of the config object (either
passed as an argument or loaded from `),mwe=a("code"),NVr=o("pretrained_model_name_or_path"),IVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fwe=a("code"),qVr=o("pretrained_model_name_or_path"),jVr=o(":"),DVr=l(),xe=a("ul"),Pw=a("li"),gwe=a("strong"),GVr=o("bart"),OVr=o(" \u2014 "),Bee=a("a"),VVr=o("FlaxBartForCausalLM"),XVr=o(" (BART model)"),zVr=l(),Bw=a("li"),hwe=a("strong"),QVr=o("bert"),WVr=o(" \u2014 "),Nee=a("a"),HVr=o("FlaxBertForCausalLM"),UVr=o(" (BERT model)"),JVr=l(),Nw=a("li"),uwe=a("strong"),YVr=o("big_bird"),KVr=o(" \u2014 "),Iee=a("a"),ZVr=o("FlaxBigBirdForCausalLM"),eXr=o(" (BigBird model)"),oXr=l(),Iw=a("li"),pwe=a("strong"),rXr=o("electra"),tXr=o(" \u2014 "),qee=a("a"),aXr=o("FlaxElectraForCausalLM"),nXr=o(" (ELECTRA model)"),sXr=l(),qw=a("li"),_we=a("strong"),lXr=o("gpt2"),iXr=o(" \u2014 "),jee=a("a"),dXr=o("FlaxGPT2LMHeadModel"),cXr=o(" (OpenAI GPT-2 model)"),mXr=l(),jw=a("li"),bwe=a("strong"),fXr=o("gpt_neo"),gXr=o(" \u2014 "),Dee=a("a"),hXr=o("FlaxGPTNeoForCausalLM"),uXr=o(" (GPT Neo model)"),pXr=l(),Dw=a("li"),vwe=a("strong"),_Xr=o("gptj"),bXr=o(" \u2014 "),Gee=a("a"),vXr=o("FlaxGPTJForCausalLM"),FXr=o(" (GPT-J model)"),TXr=l(),Gw=a("li"),Fwe=a("strong"),MXr=o("opt"),EXr=o(" \u2014 "),Oee=a("a"),CXr=o("FlaxOPTForCausalLM"),wXr=o(" (OPT model)"),AXr=l(),Ow=a("li"),Twe=a("strong"),LXr=o("roberta"),yXr=o(" \u2014 "),Vee=a("a"),xXr=o("FlaxRobertaForCausalLM"),$Xr=o(" (RoBERTa model)"),kXr=l(),Vw=a("li"),Mwe=a("strong"),SXr=o("xglm"),RXr=o(" \u2014 "),Xee=a("a"),PXr=o("FlaxXGLMForCausalLM"),BXr=o(" (XGLM model)"),NXr=l(),F(Xw.$$.fragment),Zze=l(),om=a("h2"),zw=a("a"),Ewe=a("span"),F(T$.$$.fragment),IXr=l(),Cwe=a("span"),qXr=o("FlaxAutoModelForPreTraining"),eQe=l(),_r=a("div"),F(M$.$$.fragment),jXr=l(),rm=a("p"),DXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zee=a("a"),GXr=o("from_pretrained()"),OXr=o(" class method or the "),Qee=a("a"),VXr=o("from_config()"),XXr=o(` class
method.`),zXr=l(),E$=a("p"),QXr=o("This class cannot be instantiated directly using "),wwe=a("code"),WXr=o("__init__()"),HXr=o(" (throws an error)."),UXr=l(),Ut=a("div"),F(C$.$$.fragment),JXr=l(),Awe=a("p"),YXr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),KXr=l(),tm=a("p"),ZXr=o(`Note:
Loading a model from its configuration file does `),Lwe=a("strong"),ezr=o("not"),ozr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wee=a("a"),rzr=o("from_pretrained()"),tzr=o(" to load the model weights."),azr=l(),F(Qw.$$.fragment),nzr=l(),zr=a("div"),F(w$.$$.fragment),szr=l(),ywe=a("p"),lzr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),izr=l(),En=a("p"),dzr=o("The model class to instantiate is selected based on the "),xwe=a("code"),czr=o("model_type"),mzr=o(` property of the config object (either
passed as an argument or loaded from `),$we=a("code"),fzr=o("pretrained_model_name_or_path"),gzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kwe=a("code"),hzr=o("pretrained_model_name_or_path"),uzr=o(":"),pzr=l(),Ee=a("ul"),Ww=a("li"),Swe=a("strong"),_zr=o("albert"),bzr=o(" \u2014 "),Hee=a("a"),vzr=o("FlaxAlbertForPreTraining"),Fzr=o(" (ALBERT model)"),Tzr=l(),Hw=a("li"),Rwe=a("strong"),Mzr=o("bart"),Ezr=o(" \u2014 "),Uee=a("a"),Czr=o("FlaxBartForConditionalGeneration"),wzr=o(" (BART model)"),Azr=l(),Uw=a("li"),Pwe=a("strong"),Lzr=o("bert"),yzr=o(" \u2014 "),Jee=a("a"),xzr=o("FlaxBertForPreTraining"),$zr=o(" (BERT model)"),kzr=l(),Jw=a("li"),Bwe=a("strong"),Szr=o("big_bird"),Rzr=o(" \u2014 "),Yee=a("a"),Pzr=o("FlaxBigBirdForPreTraining"),Bzr=o(" (BigBird model)"),Nzr=l(),Yw=a("li"),Nwe=a("strong"),Izr=o("electra"),qzr=o(" \u2014 "),Kee=a("a"),jzr=o("FlaxElectraForPreTraining"),Dzr=o(" (ELECTRA model)"),Gzr=l(),Kw=a("li"),Iwe=a("strong"),Ozr=o("longt5"),Vzr=o(" \u2014 "),Zee=a("a"),Xzr=o("FlaxLongT5ForConditionalGeneration"),zzr=o(" (LongT5 model)"),Qzr=l(),Zw=a("li"),qwe=a("strong"),Wzr=o("mbart"),Hzr=o(" \u2014 "),eoe=a("a"),Uzr=o("FlaxMBartForConditionalGeneration"),Jzr=o(" (mBART model)"),Yzr=l(),eA=a("li"),jwe=a("strong"),Kzr=o("mt5"),Zzr=o(" \u2014 "),ooe=a("a"),eQr=o("FlaxMT5ForConditionalGeneration"),oQr=o(" (MT5 model)"),rQr=l(),oA=a("li"),Dwe=a("strong"),tQr=o("roberta"),aQr=o(" \u2014 "),roe=a("a"),nQr=o("FlaxRobertaForMaskedLM"),sQr=o(" (RoBERTa model)"),lQr=l(),rA=a("li"),Gwe=a("strong"),iQr=o("roformer"),dQr=o(" \u2014 "),toe=a("a"),cQr=o("FlaxRoFormerForMaskedLM"),mQr=o(" (RoFormer model)"),fQr=l(),tA=a("li"),Owe=a("strong"),gQr=o("t5"),hQr=o(" \u2014 "),aoe=a("a"),uQr=o("FlaxT5ForConditionalGeneration"),pQr=o(" (T5 model)"),_Qr=l(),aA=a("li"),Vwe=a("strong"),bQr=o("wav2vec2"),vQr=o(" \u2014 "),noe=a("a"),FQr=o("FlaxWav2Vec2ForPreTraining"),TQr=o(" (Wav2Vec2 model)"),MQr=l(),nA=a("li"),Xwe=a("strong"),EQr=o("xlm-roberta"),CQr=o(" \u2014 "),soe=a("a"),wQr=o("FlaxXLMRobertaForMaskedLM"),AQr=o(" (XLM-RoBERTa model)"),LQr=l(),F(sA.$$.fragment),oQe=l(),am=a("h2"),lA=a("a"),zwe=a("span"),F(A$.$$.fragment),yQr=l(),Qwe=a("span"),xQr=o("FlaxAutoModelForMaskedLM"),rQe=l(),br=a("div"),F(L$.$$.fragment),$Qr=l(),nm=a("p"),kQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),loe=a("a"),SQr=o("from_pretrained()"),RQr=o(" class method or the "),ioe=a("a"),PQr=o("from_config()"),BQr=o(` class
method.`),NQr=l(),y$=a("p"),IQr=o("This class cannot be instantiated directly using "),Wwe=a("code"),qQr=o("__init__()"),jQr=o(" (throws an error)."),DQr=l(),Jt=a("div"),F(x$.$$.fragment),GQr=l(),Hwe=a("p"),OQr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),VQr=l(),sm=a("p"),XQr=o(`Note:
Loading a model from its configuration file does `),Uwe=a("strong"),zQr=o("not"),QQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),doe=a("a"),WQr=o("from_pretrained()"),HQr=o(" to load the model weights."),UQr=l(),F(iA.$$.fragment),JQr=l(),Qr=a("div"),F($$.$$.fragment),YQr=l(),Jwe=a("p"),KQr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ZQr=l(),Cn=a("p"),eWr=o("The model class to instantiate is selected based on the "),Ywe=a("code"),oWr=o("model_type"),rWr=o(` property of the config object (either
passed as an argument or loaded from `),Kwe=a("code"),tWr=o("pretrained_model_name_or_path"),aWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zwe=a("code"),nWr=o("pretrained_model_name_or_path"),sWr=o(":"),lWr=l(),$e=a("ul"),dA=a("li"),eAe=a("strong"),iWr=o("albert"),dWr=o(" \u2014 "),coe=a("a"),cWr=o("FlaxAlbertForMaskedLM"),mWr=o(" (ALBERT model)"),fWr=l(),cA=a("li"),oAe=a("strong"),gWr=o("bart"),hWr=o(" \u2014 "),moe=a("a"),uWr=o("FlaxBartForConditionalGeneration"),pWr=o(" (BART model)"),_Wr=l(),mA=a("li"),rAe=a("strong"),bWr=o("bert"),vWr=o(" \u2014 "),foe=a("a"),FWr=o("FlaxBertForMaskedLM"),TWr=o(" (BERT model)"),MWr=l(),fA=a("li"),tAe=a("strong"),EWr=o("big_bird"),CWr=o(" \u2014 "),goe=a("a"),wWr=o("FlaxBigBirdForMaskedLM"),AWr=o(" (BigBird model)"),LWr=l(),gA=a("li"),aAe=a("strong"),yWr=o("distilbert"),xWr=o(" \u2014 "),hoe=a("a"),$Wr=o("FlaxDistilBertForMaskedLM"),kWr=o(" (DistilBERT model)"),SWr=l(),hA=a("li"),nAe=a("strong"),RWr=o("electra"),PWr=o(" \u2014 "),uoe=a("a"),BWr=o("FlaxElectraForMaskedLM"),NWr=o(" (ELECTRA model)"),IWr=l(),uA=a("li"),sAe=a("strong"),qWr=o("mbart"),jWr=o(" \u2014 "),poe=a("a"),DWr=o("FlaxMBartForConditionalGeneration"),GWr=o(" (mBART model)"),OWr=l(),pA=a("li"),lAe=a("strong"),VWr=o("roberta"),XWr=o(" \u2014 "),_oe=a("a"),zWr=o("FlaxRobertaForMaskedLM"),QWr=o(" (RoBERTa model)"),WWr=l(),_A=a("li"),iAe=a("strong"),HWr=o("roformer"),UWr=o(" \u2014 "),boe=a("a"),JWr=o("FlaxRoFormerForMaskedLM"),YWr=o(" (RoFormer model)"),KWr=l(),bA=a("li"),dAe=a("strong"),ZWr=o("xlm-roberta"),eHr=o(" \u2014 "),voe=a("a"),oHr=o("FlaxXLMRobertaForMaskedLM"),rHr=o(" (XLM-RoBERTa model)"),tHr=l(),F(vA.$$.fragment),tQe=l(),lm=a("h2"),FA=a("a"),cAe=a("span"),F(k$.$$.fragment),aHr=l(),mAe=a("span"),nHr=o("FlaxAutoModelForSeq2SeqLM"),aQe=l(),vr=a("div"),F(S$.$$.fragment),sHr=l(),im=a("p"),lHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Foe=a("a"),iHr=o("from_pretrained()"),dHr=o(" class method or the "),Toe=a("a"),cHr=o("from_config()"),mHr=o(` class
method.`),fHr=l(),R$=a("p"),gHr=o("This class cannot be instantiated directly using "),fAe=a("code"),hHr=o("__init__()"),uHr=o(" (throws an error)."),pHr=l(),Yt=a("div"),F(P$.$$.fragment),_Hr=l(),gAe=a("p"),bHr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),vHr=l(),dm=a("p"),FHr=o(`Note:
Loading a model from its configuration file does `),hAe=a("strong"),THr=o("not"),MHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Moe=a("a"),EHr=o("from_pretrained()"),CHr=o(" to load the model weights."),wHr=l(),F(TA.$$.fragment),AHr=l(),Wr=a("div"),F(B$.$$.fragment),LHr=l(),uAe=a("p"),yHr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),xHr=l(),wn=a("p"),$Hr=o("The model class to instantiate is selected based on the "),pAe=a("code"),kHr=o("model_type"),SHr=o(` property of the config object (either
passed as an argument or loaded from `),_Ae=a("code"),RHr=o("pretrained_model_name_or_path"),PHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bAe=a("code"),BHr=o("pretrained_model_name_or_path"),NHr=o(":"),IHr=l(),ke=a("ul"),MA=a("li"),vAe=a("strong"),qHr=o("bart"),jHr=o(" \u2014 "),Eoe=a("a"),DHr=o("FlaxBartForConditionalGeneration"),GHr=o(" (BART model)"),OHr=l(),EA=a("li"),FAe=a("strong"),VHr=o("blenderbot"),XHr=o(" \u2014 "),Coe=a("a"),zHr=o("FlaxBlenderbotForConditionalGeneration"),QHr=o(" (Blenderbot model)"),WHr=l(),CA=a("li"),TAe=a("strong"),HHr=o("blenderbot-small"),UHr=o(" \u2014 "),woe=a("a"),JHr=o("FlaxBlenderbotSmallForConditionalGeneration"),YHr=o(" (BlenderbotSmall model)"),KHr=l(),wA=a("li"),MAe=a("strong"),ZHr=o("encoder-decoder"),eUr=o(" \u2014 "),Aoe=a("a"),oUr=o("FlaxEncoderDecoderModel"),rUr=o(" (Encoder decoder model)"),tUr=l(),AA=a("li"),EAe=a("strong"),aUr=o("longt5"),nUr=o(" \u2014 "),Loe=a("a"),sUr=o("FlaxLongT5ForConditionalGeneration"),lUr=o(" (LongT5 model)"),iUr=l(),LA=a("li"),CAe=a("strong"),dUr=o("marian"),cUr=o(" \u2014 "),yoe=a("a"),mUr=o("FlaxMarianMTModel"),fUr=o(" (Marian model)"),gUr=l(),yA=a("li"),wAe=a("strong"),hUr=o("mbart"),uUr=o(" \u2014 "),xoe=a("a"),pUr=o("FlaxMBartForConditionalGeneration"),_Ur=o(" (mBART model)"),bUr=l(),xA=a("li"),AAe=a("strong"),vUr=o("mt5"),FUr=o(" \u2014 "),$oe=a("a"),TUr=o("FlaxMT5ForConditionalGeneration"),MUr=o(" (MT5 model)"),EUr=l(),$A=a("li"),LAe=a("strong"),CUr=o("pegasus"),wUr=o(" \u2014 "),koe=a("a"),AUr=o("FlaxPegasusForConditionalGeneration"),LUr=o(" (Pegasus model)"),yUr=l(),kA=a("li"),yAe=a("strong"),xUr=o("t5"),$Ur=o(" \u2014 "),Soe=a("a"),kUr=o("FlaxT5ForConditionalGeneration"),SUr=o(" (T5 model)"),RUr=l(),F(SA.$$.fragment),nQe=l(),cm=a("h2"),RA=a("a"),xAe=a("span"),F(N$.$$.fragment),PUr=l(),$Ae=a("span"),BUr=o("FlaxAutoModelForSequenceClassification"),sQe=l(),Fr=a("div"),F(I$.$$.fragment),NUr=l(),mm=a("p"),IUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Roe=a("a"),qUr=o("from_pretrained()"),jUr=o(" class method or the "),Poe=a("a"),DUr=o("from_config()"),GUr=o(` class
method.`),OUr=l(),q$=a("p"),VUr=o("This class cannot be instantiated directly using "),kAe=a("code"),XUr=o("__init__()"),zUr=o(" (throws an error)."),QUr=l(),Kt=a("div"),F(j$.$$.fragment),WUr=l(),SAe=a("p"),HUr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),UUr=l(),fm=a("p"),JUr=o(`Note:
Loading a model from its configuration file does `),RAe=a("strong"),YUr=o("not"),KUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Boe=a("a"),ZUr=o("from_pretrained()"),eJr=o(" to load the model weights."),oJr=l(),F(PA.$$.fragment),rJr=l(),Hr=a("div"),F(D$.$$.fragment),tJr=l(),PAe=a("p"),aJr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),nJr=l(),An=a("p"),sJr=o("The model class to instantiate is selected based on the "),BAe=a("code"),lJr=o("model_type"),iJr=o(` property of the config object (either
passed as an argument or loaded from `),NAe=a("code"),dJr=o("pretrained_model_name_or_path"),cJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IAe=a("code"),mJr=o("pretrained_model_name_or_path"),fJr=o(":"),gJr=l(),Se=a("ul"),BA=a("li"),qAe=a("strong"),hJr=o("albert"),uJr=o(" \u2014 "),Noe=a("a"),pJr=o("FlaxAlbertForSequenceClassification"),_Jr=o(" (ALBERT model)"),bJr=l(),NA=a("li"),jAe=a("strong"),vJr=o("bart"),FJr=o(" \u2014 "),Ioe=a("a"),TJr=o("FlaxBartForSequenceClassification"),MJr=o(" (BART model)"),EJr=l(),IA=a("li"),DAe=a("strong"),CJr=o("bert"),wJr=o(" \u2014 "),qoe=a("a"),AJr=o("FlaxBertForSequenceClassification"),LJr=o(" (BERT model)"),yJr=l(),qA=a("li"),GAe=a("strong"),xJr=o("big_bird"),$Jr=o(" \u2014 "),joe=a("a"),kJr=o("FlaxBigBirdForSequenceClassification"),SJr=o(" (BigBird model)"),RJr=l(),jA=a("li"),OAe=a("strong"),PJr=o("distilbert"),BJr=o(" \u2014 "),Doe=a("a"),NJr=o("FlaxDistilBertForSequenceClassification"),IJr=o(" (DistilBERT model)"),qJr=l(),DA=a("li"),VAe=a("strong"),jJr=o("electra"),DJr=o(" \u2014 "),Goe=a("a"),GJr=o("FlaxElectraForSequenceClassification"),OJr=o(" (ELECTRA model)"),VJr=l(),GA=a("li"),XAe=a("strong"),XJr=o("mbart"),zJr=o(" \u2014 "),Ooe=a("a"),QJr=o("FlaxMBartForSequenceClassification"),WJr=o(" (mBART model)"),HJr=l(),OA=a("li"),zAe=a("strong"),UJr=o("roberta"),JJr=o(" \u2014 "),Voe=a("a"),YJr=o("FlaxRobertaForSequenceClassification"),KJr=o(" (RoBERTa model)"),ZJr=l(),VA=a("li"),QAe=a("strong"),eYr=o("roformer"),oYr=o(" \u2014 "),Xoe=a("a"),rYr=o("FlaxRoFormerForSequenceClassification"),tYr=o(" (RoFormer model)"),aYr=l(),XA=a("li"),WAe=a("strong"),nYr=o("xlm-roberta"),sYr=o(" \u2014 "),zoe=a("a"),lYr=o("FlaxXLMRobertaForSequenceClassification"),iYr=o(" (XLM-RoBERTa model)"),dYr=l(),F(zA.$$.fragment),lQe=l(),gm=a("h2"),QA=a("a"),HAe=a("span"),F(G$.$$.fragment),cYr=l(),UAe=a("span"),mYr=o("FlaxAutoModelForQuestionAnswering"),iQe=l(),Tr=a("div"),F(O$.$$.fragment),fYr=l(),hm=a("p"),gYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Qoe=a("a"),hYr=o("from_pretrained()"),uYr=o(" class method or the "),Woe=a("a"),pYr=o("from_config()"),_Yr=o(` class
method.`),bYr=l(),V$=a("p"),vYr=o("This class cannot be instantiated directly using "),JAe=a("code"),FYr=o("__init__()"),TYr=o(" (throws an error)."),MYr=l(),Zt=a("div"),F(X$.$$.fragment),EYr=l(),YAe=a("p"),CYr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),wYr=l(),um=a("p"),AYr=o(`Note:
Loading a model from its configuration file does `),KAe=a("strong"),LYr=o("not"),yYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hoe=a("a"),xYr=o("from_pretrained()"),$Yr=o(" to load the model weights."),kYr=l(),F(WA.$$.fragment),SYr=l(),Ur=a("div"),F(z$.$$.fragment),RYr=l(),ZAe=a("p"),PYr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),BYr=l(),Ln=a("p"),NYr=o("The model class to instantiate is selected based on the "),e6e=a("code"),IYr=o("model_type"),qYr=o(` property of the config object (either
passed as an argument or loaded from `),o6e=a("code"),jYr=o("pretrained_model_name_or_path"),DYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r6e=a("code"),GYr=o("pretrained_model_name_or_path"),OYr=o(":"),VYr=l(),Re=a("ul"),HA=a("li"),t6e=a("strong"),XYr=o("albert"),zYr=o(" \u2014 "),Uoe=a("a"),QYr=o("FlaxAlbertForQuestionAnswering"),WYr=o(" (ALBERT model)"),HYr=l(),UA=a("li"),a6e=a("strong"),UYr=o("bart"),JYr=o(" \u2014 "),Joe=a("a"),YYr=o("FlaxBartForQuestionAnswering"),KYr=o(" (BART model)"),ZYr=l(),JA=a("li"),n6e=a("strong"),eKr=o("bert"),oKr=o(" \u2014 "),Yoe=a("a"),rKr=o("FlaxBertForQuestionAnswering"),tKr=o(" (BERT model)"),aKr=l(),YA=a("li"),s6e=a("strong"),nKr=o("big_bird"),sKr=o(" \u2014 "),Koe=a("a"),lKr=o("FlaxBigBirdForQuestionAnswering"),iKr=o(" (BigBird model)"),dKr=l(),KA=a("li"),l6e=a("strong"),cKr=o("distilbert"),mKr=o(" \u2014 "),Zoe=a("a"),fKr=o("FlaxDistilBertForQuestionAnswering"),gKr=o(" (DistilBERT model)"),hKr=l(),ZA=a("li"),i6e=a("strong"),uKr=o("electra"),pKr=o(" \u2014 "),ere=a("a"),_Kr=o("FlaxElectraForQuestionAnswering"),bKr=o(" (ELECTRA model)"),vKr=l(),e6=a("li"),d6e=a("strong"),FKr=o("mbart"),TKr=o(" \u2014 "),ore=a("a"),MKr=o("FlaxMBartForQuestionAnswering"),EKr=o(" (mBART model)"),CKr=l(),o6=a("li"),c6e=a("strong"),wKr=o("roberta"),AKr=o(" \u2014 "),rre=a("a"),LKr=o("FlaxRobertaForQuestionAnswering"),yKr=o(" (RoBERTa model)"),xKr=l(),r6=a("li"),m6e=a("strong"),$Kr=o("roformer"),kKr=o(" \u2014 "),tre=a("a"),SKr=o("FlaxRoFormerForQuestionAnswering"),RKr=o(" (RoFormer model)"),PKr=l(),t6=a("li"),f6e=a("strong"),BKr=o("xlm-roberta"),NKr=o(" \u2014 "),are=a("a"),IKr=o("FlaxXLMRobertaForQuestionAnswering"),qKr=o(" (XLM-RoBERTa model)"),jKr=l(),F(a6.$$.fragment),dQe=l(),pm=a("h2"),n6=a("a"),g6e=a("span"),F(Q$.$$.fragment),DKr=l(),h6e=a("span"),GKr=o("FlaxAutoModelForTokenClassification"),cQe=l(),Mr=a("div"),F(W$.$$.fragment),OKr=l(),_m=a("p"),VKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),nre=a("a"),XKr=o("from_pretrained()"),zKr=o(" class method or the "),sre=a("a"),QKr=o("from_config()"),WKr=o(` class
method.`),HKr=l(),H$=a("p"),UKr=o("This class cannot be instantiated directly using "),u6e=a("code"),JKr=o("__init__()"),YKr=o(" (throws an error)."),KKr=l(),ea=a("div"),F(U$.$$.fragment),ZKr=l(),p6e=a("p"),eZr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),oZr=l(),bm=a("p"),rZr=o(`Note:
Loading a model from its configuration file does `),_6e=a("strong"),tZr=o("not"),aZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lre=a("a"),nZr=o("from_pretrained()"),sZr=o(" to load the model weights."),lZr=l(),F(s6.$$.fragment),iZr=l(),Jr=a("div"),F(J$.$$.fragment),dZr=l(),b6e=a("p"),cZr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),mZr=l(),yn=a("p"),fZr=o("The model class to instantiate is selected based on the "),v6e=a("code"),gZr=o("model_type"),hZr=o(` property of the config object (either
passed as an argument or loaded from `),F6e=a("code"),uZr=o("pretrained_model_name_or_path"),pZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T6e=a("code"),_Zr=o("pretrained_model_name_or_path"),bZr=o(":"),vZr=l(),Ve=a("ul"),l6=a("li"),M6e=a("strong"),FZr=o("albert"),TZr=o(" \u2014 "),ire=a("a"),MZr=o("FlaxAlbertForTokenClassification"),EZr=o(" (ALBERT model)"),CZr=l(),i6=a("li"),E6e=a("strong"),wZr=o("bert"),AZr=o(" \u2014 "),dre=a("a"),LZr=o("FlaxBertForTokenClassification"),yZr=o(" (BERT model)"),xZr=l(),d6=a("li"),C6e=a("strong"),$Zr=o("big_bird"),kZr=o(" \u2014 "),cre=a("a"),SZr=o("FlaxBigBirdForTokenClassification"),RZr=o(" (BigBird model)"),PZr=l(),c6=a("li"),w6e=a("strong"),BZr=o("distilbert"),NZr=o(" \u2014 "),mre=a("a"),IZr=o("FlaxDistilBertForTokenClassification"),qZr=o(" (DistilBERT model)"),jZr=l(),m6=a("li"),A6e=a("strong"),DZr=o("electra"),GZr=o(" \u2014 "),fre=a("a"),OZr=o("FlaxElectraForTokenClassification"),VZr=o(" (ELECTRA model)"),XZr=l(),f6=a("li"),L6e=a("strong"),zZr=o("roberta"),QZr=o(" \u2014 "),gre=a("a"),WZr=o("FlaxRobertaForTokenClassification"),HZr=o(" (RoBERTa model)"),UZr=l(),g6=a("li"),y6e=a("strong"),JZr=o("roformer"),YZr=o(" \u2014 "),hre=a("a"),KZr=o("FlaxRoFormerForTokenClassification"),ZZr=o(" (RoFormer model)"),eet=l(),h6=a("li"),x6e=a("strong"),oet=o("xlm-roberta"),ret=o(" \u2014 "),ure=a("a"),tet=o("FlaxXLMRobertaForTokenClassification"),aet=o(" (XLM-RoBERTa model)"),net=l(),F(u6.$$.fragment),mQe=l(),vm=a("h2"),p6=a("a"),$6e=a("span"),F(Y$.$$.fragment),set=l(),k6e=a("span"),iet=o("FlaxAutoModelForMultipleChoice"),fQe=l(),Er=a("div"),F(K$.$$.fragment),det=l(),Fm=a("p"),cet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),pre=a("a"),met=o("from_pretrained()"),fet=o(" class method or the "),_re=a("a"),get=o("from_config()"),het=o(` class
method.`),uet=l(),Z$=a("p"),pet=o("This class cannot be instantiated directly using "),S6e=a("code"),_et=o("__init__()"),bet=o(" (throws an error)."),vet=l(),oa=a("div"),F(ek.$$.fragment),Fet=l(),R6e=a("p"),Tet=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Met=l(),Tm=a("p"),Eet=o(`Note:
Loading a model from its configuration file does `),P6e=a("strong"),Cet=o("not"),wet=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bre=a("a"),Aet=o("from_pretrained()"),Let=o(" to load the model weights."),yet=l(),F(_6.$$.fragment),xet=l(),Yr=a("div"),F(ok.$$.fragment),$et=l(),B6e=a("p"),ket=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Set=l(),xn=a("p"),Ret=o("The model class to instantiate is selected based on the "),N6e=a("code"),Pet=o("model_type"),Bet=o(` property of the config object (either
passed as an argument or loaded from `),I6e=a("code"),Net=o("pretrained_model_name_or_path"),Iet=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q6e=a("code"),qet=o("pretrained_model_name_or_path"),jet=o(":"),Det=l(),Xe=a("ul"),b6=a("li"),j6e=a("strong"),Get=o("albert"),Oet=o(" \u2014 "),vre=a("a"),Vet=o("FlaxAlbertForMultipleChoice"),Xet=o(" (ALBERT model)"),zet=l(),v6=a("li"),D6e=a("strong"),Qet=o("bert"),Wet=o(" \u2014 "),Fre=a("a"),Het=o("FlaxBertForMultipleChoice"),Uet=o(" (BERT model)"),Jet=l(),F6=a("li"),G6e=a("strong"),Yet=o("big_bird"),Ket=o(" \u2014 "),Tre=a("a"),Zet=o("FlaxBigBirdForMultipleChoice"),eot=o(" (BigBird model)"),oot=l(),T6=a("li"),O6e=a("strong"),rot=o("distilbert"),tot=o(" \u2014 "),Mre=a("a"),aot=o("FlaxDistilBertForMultipleChoice"),not=o(" (DistilBERT model)"),sot=l(),M6=a("li"),V6e=a("strong"),lot=o("electra"),iot=o(" \u2014 "),Ere=a("a"),dot=o("FlaxElectraForMultipleChoice"),cot=o(" (ELECTRA model)"),mot=l(),E6=a("li"),X6e=a("strong"),fot=o("roberta"),got=o(" \u2014 "),Cre=a("a"),hot=o("FlaxRobertaForMultipleChoice"),uot=o(" (RoBERTa model)"),pot=l(),C6=a("li"),z6e=a("strong"),_ot=o("roformer"),bot=o(" \u2014 "),wre=a("a"),vot=o("FlaxRoFormerForMultipleChoice"),Fot=o(" (RoFormer model)"),Tot=l(),w6=a("li"),Q6e=a("strong"),Mot=o("xlm-roberta"),Eot=o(" \u2014 "),Are=a("a"),Cot=o("FlaxXLMRobertaForMultipleChoice"),wot=o(" (XLM-RoBERTa model)"),Aot=l(),F(A6.$$.fragment),gQe=l(),Mm=a("h2"),L6=a("a"),W6e=a("span"),F(rk.$$.fragment),Lot=l(),H6e=a("span"),yot=o("FlaxAutoModelForNextSentencePrediction"),hQe=l(),Cr=a("div"),F(tk.$$.fragment),xot=l(),Em=a("p"),$ot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Lre=a("a"),kot=o("from_pretrained()"),Sot=o(" class method or the "),yre=a("a"),Rot=o("from_config()"),Pot=o(` class
method.`),Bot=l(),ak=a("p"),Not=o("This class cannot be instantiated directly using "),U6e=a("code"),Iot=o("__init__()"),qot=o(" (throws an error)."),jot=l(),ra=a("div"),F(nk.$$.fragment),Dot=l(),J6e=a("p"),Got=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Oot=l(),Cm=a("p"),Vot=o(`Note:
Loading a model from its configuration file does `),Y6e=a("strong"),Xot=o("not"),zot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xre=a("a"),Qot=o("from_pretrained()"),Wot=o(" to load the model weights."),Hot=l(),F(y6.$$.fragment),Uot=l(),Kr=a("div"),F(sk.$$.fragment),Jot=l(),K6e=a("p"),Yot=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Kot=l(),$n=a("p"),Zot=o("The model class to instantiate is selected based on the "),Z6e=a("code"),ert=o("model_type"),ort=o(` property of the config object (either
passed as an argument or loaded from `),e7e=a("code"),rrt=o("pretrained_model_name_or_path"),trt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o7e=a("code"),art=o("pretrained_model_name_or_path"),nrt=o(":"),srt=l(),r7e=a("ul"),x6=a("li"),t7e=a("strong"),lrt=o("bert"),irt=o(" \u2014 "),$re=a("a"),drt=o("FlaxBertForNextSentencePrediction"),crt=o(" (BERT model)"),mrt=l(),F($6.$$.fragment),uQe=l(),wm=a("h2"),k6=a("a"),a7e=a("span"),F(lk.$$.fragment),frt=l(),n7e=a("span"),grt=o("FlaxAutoModelForImageClassification"),pQe=l(),wr=a("div"),F(ik.$$.fragment),hrt=l(),Am=a("p"),urt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),kre=a("a"),prt=o("from_pretrained()"),_rt=o(" class method or the "),Sre=a("a"),brt=o("from_config()"),vrt=o(` class
method.`),Frt=l(),dk=a("p"),Trt=o("This class cannot be instantiated directly using "),s7e=a("code"),Mrt=o("__init__()"),Ert=o(" (throws an error)."),Crt=l(),ta=a("div"),F(ck.$$.fragment),wrt=l(),l7e=a("p"),Art=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Lrt=l(),Lm=a("p"),yrt=o(`Note:
Loading a model from its configuration file does `),i7e=a("strong"),xrt=o("not"),$rt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rre=a("a"),krt=o("from_pretrained()"),Srt=o(" to load the model weights."),Rrt=l(),F(S6.$$.fragment),Prt=l(),Zr=a("div"),F(mk.$$.fragment),Brt=l(),d7e=a("p"),Nrt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Irt=l(),kn=a("p"),qrt=o("The model class to instantiate is selected based on the "),c7e=a("code"),jrt=o("model_type"),Drt=o(` property of the config object (either
passed as an argument or loaded from `),m7e=a("code"),Grt=o("pretrained_model_name_or_path"),Ort=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f7e=a("code"),Vrt=o("pretrained_model_name_or_path"),Xrt=o(":"),zrt=l(),fk=a("ul"),R6=a("li"),g7e=a("strong"),Qrt=o("beit"),Wrt=o(" \u2014 "),Pre=a("a"),Hrt=o("FlaxBeitForImageClassification"),Urt=o(" (BEiT model)"),Jrt=l(),P6=a("li"),h7e=a("strong"),Yrt=o("vit"),Krt=o(" \u2014 "),Bre=a("a"),Zrt=o("FlaxViTForImageClassification"),ett=o(" (ViT model)"),ott=l(),F(B6.$$.fragment),_Qe=l(),ym=a("h2"),N6=a("a"),u7e=a("span"),F(gk.$$.fragment),rtt=l(),p7e=a("span"),ttt=o("FlaxAutoModelForVision2Seq"),bQe=l(),Ar=a("div"),F(hk.$$.fragment),att=l(),xm=a("p"),ntt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Nre=a("a"),stt=o("from_pretrained()"),ltt=o(" class method or the "),Ire=a("a"),itt=o("from_config()"),dtt=o(` class
method.`),ctt=l(),uk=a("p"),mtt=o("This class cannot be instantiated directly using "),_7e=a("code"),ftt=o("__init__()"),gtt=o(" (throws an error)."),htt=l(),aa=a("div"),F(pk.$$.fragment),utt=l(),b7e=a("p"),ptt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_tt=l(),$m=a("p"),btt=o(`Note:
Loading a model from its configuration file does `),v7e=a("strong"),vtt=o("not"),Ftt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qre=a("a"),Ttt=o("from_pretrained()"),Mtt=o(" to load the model weights."),Ett=l(),F(I6.$$.fragment),Ctt=l(),et=a("div"),F(_k.$$.fragment),wtt=l(),F7e=a("p"),Att=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ltt=l(),Sn=a("p"),ytt=o("The model class to instantiate is selected based on the "),T7e=a("code"),xtt=o("model_type"),$tt=o(` property of the config object (either
passed as an argument or loaded from `),M7e=a("code"),ktt=o("pretrained_model_name_or_path"),Stt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E7e=a("code"),Rtt=o("pretrained_model_name_or_path"),Ptt=o(":"),Btt=l(),C7e=a("ul"),q6=a("li"),w7e=a("strong"),Ntt=o("vision-encoder-decoder"),Itt=o(" \u2014 "),jre=a("a"),qtt=o("FlaxVisionEncoderDecoderModel"),jtt=o(" (Vision Encoder decoder model)"),Dtt=l(),F(j6.$$.fragment),this.h()},l(m){const _=LWt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(m),u=n(m,"H1",{class:!0});var bk=s(u);f=n(bk,"A",{id:!0,class:!0,href:!0});var A7e=s(f);p=n(A7e,"SPAN",{});var L7e=s(p);T(d.$$.fragment,L7e),L7e.forEach(t),A7e.forEach(t),h=i(bk),Co=n(bk,"SPAN",{});var y7e=s(Co);yi=r(y7e,"Auto Classes"),y7e.forEach(t),bk.forEach(t),Pm=i(m),lt=n(m,"P",{});var vk=s(lt);xi=r(vk,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),$i=n(vk,"CODE",{});var x7e=s($i);ay=r(x7e,"from_pretrained()"),x7e.forEach(t),Bm=r(vk,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),vk.forEach(t),Oe=i(m),We=n(m,"P",{});var Rn=s(We);ki=r(Rn,"Instantiating one of "),Pn=n(Rn,"A",{href:!0});var $7e=s(Pn);ny=r($7e,"AutoConfig"),$7e.forEach(t),Bn=r(Rn,", "),Nn=n(Rn,"A",{href:!0});var k7e=s(Nn);sy=r(k7e,"AutoModel"),k7e.forEach(t),Si=r(Rn,`, and
`),In=n(Rn,"A",{href:!0});var S7e=s(In);ly=r(S7e,"AutoTokenizer"),S7e.forEach(t),Ri=r(Rn," will directly create a class of the relevant architecture. For instance"),Rn.forEach(t),Nm=i(m),T(Sa.$$.fragment,m),He=i(m),Ae=n(m,"P",{});var Fk=s(Ae);DS=r(Fk,"will create a model that is an instance of "),Pi=n(Fk,"A",{href:!0});var R7e=s(Pi);GS=r(R7e,"BertModel"),R7e.forEach(t),OS=r(Fk,"."),Fk.forEach(t),wo=i(m),Ra=n(m,"P",{});var Tk=s(Ra);VS=r(Tk,"There is one class of "),Im=n(Tk,"CODE",{});var P7e=s(Im);XS=r(P7e,"AutoModel"),P7e.forEach(t),xHe=r(Tk," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Tk.forEach(t),hXe=i(m),Bi=n(m,"H2",{class:!0});var Mk=s(Bi);qm=n(Mk,"A",{id:!0,class:!0,href:!0});var B7e=s(qm);Pae=n(B7e,"SPAN",{});var N7e=s(Pae);T(iy.$$.fragment,N7e),N7e.forEach(t),B7e.forEach(t),$He=i(Mk),Bae=n(Mk,"SPAN",{});var I7e=s(Bae);kHe=r(I7e,"Extending the Auto Classes"),I7e.forEach(t),Mk.forEach(t),uXe=i(m),qn=n(m,"P",{});var km=s(qn);SHe=r(km,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Nae=n(km,"CODE",{});var q7e=s(Nae);RHe=r(q7e,"NewModel"),q7e.forEach(t),PHe=r(km,", make sure you have a "),Iae=n(km,"CODE",{});var j7e=s(Iae);BHe=r(j7e,"NewModelConfig"),j7e.forEach(t),NHe=r(km,` then you can add those to the auto
classes like this:`),km.forEach(t),pXe=i(m),T(dy.$$.fragment,m),_Xe=i(m),zS=n(m,"P",{});var D7e=s(zS);IHe=r(D7e,"You will then be able to use the auto classes like you would usually do!"),D7e.forEach(t),bXe=i(m),T(jm.$$.fragment,m),vXe=i(m),Ni=n(m,"H2",{class:!0});var Ek=s(Ni);Dm=n(Ek,"A",{id:!0,class:!0,href:!0});var G7e=s(Dm);qae=n(G7e,"SPAN",{});var O7e=s(qae);T(cy.$$.fragment,O7e),O7e.forEach(t),G7e.forEach(t),qHe=i(Ek),jae=n(Ek,"SPAN",{});var V7e=s(jae);jHe=r(V7e,"AutoConfig"),V7e.forEach(t),Ek.forEach(t),FXe=i(m),Ao=n(m,"DIV",{class:!0});var nt=s(Ao);T(my.$$.fragment,nt),DHe=i(nt),fy=n(nt,"P",{});var Ck=s(fy);GHe=r(Ck,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),QS=n(Ck,"A",{href:!0});var X7e=s(QS);OHe=r(X7e,"from_pretrained()"),X7e.forEach(t),VHe=r(Ck," class method."),Ck.forEach(t),XHe=i(nt),gy=n(nt,"P",{});var wk=s(gy);zHe=r(wk,"This class cannot be instantiated directly using "),Dae=n(wk,"CODE",{});var z7e=s(Dae);QHe=r(z7e,"__init__()"),z7e.forEach(t),WHe=r(wk," (throws an error)."),wk.forEach(t),HHe=i(nt),Lr=n(nt,"DIV",{class:!0});var st=s(Lr);T(hy.$$.fragment,st),UHe=i(st),Gae=n(st,"P",{});var Q7e=s(Gae);JHe=r(Q7e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),Q7e.forEach(t),YHe=i(st),Ii=n(st,"P",{});var Sm=s(Ii);KHe=r(Sm,"The configuration class to instantiate is selected based on the "),Oae=n(Sm,"CODE",{});var W7e=s(Oae);ZHe=r(W7e,"model_type"),W7e.forEach(t),eUe=r(Sm,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Vae=n(Sm,"CODE",{});var H7e=s(Vae);oUe=r(H7e,"pretrained_model_name_or_path"),H7e.forEach(t),rUe=r(Sm,":"),Sm.forEach(t),tUe=i(st),A=n(st,"UL",{});var L=s(A);Gm=n(L,"LI",{});var D6=s(Gm);Xae=n(D6,"STRONG",{});var U7e=s(Xae);aUe=r(U7e,"albert"),U7e.forEach(t),nUe=r(D6," \u2014 "),WS=n(D6,"A",{href:!0});var J7e=s(WS);sUe=r(J7e,"AlbertConfig"),J7e.forEach(t),lUe=r(D6," (ALBERT model)"),D6.forEach(t),iUe=i(L),Om=n(L,"LI",{});var G6=s(Om);zae=n(G6,"STRONG",{});var Y7e=s(zae);dUe=r(Y7e,"bart"),Y7e.forEach(t),cUe=r(G6," \u2014 "),HS=n(G6,"A",{href:!0});var K7e=s(HS);mUe=r(K7e,"BartConfig"),K7e.forEach(t),fUe=r(G6," (BART model)"),G6.forEach(t),gUe=i(L),Vm=n(L,"LI",{});var O6=s(Vm);Qae=n(O6,"STRONG",{});var Z7e=s(Qae);hUe=r(Z7e,"beit"),Z7e.forEach(t),uUe=r(O6," \u2014 "),US=n(O6,"A",{href:!0});var eLe=s(US);pUe=r(eLe,"BeitConfig"),eLe.forEach(t),_Ue=r(O6," (BEiT model)"),O6.forEach(t),bUe=i(L),Xm=n(L,"LI",{});var V6=s(Xm);Wae=n(V6,"STRONG",{});var oLe=s(Wae);vUe=r(oLe,"bert"),oLe.forEach(t),FUe=r(V6," \u2014 "),JS=n(V6,"A",{href:!0});var rLe=s(JS);TUe=r(rLe,"BertConfig"),rLe.forEach(t),MUe=r(V6," (BERT model)"),V6.forEach(t),EUe=i(L),zm=n(L,"LI",{});var X6=s(zm);Hae=n(X6,"STRONG",{});var tLe=s(Hae);CUe=r(tLe,"bert-generation"),tLe.forEach(t),wUe=r(X6," \u2014 "),YS=n(X6,"A",{href:!0});var aLe=s(YS);AUe=r(aLe,"BertGenerationConfig"),aLe.forEach(t),LUe=r(X6," (Bert Generation model)"),X6.forEach(t),yUe=i(L),Qm=n(L,"LI",{});var z6=s(Qm);Uae=n(z6,"STRONG",{});var nLe=s(Uae);xUe=r(nLe,"big_bird"),nLe.forEach(t),$Ue=r(z6," \u2014 "),KS=n(z6,"A",{href:!0});var sLe=s(KS);kUe=r(sLe,"BigBirdConfig"),sLe.forEach(t),SUe=r(z6," (BigBird model)"),z6.forEach(t),RUe=i(L),Wm=n(L,"LI",{});var Q6=s(Wm);Jae=n(Q6,"STRONG",{});var lLe=s(Jae);PUe=r(lLe,"bigbird_pegasus"),lLe.forEach(t),BUe=r(Q6," \u2014 "),ZS=n(Q6,"A",{href:!0});var iLe=s(ZS);NUe=r(iLe,"BigBirdPegasusConfig"),iLe.forEach(t),IUe=r(Q6," (BigBird-Pegasus model)"),Q6.forEach(t),qUe=i(L),Hm=n(L,"LI",{});var W6=s(Hm);Yae=n(W6,"STRONG",{});var dLe=s(Yae);jUe=r(dLe,"blenderbot"),dLe.forEach(t),DUe=r(W6," \u2014 "),eR=n(W6,"A",{href:!0});var cLe=s(eR);GUe=r(cLe,"BlenderbotConfig"),cLe.forEach(t),OUe=r(W6," (Blenderbot model)"),W6.forEach(t),VUe=i(L),Um=n(L,"LI",{});var H6=s(Um);Kae=n(H6,"STRONG",{});var mLe=s(Kae);XUe=r(mLe,"blenderbot-small"),mLe.forEach(t),zUe=r(H6," \u2014 "),oR=n(H6,"A",{href:!0});var fLe=s(oR);QUe=r(fLe,"BlenderbotSmallConfig"),fLe.forEach(t),WUe=r(H6," (BlenderbotSmall model)"),H6.forEach(t),HUe=i(L),Jm=n(L,"LI",{});var U6=s(Jm);Zae=n(U6,"STRONG",{});var gLe=s(Zae);UUe=r(gLe,"bloom"),gLe.forEach(t),JUe=r(U6," \u2014 "),rR=n(U6,"A",{href:!0});var hLe=s(rR);YUe=r(hLe,"BloomConfig"),hLe.forEach(t),KUe=r(U6," (BLOOM model)"),U6.forEach(t),ZUe=i(L),Ym=n(L,"LI",{});var J6=s(Ym);ene=n(J6,"STRONG",{});var uLe=s(ene);eJe=r(uLe,"camembert"),uLe.forEach(t),oJe=r(J6," \u2014 "),tR=n(J6,"A",{href:!0});var pLe=s(tR);rJe=r(pLe,"CamembertConfig"),pLe.forEach(t),tJe=r(J6," (CamemBERT model)"),J6.forEach(t),aJe=i(L),Km=n(L,"LI",{});var Y6=s(Km);one=n(Y6,"STRONG",{});var _Le=s(one);nJe=r(_Le,"canine"),_Le.forEach(t),sJe=r(Y6," \u2014 "),aR=n(Y6,"A",{href:!0});var bLe=s(aR);lJe=r(bLe,"CanineConfig"),bLe.forEach(t),iJe=r(Y6," (CANINE model)"),Y6.forEach(t),dJe=i(L),Zm=n(L,"LI",{});var K6=s(Zm);rne=n(K6,"STRONG",{});var vLe=s(rne);cJe=r(vLe,"clip"),vLe.forEach(t),mJe=r(K6," \u2014 "),nR=n(K6,"A",{href:!0});var FLe=s(nR);fJe=r(FLe,"CLIPConfig"),FLe.forEach(t),gJe=r(K6," (CLIP model)"),K6.forEach(t),hJe=i(L),ef=n(L,"LI",{});var Z6=s(ef);tne=n(Z6,"STRONG",{});var TLe=s(tne);uJe=r(TLe,"codegen"),TLe.forEach(t),pJe=r(Z6," \u2014 "),sR=n(Z6,"A",{href:!0});var MLe=s(sR);_Je=r(MLe,"CodeGenConfig"),MLe.forEach(t),bJe=r(Z6," (CodeGen model)"),Z6.forEach(t),vJe=i(L),of=n(L,"LI",{});var e7=s(of);ane=n(e7,"STRONG",{});var ELe=s(ane);FJe=r(ELe,"convbert"),ELe.forEach(t),TJe=r(e7," \u2014 "),lR=n(e7,"A",{href:!0});var CLe=s(lR);MJe=r(CLe,"ConvBertConfig"),CLe.forEach(t),EJe=r(e7," (ConvBERT model)"),e7.forEach(t),CJe=i(L),rf=n(L,"LI",{});var o7=s(rf);nne=n(o7,"STRONG",{});var wLe=s(nne);wJe=r(wLe,"convnext"),wLe.forEach(t),AJe=r(o7," \u2014 "),iR=n(o7,"A",{href:!0});var ALe=s(iR);LJe=r(ALe,"ConvNextConfig"),ALe.forEach(t),yJe=r(o7," (ConvNeXT model)"),o7.forEach(t),xJe=i(L),tf=n(L,"LI",{});var r7=s(tf);sne=n(r7,"STRONG",{});var LLe=s(sne);$Je=r(LLe,"ctrl"),LLe.forEach(t),kJe=r(r7," \u2014 "),dR=n(r7,"A",{href:!0});var yLe=s(dR);SJe=r(yLe,"CTRLConfig"),yLe.forEach(t),RJe=r(r7," (CTRL model)"),r7.forEach(t),PJe=i(L),af=n(L,"LI",{});var t7=s(af);lne=n(t7,"STRONG",{});var xLe=s(lne);BJe=r(xLe,"cvt"),xLe.forEach(t),NJe=r(t7," \u2014 "),cR=n(t7,"A",{href:!0});var $Le=s(cR);IJe=r($Le,"CvtConfig"),$Le.forEach(t),qJe=r(t7," (CvT model)"),t7.forEach(t),jJe=i(L),nf=n(L,"LI",{});var a7=s(nf);ine=n(a7,"STRONG",{});var kLe=s(ine);DJe=r(kLe,"data2vec-audio"),kLe.forEach(t),GJe=r(a7," \u2014 "),mR=n(a7,"A",{href:!0});var SLe=s(mR);OJe=r(SLe,"Data2VecAudioConfig"),SLe.forEach(t),VJe=r(a7," (Data2VecAudio model)"),a7.forEach(t),XJe=i(L),sf=n(L,"LI",{});var n7=s(sf);dne=n(n7,"STRONG",{});var RLe=s(dne);zJe=r(RLe,"data2vec-text"),RLe.forEach(t),QJe=r(n7," \u2014 "),fR=n(n7,"A",{href:!0});var PLe=s(fR);WJe=r(PLe,"Data2VecTextConfig"),PLe.forEach(t),HJe=r(n7," (Data2VecText model)"),n7.forEach(t),UJe=i(L),lf=n(L,"LI",{});var s7=s(lf);cne=n(s7,"STRONG",{});var BLe=s(cne);JJe=r(BLe,"data2vec-vision"),BLe.forEach(t),YJe=r(s7," \u2014 "),gR=n(s7,"A",{href:!0});var NLe=s(gR);KJe=r(NLe,"Data2VecVisionConfig"),NLe.forEach(t),ZJe=r(s7," (Data2VecVision model)"),s7.forEach(t),eYe=i(L),df=n(L,"LI",{});var l7=s(df);mne=n(l7,"STRONG",{});var ILe=s(mne);oYe=r(ILe,"deberta"),ILe.forEach(t),rYe=r(l7," \u2014 "),hR=n(l7,"A",{href:!0});var qLe=s(hR);tYe=r(qLe,"DebertaConfig"),qLe.forEach(t),aYe=r(l7," (DeBERTa model)"),l7.forEach(t),nYe=i(L),cf=n(L,"LI",{});var i7=s(cf);fne=n(i7,"STRONG",{});var jLe=s(fne);sYe=r(jLe,"deberta-v2"),jLe.forEach(t),lYe=r(i7," \u2014 "),uR=n(i7,"A",{href:!0});var DLe=s(uR);iYe=r(DLe,"DebertaV2Config"),DLe.forEach(t),dYe=r(i7," (DeBERTa-v2 model)"),i7.forEach(t),cYe=i(L),mf=n(L,"LI",{});var d7=s(mf);gne=n(d7,"STRONG",{});var Ott=s(gne);mYe=r(Ott,"decision_transformer"),Ott.forEach(t),fYe=r(d7," \u2014 "),pR=n(d7,"A",{href:!0});var Vtt=s(pR);gYe=r(Vtt,"DecisionTransformerConfig"),Vtt.forEach(t),hYe=r(d7," (Decision Transformer model)"),d7.forEach(t),uYe=i(L),ff=n(L,"LI",{});var GLe=s(ff);hne=n(GLe,"STRONG",{});var Xtt=s(hne);pYe=r(Xtt,"deit"),Xtt.forEach(t),_Ye=r(GLe," \u2014 "),_R=n(GLe,"A",{href:!0});var ztt=s(_R);bYe=r(ztt,"DeiTConfig"),ztt.forEach(t),vYe=r(GLe," (DeiT model)"),GLe.forEach(t),FYe=i(L),gf=n(L,"LI",{});var OLe=s(gf);une=n(OLe,"STRONG",{});var Qtt=s(une);TYe=r(Qtt,"detr"),Qtt.forEach(t),MYe=r(OLe," \u2014 "),bR=n(OLe,"A",{href:!0});var Wtt=s(bR);EYe=r(Wtt,"DetrConfig"),Wtt.forEach(t),CYe=r(OLe," (DETR model)"),OLe.forEach(t),wYe=i(L),hf=n(L,"LI",{});var VLe=s(hf);pne=n(VLe,"STRONG",{});var Htt=s(pne);AYe=r(Htt,"distilbert"),Htt.forEach(t),LYe=r(VLe," \u2014 "),vR=n(VLe,"A",{href:!0});var Utt=s(vR);yYe=r(Utt,"DistilBertConfig"),Utt.forEach(t),xYe=r(VLe," (DistilBERT model)"),VLe.forEach(t),$Ye=i(L),uf=n(L,"LI",{});var XLe=s(uf);_ne=n(XLe,"STRONG",{});var Jtt=s(_ne);kYe=r(Jtt,"dpr"),Jtt.forEach(t),SYe=r(XLe," \u2014 "),FR=n(XLe,"A",{href:!0});var Ytt=s(FR);RYe=r(Ytt,"DPRConfig"),Ytt.forEach(t),PYe=r(XLe," (DPR model)"),XLe.forEach(t),BYe=i(L),pf=n(L,"LI",{});var zLe=s(pf);bne=n(zLe,"STRONG",{});var Ktt=s(bne);NYe=r(Ktt,"dpt"),Ktt.forEach(t),IYe=r(zLe," \u2014 "),TR=n(zLe,"A",{href:!0});var Ztt=s(TR);qYe=r(Ztt,"DPTConfig"),Ztt.forEach(t),jYe=r(zLe," (DPT model)"),zLe.forEach(t),DYe=i(L),_f=n(L,"LI",{});var QLe=s(_f);vne=n(QLe,"STRONG",{});var eat=s(vne);GYe=r(eat,"electra"),eat.forEach(t),OYe=r(QLe," \u2014 "),MR=n(QLe,"A",{href:!0});var oat=s(MR);VYe=r(oat,"ElectraConfig"),oat.forEach(t),XYe=r(QLe," (ELECTRA model)"),QLe.forEach(t),zYe=i(L),bf=n(L,"LI",{});var WLe=s(bf);Fne=n(WLe,"STRONG",{});var rat=s(Fne);QYe=r(rat,"encoder-decoder"),rat.forEach(t),WYe=r(WLe," \u2014 "),ER=n(WLe,"A",{href:!0});var tat=s(ER);HYe=r(tat,"EncoderDecoderConfig"),tat.forEach(t),UYe=r(WLe," (Encoder decoder model)"),WLe.forEach(t),JYe=i(L),vf=n(L,"LI",{});var HLe=s(vf);Tne=n(HLe,"STRONG",{});var aat=s(Tne);YYe=r(aat,"flaubert"),aat.forEach(t),KYe=r(HLe," \u2014 "),CR=n(HLe,"A",{href:!0});var nat=s(CR);ZYe=r(nat,"FlaubertConfig"),nat.forEach(t),eKe=r(HLe," (FlauBERT model)"),HLe.forEach(t),oKe=i(L),Ff=n(L,"LI",{});var ULe=s(Ff);Mne=n(ULe,"STRONG",{});var sat=s(Mne);rKe=r(sat,"flava"),sat.forEach(t),tKe=r(ULe," \u2014 "),wR=n(ULe,"A",{href:!0});var lat=s(wR);aKe=r(lat,"FlavaConfig"),lat.forEach(t),nKe=r(ULe," (FLAVA model)"),ULe.forEach(t),sKe=i(L),Tf=n(L,"LI",{});var JLe=s(Tf);Ene=n(JLe,"STRONG",{});var iat=s(Ene);lKe=r(iat,"fnet"),iat.forEach(t),iKe=r(JLe," \u2014 "),AR=n(JLe,"A",{href:!0});var dat=s(AR);dKe=r(dat,"FNetConfig"),dat.forEach(t),cKe=r(JLe," (FNet model)"),JLe.forEach(t),mKe=i(L),Mf=n(L,"LI",{});var YLe=s(Mf);Cne=n(YLe,"STRONG",{});var cat=s(Cne);fKe=r(cat,"fsmt"),cat.forEach(t),gKe=r(YLe," \u2014 "),LR=n(YLe,"A",{href:!0});var mat=s(LR);hKe=r(mat,"FSMTConfig"),mat.forEach(t),uKe=r(YLe," (FairSeq Machine-Translation model)"),YLe.forEach(t),pKe=i(L),Ef=n(L,"LI",{});var KLe=s(Ef);wne=n(KLe,"STRONG",{});var fat=s(wne);_Ke=r(fat,"funnel"),fat.forEach(t),bKe=r(KLe," \u2014 "),yR=n(KLe,"A",{href:!0});var gat=s(yR);vKe=r(gat,"FunnelConfig"),gat.forEach(t),FKe=r(KLe," (Funnel Transformer model)"),KLe.forEach(t),TKe=i(L),Cf=n(L,"LI",{});var ZLe=s(Cf);Ane=n(ZLe,"STRONG",{});var hat=s(Ane);MKe=r(hat,"glpn"),hat.forEach(t),EKe=r(ZLe," \u2014 "),xR=n(ZLe,"A",{href:!0});var uat=s(xR);CKe=r(uat,"GLPNConfig"),uat.forEach(t),wKe=r(ZLe," (GLPN model)"),ZLe.forEach(t),AKe=i(L),wf=n(L,"LI",{});var eye=s(wf);Lne=n(eye,"STRONG",{});var pat=s(Lne);LKe=r(pat,"gpt2"),pat.forEach(t),yKe=r(eye," \u2014 "),$R=n(eye,"A",{href:!0});var _at=s($R);xKe=r(_at,"GPT2Config"),_at.forEach(t),$Ke=r(eye," (OpenAI GPT-2 model)"),eye.forEach(t),kKe=i(L),Af=n(L,"LI",{});var oye=s(Af);yne=n(oye,"STRONG",{});var bat=s(yne);SKe=r(bat,"gpt_neo"),bat.forEach(t),RKe=r(oye," \u2014 "),kR=n(oye,"A",{href:!0});var vat=s(kR);PKe=r(vat,"GPTNeoConfig"),vat.forEach(t),BKe=r(oye," (GPT Neo model)"),oye.forEach(t),NKe=i(L),Lf=n(L,"LI",{});var rye=s(Lf);xne=n(rye,"STRONG",{});var Fat=s(xne);IKe=r(Fat,"gpt_neox"),Fat.forEach(t),qKe=r(rye," \u2014 "),SR=n(rye,"A",{href:!0});var Tat=s(SR);jKe=r(Tat,"GPTNeoXConfig"),Tat.forEach(t),DKe=r(rye," (GPT NeoX model)"),rye.forEach(t),GKe=i(L),yf=n(L,"LI",{});var tye=s(yf);$ne=n(tye,"STRONG",{});var Mat=s($ne);OKe=r(Mat,"gptj"),Mat.forEach(t),VKe=r(tye," \u2014 "),RR=n(tye,"A",{href:!0});var Eat=s(RR);XKe=r(Eat,"GPTJConfig"),Eat.forEach(t),zKe=r(tye," (GPT-J model)"),tye.forEach(t),QKe=i(L),xf=n(L,"LI",{});var aye=s(xf);kne=n(aye,"STRONG",{});var Cat=s(kne);WKe=r(Cat,"groupvit"),Cat.forEach(t),HKe=r(aye," \u2014 "),PR=n(aye,"A",{href:!0});var wat=s(PR);UKe=r(wat,"GroupViTConfig"),wat.forEach(t),JKe=r(aye," (GroupViT model)"),aye.forEach(t),YKe=i(L),$f=n(L,"LI",{});var nye=s($f);Sne=n(nye,"STRONG",{});var Aat=s(Sne);KKe=r(Aat,"hubert"),Aat.forEach(t),ZKe=r(nye," \u2014 "),BR=n(nye,"A",{href:!0});var Lat=s(BR);eZe=r(Lat,"HubertConfig"),Lat.forEach(t),oZe=r(nye," (Hubert model)"),nye.forEach(t),rZe=i(L),kf=n(L,"LI",{});var sye=s(kf);Rne=n(sye,"STRONG",{});var yat=s(Rne);tZe=r(yat,"ibert"),yat.forEach(t),aZe=r(sye," \u2014 "),NR=n(sye,"A",{href:!0});var xat=s(NR);nZe=r(xat,"IBertConfig"),xat.forEach(t),sZe=r(sye," (I-BERT model)"),sye.forEach(t),lZe=i(L),Sf=n(L,"LI",{});var lye=s(Sf);Pne=n(lye,"STRONG",{});var $at=s(Pne);iZe=r($at,"imagegpt"),$at.forEach(t),dZe=r(lye," \u2014 "),IR=n(lye,"A",{href:!0});var kat=s(IR);cZe=r(kat,"ImageGPTConfig"),kat.forEach(t),mZe=r(lye," (ImageGPT model)"),lye.forEach(t),fZe=i(L),Rf=n(L,"LI",{});var iye=s(Rf);Bne=n(iye,"STRONG",{});var Sat=s(Bne);gZe=r(Sat,"layoutlm"),Sat.forEach(t),hZe=r(iye," \u2014 "),qR=n(iye,"A",{href:!0});var Rat=s(qR);uZe=r(Rat,"LayoutLMConfig"),Rat.forEach(t),pZe=r(iye," (LayoutLM model)"),iye.forEach(t),_Ze=i(L),Pf=n(L,"LI",{});var dye=s(Pf);Nne=n(dye,"STRONG",{});var Pat=s(Nne);bZe=r(Pat,"layoutlmv2"),Pat.forEach(t),vZe=r(dye," \u2014 "),jR=n(dye,"A",{href:!0});var Bat=s(jR);FZe=r(Bat,"LayoutLMv2Config"),Bat.forEach(t),TZe=r(dye," (LayoutLMv2 model)"),dye.forEach(t),MZe=i(L),Bf=n(L,"LI",{});var cye=s(Bf);Ine=n(cye,"STRONG",{});var Nat=s(Ine);EZe=r(Nat,"layoutlmv3"),Nat.forEach(t),CZe=r(cye," \u2014 "),DR=n(cye,"A",{href:!0});var Iat=s(DR);wZe=r(Iat,"LayoutLMv3Config"),Iat.forEach(t),AZe=r(cye," (LayoutLMv3 model)"),cye.forEach(t),LZe=i(L),Nf=n(L,"LI",{});var mye=s(Nf);qne=n(mye,"STRONG",{});var qat=s(qne);yZe=r(qat,"led"),qat.forEach(t),xZe=r(mye," \u2014 "),GR=n(mye,"A",{href:!0});var jat=s(GR);$Ze=r(jat,"LEDConfig"),jat.forEach(t),kZe=r(mye," (LED model)"),mye.forEach(t),SZe=i(L),If=n(L,"LI",{});var fye=s(If);jne=n(fye,"STRONG",{});var Dat=s(jne);RZe=r(Dat,"levit"),Dat.forEach(t),PZe=r(fye," \u2014 "),OR=n(fye,"A",{href:!0});var Gat=s(OR);BZe=r(Gat,"LevitConfig"),Gat.forEach(t),NZe=r(fye," (LeViT model)"),fye.forEach(t),IZe=i(L),qf=n(L,"LI",{});var gye=s(qf);Dne=n(gye,"STRONG",{});var Oat=s(Dne);qZe=r(Oat,"longformer"),Oat.forEach(t),jZe=r(gye," \u2014 "),VR=n(gye,"A",{href:!0});var Vat=s(VR);DZe=r(Vat,"LongformerConfig"),Vat.forEach(t),GZe=r(gye," (Longformer model)"),gye.forEach(t),OZe=i(L),jf=n(L,"LI",{});var hye=s(jf);Gne=n(hye,"STRONG",{});var Xat=s(Gne);VZe=r(Xat,"longt5"),Xat.forEach(t),XZe=r(hye," \u2014 "),XR=n(hye,"A",{href:!0});var zat=s(XR);zZe=r(zat,"LongT5Config"),zat.forEach(t),QZe=r(hye," (LongT5 model)"),hye.forEach(t),WZe=i(L),Df=n(L,"LI",{});var uye=s(Df);One=n(uye,"STRONG",{});var Qat=s(One);HZe=r(Qat,"luke"),Qat.forEach(t),UZe=r(uye," \u2014 "),zR=n(uye,"A",{href:!0});var Wat=s(zR);JZe=r(Wat,"LukeConfig"),Wat.forEach(t),YZe=r(uye," (LUKE model)"),uye.forEach(t),KZe=i(L),Gf=n(L,"LI",{});var pye=s(Gf);Vne=n(pye,"STRONG",{});var Hat=s(Vne);ZZe=r(Hat,"lxmert"),Hat.forEach(t),eeo=r(pye," \u2014 "),QR=n(pye,"A",{href:!0});var Uat=s(QR);oeo=r(Uat,"LxmertConfig"),Uat.forEach(t),reo=r(pye," (LXMERT model)"),pye.forEach(t),teo=i(L),Of=n(L,"LI",{});var _ye=s(Of);Xne=n(_ye,"STRONG",{});var Jat=s(Xne);aeo=r(Jat,"m2m_100"),Jat.forEach(t),neo=r(_ye," \u2014 "),WR=n(_ye,"A",{href:!0});var Yat=s(WR);seo=r(Yat,"M2M100Config"),Yat.forEach(t),leo=r(_ye," (M2M100 model)"),_ye.forEach(t),ieo=i(L),Vf=n(L,"LI",{});var bye=s(Vf);zne=n(bye,"STRONG",{});var Kat=s(zne);deo=r(Kat,"marian"),Kat.forEach(t),ceo=r(bye," \u2014 "),HR=n(bye,"A",{href:!0});var Zat=s(HR);meo=r(Zat,"MarianConfig"),Zat.forEach(t),feo=r(bye," (Marian model)"),bye.forEach(t),geo=i(L),Xf=n(L,"LI",{});var vye=s(Xf);Qne=n(vye,"STRONG",{});var ent=s(Qne);heo=r(ent,"maskformer"),ent.forEach(t),ueo=r(vye," \u2014 "),UR=n(vye,"A",{href:!0});var ont=s(UR);peo=r(ont,"MaskFormerConfig"),ont.forEach(t),_eo=r(vye," (MaskFormer model)"),vye.forEach(t),beo=i(L),zf=n(L,"LI",{});var Fye=s(zf);Wne=n(Fye,"STRONG",{});var rnt=s(Wne);veo=r(rnt,"mbart"),rnt.forEach(t),Feo=r(Fye," \u2014 "),JR=n(Fye,"A",{href:!0});var tnt=s(JR);Teo=r(tnt,"MBartConfig"),tnt.forEach(t),Meo=r(Fye," (mBART model)"),Fye.forEach(t),Eeo=i(L),Qf=n(L,"LI",{});var Tye=s(Qf);Hne=n(Tye,"STRONG",{});var ant=s(Hne);Ceo=r(ant,"mctct"),ant.forEach(t),weo=r(Tye," \u2014 "),YR=n(Tye,"A",{href:!0});var nnt=s(YR);Aeo=r(nnt,"MCTCTConfig"),nnt.forEach(t),Leo=r(Tye," (M-CTC-T model)"),Tye.forEach(t),yeo=i(L),Wf=n(L,"LI",{});var Mye=s(Wf);Une=n(Mye,"STRONG",{});var snt=s(Une);xeo=r(snt,"megatron-bert"),snt.forEach(t),$eo=r(Mye," \u2014 "),KR=n(Mye,"A",{href:!0});var lnt=s(KR);keo=r(lnt,"MegatronBertConfig"),lnt.forEach(t),Seo=r(Mye," (Megatron-BERT model)"),Mye.forEach(t),Reo=i(L),Hf=n(L,"LI",{});var Eye=s(Hf);Jne=n(Eye,"STRONG",{});var int=s(Jne);Peo=r(int,"mobilebert"),int.forEach(t),Beo=r(Eye," \u2014 "),ZR=n(Eye,"A",{href:!0});var dnt=s(ZR);Neo=r(dnt,"MobileBertConfig"),dnt.forEach(t),Ieo=r(Eye," (MobileBERT model)"),Eye.forEach(t),qeo=i(L),Uf=n(L,"LI",{});var Cye=s(Uf);Yne=n(Cye,"STRONG",{});var cnt=s(Yne);jeo=r(cnt,"mobilevit"),cnt.forEach(t),Deo=r(Cye," \u2014 "),eP=n(Cye,"A",{href:!0});var mnt=s(eP);Geo=r(mnt,"MobileViTConfig"),mnt.forEach(t),Oeo=r(Cye," (MobileViT model)"),Cye.forEach(t),Veo=i(L),Jf=n(L,"LI",{});var wye=s(Jf);Kne=n(wye,"STRONG",{});var fnt=s(Kne);Xeo=r(fnt,"mpnet"),fnt.forEach(t),zeo=r(wye," \u2014 "),oP=n(wye,"A",{href:!0});var gnt=s(oP);Qeo=r(gnt,"MPNetConfig"),gnt.forEach(t),Weo=r(wye," (MPNet model)"),wye.forEach(t),Heo=i(L),Yf=n(L,"LI",{});var Aye=s(Yf);Zne=n(Aye,"STRONG",{});var hnt=s(Zne);Ueo=r(hnt,"mt5"),hnt.forEach(t),Jeo=r(Aye," \u2014 "),rP=n(Aye,"A",{href:!0});var unt=s(rP);Yeo=r(unt,"MT5Config"),unt.forEach(t),Keo=r(Aye," (MT5 model)"),Aye.forEach(t),Zeo=i(L),Kf=n(L,"LI",{});var Lye=s(Kf);ese=n(Lye,"STRONG",{});var pnt=s(ese);eoo=r(pnt,"mvp"),pnt.forEach(t),ooo=r(Lye," \u2014 "),tP=n(Lye,"A",{href:!0});var _nt=s(tP);roo=r(_nt,"MvpConfig"),_nt.forEach(t),too=r(Lye," (MVP model)"),Lye.forEach(t),aoo=i(L),Zf=n(L,"LI",{});var yye=s(Zf);ose=n(yye,"STRONG",{});var bnt=s(ose);noo=r(bnt,"nezha"),bnt.forEach(t),soo=r(yye," \u2014 "),aP=n(yye,"A",{href:!0});var vnt=s(aP);loo=r(vnt,"NezhaConfig"),vnt.forEach(t),ioo=r(yye," (Nezha model)"),yye.forEach(t),doo=i(L),eg=n(L,"LI",{});var xye=s(eg);rse=n(xye,"STRONG",{});var Fnt=s(rse);coo=r(Fnt,"nystromformer"),Fnt.forEach(t),moo=r(xye," \u2014 "),nP=n(xye,"A",{href:!0});var Tnt=s(nP);foo=r(Tnt,"NystromformerConfig"),Tnt.forEach(t),goo=r(xye," (Nystr\xF6mformer model)"),xye.forEach(t),hoo=i(L),og=n(L,"LI",{});var $ye=s(og);tse=n($ye,"STRONG",{});var Mnt=s(tse);uoo=r(Mnt,"openai-gpt"),Mnt.forEach(t),poo=r($ye," \u2014 "),sP=n($ye,"A",{href:!0});var Ent=s(sP);_oo=r(Ent,"OpenAIGPTConfig"),Ent.forEach(t),boo=r($ye," (OpenAI GPT model)"),$ye.forEach(t),voo=i(L),rg=n(L,"LI",{});var kye=s(rg);ase=n(kye,"STRONG",{});var Cnt=s(ase);Foo=r(Cnt,"opt"),Cnt.forEach(t),Too=r(kye," \u2014 "),lP=n(kye,"A",{href:!0});var wnt=s(lP);Moo=r(wnt,"OPTConfig"),wnt.forEach(t),Eoo=r(kye," (OPT model)"),kye.forEach(t),Coo=i(L),tg=n(L,"LI",{});var Sye=s(tg);nse=n(Sye,"STRONG",{});var Ant=s(nse);woo=r(Ant,"pegasus"),Ant.forEach(t),Aoo=r(Sye," \u2014 "),iP=n(Sye,"A",{href:!0});var Lnt=s(iP);Loo=r(Lnt,"PegasusConfig"),Lnt.forEach(t),yoo=r(Sye," (Pegasus model)"),Sye.forEach(t),xoo=i(L),ag=n(L,"LI",{});var Rye=s(ag);sse=n(Rye,"STRONG",{});var ynt=s(sse);$oo=r(ynt,"perceiver"),ynt.forEach(t),koo=r(Rye," \u2014 "),dP=n(Rye,"A",{href:!0});var xnt=s(dP);Soo=r(xnt,"PerceiverConfig"),xnt.forEach(t),Roo=r(Rye," (Perceiver model)"),Rye.forEach(t),Poo=i(L),ng=n(L,"LI",{});var Pye=s(ng);lse=n(Pye,"STRONG",{});var $nt=s(lse);Boo=r($nt,"plbart"),$nt.forEach(t),Noo=r(Pye," \u2014 "),cP=n(Pye,"A",{href:!0});var knt=s(cP);Ioo=r(knt,"PLBartConfig"),knt.forEach(t),qoo=r(Pye," (PLBart model)"),Pye.forEach(t),joo=i(L),sg=n(L,"LI",{});var Bye=s(sg);ise=n(Bye,"STRONG",{});var Snt=s(ise);Doo=r(Snt,"poolformer"),Snt.forEach(t),Goo=r(Bye," \u2014 "),mP=n(Bye,"A",{href:!0});var Rnt=s(mP);Ooo=r(Rnt,"PoolFormerConfig"),Rnt.forEach(t),Voo=r(Bye," (PoolFormer model)"),Bye.forEach(t),Xoo=i(L),lg=n(L,"LI",{});var Nye=s(lg);dse=n(Nye,"STRONG",{});var Pnt=s(dse);zoo=r(Pnt,"prophetnet"),Pnt.forEach(t),Qoo=r(Nye," \u2014 "),fP=n(Nye,"A",{href:!0});var Bnt=s(fP);Woo=r(Bnt,"ProphetNetConfig"),Bnt.forEach(t),Hoo=r(Nye," (ProphetNet model)"),Nye.forEach(t),Uoo=i(L),ig=n(L,"LI",{});var Iye=s(ig);cse=n(Iye,"STRONG",{});var Nnt=s(cse);Joo=r(Nnt,"qdqbert"),Nnt.forEach(t),Yoo=r(Iye," \u2014 "),gP=n(Iye,"A",{href:!0});var Int=s(gP);Koo=r(Int,"QDQBertConfig"),Int.forEach(t),Zoo=r(Iye," (QDQBert model)"),Iye.forEach(t),ero=i(L),dg=n(L,"LI",{});var qye=s(dg);mse=n(qye,"STRONG",{});var qnt=s(mse);oro=r(qnt,"rag"),qnt.forEach(t),rro=r(qye," \u2014 "),hP=n(qye,"A",{href:!0});var jnt=s(hP);tro=r(jnt,"RagConfig"),jnt.forEach(t),aro=r(qye," (RAG model)"),qye.forEach(t),nro=i(L),cg=n(L,"LI",{});var jye=s(cg);fse=n(jye,"STRONG",{});var Dnt=s(fse);sro=r(Dnt,"realm"),Dnt.forEach(t),lro=r(jye," \u2014 "),uP=n(jye,"A",{href:!0});var Gnt=s(uP);iro=r(Gnt,"RealmConfig"),Gnt.forEach(t),dro=r(jye," (REALM model)"),jye.forEach(t),cro=i(L),mg=n(L,"LI",{});var Dye=s(mg);gse=n(Dye,"STRONG",{});var Ont=s(gse);mro=r(Ont,"reformer"),Ont.forEach(t),fro=r(Dye," \u2014 "),pP=n(Dye,"A",{href:!0});var Vnt=s(pP);gro=r(Vnt,"ReformerConfig"),Vnt.forEach(t),hro=r(Dye," (Reformer model)"),Dye.forEach(t),uro=i(L),fg=n(L,"LI",{});var Gye=s(fg);hse=n(Gye,"STRONG",{});var Xnt=s(hse);pro=r(Xnt,"regnet"),Xnt.forEach(t),_ro=r(Gye," \u2014 "),_P=n(Gye,"A",{href:!0});var znt=s(_P);bro=r(znt,"RegNetConfig"),znt.forEach(t),vro=r(Gye," (RegNet model)"),Gye.forEach(t),Fro=i(L),gg=n(L,"LI",{});var Oye=s(gg);use=n(Oye,"STRONG",{});var Qnt=s(use);Tro=r(Qnt,"rembert"),Qnt.forEach(t),Mro=r(Oye," \u2014 "),bP=n(Oye,"A",{href:!0});var Wnt=s(bP);Ero=r(Wnt,"RemBertConfig"),Wnt.forEach(t),Cro=r(Oye," (RemBERT model)"),Oye.forEach(t),wro=i(L),hg=n(L,"LI",{});var Vye=s(hg);pse=n(Vye,"STRONG",{});var Hnt=s(pse);Aro=r(Hnt,"resnet"),Hnt.forEach(t),Lro=r(Vye," \u2014 "),vP=n(Vye,"A",{href:!0});var Unt=s(vP);yro=r(Unt,"ResNetConfig"),Unt.forEach(t),xro=r(Vye," (ResNet model)"),Vye.forEach(t),$ro=i(L),ug=n(L,"LI",{});var Xye=s(ug);_se=n(Xye,"STRONG",{});var Jnt=s(_se);kro=r(Jnt,"retribert"),Jnt.forEach(t),Sro=r(Xye," \u2014 "),FP=n(Xye,"A",{href:!0});var Ynt=s(FP);Rro=r(Ynt,"RetriBertConfig"),Ynt.forEach(t),Pro=r(Xye," (RetriBERT model)"),Xye.forEach(t),Bro=i(L),pg=n(L,"LI",{});var zye=s(pg);bse=n(zye,"STRONG",{});var Knt=s(bse);Nro=r(Knt,"roberta"),Knt.forEach(t),Iro=r(zye," \u2014 "),TP=n(zye,"A",{href:!0});var Znt=s(TP);qro=r(Znt,"RobertaConfig"),Znt.forEach(t),jro=r(zye," (RoBERTa model)"),zye.forEach(t),Dro=i(L),_g=n(L,"LI",{});var Qye=s(_g);vse=n(Qye,"STRONG",{});var est=s(vse);Gro=r(est,"roformer"),est.forEach(t),Oro=r(Qye," \u2014 "),MP=n(Qye,"A",{href:!0});var ost=s(MP);Vro=r(ost,"RoFormerConfig"),ost.forEach(t),Xro=r(Qye," (RoFormer model)"),Qye.forEach(t),zro=i(L),bg=n(L,"LI",{});var Wye=s(bg);Fse=n(Wye,"STRONG",{});var rst=s(Fse);Qro=r(rst,"segformer"),rst.forEach(t),Wro=r(Wye," \u2014 "),EP=n(Wye,"A",{href:!0});var tst=s(EP);Hro=r(tst,"SegformerConfig"),tst.forEach(t),Uro=r(Wye," (SegFormer model)"),Wye.forEach(t),Jro=i(L),vg=n(L,"LI",{});var Hye=s(vg);Tse=n(Hye,"STRONG",{});var ast=s(Tse);Yro=r(ast,"sew"),ast.forEach(t),Kro=r(Hye," \u2014 "),CP=n(Hye,"A",{href:!0});var nst=s(CP);Zro=r(nst,"SEWConfig"),nst.forEach(t),eto=r(Hye," (SEW model)"),Hye.forEach(t),oto=i(L),Fg=n(L,"LI",{});var Uye=s(Fg);Mse=n(Uye,"STRONG",{});var sst=s(Mse);rto=r(sst,"sew-d"),sst.forEach(t),tto=r(Uye," \u2014 "),wP=n(Uye,"A",{href:!0});var lst=s(wP);ato=r(lst,"SEWDConfig"),lst.forEach(t),nto=r(Uye," (SEW-D model)"),Uye.forEach(t),sto=i(L),Tg=n(L,"LI",{});var Jye=s(Tg);Ese=n(Jye,"STRONG",{});var ist=s(Ese);lto=r(ist,"speech-encoder-decoder"),ist.forEach(t),ito=r(Jye," \u2014 "),AP=n(Jye,"A",{href:!0});var dst=s(AP);dto=r(dst,"SpeechEncoderDecoderConfig"),dst.forEach(t),cto=r(Jye," (Speech Encoder decoder model)"),Jye.forEach(t),mto=i(L),Mg=n(L,"LI",{});var Yye=s(Mg);Cse=n(Yye,"STRONG",{});var cst=s(Cse);fto=r(cst,"speech_to_text"),cst.forEach(t),gto=r(Yye," \u2014 "),LP=n(Yye,"A",{href:!0});var mst=s(LP);hto=r(mst,"Speech2TextConfig"),mst.forEach(t),uto=r(Yye," (Speech2Text model)"),Yye.forEach(t),pto=i(L),Eg=n(L,"LI",{});var Kye=s(Eg);wse=n(Kye,"STRONG",{});var fst=s(wse);_to=r(fst,"speech_to_text_2"),fst.forEach(t),bto=r(Kye," \u2014 "),yP=n(Kye,"A",{href:!0});var gst=s(yP);vto=r(gst,"Speech2Text2Config"),gst.forEach(t),Fto=r(Kye," (Speech2Text2 model)"),Kye.forEach(t),Tto=i(L),Cg=n(L,"LI",{});var Zye=s(Cg);Ase=n(Zye,"STRONG",{});var hst=s(Ase);Mto=r(hst,"splinter"),hst.forEach(t),Eto=r(Zye," \u2014 "),xP=n(Zye,"A",{href:!0});var ust=s(xP);Cto=r(ust,"SplinterConfig"),ust.forEach(t),wto=r(Zye," (Splinter model)"),Zye.forEach(t),Ato=i(L),wg=n(L,"LI",{});var e8e=s(wg);Lse=n(e8e,"STRONG",{});var pst=s(Lse);Lto=r(pst,"squeezebert"),pst.forEach(t),yto=r(e8e," \u2014 "),$P=n(e8e,"A",{href:!0});var _st=s($P);xto=r(_st,"SqueezeBertConfig"),_st.forEach(t),$to=r(e8e," (SqueezeBERT model)"),e8e.forEach(t),kto=i(L),Ag=n(L,"LI",{});var o8e=s(Ag);yse=n(o8e,"STRONG",{});var bst=s(yse);Sto=r(bst,"swin"),bst.forEach(t),Rto=r(o8e," \u2014 "),kP=n(o8e,"A",{href:!0});var vst=s(kP);Pto=r(vst,"SwinConfig"),vst.forEach(t),Bto=r(o8e," (Swin Transformer model)"),o8e.forEach(t),Nto=i(L),Lg=n(L,"LI",{});var r8e=s(Lg);xse=n(r8e,"STRONG",{});var Fst=s(xse);Ito=r(Fst,"t5"),Fst.forEach(t),qto=r(r8e," \u2014 "),SP=n(r8e,"A",{href:!0});var Tst=s(SP);jto=r(Tst,"T5Config"),Tst.forEach(t),Dto=r(r8e," (T5 model)"),r8e.forEach(t),Gto=i(L),yg=n(L,"LI",{});var t8e=s(yg);$se=n(t8e,"STRONG",{});var Mst=s($se);Oto=r(Mst,"tapas"),Mst.forEach(t),Vto=r(t8e," \u2014 "),RP=n(t8e,"A",{href:!0});var Est=s(RP);Xto=r(Est,"TapasConfig"),Est.forEach(t),zto=r(t8e," (TAPAS model)"),t8e.forEach(t),Qto=i(L),xg=n(L,"LI",{});var a8e=s(xg);kse=n(a8e,"STRONG",{});var Cst=s(kse);Wto=r(Cst,"trajectory_transformer"),Cst.forEach(t),Hto=r(a8e," \u2014 "),PP=n(a8e,"A",{href:!0});var wst=s(PP);Uto=r(wst,"TrajectoryTransformerConfig"),wst.forEach(t),Jto=r(a8e," (Trajectory Transformer model)"),a8e.forEach(t),Yto=i(L),$g=n(L,"LI",{});var n8e=s($g);Sse=n(n8e,"STRONG",{});var Ast=s(Sse);Kto=r(Ast,"transfo-xl"),Ast.forEach(t),Zto=r(n8e," \u2014 "),BP=n(n8e,"A",{href:!0});var Lst=s(BP);eao=r(Lst,"TransfoXLConfig"),Lst.forEach(t),oao=r(n8e," (Transformer-XL model)"),n8e.forEach(t),rao=i(L),kg=n(L,"LI",{});var s8e=s(kg);Rse=n(s8e,"STRONG",{});var yst=s(Rse);tao=r(yst,"trocr"),yst.forEach(t),aao=r(s8e," \u2014 "),NP=n(s8e,"A",{href:!0});var xst=s(NP);nao=r(xst,"TrOCRConfig"),xst.forEach(t),sao=r(s8e," (TrOCR model)"),s8e.forEach(t),lao=i(L),Sg=n(L,"LI",{});var l8e=s(Sg);Pse=n(l8e,"STRONG",{});var $st=s(Pse);iao=r($st,"unispeech"),$st.forEach(t),dao=r(l8e," \u2014 "),IP=n(l8e,"A",{href:!0});var kst=s(IP);cao=r(kst,"UniSpeechConfig"),kst.forEach(t),mao=r(l8e," (UniSpeech model)"),l8e.forEach(t),fao=i(L),Rg=n(L,"LI",{});var i8e=s(Rg);Bse=n(i8e,"STRONG",{});var Sst=s(Bse);gao=r(Sst,"unispeech-sat"),Sst.forEach(t),hao=r(i8e," \u2014 "),qP=n(i8e,"A",{href:!0});var Rst=s(qP);uao=r(Rst,"UniSpeechSatConfig"),Rst.forEach(t),pao=r(i8e," (UniSpeechSat model)"),i8e.forEach(t),_ao=i(L),Pg=n(L,"LI",{});var d8e=s(Pg);Nse=n(d8e,"STRONG",{});var Pst=s(Nse);bao=r(Pst,"van"),Pst.forEach(t),vao=r(d8e," \u2014 "),jP=n(d8e,"A",{href:!0});var Bst=s(jP);Fao=r(Bst,"VanConfig"),Bst.forEach(t),Tao=r(d8e," (VAN model)"),d8e.forEach(t),Mao=i(L),Bg=n(L,"LI",{});var c8e=s(Bg);Ise=n(c8e,"STRONG",{});var Nst=s(Ise);Eao=r(Nst,"vilt"),Nst.forEach(t),Cao=r(c8e," \u2014 "),DP=n(c8e,"A",{href:!0});var Ist=s(DP);wao=r(Ist,"ViltConfig"),Ist.forEach(t),Aao=r(c8e," (ViLT model)"),c8e.forEach(t),Lao=i(L),Ng=n(L,"LI",{});var m8e=s(Ng);qse=n(m8e,"STRONG",{});var qst=s(qse);yao=r(qst,"vision-encoder-decoder"),qst.forEach(t),xao=r(m8e," \u2014 "),GP=n(m8e,"A",{href:!0});var jst=s(GP);$ao=r(jst,"VisionEncoderDecoderConfig"),jst.forEach(t),kao=r(m8e," (Vision Encoder decoder model)"),m8e.forEach(t),Sao=i(L),Ig=n(L,"LI",{});var f8e=s(Ig);jse=n(f8e,"STRONG",{});var Dst=s(jse);Rao=r(Dst,"vision-text-dual-encoder"),Dst.forEach(t),Pao=r(f8e," \u2014 "),OP=n(f8e,"A",{href:!0});var Gst=s(OP);Bao=r(Gst,"VisionTextDualEncoderConfig"),Gst.forEach(t),Nao=r(f8e," (VisionTextDualEncoder model)"),f8e.forEach(t),Iao=i(L),qg=n(L,"LI",{});var g8e=s(qg);Dse=n(g8e,"STRONG",{});var Ost=s(Dse);qao=r(Ost,"visual_bert"),Ost.forEach(t),jao=r(g8e," \u2014 "),VP=n(g8e,"A",{href:!0});var Vst=s(VP);Dao=r(Vst,"VisualBertConfig"),Vst.forEach(t),Gao=r(g8e," (VisualBERT model)"),g8e.forEach(t),Oao=i(L),jg=n(L,"LI",{});var h8e=s(jg);Gse=n(h8e,"STRONG",{});var Xst=s(Gse);Vao=r(Xst,"vit"),Xst.forEach(t),Xao=r(h8e," \u2014 "),XP=n(h8e,"A",{href:!0});var zst=s(XP);zao=r(zst,"ViTConfig"),zst.forEach(t),Qao=r(h8e," (ViT model)"),h8e.forEach(t),Wao=i(L),Dg=n(L,"LI",{});var u8e=s(Dg);Ose=n(u8e,"STRONG",{});var Qst=s(Ose);Hao=r(Qst,"vit_mae"),Qst.forEach(t),Uao=r(u8e," \u2014 "),zP=n(u8e,"A",{href:!0});var Wst=s(zP);Jao=r(Wst,"ViTMAEConfig"),Wst.forEach(t),Yao=r(u8e," (ViTMAE model)"),u8e.forEach(t),Kao=i(L),Gg=n(L,"LI",{});var p8e=s(Gg);Vse=n(p8e,"STRONG",{});var Hst=s(Vse);Zao=r(Hst,"wav2vec2"),Hst.forEach(t),eno=r(p8e," \u2014 "),QP=n(p8e,"A",{href:!0});var Ust=s(QP);ono=r(Ust,"Wav2Vec2Config"),Ust.forEach(t),rno=r(p8e," (Wav2Vec2 model)"),p8e.forEach(t),tno=i(L),Og=n(L,"LI",{});var _8e=s(Og);Xse=n(_8e,"STRONG",{});var Jst=s(Xse);ano=r(Jst,"wav2vec2-conformer"),Jst.forEach(t),nno=r(_8e," \u2014 "),WP=n(_8e,"A",{href:!0});var Yst=s(WP);sno=r(Yst,"Wav2Vec2ConformerConfig"),Yst.forEach(t),lno=r(_8e," (Wav2Vec2-Conformer model)"),_8e.forEach(t),ino=i(L),Vg=n(L,"LI",{});var b8e=s(Vg);zse=n(b8e,"STRONG",{});var Kst=s(zse);dno=r(Kst,"wavlm"),Kst.forEach(t),cno=r(b8e," \u2014 "),HP=n(b8e,"A",{href:!0});var Zst=s(HP);mno=r(Zst,"WavLMConfig"),Zst.forEach(t),fno=r(b8e," (WavLM model)"),b8e.forEach(t),gno=i(L),Xg=n(L,"LI",{});var v8e=s(Xg);Qse=n(v8e,"STRONG",{});var elt=s(Qse);hno=r(elt,"xglm"),elt.forEach(t),uno=r(v8e," \u2014 "),UP=n(v8e,"A",{href:!0});var olt=s(UP);pno=r(olt,"XGLMConfig"),olt.forEach(t),_no=r(v8e," (XGLM model)"),v8e.forEach(t),bno=i(L),zg=n(L,"LI",{});var F8e=s(zg);Wse=n(F8e,"STRONG",{});var rlt=s(Wse);vno=r(rlt,"xlm"),rlt.forEach(t),Fno=r(F8e," \u2014 "),JP=n(F8e,"A",{href:!0});var tlt=s(JP);Tno=r(tlt,"XLMConfig"),tlt.forEach(t),Mno=r(F8e," (XLM model)"),F8e.forEach(t),Eno=i(L),Qg=n(L,"LI",{});var T8e=s(Qg);Hse=n(T8e,"STRONG",{});var alt=s(Hse);Cno=r(alt,"xlm-prophetnet"),alt.forEach(t),wno=r(T8e," \u2014 "),YP=n(T8e,"A",{href:!0});var nlt=s(YP);Ano=r(nlt,"XLMProphetNetConfig"),nlt.forEach(t),Lno=r(T8e," (XLM-ProphetNet model)"),T8e.forEach(t),yno=i(L),Wg=n(L,"LI",{});var M8e=s(Wg);Use=n(M8e,"STRONG",{});var slt=s(Use);xno=r(slt,"xlm-roberta"),slt.forEach(t),$no=r(M8e," \u2014 "),KP=n(M8e,"A",{href:!0});var llt=s(KP);kno=r(llt,"XLMRobertaConfig"),llt.forEach(t),Sno=r(M8e," (XLM-RoBERTa model)"),M8e.forEach(t),Rno=i(L),Hg=n(L,"LI",{});var E8e=s(Hg);Jse=n(E8e,"STRONG",{});var ilt=s(Jse);Pno=r(ilt,"xlm-roberta-xl"),ilt.forEach(t),Bno=r(E8e," \u2014 "),ZP=n(E8e,"A",{href:!0});var dlt=s(ZP);Nno=r(dlt,"XLMRobertaXLConfig"),dlt.forEach(t),Ino=r(E8e," (XLM-RoBERTa-XL model)"),E8e.forEach(t),qno=i(L),Ug=n(L,"LI",{});var C8e=s(Ug);Yse=n(C8e,"STRONG",{});var clt=s(Yse);jno=r(clt,"xlnet"),clt.forEach(t),Dno=r(C8e," \u2014 "),eB=n(C8e,"A",{href:!0});var mlt=s(eB);Gno=r(mlt,"XLNetConfig"),mlt.forEach(t),Ono=r(C8e," (XLNet model)"),C8e.forEach(t),Vno=i(L),Jg=n(L,"LI",{});var w8e=s(Jg);Kse=n(w8e,"STRONG",{});var flt=s(Kse);Xno=r(flt,"yolos"),flt.forEach(t),zno=r(w8e," \u2014 "),oB=n(w8e,"A",{href:!0});var glt=s(oB);Qno=r(glt,"YolosConfig"),glt.forEach(t),Wno=r(w8e," (YOLOS model)"),w8e.forEach(t),Hno=i(L),Yg=n(L,"LI",{});var A8e=s(Yg);Zse=n(A8e,"STRONG",{});var hlt=s(Zse);Uno=r(hlt,"yoso"),hlt.forEach(t),Jno=r(A8e," \u2014 "),rB=n(A8e,"A",{href:!0});var ult=s(rB);Yno=r(ult,"YosoConfig"),ult.forEach(t),Kno=r(A8e," (YOSO model)"),A8e.forEach(t),L.forEach(t),Zno=i(st),T(Kg.$$.fragment,st),st.forEach(t),eso=i(nt),Zg=n(nt,"DIV",{class:!0});var FQe=s(Zg);T(uy.$$.fragment,FQe),oso=i(FQe),ele=n(FQe,"P",{});var plt=s(ele);rso=r(plt,"Register a new configuration for this class."),plt.forEach(t),FQe.forEach(t),nt.forEach(t),TXe=i(m),qi=n(m,"H2",{class:!0});var TQe=s(qi);eh=n(TQe,"A",{id:!0,class:!0,href:!0});var _lt=s(eh);ole=n(_lt,"SPAN",{});var blt=s(ole);T(py.$$.fragment,blt),blt.forEach(t),_lt.forEach(t),tso=i(TQe),rle=n(TQe,"SPAN",{});var vlt=s(rle);aso=r(vlt,"AutoTokenizer"),vlt.forEach(t),TQe.forEach(t),MXe=i(m),Lo=n(m,"DIV",{class:!0});var Zs=s(Lo);T(_y.$$.fragment,Zs),nso=i(Zs),by=n(Zs,"P",{});var MQe=s(by);sso=r(MQe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),tB=n(MQe,"A",{href:!0});var Flt=s(tB);lso=r(Flt,"AutoTokenizer.from_pretrained()"),Flt.forEach(t),iso=r(MQe," class method."),MQe.forEach(t),dso=i(Zs),vy=n(Zs,"P",{});var EQe=s(vy);cso=r(EQe,"This class cannot be instantiated directly using "),tle=n(EQe,"CODE",{});var Tlt=s(tle);mso=r(Tlt,"__init__()"),Tlt.forEach(t),fso=r(EQe," (throws an error)."),EQe.forEach(t),gso=i(Zs),yr=n(Zs,"DIV",{class:!0});var el=s(yr);T(Fy.$$.fragment,el),hso=i(el),ale=n(el,"P",{});var Mlt=s(ale);uso=r(Mlt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Mlt.forEach(t),pso=i(el),Pa=n(el,"P",{});var c7=s(Pa);_so=r(c7,"The tokenizer class to instantiate is selected based on the "),nle=n(c7,"CODE",{});var Elt=s(nle);bso=r(Elt,"model_type"),Elt.forEach(t),vso=r(c7,` property of the config object (either
passed as an argument or loaded from `),sle=n(c7,"CODE",{});var Clt=s(sle);Fso=r(Clt,"pretrained_model_name_or_path"),Clt.forEach(t),Tso=r(c7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lle=n(c7,"CODE",{});var wlt=s(lle);Mso=r(wlt,"pretrained_model_name_or_path"),wlt.forEach(t),Eso=r(c7,":"),c7.forEach(t),Cso=i(el),k=n(el,"UL",{});var S=s(k);jn=n(S,"LI",{});var Ak=s(jn);ile=n(Ak,"STRONG",{});var Alt=s(ile);wso=r(Alt,"albert"),Alt.forEach(t),Aso=r(Ak," \u2014 "),aB=n(Ak,"A",{href:!0});var Llt=s(aB);Lso=r(Llt,"AlbertTokenizer"),Llt.forEach(t),yso=r(Ak," or "),nB=n(Ak,"A",{href:!0});var ylt=s(nB);xso=r(ylt,"AlbertTokenizerFast"),ylt.forEach(t),$so=r(Ak," (ALBERT model)"),Ak.forEach(t),kso=i(S),Dn=n(S,"LI",{});var Lk=s(Dn);dle=n(Lk,"STRONG",{});var xlt=s(dle);Sso=r(xlt,"bart"),xlt.forEach(t),Rso=r(Lk," \u2014 "),sB=n(Lk,"A",{href:!0});var $lt=s(sB);Pso=r($lt,"BartTokenizer"),$lt.forEach(t),Bso=r(Lk," or "),lB=n(Lk,"A",{href:!0});var klt=s(lB);Nso=r(klt,"BartTokenizerFast"),klt.forEach(t),Iso=r(Lk," (BART model)"),Lk.forEach(t),qso=i(S),Gn=n(S,"LI",{});var yk=s(Gn);cle=n(yk,"STRONG",{});var Slt=s(cle);jso=r(Slt,"barthez"),Slt.forEach(t),Dso=r(yk," \u2014 "),iB=n(yk,"A",{href:!0});var Rlt=s(iB);Gso=r(Rlt,"BarthezTokenizer"),Rlt.forEach(t),Oso=r(yk," or "),dB=n(yk,"A",{href:!0});var Plt=s(dB);Vso=r(Plt,"BarthezTokenizerFast"),Plt.forEach(t),Xso=r(yk," (BARThez model)"),yk.forEach(t),zso=i(S),oh=n(S,"LI",{});var L8e=s(oh);mle=n(L8e,"STRONG",{});var Blt=s(mle);Qso=r(Blt,"bartpho"),Blt.forEach(t),Wso=r(L8e," \u2014 "),cB=n(L8e,"A",{href:!0});var Nlt=s(cB);Hso=r(Nlt,"BartphoTokenizer"),Nlt.forEach(t),Uso=r(L8e," (BARTpho model)"),L8e.forEach(t),Jso=i(S),On=n(S,"LI",{});var xk=s(On);fle=n(xk,"STRONG",{});var Ilt=s(fle);Yso=r(Ilt,"bert"),Ilt.forEach(t),Kso=r(xk," \u2014 "),mB=n(xk,"A",{href:!0});var qlt=s(mB);Zso=r(qlt,"BertTokenizer"),qlt.forEach(t),elo=r(xk," or "),fB=n(xk,"A",{href:!0});var jlt=s(fB);olo=r(jlt,"BertTokenizerFast"),jlt.forEach(t),rlo=r(xk," (BERT model)"),xk.forEach(t),tlo=i(S),rh=n(S,"LI",{});var y8e=s(rh);gle=n(y8e,"STRONG",{});var Dlt=s(gle);alo=r(Dlt,"bert-generation"),Dlt.forEach(t),nlo=r(y8e," \u2014 "),gB=n(y8e,"A",{href:!0});var Glt=s(gB);slo=r(Glt,"BertGenerationTokenizer"),Glt.forEach(t),llo=r(y8e," (Bert Generation model)"),y8e.forEach(t),ilo=i(S),th=n(S,"LI",{});var x8e=s(th);hle=n(x8e,"STRONG",{});var Olt=s(hle);dlo=r(Olt,"bert-japanese"),Olt.forEach(t),clo=r(x8e," \u2014 "),hB=n(x8e,"A",{href:!0});var Vlt=s(hB);mlo=r(Vlt,"BertJapaneseTokenizer"),Vlt.forEach(t),flo=r(x8e," (BertJapanese model)"),x8e.forEach(t),glo=i(S),ah=n(S,"LI",{});var $8e=s(ah);ule=n($8e,"STRONG",{});var Xlt=s(ule);hlo=r(Xlt,"bertweet"),Xlt.forEach(t),ulo=r($8e," \u2014 "),uB=n($8e,"A",{href:!0});var zlt=s(uB);plo=r(zlt,"BertweetTokenizer"),zlt.forEach(t),_lo=r($8e," (BERTweet model)"),$8e.forEach(t),blo=i(S),Vn=n(S,"LI",{});var $k=s(Vn);ple=n($k,"STRONG",{});var Qlt=s(ple);vlo=r(Qlt,"big_bird"),Qlt.forEach(t),Flo=r($k," \u2014 "),pB=n($k,"A",{href:!0});var Wlt=s(pB);Tlo=r(Wlt,"BigBirdTokenizer"),Wlt.forEach(t),Mlo=r($k," or "),_B=n($k,"A",{href:!0});var Hlt=s(_B);Elo=r(Hlt,"BigBirdTokenizerFast"),Hlt.forEach(t),Clo=r($k," (BigBird model)"),$k.forEach(t),wlo=i(S),Xn=n(S,"LI",{});var kk=s(Xn);_le=n(kk,"STRONG",{});var Ult=s(_le);Alo=r(Ult,"bigbird_pegasus"),Ult.forEach(t),Llo=r(kk," \u2014 "),bB=n(kk,"A",{href:!0});var Jlt=s(bB);ylo=r(Jlt,"PegasusTokenizer"),Jlt.forEach(t),xlo=r(kk," or "),vB=n(kk,"A",{href:!0});var Ylt=s(vB);$lo=r(Ylt,"PegasusTokenizerFast"),Ylt.forEach(t),klo=r(kk," (BigBird-Pegasus model)"),kk.forEach(t),Slo=i(S),zn=n(S,"LI",{});var Sk=s(zn);ble=n(Sk,"STRONG",{});var Klt=s(ble);Rlo=r(Klt,"blenderbot"),Klt.forEach(t),Plo=r(Sk," \u2014 "),FB=n(Sk,"A",{href:!0});var Zlt=s(FB);Blo=r(Zlt,"BlenderbotTokenizer"),Zlt.forEach(t),Nlo=r(Sk," or "),TB=n(Sk,"A",{href:!0});var eit=s(TB);Ilo=r(eit,"BlenderbotTokenizerFast"),eit.forEach(t),qlo=r(Sk," (Blenderbot model)"),Sk.forEach(t),jlo=i(S),nh=n(S,"LI",{});var k8e=s(nh);vle=n(k8e,"STRONG",{});var oit=s(vle);Dlo=r(oit,"blenderbot-small"),oit.forEach(t),Glo=r(k8e," \u2014 "),MB=n(k8e,"A",{href:!0});var rit=s(MB);Olo=r(rit,"BlenderbotSmallTokenizer"),rit.forEach(t),Vlo=r(k8e," (BlenderbotSmall model)"),k8e.forEach(t),Xlo=i(S),sh=n(S,"LI",{});var S8e=s(sh);Fle=n(S8e,"STRONG",{});var tit=s(Fle);zlo=r(tit,"bloom"),tit.forEach(t),Qlo=r(S8e," \u2014 "),EB=n(S8e,"A",{href:!0});var ait=s(EB);Wlo=r(ait,"BloomTokenizerFast"),ait.forEach(t),Hlo=r(S8e," (BLOOM model)"),S8e.forEach(t),Ulo=i(S),lh=n(S,"LI",{});var R8e=s(lh);Tle=n(R8e,"STRONG",{});var nit=s(Tle);Jlo=r(nit,"byt5"),nit.forEach(t),Ylo=r(R8e," \u2014 "),CB=n(R8e,"A",{href:!0});var sit=s(CB);Klo=r(sit,"ByT5Tokenizer"),sit.forEach(t),Zlo=r(R8e," (ByT5 model)"),R8e.forEach(t),eio=i(S),Qn=n(S,"LI",{});var Rk=s(Qn);Mle=n(Rk,"STRONG",{});var lit=s(Mle);oio=r(lit,"camembert"),lit.forEach(t),rio=r(Rk," \u2014 "),wB=n(Rk,"A",{href:!0});var iit=s(wB);tio=r(iit,"CamembertTokenizer"),iit.forEach(t),aio=r(Rk," or "),AB=n(Rk,"A",{href:!0});var dit=s(AB);nio=r(dit,"CamembertTokenizerFast"),dit.forEach(t),sio=r(Rk," (CamemBERT model)"),Rk.forEach(t),lio=i(S),ih=n(S,"LI",{});var P8e=s(ih);Ele=n(P8e,"STRONG",{});var cit=s(Ele);iio=r(cit,"canine"),cit.forEach(t),dio=r(P8e," \u2014 "),LB=n(P8e,"A",{href:!0});var mit=s(LB);cio=r(mit,"CanineTokenizer"),mit.forEach(t),mio=r(P8e," (CANINE model)"),P8e.forEach(t),fio=i(S),Wn=n(S,"LI",{});var Pk=s(Wn);Cle=n(Pk,"STRONG",{});var fit=s(Cle);gio=r(fit,"clip"),fit.forEach(t),hio=r(Pk," \u2014 "),yB=n(Pk,"A",{href:!0});var git=s(yB);uio=r(git,"CLIPTokenizer"),git.forEach(t),pio=r(Pk," or "),xB=n(Pk,"A",{href:!0});var hit=s(xB);_io=r(hit,"CLIPTokenizerFast"),hit.forEach(t),bio=r(Pk," (CLIP model)"),Pk.forEach(t),vio=i(S),Hn=n(S,"LI",{});var Bk=s(Hn);wle=n(Bk,"STRONG",{});var uit=s(wle);Fio=r(uit,"codegen"),uit.forEach(t),Tio=r(Bk," \u2014 "),$B=n(Bk,"A",{href:!0});var pit=s($B);Mio=r(pit,"CodeGenTokenizer"),pit.forEach(t),Eio=r(Bk," or "),kB=n(Bk,"A",{href:!0});var _it=s(kB);Cio=r(_it,"CodeGenTokenizerFast"),_it.forEach(t),wio=r(Bk," (CodeGen model)"),Bk.forEach(t),Aio=i(S),Un=n(S,"LI",{});var Nk=s(Un);Ale=n(Nk,"STRONG",{});var bit=s(Ale);Lio=r(bit,"convbert"),bit.forEach(t),yio=r(Nk," \u2014 "),SB=n(Nk,"A",{href:!0});var vit=s(SB);xio=r(vit,"ConvBertTokenizer"),vit.forEach(t),$io=r(Nk," or "),RB=n(Nk,"A",{href:!0});var Fit=s(RB);kio=r(Fit,"ConvBertTokenizerFast"),Fit.forEach(t),Sio=r(Nk," (ConvBERT model)"),Nk.forEach(t),Rio=i(S),Jn=n(S,"LI",{});var Ik=s(Jn);Lle=n(Ik,"STRONG",{});var Tit=s(Lle);Pio=r(Tit,"cpm"),Tit.forEach(t),Bio=r(Ik," \u2014 "),PB=n(Ik,"A",{href:!0});var Mit=s(PB);Nio=r(Mit,"CpmTokenizer"),Mit.forEach(t),Iio=r(Ik," or "),BB=n(Ik,"A",{href:!0});var Eit=s(BB);qio=r(Eit,"CpmTokenizerFast"),Eit.forEach(t),jio=r(Ik," (CPM model)"),Ik.forEach(t),Dio=i(S),dh=n(S,"LI",{});var B8e=s(dh);yle=n(B8e,"STRONG",{});var Cit=s(yle);Gio=r(Cit,"ctrl"),Cit.forEach(t),Oio=r(B8e," \u2014 "),NB=n(B8e,"A",{href:!0});var wit=s(NB);Vio=r(wit,"CTRLTokenizer"),wit.forEach(t),Xio=r(B8e," (CTRL model)"),B8e.forEach(t),zio=i(S),Yn=n(S,"LI",{});var qk=s(Yn);xle=n(qk,"STRONG",{});var Ait=s(xle);Qio=r(Ait,"data2vec-text"),Ait.forEach(t),Wio=r(qk," \u2014 "),IB=n(qk,"A",{href:!0});var Lit=s(IB);Hio=r(Lit,"RobertaTokenizer"),Lit.forEach(t),Uio=r(qk," or "),qB=n(qk,"A",{href:!0});var yit=s(qB);Jio=r(yit,"RobertaTokenizerFast"),yit.forEach(t),Yio=r(qk," (Data2VecText model)"),qk.forEach(t),Kio=i(S),Kn=n(S,"LI",{});var jk=s(Kn);$le=n(jk,"STRONG",{});var xit=s($le);Zio=r(xit,"deberta"),xit.forEach(t),edo=r(jk," \u2014 "),jB=n(jk,"A",{href:!0});var $it=s(jB);odo=r($it,"DebertaTokenizer"),$it.forEach(t),rdo=r(jk," or "),DB=n(jk,"A",{href:!0});var kit=s(DB);tdo=r(kit,"DebertaTokenizerFast"),kit.forEach(t),ado=r(jk," (DeBERTa model)"),jk.forEach(t),ndo=i(S),Zn=n(S,"LI",{});var Dk=s(Zn);kle=n(Dk,"STRONG",{});var Sit=s(kle);sdo=r(Sit,"deberta-v2"),Sit.forEach(t),ldo=r(Dk," \u2014 "),GB=n(Dk,"A",{href:!0});var Rit=s(GB);ido=r(Rit,"DebertaV2Tokenizer"),Rit.forEach(t),ddo=r(Dk," or "),OB=n(Dk,"A",{href:!0});var Pit=s(OB);cdo=r(Pit,"DebertaV2TokenizerFast"),Pit.forEach(t),mdo=r(Dk," (DeBERTa-v2 model)"),Dk.forEach(t),fdo=i(S),es=n(S,"LI",{});var Gk=s(es);Sle=n(Gk,"STRONG",{});var Bit=s(Sle);gdo=r(Bit,"distilbert"),Bit.forEach(t),hdo=r(Gk," \u2014 "),VB=n(Gk,"A",{href:!0});var Nit=s(VB);udo=r(Nit,"DistilBertTokenizer"),Nit.forEach(t),pdo=r(Gk," or "),XB=n(Gk,"A",{href:!0});var Iit=s(XB);_do=r(Iit,"DistilBertTokenizerFast"),Iit.forEach(t),bdo=r(Gk," (DistilBERT model)"),Gk.forEach(t),vdo=i(S),os=n(S,"LI",{});var Ok=s(os);Rle=n(Ok,"STRONG",{});var qit=s(Rle);Fdo=r(qit,"dpr"),qit.forEach(t),Tdo=r(Ok," \u2014 "),zB=n(Ok,"A",{href:!0});var jit=s(zB);Mdo=r(jit,"DPRQuestionEncoderTokenizer"),jit.forEach(t),Edo=r(Ok," or "),QB=n(Ok,"A",{href:!0});var Dit=s(QB);Cdo=r(Dit,"DPRQuestionEncoderTokenizerFast"),Dit.forEach(t),wdo=r(Ok," (DPR model)"),Ok.forEach(t),Ado=i(S),rs=n(S,"LI",{});var Vk=s(rs);Ple=n(Vk,"STRONG",{});var Git=s(Ple);Ldo=r(Git,"electra"),Git.forEach(t),ydo=r(Vk," \u2014 "),WB=n(Vk,"A",{href:!0});var Oit=s(WB);xdo=r(Oit,"ElectraTokenizer"),Oit.forEach(t),$do=r(Vk," or "),HB=n(Vk,"A",{href:!0});var Vit=s(HB);kdo=r(Vit,"ElectraTokenizerFast"),Vit.forEach(t),Sdo=r(Vk," (ELECTRA model)"),Vk.forEach(t),Rdo=i(S),ch=n(S,"LI",{});var N8e=s(ch);Ble=n(N8e,"STRONG",{});var Xit=s(Ble);Pdo=r(Xit,"flaubert"),Xit.forEach(t),Bdo=r(N8e," \u2014 "),UB=n(N8e,"A",{href:!0});var zit=s(UB);Ndo=r(zit,"FlaubertTokenizer"),zit.forEach(t),Ido=r(N8e," (FlauBERT model)"),N8e.forEach(t),qdo=i(S),ts=n(S,"LI",{});var Xk=s(ts);Nle=n(Xk,"STRONG",{});var Qit=s(Nle);jdo=r(Qit,"fnet"),Qit.forEach(t),Ddo=r(Xk," \u2014 "),JB=n(Xk,"A",{href:!0});var Wit=s(JB);Gdo=r(Wit,"FNetTokenizer"),Wit.forEach(t),Odo=r(Xk," or "),YB=n(Xk,"A",{href:!0});var Hit=s(YB);Vdo=r(Hit,"FNetTokenizerFast"),Hit.forEach(t),Xdo=r(Xk," (FNet model)"),Xk.forEach(t),zdo=i(S),mh=n(S,"LI",{});var I8e=s(mh);Ile=n(I8e,"STRONG",{});var Uit=s(Ile);Qdo=r(Uit,"fsmt"),Uit.forEach(t),Wdo=r(I8e," \u2014 "),KB=n(I8e,"A",{href:!0});var Jit=s(KB);Hdo=r(Jit,"FSMTTokenizer"),Jit.forEach(t),Udo=r(I8e," (FairSeq Machine-Translation model)"),I8e.forEach(t),Jdo=i(S),as=n(S,"LI",{});var zk=s(as);qle=n(zk,"STRONG",{});var Yit=s(qle);Ydo=r(Yit,"funnel"),Yit.forEach(t),Kdo=r(zk," \u2014 "),ZB=n(zk,"A",{href:!0});var Kit=s(ZB);Zdo=r(Kit,"FunnelTokenizer"),Kit.forEach(t),eco=r(zk," or "),eN=n(zk,"A",{href:!0});var Zit=s(eN);oco=r(Zit,"FunnelTokenizerFast"),Zit.forEach(t),rco=r(zk," (Funnel Transformer model)"),zk.forEach(t),tco=i(S),ns=n(S,"LI",{});var Qk=s(ns);jle=n(Qk,"STRONG",{});var edt=s(jle);aco=r(edt,"gpt2"),edt.forEach(t),nco=r(Qk," \u2014 "),oN=n(Qk,"A",{href:!0});var odt=s(oN);sco=r(odt,"GPT2Tokenizer"),odt.forEach(t),lco=r(Qk," or "),rN=n(Qk,"A",{href:!0});var rdt=s(rN);ico=r(rdt,"GPT2TokenizerFast"),rdt.forEach(t),dco=r(Qk," (OpenAI GPT-2 model)"),Qk.forEach(t),cco=i(S),ss=n(S,"LI",{});var Wk=s(ss);Dle=n(Wk,"STRONG",{});var tdt=s(Dle);mco=r(tdt,"gpt_neo"),tdt.forEach(t),fco=r(Wk," \u2014 "),tN=n(Wk,"A",{href:!0});var adt=s(tN);gco=r(adt,"GPT2Tokenizer"),adt.forEach(t),hco=r(Wk," or "),aN=n(Wk,"A",{href:!0});var ndt=s(aN);uco=r(ndt,"GPT2TokenizerFast"),ndt.forEach(t),pco=r(Wk," (GPT Neo model)"),Wk.forEach(t),_co=i(S),fh=n(S,"LI",{});var q8e=s(fh);Gle=n(q8e,"STRONG",{});var sdt=s(Gle);bco=r(sdt,"gpt_neox"),sdt.forEach(t),vco=r(q8e," \u2014 "),nN=n(q8e,"A",{href:!0});var ldt=s(nN);Fco=r(ldt,"GPTNeoXTokenizerFast"),ldt.forEach(t),Tco=r(q8e," (GPT NeoX model)"),q8e.forEach(t),Mco=i(S),ls=n(S,"LI",{});var Hk=s(ls);Ole=n(Hk,"STRONG",{});var idt=s(Ole);Eco=r(idt,"gptj"),idt.forEach(t),Cco=r(Hk," \u2014 "),sN=n(Hk,"A",{href:!0});var ddt=s(sN);wco=r(ddt,"GPT2Tokenizer"),ddt.forEach(t),Aco=r(Hk," or "),lN=n(Hk,"A",{href:!0});var cdt=s(lN);Lco=r(cdt,"GPT2TokenizerFast"),cdt.forEach(t),yco=r(Hk," (GPT-J model)"),Hk.forEach(t),xco=i(S),is=n(S,"LI",{});var Uk=s(is);Vle=n(Uk,"STRONG",{});var mdt=s(Vle);$co=r(mdt,"groupvit"),mdt.forEach(t),kco=r(Uk," \u2014 "),iN=n(Uk,"A",{href:!0});var fdt=s(iN);Sco=r(fdt,"CLIPTokenizer"),fdt.forEach(t),Rco=r(Uk," or "),dN=n(Uk,"A",{href:!0});var gdt=s(dN);Pco=r(gdt,"CLIPTokenizerFast"),gdt.forEach(t),Bco=r(Uk," (GroupViT model)"),Uk.forEach(t),Nco=i(S),ds=n(S,"LI",{});var Jk=s(ds);Xle=n(Jk,"STRONG",{});var hdt=s(Xle);Ico=r(hdt,"herbert"),hdt.forEach(t),qco=r(Jk," \u2014 "),cN=n(Jk,"A",{href:!0});var udt=s(cN);jco=r(udt,"HerbertTokenizer"),udt.forEach(t),Dco=r(Jk," or "),mN=n(Jk,"A",{href:!0});var pdt=s(mN);Gco=r(pdt,"HerbertTokenizerFast"),pdt.forEach(t),Oco=r(Jk," (HerBERT model)"),Jk.forEach(t),Vco=i(S),gh=n(S,"LI",{});var j8e=s(gh);zle=n(j8e,"STRONG",{});var _dt=s(zle);Xco=r(_dt,"hubert"),_dt.forEach(t),zco=r(j8e," \u2014 "),fN=n(j8e,"A",{href:!0});var bdt=s(fN);Qco=r(bdt,"Wav2Vec2CTCTokenizer"),bdt.forEach(t),Wco=r(j8e," (Hubert model)"),j8e.forEach(t),Hco=i(S),cs=n(S,"LI",{});var Yk=s(cs);Qle=n(Yk,"STRONG",{});var vdt=s(Qle);Uco=r(vdt,"ibert"),vdt.forEach(t),Jco=r(Yk," \u2014 "),gN=n(Yk,"A",{href:!0});var Fdt=s(gN);Yco=r(Fdt,"RobertaTokenizer"),Fdt.forEach(t),Kco=r(Yk," or "),hN=n(Yk,"A",{href:!0});var Tdt=s(hN);Zco=r(Tdt,"RobertaTokenizerFast"),Tdt.forEach(t),emo=r(Yk," (I-BERT model)"),Yk.forEach(t),omo=i(S),ms=n(S,"LI",{});var Kk=s(ms);Wle=n(Kk,"STRONG",{});var Mdt=s(Wle);rmo=r(Mdt,"layoutlm"),Mdt.forEach(t),tmo=r(Kk," \u2014 "),uN=n(Kk,"A",{href:!0});var Edt=s(uN);amo=r(Edt,"LayoutLMTokenizer"),Edt.forEach(t),nmo=r(Kk," or "),pN=n(Kk,"A",{href:!0});var Cdt=s(pN);smo=r(Cdt,"LayoutLMTokenizerFast"),Cdt.forEach(t),lmo=r(Kk," (LayoutLM model)"),Kk.forEach(t),imo=i(S),fs=n(S,"LI",{});var Zk=s(fs);Hle=n(Zk,"STRONG",{});var wdt=s(Hle);dmo=r(wdt,"layoutlmv2"),wdt.forEach(t),cmo=r(Zk," \u2014 "),_N=n(Zk,"A",{href:!0});var Adt=s(_N);mmo=r(Adt,"LayoutLMv2Tokenizer"),Adt.forEach(t),fmo=r(Zk," or "),bN=n(Zk,"A",{href:!0});var Ldt=s(bN);gmo=r(Ldt,"LayoutLMv2TokenizerFast"),Ldt.forEach(t),hmo=r(Zk," (LayoutLMv2 model)"),Zk.forEach(t),umo=i(S),gs=n(S,"LI",{});var eS=s(gs);Ule=n(eS,"STRONG",{});var ydt=s(Ule);pmo=r(ydt,"layoutlmv3"),ydt.forEach(t),_mo=r(eS," \u2014 "),vN=n(eS,"A",{href:!0});var xdt=s(vN);bmo=r(xdt,"LayoutLMv3Tokenizer"),xdt.forEach(t),vmo=r(eS," or "),FN=n(eS,"A",{href:!0});var $dt=s(FN);Fmo=r($dt,"LayoutLMv3TokenizerFast"),$dt.forEach(t),Tmo=r(eS," (LayoutLMv3 model)"),eS.forEach(t),Mmo=i(S),hs=n(S,"LI",{});var oS=s(hs);Jle=n(oS,"STRONG",{});var kdt=s(Jle);Emo=r(kdt,"layoutxlm"),kdt.forEach(t),Cmo=r(oS," \u2014 "),TN=n(oS,"A",{href:!0});var Sdt=s(TN);wmo=r(Sdt,"LayoutXLMTokenizer"),Sdt.forEach(t),Amo=r(oS," or "),MN=n(oS,"A",{href:!0});var Rdt=s(MN);Lmo=r(Rdt,"LayoutXLMTokenizerFast"),Rdt.forEach(t),ymo=r(oS," (LayoutXLM model)"),oS.forEach(t),xmo=i(S),us=n(S,"LI",{});var rS=s(us);Yle=n(rS,"STRONG",{});var Pdt=s(Yle);$mo=r(Pdt,"led"),Pdt.forEach(t),kmo=r(rS," \u2014 "),EN=n(rS,"A",{href:!0});var Bdt=s(EN);Smo=r(Bdt,"LEDTokenizer"),Bdt.forEach(t),Rmo=r(rS," or "),CN=n(rS,"A",{href:!0});var Ndt=s(CN);Pmo=r(Ndt,"LEDTokenizerFast"),Ndt.forEach(t),Bmo=r(rS," (LED model)"),rS.forEach(t),Nmo=i(S),ps=n(S,"LI",{});var tS=s(ps);Kle=n(tS,"STRONG",{});var Idt=s(Kle);Imo=r(Idt,"longformer"),Idt.forEach(t),qmo=r(tS," \u2014 "),wN=n(tS,"A",{href:!0});var qdt=s(wN);jmo=r(qdt,"LongformerTokenizer"),qdt.forEach(t),Dmo=r(tS," or "),AN=n(tS,"A",{href:!0});var jdt=s(AN);Gmo=r(jdt,"LongformerTokenizerFast"),jdt.forEach(t),Omo=r(tS," (Longformer model)"),tS.forEach(t),Vmo=i(S),_s=n(S,"LI",{});var aS=s(_s);Zle=n(aS,"STRONG",{});var Ddt=s(Zle);Xmo=r(Ddt,"longt5"),Ddt.forEach(t),zmo=r(aS," \u2014 "),LN=n(aS,"A",{href:!0});var Gdt=s(LN);Qmo=r(Gdt,"T5Tokenizer"),Gdt.forEach(t),Wmo=r(aS," or "),yN=n(aS,"A",{href:!0});var Odt=s(yN);Hmo=r(Odt,"T5TokenizerFast"),Odt.forEach(t),Umo=r(aS," (LongT5 model)"),aS.forEach(t),Jmo=i(S),hh=n(S,"LI",{});var D8e=s(hh);eie=n(D8e,"STRONG",{});var Vdt=s(eie);Ymo=r(Vdt,"luke"),Vdt.forEach(t),Kmo=r(D8e," \u2014 "),xN=n(D8e,"A",{href:!0});var Xdt=s(xN);Zmo=r(Xdt,"LukeTokenizer"),Xdt.forEach(t),efo=r(D8e," (LUKE model)"),D8e.forEach(t),ofo=i(S),bs=n(S,"LI",{});var nS=s(bs);oie=n(nS,"STRONG",{});var zdt=s(oie);rfo=r(zdt,"lxmert"),zdt.forEach(t),tfo=r(nS," \u2014 "),$N=n(nS,"A",{href:!0});var Qdt=s($N);afo=r(Qdt,"LxmertTokenizer"),Qdt.forEach(t),nfo=r(nS," or "),kN=n(nS,"A",{href:!0});var Wdt=s(kN);sfo=r(Wdt,"LxmertTokenizerFast"),Wdt.forEach(t),lfo=r(nS," (LXMERT model)"),nS.forEach(t),ifo=i(S),uh=n(S,"LI",{});var G8e=s(uh);rie=n(G8e,"STRONG",{});var Hdt=s(rie);dfo=r(Hdt,"m2m_100"),Hdt.forEach(t),cfo=r(G8e," \u2014 "),SN=n(G8e,"A",{href:!0});var Udt=s(SN);mfo=r(Udt,"M2M100Tokenizer"),Udt.forEach(t),ffo=r(G8e," (M2M100 model)"),G8e.forEach(t),gfo=i(S),ph=n(S,"LI",{});var O8e=s(ph);tie=n(O8e,"STRONG",{});var Jdt=s(tie);hfo=r(Jdt,"marian"),Jdt.forEach(t),ufo=r(O8e," \u2014 "),RN=n(O8e,"A",{href:!0});var Ydt=s(RN);pfo=r(Ydt,"MarianTokenizer"),Ydt.forEach(t),_fo=r(O8e," (Marian model)"),O8e.forEach(t),bfo=i(S),vs=n(S,"LI",{});var sS=s(vs);aie=n(sS,"STRONG",{});var Kdt=s(aie);vfo=r(Kdt,"mbart"),Kdt.forEach(t),Ffo=r(sS," \u2014 "),PN=n(sS,"A",{href:!0});var Zdt=s(PN);Tfo=r(Zdt,"MBartTokenizer"),Zdt.forEach(t),Mfo=r(sS," or "),BN=n(sS,"A",{href:!0});var ect=s(BN);Efo=r(ect,"MBartTokenizerFast"),ect.forEach(t),Cfo=r(sS," (mBART model)"),sS.forEach(t),wfo=i(S),Fs=n(S,"LI",{});var lS=s(Fs);nie=n(lS,"STRONG",{});var oct=s(nie);Afo=r(oct,"mbart50"),oct.forEach(t),Lfo=r(lS," \u2014 "),NN=n(lS,"A",{href:!0});var rct=s(NN);yfo=r(rct,"MBart50Tokenizer"),rct.forEach(t),xfo=r(lS," or "),IN=n(lS,"A",{href:!0});var tct=s(IN);$fo=r(tct,"MBart50TokenizerFast"),tct.forEach(t),kfo=r(lS," (mBART-50 model)"),lS.forEach(t),Sfo=i(S),Ts=n(S,"LI",{});var iS=s(Ts);sie=n(iS,"STRONG",{});var act=s(sie);Rfo=r(act,"megatron-bert"),act.forEach(t),Pfo=r(iS," \u2014 "),qN=n(iS,"A",{href:!0});var nct=s(qN);Bfo=r(nct,"BertTokenizer"),nct.forEach(t),Nfo=r(iS," or "),jN=n(iS,"A",{href:!0});var sct=s(jN);Ifo=r(sct,"BertTokenizerFast"),sct.forEach(t),qfo=r(iS," (Megatron-BERT model)"),iS.forEach(t),jfo=i(S),_h=n(S,"LI",{});var V8e=s(_h);lie=n(V8e,"STRONG",{});var lct=s(lie);Dfo=r(lct,"mluke"),lct.forEach(t),Gfo=r(V8e," \u2014 "),DN=n(V8e,"A",{href:!0});var ict=s(DN);Ofo=r(ict,"MLukeTokenizer"),ict.forEach(t),Vfo=r(V8e," (mLUKE model)"),V8e.forEach(t),Xfo=i(S),Ms=n(S,"LI",{});var dS=s(Ms);iie=n(dS,"STRONG",{});var dct=s(iie);zfo=r(dct,"mobilebert"),dct.forEach(t),Qfo=r(dS," \u2014 "),GN=n(dS,"A",{href:!0});var cct=s(GN);Wfo=r(cct,"MobileBertTokenizer"),cct.forEach(t),Hfo=r(dS," or "),ON=n(dS,"A",{href:!0});var mct=s(ON);Ufo=r(mct,"MobileBertTokenizerFast"),mct.forEach(t),Jfo=r(dS," (MobileBERT model)"),dS.forEach(t),Yfo=i(S),Es=n(S,"LI",{});var cS=s(Es);die=n(cS,"STRONG",{});var fct=s(die);Kfo=r(fct,"mpnet"),fct.forEach(t),Zfo=r(cS," \u2014 "),VN=n(cS,"A",{href:!0});var gct=s(VN);ego=r(gct,"MPNetTokenizer"),gct.forEach(t),ogo=r(cS," or "),XN=n(cS,"A",{href:!0});var hct=s(XN);rgo=r(hct,"MPNetTokenizerFast"),hct.forEach(t),tgo=r(cS," (MPNet model)"),cS.forEach(t),ago=i(S),Cs=n(S,"LI",{});var mS=s(Cs);cie=n(mS,"STRONG",{});var uct=s(cie);ngo=r(uct,"mt5"),uct.forEach(t),sgo=r(mS," \u2014 "),zN=n(mS,"A",{href:!0});var pct=s(zN);lgo=r(pct,"MT5Tokenizer"),pct.forEach(t),igo=r(mS," or "),QN=n(mS,"A",{href:!0});var _ct=s(QN);dgo=r(_ct,"MT5TokenizerFast"),_ct.forEach(t),cgo=r(mS," (MT5 model)"),mS.forEach(t),mgo=i(S),ws=n(S,"LI",{});var fS=s(ws);mie=n(fS,"STRONG",{});var bct=s(mie);fgo=r(bct,"mvp"),bct.forEach(t),ggo=r(fS," \u2014 "),WN=n(fS,"A",{href:!0});var vct=s(WN);hgo=r(vct,"MvpTokenizer"),vct.forEach(t),ugo=r(fS," or "),HN=n(fS,"A",{href:!0});var Fct=s(HN);pgo=r(Fct,"MvpTokenizerFast"),Fct.forEach(t),_go=r(fS," (MVP model)"),fS.forEach(t),bgo=i(S),As=n(S,"LI",{});var gS=s(As);fie=n(gS,"STRONG",{});var Tct=s(fie);vgo=r(Tct,"nezha"),Tct.forEach(t),Fgo=r(gS," \u2014 "),UN=n(gS,"A",{href:!0});var Mct=s(UN);Tgo=r(Mct,"BertTokenizer"),Mct.forEach(t),Mgo=r(gS," or "),JN=n(gS,"A",{href:!0});var Ect=s(JN);Ego=r(Ect,"BertTokenizerFast"),Ect.forEach(t),Cgo=r(gS," (Nezha model)"),gS.forEach(t),wgo=i(S),Ls=n(S,"LI",{});var hS=s(Ls);gie=n(hS,"STRONG",{});var Cct=s(gie);Ago=r(Cct,"nllb"),Cct.forEach(t),Lgo=r(hS," \u2014 "),YN=n(hS,"A",{href:!0});var wct=s(YN);ygo=r(wct,"NllbTokenizer"),wct.forEach(t),xgo=r(hS," or "),KN=n(hS,"A",{href:!0});var Act=s(KN);$go=r(Act,"NllbTokenizerFast"),Act.forEach(t),kgo=r(hS," (NLLB model)"),hS.forEach(t),Sgo=i(S),ys=n(S,"LI",{});var uS=s(ys);hie=n(uS,"STRONG",{});var Lct=s(hie);Rgo=r(Lct,"nystromformer"),Lct.forEach(t),Pgo=r(uS," \u2014 "),ZN=n(uS,"A",{href:!0});var yct=s(ZN);Bgo=r(yct,"AlbertTokenizer"),yct.forEach(t),Ngo=r(uS," or "),eI=n(uS,"A",{href:!0});var xct=s(eI);Igo=r(xct,"AlbertTokenizerFast"),xct.forEach(t),qgo=r(uS," (Nystr\xF6mformer model)"),uS.forEach(t),jgo=i(S),xs=n(S,"LI",{});var pS=s(xs);uie=n(pS,"STRONG",{});var $ct=s(uie);Dgo=r($ct,"openai-gpt"),$ct.forEach(t),Ggo=r(pS," \u2014 "),oI=n(pS,"A",{href:!0});var kct=s(oI);Ogo=r(kct,"OpenAIGPTTokenizer"),kct.forEach(t),Vgo=r(pS," or "),rI=n(pS,"A",{href:!0});var Sct=s(rI);Xgo=r(Sct,"OpenAIGPTTokenizerFast"),Sct.forEach(t),zgo=r(pS," (OpenAI GPT model)"),pS.forEach(t),Qgo=i(S),bh=n(S,"LI",{});var X8e=s(bh);pie=n(X8e,"STRONG",{});var Rct=s(pie);Wgo=r(Rct,"opt"),Rct.forEach(t),Hgo=r(X8e," \u2014 "),tI=n(X8e,"A",{href:!0});var Pct=s(tI);Ugo=r(Pct,"GPT2Tokenizer"),Pct.forEach(t),Jgo=r(X8e," (OPT model)"),X8e.forEach(t),Ygo=i(S),$s=n(S,"LI",{});var _S=s($s);_ie=n(_S,"STRONG",{});var Bct=s(_ie);Kgo=r(Bct,"pegasus"),Bct.forEach(t),Zgo=r(_S," \u2014 "),aI=n(_S,"A",{href:!0});var Nct=s(aI);eho=r(Nct,"PegasusTokenizer"),Nct.forEach(t),oho=r(_S," or "),nI=n(_S,"A",{href:!0});var Ict=s(nI);rho=r(Ict,"PegasusTokenizerFast"),Ict.forEach(t),tho=r(_S," (Pegasus model)"),_S.forEach(t),aho=i(S),vh=n(S,"LI",{});var z8e=s(vh);bie=n(z8e,"STRONG",{});var qct=s(bie);nho=r(qct,"perceiver"),qct.forEach(t),sho=r(z8e," \u2014 "),sI=n(z8e,"A",{href:!0});var jct=s(sI);lho=r(jct,"PerceiverTokenizer"),jct.forEach(t),iho=r(z8e," (Perceiver model)"),z8e.forEach(t),dho=i(S),Fh=n(S,"LI",{});var Q8e=s(Fh);vie=n(Q8e,"STRONG",{});var Dct=s(vie);cho=r(Dct,"phobert"),Dct.forEach(t),mho=r(Q8e," \u2014 "),lI=n(Q8e,"A",{href:!0});var Gct=s(lI);fho=r(Gct,"PhobertTokenizer"),Gct.forEach(t),gho=r(Q8e," (PhoBERT model)"),Q8e.forEach(t),hho=i(S),Th=n(S,"LI",{});var W8e=s(Th);Fie=n(W8e,"STRONG",{});var Oct=s(Fie);uho=r(Oct,"plbart"),Oct.forEach(t),pho=r(W8e," \u2014 "),iI=n(W8e,"A",{href:!0});var Vct=s(iI);_ho=r(Vct,"PLBartTokenizer"),Vct.forEach(t),bho=r(W8e," (PLBart model)"),W8e.forEach(t),vho=i(S),Mh=n(S,"LI",{});var H8e=s(Mh);Tie=n(H8e,"STRONG",{});var Xct=s(Tie);Fho=r(Xct,"prophetnet"),Xct.forEach(t),Tho=r(H8e," \u2014 "),dI=n(H8e,"A",{href:!0});var zct=s(dI);Mho=r(zct,"ProphetNetTokenizer"),zct.forEach(t),Eho=r(H8e," (ProphetNet model)"),H8e.forEach(t),Cho=i(S),ks=n(S,"LI",{});var bS=s(ks);Mie=n(bS,"STRONG",{});var Qct=s(Mie);who=r(Qct,"qdqbert"),Qct.forEach(t),Aho=r(bS," \u2014 "),cI=n(bS,"A",{href:!0});var Wct=s(cI);Lho=r(Wct,"BertTokenizer"),Wct.forEach(t),yho=r(bS," or "),mI=n(bS,"A",{href:!0});var Hct=s(mI);xho=r(Hct,"BertTokenizerFast"),Hct.forEach(t),$ho=r(bS," (QDQBert model)"),bS.forEach(t),kho=i(S),Eh=n(S,"LI",{});var U8e=s(Eh);Eie=n(U8e,"STRONG",{});var Uct=s(Eie);Sho=r(Uct,"rag"),Uct.forEach(t),Rho=r(U8e," \u2014 "),fI=n(U8e,"A",{href:!0});var Jct=s(fI);Pho=r(Jct,"RagTokenizer"),Jct.forEach(t),Bho=r(U8e," (RAG model)"),U8e.forEach(t),Nho=i(S),Ss=n(S,"LI",{});var vS=s(Ss);Cie=n(vS,"STRONG",{});var Yct=s(Cie);Iho=r(Yct,"realm"),Yct.forEach(t),qho=r(vS," \u2014 "),gI=n(vS,"A",{href:!0});var Kct=s(gI);jho=r(Kct,"RealmTokenizer"),Kct.forEach(t),Dho=r(vS," or "),hI=n(vS,"A",{href:!0});var Zct=s(hI);Gho=r(Zct,"RealmTokenizerFast"),Zct.forEach(t),Oho=r(vS," (REALM model)"),vS.forEach(t),Vho=i(S),Rs=n(S,"LI",{});var FS=s(Rs);wie=n(FS,"STRONG",{});var emt=s(wie);Xho=r(emt,"reformer"),emt.forEach(t),zho=r(FS," \u2014 "),uI=n(FS,"A",{href:!0});var omt=s(uI);Qho=r(omt,"ReformerTokenizer"),omt.forEach(t),Who=r(FS," or "),pI=n(FS,"A",{href:!0});var rmt=s(pI);Hho=r(rmt,"ReformerTokenizerFast"),rmt.forEach(t),Uho=r(FS," (Reformer model)"),FS.forEach(t),Jho=i(S),Ps=n(S,"LI",{});var TS=s(Ps);Aie=n(TS,"STRONG",{});var tmt=s(Aie);Yho=r(tmt,"rembert"),tmt.forEach(t),Kho=r(TS," \u2014 "),_I=n(TS,"A",{href:!0});var amt=s(_I);Zho=r(amt,"RemBertTokenizer"),amt.forEach(t),euo=r(TS," or "),bI=n(TS,"A",{href:!0});var nmt=s(bI);ouo=r(nmt,"RemBertTokenizerFast"),nmt.forEach(t),ruo=r(TS," (RemBERT model)"),TS.forEach(t),tuo=i(S),Bs=n(S,"LI",{});var MS=s(Bs);Lie=n(MS,"STRONG",{});var smt=s(Lie);auo=r(smt,"retribert"),smt.forEach(t),nuo=r(MS," \u2014 "),vI=n(MS,"A",{href:!0});var lmt=s(vI);suo=r(lmt,"RetriBertTokenizer"),lmt.forEach(t),luo=r(MS," or "),FI=n(MS,"A",{href:!0});var imt=s(FI);iuo=r(imt,"RetriBertTokenizerFast"),imt.forEach(t),duo=r(MS," (RetriBERT model)"),MS.forEach(t),cuo=i(S),Ns=n(S,"LI",{});var ES=s(Ns);yie=n(ES,"STRONG",{});var dmt=s(yie);muo=r(dmt,"roberta"),dmt.forEach(t),fuo=r(ES," \u2014 "),TI=n(ES,"A",{href:!0});var cmt=s(TI);guo=r(cmt,"RobertaTokenizer"),cmt.forEach(t),huo=r(ES," or "),MI=n(ES,"A",{href:!0});var mmt=s(MI);uuo=r(mmt,"RobertaTokenizerFast"),mmt.forEach(t),puo=r(ES," (RoBERTa model)"),ES.forEach(t),_uo=i(S),Is=n(S,"LI",{});var CS=s(Is);xie=n(CS,"STRONG",{});var fmt=s(xie);buo=r(fmt,"roformer"),fmt.forEach(t),vuo=r(CS," \u2014 "),EI=n(CS,"A",{href:!0});var gmt=s(EI);Fuo=r(gmt,"RoFormerTokenizer"),gmt.forEach(t),Tuo=r(CS," or "),CI=n(CS,"A",{href:!0});var hmt=s(CI);Muo=r(hmt,"RoFormerTokenizerFast"),hmt.forEach(t),Euo=r(CS," (RoFormer model)"),CS.forEach(t),Cuo=i(S),Ch=n(S,"LI",{});var J8e=s(Ch);$ie=n(J8e,"STRONG",{});var umt=s($ie);wuo=r(umt,"speech_to_text"),umt.forEach(t),Auo=r(J8e," \u2014 "),wI=n(J8e,"A",{href:!0});var pmt=s(wI);Luo=r(pmt,"Speech2TextTokenizer"),pmt.forEach(t),yuo=r(J8e," (Speech2Text model)"),J8e.forEach(t),xuo=i(S),wh=n(S,"LI",{});var Y8e=s(wh);kie=n(Y8e,"STRONG",{});var _mt=s(kie);$uo=r(_mt,"speech_to_text_2"),_mt.forEach(t),kuo=r(Y8e," \u2014 "),AI=n(Y8e,"A",{href:!0});var bmt=s(AI);Suo=r(bmt,"Speech2Text2Tokenizer"),bmt.forEach(t),Ruo=r(Y8e," (Speech2Text2 model)"),Y8e.forEach(t),Puo=i(S),qs=n(S,"LI",{});var wS=s(qs);Sie=n(wS,"STRONG",{});var vmt=s(Sie);Buo=r(vmt,"splinter"),vmt.forEach(t),Nuo=r(wS," \u2014 "),LI=n(wS,"A",{href:!0});var Fmt=s(LI);Iuo=r(Fmt,"SplinterTokenizer"),Fmt.forEach(t),quo=r(wS," or "),yI=n(wS,"A",{href:!0});var Tmt=s(yI);juo=r(Tmt,"SplinterTokenizerFast"),Tmt.forEach(t),Duo=r(wS," (Splinter model)"),wS.forEach(t),Guo=i(S),js=n(S,"LI",{});var AS=s(js);Rie=n(AS,"STRONG",{});var Mmt=s(Rie);Ouo=r(Mmt,"squeezebert"),Mmt.forEach(t),Vuo=r(AS," \u2014 "),xI=n(AS,"A",{href:!0});var Emt=s(xI);Xuo=r(Emt,"SqueezeBertTokenizer"),Emt.forEach(t),zuo=r(AS," or "),$I=n(AS,"A",{href:!0});var Cmt=s($I);Quo=r(Cmt,"SqueezeBertTokenizerFast"),Cmt.forEach(t),Wuo=r(AS," (SqueezeBERT model)"),AS.forEach(t),Huo=i(S),Ds=n(S,"LI",{});var LS=s(Ds);Pie=n(LS,"STRONG",{});var wmt=s(Pie);Uuo=r(wmt,"t5"),wmt.forEach(t),Juo=r(LS," \u2014 "),kI=n(LS,"A",{href:!0});var Amt=s(kI);Yuo=r(Amt,"T5Tokenizer"),Amt.forEach(t),Kuo=r(LS," or "),SI=n(LS,"A",{href:!0});var Lmt=s(SI);Zuo=r(Lmt,"T5TokenizerFast"),Lmt.forEach(t),epo=r(LS," (T5 model)"),LS.forEach(t),opo=i(S),Ah=n(S,"LI",{});var K8e=s(Ah);Bie=n(K8e,"STRONG",{});var ymt=s(Bie);rpo=r(ymt,"tapas"),ymt.forEach(t),tpo=r(K8e," \u2014 "),RI=n(K8e,"A",{href:!0});var xmt=s(RI);apo=r(xmt,"TapasTokenizer"),xmt.forEach(t),npo=r(K8e," (TAPAS model)"),K8e.forEach(t),spo=i(S),Lh=n(S,"LI",{});var Z8e=s(Lh);Nie=n(Z8e,"STRONG",{});var $mt=s(Nie);lpo=r($mt,"tapex"),$mt.forEach(t),ipo=r(Z8e," \u2014 "),PI=n(Z8e,"A",{href:!0});var kmt=s(PI);dpo=r(kmt,"TapexTokenizer"),kmt.forEach(t),cpo=r(Z8e," (TAPEX model)"),Z8e.forEach(t),mpo=i(S),yh=n(S,"LI",{});var e9e=s(yh);Iie=n(e9e,"STRONG",{});var Smt=s(Iie);fpo=r(Smt,"transfo-xl"),Smt.forEach(t),gpo=r(e9e," \u2014 "),BI=n(e9e,"A",{href:!0});var Rmt=s(BI);hpo=r(Rmt,"TransfoXLTokenizer"),Rmt.forEach(t),upo=r(e9e," (Transformer-XL model)"),e9e.forEach(t),ppo=i(S),Gs=n(S,"LI",{});var yS=s(Gs);qie=n(yS,"STRONG",{});var Pmt=s(qie);_po=r(Pmt,"vilt"),Pmt.forEach(t),bpo=r(yS," \u2014 "),NI=n(yS,"A",{href:!0});var Bmt=s(NI);vpo=r(Bmt,"BertTokenizer"),Bmt.forEach(t),Fpo=r(yS," or "),II=n(yS,"A",{href:!0});var Nmt=s(II);Tpo=r(Nmt,"BertTokenizerFast"),Nmt.forEach(t),Mpo=r(yS," (ViLT model)"),yS.forEach(t),Epo=i(S),Os=n(S,"LI",{});var xS=s(Os);jie=n(xS,"STRONG",{});var Imt=s(jie);Cpo=r(Imt,"visual_bert"),Imt.forEach(t),wpo=r(xS," \u2014 "),qI=n(xS,"A",{href:!0});var qmt=s(qI);Apo=r(qmt,"BertTokenizer"),qmt.forEach(t),Lpo=r(xS," or "),jI=n(xS,"A",{href:!0});var jmt=s(jI);ypo=r(jmt,"BertTokenizerFast"),jmt.forEach(t),xpo=r(xS," (VisualBERT model)"),xS.forEach(t),$po=i(S),xh=n(S,"LI",{});var o9e=s(xh);Die=n(o9e,"STRONG",{});var Dmt=s(Die);kpo=r(Dmt,"wav2vec2"),Dmt.forEach(t),Spo=r(o9e," \u2014 "),DI=n(o9e,"A",{href:!0});var Gmt=s(DI);Rpo=r(Gmt,"Wav2Vec2CTCTokenizer"),Gmt.forEach(t),Ppo=r(o9e," (Wav2Vec2 model)"),o9e.forEach(t),Bpo=i(S),$h=n(S,"LI",{});var r9e=s($h);Gie=n(r9e,"STRONG",{});var Omt=s(Gie);Npo=r(Omt,"wav2vec2-conformer"),Omt.forEach(t),Ipo=r(r9e," \u2014 "),GI=n(r9e,"A",{href:!0});var Vmt=s(GI);qpo=r(Vmt,"Wav2Vec2CTCTokenizer"),Vmt.forEach(t),jpo=r(r9e," (Wav2Vec2-Conformer model)"),r9e.forEach(t),Dpo=i(S),kh=n(S,"LI",{});var t9e=s(kh);Oie=n(t9e,"STRONG",{});var Xmt=s(Oie);Gpo=r(Xmt,"wav2vec2_phoneme"),Xmt.forEach(t),Opo=r(t9e," \u2014 "),OI=n(t9e,"A",{href:!0});var zmt=s(OI);Vpo=r(zmt,"Wav2Vec2PhonemeCTCTokenizer"),zmt.forEach(t),Xpo=r(t9e," (Wav2Vec2Phoneme model)"),t9e.forEach(t),zpo=i(S),Vs=n(S,"LI",{});var $S=s(Vs);Vie=n($S,"STRONG",{});var Qmt=s(Vie);Qpo=r(Qmt,"xglm"),Qmt.forEach(t),Wpo=r($S," \u2014 "),VI=n($S,"A",{href:!0});var Wmt=s(VI);Hpo=r(Wmt,"XGLMTokenizer"),Wmt.forEach(t),Upo=r($S," or "),XI=n($S,"A",{href:!0});var Hmt=s(XI);Jpo=r(Hmt,"XGLMTokenizerFast"),Hmt.forEach(t),Ypo=r($S," (XGLM model)"),$S.forEach(t),Kpo=i(S),Sh=n(S,"LI",{});var a9e=s(Sh);Xie=n(a9e,"STRONG",{});var Umt=s(Xie);Zpo=r(Umt,"xlm"),Umt.forEach(t),e_o=r(a9e," \u2014 "),zI=n(a9e,"A",{href:!0});var Jmt=s(zI);o_o=r(Jmt,"XLMTokenizer"),Jmt.forEach(t),r_o=r(a9e," (XLM model)"),a9e.forEach(t),t_o=i(S),Rh=n(S,"LI",{});var n9e=s(Rh);zie=n(n9e,"STRONG",{});var Ymt=s(zie);a_o=r(Ymt,"xlm-prophetnet"),Ymt.forEach(t),n_o=r(n9e," \u2014 "),QI=n(n9e,"A",{href:!0});var Kmt=s(QI);s_o=r(Kmt,"XLMProphetNetTokenizer"),Kmt.forEach(t),l_o=r(n9e," (XLM-ProphetNet model)"),n9e.forEach(t),i_o=i(S),Xs=n(S,"LI",{});var kS=s(Xs);Qie=n(kS,"STRONG",{});var Zmt=s(Qie);d_o=r(Zmt,"xlm-roberta"),Zmt.forEach(t),c_o=r(kS," \u2014 "),WI=n(kS,"A",{href:!0});var eft=s(WI);m_o=r(eft,"XLMRobertaTokenizer"),eft.forEach(t),f_o=r(kS," or "),HI=n(kS,"A",{href:!0});var oft=s(HI);g_o=r(oft,"XLMRobertaTokenizerFast"),oft.forEach(t),h_o=r(kS," (XLM-RoBERTa model)"),kS.forEach(t),u_o=i(S),zs=n(S,"LI",{});var SS=s(zs);Wie=n(SS,"STRONG",{});var rft=s(Wie);p_o=r(rft,"xlm-roberta-xl"),rft.forEach(t),__o=r(SS," \u2014 "),UI=n(SS,"A",{href:!0});var tft=s(UI);b_o=r(tft,"RobertaTokenizer"),tft.forEach(t),v_o=r(SS," or "),JI=n(SS,"A",{href:!0});var aft=s(JI);F_o=r(aft,"RobertaTokenizerFast"),aft.forEach(t),T_o=r(SS," (XLM-RoBERTa-XL model)"),SS.forEach(t),M_o=i(S),Qs=n(S,"LI",{});var RS=s(Qs);Hie=n(RS,"STRONG",{});var nft=s(Hie);E_o=r(nft,"xlnet"),nft.forEach(t),C_o=r(RS," \u2014 "),YI=n(RS,"A",{href:!0});var sft=s(YI);w_o=r(sft,"XLNetTokenizer"),sft.forEach(t),A_o=r(RS," or "),KI=n(RS,"A",{href:!0});var lft=s(KI);L_o=r(lft,"XLNetTokenizerFast"),lft.forEach(t),y_o=r(RS," (XLNet model)"),RS.forEach(t),x_o=i(S),Ws=n(S,"LI",{});var PS=s(Ws);Uie=n(PS,"STRONG",{});var ift=s(Uie);$_o=r(ift,"yoso"),ift.forEach(t),k_o=r(PS," \u2014 "),ZI=n(PS,"A",{href:!0});var dft=s(ZI);S_o=r(dft,"AlbertTokenizer"),dft.forEach(t),R_o=r(PS," or "),eq=n(PS,"A",{href:!0});var cft=s(eq);P_o=r(cft,"AlbertTokenizerFast"),cft.forEach(t),B_o=r(PS," (YOSO model)"),PS.forEach(t),S.forEach(t),N_o=i(el),T(Ph.$$.fragment,el),el.forEach(t),I_o=i(Zs),Bh=n(Zs,"DIV",{class:!0});var CQe=s(Bh);T(Ty.$$.fragment,CQe),q_o=i(CQe),Jie=n(CQe,"P",{});var mft=s(Jie);j_o=r(mft,"Register a new tokenizer in this mapping."),mft.forEach(t),CQe.forEach(t),Zs.forEach(t),EXe=i(m),ji=n(m,"H2",{class:!0});var wQe=s(ji);Nh=n(wQe,"A",{id:!0,class:!0,href:!0});var fft=s(Nh);Yie=n(fft,"SPAN",{});var gft=s(Yie);T(My.$$.fragment,gft),gft.forEach(t),fft.forEach(t),D_o=i(wQe),Kie=n(wQe,"SPAN",{});var hft=s(Kie);G_o=r(hft,"AutoFeatureExtractor"),hft.forEach(t),wQe.forEach(t),CXe=i(m),yo=n(m,"DIV",{class:!0});var ol=s(yo);T(Ey.$$.fragment,ol),O_o=i(ol),Cy=n(ol,"P",{});var AQe=s(Cy);V_o=r(AQe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),oq=n(AQe,"A",{href:!0});var uft=s(oq);X_o=r(uft,"AutoFeatureExtractor.from_pretrained()"),uft.forEach(t),z_o=r(AQe," class method."),AQe.forEach(t),Q_o=i(ol),wy=n(ol,"P",{});var LQe=s(wy);W_o=r(LQe,"This class cannot be instantiated directly using "),Zie=n(LQe,"CODE",{});var pft=s(Zie);H_o=r(pft,"__init__()"),pft.forEach(t),U_o=r(LQe," (throws an error)."),LQe.forEach(t),J_o=i(ol),Ue=n(ol,"DIV",{class:!0});var na=s(Ue);T(Ay.$$.fragment,na),Y_o=i(na),ede=n(na,"P",{});var _ft=s(ede);K_o=r(_ft,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),_ft.forEach(t),Z_o=i(na),Ba=n(na,"P",{});var m7=s(Ba);e2o=r(m7,"The feature extractor class to instantiate is selected based on the "),ode=n(m7,"CODE",{});var bft=s(ode);o2o=r(bft,"model_type"),bft.forEach(t),r2o=r(m7,` property of the config object
(either passed as an argument or loaded from `),rde=n(m7,"CODE",{});var vft=s(rde);t2o=r(vft,"pretrained_model_name_or_path"),vft.forEach(t),a2o=r(m7,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),tde=n(m7,"CODE",{});var Fft=s(tde);n2o=r(Fft,"pretrained_model_name_or_path"),Fft.forEach(t),s2o=r(m7,":"),m7.forEach(t),l2o=i(na),Y=n(na,"UL",{});var K=s(Y);Ih=n(K,"LI",{});var s9e=s(Ih);ade=n(s9e,"STRONG",{});var Tft=s(ade);i2o=r(Tft,"beit"),Tft.forEach(t),d2o=r(s9e," \u2014 "),rq=n(s9e,"A",{href:!0});var Mft=s(rq);c2o=r(Mft,"BeitFeatureExtractor"),Mft.forEach(t),m2o=r(s9e," (BEiT model)"),s9e.forEach(t),f2o=i(K),qh=n(K,"LI",{});var l9e=s(qh);nde=n(l9e,"STRONG",{});var Eft=s(nde);g2o=r(Eft,"clip"),Eft.forEach(t),h2o=r(l9e," \u2014 "),tq=n(l9e,"A",{href:!0});var Cft=s(tq);u2o=r(Cft,"CLIPFeatureExtractor"),Cft.forEach(t),p2o=r(l9e," (CLIP model)"),l9e.forEach(t),_2o=i(K),jh=n(K,"LI",{});var i9e=s(jh);sde=n(i9e,"STRONG",{});var wft=s(sde);b2o=r(wft,"convnext"),wft.forEach(t),v2o=r(i9e," \u2014 "),aq=n(i9e,"A",{href:!0});var Aft=s(aq);F2o=r(Aft,"ConvNextFeatureExtractor"),Aft.forEach(t),T2o=r(i9e," (ConvNeXT model)"),i9e.forEach(t),M2o=i(K),Dh=n(K,"LI",{});var d9e=s(Dh);lde=n(d9e,"STRONG",{});var Lft=s(lde);E2o=r(Lft,"cvt"),Lft.forEach(t),C2o=r(d9e," \u2014 "),nq=n(d9e,"A",{href:!0});var yft=s(nq);w2o=r(yft,"ConvNextFeatureExtractor"),yft.forEach(t),A2o=r(d9e," (CvT model)"),d9e.forEach(t),L2o=i(K),Gh=n(K,"LI",{});var c9e=s(Gh);ide=n(c9e,"STRONG",{});var xft=s(ide);y2o=r(xft,"data2vec-audio"),xft.forEach(t),x2o=r(c9e," \u2014 "),sq=n(c9e,"A",{href:!0});var $ft=s(sq);$2o=r($ft,"Wav2Vec2FeatureExtractor"),$ft.forEach(t),k2o=r(c9e," (Data2VecAudio model)"),c9e.forEach(t),S2o=i(K),Oh=n(K,"LI",{});var m9e=s(Oh);dde=n(m9e,"STRONG",{});var kft=s(dde);R2o=r(kft,"data2vec-vision"),kft.forEach(t),P2o=r(m9e," \u2014 "),lq=n(m9e,"A",{href:!0});var Sft=s(lq);B2o=r(Sft,"BeitFeatureExtractor"),Sft.forEach(t),N2o=r(m9e," (Data2VecVision model)"),m9e.forEach(t),I2o=i(K),Vh=n(K,"LI",{});var f9e=s(Vh);cde=n(f9e,"STRONG",{});var Rft=s(cde);q2o=r(Rft,"deit"),Rft.forEach(t),j2o=r(f9e," \u2014 "),iq=n(f9e,"A",{href:!0});var Pft=s(iq);D2o=r(Pft,"DeiTFeatureExtractor"),Pft.forEach(t),G2o=r(f9e," (DeiT model)"),f9e.forEach(t),O2o=i(K),Xh=n(K,"LI",{});var g9e=s(Xh);mde=n(g9e,"STRONG",{});var Bft=s(mde);V2o=r(Bft,"detr"),Bft.forEach(t),X2o=r(g9e," \u2014 "),dq=n(g9e,"A",{href:!0});var Nft=s(dq);z2o=r(Nft,"DetrFeatureExtractor"),Nft.forEach(t),Q2o=r(g9e," (DETR model)"),g9e.forEach(t),W2o=i(K),zh=n(K,"LI",{});var h9e=s(zh);fde=n(h9e,"STRONG",{});var Ift=s(fde);H2o=r(Ift,"dpt"),Ift.forEach(t),U2o=r(h9e," \u2014 "),cq=n(h9e,"A",{href:!0});var qft=s(cq);J2o=r(qft,"DPTFeatureExtractor"),qft.forEach(t),Y2o=r(h9e," (DPT model)"),h9e.forEach(t),K2o=i(K),Qh=n(K,"LI",{});var u9e=s(Qh);gde=n(u9e,"STRONG",{});var jft=s(gde);Z2o=r(jft,"flava"),jft.forEach(t),ebo=r(u9e," \u2014 "),mq=n(u9e,"A",{href:!0});var Dft=s(mq);obo=r(Dft,"FlavaFeatureExtractor"),Dft.forEach(t),rbo=r(u9e," (FLAVA model)"),u9e.forEach(t),tbo=i(K),Wh=n(K,"LI",{});var p9e=s(Wh);hde=n(p9e,"STRONG",{});var Gft=s(hde);abo=r(Gft,"glpn"),Gft.forEach(t),nbo=r(p9e," \u2014 "),fq=n(p9e,"A",{href:!0});var Oft=s(fq);sbo=r(Oft,"GLPNFeatureExtractor"),Oft.forEach(t),lbo=r(p9e," (GLPN model)"),p9e.forEach(t),ibo=i(K),Hh=n(K,"LI",{});var _9e=s(Hh);ude=n(_9e,"STRONG",{});var Vft=s(ude);dbo=r(Vft,"groupvit"),Vft.forEach(t),cbo=r(_9e," \u2014 "),gq=n(_9e,"A",{href:!0});var Xft=s(gq);mbo=r(Xft,"CLIPFeatureExtractor"),Xft.forEach(t),fbo=r(_9e," (GroupViT model)"),_9e.forEach(t),gbo=i(K),Uh=n(K,"LI",{});var b9e=s(Uh);pde=n(b9e,"STRONG",{});var zft=s(pde);hbo=r(zft,"hubert"),zft.forEach(t),ubo=r(b9e," \u2014 "),hq=n(b9e,"A",{href:!0});var Qft=s(hq);pbo=r(Qft,"Wav2Vec2FeatureExtractor"),Qft.forEach(t),_bo=r(b9e," (Hubert model)"),b9e.forEach(t),bbo=i(K),Jh=n(K,"LI",{});var v9e=s(Jh);_de=n(v9e,"STRONG",{});var Wft=s(_de);vbo=r(Wft,"imagegpt"),Wft.forEach(t),Fbo=r(v9e," \u2014 "),uq=n(v9e,"A",{href:!0});var Hft=s(uq);Tbo=r(Hft,"ImageGPTFeatureExtractor"),Hft.forEach(t),Mbo=r(v9e," (ImageGPT model)"),v9e.forEach(t),Ebo=i(K),Yh=n(K,"LI",{});var F9e=s(Yh);bde=n(F9e,"STRONG",{});var Uft=s(bde);Cbo=r(Uft,"layoutlmv2"),Uft.forEach(t),wbo=r(F9e," \u2014 "),pq=n(F9e,"A",{href:!0});var Jft=s(pq);Abo=r(Jft,"LayoutLMv2FeatureExtractor"),Jft.forEach(t),Lbo=r(F9e," (LayoutLMv2 model)"),F9e.forEach(t),ybo=i(K),Kh=n(K,"LI",{});var T9e=s(Kh);vde=n(T9e,"STRONG",{});var Yft=s(vde);xbo=r(Yft,"layoutlmv3"),Yft.forEach(t),$bo=r(T9e," \u2014 "),_q=n(T9e,"A",{href:!0});var Kft=s(_q);kbo=r(Kft,"LayoutLMv3FeatureExtractor"),Kft.forEach(t),Sbo=r(T9e," (LayoutLMv3 model)"),T9e.forEach(t),Rbo=i(K),Zh=n(K,"LI",{});var M9e=s(Zh);Fde=n(M9e,"STRONG",{});var Zft=s(Fde);Pbo=r(Zft,"levit"),Zft.forEach(t),Bbo=r(M9e," \u2014 "),bq=n(M9e,"A",{href:!0});var egt=s(bq);Nbo=r(egt,"LevitFeatureExtractor"),egt.forEach(t),Ibo=r(M9e," (LeViT model)"),M9e.forEach(t),qbo=i(K),eu=n(K,"LI",{});var E9e=s(eu);Tde=n(E9e,"STRONG",{});var ogt=s(Tde);jbo=r(ogt,"maskformer"),ogt.forEach(t),Dbo=r(E9e," \u2014 "),vq=n(E9e,"A",{href:!0});var rgt=s(vq);Gbo=r(rgt,"MaskFormerFeatureExtractor"),rgt.forEach(t),Obo=r(E9e," (MaskFormer model)"),E9e.forEach(t),Vbo=i(K),ou=n(K,"LI",{});var C9e=s(ou);Mde=n(C9e,"STRONG",{});var tgt=s(Mde);Xbo=r(tgt,"mctct"),tgt.forEach(t),zbo=r(C9e," \u2014 "),Fq=n(C9e,"A",{href:!0});var agt=s(Fq);Qbo=r(agt,"MCTCTFeatureExtractor"),agt.forEach(t),Wbo=r(C9e," (M-CTC-T model)"),C9e.forEach(t),Hbo=i(K),ru=n(K,"LI",{});var w9e=s(ru);Ede=n(w9e,"STRONG",{});var ngt=s(Ede);Ubo=r(ngt,"mobilevit"),ngt.forEach(t),Jbo=r(w9e," \u2014 "),Tq=n(w9e,"A",{href:!0});var sgt=s(Tq);Ybo=r(sgt,"MobileViTFeatureExtractor"),sgt.forEach(t),Kbo=r(w9e," (MobileViT model)"),w9e.forEach(t),Zbo=i(K),tu=n(K,"LI",{});var A9e=s(tu);Cde=n(A9e,"STRONG",{});var lgt=s(Cde);evo=r(lgt,"perceiver"),lgt.forEach(t),ovo=r(A9e," \u2014 "),Mq=n(A9e,"A",{href:!0});var igt=s(Mq);rvo=r(igt,"PerceiverFeatureExtractor"),igt.forEach(t),tvo=r(A9e," (Perceiver model)"),A9e.forEach(t),avo=i(K),au=n(K,"LI",{});var L9e=s(au);wde=n(L9e,"STRONG",{});var dgt=s(wde);nvo=r(dgt,"poolformer"),dgt.forEach(t),svo=r(L9e," \u2014 "),Eq=n(L9e,"A",{href:!0});var cgt=s(Eq);lvo=r(cgt,"PoolFormerFeatureExtractor"),cgt.forEach(t),ivo=r(L9e," (PoolFormer model)"),L9e.forEach(t),dvo=i(K),nu=n(K,"LI",{});var y9e=s(nu);Ade=n(y9e,"STRONG",{});var mgt=s(Ade);cvo=r(mgt,"regnet"),mgt.forEach(t),mvo=r(y9e," \u2014 "),Cq=n(y9e,"A",{href:!0});var fgt=s(Cq);fvo=r(fgt,"ConvNextFeatureExtractor"),fgt.forEach(t),gvo=r(y9e," (RegNet model)"),y9e.forEach(t),hvo=i(K),su=n(K,"LI",{});var x9e=s(su);Lde=n(x9e,"STRONG",{});var ggt=s(Lde);uvo=r(ggt,"resnet"),ggt.forEach(t),pvo=r(x9e," \u2014 "),wq=n(x9e,"A",{href:!0});var hgt=s(wq);_vo=r(hgt,"ConvNextFeatureExtractor"),hgt.forEach(t),bvo=r(x9e," (ResNet model)"),x9e.forEach(t),vvo=i(K),lu=n(K,"LI",{});var $9e=s(lu);yde=n($9e,"STRONG",{});var ugt=s(yde);Fvo=r(ugt,"segformer"),ugt.forEach(t),Tvo=r($9e," \u2014 "),Aq=n($9e,"A",{href:!0});var pgt=s(Aq);Mvo=r(pgt,"SegformerFeatureExtractor"),pgt.forEach(t),Evo=r($9e," (SegFormer model)"),$9e.forEach(t),Cvo=i(K),iu=n(K,"LI",{});var k9e=s(iu);xde=n(k9e,"STRONG",{});var _gt=s(xde);wvo=r(_gt,"speech_to_text"),_gt.forEach(t),Avo=r(k9e," \u2014 "),Lq=n(k9e,"A",{href:!0});var bgt=s(Lq);Lvo=r(bgt,"Speech2TextFeatureExtractor"),bgt.forEach(t),yvo=r(k9e," (Speech2Text model)"),k9e.forEach(t),xvo=i(K),du=n(K,"LI",{});var S9e=s(du);$de=n(S9e,"STRONG",{});var vgt=s($de);$vo=r(vgt,"swin"),vgt.forEach(t),kvo=r(S9e," \u2014 "),yq=n(S9e,"A",{href:!0});var Fgt=s(yq);Svo=r(Fgt,"ViTFeatureExtractor"),Fgt.forEach(t),Rvo=r(S9e," (Swin Transformer model)"),S9e.forEach(t),Pvo=i(K),cu=n(K,"LI",{});var R9e=s(cu);kde=n(R9e,"STRONG",{});var Tgt=s(kde);Bvo=r(Tgt,"van"),Tgt.forEach(t),Nvo=r(R9e," \u2014 "),xq=n(R9e,"A",{href:!0});var Mgt=s(xq);Ivo=r(Mgt,"ConvNextFeatureExtractor"),Mgt.forEach(t),qvo=r(R9e," (VAN model)"),R9e.forEach(t),jvo=i(K),mu=n(K,"LI",{});var P9e=s(mu);Sde=n(P9e,"STRONG",{});var Egt=s(Sde);Dvo=r(Egt,"vilt"),Egt.forEach(t),Gvo=r(P9e," \u2014 "),$q=n(P9e,"A",{href:!0});var Cgt=s($q);Ovo=r(Cgt,"ViltFeatureExtractor"),Cgt.forEach(t),Vvo=r(P9e," (ViLT model)"),P9e.forEach(t),Xvo=i(K),fu=n(K,"LI",{});var B9e=s(fu);Rde=n(B9e,"STRONG",{});var wgt=s(Rde);zvo=r(wgt,"vit"),wgt.forEach(t),Qvo=r(B9e," \u2014 "),kq=n(B9e,"A",{href:!0});var Agt=s(kq);Wvo=r(Agt,"ViTFeatureExtractor"),Agt.forEach(t),Hvo=r(B9e," (ViT model)"),B9e.forEach(t),Uvo=i(K),gu=n(K,"LI",{});var N9e=s(gu);Pde=n(N9e,"STRONG",{});var Lgt=s(Pde);Jvo=r(Lgt,"vit_mae"),Lgt.forEach(t),Yvo=r(N9e," \u2014 "),Sq=n(N9e,"A",{href:!0});var ygt=s(Sq);Kvo=r(ygt,"ViTFeatureExtractor"),ygt.forEach(t),Zvo=r(N9e," (ViTMAE model)"),N9e.forEach(t),e1o=i(K),hu=n(K,"LI",{});var I9e=s(hu);Bde=n(I9e,"STRONG",{});var xgt=s(Bde);o1o=r(xgt,"wav2vec2"),xgt.forEach(t),r1o=r(I9e," \u2014 "),Rq=n(I9e,"A",{href:!0});var $gt=s(Rq);t1o=r($gt,"Wav2Vec2FeatureExtractor"),$gt.forEach(t),a1o=r(I9e," (Wav2Vec2 model)"),I9e.forEach(t),n1o=i(K),uu=n(K,"LI",{});var q9e=s(uu);Nde=n(q9e,"STRONG",{});var kgt=s(Nde);s1o=r(kgt,"wav2vec2-conformer"),kgt.forEach(t),l1o=r(q9e," \u2014 "),Pq=n(q9e,"A",{href:!0});var Sgt=s(Pq);i1o=r(Sgt,"Wav2Vec2FeatureExtractor"),Sgt.forEach(t),d1o=r(q9e," (Wav2Vec2-Conformer model)"),q9e.forEach(t),c1o=i(K),pu=n(K,"LI",{});var j9e=s(pu);Ide=n(j9e,"STRONG",{});var Rgt=s(Ide);m1o=r(Rgt,"yolos"),Rgt.forEach(t),f1o=r(j9e," \u2014 "),Bq=n(j9e,"A",{href:!0});var Pgt=s(Bq);g1o=r(Pgt,"YolosFeatureExtractor"),Pgt.forEach(t),h1o=r(j9e," (YOLOS model)"),j9e.forEach(t),K.forEach(t),u1o=i(na),T(_u.$$.fragment,na),p1o=i(na),T(bu.$$.fragment,na),na.forEach(t),_1o=i(ol),vu=n(ol,"DIV",{class:!0});var yQe=s(vu);T(Ly.$$.fragment,yQe),b1o=i(yQe),qde=n(yQe,"P",{});var Bgt=s(qde);v1o=r(Bgt,"Register a new feature extractor for this class."),Bgt.forEach(t),yQe.forEach(t),ol.forEach(t),wXe=i(m),Di=n(m,"H2",{class:!0});var xQe=s(Di);Fu=n(xQe,"A",{id:!0,class:!0,href:!0});var Ngt=s(Fu);jde=n(Ngt,"SPAN",{});var Igt=s(jde);T(yy.$$.fragment,Igt),Igt.forEach(t),Ngt.forEach(t),F1o=i(xQe),Dde=n(xQe,"SPAN",{});var qgt=s(Dde);T1o=r(qgt,"AutoProcessor"),qgt.forEach(t),xQe.forEach(t),AXe=i(m),xo=n(m,"DIV",{class:!0});var rl=s(xo);T(xy.$$.fragment,rl),M1o=i(rl),$y=n(rl,"P",{});var $Qe=s($y);E1o=r($Qe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Nq=n($Qe,"A",{href:!0});var jgt=s(Nq);C1o=r(jgt,"AutoProcessor.from_pretrained()"),jgt.forEach(t),w1o=r($Qe," class method."),$Qe.forEach(t),A1o=i(rl),ky=n(rl,"P",{});var kQe=s(ky);L1o=r(kQe,"This class cannot be instantiated directly using "),Gde=n(kQe,"CODE",{});var Dgt=s(Gde);y1o=r(Dgt,"__init__()"),Dgt.forEach(t),x1o=r(kQe," (throws an error)."),kQe.forEach(t),$1o=i(rl),Je=n(rl,"DIV",{class:!0});var sa=s(Je);T(Sy.$$.fragment,sa),k1o=i(sa),Ode=n(sa,"P",{});var Ggt=s(Ode);S1o=r(Ggt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Ggt.forEach(t),R1o=i(sa),Gi=n(sa,"P",{});var Dre=s(Gi);P1o=r(Dre,"The processor class to instantiate is selected based on the "),Vde=n(Dre,"CODE",{});var Ogt=s(Vde);B1o=r(Ogt,"model_type"),Ogt.forEach(t),N1o=r(Dre,` property of the config object (either
passed as an argument or loaded from `),Xde=n(Dre,"CODE",{});var Vgt=s(Xde);I1o=r(Vgt,"pretrained_model_name_or_path"),Vgt.forEach(t),q1o=r(Dre," if possible):"),Dre.forEach(t),j1o=i(sa),ue=n(sa,"UL",{});var be=s(ue);Tu=n(be,"LI",{});var D9e=s(Tu);zde=n(D9e,"STRONG",{});var Xgt=s(zde);D1o=r(Xgt,"clip"),Xgt.forEach(t),G1o=r(D9e," \u2014 "),Iq=n(D9e,"A",{href:!0});var zgt=s(Iq);O1o=r(zgt,"CLIPProcessor"),zgt.forEach(t),V1o=r(D9e," (CLIP model)"),D9e.forEach(t),X1o=i(be),Mu=n(be,"LI",{});var G9e=s(Mu);Qde=n(G9e,"STRONG",{});var Qgt=s(Qde);z1o=r(Qgt,"flava"),Qgt.forEach(t),Q1o=r(G9e," \u2014 "),Wde=n(G9e,"CODE",{});var Wgt=s(Wde);W1o=r(Wgt,"FLAVAProcessor"),Wgt.forEach(t),H1o=r(G9e," (FLAVA model)"),G9e.forEach(t),U1o=i(be),Eu=n(be,"LI",{});var O9e=s(Eu);Hde=n(O9e,"STRONG",{});var Hgt=s(Hde);J1o=r(Hgt,"groupvit"),Hgt.forEach(t),Y1o=r(O9e," \u2014 "),qq=n(O9e,"A",{href:!0});var Ugt=s(qq);K1o=r(Ugt,"CLIPProcessor"),Ugt.forEach(t),Z1o=r(O9e," (GroupViT model)"),O9e.forEach(t),eFo=i(be),Cu=n(be,"LI",{});var V9e=s(Cu);Ude=n(V9e,"STRONG",{});var Jgt=s(Ude);oFo=r(Jgt,"layoutlmv2"),Jgt.forEach(t),rFo=r(V9e," \u2014 "),jq=n(V9e,"A",{href:!0});var Ygt=s(jq);tFo=r(Ygt,"LayoutLMv2Processor"),Ygt.forEach(t),aFo=r(V9e," (LayoutLMv2 model)"),V9e.forEach(t),nFo=i(be),wu=n(be,"LI",{});var X9e=s(wu);Jde=n(X9e,"STRONG",{});var Kgt=s(Jde);sFo=r(Kgt,"layoutlmv3"),Kgt.forEach(t),lFo=r(X9e," \u2014 "),Dq=n(X9e,"A",{href:!0});var Zgt=s(Dq);iFo=r(Zgt,"LayoutLMv3Processor"),Zgt.forEach(t),dFo=r(X9e," (LayoutLMv3 model)"),X9e.forEach(t),cFo=i(be),Au=n(be,"LI",{});var z9e=s(Au);Yde=n(z9e,"STRONG",{});var eht=s(Yde);mFo=r(eht,"layoutxlm"),eht.forEach(t),fFo=r(z9e," \u2014 "),Gq=n(z9e,"A",{href:!0});var oht=s(Gq);gFo=r(oht,"LayoutXLMProcessor"),oht.forEach(t),hFo=r(z9e," (LayoutXLM model)"),z9e.forEach(t),uFo=i(be),Lu=n(be,"LI",{});var Q9e=s(Lu);Kde=n(Q9e,"STRONG",{});var rht=s(Kde);pFo=r(rht,"sew"),rht.forEach(t),_Fo=r(Q9e," \u2014 "),Oq=n(Q9e,"A",{href:!0});var tht=s(Oq);bFo=r(tht,"Wav2Vec2Processor"),tht.forEach(t),vFo=r(Q9e," (SEW model)"),Q9e.forEach(t),FFo=i(be),yu=n(be,"LI",{});var W9e=s(yu);Zde=n(W9e,"STRONG",{});var aht=s(Zde);TFo=r(aht,"sew-d"),aht.forEach(t),MFo=r(W9e," \u2014 "),Vq=n(W9e,"A",{href:!0});var nht=s(Vq);EFo=r(nht,"Wav2Vec2Processor"),nht.forEach(t),CFo=r(W9e," (SEW-D model)"),W9e.forEach(t),wFo=i(be),xu=n(be,"LI",{});var H9e=s(xu);ece=n(H9e,"STRONG",{});var sht=s(ece);AFo=r(sht,"speech_to_text"),sht.forEach(t),LFo=r(H9e," \u2014 "),Xq=n(H9e,"A",{href:!0});var lht=s(Xq);yFo=r(lht,"Speech2TextProcessor"),lht.forEach(t),xFo=r(H9e," (Speech2Text model)"),H9e.forEach(t),$Fo=i(be),$u=n(be,"LI",{});var U9e=s($u);oce=n(U9e,"STRONG",{});var iht=s(oce);kFo=r(iht,"speech_to_text_2"),iht.forEach(t),SFo=r(U9e," \u2014 "),zq=n(U9e,"A",{href:!0});var dht=s(zq);RFo=r(dht,"Speech2Text2Processor"),dht.forEach(t),PFo=r(U9e," (Speech2Text2 model)"),U9e.forEach(t),BFo=i(be),ku=n(be,"LI",{});var J9e=s(ku);rce=n(J9e,"STRONG",{});var cht=s(rce);NFo=r(cht,"trocr"),cht.forEach(t),IFo=r(J9e," \u2014 "),Qq=n(J9e,"A",{href:!0});var mht=s(Qq);qFo=r(mht,"TrOCRProcessor"),mht.forEach(t),jFo=r(J9e," (TrOCR model)"),J9e.forEach(t),DFo=i(be),Su=n(be,"LI",{});var Y9e=s(Su);tce=n(Y9e,"STRONG",{});var fht=s(tce);GFo=r(fht,"unispeech"),fht.forEach(t),OFo=r(Y9e," \u2014 "),Wq=n(Y9e,"A",{href:!0});var ght=s(Wq);VFo=r(ght,"Wav2Vec2Processor"),ght.forEach(t),XFo=r(Y9e," (UniSpeech model)"),Y9e.forEach(t),zFo=i(be),Ru=n(be,"LI",{});var K9e=s(Ru);ace=n(K9e,"STRONG",{});var hht=s(ace);QFo=r(hht,"unispeech-sat"),hht.forEach(t),WFo=r(K9e," \u2014 "),Hq=n(K9e,"A",{href:!0});var uht=s(Hq);HFo=r(uht,"Wav2Vec2Processor"),uht.forEach(t),UFo=r(K9e," (UniSpeechSat model)"),K9e.forEach(t),JFo=i(be),Pu=n(be,"LI",{});var Z9e=s(Pu);nce=n(Z9e,"STRONG",{});var pht=s(nce);YFo=r(pht,"vilt"),pht.forEach(t),KFo=r(Z9e," \u2014 "),Uq=n(Z9e,"A",{href:!0});var _ht=s(Uq);ZFo=r(_ht,"ViltProcessor"),_ht.forEach(t),eTo=r(Z9e," (ViLT model)"),Z9e.forEach(t),oTo=i(be),Bu=n(be,"LI",{});var exe=s(Bu);sce=n(exe,"STRONG",{});var bht=s(sce);rTo=r(bht,"vision-text-dual-encoder"),bht.forEach(t),tTo=r(exe," \u2014 "),Jq=n(exe,"A",{href:!0});var vht=s(Jq);aTo=r(vht,"VisionTextDualEncoderProcessor"),vht.forEach(t),nTo=r(exe," (VisionTextDualEncoder model)"),exe.forEach(t),sTo=i(be),Nu=n(be,"LI",{});var oxe=s(Nu);lce=n(oxe,"STRONG",{});var Fht=s(lce);lTo=r(Fht,"wav2vec2"),Fht.forEach(t),iTo=r(oxe," \u2014 "),Yq=n(oxe,"A",{href:!0});var Tht=s(Yq);dTo=r(Tht,"Wav2Vec2Processor"),Tht.forEach(t),cTo=r(oxe," (Wav2Vec2 model)"),oxe.forEach(t),mTo=i(be),Iu=n(be,"LI",{});var rxe=s(Iu);ice=n(rxe,"STRONG",{});var Mht=s(ice);fTo=r(Mht,"wav2vec2-conformer"),Mht.forEach(t),gTo=r(rxe," \u2014 "),Kq=n(rxe,"A",{href:!0});var Eht=s(Kq);hTo=r(Eht,"Wav2Vec2Processor"),Eht.forEach(t),uTo=r(rxe," (Wav2Vec2-Conformer model)"),rxe.forEach(t),pTo=i(be),qu=n(be,"LI",{});var txe=s(qu);dce=n(txe,"STRONG",{});var Cht=s(dce);_To=r(Cht,"wavlm"),Cht.forEach(t),bTo=r(txe," \u2014 "),Zq=n(txe,"A",{href:!0});var wht=s(Zq);vTo=r(wht,"Wav2Vec2Processor"),wht.forEach(t),FTo=r(txe," (WavLM model)"),txe.forEach(t),be.forEach(t),TTo=i(sa),T(ju.$$.fragment,sa),MTo=i(sa),T(Du.$$.fragment,sa),sa.forEach(t),ETo=i(rl),Gu=n(rl,"DIV",{class:!0});var SQe=s(Gu);T(Ry.$$.fragment,SQe),CTo=i(SQe),cce=n(SQe,"P",{});var Aht=s(cce);wTo=r(Aht,"Register a new processor for this class."),Aht.forEach(t),SQe.forEach(t),rl.forEach(t),LXe=i(m),Oi=n(m,"H2",{class:!0});var RQe=s(Oi);Ou=n(RQe,"A",{id:!0,class:!0,href:!0});var Lht=s(Ou);mce=n(Lht,"SPAN",{});var yht=s(mce);T(Py.$$.fragment,yht),yht.forEach(t),Lht.forEach(t),ATo=i(RQe),fce=n(RQe,"SPAN",{});var xht=s(fce);LTo=r(xht,"AutoModel"),xht.forEach(t),RQe.forEach(t),yXe=i(m),$o=n(m,"DIV",{class:!0});var tl=s($o);T(By.$$.fragment,tl),yTo=i(tl),Vi=n(tl,"P",{});var Gre=s(Vi);xTo=r(Gre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ej=n(Gre,"A",{href:!0});var $ht=s(ej);$To=r($ht,"from_pretrained()"),$ht.forEach(t),kTo=r(Gre," class method or the "),oj=n(Gre,"A",{href:!0});var kht=s(oj);STo=r(kht,"from_config()"),kht.forEach(t),RTo=r(Gre,` class
method.`),Gre.forEach(t),PTo=i(tl),Ny=n(tl,"P",{});var PQe=s(Ny);BTo=r(PQe,"This class cannot be instantiated directly using "),gce=n(PQe,"CODE",{});var Sht=s(gce);NTo=r(Sht,"__init__()"),Sht.forEach(t),ITo=r(PQe," (throws an error)."),PQe.forEach(t),qTo=i(tl),it=n(tl,"DIV",{class:!0});var f7=s(it);T(Iy.$$.fragment,f7),jTo=i(f7),hce=n(f7,"P",{});var Rht=s(hce);DTo=r(Rht,"Instantiates one of the base model classes of the library from a configuration."),Rht.forEach(t),GTo=i(f7),Xi=n(f7,"P",{});var Ore=s(Xi);OTo=r(Ore,`Note:
Loading a model from its configuration file does `),uce=n(Ore,"STRONG",{});var Pht=s(uce);VTo=r(Pht,"not"),Pht.forEach(t),XTo=r(Ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),rj=n(Ore,"A",{href:!0});var Bht=s(rj);zTo=r(Bht,"from_pretrained()"),Bht.forEach(t),QTo=r(Ore," to load the model weights."),Ore.forEach(t),WTo=i(f7),T(Vu.$$.fragment,f7),f7.forEach(t),HTo=i(tl),Ye=n(tl,"DIV",{class:!0});var la=s(Ye);T(qy.$$.fragment,la),UTo=i(la),pce=n(la,"P",{});var Nht=s(pce);JTo=r(Nht,"Instantiate one of the base model classes of the library from a pretrained model."),Nht.forEach(t),YTo=i(la),Na=n(la,"P",{});var g7=s(Na);KTo=r(g7,"The model class to instantiate is selected based on the "),_ce=n(g7,"CODE",{});var Iht=s(_ce);ZTo=r(Iht,"model_type"),Iht.forEach(t),eMo=r(g7,` property of the config object (either
passed as an argument or loaded from `),bce=n(g7,"CODE",{});var qht=s(bce);oMo=r(qht,"pretrained_model_name_or_path"),qht.forEach(t),rMo=r(g7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vce=n(g7,"CODE",{});var jht=s(vce);tMo=r(jht,"pretrained_model_name_or_path"),jht.forEach(t),aMo=r(g7,":"),g7.forEach(t),nMo=i(la),y=n(la,"UL",{});var x=s(y);Xu=n(x,"LI",{});var axe=s(Xu);Fce=n(axe,"STRONG",{});var Dht=s(Fce);sMo=r(Dht,"albert"),Dht.forEach(t),lMo=r(axe," \u2014 "),tj=n(axe,"A",{href:!0});var Ght=s(tj);iMo=r(Ght,"AlbertModel"),Ght.forEach(t),dMo=r(axe," (ALBERT model)"),axe.forEach(t),cMo=i(x),zu=n(x,"LI",{});var nxe=s(zu);Tce=n(nxe,"STRONG",{});var Oht=s(Tce);mMo=r(Oht,"bart"),Oht.forEach(t),fMo=r(nxe," \u2014 "),aj=n(nxe,"A",{href:!0});var Vht=s(aj);gMo=r(Vht,"BartModel"),Vht.forEach(t),hMo=r(nxe," (BART model)"),nxe.forEach(t),uMo=i(x),Qu=n(x,"LI",{});var sxe=s(Qu);Mce=n(sxe,"STRONG",{});var Xht=s(Mce);pMo=r(Xht,"beit"),Xht.forEach(t),_Mo=r(sxe," \u2014 "),nj=n(sxe,"A",{href:!0});var zht=s(nj);bMo=r(zht,"BeitModel"),zht.forEach(t),vMo=r(sxe," (BEiT model)"),sxe.forEach(t),FMo=i(x),Wu=n(x,"LI",{});var lxe=s(Wu);Ece=n(lxe,"STRONG",{});var Qht=s(Ece);TMo=r(Qht,"bert"),Qht.forEach(t),MMo=r(lxe," \u2014 "),sj=n(lxe,"A",{href:!0});var Wht=s(sj);EMo=r(Wht,"BertModel"),Wht.forEach(t),CMo=r(lxe," (BERT model)"),lxe.forEach(t),wMo=i(x),Hu=n(x,"LI",{});var ixe=s(Hu);Cce=n(ixe,"STRONG",{});var Hht=s(Cce);AMo=r(Hht,"bert-generation"),Hht.forEach(t),LMo=r(ixe," \u2014 "),lj=n(ixe,"A",{href:!0});var Uht=s(lj);yMo=r(Uht,"BertGenerationEncoder"),Uht.forEach(t),xMo=r(ixe," (Bert Generation model)"),ixe.forEach(t),$Mo=i(x),Uu=n(x,"LI",{});var dxe=s(Uu);wce=n(dxe,"STRONG",{});var Jht=s(wce);kMo=r(Jht,"big_bird"),Jht.forEach(t),SMo=r(dxe," \u2014 "),ij=n(dxe,"A",{href:!0});var Yht=s(ij);RMo=r(Yht,"BigBirdModel"),Yht.forEach(t),PMo=r(dxe," (BigBird model)"),dxe.forEach(t),BMo=i(x),Ju=n(x,"LI",{});var cxe=s(Ju);Ace=n(cxe,"STRONG",{});var Kht=s(Ace);NMo=r(Kht,"bigbird_pegasus"),Kht.forEach(t),IMo=r(cxe," \u2014 "),dj=n(cxe,"A",{href:!0});var Zht=s(dj);qMo=r(Zht,"BigBirdPegasusModel"),Zht.forEach(t),jMo=r(cxe," (BigBird-Pegasus model)"),cxe.forEach(t),DMo=i(x),Yu=n(x,"LI",{});var mxe=s(Yu);Lce=n(mxe,"STRONG",{});var eut=s(Lce);GMo=r(eut,"blenderbot"),eut.forEach(t),OMo=r(mxe," \u2014 "),cj=n(mxe,"A",{href:!0});var out=s(cj);VMo=r(out,"BlenderbotModel"),out.forEach(t),XMo=r(mxe," (Blenderbot model)"),mxe.forEach(t),zMo=i(x),Ku=n(x,"LI",{});var fxe=s(Ku);yce=n(fxe,"STRONG",{});var rut=s(yce);QMo=r(rut,"blenderbot-small"),rut.forEach(t),WMo=r(fxe," \u2014 "),mj=n(fxe,"A",{href:!0});var tut=s(mj);HMo=r(tut,"BlenderbotSmallModel"),tut.forEach(t),UMo=r(fxe," (BlenderbotSmall model)"),fxe.forEach(t),JMo=i(x),Zu=n(x,"LI",{});var gxe=s(Zu);xce=n(gxe,"STRONG",{});var aut=s(xce);YMo=r(aut,"bloom"),aut.forEach(t),KMo=r(gxe," \u2014 "),fj=n(gxe,"A",{href:!0});var nut=s(fj);ZMo=r(nut,"BloomModel"),nut.forEach(t),e4o=r(gxe," (BLOOM model)"),gxe.forEach(t),o4o=i(x),ep=n(x,"LI",{});var hxe=s(ep);$ce=n(hxe,"STRONG",{});var sut=s($ce);r4o=r(sut,"camembert"),sut.forEach(t),t4o=r(hxe," \u2014 "),gj=n(hxe,"A",{href:!0});var lut=s(gj);a4o=r(lut,"CamembertModel"),lut.forEach(t),n4o=r(hxe," (CamemBERT model)"),hxe.forEach(t),s4o=i(x),op=n(x,"LI",{});var uxe=s(op);kce=n(uxe,"STRONG",{});var iut=s(kce);l4o=r(iut,"canine"),iut.forEach(t),i4o=r(uxe," \u2014 "),hj=n(uxe,"A",{href:!0});var dut=s(hj);d4o=r(dut,"CanineModel"),dut.forEach(t),c4o=r(uxe," (CANINE model)"),uxe.forEach(t),m4o=i(x),rp=n(x,"LI",{});var pxe=s(rp);Sce=n(pxe,"STRONG",{});var cut=s(Sce);f4o=r(cut,"clip"),cut.forEach(t),g4o=r(pxe," \u2014 "),uj=n(pxe,"A",{href:!0});var mut=s(uj);h4o=r(mut,"CLIPModel"),mut.forEach(t),u4o=r(pxe," (CLIP model)"),pxe.forEach(t),p4o=i(x),tp=n(x,"LI",{});var _xe=s(tp);Rce=n(_xe,"STRONG",{});var fut=s(Rce);_4o=r(fut,"codegen"),fut.forEach(t),b4o=r(_xe," \u2014 "),pj=n(_xe,"A",{href:!0});var gut=s(pj);v4o=r(gut,"CodeGenModel"),gut.forEach(t),F4o=r(_xe," (CodeGen model)"),_xe.forEach(t),T4o=i(x),ap=n(x,"LI",{});var bxe=s(ap);Pce=n(bxe,"STRONG",{});var hut=s(Pce);M4o=r(hut,"convbert"),hut.forEach(t),E4o=r(bxe," \u2014 "),_j=n(bxe,"A",{href:!0});var uut=s(_j);C4o=r(uut,"ConvBertModel"),uut.forEach(t),w4o=r(bxe," (ConvBERT model)"),bxe.forEach(t),A4o=i(x),np=n(x,"LI",{});var vxe=s(np);Bce=n(vxe,"STRONG",{});var put=s(Bce);L4o=r(put,"convnext"),put.forEach(t),y4o=r(vxe," \u2014 "),bj=n(vxe,"A",{href:!0});var _ut=s(bj);x4o=r(_ut,"ConvNextModel"),_ut.forEach(t),$4o=r(vxe," (ConvNeXT model)"),vxe.forEach(t),k4o=i(x),sp=n(x,"LI",{});var Fxe=s(sp);Nce=n(Fxe,"STRONG",{});var but=s(Nce);S4o=r(but,"ctrl"),but.forEach(t),R4o=r(Fxe," \u2014 "),vj=n(Fxe,"A",{href:!0});var vut=s(vj);P4o=r(vut,"CTRLModel"),vut.forEach(t),B4o=r(Fxe," (CTRL model)"),Fxe.forEach(t),N4o=i(x),lp=n(x,"LI",{});var Txe=s(lp);Ice=n(Txe,"STRONG",{});var Fut=s(Ice);I4o=r(Fut,"cvt"),Fut.forEach(t),q4o=r(Txe," \u2014 "),Fj=n(Txe,"A",{href:!0});var Tut=s(Fj);j4o=r(Tut,"CvtModel"),Tut.forEach(t),D4o=r(Txe," (CvT model)"),Txe.forEach(t),G4o=i(x),ip=n(x,"LI",{});var Mxe=s(ip);qce=n(Mxe,"STRONG",{});var Mut=s(qce);O4o=r(Mut,"data2vec-audio"),Mut.forEach(t),V4o=r(Mxe," \u2014 "),Tj=n(Mxe,"A",{href:!0});var Eut=s(Tj);X4o=r(Eut,"Data2VecAudioModel"),Eut.forEach(t),z4o=r(Mxe," (Data2VecAudio model)"),Mxe.forEach(t),Q4o=i(x),dp=n(x,"LI",{});var Exe=s(dp);jce=n(Exe,"STRONG",{});var Cut=s(jce);W4o=r(Cut,"data2vec-text"),Cut.forEach(t),H4o=r(Exe," \u2014 "),Mj=n(Exe,"A",{href:!0});var wut=s(Mj);U4o=r(wut,"Data2VecTextModel"),wut.forEach(t),J4o=r(Exe," (Data2VecText model)"),Exe.forEach(t),Y4o=i(x),cp=n(x,"LI",{});var Cxe=s(cp);Dce=n(Cxe,"STRONG",{});var Aut=s(Dce);K4o=r(Aut,"data2vec-vision"),Aut.forEach(t),Z4o=r(Cxe," \u2014 "),Ej=n(Cxe,"A",{href:!0});var Lut=s(Ej);eEo=r(Lut,"Data2VecVisionModel"),Lut.forEach(t),oEo=r(Cxe," (Data2VecVision model)"),Cxe.forEach(t),rEo=i(x),mp=n(x,"LI",{});var wxe=s(mp);Gce=n(wxe,"STRONG",{});var yut=s(Gce);tEo=r(yut,"deberta"),yut.forEach(t),aEo=r(wxe," \u2014 "),Cj=n(wxe,"A",{href:!0});var xut=s(Cj);nEo=r(xut,"DebertaModel"),xut.forEach(t),sEo=r(wxe," (DeBERTa model)"),wxe.forEach(t),lEo=i(x),fp=n(x,"LI",{});var Axe=s(fp);Oce=n(Axe,"STRONG",{});var $ut=s(Oce);iEo=r($ut,"deberta-v2"),$ut.forEach(t),dEo=r(Axe," \u2014 "),wj=n(Axe,"A",{href:!0});var kut=s(wj);cEo=r(kut,"DebertaV2Model"),kut.forEach(t),mEo=r(Axe," (DeBERTa-v2 model)"),Axe.forEach(t),fEo=i(x),gp=n(x,"LI",{});var Lxe=s(gp);Vce=n(Lxe,"STRONG",{});var Sut=s(Vce);gEo=r(Sut,"decision_transformer"),Sut.forEach(t),hEo=r(Lxe," \u2014 "),Aj=n(Lxe,"A",{href:!0});var Rut=s(Aj);uEo=r(Rut,"DecisionTransformerModel"),Rut.forEach(t),pEo=r(Lxe," (Decision Transformer model)"),Lxe.forEach(t),_Eo=i(x),hp=n(x,"LI",{});var yxe=s(hp);Xce=n(yxe,"STRONG",{});var Put=s(Xce);bEo=r(Put,"deit"),Put.forEach(t),vEo=r(yxe," \u2014 "),Lj=n(yxe,"A",{href:!0});var But=s(Lj);FEo=r(But,"DeiTModel"),But.forEach(t),TEo=r(yxe," (DeiT model)"),yxe.forEach(t),MEo=i(x),up=n(x,"LI",{});var xxe=s(up);zce=n(xxe,"STRONG",{});var Nut=s(zce);EEo=r(Nut,"detr"),Nut.forEach(t),CEo=r(xxe," \u2014 "),yj=n(xxe,"A",{href:!0});var Iut=s(yj);wEo=r(Iut,"DetrModel"),Iut.forEach(t),AEo=r(xxe," (DETR model)"),xxe.forEach(t),LEo=i(x),pp=n(x,"LI",{});var $xe=s(pp);Qce=n($xe,"STRONG",{});var qut=s(Qce);yEo=r(qut,"distilbert"),qut.forEach(t),xEo=r($xe," \u2014 "),xj=n($xe,"A",{href:!0});var jut=s(xj);$Eo=r(jut,"DistilBertModel"),jut.forEach(t),kEo=r($xe," (DistilBERT model)"),$xe.forEach(t),SEo=i(x),_p=n(x,"LI",{});var kxe=s(_p);Wce=n(kxe,"STRONG",{});var Dut=s(Wce);REo=r(Dut,"dpr"),Dut.forEach(t),PEo=r(kxe," \u2014 "),$j=n(kxe,"A",{href:!0});var Gut=s($j);BEo=r(Gut,"DPRQuestionEncoder"),Gut.forEach(t),NEo=r(kxe," (DPR model)"),kxe.forEach(t),IEo=i(x),bp=n(x,"LI",{});var Sxe=s(bp);Hce=n(Sxe,"STRONG",{});var Out=s(Hce);qEo=r(Out,"dpt"),Out.forEach(t),jEo=r(Sxe," \u2014 "),kj=n(Sxe,"A",{href:!0});var Vut=s(kj);DEo=r(Vut,"DPTModel"),Vut.forEach(t),GEo=r(Sxe," (DPT model)"),Sxe.forEach(t),OEo=i(x),vp=n(x,"LI",{});var Rxe=s(vp);Uce=n(Rxe,"STRONG",{});var Xut=s(Uce);VEo=r(Xut,"electra"),Xut.forEach(t),XEo=r(Rxe," \u2014 "),Sj=n(Rxe,"A",{href:!0});var zut=s(Sj);zEo=r(zut,"ElectraModel"),zut.forEach(t),QEo=r(Rxe," (ELECTRA model)"),Rxe.forEach(t),WEo=i(x),Fp=n(x,"LI",{});var Pxe=s(Fp);Jce=n(Pxe,"STRONG",{});var Qut=s(Jce);HEo=r(Qut,"flaubert"),Qut.forEach(t),UEo=r(Pxe," \u2014 "),Rj=n(Pxe,"A",{href:!0});var Wut=s(Rj);JEo=r(Wut,"FlaubertModel"),Wut.forEach(t),YEo=r(Pxe," (FlauBERT model)"),Pxe.forEach(t),KEo=i(x),Tp=n(x,"LI",{});var Bxe=s(Tp);Yce=n(Bxe,"STRONG",{});var Hut=s(Yce);ZEo=r(Hut,"flava"),Hut.forEach(t),eCo=r(Bxe," \u2014 "),Pj=n(Bxe,"A",{href:!0});var Uut=s(Pj);oCo=r(Uut,"FlavaModel"),Uut.forEach(t),rCo=r(Bxe," (FLAVA model)"),Bxe.forEach(t),tCo=i(x),Mp=n(x,"LI",{});var Nxe=s(Mp);Kce=n(Nxe,"STRONG",{});var Jut=s(Kce);aCo=r(Jut,"fnet"),Jut.forEach(t),nCo=r(Nxe," \u2014 "),Bj=n(Nxe,"A",{href:!0});var Yut=s(Bj);sCo=r(Yut,"FNetModel"),Yut.forEach(t),lCo=r(Nxe," (FNet model)"),Nxe.forEach(t),iCo=i(x),Ep=n(x,"LI",{});var Ixe=s(Ep);Zce=n(Ixe,"STRONG",{});var Kut=s(Zce);dCo=r(Kut,"fsmt"),Kut.forEach(t),cCo=r(Ixe," \u2014 "),Nj=n(Ixe,"A",{href:!0});var Zut=s(Nj);mCo=r(Zut,"FSMTModel"),Zut.forEach(t),fCo=r(Ixe," (FairSeq Machine-Translation model)"),Ixe.forEach(t),gCo=i(x),Hs=n(x,"LI",{});var BS=s(Hs);eme=n(BS,"STRONG",{});var ept=s(eme);hCo=r(ept,"funnel"),ept.forEach(t),uCo=r(BS," \u2014 "),Ij=n(BS,"A",{href:!0});var opt=s(Ij);pCo=r(opt,"FunnelModel"),opt.forEach(t),_Co=r(BS," or "),qj=n(BS,"A",{href:!0});var rpt=s(qj);bCo=r(rpt,"FunnelBaseModel"),rpt.forEach(t),vCo=r(BS," (Funnel Transformer model)"),BS.forEach(t),FCo=i(x),Cp=n(x,"LI",{});var qxe=s(Cp);ome=n(qxe,"STRONG",{});var tpt=s(ome);TCo=r(tpt,"glpn"),tpt.forEach(t),MCo=r(qxe," \u2014 "),jj=n(qxe,"A",{href:!0});var apt=s(jj);ECo=r(apt,"GLPNModel"),apt.forEach(t),CCo=r(qxe," (GLPN model)"),qxe.forEach(t),wCo=i(x),wp=n(x,"LI",{});var jxe=s(wp);rme=n(jxe,"STRONG",{});var npt=s(rme);ACo=r(npt,"gpt2"),npt.forEach(t),LCo=r(jxe," \u2014 "),Dj=n(jxe,"A",{href:!0});var spt=s(Dj);yCo=r(spt,"GPT2Model"),spt.forEach(t),xCo=r(jxe," (OpenAI GPT-2 model)"),jxe.forEach(t),$Co=i(x),Ap=n(x,"LI",{});var Dxe=s(Ap);tme=n(Dxe,"STRONG",{});var lpt=s(tme);kCo=r(lpt,"gpt_neo"),lpt.forEach(t),SCo=r(Dxe," \u2014 "),Gj=n(Dxe,"A",{href:!0});var ipt=s(Gj);RCo=r(ipt,"GPTNeoModel"),ipt.forEach(t),PCo=r(Dxe," (GPT Neo model)"),Dxe.forEach(t),BCo=i(x),Lp=n(x,"LI",{});var Gxe=s(Lp);ame=n(Gxe,"STRONG",{});var dpt=s(ame);NCo=r(dpt,"gpt_neox"),dpt.forEach(t),ICo=r(Gxe," \u2014 "),Oj=n(Gxe,"A",{href:!0});var cpt=s(Oj);qCo=r(cpt,"GPTNeoXModel"),cpt.forEach(t),jCo=r(Gxe," (GPT NeoX model)"),Gxe.forEach(t),DCo=i(x),yp=n(x,"LI",{});var Oxe=s(yp);nme=n(Oxe,"STRONG",{});var mpt=s(nme);GCo=r(mpt,"gptj"),mpt.forEach(t),OCo=r(Oxe," \u2014 "),Vj=n(Oxe,"A",{href:!0});var fpt=s(Vj);VCo=r(fpt,"GPTJModel"),fpt.forEach(t),XCo=r(Oxe," (GPT-J model)"),Oxe.forEach(t),zCo=i(x),xp=n(x,"LI",{});var Vxe=s(xp);sme=n(Vxe,"STRONG",{});var gpt=s(sme);QCo=r(gpt,"groupvit"),gpt.forEach(t),WCo=r(Vxe," \u2014 "),Xj=n(Vxe,"A",{href:!0});var hpt=s(Xj);HCo=r(hpt,"GroupViTModel"),hpt.forEach(t),UCo=r(Vxe," (GroupViT model)"),Vxe.forEach(t),JCo=i(x),$p=n(x,"LI",{});var Xxe=s($p);lme=n(Xxe,"STRONG",{});var upt=s(lme);YCo=r(upt,"hubert"),upt.forEach(t),KCo=r(Xxe," \u2014 "),zj=n(Xxe,"A",{href:!0});var ppt=s(zj);ZCo=r(ppt,"HubertModel"),ppt.forEach(t),e3o=r(Xxe," (Hubert model)"),Xxe.forEach(t),o3o=i(x),kp=n(x,"LI",{});var zxe=s(kp);ime=n(zxe,"STRONG",{});var _pt=s(ime);r3o=r(_pt,"ibert"),_pt.forEach(t),t3o=r(zxe," \u2014 "),Qj=n(zxe,"A",{href:!0});var bpt=s(Qj);a3o=r(bpt,"IBertModel"),bpt.forEach(t),n3o=r(zxe," (I-BERT model)"),zxe.forEach(t),s3o=i(x),Sp=n(x,"LI",{});var Qxe=s(Sp);dme=n(Qxe,"STRONG",{});var vpt=s(dme);l3o=r(vpt,"imagegpt"),vpt.forEach(t),i3o=r(Qxe," \u2014 "),Wj=n(Qxe,"A",{href:!0});var Fpt=s(Wj);d3o=r(Fpt,"ImageGPTModel"),Fpt.forEach(t),c3o=r(Qxe," (ImageGPT model)"),Qxe.forEach(t),m3o=i(x),Rp=n(x,"LI",{});var Wxe=s(Rp);cme=n(Wxe,"STRONG",{});var Tpt=s(cme);f3o=r(Tpt,"layoutlm"),Tpt.forEach(t),g3o=r(Wxe," \u2014 "),Hj=n(Wxe,"A",{href:!0});var Mpt=s(Hj);h3o=r(Mpt,"LayoutLMModel"),Mpt.forEach(t),u3o=r(Wxe," (LayoutLM model)"),Wxe.forEach(t),p3o=i(x),Pp=n(x,"LI",{});var Hxe=s(Pp);mme=n(Hxe,"STRONG",{});var Ept=s(mme);_3o=r(Ept,"layoutlmv2"),Ept.forEach(t),b3o=r(Hxe," \u2014 "),Uj=n(Hxe,"A",{href:!0});var Cpt=s(Uj);v3o=r(Cpt,"LayoutLMv2Model"),Cpt.forEach(t),F3o=r(Hxe," (LayoutLMv2 model)"),Hxe.forEach(t),T3o=i(x),Bp=n(x,"LI",{});var Uxe=s(Bp);fme=n(Uxe,"STRONG",{});var wpt=s(fme);M3o=r(wpt,"layoutlmv3"),wpt.forEach(t),E3o=r(Uxe," \u2014 "),Jj=n(Uxe,"A",{href:!0});var Apt=s(Jj);C3o=r(Apt,"LayoutLMv3Model"),Apt.forEach(t),w3o=r(Uxe," (LayoutLMv3 model)"),Uxe.forEach(t),A3o=i(x),Np=n(x,"LI",{});var Jxe=s(Np);gme=n(Jxe,"STRONG",{});var Lpt=s(gme);L3o=r(Lpt,"led"),Lpt.forEach(t),y3o=r(Jxe," \u2014 "),Yj=n(Jxe,"A",{href:!0});var ypt=s(Yj);x3o=r(ypt,"LEDModel"),ypt.forEach(t),$3o=r(Jxe," (LED model)"),Jxe.forEach(t),k3o=i(x),Ip=n(x,"LI",{});var Yxe=s(Ip);hme=n(Yxe,"STRONG",{});var xpt=s(hme);S3o=r(xpt,"levit"),xpt.forEach(t),R3o=r(Yxe," \u2014 "),Kj=n(Yxe,"A",{href:!0});var $pt=s(Kj);P3o=r($pt,"LevitModel"),$pt.forEach(t),B3o=r(Yxe," (LeViT model)"),Yxe.forEach(t),N3o=i(x),qp=n(x,"LI",{});var Kxe=s(qp);ume=n(Kxe,"STRONG",{});var kpt=s(ume);I3o=r(kpt,"longformer"),kpt.forEach(t),q3o=r(Kxe," \u2014 "),Zj=n(Kxe,"A",{href:!0});var Spt=s(Zj);j3o=r(Spt,"LongformerModel"),Spt.forEach(t),D3o=r(Kxe," (Longformer model)"),Kxe.forEach(t),G3o=i(x),jp=n(x,"LI",{});var Zxe=s(jp);pme=n(Zxe,"STRONG",{});var Rpt=s(pme);O3o=r(Rpt,"longt5"),Rpt.forEach(t),V3o=r(Zxe," \u2014 "),eD=n(Zxe,"A",{href:!0});var Ppt=s(eD);X3o=r(Ppt,"LongT5Model"),Ppt.forEach(t),z3o=r(Zxe," (LongT5 model)"),Zxe.forEach(t),Q3o=i(x),Dp=n(x,"LI",{});var e$e=s(Dp);_me=n(e$e,"STRONG",{});var Bpt=s(_me);W3o=r(Bpt,"luke"),Bpt.forEach(t),H3o=r(e$e," \u2014 "),oD=n(e$e,"A",{href:!0});var Npt=s(oD);U3o=r(Npt,"LukeModel"),Npt.forEach(t),J3o=r(e$e," (LUKE model)"),e$e.forEach(t),Y3o=i(x),Gp=n(x,"LI",{});var o$e=s(Gp);bme=n(o$e,"STRONG",{});var Ipt=s(bme);K3o=r(Ipt,"lxmert"),Ipt.forEach(t),Z3o=r(o$e," \u2014 "),rD=n(o$e,"A",{href:!0});var qpt=s(rD);e5o=r(qpt,"LxmertModel"),qpt.forEach(t),o5o=r(o$e," (LXMERT model)"),o$e.forEach(t),r5o=i(x),Op=n(x,"LI",{});var r$e=s(Op);vme=n(r$e,"STRONG",{});var jpt=s(vme);t5o=r(jpt,"m2m_100"),jpt.forEach(t),a5o=r(r$e," \u2014 "),tD=n(r$e,"A",{href:!0});var Dpt=s(tD);n5o=r(Dpt,"M2M100Model"),Dpt.forEach(t),s5o=r(r$e," (M2M100 model)"),r$e.forEach(t),l5o=i(x),Vp=n(x,"LI",{});var t$e=s(Vp);Fme=n(t$e,"STRONG",{});var Gpt=s(Fme);i5o=r(Gpt,"marian"),Gpt.forEach(t),d5o=r(t$e," \u2014 "),aD=n(t$e,"A",{href:!0});var Opt=s(aD);c5o=r(Opt,"MarianModel"),Opt.forEach(t),m5o=r(t$e," (Marian model)"),t$e.forEach(t),f5o=i(x),Xp=n(x,"LI",{});var a$e=s(Xp);Tme=n(a$e,"STRONG",{});var Vpt=s(Tme);g5o=r(Vpt,"maskformer"),Vpt.forEach(t),h5o=r(a$e," \u2014 "),nD=n(a$e,"A",{href:!0});var Xpt=s(nD);u5o=r(Xpt,"MaskFormerModel"),Xpt.forEach(t),p5o=r(a$e," (MaskFormer model)"),a$e.forEach(t),_5o=i(x),zp=n(x,"LI",{});var n$e=s(zp);Mme=n(n$e,"STRONG",{});var zpt=s(Mme);b5o=r(zpt,"mbart"),zpt.forEach(t),v5o=r(n$e," \u2014 "),sD=n(n$e,"A",{href:!0});var Qpt=s(sD);F5o=r(Qpt,"MBartModel"),Qpt.forEach(t),T5o=r(n$e," (mBART model)"),n$e.forEach(t),M5o=i(x),Qp=n(x,"LI",{});var s$e=s(Qp);Eme=n(s$e,"STRONG",{});var Wpt=s(Eme);E5o=r(Wpt,"mctct"),Wpt.forEach(t),C5o=r(s$e," \u2014 "),lD=n(s$e,"A",{href:!0});var Hpt=s(lD);w5o=r(Hpt,"MCTCTModel"),Hpt.forEach(t),A5o=r(s$e," (M-CTC-T model)"),s$e.forEach(t),L5o=i(x),Wp=n(x,"LI",{});var l$e=s(Wp);Cme=n(l$e,"STRONG",{});var Upt=s(Cme);y5o=r(Upt,"megatron-bert"),Upt.forEach(t),x5o=r(l$e," \u2014 "),iD=n(l$e,"A",{href:!0});var Jpt=s(iD);$5o=r(Jpt,"MegatronBertModel"),Jpt.forEach(t),k5o=r(l$e," (Megatron-BERT model)"),l$e.forEach(t),S5o=i(x),Hp=n(x,"LI",{});var i$e=s(Hp);wme=n(i$e,"STRONG",{});var Ypt=s(wme);R5o=r(Ypt,"mobilebert"),Ypt.forEach(t),P5o=r(i$e," \u2014 "),dD=n(i$e,"A",{href:!0});var Kpt=s(dD);B5o=r(Kpt,"MobileBertModel"),Kpt.forEach(t),N5o=r(i$e," (MobileBERT model)"),i$e.forEach(t),I5o=i(x),Up=n(x,"LI",{});var d$e=s(Up);Ame=n(d$e,"STRONG",{});var Zpt=s(Ame);q5o=r(Zpt,"mobilevit"),Zpt.forEach(t),j5o=r(d$e," \u2014 "),cD=n(d$e,"A",{href:!0});var e_t=s(cD);D5o=r(e_t,"MobileViTModel"),e_t.forEach(t),G5o=r(d$e," (MobileViT model)"),d$e.forEach(t),O5o=i(x),Jp=n(x,"LI",{});var c$e=s(Jp);Lme=n(c$e,"STRONG",{});var o_t=s(Lme);V5o=r(o_t,"mpnet"),o_t.forEach(t),X5o=r(c$e," \u2014 "),mD=n(c$e,"A",{href:!0});var r_t=s(mD);z5o=r(r_t,"MPNetModel"),r_t.forEach(t),Q5o=r(c$e," (MPNet model)"),c$e.forEach(t),W5o=i(x),Yp=n(x,"LI",{});var m$e=s(Yp);yme=n(m$e,"STRONG",{});var t_t=s(yme);H5o=r(t_t,"mt5"),t_t.forEach(t),U5o=r(m$e," \u2014 "),fD=n(m$e,"A",{href:!0});var a_t=s(fD);J5o=r(a_t,"MT5Model"),a_t.forEach(t),Y5o=r(m$e," (MT5 model)"),m$e.forEach(t),K5o=i(x),Kp=n(x,"LI",{});var f$e=s(Kp);xme=n(f$e,"STRONG",{});var n_t=s(xme);Z5o=r(n_t,"mvp"),n_t.forEach(t),e0o=r(f$e," \u2014 "),gD=n(f$e,"A",{href:!0});var s_t=s(gD);o0o=r(s_t,"MvpModel"),s_t.forEach(t),r0o=r(f$e," (MVP model)"),f$e.forEach(t),t0o=i(x),Zp=n(x,"LI",{});var g$e=s(Zp);$me=n(g$e,"STRONG",{});var l_t=s($me);a0o=r(l_t,"nezha"),l_t.forEach(t),n0o=r(g$e," \u2014 "),hD=n(g$e,"A",{href:!0});var i_t=s(hD);s0o=r(i_t,"NezhaModel"),i_t.forEach(t),l0o=r(g$e," (Nezha model)"),g$e.forEach(t),i0o=i(x),e_=n(x,"LI",{});var h$e=s(e_);kme=n(h$e,"STRONG",{});var d_t=s(kme);d0o=r(d_t,"nllb"),d_t.forEach(t),c0o=r(h$e," \u2014 "),uD=n(h$e,"A",{href:!0});var c_t=s(uD);m0o=r(c_t,"M2M100Model"),c_t.forEach(t),f0o=r(h$e," (NLLB model)"),h$e.forEach(t),g0o=i(x),o_=n(x,"LI",{});var u$e=s(o_);Sme=n(u$e,"STRONG",{});var m_t=s(Sme);h0o=r(m_t,"nystromformer"),m_t.forEach(t),u0o=r(u$e," \u2014 "),pD=n(u$e,"A",{href:!0});var f_t=s(pD);p0o=r(f_t,"NystromformerModel"),f_t.forEach(t),_0o=r(u$e," (Nystr\xF6mformer model)"),u$e.forEach(t),b0o=i(x),r_=n(x,"LI",{});var p$e=s(r_);Rme=n(p$e,"STRONG",{});var g_t=s(Rme);v0o=r(g_t,"openai-gpt"),g_t.forEach(t),F0o=r(p$e," \u2014 "),_D=n(p$e,"A",{href:!0});var h_t=s(_D);T0o=r(h_t,"OpenAIGPTModel"),h_t.forEach(t),M0o=r(p$e," (OpenAI GPT model)"),p$e.forEach(t),E0o=i(x),t_=n(x,"LI",{});var _$e=s(t_);Pme=n(_$e,"STRONG",{});var u_t=s(Pme);C0o=r(u_t,"opt"),u_t.forEach(t),w0o=r(_$e," \u2014 "),bD=n(_$e,"A",{href:!0});var p_t=s(bD);A0o=r(p_t,"OPTModel"),p_t.forEach(t),L0o=r(_$e," (OPT model)"),_$e.forEach(t),y0o=i(x),a_=n(x,"LI",{});var b$e=s(a_);Bme=n(b$e,"STRONG",{});var __t=s(Bme);x0o=r(__t,"pegasus"),__t.forEach(t),$0o=r(b$e," \u2014 "),vD=n(b$e,"A",{href:!0});var b_t=s(vD);k0o=r(b_t,"PegasusModel"),b_t.forEach(t),S0o=r(b$e," (Pegasus model)"),b$e.forEach(t),R0o=i(x),n_=n(x,"LI",{});var v$e=s(n_);Nme=n(v$e,"STRONG",{});var v_t=s(Nme);P0o=r(v_t,"perceiver"),v_t.forEach(t),B0o=r(v$e," \u2014 "),FD=n(v$e,"A",{href:!0});var F_t=s(FD);N0o=r(F_t,"PerceiverModel"),F_t.forEach(t),I0o=r(v$e," (Perceiver model)"),v$e.forEach(t),q0o=i(x),s_=n(x,"LI",{});var F$e=s(s_);Ime=n(F$e,"STRONG",{});var T_t=s(Ime);j0o=r(T_t,"plbart"),T_t.forEach(t),D0o=r(F$e," \u2014 "),TD=n(F$e,"A",{href:!0});var M_t=s(TD);G0o=r(M_t,"PLBartModel"),M_t.forEach(t),O0o=r(F$e," (PLBart model)"),F$e.forEach(t),V0o=i(x),l_=n(x,"LI",{});var T$e=s(l_);qme=n(T$e,"STRONG",{});var E_t=s(qme);X0o=r(E_t,"poolformer"),E_t.forEach(t),z0o=r(T$e," \u2014 "),MD=n(T$e,"A",{href:!0});var C_t=s(MD);Q0o=r(C_t,"PoolFormerModel"),C_t.forEach(t),W0o=r(T$e," (PoolFormer model)"),T$e.forEach(t),H0o=i(x),i_=n(x,"LI",{});var M$e=s(i_);jme=n(M$e,"STRONG",{});var w_t=s(jme);U0o=r(w_t,"prophetnet"),w_t.forEach(t),J0o=r(M$e," \u2014 "),ED=n(M$e,"A",{href:!0});var A_t=s(ED);Y0o=r(A_t,"ProphetNetModel"),A_t.forEach(t),K0o=r(M$e," (ProphetNet model)"),M$e.forEach(t),Z0o=i(x),d_=n(x,"LI",{});var E$e=s(d_);Dme=n(E$e,"STRONG",{});var L_t=s(Dme);ewo=r(L_t,"qdqbert"),L_t.forEach(t),owo=r(E$e," \u2014 "),CD=n(E$e,"A",{href:!0});var y_t=s(CD);rwo=r(y_t,"QDQBertModel"),y_t.forEach(t),two=r(E$e," (QDQBert model)"),E$e.forEach(t),awo=i(x),c_=n(x,"LI",{});var C$e=s(c_);Gme=n(C$e,"STRONG",{});var x_t=s(Gme);nwo=r(x_t,"reformer"),x_t.forEach(t),swo=r(C$e," \u2014 "),wD=n(C$e,"A",{href:!0});var $_t=s(wD);lwo=r($_t,"ReformerModel"),$_t.forEach(t),iwo=r(C$e," (Reformer model)"),C$e.forEach(t),dwo=i(x),m_=n(x,"LI",{});var w$e=s(m_);Ome=n(w$e,"STRONG",{});var k_t=s(Ome);cwo=r(k_t,"regnet"),k_t.forEach(t),mwo=r(w$e," \u2014 "),AD=n(w$e,"A",{href:!0});var S_t=s(AD);fwo=r(S_t,"RegNetModel"),S_t.forEach(t),gwo=r(w$e," (RegNet model)"),w$e.forEach(t),hwo=i(x),f_=n(x,"LI",{});var A$e=s(f_);Vme=n(A$e,"STRONG",{});var R_t=s(Vme);uwo=r(R_t,"rembert"),R_t.forEach(t),pwo=r(A$e," \u2014 "),LD=n(A$e,"A",{href:!0});var P_t=s(LD);_wo=r(P_t,"RemBertModel"),P_t.forEach(t),bwo=r(A$e," (RemBERT model)"),A$e.forEach(t),vwo=i(x),g_=n(x,"LI",{});var L$e=s(g_);Xme=n(L$e,"STRONG",{});var B_t=s(Xme);Fwo=r(B_t,"resnet"),B_t.forEach(t),Two=r(L$e," \u2014 "),yD=n(L$e,"A",{href:!0});var N_t=s(yD);Mwo=r(N_t,"ResNetModel"),N_t.forEach(t),Ewo=r(L$e," (ResNet model)"),L$e.forEach(t),Cwo=i(x),h_=n(x,"LI",{});var y$e=s(h_);zme=n(y$e,"STRONG",{});var I_t=s(zme);wwo=r(I_t,"retribert"),I_t.forEach(t),Awo=r(y$e," \u2014 "),xD=n(y$e,"A",{href:!0});var q_t=s(xD);Lwo=r(q_t,"RetriBertModel"),q_t.forEach(t),ywo=r(y$e," (RetriBERT model)"),y$e.forEach(t),xwo=i(x),u_=n(x,"LI",{});var x$e=s(u_);Qme=n(x$e,"STRONG",{});var j_t=s(Qme);$wo=r(j_t,"roberta"),j_t.forEach(t),kwo=r(x$e," \u2014 "),$D=n(x$e,"A",{href:!0});var D_t=s($D);Swo=r(D_t,"RobertaModel"),D_t.forEach(t),Rwo=r(x$e," (RoBERTa model)"),x$e.forEach(t),Pwo=i(x),p_=n(x,"LI",{});var $$e=s(p_);Wme=n($$e,"STRONG",{});var G_t=s(Wme);Bwo=r(G_t,"roformer"),G_t.forEach(t),Nwo=r($$e," \u2014 "),kD=n($$e,"A",{href:!0});var O_t=s(kD);Iwo=r(O_t,"RoFormerModel"),O_t.forEach(t),qwo=r($$e," (RoFormer model)"),$$e.forEach(t),jwo=i(x),__=n(x,"LI",{});var k$e=s(__);Hme=n(k$e,"STRONG",{});var V_t=s(Hme);Dwo=r(V_t,"segformer"),V_t.forEach(t),Gwo=r(k$e," \u2014 "),SD=n(k$e,"A",{href:!0});var X_t=s(SD);Owo=r(X_t,"SegformerModel"),X_t.forEach(t),Vwo=r(k$e," (SegFormer model)"),k$e.forEach(t),Xwo=i(x),b_=n(x,"LI",{});var S$e=s(b_);Ume=n(S$e,"STRONG",{});var z_t=s(Ume);zwo=r(z_t,"sew"),z_t.forEach(t),Qwo=r(S$e," \u2014 "),RD=n(S$e,"A",{href:!0});var Q_t=s(RD);Wwo=r(Q_t,"SEWModel"),Q_t.forEach(t),Hwo=r(S$e," (SEW model)"),S$e.forEach(t),Uwo=i(x),v_=n(x,"LI",{});var R$e=s(v_);Jme=n(R$e,"STRONG",{});var W_t=s(Jme);Jwo=r(W_t,"sew-d"),W_t.forEach(t),Ywo=r(R$e," \u2014 "),PD=n(R$e,"A",{href:!0});var H_t=s(PD);Kwo=r(H_t,"SEWDModel"),H_t.forEach(t),Zwo=r(R$e," (SEW-D model)"),R$e.forEach(t),eAo=i(x),F_=n(x,"LI",{});var P$e=s(F_);Yme=n(P$e,"STRONG",{});var U_t=s(Yme);oAo=r(U_t,"speech_to_text"),U_t.forEach(t),rAo=r(P$e," \u2014 "),BD=n(P$e,"A",{href:!0});var J_t=s(BD);tAo=r(J_t,"Speech2TextModel"),J_t.forEach(t),aAo=r(P$e," (Speech2Text model)"),P$e.forEach(t),nAo=i(x),T_=n(x,"LI",{});var B$e=s(T_);Kme=n(B$e,"STRONG",{});var Y_t=s(Kme);sAo=r(Y_t,"splinter"),Y_t.forEach(t),lAo=r(B$e," \u2014 "),ND=n(B$e,"A",{href:!0});var K_t=s(ND);iAo=r(K_t,"SplinterModel"),K_t.forEach(t),dAo=r(B$e," (Splinter model)"),B$e.forEach(t),cAo=i(x),M_=n(x,"LI",{});var N$e=s(M_);Zme=n(N$e,"STRONG",{});var Z_t=s(Zme);mAo=r(Z_t,"squeezebert"),Z_t.forEach(t),fAo=r(N$e," \u2014 "),ID=n(N$e,"A",{href:!0});var e2t=s(ID);gAo=r(e2t,"SqueezeBertModel"),e2t.forEach(t),hAo=r(N$e," (SqueezeBERT model)"),N$e.forEach(t),uAo=i(x),E_=n(x,"LI",{});var I$e=s(E_);efe=n(I$e,"STRONG",{});var o2t=s(efe);pAo=r(o2t,"swin"),o2t.forEach(t),_Ao=r(I$e," \u2014 "),qD=n(I$e,"A",{href:!0});var r2t=s(qD);bAo=r(r2t,"SwinModel"),r2t.forEach(t),vAo=r(I$e," (Swin Transformer model)"),I$e.forEach(t),FAo=i(x),C_=n(x,"LI",{});var q$e=s(C_);ofe=n(q$e,"STRONG",{});var t2t=s(ofe);TAo=r(t2t,"t5"),t2t.forEach(t),MAo=r(q$e," \u2014 "),jD=n(q$e,"A",{href:!0});var a2t=s(jD);EAo=r(a2t,"T5Model"),a2t.forEach(t),CAo=r(q$e," (T5 model)"),q$e.forEach(t),wAo=i(x),w_=n(x,"LI",{});var j$e=s(w_);rfe=n(j$e,"STRONG",{});var n2t=s(rfe);AAo=r(n2t,"tapas"),n2t.forEach(t),LAo=r(j$e," \u2014 "),DD=n(j$e,"A",{href:!0});var s2t=s(DD);yAo=r(s2t,"TapasModel"),s2t.forEach(t),xAo=r(j$e," (TAPAS model)"),j$e.forEach(t),$Ao=i(x),A_=n(x,"LI",{});var D$e=s(A_);tfe=n(D$e,"STRONG",{});var l2t=s(tfe);kAo=r(l2t,"trajectory_transformer"),l2t.forEach(t),SAo=r(D$e," \u2014 "),GD=n(D$e,"A",{href:!0});var i2t=s(GD);RAo=r(i2t,"TrajectoryTransformerModel"),i2t.forEach(t),PAo=r(D$e," (Trajectory Transformer model)"),D$e.forEach(t),BAo=i(x),L_=n(x,"LI",{});var G$e=s(L_);afe=n(G$e,"STRONG",{});var d2t=s(afe);NAo=r(d2t,"transfo-xl"),d2t.forEach(t),IAo=r(G$e," \u2014 "),OD=n(G$e,"A",{href:!0});var c2t=s(OD);qAo=r(c2t,"TransfoXLModel"),c2t.forEach(t),jAo=r(G$e," (Transformer-XL model)"),G$e.forEach(t),DAo=i(x),y_=n(x,"LI",{});var O$e=s(y_);nfe=n(O$e,"STRONG",{});var m2t=s(nfe);GAo=r(m2t,"unispeech"),m2t.forEach(t),OAo=r(O$e," \u2014 "),VD=n(O$e,"A",{href:!0});var f2t=s(VD);VAo=r(f2t,"UniSpeechModel"),f2t.forEach(t),XAo=r(O$e," (UniSpeech model)"),O$e.forEach(t),zAo=i(x),x_=n(x,"LI",{});var V$e=s(x_);sfe=n(V$e,"STRONG",{});var g2t=s(sfe);QAo=r(g2t,"unispeech-sat"),g2t.forEach(t),WAo=r(V$e," \u2014 "),XD=n(V$e,"A",{href:!0});var h2t=s(XD);HAo=r(h2t,"UniSpeechSatModel"),h2t.forEach(t),UAo=r(V$e," (UniSpeechSat model)"),V$e.forEach(t),JAo=i(x),$_=n(x,"LI",{});var X$e=s($_);lfe=n(X$e,"STRONG",{});var u2t=s(lfe);YAo=r(u2t,"van"),u2t.forEach(t),KAo=r(X$e," \u2014 "),zD=n(X$e,"A",{href:!0});var p2t=s(zD);ZAo=r(p2t,"VanModel"),p2t.forEach(t),e6o=r(X$e," (VAN model)"),X$e.forEach(t),o6o=i(x),k_=n(x,"LI",{});var z$e=s(k_);ife=n(z$e,"STRONG",{});var _2t=s(ife);r6o=r(_2t,"vilt"),_2t.forEach(t),t6o=r(z$e," \u2014 "),QD=n(z$e,"A",{href:!0});var b2t=s(QD);a6o=r(b2t,"ViltModel"),b2t.forEach(t),n6o=r(z$e," (ViLT model)"),z$e.forEach(t),s6o=i(x),S_=n(x,"LI",{});var Q$e=s(S_);dfe=n(Q$e,"STRONG",{});var v2t=s(dfe);l6o=r(v2t,"vision-text-dual-encoder"),v2t.forEach(t),i6o=r(Q$e," \u2014 "),WD=n(Q$e,"A",{href:!0});var F2t=s(WD);d6o=r(F2t,"VisionTextDualEncoderModel"),F2t.forEach(t),c6o=r(Q$e," (VisionTextDualEncoder model)"),Q$e.forEach(t),m6o=i(x),R_=n(x,"LI",{});var W$e=s(R_);cfe=n(W$e,"STRONG",{});var T2t=s(cfe);f6o=r(T2t,"visual_bert"),T2t.forEach(t),g6o=r(W$e," \u2014 "),HD=n(W$e,"A",{href:!0});var M2t=s(HD);h6o=r(M2t,"VisualBertModel"),M2t.forEach(t),u6o=r(W$e," (VisualBERT model)"),W$e.forEach(t),p6o=i(x),P_=n(x,"LI",{});var H$e=s(P_);mfe=n(H$e,"STRONG",{});var E2t=s(mfe);_6o=r(E2t,"vit"),E2t.forEach(t),b6o=r(H$e," \u2014 "),UD=n(H$e,"A",{href:!0});var C2t=s(UD);v6o=r(C2t,"ViTModel"),C2t.forEach(t),F6o=r(H$e," (ViT model)"),H$e.forEach(t),T6o=i(x),B_=n(x,"LI",{});var U$e=s(B_);ffe=n(U$e,"STRONG",{});var w2t=s(ffe);M6o=r(w2t,"vit_mae"),w2t.forEach(t),E6o=r(U$e," \u2014 "),JD=n(U$e,"A",{href:!0});var A2t=s(JD);C6o=r(A2t,"ViTMAEModel"),A2t.forEach(t),w6o=r(U$e," (ViTMAE model)"),U$e.forEach(t),A6o=i(x),N_=n(x,"LI",{});var J$e=s(N_);gfe=n(J$e,"STRONG",{});var L2t=s(gfe);L6o=r(L2t,"wav2vec2"),L2t.forEach(t),y6o=r(J$e," \u2014 "),YD=n(J$e,"A",{href:!0});var y2t=s(YD);x6o=r(y2t,"Wav2Vec2Model"),y2t.forEach(t),$6o=r(J$e," (Wav2Vec2 model)"),J$e.forEach(t),k6o=i(x),I_=n(x,"LI",{});var Y$e=s(I_);hfe=n(Y$e,"STRONG",{});var x2t=s(hfe);S6o=r(x2t,"wav2vec2-conformer"),x2t.forEach(t),R6o=r(Y$e," \u2014 "),KD=n(Y$e,"A",{href:!0});var $2t=s(KD);P6o=r($2t,"Wav2Vec2ConformerModel"),$2t.forEach(t),B6o=r(Y$e," (Wav2Vec2-Conformer model)"),Y$e.forEach(t),N6o=i(x),q_=n(x,"LI",{});var K$e=s(q_);ufe=n(K$e,"STRONG",{});var k2t=s(ufe);I6o=r(k2t,"wavlm"),k2t.forEach(t),q6o=r(K$e," \u2014 "),ZD=n(K$e,"A",{href:!0});var S2t=s(ZD);j6o=r(S2t,"WavLMModel"),S2t.forEach(t),D6o=r(K$e," (WavLM model)"),K$e.forEach(t),G6o=i(x),j_=n(x,"LI",{});var Z$e=s(j_);pfe=n(Z$e,"STRONG",{});var R2t=s(pfe);O6o=r(R2t,"xglm"),R2t.forEach(t),V6o=r(Z$e," \u2014 "),eG=n(Z$e,"A",{href:!0});var P2t=s(eG);X6o=r(P2t,"XGLMModel"),P2t.forEach(t),z6o=r(Z$e," (XGLM model)"),Z$e.forEach(t),Q6o=i(x),D_=n(x,"LI",{});var eke=s(D_);_fe=n(eke,"STRONG",{});var B2t=s(_fe);W6o=r(B2t,"xlm"),B2t.forEach(t),H6o=r(eke," \u2014 "),oG=n(eke,"A",{href:!0});var N2t=s(oG);U6o=r(N2t,"XLMModel"),N2t.forEach(t),J6o=r(eke," (XLM model)"),eke.forEach(t),Y6o=i(x),G_=n(x,"LI",{});var oke=s(G_);bfe=n(oke,"STRONG",{});var I2t=s(bfe);K6o=r(I2t,"xlm-prophetnet"),I2t.forEach(t),Z6o=r(oke," \u2014 "),rG=n(oke,"A",{href:!0});var q2t=s(rG);e7o=r(q2t,"XLMProphetNetModel"),q2t.forEach(t),o7o=r(oke," (XLM-ProphetNet model)"),oke.forEach(t),r7o=i(x),O_=n(x,"LI",{});var rke=s(O_);vfe=n(rke,"STRONG",{});var j2t=s(vfe);t7o=r(j2t,"xlm-roberta"),j2t.forEach(t),a7o=r(rke," \u2014 "),tG=n(rke,"A",{href:!0});var D2t=s(tG);n7o=r(D2t,"XLMRobertaModel"),D2t.forEach(t),s7o=r(rke," (XLM-RoBERTa model)"),rke.forEach(t),l7o=i(x),V_=n(x,"LI",{});var tke=s(V_);Ffe=n(tke,"STRONG",{});var G2t=s(Ffe);i7o=r(G2t,"xlm-roberta-xl"),G2t.forEach(t),d7o=r(tke," \u2014 "),aG=n(tke,"A",{href:!0});var O2t=s(aG);c7o=r(O2t,"XLMRobertaXLModel"),O2t.forEach(t),m7o=r(tke," (XLM-RoBERTa-XL model)"),tke.forEach(t),f7o=i(x),X_=n(x,"LI",{});var ake=s(X_);Tfe=n(ake,"STRONG",{});var V2t=s(Tfe);g7o=r(V2t,"xlnet"),V2t.forEach(t),h7o=r(ake," \u2014 "),nG=n(ake,"A",{href:!0});var X2t=s(nG);u7o=r(X2t,"XLNetModel"),X2t.forEach(t),p7o=r(ake," (XLNet model)"),ake.forEach(t),_7o=i(x),z_=n(x,"LI",{});var nke=s(z_);Mfe=n(nke,"STRONG",{});var z2t=s(Mfe);b7o=r(z2t,"yolos"),z2t.forEach(t),v7o=r(nke," \u2014 "),sG=n(nke,"A",{href:!0});var Q2t=s(sG);F7o=r(Q2t,"YolosModel"),Q2t.forEach(t),T7o=r(nke," (YOLOS model)"),nke.forEach(t),M7o=i(x),Q_=n(x,"LI",{});var ske=s(Q_);Efe=n(ske,"STRONG",{});var W2t=s(Efe);E7o=r(W2t,"yoso"),W2t.forEach(t),C7o=r(ske," \u2014 "),lG=n(ske,"A",{href:!0});var H2t=s(lG);w7o=r(H2t,"YosoModel"),H2t.forEach(t),A7o=r(ske," (YOSO model)"),ske.forEach(t),x.forEach(t),L7o=i(la),W_=n(la,"P",{});var lke=s(W_);y7o=r(lke,"The model is set in evaluation mode by default using "),Cfe=n(lke,"CODE",{});var U2t=s(Cfe);x7o=r(U2t,"model.eval()"),U2t.forEach(t),$7o=r(lke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wfe=n(lke,"CODE",{});var J2t=s(wfe);k7o=r(J2t,"model.train()"),J2t.forEach(t),lke.forEach(t),S7o=i(la),T(H_.$$.fragment,la),la.forEach(t),tl.forEach(t),xXe=i(m),zi=n(m,"H2",{class:!0});var BQe=s(zi);U_=n(BQe,"A",{id:!0,class:!0,href:!0});var Y2t=s(U_);Afe=n(Y2t,"SPAN",{});var K2t=s(Afe);T(jy.$$.fragment,K2t),K2t.forEach(t),Y2t.forEach(t),R7o=i(BQe),Lfe=n(BQe,"SPAN",{});var Z2t=s(Lfe);P7o=r(Z2t,"AutoModelForPreTraining"),Z2t.forEach(t),BQe.forEach(t),$Xe=i(m),ko=n(m,"DIV",{class:!0});var al=s(ko);T(Dy.$$.fragment,al),B7o=i(al),Qi=n(al,"P",{});var Vre=s(Qi);N7o=r(Vre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),iG=n(Vre,"A",{href:!0});var ebt=s(iG);I7o=r(ebt,"from_pretrained()"),ebt.forEach(t),q7o=r(Vre," class method or the "),dG=n(Vre,"A",{href:!0});var obt=s(dG);j7o=r(obt,"from_config()"),obt.forEach(t),D7o=r(Vre,` class
method.`),Vre.forEach(t),G7o=i(al),Gy=n(al,"P",{});var NQe=s(Gy);O7o=r(NQe,"This class cannot be instantiated directly using "),yfe=n(NQe,"CODE",{});var rbt=s(yfe);V7o=r(rbt,"__init__()"),rbt.forEach(t),X7o=r(NQe," (throws an error)."),NQe.forEach(t),z7o=i(al),dt=n(al,"DIV",{class:!0});var h7=s(dt);T(Oy.$$.fragment,h7),Q7o=i(h7),xfe=n(h7,"P",{});var tbt=s(xfe);W7o=r(tbt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),tbt.forEach(t),H7o=i(h7),Wi=n(h7,"P",{});var Xre=s(Wi);U7o=r(Xre,`Note:
Loading a model from its configuration file does `),$fe=n(Xre,"STRONG",{});var abt=s($fe);J7o=r(abt,"not"),abt.forEach(t),Y7o=r(Xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),cG=n(Xre,"A",{href:!0});var nbt=s(cG);K7o=r(nbt,"from_pretrained()"),nbt.forEach(t),Z7o=r(Xre," to load the model weights."),Xre.forEach(t),eLo=i(h7),T(J_.$$.fragment,h7),h7.forEach(t),oLo=i(al),Ke=n(al,"DIV",{class:!0});var ia=s(Ke);T(Vy.$$.fragment,ia),rLo=i(ia),kfe=n(ia,"P",{});var sbt=s(kfe);tLo=r(sbt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),sbt.forEach(t),aLo=i(ia),Ia=n(ia,"P",{});var u7=s(Ia);nLo=r(u7,"The model class to instantiate is selected based on the "),Sfe=n(u7,"CODE",{});var lbt=s(Sfe);sLo=r(lbt,"model_type"),lbt.forEach(t),lLo=r(u7,` property of the config object (either
passed as an argument or loaded from `),Rfe=n(u7,"CODE",{});var ibt=s(Rfe);iLo=r(ibt,"pretrained_model_name_or_path"),ibt.forEach(t),dLo=r(u7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pfe=n(u7,"CODE",{});var dbt=s(Pfe);cLo=r(dbt,"pretrained_model_name_or_path"),dbt.forEach(t),mLo=r(u7,":"),u7.forEach(t),fLo=i(ia),G=n(ia,"UL",{});var O=s(G);Y_=n(O,"LI",{});var ike=s(Y_);Bfe=n(ike,"STRONG",{});var cbt=s(Bfe);gLo=r(cbt,"albert"),cbt.forEach(t),hLo=r(ike," \u2014 "),mG=n(ike,"A",{href:!0});var mbt=s(mG);uLo=r(mbt,"AlbertForPreTraining"),mbt.forEach(t),pLo=r(ike," (ALBERT model)"),ike.forEach(t),_Lo=i(O),K_=n(O,"LI",{});var dke=s(K_);Nfe=n(dke,"STRONG",{});var fbt=s(Nfe);bLo=r(fbt,"bart"),fbt.forEach(t),vLo=r(dke," \u2014 "),fG=n(dke,"A",{href:!0});var gbt=s(fG);FLo=r(gbt,"BartForConditionalGeneration"),gbt.forEach(t),TLo=r(dke," (BART model)"),dke.forEach(t),MLo=i(O),Z_=n(O,"LI",{});var cke=s(Z_);Ife=n(cke,"STRONG",{});var hbt=s(Ife);ELo=r(hbt,"bert"),hbt.forEach(t),CLo=r(cke," \u2014 "),gG=n(cke,"A",{href:!0});var ubt=s(gG);wLo=r(ubt,"BertForPreTraining"),ubt.forEach(t),ALo=r(cke," (BERT model)"),cke.forEach(t),LLo=i(O),e2=n(O,"LI",{});var mke=s(e2);qfe=n(mke,"STRONG",{});var pbt=s(qfe);yLo=r(pbt,"big_bird"),pbt.forEach(t),xLo=r(mke," \u2014 "),hG=n(mke,"A",{href:!0});var _bt=s(hG);$Lo=r(_bt,"BigBirdForPreTraining"),_bt.forEach(t),kLo=r(mke," (BigBird model)"),mke.forEach(t),SLo=i(O),o2=n(O,"LI",{});var fke=s(o2);jfe=n(fke,"STRONG",{});var bbt=s(jfe);RLo=r(bbt,"bloom"),bbt.forEach(t),PLo=r(fke," \u2014 "),uG=n(fke,"A",{href:!0});var vbt=s(uG);BLo=r(vbt,"BloomForCausalLM"),vbt.forEach(t),NLo=r(fke," (BLOOM model)"),fke.forEach(t),ILo=i(O),r2=n(O,"LI",{});var gke=s(r2);Dfe=n(gke,"STRONG",{});var Fbt=s(Dfe);qLo=r(Fbt,"camembert"),Fbt.forEach(t),jLo=r(gke," \u2014 "),pG=n(gke,"A",{href:!0});var Tbt=s(pG);DLo=r(Tbt,"CamembertForMaskedLM"),Tbt.forEach(t),GLo=r(gke," (CamemBERT model)"),gke.forEach(t),OLo=i(O),t2=n(O,"LI",{});var hke=s(t2);Gfe=n(hke,"STRONG",{});var Mbt=s(Gfe);VLo=r(Mbt,"ctrl"),Mbt.forEach(t),XLo=r(hke," \u2014 "),_G=n(hke,"A",{href:!0});var Ebt=s(_G);zLo=r(Ebt,"CTRLLMHeadModel"),Ebt.forEach(t),QLo=r(hke," (CTRL model)"),hke.forEach(t),WLo=i(O),a2=n(O,"LI",{});var uke=s(a2);Ofe=n(uke,"STRONG",{});var Cbt=s(Ofe);HLo=r(Cbt,"data2vec-text"),Cbt.forEach(t),ULo=r(uke," \u2014 "),bG=n(uke,"A",{href:!0});var wbt=s(bG);JLo=r(wbt,"Data2VecTextForMaskedLM"),wbt.forEach(t),YLo=r(uke," (Data2VecText model)"),uke.forEach(t),KLo=i(O),n2=n(O,"LI",{});var pke=s(n2);Vfe=n(pke,"STRONG",{});var Abt=s(Vfe);ZLo=r(Abt,"deberta"),Abt.forEach(t),eyo=r(pke," \u2014 "),vG=n(pke,"A",{href:!0});var Lbt=s(vG);oyo=r(Lbt,"DebertaForMaskedLM"),Lbt.forEach(t),ryo=r(pke," (DeBERTa model)"),pke.forEach(t),tyo=i(O),s2=n(O,"LI",{});var _ke=s(s2);Xfe=n(_ke,"STRONG",{});var ybt=s(Xfe);ayo=r(ybt,"deberta-v2"),ybt.forEach(t),nyo=r(_ke," \u2014 "),FG=n(_ke,"A",{href:!0});var xbt=s(FG);syo=r(xbt,"DebertaV2ForMaskedLM"),xbt.forEach(t),lyo=r(_ke," (DeBERTa-v2 model)"),_ke.forEach(t),iyo=i(O),l2=n(O,"LI",{});var bke=s(l2);zfe=n(bke,"STRONG",{});var $bt=s(zfe);dyo=r($bt,"distilbert"),$bt.forEach(t),cyo=r(bke," \u2014 "),TG=n(bke,"A",{href:!0});var kbt=s(TG);myo=r(kbt,"DistilBertForMaskedLM"),kbt.forEach(t),fyo=r(bke," (DistilBERT model)"),bke.forEach(t),gyo=i(O),i2=n(O,"LI",{});var vke=s(i2);Qfe=n(vke,"STRONG",{});var Sbt=s(Qfe);hyo=r(Sbt,"electra"),Sbt.forEach(t),uyo=r(vke," \u2014 "),MG=n(vke,"A",{href:!0});var Rbt=s(MG);pyo=r(Rbt,"ElectraForPreTraining"),Rbt.forEach(t),_yo=r(vke," (ELECTRA model)"),vke.forEach(t),byo=i(O),d2=n(O,"LI",{});var Fke=s(d2);Wfe=n(Fke,"STRONG",{});var Pbt=s(Wfe);vyo=r(Pbt,"flaubert"),Pbt.forEach(t),Fyo=r(Fke," \u2014 "),EG=n(Fke,"A",{href:!0});var Bbt=s(EG);Tyo=r(Bbt,"FlaubertWithLMHeadModel"),Bbt.forEach(t),Myo=r(Fke," (FlauBERT model)"),Fke.forEach(t),Eyo=i(O),c2=n(O,"LI",{});var Tke=s(c2);Hfe=n(Tke,"STRONG",{});var Nbt=s(Hfe);Cyo=r(Nbt,"flava"),Nbt.forEach(t),wyo=r(Tke," \u2014 "),CG=n(Tke,"A",{href:!0});var Ibt=s(CG);Ayo=r(Ibt,"FlavaForPreTraining"),Ibt.forEach(t),Lyo=r(Tke," (FLAVA model)"),Tke.forEach(t),yyo=i(O),m2=n(O,"LI",{});var Mke=s(m2);Ufe=n(Mke,"STRONG",{});var qbt=s(Ufe);xyo=r(qbt,"fnet"),qbt.forEach(t),$yo=r(Mke," \u2014 "),wG=n(Mke,"A",{href:!0});var jbt=s(wG);kyo=r(jbt,"FNetForPreTraining"),jbt.forEach(t),Syo=r(Mke," (FNet model)"),Mke.forEach(t),Ryo=i(O),f2=n(O,"LI",{});var Eke=s(f2);Jfe=n(Eke,"STRONG",{});var Dbt=s(Jfe);Pyo=r(Dbt,"fsmt"),Dbt.forEach(t),Byo=r(Eke," \u2014 "),AG=n(Eke,"A",{href:!0});var Gbt=s(AG);Nyo=r(Gbt,"FSMTForConditionalGeneration"),Gbt.forEach(t),Iyo=r(Eke," (FairSeq Machine-Translation model)"),Eke.forEach(t),qyo=i(O),g2=n(O,"LI",{});var Cke=s(g2);Yfe=n(Cke,"STRONG",{});var Obt=s(Yfe);jyo=r(Obt,"funnel"),Obt.forEach(t),Dyo=r(Cke," \u2014 "),LG=n(Cke,"A",{href:!0});var Vbt=s(LG);Gyo=r(Vbt,"FunnelForPreTraining"),Vbt.forEach(t),Oyo=r(Cke," (Funnel Transformer model)"),Cke.forEach(t),Vyo=i(O),h2=n(O,"LI",{});var wke=s(h2);Kfe=n(wke,"STRONG",{});var Xbt=s(Kfe);Xyo=r(Xbt,"gpt2"),Xbt.forEach(t),zyo=r(wke," \u2014 "),yG=n(wke,"A",{href:!0});var zbt=s(yG);Qyo=r(zbt,"GPT2LMHeadModel"),zbt.forEach(t),Wyo=r(wke," (OpenAI GPT-2 model)"),wke.forEach(t),Hyo=i(O),u2=n(O,"LI",{});var Ake=s(u2);Zfe=n(Ake,"STRONG",{});var Qbt=s(Zfe);Uyo=r(Qbt,"ibert"),Qbt.forEach(t),Jyo=r(Ake," \u2014 "),xG=n(Ake,"A",{href:!0});var Wbt=s(xG);Yyo=r(Wbt,"IBertForMaskedLM"),Wbt.forEach(t),Kyo=r(Ake," (I-BERT model)"),Ake.forEach(t),Zyo=i(O),p2=n(O,"LI",{});var Lke=s(p2);ege=n(Lke,"STRONG",{});var Hbt=s(ege);e8o=r(Hbt,"layoutlm"),Hbt.forEach(t),o8o=r(Lke," \u2014 "),$G=n(Lke,"A",{href:!0});var Ubt=s($G);r8o=r(Ubt,"LayoutLMForMaskedLM"),Ubt.forEach(t),t8o=r(Lke," (LayoutLM model)"),Lke.forEach(t),a8o=i(O),_2=n(O,"LI",{});var yke=s(_2);oge=n(yke,"STRONG",{});var Jbt=s(oge);n8o=r(Jbt,"longformer"),Jbt.forEach(t),s8o=r(yke," \u2014 "),kG=n(yke,"A",{href:!0});var Ybt=s(kG);l8o=r(Ybt,"LongformerForMaskedLM"),Ybt.forEach(t),i8o=r(yke," (Longformer model)"),yke.forEach(t),d8o=i(O),b2=n(O,"LI",{});var xke=s(b2);rge=n(xke,"STRONG",{});var Kbt=s(rge);c8o=r(Kbt,"lxmert"),Kbt.forEach(t),m8o=r(xke," \u2014 "),SG=n(xke,"A",{href:!0});var Zbt=s(SG);f8o=r(Zbt,"LxmertForPreTraining"),Zbt.forEach(t),g8o=r(xke," (LXMERT model)"),xke.forEach(t),h8o=i(O),v2=n(O,"LI",{});var $ke=s(v2);tge=n($ke,"STRONG",{});var evt=s(tge);u8o=r(evt,"megatron-bert"),evt.forEach(t),p8o=r($ke," \u2014 "),RG=n($ke,"A",{href:!0});var ovt=s(RG);_8o=r(ovt,"MegatronBertForPreTraining"),ovt.forEach(t),b8o=r($ke," (Megatron-BERT model)"),$ke.forEach(t),v8o=i(O),F2=n(O,"LI",{});var kke=s(F2);age=n(kke,"STRONG",{});var rvt=s(age);F8o=r(rvt,"mobilebert"),rvt.forEach(t),T8o=r(kke," \u2014 "),PG=n(kke,"A",{href:!0});var tvt=s(PG);M8o=r(tvt,"MobileBertForPreTraining"),tvt.forEach(t),E8o=r(kke," (MobileBERT model)"),kke.forEach(t),C8o=i(O),T2=n(O,"LI",{});var Ske=s(T2);nge=n(Ske,"STRONG",{});var avt=s(nge);w8o=r(avt,"mpnet"),avt.forEach(t),A8o=r(Ske," \u2014 "),BG=n(Ske,"A",{href:!0});var nvt=s(BG);L8o=r(nvt,"MPNetForMaskedLM"),nvt.forEach(t),y8o=r(Ske," (MPNet model)"),Ske.forEach(t),x8o=i(O),M2=n(O,"LI",{});var Rke=s(M2);sge=n(Rke,"STRONG",{});var svt=s(sge);$8o=r(svt,"mvp"),svt.forEach(t),k8o=r(Rke," \u2014 "),NG=n(Rke,"A",{href:!0});var lvt=s(NG);S8o=r(lvt,"MvpForConditionalGeneration"),lvt.forEach(t),R8o=r(Rke," (MVP model)"),Rke.forEach(t),P8o=i(O),E2=n(O,"LI",{});var Pke=s(E2);lge=n(Pke,"STRONG",{});var ivt=s(lge);B8o=r(ivt,"nezha"),ivt.forEach(t),N8o=r(Pke," \u2014 "),IG=n(Pke,"A",{href:!0});var dvt=s(IG);I8o=r(dvt,"NezhaForPreTraining"),dvt.forEach(t),q8o=r(Pke," (Nezha model)"),Pke.forEach(t),j8o=i(O),C2=n(O,"LI",{});var Bke=s(C2);ige=n(Bke,"STRONG",{});var cvt=s(ige);D8o=r(cvt,"openai-gpt"),cvt.forEach(t),G8o=r(Bke," \u2014 "),qG=n(Bke,"A",{href:!0});var mvt=s(qG);O8o=r(mvt,"OpenAIGPTLMHeadModel"),mvt.forEach(t),V8o=r(Bke," (OpenAI GPT model)"),Bke.forEach(t),X8o=i(O),w2=n(O,"LI",{});var Nke=s(w2);dge=n(Nke,"STRONG",{});var fvt=s(dge);z8o=r(fvt,"retribert"),fvt.forEach(t),Q8o=r(Nke," \u2014 "),jG=n(Nke,"A",{href:!0});var gvt=s(jG);W8o=r(gvt,"RetriBertModel"),gvt.forEach(t),H8o=r(Nke," (RetriBERT model)"),Nke.forEach(t),U8o=i(O),A2=n(O,"LI",{});var Ike=s(A2);cge=n(Ike,"STRONG",{});var hvt=s(cge);J8o=r(hvt,"roberta"),hvt.forEach(t),Y8o=r(Ike," \u2014 "),DG=n(Ike,"A",{href:!0});var uvt=s(DG);K8o=r(uvt,"RobertaForMaskedLM"),uvt.forEach(t),Z8o=r(Ike," (RoBERTa model)"),Ike.forEach(t),e9o=i(O),L2=n(O,"LI",{});var qke=s(L2);mge=n(qke,"STRONG",{});var pvt=s(mge);o9o=r(pvt,"splinter"),pvt.forEach(t),r9o=r(qke," \u2014 "),GG=n(qke,"A",{href:!0});var _vt=s(GG);t9o=r(_vt,"SplinterForPreTraining"),_vt.forEach(t),a9o=r(qke," (Splinter model)"),qke.forEach(t),n9o=i(O),y2=n(O,"LI",{});var jke=s(y2);fge=n(jke,"STRONG",{});var bvt=s(fge);s9o=r(bvt,"squeezebert"),bvt.forEach(t),l9o=r(jke," \u2014 "),OG=n(jke,"A",{href:!0});var vvt=s(OG);i9o=r(vvt,"SqueezeBertForMaskedLM"),vvt.forEach(t),d9o=r(jke," (SqueezeBERT model)"),jke.forEach(t),c9o=i(O),x2=n(O,"LI",{});var Dke=s(x2);gge=n(Dke,"STRONG",{});var Fvt=s(gge);m9o=r(Fvt,"t5"),Fvt.forEach(t),f9o=r(Dke," \u2014 "),VG=n(Dke,"A",{href:!0});var Tvt=s(VG);g9o=r(Tvt,"T5ForConditionalGeneration"),Tvt.forEach(t),h9o=r(Dke," (T5 model)"),Dke.forEach(t),u9o=i(O),$2=n(O,"LI",{});var Gke=s($2);hge=n(Gke,"STRONG",{});var Mvt=s(hge);p9o=r(Mvt,"tapas"),Mvt.forEach(t),_9o=r(Gke," \u2014 "),XG=n(Gke,"A",{href:!0});var Evt=s(XG);b9o=r(Evt,"TapasForMaskedLM"),Evt.forEach(t),v9o=r(Gke," (TAPAS model)"),Gke.forEach(t),F9o=i(O),k2=n(O,"LI",{});var Oke=s(k2);uge=n(Oke,"STRONG",{});var Cvt=s(uge);T9o=r(Cvt,"transfo-xl"),Cvt.forEach(t),M9o=r(Oke," \u2014 "),zG=n(Oke,"A",{href:!0});var wvt=s(zG);E9o=r(wvt,"TransfoXLLMHeadModel"),wvt.forEach(t),C9o=r(Oke," (Transformer-XL model)"),Oke.forEach(t),w9o=i(O),S2=n(O,"LI",{});var Vke=s(S2);pge=n(Vke,"STRONG",{});var Avt=s(pge);A9o=r(Avt,"unispeech"),Avt.forEach(t),L9o=r(Vke," \u2014 "),QG=n(Vke,"A",{href:!0});var Lvt=s(QG);y9o=r(Lvt,"UniSpeechForPreTraining"),Lvt.forEach(t),x9o=r(Vke," (UniSpeech model)"),Vke.forEach(t),$9o=i(O),R2=n(O,"LI",{});var Xke=s(R2);_ge=n(Xke,"STRONG",{});var yvt=s(_ge);k9o=r(yvt,"unispeech-sat"),yvt.forEach(t),S9o=r(Xke," \u2014 "),WG=n(Xke,"A",{href:!0});var xvt=s(WG);R9o=r(xvt,"UniSpeechSatForPreTraining"),xvt.forEach(t),P9o=r(Xke," (UniSpeechSat model)"),Xke.forEach(t),B9o=i(O),P2=n(O,"LI",{});var zke=s(P2);bge=n(zke,"STRONG",{});var $vt=s(bge);N9o=r($vt,"visual_bert"),$vt.forEach(t),I9o=r(zke," \u2014 "),HG=n(zke,"A",{href:!0});var kvt=s(HG);q9o=r(kvt,"VisualBertForPreTraining"),kvt.forEach(t),j9o=r(zke," (VisualBERT model)"),zke.forEach(t),D9o=i(O),B2=n(O,"LI",{});var Qke=s(B2);vge=n(Qke,"STRONG",{});var Svt=s(vge);G9o=r(Svt,"vit_mae"),Svt.forEach(t),O9o=r(Qke," \u2014 "),UG=n(Qke,"A",{href:!0});var Rvt=s(UG);V9o=r(Rvt,"ViTMAEForPreTraining"),Rvt.forEach(t),X9o=r(Qke," (ViTMAE model)"),Qke.forEach(t),z9o=i(O),N2=n(O,"LI",{});var Wke=s(N2);Fge=n(Wke,"STRONG",{});var Pvt=s(Fge);Q9o=r(Pvt,"wav2vec2"),Pvt.forEach(t),W9o=r(Wke," \u2014 "),JG=n(Wke,"A",{href:!0});var Bvt=s(JG);H9o=r(Bvt,"Wav2Vec2ForPreTraining"),Bvt.forEach(t),U9o=r(Wke," (Wav2Vec2 model)"),Wke.forEach(t),J9o=i(O),I2=n(O,"LI",{});var Hke=s(I2);Tge=n(Hke,"STRONG",{});var Nvt=s(Tge);Y9o=r(Nvt,"wav2vec2-conformer"),Nvt.forEach(t),K9o=r(Hke," \u2014 "),YG=n(Hke,"A",{href:!0});var Ivt=s(YG);Z9o=r(Ivt,"Wav2Vec2ConformerForPreTraining"),Ivt.forEach(t),exo=r(Hke," (Wav2Vec2-Conformer model)"),Hke.forEach(t),oxo=i(O),q2=n(O,"LI",{});var Uke=s(q2);Mge=n(Uke,"STRONG",{});var qvt=s(Mge);rxo=r(qvt,"xlm"),qvt.forEach(t),txo=r(Uke," \u2014 "),KG=n(Uke,"A",{href:!0});var jvt=s(KG);axo=r(jvt,"XLMWithLMHeadModel"),jvt.forEach(t),nxo=r(Uke," (XLM model)"),Uke.forEach(t),sxo=i(O),j2=n(O,"LI",{});var Jke=s(j2);Ege=n(Jke,"STRONG",{});var Dvt=s(Ege);lxo=r(Dvt,"xlm-roberta"),Dvt.forEach(t),ixo=r(Jke," \u2014 "),ZG=n(Jke,"A",{href:!0});var Gvt=s(ZG);dxo=r(Gvt,"XLMRobertaForMaskedLM"),Gvt.forEach(t),cxo=r(Jke," (XLM-RoBERTa model)"),Jke.forEach(t),mxo=i(O),D2=n(O,"LI",{});var Yke=s(D2);Cge=n(Yke,"STRONG",{});var Ovt=s(Cge);fxo=r(Ovt,"xlm-roberta-xl"),Ovt.forEach(t),gxo=r(Yke," \u2014 "),eO=n(Yke,"A",{href:!0});var Vvt=s(eO);hxo=r(Vvt,"XLMRobertaXLForMaskedLM"),Vvt.forEach(t),uxo=r(Yke," (XLM-RoBERTa-XL model)"),Yke.forEach(t),pxo=i(O),G2=n(O,"LI",{});var Kke=s(G2);wge=n(Kke,"STRONG",{});var Xvt=s(wge);_xo=r(Xvt,"xlnet"),Xvt.forEach(t),bxo=r(Kke," \u2014 "),oO=n(Kke,"A",{href:!0});var zvt=s(oO);vxo=r(zvt,"XLNetLMHeadModel"),zvt.forEach(t),Fxo=r(Kke," (XLNet model)"),Kke.forEach(t),O.forEach(t),Txo=i(ia),O2=n(ia,"P",{});var Zke=s(O2);Mxo=r(Zke,"The model is set in evaluation mode by default using "),Age=n(Zke,"CODE",{});var Qvt=s(Age);Exo=r(Qvt,"model.eval()"),Qvt.forEach(t),Cxo=r(Zke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lge=n(Zke,"CODE",{});var Wvt=s(Lge);wxo=r(Wvt,"model.train()"),Wvt.forEach(t),Zke.forEach(t),Axo=i(ia),T(V2.$$.fragment,ia),ia.forEach(t),al.forEach(t),kXe=i(m),Hi=n(m,"H2",{class:!0});var IQe=s(Hi);X2=n(IQe,"A",{id:!0,class:!0,href:!0});var Hvt=s(X2);yge=n(Hvt,"SPAN",{});var Uvt=s(yge);T(Xy.$$.fragment,Uvt),Uvt.forEach(t),Hvt.forEach(t),Lxo=i(IQe),xge=n(IQe,"SPAN",{});var Jvt=s(xge);yxo=r(Jvt,"AutoModelForCausalLM"),Jvt.forEach(t),IQe.forEach(t),SXe=i(m),So=n(m,"DIV",{class:!0});var nl=s(So);T(zy.$$.fragment,nl),xxo=i(nl),Ui=n(nl,"P",{});var zre=s(Ui);$xo=r(zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),rO=n(zre,"A",{href:!0});var Yvt=s(rO);kxo=r(Yvt,"from_pretrained()"),Yvt.forEach(t),Sxo=r(zre," class method or the "),tO=n(zre,"A",{href:!0});var Kvt=s(tO);Rxo=r(Kvt,"from_config()"),Kvt.forEach(t),Pxo=r(zre,` class
method.`),zre.forEach(t),Bxo=i(nl),Qy=n(nl,"P",{});var qQe=s(Qy);Nxo=r(qQe,"This class cannot be instantiated directly using "),$ge=n(qQe,"CODE",{});var Zvt=s($ge);Ixo=r(Zvt,"__init__()"),Zvt.forEach(t),qxo=r(qQe," (throws an error)."),qQe.forEach(t),jxo=i(nl),ct=n(nl,"DIV",{class:!0});var p7=s(ct);T(Wy.$$.fragment,p7),Dxo=i(p7),kge=n(p7,"P",{});var e1t=s(kge);Gxo=r(e1t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),e1t.forEach(t),Oxo=i(p7),Ji=n(p7,"P",{});var Qre=s(Ji);Vxo=r(Qre,`Note:
Loading a model from its configuration file does `),Sge=n(Qre,"STRONG",{});var o1t=s(Sge);Xxo=r(o1t,"not"),o1t.forEach(t),zxo=r(Qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=n(Qre,"A",{href:!0});var r1t=s(aO);Qxo=r(r1t,"from_pretrained()"),r1t.forEach(t),Wxo=r(Qre," to load the model weights."),Qre.forEach(t),Hxo=i(p7),T(z2.$$.fragment,p7),p7.forEach(t),Uxo=i(nl),Ze=n(nl,"DIV",{class:!0});var da=s(Ze);T(Hy.$$.fragment,da),Jxo=i(da),Rge=n(da,"P",{});var t1t=s(Rge);Yxo=r(t1t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),t1t.forEach(t),Kxo=i(da),qa=n(da,"P",{});var _7=s(qa);Zxo=r(_7,"The model class to instantiate is selected based on the "),Pge=n(_7,"CODE",{});var a1t=s(Pge);e$o=r(a1t,"model_type"),a1t.forEach(t),o$o=r(_7,` property of the config object (either
passed as an argument or loaded from `),Bge=n(_7,"CODE",{});var n1t=s(Bge);r$o=r(n1t,"pretrained_model_name_or_path"),n1t.forEach(t),t$o=r(_7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nge=n(_7,"CODE",{});var s1t=s(Nge);a$o=r(s1t,"pretrained_model_name_or_path"),s1t.forEach(t),n$o=r(_7,":"),_7.forEach(t),s$o=i(da),z=n(da,"UL",{});var Q=s(z);Q2=n(Q,"LI",{});var eSe=s(Q2);Ige=n(eSe,"STRONG",{});var l1t=s(Ige);l$o=r(l1t,"bart"),l1t.forEach(t),i$o=r(eSe," \u2014 "),nO=n(eSe,"A",{href:!0});var i1t=s(nO);d$o=r(i1t,"BartForCausalLM"),i1t.forEach(t),c$o=r(eSe," (BART model)"),eSe.forEach(t),m$o=i(Q),W2=n(Q,"LI",{});var oSe=s(W2);qge=n(oSe,"STRONG",{});var d1t=s(qge);f$o=r(d1t,"bert"),d1t.forEach(t),g$o=r(oSe," \u2014 "),sO=n(oSe,"A",{href:!0});var c1t=s(sO);h$o=r(c1t,"BertLMHeadModel"),c1t.forEach(t),u$o=r(oSe," (BERT model)"),oSe.forEach(t),p$o=i(Q),H2=n(Q,"LI",{});var rSe=s(H2);jge=n(rSe,"STRONG",{});var m1t=s(jge);_$o=r(m1t,"bert-generation"),m1t.forEach(t),b$o=r(rSe," \u2014 "),lO=n(rSe,"A",{href:!0});var f1t=s(lO);v$o=r(f1t,"BertGenerationDecoder"),f1t.forEach(t),F$o=r(rSe," (Bert Generation model)"),rSe.forEach(t),T$o=i(Q),U2=n(Q,"LI",{});var tSe=s(U2);Dge=n(tSe,"STRONG",{});var g1t=s(Dge);M$o=r(g1t,"big_bird"),g1t.forEach(t),E$o=r(tSe," \u2014 "),iO=n(tSe,"A",{href:!0});var h1t=s(iO);C$o=r(h1t,"BigBirdForCausalLM"),h1t.forEach(t),w$o=r(tSe," (BigBird model)"),tSe.forEach(t),A$o=i(Q),J2=n(Q,"LI",{});var aSe=s(J2);Gge=n(aSe,"STRONG",{});var u1t=s(Gge);L$o=r(u1t,"bigbird_pegasus"),u1t.forEach(t),y$o=r(aSe," \u2014 "),dO=n(aSe,"A",{href:!0});var p1t=s(dO);x$o=r(p1t,"BigBirdPegasusForCausalLM"),p1t.forEach(t),$$o=r(aSe," (BigBird-Pegasus model)"),aSe.forEach(t),k$o=i(Q),Y2=n(Q,"LI",{});var nSe=s(Y2);Oge=n(nSe,"STRONG",{});var _1t=s(Oge);S$o=r(_1t,"blenderbot"),_1t.forEach(t),R$o=r(nSe," \u2014 "),cO=n(nSe,"A",{href:!0});var b1t=s(cO);P$o=r(b1t,"BlenderbotForCausalLM"),b1t.forEach(t),B$o=r(nSe," (Blenderbot model)"),nSe.forEach(t),N$o=i(Q),K2=n(Q,"LI",{});var sSe=s(K2);Vge=n(sSe,"STRONG",{});var v1t=s(Vge);I$o=r(v1t,"blenderbot-small"),v1t.forEach(t),q$o=r(sSe," \u2014 "),mO=n(sSe,"A",{href:!0});var F1t=s(mO);j$o=r(F1t,"BlenderbotSmallForCausalLM"),F1t.forEach(t),D$o=r(sSe," (BlenderbotSmall model)"),sSe.forEach(t),G$o=i(Q),Z2=n(Q,"LI",{});var lSe=s(Z2);Xge=n(lSe,"STRONG",{});var T1t=s(Xge);O$o=r(T1t,"bloom"),T1t.forEach(t),V$o=r(lSe," \u2014 "),fO=n(lSe,"A",{href:!0});var M1t=s(fO);X$o=r(M1t,"BloomForCausalLM"),M1t.forEach(t),z$o=r(lSe," (BLOOM model)"),lSe.forEach(t),Q$o=i(Q),eb=n(Q,"LI",{});var iSe=s(eb);zge=n(iSe,"STRONG",{});var E1t=s(zge);W$o=r(E1t,"camembert"),E1t.forEach(t),H$o=r(iSe," \u2014 "),gO=n(iSe,"A",{href:!0});var C1t=s(gO);U$o=r(C1t,"CamembertForCausalLM"),C1t.forEach(t),J$o=r(iSe," (CamemBERT model)"),iSe.forEach(t),Y$o=i(Q),ob=n(Q,"LI",{});var dSe=s(ob);Qge=n(dSe,"STRONG",{});var w1t=s(Qge);K$o=r(w1t,"codegen"),w1t.forEach(t),Z$o=r(dSe," \u2014 "),hO=n(dSe,"A",{href:!0});var A1t=s(hO);eko=r(A1t,"CodeGenForCausalLM"),A1t.forEach(t),oko=r(dSe," (CodeGen model)"),dSe.forEach(t),rko=i(Q),rb=n(Q,"LI",{});var cSe=s(rb);Wge=n(cSe,"STRONG",{});var L1t=s(Wge);tko=r(L1t,"ctrl"),L1t.forEach(t),ako=r(cSe," \u2014 "),uO=n(cSe,"A",{href:!0});var y1t=s(uO);nko=r(y1t,"CTRLLMHeadModel"),y1t.forEach(t),sko=r(cSe," (CTRL model)"),cSe.forEach(t),lko=i(Q),tb=n(Q,"LI",{});var mSe=s(tb);Hge=n(mSe,"STRONG",{});var x1t=s(Hge);iko=r(x1t,"data2vec-text"),x1t.forEach(t),dko=r(mSe," \u2014 "),pO=n(mSe,"A",{href:!0});var $1t=s(pO);cko=r($1t,"Data2VecTextForCausalLM"),$1t.forEach(t),mko=r(mSe," (Data2VecText model)"),mSe.forEach(t),fko=i(Q),ab=n(Q,"LI",{});var fSe=s(ab);Uge=n(fSe,"STRONG",{});var k1t=s(Uge);gko=r(k1t,"electra"),k1t.forEach(t),hko=r(fSe," \u2014 "),_O=n(fSe,"A",{href:!0});var S1t=s(_O);uko=r(S1t,"ElectraForCausalLM"),S1t.forEach(t),pko=r(fSe," (ELECTRA model)"),fSe.forEach(t),_ko=i(Q),nb=n(Q,"LI",{});var gSe=s(nb);Jge=n(gSe,"STRONG",{});var R1t=s(Jge);bko=r(R1t,"gpt2"),R1t.forEach(t),vko=r(gSe," \u2014 "),bO=n(gSe,"A",{href:!0});var P1t=s(bO);Fko=r(P1t,"GPT2LMHeadModel"),P1t.forEach(t),Tko=r(gSe," (OpenAI GPT-2 model)"),gSe.forEach(t),Mko=i(Q),sb=n(Q,"LI",{});var hSe=s(sb);Yge=n(hSe,"STRONG",{});var B1t=s(Yge);Eko=r(B1t,"gpt_neo"),B1t.forEach(t),Cko=r(hSe," \u2014 "),vO=n(hSe,"A",{href:!0});var N1t=s(vO);wko=r(N1t,"GPTNeoForCausalLM"),N1t.forEach(t),Ako=r(hSe," (GPT Neo model)"),hSe.forEach(t),Lko=i(Q),lb=n(Q,"LI",{});var uSe=s(lb);Kge=n(uSe,"STRONG",{});var I1t=s(Kge);yko=r(I1t,"gpt_neox"),I1t.forEach(t),xko=r(uSe," \u2014 "),FO=n(uSe,"A",{href:!0});var q1t=s(FO);$ko=r(q1t,"GPTNeoXForCausalLM"),q1t.forEach(t),kko=r(uSe," (GPT NeoX model)"),uSe.forEach(t),Sko=i(Q),ib=n(Q,"LI",{});var pSe=s(ib);Zge=n(pSe,"STRONG",{});var j1t=s(Zge);Rko=r(j1t,"gptj"),j1t.forEach(t),Pko=r(pSe," \u2014 "),TO=n(pSe,"A",{href:!0});var D1t=s(TO);Bko=r(D1t,"GPTJForCausalLM"),D1t.forEach(t),Nko=r(pSe," (GPT-J model)"),pSe.forEach(t),Iko=i(Q),db=n(Q,"LI",{});var _Se=s(db);ehe=n(_Se,"STRONG",{});var G1t=s(ehe);qko=r(G1t,"marian"),G1t.forEach(t),jko=r(_Se," \u2014 "),MO=n(_Se,"A",{href:!0});var O1t=s(MO);Dko=r(O1t,"MarianForCausalLM"),O1t.forEach(t),Gko=r(_Se," (Marian model)"),_Se.forEach(t),Oko=i(Q),cb=n(Q,"LI",{});var bSe=s(cb);ohe=n(bSe,"STRONG",{});var V1t=s(ohe);Vko=r(V1t,"mbart"),V1t.forEach(t),Xko=r(bSe," \u2014 "),EO=n(bSe,"A",{href:!0});var X1t=s(EO);zko=r(X1t,"MBartForCausalLM"),X1t.forEach(t),Qko=r(bSe," (mBART model)"),bSe.forEach(t),Wko=i(Q),mb=n(Q,"LI",{});var vSe=s(mb);rhe=n(vSe,"STRONG",{});var z1t=s(rhe);Hko=r(z1t,"megatron-bert"),z1t.forEach(t),Uko=r(vSe," \u2014 "),CO=n(vSe,"A",{href:!0});var Q1t=s(CO);Jko=r(Q1t,"MegatronBertForCausalLM"),Q1t.forEach(t),Yko=r(vSe," (Megatron-BERT model)"),vSe.forEach(t),Kko=i(Q),fb=n(Q,"LI",{});var FSe=s(fb);the=n(FSe,"STRONG",{});var W1t=s(the);Zko=r(W1t,"mvp"),W1t.forEach(t),eSo=r(FSe," \u2014 "),wO=n(FSe,"A",{href:!0});var H1t=s(wO);oSo=r(H1t,"MvpForCausalLM"),H1t.forEach(t),rSo=r(FSe," (MVP model)"),FSe.forEach(t),tSo=i(Q),gb=n(Q,"LI",{});var TSe=s(gb);ahe=n(TSe,"STRONG",{});var U1t=s(ahe);aSo=r(U1t,"openai-gpt"),U1t.forEach(t),nSo=r(TSe," \u2014 "),AO=n(TSe,"A",{href:!0});var J1t=s(AO);sSo=r(J1t,"OpenAIGPTLMHeadModel"),J1t.forEach(t),lSo=r(TSe," (OpenAI GPT model)"),TSe.forEach(t),iSo=i(Q),hb=n(Q,"LI",{});var MSe=s(hb);nhe=n(MSe,"STRONG",{});var Y1t=s(nhe);dSo=r(Y1t,"opt"),Y1t.forEach(t),cSo=r(MSe," \u2014 "),LO=n(MSe,"A",{href:!0});var K1t=s(LO);mSo=r(K1t,"OPTForCausalLM"),K1t.forEach(t),fSo=r(MSe," (OPT model)"),MSe.forEach(t),gSo=i(Q),ub=n(Q,"LI",{});var ESe=s(ub);she=n(ESe,"STRONG",{});var Z1t=s(she);hSo=r(Z1t,"pegasus"),Z1t.forEach(t),uSo=r(ESe," \u2014 "),yO=n(ESe,"A",{href:!0});var eFt=s(yO);pSo=r(eFt,"PegasusForCausalLM"),eFt.forEach(t),_So=r(ESe," (Pegasus model)"),ESe.forEach(t),bSo=i(Q),pb=n(Q,"LI",{});var CSe=s(pb);lhe=n(CSe,"STRONG",{});var oFt=s(lhe);vSo=r(oFt,"plbart"),oFt.forEach(t),FSo=r(CSe," \u2014 "),xO=n(CSe,"A",{href:!0});var rFt=s(xO);TSo=r(rFt,"PLBartForCausalLM"),rFt.forEach(t),MSo=r(CSe," (PLBart model)"),CSe.forEach(t),ESo=i(Q),_b=n(Q,"LI",{});var wSe=s(_b);ihe=n(wSe,"STRONG",{});var tFt=s(ihe);CSo=r(tFt,"prophetnet"),tFt.forEach(t),wSo=r(wSe," \u2014 "),$O=n(wSe,"A",{href:!0});var aFt=s($O);ASo=r(aFt,"ProphetNetForCausalLM"),aFt.forEach(t),LSo=r(wSe," (ProphetNet model)"),wSe.forEach(t),ySo=i(Q),bb=n(Q,"LI",{});var ASe=s(bb);dhe=n(ASe,"STRONG",{});var nFt=s(dhe);xSo=r(nFt,"qdqbert"),nFt.forEach(t),$So=r(ASe," \u2014 "),kO=n(ASe,"A",{href:!0});var sFt=s(kO);kSo=r(sFt,"QDQBertLMHeadModel"),sFt.forEach(t),SSo=r(ASe," (QDQBert model)"),ASe.forEach(t),RSo=i(Q),vb=n(Q,"LI",{});var LSe=s(vb);che=n(LSe,"STRONG",{});var lFt=s(che);PSo=r(lFt,"reformer"),lFt.forEach(t),BSo=r(LSe," \u2014 "),SO=n(LSe,"A",{href:!0});var iFt=s(SO);NSo=r(iFt,"ReformerModelWithLMHead"),iFt.forEach(t),ISo=r(LSe," (Reformer model)"),LSe.forEach(t),qSo=i(Q),Fb=n(Q,"LI",{});var ySe=s(Fb);mhe=n(ySe,"STRONG",{});var dFt=s(mhe);jSo=r(dFt,"rembert"),dFt.forEach(t),DSo=r(ySe," \u2014 "),RO=n(ySe,"A",{href:!0});var cFt=s(RO);GSo=r(cFt,"RemBertForCausalLM"),cFt.forEach(t),OSo=r(ySe," (RemBERT model)"),ySe.forEach(t),VSo=i(Q),Tb=n(Q,"LI",{});var xSe=s(Tb);fhe=n(xSe,"STRONG",{});var mFt=s(fhe);XSo=r(mFt,"roberta"),mFt.forEach(t),zSo=r(xSe," \u2014 "),PO=n(xSe,"A",{href:!0});var fFt=s(PO);QSo=r(fFt,"RobertaForCausalLM"),fFt.forEach(t),WSo=r(xSe," (RoBERTa model)"),xSe.forEach(t),HSo=i(Q),Mb=n(Q,"LI",{});var $Se=s(Mb);ghe=n($Se,"STRONG",{});var gFt=s(ghe);USo=r(gFt,"roformer"),gFt.forEach(t),JSo=r($Se," \u2014 "),BO=n($Se,"A",{href:!0});var hFt=s(BO);YSo=r(hFt,"RoFormerForCausalLM"),hFt.forEach(t),KSo=r($Se," (RoFormer model)"),$Se.forEach(t),ZSo=i(Q),Eb=n(Q,"LI",{});var kSe=s(Eb);hhe=n(kSe,"STRONG",{});var uFt=s(hhe);eRo=r(uFt,"speech_to_text_2"),uFt.forEach(t),oRo=r(kSe," \u2014 "),NO=n(kSe,"A",{href:!0});var pFt=s(NO);rRo=r(pFt,"Speech2Text2ForCausalLM"),pFt.forEach(t),tRo=r(kSe," (Speech2Text2 model)"),kSe.forEach(t),aRo=i(Q),Cb=n(Q,"LI",{});var SSe=s(Cb);uhe=n(SSe,"STRONG",{});var _Ft=s(uhe);nRo=r(_Ft,"transfo-xl"),_Ft.forEach(t),sRo=r(SSe," \u2014 "),IO=n(SSe,"A",{href:!0});var bFt=s(IO);lRo=r(bFt,"TransfoXLLMHeadModel"),bFt.forEach(t),iRo=r(SSe," (Transformer-XL model)"),SSe.forEach(t),dRo=i(Q),wb=n(Q,"LI",{});var RSe=s(wb);phe=n(RSe,"STRONG",{});var vFt=s(phe);cRo=r(vFt,"trocr"),vFt.forEach(t),mRo=r(RSe," \u2014 "),qO=n(RSe,"A",{href:!0});var FFt=s(qO);fRo=r(FFt,"TrOCRForCausalLM"),FFt.forEach(t),gRo=r(RSe," (TrOCR model)"),RSe.forEach(t),hRo=i(Q),Ab=n(Q,"LI",{});var PSe=s(Ab);_he=n(PSe,"STRONG",{});var TFt=s(_he);uRo=r(TFt,"xglm"),TFt.forEach(t),pRo=r(PSe," \u2014 "),jO=n(PSe,"A",{href:!0});var MFt=s(jO);_Ro=r(MFt,"XGLMForCausalLM"),MFt.forEach(t),bRo=r(PSe," (XGLM model)"),PSe.forEach(t),vRo=i(Q),Lb=n(Q,"LI",{});var BSe=s(Lb);bhe=n(BSe,"STRONG",{});var EFt=s(bhe);FRo=r(EFt,"xlm"),EFt.forEach(t),TRo=r(BSe," \u2014 "),DO=n(BSe,"A",{href:!0});var CFt=s(DO);MRo=r(CFt,"XLMWithLMHeadModel"),CFt.forEach(t),ERo=r(BSe," (XLM model)"),BSe.forEach(t),CRo=i(Q),yb=n(Q,"LI",{});var NSe=s(yb);vhe=n(NSe,"STRONG",{});var wFt=s(vhe);wRo=r(wFt,"xlm-prophetnet"),wFt.forEach(t),ARo=r(NSe," \u2014 "),GO=n(NSe,"A",{href:!0});var AFt=s(GO);LRo=r(AFt,"XLMProphetNetForCausalLM"),AFt.forEach(t),yRo=r(NSe," (XLM-ProphetNet model)"),NSe.forEach(t),xRo=i(Q),xb=n(Q,"LI",{});var ISe=s(xb);Fhe=n(ISe,"STRONG",{});var LFt=s(Fhe);$Ro=r(LFt,"xlm-roberta"),LFt.forEach(t),kRo=r(ISe," \u2014 "),OO=n(ISe,"A",{href:!0});var yFt=s(OO);SRo=r(yFt,"XLMRobertaForCausalLM"),yFt.forEach(t),RRo=r(ISe," (XLM-RoBERTa model)"),ISe.forEach(t),PRo=i(Q),$b=n(Q,"LI",{});var qSe=s($b);The=n(qSe,"STRONG",{});var xFt=s(The);BRo=r(xFt,"xlm-roberta-xl"),xFt.forEach(t),NRo=r(qSe," \u2014 "),VO=n(qSe,"A",{href:!0});var $Ft=s(VO);IRo=r($Ft,"XLMRobertaXLForCausalLM"),$Ft.forEach(t),qRo=r(qSe," (XLM-RoBERTa-XL model)"),qSe.forEach(t),jRo=i(Q),kb=n(Q,"LI",{});var jSe=s(kb);Mhe=n(jSe,"STRONG",{});var kFt=s(Mhe);DRo=r(kFt,"xlnet"),kFt.forEach(t),GRo=r(jSe," \u2014 "),XO=n(jSe,"A",{href:!0});var SFt=s(XO);ORo=r(SFt,"XLNetLMHeadModel"),SFt.forEach(t),VRo=r(jSe," (XLNet model)"),jSe.forEach(t),Q.forEach(t),XRo=i(da),Sb=n(da,"P",{});var DSe=s(Sb);zRo=r(DSe,"The model is set in evaluation mode by default using "),Ehe=n(DSe,"CODE",{});var RFt=s(Ehe);QRo=r(RFt,"model.eval()"),RFt.forEach(t),WRo=r(DSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Che=n(DSe,"CODE",{});var PFt=s(Che);HRo=r(PFt,"model.train()"),PFt.forEach(t),DSe.forEach(t),URo=i(da),T(Rb.$$.fragment,da),da.forEach(t),nl.forEach(t),RXe=i(m),Yi=n(m,"H2",{class:!0});var jQe=s(Yi);Pb=n(jQe,"A",{id:!0,class:!0,href:!0});var BFt=s(Pb);whe=n(BFt,"SPAN",{});var NFt=s(whe);T(Uy.$$.fragment,NFt),NFt.forEach(t),BFt.forEach(t),JRo=i(jQe),Ahe=n(jQe,"SPAN",{});var IFt=s(Ahe);YRo=r(IFt,"AutoModelForMaskedLM"),IFt.forEach(t),jQe.forEach(t),PXe=i(m),Ro=n(m,"DIV",{class:!0});var sl=s(Ro);T(Jy.$$.fragment,sl),KRo=i(sl),Ki=n(sl,"P",{});var Wre=s(Ki);ZRo=r(Wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zO=n(Wre,"A",{href:!0});var qFt=s(zO);ePo=r(qFt,"from_pretrained()"),qFt.forEach(t),oPo=r(Wre," class method or the "),QO=n(Wre,"A",{href:!0});var jFt=s(QO);rPo=r(jFt,"from_config()"),jFt.forEach(t),tPo=r(Wre,` class
method.`),Wre.forEach(t),aPo=i(sl),Yy=n(sl,"P",{});var DQe=s(Yy);nPo=r(DQe,"This class cannot be instantiated directly using "),Lhe=n(DQe,"CODE",{});var DFt=s(Lhe);sPo=r(DFt,"__init__()"),DFt.forEach(t),lPo=r(DQe," (throws an error)."),DQe.forEach(t),iPo=i(sl),mt=n(sl,"DIV",{class:!0});var b7=s(mt);T(Ky.$$.fragment,b7),dPo=i(b7),yhe=n(b7,"P",{});var GFt=s(yhe);cPo=r(GFt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),GFt.forEach(t),mPo=i(b7),Zi=n(b7,"P",{});var Hre=s(Zi);fPo=r(Hre,`Note:
Loading a model from its configuration file does `),xhe=n(Hre,"STRONG",{});var OFt=s(xhe);gPo=r(OFt,"not"),OFt.forEach(t),hPo=r(Hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),WO=n(Hre,"A",{href:!0});var VFt=s(WO);uPo=r(VFt,"from_pretrained()"),VFt.forEach(t),pPo=r(Hre," to load the model weights."),Hre.forEach(t),_Po=i(b7),T(Bb.$$.fragment,b7),b7.forEach(t),bPo=i(sl),eo=n(sl,"DIV",{class:!0});var ca=s(eo);T(Zy.$$.fragment,ca),vPo=i(ca),$he=n(ca,"P",{});var XFt=s($he);FPo=r(XFt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),XFt.forEach(t),TPo=i(ca),ja=n(ca,"P",{});var v7=s(ja);MPo=r(v7,"The model class to instantiate is selected based on the "),khe=n(v7,"CODE",{});var zFt=s(khe);EPo=r(zFt,"model_type"),zFt.forEach(t),CPo=r(v7,` property of the config object (either
passed as an argument or loaded from `),She=n(v7,"CODE",{});var QFt=s(She);wPo=r(QFt,"pretrained_model_name_or_path"),QFt.forEach(t),APo=r(v7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rhe=n(v7,"CODE",{});var WFt=s(Rhe);LPo=r(WFt,"pretrained_model_name_or_path"),WFt.forEach(t),yPo=r(v7,":"),v7.forEach(t),xPo=i(ca),W=n(ca,"UL",{});var H=s(W);Nb=n(H,"LI",{});var GSe=s(Nb);Phe=n(GSe,"STRONG",{});var HFt=s(Phe);$Po=r(HFt,"albert"),HFt.forEach(t),kPo=r(GSe," \u2014 "),HO=n(GSe,"A",{href:!0});var UFt=s(HO);SPo=r(UFt,"AlbertForMaskedLM"),UFt.forEach(t),RPo=r(GSe," (ALBERT model)"),GSe.forEach(t),PPo=i(H),Ib=n(H,"LI",{});var OSe=s(Ib);Bhe=n(OSe,"STRONG",{});var JFt=s(Bhe);BPo=r(JFt,"bart"),JFt.forEach(t),NPo=r(OSe," \u2014 "),UO=n(OSe,"A",{href:!0});var YFt=s(UO);IPo=r(YFt,"BartForConditionalGeneration"),YFt.forEach(t),qPo=r(OSe," (BART model)"),OSe.forEach(t),jPo=i(H),qb=n(H,"LI",{});var VSe=s(qb);Nhe=n(VSe,"STRONG",{});var KFt=s(Nhe);DPo=r(KFt,"bert"),KFt.forEach(t),GPo=r(VSe," \u2014 "),JO=n(VSe,"A",{href:!0});var ZFt=s(JO);OPo=r(ZFt,"BertForMaskedLM"),ZFt.forEach(t),VPo=r(VSe," (BERT model)"),VSe.forEach(t),XPo=i(H),jb=n(H,"LI",{});var XSe=s(jb);Ihe=n(XSe,"STRONG",{});var eTt=s(Ihe);zPo=r(eTt,"big_bird"),eTt.forEach(t),QPo=r(XSe," \u2014 "),YO=n(XSe,"A",{href:!0});var oTt=s(YO);WPo=r(oTt,"BigBirdForMaskedLM"),oTt.forEach(t),HPo=r(XSe," (BigBird model)"),XSe.forEach(t),UPo=i(H),Db=n(H,"LI",{});var zSe=s(Db);qhe=n(zSe,"STRONG",{});var rTt=s(qhe);JPo=r(rTt,"camembert"),rTt.forEach(t),YPo=r(zSe," \u2014 "),KO=n(zSe,"A",{href:!0});var tTt=s(KO);KPo=r(tTt,"CamembertForMaskedLM"),tTt.forEach(t),ZPo=r(zSe," (CamemBERT model)"),zSe.forEach(t),eBo=i(H),Gb=n(H,"LI",{});var QSe=s(Gb);jhe=n(QSe,"STRONG",{});var aTt=s(jhe);oBo=r(aTt,"convbert"),aTt.forEach(t),rBo=r(QSe," \u2014 "),ZO=n(QSe,"A",{href:!0});var nTt=s(ZO);tBo=r(nTt,"ConvBertForMaskedLM"),nTt.forEach(t),aBo=r(QSe," (ConvBERT model)"),QSe.forEach(t),nBo=i(H),Ob=n(H,"LI",{});var WSe=s(Ob);Dhe=n(WSe,"STRONG",{});var sTt=s(Dhe);sBo=r(sTt,"data2vec-text"),sTt.forEach(t),lBo=r(WSe," \u2014 "),eV=n(WSe,"A",{href:!0});var lTt=s(eV);iBo=r(lTt,"Data2VecTextForMaskedLM"),lTt.forEach(t),dBo=r(WSe," (Data2VecText model)"),WSe.forEach(t),cBo=i(H),Vb=n(H,"LI",{});var HSe=s(Vb);Ghe=n(HSe,"STRONG",{});var iTt=s(Ghe);mBo=r(iTt,"deberta"),iTt.forEach(t),fBo=r(HSe," \u2014 "),oV=n(HSe,"A",{href:!0});var dTt=s(oV);gBo=r(dTt,"DebertaForMaskedLM"),dTt.forEach(t),hBo=r(HSe," (DeBERTa model)"),HSe.forEach(t),uBo=i(H),Xb=n(H,"LI",{});var USe=s(Xb);Ohe=n(USe,"STRONG",{});var cTt=s(Ohe);pBo=r(cTt,"deberta-v2"),cTt.forEach(t),_Bo=r(USe," \u2014 "),rV=n(USe,"A",{href:!0});var mTt=s(rV);bBo=r(mTt,"DebertaV2ForMaskedLM"),mTt.forEach(t),vBo=r(USe," (DeBERTa-v2 model)"),USe.forEach(t),FBo=i(H),zb=n(H,"LI",{});var JSe=s(zb);Vhe=n(JSe,"STRONG",{});var fTt=s(Vhe);TBo=r(fTt,"distilbert"),fTt.forEach(t),MBo=r(JSe," \u2014 "),tV=n(JSe,"A",{href:!0});var gTt=s(tV);EBo=r(gTt,"DistilBertForMaskedLM"),gTt.forEach(t),CBo=r(JSe," (DistilBERT model)"),JSe.forEach(t),wBo=i(H),Qb=n(H,"LI",{});var YSe=s(Qb);Xhe=n(YSe,"STRONG",{});var hTt=s(Xhe);ABo=r(hTt,"electra"),hTt.forEach(t),LBo=r(YSe," \u2014 "),aV=n(YSe,"A",{href:!0});var uTt=s(aV);yBo=r(uTt,"ElectraForMaskedLM"),uTt.forEach(t),xBo=r(YSe," (ELECTRA model)"),YSe.forEach(t),$Bo=i(H),Wb=n(H,"LI",{});var KSe=s(Wb);zhe=n(KSe,"STRONG",{});var pTt=s(zhe);kBo=r(pTt,"flaubert"),pTt.forEach(t),SBo=r(KSe," \u2014 "),nV=n(KSe,"A",{href:!0});var _Tt=s(nV);RBo=r(_Tt,"FlaubertWithLMHeadModel"),_Tt.forEach(t),PBo=r(KSe," (FlauBERT model)"),KSe.forEach(t),BBo=i(H),Hb=n(H,"LI",{});var ZSe=s(Hb);Qhe=n(ZSe,"STRONG",{});var bTt=s(Qhe);NBo=r(bTt,"fnet"),bTt.forEach(t),IBo=r(ZSe," \u2014 "),sV=n(ZSe,"A",{href:!0});var vTt=s(sV);qBo=r(vTt,"FNetForMaskedLM"),vTt.forEach(t),jBo=r(ZSe," (FNet model)"),ZSe.forEach(t),DBo=i(H),Ub=n(H,"LI",{});var eRe=s(Ub);Whe=n(eRe,"STRONG",{});var FTt=s(Whe);GBo=r(FTt,"funnel"),FTt.forEach(t),OBo=r(eRe," \u2014 "),lV=n(eRe,"A",{href:!0});var TTt=s(lV);VBo=r(TTt,"FunnelForMaskedLM"),TTt.forEach(t),XBo=r(eRe," (Funnel Transformer model)"),eRe.forEach(t),zBo=i(H),Jb=n(H,"LI",{});var oRe=s(Jb);Hhe=n(oRe,"STRONG",{});var MTt=s(Hhe);QBo=r(MTt,"ibert"),MTt.forEach(t),WBo=r(oRe," \u2014 "),iV=n(oRe,"A",{href:!0});var ETt=s(iV);HBo=r(ETt,"IBertForMaskedLM"),ETt.forEach(t),UBo=r(oRe," (I-BERT model)"),oRe.forEach(t),JBo=i(H),Yb=n(H,"LI",{});var rRe=s(Yb);Uhe=n(rRe,"STRONG",{});var CTt=s(Uhe);YBo=r(CTt,"layoutlm"),CTt.forEach(t),KBo=r(rRe," \u2014 "),dV=n(rRe,"A",{href:!0});var wTt=s(dV);ZBo=r(wTt,"LayoutLMForMaskedLM"),wTt.forEach(t),eNo=r(rRe," (LayoutLM model)"),rRe.forEach(t),oNo=i(H),Kb=n(H,"LI",{});var tRe=s(Kb);Jhe=n(tRe,"STRONG",{});var ATt=s(Jhe);rNo=r(ATt,"longformer"),ATt.forEach(t),tNo=r(tRe," \u2014 "),cV=n(tRe,"A",{href:!0});var LTt=s(cV);aNo=r(LTt,"LongformerForMaskedLM"),LTt.forEach(t),nNo=r(tRe," (Longformer model)"),tRe.forEach(t),sNo=i(H),Zb=n(H,"LI",{});var aRe=s(Zb);Yhe=n(aRe,"STRONG",{});var yTt=s(Yhe);lNo=r(yTt,"luke"),yTt.forEach(t),iNo=r(aRe," \u2014 "),mV=n(aRe,"A",{href:!0});var xTt=s(mV);dNo=r(xTt,"LukeForMaskedLM"),xTt.forEach(t),cNo=r(aRe," (LUKE model)"),aRe.forEach(t),mNo=i(H),ev=n(H,"LI",{});var nRe=s(ev);Khe=n(nRe,"STRONG",{});var $Tt=s(Khe);fNo=r($Tt,"mbart"),$Tt.forEach(t),gNo=r(nRe," \u2014 "),fV=n(nRe,"A",{href:!0});var kTt=s(fV);hNo=r(kTt,"MBartForConditionalGeneration"),kTt.forEach(t),uNo=r(nRe," (mBART model)"),nRe.forEach(t),pNo=i(H),ov=n(H,"LI",{});var sRe=s(ov);Zhe=n(sRe,"STRONG",{});var STt=s(Zhe);_No=r(STt,"megatron-bert"),STt.forEach(t),bNo=r(sRe," \u2014 "),gV=n(sRe,"A",{href:!0});var RTt=s(gV);vNo=r(RTt,"MegatronBertForMaskedLM"),RTt.forEach(t),FNo=r(sRe," (Megatron-BERT model)"),sRe.forEach(t),TNo=i(H),rv=n(H,"LI",{});var lRe=s(rv);eue=n(lRe,"STRONG",{});var PTt=s(eue);MNo=r(PTt,"mobilebert"),PTt.forEach(t),ENo=r(lRe," \u2014 "),hV=n(lRe,"A",{href:!0});var BTt=s(hV);CNo=r(BTt,"MobileBertForMaskedLM"),BTt.forEach(t),wNo=r(lRe," (MobileBERT model)"),lRe.forEach(t),ANo=i(H),tv=n(H,"LI",{});var iRe=s(tv);oue=n(iRe,"STRONG",{});var NTt=s(oue);LNo=r(NTt,"mpnet"),NTt.forEach(t),yNo=r(iRe," \u2014 "),uV=n(iRe,"A",{href:!0});var ITt=s(uV);xNo=r(ITt,"MPNetForMaskedLM"),ITt.forEach(t),$No=r(iRe," (MPNet model)"),iRe.forEach(t),kNo=i(H),av=n(H,"LI",{});var dRe=s(av);rue=n(dRe,"STRONG",{});var qTt=s(rue);SNo=r(qTt,"mvp"),qTt.forEach(t),RNo=r(dRe," \u2014 "),pV=n(dRe,"A",{href:!0});var jTt=s(pV);PNo=r(jTt,"MvpForConditionalGeneration"),jTt.forEach(t),BNo=r(dRe," (MVP model)"),dRe.forEach(t),NNo=i(H),nv=n(H,"LI",{});var cRe=s(nv);tue=n(cRe,"STRONG",{});var DTt=s(tue);INo=r(DTt,"nezha"),DTt.forEach(t),qNo=r(cRe," \u2014 "),_V=n(cRe,"A",{href:!0});var GTt=s(_V);jNo=r(GTt,"NezhaForMaskedLM"),GTt.forEach(t),DNo=r(cRe," (Nezha model)"),cRe.forEach(t),GNo=i(H),sv=n(H,"LI",{});var mRe=s(sv);aue=n(mRe,"STRONG",{});var OTt=s(aue);ONo=r(OTt,"nystromformer"),OTt.forEach(t),VNo=r(mRe," \u2014 "),bV=n(mRe,"A",{href:!0});var VTt=s(bV);XNo=r(VTt,"NystromformerForMaskedLM"),VTt.forEach(t),zNo=r(mRe," (Nystr\xF6mformer model)"),mRe.forEach(t),QNo=i(H),lv=n(H,"LI",{});var fRe=s(lv);nue=n(fRe,"STRONG",{});var XTt=s(nue);WNo=r(XTt,"perceiver"),XTt.forEach(t),HNo=r(fRe," \u2014 "),vV=n(fRe,"A",{href:!0});var zTt=s(vV);UNo=r(zTt,"PerceiverForMaskedLM"),zTt.forEach(t),JNo=r(fRe," (Perceiver model)"),fRe.forEach(t),YNo=i(H),iv=n(H,"LI",{});var gRe=s(iv);sue=n(gRe,"STRONG",{});var QTt=s(sue);KNo=r(QTt,"qdqbert"),QTt.forEach(t),ZNo=r(gRe," \u2014 "),FV=n(gRe,"A",{href:!0});var WTt=s(FV);eIo=r(WTt,"QDQBertForMaskedLM"),WTt.forEach(t),oIo=r(gRe," (QDQBert model)"),gRe.forEach(t),rIo=i(H),dv=n(H,"LI",{});var hRe=s(dv);lue=n(hRe,"STRONG",{});var HTt=s(lue);tIo=r(HTt,"reformer"),HTt.forEach(t),aIo=r(hRe," \u2014 "),TV=n(hRe,"A",{href:!0});var UTt=s(TV);nIo=r(UTt,"ReformerForMaskedLM"),UTt.forEach(t),sIo=r(hRe," (Reformer model)"),hRe.forEach(t),lIo=i(H),cv=n(H,"LI",{});var uRe=s(cv);iue=n(uRe,"STRONG",{});var JTt=s(iue);iIo=r(JTt,"rembert"),JTt.forEach(t),dIo=r(uRe," \u2014 "),MV=n(uRe,"A",{href:!0});var YTt=s(MV);cIo=r(YTt,"RemBertForMaskedLM"),YTt.forEach(t),mIo=r(uRe," (RemBERT model)"),uRe.forEach(t),fIo=i(H),mv=n(H,"LI",{});var pRe=s(mv);due=n(pRe,"STRONG",{});var KTt=s(due);gIo=r(KTt,"roberta"),KTt.forEach(t),hIo=r(pRe," \u2014 "),EV=n(pRe,"A",{href:!0});var ZTt=s(EV);uIo=r(ZTt,"RobertaForMaskedLM"),ZTt.forEach(t),pIo=r(pRe," (RoBERTa model)"),pRe.forEach(t),_Io=i(H),fv=n(H,"LI",{});var _Re=s(fv);cue=n(_Re,"STRONG",{});var eMt=s(cue);bIo=r(eMt,"roformer"),eMt.forEach(t),vIo=r(_Re," \u2014 "),CV=n(_Re,"A",{href:!0});var oMt=s(CV);FIo=r(oMt,"RoFormerForMaskedLM"),oMt.forEach(t),TIo=r(_Re," (RoFormer model)"),_Re.forEach(t),MIo=i(H),gv=n(H,"LI",{});var bRe=s(gv);mue=n(bRe,"STRONG",{});var rMt=s(mue);EIo=r(rMt,"squeezebert"),rMt.forEach(t),CIo=r(bRe," \u2014 "),wV=n(bRe,"A",{href:!0});var tMt=s(wV);wIo=r(tMt,"SqueezeBertForMaskedLM"),tMt.forEach(t),AIo=r(bRe," (SqueezeBERT model)"),bRe.forEach(t),LIo=i(H),hv=n(H,"LI",{});var vRe=s(hv);fue=n(vRe,"STRONG",{});var aMt=s(fue);yIo=r(aMt,"tapas"),aMt.forEach(t),xIo=r(vRe," \u2014 "),AV=n(vRe,"A",{href:!0});var nMt=s(AV);$Io=r(nMt,"TapasForMaskedLM"),nMt.forEach(t),kIo=r(vRe," (TAPAS model)"),vRe.forEach(t),SIo=i(H),uv=n(H,"LI",{});var FRe=s(uv);gue=n(FRe,"STRONG",{});var sMt=s(gue);RIo=r(sMt,"wav2vec2"),sMt.forEach(t),PIo=r(FRe," \u2014 "),hue=n(FRe,"CODE",{});var lMt=s(hue);BIo=r(lMt,"Wav2Vec2ForMaskedLM"),lMt.forEach(t),NIo=r(FRe," (Wav2Vec2 model)"),FRe.forEach(t),IIo=i(H),pv=n(H,"LI",{});var TRe=s(pv);uue=n(TRe,"STRONG",{});var iMt=s(uue);qIo=r(iMt,"xlm"),iMt.forEach(t),jIo=r(TRe," \u2014 "),LV=n(TRe,"A",{href:!0});var dMt=s(LV);DIo=r(dMt,"XLMWithLMHeadModel"),dMt.forEach(t),GIo=r(TRe," (XLM model)"),TRe.forEach(t),OIo=i(H),_v=n(H,"LI",{});var MRe=s(_v);pue=n(MRe,"STRONG",{});var cMt=s(pue);VIo=r(cMt,"xlm-roberta"),cMt.forEach(t),XIo=r(MRe," \u2014 "),yV=n(MRe,"A",{href:!0});var mMt=s(yV);zIo=r(mMt,"XLMRobertaForMaskedLM"),mMt.forEach(t),QIo=r(MRe," (XLM-RoBERTa model)"),MRe.forEach(t),WIo=i(H),bv=n(H,"LI",{});var ERe=s(bv);_ue=n(ERe,"STRONG",{});var fMt=s(_ue);HIo=r(fMt,"xlm-roberta-xl"),fMt.forEach(t),UIo=r(ERe," \u2014 "),xV=n(ERe,"A",{href:!0});var gMt=s(xV);JIo=r(gMt,"XLMRobertaXLForMaskedLM"),gMt.forEach(t),YIo=r(ERe," (XLM-RoBERTa-XL model)"),ERe.forEach(t),KIo=i(H),vv=n(H,"LI",{});var CRe=s(vv);bue=n(CRe,"STRONG",{});var hMt=s(bue);ZIo=r(hMt,"yoso"),hMt.forEach(t),eqo=r(CRe," \u2014 "),$V=n(CRe,"A",{href:!0});var uMt=s($V);oqo=r(uMt,"YosoForMaskedLM"),uMt.forEach(t),rqo=r(CRe," (YOSO model)"),CRe.forEach(t),H.forEach(t),tqo=i(ca),Fv=n(ca,"P",{});var wRe=s(Fv);aqo=r(wRe,"The model is set in evaluation mode by default using "),vue=n(wRe,"CODE",{});var pMt=s(vue);nqo=r(pMt,"model.eval()"),pMt.forEach(t),sqo=r(wRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fue=n(wRe,"CODE",{});var _Mt=s(Fue);lqo=r(_Mt,"model.train()"),_Mt.forEach(t),wRe.forEach(t),iqo=i(ca),T(Tv.$$.fragment,ca),ca.forEach(t),sl.forEach(t),BXe=i(m),ed=n(m,"H2",{class:!0});var GQe=s(ed);Mv=n(GQe,"A",{id:!0,class:!0,href:!0});var bMt=s(Mv);Tue=n(bMt,"SPAN",{});var vMt=s(Tue);T(e8.$$.fragment,vMt),vMt.forEach(t),bMt.forEach(t),dqo=i(GQe),Mue=n(GQe,"SPAN",{});var FMt=s(Mue);cqo=r(FMt,"AutoModelForSeq2SeqLM"),FMt.forEach(t),GQe.forEach(t),NXe=i(m),Po=n(m,"DIV",{class:!0});var ll=s(Po);T(o8.$$.fragment,ll),mqo=i(ll),od=n(ll,"P",{});var Ure=s(od);fqo=r(Ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kV=n(Ure,"A",{href:!0});var TMt=s(kV);gqo=r(TMt,"from_pretrained()"),TMt.forEach(t),hqo=r(Ure," class method or the "),SV=n(Ure,"A",{href:!0});var MMt=s(SV);uqo=r(MMt,"from_config()"),MMt.forEach(t),pqo=r(Ure,` class
method.`),Ure.forEach(t),_qo=i(ll),r8=n(ll,"P",{});var OQe=s(r8);bqo=r(OQe,"This class cannot be instantiated directly using "),Eue=n(OQe,"CODE",{});var EMt=s(Eue);vqo=r(EMt,"__init__()"),EMt.forEach(t),Fqo=r(OQe," (throws an error)."),OQe.forEach(t),Tqo=i(ll),ft=n(ll,"DIV",{class:!0});var F7=s(ft);T(t8.$$.fragment,F7),Mqo=i(F7),Cue=n(F7,"P",{});var CMt=s(Cue);Eqo=r(CMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),CMt.forEach(t),Cqo=i(F7),rd=n(F7,"P",{});var Jre=s(rd);wqo=r(Jre,`Note:
Loading a model from its configuration file does `),wue=n(Jre,"STRONG",{});var wMt=s(wue);Aqo=r(wMt,"not"),wMt.forEach(t),Lqo=r(Jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=n(Jre,"A",{href:!0});var AMt=s(RV);yqo=r(AMt,"from_pretrained()"),AMt.forEach(t),xqo=r(Jre," to load the model weights."),Jre.forEach(t),$qo=i(F7),T(Ev.$$.fragment,F7),F7.forEach(t),kqo=i(ll),oo=n(ll,"DIV",{class:!0});var ma=s(oo);T(a8.$$.fragment,ma),Sqo=i(ma),Aue=n(ma,"P",{});var LMt=s(Aue);Rqo=r(LMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),LMt.forEach(t),Pqo=i(ma),Da=n(ma,"P",{});var T7=s(Da);Bqo=r(T7,"The model class to instantiate is selected based on the "),Lue=n(T7,"CODE",{});var yMt=s(Lue);Nqo=r(yMt,"model_type"),yMt.forEach(t),Iqo=r(T7,` property of the config object (either
passed as an argument or loaded from `),yue=n(T7,"CODE",{});var xMt=s(yue);qqo=r(xMt,"pretrained_model_name_or_path"),xMt.forEach(t),jqo=r(T7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xue=n(T7,"CODE",{});var $Mt=s(xue);Dqo=r($Mt,"pretrained_model_name_or_path"),$Mt.forEach(t),Gqo=r(T7,":"),T7.forEach(t),Oqo=i(ma),me=n(ma,"UL",{});var pe=s(me);Cv=n(pe,"LI",{});var ARe=s(Cv);$ue=n(ARe,"STRONG",{});var kMt=s($ue);Vqo=r(kMt,"bart"),kMt.forEach(t),Xqo=r(ARe," \u2014 "),PV=n(ARe,"A",{href:!0});var SMt=s(PV);zqo=r(SMt,"BartForConditionalGeneration"),SMt.forEach(t),Qqo=r(ARe," (BART model)"),ARe.forEach(t),Wqo=i(pe),wv=n(pe,"LI",{});var LRe=s(wv);kue=n(LRe,"STRONG",{});var RMt=s(kue);Hqo=r(RMt,"bigbird_pegasus"),RMt.forEach(t),Uqo=r(LRe," \u2014 "),BV=n(LRe,"A",{href:!0});var PMt=s(BV);Jqo=r(PMt,"BigBirdPegasusForConditionalGeneration"),PMt.forEach(t),Yqo=r(LRe," (BigBird-Pegasus model)"),LRe.forEach(t),Kqo=i(pe),Av=n(pe,"LI",{});var yRe=s(Av);Sue=n(yRe,"STRONG",{});var BMt=s(Sue);Zqo=r(BMt,"blenderbot"),BMt.forEach(t),ejo=r(yRe," \u2014 "),NV=n(yRe,"A",{href:!0});var NMt=s(NV);ojo=r(NMt,"BlenderbotForConditionalGeneration"),NMt.forEach(t),rjo=r(yRe," (Blenderbot model)"),yRe.forEach(t),tjo=i(pe),Lv=n(pe,"LI",{});var xRe=s(Lv);Rue=n(xRe,"STRONG",{});var IMt=s(Rue);ajo=r(IMt,"blenderbot-small"),IMt.forEach(t),njo=r(xRe," \u2014 "),IV=n(xRe,"A",{href:!0});var qMt=s(IV);sjo=r(qMt,"BlenderbotSmallForConditionalGeneration"),qMt.forEach(t),ljo=r(xRe," (BlenderbotSmall model)"),xRe.forEach(t),ijo=i(pe),yv=n(pe,"LI",{});var $Re=s(yv);Pue=n($Re,"STRONG",{});var jMt=s(Pue);djo=r(jMt,"encoder-decoder"),jMt.forEach(t),cjo=r($Re," \u2014 "),qV=n($Re,"A",{href:!0});var DMt=s(qV);mjo=r(DMt,"EncoderDecoderModel"),DMt.forEach(t),fjo=r($Re," (Encoder decoder model)"),$Re.forEach(t),gjo=i(pe),xv=n(pe,"LI",{});var kRe=s(xv);Bue=n(kRe,"STRONG",{});var GMt=s(Bue);hjo=r(GMt,"fsmt"),GMt.forEach(t),ujo=r(kRe," \u2014 "),jV=n(kRe,"A",{href:!0});var OMt=s(jV);pjo=r(OMt,"FSMTForConditionalGeneration"),OMt.forEach(t),_jo=r(kRe," (FairSeq Machine-Translation model)"),kRe.forEach(t),bjo=i(pe),$v=n(pe,"LI",{});var SRe=s($v);Nue=n(SRe,"STRONG",{});var VMt=s(Nue);vjo=r(VMt,"led"),VMt.forEach(t),Fjo=r(SRe," \u2014 "),DV=n(SRe,"A",{href:!0});var XMt=s(DV);Tjo=r(XMt,"LEDForConditionalGeneration"),XMt.forEach(t),Mjo=r(SRe," (LED model)"),SRe.forEach(t),Ejo=i(pe),kv=n(pe,"LI",{});var RRe=s(kv);Iue=n(RRe,"STRONG",{});var zMt=s(Iue);Cjo=r(zMt,"longt5"),zMt.forEach(t),wjo=r(RRe," \u2014 "),GV=n(RRe,"A",{href:!0});var QMt=s(GV);Ajo=r(QMt,"LongT5ForConditionalGeneration"),QMt.forEach(t),Ljo=r(RRe," (LongT5 model)"),RRe.forEach(t),yjo=i(pe),Sv=n(pe,"LI",{});var PRe=s(Sv);que=n(PRe,"STRONG",{});var WMt=s(que);xjo=r(WMt,"m2m_100"),WMt.forEach(t),$jo=r(PRe," \u2014 "),OV=n(PRe,"A",{href:!0});var HMt=s(OV);kjo=r(HMt,"M2M100ForConditionalGeneration"),HMt.forEach(t),Sjo=r(PRe," (M2M100 model)"),PRe.forEach(t),Rjo=i(pe),Rv=n(pe,"LI",{});var BRe=s(Rv);jue=n(BRe,"STRONG",{});var UMt=s(jue);Pjo=r(UMt,"marian"),UMt.forEach(t),Bjo=r(BRe," \u2014 "),VV=n(BRe,"A",{href:!0});var JMt=s(VV);Njo=r(JMt,"MarianMTModel"),JMt.forEach(t),Ijo=r(BRe," (Marian model)"),BRe.forEach(t),qjo=i(pe),Pv=n(pe,"LI",{});var NRe=s(Pv);Due=n(NRe,"STRONG",{});var YMt=s(Due);jjo=r(YMt,"mbart"),YMt.forEach(t),Djo=r(NRe," \u2014 "),XV=n(NRe,"A",{href:!0});var KMt=s(XV);Gjo=r(KMt,"MBartForConditionalGeneration"),KMt.forEach(t),Ojo=r(NRe," (mBART model)"),NRe.forEach(t),Vjo=i(pe),Bv=n(pe,"LI",{});var IRe=s(Bv);Gue=n(IRe,"STRONG",{});var ZMt=s(Gue);Xjo=r(ZMt,"mt5"),ZMt.forEach(t),zjo=r(IRe," \u2014 "),zV=n(IRe,"A",{href:!0});var e4t=s(zV);Qjo=r(e4t,"MT5ForConditionalGeneration"),e4t.forEach(t),Wjo=r(IRe," (MT5 model)"),IRe.forEach(t),Hjo=i(pe),Nv=n(pe,"LI",{});var qRe=s(Nv);Oue=n(qRe,"STRONG",{});var o4t=s(Oue);Ujo=r(o4t,"mvp"),o4t.forEach(t),Jjo=r(qRe," \u2014 "),QV=n(qRe,"A",{href:!0});var r4t=s(QV);Yjo=r(r4t,"MvpForConditionalGeneration"),r4t.forEach(t),Kjo=r(qRe," (MVP model)"),qRe.forEach(t),Zjo=i(pe),Iv=n(pe,"LI",{});var jRe=s(Iv);Vue=n(jRe,"STRONG",{});var t4t=s(Vue);eDo=r(t4t,"nllb"),t4t.forEach(t),oDo=r(jRe," \u2014 "),WV=n(jRe,"A",{href:!0});var a4t=s(WV);rDo=r(a4t,"M2M100ForConditionalGeneration"),a4t.forEach(t),tDo=r(jRe," (NLLB model)"),jRe.forEach(t),aDo=i(pe),qv=n(pe,"LI",{});var DRe=s(qv);Xue=n(DRe,"STRONG",{});var n4t=s(Xue);nDo=r(n4t,"pegasus"),n4t.forEach(t),sDo=r(DRe," \u2014 "),HV=n(DRe,"A",{href:!0});var s4t=s(HV);lDo=r(s4t,"PegasusForConditionalGeneration"),s4t.forEach(t),iDo=r(DRe," (Pegasus model)"),DRe.forEach(t),dDo=i(pe),jv=n(pe,"LI",{});var GRe=s(jv);zue=n(GRe,"STRONG",{});var l4t=s(zue);cDo=r(l4t,"plbart"),l4t.forEach(t),mDo=r(GRe," \u2014 "),UV=n(GRe,"A",{href:!0});var i4t=s(UV);fDo=r(i4t,"PLBartForConditionalGeneration"),i4t.forEach(t),gDo=r(GRe," (PLBart model)"),GRe.forEach(t),hDo=i(pe),Dv=n(pe,"LI",{});var ORe=s(Dv);Que=n(ORe,"STRONG",{});var d4t=s(Que);uDo=r(d4t,"prophetnet"),d4t.forEach(t),pDo=r(ORe," \u2014 "),JV=n(ORe,"A",{href:!0});var c4t=s(JV);_Do=r(c4t,"ProphetNetForConditionalGeneration"),c4t.forEach(t),bDo=r(ORe," (ProphetNet model)"),ORe.forEach(t),vDo=i(pe),Gv=n(pe,"LI",{});var VRe=s(Gv);Wue=n(VRe,"STRONG",{});var m4t=s(Wue);FDo=r(m4t,"t5"),m4t.forEach(t),TDo=r(VRe," \u2014 "),YV=n(VRe,"A",{href:!0});var f4t=s(YV);MDo=r(f4t,"T5ForConditionalGeneration"),f4t.forEach(t),EDo=r(VRe," (T5 model)"),VRe.forEach(t),CDo=i(pe),Ov=n(pe,"LI",{});var XRe=s(Ov);Hue=n(XRe,"STRONG",{});var g4t=s(Hue);wDo=r(g4t,"xlm-prophetnet"),g4t.forEach(t),ADo=r(XRe," \u2014 "),KV=n(XRe,"A",{href:!0});var h4t=s(KV);LDo=r(h4t,"XLMProphetNetForConditionalGeneration"),h4t.forEach(t),yDo=r(XRe," (XLM-ProphetNet model)"),XRe.forEach(t),pe.forEach(t),xDo=i(ma),Vv=n(ma,"P",{});var zRe=s(Vv);$Do=r(zRe,"The model is set in evaluation mode by default using "),Uue=n(zRe,"CODE",{});var u4t=s(Uue);kDo=r(u4t,"model.eval()"),u4t.forEach(t),SDo=r(zRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jue=n(zRe,"CODE",{});var p4t=s(Jue);RDo=r(p4t,"model.train()"),p4t.forEach(t),zRe.forEach(t),PDo=i(ma),T(Xv.$$.fragment,ma),ma.forEach(t),ll.forEach(t),IXe=i(m),td=n(m,"H2",{class:!0});var VQe=s(td);zv=n(VQe,"A",{id:!0,class:!0,href:!0});var _4t=s(zv);Yue=n(_4t,"SPAN",{});var b4t=s(Yue);T(n8.$$.fragment,b4t),b4t.forEach(t),_4t.forEach(t),BDo=i(VQe),Kue=n(VQe,"SPAN",{});var v4t=s(Kue);NDo=r(v4t,"AutoModelForSequenceClassification"),v4t.forEach(t),VQe.forEach(t),qXe=i(m),Bo=n(m,"DIV",{class:!0});var il=s(Bo);T(s8.$$.fragment,il),IDo=i(il),ad=n(il,"P",{});var Yre=s(ad);qDo=r(Yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZV=n(Yre,"A",{href:!0});var F4t=s(ZV);jDo=r(F4t,"from_pretrained()"),F4t.forEach(t),DDo=r(Yre," class method or the "),eX=n(Yre,"A",{href:!0});var T4t=s(eX);GDo=r(T4t,"from_config()"),T4t.forEach(t),ODo=r(Yre,` class
method.`),Yre.forEach(t),VDo=i(il),l8=n(il,"P",{});var XQe=s(l8);XDo=r(XQe,"This class cannot be instantiated directly using "),Zue=n(XQe,"CODE",{});var M4t=s(Zue);zDo=r(M4t,"__init__()"),M4t.forEach(t),QDo=r(XQe," (throws an error)."),XQe.forEach(t),WDo=i(il),gt=n(il,"DIV",{class:!0});var M7=s(gt);T(i8.$$.fragment,M7),HDo=i(M7),epe=n(M7,"P",{});var E4t=s(epe);UDo=r(E4t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),E4t.forEach(t),JDo=i(M7),nd=n(M7,"P",{});var Kre=s(nd);YDo=r(Kre,`Note:
Loading a model from its configuration file does `),ope=n(Kre,"STRONG",{});var C4t=s(ope);KDo=r(C4t,"not"),C4t.forEach(t),ZDo=r(Kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=n(Kre,"A",{href:!0});var w4t=s(oX);eGo=r(w4t,"from_pretrained()"),w4t.forEach(t),oGo=r(Kre," to load the model weights."),Kre.forEach(t),rGo=i(M7),T(Qv.$$.fragment,M7),M7.forEach(t),tGo=i(il),ro=n(il,"DIV",{class:!0});var fa=s(ro);T(d8.$$.fragment,fa),aGo=i(fa),rpe=n(fa,"P",{});var A4t=s(rpe);nGo=r(A4t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),A4t.forEach(t),sGo=i(fa),Ga=n(fa,"P",{});var E7=s(Ga);lGo=r(E7,"The model class to instantiate is selected based on the "),tpe=n(E7,"CODE",{});var L4t=s(tpe);iGo=r(L4t,"model_type"),L4t.forEach(t),dGo=r(E7,` property of the config object (either
passed as an argument or loaded from `),ape=n(E7,"CODE",{});var y4t=s(ape);cGo=r(y4t,"pretrained_model_name_or_path"),y4t.forEach(t),mGo=r(E7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),npe=n(E7,"CODE",{});var x4t=s(npe);fGo=r(x4t,"pretrained_model_name_or_path"),x4t.forEach(t),gGo=r(E7,":"),E7.forEach(t),hGo=i(fa),B=n(fa,"UL",{});var j=s(B);Wv=n(j,"LI",{});var QRe=s(Wv);spe=n(QRe,"STRONG",{});var $4t=s(spe);uGo=r($4t,"albert"),$4t.forEach(t),pGo=r(QRe," \u2014 "),rX=n(QRe,"A",{href:!0});var k4t=s(rX);_Go=r(k4t,"AlbertForSequenceClassification"),k4t.forEach(t),bGo=r(QRe," (ALBERT model)"),QRe.forEach(t),vGo=i(j),Hv=n(j,"LI",{});var WRe=s(Hv);lpe=n(WRe,"STRONG",{});var S4t=s(lpe);FGo=r(S4t,"bart"),S4t.forEach(t),TGo=r(WRe," \u2014 "),tX=n(WRe,"A",{href:!0});var R4t=s(tX);MGo=r(R4t,"BartForSequenceClassification"),R4t.forEach(t),EGo=r(WRe," (BART model)"),WRe.forEach(t),CGo=i(j),Uv=n(j,"LI",{});var HRe=s(Uv);ipe=n(HRe,"STRONG",{});var P4t=s(ipe);wGo=r(P4t,"bert"),P4t.forEach(t),AGo=r(HRe," \u2014 "),aX=n(HRe,"A",{href:!0});var B4t=s(aX);LGo=r(B4t,"BertForSequenceClassification"),B4t.forEach(t),yGo=r(HRe," (BERT model)"),HRe.forEach(t),xGo=i(j),Jv=n(j,"LI",{});var URe=s(Jv);dpe=n(URe,"STRONG",{});var N4t=s(dpe);$Go=r(N4t,"big_bird"),N4t.forEach(t),kGo=r(URe," \u2014 "),nX=n(URe,"A",{href:!0});var I4t=s(nX);SGo=r(I4t,"BigBirdForSequenceClassification"),I4t.forEach(t),RGo=r(URe," (BigBird model)"),URe.forEach(t),PGo=i(j),Yv=n(j,"LI",{});var JRe=s(Yv);cpe=n(JRe,"STRONG",{});var q4t=s(cpe);BGo=r(q4t,"bigbird_pegasus"),q4t.forEach(t),NGo=r(JRe," \u2014 "),sX=n(JRe,"A",{href:!0});var j4t=s(sX);IGo=r(j4t,"BigBirdPegasusForSequenceClassification"),j4t.forEach(t),qGo=r(JRe," (BigBird-Pegasus model)"),JRe.forEach(t),jGo=i(j),Kv=n(j,"LI",{});var YRe=s(Kv);mpe=n(YRe,"STRONG",{});var D4t=s(mpe);DGo=r(D4t,"bloom"),D4t.forEach(t),GGo=r(YRe," \u2014 "),lX=n(YRe,"A",{href:!0});var G4t=s(lX);OGo=r(G4t,"BloomForSequenceClassification"),G4t.forEach(t),VGo=r(YRe," (BLOOM model)"),YRe.forEach(t),XGo=i(j),Zv=n(j,"LI",{});var KRe=s(Zv);fpe=n(KRe,"STRONG",{});var O4t=s(fpe);zGo=r(O4t,"camembert"),O4t.forEach(t),QGo=r(KRe," \u2014 "),iX=n(KRe,"A",{href:!0});var V4t=s(iX);WGo=r(V4t,"CamembertForSequenceClassification"),V4t.forEach(t),HGo=r(KRe," (CamemBERT model)"),KRe.forEach(t),UGo=i(j),e1=n(j,"LI",{});var ZRe=s(e1);gpe=n(ZRe,"STRONG",{});var X4t=s(gpe);JGo=r(X4t,"canine"),X4t.forEach(t),YGo=r(ZRe," \u2014 "),dX=n(ZRe,"A",{href:!0});var z4t=s(dX);KGo=r(z4t,"CanineForSequenceClassification"),z4t.forEach(t),ZGo=r(ZRe," (CANINE model)"),ZRe.forEach(t),eOo=i(j),o1=n(j,"LI",{});var ePe=s(o1);hpe=n(ePe,"STRONG",{});var Q4t=s(hpe);oOo=r(Q4t,"convbert"),Q4t.forEach(t),rOo=r(ePe," \u2014 "),cX=n(ePe,"A",{href:!0});var W4t=s(cX);tOo=r(W4t,"ConvBertForSequenceClassification"),W4t.forEach(t),aOo=r(ePe," (ConvBERT model)"),ePe.forEach(t),nOo=i(j),r1=n(j,"LI",{});var oPe=s(r1);upe=n(oPe,"STRONG",{});var H4t=s(upe);sOo=r(H4t,"ctrl"),H4t.forEach(t),lOo=r(oPe," \u2014 "),mX=n(oPe,"A",{href:!0});var U4t=s(mX);iOo=r(U4t,"CTRLForSequenceClassification"),U4t.forEach(t),dOo=r(oPe," (CTRL model)"),oPe.forEach(t),cOo=i(j),t1=n(j,"LI",{});var rPe=s(t1);ppe=n(rPe,"STRONG",{});var J4t=s(ppe);mOo=r(J4t,"data2vec-text"),J4t.forEach(t),fOo=r(rPe," \u2014 "),fX=n(rPe,"A",{href:!0});var Y4t=s(fX);gOo=r(Y4t,"Data2VecTextForSequenceClassification"),Y4t.forEach(t),hOo=r(rPe," (Data2VecText model)"),rPe.forEach(t),uOo=i(j),a1=n(j,"LI",{});var tPe=s(a1);_pe=n(tPe,"STRONG",{});var K4t=s(_pe);pOo=r(K4t,"deberta"),K4t.forEach(t),_Oo=r(tPe," \u2014 "),gX=n(tPe,"A",{href:!0});var Z4t=s(gX);bOo=r(Z4t,"DebertaForSequenceClassification"),Z4t.forEach(t),vOo=r(tPe," (DeBERTa model)"),tPe.forEach(t),FOo=i(j),n1=n(j,"LI",{});var aPe=s(n1);bpe=n(aPe,"STRONG",{});var eEt=s(bpe);TOo=r(eEt,"deberta-v2"),eEt.forEach(t),MOo=r(aPe," \u2014 "),hX=n(aPe,"A",{href:!0});var oEt=s(hX);EOo=r(oEt,"DebertaV2ForSequenceClassification"),oEt.forEach(t),COo=r(aPe," (DeBERTa-v2 model)"),aPe.forEach(t),wOo=i(j),s1=n(j,"LI",{});var nPe=s(s1);vpe=n(nPe,"STRONG",{});var rEt=s(vpe);AOo=r(rEt,"distilbert"),rEt.forEach(t),LOo=r(nPe," \u2014 "),uX=n(nPe,"A",{href:!0});var tEt=s(uX);yOo=r(tEt,"DistilBertForSequenceClassification"),tEt.forEach(t),xOo=r(nPe," (DistilBERT model)"),nPe.forEach(t),$Oo=i(j),l1=n(j,"LI",{});var sPe=s(l1);Fpe=n(sPe,"STRONG",{});var aEt=s(Fpe);kOo=r(aEt,"electra"),aEt.forEach(t),SOo=r(sPe," \u2014 "),pX=n(sPe,"A",{href:!0});var nEt=s(pX);ROo=r(nEt,"ElectraForSequenceClassification"),nEt.forEach(t),POo=r(sPe," (ELECTRA model)"),sPe.forEach(t),BOo=i(j),i1=n(j,"LI",{});var lPe=s(i1);Tpe=n(lPe,"STRONG",{});var sEt=s(Tpe);NOo=r(sEt,"flaubert"),sEt.forEach(t),IOo=r(lPe," \u2014 "),_X=n(lPe,"A",{href:!0});var lEt=s(_X);qOo=r(lEt,"FlaubertForSequenceClassification"),lEt.forEach(t),jOo=r(lPe," (FlauBERT model)"),lPe.forEach(t),DOo=i(j),d1=n(j,"LI",{});var iPe=s(d1);Mpe=n(iPe,"STRONG",{});var iEt=s(Mpe);GOo=r(iEt,"fnet"),iEt.forEach(t),OOo=r(iPe," \u2014 "),bX=n(iPe,"A",{href:!0});var dEt=s(bX);VOo=r(dEt,"FNetForSequenceClassification"),dEt.forEach(t),XOo=r(iPe," (FNet model)"),iPe.forEach(t),zOo=i(j),c1=n(j,"LI",{});var dPe=s(c1);Epe=n(dPe,"STRONG",{});var cEt=s(Epe);QOo=r(cEt,"funnel"),cEt.forEach(t),WOo=r(dPe," \u2014 "),vX=n(dPe,"A",{href:!0});var mEt=s(vX);HOo=r(mEt,"FunnelForSequenceClassification"),mEt.forEach(t),UOo=r(dPe," (Funnel Transformer model)"),dPe.forEach(t),JOo=i(j),m1=n(j,"LI",{});var cPe=s(m1);Cpe=n(cPe,"STRONG",{});var fEt=s(Cpe);YOo=r(fEt,"gpt2"),fEt.forEach(t),KOo=r(cPe," \u2014 "),FX=n(cPe,"A",{href:!0});var gEt=s(FX);ZOo=r(gEt,"GPT2ForSequenceClassification"),gEt.forEach(t),eVo=r(cPe," (OpenAI GPT-2 model)"),cPe.forEach(t),oVo=i(j),f1=n(j,"LI",{});var mPe=s(f1);wpe=n(mPe,"STRONG",{});var hEt=s(wpe);rVo=r(hEt,"gpt_neo"),hEt.forEach(t),tVo=r(mPe," \u2014 "),TX=n(mPe,"A",{href:!0});var uEt=s(TX);aVo=r(uEt,"GPTNeoForSequenceClassification"),uEt.forEach(t),nVo=r(mPe," (GPT Neo model)"),mPe.forEach(t),sVo=i(j),g1=n(j,"LI",{});var fPe=s(g1);Ape=n(fPe,"STRONG",{});var pEt=s(Ape);lVo=r(pEt,"gptj"),pEt.forEach(t),iVo=r(fPe," \u2014 "),MX=n(fPe,"A",{href:!0});var _Et=s(MX);dVo=r(_Et,"GPTJForSequenceClassification"),_Et.forEach(t),cVo=r(fPe," (GPT-J model)"),fPe.forEach(t),mVo=i(j),h1=n(j,"LI",{});var gPe=s(h1);Lpe=n(gPe,"STRONG",{});var bEt=s(Lpe);fVo=r(bEt,"ibert"),bEt.forEach(t),gVo=r(gPe," \u2014 "),EX=n(gPe,"A",{href:!0});var vEt=s(EX);hVo=r(vEt,"IBertForSequenceClassification"),vEt.forEach(t),uVo=r(gPe," (I-BERT model)"),gPe.forEach(t),pVo=i(j),u1=n(j,"LI",{});var hPe=s(u1);ype=n(hPe,"STRONG",{});var FEt=s(ype);_Vo=r(FEt,"layoutlm"),FEt.forEach(t),bVo=r(hPe," \u2014 "),CX=n(hPe,"A",{href:!0});var TEt=s(CX);vVo=r(TEt,"LayoutLMForSequenceClassification"),TEt.forEach(t),FVo=r(hPe," (LayoutLM model)"),hPe.forEach(t),TVo=i(j),p1=n(j,"LI",{});var uPe=s(p1);xpe=n(uPe,"STRONG",{});var MEt=s(xpe);MVo=r(MEt,"layoutlmv2"),MEt.forEach(t),EVo=r(uPe," \u2014 "),wX=n(uPe,"A",{href:!0});var EEt=s(wX);CVo=r(EEt,"LayoutLMv2ForSequenceClassification"),EEt.forEach(t),wVo=r(uPe," (LayoutLMv2 model)"),uPe.forEach(t),AVo=i(j),_1=n(j,"LI",{});var pPe=s(_1);$pe=n(pPe,"STRONG",{});var CEt=s($pe);LVo=r(CEt,"layoutlmv3"),CEt.forEach(t),yVo=r(pPe," \u2014 "),AX=n(pPe,"A",{href:!0});var wEt=s(AX);xVo=r(wEt,"LayoutLMv3ForSequenceClassification"),wEt.forEach(t),$Vo=r(pPe," (LayoutLMv3 model)"),pPe.forEach(t),kVo=i(j),b1=n(j,"LI",{});var _Pe=s(b1);kpe=n(_Pe,"STRONG",{});var AEt=s(kpe);SVo=r(AEt,"led"),AEt.forEach(t),RVo=r(_Pe," \u2014 "),LX=n(_Pe,"A",{href:!0});var LEt=s(LX);PVo=r(LEt,"LEDForSequenceClassification"),LEt.forEach(t),BVo=r(_Pe," (LED model)"),_Pe.forEach(t),NVo=i(j),v1=n(j,"LI",{});var bPe=s(v1);Spe=n(bPe,"STRONG",{});var yEt=s(Spe);IVo=r(yEt,"longformer"),yEt.forEach(t),qVo=r(bPe," \u2014 "),yX=n(bPe,"A",{href:!0});var xEt=s(yX);jVo=r(xEt,"LongformerForSequenceClassification"),xEt.forEach(t),DVo=r(bPe," (Longformer model)"),bPe.forEach(t),GVo=i(j),F1=n(j,"LI",{});var vPe=s(F1);Rpe=n(vPe,"STRONG",{});var $Et=s(Rpe);OVo=r($Et,"mbart"),$Et.forEach(t),VVo=r(vPe," \u2014 "),xX=n(vPe,"A",{href:!0});var kEt=s(xX);XVo=r(kEt,"MBartForSequenceClassification"),kEt.forEach(t),zVo=r(vPe," (mBART model)"),vPe.forEach(t),QVo=i(j),T1=n(j,"LI",{});var FPe=s(T1);Ppe=n(FPe,"STRONG",{});var SEt=s(Ppe);WVo=r(SEt,"megatron-bert"),SEt.forEach(t),HVo=r(FPe," \u2014 "),$X=n(FPe,"A",{href:!0});var REt=s($X);UVo=r(REt,"MegatronBertForSequenceClassification"),REt.forEach(t),JVo=r(FPe," (Megatron-BERT model)"),FPe.forEach(t),YVo=i(j),M1=n(j,"LI",{});var TPe=s(M1);Bpe=n(TPe,"STRONG",{});var PEt=s(Bpe);KVo=r(PEt,"mobilebert"),PEt.forEach(t),ZVo=r(TPe," \u2014 "),kX=n(TPe,"A",{href:!0});var BEt=s(kX);eXo=r(BEt,"MobileBertForSequenceClassification"),BEt.forEach(t),oXo=r(TPe," (MobileBERT model)"),TPe.forEach(t),rXo=i(j),E1=n(j,"LI",{});var MPe=s(E1);Npe=n(MPe,"STRONG",{});var NEt=s(Npe);tXo=r(NEt,"mpnet"),NEt.forEach(t),aXo=r(MPe," \u2014 "),SX=n(MPe,"A",{href:!0});var IEt=s(SX);nXo=r(IEt,"MPNetForSequenceClassification"),IEt.forEach(t),sXo=r(MPe," (MPNet model)"),MPe.forEach(t),lXo=i(j),C1=n(j,"LI",{});var EPe=s(C1);Ipe=n(EPe,"STRONG",{});var qEt=s(Ipe);iXo=r(qEt,"mvp"),qEt.forEach(t),dXo=r(EPe," \u2014 "),RX=n(EPe,"A",{href:!0});var jEt=s(RX);cXo=r(jEt,"MvpForSequenceClassification"),jEt.forEach(t),mXo=r(EPe," (MVP model)"),EPe.forEach(t),fXo=i(j),w1=n(j,"LI",{});var CPe=s(w1);qpe=n(CPe,"STRONG",{});var DEt=s(qpe);gXo=r(DEt,"nezha"),DEt.forEach(t),hXo=r(CPe," \u2014 "),PX=n(CPe,"A",{href:!0});var GEt=s(PX);uXo=r(GEt,"NezhaForSequenceClassification"),GEt.forEach(t),pXo=r(CPe," (Nezha model)"),CPe.forEach(t),_Xo=i(j),A1=n(j,"LI",{});var wPe=s(A1);jpe=n(wPe,"STRONG",{});var OEt=s(jpe);bXo=r(OEt,"nystromformer"),OEt.forEach(t),vXo=r(wPe," \u2014 "),BX=n(wPe,"A",{href:!0});var VEt=s(BX);FXo=r(VEt,"NystromformerForSequenceClassification"),VEt.forEach(t),TXo=r(wPe," (Nystr\xF6mformer model)"),wPe.forEach(t),MXo=i(j),L1=n(j,"LI",{});var APe=s(L1);Dpe=n(APe,"STRONG",{});var XEt=s(Dpe);EXo=r(XEt,"openai-gpt"),XEt.forEach(t),CXo=r(APe," \u2014 "),NX=n(APe,"A",{href:!0});var zEt=s(NX);wXo=r(zEt,"OpenAIGPTForSequenceClassification"),zEt.forEach(t),AXo=r(APe," (OpenAI GPT model)"),APe.forEach(t),LXo=i(j),y1=n(j,"LI",{});var LPe=s(y1);Gpe=n(LPe,"STRONG",{});var QEt=s(Gpe);yXo=r(QEt,"opt"),QEt.forEach(t),xXo=r(LPe," \u2014 "),IX=n(LPe,"A",{href:!0});var WEt=s(IX);$Xo=r(WEt,"OPTForSequenceClassification"),WEt.forEach(t),kXo=r(LPe," (OPT model)"),LPe.forEach(t),SXo=i(j),x1=n(j,"LI",{});var yPe=s(x1);Ope=n(yPe,"STRONG",{});var HEt=s(Ope);RXo=r(HEt,"perceiver"),HEt.forEach(t),PXo=r(yPe," \u2014 "),qX=n(yPe,"A",{href:!0});var UEt=s(qX);BXo=r(UEt,"PerceiverForSequenceClassification"),UEt.forEach(t),NXo=r(yPe," (Perceiver model)"),yPe.forEach(t),IXo=i(j),$1=n(j,"LI",{});var xPe=s($1);Vpe=n(xPe,"STRONG",{});var JEt=s(Vpe);qXo=r(JEt,"plbart"),JEt.forEach(t),jXo=r(xPe," \u2014 "),jX=n(xPe,"A",{href:!0});var YEt=s(jX);DXo=r(YEt,"PLBartForSequenceClassification"),YEt.forEach(t),GXo=r(xPe," (PLBart model)"),xPe.forEach(t),OXo=i(j),k1=n(j,"LI",{});var $Pe=s(k1);Xpe=n($Pe,"STRONG",{});var KEt=s(Xpe);VXo=r(KEt,"qdqbert"),KEt.forEach(t),XXo=r($Pe," \u2014 "),DX=n($Pe,"A",{href:!0});var ZEt=s(DX);zXo=r(ZEt,"QDQBertForSequenceClassification"),ZEt.forEach(t),QXo=r($Pe," (QDQBert model)"),$Pe.forEach(t),WXo=i(j),S1=n(j,"LI",{});var kPe=s(S1);zpe=n(kPe,"STRONG",{});var eCt=s(zpe);HXo=r(eCt,"reformer"),eCt.forEach(t),UXo=r(kPe," \u2014 "),GX=n(kPe,"A",{href:!0});var oCt=s(GX);JXo=r(oCt,"ReformerForSequenceClassification"),oCt.forEach(t),YXo=r(kPe," (Reformer model)"),kPe.forEach(t),KXo=i(j),R1=n(j,"LI",{});var SPe=s(R1);Qpe=n(SPe,"STRONG",{});var rCt=s(Qpe);ZXo=r(rCt,"rembert"),rCt.forEach(t),ezo=r(SPe," \u2014 "),OX=n(SPe,"A",{href:!0});var tCt=s(OX);ozo=r(tCt,"RemBertForSequenceClassification"),tCt.forEach(t),rzo=r(SPe," (RemBERT model)"),SPe.forEach(t),tzo=i(j),P1=n(j,"LI",{});var RPe=s(P1);Wpe=n(RPe,"STRONG",{});var aCt=s(Wpe);azo=r(aCt,"roberta"),aCt.forEach(t),nzo=r(RPe," \u2014 "),VX=n(RPe,"A",{href:!0});var nCt=s(VX);szo=r(nCt,"RobertaForSequenceClassification"),nCt.forEach(t),lzo=r(RPe," (RoBERTa model)"),RPe.forEach(t),izo=i(j),B1=n(j,"LI",{});var PPe=s(B1);Hpe=n(PPe,"STRONG",{});var sCt=s(Hpe);dzo=r(sCt,"roformer"),sCt.forEach(t),czo=r(PPe," \u2014 "),XX=n(PPe,"A",{href:!0});var lCt=s(XX);mzo=r(lCt,"RoFormerForSequenceClassification"),lCt.forEach(t),fzo=r(PPe," (RoFormer model)"),PPe.forEach(t),gzo=i(j),N1=n(j,"LI",{});var BPe=s(N1);Upe=n(BPe,"STRONG",{});var iCt=s(Upe);hzo=r(iCt,"squeezebert"),iCt.forEach(t),uzo=r(BPe," \u2014 "),zX=n(BPe,"A",{href:!0});var dCt=s(zX);pzo=r(dCt,"SqueezeBertForSequenceClassification"),dCt.forEach(t),_zo=r(BPe," (SqueezeBERT model)"),BPe.forEach(t),bzo=i(j),I1=n(j,"LI",{});var NPe=s(I1);Jpe=n(NPe,"STRONG",{});var cCt=s(Jpe);vzo=r(cCt,"tapas"),cCt.forEach(t),Fzo=r(NPe," \u2014 "),QX=n(NPe,"A",{href:!0});var mCt=s(QX);Tzo=r(mCt,"TapasForSequenceClassification"),mCt.forEach(t),Mzo=r(NPe," (TAPAS model)"),NPe.forEach(t),Ezo=i(j),q1=n(j,"LI",{});var IPe=s(q1);Ype=n(IPe,"STRONG",{});var fCt=s(Ype);Czo=r(fCt,"transfo-xl"),fCt.forEach(t),wzo=r(IPe," \u2014 "),WX=n(IPe,"A",{href:!0});var gCt=s(WX);Azo=r(gCt,"TransfoXLForSequenceClassification"),gCt.forEach(t),Lzo=r(IPe," (Transformer-XL model)"),IPe.forEach(t),yzo=i(j),j1=n(j,"LI",{});var qPe=s(j1);Kpe=n(qPe,"STRONG",{});var hCt=s(Kpe);xzo=r(hCt,"xlm"),hCt.forEach(t),$zo=r(qPe," \u2014 "),HX=n(qPe,"A",{href:!0});var uCt=s(HX);kzo=r(uCt,"XLMForSequenceClassification"),uCt.forEach(t),Szo=r(qPe," (XLM model)"),qPe.forEach(t),Rzo=i(j),D1=n(j,"LI",{});var jPe=s(D1);Zpe=n(jPe,"STRONG",{});var pCt=s(Zpe);Pzo=r(pCt,"xlm-roberta"),pCt.forEach(t),Bzo=r(jPe," \u2014 "),UX=n(jPe,"A",{href:!0});var _Ct=s(UX);Nzo=r(_Ct,"XLMRobertaForSequenceClassification"),_Ct.forEach(t),Izo=r(jPe," (XLM-RoBERTa model)"),jPe.forEach(t),qzo=i(j),G1=n(j,"LI",{});var DPe=s(G1);e_e=n(DPe,"STRONG",{});var bCt=s(e_e);jzo=r(bCt,"xlm-roberta-xl"),bCt.forEach(t),Dzo=r(DPe," \u2014 "),JX=n(DPe,"A",{href:!0});var vCt=s(JX);Gzo=r(vCt,"XLMRobertaXLForSequenceClassification"),vCt.forEach(t),Ozo=r(DPe," (XLM-RoBERTa-XL model)"),DPe.forEach(t),Vzo=i(j),O1=n(j,"LI",{});var GPe=s(O1);o_e=n(GPe,"STRONG",{});var FCt=s(o_e);Xzo=r(FCt,"xlnet"),FCt.forEach(t),zzo=r(GPe," \u2014 "),YX=n(GPe,"A",{href:!0});var TCt=s(YX);Qzo=r(TCt,"XLNetForSequenceClassification"),TCt.forEach(t),Wzo=r(GPe," (XLNet model)"),GPe.forEach(t),Hzo=i(j),V1=n(j,"LI",{});var OPe=s(V1);r_e=n(OPe,"STRONG",{});var MCt=s(r_e);Uzo=r(MCt,"yoso"),MCt.forEach(t),Jzo=r(OPe," \u2014 "),KX=n(OPe,"A",{href:!0});var ECt=s(KX);Yzo=r(ECt,"YosoForSequenceClassification"),ECt.forEach(t),Kzo=r(OPe," (YOSO model)"),OPe.forEach(t),j.forEach(t),Zzo=i(fa),X1=n(fa,"P",{});var VPe=s(X1);eQo=r(VPe,"The model is set in evaluation mode by default using "),t_e=n(VPe,"CODE",{});var CCt=s(t_e);oQo=r(CCt,"model.eval()"),CCt.forEach(t),rQo=r(VPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a_e=n(VPe,"CODE",{});var wCt=s(a_e);tQo=r(wCt,"model.train()"),wCt.forEach(t),VPe.forEach(t),aQo=i(fa),T(z1.$$.fragment,fa),fa.forEach(t),il.forEach(t),jXe=i(m),sd=n(m,"H2",{class:!0});var zQe=s(sd);Q1=n(zQe,"A",{id:!0,class:!0,href:!0});var ACt=s(Q1);n_e=n(ACt,"SPAN",{});var LCt=s(n_e);T(c8.$$.fragment,LCt),LCt.forEach(t),ACt.forEach(t),nQo=i(zQe),s_e=n(zQe,"SPAN",{});var yCt=s(s_e);sQo=r(yCt,"AutoModelForMultipleChoice"),yCt.forEach(t),zQe.forEach(t),DXe=i(m),No=n(m,"DIV",{class:!0});var dl=s(No);T(m8.$$.fragment,dl),lQo=i(dl),ld=n(dl,"P",{});var Zre=s(ld);iQo=r(Zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ZX=n(Zre,"A",{href:!0});var xCt=s(ZX);dQo=r(xCt,"from_pretrained()"),xCt.forEach(t),cQo=r(Zre," class method or the "),ez=n(Zre,"A",{href:!0});var $Ct=s(ez);mQo=r($Ct,"from_config()"),$Ct.forEach(t),fQo=r(Zre,` class
method.`),Zre.forEach(t),gQo=i(dl),f8=n(dl,"P",{});var QQe=s(f8);hQo=r(QQe,"This class cannot be instantiated directly using "),l_e=n(QQe,"CODE",{});var kCt=s(l_e);uQo=r(kCt,"__init__()"),kCt.forEach(t),pQo=r(QQe," (throws an error)."),QQe.forEach(t),_Qo=i(dl),ht=n(dl,"DIV",{class:!0});var C7=s(ht);T(g8.$$.fragment,C7),bQo=i(C7),i_e=n(C7,"P",{});var SCt=s(i_e);vQo=r(SCt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),SCt.forEach(t),FQo=i(C7),id=n(C7,"P",{});var ete=s(id);TQo=r(ete,`Note:
Loading a model from its configuration file does `),d_e=n(ete,"STRONG",{});var RCt=s(d_e);MQo=r(RCt,"not"),RCt.forEach(t),EQo=r(ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=n(ete,"A",{href:!0});var PCt=s(oz);CQo=r(PCt,"from_pretrained()"),PCt.forEach(t),wQo=r(ete," to load the model weights."),ete.forEach(t),AQo=i(C7),T(W1.$$.fragment,C7),C7.forEach(t),LQo=i(dl),to=n(dl,"DIV",{class:!0});var ga=s(to);T(h8.$$.fragment,ga),yQo=i(ga),c_e=n(ga,"P",{});var BCt=s(c_e);xQo=r(BCt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),BCt.forEach(t),$Qo=i(ga),Oa=n(ga,"P",{});var w7=s(Oa);kQo=r(w7,"The model class to instantiate is selected based on the "),m_e=n(w7,"CODE",{});var NCt=s(m_e);SQo=r(NCt,"model_type"),NCt.forEach(t),RQo=r(w7,` property of the config object (either
passed as an argument or loaded from `),f_e=n(w7,"CODE",{});var ICt=s(f_e);PQo=r(ICt,"pretrained_model_name_or_path"),ICt.forEach(t),BQo=r(w7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g_e=n(w7,"CODE",{});var qCt=s(g_e);NQo=r(qCt,"pretrained_model_name_or_path"),qCt.forEach(t),IQo=r(w7,":"),w7.forEach(t),qQo=i(ga),Z=n(ga,"UL",{});var ee=s(Z);H1=n(ee,"LI",{});var XPe=s(H1);h_e=n(XPe,"STRONG",{});var jCt=s(h_e);jQo=r(jCt,"albert"),jCt.forEach(t),DQo=r(XPe," \u2014 "),rz=n(XPe,"A",{href:!0});var DCt=s(rz);GQo=r(DCt,"AlbertForMultipleChoice"),DCt.forEach(t),OQo=r(XPe," (ALBERT model)"),XPe.forEach(t),VQo=i(ee),U1=n(ee,"LI",{});var zPe=s(U1);u_e=n(zPe,"STRONG",{});var GCt=s(u_e);XQo=r(GCt,"bert"),GCt.forEach(t),zQo=r(zPe," \u2014 "),tz=n(zPe,"A",{href:!0});var OCt=s(tz);QQo=r(OCt,"BertForMultipleChoice"),OCt.forEach(t),WQo=r(zPe," (BERT model)"),zPe.forEach(t),HQo=i(ee),J1=n(ee,"LI",{});var QPe=s(J1);p_e=n(QPe,"STRONG",{});var VCt=s(p_e);UQo=r(VCt,"big_bird"),VCt.forEach(t),JQo=r(QPe," \u2014 "),az=n(QPe,"A",{href:!0});var XCt=s(az);YQo=r(XCt,"BigBirdForMultipleChoice"),XCt.forEach(t),KQo=r(QPe," (BigBird model)"),QPe.forEach(t),ZQo=i(ee),Y1=n(ee,"LI",{});var WPe=s(Y1);__e=n(WPe,"STRONG",{});var zCt=s(__e);eWo=r(zCt,"camembert"),zCt.forEach(t),oWo=r(WPe," \u2014 "),nz=n(WPe,"A",{href:!0});var QCt=s(nz);rWo=r(QCt,"CamembertForMultipleChoice"),QCt.forEach(t),tWo=r(WPe," (CamemBERT model)"),WPe.forEach(t),aWo=i(ee),K1=n(ee,"LI",{});var HPe=s(K1);b_e=n(HPe,"STRONG",{});var WCt=s(b_e);nWo=r(WCt,"canine"),WCt.forEach(t),sWo=r(HPe," \u2014 "),sz=n(HPe,"A",{href:!0});var HCt=s(sz);lWo=r(HCt,"CanineForMultipleChoice"),HCt.forEach(t),iWo=r(HPe," (CANINE model)"),HPe.forEach(t),dWo=i(ee),Z1=n(ee,"LI",{});var UPe=s(Z1);v_e=n(UPe,"STRONG",{});var UCt=s(v_e);cWo=r(UCt,"convbert"),UCt.forEach(t),mWo=r(UPe," \u2014 "),lz=n(UPe,"A",{href:!0});var JCt=s(lz);fWo=r(JCt,"ConvBertForMultipleChoice"),JCt.forEach(t),gWo=r(UPe," (ConvBERT model)"),UPe.forEach(t),hWo=i(ee),eF=n(ee,"LI",{});var JPe=s(eF);F_e=n(JPe,"STRONG",{});var YCt=s(F_e);uWo=r(YCt,"data2vec-text"),YCt.forEach(t),pWo=r(JPe," \u2014 "),iz=n(JPe,"A",{href:!0});var KCt=s(iz);_Wo=r(KCt,"Data2VecTextForMultipleChoice"),KCt.forEach(t),bWo=r(JPe," (Data2VecText model)"),JPe.forEach(t),vWo=i(ee),oF=n(ee,"LI",{});var YPe=s(oF);T_e=n(YPe,"STRONG",{});var ZCt=s(T_e);FWo=r(ZCt,"deberta-v2"),ZCt.forEach(t),TWo=r(YPe," \u2014 "),dz=n(YPe,"A",{href:!0});var e3t=s(dz);MWo=r(e3t,"DebertaV2ForMultipleChoice"),e3t.forEach(t),EWo=r(YPe," (DeBERTa-v2 model)"),YPe.forEach(t),CWo=i(ee),rF=n(ee,"LI",{});var KPe=s(rF);M_e=n(KPe,"STRONG",{});var o3t=s(M_e);wWo=r(o3t,"distilbert"),o3t.forEach(t),AWo=r(KPe," \u2014 "),cz=n(KPe,"A",{href:!0});var r3t=s(cz);LWo=r(r3t,"DistilBertForMultipleChoice"),r3t.forEach(t),yWo=r(KPe," (DistilBERT model)"),KPe.forEach(t),xWo=i(ee),tF=n(ee,"LI",{});var ZPe=s(tF);E_e=n(ZPe,"STRONG",{});var t3t=s(E_e);$Wo=r(t3t,"electra"),t3t.forEach(t),kWo=r(ZPe," \u2014 "),mz=n(ZPe,"A",{href:!0});var a3t=s(mz);SWo=r(a3t,"ElectraForMultipleChoice"),a3t.forEach(t),RWo=r(ZPe," (ELECTRA model)"),ZPe.forEach(t),PWo=i(ee),aF=n(ee,"LI",{});var eBe=s(aF);C_e=n(eBe,"STRONG",{});var n3t=s(C_e);BWo=r(n3t,"flaubert"),n3t.forEach(t),NWo=r(eBe," \u2014 "),fz=n(eBe,"A",{href:!0});var s3t=s(fz);IWo=r(s3t,"FlaubertForMultipleChoice"),s3t.forEach(t),qWo=r(eBe," (FlauBERT model)"),eBe.forEach(t),jWo=i(ee),nF=n(ee,"LI",{});var oBe=s(nF);w_e=n(oBe,"STRONG",{});var l3t=s(w_e);DWo=r(l3t,"fnet"),l3t.forEach(t),GWo=r(oBe," \u2014 "),gz=n(oBe,"A",{href:!0});var i3t=s(gz);OWo=r(i3t,"FNetForMultipleChoice"),i3t.forEach(t),VWo=r(oBe," (FNet model)"),oBe.forEach(t),XWo=i(ee),sF=n(ee,"LI",{});var rBe=s(sF);A_e=n(rBe,"STRONG",{});var d3t=s(A_e);zWo=r(d3t,"funnel"),d3t.forEach(t),QWo=r(rBe," \u2014 "),hz=n(rBe,"A",{href:!0});var c3t=s(hz);WWo=r(c3t,"FunnelForMultipleChoice"),c3t.forEach(t),HWo=r(rBe," (Funnel Transformer model)"),rBe.forEach(t),UWo=i(ee),lF=n(ee,"LI",{});var tBe=s(lF);L_e=n(tBe,"STRONG",{});var m3t=s(L_e);JWo=r(m3t,"ibert"),m3t.forEach(t),YWo=r(tBe," \u2014 "),uz=n(tBe,"A",{href:!0});var f3t=s(uz);KWo=r(f3t,"IBertForMultipleChoice"),f3t.forEach(t),ZWo=r(tBe," (I-BERT model)"),tBe.forEach(t),eHo=i(ee),iF=n(ee,"LI",{});var aBe=s(iF);y_e=n(aBe,"STRONG",{});var g3t=s(y_e);oHo=r(g3t,"longformer"),g3t.forEach(t),rHo=r(aBe," \u2014 "),pz=n(aBe,"A",{href:!0});var h3t=s(pz);tHo=r(h3t,"LongformerForMultipleChoice"),h3t.forEach(t),aHo=r(aBe," (Longformer model)"),aBe.forEach(t),nHo=i(ee),dF=n(ee,"LI",{});var nBe=s(dF);x_e=n(nBe,"STRONG",{});var u3t=s(x_e);sHo=r(u3t,"megatron-bert"),u3t.forEach(t),lHo=r(nBe," \u2014 "),_z=n(nBe,"A",{href:!0});var p3t=s(_z);iHo=r(p3t,"MegatronBertForMultipleChoice"),p3t.forEach(t),dHo=r(nBe," (Megatron-BERT model)"),nBe.forEach(t),cHo=i(ee),cF=n(ee,"LI",{});var sBe=s(cF);$_e=n(sBe,"STRONG",{});var _3t=s($_e);mHo=r(_3t,"mobilebert"),_3t.forEach(t),fHo=r(sBe," \u2014 "),bz=n(sBe,"A",{href:!0});var b3t=s(bz);gHo=r(b3t,"MobileBertForMultipleChoice"),b3t.forEach(t),hHo=r(sBe," (MobileBERT model)"),sBe.forEach(t),uHo=i(ee),mF=n(ee,"LI",{});var lBe=s(mF);k_e=n(lBe,"STRONG",{});var v3t=s(k_e);pHo=r(v3t,"mpnet"),v3t.forEach(t),_Ho=r(lBe," \u2014 "),vz=n(lBe,"A",{href:!0});var F3t=s(vz);bHo=r(F3t,"MPNetForMultipleChoice"),F3t.forEach(t),vHo=r(lBe," (MPNet model)"),lBe.forEach(t),FHo=i(ee),fF=n(ee,"LI",{});var iBe=s(fF);S_e=n(iBe,"STRONG",{});var T3t=s(S_e);THo=r(T3t,"nezha"),T3t.forEach(t),MHo=r(iBe," \u2014 "),Fz=n(iBe,"A",{href:!0});var M3t=s(Fz);EHo=r(M3t,"NezhaForMultipleChoice"),M3t.forEach(t),CHo=r(iBe," (Nezha model)"),iBe.forEach(t),wHo=i(ee),gF=n(ee,"LI",{});var dBe=s(gF);R_e=n(dBe,"STRONG",{});var E3t=s(R_e);AHo=r(E3t,"nystromformer"),E3t.forEach(t),LHo=r(dBe," \u2014 "),Tz=n(dBe,"A",{href:!0});var C3t=s(Tz);yHo=r(C3t,"NystromformerForMultipleChoice"),C3t.forEach(t),xHo=r(dBe," (Nystr\xF6mformer model)"),dBe.forEach(t),$Ho=i(ee),hF=n(ee,"LI",{});var cBe=s(hF);P_e=n(cBe,"STRONG",{});var w3t=s(P_e);kHo=r(w3t,"qdqbert"),w3t.forEach(t),SHo=r(cBe," \u2014 "),Mz=n(cBe,"A",{href:!0});var A3t=s(Mz);RHo=r(A3t,"QDQBertForMultipleChoice"),A3t.forEach(t),PHo=r(cBe," (QDQBert model)"),cBe.forEach(t),BHo=i(ee),uF=n(ee,"LI",{});var mBe=s(uF);B_e=n(mBe,"STRONG",{});var L3t=s(B_e);NHo=r(L3t,"rembert"),L3t.forEach(t),IHo=r(mBe," \u2014 "),Ez=n(mBe,"A",{href:!0});var y3t=s(Ez);qHo=r(y3t,"RemBertForMultipleChoice"),y3t.forEach(t),jHo=r(mBe," (RemBERT model)"),mBe.forEach(t),DHo=i(ee),pF=n(ee,"LI",{});var fBe=s(pF);N_e=n(fBe,"STRONG",{});var x3t=s(N_e);GHo=r(x3t,"roberta"),x3t.forEach(t),OHo=r(fBe," \u2014 "),Cz=n(fBe,"A",{href:!0});var $3t=s(Cz);VHo=r($3t,"RobertaForMultipleChoice"),$3t.forEach(t),XHo=r(fBe," (RoBERTa model)"),fBe.forEach(t),zHo=i(ee),_F=n(ee,"LI",{});var gBe=s(_F);I_e=n(gBe,"STRONG",{});var k3t=s(I_e);QHo=r(k3t,"roformer"),k3t.forEach(t),WHo=r(gBe," \u2014 "),wz=n(gBe,"A",{href:!0});var S3t=s(wz);HHo=r(S3t,"RoFormerForMultipleChoice"),S3t.forEach(t),UHo=r(gBe," (RoFormer model)"),gBe.forEach(t),JHo=i(ee),bF=n(ee,"LI",{});var hBe=s(bF);q_e=n(hBe,"STRONG",{});var R3t=s(q_e);YHo=r(R3t,"squeezebert"),R3t.forEach(t),KHo=r(hBe," \u2014 "),Az=n(hBe,"A",{href:!0});var P3t=s(Az);ZHo=r(P3t,"SqueezeBertForMultipleChoice"),P3t.forEach(t),eUo=r(hBe," (SqueezeBERT model)"),hBe.forEach(t),oUo=i(ee),vF=n(ee,"LI",{});var uBe=s(vF);j_e=n(uBe,"STRONG",{});var B3t=s(j_e);rUo=r(B3t,"xlm"),B3t.forEach(t),tUo=r(uBe," \u2014 "),Lz=n(uBe,"A",{href:!0});var N3t=s(Lz);aUo=r(N3t,"XLMForMultipleChoice"),N3t.forEach(t),nUo=r(uBe," (XLM model)"),uBe.forEach(t),sUo=i(ee),FF=n(ee,"LI",{});var pBe=s(FF);D_e=n(pBe,"STRONG",{});var I3t=s(D_e);lUo=r(I3t,"xlm-roberta"),I3t.forEach(t),iUo=r(pBe," \u2014 "),yz=n(pBe,"A",{href:!0});var q3t=s(yz);dUo=r(q3t,"XLMRobertaForMultipleChoice"),q3t.forEach(t),cUo=r(pBe," (XLM-RoBERTa model)"),pBe.forEach(t),mUo=i(ee),TF=n(ee,"LI",{});var _Be=s(TF);G_e=n(_Be,"STRONG",{});var j3t=s(G_e);fUo=r(j3t,"xlm-roberta-xl"),j3t.forEach(t),gUo=r(_Be," \u2014 "),xz=n(_Be,"A",{href:!0});var D3t=s(xz);hUo=r(D3t,"XLMRobertaXLForMultipleChoice"),D3t.forEach(t),uUo=r(_Be," (XLM-RoBERTa-XL model)"),_Be.forEach(t),pUo=i(ee),MF=n(ee,"LI",{});var bBe=s(MF);O_e=n(bBe,"STRONG",{});var G3t=s(O_e);_Uo=r(G3t,"xlnet"),G3t.forEach(t),bUo=r(bBe," \u2014 "),$z=n(bBe,"A",{href:!0});var O3t=s($z);vUo=r(O3t,"XLNetForMultipleChoice"),O3t.forEach(t),FUo=r(bBe," (XLNet model)"),bBe.forEach(t),TUo=i(ee),EF=n(ee,"LI",{});var vBe=s(EF);V_e=n(vBe,"STRONG",{});var V3t=s(V_e);MUo=r(V3t,"yoso"),V3t.forEach(t),EUo=r(vBe," \u2014 "),kz=n(vBe,"A",{href:!0});var X3t=s(kz);CUo=r(X3t,"YosoForMultipleChoice"),X3t.forEach(t),wUo=r(vBe," (YOSO model)"),vBe.forEach(t),ee.forEach(t),AUo=i(ga),CF=n(ga,"P",{});var FBe=s(CF);LUo=r(FBe,"The model is set in evaluation mode by default using "),X_e=n(FBe,"CODE",{});var z3t=s(X_e);yUo=r(z3t,"model.eval()"),z3t.forEach(t),xUo=r(FBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z_e=n(FBe,"CODE",{});var Q3t=s(z_e);$Uo=r(Q3t,"model.train()"),Q3t.forEach(t),FBe.forEach(t),kUo=i(ga),T(wF.$$.fragment,ga),ga.forEach(t),dl.forEach(t),GXe=i(m),dd=n(m,"H2",{class:!0});var WQe=s(dd);AF=n(WQe,"A",{id:!0,class:!0,href:!0});var W3t=s(AF);Q_e=n(W3t,"SPAN",{});var H3t=s(Q_e);T(u8.$$.fragment,H3t),H3t.forEach(t),W3t.forEach(t),SUo=i(WQe),W_e=n(WQe,"SPAN",{});var U3t=s(W_e);RUo=r(U3t,"AutoModelForNextSentencePrediction"),U3t.forEach(t),WQe.forEach(t),OXe=i(m),Io=n(m,"DIV",{class:!0});var cl=s(Io);T(p8.$$.fragment,cl),PUo=i(cl),cd=n(cl,"P",{});var ote=s(cd);BUo=r(ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Sz=n(ote,"A",{href:!0});var J3t=s(Sz);NUo=r(J3t,"from_pretrained()"),J3t.forEach(t),IUo=r(ote," class method or the "),Rz=n(ote,"A",{href:!0});var Y3t=s(Rz);qUo=r(Y3t,"from_config()"),Y3t.forEach(t),jUo=r(ote,` class
method.`),ote.forEach(t),DUo=i(cl),_8=n(cl,"P",{});var HQe=s(_8);GUo=r(HQe,"This class cannot be instantiated directly using "),H_e=n(HQe,"CODE",{});var K3t=s(H_e);OUo=r(K3t,"__init__()"),K3t.forEach(t),VUo=r(HQe," (throws an error)."),HQe.forEach(t),XUo=i(cl),ut=n(cl,"DIV",{class:!0});var A7=s(ut);T(b8.$$.fragment,A7),zUo=i(A7),U_e=n(A7,"P",{});var Z3t=s(U_e);QUo=r(Z3t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Z3t.forEach(t),WUo=i(A7),md=n(A7,"P",{});var rte=s(md);HUo=r(rte,`Note:
Loading a model from its configuration file does `),J_e=n(rte,"STRONG",{});var e5t=s(J_e);UUo=r(e5t,"not"),e5t.forEach(t),JUo=r(rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pz=n(rte,"A",{href:!0});var o5t=s(Pz);YUo=r(o5t,"from_pretrained()"),o5t.forEach(t),KUo=r(rte," to load the model weights."),rte.forEach(t),ZUo=i(A7),T(LF.$$.fragment,A7),A7.forEach(t),eJo=i(cl),ao=n(cl,"DIV",{class:!0});var ha=s(ao);T(v8.$$.fragment,ha),oJo=i(ha),Y_e=n(ha,"P",{});var r5t=s(Y_e);rJo=r(r5t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),r5t.forEach(t),tJo=i(ha),Va=n(ha,"P",{});var L7=s(Va);aJo=r(L7,"The model class to instantiate is selected based on the "),K_e=n(L7,"CODE",{});var t5t=s(K_e);nJo=r(t5t,"model_type"),t5t.forEach(t),sJo=r(L7,` property of the config object (either
passed as an argument or loaded from `),Z_e=n(L7,"CODE",{});var a5t=s(Z_e);lJo=r(a5t,"pretrained_model_name_or_path"),a5t.forEach(t),iJo=r(L7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e2e=n(L7,"CODE",{});var n5t=s(e2e);dJo=r(n5t,"pretrained_model_name_or_path"),n5t.forEach(t),cJo=r(L7,":"),L7.forEach(t),mJo=i(ha),qo=n(ha,"UL",{});var ua=s(qo);yF=n(ua,"LI",{});var TBe=s(yF);o2e=n(TBe,"STRONG",{});var s5t=s(o2e);fJo=r(s5t,"bert"),s5t.forEach(t),gJo=r(TBe," \u2014 "),Bz=n(TBe,"A",{href:!0});var l5t=s(Bz);hJo=r(l5t,"BertForNextSentencePrediction"),l5t.forEach(t),uJo=r(TBe," (BERT model)"),TBe.forEach(t),pJo=i(ua),xF=n(ua,"LI",{});var MBe=s(xF);r2e=n(MBe,"STRONG",{});var i5t=s(r2e);_Jo=r(i5t,"fnet"),i5t.forEach(t),bJo=r(MBe," \u2014 "),Nz=n(MBe,"A",{href:!0});var d5t=s(Nz);vJo=r(d5t,"FNetForNextSentencePrediction"),d5t.forEach(t),FJo=r(MBe," (FNet model)"),MBe.forEach(t),TJo=i(ua),$F=n(ua,"LI",{});var EBe=s($F);t2e=n(EBe,"STRONG",{});var c5t=s(t2e);MJo=r(c5t,"megatron-bert"),c5t.forEach(t),EJo=r(EBe," \u2014 "),Iz=n(EBe,"A",{href:!0});var m5t=s(Iz);CJo=r(m5t,"MegatronBertForNextSentencePrediction"),m5t.forEach(t),wJo=r(EBe," (Megatron-BERT model)"),EBe.forEach(t),AJo=i(ua),kF=n(ua,"LI",{});var CBe=s(kF);a2e=n(CBe,"STRONG",{});var f5t=s(a2e);LJo=r(f5t,"mobilebert"),f5t.forEach(t),yJo=r(CBe," \u2014 "),qz=n(CBe,"A",{href:!0});var g5t=s(qz);xJo=r(g5t,"MobileBertForNextSentencePrediction"),g5t.forEach(t),$Jo=r(CBe," (MobileBERT model)"),CBe.forEach(t),kJo=i(ua),SF=n(ua,"LI",{});var wBe=s(SF);n2e=n(wBe,"STRONG",{});var h5t=s(n2e);SJo=r(h5t,"nezha"),h5t.forEach(t),RJo=r(wBe," \u2014 "),jz=n(wBe,"A",{href:!0});var u5t=s(jz);PJo=r(u5t,"NezhaForNextSentencePrediction"),u5t.forEach(t),BJo=r(wBe," (Nezha model)"),wBe.forEach(t),NJo=i(ua),RF=n(ua,"LI",{});var ABe=s(RF);s2e=n(ABe,"STRONG",{});var p5t=s(s2e);IJo=r(p5t,"qdqbert"),p5t.forEach(t),qJo=r(ABe," \u2014 "),Dz=n(ABe,"A",{href:!0});var _5t=s(Dz);jJo=r(_5t,"QDQBertForNextSentencePrediction"),_5t.forEach(t),DJo=r(ABe," (QDQBert model)"),ABe.forEach(t),ua.forEach(t),GJo=i(ha),PF=n(ha,"P",{});var LBe=s(PF);OJo=r(LBe,"The model is set in evaluation mode by default using "),l2e=n(LBe,"CODE",{});var b5t=s(l2e);VJo=r(b5t,"model.eval()"),b5t.forEach(t),XJo=r(LBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i2e=n(LBe,"CODE",{});var v5t=s(i2e);zJo=r(v5t,"model.train()"),v5t.forEach(t),LBe.forEach(t),QJo=i(ha),T(BF.$$.fragment,ha),ha.forEach(t),cl.forEach(t),VXe=i(m),fd=n(m,"H2",{class:!0});var UQe=s(fd);NF=n(UQe,"A",{id:!0,class:!0,href:!0});var F5t=s(NF);d2e=n(F5t,"SPAN",{});var T5t=s(d2e);T(F8.$$.fragment,T5t),T5t.forEach(t),F5t.forEach(t),WJo=i(UQe),c2e=n(UQe,"SPAN",{});var M5t=s(c2e);HJo=r(M5t,"AutoModelForTokenClassification"),M5t.forEach(t),UQe.forEach(t),XXe=i(m),jo=n(m,"DIV",{class:!0});var ml=s(jo);T(T8.$$.fragment,ml),UJo=i(ml),gd=n(ml,"P",{});var tte=s(gd);JJo=r(tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Gz=n(tte,"A",{href:!0});var E5t=s(Gz);YJo=r(E5t,"from_pretrained()"),E5t.forEach(t),KJo=r(tte," class method or the "),Oz=n(tte,"A",{href:!0});var C5t=s(Oz);ZJo=r(C5t,"from_config()"),C5t.forEach(t),eYo=r(tte,` class
method.`),tte.forEach(t),oYo=i(ml),M8=n(ml,"P",{});var JQe=s(M8);rYo=r(JQe,"This class cannot be instantiated directly using "),m2e=n(JQe,"CODE",{});var w5t=s(m2e);tYo=r(w5t,"__init__()"),w5t.forEach(t),aYo=r(JQe," (throws an error)."),JQe.forEach(t),nYo=i(ml),pt=n(ml,"DIV",{class:!0});var y7=s(pt);T(E8.$$.fragment,y7),sYo=i(y7),f2e=n(y7,"P",{});var A5t=s(f2e);lYo=r(A5t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),A5t.forEach(t),iYo=i(y7),hd=n(y7,"P",{});var ate=s(hd);dYo=r(ate,`Note:
Loading a model from its configuration file does `),g2e=n(ate,"STRONG",{});var L5t=s(g2e);cYo=r(L5t,"not"),L5t.forEach(t),mYo=r(ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=n(ate,"A",{href:!0});var y5t=s(Vz);fYo=r(y5t,"from_pretrained()"),y5t.forEach(t),gYo=r(ate," to load the model weights."),ate.forEach(t),hYo=i(y7),T(IF.$$.fragment,y7),y7.forEach(t),uYo=i(ml),no=n(ml,"DIV",{class:!0});var pa=s(no);T(C8.$$.fragment,pa),pYo=i(pa),h2e=n(pa,"P",{});var x5t=s(h2e);_Yo=r(x5t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),x5t.forEach(t),bYo=i(pa),Xa=n(pa,"P",{});var x7=s(Xa);vYo=r(x7,"The model class to instantiate is selected based on the "),u2e=n(x7,"CODE",{});var $5t=s(u2e);FYo=r($5t,"model_type"),$5t.forEach(t),TYo=r(x7,` property of the config object (either
passed as an argument or loaded from `),p2e=n(x7,"CODE",{});var k5t=s(p2e);MYo=r(k5t,"pretrained_model_name_or_path"),k5t.forEach(t),EYo=r(x7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_2e=n(x7,"CODE",{});var S5t=s(_2e);CYo=r(S5t,"pretrained_model_name_or_path"),S5t.forEach(t),wYo=r(x7,":"),x7.forEach(t),AYo=i(pa),U=n(pa,"UL",{});var J=s(U);qF=n(J,"LI",{});var yBe=s(qF);b2e=n(yBe,"STRONG",{});var R5t=s(b2e);LYo=r(R5t,"albert"),R5t.forEach(t),yYo=r(yBe," \u2014 "),Xz=n(yBe,"A",{href:!0});var P5t=s(Xz);xYo=r(P5t,"AlbertForTokenClassification"),P5t.forEach(t),$Yo=r(yBe," (ALBERT model)"),yBe.forEach(t),kYo=i(J),jF=n(J,"LI",{});var xBe=s(jF);v2e=n(xBe,"STRONG",{});var B5t=s(v2e);SYo=r(B5t,"bert"),B5t.forEach(t),RYo=r(xBe," \u2014 "),zz=n(xBe,"A",{href:!0});var N5t=s(zz);PYo=r(N5t,"BertForTokenClassification"),N5t.forEach(t),BYo=r(xBe," (BERT model)"),xBe.forEach(t),NYo=i(J),DF=n(J,"LI",{});var $Be=s(DF);F2e=n($Be,"STRONG",{});var I5t=s(F2e);IYo=r(I5t,"big_bird"),I5t.forEach(t),qYo=r($Be," \u2014 "),Qz=n($Be,"A",{href:!0});var q5t=s(Qz);jYo=r(q5t,"BigBirdForTokenClassification"),q5t.forEach(t),DYo=r($Be," (BigBird model)"),$Be.forEach(t),GYo=i(J),GF=n(J,"LI",{});var kBe=s(GF);T2e=n(kBe,"STRONG",{});var j5t=s(T2e);OYo=r(j5t,"bloom"),j5t.forEach(t),VYo=r(kBe," \u2014 "),Wz=n(kBe,"A",{href:!0});var D5t=s(Wz);XYo=r(D5t,"BloomForTokenClassification"),D5t.forEach(t),zYo=r(kBe," (BLOOM model)"),kBe.forEach(t),QYo=i(J),OF=n(J,"LI",{});var SBe=s(OF);M2e=n(SBe,"STRONG",{});var G5t=s(M2e);WYo=r(G5t,"camembert"),G5t.forEach(t),HYo=r(SBe," \u2014 "),Hz=n(SBe,"A",{href:!0});var O5t=s(Hz);UYo=r(O5t,"CamembertForTokenClassification"),O5t.forEach(t),JYo=r(SBe," (CamemBERT model)"),SBe.forEach(t),YYo=i(J),VF=n(J,"LI",{});var RBe=s(VF);E2e=n(RBe,"STRONG",{});var V5t=s(E2e);KYo=r(V5t,"canine"),V5t.forEach(t),ZYo=r(RBe," \u2014 "),Uz=n(RBe,"A",{href:!0});var X5t=s(Uz);eKo=r(X5t,"CanineForTokenClassification"),X5t.forEach(t),oKo=r(RBe," (CANINE model)"),RBe.forEach(t),rKo=i(J),XF=n(J,"LI",{});var PBe=s(XF);C2e=n(PBe,"STRONG",{});var z5t=s(C2e);tKo=r(z5t,"convbert"),z5t.forEach(t),aKo=r(PBe," \u2014 "),Jz=n(PBe,"A",{href:!0});var Q5t=s(Jz);nKo=r(Q5t,"ConvBertForTokenClassification"),Q5t.forEach(t),sKo=r(PBe," (ConvBERT model)"),PBe.forEach(t),lKo=i(J),zF=n(J,"LI",{});var BBe=s(zF);w2e=n(BBe,"STRONG",{});var W5t=s(w2e);iKo=r(W5t,"data2vec-text"),W5t.forEach(t),dKo=r(BBe," \u2014 "),Yz=n(BBe,"A",{href:!0});var H5t=s(Yz);cKo=r(H5t,"Data2VecTextForTokenClassification"),H5t.forEach(t),mKo=r(BBe," (Data2VecText model)"),BBe.forEach(t),fKo=i(J),QF=n(J,"LI",{});var NBe=s(QF);A2e=n(NBe,"STRONG",{});var U5t=s(A2e);gKo=r(U5t,"deberta"),U5t.forEach(t),hKo=r(NBe," \u2014 "),Kz=n(NBe,"A",{href:!0});var J5t=s(Kz);uKo=r(J5t,"DebertaForTokenClassification"),J5t.forEach(t),pKo=r(NBe," (DeBERTa model)"),NBe.forEach(t),_Ko=i(J),WF=n(J,"LI",{});var IBe=s(WF);L2e=n(IBe,"STRONG",{});var Y5t=s(L2e);bKo=r(Y5t,"deberta-v2"),Y5t.forEach(t),vKo=r(IBe," \u2014 "),Zz=n(IBe,"A",{href:!0});var K5t=s(Zz);FKo=r(K5t,"DebertaV2ForTokenClassification"),K5t.forEach(t),TKo=r(IBe," (DeBERTa-v2 model)"),IBe.forEach(t),MKo=i(J),HF=n(J,"LI",{});var qBe=s(HF);y2e=n(qBe,"STRONG",{});var Z5t=s(y2e);EKo=r(Z5t,"distilbert"),Z5t.forEach(t),CKo=r(qBe," \u2014 "),eQ=n(qBe,"A",{href:!0});var e0t=s(eQ);wKo=r(e0t,"DistilBertForTokenClassification"),e0t.forEach(t),AKo=r(qBe," (DistilBERT model)"),qBe.forEach(t),LKo=i(J),UF=n(J,"LI",{});var jBe=s(UF);x2e=n(jBe,"STRONG",{});var o0t=s(x2e);yKo=r(o0t,"electra"),o0t.forEach(t),xKo=r(jBe," \u2014 "),oQ=n(jBe,"A",{href:!0});var r0t=s(oQ);$Ko=r(r0t,"ElectraForTokenClassification"),r0t.forEach(t),kKo=r(jBe," (ELECTRA model)"),jBe.forEach(t),SKo=i(J),JF=n(J,"LI",{});var DBe=s(JF);$2e=n(DBe,"STRONG",{});var t0t=s($2e);RKo=r(t0t,"flaubert"),t0t.forEach(t),PKo=r(DBe," \u2014 "),rQ=n(DBe,"A",{href:!0});var a0t=s(rQ);BKo=r(a0t,"FlaubertForTokenClassification"),a0t.forEach(t),NKo=r(DBe," (FlauBERT model)"),DBe.forEach(t),IKo=i(J),YF=n(J,"LI",{});var GBe=s(YF);k2e=n(GBe,"STRONG",{});var n0t=s(k2e);qKo=r(n0t,"fnet"),n0t.forEach(t),jKo=r(GBe," \u2014 "),tQ=n(GBe,"A",{href:!0});var s0t=s(tQ);DKo=r(s0t,"FNetForTokenClassification"),s0t.forEach(t),GKo=r(GBe," (FNet model)"),GBe.forEach(t),OKo=i(J),KF=n(J,"LI",{});var OBe=s(KF);S2e=n(OBe,"STRONG",{});var l0t=s(S2e);VKo=r(l0t,"funnel"),l0t.forEach(t),XKo=r(OBe," \u2014 "),aQ=n(OBe,"A",{href:!0});var i0t=s(aQ);zKo=r(i0t,"FunnelForTokenClassification"),i0t.forEach(t),QKo=r(OBe," (Funnel Transformer model)"),OBe.forEach(t),WKo=i(J),ZF=n(J,"LI",{});var VBe=s(ZF);R2e=n(VBe,"STRONG",{});var d0t=s(R2e);HKo=r(d0t,"gpt2"),d0t.forEach(t),UKo=r(VBe," \u2014 "),nQ=n(VBe,"A",{href:!0});var c0t=s(nQ);JKo=r(c0t,"GPT2ForTokenClassification"),c0t.forEach(t),YKo=r(VBe," (OpenAI GPT-2 model)"),VBe.forEach(t),KKo=i(J),eT=n(J,"LI",{});var XBe=s(eT);P2e=n(XBe,"STRONG",{});var m0t=s(P2e);ZKo=r(m0t,"ibert"),m0t.forEach(t),eZo=r(XBe," \u2014 "),sQ=n(XBe,"A",{href:!0});var f0t=s(sQ);oZo=r(f0t,"IBertForTokenClassification"),f0t.forEach(t),rZo=r(XBe," (I-BERT model)"),XBe.forEach(t),tZo=i(J),oT=n(J,"LI",{});var zBe=s(oT);B2e=n(zBe,"STRONG",{});var g0t=s(B2e);aZo=r(g0t,"layoutlm"),g0t.forEach(t),nZo=r(zBe," \u2014 "),lQ=n(zBe,"A",{href:!0});var h0t=s(lQ);sZo=r(h0t,"LayoutLMForTokenClassification"),h0t.forEach(t),lZo=r(zBe," (LayoutLM model)"),zBe.forEach(t),iZo=i(J),rT=n(J,"LI",{});var QBe=s(rT);N2e=n(QBe,"STRONG",{});var u0t=s(N2e);dZo=r(u0t,"layoutlmv2"),u0t.forEach(t),cZo=r(QBe," \u2014 "),iQ=n(QBe,"A",{href:!0});var p0t=s(iQ);mZo=r(p0t,"LayoutLMv2ForTokenClassification"),p0t.forEach(t),fZo=r(QBe," (LayoutLMv2 model)"),QBe.forEach(t),gZo=i(J),tT=n(J,"LI",{});var WBe=s(tT);I2e=n(WBe,"STRONG",{});var _0t=s(I2e);hZo=r(_0t,"layoutlmv3"),_0t.forEach(t),uZo=r(WBe," \u2014 "),dQ=n(WBe,"A",{href:!0});var b0t=s(dQ);pZo=r(b0t,"LayoutLMv3ForTokenClassification"),b0t.forEach(t),_Zo=r(WBe," (LayoutLMv3 model)"),WBe.forEach(t),bZo=i(J),aT=n(J,"LI",{});var HBe=s(aT);q2e=n(HBe,"STRONG",{});var v0t=s(q2e);vZo=r(v0t,"longformer"),v0t.forEach(t),FZo=r(HBe," \u2014 "),cQ=n(HBe,"A",{href:!0});var F0t=s(cQ);TZo=r(F0t,"LongformerForTokenClassification"),F0t.forEach(t),MZo=r(HBe," (Longformer model)"),HBe.forEach(t),EZo=i(J),nT=n(J,"LI",{});var UBe=s(nT);j2e=n(UBe,"STRONG",{});var T0t=s(j2e);CZo=r(T0t,"megatron-bert"),T0t.forEach(t),wZo=r(UBe," \u2014 "),mQ=n(UBe,"A",{href:!0});var M0t=s(mQ);AZo=r(M0t,"MegatronBertForTokenClassification"),M0t.forEach(t),LZo=r(UBe," (Megatron-BERT model)"),UBe.forEach(t),yZo=i(J),sT=n(J,"LI",{});var JBe=s(sT);D2e=n(JBe,"STRONG",{});var E0t=s(D2e);xZo=r(E0t,"mobilebert"),E0t.forEach(t),$Zo=r(JBe," \u2014 "),fQ=n(JBe,"A",{href:!0});var C0t=s(fQ);kZo=r(C0t,"MobileBertForTokenClassification"),C0t.forEach(t),SZo=r(JBe," (MobileBERT model)"),JBe.forEach(t),RZo=i(J),lT=n(J,"LI",{});var YBe=s(lT);G2e=n(YBe,"STRONG",{});var w0t=s(G2e);PZo=r(w0t,"mpnet"),w0t.forEach(t),BZo=r(YBe," \u2014 "),gQ=n(YBe,"A",{href:!0});var A0t=s(gQ);NZo=r(A0t,"MPNetForTokenClassification"),A0t.forEach(t),IZo=r(YBe," (MPNet model)"),YBe.forEach(t),qZo=i(J),iT=n(J,"LI",{});var KBe=s(iT);O2e=n(KBe,"STRONG",{});var L0t=s(O2e);jZo=r(L0t,"nezha"),L0t.forEach(t),DZo=r(KBe," \u2014 "),hQ=n(KBe,"A",{href:!0});var y0t=s(hQ);GZo=r(y0t,"NezhaForTokenClassification"),y0t.forEach(t),OZo=r(KBe," (Nezha model)"),KBe.forEach(t),VZo=i(J),dT=n(J,"LI",{});var ZBe=s(dT);V2e=n(ZBe,"STRONG",{});var x0t=s(V2e);XZo=r(x0t,"nystromformer"),x0t.forEach(t),zZo=r(ZBe," \u2014 "),uQ=n(ZBe,"A",{href:!0});var $0t=s(uQ);QZo=r($0t,"NystromformerForTokenClassification"),$0t.forEach(t),WZo=r(ZBe," (Nystr\xF6mformer model)"),ZBe.forEach(t),HZo=i(J),cT=n(J,"LI",{});var eNe=s(cT);X2e=n(eNe,"STRONG",{});var k0t=s(X2e);UZo=r(k0t,"qdqbert"),k0t.forEach(t),JZo=r(eNe," \u2014 "),pQ=n(eNe,"A",{href:!0});var S0t=s(pQ);YZo=r(S0t,"QDQBertForTokenClassification"),S0t.forEach(t),KZo=r(eNe," (QDQBert model)"),eNe.forEach(t),ZZo=i(J),mT=n(J,"LI",{});var oNe=s(mT);z2e=n(oNe,"STRONG",{});var R0t=s(z2e);eer=r(R0t,"rembert"),R0t.forEach(t),oer=r(oNe," \u2014 "),_Q=n(oNe,"A",{href:!0});var P0t=s(_Q);rer=r(P0t,"RemBertForTokenClassification"),P0t.forEach(t),ter=r(oNe," (RemBERT model)"),oNe.forEach(t),aer=i(J),fT=n(J,"LI",{});var rNe=s(fT);Q2e=n(rNe,"STRONG",{});var B0t=s(Q2e);ner=r(B0t,"roberta"),B0t.forEach(t),ser=r(rNe," \u2014 "),bQ=n(rNe,"A",{href:!0});var N0t=s(bQ);ler=r(N0t,"RobertaForTokenClassification"),N0t.forEach(t),ier=r(rNe," (RoBERTa model)"),rNe.forEach(t),der=i(J),gT=n(J,"LI",{});var tNe=s(gT);W2e=n(tNe,"STRONG",{});var I0t=s(W2e);cer=r(I0t,"roformer"),I0t.forEach(t),mer=r(tNe," \u2014 "),vQ=n(tNe,"A",{href:!0});var q0t=s(vQ);fer=r(q0t,"RoFormerForTokenClassification"),q0t.forEach(t),ger=r(tNe," (RoFormer model)"),tNe.forEach(t),her=i(J),hT=n(J,"LI",{});var aNe=s(hT);H2e=n(aNe,"STRONG",{});var j0t=s(H2e);uer=r(j0t,"squeezebert"),j0t.forEach(t),per=r(aNe," \u2014 "),FQ=n(aNe,"A",{href:!0});var D0t=s(FQ);_er=r(D0t,"SqueezeBertForTokenClassification"),D0t.forEach(t),ber=r(aNe," (SqueezeBERT model)"),aNe.forEach(t),ver=i(J),uT=n(J,"LI",{});var nNe=s(uT);U2e=n(nNe,"STRONG",{});var G0t=s(U2e);Fer=r(G0t,"xlm"),G0t.forEach(t),Ter=r(nNe," \u2014 "),TQ=n(nNe,"A",{href:!0});var O0t=s(TQ);Mer=r(O0t,"XLMForTokenClassification"),O0t.forEach(t),Eer=r(nNe," (XLM model)"),nNe.forEach(t),Cer=i(J),pT=n(J,"LI",{});var sNe=s(pT);J2e=n(sNe,"STRONG",{});var V0t=s(J2e);wer=r(V0t,"xlm-roberta"),V0t.forEach(t),Aer=r(sNe," \u2014 "),MQ=n(sNe,"A",{href:!0});var X0t=s(MQ);Ler=r(X0t,"XLMRobertaForTokenClassification"),X0t.forEach(t),yer=r(sNe," (XLM-RoBERTa model)"),sNe.forEach(t),xer=i(J),_T=n(J,"LI",{});var lNe=s(_T);Y2e=n(lNe,"STRONG",{});var z0t=s(Y2e);$er=r(z0t,"xlm-roberta-xl"),z0t.forEach(t),ker=r(lNe," \u2014 "),EQ=n(lNe,"A",{href:!0});var Q0t=s(EQ);Ser=r(Q0t,"XLMRobertaXLForTokenClassification"),Q0t.forEach(t),Rer=r(lNe," (XLM-RoBERTa-XL model)"),lNe.forEach(t),Per=i(J),bT=n(J,"LI",{});var iNe=s(bT);K2e=n(iNe,"STRONG",{});var W0t=s(K2e);Ber=r(W0t,"xlnet"),W0t.forEach(t),Ner=r(iNe," \u2014 "),CQ=n(iNe,"A",{href:!0});var H0t=s(CQ);Ier=r(H0t,"XLNetForTokenClassification"),H0t.forEach(t),qer=r(iNe," (XLNet model)"),iNe.forEach(t),jer=i(J),vT=n(J,"LI",{});var dNe=s(vT);Z2e=n(dNe,"STRONG",{});var U0t=s(Z2e);Der=r(U0t,"yoso"),U0t.forEach(t),Ger=r(dNe," \u2014 "),wQ=n(dNe,"A",{href:!0});var J0t=s(wQ);Oer=r(J0t,"YosoForTokenClassification"),J0t.forEach(t),Ver=r(dNe," (YOSO model)"),dNe.forEach(t),J.forEach(t),Xer=i(pa),FT=n(pa,"P",{});var cNe=s(FT);zer=r(cNe,"The model is set in evaluation mode by default using "),ebe=n(cNe,"CODE",{});var Y0t=s(ebe);Qer=r(Y0t,"model.eval()"),Y0t.forEach(t),Wer=r(cNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),obe=n(cNe,"CODE",{});var K0t=s(obe);Her=r(K0t,"model.train()"),K0t.forEach(t),cNe.forEach(t),Uer=i(pa),T(TT.$$.fragment,pa),pa.forEach(t),ml.forEach(t),zXe=i(m),ud=n(m,"H2",{class:!0});var YQe=s(ud);MT=n(YQe,"A",{id:!0,class:!0,href:!0});var Z0t=s(MT);rbe=n(Z0t,"SPAN",{});var ewt=s(rbe);T(w8.$$.fragment,ewt),ewt.forEach(t),Z0t.forEach(t),Jer=i(YQe),tbe=n(YQe,"SPAN",{});var owt=s(tbe);Yer=r(owt,"AutoModelForQuestionAnswering"),owt.forEach(t),YQe.forEach(t),QXe=i(m),Do=n(m,"DIV",{class:!0});var fl=s(Do);T(A8.$$.fragment,fl),Ker=i(fl),pd=n(fl,"P",{});var nte=s(pd);Zer=r(nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),AQ=n(nte,"A",{href:!0});var rwt=s(AQ);eor=r(rwt,"from_pretrained()"),rwt.forEach(t),oor=r(nte," class method or the "),LQ=n(nte,"A",{href:!0});var twt=s(LQ);ror=r(twt,"from_config()"),twt.forEach(t),tor=r(nte,` class
method.`),nte.forEach(t),aor=i(fl),L8=n(fl,"P",{});var KQe=s(L8);nor=r(KQe,"This class cannot be instantiated directly using "),abe=n(KQe,"CODE",{});var awt=s(abe);sor=r(awt,"__init__()"),awt.forEach(t),lor=r(KQe," (throws an error)."),KQe.forEach(t),ior=i(fl),_t=n(fl,"DIV",{class:!0});var $7=s(_t);T(y8.$$.fragment,$7),dor=i($7),nbe=n($7,"P",{});var nwt=s(nbe);cor=r(nwt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),nwt.forEach(t),mor=i($7),_d=n($7,"P",{});var ste=s(_d);gor=r(ste,`Note:
Loading a model from its configuration file does `),sbe=n(ste,"STRONG",{});var swt=s(sbe);hor=r(swt,"not"),swt.forEach(t),uor=r(ste,` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=n(ste,"A",{href:!0});var lwt=s(yQ);por=r(lwt,"from_pretrained()"),lwt.forEach(t),_or=r(ste," to load the model weights."),ste.forEach(t),bor=i($7),T(ET.$$.fragment,$7),$7.forEach(t),vor=i(fl),so=n(fl,"DIV",{class:!0});var _a=s(so);T(x8.$$.fragment,_a),For=i(_a),lbe=n(_a,"P",{});var iwt=s(lbe);Tor=r(iwt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),iwt.forEach(t),Mor=i(_a),za=n(_a,"P",{});var k7=s(za);Eor=r(k7,"The model class to instantiate is selected based on the "),ibe=n(k7,"CODE",{});var dwt=s(ibe);Cor=r(dwt,"model_type"),dwt.forEach(t),wor=r(k7,` property of the config object (either
passed as an argument or loaded from `),dbe=n(k7,"CODE",{});var cwt=s(dbe);Aor=r(cwt,"pretrained_model_name_or_path"),cwt.forEach(t),Lor=r(k7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cbe=n(k7,"CODE",{});var mwt=s(cbe);yor=r(mwt,"pretrained_model_name_or_path"),mwt.forEach(t),xor=r(k7,":"),k7.forEach(t),$or=i(_a),V=n(_a,"UL",{});var X=s(V);CT=n(X,"LI",{});var mNe=s(CT);mbe=n(mNe,"STRONG",{});var fwt=s(mbe);kor=r(fwt,"albert"),fwt.forEach(t),Sor=r(mNe," \u2014 "),xQ=n(mNe,"A",{href:!0});var gwt=s(xQ);Ror=r(gwt,"AlbertForQuestionAnswering"),gwt.forEach(t),Por=r(mNe," (ALBERT model)"),mNe.forEach(t),Bor=i(X),wT=n(X,"LI",{});var fNe=s(wT);fbe=n(fNe,"STRONG",{});var hwt=s(fbe);Nor=r(hwt,"bart"),hwt.forEach(t),Ior=r(fNe," \u2014 "),$Q=n(fNe,"A",{href:!0});var uwt=s($Q);qor=r(uwt,"BartForQuestionAnswering"),uwt.forEach(t),jor=r(fNe," (BART model)"),fNe.forEach(t),Dor=i(X),AT=n(X,"LI",{});var gNe=s(AT);gbe=n(gNe,"STRONG",{});var pwt=s(gbe);Gor=r(pwt,"bert"),pwt.forEach(t),Oor=r(gNe," \u2014 "),kQ=n(gNe,"A",{href:!0});var _wt=s(kQ);Vor=r(_wt,"BertForQuestionAnswering"),_wt.forEach(t),Xor=r(gNe," (BERT model)"),gNe.forEach(t),zor=i(X),LT=n(X,"LI",{});var hNe=s(LT);hbe=n(hNe,"STRONG",{});var bwt=s(hbe);Qor=r(bwt,"big_bird"),bwt.forEach(t),Wor=r(hNe," \u2014 "),SQ=n(hNe,"A",{href:!0});var vwt=s(SQ);Hor=r(vwt,"BigBirdForQuestionAnswering"),vwt.forEach(t),Uor=r(hNe," (BigBird model)"),hNe.forEach(t),Jor=i(X),yT=n(X,"LI",{});var uNe=s(yT);ube=n(uNe,"STRONG",{});var Fwt=s(ube);Yor=r(Fwt,"bigbird_pegasus"),Fwt.forEach(t),Kor=r(uNe," \u2014 "),RQ=n(uNe,"A",{href:!0});var Twt=s(RQ);Zor=r(Twt,"BigBirdPegasusForQuestionAnswering"),Twt.forEach(t),err=r(uNe," (BigBird-Pegasus model)"),uNe.forEach(t),orr=i(X),xT=n(X,"LI",{});var pNe=s(xT);pbe=n(pNe,"STRONG",{});var Mwt=s(pbe);rrr=r(Mwt,"camembert"),Mwt.forEach(t),trr=r(pNe," \u2014 "),PQ=n(pNe,"A",{href:!0});var Ewt=s(PQ);arr=r(Ewt,"CamembertForQuestionAnswering"),Ewt.forEach(t),nrr=r(pNe," (CamemBERT model)"),pNe.forEach(t),srr=i(X),$T=n(X,"LI",{});var _Ne=s($T);_be=n(_Ne,"STRONG",{});var Cwt=s(_be);lrr=r(Cwt,"canine"),Cwt.forEach(t),irr=r(_Ne," \u2014 "),BQ=n(_Ne,"A",{href:!0});var wwt=s(BQ);drr=r(wwt,"CanineForQuestionAnswering"),wwt.forEach(t),crr=r(_Ne," (CANINE model)"),_Ne.forEach(t),mrr=i(X),kT=n(X,"LI",{});var bNe=s(kT);bbe=n(bNe,"STRONG",{});var Awt=s(bbe);frr=r(Awt,"convbert"),Awt.forEach(t),grr=r(bNe," \u2014 "),NQ=n(bNe,"A",{href:!0});var Lwt=s(NQ);hrr=r(Lwt,"ConvBertForQuestionAnswering"),Lwt.forEach(t),urr=r(bNe," (ConvBERT model)"),bNe.forEach(t),prr=i(X),ST=n(X,"LI",{});var vNe=s(ST);vbe=n(vNe,"STRONG",{});var ywt=s(vbe);_rr=r(ywt,"data2vec-text"),ywt.forEach(t),brr=r(vNe," \u2014 "),IQ=n(vNe,"A",{href:!0});var xwt=s(IQ);vrr=r(xwt,"Data2VecTextForQuestionAnswering"),xwt.forEach(t),Frr=r(vNe," (Data2VecText model)"),vNe.forEach(t),Trr=i(X),RT=n(X,"LI",{});var FNe=s(RT);Fbe=n(FNe,"STRONG",{});var $wt=s(Fbe);Mrr=r($wt,"deberta"),$wt.forEach(t),Err=r(FNe," \u2014 "),qQ=n(FNe,"A",{href:!0});var kwt=s(qQ);Crr=r(kwt,"DebertaForQuestionAnswering"),kwt.forEach(t),wrr=r(FNe," (DeBERTa model)"),FNe.forEach(t),Arr=i(X),PT=n(X,"LI",{});var TNe=s(PT);Tbe=n(TNe,"STRONG",{});var Swt=s(Tbe);Lrr=r(Swt,"deberta-v2"),Swt.forEach(t),yrr=r(TNe," \u2014 "),jQ=n(TNe,"A",{href:!0});var Rwt=s(jQ);xrr=r(Rwt,"DebertaV2ForQuestionAnswering"),Rwt.forEach(t),$rr=r(TNe," (DeBERTa-v2 model)"),TNe.forEach(t),krr=i(X),BT=n(X,"LI",{});var MNe=s(BT);Mbe=n(MNe,"STRONG",{});var Pwt=s(Mbe);Srr=r(Pwt,"distilbert"),Pwt.forEach(t),Rrr=r(MNe," \u2014 "),DQ=n(MNe,"A",{href:!0});var Bwt=s(DQ);Prr=r(Bwt,"DistilBertForQuestionAnswering"),Bwt.forEach(t),Brr=r(MNe," (DistilBERT model)"),MNe.forEach(t),Nrr=i(X),NT=n(X,"LI",{});var ENe=s(NT);Ebe=n(ENe,"STRONG",{});var Nwt=s(Ebe);Irr=r(Nwt,"electra"),Nwt.forEach(t),qrr=r(ENe," \u2014 "),GQ=n(ENe,"A",{href:!0});var Iwt=s(GQ);jrr=r(Iwt,"ElectraForQuestionAnswering"),Iwt.forEach(t),Drr=r(ENe," (ELECTRA model)"),ENe.forEach(t),Grr=i(X),IT=n(X,"LI",{});var CNe=s(IT);Cbe=n(CNe,"STRONG",{});var qwt=s(Cbe);Orr=r(qwt,"flaubert"),qwt.forEach(t),Vrr=r(CNe," \u2014 "),OQ=n(CNe,"A",{href:!0});var jwt=s(OQ);Xrr=r(jwt,"FlaubertForQuestionAnsweringSimple"),jwt.forEach(t),zrr=r(CNe," (FlauBERT model)"),CNe.forEach(t),Qrr=i(X),qT=n(X,"LI",{});var wNe=s(qT);wbe=n(wNe,"STRONG",{});var Dwt=s(wbe);Wrr=r(Dwt,"fnet"),Dwt.forEach(t),Hrr=r(wNe," \u2014 "),VQ=n(wNe,"A",{href:!0});var Gwt=s(VQ);Urr=r(Gwt,"FNetForQuestionAnswering"),Gwt.forEach(t),Jrr=r(wNe," (FNet model)"),wNe.forEach(t),Yrr=i(X),jT=n(X,"LI",{});var ANe=s(jT);Abe=n(ANe,"STRONG",{});var Owt=s(Abe);Krr=r(Owt,"funnel"),Owt.forEach(t),Zrr=r(ANe," \u2014 "),XQ=n(ANe,"A",{href:!0});var Vwt=s(XQ);etr=r(Vwt,"FunnelForQuestionAnswering"),Vwt.forEach(t),otr=r(ANe," (Funnel Transformer model)"),ANe.forEach(t),rtr=i(X),DT=n(X,"LI",{});var LNe=s(DT);Lbe=n(LNe,"STRONG",{});var Xwt=s(Lbe);ttr=r(Xwt,"gptj"),Xwt.forEach(t),atr=r(LNe," \u2014 "),zQ=n(LNe,"A",{href:!0});var zwt=s(zQ);ntr=r(zwt,"GPTJForQuestionAnswering"),zwt.forEach(t),str=r(LNe," (GPT-J model)"),LNe.forEach(t),ltr=i(X),GT=n(X,"LI",{});var yNe=s(GT);ybe=n(yNe,"STRONG",{});var Qwt=s(ybe);itr=r(Qwt,"ibert"),Qwt.forEach(t),dtr=r(yNe," \u2014 "),QQ=n(yNe,"A",{href:!0});var Wwt=s(QQ);ctr=r(Wwt,"IBertForQuestionAnswering"),Wwt.forEach(t),mtr=r(yNe," (I-BERT model)"),yNe.forEach(t),ftr=i(X),OT=n(X,"LI",{});var xNe=s(OT);xbe=n(xNe,"STRONG",{});var Hwt=s(xbe);gtr=r(Hwt,"layoutlmv2"),Hwt.forEach(t),htr=r(xNe," \u2014 "),WQ=n(xNe,"A",{href:!0});var Uwt=s(WQ);utr=r(Uwt,"LayoutLMv2ForQuestionAnswering"),Uwt.forEach(t),ptr=r(xNe," (LayoutLMv2 model)"),xNe.forEach(t),_tr=i(X),VT=n(X,"LI",{});var $Ne=s(VT);$be=n($Ne,"STRONG",{});var Jwt=s($be);btr=r(Jwt,"layoutlmv3"),Jwt.forEach(t),vtr=r($Ne," \u2014 "),HQ=n($Ne,"A",{href:!0});var Ywt=s(HQ);Ftr=r(Ywt,"LayoutLMv3ForQuestionAnswering"),Ywt.forEach(t),Ttr=r($Ne," (LayoutLMv3 model)"),$Ne.forEach(t),Mtr=i(X),XT=n(X,"LI",{});var kNe=s(XT);kbe=n(kNe,"STRONG",{});var Kwt=s(kbe);Etr=r(Kwt,"led"),Kwt.forEach(t),Ctr=r(kNe," \u2014 "),UQ=n(kNe,"A",{href:!0});var Zwt=s(UQ);wtr=r(Zwt,"LEDForQuestionAnswering"),Zwt.forEach(t),Atr=r(kNe," (LED model)"),kNe.forEach(t),Ltr=i(X),zT=n(X,"LI",{});var SNe=s(zT);Sbe=n(SNe,"STRONG",{});var eAt=s(Sbe);ytr=r(eAt,"longformer"),eAt.forEach(t),xtr=r(SNe," \u2014 "),JQ=n(SNe,"A",{href:!0});var oAt=s(JQ);$tr=r(oAt,"LongformerForQuestionAnswering"),oAt.forEach(t),ktr=r(SNe," (Longformer model)"),SNe.forEach(t),Str=i(X),QT=n(X,"LI",{});var RNe=s(QT);Rbe=n(RNe,"STRONG",{});var rAt=s(Rbe);Rtr=r(rAt,"lxmert"),rAt.forEach(t),Ptr=r(RNe," \u2014 "),YQ=n(RNe,"A",{href:!0});var tAt=s(YQ);Btr=r(tAt,"LxmertForQuestionAnswering"),tAt.forEach(t),Ntr=r(RNe," (LXMERT model)"),RNe.forEach(t),Itr=i(X),WT=n(X,"LI",{});var PNe=s(WT);Pbe=n(PNe,"STRONG",{});var aAt=s(Pbe);qtr=r(aAt,"mbart"),aAt.forEach(t),jtr=r(PNe," \u2014 "),KQ=n(PNe,"A",{href:!0});var nAt=s(KQ);Dtr=r(nAt,"MBartForQuestionAnswering"),nAt.forEach(t),Gtr=r(PNe," (mBART model)"),PNe.forEach(t),Otr=i(X),HT=n(X,"LI",{});var BNe=s(HT);Bbe=n(BNe,"STRONG",{});var sAt=s(Bbe);Vtr=r(sAt,"megatron-bert"),sAt.forEach(t),Xtr=r(BNe," \u2014 "),ZQ=n(BNe,"A",{href:!0});var lAt=s(ZQ);ztr=r(lAt,"MegatronBertForQuestionAnswering"),lAt.forEach(t),Qtr=r(BNe," (Megatron-BERT model)"),BNe.forEach(t),Wtr=i(X),UT=n(X,"LI",{});var NNe=s(UT);Nbe=n(NNe,"STRONG",{});var iAt=s(Nbe);Htr=r(iAt,"mobilebert"),iAt.forEach(t),Utr=r(NNe," \u2014 "),eW=n(NNe,"A",{href:!0});var dAt=s(eW);Jtr=r(dAt,"MobileBertForQuestionAnswering"),dAt.forEach(t),Ytr=r(NNe," (MobileBERT model)"),NNe.forEach(t),Ktr=i(X),JT=n(X,"LI",{});var INe=s(JT);Ibe=n(INe,"STRONG",{});var cAt=s(Ibe);Ztr=r(cAt,"mpnet"),cAt.forEach(t),ear=r(INe," \u2014 "),oW=n(INe,"A",{href:!0});var mAt=s(oW);oar=r(mAt,"MPNetForQuestionAnswering"),mAt.forEach(t),rar=r(INe," (MPNet model)"),INe.forEach(t),tar=i(X),YT=n(X,"LI",{});var qNe=s(YT);qbe=n(qNe,"STRONG",{});var fAt=s(qbe);aar=r(fAt,"mvp"),fAt.forEach(t),nar=r(qNe," \u2014 "),rW=n(qNe,"A",{href:!0});var gAt=s(rW);sar=r(gAt,"MvpForQuestionAnswering"),gAt.forEach(t),lar=r(qNe," (MVP model)"),qNe.forEach(t),iar=i(X),KT=n(X,"LI",{});var jNe=s(KT);jbe=n(jNe,"STRONG",{});var hAt=s(jbe);dar=r(hAt,"nezha"),hAt.forEach(t),car=r(jNe," \u2014 "),tW=n(jNe,"A",{href:!0});var uAt=s(tW);mar=r(uAt,"NezhaForQuestionAnswering"),uAt.forEach(t),far=r(jNe," (Nezha model)"),jNe.forEach(t),gar=i(X),ZT=n(X,"LI",{});var DNe=s(ZT);Dbe=n(DNe,"STRONG",{});var pAt=s(Dbe);har=r(pAt,"nystromformer"),pAt.forEach(t),uar=r(DNe," \u2014 "),aW=n(DNe,"A",{href:!0});var _At=s(aW);par=r(_At,"NystromformerForQuestionAnswering"),_At.forEach(t),_ar=r(DNe," (Nystr\xF6mformer model)"),DNe.forEach(t),bar=i(X),eM=n(X,"LI",{});var GNe=s(eM);Gbe=n(GNe,"STRONG",{});var bAt=s(Gbe);Far=r(bAt,"qdqbert"),bAt.forEach(t),Tar=r(GNe," \u2014 "),nW=n(GNe,"A",{href:!0});var vAt=s(nW);Mar=r(vAt,"QDQBertForQuestionAnswering"),vAt.forEach(t),Ear=r(GNe," (QDQBert model)"),GNe.forEach(t),Car=i(X),oM=n(X,"LI",{});var ONe=s(oM);Obe=n(ONe,"STRONG",{});var FAt=s(Obe);war=r(FAt,"reformer"),FAt.forEach(t),Aar=r(ONe," \u2014 "),sW=n(ONe,"A",{href:!0});var TAt=s(sW);Lar=r(TAt,"ReformerForQuestionAnswering"),TAt.forEach(t),yar=r(ONe," (Reformer model)"),ONe.forEach(t),xar=i(X),rM=n(X,"LI",{});var VNe=s(rM);Vbe=n(VNe,"STRONG",{});var MAt=s(Vbe);$ar=r(MAt,"rembert"),MAt.forEach(t),kar=r(VNe," \u2014 "),lW=n(VNe,"A",{href:!0});var EAt=s(lW);Sar=r(EAt,"RemBertForQuestionAnswering"),EAt.forEach(t),Rar=r(VNe," (RemBERT model)"),VNe.forEach(t),Par=i(X),tM=n(X,"LI",{});var XNe=s(tM);Xbe=n(XNe,"STRONG",{});var CAt=s(Xbe);Bar=r(CAt,"roberta"),CAt.forEach(t),Nar=r(XNe," \u2014 "),iW=n(XNe,"A",{href:!0});var wAt=s(iW);Iar=r(wAt,"RobertaForQuestionAnswering"),wAt.forEach(t),qar=r(XNe," (RoBERTa model)"),XNe.forEach(t),jar=i(X),aM=n(X,"LI",{});var zNe=s(aM);zbe=n(zNe,"STRONG",{});var AAt=s(zbe);Dar=r(AAt,"roformer"),AAt.forEach(t),Gar=r(zNe," \u2014 "),dW=n(zNe,"A",{href:!0});var LAt=s(dW);Oar=r(LAt,"RoFormerForQuestionAnswering"),LAt.forEach(t),Var=r(zNe," (RoFormer model)"),zNe.forEach(t),Xar=i(X),nM=n(X,"LI",{});var QNe=s(nM);Qbe=n(QNe,"STRONG",{});var yAt=s(Qbe);zar=r(yAt,"splinter"),yAt.forEach(t),Qar=r(QNe," \u2014 "),cW=n(QNe,"A",{href:!0});var xAt=s(cW);War=r(xAt,"SplinterForQuestionAnswering"),xAt.forEach(t),Har=r(QNe," (Splinter model)"),QNe.forEach(t),Uar=i(X),sM=n(X,"LI",{});var WNe=s(sM);Wbe=n(WNe,"STRONG",{});var $At=s(Wbe);Jar=r($At,"squeezebert"),$At.forEach(t),Yar=r(WNe," \u2014 "),mW=n(WNe,"A",{href:!0});var kAt=s(mW);Kar=r(kAt,"SqueezeBertForQuestionAnswering"),kAt.forEach(t),Zar=r(WNe," (SqueezeBERT model)"),WNe.forEach(t),enr=i(X),lM=n(X,"LI",{});var HNe=s(lM);Hbe=n(HNe,"STRONG",{});var SAt=s(Hbe);onr=r(SAt,"xlm"),SAt.forEach(t),rnr=r(HNe," \u2014 "),fW=n(HNe,"A",{href:!0});var RAt=s(fW);tnr=r(RAt,"XLMForQuestionAnsweringSimple"),RAt.forEach(t),anr=r(HNe," (XLM model)"),HNe.forEach(t),nnr=i(X),iM=n(X,"LI",{});var UNe=s(iM);Ube=n(UNe,"STRONG",{});var PAt=s(Ube);snr=r(PAt,"xlm-roberta"),PAt.forEach(t),lnr=r(UNe," \u2014 "),gW=n(UNe,"A",{href:!0});var BAt=s(gW);inr=r(BAt,"XLMRobertaForQuestionAnswering"),BAt.forEach(t),dnr=r(UNe," (XLM-RoBERTa model)"),UNe.forEach(t),cnr=i(X),dM=n(X,"LI",{});var JNe=s(dM);Jbe=n(JNe,"STRONG",{});var NAt=s(Jbe);mnr=r(NAt,"xlm-roberta-xl"),NAt.forEach(t),fnr=r(JNe," \u2014 "),hW=n(JNe,"A",{href:!0});var IAt=s(hW);gnr=r(IAt,"XLMRobertaXLForQuestionAnswering"),IAt.forEach(t),hnr=r(JNe," (XLM-RoBERTa-XL model)"),JNe.forEach(t),unr=i(X),cM=n(X,"LI",{});var YNe=s(cM);Ybe=n(YNe,"STRONG",{});var qAt=s(Ybe);pnr=r(qAt,"xlnet"),qAt.forEach(t),_nr=r(YNe," \u2014 "),uW=n(YNe,"A",{href:!0});var jAt=s(uW);bnr=r(jAt,"XLNetForQuestionAnsweringSimple"),jAt.forEach(t),vnr=r(YNe," (XLNet model)"),YNe.forEach(t),Fnr=i(X),mM=n(X,"LI",{});var KNe=s(mM);Kbe=n(KNe,"STRONG",{});var DAt=s(Kbe);Tnr=r(DAt,"yoso"),DAt.forEach(t),Mnr=r(KNe," \u2014 "),pW=n(KNe,"A",{href:!0});var GAt=s(pW);Enr=r(GAt,"YosoForQuestionAnswering"),GAt.forEach(t),Cnr=r(KNe," (YOSO model)"),KNe.forEach(t),X.forEach(t),wnr=i(_a),fM=n(_a,"P",{});var ZNe=s(fM);Anr=r(ZNe,"The model is set in evaluation mode by default using "),Zbe=n(ZNe,"CODE",{});var OAt=s(Zbe);Lnr=r(OAt,"model.eval()"),OAt.forEach(t),ynr=r(ZNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eve=n(ZNe,"CODE",{});var VAt=s(eve);xnr=r(VAt,"model.train()"),VAt.forEach(t),ZNe.forEach(t),$nr=i(_a),T(gM.$$.fragment,_a),_a.forEach(t),fl.forEach(t),WXe=i(m),bd=n(m,"H2",{class:!0});var ZQe=s(bd);hM=n(ZQe,"A",{id:!0,class:!0,href:!0});var XAt=s(hM);ove=n(XAt,"SPAN",{});var zAt=s(ove);T($8.$$.fragment,zAt),zAt.forEach(t),XAt.forEach(t),knr=i(ZQe),rve=n(ZQe,"SPAN",{});var QAt=s(rve);Snr=r(QAt,"AutoModelForTableQuestionAnswering"),QAt.forEach(t),ZQe.forEach(t),HXe=i(m),Go=n(m,"DIV",{class:!0});var gl=s(Go);T(k8.$$.fragment,gl),Rnr=i(gl),vd=n(gl,"P",{});var lte=s(vd);Pnr=r(lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),_W=n(lte,"A",{href:!0});var WAt=s(_W);Bnr=r(WAt,"from_pretrained()"),WAt.forEach(t),Nnr=r(lte," class method or the "),bW=n(lte,"A",{href:!0});var HAt=s(bW);Inr=r(HAt,"from_config()"),HAt.forEach(t),qnr=r(lte,` class
method.`),lte.forEach(t),jnr=i(gl),S8=n(gl,"P",{});var eWe=s(S8);Dnr=r(eWe,"This class cannot be instantiated directly using "),tve=n(eWe,"CODE",{});var UAt=s(tve);Gnr=r(UAt,"__init__()"),UAt.forEach(t),Onr=r(eWe," (throws an error)."),eWe.forEach(t),Vnr=i(gl),bt=n(gl,"DIV",{class:!0});var S7=s(bt);T(R8.$$.fragment,S7),Xnr=i(S7),ave=n(S7,"P",{});var JAt=s(ave);znr=r(JAt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),JAt.forEach(t),Qnr=i(S7),Fd=n(S7,"P",{});var ite=s(Fd);Wnr=r(ite,`Note:
Loading a model from its configuration file does `),nve=n(ite,"STRONG",{});var YAt=s(nve);Hnr=r(YAt,"not"),YAt.forEach(t),Unr=r(ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),vW=n(ite,"A",{href:!0});var KAt=s(vW);Jnr=r(KAt,"from_pretrained()"),KAt.forEach(t),Ynr=r(ite," to load the model weights."),ite.forEach(t),Knr=i(S7),T(uM.$$.fragment,S7),S7.forEach(t),Znr=i(gl),lo=n(gl,"DIV",{class:!0});var ba=s(lo);T(P8.$$.fragment,ba),esr=i(ba),sve=n(ba,"P",{});var ZAt=s(sve);osr=r(ZAt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ZAt.forEach(t),rsr=i(ba),Qa=n(ba,"P",{});var R7=s(Qa);tsr=r(R7,"The model class to instantiate is selected based on the "),lve=n(R7,"CODE",{});var e6t=s(lve);asr=r(e6t,"model_type"),e6t.forEach(t),nsr=r(R7,` property of the config object (either
passed as an argument or loaded from `),ive=n(R7,"CODE",{});var o6t=s(ive);ssr=r(o6t,"pretrained_model_name_or_path"),o6t.forEach(t),lsr=r(R7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dve=n(R7,"CODE",{});var r6t=s(dve);isr=r(r6t,"pretrained_model_name_or_path"),r6t.forEach(t),dsr=r(R7,":"),R7.forEach(t),csr=i(ba),cve=n(ba,"UL",{});var t6t=s(cve);pM=n(t6t,"LI",{});var eIe=s(pM);mve=n(eIe,"STRONG",{});var a6t=s(mve);msr=r(a6t,"tapas"),a6t.forEach(t),fsr=r(eIe," \u2014 "),FW=n(eIe,"A",{href:!0});var n6t=s(FW);gsr=r(n6t,"TapasForQuestionAnswering"),n6t.forEach(t),hsr=r(eIe," (TAPAS model)"),eIe.forEach(t),t6t.forEach(t),usr=i(ba),_M=n(ba,"P",{});var oIe=s(_M);psr=r(oIe,"The model is set in evaluation mode by default using "),fve=n(oIe,"CODE",{});var s6t=s(fve);_sr=r(s6t,"model.eval()"),s6t.forEach(t),bsr=r(oIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gve=n(oIe,"CODE",{});var l6t=s(gve);vsr=r(l6t,"model.train()"),l6t.forEach(t),oIe.forEach(t),Fsr=i(ba),T(bM.$$.fragment,ba),ba.forEach(t),gl.forEach(t),UXe=i(m),Td=n(m,"H2",{class:!0});var oWe=s(Td);vM=n(oWe,"A",{id:!0,class:!0,href:!0});var i6t=s(vM);hve=n(i6t,"SPAN",{});var d6t=s(hve);T(B8.$$.fragment,d6t),d6t.forEach(t),i6t.forEach(t),Tsr=i(oWe),uve=n(oWe,"SPAN",{});var c6t=s(uve);Msr=r(c6t,"AutoModelForImageClassification"),c6t.forEach(t),oWe.forEach(t),JXe=i(m),Oo=n(m,"DIV",{class:!0});var hl=s(Oo);T(N8.$$.fragment,hl),Esr=i(hl),Md=n(hl,"P",{});var dte=s(Md);Csr=r(dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),TW=n(dte,"A",{href:!0});var m6t=s(TW);wsr=r(m6t,"from_pretrained()"),m6t.forEach(t),Asr=r(dte," class method or the "),MW=n(dte,"A",{href:!0});var f6t=s(MW);Lsr=r(f6t,"from_config()"),f6t.forEach(t),ysr=r(dte,` class
method.`),dte.forEach(t),xsr=i(hl),I8=n(hl,"P",{});var rWe=s(I8);$sr=r(rWe,"This class cannot be instantiated directly using "),pve=n(rWe,"CODE",{});var g6t=s(pve);ksr=r(g6t,"__init__()"),g6t.forEach(t),Ssr=r(rWe," (throws an error)."),rWe.forEach(t),Rsr=i(hl),vt=n(hl,"DIV",{class:!0});var P7=s(vt);T(q8.$$.fragment,P7),Psr=i(P7),_ve=n(P7,"P",{});var h6t=s(_ve);Bsr=r(h6t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),h6t.forEach(t),Nsr=i(P7),Ed=n(P7,"P",{});var cte=s(Ed);Isr=r(cte,`Note:
Loading a model from its configuration file does `),bve=n(cte,"STRONG",{});var u6t=s(bve);qsr=r(u6t,"not"),u6t.forEach(t),jsr=r(cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=n(cte,"A",{href:!0});var p6t=s(EW);Dsr=r(p6t,"from_pretrained()"),p6t.forEach(t),Gsr=r(cte," to load the model weights."),cte.forEach(t),Osr=i(P7),T(FM.$$.fragment,P7),P7.forEach(t),Vsr=i(hl),io=n(hl,"DIV",{class:!0});var va=s(io);T(j8.$$.fragment,va),Xsr=i(va),vve=n(va,"P",{});var _6t=s(vve);zsr=r(_6t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_6t.forEach(t),Qsr=i(va),Wa=n(va,"P",{});var B7=s(Wa);Wsr=r(B7,"The model class to instantiate is selected based on the "),Fve=n(B7,"CODE",{});var b6t=s(Fve);Hsr=r(b6t,"model_type"),b6t.forEach(t),Usr=r(B7,` property of the config object (either
passed as an argument or loaded from `),Tve=n(B7,"CODE",{});var v6t=s(Tve);Jsr=r(v6t,"pretrained_model_name_or_path"),v6t.forEach(t),Ysr=r(B7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mve=n(B7,"CODE",{});var F6t=s(Mve);Ksr=r(F6t,"pretrained_model_name_or_path"),F6t.forEach(t),Zsr=r(B7,":"),B7.forEach(t),elr=i(va),ve=n(va,"UL",{});var Te=s(ve);TM=n(Te,"LI",{});var rIe=s(TM);Eve=n(rIe,"STRONG",{});var T6t=s(Eve);olr=r(T6t,"beit"),T6t.forEach(t),rlr=r(rIe," \u2014 "),CW=n(rIe,"A",{href:!0});var M6t=s(CW);tlr=r(M6t,"BeitForImageClassification"),M6t.forEach(t),alr=r(rIe," (BEiT model)"),rIe.forEach(t),nlr=i(Te),MM=n(Te,"LI",{});var tIe=s(MM);Cve=n(tIe,"STRONG",{});var E6t=s(Cve);slr=r(E6t,"convnext"),E6t.forEach(t),llr=r(tIe," \u2014 "),wW=n(tIe,"A",{href:!0});var C6t=s(wW);ilr=r(C6t,"ConvNextForImageClassification"),C6t.forEach(t),dlr=r(tIe," (ConvNeXT model)"),tIe.forEach(t),clr=i(Te),EM=n(Te,"LI",{});var aIe=s(EM);wve=n(aIe,"STRONG",{});var w6t=s(wve);mlr=r(w6t,"cvt"),w6t.forEach(t),flr=r(aIe," \u2014 "),AW=n(aIe,"A",{href:!0});var A6t=s(AW);glr=r(A6t,"CvtForImageClassification"),A6t.forEach(t),hlr=r(aIe," (CvT model)"),aIe.forEach(t),ulr=i(Te),CM=n(Te,"LI",{});var nIe=s(CM);Ave=n(nIe,"STRONG",{});var L6t=s(Ave);plr=r(L6t,"data2vec-vision"),L6t.forEach(t),_lr=r(nIe," \u2014 "),LW=n(nIe,"A",{href:!0});var y6t=s(LW);blr=r(y6t,"Data2VecVisionForImageClassification"),y6t.forEach(t),vlr=r(nIe," (Data2VecVision model)"),nIe.forEach(t),Flr=i(Te),Us=n(Te,"LI",{});var NS=s(Us);Lve=n(NS,"STRONG",{});var x6t=s(Lve);Tlr=r(x6t,"deit"),x6t.forEach(t),Mlr=r(NS," \u2014 "),yW=n(NS,"A",{href:!0});var $6t=s(yW);Elr=r($6t,"DeiTForImageClassification"),$6t.forEach(t),Clr=r(NS," or "),xW=n(NS,"A",{href:!0});var k6t=s(xW);wlr=r(k6t,"DeiTForImageClassificationWithTeacher"),k6t.forEach(t),Alr=r(NS," (DeiT model)"),NS.forEach(t),Llr=i(Te),wM=n(Te,"LI",{});var sIe=s(wM);yve=n(sIe,"STRONG",{});var S6t=s(yve);ylr=r(S6t,"imagegpt"),S6t.forEach(t),xlr=r(sIe," \u2014 "),$W=n(sIe,"A",{href:!0});var R6t=s($W);$lr=r(R6t,"ImageGPTForImageClassification"),R6t.forEach(t),klr=r(sIe," (ImageGPT model)"),sIe.forEach(t),Slr=i(Te),Js=n(Te,"LI",{});var IS=s(Js);xve=n(IS,"STRONG",{});var P6t=s(xve);Rlr=r(P6t,"levit"),P6t.forEach(t),Plr=r(IS," \u2014 "),kW=n(IS,"A",{href:!0});var B6t=s(kW);Blr=r(B6t,"LevitForImageClassification"),B6t.forEach(t),Nlr=r(IS," or "),SW=n(IS,"A",{href:!0});var N6t=s(SW);Ilr=r(N6t,"LevitForImageClassificationWithTeacher"),N6t.forEach(t),qlr=r(IS," (LeViT model)"),IS.forEach(t),jlr=i(Te),AM=n(Te,"LI",{});var lIe=s(AM);$ve=n(lIe,"STRONG",{});var I6t=s($ve);Dlr=r(I6t,"mobilevit"),I6t.forEach(t),Glr=r(lIe," \u2014 "),RW=n(lIe,"A",{href:!0});var q6t=s(RW);Olr=r(q6t,"MobileViTForImageClassification"),q6t.forEach(t),Vlr=r(lIe," (MobileViT model)"),lIe.forEach(t),Xlr=i(Te),Ft=n(Te,"LI",{});var Rm=s(Ft);kve=n(Rm,"STRONG",{});var j6t=s(kve);zlr=r(j6t,"perceiver"),j6t.forEach(t),Qlr=r(Rm," \u2014 "),PW=n(Rm,"A",{href:!0});var D6t=s(PW);Wlr=r(D6t,"PerceiverForImageClassificationLearned"),D6t.forEach(t),Hlr=r(Rm," or "),BW=n(Rm,"A",{href:!0});var G6t=s(BW);Ulr=r(G6t,"PerceiverForImageClassificationFourier"),G6t.forEach(t),Jlr=r(Rm," or "),NW=n(Rm,"A",{href:!0});var O6t=s(NW);Ylr=r(O6t,"PerceiverForImageClassificationConvProcessing"),O6t.forEach(t),Klr=r(Rm," (Perceiver model)"),Rm.forEach(t),Zlr=i(Te),LM=n(Te,"LI",{});var iIe=s(LM);Sve=n(iIe,"STRONG",{});var V6t=s(Sve);eir=r(V6t,"poolformer"),V6t.forEach(t),oir=r(iIe," \u2014 "),IW=n(iIe,"A",{href:!0});var X6t=s(IW);rir=r(X6t,"PoolFormerForImageClassification"),X6t.forEach(t),tir=r(iIe," (PoolFormer model)"),iIe.forEach(t),air=i(Te),yM=n(Te,"LI",{});var dIe=s(yM);Rve=n(dIe,"STRONG",{});var z6t=s(Rve);nir=r(z6t,"regnet"),z6t.forEach(t),sir=r(dIe," \u2014 "),qW=n(dIe,"A",{href:!0});var Q6t=s(qW);lir=r(Q6t,"RegNetForImageClassification"),Q6t.forEach(t),iir=r(dIe," (RegNet model)"),dIe.forEach(t),dir=i(Te),xM=n(Te,"LI",{});var cIe=s(xM);Pve=n(cIe,"STRONG",{});var W6t=s(Pve);cir=r(W6t,"resnet"),W6t.forEach(t),mir=r(cIe," \u2014 "),jW=n(cIe,"A",{href:!0});var H6t=s(jW);fir=r(H6t,"ResNetForImageClassification"),H6t.forEach(t),gir=r(cIe," (ResNet model)"),cIe.forEach(t),hir=i(Te),$M=n(Te,"LI",{});var mIe=s($M);Bve=n(mIe,"STRONG",{});var U6t=s(Bve);uir=r(U6t,"segformer"),U6t.forEach(t),pir=r(mIe," \u2014 "),DW=n(mIe,"A",{href:!0});var J6t=s(DW);_ir=r(J6t,"SegformerForImageClassification"),J6t.forEach(t),bir=r(mIe," (SegFormer model)"),mIe.forEach(t),vir=i(Te),kM=n(Te,"LI",{});var fIe=s(kM);Nve=n(fIe,"STRONG",{});var Y6t=s(Nve);Fir=r(Y6t,"swin"),Y6t.forEach(t),Tir=r(fIe," \u2014 "),GW=n(fIe,"A",{href:!0});var K6t=s(GW);Mir=r(K6t,"SwinForImageClassification"),K6t.forEach(t),Eir=r(fIe," (Swin Transformer model)"),fIe.forEach(t),Cir=i(Te),SM=n(Te,"LI",{});var gIe=s(SM);Ive=n(gIe,"STRONG",{});var Z6t=s(Ive);wir=r(Z6t,"van"),Z6t.forEach(t),Air=r(gIe," \u2014 "),OW=n(gIe,"A",{href:!0});var e7t=s(OW);Lir=r(e7t,"VanForImageClassification"),e7t.forEach(t),yir=r(gIe," (VAN model)"),gIe.forEach(t),xir=i(Te),RM=n(Te,"LI",{});var hIe=s(RM);qve=n(hIe,"STRONG",{});var o7t=s(qve);$ir=r(o7t,"vit"),o7t.forEach(t),kir=r(hIe," \u2014 "),VW=n(hIe,"A",{href:!0});var r7t=s(VW);Sir=r(r7t,"ViTForImageClassification"),r7t.forEach(t),Rir=r(hIe," (ViT model)"),hIe.forEach(t),Te.forEach(t),Pir=i(va),PM=n(va,"P",{});var uIe=s(PM);Bir=r(uIe,"The model is set in evaluation mode by default using "),jve=n(uIe,"CODE",{});var t7t=s(jve);Nir=r(t7t,"model.eval()"),t7t.forEach(t),Iir=r(uIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dve=n(uIe,"CODE",{});var a7t=s(Dve);qir=r(a7t,"model.train()"),a7t.forEach(t),uIe.forEach(t),jir=i(va),T(BM.$$.fragment,va),va.forEach(t),hl.forEach(t),YXe=i(m),Cd=n(m,"H2",{class:!0});var tWe=s(Cd);NM=n(tWe,"A",{id:!0,class:!0,href:!0});var n7t=s(NM);Gve=n(n7t,"SPAN",{});var s7t=s(Gve);T(D8.$$.fragment,s7t),s7t.forEach(t),n7t.forEach(t),Dir=i(tWe),Ove=n(tWe,"SPAN",{});var l7t=s(Ove);Gir=r(l7t,"AutoModelForVision2Seq"),l7t.forEach(t),tWe.forEach(t),KXe=i(m),Vo=n(m,"DIV",{class:!0});var ul=s(Vo);T(G8.$$.fragment,ul),Oir=i(ul),wd=n(ul,"P",{});var mte=s(wd);Vir=r(mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),XW=n(mte,"A",{href:!0});var i7t=s(XW);Xir=r(i7t,"from_pretrained()"),i7t.forEach(t),zir=r(mte," class method or the "),zW=n(mte,"A",{href:!0});var d7t=s(zW);Qir=r(d7t,"from_config()"),d7t.forEach(t),Wir=r(mte,` class
method.`),mte.forEach(t),Hir=i(ul),O8=n(ul,"P",{});var aWe=s(O8);Uir=r(aWe,"This class cannot be instantiated directly using "),Vve=n(aWe,"CODE",{});var c7t=s(Vve);Jir=r(c7t,"__init__()"),c7t.forEach(t),Yir=r(aWe," (throws an error)."),aWe.forEach(t),Kir=i(ul),Tt=n(ul,"DIV",{class:!0});var N7=s(Tt);T(V8.$$.fragment,N7),Zir=i(N7),Xve=n(N7,"P",{});var m7t=s(Xve);edr=r(m7t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),m7t.forEach(t),odr=i(N7),Ad=n(N7,"P",{});var fte=s(Ad);rdr=r(fte,`Note:
Loading a model from its configuration file does `),zve=n(fte,"STRONG",{});var f7t=s(zve);tdr=r(f7t,"not"),f7t.forEach(t),adr=r(fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=n(fte,"A",{href:!0});var g7t=s(QW);ndr=r(g7t,"from_pretrained()"),g7t.forEach(t),sdr=r(fte," to load the model weights."),fte.forEach(t),ldr=i(N7),T(IM.$$.fragment,N7),N7.forEach(t),idr=i(ul),co=n(ul,"DIV",{class:!0});var Fa=s(co);T(X8.$$.fragment,Fa),ddr=i(Fa),Qve=n(Fa,"P",{});var h7t=s(Qve);cdr=r(h7t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),h7t.forEach(t),mdr=i(Fa),Ha=n(Fa,"P",{});var I7=s(Ha);fdr=r(I7,"The model class to instantiate is selected based on the "),Wve=n(I7,"CODE",{});var u7t=s(Wve);gdr=r(u7t,"model_type"),u7t.forEach(t),hdr=r(I7,` property of the config object (either
passed as an argument or loaded from `),Hve=n(I7,"CODE",{});var p7t=s(Hve);udr=r(p7t,"pretrained_model_name_or_path"),p7t.forEach(t),pdr=r(I7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=n(I7,"CODE",{});var _7t=s(Uve);_dr=r(_7t,"pretrained_model_name_or_path"),_7t.forEach(t),bdr=r(I7,":"),I7.forEach(t),vdr=i(Fa),Jve=n(Fa,"UL",{});var b7t=s(Jve);qM=n(b7t,"LI",{});var pIe=s(qM);Yve=n(pIe,"STRONG",{});var v7t=s(Yve);Fdr=r(v7t,"vision-encoder-decoder"),v7t.forEach(t),Tdr=r(pIe," \u2014 "),WW=n(pIe,"A",{href:!0});var F7t=s(WW);Mdr=r(F7t,"VisionEncoderDecoderModel"),F7t.forEach(t),Edr=r(pIe," (Vision Encoder decoder model)"),pIe.forEach(t),b7t.forEach(t),Cdr=i(Fa),jM=n(Fa,"P",{});var _Ie=s(jM);wdr=r(_Ie,"The model is set in evaluation mode by default using "),Kve=n(_Ie,"CODE",{});var T7t=s(Kve);Adr=r(T7t,"model.eval()"),T7t.forEach(t),Ldr=r(_Ie,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zve=n(_Ie,"CODE",{});var M7t=s(Zve);ydr=r(M7t,"model.train()"),M7t.forEach(t),_Ie.forEach(t),xdr=i(Fa),T(DM.$$.fragment,Fa),Fa.forEach(t),ul.forEach(t),ZXe=i(m),Ld=n(m,"H2",{class:!0});var nWe=s(Ld);GM=n(nWe,"A",{id:!0,class:!0,href:!0});var E7t=s(GM);e1e=n(E7t,"SPAN",{});var C7t=s(e1e);T(z8.$$.fragment,C7t),C7t.forEach(t),E7t.forEach(t),$dr=i(nWe),o1e=n(nWe,"SPAN",{});var w7t=s(o1e);kdr=r(w7t,"AutoModelForVisualQuestionAnswering"),w7t.forEach(t),nWe.forEach(t),eze=i(m),Xo=n(m,"DIV",{class:!0});var pl=s(Xo);T(Q8.$$.fragment,pl),Sdr=i(pl),yd=n(pl,"P",{});var gte=s(yd);Rdr=r(gte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),HW=n(gte,"A",{href:!0});var A7t=s(HW);Pdr=r(A7t,"from_pretrained()"),A7t.forEach(t),Bdr=r(gte," class method or the "),UW=n(gte,"A",{href:!0});var L7t=s(UW);Ndr=r(L7t,"from_config()"),L7t.forEach(t),Idr=r(gte,` class
method.`),gte.forEach(t),qdr=i(pl),W8=n(pl,"P",{});var sWe=s(W8);jdr=r(sWe,"This class cannot be instantiated directly using "),r1e=n(sWe,"CODE",{});var y7t=s(r1e);Ddr=r(y7t,"__init__()"),y7t.forEach(t),Gdr=r(sWe," (throws an error)."),sWe.forEach(t),Odr=i(pl),Mt=n(pl,"DIV",{class:!0});var q7=s(Mt);T(H8.$$.fragment,q7),Vdr=i(q7),t1e=n(q7,"P",{});var x7t=s(t1e);Xdr=r(x7t,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),x7t.forEach(t),zdr=i(q7),xd=n(q7,"P",{});var hte=s(xd);Qdr=r(hte,`Note:
Loading a model from its configuration file does `),a1e=n(hte,"STRONG",{});var $7t=s(a1e);Wdr=r($7t,"not"),$7t.forEach(t),Hdr=r(hte,` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=n(hte,"A",{href:!0});var k7t=s(JW);Udr=r(k7t,"from_pretrained()"),k7t.forEach(t),Jdr=r(hte," to load the model weights."),hte.forEach(t),Ydr=i(q7),T(OM.$$.fragment,q7),q7.forEach(t),Kdr=i(pl),mo=n(pl,"DIV",{class:!0});var Ta=s(mo);T(U8.$$.fragment,Ta),Zdr=i(Ta),n1e=n(Ta,"P",{});var S7t=s(n1e);ecr=r(S7t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),S7t.forEach(t),ocr=i(Ta),Ua=n(Ta,"P",{});var j7=s(Ua);rcr=r(j7,"The model class to instantiate is selected based on the "),s1e=n(j7,"CODE",{});var R7t=s(s1e);tcr=r(R7t,"model_type"),R7t.forEach(t),acr=r(j7,` property of the config object (either
passed as an argument or loaded from `),l1e=n(j7,"CODE",{});var P7t=s(l1e);ncr=r(P7t,"pretrained_model_name_or_path"),P7t.forEach(t),scr=r(j7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i1e=n(j7,"CODE",{});var B7t=s(i1e);lcr=r(B7t,"pretrained_model_name_or_path"),B7t.forEach(t),icr=r(j7,":"),j7.forEach(t),dcr=i(Ta),d1e=n(Ta,"UL",{});var N7t=s(d1e);VM=n(N7t,"LI",{});var bIe=s(VM);c1e=n(bIe,"STRONG",{});var I7t=s(c1e);ccr=r(I7t,"vilt"),I7t.forEach(t),mcr=r(bIe," \u2014 "),YW=n(bIe,"A",{href:!0});var q7t=s(YW);fcr=r(q7t,"ViltForQuestionAnswering"),q7t.forEach(t),gcr=r(bIe," (ViLT model)"),bIe.forEach(t),N7t.forEach(t),hcr=i(Ta),XM=n(Ta,"P",{});var vIe=s(XM);ucr=r(vIe,"The model is set in evaluation mode by default using "),m1e=n(vIe,"CODE",{});var j7t=s(m1e);pcr=r(j7t,"model.eval()"),j7t.forEach(t),_cr=r(vIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f1e=n(vIe,"CODE",{});var D7t=s(f1e);bcr=r(D7t,"model.train()"),D7t.forEach(t),vIe.forEach(t),vcr=i(Ta),T(zM.$$.fragment,Ta),Ta.forEach(t),pl.forEach(t),oze=i(m),$d=n(m,"H2",{class:!0});var lWe=s($d);QM=n(lWe,"A",{id:!0,class:!0,href:!0});var G7t=s(QM);g1e=n(G7t,"SPAN",{});var O7t=s(g1e);T(J8.$$.fragment,O7t),O7t.forEach(t),G7t.forEach(t),Fcr=i(lWe),h1e=n(lWe,"SPAN",{});var V7t=s(h1e);Tcr=r(V7t,"AutoModelForAudioClassification"),V7t.forEach(t),lWe.forEach(t),rze=i(m),zo=n(m,"DIV",{class:!0});var _l=s(zo);T(Y8.$$.fragment,_l),Mcr=i(_l),kd=n(_l,"P",{});var ute=s(kd);Ecr=r(ute,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),KW=n(ute,"A",{href:!0});var X7t=s(KW);Ccr=r(X7t,"from_pretrained()"),X7t.forEach(t),wcr=r(ute," class method or the "),ZW=n(ute,"A",{href:!0});var z7t=s(ZW);Acr=r(z7t,"from_config()"),z7t.forEach(t),Lcr=r(ute,` class
method.`),ute.forEach(t),ycr=i(_l),K8=n(_l,"P",{});var iWe=s(K8);xcr=r(iWe,"This class cannot be instantiated directly using "),u1e=n(iWe,"CODE",{});var Q7t=s(u1e);$cr=r(Q7t,"__init__()"),Q7t.forEach(t),kcr=r(iWe," (throws an error)."),iWe.forEach(t),Scr=i(_l),Et=n(_l,"DIV",{class:!0});var D7=s(Et);T(Z8.$$.fragment,D7),Rcr=i(D7),p1e=n(D7,"P",{});var W7t=s(p1e);Pcr=r(W7t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),W7t.forEach(t),Bcr=i(D7),Sd=n(D7,"P",{});var pte=s(Sd);Ncr=r(pte,`Note:
Loading a model from its configuration file does `),_1e=n(pte,"STRONG",{});var H7t=s(_1e);Icr=r(H7t,"not"),H7t.forEach(t),qcr=r(pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=n(pte,"A",{href:!0});var U7t=s(eH);jcr=r(U7t,"from_pretrained()"),U7t.forEach(t),Dcr=r(pte," to load the model weights."),pte.forEach(t),Gcr=i(D7),T(WM.$$.fragment,D7),D7.forEach(t),Ocr=i(_l),fo=n(_l,"DIV",{class:!0});var Ma=s(fo);T(e9.$$.fragment,Ma),Vcr=i(Ma),b1e=n(Ma,"P",{});var J7t=s(b1e);Xcr=r(J7t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),J7t.forEach(t),zcr=i(Ma),Ja=n(Ma,"P",{});var G7=s(Ja);Qcr=r(G7,"The model class to instantiate is selected based on the "),v1e=n(G7,"CODE",{});var Y7t=s(v1e);Wcr=r(Y7t,"model_type"),Y7t.forEach(t),Hcr=r(G7,` property of the config object (either
passed as an argument or loaded from `),F1e=n(G7,"CODE",{});var K7t=s(F1e);Ucr=r(K7t,"pretrained_model_name_or_path"),K7t.forEach(t),Jcr=r(G7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T1e=n(G7,"CODE",{});var Z7t=s(T1e);Ycr=r(Z7t,"pretrained_model_name_or_path"),Z7t.forEach(t),Kcr=r(G7,":"),G7.forEach(t),Zcr=i(Ma),Pe=n(Ma,"UL",{});var ze=s(Pe);HM=n(ze,"LI",{});var FIe=s(HM);M1e=n(FIe,"STRONG",{});var eLt=s(M1e);emr=r(eLt,"data2vec-audio"),eLt.forEach(t),omr=r(FIe," \u2014 "),oH=n(FIe,"A",{href:!0});var oLt=s(oH);rmr=r(oLt,"Data2VecAudioForSequenceClassification"),oLt.forEach(t),tmr=r(FIe," (Data2VecAudio model)"),FIe.forEach(t),amr=i(ze),UM=n(ze,"LI",{});var TIe=s(UM);E1e=n(TIe,"STRONG",{});var rLt=s(E1e);nmr=r(rLt,"hubert"),rLt.forEach(t),smr=r(TIe," \u2014 "),rH=n(TIe,"A",{href:!0});var tLt=s(rH);lmr=r(tLt,"HubertForSequenceClassification"),tLt.forEach(t),imr=r(TIe," (Hubert model)"),TIe.forEach(t),dmr=i(ze),JM=n(ze,"LI",{});var MIe=s(JM);C1e=n(MIe,"STRONG",{});var aLt=s(C1e);cmr=r(aLt,"sew"),aLt.forEach(t),mmr=r(MIe," \u2014 "),tH=n(MIe,"A",{href:!0});var nLt=s(tH);fmr=r(nLt,"SEWForSequenceClassification"),nLt.forEach(t),gmr=r(MIe," (SEW model)"),MIe.forEach(t),hmr=i(ze),YM=n(ze,"LI",{});var EIe=s(YM);w1e=n(EIe,"STRONG",{});var sLt=s(w1e);umr=r(sLt,"sew-d"),sLt.forEach(t),pmr=r(EIe," \u2014 "),aH=n(EIe,"A",{href:!0});var lLt=s(aH);_mr=r(lLt,"SEWDForSequenceClassification"),lLt.forEach(t),bmr=r(EIe," (SEW-D model)"),EIe.forEach(t),vmr=i(ze),KM=n(ze,"LI",{});var CIe=s(KM);A1e=n(CIe,"STRONG",{});var iLt=s(A1e);Fmr=r(iLt,"unispeech"),iLt.forEach(t),Tmr=r(CIe," \u2014 "),nH=n(CIe,"A",{href:!0});var dLt=s(nH);Mmr=r(dLt,"UniSpeechForSequenceClassification"),dLt.forEach(t),Emr=r(CIe," (UniSpeech model)"),CIe.forEach(t),Cmr=i(ze),ZM=n(ze,"LI",{});var wIe=s(ZM);L1e=n(wIe,"STRONG",{});var cLt=s(L1e);wmr=r(cLt,"unispeech-sat"),cLt.forEach(t),Amr=r(wIe," \u2014 "),sH=n(wIe,"A",{href:!0});var mLt=s(sH);Lmr=r(mLt,"UniSpeechSatForSequenceClassification"),mLt.forEach(t),ymr=r(wIe," (UniSpeechSat model)"),wIe.forEach(t),xmr=i(ze),e4=n(ze,"LI",{});var AIe=s(e4);y1e=n(AIe,"STRONG",{});var fLt=s(y1e);$mr=r(fLt,"wav2vec2"),fLt.forEach(t),kmr=r(AIe," \u2014 "),lH=n(AIe,"A",{href:!0});var gLt=s(lH);Smr=r(gLt,"Wav2Vec2ForSequenceClassification"),gLt.forEach(t),Rmr=r(AIe," (Wav2Vec2 model)"),AIe.forEach(t),Pmr=i(ze),o4=n(ze,"LI",{});var LIe=s(o4);x1e=n(LIe,"STRONG",{});var hLt=s(x1e);Bmr=r(hLt,"wav2vec2-conformer"),hLt.forEach(t),Nmr=r(LIe," \u2014 "),iH=n(LIe,"A",{href:!0});var uLt=s(iH);Imr=r(uLt,"Wav2Vec2ConformerForSequenceClassification"),uLt.forEach(t),qmr=r(LIe," (Wav2Vec2-Conformer model)"),LIe.forEach(t),jmr=i(ze),r4=n(ze,"LI",{});var yIe=s(r4);$1e=n(yIe,"STRONG",{});var pLt=s($1e);Dmr=r(pLt,"wavlm"),pLt.forEach(t),Gmr=r(yIe," \u2014 "),dH=n(yIe,"A",{href:!0});var _Lt=s(dH);Omr=r(_Lt,"WavLMForSequenceClassification"),_Lt.forEach(t),Vmr=r(yIe," (WavLM model)"),yIe.forEach(t),ze.forEach(t),Xmr=i(Ma),t4=n(Ma,"P",{});var xIe=s(t4);zmr=r(xIe,"The model is set in evaluation mode by default using "),k1e=n(xIe,"CODE",{});var bLt=s(k1e);Qmr=r(bLt,"model.eval()"),bLt.forEach(t),Wmr=r(xIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S1e=n(xIe,"CODE",{});var vLt=s(S1e);Hmr=r(vLt,"model.train()"),vLt.forEach(t),xIe.forEach(t),Umr=i(Ma),T(a4.$$.fragment,Ma),Ma.forEach(t),_l.forEach(t),tze=i(m),Rd=n(m,"H2",{class:!0});var dWe=s(Rd);n4=n(dWe,"A",{id:!0,class:!0,href:!0});var FLt=s(n4);R1e=n(FLt,"SPAN",{});var TLt=s(R1e);T(o9.$$.fragment,TLt),TLt.forEach(t),FLt.forEach(t),Jmr=i(dWe),P1e=n(dWe,"SPAN",{});var MLt=s(P1e);Ymr=r(MLt,"AutoModelForAudioFrameClassification"),MLt.forEach(t),dWe.forEach(t),aze=i(m),Qo=n(m,"DIV",{class:!0});var bl=s(Qo);T(r9.$$.fragment,bl),Kmr=i(bl),Pd=n(bl,"P",{});var _te=s(Pd);Zmr=r(_te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),cH=n(_te,"A",{href:!0});var ELt=s(cH);efr=r(ELt,"from_pretrained()"),ELt.forEach(t),ofr=r(_te," class method or the "),mH=n(_te,"A",{href:!0});var CLt=s(mH);rfr=r(CLt,"from_config()"),CLt.forEach(t),tfr=r(_te,` class
method.`),_te.forEach(t),afr=i(bl),t9=n(bl,"P",{});var cWe=s(t9);nfr=r(cWe,"This class cannot be instantiated directly using "),B1e=n(cWe,"CODE",{});var wLt=s(B1e);sfr=r(wLt,"__init__()"),wLt.forEach(t),lfr=r(cWe," (throws an error)."),cWe.forEach(t),ifr=i(bl),Ct=n(bl,"DIV",{class:!0});var O7=s(Ct);T(a9.$$.fragment,O7),dfr=i(O7),N1e=n(O7,"P",{});var ALt=s(N1e);cfr=r(ALt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),ALt.forEach(t),mfr=i(O7),Bd=n(O7,"P",{});var bte=s(Bd);ffr=r(bte,`Note:
Loading a model from its configuration file does `),I1e=n(bte,"STRONG",{});var LLt=s(I1e);gfr=r(LLt,"not"),LLt.forEach(t),hfr=r(bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=n(bte,"A",{href:!0});var yLt=s(fH);ufr=r(yLt,"from_pretrained()"),yLt.forEach(t),pfr=r(bte," to load the model weights."),bte.forEach(t),_fr=i(O7),T(s4.$$.fragment,O7),O7.forEach(t),bfr=i(bl),go=n(bl,"DIV",{class:!0});var Ea=s(go);T(n9.$$.fragment,Ea),vfr=i(Ea),q1e=n(Ea,"P",{});var xLt=s(q1e);Ffr=r(xLt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),xLt.forEach(t),Tfr=i(Ea),Ya=n(Ea,"P",{});var V7=s(Ya);Mfr=r(V7,"The model class to instantiate is selected based on the "),j1e=n(V7,"CODE",{});var $Lt=s(j1e);Efr=r($Lt,"model_type"),$Lt.forEach(t),Cfr=r(V7,` property of the config object (either
passed as an argument or loaded from `),D1e=n(V7,"CODE",{});var kLt=s(D1e);wfr=r(kLt,"pretrained_model_name_or_path"),kLt.forEach(t),Afr=r(V7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G1e=n(V7,"CODE",{});var SLt=s(G1e);Lfr=r(SLt,"pretrained_model_name_or_path"),SLt.forEach(t),yfr=r(V7,":"),V7.forEach(t),xfr=i(Ea),rt=n(Ea,"UL",{});var vl=s(rt);l4=n(vl,"LI",{});var $Ie=s(l4);O1e=n($Ie,"STRONG",{});var RLt=s(O1e);$fr=r(RLt,"data2vec-audio"),RLt.forEach(t),kfr=r($Ie," \u2014 "),gH=n($Ie,"A",{href:!0});var PLt=s(gH);Sfr=r(PLt,"Data2VecAudioForAudioFrameClassification"),PLt.forEach(t),Rfr=r($Ie," (Data2VecAudio model)"),$Ie.forEach(t),Pfr=i(vl),i4=n(vl,"LI",{});var kIe=s(i4);V1e=n(kIe,"STRONG",{});var BLt=s(V1e);Bfr=r(BLt,"unispeech-sat"),BLt.forEach(t),Nfr=r(kIe," \u2014 "),hH=n(kIe,"A",{href:!0});var NLt=s(hH);Ifr=r(NLt,"UniSpeechSatForAudioFrameClassification"),NLt.forEach(t),qfr=r(kIe," (UniSpeechSat model)"),kIe.forEach(t),jfr=i(vl),d4=n(vl,"LI",{});var SIe=s(d4);X1e=n(SIe,"STRONG",{});var ILt=s(X1e);Dfr=r(ILt,"wav2vec2"),ILt.forEach(t),Gfr=r(SIe," \u2014 "),uH=n(SIe,"A",{href:!0});var qLt=s(uH);Ofr=r(qLt,"Wav2Vec2ForAudioFrameClassification"),qLt.forEach(t),Vfr=r(SIe," (Wav2Vec2 model)"),SIe.forEach(t),Xfr=i(vl),c4=n(vl,"LI",{});var RIe=s(c4);z1e=n(RIe,"STRONG",{});var jLt=s(z1e);zfr=r(jLt,"wav2vec2-conformer"),jLt.forEach(t),Qfr=r(RIe," \u2014 "),pH=n(RIe,"A",{href:!0});var DLt=s(pH);Wfr=r(DLt,"Wav2Vec2ConformerForAudioFrameClassification"),DLt.forEach(t),Hfr=r(RIe," (Wav2Vec2-Conformer model)"),RIe.forEach(t),Ufr=i(vl),m4=n(vl,"LI",{});var PIe=s(m4);Q1e=n(PIe,"STRONG",{});var GLt=s(Q1e);Jfr=r(GLt,"wavlm"),GLt.forEach(t),Yfr=r(PIe," \u2014 "),_H=n(PIe,"A",{href:!0});var OLt=s(_H);Kfr=r(OLt,"WavLMForAudioFrameClassification"),OLt.forEach(t),Zfr=r(PIe," (WavLM model)"),PIe.forEach(t),vl.forEach(t),egr=i(Ea),f4=n(Ea,"P",{});var BIe=s(f4);ogr=r(BIe,"The model is set in evaluation mode by default using "),W1e=n(BIe,"CODE",{});var VLt=s(W1e);rgr=r(VLt,"model.eval()"),VLt.forEach(t),tgr=r(BIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H1e=n(BIe,"CODE",{});var XLt=s(H1e);agr=r(XLt,"model.train()"),XLt.forEach(t),BIe.forEach(t),ngr=i(Ea),T(g4.$$.fragment,Ea),Ea.forEach(t),bl.forEach(t),nze=i(m),Nd=n(m,"H2",{class:!0});var mWe=s(Nd);h4=n(mWe,"A",{id:!0,class:!0,href:!0});var zLt=s(h4);U1e=n(zLt,"SPAN",{});var QLt=s(U1e);T(s9.$$.fragment,QLt),QLt.forEach(t),zLt.forEach(t),sgr=i(mWe),J1e=n(mWe,"SPAN",{});var WLt=s(J1e);lgr=r(WLt,"AutoModelForCTC"),WLt.forEach(t),mWe.forEach(t),sze=i(m),Wo=n(m,"DIV",{class:!0});var Fl=s(Wo);T(l9.$$.fragment,Fl),igr=i(Fl),Id=n(Fl,"P",{});var vte=s(Id);dgr=r(vte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),bH=n(vte,"A",{href:!0});var HLt=s(bH);cgr=r(HLt,"from_pretrained()"),HLt.forEach(t),mgr=r(vte," class method or the "),vH=n(vte,"A",{href:!0});var ULt=s(vH);fgr=r(ULt,"from_config()"),ULt.forEach(t),ggr=r(vte,` class
method.`),vte.forEach(t),hgr=i(Fl),i9=n(Fl,"P",{});var fWe=s(i9);ugr=r(fWe,"This class cannot be instantiated directly using "),Y1e=n(fWe,"CODE",{});var JLt=s(Y1e);pgr=r(JLt,"__init__()"),JLt.forEach(t),_gr=r(fWe," (throws an error)."),fWe.forEach(t),bgr=i(Fl),wt=n(Fl,"DIV",{class:!0});var X7=s(wt);T(d9.$$.fragment,X7),vgr=i(X7),K1e=n(X7,"P",{});var YLt=s(K1e);Fgr=r(YLt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),YLt.forEach(t),Tgr=i(X7),qd=n(X7,"P",{});var Fte=s(qd);Mgr=r(Fte,`Note:
Loading a model from its configuration file does `),Z1e=n(Fte,"STRONG",{});var KLt=s(Z1e);Egr=r(KLt,"not"),KLt.forEach(t),Cgr=r(Fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=n(Fte,"A",{href:!0});var ZLt=s(FH);wgr=r(ZLt,"from_pretrained()"),ZLt.forEach(t),Agr=r(Fte," to load the model weights."),Fte.forEach(t),Lgr=i(X7),T(u4.$$.fragment,X7),X7.forEach(t),ygr=i(Fl),ho=n(Fl,"DIV",{class:!0});var Ca=s(ho);T(c9.$$.fragment,Ca),xgr=i(Ca),eFe=n(Ca,"P",{});var eyt=s(eFe);$gr=r(eyt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),eyt.forEach(t),kgr=i(Ca),Ka=n(Ca,"P",{});var z7=s(Ka);Sgr=r(z7,"The model class to instantiate is selected based on the "),oFe=n(z7,"CODE",{});var oyt=s(oFe);Rgr=r(oyt,"model_type"),oyt.forEach(t),Pgr=r(z7,` property of the config object (either
passed as an argument or loaded from `),rFe=n(z7,"CODE",{});var ryt=s(rFe);Bgr=r(ryt,"pretrained_model_name_or_path"),ryt.forEach(t),Ngr=r(z7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tFe=n(z7,"CODE",{});var tyt=s(tFe);Igr=r(tyt,"pretrained_model_name_or_path"),tyt.forEach(t),qgr=r(z7,":"),z7.forEach(t),jgr=i(Ca),Le=n(Ca,"UL",{});var Be=s(Le);p4=n(Be,"LI",{});var NIe=s(p4);aFe=n(NIe,"STRONG",{});var ayt=s(aFe);Dgr=r(ayt,"data2vec-audio"),ayt.forEach(t),Ggr=r(NIe," \u2014 "),TH=n(NIe,"A",{href:!0});var nyt=s(TH);Ogr=r(nyt,"Data2VecAudioForCTC"),nyt.forEach(t),Vgr=r(NIe," (Data2VecAudio model)"),NIe.forEach(t),Xgr=i(Be),_4=n(Be,"LI",{});var IIe=s(_4);nFe=n(IIe,"STRONG",{});var syt=s(nFe);zgr=r(syt,"hubert"),syt.forEach(t),Qgr=r(IIe," \u2014 "),MH=n(IIe,"A",{href:!0});var lyt=s(MH);Wgr=r(lyt,"HubertForCTC"),lyt.forEach(t),Hgr=r(IIe," (Hubert model)"),IIe.forEach(t),Ugr=i(Be),b4=n(Be,"LI",{});var qIe=s(b4);sFe=n(qIe,"STRONG",{});var iyt=s(sFe);Jgr=r(iyt,"mctct"),iyt.forEach(t),Ygr=r(qIe," \u2014 "),EH=n(qIe,"A",{href:!0});var dyt=s(EH);Kgr=r(dyt,"MCTCTForCTC"),dyt.forEach(t),Zgr=r(qIe," (M-CTC-T model)"),qIe.forEach(t),ehr=i(Be),v4=n(Be,"LI",{});var jIe=s(v4);lFe=n(jIe,"STRONG",{});var cyt=s(lFe);ohr=r(cyt,"sew"),cyt.forEach(t),rhr=r(jIe," \u2014 "),CH=n(jIe,"A",{href:!0});var myt=s(CH);thr=r(myt,"SEWForCTC"),myt.forEach(t),ahr=r(jIe," (SEW model)"),jIe.forEach(t),nhr=i(Be),F4=n(Be,"LI",{});var DIe=s(F4);iFe=n(DIe,"STRONG",{});var fyt=s(iFe);shr=r(fyt,"sew-d"),fyt.forEach(t),lhr=r(DIe," \u2014 "),wH=n(DIe,"A",{href:!0});var gyt=s(wH);ihr=r(gyt,"SEWDForCTC"),gyt.forEach(t),dhr=r(DIe," (SEW-D model)"),DIe.forEach(t),chr=i(Be),T4=n(Be,"LI",{});var GIe=s(T4);dFe=n(GIe,"STRONG",{});var hyt=s(dFe);mhr=r(hyt,"unispeech"),hyt.forEach(t),fhr=r(GIe," \u2014 "),AH=n(GIe,"A",{href:!0});var uyt=s(AH);ghr=r(uyt,"UniSpeechForCTC"),uyt.forEach(t),hhr=r(GIe," (UniSpeech model)"),GIe.forEach(t),uhr=i(Be),M4=n(Be,"LI",{});var OIe=s(M4);cFe=n(OIe,"STRONG",{});var pyt=s(cFe);phr=r(pyt,"unispeech-sat"),pyt.forEach(t),_hr=r(OIe," \u2014 "),LH=n(OIe,"A",{href:!0});var _yt=s(LH);bhr=r(_yt,"UniSpeechSatForCTC"),_yt.forEach(t),vhr=r(OIe," (UniSpeechSat model)"),OIe.forEach(t),Fhr=i(Be),E4=n(Be,"LI",{});var VIe=s(E4);mFe=n(VIe,"STRONG",{});var byt=s(mFe);Thr=r(byt,"wav2vec2"),byt.forEach(t),Mhr=r(VIe," \u2014 "),yH=n(VIe,"A",{href:!0});var vyt=s(yH);Ehr=r(vyt,"Wav2Vec2ForCTC"),vyt.forEach(t),Chr=r(VIe," (Wav2Vec2 model)"),VIe.forEach(t),whr=i(Be),C4=n(Be,"LI",{});var XIe=s(C4);fFe=n(XIe,"STRONG",{});var Fyt=s(fFe);Ahr=r(Fyt,"wav2vec2-conformer"),Fyt.forEach(t),Lhr=r(XIe," \u2014 "),xH=n(XIe,"A",{href:!0});var Tyt=s(xH);yhr=r(Tyt,"Wav2Vec2ConformerForCTC"),Tyt.forEach(t),xhr=r(XIe," (Wav2Vec2-Conformer model)"),XIe.forEach(t),$hr=i(Be),w4=n(Be,"LI",{});var zIe=s(w4);gFe=n(zIe,"STRONG",{});var Myt=s(gFe);khr=r(Myt,"wavlm"),Myt.forEach(t),Shr=r(zIe," \u2014 "),$H=n(zIe,"A",{href:!0});var Eyt=s($H);Rhr=r(Eyt,"WavLMForCTC"),Eyt.forEach(t),Phr=r(zIe," (WavLM model)"),zIe.forEach(t),Be.forEach(t),Bhr=i(Ca),A4=n(Ca,"P",{});var QIe=s(A4);Nhr=r(QIe,"The model is set in evaluation mode by default using "),hFe=n(QIe,"CODE",{});var Cyt=s(hFe);Ihr=r(Cyt,"model.eval()"),Cyt.forEach(t),qhr=r(QIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uFe=n(QIe,"CODE",{});var wyt=s(uFe);jhr=r(wyt,"model.train()"),wyt.forEach(t),QIe.forEach(t),Dhr=i(Ca),T(L4.$$.fragment,Ca),Ca.forEach(t),Fl.forEach(t),lze=i(m),jd=n(m,"H2",{class:!0});var gWe=s(jd);y4=n(gWe,"A",{id:!0,class:!0,href:!0});var Ayt=s(y4);pFe=n(Ayt,"SPAN",{});var Lyt=s(pFe);T(m9.$$.fragment,Lyt),Lyt.forEach(t),Ayt.forEach(t),Ghr=i(gWe),_Fe=n(gWe,"SPAN",{});var yyt=s(_Fe);Ohr=r(yyt,"AutoModelForSpeechSeq2Seq"),yyt.forEach(t),gWe.forEach(t),ize=i(m),Ho=n(m,"DIV",{class:!0});var Tl=s(Ho);T(f9.$$.fragment,Tl),Vhr=i(Tl),Dd=n(Tl,"P",{});var Tte=s(Dd);Xhr=r(Tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),kH=n(Tte,"A",{href:!0});var xyt=s(kH);zhr=r(xyt,"from_pretrained()"),xyt.forEach(t),Qhr=r(Tte," class method or the "),SH=n(Tte,"A",{href:!0});var $yt=s(SH);Whr=r($yt,"from_config()"),$yt.forEach(t),Hhr=r(Tte,` class
method.`),Tte.forEach(t),Uhr=i(Tl),g9=n(Tl,"P",{});var hWe=s(g9);Jhr=r(hWe,"This class cannot be instantiated directly using "),bFe=n(hWe,"CODE",{});var kyt=s(bFe);Yhr=r(kyt,"__init__()"),kyt.forEach(t),Khr=r(hWe," (throws an error)."),hWe.forEach(t),Zhr=i(Tl),At=n(Tl,"DIV",{class:!0});var Q7=s(At);T(h9.$$.fragment,Q7),eur=i(Q7),vFe=n(Q7,"P",{});var Syt=s(vFe);our=r(Syt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Syt.forEach(t),rur=i(Q7),Gd=n(Q7,"P",{});var Mte=s(Gd);tur=r(Mte,`Note:
Loading a model from its configuration file does `),FFe=n(Mte,"STRONG",{});var Ryt=s(FFe);aur=r(Ryt,"not"),Ryt.forEach(t),nur=r(Mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=n(Mte,"A",{href:!0});var Pyt=s(RH);sur=r(Pyt,"from_pretrained()"),Pyt.forEach(t),lur=r(Mte," to load the model weights."),Mte.forEach(t),iur=i(Q7),T(x4.$$.fragment,Q7),Q7.forEach(t),dur=i(Tl),uo=n(Tl,"DIV",{class:!0});var wa=s(uo);T(u9.$$.fragment,wa),cur=i(wa),TFe=n(wa,"P",{});var Byt=s(TFe);mur=r(Byt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Byt.forEach(t),fur=i(wa),Za=n(wa,"P",{});var W7=s(Za);gur=r(W7,"The model class to instantiate is selected based on the "),MFe=n(W7,"CODE",{});var Nyt=s(MFe);hur=r(Nyt,"model_type"),Nyt.forEach(t),uur=r(W7,` property of the config object (either
passed as an argument or loaded from `),EFe=n(W7,"CODE",{});var Iyt=s(EFe);pur=r(Iyt,"pretrained_model_name_or_path"),Iyt.forEach(t),_ur=r(W7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CFe=n(W7,"CODE",{});var qyt=s(CFe);bur=r(qyt,"pretrained_model_name_or_path"),qyt.forEach(t),vur=r(W7,":"),W7.forEach(t),Fur=i(wa),p9=n(wa,"UL",{});var uWe=s(p9);$4=n(uWe,"LI",{});var WIe=s($4);wFe=n(WIe,"STRONG",{});var jyt=s(wFe);Tur=r(jyt,"speech-encoder-decoder"),jyt.forEach(t),Mur=r(WIe," \u2014 "),PH=n(WIe,"A",{href:!0});var Dyt=s(PH);Eur=r(Dyt,"SpeechEncoderDecoderModel"),Dyt.forEach(t),Cur=r(WIe," (Speech Encoder decoder model)"),WIe.forEach(t),wur=i(uWe),k4=n(uWe,"LI",{});var HIe=s(k4);AFe=n(HIe,"STRONG",{});var Gyt=s(AFe);Aur=r(Gyt,"speech_to_text"),Gyt.forEach(t),Lur=r(HIe," \u2014 "),BH=n(HIe,"A",{href:!0});var Oyt=s(BH);yur=r(Oyt,"Speech2TextForConditionalGeneration"),Oyt.forEach(t),xur=r(HIe," (Speech2Text model)"),HIe.forEach(t),uWe.forEach(t),$ur=i(wa),S4=n(wa,"P",{});var UIe=s(S4);kur=r(UIe,"The model is set in evaluation mode by default using "),LFe=n(UIe,"CODE",{});var Vyt=s(LFe);Sur=r(Vyt,"model.eval()"),Vyt.forEach(t),Rur=r(UIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yFe=n(UIe,"CODE",{});var Xyt=s(yFe);Pur=r(Xyt,"model.train()"),Xyt.forEach(t),UIe.forEach(t),Bur=i(wa),T(R4.$$.fragment,wa),wa.forEach(t),Tl.forEach(t),dze=i(m),Od=n(m,"H2",{class:!0});var pWe=s(Od);P4=n(pWe,"A",{id:!0,class:!0,href:!0});var zyt=s(P4);xFe=n(zyt,"SPAN",{});var Qyt=s(xFe);T(_9.$$.fragment,Qyt),Qyt.forEach(t),zyt.forEach(t),Nur=i(pWe),$Fe=n(pWe,"SPAN",{});var Wyt=s($Fe);Iur=r(Wyt,"AutoModelForAudioXVector"),Wyt.forEach(t),pWe.forEach(t),cze=i(m),Uo=n(m,"DIV",{class:!0});var Ml=s(Uo);T(b9.$$.fragment,Ml),qur=i(Ml),Vd=n(Ml,"P",{});var Ete=s(Vd);jur=r(Ete,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),NH=n(Ete,"A",{href:!0});var Hyt=s(NH);Dur=r(Hyt,"from_pretrained()"),Hyt.forEach(t),Gur=r(Ete," class method or the "),IH=n(Ete,"A",{href:!0});var Uyt=s(IH);Our=r(Uyt,"from_config()"),Uyt.forEach(t),Vur=r(Ete,` class
method.`),Ete.forEach(t),Xur=i(Ml),v9=n(Ml,"P",{});var _We=s(v9);zur=r(_We,"This class cannot be instantiated directly using "),kFe=n(_We,"CODE",{});var Jyt=s(kFe);Qur=r(Jyt,"__init__()"),Jyt.forEach(t),Wur=r(_We," (throws an error)."),_We.forEach(t),Hur=i(Ml),Lt=n(Ml,"DIV",{class:!0});var H7=s(Lt);T(F9.$$.fragment,H7),Uur=i(H7),SFe=n(H7,"P",{});var Yyt=s(SFe);Jur=r(Yyt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Yyt.forEach(t),Yur=i(H7),Xd=n(H7,"P",{});var Cte=s(Xd);Kur=r(Cte,`Note:
Loading a model from its configuration file does `),RFe=n(Cte,"STRONG",{});var Kyt=s(RFe);Zur=r(Kyt,"not"),Kyt.forEach(t),epr=r(Cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=n(Cte,"A",{href:!0});var Zyt=s(qH);opr=r(Zyt,"from_pretrained()"),Zyt.forEach(t),rpr=r(Cte," to load the model weights."),Cte.forEach(t),tpr=i(H7),T(B4.$$.fragment,H7),H7.forEach(t),apr=i(Ml),po=n(Ml,"DIV",{class:!0});var Aa=s(po);T(T9.$$.fragment,Aa),npr=i(Aa),PFe=n(Aa,"P",{});var e8t=s(PFe);spr=r(e8t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),e8t.forEach(t),lpr=i(Aa),en=n(Aa,"P",{});var U7=s(en);ipr=r(U7,"The model class to instantiate is selected based on the "),BFe=n(U7,"CODE",{});var o8t=s(BFe);dpr=r(o8t,"model_type"),o8t.forEach(t),cpr=r(U7,` property of the config object (either
passed as an argument or loaded from `),NFe=n(U7,"CODE",{});var r8t=s(NFe);mpr=r(r8t,"pretrained_model_name_or_path"),r8t.forEach(t),fpr=r(U7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IFe=n(U7,"CODE",{});var t8t=s(IFe);gpr=r(t8t,"pretrained_model_name_or_path"),t8t.forEach(t),hpr=r(U7,":"),U7.forEach(t),upr=i(Aa),tt=n(Aa,"UL",{});var El=s(tt);N4=n(El,"LI",{});var JIe=s(N4);qFe=n(JIe,"STRONG",{});var a8t=s(qFe);ppr=r(a8t,"data2vec-audio"),a8t.forEach(t),_pr=r(JIe," \u2014 "),jH=n(JIe,"A",{href:!0});var n8t=s(jH);bpr=r(n8t,"Data2VecAudioForXVector"),n8t.forEach(t),vpr=r(JIe," (Data2VecAudio model)"),JIe.forEach(t),Fpr=i(El),I4=n(El,"LI",{});var YIe=s(I4);jFe=n(YIe,"STRONG",{});var s8t=s(jFe);Tpr=r(s8t,"unispeech-sat"),s8t.forEach(t),Mpr=r(YIe," \u2014 "),DH=n(YIe,"A",{href:!0});var l8t=s(DH);Epr=r(l8t,"UniSpeechSatForXVector"),l8t.forEach(t),Cpr=r(YIe," (UniSpeechSat model)"),YIe.forEach(t),wpr=i(El),q4=n(El,"LI",{});var KIe=s(q4);DFe=n(KIe,"STRONG",{});var i8t=s(DFe);Apr=r(i8t,"wav2vec2"),i8t.forEach(t),Lpr=r(KIe," \u2014 "),GH=n(KIe,"A",{href:!0});var d8t=s(GH);ypr=r(d8t,"Wav2Vec2ForXVector"),d8t.forEach(t),xpr=r(KIe," (Wav2Vec2 model)"),KIe.forEach(t),$pr=i(El),j4=n(El,"LI",{});var ZIe=s(j4);GFe=n(ZIe,"STRONG",{});var c8t=s(GFe);kpr=r(c8t,"wav2vec2-conformer"),c8t.forEach(t),Spr=r(ZIe," \u2014 "),OH=n(ZIe,"A",{href:!0});var m8t=s(OH);Rpr=r(m8t,"Wav2Vec2ConformerForXVector"),m8t.forEach(t),Ppr=r(ZIe," (Wav2Vec2-Conformer model)"),ZIe.forEach(t),Bpr=i(El),D4=n(El,"LI",{});var eqe=s(D4);OFe=n(eqe,"STRONG",{});var f8t=s(OFe);Npr=r(f8t,"wavlm"),f8t.forEach(t),Ipr=r(eqe," \u2014 "),VH=n(eqe,"A",{href:!0});var g8t=s(VH);qpr=r(g8t,"WavLMForXVector"),g8t.forEach(t),jpr=r(eqe," (WavLM model)"),eqe.forEach(t),El.forEach(t),Dpr=i(Aa),G4=n(Aa,"P",{});var oqe=s(G4);Gpr=r(oqe,"The model is set in evaluation mode by default using "),VFe=n(oqe,"CODE",{});var h8t=s(VFe);Opr=r(h8t,"model.eval()"),h8t.forEach(t),Vpr=r(oqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),XFe=n(oqe,"CODE",{});var u8t=s(XFe);Xpr=r(u8t,"model.train()"),u8t.forEach(t),oqe.forEach(t),zpr=i(Aa),T(O4.$$.fragment,Aa),Aa.forEach(t),Ml.forEach(t),mze=i(m),zd=n(m,"H2",{class:!0});var bWe=s(zd);V4=n(bWe,"A",{id:!0,class:!0,href:!0});var p8t=s(V4);zFe=n(p8t,"SPAN",{});var _8t=s(zFe);T(M9.$$.fragment,_8t),_8t.forEach(t),p8t.forEach(t),Qpr=i(bWe),QFe=n(bWe,"SPAN",{});var b8t=s(QFe);Wpr=r(b8t,"AutoModelForMaskedImageModeling"),b8t.forEach(t),bWe.forEach(t),fze=i(m),Jo=n(m,"DIV",{class:!0});var Cl=s(Jo);T(E9.$$.fragment,Cl),Hpr=i(Cl),Qd=n(Cl,"P",{});var wte=s(Qd);Upr=r(wte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),XH=n(wte,"A",{href:!0});var v8t=s(XH);Jpr=r(v8t,"from_pretrained()"),v8t.forEach(t),Ypr=r(wte," class method or the "),zH=n(wte,"A",{href:!0});var F8t=s(zH);Kpr=r(F8t,"from_config()"),F8t.forEach(t),Zpr=r(wte,` class
method.`),wte.forEach(t),e_r=i(Cl),C9=n(Cl,"P",{});var vWe=s(C9);o_r=r(vWe,"This class cannot be instantiated directly using "),WFe=n(vWe,"CODE",{});var T8t=s(WFe);r_r=r(T8t,"__init__()"),T8t.forEach(t),t_r=r(vWe," (throws an error)."),vWe.forEach(t),a_r=i(Cl),yt=n(Cl,"DIV",{class:!0});var J7=s(yt);T(w9.$$.fragment,J7),n_r=i(J7),HFe=n(J7,"P",{});var M8t=s(HFe);s_r=r(M8t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),M8t.forEach(t),l_r=i(J7),Wd=n(J7,"P",{});var Ate=s(Wd);i_r=r(Ate,`Note:
Loading a model from its configuration file does `),UFe=n(Ate,"STRONG",{});var E8t=s(UFe);d_r=r(E8t,"not"),E8t.forEach(t),c_r=r(Ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=n(Ate,"A",{href:!0});var C8t=s(QH);m_r=r(C8t,"from_pretrained()"),C8t.forEach(t),f_r=r(Ate," to load the model weights."),Ate.forEach(t),g_r=i(J7),T(X4.$$.fragment,J7),J7.forEach(t),h_r=i(Cl),_o=n(Cl,"DIV",{class:!0});var La=s(_o);T(A9.$$.fragment,La),u_r=i(La),JFe=n(La,"P",{});var w8t=s(JFe);p_r=r(w8t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),w8t.forEach(t),__r=i(La),on=n(La,"P",{});var Y7=s(on);b_r=r(Y7,"The model class to instantiate is selected based on the "),YFe=n(Y7,"CODE",{});var A8t=s(YFe);v_r=r(A8t,"model_type"),A8t.forEach(t),F_r=r(Y7,` property of the config object (either
passed as an argument or loaded from `),KFe=n(Y7,"CODE",{});var L8t=s(KFe);T_r=r(L8t,"pretrained_model_name_or_path"),L8t.forEach(t),M_r=r(Y7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZFe=n(Y7,"CODE",{});var y8t=s(ZFe);E_r=r(y8t,"pretrained_model_name_or_path"),y8t.forEach(t),C_r=r(Y7,":"),Y7.forEach(t),w_r=i(La),Hd=n(La,"UL",{});var Lte=s(Hd);z4=n(Lte,"LI",{});var rqe=s(z4);eTe=n(rqe,"STRONG",{});var x8t=s(eTe);A_r=r(x8t,"deit"),x8t.forEach(t),L_r=r(rqe," \u2014 "),WH=n(rqe,"A",{href:!0});var $8t=s(WH);y_r=r($8t,"DeiTForMaskedImageModeling"),$8t.forEach(t),x_r=r(rqe," (DeiT model)"),rqe.forEach(t),$_r=i(Lte),Q4=n(Lte,"LI",{});var tqe=s(Q4);oTe=n(tqe,"STRONG",{});var k8t=s(oTe);k_r=r(k8t,"swin"),k8t.forEach(t),S_r=r(tqe," \u2014 "),HH=n(tqe,"A",{href:!0});var S8t=s(HH);R_r=r(S8t,"SwinForMaskedImageModeling"),S8t.forEach(t),P_r=r(tqe," (Swin Transformer model)"),tqe.forEach(t),B_r=i(Lte),W4=n(Lte,"LI",{});var aqe=s(W4);rTe=n(aqe,"STRONG",{});var R8t=s(rTe);N_r=r(R8t,"vit"),R8t.forEach(t),I_r=r(aqe," \u2014 "),UH=n(aqe,"A",{href:!0});var P8t=s(UH);q_r=r(P8t,"ViTForMaskedImageModeling"),P8t.forEach(t),j_r=r(aqe," (ViT model)"),aqe.forEach(t),Lte.forEach(t),D_r=i(La),H4=n(La,"P",{});var nqe=s(H4);G_r=r(nqe,"The model is set in evaluation mode by default using "),tTe=n(nqe,"CODE",{});var B8t=s(tTe);O_r=r(B8t,"model.eval()"),B8t.forEach(t),V_r=r(nqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aTe=n(nqe,"CODE",{});var N8t=s(aTe);X_r=r(N8t,"model.train()"),N8t.forEach(t),nqe.forEach(t),z_r=i(La),T(U4.$$.fragment,La),La.forEach(t),Cl.forEach(t),gze=i(m),Ud=n(m,"H2",{class:!0});var FWe=s(Ud);J4=n(FWe,"A",{id:!0,class:!0,href:!0});var I8t=s(J4);nTe=n(I8t,"SPAN",{});var q8t=s(nTe);T(L9.$$.fragment,q8t),q8t.forEach(t),I8t.forEach(t),Q_r=i(FWe),sTe=n(FWe,"SPAN",{});var j8t=s(sTe);W_r=r(j8t,"AutoModelForObjectDetection"),j8t.forEach(t),FWe.forEach(t),hze=i(m),Yo=n(m,"DIV",{class:!0});var wl=s(Yo);T(y9.$$.fragment,wl),H_r=i(wl),Jd=n(wl,"P",{});var yte=s(Jd);U_r=r(yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),JH=n(yte,"A",{href:!0});var D8t=s(JH);J_r=r(D8t,"from_pretrained()"),D8t.forEach(t),Y_r=r(yte," class method or the "),YH=n(yte,"A",{href:!0});var G8t=s(YH);K_r=r(G8t,"from_config()"),G8t.forEach(t),Z_r=r(yte,` class
method.`),yte.forEach(t),e2r=i(wl),x9=n(wl,"P",{});var TWe=s(x9);o2r=r(TWe,"This class cannot be instantiated directly using "),lTe=n(TWe,"CODE",{});var O8t=s(lTe);r2r=r(O8t,"__init__()"),O8t.forEach(t),t2r=r(TWe," (throws an error)."),TWe.forEach(t),a2r=i(wl),xt=n(wl,"DIV",{class:!0});var K7=s(xt);T($9.$$.fragment,K7),n2r=i(K7),iTe=n(K7,"P",{});var V8t=s(iTe);s2r=r(V8t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),V8t.forEach(t),l2r=i(K7),Yd=n(K7,"P",{});var xte=s(Yd);i2r=r(xte,`Note:
Loading a model from its configuration file does `),dTe=n(xte,"STRONG",{});var X8t=s(dTe);d2r=r(X8t,"not"),X8t.forEach(t),c2r=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),KH=n(xte,"A",{href:!0});var z8t=s(KH);m2r=r(z8t,"from_pretrained()"),z8t.forEach(t),f2r=r(xte," to load the model weights."),xte.forEach(t),g2r=i(K7),T(Y4.$$.fragment,K7),K7.forEach(t),h2r=i(wl),bo=n(wl,"DIV",{class:!0});var ya=s(bo);T(k9.$$.fragment,ya),u2r=i(ya),cTe=n(ya,"P",{});var Q8t=s(cTe);p2r=r(Q8t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Q8t.forEach(t),_2r=i(ya),rn=n(ya,"P",{});var Z7=s(rn);b2r=r(Z7,"The model class to instantiate is selected based on the "),mTe=n(Z7,"CODE",{});var W8t=s(mTe);v2r=r(W8t,"model_type"),W8t.forEach(t),F2r=r(Z7,` property of the config object (either
passed as an argument or loaded from `),fTe=n(Z7,"CODE",{});var H8t=s(fTe);T2r=r(H8t,"pretrained_model_name_or_path"),H8t.forEach(t),M2r=r(Z7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gTe=n(Z7,"CODE",{});var U8t=s(gTe);E2r=r(U8t,"pretrained_model_name_or_path"),U8t.forEach(t),C2r=r(Z7,":"),Z7.forEach(t),w2r=i(ya),S9=n(ya,"UL",{});var MWe=s(S9);K4=n(MWe,"LI",{});var sqe=s(K4);hTe=n(sqe,"STRONG",{});var J8t=s(hTe);A2r=r(J8t,"detr"),J8t.forEach(t),L2r=r(sqe," \u2014 "),ZH=n(sqe,"A",{href:!0});var Y8t=s(ZH);y2r=r(Y8t,"DetrForObjectDetection"),Y8t.forEach(t),x2r=r(sqe," (DETR model)"),sqe.forEach(t),$2r=i(MWe),Z4=n(MWe,"LI",{});var lqe=s(Z4);uTe=n(lqe,"STRONG",{});var K8t=s(uTe);k2r=r(K8t,"yolos"),K8t.forEach(t),S2r=r(lqe," \u2014 "),eU=n(lqe,"A",{href:!0});var Z8t=s(eU);R2r=r(Z8t,"YolosForObjectDetection"),Z8t.forEach(t),P2r=r(lqe," (YOLOS model)"),lqe.forEach(t),MWe.forEach(t),B2r=i(ya),eE=n(ya,"P",{});var iqe=s(eE);N2r=r(iqe,"The model is set in evaluation mode by default using "),pTe=n(iqe,"CODE",{});var e9t=s(pTe);I2r=r(e9t,"model.eval()"),e9t.forEach(t),q2r=r(iqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_Te=n(iqe,"CODE",{});var o9t=s(_Te);j2r=r(o9t,"model.train()"),o9t.forEach(t),iqe.forEach(t),D2r=i(ya),T(oE.$$.fragment,ya),ya.forEach(t),wl.forEach(t),uze=i(m),Kd=n(m,"H2",{class:!0});var EWe=s(Kd);rE=n(EWe,"A",{id:!0,class:!0,href:!0});var r9t=s(rE);bTe=n(r9t,"SPAN",{});var t9t=s(bTe);T(R9.$$.fragment,t9t),t9t.forEach(t),r9t.forEach(t),G2r=i(EWe),vTe=n(EWe,"SPAN",{});var a9t=s(vTe);O2r=r(a9t,"AutoModelForImageSegmentation"),a9t.forEach(t),EWe.forEach(t),pze=i(m),Ko=n(m,"DIV",{class:!0});var Al=s(Ko);T(P9.$$.fragment,Al),V2r=i(Al),Zd=n(Al,"P",{});var $te=s(Zd);X2r=r($te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),oU=n($te,"A",{href:!0});var n9t=s(oU);z2r=r(n9t,"from_pretrained()"),n9t.forEach(t),Q2r=r($te," class method or the "),rU=n($te,"A",{href:!0});var s9t=s(rU);W2r=r(s9t,"from_config()"),s9t.forEach(t),H2r=r($te,` class
method.`),$te.forEach(t),U2r=i(Al),B9=n(Al,"P",{});var CWe=s(B9);J2r=r(CWe,"This class cannot be instantiated directly using "),FTe=n(CWe,"CODE",{});var l9t=s(FTe);Y2r=r(l9t,"__init__()"),l9t.forEach(t),K2r=r(CWe," (throws an error)."),CWe.forEach(t),Z2r=i(Al),$t=n(Al,"DIV",{class:!0});var eL=s($t);T(N9.$$.fragment,eL),ebr=i(eL),TTe=n(eL,"P",{});var i9t=s(TTe);obr=r(i9t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),i9t.forEach(t),rbr=i(eL),ec=n(eL,"P",{});var kte=s(ec);tbr=r(kte,`Note:
Loading a model from its configuration file does `),MTe=n(kte,"STRONG",{});var d9t=s(MTe);abr=r(d9t,"not"),d9t.forEach(t),nbr=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=n(kte,"A",{href:!0});var c9t=s(tU);sbr=r(c9t,"from_pretrained()"),c9t.forEach(t),lbr=r(kte," to load the model weights."),kte.forEach(t),ibr=i(eL),T(tE.$$.fragment,eL),eL.forEach(t),dbr=i(Al),vo=n(Al,"DIV",{class:!0});var xa=s(vo);T(I9.$$.fragment,xa),cbr=i(xa),ETe=n(xa,"P",{});var m9t=s(ETe);mbr=r(m9t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),m9t.forEach(t),fbr=i(xa),tn=n(xa,"P",{});var oL=s(tn);gbr=r(oL,"The model class to instantiate is selected based on the "),CTe=n(oL,"CODE",{});var f9t=s(CTe);hbr=r(f9t,"model_type"),f9t.forEach(t),ubr=r(oL,` property of the config object (either
passed as an argument or loaded from `),wTe=n(oL,"CODE",{});var g9t=s(wTe);pbr=r(g9t,"pretrained_model_name_or_path"),g9t.forEach(t),_br=r(oL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ATe=n(oL,"CODE",{});var h9t=s(ATe);bbr=r(h9t,"pretrained_model_name_or_path"),h9t.forEach(t),vbr=r(oL,":"),oL.forEach(t),Fbr=i(xa),LTe=n(xa,"UL",{});var u9t=s(LTe);aE=n(u9t,"LI",{});var dqe=s(aE);yTe=n(dqe,"STRONG",{});var p9t=s(yTe);Tbr=r(p9t,"detr"),p9t.forEach(t),Mbr=r(dqe," \u2014 "),aU=n(dqe,"A",{href:!0});var _9t=s(aU);Ebr=r(_9t,"DetrForSegmentation"),_9t.forEach(t),Cbr=r(dqe," (DETR model)"),dqe.forEach(t),u9t.forEach(t),wbr=i(xa),nE=n(xa,"P",{});var cqe=s(nE);Abr=r(cqe,"The model is set in evaluation mode by default using "),xTe=n(cqe,"CODE",{});var b9t=s(xTe);Lbr=r(b9t,"model.eval()"),b9t.forEach(t),ybr=r(cqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$Te=n(cqe,"CODE",{});var v9t=s($Te);xbr=r(v9t,"model.train()"),v9t.forEach(t),cqe.forEach(t),$br=i(xa),T(sE.$$.fragment,xa),xa.forEach(t),Al.forEach(t),_ze=i(m),oc=n(m,"H2",{class:!0});var wWe=s(oc);lE=n(wWe,"A",{id:!0,class:!0,href:!0});var F9t=s(lE);kTe=n(F9t,"SPAN",{});var T9t=s(kTe);T(q9.$$.fragment,T9t),T9t.forEach(t),F9t.forEach(t),kbr=i(wWe),STe=n(wWe,"SPAN",{});var M9t=s(STe);Sbr=r(M9t,"AutoModelForSemanticSegmentation"),M9t.forEach(t),wWe.forEach(t),bze=i(m),Zo=n(m,"DIV",{class:!0});var Ll=s(Zo);T(j9.$$.fragment,Ll),Rbr=i(Ll),rc=n(Ll,"P",{});var Ste=s(rc);Pbr=r(Ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),nU=n(Ste,"A",{href:!0});var E9t=s(nU);Bbr=r(E9t,"from_pretrained()"),E9t.forEach(t),Nbr=r(Ste," class method or the "),sU=n(Ste,"A",{href:!0});var C9t=s(sU);Ibr=r(C9t,"from_config()"),C9t.forEach(t),qbr=r(Ste,` class
method.`),Ste.forEach(t),jbr=i(Ll),D9=n(Ll,"P",{});var AWe=s(D9);Dbr=r(AWe,"This class cannot be instantiated directly using "),RTe=n(AWe,"CODE",{});var w9t=s(RTe);Gbr=r(w9t,"__init__()"),w9t.forEach(t),Obr=r(AWe," (throws an error)."),AWe.forEach(t),Vbr=i(Ll),kt=n(Ll,"DIV",{class:!0});var rL=s(kt);T(G9.$$.fragment,rL),Xbr=i(rL),PTe=n(rL,"P",{});var A9t=s(PTe);zbr=r(A9t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),A9t.forEach(t),Qbr=i(rL),tc=n(rL,"P",{});var Rte=s(tc);Wbr=r(Rte,`Note:
Loading a model from its configuration file does `),BTe=n(Rte,"STRONG",{});var L9t=s(BTe);Hbr=r(L9t,"not"),L9t.forEach(t),Ubr=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=n(Rte,"A",{href:!0});var y9t=s(lU);Jbr=r(y9t,"from_pretrained()"),y9t.forEach(t),Ybr=r(Rte," to load the model weights."),Rte.forEach(t),Kbr=i(rL),T(iE.$$.fragment,rL),rL.forEach(t),Zbr=i(Ll),Fo=n(Ll,"DIV",{class:!0});var $a=s(Fo);T(O9.$$.fragment,$a),evr=i($a),NTe=n($a,"P",{});var x9t=s(NTe);ovr=r(x9t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),x9t.forEach(t),rvr=i($a),an=n($a,"P",{});var tL=s(an);tvr=r(tL,"The model class to instantiate is selected based on the "),ITe=n(tL,"CODE",{});var $9t=s(ITe);avr=r($9t,"model_type"),$9t.forEach(t),nvr=r(tL,` property of the config object (either
passed as an argument or loaded from `),qTe=n(tL,"CODE",{});var k9t=s(qTe);svr=r(k9t,"pretrained_model_name_or_path"),k9t.forEach(t),lvr=r(tL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jTe=n(tL,"CODE",{});var S9t=s(jTe);ivr=r(S9t,"pretrained_model_name_or_path"),S9t.forEach(t),dvr=r(tL,":"),tL.forEach(t),cvr=i($a),at=n($a,"UL",{});var yl=s(at);dE=n(yl,"LI",{});var mqe=s(dE);DTe=n(mqe,"STRONG",{});var R9t=s(DTe);mvr=r(R9t,"beit"),R9t.forEach(t),fvr=r(mqe," \u2014 "),iU=n(mqe,"A",{href:!0});var P9t=s(iU);gvr=r(P9t,"BeitForSemanticSegmentation"),P9t.forEach(t),hvr=r(mqe," (BEiT model)"),mqe.forEach(t),uvr=i(yl),cE=n(yl,"LI",{});var fqe=s(cE);GTe=n(fqe,"STRONG",{});var B9t=s(GTe);pvr=r(B9t,"data2vec-vision"),B9t.forEach(t),_vr=r(fqe," \u2014 "),dU=n(fqe,"A",{href:!0});var N9t=s(dU);bvr=r(N9t,"Data2VecVisionForSemanticSegmentation"),N9t.forEach(t),vvr=r(fqe," (Data2VecVision model)"),fqe.forEach(t),Fvr=i(yl),mE=n(yl,"LI",{});var gqe=s(mE);OTe=n(gqe,"STRONG",{});var I9t=s(OTe);Tvr=r(I9t,"dpt"),I9t.forEach(t),Mvr=r(gqe," \u2014 "),cU=n(gqe,"A",{href:!0});var q9t=s(cU);Evr=r(q9t,"DPTForSemanticSegmentation"),q9t.forEach(t),Cvr=r(gqe," (DPT model)"),gqe.forEach(t),wvr=i(yl),fE=n(yl,"LI",{});var hqe=s(fE);VTe=n(hqe,"STRONG",{});var j9t=s(VTe);Avr=r(j9t,"mobilevit"),j9t.forEach(t),Lvr=r(hqe," \u2014 "),mU=n(hqe,"A",{href:!0});var D9t=s(mU);yvr=r(D9t,"MobileViTForSemanticSegmentation"),D9t.forEach(t),xvr=r(hqe," (MobileViT model)"),hqe.forEach(t),$vr=i(yl),gE=n(yl,"LI",{});var uqe=s(gE);XTe=n(uqe,"STRONG",{});var G9t=s(XTe);kvr=r(G9t,"segformer"),G9t.forEach(t),Svr=r(uqe," \u2014 "),fU=n(uqe,"A",{href:!0});var O9t=s(fU);Rvr=r(O9t,"SegformerForSemanticSegmentation"),O9t.forEach(t),Pvr=r(uqe," (SegFormer model)"),uqe.forEach(t),yl.forEach(t),Bvr=i($a),hE=n($a,"P",{});var pqe=s(hE);Nvr=r(pqe,"The model is set in evaluation mode by default using "),zTe=n(pqe,"CODE",{});var V9t=s(zTe);Ivr=r(V9t,"model.eval()"),V9t.forEach(t),qvr=r(pqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),QTe=n(pqe,"CODE",{});var X9t=s(QTe);jvr=r(X9t,"model.train()"),X9t.forEach(t),pqe.forEach(t),Dvr=i($a),T(uE.$$.fragment,$a),$a.forEach(t),Ll.forEach(t),vze=i(m),ac=n(m,"H2",{class:!0});var LWe=s(ac);pE=n(LWe,"A",{id:!0,class:!0,href:!0});var z9t=s(pE);WTe=n(z9t,"SPAN",{});var Q9t=s(WTe);T(V9.$$.fragment,Q9t),Q9t.forEach(t),z9t.forEach(t),Gvr=i(LWe),HTe=n(LWe,"SPAN",{});var W9t=s(HTe);Ovr=r(W9t,"AutoModelForInstanceSegmentation"),W9t.forEach(t),LWe.forEach(t),Fze=i(m),er=n(m,"DIV",{class:!0});var xl=s(er);T(X9.$$.fragment,xl),Vvr=i(xl),nc=n(xl,"P",{});var Pte=s(nc);Xvr=r(Pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),gU=n(Pte,"A",{href:!0});var H9t=s(gU);zvr=r(H9t,"from_pretrained()"),H9t.forEach(t),Qvr=r(Pte," class method or the "),hU=n(Pte,"A",{href:!0});var U9t=s(hU);Wvr=r(U9t,"from_config()"),U9t.forEach(t),Hvr=r(Pte,` class
method.`),Pte.forEach(t),Uvr=i(xl),z9=n(xl,"P",{});var yWe=s(z9);Jvr=r(yWe,"This class cannot be instantiated directly using "),UTe=n(yWe,"CODE",{});var J9t=s(UTe);Yvr=r(J9t,"__init__()"),J9t.forEach(t),Kvr=r(yWe," (throws an error)."),yWe.forEach(t),Zvr=i(xl),St=n(xl,"DIV",{class:!0});var aL=s(St);T(Q9.$$.fragment,aL),e1r=i(aL),JTe=n(aL,"P",{});var Y9t=s(JTe);o1r=r(Y9t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Y9t.forEach(t),r1r=i(aL),sc=n(aL,"P",{});var Bte=s(sc);t1r=r(Bte,`Note:
Loading a model from its configuration file does `),YTe=n(Bte,"STRONG",{});var K9t=s(YTe);a1r=r(K9t,"not"),K9t.forEach(t),n1r=r(Bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=n(Bte,"A",{href:!0});var Z9t=s(uU);s1r=r(Z9t,"from_pretrained()"),Z9t.forEach(t),l1r=r(Bte," to load the model weights."),Bte.forEach(t),i1r=i(aL),T(_E.$$.fragment,aL),aL.forEach(t),d1r=i(xl),To=n(xl,"DIV",{class:!0});var ka=s(To);T(W9.$$.fragment,ka),c1r=i(ka),KTe=n(ka,"P",{});var ext=s(KTe);m1r=r(ext,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),ext.forEach(t),f1r=i(ka),nn=n(ka,"P",{});var nL=s(nn);g1r=r(nL,"The model class to instantiate is selected based on the "),ZTe=n(nL,"CODE",{});var oxt=s(ZTe);h1r=r(oxt,"model_type"),oxt.forEach(t),u1r=r(nL,` property of the config object (either
passed as an argument or loaded from `),eMe=n(nL,"CODE",{});var rxt=s(eMe);p1r=r(rxt,"pretrained_model_name_or_path"),rxt.forEach(t),_1r=r(nL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oMe=n(nL,"CODE",{});var txt=s(oMe);b1r=r(txt,"pretrained_model_name_or_path"),txt.forEach(t),v1r=r(nL,":"),nL.forEach(t),F1r=i(ka),rMe=n(ka,"UL",{});var axt=s(rMe);bE=n(axt,"LI",{});var _qe=s(bE);tMe=n(_qe,"STRONG",{});var nxt=s(tMe);T1r=r(nxt,"maskformer"),nxt.forEach(t),M1r=r(_qe," \u2014 "),pU=n(_qe,"A",{href:!0});var sxt=s(pU);E1r=r(sxt,"MaskFormerForInstanceSegmentation"),sxt.forEach(t),C1r=r(_qe," (MaskFormer model)"),_qe.forEach(t),axt.forEach(t),w1r=i(ka),vE=n(ka,"P",{});var bqe=s(vE);A1r=r(bqe,"The model is set in evaluation mode by default using "),aMe=n(bqe,"CODE",{});var lxt=s(aMe);L1r=r(lxt,"model.eval()"),lxt.forEach(t),y1r=r(bqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nMe=n(bqe,"CODE",{});var ixt=s(nMe);x1r=r(ixt,"model.train()"),ixt.forEach(t),bqe.forEach(t),$1r=i(ka),T(FE.$$.fragment,ka),ka.forEach(t),xl.forEach(t),Tze=i(m),lc=n(m,"H2",{class:!0});var xWe=s(lc);TE=n(xWe,"A",{id:!0,class:!0,href:!0});var dxt=s(TE);sMe=n(dxt,"SPAN",{});var cxt=s(sMe);T(H9.$$.fragment,cxt),cxt.forEach(t),dxt.forEach(t),k1r=i(xWe),lMe=n(xWe,"SPAN",{});var mxt=s(lMe);S1r=r(mxt,"TFAutoModel"),mxt.forEach(t),xWe.forEach(t),Mze=i(m),or=n(m,"DIV",{class:!0});var $l=s(or);T(U9.$$.fragment,$l),R1r=i($l),ic=n($l,"P",{});var Nte=s(ic);P1r=r(Nte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_U=n(Nte,"A",{href:!0});var fxt=s(_U);B1r=r(fxt,"from_pretrained()"),fxt.forEach(t),N1r=r(Nte," class method or the "),bU=n(Nte,"A",{href:!0});var gxt=s(bU);I1r=r(gxt,"from_config()"),gxt.forEach(t),q1r=r(Nte,` class
method.`),Nte.forEach(t),j1r=i($l),J9=n($l,"P",{});var $We=s(J9);D1r=r($We,"This class cannot be instantiated directly using "),iMe=n($We,"CODE",{});var hxt=s(iMe);G1r=r(hxt,"__init__()"),hxt.forEach(t),O1r=r($We," (throws an error)."),$We.forEach(t),V1r=i($l),Rt=n($l,"DIV",{class:!0});var sL=s(Rt);T(Y9.$$.fragment,sL),X1r=i(sL),dMe=n(sL,"P",{});var uxt=s(dMe);z1r=r(uxt,"Instantiates one of the base model classes of the library from a configuration."),uxt.forEach(t),Q1r=i(sL),dc=n(sL,"P",{});var Ite=s(dc);W1r=r(Ite,`Note:
Loading a model from its configuration file does `),cMe=n(Ite,"STRONG",{});var pxt=s(cMe);H1r=r(pxt,"not"),pxt.forEach(t),U1r=r(Ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=n(Ite,"A",{href:!0});var _xt=s(vU);J1r=r(_xt,"from_pretrained()"),_xt.forEach(t),Y1r=r(Ite," to load the model weights."),Ite.forEach(t),K1r=i(sL),T(ME.$$.fragment,sL),sL.forEach(t),Z1r=i($l),xr=n($l,"DIV",{class:!0});var kl=s(xr);T(K9.$$.fragment,kl),eFr=i(kl),mMe=n(kl,"P",{});var bxt=s(mMe);oFr=r(bxt,"Instantiate one of the base model classes of the library from a pretrained model."),bxt.forEach(t),rFr=i(kl),sn=n(kl,"P",{});var lL=s(sn);tFr=r(lL,"The model class to instantiate is selected based on the "),fMe=n(lL,"CODE",{});var vxt=s(fMe);aFr=r(vxt,"model_type"),vxt.forEach(t),nFr=r(lL,` property of the config object (either
passed as an argument or loaded from `),gMe=n(lL,"CODE",{});var Fxt=s(gMe);sFr=r(Fxt,"pretrained_model_name_or_path"),Fxt.forEach(t),lFr=r(lL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hMe=n(lL,"CODE",{});var Txt=s(hMe);iFr=r(Txt,"pretrained_model_name_or_path"),Txt.forEach(t),dFr=r(lL,":"),lL.forEach(t),cFr=i(kl),q=n(kl,"UL",{});var D=s(q);EE=n(D,"LI",{});var vqe=s(EE);uMe=n(vqe,"STRONG",{});var Mxt=s(uMe);mFr=r(Mxt,"albert"),Mxt.forEach(t),fFr=r(vqe," \u2014 "),FU=n(vqe,"A",{href:!0});var Ext=s(FU);gFr=r(Ext,"TFAlbertModel"),Ext.forEach(t),hFr=r(vqe," (ALBERT model)"),vqe.forEach(t),uFr=i(D),CE=n(D,"LI",{});var Fqe=s(CE);pMe=n(Fqe,"STRONG",{});var Cxt=s(pMe);pFr=r(Cxt,"bart"),Cxt.forEach(t),_Fr=r(Fqe," \u2014 "),TU=n(Fqe,"A",{href:!0});var wxt=s(TU);bFr=r(wxt,"TFBartModel"),wxt.forEach(t),vFr=r(Fqe," (BART model)"),Fqe.forEach(t),FFr=i(D),wE=n(D,"LI",{});var Tqe=s(wE);_Me=n(Tqe,"STRONG",{});var Axt=s(_Me);TFr=r(Axt,"bert"),Axt.forEach(t),MFr=r(Tqe," \u2014 "),MU=n(Tqe,"A",{href:!0});var Lxt=s(MU);EFr=r(Lxt,"TFBertModel"),Lxt.forEach(t),CFr=r(Tqe," (BERT model)"),Tqe.forEach(t),wFr=i(D),AE=n(D,"LI",{});var Mqe=s(AE);bMe=n(Mqe,"STRONG",{});var yxt=s(bMe);AFr=r(yxt,"blenderbot"),yxt.forEach(t),LFr=r(Mqe," \u2014 "),EU=n(Mqe,"A",{href:!0});var xxt=s(EU);yFr=r(xxt,"TFBlenderbotModel"),xxt.forEach(t),xFr=r(Mqe," (Blenderbot model)"),Mqe.forEach(t),$Fr=i(D),LE=n(D,"LI",{});var Eqe=s(LE);vMe=n(Eqe,"STRONG",{});var $xt=s(vMe);kFr=r($xt,"blenderbot-small"),$xt.forEach(t),SFr=r(Eqe," \u2014 "),CU=n(Eqe,"A",{href:!0});var kxt=s(CU);RFr=r(kxt,"TFBlenderbotSmallModel"),kxt.forEach(t),PFr=r(Eqe," (BlenderbotSmall model)"),Eqe.forEach(t),BFr=i(D),yE=n(D,"LI",{});var Cqe=s(yE);FMe=n(Cqe,"STRONG",{});var Sxt=s(FMe);NFr=r(Sxt,"camembert"),Sxt.forEach(t),IFr=r(Cqe," \u2014 "),wU=n(Cqe,"A",{href:!0});var Rxt=s(wU);qFr=r(Rxt,"TFCamembertModel"),Rxt.forEach(t),jFr=r(Cqe," (CamemBERT model)"),Cqe.forEach(t),DFr=i(D),xE=n(D,"LI",{});var wqe=s(xE);TMe=n(wqe,"STRONG",{});var Pxt=s(TMe);GFr=r(Pxt,"clip"),Pxt.forEach(t),OFr=r(wqe," \u2014 "),AU=n(wqe,"A",{href:!0});var Bxt=s(AU);VFr=r(Bxt,"TFCLIPModel"),Bxt.forEach(t),XFr=r(wqe," (CLIP model)"),wqe.forEach(t),zFr=i(D),$E=n(D,"LI",{});var Aqe=s($E);MMe=n(Aqe,"STRONG",{});var Nxt=s(MMe);QFr=r(Nxt,"convbert"),Nxt.forEach(t),WFr=r(Aqe," \u2014 "),LU=n(Aqe,"A",{href:!0});var Ixt=s(LU);HFr=r(Ixt,"TFConvBertModel"),Ixt.forEach(t),UFr=r(Aqe," (ConvBERT model)"),Aqe.forEach(t),JFr=i(D),kE=n(D,"LI",{});var Lqe=s(kE);EMe=n(Lqe,"STRONG",{});var qxt=s(EMe);YFr=r(qxt,"convnext"),qxt.forEach(t),KFr=r(Lqe," \u2014 "),yU=n(Lqe,"A",{href:!0});var jxt=s(yU);ZFr=r(jxt,"TFConvNextModel"),jxt.forEach(t),eTr=r(Lqe," (ConvNeXT model)"),Lqe.forEach(t),oTr=i(D),SE=n(D,"LI",{});var yqe=s(SE);CMe=n(yqe,"STRONG",{});var Dxt=s(CMe);rTr=r(Dxt,"ctrl"),Dxt.forEach(t),tTr=r(yqe," \u2014 "),xU=n(yqe,"A",{href:!0});var Gxt=s(xU);aTr=r(Gxt,"TFCTRLModel"),Gxt.forEach(t),nTr=r(yqe," (CTRL model)"),yqe.forEach(t),sTr=i(D),RE=n(D,"LI",{});var xqe=s(RE);wMe=n(xqe,"STRONG",{});var Oxt=s(wMe);lTr=r(Oxt,"data2vec-vision"),Oxt.forEach(t),iTr=r(xqe," \u2014 "),$U=n(xqe,"A",{href:!0});var Vxt=s($U);dTr=r(Vxt,"TFData2VecVisionModel"),Vxt.forEach(t),cTr=r(xqe," (Data2VecVision model)"),xqe.forEach(t),mTr=i(D),PE=n(D,"LI",{});var $qe=s(PE);AMe=n($qe,"STRONG",{});var Xxt=s(AMe);fTr=r(Xxt,"deberta"),Xxt.forEach(t),gTr=r($qe," \u2014 "),kU=n($qe,"A",{href:!0});var zxt=s(kU);hTr=r(zxt,"TFDebertaModel"),zxt.forEach(t),uTr=r($qe," (DeBERTa model)"),$qe.forEach(t),pTr=i(D),BE=n(D,"LI",{});var kqe=s(BE);LMe=n(kqe,"STRONG",{});var Qxt=s(LMe);_Tr=r(Qxt,"deberta-v2"),Qxt.forEach(t),bTr=r(kqe," \u2014 "),SU=n(kqe,"A",{href:!0});var Wxt=s(SU);vTr=r(Wxt,"TFDebertaV2Model"),Wxt.forEach(t),FTr=r(kqe," (DeBERTa-v2 model)"),kqe.forEach(t),TTr=i(D),NE=n(D,"LI",{});var Sqe=s(NE);yMe=n(Sqe,"STRONG",{});var Hxt=s(yMe);MTr=r(Hxt,"deit"),Hxt.forEach(t),ETr=r(Sqe," \u2014 "),RU=n(Sqe,"A",{href:!0});var Uxt=s(RU);CTr=r(Uxt,"TFDeiTModel"),Uxt.forEach(t),wTr=r(Sqe," (DeiT model)"),Sqe.forEach(t),ATr=i(D),IE=n(D,"LI",{});var Rqe=s(IE);xMe=n(Rqe,"STRONG",{});var Jxt=s(xMe);LTr=r(Jxt,"distilbert"),Jxt.forEach(t),yTr=r(Rqe," \u2014 "),PU=n(Rqe,"A",{href:!0});var Yxt=s(PU);xTr=r(Yxt,"TFDistilBertModel"),Yxt.forEach(t),$Tr=r(Rqe," (DistilBERT model)"),Rqe.forEach(t),kTr=i(D),qE=n(D,"LI",{});var Pqe=s(qE);$Me=n(Pqe,"STRONG",{});var Kxt=s($Me);STr=r(Kxt,"dpr"),Kxt.forEach(t),RTr=r(Pqe," \u2014 "),BU=n(Pqe,"A",{href:!0});var Zxt=s(BU);PTr=r(Zxt,"TFDPRQuestionEncoder"),Zxt.forEach(t),BTr=r(Pqe," (DPR model)"),Pqe.forEach(t),NTr=i(D),jE=n(D,"LI",{});var Bqe=s(jE);kMe=n(Bqe,"STRONG",{});var e$t=s(kMe);ITr=r(e$t,"electra"),e$t.forEach(t),qTr=r(Bqe," \u2014 "),NU=n(Bqe,"A",{href:!0});var o$t=s(NU);jTr=r(o$t,"TFElectraModel"),o$t.forEach(t),DTr=r(Bqe," (ELECTRA model)"),Bqe.forEach(t),GTr=i(D),DE=n(D,"LI",{});var Nqe=s(DE);SMe=n(Nqe,"STRONG",{});var r$t=s(SMe);OTr=r(r$t,"flaubert"),r$t.forEach(t),VTr=r(Nqe," \u2014 "),IU=n(Nqe,"A",{href:!0});var t$t=s(IU);XTr=r(t$t,"TFFlaubertModel"),t$t.forEach(t),zTr=r(Nqe," (FlauBERT model)"),Nqe.forEach(t),QTr=i(D),Ys=n(D,"LI",{});var qS=s(Ys);RMe=n(qS,"STRONG",{});var a$t=s(RMe);WTr=r(a$t,"funnel"),a$t.forEach(t),HTr=r(qS," \u2014 "),qU=n(qS,"A",{href:!0});var n$t=s(qU);UTr=r(n$t,"TFFunnelModel"),n$t.forEach(t),JTr=r(qS," or "),jU=n(qS,"A",{href:!0});var s$t=s(jU);YTr=r(s$t,"TFFunnelBaseModel"),s$t.forEach(t),KTr=r(qS," (Funnel Transformer model)"),qS.forEach(t),ZTr=i(D),GE=n(D,"LI",{});var Iqe=s(GE);PMe=n(Iqe,"STRONG",{});var l$t=s(PMe);eMr=r(l$t,"gpt2"),l$t.forEach(t),oMr=r(Iqe," \u2014 "),DU=n(Iqe,"A",{href:!0});var i$t=s(DU);rMr=r(i$t,"TFGPT2Model"),i$t.forEach(t),tMr=r(Iqe," (OpenAI GPT-2 model)"),Iqe.forEach(t),aMr=i(D),OE=n(D,"LI",{});var qqe=s(OE);BMe=n(qqe,"STRONG",{});var d$t=s(BMe);nMr=r(d$t,"gptj"),d$t.forEach(t),sMr=r(qqe," \u2014 "),GU=n(qqe,"A",{href:!0});var c$t=s(GU);lMr=r(c$t,"TFGPTJModel"),c$t.forEach(t),iMr=r(qqe," (GPT-J model)"),qqe.forEach(t),dMr=i(D),VE=n(D,"LI",{});var jqe=s(VE);NMe=n(jqe,"STRONG",{});var m$t=s(NMe);cMr=r(m$t,"hubert"),m$t.forEach(t),mMr=r(jqe," \u2014 "),OU=n(jqe,"A",{href:!0});var f$t=s(OU);fMr=r(f$t,"TFHubertModel"),f$t.forEach(t),gMr=r(jqe," (Hubert model)"),jqe.forEach(t),hMr=i(D),XE=n(D,"LI",{});var Dqe=s(XE);IMe=n(Dqe,"STRONG",{});var g$t=s(IMe);uMr=r(g$t,"layoutlm"),g$t.forEach(t),pMr=r(Dqe," \u2014 "),VU=n(Dqe,"A",{href:!0});var h$t=s(VU);_Mr=r(h$t,"TFLayoutLMModel"),h$t.forEach(t),bMr=r(Dqe," (LayoutLM model)"),Dqe.forEach(t),vMr=i(D),zE=n(D,"LI",{});var Gqe=s(zE);qMe=n(Gqe,"STRONG",{});var u$t=s(qMe);FMr=r(u$t,"led"),u$t.forEach(t),TMr=r(Gqe," \u2014 "),XU=n(Gqe,"A",{href:!0});var p$t=s(XU);MMr=r(p$t,"TFLEDModel"),p$t.forEach(t),EMr=r(Gqe," (LED model)"),Gqe.forEach(t),CMr=i(D),QE=n(D,"LI",{});var Oqe=s(QE);jMe=n(Oqe,"STRONG",{});var _$t=s(jMe);wMr=r(_$t,"longformer"),_$t.forEach(t),AMr=r(Oqe," \u2014 "),zU=n(Oqe,"A",{href:!0});var b$t=s(zU);LMr=r(b$t,"TFLongformerModel"),b$t.forEach(t),yMr=r(Oqe," (Longformer model)"),Oqe.forEach(t),xMr=i(D),WE=n(D,"LI",{});var Vqe=s(WE);DMe=n(Vqe,"STRONG",{});var v$t=s(DMe);$Mr=r(v$t,"lxmert"),v$t.forEach(t),kMr=r(Vqe," \u2014 "),QU=n(Vqe,"A",{href:!0});var F$t=s(QU);SMr=r(F$t,"TFLxmertModel"),F$t.forEach(t),RMr=r(Vqe," (LXMERT model)"),Vqe.forEach(t),PMr=i(D),HE=n(D,"LI",{});var Xqe=s(HE);GMe=n(Xqe,"STRONG",{});var T$t=s(GMe);BMr=r(T$t,"marian"),T$t.forEach(t),NMr=r(Xqe," \u2014 "),WU=n(Xqe,"A",{href:!0});var M$t=s(WU);IMr=r(M$t,"TFMarianModel"),M$t.forEach(t),qMr=r(Xqe," (Marian model)"),Xqe.forEach(t),jMr=i(D),UE=n(D,"LI",{});var zqe=s(UE);OMe=n(zqe,"STRONG",{});var E$t=s(OMe);DMr=r(E$t,"mbart"),E$t.forEach(t),GMr=r(zqe," \u2014 "),HU=n(zqe,"A",{href:!0});var C$t=s(HU);OMr=r(C$t,"TFMBartModel"),C$t.forEach(t),VMr=r(zqe," (mBART model)"),zqe.forEach(t),XMr=i(D),JE=n(D,"LI",{});var Qqe=s(JE);VMe=n(Qqe,"STRONG",{});var w$t=s(VMe);zMr=r(w$t,"mobilebert"),w$t.forEach(t),QMr=r(Qqe," \u2014 "),UU=n(Qqe,"A",{href:!0});var A$t=s(UU);WMr=r(A$t,"TFMobileBertModel"),A$t.forEach(t),HMr=r(Qqe," (MobileBERT model)"),Qqe.forEach(t),UMr=i(D),YE=n(D,"LI",{});var Wqe=s(YE);XMe=n(Wqe,"STRONG",{});var L$t=s(XMe);JMr=r(L$t,"mpnet"),L$t.forEach(t),YMr=r(Wqe," \u2014 "),JU=n(Wqe,"A",{href:!0});var y$t=s(JU);KMr=r(y$t,"TFMPNetModel"),y$t.forEach(t),ZMr=r(Wqe," (MPNet model)"),Wqe.forEach(t),e4r=i(D),KE=n(D,"LI",{});var Hqe=s(KE);zMe=n(Hqe,"STRONG",{});var x$t=s(zMe);o4r=r(x$t,"mt5"),x$t.forEach(t),r4r=r(Hqe," \u2014 "),YU=n(Hqe,"A",{href:!0});var $$t=s(YU);t4r=r($$t,"TFMT5Model"),$$t.forEach(t),a4r=r(Hqe," (MT5 model)"),Hqe.forEach(t),n4r=i(D),ZE=n(D,"LI",{});var Uqe=s(ZE);QMe=n(Uqe,"STRONG",{});var k$t=s(QMe);s4r=r(k$t,"openai-gpt"),k$t.forEach(t),l4r=r(Uqe," \u2014 "),KU=n(Uqe,"A",{href:!0});var S$t=s(KU);i4r=r(S$t,"TFOpenAIGPTModel"),S$t.forEach(t),d4r=r(Uqe," (OpenAI GPT model)"),Uqe.forEach(t),c4r=i(D),eC=n(D,"LI",{});var Jqe=s(eC);WMe=n(Jqe,"STRONG",{});var R$t=s(WMe);m4r=r(R$t,"opt"),R$t.forEach(t),f4r=r(Jqe," \u2014 "),ZU=n(Jqe,"A",{href:!0});var P$t=s(ZU);g4r=r(P$t,"TFOPTModel"),P$t.forEach(t),h4r=r(Jqe," (OPT model)"),Jqe.forEach(t),u4r=i(D),oC=n(D,"LI",{});var Yqe=s(oC);HMe=n(Yqe,"STRONG",{});var B$t=s(HMe);p4r=r(B$t,"pegasus"),B$t.forEach(t),_4r=r(Yqe," \u2014 "),eJ=n(Yqe,"A",{href:!0});var N$t=s(eJ);b4r=r(N$t,"TFPegasusModel"),N$t.forEach(t),v4r=r(Yqe," (Pegasus model)"),Yqe.forEach(t),F4r=i(D),rC=n(D,"LI",{});var Kqe=s(rC);UMe=n(Kqe,"STRONG",{});var I$t=s(UMe);T4r=r(I$t,"regnet"),I$t.forEach(t),M4r=r(Kqe," \u2014 "),oJ=n(Kqe,"A",{href:!0});var q$t=s(oJ);E4r=r(q$t,"TFRegNetModel"),q$t.forEach(t),C4r=r(Kqe," (RegNet model)"),Kqe.forEach(t),w4r=i(D),tC=n(D,"LI",{});var Zqe=s(tC);JMe=n(Zqe,"STRONG",{});var j$t=s(JMe);A4r=r(j$t,"rembert"),j$t.forEach(t),L4r=r(Zqe," \u2014 "),rJ=n(Zqe,"A",{href:!0});var D$t=s(rJ);y4r=r(D$t,"TFRemBertModel"),D$t.forEach(t),x4r=r(Zqe," (RemBERT model)"),Zqe.forEach(t),$4r=i(D),aC=n(D,"LI",{});var eje=s(aC);YMe=n(eje,"STRONG",{});var G$t=s(YMe);k4r=r(G$t,"resnet"),G$t.forEach(t),S4r=r(eje," \u2014 "),tJ=n(eje,"A",{href:!0});var O$t=s(tJ);R4r=r(O$t,"TFResNetModel"),O$t.forEach(t),P4r=r(eje," (ResNet model)"),eje.forEach(t),B4r=i(D),nC=n(D,"LI",{});var oje=s(nC);KMe=n(oje,"STRONG",{});var V$t=s(KMe);N4r=r(V$t,"roberta"),V$t.forEach(t),I4r=r(oje," \u2014 "),aJ=n(oje,"A",{href:!0});var X$t=s(aJ);q4r=r(X$t,"TFRobertaModel"),X$t.forEach(t),j4r=r(oje," (RoBERTa model)"),oje.forEach(t),D4r=i(D),sC=n(D,"LI",{});var rje=s(sC);ZMe=n(rje,"STRONG",{});var z$t=s(ZMe);G4r=r(z$t,"roformer"),z$t.forEach(t),O4r=r(rje," \u2014 "),nJ=n(rje,"A",{href:!0});var Q$t=s(nJ);V4r=r(Q$t,"TFRoFormerModel"),Q$t.forEach(t),X4r=r(rje," (RoFormer model)"),rje.forEach(t),z4r=i(D),lC=n(D,"LI",{});var tje=s(lC);e4e=n(tje,"STRONG",{});var W$t=s(e4e);Q4r=r(W$t,"speech_to_text"),W$t.forEach(t),W4r=r(tje," \u2014 "),sJ=n(tje,"A",{href:!0});var H$t=s(sJ);H4r=r(H$t,"TFSpeech2TextModel"),H$t.forEach(t),U4r=r(tje," (Speech2Text model)"),tje.forEach(t),J4r=i(D),iC=n(D,"LI",{});var aje=s(iC);o4e=n(aje,"STRONG",{});var U$t=s(o4e);Y4r=r(U$t,"swin"),U$t.forEach(t),K4r=r(aje," \u2014 "),lJ=n(aje,"A",{href:!0});var J$t=s(lJ);Z4r=r(J$t,"TFSwinModel"),J$t.forEach(t),eEr=r(aje," (Swin Transformer model)"),aje.forEach(t),oEr=i(D),dC=n(D,"LI",{});var nje=s(dC);r4e=n(nje,"STRONG",{});var Y$t=s(r4e);rEr=r(Y$t,"t5"),Y$t.forEach(t),tEr=r(nje," \u2014 "),iJ=n(nje,"A",{href:!0});var K$t=s(iJ);aEr=r(K$t,"TFT5Model"),K$t.forEach(t),nEr=r(nje," (T5 model)"),nje.forEach(t),sEr=i(D),cC=n(D,"LI",{});var sje=s(cC);t4e=n(sje,"STRONG",{});var Z$t=s(t4e);lEr=r(Z$t,"tapas"),Z$t.forEach(t),iEr=r(sje," \u2014 "),dJ=n(sje,"A",{href:!0});var ekt=s(dJ);dEr=r(ekt,"TFTapasModel"),ekt.forEach(t),cEr=r(sje," (TAPAS model)"),sje.forEach(t),mEr=i(D),mC=n(D,"LI",{});var lje=s(mC);a4e=n(lje,"STRONG",{});var okt=s(a4e);fEr=r(okt,"transfo-xl"),okt.forEach(t),gEr=r(lje," \u2014 "),cJ=n(lje,"A",{href:!0});var rkt=s(cJ);hEr=r(rkt,"TFTransfoXLModel"),rkt.forEach(t),uEr=r(lje," (Transformer-XL model)"),lje.forEach(t),pEr=i(D),fC=n(D,"LI",{});var ije=s(fC);n4e=n(ije,"STRONG",{});var tkt=s(n4e);_Er=r(tkt,"vit"),tkt.forEach(t),bEr=r(ije," \u2014 "),mJ=n(ije,"A",{href:!0});var akt=s(mJ);vEr=r(akt,"TFViTModel"),akt.forEach(t),FEr=r(ije," (ViT model)"),ije.forEach(t),TEr=i(D),gC=n(D,"LI",{});var dje=s(gC);s4e=n(dje,"STRONG",{});var nkt=s(s4e);MEr=r(nkt,"vit_mae"),nkt.forEach(t),EEr=r(dje," \u2014 "),fJ=n(dje,"A",{href:!0});var skt=s(fJ);CEr=r(skt,"TFViTMAEModel"),skt.forEach(t),wEr=r(dje," (ViTMAE model)"),dje.forEach(t),AEr=i(D),hC=n(D,"LI",{});var cje=s(hC);l4e=n(cje,"STRONG",{});var lkt=s(l4e);LEr=r(lkt,"wav2vec2"),lkt.forEach(t),yEr=r(cje," \u2014 "),gJ=n(cje,"A",{href:!0});var ikt=s(gJ);xEr=r(ikt,"TFWav2Vec2Model"),ikt.forEach(t),$Er=r(cje," (Wav2Vec2 model)"),cje.forEach(t),kEr=i(D),uC=n(D,"LI",{});var mje=s(uC);i4e=n(mje,"STRONG",{});var dkt=s(i4e);SEr=r(dkt,"xlm"),dkt.forEach(t),REr=r(mje," \u2014 "),hJ=n(mje,"A",{href:!0});var ckt=s(hJ);PEr=r(ckt,"TFXLMModel"),ckt.forEach(t),BEr=r(mje," (XLM model)"),mje.forEach(t),NEr=i(D),pC=n(D,"LI",{});var fje=s(pC);d4e=n(fje,"STRONG",{});var mkt=s(d4e);IEr=r(mkt,"xlm-roberta"),mkt.forEach(t),qEr=r(fje," \u2014 "),uJ=n(fje,"A",{href:!0});var fkt=s(uJ);jEr=r(fkt,"TFXLMRobertaModel"),fkt.forEach(t),DEr=r(fje," (XLM-RoBERTa model)"),fje.forEach(t),GEr=i(D),_C=n(D,"LI",{});var gje=s(_C);c4e=n(gje,"STRONG",{});var gkt=s(c4e);OEr=r(gkt,"xlnet"),gkt.forEach(t),VEr=r(gje," \u2014 "),pJ=n(gje,"A",{href:!0});var hkt=s(pJ);XEr=r(hkt,"TFXLNetModel"),hkt.forEach(t),zEr=r(gje," (XLNet model)"),gje.forEach(t),D.forEach(t),QEr=i(kl),T(bC.$$.fragment,kl),kl.forEach(t),$l.forEach(t),Eze=i(m),cc=n(m,"H2",{class:!0});var kWe=s(cc);vC=n(kWe,"A",{id:!0,class:!0,href:!0});var ukt=s(vC);m4e=n(ukt,"SPAN",{});var pkt=s(m4e);T(Z9.$$.fragment,pkt),pkt.forEach(t),ukt.forEach(t),WEr=i(kWe),f4e=n(kWe,"SPAN",{});var _kt=s(f4e);HEr=r(_kt,"TFAutoModelForPreTraining"),_kt.forEach(t),kWe.forEach(t),Cze=i(m),rr=n(m,"DIV",{class:!0});var Sl=s(rr);T(ex.$$.fragment,Sl),UEr=i(Sl),mc=n(Sl,"P",{});var qte=s(mc);JEr=r(qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_J=n(qte,"A",{href:!0});var bkt=s(_J);YEr=r(bkt,"from_pretrained()"),bkt.forEach(t),KEr=r(qte," class method or the "),bJ=n(qte,"A",{href:!0});var vkt=s(bJ);ZEr=r(vkt,"from_config()"),vkt.forEach(t),eCr=r(qte,` class
method.`),qte.forEach(t),oCr=i(Sl),ox=n(Sl,"P",{});var SWe=s(ox);rCr=r(SWe,"This class cannot be instantiated directly using "),g4e=n(SWe,"CODE",{});var Fkt=s(g4e);tCr=r(Fkt,"__init__()"),Fkt.forEach(t),aCr=r(SWe," (throws an error)."),SWe.forEach(t),nCr=i(Sl),Pt=n(Sl,"DIV",{class:!0});var iL=s(Pt);T(rx.$$.fragment,iL),sCr=i(iL),h4e=n(iL,"P",{});var Tkt=s(h4e);lCr=r(Tkt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Tkt.forEach(t),iCr=i(iL),fc=n(iL,"P",{});var jte=s(fc);dCr=r(jte,`Note:
Loading a model from its configuration file does `),u4e=n(jte,"STRONG",{});var Mkt=s(u4e);cCr=r(Mkt,"not"),Mkt.forEach(t),mCr=r(jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),vJ=n(jte,"A",{href:!0});var Ekt=s(vJ);fCr=r(Ekt,"from_pretrained()"),Ekt.forEach(t),gCr=r(jte," to load the model weights."),jte.forEach(t),hCr=i(iL),T(FC.$$.fragment,iL),iL.forEach(t),uCr=i(Sl),$r=n(Sl,"DIV",{class:!0});var Rl=s($r);T(tx.$$.fragment,Rl),pCr=i(Rl),p4e=n(Rl,"P",{});var Ckt=s(p4e);_Cr=r(Ckt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ckt.forEach(t),bCr=i(Rl),ln=n(Rl,"P",{});var dL=s(ln);vCr=r(dL,"The model class to instantiate is selected based on the "),_4e=n(dL,"CODE",{});var wkt=s(_4e);FCr=r(wkt,"model_type"),wkt.forEach(t),TCr=r(dL,` property of the config object (either
passed as an argument or loaded from `),b4e=n(dL,"CODE",{});var Akt=s(b4e);MCr=r(Akt,"pretrained_model_name_or_path"),Akt.forEach(t),ECr=r(dL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v4e=n(dL,"CODE",{});var Lkt=s(v4e);CCr=r(Lkt,"pretrained_model_name_or_path"),Lkt.forEach(t),wCr=r(dL,":"),dL.forEach(t),ACr=i(Rl),se=n(Rl,"UL",{});var le=s(se);TC=n(le,"LI",{});var hje=s(TC);F4e=n(hje,"STRONG",{});var ykt=s(F4e);LCr=r(ykt,"albert"),ykt.forEach(t),yCr=r(hje," \u2014 "),FJ=n(hje,"A",{href:!0});var xkt=s(FJ);xCr=r(xkt,"TFAlbertForPreTraining"),xkt.forEach(t),$Cr=r(hje," (ALBERT model)"),hje.forEach(t),kCr=i(le),MC=n(le,"LI",{});var uje=s(MC);T4e=n(uje,"STRONG",{});var $kt=s(T4e);SCr=r($kt,"bart"),$kt.forEach(t),RCr=r(uje," \u2014 "),TJ=n(uje,"A",{href:!0});var kkt=s(TJ);PCr=r(kkt,"TFBartForConditionalGeneration"),kkt.forEach(t),BCr=r(uje," (BART model)"),uje.forEach(t),NCr=i(le),EC=n(le,"LI",{});var pje=s(EC);M4e=n(pje,"STRONG",{});var Skt=s(M4e);ICr=r(Skt,"bert"),Skt.forEach(t),qCr=r(pje," \u2014 "),MJ=n(pje,"A",{href:!0});var Rkt=s(MJ);jCr=r(Rkt,"TFBertForPreTraining"),Rkt.forEach(t),DCr=r(pje," (BERT model)"),pje.forEach(t),GCr=i(le),CC=n(le,"LI",{});var _je=s(CC);E4e=n(_je,"STRONG",{});var Pkt=s(E4e);OCr=r(Pkt,"camembert"),Pkt.forEach(t),VCr=r(_je," \u2014 "),EJ=n(_je,"A",{href:!0});var Bkt=s(EJ);XCr=r(Bkt,"TFCamembertForMaskedLM"),Bkt.forEach(t),zCr=r(_je," (CamemBERT model)"),_je.forEach(t),QCr=i(le),wC=n(le,"LI",{});var bje=s(wC);C4e=n(bje,"STRONG",{});var Nkt=s(C4e);WCr=r(Nkt,"ctrl"),Nkt.forEach(t),HCr=r(bje," \u2014 "),CJ=n(bje,"A",{href:!0});var Ikt=s(CJ);UCr=r(Ikt,"TFCTRLLMHeadModel"),Ikt.forEach(t),JCr=r(bje," (CTRL model)"),bje.forEach(t),YCr=i(le),AC=n(le,"LI",{});var vje=s(AC);w4e=n(vje,"STRONG",{});var qkt=s(w4e);KCr=r(qkt,"distilbert"),qkt.forEach(t),ZCr=r(vje," \u2014 "),wJ=n(vje,"A",{href:!0});var jkt=s(wJ);e3r=r(jkt,"TFDistilBertForMaskedLM"),jkt.forEach(t),o3r=r(vje," (DistilBERT model)"),vje.forEach(t),r3r=i(le),LC=n(le,"LI",{});var Fje=s(LC);A4e=n(Fje,"STRONG",{});var Dkt=s(A4e);t3r=r(Dkt,"electra"),Dkt.forEach(t),a3r=r(Fje," \u2014 "),AJ=n(Fje,"A",{href:!0});var Gkt=s(AJ);n3r=r(Gkt,"TFElectraForPreTraining"),Gkt.forEach(t),s3r=r(Fje," (ELECTRA model)"),Fje.forEach(t),l3r=i(le),yC=n(le,"LI",{});var Tje=s(yC);L4e=n(Tje,"STRONG",{});var Okt=s(L4e);i3r=r(Okt,"flaubert"),Okt.forEach(t),d3r=r(Tje," \u2014 "),LJ=n(Tje,"A",{href:!0});var Vkt=s(LJ);c3r=r(Vkt,"TFFlaubertWithLMHeadModel"),Vkt.forEach(t),m3r=r(Tje," (FlauBERT model)"),Tje.forEach(t),f3r=i(le),xC=n(le,"LI",{});var Mje=s(xC);y4e=n(Mje,"STRONG",{});var Xkt=s(y4e);g3r=r(Xkt,"funnel"),Xkt.forEach(t),h3r=r(Mje," \u2014 "),yJ=n(Mje,"A",{href:!0});var zkt=s(yJ);u3r=r(zkt,"TFFunnelForPreTraining"),zkt.forEach(t),p3r=r(Mje," (Funnel Transformer model)"),Mje.forEach(t),_3r=i(le),$C=n(le,"LI",{});var Eje=s($C);x4e=n(Eje,"STRONG",{});var Qkt=s(x4e);b3r=r(Qkt,"gpt2"),Qkt.forEach(t),v3r=r(Eje," \u2014 "),xJ=n(Eje,"A",{href:!0});var Wkt=s(xJ);F3r=r(Wkt,"TFGPT2LMHeadModel"),Wkt.forEach(t),T3r=r(Eje," (OpenAI GPT-2 model)"),Eje.forEach(t),M3r=i(le),kC=n(le,"LI",{});var Cje=s(kC);$4e=n(Cje,"STRONG",{});var Hkt=s($4e);E3r=r(Hkt,"layoutlm"),Hkt.forEach(t),C3r=r(Cje," \u2014 "),$J=n(Cje,"A",{href:!0});var Ukt=s($J);w3r=r(Ukt,"TFLayoutLMForMaskedLM"),Ukt.forEach(t),A3r=r(Cje," (LayoutLM model)"),Cje.forEach(t),L3r=i(le),SC=n(le,"LI",{});var wje=s(SC);k4e=n(wje,"STRONG",{});var Jkt=s(k4e);y3r=r(Jkt,"lxmert"),Jkt.forEach(t),x3r=r(wje," \u2014 "),kJ=n(wje,"A",{href:!0});var Ykt=s(kJ);$3r=r(Ykt,"TFLxmertForPreTraining"),Ykt.forEach(t),k3r=r(wje," (LXMERT model)"),wje.forEach(t),S3r=i(le),RC=n(le,"LI",{});var Aje=s(RC);S4e=n(Aje,"STRONG",{});var Kkt=s(S4e);R3r=r(Kkt,"mobilebert"),Kkt.forEach(t),P3r=r(Aje," \u2014 "),SJ=n(Aje,"A",{href:!0});var Zkt=s(SJ);B3r=r(Zkt,"TFMobileBertForPreTraining"),Zkt.forEach(t),N3r=r(Aje," (MobileBERT model)"),Aje.forEach(t),I3r=i(le),PC=n(le,"LI",{});var Lje=s(PC);R4e=n(Lje,"STRONG",{});var eSt=s(R4e);q3r=r(eSt,"mpnet"),eSt.forEach(t),j3r=r(Lje," \u2014 "),RJ=n(Lje,"A",{href:!0});var oSt=s(RJ);D3r=r(oSt,"TFMPNetForMaskedLM"),oSt.forEach(t),G3r=r(Lje," (MPNet model)"),Lje.forEach(t),O3r=i(le),BC=n(le,"LI",{});var yje=s(BC);P4e=n(yje,"STRONG",{});var rSt=s(P4e);V3r=r(rSt,"openai-gpt"),rSt.forEach(t),X3r=r(yje," \u2014 "),PJ=n(yje,"A",{href:!0});var tSt=s(PJ);z3r=r(tSt,"TFOpenAIGPTLMHeadModel"),tSt.forEach(t),Q3r=r(yje," (OpenAI GPT model)"),yje.forEach(t),W3r=i(le),NC=n(le,"LI",{});var xje=s(NC);B4e=n(xje,"STRONG",{});var aSt=s(B4e);H3r=r(aSt,"roberta"),aSt.forEach(t),U3r=r(xje," \u2014 "),BJ=n(xje,"A",{href:!0});var nSt=s(BJ);J3r=r(nSt,"TFRobertaForMaskedLM"),nSt.forEach(t),Y3r=r(xje," (RoBERTa model)"),xje.forEach(t),K3r=i(le),IC=n(le,"LI",{});var $je=s(IC);N4e=n($je,"STRONG",{});var sSt=s(N4e);Z3r=r(sSt,"t5"),sSt.forEach(t),e5r=r($je," \u2014 "),NJ=n($je,"A",{href:!0});var lSt=s(NJ);o5r=r(lSt,"TFT5ForConditionalGeneration"),lSt.forEach(t),r5r=r($je," (T5 model)"),$je.forEach(t),t5r=i(le),qC=n(le,"LI",{});var kje=s(qC);I4e=n(kje,"STRONG",{});var iSt=s(I4e);a5r=r(iSt,"tapas"),iSt.forEach(t),n5r=r(kje," \u2014 "),IJ=n(kje,"A",{href:!0});var dSt=s(IJ);s5r=r(dSt,"TFTapasForMaskedLM"),dSt.forEach(t),l5r=r(kje," (TAPAS model)"),kje.forEach(t),i5r=i(le),jC=n(le,"LI",{});var Sje=s(jC);q4e=n(Sje,"STRONG",{});var cSt=s(q4e);d5r=r(cSt,"transfo-xl"),cSt.forEach(t),c5r=r(Sje," \u2014 "),qJ=n(Sje,"A",{href:!0});var mSt=s(qJ);m5r=r(mSt,"TFTransfoXLLMHeadModel"),mSt.forEach(t),f5r=r(Sje," (Transformer-XL model)"),Sje.forEach(t),g5r=i(le),DC=n(le,"LI",{});var Rje=s(DC);j4e=n(Rje,"STRONG",{});var fSt=s(j4e);h5r=r(fSt,"vit_mae"),fSt.forEach(t),u5r=r(Rje," \u2014 "),jJ=n(Rje,"A",{href:!0});var gSt=s(jJ);p5r=r(gSt,"TFViTMAEForPreTraining"),gSt.forEach(t),_5r=r(Rje," (ViTMAE model)"),Rje.forEach(t),b5r=i(le),GC=n(le,"LI",{});var Pje=s(GC);D4e=n(Pje,"STRONG",{});var hSt=s(D4e);v5r=r(hSt,"xlm"),hSt.forEach(t),F5r=r(Pje," \u2014 "),DJ=n(Pje,"A",{href:!0});var uSt=s(DJ);T5r=r(uSt,"TFXLMWithLMHeadModel"),uSt.forEach(t),M5r=r(Pje," (XLM model)"),Pje.forEach(t),E5r=i(le),OC=n(le,"LI",{});var Bje=s(OC);G4e=n(Bje,"STRONG",{});var pSt=s(G4e);C5r=r(pSt,"xlm-roberta"),pSt.forEach(t),w5r=r(Bje," \u2014 "),GJ=n(Bje,"A",{href:!0});var _St=s(GJ);A5r=r(_St,"TFXLMRobertaForMaskedLM"),_St.forEach(t),L5r=r(Bje," (XLM-RoBERTa model)"),Bje.forEach(t),y5r=i(le),VC=n(le,"LI",{});var Nje=s(VC);O4e=n(Nje,"STRONG",{});var bSt=s(O4e);x5r=r(bSt,"xlnet"),bSt.forEach(t),$5r=r(Nje," \u2014 "),OJ=n(Nje,"A",{href:!0});var vSt=s(OJ);k5r=r(vSt,"TFXLNetLMHeadModel"),vSt.forEach(t),S5r=r(Nje," (XLNet model)"),Nje.forEach(t),le.forEach(t),R5r=i(Rl),T(XC.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),wze=i(m),gc=n(m,"H2",{class:!0});var RWe=s(gc);zC=n(RWe,"A",{id:!0,class:!0,href:!0});var FSt=s(zC);V4e=n(FSt,"SPAN",{});var TSt=s(V4e);T(ax.$$.fragment,TSt),TSt.forEach(t),FSt.forEach(t),P5r=i(RWe),X4e=n(RWe,"SPAN",{});var MSt=s(X4e);B5r=r(MSt,"TFAutoModelForCausalLM"),MSt.forEach(t),RWe.forEach(t),Aze=i(m),tr=n(m,"DIV",{class:!0});var Pl=s(tr);T(nx.$$.fragment,Pl),N5r=i(Pl),hc=n(Pl,"P",{});var Dte=s(hc);I5r=r(Dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),VJ=n(Dte,"A",{href:!0});var ESt=s(VJ);q5r=r(ESt,"from_pretrained()"),ESt.forEach(t),j5r=r(Dte," class method or the "),XJ=n(Dte,"A",{href:!0});var CSt=s(XJ);D5r=r(CSt,"from_config()"),CSt.forEach(t),G5r=r(Dte,` class
method.`),Dte.forEach(t),O5r=i(Pl),sx=n(Pl,"P",{});var PWe=s(sx);V5r=r(PWe,"This class cannot be instantiated directly using "),z4e=n(PWe,"CODE",{});var wSt=s(z4e);X5r=r(wSt,"__init__()"),wSt.forEach(t),z5r=r(PWe," (throws an error)."),PWe.forEach(t),Q5r=i(Pl),Bt=n(Pl,"DIV",{class:!0});var cL=s(Bt);T(lx.$$.fragment,cL),W5r=i(cL),Q4e=n(cL,"P",{});var ASt=s(Q4e);H5r=r(ASt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ASt.forEach(t),U5r=i(cL),uc=n(cL,"P",{});var Gte=s(uc);J5r=r(Gte,`Note:
Loading a model from its configuration file does `),W4e=n(Gte,"STRONG",{});var LSt=s(W4e);Y5r=r(LSt,"not"),LSt.forEach(t),K5r=r(Gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=n(Gte,"A",{href:!0});var ySt=s(zJ);Z5r=r(ySt,"from_pretrained()"),ySt.forEach(t),e0r=r(Gte," to load the model weights."),Gte.forEach(t),o0r=i(cL),T(QC.$$.fragment,cL),cL.forEach(t),r0r=i(Pl),kr=n(Pl,"DIV",{class:!0});var Bl=s(kr);T(ix.$$.fragment,Bl),t0r=i(Bl),H4e=n(Bl,"P",{});var xSt=s(H4e);a0r=r(xSt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),xSt.forEach(t),n0r=i(Bl),dn=n(Bl,"P",{});var mL=s(dn);s0r=r(mL,"The model class to instantiate is selected based on the "),U4e=n(mL,"CODE",{});var $St=s(U4e);l0r=r($St,"model_type"),$St.forEach(t),i0r=r(mL,` property of the config object (either
passed as an argument or loaded from `),J4e=n(mL,"CODE",{});var kSt=s(J4e);d0r=r(kSt,"pretrained_model_name_or_path"),kSt.forEach(t),c0r=r(mL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y4e=n(mL,"CODE",{});var SSt=s(Y4e);m0r=r(SSt,"pretrained_model_name_or_path"),SSt.forEach(t),f0r=r(mL,":"),mL.forEach(t),g0r=i(Bl),Me=n(Bl,"UL",{});var Ce=s(Me);WC=n(Ce,"LI",{});var Ije=s(WC);K4e=n(Ije,"STRONG",{});var RSt=s(K4e);h0r=r(RSt,"bert"),RSt.forEach(t),u0r=r(Ije," \u2014 "),QJ=n(Ije,"A",{href:!0});var PSt=s(QJ);p0r=r(PSt,"TFBertLMHeadModel"),PSt.forEach(t),_0r=r(Ije," (BERT model)"),Ije.forEach(t),b0r=i(Ce),HC=n(Ce,"LI",{});var qje=s(HC);Z4e=n(qje,"STRONG",{});var BSt=s(Z4e);v0r=r(BSt,"camembert"),BSt.forEach(t),F0r=r(qje," \u2014 "),WJ=n(qje,"A",{href:!0});var NSt=s(WJ);T0r=r(NSt,"TFCamembertForCausalLM"),NSt.forEach(t),M0r=r(qje," (CamemBERT model)"),qje.forEach(t),E0r=i(Ce),UC=n(Ce,"LI",{});var jje=s(UC);eEe=n(jje,"STRONG",{});var ISt=s(eEe);C0r=r(ISt,"ctrl"),ISt.forEach(t),w0r=r(jje," \u2014 "),HJ=n(jje,"A",{href:!0});var qSt=s(HJ);A0r=r(qSt,"TFCTRLLMHeadModel"),qSt.forEach(t),L0r=r(jje," (CTRL model)"),jje.forEach(t),y0r=i(Ce),JC=n(Ce,"LI",{});var Dje=s(JC);oEe=n(Dje,"STRONG",{});var jSt=s(oEe);x0r=r(jSt,"gpt2"),jSt.forEach(t),$0r=r(Dje," \u2014 "),UJ=n(Dje,"A",{href:!0});var DSt=s(UJ);k0r=r(DSt,"TFGPT2LMHeadModel"),DSt.forEach(t),S0r=r(Dje," (OpenAI GPT-2 model)"),Dje.forEach(t),R0r=i(Ce),YC=n(Ce,"LI",{});var Gje=s(YC);rEe=n(Gje,"STRONG",{});var GSt=s(rEe);P0r=r(GSt,"gptj"),GSt.forEach(t),B0r=r(Gje," \u2014 "),JJ=n(Gje,"A",{href:!0});var OSt=s(JJ);N0r=r(OSt,"TFGPTJForCausalLM"),OSt.forEach(t),I0r=r(Gje," (GPT-J model)"),Gje.forEach(t),q0r=i(Ce),KC=n(Ce,"LI",{});var Oje=s(KC);tEe=n(Oje,"STRONG",{});var VSt=s(tEe);j0r=r(VSt,"openai-gpt"),VSt.forEach(t),D0r=r(Oje," \u2014 "),YJ=n(Oje,"A",{href:!0});var XSt=s(YJ);G0r=r(XSt,"TFOpenAIGPTLMHeadModel"),XSt.forEach(t),O0r=r(Oje," (OpenAI GPT model)"),Oje.forEach(t),V0r=i(Ce),ZC=n(Ce,"LI",{});var Vje=s(ZC);aEe=n(Vje,"STRONG",{});var zSt=s(aEe);X0r=r(zSt,"opt"),zSt.forEach(t),z0r=r(Vje," \u2014 "),KJ=n(Vje,"A",{href:!0});var QSt=s(KJ);Q0r=r(QSt,"TFOPTForCausalLM"),QSt.forEach(t),W0r=r(Vje," (OPT model)"),Vje.forEach(t),H0r=i(Ce),e3=n(Ce,"LI",{});var Xje=s(e3);nEe=n(Xje,"STRONG",{});var WSt=s(nEe);U0r=r(WSt,"rembert"),WSt.forEach(t),J0r=r(Xje," \u2014 "),ZJ=n(Xje,"A",{href:!0});var HSt=s(ZJ);Y0r=r(HSt,"TFRemBertForCausalLM"),HSt.forEach(t),K0r=r(Xje," (RemBERT model)"),Xje.forEach(t),Z0r=i(Ce),o3=n(Ce,"LI",{});var zje=s(o3);sEe=n(zje,"STRONG",{});var USt=s(sEe);ewr=r(USt,"roberta"),USt.forEach(t),owr=r(zje," \u2014 "),eY=n(zje,"A",{href:!0});var JSt=s(eY);rwr=r(JSt,"TFRobertaForCausalLM"),JSt.forEach(t),twr=r(zje," (RoBERTa model)"),zje.forEach(t),awr=i(Ce),r3=n(Ce,"LI",{});var Qje=s(r3);lEe=n(Qje,"STRONG",{});var YSt=s(lEe);nwr=r(YSt,"roformer"),YSt.forEach(t),swr=r(Qje," \u2014 "),oY=n(Qje,"A",{href:!0});var KSt=s(oY);lwr=r(KSt,"TFRoFormerForCausalLM"),KSt.forEach(t),iwr=r(Qje," (RoFormer model)"),Qje.forEach(t),dwr=i(Ce),t3=n(Ce,"LI",{});var Wje=s(t3);iEe=n(Wje,"STRONG",{});var ZSt=s(iEe);cwr=r(ZSt,"transfo-xl"),ZSt.forEach(t),mwr=r(Wje," \u2014 "),rY=n(Wje,"A",{href:!0});var eRt=s(rY);fwr=r(eRt,"TFTransfoXLLMHeadModel"),eRt.forEach(t),gwr=r(Wje," (Transformer-XL model)"),Wje.forEach(t),hwr=i(Ce),a3=n(Ce,"LI",{});var Hje=s(a3);dEe=n(Hje,"STRONG",{});var oRt=s(dEe);uwr=r(oRt,"xlm"),oRt.forEach(t),pwr=r(Hje," \u2014 "),tY=n(Hje,"A",{href:!0});var rRt=s(tY);_wr=r(rRt,"TFXLMWithLMHeadModel"),rRt.forEach(t),bwr=r(Hje," (XLM model)"),Hje.forEach(t),vwr=i(Ce),n3=n(Ce,"LI",{});var Uje=s(n3);cEe=n(Uje,"STRONG",{});var tRt=s(cEe);Fwr=r(tRt,"xlnet"),tRt.forEach(t),Twr=r(Uje," \u2014 "),aY=n(Uje,"A",{href:!0});var aRt=s(aY);Mwr=r(aRt,"TFXLNetLMHeadModel"),aRt.forEach(t),Ewr=r(Uje," (XLNet model)"),Uje.forEach(t),Ce.forEach(t),Cwr=i(Bl),T(s3.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),Lze=i(m),pc=n(m,"H2",{class:!0});var BWe=s(pc);l3=n(BWe,"A",{id:!0,class:!0,href:!0});var nRt=s(l3);mEe=n(nRt,"SPAN",{});var sRt=s(mEe);T(dx.$$.fragment,sRt),sRt.forEach(t),nRt.forEach(t),wwr=i(BWe),fEe=n(BWe,"SPAN",{});var lRt=s(fEe);Awr=r(lRt,"TFAutoModelForImageClassification"),lRt.forEach(t),BWe.forEach(t),yze=i(m),ar=n(m,"DIV",{class:!0});var Nl=s(ar);T(cx.$$.fragment,Nl),Lwr=i(Nl),_c=n(Nl,"P",{});var Ote=s(_c);ywr=r(Ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nY=n(Ote,"A",{href:!0});var iRt=s(nY);xwr=r(iRt,"from_pretrained()"),iRt.forEach(t),$wr=r(Ote," class method or the "),sY=n(Ote,"A",{href:!0});var dRt=s(sY);kwr=r(dRt,"from_config()"),dRt.forEach(t),Swr=r(Ote,` class
method.`),Ote.forEach(t),Rwr=i(Nl),mx=n(Nl,"P",{});var NWe=s(mx);Pwr=r(NWe,"This class cannot be instantiated directly using "),gEe=n(NWe,"CODE",{});var cRt=s(gEe);Bwr=r(cRt,"__init__()"),cRt.forEach(t),Nwr=r(NWe," (throws an error)."),NWe.forEach(t),Iwr=i(Nl),Nt=n(Nl,"DIV",{class:!0});var fL=s(Nt);T(fx.$$.fragment,fL),qwr=i(fL),hEe=n(fL,"P",{});var mRt=s(hEe);jwr=r(mRt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),mRt.forEach(t),Dwr=i(fL),bc=n(fL,"P",{});var Vte=s(bc);Gwr=r(Vte,`Note:
Loading a model from its configuration file does `),uEe=n(Vte,"STRONG",{});var fRt=s(uEe);Owr=r(fRt,"not"),fRt.forEach(t),Vwr=r(Vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),lY=n(Vte,"A",{href:!0});var gRt=s(lY);Xwr=r(gRt,"from_pretrained()"),gRt.forEach(t),zwr=r(Vte," to load the model weights."),Vte.forEach(t),Qwr=i(fL),T(i3.$$.fragment,fL),fL.forEach(t),Wwr=i(Nl),Sr=n(Nl,"DIV",{class:!0});var Il=s(Sr);T(gx.$$.fragment,Il),Hwr=i(Il),pEe=n(Il,"P",{});var hRt=s(pEe);Uwr=r(hRt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hRt.forEach(t),Jwr=i(Il),cn=n(Il,"P",{});var gL=s(cn);Ywr=r(gL,"The model class to instantiate is selected based on the "),_Ee=n(gL,"CODE",{});var uRt=s(_Ee);Kwr=r(uRt,"model_type"),uRt.forEach(t),Zwr=r(gL,` property of the config object (either
passed as an argument or loaded from `),bEe=n(gL,"CODE",{});var pRt=s(bEe);eAr=r(pRt,"pretrained_model_name_or_path"),pRt.forEach(t),oAr=r(gL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vEe=n(gL,"CODE",{});var _Rt=s(vEe);rAr=r(_Rt,"pretrained_model_name_or_path"),_Rt.forEach(t),tAr=r(gL,":"),gL.forEach(t),aAr=i(Il),Qe=n(Il,"UL",{});var ot=s(Qe);d3=n(ot,"LI",{});var Jje=s(d3);FEe=n(Jje,"STRONG",{});var bRt=s(FEe);nAr=r(bRt,"convnext"),bRt.forEach(t),sAr=r(Jje," \u2014 "),iY=n(Jje,"A",{href:!0});var vRt=s(iY);lAr=r(vRt,"TFConvNextForImageClassification"),vRt.forEach(t),iAr=r(Jje," (ConvNeXT model)"),Jje.forEach(t),dAr=i(ot),c3=n(ot,"LI",{});var Yje=s(c3);TEe=n(Yje,"STRONG",{});var FRt=s(TEe);cAr=r(FRt,"data2vec-vision"),FRt.forEach(t),mAr=r(Yje," \u2014 "),dY=n(Yje,"A",{href:!0});var TRt=s(dY);fAr=r(TRt,"TFData2VecVisionForImageClassification"),TRt.forEach(t),gAr=r(Yje," (Data2VecVision model)"),Yje.forEach(t),hAr=i(ot),Ks=n(ot,"LI",{});var jS=s(Ks);MEe=n(jS,"STRONG",{});var MRt=s(MEe);uAr=r(MRt,"deit"),MRt.forEach(t),pAr=r(jS," \u2014 "),cY=n(jS,"A",{href:!0});var ERt=s(cY);_Ar=r(ERt,"TFDeiTForImageClassification"),ERt.forEach(t),bAr=r(jS," or "),mY=n(jS,"A",{href:!0});var CRt=s(mY);vAr=r(CRt,"TFDeiTForImageClassificationWithTeacher"),CRt.forEach(t),FAr=r(jS," (DeiT model)"),jS.forEach(t),TAr=i(ot),m3=n(ot,"LI",{});var Kje=s(m3);EEe=n(Kje,"STRONG",{});var wRt=s(EEe);MAr=r(wRt,"regnet"),wRt.forEach(t),EAr=r(Kje," \u2014 "),fY=n(Kje,"A",{href:!0});var ARt=s(fY);CAr=r(ARt,"TFRegNetForImageClassification"),ARt.forEach(t),wAr=r(Kje," (RegNet model)"),Kje.forEach(t),AAr=i(ot),f3=n(ot,"LI",{});var Zje=s(f3);CEe=n(Zje,"STRONG",{});var LRt=s(CEe);LAr=r(LRt,"resnet"),LRt.forEach(t),yAr=r(Zje," \u2014 "),gY=n(Zje,"A",{href:!0});var yRt=s(gY);xAr=r(yRt,"TFResNetForImageClassification"),yRt.forEach(t),$Ar=r(Zje," (ResNet model)"),Zje.forEach(t),kAr=i(ot),g3=n(ot,"LI",{});var eDe=s(g3);wEe=n(eDe,"STRONG",{});var xRt=s(wEe);SAr=r(xRt,"swin"),xRt.forEach(t),RAr=r(eDe," \u2014 "),hY=n(eDe,"A",{href:!0});var $Rt=s(hY);PAr=r($Rt,"TFSwinForImageClassification"),$Rt.forEach(t),BAr=r(eDe," (Swin Transformer model)"),eDe.forEach(t),NAr=i(ot),h3=n(ot,"LI",{});var oDe=s(h3);AEe=n(oDe,"STRONG",{});var kRt=s(AEe);IAr=r(kRt,"vit"),kRt.forEach(t),qAr=r(oDe," \u2014 "),uY=n(oDe,"A",{href:!0});var SRt=s(uY);jAr=r(SRt,"TFViTForImageClassification"),SRt.forEach(t),DAr=r(oDe," (ViT model)"),oDe.forEach(t),ot.forEach(t),GAr=i(Il),T(u3.$$.fragment,Il),Il.forEach(t),Nl.forEach(t),xze=i(m),vc=n(m,"H2",{class:!0});var IWe=s(vc);p3=n(IWe,"A",{id:!0,class:!0,href:!0});var RRt=s(p3);LEe=n(RRt,"SPAN",{});var PRt=s(LEe);T(hx.$$.fragment,PRt),PRt.forEach(t),RRt.forEach(t),OAr=i(IWe),yEe=n(IWe,"SPAN",{});var BRt=s(yEe);VAr=r(BRt,"TFAutoModelForMaskedLM"),BRt.forEach(t),IWe.forEach(t),$ze=i(m),nr=n(m,"DIV",{class:!0});var ql=s(nr);T(ux.$$.fragment,ql),XAr=i(ql),Fc=n(ql,"P",{});var Xte=s(Fc);zAr=r(Xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pY=n(Xte,"A",{href:!0});var NRt=s(pY);QAr=r(NRt,"from_pretrained()"),NRt.forEach(t),WAr=r(Xte," class method or the "),_Y=n(Xte,"A",{href:!0});var IRt=s(_Y);HAr=r(IRt,"from_config()"),IRt.forEach(t),UAr=r(Xte,` class
method.`),Xte.forEach(t),JAr=i(ql),px=n(ql,"P",{});var qWe=s(px);YAr=r(qWe,"This class cannot be instantiated directly using "),xEe=n(qWe,"CODE",{});var qRt=s(xEe);KAr=r(qRt,"__init__()"),qRt.forEach(t),ZAr=r(qWe," (throws an error)."),qWe.forEach(t),e6r=i(ql),It=n(ql,"DIV",{class:!0});var hL=s(It);T(_x.$$.fragment,hL),o6r=i(hL),$Ee=n(hL,"P",{});var jRt=s($Ee);r6r=r(jRt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),jRt.forEach(t),t6r=i(hL),Tc=n(hL,"P",{});var zte=s(Tc);a6r=r(zte,`Note:
Loading a model from its configuration file does `),kEe=n(zte,"STRONG",{});var DRt=s(kEe);n6r=r(DRt,"not"),DRt.forEach(t),s6r=r(zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),bY=n(zte,"A",{href:!0});var GRt=s(bY);l6r=r(GRt,"from_pretrained()"),GRt.forEach(t),i6r=r(zte," to load the model weights."),zte.forEach(t),d6r=i(hL),T(_3.$$.fragment,hL),hL.forEach(t),c6r=i(ql),Rr=n(ql,"DIV",{class:!0});var jl=s(Rr);T(bx.$$.fragment,jl),m6r=i(jl),SEe=n(jl,"P",{});var ORt=s(SEe);f6r=r(ORt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ORt.forEach(t),g6r=i(jl),mn=n(jl,"P",{});var uL=s(mn);h6r=r(uL,"The model class to instantiate is selected based on the "),REe=n(uL,"CODE",{});var VRt=s(REe);u6r=r(VRt,"model_type"),VRt.forEach(t),p6r=r(uL,` property of the config object (either
passed as an argument or loaded from `),PEe=n(uL,"CODE",{});var XRt=s(PEe);_6r=r(XRt,"pretrained_model_name_or_path"),XRt.forEach(t),b6r=r(uL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BEe=n(uL,"CODE",{});var zRt=s(BEe);v6r=r(zRt,"pretrained_model_name_or_path"),zRt.forEach(t),F6r=r(uL,":"),uL.forEach(t),T6r=i(jl),ie=n(jl,"UL",{});var fe=s(ie);b3=n(fe,"LI",{});var rDe=s(b3);NEe=n(rDe,"STRONG",{});var QRt=s(NEe);M6r=r(QRt,"albert"),QRt.forEach(t),E6r=r(rDe," \u2014 "),vY=n(rDe,"A",{href:!0});var WRt=s(vY);C6r=r(WRt,"TFAlbertForMaskedLM"),WRt.forEach(t),w6r=r(rDe," (ALBERT model)"),rDe.forEach(t),A6r=i(fe),v3=n(fe,"LI",{});var tDe=s(v3);IEe=n(tDe,"STRONG",{});var HRt=s(IEe);L6r=r(HRt,"bert"),HRt.forEach(t),y6r=r(tDe," \u2014 "),FY=n(tDe,"A",{href:!0});var URt=s(FY);x6r=r(URt,"TFBertForMaskedLM"),URt.forEach(t),$6r=r(tDe," (BERT model)"),tDe.forEach(t),k6r=i(fe),F3=n(fe,"LI",{});var aDe=s(F3);qEe=n(aDe,"STRONG",{});var JRt=s(qEe);S6r=r(JRt,"camembert"),JRt.forEach(t),R6r=r(aDe," \u2014 "),TY=n(aDe,"A",{href:!0});var YRt=s(TY);P6r=r(YRt,"TFCamembertForMaskedLM"),YRt.forEach(t),B6r=r(aDe," (CamemBERT model)"),aDe.forEach(t),N6r=i(fe),T3=n(fe,"LI",{});var nDe=s(T3);jEe=n(nDe,"STRONG",{});var KRt=s(jEe);I6r=r(KRt,"convbert"),KRt.forEach(t),q6r=r(nDe," \u2014 "),MY=n(nDe,"A",{href:!0});var ZRt=s(MY);j6r=r(ZRt,"TFConvBertForMaskedLM"),ZRt.forEach(t),D6r=r(nDe," (ConvBERT model)"),nDe.forEach(t),G6r=i(fe),M3=n(fe,"LI",{});var sDe=s(M3);DEe=n(sDe,"STRONG",{});var ePt=s(DEe);O6r=r(ePt,"deberta"),ePt.forEach(t),V6r=r(sDe," \u2014 "),EY=n(sDe,"A",{href:!0});var oPt=s(EY);X6r=r(oPt,"TFDebertaForMaskedLM"),oPt.forEach(t),z6r=r(sDe," (DeBERTa model)"),sDe.forEach(t),Q6r=i(fe),E3=n(fe,"LI",{});var lDe=s(E3);GEe=n(lDe,"STRONG",{});var rPt=s(GEe);W6r=r(rPt,"deberta-v2"),rPt.forEach(t),H6r=r(lDe," \u2014 "),CY=n(lDe,"A",{href:!0});var tPt=s(CY);U6r=r(tPt,"TFDebertaV2ForMaskedLM"),tPt.forEach(t),J6r=r(lDe," (DeBERTa-v2 model)"),lDe.forEach(t),Y6r=i(fe),C3=n(fe,"LI",{});var iDe=s(C3);OEe=n(iDe,"STRONG",{});var aPt=s(OEe);K6r=r(aPt,"distilbert"),aPt.forEach(t),Z6r=r(iDe," \u2014 "),wY=n(iDe,"A",{href:!0});var nPt=s(wY);e7r=r(nPt,"TFDistilBertForMaskedLM"),nPt.forEach(t),o7r=r(iDe," (DistilBERT model)"),iDe.forEach(t),r7r=i(fe),w3=n(fe,"LI",{});var dDe=s(w3);VEe=n(dDe,"STRONG",{});var sPt=s(VEe);t7r=r(sPt,"electra"),sPt.forEach(t),a7r=r(dDe," \u2014 "),AY=n(dDe,"A",{href:!0});var lPt=s(AY);n7r=r(lPt,"TFElectraForMaskedLM"),lPt.forEach(t),s7r=r(dDe," (ELECTRA model)"),dDe.forEach(t),l7r=i(fe),A3=n(fe,"LI",{});var cDe=s(A3);XEe=n(cDe,"STRONG",{});var iPt=s(XEe);i7r=r(iPt,"flaubert"),iPt.forEach(t),d7r=r(cDe," \u2014 "),LY=n(cDe,"A",{href:!0});var dPt=s(LY);c7r=r(dPt,"TFFlaubertWithLMHeadModel"),dPt.forEach(t),m7r=r(cDe," (FlauBERT model)"),cDe.forEach(t),f7r=i(fe),L3=n(fe,"LI",{});var mDe=s(L3);zEe=n(mDe,"STRONG",{});var cPt=s(zEe);g7r=r(cPt,"funnel"),cPt.forEach(t),h7r=r(mDe," \u2014 "),yY=n(mDe,"A",{href:!0});var mPt=s(yY);u7r=r(mPt,"TFFunnelForMaskedLM"),mPt.forEach(t),p7r=r(mDe," (Funnel Transformer model)"),mDe.forEach(t),_7r=i(fe),y3=n(fe,"LI",{});var fDe=s(y3);QEe=n(fDe,"STRONG",{});var fPt=s(QEe);b7r=r(fPt,"layoutlm"),fPt.forEach(t),v7r=r(fDe," \u2014 "),xY=n(fDe,"A",{href:!0});var gPt=s(xY);F7r=r(gPt,"TFLayoutLMForMaskedLM"),gPt.forEach(t),T7r=r(fDe," (LayoutLM model)"),fDe.forEach(t),M7r=i(fe),x3=n(fe,"LI",{});var gDe=s(x3);WEe=n(gDe,"STRONG",{});var hPt=s(WEe);E7r=r(hPt,"longformer"),hPt.forEach(t),C7r=r(gDe," \u2014 "),$Y=n(gDe,"A",{href:!0});var uPt=s($Y);w7r=r(uPt,"TFLongformerForMaskedLM"),uPt.forEach(t),A7r=r(gDe," (Longformer model)"),gDe.forEach(t),L7r=i(fe),$3=n(fe,"LI",{});var hDe=s($3);HEe=n(hDe,"STRONG",{});var pPt=s(HEe);y7r=r(pPt,"mobilebert"),pPt.forEach(t),x7r=r(hDe," \u2014 "),kY=n(hDe,"A",{href:!0});var _Pt=s(kY);$7r=r(_Pt,"TFMobileBertForMaskedLM"),_Pt.forEach(t),k7r=r(hDe," (MobileBERT model)"),hDe.forEach(t),S7r=i(fe),k3=n(fe,"LI",{});var uDe=s(k3);UEe=n(uDe,"STRONG",{});var bPt=s(UEe);R7r=r(bPt,"mpnet"),bPt.forEach(t),P7r=r(uDe," \u2014 "),SY=n(uDe,"A",{href:!0});var vPt=s(SY);B7r=r(vPt,"TFMPNetForMaskedLM"),vPt.forEach(t),N7r=r(uDe," (MPNet model)"),uDe.forEach(t),I7r=i(fe),S3=n(fe,"LI",{});var pDe=s(S3);JEe=n(pDe,"STRONG",{});var FPt=s(JEe);q7r=r(FPt,"rembert"),FPt.forEach(t),j7r=r(pDe," \u2014 "),RY=n(pDe,"A",{href:!0});var TPt=s(RY);D7r=r(TPt,"TFRemBertForMaskedLM"),TPt.forEach(t),G7r=r(pDe," (RemBERT model)"),pDe.forEach(t),O7r=i(fe),R3=n(fe,"LI",{});var _De=s(R3);YEe=n(_De,"STRONG",{});var MPt=s(YEe);V7r=r(MPt,"roberta"),MPt.forEach(t),X7r=r(_De," \u2014 "),PY=n(_De,"A",{href:!0});var EPt=s(PY);z7r=r(EPt,"TFRobertaForMaskedLM"),EPt.forEach(t),Q7r=r(_De," (RoBERTa model)"),_De.forEach(t),W7r=i(fe),P3=n(fe,"LI",{});var bDe=s(P3);KEe=n(bDe,"STRONG",{});var CPt=s(KEe);H7r=r(CPt,"roformer"),CPt.forEach(t),U7r=r(bDe," \u2014 "),BY=n(bDe,"A",{href:!0});var wPt=s(BY);J7r=r(wPt,"TFRoFormerForMaskedLM"),wPt.forEach(t),Y7r=r(bDe," (RoFormer model)"),bDe.forEach(t),K7r=i(fe),B3=n(fe,"LI",{});var vDe=s(B3);ZEe=n(vDe,"STRONG",{});var APt=s(ZEe);Z7r=r(APt,"tapas"),APt.forEach(t),eLr=r(vDe," \u2014 "),NY=n(vDe,"A",{href:!0});var LPt=s(NY);oLr=r(LPt,"TFTapasForMaskedLM"),LPt.forEach(t),rLr=r(vDe," (TAPAS model)"),vDe.forEach(t),tLr=i(fe),N3=n(fe,"LI",{});var FDe=s(N3);eCe=n(FDe,"STRONG",{});var yPt=s(eCe);aLr=r(yPt,"xlm"),yPt.forEach(t),nLr=r(FDe," \u2014 "),IY=n(FDe,"A",{href:!0});var xPt=s(IY);sLr=r(xPt,"TFXLMWithLMHeadModel"),xPt.forEach(t),lLr=r(FDe," (XLM model)"),FDe.forEach(t),iLr=i(fe),I3=n(fe,"LI",{});var TDe=s(I3);oCe=n(TDe,"STRONG",{});var $Pt=s(oCe);dLr=r($Pt,"xlm-roberta"),$Pt.forEach(t),cLr=r(TDe," \u2014 "),qY=n(TDe,"A",{href:!0});var kPt=s(qY);mLr=r(kPt,"TFXLMRobertaForMaskedLM"),kPt.forEach(t),fLr=r(TDe," (XLM-RoBERTa model)"),TDe.forEach(t),fe.forEach(t),gLr=i(jl),T(q3.$$.fragment,jl),jl.forEach(t),ql.forEach(t),kze=i(m),Mc=n(m,"H2",{class:!0});var jWe=s(Mc);j3=n(jWe,"A",{id:!0,class:!0,href:!0});var SPt=s(j3);rCe=n(SPt,"SPAN",{});var RPt=s(rCe);T(vx.$$.fragment,RPt),RPt.forEach(t),SPt.forEach(t),hLr=i(jWe),tCe=n(jWe,"SPAN",{});var PPt=s(tCe);uLr=r(PPt,"TFAutoModelForSeq2SeqLM"),PPt.forEach(t),jWe.forEach(t),Sze=i(m),sr=n(m,"DIV",{class:!0});var Dl=s(sr);T(Fx.$$.fragment,Dl),pLr=i(Dl),Ec=n(Dl,"P",{});var Qte=s(Ec);_Lr=r(Qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),jY=n(Qte,"A",{href:!0});var BPt=s(jY);bLr=r(BPt,"from_pretrained()"),BPt.forEach(t),vLr=r(Qte," class method or the "),DY=n(Qte,"A",{href:!0});var NPt=s(DY);FLr=r(NPt,"from_config()"),NPt.forEach(t),TLr=r(Qte,` class
method.`),Qte.forEach(t),MLr=i(Dl),Tx=n(Dl,"P",{});var DWe=s(Tx);ELr=r(DWe,"This class cannot be instantiated directly using "),aCe=n(DWe,"CODE",{});var IPt=s(aCe);CLr=r(IPt,"__init__()"),IPt.forEach(t),wLr=r(DWe," (throws an error)."),DWe.forEach(t),ALr=i(Dl),qt=n(Dl,"DIV",{class:!0});var pL=s(qt);T(Mx.$$.fragment,pL),LLr=i(pL),nCe=n(pL,"P",{});var qPt=s(nCe);yLr=r(qPt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),qPt.forEach(t),xLr=i(pL),Cc=n(pL,"P",{});var Wte=s(Cc);$Lr=r(Wte,`Note:
Loading a model from its configuration file does `),sCe=n(Wte,"STRONG",{});var jPt=s(sCe);kLr=r(jPt,"not"),jPt.forEach(t),SLr=r(Wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=n(Wte,"A",{href:!0});var DPt=s(GY);RLr=r(DPt,"from_pretrained()"),DPt.forEach(t),PLr=r(Wte," to load the model weights."),Wte.forEach(t),BLr=i(pL),T(D3.$$.fragment,pL),pL.forEach(t),NLr=i(Dl),Pr=n(Dl,"DIV",{class:!0});var Gl=s(Pr);T(Ex.$$.fragment,Gl),ILr=i(Gl),lCe=n(Gl,"P",{});var GPt=s(lCe);qLr=r(GPt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),GPt.forEach(t),jLr=i(Gl),fn=n(Gl,"P",{});var _L=s(fn);DLr=r(_L,"The model class to instantiate is selected based on the "),iCe=n(_L,"CODE",{});var OPt=s(iCe);GLr=r(OPt,"model_type"),OPt.forEach(t),OLr=r(_L,` property of the config object (either
passed as an argument or loaded from `),dCe=n(_L,"CODE",{});var VPt=s(dCe);VLr=r(VPt,"pretrained_model_name_or_path"),VPt.forEach(t),XLr=r(_L,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cCe=n(_L,"CODE",{});var XPt=s(cCe);zLr=r(XPt,"pretrained_model_name_or_path"),XPt.forEach(t),QLr=r(_L,":"),_L.forEach(t),WLr=i(Gl),ye=n(Gl,"UL",{});var Ne=s(ye);G3=n(Ne,"LI",{});var MDe=s(G3);mCe=n(MDe,"STRONG",{});var zPt=s(mCe);HLr=r(zPt,"bart"),zPt.forEach(t),ULr=r(MDe," \u2014 "),OY=n(MDe,"A",{href:!0});var QPt=s(OY);JLr=r(QPt,"TFBartForConditionalGeneration"),QPt.forEach(t),YLr=r(MDe," (BART model)"),MDe.forEach(t),KLr=i(Ne),O3=n(Ne,"LI",{});var EDe=s(O3);fCe=n(EDe,"STRONG",{});var WPt=s(fCe);ZLr=r(WPt,"blenderbot"),WPt.forEach(t),eyr=r(EDe," \u2014 "),VY=n(EDe,"A",{href:!0});var HPt=s(VY);oyr=r(HPt,"TFBlenderbotForConditionalGeneration"),HPt.forEach(t),ryr=r(EDe," (Blenderbot model)"),EDe.forEach(t),tyr=i(Ne),V3=n(Ne,"LI",{});var CDe=s(V3);gCe=n(CDe,"STRONG",{});var UPt=s(gCe);ayr=r(UPt,"blenderbot-small"),UPt.forEach(t),nyr=r(CDe," \u2014 "),XY=n(CDe,"A",{href:!0});var JPt=s(XY);syr=r(JPt,"TFBlenderbotSmallForConditionalGeneration"),JPt.forEach(t),lyr=r(CDe," (BlenderbotSmall model)"),CDe.forEach(t),iyr=i(Ne),X3=n(Ne,"LI",{});var wDe=s(X3);hCe=n(wDe,"STRONG",{});var YPt=s(hCe);dyr=r(YPt,"encoder-decoder"),YPt.forEach(t),cyr=r(wDe," \u2014 "),zY=n(wDe,"A",{href:!0});var KPt=s(zY);myr=r(KPt,"TFEncoderDecoderModel"),KPt.forEach(t),fyr=r(wDe," (Encoder decoder model)"),wDe.forEach(t),gyr=i(Ne),z3=n(Ne,"LI",{});var ADe=s(z3);uCe=n(ADe,"STRONG",{});var ZPt=s(uCe);hyr=r(ZPt,"led"),ZPt.forEach(t),uyr=r(ADe," \u2014 "),QY=n(ADe,"A",{href:!0});var eBt=s(QY);pyr=r(eBt,"TFLEDForConditionalGeneration"),eBt.forEach(t),_yr=r(ADe," (LED model)"),ADe.forEach(t),byr=i(Ne),Q3=n(Ne,"LI",{});var LDe=s(Q3);pCe=n(LDe,"STRONG",{});var oBt=s(pCe);vyr=r(oBt,"marian"),oBt.forEach(t),Fyr=r(LDe," \u2014 "),WY=n(LDe,"A",{href:!0});var rBt=s(WY);Tyr=r(rBt,"TFMarianMTModel"),rBt.forEach(t),Myr=r(LDe," (Marian model)"),LDe.forEach(t),Eyr=i(Ne),W3=n(Ne,"LI",{});var yDe=s(W3);_Ce=n(yDe,"STRONG",{});var tBt=s(_Ce);Cyr=r(tBt,"mbart"),tBt.forEach(t),wyr=r(yDe," \u2014 "),HY=n(yDe,"A",{href:!0});var aBt=s(HY);Ayr=r(aBt,"TFMBartForConditionalGeneration"),aBt.forEach(t),Lyr=r(yDe," (mBART model)"),yDe.forEach(t),yyr=i(Ne),H3=n(Ne,"LI",{});var xDe=s(H3);bCe=n(xDe,"STRONG",{});var nBt=s(bCe);xyr=r(nBt,"mt5"),nBt.forEach(t),$yr=r(xDe," \u2014 "),UY=n(xDe,"A",{href:!0});var sBt=s(UY);kyr=r(sBt,"TFMT5ForConditionalGeneration"),sBt.forEach(t),Syr=r(xDe," (MT5 model)"),xDe.forEach(t),Ryr=i(Ne),U3=n(Ne,"LI",{});var $De=s(U3);vCe=n($De,"STRONG",{});var lBt=s(vCe);Pyr=r(lBt,"pegasus"),lBt.forEach(t),Byr=r($De," \u2014 "),JY=n($De,"A",{href:!0});var iBt=s(JY);Nyr=r(iBt,"TFPegasusForConditionalGeneration"),iBt.forEach(t),Iyr=r($De," (Pegasus model)"),$De.forEach(t),qyr=i(Ne),J3=n(Ne,"LI",{});var kDe=s(J3);FCe=n(kDe,"STRONG",{});var dBt=s(FCe);jyr=r(dBt,"t5"),dBt.forEach(t),Dyr=r(kDe," \u2014 "),YY=n(kDe,"A",{href:!0});var cBt=s(YY);Gyr=r(cBt,"TFT5ForConditionalGeneration"),cBt.forEach(t),Oyr=r(kDe," (T5 model)"),kDe.forEach(t),Ne.forEach(t),Vyr=i(Gl),T(Y3.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),Rze=i(m),wc=n(m,"H2",{class:!0});var GWe=s(wc);K3=n(GWe,"A",{id:!0,class:!0,href:!0});var mBt=s(K3);TCe=n(mBt,"SPAN",{});var fBt=s(TCe);T(Cx.$$.fragment,fBt),fBt.forEach(t),mBt.forEach(t),Xyr=i(GWe),MCe=n(GWe,"SPAN",{});var gBt=s(MCe);zyr=r(gBt,"TFAutoModelForSequenceClassification"),gBt.forEach(t),GWe.forEach(t),Pze=i(m),lr=n(m,"DIV",{class:!0});var Ol=s(lr);T(wx.$$.fragment,Ol),Qyr=i(Ol),Ac=n(Ol,"P",{});var Hte=s(Ac);Wyr=r(Hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),KY=n(Hte,"A",{href:!0});var hBt=s(KY);Hyr=r(hBt,"from_pretrained()"),hBt.forEach(t),Uyr=r(Hte," class method or the "),ZY=n(Hte,"A",{href:!0});var uBt=s(ZY);Jyr=r(uBt,"from_config()"),uBt.forEach(t),Yyr=r(Hte,` class
method.`),Hte.forEach(t),Kyr=i(Ol),Ax=n(Ol,"P",{});var OWe=s(Ax);Zyr=r(OWe,"This class cannot be instantiated directly using "),ECe=n(OWe,"CODE",{});var pBt=s(ECe);e8r=r(pBt,"__init__()"),pBt.forEach(t),o8r=r(OWe," (throws an error)."),OWe.forEach(t),r8r=i(Ol),jt=n(Ol,"DIV",{class:!0});var bL=s(jt);T(Lx.$$.fragment,bL),t8r=i(bL),CCe=n(bL,"P",{});var _Bt=s(CCe);a8r=r(_Bt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_Bt.forEach(t),n8r=i(bL),Lc=n(bL,"P",{});var Ute=s(Lc);s8r=r(Ute,`Note:
Loading a model from its configuration file does `),wCe=n(Ute,"STRONG",{});var bBt=s(wCe);l8r=r(bBt,"not"),bBt.forEach(t),i8r=r(Ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),eK=n(Ute,"A",{href:!0});var vBt=s(eK);d8r=r(vBt,"from_pretrained()"),vBt.forEach(t),c8r=r(Ute," to load the model weights."),Ute.forEach(t),m8r=i(bL),T(Z3.$$.fragment,bL),bL.forEach(t),f8r=i(Ol),Br=n(Ol,"DIV",{class:!0});var Vl=s(Br);T(yx.$$.fragment,Vl),g8r=i(Vl),ACe=n(Vl,"P",{});var FBt=s(ACe);h8r=r(FBt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),FBt.forEach(t),u8r=i(Vl),gn=n(Vl,"P",{});var vL=s(gn);p8r=r(vL,"The model class to instantiate is selected based on the "),LCe=n(vL,"CODE",{});var TBt=s(LCe);_8r=r(TBt,"model_type"),TBt.forEach(t),b8r=r(vL,` property of the config object (either
passed as an argument or loaded from `),yCe=n(vL,"CODE",{});var MBt=s(yCe);v8r=r(MBt,"pretrained_model_name_or_path"),MBt.forEach(t),F8r=r(vL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xCe=n(vL,"CODE",{});var EBt=s(xCe);T8r=r(EBt,"pretrained_model_name_or_path"),EBt.forEach(t),M8r=r(vL,":"),vL.forEach(t),E8r=i(Vl),te=n(Vl,"UL",{});var ne=s(te);e5=n(ne,"LI",{});var SDe=s(e5);$Ce=n(SDe,"STRONG",{});var CBt=s($Ce);C8r=r(CBt,"albert"),CBt.forEach(t),w8r=r(SDe," \u2014 "),oK=n(SDe,"A",{href:!0});var wBt=s(oK);A8r=r(wBt,"TFAlbertForSequenceClassification"),wBt.forEach(t),L8r=r(SDe," (ALBERT model)"),SDe.forEach(t),y8r=i(ne),o5=n(ne,"LI",{});var RDe=s(o5);kCe=n(RDe,"STRONG",{});var ABt=s(kCe);x8r=r(ABt,"bert"),ABt.forEach(t),$8r=r(RDe," \u2014 "),rK=n(RDe,"A",{href:!0});var LBt=s(rK);k8r=r(LBt,"TFBertForSequenceClassification"),LBt.forEach(t),S8r=r(RDe," (BERT model)"),RDe.forEach(t),R8r=i(ne),r5=n(ne,"LI",{});var PDe=s(r5);SCe=n(PDe,"STRONG",{});var yBt=s(SCe);P8r=r(yBt,"camembert"),yBt.forEach(t),B8r=r(PDe," \u2014 "),tK=n(PDe,"A",{href:!0});var xBt=s(tK);N8r=r(xBt,"TFCamembertForSequenceClassification"),xBt.forEach(t),I8r=r(PDe," (CamemBERT model)"),PDe.forEach(t),q8r=i(ne),t5=n(ne,"LI",{});var BDe=s(t5);RCe=n(BDe,"STRONG",{});var $Bt=s(RCe);j8r=r($Bt,"convbert"),$Bt.forEach(t),D8r=r(BDe," \u2014 "),aK=n(BDe,"A",{href:!0});var kBt=s(aK);G8r=r(kBt,"TFConvBertForSequenceClassification"),kBt.forEach(t),O8r=r(BDe," (ConvBERT model)"),BDe.forEach(t),V8r=i(ne),a5=n(ne,"LI",{});var NDe=s(a5);PCe=n(NDe,"STRONG",{});var SBt=s(PCe);X8r=r(SBt,"ctrl"),SBt.forEach(t),z8r=r(NDe," \u2014 "),nK=n(NDe,"A",{href:!0});var RBt=s(nK);Q8r=r(RBt,"TFCTRLForSequenceClassification"),RBt.forEach(t),W8r=r(NDe," (CTRL model)"),NDe.forEach(t),H8r=i(ne),n5=n(ne,"LI",{});var IDe=s(n5);BCe=n(IDe,"STRONG",{});var PBt=s(BCe);U8r=r(PBt,"deberta"),PBt.forEach(t),J8r=r(IDe," \u2014 "),sK=n(IDe,"A",{href:!0});var BBt=s(sK);Y8r=r(BBt,"TFDebertaForSequenceClassification"),BBt.forEach(t),K8r=r(IDe," (DeBERTa model)"),IDe.forEach(t),Z8r=i(ne),s5=n(ne,"LI",{});var qDe=s(s5);NCe=n(qDe,"STRONG",{});var NBt=s(NCe);e9r=r(NBt,"deberta-v2"),NBt.forEach(t),o9r=r(qDe," \u2014 "),lK=n(qDe,"A",{href:!0});var IBt=s(lK);r9r=r(IBt,"TFDebertaV2ForSequenceClassification"),IBt.forEach(t),t9r=r(qDe," (DeBERTa-v2 model)"),qDe.forEach(t),a9r=i(ne),l5=n(ne,"LI",{});var jDe=s(l5);ICe=n(jDe,"STRONG",{});var qBt=s(ICe);n9r=r(qBt,"distilbert"),qBt.forEach(t),s9r=r(jDe," \u2014 "),iK=n(jDe,"A",{href:!0});var jBt=s(iK);l9r=r(jBt,"TFDistilBertForSequenceClassification"),jBt.forEach(t),i9r=r(jDe," (DistilBERT model)"),jDe.forEach(t),d9r=i(ne),i5=n(ne,"LI",{});var DDe=s(i5);qCe=n(DDe,"STRONG",{});var DBt=s(qCe);c9r=r(DBt,"electra"),DBt.forEach(t),m9r=r(DDe," \u2014 "),dK=n(DDe,"A",{href:!0});var GBt=s(dK);f9r=r(GBt,"TFElectraForSequenceClassification"),GBt.forEach(t),g9r=r(DDe," (ELECTRA model)"),DDe.forEach(t),h9r=i(ne),d5=n(ne,"LI",{});var GDe=s(d5);jCe=n(GDe,"STRONG",{});var OBt=s(jCe);u9r=r(OBt,"flaubert"),OBt.forEach(t),p9r=r(GDe," \u2014 "),cK=n(GDe,"A",{href:!0});var VBt=s(cK);_9r=r(VBt,"TFFlaubertForSequenceClassification"),VBt.forEach(t),b9r=r(GDe," (FlauBERT model)"),GDe.forEach(t),v9r=i(ne),c5=n(ne,"LI",{});var ODe=s(c5);DCe=n(ODe,"STRONG",{});var XBt=s(DCe);F9r=r(XBt,"funnel"),XBt.forEach(t),T9r=r(ODe," \u2014 "),mK=n(ODe,"A",{href:!0});var zBt=s(mK);M9r=r(zBt,"TFFunnelForSequenceClassification"),zBt.forEach(t),E9r=r(ODe," (Funnel Transformer model)"),ODe.forEach(t),C9r=i(ne),m5=n(ne,"LI",{});var VDe=s(m5);GCe=n(VDe,"STRONG",{});var QBt=s(GCe);w9r=r(QBt,"gpt2"),QBt.forEach(t),A9r=r(VDe," \u2014 "),fK=n(VDe,"A",{href:!0});var WBt=s(fK);L9r=r(WBt,"TFGPT2ForSequenceClassification"),WBt.forEach(t),y9r=r(VDe," (OpenAI GPT-2 model)"),VDe.forEach(t),x9r=i(ne),f5=n(ne,"LI",{});var XDe=s(f5);OCe=n(XDe,"STRONG",{});var HBt=s(OCe);$9r=r(HBt,"gptj"),HBt.forEach(t),k9r=r(XDe," \u2014 "),gK=n(XDe,"A",{href:!0});var UBt=s(gK);S9r=r(UBt,"TFGPTJForSequenceClassification"),UBt.forEach(t),R9r=r(XDe," (GPT-J model)"),XDe.forEach(t),P9r=i(ne),g5=n(ne,"LI",{});var zDe=s(g5);VCe=n(zDe,"STRONG",{});var JBt=s(VCe);B9r=r(JBt,"layoutlm"),JBt.forEach(t),N9r=r(zDe," \u2014 "),hK=n(zDe,"A",{href:!0});var YBt=s(hK);I9r=r(YBt,"TFLayoutLMForSequenceClassification"),YBt.forEach(t),q9r=r(zDe," (LayoutLM model)"),zDe.forEach(t),j9r=i(ne),h5=n(ne,"LI",{});var QDe=s(h5);XCe=n(QDe,"STRONG",{});var KBt=s(XCe);D9r=r(KBt,"longformer"),KBt.forEach(t),G9r=r(QDe," \u2014 "),uK=n(QDe,"A",{href:!0});var ZBt=s(uK);O9r=r(ZBt,"TFLongformerForSequenceClassification"),ZBt.forEach(t),V9r=r(QDe," (Longformer model)"),QDe.forEach(t),X9r=i(ne),u5=n(ne,"LI",{});var WDe=s(u5);zCe=n(WDe,"STRONG",{});var eNt=s(zCe);z9r=r(eNt,"mobilebert"),eNt.forEach(t),Q9r=r(WDe," \u2014 "),pK=n(WDe,"A",{href:!0});var oNt=s(pK);W9r=r(oNt,"TFMobileBertForSequenceClassification"),oNt.forEach(t),H9r=r(WDe," (MobileBERT model)"),WDe.forEach(t),U9r=i(ne),p5=n(ne,"LI",{});var HDe=s(p5);QCe=n(HDe,"STRONG",{});var rNt=s(QCe);J9r=r(rNt,"mpnet"),rNt.forEach(t),Y9r=r(HDe," \u2014 "),_K=n(HDe,"A",{href:!0});var tNt=s(_K);K9r=r(tNt,"TFMPNetForSequenceClassification"),tNt.forEach(t),Z9r=r(HDe," (MPNet model)"),HDe.forEach(t),exr=i(ne),_5=n(ne,"LI",{});var UDe=s(_5);WCe=n(UDe,"STRONG",{});var aNt=s(WCe);oxr=r(aNt,"openai-gpt"),aNt.forEach(t),rxr=r(UDe," \u2014 "),bK=n(UDe,"A",{href:!0});var nNt=s(bK);txr=r(nNt,"TFOpenAIGPTForSequenceClassification"),nNt.forEach(t),axr=r(UDe," (OpenAI GPT model)"),UDe.forEach(t),nxr=i(ne),b5=n(ne,"LI",{});var JDe=s(b5);HCe=n(JDe,"STRONG",{});var sNt=s(HCe);sxr=r(sNt,"rembert"),sNt.forEach(t),lxr=r(JDe," \u2014 "),vK=n(JDe,"A",{href:!0});var lNt=s(vK);ixr=r(lNt,"TFRemBertForSequenceClassification"),lNt.forEach(t),dxr=r(JDe," (RemBERT model)"),JDe.forEach(t),cxr=i(ne),v5=n(ne,"LI",{});var YDe=s(v5);UCe=n(YDe,"STRONG",{});var iNt=s(UCe);mxr=r(iNt,"roberta"),iNt.forEach(t),fxr=r(YDe," \u2014 "),FK=n(YDe,"A",{href:!0});var dNt=s(FK);gxr=r(dNt,"TFRobertaForSequenceClassification"),dNt.forEach(t),hxr=r(YDe," (RoBERTa model)"),YDe.forEach(t),uxr=i(ne),F5=n(ne,"LI",{});var KDe=s(F5);JCe=n(KDe,"STRONG",{});var cNt=s(JCe);pxr=r(cNt,"roformer"),cNt.forEach(t),_xr=r(KDe," \u2014 "),TK=n(KDe,"A",{href:!0});var mNt=s(TK);bxr=r(mNt,"TFRoFormerForSequenceClassification"),mNt.forEach(t),vxr=r(KDe," (RoFormer model)"),KDe.forEach(t),Fxr=i(ne),T5=n(ne,"LI",{});var ZDe=s(T5);YCe=n(ZDe,"STRONG",{});var fNt=s(YCe);Txr=r(fNt,"tapas"),fNt.forEach(t),Mxr=r(ZDe," \u2014 "),MK=n(ZDe,"A",{href:!0});var gNt=s(MK);Exr=r(gNt,"TFTapasForSequenceClassification"),gNt.forEach(t),Cxr=r(ZDe," (TAPAS model)"),ZDe.forEach(t),wxr=i(ne),M5=n(ne,"LI",{});var eGe=s(M5);KCe=n(eGe,"STRONG",{});var hNt=s(KCe);Axr=r(hNt,"transfo-xl"),hNt.forEach(t),Lxr=r(eGe," \u2014 "),EK=n(eGe,"A",{href:!0});var uNt=s(EK);yxr=r(uNt,"TFTransfoXLForSequenceClassification"),uNt.forEach(t),xxr=r(eGe," (Transformer-XL model)"),eGe.forEach(t),$xr=i(ne),E5=n(ne,"LI",{});var oGe=s(E5);ZCe=n(oGe,"STRONG",{});var pNt=s(ZCe);kxr=r(pNt,"xlm"),pNt.forEach(t),Sxr=r(oGe," \u2014 "),CK=n(oGe,"A",{href:!0});var _Nt=s(CK);Rxr=r(_Nt,"TFXLMForSequenceClassification"),_Nt.forEach(t),Pxr=r(oGe," (XLM model)"),oGe.forEach(t),Bxr=i(ne),C5=n(ne,"LI",{});var rGe=s(C5);e3e=n(rGe,"STRONG",{});var bNt=s(e3e);Nxr=r(bNt,"xlm-roberta"),bNt.forEach(t),Ixr=r(rGe," \u2014 "),wK=n(rGe,"A",{href:!0});var vNt=s(wK);qxr=r(vNt,"TFXLMRobertaForSequenceClassification"),vNt.forEach(t),jxr=r(rGe," (XLM-RoBERTa model)"),rGe.forEach(t),Dxr=i(ne),w5=n(ne,"LI",{});var tGe=s(w5);o3e=n(tGe,"STRONG",{});var FNt=s(o3e);Gxr=r(FNt,"xlnet"),FNt.forEach(t),Oxr=r(tGe," \u2014 "),AK=n(tGe,"A",{href:!0});var TNt=s(AK);Vxr=r(TNt,"TFXLNetForSequenceClassification"),TNt.forEach(t),Xxr=r(tGe," (XLNet model)"),tGe.forEach(t),ne.forEach(t),zxr=i(Vl),T(A5.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),Bze=i(m),yc=n(m,"H2",{class:!0});var VWe=s(yc);L5=n(VWe,"A",{id:!0,class:!0,href:!0});var MNt=s(L5);r3e=n(MNt,"SPAN",{});var ENt=s(r3e);T(xx.$$.fragment,ENt),ENt.forEach(t),MNt.forEach(t),Qxr=i(VWe),t3e=n(VWe,"SPAN",{});var CNt=s(t3e);Wxr=r(CNt,"TFAutoModelForMultipleChoice"),CNt.forEach(t),VWe.forEach(t),Nze=i(m),ir=n(m,"DIV",{class:!0});var Xl=s(ir);T($x.$$.fragment,Xl),Hxr=i(Xl),xc=n(Xl,"P",{});var Jte=s(xc);Uxr=r(Jte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),LK=n(Jte,"A",{href:!0});var wNt=s(LK);Jxr=r(wNt,"from_pretrained()"),wNt.forEach(t),Yxr=r(Jte," class method or the "),yK=n(Jte,"A",{href:!0});var ANt=s(yK);Kxr=r(ANt,"from_config()"),ANt.forEach(t),Zxr=r(Jte,` class
method.`),Jte.forEach(t),e$r=i(Xl),kx=n(Xl,"P",{});var XWe=s(kx);o$r=r(XWe,"This class cannot be instantiated directly using "),a3e=n(XWe,"CODE",{});var LNt=s(a3e);r$r=r(LNt,"__init__()"),LNt.forEach(t),t$r=r(XWe," (throws an error)."),XWe.forEach(t),a$r=i(Xl),Dt=n(Xl,"DIV",{class:!0});var FL=s(Dt);T(Sx.$$.fragment,FL),n$r=i(FL),n3e=n(FL,"P",{});var yNt=s(n3e);s$r=r(yNt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),yNt.forEach(t),l$r=i(FL),$c=n(FL,"P",{});var Yte=s($c);i$r=r(Yte,`Note:
Loading a model from its configuration file does `),s3e=n(Yte,"STRONG",{});var xNt=s(s3e);d$r=r(xNt,"not"),xNt.forEach(t),c$r=r(Yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),xK=n(Yte,"A",{href:!0});var $Nt=s(xK);m$r=r($Nt,"from_pretrained()"),$Nt.forEach(t),f$r=r(Yte," to load the model weights."),Yte.forEach(t),g$r=i(FL),T(y5.$$.fragment,FL),FL.forEach(t),h$r=i(Xl),Nr=n(Xl,"DIV",{class:!0});var zl=s(Nr);T(Rx.$$.fragment,zl),u$r=i(zl),l3e=n(zl,"P",{});var kNt=s(l3e);p$r=r(kNt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),kNt.forEach(t),_$r=i(zl),hn=n(zl,"P",{});var TL=s(hn);b$r=r(TL,"The model class to instantiate is selected based on the "),i3e=n(TL,"CODE",{});var SNt=s(i3e);v$r=r(SNt,"model_type"),SNt.forEach(t),F$r=r(TL,` property of the config object (either
passed as an argument or loaded from `),d3e=n(TL,"CODE",{});var RNt=s(d3e);T$r=r(RNt,"pretrained_model_name_or_path"),RNt.forEach(t),M$r=r(TL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c3e=n(TL,"CODE",{});var PNt=s(c3e);E$r=r(PNt,"pretrained_model_name_or_path"),PNt.forEach(t),C$r=r(TL,":"),TL.forEach(t),w$r=i(zl),_e=n(zl,"UL",{});var Fe=s(_e);x5=n(Fe,"LI",{});var aGe=s(x5);m3e=n(aGe,"STRONG",{});var BNt=s(m3e);A$r=r(BNt,"albert"),BNt.forEach(t),L$r=r(aGe," \u2014 "),$K=n(aGe,"A",{href:!0});var NNt=s($K);y$r=r(NNt,"TFAlbertForMultipleChoice"),NNt.forEach(t),x$r=r(aGe," (ALBERT model)"),aGe.forEach(t),$$r=i(Fe),$5=n(Fe,"LI",{});var nGe=s($5);f3e=n(nGe,"STRONG",{});var INt=s(f3e);k$r=r(INt,"bert"),INt.forEach(t),S$r=r(nGe," \u2014 "),kK=n(nGe,"A",{href:!0});var qNt=s(kK);R$r=r(qNt,"TFBertForMultipleChoice"),qNt.forEach(t),P$r=r(nGe," (BERT model)"),nGe.forEach(t),B$r=i(Fe),k5=n(Fe,"LI",{});var sGe=s(k5);g3e=n(sGe,"STRONG",{});var jNt=s(g3e);N$r=r(jNt,"camembert"),jNt.forEach(t),I$r=r(sGe," \u2014 "),SK=n(sGe,"A",{href:!0});var DNt=s(SK);q$r=r(DNt,"TFCamembertForMultipleChoice"),DNt.forEach(t),j$r=r(sGe," (CamemBERT model)"),sGe.forEach(t),D$r=i(Fe),S5=n(Fe,"LI",{});var lGe=s(S5);h3e=n(lGe,"STRONG",{});var GNt=s(h3e);G$r=r(GNt,"convbert"),GNt.forEach(t),O$r=r(lGe," \u2014 "),RK=n(lGe,"A",{href:!0});var ONt=s(RK);V$r=r(ONt,"TFConvBertForMultipleChoice"),ONt.forEach(t),X$r=r(lGe," (ConvBERT model)"),lGe.forEach(t),z$r=i(Fe),R5=n(Fe,"LI",{});var iGe=s(R5);u3e=n(iGe,"STRONG",{});var VNt=s(u3e);Q$r=r(VNt,"distilbert"),VNt.forEach(t),W$r=r(iGe," \u2014 "),PK=n(iGe,"A",{href:!0});var XNt=s(PK);H$r=r(XNt,"TFDistilBertForMultipleChoice"),XNt.forEach(t),U$r=r(iGe," (DistilBERT model)"),iGe.forEach(t),J$r=i(Fe),P5=n(Fe,"LI",{});var dGe=s(P5);p3e=n(dGe,"STRONG",{});var zNt=s(p3e);Y$r=r(zNt,"electra"),zNt.forEach(t),K$r=r(dGe," \u2014 "),BK=n(dGe,"A",{href:!0});var QNt=s(BK);Z$r=r(QNt,"TFElectraForMultipleChoice"),QNt.forEach(t),ekr=r(dGe," (ELECTRA model)"),dGe.forEach(t),okr=i(Fe),B5=n(Fe,"LI",{});var cGe=s(B5);_3e=n(cGe,"STRONG",{});var WNt=s(_3e);rkr=r(WNt,"flaubert"),WNt.forEach(t),tkr=r(cGe," \u2014 "),NK=n(cGe,"A",{href:!0});var HNt=s(NK);akr=r(HNt,"TFFlaubertForMultipleChoice"),HNt.forEach(t),nkr=r(cGe," (FlauBERT model)"),cGe.forEach(t),skr=i(Fe),N5=n(Fe,"LI",{});var mGe=s(N5);b3e=n(mGe,"STRONG",{});var UNt=s(b3e);lkr=r(UNt,"funnel"),UNt.forEach(t),ikr=r(mGe," \u2014 "),IK=n(mGe,"A",{href:!0});var JNt=s(IK);dkr=r(JNt,"TFFunnelForMultipleChoice"),JNt.forEach(t),ckr=r(mGe," (Funnel Transformer model)"),mGe.forEach(t),mkr=i(Fe),I5=n(Fe,"LI",{});var fGe=s(I5);v3e=n(fGe,"STRONG",{});var YNt=s(v3e);fkr=r(YNt,"longformer"),YNt.forEach(t),gkr=r(fGe," \u2014 "),qK=n(fGe,"A",{href:!0});var KNt=s(qK);hkr=r(KNt,"TFLongformerForMultipleChoice"),KNt.forEach(t),ukr=r(fGe," (Longformer model)"),fGe.forEach(t),pkr=i(Fe),q5=n(Fe,"LI",{});var gGe=s(q5);F3e=n(gGe,"STRONG",{});var ZNt=s(F3e);_kr=r(ZNt,"mobilebert"),ZNt.forEach(t),bkr=r(gGe," \u2014 "),jK=n(gGe,"A",{href:!0});var eIt=s(jK);vkr=r(eIt,"TFMobileBertForMultipleChoice"),eIt.forEach(t),Fkr=r(gGe," (MobileBERT model)"),gGe.forEach(t),Tkr=i(Fe),j5=n(Fe,"LI",{});var hGe=s(j5);T3e=n(hGe,"STRONG",{});var oIt=s(T3e);Mkr=r(oIt,"mpnet"),oIt.forEach(t),Ekr=r(hGe," \u2014 "),DK=n(hGe,"A",{href:!0});var rIt=s(DK);Ckr=r(rIt,"TFMPNetForMultipleChoice"),rIt.forEach(t),wkr=r(hGe," (MPNet model)"),hGe.forEach(t),Akr=i(Fe),D5=n(Fe,"LI",{});var uGe=s(D5);M3e=n(uGe,"STRONG",{});var tIt=s(M3e);Lkr=r(tIt,"rembert"),tIt.forEach(t),ykr=r(uGe," \u2014 "),GK=n(uGe,"A",{href:!0});var aIt=s(GK);xkr=r(aIt,"TFRemBertForMultipleChoice"),aIt.forEach(t),$kr=r(uGe," (RemBERT model)"),uGe.forEach(t),kkr=i(Fe),G5=n(Fe,"LI",{});var pGe=s(G5);E3e=n(pGe,"STRONG",{});var nIt=s(E3e);Skr=r(nIt,"roberta"),nIt.forEach(t),Rkr=r(pGe," \u2014 "),OK=n(pGe,"A",{href:!0});var sIt=s(OK);Pkr=r(sIt,"TFRobertaForMultipleChoice"),sIt.forEach(t),Bkr=r(pGe," (RoBERTa model)"),pGe.forEach(t),Nkr=i(Fe),O5=n(Fe,"LI",{});var _Ge=s(O5);C3e=n(_Ge,"STRONG",{});var lIt=s(C3e);Ikr=r(lIt,"roformer"),lIt.forEach(t),qkr=r(_Ge," \u2014 "),VK=n(_Ge,"A",{href:!0});var iIt=s(VK);jkr=r(iIt,"TFRoFormerForMultipleChoice"),iIt.forEach(t),Dkr=r(_Ge," (RoFormer model)"),_Ge.forEach(t),Gkr=i(Fe),V5=n(Fe,"LI",{});var bGe=s(V5);w3e=n(bGe,"STRONG",{});var dIt=s(w3e);Okr=r(dIt,"xlm"),dIt.forEach(t),Vkr=r(bGe," \u2014 "),XK=n(bGe,"A",{href:!0});var cIt=s(XK);Xkr=r(cIt,"TFXLMForMultipleChoice"),cIt.forEach(t),zkr=r(bGe," (XLM model)"),bGe.forEach(t),Qkr=i(Fe),X5=n(Fe,"LI",{});var vGe=s(X5);A3e=n(vGe,"STRONG",{});var mIt=s(A3e);Wkr=r(mIt,"xlm-roberta"),mIt.forEach(t),Hkr=r(vGe," \u2014 "),zK=n(vGe,"A",{href:!0});var fIt=s(zK);Ukr=r(fIt,"TFXLMRobertaForMultipleChoice"),fIt.forEach(t),Jkr=r(vGe," (XLM-RoBERTa model)"),vGe.forEach(t),Ykr=i(Fe),z5=n(Fe,"LI",{});var FGe=s(z5);L3e=n(FGe,"STRONG",{});var gIt=s(L3e);Kkr=r(gIt,"xlnet"),gIt.forEach(t),Zkr=r(FGe," \u2014 "),QK=n(FGe,"A",{href:!0});var hIt=s(QK);eSr=r(hIt,"TFXLNetForMultipleChoice"),hIt.forEach(t),oSr=r(FGe," (XLNet model)"),FGe.forEach(t),Fe.forEach(t),rSr=i(zl),T(Q5.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),Ize=i(m),kc=n(m,"H2",{class:!0});var zWe=s(kc);W5=n(zWe,"A",{id:!0,class:!0,href:!0});var uIt=s(W5);y3e=n(uIt,"SPAN",{});var pIt=s(y3e);T(Px.$$.fragment,pIt),pIt.forEach(t),uIt.forEach(t),tSr=i(zWe),x3e=n(zWe,"SPAN",{});var _It=s(x3e);aSr=r(_It,"TFAutoModelForNextSentencePrediction"),_It.forEach(t),zWe.forEach(t),qze=i(m),dr=n(m,"DIV",{class:!0});var Ql=s(dr);T(Bx.$$.fragment,Ql),nSr=i(Ql),Sc=n(Ql,"P",{});var Kte=s(Sc);sSr=r(Kte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),WK=n(Kte,"A",{href:!0});var bIt=s(WK);lSr=r(bIt,"from_pretrained()"),bIt.forEach(t),iSr=r(Kte," class method or the "),HK=n(Kte,"A",{href:!0});var vIt=s(HK);dSr=r(vIt,"from_config()"),vIt.forEach(t),cSr=r(Kte,` class
method.`),Kte.forEach(t),mSr=i(Ql),Nx=n(Ql,"P",{});var QWe=s(Nx);fSr=r(QWe,"This class cannot be instantiated directly using "),$3e=n(QWe,"CODE",{});var FIt=s($3e);gSr=r(FIt,"__init__()"),FIt.forEach(t),hSr=r(QWe," (throws an error)."),QWe.forEach(t),uSr=i(Ql),Gt=n(Ql,"DIV",{class:!0});var ML=s(Gt);T(Ix.$$.fragment,ML),pSr=i(ML),k3e=n(ML,"P",{});var TIt=s(k3e);_Sr=r(TIt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),TIt.forEach(t),bSr=i(ML),Rc=n(ML,"P",{});var Zte=s(Rc);vSr=r(Zte,`Note:
Loading a model from its configuration file does `),S3e=n(Zte,"STRONG",{});var MIt=s(S3e);FSr=r(MIt,"not"),MIt.forEach(t),TSr=r(Zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),UK=n(Zte,"A",{href:!0});var EIt=s(UK);MSr=r(EIt,"from_pretrained()"),EIt.forEach(t),ESr=r(Zte," to load the model weights."),Zte.forEach(t),CSr=i(ML),T(H5.$$.fragment,ML),ML.forEach(t),wSr=i(Ql),Ir=n(Ql,"DIV",{class:!0});var Wl=s(Ir);T(qx.$$.fragment,Wl),ASr=i(Wl),R3e=n(Wl,"P",{});var CIt=s(R3e);LSr=r(CIt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),CIt.forEach(t),ySr=i(Wl),un=n(Wl,"P",{});var EL=s(un);xSr=r(EL,"The model class to instantiate is selected based on the "),P3e=n(EL,"CODE",{});var wIt=s(P3e);$Sr=r(wIt,"model_type"),wIt.forEach(t),kSr=r(EL,` property of the config object (either
passed as an argument or loaded from `),B3e=n(EL,"CODE",{});var AIt=s(B3e);SSr=r(AIt,"pretrained_model_name_or_path"),AIt.forEach(t),RSr=r(EL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N3e=n(EL,"CODE",{});var LIt=s(N3e);PSr=r(LIt,"pretrained_model_name_or_path"),LIt.forEach(t),BSr=r(EL,":"),EL.forEach(t),NSr=i(Wl),jx=n(Wl,"UL",{});var WWe=s(jx);U5=n(WWe,"LI",{});var TGe=s(U5);I3e=n(TGe,"STRONG",{});var yIt=s(I3e);ISr=r(yIt,"bert"),yIt.forEach(t),qSr=r(TGe," \u2014 "),JK=n(TGe,"A",{href:!0});var xIt=s(JK);jSr=r(xIt,"TFBertForNextSentencePrediction"),xIt.forEach(t),DSr=r(TGe," (BERT model)"),TGe.forEach(t),GSr=i(WWe),J5=n(WWe,"LI",{});var MGe=s(J5);q3e=n(MGe,"STRONG",{});var $It=s(q3e);OSr=r($It,"mobilebert"),$It.forEach(t),VSr=r(MGe," \u2014 "),YK=n(MGe,"A",{href:!0});var kIt=s(YK);XSr=r(kIt,"TFMobileBertForNextSentencePrediction"),kIt.forEach(t),zSr=r(MGe," (MobileBERT model)"),MGe.forEach(t),WWe.forEach(t),QSr=i(Wl),T(Y5.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),jze=i(m),Pc=n(m,"H2",{class:!0});var HWe=s(Pc);K5=n(HWe,"A",{id:!0,class:!0,href:!0});var SIt=s(K5);j3e=n(SIt,"SPAN",{});var RIt=s(j3e);T(Dx.$$.fragment,RIt),RIt.forEach(t),SIt.forEach(t),WSr=i(HWe),D3e=n(HWe,"SPAN",{});var PIt=s(D3e);HSr=r(PIt,"TFAutoModelForTableQuestionAnswering"),PIt.forEach(t),HWe.forEach(t),Dze=i(m),cr=n(m,"DIV",{class:!0});var Hl=s(cr);T(Gx.$$.fragment,Hl),USr=i(Hl),Bc=n(Hl,"P",{});var eae=s(Bc);JSr=r(eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),KK=n(eae,"A",{href:!0});var BIt=s(KK);YSr=r(BIt,"from_pretrained()"),BIt.forEach(t),KSr=r(eae," class method or the "),ZK=n(eae,"A",{href:!0});var NIt=s(ZK);ZSr=r(NIt,"from_config()"),NIt.forEach(t),eRr=r(eae,` class
method.`),eae.forEach(t),oRr=i(Hl),Ox=n(Hl,"P",{});var UWe=s(Ox);rRr=r(UWe,"This class cannot be instantiated directly using "),G3e=n(UWe,"CODE",{});var IIt=s(G3e);tRr=r(IIt,"__init__()"),IIt.forEach(t),aRr=r(UWe," (throws an error)."),UWe.forEach(t),nRr=i(Hl),Ot=n(Hl,"DIV",{class:!0});var CL=s(Ot);T(Vx.$$.fragment,CL),sRr=i(CL),O3e=n(CL,"P",{});var qIt=s(O3e);lRr=r(qIt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),qIt.forEach(t),iRr=i(CL),Nc=n(CL,"P",{});var oae=s(Nc);dRr=r(oae,`Note:
Loading a model from its configuration file does `),V3e=n(oae,"STRONG",{});var jIt=s(V3e);cRr=r(jIt,"not"),jIt.forEach(t),mRr=r(oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=n(oae,"A",{href:!0});var DIt=s(eZ);fRr=r(DIt,"from_pretrained()"),DIt.forEach(t),gRr=r(oae," to load the model weights."),oae.forEach(t),hRr=i(CL),T(Z5.$$.fragment,CL),CL.forEach(t),uRr=i(Hl),qr=n(Hl,"DIV",{class:!0});var Ul=s(qr);T(Xx.$$.fragment,Ul),pRr=i(Ul),X3e=n(Ul,"P",{});var GIt=s(X3e);_Rr=r(GIt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),GIt.forEach(t),bRr=i(Ul),pn=n(Ul,"P",{});var wL=s(pn);vRr=r(wL,"The model class to instantiate is selected based on the "),z3e=n(wL,"CODE",{});var OIt=s(z3e);FRr=r(OIt,"model_type"),OIt.forEach(t),TRr=r(wL,` property of the config object (either
passed as an argument or loaded from `),Q3e=n(wL,"CODE",{});var VIt=s(Q3e);MRr=r(VIt,"pretrained_model_name_or_path"),VIt.forEach(t),ERr=r(wL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W3e=n(wL,"CODE",{});var XIt=s(W3e);CRr=r(XIt,"pretrained_model_name_or_path"),XIt.forEach(t),wRr=r(wL,":"),wL.forEach(t),ARr=i(Ul),H3e=n(Ul,"UL",{});var zIt=s(H3e);e0=n(zIt,"LI",{});var EGe=s(e0);U3e=n(EGe,"STRONG",{});var QIt=s(U3e);LRr=r(QIt,"tapas"),QIt.forEach(t),yRr=r(EGe," \u2014 "),oZ=n(EGe,"A",{href:!0});var WIt=s(oZ);xRr=r(WIt,"TFTapasForQuestionAnswering"),WIt.forEach(t),$Rr=r(EGe," (TAPAS model)"),EGe.forEach(t),zIt.forEach(t),kRr=i(Ul),T(o0.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),Gze=i(m),Ic=n(m,"H2",{class:!0});var JWe=s(Ic);r0=n(JWe,"A",{id:!0,class:!0,href:!0});var HIt=s(r0);J3e=n(HIt,"SPAN",{});var UIt=s(J3e);T(zx.$$.fragment,UIt),UIt.forEach(t),HIt.forEach(t),SRr=i(JWe),Y3e=n(JWe,"SPAN",{});var JIt=s(Y3e);RRr=r(JIt,"TFAutoModelForTokenClassification"),JIt.forEach(t),JWe.forEach(t),Oze=i(m),mr=n(m,"DIV",{class:!0});var Jl=s(mr);T(Qx.$$.fragment,Jl),PRr=i(Jl),qc=n(Jl,"P",{});var rae=s(qc);BRr=r(rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rZ=n(rae,"A",{href:!0});var YIt=s(rZ);NRr=r(YIt,"from_pretrained()"),YIt.forEach(t),IRr=r(rae," class method or the "),tZ=n(rae,"A",{href:!0});var KIt=s(tZ);qRr=r(KIt,"from_config()"),KIt.forEach(t),jRr=r(rae,` class
method.`),rae.forEach(t),DRr=i(Jl),Wx=n(Jl,"P",{});var YWe=s(Wx);GRr=r(YWe,"This class cannot be instantiated directly using "),K3e=n(YWe,"CODE",{});var ZIt=s(K3e);ORr=r(ZIt,"__init__()"),ZIt.forEach(t),VRr=r(YWe," (throws an error)."),YWe.forEach(t),XRr=i(Jl),Vt=n(Jl,"DIV",{class:!0});var AL=s(Vt);T(Hx.$$.fragment,AL),zRr=i(AL),Z3e=n(AL,"P",{});var eqt=s(Z3e);QRr=r(eqt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),eqt.forEach(t),WRr=i(AL),jc=n(AL,"P",{});var tae=s(jc);HRr=r(tae,`Note:
Loading a model from its configuration file does `),e5e=n(tae,"STRONG",{});var oqt=s(e5e);URr=r(oqt,"not"),oqt.forEach(t),JRr=r(tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=n(tae,"A",{href:!0});var rqt=s(aZ);YRr=r(rqt,"from_pretrained()"),rqt.forEach(t),KRr=r(tae," to load the model weights."),tae.forEach(t),ZRr=i(AL),T(t0.$$.fragment,AL),AL.forEach(t),ePr=i(Jl),jr=n(Jl,"DIV",{class:!0});var Yl=s(jr);T(Ux.$$.fragment,Yl),oPr=i(Yl),o5e=n(Yl,"P",{});var tqt=s(o5e);rPr=r(tqt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),tqt.forEach(t),tPr=i(Yl),_n=n(Yl,"P",{});var LL=s(_n);aPr=r(LL,"The model class to instantiate is selected based on the "),r5e=n(LL,"CODE",{});var aqt=s(r5e);nPr=r(aqt,"model_type"),aqt.forEach(t),sPr=r(LL,` property of the config object (either
passed as an argument or loaded from `),t5e=n(LL,"CODE",{});var nqt=s(t5e);lPr=r(nqt,"pretrained_model_name_or_path"),nqt.forEach(t),iPr=r(LL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a5e=n(LL,"CODE",{});var sqt=s(a5e);dPr=r(sqt,"pretrained_model_name_or_path"),sqt.forEach(t),cPr=r(LL,":"),LL.forEach(t),mPr=i(Yl),de=n(Yl,"UL",{});var ge=s(de);a0=n(ge,"LI",{});var CGe=s(a0);n5e=n(CGe,"STRONG",{});var lqt=s(n5e);fPr=r(lqt,"albert"),lqt.forEach(t),gPr=r(CGe," \u2014 "),nZ=n(CGe,"A",{href:!0});var iqt=s(nZ);hPr=r(iqt,"TFAlbertForTokenClassification"),iqt.forEach(t),uPr=r(CGe," (ALBERT model)"),CGe.forEach(t),pPr=i(ge),n0=n(ge,"LI",{});var wGe=s(n0);s5e=n(wGe,"STRONG",{});var dqt=s(s5e);_Pr=r(dqt,"bert"),dqt.forEach(t),bPr=r(wGe," \u2014 "),sZ=n(wGe,"A",{href:!0});var cqt=s(sZ);vPr=r(cqt,"TFBertForTokenClassification"),cqt.forEach(t),FPr=r(wGe," (BERT model)"),wGe.forEach(t),TPr=i(ge),s0=n(ge,"LI",{});var AGe=s(s0);l5e=n(AGe,"STRONG",{});var mqt=s(l5e);MPr=r(mqt,"camembert"),mqt.forEach(t),EPr=r(AGe," \u2014 "),lZ=n(AGe,"A",{href:!0});var fqt=s(lZ);CPr=r(fqt,"TFCamembertForTokenClassification"),fqt.forEach(t),wPr=r(AGe," (CamemBERT model)"),AGe.forEach(t),APr=i(ge),l0=n(ge,"LI",{});var LGe=s(l0);i5e=n(LGe,"STRONG",{});var gqt=s(i5e);LPr=r(gqt,"convbert"),gqt.forEach(t),yPr=r(LGe," \u2014 "),iZ=n(LGe,"A",{href:!0});var hqt=s(iZ);xPr=r(hqt,"TFConvBertForTokenClassification"),hqt.forEach(t),$Pr=r(LGe," (ConvBERT model)"),LGe.forEach(t),kPr=i(ge),i0=n(ge,"LI",{});var yGe=s(i0);d5e=n(yGe,"STRONG",{});var uqt=s(d5e);SPr=r(uqt,"deberta"),uqt.forEach(t),RPr=r(yGe," \u2014 "),dZ=n(yGe,"A",{href:!0});var pqt=s(dZ);PPr=r(pqt,"TFDebertaForTokenClassification"),pqt.forEach(t),BPr=r(yGe," (DeBERTa model)"),yGe.forEach(t),NPr=i(ge),d0=n(ge,"LI",{});var xGe=s(d0);c5e=n(xGe,"STRONG",{});var _qt=s(c5e);IPr=r(_qt,"deberta-v2"),_qt.forEach(t),qPr=r(xGe," \u2014 "),cZ=n(xGe,"A",{href:!0});var bqt=s(cZ);jPr=r(bqt,"TFDebertaV2ForTokenClassification"),bqt.forEach(t),DPr=r(xGe," (DeBERTa-v2 model)"),xGe.forEach(t),GPr=i(ge),c0=n(ge,"LI",{});var $Ge=s(c0);m5e=n($Ge,"STRONG",{});var vqt=s(m5e);OPr=r(vqt,"distilbert"),vqt.forEach(t),VPr=r($Ge," \u2014 "),mZ=n($Ge,"A",{href:!0});var Fqt=s(mZ);XPr=r(Fqt,"TFDistilBertForTokenClassification"),Fqt.forEach(t),zPr=r($Ge," (DistilBERT model)"),$Ge.forEach(t),QPr=i(ge),m0=n(ge,"LI",{});var kGe=s(m0);f5e=n(kGe,"STRONG",{});var Tqt=s(f5e);WPr=r(Tqt,"electra"),Tqt.forEach(t),HPr=r(kGe," \u2014 "),fZ=n(kGe,"A",{href:!0});var Mqt=s(fZ);UPr=r(Mqt,"TFElectraForTokenClassification"),Mqt.forEach(t),JPr=r(kGe," (ELECTRA model)"),kGe.forEach(t),YPr=i(ge),f0=n(ge,"LI",{});var SGe=s(f0);g5e=n(SGe,"STRONG",{});var Eqt=s(g5e);KPr=r(Eqt,"flaubert"),Eqt.forEach(t),ZPr=r(SGe," \u2014 "),gZ=n(SGe,"A",{href:!0});var Cqt=s(gZ);eBr=r(Cqt,"TFFlaubertForTokenClassification"),Cqt.forEach(t),oBr=r(SGe," (FlauBERT model)"),SGe.forEach(t),rBr=i(ge),g0=n(ge,"LI",{});var RGe=s(g0);h5e=n(RGe,"STRONG",{});var wqt=s(h5e);tBr=r(wqt,"funnel"),wqt.forEach(t),aBr=r(RGe," \u2014 "),hZ=n(RGe,"A",{href:!0});var Aqt=s(hZ);nBr=r(Aqt,"TFFunnelForTokenClassification"),Aqt.forEach(t),sBr=r(RGe," (Funnel Transformer model)"),RGe.forEach(t),lBr=i(ge),h0=n(ge,"LI",{});var PGe=s(h0);u5e=n(PGe,"STRONG",{});var Lqt=s(u5e);iBr=r(Lqt,"layoutlm"),Lqt.forEach(t),dBr=r(PGe," \u2014 "),uZ=n(PGe,"A",{href:!0});var yqt=s(uZ);cBr=r(yqt,"TFLayoutLMForTokenClassification"),yqt.forEach(t),mBr=r(PGe," (LayoutLM model)"),PGe.forEach(t),fBr=i(ge),u0=n(ge,"LI",{});var BGe=s(u0);p5e=n(BGe,"STRONG",{});var xqt=s(p5e);gBr=r(xqt,"longformer"),xqt.forEach(t),hBr=r(BGe," \u2014 "),pZ=n(BGe,"A",{href:!0});var $qt=s(pZ);uBr=r($qt,"TFLongformerForTokenClassification"),$qt.forEach(t),pBr=r(BGe," (Longformer model)"),BGe.forEach(t),_Br=i(ge),p0=n(ge,"LI",{});var NGe=s(p0);_5e=n(NGe,"STRONG",{});var kqt=s(_5e);bBr=r(kqt,"mobilebert"),kqt.forEach(t),vBr=r(NGe," \u2014 "),_Z=n(NGe,"A",{href:!0});var Sqt=s(_Z);FBr=r(Sqt,"TFMobileBertForTokenClassification"),Sqt.forEach(t),TBr=r(NGe," (MobileBERT model)"),NGe.forEach(t),MBr=i(ge),_0=n(ge,"LI",{});var IGe=s(_0);b5e=n(IGe,"STRONG",{});var Rqt=s(b5e);EBr=r(Rqt,"mpnet"),Rqt.forEach(t),CBr=r(IGe," \u2014 "),bZ=n(IGe,"A",{href:!0});var Pqt=s(bZ);wBr=r(Pqt,"TFMPNetForTokenClassification"),Pqt.forEach(t),ABr=r(IGe," (MPNet model)"),IGe.forEach(t),LBr=i(ge),b0=n(ge,"LI",{});var qGe=s(b0);v5e=n(qGe,"STRONG",{});var Bqt=s(v5e);yBr=r(Bqt,"rembert"),Bqt.forEach(t),xBr=r(qGe," \u2014 "),vZ=n(qGe,"A",{href:!0});var Nqt=s(vZ);$Br=r(Nqt,"TFRemBertForTokenClassification"),Nqt.forEach(t),kBr=r(qGe," (RemBERT model)"),qGe.forEach(t),SBr=i(ge),v0=n(ge,"LI",{});var jGe=s(v0);F5e=n(jGe,"STRONG",{});var Iqt=s(F5e);RBr=r(Iqt,"roberta"),Iqt.forEach(t),PBr=r(jGe," \u2014 "),FZ=n(jGe,"A",{href:!0});var qqt=s(FZ);BBr=r(qqt,"TFRobertaForTokenClassification"),qqt.forEach(t),NBr=r(jGe," (RoBERTa model)"),jGe.forEach(t),IBr=i(ge),F0=n(ge,"LI",{});var DGe=s(F0);T5e=n(DGe,"STRONG",{});var jqt=s(T5e);qBr=r(jqt,"roformer"),jqt.forEach(t),jBr=r(DGe," \u2014 "),TZ=n(DGe,"A",{href:!0});var Dqt=s(TZ);DBr=r(Dqt,"TFRoFormerForTokenClassification"),Dqt.forEach(t),GBr=r(DGe," (RoFormer model)"),DGe.forEach(t),OBr=i(ge),T0=n(ge,"LI",{});var GGe=s(T0);M5e=n(GGe,"STRONG",{});var Gqt=s(M5e);VBr=r(Gqt,"xlm"),Gqt.forEach(t),XBr=r(GGe," \u2014 "),MZ=n(GGe,"A",{href:!0});var Oqt=s(MZ);zBr=r(Oqt,"TFXLMForTokenClassification"),Oqt.forEach(t),QBr=r(GGe," (XLM model)"),GGe.forEach(t),WBr=i(ge),M0=n(ge,"LI",{});var OGe=s(M0);E5e=n(OGe,"STRONG",{});var Vqt=s(E5e);HBr=r(Vqt,"xlm-roberta"),Vqt.forEach(t),UBr=r(OGe," \u2014 "),EZ=n(OGe,"A",{href:!0});var Xqt=s(EZ);JBr=r(Xqt,"TFXLMRobertaForTokenClassification"),Xqt.forEach(t),YBr=r(OGe," (XLM-RoBERTa model)"),OGe.forEach(t),KBr=i(ge),E0=n(ge,"LI",{});var VGe=s(E0);C5e=n(VGe,"STRONG",{});var zqt=s(C5e);ZBr=r(zqt,"xlnet"),zqt.forEach(t),eNr=r(VGe," \u2014 "),CZ=n(VGe,"A",{href:!0});var Qqt=s(CZ);oNr=r(Qqt,"TFXLNetForTokenClassification"),Qqt.forEach(t),rNr=r(VGe," (XLNet model)"),VGe.forEach(t),ge.forEach(t),tNr=i(Yl),T(C0.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),Vze=i(m),Dc=n(m,"H2",{class:!0});var KWe=s(Dc);w0=n(KWe,"A",{id:!0,class:!0,href:!0});var Wqt=s(w0);w5e=n(Wqt,"SPAN",{});var Hqt=s(w5e);T(Jx.$$.fragment,Hqt),Hqt.forEach(t),Wqt.forEach(t),aNr=i(KWe),A5e=n(KWe,"SPAN",{});var Uqt=s(A5e);nNr=r(Uqt,"TFAutoModelForQuestionAnswering"),Uqt.forEach(t),KWe.forEach(t),Xze=i(m),fr=n(m,"DIV",{class:!0});var Kl=s(fr);T(Yx.$$.fragment,Kl),sNr=i(Kl),Gc=n(Kl,"P",{});var aae=s(Gc);lNr=r(aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),wZ=n(aae,"A",{href:!0});var Jqt=s(wZ);iNr=r(Jqt,"from_pretrained()"),Jqt.forEach(t),dNr=r(aae," class method or the "),AZ=n(aae,"A",{href:!0});var Yqt=s(AZ);cNr=r(Yqt,"from_config()"),Yqt.forEach(t),mNr=r(aae,` class
method.`),aae.forEach(t),fNr=i(Kl),Kx=n(Kl,"P",{});var ZWe=s(Kx);gNr=r(ZWe,"This class cannot be instantiated directly using "),L5e=n(ZWe,"CODE",{});var Kqt=s(L5e);hNr=r(Kqt,"__init__()"),Kqt.forEach(t),uNr=r(ZWe," (throws an error)."),ZWe.forEach(t),pNr=i(Kl),Xt=n(Kl,"DIV",{class:!0});var yL=s(Xt);T(Zx.$$.fragment,yL),_Nr=i(yL),y5e=n(yL,"P",{});var Zqt=s(y5e);bNr=r(Zqt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Zqt.forEach(t),vNr=i(yL),Oc=n(yL,"P",{});var nae=s(Oc);FNr=r(nae,`Note:
Loading a model from its configuration file does `),x5e=n(nae,"STRONG",{});var ejt=s(x5e);TNr=r(ejt,"not"),ejt.forEach(t),MNr=r(nae,` load the model weights. It only affects the
model\u2019s configuration. Use `),LZ=n(nae,"A",{href:!0});var ojt=s(LZ);ENr=r(ojt,"from_pretrained()"),ojt.forEach(t),CNr=r(nae," to load the model weights."),nae.forEach(t),wNr=i(yL),T(A0.$$.fragment,yL),yL.forEach(t),ANr=i(Kl),Dr=n(Kl,"DIV",{class:!0});var Zl=s(Dr);T(e$.$$.fragment,Zl),LNr=i(Zl),$5e=n(Zl,"P",{});var rjt=s($5e);yNr=r(rjt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),rjt.forEach(t),xNr=i(Zl),bn=n(Zl,"P",{});var xL=s(bn);$Nr=r(xL,"The model class to instantiate is selected based on the "),k5e=n(xL,"CODE",{});var tjt=s(k5e);kNr=r(tjt,"model_type"),tjt.forEach(t),SNr=r(xL,` property of the config object (either
passed as an argument or loaded from `),S5e=n(xL,"CODE",{});var ajt=s(S5e);RNr=r(ajt,"pretrained_model_name_or_path"),ajt.forEach(t),PNr=r(xL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R5e=n(xL,"CODE",{});var njt=s(R5e);BNr=r(njt,"pretrained_model_name_or_path"),njt.forEach(t),NNr=r(xL,":"),xL.forEach(t),INr=i(Zl),ce=n(Zl,"UL",{});var he=s(ce);L0=n(he,"LI",{});var XGe=s(L0);P5e=n(XGe,"STRONG",{});var sjt=s(P5e);qNr=r(sjt,"albert"),sjt.forEach(t),jNr=r(XGe," \u2014 "),yZ=n(XGe,"A",{href:!0});var ljt=s(yZ);DNr=r(ljt,"TFAlbertForQuestionAnswering"),ljt.forEach(t),GNr=r(XGe," (ALBERT model)"),XGe.forEach(t),ONr=i(he),y0=n(he,"LI",{});var zGe=s(y0);B5e=n(zGe,"STRONG",{});var ijt=s(B5e);VNr=r(ijt,"bert"),ijt.forEach(t),XNr=r(zGe," \u2014 "),xZ=n(zGe,"A",{href:!0});var djt=s(xZ);zNr=r(djt,"TFBertForQuestionAnswering"),djt.forEach(t),QNr=r(zGe," (BERT model)"),zGe.forEach(t),WNr=i(he),x0=n(he,"LI",{});var QGe=s(x0);N5e=n(QGe,"STRONG",{});var cjt=s(N5e);HNr=r(cjt,"camembert"),cjt.forEach(t),UNr=r(QGe," \u2014 "),$Z=n(QGe,"A",{href:!0});var mjt=s($Z);JNr=r(mjt,"TFCamembertForQuestionAnswering"),mjt.forEach(t),YNr=r(QGe," (CamemBERT model)"),QGe.forEach(t),KNr=i(he),$0=n(he,"LI",{});var WGe=s($0);I5e=n(WGe,"STRONG",{});var fjt=s(I5e);ZNr=r(fjt,"convbert"),fjt.forEach(t),eIr=r(WGe," \u2014 "),kZ=n(WGe,"A",{href:!0});var gjt=s(kZ);oIr=r(gjt,"TFConvBertForQuestionAnswering"),gjt.forEach(t),rIr=r(WGe," (ConvBERT model)"),WGe.forEach(t),tIr=i(he),k0=n(he,"LI",{});var HGe=s(k0);q5e=n(HGe,"STRONG",{});var hjt=s(q5e);aIr=r(hjt,"deberta"),hjt.forEach(t),nIr=r(HGe," \u2014 "),SZ=n(HGe,"A",{href:!0});var ujt=s(SZ);sIr=r(ujt,"TFDebertaForQuestionAnswering"),ujt.forEach(t),lIr=r(HGe," (DeBERTa model)"),HGe.forEach(t),iIr=i(he),S0=n(he,"LI",{});var UGe=s(S0);j5e=n(UGe,"STRONG",{});var pjt=s(j5e);dIr=r(pjt,"deberta-v2"),pjt.forEach(t),cIr=r(UGe," \u2014 "),RZ=n(UGe,"A",{href:!0});var _jt=s(RZ);mIr=r(_jt,"TFDebertaV2ForQuestionAnswering"),_jt.forEach(t),fIr=r(UGe," (DeBERTa-v2 model)"),UGe.forEach(t),gIr=i(he),R0=n(he,"LI",{});var JGe=s(R0);D5e=n(JGe,"STRONG",{});var bjt=s(D5e);hIr=r(bjt,"distilbert"),bjt.forEach(t),uIr=r(JGe," \u2014 "),PZ=n(JGe,"A",{href:!0});var vjt=s(PZ);pIr=r(vjt,"TFDistilBertForQuestionAnswering"),vjt.forEach(t),_Ir=r(JGe," (DistilBERT model)"),JGe.forEach(t),bIr=i(he),P0=n(he,"LI",{});var YGe=s(P0);G5e=n(YGe,"STRONG",{});var Fjt=s(G5e);vIr=r(Fjt,"electra"),Fjt.forEach(t),FIr=r(YGe," \u2014 "),BZ=n(YGe,"A",{href:!0});var Tjt=s(BZ);TIr=r(Tjt,"TFElectraForQuestionAnswering"),Tjt.forEach(t),MIr=r(YGe," (ELECTRA model)"),YGe.forEach(t),EIr=i(he),B0=n(he,"LI",{});var KGe=s(B0);O5e=n(KGe,"STRONG",{});var Mjt=s(O5e);CIr=r(Mjt,"flaubert"),Mjt.forEach(t),wIr=r(KGe," \u2014 "),NZ=n(KGe,"A",{href:!0});var Ejt=s(NZ);AIr=r(Ejt,"TFFlaubertForQuestionAnsweringSimple"),Ejt.forEach(t),LIr=r(KGe," (FlauBERT model)"),KGe.forEach(t),yIr=i(he),N0=n(he,"LI",{});var ZGe=s(N0);V5e=n(ZGe,"STRONG",{});var Cjt=s(V5e);xIr=r(Cjt,"funnel"),Cjt.forEach(t),$Ir=r(ZGe," \u2014 "),IZ=n(ZGe,"A",{href:!0});var wjt=s(IZ);kIr=r(wjt,"TFFunnelForQuestionAnswering"),wjt.forEach(t),SIr=r(ZGe," (Funnel Transformer model)"),ZGe.forEach(t),RIr=i(he),I0=n(he,"LI",{});var eOe=s(I0);X5e=n(eOe,"STRONG",{});var Ajt=s(X5e);PIr=r(Ajt,"gptj"),Ajt.forEach(t),BIr=r(eOe," \u2014 "),qZ=n(eOe,"A",{href:!0});var Ljt=s(qZ);NIr=r(Ljt,"TFGPTJForQuestionAnswering"),Ljt.forEach(t),IIr=r(eOe," (GPT-J model)"),eOe.forEach(t),qIr=i(he),q0=n(he,"LI",{});var oOe=s(q0);z5e=n(oOe,"STRONG",{});var yjt=s(z5e);jIr=r(yjt,"longformer"),yjt.forEach(t),DIr=r(oOe," \u2014 "),jZ=n(oOe,"A",{href:!0});var xjt=s(jZ);GIr=r(xjt,"TFLongformerForQuestionAnswering"),xjt.forEach(t),OIr=r(oOe," (Longformer model)"),oOe.forEach(t),VIr=i(he),j0=n(he,"LI",{});var rOe=s(j0);Q5e=n(rOe,"STRONG",{});var $jt=s(Q5e);XIr=r($jt,"mobilebert"),$jt.forEach(t),zIr=r(rOe," \u2014 "),DZ=n(rOe,"A",{href:!0});var kjt=s(DZ);QIr=r(kjt,"TFMobileBertForQuestionAnswering"),kjt.forEach(t),WIr=r(rOe," (MobileBERT model)"),rOe.forEach(t),HIr=i(he),D0=n(he,"LI",{});var tOe=s(D0);W5e=n(tOe,"STRONG",{});var Sjt=s(W5e);UIr=r(Sjt,"mpnet"),Sjt.forEach(t),JIr=r(tOe," \u2014 "),GZ=n(tOe,"A",{href:!0});var Rjt=s(GZ);YIr=r(Rjt,"TFMPNetForQuestionAnswering"),Rjt.forEach(t),KIr=r(tOe," (MPNet model)"),tOe.forEach(t),ZIr=i(he),G0=n(he,"LI",{});var aOe=s(G0);H5e=n(aOe,"STRONG",{});var Pjt=s(H5e);eqr=r(Pjt,"rembert"),Pjt.forEach(t),oqr=r(aOe," \u2014 "),OZ=n(aOe,"A",{href:!0});var Bjt=s(OZ);rqr=r(Bjt,"TFRemBertForQuestionAnswering"),Bjt.forEach(t),tqr=r(aOe," (RemBERT model)"),aOe.forEach(t),aqr=i(he),O0=n(he,"LI",{});var nOe=s(O0);U5e=n(nOe,"STRONG",{});var Njt=s(U5e);nqr=r(Njt,"roberta"),Njt.forEach(t),sqr=r(nOe," \u2014 "),VZ=n(nOe,"A",{href:!0});var Ijt=s(VZ);lqr=r(Ijt,"TFRobertaForQuestionAnswering"),Ijt.forEach(t),iqr=r(nOe," (RoBERTa model)"),nOe.forEach(t),dqr=i(he),V0=n(he,"LI",{});var sOe=s(V0);J5e=n(sOe,"STRONG",{});var qjt=s(J5e);cqr=r(qjt,"roformer"),qjt.forEach(t),mqr=r(sOe," \u2014 "),XZ=n(sOe,"A",{href:!0});var jjt=s(XZ);fqr=r(jjt,"TFRoFormerForQuestionAnswering"),jjt.forEach(t),gqr=r(sOe," (RoFormer model)"),sOe.forEach(t),hqr=i(he),X0=n(he,"LI",{});var lOe=s(X0);Y5e=n(lOe,"STRONG",{});var Djt=s(Y5e);uqr=r(Djt,"xlm"),Djt.forEach(t),pqr=r(lOe," \u2014 "),zZ=n(lOe,"A",{href:!0});var Gjt=s(zZ);_qr=r(Gjt,"TFXLMForQuestionAnsweringSimple"),Gjt.forEach(t),bqr=r(lOe," (XLM model)"),lOe.forEach(t),vqr=i(he),z0=n(he,"LI",{});var iOe=s(z0);K5e=n(iOe,"STRONG",{});var Ojt=s(K5e);Fqr=r(Ojt,"xlm-roberta"),Ojt.forEach(t),Tqr=r(iOe," \u2014 "),QZ=n(iOe,"A",{href:!0});var Vjt=s(QZ);Mqr=r(Vjt,"TFXLMRobertaForQuestionAnswering"),Vjt.forEach(t),Eqr=r(iOe," (XLM-RoBERTa model)"),iOe.forEach(t),Cqr=i(he),Q0=n(he,"LI",{});var dOe=s(Q0);Z5e=n(dOe,"STRONG",{});var Xjt=s(Z5e);wqr=r(Xjt,"xlnet"),Xjt.forEach(t),Aqr=r(dOe," \u2014 "),WZ=n(dOe,"A",{href:!0});var zjt=s(WZ);Lqr=r(zjt,"TFXLNetForQuestionAnsweringSimple"),zjt.forEach(t),yqr=r(dOe," (XLNet model)"),dOe.forEach(t),he.forEach(t),xqr=i(Zl),T(W0.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),zze=i(m),Vc=n(m,"H2",{class:!0});var eHe=s(Vc);H0=n(eHe,"A",{id:!0,class:!0,href:!0});var Qjt=s(H0);e0e=n(Qjt,"SPAN",{});var Wjt=s(e0e);T(o$.$$.fragment,Wjt),Wjt.forEach(t),Qjt.forEach(t),$qr=i(eHe),o0e=n(eHe,"SPAN",{});var Hjt=s(o0e);kqr=r(Hjt,"TFAutoModelForVision2Seq"),Hjt.forEach(t),eHe.forEach(t),Qze=i(m),gr=n(m,"DIV",{class:!0});var ei=s(gr);T(r$.$$.fragment,ei),Sqr=i(ei),Xc=n(ei,"P",{});var sae=s(Xc);Rqr=r(sae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),HZ=n(sae,"A",{href:!0});var Ujt=s(HZ);Pqr=r(Ujt,"from_pretrained()"),Ujt.forEach(t),Bqr=r(sae," class method or the "),UZ=n(sae,"A",{href:!0});var Jjt=s(UZ);Nqr=r(Jjt,"from_config()"),Jjt.forEach(t),Iqr=r(sae,` class
method.`),sae.forEach(t),qqr=i(ei),t$=n(ei,"P",{});var oHe=s(t$);jqr=r(oHe,"This class cannot be instantiated directly using "),r0e=n(oHe,"CODE",{});var Yjt=s(r0e);Dqr=r(Yjt,"__init__()"),Yjt.forEach(t),Gqr=r(oHe," (throws an error)."),oHe.forEach(t),Oqr=i(ei),zt=n(ei,"DIV",{class:!0});var $L=s(zt);T(a$.$$.fragment,$L),Vqr=i($L),t0e=n($L,"P",{});var Kjt=s(t0e);Xqr=r(Kjt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Kjt.forEach(t),zqr=i($L),zc=n($L,"P",{});var lae=s(zc);Qqr=r(lae,`Note:
Loading a model from its configuration file does `),a0e=n(lae,"STRONG",{});var Zjt=s(a0e);Wqr=r(Zjt,"not"),Zjt.forEach(t),Hqr=r(lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),JZ=n(lae,"A",{href:!0});var eDt=s(JZ);Uqr=r(eDt,"from_pretrained()"),eDt.forEach(t),Jqr=r(lae," to load the model weights."),lae.forEach(t),Yqr=i($L),T(U0.$$.fragment,$L),$L.forEach(t),Kqr=i(ei),Gr=n(ei,"DIV",{class:!0});var oi=s(Gr);T(n$.$$.fragment,oi),Zqr=i(oi),n0e=n(oi,"P",{});var oDt=s(n0e);ejr=r(oDt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),oDt.forEach(t),ojr=i(oi),vn=n(oi,"P",{});var kL=s(vn);rjr=r(kL,"The model class to instantiate is selected based on the "),s0e=n(kL,"CODE",{});var rDt=s(s0e);tjr=r(rDt,"model_type"),rDt.forEach(t),ajr=r(kL,` property of the config object (either
passed as an argument or loaded from `),l0e=n(kL,"CODE",{});var tDt=s(l0e);njr=r(tDt,"pretrained_model_name_or_path"),tDt.forEach(t),sjr=r(kL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i0e=n(kL,"CODE",{});var aDt=s(i0e);ljr=r(aDt,"pretrained_model_name_or_path"),aDt.forEach(t),ijr=r(kL,":"),kL.forEach(t),djr=i(oi),d0e=n(oi,"UL",{});var nDt=s(d0e);J0=n(nDt,"LI",{});var cOe=s(J0);c0e=n(cOe,"STRONG",{});var sDt=s(c0e);cjr=r(sDt,"vision-encoder-decoder"),sDt.forEach(t),mjr=r(cOe," \u2014 "),YZ=n(cOe,"A",{href:!0});var lDt=s(YZ);fjr=r(lDt,"TFVisionEncoderDecoderModel"),lDt.forEach(t),gjr=r(cOe," (Vision Encoder decoder model)"),cOe.forEach(t),nDt.forEach(t),hjr=i(oi),T(Y0.$$.fragment,oi),oi.forEach(t),ei.forEach(t),Wze=i(m),Qc=n(m,"H2",{class:!0});var rHe=s(Qc);K0=n(rHe,"A",{id:!0,class:!0,href:!0});var iDt=s(K0);m0e=n(iDt,"SPAN",{});var dDt=s(m0e);T(s$.$$.fragment,dDt),dDt.forEach(t),iDt.forEach(t),ujr=i(rHe),f0e=n(rHe,"SPAN",{});var cDt=s(f0e);pjr=r(cDt,"TFAutoModelForSpeechSeq2Seq"),cDt.forEach(t),rHe.forEach(t),Hze=i(m),hr=n(m,"DIV",{class:!0});var ri=s(hr);T(l$.$$.fragment,ri),_jr=i(ri),Wc=n(ri,"P",{});var iae=s(Wc);bjr=r(iae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),KZ=n(iae,"A",{href:!0});var mDt=s(KZ);vjr=r(mDt,"from_pretrained()"),mDt.forEach(t),Fjr=r(iae," class method or the "),ZZ=n(iae,"A",{href:!0});var fDt=s(ZZ);Tjr=r(fDt,"from_config()"),fDt.forEach(t),Mjr=r(iae,` class
method.`),iae.forEach(t),Ejr=i(ri),i$=n(ri,"P",{});var tHe=s(i$);Cjr=r(tHe,"This class cannot be instantiated directly using "),g0e=n(tHe,"CODE",{});var gDt=s(g0e);wjr=r(gDt,"__init__()"),gDt.forEach(t),Ajr=r(tHe," (throws an error)."),tHe.forEach(t),Ljr=i(ri),Qt=n(ri,"DIV",{class:!0});var SL=s(Qt);T(d$.$$.fragment,SL),yjr=i(SL),h0e=n(SL,"P",{});var hDt=s(h0e);xjr=r(hDt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),hDt.forEach(t),$jr=i(SL),Hc=n(SL,"P",{});var dae=s(Hc);kjr=r(dae,`Note:
Loading a model from its configuration file does `),u0e=n(dae,"STRONG",{});var uDt=s(u0e);Sjr=r(uDt,"not"),uDt.forEach(t),Rjr=r(dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),eee=n(dae,"A",{href:!0});var pDt=s(eee);Pjr=r(pDt,"from_pretrained()"),pDt.forEach(t),Bjr=r(dae," to load the model weights."),dae.forEach(t),Njr=i(SL),T(Z0.$$.fragment,SL),SL.forEach(t),Ijr=i(ri),Or=n(ri,"DIV",{class:!0});var ti=s(Or);T(c$.$$.fragment,ti),qjr=i(ti),p0e=n(ti,"P",{});var _Dt=s(p0e);jjr=r(_Dt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),_Dt.forEach(t),Djr=i(ti),Fn=n(ti,"P",{});var RL=s(Fn);Gjr=r(RL,"The model class to instantiate is selected based on the "),_0e=n(RL,"CODE",{});var bDt=s(_0e);Ojr=r(bDt,"model_type"),bDt.forEach(t),Vjr=r(RL,` property of the config object (either
passed as an argument or loaded from `),b0e=n(RL,"CODE",{});var vDt=s(b0e);Xjr=r(vDt,"pretrained_model_name_or_path"),vDt.forEach(t),zjr=r(RL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v0e=n(RL,"CODE",{});var FDt=s(v0e);Qjr=r(FDt,"pretrained_model_name_or_path"),FDt.forEach(t),Wjr=r(RL,":"),RL.forEach(t),Hjr=i(ti),F0e=n(ti,"UL",{});var TDt=s(F0e);ew=n(TDt,"LI",{});var mOe=s(ew);T0e=n(mOe,"STRONG",{});var MDt=s(T0e);Ujr=r(MDt,"speech_to_text"),MDt.forEach(t),Jjr=r(mOe," \u2014 "),oee=n(mOe,"A",{href:!0});var EDt=s(oee);Yjr=r(EDt,"TFSpeech2TextForConditionalGeneration"),EDt.forEach(t),Kjr=r(mOe," (Speech2Text model)"),mOe.forEach(t),TDt.forEach(t),Zjr=i(ti),T(ow.$$.fragment,ti),ti.forEach(t),ri.forEach(t),Uze=i(m),Uc=n(m,"H2",{class:!0});var aHe=s(Uc);rw=n(aHe,"A",{id:!0,class:!0,href:!0});var CDt=s(rw);M0e=n(CDt,"SPAN",{});var wDt=s(M0e);T(m$.$$.fragment,wDt),wDt.forEach(t),CDt.forEach(t),eDr=i(aHe),E0e=n(aHe,"SPAN",{});var ADt=s(E0e);oDr=r(ADt,"FlaxAutoModel"),ADt.forEach(t),aHe.forEach(t),Jze=i(m),ur=n(m,"DIV",{class:!0});var ai=s(ur);T(f$.$$.fragment,ai),rDr=i(ai),Jc=n(ai,"P",{});var cae=s(Jc);tDr=r(cae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ree=n(cae,"A",{href:!0});var LDt=s(ree);aDr=r(LDt,"from_pretrained()"),LDt.forEach(t),nDr=r(cae," class method or the "),tee=n(cae,"A",{href:!0});var yDt=s(tee);sDr=r(yDt,"from_config()"),yDt.forEach(t),lDr=r(cae,` class
method.`),cae.forEach(t),iDr=i(ai),g$=n(ai,"P",{});var nHe=s(g$);dDr=r(nHe,"This class cannot be instantiated directly using "),C0e=n(nHe,"CODE",{});var xDt=s(C0e);cDr=r(xDt,"__init__()"),xDt.forEach(t),mDr=r(nHe," (throws an error)."),nHe.forEach(t),fDr=i(ai),Wt=n(ai,"DIV",{class:!0});var PL=s(Wt);T(h$.$$.fragment,PL),gDr=i(PL),w0e=n(PL,"P",{});var $Dt=s(w0e);hDr=r($Dt,"Instantiates one of the base model classes of the library from a configuration."),$Dt.forEach(t),uDr=i(PL),Yc=n(PL,"P",{});var mae=s(Yc);pDr=r(mae,`Note:
Loading a model from its configuration file does `),A0e=n(mae,"STRONG",{});var kDt=s(A0e);_Dr=r(kDt,"not"),kDt.forEach(t),bDr=r(mae,` load the model weights. It only affects the
model\u2019s configuration. Use `),aee=n(mae,"A",{href:!0});var SDt=s(aee);vDr=r(SDt,"from_pretrained()"),SDt.forEach(t),FDr=r(mae," to load the model weights."),mae.forEach(t),TDr=i(PL),T(tw.$$.fragment,PL),PL.forEach(t),MDr=i(ai),Vr=n(ai,"DIV",{class:!0});var ni=s(Vr);T(u$.$$.fragment,ni),EDr=i(ni),L0e=n(ni,"P",{});var RDt=s(L0e);CDr=r(RDt,"Instantiate one of the base model classes of the library from a pretrained model."),RDt.forEach(t),wDr=i(ni),Tn=n(ni,"P",{});var BL=s(Tn);ADr=r(BL,"The model class to instantiate is selected based on the "),y0e=n(BL,"CODE",{});var PDt=s(y0e);LDr=r(PDt,"model_type"),PDt.forEach(t),yDr=r(BL,` property of the config object (either
passed as an argument or loaded from `),x0e=n(BL,"CODE",{});var BDt=s(x0e);xDr=r(BDt,"pretrained_model_name_or_path"),BDt.forEach(t),$Dr=r(BL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$0e=n(BL,"CODE",{});var NDt=s($0e);kDr=r(NDt,"pretrained_model_name_or_path"),NDt.forEach(t),SDr=r(BL,":"),BL.forEach(t),RDr=i(ni),oe=n(ni,"UL",{});var ae=s(oe);aw=n(ae,"LI",{});var fOe=s(aw);k0e=n(fOe,"STRONG",{});var IDt=s(k0e);PDr=r(IDt,"albert"),IDt.forEach(t),BDr=r(fOe," \u2014 "),nee=n(fOe,"A",{href:!0});var qDt=s(nee);NDr=r(qDt,"FlaxAlbertModel"),qDt.forEach(t),IDr=r(fOe," (ALBERT model)"),fOe.forEach(t),qDr=i(ae),nw=n(ae,"LI",{});var gOe=s(nw);S0e=n(gOe,"STRONG",{});var jDt=s(S0e);jDr=r(jDt,"bart"),jDt.forEach(t),DDr=r(gOe," \u2014 "),see=n(gOe,"A",{href:!0});var DDt=s(see);GDr=r(DDt,"FlaxBartModel"),DDt.forEach(t),ODr=r(gOe," (BART model)"),gOe.forEach(t),VDr=i(ae),sw=n(ae,"LI",{});var hOe=s(sw);R0e=n(hOe,"STRONG",{});var GDt=s(R0e);XDr=r(GDt,"beit"),GDt.forEach(t),zDr=r(hOe," \u2014 "),lee=n(hOe,"A",{href:!0});var ODt=s(lee);QDr=r(ODt,"FlaxBeitModel"),ODt.forEach(t),WDr=r(hOe," (BEiT model)"),hOe.forEach(t),HDr=i(ae),lw=n(ae,"LI",{});var uOe=s(lw);P0e=n(uOe,"STRONG",{});var VDt=s(P0e);UDr=r(VDt,"bert"),VDt.forEach(t),JDr=r(uOe," \u2014 "),iee=n(uOe,"A",{href:!0});var XDt=s(iee);YDr=r(XDt,"FlaxBertModel"),XDt.forEach(t),KDr=r(uOe," (BERT model)"),uOe.forEach(t),ZDr=i(ae),iw=n(ae,"LI",{});var pOe=s(iw);B0e=n(pOe,"STRONG",{});var zDt=s(B0e);eGr=r(zDt,"big_bird"),zDt.forEach(t),oGr=r(pOe," \u2014 "),dee=n(pOe,"A",{href:!0});var QDt=s(dee);rGr=r(QDt,"FlaxBigBirdModel"),QDt.forEach(t),tGr=r(pOe," (BigBird model)"),pOe.forEach(t),aGr=i(ae),dw=n(ae,"LI",{});var _Oe=s(dw);N0e=n(_Oe,"STRONG",{});var WDt=s(N0e);nGr=r(WDt,"blenderbot"),WDt.forEach(t),sGr=r(_Oe," \u2014 "),cee=n(_Oe,"A",{href:!0});var HDt=s(cee);lGr=r(HDt,"FlaxBlenderbotModel"),HDt.forEach(t),iGr=r(_Oe," (Blenderbot model)"),_Oe.forEach(t),dGr=i(ae),cw=n(ae,"LI",{});var bOe=s(cw);I0e=n(bOe,"STRONG",{});var UDt=s(I0e);cGr=r(UDt,"blenderbot-small"),UDt.forEach(t),mGr=r(bOe," \u2014 "),mee=n(bOe,"A",{href:!0});var JDt=s(mee);fGr=r(JDt,"FlaxBlenderbotSmallModel"),JDt.forEach(t),gGr=r(bOe," (BlenderbotSmall model)"),bOe.forEach(t),hGr=i(ae),mw=n(ae,"LI",{});var vOe=s(mw);q0e=n(vOe,"STRONG",{});var YDt=s(q0e);uGr=r(YDt,"clip"),YDt.forEach(t),pGr=r(vOe," \u2014 "),fee=n(vOe,"A",{href:!0});var KDt=s(fee);_Gr=r(KDt,"FlaxCLIPModel"),KDt.forEach(t),bGr=r(vOe," (CLIP model)"),vOe.forEach(t),vGr=i(ae),fw=n(ae,"LI",{});var FOe=s(fw);j0e=n(FOe,"STRONG",{});var ZDt=s(j0e);FGr=r(ZDt,"distilbert"),ZDt.forEach(t),TGr=r(FOe," \u2014 "),gee=n(FOe,"A",{href:!0});var eGt=s(gee);MGr=r(eGt,"FlaxDistilBertModel"),eGt.forEach(t),EGr=r(FOe," (DistilBERT model)"),FOe.forEach(t),CGr=i(ae),gw=n(ae,"LI",{});var TOe=s(gw);D0e=n(TOe,"STRONG",{});var oGt=s(D0e);wGr=r(oGt,"electra"),oGt.forEach(t),AGr=r(TOe," \u2014 "),hee=n(TOe,"A",{href:!0});var rGt=s(hee);LGr=r(rGt,"FlaxElectraModel"),rGt.forEach(t),yGr=r(TOe," (ELECTRA model)"),TOe.forEach(t),xGr=i(ae),hw=n(ae,"LI",{});var MOe=s(hw);G0e=n(MOe,"STRONG",{});var tGt=s(G0e);$Gr=r(tGt,"gpt2"),tGt.forEach(t),kGr=r(MOe," \u2014 "),uee=n(MOe,"A",{href:!0});var aGt=s(uee);SGr=r(aGt,"FlaxGPT2Model"),aGt.forEach(t),RGr=r(MOe," (OpenAI GPT-2 model)"),MOe.forEach(t),PGr=i(ae),uw=n(ae,"LI",{});var EOe=s(uw);O0e=n(EOe,"STRONG",{});var nGt=s(O0e);BGr=r(nGt,"gpt_neo"),nGt.forEach(t),NGr=r(EOe," \u2014 "),pee=n(EOe,"A",{href:!0});var sGt=s(pee);IGr=r(sGt,"FlaxGPTNeoModel"),sGt.forEach(t),qGr=r(EOe," (GPT Neo model)"),EOe.forEach(t),jGr=i(ae),pw=n(ae,"LI",{});var COe=s(pw);V0e=n(COe,"STRONG",{});var lGt=s(V0e);DGr=r(lGt,"gptj"),lGt.forEach(t),GGr=r(COe," \u2014 "),_ee=n(COe,"A",{href:!0});var iGt=s(_ee);OGr=r(iGt,"FlaxGPTJModel"),iGt.forEach(t),VGr=r(COe," (GPT-J model)"),COe.forEach(t),XGr=i(ae),_w=n(ae,"LI",{});var wOe=s(_w);X0e=n(wOe,"STRONG",{});var dGt=s(X0e);zGr=r(dGt,"longt5"),dGt.forEach(t),QGr=r(wOe," \u2014 "),bee=n(wOe,"A",{href:!0});var cGt=s(bee);WGr=r(cGt,"FlaxLongT5Model"),cGt.forEach(t),HGr=r(wOe," (LongT5 model)"),wOe.forEach(t),UGr=i(ae),bw=n(ae,"LI",{});var AOe=s(bw);z0e=n(AOe,"STRONG",{});var mGt=s(z0e);JGr=r(mGt,"marian"),mGt.forEach(t),YGr=r(AOe," \u2014 "),vee=n(AOe,"A",{href:!0});var fGt=s(vee);KGr=r(fGt,"FlaxMarianModel"),fGt.forEach(t),ZGr=r(AOe," (Marian model)"),AOe.forEach(t),eOr=i(ae),vw=n(ae,"LI",{});var LOe=s(vw);Q0e=n(LOe,"STRONG",{});var gGt=s(Q0e);oOr=r(gGt,"mbart"),gGt.forEach(t),rOr=r(LOe," \u2014 "),Fee=n(LOe,"A",{href:!0});var hGt=s(Fee);tOr=r(hGt,"FlaxMBartModel"),hGt.forEach(t),aOr=r(LOe," (mBART model)"),LOe.forEach(t),nOr=i(ae),Fw=n(ae,"LI",{});var yOe=s(Fw);W0e=n(yOe,"STRONG",{});var uGt=s(W0e);sOr=r(uGt,"mt5"),uGt.forEach(t),lOr=r(yOe," \u2014 "),Tee=n(yOe,"A",{href:!0});var pGt=s(Tee);iOr=r(pGt,"FlaxMT5Model"),pGt.forEach(t),dOr=r(yOe," (MT5 model)"),yOe.forEach(t),cOr=i(ae),Tw=n(ae,"LI",{});var xOe=s(Tw);H0e=n(xOe,"STRONG",{});var _Gt=s(H0e);mOr=r(_Gt,"opt"),_Gt.forEach(t),fOr=r(xOe," \u2014 "),Mee=n(xOe,"A",{href:!0});var bGt=s(Mee);gOr=r(bGt,"FlaxOPTModel"),bGt.forEach(t),hOr=r(xOe," (OPT model)"),xOe.forEach(t),uOr=i(ae),Mw=n(ae,"LI",{});var $Oe=s(Mw);U0e=n($Oe,"STRONG",{});var vGt=s(U0e);pOr=r(vGt,"pegasus"),vGt.forEach(t),_Or=r($Oe," \u2014 "),Eee=n($Oe,"A",{href:!0});var FGt=s(Eee);bOr=r(FGt,"FlaxPegasusModel"),FGt.forEach(t),vOr=r($Oe," (Pegasus model)"),$Oe.forEach(t),FOr=i(ae),Ew=n(ae,"LI",{});var kOe=s(Ew);J0e=n(kOe,"STRONG",{});var TGt=s(J0e);TOr=r(TGt,"roberta"),TGt.forEach(t),MOr=r(kOe," \u2014 "),Cee=n(kOe,"A",{href:!0});var MGt=s(Cee);EOr=r(MGt,"FlaxRobertaModel"),MGt.forEach(t),COr=r(kOe," (RoBERTa model)"),kOe.forEach(t),wOr=i(ae),Cw=n(ae,"LI",{});var SOe=s(Cw);Y0e=n(SOe,"STRONG",{});var EGt=s(Y0e);AOr=r(EGt,"roformer"),EGt.forEach(t),LOr=r(SOe," \u2014 "),wee=n(SOe,"A",{href:!0});var CGt=s(wee);yOr=r(CGt,"FlaxRoFormerModel"),CGt.forEach(t),xOr=r(SOe," (RoFormer model)"),SOe.forEach(t),$Or=i(ae),ww=n(ae,"LI",{});var ROe=s(ww);K0e=n(ROe,"STRONG",{});var wGt=s(K0e);kOr=r(wGt,"t5"),wGt.forEach(t),SOr=r(ROe," \u2014 "),Aee=n(ROe,"A",{href:!0});var AGt=s(Aee);ROr=r(AGt,"FlaxT5Model"),AGt.forEach(t),POr=r(ROe," (T5 model)"),ROe.forEach(t),BOr=i(ae),Aw=n(ae,"LI",{});var POe=s(Aw);Z0e=n(POe,"STRONG",{});var LGt=s(Z0e);NOr=r(LGt,"vision-text-dual-encoder"),LGt.forEach(t),IOr=r(POe," \u2014 "),Lee=n(POe,"A",{href:!0});var yGt=s(Lee);qOr=r(yGt,"FlaxVisionTextDualEncoderModel"),yGt.forEach(t),jOr=r(POe," (VisionTextDualEncoder model)"),POe.forEach(t),DOr=i(ae),Lw=n(ae,"LI",{});var BOe=s(Lw);ewe=n(BOe,"STRONG",{});var xGt=s(ewe);GOr=r(xGt,"vit"),xGt.forEach(t),OOr=r(BOe," \u2014 "),yee=n(BOe,"A",{href:!0});var $Gt=s(yee);VOr=r($Gt,"FlaxViTModel"),$Gt.forEach(t),XOr=r(BOe," (ViT model)"),BOe.forEach(t),zOr=i(ae),yw=n(ae,"LI",{});var NOe=s(yw);owe=n(NOe,"STRONG",{});var kGt=s(owe);QOr=r(kGt,"wav2vec2"),kGt.forEach(t),WOr=r(NOe," \u2014 "),xee=n(NOe,"A",{href:!0});var SGt=s(xee);HOr=r(SGt,"FlaxWav2Vec2Model"),SGt.forEach(t),UOr=r(NOe," (Wav2Vec2 model)"),NOe.forEach(t),JOr=i(ae),xw=n(ae,"LI",{});var IOe=s(xw);rwe=n(IOe,"STRONG",{});var RGt=s(rwe);YOr=r(RGt,"xglm"),RGt.forEach(t),KOr=r(IOe," \u2014 "),$ee=n(IOe,"A",{href:!0});var PGt=s($ee);ZOr=r(PGt,"FlaxXGLMModel"),PGt.forEach(t),eVr=r(IOe," (XGLM model)"),IOe.forEach(t),oVr=i(ae),$w=n(ae,"LI",{});var qOe=s($w);twe=n(qOe,"STRONG",{});var BGt=s(twe);rVr=r(BGt,"xlm-roberta"),BGt.forEach(t),tVr=r(qOe," \u2014 "),kee=n(qOe,"A",{href:!0});var NGt=s(kee);aVr=r(NGt,"FlaxXLMRobertaModel"),NGt.forEach(t),nVr=r(qOe," (XLM-RoBERTa model)"),qOe.forEach(t),ae.forEach(t),sVr=i(ni),T(kw.$$.fragment,ni),ni.forEach(t),ai.forEach(t),Yze=i(m),Kc=n(m,"H2",{class:!0});var sHe=s(Kc);Sw=n(sHe,"A",{id:!0,class:!0,href:!0});var IGt=s(Sw);awe=n(IGt,"SPAN",{});var qGt=s(awe);T(p$.$$.fragment,qGt),qGt.forEach(t),IGt.forEach(t),lVr=i(sHe),nwe=n(sHe,"SPAN",{});var jGt=s(nwe);iVr=r(jGt,"FlaxAutoModelForCausalLM"),jGt.forEach(t),sHe.forEach(t),Kze=i(m),pr=n(m,"DIV",{class:!0});var si=s(pr);T(_$.$$.fragment,si),dVr=i(si),Zc=n(si,"P",{});var fae=s(Zc);cVr=r(fae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),See=n(fae,"A",{href:!0});var DGt=s(See);mVr=r(DGt,"from_pretrained()"),DGt.forEach(t),fVr=r(fae," class method or the "),Ree=n(fae,"A",{href:!0});var GGt=s(Ree);gVr=r(GGt,"from_config()"),GGt.forEach(t),hVr=r(fae,` class
method.`),fae.forEach(t),uVr=i(si),b$=n(si,"P",{});var lHe=s(b$);pVr=r(lHe,"This class cannot be instantiated directly using "),swe=n(lHe,"CODE",{});var OGt=s(swe);_Vr=r(OGt,"__init__()"),OGt.forEach(t),bVr=r(lHe," (throws an error)."),lHe.forEach(t),vVr=i(si),Ht=n(si,"DIV",{class:!0});var NL=s(Ht);T(v$.$$.fragment,NL),FVr=i(NL),lwe=n(NL,"P",{});var VGt=s(lwe);TVr=r(VGt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),VGt.forEach(t),MVr=i(NL),em=n(NL,"P",{});var gae=s(em);EVr=r(gae,`Note:
Loading a model from its configuration file does `),iwe=n(gae,"STRONG",{});var XGt=s(iwe);CVr=r(XGt,"not"),XGt.forEach(t),wVr=r(gae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pee=n(gae,"A",{href:!0});var zGt=s(Pee);AVr=r(zGt,"from_pretrained()"),zGt.forEach(t),LVr=r(gae," to load the model weights."),gae.forEach(t),yVr=i(NL),T(Rw.$$.fragment,NL),NL.forEach(t),xVr=i(si),Xr=n(si,"DIV",{class:!0});var li=s(Xr);T(F$.$$.fragment,li),$Vr=i(li),dwe=n(li,"P",{});var QGt=s(dwe);kVr=r(QGt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),QGt.forEach(t),SVr=i(li),Mn=n(li,"P",{});var IL=s(Mn);RVr=r(IL,"The model class to instantiate is selected based on the "),cwe=n(IL,"CODE",{});var WGt=s(cwe);PVr=r(WGt,"model_type"),WGt.forEach(t),BVr=r(IL,` property of the config object (either
passed as an argument or loaded from `),mwe=n(IL,"CODE",{});var HGt=s(mwe);NVr=r(HGt,"pretrained_model_name_or_path"),HGt.forEach(t),IVr=r(IL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fwe=n(IL,"CODE",{});var UGt=s(fwe);qVr=r(UGt,"pretrained_model_name_or_path"),UGt.forEach(t),jVr=r(IL,":"),IL.forEach(t),DVr=i(li),xe=n(li,"UL",{});var Ie=s(xe);Pw=n(Ie,"LI",{});var jOe=s(Pw);gwe=n(jOe,"STRONG",{});var JGt=s(gwe);GVr=r(JGt,"bart"),JGt.forEach(t),OVr=r(jOe," \u2014 "),Bee=n(jOe,"A",{href:!0});var YGt=s(Bee);VVr=r(YGt,"FlaxBartForCausalLM"),YGt.forEach(t),XVr=r(jOe," (BART model)"),jOe.forEach(t),zVr=i(Ie),Bw=n(Ie,"LI",{});var DOe=s(Bw);hwe=n(DOe,"STRONG",{});var KGt=s(hwe);QVr=r(KGt,"bert"),KGt.forEach(t),WVr=r(DOe," \u2014 "),Nee=n(DOe,"A",{href:!0});var ZGt=s(Nee);HVr=r(ZGt,"FlaxBertForCausalLM"),ZGt.forEach(t),UVr=r(DOe," (BERT model)"),DOe.forEach(t),JVr=i(Ie),Nw=n(Ie,"LI",{});var GOe=s(Nw);uwe=n(GOe,"STRONG",{});var eOt=s(uwe);YVr=r(eOt,"big_bird"),eOt.forEach(t),KVr=r(GOe," \u2014 "),Iee=n(GOe,"A",{href:!0});var oOt=s(Iee);ZVr=r(oOt,"FlaxBigBirdForCausalLM"),oOt.forEach(t),eXr=r(GOe," (BigBird model)"),GOe.forEach(t),oXr=i(Ie),Iw=n(Ie,"LI",{});var OOe=s(Iw);pwe=n(OOe,"STRONG",{});var rOt=s(pwe);rXr=r(rOt,"electra"),rOt.forEach(t),tXr=r(OOe," \u2014 "),qee=n(OOe,"A",{href:!0});var tOt=s(qee);aXr=r(tOt,"FlaxElectraForCausalLM"),tOt.forEach(t),nXr=r(OOe," (ELECTRA model)"),OOe.forEach(t),sXr=i(Ie),qw=n(Ie,"LI",{});var VOe=s(qw);_we=n(VOe,"STRONG",{});var aOt=s(_we);lXr=r(aOt,"gpt2"),aOt.forEach(t),iXr=r(VOe," \u2014 "),jee=n(VOe,"A",{href:!0});var nOt=s(jee);dXr=r(nOt,"FlaxGPT2LMHeadModel"),nOt.forEach(t),cXr=r(VOe," (OpenAI GPT-2 model)"),VOe.forEach(t),mXr=i(Ie),jw=n(Ie,"LI",{});var XOe=s(jw);bwe=n(XOe,"STRONG",{});var sOt=s(bwe);fXr=r(sOt,"gpt_neo"),sOt.forEach(t),gXr=r(XOe," \u2014 "),Dee=n(XOe,"A",{href:!0});var lOt=s(Dee);hXr=r(lOt,"FlaxGPTNeoForCausalLM"),lOt.forEach(t),uXr=r(XOe," (GPT Neo model)"),XOe.forEach(t),pXr=i(Ie),Dw=n(Ie,"LI",{});var zOe=s(Dw);vwe=n(zOe,"STRONG",{});var iOt=s(vwe);_Xr=r(iOt,"gptj"),iOt.forEach(t),bXr=r(zOe," \u2014 "),Gee=n(zOe,"A",{href:!0});var dOt=s(Gee);vXr=r(dOt,"FlaxGPTJForCausalLM"),dOt.forEach(t),FXr=r(zOe," (GPT-J model)"),zOe.forEach(t),TXr=i(Ie),Gw=n(Ie,"LI",{});var QOe=s(Gw);Fwe=n(QOe,"STRONG",{});var cOt=s(Fwe);MXr=r(cOt,"opt"),cOt.forEach(t),EXr=r(QOe," \u2014 "),Oee=n(QOe,"A",{href:!0});var mOt=s(Oee);CXr=r(mOt,"FlaxOPTForCausalLM"),mOt.forEach(t),wXr=r(QOe," (OPT model)"),QOe.forEach(t),AXr=i(Ie),Ow=n(Ie,"LI",{});var WOe=s(Ow);Twe=n(WOe,"STRONG",{});var fOt=s(Twe);LXr=r(fOt,"roberta"),fOt.forEach(t),yXr=r(WOe," \u2014 "),Vee=n(WOe,"A",{href:!0});var gOt=s(Vee);xXr=r(gOt,"FlaxRobertaForCausalLM"),gOt.forEach(t),$Xr=r(WOe," (RoBERTa model)"),WOe.forEach(t),kXr=i(Ie),Vw=n(Ie,"LI",{});var HOe=s(Vw);Mwe=n(HOe,"STRONG",{});var hOt=s(Mwe);SXr=r(hOt,"xglm"),hOt.forEach(t),RXr=r(HOe," \u2014 "),Xee=n(HOe,"A",{href:!0});var uOt=s(Xee);PXr=r(uOt,"FlaxXGLMForCausalLM"),uOt.forEach(t),BXr=r(HOe," (XGLM model)"),HOe.forEach(t),Ie.forEach(t),NXr=i(li),T(Xw.$$.fragment,li),li.forEach(t),si.forEach(t),Zze=i(m),om=n(m,"H2",{class:!0});var iHe=s(om);zw=n(iHe,"A",{id:!0,class:!0,href:!0});var pOt=s(zw);Ewe=n(pOt,"SPAN",{});var _Ot=s(Ewe);T(T$.$$.fragment,_Ot),_Ot.forEach(t),pOt.forEach(t),IXr=i(iHe),Cwe=n(iHe,"SPAN",{});var bOt=s(Cwe);qXr=r(bOt,"FlaxAutoModelForPreTraining"),bOt.forEach(t),iHe.forEach(t),eQe=i(m),_r=n(m,"DIV",{class:!0});var ii=s(_r);T(M$.$$.fragment,ii),jXr=i(ii),rm=n(ii,"P",{});var hae=s(rm);DXr=r(hae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zee=n(hae,"A",{href:!0});var vOt=s(zee);GXr=r(vOt,"from_pretrained()"),vOt.forEach(t),OXr=r(hae," class method or the "),Qee=n(hae,"A",{href:!0});var FOt=s(Qee);VXr=r(FOt,"from_config()"),FOt.forEach(t),XXr=r(hae,` class
method.`),hae.forEach(t),zXr=i(ii),E$=n(ii,"P",{});var dHe=s(E$);QXr=r(dHe,"This class cannot be instantiated directly using "),wwe=n(dHe,"CODE",{});var TOt=s(wwe);WXr=r(TOt,"__init__()"),TOt.forEach(t),HXr=r(dHe," (throws an error)."),dHe.forEach(t),UXr=i(ii),Ut=n(ii,"DIV",{class:!0});var qL=s(Ut);T(C$.$$.fragment,qL),JXr=i(qL),Awe=n(qL,"P",{});var MOt=s(Awe);YXr=r(MOt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),MOt.forEach(t),KXr=i(qL),tm=n(qL,"P",{});var uae=s(tm);ZXr=r(uae,`Note:
Loading a model from its configuration file does `),Lwe=n(uae,"STRONG",{});var EOt=s(Lwe);ezr=r(EOt,"not"),EOt.forEach(t),ozr=r(uae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wee=n(uae,"A",{href:!0});var COt=s(Wee);rzr=r(COt,"from_pretrained()"),COt.forEach(t),tzr=r(uae," to load the model weights."),uae.forEach(t),azr=i(qL),T(Qw.$$.fragment,qL),qL.forEach(t),nzr=i(ii),zr=n(ii,"DIV",{class:!0});var di=s(zr);T(w$.$$.fragment,di),szr=i(di),ywe=n(di,"P",{});var wOt=s(ywe);lzr=r(wOt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wOt.forEach(t),izr=i(di),En=n(di,"P",{});var jL=s(En);dzr=r(jL,"The model class to instantiate is selected based on the "),xwe=n(jL,"CODE",{});var AOt=s(xwe);czr=r(AOt,"model_type"),AOt.forEach(t),mzr=r(jL,` property of the config object (either
passed as an argument or loaded from `),$we=n(jL,"CODE",{});var LOt=s($we);fzr=r(LOt,"pretrained_model_name_or_path"),LOt.forEach(t),gzr=r(jL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kwe=n(jL,"CODE",{});var yOt=s(kwe);hzr=r(yOt,"pretrained_model_name_or_path"),yOt.forEach(t),uzr=r(jL,":"),jL.forEach(t),pzr=i(di),Ee=n(di,"UL",{});var we=s(Ee);Ww=n(we,"LI",{});var UOe=s(Ww);Swe=n(UOe,"STRONG",{});var xOt=s(Swe);_zr=r(xOt,"albert"),xOt.forEach(t),bzr=r(UOe," \u2014 "),Hee=n(UOe,"A",{href:!0});var $Ot=s(Hee);vzr=r($Ot,"FlaxAlbertForPreTraining"),$Ot.forEach(t),Fzr=r(UOe," (ALBERT model)"),UOe.forEach(t),Tzr=i(we),Hw=n(we,"LI",{});var JOe=s(Hw);Rwe=n(JOe,"STRONG",{});var kOt=s(Rwe);Mzr=r(kOt,"bart"),kOt.forEach(t),Ezr=r(JOe," \u2014 "),Uee=n(JOe,"A",{href:!0});var SOt=s(Uee);Czr=r(SOt,"FlaxBartForConditionalGeneration"),SOt.forEach(t),wzr=r(JOe," (BART model)"),JOe.forEach(t),Azr=i(we),Uw=n(we,"LI",{});var YOe=s(Uw);Pwe=n(YOe,"STRONG",{});var ROt=s(Pwe);Lzr=r(ROt,"bert"),ROt.forEach(t),yzr=r(YOe," \u2014 "),Jee=n(YOe,"A",{href:!0});var POt=s(Jee);xzr=r(POt,"FlaxBertForPreTraining"),POt.forEach(t),$zr=r(YOe," (BERT model)"),YOe.forEach(t),kzr=i(we),Jw=n(we,"LI",{});var KOe=s(Jw);Bwe=n(KOe,"STRONG",{});var BOt=s(Bwe);Szr=r(BOt,"big_bird"),BOt.forEach(t),Rzr=r(KOe," \u2014 "),Yee=n(KOe,"A",{href:!0});var NOt=s(Yee);Pzr=r(NOt,"FlaxBigBirdForPreTraining"),NOt.forEach(t),Bzr=r(KOe," (BigBird model)"),KOe.forEach(t),Nzr=i(we),Yw=n(we,"LI",{});var ZOe=s(Yw);Nwe=n(ZOe,"STRONG",{});var IOt=s(Nwe);Izr=r(IOt,"electra"),IOt.forEach(t),qzr=r(ZOe," \u2014 "),Kee=n(ZOe,"A",{href:!0});var qOt=s(Kee);jzr=r(qOt,"FlaxElectraForPreTraining"),qOt.forEach(t),Dzr=r(ZOe," (ELECTRA model)"),ZOe.forEach(t),Gzr=i(we),Kw=n(we,"LI",{});var eVe=s(Kw);Iwe=n(eVe,"STRONG",{});var jOt=s(Iwe);Ozr=r(jOt,"longt5"),jOt.forEach(t),Vzr=r(eVe," \u2014 "),Zee=n(eVe,"A",{href:!0});var DOt=s(Zee);Xzr=r(DOt,"FlaxLongT5ForConditionalGeneration"),DOt.forEach(t),zzr=r(eVe," (LongT5 model)"),eVe.forEach(t),Qzr=i(we),Zw=n(we,"LI",{});var oVe=s(Zw);qwe=n(oVe,"STRONG",{});var GOt=s(qwe);Wzr=r(GOt,"mbart"),GOt.forEach(t),Hzr=r(oVe," \u2014 "),eoe=n(oVe,"A",{href:!0});var OOt=s(eoe);Uzr=r(OOt,"FlaxMBartForConditionalGeneration"),OOt.forEach(t),Jzr=r(oVe," (mBART model)"),oVe.forEach(t),Yzr=i(we),eA=n(we,"LI",{});var rVe=s(eA);jwe=n(rVe,"STRONG",{});var VOt=s(jwe);Kzr=r(VOt,"mt5"),VOt.forEach(t),Zzr=r(rVe," \u2014 "),ooe=n(rVe,"A",{href:!0});var XOt=s(ooe);eQr=r(XOt,"FlaxMT5ForConditionalGeneration"),XOt.forEach(t),oQr=r(rVe," (MT5 model)"),rVe.forEach(t),rQr=i(we),oA=n(we,"LI",{});var tVe=s(oA);Dwe=n(tVe,"STRONG",{});var zOt=s(Dwe);tQr=r(zOt,"roberta"),zOt.forEach(t),aQr=r(tVe," \u2014 "),roe=n(tVe,"A",{href:!0});var QOt=s(roe);nQr=r(QOt,"FlaxRobertaForMaskedLM"),QOt.forEach(t),sQr=r(tVe," (RoBERTa model)"),tVe.forEach(t),lQr=i(we),rA=n(we,"LI",{});var aVe=s(rA);Gwe=n(aVe,"STRONG",{});var WOt=s(Gwe);iQr=r(WOt,"roformer"),WOt.forEach(t),dQr=r(aVe," \u2014 "),toe=n(aVe,"A",{href:!0});var HOt=s(toe);cQr=r(HOt,"FlaxRoFormerForMaskedLM"),HOt.forEach(t),mQr=r(aVe," (RoFormer model)"),aVe.forEach(t),fQr=i(we),tA=n(we,"LI",{});var nVe=s(tA);Owe=n(nVe,"STRONG",{});var UOt=s(Owe);gQr=r(UOt,"t5"),UOt.forEach(t),hQr=r(nVe," \u2014 "),aoe=n(nVe,"A",{href:!0});var JOt=s(aoe);uQr=r(JOt,"FlaxT5ForConditionalGeneration"),JOt.forEach(t),pQr=r(nVe," (T5 model)"),nVe.forEach(t),_Qr=i(we),aA=n(we,"LI",{});var sVe=s(aA);Vwe=n(sVe,"STRONG",{});var YOt=s(Vwe);bQr=r(YOt,"wav2vec2"),YOt.forEach(t),vQr=r(sVe," \u2014 "),noe=n(sVe,"A",{href:!0});var KOt=s(noe);FQr=r(KOt,"FlaxWav2Vec2ForPreTraining"),KOt.forEach(t),TQr=r(sVe," (Wav2Vec2 model)"),sVe.forEach(t),MQr=i(we),nA=n(we,"LI",{});var lVe=s(nA);Xwe=n(lVe,"STRONG",{});var ZOt=s(Xwe);EQr=r(ZOt,"xlm-roberta"),ZOt.forEach(t),CQr=r(lVe," \u2014 "),soe=n(lVe,"A",{href:!0});var eVt=s(soe);wQr=r(eVt,"FlaxXLMRobertaForMaskedLM"),eVt.forEach(t),AQr=r(lVe," (XLM-RoBERTa model)"),lVe.forEach(t),we.forEach(t),LQr=i(di),T(sA.$$.fragment,di),di.forEach(t),ii.forEach(t),oQe=i(m),am=n(m,"H2",{class:!0});var cHe=s(am);lA=n(cHe,"A",{id:!0,class:!0,href:!0});var oVt=s(lA);zwe=n(oVt,"SPAN",{});var rVt=s(zwe);T(A$.$$.fragment,rVt),rVt.forEach(t),oVt.forEach(t),yQr=i(cHe),Qwe=n(cHe,"SPAN",{});var tVt=s(Qwe);xQr=r(tVt,"FlaxAutoModelForMaskedLM"),tVt.forEach(t),cHe.forEach(t),rQe=i(m),br=n(m,"DIV",{class:!0});var ci=s(br);T(L$.$$.fragment,ci),$Qr=i(ci),nm=n(ci,"P",{});var pae=s(nm);kQr=r(pae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),loe=n(pae,"A",{href:!0});var aVt=s(loe);SQr=r(aVt,"from_pretrained()"),aVt.forEach(t),RQr=r(pae," class method or the "),ioe=n(pae,"A",{href:!0});var nVt=s(ioe);PQr=r(nVt,"from_config()"),nVt.forEach(t),BQr=r(pae,` class
method.`),pae.forEach(t),NQr=i(ci),y$=n(ci,"P",{});var mHe=s(y$);IQr=r(mHe,"This class cannot be instantiated directly using "),Wwe=n(mHe,"CODE",{});var sVt=s(Wwe);qQr=r(sVt,"__init__()"),sVt.forEach(t),jQr=r(mHe," (throws an error)."),mHe.forEach(t),DQr=i(ci),Jt=n(ci,"DIV",{class:!0});var DL=s(Jt);T(x$.$$.fragment,DL),GQr=i(DL),Hwe=n(DL,"P",{});var lVt=s(Hwe);OQr=r(lVt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lVt.forEach(t),VQr=i(DL),sm=n(DL,"P",{});var _ae=s(sm);XQr=r(_ae,`Note:
Loading a model from its configuration file does `),Uwe=n(_ae,"STRONG",{});var iVt=s(Uwe);zQr=r(iVt,"not"),iVt.forEach(t),QQr=r(_ae,` load the model weights. It only affects the
model\u2019s configuration. Use `),doe=n(_ae,"A",{href:!0});var dVt=s(doe);WQr=r(dVt,"from_pretrained()"),dVt.forEach(t),HQr=r(_ae," to load the model weights."),_ae.forEach(t),UQr=i(DL),T(iA.$$.fragment,DL),DL.forEach(t),JQr=i(ci),Qr=n(ci,"DIV",{class:!0});var mi=s(Qr);T($$.$$.fragment,mi),YQr=i(mi),Jwe=n(mi,"P",{});var cVt=s(Jwe);KQr=r(cVt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cVt.forEach(t),ZQr=i(mi),Cn=n(mi,"P",{});var GL=s(Cn);eWr=r(GL,"The model class to instantiate is selected based on the "),Ywe=n(GL,"CODE",{});var mVt=s(Ywe);oWr=r(mVt,"model_type"),mVt.forEach(t),rWr=r(GL,` property of the config object (either
passed as an argument or loaded from `),Kwe=n(GL,"CODE",{});var fVt=s(Kwe);tWr=r(fVt,"pretrained_model_name_or_path"),fVt.forEach(t),aWr=r(GL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zwe=n(GL,"CODE",{});var gVt=s(Zwe);nWr=r(gVt,"pretrained_model_name_or_path"),gVt.forEach(t),sWr=r(GL,":"),GL.forEach(t),lWr=i(mi),$e=n(mi,"UL",{});var qe=s($e);dA=n(qe,"LI",{});var iVe=s(dA);eAe=n(iVe,"STRONG",{});var hVt=s(eAe);iWr=r(hVt,"albert"),hVt.forEach(t),dWr=r(iVe," \u2014 "),coe=n(iVe,"A",{href:!0});var uVt=s(coe);cWr=r(uVt,"FlaxAlbertForMaskedLM"),uVt.forEach(t),mWr=r(iVe," (ALBERT model)"),iVe.forEach(t),fWr=i(qe),cA=n(qe,"LI",{});var dVe=s(cA);oAe=n(dVe,"STRONG",{});var pVt=s(oAe);gWr=r(pVt,"bart"),pVt.forEach(t),hWr=r(dVe," \u2014 "),moe=n(dVe,"A",{href:!0});var _Vt=s(moe);uWr=r(_Vt,"FlaxBartForConditionalGeneration"),_Vt.forEach(t),pWr=r(dVe," (BART model)"),dVe.forEach(t),_Wr=i(qe),mA=n(qe,"LI",{});var cVe=s(mA);rAe=n(cVe,"STRONG",{});var bVt=s(rAe);bWr=r(bVt,"bert"),bVt.forEach(t),vWr=r(cVe," \u2014 "),foe=n(cVe,"A",{href:!0});var vVt=s(foe);FWr=r(vVt,"FlaxBertForMaskedLM"),vVt.forEach(t),TWr=r(cVe," (BERT model)"),cVe.forEach(t),MWr=i(qe),fA=n(qe,"LI",{});var mVe=s(fA);tAe=n(mVe,"STRONG",{});var FVt=s(tAe);EWr=r(FVt,"big_bird"),FVt.forEach(t),CWr=r(mVe," \u2014 "),goe=n(mVe,"A",{href:!0});var TVt=s(goe);wWr=r(TVt,"FlaxBigBirdForMaskedLM"),TVt.forEach(t),AWr=r(mVe," (BigBird model)"),mVe.forEach(t),LWr=i(qe),gA=n(qe,"LI",{});var fVe=s(gA);aAe=n(fVe,"STRONG",{});var MVt=s(aAe);yWr=r(MVt,"distilbert"),MVt.forEach(t),xWr=r(fVe," \u2014 "),hoe=n(fVe,"A",{href:!0});var EVt=s(hoe);$Wr=r(EVt,"FlaxDistilBertForMaskedLM"),EVt.forEach(t),kWr=r(fVe," (DistilBERT model)"),fVe.forEach(t),SWr=i(qe),hA=n(qe,"LI",{});var gVe=s(hA);nAe=n(gVe,"STRONG",{});var CVt=s(nAe);RWr=r(CVt,"electra"),CVt.forEach(t),PWr=r(gVe," \u2014 "),uoe=n(gVe,"A",{href:!0});var wVt=s(uoe);BWr=r(wVt,"FlaxElectraForMaskedLM"),wVt.forEach(t),NWr=r(gVe," (ELECTRA model)"),gVe.forEach(t),IWr=i(qe),uA=n(qe,"LI",{});var hVe=s(uA);sAe=n(hVe,"STRONG",{});var AVt=s(sAe);qWr=r(AVt,"mbart"),AVt.forEach(t),jWr=r(hVe," \u2014 "),poe=n(hVe,"A",{href:!0});var LVt=s(poe);DWr=r(LVt,"FlaxMBartForConditionalGeneration"),LVt.forEach(t),GWr=r(hVe," (mBART model)"),hVe.forEach(t),OWr=i(qe),pA=n(qe,"LI",{});var uVe=s(pA);lAe=n(uVe,"STRONG",{});var yVt=s(lAe);VWr=r(yVt,"roberta"),yVt.forEach(t),XWr=r(uVe," \u2014 "),_oe=n(uVe,"A",{href:!0});var xVt=s(_oe);zWr=r(xVt,"FlaxRobertaForMaskedLM"),xVt.forEach(t),QWr=r(uVe," (RoBERTa model)"),uVe.forEach(t),WWr=i(qe),_A=n(qe,"LI",{});var pVe=s(_A);iAe=n(pVe,"STRONG",{});var $Vt=s(iAe);HWr=r($Vt,"roformer"),$Vt.forEach(t),UWr=r(pVe," \u2014 "),boe=n(pVe,"A",{href:!0});var kVt=s(boe);JWr=r(kVt,"FlaxRoFormerForMaskedLM"),kVt.forEach(t),YWr=r(pVe," (RoFormer model)"),pVe.forEach(t),KWr=i(qe),bA=n(qe,"LI",{});var _Ve=s(bA);dAe=n(_Ve,"STRONG",{});var SVt=s(dAe);ZWr=r(SVt,"xlm-roberta"),SVt.forEach(t),eHr=r(_Ve," \u2014 "),voe=n(_Ve,"A",{href:!0});var RVt=s(voe);oHr=r(RVt,"FlaxXLMRobertaForMaskedLM"),RVt.forEach(t),rHr=r(_Ve," (XLM-RoBERTa model)"),_Ve.forEach(t),qe.forEach(t),tHr=i(mi),T(vA.$$.fragment,mi),mi.forEach(t),ci.forEach(t),tQe=i(m),lm=n(m,"H2",{class:!0});var fHe=s(lm);FA=n(fHe,"A",{id:!0,class:!0,href:!0});var PVt=s(FA);cAe=n(PVt,"SPAN",{});var BVt=s(cAe);T(k$.$$.fragment,BVt),BVt.forEach(t),PVt.forEach(t),aHr=i(fHe),mAe=n(fHe,"SPAN",{});var NVt=s(mAe);nHr=r(NVt,"FlaxAutoModelForSeq2SeqLM"),NVt.forEach(t),fHe.forEach(t),aQe=i(m),vr=n(m,"DIV",{class:!0});var fi=s(vr);T(S$.$$.fragment,fi),sHr=i(fi),im=n(fi,"P",{});var bae=s(im);lHr=r(bae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Foe=n(bae,"A",{href:!0});var IVt=s(Foe);iHr=r(IVt,"from_pretrained()"),IVt.forEach(t),dHr=r(bae," class method or the "),Toe=n(bae,"A",{href:!0});var qVt=s(Toe);cHr=r(qVt,"from_config()"),qVt.forEach(t),mHr=r(bae,` class
method.`),bae.forEach(t),fHr=i(fi),R$=n(fi,"P",{});var gHe=s(R$);gHr=r(gHe,"This class cannot be instantiated directly using "),fAe=n(gHe,"CODE",{});var jVt=s(fAe);hHr=r(jVt,"__init__()"),jVt.forEach(t),uHr=r(gHe," (throws an error)."),gHe.forEach(t),pHr=i(fi),Yt=n(fi,"DIV",{class:!0});var OL=s(Yt);T(P$.$$.fragment,OL),_Hr=i(OL),gAe=n(OL,"P",{});var DVt=s(gAe);bHr=r(DVt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),DVt.forEach(t),vHr=i(OL),dm=n(OL,"P",{});var vae=s(dm);FHr=r(vae,`Note:
Loading a model from its configuration file does `),hAe=n(vae,"STRONG",{});var GVt=s(hAe);THr=r(GVt,"not"),GVt.forEach(t),MHr=r(vae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Moe=n(vae,"A",{href:!0});var OVt=s(Moe);EHr=r(OVt,"from_pretrained()"),OVt.forEach(t),CHr=r(vae," to load the model weights."),vae.forEach(t),wHr=i(OL),T(TA.$$.fragment,OL),OL.forEach(t),AHr=i(fi),Wr=n(fi,"DIV",{class:!0});var gi=s(Wr);T(B$.$$.fragment,gi),LHr=i(gi),uAe=n(gi,"P",{});var VVt=s(uAe);yHr=r(VVt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),VVt.forEach(t),xHr=i(gi),wn=n(gi,"P",{});var VL=s(wn);$Hr=r(VL,"The model class to instantiate is selected based on the "),pAe=n(VL,"CODE",{});var XVt=s(pAe);kHr=r(XVt,"model_type"),XVt.forEach(t),SHr=r(VL,` property of the config object (either
passed as an argument or loaded from `),_Ae=n(VL,"CODE",{});var zVt=s(_Ae);RHr=r(zVt,"pretrained_model_name_or_path"),zVt.forEach(t),PHr=r(VL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bAe=n(VL,"CODE",{});var QVt=s(bAe);BHr=r(QVt,"pretrained_model_name_or_path"),QVt.forEach(t),NHr=r(VL,":"),VL.forEach(t),IHr=i(gi),ke=n(gi,"UL",{});var je=s(ke);MA=n(je,"LI",{});var bVe=s(MA);vAe=n(bVe,"STRONG",{});var WVt=s(vAe);qHr=r(WVt,"bart"),WVt.forEach(t),jHr=r(bVe," \u2014 "),Eoe=n(bVe,"A",{href:!0});var HVt=s(Eoe);DHr=r(HVt,"FlaxBartForConditionalGeneration"),HVt.forEach(t),GHr=r(bVe," (BART model)"),bVe.forEach(t),OHr=i(je),EA=n(je,"LI",{});var vVe=s(EA);FAe=n(vVe,"STRONG",{});var UVt=s(FAe);VHr=r(UVt,"blenderbot"),UVt.forEach(t),XHr=r(vVe," \u2014 "),Coe=n(vVe,"A",{href:!0});var JVt=s(Coe);zHr=r(JVt,"FlaxBlenderbotForConditionalGeneration"),JVt.forEach(t),QHr=r(vVe," (Blenderbot model)"),vVe.forEach(t),WHr=i(je),CA=n(je,"LI",{});var FVe=s(CA);TAe=n(FVe,"STRONG",{});var YVt=s(TAe);HHr=r(YVt,"blenderbot-small"),YVt.forEach(t),UHr=r(FVe," \u2014 "),woe=n(FVe,"A",{href:!0});var KVt=s(woe);JHr=r(KVt,"FlaxBlenderbotSmallForConditionalGeneration"),KVt.forEach(t),YHr=r(FVe," (BlenderbotSmall model)"),FVe.forEach(t),KHr=i(je),wA=n(je,"LI",{});var TVe=s(wA);MAe=n(TVe,"STRONG",{});var ZVt=s(MAe);ZHr=r(ZVt,"encoder-decoder"),ZVt.forEach(t),eUr=r(TVe," \u2014 "),Aoe=n(TVe,"A",{href:!0});var eXt=s(Aoe);oUr=r(eXt,"FlaxEncoderDecoderModel"),eXt.forEach(t),rUr=r(TVe," (Encoder decoder model)"),TVe.forEach(t),tUr=i(je),AA=n(je,"LI",{});var MVe=s(AA);EAe=n(MVe,"STRONG",{});var oXt=s(EAe);aUr=r(oXt,"longt5"),oXt.forEach(t),nUr=r(MVe," \u2014 "),Loe=n(MVe,"A",{href:!0});var rXt=s(Loe);sUr=r(rXt,"FlaxLongT5ForConditionalGeneration"),rXt.forEach(t),lUr=r(MVe," (LongT5 model)"),MVe.forEach(t),iUr=i(je),LA=n(je,"LI",{});var EVe=s(LA);CAe=n(EVe,"STRONG",{});var tXt=s(CAe);dUr=r(tXt,"marian"),tXt.forEach(t),cUr=r(EVe," \u2014 "),yoe=n(EVe,"A",{href:!0});var aXt=s(yoe);mUr=r(aXt,"FlaxMarianMTModel"),aXt.forEach(t),fUr=r(EVe," (Marian model)"),EVe.forEach(t),gUr=i(je),yA=n(je,"LI",{});var CVe=s(yA);wAe=n(CVe,"STRONG",{});var nXt=s(wAe);hUr=r(nXt,"mbart"),nXt.forEach(t),uUr=r(CVe," \u2014 "),xoe=n(CVe,"A",{href:!0});var sXt=s(xoe);pUr=r(sXt,"FlaxMBartForConditionalGeneration"),sXt.forEach(t),_Ur=r(CVe," (mBART model)"),CVe.forEach(t),bUr=i(je),xA=n(je,"LI",{});var wVe=s(xA);AAe=n(wVe,"STRONG",{});var lXt=s(AAe);vUr=r(lXt,"mt5"),lXt.forEach(t),FUr=r(wVe," \u2014 "),$oe=n(wVe,"A",{href:!0});var iXt=s($oe);TUr=r(iXt,"FlaxMT5ForConditionalGeneration"),iXt.forEach(t),MUr=r(wVe," (MT5 model)"),wVe.forEach(t),EUr=i(je),$A=n(je,"LI",{});var AVe=s($A);LAe=n(AVe,"STRONG",{});var dXt=s(LAe);CUr=r(dXt,"pegasus"),dXt.forEach(t),wUr=r(AVe," \u2014 "),koe=n(AVe,"A",{href:!0});var cXt=s(koe);AUr=r(cXt,"FlaxPegasusForConditionalGeneration"),cXt.forEach(t),LUr=r(AVe," (Pegasus model)"),AVe.forEach(t),yUr=i(je),kA=n(je,"LI",{});var LVe=s(kA);yAe=n(LVe,"STRONG",{});var mXt=s(yAe);xUr=r(mXt,"t5"),mXt.forEach(t),$Ur=r(LVe," \u2014 "),Soe=n(LVe,"A",{href:!0});var fXt=s(Soe);kUr=r(fXt,"FlaxT5ForConditionalGeneration"),fXt.forEach(t),SUr=r(LVe," (T5 model)"),LVe.forEach(t),je.forEach(t),RUr=i(gi),T(SA.$$.fragment,gi),gi.forEach(t),fi.forEach(t),nQe=i(m),cm=n(m,"H2",{class:!0});var hHe=s(cm);RA=n(hHe,"A",{id:!0,class:!0,href:!0});var gXt=s(RA);xAe=n(gXt,"SPAN",{});var hXt=s(xAe);T(N$.$$.fragment,hXt),hXt.forEach(t),gXt.forEach(t),PUr=i(hHe),$Ae=n(hHe,"SPAN",{});var uXt=s($Ae);BUr=r(uXt,"FlaxAutoModelForSequenceClassification"),uXt.forEach(t),hHe.forEach(t),sQe=i(m),Fr=n(m,"DIV",{class:!0});var hi=s(Fr);T(I$.$$.fragment,hi),NUr=i(hi),mm=n(hi,"P",{});var Fae=s(mm);IUr=r(Fae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Roe=n(Fae,"A",{href:!0});var pXt=s(Roe);qUr=r(pXt,"from_pretrained()"),pXt.forEach(t),jUr=r(Fae," class method or the "),Poe=n(Fae,"A",{href:!0});var _Xt=s(Poe);DUr=r(_Xt,"from_config()"),_Xt.forEach(t),GUr=r(Fae,` class
method.`),Fae.forEach(t),OUr=i(hi),q$=n(hi,"P",{});var uHe=s(q$);VUr=r(uHe,"This class cannot be instantiated directly using "),kAe=n(uHe,"CODE",{});var bXt=s(kAe);XUr=r(bXt,"__init__()"),bXt.forEach(t),zUr=r(uHe," (throws an error)."),uHe.forEach(t),QUr=i(hi),Kt=n(hi,"DIV",{class:!0});var XL=s(Kt);T(j$.$$.fragment,XL),WUr=i(XL),SAe=n(XL,"P",{});var vXt=s(SAe);HUr=r(vXt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),vXt.forEach(t),UUr=i(XL),fm=n(XL,"P",{});var Tae=s(fm);JUr=r(Tae,`Note:
Loading a model from its configuration file does `),RAe=n(Tae,"STRONG",{});var FXt=s(RAe);YUr=r(FXt,"not"),FXt.forEach(t),KUr=r(Tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Boe=n(Tae,"A",{href:!0});var TXt=s(Boe);ZUr=r(TXt,"from_pretrained()"),TXt.forEach(t),eJr=r(Tae," to load the model weights."),Tae.forEach(t),oJr=i(XL),T(PA.$$.fragment,XL),XL.forEach(t),rJr=i(hi),Hr=n(hi,"DIV",{class:!0});var ui=s(Hr);T(D$.$$.fragment,ui),tJr=i(ui),PAe=n(ui,"P",{});var MXt=s(PAe);aJr=r(MXt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),MXt.forEach(t),nJr=i(ui),An=n(ui,"P",{});var zL=s(An);sJr=r(zL,"The model class to instantiate is selected based on the "),BAe=n(zL,"CODE",{});var EXt=s(BAe);lJr=r(EXt,"model_type"),EXt.forEach(t),iJr=r(zL,` property of the config object (either
passed as an argument or loaded from `),NAe=n(zL,"CODE",{});var CXt=s(NAe);dJr=r(CXt,"pretrained_model_name_or_path"),CXt.forEach(t),cJr=r(zL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IAe=n(zL,"CODE",{});var wXt=s(IAe);mJr=r(wXt,"pretrained_model_name_or_path"),wXt.forEach(t),fJr=r(zL,":"),zL.forEach(t),gJr=i(ui),Se=n(ui,"UL",{});var De=s(Se);BA=n(De,"LI",{});var yVe=s(BA);qAe=n(yVe,"STRONG",{});var AXt=s(qAe);hJr=r(AXt,"albert"),AXt.forEach(t),uJr=r(yVe," \u2014 "),Noe=n(yVe,"A",{href:!0});var LXt=s(Noe);pJr=r(LXt,"FlaxAlbertForSequenceClassification"),LXt.forEach(t),_Jr=r(yVe," (ALBERT model)"),yVe.forEach(t),bJr=i(De),NA=n(De,"LI",{});var xVe=s(NA);jAe=n(xVe,"STRONG",{});var yXt=s(jAe);vJr=r(yXt,"bart"),yXt.forEach(t),FJr=r(xVe," \u2014 "),Ioe=n(xVe,"A",{href:!0});var xXt=s(Ioe);TJr=r(xXt,"FlaxBartForSequenceClassification"),xXt.forEach(t),MJr=r(xVe," (BART model)"),xVe.forEach(t),EJr=i(De),IA=n(De,"LI",{});var $Ve=s(IA);DAe=n($Ve,"STRONG",{});var $Xt=s(DAe);CJr=r($Xt,"bert"),$Xt.forEach(t),wJr=r($Ve," \u2014 "),qoe=n($Ve,"A",{href:!0});var kXt=s(qoe);AJr=r(kXt,"FlaxBertForSequenceClassification"),kXt.forEach(t),LJr=r($Ve," (BERT model)"),$Ve.forEach(t),yJr=i(De),qA=n(De,"LI",{});var kVe=s(qA);GAe=n(kVe,"STRONG",{});var SXt=s(GAe);xJr=r(SXt,"big_bird"),SXt.forEach(t),$Jr=r(kVe," \u2014 "),joe=n(kVe,"A",{href:!0});var RXt=s(joe);kJr=r(RXt,"FlaxBigBirdForSequenceClassification"),RXt.forEach(t),SJr=r(kVe," (BigBird model)"),kVe.forEach(t),RJr=i(De),jA=n(De,"LI",{});var SVe=s(jA);OAe=n(SVe,"STRONG",{});var PXt=s(OAe);PJr=r(PXt,"distilbert"),PXt.forEach(t),BJr=r(SVe," \u2014 "),Doe=n(SVe,"A",{href:!0});var BXt=s(Doe);NJr=r(BXt,"FlaxDistilBertForSequenceClassification"),BXt.forEach(t),IJr=r(SVe," (DistilBERT model)"),SVe.forEach(t),qJr=i(De),DA=n(De,"LI",{});var RVe=s(DA);VAe=n(RVe,"STRONG",{});var NXt=s(VAe);jJr=r(NXt,"electra"),NXt.forEach(t),DJr=r(RVe," \u2014 "),Goe=n(RVe,"A",{href:!0});var IXt=s(Goe);GJr=r(IXt,"FlaxElectraForSequenceClassification"),IXt.forEach(t),OJr=r(RVe," (ELECTRA model)"),RVe.forEach(t),VJr=i(De),GA=n(De,"LI",{});var PVe=s(GA);XAe=n(PVe,"STRONG",{});var qXt=s(XAe);XJr=r(qXt,"mbart"),qXt.forEach(t),zJr=r(PVe," \u2014 "),Ooe=n(PVe,"A",{href:!0});var jXt=s(Ooe);QJr=r(jXt,"FlaxMBartForSequenceClassification"),jXt.forEach(t),WJr=r(PVe," (mBART model)"),PVe.forEach(t),HJr=i(De),OA=n(De,"LI",{});var BVe=s(OA);zAe=n(BVe,"STRONG",{});var DXt=s(zAe);UJr=r(DXt,"roberta"),DXt.forEach(t),JJr=r(BVe," \u2014 "),Voe=n(BVe,"A",{href:!0});var GXt=s(Voe);YJr=r(GXt,"FlaxRobertaForSequenceClassification"),GXt.forEach(t),KJr=r(BVe," (RoBERTa model)"),BVe.forEach(t),ZJr=i(De),VA=n(De,"LI",{});var NVe=s(VA);QAe=n(NVe,"STRONG",{});var OXt=s(QAe);eYr=r(OXt,"roformer"),OXt.forEach(t),oYr=r(NVe," \u2014 "),Xoe=n(NVe,"A",{href:!0});var VXt=s(Xoe);rYr=r(VXt,"FlaxRoFormerForSequenceClassification"),VXt.forEach(t),tYr=r(NVe," (RoFormer model)"),NVe.forEach(t),aYr=i(De),XA=n(De,"LI",{});var IVe=s(XA);WAe=n(IVe,"STRONG",{});var XXt=s(WAe);nYr=r(XXt,"xlm-roberta"),XXt.forEach(t),sYr=r(IVe," \u2014 "),zoe=n(IVe,"A",{href:!0});var zXt=s(zoe);lYr=r(zXt,"FlaxXLMRobertaForSequenceClassification"),zXt.forEach(t),iYr=r(IVe," (XLM-RoBERTa model)"),IVe.forEach(t),De.forEach(t),dYr=i(ui),T(zA.$$.fragment,ui),ui.forEach(t),hi.forEach(t),lQe=i(m),gm=n(m,"H2",{class:!0});var pHe=s(gm);QA=n(pHe,"A",{id:!0,class:!0,href:!0});var QXt=s(QA);HAe=n(QXt,"SPAN",{});var WXt=s(HAe);T(G$.$$.fragment,WXt),WXt.forEach(t),QXt.forEach(t),cYr=i(pHe),UAe=n(pHe,"SPAN",{});var HXt=s(UAe);mYr=r(HXt,"FlaxAutoModelForQuestionAnswering"),HXt.forEach(t),pHe.forEach(t),iQe=i(m),Tr=n(m,"DIV",{class:!0});var pi=s(Tr);T(O$.$$.fragment,pi),fYr=i(pi),hm=n(pi,"P",{});var Mae=s(hm);gYr=r(Mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Qoe=n(Mae,"A",{href:!0});var UXt=s(Qoe);hYr=r(UXt,"from_pretrained()"),UXt.forEach(t),uYr=r(Mae," class method or the "),Woe=n(Mae,"A",{href:!0});var JXt=s(Woe);pYr=r(JXt,"from_config()"),JXt.forEach(t),_Yr=r(Mae,` class
method.`),Mae.forEach(t),bYr=i(pi),V$=n(pi,"P",{});var _He=s(V$);vYr=r(_He,"This class cannot be instantiated directly using "),JAe=n(_He,"CODE",{});var YXt=s(JAe);FYr=r(YXt,"__init__()"),YXt.forEach(t),TYr=r(_He," (throws an error)."),_He.forEach(t),MYr=i(pi),Zt=n(pi,"DIV",{class:!0});var QL=s(Zt);T(X$.$$.fragment,QL),EYr=i(QL),YAe=n(QL,"P",{});var KXt=s(YAe);CYr=r(KXt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),KXt.forEach(t),wYr=i(QL),um=n(QL,"P",{});var Eae=s(um);AYr=r(Eae,`Note:
Loading a model from its configuration file does `),KAe=n(Eae,"STRONG",{});var ZXt=s(KAe);LYr=r(ZXt,"not"),ZXt.forEach(t),yYr=r(Eae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hoe=n(Eae,"A",{href:!0});var ezt=s(Hoe);xYr=r(ezt,"from_pretrained()"),ezt.forEach(t),$Yr=r(Eae," to load the model weights."),Eae.forEach(t),kYr=i(QL),T(WA.$$.fragment,QL),QL.forEach(t),SYr=i(pi),Ur=n(pi,"DIV",{class:!0});var _i=s(Ur);T(z$.$$.fragment,_i),RYr=i(_i),ZAe=n(_i,"P",{});var ozt=s(ZAe);PYr=r(ozt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ozt.forEach(t),BYr=i(_i),Ln=n(_i,"P",{});var WL=s(Ln);NYr=r(WL,"The model class to instantiate is selected based on the "),e6e=n(WL,"CODE",{});var rzt=s(e6e);IYr=r(rzt,"model_type"),rzt.forEach(t),qYr=r(WL,` property of the config object (either
passed as an argument or loaded from `),o6e=n(WL,"CODE",{});var tzt=s(o6e);jYr=r(tzt,"pretrained_model_name_or_path"),tzt.forEach(t),DYr=r(WL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r6e=n(WL,"CODE",{});var azt=s(r6e);GYr=r(azt,"pretrained_model_name_or_path"),azt.forEach(t),OYr=r(WL,":"),WL.forEach(t),VYr=i(_i),Re=n(_i,"UL",{});var Ge=s(Re);HA=n(Ge,"LI",{});var qVe=s(HA);t6e=n(qVe,"STRONG",{});var nzt=s(t6e);XYr=r(nzt,"albert"),nzt.forEach(t),zYr=r(qVe," \u2014 "),Uoe=n(qVe,"A",{href:!0});var szt=s(Uoe);QYr=r(szt,"FlaxAlbertForQuestionAnswering"),szt.forEach(t),WYr=r(qVe," (ALBERT model)"),qVe.forEach(t),HYr=i(Ge),UA=n(Ge,"LI",{});var jVe=s(UA);a6e=n(jVe,"STRONG",{});var lzt=s(a6e);UYr=r(lzt,"bart"),lzt.forEach(t),JYr=r(jVe," \u2014 "),Joe=n(jVe,"A",{href:!0});var izt=s(Joe);YYr=r(izt,"FlaxBartForQuestionAnswering"),izt.forEach(t),KYr=r(jVe," (BART model)"),jVe.forEach(t),ZYr=i(Ge),JA=n(Ge,"LI",{});var DVe=s(JA);n6e=n(DVe,"STRONG",{});var dzt=s(n6e);eKr=r(dzt,"bert"),dzt.forEach(t),oKr=r(DVe," \u2014 "),Yoe=n(DVe,"A",{href:!0});var czt=s(Yoe);rKr=r(czt,"FlaxBertForQuestionAnswering"),czt.forEach(t),tKr=r(DVe," (BERT model)"),DVe.forEach(t),aKr=i(Ge),YA=n(Ge,"LI",{});var GVe=s(YA);s6e=n(GVe,"STRONG",{});var mzt=s(s6e);nKr=r(mzt,"big_bird"),mzt.forEach(t),sKr=r(GVe," \u2014 "),Koe=n(GVe,"A",{href:!0});var fzt=s(Koe);lKr=r(fzt,"FlaxBigBirdForQuestionAnswering"),fzt.forEach(t),iKr=r(GVe," (BigBird model)"),GVe.forEach(t),dKr=i(Ge),KA=n(Ge,"LI",{});var OVe=s(KA);l6e=n(OVe,"STRONG",{});var gzt=s(l6e);cKr=r(gzt,"distilbert"),gzt.forEach(t),mKr=r(OVe," \u2014 "),Zoe=n(OVe,"A",{href:!0});var hzt=s(Zoe);fKr=r(hzt,"FlaxDistilBertForQuestionAnswering"),hzt.forEach(t),gKr=r(OVe," (DistilBERT model)"),OVe.forEach(t),hKr=i(Ge),ZA=n(Ge,"LI",{});var VVe=s(ZA);i6e=n(VVe,"STRONG",{});var uzt=s(i6e);uKr=r(uzt,"electra"),uzt.forEach(t),pKr=r(VVe," \u2014 "),ere=n(VVe,"A",{href:!0});var pzt=s(ere);_Kr=r(pzt,"FlaxElectraForQuestionAnswering"),pzt.forEach(t),bKr=r(VVe," (ELECTRA model)"),VVe.forEach(t),vKr=i(Ge),e6=n(Ge,"LI",{});var XVe=s(e6);d6e=n(XVe,"STRONG",{});var _zt=s(d6e);FKr=r(_zt,"mbart"),_zt.forEach(t),TKr=r(XVe," \u2014 "),ore=n(XVe,"A",{href:!0});var bzt=s(ore);MKr=r(bzt,"FlaxMBartForQuestionAnswering"),bzt.forEach(t),EKr=r(XVe," (mBART model)"),XVe.forEach(t),CKr=i(Ge),o6=n(Ge,"LI",{});var zVe=s(o6);c6e=n(zVe,"STRONG",{});var vzt=s(c6e);wKr=r(vzt,"roberta"),vzt.forEach(t),AKr=r(zVe," \u2014 "),rre=n(zVe,"A",{href:!0});var Fzt=s(rre);LKr=r(Fzt,"FlaxRobertaForQuestionAnswering"),Fzt.forEach(t),yKr=r(zVe," (RoBERTa model)"),zVe.forEach(t),xKr=i(Ge),r6=n(Ge,"LI",{});var QVe=s(r6);m6e=n(QVe,"STRONG",{});var Tzt=s(m6e);$Kr=r(Tzt,"roformer"),Tzt.forEach(t),kKr=r(QVe," \u2014 "),tre=n(QVe,"A",{href:!0});var Mzt=s(tre);SKr=r(Mzt,"FlaxRoFormerForQuestionAnswering"),Mzt.forEach(t),RKr=r(QVe," (RoFormer model)"),QVe.forEach(t),PKr=i(Ge),t6=n(Ge,"LI",{});var WVe=s(t6);f6e=n(WVe,"STRONG",{});var Ezt=s(f6e);BKr=r(Ezt,"xlm-roberta"),Ezt.forEach(t),NKr=r(WVe," \u2014 "),are=n(WVe,"A",{href:!0});var Czt=s(are);IKr=r(Czt,"FlaxXLMRobertaForQuestionAnswering"),Czt.forEach(t),qKr=r(WVe," (XLM-RoBERTa model)"),WVe.forEach(t),Ge.forEach(t),jKr=i(_i),T(a6.$$.fragment,_i),_i.forEach(t),pi.forEach(t),dQe=i(m),pm=n(m,"H2",{class:!0});var bHe=s(pm);n6=n(bHe,"A",{id:!0,class:!0,href:!0});var wzt=s(n6);g6e=n(wzt,"SPAN",{});var Azt=s(g6e);T(Q$.$$.fragment,Azt),Azt.forEach(t),wzt.forEach(t),DKr=i(bHe),h6e=n(bHe,"SPAN",{});var Lzt=s(h6e);GKr=r(Lzt,"FlaxAutoModelForTokenClassification"),Lzt.forEach(t),bHe.forEach(t),cQe=i(m),Mr=n(m,"DIV",{class:!0});var bi=s(Mr);T(W$.$$.fragment,bi),OKr=i(bi),_m=n(bi,"P",{});var Cae=s(_m);VKr=r(Cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),nre=n(Cae,"A",{href:!0});var yzt=s(nre);XKr=r(yzt,"from_pretrained()"),yzt.forEach(t),zKr=r(Cae," class method or the "),sre=n(Cae,"A",{href:!0});var xzt=s(sre);QKr=r(xzt,"from_config()"),xzt.forEach(t),WKr=r(Cae,` class
method.`),Cae.forEach(t),HKr=i(bi),H$=n(bi,"P",{});var vHe=s(H$);UKr=r(vHe,"This class cannot be instantiated directly using "),u6e=n(vHe,"CODE",{});var $zt=s(u6e);JKr=r($zt,"__init__()"),$zt.forEach(t),YKr=r(vHe," (throws an error)."),vHe.forEach(t),KKr=i(bi),ea=n(bi,"DIV",{class:!0});var HL=s(ea);T(U$.$$.fragment,HL),ZKr=i(HL),p6e=n(HL,"P",{});var kzt=s(p6e);eZr=r(kzt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),kzt.forEach(t),oZr=i(HL),bm=n(HL,"P",{});var wae=s(bm);rZr=r(wae,`Note:
Loading a model from its configuration file does `),_6e=n(wae,"STRONG",{});var Szt=s(_6e);tZr=r(Szt,"not"),Szt.forEach(t),aZr=r(wae,` load the model weights. It only affects the
model\u2019s configuration. Use `),lre=n(wae,"A",{href:!0});var Rzt=s(lre);nZr=r(Rzt,"from_pretrained()"),Rzt.forEach(t),sZr=r(wae," to load the model weights."),wae.forEach(t),lZr=i(HL),T(s6.$$.fragment,HL),HL.forEach(t),iZr=i(bi),Jr=n(bi,"DIV",{class:!0});var vi=s(Jr);T(J$.$$.fragment,vi),dZr=i(vi),b6e=n(vi,"P",{});var Pzt=s(b6e);cZr=r(Pzt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Pzt.forEach(t),mZr=i(vi),yn=n(vi,"P",{});var UL=s(yn);fZr=r(UL,"The model class to instantiate is selected based on the "),v6e=n(UL,"CODE",{});var Bzt=s(v6e);gZr=r(Bzt,"model_type"),Bzt.forEach(t),hZr=r(UL,` property of the config object (either
passed as an argument or loaded from `),F6e=n(UL,"CODE",{});var Nzt=s(F6e);uZr=r(Nzt,"pretrained_model_name_or_path"),Nzt.forEach(t),pZr=r(UL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T6e=n(UL,"CODE",{});var Izt=s(T6e);_Zr=r(Izt,"pretrained_model_name_or_path"),Izt.forEach(t),bZr=r(UL,":"),UL.forEach(t),vZr=i(vi),Ve=n(vi,"UL",{});var Mo=s(Ve);l6=n(Mo,"LI",{});var HVe=s(l6);M6e=n(HVe,"STRONG",{});var qzt=s(M6e);FZr=r(qzt,"albert"),qzt.forEach(t),TZr=r(HVe," \u2014 "),ire=n(HVe,"A",{href:!0});var jzt=s(ire);MZr=r(jzt,"FlaxAlbertForTokenClassification"),jzt.forEach(t),EZr=r(HVe," (ALBERT model)"),HVe.forEach(t),CZr=i(Mo),i6=n(Mo,"LI",{});var UVe=s(i6);E6e=n(UVe,"STRONG",{});var Dzt=s(E6e);wZr=r(Dzt,"bert"),Dzt.forEach(t),AZr=r(UVe," \u2014 "),dre=n(UVe,"A",{href:!0});var Gzt=s(dre);LZr=r(Gzt,"FlaxBertForTokenClassification"),Gzt.forEach(t),yZr=r(UVe," (BERT model)"),UVe.forEach(t),xZr=i(Mo),d6=n(Mo,"LI",{});var JVe=s(d6);C6e=n(JVe,"STRONG",{});var Ozt=s(C6e);$Zr=r(Ozt,"big_bird"),Ozt.forEach(t),kZr=r(JVe," \u2014 "),cre=n(JVe,"A",{href:!0});var Vzt=s(cre);SZr=r(Vzt,"FlaxBigBirdForTokenClassification"),Vzt.forEach(t),RZr=r(JVe," (BigBird model)"),JVe.forEach(t),PZr=i(Mo),c6=n(Mo,"LI",{});var YVe=s(c6);w6e=n(YVe,"STRONG",{});var Xzt=s(w6e);BZr=r(Xzt,"distilbert"),Xzt.forEach(t),NZr=r(YVe," \u2014 "),mre=n(YVe,"A",{href:!0});var zzt=s(mre);IZr=r(zzt,"FlaxDistilBertForTokenClassification"),zzt.forEach(t),qZr=r(YVe," (DistilBERT model)"),YVe.forEach(t),jZr=i(Mo),m6=n(Mo,"LI",{});var KVe=s(m6);A6e=n(KVe,"STRONG",{});var Qzt=s(A6e);DZr=r(Qzt,"electra"),Qzt.forEach(t),GZr=r(KVe," \u2014 "),fre=n(KVe,"A",{href:!0});var Wzt=s(fre);OZr=r(Wzt,"FlaxElectraForTokenClassification"),Wzt.forEach(t),VZr=r(KVe," (ELECTRA model)"),KVe.forEach(t),XZr=i(Mo),f6=n(Mo,"LI",{});var ZVe=s(f6);L6e=n(ZVe,"STRONG",{});var Hzt=s(L6e);zZr=r(Hzt,"roberta"),Hzt.forEach(t),QZr=r(ZVe," \u2014 "),gre=n(ZVe,"A",{href:!0});var Uzt=s(gre);WZr=r(Uzt,"FlaxRobertaForTokenClassification"),Uzt.forEach(t),HZr=r(ZVe," (RoBERTa model)"),ZVe.forEach(t),UZr=i(Mo),g6=n(Mo,"LI",{});var eXe=s(g6);y6e=n(eXe,"STRONG",{});var Jzt=s(y6e);JZr=r(Jzt,"roformer"),Jzt.forEach(t),YZr=r(eXe," \u2014 "),hre=n(eXe,"A",{href:!0});var Yzt=s(hre);KZr=r(Yzt,"FlaxRoFormerForTokenClassification"),Yzt.forEach(t),ZZr=r(eXe," (RoFormer model)"),eXe.forEach(t),eet=i(Mo),h6=n(Mo,"LI",{});var oXe=s(h6);x6e=n(oXe,"STRONG",{});var Kzt=s(x6e);oet=r(Kzt,"xlm-roberta"),Kzt.forEach(t),ret=r(oXe," \u2014 "),ure=n(oXe,"A",{href:!0});var Zzt=s(ure);tet=r(Zzt,"FlaxXLMRobertaForTokenClassification"),Zzt.forEach(t),aet=r(oXe," (XLM-RoBERTa model)"),oXe.forEach(t),Mo.forEach(t),net=i(vi),T(u6.$$.fragment,vi),vi.forEach(t),bi.forEach(t),mQe=i(m),vm=n(m,"H2",{class:!0});var FHe=s(vm);p6=n(FHe,"A",{id:!0,class:!0,href:!0});var eQt=s(p6);$6e=n(eQt,"SPAN",{});var oQt=s($6e);T(Y$.$$.fragment,oQt),oQt.forEach(t),eQt.forEach(t),set=i(FHe),k6e=n(FHe,"SPAN",{});var rQt=s(k6e);iet=r(rQt,"FlaxAutoModelForMultipleChoice"),rQt.forEach(t),FHe.forEach(t),fQe=i(m),Er=n(m,"DIV",{class:!0});var Fi=s(Er);T(K$.$$.fragment,Fi),det=i(Fi),Fm=n(Fi,"P",{});var Aae=s(Fm);cet=r(Aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),pre=n(Aae,"A",{href:!0});var tQt=s(pre);met=r(tQt,"from_pretrained()"),tQt.forEach(t),fet=r(Aae," class method or the "),_re=n(Aae,"A",{href:!0});var aQt=s(_re);get=r(aQt,"from_config()"),aQt.forEach(t),het=r(Aae,` class
method.`),Aae.forEach(t),uet=i(Fi),Z$=n(Fi,"P",{});var THe=s(Z$);pet=r(THe,"This class cannot be instantiated directly using "),S6e=n(THe,"CODE",{});var nQt=s(S6e);_et=r(nQt,"__init__()"),nQt.forEach(t),bet=r(THe," (throws an error)."),THe.forEach(t),vet=i(Fi),oa=n(Fi,"DIV",{class:!0});var JL=s(oa);T(ek.$$.fragment,JL),Fet=i(JL),R6e=n(JL,"P",{});var sQt=s(R6e);Tet=r(sQt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),sQt.forEach(t),Met=i(JL),Tm=n(JL,"P",{});var Lae=s(Tm);Eet=r(Lae,`Note:
Loading a model from its configuration file does `),P6e=n(Lae,"STRONG",{});var lQt=s(P6e);Cet=r(lQt,"not"),lQt.forEach(t),wet=r(Lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),bre=n(Lae,"A",{href:!0});var iQt=s(bre);Aet=r(iQt,"from_pretrained()"),iQt.forEach(t),Let=r(Lae," to load the model weights."),Lae.forEach(t),yet=i(JL),T(_6.$$.fragment,JL),JL.forEach(t),xet=i(Fi),Yr=n(Fi,"DIV",{class:!0});var Ti=s(Yr);T(ok.$$.fragment,Ti),$et=i(Ti),B6e=n(Ti,"P",{});var dQt=s(B6e);ket=r(dQt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),dQt.forEach(t),Set=i(Ti),xn=n(Ti,"P",{});var YL=s(xn);Ret=r(YL,"The model class to instantiate is selected based on the "),N6e=n(YL,"CODE",{});var cQt=s(N6e);Pet=r(cQt,"model_type"),cQt.forEach(t),Bet=r(YL,` property of the config object (either
passed as an argument or loaded from `),I6e=n(YL,"CODE",{});var mQt=s(I6e);Net=r(mQt,"pretrained_model_name_or_path"),mQt.forEach(t),Iet=r(YL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q6e=n(YL,"CODE",{});var fQt=s(q6e);qet=r(fQt,"pretrained_model_name_or_path"),fQt.forEach(t),jet=r(YL,":"),YL.forEach(t),Det=i(Ti),Xe=n(Ti,"UL",{});var Eo=s(Xe);b6=n(Eo,"LI",{});var rXe=s(b6);j6e=n(rXe,"STRONG",{});var gQt=s(j6e);Get=r(gQt,"albert"),gQt.forEach(t),Oet=r(rXe," \u2014 "),vre=n(rXe,"A",{href:!0});var hQt=s(vre);Vet=r(hQt,"FlaxAlbertForMultipleChoice"),hQt.forEach(t),Xet=r(rXe," (ALBERT model)"),rXe.forEach(t),zet=i(Eo),v6=n(Eo,"LI",{});var tXe=s(v6);D6e=n(tXe,"STRONG",{});var uQt=s(D6e);Qet=r(uQt,"bert"),uQt.forEach(t),Wet=r(tXe," \u2014 "),Fre=n(tXe,"A",{href:!0});var pQt=s(Fre);Het=r(pQt,"FlaxBertForMultipleChoice"),pQt.forEach(t),Uet=r(tXe," (BERT model)"),tXe.forEach(t),Jet=i(Eo),F6=n(Eo,"LI",{});var aXe=s(F6);G6e=n(aXe,"STRONG",{});var _Qt=s(G6e);Yet=r(_Qt,"big_bird"),_Qt.forEach(t),Ket=r(aXe," \u2014 "),Tre=n(aXe,"A",{href:!0});var bQt=s(Tre);Zet=r(bQt,"FlaxBigBirdForMultipleChoice"),bQt.forEach(t),eot=r(aXe," (BigBird model)"),aXe.forEach(t),oot=i(Eo),T6=n(Eo,"LI",{});var nXe=s(T6);O6e=n(nXe,"STRONG",{});var vQt=s(O6e);rot=r(vQt,"distilbert"),vQt.forEach(t),tot=r(nXe," \u2014 "),Mre=n(nXe,"A",{href:!0});var FQt=s(Mre);aot=r(FQt,"FlaxDistilBertForMultipleChoice"),FQt.forEach(t),not=r(nXe," (DistilBERT model)"),nXe.forEach(t),sot=i(Eo),M6=n(Eo,"LI",{});var sXe=s(M6);V6e=n(sXe,"STRONG",{});var TQt=s(V6e);lot=r(TQt,"electra"),TQt.forEach(t),iot=r(sXe," \u2014 "),Ere=n(sXe,"A",{href:!0});var MQt=s(Ere);dot=r(MQt,"FlaxElectraForMultipleChoice"),MQt.forEach(t),cot=r(sXe," (ELECTRA model)"),sXe.forEach(t),mot=i(Eo),E6=n(Eo,"LI",{});var lXe=s(E6);X6e=n(lXe,"STRONG",{});var EQt=s(X6e);fot=r(EQt,"roberta"),EQt.forEach(t),got=r(lXe," \u2014 "),Cre=n(lXe,"A",{href:!0});var CQt=s(Cre);hot=r(CQt,"FlaxRobertaForMultipleChoice"),CQt.forEach(t),uot=r(lXe," (RoBERTa model)"),lXe.forEach(t),pot=i(Eo),C6=n(Eo,"LI",{});var iXe=s(C6);z6e=n(iXe,"STRONG",{});var wQt=s(z6e);_ot=r(wQt,"roformer"),wQt.forEach(t),bot=r(iXe," \u2014 "),wre=n(iXe,"A",{href:!0});var AQt=s(wre);vot=r(AQt,"FlaxRoFormerForMultipleChoice"),AQt.forEach(t),Fot=r(iXe," (RoFormer model)"),iXe.forEach(t),Tot=i(Eo),w6=n(Eo,"LI",{});var dXe=s(w6);Q6e=n(dXe,"STRONG",{});var LQt=s(Q6e);Mot=r(LQt,"xlm-roberta"),LQt.forEach(t),Eot=r(dXe," \u2014 "),Are=n(dXe,"A",{href:!0});var yQt=s(Are);Cot=r(yQt,"FlaxXLMRobertaForMultipleChoice"),yQt.forEach(t),wot=r(dXe," (XLM-RoBERTa model)"),dXe.forEach(t),Eo.forEach(t),Aot=i(Ti),T(A6.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),gQe=i(m),Mm=n(m,"H2",{class:!0});var MHe=s(Mm);L6=n(MHe,"A",{id:!0,class:!0,href:!0});var xQt=s(L6);W6e=n(xQt,"SPAN",{});var $Qt=s(W6e);T(rk.$$.fragment,$Qt),$Qt.forEach(t),xQt.forEach(t),Lot=i(MHe),H6e=n(MHe,"SPAN",{});var kQt=s(H6e);yot=r(kQt,"FlaxAutoModelForNextSentencePrediction"),kQt.forEach(t),MHe.forEach(t),hQe=i(m),Cr=n(m,"DIV",{class:!0});var Mi=s(Cr);T(tk.$$.fragment,Mi),xot=i(Mi),Em=n(Mi,"P",{});var yae=s(Em);$ot=r(yae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Lre=n(yae,"A",{href:!0});var SQt=s(Lre);kot=r(SQt,"from_pretrained()"),SQt.forEach(t),Sot=r(yae," class method or the "),yre=n(yae,"A",{href:!0});var RQt=s(yre);Rot=r(RQt,"from_config()"),RQt.forEach(t),Pot=r(yae,` class
method.`),yae.forEach(t),Bot=i(Mi),ak=n(Mi,"P",{});var EHe=s(ak);Not=r(EHe,"This class cannot be instantiated directly using "),U6e=n(EHe,"CODE",{});var PQt=s(U6e);Iot=r(PQt,"__init__()"),PQt.forEach(t),qot=r(EHe," (throws an error)."),EHe.forEach(t),jot=i(Mi),ra=n(Mi,"DIV",{class:!0});var KL=s(ra);T(nk.$$.fragment,KL),Dot=i(KL),J6e=n(KL,"P",{});var BQt=s(J6e);Got=r(BQt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),BQt.forEach(t),Oot=i(KL),Cm=n(KL,"P",{});var xae=s(Cm);Vot=r(xae,`Note:
Loading a model from its configuration file does `),Y6e=n(xae,"STRONG",{});var NQt=s(Y6e);Xot=r(NQt,"not"),NQt.forEach(t),zot=r(xae,` load the model weights. It only affects the
model\u2019s configuration. Use `),xre=n(xae,"A",{href:!0});var IQt=s(xre);Qot=r(IQt,"from_pretrained()"),IQt.forEach(t),Wot=r(xae," to load the model weights."),xae.forEach(t),Hot=i(KL),T(y6.$$.fragment,KL),KL.forEach(t),Uot=i(Mi),Kr=n(Mi,"DIV",{class:!0});var Ei=s(Kr);T(sk.$$.fragment,Ei),Jot=i(Ei),K6e=n(Ei,"P",{});var qQt=s(K6e);Yot=r(qQt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),qQt.forEach(t),Kot=i(Ei),$n=n(Ei,"P",{});var ZL=s($n);Zot=r(ZL,"The model class to instantiate is selected based on the "),Z6e=n(ZL,"CODE",{});var jQt=s(Z6e);ert=r(jQt,"model_type"),jQt.forEach(t),ort=r(ZL,` property of the config object (either
passed as an argument or loaded from `),e7e=n(ZL,"CODE",{});var DQt=s(e7e);rrt=r(DQt,"pretrained_model_name_or_path"),DQt.forEach(t),trt=r(ZL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o7e=n(ZL,"CODE",{});var GQt=s(o7e);art=r(GQt,"pretrained_model_name_or_path"),GQt.forEach(t),nrt=r(ZL,":"),ZL.forEach(t),srt=i(Ei),r7e=n(Ei,"UL",{});var OQt=s(r7e);x6=n(OQt,"LI",{});var cXe=s(x6);t7e=n(cXe,"STRONG",{});var VQt=s(t7e);lrt=r(VQt,"bert"),VQt.forEach(t),irt=r(cXe," \u2014 "),$re=n(cXe,"A",{href:!0});var XQt=s($re);drt=r(XQt,"FlaxBertForNextSentencePrediction"),XQt.forEach(t),crt=r(cXe," (BERT model)"),cXe.forEach(t),OQt.forEach(t),mrt=i(Ei),T($6.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),uQe=i(m),wm=n(m,"H2",{class:!0});var CHe=s(wm);k6=n(CHe,"A",{id:!0,class:!0,href:!0});var zQt=s(k6);a7e=n(zQt,"SPAN",{});var QQt=s(a7e);T(lk.$$.fragment,QQt),QQt.forEach(t),zQt.forEach(t),frt=i(CHe),n7e=n(CHe,"SPAN",{});var WQt=s(n7e);grt=r(WQt,"FlaxAutoModelForImageClassification"),WQt.forEach(t),CHe.forEach(t),pQe=i(m),wr=n(m,"DIV",{class:!0});var Ci=s(wr);T(ik.$$.fragment,Ci),hrt=i(Ci),Am=n(Ci,"P",{});var $ae=s(Am);urt=r($ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),kre=n($ae,"A",{href:!0});var HQt=s(kre);prt=r(HQt,"from_pretrained()"),HQt.forEach(t),_rt=r($ae," class method or the "),Sre=n($ae,"A",{href:!0});var UQt=s(Sre);brt=r(UQt,"from_config()"),UQt.forEach(t),vrt=r($ae,` class
method.`),$ae.forEach(t),Frt=i(Ci),dk=n(Ci,"P",{});var wHe=s(dk);Trt=r(wHe,"This class cannot be instantiated directly using "),s7e=n(wHe,"CODE",{});var JQt=s(s7e);Mrt=r(JQt,"__init__()"),JQt.forEach(t),Ert=r(wHe," (throws an error)."),wHe.forEach(t),Crt=i(Ci),ta=n(Ci,"DIV",{class:!0});var ey=s(ta);T(ck.$$.fragment,ey),wrt=i(ey),l7e=n(ey,"P",{});var YQt=s(l7e);Art=r(YQt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),YQt.forEach(t),Lrt=i(ey),Lm=n(ey,"P",{});var kae=s(Lm);yrt=r(kae,`Note:
Loading a model from its configuration file does `),i7e=n(kae,"STRONG",{});var KQt=s(i7e);xrt=r(KQt,"not"),KQt.forEach(t),$rt=r(kae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rre=n(kae,"A",{href:!0});var ZQt=s(Rre);krt=r(ZQt,"from_pretrained()"),ZQt.forEach(t),Srt=r(kae," to load the model weights."),kae.forEach(t),Rrt=i(ey),T(S6.$$.fragment,ey),ey.forEach(t),Prt=i(Ci),Zr=n(Ci,"DIV",{class:!0});var wi=s(Zr);T(mk.$$.fragment,wi),Brt=i(wi),d7e=n(wi,"P",{});var eWt=s(d7e);Nrt=r(eWt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),eWt.forEach(t),Irt=i(wi),kn=n(wi,"P",{});var oy=s(kn);qrt=r(oy,"The model class to instantiate is selected based on the "),c7e=n(oy,"CODE",{});var oWt=s(c7e);jrt=r(oWt,"model_type"),oWt.forEach(t),Drt=r(oy,` property of the config object (either
passed as an argument or loaded from `),m7e=n(oy,"CODE",{});var rWt=s(m7e);Grt=r(rWt,"pretrained_model_name_or_path"),rWt.forEach(t),Ort=r(oy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f7e=n(oy,"CODE",{});var tWt=s(f7e);Vrt=r(tWt,"pretrained_model_name_or_path"),tWt.forEach(t),Xrt=r(oy,":"),oy.forEach(t),zrt=i(wi),fk=n(wi,"UL",{});var AHe=s(fk);R6=n(AHe,"LI",{});var mXe=s(R6);g7e=n(mXe,"STRONG",{});var aWt=s(g7e);Qrt=r(aWt,"beit"),aWt.forEach(t),Wrt=r(mXe," \u2014 "),Pre=n(mXe,"A",{href:!0});var nWt=s(Pre);Hrt=r(nWt,"FlaxBeitForImageClassification"),nWt.forEach(t),Urt=r(mXe," (BEiT model)"),mXe.forEach(t),Jrt=i(AHe),P6=n(AHe,"LI",{});var fXe=s(P6);h7e=n(fXe,"STRONG",{});var sWt=s(h7e);Yrt=r(sWt,"vit"),sWt.forEach(t),Krt=r(fXe," \u2014 "),Bre=n(fXe,"A",{href:!0});var lWt=s(Bre);Zrt=r(lWt,"FlaxViTForImageClassification"),lWt.forEach(t),ett=r(fXe," (ViT model)"),fXe.forEach(t),AHe.forEach(t),ott=i(wi),T(B6.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),_Qe=i(m),ym=n(m,"H2",{class:!0});var LHe=s(ym);N6=n(LHe,"A",{id:!0,class:!0,href:!0});var iWt=s(N6);u7e=n(iWt,"SPAN",{});var dWt=s(u7e);T(gk.$$.fragment,dWt),dWt.forEach(t),iWt.forEach(t),rtt=i(LHe),p7e=n(LHe,"SPAN",{});var cWt=s(p7e);ttt=r(cWt,"FlaxAutoModelForVision2Seq"),cWt.forEach(t),LHe.forEach(t),bQe=i(m),Ar=n(m,"DIV",{class:!0});var Ai=s(Ar);T(hk.$$.fragment,Ai),att=i(Ai),xm=n(Ai,"P",{});var Sae=s(xm);ntt=r(Sae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Nre=n(Sae,"A",{href:!0});var mWt=s(Nre);stt=r(mWt,"from_pretrained()"),mWt.forEach(t),ltt=r(Sae," class method or the "),Ire=n(Sae,"A",{href:!0});var fWt=s(Ire);itt=r(fWt,"from_config()"),fWt.forEach(t),dtt=r(Sae,` class
method.`),Sae.forEach(t),ctt=i(Ai),uk=n(Ai,"P",{});var yHe=s(uk);mtt=r(yHe,"This class cannot be instantiated directly using "),_7e=n(yHe,"CODE",{});var gWt=s(_7e);ftt=r(gWt,"__init__()"),gWt.forEach(t),gtt=r(yHe," (throws an error)."),yHe.forEach(t),htt=i(Ai),aa=n(Ai,"DIV",{class:!0});var ry=s(aa);T(pk.$$.fragment,ry),utt=i(ry),b7e=n(ry,"P",{});var hWt=s(b7e);ptt=r(hWt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),hWt.forEach(t),_tt=i(ry),$m=n(ry,"P",{});var Rae=s($m);btt=r(Rae,`Note:
Loading a model from its configuration file does `),v7e=n(Rae,"STRONG",{});var uWt=s(v7e);vtt=r(uWt,"not"),uWt.forEach(t),Ftt=r(Rae,` load the model weights. It only affects the
model\u2019s configuration. Use `),qre=n(Rae,"A",{href:!0});var pWt=s(qre);Ttt=r(pWt,"from_pretrained()"),pWt.forEach(t),Mtt=r(Rae," to load the model weights."),Rae.forEach(t),Ett=i(ry),T(I6.$$.fragment,ry),ry.forEach(t),Ctt=i(Ai),et=n(Ai,"DIV",{class:!0});var Li=s(et);T(_k.$$.fragment,Li),wtt=i(Li),F7e=n(Li,"P",{});var _Wt=s(F7e);Att=r(_Wt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),_Wt.forEach(t),Ltt=i(Li),Sn=n(Li,"P",{});var ty=s(Sn);ytt=r(ty,"The model class to instantiate is selected based on the "),T7e=n(ty,"CODE",{});var bWt=s(T7e);xtt=r(bWt,"model_type"),bWt.forEach(t),$tt=r(ty,` property of the config object (either
passed as an argument or loaded from `),M7e=n(ty,"CODE",{});var vWt=s(M7e);ktt=r(vWt,"pretrained_model_name_or_path"),vWt.forEach(t),Stt=r(ty,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E7e=n(ty,"CODE",{});var FWt=s(E7e);Rtt=r(FWt,"pretrained_model_name_or_path"),FWt.forEach(t),Ptt=r(ty,":"),ty.forEach(t),Btt=i(Li),C7e=n(Li,"UL",{});var TWt=s(C7e);q6=n(TWt,"LI",{});var gXe=s(q6);w7e=n(gXe,"STRONG",{});var MWt=s(w7e);Ntt=r(MWt,"vision-encoder-decoder"),MWt.forEach(t),Itt=r(gXe," \u2014 "),jre=n(gXe,"A",{href:!0});var EWt=s(jre);qtt=r(EWt,"FlaxVisionEncoderDecoderModel"),EWt.forEach(t),jtt=r(gXe," (Vision Encoder decoder model)"),gXe.forEach(t),TWt.forEach(t),Dtt=i(Li),T(j6.$$.fragment,Li),Li.forEach(t),Ai.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(xUt)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(Pn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(Nn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c(In,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(Pi,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(qm,"id","extending-the-auto-classes"),c(qm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qm,"href","#extending-the-auto-classes"),c(Bi,"class","relative group"),c(Dm,"id","transformers.AutoConfig"),c(Dm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dm,"href","#transformers.AutoConfig"),c(Ni,"class","relative group"),c(QS,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(WS,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(HS,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(US,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(JS,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(YS,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(KS,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(ZS,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(eR,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(oR,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(rR,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig"),c(tR,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(aR,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(nR,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(sR,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig"),c(lR,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(iR,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(dR,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(cR,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig"),c(mR,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(fR,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(gR,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(hR,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(uR,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(pR,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(_R,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(bR,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(vR,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(FR,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(TR,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(MR,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(ER,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(CR,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(wR,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),c(AR,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(LR,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(yR,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(xR,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c($R,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(kR,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(SR,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(RR,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(PR,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig"),c(BR,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(NR,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(IR,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(qR,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(jR,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(DR,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(GR,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(OR,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig"),c(VR,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(XR,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config"),c(zR,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(QR,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(WR,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(HR,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(UR,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(JR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(YR,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig"),c(KR,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(ZR,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(eP,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(oP,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(rP,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(tP,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig"),c(aP,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig"),c(nP,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(sP,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(lP,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),c(iP,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(dP,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(cP,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(mP,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(fP,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(gP,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(hP,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(uP,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(pP,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(_P,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(bP,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(vP,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(FP,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(TP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(MP,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(EP,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(CP,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(wP,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(AP,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(LP,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(yP,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(xP,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c($P,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(kP,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(SP,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(RP,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(PP,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(BP,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(NP,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(IP,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(qP,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(jP,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(DP,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(GP,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(OP,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(VP,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(XP,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(zP,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(QP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(WP,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(HP,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(UP,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(JP,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(YP,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(KP,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(ZP,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(eB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(oB,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(rB,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eh,"id","transformers.AutoTokenizer"),c(eh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eh,"href","#transformers.AutoTokenizer"),c(qi,"class","relative group"),c(tB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(aB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(nB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(sB,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(lB,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(iB,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(dB,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(cB,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(mB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(fB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(gB,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(hB,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(uB,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(pB,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(_B,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(bB,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(vB,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(FB,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(TB,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(MB,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(EB,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(CB,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(wB,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(AB,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(LB,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(yB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(xB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c($B,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(kB,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(SB,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(RB,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(PB,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(BB,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(NB,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(IB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(qB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(jB,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(DB,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(GB,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(OB,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(VB,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(XB,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(zB,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(QB,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(WB,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(HB,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(UB,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(JB,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(YB,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(KB,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(ZB,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(eN,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(oN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(rN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(tN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(aN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(nN,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(sN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(lN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(iN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(dN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(cN,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(mN,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(fN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(gN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(hN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(uN,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(pN,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(_N,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(bN,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(vN,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(FN,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(TN,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(MN,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(EN,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(CN,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(wN,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(AN,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(LN,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(yN,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(xN,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c($N,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(kN,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(SN,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(RN,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(PN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(BN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(NN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(IN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(qN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(jN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(DN,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(GN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(ON,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(VN,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(XN,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(zN,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(QN,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(WN,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizer"),c(HN,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(UN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(JN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(YN,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizer"),c(KN,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(ZN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(eI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(oI,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(rI,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(tI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(aI,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(nI,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(sI,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(lI,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(iI,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(dI,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(cI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(mI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(fI,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(gI,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(hI,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(uI,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(pI,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(_I,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(bI,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(vI,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(FI,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(TI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(MI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(EI,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(CI,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(wI,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(AI,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(LI,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(yI,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(xI,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c($I,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(kI,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(SI,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(RI,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(PI,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(BI,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(NI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(II,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(qI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(jI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(DI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(GI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(OI,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(VI,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(XI,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(zI,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(QI,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(WI,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(HI,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(UI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(JI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(YI,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(KI,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(ZI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(eq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nh,"id","transformers.AutoFeatureExtractor"),c(Nh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nh,"href","#transformers.AutoFeatureExtractor"),c(ji,"class","relative group"),c(oq,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(rq,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(tq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(aq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(nq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(sq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(lq,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(iq,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(dq,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(cq,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(mq,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(fq,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(gq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(hq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(uq,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(pq,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(_q,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(bq,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(vq,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(Fq,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(Tq,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(Mq,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(Eq,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(Cq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(wq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Aq,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(Lq,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(yq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(xq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c($q,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(kq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Sq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Rq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Pq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Bq,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fu,"id","transformers.AutoProcessor"),c(Fu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fu,"href","#transformers.AutoProcessor"),c(Di,"class","relative group"),c(Nq,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(Iq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(qq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(jq,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(Dq,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(Gq,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(Oq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Vq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Xq,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(zq,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(Qq,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(Wq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Hq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Uq,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(Jq,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(Yq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Kq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Zq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ou,"id","transformers.AutoModel"),c(Ou,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ou,"href","#transformers.AutoModel"),c(Oi,"class","relative group"),c(ej,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(aj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(nj,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(sj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(lj,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(ij,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(dj,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(cj,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(mj,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(fj,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel"),c(gj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(hj,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(uj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(pj,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel"),c(_j,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(bj,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(vj,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(Fj,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel"),c(Tj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(Mj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(Ej,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(Cj,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(wj,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(Aj,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(Lj,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(yj,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(xj,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c($j,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(kj,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(Sj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(Rj,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(Pj,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),c(Bj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(Nj,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(Ij,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(qj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(jj,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(Dj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(Gj,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Oj,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Vj,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(Xj,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel"),c(zj,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(Qj,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c(Wj,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Hj,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Uj,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Jj,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Yj,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(Kj,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitModel"),c(Zj,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(eD,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model"),c(oD,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(rD,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(tD,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(aD,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(nD,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(sD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(lD,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel"),c(iD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(dD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(cD,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel"),c(mD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(fD,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(gD,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel"),c(hD,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel"),c(uD,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(pD,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(_D,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(bD,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),c(vD,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(FD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(TD,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(MD,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(ED,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(CD,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(wD,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(AD,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(LD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(yD,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(xD,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c($D,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(kD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(SD,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(RD,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(PD,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(BD,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(ND,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(ID,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(qD,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(jD,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(DD,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(GD,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(OD,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(VD,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(XD,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(zD,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(QD,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(WD,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(HD,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(UD,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(JD,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(YD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(KD,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(ZD,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(eG,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(oG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(rG,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(tG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(aG,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(nG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(sG,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(lG,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U_,"id","transformers.AutoModelForPreTraining"),c(U_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U_,"href","#transformers.AutoModelForPreTraining"),c(zi,"class","relative group"),c(iG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(fG,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(gG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(hG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(uG,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(pG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(_G,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(bG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(vG,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(FG,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(TG,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(MG,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(EG,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(CG,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),c(wG,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(AG,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(LG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(yG,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(xG,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c($G,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(kG,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(SG,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(RG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(PG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(BG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(NG,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(IG,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(qG,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(jG,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(DG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(GG,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(OG,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(VG,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(XG,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(zG,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(QG,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(WG,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(HG,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(UG,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(JG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(YG,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(KG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(ZG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(eO,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(oO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X2,"id","transformers.AutoModelForCausalLM"),c(X2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X2,"href","#transformers.AutoModelForCausalLM"),c(Hi,"class","relative group"),c(rO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nO,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(sO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(lO,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(iO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(dO,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(cO,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(mO,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(fO,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(gO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(hO,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(uO,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(pO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(_O,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(bO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(vO,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(FO,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(TO,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(MO,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(EO,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(CO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(wO,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM"),c(AO,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(LO,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),c(yO,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(xO,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c($O,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(kO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(SO,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(RO,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(PO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(BO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(NO,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(IO,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(qO,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(jO,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(DO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(GO,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(OO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(VO,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(XO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pb,"id","transformers.AutoModelForMaskedLM"),c(Pb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pb,"href","#transformers.AutoModelForMaskedLM"),c(Yi,"class","relative group"),c(zO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(UO,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(JO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(YO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(KO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(ZO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(eV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(oV,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(rV,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(tV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(aV,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(nV,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(sV,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(lV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(iV,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(dV,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(cV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(mV,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(fV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(gV,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(hV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(uV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(pV,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(_V,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(bV,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(vV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(FV,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(TV,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(MV,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(EV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(CV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(wV,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(AV,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(LV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(yV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(xV,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c($V,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mv,"id","transformers.AutoModelForSeq2SeqLM"),c(Mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mv,"href","#transformers.AutoModelForSeq2SeqLM"),c(ed,"class","relative group"),c(kV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PV,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(BV,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(NV,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(IV,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(qV,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(jV,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(DV,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(GV,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(OV,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(VV,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(XV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(zV,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(QV,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(WV,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(HV,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(UV,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(JV,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(YV,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(KV,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zv,"id","transformers.AutoModelForSequenceClassification"),c(zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zv,"href","#transformers.AutoModelForSequenceClassification"),c(td,"class","relative group"),c(ZV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rX,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(tX,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(aX,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(nX,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(sX,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(lX,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(iX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(dX,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(cX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(mX,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(fX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(gX,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(hX,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(uX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(pX,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(_X,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(bX,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(vX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(FX,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(TX,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(MX,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(EX,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(CX,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(wX,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(AX,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(LX,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(yX,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(xX,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c($X,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(kX,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(SX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(RX,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(PX,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(BX,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(NX,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(IX,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification"),c(qX,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(jX,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(DX,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(GX,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(OX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(VX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(XX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(zX,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(QX,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(WX,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(HX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(UX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(JX,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(YX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(KX,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q1,"id","transformers.AutoModelForMultipleChoice"),c(Q1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q1,"href","#transformers.AutoModelForMultipleChoice"),c(sd,"class","relative group"),c(ZX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ez,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rz,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(tz,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(az,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(nz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(sz,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(lz,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(iz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(dz,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(cz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(mz,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(fz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(gz,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(hz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(uz,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(pz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(_z,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(bz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(vz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(Fz,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(Tz,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(Mz,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(Ez,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(Cz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(wz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(Az,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(Lz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(yz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(xz,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c($z,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(kz,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AF,"id","transformers.AutoModelForNextSentencePrediction"),c(AF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AF,"href","#transformers.AutoModelForNextSentencePrediction"),c(dd,"class","relative group"),c(Sz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bz,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(Nz,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(Iz,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(qz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(jz,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(Dz,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NF,"id","transformers.AutoModelForTokenClassification"),c(NF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NF,"href","#transformers.AutoModelForTokenClassification"),c(fd,"class","relative group"),c(Gz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xz,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(zz,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(Qz,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(Wz,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(Hz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(Uz,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(Jz,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(Yz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(Kz,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(Zz,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(eQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(oQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(rQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(tQ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(aQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(nQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(sQ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(lQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(iQ,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(dQ,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(cQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(mQ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(fQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(gQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(hQ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(uQ,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(pQ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(_Q,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(bQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(vQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(FQ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(TQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(MQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(EQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(CQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(wQ,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MT,"id","transformers.AutoModelForQuestionAnswering"),c(MT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MT,"href","#transformers.AutoModelForQuestionAnswering"),c(ud,"class","relative group"),c(AQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c($Q,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(kQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(SQ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(RQ,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(PQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(BQ,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(NQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(IQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(qQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(jQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(DQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(GQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(OQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(VQ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(XQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(zQ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(QQ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(WQ,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(HQ,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(UQ,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(JQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(YQ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(KQ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(ZQ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(eW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(oW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(rW,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(tW,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(aW,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(nW,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(sW,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(lW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(iW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(dW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(cW,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(mW,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(fW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(gW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(hW,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(uW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(pW,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hM,"id","transformers.AutoModelForTableQuestionAnswering"),c(hM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hM,"href","#transformers.AutoModelForTableQuestionAnswering"),c(bd,"class","relative group"),c(_W,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vM,"id","transformers.AutoModelForImageClassification"),c(vM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vM,"href","#transformers.AutoModelForImageClassification"),c(Td,"class","relative group"),c(TW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CW,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(wW,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(AW,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification"),c(LW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(yW,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(xW,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c($W,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(kW,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification"),c(SW,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(RW,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(PW,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(BW,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(NW,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(IW,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(qW,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(jW,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(DW,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(GW,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(OW,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(VW,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NM,"id","transformers.AutoModelForVision2Seq"),c(NM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NM,"href","#transformers.AutoModelForVision2Seq"),c(Cd,"class","relative group"),c(XW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WW,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GM,"id","transformers.AutoModelForVisualQuestionAnswering"),c(GM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GM,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Ld,"class","relative group"),c(HW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YW,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QM,"id","transformers.AutoModelForAudioClassification"),c(QM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QM,"href","#transformers.AutoModelForAudioClassification"),c($d,"class","relative group"),c(KW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(rH,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(tH,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(aH,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(nH,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(sH,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(lH,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(iH,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(dH,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n4,"id","transformers.AutoModelForAudioFrameClassification"),c(n4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n4,"href","#transformers.AutoModelForAudioFrameClassification"),c(Rd,"class","relative group"),c(cH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(hH,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(uH,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(pH,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(_H,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h4,"id","transformers.AutoModelForCTC"),c(h4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h4,"href","#transformers.AutoModelForCTC"),c(Nd,"class","relative group"),c(bH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(MH,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(EH,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC"),c(CH,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(wH,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(AH,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(LH,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(yH,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(xH,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c($H,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y4,"id","transformers.AutoModelForSpeechSeq2Seq"),c(y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y4,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(jd,"class","relative group"),c(kH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PH,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(BH,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P4,"id","transformers.AutoModelForAudioXVector"),c(P4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P4,"href","#transformers.AutoModelForAudioXVector"),c(Od,"class","relative group"),c(NH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(DH,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(GH,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(OH,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(VH,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V4,"id","transformers.AutoModelForMaskedImageModeling"),c(V4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V4,"href","#transformers.AutoModelForMaskedImageModeling"),c(zd,"class","relative group"),c(XH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WH,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(HH,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(UH,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J4,"id","transformers.AutoModelForObjectDetection"),c(J4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J4,"href","#transformers.AutoModelForObjectDetection"),c(Ud,"class","relative group"),c(JH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZH,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(eU,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rE,"id","transformers.AutoModelForImageSegmentation"),c(rE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rE,"href","#transformers.AutoModelForImageSegmentation"),c(Kd,"class","relative group"),c(oU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aU,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lE,"id","transformers.AutoModelForSemanticSegmentation"),c(lE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lE,"href","#transformers.AutoModelForSemanticSegmentation"),c(oc,"class","relative group"),c(nU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iU,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(dU,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(cU,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(mU,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(fU,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pE,"id","transformers.AutoModelForInstanceSegmentation"),c(pE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pE,"href","#transformers.AutoModelForInstanceSegmentation"),c(ac,"class","relative group"),c(gU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pU,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TE,"id","transformers.TFAutoModel"),c(TE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TE,"href","#transformers.TFAutoModel"),c(lc,"class","relative group"),c(_U,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FU,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(TU,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(MU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(EU,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(CU,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(wU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(AU,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(LU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(yU,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(xU,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c($U,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(kU,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(SU,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(RU,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel"),c(PU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(BU,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(NU,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(IU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(qU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(jU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(DU,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(GU,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(OU,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(VU,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(XU,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(zU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(QU,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(WU,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(HU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(UU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(JU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(YU,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(KU,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(ZU,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel"),c(eJ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(oJ,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel"),c(rJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(tJ,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel"),c(aJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(nJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(sJ,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(lJ,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),c(iJ,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(dJ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(cJ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(mJ,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(fJ,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(gJ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(hJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(uJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(pJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vC,"id","transformers.TFAutoModelForPreTraining"),c(vC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vC,"href","#transformers.TFAutoModelForPreTraining"),c(cc,"class","relative group"),c(_J,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(TJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(MJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(EJ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(CJ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(wJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(AJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(LJ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(yJ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(xJ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c($J,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(kJ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(SJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(RJ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(PJ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(BJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(NJ,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(IJ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(qJ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(jJ,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(DJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(GJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(OJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zC,"id","transformers.TFAutoModelForCausalLM"),c(zC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zC,"href","#transformers.TFAutoModelForCausalLM"),c(gc,"class","relative group"),c(VJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(WJ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(HJ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(UJ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(JJ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(YJ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(KJ,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(ZJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(eY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(oY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(rY,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(tY,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(aY,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l3,"id","transformers.TFAutoModelForImageClassification"),c(l3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l3,"href","#transformers.TFAutoModelForImageClassification"),c(pc,"class","relative group"),c(nY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iY,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(dY,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(cY,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(mY,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(fY,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(gY,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(hY,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(uY,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p3,"id","transformers.TFAutoModelForMaskedLM"),c(p3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p3,"href","#transformers.TFAutoModelForMaskedLM"),c(vc,"class","relative group"),c(pY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Y,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vY,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(FY,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(TY,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(MY,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(EY,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(CY,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(wY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(AY,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(LY,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(yY,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(xY,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c($Y,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(kY,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(SY,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(RY,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(PY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(BY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(NY,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(IY,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(qY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j3,"id","transformers.TFAutoModelForSeq2SeqLM"),c(j3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j3,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Mc,"class","relative group"),c(jY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OY,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(VY,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(XY,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(zY,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(QY,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(WY,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(HY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(UY,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(JY,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(YY,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K3,"id","transformers.TFAutoModelForSequenceClassification"),c(K3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K3,"href","#transformers.TFAutoModelForSequenceClassification"),c(wc,"class","relative group"),c(KY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oK,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(rK,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(tK,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(aK,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(nK,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(sK,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(lK,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(iK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(dK,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(cK,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(mK,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(fK,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(gK,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(hK,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(uK,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(pK,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(_K,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(bK,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(vK,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(FK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(TK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(MK,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(EK,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(CK,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(wK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(AK,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L5,"id","transformers.TFAutoModelForMultipleChoice"),c(L5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L5,"href","#transformers.TFAutoModelForMultipleChoice"),c(yc,"class","relative group"),c(LK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($K,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(kK,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(SK,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(RK,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(PK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(BK,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(NK,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(IK,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(qK,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(jK,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(DK,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(GK,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(OK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(VK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(XK,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(zK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(QK,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W5,"id","transformers.TFAutoModelForNextSentencePrediction"),c(W5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W5,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(kc,"class","relative group"),c(WK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JK,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(YK,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K5,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(K5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K5,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Pc,"class","relative group"),c(KK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oZ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r0,"id","transformers.TFAutoModelForTokenClassification"),c(r0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r0,"href","#transformers.TFAutoModelForTokenClassification"),c(Ic,"class","relative group"),c(rZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(sZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(lZ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(iZ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(dZ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(cZ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(mZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(fZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(gZ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(hZ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(uZ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(pZ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(_Z,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(bZ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(vZ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(FZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(TZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(MZ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(EZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(CZ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w0,"id","transformers.TFAutoModelForQuestionAnswering"),c(w0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w0,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Dc,"class","relative group"),c(wZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(xZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c($Z,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(kZ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(SZ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(RZ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(PZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(BZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(NZ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(IZ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(qZ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(jZ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(DZ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(GZ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(OZ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(VZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(XZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(zZ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(QZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(WZ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H0,"id","transformers.TFAutoModelForVision2Seq"),c(H0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H0,"href","#transformers.TFAutoModelForVision2Seq"),c(Vc,"class","relative group"),c(HZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YZ,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K0,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(K0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K0,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Qc,"class","relative group"),c(KZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oee,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rw,"id","transformers.FlaxAutoModel"),c(rw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rw,"href","#transformers.FlaxAutoModel"),c(Uc,"class","relative group"),c(ree,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nee,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(see,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(lee,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(iee,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(dee,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(cee,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(mee,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(fee,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(gee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(hee,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(uee,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(pee,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(_ee,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(bee,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(vee,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(Fee,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(Tee,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(Mee,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel"),c(Eee,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(Cee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(wee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(Aee,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(Lee,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(yee,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(xee,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c($ee,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(kee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sw,"id","transformers.FlaxAutoModelForCausalLM"),c(Sw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sw,"href","#transformers.FlaxAutoModelForCausalLM"),c(Kc,"class","relative group"),c(See,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ree,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bee,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Nee,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(Iee,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(qee,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(jee,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(Dee,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(Gee,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(Oee,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(Vee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(Xee,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zw,"id","transformers.FlaxAutoModelForPreTraining"),c(zw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zw,"href","#transformers.FlaxAutoModelForPreTraining"),c(om,"class","relative group"),c(zee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Wee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hee,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(Uee,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Jee,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(Yee,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Kee,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(Zee,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(eoe,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(ooe,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(roe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(toe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(aoe,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(noe,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(soe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lA,"id","transformers.FlaxAutoModelForMaskedLM"),c(lA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lA,"href","#transformers.FlaxAutoModelForMaskedLM"),c(am,"class","relative group"),c(loe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ioe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(doe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(coe,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(moe,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(foe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(goe,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(hoe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(uoe,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(poe,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(_oe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(boe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(voe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FA,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(FA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FA,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(lm,"class","relative group"),c(Foe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Toe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Moe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eoe,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Coe,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(woe,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(Aoe,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(Loe,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(yoe,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(xoe,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c($oe,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(koe,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Soe,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RA,"id","transformers.FlaxAutoModelForSequenceClassification"),c(RA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RA,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(cm,"class","relative group"),c(Roe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Poe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Boe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Noe,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Ioe,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(qoe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(joe,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Doe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Goe,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Ooe,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Voe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Xoe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(zoe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QA,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(QA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QA,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(gm,"class","relative group"),c(Qoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Woe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uoe,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Joe,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Yoe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Koe,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Zoe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(ere,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(ore,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(rre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(tre,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(are,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n6,"id","transformers.FlaxAutoModelForTokenClassification"),c(n6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n6,"href","#transformers.FlaxAutoModelForTokenClassification"),c(pm,"class","relative group"),c(nre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ire,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(dre,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(cre,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(mre,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(fre,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(gre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(hre,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(ure,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p6,"id","transformers.FlaxAutoModelForMultipleChoice"),c(p6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p6,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(vm,"class","relative group"),c(pre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_re,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vre,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Fre,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Tre,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Mre,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Ere,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Cre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(wre,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Are,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L6,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(L6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L6,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Mm,"class","relative group"),c(Lre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($re,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k6,"id","transformers.FlaxAutoModelForImageClassification"),c(k6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k6,"href","#transformers.FlaxAutoModelForImageClassification"),c(wm,"class","relative group"),c(kre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pre,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Bre,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N6,"id","transformers.FlaxAutoModelForVision2Seq"),c(N6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N6,"href","#transformers.FlaxAutoModelForVision2Seq"),c(ym,"class","relative group"),c(Nre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ire,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jre,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,v,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,Co),e(Co,yi),b(m,Pm,_),b(m,lt,_),e(lt,xi),e(lt,$i),e($i,ay),e(lt,Bm),b(m,Oe,_),b(m,We,_),e(We,ki),e(We,Pn),e(Pn,ny),e(We,Bn),e(We,Nn),e(Nn,sy),e(We,Si),e(We,In),e(In,ly),e(We,Ri),b(m,Nm,_),M(Sa,m,_),b(m,He,_),b(m,Ae,_),e(Ae,DS),e(Ae,Pi),e(Pi,GS),e(Ae,OS),b(m,wo,_),b(m,Ra,_),e(Ra,VS),e(Ra,Im),e(Im,XS),e(Ra,xHe),b(m,hXe,_),b(m,Bi,_),e(Bi,qm),e(qm,Pae),M(iy,Pae,null),e(Bi,$He),e(Bi,Bae),e(Bae,kHe),b(m,uXe,_),b(m,qn,_),e(qn,SHe),e(qn,Nae),e(Nae,RHe),e(qn,PHe),e(qn,Iae),e(Iae,BHe),e(qn,NHe),b(m,pXe,_),M(dy,m,_),b(m,_Xe,_),b(m,zS,_),e(zS,IHe),b(m,bXe,_),M(jm,m,_),b(m,vXe,_),b(m,Ni,_),e(Ni,Dm),e(Dm,qae),M(cy,qae,null),e(Ni,qHe),e(Ni,jae),e(jae,jHe),b(m,FXe,_),b(m,Ao,_),M(my,Ao,null),e(Ao,DHe),e(Ao,fy),e(fy,GHe),e(fy,QS),e(QS,OHe),e(fy,VHe),e(Ao,XHe),e(Ao,gy),e(gy,zHe),e(gy,Dae),e(Dae,QHe),e(gy,WHe),e(Ao,HHe),e(Ao,Lr),M(hy,Lr,null),e(Lr,UHe),e(Lr,Gae),e(Gae,JHe),e(Lr,YHe),e(Lr,Ii),e(Ii,KHe),e(Ii,Oae),e(Oae,ZHe),e(Ii,eUe),e(Ii,Vae),e(Vae,oUe),e(Ii,rUe),e(Lr,tUe),e(Lr,A),e(A,Gm),e(Gm,Xae),e(Xae,aUe),e(Gm,nUe),e(Gm,WS),e(WS,sUe),e(Gm,lUe),e(A,iUe),e(A,Om),e(Om,zae),e(zae,dUe),e(Om,cUe),e(Om,HS),e(HS,mUe),e(Om,fUe),e(A,gUe),e(A,Vm),e(Vm,Qae),e(Qae,hUe),e(Vm,uUe),e(Vm,US),e(US,pUe),e(Vm,_Ue),e(A,bUe),e(A,Xm),e(Xm,Wae),e(Wae,vUe),e(Xm,FUe),e(Xm,JS),e(JS,TUe),e(Xm,MUe),e(A,EUe),e(A,zm),e(zm,Hae),e(Hae,CUe),e(zm,wUe),e(zm,YS),e(YS,AUe),e(zm,LUe),e(A,yUe),e(A,Qm),e(Qm,Uae),e(Uae,xUe),e(Qm,$Ue),e(Qm,KS),e(KS,kUe),e(Qm,SUe),e(A,RUe),e(A,Wm),e(Wm,Jae),e(Jae,PUe),e(Wm,BUe),e(Wm,ZS),e(ZS,NUe),e(Wm,IUe),e(A,qUe),e(A,Hm),e(Hm,Yae),e(Yae,jUe),e(Hm,DUe),e(Hm,eR),e(eR,GUe),e(Hm,OUe),e(A,VUe),e(A,Um),e(Um,Kae),e(Kae,XUe),e(Um,zUe),e(Um,oR),e(oR,QUe),e(Um,WUe),e(A,HUe),e(A,Jm),e(Jm,Zae),e(Zae,UUe),e(Jm,JUe),e(Jm,rR),e(rR,YUe),e(Jm,KUe),e(A,ZUe),e(A,Ym),e(Ym,ene),e(ene,eJe),e(Ym,oJe),e(Ym,tR),e(tR,rJe),e(Ym,tJe),e(A,aJe),e(A,Km),e(Km,one),e(one,nJe),e(Km,sJe),e(Km,aR),e(aR,lJe),e(Km,iJe),e(A,dJe),e(A,Zm),e(Zm,rne),e(rne,cJe),e(Zm,mJe),e(Zm,nR),e(nR,fJe),e(Zm,gJe),e(A,hJe),e(A,ef),e(ef,tne),e(tne,uJe),e(ef,pJe),e(ef,sR),e(sR,_Je),e(ef,bJe),e(A,vJe),e(A,of),e(of,ane),e(ane,FJe),e(of,TJe),e(of,lR),e(lR,MJe),e(of,EJe),e(A,CJe),e(A,rf),e(rf,nne),e(nne,wJe),e(rf,AJe),e(rf,iR),e(iR,LJe),e(rf,yJe),e(A,xJe),e(A,tf),e(tf,sne),e(sne,$Je),e(tf,kJe),e(tf,dR),e(dR,SJe),e(tf,RJe),e(A,PJe),e(A,af),e(af,lne),e(lne,BJe),e(af,NJe),e(af,cR),e(cR,IJe),e(af,qJe),e(A,jJe),e(A,nf),e(nf,ine),e(ine,DJe),e(nf,GJe),e(nf,mR),e(mR,OJe),e(nf,VJe),e(A,XJe),e(A,sf),e(sf,dne),e(dne,zJe),e(sf,QJe),e(sf,fR),e(fR,WJe),e(sf,HJe),e(A,UJe),e(A,lf),e(lf,cne),e(cne,JJe),e(lf,YJe),e(lf,gR),e(gR,KJe),e(lf,ZJe),e(A,eYe),e(A,df),e(df,mne),e(mne,oYe),e(df,rYe),e(df,hR),e(hR,tYe),e(df,aYe),e(A,nYe),e(A,cf),e(cf,fne),e(fne,sYe),e(cf,lYe),e(cf,uR),e(uR,iYe),e(cf,dYe),e(A,cYe),e(A,mf),e(mf,gne),e(gne,mYe),e(mf,fYe),e(mf,pR),e(pR,gYe),e(mf,hYe),e(A,uYe),e(A,ff),e(ff,hne),e(hne,pYe),e(ff,_Ye),e(ff,_R),e(_R,bYe),e(ff,vYe),e(A,FYe),e(A,gf),e(gf,une),e(une,TYe),e(gf,MYe),e(gf,bR),e(bR,EYe),e(gf,CYe),e(A,wYe),e(A,hf),e(hf,pne),e(pne,AYe),e(hf,LYe),e(hf,vR),e(vR,yYe),e(hf,xYe),e(A,$Ye),e(A,uf),e(uf,_ne),e(_ne,kYe),e(uf,SYe),e(uf,FR),e(FR,RYe),e(uf,PYe),e(A,BYe),e(A,pf),e(pf,bne),e(bne,NYe),e(pf,IYe),e(pf,TR),e(TR,qYe),e(pf,jYe),e(A,DYe),e(A,_f),e(_f,vne),e(vne,GYe),e(_f,OYe),e(_f,MR),e(MR,VYe),e(_f,XYe),e(A,zYe),e(A,bf),e(bf,Fne),e(Fne,QYe),e(bf,WYe),e(bf,ER),e(ER,HYe),e(bf,UYe),e(A,JYe),e(A,vf),e(vf,Tne),e(Tne,YYe),e(vf,KYe),e(vf,CR),e(CR,ZYe),e(vf,eKe),e(A,oKe),e(A,Ff),e(Ff,Mne),e(Mne,rKe),e(Ff,tKe),e(Ff,wR),e(wR,aKe),e(Ff,nKe),e(A,sKe),e(A,Tf),e(Tf,Ene),e(Ene,lKe),e(Tf,iKe),e(Tf,AR),e(AR,dKe),e(Tf,cKe),e(A,mKe),e(A,Mf),e(Mf,Cne),e(Cne,fKe),e(Mf,gKe),e(Mf,LR),e(LR,hKe),e(Mf,uKe),e(A,pKe),e(A,Ef),e(Ef,wne),e(wne,_Ke),e(Ef,bKe),e(Ef,yR),e(yR,vKe),e(Ef,FKe),e(A,TKe),e(A,Cf),e(Cf,Ane),e(Ane,MKe),e(Cf,EKe),e(Cf,xR),e(xR,CKe),e(Cf,wKe),e(A,AKe),e(A,wf),e(wf,Lne),e(Lne,LKe),e(wf,yKe),e(wf,$R),e($R,xKe),e(wf,$Ke),e(A,kKe),e(A,Af),e(Af,yne),e(yne,SKe),e(Af,RKe),e(Af,kR),e(kR,PKe),e(Af,BKe),e(A,NKe),e(A,Lf),e(Lf,xne),e(xne,IKe),e(Lf,qKe),e(Lf,SR),e(SR,jKe),e(Lf,DKe),e(A,GKe),e(A,yf),e(yf,$ne),e($ne,OKe),e(yf,VKe),e(yf,RR),e(RR,XKe),e(yf,zKe),e(A,QKe),e(A,xf),e(xf,kne),e(kne,WKe),e(xf,HKe),e(xf,PR),e(PR,UKe),e(xf,JKe),e(A,YKe),e(A,$f),e($f,Sne),e(Sne,KKe),e($f,ZKe),e($f,BR),e(BR,eZe),e($f,oZe),e(A,rZe),e(A,kf),e(kf,Rne),e(Rne,tZe),e(kf,aZe),e(kf,NR),e(NR,nZe),e(kf,sZe),e(A,lZe),e(A,Sf),e(Sf,Pne),e(Pne,iZe),e(Sf,dZe),e(Sf,IR),e(IR,cZe),e(Sf,mZe),e(A,fZe),e(A,Rf),e(Rf,Bne),e(Bne,gZe),e(Rf,hZe),e(Rf,qR),e(qR,uZe),e(Rf,pZe),e(A,_Ze),e(A,Pf),e(Pf,Nne),e(Nne,bZe),e(Pf,vZe),e(Pf,jR),e(jR,FZe),e(Pf,TZe),e(A,MZe),e(A,Bf),e(Bf,Ine),e(Ine,EZe),e(Bf,CZe),e(Bf,DR),e(DR,wZe),e(Bf,AZe),e(A,LZe),e(A,Nf),e(Nf,qne),e(qne,yZe),e(Nf,xZe),e(Nf,GR),e(GR,$Ze),e(Nf,kZe),e(A,SZe),e(A,If),e(If,jne),e(jne,RZe),e(If,PZe),e(If,OR),e(OR,BZe),e(If,NZe),e(A,IZe),e(A,qf),e(qf,Dne),e(Dne,qZe),e(qf,jZe),e(qf,VR),e(VR,DZe),e(qf,GZe),e(A,OZe),e(A,jf),e(jf,Gne),e(Gne,VZe),e(jf,XZe),e(jf,XR),e(XR,zZe),e(jf,QZe),e(A,WZe),e(A,Df),e(Df,One),e(One,HZe),e(Df,UZe),e(Df,zR),e(zR,JZe),e(Df,YZe),e(A,KZe),e(A,Gf),e(Gf,Vne),e(Vne,ZZe),e(Gf,eeo),e(Gf,QR),e(QR,oeo),e(Gf,reo),e(A,teo),e(A,Of),e(Of,Xne),e(Xne,aeo),e(Of,neo),e(Of,WR),e(WR,seo),e(Of,leo),e(A,ieo),e(A,Vf),e(Vf,zne),e(zne,deo),e(Vf,ceo),e(Vf,HR),e(HR,meo),e(Vf,feo),e(A,geo),e(A,Xf),e(Xf,Qne),e(Qne,heo),e(Xf,ueo),e(Xf,UR),e(UR,peo),e(Xf,_eo),e(A,beo),e(A,zf),e(zf,Wne),e(Wne,veo),e(zf,Feo),e(zf,JR),e(JR,Teo),e(zf,Meo),e(A,Eeo),e(A,Qf),e(Qf,Hne),e(Hne,Ceo),e(Qf,weo),e(Qf,YR),e(YR,Aeo),e(Qf,Leo),e(A,yeo),e(A,Wf),e(Wf,Une),e(Une,xeo),e(Wf,$eo),e(Wf,KR),e(KR,keo),e(Wf,Seo),e(A,Reo),e(A,Hf),e(Hf,Jne),e(Jne,Peo),e(Hf,Beo),e(Hf,ZR),e(ZR,Neo),e(Hf,Ieo),e(A,qeo),e(A,Uf),e(Uf,Yne),e(Yne,jeo),e(Uf,Deo),e(Uf,eP),e(eP,Geo),e(Uf,Oeo),e(A,Veo),e(A,Jf),e(Jf,Kne),e(Kne,Xeo),e(Jf,zeo),e(Jf,oP),e(oP,Qeo),e(Jf,Weo),e(A,Heo),e(A,Yf),e(Yf,Zne),e(Zne,Ueo),e(Yf,Jeo),e(Yf,rP),e(rP,Yeo),e(Yf,Keo),e(A,Zeo),e(A,Kf),e(Kf,ese),e(ese,eoo),e(Kf,ooo),e(Kf,tP),e(tP,roo),e(Kf,too),e(A,aoo),e(A,Zf),e(Zf,ose),e(ose,noo),e(Zf,soo),e(Zf,aP),e(aP,loo),e(Zf,ioo),e(A,doo),e(A,eg),e(eg,rse),e(rse,coo),e(eg,moo),e(eg,nP),e(nP,foo),e(eg,goo),e(A,hoo),e(A,og),e(og,tse),e(tse,uoo),e(og,poo),e(og,sP),e(sP,_oo),e(og,boo),e(A,voo),e(A,rg),e(rg,ase),e(ase,Foo),e(rg,Too),e(rg,lP),e(lP,Moo),e(rg,Eoo),e(A,Coo),e(A,tg),e(tg,nse),e(nse,woo),e(tg,Aoo),e(tg,iP),e(iP,Loo),e(tg,yoo),e(A,xoo),e(A,ag),e(ag,sse),e(sse,$oo),e(ag,koo),e(ag,dP),e(dP,Soo),e(ag,Roo),e(A,Poo),e(A,ng),e(ng,lse),e(lse,Boo),e(ng,Noo),e(ng,cP),e(cP,Ioo),e(ng,qoo),e(A,joo),e(A,sg),e(sg,ise),e(ise,Doo),e(sg,Goo),e(sg,mP),e(mP,Ooo),e(sg,Voo),e(A,Xoo),e(A,lg),e(lg,dse),e(dse,zoo),e(lg,Qoo),e(lg,fP),e(fP,Woo),e(lg,Hoo),e(A,Uoo),e(A,ig),e(ig,cse),e(cse,Joo),e(ig,Yoo),e(ig,gP),e(gP,Koo),e(ig,Zoo),e(A,ero),e(A,dg),e(dg,mse),e(mse,oro),e(dg,rro),e(dg,hP),e(hP,tro),e(dg,aro),e(A,nro),e(A,cg),e(cg,fse),e(fse,sro),e(cg,lro),e(cg,uP),e(uP,iro),e(cg,dro),e(A,cro),e(A,mg),e(mg,gse),e(gse,mro),e(mg,fro),e(mg,pP),e(pP,gro),e(mg,hro),e(A,uro),e(A,fg),e(fg,hse),e(hse,pro),e(fg,_ro),e(fg,_P),e(_P,bro),e(fg,vro),e(A,Fro),e(A,gg),e(gg,use),e(use,Tro),e(gg,Mro),e(gg,bP),e(bP,Ero),e(gg,Cro),e(A,wro),e(A,hg),e(hg,pse),e(pse,Aro),e(hg,Lro),e(hg,vP),e(vP,yro),e(hg,xro),e(A,$ro),e(A,ug),e(ug,_se),e(_se,kro),e(ug,Sro),e(ug,FP),e(FP,Rro),e(ug,Pro),e(A,Bro),e(A,pg),e(pg,bse),e(bse,Nro),e(pg,Iro),e(pg,TP),e(TP,qro),e(pg,jro),e(A,Dro),e(A,_g),e(_g,vse),e(vse,Gro),e(_g,Oro),e(_g,MP),e(MP,Vro),e(_g,Xro),e(A,zro),e(A,bg),e(bg,Fse),e(Fse,Qro),e(bg,Wro),e(bg,EP),e(EP,Hro),e(bg,Uro),e(A,Jro),e(A,vg),e(vg,Tse),e(Tse,Yro),e(vg,Kro),e(vg,CP),e(CP,Zro),e(vg,eto),e(A,oto),e(A,Fg),e(Fg,Mse),e(Mse,rto),e(Fg,tto),e(Fg,wP),e(wP,ato),e(Fg,nto),e(A,sto),e(A,Tg),e(Tg,Ese),e(Ese,lto),e(Tg,ito),e(Tg,AP),e(AP,dto),e(Tg,cto),e(A,mto),e(A,Mg),e(Mg,Cse),e(Cse,fto),e(Mg,gto),e(Mg,LP),e(LP,hto),e(Mg,uto),e(A,pto),e(A,Eg),e(Eg,wse),e(wse,_to),e(Eg,bto),e(Eg,yP),e(yP,vto),e(Eg,Fto),e(A,Tto),e(A,Cg),e(Cg,Ase),e(Ase,Mto),e(Cg,Eto),e(Cg,xP),e(xP,Cto),e(Cg,wto),e(A,Ato),e(A,wg),e(wg,Lse),e(Lse,Lto),e(wg,yto),e(wg,$P),e($P,xto),e(wg,$to),e(A,kto),e(A,Ag),e(Ag,yse),e(yse,Sto),e(Ag,Rto),e(Ag,kP),e(kP,Pto),e(Ag,Bto),e(A,Nto),e(A,Lg),e(Lg,xse),e(xse,Ito),e(Lg,qto),e(Lg,SP),e(SP,jto),e(Lg,Dto),e(A,Gto),e(A,yg),e(yg,$se),e($se,Oto),e(yg,Vto),e(yg,RP),e(RP,Xto),e(yg,zto),e(A,Qto),e(A,xg),e(xg,kse),e(kse,Wto),e(xg,Hto),e(xg,PP),e(PP,Uto),e(xg,Jto),e(A,Yto),e(A,$g),e($g,Sse),e(Sse,Kto),e($g,Zto),e($g,BP),e(BP,eao),e($g,oao),e(A,rao),e(A,kg),e(kg,Rse),e(Rse,tao),e(kg,aao),e(kg,NP),e(NP,nao),e(kg,sao),e(A,lao),e(A,Sg),e(Sg,Pse),e(Pse,iao),e(Sg,dao),e(Sg,IP),e(IP,cao),e(Sg,mao),e(A,fao),e(A,Rg),e(Rg,Bse),e(Bse,gao),e(Rg,hao),e(Rg,qP),e(qP,uao),e(Rg,pao),e(A,_ao),e(A,Pg),e(Pg,Nse),e(Nse,bao),e(Pg,vao),e(Pg,jP),e(jP,Fao),e(Pg,Tao),e(A,Mao),e(A,Bg),e(Bg,Ise),e(Ise,Eao),e(Bg,Cao),e(Bg,DP),e(DP,wao),e(Bg,Aao),e(A,Lao),e(A,Ng),e(Ng,qse),e(qse,yao),e(Ng,xao),e(Ng,GP),e(GP,$ao),e(Ng,kao),e(A,Sao),e(A,Ig),e(Ig,jse),e(jse,Rao),e(Ig,Pao),e(Ig,OP),e(OP,Bao),e(Ig,Nao),e(A,Iao),e(A,qg),e(qg,Dse),e(Dse,qao),e(qg,jao),e(qg,VP),e(VP,Dao),e(qg,Gao),e(A,Oao),e(A,jg),e(jg,Gse),e(Gse,Vao),e(jg,Xao),e(jg,XP),e(XP,zao),e(jg,Qao),e(A,Wao),e(A,Dg),e(Dg,Ose),e(Ose,Hao),e(Dg,Uao),e(Dg,zP),e(zP,Jao),e(Dg,Yao),e(A,Kao),e(A,Gg),e(Gg,Vse),e(Vse,Zao),e(Gg,eno),e(Gg,QP),e(QP,ono),e(Gg,rno),e(A,tno),e(A,Og),e(Og,Xse),e(Xse,ano),e(Og,nno),e(Og,WP),e(WP,sno),e(Og,lno),e(A,ino),e(A,Vg),e(Vg,zse),e(zse,dno),e(Vg,cno),e(Vg,HP),e(HP,mno),e(Vg,fno),e(A,gno),e(A,Xg),e(Xg,Qse),e(Qse,hno),e(Xg,uno),e(Xg,UP),e(UP,pno),e(Xg,_no),e(A,bno),e(A,zg),e(zg,Wse),e(Wse,vno),e(zg,Fno),e(zg,JP),e(JP,Tno),e(zg,Mno),e(A,Eno),e(A,Qg),e(Qg,Hse),e(Hse,Cno),e(Qg,wno),e(Qg,YP),e(YP,Ano),e(Qg,Lno),e(A,yno),e(A,Wg),e(Wg,Use),e(Use,xno),e(Wg,$no),e(Wg,KP),e(KP,kno),e(Wg,Sno),e(A,Rno),e(A,Hg),e(Hg,Jse),e(Jse,Pno),e(Hg,Bno),e(Hg,ZP),e(ZP,Nno),e(Hg,Ino),e(A,qno),e(A,Ug),e(Ug,Yse),e(Yse,jno),e(Ug,Dno),e(Ug,eB),e(eB,Gno),e(Ug,Ono),e(A,Vno),e(A,Jg),e(Jg,Kse),e(Kse,Xno),e(Jg,zno),e(Jg,oB),e(oB,Qno),e(Jg,Wno),e(A,Hno),e(A,Yg),e(Yg,Zse),e(Zse,Uno),e(Yg,Jno),e(Yg,rB),e(rB,Yno),e(Yg,Kno),e(Lr,Zno),M(Kg,Lr,null),e(Ao,eso),e(Ao,Zg),M(uy,Zg,null),e(Zg,oso),e(Zg,ele),e(ele,rso),b(m,TXe,_),b(m,qi,_),e(qi,eh),e(eh,ole),M(py,ole,null),e(qi,tso),e(qi,rle),e(rle,aso),b(m,MXe,_),b(m,Lo,_),M(_y,Lo,null),e(Lo,nso),e(Lo,by),e(by,sso),e(by,tB),e(tB,lso),e(by,iso),e(Lo,dso),e(Lo,vy),e(vy,cso),e(vy,tle),e(tle,mso),e(vy,fso),e(Lo,gso),e(Lo,yr),M(Fy,yr,null),e(yr,hso),e(yr,ale),e(ale,uso),e(yr,pso),e(yr,Pa),e(Pa,_so),e(Pa,nle),e(nle,bso),e(Pa,vso),e(Pa,sle),e(sle,Fso),e(Pa,Tso),e(Pa,lle),e(lle,Mso),e(Pa,Eso),e(yr,Cso),e(yr,k),e(k,jn),e(jn,ile),e(ile,wso),e(jn,Aso),e(jn,aB),e(aB,Lso),e(jn,yso),e(jn,nB),e(nB,xso),e(jn,$so),e(k,kso),e(k,Dn),e(Dn,dle),e(dle,Sso),e(Dn,Rso),e(Dn,sB),e(sB,Pso),e(Dn,Bso),e(Dn,lB),e(lB,Nso),e(Dn,Iso),e(k,qso),e(k,Gn),e(Gn,cle),e(cle,jso),e(Gn,Dso),e(Gn,iB),e(iB,Gso),e(Gn,Oso),e(Gn,dB),e(dB,Vso),e(Gn,Xso),e(k,zso),e(k,oh),e(oh,mle),e(mle,Qso),e(oh,Wso),e(oh,cB),e(cB,Hso),e(oh,Uso),e(k,Jso),e(k,On),e(On,fle),e(fle,Yso),e(On,Kso),e(On,mB),e(mB,Zso),e(On,elo),e(On,fB),e(fB,olo),e(On,rlo),e(k,tlo),e(k,rh),e(rh,gle),e(gle,alo),e(rh,nlo),e(rh,gB),e(gB,slo),e(rh,llo),e(k,ilo),e(k,th),e(th,hle),e(hle,dlo),e(th,clo),e(th,hB),e(hB,mlo),e(th,flo),e(k,glo),e(k,ah),e(ah,ule),e(ule,hlo),e(ah,ulo),e(ah,uB),e(uB,plo),e(ah,_lo),e(k,blo),e(k,Vn),e(Vn,ple),e(ple,vlo),e(Vn,Flo),e(Vn,pB),e(pB,Tlo),e(Vn,Mlo),e(Vn,_B),e(_B,Elo),e(Vn,Clo),e(k,wlo),e(k,Xn),e(Xn,_le),e(_le,Alo),e(Xn,Llo),e(Xn,bB),e(bB,ylo),e(Xn,xlo),e(Xn,vB),e(vB,$lo),e(Xn,klo),e(k,Slo),e(k,zn),e(zn,ble),e(ble,Rlo),e(zn,Plo),e(zn,FB),e(FB,Blo),e(zn,Nlo),e(zn,TB),e(TB,Ilo),e(zn,qlo),e(k,jlo),e(k,nh),e(nh,vle),e(vle,Dlo),e(nh,Glo),e(nh,MB),e(MB,Olo),e(nh,Vlo),e(k,Xlo),e(k,sh),e(sh,Fle),e(Fle,zlo),e(sh,Qlo),e(sh,EB),e(EB,Wlo),e(sh,Hlo),e(k,Ulo),e(k,lh),e(lh,Tle),e(Tle,Jlo),e(lh,Ylo),e(lh,CB),e(CB,Klo),e(lh,Zlo),e(k,eio),e(k,Qn),e(Qn,Mle),e(Mle,oio),e(Qn,rio),e(Qn,wB),e(wB,tio),e(Qn,aio),e(Qn,AB),e(AB,nio),e(Qn,sio),e(k,lio),e(k,ih),e(ih,Ele),e(Ele,iio),e(ih,dio),e(ih,LB),e(LB,cio),e(ih,mio),e(k,fio),e(k,Wn),e(Wn,Cle),e(Cle,gio),e(Wn,hio),e(Wn,yB),e(yB,uio),e(Wn,pio),e(Wn,xB),e(xB,_io),e(Wn,bio),e(k,vio),e(k,Hn),e(Hn,wle),e(wle,Fio),e(Hn,Tio),e(Hn,$B),e($B,Mio),e(Hn,Eio),e(Hn,kB),e(kB,Cio),e(Hn,wio),e(k,Aio),e(k,Un),e(Un,Ale),e(Ale,Lio),e(Un,yio),e(Un,SB),e(SB,xio),e(Un,$io),e(Un,RB),e(RB,kio),e(Un,Sio),e(k,Rio),e(k,Jn),e(Jn,Lle),e(Lle,Pio),e(Jn,Bio),e(Jn,PB),e(PB,Nio),e(Jn,Iio),e(Jn,BB),e(BB,qio),e(Jn,jio),e(k,Dio),e(k,dh),e(dh,yle),e(yle,Gio),e(dh,Oio),e(dh,NB),e(NB,Vio),e(dh,Xio),e(k,zio),e(k,Yn),e(Yn,xle),e(xle,Qio),e(Yn,Wio),e(Yn,IB),e(IB,Hio),e(Yn,Uio),e(Yn,qB),e(qB,Jio),e(Yn,Yio),e(k,Kio),e(k,Kn),e(Kn,$le),e($le,Zio),e(Kn,edo),e(Kn,jB),e(jB,odo),e(Kn,rdo),e(Kn,DB),e(DB,tdo),e(Kn,ado),e(k,ndo),e(k,Zn),e(Zn,kle),e(kle,sdo),e(Zn,ldo),e(Zn,GB),e(GB,ido),e(Zn,ddo),e(Zn,OB),e(OB,cdo),e(Zn,mdo),e(k,fdo),e(k,es),e(es,Sle),e(Sle,gdo),e(es,hdo),e(es,VB),e(VB,udo),e(es,pdo),e(es,XB),e(XB,_do),e(es,bdo),e(k,vdo),e(k,os),e(os,Rle),e(Rle,Fdo),e(os,Tdo),e(os,zB),e(zB,Mdo),e(os,Edo),e(os,QB),e(QB,Cdo),e(os,wdo),e(k,Ado),e(k,rs),e(rs,Ple),e(Ple,Ldo),e(rs,ydo),e(rs,WB),e(WB,xdo),e(rs,$do),e(rs,HB),e(HB,kdo),e(rs,Sdo),e(k,Rdo),e(k,ch),e(ch,Ble),e(Ble,Pdo),e(ch,Bdo),e(ch,UB),e(UB,Ndo),e(ch,Ido),e(k,qdo),e(k,ts),e(ts,Nle),e(Nle,jdo),e(ts,Ddo),e(ts,JB),e(JB,Gdo),e(ts,Odo),e(ts,YB),e(YB,Vdo),e(ts,Xdo),e(k,zdo),e(k,mh),e(mh,Ile),e(Ile,Qdo),e(mh,Wdo),e(mh,KB),e(KB,Hdo),e(mh,Udo),e(k,Jdo),e(k,as),e(as,qle),e(qle,Ydo),e(as,Kdo),e(as,ZB),e(ZB,Zdo),e(as,eco),e(as,eN),e(eN,oco),e(as,rco),e(k,tco),e(k,ns),e(ns,jle),e(jle,aco),e(ns,nco),e(ns,oN),e(oN,sco),e(ns,lco),e(ns,rN),e(rN,ico),e(ns,dco),e(k,cco),e(k,ss),e(ss,Dle),e(Dle,mco),e(ss,fco),e(ss,tN),e(tN,gco),e(ss,hco),e(ss,aN),e(aN,uco),e(ss,pco),e(k,_co),e(k,fh),e(fh,Gle),e(Gle,bco),e(fh,vco),e(fh,nN),e(nN,Fco),e(fh,Tco),e(k,Mco),e(k,ls),e(ls,Ole),e(Ole,Eco),e(ls,Cco),e(ls,sN),e(sN,wco),e(ls,Aco),e(ls,lN),e(lN,Lco),e(ls,yco),e(k,xco),e(k,is),e(is,Vle),e(Vle,$co),e(is,kco),e(is,iN),e(iN,Sco),e(is,Rco),e(is,dN),e(dN,Pco),e(is,Bco),e(k,Nco),e(k,ds),e(ds,Xle),e(Xle,Ico),e(ds,qco),e(ds,cN),e(cN,jco),e(ds,Dco),e(ds,mN),e(mN,Gco),e(ds,Oco),e(k,Vco),e(k,gh),e(gh,zle),e(zle,Xco),e(gh,zco),e(gh,fN),e(fN,Qco),e(gh,Wco),e(k,Hco),e(k,cs),e(cs,Qle),e(Qle,Uco),e(cs,Jco),e(cs,gN),e(gN,Yco),e(cs,Kco),e(cs,hN),e(hN,Zco),e(cs,emo),e(k,omo),e(k,ms),e(ms,Wle),e(Wle,rmo),e(ms,tmo),e(ms,uN),e(uN,amo),e(ms,nmo),e(ms,pN),e(pN,smo),e(ms,lmo),e(k,imo),e(k,fs),e(fs,Hle),e(Hle,dmo),e(fs,cmo),e(fs,_N),e(_N,mmo),e(fs,fmo),e(fs,bN),e(bN,gmo),e(fs,hmo),e(k,umo),e(k,gs),e(gs,Ule),e(Ule,pmo),e(gs,_mo),e(gs,vN),e(vN,bmo),e(gs,vmo),e(gs,FN),e(FN,Fmo),e(gs,Tmo),e(k,Mmo),e(k,hs),e(hs,Jle),e(Jle,Emo),e(hs,Cmo),e(hs,TN),e(TN,wmo),e(hs,Amo),e(hs,MN),e(MN,Lmo),e(hs,ymo),e(k,xmo),e(k,us),e(us,Yle),e(Yle,$mo),e(us,kmo),e(us,EN),e(EN,Smo),e(us,Rmo),e(us,CN),e(CN,Pmo),e(us,Bmo),e(k,Nmo),e(k,ps),e(ps,Kle),e(Kle,Imo),e(ps,qmo),e(ps,wN),e(wN,jmo),e(ps,Dmo),e(ps,AN),e(AN,Gmo),e(ps,Omo),e(k,Vmo),e(k,_s),e(_s,Zle),e(Zle,Xmo),e(_s,zmo),e(_s,LN),e(LN,Qmo),e(_s,Wmo),e(_s,yN),e(yN,Hmo),e(_s,Umo),e(k,Jmo),e(k,hh),e(hh,eie),e(eie,Ymo),e(hh,Kmo),e(hh,xN),e(xN,Zmo),e(hh,efo),e(k,ofo),e(k,bs),e(bs,oie),e(oie,rfo),e(bs,tfo),e(bs,$N),e($N,afo),e(bs,nfo),e(bs,kN),e(kN,sfo),e(bs,lfo),e(k,ifo),e(k,uh),e(uh,rie),e(rie,dfo),e(uh,cfo),e(uh,SN),e(SN,mfo),e(uh,ffo),e(k,gfo),e(k,ph),e(ph,tie),e(tie,hfo),e(ph,ufo),e(ph,RN),e(RN,pfo),e(ph,_fo),e(k,bfo),e(k,vs),e(vs,aie),e(aie,vfo),e(vs,Ffo),e(vs,PN),e(PN,Tfo),e(vs,Mfo),e(vs,BN),e(BN,Efo),e(vs,Cfo),e(k,wfo),e(k,Fs),e(Fs,nie),e(nie,Afo),e(Fs,Lfo),e(Fs,NN),e(NN,yfo),e(Fs,xfo),e(Fs,IN),e(IN,$fo),e(Fs,kfo),e(k,Sfo),e(k,Ts),e(Ts,sie),e(sie,Rfo),e(Ts,Pfo),e(Ts,qN),e(qN,Bfo),e(Ts,Nfo),e(Ts,jN),e(jN,Ifo),e(Ts,qfo),e(k,jfo),e(k,_h),e(_h,lie),e(lie,Dfo),e(_h,Gfo),e(_h,DN),e(DN,Ofo),e(_h,Vfo),e(k,Xfo),e(k,Ms),e(Ms,iie),e(iie,zfo),e(Ms,Qfo),e(Ms,GN),e(GN,Wfo),e(Ms,Hfo),e(Ms,ON),e(ON,Ufo),e(Ms,Jfo),e(k,Yfo),e(k,Es),e(Es,die),e(die,Kfo),e(Es,Zfo),e(Es,VN),e(VN,ego),e(Es,ogo),e(Es,XN),e(XN,rgo),e(Es,tgo),e(k,ago),e(k,Cs),e(Cs,cie),e(cie,ngo),e(Cs,sgo),e(Cs,zN),e(zN,lgo),e(Cs,igo),e(Cs,QN),e(QN,dgo),e(Cs,cgo),e(k,mgo),e(k,ws),e(ws,mie),e(mie,fgo),e(ws,ggo),e(ws,WN),e(WN,hgo),e(ws,ugo),e(ws,HN),e(HN,pgo),e(ws,_go),e(k,bgo),e(k,As),e(As,fie),e(fie,vgo),e(As,Fgo),e(As,UN),e(UN,Tgo),e(As,Mgo),e(As,JN),e(JN,Ego),e(As,Cgo),e(k,wgo),e(k,Ls),e(Ls,gie),e(gie,Ago),e(Ls,Lgo),e(Ls,YN),e(YN,ygo),e(Ls,xgo),e(Ls,KN),e(KN,$go),e(Ls,kgo),e(k,Sgo),e(k,ys),e(ys,hie),e(hie,Rgo),e(ys,Pgo),e(ys,ZN),e(ZN,Bgo),e(ys,Ngo),e(ys,eI),e(eI,Igo),e(ys,qgo),e(k,jgo),e(k,xs),e(xs,uie),e(uie,Dgo),e(xs,Ggo),e(xs,oI),e(oI,Ogo),e(xs,Vgo),e(xs,rI),e(rI,Xgo),e(xs,zgo),e(k,Qgo),e(k,bh),e(bh,pie),e(pie,Wgo),e(bh,Hgo),e(bh,tI),e(tI,Ugo),e(bh,Jgo),e(k,Ygo),e(k,$s),e($s,_ie),e(_ie,Kgo),e($s,Zgo),e($s,aI),e(aI,eho),e($s,oho),e($s,nI),e(nI,rho),e($s,tho),e(k,aho),e(k,vh),e(vh,bie),e(bie,nho),e(vh,sho),e(vh,sI),e(sI,lho),e(vh,iho),e(k,dho),e(k,Fh),e(Fh,vie),e(vie,cho),e(Fh,mho),e(Fh,lI),e(lI,fho),e(Fh,gho),e(k,hho),e(k,Th),e(Th,Fie),e(Fie,uho),e(Th,pho),e(Th,iI),e(iI,_ho),e(Th,bho),e(k,vho),e(k,Mh),e(Mh,Tie),e(Tie,Fho),e(Mh,Tho),e(Mh,dI),e(dI,Mho),e(Mh,Eho),e(k,Cho),e(k,ks),e(ks,Mie),e(Mie,who),e(ks,Aho),e(ks,cI),e(cI,Lho),e(ks,yho),e(ks,mI),e(mI,xho),e(ks,$ho),e(k,kho),e(k,Eh),e(Eh,Eie),e(Eie,Sho),e(Eh,Rho),e(Eh,fI),e(fI,Pho),e(Eh,Bho),e(k,Nho),e(k,Ss),e(Ss,Cie),e(Cie,Iho),e(Ss,qho),e(Ss,gI),e(gI,jho),e(Ss,Dho),e(Ss,hI),e(hI,Gho),e(Ss,Oho),e(k,Vho),e(k,Rs),e(Rs,wie),e(wie,Xho),e(Rs,zho),e(Rs,uI),e(uI,Qho),e(Rs,Who),e(Rs,pI),e(pI,Hho),e(Rs,Uho),e(k,Jho),e(k,Ps),e(Ps,Aie),e(Aie,Yho),e(Ps,Kho),e(Ps,_I),e(_I,Zho),e(Ps,euo),e(Ps,bI),e(bI,ouo),e(Ps,ruo),e(k,tuo),e(k,Bs),e(Bs,Lie),e(Lie,auo),e(Bs,nuo),e(Bs,vI),e(vI,suo),e(Bs,luo),e(Bs,FI),e(FI,iuo),e(Bs,duo),e(k,cuo),e(k,Ns),e(Ns,yie),e(yie,muo),e(Ns,fuo),e(Ns,TI),e(TI,guo),e(Ns,huo),e(Ns,MI),e(MI,uuo),e(Ns,puo),e(k,_uo),e(k,Is),e(Is,xie),e(xie,buo),e(Is,vuo),e(Is,EI),e(EI,Fuo),e(Is,Tuo),e(Is,CI),e(CI,Muo),e(Is,Euo),e(k,Cuo),e(k,Ch),e(Ch,$ie),e($ie,wuo),e(Ch,Auo),e(Ch,wI),e(wI,Luo),e(Ch,yuo),e(k,xuo),e(k,wh),e(wh,kie),e(kie,$uo),e(wh,kuo),e(wh,AI),e(AI,Suo),e(wh,Ruo),e(k,Puo),e(k,qs),e(qs,Sie),e(Sie,Buo),e(qs,Nuo),e(qs,LI),e(LI,Iuo),e(qs,quo),e(qs,yI),e(yI,juo),e(qs,Duo),e(k,Guo),e(k,js),e(js,Rie),e(Rie,Ouo),e(js,Vuo),e(js,xI),e(xI,Xuo),e(js,zuo),e(js,$I),e($I,Quo),e(js,Wuo),e(k,Huo),e(k,Ds),e(Ds,Pie),e(Pie,Uuo),e(Ds,Juo),e(Ds,kI),e(kI,Yuo),e(Ds,Kuo),e(Ds,SI),e(SI,Zuo),e(Ds,epo),e(k,opo),e(k,Ah),e(Ah,Bie),e(Bie,rpo),e(Ah,tpo),e(Ah,RI),e(RI,apo),e(Ah,npo),e(k,spo),e(k,Lh),e(Lh,Nie),e(Nie,lpo),e(Lh,ipo),e(Lh,PI),e(PI,dpo),e(Lh,cpo),e(k,mpo),e(k,yh),e(yh,Iie),e(Iie,fpo),e(yh,gpo),e(yh,BI),e(BI,hpo),e(yh,upo),e(k,ppo),e(k,Gs),e(Gs,qie),e(qie,_po),e(Gs,bpo),e(Gs,NI),e(NI,vpo),e(Gs,Fpo),e(Gs,II),e(II,Tpo),e(Gs,Mpo),e(k,Epo),e(k,Os),e(Os,jie),e(jie,Cpo),e(Os,wpo),e(Os,qI),e(qI,Apo),e(Os,Lpo),e(Os,jI),e(jI,ypo),e(Os,xpo),e(k,$po),e(k,xh),e(xh,Die),e(Die,kpo),e(xh,Spo),e(xh,DI),e(DI,Rpo),e(xh,Ppo),e(k,Bpo),e(k,$h),e($h,Gie),e(Gie,Npo),e($h,Ipo),e($h,GI),e(GI,qpo),e($h,jpo),e(k,Dpo),e(k,kh),e(kh,Oie),e(Oie,Gpo),e(kh,Opo),e(kh,OI),e(OI,Vpo),e(kh,Xpo),e(k,zpo),e(k,Vs),e(Vs,Vie),e(Vie,Qpo),e(Vs,Wpo),e(Vs,VI),e(VI,Hpo),e(Vs,Upo),e(Vs,XI),e(XI,Jpo),e(Vs,Ypo),e(k,Kpo),e(k,Sh),e(Sh,Xie),e(Xie,Zpo),e(Sh,e_o),e(Sh,zI),e(zI,o_o),e(Sh,r_o),e(k,t_o),e(k,Rh),e(Rh,zie),e(zie,a_o),e(Rh,n_o),e(Rh,QI),e(QI,s_o),e(Rh,l_o),e(k,i_o),e(k,Xs),e(Xs,Qie),e(Qie,d_o),e(Xs,c_o),e(Xs,WI),e(WI,m_o),e(Xs,f_o),e(Xs,HI),e(HI,g_o),e(Xs,h_o),e(k,u_o),e(k,zs),e(zs,Wie),e(Wie,p_o),e(zs,__o),e(zs,UI),e(UI,b_o),e(zs,v_o),e(zs,JI),e(JI,F_o),e(zs,T_o),e(k,M_o),e(k,Qs),e(Qs,Hie),e(Hie,E_o),e(Qs,C_o),e(Qs,YI),e(YI,w_o),e(Qs,A_o),e(Qs,KI),e(KI,L_o),e(Qs,y_o),e(k,x_o),e(k,Ws),e(Ws,Uie),e(Uie,$_o),e(Ws,k_o),e(Ws,ZI),e(ZI,S_o),e(Ws,R_o),e(Ws,eq),e(eq,P_o),e(Ws,B_o),e(yr,N_o),M(Ph,yr,null),e(Lo,I_o),e(Lo,Bh),M(Ty,Bh,null),e(Bh,q_o),e(Bh,Jie),e(Jie,j_o),b(m,EXe,_),b(m,ji,_),e(ji,Nh),e(Nh,Yie),M(My,Yie,null),e(ji,D_o),e(ji,Kie),e(Kie,G_o),b(m,CXe,_),b(m,yo,_),M(Ey,yo,null),e(yo,O_o),e(yo,Cy),e(Cy,V_o),e(Cy,oq),e(oq,X_o),e(Cy,z_o),e(yo,Q_o),e(yo,wy),e(wy,W_o),e(wy,Zie),e(Zie,H_o),e(wy,U_o),e(yo,J_o),e(yo,Ue),M(Ay,Ue,null),e(Ue,Y_o),e(Ue,ede),e(ede,K_o),e(Ue,Z_o),e(Ue,Ba),e(Ba,e2o),e(Ba,ode),e(ode,o2o),e(Ba,r2o),e(Ba,rde),e(rde,t2o),e(Ba,a2o),e(Ba,tde),e(tde,n2o),e(Ba,s2o),e(Ue,l2o),e(Ue,Y),e(Y,Ih),e(Ih,ade),e(ade,i2o),e(Ih,d2o),e(Ih,rq),e(rq,c2o),e(Ih,m2o),e(Y,f2o),e(Y,qh),e(qh,nde),e(nde,g2o),e(qh,h2o),e(qh,tq),e(tq,u2o),e(qh,p2o),e(Y,_2o),e(Y,jh),e(jh,sde),e(sde,b2o),e(jh,v2o),e(jh,aq),e(aq,F2o),e(jh,T2o),e(Y,M2o),e(Y,Dh),e(Dh,lde),e(lde,E2o),e(Dh,C2o),e(Dh,nq),e(nq,w2o),e(Dh,A2o),e(Y,L2o),e(Y,Gh),e(Gh,ide),e(ide,y2o),e(Gh,x2o),e(Gh,sq),e(sq,$2o),e(Gh,k2o),e(Y,S2o),e(Y,Oh),e(Oh,dde),e(dde,R2o),e(Oh,P2o),e(Oh,lq),e(lq,B2o),e(Oh,N2o),e(Y,I2o),e(Y,Vh),e(Vh,cde),e(cde,q2o),e(Vh,j2o),e(Vh,iq),e(iq,D2o),e(Vh,G2o),e(Y,O2o),e(Y,Xh),e(Xh,mde),e(mde,V2o),e(Xh,X2o),e(Xh,dq),e(dq,z2o),e(Xh,Q2o),e(Y,W2o),e(Y,zh),e(zh,fde),e(fde,H2o),e(zh,U2o),e(zh,cq),e(cq,J2o),e(zh,Y2o),e(Y,K2o),e(Y,Qh),e(Qh,gde),e(gde,Z2o),e(Qh,ebo),e(Qh,mq),e(mq,obo),e(Qh,rbo),e(Y,tbo),e(Y,Wh),e(Wh,hde),e(hde,abo),e(Wh,nbo),e(Wh,fq),e(fq,sbo),e(Wh,lbo),e(Y,ibo),e(Y,Hh),e(Hh,ude),e(ude,dbo),e(Hh,cbo),e(Hh,gq),e(gq,mbo),e(Hh,fbo),e(Y,gbo),e(Y,Uh),e(Uh,pde),e(pde,hbo),e(Uh,ubo),e(Uh,hq),e(hq,pbo),e(Uh,_bo),e(Y,bbo),e(Y,Jh),e(Jh,_de),e(_de,vbo),e(Jh,Fbo),e(Jh,uq),e(uq,Tbo),e(Jh,Mbo),e(Y,Ebo),e(Y,Yh),e(Yh,bde),e(bde,Cbo),e(Yh,wbo),e(Yh,pq),e(pq,Abo),e(Yh,Lbo),e(Y,ybo),e(Y,Kh),e(Kh,vde),e(vde,xbo),e(Kh,$bo),e(Kh,_q),e(_q,kbo),e(Kh,Sbo),e(Y,Rbo),e(Y,Zh),e(Zh,Fde),e(Fde,Pbo),e(Zh,Bbo),e(Zh,bq),e(bq,Nbo),e(Zh,Ibo),e(Y,qbo),e(Y,eu),e(eu,Tde),e(Tde,jbo),e(eu,Dbo),e(eu,vq),e(vq,Gbo),e(eu,Obo),e(Y,Vbo),e(Y,ou),e(ou,Mde),e(Mde,Xbo),e(ou,zbo),e(ou,Fq),e(Fq,Qbo),e(ou,Wbo),e(Y,Hbo),e(Y,ru),e(ru,Ede),e(Ede,Ubo),e(ru,Jbo),e(ru,Tq),e(Tq,Ybo),e(ru,Kbo),e(Y,Zbo),e(Y,tu),e(tu,Cde),e(Cde,evo),e(tu,ovo),e(tu,Mq),e(Mq,rvo),e(tu,tvo),e(Y,avo),e(Y,au),e(au,wde),e(wde,nvo),e(au,svo),e(au,Eq),e(Eq,lvo),e(au,ivo),e(Y,dvo),e(Y,nu),e(nu,Ade),e(Ade,cvo),e(nu,mvo),e(nu,Cq),e(Cq,fvo),e(nu,gvo),e(Y,hvo),e(Y,su),e(su,Lde),e(Lde,uvo),e(su,pvo),e(su,wq),e(wq,_vo),e(su,bvo),e(Y,vvo),e(Y,lu),e(lu,yde),e(yde,Fvo),e(lu,Tvo),e(lu,Aq),e(Aq,Mvo),e(lu,Evo),e(Y,Cvo),e(Y,iu),e(iu,xde),e(xde,wvo),e(iu,Avo),e(iu,Lq),e(Lq,Lvo),e(iu,yvo),e(Y,xvo),e(Y,du),e(du,$de),e($de,$vo),e(du,kvo),e(du,yq),e(yq,Svo),e(du,Rvo),e(Y,Pvo),e(Y,cu),e(cu,kde),e(kde,Bvo),e(cu,Nvo),e(cu,xq),e(xq,Ivo),e(cu,qvo),e(Y,jvo),e(Y,mu),e(mu,Sde),e(Sde,Dvo),e(mu,Gvo),e(mu,$q),e($q,Ovo),e(mu,Vvo),e(Y,Xvo),e(Y,fu),e(fu,Rde),e(Rde,zvo),e(fu,Qvo),e(fu,kq),e(kq,Wvo),e(fu,Hvo),e(Y,Uvo),e(Y,gu),e(gu,Pde),e(Pde,Jvo),e(gu,Yvo),e(gu,Sq),e(Sq,Kvo),e(gu,Zvo),e(Y,e1o),e(Y,hu),e(hu,Bde),e(Bde,o1o),e(hu,r1o),e(hu,Rq),e(Rq,t1o),e(hu,a1o),e(Y,n1o),e(Y,uu),e(uu,Nde),e(Nde,s1o),e(uu,l1o),e(uu,Pq),e(Pq,i1o),e(uu,d1o),e(Y,c1o),e(Y,pu),e(pu,Ide),e(Ide,m1o),e(pu,f1o),e(pu,Bq),e(Bq,g1o),e(pu,h1o),e(Ue,u1o),M(_u,Ue,null),e(Ue,p1o),M(bu,Ue,null),e(yo,_1o),e(yo,vu),M(Ly,vu,null),e(vu,b1o),e(vu,qde),e(qde,v1o),b(m,wXe,_),b(m,Di,_),e(Di,Fu),e(Fu,jde),M(yy,jde,null),e(Di,F1o),e(Di,Dde),e(Dde,T1o),b(m,AXe,_),b(m,xo,_),M(xy,xo,null),e(xo,M1o),e(xo,$y),e($y,E1o),e($y,Nq),e(Nq,C1o),e($y,w1o),e(xo,A1o),e(xo,ky),e(ky,L1o),e(ky,Gde),e(Gde,y1o),e(ky,x1o),e(xo,$1o),e(xo,Je),M(Sy,Je,null),e(Je,k1o),e(Je,Ode),e(Ode,S1o),e(Je,R1o),e(Je,Gi),e(Gi,P1o),e(Gi,Vde),e(Vde,B1o),e(Gi,N1o),e(Gi,Xde),e(Xde,I1o),e(Gi,q1o),e(Je,j1o),e(Je,ue),e(ue,Tu),e(Tu,zde),e(zde,D1o),e(Tu,G1o),e(Tu,Iq),e(Iq,O1o),e(Tu,V1o),e(ue,X1o),e(ue,Mu),e(Mu,Qde),e(Qde,z1o),e(Mu,Q1o),e(Mu,Wde),e(Wde,W1o),e(Mu,H1o),e(ue,U1o),e(ue,Eu),e(Eu,Hde),e(Hde,J1o),e(Eu,Y1o),e(Eu,qq),e(qq,K1o),e(Eu,Z1o),e(ue,eFo),e(ue,Cu),e(Cu,Ude),e(Ude,oFo),e(Cu,rFo),e(Cu,jq),e(jq,tFo),e(Cu,aFo),e(ue,nFo),e(ue,wu),e(wu,Jde),e(Jde,sFo),e(wu,lFo),e(wu,Dq),e(Dq,iFo),e(wu,dFo),e(ue,cFo),e(ue,Au),e(Au,Yde),e(Yde,mFo),e(Au,fFo),e(Au,Gq),e(Gq,gFo),e(Au,hFo),e(ue,uFo),e(ue,Lu),e(Lu,Kde),e(Kde,pFo),e(Lu,_Fo),e(Lu,Oq),e(Oq,bFo),e(Lu,vFo),e(ue,FFo),e(ue,yu),e(yu,Zde),e(Zde,TFo),e(yu,MFo),e(yu,Vq),e(Vq,EFo),e(yu,CFo),e(ue,wFo),e(ue,xu),e(xu,ece),e(ece,AFo),e(xu,LFo),e(xu,Xq),e(Xq,yFo),e(xu,xFo),e(ue,$Fo),e(ue,$u),e($u,oce),e(oce,kFo),e($u,SFo),e($u,zq),e(zq,RFo),e($u,PFo),e(ue,BFo),e(ue,ku),e(ku,rce),e(rce,NFo),e(ku,IFo),e(ku,Qq),e(Qq,qFo),e(ku,jFo),e(ue,DFo),e(ue,Su),e(Su,tce),e(tce,GFo),e(Su,OFo),e(Su,Wq),e(Wq,VFo),e(Su,XFo),e(ue,zFo),e(ue,Ru),e(Ru,ace),e(ace,QFo),e(Ru,WFo),e(Ru,Hq),e(Hq,HFo),e(Ru,UFo),e(ue,JFo),e(ue,Pu),e(Pu,nce),e(nce,YFo),e(Pu,KFo),e(Pu,Uq),e(Uq,ZFo),e(Pu,eTo),e(ue,oTo),e(ue,Bu),e(Bu,sce),e(sce,rTo),e(Bu,tTo),e(Bu,Jq),e(Jq,aTo),e(Bu,nTo),e(ue,sTo),e(ue,Nu),e(Nu,lce),e(lce,lTo),e(Nu,iTo),e(Nu,Yq),e(Yq,dTo),e(Nu,cTo),e(ue,mTo),e(ue,Iu),e(Iu,ice),e(ice,fTo),e(Iu,gTo),e(Iu,Kq),e(Kq,hTo),e(Iu,uTo),e(ue,pTo),e(ue,qu),e(qu,dce),e(dce,_To),e(qu,bTo),e(qu,Zq),e(Zq,vTo),e(qu,FTo),e(Je,TTo),M(ju,Je,null),e(Je,MTo),M(Du,Je,null),e(xo,ETo),e(xo,Gu),M(Ry,Gu,null),e(Gu,CTo),e(Gu,cce),e(cce,wTo),b(m,LXe,_),b(m,Oi,_),e(Oi,Ou),e(Ou,mce),M(Py,mce,null),e(Oi,ATo),e(Oi,fce),e(fce,LTo),b(m,yXe,_),b(m,$o,_),M(By,$o,null),e($o,yTo),e($o,Vi),e(Vi,xTo),e(Vi,ej),e(ej,$To),e(Vi,kTo),e(Vi,oj),e(oj,STo),e(Vi,RTo),e($o,PTo),e($o,Ny),e(Ny,BTo),e(Ny,gce),e(gce,NTo),e(Ny,ITo),e($o,qTo),e($o,it),M(Iy,it,null),e(it,jTo),e(it,hce),e(hce,DTo),e(it,GTo),e(it,Xi),e(Xi,OTo),e(Xi,uce),e(uce,VTo),e(Xi,XTo),e(Xi,rj),e(rj,zTo),e(Xi,QTo),e(it,WTo),M(Vu,it,null),e($o,HTo),e($o,Ye),M(qy,Ye,null),e(Ye,UTo),e(Ye,pce),e(pce,JTo),e(Ye,YTo),e(Ye,Na),e(Na,KTo),e(Na,_ce),e(_ce,ZTo),e(Na,eMo),e(Na,bce),e(bce,oMo),e(Na,rMo),e(Na,vce),e(vce,tMo),e(Na,aMo),e(Ye,nMo),e(Ye,y),e(y,Xu),e(Xu,Fce),e(Fce,sMo),e(Xu,lMo),e(Xu,tj),e(tj,iMo),e(Xu,dMo),e(y,cMo),e(y,zu),e(zu,Tce),e(Tce,mMo),e(zu,fMo),e(zu,aj),e(aj,gMo),e(zu,hMo),e(y,uMo),e(y,Qu),e(Qu,Mce),e(Mce,pMo),e(Qu,_Mo),e(Qu,nj),e(nj,bMo),e(Qu,vMo),e(y,FMo),e(y,Wu),e(Wu,Ece),e(Ece,TMo),e(Wu,MMo),e(Wu,sj),e(sj,EMo),e(Wu,CMo),e(y,wMo),e(y,Hu),e(Hu,Cce),e(Cce,AMo),e(Hu,LMo),e(Hu,lj),e(lj,yMo),e(Hu,xMo),e(y,$Mo),e(y,Uu),e(Uu,wce),e(wce,kMo),e(Uu,SMo),e(Uu,ij),e(ij,RMo),e(Uu,PMo),e(y,BMo),e(y,Ju),e(Ju,Ace),e(Ace,NMo),e(Ju,IMo),e(Ju,dj),e(dj,qMo),e(Ju,jMo),e(y,DMo),e(y,Yu),e(Yu,Lce),e(Lce,GMo),e(Yu,OMo),e(Yu,cj),e(cj,VMo),e(Yu,XMo),e(y,zMo),e(y,Ku),e(Ku,yce),e(yce,QMo),e(Ku,WMo),e(Ku,mj),e(mj,HMo),e(Ku,UMo),e(y,JMo),e(y,Zu),e(Zu,xce),e(xce,YMo),e(Zu,KMo),e(Zu,fj),e(fj,ZMo),e(Zu,e4o),e(y,o4o),e(y,ep),e(ep,$ce),e($ce,r4o),e(ep,t4o),e(ep,gj),e(gj,a4o),e(ep,n4o),e(y,s4o),e(y,op),e(op,kce),e(kce,l4o),e(op,i4o),e(op,hj),e(hj,d4o),e(op,c4o),e(y,m4o),e(y,rp),e(rp,Sce),e(Sce,f4o),e(rp,g4o),e(rp,uj),e(uj,h4o),e(rp,u4o),e(y,p4o),e(y,tp),e(tp,Rce),e(Rce,_4o),e(tp,b4o),e(tp,pj),e(pj,v4o),e(tp,F4o),e(y,T4o),e(y,ap),e(ap,Pce),e(Pce,M4o),e(ap,E4o),e(ap,_j),e(_j,C4o),e(ap,w4o),e(y,A4o),e(y,np),e(np,Bce),e(Bce,L4o),e(np,y4o),e(np,bj),e(bj,x4o),e(np,$4o),e(y,k4o),e(y,sp),e(sp,Nce),e(Nce,S4o),e(sp,R4o),e(sp,vj),e(vj,P4o),e(sp,B4o),e(y,N4o),e(y,lp),e(lp,Ice),e(Ice,I4o),e(lp,q4o),e(lp,Fj),e(Fj,j4o),e(lp,D4o),e(y,G4o),e(y,ip),e(ip,qce),e(qce,O4o),e(ip,V4o),e(ip,Tj),e(Tj,X4o),e(ip,z4o),e(y,Q4o),e(y,dp),e(dp,jce),e(jce,W4o),e(dp,H4o),e(dp,Mj),e(Mj,U4o),e(dp,J4o),e(y,Y4o),e(y,cp),e(cp,Dce),e(Dce,K4o),e(cp,Z4o),e(cp,Ej),e(Ej,eEo),e(cp,oEo),e(y,rEo),e(y,mp),e(mp,Gce),e(Gce,tEo),e(mp,aEo),e(mp,Cj),e(Cj,nEo),e(mp,sEo),e(y,lEo),e(y,fp),e(fp,Oce),e(Oce,iEo),e(fp,dEo),e(fp,wj),e(wj,cEo),e(fp,mEo),e(y,fEo),e(y,gp),e(gp,Vce),e(Vce,gEo),e(gp,hEo),e(gp,Aj),e(Aj,uEo),e(gp,pEo),e(y,_Eo),e(y,hp),e(hp,Xce),e(Xce,bEo),e(hp,vEo),e(hp,Lj),e(Lj,FEo),e(hp,TEo),e(y,MEo),e(y,up),e(up,zce),e(zce,EEo),e(up,CEo),e(up,yj),e(yj,wEo),e(up,AEo),e(y,LEo),e(y,pp),e(pp,Qce),e(Qce,yEo),e(pp,xEo),e(pp,xj),e(xj,$Eo),e(pp,kEo),e(y,SEo),e(y,_p),e(_p,Wce),e(Wce,REo),e(_p,PEo),e(_p,$j),e($j,BEo),e(_p,NEo),e(y,IEo),e(y,bp),e(bp,Hce),e(Hce,qEo),e(bp,jEo),e(bp,kj),e(kj,DEo),e(bp,GEo),e(y,OEo),e(y,vp),e(vp,Uce),e(Uce,VEo),e(vp,XEo),e(vp,Sj),e(Sj,zEo),e(vp,QEo),e(y,WEo),e(y,Fp),e(Fp,Jce),e(Jce,HEo),e(Fp,UEo),e(Fp,Rj),e(Rj,JEo),e(Fp,YEo),e(y,KEo),e(y,Tp),e(Tp,Yce),e(Yce,ZEo),e(Tp,eCo),e(Tp,Pj),e(Pj,oCo),e(Tp,rCo),e(y,tCo),e(y,Mp),e(Mp,Kce),e(Kce,aCo),e(Mp,nCo),e(Mp,Bj),e(Bj,sCo),e(Mp,lCo),e(y,iCo),e(y,Ep),e(Ep,Zce),e(Zce,dCo),e(Ep,cCo),e(Ep,Nj),e(Nj,mCo),e(Ep,fCo),e(y,gCo),e(y,Hs),e(Hs,eme),e(eme,hCo),e(Hs,uCo),e(Hs,Ij),e(Ij,pCo),e(Hs,_Co),e(Hs,qj),e(qj,bCo),e(Hs,vCo),e(y,FCo),e(y,Cp),e(Cp,ome),e(ome,TCo),e(Cp,MCo),e(Cp,jj),e(jj,ECo),e(Cp,CCo),e(y,wCo),e(y,wp),e(wp,rme),e(rme,ACo),e(wp,LCo),e(wp,Dj),e(Dj,yCo),e(wp,xCo),e(y,$Co),e(y,Ap),e(Ap,tme),e(tme,kCo),e(Ap,SCo),e(Ap,Gj),e(Gj,RCo),e(Ap,PCo),e(y,BCo),e(y,Lp),e(Lp,ame),e(ame,NCo),e(Lp,ICo),e(Lp,Oj),e(Oj,qCo),e(Lp,jCo),e(y,DCo),e(y,yp),e(yp,nme),e(nme,GCo),e(yp,OCo),e(yp,Vj),e(Vj,VCo),e(yp,XCo),e(y,zCo),e(y,xp),e(xp,sme),e(sme,QCo),e(xp,WCo),e(xp,Xj),e(Xj,HCo),e(xp,UCo),e(y,JCo),e(y,$p),e($p,lme),e(lme,YCo),e($p,KCo),e($p,zj),e(zj,ZCo),e($p,e3o),e(y,o3o),e(y,kp),e(kp,ime),e(ime,r3o),e(kp,t3o),e(kp,Qj),e(Qj,a3o),e(kp,n3o),e(y,s3o),e(y,Sp),e(Sp,dme),e(dme,l3o),e(Sp,i3o),e(Sp,Wj),e(Wj,d3o),e(Sp,c3o),e(y,m3o),e(y,Rp),e(Rp,cme),e(cme,f3o),e(Rp,g3o),e(Rp,Hj),e(Hj,h3o),e(Rp,u3o),e(y,p3o),e(y,Pp),e(Pp,mme),e(mme,_3o),e(Pp,b3o),e(Pp,Uj),e(Uj,v3o),e(Pp,F3o),e(y,T3o),e(y,Bp),e(Bp,fme),e(fme,M3o),e(Bp,E3o),e(Bp,Jj),e(Jj,C3o),e(Bp,w3o),e(y,A3o),e(y,Np),e(Np,gme),e(gme,L3o),e(Np,y3o),e(Np,Yj),e(Yj,x3o),e(Np,$3o),e(y,k3o),e(y,Ip),e(Ip,hme),e(hme,S3o),e(Ip,R3o),e(Ip,Kj),e(Kj,P3o),e(Ip,B3o),e(y,N3o),e(y,qp),e(qp,ume),e(ume,I3o),e(qp,q3o),e(qp,Zj),e(Zj,j3o),e(qp,D3o),e(y,G3o),e(y,jp),e(jp,pme),e(pme,O3o),e(jp,V3o),e(jp,eD),e(eD,X3o),e(jp,z3o),e(y,Q3o),e(y,Dp),e(Dp,_me),e(_me,W3o),e(Dp,H3o),e(Dp,oD),e(oD,U3o),e(Dp,J3o),e(y,Y3o),e(y,Gp),e(Gp,bme),e(bme,K3o),e(Gp,Z3o),e(Gp,rD),e(rD,e5o),e(Gp,o5o),e(y,r5o),e(y,Op),e(Op,vme),e(vme,t5o),e(Op,a5o),e(Op,tD),e(tD,n5o),e(Op,s5o),e(y,l5o),e(y,Vp),e(Vp,Fme),e(Fme,i5o),e(Vp,d5o),e(Vp,aD),e(aD,c5o),e(Vp,m5o),e(y,f5o),e(y,Xp),e(Xp,Tme),e(Tme,g5o),e(Xp,h5o),e(Xp,nD),e(nD,u5o),e(Xp,p5o),e(y,_5o),e(y,zp),e(zp,Mme),e(Mme,b5o),e(zp,v5o),e(zp,sD),e(sD,F5o),e(zp,T5o),e(y,M5o),e(y,Qp),e(Qp,Eme),e(Eme,E5o),e(Qp,C5o),e(Qp,lD),e(lD,w5o),e(Qp,A5o),e(y,L5o),e(y,Wp),e(Wp,Cme),e(Cme,y5o),e(Wp,x5o),e(Wp,iD),e(iD,$5o),e(Wp,k5o),e(y,S5o),e(y,Hp),e(Hp,wme),e(wme,R5o),e(Hp,P5o),e(Hp,dD),e(dD,B5o),e(Hp,N5o),e(y,I5o),e(y,Up),e(Up,Ame),e(Ame,q5o),e(Up,j5o),e(Up,cD),e(cD,D5o),e(Up,G5o),e(y,O5o),e(y,Jp),e(Jp,Lme),e(Lme,V5o),e(Jp,X5o),e(Jp,mD),e(mD,z5o),e(Jp,Q5o),e(y,W5o),e(y,Yp),e(Yp,yme),e(yme,H5o),e(Yp,U5o),e(Yp,fD),e(fD,J5o),e(Yp,Y5o),e(y,K5o),e(y,Kp),e(Kp,xme),e(xme,Z5o),e(Kp,e0o),e(Kp,gD),e(gD,o0o),e(Kp,r0o),e(y,t0o),e(y,Zp),e(Zp,$me),e($me,a0o),e(Zp,n0o),e(Zp,hD),e(hD,s0o),e(Zp,l0o),e(y,i0o),e(y,e_),e(e_,kme),e(kme,d0o),e(e_,c0o),e(e_,uD),e(uD,m0o),e(e_,f0o),e(y,g0o),e(y,o_),e(o_,Sme),e(Sme,h0o),e(o_,u0o),e(o_,pD),e(pD,p0o),e(o_,_0o),e(y,b0o),e(y,r_),e(r_,Rme),e(Rme,v0o),e(r_,F0o),e(r_,_D),e(_D,T0o),e(r_,M0o),e(y,E0o),e(y,t_),e(t_,Pme),e(Pme,C0o),e(t_,w0o),e(t_,bD),e(bD,A0o),e(t_,L0o),e(y,y0o),e(y,a_),e(a_,Bme),e(Bme,x0o),e(a_,$0o),e(a_,vD),e(vD,k0o),e(a_,S0o),e(y,R0o),e(y,n_),e(n_,Nme),e(Nme,P0o),e(n_,B0o),e(n_,FD),e(FD,N0o),e(n_,I0o),e(y,q0o),e(y,s_),e(s_,Ime),e(Ime,j0o),e(s_,D0o),e(s_,TD),e(TD,G0o),e(s_,O0o),e(y,V0o),e(y,l_),e(l_,qme),e(qme,X0o),e(l_,z0o),e(l_,MD),e(MD,Q0o),e(l_,W0o),e(y,H0o),e(y,i_),e(i_,jme),e(jme,U0o),e(i_,J0o),e(i_,ED),e(ED,Y0o),e(i_,K0o),e(y,Z0o),e(y,d_),e(d_,Dme),e(Dme,ewo),e(d_,owo),e(d_,CD),e(CD,rwo),e(d_,two),e(y,awo),e(y,c_),e(c_,Gme),e(Gme,nwo),e(c_,swo),e(c_,wD),e(wD,lwo),e(c_,iwo),e(y,dwo),e(y,m_),e(m_,Ome),e(Ome,cwo),e(m_,mwo),e(m_,AD),e(AD,fwo),e(m_,gwo),e(y,hwo),e(y,f_),e(f_,Vme),e(Vme,uwo),e(f_,pwo),e(f_,LD),e(LD,_wo),e(f_,bwo),e(y,vwo),e(y,g_),e(g_,Xme),e(Xme,Fwo),e(g_,Two),e(g_,yD),e(yD,Mwo),e(g_,Ewo),e(y,Cwo),e(y,h_),e(h_,zme),e(zme,wwo),e(h_,Awo),e(h_,xD),e(xD,Lwo),e(h_,ywo),e(y,xwo),e(y,u_),e(u_,Qme),e(Qme,$wo),e(u_,kwo),e(u_,$D),e($D,Swo),e(u_,Rwo),e(y,Pwo),e(y,p_),e(p_,Wme),e(Wme,Bwo),e(p_,Nwo),e(p_,kD),e(kD,Iwo),e(p_,qwo),e(y,jwo),e(y,__),e(__,Hme),e(Hme,Dwo),e(__,Gwo),e(__,SD),e(SD,Owo),e(__,Vwo),e(y,Xwo),e(y,b_),e(b_,Ume),e(Ume,zwo),e(b_,Qwo),e(b_,RD),e(RD,Wwo),e(b_,Hwo),e(y,Uwo),e(y,v_),e(v_,Jme),e(Jme,Jwo),e(v_,Ywo),e(v_,PD),e(PD,Kwo),e(v_,Zwo),e(y,eAo),e(y,F_),e(F_,Yme),e(Yme,oAo),e(F_,rAo),e(F_,BD),e(BD,tAo),e(F_,aAo),e(y,nAo),e(y,T_),e(T_,Kme),e(Kme,sAo),e(T_,lAo),e(T_,ND),e(ND,iAo),e(T_,dAo),e(y,cAo),e(y,M_),e(M_,Zme),e(Zme,mAo),e(M_,fAo),e(M_,ID),e(ID,gAo),e(M_,hAo),e(y,uAo),e(y,E_),e(E_,efe),e(efe,pAo),e(E_,_Ao),e(E_,qD),e(qD,bAo),e(E_,vAo),e(y,FAo),e(y,C_),e(C_,ofe),e(ofe,TAo),e(C_,MAo),e(C_,jD),e(jD,EAo),e(C_,CAo),e(y,wAo),e(y,w_),e(w_,rfe),e(rfe,AAo),e(w_,LAo),e(w_,DD),e(DD,yAo),e(w_,xAo),e(y,$Ao),e(y,A_),e(A_,tfe),e(tfe,kAo),e(A_,SAo),e(A_,GD),e(GD,RAo),e(A_,PAo),e(y,BAo),e(y,L_),e(L_,afe),e(afe,NAo),e(L_,IAo),e(L_,OD),e(OD,qAo),e(L_,jAo),e(y,DAo),e(y,y_),e(y_,nfe),e(nfe,GAo),e(y_,OAo),e(y_,VD),e(VD,VAo),e(y_,XAo),e(y,zAo),e(y,x_),e(x_,sfe),e(sfe,QAo),e(x_,WAo),e(x_,XD),e(XD,HAo),e(x_,UAo),e(y,JAo),e(y,$_),e($_,lfe),e(lfe,YAo),e($_,KAo),e($_,zD),e(zD,ZAo),e($_,e6o),e(y,o6o),e(y,k_),e(k_,ife),e(ife,r6o),e(k_,t6o),e(k_,QD),e(QD,a6o),e(k_,n6o),e(y,s6o),e(y,S_),e(S_,dfe),e(dfe,l6o),e(S_,i6o),e(S_,WD),e(WD,d6o),e(S_,c6o),e(y,m6o),e(y,R_),e(R_,cfe),e(cfe,f6o),e(R_,g6o),e(R_,HD),e(HD,h6o),e(R_,u6o),e(y,p6o),e(y,P_),e(P_,mfe),e(mfe,_6o),e(P_,b6o),e(P_,UD),e(UD,v6o),e(P_,F6o),e(y,T6o),e(y,B_),e(B_,ffe),e(ffe,M6o),e(B_,E6o),e(B_,JD),e(JD,C6o),e(B_,w6o),e(y,A6o),e(y,N_),e(N_,gfe),e(gfe,L6o),e(N_,y6o),e(N_,YD),e(YD,x6o),e(N_,$6o),e(y,k6o),e(y,I_),e(I_,hfe),e(hfe,S6o),e(I_,R6o),e(I_,KD),e(KD,P6o),e(I_,B6o),e(y,N6o),e(y,q_),e(q_,ufe),e(ufe,I6o),e(q_,q6o),e(q_,ZD),e(ZD,j6o),e(q_,D6o),e(y,G6o),e(y,j_),e(j_,pfe),e(pfe,O6o),e(j_,V6o),e(j_,eG),e(eG,X6o),e(j_,z6o),e(y,Q6o),e(y,D_),e(D_,_fe),e(_fe,W6o),e(D_,H6o),e(D_,oG),e(oG,U6o),e(D_,J6o),e(y,Y6o),e(y,G_),e(G_,bfe),e(bfe,K6o),e(G_,Z6o),e(G_,rG),e(rG,e7o),e(G_,o7o),e(y,r7o),e(y,O_),e(O_,vfe),e(vfe,t7o),e(O_,a7o),e(O_,tG),e(tG,n7o),e(O_,s7o),e(y,l7o),e(y,V_),e(V_,Ffe),e(Ffe,i7o),e(V_,d7o),e(V_,aG),e(aG,c7o),e(V_,m7o),e(y,f7o),e(y,X_),e(X_,Tfe),e(Tfe,g7o),e(X_,h7o),e(X_,nG),e(nG,u7o),e(X_,p7o),e(y,_7o),e(y,z_),e(z_,Mfe),e(Mfe,b7o),e(z_,v7o),e(z_,sG),e(sG,F7o),e(z_,T7o),e(y,M7o),e(y,Q_),e(Q_,Efe),e(Efe,E7o),e(Q_,C7o),e(Q_,lG),e(lG,w7o),e(Q_,A7o),e(Ye,L7o),e(Ye,W_),e(W_,y7o),e(W_,Cfe),e(Cfe,x7o),e(W_,$7o),e(W_,wfe),e(wfe,k7o),e(Ye,S7o),M(H_,Ye,null),b(m,xXe,_),b(m,zi,_),e(zi,U_),e(U_,Afe),M(jy,Afe,null),e(zi,R7o),e(zi,Lfe),e(Lfe,P7o),b(m,$Xe,_),b(m,ko,_),M(Dy,ko,null),e(ko,B7o),e(ko,Qi),e(Qi,N7o),e(Qi,iG),e(iG,I7o),e(Qi,q7o),e(Qi,dG),e(dG,j7o),e(Qi,D7o),e(ko,G7o),e(ko,Gy),e(Gy,O7o),e(Gy,yfe),e(yfe,V7o),e(Gy,X7o),e(ko,z7o),e(ko,dt),M(Oy,dt,null),e(dt,Q7o),e(dt,xfe),e(xfe,W7o),e(dt,H7o),e(dt,Wi),e(Wi,U7o),e(Wi,$fe),e($fe,J7o),e(Wi,Y7o),e(Wi,cG),e(cG,K7o),e(Wi,Z7o),e(dt,eLo),M(J_,dt,null),e(ko,oLo),e(ko,Ke),M(Vy,Ke,null),e(Ke,rLo),e(Ke,kfe),e(kfe,tLo),e(Ke,aLo),e(Ke,Ia),e(Ia,nLo),e(Ia,Sfe),e(Sfe,sLo),e(Ia,lLo),e(Ia,Rfe),e(Rfe,iLo),e(Ia,dLo),e(Ia,Pfe),e(Pfe,cLo),e(Ia,mLo),e(Ke,fLo),e(Ke,G),e(G,Y_),e(Y_,Bfe),e(Bfe,gLo),e(Y_,hLo),e(Y_,mG),e(mG,uLo),e(Y_,pLo),e(G,_Lo),e(G,K_),e(K_,Nfe),e(Nfe,bLo),e(K_,vLo),e(K_,fG),e(fG,FLo),e(K_,TLo),e(G,MLo),e(G,Z_),e(Z_,Ife),e(Ife,ELo),e(Z_,CLo),e(Z_,gG),e(gG,wLo),e(Z_,ALo),e(G,LLo),e(G,e2),e(e2,qfe),e(qfe,yLo),e(e2,xLo),e(e2,hG),e(hG,$Lo),e(e2,kLo),e(G,SLo),e(G,o2),e(o2,jfe),e(jfe,RLo),e(o2,PLo),e(o2,uG),e(uG,BLo),e(o2,NLo),e(G,ILo),e(G,r2),e(r2,Dfe),e(Dfe,qLo),e(r2,jLo),e(r2,pG),e(pG,DLo),e(r2,GLo),e(G,OLo),e(G,t2),e(t2,Gfe),e(Gfe,VLo),e(t2,XLo),e(t2,_G),e(_G,zLo),e(t2,QLo),e(G,WLo),e(G,a2),e(a2,Ofe),e(Ofe,HLo),e(a2,ULo),e(a2,bG),e(bG,JLo),e(a2,YLo),e(G,KLo),e(G,n2),e(n2,Vfe),e(Vfe,ZLo),e(n2,eyo),e(n2,vG),e(vG,oyo),e(n2,ryo),e(G,tyo),e(G,s2),e(s2,Xfe),e(Xfe,ayo),e(s2,nyo),e(s2,FG),e(FG,syo),e(s2,lyo),e(G,iyo),e(G,l2),e(l2,zfe),e(zfe,dyo),e(l2,cyo),e(l2,TG),e(TG,myo),e(l2,fyo),e(G,gyo),e(G,i2),e(i2,Qfe),e(Qfe,hyo),e(i2,uyo),e(i2,MG),e(MG,pyo),e(i2,_yo),e(G,byo),e(G,d2),e(d2,Wfe),e(Wfe,vyo),e(d2,Fyo),e(d2,EG),e(EG,Tyo),e(d2,Myo),e(G,Eyo),e(G,c2),e(c2,Hfe),e(Hfe,Cyo),e(c2,wyo),e(c2,CG),e(CG,Ayo),e(c2,Lyo),e(G,yyo),e(G,m2),e(m2,Ufe),e(Ufe,xyo),e(m2,$yo),e(m2,wG),e(wG,kyo),e(m2,Syo),e(G,Ryo),e(G,f2),e(f2,Jfe),e(Jfe,Pyo),e(f2,Byo),e(f2,AG),e(AG,Nyo),e(f2,Iyo),e(G,qyo),e(G,g2),e(g2,Yfe),e(Yfe,jyo),e(g2,Dyo),e(g2,LG),e(LG,Gyo),e(g2,Oyo),e(G,Vyo),e(G,h2),e(h2,Kfe),e(Kfe,Xyo),e(h2,zyo),e(h2,yG),e(yG,Qyo),e(h2,Wyo),e(G,Hyo),e(G,u2),e(u2,Zfe),e(Zfe,Uyo),e(u2,Jyo),e(u2,xG),e(xG,Yyo),e(u2,Kyo),e(G,Zyo),e(G,p2),e(p2,ege),e(ege,e8o),e(p2,o8o),e(p2,$G),e($G,r8o),e(p2,t8o),e(G,a8o),e(G,_2),e(_2,oge),e(oge,n8o),e(_2,s8o),e(_2,kG),e(kG,l8o),e(_2,i8o),e(G,d8o),e(G,b2),e(b2,rge),e(rge,c8o),e(b2,m8o),e(b2,SG),e(SG,f8o),e(b2,g8o),e(G,h8o),e(G,v2),e(v2,tge),e(tge,u8o),e(v2,p8o),e(v2,RG),e(RG,_8o),e(v2,b8o),e(G,v8o),e(G,F2),e(F2,age),e(age,F8o),e(F2,T8o),e(F2,PG),e(PG,M8o),e(F2,E8o),e(G,C8o),e(G,T2),e(T2,nge),e(nge,w8o),e(T2,A8o),e(T2,BG),e(BG,L8o),e(T2,y8o),e(G,x8o),e(G,M2),e(M2,sge),e(sge,$8o),e(M2,k8o),e(M2,NG),e(NG,S8o),e(M2,R8o),e(G,P8o),e(G,E2),e(E2,lge),e(lge,B8o),e(E2,N8o),e(E2,IG),e(IG,I8o),e(E2,q8o),e(G,j8o),e(G,C2),e(C2,ige),e(ige,D8o),e(C2,G8o),e(C2,qG),e(qG,O8o),e(C2,V8o),e(G,X8o),e(G,w2),e(w2,dge),e(dge,z8o),e(w2,Q8o),e(w2,jG),e(jG,W8o),e(w2,H8o),e(G,U8o),e(G,A2),e(A2,cge),e(cge,J8o),e(A2,Y8o),e(A2,DG),e(DG,K8o),e(A2,Z8o),e(G,e9o),e(G,L2),e(L2,mge),e(mge,o9o),e(L2,r9o),e(L2,GG),e(GG,t9o),e(L2,a9o),e(G,n9o),e(G,y2),e(y2,fge),e(fge,s9o),e(y2,l9o),e(y2,OG),e(OG,i9o),e(y2,d9o),e(G,c9o),e(G,x2),e(x2,gge),e(gge,m9o),e(x2,f9o),e(x2,VG),e(VG,g9o),e(x2,h9o),e(G,u9o),e(G,$2),e($2,hge),e(hge,p9o),e($2,_9o),e($2,XG),e(XG,b9o),e($2,v9o),e(G,F9o),e(G,k2),e(k2,uge),e(uge,T9o),e(k2,M9o),e(k2,zG),e(zG,E9o),e(k2,C9o),e(G,w9o),e(G,S2),e(S2,pge),e(pge,A9o),e(S2,L9o),e(S2,QG),e(QG,y9o),e(S2,x9o),e(G,$9o),e(G,R2),e(R2,_ge),e(_ge,k9o),e(R2,S9o),e(R2,WG),e(WG,R9o),e(R2,P9o),e(G,B9o),e(G,P2),e(P2,bge),e(bge,N9o),e(P2,I9o),e(P2,HG),e(HG,q9o),e(P2,j9o),e(G,D9o),e(G,B2),e(B2,vge),e(vge,G9o),e(B2,O9o),e(B2,UG),e(UG,V9o),e(B2,X9o),e(G,z9o),e(G,N2),e(N2,Fge),e(Fge,Q9o),e(N2,W9o),e(N2,JG),e(JG,H9o),e(N2,U9o),e(G,J9o),e(G,I2),e(I2,Tge),e(Tge,Y9o),e(I2,K9o),e(I2,YG),e(YG,Z9o),e(I2,exo),e(G,oxo),e(G,q2),e(q2,Mge),e(Mge,rxo),e(q2,txo),e(q2,KG),e(KG,axo),e(q2,nxo),e(G,sxo),e(G,j2),e(j2,Ege),e(Ege,lxo),e(j2,ixo),e(j2,ZG),e(ZG,dxo),e(j2,cxo),e(G,mxo),e(G,D2),e(D2,Cge),e(Cge,fxo),e(D2,gxo),e(D2,eO),e(eO,hxo),e(D2,uxo),e(G,pxo),e(G,G2),e(G2,wge),e(wge,_xo),e(G2,bxo),e(G2,oO),e(oO,vxo),e(G2,Fxo),e(Ke,Txo),e(Ke,O2),e(O2,Mxo),e(O2,Age),e(Age,Exo),e(O2,Cxo),e(O2,Lge),e(Lge,wxo),e(Ke,Axo),M(V2,Ke,null),b(m,kXe,_),b(m,Hi,_),e(Hi,X2),e(X2,yge),M(Xy,yge,null),e(Hi,Lxo),e(Hi,xge),e(xge,yxo),b(m,SXe,_),b(m,So,_),M(zy,So,null),e(So,xxo),e(So,Ui),e(Ui,$xo),e(Ui,rO),e(rO,kxo),e(Ui,Sxo),e(Ui,tO),e(tO,Rxo),e(Ui,Pxo),e(So,Bxo),e(So,Qy),e(Qy,Nxo),e(Qy,$ge),e($ge,Ixo),e(Qy,qxo),e(So,jxo),e(So,ct),M(Wy,ct,null),e(ct,Dxo),e(ct,kge),e(kge,Gxo),e(ct,Oxo),e(ct,Ji),e(Ji,Vxo),e(Ji,Sge),e(Sge,Xxo),e(Ji,zxo),e(Ji,aO),e(aO,Qxo),e(Ji,Wxo),e(ct,Hxo),M(z2,ct,null),e(So,Uxo),e(So,Ze),M(Hy,Ze,null),e(Ze,Jxo),e(Ze,Rge),e(Rge,Yxo),e(Ze,Kxo),e(Ze,qa),e(qa,Zxo),e(qa,Pge),e(Pge,e$o),e(qa,o$o),e(qa,Bge),e(Bge,r$o),e(qa,t$o),e(qa,Nge),e(Nge,a$o),e(qa,n$o),e(Ze,s$o),e(Ze,z),e(z,Q2),e(Q2,Ige),e(Ige,l$o),e(Q2,i$o),e(Q2,nO),e(nO,d$o),e(Q2,c$o),e(z,m$o),e(z,W2),e(W2,qge),e(qge,f$o),e(W2,g$o),e(W2,sO),e(sO,h$o),e(W2,u$o),e(z,p$o),e(z,H2),e(H2,jge),e(jge,_$o),e(H2,b$o),e(H2,lO),e(lO,v$o),e(H2,F$o),e(z,T$o),e(z,U2),e(U2,Dge),e(Dge,M$o),e(U2,E$o),e(U2,iO),e(iO,C$o),e(U2,w$o),e(z,A$o),e(z,J2),e(J2,Gge),e(Gge,L$o),e(J2,y$o),e(J2,dO),e(dO,x$o),e(J2,$$o),e(z,k$o),e(z,Y2),e(Y2,Oge),e(Oge,S$o),e(Y2,R$o),e(Y2,cO),e(cO,P$o),e(Y2,B$o),e(z,N$o),e(z,K2),e(K2,Vge),e(Vge,I$o),e(K2,q$o),e(K2,mO),e(mO,j$o),e(K2,D$o),e(z,G$o),e(z,Z2),e(Z2,Xge),e(Xge,O$o),e(Z2,V$o),e(Z2,fO),e(fO,X$o),e(Z2,z$o),e(z,Q$o),e(z,eb),e(eb,zge),e(zge,W$o),e(eb,H$o),e(eb,gO),e(gO,U$o),e(eb,J$o),e(z,Y$o),e(z,ob),e(ob,Qge),e(Qge,K$o),e(ob,Z$o),e(ob,hO),e(hO,eko),e(ob,oko),e(z,rko),e(z,rb),e(rb,Wge),e(Wge,tko),e(rb,ako),e(rb,uO),e(uO,nko),e(rb,sko),e(z,lko),e(z,tb),e(tb,Hge),e(Hge,iko),e(tb,dko),e(tb,pO),e(pO,cko),e(tb,mko),e(z,fko),e(z,ab),e(ab,Uge),e(Uge,gko),e(ab,hko),e(ab,_O),e(_O,uko),e(ab,pko),e(z,_ko),e(z,nb),e(nb,Jge),e(Jge,bko),e(nb,vko),e(nb,bO),e(bO,Fko),e(nb,Tko),e(z,Mko),e(z,sb),e(sb,Yge),e(Yge,Eko),e(sb,Cko),e(sb,vO),e(vO,wko),e(sb,Ako),e(z,Lko),e(z,lb),e(lb,Kge),e(Kge,yko),e(lb,xko),e(lb,FO),e(FO,$ko),e(lb,kko),e(z,Sko),e(z,ib),e(ib,Zge),e(Zge,Rko),e(ib,Pko),e(ib,TO),e(TO,Bko),e(ib,Nko),e(z,Iko),e(z,db),e(db,ehe),e(ehe,qko),e(db,jko),e(db,MO),e(MO,Dko),e(db,Gko),e(z,Oko),e(z,cb),e(cb,ohe),e(ohe,Vko),e(cb,Xko),e(cb,EO),e(EO,zko),e(cb,Qko),e(z,Wko),e(z,mb),e(mb,rhe),e(rhe,Hko),e(mb,Uko),e(mb,CO),e(CO,Jko),e(mb,Yko),e(z,Kko),e(z,fb),e(fb,the),e(the,Zko),e(fb,eSo),e(fb,wO),e(wO,oSo),e(fb,rSo),e(z,tSo),e(z,gb),e(gb,ahe),e(ahe,aSo),e(gb,nSo),e(gb,AO),e(AO,sSo),e(gb,lSo),e(z,iSo),e(z,hb),e(hb,nhe),e(nhe,dSo),e(hb,cSo),e(hb,LO),e(LO,mSo),e(hb,fSo),e(z,gSo),e(z,ub),e(ub,she),e(she,hSo),e(ub,uSo),e(ub,yO),e(yO,pSo),e(ub,_So),e(z,bSo),e(z,pb),e(pb,lhe),e(lhe,vSo),e(pb,FSo),e(pb,xO),e(xO,TSo),e(pb,MSo),e(z,ESo),e(z,_b),e(_b,ihe),e(ihe,CSo),e(_b,wSo),e(_b,$O),e($O,ASo),e(_b,LSo),e(z,ySo),e(z,bb),e(bb,dhe),e(dhe,xSo),e(bb,$So),e(bb,kO),e(kO,kSo),e(bb,SSo),e(z,RSo),e(z,vb),e(vb,che),e(che,PSo),e(vb,BSo),e(vb,SO),e(SO,NSo),e(vb,ISo),e(z,qSo),e(z,Fb),e(Fb,mhe),e(mhe,jSo),e(Fb,DSo),e(Fb,RO),e(RO,GSo),e(Fb,OSo),e(z,VSo),e(z,Tb),e(Tb,fhe),e(fhe,XSo),e(Tb,zSo),e(Tb,PO),e(PO,QSo),e(Tb,WSo),e(z,HSo),e(z,Mb),e(Mb,ghe),e(ghe,USo),e(Mb,JSo),e(Mb,BO),e(BO,YSo),e(Mb,KSo),e(z,ZSo),e(z,Eb),e(Eb,hhe),e(hhe,eRo),e(Eb,oRo),e(Eb,NO),e(NO,rRo),e(Eb,tRo),e(z,aRo),e(z,Cb),e(Cb,uhe),e(uhe,nRo),e(Cb,sRo),e(Cb,IO),e(IO,lRo),e(Cb,iRo),e(z,dRo),e(z,wb),e(wb,phe),e(phe,cRo),e(wb,mRo),e(wb,qO),e(qO,fRo),e(wb,gRo),e(z,hRo),e(z,Ab),e(Ab,_he),e(_he,uRo),e(Ab,pRo),e(Ab,jO),e(jO,_Ro),e(Ab,bRo),e(z,vRo),e(z,Lb),e(Lb,bhe),e(bhe,FRo),e(Lb,TRo),e(Lb,DO),e(DO,MRo),e(Lb,ERo),e(z,CRo),e(z,yb),e(yb,vhe),e(vhe,wRo),e(yb,ARo),e(yb,GO),e(GO,LRo),e(yb,yRo),e(z,xRo),e(z,xb),e(xb,Fhe),e(Fhe,$Ro),e(xb,kRo),e(xb,OO),e(OO,SRo),e(xb,RRo),e(z,PRo),e(z,$b),e($b,The),e(The,BRo),e($b,NRo),e($b,VO),e(VO,IRo),e($b,qRo),e(z,jRo),e(z,kb),e(kb,Mhe),e(Mhe,DRo),e(kb,GRo),e(kb,XO),e(XO,ORo),e(kb,VRo),e(Ze,XRo),e(Ze,Sb),e(Sb,zRo),e(Sb,Ehe),e(Ehe,QRo),e(Sb,WRo),e(Sb,Che),e(Che,HRo),e(Ze,URo),M(Rb,Ze,null),b(m,RXe,_),b(m,Yi,_),e(Yi,Pb),e(Pb,whe),M(Uy,whe,null),e(Yi,JRo),e(Yi,Ahe),e(Ahe,YRo),b(m,PXe,_),b(m,Ro,_),M(Jy,Ro,null),e(Ro,KRo),e(Ro,Ki),e(Ki,ZRo),e(Ki,zO),e(zO,ePo),e(Ki,oPo),e(Ki,QO),e(QO,rPo),e(Ki,tPo),e(Ro,aPo),e(Ro,Yy),e(Yy,nPo),e(Yy,Lhe),e(Lhe,sPo),e(Yy,lPo),e(Ro,iPo),e(Ro,mt),M(Ky,mt,null),e(mt,dPo),e(mt,yhe),e(yhe,cPo),e(mt,mPo),e(mt,Zi),e(Zi,fPo),e(Zi,xhe),e(xhe,gPo),e(Zi,hPo),e(Zi,WO),e(WO,uPo),e(Zi,pPo),e(mt,_Po),M(Bb,mt,null),e(Ro,bPo),e(Ro,eo),M(Zy,eo,null),e(eo,vPo),e(eo,$he),e($he,FPo),e(eo,TPo),e(eo,ja),e(ja,MPo),e(ja,khe),e(khe,EPo),e(ja,CPo),e(ja,She),e(She,wPo),e(ja,APo),e(ja,Rhe),e(Rhe,LPo),e(ja,yPo),e(eo,xPo),e(eo,W),e(W,Nb),e(Nb,Phe),e(Phe,$Po),e(Nb,kPo),e(Nb,HO),e(HO,SPo),e(Nb,RPo),e(W,PPo),e(W,Ib),e(Ib,Bhe),e(Bhe,BPo),e(Ib,NPo),e(Ib,UO),e(UO,IPo),e(Ib,qPo),e(W,jPo),e(W,qb),e(qb,Nhe),e(Nhe,DPo),e(qb,GPo),e(qb,JO),e(JO,OPo),e(qb,VPo),e(W,XPo),e(W,jb),e(jb,Ihe),e(Ihe,zPo),e(jb,QPo),e(jb,YO),e(YO,WPo),e(jb,HPo),e(W,UPo),e(W,Db),e(Db,qhe),e(qhe,JPo),e(Db,YPo),e(Db,KO),e(KO,KPo),e(Db,ZPo),e(W,eBo),e(W,Gb),e(Gb,jhe),e(jhe,oBo),e(Gb,rBo),e(Gb,ZO),e(ZO,tBo),e(Gb,aBo),e(W,nBo),e(W,Ob),e(Ob,Dhe),e(Dhe,sBo),e(Ob,lBo),e(Ob,eV),e(eV,iBo),e(Ob,dBo),e(W,cBo),e(W,Vb),e(Vb,Ghe),e(Ghe,mBo),e(Vb,fBo),e(Vb,oV),e(oV,gBo),e(Vb,hBo),e(W,uBo),e(W,Xb),e(Xb,Ohe),e(Ohe,pBo),e(Xb,_Bo),e(Xb,rV),e(rV,bBo),e(Xb,vBo),e(W,FBo),e(W,zb),e(zb,Vhe),e(Vhe,TBo),e(zb,MBo),e(zb,tV),e(tV,EBo),e(zb,CBo),e(W,wBo),e(W,Qb),e(Qb,Xhe),e(Xhe,ABo),e(Qb,LBo),e(Qb,aV),e(aV,yBo),e(Qb,xBo),e(W,$Bo),e(W,Wb),e(Wb,zhe),e(zhe,kBo),e(Wb,SBo),e(Wb,nV),e(nV,RBo),e(Wb,PBo),e(W,BBo),e(W,Hb),e(Hb,Qhe),e(Qhe,NBo),e(Hb,IBo),e(Hb,sV),e(sV,qBo),e(Hb,jBo),e(W,DBo),e(W,Ub),e(Ub,Whe),e(Whe,GBo),e(Ub,OBo),e(Ub,lV),e(lV,VBo),e(Ub,XBo),e(W,zBo),e(W,Jb),e(Jb,Hhe),e(Hhe,QBo),e(Jb,WBo),e(Jb,iV),e(iV,HBo),e(Jb,UBo),e(W,JBo),e(W,Yb),e(Yb,Uhe),e(Uhe,YBo),e(Yb,KBo),e(Yb,dV),e(dV,ZBo),e(Yb,eNo),e(W,oNo),e(W,Kb),e(Kb,Jhe),e(Jhe,rNo),e(Kb,tNo),e(Kb,cV),e(cV,aNo),e(Kb,nNo),e(W,sNo),e(W,Zb),e(Zb,Yhe),e(Yhe,lNo),e(Zb,iNo),e(Zb,mV),e(mV,dNo),e(Zb,cNo),e(W,mNo),e(W,ev),e(ev,Khe),e(Khe,fNo),e(ev,gNo),e(ev,fV),e(fV,hNo),e(ev,uNo),e(W,pNo),e(W,ov),e(ov,Zhe),e(Zhe,_No),e(ov,bNo),e(ov,gV),e(gV,vNo),e(ov,FNo),e(W,TNo),e(W,rv),e(rv,eue),e(eue,MNo),e(rv,ENo),e(rv,hV),e(hV,CNo),e(rv,wNo),e(W,ANo),e(W,tv),e(tv,oue),e(oue,LNo),e(tv,yNo),e(tv,uV),e(uV,xNo),e(tv,$No),e(W,kNo),e(W,av),e(av,rue),e(rue,SNo),e(av,RNo),e(av,pV),e(pV,PNo),e(av,BNo),e(W,NNo),e(W,nv),e(nv,tue),e(tue,INo),e(nv,qNo),e(nv,_V),e(_V,jNo),e(nv,DNo),e(W,GNo),e(W,sv),e(sv,aue),e(aue,ONo),e(sv,VNo),e(sv,bV),e(bV,XNo),e(sv,zNo),e(W,QNo),e(W,lv),e(lv,nue),e(nue,WNo),e(lv,HNo),e(lv,vV),e(vV,UNo),e(lv,JNo),e(W,YNo),e(W,iv),e(iv,sue),e(sue,KNo),e(iv,ZNo),e(iv,FV),e(FV,eIo),e(iv,oIo),e(W,rIo),e(W,dv),e(dv,lue),e(lue,tIo),e(dv,aIo),e(dv,TV),e(TV,nIo),e(dv,sIo),e(W,lIo),e(W,cv),e(cv,iue),e(iue,iIo),e(cv,dIo),e(cv,MV),e(MV,cIo),e(cv,mIo),e(W,fIo),e(W,mv),e(mv,due),e(due,gIo),e(mv,hIo),e(mv,EV),e(EV,uIo),e(mv,pIo),e(W,_Io),e(W,fv),e(fv,cue),e(cue,bIo),e(fv,vIo),e(fv,CV),e(CV,FIo),e(fv,TIo),e(W,MIo),e(W,gv),e(gv,mue),e(mue,EIo),e(gv,CIo),e(gv,wV),e(wV,wIo),e(gv,AIo),e(W,LIo),e(W,hv),e(hv,fue),e(fue,yIo),e(hv,xIo),e(hv,AV),e(AV,$Io),e(hv,kIo),e(W,SIo),e(W,uv),e(uv,gue),e(gue,RIo),e(uv,PIo),e(uv,hue),e(hue,BIo),e(uv,NIo),e(W,IIo),e(W,pv),e(pv,uue),e(uue,qIo),e(pv,jIo),e(pv,LV),e(LV,DIo),e(pv,GIo),e(W,OIo),e(W,_v),e(_v,pue),e(pue,VIo),e(_v,XIo),e(_v,yV),e(yV,zIo),e(_v,QIo),e(W,WIo),e(W,bv),e(bv,_ue),e(_ue,HIo),e(bv,UIo),e(bv,xV),e(xV,JIo),e(bv,YIo),e(W,KIo),e(W,vv),e(vv,bue),e(bue,ZIo),e(vv,eqo),e(vv,$V),e($V,oqo),e(vv,rqo),e(eo,tqo),e(eo,Fv),e(Fv,aqo),e(Fv,vue),e(vue,nqo),e(Fv,sqo),e(Fv,Fue),e(Fue,lqo),e(eo,iqo),M(Tv,eo,null),b(m,BXe,_),b(m,ed,_),e(ed,Mv),e(Mv,Tue),M(e8,Tue,null),e(ed,dqo),e(ed,Mue),e(Mue,cqo),b(m,NXe,_),b(m,Po,_),M(o8,Po,null),e(Po,mqo),e(Po,od),e(od,fqo),e(od,kV),e(kV,gqo),e(od,hqo),e(od,SV),e(SV,uqo),e(od,pqo),e(Po,_qo),e(Po,r8),e(r8,bqo),e(r8,Eue),e(Eue,vqo),e(r8,Fqo),e(Po,Tqo),e(Po,ft),M(t8,ft,null),e(ft,Mqo),e(ft,Cue),e(Cue,Eqo),e(ft,Cqo),e(ft,rd),e(rd,wqo),e(rd,wue),e(wue,Aqo),e(rd,Lqo),e(rd,RV),e(RV,yqo),e(rd,xqo),e(ft,$qo),M(Ev,ft,null),e(Po,kqo),e(Po,oo),M(a8,oo,null),e(oo,Sqo),e(oo,Aue),e(Aue,Rqo),e(oo,Pqo),e(oo,Da),e(Da,Bqo),e(Da,Lue),e(Lue,Nqo),e(Da,Iqo),e(Da,yue),e(yue,qqo),e(Da,jqo),e(Da,xue),e(xue,Dqo),e(Da,Gqo),e(oo,Oqo),e(oo,me),e(me,Cv),e(Cv,$ue),e($ue,Vqo),e(Cv,Xqo),e(Cv,PV),e(PV,zqo),e(Cv,Qqo),e(me,Wqo),e(me,wv),e(wv,kue),e(kue,Hqo),e(wv,Uqo),e(wv,BV),e(BV,Jqo),e(wv,Yqo),e(me,Kqo),e(me,Av),e(Av,Sue),e(Sue,Zqo),e(Av,ejo),e(Av,NV),e(NV,ojo),e(Av,rjo),e(me,tjo),e(me,Lv),e(Lv,Rue),e(Rue,ajo),e(Lv,njo),e(Lv,IV),e(IV,sjo),e(Lv,ljo),e(me,ijo),e(me,yv),e(yv,Pue),e(Pue,djo),e(yv,cjo),e(yv,qV),e(qV,mjo),e(yv,fjo),e(me,gjo),e(me,xv),e(xv,Bue),e(Bue,hjo),e(xv,ujo),e(xv,jV),e(jV,pjo),e(xv,_jo),e(me,bjo),e(me,$v),e($v,Nue),e(Nue,vjo),e($v,Fjo),e($v,DV),e(DV,Tjo),e($v,Mjo),e(me,Ejo),e(me,kv),e(kv,Iue),e(Iue,Cjo),e(kv,wjo),e(kv,GV),e(GV,Ajo),e(kv,Ljo),e(me,yjo),e(me,Sv),e(Sv,que),e(que,xjo),e(Sv,$jo),e(Sv,OV),e(OV,kjo),e(Sv,Sjo),e(me,Rjo),e(me,Rv),e(Rv,jue),e(jue,Pjo),e(Rv,Bjo),e(Rv,VV),e(VV,Njo),e(Rv,Ijo),e(me,qjo),e(me,Pv),e(Pv,Due),e(Due,jjo),e(Pv,Djo),e(Pv,XV),e(XV,Gjo),e(Pv,Ojo),e(me,Vjo),e(me,Bv),e(Bv,Gue),e(Gue,Xjo),e(Bv,zjo),e(Bv,zV),e(zV,Qjo),e(Bv,Wjo),e(me,Hjo),e(me,Nv),e(Nv,Oue),e(Oue,Ujo),e(Nv,Jjo),e(Nv,QV),e(QV,Yjo),e(Nv,Kjo),e(me,Zjo),e(me,Iv),e(Iv,Vue),e(Vue,eDo),e(Iv,oDo),e(Iv,WV),e(WV,rDo),e(Iv,tDo),e(me,aDo),e(me,qv),e(qv,Xue),e(Xue,nDo),e(qv,sDo),e(qv,HV),e(HV,lDo),e(qv,iDo),e(me,dDo),e(me,jv),e(jv,zue),e(zue,cDo),e(jv,mDo),e(jv,UV),e(UV,fDo),e(jv,gDo),e(me,hDo),e(me,Dv),e(Dv,Que),e(Que,uDo),e(Dv,pDo),e(Dv,JV),e(JV,_Do),e(Dv,bDo),e(me,vDo),e(me,Gv),e(Gv,Wue),e(Wue,FDo),e(Gv,TDo),e(Gv,YV),e(YV,MDo),e(Gv,EDo),e(me,CDo),e(me,Ov),e(Ov,Hue),e(Hue,wDo),e(Ov,ADo),e(Ov,KV),e(KV,LDo),e(Ov,yDo),e(oo,xDo),e(oo,Vv),e(Vv,$Do),e(Vv,Uue),e(Uue,kDo),e(Vv,SDo),e(Vv,Jue),e(Jue,RDo),e(oo,PDo),M(Xv,oo,null),b(m,IXe,_),b(m,td,_),e(td,zv),e(zv,Yue),M(n8,Yue,null),e(td,BDo),e(td,Kue),e(Kue,NDo),b(m,qXe,_),b(m,Bo,_),M(s8,Bo,null),e(Bo,IDo),e(Bo,ad),e(ad,qDo),e(ad,ZV),e(ZV,jDo),e(ad,DDo),e(ad,eX),e(eX,GDo),e(ad,ODo),e(Bo,VDo),e(Bo,l8),e(l8,XDo),e(l8,Zue),e(Zue,zDo),e(l8,QDo),e(Bo,WDo),e(Bo,gt),M(i8,gt,null),e(gt,HDo),e(gt,epe),e(epe,UDo),e(gt,JDo),e(gt,nd),e(nd,YDo),e(nd,ope),e(ope,KDo),e(nd,ZDo),e(nd,oX),e(oX,eGo),e(nd,oGo),e(gt,rGo),M(Qv,gt,null),e(Bo,tGo),e(Bo,ro),M(d8,ro,null),e(ro,aGo),e(ro,rpe),e(rpe,nGo),e(ro,sGo),e(ro,Ga),e(Ga,lGo),e(Ga,tpe),e(tpe,iGo),e(Ga,dGo),e(Ga,ape),e(ape,cGo),e(Ga,mGo),e(Ga,npe),e(npe,fGo),e(Ga,gGo),e(ro,hGo),e(ro,B),e(B,Wv),e(Wv,spe),e(spe,uGo),e(Wv,pGo),e(Wv,rX),e(rX,_Go),e(Wv,bGo),e(B,vGo),e(B,Hv),e(Hv,lpe),e(lpe,FGo),e(Hv,TGo),e(Hv,tX),e(tX,MGo),e(Hv,EGo),e(B,CGo),e(B,Uv),e(Uv,ipe),e(ipe,wGo),e(Uv,AGo),e(Uv,aX),e(aX,LGo),e(Uv,yGo),e(B,xGo),e(B,Jv),e(Jv,dpe),e(dpe,$Go),e(Jv,kGo),e(Jv,nX),e(nX,SGo),e(Jv,RGo),e(B,PGo),e(B,Yv),e(Yv,cpe),e(cpe,BGo),e(Yv,NGo),e(Yv,sX),e(sX,IGo),e(Yv,qGo),e(B,jGo),e(B,Kv),e(Kv,mpe),e(mpe,DGo),e(Kv,GGo),e(Kv,lX),e(lX,OGo),e(Kv,VGo),e(B,XGo),e(B,Zv),e(Zv,fpe),e(fpe,zGo),e(Zv,QGo),e(Zv,iX),e(iX,WGo),e(Zv,HGo),e(B,UGo),e(B,e1),e(e1,gpe),e(gpe,JGo),e(e1,YGo),e(e1,dX),e(dX,KGo),e(e1,ZGo),e(B,eOo),e(B,o1),e(o1,hpe),e(hpe,oOo),e(o1,rOo),e(o1,cX),e(cX,tOo),e(o1,aOo),e(B,nOo),e(B,r1),e(r1,upe),e(upe,sOo),e(r1,lOo),e(r1,mX),e(mX,iOo),e(r1,dOo),e(B,cOo),e(B,t1),e(t1,ppe),e(ppe,mOo),e(t1,fOo),e(t1,fX),e(fX,gOo),e(t1,hOo),e(B,uOo),e(B,a1),e(a1,_pe),e(_pe,pOo),e(a1,_Oo),e(a1,gX),e(gX,bOo),e(a1,vOo),e(B,FOo),e(B,n1),e(n1,bpe),e(bpe,TOo),e(n1,MOo),e(n1,hX),e(hX,EOo),e(n1,COo),e(B,wOo),e(B,s1),e(s1,vpe),e(vpe,AOo),e(s1,LOo),e(s1,uX),e(uX,yOo),e(s1,xOo),e(B,$Oo),e(B,l1),e(l1,Fpe),e(Fpe,kOo),e(l1,SOo),e(l1,pX),e(pX,ROo),e(l1,POo),e(B,BOo),e(B,i1),e(i1,Tpe),e(Tpe,NOo),e(i1,IOo),e(i1,_X),e(_X,qOo),e(i1,jOo),e(B,DOo),e(B,d1),e(d1,Mpe),e(Mpe,GOo),e(d1,OOo),e(d1,bX),e(bX,VOo),e(d1,XOo),e(B,zOo),e(B,c1),e(c1,Epe),e(Epe,QOo),e(c1,WOo),e(c1,vX),e(vX,HOo),e(c1,UOo),e(B,JOo),e(B,m1),e(m1,Cpe),e(Cpe,YOo),e(m1,KOo),e(m1,FX),e(FX,ZOo),e(m1,eVo),e(B,oVo),e(B,f1),e(f1,wpe),e(wpe,rVo),e(f1,tVo),e(f1,TX),e(TX,aVo),e(f1,nVo),e(B,sVo),e(B,g1),e(g1,Ape),e(Ape,lVo),e(g1,iVo),e(g1,MX),e(MX,dVo),e(g1,cVo),e(B,mVo),e(B,h1),e(h1,Lpe),e(Lpe,fVo),e(h1,gVo),e(h1,EX),e(EX,hVo),e(h1,uVo),e(B,pVo),e(B,u1),e(u1,ype),e(ype,_Vo),e(u1,bVo),e(u1,CX),e(CX,vVo),e(u1,FVo),e(B,TVo),e(B,p1),e(p1,xpe),e(xpe,MVo),e(p1,EVo),e(p1,wX),e(wX,CVo),e(p1,wVo),e(B,AVo),e(B,_1),e(_1,$pe),e($pe,LVo),e(_1,yVo),e(_1,AX),e(AX,xVo),e(_1,$Vo),e(B,kVo),e(B,b1),e(b1,kpe),e(kpe,SVo),e(b1,RVo),e(b1,LX),e(LX,PVo),e(b1,BVo),e(B,NVo),e(B,v1),e(v1,Spe),e(Spe,IVo),e(v1,qVo),e(v1,yX),e(yX,jVo),e(v1,DVo),e(B,GVo),e(B,F1),e(F1,Rpe),e(Rpe,OVo),e(F1,VVo),e(F1,xX),e(xX,XVo),e(F1,zVo),e(B,QVo),e(B,T1),e(T1,Ppe),e(Ppe,WVo),e(T1,HVo),e(T1,$X),e($X,UVo),e(T1,JVo),e(B,YVo),e(B,M1),e(M1,Bpe),e(Bpe,KVo),e(M1,ZVo),e(M1,kX),e(kX,eXo),e(M1,oXo),e(B,rXo),e(B,E1),e(E1,Npe),e(Npe,tXo),e(E1,aXo),e(E1,SX),e(SX,nXo),e(E1,sXo),e(B,lXo),e(B,C1),e(C1,Ipe),e(Ipe,iXo),e(C1,dXo),e(C1,RX),e(RX,cXo),e(C1,mXo),e(B,fXo),e(B,w1),e(w1,qpe),e(qpe,gXo),e(w1,hXo),e(w1,PX),e(PX,uXo),e(w1,pXo),e(B,_Xo),e(B,A1),e(A1,jpe),e(jpe,bXo),e(A1,vXo),e(A1,BX),e(BX,FXo),e(A1,TXo),e(B,MXo),e(B,L1),e(L1,Dpe),e(Dpe,EXo),e(L1,CXo),e(L1,NX),e(NX,wXo),e(L1,AXo),e(B,LXo),e(B,y1),e(y1,Gpe),e(Gpe,yXo),e(y1,xXo),e(y1,IX),e(IX,$Xo),e(y1,kXo),e(B,SXo),e(B,x1),e(x1,Ope),e(Ope,RXo),e(x1,PXo),e(x1,qX),e(qX,BXo),e(x1,NXo),e(B,IXo),e(B,$1),e($1,Vpe),e(Vpe,qXo),e($1,jXo),e($1,jX),e(jX,DXo),e($1,GXo),e(B,OXo),e(B,k1),e(k1,Xpe),e(Xpe,VXo),e(k1,XXo),e(k1,DX),e(DX,zXo),e(k1,QXo),e(B,WXo),e(B,S1),e(S1,zpe),e(zpe,HXo),e(S1,UXo),e(S1,GX),e(GX,JXo),e(S1,YXo),e(B,KXo),e(B,R1),e(R1,Qpe),e(Qpe,ZXo),e(R1,ezo),e(R1,OX),e(OX,ozo),e(R1,rzo),e(B,tzo),e(B,P1),e(P1,Wpe),e(Wpe,azo),e(P1,nzo),e(P1,VX),e(VX,szo),e(P1,lzo),e(B,izo),e(B,B1),e(B1,Hpe),e(Hpe,dzo),e(B1,czo),e(B1,XX),e(XX,mzo),e(B1,fzo),e(B,gzo),e(B,N1),e(N1,Upe),e(Upe,hzo),e(N1,uzo),e(N1,zX),e(zX,pzo),e(N1,_zo),e(B,bzo),e(B,I1),e(I1,Jpe),e(Jpe,vzo),e(I1,Fzo),e(I1,QX),e(QX,Tzo),e(I1,Mzo),e(B,Ezo),e(B,q1),e(q1,Ype),e(Ype,Czo),e(q1,wzo),e(q1,WX),e(WX,Azo),e(q1,Lzo),e(B,yzo),e(B,j1),e(j1,Kpe),e(Kpe,xzo),e(j1,$zo),e(j1,HX),e(HX,kzo),e(j1,Szo),e(B,Rzo),e(B,D1),e(D1,Zpe),e(Zpe,Pzo),e(D1,Bzo),e(D1,UX),e(UX,Nzo),e(D1,Izo),e(B,qzo),e(B,G1),e(G1,e_e),e(e_e,jzo),e(G1,Dzo),e(G1,JX),e(JX,Gzo),e(G1,Ozo),e(B,Vzo),e(B,O1),e(O1,o_e),e(o_e,Xzo),e(O1,zzo),e(O1,YX),e(YX,Qzo),e(O1,Wzo),e(B,Hzo),e(B,V1),e(V1,r_e),e(r_e,Uzo),e(V1,Jzo),e(V1,KX),e(KX,Yzo),e(V1,Kzo),e(ro,Zzo),e(ro,X1),e(X1,eQo),e(X1,t_e),e(t_e,oQo),e(X1,rQo),e(X1,a_e),e(a_e,tQo),e(ro,aQo),M(z1,ro,null),b(m,jXe,_),b(m,sd,_),e(sd,Q1),e(Q1,n_e),M(c8,n_e,null),e(sd,nQo),e(sd,s_e),e(s_e,sQo),b(m,DXe,_),b(m,No,_),M(m8,No,null),e(No,lQo),e(No,ld),e(ld,iQo),e(ld,ZX),e(ZX,dQo),e(ld,cQo),e(ld,ez),e(ez,mQo),e(ld,fQo),e(No,gQo),e(No,f8),e(f8,hQo),e(f8,l_e),e(l_e,uQo),e(f8,pQo),e(No,_Qo),e(No,ht),M(g8,ht,null),e(ht,bQo),e(ht,i_e),e(i_e,vQo),e(ht,FQo),e(ht,id),e(id,TQo),e(id,d_e),e(d_e,MQo),e(id,EQo),e(id,oz),e(oz,CQo),e(id,wQo),e(ht,AQo),M(W1,ht,null),e(No,LQo),e(No,to),M(h8,to,null),e(to,yQo),e(to,c_e),e(c_e,xQo),e(to,$Qo),e(to,Oa),e(Oa,kQo),e(Oa,m_e),e(m_e,SQo),e(Oa,RQo),e(Oa,f_e),e(f_e,PQo),e(Oa,BQo),e(Oa,g_e),e(g_e,NQo),e(Oa,IQo),e(to,qQo),e(to,Z),e(Z,H1),e(H1,h_e),e(h_e,jQo),e(H1,DQo),e(H1,rz),e(rz,GQo),e(H1,OQo),e(Z,VQo),e(Z,U1),e(U1,u_e),e(u_e,XQo),e(U1,zQo),e(U1,tz),e(tz,QQo),e(U1,WQo),e(Z,HQo),e(Z,J1),e(J1,p_e),e(p_e,UQo),e(J1,JQo),e(J1,az),e(az,YQo),e(J1,KQo),e(Z,ZQo),e(Z,Y1),e(Y1,__e),e(__e,eWo),e(Y1,oWo),e(Y1,nz),e(nz,rWo),e(Y1,tWo),e(Z,aWo),e(Z,K1),e(K1,b_e),e(b_e,nWo),e(K1,sWo),e(K1,sz),e(sz,lWo),e(K1,iWo),e(Z,dWo),e(Z,Z1),e(Z1,v_e),e(v_e,cWo),e(Z1,mWo),e(Z1,lz),e(lz,fWo),e(Z1,gWo),e(Z,hWo),e(Z,eF),e(eF,F_e),e(F_e,uWo),e(eF,pWo),e(eF,iz),e(iz,_Wo),e(eF,bWo),e(Z,vWo),e(Z,oF),e(oF,T_e),e(T_e,FWo),e(oF,TWo),e(oF,dz),e(dz,MWo),e(oF,EWo),e(Z,CWo),e(Z,rF),e(rF,M_e),e(M_e,wWo),e(rF,AWo),e(rF,cz),e(cz,LWo),e(rF,yWo),e(Z,xWo),e(Z,tF),e(tF,E_e),e(E_e,$Wo),e(tF,kWo),e(tF,mz),e(mz,SWo),e(tF,RWo),e(Z,PWo),e(Z,aF),e(aF,C_e),e(C_e,BWo),e(aF,NWo),e(aF,fz),e(fz,IWo),e(aF,qWo),e(Z,jWo),e(Z,nF),e(nF,w_e),e(w_e,DWo),e(nF,GWo),e(nF,gz),e(gz,OWo),e(nF,VWo),e(Z,XWo),e(Z,sF),e(sF,A_e),e(A_e,zWo),e(sF,QWo),e(sF,hz),e(hz,WWo),e(sF,HWo),e(Z,UWo),e(Z,lF),e(lF,L_e),e(L_e,JWo),e(lF,YWo),e(lF,uz),e(uz,KWo),e(lF,ZWo),e(Z,eHo),e(Z,iF),e(iF,y_e),e(y_e,oHo),e(iF,rHo),e(iF,pz),e(pz,tHo),e(iF,aHo),e(Z,nHo),e(Z,dF),e(dF,x_e),e(x_e,sHo),e(dF,lHo),e(dF,_z),e(_z,iHo),e(dF,dHo),e(Z,cHo),e(Z,cF),e(cF,$_e),e($_e,mHo),e(cF,fHo),e(cF,bz),e(bz,gHo),e(cF,hHo),e(Z,uHo),e(Z,mF),e(mF,k_e),e(k_e,pHo),e(mF,_Ho),e(mF,vz),e(vz,bHo),e(mF,vHo),e(Z,FHo),e(Z,fF),e(fF,S_e),e(S_e,THo),e(fF,MHo),e(fF,Fz),e(Fz,EHo),e(fF,CHo),e(Z,wHo),e(Z,gF),e(gF,R_e),e(R_e,AHo),e(gF,LHo),e(gF,Tz),e(Tz,yHo),e(gF,xHo),e(Z,$Ho),e(Z,hF),e(hF,P_e),e(P_e,kHo),e(hF,SHo),e(hF,Mz),e(Mz,RHo),e(hF,PHo),e(Z,BHo),e(Z,uF),e(uF,B_e),e(B_e,NHo),e(uF,IHo),e(uF,Ez),e(Ez,qHo),e(uF,jHo),e(Z,DHo),e(Z,pF),e(pF,N_e),e(N_e,GHo),e(pF,OHo),e(pF,Cz),e(Cz,VHo),e(pF,XHo),e(Z,zHo),e(Z,_F),e(_F,I_e),e(I_e,QHo),e(_F,WHo),e(_F,wz),e(wz,HHo),e(_F,UHo),e(Z,JHo),e(Z,bF),e(bF,q_e),e(q_e,YHo),e(bF,KHo),e(bF,Az),e(Az,ZHo),e(bF,eUo),e(Z,oUo),e(Z,vF),e(vF,j_e),e(j_e,rUo),e(vF,tUo),e(vF,Lz),e(Lz,aUo),e(vF,nUo),e(Z,sUo),e(Z,FF),e(FF,D_e),e(D_e,lUo),e(FF,iUo),e(FF,yz),e(yz,dUo),e(FF,cUo),e(Z,mUo),e(Z,TF),e(TF,G_e),e(G_e,fUo),e(TF,gUo),e(TF,xz),e(xz,hUo),e(TF,uUo),e(Z,pUo),e(Z,MF),e(MF,O_e),e(O_e,_Uo),e(MF,bUo),e(MF,$z),e($z,vUo),e(MF,FUo),e(Z,TUo),e(Z,EF),e(EF,V_e),e(V_e,MUo),e(EF,EUo),e(EF,kz),e(kz,CUo),e(EF,wUo),e(to,AUo),e(to,CF),e(CF,LUo),e(CF,X_e),e(X_e,yUo),e(CF,xUo),e(CF,z_e),e(z_e,$Uo),e(to,kUo),M(wF,to,null),b(m,GXe,_),b(m,dd,_),e(dd,AF),e(AF,Q_e),M(u8,Q_e,null),e(dd,SUo),e(dd,W_e),e(W_e,RUo),b(m,OXe,_),b(m,Io,_),M(p8,Io,null),e(Io,PUo),e(Io,cd),e(cd,BUo),e(cd,Sz),e(Sz,NUo),e(cd,IUo),e(cd,Rz),e(Rz,qUo),e(cd,jUo),e(Io,DUo),e(Io,_8),e(_8,GUo),e(_8,H_e),e(H_e,OUo),e(_8,VUo),e(Io,XUo),e(Io,ut),M(b8,ut,null),e(ut,zUo),e(ut,U_e),e(U_e,QUo),e(ut,WUo),e(ut,md),e(md,HUo),e(md,J_e),e(J_e,UUo),e(md,JUo),e(md,Pz),e(Pz,YUo),e(md,KUo),e(ut,ZUo),M(LF,ut,null),e(Io,eJo),e(Io,ao),M(v8,ao,null),e(ao,oJo),e(ao,Y_e),e(Y_e,rJo),e(ao,tJo),e(ao,Va),e(Va,aJo),e(Va,K_e),e(K_e,nJo),e(Va,sJo),e(Va,Z_e),e(Z_e,lJo),e(Va,iJo),e(Va,e2e),e(e2e,dJo),e(Va,cJo),e(ao,mJo),e(ao,qo),e(qo,yF),e(yF,o2e),e(o2e,fJo),e(yF,gJo),e(yF,Bz),e(Bz,hJo),e(yF,uJo),e(qo,pJo),e(qo,xF),e(xF,r2e),e(r2e,_Jo),e(xF,bJo),e(xF,Nz),e(Nz,vJo),e(xF,FJo),e(qo,TJo),e(qo,$F),e($F,t2e),e(t2e,MJo),e($F,EJo),e($F,Iz),e(Iz,CJo),e($F,wJo),e(qo,AJo),e(qo,kF),e(kF,a2e),e(a2e,LJo),e(kF,yJo),e(kF,qz),e(qz,xJo),e(kF,$Jo),e(qo,kJo),e(qo,SF),e(SF,n2e),e(n2e,SJo),e(SF,RJo),e(SF,jz),e(jz,PJo),e(SF,BJo),e(qo,NJo),e(qo,RF),e(RF,s2e),e(s2e,IJo),e(RF,qJo),e(RF,Dz),e(Dz,jJo),e(RF,DJo),e(ao,GJo),e(ao,PF),e(PF,OJo),e(PF,l2e),e(l2e,VJo),e(PF,XJo),e(PF,i2e),e(i2e,zJo),e(ao,QJo),M(BF,ao,null),b(m,VXe,_),b(m,fd,_),e(fd,NF),e(NF,d2e),M(F8,d2e,null),e(fd,WJo),e(fd,c2e),e(c2e,HJo),b(m,XXe,_),b(m,jo,_),M(T8,jo,null),e(jo,UJo),e(jo,gd),e(gd,JJo),e(gd,Gz),e(Gz,YJo),e(gd,KJo),e(gd,Oz),e(Oz,ZJo),e(gd,eYo),e(jo,oYo),e(jo,M8),e(M8,rYo),e(M8,m2e),e(m2e,tYo),e(M8,aYo),e(jo,nYo),e(jo,pt),M(E8,pt,null),e(pt,sYo),e(pt,f2e),e(f2e,lYo),e(pt,iYo),e(pt,hd),e(hd,dYo),e(hd,g2e),e(g2e,cYo),e(hd,mYo),e(hd,Vz),e(Vz,fYo),e(hd,gYo),e(pt,hYo),M(IF,pt,null),e(jo,uYo),e(jo,no),M(C8,no,null),e(no,pYo),e(no,h2e),e(h2e,_Yo),e(no,bYo),e(no,Xa),e(Xa,vYo),e(Xa,u2e),e(u2e,FYo),e(Xa,TYo),e(Xa,p2e),e(p2e,MYo),e(Xa,EYo),e(Xa,_2e),e(_2e,CYo),e(Xa,wYo),e(no,AYo),e(no,U),e(U,qF),e(qF,b2e),e(b2e,LYo),e(qF,yYo),e(qF,Xz),e(Xz,xYo),e(qF,$Yo),e(U,kYo),e(U,jF),e(jF,v2e),e(v2e,SYo),e(jF,RYo),e(jF,zz),e(zz,PYo),e(jF,BYo),e(U,NYo),e(U,DF),e(DF,F2e),e(F2e,IYo),e(DF,qYo),e(DF,Qz),e(Qz,jYo),e(DF,DYo),e(U,GYo),e(U,GF),e(GF,T2e),e(T2e,OYo),e(GF,VYo),e(GF,Wz),e(Wz,XYo),e(GF,zYo),e(U,QYo),e(U,OF),e(OF,M2e),e(M2e,WYo),e(OF,HYo),e(OF,Hz),e(Hz,UYo),e(OF,JYo),e(U,YYo),e(U,VF),e(VF,E2e),e(E2e,KYo),e(VF,ZYo),e(VF,Uz),e(Uz,eKo),e(VF,oKo),e(U,rKo),e(U,XF),e(XF,C2e),e(C2e,tKo),e(XF,aKo),e(XF,Jz),e(Jz,nKo),e(XF,sKo),e(U,lKo),e(U,zF),e(zF,w2e),e(w2e,iKo),e(zF,dKo),e(zF,Yz),e(Yz,cKo),e(zF,mKo),e(U,fKo),e(U,QF),e(QF,A2e),e(A2e,gKo),e(QF,hKo),e(QF,Kz),e(Kz,uKo),e(QF,pKo),e(U,_Ko),e(U,WF),e(WF,L2e),e(L2e,bKo),e(WF,vKo),e(WF,Zz),e(Zz,FKo),e(WF,TKo),e(U,MKo),e(U,HF),e(HF,y2e),e(y2e,EKo),e(HF,CKo),e(HF,eQ),e(eQ,wKo),e(HF,AKo),e(U,LKo),e(U,UF),e(UF,x2e),e(x2e,yKo),e(UF,xKo),e(UF,oQ),e(oQ,$Ko),e(UF,kKo),e(U,SKo),e(U,JF),e(JF,$2e),e($2e,RKo),e(JF,PKo),e(JF,rQ),e(rQ,BKo),e(JF,NKo),e(U,IKo),e(U,YF),e(YF,k2e),e(k2e,qKo),e(YF,jKo),e(YF,tQ),e(tQ,DKo),e(YF,GKo),e(U,OKo),e(U,KF),e(KF,S2e),e(S2e,VKo),e(KF,XKo),e(KF,aQ),e(aQ,zKo),e(KF,QKo),e(U,WKo),e(U,ZF),e(ZF,R2e),e(R2e,HKo),e(ZF,UKo),e(ZF,nQ),e(nQ,JKo),e(ZF,YKo),e(U,KKo),e(U,eT),e(eT,P2e),e(P2e,ZKo),e(eT,eZo),e(eT,sQ),e(sQ,oZo),e(eT,rZo),e(U,tZo),e(U,oT),e(oT,B2e),e(B2e,aZo),e(oT,nZo),e(oT,lQ),e(lQ,sZo),e(oT,lZo),e(U,iZo),e(U,rT),e(rT,N2e),e(N2e,dZo),e(rT,cZo),e(rT,iQ),e(iQ,mZo),e(rT,fZo),e(U,gZo),e(U,tT),e(tT,I2e),e(I2e,hZo),e(tT,uZo),e(tT,dQ),e(dQ,pZo),e(tT,_Zo),e(U,bZo),e(U,aT),e(aT,q2e),e(q2e,vZo),e(aT,FZo),e(aT,cQ),e(cQ,TZo),e(aT,MZo),e(U,EZo),e(U,nT),e(nT,j2e),e(j2e,CZo),e(nT,wZo),e(nT,mQ),e(mQ,AZo),e(nT,LZo),e(U,yZo),e(U,sT),e(sT,D2e),e(D2e,xZo),e(sT,$Zo),e(sT,fQ),e(fQ,kZo),e(sT,SZo),e(U,RZo),e(U,lT),e(lT,G2e),e(G2e,PZo),e(lT,BZo),e(lT,gQ),e(gQ,NZo),e(lT,IZo),e(U,qZo),e(U,iT),e(iT,O2e),e(O2e,jZo),e(iT,DZo),e(iT,hQ),e(hQ,GZo),e(iT,OZo),e(U,VZo),e(U,dT),e(dT,V2e),e(V2e,XZo),e(dT,zZo),e(dT,uQ),e(uQ,QZo),e(dT,WZo),e(U,HZo),e(U,cT),e(cT,X2e),e(X2e,UZo),e(cT,JZo),e(cT,pQ),e(pQ,YZo),e(cT,KZo),e(U,ZZo),e(U,mT),e(mT,z2e),e(z2e,eer),e(mT,oer),e(mT,_Q),e(_Q,rer),e(mT,ter),e(U,aer),e(U,fT),e(fT,Q2e),e(Q2e,ner),e(fT,ser),e(fT,bQ),e(bQ,ler),e(fT,ier),e(U,der),e(U,gT),e(gT,W2e),e(W2e,cer),e(gT,mer),e(gT,vQ),e(vQ,fer),e(gT,ger),e(U,her),e(U,hT),e(hT,H2e),e(H2e,uer),e(hT,per),e(hT,FQ),e(FQ,_er),e(hT,ber),e(U,ver),e(U,uT),e(uT,U2e),e(U2e,Fer),e(uT,Ter),e(uT,TQ),e(TQ,Mer),e(uT,Eer),e(U,Cer),e(U,pT),e(pT,J2e),e(J2e,wer),e(pT,Aer),e(pT,MQ),e(MQ,Ler),e(pT,yer),e(U,xer),e(U,_T),e(_T,Y2e),e(Y2e,$er),e(_T,ker),e(_T,EQ),e(EQ,Ser),e(_T,Rer),e(U,Per),e(U,bT),e(bT,K2e),e(K2e,Ber),e(bT,Ner),e(bT,CQ),e(CQ,Ier),e(bT,qer),e(U,jer),e(U,vT),e(vT,Z2e),e(Z2e,Der),e(vT,Ger),e(vT,wQ),e(wQ,Oer),e(vT,Ver),e(no,Xer),e(no,FT),e(FT,zer),e(FT,ebe),e(ebe,Qer),e(FT,Wer),e(FT,obe),e(obe,Her),e(no,Uer),M(TT,no,null),b(m,zXe,_),b(m,ud,_),e(ud,MT),e(MT,rbe),M(w8,rbe,null),e(ud,Jer),e(ud,tbe),e(tbe,Yer),b(m,QXe,_),b(m,Do,_),M(A8,Do,null),e(Do,Ker),e(Do,pd),e(pd,Zer),e(pd,AQ),e(AQ,eor),e(pd,oor),e(pd,LQ),e(LQ,ror),e(pd,tor),e(Do,aor),e(Do,L8),e(L8,nor),e(L8,abe),e(abe,sor),e(L8,lor),e(Do,ior),e(Do,_t),M(y8,_t,null),e(_t,dor),e(_t,nbe),e(nbe,cor),e(_t,mor),e(_t,_d),e(_d,gor),e(_d,sbe),e(sbe,hor),e(_d,uor),e(_d,yQ),e(yQ,por),e(_d,_or),e(_t,bor),M(ET,_t,null),e(Do,vor),e(Do,so),M(x8,so,null),e(so,For),e(so,lbe),e(lbe,Tor),e(so,Mor),e(so,za),e(za,Eor),e(za,ibe),e(ibe,Cor),e(za,wor),e(za,dbe),e(dbe,Aor),e(za,Lor),e(za,cbe),e(cbe,yor),e(za,xor),e(so,$or),e(so,V),e(V,CT),e(CT,mbe),e(mbe,kor),e(CT,Sor),e(CT,xQ),e(xQ,Ror),e(CT,Por),e(V,Bor),e(V,wT),e(wT,fbe),e(fbe,Nor),e(wT,Ior),e(wT,$Q),e($Q,qor),e(wT,jor),e(V,Dor),e(V,AT),e(AT,gbe),e(gbe,Gor),e(AT,Oor),e(AT,kQ),e(kQ,Vor),e(AT,Xor),e(V,zor),e(V,LT),e(LT,hbe),e(hbe,Qor),e(LT,Wor),e(LT,SQ),e(SQ,Hor),e(LT,Uor),e(V,Jor),e(V,yT),e(yT,ube),e(ube,Yor),e(yT,Kor),e(yT,RQ),e(RQ,Zor),e(yT,err),e(V,orr),e(V,xT),e(xT,pbe),e(pbe,rrr),e(xT,trr),e(xT,PQ),e(PQ,arr),e(xT,nrr),e(V,srr),e(V,$T),e($T,_be),e(_be,lrr),e($T,irr),e($T,BQ),e(BQ,drr),e($T,crr),e(V,mrr),e(V,kT),e(kT,bbe),e(bbe,frr),e(kT,grr),e(kT,NQ),e(NQ,hrr),e(kT,urr),e(V,prr),e(V,ST),e(ST,vbe),e(vbe,_rr),e(ST,brr),e(ST,IQ),e(IQ,vrr),e(ST,Frr),e(V,Trr),e(V,RT),e(RT,Fbe),e(Fbe,Mrr),e(RT,Err),e(RT,qQ),e(qQ,Crr),e(RT,wrr),e(V,Arr),e(V,PT),e(PT,Tbe),e(Tbe,Lrr),e(PT,yrr),e(PT,jQ),e(jQ,xrr),e(PT,$rr),e(V,krr),e(V,BT),e(BT,Mbe),e(Mbe,Srr),e(BT,Rrr),e(BT,DQ),e(DQ,Prr),e(BT,Brr),e(V,Nrr),e(V,NT),e(NT,Ebe),e(Ebe,Irr),e(NT,qrr),e(NT,GQ),e(GQ,jrr),e(NT,Drr),e(V,Grr),e(V,IT),e(IT,Cbe),e(Cbe,Orr),e(IT,Vrr),e(IT,OQ),e(OQ,Xrr),e(IT,zrr),e(V,Qrr),e(V,qT),e(qT,wbe),e(wbe,Wrr),e(qT,Hrr),e(qT,VQ),e(VQ,Urr),e(qT,Jrr),e(V,Yrr),e(V,jT),e(jT,Abe),e(Abe,Krr),e(jT,Zrr),e(jT,XQ),e(XQ,etr),e(jT,otr),e(V,rtr),e(V,DT),e(DT,Lbe),e(Lbe,ttr),e(DT,atr),e(DT,zQ),e(zQ,ntr),e(DT,str),e(V,ltr),e(V,GT),e(GT,ybe),e(ybe,itr),e(GT,dtr),e(GT,QQ),e(QQ,ctr),e(GT,mtr),e(V,ftr),e(V,OT),e(OT,xbe),e(xbe,gtr),e(OT,htr),e(OT,WQ),e(WQ,utr),e(OT,ptr),e(V,_tr),e(V,VT),e(VT,$be),e($be,btr),e(VT,vtr),e(VT,HQ),e(HQ,Ftr),e(VT,Ttr),e(V,Mtr),e(V,XT),e(XT,kbe),e(kbe,Etr),e(XT,Ctr),e(XT,UQ),e(UQ,wtr),e(XT,Atr),e(V,Ltr),e(V,zT),e(zT,Sbe),e(Sbe,ytr),e(zT,xtr),e(zT,JQ),e(JQ,$tr),e(zT,ktr),e(V,Str),e(V,QT),e(QT,Rbe),e(Rbe,Rtr),e(QT,Ptr),e(QT,YQ),e(YQ,Btr),e(QT,Ntr),e(V,Itr),e(V,WT),e(WT,Pbe),e(Pbe,qtr),e(WT,jtr),e(WT,KQ),e(KQ,Dtr),e(WT,Gtr),e(V,Otr),e(V,HT),e(HT,Bbe),e(Bbe,Vtr),e(HT,Xtr),e(HT,ZQ),e(ZQ,ztr),e(HT,Qtr),e(V,Wtr),e(V,UT),e(UT,Nbe),e(Nbe,Htr),e(UT,Utr),e(UT,eW),e(eW,Jtr),e(UT,Ytr),e(V,Ktr),e(V,JT),e(JT,Ibe),e(Ibe,Ztr),e(JT,ear),e(JT,oW),e(oW,oar),e(JT,rar),e(V,tar),e(V,YT),e(YT,qbe),e(qbe,aar),e(YT,nar),e(YT,rW),e(rW,sar),e(YT,lar),e(V,iar),e(V,KT),e(KT,jbe),e(jbe,dar),e(KT,car),e(KT,tW),e(tW,mar),e(KT,far),e(V,gar),e(V,ZT),e(ZT,Dbe),e(Dbe,har),e(ZT,uar),e(ZT,aW),e(aW,par),e(ZT,_ar),e(V,bar),e(V,eM),e(eM,Gbe),e(Gbe,Far),e(eM,Tar),e(eM,nW),e(nW,Mar),e(eM,Ear),e(V,Car),e(V,oM),e(oM,Obe),e(Obe,war),e(oM,Aar),e(oM,sW),e(sW,Lar),e(oM,yar),e(V,xar),e(V,rM),e(rM,Vbe),e(Vbe,$ar),e(rM,kar),e(rM,lW),e(lW,Sar),e(rM,Rar),e(V,Par),e(V,tM),e(tM,Xbe),e(Xbe,Bar),e(tM,Nar),e(tM,iW),e(iW,Iar),e(tM,qar),e(V,jar),e(V,aM),e(aM,zbe),e(zbe,Dar),e(aM,Gar),e(aM,dW),e(dW,Oar),e(aM,Var),e(V,Xar),e(V,nM),e(nM,Qbe),e(Qbe,zar),e(nM,Qar),e(nM,cW),e(cW,War),e(nM,Har),e(V,Uar),e(V,sM),e(sM,Wbe),e(Wbe,Jar),e(sM,Yar),e(sM,mW),e(mW,Kar),e(sM,Zar),e(V,enr),e(V,lM),e(lM,Hbe),e(Hbe,onr),e(lM,rnr),e(lM,fW),e(fW,tnr),e(lM,anr),e(V,nnr),e(V,iM),e(iM,Ube),e(Ube,snr),e(iM,lnr),e(iM,gW),e(gW,inr),e(iM,dnr),e(V,cnr),e(V,dM),e(dM,Jbe),e(Jbe,mnr),e(dM,fnr),e(dM,hW),e(hW,gnr),e(dM,hnr),e(V,unr),e(V,cM),e(cM,Ybe),e(Ybe,pnr),e(cM,_nr),e(cM,uW),e(uW,bnr),e(cM,vnr),e(V,Fnr),e(V,mM),e(mM,Kbe),e(Kbe,Tnr),e(mM,Mnr),e(mM,pW),e(pW,Enr),e(mM,Cnr),e(so,wnr),e(so,fM),e(fM,Anr),e(fM,Zbe),e(Zbe,Lnr),e(fM,ynr),e(fM,eve),e(eve,xnr),e(so,$nr),M(gM,so,null),b(m,WXe,_),b(m,bd,_),e(bd,hM),e(hM,ove),M($8,ove,null),e(bd,knr),e(bd,rve),e(rve,Snr),b(m,HXe,_),b(m,Go,_),M(k8,Go,null),e(Go,Rnr),e(Go,vd),e(vd,Pnr),e(vd,_W),e(_W,Bnr),e(vd,Nnr),e(vd,bW),e(bW,Inr),e(vd,qnr),e(Go,jnr),e(Go,S8),e(S8,Dnr),e(S8,tve),e(tve,Gnr),e(S8,Onr),e(Go,Vnr),e(Go,bt),M(R8,bt,null),e(bt,Xnr),e(bt,ave),e(ave,znr),e(bt,Qnr),e(bt,Fd),e(Fd,Wnr),e(Fd,nve),e(nve,Hnr),e(Fd,Unr),e(Fd,vW),e(vW,Jnr),e(Fd,Ynr),e(bt,Knr),M(uM,bt,null),e(Go,Znr),e(Go,lo),M(P8,lo,null),e(lo,esr),e(lo,sve),e(sve,osr),e(lo,rsr),e(lo,Qa),e(Qa,tsr),e(Qa,lve),e(lve,asr),e(Qa,nsr),e(Qa,ive),e(ive,ssr),e(Qa,lsr),e(Qa,dve),e(dve,isr),e(Qa,dsr),e(lo,csr),e(lo,cve),e(cve,pM),e(pM,mve),e(mve,msr),e(pM,fsr),e(pM,FW),e(FW,gsr),e(pM,hsr),e(lo,usr),e(lo,_M),e(_M,psr),e(_M,fve),e(fve,_sr),e(_M,bsr),e(_M,gve),e(gve,vsr),e(lo,Fsr),M(bM,lo,null),b(m,UXe,_),b(m,Td,_),e(Td,vM),e(vM,hve),M(B8,hve,null),e(Td,Tsr),e(Td,uve),e(uve,Msr),b(m,JXe,_),b(m,Oo,_),M(N8,Oo,null),e(Oo,Esr),e(Oo,Md),e(Md,Csr),e(Md,TW),e(TW,wsr),e(Md,Asr),e(Md,MW),e(MW,Lsr),e(Md,ysr),e(Oo,xsr),e(Oo,I8),e(I8,$sr),e(I8,pve),e(pve,ksr),e(I8,Ssr),e(Oo,Rsr),e(Oo,vt),M(q8,vt,null),e(vt,Psr),e(vt,_ve),e(_ve,Bsr),e(vt,Nsr),e(vt,Ed),e(Ed,Isr),e(Ed,bve),e(bve,qsr),e(Ed,jsr),e(Ed,EW),e(EW,Dsr),e(Ed,Gsr),e(vt,Osr),M(FM,vt,null),e(Oo,Vsr),e(Oo,io),M(j8,io,null),e(io,Xsr),e(io,vve),e(vve,zsr),e(io,Qsr),e(io,Wa),e(Wa,Wsr),e(Wa,Fve),e(Fve,Hsr),e(Wa,Usr),e(Wa,Tve),e(Tve,Jsr),e(Wa,Ysr),e(Wa,Mve),e(Mve,Ksr),e(Wa,Zsr),e(io,elr),e(io,ve),e(ve,TM),e(TM,Eve),e(Eve,olr),e(TM,rlr),e(TM,CW),e(CW,tlr),e(TM,alr),e(ve,nlr),e(ve,MM),e(MM,Cve),e(Cve,slr),e(MM,llr),e(MM,wW),e(wW,ilr),e(MM,dlr),e(ve,clr),e(ve,EM),e(EM,wve),e(wve,mlr),e(EM,flr),e(EM,AW),e(AW,glr),e(EM,hlr),e(ve,ulr),e(ve,CM),e(CM,Ave),e(Ave,plr),e(CM,_lr),e(CM,LW),e(LW,blr),e(CM,vlr),e(ve,Flr),e(ve,Us),e(Us,Lve),e(Lve,Tlr),e(Us,Mlr),e(Us,yW),e(yW,Elr),e(Us,Clr),e(Us,xW),e(xW,wlr),e(Us,Alr),e(ve,Llr),e(ve,wM),e(wM,yve),e(yve,ylr),e(wM,xlr),e(wM,$W),e($W,$lr),e(wM,klr),e(ve,Slr),e(ve,Js),e(Js,xve),e(xve,Rlr),e(Js,Plr),e(Js,kW),e(kW,Blr),e(Js,Nlr),e(Js,SW),e(SW,Ilr),e(Js,qlr),e(ve,jlr),e(ve,AM),e(AM,$ve),e($ve,Dlr),e(AM,Glr),e(AM,RW),e(RW,Olr),e(AM,Vlr),e(ve,Xlr),e(ve,Ft),e(Ft,kve),e(kve,zlr),e(Ft,Qlr),e(Ft,PW),e(PW,Wlr),e(Ft,Hlr),e(Ft,BW),e(BW,Ulr),e(Ft,Jlr),e(Ft,NW),e(NW,Ylr),e(Ft,Klr),e(ve,Zlr),e(ve,LM),e(LM,Sve),e(Sve,eir),e(LM,oir),e(LM,IW),e(IW,rir),e(LM,tir),e(ve,air),e(ve,yM),e(yM,Rve),e(Rve,nir),e(yM,sir),e(yM,qW),e(qW,lir),e(yM,iir),e(ve,dir),e(ve,xM),e(xM,Pve),e(Pve,cir),e(xM,mir),e(xM,jW),e(jW,fir),e(xM,gir),e(ve,hir),e(ve,$M),e($M,Bve),e(Bve,uir),e($M,pir),e($M,DW),e(DW,_ir),e($M,bir),e(ve,vir),e(ve,kM),e(kM,Nve),e(Nve,Fir),e(kM,Tir),e(kM,GW),e(GW,Mir),e(kM,Eir),e(ve,Cir),e(ve,SM),e(SM,Ive),e(Ive,wir),e(SM,Air),e(SM,OW),e(OW,Lir),e(SM,yir),e(ve,xir),e(ve,RM),e(RM,qve),e(qve,$ir),e(RM,kir),e(RM,VW),e(VW,Sir),e(RM,Rir),e(io,Pir),e(io,PM),e(PM,Bir),e(PM,jve),e(jve,Nir),e(PM,Iir),e(PM,Dve),e(Dve,qir),e(io,jir),M(BM,io,null),b(m,YXe,_),b(m,Cd,_),e(Cd,NM),e(NM,Gve),M(D8,Gve,null),e(Cd,Dir),e(Cd,Ove),e(Ove,Gir),b(m,KXe,_),b(m,Vo,_),M(G8,Vo,null),e(Vo,Oir),e(Vo,wd),e(wd,Vir),e(wd,XW),e(XW,Xir),e(wd,zir),e(wd,zW),e(zW,Qir),e(wd,Wir),e(Vo,Hir),e(Vo,O8),e(O8,Uir),e(O8,Vve),e(Vve,Jir),e(O8,Yir),e(Vo,Kir),e(Vo,Tt),M(V8,Tt,null),e(Tt,Zir),e(Tt,Xve),e(Xve,edr),e(Tt,odr),e(Tt,Ad),e(Ad,rdr),e(Ad,zve),e(zve,tdr),e(Ad,adr),e(Ad,QW),e(QW,ndr),e(Ad,sdr),e(Tt,ldr),M(IM,Tt,null),e(Vo,idr),e(Vo,co),M(X8,co,null),e(co,ddr),e(co,Qve),e(Qve,cdr),e(co,mdr),e(co,Ha),e(Ha,fdr),e(Ha,Wve),e(Wve,gdr),e(Ha,hdr),e(Ha,Hve),e(Hve,udr),e(Ha,pdr),e(Ha,Uve),e(Uve,_dr),e(Ha,bdr),e(co,vdr),e(co,Jve),e(Jve,qM),e(qM,Yve),e(Yve,Fdr),e(qM,Tdr),e(qM,WW),e(WW,Mdr),e(qM,Edr),e(co,Cdr),e(co,jM),e(jM,wdr),e(jM,Kve),e(Kve,Adr),e(jM,Ldr),e(jM,Zve),e(Zve,ydr),e(co,xdr),M(DM,co,null),b(m,ZXe,_),b(m,Ld,_),e(Ld,GM),e(GM,e1e),M(z8,e1e,null),e(Ld,$dr),e(Ld,o1e),e(o1e,kdr),b(m,eze,_),b(m,Xo,_),M(Q8,Xo,null),e(Xo,Sdr),e(Xo,yd),e(yd,Rdr),e(yd,HW),e(HW,Pdr),e(yd,Bdr),e(yd,UW),e(UW,Ndr),e(yd,Idr),e(Xo,qdr),e(Xo,W8),e(W8,jdr),e(W8,r1e),e(r1e,Ddr),e(W8,Gdr),e(Xo,Odr),e(Xo,Mt),M(H8,Mt,null),e(Mt,Vdr),e(Mt,t1e),e(t1e,Xdr),e(Mt,zdr),e(Mt,xd),e(xd,Qdr),e(xd,a1e),e(a1e,Wdr),e(xd,Hdr),e(xd,JW),e(JW,Udr),e(xd,Jdr),e(Mt,Ydr),M(OM,Mt,null),e(Xo,Kdr),e(Xo,mo),M(U8,mo,null),e(mo,Zdr),e(mo,n1e),e(n1e,ecr),e(mo,ocr),e(mo,Ua),e(Ua,rcr),e(Ua,s1e),e(s1e,tcr),e(Ua,acr),e(Ua,l1e),e(l1e,ncr),e(Ua,scr),e(Ua,i1e),e(i1e,lcr),e(Ua,icr),e(mo,dcr),e(mo,d1e),e(d1e,VM),e(VM,c1e),e(c1e,ccr),e(VM,mcr),e(VM,YW),e(YW,fcr),e(VM,gcr),e(mo,hcr),e(mo,XM),e(XM,ucr),e(XM,m1e),e(m1e,pcr),e(XM,_cr),e(XM,f1e),e(f1e,bcr),e(mo,vcr),M(zM,mo,null),b(m,oze,_),b(m,$d,_),e($d,QM),e(QM,g1e),M(J8,g1e,null),e($d,Fcr),e($d,h1e),e(h1e,Tcr),b(m,rze,_),b(m,zo,_),M(Y8,zo,null),e(zo,Mcr),e(zo,kd),e(kd,Ecr),e(kd,KW),e(KW,Ccr),e(kd,wcr),e(kd,ZW),e(ZW,Acr),e(kd,Lcr),e(zo,ycr),e(zo,K8),e(K8,xcr),e(K8,u1e),e(u1e,$cr),e(K8,kcr),e(zo,Scr),e(zo,Et),M(Z8,Et,null),e(Et,Rcr),e(Et,p1e),e(p1e,Pcr),e(Et,Bcr),e(Et,Sd),e(Sd,Ncr),e(Sd,_1e),e(_1e,Icr),e(Sd,qcr),e(Sd,eH),e(eH,jcr),e(Sd,Dcr),e(Et,Gcr),M(WM,Et,null),e(zo,Ocr),e(zo,fo),M(e9,fo,null),e(fo,Vcr),e(fo,b1e),e(b1e,Xcr),e(fo,zcr),e(fo,Ja),e(Ja,Qcr),e(Ja,v1e),e(v1e,Wcr),e(Ja,Hcr),e(Ja,F1e),e(F1e,Ucr),e(Ja,Jcr),e(Ja,T1e),e(T1e,Ycr),e(Ja,Kcr),e(fo,Zcr),e(fo,Pe),e(Pe,HM),e(HM,M1e),e(M1e,emr),e(HM,omr),e(HM,oH),e(oH,rmr),e(HM,tmr),e(Pe,amr),e(Pe,UM),e(UM,E1e),e(E1e,nmr),e(UM,smr),e(UM,rH),e(rH,lmr),e(UM,imr),e(Pe,dmr),e(Pe,JM),e(JM,C1e),e(C1e,cmr),e(JM,mmr),e(JM,tH),e(tH,fmr),e(JM,gmr),e(Pe,hmr),e(Pe,YM),e(YM,w1e),e(w1e,umr),e(YM,pmr),e(YM,aH),e(aH,_mr),e(YM,bmr),e(Pe,vmr),e(Pe,KM),e(KM,A1e),e(A1e,Fmr),e(KM,Tmr),e(KM,nH),e(nH,Mmr),e(KM,Emr),e(Pe,Cmr),e(Pe,ZM),e(ZM,L1e),e(L1e,wmr),e(ZM,Amr),e(ZM,sH),e(sH,Lmr),e(ZM,ymr),e(Pe,xmr),e(Pe,e4),e(e4,y1e),e(y1e,$mr),e(e4,kmr),e(e4,lH),e(lH,Smr),e(e4,Rmr),e(Pe,Pmr),e(Pe,o4),e(o4,x1e),e(x1e,Bmr),e(o4,Nmr),e(o4,iH),e(iH,Imr),e(o4,qmr),e(Pe,jmr),e(Pe,r4),e(r4,$1e),e($1e,Dmr),e(r4,Gmr),e(r4,dH),e(dH,Omr),e(r4,Vmr),e(fo,Xmr),e(fo,t4),e(t4,zmr),e(t4,k1e),e(k1e,Qmr),e(t4,Wmr),e(t4,S1e),e(S1e,Hmr),e(fo,Umr),M(a4,fo,null),b(m,tze,_),b(m,Rd,_),e(Rd,n4),e(n4,R1e),M(o9,R1e,null),e(Rd,Jmr),e(Rd,P1e),e(P1e,Ymr),b(m,aze,_),b(m,Qo,_),M(r9,Qo,null),e(Qo,Kmr),e(Qo,Pd),e(Pd,Zmr),e(Pd,cH),e(cH,efr),e(Pd,ofr),e(Pd,mH),e(mH,rfr),e(Pd,tfr),e(Qo,afr),e(Qo,t9),e(t9,nfr),e(t9,B1e),e(B1e,sfr),e(t9,lfr),e(Qo,ifr),e(Qo,Ct),M(a9,Ct,null),e(Ct,dfr),e(Ct,N1e),e(N1e,cfr),e(Ct,mfr),e(Ct,Bd),e(Bd,ffr),e(Bd,I1e),e(I1e,gfr),e(Bd,hfr),e(Bd,fH),e(fH,ufr),e(Bd,pfr),e(Ct,_fr),M(s4,Ct,null),e(Qo,bfr),e(Qo,go),M(n9,go,null),e(go,vfr),e(go,q1e),e(q1e,Ffr),e(go,Tfr),e(go,Ya),e(Ya,Mfr),e(Ya,j1e),e(j1e,Efr),e(Ya,Cfr),e(Ya,D1e),e(D1e,wfr),e(Ya,Afr),e(Ya,G1e),e(G1e,Lfr),e(Ya,yfr),e(go,xfr),e(go,rt),e(rt,l4),e(l4,O1e),e(O1e,$fr),e(l4,kfr),e(l4,gH),e(gH,Sfr),e(l4,Rfr),e(rt,Pfr),e(rt,i4),e(i4,V1e),e(V1e,Bfr),e(i4,Nfr),e(i4,hH),e(hH,Ifr),e(i4,qfr),e(rt,jfr),e(rt,d4),e(d4,X1e),e(X1e,Dfr),e(d4,Gfr),e(d4,uH),e(uH,Ofr),e(d4,Vfr),e(rt,Xfr),e(rt,c4),e(c4,z1e),e(z1e,zfr),e(c4,Qfr),e(c4,pH),e(pH,Wfr),e(c4,Hfr),e(rt,Ufr),e(rt,m4),e(m4,Q1e),e(Q1e,Jfr),e(m4,Yfr),e(m4,_H),e(_H,Kfr),e(m4,Zfr),e(go,egr),e(go,f4),e(f4,ogr),e(f4,W1e),e(W1e,rgr),e(f4,tgr),e(f4,H1e),e(H1e,agr),e(go,ngr),M(g4,go,null),b(m,nze,_),b(m,Nd,_),e(Nd,h4),e(h4,U1e),M(s9,U1e,null),e(Nd,sgr),e(Nd,J1e),e(J1e,lgr),b(m,sze,_),b(m,Wo,_),M(l9,Wo,null),e(Wo,igr),e(Wo,Id),e(Id,dgr),e(Id,bH),e(bH,cgr),e(Id,mgr),e(Id,vH),e(vH,fgr),e(Id,ggr),e(Wo,hgr),e(Wo,i9),e(i9,ugr),e(i9,Y1e),e(Y1e,pgr),e(i9,_gr),e(Wo,bgr),e(Wo,wt),M(d9,wt,null),e(wt,vgr),e(wt,K1e),e(K1e,Fgr),e(wt,Tgr),e(wt,qd),e(qd,Mgr),e(qd,Z1e),e(Z1e,Egr),e(qd,Cgr),e(qd,FH),e(FH,wgr),e(qd,Agr),e(wt,Lgr),M(u4,wt,null),e(Wo,ygr),e(Wo,ho),M(c9,ho,null),e(ho,xgr),e(ho,eFe),e(eFe,$gr),e(ho,kgr),e(ho,Ka),e(Ka,Sgr),e(Ka,oFe),e(oFe,Rgr),e(Ka,Pgr),e(Ka,rFe),e(rFe,Bgr),e(Ka,Ngr),e(Ka,tFe),e(tFe,Igr),e(Ka,qgr),e(ho,jgr),e(ho,Le),e(Le,p4),e(p4,aFe),e(aFe,Dgr),e(p4,Ggr),e(p4,TH),e(TH,Ogr),e(p4,Vgr),e(Le,Xgr),e(Le,_4),e(_4,nFe),e(nFe,zgr),e(_4,Qgr),e(_4,MH),e(MH,Wgr),e(_4,Hgr),e(Le,Ugr),e(Le,b4),e(b4,sFe),e(sFe,Jgr),e(b4,Ygr),e(b4,EH),e(EH,Kgr),e(b4,Zgr),e(Le,ehr),e(Le,v4),e(v4,lFe),e(lFe,ohr),e(v4,rhr),e(v4,CH),e(CH,thr),e(v4,ahr),e(Le,nhr),e(Le,F4),e(F4,iFe),e(iFe,shr),e(F4,lhr),e(F4,wH),e(wH,ihr),e(F4,dhr),e(Le,chr),e(Le,T4),e(T4,dFe),e(dFe,mhr),e(T4,fhr),e(T4,AH),e(AH,ghr),e(T4,hhr),e(Le,uhr),e(Le,M4),e(M4,cFe),e(cFe,phr),e(M4,_hr),e(M4,LH),e(LH,bhr),e(M4,vhr),e(Le,Fhr),e(Le,E4),e(E4,mFe),e(mFe,Thr),e(E4,Mhr),e(E4,yH),e(yH,Ehr),e(E4,Chr),e(Le,whr),e(Le,C4),e(C4,fFe),e(fFe,Ahr),e(C4,Lhr),e(C4,xH),e(xH,yhr),e(C4,xhr),e(Le,$hr),e(Le,w4),e(w4,gFe),e(gFe,khr),e(w4,Shr),e(w4,$H),e($H,Rhr),e(w4,Phr),e(ho,Bhr),e(ho,A4),e(A4,Nhr),e(A4,hFe),e(hFe,Ihr),e(A4,qhr),e(A4,uFe),e(uFe,jhr),e(ho,Dhr),M(L4,ho,null),b(m,lze,_),b(m,jd,_),e(jd,y4),e(y4,pFe),M(m9,pFe,null),e(jd,Ghr),e(jd,_Fe),e(_Fe,Ohr),b(m,ize,_),b(m,Ho,_),M(f9,Ho,null),e(Ho,Vhr),e(Ho,Dd),e(Dd,Xhr),e(Dd,kH),e(kH,zhr),e(Dd,Qhr),e(Dd,SH),e(SH,Whr),e(Dd,Hhr),e(Ho,Uhr),e(Ho,g9),e(g9,Jhr),e(g9,bFe),e(bFe,Yhr),e(g9,Khr),e(Ho,Zhr),e(Ho,At),M(h9,At,null),e(At,eur),e(At,vFe),e(vFe,our),e(At,rur),e(At,Gd),e(Gd,tur),e(Gd,FFe),e(FFe,aur),e(Gd,nur),e(Gd,RH),e(RH,sur),e(Gd,lur),e(At,iur),M(x4,At,null),e(Ho,dur),e(Ho,uo),M(u9,uo,null),e(uo,cur),e(uo,TFe),e(TFe,mur),e(uo,fur),e(uo,Za),e(Za,gur),e(Za,MFe),e(MFe,hur),e(Za,uur),e(Za,EFe),e(EFe,pur),e(Za,_ur),e(Za,CFe),e(CFe,bur),e(Za,vur),e(uo,Fur),e(uo,p9),e(p9,$4),e($4,wFe),e(wFe,Tur),e($4,Mur),e($4,PH),e(PH,Eur),e($4,Cur),e(p9,wur),e(p9,k4),e(k4,AFe),e(AFe,Aur),e(k4,Lur),e(k4,BH),e(BH,yur),e(k4,xur),e(uo,$ur),e(uo,S4),e(S4,kur),e(S4,LFe),e(LFe,Sur),e(S4,Rur),e(S4,yFe),e(yFe,Pur),e(uo,Bur),M(R4,uo,null),b(m,dze,_),b(m,Od,_),e(Od,P4),e(P4,xFe),M(_9,xFe,null),e(Od,Nur),e(Od,$Fe),e($Fe,Iur),b(m,cze,_),b(m,Uo,_),M(b9,Uo,null),e(Uo,qur),e(Uo,Vd),e(Vd,jur),e(Vd,NH),e(NH,Dur),e(Vd,Gur),e(Vd,IH),e(IH,Our),e(Vd,Vur),e(Uo,Xur),e(Uo,v9),e(v9,zur),e(v9,kFe),e(kFe,Qur),e(v9,Wur),e(Uo,Hur),e(Uo,Lt),M(F9,Lt,null),e(Lt,Uur),e(Lt,SFe),e(SFe,Jur),e(Lt,Yur),e(Lt,Xd),e(Xd,Kur),e(Xd,RFe),e(RFe,Zur),e(Xd,epr),e(Xd,qH),e(qH,opr),e(Xd,rpr),e(Lt,tpr),M(B4,Lt,null),e(Uo,apr),e(Uo,po),M(T9,po,null),e(po,npr),e(po,PFe),e(PFe,spr),e(po,lpr),e(po,en),e(en,ipr),e(en,BFe),e(BFe,dpr),e(en,cpr),e(en,NFe),e(NFe,mpr),e(en,fpr),e(en,IFe),e(IFe,gpr),e(en,hpr),e(po,upr),e(po,tt),e(tt,N4),e(N4,qFe),e(qFe,ppr),e(N4,_pr),e(N4,jH),e(jH,bpr),e(N4,vpr),e(tt,Fpr),e(tt,I4),e(I4,jFe),e(jFe,Tpr),e(I4,Mpr),e(I4,DH),e(DH,Epr),e(I4,Cpr),e(tt,wpr),e(tt,q4),e(q4,DFe),e(DFe,Apr),e(q4,Lpr),e(q4,GH),e(GH,ypr),e(q4,xpr),e(tt,$pr),e(tt,j4),e(j4,GFe),e(GFe,kpr),e(j4,Spr),e(j4,OH),e(OH,Rpr),e(j4,Ppr),e(tt,Bpr),e(tt,D4),e(D4,OFe),e(OFe,Npr),e(D4,Ipr),e(D4,VH),e(VH,qpr),e(D4,jpr),e(po,Dpr),e(po,G4),e(G4,Gpr),e(G4,VFe),e(VFe,Opr),e(G4,Vpr),e(G4,XFe),e(XFe,Xpr),e(po,zpr),M(O4,po,null),b(m,mze,_),b(m,zd,_),e(zd,V4),e(V4,zFe),M(M9,zFe,null),e(zd,Qpr),e(zd,QFe),e(QFe,Wpr),b(m,fze,_),b(m,Jo,_),M(E9,Jo,null),e(Jo,Hpr),e(Jo,Qd),e(Qd,Upr),e(Qd,XH),e(XH,Jpr),e(Qd,Ypr),e(Qd,zH),e(zH,Kpr),e(Qd,Zpr),e(Jo,e_r),e(Jo,C9),e(C9,o_r),e(C9,WFe),e(WFe,r_r),e(C9,t_r),e(Jo,a_r),e(Jo,yt),M(w9,yt,null),e(yt,n_r),e(yt,HFe),e(HFe,s_r),e(yt,l_r),e(yt,Wd),e(Wd,i_r),e(Wd,UFe),e(UFe,d_r),e(Wd,c_r),e(Wd,QH),e(QH,m_r),e(Wd,f_r),e(yt,g_r),M(X4,yt,null),e(Jo,h_r),e(Jo,_o),M(A9,_o,null),e(_o,u_r),e(_o,JFe),e(JFe,p_r),e(_o,__r),e(_o,on),e(on,b_r),e(on,YFe),e(YFe,v_r),e(on,F_r),e(on,KFe),e(KFe,T_r),e(on,M_r),e(on,ZFe),e(ZFe,E_r),e(on,C_r),e(_o,w_r),e(_o,Hd),e(Hd,z4),e(z4,eTe),e(eTe,A_r),e(z4,L_r),e(z4,WH),e(WH,y_r),e(z4,x_r),e(Hd,$_r),e(Hd,Q4),e(Q4,oTe),e(oTe,k_r),e(Q4,S_r),e(Q4,HH),e(HH,R_r),e(Q4,P_r),e(Hd,B_r),e(Hd,W4),e(W4,rTe),e(rTe,N_r),e(W4,I_r),e(W4,UH),e(UH,q_r),e(W4,j_r),e(_o,D_r),e(_o,H4),e(H4,G_r),e(H4,tTe),e(tTe,O_r),e(H4,V_r),e(H4,aTe),e(aTe,X_r),e(_o,z_r),M(U4,_o,null),b(m,gze,_),b(m,Ud,_),e(Ud,J4),e(J4,nTe),M(L9,nTe,null),e(Ud,Q_r),e(Ud,sTe),e(sTe,W_r),b(m,hze,_),b(m,Yo,_),M(y9,Yo,null),e(Yo,H_r),e(Yo,Jd),e(Jd,U_r),e(Jd,JH),e(JH,J_r),e(Jd,Y_r),e(Jd,YH),e(YH,K_r),e(Jd,Z_r),e(Yo,e2r),e(Yo,x9),e(x9,o2r),e(x9,lTe),e(lTe,r2r),e(x9,t2r),e(Yo,a2r),e(Yo,xt),M($9,xt,null),e(xt,n2r),e(xt,iTe),e(iTe,s2r),e(xt,l2r),e(xt,Yd),e(Yd,i2r),e(Yd,dTe),e(dTe,d2r),e(Yd,c2r),e(Yd,KH),e(KH,m2r),e(Yd,f2r),e(xt,g2r),M(Y4,xt,null),e(Yo,h2r),e(Yo,bo),M(k9,bo,null),e(bo,u2r),e(bo,cTe),e(cTe,p2r),e(bo,_2r),e(bo,rn),e(rn,b2r),e(rn,mTe),e(mTe,v2r),e(rn,F2r),e(rn,fTe),e(fTe,T2r),e(rn,M2r),e(rn,gTe),e(gTe,E2r),e(rn,C2r),e(bo,w2r),e(bo,S9),e(S9,K4),e(K4,hTe),e(hTe,A2r),e(K4,L2r),e(K4,ZH),e(ZH,y2r),e(K4,x2r),e(S9,$2r),e(S9,Z4),e(Z4,uTe),e(uTe,k2r),e(Z4,S2r),e(Z4,eU),e(eU,R2r),e(Z4,P2r),e(bo,B2r),e(bo,eE),e(eE,N2r),e(eE,pTe),e(pTe,I2r),e(eE,q2r),e(eE,_Te),e(_Te,j2r),e(bo,D2r),M(oE,bo,null),b(m,uze,_),b(m,Kd,_),e(Kd,rE),e(rE,bTe),M(R9,bTe,null),e(Kd,G2r),e(Kd,vTe),e(vTe,O2r),b(m,pze,_),b(m,Ko,_),M(P9,Ko,null),e(Ko,V2r),e(Ko,Zd),e(Zd,X2r),e(Zd,oU),e(oU,z2r),e(Zd,Q2r),e(Zd,rU),e(rU,W2r),e(Zd,H2r),e(Ko,U2r),e(Ko,B9),e(B9,J2r),e(B9,FTe),e(FTe,Y2r),e(B9,K2r),e(Ko,Z2r),e(Ko,$t),M(N9,$t,null),e($t,ebr),e($t,TTe),e(TTe,obr),e($t,rbr),e($t,ec),e(ec,tbr),e(ec,MTe),e(MTe,abr),e(ec,nbr),e(ec,tU),e(tU,sbr),e(ec,lbr),e($t,ibr),M(tE,$t,null),e(Ko,dbr),e(Ko,vo),M(I9,vo,null),e(vo,cbr),e(vo,ETe),e(ETe,mbr),e(vo,fbr),e(vo,tn),e(tn,gbr),e(tn,CTe),e(CTe,hbr),e(tn,ubr),e(tn,wTe),e(wTe,pbr),e(tn,_br),e(tn,ATe),e(ATe,bbr),e(tn,vbr),e(vo,Fbr),e(vo,LTe),e(LTe,aE),e(aE,yTe),e(yTe,Tbr),e(aE,Mbr),e(aE,aU),e(aU,Ebr),e(aE,Cbr),e(vo,wbr),e(vo,nE),e(nE,Abr),e(nE,xTe),e(xTe,Lbr),e(nE,ybr),e(nE,$Te),e($Te,xbr),e(vo,$br),M(sE,vo,null),b(m,_ze,_),b(m,oc,_),e(oc,lE),e(lE,kTe),M(q9,kTe,null),e(oc,kbr),e(oc,STe),e(STe,Sbr),b(m,bze,_),b(m,Zo,_),M(j9,Zo,null),e(Zo,Rbr),e(Zo,rc),e(rc,Pbr),e(rc,nU),e(nU,Bbr),e(rc,Nbr),e(rc,sU),e(sU,Ibr),e(rc,qbr),e(Zo,jbr),e(Zo,D9),e(D9,Dbr),e(D9,RTe),e(RTe,Gbr),e(D9,Obr),e(Zo,Vbr),e(Zo,kt),M(G9,kt,null),e(kt,Xbr),e(kt,PTe),e(PTe,zbr),e(kt,Qbr),e(kt,tc),e(tc,Wbr),e(tc,BTe),e(BTe,Hbr),e(tc,Ubr),e(tc,lU),e(lU,Jbr),e(tc,Ybr),e(kt,Kbr),M(iE,kt,null),e(Zo,Zbr),e(Zo,Fo),M(O9,Fo,null),e(Fo,evr),e(Fo,NTe),e(NTe,ovr),e(Fo,rvr),e(Fo,an),e(an,tvr),e(an,ITe),e(ITe,avr),e(an,nvr),e(an,qTe),e(qTe,svr),e(an,lvr),e(an,jTe),e(jTe,ivr),e(an,dvr),e(Fo,cvr),e(Fo,at),e(at,dE),e(dE,DTe),e(DTe,mvr),e(dE,fvr),e(dE,iU),e(iU,gvr),e(dE,hvr),e(at,uvr),e(at,cE),e(cE,GTe),e(GTe,pvr),e(cE,_vr),e(cE,dU),e(dU,bvr),e(cE,vvr),e(at,Fvr),e(at,mE),e(mE,OTe),e(OTe,Tvr),e(mE,Mvr),e(mE,cU),e(cU,Evr),e(mE,Cvr),e(at,wvr),e(at,fE),e(fE,VTe),e(VTe,Avr),e(fE,Lvr),e(fE,mU),e(mU,yvr),e(fE,xvr),e(at,$vr),e(at,gE),e(gE,XTe),e(XTe,kvr),e(gE,Svr),e(gE,fU),e(fU,Rvr),e(gE,Pvr),e(Fo,Bvr),e(Fo,hE),e(hE,Nvr),e(hE,zTe),e(zTe,Ivr),e(hE,qvr),e(hE,QTe),e(QTe,jvr),e(Fo,Dvr),M(uE,Fo,null),b(m,vze,_),b(m,ac,_),e(ac,pE),e(pE,WTe),M(V9,WTe,null),e(ac,Gvr),e(ac,HTe),e(HTe,Ovr),b(m,Fze,_),b(m,er,_),M(X9,er,null),e(er,Vvr),e(er,nc),e(nc,Xvr),e(nc,gU),e(gU,zvr),e(nc,Qvr),e(nc,hU),e(hU,Wvr),e(nc,Hvr),e(er,Uvr),e(er,z9),e(z9,Jvr),e(z9,UTe),e(UTe,Yvr),e(z9,Kvr),e(er,Zvr),e(er,St),M(Q9,St,null),e(St,e1r),e(St,JTe),e(JTe,o1r),e(St,r1r),e(St,sc),e(sc,t1r),e(sc,YTe),e(YTe,a1r),e(sc,n1r),e(sc,uU),e(uU,s1r),e(sc,l1r),e(St,i1r),M(_E,St,null),e(er,d1r),e(er,To),M(W9,To,null),e(To,c1r),e(To,KTe),e(KTe,m1r),e(To,f1r),e(To,nn),e(nn,g1r),e(nn,ZTe),e(ZTe,h1r),e(nn,u1r),e(nn,eMe),e(eMe,p1r),e(nn,_1r),e(nn,oMe),e(oMe,b1r),e(nn,v1r),e(To,F1r),e(To,rMe),e(rMe,bE),e(bE,tMe),e(tMe,T1r),e(bE,M1r),e(bE,pU),e(pU,E1r),e(bE,C1r),e(To,w1r),e(To,vE),e(vE,A1r),e(vE,aMe),e(aMe,L1r),e(vE,y1r),e(vE,nMe),e(nMe,x1r),e(To,$1r),M(FE,To,null),b(m,Tze,_),b(m,lc,_),e(lc,TE),e(TE,sMe),M(H9,sMe,null),e(lc,k1r),e(lc,lMe),e(lMe,S1r),b(m,Mze,_),b(m,or,_),M(U9,or,null),e(or,R1r),e(or,ic),e(ic,P1r),e(ic,_U),e(_U,B1r),e(ic,N1r),e(ic,bU),e(bU,I1r),e(ic,q1r),e(or,j1r),e(or,J9),e(J9,D1r),e(J9,iMe),e(iMe,G1r),e(J9,O1r),e(or,V1r),e(or,Rt),M(Y9,Rt,null),e(Rt,X1r),e(Rt,dMe),e(dMe,z1r),e(Rt,Q1r),e(Rt,dc),e(dc,W1r),e(dc,cMe),e(cMe,H1r),e(dc,U1r),e(dc,vU),e(vU,J1r),e(dc,Y1r),e(Rt,K1r),M(ME,Rt,null),e(or,Z1r),e(or,xr),M(K9,xr,null),e(xr,eFr),e(xr,mMe),e(mMe,oFr),e(xr,rFr),e(xr,sn),e(sn,tFr),e(sn,fMe),e(fMe,aFr),e(sn,nFr),e(sn,gMe),e(gMe,sFr),e(sn,lFr),e(sn,hMe),e(hMe,iFr),e(sn,dFr),e(xr,cFr),e(xr,q),e(q,EE),e(EE,uMe),e(uMe,mFr),e(EE,fFr),e(EE,FU),e(FU,gFr),e(EE,hFr),e(q,uFr),e(q,CE),e(CE,pMe),e(pMe,pFr),e(CE,_Fr),e(CE,TU),e(TU,bFr),e(CE,vFr),e(q,FFr),e(q,wE),e(wE,_Me),e(_Me,TFr),e(wE,MFr),e(wE,MU),e(MU,EFr),e(wE,CFr),e(q,wFr),e(q,AE),e(AE,bMe),e(bMe,AFr),e(AE,LFr),e(AE,EU),e(EU,yFr),e(AE,xFr),e(q,$Fr),e(q,LE),e(LE,vMe),e(vMe,kFr),e(LE,SFr),e(LE,CU),e(CU,RFr),e(LE,PFr),e(q,BFr),e(q,yE),e(yE,FMe),e(FMe,NFr),e(yE,IFr),e(yE,wU),e(wU,qFr),e(yE,jFr),e(q,DFr),e(q,xE),e(xE,TMe),e(TMe,GFr),e(xE,OFr),e(xE,AU),e(AU,VFr),e(xE,XFr),e(q,zFr),e(q,$E),e($E,MMe),e(MMe,QFr),e($E,WFr),e($E,LU),e(LU,HFr),e($E,UFr),e(q,JFr),e(q,kE),e(kE,EMe),e(EMe,YFr),e(kE,KFr),e(kE,yU),e(yU,ZFr),e(kE,eTr),e(q,oTr),e(q,SE),e(SE,CMe),e(CMe,rTr),e(SE,tTr),e(SE,xU),e(xU,aTr),e(SE,nTr),e(q,sTr),e(q,RE),e(RE,wMe),e(wMe,lTr),e(RE,iTr),e(RE,$U),e($U,dTr),e(RE,cTr),e(q,mTr),e(q,PE),e(PE,AMe),e(AMe,fTr),e(PE,gTr),e(PE,kU),e(kU,hTr),e(PE,uTr),e(q,pTr),e(q,BE),e(BE,LMe),e(LMe,_Tr),e(BE,bTr),e(BE,SU),e(SU,vTr),e(BE,FTr),e(q,TTr),e(q,NE),e(NE,yMe),e(yMe,MTr),e(NE,ETr),e(NE,RU),e(RU,CTr),e(NE,wTr),e(q,ATr),e(q,IE),e(IE,xMe),e(xMe,LTr),e(IE,yTr),e(IE,PU),e(PU,xTr),e(IE,$Tr),e(q,kTr),e(q,qE),e(qE,$Me),e($Me,STr),e(qE,RTr),e(qE,BU),e(BU,PTr),e(qE,BTr),e(q,NTr),e(q,jE),e(jE,kMe),e(kMe,ITr),e(jE,qTr),e(jE,NU),e(NU,jTr),e(jE,DTr),e(q,GTr),e(q,DE),e(DE,SMe),e(SMe,OTr),e(DE,VTr),e(DE,IU),e(IU,XTr),e(DE,zTr),e(q,QTr),e(q,Ys),e(Ys,RMe),e(RMe,WTr),e(Ys,HTr),e(Ys,qU),e(qU,UTr),e(Ys,JTr),e(Ys,jU),e(jU,YTr),e(Ys,KTr),e(q,ZTr),e(q,GE),e(GE,PMe),e(PMe,eMr),e(GE,oMr),e(GE,DU),e(DU,rMr),e(GE,tMr),e(q,aMr),e(q,OE),e(OE,BMe),e(BMe,nMr),e(OE,sMr),e(OE,GU),e(GU,lMr),e(OE,iMr),e(q,dMr),e(q,VE),e(VE,NMe),e(NMe,cMr),e(VE,mMr),e(VE,OU),e(OU,fMr),e(VE,gMr),e(q,hMr),e(q,XE),e(XE,IMe),e(IMe,uMr),e(XE,pMr),e(XE,VU),e(VU,_Mr),e(XE,bMr),e(q,vMr),e(q,zE),e(zE,qMe),e(qMe,FMr),e(zE,TMr),e(zE,XU),e(XU,MMr),e(zE,EMr),e(q,CMr),e(q,QE),e(QE,jMe),e(jMe,wMr),e(QE,AMr),e(QE,zU),e(zU,LMr),e(QE,yMr),e(q,xMr),e(q,WE),e(WE,DMe),e(DMe,$Mr),e(WE,kMr),e(WE,QU),e(QU,SMr),e(WE,RMr),e(q,PMr),e(q,HE),e(HE,GMe),e(GMe,BMr),e(HE,NMr),e(HE,WU),e(WU,IMr),e(HE,qMr),e(q,jMr),e(q,UE),e(UE,OMe),e(OMe,DMr),e(UE,GMr),e(UE,HU),e(HU,OMr),e(UE,VMr),e(q,XMr),e(q,JE),e(JE,VMe),e(VMe,zMr),e(JE,QMr),e(JE,UU),e(UU,WMr),e(JE,HMr),e(q,UMr),e(q,YE),e(YE,XMe),e(XMe,JMr),e(YE,YMr),e(YE,JU),e(JU,KMr),e(YE,ZMr),e(q,e4r),e(q,KE),e(KE,zMe),e(zMe,o4r),e(KE,r4r),e(KE,YU),e(YU,t4r),e(KE,a4r),e(q,n4r),e(q,ZE),e(ZE,QMe),e(QMe,s4r),e(ZE,l4r),e(ZE,KU),e(KU,i4r),e(ZE,d4r),e(q,c4r),e(q,eC),e(eC,WMe),e(WMe,m4r),e(eC,f4r),e(eC,ZU),e(ZU,g4r),e(eC,h4r),e(q,u4r),e(q,oC),e(oC,HMe),e(HMe,p4r),e(oC,_4r),e(oC,eJ),e(eJ,b4r),e(oC,v4r),e(q,F4r),e(q,rC),e(rC,UMe),e(UMe,T4r),e(rC,M4r),e(rC,oJ),e(oJ,E4r),e(rC,C4r),e(q,w4r),e(q,tC),e(tC,JMe),e(JMe,A4r),e(tC,L4r),e(tC,rJ),e(rJ,y4r),e(tC,x4r),e(q,$4r),e(q,aC),e(aC,YMe),e(YMe,k4r),e(aC,S4r),e(aC,tJ),e(tJ,R4r),e(aC,P4r),e(q,B4r),e(q,nC),e(nC,KMe),e(KMe,N4r),e(nC,I4r),e(nC,aJ),e(aJ,q4r),e(nC,j4r),e(q,D4r),e(q,sC),e(sC,ZMe),e(ZMe,G4r),e(sC,O4r),e(sC,nJ),e(nJ,V4r),e(sC,X4r),e(q,z4r),e(q,lC),e(lC,e4e),e(e4e,Q4r),e(lC,W4r),e(lC,sJ),e(sJ,H4r),e(lC,U4r),e(q,J4r),e(q,iC),e(iC,o4e),e(o4e,Y4r),e(iC,K4r),e(iC,lJ),e(lJ,Z4r),e(iC,eEr),e(q,oEr),e(q,dC),e(dC,r4e),e(r4e,rEr),e(dC,tEr),e(dC,iJ),e(iJ,aEr),e(dC,nEr),e(q,sEr),e(q,cC),e(cC,t4e),e(t4e,lEr),e(cC,iEr),e(cC,dJ),e(dJ,dEr),e(cC,cEr),e(q,mEr),e(q,mC),e(mC,a4e),e(a4e,fEr),e(mC,gEr),e(mC,cJ),e(cJ,hEr),e(mC,uEr),e(q,pEr),e(q,fC),e(fC,n4e),e(n4e,_Er),e(fC,bEr),e(fC,mJ),e(mJ,vEr),e(fC,FEr),e(q,TEr),e(q,gC),e(gC,s4e),e(s4e,MEr),e(gC,EEr),e(gC,fJ),e(fJ,CEr),e(gC,wEr),e(q,AEr),e(q,hC),e(hC,l4e),e(l4e,LEr),e(hC,yEr),e(hC,gJ),e(gJ,xEr),e(hC,$Er),e(q,kEr),e(q,uC),e(uC,i4e),e(i4e,SEr),e(uC,REr),e(uC,hJ),e(hJ,PEr),e(uC,BEr),e(q,NEr),e(q,pC),e(pC,d4e),e(d4e,IEr),e(pC,qEr),e(pC,uJ),e(uJ,jEr),e(pC,DEr),e(q,GEr),e(q,_C),e(_C,c4e),e(c4e,OEr),e(_C,VEr),e(_C,pJ),e(pJ,XEr),e(_C,zEr),e(xr,QEr),M(bC,xr,null),b(m,Eze,_),b(m,cc,_),e(cc,vC),e(vC,m4e),M(Z9,m4e,null),e(cc,WEr),e(cc,f4e),e(f4e,HEr),b(m,Cze,_),b(m,rr,_),M(ex,rr,null),e(rr,UEr),e(rr,mc),e(mc,JEr),e(mc,_J),e(_J,YEr),e(mc,KEr),e(mc,bJ),e(bJ,ZEr),e(mc,eCr),e(rr,oCr),e(rr,ox),e(ox,rCr),e(ox,g4e),e(g4e,tCr),e(ox,aCr),e(rr,nCr),e(rr,Pt),M(rx,Pt,null),e(Pt,sCr),e(Pt,h4e),e(h4e,lCr),e(Pt,iCr),e(Pt,fc),e(fc,dCr),e(fc,u4e),e(u4e,cCr),e(fc,mCr),e(fc,vJ),e(vJ,fCr),e(fc,gCr),e(Pt,hCr),M(FC,Pt,null),e(rr,uCr),e(rr,$r),M(tx,$r,null),e($r,pCr),e($r,p4e),e(p4e,_Cr),e($r,bCr),e($r,ln),e(ln,vCr),e(ln,_4e),e(_4e,FCr),e(ln,TCr),e(ln,b4e),e(b4e,MCr),e(ln,ECr),e(ln,v4e),e(v4e,CCr),e(ln,wCr),e($r,ACr),e($r,se),e(se,TC),e(TC,F4e),e(F4e,LCr),e(TC,yCr),e(TC,FJ),e(FJ,xCr),e(TC,$Cr),e(se,kCr),e(se,MC),e(MC,T4e),e(T4e,SCr),e(MC,RCr),e(MC,TJ),e(TJ,PCr),e(MC,BCr),e(se,NCr),e(se,EC),e(EC,M4e),e(M4e,ICr),e(EC,qCr),e(EC,MJ),e(MJ,jCr),e(EC,DCr),e(se,GCr),e(se,CC),e(CC,E4e),e(E4e,OCr),e(CC,VCr),e(CC,EJ),e(EJ,XCr),e(CC,zCr),e(se,QCr),e(se,wC),e(wC,C4e),e(C4e,WCr),e(wC,HCr),e(wC,CJ),e(CJ,UCr),e(wC,JCr),e(se,YCr),e(se,AC),e(AC,w4e),e(w4e,KCr),e(AC,ZCr),e(AC,wJ),e(wJ,e3r),e(AC,o3r),e(se,r3r),e(se,LC),e(LC,A4e),e(A4e,t3r),e(LC,a3r),e(LC,AJ),e(AJ,n3r),e(LC,s3r),e(se,l3r),e(se,yC),e(yC,L4e),e(L4e,i3r),e(yC,d3r),e(yC,LJ),e(LJ,c3r),e(yC,m3r),e(se,f3r),e(se,xC),e(xC,y4e),e(y4e,g3r),e(xC,h3r),e(xC,yJ),e(yJ,u3r),e(xC,p3r),e(se,_3r),e(se,$C),e($C,x4e),e(x4e,b3r),e($C,v3r),e($C,xJ),e(xJ,F3r),e($C,T3r),e(se,M3r),e(se,kC),e(kC,$4e),e($4e,E3r),e(kC,C3r),e(kC,$J),e($J,w3r),e(kC,A3r),e(se,L3r),e(se,SC),e(SC,k4e),e(k4e,y3r),e(SC,x3r),e(SC,kJ),e(kJ,$3r),e(SC,k3r),e(se,S3r),e(se,RC),e(RC,S4e),e(S4e,R3r),e(RC,P3r),e(RC,SJ),e(SJ,B3r),e(RC,N3r),e(se,I3r),e(se,PC),e(PC,R4e),e(R4e,q3r),e(PC,j3r),e(PC,RJ),e(RJ,D3r),e(PC,G3r),e(se,O3r),e(se,BC),e(BC,P4e),e(P4e,V3r),e(BC,X3r),e(BC,PJ),e(PJ,z3r),e(BC,Q3r),e(se,W3r),e(se,NC),e(NC,B4e),e(B4e,H3r),e(NC,U3r),e(NC,BJ),e(BJ,J3r),e(NC,Y3r),e(se,K3r),e(se,IC),e(IC,N4e),e(N4e,Z3r),e(IC,e5r),e(IC,NJ),e(NJ,o5r),e(IC,r5r),e(se,t5r),e(se,qC),e(qC,I4e),e(I4e,a5r),e(qC,n5r),e(qC,IJ),e(IJ,s5r),e(qC,l5r),e(se,i5r),e(se,jC),e(jC,q4e),e(q4e,d5r),e(jC,c5r),e(jC,qJ),e(qJ,m5r),e(jC,f5r),e(se,g5r),e(se,DC),e(DC,j4e),e(j4e,h5r),e(DC,u5r),e(DC,jJ),e(jJ,p5r),e(DC,_5r),e(se,b5r),e(se,GC),e(GC,D4e),e(D4e,v5r),e(GC,F5r),e(GC,DJ),e(DJ,T5r),e(GC,M5r),e(se,E5r),e(se,OC),e(OC,G4e),e(G4e,C5r),e(OC,w5r),e(OC,GJ),e(GJ,A5r),e(OC,L5r),e(se,y5r),e(se,VC),e(VC,O4e),e(O4e,x5r),e(VC,$5r),e(VC,OJ),e(OJ,k5r),e(VC,S5r),e($r,R5r),M(XC,$r,null),b(m,wze,_),b(m,gc,_),e(gc,zC),e(zC,V4e),M(ax,V4e,null),e(gc,P5r),e(gc,X4e),e(X4e,B5r),b(m,Aze,_),b(m,tr,_),M(nx,tr,null),e(tr,N5r),e(tr,hc),e(hc,I5r),e(hc,VJ),e(VJ,q5r),e(hc,j5r),e(hc,XJ),e(XJ,D5r),e(hc,G5r),e(tr,O5r),e(tr,sx),e(sx,V5r),e(sx,z4e),e(z4e,X5r),e(sx,z5r),e(tr,Q5r),e(tr,Bt),M(lx,Bt,null),e(Bt,W5r),e(Bt,Q4e),e(Q4e,H5r),e(Bt,U5r),e(Bt,uc),e(uc,J5r),e(uc,W4e),e(W4e,Y5r),e(uc,K5r),e(uc,zJ),e(zJ,Z5r),e(uc,e0r),e(Bt,o0r),M(QC,Bt,null),e(tr,r0r),e(tr,kr),M(ix,kr,null),e(kr,t0r),e(kr,H4e),e(H4e,a0r),e(kr,n0r),e(kr,dn),e(dn,s0r),e(dn,U4e),e(U4e,l0r),e(dn,i0r),e(dn,J4e),e(J4e,d0r),e(dn,c0r),e(dn,Y4e),e(Y4e,m0r),e(dn,f0r),e(kr,g0r),e(kr,Me),e(Me,WC),e(WC,K4e),e(K4e,h0r),e(WC,u0r),e(WC,QJ),e(QJ,p0r),e(WC,_0r),e(Me,b0r),e(Me,HC),e(HC,Z4e),e(Z4e,v0r),e(HC,F0r),e(HC,WJ),e(WJ,T0r),e(HC,M0r),e(Me,E0r),e(Me,UC),e(UC,eEe),e(eEe,C0r),e(UC,w0r),e(UC,HJ),e(HJ,A0r),e(UC,L0r),e(Me,y0r),e(Me,JC),e(JC,oEe),e(oEe,x0r),e(JC,$0r),e(JC,UJ),e(UJ,k0r),e(JC,S0r),e(Me,R0r),e(Me,YC),e(YC,rEe),e(rEe,P0r),e(YC,B0r),e(YC,JJ),e(JJ,N0r),e(YC,I0r),e(Me,q0r),e(Me,KC),e(KC,tEe),e(tEe,j0r),e(KC,D0r),e(KC,YJ),e(YJ,G0r),e(KC,O0r),e(Me,V0r),e(Me,ZC),e(ZC,aEe),e(aEe,X0r),e(ZC,z0r),e(ZC,KJ),e(KJ,Q0r),e(ZC,W0r),e(Me,H0r),e(Me,e3),e(e3,nEe),e(nEe,U0r),e(e3,J0r),e(e3,ZJ),e(ZJ,Y0r),e(e3,K0r),e(Me,Z0r),e(Me,o3),e(o3,sEe),e(sEe,ewr),e(o3,owr),e(o3,eY),e(eY,rwr),e(o3,twr),e(Me,awr),e(Me,r3),e(r3,lEe),e(lEe,nwr),e(r3,swr),e(r3,oY),e(oY,lwr),e(r3,iwr),e(Me,dwr),e(Me,t3),e(t3,iEe),e(iEe,cwr),e(t3,mwr),e(t3,rY),e(rY,fwr),e(t3,gwr),e(Me,hwr),e(Me,a3),e(a3,dEe),e(dEe,uwr),e(a3,pwr),e(a3,tY),e(tY,_wr),e(a3,bwr),e(Me,vwr),e(Me,n3),e(n3,cEe),e(cEe,Fwr),e(n3,Twr),e(n3,aY),e(aY,Mwr),e(n3,Ewr),e(kr,Cwr),M(s3,kr,null),b(m,Lze,_),b(m,pc,_),e(pc,l3),e(l3,mEe),M(dx,mEe,null),e(pc,wwr),e(pc,fEe),e(fEe,Awr),b(m,yze,_),b(m,ar,_),M(cx,ar,null),e(ar,Lwr),e(ar,_c),e(_c,ywr),e(_c,nY),e(nY,xwr),e(_c,$wr),e(_c,sY),e(sY,kwr),e(_c,Swr),e(ar,Rwr),e(ar,mx),e(mx,Pwr),e(mx,gEe),e(gEe,Bwr),e(mx,Nwr),e(ar,Iwr),e(ar,Nt),M(fx,Nt,null),e(Nt,qwr),e(Nt,hEe),e(hEe,jwr),e(Nt,Dwr),e(Nt,bc),e(bc,Gwr),e(bc,uEe),e(uEe,Owr),e(bc,Vwr),e(bc,lY),e(lY,Xwr),e(bc,zwr),e(Nt,Qwr),M(i3,Nt,null),e(ar,Wwr),e(ar,Sr),M(gx,Sr,null),e(Sr,Hwr),e(Sr,pEe),e(pEe,Uwr),e(Sr,Jwr),e(Sr,cn),e(cn,Ywr),e(cn,_Ee),e(_Ee,Kwr),e(cn,Zwr),e(cn,bEe),e(bEe,eAr),e(cn,oAr),e(cn,vEe),e(vEe,rAr),e(cn,tAr),e(Sr,aAr),e(Sr,Qe),e(Qe,d3),e(d3,FEe),e(FEe,nAr),e(d3,sAr),e(d3,iY),e(iY,lAr),e(d3,iAr),e(Qe,dAr),e(Qe,c3),e(c3,TEe),e(TEe,cAr),e(c3,mAr),e(c3,dY),e(dY,fAr),e(c3,gAr),e(Qe,hAr),e(Qe,Ks),e(Ks,MEe),e(MEe,uAr),e(Ks,pAr),e(Ks,cY),e(cY,_Ar),e(Ks,bAr),e(Ks,mY),e(mY,vAr),e(Ks,FAr),e(Qe,TAr),e(Qe,m3),e(m3,EEe),e(EEe,MAr),e(m3,EAr),e(m3,fY),e(fY,CAr),e(m3,wAr),e(Qe,AAr),e(Qe,f3),e(f3,CEe),e(CEe,LAr),e(f3,yAr),e(f3,gY),e(gY,xAr),e(f3,$Ar),e(Qe,kAr),e(Qe,g3),e(g3,wEe),e(wEe,SAr),e(g3,RAr),e(g3,hY),e(hY,PAr),e(g3,BAr),e(Qe,NAr),e(Qe,h3),e(h3,AEe),e(AEe,IAr),e(h3,qAr),e(h3,uY),e(uY,jAr),e(h3,DAr),e(Sr,GAr),M(u3,Sr,null),b(m,xze,_),b(m,vc,_),e(vc,p3),e(p3,LEe),M(hx,LEe,null),e(vc,OAr),e(vc,yEe),e(yEe,VAr),b(m,$ze,_),b(m,nr,_),M(ux,nr,null),e(nr,XAr),e(nr,Fc),e(Fc,zAr),e(Fc,pY),e(pY,QAr),e(Fc,WAr),e(Fc,_Y),e(_Y,HAr),e(Fc,UAr),e(nr,JAr),e(nr,px),e(px,YAr),e(px,xEe),e(xEe,KAr),e(px,ZAr),e(nr,e6r),e(nr,It),M(_x,It,null),e(It,o6r),e(It,$Ee),e($Ee,r6r),e(It,t6r),e(It,Tc),e(Tc,a6r),e(Tc,kEe),e(kEe,n6r),e(Tc,s6r),e(Tc,bY),e(bY,l6r),e(Tc,i6r),e(It,d6r),M(_3,It,null),e(nr,c6r),e(nr,Rr),M(bx,Rr,null),e(Rr,m6r),e(Rr,SEe),e(SEe,f6r),e(Rr,g6r),e(Rr,mn),e(mn,h6r),e(mn,REe),e(REe,u6r),e(mn,p6r),e(mn,PEe),e(PEe,_6r),e(mn,b6r),e(mn,BEe),e(BEe,v6r),e(mn,F6r),e(Rr,T6r),e(Rr,ie),e(ie,b3),e(b3,NEe),e(NEe,M6r),e(b3,E6r),e(b3,vY),e(vY,C6r),e(b3,w6r),e(ie,A6r),e(ie,v3),e(v3,IEe),e(IEe,L6r),e(v3,y6r),e(v3,FY),e(FY,x6r),e(v3,$6r),e(ie,k6r),e(ie,F3),e(F3,qEe),e(qEe,S6r),e(F3,R6r),e(F3,TY),e(TY,P6r),e(F3,B6r),e(ie,N6r),e(ie,T3),e(T3,jEe),e(jEe,I6r),e(T3,q6r),e(T3,MY),e(MY,j6r),e(T3,D6r),e(ie,G6r),e(ie,M3),e(M3,DEe),e(DEe,O6r),e(M3,V6r),e(M3,EY),e(EY,X6r),e(M3,z6r),e(ie,Q6r),e(ie,E3),e(E3,GEe),e(GEe,W6r),e(E3,H6r),e(E3,CY),e(CY,U6r),e(E3,J6r),e(ie,Y6r),e(ie,C3),e(C3,OEe),e(OEe,K6r),e(C3,Z6r),e(C3,wY),e(wY,e7r),e(C3,o7r),e(ie,r7r),e(ie,w3),e(w3,VEe),e(VEe,t7r),e(w3,a7r),e(w3,AY),e(AY,n7r),e(w3,s7r),e(ie,l7r),e(ie,A3),e(A3,XEe),e(XEe,i7r),e(A3,d7r),e(A3,LY),e(LY,c7r),e(A3,m7r),e(ie,f7r),e(ie,L3),e(L3,zEe),e(zEe,g7r),e(L3,h7r),e(L3,yY),e(yY,u7r),e(L3,p7r),e(ie,_7r),e(ie,y3),e(y3,QEe),e(QEe,b7r),e(y3,v7r),e(y3,xY),e(xY,F7r),e(y3,T7r),e(ie,M7r),e(ie,x3),e(x3,WEe),e(WEe,E7r),e(x3,C7r),e(x3,$Y),e($Y,w7r),e(x3,A7r),e(ie,L7r),e(ie,$3),e($3,HEe),e(HEe,y7r),e($3,x7r),e($3,kY),e(kY,$7r),e($3,k7r),e(ie,S7r),e(ie,k3),e(k3,UEe),e(UEe,R7r),e(k3,P7r),e(k3,SY),e(SY,B7r),e(k3,N7r),e(ie,I7r),e(ie,S3),e(S3,JEe),e(JEe,q7r),e(S3,j7r),e(S3,RY),e(RY,D7r),e(S3,G7r),e(ie,O7r),e(ie,R3),e(R3,YEe),e(YEe,V7r),e(R3,X7r),e(R3,PY),e(PY,z7r),e(R3,Q7r),e(ie,W7r),e(ie,P3),e(P3,KEe),e(KEe,H7r),e(P3,U7r),e(P3,BY),e(BY,J7r),e(P3,Y7r),e(ie,K7r),e(ie,B3),e(B3,ZEe),e(ZEe,Z7r),e(B3,eLr),e(B3,NY),e(NY,oLr),e(B3,rLr),e(ie,tLr),e(ie,N3),e(N3,eCe),e(eCe,aLr),e(N3,nLr),e(N3,IY),e(IY,sLr),e(N3,lLr),e(ie,iLr),e(ie,I3),e(I3,oCe),e(oCe,dLr),e(I3,cLr),e(I3,qY),e(qY,mLr),e(I3,fLr),e(Rr,gLr),M(q3,Rr,null),b(m,kze,_),b(m,Mc,_),e(Mc,j3),e(j3,rCe),M(vx,rCe,null),e(Mc,hLr),e(Mc,tCe),e(tCe,uLr),b(m,Sze,_),b(m,sr,_),M(Fx,sr,null),e(sr,pLr),e(sr,Ec),e(Ec,_Lr),e(Ec,jY),e(jY,bLr),e(Ec,vLr),e(Ec,DY),e(DY,FLr),e(Ec,TLr),e(sr,MLr),e(sr,Tx),e(Tx,ELr),e(Tx,aCe),e(aCe,CLr),e(Tx,wLr),e(sr,ALr),e(sr,qt),M(Mx,qt,null),e(qt,LLr),e(qt,nCe),e(nCe,yLr),e(qt,xLr),e(qt,Cc),e(Cc,$Lr),e(Cc,sCe),e(sCe,kLr),e(Cc,SLr),e(Cc,GY),e(GY,RLr),e(Cc,PLr),e(qt,BLr),M(D3,qt,null),e(sr,NLr),e(sr,Pr),M(Ex,Pr,null),e(Pr,ILr),e(Pr,lCe),e(lCe,qLr),e(Pr,jLr),e(Pr,fn),e(fn,DLr),e(fn,iCe),e(iCe,GLr),e(fn,OLr),e(fn,dCe),e(dCe,VLr),e(fn,XLr),e(fn,cCe),e(cCe,zLr),e(fn,QLr),e(Pr,WLr),e(Pr,ye),e(ye,G3),e(G3,mCe),e(mCe,HLr),e(G3,ULr),e(G3,OY),e(OY,JLr),e(G3,YLr),e(ye,KLr),e(ye,O3),e(O3,fCe),e(fCe,ZLr),e(O3,eyr),e(O3,VY),e(VY,oyr),e(O3,ryr),e(ye,tyr),e(ye,V3),e(V3,gCe),e(gCe,ayr),e(V3,nyr),e(V3,XY),e(XY,syr),e(V3,lyr),e(ye,iyr),e(ye,X3),e(X3,hCe),e(hCe,dyr),e(X3,cyr),e(X3,zY),e(zY,myr),e(X3,fyr),e(ye,gyr),e(ye,z3),e(z3,uCe),e(uCe,hyr),e(z3,uyr),e(z3,QY),e(QY,pyr),e(z3,_yr),e(ye,byr),e(ye,Q3),e(Q3,pCe),e(pCe,vyr),e(Q3,Fyr),e(Q3,WY),e(WY,Tyr),e(Q3,Myr),e(ye,Eyr),e(ye,W3),e(W3,_Ce),e(_Ce,Cyr),e(W3,wyr),e(W3,HY),e(HY,Ayr),e(W3,Lyr),e(ye,yyr),e(ye,H3),e(H3,bCe),e(bCe,xyr),e(H3,$yr),e(H3,UY),e(UY,kyr),e(H3,Syr),e(ye,Ryr),e(ye,U3),e(U3,vCe),e(vCe,Pyr),e(U3,Byr),e(U3,JY),e(JY,Nyr),e(U3,Iyr),e(ye,qyr),e(ye,J3),e(J3,FCe),e(FCe,jyr),e(J3,Dyr),e(J3,YY),e(YY,Gyr),e(J3,Oyr),e(Pr,Vyr),M(Y3,Pr,null),b(m,Rze,_),b(m,wc,_),e(wc,K3),e(K3,TCe),M(Cx,TCe,null),e(wc,Xyr),e(wc,MCe),e(MCe,zyr),b(m,Pze,_),b(m,lr,_),M(wx,lr,null),e(lr,Qyr),e(lr,Ac),e(Ac,Wyr),e(Ac,KY),e(KY,Hyr),e(Ac,Uyr),e(Ac,ZY),e(ZY,Jyr),e(Ac,Yyr),e(lr,Kyr),e(lr,Ax),e(Ax,Zyr),e(Ax,ECe),e(ECe,e8r),e(Ax,o8r),e(lr,r8r),e(lr,jt),M(Lx,jt,null),e(jt,t8r),e(jt,CCe),e(CCe,a8r),e(jt,n8r),e(jt,Lc),e(Lc,s8r),e(Lc,wCe),e(wCe,l8r),e(Lc,i8r),e(Lc,eK),e(eK,d8r),e(Lc,c8r),e(jt,m8r),M(Z3,jt,null),e(lr,f8r),e(lr,Br),M(yx,Br,null),e(Br,g8r),e(Br,ACe),e(ACe,h8r),e(Br,u8r),e(Br,gn),e(gn,p8r),e(gn,LCe),e(LCe,_8r),e(gn,b8r),e(gn,yCe),e(yCe,v8r),e(gn,F8r),e(gn,xCe),e(xCe,T8r),e(gn,M8r),e(Br,E8r),e(Br,te),e(te,e5),e(e5,$Ce),e($Ce,C8r),e(e5,w8r),e(e5,oK),e(oK,A8r),e(e5,L8r),e(te,y8r),e(te,o5),e(o5,kCe),e(kCe,x8r),e(o5,$8r),e(o5,rK),e(rK,k8r),e(o5,S8r),e(te,R8r),e(te,r5),e(r5,SCe),e(SCe,P8r),e(r5,B8r),e(r5,tK),e(tK,N8r),e(r5,I8r),e(te,q8r),e(te,t5),e(t5,RCe),e(RCe,j8r),e(t5,D8r),e(t5,aK),e(aK,G8r),e(t5,O8r),e(te,V8r),e(te,a5),e(a5,PCe),e(PCe,X8r),e(a5,z8r),e(a5,nK),e(nK,Q8r),e(a5,W8r),e(te,H8r),e(te,n5),e(n5,BCe),e(BCe,U8r),e(n5,J8r),e(n5,sK),e(sK,Y8r),e(n5,K8r),e(te,Z8r),e(te,s5),e(s5,NCe),e(NCe,e9r),e(s5,o9r),e(s5,lK),e(lK,r9r),e(s5,t9r),e(te,a9r),e(te,l5),e(l5,ICe),e(ICe,n9r),e(l5,s9r),e(l5,iK),e(iK,l9r),e(l5,i9r),e(te,d9r),e(te,i5),e(i5,qCe),e(qCe,c9r),e(i5,m9r),e(i5,dK),e(dK,f9r),e(i5,g9r),e(te,h9r),e(te,d5),e(d5,jCe),e(jCe,u9r),e(d5,p9r),e(d5,cK),e(cK,_9r),e(d5,b9r),e(te,v9r),e(te,c5),e(c5,DCe),e(DCe,F9r),e(c5,T9r),e(c5,mK),e(mK,M9r),e(c5,E9r),e(te,C9r),e(te,m5),e(m5,GCe),e(GCe,w9r),e(m5,A9r),e(m5,fK),e(fK,L9r),e(m5,y9r),e(te,x9r),e(te,f5),e(f5,OCe),e(OCe,$9r),e(f5,k9r),e(f5,gK),e(gK,S9r),e(f5,R9r),e(te,P9r),e(te,g5),e(g5,VCe),e(VCe,B9r),e(g5,N9r),e(g5,hK),e(hK,I9r),e(g5,q9r),e(te,j9r),e(te,h5),e(h5,XCe),e(XCe,D9r),e(h5,G9r),e(h5,uK),e(uK,O9r),e(h5,V9r),e(te,X9r),e(te,u5),e(u5,zCe),e(zCe,z9r),e(u5,Q9r),e(u5,pK),e(pK,W9r),e(u5,H9r),e(te,U9r),e(te,p5),e(p5,QCe),e(QCe,J9r),e(p5,Y9r),e(p5,_K),e(_K,K9r),e(p5,Z9r),e(te,exr),e(te,_5),e(_5,WCe),e(WCe,oxr),e(_5,rxr),e(_5,bK),e(bK,txr),e(_5,axr),e(te,nxr),e(te,b5),e(b5,HCe),e(HCe,sxr),e(b5,lxr),e(b5,vK),e(vK,ixr),e(b5,dxr),e(te,cxr),e(te,v5),e(v5,UCe),e(UCe,mxr),e(v5,fxr),e(v5,FK),e(FK,gxr),e(v5,hxr),e(te,uxr),e(te,F5),e(F5,JCe),e(JCe,pxr),e(F5,_xr),e(F5,TK),e(TK,bxr),e(F5,vxr),e(te,Fxr),e(te,T5),e(T5,YCe),e(YCe,Txr),e(T5,Mxr),e(T5,MK),e(MK,Exr),e(T5,Cxr),e(te,wxr),e(te,M5),e(M5,KCe),e(KCe,Axr),e(M5,Lxr),e(M5,EK),e(EK,yxr),e(M5,xxr),e(te,$xr),e(te,E5),e(E5,ZCe),e(ZCe,kxr),e(E5,Sxr),e(E5,CK),e(CK,Rxr),e(E5,Pxr),e(te,Bxr),e(te,C5),e(C5,e3e),e(e3e,Nxr),e(C5,Ixr),e(C5,wK),e(wK,qxr),e(C5,jxr),e(te,Dxr),e(te,w5),e(w5,o3e),e(o3e,Gxr),e(w5,Oxr),e(w5,AK),e(AK,Vxr),e(w5,Xxr),e(Br,zxr),M(A5,Br,null),b(m,Bze,_),b(m,yc,_),e(yc,L5),e(L5,r3e),M(xx,r3e,null),e(yc,Qxr),e(yc,t3e),e(t3e,Wxr),b(m,Nze,_),b(m,ir,_),M($x,ir,null),e(ir,Hxr),e(ir,xc),e(xc,Uxr),e(xc,LK),e(LK,Jxr),e(xc,Yxr),e(xc,yK),e(yK,Kxr),e(xc,Zxr),e(ir,e$r),e(ir,kx),e(kx,o$r),e(kx,a3e),e(a3e,r$r),e(kx,t$r),e(ir,a$r),e(ir,Dt),M(Sx,Dt,null),e(Dt,n$r),e(Dt,n3e),e(n3e,s$r),e(Dt,l$r),e(Dt,$c),e($c,i$r),e($c,s3e),e(s3e,d$r),e($c,c$r),e($c,xK),e(xK,m$r),e($c,f$r),e(Dt,g$r),M(y5,Dt,null),e(ir,h$r),e(ir,Nr),M(Rx,Nr,null),e(Nr,u$r),e(Nr,l3e),e(l3e,p$r),e(Nr,_$r),e(Nr,hn),e(hn,b$r),e(hn,i3e),e(i3e,v$r),e(hn,F$r),e(hn,d3e),e(d3e,T$r),e(hn,M$r),e(hn,c3e),e(c3e,E$r),e(hn,C$r),e(Nr,w$r),e(Nr,_e),e(_e,x5),e(x5,m3e),e(m3e,A$r),e(x5,L$r),e(x5,$K),e($K,y$r),e(x5,x$r),e(_e,$$r),e(_e,$5),e($5,f3e),e(f3e,k$r),e($5,S$r),e($5,kK),e(kK,R$r),e($5,P$r),e(_e,B$r),e(_e,k5),e(k5,g3e),e(g3e,N$r),e(k5,I$r),e(k5,SK),e(SK,q$r),e(k5,j$r),e(_e,D$r),e(_e,S5),e(S5,h3e),e(h3e,G$r),e(S5,O$r),e(S5,RK),e(RK,V$r),e(S5,X$r),e(_e,z$r),e(_e,R5),e(R5,u3e),e(u3e,Q$r),e(R5,W$r),e(R5,PK),e(PK,H$r),e(R5,U$r),e(_e,J$r),e(_e,P5),e(P5,p3e),e(p3e,Y$r),e(P5,K$r),e(P5,BK),e(BK,Z$r),e(P5,ekr),e(_e,okr),e(_e,B5),e(B5,_3e),e(_3e,rkr),e(B5,tkr),e(B5,NK),e(NK,akr),e(B5,nkr),e(_e,skr),e(_e,N5),e(N5,b3e),e(b3e,lkr),e(N5,ikr),e(N5,IK),e(IK,dkr),e(N5,ckr),e(_e,mkr),e(_e,I5),e(I5,v3e),e(v3e,fkr),e(I5,gkr),e(I5,qK),e(qK,hkr),e(I5,ukr),e(_e,pkr),e(_e,q5),e(q5,F3e),e(F3e,_kr),e(q5,bkr),e(q5,jK),e(jK,vkr),e(q5,Fkr),e(_e,Tkr),e(_e,j5),e(j5,T3e),e(T3e,Mkr),e(j5,Ekr),e(j5,DK),e(DK,Ckr),e(j5,wkr),e(_e,Akr),e(_e,D5),e(D5,M3e),e(M3e,Lkr),e(D5,ykr),e(D5,GK),e(GK,xkr),e(D5,$kr),e(_e,kkr),e(_e,G5),e(G5,E3e),e(E3e,Skr),e(G5,Rkr),e(G5,OK),e(OK,Pkr),e(G5,Bkr),e(_e,Nkr),e(_e,O5),e(O5,C3e),e(C3e,Ikr),e(O5,qkr),e(O5,VK),e(VK,jkr),e(O5,Dkr),e(_e,Gkr),e(_e,V5),e(V5,w3e),e(w3e,Okr),e(V5,Vkr),e(V5,XK),e(XK,Xkr),e(V5,zkr),e(_e,Qkr),e(_e,X5),e(X5,A3e),e(A3e,Wkr),e(X5,Hkr),e(X5,zK),e(zK,Ukr),e(X5,Jkr),e(_e,Ykr),e(_e,z5),e(z5,L3e),e(L3e,Kkr),e(z5,Zkr),e(z5,QK),e(QK,eSr),e(z5,oSr),e(Nr,rSr),M(Q5,Nr,null),b(m,Ize,_),b(m,kc,_),e(kc,W5),e(W5,y3e),M(Px,y3e,null),e(kc,tSr),e(kc,x3e),e(x3e,aSr),b(m,qze,_),b(m,dr,_),M(Bx,dr,null),e(dr,nSr),e(dr,Sc),e(Sc,sSr),e(Sc,WK),e(WK,lSr),e(Sc,iSr),e(Sc,HK),e(HK,dSr),e(Sc,cSr),e(dr,mSr),e(dr,Nx),e(Nx,fSr),e(Nx,$3e),e($3e,gSr),e(Nx,hSr),e(dr,uSr),e(dr,Gt),M(Ix,Gt,null),e(Gt,pSr),e(Gt,k3e),e(k3e,_Sr),e(Gt,bSr),e(Gt,Rc),e(Rc,vSr),e(Rc,S3e),e(S3e,FSr),e(Rc,TSr),e(Rc,UK),e(UK,MSr),e(Rc,ESr),e(Gt,CSr),M(H5,Gt,null),e(dr,wSr),e(dr,Ir),M(qx,Ir,null),e(Ir,ASr),e(Ir,R3e),e(R3e,LSr),e(Ir,ySr),e(Ir,un),e(un,xSr),e(un,P3e),e(P3e,$Sr),e(un,kSr),e(un,B3e),e(B3e,SSr),e(un,RSr),e(un,N3e),e(N3e,PSr),e(un,BSr),e(Ir,NSr),e(Ir,jx),e(jx,U5),e(U5,I3e),e(I3e,ISr),e(U5,qSr),e(U5,JK),e(JK,jSr),e(U5,DSr),e(jx,GSr),e(jx,J5),e(J5,q3e),e(q3e,OSr),e(J5,VSr),e(J5,YK),e(YK,XSr),e(J5,zSr),e(Ir,QSr),M(Y5,Ir,null),b(m,jze,_),b(m,Pc,_),e(Pc,K5),e(K5,j3e),M(Dx,j3e,null),e(Pc,WSr),e(Pc,D3e),e(D3e,HSr),b(m,Dze,_),b(m,cr,_),M(Gx,cr,null),e(cr,USr),e(cr,Bc),e(Bc,JSr),e(Bc,KK),e(KK,YSr),e(Bc,KSr),e(Bc,ZK),e(ZK,ZSr),e(Bc,eRr),e(cr,oRr),e(cr,Ox),e(Ox,rRr),e(Ox,G3e),e(G3e,tRr),e(Ox,aRr),e(cr,nRr),e(cr,Ot),M(Vx,Ot,null),e(Ot,sRr),e(Ot,O3e),e(O3e,lRr),e(Ot,iRr),e(Ot,Nc),e(Nc,dRr),e(Nc,V3e),e(V3e,cRr),e(Nc,mRr),e(Nc,eZ),e(eZ,fRr),e(Nc,gRr),e(Ot,hRr),M(Z5,Ot,null),e(cr,uRr),e(cr,qr),M(Xx,qr,null),e(qr,pRr),e(qr,X3e),e(X3e,_Rr),e(qr,bRr),e(qr,pn),e(pn,vRr),e(pn,z3e),e(z3e,FRr),e(pn,TRr),e(pn,Q3e),e(Q3e,MRr),e(pn,ERr),e(pn,W3e),e(W3e,CRr),e(pn,wRr),e(qr,ARr),e(qr,H3e),e(H3e,e0),e(e0,U3e),e(U3e,LRr),e(e0,yRr),e(e0,oZ),e(oZ,xRr),e(e0,$Rr),e(qr,kRr),M(o0,qr,null),b(m,Gze,_),b(m,Ic,_),e(Ic,r0),e(r0,J3e),M(zx,J3e,null),e(Ic,SRr),e(Ic,Y3e),e(Y3e,RRr),b(m,Oze,_),b(m,mr,_),M(Qx,mr,null),e(mr,PRr),e(mr,qc),e(qc,BRr),e(qc,rZ),e(rZ,NRr),e(qc,IRr),e(qc,tZ),e(tZ,qRr),e(qc,jRr),e(mr,DRr),e(mr,Wx),e(Wx,GRr),e(Wx,K3e),e(K3e,ORr),e(Wx,VRr),e(mr,XRr),e(mr,Vt),M(Hx,Vt,null),e(Vt,zRr),e(Vt,Z3e),e(Z3e,QRr),e(Vt,WRr),e(Vt,jc),e(jc,HRr),e(jc,e5e),e(e5e,URr),e(jc,JRr),e(jc,aZ),e(aZ,YRr),e(jc,KRr),e(Vt,ZRr),M(t0,Vt,null),e(mr,ePr),e(mr,jr),M(Ux,jr,null),e(jr,oPr),e(jr,o5e),e(o5e,rPr),e(jr,tPr),e(jr,_n),e(_n,aPr),e(_n,r5e),e(r5e,nPr),e(_n,sPr),e(_n,t5e),e(t5e,lPr),e(_n,iPr),e(_n,a5e),e(a5e,dPr),e(_n,cPr),e(jr,mPr),e(jr,de),e(de,a0),e(a0,n5e),e(n5e,fPr),e(a0,gPr),e(a0,nZ),e(nZ,hPr),e(a0,uPr),e(de,pPr),e(de,n0),e(n0,s5e),e(s5e,_Pr),e(n0,bPr),e(n0,sZ),e(sZ,vPr),e(n0,FPr),e(de,TPr),e(de,s0),e(s0,l5e),e(l5e,MPr),e(s0,EPr),e(s0,lZ),e(lZ,CPr),e(s0,wPr),e(de,APr),e(de,l0),e(l0,i5e),e(i5e,LPr),e(l0,yPr),e(l0,iZ),e(iZ,xPr),e(l0,$Pr),e(de,kPr),e(de,i0),e(i0,d5e),e(d5e,SPr),e(i0,RPr),e(i0,dZ),e(dZ,PPr),e(i0,BPr),e(de,NPr),e(de,d0),e(d0,c5e),e(c5e,IPr),e(d0,qPr),e(d0,cZ),e(cZ,jPr),e(d0,DPr),e(de,GPr),e(de,c0),e(c0,m5e),e(m5e,OPr),e(c0,VPr),e(c0,mZ),e(mZ,XPr),e(c0,zPr),e(de,QPr),e(de,m0),e(m0,f5e),e(f5e,WPr),e(m0,HPr),e(m0,fZ),e(fZ,UPr),e(m0,JPr),e(de,YPr),e(de,f0),e(f0,g5e),e(g5e,KPr),e(f0,ZPr),e(f0,gZ),e(gZ,eBr),e(f0,oBr),e(de,rBr),e(de,g0),e(g0,h5e),e(h5e,tBr),e(g0,aBr),e(g0,hZ),e(hZ,nBr),e(g0,sBr),e(de,lBr),e(de,h0),e(h0,u5e),e(u5e,iBr),e(h0,dBr),e(h0,uZ),e(uZ,cBr),e(h0,mBr),e(de,fBr),e(de,u0),e(u0,p5e),e(p5e,gBr),e(u0,hBr),e(u0,pZ),e(pZ,uBr),e(u0,pBr),e(de,_Br),e(de,p0),e(p0,_5e),e(_5e,bBr),e(p0,vBr),e(p0,_Z),e(_Z,FBr),e(p0,TBr),e(de,MBr),e(de,_0),e(_0,b5e),e(b5e,EBr),e(_0,CBr),e(_0,bZ),e(bZ,wBr),e(_0,ABr),e(de,LBr),e(de,b0),e(b0,v5e),e(v5e,yBr),e(b0,xBr),e(b0,vZ),e(vZ,$Br),e(b0,kBr),e(de,SBr),e(de,v0),e(v0,F5e),e(F5e,RBr),e(v0,PBr),e(v0,FZ),e(FZ,BBr),e(v0,NBr),e(de,IBr),e(de,F0),e(F0,T5e),e(T5e,qBr),e(F0,jBr),e(F0,TZ),e(TZ,DBr),e(F0,GBr),e(de,OBr),e(de,T0),e(T0,M5e),e(M5e,VBr),e(T0,XBr),e(T0,MZ),e(MZ,zBr),e(T0,QBr),e(de,WBr),e(de,M0),e(M0,E5e),e(E5e,HBr),e(M0,UBr),e(M0,EZ),e(EZ,JBr),e(M0,YBr),e(de,KBr),e(de,E0),e(E0,C5e),e(C5e,ZBr),e(E0,eNr),e(E0,CZ),e(CZ,oNr),e(E0,rNr),e(jr,tNr),M(C0,jr,null),b(m,Vze,_),b(m,Dc,_),e(Dc,w0),e(w0,w5e),M(Jx,w5e,null),e(Dc,aNr),e(Dc,A5e),e(A5e,nNr),b(m,Xze,_),b(m,fr,_),M(Yx,fr,null),e(fr,sNr),e(fr,Gc),e(Gc,lNr),e(Gc,wZ),e(wZ,iNr),e(Gc,dNr),e(Gc,AZ),e(AZ,cNr),e(Gc,mNr),e(fr,fNr),e(fr,Kx),e(Kx,gNr),e(Kx,L5e),e(L5e,hNr),e(Kx,uNr),e(fr,pNr),e(fr,Xt),M(Zx,Xt,null),e(Xt,_Nr),e(Xt,y5e),e(y5e,bNr),e(Xt,vNr),e(Xt,Oc),e(Oc,FNr),e(Oc,x5e),e(x5e,TNr),e(Oc,MNr),e(Oc,LZ),e(LZ,ENr),e(Oc,CNr),e(Xt,wNr),M(A0,Xt,null),e(fr,ANr),e(fr,Dr),M(e$,Dr,null),e(Dr,LNr),e(Dr,$5e),e($5e,yNr),e(Dr,xNr),e(Dr,bn),e(bn,$Nr),e(bn,k5e),e(k5e,kNr),e(bn,SNr),e(bn,S5e),e(S5e,RNr),e(bn,PNr),e(bn,R5e),e(R5e,BNr),e(bn,NNr),e(Dr,INr),e(Dr,ce),e(ce,L0),e(L0,P5e),e(P5e,qNr),e(L0,jNr),e(L0,yZ),e(yZ,DNr),e(L0,GNr),e(ce,ONr),e(ce,y0),e(y0,B5e),e(B5e,VNr),e(y0,XNr),e(y0,xZ),e(xZ,zNr),e(y0,QNr),e(ce,WNr),e(ce,x0),e(x0,N5e),e(N5e,HNr),e(x0,UNr),e(x0,$Z),e($Z,JNr),e(x0,YNr),e(ce,KNr),e(ce,$0),e($0,I5e),e(I5e,ZNr),e($0,eIr),e($0,kZ),e(kZ,oIr),e($0,rIr),e(ce,tIr),e(ce,k0),e(k0,q5e),e(q5e,aIr),e(k0,nIr),e(k0,SZ),e(SZ,sIr),e(k0,lIr),e(ce,iIr),e(ce,S0),e(S0,j5e),e(j5e,dIr),e(S0,cIr),e(S0,RZ),e(RZ,mIr),e(S0,fIr),e(ce,gIr),e(ce,R0),e(R0,D5e),e(D5e,hIr),e(R0,uIr),e(R0,PZ),e(PZ,pIr),e(R0,_Ir),e(ce,bIr),e(ce,P0),e(P0,G5e),e(G5e,vIr),e(P0,FIr),e(P0,BZ),e(BZ,TIr),e(P0,MIr),e(ce,EIr),e(ce,B0),e(B0,O5e),e(O5e,CIr),e(B0,wIr),e(B0,NZ),e(NZ,AIr),e(B0,LIr),e(ce,yIr),e(ce,N0),e(N0,V5e),e(V5e,xIr),e(N0,$Ir),e(N0,IZ),e(IZ,kIr),e(N0,SIr),e(ce,RIr),e(ce,I0),e(I0,X5e),e(X5e,PIr),e(I0,BIr),e(I0,qZ),e(qZ,NIr),e(I0,IIr),e(ce,qIr),e(ce,q0),e(q0,z5e),e(z5e,jIr),e(q0,DIr),e(q0,jZ),e(jZ,GIr),e(q0,OIr),e(ce,VIr),e(ce,j0),e(j0,Q5e),e(Q5e,XIr),e(j0,zIr),e(j0,DZ),e(DZ,QIr),e(j0,WIr),e(ce,HIr),e(ce,D0),e(D0,W5e),e(W5e,UIr),e(D0,JIr),e(D0,GZ),e(GZ,YIr),e(D0,KIr),e(ce,ZIr),e(ce,G0),e(G0,H5e),e(H5e,eqr),e(G0,oqr),e(G0,OZ),e(OZ,rqr),e(G0,tqr),e(ce,aqr),e(ce,O0),e(O0,U5e),e(U5e,nqr),e(O0,sqr),e(O0,VZ),e(VZ,lqr),e(O0,iqr),e(ce,dqr),e(ce,V0),e(V0,J5e),e(J5e,cqr),e(V0,mqr),e(V0,XZ),e(XZ,fqr),e(V0,gqr),e(ce,hqr),e(ce,X0),e(X0,Y5e),e(Y5e,uqr),e(X0,pqr),e(X0,zZ),e(zZ,_qr),e(X0,bqr),e(ce,vqr),e(ce,z0),e(z0,K5e),e(K5e,Fqr),e(z0,Tqr),e(z0,QZ),e(QZ,Mqr),e(z0,Eqr),e(ce,Cqr),e(ce,Q0),e(Q0,Z5e),e(Z5e,wqr),e(Q0,Aqr),e(Q0,WZ),e(WZ,Lqr),e(Q0,yqr),e(Dr,xqr),M(W0,Dr,null),b(m,zze,_),b(m,Vc,_),e(Vc,H0),e(H0,e0e),M(o$,e0e,null),e(Vc,$qr),e(Vc,o0e),e(o0e,kqr),b(m,Qze,_),b(m,gr,_),M(r$,gr,null),e(gr,Sqr),e(gr,Xc),e(Xc,Rqr),e(Xc,HZ),e(HZ,Pqr),e(Xc,Bqr),e(Xc,UZ),e(UZ,Nqr),e(Xc,Iqr),e(gr,qqr),e(gr,t$),e(t$,jqr),e(t$,r0e),e(r0e,Dqr),e(t$,Gqr),e(gr,Oqr),e(gr,zt),M(a$,zt,null),e(zt,Vqr),e(zt,t0e),e(t0e,Xqr),e(zt,zqr),e(zt,zc),e(zc,Qqr),e(zc,a0e),e(a0e,Wqr),e(zc,Hqr),e(zc,JZ),e(JZ,Uqr),e(zc,Jqr),e(zt,Yqr),M(U0,zt,null),e(gr,Kqr),e(gr,Gr),M(n$,Gr,null),e(Gr,Zqr),e(Gr,n0e),e(n0e,ejr),e(Gr,ojr),e(Gr,vn),e(vn,rjr),e(vn,s0e),e(s0e,tjr),e(vn,ajr),e(vn,l0e),e(l0e,njr),e(vn,sjr),e(vn,i0e),e(i0e,ljr),e(vn,ijr),e(Gr,djr),e(Gr,d0e),e(d0e,J0),e(J0,c0e),e(c0e,cjr),e(J0,mjr),e(J0,YZ),e(YZ,fjr),e(J0,gjr),e(Gr,hjr),M(Y0,Gr,null),b(m,Wze,_),b(m,Qc,_),e(Qc,K0),e(K0,m0e),M(s$,m0e,null),e(Qc,ujr),e(Qc,f0e),e(f0e,pjr),b(m,Hze,_),b(m,hr,_),M(l$,hr,null),e(hr,_jr),e(hr,Wc),e(Wc,bjr),e(Wc,KZ),e(KZ,vjr),e(Wc,Fjr),e(Wc,ZZ),e(ZZ,Tjr),e(Wc,Mjr),e(hr,Ejr),e(hr,i$),e(i$,Cjr),e(i$,g0e),e(g0e,wjr),e(i$,Ajr),e(hr,Ljr),e(hr,Qt),M(d$,Qt,null),e(Qt,yjr),e(Qt,h0e),e(h0e,xjr),e(Qt,$jr),e(Qt,Hc),e(Hc,kjr),e(Hc,u0e),e(u0e,Sjr),e(Hc,Rjr),e(Hc,eee),e(eee,Pjr),e(Hc,Bjr),e(Qt,Njr),M(Z0,Qt,null),e(hr,Ijr),e(hr,Or),M(c$,Or,null),e(Or,qjr),e(Or,p0e),e(p0e,jjr),e(Or,Djr),e(Or,Fn),e(Fn,Gjr),e(Fn,_0e),e(_0e,Ojr),e(Fn,Vjr),e(Fn,b0e),e(b0e,Xjr),e(Fn,zjr),e(Fn,v0e),e(v0e,Qjr),e(Fn,Wjr),e(Or,Hjr),e(Or,F0e),e(F0e,ew),e(ew,T0e),e(T0e,Ujr),e(ew,Jjr),e(ew,oee),e(oee,Yjr),e(ew,Kjr),e(Or,Zjr),M(ow,Or,null),b(m,Uze,_),b(m,Uc,_),e(Uc,rw),e(rw,M0e),M(m$,M0e,null),e(Uc,eDr),e(Uc,E0e),e(E0e,oDr),b(m,Jze,_),b(m,ur,_),M(f$,ur,null),e(ur,rDr),e(ur,Jc),e(Jc,tDr),e(Jc,ree),e(ree,aDr),e(Jc,nDr),e(Jc,tee),e(tee,sDr),e(Jc,lDr),e(ur,iDr),e(ur,g$),e(g$,dDr),e(g$,C0e),e(C0e,cDr),e(g$,mDr),e(ur,fDr),e(ur,Wt),M(h$,Wt,null),e(Wt,gDr),e(Wt,w0e),e(w0e,hDr),e(Wt,uDr),e(Wt,Yc),e(Yc,pDr),e(Yc,A0e),e(A0e,_Dr),e(Yc,bDr),e(Yc,aee),e(aee,vDr),e(Yc,FDr),e(Wt,TDr),M(tw,Wt,null),e(ur,MDr),e(ur,Vr),M(u$,Vr,null),e(Vr,EDr),e(Vr,L0e),e(L0e,CDr),e(Vr,wDr),e(Vr,Tn),e(Tn,ADr),e(Tn,y0e),e(y0e,LDr),e(Tn,yDr),e(Tn,x0e),e(x0e,xDr),e(Tn,$Dr),e(Tn,$0e),e($0e,kDr),e(Tn,SDr),e(Vr,RDr),e(Vr,oe),e(oe,aw),e(aw,k0e),e(k0e,PDr),e(aw,BDr),e(aw,nee),e(nee,NDr),e(aw,IDr),e(oe,qDr),e(oe,nw),e(nw,S0e),e(S0e,jDr),e(nw,DDr),e(nw,see),e(see,GDr),e(nw,ODr),e(oe,VDr),e(oe,sw),e(sw,R0e),e(R0e,XDr),e(sw,zDr),e(sw,lee),e(lee,QDr),e(sw,WDr),e(oe,HDr),e(oe,lw),e(lw,P0e),e(P0e,UDr),e(lw,JDr),e(lw,iee),e(iee,YDr),e(lw,KDr),e(oe,ZDr),e(oe,iw),e(iw,B0e),e(B0e,eGr),e(iw,oGr),e(iw,dee),e(dee,rGr),e(iw,tGr),e(oe,aGr),e(oe,dw),e(dw,N0e),e(N0e,nGr),e(dw,sGr),e(dw,cee),e(cee,lGr),e(dw,iGr),e(oe,dGr),e(oe,cw),e(cw,I0e),e(I0e,cGr),e(cw,mGr),e(cw,mee),e(mee,fGr),e(cw,gGr),e(oe,hGr),e(oe,mw),e(mw,q0e),e(q0e,uGr),e(mw,pGr),e(mw,fee),e(fee,_Gr),e(mw,bGr),e(oe,vGr),e(oe,fw),e(fw,j0e),e(j0e,FGr),e(fw,TGr),e(fw,gee),e(gee,MGr),e(fw,EGr),e(oe,CGr),e(oe,gw),e(gw,D0e),e(D0e,wGr),e(gw,AGr),e(gw,hee),e(hee,LGr),e(gw,yGr),e(oe,xGr),e(oe,hw),e(hw,G0e),e(G0e,$Gr),e(hw,kGr),e(hw,uee),e(uee,SGr),e(hw,RGr),e(oe,PGr),e(oe,uw),e(uw,O0e),e(O0e,BGr),e(uw,NGr),e(uw,pee),e(pee,IGr),e(uw,qGr),e(oe,jGr),e(oe,pw),e(pw,V0e),e(V0e,DGr),e(pw,GGr),e(pw,_ee),e(_ee,OGr),e(pw,VGr),e(oe,XGr),e(oe,_w),e(_w,X0e),e(X0e,zGr),e(_w,QGr),e(_w,bee),e(bee,WGr),e(_w,HGr),e(oe,UGr),e(oe,bw),e(bw,z0e),e(z0e,JGr),e(bw,YGr),e(bw,vee),e(vee,KGr),e(bw,ZGr),e(oe,eOr),e(oe,vw),e(vw,Q0e),e(Q0e,oOr),e(vw,rOr),e(vw,Fee),e(Fee,tOr),e(vw,aOr),e(oe,nOr),e(oe,Fw),e(Fw,W0e),e(W0e,sOr),e(Fw,lOr),e(Fw,Tee),e(Tee,iOr),e(Fw,dOr),e(oe,cOr),e(oe,Tw),e(Tw,H0e),e(H0e,mOr),e(Tw,fOr),e(Tw,Mee),e(Mee,gOr),e(Tw,hOr),e(oe,uOr),e(oe,Mw),e(Mw,U0e),e(U0e,pOr),e(Mw,_Or),e(Mw,Eee),e(Eee,bOr),e(Mw,vOr),e(oe,FOr),e(oe,Ew),e(Ew,J0e),e(J0e,TOr),e(Ew,MOr),e(Ew,Cee),e(Cee,EOr),e(Ew,COr),e(oe,wOr),e(oe,Cw),e(Cw,Y0e),e(Y0e,AOr),e(Cw,LOr),e(Cw,wee),e(wee,yOr),e(Cw,xOr),e(oe,$Or),e(oe,ww),e(ww,K0e),e(K0e,kOr),e(ww,SOr),e(ww,Aee),e(Aee,ROr),e(ww,POr),e(oe,BOr),e(oe,Aw),e(Aw,Z0e),e(Z0e,NOr),e(Aw,IOr),e(Aw,Lee),e(Lee,qOr),e(Aw,jOr),e(oe,DOr),e(oe,Lw),e(Lw,ewe),e(ewe,GOr),e(Lw,OOr),e(Lw,yee),e(yee,VOr),e(Lw,XOr),e(oe,zOr),e(oe,yw),e(yw,owe),e(owe,QOr),e(yw,WOr),e(yw,xee),e(xee,HOr),e(yw,UOr),e(oe,JOr),e(oe,xw),e(xw,rwe),e(rwe,YOr),e(xw,KOr),e(xw,$ee),e($ee,ZOr),e(xw,eVr),e(oe,oVr),e(oe,$w),e($w,twe),e(twe,rVr),e($w,tVr),e($w,kee),e(kee,aVr),e($w,nVr),e(Vr,sVr),M(kw,Vr,null),b(m,Yze,_),b(m,Kc,_),e(Kc,Sw),e(Sw,awe),M(p$,awe,null),e(Kc,lVr),e(Kc,nwe),e(nwe,iVr),b(m,Kze,_),b(m,pr,_),M(_$,pr,null),e(pr,dVr),e(pr,Zc),e(Zc,cVr),e(Zc,See),e(See,mVr),e(Zc,fVr),e(Zc,Ree),e(Ree,gVr),e(Zc,hVr),e(pr,uVr),e(pr,b$),e(b$,pVr),e(b$,swe),e(swe,_Vr),e(b$,bVr),e(pr,vVr),e(pr,Ht),M(v$,Ht,null),e(Ht,FVr),e(Ht,lwe),e(lwe,TVr),e(Ht,MVr),e(Ht,em),e(em,EVr),e(em,iwe),e(iwe,CVr),e(em,wVr),e(em,Pee),e(Pee,AVr),e(em,LVr),e(Ht,yVr),M(Rw,Ht,null),e(pr,xVr),e(pr,Xr),M(F$,Xr,null),e(Xr,$Vr),e(Xr,dwe),e(dwe,kVr),e(Xr,SVr),e(Xr,Mn),e(Mn,RVr),e(Mn,cwe),e(cwe,PVr),e(Mn,BVr),e(Mn,mwe),e(mwe,NVr),e(Mn,IVr),e(Mn,fwe),e(fwe,qVr),e(Mn,jVr),e(Xr,DVr),e(Xr,xe),e(xe,Pw),e(Pw,gwe),e(gwe,GVr),e(Pw,OVr),e(Pw,Bee),e(Bee,VVr),e(Pw,XVr),e(xe,zVr),e(xe,Bw),e(Bw,hwe),e(hwe,QVr),e(Bw,WVr),e(Bw,Nee),e(Nee,HVr),e(Bw,UVr),e(xe,JVr),e(xe,Nw),e(Nw,uwe),e(uwe,YVr),e(Nw,KVr),e(Nw,Iee),e(Iee,ZVr),e(Nw,eXr),e(xe,oXr),e(xe,Iw),e(Iw,pwe),e(pwe,rXr),e(Iw,tXr),e(Iw,qee),e(qee,aXr),e(Iw,nXr),e(xe,sXr),e(xe,qw),e(qw,_we),e(_we,lXr),e(qw,iXr),e(qw,jee),e(jee,dXr),e(qw,cXr),e(xe,mXr),e(xe,jw),e(jw,bwe),e(bwe,fXr),e(jw,gXr),e(jw,Dee),e(Dee,hXr),e(jw,uXr),e(xe,pXr),e(xe,Dw),e(Dw,vwe),e(vwe,_Xr),e(Dw,bXr),e(Dw,Gee),e(Gee,vXr),e(Dw,FXr),e(xe,TXr),e(xe,Gw),e(Gw,Fwe),e(Fwe,MXr),e(Gw,EXr),e(Gw,Oee),e(Oee,CXr),e(Gw,wXr),e(xe,AXr),e(xe,Ow),e(Ow,Twe),e(Twe,LXr),e(Ow,yXr),e(Ow,Vee),e(Vee,xXr),e(Ow,$Xr),e(xe,kXr),e(xe,Vw),e(Vw,Mwe),e(Mwe,SXr),e(Vw,RXr),e(Vw,Xee),e(Xee,PXr),e(Vw,BXr),e(Xr,NXr),M(Xw,Xr,null),b(m,Zze,_),b(m,om,_),e(om,zw),e(zw,Ewe),M(T$,Ewe,null),e(om,IXr),e(om,Cwe),e(Cwe,qXr),b(m,eQe,_),b(m,_r,_),M(M$,_r,null),e(_r,jXr),e(_r,rm),e(rm,DXr),e(rm,zee),e(zee,GXr),e(rm,OXr),e(rm,Qee),e(Qee,VXr),e(rm,XXr),e(_r,zXr),e(_r,E$),e(E$,QXr),e(E$,wwe),e(wwe,WXr),e(E$,HXr),e(_r,UXr),e(_r,Ut),M(C$,Ut,null),e(Ut,JXr),e(Ut,Awe),e(Awe,YXr),e(Ut,KXr),e(Ut,tm),e(tm,ZXr),e(tm,Lwe),e(Lwe,ezr),e(tm,ozr),e(tm,Wee),e(Wee,rzr),e(tm,tzr),e(Ut,azr),M(Qw,Ut,null),e(_r,nzr),e(_r,zr),M(w$,zr,null),e(zr,szr),e(zr,ywe),e(ywe,lzr),e(zr,izr),e(zr,En),e(En,dzr),e(En,xwe),e(xwe,czr),e(En,mzr),e(En,$we),e($we,fzr),e(En,gzr),e(En,kwe),e(kwe,hzr),e(En,uzr),e(zr,pzr),e(zr,Ee),e(Ee,Ww),e(Ww,Swe),e(Swe,_zr),e(Ww,bzr),e(Ww,Hee),e(Hee,vzr),e(Ww,Fzr),e(Ee,Tzr),e(Ee,Hw),e(Hw,Rwe),e(Rwe,Mzr),e(Hw,Ezr),e(Hw,Uee),e(Uee,Czr),e(Hw,wzr),e(Ee,Azr),e(Ee,Uw),e(Uw,Pwe),e(Pwe,Lzr),e(Uw,yzr),e(Uw,Jee),e(Jee,xzr),e(Uw,$zr),e(Ee,kzr),e(Ee,Jw),e(Jw,Bwe),e(Bwe,Szr),e(Jw,Rzr),e(Jw,Yee),e(Yee,Pzr),e(Jw,Bzr),e(Ee,Nzr),e(Ee,Yw),e(Yw,Nwe),e(Nwe,Izr),e(Yw,qzr),e(Yw,Kee),e(Kee,jzr),e(Yw,Dzr),e(Ee,Gzr),e(Ee,Kw),e(Kw,Iwe),e(Iwe,Ozr),e(Kw,Vzr),e(Kw,Zee),e(Zee,Xzr),e(Kw,zzr),e(Ee,Qzr),e(Ee,Zw),e(Zw,qwe),e(qwe,Wzr),e(Zw,Hzr),e(Zw,eoe),e(eoe,Uzr),e(Zw,Jzr),e(Ee,Yzr),e(Ee,eA),e(eA,jwe),e(jwe,Kzr),e(eA,Zzr),e(eA,ooe),e(ooe,eQr),e(eA,oQr),e(Ee,rQr),e(Ee,oA),e(oA,Dwe),e(Dwe,tQr),e(oA,aQr),e(oA,roe),e(roe,nQr),e(oA,sQr),e(Ee,lQr),e(Ee,rA),e(rA,Gwe),e(Gwe,iQr),e(rA,dQr),e(rA,toe),e(toe,cQr),e(rA,mQr),e(Ee,fQr),e(Ee,tA),e(tA,Owe),e(Owe,gQr),e(tA,hQr),e(tA,aoe),e(aoe,uQr),e(tA,pQr),e(Ee,_Qr),e(Ee,aA),e(aA,Vwe),e(Vwe,bQr),e(aA,vQr),e(aA,noe),e(noe,FQr),e(aA,TQr),e(Ee,MQr),e(Ee,nA),e(nA,Xwe),e(Xwe,EQr),e(nA,CQr),e(nA,soe),e(soe,wQr),e(nA,AQr),e(zr,LQr),M(sA,zr,null),b(m,oQe,_),b(m,am,_),e(am,lA),e(lA,zwe),M(A$,zwe,null),e(am,yQr),e(am,Qwe),e(Qwe,xQr),b(m,rQe,_),b(m,br,_),M(L$,br,null),e(br,$Qr),e(br,nm),e(nm,kQr),e(nm,loe),e(loe,SQr),e(nm,RQr),e(nm,ioe),e(ioe,PQr),e(nm,BQr),e(br,NQr),e(br,y$),e(y$,IQr),e(y$,Wwe),e(Wwe,qQr),e(y$,jQr),e(br,DQr),e(br,Jt),M(x$,Jt,null),e(Jt,GQr),e(Jt,Hwe),e(Hwe,OQr),e(Jt,VQr),e(Jt,sm),e(sm,XQr),e(sm,Uwe),e(Uwe,zQr),e(sm,QQr),e(sm,doe),e(doe,WQr),e(sm,HQr),e(Jt,UQr),M(iA,Jt,null),e(br,JQr),e(br,Qr),M($$,Qr,null),e(Qr,YQr),e(Qr,Jwe),e(Jwe,KQr),e(Qr,ZQr),e(Qr,Cn),e(Cn,eWr),e(Cn,Ywe),e(Ywe,oWr),e(Cn,rWr),e(Cn,Kwe),e(Kwe,tWr),e(Cn,aWr),e(Cn,Zwe),e(Zwe,nWr),e(Cn,sWr),e(Qr,lWr),e(Qr,$e),e($e,dA),e(dA,eAe),e(eAe,iWr),e(dA,dWr),e(dA,coe),e(coe,cWr),e(dA,mWr),e($e,fWr),e($e,cA),e(cA,oAe),e(oAe,gWr),e(cA,hWr),e(cA,moe),e(moe,uWr),e(cA,pWr),e($e,_Wr),e($e,mA),e(mA,rAe),e(rAe,bWr),e(mA,vWr),e(mA,foe),e(foe,FWr),e(mA,TWr),e($e,MWr),e($e,fA),e(fA,tAe),e(tAe,EWr),e(fA,CWr),e(fA,goe),e(goe,wWr),e(fA,AWr),e($e,LWr),e($e,gA),e(gA,aAe),e(aAe,yWr),e(gA,xWr),e(gA,hoe),e(hoe,$Wr),e(gA,kWr),e($e,SWr),e($e,hA),e(hA,nAe),e(nAe,RWr),e(hA,PWr),e(hA,uoe),e(uoe,BWr),e(hA,NWr),e($e,IWr),e($e,uA),e(uA,sAe),e(sAe,qWr),e(uA,jWr),e(uA,poe),e(poe,DWr),e(uA,GWr),e($e,OWr),e($e,pA),e(pA,lAe),e(lAe,VWr),e(pA,XWr),e(pA,_oe),e(_oe,zWr),e(pA,QWr),e($e,WWr),e($e,_A),e(_A,iAe),e(iAe,HWr),e(_A,UWr),e(_A,boe),e(boe,JWr),e(_A,YWr),e($e,KWr),e($e,bA),e(bA,dAe),e(dAe,ZWr),e(bA,eHr),e(bA,voe),e(voe,oHr),e(bA,rHr),e(Qr,tHr),M(vA,Qr,null),b(m,tQe,_),b(m,lm,_),e(lm,FA),e(FA,cAe),M(k$,cAe,null),e(lm,aHr),e(lm,mAe),e(mAe,nHr),b(m,aQe,_),b(m,vr,_),M(S$,vr,null),e(vr,sHr),e(vr,im),e(im,lHr),e(im,Foe),e(Foe,iHr),e(im,dHr),e(im,Toe),e(Toe,cHr),e(im,mHr),e(vr,fHr),e(vr,R$),e(R$,gHr),e(R$,fAe),e(fAe,hHr),e(R$,uHr),e(vr,pHr),e(vr,Yt),M(P$,Yt,null),e(Yt,_Hr),e(Yt,gAe),e(gAe,bHr),e(Yt,vHr),e(Yt,dm),e(dm,FHr),e(dm,hAe),e(hAe,THr),e(dm,MHr),e(dm,Moe),e(Moe,EHr),e(dm,CHr),e(Yt,wHr),M(TA,Yt,null),e(vr,AHr),e(vr,Wr),M(B$,Wr,null),e(Wr,LHr),e(Wr,uAe),e(uAe,yHr),e(Wr,xHr),e(Wr,wn),e(wn,$Hr),e(wn,pAe),e(pAe,kHr),e(wn,SHr),e(wn,_Ae),e(_Ae,RHr),e(wn,PHr),e(wn,bAe),e(bAe,BHr),e(wn,NHr),e(Wr,IHr),e(Wr,ke),e(ke,MA),e(MA,vAe),e(vAe,qHr),e(MA,jHr),e(MA,Eoe),e(Eoe,DHr),e(MA,GHr),e(ke,OHr),e(ke,EA),e(EA,FAe),e(FAe,VHr),e(EA,XHr),e(EA,Coe),e(Coe,zHr),e(EA,QHr),e(ke,WHr),e(ke,CA),e(CA,TAe),e(TAe,HHr),e(CA,UHr),e(CA,woe),e(woe,JHr),e(CA,YHr),e(ke,KHr),e(ke,wA),e(wA,MAe),e(MAe,ZHr),e(wA,eUr),e(wA,Aoe),e(Aoe,oUr),e(wA,rUr),e(ke,tUr),e(ke,AA),e(AA,EAe),e(EAe,aUr),e(AA,nUr),e(AA,Loe),e(Loe,sUr),e(AA,lUr),e(ke,iUr),e(ke,LA),e(LA,CAe),e(CAe,dUr),e(LA,cUr),e(LA,yoe),e(yoe,mUr),e(LA,fUr),e(ke,gUr),e(ke,yA),e(yA,wAe),e(wAe,hUr),e(yA,uUr),e(yA,xoe),e(xoe,pUr),e(yA,_Ur),e(ke,bUr),e(ke,xA),e(xA,AAe),e(AAe,vUr),e(xA,FUr),e(xA,$oe),e($oe,TUr),e(xA,MUr),e(ke,EUr),e(ke,$A),e($A,LAe),e(LAe,CUr),e($A,wUr),e($A,koe),e(koe,AUr),e($A,LUr),e(ke,yUr),e(ke,kA),e(kA,yAe),e(yAe,xUr),e(kA,$Ur),e(kA,Soe),e(Soe,kUr),e(kA,SUr),e(Wr,RUr),M(SA,Wr,null),b(m,nQe,_),b(m,cm,_),e(cm,RA),e(RA,xAe),M(N$,xAe,null),e(cm,PUr),e(cm,$Ae),e($Ae,BUr),b(m,sQe,_),b(m,Fr,_),M(I$,Fr,null),e(Fr,NUr),e(Fr,mm),e(mm,IUr),e(mm,Roe),e(Roe,qUr),e(mm,jUr),e(mm,Poe),e(Poe,DUr),e(mm,GUr),e(Fr,OUr),e(Fr,q$),e(q$,VUr),e(q$,kAe),e(kAe,XUr),e(q$,zUr),e(Fr,QUr),e(Fr,Kt),M(j$,Kt,null),e(Kt,WUr),e(Kt,SAe),e(SAe,HUr),e(Kt,UUr),e(Kt,fm),e(fm,JUr),e(fm,RAe),e(RAe,YUr),e(fm,KUr),e(fm,Boe),e(Boe,ZUr),e(fm,eJr),e(Kt,oJr),M(PA,Kt,null),e(Fr,rJr),e(Fr,Hr),M(D$,Hr,null),e(Hr,tJr),e(Hr,PAe),e(PAe,aJr),e(Hr,nJr),e(Hr,An),e(An,sJr),e(An,BAe),e(BAe,lJr),e(An,iJr),e(An,NAe),e(NAe,dJr),e(An,cJr),e(An,IAe),e(IAe,mJr),e(An,fJr),e(Hr,gJr),e(Hr,Se),e(Se,BA),e(BA,qAe),e(qAe,hJr),e(BA,uJr),e(BA,Noe),e(Noe,pJr),e(BA,_Jr),e(Se,bJr),e(Se,NA),e(NA,jAe),e(jAe,vJr),e(NA,FJr),e(NA,Ioe),e(Ioe,TJr),e(NA,MJr),e(Se,EJr),e(Se,IA),e(IA,DAe),e(DAe,CJr),e(IA,wJr),e(IA,qoe),e(qoe,AJr),e(IA,LJr),e(Se,yJr),e(Se,qA),e(qA,GAe),e(GAe,xJr),e(qA,$Jr),e(qA,joe),e(joe,kJr),e(qA,SJr),e(Se,RJr),e(Se,jA),e(jA,OAe),e(OAe,PJr),e(jA,BJr),e(jA,Doe),e(Doe,NJr),e(jA,IJr),e(Se,qJr),e(Se,DA),e(DA,VAe),e(VAe,jJr),e(DA,DJr),e(DA,Goe),e(Goe,GJr),e(DA,OJr),e(Se,VJr),e(Se,GA),e(GA,XAe),e(XAe,XJr),e(GA,zJr),e(GA,Ooe),e(Ooe,QJr),e(GA,WJr),e(Se,HJr),e(Se,OA),e(OA,zAe),e(zAe,UJr),e(OA,JJr),e(OA,Voe),e(Voe,YJr),e(OA,KJr),e(Se,ZJr),e(Se,VA),e(VA,QAe),e(QAe,eYr),e(VA,oYr),e(VA,Xoe),e(Xoe,rYr),e(VA,tYr),e(Se,aYr),e(Se,XA),e(XA,WAe),e(WAe,nYr),e(XA,sYr),e(XA,zoe),e(zoe,lYr),e(XA,iYr),e(Hr,dYr),M(zA,Hr,null),b(m,lQe,_),b(m,gm,_),e(gm,QA),e(QA,HAe),M(G$,HAe,null),e(gm,cYr),e(gm,UAe),e(UAe,mYr),b(m,iQe,_),b(m,Tr,_),M(O$,Tr,null),e(Tr,fYr),e(Tr,hm),e(hm,gYr),e(hm,Qoe),e(Qoe,hYr),e(hm,uYr),e(hm,Woe),e(Woe,pYr),e(hm,_Yr),e(Tr,bYr),e(Tr,V$),e(V$,vYr),e(V$,JAe),e(JAe,FYr),e(V$,TYr),e(Tr,MYr),e(Tr,Zt),M(X$,Zt,null),e(Zt,EYr),e(Zt,YAe),e(YAe,CYr),e(Zt,wYr),e(Zt,um),e(um,AYr),e(um,KAe),e(KAe,LYr),e(um,yYr),e(um,Hoe),e(Hoe,xYr),e(um,$Yr),e(Zt,kYr),M(WA,Zt,null),e(Tr,SYr),e(Tr,Ur),M(z$,Ur,null),e(Ur,RYr),e(Ur,ZAe),e(ZAe,PYr),e(Ur,BYr),e(Ur,Ln),e(Ln,NYr),e(Ln,e6e),e(e6e,IYr),e(Ln,qYr),e(Ln,o6e),e(o6e,jYr),e(Ln,DYr),e(Ln,r6e),e(r6e,GYr),e(Ln,OYr),e(Ur,VYr),e(Ur,Re),e(Re,HA),e(HA,t6e),e(t6e,XYr),e(HA,zYr),e(HA,Uoe),e(Uoe,QYr),e(HA,WYr),e(Re,HYr),e(Re,UA),e(UA,a6e),e(a6e,UYr),e(UA,JYr),e(UA,Joe),e(Joe,YYr),e(UA,KYr),e(Re,ZYr),e(Re,JA),e(JA,n6e),e(n6e,eKr),e(JA,oKr),e(JA,Yoe),e(Yoe,rKr),e(JA,tKr),e(Re,aKr),e(Re,YA),e(YA,s6e),e(s6e,nKr),e(YA,sKr),e(YA,Koe),e(Koe,lKr),e(YA,iKr),e(Re,dKr),e(Re,KA),e(KA,l6e),e(l6e,cKr),e(KA,mKr),e(KA,Zoe),e(Zoe,fKr),e(KA,gKr),e(Re,hKr),e(Re,ZA),e(ZA,i6e),e(i6e,uKr),e(ZA,pKr),e(ZA,ere),e(ere,_Kr),e(ZA,bKr),e(Re,vKr),e(Re,e6),e(e6,d6e),e(d6e,FKr),e(e6,TKr),e(e6,ore),e(ore,MKr),e(e6,EKr),e(Re,CKr),e(Re,o6),e(o6,c6e),e(c6e,wKr),e(o6,AKr),e(o6,rre),e(rre,LKr),e(o6,yKr),e(Re,xKr),e(Re,r6),e(r6,m6e),e(m6e,$Kr),e(r6,kKr),e(r6,tre),e(tre,SKr),e(r6,RKr),e(Re,PKr),e(Re,t6),e(t6,f6e),e(f6e,BKr),e(t6,NKr),e(t6,are),e(are,IKr),e(t6,qKr),e(Ur,jKr),M(a6,Ur,null),b(m,dQe,_),b(m,pm,_),e(pm,n6),e(n6,g6e),M(Q$,g6e,null),e(pm,DKr),e(pm,h6e),e(h6e,GKr),b(m,cQe,_),b(m,Mr,_),M(W$,Mr,null),e(Mr,OKr),e(Mr,_m),e(_m,VKr),e(_m,nre),e(nre,XKr),e(_m,zKr),e(_m,sre),e(sre,QKr),e(_m,WKr),e(Mr,HKr),e(Mr,H$),e(H$,UKr),e(H$,u6e),e(u6e,JKr),e(H$,YKr),e(Mr,KKr),e(Mr,ea),M(U$,ea,null),e(ea,ZKr),e(ea,p6e),e(p6e,eZr),e(ea,oZr),e(ea,bm),e(bm,rZr),e(bm,_6e),e(_6e,tZr),e(bm,aZr),e(bm,lre),e(lre,nZr),e(bm,sZr),e(ea,lZr),M(s6,ea,null),e(Mr,iZr),e(Mr,Jr),M(J$,Jr,null),e(Jr,dZr),e(Jr,b6e),e(b6e,cZr),e(Jr,mZr),e(Jr,yn),e(yn,fZr),e(yn,v6e),e(v6e,gZr),e(yn,hZr),e(yn,F6e),e(F6e,uZr),e(yn,pZr),e(yn,T6e),e(T6e,_Zr),e(yn,bZr),e(Jr,vZr),e(Jr,Ve),e(Ve,l6),e(l6,M6e),e(M6e,FZr),e(l6,TZr),e(l6,ire),e(ire,MZr),e(l6,EZr),e(Ve,CZr),e(Ve,i6),e(i6,E6e),e(E6e,wZr),e(i6,AZr),e(i6,dre),e(dre,LZr),e(i6,yZr),e(Ve,xZr),e(Ve,d6),e(d6,C6e),e(C6e,$Zr),e(d6,kZr),e(d6,cre),e(cre,SZr),e(d6,RZr),e(Ve,PZr),e(Ve,c6),e(c6,w6e),e(w6e,BZr),e(c6,NZr),e(c6,mre),e(mre,IZr),e(c6,qZr),e(Ve,jZr),e(Ve,m6),e(m6,A6e),e(A6e,DZr),e(m6,GZr),e(m6,fre),e(fre,OZr),e(m6,VZr),e(Ve,XZr),e(Ve,f6),e(f6,L6e),e(L6e,zZr),e(f6,QZr),e(f6,gre),e(gre,WZr),e(f6,HZr),e(Ve,UZr),e(Ve,g6),e(g6,y6e),e(y6e,JZr),e(g6,YZr),e(g6,hre),e(hre,KZr),e(g6,ZZr),e(Ve,eet),e(Ve,h6),e(h6,x6e),e(x6e,oet),e(h6,ret),e(h6,ure),e(ure,tet),e(h6,aet),e(Jr,net),M(u6,Jr,null),b(m,mQe,_),b(m,vm,_),e(vm,p6),e(p6,$6e),M(Y$,$6e,null),e(vm,set),e(vm,k6e),e(k6e,iet),b(m,fQe,_),b(m,Er,_),M(K$,Er,null),e(Er,det),e(Er,Fm),e(Fm,cet),e(Fm,pre),e(pre,met),e(Fm,fet),e(Fm,_re),e(_re,get),e(Fm,het),e(Er,uet),e(Er,Z$),e(Z$,pet),e(Z$,S6e),e(S6e,_et),e(Z$,bet),e(Er,vet),e(Er,oa),M(ek,oa,null),e(oa,Fet),e(oa,R6e),e(R6e,Tet),e(oa,Met),e(oa,Tm),e(Tm,Eet),e(Tm,P6e),e(P6e,Cet),e(Tm,wet),e(Tm,bre),e(bre,Aet),e(Tm,Let),e(oa,yet),M(_6,oa,null),e(Er,xet),e(Er,Yr),M(ok,Yr,null),e(Yr,$et),e(Yr,B6e),e(B6e,ket),e(Yr,Set),e(Yr,xn),e(xn,Ret),e(xn,N6e),e(N6e,Pet),e(xn,Bet),e(xn,I6e),e(I6e,Net),e(xn,Iet),e(xn,q6e),e(q6e,qet),e(xn,jet),e(Yr,Det),e(Yr,Xe),e(Xe,b6),e(b6,j6e),e(j6e,Get),e(b6,Oet),e(b6,vre),e(vre,Vet),e(b6,Xet),e(Xe,zet),e(Xe,v6),e(v6,D6e),e(D6e,Qet),e(v6,Wet),e(v6,Fre),e(Fre,Het),e(v6,Uet),e(Xe,Jet),e(Xe,F6),e(F6,G6e),e(G6e,Yet),e(F6,Ket),e(F6,Tre),e(Tre,Zet),e(F6,eot),e(Xe,oot),e(Xe,T6),e(T6,O6e),e(O6e,rot),e(T6,tot),e(T6,Mre),e(Mre,aot),e(T6,not),e(Xe,sot),e(Xe,M6),e(M6,V6e),e(V6e,lot),e(M6,iot),e(M6,Ere),e(Ere,dot),e(M6,cot),e(Xe,mot),e(Xe,E6),e(E6,X6e),e(X6e,fot),e(E6,got),e(E6,Cre),e(Cre,hot),e(E6,uot),e(Xe,pot),e(Xe,C6),e(C6,z6e),e(z6e,_ot),e(C6,bot),e(C6,wre),e(wre,vot),e(C6,Fot),e(Xe,Tot),e(Xe,w6),e(w6,Q6e),e(Q6e,Mot),e(w6,Eot),e(w6,Are),e(Are,Cot),e(w6,wot),e(Yr,Aot),M(A6,Yr,null),b(m,gQe,_),b(m,Mm,_),e(Mm,L6),e(L6,W6e),M(rk,W6e,null),e(Mm,Lot),e(Mm,H6e),e(H6e,yot),b(m,hQe,_),b(m,Cr,_),M(tk,Cr,null),e(Cr,xot),e(Cr,Em),e(Em,$ot),e(Em,Lre),e(Lre,kot),e(Em,Sot),e(Em,yre),e(yre,Rot),e(Em,Pot),e(Cr,Bot),e(Cr,ak),e(ak,Not),e(ak,U6e),e(U6e,Iot),e(ak,qot),e(Cr,jot),e(Cr,ra),M(nk,ra,null),e(ra,Dot),e(ra,J6e),e(J6e,Got),e(ra,Oot),e(ra,Cm),e(Cm,Vot),e(Cm,Y6e),e(Y6e,Xot),e(Cm,zot),e(Cm,xre),e(xre,Qot),e(Cm,Wot),e(ra,Hot),M(y6,ra,null),e(Cr,Uot),e(Cr,Kr),M(sk,Kr,null),e(Kr,Jot),e(Kr,K6e),e(K6e,Yot),e(Kr,Kot),e(Kr,$n),e($n,Zot),e($n,Z6e),e(Z6e,ert),e($n,ort),e($n,e7e),e(e7e,rrt),e($n,trt),e($n,o7e),e(o7e,art),e($n,nrt),e(Kr,srt),e(Kr,r7e),e(r7e,x6),e(x6,t7e),e(t7e,lrt),e(x6,irt),e(x6,$re),e($re,drt),e(x6,crt),e(Kr,mrt),M($6,Kr,null),b(m,uQe,_),b(m,wm,_),e(wm,k6),e(k6,a7e),M(lk,a7e,null),e(wm,frt),e(wm,n7e),e(n7e,grt),b(m,pQe,_),b(m,wr,_),M(ik,wr,null),e(wr,hrt),e(wr,Am),e(Am,urt),e(Am,kre),e(kre,prt),e(Am,_rt),e(Am,Sre),e(Sre,brt),e(Am,vrt),e(wr,Frt),e(wr,dk),e(dk,Trt),e(dk,s7e),e(s7e,Mrt),e(dk,Ert),e(wr,Crt),e(wr,ta),M(ck,ta,null),e(ta,wrt),e(ta,l7e),e(l7e,Art),e(ta,Lrt),e(ta,Lm),e(Lm,yrt),e(Lm,i7e),e(i7e,xrt),e(Lm,$rt),e(Lm,Rre),e(Rre,krt),e(Lm,Srt),e(ta,Rrt),M(S6,ta,null),e(wr,Prt),e(wr,Zr),M(mk,Zr,null),e(Zr,Brt),e(Zr,d7e),e(d7e,Nrt),e(Zr,Irt),e(Zr,kn),e(kn,qrt),e(kn,c7e),e(c7e,jrt),e(kn,Drt),e(kn,m7e),e(m7e,Grt),e(kn,Ort),e(kn,f7e),e(f7e,Vrt),e(kn,Xrt),e(Zr,zrt),e(Zr,fk),e(fk,R6),e(R6,g7e),e(g7e,Qrt),e(R6,Wrt),e(R6,Pre),e(Pre,Hrt),e(R6,Urt),e(fk,Jrt),e(fk,P6),e(P6,h7e),e(h7e,Yrt),e(P6,Krt),e(P6,Bre),e(Bre,Zrt),e(P6,ett),e(Zr,ott),M(B6,Zr,null),b(m,_Qe,_),b(m,ym,_),e(ym,N6),e(N6,u7e),M(gk,u7e,null),e(ym,rtt),e(ym,p7e),e(p7e,ttt),b(m,bQe,_),b(m,Ar,_),M(hk,Ar,null),e(Ar,att),e(Ar,xm),e(xm,ntt),e(xm,Nre),e(Nre,stt),e(xm,ltt),e(xm,Ire),e(Ire,itt),e(xm,dtt),e(Ar,ctt),e(Ar,uk),e(uk,mtt),e(uk,_7e),e(_7e,ftt),e(uk,gtt),e(Ar,htt),e(Ar,aa),M(pk,aa,null),e(aa,utt),e(aa,b7e),e(b7e,ptt),e(aa,_tt),e(aa,$m),e($m,btt),e($m,v7e),e(v7e,vtt),e($m,Ftt),e($m,qre),e(qre,Ttt),e($m,Mtt),e(aa,Ett),M(I6,aa,null),e(Ar,Ctt),e(Ar,et),M(_k,et,null),e(et,wtt),e(et,F7e),e(F7e,Att),e(et,Ltt),e(et,Sn),e(Sn,ytt),e(Sn,T7e),e(T7e,xtt),e(Sn,$tt),e(Sn,M7e),e(M7e,ktt),e(Sn,Stt),e(Sn,E7e),e(E7e,Rtt),e(Sn,Ptt),e(et,Btt),e(et,C7e),e(C7e,q6),e(q6,w7e),e(w7e,Ntt),e(q6,Itt),e(q6,jre),e(jre,qtt),e(q6,jtt),e(et,Dtt),M(j6,et,null),vQe=!0},p(m,[_]){const bk={};_&2&&(bk.$$scope={dirty:_,ctx:m}),jm.$set(bk);const A7e={};_&2&&(A7e.$$scope={dirty:_,ctx:m}),Kg.$set(A7e);const L7e={};_&2&&(L7e.$$scope={dirty:_,ctx:m}),Ph.$set(L7e);const y7e={};_&2&&(y7e.$$scope={dirty:_,ctx:m}),_u.$set(y7e);const vk={};_&2&&(vk.$$scope={dirty:_,ctx:m}),bu.$set(vk);const x7e={};_&2&&(x7e.$$scope={dirty:_,ctx:m}),ju.$set(x7e);const Rn={};_&2&&(Rn.$$scope={dirty:_,ctx:m}),Du.$set(Rn);const $7e={};_&2&&($7e.$$scope={dirty:_,ctx:m}),Vu.$set($7e);const k7e={};_&2&&(k7e.$$scope={dirty:_,ctx:m}),H_.$set(k7e);const S7e={};_&2&&(S7e.$$scope={dirty:_,ctx:m}),J_.$set(S7e);const Fk={};_&2&&(Fk.$$scope={dirty:_,ctx:m}),V2.$set(Fk);const R7e={};_&2&&(R7e.$$scope={dirty:_,ctx:m}),z2.$set(R7e);const Tk={};_&2&&(Tk.$$scope={dirty:_,ctx:m}),Rb.$set(Tk);const P7e={};_&2&&(P7e.$$scope={dirty:_,ctx:m}),Bb.$set(P7e);const Mk={};_&2&&(Mk.$$scope={dirty:_,ctx:m}),Tv.$set(Mk);const B7e={};_&2&&(B7e.$$scope={dirty:_,ctx:m}),Ev.$set(B7e);const N7e={};_&2&&(N7e.$$scope={dirty:_,ctx:m}),Xv.$set(N7e);const I7e={};_&2&&(I7e.$$scope={dirty:_,ctx:m}),Qv.$set(I7e);const km={};_&2&&(km.$$scope={dirty:_,ctx:m}),z1.$set(km);const q7e={};_&2&&(q7e.$$scope={dirty:_,ctx:m}),W1.$set(q7e);const j7e={};_&2&&(j7e.$$scope={dirty:_,ctx:m}),wF.$set(j7e);const D7e={};_&2&&(D7e.$$scope={dirty:_,ctx:m}),LF.$set(D7e);const Ek={};_&2&&(Ek.$$scope={dirty:_,ctx:m}),BF.$set(Ek);const G7e={};_&2&&(G7e.$$scope={dirty:_,ctx:m}),IF.$set(G7e);const O7e={};_&2&&(O7e.$$scope={dirty:_,ctx:m}),TT.$set(O7e);const V7e={};_&2&&(V7e.$$scope={dirty:_,ctx:m}),ET.$set(V7e);const nt={};_&2&&(nt.$$scope={dirty:_,ctx:m}),gM.$set(nt);const Ck={};_&2&&(Ck.$$scope={dirty:_,ctx:m}),uM.$set(Ck);const X7e={};_&2&&(X7e.$$scope={dirty:_,ctx:m}),bM.$set(X7e);const wk={};_&2&&(wk.$$scope={dirty:_,ctx:m}),FM.$set(wk);const z7e={};_&2&&(z7e.$$scope={dirty:_,ctx:m}),BM.$set(z7e);const st={};_&2&&(st.$$scope={dirty:_,ctx:m}),IM.$set(st);const Q7e={};_&2&&(Q7e.$$scope={dirty:_,ctx:m}),DM.$set(Q7e);const Sm={};_&2&&(Sm.$$scope={dirty:_,ctx:m}),OM.$set(Sm);const W7e={};_&2&&(W7e.$$scope={dirty:_,ctx:m}),zM.$set(W7e);const H7e={};_&2&&(H7e.$$scope={dirty:_,ctx:m}),WM.$set(H7e);const L={};_&2&&(L.$$scope={dirty:_,ctx:m}),a4.$set(L);const D6={};_&2&&(D6.$$scope={dirty:_,ctx:m}),s4.$set(D6);const U7e={};_&2&&(U7e.$$scope={dirty:_,ctx:m}),g4.$set(U7e);const J7e={};_&2&&(J7e.$$scope={dirty:_,ctx:m}),u4.$set(J7e);const G6={};_&2&&(G6.$$scope={dirty:_,ctx:m}),L4.$set(G6);const Y7e={};_&2&&(Y7e.$$scope={dirty:_,ctx:m}),x4.$set(Y7e);const K7e={};_&2&&(K7e.$$scope={dirty:_,ctx:m}),R4.$set(K7e);const O6={};_&2&&(O6.$$scope={dirty:_,ctx:m}),B4.$set(O6);const Z7e={};_&2&&(Z7e.$$scope={dirty:_,ctx:m}),O4.$set(Z7e);const eLe={};_&2&&(eLe.$$scope={dirty:_,ctx:m}),X4.$set(eLe);const V6={};_&2&&(V6.$$scope={dirty:_,ctx:m}),U4.$set(V6);const oLe={};_&2&&(oLe.$$scope={dirty:_,ctx:m}),Y4.$set(oLe);const rLe={};_&2&&(rLe.$$scope={dirty:_,ctx:m}),oE.$set(rLe);const X6={};_&2&&(X6.$$scope={dirty:_,ctx:m}),tE.$set(X6);const tLe={};_&2&&(tLe.$$scope={dirty:_,ctx:m}),sE.$set(tLe);const aLe={};_&2&&(aLe.$$scope={dirty:_,ctx:m}),iE.$set(aLe);const z6={};_&2&&(z6.$$scope={dirty:_,ctx:m}),uE.$set(z6);const nLe={};_&2&&(nLe.$$scope={dirty:_,ctx:m}),_E.$set(nLe);const sLe={};_&2&&(sLe.$$scope={dirty:_,ctx:m}),FE.$set(sLe);const Q6={};_&2&&(Q6.$$scope={dirty:_,ctx:m}),ME.$set(Q6);const lLe={};_&2&&(lLe.$$scope={dirty:_,ctx:m}),bC.$set(lLe);const iLe={};_&2&&(iLe.$$scope={dirty:_,ctx:m}),FC.$set(iLe);const W6={};_&2&&(W6.$$scope={dirty:_,ctx:m}),XC.$set(W6);const dLe={};_&2&&(dLe.$$scope={dirty:_,ctx:m}),QC.$set(dLe);const cLe={};_&2&&(cLe.$$scope={dirty:_,ctx:m}),s3.$set(cLe);const H6={};_&2&&(H6.$$scope={dirty:_,ctx:m}),i3.$set(H6);const mLe={};_&2&&(mLe.$$scope={dirty:_,ctx:m}),u3.$set(mLe);const fLe={};_&2&&(fLe.$$scope={dirty:_,ctx:m}),_3.$set(fLe);const U6={};_&2&&(U6.$$scope={dirty:_,ctx:m}),q3.$set(U6);const gLe={};_&2&&(gLe.$$scope={dirty:_,ctx:m}),D3.$set(gLe);const hLe={};_&2&&(hLe.$$scope={dirty:_,ctx:m}),Y3.$set(hLe);const J6={};_&2&&(J6.$$scope={dirty:_,ctx:m}),Z3.$set(J6);const uLe={};_&2&&(uLe.$$scope={dirty:_,ctx:m}),A5.$set(uLe);const pLe={};_&2&&(pLe.$$scope={dirty:_,ctx:m}),y5.$set(pLe);const Y6={};_&2&&(Y6.$$scope={dirty:_,ctx:m}),Q5.$set(Y6);const _Le={};_&2&&(_Le.$$scope={dirty:_,ctx:m}),H5.$set(_Le);const bLe={};_&2&&(bLe.$$scope={dirty:_,ctx:m}),Y5.$set(bLe);const K6={};_&2&&(K6.$$scope={dirty:_,ctx:m}),Z5.$set(K6);const vLe={};_&2&&(vLe.$$scope={dirty:_,ctx:m}),o0.$set(vLe);const FLe={};_&2&&(FLe.$$scope={dirty:_,ctx:m}),t0.$set(FLe);const Z6={};_&2&&(Z6.$$scope={dirty:_,ctx:m}),C0.$set(Z6);const TLe={};_&2&&(TLe.$$scope={dirty:_,ctx:m}),A0.$set(TLe);const MLe={};_&2&&(MLe.$$scope={dirty:_,ctx:m}),W0.$set(MLe);const e7={};_&2&&(e7.$$scope={dirty:_,ctx:m}),U0.$set(e7);const ELe={};_&2&&(ELe.$$scope={dirty:_,ctx:m}),Y0.$set(ELe);const CLe={};_&2&&(CLe.$$scope={dirty:_,ctx:m}),Z0.$set(CLe);const o7={};_&2&&(o7.$$scope={dirty:_,ctx:m}),ow.$set(o7);const wLe={};_&2&&(wLe.$$scope={dirty:_,ctx:m}),tw.$set(wLe);const ALe={};_&2&&(ALe.$$scope={dirty:_,ctx:m}),kw.$set(ALe);const r7={};_&2&&(r7.$$scope={dirty:_,ctx:m}),Rw.$set(r7);const LLe={};_&2&&(LLe.$$scope={dirty:_,ctx:m}),Xw.$set(LLe);const yLe={};_&2&&(yLe.$$scope={dirty:_,ctx:m}),Qw.$set(yLe);const t7={};_&2&&(t7.$$scope={dirty:_,ctx:m}),sA.$set(t7);const xLe={};_&2&&(xLe.$$scope={dirty:_,ctx:m}),iA.$set(xLe);const $Le={};_&2&&($Le.$$scope={dirty:_,ctx:m}),vA.$set($Le);const a7={};_&2&&(a7.$$scope={dirty:_,ctx:m}),TA.$set(a7);const kLe={};_&2&&(kLe.$$scope={dirty:_,ctx:m}),SA.$set(kLe);const SLe={};_&2&&(SLe.$$scope={dirty:_,ctx:m}),PA.$set(SLe);const n7={};_&2&&(n7.$$scope={dirty:_,ctx:m}),zA.$set(n7);const RLe={};_&2&&(RLe.$$scope={dirty:_,ctx:m}),WA.$set(RLe);const PLe={};_&2&&(PLe.$$scope={dirty:_,ctx:m}),a6.$set(PLe);const s7={};_&2&&(s7.$$scope={dirty:_,ctx:m}),s6.$set(s7);const BLe={};_&2&&(BLe.$$scope={dirty:_,ctx:m}),u6.$set(BLe);const NLe={};_&2&&(NLe.$$scope={dirty:_,ctx:m}),_6.$set(NLe);const l7={};_&2&&(l7.$$scope={dirty:_,ctx:m}),A6.$set(l7);const ILe={};_&2&&(ILe.$$scope={dirty:_,ctx:m}),y6.$set(ILe);const qLe={};_&2&&(qLe.$$scope={dirty:_,ctx:m}),$6.$set(qLe);const i7={};_&2&&(i7.$$scope={dirty:_,ctx:m}),S6.$set(i7);const jLe={};_&2&&(jLe.$$scope={dirty:_,ctx:m}),B6.$set(jLe);const DLe={};_&2&&(DLe.$$scope={dirty:_,ctx:m}),I6.$set(DLe);const d7={};_&2&&(d7.$$scope={dirty:_,ctx:m}),j6.$set(d7)},i(m){vQe||(E(d.$$.fragment,m),E(Sa.$$.fragment,m),E(iy.$$.fragment,m),E(dy.$$.fragment,m),E(jm.$$.fragment,m),E(cy.$$.fragment,m),E(my.$$.fragment,m),E(hy.$$.fragment,m),E(Kg.$$.fragment,m),E(uy.$$.fragment,m),E(py.$$.fragment,m),E(_y.$$.fragment,m),E(Fy.$$.fragment,m),E(Ph.$$.fragment,m),E(Ty.$$.fragment,m),E(My.$$.fragment,m),E(Ey.$$.fragment,m),E(Ay.$$.fragment,m),E(_u.$$.fragment,m),E(bu.$$.fragment,m),E(Ly.$$.fragment,m),E(yy.$$.fragment,m),E(xy.$$.fragment,m),E(Sy.$$.fragment,m),E(ju.$$.fragment,m),E(Du.$$.fragment,m),E(Ry.$$.fragment,m),E(Py.$$.fragment,m),E(By.$$.fragment,m),E(Iy.$$.fragment,m),E(Vu.$$.fragment,m),E(qy.$$.fragment,m),E(H_.$$.fragment,m),E(jy.$$.fragment,m),E(Dy.$$.fragment,m),E(Oy.$$.fragment,m),E(J_.$$.fragment,m),E(Vy.$$.fragment,m),E(V2.$$.fragment,m),E(Xy.$$.fragment,m),E(zy.$$.fragment,m),E(Wy.$$.fragment,m),E(z2.$$.fragment,m),E(Hy.$$.fragment,m),E(Rb.$$.fragment,m),E(Uy.$$.fragment,m),E(Jy.$$.fragment,m),E(Ky.$$.fragment,m),E(Bb.$$.fragment,m),E(Zy.$$.fragment,m),E(Tv.$$.fragment,m),E(e8.$$.fragment,m),E(o8.$$.fragment,m),E(t8.$$.fragment,m),E(Ev.$$.fragment,m),E(a8.$$.fragment,m),E(Xv.$$.fragment,m),E(n8.$$.fragment,m),E(s8.$$.fragment,m),E(i8.$$.fragment,m),E(Qv.$$.fragment,m),E(d8.$$.fragment,m),E(z1.$$.fragment,m),E(c8.$$.fragment,m),E(m8.$$.fragment,m),E(g8.$$.fragment,m),E(W1.$$.fragment,m),E(h8.$$.fragment,m),E(wF.$$.fragment,m),E(u8.$$.fragment,m),E(p8.$$.fragment,m),E(b8.$$.fragment,m),E(LF.$$.fragment,m),E(v8.$$.fragment,m),E(BF.$$.fragment,m),E(F8.$$.fragment,m),E(T8.$$.fragment,m),E(E8.$$.fragment,m),E(IF.$$.fragment,m),E(C8.$$.fragment,m),E(TT.$$.fragment,m),E(w8.$$.fragment,m),E(A8.$$.fragment,m),E(y8.$$.fragment,m),E(ET.$$.fragment,m),E(x8.$$.fragment,m),E(gM.$$.fragment,m),E($8.$$.fragment,m),E(k8.$$.fragment,m),E(R8.$$.fragment,m),E(uM.$$.fragment,m),E(P8.$$.fragment,m),E(bM.$$.fragment,m),E(B8.$$.fragment,m),E(N8.$$.fragment,m),E(q8.$$.fragment,m),E(FM.$$.fragment,m),E(j8.$$.fragment,m),E(BM.$$.fragment,m),E(D8.$$.fragment,m),E(G8.$$.fragment,m),E(V8.$$.fragment,m),E(IM.$$.fragment,m),E(X8.$$.fragment,m),E(DM.$$.fragment,m),E(z8.$$.fragment,m),E(Q8.$$.fragment,m),E(H8.$$.fragment,m),E(OM.$$.fragment,m),E(U8.$$.fragment,m),E(zM.$$.fragment,m),E(J8.$$.fragment,m),E(Y8.$$.fragment,m),E(Z8.$$.fragment,m),E(WM.$$.fragment,m),E(e9.$$.fragment,m),E(a4.$$.fragment,m),E(o9.$$.fragment,m),E(r9.$$.fragment,m),E(a9.$$.fragment,m),E(s4.$$.fragment,m),E(n9.$$.fragment,m),E(g4.$$.fragment,m),E(s9.$$.fragment,m),E(l9.$$.fragment,m),E(d9.$$.fragment,m),E(u4.$$.fragment,m),E(c9.$$.fragment,m),E(L4.$$.fragment,m),E(m9.$$.fragment,m),E(f9.$$.fragment,m),E(h9.$$.fragment,m),E(x4.$$.fragment,m),E(u9.$$.fragment,m),E(R4.$$.fragment,m),E(_9.$$.fragment,m),E(b9.$$.fragment,m),E(F9.$$.fragment,m),E(B4.$$.fragment,m),E(T9.$$.fragment,m),E(O4.$$.fragment,m),E(M9.$$.fragment,m),E(E9.$$.fragment,m),E(w9.$$.fragment,m),E(X4.$$.fragment,m),E(A9.$$.fragment,m),E(U4.$$.fragment,m),E(L9.$$.fragment,m),E(y9.$$.fragment,m),E($9.$$.fragment,m),E(Y4.$$.fragment,m),E(k9.$$.fragment,m),E(oE.$$.fragment,m),E(R9.$$.fragment,m),E(P9.$$.fragment,m),E(N9.$$.fragment,m),E(tE.$$.fragment,m),E(I9.$$.fragment,m),E(sE.$$.fragment,m),E(q9.$$.fragment,m),E(j9.$$.fragment,m),E(G9.$$.fragment,m),E(iE.$$.fragment,m),E(O9.$$.fragment,m),E(uE.$$.fragment,m),E(V9.$$.fragment,m),E(X9.$$.fragment,m),E(Q9.$$.fragment,m),E(_E.$$.fragment,m),E(W9.$$.fragment,m),E(FE.$$.fragment,m),E(H9.$$.fragment,m),E(U9.$$.fragment,m),E(Y9.$$.fragment,m),E(ME.$$.fragment,m),E(K9.$$.fragment,m),E(bC.$$.fragment,m),E(Z9.$$.fragment,m),E(ex.$$.fragment,m),E(rx.$$.fragment,m),E(FC.$$.fragment,m),E(tx.$$.fragment,m),E(XC.$$.fragment,m),E(ax.$$.fragment,m),E(nx.$$.fragment,m),E(lx.$$.fragment,m),E(QC.$$.fragment,m),E(ix.$$.fragment,m),E(s3.$$.fragment,m),E(dx.$$.fragment,m),E(cx.$$.fragment,m),E(fx.$$.fragment,m),E(i3.$$.fragment,m),E(gx.$$.fragment,m),E(u3.$$.fragment,m),E(hx.$$.fragment,m),E(ux.$$.fragment,m),E(_x.$$.fragment,m),E(_3.$$.fragment,m),E(bx.$$.fragment,m),E(q3.$$.fragment,m),E(vx.$$.fragment,m),E(Fx.$$.fragment,m),E(Mx.$$.fragment,m),E(D3.$$.fragment,m),E(Ex.$$.fragment,m),E(Y3.$$.fragment,m),E(Cx.$$.fragment,m),E(wx.$$.fragment,m),E(Lx.$$.fragment,m),E(Z3.$$.fragment,m),E(yx.$$.fragment,m),E(A5.$$.fragment,m),E(xx.$$.fragment,m),E($x.$$.fragment,m),E(Sx.$$.fragment,m),E(y5.$$.fragment,m),E(Rx.$$.fragment,m),E(Q5.$$.fragment,m),E(Px.$$.fragment,m),E(Bx.$$.fragment,m),E(Ix.$$.fragment,m),E(H5.$$.fragment,m),E(qx.$$.fragment,m),E(Y5.$$.fragment,m),E(Dx.$$.fragment,m),E(Gx.$$.fragment,m),E(Vx.$$.fragment,m),E(Z5.$$.fragment,m),E(Xx.$$.fragment,m),E(o0.$$.fragment,m),E(zx.$$.fragment,m),E(Qx.$$.fragment,m),E(Hx.$$.fragment,m),E(t0.$$.fragment,m),E(Ux.$$.fragment,m),E(C0.$$.fragment,m),E(Jx.$$.fragment,m),E(Yx.$$.fragment,m),E(Zx.$$.fragment,m),E(A0.$$.fragment,m),E(e$.$$.fragment,m),E(W0.$$.fragment,m),E(o$.$$.fragment,m),E(r$.$$.fragment,m),E(a$.$$.fragment,m),E(U0.$$.fragment,m),E(n$.$$.fragment,m),E(Y0.$$.fragment,m),E(s$.$$.fragment,m),E(l$.$$.fragment,m),E(d$.$$.fragment,m),E(Z0.$$.fragment,m),E(c$.$$.fragment,m),E(ow.$$.fragment,m),E(m$.$$.fragment,m),E(f$.$$.fragment,m),E(h$.$$.fragment,m),E(tw.$$.fragment,m),E(u$.$$.fragment,m),E(kw.$$.fragment,m),E(p$.$$.fragment,m),E(_$.$$.fragment,m),E(v$.$$.fragment,m),E(Rw.$$.fragment,m),E(F$.$$.fragment,m),E(Xw.$$.fragment,m),E(T$.$$.fragment,m),E(M$.$$.fragment,m),E(C$.$$.fragment,m),E(Qw.$$.fragment,m),E(w$.$$.fragment,m),E(sA.$$.fragment,m),E(A$.$$.fragment,m),E(L$.$$.fragment,m),E(x$.$$.fragment,m),E(iA.$$.fragment,m),E($$.$$.fragment,m),E(vA.$$.fragment,m),E(k$.$$.fragment,m),E(S$.$$.fragment,m),E(P$.$$.fragment,m),E(TA.$$.fragment,m),E(B$.$$.fragment,m),E(SA.$$.fragment,m),E(N$.$$.fragment,m),E(I$.$$.fragment,m),E(j$.$$.fragment,m),E(PA.$$.fragment,m),E(D$.$$.fragment,m),E(zA.$$.fragment,m),E(G$.$$.fragment,m),E(O$.$$.fragment,m),E(X$.$$.fragment,m),E(WA.$$.fragment,m),E(z$.$$.fragment,m),E(a6.$$.fragment,m),E(Q$.$$.fragment,m),E(W$.$$.fragment,m),E(U$.$$.fragment,m),E(s6.$$.fragment,m),E(J$.$$.fragment,m),E(u6.$$.fragment,m),E(Y$.$$.fragment,m),E(K$.$$.fragment,m),E(ek.$$.fragment,m),E(_6.$$.fragment,m),E(ok.$$.fragment,m),E(A6.$$.fragment,m),E(rk.$$.fragment,m),E(tk.$$.fragment,m),E(nk.$$.fragment,m),E(y6.$$.fragment,m),E(sk.$$.fragment,m),E($6.$$.fragment,m),E(lk.$$.fragment,m),E(ik.$$.fragment,m),E(ck.$$.fragment,m),E(S6.$$.fragment,m),E(mk.$$.fragment,m),E(B6.$$.fragment,m),E(gk.$$.fragment,m),E(hk.$$.fragment,m),E(pk.$$.fragment,m),E(I6.$$.fragment,m),E(_k.$$.fragment,m),E(j6.$$.fragment,m),vQe=!0)},o(m){C(d.$$.fragment,m),C(Sa.$$.fragment,m),C(iy.$$.fragment,m),C(dy.$$.fragment,m),C(jm.$$.fragment,m),C(cy.$$.fragment,m),C(my.$$.fragment,m),C(hy.$$.fragment,m),C(Kg.$$.fragment,m),C(uy.$$.fragment,m),C(py.$$.fragment,m),C(_y.$$.fragment,m),C(Fy.$$.fragment,m),C(Ph.$$.fragment,m),C(Ty.$$.fragment,m),C(My.$$.fragment,m),C(Ey.$$.fragment,m),C(Ay.$$.fragment,m),C(_u.$$.fragment,m),C(bu.$$.fragment,m),C(Ly.$$.fragment,m),C(yy.$$.fragment,m),C(xy.$$.fragment,m),C(Sy.$$.fragment,m),C(ju.$$.fragment,m),C(Du.$$.fragment,m),C(Ry.$$.fragment,m),C(Py.$$.fragment,m),C(By.$$.fragment,m),C(Iy.$$.fragment,m),C(Vu.$$.fragment,m),C(qy.$$.fragment,m),C(H_.$$.fragment,m),C(jy.$$.fragment,m),C(Dy.$$.fragment,m),C(Oy.$$.fragment,m),C(J_.$$.fragment,m),C(Vy.$$.fragment,m),C(V2.$$.fragment,m),C(Xy.$$.fragment,m),C(zy.$$.fragment,m),C(Wy.$$.fragment,m),C(z2.$$.fragment,m),C(Hy.$$.fragment,m),C(Rb.$$.fragment,m),C(Uy.$$.fragment,m),C(Jy.$$.fragment,m),C(Ky.$$.fragment,m),C(Bb.$$.fragment,m),C(Zy.$$.fragment,m),C(Tv.$$.fragment,m),C(e8.$$.fragment,m),C(o8.$$.fragment,m),C(t8.$$.fragment,m),C(Ev.$$.fragment,m),C(a8.$$.fragment,m),C(Xv.$$.fragment,m),C(n8.$$.fragment,m),C(s8.$$.fragment,m),C(i8.$$.fragment,m),C(Qv.$$.fragment,m),C(d8.$$.fragment,m),C(z1.$$.fragment,m),C(c8.$$.fragment,m),C(m8.$$.fragment,m),C(g8.$$.fragment,m),C(W1.$$.fragment,m),C(h8.$$.fragment,m),C(wF.$$.fragment,m),C(u8.$$.fragment,m),C(p8.$$.fragment,m),C(b8.$$.fragment,m),C(LF.$$.fragment,m),C(v8.$$.fragment,m),C(BF.$$.fragment,m),C(F8.$$.fragment,m),C(T8.$$.fragment,m),C(E8.$$.fragment,m),C(IF.$$.fragment,m),C(C8.$$.fragment,m),C(TT.$$.fragment,m),C(w8.$$.fragment,m),C(A8.$$.fragment,m),C(y8.$$.fragment,m),C(ET.$$.fragment,m),C(x8.$$.fragment,m),C(gM.$$.fragment,m),C($8.$$.fragment,m),C(k8.$$.fragment,m),C(R8.$$.fragment,m),C(uM.$$.fragment,m),C(P8.$$.fragment,m),C(bM.$$.fragment,m),C(B8.$$.fragment,m),C(N8.$$.fragment,m),C(q8.$$.fragment,m),C(FM.$$.fragment,m),C(j8.$$.fragment,m),C(BM.$$.fragment,m),C(D8.$$.fragment,m),C(G8.$$.fragment,m),C(V8.$$.fragment,m),C(IM.$$.fragment,m),C(X8.$$.fragment,m),C(DM.$$.fragment,m),C(z8.$$.fragment,m),C(Q8.$$.fragment,m),C(H8.$$.fragment,m),C(OM.$$.fragment,m),C(U8.$$.fragment,m),C(zM.$$.fragment,m),C(J8.$$.fragment,m),C(Y8.$$.fragment,m),C(Z8.$$.fragment,m),C(WM.$$.fragment,m),C(e9.$$.fragment,m),C(a4.$$.fragment,m),C(o9.$$.fragment,m),C(r9.$$.fragment,m),C(a9.$$.fragment,m),C(s4.$$.fragment,m),C(n9.$$.fragment,m),C(g4.$$.fragment,m),C(s9.$$.fragment,m),C(l9.$$.fragment,m),C(d9.$$.fragment,m),C(u4.$$.fragment,m),C(c9.$$.fragment,m),C(L4.$$.fragment,m),C(m9.$$.fragment,m),C(f9.$$.fragment,m),C(h9.$$.fragment,m),C(x4.$$.fragment,m),C(u9.$$.fragment,m),C(R4.$$.fragment,m),C(_9.$$.fragment,m),C(b9.$$.fragment,m),C(F9.$$.fragment,m),C(B4.$$.fragment,m),C(T9.$$.fragment,m),C(O4.$$.fragment,m),C(M9.$$.fragment,m),C(E9.$$.fragment,m),C(w9.$$.fragment,m),C(X4.$$.fragment,m),C(A9.$$.fragment,m),C(U4.$$.fragment,m),C(L9.$$.fragment,m),C(y9.$$.fragment,m),C($9.$$.fragment,m),C(Y4.$$.fragment,m),C(k9.$$.fragment,m),C(oE.$$.fragment,m),C(R9.$$.fragment,m),C(P9.$$.fragment,m),C(N9.$$.fragment,m),C(tE.$$.fragment,m),C(I9.$$.fragment,m),C(sE.$$.fragment,m),C(q9.$$.fragment,m),C(j9.$$.fragment,m),C(G9.$$.fragment,m),C(iE.$$.fragment,m),C(O9.$$.fragment,m),C(uE.$$.fragment,m),C(V9.$$.fragment,m),C(X9.$$.fragment,m),C(Q9.$$.fragment,m),C(_E.$$.fragment,m),C(W9.$$.fragment,m),C(FE.$$.fragment,m),C(H9.$$.fragment,m),C(U9.$$.fragment,m),C(Y9.$$.fragment,m),C(ME.$$.fragment,m),C(K9.$$.fragment,m),C(bC.$$.fragment,m),C(Z9.$$.fragment,m),C(ex.$$.fragment,m),C(rx.$$.fragment,m),C(FC.$$.fragment,m),C(tx.$$.fragment,m),C(XC.$$.fragment,m),C(ax.$$.fragment,m),C(nx.$$.fragment,m),C(lx.$$.fragment,m),C(QC.$$.fragment,m),C(ix.$$.fragment,m),C(s3.$$.fragment,m),C(dx.$$.fragment,m),C(cx.$$.fragment,m),C(fx.$$.fragment,m),C(i3.$$.fragment,m),C(gx.$$.fragment,m),C(u3.$$.fragment,m),C(hx.$$.fragment,m),C(ux.$$.fragment,m),C(_x.$$.fragment,m),C(_3.$$.fragment,m),C(bx.$$.fragment,m),C(q3.$$.fragment,m),C(vx.$$.fragment,m),C(Fx.$$.fragment,m),C(Mx.$$.fragment,m),C(D3.$$.fragment,m),C(Ex.$$.fragment,m),C(Y3.$$.fragment,m),C(Cx.$$.fragment,m),C(wx.$$.fragment,m),C(Lx.$$.fragment,m),C(Z3.$$.fragment,m),C(yx.$$.fragment,m),C(A5.$$.fragment,m),C(xx.$$.fragment,m),C($x.$$.fragment,m),C(Sx.$$.fragment,m),C(y5.$$.fragment,m),C(Rx.$$.fragment,m),C(Q5.$$.fragment,m),C(Px.$$.fragment,m),C(Bx.$$.fragment,m),C(Ix.$$.fragment,m),C(H5.$$.fragment,m),C(qx.$$.fragment,m),C(Y5.$$.fragment,m),C(Dx.$$.fragment,m),C(Gx.$$.fragment,m),C(Vx.$$.fragment,m),C(Z5.$$.fragment,m),C(Xx.$$.fragment,m),C(o0.$$.fragment,m),C(zx.$$.fragment,m),C(Qx.$$.fragment,m),C(Hx.$$.fragment,m),C(t0.$$.fragment,m),C(Ux.$$.fragment,m),C(C0.$$.fragment,m),C(Jx.$$.fragment,m),C(Yx.$$.fragment,m),C(Zx.$$.fragment,m),C(A0.$$.fragment,m),C(e$.$$.fragment,m),C(W0.$$.fragment,m),C(o$.$$.fragment,m),C(r$.$$.fragment,m),C(a$.$$.fragment,m),C(U0.$$.fragment,m),C(n$.$$.fragment,m),C(Y0.$$.fragment,m),C(s$.$$.fragment,m),C(l$.$$.fragment,m),C(d$.$$.fragment,m),C(Z0.$$.fragment,m),C(c$.$$.fragment,m),C(ow.$$.fragment,m),C(m$.$$.fragment,m),C(f$.$$.fragment,m),C(h$.$$.fragment,m),C(tw.$$.fragment,m),C(u$.$$.fragment,m),C(kw.$$.fragment,m),C(p$.$$.fragment,m),C(_$.$$.fragment,m),C(v$.$$.fragment,m),C(Rw.$$.fragment,m),C(F$.$$.fragment,m),C(Xw.$$.fragment,m),C(T$.$$.fragment,m),C(M$.$$.fragment,m),C(C$.$$.fragment,m),C(Qw.$$.fragment,m),C(w$.$$.fragment,m),C(sA.$$.fragment,m),C(A$.$$.fragment,m),C(L$.$$.fragment,m),C(x$.$$.fragment,m),C(iA.$$.fragment,m),C($$.$$.fragment,m),C(vA.$$.fragment,m),C(k$.$$.fragment,m),C(S$.$$.fragment,m),C(P$.$$.fragment,m),C(TA.$$.fragment,m),C(B$.$$.fragment,m),C(SA.$$.fragment,m),C(N$.$$.fragment,m),C(I$.$$.fragment,m),C(j$.$$.fragment,m),C(PA.$$.fragment,m),C(D$.$$.fragment,m),C(zA.$$.fragment,m),C(G$.$$.fragment,m),C(O$.$$.fragment,m),C(X$.$$.fragment,m),C(WA.$$.fragment,m),C(z$.$$.fragment,m),C(a6.$$.fragment,m),C(Q$.$$.fragment,m),C(W$.$$.fragment,m),C(U$.$$.fragment,m),C(s6.$$.fragment,m),C(J$.$$.fragment,m),C(u6.$$.fragment,m),C(Y$.$$.fragment,m),C(K$.$$.fragment,m),C(ek.$$.fragment,m),C(_6.$$.fragment,m),C(ok.$$.fragment,m),C(A6.$$.fragment,m),C(rk.$$.fragment,m),C(tk.$$.fragment,m),C(nk.$$.fragment,m),C(y6.$$.fragment,m),C(sk.$$.fragment,m),C($6.$$.fragment,m),C(lk.$$.fragment,m),C(ik.$$.fragment,m),C(ck.$$.fragment,m),C(S6.$$.fragment,m),C(mk.$$.fragment,m),C(B6.$$.fragment,m),C(gk.$$.fragment,m),C(hk.$$.fragment,m),C(pk.$$.fragment,m),C(I6.$$.fragment,m),C(_k.$$.fragment,m),C(j6.$$.fragment,m),vQe=!1},d(m){t(g),m&&t(v),m&&t(u),w(d),m&&t(Pm),m&&t(lt),m&&t(Oe),m&&t(We),m&&t(Nm),w(Sa,m),m&&t(He),m&&t(Ae),m&&t(wo),m&&t(Ra),m&&t(hXe),m&&t(Bi),w(iy),m&&t(uXe),m&&t(qn),m&&t(pXe),w(dy,m),m&&t(_Xe),m&&t(zS),m&&t(bXe),w(jm,m),m&&t(vXe),m&&t(Ni),w(cy),m&&t(FXe),m&&t(Ao),w(my),w(hy),w(Kg),w(uy),m&&t(TXe),m&&t(qi),w(py),m&&t(MXe),m&&t(Lo),w(_y),w(Fy),w(Ph),w(Ty),m&&t(EXe),m&&t(ji),w(My),m&&t(CXe),m&&t(yo),w(Ey),w(Ay),w(_u),w(bu),w(Ly),m&&t(wXe),m&&t(Di),w(yy),m&&t(AXe),m&&t(xo),w(xy),w(Sy),w(ju),w(Du),w(Ry),m&&t(LXe),m&&t(Oi),w(Py),m&&t(yXe),m&&t($o),w(By),w(Iy),w(Vu),w(qy),w(H_),m&&t(xXe),m&&t(zi),w(jy),m&&t($Xe),m&&t(ko),w(Dy),w(Oy),w(J_),w(Vy),w(V2),m&&t(kXe),m&&t(Hi),w(Xy),m&&t(SXe),m&&t(So),w(zy),w(Wy),w(z2),w(Hy),w(Rb),m&&t(RXe),m&&t(Yi),w(Uy),m&&t(PXe),m&&t(Ro),w(Jy),w(Ky),w(Bb),w(Zy),w(Tv),m&&t(BXe),m&&t(ed),w(e8),m&&t(NXe),m&&t(Po),w(o8),w(t8),w(Ev),w(a8),w(Xv),m&&t(IXe),m&&t(td),w(n8),m&&t(qXe),m&&t(Bo),w(s8),w(i8),w(Qv),w(d8),w(z1),m&&t(jXe),m&&t(sd),w(c8),m&&t(DXe),m&&t(No),w(m8),w(g8),w(W1),w(h8),w(wF),m&&t(GXe),m&&t(dd),w(u8),m&&t(OXe),m&&t(Io),w(p8),w(b8),w(LF),w(v8),w(BF),m&&t(VXe),m&&t(fd),w(F8),m&&t(XXe),m&&t(jo),w(T8),w(E8),w(IF),w(C8),w(TT),m&&t(zXe),m&&t(ud),w(w8),m&&t(QXe),m&&t(Do),w(A8),w(y8),w(ET),w(x8),w(gM),m&&t(WXe),m&&t(bd),w($8),m&&t(HXe),m&&t(Go),w(k8),w(R8),w(uM),w(P8),w(bM),m&&t(UXe),m&&t(Td),w(B8),m&&t(JXe),m&&t(Oo),w(N8),w(q8),w(FM),w(j8),w(BM),m&&t(YXe),m&&t(Cd),w(D8),m&&t(KXe),m&&t(Vo),w(G8),w(V8),w(IM),w(X8),w(DM),m&&t(ZXe),m&&t(Ld),w(z8),m&&t(eze),m&&t(Xo),w(Q8),w(H8),w(OM),w(U8),w(zM),m&&t(oze),m&&t($d),w(J8),m&&t(rze),m&&t(zo),w(Y8),w(Z8),w(WM),w(e9),w(a4),m&&t(tze),m&&t(Rd),w(o9),m&&t(aze),m&&t(Qo),w(r9),w(a9),w(s4),w(n9),w(g4),m&&t(nze),m&&t(Nd),w(s9),m&&t(sze),m&&t(Wo),w(l9),w(d9),w(u4),w(c9),w(L4),m&&t(lze),m&&t(jd),w(m9),m&&t(ize),m&&t(Ho),w(f9),w(h9),w(x4),w(u9),w(R4),m&&t(dze),m&&t(Od),w(_9),m&&t(cze),m&&t(Uo),w(b9),w(F9),w(B4),w(T9),w(O4),m&&t(mze),m&&t(zd),w(M9),m&&t(fze),m&&t(Jo),w(E9),w(w9),w(X4),w(A9),w(U4),m&&t(gze),m&&t(Ud),w(L9),m&&t(hze),m&&t(Yo),w(y9),w($9),w(Y4),w(k9),w(oE),m&&t(uze),m&&t(Kd),w(R9),m&&t(pze),m&&t(Ko),w(P9),w(N9),w(tE),w(I9),w(sE),m&&t(_ze),m&&t(oc),w(q9),m&&t(bze),m&&t(Zo),w(j9),w(G9),w(iE),w(O9),w(uE),m&&t(vze),m&&t(ac),w(V9),m&&t(Fze),m&&t(er),w(X9),w(Q9),w(_E),w(W9),w(FE),m&&t(Tze),m&&t(lc),w(H9),m&&t(Mze),m&&t(or),w(U9),w(Y9),w(ME),w(K9),w(bC),m&&t(Eze),m&&t(cc),w(Z9),m&&t(Cze),m&&t(rr),w(ex),w(rx),w(FC),w(tx),w(XC),m&&t(wze),m&&t(gc),w(ax),m&&t(Aze),m&&t(tr),w(nx),w(lx),w(QC),w(ix),w(s3),m&&t(Lze),m&&t(pc),w(dx),m&&t(yze),m&&t(ar),w(cx),w(fx),w(i3),w(gx),w(u3),m&&t(xze),m&&t(vc),w(hx),m&&t($ze),m&&t(nr),w(ux),w(_x),w(_3),w(bx),w(q3),m&&t(kze),m&&t(Mc),w(vx),m&&t(Sze),m&&t(sr),w(Fx),w(Mx),w(D3),w(Ex),w(Y3),m&&t(Rze),m&&t(wc),w(Cx),m&&t(Pze),m&&t(lr),w(wx),w(Lx),w(Z3),w(yx),w(A5),m&&t(Bze),m&&t(yc),w(xx),m&&t(Nze),m&&t(ir),w($x),w(Sx),w(y5),w(Rx),w(Q5),m&&t(Ize),m&&t(kc),w(Px),m&&t(qze),m&&t(dr),w(Bx),w(Ix),w(H5),w(qx),w(Y5),m&&t(jze),m&&t(Pc),w(Dx),m&&t(Dze),m&&t(cr),w(Gx),w(Vx),w(Z5),w(Xx),w(o0),m&&t(Gze),m&&t(Ic),w(zx),m&&t(Oze),m&&t(mr),w(Qx),w(Hx),w(t0),w(Ux),w(C0),m&&t(Vze),m&&t(Dc),w(Jx),m&&t(Xze),m&&t(fr),w(Yx),w(Zx),w(A0),w(e$),w(W0),m&&t(zze),m&&t(Vc),w(o$),m&&t(Qze),m&&t(gr),w(r$),w(a$),w(U0),w(n$),w(Y0),m&&t(Wze),m&&t(Qc),w(s$),m&&t(Hze),m&&t(hr),w(l$),w(d$),w(Z0),w(c$),w(ow),m&&t(Uze),m&&t(Uc),w(m$),m&&t(Jze),m&&t(ur),w(f$),w(h$),w(tw),w(u$),w(kw),m&&t(Yze),m&&t(Kc),w(p$),m&&t(Kze),m&&t(pr),w(_$),w(v$),w(Rw),w(F$),w(Xw),m&&t(Zze),m&&t(om),w(T$),m&&t(eQe),m&&t(_r),w(M$),w(C$),w(Qw),w(w$),w(sA),m&&t(oQe),m&&t(am),w(A$),m&&t(rQe),m&&t(br),w(L$),w(x$),w(iA),w($$),w(vA),m&&t(tQe),m&&t(lm),w(k$),m&&t(aQe),m&&t(vr),w(S$),w(P$),w(TA),w(B$),w(SA),m&&t(nQe),m&&t(cm),w(N$),m&&t(sQe),m&&t(Fr),w(I$),w(j$),w(PA),w(D$),w(zA),m&&t(lQe),m&&t(gm),w(G$),m&&t(iQe),m&&t(Tr),w(O$),w(X$),w(WA),w(z$),w(a6),m&&t(dQe),m&&t(pm),w(Q$),m&&t(cQe),m&&t(Mr),w(W$),w(U$),w(s6),w(J$),w(u6),m&&t(mQe),m&&t(vm),w(Y$),m&&t(fQe),m&&t(Er),w(K$),w(ek),w(_6),w(ok),w(A6),m&&t(gQe),m&&t(Mm),w(rk),m&&t(hQe),m&&t(Cr),w(tk),w(nk),w(y6),w(sk),w($6),m&&t(uQe),m&&t(wm),w(lk),m&&t(pQe),m&&t(wr),w(ik),w(ck),w(S6),w(mk),w(B6),m&&t(_Qe),m&&t(ym),w(gk),m&&t(bQe),m&&t(Ar),w(hk),w(pk),w(I6),w(_k),w(j6)}}}const xUt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function $Ut($){return yWt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class IUt extends CWt{constructor(g){super();wWt(this,g,$Ut,yUt,AWt,{})}}export{IUt as default,xUt as metadata};
