import{S as Voa,i as Xoa,s as zoa,e as a,k as l,w as F,t as o,M as Woa,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as Qoa,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as jct}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as oe}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Uoa($){let g,v,u,f,p,d,h,Ao,Oi,Zm,mt,Vi,Xi,n8,ef,Oe,Qe,zi,Xn,s8,zn,Wn,l8,Wi,Qn,i8,Qi,of,ja;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Ao=o(`, make sure its
`),Oi=a("code"),Zm=o("model_type"),mt=o(" attribute is set to the same key you use when registering the config (here "),Vi=a("code"),Xi=o('"new-model"'),n8=o(")."),ef=l(),Oe=a("p"),Qe=o("Likewise, if your "),zi=a("code"),Xn=o("NewModel"),s8=o(" is a subclass of "),zn=a("a"),Wn=o("PreTrainedModel"),l8=o(`, make sure its
`),Wi=a("code"),Qn=o("config_class"),i8=o(` attribute is set to the same class you use when registering the model (here
`),Qi=a("code"),of=o("NewModelConfig"),ja=o(")."),this.h()},l(Ue){g=n(Ue,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var ZR=s(u);f=r(ZR,"NewModelConfig"),ZR.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Ui=s(d);h=r(Ui,"PretrainedConfig"),Ui.forEach(t),Ao=r(Ae,`, make sure its
`),Oi=n(Ae,"CODE",{});var eP=s(Oi);Zm=r(eP,"model_type"),eP.forEach(t),mt=r(Ae," attribute is set to the same key you use when registering the config (here "),Vi=n(Ae,"CODE",{});var oP=s(Vi);Xi=r(oP,'"new-model"'),oP.forEach(t),n8=r(Ae,")."),Ae.forEach(t),ef=i(Ue),Oe=n(Ue,"P",{});var Lo=s(Oe);Qe=r(Lo,"Likewise, if your "),zi=n(Lo,"CODE",{});var Da=s(zi);Xn=r(Da,"NewModel"),Da.forEach(t),s8=r(Lo," is a subclass of "),zn=n(Lo,"A",{href:!0});var rP=s(zn);Wn=r(rP,"PreTrainedModel"),rP.forEach(t),l8=r(Lo,`, make sure its
`),Wi=n(Lo,"CODE",{});var rf=s(Wi);Qn=r(rf,"config_class"),rf.forEach(t),i8=r(Lo,` attribute is set to the same class you use when registering the model (here
`),Qi=n(Lo,"CODE",{});var tP=s(Qi);of=r(tP,"NewModelConfig"),tP.forEach(t),ja=r(Lo,")."),Lo.forEach(t),this.h()},h(){c(zn,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(Ue,Ae){b(Ue,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,Ao),e(g,Oi),e(Oi,Zm),e(g,mt),e(g,Vi),e(Vi,Xi),e(g,n8),b(Ue,ef,Ae),b(Ue,Oe,Ae),e(Oe,Qe),e(Oe,zi),e(zi,Xn),e(Oe,s8),e(Oe,zn),e(zn,Wn),e(Oe,l8),e(Oe,Wi),e(Wi,Qn),e(Oe,i8),e(Oe,Qi),e(Qi,of),e(Oe,ja)},d(Ue){Ue&&t(g),Ue&&t(ef),Ue&&t(Oe)}}}function Hoa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Joa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Yoa($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Ao=s(u);f=r(Ao,"use_auth_token=True"),Ao.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function Koa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Zoa($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Ao=s(u);f=r(Ao,"use_auth_token=True"),Ao.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function era($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ora($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ara($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ira($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ura($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _ra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Fra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Tra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Mra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Era($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Cra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVideoClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ara($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVideoClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Lra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $ra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Sra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Rra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Pra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Bra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ira($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Nra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Dra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Gra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ora($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Vra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Xra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Wra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Qra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ura($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Hra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Jra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Yra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Kra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Zra($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ota($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ata($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSemanticSegmentation.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ita($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _ta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Fta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Tta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Mta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Eta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Cta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ata($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Lta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $ta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Sta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Rta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Pta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Bta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ita($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Nta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Dta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Gta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ota($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Vta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Xta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Wta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Qta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Uta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Hta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Jta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Yta($){let g,v,u,f,p,d,h,Ao,Oi,Zm,mt,Vi,Xi,n8,ef,Oe,Qe,zi,Xn,s8,zn,Wn,l8,Wi,Qn,i8,Qi,of,ja,Ue,Ae,ZR,Ui,eP,oP,Lo,Da,rP,rf,tP,UYe,CQe,Hi,tf,yse,d8,HYe,xse,JYe,wQe,Un,YYe,$se,KYe,ZYe,kse,eKe,oKe,AQe,c8,LQe,aP,rKe,yQe,af,xQe,Ji,nf,Sse,m8,tKe,Rse,aKe,$Qe,yo,f8,nKe,g8,sKe,nP,lKe,iKe,dKe,h8,cKe,Pse,mKe,fKe,gKe,kr,u8,hKe,Bse,uKe,pKe,Yi,_Ke,Ise,bKe,vKe,Nse,FKe,TKe,MKe,A,sf,qse,EKe,CKe,sP,wKe,AKe,LKe,lf,jse,yKe,xKe,lP,$Ke,kKe,SKe,df,Dse,RKe,PKe,iP,BKe,IKe,NKe,cf,Gse,qKe,jKe,dP,DKe,GKe,OKe,mf,Ose,VKe,XKe,cP,zKe,WKe,QKe,ff,Vse,UKe,HKe,mP,JKe,YKe,KKe,gf,Xse,ZKe,eZe,fP,oZe,rZe,tZe,hf,zse,aZe,nZe,gP,sZe,lZe,iZe,uf,Wse,dZe,cZe,hP,mZe,fZe,gZe,pf,Qse,hZe,uZe,uP,pZe,_Ze,bZe,_f,Use,vZe,FZe,pP,TZe,MZe,EZe,bf,Hse,CZe,wZe,_P,AZe,LZe,yZe,vf,Jse,xZe,$Ze,bP,kZe,SZe,RZe,Ff,Yse,PZe,BZe,vP,IZe,NZe,qZe,Tf,Kse,jZe,DZe,FP,GZe,OZe,VZe,Mf,Zse,XZe,zZe,TP,WZe,QZe,UZe,Ef,ele,HZe,JZe,MP,YZe,KZe,ZZe,Cf,ole,eeo,oeo,EP,reo,teo,aeo,wf,rle,neo,seo,CP,leo,ieo,deo,Af,tle,ceo,meo,wP,feo,geo,heo,Lf,ale,ueo,peo,AP,_eo,beo,veo,yf,nle,Feo,Teo,LP,Meo,Eeo,Ceo,xf,sle,weo,Aeo,yP,Leo,yeo,xeo,$f,lle,$eo,keo,xP,Seo,Reo,Peo,kf,ile,Beo,Ieo,$P,Neo,qeo,jeo,Sf,dle,Deo,Geo,kP,Oeo,Veo,Xeo,Rf,cle,zeo,Weo,SP,Qeo,Ueo,Heo,Pf,mle,Jeo,Yeo,RP,Keo,Zeo,eoo,Bf,fle,ooo,roo,PP,too,aoo,noo,If,gle,soo,loo,BP,ioo,doo,coo,Nf,hle,moo,foo,IP,goo,hoo,uoo,qf,ule,poo,_oo,NP,boo,voo,Foo,jf,ple,Too,Moo,qP,Eoo,Coo,woo,Df,_le,Aoo,Loo,jP,yoo,xoo,$oo,Gf,ble,koo,Soo,DP,Roo,Poo,Boo,Of,vle,Ioo,Noo,GP,qoo,joo,Doo,Vf,Fle,Goo,Ooo,OP,Voo,Xoo,zoo,Xf,Tle,Woo,Qoo,VP,Uoo,Hoo,Joo,zf,Mle,Yoo,Koo,XP,Zoo,ero,oro,Wf,Ele,rro,tro,zP,aro,nro,sro,Qf,Cle,lro,iro,WP,dro,cro,mro,Uf,wle,fro,gro,QP,hro,uro,pro,Hf,Ale,_ro,bro,UP,vro,Fro,Tro,Jf,Lle,Mro,Ero,HP,Cro,wro,Aro,Yf,yle,Lro,yro,JP,xro,$ro,kro,Kf,xle,Sro,Rro,YP,Pro,Bro,Iro,Zf,$le,Nro,qro,KP,jro,Dro,Gro,eg,kle,Oro,Vro,ZP,Xro,zro,Wro,og,Sle,Qro,Uro,eB,Hro,Jro,Yro,rg,Rle,Kro,Zro,oB,eto,oto,rto,tg,Ple,tto,ato,rB,nto,sto,lto,ag,Ble,ito,dto,tB,cto,mto,fto,ng,Ile,gto,hto,aB,uto,pto,_to,sg,Nle,bto,vto,nB,Fto,Tto,Mto,lg,qle,Eto,Cto,sB,wto,Ato,Lto,ig,jle,yto,xto,lB,$to,kto,Sto,dg,Dle,Rto,Pto,iB,Bto,Ito,Nto,cg,Gle,qto,jto,dB,Dto,Gto,Oto,mg,Ole,Vto,Xto,cB,zto,Wto,Qto,fg,Vle,Uto,Hto,mB,Jto,Yto,Kto,gg,Xle,Zto,eao,fB,oao,rao,tao,hg,zle,aao,nao,gB,sao,lao,iao,ug,Wle,dao,cao,hB,mao,fao,gao,pg,Qle,hao,uao,uB,pao,_ao,bao,_g,Ule,vao,Fao,pB,Tao,Mao,Eao,bg,Hle,Cao,wao,_B,Aao,Lao,yao,vg,Jle,xao,$ao,bB,kao,Sao,Rao,Fg,Yle,Pao,Bao,vB,Iao,Nao,qao,Tg,Kle,jao,Dao,FB,Gao,Oao,Vao,Mg,Zle,Xao,zao,TB,Wao,Qao,Uao,Eg,eie,Hao,Jao,MB,Yao,Kao,Zao,Cg,oie,eno,ono,EB,rno,tno,ano,wg,rie,nno,sno,CB,lno,ino,dno,Ag,tie,cno,mno,wB,fno,gno,hno,Lg,aie,uno,pno,AB,_no,bno,vno,yg,nie,Fno,Tno,LB,Mno,Eno,Cno,xg,sie,wno,Ano,yB,Lno,yno,xno,$g,lie,$no,kno,xB,Sno,Rno,Pno,kg,iie,Bno,Ino,$B,Nno,qno,jno,Sg,die,Dno,Gno,kB,Ono,Vno,Xno,Rg,cie,zno,Wno,SB,Qno,Uno,Hno,Pg,mie,Jno,Yno,RB,Kno,Zno,eso,Bg,fie,oso,rso,PB,tso,aso,nso,Ig,gie,sso,lso,BB,iso,dso,cso,Ng,hie,mso,fso,IB,gso,hso,uso,qg,uie,pso,_so,NB,bso,vso,Fso,jg,pie,Tso,Mso,qB,Eso,Cso,wso,Dg,_ie,Aso,Lso,jB,yso,xso,$so,Gg,bie,kso,Sso,DB,Rso,Pso,Bso,Og,vie,Iso,Nso,GB,qso,jso,Dso,Vg,Fie,Gso,Oso,OB,Vso,Xso,zso,Xg,Tie,Wso,Qso,VB,Uso,Hso,Jso,zg,Mie,Yso,Kso,XB,Zso,elo,olo,Wg,Eie,rlo,tlo,zB,alo,nlo,slo,Qg,Cie,llo,ilo,WB,dlo,clo,mlo,Ug,wie,flo,glo,QB,hlo,ulo,plo,Hg,Aie,_lo,blo,UB,vlo,Flo,Tlo,Jg,Lie,Mlo,Elo,HB,Clo,wlo,Alo,Yg,yie,Llo,ylo,JB,xlo,$lo,klo,Kg,xie,Slo,Rlo,YB,Plo,Blo,Ilo,Zg,$ie,Nlo,qlo,KB,jlo,Dlo,Glo,eh,kie,Olo,Vlo,ZB,Xlo,zlo,Wlo,oh,Sie,Qlo,Ulo,eI,Hlo,Jlo,Ylo,rh,Rie,Klo,Zlo,oI,eio,oio,rio,th,Pie,tio,aio,rI,nio,sio,lio,ah,Bie,iio,dio,tI,cio,mio,fio,nh,Iie,gio,hio,aI,uio,pio,_io,sh,Nie,bio,vio,nI,Fio,Tio,Mio,lh,qie,Eio,Cio,sI,wio,Aio,Lio,ih,jie,yio,xio,lI,$io,kio,Sio,dh,Die,Rio,Pio,iI,Bio,Iio,Nio,ch,Gie,qio,jio,dI,Dio,Gio,Oio,mh,Oie,Vio,Xio,cI,zio,Wio,Qio,fh,Vie,Uio,Hio,mI,Jio,Yio,Kio,gh,Xie,Zio,edo,fI,odo,rdo,tdo,hh,zie,ado,ndo,gI,sdo,ldo,ido,uh,Wie,ddo,cdo,hI,mdo,fdo,gdo,ph,Qie,hdo,udo,uI,pdo,_do,bdo,_h,Uie,vdo,Fdo,pI,Tdo,Mdo,Edo,bh,Hie,Cdo,wdo,_I,Ado,Ldo,ydo,vh,Jie,xdo,$do,bI,kdo,Sdo,Rdo,Fh,Pdo,Th,p8,Bdo,Yie,Ido,kQe,Ki,Mh,Kie,_8,Ndo,Zie,qdo,SQe,xo,b8,jdo,v8,Ddo,vI,Gdo,Odo,Vdo,F8,Xdo,ede,zdo,Wdo,Qdo,Sr,T8,Udo,ode,Hdo,Jdo,Ga,Ydo,rde,Kdo,Zdo,tde,eco,oco,ade,rco,tco,aco,k,Hn,nde,nco,sco,FI,lco,ico,TI,dco,cco,mco,Jn,sde,fco,gco,MI,hco,uco,EI,pco,_co,bco,Yn,lde,vco,Fco,CI,Tco,Mco,wI,Eco,Cco,wco,Eh,ide,Aco,Lco,AI,yco,xco,$co,Kn,dde,kco,Sco,LI,Rco,Pco,yI,Bco,Ico,Nco,Ch,cde,qco,jco,xI,Dco,Gco,Oco,wh,mde,Vco,Xco,$I,zco,Wco,Qco,Ah,fde,Uco,Hco,kI,Jco,Yco,Kco,Zn,gde,Zco,emo,SI,omo,rmo,RI,tmo,amo,nmo,es,hde,smo,lmo,PI,imo,dmo,BI,cmo,mmo,fmo,os,ude,gmo,hmo,II,umo,pmo,NI,_mo,bmo,vmo,Lh,pde,Fmo,Tmo,qI,Mmo,Emo,Cmo,yh,_de,wmo,Amo,jI,Lmo,ymo,xmo,xh,bde,$mo,kmo,DI,Smo,Rmo,Pmo,rs,vde,Bmo,Imo,GI,Nmo,qmo,OI,jmo,Dmo,Gmo,$h,Fde,Omo,Vmo,VI,Xmo,zmo,Wmo,ts,Tde,Qmo,Umo,XI,Hmo,Jmo,zI,Ymo,Kmo,Zmo,as,Mde,efo,ofo,WI,rfo,tfo,QI,afo,nfo,sfo,ns,Ede,lfo,ifo,UI,dfo,cfo,HI,mfo,ffo,gfo,ss,Cde,hfo,ufo,JI,pfo,_fo,YI,bfo,vfo,Ffo,kh,wde,Tfo,Mfo,KI,Efo,Cfo,wfo,ls,Ade,Afo,Lfo,ZI,yfo,xfo,eN,$fo,kfo,Sfo,is,Lde,Rfo,Pfo,oN,Bfo,Ifo,rN,Nfo,qfo,jfo,ds,yde,Dfo,Gfo,tN,Ofo,Vfo,aN,Xfo,zfo,Wfo,cs,xde,Qfo,Ufo,nN,Hfo,Jfo,sN,Yfo,Kfo,Zfo,ms,$de,ego,ogo,lN,rgo,tgo,iN,ago,ngo,sgo,fs,kde,lgo,igo,dN,dgo,cgo,cN,mgo,fgo,ggo,Sh,Sde,hgo,ugo,mN,pgo,_go,bgo,gs,Rde,vgo,Fgo,fN,Tgo,Mgo,gN,Ego,Cgo,wgo,Rh,Pde,Ago,Lgo,hN,ygo,xgo,$go,hs,Bde,kgo,Sgo,uN,Rgo,Pgo,pN,Bgo,Igo,Ngo,us,Ide,qgo,jgo,_N,Dgo,Ggo,bN,Ogo,Vgo,Xgo,ps,Nde,zgo,Wgo,vN,Qgo,Ugo,FN,Hgo,Jgo,Ygo,Ph,qde,Kgo,Zgo,TN,eho,oho,rho,_s,jde,tho,aho,MN,nho,sho,EN,lho,iho,dho,bs,Dde,cho,mho,CN,fho,gho,wN,hho,uho,pho,vs,Gde,_ho,bho,AN,vho,Fho,LN,Tho,Mho,Eho,Bh,Ode,Cho,who,yN,Aho,Lho,yho,Fs,Vde,xho,$ho,xN,kho,Sho,$N,Rho,Pho,Bho,Ts,Xde,Iho,Nho,kN,qho,jho,SN,Dho,Gho,Oho,Ms,zde,Vho,Xho,RN,zho,Who,PN,Qho,Uho,Hho,Es,Wde,Jho,Yho,BN,Kho,Zho,IN,euo,ouo,ruo,Cs,Qde,tuo,auo,NN,nuo,suo,qN,luo,iuo,duo,ws,Ude,cuo,muo,jN,fuo,guo,DN,huo,uuo,puo,As,Hde,_uo,buo,GN,vuo,Fuo,ON,Tuo,Muo,Euo,Ls,Jde,Cuo,wuo,VN,Auo,Luo,XN,yuo,xuo,$uo,Ih,Yde,kuo,Suo,zN,Ruo,Puo,Buo,ys,Kde,Iuo,Nuo,WN,quo,juo,QN,Duo,Guo,Ouo,Nh,Zde,Vuo,Xuo,UN,zuo,Wuo,Quo,qh,ece,Uuo,Huo,HN,Juo,Yuo,Kuo,xs,oce,Zuo,epo,JN,opo,rpo,YN,tpo,apo,npo,$s,rce,spo,lpo,KN,ipo,dpo,ZN,cpo,mpo,fpo,ks,tce,gpo,hpo,eq,upo,ppo,oq,_po,bpo,vpo,jh,ace,Fpo,Tpo,rq,Mpo,Epo,Cpo,Ss,nce,wpo,Apo,tq,Lpo,ypo,aq,xpo,$po,kpo,Rs,sce,Spo,Rpo,nq,Ppo,Bpo,sq,Ipo,Npo,qpo,Ps,lce,jpo,Dpo,lq,Gpo,Opo,iq,Vpo,Xpo,zpo,Bs,ice,Wpo,Qpo,dq,Upo,Hpo,cq,Jpo,Ypo,Kpo,Is,dce,Zpo,e_o,mq,o_o,r_o,fq,t_o,a_o,n_o,Ns,cce,s_o,l_o,gq,i_o,d_o,hq,c_o,m_o,f_o,qs,mce,g_o,h_o,uq,u_o,p_o,pq,__o,b_o,v_o,js,fce,F_o,T_o,_q,M_o,E_o,bq,C_o,w_o,A_o,Dh,gce,L_o,y_o,vq,x_o,$_o,k_o,Ds,hce,S_o,R_o,Fq,P_o,B_o,Tq,I_o,N_o,q_o,Gs,uce,j_o,D_o,Mq,G_o,O_o,Eq,V_o,X_o,z_o,Gh,pce,W_o,Q_o,Cq,U_o,H_o,J_o,Oh,_ce,Y_o,K_o,wq,Z_o,e2o,o2o,Vh,bce,r2o,t2o,Aq,a2o,n2o,s2o,Xh,vce,l2o,i2o,Lq,d2o,c2o,m2o,Os,Fce,f2o,g2o,yq,h2o,u2o,xq,p2o,_2o,b2o,zh,Tce,v2o,F2o,$q,T2o,M2o,E2o,Vs,Mce,C2o,w2o,kq,A2o,L2o,Sq,y2o,x2o,$2o,Xs,Ece,k2o,S2o,Rq,R2o,P2o,Pq,B2o,I2o,N2o,zs,Cce,q2o,j2o,Bq,D2o,G2o,Iq,O2o,V2o,X2o,Ws,wce,z2o,W2o,Nq,Q2o,U2o,qq,H2o,J2o,Y2o,Qs,Ace,K2o,Z2o,jq,ebo,obo,Dq,rbo,tbo,abo,Us,Lce,nbo,sbo,Gq,lbo,ibo,Oq,dbo,cbo,mbo,Wh,yce,fbo,gbo,Vq,hbo,ubo,pbo,Qh,xce,_bo,bbo,Xq,vbo,Fbo,Tbo,Hs,$ce,Mbo,Ebo,zq,Cbo,wbo,Wq,Abo,Lbo,ybo,Js,kce,xbo,$bo,Qq,kbo,Sbo,Uq,Rbo,Pbo,Bbo,Ys,Sce,Ibo,Nbo,Hq,qbo,jbo,Jq,Dbo,Gbo,Obo,Uh,Rce,Vbo,Xbo,Yq,zbo,Wbo,Qbo,Hh,Pce,Ubo,Hbo,Kq,Jbo,Ybo,Kbo,Jh,Bce,Zbo,evo,Zq,ovo,rvo,tvo,Ks,Ice,avo,nvo,ej,svo,lvo,oj,ivo,dvo,cvo,Zs,Nce,mvo,fvo,rj,gvo,hvo,tj,uvo,pvo,_vo,Yh,qce,bvo,vvo,aj,Fvo,Tvo,Mvo,Kh,jce,Evo,Cvo,nj,wvo,Avo,Lvo,Zh,Dce,yvo,xvo,sj,$vo,kvo,Svo,el,Gce,Rvo,Pvo,lj,Bvo,Ivo,ij,Nvo,qvo,jvo,eu,Oce,Dvo,Gvo,dj,Ovo,Vvo,Xvo,ou,Vce,zvo,Wvo,cj,Qvo,Uvo,Hvo,ol,Xce,Jvo,Yvo,mj,Kvo,Zvo,fj,e1o,o1o,r1o,rl,zce,t1o,a1o,gj,n1o,s1o,hj,l1o,i1o,d1o,tl,Wce,c1o,m1o,uj,f1o,g1o,pj,h1o,u1o,p1o,al,Qce,_1o,b1o,_j,v1o,F1o,bj,T1o,M1o,E1o,ru,C1o,tu,M8,w1o,Uce,A1o,RQe,Zi,au,Hce,E8,L1o,Jce,y1o,PQe,$o,C8,x1o,w8,$1o,vj,k1o,S1o,R1o,A8,P1o,Yce,B1o,I1o,N1o,He,L8,q1o,Kce,j1o,D1o,Oa,G1o,Zce,O1o,V1o,eme,X1o,z1o,ome,W1o,Q1o,U1o,U,nu,rme,H1o,J1o,Fj,Y1o,K1o,Z1o,su,tme,eFo,oFo,Tj,rFo,tFo,aFo,lu,ame,nFo,sFo,Mj,lFo,iFo,dFo,iu,nme,cFo,mFo,Ej,fFo,gFo,hFo,du,sme,uFo,pFo,Cj,_Fo,bFo,vFo,cu,lme,FFo,TFo,wj,MFo,EFo,CFo,mu,ime,wFo,AFo,Aj,LFo,yFo,xFo,fu,dme,$Fo,kFo,Lj,SFo,RFo,PFo,gu,cme,BFo,IFo,yj,NFo,qFo,jFo,hu,mme,DFo,GFo,xj,OFo,VFo,XFo,uu,fme,zFo,WFo,$j,QFo,UFo,HFo,pu,gme,JFo,YFo,kj,KFo,ZFo,eTo,_u,hme,oTo,rTo,Sj,tTo,aTo,nTo,bu,ume,sTo,lTo,Rj,iTo,dTo,cTo,vu,pme,mTo,fTo,Pj,gTo,hTo,uTo,Fu,_me,pTo,_To,Bj,bTo,vTo,FTo,Tu,bme,TTo,MTo,Ij,ETo,CTo,wTo,Mu,vme,ATo,LTo,Nj,yTo,xTo,$To,Eu,Fme,kTo,STo,qj,RTo,PTo,BTo,Cu,Tme,ITo,NTo,jj,qTo,jTo,DTo,wu,Mme,GTo,OTo,Dj,VTo,XTo,zTo,Au,Eme,WTo,QTo,Gj,UTo,HTo,JTo,Lu,Cme,YTo,KTo,Oj,ZTo,eMo,oMo,yu,wme,rMo,tMo,Vj,aMo,nMo,sMo,xu,Ame,lMo,iMo,Xj,dMo,cMo,mMo,$u,Lme,fMo,gMo,zj,hMo,uMo,pMo,ku,yme,_Mo,bMo,Wj,vMo,FMo,TMo,Su,xme,MMo,EMo,Qj,CMo,wMo,AMo,Ru,$me,LMo,yMo,Uj,xMo,$Mo,kMo,Pu,kme,SMo,RMo,Hj,PMo,BMo,IMo,Bu,Sme,NMo,qMo,Jj,jMo,DMo,GMo,Iu,Rme,OMo,VMo,Yj,XMo,zMo,WMo,Nu,Pme,QMo,UMo,Kj,HMo,JMo,YMo,qu,Bme,KMo,ZMo,Zj,eEo,oEo,rEo,ju,Ime,tEo,aEo,eD,nEo,sEo,lEo,Du,Nme,iEo,dEo,oD,cEo,mEo,fEo,Gu,qme,gEo,hEo,rD,uEo,pEo,_Eo,Ou,bEo,Vu,vEo,Xu,y8,FEo,jme,TEo,BQe,ed,zu,Dme,x8,MEo,Gme,EEo,IQe,ko,$8,CEo,k8,wEo,tD,AEo,LEo,yEo,S8,xEo,Ome,$Eo,kEo,SEo,Je,R8,REo,Vme,PEo,BEo,od,IEo,Xme,NEo,qEo,zme,jEo,DEo,GEo,me,Wu,Wme,OEo,VEo,aD,XEo,zEo,WEo,Qu,Qme,QEo,UEo,nD,HEo,JEo,YEo,Uu,Ume,KEo,ZEo,sD,e4o,o4o,r4o,Hu,Hme,t4o,a4o,lD,n4o,s4o,l4o,Ju,Jme,i4o,d4o,iD,c4o,m4o,f4o,Yu,Yme,g4o,h4o,dD,u4o,p4o,_4o,Ku,Kme,b4o,v4o,cD,F4o,T4o,M4o,Zu,Zme,E4o,C4o,mD,w4o,A4o,L4o,ep,efe,y4o,x4o,fD,$4o,k4o,S4o,op,ofe,R4o,P4o,gD,B4o,I4o,N4o,rp,rfe,q4o,j4o,hD,D4o,G4o,O4o,tp,tfe,V4o,X4o,uD,z4o,W4o,Q4o,ap,afe,U4o,H4o,pD,J4o,Y4o,K4o,np,nfe,Z4o,eCo,_D,oCo,rCo,tCo,sp,sfe,aCo,nCo,bD,sCo,lCo,iCo,lp,lfe,dCo,cCo,vD,mCo,fCo,gCo,ip,ife,hCo,uCo,FD,pCo,_Co,bCo,dp,dfe,vCo,FCo,TD,TCo,MCo,ECo,cp,cfe,CCo,wCo,MD,ACo,LCo,yCo,mp,xCo,fp,$Co,gp,P8,kCo,mfe,SCo,NQe,rd,hp,ffe,B8,RCo,gfe,PCo,qQe,So,I8,BCo,td,ICo,ED,NCo,qCo,CD,jCo,DCo,GCo,N8,OCo,hfe,VCo,XCo,zCo,ft,q8,WCo,ufe,QCo,UCo,ad,HCo,pfe,JCo,YCo,wD,KCo,ZCo,e3o,up,o3o,Ye,j8,r3o,_fe,t3o,a3o,Va,n3o,bfe,s3o,l3o,vfe,i3o,d3o,Ffe,c3o,m3o,f3o,y,pp,Tfe,g3o,h3o,AD,u3o,p3o,_3o,_p,Mfe,b3o,v3o,LD,F3o,T3o,M3o,bp,Efe,E3o,C3o,yD,w3o,A3o,L3o,vp,Cfe,y3o,x3o,xD,$3o,k3o,S3o,Fp,wfe,R3o,P3o,$D,B3o,I3o,N3o,Tp,Afe,q3o,j3o,kD,D3o,G3o,O3o,Mp,Lfe,V3o,X3o,SD,z3o,W3o,Q3o,Ep,yfe,U3o,H3o,RD,J3o,Y3o,K3o,Cp,xfe,Z3o,e5o,PD,o5o,r5o,t5o,wp,$fe,a5o,n5o,BD,s5o,l5o,i5o,Ap,kfe,d5o,c5o,ID,m5o,f5o,g5o,Lp,Sfe,h5o,u5o,ND,p5o,_5o,b5o,yp,Rfe,v5o,F5o,qD,T5o,M5o,E5o,xp,Pfe,C5o,w5o,jD,A5o,L5o,y5o,$p,Bfe,x5o,$5o,DD,k5o,S5o,R5o,kp,Ife,P5o,B5o,GD,I5o,N5o,q5o,Sp,Nfe,j5o,D5o,OD,G5o,O5o,V5o,Rp,qfe,X5o,z5o,VD,W5o,Q5o,U5o,Pp,jfe,H5o,J5o,XD,Y5o,K5o,Z5o,Bp,Dfe,e0o,o0o,zD,r0o,t0o,a0o,Ip,Gfe,n0o,s0o,WD,l0o,i0o,d0o,Np,Ofe,c0o,m0o,QD,f0o,g0o,h0o,qp,Vfe,u0o,p0o,UD,_0o,b0o,v0o,jp,Xfe,F0o,T0o,HD,M0o,E0o,C0o,Dp,zfe,w0o,A0o,JD,L0o,y0o,x0o,Gp,Wfe,$0o,k0o,YD,S0o,R0o,P0o,Op,Qfe,B0o,I0o,KD,N0o,q0o,j0o,Vp,Ufe,D0o,G0o,ZD,O0o,V0o,X0o,Xp,Hfe,z0o,W0o,eG,Q0o,U0o,H0o,zp,Jfe,J0o,Y0o,oG,K0o,Z0o,ewo,Wp,Yfe,owo,rwo,rG,two,awo,nwo,Qp,Kfe,swo,lwo,tG,iwo,dwo,cwo,Up,Zfe,mwo,fwo,aG,gwo,hwo,uwo,Hp,ege,pwo,_wo,nG,bwo,vwo,Fwo,nl,oge,Two,Mwo,sG,Ewo,Cwo,lG,wwo,Awo,Lwo,Jp,rge,ywo,xwo,iG,$wo,kwo,Swo,Yp,tge,Rwo,Pwo,dG,Bwo,Iwo,Nwo,Kp,age,qwo,jwo,cG,Dwo,Gwo,Owo,Zp,nge,Vwo,Xwo,mG,zwo,Wwo,Qwo,e_,sge,Uwo,Hwo,fG,Jwo,Ywo,Kwo,o_,lge,Zwo,e6o,gG,o6o,r6o,t6o,r_,ige,a6o,n6o,hG,s6o,l6o,i6o,t_,dge,d6o,c6o,uG,m6o,f6o,g6o,a_,cge,h6o,u6o,pG,p6o,_6o,b6o,n_,mge,v6o,F6o,_G,T6o,M6o,E6o,s_,fge,C6o,w6o,bG,A6o,L6o,y6o,l_,gge,x6o,$6o,vG,k6o,S6o,R6o,i_,hge,P6o,B6o,FG,I6o,N6o,q6o,d_,uge,j6o,D6o,TG,G6o,O6o,V6o,c_,pge,X6o,z6o,MG,W6o,Q6o,U6o,m_,_ge,H6o,J6o,EG,Y6o,K6o,Z6o,f_,bge,eAo,oAo,CG,rAo,tAo,aAo,g_,vge,nAo,sAo,wG,lAo,iAo,dAo,h_,Fge,cAo,mAo,AG,fAo,gAo,hAo,u_,Tge,uAo,pAo,LG,_Ao,bAo,vAo,p_,Mge,FAo,TAo,yG,MAo,EAo,CAo,__,Ege,wAo,AAo,xG,LAo,yAo,xAo,b_,Cge,$Ao,kAo,$G,SAo,RAo,PAo,v_,wge,BAo,IAo,kG,NAo,qAo,jAo,F_,Age,DAo,GAo,SG,OAo,VAo,XAo,T_,Lge,zAo,WAo,RG,QAo,UAo,HAo,M_,yge,JAo,YAo,PG,KAo,ZAo,e7o,E_,xge,o7o,r7o,BG,t7o,a7o,n7o,C_,$ge,s7o,l7o,IG,i7o,d7o,c7o,w_,kge,m7o,f7o,NG,g7o,h7o,u7o,A_,Sge,p7o,_7o,qG,b7o,v7o,F7o,L_,Rge,T7o,M7o,jG,E7o,C7o,w7o,y_,Pge,A7o,L7o,DG,y7o,x7o,$7o,x_,Bge,k7o,S7o,GG,R7o,P7o,B7o,$_,Ige,I7o,N7o,OG,q7o,j7o,D7o,k_,Nge,G7o,O7o,VG,V7o,X7o,z7o,S_,qge,W7o,Q7o,XG,U7o,H7o,J7o,R_,jge,Y7o,K7o,zG,Z7o,eLo,oLo,P_,Dge,rLo,tLo,WG,aLo,nLo,sLo,B_,Gge,lLo,iLo,QG,dLo,cLo,mLo,I_,Oge,fLo,gLo,UG,hLo,uLo,pLo,N_,Vge,_Lo,bLo,HG,vLo,FLo,TLo,q_,Xge,MLo,ELo,JG,CLo,wLo,ALo,j_,zge,LLo,yLo,YG,xLo,$Lo,kLo,D_,Wge,SLo,RLo,KG,PLo,BLo,ILo,G_,Qge,NLo,qLo,ZG,jLo,DLo,GLo,O_,Uge,OLo,VLo,eO,XLo,zLo,WLo,V_,Hge,QLo,ULo,oO,HLo,JLo,YLo,X_,Jge,KLo,ZLo,rO,eyo,oyo,ryo,z_,Yge,tyo,ayo,tO,nyo,syo,lyo,W_,Kge,iyo,dyo,aO,cyo,myo,fyo,Q_,Zge,gyo,hyo,nO,uyo,pyo,_yo,U_,ehe,byo,vyo,sO,Fyo,Tyo,Myo,H_,ohe,Eyo,Cyo,lO,wyo,Ayo,Lyo,J_,rhe,yyo,xyo,iO,$yo,kyo,Syo,Y_,the,Ryo,Pyo,dO,Byo,Iyo,Nyo,K_,ahe,qyo,jyo,cO,Dyo,Gyo,Oyo,Z_,nhe,Vyo,Xyo,mO,zyo,Wyo,Qyo,e2,she,Uyo,Hyo,fO,Jyo,Yyo,Kyo,o2,lhe,Zyo,e8o,gO,o8o,r8o,t8o,r2,ihe,a8o,n8o,hO,s8o,l8o,i8o,t2,dhe,d8o,c8o,uO,m8o,f8o,g8o,a2,che,h8o,u8o,pO,p8o,_8o,b8o,n2,mhe,v8o,F8o,_O,T8o,M8o,E8o,s2,fhe,C8o,w8o,bO,A8o,L8o,y8o,l2,ghe,x8o,$8o,vO,k8o,S8o,R8o,i2,hhe,P8o,B8o,FO,I8o,N8o,q8o,d2,uhe,j8o,D8o,TO,G8o,O8o,V8o,c2,phe,X8o,z8o,MO,W8o,Q8o,U8o,m2,_he,H8o,J8o,EO,Y8o,K8o,Z8o,f2,bhe,e9o,o9o,CO,r9o,t9o,a9o,g2,vhe,n9o,s9o,wO,l9o,i9o,d9o,h2,Fhe,c9o,m9o,AO,f9o,g9o,h9o,u2,The,u9o,p9o,LO,_9o,b9o,v9o,p2,Mhe,F9o,T9o,yO,M9o,E9o,C9o,_2,Ehe,w9o,A9o,xO,L9o,y9o,x9o,b2,Che,$9o,k9o,$O,S9o,R9o,P9o,v2,whe,B9o,I9o,kO,N9o,q9o,j9o,F2,Ahe,D9o,G9o,SO,O9o,V9o,X9o,T2,Lhe,z9o,W9o,RO,Q9o,U9o,H9o,M2,J9o,yhe,Y9o,K9o,xhe,Z9o,exo,E2,jQe,nd,C2,$he,D8,oxo,khe,rxo,DQe,Ro,G8,txo,sd,axo,PO,nxo,sxo,BO,lxo,ixo,dxo,O8,cxo,She,mxo,fxo,gxo,gt,V8,hxo,Rhe,uxo,pxo,ld,_xo,Phe,bxo,vxo,IO,Fxo,Txo,Mxo,w2,Exo,Ke,X8,Cxo,Bhe,wxo,Axo,Xa,Lxo,Ihe,yxo,xxo,Nhe,$xo,kxo,qhe,Sxo,Rxo,Pxo,G,A2,jhe,Bxo,Ixo,NO,Nxo,qxo,jxo,L2,Dhe,Dxo,Gxo,qO,Oxo,Vxo,Xxo,y2,Ghe,zxo,Wxo,jO,Qxo,Uxo,Hxo,x2,Ohe,Jxo,Yxo,DO,Kxo,Zxo,e$o,$2,Vhe,o$o,r$o,GO,t$o,a$o,n$o,k2,Xhe,s$o,l$o,OO,i$o,d$o,c$o,S2,zhe,m$o,f$o,VO,g$o,h$o,u$o,R2,Whe,p$o,_$o,XO,b$o,v$o,F$o,P2,Qhe,T$o,M$o,zO,E$o,C$o,w$o,B2,Uhe,A$o,L$o,WO,y$o,x$o,$$o,I2,Hhe,k$o,S$o,QO,R$o,P$o,B$o,N2,Jhe,I$o,N$o,UO,q$o,j$o,D$o,q2,Yhe,G$o,O$o,HO,V$o,X$o,z$o,j2,Khe,W$o,Q$o,JO,U$o,H$o,J$o,D2,Zhe,Y$o,K$o,YO,Z$o,eko,oko,G2,eue,rko,tko,KO,ako,nko,sko,O2,oue,lko,iko,ZO,dko,cko,mko,V2,rue,fko,gko,eV,hko,uko,pko,X2,tue,_ko,bko,oV,vko,Fko,Tko,z2,aue,Mko,Eko,rV,Cko,wko,Ako,W2,nue,Lko,yko,tV,xko,$ko,kko,Q2,sue,Sko,Rko,aV,Pko,Bko,Iko,U2,lue,Nko,qko,nV,jko,Dko,Gko,H2,iue,Oko,Vko,sV,Xko,zko,Wko,J2,due,Qko,Uko,lV,Hko,Jko,Yko,Y2,cue,Kko,Zko,iV,eSo,oSo,rSo,K2,mue,tSo,aSo,dV,nSo,sSo,lSo,Z2,fue,iSo,dSo,cV,cSo,mSo,fSo,eb,gue,gSo,hSo,mV,uSo,pSo,_So,ob,hue,bSo,vSo,fV,FSo,TSo,MSo,rb,uue,ESo,CSo,gV,wSo,ASo,LSo,tb,pue,ySo,xSo,hV,$So,kSo,SSo,ab,_ue,RSo,PSo,uV,BSo,ISo,NSo,nb,bue,qSo,jSo,pV,DSo,GSo,OSo,sb,vue,VSo,XSo,_V,zSo,WSo,QSo,lb,Fue,USo,HSo,bV,JSo,YSo,KSo,ib,Tue,ZSo,eRo,vV,oRo,rRo,tRo,db,Mue,aRo,nRo,FV,sRo,lRo,iRo,cb,Eue,dRo,cRo,TV,mRo,fRo,gRo,mb,Cue,hRo,uRo,MV,pRo,_Ro,bRo,fb,wue,vRo,FRo,EV,TRo,MRo,ERo,gb,Aue,CRo,wRo,CV,ARo,LRo,yRo,hb,Lue,xRo,$Ro,wV,kRo,SRo,RRo,ub,yue,PRo,BRo,AV,IRo,NRo,qRo,pb,xue,jRo,DRo,LV,GRo,ORo,VRo,_b,$ue,XRo,zRo,yV,WRo,QRo,URo,bb,kue,HRo,JRo,xV,YRo,KRo,ZRo,vb,ePo,Sue,oPo,rPo,Rue,tPo,aPo,Fb,GQe,id,Tb,Pue,z8,nPo,Bue,sPo,OQe,Po,W8,lPo,dd,iPo,$V,dPo,cPo,kV,mPo,fPo,gPo,Q8,hPo,Iue,uPo,pPo,_Po,ht,U8,bPo,Nue,vPo,FPo,cd,TPo,que,MPo,EPo,SV,CPo,wPo,APo,Mb,LPo,Ze,H8,yPo,jue,xPo,$Po,za,kPo,Due,SPo,RPo,Gue,PPo,BPo,Oue,IPo,NPo,qPo,z,Eb,Vue,jPo,DPo,RV,GPo,OPo,VPo,Cb,Xue,XPo,zPo,PV,WPo,QPo,UPo,wb,zue,HPo,JPo,BV,YPo,KPo,ZPo,Ab,Wue,eBo,oBo,IV,rBo,tBo,aBo,Lb,Que,nBo,sBo,NV,lBo,iBo,dBo,yb,Uue,cBo,mBo,qV,fBo,gBo,hBo,xb,Hue,uBo,pBo,jV,_Bo,bBo,vBo,$b,Jue,FBo,TBo,DV,MBo,EBo,CBo,kb,Yue,wBo,ABo,GV,LBo,yBo,xBo,Sb,Kue,$Bo,kBo,OV,SBo,RBo,PBo,Rb,Zue,BBo,IBo,VV,NBo,qBo,jBo,Pb,epe,DBo,GBo,XV,OBo,VBo,XBo,Bb,ope,zBo,WBo,zV,QBo,UBo,HBo,Ib,rpe,JBo,YBo,WV,KBo,ZBo,eIo,Nb,tpe,oIo,rIo,QV,tIo,aIo,nIo,qb,ape,sIo,lIo,UV,iIo,dIo,cIo,jb,npe,mIo,fIo,HV,gIo,hIo,uIo,Db,spe,pIo,_Io,JV,bIo,vIo,FIo,Gb,lpe,TIo,MIo,YV,EIo,CIo,wIo,Ob,ipe,AIo,LIo,KV,yIo,xIo,$Io,Vb,dpe,kIo,SIo,ZV,RIo,PIo,BIo,Xb,cpe,IIo,NIo,eX,qIo,jIo,DIo,zb,mpe,GIo,OIo,oX,VIo,XIo,zIo,Wb,fpe,WIo,QIo,rX,UIo,HIo,JIo,Qb,gpe,YIo,KIo,tX,ZIo,eNo,oNo,Ub,hpe,rNo,tNo,aX,aNo,nNo,sNo,Hb,upe,lNo,iNo,nX,dNo,cNo,mNo,Jb,ppe,fNo,gNo,sX,hNo,uNo,pNo,Yb,_pe,_No,bNo,lX,vNo,FNo,TNo,Kb,bpe,MNo,ENo,iX,CNo,wNo,ANo,Zb,vpe,LNo,yNo,dX,xNo,$No,kNo,ev,Fpe,SNo,RNo,cX,PNo,BNo,INo,ov,Tpe,NNo,qNo,mX,jNo,DNo,GNo,rv,Mpe,ONo,VNo,fX,XNo,zNo,WNo,tv,Epe,QNo,UNo,gX,HNo,JNo,YNo,av,Cpe,KNo,ZNo,hX,eqo,oqo,rqo,nv,wpe,tqo,aqo,uX,nqo,sqo,lqo,sv,Ape,iqo,dqo,pX,cqo,mqo,fqo,lv,Lpe,gqo,hqo,_X,uqo,pqo,_qo,iv,ype,bqo,vqo,bX,Fqo,Tqo,Mqo,dv,Eqo,xpe,Cqo,wqo,$pe,Aqo,Lqo,cv,VQe,md,mv,kpe,J8,yqo,Spe,xqo,XQe,Bo,Y8,$qo,fd,kqo,vX,Sqo,Rqo,FX,Pqo,Bqo,Iqo,K8,Nqo,Rpe,qqo,jqo,Dqo,ut,Z8,Gqo,Ppe,Oqo,Vqo,gd,Xqo,Bpe,zqo,Wqo,TX,Qqo,Uqo,Hqo,fv,Jqo,eo,e9,Yqo,Ipe,Kqo,Zqo,Wa,ejo,Npe,ojo,rjo,qpe,tjo,ajo,jpe,njo,sjo,ljo,Q,gv,Dpe,ijo,djo,MX,cjo,mjo,fjo,hv,Gpe,gjo,hjo,EX,ujo,pjo,_jo,uv,Ope,bjo,vjo,CX,Fjo,Tjo,Mjo,pv,Vpe,Ejo,Cjo,wX,wjo,Ajo,Ljo,_v,Xpe,yjo,xjo,AX,$jo,kjo,Sjo,bv,zpe,Rjo,Pjo,LX,Bjo,Ijo,Njo,vv,Wpe,qjo,jjo,yX,Djo,Gjo,Ojo,Fv,Qpe,Vjo,Xjo,xX,zjo,Wjo,Qjo,Tv,Upe,Ujo,Hjo,$X,Jjo,Yjo,Kjo,Mv,Hpe,Zjo,eDo,kX,oDo,rDo,tDo,Ev,Jpe,aDo,nDo,SX,sDo,lDo,iDo,Cv,Ype,dDo,cDo,RX,mDo,fDo,gDo,wv,Kpe,hDo,uDo,PX,pDo,_Do,bDo,Av,Zpe,vDo,FDo,BX,TDo,MDo,EDo,Lv,e_e,CDo,wDo,IX,ADo,LDo,yDo,yv,o_e,xDo,$Do,NX,kDo,SDo,RDo,xv,r_e,PDo,BDo,qX,IDo,NDo,qDo,$v,t_e,jDo,DDo,jX,GDo,ODo,VDo,kv,a_e,XDo,zDo,DX,WDo,QDo,UDo,Sv,n_e,HDo,JDo,GX,YDo,KDo,ZDo,Rv,s_e,eGo,oGo,OX,rGo,tGo,aGo,Pv,l_e,nGo,sGo,VX,lGo,iGo,dGo,Bv,i_e,cGo,mGo,XX,fGo,gGo,hGo,Iv,d_e,uGo,pGo,zX,_Go,bGo,vGo,Nv,c_e,FGo,TGo,WX,MGo,EGo,CGo,qv,m_e,wGo,AGo,QX,LGo,yGo,xGo,jv,f_e,$Go,kGo,UX,SGo,RGo,PGo,Dv,g_e,BGo,IGo,HX,NGo,qGo,jGo,Gv,h_e,DGo,GGo,JX,OGo,VGo,XGo,Ov,u_e,zGo,WGo,YX,QGo,UGo,HGo,Vv,p_e,JGo,YGo,KX,KGo,ZGo,eOo,Xv,__e,oOo,rOo,ZX,tOo,aOo,nOo,zv,b_e,sOo,lOo,ez,iOo,dOo,cOo,Wv,v_e,mOo,fOo,F_e,gOo,hOo,uOo,Qv,T_e,pOo,_Oo,oz,bOo,vOo,FOo,Uv,M_e,TOo,MOo,rz,EOo,COo,wOo,Hv,E_e,AOo,LOo,tz,yOo,xOo,$Oo,Jv,C_e,kOo,SOo,az,ROo,POo,BOo,Yv,IOo,w_e,NOo,qOo,A_e,jOo,DOo,Kv,zQe,hd,Zv,L_e,o9,GOo,y_e,OOo,WQe,Io,r9,VOo,ud,XOo,nz,zOo,WOo,sz,QOo,UOo,HOo,t9,JOo,x_e,YOo,KOo,ZOo,pt,a9,eVo,$_e,oVo,rVo,pd,tVo,k_e,aVo,nVo,lz,sVo,lVo,iVo,e1,dVo,oo,n9,cVo,S_e,mVo,fVo,Qa,gVo,R_e,hVo,uVo,P_e,pVo,_Vo,B_e,bVo,vVo,FVo,fe,o1,I_e,TVo,MVo,iz,EVo,CVo,wVo,r1,N_e,AVo,LVo,dz,yVo,xVo,$Vo,t1,q_e,kVo,SVo,cz,RVo,PVo,BVo,a1,j_e,IVo,NVo,mz,qVo,jVo,DVo,n1,D_e,GVo,OVo,fz,VVo,XVo,zVo,s1,G_e,WVo,QVo,gz,UVo,HVo,JVo,l1,O_e,YVo,KVo,hz,ZVo,eXo,oXo,i1,V_e,rXo,tXo,uz,aXo,nXo,sXo,d1,X_e,lXo,iXo,pz,dXo,cXo,mXo,c1,z_e,fXo,gXo,_z,hXo,uXo,pXo,m1,W_e,_Xo,bXo,bz,vXo,FXo,TXo,f1,Q_e,MXo,EXo,vz,CXo,wXo,AXo,g1,U_e,LXo,yXo,Fz,xXo,$Xo,kXo,h1,H_e,SXo,RXo,Tz,PXo,BXo,IXo,u1,J_e,NXo,qXo,Mz,jXo,DXo,GXo,p1,Y_e,OXo,VXo,Ez,XXo,zXo,WXo,_1,K_e,QXo,UXo,Cz,HXo,JXo,YXo,b1,Z_e,KXo,ZXo,wz,ezo,ozo,rzo,v1,e2e,tzo,azo,Az,nzo,szo,lzo,F1,izo,o2e,dzo,czo,r2e,mzo,fzo,T1,QQe,_d,M1,t2e,s9,gzo,a2e,hzo,UQe,No,l9,uzo,bd,pzo,Lz,_zo,bzo,yz,vzo,Fzo,Tzo,i9,Mzo,n2e,Ezo,Czo,wzo,_t,d9,Azo,s2e,Lzo,yzo,vd,xzo,l2e,$zo,kzo,xz,Szo,Rzo,Pzo,E1,Bzo,ro,c9,Izo,i2e,Nzo,qzo,Ua,jzo,d2e,Dzo,Gzo,c2e,Ozo,Vzo,m2e,Xzo,zzo,Wzo,N,C1,f2e,Qzo,Uzo,$z,Hzo,Jzo,Yzo,w1,g2e,Kzo,Zzo,kz,eWo,oWo,rWo,A1,h2e,tWo,aWo,Sz,nWo,sWo,lWo,L1,u2e,iWo,dWo,Rz,cWo,mWo,fWo,y1,p2e,gWo,hWo,Pz,uWo,pWo,_Wo,x1,_2e,bWo,vWo,Bz,FWo,TWo,MWo,$1,b2e,EWo,CWo,Iz,wWo,AWo,LWo,k1,v2e,yWo,xWo,Nz,$Wo,kWo,SWo,S1,F2e,RWo,PWo,qz,BWo,IWo,NWo,R1,T2e,qWo,jWo,jz,DWo,GWo,OWo,P1,M2e,VWo,XWo,Dz,zWo,WWo,QWo,B1,E2e,UWo,HWo,Gz,JWo,YWo,KWo,I1,C2e,ZWo,eQo,Oz,oQo,rQo,tQo,N1,w2e,aQo,nQo,Vz,sQo,lQo,iQo,q1,A2e,dQo,cQo,Xz,mQo,fQo,gQo,j1,L2e,hQo,uQo,zz,pQo,_Qo,bQo,D1,y2e,vQo,FQo,Wz,TQo,MQo,EQo,G1,x2e,CQo,wQo,Qz,AQo,LQo,yQo,O1,$2e,xQo,$Qo,Uz,kQo,SQo,RQo,V1,k2e,PQo,BQo,Hz,IQo,NQo,qQo,X1,S2e,jQo,DQo,Jz,GQo,OQo,VQo,z1,R2e,XQo,zQo,Yz,WQo,QQo,UQo,W1,P2e,HQo,JQo,Kz,YQo,KQo,ZQo,Q1,B2e,eUo,oUo,Zz,rUo,tUo,aUo,U1,I2e,nUo,sUo,eW,lUo,iUo,dUo,H1,N2e,cUo,mUo,oW,fUo,gUo,hUo,J1,q2e,uUo,pUo,rW,_Uo,bUo,vUo,Y1,j2e,FUo,TUo,tW,MUo,EUo,CUo,K1,D2e,wUo,AUo,aW,LUo,yUo,xUo,Z1,G2e,$Uo,kUo,nW,SUo,RUo,PUo,eF,O2e,BUo,IUo,sW,NUo,qUo,jUo,oF,V2e,DUo,GUo,lW,OUo,VUo,XUo,rF,X2e,zUo,WUo,iW,QUo,UUo,HUo,tF,z2e,JUo,YUo,dW,KUo,ZUo,eHo,aF,W2e,oHo,rHo,cW,tHo,aHo,nHo,nF,Q2e,sHo,lHo,mW,iHo,dHo,cHo,sF,U2e,mHo,fHo,fW,gHo,hHo,uHo,lF,H2e,pHo,_Ho,gW,bHo,vHo,FHo,iF,J2e,THo,MHo,hW,EHo,CHo,wHo,dF,Y2e,AHo,LHo,uW,yHo,xHo,$Ho,cF,K2e,kHo,SHo,pW,RHo,PHo,BHo,mF,Z2e,IHo,NHo,_W,qHo,jHo,DHo,fF,ebe,GHo,OHo,bW,VHo,XHo,zHo,gF,obe,WHo,QHo,vW,UHo,HHo,JHo,hF,rbe,YHo,KHo,FW,ZHo,eJo,oJo,uF,tbe,rJo,tJo,TW,aJo,nJo,sJo,pF,abe,lJo,iJo,MW,dJo,cJo,mJo,_F,nbe,fJo,gJo,EW,hJo,uJo,pJo,bF,sbe,_Jo,bJo,CW,vJo,FJo,TJo,vF,lbe,MJo,EJo,wW,CJo,wJo,AJo,FF,ibe,LJo,yJo,AW,xJo,$Jo,kJo,TF,dbe,SJo,RJo,LW,PJo,BJo,IJo,MF,NJo,cbe,qJo,jJo,mbe,DJo,GJo,EF,HQe,Fd,CF,fbe,m9,OJo,gbe,VJo,JQe,qo,f9,XJo,Td,zJo,yW,WJo,QJo,xW,UJo,HJo,JJo,g9,YJo,hbe,KJo,ZJo,eYo,bt,h9,oYo,ube,rYo,tYo,Md,aYo,pbe,nYo,sYo,$W,lYo,iYo,dYo,wF,cYo,to,u9,mYo,_be,fYo,gYo,Ha,hYo,bbe,uYo,pYo,vbe,_Yo,bYo,Fbe,vYo,FYo,TYo,Z,AF,Tbe,MYo,EYo,kW,CYo,wYo,AYo,LF,Mbe,LYo,yYo,SW,xYo,$Yo,kYo,yF,Ebe,SYo,RYo,RW,PYo,BYo,IYo,xF,Cbe,NYo,qYo,PW,jYo,DYo,GYo,$F,wbe,OYo,VYo,BW,XYo,zYo,WYo,kF,Abe,QYo,UYo,IW,HYo,JYo,YYo,SF,Lbe,KYo,ZYo,NW,eKo,oKo,rKo,RF,ybe,tKo,aKo,qW,nKo,sKo,lKo,PF,xbe,iKo,dKo,jW,cKo,mKo,fKo,BF,$be,gKo,hKo,DW,uKo,pKo,_Ko,IF,kbe,bKo,vKo,GW,FKo,TKo,MKo,NF,Sbe,EKo,CKo,OW,wKo,AKo,LKo,qF,Rbe,yKo,xKo,VW,$Ko,kKo,SKo,jF,Pbe,RKo,PKo,XW,BKo,IKo,NKo,DF,Bbe,qKo,jKo,zW,DKo,GKo,OKo,GF,Ibe,VKo,XKo,WW,zKo,WKo,QKo,OF,Nbe,UKo,HKo,QW,JKo,YKo,KKo,VF,qbe,ZKo,eZo,UW,oZo,rZo,tZo,XF,jbe,aZo,nZo,HW,sZo,lZo,iZo,zF,Dbe,dZo,cZo,JW,mZo,fZo,gZo,WF,Gbe,hZo,uZo,YW,pZo,_Zo,bZo,QF,Obe,vZo,FZo,KW,TZo,MZo,EZo,UF,Vbe,CZo,wZo,ZW,AZo,LZo,yZo,HF,Xbe,xZo,$Zo,eQ,kZo,SZo,RZo,JF,zbe,PZo,BZo,oQ,IZo,NZo,qZo,YF,Wbe,jZo,DZo,rQ,GZo,OZo,VZo,KF,Qbe,XZo,zZo,tQ,WZo,QZo,UZo,ZF,Ube,HZo,JZo,aQ,YZo,KZo,ZZo,eT,Hbe,eer,oer,nQ,rer,ter,aer,oT,Jbe,ner,ser,sQ,ler,ier,der,rT,Ybe,cer,mer,lQ,fer,ger,her,tT,uer,Kbe,per,_er,Zbe,ber,ver,aT,YQe,Ed,nT,eve,p9,Fer,ove,Ter,KQe,jo,_9,Mer,Cd,Eer,iQ,Cer,wer,dQ,Aer,Ler,yer,b9,xer,rve,$er,ker,Ser,vt,v9,Rer,tve,Per,Ber,wd,Ier,ave,Ner,qer,cQ,jer,Der,Ger,sT,Oer,ao,F9,Ver,nve,Xer,zer,Ja,Wer,sve,Qer,Uer,lve,Her,Jer,ive,Yer,Ker,Zer,Do,lT,dve,eor,oor,mQ,ror,tor,aor,iT,cve,nor,sor,fQ,lor,ior,dor,dT,mve,cor,mor,gQ,gor,hor,uor,cT,fve,por,_or,hQ,bor,vor,For,mT,gve,Tor,Mor,uQ,Eor,Cor,wor,fT,hve,Aor,Lor,pQ,yor,xor,$or,gT,kor,uve,Sor,Ror,pve,Por,Bor,hT,ZQe,Ad,uT,_ve,T9,Ior,bve,Nor,eUe,Go,M9,qor,Ld,jor,_Q,Dor,Gor,bQ,Oor,Vor,Xor,E9,zor,vve,Wor,Qor,Uor,Ft,C9,Hor,Fve,Jor,Yor,yd,Kor,Tve,Zor,err,vQ,orr,rrr,trr,pT,arr,no,w9,nrr,Mve,srr,lrr,Ya,irr,Eve,drr,crr,Cve,mrr,frr,wve,grr,hrr,urr,H,_T,Ave,prr,_rr,FQ,brr,vrr,Frr,bT,Lve,Trr,Mrr,TQ,Err,Crr,wrr,vT,yve,Arr,Lrr,MQ,yrr,xrr,$rr,FT,xve,krr,Srr,EQ,Rrr,Prr,Brr,TT,$ve,Irr,Nrr,CQ,qrr,jrr,Drr,MT,kve,Grr,Orr,wQ,Vrr,Xrr,zrr,ET,Sve,Wrr,Qrr,AQ,Urr,Hrr,Jrr,CT,Rve,Yrr,Krr,LQ,Zrr,etr,otr,wT,Pve,rtr,ttr,yQ,atr,ntr,str,AT,Bve,ltr,itr,xQ,dtr,ctr,mtr,LT,Ive,ftr,gtr,$Q,htr,utr,ptr,yT,Nve,_tr,btr,kQ,vtr,Ftr,Ttr,xT,qve,Mtr,Etr,SQ,Ctr,wtr,Atr,$T,jve,Ltr,ytr,RQ,xtr,$tr,ktr,kT,Dve,Str,Rtr,PQ,Ptr,Btr,Itr,ST,Gve,Ntr,qtr,BQ,jtr,Dtr,Gtr,RT,Ove,Otr,Vtr,IQ,Xtr,ztr,Wtr,PT,Vve,Qtr,Utr,NQ,Htr,Jtr,Ytr,BT,Xve,Ktr,Ztr,qQ,ear,oar,rar,IT,zve,tar,aar,jQ,nar,sar,lar,NT,Wve,iar,dar,DQ,car,mar,far,qT,Qve,gar,har,GQ,uar,par,_ar,jT,Uve,bar,Far,OQ,Tar,Mar,Ear,DT,Hve,Car,war,VQ,Aar,Lar,yar,GT,Jve,xar,$ar,XQ,kar,Sar,Rar,OT,Yve,Par,Bar,zQ,Iar,Nar,qar,VT,Kve,jar,Dar,WQ,Gar,Oar,Var,XT,Zve,Xar,zar,QQ,War,Qar,Uar,zT,e1e,Har,Jar,UQ,Yar,Kar,Zar,WT,o1e,enr,onr,HQ,rnr,tnr,anr,QT,r1e,nnr,snr,JQ,lnr,inr,dnr,UT,t1e,cnr,mnr,YQ,fnr,gnr,hnr,HT,a1e,unr,pnr,KQ,_nr,bnr,vnr,JT,n1e,Fnr,Tnr,ZQ,Mnr,Enr,Cnr,YT,s1e,wnr,Anr,eU,Lnr,ynr,xnr,KT,l1e,$nr,knr,oU,Snr,Rnr,Pnr,ZT,i1e,Bnr,Inr,rU,Nnr,qnr,jnr,eM,Dnr,d1e,Gnr,Onr,c1e,Vnr,Xnr,oM,oUe,xd,rM,m1e,A9,znr,f1e,Wnr,rUe,Oo,L9,Qnr,$d,Unr,tU,Hnr,Jnr,aU,Ynr,Knr,Znr,y9,esr,g1e,osr,rsr,tsr,Tt,x9,asr,h1e,nsr,ssr,kd,lsr,u1e,isr,dsr,nU,csr,msr,fsr,tM,gsr,so,$9,hsr,p1e,usr,psr,Ka,_sr,_1e,bsr,vsr,b1e,Fsr,Tsr,v1e,Msr,Esr,Csr,V,aM,F1e,wsr,Asr,sU,Lsr,ysr,xsr,nM,T1e,$sr,ksr,lU,Ssr,Rsr,Psr,sM,M1e,Bsr,Isr,iU,Nsr,qsr,jsr,lM,E1e,Dsr,Gsr,dU,Osr,Vsr,Xsr,iM,C1e,zsr,Wsr,cU,Qsr,Usr,Hsr,dM,w1e,Jsr,Ysr,mU,Ksr,Zsr,elr,cM,A1e,olr,rlr,fU,tlr,alr,nlr,mM,L1e,slr,llr,gU,ilr,dlr,clr,fM,y1e,mlr,flr,hU,glr,hlr,ulr,gM,x1e,plr,_lr,uU,blr,vlr,Flr,hM,$1e,Tlr,Mlr,pU,Elr,Clr,wlr,uM,k1e,Alr,Llr,_U,ylr,xlr,$lr,pM,S1e,klr,Slr,bU,Rlr,Plr,Blr,_M,R1e,Ilr,Nlr,vU,qlr,jlr,Dlr,bM,P1e,Glr,Olr,FU,Vlr,Xlr,zlr,vM,B1e,Wlr,Qlr,TU,Ulr,Hlr,Jlr,FM,I1e,Ylr,Klr,MU,Zlr,eir,oir,TM,N1e,rir,tir,EU,air,nir,sir,MM,q1e,lir,iir,CU,dir,cir,mir,EM,j1e,fir,gir,wU,hir,uir,pir,CM,D1e,_ir,bir,AU,vir,Fir,Tir,wM,G1e,Mir,Eir,LU,Cir,wir,Air,AM,O1e,Lir,yir,yU,xir,$ir,kir,LM,V1e,Sir,Rir,xU,Pir,Bir,Iir,yM,X1e,Nir,qir,$U,jir,Dir,Gir,xM,z1e,Oir,Vir,kU,Xir,zir,Wir,$M,W1e,Qir,Uir,SU,Hir,Jir,Yir,kM,Q1e,Kir,Zir,RU,edr,odr,rdr,SM,U1e,tdr,adr,PU,ndr,sdr,ldr,RM,H1e,idr,ddr,BU,cdr,mdr,fdr,PM,J1e,gdr,hdr,IU,udr,pdr,_dr,BM,Y1e,bdr,vdr,NU,Fdr,Tdr,Mdr,IM,K1e,Edr,Cdr,qU,wdr,Adr,Ldr,NM,Z1e,ydr,xdr,jU,$dr,kdr,Sdr,qM,eFe,Rdr,Pdr,DU,Bdr,Idr,Ndr,jM,oFe,qdr,jdr,GU,Ddr,Gdr,Odr,DM,rFe,Vdr,Xdr,OU,zdr,Wdr,Qdr,GM,tFe,Udr,Hdr,VU,Jdr,Ydr,Kdr,OM,aFe,Zdr,ecr,XU,ocr,rcr,tcr,VM,nFe,acr,ncr,zU,scr,lcr,icr,XM,sFe,dcr,ccr,WU,mcr,fcr,gcr,zM,lFe,hcr,ucr,QU,pcr,_cr,bcr,WM,iFe,vcr,Fcr,UU,Tcr,Mcr,Ecr,QM,Ccr,dFe,wcr,Acr,cFe,Lcr,ycr,UM,tUe,Sd,HM,mFe,k9,xcr,fFe,$cr,aUe,Vo,S9,kcr,Rd,Scr,HU,Rcr,Pcr,JU,Bcr,Icr,Ncr,R9,qcr,gFe,jcr,Dcr,Gcr,Mt,P9,Ocr,hFe,Vcr,Xcr,Pd,zcr,uFe,Wcr,Qcr,YU,Ucr,Hcr,Jcr,JM,Ycr,lo,B9,Kcr,pFe,Zcr,emr,Za,omr,_Fe,rmr,tmr,bFe,amr,nmr,vFe,smr,lmr,imr,FFe,YM,TFe,dmr,cmr,KU,mmr,fmr,gmr,KM,hmr,MFe,umr,pmr,EFe,_mr,bmr,ZM,nUe,Bd,eE,CFe,I9,vmr,wFe,Fmr,sUe,Xo,N9,Tmr,Id,Mmr,ZU,Emr,Cmr,eH,wmr,Amr,Lmr,q9,ymr,AFe,xmr,$mr,kmr,Et,j9,Smr,LFe,Rmr,Pmr,Nd,Bmr,yFe,Imr,Nmr,oH,qmr,jmr,Dmr,oE,Gmr,io,D9,Omr,xFe,Vmr,Xmr,en,zmr,$Fe,Wmr,Qmr,kFe,Umr,Hmr,SFe,Jmr,Ymr,Kmr,be,rE,RFe,Zmr,efr,rH,ofr,rfr,tfr,tE,PFe,afr,nfr,tH,sfr,lfr,ifr,aE,BFe,dfr,cfr,aH,mfr,ffr,gfr,nE,IFe,hfr,ufr,nH,pfr,_fr,bfr,sl,NFe,vfr,Ffr,sH,Tfr,Mfr,lH,Efr,Cfr,wfr,sE,qFe,Afr,Lfr,iH,yfr,xfr,$fr,ll,jFe,kfr,Sfr,dH,Rfr,Pfr,cH,Bfr,Ifr,Nfr,lE,DFe,qfr,jfr,mH,Dfr,Gfr,Ofr,Ct,GFe,Vfr,Xfr,fH,zfr,Wfr,gH,Qfr,Ufr,hH,Hfr,Jfr,Yfr,iE,OFe,Kfr,Zfr,uH,egr,ogr,rgr,dE,VFe,tgr,agr,pH,ngr,sgr,lgr,cE,XFe,igr,dgr,_H,cgr,mgr,fgr,mE,zFe,ggr,hgr,bH,ugr,pgr,_gr,fE,WFe,bgr,vgr,vH,Fgr,Tgr,Mgr,gE,QFe,Egr,Cgr,FH,wgr,Agr,Lgr,hE,UFe,ygr,xgr,TH,$gr,kgr,Sgr,uE,HFe,Rgr,Pgr,MH,Bgr,Igr,Ngr,pE,qgr,JFe,jgr,Dgr,YFe,Ggr,Ogr,_E,lUe,qd,bE,KFe,G9,Vgr,ZFe,Xgr,iUe,zo,O9,zgr,jd,Wgr,EH,Qgr,Ugr,CH,Hgr,Jgr,Ygr,V9,Kgr,eTe,Zgr,ehr,ohr,wt,X9,rhr,oTe,thr,ahr,Dd,nhr,rTe,shr,lhr,wH,ihr,dhr,chr,vE,mhr,co,z9,fhr,tTe,ghr,hhr,on,uhr,aTe,phr,_hr,nTe,bhr,vhr,sTe,Fhr,Thr,Mhr,lTe,FE,iTe,Ehr,Chr,AH,whr,Ahr,Lhr,TE,yhr,dTe,xhr,$hr,cTe,khr,Shr,ME,dUe,Gd,EE,mTe,W9,Rhr,fTe,Phr,cUe,Wo,Q9,Bhr,Od,Ihr,LH,Nhr,qhr,yH,jhr,Dhr,Ghr,U9,Ohr,gTe,Vhr,Xhr,zhr,At,H9,Whr,hTe,Qhr,Uhr,Vd,Hhr,uTe,Jhr,Yhr,xH,Khr,Zhr,eur,CE,our,mo,J9,rur,pTe,tur,aur,rn,nur,_Te,sur,lur,bTe,iur,dur,vTe,cur,mur,fur,FTe,wE,TTe,gur,hur,$H,uur,pur,_ur,AE,bur,MTe,vur,Fur,ETe,Tur,Mur,LE,mUe,Xd,yE,CTe,Y9,Eur,wTe,Cur,fUe,Qo,K9,wur,zd,Aur,kH,Lur,yur,SH,xur,$ur,kur,Z9,Sur,ATe,Rur,Pur,Bur,Lt,ex,Iur,LTe,Nur,qur,Wd,jur,yTe,Dur,Gur,RH,Our,Vur,Xur,xE,zur,fo,ox,Wur,xTe,Qur,Uur,tn,Hur,$Te,Jur,Yur,kTe,Kur,Zur,STe,epr,opr,rpr,RTe,$E,PTe,tpr,apr,PH,npr,spr,lpr,kE,ipr,BTe,dpr,cpr,ITe,mpr,fpr,SE,gUe,Qd,RE,NTe,rx,gpr,qTe,hpr,hUe,Uo,tx,upr,Ud,ppr,BH,_pr,bpr,IH,vpr,Fpr,Tpr,ax,Mpr,jTe,Epr,Cpr,wpr,yt,nx,Apr,DTe,Lpr,ypr,Hd,xpr,GTe,$pr,kpr,NH,Spr,Rpr,Ppr,PE,Bpr,go,sx,Ipr,OTe,Npr,qpr,an,jpr,VTe,Dpr,Gpr,XTe,Opr,Vpr,zTe,Xpr,zpr,Wpr,Pe,BE,WTe,Qpr,Upr,qH,Hpr,Jpr,Ypr,IE,QTe,Kpr,Zpr,jH,e_r,o_r,r_r,NE,UTe,t_r,a_r,DH,n_r,s_r,l_r,qE,HTe,i_r,d_r,GH,c_r,m_r,f_r,jE,JTe,g_r,h_r,OH,u_r,p_r,__r,DE,YTe,b_r,v_r,VH,F_r,T_r,M_r,GE,KTe,E_r,C_r,XH,w_r,A_r,L_r,OE,ZTe,y_r,x_r,zH,$_r,k_r,S_r,VE,eMe,R_r,P_r,WH,B_r,I_r,N_r,XE,q_r,oMe,j_r,D_r,rMe,G_r,O_r,zE,uUe,Jd,WE,tMe,lx,V_r,aMe,X_r,pUe,Ho,ix,z_r,Yd,W_r,QH,Q_r,U_r,UH,H_r,J_r,Y_r,dx,K_r,nMe,Z_r,e2r,o2r,xt,cx,r2r,sMe,t2r,a2r,Kd,n2r,lMe,s2r,l2r,HH,i2r,d2r,c2r,QE,m2r,ho,mx,f2r,iMe,g2r,h2r,nn,u2r,dMe,p2r,_2r,cMe,b2r,v2r,mMe,F2r,T2r,M2r,st,UE,fMe,E2r,C2r,JH,w2r,A2r,L2r,HE,gMe,y2r,x2r,YH,$2r,k2r,S2r,JE,hMe,R2r,P2r,KH,B2r,I2r,N2r,YE,uMe,q2r,j2r,ZH,D2r,G2r,O2r,KE,pMe,V2r,X2r,eJ,z2r,W2r,Q2r,ZE,U2r,_Me,H2r,J2r,bMe,Y2r,K2r,e4,_Ue,Zd,o4,vMe,fx,Z2r,FMe,ebr,bUe,Jo,gx,obr,ec,rbr,oJ,tbr,abr,rJ,nbr,sbr,lbr,hx,ibr,TMe,dbr,cbr,mbr,$t,ux,fbr,MMe,gbr,hbr,oc,ubr,EMe,pbr,_br,tJ,bbr,vbr,Fbr,r4,Tbr,uo,px,Mbr,CMe,Ebr,Cbr,sn,wbr,wMe,Abr,Lbr,AMe,ybr,xbr,LMe,$br,kbr,Sbr,Le,t4,yMe,Rbr,Pbr,aJ,Bbr,Ibr,Nbr,a4,xMe,qbr,jbr,nJ,Dbr,Gbr,Obr,n4,$Me,Vbr,Xbr,sJ,zbr,Wbr,Qbr,s4,kMe,Ubr,Hbr,lJ,Jbr,Ybr,Kbr,l4,SMe,Zbr,evr,iJ,ovr,rvr,tvr,i4,RMe,avr,nvr,dJ,svr,lvr,ivr,d4,PMe,dvr,cvr,cJ,mvr,fvr,gvr,c4,BMe,hvr,uvr,mJ,pvr,_vr,bvr,m4,IMe,vvr,Fvr,fJ,Tvr,Mvr,Evr,f4,NMe,Cvr,wvr,gJ,Avr,Lvr,yvr,g4,xvr,qMe,$vr,kvr,jMe,Svr,Rvr,h4,vUe,rc,u4,DMe,_x,Pvr,GMe,Bvr,FUe,Yo,bx,Ivr,tc,Nvr,hJ,qvr,jvr,uJ,Dvr,Gvr,Ovr,vx,Vvr,OMe,Xvr,zvr,Wvr,kt,Fx,Qvr,VMe,Uvr,Hvr,ac,Jvr,XMe,Yvr,Kvr,pJ,Zvr,e1r,o1r,p4,r1r,po,Tx,t1r,zMe,a1r,n1r,ln,s1r,WMe,l1r,i1r,QMe,d1r,c1r,UMe,m1r,f1r,g1r,Mx,_4,HMe,h1r,u1r,_J,p1r,_1r,b1r,b4,JMe,v1r,F1r,bJ,T1r,M1r,E1r,v4,C1r,YMe,w1r,A1r,KMe,L1r,y1r,F4,TUe,nc,T4,ZMe,Ex,x1r,eEe,$1r,MUe,Ko,Cx,k1r,sc,S1r,vJ,R1r,P1r,FJ,B1r,I1r,N1r,wx,q1r,oEe,j1r,D1r,G1r,St,Ax,O1r,rEe,V1r,X1r,lc,z1r,tEe,W1r,Q1r,TJ,U1r,H1r,J1r,M4,Y1r,_o,Lx,K1r,aEe,Z1r,eFr,dn,oFr,nEe,rFr,tFr,sEe,aFr,nFr,lEe,sFr,lFr,iFr,lt,E4,iEe,dFr,cFr,MJ,mFr,fFr,gFr,C4,dEe,hFr,uFr,EJ,pFr,_Fr,bFr,w4,cEe,vFr,FFr,CJ,TFr,MFr,EFr,A4,mEe,CFr,wFr,wJ,AFr,LFr,yFr,L4,fEe,xFr,$Fr,AJ,kFr,SFr,RFr,y4,PFr,gEe,BFr,IFr,hEe,NFr,qFr,x4,EUe,ic,$4,uEe,yx,jFr,pEe,DFr,CUe,Zo,xx,GFr,dc,OFr,LJ,VFr,XFr,yJ,zFr,WFr,QFr,$x,UFr,_Ee,HFr,JFr,YFr,Rt,kx,KFr,bEe,ZFr,eTr,cc,oTr,vEe,rTr,tTr,xJ,aTr,nTr,sTr,k4,lTr,bo,Sx,iTr,FEe,dTr,cTr,cn,mTr,TEe,fTr,gTr,MEe,hTr,uTr,EEe,pTr,_Tr,bTr,mn,S4,CEe,vTr,FTr,$J,TTr,MTr,ETr,R4,wEe,CTr,wTr,kJ,ATr,LTr,yTr,P4,AEe,xTr,$Tr,SJ,kTr,STr,RTr,B4,LEe,PTr,BTr,RJ,ITr,NTr,qTr,I4,jTr,yEe,DTr,GTr,xEe,OTr,VTr,N4,wUe,mc,q4,$Ee,Rx,XTr,kEe,zTr,AUe,er,Px,WTr,fc,QTr,PJ,UTr,HTr,BJ,JTr,YTr,KTr,Bx,ZTr,SEe,eMr,oMr,rMr,Pt,Ix,tMr,REe,aMr,nMr,gc,sMr,PEe,lMr,iMr,IJ,dMr,cMr,mMr,j4,fMr,vo,Nx,gMr,BEe,hMr,uMr,fn,pMr,IEe,_Mr,bMr,NEe,vMr,FMr,qEe,TMr,MMr,EMr,qx,D4,jEe,CMr,wMr,NJ,AMr,LMr,yMr,G4,DEe,xMr,$Mr,qJ,kMr,SMr,RMr,O4,PMr,GEe,BMr,IMr,OEe,NMr,qMr,V4,LUe,hc,X4,VEe,jx,jMr,XEe,DMr,yUe,or,Dx,GMr,uc,OMr,jJ,VMr,XMr,DJ,zMr,WMr,QMr,Gx,UMr,zEe,HMr,JMr,YMr,Bt,Ox,KMr,WEe,ZMr,eEr,pc,oEr,QEe,rEr,tEr,GJ,aEr,nEr,sEr,z4,lEr,Fo,Vx,iEr,UEe,dEr,cEr,gn,mEr,HEe,fEr,gEr,JEe,hEr,uEr,YEe,pEr,_Er,bEr,KEe,W4,ZEe,vEr,FEr,OJ,TEr,MEr,EEr,Q4,CEr,e4e,wEr,AEr,o4e,LEr,yEr,U4,xUe,_c,H4,r4e,Xx,xEr,t4e,$Er,$Ue,rr,zx,kEr,bc,SEr,VJ,REr,PEr,XJ,BEr,IEr,NEr,Wx,qEr,a4e,jEr,DEr,GEr,It,Qx,OEr,n4e,VEr,XEr,vc,zEr,s4e,WEr,QEr,zJ,UEr,HEr,JEr,J4,YEr,To,Ux,KEr,l4e,ZEr,e4r,hn,o4r,i4e,r4r,t4r,d4e,a4r,n4r,c4e,s4r,l4r,i4r,it,Y4,m4e,d4r,c4r,WJ,m4r,f4r,g4r,K4,f4e,h4r,u4r,QJ,p4r,_4r,b4r,Z4,g4e,v4r,F4r,UJ,T4r,M4r,E4r,eC,h4e,C4r,w4r,HJ,A4r,L4r,y4r,oC,u4e,x4r,$4r,JJ,k4r,S4r,R4r,rC,P4r,p4e,B4r,I4r,_4e,N4r,q4r,tC,kUe,Fc,aC,b4e,Hx,j4r,v4e,D4r,SUe,tr,Jx,G4r,Tc,O4r,YJ,V4r,X4r,KJ,z4r,W4r,Q4r,Yx,U4r,F4e,H4r,J4r,Y4r,Nt,Kx,K4r,T4e,Z4r,eCr,Mc,oCr,M4e,rCr,tCr,ZJ,aCr,nCr,sCr,nC,lCr,Mo,Zx,iCr,E4e,dCr,cCr,un,mCr,C4e,fCr,gCr,w4e,hCr,uCr,A4e,pCr,_Cr,bCr,L4e,sC,y4e,vCr,FCr,eY,TCr,MCr,ECr,lC,CCr,x4e,wCr,ACr,$4e,LCr,yCr,iC,RUe,Ec,dC,k4e,e$,xCr,S4e,$Cr,PUe,ar,o$,kCr,Cc,SCr,oY,RCr,PCr,rY,BCr,ICr,NCr,r$,qCr,R4e,jCr,DCr,GCr,qt,t$,OCr,P4e,VCr,XCr,wc,zCr,B4e,WCr,QCr,tY,UCr,HCr,JCr,cC,YCr,Rr,a$,KCr,I4e,ZCr,e3r,pn,o3r,N4e,r3r,t3r,q4e,a3r,n3r,j4e,s3r,l3r,i3r,q,mC,D4e,d3r,c3r,aY,m3r,f3r,g3r,fC,G4e,h3r,u3r,nY,p3r,_3r,b3r,gC,O4e,v3r,F3r,sY,T3r,M3r,E3r,hC,V4e,C3r,w3r,lY,A3r,L3r,y3r,uC,X4e,x3r,$3r,iY,k3r,S3r,R3r,pC,z4e,P3r,B3r,dY,I3r,N3r,q3r,_C,W4e,j3r,D3r,cY,G3r,O3r,V3r,bC,Q4e,X3r,z3r,mY,W3r,Q3r,U3r,vC,U4e,H3r,J3r,fY,Y3r,K3r,Z3r,FC,H4e,e5r,o5r,gY,r5r,t5r,a5r,TC,J4e,n5r,s5r,hY,l5r,i5r,d5r,MC,Y4e,c5r,m5r,uY,f5r,g5r,h5r,EC,K4e,u5r,p5r,pY,_5r,b5r,v5r,CC,Z4e,F5r,T5r,_Y,M5r,E5r,C5r,wC,eCe,w5r,A5r,bY,L5r,y5r,x5r,AC,oCe,$5r,k5r,vY,S5r,R5r,P5r,LC,rCe,B5r,I5r,FY,N5r,q5r,j5r,yC,tCe,D5r,G5r,TY,O5r,V5r,X5r,il,aCe,z5r,W5r,MY,Q5r,U5r,EY,H5r,J5r,Y5r,xC,nCe,K5r,Z5r,CY,e0r,o0r,r0r,$C,sCe,t0r,a0r,wY,n0r,s0r,l0r,kC,lCe,i0r,d0r,AY,c0r,m0r,f0r,SC,iCe,g0r,h0r,LY,u0r,p0r,_0r,RC,dCe,b0r,v0r,yY,F0r,T0r,M0r,PC,cCe,E0r,C0r,xY,w0r,A0r,L0r,BC,mCe,y0r,x0r,$Y,$0r,k0r,S0r,IC,fCe,R0r,P0r,kY,B0r,I0r,N0r,NC,gCe,q0r,j0r,SY,D0r,G0r,O0r,qC,hCe,V0r,X0r,RY,z0r,W0r,Q0r,jC,uCe,U0r,H0r,PY,J0r,Y0r,K0r,DC,pCe,Z0r,ewr,BY,owr,rwr,twr,GC,_Ce,awr,nwr,IY,swr,lwr,iwr,OC,bCe,dwr,cwr,NY,mwr,fwr,gwr,VC,vCe,hwr,uwr,qY,pwr,_wr,bwr,XC,FCe,vwr,Fwr,jY,Twr,Mwr,Ewr,zC,TCe,Cwr,wwr,DY,Awr,Lwr,ywr,WC,MCe,xwr,$wr,GY,kwr,Swr,Rwr,QC,ECe,Pwr,Bwr,OY,Iwr,Nwr,qwr,UC,CCe,jwr,Dwr,VY,Gwr,Owr,Vwr,HC,wCe,Xwr,zwr,XY,Wwr,Qwr,Uwr,JC,ACe,Hwr,Jwr,zY,Ywr,Kwr,Zwr,YC,LCe,e6r,o6r,WY,r6r,t6r,a6r,KC,yCe,n6r,s6r,QY,l6r,i6r,d6r,ZC,xCe,c6r,m6r,UY,f6r,g6r,h6r,e3,$Ce,u6r,p6r,HY,_6r,b6r,v6r,o3,kCe,F6r,T6r,JY,M6r,E6r,C6r,r3,SCe,w6r,A6r,YY,L6r,y6r,x6r,t3,RCe,$6r,k6r,KY,S6r,R6r,P6r,a3,PCe,B6r,I6r,ZY,N6r,q6r,j6r,n3,BCe,D6r,G6r,eK,O6r,V6r,X6r,s3,ICe,z6r,W6r,oK,Q6r,U6r,H6r,l3,BUe,Ac,i3,NCe,n$,J6r,qCe,Y6r,IUe,nr,s$,K6r,Lc,Z6r,rK,eAr,oAr,tK,rAr,tAr,aAr,l$,nAr,jCe,sAr,lAr,iAr,jt,i$,dAr,DCe,cAr,mAr,yc,fAr,GCe,gAr,hAr,aK,uAr,pAr,_Ar,d3,bAr,Pr,d$,vAr,OCe,FAr,TAr,_n,MAr,VCe,EAr,CAr,XCe,wAr,AAr,zCe,LAr,yAr,xAr,se,c3,WCe,$Ar,kAr,nK,SAr,RAr,PAr,m3,QCe,BAr,IAr,sK,NAr,qAr,jAr,f3,UCe,DAr,GAr,lK,OAr,VAr,XAr,g3,HCe,zAr,WAr,iK,QAr,UAr,HAr,h3,JCe,JAr,YAr,dK,KAr,ZAr,e7r,u3,YCe,o7r,r7r,cK,t7r,a7r,n7r,p3,KCe,s7r,l7r,mK,i7r,d7r,c7r,_3,ZCe,m7r,f7r,fK,g7r,h7r,u7r,b3,e3e,p7r,_7r,gK,b7r,v7r,F7r,v3,o3e,T7r,M7r,hK,E7r,C7r,w7r,F3,r3e,A7r,L7r,uK,y7r,x7r,$7r,T3,t3e,k7r,S7r,pK,R7r,P7r,B7r,M3,a3e,I7r,N7r,_K,q7r,j7r,D7r,E3,n3e,G7r,O7r,bK,V7r,X7r,z7r,C3,s3e,W7r,Q7r,vK,U7r,H7r,J7r,w3,l3e,Y7r,K7r,FK,Z7r,eLr,oLr,A3,i3e,rLr,tLr,TK,aLr,nLr,sLr,L3,d3e,lLr,iLr,MK,dLr,cLr,mLr,y3,c3e,fLr,gLr,EK,hLr,uLr,pLr,x3,m3e,_Lr,bLr,CK,vLr,FLr,TLr,$3,f3e,MLr,ELr,wK,CLr,wLr,ALr,k3,g3e,LLr,yLr,AK,xLr,$Lr,kLr,S3,h3e,SLr,RLr,LK,PLr,BLr,ILr,R3,NUe,xc,P3,u3e,c$,NLr,p3e,qLr,qUe,sr,m$,jLr,$c,DLr,yK,GLr,OLr,xK,VLr,XLr,zLr,f$,WLr,_3e,QLr,ULr,HLr,Dt,g$,JLr,b3e,YLr,KLr,kc,ZLr,v3e,eyr,oyr,$K,ryr,tyr,ayr,B3,nyr,Br,h$,syr,F3e,lyr,iyr,bn,dyr,T3e,cyr,myr,M3e,fyr,gyr,E3e,hyr,uyr,pyr,Me,I3,C3e,_yr,byr,kK,vyr,Fyr,Tyr,N3,w3e,Myr,Eyr,SK,Cyr,wyr,Ayr,q3,A3e,Lyr,yyr,RK,xyr,$yr,kyr,j3,L3e,Syr,Ryr,PK,Pyr,Byr,Iyr,D3,y3e,Nyr,qyr,BK,jyr,Dyr,Gyr,G3,x3e,Oyr,Vyr,IK,Xyr,zyr,Wyr,O3,$3e,Qyr,Uyr,NK,Hyr,Jyr,Yyr,V3,k3e,Kyr,Zyr,qK,e8r,o8r,r8r,X3,S3e,t8r,a8r,jK,n8r,s8r,l8r,z3,R3e,i8r,d8r,DK,c8r,m8r,f8r,W3,P3e,g8r,h8r,GK,u8r,p8r,_8r,Q3,B3e,b8r,v8r,OK,F8r,T8r,M8r,U3,I3e,E8r,C8r,VK,w8r,A8r,L8r,H3,jUe,Sc,J3,N3e,u$,y8r,q3e,x8r,DUe,lr,p$,$8r,Rc,k8r,XK,S8r,R8r,zK,P8r,B8r,I8r,_$,N8r,j3e,q8r,j8r,D8r,Gt,b$,G8r,D3e,O8r,V8r,Pc,X8r,G3e,z8r,W8r,WK,Q8r,U8r,H8r,Y3,J8r,Ir,v$,Y8r,O3e,K8r,Z8r,vn,e9r,V3e,o9r,r9r,X3e,t9r,a9r,z3e,n9r,s9r,l9r,Ve,K3,W3e,i9r,d9r,QK,c9r,m9r,f9r,Z3,Q3e,g9r,h9r,UK,u9r,p9r,_9r,dl,U3e,b9r,v9r,HK,F9r,T9r,JK,M9r,E9r,C9r,e5,H3e,w9r,A9r,YK,L9r,y9r,x9r,o5,J3e,$9r,k9r,KK,S9r,R9r,P9r,r5,Y3e,B9r,I9r,ZK,N9r,q9r,j9r,t5,K3e,D9r,G9r,eZ,O9r,V9r,X9r,a5,Z3e,z9r,W9r,oZ,Q9r,U9r,H9r,n5,GUe,Bc,s5,e5e,F$,J9r,o5e,Y9r,OUe,ir,T$,K9r,Ic,Z9r,rZ,exr,oxr,tZ,rxr,txr,axr,M$,nxr,r5e,sxr,lxr,ixr,Ot,E$,dxr,t5e,cxr,mxr,Nc,fxr,a5e,gxr,hxr,aZ,uxr,pxr,_xr,l5,bxr,Nr,C$,vxr,n5e,Fxr,Txr,Fn,Mxr,s5e,Exr,Cxr,l5e,wxr,Axr,i5e,Lxr,yxr,xxr,w$,i5,d5e,$xr,kxr,nZ,Sxr,Rxr,Pxr,d5,c5e,Bxr,Ixr,sZ,Nxr,qxr,jxr,c5,VUe,qc,m5,m5e,A$,Dxr,f5e,Gxr,XUe,dr,L$,Oxr,jc,Vxr,lZ,Xxr,zxr,iZ,Wxr,Qxr,Uxr,y$,Hxr,g5e,Jxr,Yxr,Kxr,Vt,x$,Zxr,h5e,e$r,o$r,Dc,r$r,u5e,t$r,a$r,dZ,n$r,s$r,l$r,f5,i$r,qr,$$,d$r,p5e,c$r,m$r,Tn,f$r,_5e,g$r,h$r,b5e,u$r,p$r,v5e,_$r,b$r,v$r,ie,g5,F5e,F$r,T$r,cZ,M$r,E$r,C$r,h5,T5e,w$r,A$r,mZ,L$r,y$r,x$r,u5,M5e,$$r,k$r,fZ,S$r,R$r,P$r,p5,E5e,B$r,I$r,gZ,N$r,q$r,j$r,_5,C5e,D$r,G$r,hZ,O$r,V$r,X$r,b5,w5e,z$r,W$r,uZ,Q$r,U$r,H$r,v5,A5e,J$r,Y$r,pZ,K$r,Z$r,ekr,F5,L5e,okr,rkr,_Z,tkr,akr,nkr,T5,y5e,skr,lkr,bZ,ikr,dkr,ckr,M5,x5e,mkr,fkr,vZ,gkr,hkr,ukr,E5,$5e,pkr,_kr,FZ,bkr,vkr,Fkr,C5,k5e,Tkr,Mkr,TZ,Ekr,Ckr,wkr,w5,S5e,Akr,Lkr,MZ,ykr,xkr,$kr,A5,R5e,kkr,Skr,EZ,Rkr,Pkr,Bkr,L5,P5e,Ikr,Nkr,CZ,qkr,jkr,Dkr,y5,B5e,Gkr,Okr,wZ,Vkr,Xkr,zkr,x5,I5e,Wkr,Qkr,AZ,Ukr,Hkr,Jkr,$5,N5e,Ykr,Kkr,LZ,Zkr,eSr,oSr,k5,q5e,rSr,tSr,yZ,aSr,nSr,sSr,S5,j5e,lSr,iSr,xZ,dSr,cSr,mSr,R5,zUe,Gc,P5,D5e,k$,fSr,G5e,gSr,WUe,cr,S$,hSr,Oc,uSr,$Z,pSr,_Sr,kZ,bSr,vSr,FSr,R$,TSr,O5e,MSr,ESr,CSr,Xt,P$,wSr,V5e,ASr,LSr,Vc,ySr,X5e,xSr,$Sr,SZ,kSr,SSr,RSr,B5,PSr,jr,B$,BSr,z5e,ISr,NSr,Mn,qSr,W5e,jSr,DSr,Q5e,GSr,OSr,U5e,VSr,XSr,zSr,ye,I5,H5e,WSr,QSr,RZ,USr,HSr,JSr,N5,J5e,YSr,KSr,PZ,ZSr,eRr,oRr,q5,Y5e,rRr,tRr,BZ,aRr,nRr,sRr,j5,K5e,lRr,iRr,IZ,dRr,cRr,mRr,D5,Z5e,fRr,gRr,NZ,hRr,uRr,pRr,G5,e0e,_Rr,bRr,qZ,vRr,FRr,TRr,O5,o0e,MRr,ERr,jZ,CRr,wRr,ARr,V5,r0e,LRr,yRr,DZ,xRr,$Rr,kRr,X5,t0e,SRr,RRr,GZ,PRr,BRr,IRr,z5,a0e,NRr,qRr,OZ,jRr,DRr,GRr,W5,QUe,Xc,Q5,n0e,I$,ORr,s0e,VRr,UUe,mr,N$,XRr,zc,zRr,VZ,WRr,QRr,XZ,URr,HRr,JRr,q$,YRr,l0e,KRr,ZRr,ePr,zt,j$,oPr,i0e,rPr,tPr,Wc,aPr,d0e,nPr,sPr,zZ,lPr,iPr,dPr,U5,cPr,Dr,D$,mPr,c0e,fPr,gPr,En,hPr,m0e,uPr,pPr,f0e,_Pr,bPr,g0e,vPr,FPr,TPr,te,H5,h0e,MPr,EPr,WZ,CPr,wPr,APr,J5,u0e,LPr,yPr,QZ,xPr,$Pr,kPr,Y5,p0e,SPr,RPr,UZ,PPr,BPr,IPr,K5,_0e,NPr,qPr,HZ,jPr,DPr,GPr,Z5,b0e,OPr,VPr,JZ,XPr,zPr,WPr,e0,v0e,QPr,UPr,YZ,HPr,JPr,YPr,o0,F0e,KPr,ZPr,KZ,eBr,oBr,rBr,r0,T0e,tBr,aBr,ZZ,nBr,sBr,lBr,t0,M0e,iBr,dBr,eee,cBr,mBr,fBr,a0,E0e,gBr,hBr,oee,uBr,pBr,_Br,n0,C0e,bBr,vBr,ree,FBr,TBr,MBr,s0,w0e,EBr,CBr,tee,wBr,ABr,LBr,l0,A0e,yBr,xBr,aee,$Br,kBr,SBr,i0,L0e,RBr,PBr,nee,BBr,IBr,NBr,d0,y0e,qBr,jBr,see,DBr,GBr,OBr,c0,x0e,VBr,XBr,lee,zBr,WBr,QBr,m0,$0e,UBr,HBr,iee,JBr,YBr,KBr,f0,k0e,ZBr,eIr,dee,oIr,rIr,tIr,g0,S0e,aIr,nIr,cee,sIr,lIr,iIr,h0,R0e,dIr,cIr,mee,mIr,fIr,gIr,u0,P0e,hIr,uIr,fee,pIr,_Ir,bIr,p0,B0e,vIr,FIr,gee,TIr,MIr,EIr,_0,I0e,CIr,wIr,hee,AIr,LIr,yIr,b0,N0e,xIr,$Ir,uee,kIr,SIr,RIr,v0,q0e,PIr,BIr,pee,IIr,NIr,qIr,F0,j0e,jIr,DIr,_ee,GIr,OIr,VIr,T0,HUe,Qc,M0,D0e,G$,XIr,G0e,zIr,JUe,fr,O$,WIr,Uc,QIr,bee,UIr,HIr,vee,JIr,YIr,KIr,V$,ZIr,O0e,eNr,oNr,rNr,Wt,X$,tNr,V0e,aNr,nNr,Hc,sNr,X0e,lNr,iNr,Fee,dNr,cNr,mNr,E0,fNr,Gr,z$,gNr,z0e,hNr,uNr,Cn,pNr,W0e,_Nr,bNr,Q0e,vNr,FNr,U0e,TNr,MNr,ENr,ve,C0,H0e,CNr,wNr,Tee,ANr,LNr,yNr,w0,J0e,xNr,$Nr,Mee,kNr,SNr,RNr,A0,Y0e,PNr,BNr,Eee,INr,NNr,qNr,L0,K0e,jNr,DNr,Cee,GNr,ONr,VNr,y0,Z0e,XNr,zNr,wee,WNr,QNr,UNr,x0,ewe,HNr,JNr,Aee,YNr,KNr,ZNr,$0,owe,eqr,oqr,Lee,rqr,tqr,aqr,k0,rwe,nqr,sqr,yee,lqr,iqr,dqr,S0,twe,cqr,mqr,xee,fqr,gqr,hqr,R0,awe,uqr,pqr,$ee,_qr,bqr,vqr,P0,nwe,Fqr,Tqr,kee,Mqr,Eqr,Cqr,B0,swe,wqr,Aqr,See,Lqr,yqr,xqr,I0,lwe,$qr,kqr,Ree,Sqr,Rqr,Pqr,N0,iwe,Bqr,Iqr,Pee,Nqr,qqr,jqr,q0,dwe,Dqr,Gqr,Bee,Oqr,Vqr,Xqr,j0,cwe,zqr,Wqr,Iee,Qqr,Uqr,Hqr,D0,mwe,Jqr,Yqr,Nee,Kqr,Zqr,ejr,G0,YUe,Jc,O0,fwe,W$,ojr,gwe,rjr,KUe,gr,Q$,tjr,Yc,ajr,qee,njr,sjr,jee,ljr,ijr,djr,U$,cjr,hwe,mjr,fjr,gjr,Qt,H$,hjr,uwe,ujr,pjr,Kc,_jr,pwe,bjr,vjr,Dee,Fjr,Tjr,Mjr,V0,Ejr,Or,J$,Cjr,_we,wjr,Ajr,wn,Ljr,bwe,yjr,xjr,vwe,$jr,kjr,Fwe,Sjr,Rjr,Pjr,Y$,X0,Twe,Bjr,Ijr,Gee,Njr,qjr,jjr,z0,Mwe,Djr,Gjr,Oee,Ojr,Vjr,Xjr,W0,ZUe,Zc,Q0,Ewe,K$,zjr,Cwe,Wjr,eHe,hr,Z$,Qjr,em,Ujr,Vee,Hjr,Jjr,Xee,Yjr,Kjr,Zjr,ek,eDr,wwe,oDr,rDr,tDr,Ut,ok,aDr,Awe,nDr,sDr,om,lDr,Lwe,iDr,dDr,zee,cDr,mDr,fDr,U0,gDr,Vr,rk,hDr,ywe,uDr,pDr,An,_Dr,xwe,bDr,vDr,$we,FDr,TDr,kwe,MDr,EDr,CDr,Swe,H0,Rwe,wDr,ADr,Wee,LDr,yDr,xDr,J0,oHe,rm,Y0,Pwe,tk,$Dr,Bwe,kDr,rHe,ur,ak,SDr,tm,RDr,Qee,PDr,BDr,Uee,IDr,NDr,qDr,nk,jDr,Iwe,DDr,GDr,ODr,Ht,sk,VDr,Nwe,XDr,zDr,am,WDr,qwe,QDr,UDr,Hee,HDr,JDr,YDr,K0,KDr,Xr,lk,ZDr,jwe,eGr,oGr,Ln,rGr,Dwe,tGr,aGr,Gwe,nGr,sGr,Owe,lGr,iGr,dGr,de,Z0,Vwe,cGr,mGr,Jee,fGr,gGr,hGr,ew,Xwe,uGr,pGr,Yee,_Gr,bGr,vGr,ow,zwe,FGr,TGr,Kee,MGr,EGr,CGr,rw,Wwe,wGr,AGr,Zee,LGr,yGr,xGr,tw,Qwe,$Gr,kGr,eoe,SGr,RGr,PGr,aw,Uwe,BGr,IGr,ooe,NGr,qGr,jGr,nw,Hwe,DGr,GGr,roe,OGr,VGr,XGr,sw,Jwe,zGr,WGr,toe,QGr,UGr,HGr,lw,Ywe,JGr,YGr,aoe,KGr,ZGr,eOr,iw,Kwe,oOr,rOr,noe,tOr,aOr,nOr,dw,Zwe,sOr,lOr,soe,iOr,dOr,cOr,cw,e6e,mOr,fOr,loe,gOr,hOr,uOr,mw,o6e,pOr,_Or,ioe,bOr,vOr,FOr,fw,r6e,TOr,MOr,doe,EOr,COr,wOr,gw,t6e,AOr,LOr,coe,yOr,xOr,$Or,hw,a6e,kOr,SOr,moe,ROr,POr,BOr,uw,n6e,IOr,NOr,foe,qOr,jOr,DOr,pw,s6e,GOr,OOr,goe,VOr,XOr,zOr,_w,l6e,WOr,QOr,hoe,UOr,HOr,JOr,bw,i6e,YOr,KOr,uoe,ZOr,eVr,oVr,vw,tHe,nm,Fw,d6e,ik,rVr,c6e,tVr,aHe,pr,dk,aVr,sm,nVr,poe,sVr,lVr,_oe,iVr,dVr,cVr,ck,mVr,m6e,fVr,gVr,hVr,Jt,mk,uVr,f6e,pVr,_Vr,lm,bVr,g6e,vVr,FVr,boe,TVr,MVr,EVr,Tw,CVr,zr,fk,wVr,h6e,AVr,LVr,yn,yVr,u6e,xVr,$Vr,p6e,kVr,SVr,_6e,RVr,PVr,BVr,ce,Mw,b6e,IVr,NVr,voe,qVr,jVr,DVr,Ew,v6e,GVr,OVr,Foe,VVr,XVr,zVr,Cw,F6e,WVr,QVr,Toe,UVr,HVr,JVr,ww,T6e,YVr,KVr,Moe,ZVr,eXr,oXr,Aw,M6e,rXr,tXr,Eoe,aXr,nXr,sXr,Lw,E6e,lXr,iXr,Coe,dXr,cXr,mXr,yw,C6e,fXr,gXr,woe,hXr,uXr,pXr,xw,w6e,_Xr,bXr,Aoe,vXr,FXr,TXr,$w,A6e,MXr,EXr,Loe,CXr,wXr,AXr,kw,L6e,LXr,yXr,yoe,xXr,$Xr,kXr,Sw,y6e,SXr,RXr,xoe,PXr,BXr,IXr,Rw,x6e,NXr,qXr,$oe,jXr,DXr,GXr,Pw,$6e,OXr,VXr,koe,XXr,zXr,WXr,Bw,k6e,QXr,UXr,Soe,HXr,JXr,YXr,Iw,S6e,KXr,ZXr,Roe,ezr,ozr,rzr,Nw,R6e,tzr,azr,Poe,nzr,szr,lzr,qw,P6e,izr,dzr,Boe,czr,mzr,fzr,jw,B6e,gzr,hzr,Ioe,uzr,pzr,_zr,Dw,I6e,bzr,vzr,Noe,Fzr,Tzr,Mzr,Gw,N6e,Ezr,Czr,qoe,wzr,Azr,Lzr,Ow,nHe,im,Vw,q6e,gk,yzr,j6e,xzr,sHe,_r,hk,$zr,dm,kzr,joe,Szr,Rzr,Doe,Pzr,Bzr,Izr,uk,Nzr,D6e,qzr,jzr,Dzr,Yt,pk,Gzr,G6e,Ozr,Vzr,cm,Xzr,O6e,zzr,Wzr,Goe,Qzr,Uzr,Hzr,Xw,Jzr,Wr,_k,Yzr,V6e,Kzr,Zzr,xn,eWr,X6e,oWr,rWr,z6e,tWr,aWr,W6e,nWr,sWr,lWr,Q6e,zw,U6e,iWr,dWr,Ooe,cWr,mWr,fWr,Ww,lHe,mm,Qw,H6e,bk,gWr,J6e,hWr,iHe,br,vk,uWr,fm,pWr,Voe,_Wr,bWr,Xoe,vWr,FWr,TWr,Fk,MWr,Y6e,EWr,CWr,wWr,Kt,Tk,AWr,K6e,LWr,yWr,gm,xWr,Z6e,$Wr,kWr,zoe,SWr,RWr,PWr,Uw,BWr,Qr,Mk,IWr,eAe,NWr,qWr,$n,jWr,oAe,DWr,GWr,rAe,OWr,VWr,tAe,XWr,zWr,WWr,aAe,Hw,nAe,QWr,UWr,Woe,HWr,JWr,YWr,Jw,dHe,hm,Yw,sAe,Ek,KWr,lAe,ZWr,cHe,vr,Ck,eQr,um,oQr,Qoe,rQr,tQr,Uoe,aQr,nQr,sQr,wk,lQr,iAe,iQr,dQr,cQr,Zt,Ak,mQr,dAe,fQr,gQr,pm,hQr,cAe,uQr,pQr,Hoe,_Qr,bQr,vQr,Kw,FQr,Ur,Lk,TQr,mAe,MQr,EQr,kn,CQr,fAe,wQr,AQr,gAe,LQr,yQr,hAe,xQr,$Qr,kQr,re,Zw,uAe,SQr,RQr,Joe,PQr,BQr,IQr,e6,pAe,NQr,qQr,Yoe,jQr,DQr,GQr,o6,_Ae,OQr,VQr,Koe,XQr,zQr,WQr,r6,bAe,QQr,UQr,Zoe,HQr,JQr,YQr,t6,vAe,KQr,ZQr,ere,eUr,oUr,rUr,a6,FAe,tUr,aUr,ore,nUr,sUr,lUr,n6,TAe,iUr,dUr,rre,cUr,mUr,fUr,s6,MAe,gUr,hUr,tre,uUr,pUr,_Ur,l6,EAe,bUr,vUr,are,FUr,TUr,MUr,i6,CAe,EUr,CUr,nre,wUr,AUr,LUr,d6,wAe,yUr,xUr,sre,$Ur,kUr,SUr,c6,AAe,RUr,PUr,lre,BUr,IUr,NUr,m6,LAe,qUr,jUr,ire,DUr,GUr,OUr,f6,yAe,VUr,XUr,dre,zUr,WUr,QUr,g6,xAe,UUr,HUr,cre,JUr,YUr,KUr,h6,$Ae,ZUr,eHr,mre,oHr,rHr,tHr,u6,kAe,aHr,nHr,fre,sHr,lHr,iHr,p6,SAe,dHr,cHr,gre,mHr,fHr,gHr,_6,RAe,hHr,uHr,hre,pHr,_Hr,bHr,b6,PAe,vHr,FHr,ure,THr,MHr,EHr,v6,BAe,CHr,wHr,pre,AHr,LHr,yHr,F6,IAe,xHr,$Hr,_re,kHr,SHr,RHr,T6,NAe,PHr,BHr,bre,IHr,NHr,qHr,M6,qAe,jHr,DHr,vre,GHr,OHr,VHr,E6,jAe,XHr,zHr,Fre,WHr,QHr,UHr,C6,DAe,HHr,JHr,Tre,YHr,KHr,ZHr,w6,GAe,eJr,oJr,Mre,rJr,tJr,aJr,A6,mHe,_m,L6,OAe,yk,nJr,VAe,sJr,fHe,Fr,xk,lJr,bm,iJr,Ere,dJr,cJr,Cre,mJr,fJr,gJr,$k,hJr,XAe,uJr,pJr,_Jr,ea,kk,bJr,zAe,vJr,FJr,vm,TJr,WAe,MJr,EJr,wre,CJr,wJr,AJr,y6,LJr,Hr,Sk,yJr,QAe,xJr,$Jr,Sn,kJr,UAe,SJr,RJr,HAe,PJr,BJr,JAe,IJr,NJr,qJr,xe,x6,YAe,jJr,DJr,Are,GJr,OJr,VJr,$6,KAe,XJr,zJr,Lre,WJr,QJr,UJr,k6,ZAe,HJr,JJr,yre,YJr,KJr,ZJr,S6,e7e,eYr,oYr,xre,rYr,tYr,aYr,R6,o7e,nYr,sYr,$re,lYr,iYr,dYr,P6,r7e,cYr,mYr,kre,fYr,gYr,hYr,B6,t7e,uYr,pYr,Sre,_Yr,bYr,vYr,I6,a7e,FYr,TYr,Rre,MYr,EYr,CYr,N6,n7e,wYr,AYr,Pre,LYr,yYr,xYr,q6,s7e,$Yr,kYr,Bre,SYr,RYr,PYr,j6,gHe,Fm,D6,l7e,Rk,BYr,i7e,IYr,hHe,Tr,Pk,NYr,Tm,qYr,Ire,jYr,DYr,Nre,GYr,OYr,VYr,Bk,XYr,d7e,zYr,WYr,QYr,oa,Ik,UYr,c7e,HYr,JYr,Mm,YYr,m7e,KYr,ZYr,qre,eKr,oKr,rKr,G6,tKr,Jr,Nk,aKr,f7e,nKr,sKr,Rn,lKr,g7e,iKr,dKr,h7e,cKr,mKr,u7e,fKr,gKr,hKr,Ee,O6,p7e,uKr,pKr,jre,_Kr,bKr,vKr,V6,_7e,FKr,TKr,Dre,MKr,EKr,CKr,X6,b7e,wKr,AKr,Gre,LKr,yKr,xKr,z6,v7e,$Kr,kKr,Ore,SKr,RKr,PKr,W6,F7e,BKr,IKr,Vre,NKr,qKr,jKr,Q6,T7e,DKr,GKr,Xre,OKr,VKr,XKr,U6,M7e,zKr,WKr,zre,QKr,UKr,HKr,H6,E7e,JKr,YKr,Wre,KKr,ZKr,eZr,J6,C7e,oZr,rZr,Qre,tZr,aZr,nZr,Y6,w7e,sZr,lZr,Ure,iZr,dZr,cZr,K6,A7e,mZr,fZr,Hre,gZr,hZr,uZr,Z6,L7e,pZr,_Zr,Jre,bZr,vZr,FZr,eA,y7e,TZr,MZr,Yre,EZr,CZr,wZr,oA,uHe,Em,rA,x7e,qk,AZr,$7e,LZr,pHe,Mr,jk,yZr,Cm,xZr,Kre,$Zr,kZr,Zre,SZr,RZr,PZr,Dk,BZr,k7e,IZr,NZr,qZr,ra,Gk,jZr,S7e,DZr,GZr,wm,OZr,R7e,VZr,XZr,ete,zZr,WZr,QZr,tA,UZr,Yr,Ok,HZr,P7e,JZr,YZr,Pn,KZr,B7e,ZZr,eet,I7e,oet,ret,N7e,tet,aet,net,$e,aA,q7e,set,iet,ote,det,cet,met,nA,j7e,fet,get,rte,het,uet,pet,sA,D7e,_et,bet,tte,vet,Fet,Tet,lA,G7e,Met,Eet,ate,Cet,wet,Aet,iA,O7e,Let,yet,nte,xet,$et,ket,dA,V7e,Set,Ret,ste,Pet,Bet,Iet,cA,X7e,Net,qet,lte,jet,Det,Get,mA,z7e,Oet,Vet,ite,Xet,zet,Wet,fA,W7e,Qet,Uet,dte,Het,Jet,Yet,gA,Q7e,Ket,Zet,cte,eot,oot,rot,hA,_He,Am,uA,U7e,Vk,tot,H7e,aot,bHe,Er,Xk,not,Lm,sot,mte,lot,iot,fte,dot,cot,mot,zk,fot,J7e,got,hot,uot,ta,Wk,pot,Y7e,_ot,bot,ym,vot,K7e,Fot,Tot,gte,Mot,Eot,Cot,pA,wot,Kr,Qk,Aot,Z7e,Lot,yot,Bn,xot,eLe,$ot,kot,oLe,Sot,Rot,rLe,Pot,Bot,Iot,ke,_A,tLe,Not,qot,hte,jot,Dot,Got,bA,aLe,Oot,Vot,ute,Xot,zot,Wot,vA,nLe,Qot,Uot,pte,Hot,Jot,Yot,FA,sLe,Kot,Zot,_te,ert,ort,rrt,TA,lLe,trt,art,bte,nrt,srt,lrt,MA,iLe,irt,drt,vte,crt,mrt,frt,EA,dLe,grt,hrt,Fte,urt,prt,_rt,CA,cLe,brt,vrt,Tte,Frt,Trt,Mrt,wA,mLe,Ert,Crt,Mte,wrt,Art,Lrt,AA,fLe,yrt,xrt,Ete,$rt,krt,Srt,LA,vHe,xm,yA,gLe,Uk,Rrt,hLe,Prt,FHe,Cr,Hk,Brt,$m,Irt,Cte,Nrt,qrt,wte,jrt,Drt,Grt,Jk,Ort,uLe,Vrt,Xrt,zrt,aa,Yk,Wrt,pLe,Qrt,Urt,km,Hrt,_Le,Jrt,Yrt,Ate,Krt,Zrt,ett,xA,ott,Zr,Kk,rtt,bLe,ttt,att,In,ntt,vLe,stt,ltt,FLe,itt,dtt,TLe,ctt,mtt,ftt,Se,$A,MLe,gtt,htt,Lte,utt,ptt,_tt,kA,ELe,btt,vtt,yte,Ftt,Ttt,Mtt,SA,CLe,Ett,Ctt,xte,wtt,Att,Ltt,RA,wLe,ytt,xtt,$te,$tt,ktt,Stt,PA,ALe,Rtt,Ptt,kte,Btt,Itt,Ntt,BA,LLe,qtt,jtt,Ste,Dtt,Gtt,Ott,IA,yLe,Vtt,Xtt,Rte,ztt,Wtt,Qtt,NA,xLe,Utt,Htt,Pte,Jtt,Ytt,Ktt,qA,$Le,Ztt,eat,Bte,oat,rat,tat,jA,kLe,aat,nat,Ite,sat,lat,iat,DA,THe,Sm,GA,SLe,Zk,dat,RLe,cat,MHe,wr,eS,mat,Rm,fat,Nte,gat,hat,qte,uat,pat,_at,oS,bat,PLe,vat,Fat,Tat,na,rS,Mat,BLe,Eat,Cat,Pm,wat,ILe,Aat,Lat,jte,yat,xat,$at,OA,kat,et,tS,Sat,NLe,Rat,Pat,Nn,Bat,qLe,Iat,Nat,jLe,qat,jat,DLe,Dat,Gat,Oat,Re,VA,GLe,Vat,Xat,Dte,zat,Wat,Qat,XA,OLe,Uat,Hat,Gte,Jat,Yat,Kat,zA,VLe,Zat,ent,Ote,ont,rnt,tnt,WA,XLe,ant,nnt,Vte,snt,lnt,int,QA,zLe,dnt,cnt,Xte,mnt,fnt,gnt,UA,WLe,hnt,unt,zte,pnt,_nt,bnt,HA,QLe,vnt,Fnt,Wte,Tnt,Mnt,Ent,JA,ULe,Cnt,wnt,Qte,Ant,Lnt,ynt,YA,HLe,xnt,$nt,Ute,knt,Snt,Rnt,KA,JLe,Pnt,Bnt,Hte,Int,Nnt,qnt,ZA,EHe,Bm,e7,YLe,aS,jnt,KLe,Dnt,CHe,Ar,nS,Gnt,Im,Ont,Jte,Vnt,Xnt,Yte,znt,Wnt,Qnt,sS,Unt,ZLe,Hnt,Jnt,Ynt,sa,lS,Knt,eye,Znt,est,Nm,ost,oye,rst,tst,Kte,ast,nst,sst,o7,lst,ot,iS,ist,rye,dst,cst,qn,mst,tye,fst,gst,aye,hst,ust,nye,pst,_st,bst,Xe,r7,sye,vst,Fst,Zte,Tst,Mst,Est,t7,lye,Cst,wst,eae,Ast,Lst,yst,a7,iye,xst,$st,oae,kst,Sst,Rst,n7,dye,Pst,Bst,rae,Ist,Nst,qst,s7,cye,jst,Dst,tae,Gst,Ost,Vst,l7,mye,Xst,zst,aae,Wst,Qst,Ust,i7,fye,Hst,Jst,nae,Yst,Kst,Zst,d7,gye,elt,olt,sae,rlt,tlt,alt,c7,wHe,qm,m7,hye,dS,nlt,uye,slt,AHe,Lr,cS,llt,jm,ilt,lae,dlt,clt,iae,mlt,flt,glt,mS,hlt,pye,ult,plt,_lt,la,fS,blt,_ye,vlt,Flt,Dm,Tlt,bye,Mlt,Elt,dae,Clt,wlt,Alt,f7,Llt,rt,gS,ylt,vye,xlt,$lt,jn,klt,Fye,Slt,Rlt,Tye,Plt,Blt,Mye,Ilt,Nlt,qlt,ze,g7,Eye,jlt,Dlt,cae,Glt,Olt,Vlt,h7,Cye,Xlt,zlt,mae,Wlt,Qlt,Ult,u7,wye,Hlt,Jlt,fae,Ylt,Klt,Zlt,p7,Aye,eit,oit,gae,rit,tit,ait,_7,Lye,nit,sit,hae,lit,iit,dit,b7,yye,cit,mit,uae,fit,git,hit,v7,xye,uit,pit,pae,_it,bit,vit,F7,$ye,Fit,Tit,_ae,Mit,Eit,Cit,T7,LHe,Gm,M7,kye,hS,wit,Sye,Ait,yHe,yr,uS,Lit,Om,yit,bae,xit,$it,vae,kit,Sit,Rit,pS,Pit,Rye,Bit,Iit,Nit,ia,_S,qit,Pye,jit,Dit,Vm,Git,Bye,Oit,Vit,Fae,Xit,zit,Wit,E7,Qit,tt,bS,Uit,Iye,Hit,Jit,Dn,Yit,Nye,Kit,Zit,qye,edt,odt,jye,rdt,tdt,adt,Dye,C7,Gye,ndt,sdt,Tae,ldt,idt,ddt,w7,xHe,Xm,A7,Oye,vS,cdt,Vye,mdt,$He,xr,FS,fdt,zm,gdt,Mae,hdt,udt,Eae,pdt,_dt,bdt,TS,vdt,Xye,Fdt,Tdt,Mdt,da,MS,Edt,zye,Cdt,wdt,Wm,Adt,Wye,Ldt,ydt,Cae,xdt,$dt,kdt,L7,Sdt,at,ES,Rdt,Qye,Pdt,Bdt,Gn,Idt,Uye,Ndt,qdt,Hye,jdt,Ddt,Jye,Gdt,Odt,Vdt,CS,y7,Yye,Xdt,zdt,wae,Wdt,Qdt,Udt,x7,Kye,Hdt,Jdt,Aae,Ydt,Kdt,Zdt,$7,kHe,Qm,k7,Zye,wS,ect,e8e,oct,SHe,$r,AS,rct,Um,tct,Lae,act,nct,yae,sct,lct,ict,LS,dct,o8e,cct,mct,fct,ca,yS,gct,r8e,hct,uct,Hm,pct,t8e,_ct,bct,xae,vct,Fct,Tct,S7,Mct,nt,xS,Ect,a8e,Cct,wct,On,Act,n8e,Lct,yct,s8e,xct,$ct,l8e,kct,Sct,Rct,i8e,R7,d8e,Pct,Bct,$ae,Ict,Nct,qct,P7,RHe;return d=new oe({}),ja=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),d8=new oe({}),c8=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),af=new jct({props:{warning:!0,$$slots:{default:[Uoa]},$$scope:{ctx:$}}}),m8=new oe({}),f8=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L620"}}),u8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L643"}}),Fh=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[Hoa]},$$scope:{ctx:$}}}),p8=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L766"}}),_8=new oe({}),b8=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L418"}}),T8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L432"}}),ru=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[Joa]},$$scope:{ctx:$}}}),M8=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L633"}}),E8=new oe({}),C8=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L198"}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L212"}}),Ou=new jct({props:{$$slots:{default:[Yoa]},$$scope:{ctx:$}}}),Vu=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[Koa]},$$scope:{ctx:$}}}),y8=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L339"}}),x8=new oe({}),$8=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L90"}}),R8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L104"}}),mp=new jct({props:{$$slots:{default:[Zoa]},$$scope:{ctx:$}}}),fp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[era]},$$scope:{ctx:$}}}),P8=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L257"}}),B8=new oe({}),I8=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L807"}}),q8=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEModel">VideoMAEModel</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),up=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[ora]},$$scope:{ctx:$}}}),j8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),E2=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[rra]},$$scope:{ctx:$}}}),D8=new oe({}),G8=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L814"}}),V8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForPreTraining">VideoMAEForPreTraining</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),w2=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[tra]},$$scope:{ctx:$}}}),X8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Fb=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[ara]},$$scope:{ctx:$}}}),z8=new oe({}),W8=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L829"}}),U8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Mb=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[nra]},$$scope:{ctx:$}}}),H8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),cv=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[sra]},$$scope:{ctx:$}}}),J8=new oe({}),Y8=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L836"}}),Z8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),fv=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[lra]},$$scope:{ctx:$}}}),e9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Kv=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[ira]},$$scope:{ctx:$}}}),o9=new oe({}),r9=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L843"}}),a9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),e1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[dra]},$$scope:{ctx:$}}}),n9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),T1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[cra]},$$scope:{ctx:$}}}),s9=new oe({}),l9=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L852"}}),d9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForSequenceClassification">LukeForSequenceClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),E1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[mra]},$$scope:{ctx:$}}}),c9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),EF=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[fra]},$$scope:{ctx:$}}}),m9=new oe({}),f9=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L897"}}),h9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMultipleChoice">LukeForMultipleChoice</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),wF=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[gra]},$$scope:{ctx:$}}}),u9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),aT=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[hra]},$$scope:{ctx:$}}}),p9=new oe({}),_9=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L904"}}),v9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),sT=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[ura]},$$scope:{ctx:$}}}),F9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),hT=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[pra]},$$scope:{ctx:$}}}),T9=new oe({}),M9=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L890"}}),C9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForTokenClassification">LukeForTokenClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),pT=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[_ra]},$$scope:{ctx:$}}}),w9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),oM=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[bra]},$$scope:{ctx:$}}}),A9=new oe({}),L9=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L861"}}),x9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForQuestionAnswering">LukeForQuestionAnswering</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),tM=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[vra]},$$scope:{ctx:$}}}),$9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),UM=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Fra]},$$scope:{ctx:$}}}),k9=new oe({}),S9=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L868"}}),P9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),JM=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Tra]},$$scope:{ctx:$}}}),B9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ZM=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Mra]},$$scope:{ctx:$}}}),I9=new oe({}),N9=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L913"}}),j9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),oE=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Era]},$$scope:{ctx:$}}}),D9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_E=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Cra]},$$scope:{ctx:$}}}),G9=new oe({}),O9=new R({props:{name:"class transformers.AutoModelForVideoClassification",anchor:"transformers.AutoModelForVideoClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L952"}}),X9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVideoClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForVideoClassification">VideoMAEForVideoClassification</a> (VideoMAE model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),vE=new B({props:{anchor:"transformers.AutoModelForVideoClassification.from_config.example",$$slots:{default:[wra]},$$scope:{ctx:$}}}),z9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVideoClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ME=new B({props:{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.example",$$slots:{default:[Ara]},$$scope:{ctx:$}}}),W9=new oe({}),Q9=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L959"}}),H9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),CE=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Lra]},$$scope:{ctx:$}}}),J9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),LE=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[yra]},$$scope:{ctx:$}}}),Y9=new oe({}),K9=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L879"}}),ex=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),xE=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[xra]},$$scope:{ctx:$}}}),ox=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),SE=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[$ra]},$$scope:{ctx:$}}}),rx=new oe({}),tx=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L966"}}),nx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),PE=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[kra]},$$scope:{ctx:$}}}),sx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),zE=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Sra]},$$scope:{ctx:$}}}),lx=new oe({}),ix=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L989"}}),cx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),QE=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Rra]},$$scope:{ctx:$}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),e4=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Pra]},$$scope:{ctx:$}}}),fx=new oe({}),gx=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L973"}}),ux=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),r4=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Bra]},$$scope:{ctx:$}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),h4=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Ira]},$$scope:{ctx:$}}}),_x=new oe({}),bx=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L980"}}),Fx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),p4=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Nra]},$$scope:{ctx:$}}}),Tx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),F4=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[qra]},$$scope:{ctx:$}}}),Ex=new oe({}),Cx=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L998"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),M4=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[jra]},$$scope:{ctx:$}}}),Lx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),x4=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Dra]},$$scope:{ctx:$}}}),yx=new oe({}),xx=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1005"}}),kx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),k4=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Gra]},$$scope:{ctx:$}}}),Sx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),N4=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[Ora]},$$scope:{ctx:$}}}),Rx=new oe({}),Px=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L945"}}),Ix=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),j4=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Vra]},$$scope:{ctx:$}}}),Nx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),V4=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[Xra]},$$scope:{ctx:$}}}),jx=new oe({}),Dx=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L920"}}),Ox=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),z4=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[zra]},$$scope:{ctx:$}}}),Vx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),U4=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[Wra]},$$scope:{ctx:$}}}),Xx=new oe({}),zx=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L927"}}),Qx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),J4=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Qra]},$$scope:{ctx:$}}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),tC=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Ura]},$$scope:{ctx:$}}}),Hx=new oe({}),Jx=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L936"}}),Kx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),nC=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[Hra]},$$scope:{ctx:$}}}),Zx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),iC=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[Jra]},$$scope:{ctx:$}}}),e$=new oe({}),o$=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),t$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),cC=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Yra]},$$scope:{ctx:$}}}),a$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),l3=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[Kra]},$$scope:{ctx:$}}}),n$=new oe({}),s$=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),i$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),d3=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Zra]},$$scope:{ctx:$}}}),d$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),R3=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[eta]},$$scope:{ctx:$}}}),c$=new oe({}),m$=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L438"}}),g$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),B3=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[ota]},$$scope:{ctx:$}}}),h$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),H3=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[rta]},$$scope:{ctx:$}}}),u$=new oe({}),p$=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L454"}}),b$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Y3=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[tta]},$$scope:{ctx:$}}}),v$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),n5=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ata]},$$scope:{ctx:$}}}),F$=new oe({}),T$=new R({props:{name:"class transformers.TFAutoModelForSemanticSegmentation",anchor:"transformers.TFAutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L463"}}),E$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation">TFData2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation">TFSegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),l5=new B({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[nta]},$$scope:{ctx:$}}}),C$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),c5=new B({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[sta]},$$scope:{ctx:$}}}),A$=new oe({}),L$=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L479"}}),x$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),f5=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[lta]},$$scope:{ctx:$}}}),$$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),R5=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[ita]},$$scope:{ctx:$}}}),k$=new oe({}),S$=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L486"}}),P$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),B5=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[dta]},$$scope:{ctx:$}}}),B$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),W5=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[cta]},$$scope:{ctx:$}}}),I$=new oe({}),N$=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L495"}}),j$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),U5=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[mta]},$$scope:{ctx:$}}}),D$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),T0=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[fta]},$$scope:{ctx:$}}}),G$=new oe({}),O$=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L531"}}),X$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),E0=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[gta]},$$scope:{ctx:$}}}),z$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),G0=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[hta]},$$scope:{ctx:$}}}),W$=new oe({}),Q$=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L538"}}),H$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),V0=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[uta]},$$scope:{ctx:$}}}),J$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),W0=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[pta]},$$scope:{ctx:$}}}),K$=new oe({}),Z$=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L511"}}),ok=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),U0=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[_ta]},$$scope:{ctx:$}}}),rk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),J0=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[bta]},$$scope:{ctx:$}}}),tk=new oe({}),ak=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L522"}}),sk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),K0=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[vta]},$$scope:{ctx:$}}}),lk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),vw=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Fta]},$$scope:{ctx:$}}}),ik=new oe({}),dk=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L504"}}),mk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Tw=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Tta]},$$scope:{ctx:$}}}),fk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Ow=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Mta]},$$scope:{ctx:$}}}),gk=new oe({}),hk=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L472"}}),pk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Xw=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Eta]},$$scope:{ctx:$}}}),_k=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Ww=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Cta]},$$scope:{ctx:$}}}),bk=new oe({}),vk=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L547"}}),Tk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Uw=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[wta]},$$scope:{ctx:$}}}),Mk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Jw=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Ata]},$$scope:{ctx:$}}}),Ek=new oe({}),Ck=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),Ak=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Kw=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[Lta]},$$scope:{ctx:$}}}),Lk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),A6=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[yta]},$$scope:{ctx:$}}}),yk=new oe({}),xk=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),kk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),y6=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[xta]},$$scope:{ctx:$}}}),Sk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),j6=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[$ta]},$$scope:{ctx:$}}}),Rk=new oe({}),Pk=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),Ik=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),G6=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[kta]},$$scope:{ctx:$}}}),Nk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),oA=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Sta]},$$scope:{ctx:$}}}),qk=new oe({}),jk=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),Gk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),tA=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Rta]},$$scope:{ctx:$}}}),Ok=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),hA=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Pta]},$$scope:{ctx:$}}}),Vk=new oe({}),Xk=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),Wk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),pA=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Bta]},$$scope:{ctx:$}}}),Qk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),LA=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Ita]},$$scope:{ctx:$}}}),Uk=new oe({}),Hk=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),Yk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),xA=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Nta]},$$scope:{ctx:$}}}),Kk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),DA=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[qta]},$$scope:{ctx:$}}}),Zk=new oe({}),eS=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),rS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),OA=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[jta]},$$scope:{ctx:$}}}),tS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ZA=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Dta]},$$scope:{ctx:$}}}),aS=new oe({}),nS=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),lS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),o7=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Gta]},$$scope:{ctx:$}}}),iS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),c7=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Ota]},$$scope:{ctx:$}}}),dS=new oe({}),cS=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),fS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),f7=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Vta]},$$scope:{ctx:$}}}),gS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),T7=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Xta]},$$scope:{ctx:$}}}),hS=new oe({}),uS=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),_S=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),E7=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[zta]},$$scope:{ctx:$}}}),bS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),w7=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Wta]},$$scope:{ctx:$}}}),vS=new oe({}),FS=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),MS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),L7=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[Qta]},$$scope:{ctx:$}}}),ES=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),$7=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Uta]},$$scope:{ctx:$}}}),wS=new oe({}),AS=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),yS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),S7=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[Hta]},$$scope:{ctx:$}}}),xS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),P7=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Jta]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(d.$$.fragment),h=l(),Ao=a("span"),Oi=o("Auto Classes"),Zm=l(),mt=a("p"),Vi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Xi=a("code"),n8=o("from_pretrained()"),ef=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),zi=o("Instantiating one of "),Xn=a("a"),s8=o("AutoConfig"),zn=o(", "),Wn=a("a"),l8=o("AutoModel"),Wi=o(`, and
`),Qn=a("a"),i8=o("AutoTokenizer"),Qi=o(" will directly create a class of the relevant architecture. For instance"),of=l(),F(ja.$$.fragment),Ue=l(),Ae=a("p"),ZR=o("will create a model that is an instance of "),Ui=a("a"),eP=o("BertModel"),oP=o("."),Lo=l(),Da=a("p"),rP=o("There is one class of "),rf=a("code"),tP=o("AutoModel"),UYe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),CQe=l(),Hi=a("h2"),tf=a("a"),yse=a("span"),F(d8.$$.fragment),HYe=l(),xse=a("span"),JYe=o("Extending the Auto Classes"),wQe=l(),Un=a("p"),YYe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),$se=a("code"),KYe=o("NewModel"),ZYe=o(", make sure you have a "),kse=a("code"),eKe=o("NewModelConfig"),oKe=o(` then you can add those to the auto
classes like this:`),AQe=l(),F(c8.$$.fragment),LQe=l(),aP=a("p"),rKe=o("You will then be able to use the auto classes like you would usually do!"),yQe=l(),F(af.$$.fragment),xQe=l(),Ji=a("h2"),nf=a("a"),Sse=a("span"),F(m8.$$.fragment),tKe=l(),Rse=a("span"),aKe=o("AutoConfig"),$Qe=l(),yo=a("div"),F(f8.$$.fragment),nKe=l(),g8=a("p"),sKe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),nP=a("a"),lKe=o("from_pretrained()"),iKe=o(" class method."),dKe=l(),h8=a("p"),cKe=o("This class cannot be instantiated directly using "),Pse=a("code"),mKe=o("__init__()"),fKe=o(" (throws an error)."),gKe=l(),kr=a("div"),F(u8.$$.fragment),hKe=l(),Bse=a("p"),uKe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),pKe=l(),Yi=a("p"),_Ke=o("The configuration class to instantiate is selected based on the "),Ise=a("code"),bKe=o("model_type"),vKe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Nse=a("code"),FKe=o("pretrained_model_name_or_path"),TKe=o(":"),MKe=l(),A=a("ul"),sf=a("li"),qse=a("strong"),EKe=o("albert"),CKe=o(" \u2014 "),sP=a("a"),wKe=o("AlbertConfig"),AKe=o(" (ALBERT model)"),LKe=l(),lf=a("li"),jse=a("strong"),yKe=o("bart"),xKe=o(" \u2014 "),lP=a("a"),$Ke=o("BartConfig"),kKe=o(" (BART model)"),SKe=l(),df=a("li"),Dse=a("strong"),RKe=o("beit"),PKe=o(" \u2014 "),iP=a("a"),BKe=o("BeitConfig"),IKe=o(" (BEiT model)"),NKe=l(),cf=a("li"),Gse=a("strong"),qKe=o("bert"),jKe=o(" \u2014 "),dP=a("a"),DKe=o("BertConfig"),GKe=o(" (BERT model)"),OKe=l(),mf=a("li"),Ose=a("strong"),VKe=o("bert-generation"),XKe=o(" \u2014 "),cP=a("a"),zKe=o("BertGenerationConfig"),WKe=o(" (Bert Generation model)"),QKe=l(),ff=a("li"),Vse=a("strong"),UKe=o("big_bird"),HKe=o(" \u2014 "),mP=a("a"),JKe=o("BigBirdConfig"),YKe=o(" (BigBird model)"),KKe=l(),gf=a("li"),Xse=a("strong"),ZKe=o("bigbird_pegasus"),eZe=o(" \u2014 "),fP=a("a"),oZe=o("BigBirdPegasusConfig"),rZe=o(" (BigBird-Pegasus model)"),tZe=l(),hf=a("li"),zse=a("strong"),aZe=o("blenderbot"),nZe=o(" \u2014 "),gP=a("a"),sZe=o("BlenderbotConfig"),lZe=o(" (Blenderbot model)"),iZe=l(),uf=a("li"),Wse=a("strong"),dZe=o("blenderbot-small"),cZe=o(" \u2014 "),hP=a("a"),mZe=o("BlenderbotSmallConfig"),fZe=o(" (BlenderbotSmall model)"),gZe=l(),pf=a("li"),Qse=a("strong"),hZe=o("bloom"),uZe=o(" \u2014 "),uP=a("a"),pZe=o("BloomConfig"),_Ze=o(" (BLOOM model)"),bZe=l(),_f=a("li"),Use=a("strong"),vZe=o("camembert"),FZe=o(" \u2014 "),pP=a("a"),TZe=o("CamembertConfig"),MZe=o(" (CamemBERT model)"),EZe=l(),bf=a("li"),Hse=a("strong"),CZe=o("canine"),wZe=o(" \u2014 "),_P=a("a"),AZe=o("CanineConfig"),LZe=o(" (CANINE model)"),yZe=l(),vf=a("li"),Jse=a("strong"),xZe=o("clip"),$Ze=o(" \u2014 "),bP=a("a"),kZe=o("CLIPConfig"),SZe=o(" (CLIP model)"),RZe=l(),Ff=a("li"),Yse=a("strong"),PZe=o("codegen"),BZe=o(" \u2014 "),vP=a("a"),IZe=o("CodeGenConfig"),NZe=o(" (CodeGen model)"),qZe=l(),Tf=a("li"),Kse=a("strong"),jZe=o("convbert"),DZe=o(" \u2014 "),FP=a("a"),GZe=o("ConvBertConfig"),OZe=o(" (ConvBERT model)"),VZe=l(),Mf=a("li"),Zse=a("strong"),XZe=o("convnext"),zZe=o(" \u2014 "),TP=a("a"),WZe=o("ConvNextConfig"),QZe=o(" (ConvNeXT model)"),UZe=l(),Ef=a("li"),ele=a("strong"),HZe=o("ctrl"),JZe=o(" \u2014 "),MP=a("a"),YZe=o("CTRLConfig"),KZe=o(" (CTRL model)"),ZZe=l(),Cf=a("li"),ole=a("strong"),eeo=o("cvt"),oeo=o(" \u2014 "),EP=a("a"),reo=o("CvtConfig"),teo=o(" (CvT model)"),aeo=l(),wf=a("li"),rle=a("strong"),neo=o("data2vec-audio"),seo=o(" \u2014 "),CP=a("a"),leo=o("Data2VecAudioConfig"),ieo=o(" (Data2VecAudio model)"),deo=l(),Af=a("li"),tle=a("strong"),ceo=o("data2vec-text"),meo=o(" \u2014 "),wP=a("a"),feo=o("Data2VecTextConfig"),geo=o(" (Data2VecText model)"),heo=l(),Lf=a("li"),ale=a("strong"),ueo=o("data2vec-vision"),peo=o(" \u2014 "),AP=a("a"),_eo=o("Data2VecVisionConfig"),beo=o(" (Data2VecVision model)"),veo=l(),yf=a("li"),nle=a("strong"),Feo=o("deberta"),Teo=o(" \u2014 "),LP=a("a"),Meo=o("DebertaConfig"),Eeo=o(" (DeBERTa model)"),Ceo=l(),xf=a("li"),sle=a("strong"),weo=o("deberta-v2"),Aeo=o(" \u2014 "),yP=a("a"),Leo=o("DebertaV2Config"),yeo=o(" (DeBERTa-v2 model)"),xeo=l(),$f=a("li"),lle=a("strong"),$eo=o("decision_transformer"),keo=o(" \u2014 "),xP=a("a"),Seo=o("DecisionTransformerConfig"),Reo=o(" (Decision Transformer model)"),Peo=l(),kf=a("li"),ile=a("strong"),Beo=o("deit"),Ieo=o(" \u2014 "),$P=a("a"),Neo=o("DeiTConfig"),qeo=o(" (DeiT model)"),jeo=l(),Sf=a("li"),dle=a("strong"),Deo=o("detr"),Geo=o(" \u2014 "),kP=a("a"),Oeo=o("DetrConfig"),Veo=o(" (DETR model)"),Xeo=l(),Rf=a("li"),cle=a("strong"),zeo=o("distilbert"),Weo=o(" \u2014 "),SP=a("a"),Qeo=o("DistilBertConfig"),Ueo=o(" (DistilBERT model)"),Heo=l(),Pf=a("li"),mle=a("strong"),Jeo=o("dpr"),Yeo=o(" \u2014 "),RP=a("a"),Keo=o("DPRConfig"),Zeo=o(" (DPR model)"),eoo=l(),Bf=a("li"),fle=a("strong"),ooo=o("dpt"),roo=o(" \u2014 "),PP=a("a"),too=o("DPTConfig"),aoo=o(" (DPT model)"),noo=l(),If=a("li"),gle=a("strong"),soo=o("electra"),loo=o(" \u2014 "),BP=a("a"),ioo=o("ElectraConfig"),doo=o(" (ELECTRA model)"),coo=l(),Nf=a("li"),hle=a("strong"),moo=o("encoder-decoder"),foo=o(" \u2014 "),IP=a("a"),goo=o("EncoderDecoderConfig"),hoo=o(" (Encoder decoder model)"),uoo=l(),qf=a("li"),ule=a("strong"),poo=o("flaubert"),_oo=o(" \u2014 "),NP=a("a"),boo=o("FlaubertConfig"),voo=o(" (FlauBERT model)"),Foo=l(),jf=a("li"),ple=a("strong"),Too=o("flava"),Moo=o(" \u2014 "),qP=a("a"),Eoo=o("FlavaConfig"),Coo=o(" (FLAVA model)"),woo=l(),Df=a("li"),_le=a("strong"),Aoo=o("fnet"),Loo=o(" \u2014 "),jP=a("a"),yoo=o("FNetConfig"),xoo=o(" (FNet model)"),$oo=l(),Gf=a("li"),ble=a("strong"),koo=o("fsmt"),Soo=o(" \u2014 "),DP=a("a"),Roo=o("FSMTConfig"),Poo=o(" (FairSeq Machine-Translation model)"),Boo=l(),Of=a("li"),vle=a("strong"),Ioo=o("funnel"),Noo=o(" \u2014 "),GP=a("a"),qoo=o("FunnelConfig"),joo=o(" (Funnel Transformer model)"),Doo=l(),Vf=a("li"),Fle=a("strong"),Goo=o("glpn"),Ooo=o(" \u2014 "),OP=a("a"),Voo=o("GLPNConfig"),Xoo=o(" (GLPN model)"),zoo=l(),Xf=a("li"),Tle=a("strong"),Woo=o("gpt2"),Qoo=o(" \u2014 "),VP=a("a"),Uoo=o("GPT2Config"),Hoo=o(" (OpenAI GPT-2 model)"),Joo=l(),zf=a("li"),Mle=a("strong"),Yoo=o("gpt_neo"),Koo=o(" \u2014 "),XP=a("a"),Zoo=o("GPTNeoConfig"),ero=o(" (GPT Neo model)"),oro=l(),Wf=a("li"),Ele=a("strong"),rro=o("gpt_neox"),tro=o(" \u2014 "),zP=a("a"),aro=o("GPTNeoXConfig"),nro=o(" (GPT NeoX model)"),sro=l(),Qf=a("li"),Cle=a("strong"),lro=o("gptj"),iro=o(" \u2014 "),WP=a("a"),dro=o("GPTJConfig"),cro=o(" (GPT-J model)"),mro=l(),Uf=a("li"),wle=a("strong"),fro=o("groupvit"),gro=o(" \u2014 "),QP=a("a"),hro=o("GroupViTConfig"),uro=o(" (GroupViT model)"),pro=l(),Hf=a("li"),Ale=a("strong"),_ro=o("hubert"),bro=o(" \u2014 "),UP=a("a"),vro=o("HubertConfig"),Fro=o(" (Hubert model)"),Tro=l(),Jf=a("li"),Lle=a("strong"),Mro=o("ibert"),Ero=o(" \u2014 "),HP=a("a"),Cro=o("IBertConfig"),wro=o(" (I-BERT model)"),Aro=l(),Yf=a("li"),yle=a("strong"),Lro=o("imagegpt"),yro=o(" \u2014 "),JP=a("a"),xro=o("ImageGPTConfig"),$ro=o(" (ImageGPT model)"),kro=l(),Kf=a("li"),xle=a("strong"),Sro=o("layoutlm"),Rro=o(" \u2014 "),YP=a("a"),Pro=o("LayoutLMConfig"),Bro=o(" (LayoutLM model)"),Iro=l(),Zf=a("li"),$le=a("strong"),Nro=o("layoutlmv2"),qro=o(" \u2014 "),KP=a("a"),jro=o("LayoutLMv2Config"),Dro=o(" (LayoutLMv2 model)"),Gro=l(),eg=a("li"),kle=a("strong"),Oro=o("layoutlmv3"),Vro=o(" \u2014 "),ZP=a("a"),Xro=o("LayoutLMv3Config"),zro=o(" (LayoutLMv3 model)"),Wro=l(),og=a("li"),Sle=a("strong"),Qro=o("led"),Uro=o(" \u2014 "),eB=a("a"),Hro=o("LEDConfig"),Jro=o(" (LED model)"),Yro=l(),rg=a("li"),Rle=a("strong"),Kro=o("levit"),Zro=o(" \u2014 "),oB=a("a"),eto=o("LevitConfig"),oto=o(" (LeViT model)"),rto=l(),tg=a("li"),Ple=a("strong"),tto=o("longformer"),ato=o(" \u2014 "),rB=a("a"),nto=o("LongformerConfig"),sto=o(" (Longformer model)"),lto=l(),ag=a("li"),Ble=a("strong"),ito=o("longt5"),dto=o(" \u2014 "),tB=a("a"),cto=o("LongT5Config"),mto=o(" (LongT5 model)"),fto=l(),ng=a("li"),Ile=a("strong"),gto=o("luke"),hto=o(" \u2014 "),aB=a("a"),uto=o("LukeConfig"),pto=o(" (LUKE model)"),_to=l(),sg=a("li"),Nle=a("strong"),bto=o("lxmert"),vto=o(" \u2014 "),nB=a("a"),Fto=o("LxmertConfig"),Tto=o(" (LXMERT model)"),Mto=l(),lg=a("li"),qle=a("strong"),Eto=o("m2m_100"),Cto=o(" \u2014 "),sB=a("a"),wto=o("M2M100Config"),Ato=o(" (M2M100 model)"),Lto=l(),ig=a("li"),jle=a("strong"),yto=o("marian"),xto=o(" \u2014 "),lB=a("a"),$to=o("MarianConfig"),kto=o(" (Marian model)"),Sto=l(),dg=a("li"),Dle=a("strong"),Rto=o("maskformer"),Pto=o(" \u2014 "),iB=a("a"),Bto=o("MaskFormerConfig"),Ito=o(" (MaskFormer model)"),Nto=l(),cg=a("li"),Gle=a("strong"),qto=o("mbart"),jto=o(" \u2014 "),dB=a("a"),Dto=o("MBartConfig"),Gto=o(" (mBART model)"),Oto=l(),mg=a("li"),Ole=a("strong"),Vto=o("mctct"),Xto=o(" \u2014 "),cB=a("a"),zto=o("MCTCTConfig"),Wto=o(" (M-CTC-T model)"),Qto=l(),fg=a("li"),Vle=a("strong"),Uto=o("megatron-bert"),Hto=o(" \u2014 "),mB=a("a"),Jto=o("MegatronBertConfig"),Yto=o(" (Megatron-BERT model)"),Kto=l(),gg=a("li"),Xle=a("strong"),Zto=o("mobilebert"),eao=o(" \u2014 "),fB=a("a"),oao=o("MobileBertConfig"),rao=o(" (MobileBERT model)"),tao=l(),hg=a("li"),zle=a("strong"),aao=o("mobilevit"),nao=o(" \u2014 "),gB=a("a"),sao=o("MobileViTConfig"),lao=o(" (MobileViT model)"),iao=l(),ug=a("li"),Wle=a("strong"),dao=o("mpnet"),cao=o(" \u2014 "),hB=a("a"),mao=o("MPNetConfig"),fao=o(" (MPNet model)"),gao=l(),pg=a("li"),Qle=a("strong"),hao=o("mt5"),uao=o(" \u2014 "),uB=a("a"),pao=o("MT5Config"),_ao=o(" (MT5 model)"),bao=l(),_g=a("li"),Ule=a("strong"),vao=o("mvp"),Fao=o(" \u2014 "),pB=a("a"),Tao=o("MvpConfig"),Mao=o(" (MVP model)"),Eao=l(),bg=a("li"),Hle=a("strong"),Cao=o("nezha"),wao=o(" \u2014 "),_B=a("a"),Aao=o("NezhaConfig"),Lao=o(" (Nezha model)"),yao=l(),vg=a("li"),Jle=a("strong"),xao=o("nystromformer"),$ao=o(" \u2014 "),bB=a("a"),kao=o("NystromformerConfig"),Sao=o(" (Nystr\xF6mformer model)"),Rao=l(),Fg=a("li"),Yle=a("strong"),Pao=o("openai-gpt"),Bao=o(" \u2014 "),vB=a("a"),Iao=o("OpenAIGPTConfig"),Nao=o(" (OpenAI GPT model)"),qao=l(),Tg=a("li"),Kle=a("strong"),jao=o("opt"),Dao=o(" \u2014 "),FB=a("a"),Gao=o("OPTConfig"),Oao=o(" (OPT model)"),Vao=l(),Mg=a("li"),Zle=a("strong"),Xao=o("owlvit"),zao=o(" \u2014 "),TB=a("a"),Wao=o("OwlViTConfig"),Qao=o(" (OWL-ViT model)"),Uao=l(),Eg=a("li"),eie=a("strong"),Hao=o("pegasus"),Jao=o(" \u2014 "),MB=a("a"),Yao=o("PegasusConfig"),Kao=o(" (Pegasus model)"),Zao=l(),Cg=a("li"),oie=a("strong"),eno=o("perceiver"),ono=o(" \u2014 "),EB=a("a"),rno=o("PerceiverConfig"),tno=o(" (Perceiver model)"),ano=l(),wg=a("li"),rie=a("strong"),nno=o("plbart"),sno=o(" \u2014 "),CB=a("a"),lno=o("PLBartConfig"),ino=o(" (PLBart model)"),dno=l(),Ag=a("li"),tie=a("strong"),cno=o("poolformer"),mno=o(" \u2014 "),wB=a("a"),fno=o("PoolFormerConfig"),gno=o(" (PoolFormer model)"),hno=l(),Lg=a("li"),aie=a("strong"),uno=o("prophetnet"),pno=o(" \u2014 "),AB=a("a"),_no=o("ProphetNetConfig"),bno=o(" (ProphetNet model)"),vno=l(),yg=a("li"),nie=a("strong"),Fno=o("qdqbert"),Tno=o(" \u2014 "),LB=a("a"),Mno=o("QDQBertConfig"),Eno=o(" (QDQBert model)"),Cno=l(),xg=a("li"),sie=a("strong"),wno=o("rag"),Ano=o(" \u2014 "),yB=a("a"),Lno=o("RagConfig"),yno=o(" (RAG model)"),xno=l(),$g=a("li"),lie=a("strong"),$no=o("realm"),kno=o(" \u2014 "),xB=a("a"),Sno=o("RealmConfig"),Rno=o(" (REALM model)"),Pno=l(),kg=a("li"),iie=a("strong"),Bno=o("reformer"),Ino=o(" \u2014 "),$B=a("a"),Nno=o("ReformerConfig"),qno=o(" (Reformer model)"),jno=l(),Sg=a("li"),die=a("strong"),Dno=o("regnet"),Gno=o(" \u2014 "),kB=a("a"),Ono=o("RegNetConfig"),Vno=o(" (RegNet model)"),Xno=l(),Rg=a("li"),cie=a("strong"),zno=o("rembert"),Wno=o(" \u2014 "),SB=a("a"),Qno=o("RemBertConfig"),Uno=o(" (RemBERT model)"),Hno=l(),Pg=a("li"),mie=a("strong"),Jno=o("resnet"),Yno=o(" \u2014 "),RB=a("a"),Kno=o("ResNetConfig"),Zno=o(" (ResNet model)"),eso=l(),Bg=a("li"),fie=a("strong"),oso=o("retribert"),rso=o(" \u2014 "),PB=a("a"),tso=o("RetriBertConfig"),aso=o(" (RetriBERT model)"),nso=l(),Ig=a("li"),gie=a("strong"),sso=o("roberta"),lso=o(" \u2014 "),BB=a("a"),iso=o("RobertaConfig"),dso=o(" (RoBERTa model)"),cso=l(),Ng=a("li"),hie=a("strong"),mso=o("roformer"),fso=o(" \u2014 "),IB=a("a"),gso=o("RoFormerConfig"),hso=o(" (RoFormer model)"),uso=l(),qg=a("li"),uie=a("strong"),pso=o("segformer"),_so=o(" \u2014 "),NB=a("a"),bso=o("SegformerConfig"),vso=o(" (SegFormer model)"),Fso=l(),jg=a("li"),pie=a("strong"),Tso=o("sew"),Mso=o(" \u2014 "),qB=a("a"),Eso=o("SEWConfig"),Cso=o(" (SEW model)"),wso=l(),Dg=a("li"),_ie=a("strong"),Aso=o("sew-d"),Lso=o(" \u2014 "),jB=a("a"),yso=o("SEWDConfig"),xso=o(" (SEW-D model)"),$so=l(),Gg=a("li"),bie=a("strong"),kso=o("speech-encoder-decoder"),Sso=o(" \u2014 "),DB=a("a"),Rso=o("SpeechEncoderDecoderConfig"),Pso=o(" (Speech Encoder decoder model)"),Bso=l(),Og=a("li"),vie=a("strong"),Iso=o("speech_to_text"),Nso=o(" \u2014 "),GB=a("a"),qso=o("Speech2TextConfig"),jso=o(" (Speech2Text model)"),Dso=l(),Vg=a("li"),Fie=a("strong"),Gso=o("speech_to_text_2"),Oso=o(" \u2014 "),OB=a("a"),Vso=o("Speech2Text2Config"),Xso=o(" (Speech2Text2 model)"),zso=l(),Xg=a("li"),Tie=a("strong"),Wso=o("splinter"),Qso=o(" \u2014 "),VB=a("a"),Uso=o("SplinterConfig"),Hso=o(" (Splinter model)"),Jso=l(),zg=a("li"),Mie=a("strong"),Yso=o("squeezebert"),Kso=o(" \u2014 "),XB=a("a"),Zso=o("SqueezeBertConfig"),elo=o(" (SqueezeBERT model)"),olo=l(),Wg=a("li"),Eie=a("strong"),rlo=o("swin"),tlo=o(" \u2014 "),zB=a("a"),alo=o("SwinConfig"),nlo=o(" (Swin Transformer model)"),slo=l(),Qg=a("li"),Cie=a("strong"),llo=o("swinv2"),ilo=o(" \u2014 "),WB=a("a"),dlo=o("Swinv2Config"),clo=o(" (Swin Transformer V2 model)"),mlo=l(),Ug=a("li"),wie=a("strong"),flo=o("t5"),glo=o(" \u2014 "),QB=a("a"),hlo=o("T5Config"),ulo=o(" (T5 model)"),plo=l(),Hg=a("li"),Aie=a("strong"),_lo=o("tapas"),blo=o(" \u2014 "),UB=a("a"),vlo=o("TapasConfig"),Flo=o(" (TAPAS model)"),Tlo=l(),Jg=a("li"),Lie=a("strong"),Mlo=o("trajectory_transformer"),Elo=o(" \u2014 "),HB=a("a"),Clo=o("TrajectoryTransformerConfig"),wlo=o(" (Trajectory Transformer model)"),Alo=l(),Yg=a("li"),yie=a("strong"),Llo=o("transfo-xl"),ylo=o(" \u2014 "),JB=a("a"),xlo=o("TransfoXLConfig"),$lo=o(" (Transformer-XL model)"),klo=l(),Kg=a("li"),xie=a("strong"),Slo=o("trocr"),Rlo=o(" \u2014 "),YB=a("a"),Plo=o("TrOCRConfig"),Blo=o(" (TrOCR model)"),Ilo=l(),Zg=a("li"),$ie=a("strong"),Nlo=o("unispeech"),qlo=o(" \u2014 "),KB=a("a"),jlo=o("UniSpeechConfig"),Dlo=o(" (UniSpeech model)"),Glo=l(),eh=a("li"),kie=a("strong"),Olo=o("unispeech-sat"),Vlo=o(" \u2014 "),ZB=a("a"),Xlo=o("UniSpeechSatConfig"),zlo=o(" (UniSpeechSat model)"),Wlo=l(),oh=a("li"),Sie=a("strong"),Qlo=o("van"),Ulo=o(" \u2014 "),eI=a("a"),Hlo=o("VanConfig"),Jlo=o(" (VAN model)"),Ylo=l(),rh=a("li"),Rie=a("strong"),Klo=o("videomae"),Zlo=o(" \u2014 "),oI=a("a"),eio=o("VideoMAEConfig"),oio=o(" (VideoMAE model)"),rio=l(),th=a("li"),Pie=a("strong"),tio=o("vilt"),aio=o(" \u2014 "),rI=a("a"),nio=o("ViltConfig"),sio=o(" (ViLT model)"),lio=l(),ah=a("li"),Bie=a("strong"),iio=o("vision-encoder-decoder"),dio=o(" \u2014 "),tI=a("a"),cio=o("VisionEncoderDecoderConfig"),mio=o(" (Vision Encoder decoder model)"),fio=l(),nh=a("li"),Iie=a("strong"),gio=o("vision-text-dual-encoder"),hio=o(" \u2014 "),aI=a("a"),uio=o("VisionTextDualEncoderConfig"),pio=o(" (VisionTextDualEncoder model)"),_io=l(),sh=a("li"),Nie=a("strong"),bio=o("visual_bert"),vio=o(" \u2014 "),nI=a("a"),Fio=o("VisualBertConfig"),Tio=o(" (VisualBERT model)"),Mio=l(),lh=a("li"),qie=a("strong"),Eio=o("vit"),Cio=o(" \u2014 "),sI=a("a"),wio=o("ViTConfig"),Aio=o(" (ViT model)"),Lio=l(),ih=a("li"),jie=a("strong"),yio=o("vit_mae"),xio=o(" \u2014 "),lI=a("a"),$io=o("ViTMAEConfig"),kio=o(" (ViTMAE model)"),Sio=l(),dh=a("li"),Die=a("strong"),Rio=o("wav2vec2"),Pio=o(" \u2014 "),iI=a("a"),Bio=o("Wav2Vec2Config"),Iio=o(" (Wav2Vec2 model)"),Nio=l(),ch=a("li"),Gie=a("strong"),qio=o("wav2vec2-conformer"),jio=o(" \u2014 "),dI=a("a"),Dio=o("Wav2Vec2ConformerConfig"),Gio=o(" (Wav2Vec2-Conformer model)"),Oio=l(),mh=a("li"),Oie=a("strong"),Vio=o("wavlm"),Xio=o(" \u2014 "),cI=a("a"),zio=o("WavLMConfig"),Wio=o(" (WavLM model)"),Qio=l(),fh=a("li"),Vie=a("strong"),Uio=o("xglm"),Hio=o(" \u2014 "),mI=a("a"),Jio=o("XGLMConfig"),Yio=o(" (XGLM model)"),Kio=l(),gh=a("li"),Xie=a("strong"),Zio=o("xlm"),edo=o(" \u2014 "),fI=a("a"),odo=o("XLMConfig"),rdo=o(" (XLM model)"),tdo=l(),hh=a("li"),zie=a("strong"),ado=o("xlm-prophetnet"),ndo=o(" \u2014 "),gI=a("a"),sdo=o("XLMProphetNetConfig"),ldo=o(" (XLM-ProphetNet model)"),ido=l(),uh=a("li"),Wie=a("strong"),ddo=o("xlm-roberta"),cdo=o(" \u2014 "),hI=a("a"),mdo=o("XLMRobertaConfig"),fdo=o(" (XLM-RoBERTa model)"),gdo=l(),ph=a("li"),Qie=a("strong"),hdo=o("xlm-roberta-xl"),udo=o(" \u2014 "),uI=a("a"),pdo=o("XLMRobertaXLConfig"),_do=o(" (XLM-RoBERTa-XL model)"),bdo=l(),_h=a("li"),Uie=a("strong"),vdo=o("xlnet"),Fdo=o(" \u2014 "),pI=a("a"),Tdo=o("XLNetConfig"),Mdo=o(" (XLNet model)"),Edo=l(),bh=a("li"),Hie=a("strong"),Cdo=o("yolos"),wdo=o(" \u2014 "),_I=a("a"),Ado=o("YolosConfig"),Ldo=o(" (YOLOS model)"),ydo=l(),vh=a("li"),Jie=a("strong"),xdo=o("yoso"),$do=o(" \u2014 "),bI=a("a"),kdo=o("YosoConfig"),Sdo=o(" (YOSO model)"),Rdo=l(),F(Fh.$$.fragment),Pdo=l(),Th=a("div"),F(p8.$$.fragment),Bdo=l(),Yie=a("p"),Ido=o("Register a new configuration for this class."),kQe=l(),Ki=a("h2"),Mh=a("a"),Kie=a("span"),F(_8.$$.fragment),Ndo=l(),Zie=a("span"),qdo=o("AutoTokenizer"),SQe=l(),xo=a("div"),F(b8.$$.fragment),jdo=l(),v8=a("p"),Ddo=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),vI=a("a"),Gdo=o("AutoTokenizer.from_pretrained()"),Odo=o(" class method."),Vdo=l(),F8=a("p"),Xdo=o("This class cannot be instantiated directly using "),ede=a("code"),zdo=o("__init__()"),Wdo=o(" (throws an error)."),Qdo=l(),Sr=a("div"),F(T8.$$.fragment),Udo=l(),ode=a("p"),Hdo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Jdo=l(),Ga=a("p"),Ydo=o("The tokenizer class to instantiate is selected based on the "),rde=a("code"),Kdo=o("model_type"),Zdo=o(` property of the config object (either
passed as an argument or loaded from `),tde=a("code"),eco=o("pretrained_model_name_or_path"),oco=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ade=a("code"),rco=o("pretrained_model_name_or_path"),tco=o(":"),aco=l(),k=a("ul"),Hn=a("li"),nde=a("strong"),nco=o("albert"),sco=o(" \u2014 "),FI=a("a"),lco=o("AlbertTokenizer"),ico=o(" or "),TI=a("a"),dco=o("AlbertTokenizerFast"),cco=o(" (ALBERT model)"),mco=l(),Jn=a("li"),sde=a("strong"),fco=o("bart"),gco=o(" \u2014 "),MI=a("a"),hco=o("BartTokenizer"),uco=o(" or "),EI=a("a"),pco=o("BartTokenizerFast"),_co=o(" (BART model)"),bco=l(),Yn=a("li"),lde=a("strong"),vco=o("barthez"),Fco=o(" \u2014 "),CI=a("a"),Tco=o("BarthezTokenizer"),Mco=o(" or "),wI=a("a"),Eco=o("BarthezTokenizerFast"),Cco=o(" (BARThez model)"),wco=l(),Eh=a("li"),ide=a("strong"),Aco=o("bartpho"),Lco=o(" \u2014 "),AI=a("a"),yco=o("BartphoTokenizer"),xco=o(" (BARTpho model)"),$co=l(),Kn=a("li"),dde=a("strong"),kco=o("bert"),Sco=o(" \u2014 "),LI=a("a"),Rco=o("BertTokenizer"),Pco=o(" or "),yI=a("a"),Bco=o("BertTokenizerFast"),Ico=o(" (BERT model)"),Nco=l(),Ch=a("li"),cde=a("strong"),qco=o("bert-generation"),jco=o(" \u2014 "),xI=a("a"),Dco=o("BertGenerationTokenizer"),Gco=o(" (Bert Generation model)"),Oco=l(),wh=a("li"),mde=a("strong"),Vco=o("bert-japanese"),Xco=o(" \u2014 "),$I=a("a"),zco=o("BertJapaneseTokenizer"),Wco=o(" (BertJapanese model)"),Qco=l(),Ah=a("li"),fde=a("strong"),Uco=o("bertweet"),Hco=o(" \u2014 "),kI=a("a"),Jco=o("BertweetTokenizer"),Yco=o(" (BERTweet model)"),Kco=l(),Zn=a("li"),gde=a("strong"),Zco=o("big_bird"),emo=o(" \u2014 "),SI=a("a"),omo=o("BigBirdTokenizer"),rmo=o(" or "),RI=a("a"),tmo=o("BigBirdTokenizerFast"),amo=o(" (BigBird model)"),nmo=l(),es=a("li"),hde=a("strong"),smo=o("bigbird_pegasus"),lmo=o(" \u2014 "),PI=a("a"),imo=o("PegasusTokenizer"),dmo=o(" or "),BI=a("a"),cmo=o("PegasusTokenizerFast"),mmo=o(" (BigBird-Pegasus model)"),fmo=l(),os=a("li"),ude=a("strong"),gmo=o("blenderbot"),hmo=o(" \u2014 "),II=a("a"),umo=o("BlenderbotTokenizer"),pmo=o(" or "),NI=a("a"),_mo=o("BlenderbotTokenizerFast"),bmo=o(" (Blenderbot model)"),vmo=l(),Lh=a("li"),pde=a("strong"),Fmo=o("blenderbot-small"),Tmo=o(" \u2014 "),qI=a("a"),Mmo=o("BlenderbotSmallTokenizer"),Emo=o(" (BlenderbotSmall model)"),Cmo=l(),yh=a("li"),_de=a("strong"),wmo=o("bloom"),Amo=o(" \u2014 "),jI=a("a"),Lmo=o("BloomTokenizerFast"),ymo=o(" (BLOOM model)"),xmo=l(),xh=a("li"),bde=a("strong"),$mo=o("byt5"),kmo=o(" \u2014 "),DI=a("a"),Smo=o("ByT5Tokenizer"),Rmo=o(" (ByT5 model)"),Pmo=l(),rs=a("li"),vde=a("strong"),Bmo=o("camembert"),Imo=o(" \u2014 "),GI=a("a"),Nmo=o("CamembertTokenizer"),qmo=o(" or "),OI=a("a"),jmo=o("CamembertTokenizerFast"),Dmo=o(" (CamemBERT model)"),Gmo=l(),$h=a("li"),Fde=a("strong"),Omo=o("canine"),Vmo=o(" \u2014 "),VI=a("a"),Xmo=o("CanineTokenizer"),zmo=o(" (CANINE model)"),Wmo=l(),ts=a("li"),Tde=a("strong"),Qmo=o("clip"),Umo=o(" \u2014 "),XI=a("a"),Hmo=o("CLIPTokenizer"),Jmo=o(" or "),zI=a("a"),Ymo=o("CLIPTokenizerFast"),Kmo=o(" (CLIP model)"),Zmo=l(),as=a("li"),Mde=a("strong"),efo=o("codegen"),ofo=o(" \u2014 "),WI=a("a"),rfo=o("CodeGenTokenizer"),tfo=o(" or "),QI=a("a"),afo=o("CodeGenTokenizerFast"),nfo=o(" (CodeGen model)"),sfo=l(),ns=a("li"),Ede=a("strong"),lfo=o("convbert"),ifo=o(" \u2014 "),UI=a("a"),dfo=o("ConvBertTokenizer"),cfo=o(" or "),HI=a("a"),mfo=o("ConvBertTokenizerFast"),ffo=o(" (ConvBERT model)"),gfo=l(),ss=a("li"),Cde=a("strong"),hfo=o("cpm"),ufo=o(" \u2014 "),JI=a("a"),pfo=o("CpmTokenizer"),_fo=o(" or "),YI=a("a"),bfo=o("CpmTokenizerFast"),vfo=o(" (CPM model)"),Ffo=l(),kh=a("li"),wde=a("strong"),Tfo=o("ctrl"),Mfo=o(" \u2014 "),KI=a("a"),Efo=o("CTRLTokenizer"),Cfo=o(" (CTRL model)"),wfo=l(),ls=a("li"),Ade=a("strong"),Afo=o("data2vec-text"),Lfo=o(" \u2014 "),ZI=a("a"),yfo=o("RobertaTokenizer"),xfo=o(" or "),eN=a("a"),$fo=o("RobertaTokenizerFast"),kfo=o(" (Data2VecText model)"),Sfo=l(),is=a("li"),Lde=a("strong"),Rfo=o("deberta"),Pfo=o(" \u2014 "),oN=a("a"),Bfo=o("DebertaTokenizer"),Ifo=o(" or "),rN=a("a"),Nfo=o("DebertaTokenizerFast"),qfo=o(" (DeBERTa model)"),jfo=l(),ds=a("li"),yde=a("strong"),Dfo=o("deberta-v2"),Gfo=o(" \u2014 "),tN=a("a"),Ofo=o("DebertaV2Tokenizer"),Vfo=o(" or "),aN=a("a"),Xfo=o("DebertaV2TokenizerFast"),zfo=o(" (DeBERTa-v2 model)"),Wfo=l(),cs=a("li"),xde=a("strong"),Qfo=o("distilbert"),Ufo=o(" \u2014 "),nN=a("a"),Hfo=o("DistilBertTokenizer"),Jfo=o(" or "),sN=a("a"),Yfo=o("DistilBertTokenizerFast"),Kfo=o(" (DistilBERT model)"),Zfo=l(),ms=a("li"),$de=a("strong"),ego=o("dpr"),ogo=o(" \u2014 "),lN=a("a"),rgo=o("DPRQuestionEncoderTokenizer"),tgo=o(" or "),iN=a("a"),ago=o("DPRQuestionEncoderTokenizerFast"),ngo=o(" (DPR model)"),sgo=l(),fs=a("li"),kde=a("strong"),lgo=o("electra"),igo=o(" \u2014 "),dN=a("a"),dgo=o("ElectraTokenizer"),cgo=o(" or "),cN=a("a"),mgo=o("ElectraTokenizerFast"),fgo=o(" (ELECTRA model)"),ggo=l(),Sh=a("li"),Sde=a("strong"),hgo=o("flaubert"),ugo=o(" \u2014 "),mN=a("a"),pgo=o("FlaubertTokenizer"),_go=o(" (FlauBERT model)"),bgo=l(),gs=a("li"),Rde=a("strong"),vgo=o("fnet"),Fgo=o(" \u2014 "),fN=a("a"),Tgo=o("FNetTokenizer"),Mgo=o(" or "),gN=a("a"),Ego=o("FNetTokenizerFast"),Cgo=o(" (FNet model)"),wgo=l(),Rh=a("li"),Pde=a("strong"),Ago=o("fsmt"),Lgo=o(" \u2014 "),hN=a("a"),ygo=o("FSMTTokenizer"),xgo=o(" (FairSeq Machine-Translation model)"),$go=l(),hs=a("li"),Bde=a("strong"),kgo=o("funnel"),Sgo=o(" \u2014 "),uN=a("a"),Rgo=o("FunnelTokenizer"),Pgo=o(" or "),pN=a("a"),Bgo=o("FunnelTokenizerFast"),Igo=o(" (Funnel Transformer model)"),Ngo=l(),us=a("li"),Ide=a("strong"),qgo=o("gpt2"),jgo=o(" \u2014 "),_N=a("a"),Dgo=o("GPT2Tokenizer"),Ggo=o(" or "),bN=a("a"),Ogo=o("GPT2TokenizerFast"),Vgo=o(" (OpenAI GPT-2 model)"),Xgo=l(),ps=a("li"),Nde=a("strong"),zgo=o("gpt_neo"),Wgo=o(" \u2014 "),vN=a("a"),Qgo=o("GPT2Tokenizer"),Ugo=o(" or "),FN=a("a"),Hgo=o("GPT2TokenizerFast"),Jgo=o(" (GPT Neo model)"),Ygo=l(),Ph=a("li"),qde=a("strong"),Kgo=o("gpt_neox"),Zgo=o(" \u2014 "),TN=a("a"),eho=o("GPTNeoXTokenizerFast"),oho=o(" (GPT NeoX model)"),rho=l(),_s=a("li"),jde=a("strong"),tho=o("gptj"),aho=o(" \u2014 "),MN=a("a"),nho=o("GPT2Tokenizer"),sho=o(" or "),EN=a("a"),lho=o("GPT2TokenizerFast"),iho=o(" (GPT-J model)"),dho=l(),bs=a("li"),Dde=a("strong"),cho=o("groupvit"),mho=o(" \u2014 "),CN=a("a"),fho=o("CLIPTokenizer"),gho=o(" or "),wN=a("a"),hho=o("CLIPTokenizerFast"),uho=o(" (GroupViT model)"),pho=l(),vs=a("li"),Gde=a("strong"),_ho=o("herbert"),bho=o(" \u2014 "),AN=a("a"),vho=o("HerbertTokenizer"),Fho=o(" or "),LN=a("a"),Tho=o("HerbertTokenizerFast"),Mho=o(" (HerBERT model)"),Eho=l(),Bh=a("li"),Ode=a("strong"),Cho=o("hubert"),who=o(" \u2014 "),yN=a("a"),Aho=o("Wav2Vec2CTCTokenizer"),Lho=o(" (Hubert model)"),yho=l(),Fs=a("li"),Vde=a("strong"),xho=o("ibert"),$ho=o(" \u2014 "),xN=a("a"),kho=o("RobertaTokenizer"),Sho=o(" or "),$N=a("a"),Rho=o("RobertaTokenizerFast"),Pho=o(" (I-BERT model)"),Bho=l(),Ts=a("li"),Xde=a("strong"),Iho=o("layoutlm"),Nho=o(" \u2014 "),kN=a("a"),qho=o("LayoutLMTokenizer"),jho=o(" or "),SN=a("a"),Dho=o("LayoutLMTokenizerFast"),Gho=o(" (LayoutLM model)"),Oho=l(),Ms=a("li"),zde=a("strong"),Vho=o("layoutlmv2"),Xho=o(" \u2014 "),RN=a("a"),zho=o("LayoutLMv2Tokenizer"),Who=o(" or "),PN=a("a"),Qho=o("LayoutLMv2TokenizerFast"),Uho=o(" (LayoutLMv2 model)"),Hho=l(),Es=a("li"),Wde=a("strong"),Jho=o("layoutlmv3"),Yho=o(" \u2014 "),BN=a("a"),Kho=o("LayoutLMv3Tokenizer"),Zho=o(" or "),IN=a("a"),euo=o("LayoutLMv3TokenizerFast"),ouo=o(" (LayoutLMv3 model)"),ruo=l(),Cs=a("li"),Qde=a("strong"),tuo=o("layoutxlm"),auo=o(" \u2014 "),NN=a("a"),nuo=o("LayoutXLMTokenizer"),suo=o(" or "),qN=a("a"),luo=o("LayoutXLMTokenizerFast"),iuo=o(" (LayoutXLM model)"),duo=l(),ws=a("li"),Ude=a("strong"),cuo=o("led"),muo=o(" \u2014 "),jN=a("a"),fuo=o("LEDTokenizer"),guo=o(" or "),DN=a("a"),huo=o("LEDTokenizerFast"),uuo=o(" (LED model)"),puo=l(),As=a("li"),Hde=a("strong"),_uo=o("longformer"),buo=o(" \u2014 "),GN=a("a"),vuo=o("LongformerTokenizer"),Fuo=o(" or "),ON=a("a"),Tuo=o("LongformerTokenizerFast"),Muo=o(" (Longformer model)"),Euo=l(),Ls=a("li"),Jde=a("strong"),Cuo=o("longt5"),wuo=o(" \u2014 "),VN=a("a"),Auo=o("T5Tokenizer"),Luo=o(" or "),XN=a("a"),yuo=o("T5TokenizerFast"),xuo=o(" (LongT5 model)"),$uo=l(),Ih=a("li"),Yde=a("strong"),kuo=o("luke"),Suo=o(" \u2014 "),zN=a("a"),Ruo=o("LukeTokenizer"),Puo=o(" (LUKE model)"),Buo=l(),ys=a("li"),Kde=a("strong"),Iuo=o("lxmert"),Nuo=o(" \u2014 "),WN=a("a"),quo=o("LxmertTokenizer"),juo=o(" or "),QN=a("a"),Duo=o("LxmertTokenizerFast"),Guo=o(" (LXMERT model)"),Ouo=l(),Nh=a("li"),Zde=a("strong"),Vuo=o("m2m_100"),Xuo=o(" \u2014 "),UN=a("a"),zuo=o("M2M100Tokenizer"),Wuo=o(" (M2M100 model)"),Quo=l(),qh=a("li"),ece=a("strong"),Uuo=o("marian"),Huo=o(" \u2014 "),HN=a("a"),Juo=o("MarianTokenizer"),Yuo=o(" (Marian model)"),Kuo=l(),xs=a("li"),oce=a("strong"),Zuo=o("mbart"),epo=o(" \u2014 "),JN=a("a"),opo=o("MBartTokenizer"),rpo=o(" or "),YN=a("a"),tpo=o("MBartTokenizerFast"),apo=o(" (mBART model)"),npo=l(),$s=a("li"),rce=a("strong"),spo=o("mbart50"),lpo=o(" \u2014 "),KN=a("a"),ipo=o("MBart50Tokenizer"),dpo=o(" or "),ZN=a("a"),cpo=o("MBart50TokenizerFast"),mpo=o(" (mBART-50 model)"),fpo=l(),ks=a("li"),tce=a("strong"),gpo=o("megatron-bert"),hpo=o(" \u2014 "),eq=a("a"),upo=o("BertTokenizer"),ppo=o(" or "),oq=a("a"),_po=o("BertTokenizerFast"),bpo=o(" (Megatron-BERT model)"),vpo=l(),jh=a("li"),ace=a("strong"),Fpo=o("mluke"),Tpo=o(" \u2014 "),rq=a("a"),Mpo=o("MLukeTokenizer"),Epo=o(" (mLUKE model)"),Cpo=l(),Ss=a("li"),nce=a("strong"),wpo=o("mobilebert"),Apo=o(" \u2014 "),tq=a("a"),Lpo=o("MobileBertTokenizer"),ypo=o(" or "),aq=a("a"),xpo=o("MobileBertTokenizerFast"),$po=o(" (MobileBERT model)"),kpo=l(),Rs=a("li"),sce=a("strong"),Spo=o("mpnet"),Rpo=o(" \u2014 "),nq=a("a"),Ppo=o("MPNetTokenizer"),Bpo=o(" or "),sq=a("a"),Ipo=o("MPNetTokenizerFast"),Npo=o(" (MPNet model)"),qpo=l(),Ps=a("li"),lce=a("strong"),jpo=o("mt5"),Dpo=o(" \u2014 "),lq=a("a"),Gpo=o("MT5Tokenizer"),Opo=o(" or "),iq=a("a"),Vpo=o("MT5TokenizerFast"),Xpo=o(" (MT5 model)"),zpo=l(),Bs=a("li"),ice=a("strong"),Wpo=o("mvp"),Qpo=o(" \u2014 "),dq=a("a"),Upo=o("MvpTokenizer"),Hpo=o(" or "),cq=a("a"),Jpo=o("MvpTokenizerFast"),Ypo=o(" (MVP model)"),Kpo=l(),Is=a("li"),dce=a("strong"),Zpo=o("nezha"),e_o=o(" \u2014 "),mq=a("a"),o_o=o("BertTokenizer"),r_o=o(" or "),fq=a("a"),t_o=o("BertTokenizerFast"),a_o=o(" (Nezha model)"),n_o=l(),Ns=a("li"),cce=a("strong"),s_o=o("nllb"),l_o=o(" \u2014 "),gq=a("a"),i_o=o("NllbTokenizer"),d_o=o(" or "),hq=a("a"),c_o=o("NllbTokenizerFast"),m_o=o(" (NLLB model)"),f_o=l(),qs=a("li"),mce=a("strong"),g_o=o("nystromformer"),h_o=o(" \u2014 "),uq=a("a"),u_o=o("AlbertTokenizer"),p_o=o(" or "),pq=a("a"),__o=o("AlbertTokenizerFast"),b_o=o(" (Nystr\xF6mformer model)"),v_o=l(),js=a("li"),fce=a("strong"),F_o=o("openai-gpt"),T_o=o(" \u2014 "),_q=a("a"),M_o=o("OpenAIGPTTokenizer"),E_o=o(" or "),bq=a("a"),C_o=o("OpenAIGPTTokenizerFast"),w_o=o(" (OpenAI GPT model)"),A_o=l(),Dh=a("li"),gce=a("strong"),L_o=o("opt"),y_o=o(" \u2014 "),vq=a("a"),x_o=o("GPT2Tokenizer"),$_o=o(" (OPT model)"),k_o=l(),Ds=a("li"),hce=a("strong"),S_o=o("owlvit"),R_o=o(" \u2014 "),Fq=a("a"),P_o=o("CLIPTokenizer"),B_o=o(" or "),Tq=a("a"),I_o=o("CLIPTokenizerFast"),N_o=o(" (OWL-ViT model)"),q_o=l(),Gs=a("li"),uce=a("strong"),j_o=o("pegasus"),D_o=o(" \u2014 "),Mq=a("a"),G_o=o("PegasusTokenizer"),O_o=o(" or "),Eq=a("a"),V_o=o("PegasusTokenizerFast"),X_o=o(" (Pegasus model)"),z_o=l(),Gh=a("li"),pce=a("strong"),W_o=o("perceiver"),Q_o=o(" \u2014 "),Cq=a("a"),U_o=o("PerceiverTokenizer"),H_o=o(" (Perceiver model)"),J_o=l(),Oh=a("li"),_ce=a("strong"),Y_o=o("phobert"),K_o=o(" \u2014 "),wq=a("a"),Z_o=o("PhobertTokenizer"),e2o=o(" (PhoBERT model)"),o2o=l(),Vh=a("li"),bce=a("strong"),r2o=o("plbart"),t2o=o(" \u2014 "),Aq=a("a"),a2o=o("PLBartTokenizer"),n2o=o(" (PLBart model)"),s2o=l(),Xh=a("li"),vce=a("strong"),l2o=o("prophetnet"),i2o=o(" \u2014 "),Lq=a("a"),d2o=o("ProphetNetTokenizer"),c2o=o(" (ProphetNet model)"),m2o=l(),Os=a("li"),Fce=a("strong"),f2o=o("qdqbert"),g2o=o(" \u2014 "),yq=a("a"),h2o=o("BertTokenizer"),u2o=o(" or "),xq=a("a"),p2o=o("BertTokenizerFast"),_2o=o(" (QDQBert model)"),b2o=l(),zh=a("li"),Tce=a("strong"),v2o=o("rag"),F2o=o(" \u2014 "),$q=a("a"),T2o=o("RagTokenizer"),M2o=o(" (RAG model)"),E2o=l(),Vs=a("li"),Mce=a("strong"),C2o=o("realm"),w2o=o(" \u2014 "),kq=a("a"),A2o=o("RealmTokenizer"),L2o=o(" or "),Sq=a("a"),y2o=o("RealmTokenizerFast"),x2o=o(" (REALM model)"),$2o=l(),Xs=a("li"),Ece=a("strong"),k2o=o("reformer"),S2o=o(" \u2014 "),Rq=a("a"),R2o=o("ReformerTokenizer"),P2o=o(" or "),Pq=a("a"),B2o=o("ReformerTokenizerFast"),I2o=o(" (Reformer model)"),N2o=l(),zs=a("li"),Cce=a("strong"),q2o=o("rembert"),j2o=o(" \u2014 "),Bq=a("a"),D2o=o("RemBertTokenizer"),G2o=o(" or "),Iq=a("a"),O2o=o("RemBertTokenizerFast"),V2o=o(" (RemBERT model)"),X2o=l(),Ws=a("li"),wce=a("strong"),z2o=o("retribert"),W2o=o(" \u2014 "),Nq=a("a"),Q2o=o("RetriBertTokenizer"),U2o=o(" or "),qq=a("a"),H2o=o("RetriBertTokenizerFast"),J2o=o(" (RetriBERT model)"),Y2o=l(),Qs=a("li"),Ace=a("strong"),K2o=o("roberta"),Z2o=o(" \u2014 "),jq=a("a"),ebo=o("RobertaTokenizer"),obo=o(" or "),Dq=a("a"),rbo=o("RobertaTokenizerFast"),tbo=o(" (RoBERTa model)"),abo=l(),Us=a("li"),Lce=a("strong"),nbo=o("roformer"),sbo=o(" \u2014 "),Gq=a("a"),lbo=o("RoFormerTokenizer"),ibo=o(" or "),Oq=a("a"),dbo=o("RoFormerTokenizerFast"),cbo=o(" (RoFormer model)"),mbo=l(),Wh=a("li"),yce=a("strong"),fbo=o("speech_to_text"),gbo=o(" \u2014 "),Vq=a("a"),hbo=o("Speech2TextTokenizer"),ubo=o(" (Speech2Text model)"),pbo=l(),Qh=a("li"),xce=a("strong"),_bo=o("speech_to_text_2"),bbo=o(" \u2014 "),Xq=a("a"),vbo=o("Speech2Text2Tokenizer"),Fbo=o(" (Speech2Text2 model)"),Tbo=l(),Hs=a("li"),$ce=a("strong"),Mbo=o("splinter"),Ebo=o(" \u2014 "),zq=a("a"),Cbo=o("SplinterTokenizer"),wbo=o(" or "),Wq=a("a"),Abo=o("SplinterTokenizerFast"),Lbo=o(" (Splinter model)"),ybo=l(),Js=a("li"),kce=a("strong"),xbo=o("squeezebert"),$bo=o(" \u2014 "),Qq=a("a"),kbo=o("SqueezeBertTokenizer"),Sbo=o(" or "),Uq=a("a"),Rbo=o("SqueezeBertTokenizerFast"),Pbo=o(" (SqueezeBERT model)"),Bbo=l(),Ys=a("li"),Sce=a("strong"),Ibo=o("t5"),Nbo=o(" \u2014 "),Hq=a("a"),qbo=o("T5Tokenizer"),jbo=o(" or "),Jq=a("a"),Dbo=o("T5TokenizerFast"),Gbo=o(" (T5 model)"),Obo=l(),Uh=a("li"),Rce=a("strong"),Vbo=o("tapas"),Xbo=o(" \u2014 "),Yq=a("a"),zbo=o("TapasTokenizer"),Wbo=o(" (TAPAS model)"),Qbo=l(),Hh=a("li"),Pce=a("strong"),Ubo=o("tapex"),Hbo=o(" \u2014 "),Kq=a("a"),Jbo=o("TapexTokenizer"),Ybo=o(" (TAPEX model)"),Kbo=l(),Jh=a("li"),Bce=a("strong"),Zbo=o("transfo-xl"),evo=o(" \u2014 "),Zq=a("a"),ovo=o("TransfoXLTokenizer"),rvo=o(" (Transformer-XL model)"),tvo=l(),Ks=a("li"),Ice=a("strong"),avo=o("vilt"),nvo=o(" \u2014 "),ej=a("a"),svo=o("BertTokenizer"),lvo=o(" or "),oj=a("a"),ivo=o("BertTokenizerFast"),dvo=o(" (ViLT model)"),cvo=l(),Zs=a("li"),Nce=a("strong"),mvo=o("visual_bert"),fvo=o(" \u2014 "),rj=a("a"),gvo=o("BertTokenizer"),hvo=o(" or "),tj=a("a"),uvo=o("BertTokenizerFast"),pvo=o(" (VisualBERT model)"),_vo=l(),Yh=a("li"),qce=a("strong"),bvo=o("wav2vec2"),vvo=o(" \u2014 "),aj=a("a"),Fvo=o("Wav2Vec2CTCTokenizer"),Tvo=o(" (Wav2Vec2 model)"),Mvo=l(),Kh=a("li"),jce=a("strong"),Evo=o("wav2vec2-conformer"),Cvo=o(" \u2014 "),nj=a("a"),wvo=o("Wav2Vec2CTCTokenizer"),Avo=o(" (Wav2Vec2-Conformer model)"),Lvo=l(),Zh=a("li"),Dce=a("strong"),yvo=o("wav2vec2_phoneme"),xvo=o(" \u2014 "),sj=a("a"),$vo=o("Wav2Vec2PhonemeCTCTokenizer"),kvo=o(" (Wav2Vec2Phoneme model)"),Svo=l(),el=a("li"),Gce=a("strong"),Rvo=o("xglm"),Pvo=o(" \u2014 "),lj=a("a"),Bvo=o("XGLMTokenizer"),Ivo=o(" or "),ij=a("a"),Nvo=o("XGLMTokenizerFast"),qvo=o(" (XGLM model)"),jvo=l(),eu=a("li"),Oce=a("strong"),Dvo=o("xlm"),Gvo=o(" \u2014 "),dj=a("a"),Ovo=o("XLMTokenizer"),Vvo=o(" (XLM model)"),Xvo=l(),ou=a("li"),Vce=a("strong"),zvo=o("xlm-prophetnet"),Wvo=o(" \u2014 "),cj=a("a"),Qvo=o("XLMProphetNetTokenizer"),Uvo=o(" (XLM-ProphetNet model)"),Hvo=l(),ol=a("li"),Xce=a("strong"),Jvo=o("xlm-roberta"),Yvo=o(" \u2014 "),mj=a("a"),Kvo=o("XLMRobertaTokenizer"),Zvo=o(" or "),fj=a("a"),e1o=o("XLMRobertaTokenizerFast"),o1o=o(" (XLM-RoBERTa model)"),r1o=l(),rl=a("li"),zce=a("strong"),t1o=o("xlm-roberta-xl"),a1o=o(" \u2014 "),gj=a("a"),n1o=o("RobertaTokenizer"),s1o=o(" or "),hj=a("a"),l1o=o("RobertaTokenizerFast"),i1o=o(" (XLM-RoBERTa-XL model)"),d1o=l(),tl=a("li"),Wce=a("strong"),c1o=o("xlnet"),m1o=o(" \u2014 "),uj=a("a"),f1o=o("XLNetTokenizer"),g1o=o(" or "),pj=a("a"),h1o=o("XLNetTokenizerFast"),u1o=o(" (XLNet model)"),p1o=l(),al=a("li"),Qce=a("strong"),_1o=o("yoso"),b1o=o(" \u2014 "),_j=a("a"),v1o=o("AlbertTokenizer"),F1o=o(" or "),bj=a("a"),T1o=o("AlbertTokenizerFast"),M1o=o(" (YOSO model)"),E1o=l(),F(ru.$$.fragment),C1o=l(),tu=a("div"),F(M8.$$.fragment),w1o=l(),Uce=a("p"),A1o=o("Register a new tokenizer in this mapping."),RQe=l(),Zi=a("h2"),au=a("a"),Hce=a("span"),F(E8.$$.fragment),L1o=l(),Jce=a("span"),y1o=o("AutoFeatureExtractor"),PQe=l(),$o=a("div"),F(C8.$$.fragment),x1o=l(),w8=a("p"),$1o=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),vj=a("a"),k1o=o("AutoFeatureExtractor.from_pretrained()"),S1o=o(" class method."),R1o=l(),A8=a("p"),P1o=o("This class cannot be instantiated directly using "),Yce=a("code"),B1o=o("__init__()"),I1o=o(" (throws an error)."),N1o=l(),He=a("div"),F(L8.$$.fragment),q1o=l(),Kce=a("p"),j1o=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),D1o=l(),Oa=a("p"),G1o=o("The feature extractor class to instantiate is selected based on the "),Zce=a("code"),O1o=o("model_type"),V1o=o(` property of the config object
(either passed as an argument or loaded from `),eme=a("code"),X1o=o("pretrained_model_name_or_path"),z1o=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ome=a("code"),W1o=o("pretrained_model_name_or_path"),Q1o=o(":"),U1o=l(),U=a("ul"),nu=a("li"),rme=a("strong"),H1o=o("beit"),J1o=o(" \u2014 "),Fj=a("a"),Y1o=o("BeitFeatureExtractor"),K1o=o(" (BEiT model)"),Z1o=l(),su=a("li"),tme=a("strong"),eFo=o("clip"),oFo=o(" \u2014 "),Tj=a("a"),rFo=o("CLIPFeatureExtractor"),tFo=o(" (CLIP model)"),aFo=l(),lu=a("li"),ame=a("strong"),nFo=o("convnext"),sFo=o(" \u2014 "),Mj=a("a"),lFo=o("ConvNextFeatureExtractor"),iFo=o(" (ConvNeXT model)"),dFo=l(),iu=a("li"),nme=a("strong"),cFo=o("cvt"),mFo=o(" \u2014 "),Ej=a("a"),fFo=o("ConvNextFeatureExtractor"),gFo=o(" (CvT model)"),hFo=l(),du=a("li"),sme=a("strong"),uFo=o("data2vec-audio"),pFo=o(" \u2014 "),Cj=a("a"),_Fo=o("Wav2Vec2FeatureExtractor"),bFo=o(" (Data2VecAudio model)"),vFo=l(),cu=a("li"),lme=a("strong"),FFo=o("data2vec-vision"),TFo=o(" \u2014 "),wj=a("a"),MFo=o("BeitFeatureExtractor"),EFo=o(" (Data2VecVision model)"),CFo=l(),mu=a("li"),ime=a("strong"),wFo=o("deit"),AFo=o(" \u2014 "),Aj=a("a"),LFo=o("DeiTFeatureExtractor"),yFo=o(" (DeiT model)"),xFo=l(),fu=a("li"),dme=a("strong"),$Fo=o("detr"),kFo=o(" \u2014 "),Lj=a("a"),SFo=o("DetrFeatureExtractor"),RFo=o(" (DETR model)"),PFo=l(),gu=a("li"),cme=a("strong"),BFo=o("dpt"),IFo=o(" \u2014 "),yj=a("a"),NFo=o("DPTFeatureExtractor"),qFo=o(" (DPT model)"),jFo=l(),hu=a("li"),mme=a("strong"),DFo=o("flava"),GFo=o(" \u2014 "),xj=a("a"),OFo=o("FlavaFeatureExtractor"),VFo=o(" (FLAVA model)"),XFo=l(),uu=a("li"),fme=a("strong"),zFo=o("glpn"),WFo=o(" \u2014 "),$j=a("a"),QFo=o("GLPNFeatureExtractor"),UFo=o(" (GLPN model)"),HFo=l(),pu=a("li"),gme=a("strong"),JFo=o("groupvit"),YFo=o(" \u2014 "),kj=a("a"),KFo=o("CLIPFeatureExtractor"),ZFo=o(" (GroupViT model)"),eTo=l(),_u=a("li"),hme=a("strong"),oTo=o("hubert"),rTo=o(" \u2014 "),Sj=a("a"),tTo=o("Wav2Vec2FeatureExtractor"),aTo=o(" (Hubert model)"),nTo=l(),bu=a("li"),ume=a("strong"),sTo=o("imagegpt"),lTo=o(" \u2014 "),Rj=a("a"),iTo=o("ImageGPTFeatureExtractor"),dTo=o(" (ImageGPT model)"),cTo=l(),vu=a("li"),pme=a("strong"),mTo=o("layoutlmv2"),fTo=o(" \u2014 "),Pj=a("a"),gTo=o("LayoutLMv2FeatureExtractor"),hTo=o(" (LayoutLMv2 model)"),uTo=l(),Fu=a("li"),_me=a("strong"),pTo=o("layoutlmv3"),_To=o(" \u2014 "),Bj=a("a"),bTo=o("LayoutLMv3FeatureExtractor"),vTo=o(" (LayoutLMv3 model)"),FTo=l(),Tu=a("li"),bme=a("strong"),TTo=o("levit"),MTo=o(" \u2014 "),Ij=a("a"),ETo=o("LevitFeatureExtractor"),CTo=o(" (LeViT model)"),wTo=l(),Mu=a("li"),vme=a("strong"),ATo=o("maskformer"),LTo=o(" \u2014 "),Nj=a("a"),yTo=o("MaskFormerFeatureExtractor"),xTo=o(" (MaskFormer model)"),$To=l(),Eu=a("li"),Fme=a("strong"),kTo=o("mctct"),STo=o(" \u2014 "),qj=a("a"),RTo=o("MCTCTFeatureExtractor"),PTo=o(" (M-CTC-T model)"),BTo=l(),Cu=a("li"),Tme=a("strong"),ITo=o("mobilevit"),NTo=o(" \u2014 "),jj=a("a"),qTo=o("MobileViTFeatureExtractor"),jTo=o(" (MobileViT model)"),DTo=l(),wu=a("li"),Mme=a("strong"),GTo=o("owlvit"),OTo=o(" \u2014 "),Dj=a("a"),VTo=o("OwlViTFeatureExtractor"),XTo=o(" (OWL-ViT model)"),zTo=l(),Au=a("li"),Eme=a("strong"),WTo=o("perceiver"),QTo=o(" \u2014 "),Gj=a("a"),UTo=o("PerceiverFeatureExtractor"),HTo=o(" (Perceiver model)"),JTo=l(),Lu=a("li"),Cme=a("strong"),YTo=o("poolformer"),KTo=o(" \u2014 "),Oj=a("a"),ZTo=o("PoolFormerFeatureExtractor"),eMo=o(" (PoolFormer model)"),oMo=l(),yu=a("li"),wme=a("strong"),rMo=o("regnet"),tMo=o(" \u2014 "),Vj=a("a"),aMo=o("ConvNextFeatureExtractor"),nMo=o(" (RegNet model)"),sMo=l(),xu=a("li"),Ame=a("strong"),lMo=o("resnet"),iMo=o(" \u2014 "),Xj=a("a"),dMo=o("ConvNextFeatureExtractor"),cMo=o(" (ResNet model)"),mMo=l(),$u=a("li"),Lme=a("strong"),fMo=o("segformer"),gMo=o(" \u2014 "),zj=a("a"),hMo=o("SegformerFeatureExtractor"),uMo=o(" (SegFormer model)"),pMo=l(),ku=a("li"),yme=a("strong"),_Mo=o("speech_to_text"),bMo=o(" \u2014 "),Wj=a("a"),vMo=o("Speech2TextFeatureExtractor"),FMo=o(" (Speech2Text model)"),TMo=l(),Su=a("li"),xme=a("strong"),MMo=o("swin"),EMo=o(" \u2014 "),Qj=a("a"),CMo=o("ViTFeatureExtractor"),wMo=o(" (Swin Transformer model)"),AMo=l(),Ru=a("li"),$me=a("strong"),LMo=o("swinv2"),yMo=o(" \u2014 "),Uj=a("a"),xMo=o("ViTFeatureExtractor"),$Mo=o(" (Swin Transformer V2 model)"),kMo=l(),Pu=a("li"),kme=a("strong"),SMo=o("van"),RMo=o(" \u2014 "),Hj=a("a"),PMo=o("ConvNextFeatureExtractor"),BMo=o(" (VAN model)"),IMo=l(),Bu=a("li"),Sme=a("strong"),NMo=o("videomae"),qMo=o(" \u2014 "),Jj=a("a"),jMo=o("ViTFeatureExtractor"),DMo=o(" (VideoMAE model)"),GMo=l(),Iu=a("li"),Rme=a("strong"),OMo=o("vilt"),VMo=o(" \u2014 "),Yj=a("a"),XMo=o("ViltFeatureExtractor"),zMo=o(" (ViLT model)"),WMo=l(),Nu=a("li"),Pme=a("strong"),QMo=o("vit"),UMo=o(" \u2014 "),Kj=a("a"),HMo=o("ViTFeatureExtractor"),JMo=o(" (ViT model)"),YMo=l(),qu=a("li"),Bme=a("strong"),KMo=o("vit_mae"),ZMo=o(" \u2014 "),Zj=a("a"),eEo=o("ViTFeatureExtractor"),oEo=o(" (ViTMAE model)"),rEo=l(),ju=a("li"),Ime=a("strong"),tEo=o("wav2vec2"),aEo=o(" \u2014 "),eD=a("a"),nEo=o("Wav2Vec2FeatureExtractor"),sEo=o(" (Wav2Vec2 model)"),lEo=l(),Du=a("li"),Nme=a("strong"),iEo=o("wav2vec2-conformer"),dEo=o(" \u2014 "),oD=a("a"),cEo=o("Wav2Vec2FeatureExtractor"),mEo=o(" (Wav2Vec2-Conformer model)"),fEo=l(),Gu=a("li"),qme=a("strong"),gEo=o("yolos"),hEo=o(" \u2014 "),rD=a("a"),uEo=o("YolosFeatureExtractor"),pEo=o(" (YOLOS model)"),_Eo=l(),F(Ou.$$.fragment),bEo=l(),F(Vu.$$.fragment),vEo=l(),Xu=a("div"),F(y8.$$.fragment),FEo=l(),jme=a("p"),TEo=o("Register a new feature extractor for this class."),BQe=l(),ed=a("h2"),zu=a("a"),Dme=a("span"),F(x8.$$.fragment),MEo=l(),Gme=a("span"),EEo=o("AutoProcessor"),IQe=l(),ko=a("div"),F($8.$$.fragment),CEo=l(),k8=a("p"),wEo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),tD=a("a"),AEo=o("AutoProcessor.from_pretrained()"),LEo=o(" class method."),yEo=l(),S8=a("p"),xEo=o("This class cannot be instantiated directly using "),Ome=a("code"),$Eo=o("__init__()"),kEo=o(" (throws an error)."),SEo=l(),Je=a("div"),F(R8.$$.fragment),REo=l(),Vme=a("p"),PEo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),BEo=l(),od=a("p"),IEo=o("The processor class to instantiate is selected based on the "),Xme=a("code"),NEo=o("model_type"),qEo=o(` property of the config object (either
passed as an argument or loaded from `),zme=a("code"),jEo=o("pretrained_model_name_or_path"),DEo=o(" if possible):"),GEo=l(),me=a("ul"),Wu=a("li"),Wme=a("strong"),OEo=o("clip"),VEo=o(" \u2014 "),aD=a("a"),XEo=o("CLIPProcessor"),zEo=o(" (CLIP model)"),WEo=l(),Qu=a("li"),Qme=a("strong"),QEo=o("flava"),UEo=o(" \u2014 "),nD=a("a"),HEo=o("FlavaProcessor"),JEo=o(" (FLAVA model)"),YEo=l(),Uu=a("li"),Ume=a("strong"),KEo=o("groupvit"),ZEo=o(" \u2014 "),sD=a("a"),e4o=o("CLIPProcessor"),o4o=o(" (GroupViT model)"),r4o=l(),Hu=a("li"),Hme=a("strong"),t4o=o("layoutlmv2"),a4o=o(" \u2014 "),lD=a("a"),n4o=o("LayoutLMv2Processor"),s4o=o(" (LayoutLMv2 model)"),l4o=l(),Ju=a("li"),Jme=a("strong"),i4o=o("layoutlmv3"),d4o=o(" \u2014 "),iD=a("a"),c4o=o("LayoutLMv3Processor"),m4o=o(" (LayoutLMv3 model)"),f4o=l(),Yu=a("li"),Yme=a("strong"),g4o=o("layoutxlm"),h4o=o(" \u2014 "),dD=a("a"),u4o=o("LayoutXLMProcessor"),p4o=o(" (LayoutXLM model)"),_4o=l(),Ku=a("li"),Kme=a("strong"),b4o=o("owlvit"),v4o=o(" \u2014 "),cD=a("a"),F4o=o("OwlViTProcessor"),T4o=o(" (OWL-ViT model)"),M4o=l(),Zu=a("li"),Zme=a("strong"),E4o=o("sew"),C4o=o(" \u2014 "),mD=a("a"),w4o=o("Wav2Vec2Processor"),A4o=o(" (SEW model)"),L4o=l(),ep=a("li"),efe=a("strong"),y4o=o("sew-d"),x4o=o(" \u2014 "),fD=a("a"),$4o=o("Wav2Vec2Processor"),k4o=o(" (SEW-D model)"),S4o=l(),op=a("li"),ofe=a("strong"),R4o=o("speech_to_text"),P4o=o(" \u2014 "),gD=a("a"),B4o=o("Speech2TextProcessor"),I4o=o(" (Speech2Text model)"),N4o=l(),rp=a("li"),rfe=a("strong"),q4o=o("speech_to_text_2"),j4o=o(" \u2014 "),hD=a("a"),D4o=o("Speech2Text2Processor"),G4o=o(" (Speech2Text2 model)"),O4o=l(),tp=a("li"),tfe=a("strong"),V4o=o("trocr"),X4o=o(" \u2014 "),uD=a("a"),z4o=o("TrOCRProcessor"),W4o=o(" (TrOCR model)"),Q4o=l(),ap=a("li"),afe=a("strong"),U4o=o("unispeech"),H4o=o(" \u2014 "),pD=a("a"),J4o=o("Wav2Vec2Processor"),Y4o=o(" (UniSpeech model)"),K4o=l(),np=a("li"),nfe=a("strong"),Z4o=o("unispeech-sat"),eCo=o(" \u2014 "),_D=a("a"),oCo=o("Wav2Vec2Processor"),rCo=o(" (UniSpeechSat model)"),tCo=l(),sp=a("li"),sfe=a("strong"),aCo=o("vilt"),nCo=o(" \u2014 "),bD=a("a"),sCo=o("ViltProcessor"),lCo=o(" (ViLT model)"),iCo=l(),lp=a("li"),lfe=a("strong"),dCo=o("vision-text-dual-encoder"),cCo=o(" \u2014 "),vD=a("a"),mCo=o("VisionTextDualEncoderProcessor"),fCo=o(" (VisionTextDualEncoder model)"),gCo=l(),ip=a("li"),ife=a("strong"),hCo=o("wav2vec2"),uCo=o(" \u2014 "),FD=a("a"),pCo=o("Wav2Vec2Processor"),_Co=o(" (Wav2Vec2 model)"),bCo=l(),dp=a("li"),dfe=a("strong"),vCo=o("wav2vec2-conformer"),FCo=o(" \u2014 "),TD=a("a"),TCo=o("Wav2Vec2Processor"),MCo=o(" (Wav2Vec2-Conformer model)"),ECo=l(),cp=a("li"),cfe=a("strong"),CCo=o("wavlm"),wCo=o(" \u2014 "),MD=a("a"),ACo=o("Wav2Vec2Processor"),LCo=o(" (WavLM model)"),yCo=l(),F(mp.$$.fragment),xCo=l(),F(fp.$$.fragment),$Co=l(),gp=a("div"),F(P8.$$.fragment),kCo=l(),mfe=a("p"),SCo=o("Register a new processor for this class."),NQe=l(),rd=a("h2"),hp=a("a"),ffe=a("span"),F(B8.$$.fragment),RCo=l(),gfe=a("span"),PCo=o("AutoModel"),qQe=l(),So=a("div"),F(I8.$$.fragment),BCo=l(),td=a("p"),ICo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ED=a("a"),NCo=o("from_pretrained()"),qCo=o(" class method or the "),CD=a("a"),jCo=o("from_config()"),DCo=o(` class
method.`),GCo=l(),N8=a("p"),OCo=o("This class cannot be instantiated directly using "),hfe=a("code"),VCo=o("__init__()"),XCo=o(" (throws an error)."),zCo=l(),ft=a("div"),F(q8.$$.fragment),WCo=l(),ufe=a("p"),QCo=o("Instantiates one of the base model classes of the library from a configuration."),UCo=l(),ad=a("p"),HCo=o(`Note:
Loading a model from its configuration file does `),pfe=a("strong"),JCo=o("not"),YCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wD=a("a"),KCo=o("from_pretrained()"),ZCo=o(" to load the model weights."),e3o=l(),F(up.$$.fragment),o3o=l(),Ye=a("div"),F(j8.$$.fragment),r3o=l(),_fe=a("p"),t3o=o("Instantiate one of the base model classes of the library from a pretrained model."),a3o=l(),Va=a("p"),n3o=o("The model class to instantiate is selected based on the "),bfe=a("code"),s3o=o("model_type"),l3o=o(` property of the config object (either
passed as an argument or loaded from `),vfe=a("code"),i3o=o("pretrained_model_name_or_path"),d3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ffe=a("code"),c3o=o("pretrained_model_name_or_path"),m3o=o(":"),f3o=l(),y=a("ul"),pp=a("li"),Tfe=a("strong"),g3o=o("albert"),h3o=o(" \u2014 "),AD=a("a"),u3o=o("AlbertModel"),p3o=o(" (ALBERT model)"),_3o=l(),_p=a("li"),Mfe=a("strong"),b3o=o("bart"),v3o=o(" \u2014 "),LD=a("a"),F3o=o("BartModel"),T3o=o(" (BART model)"),M3o=l(),bp=a("li"),Efe=a("strong"),E3o=o("beit"),C3o=o(" \u2014 "),yD=a("a"),w3o=o("BeitModel"),A3o=o(" (BEiT model)"),L3o=l(),vp=a("li"),Cfe=a("strong"),y3o=o("bert"),x3o=o(" \u2014 "),xD=a("a"),$3o=o("BertModel"),k3o=o(" (BERT model)"),S3o=l(),Fp=a("li"),wfe=a("strong"),R3o=o("bert-generation"),P3o=o(" \u2014 "),$D=a("a"),B3o=o("BertGenerationEncoder"),I3o=o(" (Bert Generation model)"),N3o=l(),Tp=a("li"),Afe=a("strong"),q3o=o("big_bird"),j3o=o(" \u2014 "),kD=a("a"),D3o=o("BigBirdModel"),G3o=o(" (BigBird model)"),O3o=l(),Mp=a("li"),Lfe=a("strong"),V3o=o("bigbird_pegasus"),X3o=o(" \u2014 "),SD=a("a"),z3o=o("BigBirdPegasusModel"),W3o=o(" (BigBird-Pegasus model)"),Q3o=l(),Ep=a("li"),yfe=a("strong"),U3o=o("blenderbot"),H3o=o(" \u2014 "),RD=a("a"),J3o=o("BlenderbotModel"),Y3o=o(" (Blenderbot model)"),K3o=l(),Cp=a("li"),xfe=a("strong"),Z3o=o("blenderbot-small"),e5o=o(" \u2014 "),PD=a("a"),o5o=o("BlenderbotSmallModel"),r5o=o(" (BlenderbotSmall model)"),t5o=l(),wp=a("li"),$fe=a("strong"),a5o=o("bloom"),n5o=o(" \u2014 "),BD=a("a"),s5o=o("BloomModel"),l5o=o(" (BLOOM model)"),i5o=l(),Ap=a("li"),kfe=a("strong"),d5o=o("camembert"),c5o=o(" \u2014 "),ID=a("a"),m5o=o("CamembertModel"),f5o=o(" (CamemBERT model)"),g5o=l(),Lp=a("li"),Sfe=a("strong"),h5o=o("canine"),u5o=o(" \u2014 "),ND=a("a"),p5o=o("CanineModel"),_5o=o(" (CANINE model)"),b5o=l(),yp=a("li"),Rfe=a("strong"),v5o=o("clip"),F5o=o(" \u2014 "),qD=a("a"),T5o=o("CLIPModel"),M5o=o(" (CLIP model)"),E5o=l(),xp=a("li"),Pfe=a("strong"),C5o=o("codegen"),w5o=o(" \u2014 "),jD=a("a"),A5o=o("CodeGenModel"),L5o=o(" (CodeGen model)"),y5o=l(),$p=a("li"),Bfe=a("strong"),x5o=o("convbert"),$5o=o(" \u2014 "),DD=a("a"),k5o=o("ConvBertModel"),S5o=o(" (ConvBERT model)"),R5o=l(),kp=a("li"),Ife=a("strong"),P5o=o("convnext"),B5o=o(" \u2014 "),GD=a("a"),I5o=o("ConvNextModel"),N5o=o(" (ConvNeXT model)"),q5o=l(),Sp=a("li"),Nfe=a("strong"),j5o=o("ctrl"),D5o=o(" \u2014 "),OD=a("a"),G5o=o("CTRLModel"),O5o=o(" (CTRL model)"),V5o=l(),Rp=a("li"),qfe=a("strong"),X5o=o("cvt"),z5o=o(" \u2014 "),VD=a("a"),W5o=o("CvtModel"),Q5o=o(" (CvT model)"),U5o=l(),Pp=a("li"),jfe=a("strong"),H5o=o("data2vec-audio"),J5o=o(" \u2014 "),XD=a("a"),Y5o=o("Data2VecAudioModel"),K5o=o(" (Data2VecAudio model)"),Z5o=l(),Bp=a("li"),Dfe=a("strong"),e0o=o("data2vec-text"),o0o=o(" \u2014 "),zD=a("a"),r0o=o("Data2VecTextModel"),t0o=o(" (Data2VecText model)"),a0o=l(),Ip=a("li"),Gfe=a("strong"),n0o=o("data2vec-vision"),s0o=o(" \u2014 "),WD=a("a"),l0o=o("Data2VecVisionModel"),i0o=o(" (Data2VecVision model)"),d0o=l(),Np=a("li"),Ofe=a("strong"),c0o=o("deberta"),m0o=o(" \u2014 "),QD=a("a"),f0o=o("DebertaModel"),g0o=o(" (DeBERTa model)"),h0o=l(),qp=a("li"),Vfe=a("strong"),u0o=o("deberta-v2"),p0o=o(" \u2014 "),UD=a("a"),_0o=o("DebertaV2Model"),b0o=o(" (DeBERTa-v2 model)"),v0o=l(),jp=a("li"),Xfe=a("strong"),F0o=o("decision_transformer"),T0o=o(" \u2014 "),HD=a("a"),M0o=o("DecisionTransformerModel"),E0o=o(" (Decision Transformer model)"),C0o=l(),Dp=a("li"),zfe=a("strong"),w0o=o("deit"),A0o=o(" \u2014 "),JD=a("a"),L0o=o("DeiTModel"),y0o=o(" (DeiT model)"),x0o=l(),Gp=a("li"),Wfe=a("strong"),$0o=o("detr"),k0o=o(" \u2014 "),YD=a("a"),S0o=o("DetrModel"),R0o=o(" (DETR model)"),P0o=l(),Op=a("li"),Qfe=a("strong"),B0o=o("distilbert"),I0o=o(" \u2014 "),KD=a("a"),N0o=o("DistilBertModel"),q0o=o(" (DistilBERT model)"),j0o=l(),Vp=a("li"),Ufe=a("strong"),D0o=o("dpr"),G0o=o(" \u2014 "),ZD=a("a"),O0o=o("DPRQuestionEncoder"),V0o=o(" (DPR model)"),X0o=l(),Xp=a("li"),Hfe=a("strong"),z0o=o("dpt"),W0o=o(" \u2014 "),eG=a("a"),Q0o=o("DPTModel"),U0o=o(" (DPT model)"),H0o=l(),zp=a("li"),Jfe=a("strong"),J0o=o("electra"),Y0o=o(" \u2014 "),oG=a("a"),K0o=o("ElectraModel"),Z0o=o(" (ELECTRA model)"),ewo=l(),Wp=a("li"),Yfe=a("strong"),owo=o("flaubert"),rwo=o(" \u2014 "),rG=a("a"),two=o("FlaubertModel"),awo=o(" (FlauBERT model)"),nwo=l(),Qp=a("li"),Kfe=a("strong"),swo=o("flava"),lwo=o(" \u2014 "),tG=a("a"),iwo=o("FlavaModel"),dwo=o(" (FLAVA model)"),cwo=l(),Up=a("li"),Zfe=a("strong"),mwo=o("fnet"),fwo=o(" \u2014 "),aG=a("a"),gwo=o("FNetModel"),hwo=o(" (FNet model)"),uwo=l(),Hp=a("li"),ege=a("strong"),pwo=o("fsmt"),_wo=o(" \u2014 "),nG=a("a"),bwo=o("FSMTModel"),vwo=o(" (FairSeq Machine-Translation model)"),Fwo=l(),nl=a("li"),oge=a("strong"),Two=o("funnel"),Mwo=o(" \u2014 "),sG=a("a"),Ewo=o("FunnelModel"),Cwo=o(" or "),lG=a("a"),wwo=o("FunnelBaseModel"),Awo=o(" (Funnel Transformer model)"),Lwo=l(),Jp=a("li"),rge=a("strong"),ywo=o("glpn"),xwo=o(" \u2014 "),iG=a("a"),$wo=o("GLPNModel"),kwo=o(" (GLPN model)"),Swo=l(),Yp=a("li"),tge=a("strong"),Rwo=o("gpt2"),Pwo=o(" \u2014 "),dG=a("a"),Bwo=o("GPT2Model"),Iwo=o(" (OpenAI GPT-2 model)"),Nwo=l(),Kp=a("li"),age=a("strong"),qwo=o("gpt_neo"),jwo=o(" \u2014 "),cG=a("a"),Dwo=o("GPTNeoModel"),Gwo=o(" (GPT Neo model)"),Owo=l(),Zp=a("li"),nge=a("strong"),Vwo=o("gpt_neox"),Xwo=o(" \u2014 "),mG=a("a"),zwo=o("GPTNeoXModel"),Wwo=o(" (GPT NeoX model)"),Qwo=l(),e_=a("li"),sge=a("strong"),Uwo=o("gptj"),Hwo=o(" \u2014 "),fG=a("a"),Jwo=o("GPTJModel"),Ywo=o(" (GPT-J model)"),Kwo=l(),o_=a("li"),lge=a("strong"),Zwo=o("groupvit"),e6o=o(" \u2014 "),gG=a("a"),o6o=o("GroupViTModel"),r6o=o(" (GroupViT model)"),t6o=l(),r_=a("li"),ige=a("strong"),a6o=o("hubert"),n6o=o(" \u2014 "),hG=a("a"),s6o=o("HubertModel"),l6o=o(" (Hubert model)"),i6o=l(),t_=a("li"),dge=a("strong"),d6o=o("ibert"),c6o=o(" \u2014 "),uG=a("a"),m6o=o("IBertModel"),f6o=o(" (I-BERT model)"),g6o=l(),a_=a("li"),cge=a("strong"),h6o=o("imagegpt"),u6o=o(" \u2014 "),pG=a("a"),p6o=o("ImageGPTModel"),_6o=o(" (ImageGPT model)"),b6o=l(),n_=a("li"),mge=a("strong"),v6o=o("layoutlm"),F6o=o(" \u2014 "),_G=a("a"),T6o=o("LayoutLMModel"),M6o=o(" (LayoutLM model)"),E6o=l(),s_=a("li"),fge=a("strong"),C6o=o("layoutlmv2"),w6o=o(" \u2014 "),bG=a("a"),A6o=o("LayoutLMv2Model"),L6o=o(" (LayoutLMv2 model)"),y6o=l(),l_=a("li"),gge=a("strong"),x6o=o("layoutlmv3"),$6o=o(" \u2014 "),vG=a("a"),k6o=o("LayoutLMv3Model"),S6o=o(" (LayoutLMv3 model)"),R6o=l(),i_=a("li"),hge=a("strong"),P6o=o("led"),B6o=o(" \u2014 "),FG=a("a"),I6o=o("LEDModel"),N6o=o(" (LED model)"),q6o=l(),d_=a("li"),uge=a("strong"),j6o=o("levit"),D6o=o(" \u2014 "),TG=a("a"),G6o=o("LevitModel"),O6o=o(" (LeViT model)"),V6o=l(),c_=a("li"),pge=a("strong"),X6o=o("longformer"),z6o=o(" \u2014 "),MG=a("a"),W6o=o("LongformerModel"),Q6o=o(" (Longformer model)"),U6o=l(),m_=a("li"),_ge=a("strong"),H6o=o("longt5"),J6o=o(" \u2014 "),EG=a("a"),Y6o=o("LongT5Model"),K6o=o(" (LongT5 model)"),Z6o=l(),f_=a("li"),bge=a("strong"),eAo=o("luke"),oAo=o(" \u2014 "),CG=a("a"),rAo=o("LukeModel"),tAo=o(" (LUKE model)"),aAo=l(),g_=a("li"),vge=a("strong"),nAo=o("lxmert"),sAo=o(" \u2014 "),wG=a("a"),lAo=o("LxmertModel"),iAo=o(" (LXMERT model)"),dAo=l(),h_=a("li"),Fge=a("strong"),cAo=o("m2m_100"),mAo=o(" \u2014 "),AG=a("a"),fAo=o("M2M100Model"),gAo=o(" (M2M100 model)"),hAo=l(),u_=a("li"),Tge=a("strong"),uAo=o("marian"),pAo=o(" \u2014 "),LG=a("a"),_Ao=o("MarianModel"),bAo=o(" (Marian model)"),vAo=l(),p_=a("li"),Mge=a("strong"),FAo=o("maskformer"),TAo=o(" \u2014 "),yG=a("a"),MAo=o("MaskFormerModel"),EAo=o(" (MaskFormer model)"),CAo=l(),__=a("li"),Ege=a("strong"),wAo=o("mbart"),AAo=o(" \u2014 "),xG=a("a"),LAo=o("MBartModel"),yAo=o(" (mBART model)"),xAo=l(),b_=a("li"),Cge=a("strong"),$Ao=o("mctct"),kAo=o(" \u2014 "),$G=a("a"),SAo=o("MCTCTModel"),RAo=o(" (M-CTC-T model)"),PAo=l(),v_=a("li"),wge=a("strong"),BAo=o("megatron-bert"),IAo=o(" \u2014 "),kG=a("a"),NAo=o("MegatronBertModel"),qAo=o(" (Megatron-BERT model)"),jAo=l(),F_=a("li"),Age=a("strong"),DAo=o("mobilebert"),GAo=o(" \u2014 "),SG=a("a"),OAo=o("MobileBertModel"),VAo=o(" (MobileBERT model)"),XAo=l(),T_=a("li"),Lge=a("strong"),zAo=o("mobilevit"),WAo=o(" \u2014 "),RG=a("a"),QAo=o("MobileViTModel"),UAo=o(" (MobileViT model)"),HAo=l(),M_=a("li"),yge=a("strong"),JAo=o("mpnet"),YAo=o(" \u2014 "),PG=a("a"),KAo=o("MPNetModel"),ZAo=o(" (MPNet model)"),e7o=l(),E_=a("li"),xge=a("strong"),o7o=o("mt5"),r7o=o(" \u2014 "),BG=a("a"),t7o=o("MT5Model"),a7o=o(" (MT5 model)"),n7o=l(),C_=a("li"),$ge=a("strong"),s7o=o("mvp"),l7o=o(" \u2014 "),IG=a("a"),i7o=o("MvpModel"),d7o=o(" (MVP model)"),c7o=l(),w_=a("li"),kge=a("strong"),m7o=o("nezha"),f7o=o(" \u2014 "),NG=a("a"),g7o=o("NezhaModel"),h7o=o(" (Nezha model)"),u7o=l(),A_=a("li"),Sge=a("strong"),p7o=o("nllb"),_7o=o(" \u2014 "),qG=a("a"),b7o=o("M2M100Model"),v7o=o(" (NLLB model)"),F7o=l(),L_=a("li"),Rge=a("strong"),T7o=o("nystromformer"),M7o=o(" \u2014 "),jG=a("a"),E7o=o("NystromformerModel"),C7o=o(" (Nystr\xF6mformer model)"),w7o=l(),y_=a("li"),Pge=a("strong"),A7o=o("openai-gpt"),L7o=o(" \u2014 "),DG=a("a"),y7o=o("OpenAIGPTModel"),x7o=o(" (OpenAI GPT model)"),$7o=l(),x_=a("li"),Bge=a("strong"),k7o=o("opt"),S7o=o(" \u2014 "),GG=a("a"),R7o=o("OPTModel"),P7o=o(" (OPT model)"),B7o=l(),$_=a("li"),Ige=a("strong"),I7o=o("owlvit"),N7o=o(" \u2014 "),OG=a("a"),q7o=o("OwlViTModel"),j7o=o(" (OWL-ViT model)"),D7o=l(),k_=a("li"),Nge=a("strong"),G7o=o("pegasus"),O7o=o(" \u2014 "),VG=a("a"),V7o=o("PegasusModel"),X7o=o(" (Pegasus model)"),z7o=l(),S_=a("li"),qge=a("strong"),W7o=o("perceiver"),Q7o=o(" \u2014 "),XG=a("a"),U7o=o("PerceiverModel"),H7o=o(" (Perceiver model)"),J7o=l(),R_=a("li"),jge=a("strong"),Y7o=o("plbart"),K7o=o(" \u2014 "),zG=a("a"),Z7o=o("PLBartModel"),eLo=o(" (PLBart model)"),oLo=l(),P_=a("li"),Dge=a("strong"),rLo=o("poolformer"),tLo=o(" \u2014 "),WG=a("a"),aLo=o("PoolFormerModel"),nLo=o(" (PoolFormer model)"),sLo=l(),B_=a("li"),Gge=a("strong"),lLo=o("prophetnet"),iLo=o(" \u2014 "),QG=a("a"),dLo=o("ProphetNetModel"),cLo=o(" (ProphetNet model)"),mLo=l(),I_=a("li"),Oge=a("strong"),fLo=o("qdqbert"),gLo=o(" \u2014 "),UG=a("a"),hLo=o("QDQBertModel"),uLo=o(" (QDQBert model)"),pLo=l(),N_=a("li"),Vge=a("strong"),_Lo=o("reformer"),bLo=o(" \u2014 "),HG=a("a"),vLo=o("ReformerModel"),FLo=o(" (Reformer model)"),TLo=l(),q_=a("li"),Xge=a("strong"),MLo=o("regnet"),ELo=o(" \u2014 "),JG=a("a"),CLo=o("RegNetModel"),wLo=o(" (RegNet model)"),ALo=l(),j_=a("li"),zge=a("strong"),LLo=o("rembert"),yLo=o(" \u2014 "),YG=a("a"),xLo=o("RemBertModel"),$Lo=o(" (RemBERT model)"),kLo=l(),D_=a("li"),Wge=a("strong"),SLo=o("resnet"),RLo=o(" \u2014 "),KG=a("a"),PLo=o("ResNetModel"),BLo=o(" (ResNet model)"),ILo=l(),G_=a("li"),Qge=a("strong"),NLo=o("retribert"),qLo=o(" \u2014 "),ZG=a("a"),jLo=o("RetriBertModel"),DLo=o(" (RetriBERT model)"),GLo=l(),O_=a("li"),Uge=a("strong"),OLo=o("roberta"),VLo=o(" \u2014 "),eO=a("a"),XLo=o("RobertaModel"),zLo=o(" (RoBERTa model)"),WLo=l(),V_=a("li"),Hge=a("strong"),QLo=o("roformer"),ULo=o(" \u2014 "),oO=a("a"),HLo=o("RoFormerModel"),JLo=o(" (RoFormer model)"),YLo=l(),X_=a("li"),Jge=a("strong"),KLo=o("segformer"),ZLo=o(" \u2014 "),rO=a("a"),eyo=o("SegformerModel"),oyo=o(" (SegFormer model)"),ryo=l(),z_=a("li"),Yge=a("strong"),tyo=o("sew"),ayo=o(" \u2014 "),tO=a("a"),nyo=o("SEWModel"),syo=o(" (SEW model)"),lyo=l(),W_=a("li"),Kge=a("strong"),iyo=o("sew-d"),dyo=o(" \u2014 "),aO=a("a"),cyo=o("SEWDModel"),myo=o(" (SEW-D model)"),fyo=l(),Q_=a("li"),Zge=a("strong"),gyo=o("speech_to_text"),hyo=o(" \u2014 "),nO=a("a"),uyo=o("Speech2TextModel"),pyo=o(" (Speech2Text model)"),_yo=l(),U_=a("li"),ehe=a("strong"),byo=o("splinter"),vyo=o(" \u2014 "),sO=a("a"),Fyo=o("SplinterModel"),Tyo=o(" (Splinter model)"),Myo=l(),H_=a("li"),ohe=a("strong"),Eyo=o("squeezebert"),Cyo=o(" \u2014 "),lO=a("a"),wyo=o("SqueezeBertModel"),Ayo=o(" (SqueezeBERT model)"),Lyo=l(),J_=a("li"),rhe=a("strong"),yyo=o("swin"),xyo=o(" \u2014 "),iO=a("a"),$yo=o("SwinModel"),kyo=o(" (Swin Transformer model)"),Syo=l(),Y_=a("li"),the=a("strong"),Ryo=o("swinv2"),Pyo=o(" \u2014 "),dO=a("a"),Byo=o("Swinv2Model"),Iyo=o(" (Swin Transformer V2 model)"),Nyo=l(),K_=a("li"),ahe=a("strong"),qyo=o("t5"),jyo=o(" \u2014 "),cO=a("a"),Dyo=o("T5Model"),Gyo=o(" (T5 model)"),Oyo=l(),Z_=a("li"),nhe=a("strong"),Vyo=o("tapas"),Xyo=o(" \u2014 "),mO=a("a"),zyo=o("TapasModel"),Wyo=o(" (TAPAS model)"),Qyo=l(),e2=a("li"),she=a("strong"),Uyo=o("trajectory_transformer"),Hyo=o(" \u2014 "),fO=a("a"),Jyo=o("TrajectoryTransformerModel"),Yyo=o(" (Trajectory Transformer model)"),Kyo=l(),o2=a("li"),lhe=a("strong"),Zyo=o("transfo-xl"),e8o=o(" \u2014 "),gO=a("a"),o8o=o("TransfoXLModel"),r8o=o(" (Transformer-XL model)"),t8o=l(),r2=a("li"),ihe=a("strong"),a8o=o("unispeech"),n8o=o(" \u2014 "),hO=a("a"),s8o=o("UniSpeechModel"),l8o=o(" (UniSpeech model)"),i8o=l(),t2=a("li"),dhe=a("strong"),d8o=o("unispeech-sat"),c8o=o(" \u2014 "),uO=a("a"),m8o=o("UniSpeechSatModel"),f8o=o(" (UniSpeechSat model)"),g8o=l(),a2=a("li"),che=a("strong"),h8o=o("van"),u8o=o(" \u2014 "),pO=a("a"),p8o=o("VanModel"),_8o=o(" (VAN model)"),b8o=l(),n2=a("li"),mhe=a("strong"),v8o=o("videomae"),F8o=o(" \u2014 "),_O=a("a"),T8o=o("VideoMAEModel"),M8o=o(" (VideoMAE model)"),E8o=l(),s2=a("li"),fhe=a("strong"),C8o=o("vilt"),w8o=o(" \u2014 "),bO=a("a"),A8o=o("ViltModel"),L8o=o(" (ViLT model)"),y8o=l(),l2=a("li"),ghe=a("strong"),x8o=o("vision-text-dual-encoder"),$8o=o(" \u2014 "),vO=a("a"),k8o=o("VisionTextDualEncoderModel"),S8o=o(" (VisionTextDualEncoder model)"),R8o=l(),i2=a("li"),hhe=a("strong"),P8o=o("visual_bert"),B8o=o(" \u2014 "),FO=a("a"),I8o=o("VisualBertModel"),N8o=o(" (VisualBERT model)"),q8o=l(),d2=a("li"),uhe=a("strong"),j8o=o("vit"),D8o=o(" \u2014 "),TO=a("a"),G8o=o("ViTModel"),O8o=o(" (ViT model)"),V8o=l(),c2=a("li"),phe=a("strong"),X8o=o("vit_mae"),z8o=o(" \u2014 "),MO=a("a"),W8o=o("ViTMAEModel"),Q8o=o(" (ViTMAE model)"),U8o=l(),m2=a("li"),_he=a("strong"),H8o=o("wav2vec2"),J8o=o(" \u2014 "),EO=a("a"),Y8o=o("Wav2Vec2Model"),K8o=o(" (Wav2Vec2 model)"),Z8o=l(),f2=a("li"),bhe=a("strong"),e9o=o("wav2vec2-conformer"),o9o=o(" \u2014 "),CO=a("a"),r9o=o("Wav2Vec2ConformerModel"),t9o=o(" (Wav2Vec2-Conformer model)"),a9o=l(),g2=a("li"),vhe=a("strong"),n9o=o("wavlm"),s9o=o(" \u2014 "),wO=a("a"),l9o=o("WavLMModel"),i9o=o(" (WavLM model)"),d9o=l(),h2=a("li"),Fhe=a("strong"),c9o=o("xglm"),m9o=o(" \u2014 "),AO=a("a"),f9o=o("XGLMModel"),g9o=o(" (XGLM model)"),h9o=l(),u2=a("li"),The=a("strong"),u9o=o("xlm"),p9o=o(" \u2014 "),LO=a("a"),_9o=o("XLMModel"),b9o=o(" (XLM model)"),v9o=l(),p2=a("li"),Mhe=a("strong"),F9o=o("xlm-prophetnet"),T9o=o(" \u2014 "),yO=a("a"),M9o=o("XLMProphetNetModel"),E9o=o(" (XLM-ProphetNet model)"),C9o=l(),_2=a("li"),Ehe=a("strong"),w9o=o("xlm-roberta"),A9o=o(" \u2014 "),xO=a("a"),L9o=o("XLMRobertaModel"),y9o=o(" (XLM-RoBERTa model)"),x9o=l(),b2=a("li"),Che=a("strong"),$9o=o("xlm-roberta-xl"),k9o=o(" \u2014 "),$O=a("a"),S9o=o("XLMRobertaXLModel"),R9o=o(" (XLM-RoBERTa-XL model)"),P9o=l(),v2=a("li"),whe=a("strong"),B9o=o("xlnet"),I9o=o(" \u2014 "),kO=a("a"),N9o=o("XLNetModel"),q9o=o(" (XLNet model)"),j9o=l(),F2=a("li"),Ahe=a("strong"),D9o=o("yolos"),G9o=o(" \u2014 "),SO=a("a"),O9o=o("YolosModel"),V9o=o(" (YOLOS model)"),X9o=l(),T2=a("li"),Lhe=a("strong"),z9o=o("yoso"),W9o=o(" \u2014 "),RO=a("a"),Q9o=o("YosoModel"),U9o=o(" (YOSO model)"),H9o=l(),M2=a("p"),J9o=o("The model is set in evaluation mode by default using "),yhe=a("code"),Y9o=o("model.eval()"),K9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xhe=a("code"),Z9o=o("model.train()"),exo=l(),F(E2.$$.fragment),jQe=l(),nd=a("h2"),C2=a("a"),$he=a("span"),F(D8.$$.fragment),oxo=l(),khe=a("span"),rxo=o("AutoModelForPreTraining"),DQe=l(),Ro=a("div"),F(G8.$$.fragment),txo=l(),sd=a("p"),axo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),PO=a("a"),nxo=o("from_pretrained()"),sxo=o(" class method or the "),BO=a("a"),lxo=o("from_config()"),ixo=o(` class
method.`),dxo=l(),O8=a("p"),cxo=o("This class cannot be instantiated directly using "),She=a("code"),mxo=o("__init__()"),fxo=o(" (throws an error)."),gxo=l(),gt=a("div"),F(V8.$$.fragment),hxo=l(),Rhe=a("p"),uxo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),pxo=l(),ld=a("p"),_xo=o(`Note:
Loading a model from its configuration file does `),Phe=a("strong"),bxo=o("not"),vxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=a("a"),Fxo=o("from_pretrained()"),Txo=o(" to load the model weights."),Mxo=l(),F(w2.$$.fragment),Exo=l(),Ke=a("div"),F(X8.$$.fragment),Cxo=l(),Bhe=a("p"),wxo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Axo=l(),Xa=a("p"),Lxo=o("The model class to instantiate is selected based on the "),Ihe=a("code"),yxo=o("model_type"),xxo=o(` property of the config object (either
passed as an argument or loaded from `),Nhe=a("code"),$xo=o("pretrained_model_name_or_path"),kxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qhe=a("code"),Sxo=o("pretrained_model_name_or_path"),Rxo=o(":"),Pxo=l(),G=a("ul"),A2=a("li"),jhe=a("strong"),Bxo=o("albert"),Ixo=o(" \u2014 "),NO=a("a"),Nxo=o("AlbertForPreTraining"),qxo=o(" (ALBERT model)"),jxo=l(),L2=a("li"),Dhe=a("strong"),Dxo=o("bart"),Gxo=o(" \u2014 "),qO=a("a"),Oxo=o("BartForConditionalGeneration"),Vxo=o(" (BART model)"),Xxo=l(),y2=a("li"),Ghe=a("strong"),zxo=o("bert"),Wxo=o(" \u2014 "),jO=a("a"),Qxo=o("BertForPreTraining"),Uxo=o(" (BERT model)"),Hxo=l(),x2=a("li"),Ohe=a("strong"),Jxo=o("big_bird"),Yxo=o(" \u2014 "),DO=a("a"),Kxo=o("BigBirdForPreTraining"),Zxo=o(" (BigBird model)"),e$o=l(),$2=a("li"),Vhe=a("strong"),o$o=o("bloom"),r$o=o(" \u2014 "),GO=a("a"),t$o=o("BloomForCausalLM"),a$o=o(" (BLOOM model)"),n$o=l(),k2=a("li"),Xhe=a("strong"),s$o=o("camembert"),l$o=o(" \u2014 "),OO=a("a"),i$o=o("CamembertForMaskedLM"),d$o=o(" (CamemBERT model)"),c$o=l(),S2=a("li"),zhe=a("strong"),m$o=o("ctrl"),f$o=o(" \u2014 "),VO=a("a"),g$o=o("CTRLLMHeadModel"),h$o=o(" (CTRL model)"),u$o=l(),R2=a("li"),Whe=a("strong"),p$o=o("data2vec-text"),_$o=o(" \u2014 "),XO=a("a"),b$o=o("Data2VecTextForMaskedLM"),v$o=o(" (Data2VecText model)"),F$o=l(),P2=a("li"),Qhe=a("strong"),T$o=o("deberta"),M$o=o(" \u2014 "),zO=a("a"),E$o=o("DebertaForMaskedLM"),C$o=o(" (DeBERTa model)"),w$o=l(),B2=a("li"),Uhe=a("strong"),A$o=o("deberta-v2"),L$o=o(" \u2014 "),WO=a("a"),y$o=o("DebertaV2ForMaskedLM"),x$o=o(" (DeBERTa-v2 model)"),$$o=l(),I2=a("li"),Hhe=a("strong"),k$o=o("distilbert"),S$o=o(" \u2014 "),QO=a("a"),R$o=o("DistilBertForMaskedLM"),P$o=o(" (DistilBERT model)"),B$o=l(),N2=a("li"),Jhe=a("strong"),I$o=o("electra"),N$o=o(" \u2014 "),UO=a("a"),q$o=o("ElectraForPreTraining"),j$o=o(" (ELECTRA model)"),D$o=l(),q2=a("li"),Yhe=a("strong"),G$o=o("flaubert"),O$o=o(" \u2014 "),HO=a("a"),V$o=o("FlaubertWithLMHeadModel"),X$o=o(" (FlauBERT model)"),z$o=l(),j2=a("li"),Khe=a("strong"),W$o=o("flava"),Q$o=o(" \u2014 "),JO=a("a"),U$o=o("FlavaForPreTraining"),H$o=o(" (FLAVA model)"),J$o=l(),D2=a("li"),Zhe=a("strong"),Y$o=o("fnet"),K$o=o(" \u2014 "),YO=a("a"),Z$o=o("FNetForPreTraining"),eko=o(" (FNet model)"),oko=l(),G2=a("li"),eue=a("strong"),rko=o("fsmt"),tko=o(" \u2014 "),KO=a("a"),ako=o("FSMTForConditionalGeneration"),nko=o(" (FairSeq Machine-Translation model)"),sko=l(),O2=a("li"),oue=a("strong"),lko=o("funnel"),iko=o(" \u2014 "),ZO=a("a"),dko=o("FunnelForPreTraining"),cko=o(" (Funnel Transformer model)"),mko=l(),V2=a("li"),rue=a("strong"),fko=o("gpt2"),gko=o(" \u2014 "),eV=a("a"),hko=o("GPT2LMHeadModel"),uko=o(" (OpenAI GPT-2 model)"),pko=l(),X2=a("li"),tue=a("strong"),_ko=o("ibert"),bko=o(" \u2014 "),oV=a("a"),vko=o("IBertForMaskedLM"),Fko=o(" (I-BERT model)"),Tko=l(),z2=a("li"),aue=a("strong"),Mko=o("layoutlm"),Eko=o(" \u2014 "),rV=a("a"),Cko=o("LayoutLMForMaskedLM"),wko=o(" (LayoutLM model)"),Ako=l(),W2=a("li"),nue=a("strong"),Lko=o("longformer"),yko=o(" \u2014 "),tV=a("a"),xko=o("LongformerForMaskedLM"),$ko=o(" (Longformer model)"),kko=l(),Q2=a("li"),sue=a("strong"),Sko=o("luke"),Rko=o(" \u2014 "),aV=a("a"),Pko=o("LukeForMaskedLM"),Bko=o(" (LUKE model)"),Iko=l(),U2=a("li"),lue=a("strong"),Nko=o("lxmert"),qko=o(" \u2014 "),nV=a("a"),jko=o("LxmertForPreTraining"),Dko=o(" (LXMERT model)"),Gko=l(),H2=a("li"),iue=a("strong"),Oko=o("megatron-bert"),Vko=o(" \u2014 "),sV=a("a"),Xko=o("MegatronBertForPreTraining"),zko=o(" (Megatron-BERT model)"),Wko=l(),J2=a("li"),due=a("strong"),Qko=o("mobilebert"),Uko=o(" \u2014 "),lV=a("a"),Hko=o("MobileBertForPreTraining"),Jko=o(" (MobileBERT model)"),Yko=l(),Y2=a("li"),cue=a("strong"),Kko=o("mpnet"),Zko=o(" \u2014 "),iV=a("a"),eSo=o("MPNetForMaskedLM"),oSo=o(" (MPNet model)"),rSo=l(),K2=a("li"),mue=a("strong"),tSo=o("mvp"),aSo=o(" \u2014 "),dV=a("a"),nSo=o("MvpForConditionalGeneration"),sSo=o(" (MVP model)"),lSo=l(),Z2=a("li"),fue=a("strong"),iSo=o("nezha"),dSo=o(" \u2014 "),cV=a("a"),cSo=o("NezhaForPreTraining"),mSo=o(" (Nezha model)"),fSo=l(),eb=a("li"),gue=a("strong"),gSo=o("openai-gpt"),hSo=o(" \u2014 "),mV=a("a"),uSo=o("OpenAIGPTLMHeadModel"),pSo=o(" (OpenAI GPT model)"),_So=l(),ob=a("li"),hue=a("strong"),bSo=o("retribert"),vSo=o(" \u2014 "),fV=a("a"),FSo=o("RetriBertModel"),TSo=o(" (RetriBERT model)"),MSo=l(),rb=a("li"),uue=a("strong"),ESo=o("roberta"),CSo=o(" \u2014 "),gV=a("a"),wSo=o("RobertaForMaskedLM"),ASo=o(" (RoBERTa model)"),LSo=l(),tb=a("li"),pue=a("strong"),ySo=o("splinter"),xSo=o(" \u2014 "),hV=a("a"),$So=o("SplinterForPreTraining"),kSo=o(" (Splinter model)"),SSo=l(),ab=a("li"),_ue=a("strong"),RSo=o("squeezebert"),PSo=o(" \u2014 "),uV=a("a"),BSo=o("SqueezeBertForMaskedLM"),ISo=o(" (SqueezeBERT model)"),NSo=l(),nb=a("li"),bue=a("strong"),qSo=o("t5"),jSo=o(" \u2014 "),pV=a("a"),DSo=o("T5ForConditionalGeneration"),GSo=o(" (T5 model)"),OSo=l(),sb=a("li"),vue=a("strong"),VSo=o("tapas"),XSo=o(" \u2014 "),_V=a("a"),zSo=o("TapasForMaskedLM"),WSo=o(" (TAPAS model)"),QSo=l(),lb=a("li"),Fue=a("strong"),USo=o("transfo-xl"),HSo=o(" \u2014 "),bV=a("a"),JSo=o("TransfoXLLMHeadModel"),YSo=o(" (Transformer-XL model)"),KSo=l(),ib=a("li"),Tue=a("strong"),ZSo=o("unispeech"),eRo=o(" \u2014 "),vV=a("a"),oRo=o("UniSpeechForPreTraining"),rRo=o(" (UniSpeech model)"),tRo=l(),db=a("li"),Mue=a("strong"),aRo=o("unispeech-sat"),nRo=o(" \u2014 "),FV=a("a"),sRo=o("UniSpeechSatForPreTraining"),lRo=o(" (UniSpeechSat model)"),iRo=l(),cb=a("li"),Eue=a("strong"),dRo=o("videomae"),cRo=o(" \u2014 "),TV=a("a"),mRo=o("VideoMAEForPreTraining"),fRo=o(" (VideoMAE model)"),gRo=l(),mb=a("li"),Cue=a("strong"),hRo=o("visual_bert"),uRo=o(" \u2014 "),MV=a("a"),pRo=o("VisualBertForPreTraining"),_Ro=o(" (VisualBERT model)"),bRo=l(),fb=a("li"),wue=a("strong"),vRo=o("vit_mae"),FRo=o(" \u2014 "),EV=a("a"),TRo=o("ViTMAEForPreTraining"),MRo=o(" (ViTMAE model)"),ERo=l(),gb=a("li"),Aue=a("strong"),CRo=o("wav2vec2"),wRo=o(" \u2014 "),CV=a("a"),ARo=o("Wav2Vec2ForPreTraining"),LRo=o(" (Wav2Vec2 model)"),yRo=l(),hb=a("li"),Lue=a("strong"),xRo=o("wav2vec2-conformer"),$Ro=o(" \u2014 "),wV=a("a"),kRo=o("Wav2Vec2ConformerForPreTraining"),SRo=o(" (Wav2Vec2-Conformer model)"),RRo=l(),ub=a("li"),yue=a("strong"),PRo=o("xlm"),BRo=o(" \u2014 "),AV=a("a"),IRo=o("XLMWithLMHeadModel"),NRo=o(" (XLM model)"),qRo=l(),pb=a("li"),xue=a("strong"),jRo=o("xlm-roberta"),DRo=o(" \u2014 "),LV=a("a"),GRo=o("XLMRobertaForMaskedLM"),ORo=o(" (XLM-RoBERTa model)"),VRo=l(),_b=a("li"),$ue=a("strong"),XRo=o("xlm-roberta-xl"),zRo=o(" \u2014 "),yV=a("a"),WRo=o("XLMRobertaXLForMaskedLM"),QRo=o(" (XLM-RoBERTa-XL model)"),URo=l(),bb=a("li"),kue=a("strong"),HRo=o("xlnet"),JRo=o(" \u2014 "),xV=a("a"),YRo=o("XLNetLMHeadModel"),KRo=o(" (XLNet model)"),ZRo=l(),vb=a("p"),ePo=o("The model is set in evaluation mode by default using "),Sue=a("code"),oPo=o("model.eval()"),rPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rue=a("code"),tPo=o("model.train()"),aPo=l(),F(Fb.$$.fragment),GQe=l(),id=a("h2"),Tb=a("a"),Pue=a("span"),F(z8.$$.fragment),nPo=l(),Bue=a("span"),sPo=o("AutoModelForCausalLM"),OQe=l(),Po=a("div"),F(W8.$$.fragment),lPo=l(),dd=a("p"),iPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$V=a("a"),dPo=o("from_pretrained()"),cPo=o(" class method or the "),kV=a("a"),mPo=o("from_config()"),fPo=o(` class
method.`),gPo=l(),Q8=a("p"),hPo=o("This class cannot be instantiated directly using "),Iue=a("code"),uPo=o("__init__()"),pPo=o(" (throws an error)."),_Po=l(),ht=a("div"),F(U8.$$.fragment),bPo=l(),Nue=a("p"),vPo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),FPo=l(),cd=a("p"),TPo=o(`Note:
Loading a model from its configuration file does `),que=a("strong"),MPo=o("not"),EPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SV=a("a"),CPo=o("from_pretrained()"),wPo=o(" to load the model weights."),APo=l(),F(Mb.$$.fragment),LPo=l(),Ze=a("div"),F(H8.$$.fragment),yPo=l(),jue=a("p"),xPo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$Po=l(),za=a("p"),kPo=o("The model class to instantiate is selected based on the "),Due=a("code"),SPo=o("model_type"),RPo=o(` property of the config object (either
passed as an argument or loaded from `),Gue=a("code"),PPo=o("pretrained_model_name_or_path"),BPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oue=a("code"),IPo=o("pretrained_model_name_or_path"),NPo=o(":"),qPo=l(),z=a("ul"),Eb=a("li"),Vue=a("strong"),jPo=o("bart"),DPo=o(" \u2014 "),RV=a("a"),GPo=o("BartForCausalLM"),OPo=o(" (BART model)"),VPo=l(),Cb=a("li"),Xue=a("strong"),XPo=o("bert"),zPo=o(" \u2014 "),PV=a("a"),WPo=o("BertLMHeadModel"),QPo=o(" (BERT model)"),UPo=l(),wb=a("li"),zue=a("strong"),HPo=o("bert-generation"),JPo=o(" \u2014 "),BV=a("a"),YPo=o("BertGenerationDecoder"),KPo=o(" (Bert Generation model)"),ZPo=l(),Ab=a("li"),Wue=a("strong"),eBo=o("big_bird"),oBo=o(" \u2014 "),IV=a("a"),rBo=o("BigBirdForCausalLM"),tBo=o(" (BigBird model)"),aBo=l(),Lb=a("li"),Que=a("strong"),nBo=o("bigbird_pegasus"),sBo=o(" \u2014 "),NV=a("a"),lBo=o("BigBirdPegasusForCausalLM"),iBo=o(" (BigBird-Pegasus model)"),dBo=l(),yb=a("li"),Uue=a("strong"),cBo=o("blenderbot"),mBo=o(" \u2014 "),qV=a("a"),fBo=o("BlenderbotForCausalLM"),gBo=o(" (Blenderbot model)"),hBo=l(),xb=a("li"),Hue=a("strong"),uBo=o("blenderbot-small"),pBo=o(" \u2014 "),jV=a("a"),_Bo=o("BlenderbotSmallForCausalLM"),bBo=o(" (BlenderbotSmall model)"),vBo=l(),$b=a("li"),Jue=a("strong"),FBo=o("bloom"),TBo=o(" \u2014 "),DV=a("a"),MBo=o("BloomForCausalLM"),EBo=o(" (BLOOM model)"),CBo=l(),kb=a("li"),Yue=a("strong"),wBo=o("camembert"),ABo=o(" \u2014 "),GV=a("a"),LBo=o("CamembertForCausalLM"),yBo=o(" (CamemBERT model)"),xBo=l(),Sb=a("li"),Kue=a("strong"),$Bo=o("codegen"),kBo=o(" \u2014 "),OV=a("a"),SBo=o("CodeGenForCausalLM"),RBo=o(" (CodeGen model)"),PBo=l(),Rb=a("li"),Zue=a("strong"),BBo=o("ctrl"),IBo=o(" \u2014 "),VV=a("a"),NBo=o("CTRLLMHeadModel"),qBo=o(" (CTRL model)"),jBo=l(),Pb=a("li"),epe=a("strong"),DBo=o("data2vec-text"),GBo=o(" \u2014 "),XV=a("a"),OBo=o("Data2VecTextForCausalLM"),VBo=o(" (Data2VecText model)"),XBo=l(),Bb=a("li"),ope=a("strong"),zBo=o("electra"),WBo=o(" \u2014 "),zV=a("a"),QBo=o("ElectraForCausalLM"),UBo=o(" (ELECTRA model)"),HBo=l(),Ib=a("li"),rpe=a("strong"),JBo=o("gpt2"),YBo=o(" \u2014 "),WV=a("a"),KBo=o("GPT2LMHeadModel"),ZBo=o(" (OpenAI GPT-2 model)"),eIo=l(),Nb=a("li"),tpe=a("strong"),oIo=o("gpt_neo"),rIo=o(" \u2014 "),QV=a("a"),tIo=o("GPTNeoForCausalLM"),aIo=o(" (GPT Neo model)"),nIo=l(),qb=a("li"),ape=a("strong"),sIo=o("gpt_neox"),lIo=o(" \u2014 "),UV=a("a"),iIo=o("GPTNeoXForCausalLM"),dIo=o(" (GPT NeoX model)"),cIo=l(),jb=a("li"),npe=a("strong"),mIo=o("gptj"),fIo=o(" \u2014 "),HV=a("a"),gIo=o("GPTJForCausalLM"),hIo=o(" (GPT-J model)"),uIo=l(),Db=a("li"),spe=a("strong"),pIo=o("marian"),_Io=o(" \u2014 "),JV=a("a"),bIo=o("MarianForCausalLM"),vIo=o(" (Marian model)"),FIo=l(),Gb=a("li"),lpe=a("strong"),TIo=o("mbart"),MIo=o(" \u2014 "),YV=a("a"),EIo=o("MBartForCausalLM"),CIo=o(" (mBART model)"),wIo=l(),Ob=a("li"),ipe=a("strong"),AIo=o("megatron-bert"),LIo=o(" \u2014 "),KV=a("a"),yIo=o("MegatronBertForCausalLM"),xIo=o(" (Megatron-BERT model)"),$Io=l(),Vb=a("li"),dpe=a("strong"),kIo=o("mvp"),SIo=o(" \u2014 "),ZV=a("a"),RIo=o("MvpForCausalLM"),PIo=o(" (MVP model)"),BIo=l(),Xb=a("li"),cpe=a("strong"),IIo=o("openai-gpt"),NIo=o(" \u2014 "),eX=a("a"),qIo=o("OpenAIGPTLMHeadModel"),jIo=o(" (OpenAI GPT model)"),DIo=l(),zb=a("li"),mpe=a("strong"),GIo=o("opt"),OIo=o(" \u2014 "),oX=a("a"),VIo=o("OPTForCausalLM"),XIo=o(" (OPT model)"),zIo=l(),Wb=a("li"),fpe=a("strong"),WIo=o("pegasus"),QIo=o(" \u2014 "),rX=a("a"),UIo=o("PegasusForCausalLM"),HIo=o(" (Pegasus model)"),JIo=l(),Qb=a("li"),gpe=a("strong"),YIo=o("plbart"),KIo=o(" \u2014 "),tX=a("a"),ZIo=o("PLBartForCausalLM"),eNo=o(" (PLBart model)"),oNo=l(),Ub=a("li"),hpe=a("strong"),rNo=o("prophetnet"),tNo=o(" \u2014 "),aX=a("a"),aNo=o("ProphetNetForCausalLM"),nNo=o(" (ProphetNet model)"),sNo=l(),Hb=a("li"),upe=a("strong"),lNo=o("qdqbert"),iNo=o(" \u2014 "),nX=a("a"),dNo=o("QDQBertLMHeadModel"),cNo=o(" (QDQBert model)"),mNo=l(),Jb=a("li"),ppe=a("strong"),fNo=o("reformer"),gNo=o(" \u2014 "),sX=a("a"),hNo=o("ReformerModelWithLMHead"),uNo=o(" (Reformer model)"),pNo=l(),Yb=a("li"),_pe=a("strong"),_No=o("rembert"),bNo=o(" \u2014 "),lX=a("a"),vNo=o("RemBertForCausalLM"),FNo=o(" (RemBERT model)"),TNo=l(),Kb=a("li"),bpe=a("strong"),MNo=o("roberta"),ENo=o(" \u2014 "),iX=a("a"),CNo=o("RobertaForCausalLM"),wNo=o(" (RoBERTa model)"),ANo=l(),Zb=a("li"),vpe=a("strong"),LNo=o("roformer"),yNo=o(" \u2014 "),dX=a("a"),xNo=o("RoFormerForCausalLM"),$No=o(" (RoFormer model)"),kNo=l(),ev=a("li"),Fpe=a("strong"),SNo=o("speech_to_text_2"),RNo=o(" \u2014 "),cX=a("a"),PNo=o("Speech2Text2ForCausalLM"),BNo=o(" (Speech2Text2 model)"),INo=l(),ov=a("li"),Tpe=a("strong"),NNo=o("transfo-xl"),qNo=o(" \u2014 "),mX=a("a"),jNo=o("TransfoXLLMHeadModel"),DNo=o(" (Transformer-XL model)"),GNo=l(),rv=a("li"),Mpe=a("strong"),ONo=o("trocr"),VNo=o(" \u2014 "),fX=a("a"),XNo=o("TrOCRForCausalLM"),zNo=o(" (TrOCR model)"),WNo=l(),tv=a("li"),Epe=a("strong"),QNo=o("xglm"),UNo=o(" \u2014 "),gX=a("a"),HNo=o("XGLMForCausalLM"),JNo=o(" (XGLM model)"),YNo=l(),av=a("li"),Cpe=a("strong"),KNo=o("xlm"),ZNo=o(" \u2014 "),hX=a("a"),eqo=o("XLMWithLMHeadModel"),oqo=o(" (XLM model)"),rqo=l(),nv=a("li"),wpe=a("strong"),tqo=o("xlm-prophetnet"),aqo=o(" \u2014 "),uX=a("a"),nqo=o("XLMProphetNetForCausalLM"),sqo=o(" (XLM-ProphetNet model)"),lqo=l(),sv=a("li"),Ape=a("strong"),iqo=o("xlm-roberta"),dqo=o(" \u2014 "),pX=a("a"),cqo=o("XLMRobertaForCausalLM"),mqo=o(" (XLM-RoBERTa model)"),fqo=l(),lv=a("li"),Lpe=a("strong"),gqo=o("xlm-roberta-xl"),hqo=o(" \u2014 "),_X=a("a"),uqo=o("XLMRobertaXLForCausalLM"),pqo=o(" (XLM-RoBERTa-XL model)"),_qo=l(),iv=a("li"),ype=a("strong"),bqo=o("xlnet"),vqo=o(" \u2014 "),bX=a("a"),Fqo=o("XLNetLMHeadModel"),Tqo=o(" (XLNet model)"),Mqo=l(),dv=a("p"),Eqo=o("The model is set in evaluation mode by default using "),xpe=a("code"),Cqo=o("model.eval()"),wqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$pe=a("code"),Aqo=o("model.train()"),Lqo=l(),F(cv.$$.fragment),VQe=l(),md=a("h2"),mv=a("a"),kpe=a("span"),F(J8.$$.fragment),yqo=l(),Spe=a("span"),xqo=o("AutoModelForMaskedLM"),XQe=l(),Bo=a("div"),F(Y8.$$.fragment),$qo=l(),fd=a("p"),kqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),vX=a("a"),Sqo=o("from_pretrained()"),Rqo=o(" class method or the "),FX=a("a"),Pqo=o("from_config()"),Bqo=o(` class
method.`),Iqo=l(),K8=a("p"),Nqo=o("This class cannot be instantiated directly using "),Rpe=a("code"),qqo=o("__init__()"),jqo=o(" (throws an error)."),Dqo=l(),ut=a("div"),F(Z8.$$.fragment),Gqo=l(),Ppe=a("p"),Oqo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Vqo=l(),gd=a("p"),Xqo=o(`Note:
Loading a model from its configuration file does `),Bpe=a("strong"),zqo=o("not"),Wqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TX=a("a"),Qqo=o("from_pretrained()"),Uqo=o(" to load the model weights."),Hqo=l(),F(fv.$$.fragment),Jqo=l(),eo=a("div"),F(e9.$$.fragment),Yqo=l(),Ipe=a("p"),Kqo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Zqo=l(),Wa=a("p"),ejo=o("The model class to instantiate is selected based on the "),Npe=a("code"),ojo=o("model_type"),rjo=o(` property of the config object (either
passed as an argument or loaded from `),qpe=a("code"),tjo=o("pretrained_model_name_or_path"),ajo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jpe=a("code"),njo=o("pretrained_model_name_or_path"),sjo=o(":"),ljo=l(),Q=a("ul"),gv=a("li"),Dpe=a("strong"),ijo=o("albert"),djo=o(" \u2014 "),MX=a("a"),cjo=o("AlbertForMaskedLM"),mjo=o(" (ALBERT model)"),fjo=l(),hv=a("li"),Gpe=a("strong"),gjo=o("bart"),hjo=o(" \u2014 "),EX=a("a"),ujo=o("BartForConditionalGeneration"),pjo=o(" (BART model)"),_jo=l(),uv=a("li"),Ope=a("strong"),bjo=o("bert"),vjo=o(" \u2014 "),CX=a("a"),Fjo=o("BertForMaskedLM"),Tjo=o(" (BERT model)"),Mjo=l(),pv=a("li"),Vpe=a("strong"),Ejo=o("big_bird"),Cjo=o(" \u2014 "),wX=a("a"),wjo=o("BigBirdForMaskedLM"),Ajo=o(" (BigBird model)"),Ljo=l(),_v=a("li"),Xpe=a("strong"),yjo=o("camembert"),xjo=o(" \u2014 "),AX=a("a"),$jo=o("CamembertForMaskedLM"),kjo=o(" (CamemBERT model)"),Sjo=l(),bv=a("li"),zpe=a("strong"),Rjo=o("convbert"),Pjo=o(" \u2014 "),LX=a("a"),Bjo=o("ConvBertForMaskedLM"),Ijo=o(" (ConvBERT model)"),Njo=l(),vv=a("li"),Wpe=a("strong"),qjo=o("data2vec-text"),jjo=o(" \u2014 "),yX=a("a"),Djo=o("Data2VecTextForMaskedLM"),Gjo=o(" (Data2VecText model)"),Ojo=l(),Fv=a("li"),Qpe=a("strong"),Vjo=o("deberta"),Xjo=o(" \u2014 "),xX=a("a"),zjo=o("DebertaForMaskedLM"),Wjo=o(" (DeBERTa model)"),Qjo=l(),Tv=a("li"),Upe=a("strong"),Ujo=o("deberta-v2"),Hjo=o(" \u2014 "),$X=a("a"),Jjo=o("DebertaV2ForMaskedLM"),Yjo=o(" (DeBERTa-v2 model)"),Kjo=l(),Mv=a("li"),Hpe=a("strong"),Zjo=o("distilbert"),eDo=o(" \u2014 "),kX=a("a"),oDo=o("DistilBertForMaskedLM"),rDo=o(" (DistilBERT model)"),tDo=l(),Ev=a("li"),Jpe=a("strong"),aDo=o("electra"),nDo=o(" \u2014 "),SX=a("a"),sDo=o("ElectraForMaskedLM"),lDo=o(" (ELECTRA model)"),iDo=l(),Cv=a("li"),Ype=a("strong"),dDo=o("flaubert"),cDo=o(" \u2014 "),RX=a("a"),mDo=o("FlaubertWithLMHeadModel"),fDo=o(" (FlauBERT model)"),gDo=l(),wv=a("li"),Kpe=a("strong"),hDo=o("fnet"),uDo=o(" \u2014 "),PX=a("a"),pDo=o("FNetForMaskedLM"),_Do=o(" (FNet model)"),bDo=l(),Av=a("li"),Zpe=a("strong"),vDo=o("funnel"),FDo=o(" \u2014 "),BX=a("a"),TDo=o("FunnelForMaskedLM"),MDo=o(" (Funnel Transformer model)"),EDo=l(),Lv=a("li"),e_e=a("strong"),CDo=o("ibert"),wDo=o(" \u2014 "),IX=a("a"),ADo=o("IBertForMaskedLM"),LDo=o(" (I-BERT model)"),yDo=l(),yv=a("li"),o_e=a("strong"),xDo=o("layoutlm"),$Do=o(" \u2014 "),NX=a("a"),kDo=o("LayoutLMForMaskedLM"),SDo=o(" (LayoutLM model)"),RDo=l(),xv=a("li"),r_e=a("strong"),PDo=o("longformer"),BDo=o(" \u2014 "),qX=a("a"),IDo=o("LongformerForMaskedLM"),NDo=o(" (Longformer model)"),qDo=l(),$v=a("li"),t_e=a("strong"),jDo=o("luke"),DDo=o(" \u2014 "),jX=a("a"),GDo=o("LukeForMaskedLM"),ODo=o(" (LUKE model)"),VDo=l(),kv=a("li"),a_e=a("strong"),XDo=o("mbart"),zDo=o(" \u2014 "),DX=a("a"),WDo=o("MBartForConditionalGeneration"),QDo=o(" (mBART model)"),UDo=l(),Sv=a("li"),n_e=a("strong"),HDo=o("megatron-bert"),JDo=o(" \u2014 "),GX=a("a"),YDo=o("MegatronBertForMaskedLM"),KDo=o(" (Megatron-BERT model)"),ZDo=l(),Rv=a("li"),s_e=a("strong"),eGo=o("mobilebert"),oGo=o(" \u2014 "),OX=a("a"),rGo=o("MobileBertForMaskedLM"),tGo=o(" (MobileBERT model)"),aGo=l(),Pv=a("li"),l_e=a("strong"),nGo=o("mpnet"),sGo=o(" \u2014 "),VX=a("a"),lGo=o("MPNetForMaskedLM"),iGo=o(" (MPNet model)"),dGo=l(),Bv=a("li"),i_e=a("strong"),cGo=o("mvp"),mGo=o(" \u2014 "),XX=a("a"),fGo=o("MvpForConditionalGeneration"),gGo=o(" (MVP model)"),hGo=l(),Iv=a("li"),d_e=a("strong"),uGo=o("nezha"),pGo=o(" \u2014 "),zX=a("a"),_Go=o("NezhaForMaskedLM"),bGo=o(" (Nezha model)"),vGo=l(),Nv=a("li"),c_e=a("strong"),FGo=o("nystromformer"),TGo=o(" \u2014 "),WX=a("a"),MGo=o("NystromformerForMaskedLM"),EGo=o(" (Nystr\xF6mformer model)"),CGo=l(),qv=a("li"),m_e=a("strong"),wGo=o("perceiver"),AGo=o(" \u2014 "),QX=a("a"),LGo=o("PerceiverForMaskedLM"),yGo=o(" (Perceiver model)"),xGo=l(),jv=a("li"),f_e=a("strong"),$Go=o("qdqbert"),kGo=o(" \u2014 "),UX=a("a"),SGo=o("QDQBertForMaskedLM"),RGo=o(" (QDQBert model)"),PGo=l(),Dv=a("li"),g_e=a("strong"),BGo=o("reformer"),IGo=o(" \u2014 "),HX=a("a"),NGo=o("ReformerForMaskedLM"),qGo=o(" (Reformer model)"),jGo=l(),Gv=a("li"),h_e=a("strong"),DGo=o("rembert"),GGo=o(" \u2014 "),JX=a("a"),OGo=o("RemBertForMaskedLM"),VGo=o(" (RemBERT model)"),XGo=l(),Ov=a("li"),u_e=a("strong"),zGo=o("roberta"),WGo=o(" \u2014 "),YX=a("a"),QGo=o("RobertaForMaskedLM"),UGo=o(" (RoBERTa model)"),HGo=l(),Vv=a("li"),p_e=a("strong"),JGo=o("roformer"),YGo=o(" \u2014 "),KX=a("a"),KGo=o("RoFormerForMaskedLM"),ZGo=o(" (RoFormer model)"),eOo=l(),Xv=a("li"),__e=a("strong"),oOo=o("squeezebert"),rOo=o(" \u2014 "),ZX=a("a"),tOo=o("SqueezeBertForMaskedLM"),aOo=o(" (SqueezeBERT model)"),nOo=l(),zv=a("li"),b_e=a("strong"),sOo=o("tapas"),lOo=o(" \u2014 "),ez=a("a"),iOo=o("TapasForMaskedLM"),dOo=o(" (TAPAS model)"),cOo=l(),Wv=a("li"),v_e=a("strong"),mOo=o("wav2vec2"),fOo=o(" \u2014 "),F_e=a("code"),gOo=o("Wav2Vec2ForMaskedLM"),hOo=o(" (Wav2Vec2 model)"),uOo=l(),Qv=a("li"),T_e=a("strong"),pOo=o("xlm"),_Oo=o(" \u2014 "),oz=a("a"),bOo=o("XLMWithLMHeadModel"),vOo=o(" (XLM model)"),FOo=l(),Uv=a("li"),M_e=a("strong"),TOo=o("xlm-roberta"),MOo=o(" \u2014 "),rz=a("a"),EOo=o("XLMRobertaForMaskedLM"),COo=o(" (XLM-RoBERTa model)"),wOo=l(),Hv=a("li"),E_e=a("strong"),AOo=o("xlm-roberta-xl"),LOo=o(" \u2014 "),tz=a("a"),yOo=o("XLMRobertaXLForMaskedLM"),xOo=o(" (XLM-RoBERTa-XL model)"),$Oo=l(),Jv=a("li"),C_e=a("strong"),kOo=o("yoso"),SOo=o(" \u2014 "),az=a("a"),ROo=o("YosoForMaskedLM"),POo=o(" (YOSO model)"),BOo=l(),Yv=a("p"),IOo=o("The model is set in evaluation mode by default using "),w_e=a("code"),NOo=o("model.eval()"),qOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A_e=a("code"),jOo=o("model.train()"),DOo=l(),F(Kv.$$.fragment),zQe=l(),hd=a("h2"),Zv=a("a"),L_e=a("span"),F(o9.$$.fragment),GOo=l(),y_e=a("span"),OOo=o("AutoModelForSeq2SeqLM"),WQe=l(),Io=a("div"),F(r9.$$.fragment),VOo=l(),ud=a("p"),XOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nz=a("a"),zOo=o("from_pretrained()"),WOo=o(" class method or the "),sz=a("a"),QOo=o("from_config()"),UOo=o(` class
method.`),HOo=l(),t9=a("p"),JOo=o("This class cannot be instantiated directly using "),x_e=a("code"),YOo=o("__init__()"),KOo=o(" (throws an error)."),ZOo=l(),pt=a("div"),F(a9.$$.fragment),eVo=l(),$_e=a("p"),oVo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),rVo=l(),pd=a("p"),tVo=o(`Note:
Loading a model from its configuration file does `),k_e=a("strong"),aVo=o("not"),nVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lz=a("a"),sVo=o("from_pretrained()"),lVo=o(" to load the model weights."),iVo=l(),F(e1.$$.fragment),dVo=l(),oo=a("div"),F(n9.$$.fragment),cVo=l(),S_e=a("p"),mVo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),fVo=l(),Qa=a("p"),gVo=o("The model class to instantiate is selected based on the "),R_e=a("code"),hVo=o("model_type"),uVo=o(` property of the config object (either
passed as an argument or loaded from `),P_e=a("code"),pVo=o("pretrained_model_name_or_path"),_Vo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B_e=a("code"),bVo=o("pretrained_model_name_or_path"),vVo=o(":"),FVo=l(),fe=a("ul"),o1=a("li"),I_e=a("strong"),TVo=o("bart"),MVo=o(" \u2014 "),iz=a("a"),EVo=o("BartForConditionalGeneration"),CVo=o(" (BART model)"),wVo=l(),r1=a("li"),N_e=a("strong"),AVo=o("bigbird_pegasus"),LVo=o(" \u2014 "),dz=a("a"),yVo=o("BigBirdPegasusForConditionalGeneration"),xVo=o(" (BigBird-Pegasus model)"),$Vo=l(),t1=a("li"),q_e=a("strong"),kVo=o("blenderbot"),SVo=o(" \u2014 "),cz=a("a"),RVo=o("BlenderbotForConditionalGeneration"),PVo=o(" (Blenderbot model)"),BVo=l(),a1=a("li"),j_e=a("strong"),IVo=o("blenderbot-small"),NVo=o(" \u2014 "),mz=a("a"),qVo=o("BlenderbotSmallForConditionalGeneration"),jVo=o(" (BlenderbotSmall model)"),DVo=l(),n1=a("li"),D_e=a("strong"),GVo=o("encoder-decoder"),OVo=o(" \u2014 "),fz=a("a"),VVo=o("EncoderDecoderModel"),XVo=o(" (Encoder decoder model)"),zVo=l(),s1=a("li"),G_e=a("strong"),WVo=o("fsmt"),QVo=o(" \u2014 "),gz=a("a"),UVo=o("FSMTForConditionalGeneration"),HVo=o(" (FairSeq Machine-Translation model)"),JVo=l(),l1=a("li"),O_e=a("strong"),YVo=o("led"),KVo=o(" \u2014 "),hz=a("a"),ZVo=o("LEDForConditionalGeneration"),eXo=o(" (LED model)"),oXo=l(),i1=a("li"),V_e=a("strong"),rXo=o("longt5"),tXo=o(" \u2014 "),uz=a("a"),aXo=o("LongT5ForConditionalGeneration"),nXo=o(" (LongT5 model)"),sXo=l(),d1=a("li"),X_e=a("strong"),lXo=o("m2m_100"),iXo=o(" \u2014 "),pz=a("a"),dXo=o("M2M100ForConditionalGeneration"),cXo=o(" (M2M100 model)"),mXo=l(),c1=a("li"),z_e=a("strong"),fXo=o("marian"),gXo=o(" \u2014 "),_z=a("a"),hXo=o("MarianMTModel"),uXo=o(" (Marian model)"),pXo=l(),m1=a("li"),W_e=a("strong"),_Xo=o("mbart"),bXo=o(" \u2014 "),bz=a("a"),vXo=o("MBartForConditionalGeneration"),FXo=o(" (mBART model)"),TXo=l(),f1=a("li"),Q_e=a("strong"),MXo=o("mt5"),EXo=o(" \u2014 "),vz=a("a"),CXo=o("MT5ForConditionalGeneration"),wXo=o(" (MT5 model)"),AXo=l(),g1=a("li"),U_e=a("strong"),LXo=o("mvp"),yXo=o(" \u2014 "),Fz=a("a"),xXo=o("MvpForConditionalGeneration"),$Xo=o(" (MVP model)"),kXo=l(),h1=a("li"),H_e=a("strong"),SXo=o("nllb"),RXo=o(" \u2014 "),Tz=a("a"),PXo=o("M2M100ForConditionalGeneration"),BXo=o(" (NLLB model)"),IXo=l(),u1=a("li"),J_e=a("strong"),NXo=o("pegasus"),qXo=o(" \u2014 "),Mz=a("a"),jXo=o("PegasusForConditionalGeneration"),DXo=o(" (Pegasus model)"),GXo=l(),p1=a("li"),Y_e=a("strong"),OXo=o("plbart"),VXo=o(" \u2014 "),Ez=a("a"),XXo=o("PLBartForConditionalGeneration"),zXo=o(" (PLBart model)"),WXo=l(),_1=a("li"),K_e=a("strong"),QXo=o("prophetnet"),UXo=o(" \u2014 "),Cz=a("a"),HXo=o("ProphetNetForConditionalGeneration"),JXo=o(" (ProphetNet model)"),YXo=l(),b1=a("li"),Z_e=a("strong"),KXo=o("t5"),ZXo=o(" \u2014 "),wz=a("a"),ezo=o("T5ForConditionalGeneration"),ozo=o(" (T5 model)"),rzo=l(),v1=a("li"),e2e=a("strong"),tzo=o("xlm-prophetnet"),azo=o(" \u2014 "),Az=a("a"),nzo=o("XLMProphetNetForConditionalGeneration"),szo=o(" (XLM-ProphetNet model)"),lzo=l(),F1=a("p"),izo=o("The model is set in evaluation mode by default using "),o2e=a("code"),dzo=o("model.eval()"),czo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r2e=a("code"),mzo=o("model.train()"),fzo=l(),F(T1.$$.fragment),QQe=l(),_d=a("h2"),M1=a("a"),t2e=a("span"),F(s9.$$.fragment),gzo=l(),a2e=a("span"),hzo=o("AutoModelForSequenceClassification"),UQe=l(),No=a("div"),F(l9.$$.fragment),uzo=l(),bd=a("p"),pzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Lz=a("a"),_zo=o("from_pretrained()"),bzo=o(" class method or the "),yz=a("a"),vzo=o("from_config()"),Fzo=o(` class
method.`),Tzo=l(),i9=a("p"),Mzo=o("This class cannot be instantiated directly using "),n2e=a("code"),Ezo=o("__init__()"),Czo=o(" (throws an error)."),wzo=l(),_t=a("div"),F(d9.$$.fragment),Azo=l(),s2e=a("p"),Lzo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),yzo=l(),vd=a("p"),xzo=o(`Note:
Loading a model from its configuration file does `),l2e=a("strong"),$zo=o("not"),kzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xz=a("a"),Szo=o("from_pretrained()"),Rzo=o(" to load the model weights."),Pzo=l(),F(E1.$$.fragment),Bzo=l(),ro=a("div"),F(c9.$$.fragment),Izo=l(),i2e=a("p"),Nzo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),qzo=l(),Ua=a("p"),jzo=o("The model class to instantiate is selected based on the "),d2e=a("code"),Dzo=o("model_type"),Gzo=o(` property of the config object (either
passed as an argument or loaded from `),c2e=a("code"),Ozo=o("pretrained_model_name_or_path"),Vzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m2e=a("code"),Xzo=o("pretrained_model_name_or_path"),zzo=o(":"),Wzo=l(),N=a("ul"),C1=a("li"),f2e=a("strong"),Qzo=o("albert"),Uzo=o(" \u2014 "),$z=a("a"),Hzo=o("AlbertForSequenceClassification"),Jzo=o(" (ALBERT model)"),Yzo=l(),w1=a("li"),g2e=a("strong"),Kzo=o("bart"),Zzo=o(" \u2014 "),kz=a("a"),eWo=o("BartForSequenceClassification"),oWo=o(" (BART model)"),rWo=l(),A1=a("li"),h2e=a("strong"),tWo=o("bert"),aWo=o(" \u2014 "),Sz=a("a"),nWo=o("BertForSequenceClassification"),sWo=o(" (BERT model)"),lWo=l(),L1=a("li"),u2e=a("strong"),iWo=o("big_bird"),dWo=o(" \u2014 "),Rz=a("a"),cWo=o("BigBirdForSequenceClassification"),mWo=o(" (BigBird model)"),fWo=l(),y1=a("li"),p2e=a("strong"),gWo=o("bigbird_pegasus"),hWo=o(" \u2014 "),Pz=a("a"),uWo=o("BigBirdPegasusForSequenceClassification"),pWo=o(" (BigBird-Pegasus model)"),_Wo=l(),x1=a("li"),_2e=a("strong"),bWo=o("bloom"),vWo=o(" \u2014 "),Bz=a("a"),FWo=o("BloomForSequenceClassification"),TWo=o(" (BLOOM model)"),MWo=l(),$1=a("li"),b2e=a("strong"),EWo=o("camembert"),CWo=o(" \u2014 "),Iz=a("a"),wWo=o("CamembertForSequenceClassification"),AWo=o(" (CamemBERT model)"),LWo=l(),k1=a("li"),v2e=a("strong"),yWo=o("canine"),xWo=o(" \u2014 "),Nz=a("a"),$Wo=o("CanineForSequenceClassification"),kWo=o(" (CANINE model)"),SWo=l(),S1=a("li"),F2e=a("strong"),RWo=o("convbert"),PWo=o(" \u2014 "),qz=a("a"),BWo=o("ConvBertForSequenceClassification"),IWo=o(" (ConvBERT model)"),NWo=l(),R1=a("li"),T2e=a("strong"),qWo=o("ctrl"),jWo=o(" \u2014 "),jz=a("a"),DWo=o("CTRLForSequenceClassification"),GWo=o(" (CTRL model)"),OWo=l(),P1=a("li"),M2e=a("strong"),VWo=o("data2vec-text"),XWo=o(" \u2014 "),Dz=a("a"),zWo=o("Data2VecTextForSequenceClassification"),WWo=o(" (Data2VecText model)"),QWo=l(),B1=a("li"),E2e=a("strong"),UWo=o("deberta"),HWo=o(" \u2014 "),Gz=a("a"),JWo=o("DebertaForSequenceClassification"),YWo=o(" (DeBERTa model)"),KWo=l(),I1=a("li"),C2e=a("strong"),ZWo=o("deberta-v2"),eQo=o(" \u2014 "),Oz=a("a"),oQo=o("DebertaV2ForSequenceClassification"),rQo=o(" (DeBERTa-v2 model)"),tQo=l(),N1=a("li"),w2e=a("strong"),aQo=o("distilbert"),nQo=o(" \u2014 "),Vz=a("a"),sQo=o("DistilBertForSequenceClassification"),lQo=o(" (DistilBERT model)"),iQo=l(),q1=a("li"),A2e=a("strong"),dQo=o("electra"),cQo=o(" \u2014 "),Xz=a("a"),mQo=o("ElectraForSequenceClassification"),fQo=o(" (ELECTRA model)"),gQo=l(),j1=a("li"),L2e=a("strong"),hQo=o("flaubert"),uQo=o(" \u2014 "),zz=a("a"),pQo=o("FlaubertForSequenceClassification"),_Qo=o(" (FlauBERT model)"),bQo=l(),D1=a("li"),y2e=a("strong"),vQo=o("fnet"),FQo=o(" \u2014 "),Wz=a("a"),TQo=o("FNetForSequenceClassification"),MQo=o(" (FNet model)"),EQo=l(),G1=a("li"),x2e=a("strong"),CQo=o("funnel"),wQo=o(" \u2014 "),Qz=a("a"),AQo=o("FunnelForSequenceClassification"),LQo=o(" (Funnel Transformer model)"),yQo=l(),O1=a("li"),$2e=a("strong"),xQo=o("gpt2"),$Qo=o(" \u2014 "),Uz=a("a"),kQo=o("GPT2ForSequenceClassification"),SQo=o(" (OpenAI GPT-2 model)"),RQo=l(),V1=a("li"),k2e=a("strong"),PQo=o("gpt_neo"),BQo=o(" \u2014 "),Hz=a("a"),IQo=o("GPTNeoForSequenceClassification"),NQo=o(" (GPT Neo model)"),qQo=l(),X1=a("li"),S2e=a("strong"),jQo=o("gptj"),DQo=o(" \u2014 "),Jz=a("a"),GQo=o("GPTJForSequenceClassification"),OQo=o(" (GPT-J model)"),VQo=l(),z1=a("li"),R2e=a("strong"),XQo=o("ibert"),zQo=o(" \u2014 "),Yz=a("a"),WQo=o("IBertForSequenceClassification"),QQo=o(" (I-BERT model)"),UQo=l(),W1=a("li"),P2e=a("strong"),HQo=o("layoutlm"),JQo=o(" \u2014 "),Kz=a("a"),YQo=o("LayoutLMForSequenceClassification"),KQo=o(" (LayoutLM model)"),ZQo=l(),Q1=a("li"),B2e=a("strong"),eUo=o("layoutlmv2"),oUo=o(" \u2014 "),Zz=a("a"),rUo=o("LayoutLMv2ForSequenceClassification"),tUo=o(" (LayoutLMv2 model)"),aUo=l(),U1=a("li"),I2e=a("strong"),nUo=o("layoutlmv3"),sUo=o(" \u2014 "),eW=a("a"),lUo=o("LayoutLMv3ForSequenceClassification"),iUo=o(" (LayoutLMv3 model)"),dUo=l(),H1=a("li"),N2e=a("strong"),cUo=o("led"),mUo=o(" \u2014 "),oW=a("a"),fUo=o("LEDForSequenceClassification"),gUo=o(" (LED model)"),hUo=l(),J1=a("li"),q2e=a("strong"),uUo=o("longformer"),pUo=o(" \u2014 "),rW=a("a"),_Uo=o("LongformerForSequenceClassification"),bUo=o(" (Longformer model)"),vUo=l(),Y1=a("li"),j2e=a("strong"),FUo=o("luke"),TUo=o(" \u2014 "),tW=a("a"),MUo=o("LukeForSequenceClassification"),EUo=o(" (LUKE model)"),CUo=l(),K1=a("li"),D2e=a("strong"),wUo=o("mbart"),AUo=o(" \u2014 "),aW=a("a"),LUo=o("MBartForSequenceClassification"),yUo=o(" (mBART model)"),xUo=l(),Z1=a("li"),G2e=a("strong"),$Uo=o("megatron-bert"),kUo=o(" \u2014 "),nW=a("a"),SUo=o("MegatronBertForSequenceClassification"),RUo=o(" (Megatron-BERT model)"),PUo=l(),eF=a("li"),O2e=a("strong"),BUo=o("mobilebert"),IUo=o(" \u2014 "),sW=a("a"),NUo=o("MobileBertForSequenceClassification"),qUo=o(" (MobileBERT model)"),jUo=l(),oF=a("li"),V2e=a("strong"),DUo=o("mpnet"),GUo=o(" \u2014 "),lW=a("a"),OUo=o("MPNetForSequenceClassification"),VUo=o(" (MPNet model)"),XUo=l(),rF=a("li"),X2e=a("strong"),zUo=o("mvp"),WUo=o(" \u2014 "),iW=a("a"),QUo=o("MvpForSequenceClassification"),UUo=o(" (MVP model)"),HUo=l(),tF=a("li"),z2e=a("strong"),JUo=o("nezha"),YUo=o(" \u2014 "),dW=a("a"),KUo=o("NezhaForSequenceClassification"),ZUo=o(" (Nezha model)"),eHo=l(),aF=a("li"),W2e=a("strong"),oHo=o("nystromformer"),rHo=o(" \u2014 "),cW=a("a"),tHo=o("NystromformerForSequenceClassification"),aHo=o(" (Nystr\xF6mformer model)"),nHo=l(),nF=a("li"),Q2e=a("strong"),sHo=o("openai-gpt"),lHo=o(" \u2014 "),mW=a("a"),iHo=o("OpenAIGPTForSequenceClassification"),dHo=o(" (OpenAI GPT model)"),cHo=l(),sF=a("li"),U2e=a("strong"),mHo=o("opt"),fHo=o(" \u2014 "),fW=a("a"),gHo=o("OPTForSequenceClassification"),hHo=o(" (OPT model)"),uHo=l(),lF=a("li"),H2e=a("strong"),pHo=o("perceiver"),_Ho=o(" \u2014 "),gW=a("a"),bHo=o("PerceiverForSequenceClassification"),vHo=o(" (Perceiver model)"),FHo=l(),iF=a("li"),J2e=a("strong"),THo=o("plbart"),MHo=o(" \u2014 "),hW=a("a"),EHo=o("PLBartForSequenceClassification"),CHo=o(" (PLBart model)"),wHo=l(),dF=a("li"),Y2e=a("strong"),AHo=o("qdqbert"),LHo=o(" \u2014 "),uW=a("a"),yHo=o("QDQBertForSequenceClassification"),xHo=o(" (QDQBert model)"),$Ho=l(),cF=a("li"),K2e=a("strong"),kHo=o("reformer"),SHo=o(" \u2014 "),pW=a("a"),RHo=o("ReformerForSequenceClassification"),PHo=o(" (Reformer model)"),BHo=l(),mF=a("li"),Z2e=a("strong"),IHo=o("rembert"),NHo=o(" \u2014 "),_W=a("a"),qHo=o("RemBertForSequenceClassification"),jHo=o(" (RemBERT model)"),DHo=l(),fF=a("li"),ebe=a("strong"),GHo=o("roberta"),OHo=o(" \u2014 "),bW=a("a"),VHo=o("RobertaForSequenceClassification"),XHo=o(" (RoBERTa model)"),zHo=l(),gF=a("li"),obe=a("strong"),WHo=o("roformer"),QHo=o(" \u2014 "),vW=a("a"),UHo=o("RoFormerForSequenceClassification"),HHo=o(" (RoFormer model)"),JHo=l(),hF=a("li"),rbe=a("strong"),YHo=o("squeezebert"),KHo=o(" \u2014 "),FW=a("a"),ZHo=o("SqueezeBertForSequenceClassification"),eJo=o(" (SqueezeBERT model)"),oJo=l(),uF=a("li"),tbe=a("strong"),rJo=o("tapas"),tJo=o(" \u2014 "),TW=a("a"),aJo=o("TapasForSequenceClassification"),nJo=o(" (TAPAS model)"),sJo=l(),pF=a("li"),abe=a("strong"),lJo=o("transfo-xl"),iJo=o(" \u2014 "),MW=a("a"),dJo=o("TransfoXLForSequenceClassification"),cJo=o(" (Transformer-XL model)"),mJo=l(),_F=a("li"),nbe=a("strong"),fJo=o("xlm"),gJo=o(" \u2014 "),EW=a("a"),hJo=o("XLMForSequenceClassification"),uJo=o(" (XLM model)"),pJo=l(),bF=a("li"),sbe=a("strong"),_Jo=o("xlm-roberta"),bJo=o(" \u2014 "),CW=a("a"),vJo=o("XLMRobertaForSequenceClassification"),FJo=o(" (XLM-RoBERTa model)"),TJo=l(),vF=a("li"),lbe=a("strong"),MJo=o("xlm-roberta-xl"),EJo=o(" \u2014 "),wW=a("a"),CJo=o("XLMRobertaXLForSequenceClassification"),wJo=o(" (XLM-RoBERTa-XL model)"),AJo=l(),FF=a("li"),ibe=a("strong"),LJo=o("xlnet"),yJo=o(" \u2014 "),AW=a("a"),xJo=o("XLNetForSequenceClassification"),$Jo=o(" (XLNet model)"),kJo=l(),TF=a("li"),dbe=a("strong"),SJo=o("yoso"),RJo=o(" \u2014 "),LW=a("a"),PJo=o("YosoForSequenceClassification"),BJo=o(" (YOSO model)"),IJo=l(),MF=a("p"),NJo=o("The model is set in evaluation mode by default using "),cbe=a("code"),qJo=o("model.eval()"),jJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mbe=a("code"),DJo=o("model.train()"),GJo=l(),F(EF.$$.fragment),HQe=l(),Fd=a("h2"),CF=a("a"),fbe=a("span"),F(m9.$$.fragment),OJo=l(),gbe=a("span"),VJo=o("AutoModelForMultipleChoice"),JQe=l(),qo=a("div"),F(f9.$$.fragment),XJo=l(),Td=a("p"),zJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),yW=a("a"),WJo=o("from_pretrained()"),QJo=o(" class method or the "),xW=a("a"),UJo=o("from_config()"),HJo=o(` class
method.`),JJo=l(),g9=a("p"),YJo=o("This class cannot be instantiated directly using "),hbe=a("code"),KJo=o("__init__()"),ZJo=o(" (throws an error)."),eYo=l(),bt=a("div"),F(h9.$$.fragment),oYo=l(),ube=a("p"),rYo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),tYo=l(),Md=a("p"),aYo=o(`Note:
Loading a model from its configuration file does `),pbe=a("strong"),nYo=o("not"),sYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$W=a("a"),lYo=o("from_pretrained()"),iYo=o(" to load the model weights."),dYo=l(),F(wF.$$.fragment),cYo=l(),to=a("div"),F(u9.$$.fragment),mYo=l(),_be=a("p"),fYo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gYo=l(),Ha=a("p"),hYo=o("The model class to instantiate is selected based on the "),bbe=a("code"),uYo=o("model_type"),pYo=o(` property of the config object (either
passed as an argument or loaded from `),vbe=a("code"),_Yo=o("pretrained_model_name_or_path"),bYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fbe=a("code"),vYo=o("pretrained_model_name_or_path"),FYo=o(":"),TYo=l(),Z=a("ul"),AF=a("li"),Tbe=a("strong"),MYo=o("albert"),EYo=o(" \u2014 "),kW=a("a"),CYo=o("AlbertForMultipleChoice"),wYo=o(" (ALBERT model)"),AYo=l(),LF=a("li"),Mbe=a("strong"),LYo=o("bert"),yYo=o(" \u2014 "),SW=a("a"),xYo=o("BertForMultipleChoice"),$Yo=o(" (BERT model)"),kYo=l(),yF=a("li"),Ebe=a("strong"),SYo=o("big_bird"),RYo=o(" \u2014 "),RW=a("a"),PYo=o("BigBirdForMultipleChoice"),BYo=o(" (BigBird model)"),IYo=l(),xF=a("li"),Cbe=a("strong"),NYo=o("camembert"),qYo=o(" \u2014 "),PW=a("a"),jYo=o("CamembertForMultipleChoice"),DYo=o(" (CamemBERT model)"),GYo=l(),$F=a("li"),wbe=a("strong"),OYo=o("canine"),VYo=o(" \u2014 "),BW=a("a"),XYo=o("CanineForMultipleChoice"),zYo=o(" (CANINE model)"),WYo=l(),kF=a("li"),Abe=a("strong"),QYo=o("convbert"),UYo=o(" \u2014 "),IW=a("a"),HYo=o("ConvBertForMultipleChoice"),JYo=o(" (ConvBERT model)"),YYo=l(),SF=a("li"),Lbe=a("strong"),KYo=o("data2vec-text"),ZYo=o(" \u2014 "),NW=a("a"),eKo=o("Data2VecTextForMultipleChoice"),oKo=o(" (Data2VecText model)"),rKo=l(),RF=a("li"),ybe=a("strong"),tKo=o("deberta-v2"),aKo=o(" \u2014 "),qW=a("a"),nKo=o("DebertaV2ForMultipleChoice"),sKo=o(" (DeBERTa-v2 model)"),lKo=l(),PF=a("li"),xbe=a("strong"),iKo=o("distilbert"),dKo=o(" \u2014 "),jW=a("a"),cKo=o("DistilBertForMultipleChoice"),mKo=o(" (DistilBERT model)"),fKo=l(),BF=a("li"),$be=a("strong"),gKo=o("electra"),hKo=o(" \u2014 "),DW=a("a"),uKo=o("ElectraForMultipleChoice"),pKo=o(" (ELECTRA model)"),_Ko=l(),IF=a("li"),kbe=a("strong"),bKo=o("flaubert"),vKo=o(" \u2014 "),GW=a("a"),FKo=o("FlaubertForMultipleChoice"),TKo=o(" (FlauBERT model)"),MKo=l(),NF=a("li"),Sbe=a("strong"),EKo=o("fnet"),CKo=o(" \u2014 "),OW=a("a"),wKo=o("FNetForMultipleChoice"),AKo=o(" (FNet model)"),LKo=l(),qF=a("li"),Rbe=a("strong"),yKo=o("funnel"),xKo=o(" \u2014 "),VW=a("a"),$Ko=o("FunnelForMultipleChoice"),kKo=o(" (Funnel Transformer model)"),SKo=l(),jF=a("li"),Pbe=a("strong"),RKo=o("ibert"),PKo=o(" \u2014 "),XW=a("a"),BKo=o("IBertForMultipleChoice"),IKo=o(" (I-BERT model)"),NKo=l(),DF=a("li"),Bbe=a("strong"),qKo=o("longformer"),jKo=o(" \u2014 "),zW=a("a"),DKo=o("LongformerForMultipleChoice"),GKo=o(" (Longformer model)"),OKo=l(),GF=a("li"),Ibe=a("strong"),VKo=o("luke"),XKo=o(" \u2014 "),WW=a("a"),zKo=o("LukeForMultipleChoice"),WKo=o(" (LUKE model)"),QKo=l(),OF=a("li"),Nbe=a("strong"),UKo=o("megatron-bert"),HKo=o(" \u2014 "),QW=a("a"),JKo=o("MegatronBertForMultipleChoice"),YKo=o(" (Megatron-BERT model)"),KKo=l(),VF=a("li"),qbe=a("strong"),ZKo=o("mobilebert"),eZo=o(" \u2014 "),UW=a("a"),oZo=o("MobileBertForMultipleChoice"),rZo=o(" (MobileBERT model)"),tZo=l(),XF=a("li"),jbe=a("strong"),aZo=o("mpnet"),nZo=o(" \u2014 "),HW=a("a"),sZo=o("MPNetForMultipleChoice"),lZo=o(" (MPNet model)"),iZo=l(),zF=a("li"),Dbe=a("strong"),dZo=o("nezha"),cZo=o(" \u2014 "),JW=a("a"),mZo=o("NezhaForMultipleChoice"),fZo=o(" (Nezha model)"),gZo=l(),WF=a("li"),Gbe=a("strong"),hZo=o("nystromformer"),uZo=o(" \u2014 "),YW=a("a"),pZo=o("NystromformerForMultipleChoice"),_Zo=o(" (Nystr\xF6mformer model)"),bZo=l(),QF=a("li"),Obe=a("strong"),vZo=o("qdqbert"),FZo=o(" \u2014 "),KW=a("a"),TZo=o("QDQBertForMultipleChoice"),MZo=o(" (QDQBert model)"),EZo=l(),UF=a("li"),Vbe=a("strong"),CZo=o("rembert"),wZo=o(" \u2014 "),ZW=a("a"),AZo=o("RemBertForMultipleChoice"),LZo=o(" (RemBERT model)"),yZo=l(),HF=a("li"),Xbe=a("strong"),xZo=o("roberta"),$Zo=o(" \u2014 "),eQ=a("a"),kZo=o("RobertaForMultipleChoice"),SZo=o(" (RoBERTa model)"),RZo=l(),JF=a("li"),zbe=a("strong"),PZo=o("roformer"),BZo=o(" \u2014 "),oQ=a("a"),IZo=o("RoFormerForMultipleChoice"),NZo=o(" (RoFormer model)"),qZo=l(),YF=a("li"),Wbe=a("strong"),jZo=o("squeezebert"),DZo=o(" \u2014 "),rQ=a("a"),GZo=o("SqueezeBertForMultipleChoice"),OZo=o(" (SqueezeBERT model)"),VZo=l(),KF=a("li"),Qbe=a("strong"),XZo=o("xlm"),zZo=o(" \u2014 "),tQ=a("a"),WZo=o("XLMForMultipleChoice"),QZo=o(" (XLM model)"),UZo=l(),ZF=a("li"),Ube=a("strong"),HZo=o("xlm-roberta"),JZo=o(" \u2014 "),aQ=a("a"),YZo=o("XLMRobertaForMultipleChoice"),KZo=o(" (XLM-RoBERTa model)"),ZZo=l(),eT=a("li"),Hbe=a("strong"),eer=o("xlm-roberta-xl"),oer=o(" \u2014 "),nQ=a("a"),rer=o("XLMRobertaXLForMultipleChoice"),ter=o(" (XLM-RoBERTa-XL model)"),aer=l(),oT=a("li"),Jbe=a("strong"),ner=o("xlnet"),ser=o(" \u2014 "),sQ=a("a"),ler=o("XLNetForMultipleChoice"),ier=o(" (XLNet model)"),der=l(),rT=a("li"),Ybe=a("strong"),cer=o("yoso"),mer=o(" \u2014 "),lQ=a("a"),fer=o("YosoForMultipleChoice"),ger=o(" (YOSO model)"),her=l(),tT=a("p"),uer=o("The model is set in evaluation mode by default using "),Kbe=a("code"),per=o("model.eval()"),_er=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zbe=a("code"),ber=o("model.train()"),ver=l(),F(aT.$$.fragment),YQe=l(),Ed=a("h2"),nT=a("a"),eve=a("span"),F(p9.$$.fragment),Fer=l(),ove=a("span"),Ter=o("AutoModelForNextSentencePrediction"),KQe=l(),jo=a("div"),F(_9.$$.fragment),Mer=l(),Cd=a("p"),Eer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),iQ=a("a"),Cer=o("from_pretrained()"),wer=o(" class method or the "),dQ=a("a"),Aer=o("from_config()"),Ler=o(` class
method.`),yer=l(),b9=a("p"),xer=o("This class cannot be instantiated directly using "),rve=a("code"),$er=o("__init__()"),ker=o(" (throws an error)."),Ser=l(),vt=a("div"),F(v9.$$.fragment),Rer=l(),tve=a("p"),Per=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Ber=l(),wd=a("p"),Ier=o(`Note:
Loading a model from its configuration file does `),ave=a("strong"),Ner=o("not"),qer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cQ=a("a"),jer=o("from_pretrained()"),Der=o(" to load the model weights."),Ger=l(),F(sT.$$.fragment),Oer=l(),ao=a("div"),F(F9.$$.fragment),Ver=l(),nve=a("p"),Xer=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),zer=l(),Ja=a("p"),Wer=o("The model class to instantiate is selected based on the "),sve=a("code"),Qer=o("model_type"),Uer=o(` property of the config object (either
passed as an argument or loaded from `),lve=a("code"),Her=o("pretrained_model_name_or_path"),Jer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ive=a("code"),Yer=o("pretrained_model_name_or_path"),Ker=o(":"),Zer=l(),Do=a("ul"),lT=a("li"),dve=a("strong"),eor=o("bert"),oor=o(" \u2014 "),mQ=a("a"),ror=o("BertForNextSentencePrediction"),tor=o(" (BERT model)"),aor=l(),iT=a("li"),cve=a("strong"),nor=o("fnet"),sor=o(" \u2014 "),fQ=a("a"),lor=o("FNetForNextSentencePrediction"),ior=o(" (FNet model)"),dor=l(),dT=a("li"),mve=a("strong"),cor=o("megatron-bert"),mor=o(" \u2014 "),gQ=a("a"),gor=o("MegatronBertForNextSentencePrediction"),hor=o(" (Megatron-BERT model)"),uor=l(),cT=a("li"),fve=a("strong"),por=o("mobilebert"),_or=o(" \u2014 "),hQ=a("a"),bor=o("MobileBertForNextSentencePrediction"),vor=o(" (MobileBERT model)"),For=l(),mT=a("li"),gve=a("strong"),Tor=o("nezha"),Mor=o(" \u2014 "),uQ=a("a"),Eor=o("NezhaForNextSentencePrediction"),Cor=o(" (Nezha model)"),wor=l(),fT=a("li"),hve=a("strong"),Aor=o("qdqbert"),Lor=o(" \u2014 "),pQ=a("a"),yor=o("QDQBertForNextSentencePrediction"),xor=o(" (QDQBert model)"),$or=l(),gT=a("p"),kor=o("The model is set in evaluation mode by default using "),uve=a("code"),Sor=o("model.eval()"),Ror=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pve=a("code"),Por=o("model.train()"),Bor=l(),F(hT.$$.fragment),ZQe=l(),Ad=a("h2"),uT=a("a"),_ve=a("span"),F(T9.$$.fragment),Ior=l(),bve=a("span"),Nor=o("AutoModelForTokenClassification"),eUe=l(),Go=a("div"),F(M9.$$.fragment),qor=l(),Ld=a("p"),jor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),_Q=a("a"),Dor=o("from_pretrained()"),Gor=o(" class method or the "),bQ=a("a"),Oor=o("from_config()"),Vor=o(` class
method.`),Xor=l(),E9=a("p"),zor=o("This class cannot be instantiated directly using "),vve=a("code"),Wor=o("__init__()"),Qor=o(" (throws an error)."),Uor=l(),Ft=a("div"),F(C9.$$.fragment),Hor=l(),Fve=a("p"),Jor=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Yor=l(),yd=a("p"),Kor=o(`Note:
Loading a model from its configuration file does `),Tve=a("strong"),Zor=o("not"),err=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=a("a"),orr=o("from_pretrained()"),rrr=o(" to load the model weights."),trr=l(),F(pT.$$.fragment),arr=l(),no=a("div"),F(w9.$$.fragment),nrr=l(),Mve=a("p"),srr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),lrr=l(),Ya=a("p"),irr=o("The model class to instantiate is selected based on the "),Eve=a("code"),drr=o("model_type"),crr=o(` property of the config object (either
passed as an argument or loaded from `),Cve=a("code"),mrr=o("pretrained_model_name_or_path"),frr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wve=a("code"),grr=o("pretrained_model_name_or_path"),hrr=o(":"),urr=l(),H=a("ul"),_T=a("li"),Ave=a("strong"),prr=o("albert"),_rr=o(" \u2014 "),FQ=a("a"),brr=o("AlbertForTokenClassification"),vrr=o(" (ALBERT model)"),Frr=l(),bT=a("li"),Lve=a("strong"),Trr=o("bert"),Mrr=o(" \u2014 "),TQ=a("a"),Err=o("BertForTokenClassification"),Crr=o(" (BERT model)"),wrr=l(),vT=a("li"),yve=a("strong"),Arr=o("big_bird"),Lrr=o(" \u2014 "),MQ=a("a"),yrr=o("BigBirdForTokenClassification"),xrr=o(" (BigBird model)"),$rr=l(),FT=a("li"),xve=a("strong"),krr=o("bloom"),Srr=o(" \u2014 "),EQ=a("a"),Rrr=o("BloomForTokenClassification"),Prr=o(" (BLOOM model)"),Brr=l(),TT=a("li"),$ve=a("strong"),Irr=o("camembert"),Nrr=o(" \u2014 "),CQ=a("a"),qrr=o("CamembertForTokenClassification"),jrr=o(" (CamemBERT model)"),Drr=l(),MT=a("li"),kve=a("strong"),Grr=o("canine"),Orr=o(" \u2014 "),wQ=a("a"),Vrr=o("CanineForTokenClassification"),Xrr=o(" (CANINE model)"),zrr=l(),ET=a("li"),Sve=a("strong"),Wrr=o("convbert"),Qrr=o(" \u2014 "),AQ=a("a"),Urr=o("ConvBertForTokenClassification"),Hrr=o(" (ConvBERT model)"),Jrr=l(),CT=a("li"),Rve=a("strong"),Yrr=o("data2vec-text"),Krr=o(" \u2014 "),LQ=a("a"),Zrr=o("Data2VecTextForTokenClassification"),etr=o(" (Data2VecText model)"),otr=l(),wT=a("li"),Pve=a("strong"),rtr=o("deberta"),ttr=o(" \u2014 "),yQ=a("a"),atr=o("DebertaForTokenClassification"),ntr=o(" (DeBERTa model)"),str=l(),AT=a("li"),Bve=a("strong"),ltr=o("deberta-v2"),itr=o(" \u2014 "),xQ=a("a"),dtr=o("DebertaV2ForTokenClassification"),ctr=o(" (DeBERTa-v2 model)"),mtr=l(),LT=a("li"),Ive=a("strong"),ftr=o("distilbert"),gtr=o(" \u2014 "),$Q=a("a"),htr=o("DistilBertForTokenClassification"),utr=o(" (DistilBERT model)"),ptr=l(),yT=a("li"),Nve=a("strong"),_tr=o("electra"),btr=o(" \u2014 "),kQ=a("a"),vtr=o("ElectraForTokenClassification"),Ftr=o(" (ELECTRA model)"),Ttr=l(),xT=a("li"),qve=a("strong"),Mtr=o("flaubert"),Etr=o(" \u2014 "),SQ=a("a"),Ctr=o("FlaubertForTokenClassification"),wtr=o(" (FlauBERT model)"),Atr=l(),$T=a("li"),jve=a("strong"),Ltr=o("fnet"),ytr=o(" \u2014 "),RQ=a("a"),xtr=o("FNetForTokenClassification"),$tr=o(" (FNet model)"),ktr=l(),kT=a("li"),Dve=a("strong"),Str=o("funnel"),Rtr=o(" \u2014 "),PQ=a("a"),Ptr=o("FunnelForTokenClassification"),Btr=o(" (Funnel Transformer model)"),Itr=l(),ST=a("li"),Gve=a("strong"),Ntr=o("gpt2"),qtr=o(" \u2014 "),BQ=a("a"),jtr=o("GPT2ForTokenClassification"),Dtr=o(" (OpenAI GPT-2 model)"),Gtr=l(),RT=a("li"),Ove=a("strong"),Otr=o("ibert"),Vtr=o(" \u2014 "),IQ=a("a"),Xtr=o("IBertForTokenClassification"),ztr=o(" (I-BERT model)"),Wtr=l(),PT=a("li"),Vve=a("strong"),Qtr=o("layoutlm"),Utr=o(" \u2014 "),NQ=a("a"),Htr=o("LayoutLMForTokenClassification"),Jtr=o(" (LayoutLM model)"),Ytr=l(),BT=a("li"),Xve=a("strong"),Ktr=o("layoutlmv2"),Ztr=o(" \u2014 "),qQ=a("a"),ear=o("LayoutLMv2ForTokenClassification"),oar=o(" (LayoutLMv2 model)"),rar=l(),IT=a("li"),zve=a("strong"),tar=o("layoutlmv3"),aar=o(" \u2014 "),jQ=a("a"),nar=o("LayoutLMv3ForTokenClassification"),sar=o(" (LayoutLMv3 model)"),lar=l(),NT=a("li"),Wve=a("strong"),iar=o("longformer"),dar=o(" \u2014 "),DQ=a("a"),car=o("LongformerForTokenClassification"),mar=o(" (Longformer model)"),far=l(),qT=a("li"),Qve=a("strong"),gar=o("luke"),har=o(" \u2014 "),GQ=a("a"),uar=o("LukeForTokenClassification"),par=o(" (LUKE model)"),_ar=l(),jT=a("li"),Uve=a("strong"),bar=o("megatron-bert"),Far=o(" \u2014 "),OQ=a("a"),Tar=o("MegatronBertForTokenClassification"),Mar=o(" (Megatron-BERT model)"),Ear=l(),DT=a("li"),Hve=a("strong"),Car=o("mobilebert"),war=o(" \u2014 "),VQ=a("a"),Aar=o("MobileBertForTokenClassification"),Lar=o(" (MobileBERT model)"),yar=l(),GT=a("li"),Jve=a("strong"),xar=o("mpnet"),$ar=o(" \u2014 "),XQ=a("a"),kar=o("MPNetForTokenClassification"),Sar=o(" (MPNet model)"),Rar=l(),OT=a("li"),Yve=a("strong"),Par=o("nezha"),Bar=o(" \u2014 "),zQ=a("a"),Iar=o("NezhaForTokenClassification"),Nar=o(" (Nezha model)"),qar=l(),VT=a("li"),Kve=a("strong"),jar=o("nystromformer"),Dar=o(" \u2014 "),WQ=a("a"),Gar=o("NystromformerForTokenClassification"),Oar=o(" (Nystr\xF6mformer model)"),Var=l(),XT=a("li"),Zve=a("strong"),Xar=o("qdqbert"),zar=o(" \u2014 "),QQ=a("a"),War=o("QDQBertForTokenClassification"),Qar=o(" (QDQBert model)"),Uar=l(),zT=a("li"),e1e=a("strong"),Har=o("rembert"),Jar=o(" \u2014 "),UQ=a("a"),Yar=o("RemBertForTokenClassification"),Kar=o(" (RemBERT model)"),Zar=l(),WT=a("li"),o1e=a("strong"),enr=o("roberta"),onr=o(" \u2014 "),HQ=a("a"),rnr=o("RobertaForTokenClassification"),tnr=o(" (RoBERTa model)"),anr=l(),QT=a("li"),r1e=a("strong"),nnr=o("roformer"),snr=o(" \u2014 "),JQ=a("a"),lnr=o("RoFormerForTokenClassification"),inr=o(" (RoFormer model)"),dnr=l(),UT=a("li"),t1e=a("strong"),cnr=o("squeezebert"),mnr=o(" \u2014 "),YQ=a("a"),fnr=o("SqueezeBertForTokenClassification"),gnr=o(" (SqueezeBERT model)"),hnr=l(),HT=a("li"),a1e=a("strong"),unr=o("xlm"),pnr=o(" \u2014 "),KQ=a("a"),_nr=o("XLMForTokenClassification"),bnr=o(" (XLM model)"),vnr=l(),JT=a("li"),n1e=a("strong"),Fnr=o("xlm-roberta"),Tnr=o(" \u2014 "),ZQ=a("a"),Mnr=o("XLMRobertaForTokenClassification"),Enr=o(" (XLM-RoBERTa model)"),Cnr=l(),YT=a("li"),s1e=a("strong"),wnr=o("xlm-roberta-xl"),Anr=o(" \u2014 "),eU=a("a"),Lnr=o("XLMRobertaXLForTokenClassification"),ynr=o(" (XLM-RoBERTa-XL model)"),xnr=l(),KT=a("li"),l1e=a("strong"),$nr=o("xlnet"),knr=o(" \u2014 "),oU=a("a"),Snr=o("XLNetForTokenClassification"),Rnr=o(" (XLNet model)"),Pnr=l(),ZT=a("li"),i1e=a("strong"),Bnr=o("yoso"),Inr=o(" \u2014 "),rU=a("a"),Nnr=o("YosoForTokenClassification"),qnr=o(" (YOSO model)"),jnr=l(),eM=a("p"),Dnr=o("The model is set in evaluation mode by default using "),d1e=a("code"),Gnr=o("model.eval()"),Onr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c1e=a("code"),Vnr=o("model.train()"),Xnr=l(),F(oM.$$.fragment),oUe=l(),xd=a("h2"),rM=a("a"),m1e=a("span"),F(A9.$$.fragment),znr=l(),f1e=a("span"),Wnr=o("AutoModelForQuestionAnswering"),rUe=l(),Oo=a("div"),F(L9.$$.fragment),Qnr=l(),$d=a("p"),Unr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),tU=a("a"),Hnr=o("from_pretrained()"),Jnr=o(" class method or the "),aU=a("a"),Ynr=o("from_config()"),Knr=o(` class
method.`),Znr=l(),y9=a("p"),esr=o("This class cannot be instantiated directly using "),g1e=a("code"),osr=o("__init__()"),rsr=o(" (throws an error)."),tsr=l(),Tt=a("div"),F(x9.$$.fragment),asr=l(),h1e=a("p"),nsr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ssr=l(),kd=a("p"),lsr=o(`Note:
Loading a model from its configuration file does `),u1e=a("strong"),isr=o("not"),dsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=a("a"),csr=o("from_pretrained()"),msr=o(" to load the model weights."),fsr=l(),F(tM.$$.fragment),gsr=l(),so=a("div"),F($9.$$.fragment),hsr=l(),p1e=a("p"),usr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),psr=l(),Ka=a("p"),_sr=o("The model class to instantiate is selected based on the "),_1e=a("code"),bsr=o("model_type"),vsr=o(` property of the config object (either
passed as an argument or loaded from `),b1e=a("code"),Fsr=o("pretrained_model_name_or_path"),Tsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v1e=a("code"),Msr=o("pretrained_model_name_or_path"),Esr=o(":"),Csr=l(),V=a("ul"),aM=a("li"),F1e=a("strong"),wsr=o("albert"),Asr=o(" \u2014 "),sU=a("a"),Lsr=o("AlbertForQuestionAnswering"),ysr=o(" (ALBERT model)"),xsr=l(),nM=a("li"),T1e=a("strong"),$sr=o("bart"),ksr=o(" \u2014 "),lU=a("a"),Ssr=o("BartForQuestionAnswering"),Rsr=o(" (BART model)"),Psr=l(),sM=a("li"),M1e=a("strong"),Bsr=o("bert"),Isr=o(" \u2014 "),iU=a("a"),Nsr=o("BertForQuestionAnswering"),qsr=o(" (BERT model)"),jsr=l(),lM=a("li"),E1e=a("strong"),Dsr=o("big_bird"),Gsr=o(" \u2014 "),dU=a("a"),Osr=o("BigBirdForQuestionAnswering"),Vsr=o(" (BigBird model)"),Xsr=l(),iM=a("li"),C1e=a("strong"),zsr=o("bigbird_pegasus"),Wsr=o(" \u2014 "),cU=a("a"),Qsr=o("BigBirdPegasusForQuestionAnswering"),Usr=o(" (BigBird-Pegasus model)"),Hsr=l(),dM=a("li"),w1e=a("strong"),Jsr=o("camembert"),Ysr=o(" \u2014 "),mU=a("a"),Ksr=o("CamembertForQuestionAnswering"),Zsr=o(" (CamemBERT model)"),elr=l(),cM=a("li"),A1e=a("strong"),olr=o("canine"),rlr=o(" \u2014 "),fU=a("a"),tlr=o("CanineForQuestionAnswering"),alr=o(" (CANINE model)"),nlr=l(),mM=a("li"),L1e=a("strong"),slr=o("convbert"),llr=o(" \u2014 "),gU=a("a"),ilr=o("ConvBertForQuestionAnswering"),dlr=o(" (ConvBERT model)"),clr=l(),fM=a("li"),y1e=a("strong"),mlr=o("data2vec-text"),flr=o(" \u2014 "),hU=a("a"),glr=o("Data2VecTextForQuestionAnswering"),hlr=o(" (Data2VecText model)"),ulr=l(),gM=a("li"),x1e=a("strong"),plr=o("deberta"),_lr=o(" \u2014 "),uU=a("a"),blr=o("DebertaForQuestionAnswering"),vlr=o(" (DeBERTa model)"),Flr=l(),hM=a("li"),$1e=a("strong"),Tlr=o("deberta-v2"),Mlr=o(" \u2014 "),pU=a("a"),Elr=o("DebertaV2ForQuestionAnswering"),Clr=o(" (DeBERTa-v2 model)"),wlr=l(),uM=a("li"),k1e=a("strong"),Alr=o("distilbert"),Llr=o(" \u2014 "),_U=a("a"),ylr=o("DistilBertForQuestionAnswering"),xlr=o(" (DistilBERT model)"),$lr=l(),pM=a("li"),S1e=a("strong"),klr=o("electra"),Slr=o(" \u2014 "),bU=a("a"),Rlr=o("ElectraForQuestionAnswering"),Plr=o(" (ELECTRA model)"),Blr=l(),_M=a("li"),R1e=a("strong"),Ilr=o("flaubert"),Nlr=o(" \u2014 "),vU=a("a"),qlr=o("FlaubertForQuestionAnsweringSimple"),jlr=o(" (FlauBERT model)"),Dlr=l(),bM=a("li"),P1e=a("strong"),Glr=o("fnet"),Olr=o(" \u2014 "),FU=a("a"),Vlr=o("FNetForQuestionAnswering"),Xlr=o(" (FNet model)"),zlr=l(),vM=a("li"),B1e=a("strong"),Wlr=o("funnel"),Qlr=o(" \u2014 "),TU=a("a"),Ulr=o("FunnelForQuestionAnswering"),Hlr=o(" (Funnel Transformer model)"),Jlr=l(),FM=a("li"),I1e=a("strong"),Ylr=o("gptj"),Klr=o(" \u2014 "),MU=a("a"),Zlr=o("GPTJForQuestionAnswering"),eir=o(" (GPT-J model)"),oir=l(),TM=a("li"),N1e=a("strong"),rir=o("ibert"),tir=o(" \u2014 "),EU=a("a"),air=o("IBertForQuestionAnswering"),nir=o(" (I-BERT model)"),sir=l(),MM=a("li"),q1e=a("strong"),lir=o("layoutlmv2"),iir=o(" \u2014 "),CU=a("a"),dir=o("LayoutLMv2ForQuestionAnswering"),cir=o(" (LayoutLMv2 model)"),mir=l(),EM=a("li"),j1e=a("strong"),fir=o("layoutlmv3"),gir=o(" \u2014 "),wU=a("a"),hir=o("LayoutLMv3ForQuestionAnswering"),uir=o(" (LayoutLMv3 model)"),pir=l(),CM=a("li"),D1e=a("strong"),_ir=o("led"),bir=o(" \u2014 "),AU=a("a"),vir=o("LEDForQuestionAnswering"),Fir=o(" (LED model)"),Tir=l(),wM=a("li"),G1e=a("strong"),Mir=o("longformer"),Eir=o(" \u2014 "),LU=a("a"),Cir=o("LongformerForQuestionAnswering"),wir=o(" (Longformer model)"),Air=l(),AM=a("li"),O1e=a("strong"),Lir=o("luke"),yir=o(" \u2014 "),yU=a("a"),xir=o("LukeForQuestionAnswering"),$ir=o(" (LUKE model)"),kir=l(),LM=a("li"),V1e=a("strong"),Sir=o("lxmert"),Rir=o(" \u2014 "),xU=a("a"),Pir=o("LxmertForQuestionAnswering"),Bir=o(" (LXMERT model)"),Iir=l(),yM=a("li"),X1e=a("strong"),Nir=o("mbart"),qir=o(" \u2014 "),$U=a("a"),jir=o("MBartForQuestionAnswering"),Dir=o(" (mBART model)"),Gir=l(),xM=a("li"),z1e=a("strong"),Oir=o("megatron-bert"),Vir=o(" \u2014 "),kU=a("a"),Xir=o("MegatronBertForQuestionAnswering"),zir=o(" (Megatron-BERT model)"),Wir=l(),$M=a("li"),W1e=a("strong"),Qir=o("mobilebert"),Uir=o(" \u2014 "),SU=a("a"),Hir=o("MobileBertForQuestionAnswering"),Jir=o(" (MobileBERT model)"),Yir=l(),kM=a("li"),Q1e=a("strong"),Kir=o("mpnet"),Zir=o(" \u2014 "),RU=a("a"),edr=o("MPNetForQuestionAnswering"),odr=o(" (MPNet model)"),rdr=l(),SM=a("li"),U1e=a("strong"),tdr=o("mvp"),adr=o(" \u2014 "),PU=a("a"),ndr=o("MvpForQuestionAnswering"),sdr=o(" (MVP model)"),ldr=l(),RM=a("li"),H1e=a("strong"),idr=o("nezha"),ddr=o(" \u2014 "),BU=a("a"),cdr=o("NezhaForQuestionAnswering"),mdr=o(" (Nezha model)"),fdr=l(),PM=a("li"),J1e=a("strong"),gdr=o("nystromformer"),hdr=o(" \u2014 "),IU=a("a"),udr=o("NystromformerForQuestionAnswering"),pdr=o(" (Nystr\xF6mformer model)"),_dr=l(),BM=a("li"),Y1e=a("strong"),bdr=o("qdqbert"),vdr=o(" \u2014 "),NU=a("a"),Fdr=o("QDQBertForQuestionAnswering"),Tdr=o(" (QDQBert model)"),Mdr=l(),IM=a("li"),K1e=a("strong"),Edr=o("reformer"),Cdr=o(" \u2014 "),qU=a("a"),wdr=o("ReformerForQuestionAnswering"),Adr=o(" (Reformer model)"),Ldr=l(),NM=a("li"),Z1e=a("strong"),ydr=o("rembert"),xdr=o(" \u2014 "),jU=a("a"),$dr=o("RemBertForQuestionAnswering"),kdr=o(" (RemBERT model)"),Sdr=l(),qM=a("li"),eFe=a("strong"),Rdr=o("roberta"),Pdr=o(" \u2014 "),DU=a("a"),Bdr=o("RobertaForQuestionAnswering"),Idr=o(" (RoBERTa model)"),Ndr=l(),jM=a("li"),oFe=a("strong"),qdr=o("roformer"),jdr=o(" \u2014 "),GU=a("a"),Ddr=o("RoFormerForQuestionAnswering"),Gdr=o(" (RoFormer model)"),Odr=l(),DM=a("li"),rFe=a("strong"),Vdr=o("splinter"),Xdr=o(" \u2014 "),OU=a("a"),zdr=o("SplinterForQuestionAnswering"),Wdr=o(" (Splinter model)"),Qdr=l(),GM=a("li"),tFe=a("strong"),Udr=o("squeezebert"),Hdr=o(" \u2014 "),VU=a("a"),Jdr=o("SqueezeBertForQuestionAnswering"),Ydr=o(" (SqueezeBERT model)"),Kdr=l(),OM=a("li"),aFe=a("strong"),Zdr=o("xlm"),ecr=o(" \u2014 "),XU=a("a"),ocr=o("XLMForQuestionAnsweringSimple"),rcr=o(" (XLM model)"),tcr=l(),VM=a("li"),nFe=a("strong"),acr=o("xlm-roberta"),ncr=o(" \u2014 "),zU=a("a"),scr=o("XLMRobertaForQuestionAnswering"),lcr=o(" (XLM-RoBERTa model)"),icr=l(),XM=a("li"),sFe=a("strong"),dcr=o("xlm-roberta-xl"),ccr=o(" \u2014 "),WU=a("a"),mcr=o("XLMRobertaXLForQuestionAnswering"),fcr=o(" (XLM-RoBERTa-XL model)"),gcr=l(),zM=a("li"),lFe=a("strong"),hcr=o("xlnet"),ucr=o(" \u2014 "),QU=a("a"),pcr=o("XLNetForQuestionAnsweringSimple"),_cr=o(" (XLNet model)"),bcr=l(),WM=a("li"),iFe=a("strong"),vcr=o("yoso"),Fcr=o(" \u2014 "),UU=a("a"),Tcr=o("YosoForQuestionAnswering"),Mcr=o(" (YOSO model)"),Ecr=l(),QM=a("p"),Ccr=o("The model is set in evaluation mode by default using "),dFe=a("code"),wcr=o("model.eval()"),Acr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cFe=a("code"),Lcr=o("model.train()"),ycr=l(),F(UM.$$.fragment),tUe=l(),Sd=a("h2"),HM=a("a"),mFe=a("span"),F(k9.$$.fragment),xcr=l(),fFe=a("span"),$cr=o("AutoModelForTableQuestionAnswering"),aUe=l(),Vo=a("div"),F(S9.$$.fragment),kcr=l(),Rd=a("p"),Scr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),HU=a("a"),Rcr=o("from_pretrained()"),Pcr=o(" class method or the "),JU=a("a"),Bcr=o("from_config()"),Icr=o(` class
method.`),Ncr=l(),R9=a("p"),qcr=o("This class cannot be instantiated directly using "),gFe=a("code"),jcr=o("__init__()"),Dcr=o(" (throws an error)."),Gcr=l(),Mt=a("div"),F(P9.$$.fragment),Ocr=l(),hFe=a("p"),Vcr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Xcr=l(),Pd=a("p"),zcr=o(`Note:
Loading a model from its configuration file does `),uFe=a("strong"),Wcr=o("not"),Qcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=a("a"),Ucr=o("from_pretrained()"),Hcr=o(" to load the model weights."),Jcr=l(),F(JM.$$.fragment),Ycr=l(),lo=a("div"),F(B9.$$.fragment),Kcr=l(),pFe=a("p"),Zcr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),emr=l(),Za=a("p"),omr=o("The model class to instantiate is selected based on the "),_Fe=a("code"),rmr=o("model_type"),tmr=o(` property of the config object (either
passed as an argument or loaded from `),bFe=a("code"),amr=o("pretrained_model_name_or_path"),nmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vFe=a("code"),smr=o("pretrained_model_name_or_path"),lmr=o(":"),imr=l(),FFe=a("ul"),YM=a("li"),TFe=a("strong"),dmr=o("tapas"),cmr=o(" \u2014 "),KU=a("a"),mmr=o("TapasForQuestionAnswering"),fmr=o(" (TAPAS model)"),gmr=l(),KM=a("p"),hmr=o("The model is set in evaluation mode by default using "),MFe=a("code"),umr=o("model.eval()"),pmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),EFe=a("code"),_mr=o("model.train()"),bmr=l(),F(ZM.$$.fragment),nUe=l(),Bd=a("h2"),eE=a("a"),CFe=a("span"),F(I9.$$.fragment),vmr=l(),wFe=a("span"),Fmr=o("AutoModelForImageClassification"),sUe=l(),Xo=a("div"),F(N9.$$.fragment),Tmr=l(),Id=a("p"),Mmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ZU=a("a"),Emr=o("from_pretrained()"),Cmr=o(" class method or the "),eH=a("a"),wmr=o("from_config()"),Amr=o(` class
method.`),Lmr=l(),q9=a("p"),ymr=o("This class cannot be instantiated directly using "),AFe=a("code"),xmr=o("__init__()"),$mr=o(" (throws an error)."),kmr=l(),Et=a("div"),F(j9.$$.fragment),Smr=l(),LFe=a("p"),Rmr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Pmr=l(),Nd=a("p"),Bmr=o(`Note:
Loading a model from its configuration file does `),yFe=a("strong"),Imr=o("not"),Nmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oH=a("a"),qmr=o("from_pretrained()"),jmr=o(" to load the model weights."),Dmr=l(),F(oE.$$.fragment),Gmr=l(),io=a("div"),F(D9.$$.fragment),Omr=l(),xFe=a("p"),Vmr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Xmr=l(),en=a("p"),zmr=o("The model class to instantiate is selected based on the "),$Fe=a("code"),Wmr=o("model_type"),Qmr=o(` property of the config object (either
passed as an argument or loaded from `),kFe=a("code"),Umr=o("pretrained_model_name_or_path"),Hmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SFe=a("code"),Jmr=o("pretrained_model_name_or_path"),Ymr=o(":"),Kmr=l(),be=a("ul"),rE=a("li"),RFe=a("strong"),Zmr=o("beit"),efr=o(" \u2014 "),rH=a("a"),ofr=o("BeitForImageClassification"),rfr=o(" (BEiT model)"),tfr=l(),tE=a("li"),PFe=a("strong"),afr=o("convnext"),nfr=o(" \u2014 "),tH=a("a"),sfr=o("ConvNextForImageClassification"),lfr=o(" (ConvNeXT model)"),ifr=l(),aE=a("li"),BFe=a("strong"),dfr=o("cvt"),cfr=o(" \u2014 "),aH=a("a"),mfr=o("CvtForImageClassification"),ffr=o(" (CvT model)"),gfr=l(),nE=a("li"),IFe=a("strong"),hfr=o("data2vec-vision"),ufr=o(" \u2014 "),nH=a("a"),pfr=o("Data2VecVisionForImageClassification"),_fr=o(" (Data2VecVision model)"),bfr=l(),sl=a("li"),NFe=a("strong"),vfr=o("deit"),Ffr=o(" \u2014 "),sH=a("a"),Tfr=o("DeiTForImageClassification"),Mfr=o(" or "),lH=a("a"),Efr=o("DeiTForImageClassificationWithTeacher"),Cfr=o(" (DeiT model)"),wfr=l(),sE=a("li"),qFe=a("strong"),Afr=o("imagegpt"),Lfr=o(" \u2014 "),iH=a("a"),yfr=o("ImageGPTForImageClassification"),xfr=o(" (ImageGPT model)"),$fr=l(),ll=a("li"),jFe=a("strong"),kfr=o("levit"),Sfr=o(" \u2014 "),dH=a("a"),Rfr=o("LevitForImageClassification"),Pfr=o(" or "),cH=a("a"),Bfr=o("LevitForImageClassificationWithTeacher"),Ifr=o(" (LeViT model)"),Nfr=l(),lE=a("li"),DFe=a("strong"),qfr=o("mobilevit"),jfr=o(" \u2014 "),mH=a("a"),Dfr=o("MobileViTForImageClassification"),Gfr=o(" (MobileViT model)"),Ofr=l(),Ct=a("li"),GFe=a("strong"),Vfr=o("perceiver"),Xfr=o(" \u2014 "),fH=a("a"),zfr=o("PerceiverForImageClassificationLearned"),Wfr=o(" or "),gH=a("a"),Qfr=o("PerceiverForImageClassificationFourier"),Ufr=o(" or "),hH=a("a"),Hfr=o("PerceiverForImageClassificationConvProcessing"),Jfr=o(" (Perceiver model)"),Yfr=l(),iE=a("li"),OFe=a("strong"),Kfr=o("poolformer"),Zfr=o(" \u2014 "),uH=a("a"),egr=o("PoolFormerForImageClassification"),ogr=o(" (PoolFormer model)"),rgr=l(),dE=a("li"),VFe=a("strong"),tgr=o("regnet"),agr=o(" \u2014 "),pH=a("a"),ngr=o("RegNetForImageClassification"),sgr=o(" (RegNet model)"),lgr=l(),cE=a("li"),XFe=a("strong"),igr=o("resnet"),dgr=o(" \u2014 "),_H=a("a"),cgr=o("ResNetForImageClassification"),mgr=o(" (ResNet model)"),fgr=l(),mE=a("li"),zFe=a("strong"),ggr=o("segformer"),hgr=o(" \u2014 "),bH=a("a"),ugr=o("SegformerForImageClassification"),pgr=o(" (SegFormer model)"),_gr=l(),fE=a("li"),WFe=a("strong"),bgr=o("swin"),vgr=o(" \u2014 "),vH=a("a"),Fgr=o("SwinForImageClassification"),Tgr=o(" (Swin Transformer model)"),Mgr=l(),gE=a("li"),QFe=a("strong"),Egr=o("swinv2"),Cgr=o(" \u2014 "),FH=a("a"),wgr=o("Swinv2ForImageClassification"),Agr=o(" (Swin Transformer V2 model)"),Lgr=l(),hE=a("li"),UFe=a("strong"),ygr=o("van"),xgr=o(" \u2014 "),TH=a("a"),$gr=o("VanForImageClassification"),kgr=o(" (VAN model)"),Sgr=l(),uE=a("li"),HFe=a("strong"),Rgr=o("vit"),Pgr=o(" \u2014 "),MH=a("a"),Bgr=o("ViTForImageClassification"),Igr=o(" (ViT model)"),Ngr=l(),pE=a("p"),qgr=o("The model is set in evaluation mode by default using "),JFe=a("code"),jgr=o("model.eval()"),Dgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),YFe=a("code"),Ggr=o("model.train()"),Ogr=l(),F(_E.$$.fragment),lUe=l(),qd=a("h2"),bE=a("a"),KFe=a("span"),F(G9.$$.fragment),Vgr=l(),ZFe=a("span"),Xgr=o("AutoModelForVideoClassification"),iUe=l(),zo=a("div"),F(O9.$$.fragment),zgr=l(),jd=a("p"),Wgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),EH=a("a"),Qgr=o("from_pretrained()"),Ugr=o(" class method or the "),CH=a("a"),Hgr=o("from_config()"),Jgr=o(` class
method.`),Ygr=l(),V9=a("p"),Kgr=o("This class cannot be instantiated directly using "),eTe=a("code"),Zgr=o("__init__()"),ehr=o(" (throws an error)."),ohr=l(),wt=a("div"),F(X9.$$.fragment),rhr=l(),oTe=a("p"),thr=o("Instantiates one of the model classes of the library (with a video classification head) from a configuration."),ahr=l(),Dd=a("p"),nhr=o(`Note:
Loading a model from its configuration file does `),rTe=a("strong"),shr=o("not"),lhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=a("a"),ihr=o("from_pretrained()"),dhr=o(" to load the model weights."),chr=l(),F(vE.$$.fragment),mhr=l(),co=a("div"),F(z9.$$.fragment),fhr=l(),tTe=a("p"),ghr=o("Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),hhr=l(),on=a("p"),uhr=o("The model class to instantiate is selected based on the "),aTe=a("code"),phr=o("model_type"),_hr=o(` property of the config object (either
passed as an argument or loaded from `),nTe=a("code"),bhr=o("pretrained_model_name_or_path"),vhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sTe=a("code"),Fhr=o("pretrained_model_name_or_path"),Thr=o(":"),Mhr=l(),lTe=a("ul"),FE=a("li"),iTe=a("strong"),Ehr=o("videomae"),Chr=o(" \u2014 "),AH=a("a"),whr=o("VideoMAEForVideoClassification"),Ahr=o(" (VideoMAE model)"),Lhr=l(),TE=a("p"),yhr=o("The model is set in evaluation mode by default using "),dTe=a("code"),xhr=o("model.eval()"),$hr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cTe=a("code"),khr=o("model.train()"),Shr=l(),F(ME.$$.fragment),dUe=l(),Gd=a("h2"),EE=a("a"),mTe=a("span"),F(W9.$$.fragment),Rhr=l(),fTe=a("span"),Phr=o("AutoModelForVision2Seq"),cUe=l(),Wo=a("div"),F(Q9.$$.fragment),Bhr=l(),Od=a("p"),Ihr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),LH=a("a"),Nhr=o("from_pretrained()"),qhr=o(" class method or the "),yH=a("a"),jhr=o("from_config()"),Dhr=o(` class
method.`),Ghr=l(),U9=a("p"),Ohr=o("This class cannot be instantiated directly using "),gTe=a("code"),Vhr=o("__init__()"),Xhr=o(" (throws an error)."),zhr=l(),At=a("div"),F(H9.$$.fragment),Whr=l(),hTe=a("p"),Qhr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Uhr=l(),Vd=a("p"),Hhr=o(`Note:
Loading a model from its configuration file does `),uTe=a("strong"),Jhr=o("not"),Yhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=a("a"),Khr=o("from_pretrained()"),Zhr=o(" to load the model weights."),eur=l(),F(CE.$$.fragment),our=l(),mo=a("div"),F(J9.$$.fragment),rur=l(),pTe=a("p"),tur=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),aur=l(),rn=a("p"),nur=o("The model class to instantiate is selected based on the "),_Te=a("code"),sur=o("model_type"),lur=o(` property of the config object (either
passed as an argument or loaded from `),bTe=a("code"),iur=o("pretrained_model_name_or_path"),dur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vTe=a("code"),cur=o("pretrained_model_name_or_path"),mur=o(":"),fur=l(),FTe=a("ul"),wE=a("li"),TTe=a("strong"),gur=o("vision-encoder-decoder"),hur=o(" \u2014 "),$H=a("a"),uur=o("VisionEncoderDecoderModel"),pur=o(" (Vision Encoder decoder model)"),_ur=l(),AE=a("p"),bur=o("The model is set in evaluation mode by default using "),MTe=a("code"),vur=o("model.eval()"),Fur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ETe=a("code"),Tur=o("model.train()"),Mur=l(),F(LE.$$.fragment),mUe=l(),Xd=a("h2"),yE=a("a"),CTe=a("span"),F(Y9.$$.fragment),Eur=l(),wTe=a("span"),Cur=o("AutoModelForVisualQuestionAnswering"),fUe=l(),Qo=a("div"),F(K9.$$.fragment),wur=l(),zd=a("p"),Aur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),kH=a("a"),Lur=o("from_pretrained()"),yur=o(" class method or the "),SH=a("a"),xur=o("from_config()"),$ur=o(` class
method.`),kur=l(),Z9=a("p"),Sur=o("This class cannot be instantiated directly using "),ATe=a("code"),Rur=o("__init__()"),Pur=o(" (throws an error)."),Bur=l(),Lt=a("div"),F(ex.$$.fragment),Iur=l(),LTe=a("p"),Nur=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),qur=l(),Wd=a("p"),jur=o(`Note:
Loading a model from its configuration file does `),yTe=a("strong"),Dur=o("not"),Gur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=a("a"),Our=o("from_pretrained()"),Vur=o(" to load the model weights."),Xur=l(),F(xE.$$.fragment),zur=l(),fo=a("div"),F(ox.$$.fragment),Wur=l(),xTe=a("p"),Qur=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Uur=l(),tn=a("p"),Hur=o("The model class to instantiate is selected based on the "),$Te=a("code"),Jur=o("model_type"),Yur=o(` property of the config object (either
passed as an argument or loaded from `),kTe=a("code"),Kur=o("pretrained_model_name_or_path"),Zur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),STe=a("code"),epr=o("pretrained_model_name_or_path"),opr=o(":"),rpr=l(),RTe=a("ul"),$E=a("li"),PTe=a("strong"),tpr=o("vilt"),apr=o(" \u2014 "),PH=a("a"),npr=o("ViltForQuestionAnswering"),spr=o(" (ViLT model)"),lpr=l(),kE=a("p"),ipr=o("The model is set in evaluation mode by default using "),BTe=a("code"),dpr=o("model.eval()"),cpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ITe=a("code"),mpr=o("model.train()"),fpr=l(),F(SE.$$.fragment),gUe=l(),Qd=a("h2"),RE=a("a"),NTe=a("span"),F(rx.$$.fragment),gpr=l(),qTe=a("span"),hpr=o("AutoModelForAudioClassification"),hUe=l(),Uo=a("div"),F(tx.$$.fragment),upr=l(),Ud=a("p"),ppr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),BH=a("a"),_pr=o("from_pretrained()"),bpr=o(" class method or the "),IH=a("a"),vpr=o("from_config()"),Fpr=o(` class
method.`),Tpr=l(),ax=a("p"),Mpr=o("This class cannot be instantiated directly using "),jTe=a("code"),Epr=o("__init__()"),Cpr=o(" (throws an error)."),wpr=l(),yt=a("div"),F(nx.$$.fragment),Apr=l(),DTe=a("p"),Lpr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),ypr=l(),Hd=a("p"),xpr=o(`Note:
Loading a model from its configuration file does `),GTe=a("strong"),$pr=o("not"),kpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=a("a"),Spr=o("from_pretrained()"),Rpr=o(" to load the model weights."),Ppr=l(),F(PE.$$.fragment),Bpr=l(),go=a("div"),F(sx.$$.fragment),Ipr=l(),OTe=a("p"),Npr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),qpr=l(),an=a("p"),jpr=o("The model class to instantiate is selected based on the "),VTe=a("code"),Dpr=o("model_type"),Gpr=o(` property of the config object (either
passed as an argument or loaded from `),XTe=a("code"),Opr=o("pretrained_model_name_or_path"),Vpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zTe=a("code"),Xpr=o("pretrained_model_name_or_path"),zpr=o(":"),Wpr=l(),Pe=a("ul"),BE=a("li"),WTe=a("strong"),Qpr=o("data2vec-audio"),Upr=o(" \u2014 "),qH=a("a"),Hpr=o("Data2VecAudioForSequenceClassification"),Jpr=o(" (Data2VecAudio model)"),Ypr=l(),IE=a("li"),QTe=a("strong"),Kpr=o("hubert"),Zpr=o(" \u2014 "),jH=a("a"),e_r=o("HubertForSequenceClassification"),o_r=o(" (Hubert model)"),r_r=l(),NE=a("li"),UTe=a("strong"),t_r=o("sew"),a_r=o(" \u2014 "),DH=a("a"),n_r=o("SEWForSequenceClassification"),s_r=o(" (SEW model)"),l_r=l(),qE=a("li"),HTe=a("strong"),i_r=o("sew-d"),d_r=o(" \u2014 "),GH=a("a"),c_r=o("SEWDForSequenceClassification"),m_r=o(" (SEW-D model)"),f_r=l(),jE=a("li"),JTe=a("strong"),g_r=o("unispeech"),h_r=o(" \u2014 "),OH=a("a"),u_r=o("UniSpeechForSequenceClassification"),p_r=o(" (UniSpeech model)"),__r=l(),DE=a("li"),YTe=a("strong"),b_r=o("unispeech-sat"),v_r=o(" \u2014 "),VH=a("a"),F_r=o("UniSpeechSatForSequenceClassification"),T_r=o(" (UniSpeechSat model)"),M_r=l(),GE=a("li"),KTe=a("strong"),E_r=o("wav2vec2"),C_r=o(" \u2014 "),XH=a("a"),w_r=o("Wav2Vec2ForSequenceClassification"),A_r=o(" (Wav2Vec2 model)"),L_r=l(),OE=a("li"),ZTe=a("strong"),y_r=o("wav2vec2-conformer"),x_r=o(" \u2014 "),zH=a("a"),$_r=o("Wav2Vec2ConformerForSequenceClassification"),k_r=o(" (Wav2Vec2-Conformer model)"),S_r=l(),VE=a("li"),eMe=a("strong"),R_r=o("wavlm"),P_r=o(" \u2014 "),WH=a("a"),B_r=o("WavLMForSequenceClassification"),I_r=o(" (WavLM model)"),N_r=l(),XE=a("p"),q_r=o("The model is set in evaluation mode by default using "),oMe=a("code"),j_r=o("model.eval()"),D_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rMe=a("code"),G_r=o("model.train()"),O_r=l(),F(zE.$$.fragment),uUe=l(),Jd=a("h2"),WE=a("a"),tMe=a("span"),F(lx.$$.fragment),V_r=l(),aMe=a("span"),X_r=o("AutoModelForAudioFrameClassification"),pUe=l(),Ho=a("div"),F(ix.$$.fragment),z_r=l(),Yd=a("p"),W_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),QH=a("a"),Q_r=o("from_pretrained()"),U_r=o(" class method or the "),UH=a("a"),H_r=o("from_config()"),J_r=o(` class
method.`),Y_r=l(),dx=a("p"),K_r=o("This class cannot be instantiated directly using "),nMe=a("code"),Z_r=o("__init__()"),e2r=o(" (throws an error)."),o2r=l(),xt=a("div"),F(cx.$$.fragment),r2r=l(),sMe=a("p"),t2r=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),a2r=l(),Kd=a("p"),n2r=o(`Note:
Loading a model from its configuration file does `),lMe=a("strong"),s2r=o("not"),l2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=a("a"),i2r=o("from_pretrained()"),d2r=o(" to load the model weights."),c2r=l(),F(QE.$$.fragment),m2r=l(),ho=a("div"),F(mx.$$.fragment),f2r=l(),iMe=a("p"),g2r=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),h2r=l(),nn=a("p"),u2r=o("The model class to instantiate is selected based on the "),dMe=a("code"),p2r=o("model_type"),_2r=o(` property of the config object (either
passed as an argument or loaded from `),cMe=a("code"),b2r=o("pretrained_model_name_or_path"),v2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mMe=a("code"),F2r=o("pretrained_model_name_or_path"),T2r=o(":"),M2r=l(),st=a("ul"),UE=a("li"),fMe=a("strong"),E2r=o("data2vec-audio"),C2r=o(" \u2014 "),JH=a("a"),w2r=o("Data2VecAudioForAudioFrameClassification"),A2r=o(" (Data2VecAudio model)"),L2r=l(),HE=a("li"),gMe=a("strong"),y2r=o("unispeech-sat"),x2r=o(" \u2014 "),YH=a("a"),$2r=o("UniSpeechSatForAudioFrameClassification"),k2r=o(" (UniSpeechSat model)"),S2r=l(),JE=a("li"),hMe=a("strong"),R2r=o("wav2vec2"),P2r=o(" \u2014 "),KH=a("a"),B2r=o("Wav2Vec2ForAudioFrameClassification"),I2r=o(" (Wav2Vec2 model)"),N2r=l(),YE=a("li"),uMe=a("strong"),q2r=o("wav2vec2-conformer"),j2r=o(" \u2014 "),ZH=a("a"),D2r=o("Wav2Vec2ConformerForAudioFrameClassification"),G2r=o(" (Wav2Vec2-Conformer model)"),O2r=l(),KE=a("li"),pMe=a("strong"),V2r=o("wavlm"),X2r=o(" \u2014 "),eJ=a("a"),z2r=o("WavLMForAudioFrameClassification"),W2r=o(" (WavLM model)"),Q2r=l(),ZE=a("p"),U2r=o("The model is set in evaluation mode by default using "),_Me=a("code"),H2r=o("model.eval()"),J2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bMe=a("code"),Y2r=o("model.train()"),K2r=l(),F(e4.$$.fragment),_Ue=l(),Zd=a("h2"),o4=a("a"),vMe=a("span"),F(fx.$$.fragment),Z2r=l(),FMe=a("span"),ebr=o("AutoModelForCTC"),bUe=l(),Jo=a("div"),F(gx.$$.fragment),obr=l(),ec=a("p"),rbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),oJ=a("a"),tbr=o("from_pretrained()"),abr=o(" class method or the "),rJ=a("a"),nbr=o("from_config()"),sbr=o(` class
method.`),lbr=l(),hx=a("p"),ibr=o("This class cannot be instantiated directly using "),TMe=a("code"),dbr=o("__init__()"),cbr=o(" (throws an error)."),mbr=l(),$t=a("div"),F(ux.$$.fragment),fbr=l(),MMe=a("p"),gbr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),hbr=l(),oc=a("p"),ubr=o(`Note:
Loading a model from its configuration file does `),EMe=a("strong"),pbr=o("not"),_br=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=a("a"),bbr=o("from_pretrained()"),vbr=o(" to load the model weights."),Fbr=l(),F(r4.$$.fragment),Tbr=l(),uo=a("div"),F(px.$$.fragment),Mbr=l(),CMe=a("p"),Ebr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Cbr=l(),sn=a("p"),wbr=o("The model class to instantiate is selected based on the "),wMe=a("code"),Abr=o("model_type"),Lbr=o(` property of the config object (either
passed as an argument or loaded from `),AMe=a("code"),ybr=o("pretrained_model_name_or_path"),xbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LMe=a("code"),$br=o("pretrained_model_name_or_path"),kbr=o(":"),Sbr=l(),Le=a("ul"),t4=a("li"),yMe=a("strong"),Rbr=o("data2vec-audio"),Pbr=o(" \u2014 "),aJ=a("a"),Bbr=o("Data2VecAudioForCTC"),Ibr=o(" (Data2VecAudio model)"),Nbr=l(),a4=a("li"),xMe=a("strong"),qbr=o("hubert"),jbr=o(" \u2014 "),nJ=a("a"),Dbr=o("HubertForCTC"),Gbr=o(" (Hubert model)"),Obr=l(),n4=a("li"),$Me=a("strong"),Vbr=o("mctct"),Xbr=o(" \u2014 "),sJ=a("a"),zbr=o("MCTCTForCTC"),Wbr=o(" (M-CTC-T model)"),Qbr=l(),s4=a("li"),kMe=a("strong"),Ubr=o("sew"),Hbr=o(" \u2014 "),lJ=a("a"),Jbr=o("SEWForCTC"),Ybr=o(" (SEW model)"),Kbr=l(),l4=a("li"),SMe=a("strong"),Zbr=o("sew-d"),evr=o(" \u2014 "),iJ=a("a"),ovr=o("SEWDForCTC"),rvr=o(" (SEW-D model)"),tvr=l(),i4=a("li"),RMe=a("strong"),avr=o("unispeech"),nvr=o(" \u2014 "),dJ=a("a"),svr=o("UniSpeechForCTC"),lvr=o(" (UniSpeech model)"),ivr=l(),d4=a("li"),PMe=a("strong"),dvr=o("unispeech-sat"),cvr=o(" \u2014 "),cJ=a("a"),mvr=o("UniSpeechSatForCTC"),fvr=o(" (UniSpeechSat model)"),gvr=l(),c4=a("li"),BMe=a("strong"),hvr=o("wav2vec2"),uvr=o(" \u2014 "),mJ=a("a"),pvr=o("Wav2Vec2ForCTC"),_vr=o(" (Wav2Vec2 model)"),bvr=l(),m4=a("li"),IMe=a("strong"),vvr=o("wav2vec2-conformer"),Fvr=o(" \u2014 "),fJ=a("a"),Tvr=o("Wav2Vec2ConformerForCTC"),Mvr=o(" (Wav2Vec2-Conformer model)"),Evr=l(),f4=a("li"),NMe=a("strong"),Cvr=o("wavlm"),wvr=o(" \u2014 "),gJ=a("a"),Avr=o("WavLMForCTC"),Lvr=o(" (WavLM model)"),yvr=l(),g4=a("p"),xvr=o("The model is set in evaluation mode by default using "),qMe=a("code"),$vr=o("model.eval()"),kvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jMe=a("code"),Svr=o("model.train()"),Rvr=l(),F(h4.$$.fragment),vUe=l(),rc=a("h2"),u4=a("a"),DMe=a("span"),F(_x.$$.fragment),Pvr=l(),GMe=a("span"),Bvr=o("AutoModelForSpeechSeq2Seq"),FUe=l(),Yo=a("div"),F(bx.$$.fragment),Ivr=l(),tc=a("p"),Nvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),hJ=a("a"),qvr=o("from_pretrained()"),jvr=o(" class method or the "),uJ=a("a"),Dvr=o("from_config()"),Gvr=o(` class
method.`),Ovr=l(),vx=a("p"),Vvr=o("This class cannot be instantiated directly using "),OMe=a("code"),Xvr=o("__init__()"),zvr=o(" (throws an error)."),Wvr=l(),kt=a("div"),F(Fx.$$.fragment),Qvr=l(),VMe=a("p"),Uvr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Hvr=l(),ac=a("p"),Jvr=o(`Note:
Loading a model from its configuration file does `),XMe=a("strong"),Yvr=o("not"),Kvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pJ=a("a"),Zvr=o("from_pretrained()"),e1r=o(" to load the model weights."),o1r=l(),F(p4.$$.fragment),r1r=l(),po=a("div"),F(Tx.$$.fragment),t1r=l(),zMe=a("p"),a1r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),n1r=l(),ln=a("p"),s1r=o("The model class to instantiate is selected based on the "),WMe=a("code"),l1r=o("model_type"),i1r=o(` property of the config object (either
passed as an argument or loaded from `),QMe=a("code"),d1r=o("pretrained_model_name_or_path"),c1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UMe=a("code"),m1r=o("pretrained_model_name_or_path"),f1r=o(":"),g1r=l(),Mx=a("ul"),_4=a("li"),HMe=a("strong"),h1r=o("speech-encoder-decoder"),u1r=o(" \u2014 "),_J=a("a"),p1r=o("SpeechEncoderDecoderModel"),_1r=o(" (Speech Encoder decoder model)"),b1r=l(),b4=a("li"),JMe=a("strong"),v1r=o("speech_to_text"),F1r=o(" \u2014 "),bJ=a("a"),T1r=o("Speech2TextForConditionalGeneration"),M1r=o(" (Speech2Text model)"),E1r=l(),v4=a("p"),C1r=o("The model is set in evaluation mode by default using "),YMe=a("code"),w1r=o("model.eval()"),A1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),KMe=a("code"),L1r=o("model.train()"),y1r=l(),F(F4.$$.fragment),TUe=l(),nc=a("h2"),T4=a("a"),ZMe=a("span"),F(Ex.$$.fragment),x1r=l(),eEe=a("span"),$1r=o("AutoModelForAudioXVector"),MUe=l(),Ko=a("div"),F(Cx.$$.fragment),k1r=l(),sc=a("p"),S1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),vJ=a("a"),R1r=o("from_pretrained()"),P1r=o(" class method or the "),FJ=a("a"),B1r=o("from_config()"),I1r=o(` class
method.`),N1r=l(),wx=a("p"),q1r=o("This class cannot be instantiated directly using "),oEe=a("code"),j1r=o("__init__()"),D1r=o(" (throws an error)."),G1r=l(),St=a("div"),F(Ax.$$.fragment),O1r=l(),rEe=a("p"),V1r=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),X1r=l(),lc=a("p"),z1r=o(`Note:
Loading a model from its configuration file does `),tEe=a("strong"),W1r=o("not"),Q1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TJ=a("a"),U1r=o("from_pretrained()"),H1r=o(" to load the model weights."),J1r=l(),F(M4.$$.fragment),Y1r=l(),_o=a("div"),F(Lx.$$.fragment),K1r=l(),aEe=a("p"),Z1r=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),eFr=l(),dn=a("p"),oFr=o("The model class to instantiate is selected based on the "),nEe=a("code"),rFr=o("model_type"),tFr=o(` property of the config object (either
passed as an argument or loaded from `),sEe=a("code"),aFr=o("pretrained_model_name_or_path"),nFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lEe=a("code"),sFr=o("pretrained_model_name_or_path"),lFr=o(":"),iFr=l(),lt=a("ul"),E4=a("li"),iEe=a("strong"),dFr=o("data2vec-audio"),cFr=o(" \u2014 "),MJ=a("a"),mFr=o("Data2VecAudioForXVector"),fFr=o(" (Data2VecAudio model)"),gFr=l(),C4=a("li"),dEe=a("strong"),hFr=o("unispeech-sat"),uFr=o(" \u2014 "),EJ=a("a"),pFr=o("UniSpeechSatForXVector"),_Fr=o(" (UniSpeechSat model)"),bFr=l(),w4=a("li"),cEe=a("strong"),vFr=o("wav2vec2"),FFr=o(" \u2014 "),CJ=a("a"),TFr=o("Wav2Vec2ForXVector"),MFr=o(" (Wav2Vec2 model)"),EFr=l(),A4=a("li"),mEe=a("strong"),CFr=o("wav2vec2-conformer"),wFr=o(" \u2014 "),wJ=a("a"),AFr=o("Wav2Vec2ConformerForXVector"),LFr=o(" (Wav2Vec2-Conformer model)"),yFr=l(),L4=a("li"),fEe=a("strong"),xFr=o("wavlm"),$Fr=o(" \u2014 "),AJ=a("a"),kFr=o("WavLMForXVector"),SFr=o(" (WavLM model)"),RFr=l(),y4=a("p"),PFr=o("The model is set in evaluation mode by default using "),gEe=a("code"),BFr=o("model.eval()"),IFr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hEe=a("code"),NFr=o("model.train()"),qFr=l(),F(x4.$$.fragment),EUe=l(),ic=a("h2"),$4=a("a"),uEe=a("span"),F(yx.$$.fragment),jFr=l(),pEe=a("span"),DFr=o("AutoModelForMaskedImageModeling"),CUe=l(),Zo=a("div"),F(xx.$$.fragment),GFr=l(),dc=a("p"),OFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),LJ=a("a"),VFr=o("from_pretrained()"),XFr=o(" class method or the "),yJ=a("a"),zFr=o("from_config()"),WFr=o(` class
method.`),QFr=l(),$x=a("p"),UFr=o("This class cannot be instantiated directly using "),_Ee=a("code"),HFr=o("__init__()"),JFr=o(" (throws an error)."),YFr=l(),Rt=a("div"),F(kx.$$.fragment),KFr=l(),bEe=a("p"),ZFr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),eTr=l(),cc=a("p"),oTr=o(`Note:
Loading a model from its configuration file does `),vEe=a("strong"),rTr=o("not"),tTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xJ=a("a"),aTr=o("from_pretrained()"),nTr=o(" to load the model weights."),sTr=l(),F(k4.$$.fragment),lTr=l(),bo=a("div"),F(Sx.$$.fragment),iTr=l(),FEe=a("p"),dTr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),cTr=l(),cn=a("p"),mTr=o("The model class to instantiate is selected based on the "),TEe=a("code"),fTr=o("model_type"),gTr=o(` property of the config object (either
passed as an argument or loaded from `),MEe=a("code"),hTr=o("pretrained_model_name_or_path"),uTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EEe=a("code"),pTr=o("pretrained_model_name_or_path"),_Tr=o(":"),bTr=l(),mn=a("ul"),S4=a("li"),CEe=a("strong"),vTr=o("deit"),FTr=o(" \u2014 "),$J=a("a"),TTr=o("DeiTForMaskedImageModeling"),MTr=o(" (DeiT model)"),ETr=l(),R4=a("li"),wEe=a("strong"),CTr=o("swin"),wTr=o(" \u2014 "),kJ=a("a"),ATr=o("SwinForMaskedImageModeling"),LTr=o(" (Swin Transformer model)"),yTr=l(),P4=a("li"),AEe=a("strong"),xTr=o("swinv2"),$Tr=o(" \u2014 "),SJ=a("a"),kTr=o("Swinv2ForMaskedImageModeling"),STr=o(" (Swin Transformer V2 model)"),RTr=l(),B4=a("li"),LEe=a("strong"),PTr=o("vit"),BTr=o(" \u2014 "),RJ=a("a"),ITr=o("ViTForMaskedImageModeling"),NTr=o(" (ViT model)"),qTr=l(),I4=a("p"),jTr=o("The model is set in evaluation mode by default using "),yEe=a("code"),DTr=o("model.eval()"),GTr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xEe=a("code"),OTr=o("model.train()"),VTr=l(),F(N4.$$.fragment),wUe=l(),mc=a("h2"),q4=a("a"),$Ee=a("span"),F(Rx.$$.fragment),XTr=l(),kEe=a("span"),zTr=o("AutoModelForObjectDetection"),AUe=l(),er=a("div"),F(Px.$$.fragment),WTr=l(),fc=a("p"),QTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),PJ=a("a"),UTr=o("from_pretrained()"),HTr=o(" class method or the "),BJ=a("a"),JTr=o("from_config()"),YTr=o(` class
method.`),KTr=l(),Bx=a("p"),ZTr=o("This class cannot be instantiated directly using "),SEe=a("code"),eMr=o("__init__()"),oMr=o(" (throws an error)."),rMr=l(),Pt=a("div"),F(Ix.$$.fragment),tMr=l(),REe=a("p"),aMr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),nMr=l(),gc=a("p"),sMr=o(`Note:
Loading a model from its configuration file does `),PEe=a("strong"),lMr=o("not"),iMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IJ=a("a"),dMr=o("from_pretrained()"),cMr=o(" to load the model weights."),mMr=l(),F(j4.$$.fragment),fMr=l(),vo=a("div"),F(Nx.$$.fragment),gMr=l(),BEe=a("p"),hMr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),uMr=l(),fn=a("p"),pMr=o("The model class to instantiate is selected based on the "),IEe=a("code"),_Mr=o("model_type"),bMr=o(` property of the config object (either
passed as an argument or loaded from `),NEe=a("code"),vMr=o("pretrained_model_name_or_path"),FMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qEe=a("code"),TMr=o("pretrained_model_name_or_path"),MMr=o(":"),EMr=l(),qx=a("ul"),D4=a("li"),jEe=a("strong"),CMr=o("detr"),wMr=o(" \u2014 "),NJ=a("a"),AMr=o("DetrForObjectDetection"),LMr=o(" (DETR model)"),yMr=l(),G4=a("li"),DEe=a("strong"),xMr=o("yolos"),$Mr=o(" \u2014 "),qJ=a("a"),kMr=o("YolosForObjectDetection"),SMr=o(" (YOLOS model)"),RMr=l(),O4=a("p"),PMr=o("The model is set in evaluation mode by default using "),GEe=a("code"),BMr=o("model.eval()"),IMr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),OEe=a("code"),NMr=o("model.train()"),qMr=l(),F(V4.$$.fragment),LUe=l(),hc=a("h2"),X4=a("a"),VEe=a("span"),F(jx.$$.fragment),jMr=l(),XEe=a("span"),DMr=o("AutoModelForImageSegmentation"),yUe=l(),or=a("div"),F(Dx.$$.fragment),GMr=l(),uc=a("p"),OMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),jJ=a("a"),VMr=o("from_pretrained()"),XMr=o(" class method or the "),DJ=a("a"),zMr=o("from_config()"),WMr=o(` class
method.`),QMr=l(),Gx=a("p"),UMr=o("This class cannot be instantiated directly using "),zEe=a("code"),HMr=o("__init__()"),JMr=o(" (throws an error)."),YMr=l(),Bt=a("div"),F(Ox.$$.fragment),KMr=l(),WEe=a("p"),ZMr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),eEr=l(),pc=a("p"),oEr=o(`Note:
Loading a model from its configuration file does `),QEe=a("strong"),rEr=o("not"),tEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=a("a"),aEr=o("from_pretrained()"),nEr=o(" to load the model weights."),sEr=l(),F(z4.$$.fragment),lEr=l(),Fo=a("div"),F(Vx.$$.fragment),iEr=l(),UEe=a("p"),dEr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),cEr=l(),gn=a("p"),mEr=o("The model class to instantiate is selected based on the "),HEe=a("code"),fEr=o("model_type"),gEr=o(` property of the config object (either
passed as an argument or loaded from `),JEe=a("code"),hEr=o("pretrained_model_name_or_path"),uEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YEe=a("code"),pEr=o("pretrained_model_name_or_path"),_Er=o(":"),bEr=l(),KEe=a("ul"),W4=a("li"),ZEe=a("strong"),vEr=o("detr"),FEr=o(" \u2014 "),OJ=a("a"),TEr=o("DetrForSegmentation"),MEr=o(" (DETR model)"),EEr=l(),Q4=a("p"),CEr=o("The model is set in evaluation mode by default using "),e4e=a("code"),wEr=o("model.eval()"),AEr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o4e=a("code"),LEr=o("model.train()"),yEr=l(),F(U4.$$.fragment),xUe=l(),_c=a("h2"),H4=a("a"),r4e=a("span"),F(Xx.$$.fragment),xEr=l(),t4e=a("span"),$Er=o("AutoModelForSemanticSegmentation"),$Ue=l(),rr=a("div"),F(zx.$$.fragment),kEr=l(),bc=a("p"),SEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),VJ=a("a"),REr=o("from_pretrained()"),PEr=o(" class method or the "),XJ=a("a"),BEr=o("from_config()"),IEr=o(` class
method.`),NEr=l(),Wx=a("p"),qEr=o("This class cannot be instantiated directly using "),a4e=a("code"),jEr=o("__init__()"),DEr=o(" (throws an error)."),GEr=l(),It=a("div"),F(Qx.$$.fragment),OEr=l(),n4e=a("p"),VEr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),XEr=l(),vc=a("p"),zEr=o(`Note:
Loading a model from its configuration file does `),s4e=a("strong"),WEr=o("not"),QEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=a("a"),UEr=o("from_pretrained()"),HEr=o(" to load the model weights."),JEr=l(),F(J4.$$.fragment),YEr=l(),To=a("div"),F(Ux.$$.fragment),KEr=l(),l4e=a("p"),ZEr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),e4r=l(),hn=a("p"),o4r=o("The model class to instantiate is selected based on the "),i4e=a("code"),r4r=o("model_type"),t4r=o(` property of the config object (either
passed as an argument or loaded from `),d4e=a("code"),a4r=o("pretrained_model_name_or_path"),n4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c4e=a("code"),s4r=o("pretrained_model_name_or_path"),l4r=o(":"),i4r=l(),it=a("ul"),Y4=a("li"),m4e=a("strong"),d4r=o("beit"),c4r=o(" \u2014 "),WJ=a("a"),m4r=o("BeitForSemanticSegmentation"),f4r=o(" (BEiT model)"),g4r=l(),K4=a("li"),f4e=a("strong"),h4r=o("data2vec-vision"),u4r=o(" \u2014 "),QJ=a("a"),p4r=o("Data2VecVisionForSemanticSegmentation"),_4r=o(" (Data2VecVision model)"),b4r=l(),Z4=a("li"),g4e=a("strong"),v4r=o("dpt"),F4r=o(" \u2014 "),UJ=a("a"),T4r=o("DPTForSemanticSegmentation"),M4r=o(" (DPT model)"),E4r=l(),eC=a("li"),h4e=a("strong"),C4r=o("mobilevit"),w4r=o(" \u2014 "),HJ=a("a"),A4r=o("MobileViTForSemanticSegmentation"),L4r=o(" (MobileViT model)"),y4r=l(),oC=a("li"),u4e=a("strong"),x4r=o("segformer"),$4r=o(" \u2014 "),JJ=a("a"),k4r=o("SegformerForSemanticSegmentation"),S4r=o(" (SegFormer model)"),R4r=l(),rC=a("p"),P4r=o("The model is set in evaluation mode by default using "),p4e=a("code"),B4r=o("model.eval()"),I4r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_4e=a("code"),N4r=o("model.train()"),q4r=l(),F(tC.$$.fragment),kUe=l(),Fc=a("h2"),aC=a("a"),b4e=a("span"),F(Hx.$$.fragment),j4r=l(),v4e=a("span"),D4r=o("AutoModelForInstanceSegmentation"),SUe=l(),tr=a("div"),F(Jx.$$.fragment),G4r=l(),Tc=a("p"),O4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),YJ=a("a"),V4r=o("from_pretrained()"),X4r=o(" class method or the "),KJ=a("a"),z4r=o("from_config()"),W4r=o(` class
method.`),Q4r=l(),Yx=a("p"),U4r=o("This class cannot be instantiated directly using "),F4e=a("code"),H4r=o("__init__()"),J4r=o(" (throws an error)."),Y4r=l(),Nt=a("div"),F(Kx.$$.fragment),K4r=l(),T4e=a("p"),Z4r=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),eCr=l(),Mc=a("p"),oCr=o(`Note:
Loading a model from its configuration file does `),M4e=a("strong"),rCr=o("not"),tCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=a("a"),aCr=o("from_pretrained()"),nCr=o(" to load the model weights."),sCr=l(),F(nC.$$.fragment),lCr=l(),Mo=a("div"),F(Zx.$$.fragment),iCr=l(),E4e=a("p"),dCr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),cCr=l(),un=a("p"),mCr=o("The model class to instantiate is selected based on the "),C4e=a("code"),fCr=o("model_type"),gCr=o(` property of the config object (either
passed as an argument or loaded from `),w4e=a("code"),hCr=o("pretrained_model_name_or_path"),uCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A4e=a("code"),pCr=o("pretrained_model_name_or_path"),_Cr=o(":"),bCr=l(),L4e=a("ul"),sC=a("li"),y4e=a("strong"),vCr=o("maskformer"),FCr=o(" \u2014 "),eY=a("a"),TCr=o("MaskFormerForInstanceSegmentation"),MCr=o(" (MaskFormer model)"),ECr=l(),lC=a("p"),CCr=o("The model is set in evaluation mode by default using "),x4e=a("code"),wCr=o("model.eval()"),ACr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$4e=a("code"),LCr=o("model.train()"),yCr=l(),F(iC.$$.fragment),RUe=l(),Ec=a("h2"),dC=a("a"),k4e=a("span"),F(e$.$$.fragment),xCr=l(),S4e=a("span"),$Cr=o("TFAutoModel"),PUe=l(),ar=a("div"),F(o$.$$.fragment),kCr=l(),Cc=a("p"),SCr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),oY=a("a"),RCr=o("from_pretrained()"),PCr=o(" class method or the "),rY=a("a"),BCr=o("from_config()"),ICr=o(` class
method.`),NCr=l(),r$=a("p"),qCr=o("This class cannot be instantiated directly using "),R4e=a("code"),jCr=o("__init__()"),DCr=o(" (throws an error)."),GCr=l(),qt=a("div"),F(t$.$$.fragment),OCr=l(),P4e=a("p"),VCr=o("Instantiates one of the base model classes of the library from a configuration."),XCr=l(),wc=a("p"),zCr=o(`Note:
Loading a model from its configuration file does `),B4e=a("strong"),WCr=o("not"),QCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tY=a("a"),UCr=o("from_pretrained()"),HCr=o(" to load the model weights."),JCr=l(),F(cC.$$.fragment),YCr=l(),Rr=a("div"),F(a$.$$.fragment),KCr=l(),I4e=a("p"),ZCr=o("Instantiate one of the base model classes of the library from a pretrained model."),e3r=l(),pn=a("p"),o3r=o("The model class to instantiate is selected based on the "),N4e=a("code"),r3r=o("model_type"),t3r=o(` property of the config object (either
passed as an argument or loaded from `),q4e=a("code"),a3r=o("pretrained_model_name_or_path"),n3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j4e=a("code"),s3r=o("pretrained_model_name_or_path"),l3r=o(":"),i3r=l(),q=a("ul"),mC=a("li"),D4e=a("strong"),d3r=o("albert"),c3r=o(" \u2014 "),aY=a("a"),m3r=o("TFAlbertModel"),f3r=o(" (ALBERT model)"),g3r=l(),fC=a("li"),G4e=a("strong"),h3r=o("bart"),u3r=o(" \u2014 "),nY=a("a"),p3r=o("TFBartModel"),_3r=o(" (BART model)"),b3r=l(),gC=a("li"),O4e=a("strong"),v3r=o("bert"),F3r=o(" \u2014 "),sY=a("a"),T3r=o("TFBertModel"),M3r=o(" (BERT model)"),E3r=l(),hC=a("li"),V4e=a("strong"),C3r=o("blenderbot"),w3r=o(" \u2014 "),lY=a("a"),A3r=o("TFBlenderbotModel"),L3r=o(" (Blenderbot model)"),y3r=l(),uC=a("li"),X4e=a("strong"),x3r=o("blenderbot-small"),$3r=o(" \u2014 "),iY=a("a"),k3r=o("TFBlenderbotSmallModel"),S3r=o(" (BlenderbotSmall model)"),R3r=l(),pC=a("li"),z4e=a("strong"),P3r=o("camembert"),B3r=o(" \u2014 "),dY=a("a"),I3r=o("TFCamembertModel"),N3r=o(" (CamemBERT model)"),q3r=l(),_C=a("li"),W4e=a("strong"),j3r=o("clip"),D3r=o(" \u2014 "),cY=a("a"),G3r=o("TFCLIPModel"),O3r=o(" (CLIP model)"),V3r=l(),bC=a("li"),Q4e=a("strong"),X3r=o("convbert"),z3r=o(" \u2014 "),mY=a("a"),W3r=o("TFConvBertModel"),Q3r=o(" (ConvBERT model)"),U3r=l(),vC=a("li"),U4e=a("strong"),H3r=o("convnext"),J3r=o(" \u2014 "),fY=a("a"),Y3r=o("TFConvNextModel"),K3r=o(" (ConvNeXT model)"),Z3r=l(),FC=a("li"),H4e=a("strong"),e5r=o("ctrl"),o5r=o(" \u2014 "),gY=a("a"),r5r=o("TFCTRLModel"),t5r=o(" (CTRL model)"),a5r=l(),TC=a("li"),J4e=a("strong"),n5r=o("data2vec-vision"),s5r=o(" \u2014 "),hY=a("a"),l5r=o("TFData2VecVisionModel"),i5r=o(" (Data2VecVision model)"),d5r=l(),MC=a("li"),Y4e=a("strong"),c5r=o("deberta"),m5r=o(" \u2014 "),uY=a("a"),f5r=o("TFDebertaModel"),g5r=o(" (DeBERTa model)"),h5r=l(),EC=a("li"),K4e=a("strong"),u5r=o("deberta-v2"),p5r=o(" \u2014 "),pY=a("a"),_5r=o("TFDebertaV2Model"),b5r=o(" (DeBERTa-v2 model)"),v5r=l(),CC=a("li"),Z4e=a("strong"),F5r=o("deit"),T5r=o(" \u2014 "),_Y=a("a"),M5r=o("TFDeiTModel"),E5r=o(" (DeiT model)"),C5r=l(),wC=a("li"),eCe=a("strong"),w5r=o("distilbert"),A5r=o(" \u2014 "),bY=a("a"),L5r=o("TFDistilBertModel"),y5r=o(" (DistilBERT model)"),x5r=l(),AC=a("li"),oCe=a("strong"),$5r=o("dpr"),k5r=o(" \u2014 "),vY=a("a"),S5r=o("TFDPRQuestionEncoder"),R5r=o(" (DPR model)"),P5r=l(),LC=a("li"),rCe=a("strong"),B5r=o("electra"),I5r=o(" \u2014 "),FY=a("a"),N5r=o("TFElectraModel"),q5r=o(" (ELECTRA model)"),j5r=l(),yC=a("li"),tCe=a("strong"),D5r=o("flaubert"),G5r=o(" \u2014 "),TY=a("a"),O5r=o("TFFlaubertModel"),V5r=o(" (FlauBERT model)"),X5r=l(),il=a("li"),aCe=a("strong"),z5r=o("funnel"),W5r=o(" \u2014 "),MY=a("a"),Q5r=o("TFFunnelModel"),U5r=o(" or "),EY=a("a"),H5r=o("TFFunnelBaseModel"),J5r=o(" (Funnel Transformer model)"),Y5r=l(),xC=a("li"),nCe=a("strong"),K5r=o("gpt2"),Z5r=o(" \u2014 "),CY=a("a"),e0r=o("TFGPT2Model"),o0r=o(" (OpenAI GPT-2 model)"),r0r=l(),$C=a("li"),sCe=a("strong"),t0r=o("gptj"),a0r=o(" \u2014 "),wY=a("a"),n0r=o("TFGPTJModel"),s0r=o(" (GPT-J model)"),l0r=l(),kC=a("li"),lCe=a("strong"),i0r=o("hubert"),d0r=o(" \u2014 "),AY=a("a"),c0r=o("TFHubertModel"),m0r=o(" (Hubert model)"),f0r=l(),SC=a("li"),iCe=a("strong"),g0r=o("layoutlm"),h0r=o(" \u2014 "),LY=a("a"),u0r=o("TFLayoutLMModel"),p0r=o(" (LayoutLM model)"),_0r=l(),RC=a("li"),dCe=a("strong"),b0r=o("led"),v0r=o(" \u2014 "),yY=a("a"),F0r=o("TFLEDModel"),T0r=o(" (LED model)"),M0r=l(),PC=a("li"),cCe=a("strong"),E0r=o("longformer"),C0r=o(" \u2014 "),xY=a("a"),w0r=o("TFLongformerModel"),A0r=o(" (Longformer model)"),L0r=l(),BC=a("li"),mCe=a("strong"),y0r=o("lxmert"),x0r=o(" \u2014 "),$Y=a("a"),$0r=o("TFLxmertModel"),k0r=o(" (LXMERT model)"),S0r=l(),IC=a("li"),fCe=a("strong"),R0r=o("marian"),P0r=o(" \u2014 "),kY=a("a"),B0r=o("TFMarianModel"),I0r=o(" (Marian model)"),N0r=l(),NC=a("li"),gCe=a("strong"),q0r=o("mbart"),j0r=o(" \u2014 "),SY=a("a"),D0r=o("TFMBartModel"),G0r=o(" (mBART model)"),O0r=l(),qC=a("li"),hCe=a("strong"),V0r=o("mobilebert"),X0r=o(" \u2014 "),RY=a("a"),z0r=o("TFMobileBertModel"),W0r=o(" (MobileBERT model)"),Q0r=l(),jC=a("li"),uCe=a("strong"),U0r=o("mpnet"),H0r=o(" \u2014 "),PY=a("a"),J0r=o("TFMPNetModel"),Y0r=o(" (MPNet model)"),K0r=l(),DC=a("li"),pCe=a("strong"),Z0r=o("mt5"),ewr=o(" \u2014 "),BY=a("a"),owr=o("TFMT5Model"),rwr=o(" (MT5 model)"),twr=l(),GC=a("li"),_Ce=a("strong"),awr=o("openai-gpt"),nwr=o(" \u2014 "),IY=a("a"),swr=o("TFOpenAIGPTModel"),lwr=o(" (OpenAI GPT model)"),iwr=l(),OC=a("li"),bCe=a("strong"),dwr=o("opt"),cwr=o(" \u2014 "),NY=a("a"),mwr=o("TFOPTModel"),fwr=o(" (OPT model)"),gwr=l(),VC=a("li"),vCe=a("strong"),hwr=o("pegasus"),uwr=o(" \u2014 "),qY=a("a"),pwr=o("TFPegasusModel"),_wr=o(" (Pegasus model)"),bwr=l(),XC=a("li"),FCe=a("strong"),vwr=o("regnet"),Fwr=o(" \u2014 "),jY=a("a"),Twr=o("TFRegNetModel"),Mwr=o(" (RegNet model)"),Ewr=l(),zC=a("li"),TCe=a("strong"),Cwr=o("rembert"),wwr=o(" \u2014 "),DY=a("a"),Awr=o("TFRemBertModel"),Lwr=o(" (RemBERT model)"),ywr=l(),WC=a("li"),MCe=a("strong"),xwr=o("resnet"),$wr=o(" \u2014 "),GY=a("a"),kwr=o("TFResNetModel"),Swr=o(" (ResNet model)"),Rwr=l(),QC=a("li"),ECe=a("strong"),Pwr=o("roberta"),Bwr=o(" \u2014 "),OY=a("a"),Iwr=o("TFRobertaModel"),Nwr=o(" (RoBERTa model)"),qwr=l(),UC=a("li"),CCe=a("strong"),jwr=o("roformer"),Dwr=o(" \u2014 "),VY=a("a"),Gwr=o("TFRoFormerModel"),Owr=o(" (RoFormer model)"),Vwr=l(),HC=a("li"),wCe=a("strong"),Xwr=o("segformer"),zwr=o(" \u2014 "),XY=a("a"),Wwr=o("TFSegformerModel"),Qwr=o(" (SegFormer model)"),Uwr=l(),JC=a("li"),ACe=a("strong"),Hwr=o("speech_to_text"),Jwr=o(" \u2014 "),zY=a("a"),Ywr=o("TFSpeech2TextModel"),Kwr=o(" (Speech2Text model)"),Zwr=l(),YC=a("li"),LCe=a("strong"),e6r=o("swin"),o6r=o(" \u2014 "),WY=a("a"),r6r=o("TFSwinModel"),t6r=o(" (Swin Transformer model)"),a6r=l(),KC=a("li"),yCe=a("strong"),n6r=o("t5"),s6r=o(" \u2014 "),QY=a("a"),l6r=o("TFT5Model"),i6r=o(" (T5 model)"),d6r=l(),ZC=a("li"),xCe=a("strong"),c6r=o("tapas"),m6r=o(" \u2014 "),UY=a("a"),f6r=o("TFTapasModel"),g6r=o(" (TAPAS model)"),h6r=l(),e3=a("li"),$Ce=a("strong"),u6r=o("transfo-xl"),p6r=o(" \u2014 "),HY=a("a"),_6r=o("TFTransfoXLModel"),b6r=o(" (Transformer-XL model)"),v6r=l(),o3=a("li"),kCe=a("strong"),F6r=o("vit"),T6r=o(" \u2014 "),JY=a("a"),M6r=o("TFViTModel"),E6r=o(" (ViT model)"),C6r=l(),r3=a("li"),SCe=a("strong"),w6r=o("vit_mae"),A6r=o(" \u2014 "),YY=a("a"),L6r=o("TFViTMAEModel"),y6r=o(" (ViTMAE model)"),x6r=l(),t3=a("li"),RCe=a("strong"),$6r=o("wav2vec2"),k6r=o(" \u2014 "),KY=a("a"),S6r=o("TFWav2Vec2Model"),R6r=o(" (Wav2Vec2 model)"),P6r=l(),a3=a("li"),PCe=a("strong"),B6r=o("xlm"),I6r=o(" \u2014 "),ZY=a("a"),N6r=o("TFXLMModel"),q6r=o(" (XLM model)"),j6r=l(),n3=a("li"),BCe=a("strong"),D6r=o("xlm-roberta"),G6r=o(" \u2014 "),eK=a("a"),O6r=o("TFXLMRobertaModel"),V6r=o(" (XLM-RoBERTa model)"),X6r=l(),s3=a("li"),ICe=a("strong"),z6r=o("xlnet"),W6r=o(" \u2014 "),oK=a("a"),Q6r=o("TFXLNetModel"),U6r=o(" (XLNet model)"),H6r=l(),F(l3.$$.fragment),BUe=l(),Ac=a("h2"),i3=a("a"),NCe=a("span"),F(n$.$$.fragment),J6r=l(),qCe=a("span"),Y6r=o("TFAutoModelForPreTraining"),IUe=l(),nr=a("div"),F(s$.$$.fragment),K6r=l(),Lc=a("p"),Z6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),rK=a("a"),eAr=o("from_pretrained()"),oAr=o(" class method or the "),tK=a("a"),rAr=o("from_config()"),tAr=o(` class
method.`),aAr=l(),l$=a("p"),nAr=o("This class cannot be instantiated directly using "),jCe=a("code"),sAr=o("__init__()"),lAr=o(" (throws an error)."),iAr=l(),jt=a("div"),F(i$.$$.fragment),dAr=l(),DCe=a("p"),cAr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),mAr=l(),yc=a("p"),fAr=o(`Note:
Loading a model from its configuration file does `),GCe=a("strong"),gAr=o("not"),hAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=a("a"),uAr=o("from_pretrained()"),pAr=o(" to load the model weights."),_Ar=l(),F(d3.$$.fragment),bAr=l(),Pr=a("div"),F(d$.$$.fragment),vAr=l(),OCe=a("p"),FAr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),TAr=l(),_n=a("p"),MAr=o("The model class to instantiate is selected based on the "),VCe=a("code"),EAr=o("model_type"),CAr=o(` property of the config object (either
passed as an argument or loaded from `),XCe=a("code"),wAr=o("pretrained_model_name_or_path"),AAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zCe=a("code"),LAr=o("pretrained_model_name_or_path"),yAr=o(":"),xAr=l(),se=a("ul"),c3=a("li"),WCe=a("strong"),$Ar=o("albert"),kAr=o(" \u2014 "),nK=a("a"),SAr=o("TFAlbertForPreTraining"),RAr=o(" (ALBERT model)"),PAr=l(),m3=a("li"),QCe=a("strong"),BAr=o("bart"),IAr=o(" \u2014 "),sK=a("a"),NAr=o("TFBartForConditionalGeneration"),qAr=o(" (BART model)"),jAr=l(),f3=a("li"),UCe=a("strong"),DAr=o("bert"),GAr=o(" \u2014 "),lK=a("a"),OAr=o("TFBertForPreTraining"),VAr=o(" (BERT model)"),XAr=l(),g3=a("li"),HCe=a("strong"),zAr=o("camembert"),WAr=o(" \u2014 "),iK=a("a"),QAr=o("TFCamembertForMaskedLM"),UAr=o(" (CamemBERT model)"),HAr=l(),h3=a("li"),JCe=a("strong"),JAr=o("ctrl"),YAr=o(" \u2014 "),dK=a("a"),KAr=o("TFCTRLLMHeadModel"),ZAr=o(" (CTRL model)"),e7r=l(),u3=a("li"),YCe=a("strong"),o7r=o("distilbert"),r7r=o(" \u2014 "),cK=a("a"),t7r=o("TFDistilBertForMaskedLM"),a7r=o(" (DistilBERT model)"),n7r=l(),p3=a("li"),KCe=a("strong"),s7r=o("electra"),l7r=o(" \u2014 "),mK=a("a"),i7r=o("TFElectraForPreTraining"),d7r=o(" (ELECTRA model)"),c7r=l(),_3=a("li"),ZCe=a("strong"),m7r=o("flaubert"),f7r=o(" \u2014 "),fK=a("a"),g7r=o("TFFlaubertWithLMHeadModel"),h7r=o(" (FlauBERT model)"),u7r=l(),b3=a("li"),e3e=a("strong"),p7r=o("funnel"),_7r=o(" \u2014 "),gK=a("a"),b7r=o("TFFunnelForPreTraining"),v7r=o(" (Funnel Transformer model)"),F7r=l(),v3=a("li"),o3e=a("strong"),T7r=o("gpt2"),M7r=o(" \u2014 "),hK=a("a"),E7r=o("TFGPT2LMHeadModel"),C7r=o(" (OpenAI GPT-2 model)"),w7r=l(),F3=a("li"),r3e=a("strong"),A7r=o("layoutlm"),L7r=o(" \u2014 "),uK=a("a"),y7r=o("TFLayoutLMForMaskedLM"),x7r=o(" (LayoutLM model)"),$7r=l(),T3=a("li"),t3e=a("strong"),k7r=o("lxmert"),S7r=o(" \u2014 "),pK=a("a"),R7r=o("TFLxmertForPreTraining"),P7r=o(" (LXMERT model)"),B7r=l(),M3=a("li"),a3e=a("strong"),I7r=o("mobilebert"),N7r=o(" \u2014 "),_K=a("a"),q7r=o("TFMobileBertForPreTraining"),j7r=o(" (MobileBERT model)"),D7r=l(),E3=a("li"),n3e=a("strong"),G7r=o("mpnet"),O7r=o(" \u2014 "),bK=a("a"),V7r=o("TFMPNetForMaskedLM"),X7r=o(" (MPNet model)"),z7r=l(),C3=a("li"),s3e=a("strong"),W7r=o("openai-gpt"),Q7r=o(" \u2014 "),vK=a("a"),U7r=o("TFOpenAIGPTLMHeadModel"),H7r=o(" (OpenAI GPT model)"),J7r=l(),w3=a("li"),l3e=a("strong"),Y7r=o("roberta"),K7r=o(" \u2014 "),FK=a("a"),Z7r=o("TFRobertaForMaskedLM"),eLr=o(" (RoBERTa model)"),oLr=l(),A3=a("li"),i3e=a("strong"),rLr=o("t5"),tLr=o(" \u2014 "),TK=a("a"),aLr=o("TFT5ForConditionalGeneration"),nLr=o(" (T5 model)"),sLr=l(),L3=a("li"),d3e=a("strong"),lLr=o("tapas"),iLr=o(" \u2014 "),MK=a("a"),dLr=o("TFTapasForMaskedLM"),cLr=o(" (TAPAS model)"),mLr=l(),y3=a("li"),c3e=a("strong"),fLr=o("transfo-xl"),gLr=o(" \u2014 "),EK=a("a"),hLr=o("TFTransfoXLLMHeadModel"),uLr=o(" (Transformer-XL model)"),pLr=l(),x3=a("li"),m3e=a("strong"),_Lr=o("vit_mae"),bLr=o(" \u2014 "),CK=a("a"),vLr=o("TFViTMAEForPreTraining"),FLr=o(" (ViTMAE model)"),TLr=l(),$3=a("li"),f3e=a("strong"),MLr=o("xlm"),ELr=o(" \u2014 "),wK=a("a"),CLr=o("TFXLMWithLMHeadModel"),wLr=o(" (XLM model)"),ALr=l(),k3=a("li"),g3e=a("strong"),LLr=o("xlm-roberta"),yLr=o(" \u2014 "),AK=a("a"),xLr=o("TFXLMRobertaForMaskedLM"),$Lr=o(" (XLM-RoBERTa model)"),kLr=l(),S3=a("li"),h3e=a("strong"),SLr=o("xlnet"),RLr=o(" \u2014 "),LK=a("a"),PLr=o("TFXLNetLMHeadModel"),BLr=o(" (XLNet model)"),ILr=l(),F(R3.$$.fragment),NUe=l(),xc=a("h2"),P3=a("a"),u3e=a("span"),F(c$.$$.fragment),NLr=l(),p3e=a("span"),qLr=o("TFAutoModelForCausalLM"),qUe=l(),sr=a("div"),F(m$.$$.fragment),jLr=l(),$c=a("p"),DLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yK=a("a"),GLr=o("from_pretrained()"),OLr=o(" class method or the "),xK=a("a"),VLr=o("from_config()"),XLr=o(` class
method.`),zLr=l(),f$=a("p"),WLr=o("This class cannot be instantiated directly using "),_3e=a("code"),QLr=o("__init__()"),ULr=o(" (throws an error)."),HLr=l(),Dt=a("div"),F(g$.$$.fragment),JLr=l(),b3e=a("p"),YLr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),KLr=l(),kc=a("p"),ZLr=o(`Note:
Loading a model from its configuration file does `),v3e=a("strong"),eyr=o("not"),oyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$K=a("a"),ryr=o("from_pretrained()"),tyr=o(" to load the model weights."),ayr=l(),F(B3.$$.fragment),nyr=l(),Br=a("div"),F(h$.$$.fragment),syr=l(),F3e=a("p"),lyr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),iyr=l(),bn=a("p"),dyr=o("The model class to instantiate is selected based on the "),T3e=a("code"),cyr=o("model_type"),myr=o(` property of the config object (either
passed as an argument or loaded from `),M3e=a("code"),fyr=o("pretrained_model_name_or_path"),gyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E3e=a("code"),hyr=o("pretrained_model_name_or_path"),uyr=o(":"),pyr=l(),Me=a("ul"),I3=a("li"),C3e=a("strong"),_yr=o("bert"),byr=o(" \u2014 "),kK=a("a"),vyr=o("TFBertLMHeadModel"),Fyr=o(" (BERT model)"),Tyr=l(),N3=a("li"),w3e=a("strong"),Myr=o("camembert"),Eyr=o(" \u2014 "),SK=a("a"),Cyr=o("TFCamembertForCausalLM"),wyr=o(" (CamemBERT model)"),Ayr=l(),q3=a("li"),A3e=a("strong"),Lyr=o("ctrl"),yyr=o(" \u2014 "),RK=a("a"),xyr=o("TFCTRLLMHeadModel"),$yr=o(" (CTRL model)"),kyr=l(),j3=a("li"),L3e=a("strong"),Syr=o("gpt2"),Ryr=o(" \u2014 "),PK=a("a"),Pyr=o("TFGPT2LMHeadModel"),Byr=o(" (OpenAI GPT-2 model)"),Iyr=l(),D3=a("li"),y3e=a("strong"),Nyr=o("gptj"),qyr=o(" \u2014 "),BK=a("a"),jyr=o("TFGPTJForCausalLM"),Dyr=o(" (GPT-J model)"),Gyr=l(),G3=a("li"),x3e=a("strong"),Oyr=o("openai-gpt"),Vyr=o(" \u2014 "),IK=a("a"),Xyr=o("TFOpenAIGPTLMHeadModel"),zyr=o(" (OpenAI GPT model)"),Wyr=l(),O3=a("li"),$3e=a("strong"),Qyr=o("opt"),Uyr=o(" \u2014 "),NK=a("a"),Hyr=o("TFOPTForCausalLM"),Jyr=o(" (OPT model)"),Yyr=l(),V3=a("li"),k3e=a("strong"),Kyr=o("rembert"),Zyr=o(" \u2014 "),qK=a("a"),e8r=o("TFRemBertForCausalLM"),o8r=o(" (RemBERT model)"),r8r=l(),X3=a("li"),S3e=a("strong"),t8r=o("roberta"),a8r=o(" \u2014 "),jK=a("a"),n8r=o("TFRobertaForCausalLM"),s8r=o(" (RoBERTa model)"),l8r=l(),z3=a("li"),R3e=a("strong"),i8r=o("roformer"),d8r=o(" \u2014 "),DK=a("a"),c8r=o("TFRoFormerForCausalLM"),m8r=o(" (RoFormer model)"),f8r=l(),W3=a("li"),P3e=a("strong"),g8r=o("transfo-xl"),h8r=o(" \u2014 "),GK=a("a"),u8r=o("TFTransfoXLLMHeadModel"),p8r=o(" (Transformer-XL model)"),_8r=l(),Q3=a("li"),B3e=a("strong"),b8r=o("xlm"),v8r=o(" \u2014 "),OK=a("a"),F8r=o("TFXLMWithLMHeadModel"),T8r=o(" (XLM model)"),M8r=l(),U3=a("li"),I3e=a("strong"),E8r=o("xlnet"),C8r=o(" \u2014 "),VK=a("a"),w8r=o("TFXLNetLMHeadModel"),A8r=o(" (XLNet model)"),L8r=l(),F(H3.$$.fragment),jUe=l(),Sc=a("h2"),J3=a("a"),N3e=a("span"),F(u$.$$.fragment),y8r=l(),q3e=a("span"),x8r=o("TFAutoModelForImageClassification"),DUe=l(),lr=a("div"),F(p$.$$.fragment),$8r=l(),Rc=a("p"),k8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),XK=a("a"),S8r=o("from_pretrained()"),R8r=o(" class method or the "),zK=a("a"),P8r=o("from_config()"),B8r=o(` class
method.`),I8r=l(),_$=a("p"),N8r=o("This class cannot be instantiated directly using "),j3e=a("code"),q8r=o("__init__()"),j8r=o(" (throws an error)."),D8r=l(),Gt=a("div"),F(b$.$$.fragment),G8r=l(),D3e=a("p"),O8r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),V8r=l(),Pc=a("p"),X8r=o(`Note:
Loading a model from its configuration file does `),G3e=a("strong"),z8r=o("not"),W8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WK=a("a"),Q8r=o("from_pretrained()"),U8r=o(" to load the model weights."),H8r=l(),F(Y3.$$.fragment),J8r=l(),Ir=a("div"),F(v$.$$.fragment),Y8r=l(),O3e=a("p"),K8r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Z8r=l(),vn=a("p"),e9r=o("The model class to instantiate is selected based on the "),V3e=a("code"),o9r=o("model_type"),r9r=o(` property of the config object (either
passed as an argument or loaded from `),X3e=a("code"),t9r=o("pretrained_model_name_or_path"),a9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z3e=a("code"),n9r=o("pretrained_model_name_or_path"),s9r=o(":"),l9r=l(),Ve=a("ul"),K3=a("li"),W3e=a("strong"),i9r=o("convnext"),d9r=o(" \u2014 "),QK=a("a"),c9r=o("TFConvNextForImageClassification"),m9r=o(" (ConvNeXT model)"),f9r=l(),Z3=a("li"),Q3e=a("strong"),g9r=o("data2vec-vision"),h9r=o(" \u2014 "),UK=a("a"),u9r=o("TFData2VecVisionForImageClassification"),p9r=o(" (Data2VecVision model)"),_9r=l(),dl=a("li"),U3e=a("strong"),b9r=o("deit"),v9r=o(" \u2014 "),HK=a("a"),F9r=o("TFDeiTForImageClassification"),T9r=o(" or "),JK=a("a"),M9r=o("TFDeiTForImageClassificationWithTeacher"),E9r=o(" (DeiT model)"),C9r=l(),e5=a("li"),H3e=a("strong"),w9r=o("regnet"),A9r=o(" \u2014 "),YK=a("a"),L9r=o("TFRegNetForImageClassification"),y9r=o(" (RegNet model)"),x9r=l(),o5=a("li"),J3e=a("strong"),$9r=o("resnet"),k9r=o(" \u2014 "),KK=a("a"),S9r=o("TFResNetForImageClassification"),R9r=o(" (ResNet model)"),P9r=l(),r5=a("li"),Y3e=a("strong"),B9r=o("segformer"),I9r=o(" \u2014 "),ZK=a("a"),N9r=o("TFSegformerForImageClassification"),q9r=o(" (SegFormer model)"),j9r=l(),t5=a("li"),K3e=a("strong"),D9r=o("swin"),G9r=o(" \u2014 "),eZ=a("a"),O9r=o("TFSwinForImageClassification"),V9r=o(" (Swin Transformer model)"),X9r=l(),a5=a("li"),Z3e=a("strong"),z9r=o("vit"),W9r=o(" \u2014 "),oZ=a("a"),Q9r=o("TFViTForImageClassification"),U9r=o(" (ViT model)"),H9r=l(),F(n5.$$.fragment),GUe=l(),Bc=a("h2"),s5=a("a"),e5e=a("span"),F(F$.$$.fragment),J9r=l(),o5e=a("span"),Y9r=o("TFAutoModelForSemanticSegmentation"),OUe=l(),ir=a("div"),F(T$.$$.fragment),K9r=l(),Ic=a("p"),Z9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),rZ=a("a"),exr=o("from_pretrained()"),oxr=o(" class method or the "),tZ=a("a"),rxr=o("from_config()"),txr=o(` class
method.`),axr=l(),M$=a("p"),nxr=o("This class cannot be instantiated directly using "),r5e=a("code"),sxr=o("__init__()"),lxr=o(" (throws an error)."),ixr=l(),Ot=a("div"),F(E$.$$.fragment),dxr=l(),t5e=a("p"),cxr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),mxr=l(),Nc=a("p"),fxr=o(`Note:
Loading a model from its configuration file does `),a5e=a("strong"),gxr=o("not"),hxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=a("a"),uxr=o("from_pretrained()"),pxr=o(" to load the model weights."),_xr=l(),F(l5.$$.fragment),bxr=l(),Nr=a("div"),F(C$.$$.fragment),vxr=l(),n5e=a("p"),Fxr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Txr=l(),Fn=a("p"),Mxr=o("The model class to instantiate is selected based on the "),s5e=a("code"),Exr=o("model_type"),Cxr=o(` property of the config object (either
passed as an argument or loaded from `),l5e=a("code"),wxr=o("pretrained_model_name_or_path"),Axr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i5e=a("code"),Lxr=o("pretrained_model_name_or_path"),yxr=o(":"),xxr=l(),w$=a("ul"),i5=a("li"),d5e=a("strong"),$xr=o("data2vec-vision"),kxr=o(" \u2014 "),nZ=a("a"),Sxr=o("TFData2VecVisionForSemanticSegmentation"),Rxr=o(" (Data2VecVision model)"),Pxr=l(),d5=a("li"),c5e=a("strong"),Bxr=o("segformer"),Ixr=o(" \u2014 "),sZ=a("a"),Nxr=o("TFSegformerForSemanticSegmentation"),qxr=o(" (SegFormer model)"),jxr=l(),F(c5.$$.fragment),VUe=l(),qc=a("h2"),m5=a("a"),m5e=a("span"),F(A$.$$.fragment),Dxr=l(),f5e=a("span"),Gxr=o("TFAutoModelForMaskedLM"),XUe=l(),dr=a("div"),F(L$.$$.fragment),Oxr=l(),jc=a("p"),Vxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),lZ=a("a"),Xxr=o("from_pretrained()"),zxr=o(" class method or the "),iZ=a("a"),Wxr=o("from_config()"),Qxr=o(` class
method.`),Uxr=l(),y$=a("p"),Hxr=o("This class cannot be instantiated directly using "),g5e=a("code"),Jxr=o("__init__()"),Yxr=o(" (throws an error)."),Kxr=l(),Vt=a("div"),F(x$.$$.fragment),Zxr=l(),h5e=a("p"),e$r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),o$r=l(),Dc=a("p"),r$r=o(`Note:
Loading a model from its configuration file does `),u5e=a("strong"),t$r=o("not"),a$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dZ=a("a"),n$r=o("from_pretrained()"),s$r=o(" to load the model weights."),l$r=l(),F(f5.$$.fragment),i$r=l(),qr=a("div"),F($$.$$.fragment),d$r=l(),p5e=a("p"),c$r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),m$r=l(),Tn=a("p"),f$r=o("The model class to instantiate is selected based on the "),_5e=a("code"),g$r=o("model_type"),h$r=o(` property of the config object (either
passed as an argument or loaded from `),b5e=a("code"),u$r=o("pretrained_model_name_or_path"),p$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v5e=a("code"),_$r=o("pretrained_model_name_or_path"),b$r=o(":"),v$r=l(),ie=a("ul"),g5=a("li"),F5e=a("strong"),F$r=o("albert"),T$r=o(" \u2014 "),cZ=a("a"),M$r=o("TFAlbertForMaskedLM"),E$r=o(" (ALBERT model)"),C$r=l(),h5=a("li"),T5e=a("strong"),w$r=o("bert"),A$r=o(" \u2014 "),mZ=a("a"),L$r=o("TFBertForMaskedLM"),y$r=o(" (BERT model)"),x$r=l(),u5=a("li"),M5e=a("strong"),$$r=o("camembert"),k$r=o(" \u2014 "),fZ=a("a"),S$r=o("TFCamembertForMaskedLM"),R$r=o(" (CamemBERT model)"),P$r=l(),p5=a("li"),E5e=a("strong"),B$r=o("convbert"),I$r=o(" \u2014 "),gZ=a("a"),N$r=o("TFConvBertForMaskedLM"),q$r=o(" (ConvBERT model)"),j$r=l(),_5=a("li"),C5e=a("strong"),D$r=o("deberta"),G$r=o(" \u2014 "),hZ=a("a"),O$r=o("TFDebertaForMaskedLM"),V$r=o(" (DeBERTa model)"),X$r=l(),b5=a("li"),w5e=a("strong"),z$r=o("deberta-v2"),W$r=o(" \u2014 "),uZ=a("a"),Q$r=o("TFDebertaV2ForMaskedLM"),U$r=o(" (DeBERTa-v2 model)"),H$r=l(),v5=a("li"),A5e=a("strong"),J$r=o("distilbert"),Y$r=o(" \u2014 "),pZ=a("a"),K$r=o("TFDistilBertForMaskedLM"),Z$r=o(" (DistilBERT model)"),ekr=l(),F5=a("li"),L5e=a("strong"),okr=o("electra"),rkr=o(" \u2014 "),_Z=a("a"),tkr=o("TFElectraForMaskedLM"),akr=o(" (ELECTRA model)"),nkr=l(),T5=a("li"),y5e=a("strong"),skr=o("flaubert"),lkr=o(" \u2014 "),bZ=a("a"),ikr=o("TFFlaubertWithLMHeadModel"),dkr=o(" (FlauBERT model)"),ckr=l(),M5=a("li"),x5e=a("strong"),mkr=o("funnel"),fkr=o(" \u2014 "),vZ=a("a"),gkr=o("TFFunnelForMaskedLM"),hkr=o(" (Funnel Transformer model)"),ukr=l(),E5=a("li"),$5e=a("strong"),pkr=o("layoutlm"),_kr=o(" \u2014 "),FZ=a("a"),bkr=o("TFLayoutLMForMaskedLM"),vkr=o(" (LayoutLM model)"),Fkr=l(),C5=a("li"),k5e=a("strong"),Tkr=o("longformer"),Mkr=o(" \u2014 "),TZ=a("a"),Ekr=o("TFLongformerForMaskedLM"),Ckr=o(" (Longformer model)"),wkr=l(),w5=a("li"),S5e=a("strong"),Akr=o("mobilebert"),Lkr=o(" \u2014 "),MZ=a("a"),ykr=o("TFMobileBertForMaskedLM"),xkr=o(" (MobileBERT model)"),$kr=l(),A5=a("li"),R5e=a("strong"),kkr=o("mpnet"),Skr=o(" \u2014 "),EZ=a("a"),Rkr=o("TFMPNetForMaskedLM"),Pkr=o(" (MPNet model)"),Bkr=l(),L5=a("li"),P5e=a("strong"),Ikr=o("rembert"),Nkr=o(" \u2014 "),CZ=a("a"),qkr=o("TFRemBertForMaskedLM"),jkr=o(" (RemBERT model)"),Dkr=l(),y5=a("li"),B5e=a("strong"),Gkr=o("roberta"),Okr=o(" \u2014 "),wZ=a("a"),Vkr=o("TFRobertaForMaskedLM"),Xkr=o(" (RoBERTa model)"),zkr=l(),x5=a("li"),I5e=a("strong"),Wkr=o("roformer"),Qkr=o(" \u2014 "),AZ=a("a"),Ukr=o("TFRoFormerForMaskedLM"),Hkr=o(" (RoFormer model)"),Jkr=l(),$5=a("li"),N5e=a("strong"),Ykr=o("tapas"),Kkr=o(" \u2014 "),LZ=a("a"),Zkr=o("TFTapasForMaskedLM"),eSr=o(" (TAPAS model)"),oSr=l(),k5=a("li"),q5e=a("strong"),rSr=o("xlm"),tSr=o(" \u2014 "),yZ=a("a"),aSr=o("TFXLMWithLMHeadModel"),nSr=o(" (XLM model)"),sSr=l(),S5=a("li"),j5e=a("strong"),lSr=o("xlm-roberta"),iSr=o(" \u2014 "),xZ=a("a"),dSr=o("TFXLMRobertaForMaskedLM"),cSr=o(" (XLM-RoBERTa model)"),mSr=l(),F(R5.$$.fragment),zUe=l(),Gc=a("h2"),P5=a("a"),D5e=a("span"),F(k$.$$.fragment),fSr=l(),G5e=a("span"),gSr=o("TFAutoModelForSeq2SeqLM"),WUe=l(),cr=a("div"),F(S$.$$.fragment),hSr=l(),Oc=a("p"),uSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$Z=a("a"),pSr=o("from_pretrained()"),_Sr=o(" class method or the "),kZ=a("a"),bSr=o("from_config()"),vSr=o(` class
method.`),FSr=l(),R$=a("p"),TSr=o("This class cannot be instantiated directly using "),O5e=a("code"),MSr=o("__init__()"),ESr=o(" (throws an error)."),CSr=l(),Xt=a("div"),F(P$.$$.fragment),wSr=l(),V5e=a("p"),ASr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),LSr=l(),Vc=a("p"),ySr=o(`Note:
Loading a model from its configuration file does `),X5e=a("strong"),xSr=o("not"),$Sr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=a("a"),kSr=o("from_pretrained()"),SSr=o(" to load the model weights."),RSr=l(),F(B5.$$.fragment),PSr=l(),jr=a("div"),F(B$.$$.fragment),BSr=l(),z5e=a("p"),ISr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),NSr=l(),Mn=a("p"),qSr=o("The model class to instantiate is selected based on the "),W5e=a("code"),jSr=o("model_type"),DSr=o(` property of the config object (either
passed as an argument or loaded from `),Q5e=a("code"),GSr=o("pretrained_model_name_or_path"),OSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U5e=a("code"),VSr=o("pretrained_model_name_or_path"),XSr=o(":"),zSr=l(),ye=a("ul"),I5=a("li"),H5e=a("strong"),WSr=o("bart"),QSr=o(" \u2014 "),RZ=a("a"),USr=o("TFBartForConditionalGeneration"),HSr=o(" (BART model)"),JSr=l(),N5=a("li"),J5e=a("strong"),YSr=o("blenderbot"),KSr=o(" \u2014 "),PZ=a("a"),ZSr=o("TFBlenderbotForConditionalGeneration"),eRr=o(" (Blenderbot model)"),oRr=l(),q5=a("li"),Y5e=a("strong"),rRr=o("blenderbot-small"),tRr=o(" \u2014 "),BZ=a("a"),aRr=o("TFBlenderbotSmallForConditionalGeneration"),nRr=o(" (BlenderbotSmall model)"),sRr=l(),j5=a("li"),K5e=a("strong"),lRr=o("encoder-decoder"),iRr=o(" \u2014 "),IZ=a("a"),dRr=o("TFEncoderDecoderModel"),cRr=o(" (Encoder decoder model)"),mRr=l(),D5=a("li"),Z5e=a("strong"),fRr=o("led"),gRr=o(" \u2014 "),NZ=a("a"),hRr=o("TFLEDForConditionalGeneration"),uRr=o(" (LED model)"),pRr=l(),G5=a("li"),e0e=a("strong"),_Rr=o("marian"),bRr=o(" \u2014 "),qZ=a("a"),vRr=o("TFMarianMTModel"),FRr=o(" (Marian model)"),TRr=l(),O5=a("li"),o0e=a("strong"),MRr=o("mbart"),ERr=o(" \u2014 "),jZ=a("a"),CRr=o("TFMBartForConditionalGeneration"),wRr=o(" (mBART model)"),ARr=l(),V5=a("li"),r0e=a("strong"),LRr=o("mt5"),yRr=o(" \u2014 "),DZ=a("a"),xRr=o("TFMT5ForConditionalGeneration"),$Rr=o(" (MT5 model)"),kRr=l(),X5=a("li"),t0e=a("strong"),SRr=o("pegasus"),RRr=o(" \u2014 "),GZ=a("a"),PRr=o("TFPegasusForConditionalGeneration"),BRr=o(" (Pegasus model)"),IRr=l(),z5=a("li"),a0e=a("strong"),NRr=o("t5"),qRr=o(" \u2014 "),OZ=a("a"),jRr=o("TFT5ForConditionalGeneration"),DRr=o(" (T5 model)"),GRr=l(),F(W5.$$.fragment),QUe=l(),Xc=a("h2"),Q5=a("a"),n0e=a("span"),F(I$.$$.fragment),ORr=l(),s0e=a("span"),VRr=o("TFAutoModelForSequenceClassification"),UUe=l(),mr=a("div"),F(N$.$$.fragment),XRr=l(),zc=a("p"),zRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VZ=a("a"),WRr=o("from_pretrained()"),QRr=o(" class method or the "),XZ=a("a"),URr=o("from_config()"),HRr=o(` class
method.`),JRr=l(),q$=a("p"),YRr=o("This class cannot be instantiated directly using "),l0e=a("code"),KRr=o("__init__()"),ZRr=o(" (throws an error)."),ePr=l(),zt=a("div"),F(j$.$$.fragment),oPr=l(),i0e=a("p"),rPr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),tPr=l(),Wc=a("p"),aPr=o(`Note:
Loading a model from its configuration file does `),d0e=a("strong"),nPr=o("not"),sPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zZ=a("a"),lPr=o("from_pretrained()"),iPr=o(" to load the model weights."),dPr=l(),F(U5.$$.fragment),cPr=l(),Dr=a("div"),F(D$.$$.fragment),mPr=l(),c0e=a("p"),fPr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),gPr=l(),En=a("p"),hPr=o("The model class to instantiate is selected based on the "),m0e=a("code"),uPr=o("model_type"),pPr=o(` property of the config object (either
passed as an argument or loaded from `),f0e=a("code"),_Pr=o("pretrained_model_name_or_path"),bPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g0e=a("code"),vPr=o("pretrained_model_name_or_path"),FPr=o(":"),TPr=l(),te=a("ul"),H5=a("li"),h0e=a("strong"),MPr=o("albert"),EPr=o(" \u2014 "),WZ=a("a"),CPr=o("TFAlbertForSequenceClassification"),wPr=o(" (ALBERT model)"),APr=l(),J5=a("li"),u0e=a("strong"),LPr=o("bert"),yPr=o(" \u2014 "),QZ=a("a"),xPr=o("TFBertForSequenceClassification"),$Pr=o(" (BERT model)"),kPr=l(),Y5=a("li"),p0e=a("strong"),SPr=o("camembert"),RPr=o(" \u2014 "),UZ=a("a"),PPr=o("TFCamembertForSequenceClassification"),BPr=o(" (CamemBERT model)"),IPr=l(),K5=a("li"),_0e=a("strong"),NPr=o("convbert"),qPr=o(" \u2014 "),HZ=a("a"),jPr=o("TFConvBertForSequenceClassification"),DPr=o(" (ConvBERT model)"),GPr=l(),Z5=a("li"),b0e=a("strong"),OPr=o("ctrl"),VPr=o(" \u2014 "),JZ=a("a"),XPr=o("TFCTRLForSequenceClassification"),zPr=o(" (CTRL model)"),WPr=l(),e0=a("li"),v0e=a("strong"),QPr=o("deberta"),UPr=o(" \u2014 "),YZ=a("a"),HPr=o("TFDebertaForSequenceClassification"),JPr=o(" (DeBERTa model)"),YPr=l(),o0=a("li"),F0e=a("strong"),KPr=o("deberta-v2"),ZPr=o(" \u2014 "),KZ=a("a"),eBr=o("TFDebertaV2ForSequenceClassification"),oBr=o(" (DeBERTa-v2 model)"),rBr=l(),r0=a("li"),T0e=a("strong"),tBr=o("distilbert"),aBr=o(" \u2014 "),ZZ=a("a"),nBr=o("TFDistilBertForSequenceClassification"),sBr=o(" (DistilBERT model)"),lBr=l(),t0=a("li"),M0e=a("strong"),iBr=o("electra"),dBr=o(" \u2014 "),eee=a("a"),cBr=o("TFElectraForSequenceClassification"),mBr=o(" (ELECTRA model)"),fBr=l(),a0=a("li"),E0e=a("strong"),gBr=o("flaubert"),hBr=o(" \u2014 "),oee=a("a"),uBr=o("TFFlaubertForSequenceClassification"),pBr=o(" (FlauBERT model)"),_Br=l(),n0=a("li"),C0e=a("strong"),bBr=o("funnel"),vBr=o(" \u2014 "),ree=a("a"),FBr=o("TFFunnelForSequenceClassification"),TBr=o(" (Funnel Transformer model)"),MBr=l(),s0=a("li"),w0e=a("strong"),EBr=o("gpt2"),CBr=o(" \u2014 "),tee=a("a"),wBr=o("TFGPT2ForSequenceClassification"),ABr=o(" (OpenAI GPT-2 model)"),LBr=l(),l0=a("li"),A0e=a("strong"),yBr=o("gptj"),xBr=o(" \u2014 "),aee=a("a"),$Br=o("TFGPTJForSequenceClassification"),kBr=o(" (GPT-J model)"),SBr=l(),i0=a("li"),L0e=a("strong"),RBr=o("layoutlm"),PBr=o(" \u2014 "),nee=a("a"),BBr=o("TFLayoutLMForSequenceClassification"),IBr=o(" (LayoutLM model)"),NBr=l(),d0=a("li"),y0e=a("strong"),qBr=o("longformer"),jBr=o(" \u2014 "),see=a("a"),DBr=o("TFLongformerForSequenceClassification"),GBr=o(" (Longformer model)"),OBr=l(),c0=a("li"),x0e=a("strong"),VBr=o("mobilebert"),XBr=o(" \u2014 "),lee=a("a"),zBr=o("TFMobileBertForSequenceClassification"),WBr=o(" (MobileBERT model)"),QBr=l(),m0=a("li"),$0e=a("strong"),UBr=o("mpnet"),HBr=o(" \u2014 "),iee=a("a"),JBr=o("TFMPNetForSequenceClassification"),YBr=o(" (MPNet model)"),KBr=l(),f0=a("li"),k0e=a("strong"),ZBr=o("openai-gpt"),eIr=o(" \u2014 "),dee=a("a"),oIr=o("TFOpenAIGPTForSequenceClassification"),rIr=o(" (OpenAI GPT model)"),tIr=l(),g0=a("li"),S0e=a("strong"),aIr=o("rembert"),nIr=o(" \u2014 "),cee=a("a"),sIr=o("TFRemBertForSequenceClassification"),lIr=o(" (RemBERT model)"),iIr=l(),h0=a("li"),R0e=a("strong"),dIr=o("roberta"),cIr=o(" \u2014 "),mee=a("a"),mIr=o("TFRobertaForSequenceClassification"),fIr=o(" (RoBERTa model)"),gIr=l(),u0=a("li"),P0e=a("strong"),hIr=o("roformer"),uIr=o(" \u2014 "),fee=a("a"),pIr=o("TFRoFormerForSequenceClassification"),_Ir=o(" (RoFormer model)"),bIr=l(),p0=a("li"),B0e=a("strong"),vIr=o("tapas"),FIr=o(" \u2014 "),gee=a("a"),TIr=o("TFTapasForSequenceClassification"),MIr=o(" (TAPAS model)"),EIr=l(),_0=a("li"),I0e=a("strong"),CIr=o("transfo-xl"),wIr=o(" \u2014 "),hee=a("a"),AIr=o("TFTransfoXLForSequenceClassification"),LIr=o(" (Transformer-XL model)"),yIr=l(),b0=a("li"),N0e=a("strong"),xIr=o("xlm"),$Ir=o(" \u2014 "),uee=a("a"),kIr=o("TFXLMForSequenceClassification"),SIr=o(" (XLM model)"),RIr=l(),v0=a("li"),q0e=a("strong"),PIr=o("xlm-roberta"),BIr=o(" \u2014 "),pee=a("a"),IIr=o("TFXLMRobertaForSequenceClassification"),NIr=o(" (XLM-RoBERTa model)"),qIr=l(),F0=a("li"),j0e=a("strong"),jIr=o("xlnet"),DIr=o(" \u2014 "),_ee=a("a"),GIr=o("TFXLNetForSequenceClassification"),OIr=o(" (XLNet model)"),VIr=l(),F(T0.$$.fragment),HUe=l(),Qc=a("h2"),M0=a("a"),D0e=a("span"),F(G$.$$.fragment),XIr=l(),G0e=a("span"),zIr=o("TFAutoModelForMultipleChoice"),JUe=l(),fr=a("div"),F(O$.$$.fragment),WIr=l(),Uc=a("p"),QIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bee=a("a"),UIr=o("from_pretrained()"),HIr=o(" class method or the "),vee=a("a"),JIr=o("from_config()"),YIr=o(` class
method.`),KIr=l(),V$=a("p"),ZIr=o("This class cannot be instantiated directly using "),O0e=a("code"),eNr=o("__init__()"),oNr=o(" (throws an error)."),rNr=l(),Wt=a("div"),F(X$.$$.fragment),tNr=l(),V0e=a("p"),aNr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),nNr=l(),Hc=a("p"),sNr=o(`Note:
Loading a model from its configuration file does `),X0e=a("strong"),lNr=o("not"),iNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fee=a("a"),dNr=o("from_pretrained()"),cNr=o(" to load the model weights."),mNr=l(),F(E0.$$.fragment),fNr=l(),Gr=a("div"),F(z$.$$.fragment),gNr=l(),z0e=a("p"),hNr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),uNr=l(),Cn=a("p"),pNr=o("The model class to instantiate is selected based on the "),W0e=a("code"),_Nr=o("model_type"),bNr=o(` property of the config object (either
passed as an argument or loaded from `),Q0e=a("code"),vNr=o("pretrained_model_name_or_path"),FNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U0e=a("code"),TNr=o("pretrained_model_name_or_path"),MNr=o(":"),ENr=l(),ve=a("ul"),C0=a("li"),H0e=a("strong"),CNr=o("albert"),wNr=o(" \u2014 "),Tee=a("a"),ANr=o("TFAlbertForMultipleChoice"),LNr=o(" (ALBERT model)"),yNr=l(),w0=a("li"),J0e=a("strong"),xNr=o("bert"),$Nr=o(" \u2014 "),Mee=a("a"),kNr=o("TFBertForMultipleChoice"),SNr=o(" (BERT model)"),RNr=l(),A0=a("li"),Y0e=a("strong"),PNr=o("camembert"),BNr=o(" \u2014 "),Eee=a("a"),INr=o("TFCamembertForMultipleChoice"),NNr=o(" (CamemBERT model)"),qNr=l(),L0=a("li"),K0e=a("strong"),jNr=o("convbert"),DNr=o(" \u2014 "),Cee=a("a"),GNr=o("TFConvBertForMultipleChoice"),ONr=o(" (ConvBERT model)"),VNr=l(),y0=a("li"),Z0e=a("strong"),XNr=o("distilbert"),zNr=o(" \u2014 "),wee=a("a"),WNr=o("TFDistilBertForMultipleChoice"),QNr=o(" (DistilBERT model)"),UNr=l(),x0=a("li"),ewe=a("strong"),HNr=o("electra"),JNr=o(" \u2014 "),Aee=a("a"),YNr=o("TFElectraForMultipleChoice"),KNr=o(" (ELECTRA model)"),ZNr=l(),$0=a("li"),owe=a("strong"),eqr=o("flaubert"),oqr=o(" \u2014 "),Lee=a("a"),rqr=o("TFFlaubertForMultipleChoice"),tqr=o(" (FlauBERT model)"),aqr=l(),k0=a("li"),rwe=a("strong"),nqr=o("funnel"),sqr=o(" \u2014 "),yee=a("a"),lqr=o("TFFunnelForMultipleChoice"),iqr=o(" (Funnel Transformer model)"),dqr=l(),S0=a("li"),twe=a("strong"),cqr=o("longformer"),mqr=o(" \u2014 "),xee=a("a"),fqr=o("TFLongformerForMultipleChoice"),gqr=o(" (Longformer model)"),hqr=l(),R0=a("li"),awe=a("strong"),uqr=o("mobilebert"),pqr=o(" \u2014 "),$ee=a("a"),_qr=o("TFMobileBertForMultipleChoice"),bqr=o(" (MobileBERT model)"),vqr=l(),P0=a("li"),nwe=a("strong"),Fqr=o("mpnet"),Tqr=o(" \u2014 "),kee=a("a"),Mqr=o("TFMPNetForMultipleChoice"),Eqr=o(" (MPNet model)"),Cqr=l(),B0=a("li"),swe=a("strong"),wqr=o("rembert"),Aqr=o(" \u2014 "),See=a("a"),Lqr=o("TFRemBertForMultipleChoice"),yqr=o(" (RemBERT model)"),xqr=l(),I0=a("li"),lwe=a("strong"),$qr=o("roberta"),kqr=o(" \u2014 "),Ree=a("a"),Sqr=o("TFRobertaForMultipleChoice"),Rqr=o(" (RoBERTa model)"),Pqr=l(),N0=a("li"),iwe=a("strong"),Bqr=o("roformer"),Iqr=o(" \u2014 "),Pee=a("a"),Nqr=o("TFRoFormerForMultipleChoice"),qqr=o(" (RoFormer model)"),jqr=l(),q0=a("li"),dwe=a("strong"),Dqr=o("xlm"),Gqr=o(" \u2014 "),Bee=a("a"),Oqr=o("TFXLMForMultipleChoice"),Vqr=o(" (XLM model)"),Xqr=l(),j0=a("li"),cwe=a("strong"),zqr=o("xlm-roberta"),Wqr=o(" \u2014 "),Iee=a("a"),Qqr=o("TFXLMRobertaForMultipleChoice"),Uqr=o(" (XLM-RoBERTa model)"),Hqr=l(),D0=a("li"),mwe=a("strong"),Jqr=o("xlnet"),Yqr=o(" \u2014 "),Nee=a("a"),Kqr=o("TFXLNetForMultipleChoice"),Zqr=o(" (XLNet model)"),ejr=l(),F(G0.$$.fragment),YUe=l(),Jc=a("h2"),O0=a("a"),fwe=a("span"),F(W$.$$.fragment),ojr=l(),gwe=a("span"),rjr=o("TFAutoModelForNextSentencePrediction"),KUe=l(),gr=a("div"),F(Q$.$$.fragment),tjr=l(),Yc=a("p"),ajr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),qee=a("a"),njr=o("from_pretrained()"),sjr=o(" class method or the "),jee=a("a"),ljr=o("from_config()"),ijr=o(` class
method.`),djr=l(),U$=a("p"),cjr=o("This class cannot be instantiated directly using "),hwe=a("code"),mjr=o("__init__()"),fjr=o(" (throws an error)."),gjr=l(),Qt=a("div"),F(H$.$$.fragment),hjr=l(),uwe=a("p"),ujr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),pjr=l(),Kc=a("p"),_jr=o(`Note:
Loading a model from its configuration file does `),pwe=a("strong"),bjr=o("not"),vjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dee=a("a"),Fjr=o("from_pretrained()"),Tjr=o(" to load the model weights."),Mjr=l(),F(V0.$$.fragment),Ejr=l(),Or=a("div"),F(J$.$$.fragment),Cjr=l(),_we=a("p"),wjr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Ajr=l(),wn=a("p"),Ljr=o("The model class to instantiate is selected based on the "),bwe=a("code"),yjr=o("model_type"),xjr=o(` property of the config object (either
passed as an argument or loaded from `),vwe=a("code"),$jr=o("pretrained_model_name_or_path"),kjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fwe=a("code"),Sjr=o("pretrained_model_name_or_path"),Rjr=o(":"),Pjr=l(),Y$=a("ul"),X0=a("li"),Twe=a("strong"),Bjr=o("bert"),Ijr=o(" \u2014 "),Gee=a("a"),Njr=o("TFBertForNextSentencePrediction"),qjr=o(" (BERT model)"),jjr=l(),z0=a("li"),Mwe=a("strong"),Djr=o("mobilebert"),Gjr=o(" \u2014 "),Oee=a("a"),Ojr=o("TFMobileBertForNextSentencePrediction"),Vjr=o(" (MobileBERT model)"),Xjr=l(),F(W0.$$.fragment),ZUe=l(),Zc=a("h2"),Q0=a("a"),Ewe=a("span"),F(K$.$$.fragment),zjr=l(),Cwe=a("span"),Wjr=o("TFAutoModelForTableQuestionAnswering"),eHe=l(),hr=a("div"),F(Z$.$$.fragment),Qjr=l(),em=a("p"),Ujr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Vee=a("a"),Hjr=o("from_pretrained()"),Jjr=o(" class method or the "),Xee=a("a"),Yjr=o("from_config()"),Kjr=o(` class
method.`),Zjr=l(),ek=a("p"),eDr=o("This class cannot be instantiated directly using "),wwe=a("code"),oDr=o("__init__()"),rDr=o(" (throws an error)."),tDr=l(),Ut=a("div"),F(ok.$$.fragment),aDr=l(),Awe=a("p"),nDr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),sDr=l(),om=a("p"),lDr=o(`Note:
Loading a model from its configuration file does `),Lwe=a("strong"),iDr=o("not"),dDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zee=a("a"),cDr=o("from_pretrained()"),mDr=o(" to load the model weights."),fDr=l(),F(U0.$$.fragment),gDr=l(),Vr=a("div"),F(rk.$$.fragment),hDr=l(),ywe=a("p"),uDr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),pDr=l(),An=a("p"),_Dr=o("The model class to instantiate is selected based on the "),xwe=a("code"),bDr=o("model_type"),vDr=o(` property of the config object (either
passed as an argument or loaded from `),$we=a("code"),FDr=o("pretrained_model_name_or_path"),TDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kwe=a("code"),MDr=o("pretrained_model_name_or_path"),EDr=o(":"),CDr=l(),Swe=a("ul"),H0=a("li"),Rwe=a("strong"),wDr=o("tapas"),ADr=o(" \u2014 "),Wee=a("a"),LDr=o("TFTapasForQuestionAnswering"),yDr=o(" (TAPAS model)"),xDr=l(),F(J0.$$.fragment),oHe=l(),rm=a("h2"),Y0=a("a"),Pwe=a("span"),F(tk.$$.fragment),$Dr=l(),Bwe=a("span"),kDr=o("TFAutoModelForTokenClassification"),rHe=l(),ur=a("div"),F(ak.$$.fragment),SDr=l(),tm=a("p"),RDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Qee=a("a"),PDr=o("from_pretrained()"),BDr=o(" class method or the "),Uee=a("a"),IDr=o("from_config()"),NDr=o(` class
method.`),qDr=l(),nk=a("p"),jDr=o("This class cannot be instantiated directly using "),Iwe=a("code"),DDr=o("__init__()"),GDr=o(" (throws an error)."),ODr=l(),Ht=a("div"),F(sk.$$.fragment),VDr=l(),Nwe=a("p"),XDr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zDr=l(),am=a("p"),WDr=o(`Note:
Loading a model from its configuration file does `),qwe=a("strong"),QDr=o("not"),UDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hee=a("a"),HDr=o("from_pretrained()"),JDr=o(" to load the model weights."),YDr=l(),F(K0.$$.fragment),KDr=l(),Xr=a("div"),F(lk.$$.fragment),ZDr=l(),jwe=a("p"),eGr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),oGr=l(),Ln=a("p"),rGr=o("The model class to instantiate is selected based on the "),Dwe=a("code"),tGr=o("model_type"),aGr=o(` property of the config object (either
passed as an argument or loaded from `),Gwe=a("code"),nGr=o("pretrained_model_name_or_path"),sGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Owe=a("code"),lGr=o("pretrained_model_name_or_path"),iGr=o(":"),dGr=l(),de=a("ul"),Z0=a("li"),Vwe=a("strong"),cGr=o("albert"),mGr=o(" \u2014 "),Jee=a("a"),fGr=o("TFAlbertForTokenClassification"),gGr=o(" (ALBERT model)"),hGr=l(),ew=a("li"),Xwe=a("strong"),uGr=o("bert"),pGr=o(" \u2014 "),Yee=a("a"),_Gr=o("TFBertForTokenClassification"),bGr=o(" (BERT model)"),vGr=l(),ow=a("li"),zwe=a("strong"),FGr=o("camembert"),TGr=o(" \u2014 "),Kee=a("a"),MGr=o("TFCamembertForTokenClassification"),EGr=o(" (CamemBERT model)"),CGr=l(),rw=a("li"),Wwe=a("strong"),wGr=o("convbert"),AGr=o(" \u2014 "),Zee=a("a"),LGr=o("TFConvBertForTokenClassification"),yGr=o(" (ConvBERT model)"),xGr=l(),tw=a("li"),Qwe=a("strong"),$Gr=o("deberta"),kGr=o(" \u2014 "),eoe=a("a"),SGr=o("TFDebertaForTokenClassification"),RGr=o(" (DeBERTa model)"),PGr=l(),aw=a("li"),Uwe=a("strong"),BGr=o("deberta-v2"),IGr=o(" \u2014 "),ooe=a("a"),NGr=o("TFDebertaV2ForTokenClassification"),qGr=o(" (DeBERTa-v2 model)"),jGr=l(),nw=a("li"),Hwe=a("strong"),DGr=o("distilbert"),GGr=o(" \u2014 "),roe=a("a"),OGr=o("TFDistilBertForTokenClassification"),VGr=o(" (DistilBERT model)"),XGr=l(),sw=a("li"),Jwe=a("strong"),zGr=o("electra"),WGr=o(" \u2014 "),toe=a("a"),QGr=o("TFElectraForTokenClassification"),UGr=o(" (ELECTRA model)"),HGr=l(),lw=a("li"),Ywe=a("strong"),JGr=o("flaubert"),YGr=o(" \u2014 "),aoe=a("a"),KGr=o("TFFlaubertForTokenClassification"),ZGr=o(" (FlauBERT model)"),eOr=l(),iw=a("li"),Kwe=a("strong"),oOr=o("funnel"),rOr=o(" \u2014 "),noe=a("a"),tOr=o("TFFunnelForTokenClassification"),aOr=o(" (Funnel Transformer model)"),nOr=l(),dw=a("li"),Zwe=a("strong"),sOr=o("layoutlm"),lOr=o(" \u2014 "),soe=a("a"),iOr=o("TFLayoutLMForTokenClassification"),dOr=o(" (LayoutLM model)"),cOr=l(),cw=a("li"),e6e=a("strong"),mOr=o("longformer"),fOr=o(" \u2014 "),loe=a("a"),gOr=o("TFLongformerForTokenClassification"),hOr=o(" (Longformer model)"),uOr=l(),mw=a("li"),o6e=a("strong"),pOr=o("mobilebert"),_Or=o(" \u2014 "),ioe=a("a"),bOr=o("TFMobileBertForTokenClassification"),vOr=o(" (MobileBERT model)"),FOr=l(),fw=a("li"),r6e=a("strong"),TOr=o("mpnet"),MOr=o(" \u2014 "),doe=a("a"),EOr=o("TFMPNetForTokenClassification"),COr=o(" (MPNet model)"),wOr=l(),gw=a("li"),t6e=a("strong"),AOr=o("rembert"),LOr=o(" \u2014 "),coe=a("a"),yOr=o("TFRemBertForTokenClassification"),xOr=o(" (RemBERT model)"),$Or=l(),hw=a("li"),a6e=a("strong"),kOr=o("roberta"),SOr=o(" \u2014 "),moe=a("a"),ROr=o("TFRobertaForTokenClassification"),POr=o(" (RoBERTa model)"),BOr=l(),uw=a("li"),n6e=a("strong"),IOr=o("roformer"),NOr=o(" \u2014 "),foe=a("a"),qOr=o("TFRoFormerForTokenClassification"),jOr=o(" (RoFormer model)"),DOr=l(),pw=a("li"),s6e=a("strong"),GOr=o("xlm"),OOr=o(" \u2014 "),goe=a("a"),VOr=o("TFXLMForTokenClassification"),XOr=o(" (XLM model)"),zOr=l(),_w=a("li"),l6e=a("strong"),WOr=o("xlm-roberta"),QOr=o(" \u2014 "),hoe=a("a"),UOr=o("TFXLMRobertaForTokenClassification"),HOr=o(" (XLM-RoBERTa model)"),JOr=l(),bw=a("li"),i6e=a("strong"),YOr=o("xlnet"),KOr=o(" \u2014 "),uoe=a("a"),ZOr=o("TFXLNetForTokenClassification"),eVr=o(" (XLNet model)"),oVr=l(),F(vw.$$.fragment),tHe=l(),nm=a("h2"),Fw=a("a"),d6e=a("span"),F(ik.$$.fragment),rVr=l(),c6e=a("span"),tVr=o("TFAutoModelForQuestionAnswering"),aHe=l(),pr=a("div"),F(dk.$$.fragment),aVr=l(),sm=a("p"),nVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),poe=a("a"),sVr=o("from_pretrained()"),lVr=o(" class method or the "),_oe=a("a"),iVr=o("from_config()"),dVr=o(` class
method.`),cVr=l(),ck=a("p"),mVr=o("This class cannot be instantiated directly using "),m6e=a("code"),fVr=o("__init__()"),gVr=o(" (throws an error)."),hVr=l(),Jt=a("div"),F(mk.$$.fragment),uVr=l(),f6e=a("p"),pVr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),_Vr=l(),lm=a("p"),bVr=o(`Note:
Loading a model from its configuration file does `),g6e=a("strong"),vVr=o("not"),FVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),boe=a("a"),TVr=o("from_pretrained()"),MVr=o(" to load the model weights."),EVr=l(),F(Tw.$$.fragment),CVr=l(),zr=a("div"),F(fk.$$.fragment),wVr=l(),h6e=a("p"),AVr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),LVr=l(),yn=a("p"),yVr=o("The model class to instantiate is selected based on the "),u6e=a("code"),xVr=o("model_type"),$Vr=o(` property of the config object (either
passed as an argument or loaded from `),p6e=a("code"),kVr=o("pretrained_model_name_or_path"),SVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_6e=a("code"),RVr=o("pretrained_model_name_or_path"),PVr=o(":"),BVr=l(),ce=a("ul"),Mw=a("li"),b6e=a("strong"),IVr=o("albert"),NVr=o(" \u2014 "),voe=a("a"),qVr=o("TFAlbertForQuestionAnswering"),jVr=o(" (ALBERT model)"),DVr=l(),Ew=a("li"),v6e=a("strong"),GVr=o("bert"),OVr=o(" \u2014 "),Foe=a("a"),VVr=o("TFBertForQuestionAnswering"),XVr=o(" (BERT model)"),zVr=l(),Cw=a("li"),F6e=a("strong"),WVr=o("camembert"),QVr=o(" \u2014 "),Toe=a("a"),UVr=o("TFCamembertForQuestionAnswering"),HVr=o(" (CamemBERT model)"),JVr=l(),ww=a("li"),T6e=a("strong"),YVr=o("convbert"),KVr=o(" \u2014 "),Moe=a("a"),ZVr=o("TFConvBertForQuestionAnswering"),eXr=o(" (ConvBERT model)"),oXr=l(),Aw=a("li"),M6e=a("strong"),rXr=o("deberta"),tXr=o(" \u2014 "),Eoe=a("a"),aXr=o("TFDebertaForQuestionAnswering"),nXr=o(" (DeBERTa model)"),sXr=l(),Lw=a("li"),E6e=a("strong"),lXr=o("deberta-v2"),iXr=o(" \u2014 "),Coe=a("a"),dXr=o("TFDebertaV2ForQuestionAnswering"),cXr=o(" (DeBERTa-v2 model)"),mXr=l(),yw=a("li"),C6e=a("strong"),fXr=o("distilbert"),gXr=o(" \u2014 "),woe=a("a"),hXr=o("TFDistilBertForQuestionAnswering"),uXr=o(" (DistilBERT model)"),pXr=l(),xw=a("li"),w6e=a("strong"),_Xr=o("electra"),bXr=o(" \u2014 "),Aoe=a("a"),vXr=o("TFElectraForQuestionAnswering"),FXr=o(" (ELECTRA model)"),TXr=l(),$w=a("li"),A6e=a("strong"),MXr=o("flaubert"),EXr=o(" \u2014 "),Loe=a("a"),CXr=o("TFFlaubertForQuestionAnsweringSimple"),wXr=o(" (FlauBERT model)"),AXr=l(),kw=a("li"),L6e=a("strong"),LXr=o("funnel"),yXr=o(" \u2014 "),yoe=a("a"),xXr=o("TFFunnelForQuestionAnswering"),$Xr=o(" (Funnel Transformer model)"),kXr=l(),Sw=a("li"),y6e=a("strong"),SXr=o("gptj"),RXr=o(" \u2014 "),xoe=a("a"),PXr=o("TFGPTJForQuestionAnswering"),BXr=o(" (GPT-J model)"),IXr=l(),Rw=a("li"),x6e=a("strong"),NXr=o("longformer"),qXr=o(" \u2014 "),$oe=a("a"),jXr=o("TFLongformerForQuestionAnswering"),DXr=o(" (Longformer model)"),GXr=l(),Pw=a("li"),$6e=a("strong"),OXr=o("mobilebert"),VXr=o(" \u2014 "),koe=a("a"),XXr=o("TFMobileBertForQuestionAnswering"),zXr=o(" (MobileBERT model)"),WXr=l(),Bw=a("li"),k6e=a("strong"),QXr=o("mpnet"),UXr=o(" \u2014 "),Soe=a("a"),HXr=o("TFMPNetForQuestionAnswering"),JXr=o(" (MPNet model)"),YXr=l(),Iw=a("li"),S6e=a("strong"),KXr=o("rembert"),ZXr=o(" \u2014 "),Roe=a("a"),ezr=o("TFRemBertForQuestionAnswering"),ozr=o(" (RemBERT model)"),rzr=l(),Nw=a("li"),R6e=a("strong"),tzr=o("roberta"),azr=o(" \u2014 "),Poe=a("a"),nzr=o("TFRobertaForQuestionAnswering"),szr=o(" (RoBERTa model)"),lzr=l(),qw=a("li"),P6e=a("strong"),izr=o("roformer"),dzr=o(" \u2014 "),Boe=a("a"),czr=o("TFRoFormerForQuestionAnswering"),mzr=o(" (RoFormer model)"),fzr=l(),jw=a("li"),B6e=a("strong"),gzr=o("xlm"),hzr=o(" \u2014 "),Ioe=a("a"),uzr=o("TFXLMForQuestionAnsweringSimple"),pzr=o(" (XLM model)"),_zr=l(),Dw=a("li"),I6e=a("strong"),bzr=o("xlm-roberta"),vzr=o(" \u2014 "),Noe=a("a"),Fzr=o("TFXLMRobertaForQuestionAnswering"),Tzr=o(" (XLM-RoBERTa model)"),Mzr=l(),Gw=a("li"),N6e=a("strong"),Ezr=o("xlnet"),Czr=o(" \u2014 "),qoe=a("a"),wzr=o("TFXLNetForQuestionAnsweringSimple"),Azr=o(" (XLNet model)"),Lzr=l(),F(Ow.$$.fragment),nHe=l(),im=a("h2"),Vw=a("a"),q6e=a("span"),F(gk.$$.fragment),yzr=l(),j6e=a("span"),xzr=o("TFAutoModelForVision2Seq"),sHe=l(),_r=a("div"),F(hk.$$.fragment),$zr=l(),dm=a("p"),kzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),joe=a("a"),Szr=o("from_pretrained()"),Rzr=o(" class method or the "),Doe=a("a"),Pzr=o("from_config()"),Bzr=o(` class
method.`),Izr=l(),uk=a("p"),Nzr=o("This class cannot be instantiated directly using "),D6e=a("code"),qzr=o("__init__()"),jzr=o(" (throws an error)."),Dzr=l(),Yt=a("div"),F(pk.$$.fragment),Gzr=l(),G6e=a("p"),Ozr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Vzr=l(),cm=a("p"),Xzr=o(`Note:
Loading a model from its configuration file does `),O6e=a("strong"),zzr=o("not"),Wzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Goe=a("a"),Qzr=o("from_pretrained()"),Uzr=o(" to load the model weights."),Hzr=l(),F(Xw.$$.fragment),Jzr=l(),Wr=a("div"),F(_k.$$.fragment),Yzr=l(),V6e=a("p"),Kzr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Zzr=l(),xn=a("p"),eWr=o("The model class to instantiate is selected based on the "),X6e=a("code"),oWr=o("model_type"),rWr=o(` property of the config object (either
passed as an argument or loaded from `),z6e=a("code"),tWr=o("pretrained_model_name_or_path"),aWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W6e=a("code"),nWr=o("pretrained_model_name_or_path"),sWr=o(":"),lWr=l(),Q6e=a("ul"),zw=a("li"),U6e=a("strong"),iWr=o("vision-encoder-decoder"),dWr=o(" \u2014 "),Ooe=a("a"),cWr=o("TFVisionEncoderDecoderModel"),mWr=o(" (Vision Encoder decoder model)"),fWr=l(),F(Ww.$$.fragment),lHe=l(),mm=a("h2"),Qw=a("a"),H6e=a("span"),F(bk.$$.fragment),gWr=l(),J6e=a("span"),hWr=o("TFAutoModelForSpeechSeq2Seq"),iHe=l(),br=a("div"),F(vk.$$.fragment),uWr=l(),fm=a("p"),pWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Voe=a("a"),_Wr=o("from_pretrained()"),bWr=o(" class method or the "),Xoe=a("a"),vWr=o("from_config()"),FWr=o(` class
method.`),TWr=l(),Fk=a("p"),MWr=o("This class cannot be instantiated directly using "),Y6e=a("code"),EWr=o("__init__()"),CWr=o(" (throws an error)."),wWr=l(),Kt=a("div"),F(Tk.$$.fragment),AWr=l(),K6e=a("p"),LWr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),yWr=l(),gm=a("p"),xWr=o(`Note:
Loading a model from its configuration file does `),Z6e=a("strong"),$Wr=o("not"),kWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zoe=a("a"),SWr=o("from_pretrained()"),RWr=o(" to load the model weights."),PWr=l(),F(Uw.$$.fragment),BWr=l(),Qr=a("div"),F(Mk.$$.fragment),IWr=l(),eAe=a("p"),NWr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),qWr=l(),$n=a("p"),jWr=o("The model class to instantiate is selected based on the "),oAe=a("code"),DWr=o("model_type"),GWr=o(` property of the config object (either
passed as an argument or loaded from `),rAe=a("code"),OWr=o("pretrained_model_name_or_path"),VWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tAe=a("code"),XWr=o("pretrained_model_name_or_path"),zWr=o(":"),WWr=l(),aAe=a("ul"),Hw=a("li"),nAe=a("strong"),QWr=o("speech_to_text"),UWr=o(" \u2014 "),Woe=a("a"),HWr=o("TFSpeech2TextForConditionalGeneration"),JWr=o(" (Speech2Text model)"),YWr=l(),F(Jw.$$.fragment),dHe=l(),hm=a("h2"),Yw=a("a"),sAe=a("span"),F(Ek.$$.fragment),KWr=l(),lAe=a("span"),ZWr=o("FlaxAutoModel"),cHe=l(),vr=a("div"),F(Ck.$$.fragment),eQr=l(),um=a("p"),oQr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Qoe=a("a"),rQr=o("from_pretrained()"),tQr=o(" class method or the "),Uoe=a("a"),aQr=o("from_config()"),nQr=o(` class
method.`),sQr=l(),wk=a("p"),lQr=o("This class cannot be instantiated directly using "),iAe=a("code"),iQr=o("__init__()"),dQr=o(" (throws an error)."),cQr=l(),Zt=a("div"),F(Ak.$$.fragment),mQr=l(),dAe=a("p"),fQr=o("Instantiates one of the base model classes of the library from a configuration."),gQr=l(),pm=a("p"),hQr=o(`Note:
Loading a model from its configuration file does `),cAe=a("strong"),uQr=o("not"),pQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hoe=a("a"),_Qr=o("from_pretrained()"),bQr=o(" to load the model weights."),vQr=l(),F(Kw.$$.fragment),FQr=l(),Ur=a("div"),F(Lk.$$.fragment),TQr=l(),mAe=a("p"),MQr=o("Instantiate one of the base model classes of the library from a pretrained model."),EQr=l(),kn=a("p"),CQr=o("The model class to instantiate is selected based on the "),fAe=a("code"),wQr=o("model_type"),AQr=o(` property of the config object (either
passed as an argument or loaded from `),gAe=a("code"),LQr=o("pretrained_model_name_or_path"),yQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hAe=a("code"),xQr=o("pretrained_model_name_or_path"),$Qr=o(":"),kQr=l(),re=a("ul"),Zw=a("li"),uAe=a("strong"),SQr=o("albert"),RQr=o(" \u2014 "),Joe=a("a"),PQr=o("FlaxAlbertModel"),BQr=o(" (ALBERT model)"),IQr=l(),e6=a("li"),pAe=a("strong"),NQr=o("bart"),qQr=o(" \u2014 "),Yoe=a("a"),jQr=o("FlaxBartModel"),DQr=o(" (BART model)"),GQr=l(),o6=a("li"),_Ae=a("strong"),OQr=o("beit"),VQr=o(" \u2014 "),Koe=a("a"),XQr=o("FlaxBeitModel"),zQr=o(" (BEiT model)"),WQr=l(),r6=a("li"),bAe=a("strong"),QQr=o("bert"),UQr=o(" \u2014 "),Zoe=a("a"),HQr=o("FlaxBertModel"),JQr=o(" (BERT model)"),YQr=l(),t6=a("li"),vAe=a("strong"),KQr=o("big_bird"),ZQr=o(" \u2014 "),ere=a("a"),eUr=o("FlaxBigBirdModel"),oUr=o(" (BigBird model)"),rUr=l(),a6=a("li"),FAe=a("strong"),tUr=o("blenderbot"),aUr=o(" \u2014 "),ore=a("a"),nUr=o("FlaxBlenderbotModel"),sUr=o(" (Blenderbot model)"),lUr=l(),n6=a("li"),TAe=a("strong"),iUr=o("blenderbot-small"),dUr=o(" \u2014 "),rre=a("a"),cUr=o("FlaxBlenderbotSmallModel"),mUr=o(" (BlenderbotSmall model)"),fUr=l(),s6=a("li"),MAe=a("strong"),gUr=o("clip"),hUr=o(" \u2014 "),tre=a("a"),uUr=o("FlaxCLIPModel"),pUr=o(" (CLIP model)"),_Ur=l(),l6=a("li"),EAe=a("strong"),bUr=o("distilbert"),vUr=o(" \u2014 "),are=a("a"),FUr=o("FlaxDistilBertModel"),TUr=o(" (DistilBERT model)"),MUr=l(),i6=a("li"),CAe=a("strong"),EUr=o("electra"),CUr=o(" \u2014 "),nre=a("a"),wUr=o("FlaxElectraModel"),AUr=o(" (ELECTRA model)"),LUr=l(),d6=a("li"),wAe=a("strong"),yUr=o("gpt2"),xUr=o(" \u2014 "),sre=a("a"),$Ur=o("FlaxGPT2Model"),kUr=o(" (OpenAI GPT-2 model)"),SUr=l(),c6=a("li"),AAe=a("strong"),RUr=o("gpt_neo"),PUr=o(" \u2014 "),lre=a("a"),BUr=o("FlaxGPTNeoModel"),IUr=o(" (GPT Neo model)"),NUr=l(),m6=a("li"),LAe=a("strong"),qUr=o("gptj"),jUr=o(" \u2014 "),ire=a("a"),DUr=o("FlaxGPTJModel"),GUr=o(" (GPT-J model)"),OUr=l(),f6=a("li"),yAe=a("strong"),VUr=o("longt5"),XUr=o(" \u2014 "),dre=a("a"),zUr=o("FlaxLongT5Model"),WUr=o(" (LongT5 model)"),QUr=l(),g6=a("li"),xAe=a("strong"),UUr=o("marian"),HUr=o(" \u2014 "),cre=a("a"),JUr=o("FlaxMarianModel"),YUr=o(" (Marian model)"),KUr=l(),h6=a("li"),$Ae=a("strong"),ZUr=o("mbart"),eHr=o(" \u2014 "),mre=a("a"),oHr=o("FlaxMBartModel"),rHr=o(" (mBART model)"),tHr=l(),u6=a("li"),kAe=a("strong"),aHr=o("mt5"),nHr=o(" \u2014 "),fre=a("a"),sHr=o("FlaxMT5Model"),lHr=o(" (MT5 model)"),iHr=l(),p6=a("li"),SAe=a("strong"),dHr=o("opt"),cHr=o(" \u2014 "),gre=a("a"),mHr=o("FlaxOPTModel"),fHr=o(" (OPT model)"),gHr=l(),_6=a("li"),RAe=a("strong"),hHr=o("pegasus"),uHr=o(" \u2014 "),hre=a("a"),pHr=o("FlaxPegasusModel"),_Hr=o(" (Pegasus model)"),bHr=l(),b6=a("li"),PAe=a("strong"),vHr=o("roberta"),FHr=o(" \u2014 "),ure=a("a"),THr=o("FlaxRobertaModel"),MHr=o(" (RoBERTa model)"),EHr=l(),v6=a("li"),BAe=a("strong"),CHr=o("roformer"),wHr=o(" \u2014 "),pre=a("a"),AHr=o("FlaxRoFormerModel"),LHr=o(" (RoFormer model)"),yHr=l(),F6=a("li"),IAe=a("strong"),xHr=o("t5"),$Hr=o(" \u2014 "),_re=a("a"),kHr=o("FlaxT5Model"),SHr=o(" (T5 model)"),RHr=l(),T6=a("li"),NAe=a("strong"),PHr=o("vision-text-dual-encoder"),BHr=o(" \u2014 "),bre=a("a"),IHr=o("FlaxVisionTextDualEncoderModel"),NHr=o(" (VisionTextDualEncoder model)"),qHr=l(),M6=a("li"),qAe=a("strong"),jHr=o("vit"),DHr=o(" \u2014 "),vre=a("a"),GHr=o("FlaxViTModel"),OHr=o(" (ViT model)"),VHr=l(),E6=a("li"),jAe=a("strong"),XHr=o("wav2vec2"),zHr=o(" \u2014 "),Fre=a("a"),WHr=o("FlaxWav2Vec2Model"),QHr=o(" (Wav2Vec2 model)"),UHr=l(),C6=a("li"),DAe=a("strong"),HHr=o("xglm"),JHr=o(" \u2014 "),Tre=a("a"),YHr=o("FlaxXGLMModel"),KHr=o(" (XGLM model)"),ZHr=l(),w6=a("li"),GAe=a("strong"),eJr=o("xlm-roberta"),oJr=o(" \u2014 "),Mre=a("a"),rJr=o("FlaxXLMRobertaModel"),tJr=o(" (XLM-RoBERTa model)"),aJr=l(),F(A6.$$.fragment),mHe=l(),_m=a("h2"),L6=a("a"),OAe=a("span"),F(yk.$$.fragment),nJr=l(),VAe=a("span"),sJr=o("FlaxAutoModelForCausalLM"),fHe=l(),Fr=a("div"),F(xk.$$.fragment),lJr=l(),bm=a("p"),iJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Ere=a("a"),dJr=o("from_pretrained()"),cJr=o(" class method or the "),Cre=a("a"),mJr=o("from_config()"),fJr=o(` class
method.`),gJr=l(),$k=a("p"),hJr=o("This class cannot be instantiated directly using "),XAe=a("code"),uJr=o("__init__()"),pJr=o(" (throws an error)."),_Jr=l(),ea=a("div"),F(kk.$$.fragment),bJr=l(),zAe=a("p"),vJr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),FJr=l(),vm=a("p"),TJr=o(`Note:
Loading a model from its configuration file does `),WAe=a("strong"),MJr=o("not"),EJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wre=a("a"),CJr=o("from_pretrained()"),wJr=o(" to load the model weights."),AJr=l(),F(y6.$$.fragment),LJr=l(),Hr=a("div"),F(Sk.$$.fragment),yJr=l(),QAe=a("p"),xJr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$Jr=l(),Sn=a("p"),kJr=o("The model class to instantiate is selected based on the "),UAe=a("code"),SJr=o("model_type"),RJr=o(` property of the config object (either
passed as an argument or loaded from `),HAe=a("code"),PJr=o("pretrained_model_name_or_path"),BJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JAe=a("code"),IJr=o("pretrained_model_name_or_path"),NJr=o(":"),qJr=l(),xe=a("ul"),x6=a("li"),YAe=a("strong"),jJr=o("bart"),DJr=o(" \u2014 "),Are=a("a"),GJr=o("FlaxBartForCausalLM"),OJr=o(" (BART model)"),VJr=l(),$6=a("li"),KAe=a("strong"),XJr=o("bert"),zJr=o(" \u2014 "),Lre=a("a"),WJr=o("FlaxBertForCausalLM"),QJr=o(" (BERT model)"),UJr=l(),k6=a("li"),ZAe=a("strong"),HJr=o("big_bird"),JJr=o(" \u2014 "),yre=a("a"),YJr=o("FlaxBigBirdForCausalLM"),KJr=o(" (BigBird model)"),ZJr=l(),S6=a("li"),e7e=a("strong"),eYr=o("electra"),oYr=o(" \u2014 "),xre=a("a"),rYr=o("FlaxElectraForCausalLM"),tYr=o(" (ELECTRA model)"),aYr=l(),R6=a("li"),o7e=a("strong"),nYr=o("gpt2"),sYr=o(" \u2014 "),$re=a("a"),lYr=o("FlaxGPT2LMHeadModel"),iYr=o(" (OpenAI GPT-2 model)"),dYr=l(),P6=a("li"),r7e=a("strong"),cYr=o("gpt_neo"),mYr=o(" \u2014 "),kre=a("a"),fYr=o("FlaxGPTNeoForCausalLM"),gYr=o(" (GPT Neo model)"),hYr=l(),B6=a("li"),t7e=a("strong"),uYr=o("gptj"),pYr=o(" \u2014 "),Sre=a("a"),_Yr=o("FlaxGPTJForCausalLM"),bYr=o(" (GPT-J model)"),vYr=l(),I6=a("li"),a7e=a("strong"),FYr=o("opt"),TYr=o(" \u2014 "),Rre=a("a"),MYr=o("FlaxOPTForCausalLM"),EYr=o(" (OPT model)"),CYr=l(),N6=a("li"),n7e=a("strong"),wYr=o("roberta"),AYr=o(" \u2014 "),Pre=a("a"),LYr=o("FlaxRobertaForCausalLM"),yYr=o(" (RoBERTa model)"),xYr=l(),q6=a("li"),s7e=a("strong"),$Yr=o("xglm"),kYr=o(" \u2014 "),Bre=a("a"),SYr=o("FlaxXGLMForCausalLM"),RYr=o(" (XGLM model)"),PYr=l(),F(j6.$$.fragment),gHe=l(),Fm=a("h2"),D6=a("a"),l7e=a("span"),F(Rk.$$.fragment),BYr=l(),i7e=a("span"),IYr=o("FlaxAutoModelForPreTraining"),hHe=l(),Tr=a("div"),F(Pk.$$.fragment),NYr=l(),Tm=a("p"),qYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Ire=a("a"),jYr=o("from_pretrained()"),DYr=o(" class method or the "),Nre=a("a"),GYr=o("from_config()"),OYr=o(` class
method.`),VYr=l(),Bk=a("p"),XYr=o("This class cannot be instantiated directly using "),d7e=a("code"),zYr=o("__init__()"),WYr=o(" (throws an error)."),QYr=l(),oa=a("div"),F(Ik.$$.fragment),UYr=l(),c7e=a("p"),HYr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),JYr=l(),Mm=a("p"),YYr=o(`Note:
Loading a model from its configuration file does `),m7e=a("strong"),KYr=o("not"),ZYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qre=a("a"),eKr=o("from_pretrained()"),oKr=o(" to load the model weights."),rKr=l(),F(G6.$$.fragment),tKr=l(),Jr=a("div"),F(Nk.$$.fragment),aKr=l(),f7e=a("p"),nKr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),sKr=l(),Rn=a("p"),lKr=o("The model class to instantiate is selected based on the "),g7e=a("code"),iKr=o("model_type"),dKr=o(` property of the config object (either
passed as an argument or loaded from `),h7e=a("code"),cKr=o("pretrained_model_name_or_path"),mKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u7e=a("code"),fKr=o("pretrained_model_name_or_path"),gKr=o(":"),hKr=l(),Ee=a("ul"),O6=a("li"),p7e=a("strong"),uKr=o("albert"),pKr=o(" \u2014 "),jre=a("a"),_Kr=o("FlaxAlbertForPreTraining"),bKr=o(" (ALBERT model)"),vKr=l(),V6=a("li"),_7e=a("strong"),FKr=o("bart"),TKr=o(" \u2014 "),Dre=a("a"),MKr=o("FlaxBartForConditionalGeneration"),EKr=o(" (BART model)"),CKr=l(),X6=a("li"),b7e=a("strong"),wKr=o("bert"),AKr=o(" \u2014 "),Gre=a("a"),LKr=o("FlaxBertForPreTraining"),yKr=o(" (BERT model)"),xKr=l(),z6=a("li"),v7e=a("strong"),$Kr=o("big_bird"),kKr=o(" \u2014 "),Ore=a("a"),SKr=o("FlaxBigBirdForPreTraining"),RKr=o(" (BigBird model)"),PKr=l(),W6=a("li"),F7e=a("strong"),BKr=o("electra"),IKr=o(" \u2014 "),Vre=a("a"),NKr=o("FlaxElectraForPreTraining"),qKr=o(" (ELECTRA model)"),jKr=l(),Q6=a("li"),T7e=a("strong"),DKr=o("longt5"),GKr=o(" \u2014 "),Xre=a("a"),OKr=o("FlaxLongT5ForConditionalGeneration"),VKr=o(" (LongT5 model)"),XKr=l(),U6=a("li"),M7e=a("strong"),zKr=o("mbart"),WKr=o(" \u2014 "),zre=a("a"),QKr=o("FlaxMBartForConditionalGeneration"),UKr=o(" (mBART model)"),HKr=l(),H6=a("li"),E7e=a("strong"),JKr=o("mt5"),YKr=o(" \u2014 "),Wre=a("a"),KKr=o("FlaxMT5ForConditionalGeneration"),ZKr=o(" (MT5 model)"),eZr=l(),J6=a("li"),C7e=a("strong"),oZr=o("roberta"),rZr=o(" \u2014 "),Qre=a("a"),tZr=o("FlaxRobertaForMaskedLM"),aZr=o(" (RoBERTa model)"),nZr=l(),Y6=a("li"),w7e=a("strong"),sZr=o("roformer"),lZr=o(" \u2014 "),Ure=a("a"),iZr=o("FlaxRoFormerForMaskedLM"),dZr=o(" (RoFormer model)"),cZr=l(),K6=a("li"),A7e=a("strong"),mZr=o("t5"),fZr=o(" \u2014 "),Hre=a("a"),gZr=o("FlaxT5ForConditionalGeneration"),hZr=o(" (T5 model)"),uZr=l(),Z6=a("li"),L7e=a("strong"),pZr=o("wav2vec2"),_Zr=o(" \u2014 "),Jre=a("a"),bZr=o("FlaxWav2Vec2ForPreTraining"),vZr=o(" (Wav2Vec2 model)"),FZr=l(),eA=a("li"),y7e=a("strong"),TZr=o("xlm-roberta"),MZr=o(" \u2014 "),Yre=a("a"),EZr=o("FlaxXLMRobertaForMaskedLM"),CZr=o(" (XLM-RoBERTa model)"),wZr=l(),F(oA.$$.fragment),uHe=l(),Em=a("h2"),rA=a("a"),x7e=a("span"),F(qk.$$.fragment),AZr=l(),$7e=a("span"),LZr=o("FlaxAutoModelForMaskedLM"),pHe=l(),Mr=a("div"),F(jk.$$.fragment),yZr=l(),Cm=a("p"),xZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Kre=a("a"),$Zr=o("from_pretrained()"),kZr=o(" class method or the "),Zre=a("a"),SZr=o("from_config()"),RZr=o(` class
method.`),PZr=l(),Dk=a("p"),BZr=o("This class cannot be instantiated directly using "),k7e=a("code"),IZr=o("__init__()"),NZr=o(" (throws an error)."),qZr=l(),ra=a("div"),F(Gk.$$.fragment),jZr=l(),S7e=a("p"),DZr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),GZr=l(),wm=a("p"),OZr=o(`Note:
Loading a model from its configuration file does `),R7e=a("strong"),VZr=o("not"),XZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ete=a("a"),zZr=o("from_pretrained()"),WZr=o(" to load the model weights."),QZr=l(),F(tA.$$.fragment),UZr=l(),Yr=a("div"),F(Ok.$$.fragment),HZr=l(),P7e=a("p"),JZr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),YZr=l(),Pn=a("p"),KZr=o("The model class to instantiate is selected based on the "),B7e=a("code"),ZZr=o("model_type"),eet=o(` property of the config object (either
passed as an argument or loaded from `),I7e=a("code"),oet=o("pretrained_model_name_or_path"),ret=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N7e=a("code"),tet=o("pretrained_model_name_or_path"),aet=o(":"),net=l(),$e=a("ul"),aA=a("li"),q7e=a("strong"),set=o("albert"),iet=o(" \u2014 "),ote=a("a"),det=o("FlaxAlbertForMaskedLM"),cet=o(" (ALBERT model)"),met=l(),nA=a("li"),j7e=a("strong"),fet=o("bart"),get=o(" \u2014 "),rte=a("a"),het=o("FlaxBartForConditionalGeneration"),uet=o(" (BART model)"),pet=l(),sA=a("li"),D7e=a("strong"),_et=o("bert"),bet=o(" \u2014 "),tte=a("a"),vet=o("FlaxBertForMaskedLM"),Fet=o(" (BERT model)"),Tet=l(),lA=a("li"),G7e=a("strong"),Met=o("big_bird"),Eet=o(" \u2014 "),ate=a("a"),Cet=o("FlaxBigBirdForMaskedLM"),wet=o(" (BigBird model)"),Aet=l(),iA=a("li"),O7e=a("strong"),Let=o("distilbert"),yet=o(" \u2014 "),nte=a("a"),xet=o("FlaxDistilBertForMaskedLM"),$et=o(" (DistilBERT model)"),ket=l(),dA=a("li"),V7e=a("strong"),Set=o("electra"),Ret=o(" \u2014 "),ste=a("a"),Pet=o("FlaxElectraForMaskedLM"),Bet=o(" (ELECTRA model)"),Iet=l(),cA=a("li"),X7e=a("strong"),Net=o("mbart"),qet=o(" \u2014 "),lte=a("a"),jet=o("FlaxMBartForConditionalGeneration"),Det=o(" (mBART model)"),Get=l(),mA=a("li"),z7e=a("strong"),Oet=o("roberta"),Vet=o(" \u2014 "),ite=a("a"),Xet=o("FlaxRobertaForMaskedLM"),zet=o(" (RoBERTa model)"),Wet=l(),fA=a("li"),W7e=a("strong"),Qet=o("roformer"),Uet=o(" \u2014 "),dte=a("a"),Het=o("FlaxRoFormerForMaskedLM"),Jet=o(" (RoFormer model)"),Yet=l(),gA=a("li"),Q7e=a("strong"),Ket=o("xlm-roberta"),Zet=o(" \u2014 "),cte=a("a"),eot=o("FlaxXLMRobertaForMaskedLM"),oot=o(" (XLM-RoBERTa model)"),rot=l(),F(hA.$$.fragment),_He=l(),Am=a("h2"),uA=a("a"),U7e=a("span"),F(Vk.$$.fragment),tot=l(),H7e=a("span"),aot=o("FlaxAutoModelForSeq2SeqLM"),bHe=l(),Er=a("div"),F(Xk.$$.fragment),not=l(),Lm=a("p"),sot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),mte=a("a"),lot=o("from_pretrained()"),iot=o(" class method or the "),fte=a("a"),dot=o("from_config()"),cot=o(` class
method.`),mot=l(),zk=a("p"),fot=o("This class cannot be instantiated directly using "),J7e=a("code"),got=o("__init__()"),hot=o(" (throws an error)."),uot=l(),ta=a("div"),F(Wk.$$.fragment),pot=l(),Y7e=a("p"),_ot=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),bot=l(),ym=a("p"),vot=o(`Note:
Loading a model from its configuration file does `),K7e=a("strong"),Fot=o("not"),Tot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gte=a("a"),Mot=o("from_pretrained()"),Eot=o(" to load the model weights."),Cot=l(),F(pA.$$.fragment),wot=l(),Kr=a("div"),F(Qk.$$.fragment),Aot=l(),Z7e=a("p"),Lot=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),yot=l(),Bn=a("p"),xot=o("The model class to instantiate is selected based on the "),eLe=a("code"),$ot=o("model_type"),kot=o(` property of the config object (either
passed as an argument or loaded from `),oLe=a("code"),Sot=o("pretrained_model_name_or_path"),Rot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rLe=a("code"),Pot=o("pretrained_model_name_or_path"),Bot=o(":"),Iot=l(),ke=a("ul"),_A=a("li"),tLe=a("strong"),Not=o("bart"),qot=o(" \u2014 "),hte=a("a"),jot=o("FlaxBartForConditionalGeneration"),Dot=o(" (BART model)"),Got=l(),bA=a("li"),aLe=a("strong"),Oot=o("blenderbot"),Vot=o(" \u2014 "),ute=a("a"),Xot=o("FlaxBlenderbotForConditionalGeneration"),zot=o(" (Blenderbot model)"),Wot=l(),vA=a("li"),nLe=a("strong"),Qot=o("blenderbot-small"),Uot=o(" \u2014 "),pte=a("a"),Hot=o("FlaxBlenderbotSmallForConditionalGeneration"),Jot=o(" (BlenderbotSmall model)"),Yot=l(),FA=a("li"),sLe=a("strong"),Kot=o("encoder-decoder"),Zot=o(" \u2014 "),_te=a("a"),ert=o("FlaxEncoderDecoderModel"),ort=o(" (Encoder decoder model)"),rrt=l(),TA=a("li"),lLe=a("strong"),trt=o("longt5"),art=o(" \u2014 "),bte=a("a"),nrt=o("FlaxLongT5ForConditionalGeneration"),srt=o(" (LongT5 model)"),lrt=l(),MA=a("li"),iLe=a("strong"),irt=o("marian"),drt=o(" \u2014 "),vte=a("a"),crt=o("FlaxMarianMTModel"),mrt=o(" (Marian model)"),frt=l(),EA=a("li"),dLe=a("strong"),grt=o("mbart"),hrt=o(" \u2014 "),Fte=a("a"),urt=o("FlaxMBartForConditionalGeneration"),prt=o(" (mBART model)"),_rt=l(),CA=a("li"),cLe=a("strong"),brt=o("mt5"),vrt=o(" \u2014 "),Tte=a("a"),Frt=o("FlaxMT5ForConditionalGeneration"),Trt=o(" (MT5 model)"),Mrt=l(),wA=a("li"),mLe=a("strong"),Ert=o("pegasus"),Crt=o(" \u2014 "),Mte=a("a"),wrt=o("FlaxPegasusForConditionalGeneration"),Art=o(" (Pegasus model)"),Lrt=l(),AA=a("li"),fLe=a("strong"),yrt=o("t5"),xrt=o(" \u2014 "),Ete=a("a"),$rt=o("FlaxT5ForConditionalGeneration"),krt=o(" (T5 model)"),Srt=l(),F(LA.$$.fragment),vHe=l(),xm=a("h2"),yA=a("a"),gLe=a("span"),F(Uk.$$.fragment),Rrt=l(),hLe=a("span"),Prt=o("FlaxAutoModelForSequenceClassification"),FHe=l(),Cr=a("div"),F(Hk.$$.fragment),Brt=l(),$m=a("p"),Irt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Cte=a("a"),Nrt=o("from_pretrained()"),qrt=o(" class method or the "),wte=a("a"),jrt=o("from_config()"),Drt=o(` class
method.`),Grt=l(),Jk=a("p"),Ort=o("This class cannot be instantiated directly using "),uLe=a("code"),Vrt=o("__init__()"),Xrt=o(" (throws an error)."),zrt=l(),aa=a("div"),F(Yk.$$.fragment),Wrt=l(),pLe=a("p"),Qrt=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Urt=l(),km=a("p"),Hrt=o(`Note:
Loading a model from its configuration file does `),_Le=a("strong"),Jrt=o("not"),Yrt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ate=a("a"),Krt=o("from_pretrained()"),Zrt=o(" to load the model weights."),ett=l(),F(xA.$$.fragment),ott=l(),Zr=a("div"),F(Kk.$$.fragment),rtt=l(),bLe=a("p"),ttt=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),att=l(),In=a("p"),ntt=o("The model class to instantiate is selected based on the "),vLe=a("code"),stt=o("model_type"),ltt=o(` property of the config object (either
passed as an argument or loaded from `),FLe=a("code"),itt=o("pretrained_model_name_or_path"),dtt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TLe=a("code"),ctt=o("pretrained_model_name_or_path"),mtt=o(":"),ftt=l(),Se=a("ul"),$A=a("li"),MLe=a("strong"),gtt=o("albert"),htt=o(" \u2014 "),Lte=a("a"),utt=o("FlaxAlbertForSequenceClassification"),ptt=o(" (ALBERT model)"),_tt=l(),kA=a("li"),ELe=a("strong"),btt=o("bart"),vtt=o(" \u2014 "),yte=a("a"),Ftt=o("FlaxBartForSequenceClassification"),Ttt=o(" (BART model)"),Mtt=l(),SA=a("li"),CLe=a("strong"),Ett=o("bert"),Ctt=o(" \u2014 "),xte=a("a"),wtt=o("FlaxBertForSequenceClassification"),Att=o(" (BERT model)"),Ltt=l(),RA=a("li"),wLe=a("strong"),ytt=o("big_bird"),xtt=o(" \u2014 "),$te=a("a"),$tt=o("FlaxBigBirdForSequenceClassification"),ktt=o(" (BigBird model)"),Stt=l(),PA=a("li"),ALe=a("strong"),Rtt=o("distilbert"),Ptt=o(" \u2014 "),kte=a("a"),Btt=o("FlaxDistilBertForSequenceClassification"),Itt=o(" (DistilBERT model)"),Ntt=l(),BA=a("li"),LLe=a("strong"),qtt=o("electra"),jtt=o(" \u2014 "),Ste=a("a"),Dtt=o("FlaxElectraForSequenceClassification"),Gtt=o(" (ELECTRA model)"),Ott=l(),IA=a("li"),yLe=a("strong"),Vtt=o("mbart"),Xtt=o(" \u2014 "),Rte=a("a"),ztt=o("FlaxMBartForSequenceClassification"),Wtt=o(" (mBART model)"),Qtt=l(),NA=a("li"),xLe=a("strong"),Utt=o("roberta"),Htt=o(" \u2014 "),Pte=a("a"),Jtt=o("FlaxRobertaForSequenceClassification"),Ytt=o(" (RoBERTa model)"),Ktt=l(),qA=a("li"),$Le=a("strong"),Ztt=o("roformer"),eat=o(" \u2014 "),Bte=a("a"),oat=o("FlaxRoFormerForSequenceClassification"),rat=o(" (RoFormer model)"),tat=l(),jA=a("li"),kLe=a("strong"),aat=o("xlm-roberta"),nat=o(" \u2014 "),Ite=a("a"),sat=o("FlaxXLMRobertaForSequenceClassification"),lat=o(" (XLM-RoBERTa model)"),iat=l(),F(DA.$$.fragment),THe=l(),Sm=a("h2"),GA=a("a"),SLe=a("span"),F(Zk.$$.fragment),dat=l(),RLe=a("span"),cat=o("FlaxAutoModelForQuestionAnswering"),MHe=l(),wr=a("div"),F(eS.$$.fragment),mat=l(),Rm=a("p"),fat=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Nte=a("a"),gat=o("from_pretrained()"),hat=o(" class method or the "),qte=a("a"),uat=o("from_config()"),pat=o(` class
method.`),_at=l(),oS=a("p"),bat=o("This class cannot be instantiated directly using "),PLe=a("code"),vat=o("__init__()"),Fat=o(" (throws an error)."),Tat=l(),na=a("div"),F(rS.$$.fragment),Mat=l(),BLe=a("p"),Eat=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Cat=l(),Pm=a("p"),wat=o(`Note:
Loading a model from its configuration file does `),ILe=a("strong"),Aat=o("not"),Lat=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jte=a("a"),yat=o("from_pretrained()"),xat=o(" to load the model weights."),$at=l(),F(OA.$$.fragment),kat=l(),et=a("div"),F(tS.$$.fragment),Sat=l(),NLe=a("p"),Rat=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Pat=l(),Nn=a("p"),Bat=o("The model class to instantiate is selected based on the "),qLe=a("code"),Iat=o("model_type"),Nat=o(` property of the config object (either
passed as an argument or loaded from `),jLe=a("code"),qat=o("pretrained_model_name_or_path"),jat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DLe=a("code"),Dat=o("pretrained_model_name_or_path"),Gat=o(":"),Oat=l(),Re=a("ul"),VA=a("li"),GLe=a("strong"),Vat=o("albert"),Xat=o(" \u2014 "),Dte=a("a"),zat=o("FlaxAlbertForQuestionAnswering"),Wat=o(" (ALBERT model)"),Qat=l(),XA=a("li"),OLe=a("strong"),Uat=o("bart"),Hat=o(" \u2014 "),Gte=a("a"),Jat=o("FlaxBartForQuestionAnswering"),Yat=o(" (BART model)"),Kat=l(),zA=a("li"),VLe=a("strong"),Zat=o("bert"),ent=o(" \u2014 "),Ote=a("a"),ont=o("FlaxBertForQuestionAnswering"),rnt=o(" (BERT model)"),tnt=l(),WA=a("li"),XLe=a("strong"),ant=o("big_bird"),nnt=o(" \u2014 "),Vte=a("a"),snt=o("FlaxBigBirdForQuestionAnswering"),lnt=o(" (BigBird model)"),int=l(),QA=a("li"),zLe=a("strong"),dnt=o("distilbert"),cnt=o(" \u2014 "),Xte=a("a"),mnt=o("FlaxDistilBertForQuestionAnswering"),fnt=o(" (DistilBERT model)"),gnt=l(),UA=a("li"),WLe=a("strong"),hnt=o("electra"),unt=o(" \u2014 "),zte=a("a"),pnt=o("FlaxElectraForQuestionAnswering"),_nt=o(" (ELECTRA model)"),bnt=l(),HA=a("li"),QLe=a("strong"),vnt=o("mbart"),Fnt=o(" \u2014 "),Wte=a("a"),Tnt=o("FlaxMBartForQuestionAnswering"),Mnt=o(" (mBART model)"),Ent=l(),JA=a("li"),ULe=a("strong"),Cnt=o("roberta"),wnt=o(" \u2014 "),Qte=a("a"),Ant=o("FlaxRobertaForQuestionAnswering"),Lnt=o(" (RoBERTa model)"),ynt=l(),YA=a("li"),HLe=a("strong"),xnt=o("roformer"),$nt=o(" \u2014 "),Ute=a("a"),knt=o("FlaxRoFormerForQuestionAnswering"),Snt=o(" (RoFormer model)"),Rnt=l(),KA=a("li"),JLe=a("strong"),Pnt=o("xlm-roberta"),Bnt=o(" \u2014 "),Hte=a("a"),Int=o("FlaxXLMRobertaForQuestionAnswering"),Nnt=o(" (XLM-RoBERTa model)"),qnt=l(),F(ZA.$$.fragment),EHe=l(),Bm=a("h2"),e7=a("a"),YLe=a("span"),F(aS.$$.fragment),jnt=l(),KLe=a("span"),Dnt=o("FlaxAutoModelForTokenClassification"),CHe=l(),Ar=a("div"),F(nS.$$.fragment),Gnt=l(),Im=a("p"),Ont=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Jte=a("a"),Vnt=o("from_pretrained()"),Xnt=o(" class method or the "),Yte=a("a"),znt=o("from_config()"),Wnt=o(` class
method.`),Qnt=l(),sS=a("p"),Unt=o("This class cannot be instantiated directly using "),ZLe=a("code"),Hnt=o("__init__()"),Jnt=o(" (throws an error)."),Ynt=l(),sa=a("div"),F(lS.$$.fragment),Knt=l(),eye=a("p"),Znt=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),est=l(),Nm=a("p"),ost=o(`Note:
Loading a model from its configuration file does `),oye=a("strong"),rst=o("not"),tst=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kte=a("a"),ast=o("from_pretrained()"),nst=o(" to load the model weights."),sst=l(),F(o7.$$.fragment),lst=l(),ot=a("div"),F(iS.$$.fragment),ist=l(),rye=a("p"),dst=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),cst=l(),qn=a("p"),mst=o("The model class to instantiate is selected based on the "),tye=a("code"),fst=o("model_type"),gst=o(` property of the config object (either
passed as an argument or loaded from `),aye=a("code"),hst=o("pretrained_model_name_or_path"),ust=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nye=a("code"),pst=o("pretrained_model_name_or_path"),_st=o(":"),bst=l(),Xe=a("ul"),r7=a("li"),sye=a("strong"),vst=o("albert"),Fst=o(" \u2014 "),Zte=a("a"),Tst=o("FlaxAlbertForTokenClassification"),Mst=o(" (ALBERT model)"),Est=l(),t7=a("li"),lye=a("strong"),Cst=o("bert"),wst=o(" \u2014 "),eae=a("a"),Ast=o("FlaxBertForTokenClassification"),Lst=o(" (BERT model)"),yst=l(),a7=a("li"),iye=a("strong"),xst=o("big_bird"),$st=o(" \u2014 "),oae=a("a"),kst=o("FlaxBigBirdForTokenClassification"),Sst=o(" (BigBird model)"),Rst=l(),n7=a("li"),dye=a("strong"),Pst=o("distilbert"),Bst=o(" \u2014 "),rae=a("a"),Ist=o("FlaxDistilBertForTokenClassification"),Nst=o(" (DistilBERT model)"),qst=l(),s7=a("li"),cye=a("strong"),jst=o("electra"),Dst=o(" \u2014 "),tae=a("a"),Gst=o("FlaxElectraForTokenClassification"),Ost=o(" (ELECTRA model)"),Vst=l(),l7=a("li"),mye=a("strong"),Xst=o("roberta"),zst=o(" \u2014 "),aae=a("a"),Wst=o("FlaxRobertaForTokenClassification"),Qst=o(" (RoBERTa model)"),Ust=l(),i7=a("li"),fye=a("strong"),Hst=o("roformer"),Jst=o(" \u2014 "),nae=a("a"),Yst=o("FlaxRoFormerForTokenClassification"),Kst=o(" (RoFormer model)"),Zst=l(),d7=a("li"),gye=a("strong"),elt=o("xlm-roberta"),olt=o(" \u2014 "),sae=a("a"),rlt=o("FlaxXLMRobertaForTokenClassification"),tlt=o(" (XLM-RoBERTa model)"),alt=l(),F(c7.$$.fragment),wHe=l(),qm=a("h2"),m7=a("a"),hye=a("span"),F(dS.$$.fragment),nlt=l(),uye=a("span"),slt=o("FlaxAutoModelForMultipleChoice"),AHe=l(),Lr=a("div"),F(cS.$$.fragment),llt=l(),jm=a("p"),ilt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),lae=a("a"),dlt=o("from_pretrained()"),clt=o(" class method or the "),iae=a("a"),mlt=o("from_config()"),flt=o(` class
method.`),glt=l(),mS=a("p"),hlt=o("This class cannot be instantiated directly using "),pye=a("code"),ult=o("__init__()"),plt=o(" (throws an error)."),_lt=l(),la=a("div"),F(fS.$$.fragment),blt=l(),_ye=a("p"),vlt=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Flt=l(),Dm=a("p"),Tlt=o(`Note:
Loading a model from its configuration file does `),bye=a("strong"),Mlt=o("not"),Elt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dae=a("a"),Clt=o("from_pretrained()"),wlt=o(" to load the model weights."),Alt=l(),F(f7.$$.fragment),Llt=l(),rt=a("div"),F(gS.$$.fragment),ylt=l(),vye=a("p"),xlt=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$lt=l(),jn=a("p"),klt=o("The model class to instantiate is selected based on the "),Fye=a("code"),Slt=o("model_type"),Rlt=o(` property of the config object (either
passed as an argument or loaded from `),Tye=a("code"),Plt=o("pretrained_model_name_or_path"),Blt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mye=a("code"),Ilt=o("pretrained_model_name_or_path"),Nlt=o(":"),qlt=l(),ze=a("ul"),g7=a("li"),Eye=a("strong"),jlt=o("albert"),Dlt=o(" \u2014 "),cae=a("a"),Glt=o("FlaxAlbertForMultipleChoice"),Olt=o(" (ALBERT model)"),Vlt=l(),h7=a("li"),Cye=a("strong"),Xlt=o("bert"),zlt=o(" \u2014 "),mae=a("a"),Wlt=o("FlaxBertForMultipleChoice"),Qlt=o(" (BERT model)"),Ult=l(),u7=a("li"),wye=a("strong"),Hlt=o("big_bird"),Jlt=o(" \u2014 "),fae=a("a"),Ylt=o("FlaxBigBirdForMultipleChoice"),Klt=o(" (BigBird model)"),Zlt=l(),p7=a("li"),Aye=a("strong"),eit=o("distilbert"),oit=o(" \u2014 "),gae=a("a"),rit=o("FlaxDistilBertForMultipleChoice"),tit=o(" (DistilBERT model)"),ait=l(),_7=a("li"),Lye=a("strong"),nit=o("electra"),sit=o(" \u2014 "),hae=a("a"),lit=o("FlaxElectraForMultipleChoice"),iit=o(" (ELECTRA model)"),dit=l(),b7=a("li"),yye=a("strong"),cit=o("roberta"),mit=o(" \u2014 "),uae=a("a"),fit=o("FlaxRobertaForMultipleChoice"),git=o(" (RoBERTa model)"),hit=l(),v7=a("li"),xye=a("strong"),uit=o("roformer"),pit=o(" \u2014 "),pae=a("a"),_it=o("FlaxRoFormerForMultipleChoice"),bit=o(" (RoFormer model)"),vit=l(),F7=a("li"),$ye=a("strong"),Fit=o("xlm-roberta"),Tit=o(" \u2014 "),_ae=a("a"),Mit=o("FlaxXLMRobertaForMultipleChoice"),Eit=o(" (XLM-RoBERTa model)"),Cit=l(),F(T7.$$.fragment),LHe=l(),Gm=a("h2"),M7=a("a"),kye=a("span"),F(hS.$$.fragment),wit=l(),Sye=a("span"),Ait=o("FlaxAutoModelForNextSentencePrediction"),yHe=l(),yr=a("div"),F(uS.$$.fragment),Lit=l(),Om=a("p"),yit=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),bae=a("a"),xit=o("from_pretrained()"),$it=o(" class method or the "),vae=a("a"),kit=o("from_config()"),Sit=o(` class
method.`),Rit=l(),pS=a("p"),Pit=o("This class cannot be instantiated directly using "),Rye=a("code"),Bit=o("__init__()"),Iit=o(" (throws an error)."),Nit=l(),ia=a("div"),F(_S.$$.fragment),qit=l(),Pye=a("p"),jit=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Dit=l(),Vm=a("p"),Git=o(`Note:
Loading a model from its configuration file does `),Bye=a("strong"),Oit=o("not"),Vit=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fae=a("a"),Xit=o("from_pretrained()"),zit=o(" to load the model weights."),Wit=l(),F(E7.$$.fragment),Qit=l(),tt=a("div"),F(bS.$$.fragment),Uit=l(),Iye=a("p"),Hit=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Jit=l(),Dn=a("p"),Yit=o("The model class to instantiate is selected based on the "),Nye=a("code"),Kit=o("model_type"),Zit=o(` property of the config object (either
passed as an argument or loaded from `),qye=a("code"),edt=o("pretrained_model_name_or_path"),odt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jye=a("code"),rdt=o("pretrained_model_name_or_path"),tdt=o(":"),adt=l(),Dye=a("ul"),C7=a("li"),Gye=a("strong"),ndt=o("bert"),sdt=o(" \u2014 "),Tae=a("a"),ldt=o("FlaxBertForNextSentencePrediction"),idt=o(" (BERT model)"),ddt=l(),F(w7.$$.fragment),xHe=l(),Xm=a("h2"),A7=a("a"),Oye=a("span"),F(vS.$$.fragment),cdt=l(),Vye=a("span"),mdt=o("FlaxAutoModelForImageClassification"),$He=l(),xr=a("div"),F(FS.$$.fragment),fdt=l(),zm=a("p"),gdt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Mae=a("a"),hdt=o("from_pretrained()"),udt=o(" class method or the "),Eae=a("a"),pdt=o("from_config()"),_dt=o(` class
method.`),bdt=l(),TS=a("p"),vdt=o("This class cannot be instantiated directly using "),Xye=a("code"),Fdt=o("__init__()"),Tdt=o(" (throws an error)."),Mdt=l(),da=a("div"),F(MS.$$.fragment),Edt=l(),zye=a("p"),Cdt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),wdt=l(),Wm=a("p"),Adt=o(`Note:
Loading a model from its configuration file does `),Wye=a("strong"),Ldt=o("not"),ydt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cae=a("a"),xdt=o("from_pretrained()"),$dt=o(" to load the model weights."),kdt=l(),F(L7.$$.fragment),Sdt=l(),at=a("div"),F(ES.$$.fragment),Rdt=l(),Qye=a("p"),Pdt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Bdt=l(),Gn=a("p"),Idt=o("The model class to instantiate is selected based on the "),Uye=a("code"),Ndt=o("model_type"),qdt=o(` property of the config object (either
passed as an argument or loaded from `),Hye=a("code"),jdt=o("pretrained_model_name_or_path"),Ddt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jye=a("code"),Gdt=o("pretrained_model_name_or_path"),Odt=o(":"),Vdt=l(),CS=a("ul"),y7=a("li"),Yye=a("strong"),Xdt=o("beit"),zdt=o(" \u2014 "),wae=a("a"),Wdt=o("FlaxBeitForImageClassification"),Qdt=o(" (BEiT model)"),Udt=l(),x7=a("li"),Kye=a("strong"),Hdt=o("vit"),Jdt=o(" \u2014 "),Aae=a("a"),Ydt=o("FlaxViTForImageClassification"),Kdt=o(" (ViT model)"),Zdt=l(),F($7.$$.fragment),kHe=l(),Qm=a("h2"),k7=a("a"),Zye=a("span"),F(wS.$$.fragment),ect=l(),e8e=a("span"),oct=o("FlaxAutoModelForVision2Seq"),SHe=l(),$r=a("div"),F(AS.$$.fragment),rct=l(),Um=a("p"),tct=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Lae=a("a"),act=o("from_pretrained()"),nct=o(" class method or the "),yae=a("a"),sct=o("from_config()"),lct=o(` class
method.`),ict=l(),LS=a("p"),dct=o("This class cannot be instantiated directly using "),o8e=a("code"),cct=o("__init__()"),mct=o(" (throws an error)."),fct=l(),ca=a("div"),F(yS.$$.fragment),gct=l(),r8e=a("p"),hct=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),uct=l(),Hm=a("p"),pct=o(`Note:
Loading a model from its configuration file does `),t8e=a("strong"),_ct=o("not"),bct=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xae=a("a"),vct=o("from_pretrained()"),Fct=o(" to load the model weights."),Tct=l(),F(S7.$$.fragment),Mct=l(),nt=a("div"),F(xS.$$.fragment),Ect=l(),a8e=a("p"),Cct=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),wct=l(),On=a("p"),Act=o("The model class to instantiate is selected based on the "),n8e=a("code"),Lct=o("model_type"),yct=o(` property of the config object (either
passed as an argument or loaded from `),s8e=a("code"),xct=o("pretrained_model_name_or_path"),$ct=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l8e=a("code"),kct=o("pretrained_model_name_or_path"),Sct=o(":"),Rct=l(),i8e=a("ul"),R7=a("li"),d8e=a("strong"),Pct=o("vision-encoder-decoder"),Bct=o(" \u2014 "),$ae=a("a"),Ict=o("FlaxVisionEncoderDecoderModel"),Nct=o(" (Vision Encoder decoder model)"),qct=l(),F(P7.$$.fragment),this.h()},l(m){const _=Woa('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(m),u=n(m,"H1",{class:!0});var $S=s(u);f=n($S,"A",{id:!0,class:!0,href:!0});var c8e=s(f);p=n(c8e,"SPAN",{});var m8e=s(p);T(d.$$.fragment,m8e),m8e.forEach(t),c8e.forEach(t),h=i($S),Ao=n($S,"SPAN",{});var f8e=s(Ao);Oi=r(f8e,"Auto Classes"),f8e.forEach(t),$S.forEach(t),Zm=i(m),mt=n(m,"P",{});var kS=s(mt);Vi=r(kS,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Xi=n(kS,"CODE",{});var g8e=s(Xi);n8=r(g8e,"from_pretrained()"),g8e.forEach(t),ef=r(kS,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),kS.forEach(t),Oe=i(m),Qe=n(m,"P",{});var Vn=s(Qe);zi=r(Vn,"Instantiating one of "),Xn=n(Vn,"A",{href:!0});var h8e=s(Xn);s8=r(h8e,"AutoConfig"),h8e.forEach(t),zn=r(Vn,", "),Wn=n(Vn,"A",{href:!0});var u8e=s(Wn);l8=r(u8e,"AutoModel"),u8e.forEach(t),Wi=r(Vn,`, and
`),Qn=n(Vn,"A",{href:!0});var p8e=s(Qn);i8=r(p8e,"AutoTokenizer"),p8e.forEach(t),Qi=r(Vn," will directly create a class of the relevant architecture. For instance"),Vn.forEach(t),of=i(m),T(ja.$$.fragment,m),Ue=i(m),Ae=n(m,"P",{});var SS=s(Ae);ZR=r(SS,"will create a model that is an instance of "),Ui=n(SS,"A",{href:!0});var _8e=s(Ui);eP=r(_8e,"BertModel"),_8e.forEach(t),oP=r(SS,"."),SS.forEach(t),Lo=i(m),Da=n(m,"P",{});var RS=s(Da);rP=r(RS,"There is one class of "),rf=n(RS,"CODE",{});var b8e=s(rf);tP=r(b8e,"AutoModel"),b8e.forEach(t),UYe=r(RS," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),RS.forEach(t),CQe=i(m),Hi=n(m,"H2",{class:!0});var PS=s(Hi);tf=n(PS,"A",{id:!0,class:!0,href:!0});var v8e=s(tf);yse=n(v8e,"SPAN",{});var F8e=s(yse);T(d8.$$.fragment,F8e),F8e.forEach(t),v8e.forEach(t),HYe=i(PS),xse=n(PS,"SPAN",{});var T8e=s(xse);JYe=r(T8e,"Extending the Auto Classes"),T8e.forEach(t),PS.forEach(t),wQe=i(m),Un=n(m,"P",{});var Jm=s(Un);YYe=r(Jm,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),$se=n(Jm,"CODE",{});var M8e=s($se);KYe=r(M8e,"NewModel"),M8e.forEach(t),ZYe=r(Jm,", make sure you have a "),kse=n(Jm,"CODE",{});var E8e=s(kse);eKe=r(E8e,"NewModelConfig"),E8e.forEach(t),oKe=r(Jm,` then you can add those to the auto
classes like this:`),Jm.forEach(t),AQe=i(m),T(c8.$$.fragment,m),LQe=i(m),aP=n(m,"P",{});var C8e=s(aP);rKe=r(C8e,"You will then be able to use the auto classes like you would usually do!"),C8e.forEach(t),yQe=i(m),T(af.$$.fragment,m),xQe=i(m),Ji=n(m,"H2",{class:!0});var BS=s(Ji);nf=n(BS,"A",{id:!0,class:!0,href:!0});var w8e=s(nf);Sse=n(w8e,"SPAN",{});var A8e=s(Sse);T(m8.$$.fragment,A8e),A8e.forEach(t),w8e.forEach(t),tKe=i(BS),Rse=n(BS,"SPAN",{});var L8e=s(Rse);aKe=r(L8e,"AutoConfig"),L8e.forEach(t),BS.forEach(t),$Qe=i(m),yo=n(m,"DIV",{class:!0});var dt=s(yo);T(f8.$$.fragment,dt),nKe=i(dt),g8=n(dt,"P",{});var IS=s(g8);sKe=r(IS,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),nP=n(IS,"A",{href:!0});var y8e=s(nP);lKe=r(y8e,"from_pretrained()"),y8e.forEach(t),iKe=r(IS," class method."),IS.forEach(t),dKe=i(dt),h8=n(dt,"P",{});var NS=s(h8);cKe=r(NS,"This class cannot be instantiated directly using "),Pse=n(NS,"CODE",{});var x8e=s(Pse);mKe=r(x8e,"__init__()"),x8e.forEach(t),fKe=r(NS," (throws an error)."),NS.forEach(t),gKe=i(dt),kr=n(dt,"DIV",{class:!0});var ct=s(kr);T(u8.$$.fragment,ct),hKe=i(ct),Bse=n(ct,"P",{});var $8e=s(Bse);uKe=r($8e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),$8e.forEach(t),pKe=i(ct),Yi=n(ct,"P",{});var Ym=s(Yi);_Ke=r(Ym,"The configuration class to instantiate is selected based on the "),Ise=n(Ym,"CODE",{});var k8e=s(Ise);bKe=r(k8e,"model_type"),k8e.forEach(t),vKe=r(Ym,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Nse=n(Ym,"CODE",{});var S8e=s(Nse);FKe=r(S8e,"pretrained_model_name_or_path"),S8e.forEach(t),TKe=r(Ym,":"),Ym.forEach(t),MKe=i(ct),A=n(ct,"UL",{});var L=s(A);sf=n(L,"LI",{});var B7=s(sf);qse=n(B7,"STRONG",{});var R8e=s(qse);EKe=r(R8e,"albert"),R8e.forEach(t),CKe=r(B7," \u2014 "),sP=n(B7,"A",{href:!0});var P8e=s(sP);wKe=r(P8e,"AlbertConfig"),P8e.forEach(t),AKe=r(B7," (ALBERT model)"),B7.forEach(t),LKe=i(L),lf=n(L,"LI",{});var I7=s(lf);jse=n(I7,"STRONG",{});var B8e=s(jse);yKe=r(B8e,"bart"),B8e.forEach(t),xKe=r(I7," \u2014 "),lP=n(I7,"A",{href:!0});var I8e=s(lP);$Ke=r(I8e,"BartConfig"),I8e.forEach(t),kKe=r(I7," (BART model)"),I7.forEach(t),SKe=i(L),df=n(L,"LI",{});var N7=s(df);Dse=n(N7,"STRONG",{});var N8e=s(Dse);RKe=r(N8e,"beit"),N8e.forEach(t),PKe=r(N7," \u2014 "),iP=n(N7,"A",{href:!0});var q8e=s(iP);BKe=r(q8e,"BeitConfig"),q8e.forEach(t),IKe=r(N7," (BEiT model)"),N7.forEach(t),NKe=i(L),cf=n(L,"LI",{});var q7=s(cf);Gse=n(q7,"STRONG",{});var j8e=s(Gse);qKe=r(j8e,"bert"),j8e.forEach(t),jKe=r(q7," \u2014 "),dP=n(q7,"A",{href:!0});var D8e=s(dP);DKe=r(D8e,"BertConfig"),D8e.forEach(t),GKe=r(q7," (BERT model)"),q7.forEach(t),OKe=i(L),mf=n(L,"LI",{});var j7=s(mf);Ose=n(j7,"STRONG",{});var G8e=s(Ose);VKe=r(G8e,"bert-generation"),G8e.forEach(t),XKe=r(j7," \u2014 "),cP=n(j7,"A",{href:!0});var O8e=s(cP);zKe=r(O8e,"BertGenerationConfig"),O8e.forEach(t),WKe=r(j7," (Bert Generation model)"),j7.forEach(t),QKe=i(L),ff=n(L,"LI",{});var D7=s(ff);Vse=n(D7,"STRONG",{});var V8e=s(Vse);UKe=r(V8e,"big_bird"),V8e.forEach(t),HKe=r(D7," \u2014 "),mP=n(D7,"A",{href:!0});var X8e=s(mP);JKe=r(X8e,"BigBirdConfig"),X8e.forEach(t),YKe=r(D7," (BigBird model)"),D7.forEach(t),KKe=i(L),gf=n(L,"LI",{});var G7=s(gf);Xse=n(G7,"STRONG",{});var z8e=s(Xse);ZKe=r(z8e,"bigbird_pegasus"),z8e.forEach(t),eZe=r(G7," \u2014 "),fP=n(G7,"A",{href:!0});var W8e=s(fP);oZe=r(W8e,"BigBirdPegasusConfig"),W8e.forEach(t),rZe=r(G7," (BigBird-Pegasus model)"),G7.forEach(t),tZe=i(L),hf=n(L,"LI",{});var O7=s(hf);zse=n(O7,"STRONG",{});var Q8e=s(zse);aZe=r(Q8e,"blenderbot"),Q8e.forEach(t),nZe=r(O7," \u2014 "),gP=n(O7,"A",{href:!0});var U8e=s(gP);sZe=r(U8e,"BlenderbotConfig"),U8e.forEach(t),lZe=r(O7," (Blenderbot model)"),O7.forEach(t),iZe=i(L),uf=n(L,"LI",{});var V7=s(uf);Wse=n(V7,"STRONG",{});var H8e=s(Wse);dZe=r(H8e,"blenderbot-small"),H8e.forEach(t),cZe=r(V7," \u2014 "),hP=n(V7,"A",{href:!0});var J8e=s(hP);mZe=r(J8e,"BlenderbotSmallConfig"),J8e.forEach(t),fZe=r(V7," (BlenderbotSmall model)"),V7.forEach(t),gZe=i(L),pf=n(L,"LI",{});var X7=s(pf);Qse=n(X7,"STRONG",{});var Y8e=s(Qse);hZe=r(Y8e,"bloom"),Y8e.forEach(t),uZe=r(X7," \u2014 "),uP=n(X7,"A",{href:!0});var K8e=s(uP);pZe=r(K8e,"BloomConfig"),K8e.forEach(t),_Ze=r(X7," (BLOOM model)"),X7.forEach(t),bZe=i(L),_f=n(L,"LI",{});var z7=s(_f);Use=n(z7,"STRONG",{});var Z8e=s(Use);vZe=r(Z8e,"camembert"),Z8e.forEach(t),FZe=r(z7," \u2014 "),pP=n(z7,"A",{href:!0});var e9e=s(pP);TZe=r(e9e,"CamembertConfig"),e9e.forEach(t),MZe=r(z7," (CamemBERT model)"),z7.forEach(t),EZe=i(L),bf=n(L,"LI",{});var W7=s(bf);Hse=n(W7,"STRONG",{});var o9e=s(Hse);CZe=r(o9e,"canine"),o9e.forEach(t),wZe=r(W7," \u2014 "),_P=n(W7,"A",{href:!0});var r9e=s(_P);AZe=r(r9e,"CanineConfig"),r9e.forEach(t),LZe=r(W7," (CANINE model)"),W7.forEach(t),yZe=i(L),vf=n(L,"LI",{});var Q7=s(vf);Jse=n(Q7,"STRONG",{});var t9e=s(Jse);xZe=r(t9e,"clip"),t9e.forEach(t),$Ze=r(Q7," \u2014 "),bP=n(Q7,"A",{href:!0});var a9e=s(bP);kZe=r(a9e,"CLIPConfig"),a9e.forEach(t),SZe=r(Q7," (CLIP model)"),Q7.forEach(t),RZe=i(L),Ff=n(L,"LI",{});var U7=s(Ff);Yse=n(U7,"STRONG",{});var n9e=s(Yse);PZe=r(n9e,"codegen"),n9e.forEach(t),BZe=r(U7," \u2014 "),vP=n(U7,"A",{href:!0});var s9e=s(vP);IZe=r(s9e,"CodeGenConfig"),s9e.forEach(t),NZe=r(U7," (CodeGen model)"),U7.forEach(t),qZe=i(L),Tf=n(L,"LI",{});var H7=s(Tf);Kse=n(H7,"STRONG",{});var l9e=s(Kse);jZe=r(l9e,"convbert"),l9e.forEach(t),DZe=r(H7," \u2014 "),FP=n(H7,"A",{href:!0});var i9e=s(FP);GZe=r(i9e,"ConvBertConfig"),i9e.forEach(t),OZe=r(H7," (ConvBERT model)"),H7.forEach(t),VZe=i(L),Mf=n(L,"LI",{});var J7=s(Mf);Zse=n(J7,"STRONG",{});var d9e=s(Zse);XZe=r(d9e,"convnext"),d9e.forEach(t),zZe=r(J7," \u2014 "),TP=n(J7,"A",{href:!0});var c9e=s(TP);WZe=r(c9e,"ConvNextConfig"),c9e.forEach(t),QZe=r(J7," (ConvNeXT model)"),J7.forEach(t),UZe=i(L),Ef=n(L,"LI",{});var Y7=s(Ef);ele=n(Y7,"STRONG",{});var m9e=s(ele);HZe=r(m9e,"ctrl"),m9e.forEach(t),JZe=r(Y7," \u2014 "),MP=n(Y7,"A",{href:!0});var f9e=s(MP);YZe=r(f9e,"CTRLConfig"),f9e.forEach(t),KZe=r(Y7," (CTRL model)"),Y7.forEach(t),ZZe=i(L),Cf=n(L,"LI",{});var K7=s(Cf);ole=n(K7,"STRONG",{});var g9e=s(ole);eeo=r(g9e,"cvt"),g9e.forEach(t),oeo=r(K7," \u2014 "),EP=n(K7,"A",{href:!0});var h9e=s(EP);reo=r(h9e,"CvtConfig"),h9e.forEach(t),teo=r(K7," (CvT model)"),K7.forEach(t),aeo=i(L),wf=n(L,"LI",{});var Z7=s(wf);rle=n(Z7,"STRONG",{});var u9e=s(rle);neo=r(u9e,"data2vec-audio"),u9e.forEach(t),seo=r(Z7," \u2014 "),CP=n(Z7,"A",{href:!0});var p9e=s(CP);leo=r(p9e,"Data2VecAudioConfig"),p9e.forEach(t),ieo=r(Z7," (Data2VecAudio model)"),Z7.forEach(t),deo=i(L),Af=n(L,"LI",{});var eL=s(Af);tle=n(eL,"STRONG",{});var _9e=s(tle);ceo=r(_9e,"data2vec-text"),_9e.forEach(t),meo=r(eL," \u2014 "),wP=n(eL,"A",{href:!0});var b9e=s(wP);feo=r(b9e,"Data2VecTextConfig"),b9e.forEach(t),geo=r(eL," (Data2VecText model)"),eL.forEach(t),heo=i(L),Lf=n(L,"LI",{});var oL=s(Lf);ale=n(oL,"STRONG",{});var v9e=s(ale);ueo=r(v9e,"data2vec-vision"),v9e.forEach(t),peo=r(oL," \u2014 "),AP=n(oL,"A",{href:!0});var F9e=s(AP);_eo=r(F9e,"Data2VecVisionConfig"),F9e.forEach(t),beo=r(oL," (Data2VecVision model)"),oL.forEach(t),veo=i(L),yf=n(L,"LI",{});var rL=s(yf);nle=n(rL,"STRONG",{});var T9e=s(nle);Feo=r(T9e,"deberta"),T9e.forEach(t),Teo=r(rL," \u2014 "),LP=n(rL,"A",{href:!0});var M9e=s(LP);Meo=r(M9e,"DebertaConfig"),M9e.forEach(t),Eeo=r(rL," (DeBERTa model)"),rL.forEach(t),Ceo=i(L),xf=n(L,"LI",{});var tL=s(xf);sle=n(tL,"STRONG",{});var E9e=s(sle);weo=r(E9e,"deberta-v2"),E9e.forEach(t),Aeo=r(tL," \u2014 "),yP=n(tL,"A",{href:!0});var C9e=s(yP);Leo=r(C9e,"DebertaV2Config"),C9e.forEach(t),yeo=r(tL," (DeBERTa-v2 model)"),tL.forEach(t),xeo=i(L),$f=n(L,"LI",{});var aL=s($f);lle=n(aL,"STRONG",{});var w9e=s(lle);$eo=r(w9e,"decision_transformer"),w9e.forEach(t),keo=r(aL," \u2014 "),xP=n(aL,"A",{href:!0});var A9e=s(xP);Seo=r(A9e,"DecisionTransformerConfig"),A9e.forEach(t),Reo=r(aL," (Decision Transformer model)"),aL.forEach(t),Peo=i(L),kf=n(L,"LI",{});var nL=s(kf);ile=n(nL,"STRONG",{});var L9e=s(ile);Beo=r(L9e,"deit"),L9e.forEach(t),Ieo=r(nL," \u2014 "),$P=n(nL,"A",{href:!0});var Dct=s($P);Neo=r(Dct,"DeiTConfig"),Dct.forEach(t),qeo=r(nL," (DeiT model)"),nL.forEach(t),jeo=i(L),Sf=n(L,"LI",{});var y9e=s(Sf);dle=n(y9e,"STRONG",{});var Gct=s(dle);Deo=r(Gct,"detr"),Gct.forEach(t),Geo=r(y9e," \u2014 "),kP=n(y9e,"A",{href:!0});var Oct=s(kP);Oeo=r(Oct,"DetrConfig"),Oct.forEach(t),Veo=r(y9e," (DETR model)"),y9e.forEach(t),Xeo=i(L),Rf=n(L,"LI",{});var x9e=s(Rf);cle=n(x9e,"STRONG",{});var Vct=s(cle);zeo=r(Vct,"distilbert"),Vct.forEach(t),Weo=r(x9e," \u2014 "),SP=n(x9e,"A",{href:!0});var Xct=s(SP);Qeo=r(Xct,"DistilBertConfig"),Xct.forEach(t),Ueo=r(x9e," (DistilBERT model)"),x9e.forEach(t),Heo=i(L),Pf=n(L,"LI",{});var $9e=s(Pf);mle=n($9e,"STRONG",{});var zct=s(mle);Jeo=r(zct,"dpr"),zct.forEach(t),Yeo=r($9e," \u2014 "),RP=n($9e,"A",{href:!0});var Wct=s(RP);Keo=r(Wct,"DPRConfig"),Wct.forEach(t),Zeo=r($9e," (DPR model)"),$9e.forEach(t),eoo=i(L),Bf=n(L,"LI",{});var k9e=s(Bf);fle=n(k9e,"STRONG",{});var Qct=s(fle);ooo=r(Qct,"dpt"),Qct.forEach(t),roo=r(k9e," \u2014 "),PP=n(k9e,"A",{href:!0});var Uct=s(PP);too=r(Uct,"DPTConfig"),Uct.forEach(t),aoo=r(k9e," (DPT model)"),k9e.forEach(t),noo=i(L),If=n(L,"LI",{});var S9e=s(If);gle=n(S9e,"STRONG",{});var Hct=s(gle);soo=r(Hct,"electra"),Hct.forEach(t),loo=r(S9e," \u2014 "),BP=n(S9e,"A",{href:!0});var Jct=s(BP);ioo=r(Jct,"ElectraConfig"),Jct.forEach(t),doo=r(S9e," (ELECTRA model)"),S9e.forEach(t),coo=i(L),Nf=n(L,"LI",{});var R9e=s(Nf);hle=n(R9e,"STRONG",{});var Yct=s(hle);moo=r(Yct,"encoder-decoder"),Yct.forEach(t),foo=r(R9e," \u2014 "),IP=n(R9e,"A",{href:!0});var Kct=s(IP);goo=r(Kct,"EncoderDecoderConfig"),Kct.forEach(t),hoo=r(R9e," (Encoder decoder model)"),R9e.forEach(t),uoo=i(L),qf=n(L,"LI",{});var P9e=s(qf);ule=n(P9e,"STRONG",{});var Zct=s(ule);poo=r(Zct,"flaubert"),Zct.forEach(t),_oo=r(P9e," \u2014 "),NP=n(P9e,"A",{href:!0});var emt=s(NP);boo=r(emt,"FlaubertConfig"),emt.forEach(t),voo=r(P9e," (FlauBERT model)"),P9e.forEach(t),Foo=i(L),jf=n(L,"LI",{});var B9e=s(jf);ple=n(B9e,"STRONG",{});var omt=s(ple);Too=r(omt,"flava"),omt.forEach(t),Moo=r(B9e," \u2014 "),qP=n(B9e,"A",{href:!0});var rmt=s(qP);Eoo=r(rmt,"FlavaConfig"),rmt.forEach(t),Coo=r(B9e," (FLAVA model)"),B9e.forEach(t),woo=i(L),Df=n(L,"LI",{});var I9e=s(Df);_le=n(I9e,"STRONG",{});var tmt=s(_le);Aoo=r(tmt,"fnet"),tmt.forEach(t),Loo=r(I9e," \u2014 "),jP=n(I9e,"A",{href:!0});var amt=s(jP);yoo=r(amt,"FNetConfig"),amt.forEach(t),xoo=r(I9e," (FNet model)"),I9e.forEach(t),$oo=i(L),Gf=n(L,"LI",{});var N9e=s(Gf);ble=n(N9e,"STRONG",{});var nmt=s(ble);koo=r(nmt,"fsmt"),nmt.forEach(t),Soo=r(N9e," \u2014 "),DP=n(N9e,"A",{href:!0});var smt=s(DP);Roo=r(smt,"FSMTConfig"),smt.forEach(t),Poo=r(N9e," (FairSeq Machine-Translation model)"),N9e.forEach(t),Boo=i(L),Of=n(L,"LI",{});var q9e=s(Of);vle=n(q9e,"STRONG",{});var lmt=s(vle);Ioo=r(lmt,"funnel"),lmt.forEach(t),Noo=r(q9e," \u2014 "),GP=n(q9e,"A",{href:!0});var imt=s(GP);qoo=r(imt,"FunnelConfig"),imt.forEach(t),joo=r(q9e," (Funnel Transformer model)"),q9e.forEach(t),Doo=i(L),Vf=n(L,"LI",{});var j9e=s(Vf);Fle=n(j9e,"STRONG",{});var dmt=s(Fle);Goo=r(dmt,"glpn"),dmt.forEach(t),Ooo=r(j9e," \u2014 "),OP=n(j9e,"A",{href:!0});var cmt=s(OP);Voo=r(cmt,"GLPNConfig"),cmt.forEach(t),Xoo=r(j9e," (GLPN model)"),j9e.forEach(t),zoo=i(L),Xf=n(L,"LI",{});var D9e=s(Xf);Tle=n(D9e,"STRONG",{});var mmt=s(Tle);Woo=r(mmt,"gpt2"),mmt.forEach(t),Qoo=r(D9e," \u2014 "),VP=n(D9e,"A",{href:!0});var fmt=s(VP);Uoo=r(fmt,"GPT2Config"),fmt.forEach(t),Hoo=r(D9e," (OpenAI GPT-2 model)"),D9e.forEach(t),Joo=i(L),zf=n(L,"LI",{});var G9e=s(zf);Mle=n(G9e,"STRONG",{});var gmt=s(Mle);Yoo=r(gmt,"gpt_neo"),gmt.forEach(t),Koo=r(G9e," \u2014 "),XP=n(G9e,"A",{href:!0});var hmt=s(XP);Zoo=r(hmt,"GPTNeoConfig"),hmt.forEach(t),ero=r(G9e," (GPT Neo model)"),G9e.forEach(t),oro=i(L),Wf=n(L,"LI",{});var O9e=s(Wf);Ele=n(O9e,"STRONG",{});var umt=s(Ele);rro=r(umt,"gpt_neox"),umt.forEach(t),tro=r(O9e," \u2014 "),zP=n(O9e,"A",{href:!0});var pmt=s(zP);aro=r(pmt,"GPTNeoXConfig"),pmt.forEach(t),nro=r(O9e," (GPT NeoX model)"),O9e.forEach(t),sro=i(L),Qf=n(L,"LI",{});var V9e=s(Qf);Cle=n(V9e,"STRONG",{});var _mt=s(Cle);lro=r(_mt,"gptj"),_mt.forEach(t),iro=r(V9e," \u2014 "),WP=n(V9e,"A",{href:!0});var bmt=s(WP);dro=r(bmt,"GPTJConfig"),bmt.forEach(t),cro=r(V9e," (GPT-J model)"),V9e.forEach(t),mro=i(L),Uf=n(L,"LI",{});var X9e=s(Uf);wle=n(X9e,"STRONG",{});var vmt=s(wle);fro=r(vmt,"groupvit"),vmt.forEach(t),gro=r(X9e," \u2014 "),QP=n(X9e,"A",{href:!0});var Fmt=s(QP);hro=r(Fmt,"GroupViTConfig"),Fmt.forEach(t),uro=r(X9e," (GroupViT model)"),X9e.forEach(t),pro=i(L),Hf=n(L,"LI",{});var z9e=s(Hf);Ale=n(z9e,"STRONG",{});var Tmt=s(Ale);_ro=r(Tmt,"hubert"),Tmt.forEach(t),bro=r(z9e," \u2014 "),UP=n(z9e,"A",{href:!0});var Mmt=s(UP);vro=r(Mmt,"HubertConfig"),Mmt.forEach(t),Fro=r(z9e," (Hubert model)"),z9e.forEach(t),Tro=i(L),Jf=n(L,"LI",{});var W9e=s(Jf);Lle=n(W9e,"STRONG",{});var Emt=s(Lle);Mro=r(Emt,"ibert"),Emt.forEach(t),Ero=r(W9e," \u2014 "),HP=n(W9e,"A",{href:!0});var Cmt=s(HP);Cro=r(Cmt,"IBertConfig"),Cmt.forEach(t),wro=r(W9e," (I-BERT model)"),W9e.forEach(t),Aro=i(L),Yf=n(L,"LI",{});var Q9e=s(Yf);yle=n(Q9e,"STRONG",{});var wmt=s(yle);Lro=r(wmt,"imagegpt"),wmt.forEach(t),yro=r(Q9e," \u2014 "),JP=n(Q9e,"A",{href:!0});var Amt=s(JP);xro=r(Amt,"ImageGPTConfig"),Amt.forEach(t),$ro=r(Q9e," (ImageGPT model)"),Q9e.forEach(t),kro=i(L),Kf=n(L,"LI",{});var U9e=s(Kf);xle=n(U9e,"STRONG",{});var Lmt=s(xle);Sro=r(Lmt,"layoutlm"),Lmt.forEach(t),Rro=r(U9e," \u2014 "),YP=n(U9e,"A",{href:!0});var ymt=s(YP);Pro=r(ymt,"LayoutLMConfig"),ymt.forEach(t),Bro=r(U9e," (LayoutLM model)"),U9e.forEach(t),Iro=i(L),Zf=n(L,"LI",{});var H9e=s(Zf);$le=n(H9e,"STRONG",{});var xmt=s($le);Nro=r(xmt,"layoutlmv2"),xmt.forEach(t),qro=r(H9e," \u2014 "),KP=n(H9e,"A",{href:!0});var $mt=s(KP);jro=r($mt,"LayoutLMv2Config"),$mt.forEach(t),Dro=r(H9e," (LayoutLMv2 model)"),H9e.forEach(t),Gro=i(L),eg=n(L,"LI",{});var J9e=s(eg);kle=n(J9e,"STRONG",{});var kmt=s(kle);Oro=r(kmt,"layoutlmv3"),kmt.forEach(t),Vro=r(J9e," \u2014 "),ZP=n(J9e,"A",{href:!0});var Smt=s(ZP);Xro=r(Smt,"LayoutLMv3Config"),Smt.forEach(t),zro=r(J9e," (LayoutLMv3 model)"),J9e.forEach(t),Wro=i(L),og=n(L,"LI",{});var Y9e=s(og);Sle=n(Y9e,"STRONG",{});var Rmt=s(Sle);Qro=r(Rmt,"led"),Rmt.forEach(t),Uro=r(Y9e," \u2014 "),eB=n(Y9e,"A",{href:!0});var Pmt=s(eB);Hro=r(Pmt,"LEDConfig"),Pmt.forEach(t),Jro=r(Y9e," (LED model)"),Y9e.forEach(t),Yro=i(L),rg=n(L,"LI",{});var K9e=s(rg);Rle=n(K9e,"STRONG",{});var Bmt=s(Rle);Kro=r(Bmt,"levit"),Bmt.forEach(t),Zro=r(K9e," \u2014 "),oB=n(K9e,"A",{href:!0});var Imt=s(oB);eto=r(Imt,"LevitConfig"),Imt.forEach(t),oto=r(K9e," (LeViT model)"),K9e.forEach(t),rto=i(L),tg=n(L,"LI",{});var Z9e=s(tg);Ple=n(Z9e,"STRONG",{});var Nmt=s(Ple);tto=r(Nmt,"longformer"),Nmt.forEach(t),ato=r(Z9e," \u2014 "),rB=n(Z9e,"A",{href:!0});var qmt=s(rB);nto=r(qmt,"LongformerConfig"),qmt.forEach(t),sto=r(Z9e," (Longformer model)"),Z9e.forEach(t),lto=i(L),ag=n(L,"LI",{});var exe=s(ag);Ble=n(exe,"STRONG",{});var jmt=s(Ble);ito=r(jmt,"longt5"),jmt.forEach(t),dto=r(exe," \u2014 "),tB=n(exe,"A",{href:!0});var Dmt=s(tB);cto=r(Dmt,"LongT5Config"),Dmt.forEach(t),mto=r(exe," (LongT5 model)"),exe.forEach(t),fto=i(L),ng=n(L,"LI",{});var oxe=s(ng);Ile=n(oxe,"STRONG",{});var Gmt=s(Ile);gto=r(Gmt,"luke"),Gmt.forEach(t),hto=r(oxe," \u2014 "),aB=n(oxe,"A",{href:!0});var Omt=s(aB);uto=r(Omt,"LukeConfig"),Omt.forEach(t),pto=r(oxe," (LUKE model)"),oxe.forEach(t),_to=i(L),sg=n(L,"LI",{});var rxe=s(sg);Nle=n(rxe,"STRONG",{});var Vmt=s(Nle);bto=r(Vmt,"lxmert"),Vmt.forEach(t),vto=r(rxe," \u2014 "),nB=n(rxe,"A",{href:!0});var Xmt=s(nB);Fto=r(Xmt,"LxmertConfig"),Xmt.forEach(t),Tto=r(rxe," (LXMERT model)"),rxe.forEach(t),Mto=i(L),lg=n(L,"LI",{});var txe=s(lg);qle=n(txe,"STRONG",{});var zmt=s(qle);Eto=r(zmt,"m2m_100"),zmt.forEach(t),Cto=r(txe," \u2014 "),sB=n(txe,"A",{href:!0});var Wmt=s(sB);wto=r(Wmt,"M2M100Config"),Wmt.forEach(t),Ato=r(txe," (M2M100 model)"),txe.forEach(t),Lto=i(L),ig=n(L,"LI",{});var axe=s(ig);jle=n(axe,"STRONG",{});var Qmt=s(jle);yto=r(Qmt,"marian"),Qmt.forEach(t),xto=r(axe," \u2014 "),lB=n(axe,"A",{href:!0});var Umt=s(lB);$to=r(Umt,"MarianConfig"),Umt.forEach(t),kto=r(axe," (Marian model)"),axe.forEach(t),Sto=i(L),dg=n(L,"LI",{});var nxe=s(dg);Dle=n(nxe,"STRONG",{});var Hmt=s(Dle);Rto=r(Hmt,"maskformer"),Hmt.forEach(t),Pto=r(nxe," \u2014 "),iB=n(nxe,"A",{href:!0});var Jmt=s(iB);Bto=r(Jmt,"MaskFormerConfig"),Jmt.forEach(t),Ito=r(nxe," (MaskFormer model)"),nxe.forEach(t),Nto=i(L),cg=n(L,"LI",{});var sxe=s(cg);Gle=n(sxe,"STRONG",{});var Ymt=s(Gle);qto=r(Ymt,"mbart"),Ymt.forEach(t),jto=r(sxe," \u2014 "),dB=n(sxe,"A",{href:!0});var Kmt=s(dB);Dto=r(Kmt,"MBartConfig"),Kmt.forEach(t),Gto=r(sxe," (mBART model)"),sxe.forEach(t),Oto=i(L),mg=n(L,"LI",{});var lxe=s(mg);Ole=n(lxe,"STRONG",{});var Zmt=s(Ole);Vto=r(Zmt,"mctct"),Zmt.forEach(t),Xto=r(lxe," \u2014 "),cB=n(lxe,"A",{href:!0});var eft=s(cB);zto=r(eft,"MCTCTConfig"),eft.forEach(t),Wto=r(lxe," (M-CTC-T model)"),lxe.forEach(t),Qto=i(L),fg=n(L,"LI",{});var ixe=s(fg);Vle=n(ixe,"STRONG",{});var oft=s(Vle);Uto=r(oft,"megatron-bert"),oft.forEach(t),Hto=r(ixe," \u2014 "),mB=n(ixe,"A",{href:!0});var rft=s(mB);Jto=r(rft,"MegatronBertConfig"),rft.forEach(t),Yto=r(ixe," (Megatron-BERT model)"),ixe.forEach(t),Kto=i(L),gg=n(L,"LI",{});var dxe=s(gg);Xle=n(dxe,"STRONG",{});var tft=s(Xle);Zto=r(tft,"mobilebert"),tft.forEach(t),eao=r(dxe," \u2014 "),fB=n(dxe,"A",{href:!0});var aft=s(fB);oao=r(aft,"MobileBertConfig"),aft.forEach(t),rao=r(dxe," (MobileBERT model)"),dxe.forEach(t),tao=i(L),hg=n(L,"LI",{});var cxe=s(hg);zle=n(cxe,"STRONG",{});var nft=s(zle);aao=r(nft,"mobilevit"),nft.forEach(t),nao=r(cxe," \u2014 "),gB=n(cxe,"A",{href:!0});var sft=s(gB);sao=r(sft,"MobileViTConfig"),sft.forEach(t),lao=r(cxe," (MobileViT model)"),cxe.forEach(t),iao=i(L),ug=n(L,"LI",{});var mxe=s(ug);Wle=n(mxe,"STRONG",{});var lft=s(Wle);dao=r(lft,"mpnet"),lft.forEach(t),cao=r(mxe," \u2014 "),hB=n(mxe,"A",{href:!0});var ift=s(hB);mao=r(ift,"MPNetConfig"),ift.forEach(t),fao=r(mxe," (MPNet model)"),mxe.forEach(t),gao=i(L),pg=n(L,"LI",{});var fxe=s(pg);Qle=n(fxe,"STRONG",{});var dft=s(Qle);hao=r(dft,"mt5"),dft.forEach(t),uao=r(fxe," \u2014 "),uB=n(fxe,"A",{href:!0});var cft=s(uB);pao=r(cft,"MT5Config"),cft.forEach(t),_ao=r(fxe," (MT5 model)"),fxe.forEach(t),bao=i(L),_g=n(L,"LI",{});var gxe=s(_g);Ule=n(gxe,"STRONG",{});var mft=s(Ule);vao=r(mft,"mvp"),mft.forEach(t),Fao=r(gxe," \u2014 "),pB=n(gxe,"A",{href:!0});var fft=s(pB);Tao=r(fft,"MvpConfig"),fft.forEach(t),Mao=r(gxe," (MVP model)"),gxe.forEach(t),Eao=i(L),bg=n(L,"LI",{});var hxe=s(bg);Hle=n(hxe,"STRONG",{});var gft=s(Hle);Cao=r(gft,"nezha"),gft.forEach(t),wao=r(hxe," \u2014 "),_B=n(hxe,"A",{href:!0});var hft=s(_B);Aao=r(hft,"NezhaConfig"),hft.forEach(t),Lao=r(hxe," (Nezha model)"),hxe.forEach(t),yao=i(L),vg=n(L,"LI",{});var uxe=s(vg);Jle=n(uxe,"STRONG",{});var uft=s(Jle);xao=r(uft,"nystromformer"),uft.forEach(t),$ao=r(uxe," \u2014 "),bB=n(uxe,"A",{href:!0});var pft=s(bB);kao=r(pft,"NystromformerConfig"),pft.forEach(t),Sao=r(uxe," (Nystr\xF6mformer model)"),uxe.forEach(t),Rao=i(L),Fg=n(L,"LI",{});var pxe=s(Fg);Yle=n(pxe,"STRONG",{});var _ft=s(Yle);Pao=r(_ft,"openai-gpt"),_ft.forEach(t),Bao=r(pxe," \u2014 "),vB=n(pxe,"A",{href:!0});var bft=s(vB);Iao=r(bft,"OpenAIGPTConfig"),bft.forEach(t),Nao=r(pxe," (OpenAI GPT model)"),pxe.forEach(t),qao=i(L),Tg=n(L,"LI",{});var _xe=s(Tg);Kle=n(_xe,"STRONG",{});var vft=s(Kle);jao=r(vft,"opt"),vft.forEach(t),Dao=r(_xe," \u2014 "),FB=n(_xe,"A",{href:!0});var Fft=s(FB);Gao=r(Fft,"OPTConfig"),Fft.forEach(t),Oao=r(_xe," (OPT model)"),_xe.forEach(t),Vao=i(L),Mg=n(L,"LI",{});var bxe=s(Mg);Zle=n(bxe,"STRONG",{});var Tft=s(Zle);Xao=r(Tft,"owlvit"),Tft.forEach(t),zao=r(bxe," \u2014 "),TB=n(bxe,"A",{href:!0});var Mft=s(TB);Wao=r(Mft,"OwlViTConfig"),Mft.forEach(t),Qao=r(bxe," (OWL-ViT model)"),bxe.forEach(t),Uao=i(L),Eg=n(L,"LI",{});var vxe=s(Eg);eie=n(vxe,"STRONG",{});var Eft=s(eie);Hao=r(Eft,"pegasus"),Eft.forEach(t),Jao=r(vxe," \u2014 "),MB=n(vxe,"A",{href:!0});var Cft=s(MB);Yao=r(Cft,"PegasusConfig"),Cft.forEach(t),Kao=r(vxe," (Pegasus model)"),vxe.forEach(t),Zao=i(L),Cg=n(L,"LI",{});var Fxe=s(Cg);oie=n(Fxe,"STRONG",{});var wft=s(oie);eno=r(wft,"perceiver"),wft.forEach(t),ono=r(Fxe," \u2014 "),EB=n(Fxe,"A",{href:!0});var Aft=s(EB);rno=r(Aft,"PerceiverConfig"),Aft.forEach(t),tno=r(Fxe," (Perceiver model)"),Fxe.forEach(t),ano=i(L),wg=n(L,"LI",{});var Txe=s(wg);rie=n(Txe,"STRONG",{});var Lft=s(rie);nno=r(Lft,"plbart"),Lft.forEach(t),sno=r(Txe," \u2014 "),CB=n(Txe,"A",{href:!0});var yft=s(CB);lno=r(yft,"PLBartConfig"),yft.forEach(t),ino=r(Txe," (PLBart model)"),Txe.forEach(t),dno=i(L),Ag=n(L,"LI",{});var Mxe=s(Ag);tie=n(Mxe,"STRONG",{});var xft=s(tie);cno=r(xft,"poolformer"),xft.forEach(t),mno=r(Mxe," \u2014 "),wB=n(Mxe,"A",{href:!0});var $ft=s(wB);fno=r($ft,"PoolFormerConfig"),$ft.forEach(t),gno=r(Mxe," (PoolFormer model)"),Mxe.forEach(t),hno=i(L),Lg=n(L,"LI",{});var Exe=s(Lg);aie=n(Exe,"STRONG",{});var kft=s(aie);uno=r(kft,"prophetnet"),kft.forEach(t),pno=r(Exe," \u2014 "),AB=n(Exe,"A",{href:!0});var Sft=s(AB);_no=r(Sft,"ProphetNetConfig"),Sft.forEach(t),bno=r(Exe," (ProphetNet model)"),Exe.forEach(t),vno=i(L),yg=n(L,"LI",{});var Cxe=s(yg);nie=n(Cxe,"STRONG",{});var Rft=s(nie);Fno=r(Rft,"qdqbert"),Rft.forEach(t),Tno=r(Cxe," \u2014 "),LB=n(Cxe,"A",{href:!0});var Pft=s(LB);Mno=r(Pft,"QDQBertConfig"),Pft.forEach(t),Eno=r(Cxe," (QDQBert model)"),Cxe.forEach(t),Cno=i(L),xg=n(L,"LI",{});var wxe=s(xg);sie=n(wxe,"STRONG",{});var Bft=s(sie);wno=r(Bft,"rag"),Bft.forEach(t),Ano=r(wxe," \u2014 "),yB=n(wxe,"A",{href:!0});var Ift=s(yB);Lno=r(Ift,"RagConfig"),Ift.forEach(t),yno=r(wxe," (RAG model)"),wxe.forEach(t),xno=i(L),$g=n(L,"LI",{});var Axe=s($g);lie=n(Axe,"STRONG",{});var Nft=s(lie);$no=r(Nft,"realm"),Nft.forEach(t),kno=r(Axe," \u2014 "),xB=n(Axe,"A",{href:!0});var qft=s(xB);Sno=r(qft,"RealmConfig"),qft.forEach(t),Rno=r(Axe," (REALM model)"),Axe.forEach(t),Pno=i(L),kg=n(L,"LI",{});var Lxe=s(kg);iie=n(Lxe,"STRONG",{});var jft=s(iie);Bno=r(jft,"reformer"),jft.forEach(t),Ino=r(Lxe," \u2014 "),$B=n(Lxe,"A",{href:!0});var Dft=s($B);Nno=r(Dft,"ReformerConfig"),Dft.forEach(t),qno=r(Lxe," (Reformer model)"),Lxe.forEach(t),jno=i(L),Sg=n(L,"LI",{});var yxe=s(Sg);die=n(yxe,"STRONG",{});var Gft=s(die);Dno=r(Gft,"regnet"),Gft.forEach(t),Gno=r(yxe," \u2014 "),kB=n(yxe,"A",{href:!0});var Oft=s(kB);Ono=r(Oft,"RegNetConfig"),Oft.forEach(t),Vno=r(yxe," (RegNet model)"),yxe.forEach(t),Xno=i(L),Rg=n(L,"LI",{});var xxe=s(Rg);cie=n(xxe,"STRONG",{});var Vft=s(cie);zno=r(Vft,"rembert"),Vft.forEach(t),Wno=r(xxe," \u2014 "),SB=n(xxe,"A",{href:!0});var Xft=s(SB);Qno=r(Xft,"RemBertConfig"),Xft.forEach(t),Uno=r(xxe," (RemBERT model)"),xxe.forEach(t),Hno=i(L),Pg=n(L,"LI",{});var $xe=s(Pg);mie=n($xe,"STRONG",{});var zft=s(mie);Jno=r(zft,"resnet"),zft.forEach(t),Yno=r($xe," \u2014 "),RB=n($xe,"A",{href:!0});var Wft=s(RB);Kno=r(Wft,"ResNetConfig"),Wft.forEach(t),Zno=r($xe," (ResNet model)"),$xe.forEach(t),eso=i(L),Bg=n(L,"LI",{});var kxe=s(Bg);fie=n(kxe,"STRONG",{});var Qft=s(fie);oso=r(Qft,"retribert"),Qft.forEach(t),rso=r(kxe," \u2014 "),PB=n(kxe,"A",{href:!0});var Uft=s(PB);tso=r(Uft,"RetriBertConfig"),Uft.forEach(t),aso=r(kxe," (RetriBERT model)"),kxe.forEach(t),nso=i(L),Ig=n(L,"LI",{});var Sxe=s(Ig);gie=n(Sxe,"STRONG",{});var Hft=s(gie);sso=r(Hft,"roberta"),Hft.forEach(t),lso=r(Sxe," \u2014 "),BB=n(Sxe,"A",{href:!0});var Jft=s(BB);iso=r(Jft,"RobertaConfig"),Jft.forEach(t),dso=r(Sxe," (RoBERTa model)"),Sxe.forEach(t),cso=i(L),Ng=n(L,"LI",{});var Rxe=s(Ng);hie=n(Rxe,"STRONG",{});var Yft=s(hie);mso=r(Yft,"roformer"),Yft.forEach(t),fso=r(Rxe," \u2014 "),IB=n(Rxe,"A",{href:!0});var Kft=s(IB);gso=r(Kft,"RoFormerConfig"),Kft.forEach(t),hso=r(Rxe," (RoFormer model)"),Rxe.forEach(t),uso=i(L),qg=n(L,"LI",{});var Pxe=s(qg);uie=n(Pxe,"STRONG",{});var Zft=s(uie);pso=r(Zft,"segformer"),Zft.forEach(t),_so=r(Pxe," \u2014 "),NB=n(Pxe,"A",{href:!0});var egt=s(NB);bso=r(egt,"SegformerConfig"),egt.forEach(t),vso=r(Pxe," (SegFormer model)"),Pxe.forEach(t),Fso=i(L),jg=n(L,"LI",{});var Bxe=s(jg);pie=n(Bxe,"STRONG",{});var ogt=s(pie);Tso=r(ogt,"sew"),ogt.forEach(t),Mso=r(Bxe," \u2014 "),qB=n(Bxe,"A",{href:!0});var rgt=s(qB);Eso=r(rgt,"SEWConfig"),rgt.forEach(t),Cso=r(Bxe," (SEW model)"),Bxe.forEach(t),wso=i(L),Dg=n(L,"LI",{});var Ixe=s(Dg);_ie=n(Ixe,"STRONG",{});var tgt=s(_ie);Aso=r(tgt,"sew-d"),tgt.forEach(t),Lso=r(Ixe," \u2014 "),jB=n(Ixe,"A",{href:!0});var agt=s(jB);yso=r(agt,"SEWDConfig"),agt.forEach(t),xso=r(Ixe," (SEW-D model)"),Ixe.forEach(t),$so=i(L),Gg=n(L,"LI",{});var Nxe=s(Gg);bie=n(Nxe,"STRONG",{});var ngt=s(bie);kso=r(ngt,"speech-encoder-decoder"),ngt.forEach(t),Sso=r(Nxe," \u2014 "),DB=n(Nxe,"A",{href:!0});var sgt=s(DB);Rso=r(sgt,"SpeechEncoderDecoderConfig"),sgt.forEach(t),Pso=r(Nxe," (Speech Encoder decoder model)"),Nxe.forEach(t),Bso=i(L),Og=n(L,"LI",{});var qxe=s(Og);vie=n(qxe,"STRONG",{});var lgt=s(vie);Iso=r(lgt,"speech_to_text"),lgt.forEach(t),Nso=r(qxe," \u2014 "),GB=n(qxe,"A",{href:!0});var igt=s(GB);qso=r(igt,"Speech2TextConfig"),igt.forEach(t),jso=r(qxe," (Speech2Text model)"),qxe.forEach(t),Dso=i(L),Vg=n(L,"LI",{});var jxe=s(Vg);Fie=n(jxe,"STRONG",{});var dgt=s(Fie);Gso=r(dgt,"speech_to_text_2"),dgt.forEach(t),Oso=r(jxe," \u2014 "),OB=n(jxe,"A",{href:!0});var cgt=s(OB);Vso=r(cgt,"Speech2Text2Config"),cgt.forEach(t),Xso=r(jxe," (Speech2Text2 model)"),jxe.forEach(t),zso=i(L),Xg=n(L,"LI",{});var Dxe=s(Xg);Tie=n(Dxe,"STRONG",{});var mgt=s(Tie);Wso=r(mgt,"splinter"),mgt.forEach(t),Qso=r(Dxe," \u2014 "),VB=n(Dxe,"A",{href:!0});var fgt=s(VB);Uso=r(fgt,"SplinterConfig"),fgt.forEach(t),Hso=r(Dxe," (Splinter model)"),Dxe.forEach(t),Jso=i(L),zg=n(L,"LI",{});var Gxe=s(zg);Mie=n(Gxe,"STRONG",{});var ggt=s(Mie);Yso=r(ggt,"squeezebert"),ggt.forEach(t),Kso=r(Gxe," \u2014 "),XB=n(Gxe,"A",{href:!0});var hgt=s(XB);Zso=r(hgt,"SqueezeBertConfig"),hgt.forEach(t),elo=r(Gxe," (SqueezeBERT model)"),Gxe.forEach(t),olo=i(L),Wg=n(L,"LI",{});var Oxe=s(Wg);Eie=n(Oxe,"STRONG",{});var ugt=s(Eie);rlo=r(ugt,"swin"),ugt.forEach(t),tlo=r(Oxe," \u2014 "),zB=n(Oxe,"A",{href:!0});var pgt=s(zB);alo=r(pgt,"SwinConfig"),pgt.forEach(t),nlo=r(Oxe," (Swin Transformer model)"),Oxe.forEach(t),slo=i(L),Qg=n(L,"LI",{});var Vxe=s(Qg);Cie=n(Vxe,"STRONG",{});var _gt=s(Cie);llo=r(_gt,"swinv2"),_gt.forEach(t),ilo=r(Vxe," \u2014 "),WB=n(Vxe,"A",{href:!0});var bgt=s(WB);dlo=r(bgt,"Swinv2Config"),bgt.forEach(t),clo=r(Vxe," (Swin Transformer V2 model)"),Vxe.forEach(t),mlo=i(L),Ug=n(L,"LI",{});var Xxe=s(Ug);wie=n(Xxe,"STRONG",{});var vgt=s(wie);flo=r(vgt,"t5"),vgt.forEach(t),glo=r(Xxe," \u2014 "),QB=n(Xxe,"A",{href:!0});var Fgt=s(QB);hlo=r(Fgt,"T5Config"),Fgt.forEach(t),ulo=r(Xxe," (T5 model)"),Xxe.forEach(t),plo=i(L),Hg=n(L,"LI",{});var zxe=s(Hg);Aie=n(zxe,"STRONG",{});var Tgt=s(Aie);_lo=r(Tgt,"tapas"),Tgt.forEach(t),blo=r(zxe," \u2014 "),UB=n(zxe,"A",{href:!0});var Mgt=s(UB);vlo=r(Mgt,"TapasConfig"),Mgt.forEach(t),Flo=r(zxe," (TAPAS model)"),zxe.forEach(t),Tlo=i(L),Jg=n(L,"LI",{});var Wxe=s(Jg);Lie=n(Wxe,"STRONG",{});var Egt=s(Lie);Mlo=r(Egt,"trajectory_transformer"),Egt.forEach(t),Elo=r(Wxe," \u2014 "),HB=n(Wxe,"A",{href:!0});var Cgt=s(HB);Clo=r(Cgt,"TrajectoryTransformerConfig"),Cgt.forEach(t),wlo=r(Wxe," (Trajectory Transformer model)"),Wxe.forEach(t),Alo=i(L),Yg=n(L,"LI",{});var Qxe=s(Yg);yie=n(Qxe,"STRONG",{});var wgt=s(yie);Llo=r(wgt,"transfo-xl"),wgt.forEach(t),ylo=r(Qxe," \u2014 "),JB=n(Qxe,"A",{href:!0});var Agt=s(JB);xlo=r(Agt,"TransfoXLConfig"),Agt.forEach(t),$lo=r(Qxe," (Transformer-XL model)"),Qxe.forEach(t),klo=i(L),Kg=n(L,"LI",{});var Uxe=s(Kg);xie=n(Uxe,"STRONG",{});var Lgt=s(xie);Slo=r(Lgt,"trocr"),Lgt.forEach(t),Rlo=r(Uxe," \u2014 "),YB=n(Uxe,"A",{href:!0});var ygt=s(YB);Plo=r(ygt,"TrOCRConfig"),ygt.forEach(t),Blo=r(Uxe," (TrOCR model)"),Uxe.forEach(t),Ilo=i(L),Zg=n(L,"LI",{});var Hxe=s(Zg);$ie=n(Hxe,"STRONG",{});var xgt=s($ie);Nlo=r(xgt,"unispeech"),xgt.forEach(t),qlo=r(Hxe," \u2014 "),KB=n(Hxe,"A",{href:!0});var $gt=s(KB);jlo=r($gt,"UniSpeechConfig"),$gt.forEach(t),Dlo=r(Hxe," (UniSpeech model)"),Hxe.forEach(t),Glo=i(L),eh=n(L,"LI",{});var Jxe=s(eh);kie=n(Jxe,"STRONG",{});var kgt=s(kie);Olo=r(kgt,"unispeech-sat"),kgt.forEach(t),Vlo=r(Jxe," \u2014 "),ZB=n(Jxe,"A",{href:!0});var Sgt=s(ZB);Xlo=r(Sgt,"UniSpeechSatConfig"),Sgt.forEach(t),zlo=r(Jxe," (UniSpeechSat model)"),Jxe.forEach(t),Wlo=i(L),oh=n(L,"LI",{});var Yxe=s(oh);Sie=n(Yxe,"STRONG",{});var Rgt=s(Sie);Qlo=r(Rgt,"van"),Rgt.forEach(t),Ulo=r(Yxe," \u2014 "),eI=n(Yxe,"A",{href:!0});var Pgt=s(eI);Hlo=r(Pgt,"VanConfig"),Pgt.forEach(t),Jlo=r(Yxe," (VAN model)"),Yxe.forEach(t),Ylo=i(L),rh=n(L,"LI",{});var Kxe=s(rh);Rie=n(Kxe,"STRONG",{});var Bgt=s(Rie);Klo=r(Bgt,"videomae"),Bgt.forEach(t),Zlo=r(Kxe," \u2014 "),oI=n(Kxe,"A",{href:!0});var Igt=s(oI);eio=r(Igt,"VideoMAEConfig"),Igt.forEach(t),oio=r(Kxe," (VideoMAE model)"),Kxe.forEach(t),rio=i(L),th=n(L,"LI",{});var Zxe=s(th);Pie=n(Zxe,"STRONG",{});var Ngt=s(Pie);tio=r(Ngt,"vilt"),Ngt.forEach(t),aio=r(Zxe," \u2014 "),rI=n(Zxe,"A",{href:!0});var qgt=s(rI);nio=r(qgt,"ViltConfig"),qgt.forEach(t),sio=r(Zxe," (ViLT model)"),Zxe.forEach(t),lio=i(L),ah=n(L,"LI",{});var e$e=s(ah);Bie=n(e$e,"STRONG",{});var jgt=s(Bie);iio=r(jgt,"vision-encoder-decoder"),jgt.forEach(t),dio=r(e$e," \u2014 "),tI=n(e$e,"A",{href:!0});var Dgt=s(tI);cio=r(Dgt,"VisionEncoderDecoderConfig"),Dgt.forEach(t),mio=r(e$e," (Vision Encoder decoder model)"),e$e.forEach(t),fio=i(L),nh=n(L,"LI",{});var o$e=s(nh);Iie=n(o$e,"STRONG",{});var Ggt=s(Iie);gio=r(Ggt,"vision-text-dual-encoder"),Ggt.forEach(t),hio=r(o$e," \u2014 "),aI=n(o$e,"A",{href:!0});var Ogt=s(aI);uio=r(Ogt,"VisionTextDualEncoderConfig"),Ogt.forEach(t),pio=r(o$e," (VisionTextDualEncoder model)"),o$e.forEach(t),_io=i(L),sh=n(L,"LI",{});var r$e=s(sh);Nie=n(r$e,"STRONG",{});var Vgt=s(Nie);bio=r(Vgt,"visual_bert"),Vgt.forEach(t),vio=r(r$e," \u2014 "),nI=n(r$e,"A",{href:!0});var Xgt=s(nI);Fio=r(Xgt,"VisualBertConfig"),Xgt.forEach(t),Tio=r(r$e," (VisualBERT model)"),r$e.forEach(t),Mio=i(L),lh=n(L,"LI",{});var t$e=s(lh);qie=n(t$e,"STRONG",{});var zgt=s(qie);Eio=r(zgt,"vit"),zgt.forEach(t),Cio=r(t$e," \u2014 "),sI=n(t$e,"A",{href:!0});var Wgt=s(sI);wio=r(Wgt,"ViTConfig"),Wgt.forEach(t),Aio=r(t$e," (ViT model)"),t$e.forEach(t),Lio=i(L),ih=n(L,"LI",{});var a$e=s(ih);jie=n(a$e,"STRONG",{});var Qgt=s(jie);yio=r(Qgt,"vit_mae"),Qgt.forEach(t),xio=r(a$e," \u2014 "),lI=n(a$e,"A",{href:!0});var Ugt=s(lI);$io=r(Ugt,"ViTMAEConfig"),Ugt.forEach(t),kio=r(a$e," (ViTMAE model)"),a$e.forEach(t),Sio=i(L),dh=n(L,"LI",{});var n$e=s(dh);Die=n(n$e,"STRONG",{});var Hgt=s(Die);Rio=r(Hgt,"wav2vec2"),Hgt.forEach(t),Pio=r(n$e," \u2014 "),iI=n(n$e,"A",{href:!0});var Jgt=s(iI);Bio=r(Jgt,"Wav2Vec2Config"),Jgt.forEach(t),Iio=r(n$e," (Wav2Vec2 model)"),n$e.forEach(t),Nio=i(L),ch=n(L,"LI",{});var s$e=s(ch);Gie=n(s$e,"STRONG",{});var Ygt=s(Gie);qio=r(Ygt,"wav2vec2-conformer"),Ygt.forEach(t),jio=r(s$e," \u2014 "),dI=n(s$e,"A",{href:!0});var Kgt=s(dI);Dio=r(Kgt,"Wav2Vec2ConformerConfig"),Kgt.forEach(t),Gio=r(s$e," (Wav2Vec2-Conformer model)"),s$e.forEach(t),Oio=i(L),mh=n(L,"LI",{});var l$e=s(mh);Oie=n(l$e,"STRONG",{});var Zgt=s(Oie);Vio=r(Zgt,"wavlm"),Zgt.forEach(t),Xio=r(l$e," \u2014 "),cI=n(l$e,"A",{href:!0});var eht=s(cI);zio=r(eht,"WavLMConfig"),eht.forEach(t),Wio=r(l$e," (WavLM model)"),l$e.forEach(t),Qio=i(L),fh=n(L,"LI",{});var i$e=s(fh);Vie=n(i$e,"STRONG",{});var oht=s(Vie);Uio=r(oht,"xglm"),oht.forEach(t),Hio=r(i$e," \u2014 "),mI=n(i$e,"A",{href:!0});var rht=s(mI);Jio=r(rht,"XGLMConfig"),rht.forEach(t),Yio=r(i$e," (XGLM model)"),i$e.forEach(t),Kio=i(L),gh=n(L,"LI",{});var d$e=s(gh);Xie=n(d$e,"STRONG",{});var tht=s(Xie);Zio=r(tht,"xlm"),tht.forEach(t),edo=r(d$e," \u2014 "),fI=n(d$e,"A",{href:!0});var aht=s(fI);odo=r(aht,"XLMConfig"),aht.forEach(t),rdo=r(d$e," (XLM model)"),d$e.forEach(t),tdo=i(L),hh=n(L,"LI",{});var c$e=s(hh);zie=n(c$e,"STRONG",{});var nht=s(zie);ado=r(nht,"xlm-prophetnet"),nht.forEach(t),ndo=r(c$e," \u2014 "),gI=n(c$e,"A",{href:!0});var sht=s(gI);sdo=r(sht,"XLMProphetNetConfig"),sht.forEach(t),ldo=r(c$e," (XLM-ProphetNet model)"),c$e.forEach(t),ido=i(L),uh=n(L,"LI",{});var m$e=s(uh);Wie=n(m$e,"STRONG",{});var lht=s(Wie);ddo=r(lht,"xlm-roberta"),lht.forEach(t),cdo=r(m$e," \u2014 "),hI=n(m$e,"A",{href:!0});var iht=s(hI);mdo=r(iht,"XLMRobertaConfig"),iht.forEach(t),fdo=r(m$e," (XLM-RoBERTa model)"),m$e.forEach(t),gdo=i(L),ph=n(L,"LI",{});var f$e=s(ph);Qie=n(f$e,"STRONG",{});var dht=s(Qie);hdo=r(dht,"xlm-roberta-xl"),dht.forEach(t),udo=r(f$e," \u2014 "),uI=n(f$e,"A",{href:!0});var cht=s(uI);pdo=r(cht,"XLMRobertaXLConfig"),cht.forEach(t),_do=r(f$e," (XLM-RoBERTa-XL model)"),f$e.forEach(t),bdo=i(L),_h=n(L,"LI",{});var g$e=s(_h);Uie=n(g$e,"STRONG",{});var mht=s(Uie);vdo=r(mht,"xlnet"),mht.forEach(t),Fdo=r(g$e," \u2014 "),pI=n(g$e,"A",{href:!0});var fht=s(pI);Tdo=r(fht,"XLNetConfig"),fht.forEach(t),Mdo=r(g$e," (XLNet model)"),g$e.forEach(t),Edo=i(L),bh=n(L,"LI",{});var h$e=s(bh);Hie=n(h$e,"STRONG",{});var ght=s(Hie);Cdo=r(ght,"yolos"),ght.forEach(t),wdo=r(h$e," \u2014 "),_I=n(h$e,"A",{href:!0});var hht=s(_I);Ado=r(hht,"YolosConfig"),hht.forEach(t),Ldo=r(h$e," (YOLOS model)"),h$e.forEach(t),ydo=i(L),vh=n(L,"LI",{});var u$e=s(vh);Jie=n(u$e,"STRONG",{});var uht=s(Jie);xdo=r(uht,"yoso"),uht.forEach(t),$do=r(u$e," \u2014 "),bI=n(u$e,"A",{href:!0});var pht=s(bI);kdo=r(pht,"YosoConfig"),pht.forEach(t),Sdo=r(u$e," (YOSO model)"),u$e.forEach(t),L.forEach(t),Rdo=i(ct),T(Fh.$$.fragment,ct),ct.forEach(t),Pdo=i(dt),Th=n(dt,"DIV",{class:!0});var PHe=s(Th);T(p8.$$.fragment,PHe),Bdo=i(PHe),Yie=n(PHe,"P",{});var _ht=s(Yie);Ido=r(_ht,"Register a new configuration for this class."),_ht.forEach(t),PHe.forEach(t),dt.forEach(t),kQe=i(m),Ki=n(m,"H2",{class:!0});var BHe=s(Ki);Mh=n(BHe,"A",{id:!0,class:!0,href:!0});var bht=s(Mh);Kie=n(bht,"SPAN",{});var vht=s(Kie);T(_8.$$.fragment,vht),vht.forEach(t),bht.forEach(t),Ndo=i(BHe),Zie=n(BHe,"SPAN",{});var Fht=s(Zie);qdo=r(Fht,"AutoTokenizer"),Fht.forEach(t),BHe.forEach(t),SQe=i(m),xo=n(m,"DIV",{class:!0});var cl=s(xo);T(b8.$$.fragment,cl),jdo=i(cl),v8=n(cl,"P",{});var IHe=s(v8);Ddo=r(IHe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),vI=n(IHe,"A",{href:!0});var Tht=s(vI);Gdo=r(Tht,"AutoTokenizer.from_pretrained()"),Tht.forEach(t),Odo=r(IHe," class method."),IHe.forEach(t),Vdo=i(cl),F8=n(cl,"P",{});var NHe=s(F8);Xdo=r(NHe,"This class cannot be instantiated directly using "),ede=n(NHe,"CODE",{});var Mht=s(ede);zdo=r(Mht,"__init__()"),Mht.forEach(t),Wdo=r(NHe," (throws an error)."),NHe.forEach(t),Qdo=i(cl),Sr=n(cl,"DIV",{class:!0});var ml=s(Sr);T(T8.$$.fragment,ml),Udo=i(ml),ode=n(ml,"P",{});var Eht=s(ode);Hdo=r(Eht,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Eht.forEach(t),Jdo=i(ml),Ga=n(ml,"P",{});var sL=s(Ga);Ydo=r(sL,"The tokenizer class to instantiate is selected based on the "),rde=n(sL,"CODE",{});var Cht=s(rde);Kdo=r(Cht,"model_type"),Cht.forEach(t),Zdo=r(sL,` property of the config object (either
passed as an argument or loaded from `),tde=n(sL,"CODE",{});var wht=s(tde);eco=r(wht,"pretrained_model_name_or_path"),wht.forEach(t),oco=r(sL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ade=n(sL,"CODE",{});var Aht=s(ade);rco=r(Aht,"pretrained_model_name_or_path"),Aht.forEach(t),tco=r(sL,":"),sL.forEach(t),aco=i(ml),k=n(ml,"UL",{});var S=s(k);Hn=n(S,"LI",{});var qS=s(Hn);nde=n(qS,"STRONG",{});var Lht=s(nde);nco=r(Lht,"albert"),Lht.forEach(t),sco=r(qS," \u2014 "),FI=n(qS,"A",{href:!0});var yht=s(FI);lco=r(yht,"AlbertTokenizer"),yht.forEach(t),ico=r(qS," or "),TI=n(qS,"A",{href:!0});var xht=s(TI);dco=r(xht,"AlbertTokenizerFast"),xht.forEach(t),cco=r(qS," (ALBERT model)"),qS.forEach(t),mco=i(S),Jn=n(S,"LI",{});var jS=s(Jn);sde=n(jS,"STRONG",{});var $ht=s(sde);fco=r($ht,"bart"),$ht.forEach(t),gco=r(jS," \u2014 "),MI=n(jS,"A",{href:!0});var kht=s(MI);hco=r(kht,"BartTokenizer"),kht.forEach(t),uco=r(jS," or "),EI=n(jS,"A",{href:!0});var Sht=s(EI);pco=r(Sht,"BartTokenizerFast"),Sht.forEach(t),_co=r(jS," (BART model)"),jS.forEach(t),bco=i(S),Yn=n(S,"LI",{});var DS=s(Yn);lde=n(DS,"STRONG",{});var Rht=s(lde);vco=r(Rht,"barthez"),Rht.forEach(t),Fco=r(DS," \u2014 "),CI=n(DS,"A",{href:!0});var Pht=s(CI);Tco=r(Pht,"BarthezTokenizer"),Pht.forEach(t),Mco=r(DS," or "),wI=n(DS,"A",{href:!0});var Bht=s(wI);Eco=r(Bht,"BarthezTokenizerFast"),Bht.forEach(t),Cco=r(DS," (BARThez model)"),DS.forEach(t),wco=i(S),Eh=n(S,"LI",{});var p$e=s(Eh);ide=n(p$e,"STRONG",{});var Iht=s(ide);Aco=r(Iht,"bartpho"),Iht.forEach(t),Lco=r(p$e," \u2014 "),AI=n(p$e,"A",{href:!0});var Nht=s(AI);yco=r(Nht,"BartphoTokenizer"),Nht.forEach(t),xco=r(p$e," (BARTpho model)"),p$e.forEach(t),$co=i(S),Kn=n(S,"LI",{});var GS=s(Kn);dde=n(GS,"STRONG",{});var qht=s(dde);kco=r(qht,"bert"),qht.forEach(t),Sco=r(GS," \u2014 "),LI=n(GS,"A",{href:!0});var jht=s(LI);Rco=r(jht,"BertTokenizer"),jht.forEach(t),Pco=r(GS," or "),yI=n(GS,"A",{href:!0});var Dht=s(yI);Bco=r(Dht,"BertTokenizerFast"),Dht.forEach(t),Ico=r(GS," (BERT model)"),GS.forEach(t),Nco=i(S),Ch=n(S,"LI",{});var _$e=s(Ch);cde=n(_$e,"STRONG",{});var Ght=s(cde);qco=r(Ght,"bert-generation"),Ght.forEach(t),jco=r(_$e," \u2014 "),xI=n(_$e,"A",{href:!0});var Oht=s(xI);Dco=r(Oht,"BertGenerationTokenizer"),Oht.forEach(t),Gco=r(_$e," (Bert Generation model)"),_$e.forEach(t),Oco=i(S),wh=n(S,"LI",{});var b$e=s(wh);mde=n(b$e,"STRONG",{});var Vht=s(mde);Vco=r(Vht,"bert-japanese"),Vht.forEach(t),Xco=r(b$e," \u2014 "),$I=n(b$e,"A",{href:!0});var Xht=s($I);zco=r(Xht,"BertJapaneseTokenizer"),Xht.forEach(t),Wco=r(b$e," (BertJapanese model)"),b$e.forEach(t),Qco=i(S),Ah=n(S,"LI",{});var v$e=s(Ah);fde=n(v$e,"STRONG",{});var zht=s(fde);Uco=r(zht,"bertweet"),zht.forEach(t),Hco=r(v$e," \u2014 "),kI=n(v$e,"A",{href:!0});var Wht=s(kI);Jco=r(Wht,"BertweetTokenizer"),Wht.forEach(t),Yco=r(v$e," (BERTweet model)"),v$e.forEach(t),Kco=i(S),Zn=n(S,"LI",{});var OS=s(Zn);gde=n(OS,"STRONG",{});var Qht=s(gde);Zco=r(Qht,"big_bird"),Qht.forEach(t),emo=r(OS," \u2014 "),SI=n(OS,"A",{href:!0});var Uht=s(SI);omo=r(Uht,"BigBirdTokenizer"),Uht.forEach(t),rmo=r(OS," or "),RI=n(OS,"A",{href:!0});var Hht=s(RI);tmo=r(Hht,"BigBirdTokenizerFast"),Hht.forEach(t),amo=r(OS," (BigBird model)"),OS.forEach(t),nmo=i(S),es=n(S,"LI",{});var VS=s(es);hde=n(VS,"STRONG",{});var Jht=s(hde);smo=r(Jht,"bigbird_pegasus"),Jht.forEach(t),lmo=r(VS," \u2014 "),PI=n(VS,"A",{href:!0});var Yht=s(PI);imo=r(Yht,"PegasusTokenizer"),Yht.forEach(t),dmo=r(VS," or "),BI=n(VS,"A",{href:!0});var Kht=s(BI);cmo=r(Kht,"PegasusTokenizerFast"),Kht.forEach(t),mmo=r(VS," (BigBird-Pegasus model)"),VS.forEach(t),fmo=i(S),os=n(S,"LI",{});var XS=s(os);ude=n(XS,"STRONG",{});var Zht=s(ude);gmo=r(Zht,"blenderbot"),Zht.forEach(t),hmo=r(XS," \u2014 "),II=n(XS,"A",{href:!0});var eut=s(II);umo=r(eut,"BlenderbotTokenizer"),eut.forEach(t),pmo=r(XS," or "),NI=n(XS,"A",{href:!0});var out=s(NI);_mo=r(out,"BlenderbotTokenizerFast"),out.forEach(t),bmo=r(XS," (Blenderbot model)"),XS.forEach(t),vmo=i(S),Lh=n(S,"LI",{});var F$e=s(Lh);pde=n(F$e,"STRONG",{});var rut=s(pde);Fmo=r(rut,"blenderbot-small"),rut.forEach(t),Tmo=r(F$e," \u2014 "),qI=n(F$e,"A",{href:!0});var tut=s(qI);Mmo=r(tut,"BlenderbotSmallTokenizer"),tut.forEach(t),Emo=r(F$e," (BlenderbotSmall model)"),F$e.forEach(t),Cmo=i(S),yh=n(S,"LI",{});var T$e=s(yh);_de=n(T$e,"STRONG",{});var aut=s(_de);wmo=r(aut,"bloom"),aut.forEach(t),Amo=r(T$e," \u2014 "),jI=n(T$e,"A",{href:!0});var nut=s(jI);Lmo=r(nut,"BloomTokenizerFast"),nut.forEach(t),ymo=r(T$e," (BLOOM model)"),T$e.forEach(t),xmo=i(S),xh=n(S,"LI",{});var M$e=s(xh);bde=n(M$e,"STRONG",{});var sut=s(bde);$mo=r(sut,"byt5"),sut.forEach(t),kmo=r(M$e," \u2014 "),DI=n(M$e,"A",{href:!0});var lut=s(DI);Smo=r(lut,"ByT5Tokenizer"),lut.forEach(t),Rmo=r(M$e," (ByT5 model)"),M$e.forEach(t),Pmo=i(S),rs=n(S,"LI",{});var zS=s(rs);vde=n(zS,"STRONG",{});var iut=s(vde);Bmo=r(iut,"camembert"),iut.forEach(t),Imo=r(zS," \u2014 "),GI=n(zS,"A",{href:!0});var dut=s(GI);Nmo=r(dut,"CamembertTokenizer"),dut.forEach(t),qmo=r(zS," or "),OI=n(zS,"A",{href:!0});var cut=s(OI);jmo=r(cut,"CamembertTokenizerFast"),cut.forEach(t),Dmo=r(zS," (CamemBERT model)"),zS.forEach(t),Gmo=i(S),$h=n(S,"LI",{});var E$e=s($h);Fde=n(E$e,"STRONG",{});var mut=s(Fde);Omo=r(mut,"canine"),mut.forEach(t),Vmo=r(E$e," \u2014 "),VI=n(E$e,"A",{href:!0});var fut=s(VI);Xmo=r(fut,"CanineTokenizer"),fut.forEach(t),zmo=r(E$e," (CANINE model)"),E$e.forEach(t),Wmo=i(S),ts=n(S,"LI",{});var WS=s(ts);Tde=n(WS,"STRONG",{});var gut=s(Tde);Qmo=r(gut,"clip"),gut.forEach(t),Umo=r(WS," \u2014 "),XI=n(WS,"A",{href:!0});var hut=s(XI);Hmo=r(hut,"CLIPTokenizer"),hut.forEach(t),Jmo=r(WS," or "),zI=n(WS,"A",{href:!0});var uut=s(zI);Ymo=r(uut,"CLIPTokenizerFast"),uut.forEach(t),Kmo=r(WS," (CLIP model)"),WS.forEach(t),Zmo=i(S),as=n(S,"LI",{});var QS=s(as);Mde=n(QS,"STRONG",{});var put=s(Mde);efo=r(put,"codegen"),put.forEach(t),ofo=r(QS," \u2014 "),WI=n(QS,"A",{href:!0});var _ut=s(WI);rfo=r(_ut,"CodeGenTokenizer"),_ut.forEach(t),tfo=r(QS," or "),QI=n(QS,"A",{href:!0});var but=s(QI);afo=r(but,"CodeGenTokenizerFast"),but.forEach(t),nfo=r(QS," (CodeGen model)"),QS.forEach(t),sfo=i(S),ns=n(S,"LI",{});var US=s(ns);Ede=n(US,"STRONG",{});var vut=s(Ede);lfo=r(vut,"convbert"),vut.forEach(t),ifo=r(US," \u2014 "),UI=n(US,"A",{href:!0});var Fut=s(UI);dfo=r(Fut,"ConvBertTokenizer"),Fut.forEach(t),cfo=r(US," or "),HI=n(US,"A",{href:!0});var Tut=s(HI);mfo=r(Tut,"ConvBertTokenizerFast"),Tut.forEach(t),ffo=r(US," (ConvBERT model)"),US.forEach(t),gfo=i(S),ss=n(S,"LI",{});var HS=s(ss);Cde=n(HS,"STRONG",{});var Mut=s(Cde);hfo=r(Mut,"cpm"),Mut.forEach(t),ufo=r(HS," \u2014 "),JI=n(HS,"A",{href:!0});var Eut=s(JI);pfo=r(Eut,"CpmTokenizer"),Eut.forEach(t),_fo=r(HS," or "),YI=n(HS,"A",{href:!0});var Cut=s(YI);bfo=r(Cut,"CpmTokenizerFast"),Cut.forEach(t),vfo=r(HS," (CPM model)"),HS.forEach(t),Ffo=i(S),kh=n(S,"LI",{});var C$e=s(kh);wde=n(C$e,"STRONG",{});var wut=s(wde);Tfo=r(wut,"ctrl"),wut.forEach(t),Mfo=r(C$e," \u2014 "),KI=n(C$e,"A",{href:!0});var Aut=s(KI);Efo=r(Aut,"CTRLTokenizer"),Aut.forEach(t),Cfo=r(C$e," (CTRL model)"),C$e.forEach(t),wfo=i(S),ls=n(S,"LI",{});var JS=s(ls);Ade=n(JS,"STRONG",{});var Lut=s(Ade);Afo=r(Lut,"data2vec-text"),Lut.forEach(t),Lfo=r(JS," \u2014 "),ZI=n(JS,"A",{href:!0});var yut=s(ZI);yfo=r(yut,"RobertaTokenizer"),yut.forEach(t),xfo=r(JS," or "),eN=n(JS,"A",{href:!0});var xut=s(eN);$fo=r(xut,"RobertaTokenizerFast"),xut.forEach(t),kfo=r(JS," (Data2VecText model)"),JS.forEach(t),Sfo=i(S),is=n(S,"LI",{});var YS=s(is);Lde=n(YS,"STRONG",{});var $ut=s(Lde);Rfo=r($ut,"deberta"),$ut.forEach(t),Pfo=r(YS," \u2014 "),oN=n(YS,"A",{href:!0});var kut=s(oN);Bfo=r(kut,"DebertaTokenizer"),kut.forEach(t),Ifo=r(YS," or "),rN=n(YS,"A",{href:!0});var Sut=s(rN);Nfo=r(Sut,"DebertaTokenizerFast"),Sut.forEach(t),qfo=r(YS," (DeBERTa model)"),YS.forEach(t),jfo=i(S),ds=n(S,"LI",{});var KS=s(ds);yde=n(KS,"STRONG",{});var Rut=s(yde);Dfo=r(Rut,"deberta-v2"),Rut.forEach(t),Gfo=r(KS," \u2014 "),tN=n(KS,"A",{href:!0});var Put=s(tN);Ofo=r(Put,"DebertaV2Tokenizer"),Put.forEach(t),Vfo=r(KS," or "),aN=n(KS,"A",{href:!0});var But=s(aN);Xfo=r(But,"DebertaV2TokenizerFast"),But.forEach(t),zfo=r(KS," (DeBERTa-v2 model)"),KS.forEach(t),Wfo=i(S),cs=n(S,"LI",{});var ZS=s(cs);xde=n(ZS,"STRONG",{});var Iut=s(xde);Qfo=r(Iut,"distilbert"),Iut.forEach(t),Ufo=r(ZS," \u2014 "),nN=n(ZS,"A",{href:!0});var Nut=s(nN);Hfo=r(Nut,"DistilBertTokenizer"),Nut.forEach(t),Jfo=r(ZS," or "),sN=n(ZS,"A",{href:!0});var qut=s(sN);Yfo=r(qut,"DistilBertTokenizerFast"),qut.forEach(t),Kfo=r(ZS," (DistilBERT model)"),ZS.forEach(t),Zfo=i(S),ms=n(S,"LI",{});var eR=s(ms);$de=n(eR,"STRONG",{});var jut=s($de);ego=r(jut,"dpr"),jut.forEach(t),ogo=r(eR," \u2014 "),lN=n(eR,"A",{href:!0});var Dut=s(lN);rgo=r(Dut,"DPRQuestionEncoderTokenizer"),Dut.forEach(t),tgo=r(eR," or "),iN=n(eR,"A",{href:!0});var Gut=s(iN);ago=r(Gut,"DPRQuestionEncoderTokenizerFast"),Gut.forEach(t),ngo=r(eR," (DPR model)"),eR.forEach(t),sgo=i(S),fs=n(S,"LI",{});var oR=s(fs);kde=n(oR,"STRONG",{});var Out=s(kde);lgo=r(Out,"electra"),Out.forEach(t),igo=r(oR," \u2014 "),dN=n(oR,"A",{href:!0});var Vut=s(dN);dgo=r(Vut,"ElectraTokenizer"),Vut.forEach(t),cgo=r(oR," or "),cN=n(oR,"A",{href:!0});var Xut=s(cN);mgo=r(Xut,"ElectraTokenizerFast"),Xut.forEach(t),fgo=r(oR," (ELECTRA model)"),oR.forEach(t),ggo=i(S),Sh=n(S,"LI",{});var w$e=s(Sh);Sde=n(w$e,"STRONG",{});var zut=s(Sde);hgo=r(zut,"flaubert"),zut.forEach(t),ugo=r(w$e," \u2014 "),mN=n(w$e,"A",{href:!0});var Wut=s(mN);pgo=r(Wut,"FlaubertTokenizer"),Wut.forEach(t),_go=r(w$e," (FlauBERT model)"),w$e.forEach(t),bgo=i(S),gs=n(S,"LI",{});var rR=s(gs);Rde=n(rR,"STRONG",{});var Qut=s(Rde);vgo=r(Qut,"fnet"),Qut.forEach(t),Fgo=r(rR," \u2014 "),fN=n(rR,"A",{href:!0});var Uut=s(fN);Tgo=r(Uut,"FNetTokenizer"),Uut.forEach(t),Mgo=r(rR," or "),gN=n(rR,"A",{href:!0});var Hut=s(gN);Ego=r(Hut,"FNetTokenizerFast"),Hut.forEach(t),Cgo=r(rR," (FNet model)"),rR.forEach(t),wgo=i(S),Rh=n(S,"LI",{});var A$e=s(Rh);Pde=n(A$e,"STRONG",{});var Jut=s(Pde);Ago=r(Jut,"fsmt"),Jut.forEach(t),Lgo=r(A$e," \u2014 "),hN=n(A$e,"A",{href:!0});var Yut=s(hN);ygo=r(Yut,"FSMTTokenizer"),Yut.forEach(t),xgo=r(A$e," (FairSeq Machine-Translation model)"),A$e.forEach(t),$go=i(S),hs=n(S,"LI",{});var tR=s(hs);Bde=n(tR,"STRONG",{});var Kut=s(Bde);kgo=r(Kut,"funnel"),Kut.forEach(t),Sgo=r(tR," \u2014 "),uN=n(tR,"A",{href:!0});var Zut=s(uN);Rgo=r(Zut,"FunnelTokenizer"),Zut.forEach(t),Pgo=r(tR," or "),pN=n(tR,"A",{href:!0});var ept=s(pN);Bgo=r(ept,"FunnelTokenizerFast"),ept.forEach(t),Igo=r(tR," (Funnel Transformer model)"),tR.forEach(t),Ngo=i(S),us=n(S,"LI",{});var aR=s(us);Ide=n(aR,"STRONG",{});var opt=s(Ide);qgo=r(opt,"gpt2"),opt.forEach(t),jgo=r(aR," \u2014 "),_N=n(aR,"A",{href:!0});var rpt=s(_N);Dgo=r(rpt,"GPT2Tokenizer"),rpt.forEach(t),Ggo=r(aR," or "),bN=n(aR,"A",{href:!0});var tpt=s(bN);Ogo=r(tpt,"GPT2TokenizerFast"),tpt.forEach(t),Vgo=r(aR," (OpenAI GPT-2 model)"),aR.forEach(t),Xgo=i(S),ps=n(S,"LI",{});var nR=s(ps);Nde=n(nR,"STRONG",{});var apt=s(Nde);zgo=r(apt,"gpt_neo"),apt.forEach(t),Wgo=r(nR," \u2014 "),vN=n(nR,"A",{href:!0});var npt=s(vN);Qgo=r(npt,"GPT2Tokenizer"),npt.forEach(t),Ugo=r(nR," or "),FN=n(nR,"A",{href:!0});var spt=s(FN);Hgo=r(spt,"GPT2TokenizerFast"),spt.forEach(t),Jgo=r(nR," (GPT Neo model)"),nR.forEach(t),Ygo=i(S),Ph=n(S,"LI",{});var L$e=s(Ph);qde=n(L$e,"STRONG",{});var lpt=s(qde);Kgo=r(lpt,"gpt_neox"),lpt.forEach(t),Zgo=r(L$e," \u2014 "),TN=n(L$e,"A",{href:!0});var ipt=s(TN);eho=r(ipt,"GPTNeoXTokenizerFast"),ipt.forEach(t),oho=r(L$e," (GPT NeoX model)"),L$e.forEach(t),rho=i(S),_s=n(S,"LI",{});var sR=s(_s);jde=n(sR,"STRONG",{});var dpt=s(jde);tho=r(dpt,"gptj"),dpt.forEach(t),aho=r(sR," \u2014 "),MN=n(sR,"A",{href:!0});var cpt=s(MN);nho=r(cpt,"GPT2Tokenizer"),cpt.forEach(t),sho=r(sR," or "),EN=n(sR,"A",{href:!0});var mpt=s(EN);lho=r(mpt,"GPT2TokenizerFast"),mpt.forEach(t),iho=r(sR," (GPT-J model)"),sR.forEach(t),dho=i(S),bs=n(S,"LI",{});var lR=s(bs);Dde=n(lR,"STRONG",{});var fpt=s(Dde);cho=r(fpt,"groupvit"),fpt.forEach(t),mho=r(lR," \u2014 "),CN=n(lR,"A",{href:!0});var gpt=s(CN);fho=r(gpt,"CLIPTokenizer"),gpt.forEach(t),gho=r(lR," or "),wN=n(lR,"A",{href:!0});var hpt=s(wN);hho=r(hpt,"CLIPTokenizerFast"),hpt.forEach(t),uho=r(lR," (GroupViT model)"),lR.forEach(t),pho=i(S),vs=n(S,"LI",{});var iR=s(vs);Gde=n(iR,"STRONG",{});var upt=s(Gde);_ho=r(upt,"herbert"),upt.forEach(t),bho=r(iR," \u2014 "),AN=n(iR,"A",{href:!0});var ppt=s(AN);vho=r(ppt,"HerbertTokenizer"),ppt.forEach(t),Fho=r(iR," or "),LN=n(iR,"A",{href:!0});var _pt=s(LN);Tho=r(_pt,"HerbertTokenizerFast"),_pt.forEach(t),Mho=r(iR," (HerBERT model)"),iR.forEach(t),Eho=i(S),Bh=n(S,"LI",{});var y$e=s(Bh);Ode=n(y$e,"STRONG",{});var bpt=s(Ode);Cho=r(bpt,"hubert"),bpt.forEach(t),who=r(y$e," \u2014 "),yN=n(y$e,"A",{href:!0});var vpt=s(yN);Aho=r(vpt,"Wav2Vec2CTCTokenizer"),vpt.forEach(t),Lho=r(y$e," (Hubert model)"),y$e.forEach(t),yho=i(S),Fs=n(S,"LI",{});var dR=s(Fs);Vde=n(dR,"STRONG",{});var Fpt=s(Vde);xho=r(Fpt,"ibert"),Fpt.forEach(t),$ho=r(dR," \u2014 "),xN=n(dR,"A",{href:!0});var Tpt=s(xN);kho=r(Tpt,"RobertaTokenizer"),Tpt.forEach(t),Sho=r(dR," or "),$N=n(dR,"A",{href:!0});var Mpt=s($N);Rho=r(Mpt,"RobertaTokenizerFast"),Mpt.forEach(t),Pho=r(dR," (I-BERT model)"),dR.forEach(t),Bho=i(S),Ts=n(S,"LI",{});var cR=s(Ts);Xde=n(cR,"STRONG",{});var Ept=s(Xde);Iho=r(Ept,"layoutlm"),Ept.forEach(t),Nho=r(cR," \u2014 "),kN=n(cR,"A",{href:!0});var Cpt=s(kN);qho=r(Cpt,"LayoutLMTokenizer"),Cpt.forEach(t),jho=r(cR," or "),SN=n(cR,"A",{href:!0});var wpt=s(SN);Dho=r(wpt,"LayoutLMTokenizerFast"),wpt.forEach(t),Gho=r(cR," (LayoutLM model)"),cR.forEach(t),Oho=i(S),Ms=n(S,"LI",{});var mR=s(Ms);zde=n(mR,"STRONG",{});var Apt=s(zde);Vho=r(Apt,"layoutlmv2"),Apt.forEach(t),Xho=r(mR," \u2014 "),RN=n(mR,"A",{href:!0});var Lpt=s(RN);zho=r(Lpt,"LayoutLMv2Tokenizer"),Lpt.forEach(t),Who=r(mR," or "),PN=n(mR,"A",{href:!0});var ypt=s(PN);Qho=r(ypt,"LayoutLMv2TokenizerFast"),ypt.forEach(t),Uho=r(mR," (LayoutLMv2 model)"),mR.forEach(t),Hho=i(S),Es=n(S,"LI",{});var fR=s(Es);Wde=n(fR,"STRONG",{});var xpt=s(Wde);Jho=r(xpt,"layoutlmv3"),xpt.forEach(t),Yho=r(fR," \u2014 "),BN=n(fR,"A",{href:!0});var $pt=s(BN);Kho=r($pt,"LayoutLMv3Tokenizer"),$pt.forEach(t),Zho=r(fR," or "),IN=n(fR,"A",{href:!0});var kpt=s(IN);euo=r(kpt,"LayoutLMv3TokenizerFast"),kpt.forEach(t),ouo=r(fR," (LayoutLMv3 model)"),fR.forEach(t),ruo=i(S),Cs=n(S,"LI",{});var gR=s(Cs);Qde=n(gR,"STRONG",{});var Spt=s(Qde);tuo=r(Spt,"layoutxlm"),Spt.forEach(t),auo=r(gR," \u2014 "),NN=n(gR,"A",{href:!0});var Rpt=s(NN);nuo=r(Rpt,"LayoutXLMTokenizer"),Rpt.forEach(t),suo=r(gR," or "),qN=n(gR,"A",{href:!0});var Ppt=s(qN);luo=r(Ppt,"LayoutXLMTokenizerFast"),Ppt.forEach(t),iuo=r(gR," (LayoutXLM model)"),gR.forEach(t),duo=i(S),ws=n(S,"LI",{});var hR=s(ws);Ude=n(hR,"STRONG",{});var Bpt=s(Ude);cuo=r(Bpt,"led"),Bpt.forEach(t),muo=r(hR," \u2014 "),jN=n(hR,"A",{href:!0});var Ipt=s(jN);fuo=r(Ipt,"LEDTokenizer"),Ipt.forEach(t),guo=r(hR," or "),DN=n(hR,"A",{href:!0});var Npt=s(DN);huo=r(Npt,"LEDTokenizerFast"),Npt.forEach(t),uuo=r(hR," (LED model)"),hR.forEach(t),puo=i(S),As=n(S,"LI",{});var uR=s(As);Hde=n(uR,"STRONG",{});var qpt=s(Hde);_uo=r(qpt,"longformer"),qpt.forEach(t),buo=r(uR," \u2014 "),GN=n(uR,"A",{href:!0});var jpt=s(GN);vuo=r(jpt,"LongformerTokenizer"),jpt.forEach(t),Fuo=r(uR," or "),ON=n(uR,"A",{href:!0});var Dpt=s(ON);Tuo=r(Dpt,"LongformerTokenizerFast"),Dpt.forEach(t),Muo=r(uR," (Longformer model)"),uR.forEach(t),Euo=i(S),Ls=n(S,"LI",{});var pR=s(Ls);Jde=n(pR,"STRONG",{});var Gpt=s(Jde);Cuo=r(Gpt,"longt5"),Gpt.forEach(t),wuo=r(pR," \u2014 "),VN=n(pR,"A",{href:!0});var Opt=s(VN);Auo=r(Opt,"T5Tokenizer"),Opt.forEach(t),Luo=r(pR," or "),XN=n(pR,"A",{href:!0});var Vpt=s(XN);yuo=r(Vpt,"T5TokenizerFast"),Vpt.forEach(t),xuo=r(pR," (LongT5 model)"),pR.forEach(t),$uo=i(S),Ih=n(S,"LI",{});var x$e=s(Ih);Yde=n(x$e,"STRONG",{});var Xpt=s(Yde);kuo=r(Xpt,"luke"),Xpt.forEach(t),Suo=r(x$e," \u2014 "),zN=n(x$e,"A",{href:!0});var zpt=s(zN);Ruo=r(zpt,"LukeTokenizer"),zpt.forEach(t),Puo=r(x$e," (LUKE model)"),x$e.forEach(t),Buo=i(S),ys=n(S,"LI",{});var _R=s(ys);Kde=n(_R,"STRONG",{});var Wpt=s(Kde);Iuo=r(Wpt,"lxmert"),Wpt.forEach(t),Nuo=r(_R," \u2014 "),WN=n(_R,"A",{href:!0});var Qpt=s(WN);quo=r(Qpt,"LxmertTokenizer"),Qpt.forEach(t),juo=r(_R," or "),QN=n(_R,"A",{href:!0});var Upt=s(QN);Duo=r(Upt,"LxmertTokenizerFast"),Upt.forEach(t),Guo=r(_R," (LXMERT model)"),_R.forEach(t),Ouo=i(S),Nh=n(S,"LI",{});var $$e=s(Nh);Zde=n($$e,"STRONG",{});var Hpt=s(Zde);Vuo=r(Hpt,"m2m_100"),Hpt.forEach(t),Xuo=r($$e," \u2014 "),UN=n($$e,"A",{href:!0});var Jpt=s(UN);zuo=r(Jpt,"M2M100Tokenizer"),Jpt.forEach(t),Wuo=r($$e," (M2M100 model)"),$$e.forEach(t),Quo=i(S),qh=n(S,"LI",{});var k$e=s(qh);ece=n(k$e,"STRONG",{});var Ypt=s(ece);Uuo=r(Ypt,"marian"),Ypt.forEach(t),Huo=r(k$e," \u2014 "),HN=n(k$e,"A",{href:!0});var Kpt=s(HN);Juo=r(Kpt,"MarianTokenizer"),Kpt.forEach(t),Yuo=r(k$e," (Marian model)"),k$e.forEach(t),Kuo=i(S),xs=n(S,"LI",{});var bR=s(xs);oce=n(bR,"STRONG",{});var Zpt=s(oce);Zuo=r(Zpt,"mbart"),Zpt.forEach(t),epo=r(bR," \u2014 "),JN=n(bR,"A",{href:!0});var e_t=s(JN);opo=r(e_t,"MBartTokenizer"),e_t.forEach(t),rpo=r(bR," or "),YN=n(bR,"A",{href:!0});var o_t=s(YN);tpo=r(o_t,"MBartTokenizerFast"),o_t.forEach(t),apo=r(bR," (mBART model)"),bR.forEach(t),npo=i(S),$s=n(S,"LI",{});var vR=s($s);rce=n(vR,"STRONG",{});var r_t=s(rce);spo=r(r_t,"mbart50"),r_t.forEach(t),lpo=r(vR," \u2014 "),KN=n(vR,"A",{href:!0});var t_t=s(KN);ipo=r(t_t,"MBart50Tokenizer"),t_t.forEach(t),dpo=r(vR," or "),ZN=n(vR,"A",{href:!0});var a_t=s(ZN);cpo=r(a_t,"MBart50TokenizerFast"),a_t.forEach(t),mpo=r(vR," (mBART-50 model)"),vR.forEach(t),fpo=i(S),ks=n(S,"LI",{});var FR=s(ks);tce=n(FR,"STRONG",{});var n_t=s(tce);gpo=r(n_t,"megatron-bert"),n_t.forEach(t),hpo=r(FR," \u2014 "),eq=n(FR,"A",{href:!0});var s_t=s(eq);upo=r(s_t,"BertTokenizer"),s_t.forEach(t),ppo=r(FR," or "),oq=n(FR,"A",{href:!0});var l_t=s(oq);_po=r(l_t,"BertTokenizerFast"),l_t.forEach(t),bpo=r(FR," (Megatron-BERT model)"),FR.forEach(t),vpo=i(S),jh=n(S,"LI",{});var S$e=s(jh);ace=n(S$e,"STRONG",{});var i_t=s(ace);Fpo=r(i_t,"mluke"),i_t.forEach(t),Tpo=r(S$e," \u2014 "),rq=n(S$e,"A",{href:!0});var d_t=s(rq);Mpo=r(d_t,"MLukeTokenizer"),d_t.forEach(t),Epo=r(S$e," (mLUKE model)"),S$e.forEach(t),Cpo=i(S),Ss=n(S,"LI",{});var TR=s(Ss);nce=n(TR,"STRONG",{});var c_t=s(nce);wpo=r(c_t,"mobilebert"),c_t.forEach(t),Apo=r(TR," \u2014 "),tq=n(TR,"A",{href:!0});var m_t=s(tq);Lpo=r(m_t,"MobileBertTokenizer"),m_t.forEach(t),ypo=r(TR," or "),aq=n(TR,"A",{href:!0});var f_t=s(aq);xpo=r(f_t,"MobileBertTokenizerFast"),f_t.forEach(t),$po=r(TR," (MobileBERT model)"),TR.forEach(t),kpo=i(S),Rs=n(S,"LI",{});var MR=s(Rs);sce=n(MR,"STRONG",{});var g_t=s(sce);Spo=r(g_t,"mpnet"),g_t.forEach(t),Rpo=r(MR," \u2014 "),nq=n(MR,"A",{href:!0});var h_t=s(nq);Ppo=r(h_t,"MPNetTokenizer"),h_t.forEach(t),Bpo=r(MR," or "),sq=n(MR,"A",{href:!0});var u_t=s(sq);Ipo=r(u_t,"MPNetTokenizerFast"),u_t.forEach(t),Npo=r(MR," (MPNet model)"),MR.forEach(t),qpo=i(S),Ps=n(S,"LI",{});var ER=s(Ps);lce=n(ER,"STRONG",{});var p_t=s(lce);jpo=r(p_t,"mt5"),p_t.forEach(t),Dpo=r(ER," \u2014 "),lq=n(ER,"A",{href:!0});var __t=s(lq);Gpo=r(__t,"MT5Tokenizer"),__t.forEach(t),Opo=r(ER," or "),iq=n(ER,"A",{href:!0});var b_t=s(iq);Vpo=r(b_t,"MT5TokenizerFast"),b_t.forEach(t),Xpo=r(ER," (MT5 model)"),ER.forEach(t),zpo=i(S),Bs=n(S,"LI",{});var CR=s(Bs);ice=n(CR,"STRONG",{});var v_t=s(ice);Wpo=r(v_t,"mvp"),v_t.forEach(t),Qpo=r(CR," \u2014 "),dq=n(CR,"A",{href:!0});var F_t=s(dq);Upo=r(F_t,"MvpTokenizer"),F_t.forEach(t),Hpo=r(CR," or "),cq=n(CR,"A",{href:!0});var T_t=s(cq);Jpo=r(T_t,"MvpTokenizerFast"),T_t.forEach(t),Ypo=r(CR," (MVP model)"),CR.forEach(t),Kpo=i(S),Is=n(S,"LI",{});var wR=s(Is);dce=n(wR,"STRONG",{});var M_t=s(dce);Zpo=r(M_t,"nezha"),M_t.forEach(t),e_o=r(wR," \u2014 "),mq=n(wR,"A",{href:!0});var E_t=s(mq);o_o=r(E_t,"BertTokenizer"),E_t.forEach(t),r_o=r(wR," or "),fq=n(wR,"A",{href:!0});var C_t=s(fq);t_o=r(C_t,"BertTokenizerFast"),C_t.forEach(t),a_o=r(wR," (Nezha model)"),wR.forEach(t),n_o=i(S),Ns=n(S,"LI",{});var AR=s(Ns);cce=n(AR,"STRONG",{});var w_t=s(cce);s_o=r(w_t,"nllb"),w_t.forEach(t),l_o=r(AR," \u2014 "),gq=n(AR,"A",{href:!0});var A_t=s(gq);i_o=r(A_t,"NllbTokenizer"),A_t.forEach(t),d_o=r(AR," or "),hq=n(AR,"A",{href:!0});var L_t=s(hq);c_o=r(L_t,"NllbTokenizerFast"),L_t.forEach(t),m_o=r(AR," (NLLB model)"),AR.forEach(t),f_o=i(S),qs=n(S,"LI",{});var LR=s(qs);mce=n(LR,"STRONG",{});var y_t=s(mce);g_o=r(y_t,"nystromformer"),y_t.forEach(t),h_o=r(LR," \u2014 "),uq=n(LR,"A",{href:!0});var x_t=s(uq);u_o=r(x_t,"AlbertTokenizer"),x_t.forEach(t),p_o=r(LR," or "),pq=n(LR,"A",{href:!0});var $_t=s(pq);__o=r($_t,"AlbertTokenizerFast"),$_t.forEach(t),b_o=r(LR," (Nystr\xF6mformer model)"),LR.forEach(t),v_o=i(S),js=n(S,"LI",{});var yR=s(js);fce=n(yR,"STRONG",{});var k_t=s(fce);F_o=r(k_t,"openai-gpt"),k_t.forEach(t),T_o=r(yR," \u2014 "),_q=n(yR,"A",{href:!0});var S_t=s(_q);M_o=r(S_t,"OpenAIGPTTokenizer"),S_t.forEach(t),E_o=r(yR," or "),bq=n(yR,"A",{href:!0});var R_t=s(bq);C_o=r(R_t,"OpenAIGPTTokenizerFast"),R_t.forEach(t),w_o=r(yR," (OpenAI GPT model)"),yR.forEach(t),A_o=i(S),Dh=n(S,"LI",{});var R$e=s(Dh);gce=n(R$e,"STRONG",{});var P_t=s(gce);L_o=r(P_t,"opt"),P_t.forEach(t),y_o=r(R$e," \u2014 "),vq=n(R$e,"A",{href:!0});var B_t=s(vq);x_o=r(B_t,"GPT2Tokenizer"),B_t.forEach(t),$_o=r(R$e," (OPT model)"),R$e.forEach(t),k_o=i(S),Ds=n(S,"LI",{});var xR=s(Ds);hce=n(xR,"STRONG",{});var I_t=s(hce);S_o=r(I_t,"owlvit"),I_t.forEach(t),R_o=r(xR," \u2014 "),Fq=n(xR,"A",{href:!0});var N_t=s(Fq);P_o=r(N_t,"CLIPTokenizer"),N_t.forEach(t),B_o=r(xR," or "),Tq=n(xR,"A",{href:!0});var q_t=s(Tq);I_o=r(q_t,"CLIPTokenizerFast"),q_t.forEach(t),N_o=r(xR," (OWL-ViT model)"),xR.forEach(t),q_o=i(S),Gs=n(S,"LI",{});var $R=s(Gs);uce=n($R,"STRONG",{});var j_t=s(uce);j_o=r(j_t,"pegasus"),j_t.forEach(t),D_o=r($R," \u2014 "),Mq=n($R,"A",{href:!0});var D_t=s(Mq);G_o=r(D_t,"PegasusTokenizer"),D_t.forEach(t),O_o=r($R," or "),Eq=n($R,"A",{href:!0});var G_t=s(Eq);V_o=r(G_t,"PegasusTokenizerFast"),G_t.forEach(t),X_o=r($R," (Pegasus model)"),$R.forEach(t),z_o=i(S),Gh=n(S,"LI",{});var P$e=s(Gh);pce=n(P$e,"STRONG",{});var O_t=s(pce);W_o=r(O_t,"perceiver"),O_t.forEach(t),Q_o=r(P$e," \u2014 "),Cq=n(P$e,"A",{href:!0});var V_t=s(Cq);U_o=r(V_t,"PerceiverTokenizer"),V_t.forEach(t),H_o=r(P$e," (Perceiver model)"),P$e.forEach(t),J_o=i(S),Oh=n(S,"LI",{});var B$e=s(Oh);_ce=n(B$e,"STRONG",{});var X_t=s(_ce);Y_o=r(X_t,"phobert"),X_t.forEach(t),K_o=r(B$e," \u2014 "),wq=n(B$e,"A",{href:!0});var z_t=s(wq);Z_o=r(z_t,"PhobertTokenizer"),z_t.forEach(t),e2o=r(B$e," (PhoBERT model)"),B$e.forEach(t),o2o=i(S),Vh=n(S,"LI",{});var I$e=s(Vh);bce=n(I$e,"STRONG",{});var W_t=s(bce);r2o=r(W_t,"plbart"),W_t.forEach(t),t2o=r(I$e," \u2014 "),Aq=n(I$e,"A",{href:!0});var Q_t=s(Aq);a2o=r(Q_t,"PLBartTokenizer"),Q_t.forEach(t),n2o=r(I$e," (PLBart model)"),I$e.forEach(t),s2o=i(S),Xh=n(S,"LI",{});var N$e=s(Xh);vce=n(N$e,"STRONG",{});var U_t=s(vce);l2o=r(U_t,"prophetnet"),U_t.forEach(t),i2o=r(N$e," \u2014 "),Lq=n(N$e,"A",{href:!0});var H_t=s(Lq);d2o=r(H_t,"ProphetNetTokenizer"),H_t.forEach(t),c2o=r(N$e," (ProphetNet model)"),N$e.forEach(t),m2o=i(S),Os=n(S,"LI",{});var kR=s(Os);Fce=n(kR,"STRONG",{});var J_t=s(Fce);f2o=r(J_t,"qdqbert"),J_t.forEach(t),g2o=r(kR," \u2014 "),yq=n(kR,"A",{href:!0});var Y_t=s(yq);h2o=r(Y_t,"BertTokenizer"),Y_t.forEach(t),u2o=r(kR," or "),xq=n(kR,"A",{href:!0});var K_t=s(xq);p2o=r(K_t,"BertTokenizerFast"),K_t.forEach(t),_2o=r(kR," (QDQBert model)"),kR.forEach(t),b2o=i(S),zh=n(S,"LI",{});var q$e=s(zh);Tce=n(q$e,"STRONG",{});var Z_t=s(Tce);v2o=r(Z_t,"rag"),Z_t.forEach(t),F2o=r(q$e," \u2014 "),$q=n(q$e,"A",{href:!0});var e2t=s($q);T2o=r(e2t,"RagTokenizer"),e2t.forEach(t),M2o=r(q$e," (RAG model)"),q$e.forEach(t),E2o=i(S),Vs=n(S,"LI",{});var SR=s(Vs);Mce=n(SR,"STRONG",{});var o2t=s(Mce);C2o=r(o2t,"realm"),o2t.forEach(t),w2o=r(SR," \u2014 "),kq=n(SR,"A",{href:!0});var r2t=s(kq);A2o=r(r2t,"RealmTokenizer"),r2t.forEach(t),L2o=r(SR," or "),Sq=n(SR,"A",{href:!0});var t2t=s(Sq);y2o=r(t2t,"RealmTokenizerFast"),t2t.forEach(t),x2o=r(SR," (REALM model)"),SR.forEach(t),$2o=i(S),Xs=n(S,"LI",{});var RR=s(Xs);Ece=n(RR,"STRONG",{});var a2t=s(Ece);k2o=r(a2t,"reformer"),a2t.forEach(t),S2o=r(RR," \u2014 "),Rq=n(RR,"A",{href:!0});var n2t=s(Rq);R2o=r(n2t,"ReformerTokenizer"),n2t.forEach(t),P2o=r(RR," or "),Pq=n(RR,"A",{href:!0});var s2t=s(Pq);B2o=r(s2t,"ReformerTokenizerFast"),s2t.forEach(t),I2o=r(RR," (Reformer model)"),RR.forEach(t),N2o=i(S),zs=n(S,"LI",{});var PR=s(zs);Cce=n(PR,"STRONG",{});var l2t=s(Cce);q2o=r(l2t,"rembert"),l2t.forEach(t),j2o=r(PR," \u2014 "),Bq=n(PR,"A",{href:!0});var i2t=s(Bq);D2o=r(i2t,"RemBertTokenizer"),i2t.forEach(t),G2o=r(PR," or "),Iq=n(PR,"A",{href:!0});var d2t=s(Iq);O2o=r(d2t,"RemBertTokenizerFast"),d2t.forEach(t),V2o=r(PR," (RemBERT model)"),PR.forEach(t),X2o=i(S),Ws=n(S,"LI",{});var BR=s(Ws);wce=n(BR,"STRONG",{});var c2t=s(wce);z2o=r(c2t,"retribert"),c2t.forEach(t),W2o=r(BR," \u2014 "),Nq=n(BR,"A",{href:!0});var m2t=s(Nq);Q2o=r(m2t,"RetriBertTokenizer"),m2t.forEach(t),U2o=r(BR," or "),qq=n(BR,"A",{href:!0});var f2t=s(qq);H2o=r(f2t,"RetriBertTokenizerFast"),f2t.forEach(t),J2o=r(BR," (RetriBERT model)"),BR.forEach(t),Y2o=i(S),Qs=n(S,"LI",{});var IR=s(Qs);Ace=n(IR,"STRONG",{});var g2t=s(Ace);K2o=r(g2t,"roberta"),g2t.forEach(t),Z2o=r(IR," \u2014 "),jq=n(IR,"A",{href:!0});var h2t=s(jq);ebo=r(h2t,"RobertaTokenizer"),h2t.forEach(t),obo=r(IR," or "),Dq=n(IR,"A",{href:!0});var u2t=s(Dq);rbo=r(u2t,"RobertaTokenizerFast"),u2t.forEach(t),tbo=r(IR," (RoBERTa model)"),IR.forEach(t),abo=i(S),Us=n(S,"LI",{});var NR=s(Us);Lce=n(NR,"STRONG",{});var p2t=s(Lce);nbo=r(p2t,"roformer"),p2t.forEach(t),sbo=r(NR," \u2014 "),Gq=n(NR,"A",{href:!0});var _2t=s(Gq);lbo=r(_2t,"RoFormerTokenizer"),_2t.forEach(t),ibo=r(NR," or "),Oq=n(NR,"A",{href:!0});var b2t=s(Oq);dbo=r(b2t,"RoFormerTokenizerFast"),b2t.forEach(t),cbo=r(NR," (RoFormer model)"),NR.forEach(t),mbo=i(S),Wh=n(S,"LI",{});var j$e=s(Wh);yce=n(j$e,"STRONG",{});var v2t=s(yce);fbo=r(v2t,"speech_to_text"),v2t.forEach(t),gbo=r(j$e," \u2014 "),Vq=n(j$e,"A",{href:!0});var F2t=s(Vq);hbo=r(F2t,"Speech2TextTokenizer"),F2t.forEach(t),ubo=r(j$e," (Speech2Text model)"),j$e.forEach(t),pbo=i(S),Qh=n(S,"LI",{});var D$e=s(Qh);xce=n(D$e,"STRONG",{});var T2t=s(xce);_bo=r(T2t,"speech_to_text_2"),T2t.forEach(t),bbo=r(D$e," \u2014 "),Xq=n(D$e,"A",{href:!0});var M2t=s(Xq);vbo=r(M2t,"Speech2Text2Tokenizer"),M2t.forEach(t),Fbo=r(D$e," (Speech2Text2 model)"),D$e.forEach(t),Tbo=i(S),Hs=n(S,"LI",{});var qR=s(Hs);$ce=n(qR,"STRONG",{});var E2t=s($ce);Mbo=r(E2t,"splinter"),E2t.forEach(t),Ebo=r(qR," \u2014 "),zq=n(qR,"A",{href:!0});var C2t=s(zq);Cbo=r(C2t,"SplinterTokenizer"),C2t.forEach(t),wbo=r(qR," or "),Wq=n(qR,"A",{href:!0});var w2t=s(Wq);Abo=r(w2t,"SplinterTokenizerFast"),w2t.forEach(t),Lbo=r(qR," (Splinter model)"),qR.forEach(t),ybo=i(S),Js=n(S,"LI",{});var jR=s(Js);kce=n(jR,"STRONG",{});var A2t=s(kce);xbo=r(A2t,"squeezebert"),A2t.forEach(t),$bo=r(jR," \u2014 "),Qq=n(jR,"A",{href:!0});var L2t=s(Qq);kbo=r(L2t,"SqueezeBertTokenizer"),L2t.forEach(t),Sbo=r(jR," or "),Uq=n(jR,"A",{href:!0});var y2t=s(Uq);Rbo=r(y2t,"SqueezeBertTokenizerFast"),y2t.forEach(t),Pbo=r(jR," (SqueezeBERT model)"),jR.forEach(t),Bbo=i(S),Ys=n(S,"LI",{});var DR=s(Ys);Sce=n(DR,"STRONG",{});var x2t=s(Sce);Ibo=r(x2t,"t5"),x2t.forEach(t),Nbo=r(DR," \u2014 "),Hq=n(DR,"A",{href:!0});var $2t=s(Hq);qbo=r($2t,"T5Tokenizer"),$2t.forEach(t),jbo=r(DR," or "),Jq=n(DR,"A",{href:!0});var k2t=s(Jq);Dbo=r(k2t,"T5TokenizerFast"),k2t.forEach(t),Gbo=r(DR," (T5 model)"),DR.forEach(t),Obo=i(S),Uh=n(S,"LI",{});var G$e=s(Uh);Rce=n(G$e,"STRONG",{});var S2t=s(Rce);Vbo=r(S2t,"tapas"),S2t.forEach(t),Xbo=r(G$e," \u2014 "),Yq=n(G$e,"A",{href:!0});var R2t=s(Yq);zbo=r(R2t,"TapasTokenizer"),R2t.forEach(t),Wbo=r(G$e," (TAPAS model)"),G$e.forEach(t),Qbo=i(S),Hh=n(S,"LI",{});var O$e=s(Hh);Pce=n(O$e,"STRONG",{});var P2t=s(Pce);Ubo=r(P2t,"tapex"),P2t.forEach(t),Hbo=r(O$e," \u2014 "),Kq=n(O$e,"A",{href:!0});var B2t=s(Kq);Jbo=r(B2t,"TapexTokenizer"),B2t.forEach(t),Ybo=r(O$e," (TAPEX model)"),O$e.forEach(t),Kbo=i(S),Jh=n(S,"LI",{});var V$e=s(Jh);Bce=n(V$e,"STRONG",{});var I2t=s(Bce);Zbo=r(I2t,"transfo-xl"),I2t.forEach(t),evo=r(V$e," \u2014 "),Zq=n(V$e,"A",{href:!0});var N2t=s(Zq);ovo=r(N2t,"TransfoXLTokenizer"),N2t.forEach(t),rvo=r(V$e," (Transformer-XL model)"),V$e.forEach(t),tvo=i(S),Ks=n(S,"LI",{});var GR=s(Ks);Ice=n(GR,"STRONG",{});var q2t=s(Ice);avo=r(q2t,"vilt"),q2t.forEach(t),nvo=r(GR," \u2014 "),ej=n(GR,"A",{href:!0});var j2t=s(ej);svo=r(j2t,"BertTokenizer"),j2t.forEach(t),lvo=r(GR," or "),oj=n(GR,"A",{href:!0});var D2t=s(oj);ivo=r(D2t,"BertTokenizerFast"),D2t.forEach(t),dvo=r(GR," (ViLT model)"),GR.forEach(t),cvo=i(S),Zs=n(S,"LI",{});var OR=s(Zs);Nce=n(OR,"STRONG",{});var G2t=s(Nce);mvo=r(G2t,"visual_bert"),G2t.forEach(t),fvo=r(OR," \u2014 "),rj=n(OR,"A",{href:!0});var O2t=s(rj);gvo=r(O2t,"BertTokenizer"),O2t.forEach(t),hvo=r(OR," or "),tj=n(OR,"A",{href:!0});var V2t=s(tj);uvo=r(V2t,"BertTokenizerFast"),V2t.forEach(t),pvo=r(OR," (VisualBERT model)"),OR.forEach(t),_vo=i(S),Yh=n(S,"LI",{});var X$e=s(Yh);qce=n(X$e,"STRONG",{});var X2t=s(qce);bvo=r(X2t,"wav2vec2"),X2t.forEach(t),vvo=r(X$e," \u2014 "),aj=n(X$e,"A",{href:!0});var z2t=s(aj);Fvo=r(z2t,"Wav2Vec2CTCTokenizer"),z2t.forEach(t),Tvo=r(X$e," (Wav2Vec2 model)"),X$e.forEach(t),Mvo=i(S),Kh=n(S,"LI",{});var z$e=s(Kh);jce=n(z$e,"STRONG",{});var W2t=s(jce);Evo=r(W2t,"wav2vec2-conformer"),W2t.forEach(t),Cvo=r(z$e," \u2014 "),nj=n(z$e,"A",{href:!0});var Q2t=s(nj);wvo=r(Q2t,"Wav2Vec2CTCTokenizer"),Q2t.forEach(t),Avo=r(z$e," (Wav2Vec2-Conformer model)"),z$e.forEach(t),Lvo=i(S),Zh=n(S,"LI",{});var W$e=s(Zh);Dce=n(W$e,"STRONG",{});var U2t=s(Dce);yvo=r(U2t,"wav2vec2_phoneme"),U2t.forEach(t),xvo=r(W$e," \u2014 "),sj=n(W$e,"A",{href:!0});var H2t=s(sj);$vo=r(H2t,"Wav2Vec2PhonemeCTCTokenizer"),H2t.forEach(t),kvo=r(W$e," (Wav2Vec2Phoneme model)"),W$e.forEach(t),Svo=i(S),el=n(S,"LI",{});var VR=s(el);Gce=n(VR,"STRONG",{});var J2t=s(Gce);Rvo=r(J2t,"xglm"),J2t.forEach(t),Pvo=r(VR," \u2014 "),lj=n(VR,"A",{href:!0});var Y2t=s(lj);Bvo=r(Y2t,"XGLMTokenizer"),Y2t.forEach(t),Ivo=r(VR," or "),ij=n(VR,"A",{href:!0});var K2t=s(ij);Nvo=r(K2t,"XGLMTokenizerFast"),K2t.forEach(t),qvo=r(VR," (XGLM model)"),VR.forEach(t),jvo=i(S),eu=n(S,"LI",{});var Q$e=s(eu);Oce=n(Q$e,"STRONG",{});var Z2t=s(Oce);Dvo=r(Z2t,"xlm"),Z2t.forEach(t),Gvo=r(Q$e," \u2014 "),dj=n(Q$e,"A",{href:!0});var ebt=s(dj);Ovo=r(ebt,"XLMTokenizer"),ebt.forEach(t),Vvo=r(Q$e," (XLM model)"),Q$e.forEach(t),Xvo=i(S),ou=n(S,"LI",{});var U$e=s(ou);Vce=n(U$e,"STRONG",{});var obt=s(Vce);zvo=r(obt,"xlm-prophetnet"),obt.forEach(t),Wvo=r(U$e," \u2014 "),cj=n(U$e,"A",{href:!0});var rbt=s(cj);Qvo=r(rbt,"XLMProphetNetTokenizer"),rbt.forEach(t),Uvo=r(U$e," (XLM-ProphetNet model)"),U$e.forEach(t),Hvo=i(S),ol=n(S,"LI",{});var XR=s(ol);Xce=n(XR,"STRONG",{});var tbt=s(Xce);Jvo=r(tbt,"xlm-roberta"),tbt.forEach(t),Yvo=r(XR," \u2014 "),mj=n(XR,"A",{href:!0});var abt=s(mj);Kvo=r(abt,"XLMRobertaTokenizer"),abt.forEach(t),Zvo=r(XR," or "),fj=n(XR,"A",{href:!0});var nbt=s(fj);e1o=r(nbt,"XLMRobertaTokenizerFast"),nbt.forEach(t),o1o=r(XR," (XLM-RoBERTa model)"),XR.forEach(t),r1o=i(S),rl=n(S,"LI",{});var zR=s(rl);zce=n(zR,"STRONG",{});var sbt=s(zce);t1o=r(sbt,"xlm-roberta-xl"),sbt.forEach(t),a1o=r(zR," \u2014 "),gj=n(zR,"A",{href:!0});var lbt=s(gj);n1o=r(lbt,"RobertaTokenizer"),lbt.forEach(t),s1o=r(zR," or "),hj=n(zR,"A",{href:!0});var ibt=s(hj);l1o=r(ibt,"RobertaTokenizerFast"),ibt.forEach(t),i1o=r(zR," (XLM-RoBERTa-XL model)"),zR.forEach(t),d1o=i(S),tl=n(S,"LI",{});var WR=s(tl);Wce=n(WR,"STRONG",{});var dbt=s(Wce);c1o=r(dbt,"xlnet"),dbt.forEach(t),m1o=r(WR," \u2014 "),uj=n(WR,"A",{href:!0});var cbt=s(uj);f1o=r(cbt,"XLNetTokenizer"),cbt.forEach(t),g1o=r(WR," or "),pj=n(WR,"A",{href:!0});var mbt=s(pj);h1o=r(mbt,"XLNetTokenizerFast"),mbt.forEach(t),u1o=r(WR," (XLNet model)"),WR.forEach(t),p1o=i(S),al=n(S,"LI",{});var QR=s(al);Qce=n(QR,"STRONG",{});var fbt=s(Qce);_1o=r(fbt,"yoso"),fbt.forEach(t),b1o=r(QR," \u2014 "),_j=n(QR,"A",{href:!0});var gbt=s(_j);v1o=r(gbt,"AlbertTokenizer"),gbt.forEach(t),F1o=r(QR," or "),bj=n(QR,"A",{href:!0});var hbt=s(bj);T1o=r(hbt,"AlbertTokenizerFast"),hbt.forEach(t),M1o=r(QR," (YOSO model)"),QR.forEach(t),S.forEach(t),E1o=i(ml),T(ru.$$.fragment,ml),ml.forEach(t),C1o=i(cl),tu=n(cl,"DIV",{class:!0});var qHe=s(tu);T(M8.$$.fragment,qHe),w1o=i(qHe),Uce=n(qHe,"P",{});var ubt=s(Uce);A1o=r(ubt,"Register a new tokenizer in this mapping."),ubt.forEach(t),qHe.forEach(t),cl.forEach(t),RQe=i(m),Zi=n(m,"H2",{class:!0});var jHe=s(Zi);au=n(jHe,"A",{id:!0,class:!0,href:!0});var pbt=s(au);Hce=n(pbt,"SPAN",{});var _bt=s(Hce);T(E8.$$.fragment,_bt),_bt.forEach(t),pbt.forEach(t),L1o=i(jHe),Jce=n(jHe,"SPAN",{});var bbt=s(Jce);y1o=r(bbt,"AutoFeatureExtractor"),bbt.forEach(t),jHe.forEach(t),PQe=i(m),$o=n(m,"DIV",{class:!0});var fl=s($o);T(C8.$$.fragment,fl),x1o=i(fl),w8=n(fl,"P",{});var DHe=s(w8);$1o=r(DHe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),vj=n(DHe,"A",{href:!0});var vbt=s(vj);k1o=r(vbt,"AutoFeatureExtractor.from_pretrained()"),vbt.forEach(t),S1o=r(DHe," class method."),DHe.forEach(t),R1o=i(fl),A8=n(fl,"P",{});var GHe=s(A8);P1o=r(GHe,"This class cannot be instantiated directly using "),Yce=n(GHe,"CODE",{});var Fbt=s(Yce);B1o=r(Fbt,"__init__()"),Fbt.forEach(t),I1o=r(GHe," (throws an error)."),GHe.forEach(t),N1o=i(fl),He=n(fl,"DIV",{class:!0});var ma=s(He);T(L8.$$.fragment,ma),q1o=i(ma),Kce=n(ma,"P",{});var Tbt=s(Kce);j1o=r(Tbt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Tbt.forEach(t),D1o=i(ma),Oa=n(ma,"P",{});var lL=s(Oa);G1o=r(lL,"The feature extractor class to instantiate is selected based on the "),Zce=n(lL,"CODE",{});var Mbt=s(Zce);O1o=r(Mbt,"model_type"),Mbt.forEach(t),V1o=r(lL,` property of the config object
(either passed as an argument or loaded from `),eme=n(lL,"CODE",{});var Ebt=s(eme);X1o=r(Ebt,"pretrained_model_name_or_path"),Ebt.forEach(t),z1o=r(lL,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ome=n(lL,"CODE",{});var Cbt=s(ome);W1o=r(Cbt,"pretrained_model_name_or_path"),Cbt.forEach(t),Q1o=r(lL,":"),lL.forEach(t),U1o=i(ma),U=n(ma,"UL",{});var Y=s(U);nu=n(Y,"LI",{});var H$e=s(nu);rme=n(H$e,"STRONG",{});var wbt=s(rme);H1o=r(wbt,"beit"),wbt.forEach(t),J1o=r(H$e," \u2014 "),Fj=n(H$e,"A",{href:!0});var Abt=s(Fj);Y1o=r(Abt,"BeitFeatureExtractor"),Abt.forEach(t),K1o=r(H$e," (BEiT model)"),H$e.forEach(t),Z1o=i(Y),su=n(Y,"LI",{});var J$e=s(su);tme=n(J$e,"STRONG",{});var Lbt=s(tme);eFo=r(Lbt,"clip"),Lbt.forEach(t),oFo=r(J$e," \u2014 "),Tj=n(J$e,"A",{href:!0});var ybt=s(Tj);rFo=r(ybt,"CLIPFeatureExtractor"),ybt.forEach(t),tFo=r(J$e," (CLIP model)"),J$e.forEach(t),aFo=i(Y),lu=n(Y,"LI",{});var Y$e=s(lu);ame=n(Y$e,"STRONG",{});var xbt=s(ame);nFo=r(xbt,"convnext"),xbt.forEach(t),sFo=r(Y$e," \u2014 "),Mj=n(Y$e,"A",{href:!0});var $bt=s(Mj);lFo=r($bt,"ConvNextFeatureExtractor"),$bt.forEach(t),iFo=r(Y$e," (ConvNeXT model)"),Y$e.forEach(t),dFo=i(Y),iu=n(Y,"LI",{});var K$e=s(iu);nme=n(K$e,"STRONG",{});var kbt=s(nme);cFo=r(kbt,"cvt"),kbt.forEach(t),mFo=r(K$e," \u2014 "),Ej=n(K$e,"A",{href:!0});var Sbt=s(Ej);fFo=r(Sbt,"ConvNextFeatureExtractor"),Sbt.forEach(t),gFo=r(K$e," (CvT model)"),K$e.forEach(t),hFo=i(Y),du=n(Y,"LI",{});var Z$e=s(du);sme=n(Z$e,"STRONG",{});var Rbt=s(sme);uFo=r(Rbt,"data2vec-audio"),Rbt.forEach(t),pFo=r(Z$e," \u2014 "),Cj=n(Z$e,"A",{href:!0});var Pbt=s(Cj);_Fo=r(Pbt,"Wav2Vec2FeatureExtractor"),Pbt.forEach(t),bFo=r(Z$e," (Data2VecAudio model)"),Z$e.forEach(t),vFo=i(Y),cu=n(Y,"LI",{});var eke=s(cu);lme=n(eke,"STRONG",{});var Bbt=s(lme);FFo=r(Bbt,"data2vec-vision"),Bbt.forEach(t),TFo=r(eke," \u2014 "),wj=n(eke,"A",{href:!0});var Ibt=s(wj);MFo=r(Ibt,"BeitFeatureExtractor"),Ibt.forEach(t),EFo=r(eke," (Data2VecVision model)"),eke.forEach(t),CFo=i(Y),mu=n(Y,"LI",{});var oke=s(mu);ime=n(oke,"STRONG",{});var Nbt=s(ime);wFo=r(Nbt,"deit"),Nbt.forEach(t),AFo=r(oke," \u2014 "),Aj=n(oke,"A",{href:!0});var qbt=s(Aj);LFo=r(qbt,"DeiTFeatureExtractor"),qbt.forEach(t),yFo=r(oke," (DeiT model)"),oke.forEach(t),xFo=i(Y),fu=n(Y,"LI",{});var rke=s(fu);dme=n(rke,"STRONG",{});var jbt=s(dme);$Fo=r(jbt,"detr"),jbt.forEach(t),kFo=r(rke," \u2014 "),Lj=n(rke,"A",{href:!0});var Dbt=s(Lj);SFo=r(Dbt,"DetrFeatureExtractor"),Dbt.forEach(t),RFo=r(rke," (DETR model)"),rke.forEach(t),PFo=i(Y),gu=n(Y,"LI",{});var tke=s(gu);cme=n(tke,"STRONG",{});var Gbt=s(cme);BFo=r(Gbt,"dpt"),Gbt.forEach(t),IFo=r(tke," \u2014 "),yj=n(tke,"A",{href:!0});var Obt=s(yj);NFo=r(Obt,"DPTFeatureExtractor"),Obt.forEach(t),qFo=r(tke," (DPT model)"),tke.forEach(t),jFo=i(Y),hu=n(Y,"LI",{});var ake=s(hu);mme=n(ake,"STRONG",{});var Vbt=s(mme);DFo=r(Vbt,"flava"),Vbt.forEach(t),GFo=r(ake," \u2014 "),xj=n(ake,"A",{href:!0});var Xbt=s(xj);OFo=r(Xbt,"FlavaFeatureExtractor"),Xbt.forEach(t),VFo=r(ake," (FLAVA model)"),ake.forEach(t),XFo=i(Y),uu=n(Y,"LI",{});var nke=s(uu);fme=n(nke,"STRONG",{});var zbt=s(fme);zFo=r(zbt,"glpn"),zbt.forEach(t),WFo=r(nke," \u2014 "),$j=n(nke,"A",{href:!0});var Wbt=s($j);QFo=r(Wbt,"GLPNFeatureExtractor"),Wbt.forEach(t),UFo=r(nke," (GLPN model)"),nke.forEach(t),HFo=i(Y),pu=n(Y,"LI",{});var ske=s(pu);gme=n(ske,"STRONG",{});var Qbt=s(gme);JFo=r(Qbt,"groupvit"),Qbt.forEach(t),YFo=r(ske," \u2014 "),kj=n(ske,"A",{href:!0});var Ubt=s(kj);KFo=r(Ubt,"CLIPFeatureExtractor"),Ubt.forEach(t),ZFo=r(ske," (GroupViT model)"),ske.forEach(t),eTo=i(Y),_u=n(Y,"LI",{});var lke=s(_u);hme=n(lke,"STRONG",{});var Hbt=s(hme);oTo=r(Hbt,"hubert"),Hbt.forEach(t),rTo=r(lke," \u2014 "),Sj=n(lke,"A",{href:!0});var Jbt=s(Sj);tTo=r(Jbt,"Wav2Vec2FeatureExtractor"),Jbt.forEach(t),aTo=r(lke," (Hubert model)"),lke.forEach(t),nTo=i(Y),bu=n(Y,"LI",{});var ike=s(bu);ume=n(ike,"STRONG",{});var Ybt=s(ume);sTo=r(Ybt,"imagegpt"),Ybt.forEach(t),lTo=r(ike," \u2014 "),Rj=n(ike,"A",{href:!0});var Kbt=s(Rj);iTo=r(Kbt,"ImageGPTFeatureExtractor"),Kbt.forEach(t),dTo=r(ike," (ImageGPT model)"),ike.forEach(t),cTo=i(Y),vu=n(Y,"LI",{});var dke=s(vu);pme=n(dke,"STRONG",{});var Zbt=s(pme);mTo=r(Zbt,"layoutlmv2"),Zbt.forEach(t),fTo=r(dke," \u2014 "),Pj=n(dke,"A",{href:!0});var evt=s(Pj);gTo=r(evt,"LayoutLMv2FeatureExtractor"),evt.forEach(t),hTo=r(dke," (LayoutLMv2 model)"),dke.forEach(t),uTo=i(Y),Fu=n(Y,"LI",{});var cke=s(Fu);_me=n(cke,"STRONG",{});var ovt=s(_me);pTo=r(ovt,"layoutlmv3"),ovt.forEach(t),_To=r(cke," \u2014 "),Bj=n(cke,"A",{href:!0});var rvt=s(Bj);bTo=r(rvt,"LayoutLMv3FeatureExtractor"),rvt.forEach(t),vTo=r(cke," (LayoutLMv3 model)"),cke.forEach(t),FTo=i(Y),Tu=n(Y,"LI",{});var mke=s(Tu);bme=n(mke,"STRONG",{});var tvt=s(bme);TTo=r(tvt,"levit"),tvt.forEach(t),MTo=r(mke," \u2014 "),Ij=n(mke,"A",{href:!0});var avt=s(Ij);ETo=r(avt,"LevitFeatureExtractor"),avt.forEach(t),CTo=r(mke," (LeViT model)"),mke.forEach(t),wTo=i(Y),Mu=n(Y,"LI",{});var fke=s(Mu);vme=n(fke,"STRONG",{});var nvt=s(vme);ATo=r(nvt,"maskformer"),nvt.forEach(t),LTo=r(fke," \u2014 "),Nj=n(fke,"A",{href:!0});var svt=s(Nj);yTo=r(svt,"MaskFormerFeatureExtractor"),svt.forEach(t),xTo=r(fke," (MaskFormer model)"),fke.forEach(t),$To=i(Y),Eu=n(Y,"LI",{});var gke=s(Eu);Fme=n(gke,"STRONG",{});var lvt=s(Fme);kTo=r(lvt,"mctct"),lvt.forEach(t),STo=r(gke," \u2014 "),qj=n(gke,"A",{href:!0});var ivt=s(qj);RTo=r(ivt,"MCTCTFeatureExtractor"),ivt.forEach(t),PTo=r(gke," (M-CTC-T model)"),gke.forEach(t),BTo=i(Y),Cu=n(Y,"LI",{});var hke=s(Cu);Tme=n(hke,"STRONG",{});var dvt=s(Tme);ITo=r(dvt,"mobilevit"),dvt.forEach(t),NTo=r(hke," \u2014 "),jj=n(hke,"A",{href:!0});var cvt=s(jj);qTo=r(cvt,"MobileViTFeatureExtractor"),cvt.forEach(t),jTo=r(hke," (MobileViT model)"),hke.forEach(t),DTo=i(Y),wu=n(Y,"LI",{});var uke=s(wu);Mme=n(uke,"STRONG",{});var mvt=s(Mme);GTo=r(mvt,"owlvit"),mvt.forEach(t),OTo=r(uke," \u2014 "),Dj=n(uke,"A",{href:!0});var fvt=s(Dj);VTo=r(fvt,"OwlViTFeatureExtractor"),fvt.forEach(t),XTo=r(uke," (OWL-ViT model)"),uke.forEach(t),zTo=i(Y),Au=n(Y,"LI",{});var pke=s(Au);Eme=n(pke,"STRONG",{});var gvt=s(Eme);WTo=r(gvt,"perceiver"),gvt.forEach(t),QTo=r(pke," \u2014 "),Gj=n(pke,"A",{href:!0});var hvt=s(Gj);UTo=r(hvt,"PerceiverFeatureExtractor"),hvt.forEach(t),HTo=r(pke," (Perceiver model)"),pke.forEach(t),JTo=i(Y),Lu=n(Y,"LI",{});var _ke=s(Lu);Cme=n(_ke,"STRONG",{});var uvt=s(Cme);YTo=r(uvt,"poolformer"),uvt.forEach(t),KTo=r(_ke," \u2014 "),Oj=n(_ke,"A",{href:!0});var pvt=s(Oj);ZTo=r(pvt,"PoolFormerFeatureExtractor"),pvt.forEach(t),eMo=r(_ke," (PoolFormer model)"),_ke.forEach(t),oMo=i(Y),yu=n(Y,"LI",{});var bke=s(yu);wme=n(bke,"STRONG",{});var _vt=s(wme);rMo=r(_vt,"regnet"),_vt.forEach(t),tMo=r(bke," \u2014 "),Vj=n(bke,"A",{href:!0});var bvt=s(Vj);aMo=r(bvt,"ConvNextFeatureExtractor"),bvt.forEach(t),nMo=r(bke," (RegNet model)"),bke.forEach(t),sMo=i(Y),xu=n(Y,"LI",{});var vke=s(xu);Ame=n(vke,"STRONG",{});var vvt=s(Ame);lMo=r(vvt,"resnet"),vvt.forEach(t),iMo=r(vke," \u2014 "),Xj=n(vke,"A",{href:!0});var Fvt=s(Xj);dMo=r(Fvt,"ConvNextFeatureExtractor"),Fvt.forEach(t),cMo=r(vke," (ResNet model)"),vke.forEach(t),mMo=i(Y),$u=n(Y,"LI",{});var Fke=s($u);Lme=n(Fke,"STRONG",{});var Tvt=s(Lme);fMo=r(Tvt,"segformer"),Tvt.forEach(t),gMo=r(Fke," \u2014 "),zj=n(Fke,"A",{href:!0});var Mvt=s(zj);hMo=r(Mvt,"SegformerFeatureExtractor"),Mvt.forEach(t),uMo=r(Fke," (SegFormer model)"),Fke.forEach(t),pMo=i(Y),ku=n(Y,"LI",{});var Tke=s(ku);yme=n(Tke,"STRONG",{});var Evt=s(yme);_Mo=r(Evt,"speech_to_text"),Evt.forEach(t),bMo=r(Tke," \u2014 "),Wj=n(Tke,"A",{href:!0});var Cvt=s(Wj);vMo=r(Cvt,"Speech2TextFeatureExtractor"),Cvt.forEach(t),FMo=r(Tke," (Speech2Text model)"),Tke.forEach(t),TMo=i(Y),Su=n(Y,"LI",{});var Mke=s(Su);xme=n(Mke,"STRONG",{});var wvt=s(xme);MMo=r(wvt,"swin"),wvt.forEach(t),EMo=r(Mke," \u2014 "),Qj=n(Mke,"A",{href:!0});var Avt=s(Qj);CMo=r(Avt,"ViTFeatureExtractor"),Avt.forEach(t),wMo=r(Mke," (Swin Transformer model)"),Mke.forEach(t),AMo=i(Y),Ru=n(Y,"LI",{});var Eke=s(Ru);$me=n(Eke,"STRONG",{});var Lvt=s($me);LMo=r(Lvt,"swinv2"),Lvt.forEach(t),yMo=r(Eke," \u2014 "),Uj=n(Eke,"A",{href:!0});var yvt=s(Uj);xMo=r(yvt,"ViTFeatureExtractor"),yvt.forEach(t),$Mo=r(Eke," (Swin Transformer V2 model)"),Eke.forEach(t),kMo=i(Y),Pu=n(Y,"LI",{});var Cke=s(Pu);kme=n(Cke,"STRONG",{});var xvt=s(kme);SMo=r(xvt,"van"),xvt.forEach(t),RMo=r(Cke," \u2014 "),Hj=n(Cke,"A",{href:!0});var $vt=s(Hj);PMo=r($vt,"ConvNextFeatureExtractor"),$vt.forEach(t),BMo=r(Cke," (VAN model)"),Cke.forEach(t),IMo=i(Y),Bu=n(Y,"LI",{});var wke=s(Bu);Sme=n(wke,"STRONG",{});var kvt=s(Sme);NMo=r(kvt,"videomae"),kvt.forEach(t),qMo=r(wke," \u2014 "),Jj=n(wke,"A",{href:!0});var Svt=s(Jj);jMo=r(Svt,"ViTFeatureExtractor"),Svt.forEach(t),DMo=r(wke," (VideoMAE model)"),wke.forEach(t),GMo=i(Y),Iu=n(Y,"LI",{});var Ake=s(Iu);Rme=n(Ake,"STRONG",{});var Rvt=s(Rme);OMo=r(Rvt,"vilt"),Rvt.forEach(t),VMo=r(Ake," \u2014 "),Yj=n(Ake,"A",{href:!0});var Pvt=s(Yj);XMo=r(Pvt,"ViltFeatureExtractor"),Pvt.forEach(t),zMo=r(Ake," (ViLT model)"),Ake.forEach(t),WMo=i(Y),Nu=n(Y,"LI",{});var Lke=s(Nu);Pme=n(Lke,"STRONG",{});var Bvt=s(Pme);QMo=r(Bvt,"vit"),Bvt.forEach(t),UMo=r(Lke," \u2014 "),Kj=n(Lke,"A",{href:!0});var Ivt=s(Kj);HMo=r(Ivt,"ViTFeatureExtractor"),Ivt.forEach(t),JMo=r(Lke," (ViT model)"),Lke.forEach(t),YMo=i(Y),qu=n(Y,"LI",{});var yke=s(qu);Bme=n(yke,"STRONG",{});var Nvt=s(Bme);KMo=r(Nvt,"vit_mae"),Nvt.forEach(t),ZMo=r(yke," \u2014 "),Zj=n(yke,"A",{href:!0});var qvt=s(Zj);eEo=r(qvt,"ViTFeatureExtractor"),qvt.forEach(t),oEo=r(yke," (ViTMAE model)"),yke.forEach(t),rEo=i(Y),ju=n(Y,"LI",{});var xke=s(ju);Ime=n(xke,"STRONG",{});var jvt=s(Ime);tEo=r(jvt,"wav2vec2"),jvt.forEach(t),aEo=r(xke," \u2014 "),eD=n(xke,"A",{href:!0});var Dvt=s(eD);nEo=r(Dvt,"Wav2Vec2FeatureExtractor"),Dvt.forEach(t),sEo=r(xke," (Wav2Vec2 model)"),xke.forEach(t),lEo=i(Y),Du=n(Y,"LI",{});var $ke=s(Du);Nme=n($ke,"STRONG",{});var Gvt=s(Nme);iEo=r(Gvt,"wav2vec2-conformer"),Gvt.forEach(t),dEo=r($ke," \u2014 "),oD=n($ke,"A",{href:!0});var Ovt=s(oD);cEo=r(Ovt,"Wav2Vec2FeatureExtractor"),Ovt.forEach(t),mEo=r($ke," (Wav2Vec2-Conformer model)"),$ke.forEach(t),fEo=i(Y),Gu=n(Y,"LI",{});var kke=s(Gu);qme=n(kke,"STRONG",{});var Vvt=s(qme);gEo=r(Vvt,"yolos"),Vvt.forEach(t),hEo=r(kke," \u2014 "),rD=n(kke,"A",{href:!0});var Xvt=s(rD);uEo=r(Xvt,"YolosFeatureExtractor"),Xvt.forEach(t),pEo=r(kke," (YOLOS model)"),kke.forEach(t),Y.forEach(t),_Eo=i(ma),T(Ou.$$.fragment,ma),bEo=i(ma),T(Vu.$$.fragment,ma),ma.forEach(t),vEo=i(fl),Xu=n(fl,"DIV",{class:!0});var OHe=s(Xu);T(y8.$$.fragment,OHe),FEo=i(OHe),jme=n(OHe,"P",{});var zvt=s(jme);TEo=r(zvt,"Register a new feature extractor for this class."),zvt.forEach(t),OHe.forEach(t),fl.forEach(t),BQe=i(m),ed=n(m,"H2",{class:!0});var VHe=s(ed);zu=n(VHe,"A",{id:!0,class:!0,href:!0});var Wvt=s(zu);Dme=n(Wvt,"SPAN",{});var Qvt=s(Dme);T(x8.$$.fragment,Qvt),Qvt.forEach(t),Wvt.forEach(t),MEo=i(VHe),Gme=n(VHe,"SPAN",{});var Uvt=s(Gme);EEo=r(Uvt,"AutoProcessor"),Uvt.forEach(t),VHe.forEach(t),IQe=i(m),ko=n(m,"DIV",{class:!0});var gl=s(ko);T($8.$$.fragment,gl),CEo=i(gl),k8=n(gl,"P",{});var XHe=s(k8);wEo=r(XHe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),tD=n(XHe,"A",{href:!0});var Hvt=s(tD);AEo=r(Hvt,"AutoProcessor.from_pretrained()"),Hvt.forEach(t),LEo=r(XHe," class method."),XHe.forEach(t),yEo=i(gl),S8=n(gl,"P",{});var zHe=s(S8);xEo=r(zHe,"This class cannot be instantiated directly using "),Ome=n(zHe,"CODE",{});var Jvt=s(Ome);$Eo=r(Jvt,"__init__()"),Jvt.forEach(t),kEo=r(zHe," (throws an error)."),zHe.forEach(t),SEo=i(gl),Je=n(gl,"DIV",{class:!0});var fa=s(Je);T(R8.$$.fragment,fa),REo=i(fa),Vme=n(fa,"P",{});var Yvt=s(Vme);PEo=r(Yvt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Yvt.forEach(t),BEo=i(fa),od=n(fa,"P",{});var kae=s(od);IEo=r(kae,"The processor class to instantiate is selected based on the "),Xme=n(kae,"CODE",{});var Kvt=s(Xme);NEo=r(Kvt,"model_type"),Kvt.forEach(t),qEo=r(kae,` property of the config object (either
passed as an argument or loaded from `),zme=n(kae,"CODE",{});var Zvt=s(zme);jEo=r(Zvt,"pretrained_model_name_or_path"),Zvt.forEach(t),DEo=r(kae," if possible):"),kae.forEach(t),GEo=i(fa),me=n(fa,"UL",{});var pe=s(me);Wu=n(pe,"LI",{});var Ske=s(Wu);Wme=n(Ske,"STRONG",{});var e1t=s(Wme);OEo=r(e1t,"clip"),e1t.forEach(t),VEo=r(Ske," \u2014 "),aD=n(Ske,"A",{href:!0});var o1t=s(aD);XEo=r(o1t,"CLIPProcessor"),o1t.forEach(t),zEo=r(Ske," (CLIP model)"),Ske.forEach(t),WEo=i(pe),Qu=n(pe,"LI",{});var Rke=s(Qu);Qme=n(Rke,"STRONG",{});var r1t=s(Qme);QEo=r(r1t,"flava"),r1t.forEach(t),UEo=r(Rke," \u2014 "),nD=n(Rke,"A",{href:!0});var t1t=s(nD);HEo=r(t1t,"FlavaProcessor"),t1t.forEach(t),JEo=r(Rke," (FLAVA model)"),Rke.forEach(t),YEo=i(pe),Uu=n(pe,"LI",{});var Pke=s(Uu);Ume=n(Pke,"STRONG",{});var a1t=s(Ume);KEo=r(a1t,"groupvit"),a1t.forEach(t),ZEo=r(Pke," \u2014 "),sD=n(Pke,"A",{href:!0});var n1t=s(sD);e4o=r(n1t,"CLIPProcessor"),n1t.forEach(t),o4o=r(Pke," (GroupViT model)"),Pke.forEach(t),r4o=i(pe),Hu=n(pe,"LI",{});var Bke=s(Hu);Hme=n(Bke,"STRONG",{});var s1t=s(Hme);t4o=r(s1t,"layoutlmv2"),s1t.forEach(t),a4o=r(Bke," \u2014 "),lD=n(Bke,"A",{href:!0});var l1t=s(lD);n4o=r(l1t,"LayoutLMv2Processor"),l1t.forEach(t),s4o=r(Bke," (LayoutLMv2 model)"),Bke.forEach(t),l4o=i(pe),Ju=n(pe,"LI",{});var Ike=s(Ju);Jme=n(Ike,"STRONG",{});var i1t=s(Jme);i4o=r(i1t,"layoutlmv3"),i1t.forEach(t),d4o=r(Ike," \u2014 "),iD=n(Ike,"A",{href:!0});var d1t=s(iD);c4o=r(d1t,"LayoutLMv3Processor"),d1t.forEach(t),m4o=r(Ike," (LayoutLMv3 model)"),Ike.forEach(t),f4o=i(pe),Yu=n(pe,"LI",{});var Nke=s(Yu);Yme=n(Nke,"STRONG",{});var c1t=s(Yme);g4o=r(c1t,"layoutxlm"),c1t.forEach(t),h4o=r(Nke," \u2014 "),dD=n(Nke,"A",{href:!0});var m1t=s(dD);u4o=r(m1t,"LayoutXLMProcessor"),m1t.forEach(t),p4o=r(Nke," (LayoutXLM model)"),Nke.forEach(t),_4o=i(pe),Ku=n(pe,"LI",{});var qke=s(Ku);Kme=n(qke,"STRONG",{});var f1t=s(Kme);b4o=r(f1t,"owlvit"),f1t.forEach(t),v4o=r(qke," \u2014 "),cD=n(qke,"A",{href:!0});var g1t=s(cD);F4o=r(g1t,"OwlViTProcessor"),g1t.forEach(t),T4o=r(qke," (OWL-ViT model)"),qke.forEach(t),M4o=i(pe),Zu=n(pe,"LI",{});var jke=s(Zu);Zme=n(jke,"STRONG",{});var h1t=s(Zme);E4o=r(h1t,"sew"),h1t.forEach(t),C4o=r(jke," \u2014 "),mD=n(jke,"A",{href:!0});var u1t=s(mD);w4o=r(u1t,"Wav2Vec2Processor"),u1t.forEach(t),A4o=r(jke," (SEW model)"),jke.forEach(t),L4o=i(pe),ep=n(pe,"LI",{});var Dke=s(ep);efe=n(Dke,"STRONG",{});var p1t=s(efe);y4o=r(p1t,"sew-d"),p1t.forEach(t),x4o=r(Dke," \u2014 "),fD=n(Dke,"A",{href:!0});var _1t=s(fD);$4o=r(_1t,"Wav2Vec2Processor"),_1t.forEach(t),k4o=r(Dke," (SEW-D model)"),Dke.forEach(t),S4o=i(pe),op=n(pe,"LI",{});var Gke=s(op);ofe=n(Gke,"STRONG",{});var b1t=s(ofe);R4o=r(b1t,"speech_to_text"),b1t.forEach(t),P4o=r(Gke," \u2014 "),gD=n(Gke,"A",{href:!0});var v1t=s(gD);B4o=r(v1t,"Speech2TextProcessor"),v1t.forEach(t),I4o=r(Gke," (Speech2Text model)"),Gke.forEach(t),N4o=i(pe),rp=n(pe,"LI",{});var Oke=s(rp);rfe=n(Oke,"STRONG",{});var F1t=s(rfe);q4o=r(F1t,"speech_to_text_2"),F1t.forEach(t),j4o=r(Oke," \u2014 "),hD=n(Oke,"A",{href:!0});var T1t=s(hD);D4o=r(T1t,"Speech2Text2Processor"),T1t.forEach(t),G4o=r(Oke," (Speech2Text2 model)"),Oke.forEach(t),O4o=i(pe),tp=n(pe,"LI",{});var Vke=s(tp);tfe=n(Vke,"STRONG",{});var M1t=s(tfe);V4o=r(M1t,"trocr"),M1t.forEach(t),X4o=r(Vke," \u2014 "),uD=n(Vke,"A",{href:!0});var E1t=s(uD);z4o=r(E1t,"TrOCRProcessor"),E1t.forEach(t),W4o=r(Vke," (TrOCR model)"),Vke.forEach(t),Q4o=i(pe),ap=n(pe,"LI",{});var Xke=s(ap);afe=n(Xke,"STRONG",{});var C1t=s(afe);U4o=r(C1t,"unispeech"),C1t.forEach(t),H4o=r(Xke," \u2014 "),pD=n(Xke,"A",{href:!0});var w1t=s(pD);J4o=r(w1t,"Wav2Vec2Processor"),w1t.forEach(t),Y4o=r(Xke," (UniSpeech model)"),Xke.forEach(t),K4o=i(pe),np=n(pe,"LI",{});var zke=s(np);nfe=n(zke,"STRONG",{});var A1t=s(nfe);Z4o=r(A1t,"unispeech-sat"),A1t.forEach(t),eCo=r(zke," \u2014 "),_D=n(zke,"A",{href:!0});var L1t=s(_D);oCo=r(L1t,"Wav2Vec2Processor"),L1t.forEach(t),rCo=r(zke," (UniSpeechSat model)"),zke.forEach(t),tCo=i(pe),sp=n(pe,"LI",{});var Wke=s(sp);sfe=n(Wke,"STRONG",{});var y1t=s(sfe);aCo=r(y1t,"vilt"),y1t.forEach(t),nCo=r(Wke," \u2014 "),bD=n(Wke,"A",{href:!0});var x1t=s(bD);sCo=r(x1t,"ViltProcessor"),x1t.forEach(t),lCo=r(Wke," (ViLT model)"),Wke.forEach(t),iCo=i(pe),lp=n(pe,"LI",{});var Qke=s(lp);lfe=n(Qke,"STRONG",{});var $1t=s(lfe);dCo=r($1t,"vision-text-dual-encoder"),$1t.forEach(t),cCo=r(Qke," \u2014 "),vD=n(Qke,"A",{href:!0});var k1t=s(vD);mCo=r(k1t,"VisionTextDualEncoderProcessor"),k1t.forEach(t),fCo=r(Qke," (VisionTextDualEncoder model)"),Qke.forEach(t),gCo=i(pe),ip=n(pe,"LI",{});var Uke=s(ip);ife=n(Uke,"STRONG",{});var S1t=s(ife);hCo=r(S1t,"wav2vec2"),S1t.forEach(t),uCo=r(Uke," \u2014 "),FD=n(Uke,"A",{href:!0});var R1t=s(FD);pCo=r(R1t,"Wav2Vec2Processor"),R1t.forEach(t),_Co=r(Uke," (Wav2Vec2 model)"),Uke.forEach(t),bCo=i(pe),dp=n(pe,"LI",{});var Hke=s(dp);dfe=n(Hke,"STRONG",{});var P1t=s(dfe);vCo=r(P1t,"wav2vec2-conformer"),P1t.forEach(t),FCo=r(Hke," \u2014 "),TD=n(Hke,"A",{href:!0});var B1t=s(TD);TCo=r(B1t,"Wav2Vec2Processor"),B1t.forEach(t),MCo=r(Hke," (Wav2Vec2-Conformer model)"),Hke.forEach(t),ECo=i(pe),cp=n(pe,"LI",{});var Jke=s(cp);cfe=n(Jke,"STRONG",{});var I1t=s(cfe);CCo=r(I1t,"wavlm"),I1t.forEach(t),wCo=r(Jke," \u2014 "),MD=n(Jke,"A",{href:!0});var N1t=s(MD);ACo=r(N1t,"Wav2Vec2Processor"),N1t.forEach(t),LCo=r(Jke," (WavLM model)"),Jke.forEach(t),pe.forEach(t),yCo=i(fa),T(mp.$$.fragment,fa),xCo=i(fa),T(fp.$$.fragment,fa),fa.forEach(t),$Co=i(gl),gp=n(gl,"DIV",{class:!0});var WHe=s(gp);T(P8.$$.fragment,WHe),kCo=i(WHe),mfe=n(WHe,"P",{});var q1t=s(mfe);SCo=r(q1t,"Register a new processor for this class."),q1t.forEach(t),WHe.forEach(t),gl.forEach(t),NQe=i(m),rd=n(m,"H2",{class:!0});var QHe=s(rd);hp=n(QHe,"A",{id:!0,class:!0,href:!0});var j1t=s(hp);ffe=n(j1t,"SPAN",{});var D1t=s(ffe);T(B8.$$.fragment,D1t),D1t.forEach(t),j1t.forEach(t),RCo=i(QHe),gfe=n(QHe,"SPAN",{});var G1t=s(gfe);PCo=r(G1t,"AutoModel"),G1t.forEach(t),QHe.forEach(t),qQe=i(m),So=n(m,"DIV",{class:!0});var hl=s(So);T(I8.$$.fragment,hl),BCo=i(hl),td=n(hl,"P",{});var Sae=s(td);ICo=r(Sae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ED=n(Sae,"A",{href:!0});var O1t=s(ED);NCo=r(O1t,"from_pretrained()"),O1t.forEach(t),qCo=r(Sae," class method or the "),CD=n(Sae,"A",{href:!0});var V1t=s(CD);jCo=r(V1t,"from_config()"),V1t.forEach(t),DCo=r(Sae,` class
method.`),Sae.forEach(t),GCo=i(hl),N8=n(hl,"P",{});var UHe=s(N8);OCo=r(UHe,"This class cannot be instantiated directly using "),hfe=n(UHe,"CODE",{});var X1t=s(hfe);VCo=r(X1t,"__init__()"),X1t.forEach(t),XCo=r(UHe," (throws an error)."),UHe.forEach(t),zCo=i(hl),ft=n(hl,"DIV",{class:!0});var iL=s(ft);T(q8.$$.fragment,iL),WCo=i(iL),ufe=n(iL,"P",{});var z1t=s(ufe);QCo=r(z1t,"Instantiates one of the base model classes of the library from a configuration."),z1t.forEach(t),UCo=i(iL),ad=n(iL,"P",{});var Rae=s(ad);HCo=r(Rae,`Note:
Loading a model from its configuration file does `),pfe=n(Rae,"STRONG",{});var W1t=s(pfe);JCo=r(W1t,"not"),W1t.forEach(t),YCo=r(Rae,` load the model weights. It only affects the
model\u2019s configuration. Use `),wD=n(Rae,"A",{href:!0});var Q1t=s(wD);KCo=r(Q1t,"from_pretrained()"),Q1t.forEach(t),ZCo=r(Rae," to load the model weights."),Rae.forEach(t),e3o=i(iL),T(up.$$.fragment,iL),iL.forEach(t),o3o=i(hl),Ye=n(hl,"DIV",{class:!0});var ga=s(Ye);T(j8.$$.fragment,ga),r3o=i(ga),_fe=n(ga,"P",{});var U1t=s(_fe);t3o=r(U1t,"Instantiate one of the base model classes of the library from a pretrained model."),U1t.forEach(t),a3o=i(ga),Va=n(ga,"P",{});var dL=s(Va);n3o=r(dL,"The model class to instantiate is selected based on the "),bfe=n(dL,"CODE",{});var H1t=s(bfe);s3o=r(H1t,"model_type"),H1t.forEach(t),l3o=r(dL,` property of the config object (either
passed as an argument or loaded from `),vfe=n(dL,"CODE",{});var J1t=s(vfe);i3o=r(J1t,"pretrained_model_name_or_path"),J1t.forEach(t),d3o=r(dL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ffe=n(dL,"CODE",{});var Y1t=s(Ffe);c3o=r(Y1t,"pretrained_model_name_or_path"),Y1t.forEach(t),m3o=r(dL,":"),dL.forEach(t),f3o=i(ga),y=n(ga,"UL",{});var x=s(y);pp=n(x,"LI",{});var Yke=s(pp);Tfe=n(Yke,"STRONG",{});var K1t=s(Tfe);g3o=r(K1t,"albert"),K1t.forEach(t),h3o=r(Yke," \u2014 "),AD=n(Yke,"A",{href:!0});var Z1t=s(AD);u3o=r(Z1t,"AlbertModel"),Z1t.forEach(t),p3o=r(Yke," (ALBERT model)"),Yke.forEach(t),_3o=i(x),_p=n(x,"LI",{});var Kke=s(_p);Mfe=n(Kke,"STRONG",{});var eFt=s(Mfe);b3o=r(eFt,"bart"),eFt.forEach(t),v3o=r(Kke," \u2014 "),LD=n(Kke,"A",{href:!0});var oFt=s(LD);F3o=r(oFt,"BartModel"),oFt.forEach(t),T3o=r(Kke," (BART model)"),Kke.forEach(t),M3o=i(x),bp=n(x,"LI",{});var Zke=s(bp);Efe=n(Zke,"STRONG",{});var rFt=s(Efe);E3o=r(rFt,"beit"),rFt.forEach(t),C3o=r(Zke," \u2014 "),yD=n(Zke,"A",{href:!0});var tFt=s(yD);w3o=r(tFt,"BeitModel"),tFt.forEach(t),A3o=r(Zke," (BEiT model)"),Zke.forEach(t),L3o=i(x),vp=n(x,"LI",{});var eSe=s(vp);Cfe=n(eSe,"STRONG",{});var aFt=s(Cfe);y3o=r(aFt,"bert"),aFt.forEach(t),x3o=r(eSe," \u2014 "),xD=n(eSe,"A",{href:!0});var nFt=s(xD);$3o=r(nFt,"BertModel"),nFt.forEach(t),k3o=r(eSe," (BERT model)"),eSe.forEach(t),S3o=i(x),Fp=n(x,"LI",{});var oSe=s(Fp);wfe=n(oSe,"STRONG",{});var sFt=s(wfe);R3o=r(sFt,"bert-generation"),sFt.forEach(t),P3o=r(oSe," \u2014 "),$D=n(oSe,"A",{href:!0});var lFt=s($D);B3o=r(lFt,"BertGenerationEncoder"),lFt.forEach(t),I3o=r(oSe," (Bert Generation model)"),oSe.forEach(t),N3o=i(x),Tp=n(x,"LI",{});var rSe=s(Tp);Afe=n(rSe,"STRONG",{});var iFt=s(Afe);q3o=r(iFt,"big_bird"),iFt.forEach(t),j3o=r(rSe," \u2014 "),kD=n(rSe,"A",{href:!0});var dFt=s(kD);D3o=r(dFt,"BigBirdModel"),dFt.forEach(t),G3o=r(rSe," (BigBird model)"),rSe.forEach(t),O3o=i(x),Mp=n(x,"LI",{});var tSe=s(Mp);Lfe=n(tSe,"STRONG",{});var cFt=s(Lfe);V3o=r(cFt,"bigbird_pegasus"),cFt.forEach(t),X3o=r(tSe," \u2014 "),SD=n(tSe,"A",{href:!0});var mFt=s(SD);z3o=r(mFt,"BigBirdPegasusModel"),mFt.forEach(t),W3o=r(tSe," (BigBird-Pegasus model)"),tSe.forEach(t),Q3o=i(x),Ep=n(x,"LI",{});var aSe=s(Ep);yfe=n(aSe,"STRONG",{});var fFt=s(yfe);U3o=r(fFt,"blenderbot"),fFt.forEach(t),H3o=r(aSe," \u2014 "),RD=n(aSe,"A",{href:!0});var gFt=s(RD);J3o=r(gFt,"BlenderbotModel"),gFt.forEach(t),Y3o=r(aSe," (Blenderbot model)"),aSe.forEach(t),K3o=i(x),Cp=n(x,"LI",{});var nSe=s(Cp);xfe=n(nSe,"STRONG",{});var hFt=s(xfe);Z3o=r(hFt,"blenderbot-small"),hFt.forEach(t),e5o=r(nSe," \u2014 "),PD=n(nSe,"A",{href:!0});var uFt=s(PD);o5o=r(uFt,"BlenderbotSmallModel"),uFt.forEach(t),r5o=r(nSe," (BlenderbotSmall model)"),nSe.forEach(t),t5o=i(x),wp=n(x,"LI",{});var sSe=s(wp);$fe=n(sSe,"STRONG",{});var pFt=s($fe);a5o=r(pFt,"bloom"),pFt.forEach(t),n5o=r(sSe," \u2014 "),BD=n(sSe,"A",{href:!0});var _Ft=s(BD);s5o=r(_Ft,"BloomModel"),_Ft.forEach(t),l5o=r(sSe," (BLOOM model)"),sSe.forEach(t),i5o=i(x),Ap=n(x,"LI",{});var lSe=s(Ap);kfe=n(lSe,"STRONG",{});var bFt=s(kfe);d5o=r(bFt,"camembert"),bFt.forEach(t),c5o=r(lSe," \u2014 "),ID=n(lSe,"A",{href:!0});var vFt=s(ID);m5o=r(vFt,"CamembertModel"),vFt.forEach(t),f5o=r(lSe," (CamemBERT model)"),lSe.forEach(t),g5o=i(x),Lp=n(x,"LI",{});var iSe=s(Lp);Sfe=n(iSe,"STRONG",{});var FFt=s(Sfe);h5o=r(FFt,"canine"),FFt.forEach(t),u5o=r(iSe," \u2014 "),ND=n(iSe,"A",{href:!0});var TFt=s(ND);p5o=r(TFt,"CanineModel"),TFt.forEach(t),_5o=r(iSe," (CANINE model)"),iSe.forEach(t),b5o=i(x),yp=n(x,"LI",{});var dSe=s(yp);Rfe=n(dSe,"STRONG",{});var MFt=s(Rfe);v5o=r(MFt,"clip"),MFt.forEach(t),F5o=r(dSe," \u2014 "),qD=n(dSe,"A",{href:!0});var EFt=s(qD);T5o=r(EFt,"CLIPModel"),EFt.forEach(t),M5o=r(dSe," (CLIP model)"),dSe.forEach(t),E5o=i(x),xp=n(x,"LI",{});var cSe=s(xp);Pfe=n(cSe,"STRONG",{});var CFt=s(Pfe);C5o=r(CFt,"codegen"),CFt.forEach(t),w5o=r(cSe," \u2014 "),jD=n(cSe,"A",{href:!0});var wFt=s(jD);A5o=r(wFt,"CodeGenModel"),wFt.forEach(t),L5o=r(cSe," (CodeGen model)"),cSe.forEach(t),y5o=i(x),$p=n(x,"LI",{});var mSe=s($p);Bfe=n(mSe,"STRONG",{});var AFt=s(Bfe);x5o=r(AFt,"convbert"),AFt.forEach(t),$5o=r(mSe," \u2014 "),DD=n(mSe,"A",{href:!0});var LFt=s(DD);k5o=r(LFt,"ConvBertModel"),LFt.forEach(t),S5o=r(mSe," (ConvBERT model)"),mSe.forEach(t),R5o=i(x),kp=n(x,"LI",{});var fSe=s(kp);Ife=n(fSe,"STRONG",{});var yFt=s(Ife);P5o=r(yFt,"convnext"),yFt.forEach(t),B5o=r(fSe," \u2014 "),GD=n(fSe,"A",{href:!0});var xFt=s(GD);I5o=r(xFt,"ConvNextModel"),xFt.forEach(t),N5o=r(fSe," (ConvNeXT model)"),fSe.forEach(t),q5o=i(x),Sp=n(x,"LI",{});var gSe=s(Sp);Nfe=n(gSe,"STRONG",{});var $Ft=s(Nfe);j5o=r($Ft,"ctrl"),$Ft.forEach(t),D5o=r(gSe," \u2014 "),OD=n(gSe,"A",{href:!0});var kFt=s(OD);G5o=r(kFt,"CTRLModel"),kFt.forEach(t),O5o=r(gSe," (CTRL model)"),gSe.forEach(t),V5o=i(x),Rp=n(x,"LI",{});var hSe=s(Rp);qfe=n(hSe,"STRONG",{});var SFt=s(qfe);X5o=r(SFt,"cvt"),SFt.forEach(t),z5o=r(hSe," \u2014 "),VD=n(hSe,"A",{href:!0});var RFt=s(VD);W5o=r(RFt,"CvtModel"),RFt.forEach(t),Q5o=r(hSe," (CvT model)"),hSe.forEach(t),U5o=i(x),Pp=n(x,"LI",{});var uSe=s(Pp);jfe=n(uSe,"STRONG",{});var PFt=s(jfe);H5o=r(PFt,"data2vec-audio"),PFt.forEach(t),J5o=r(uSe," \u2014 "),XD=n(uSe,"A",{href:!0});var BFt=s(XD);Y5o=r(BFt,"Data2VecAudioModel"),BFt.forEach(t),K5o=r(uSe," (Data2VecAudio model)"),uSe.forEach(t),Z5o=i(x),Bp=n(x,"LI",{});var pSe=s(Bp);Dfe=n(pSe,"STRONG",{});var IFt=s(Dfe);e0o=r(IFt,"data2vec-text"),IFt.forEach(t),o0o=r(pSe," \u2014 "),zD=n(pSe,"A",{href:!0});var NFt=s(zD);r0o=r(NFt,"Data2VecTextModel"),NFt.forEach(t),t0o=r(pSe," (Data2VecText model)"),pSe.forEach(t),a0o=i(x),Ip=n(x,"LI",{});var _Se=s(Ip);Gfe=n(_Se,"STRONG",{});var qFt=s(Gfe);n0o=r(qFt,"data2vec-vision"),qFt.forEach(t),s0o=r(_Se," \u2014 "),WD=n(_Se,"A",{href:!0});var jFt=s(WD);l0o=r(jFt,"Data2VecVisionModel"),jFt.forEach(t),i0o=r(_Se," (Data2VecVision model)"),_Se.forEach(t),d0o=i(x),Np=n(x,"LI",{});var bSe=s(Np);Ofe=n(bSe,"STRONG",{});var DFt=s(Ofe);c0o=r(DFt,"deberta"),DFt.forEach(t),m0o=r(bSe," \u2014 "),QD=n(bSe,"A",{href:!0});var GFt=s(QD);f0o=r(GFt,"DebertaModel"),GFt.forEach(t),g0o=r(bSe," (DeBERTa model)"),bSe.forEach(t),h0o=i(x),qp=n(x,"LI",{});var vSe=s(qp);Vfe=n(vSe,"STRONG",{});var OFt=s(Vfe);u0o=r(OFt,"deberta-v2"),OFt.forEach(t),p0o=r(vSe," \u2014 "),UD=n(vSe,"A",{href:!0});var VFt=s(UD);_0o=r(VFt,"DebertaV2Model"),VFt.forEach(t),b0o=r(vSe," (DeBERTa-v2 model)"),vSe.forEach(t),v0o=i(x),jp=n(x,"LI",{});var FSe=s(jp);Xfe=n(FSe,"STRONG",{});var XFt=s(Xfe);F0o=r(XFt,"decision_transformer"),XFt.forEach(t),T0o=r(FSe," \u2014 "),HD=n(FSe,"A",{href:!0});var zFt=s(HD);M0o=r(zFt,"DecisionTransformerModel"),zFt.forEach(t),E0o=r(FSe," (Decision Transformer model)"),FSe.forEach(t),C0o=i(x),Dp=n(x,"LI",{});var TSe=s(Dp);zfe=n(TSe,"STRONG",{});var WFt=s(zfe);w0o=r(WFt,"deit"),WFt.forEach(t),A0o=r(TSe," \u2014 "),JD=n(TSe,"A",{href:!0});var QFt=s(JD);L0o=r(QFt,"DeiTModel"),QFt.forEach(t),y0o=r(TSe," (DeiT model)"),TSe.forEach(t),x0o=i(x),Gp=n(x,"LI",{});var MSe=s(Gp);Wfe=n(MSe,"STRONG",{});var UFt=s(Wfe);$0o=r(UFt,"detr"),UFt.forEach(t),k0o=r(MSe," \u2014 "),YD=n(MSe,"A",{href:!0});var HFt=s(YD);S0o=r(HFt,"DetrModel"),HFt.forEach(t),R0o=r(MSe," (DETR model)"),MSe.forEach(t),P0o=i(x),Op=n(x,"LI",{});var ESe=s(Op);Qfe=n(ESe,"STRONG",{});var JFt=s(Qfe);B0o=r(JFt,"distilbert"),JFt.forEach(t),I0o=r(ESe," \u2014 "),KD=n(ESe,"A",{href:!0});var YFt=s(KD);N0o=r(YFt,"DistilBertModel"),YFt.forEach(t),q0o=r(ESe," (DistilBERT model)"),ESe.forEach(t),j0o=i(x),Vp=n(x,"LI",{});var CSe=s(Vp);Ufe=n(CSe,"STRONG",{});var KFt=s(Ufe);D0o=r(KFt,"dpr"),KFt.forEach(t),G0o=r(CSe," \u2014 "),ZD=n(CSe,"A",{href:!0});var ZFt=s(ZD);O0o=r(ZFt,"DPRQuestionEncoder"),ZFt.forEach(t),V0o=r(CSe," (DPR model)"),CSe.forEach(t),X0o=i(x),Xp=n(x,"LI",{});var wSe=s(Xp);Hfe=n(wSe,"STRONG",{});var eTt=s(Hfe);z0o=r(eTt,"dpt"),eTt.forEach(t),W0o=r(wSe," \u2014 "),eG=n(wSe,"A",{href:!0});var oTt=s(eG);Q0o=r(oTt,"DPTModel"),oTt.forEach(t),U0o=r(wSe," (DPT model)"),wSe.forEach(t),H0o=i(x),zp=n(x,"LI",{});var ASe=s(zp);Jfe=n(ASe,"STRONG",{});var rTt=s(Jfe);J0o=r(rTt,"electra"),rTt.forEach(t),Y0o=r(ASe," \u2014 "),oG=n(ASe,"A",{href:!0});var tTt=s(oG);K0o=r(tTt,"ElectraModel"),tTt.forEach(t),Z0o=r(ASe," (ELECTRA model)"),ASe.forEach(t),ewo=i(x),Wp=n(x,"LI",{});var LSe=s(Wp);Yfe=n(LSe,"STRONG",{});var aTt=s(Yfe);owo=r(aTt,"flaubert"),aTt.forEach(t),rwo=r(LSe," \u2014 "),rG=n(LSe,"A",{href:!0});var nTt=s(rG);two=r(nTt,"FlaubertModel"),nTt.forEach(t),awo=r(LSe," (FlauBERT model)"),LSe.forEach(t),nwo=i(x),Qp=n(x,"LI",{});var ySe=s(Qp);Kfe=n(ySe,"STRONG",{});var sTt=s(Kfe);swo=r(sTt,"flava"),sTt.forEach(t),lwo=r(ySe," \u2014 "),tG=n(ySe,"A",{href:!0});var lTt=s(tG);iwo=r(lTt,"FlavaModel"),lTt.forEach(t),dwo=r(ySe," (FLAVA model)"),ySe.forEach(t),cwo=i(x),Up=n(x,"LI",{});var xSe=s(Up);Zfe=n(xSe,"STRONG",{});var iTt=s(Zfe);mwo=r(iTt,"fnet"),iTt.forEach(t),fwo=r(xSe," \u2014 "),aG=n(xSe,"A",{href:!0});var dTt=s(aG);gwo=r(dTt,"FNetModel"),dTt.forEach(t),hwo=r(xSe," (FNet model)"),xSe.forEach(t),uwo=i(x),Hp=n(x,"LI",{});var $Se=s(Hp);ege=n($Se,"STRONG",{});var cTt=s(ege);pwo=r(cTt,"fsmt"),cTt.forEach(t),_wo=r($Se," \u2014 "),nG=n($Se,"A",{href:!0});var mTt=s(nG);bwo=r(mTt,"FSMTModel"),mTt.forEach(t),vwo=r($Se," (FairSeq Machine-Translation model)"),$Se.forEach(t),Fwo=i(x),nl=n(x,"LI",{});var UR=s(nl);oge=n(UR,"STRONG",{});var fTt=s(oge);Two=r(fTt,"funnel"),fTt.forEach(t),Mwo=r(UR," \u2014 "),sG=n(UR,"A",{href:!0});var gTt=s(sG);Ewo=r(gTt,"FunnelModel"),gTt.forEach(t),Cwo=r(UR," or "),lG=n(UR,"A",{href:!0});var hTt=s(lG);wwo=r(hTt,"FunnelBaseModel"),hTt.forEach(t),Awo=r(UR," (Funnel Transformer model)"),UR.forEach(t),Lwo=i(x),Jp=n(x,"LI",{});var kSe=s(Jp);rge=n(kSe,"STRONG",{});var uTt=s(rge);ywo=r(uTt,"glpn"),uTt.forEach(t),xwo=r(kSe," \u2014 "),iG=n(kSe,"A",{href:!0});var pTt=s(iG);$wo=r(pTt,"GLPNModel"),pTt.forEach(t),kwo=r(kSe," (GLPN model)"),kSe.forEach(t),Swo=i(x),Yp=n(x,"LI",{});var SSe=s(Yp);tge=n(SSe,"STRONG",{});var _Tt=s(tge);Rwo=r(_Tt,"gpt2"),_Tt.forEach(t),Pwo=r(SSe," \u2014 "),dG=n(SSe,"A",{href:!0});var bTt=s(dG);Bwo=r(bTt,"GPT2Model"),bTt.forEach(t),Iwo=r(SSe," (OpenAI GPT-2 model)"),SSe.forEach(t),Nwo=i(x),Kp=n(x,"LI",{});var RSe=s(Kp);age=n(RSe,"STRONG",{});var vTt=s(age);qwo=r(vTt,"gpt_neo"),vTt.forEach(t),jwo=r(RSe," \u2014 "),cG=n(RSe,"A",{href:!0});var FTt=s(cG);Dwo=r(FTt,"GPTNeoModel"),FTt.forEach(t),Gwo=r(RSe," (GPT Neo model)"),RSe.forEach(t),Owo=i(x),Zp=n(x,"LI",{});var PSe=s(Zp);nge=n(PSe,"STRONG",{});var TTt=s(nge);Vwo=r(TTt,"gpt_neox"),TTt.forEach(t),Xwo=r(PSe," \u2014 "),mG=n(PSe,"A",{href:!0});var MTt=s(mG);zwo=r(MTt,"GPTNeoXModel"),MTt.forEach(t),Wwo=r(PSe," (GPT NeoX model)"),PSe.forEach(t),Qwo=i(x),e_=n(x,"LI",{});var BSe=s(e_);sge=n(BSe,"STRONG",{});var ETt=s(sge);Uwo=r(ETt,"gptj"),ETt.forEach(t),Hwo=r(BSe," \u2014 "),fG=n(BSe,"A",{href:!0});var CTt=s(fG);Jwo=r(CTt,"GPTJModel"),CTt.forEach(t),Ywo=r(BSe," (GPT-J model)"),BSe.forEach(t),Kwo=i(x),o_=n(x,"LI",{});var ISe=s(o_);lge=n(ISe,"STRONG",{});var wTt=s(lge);Zwo=r(wTt,"groupvit"),wTt.forEach(t),e6o=r(ISe," \u2014 "),gG=n(ISe,"A",{href:!0});var ATt=s(gG);o6o=r(ATt,"GroupViTModel"),ATt.forEach(t),r6o=r(ISe," (GroupViT model)"),ISe.forEach(t),t6o=i(x),r_=n(x,"LI",{});var NSe=s(r_);ige=n(NSe,"STRONG",{});var LTt=s(ige);a6o=r(LTt,"hubert"),LTt.forEach(t),n6o=r(NSe," \u2014 "),hG=n(NSe,"A",{href:!0});var yTt=s(hG);s6o=r(yTt,"HubertModel"),yTt.forEach(t),l6o=r(NSe," (Hubert model)"),NSe.forEach(t),i6o=i(x),t_=n(x,"LI",{});var qSe=s(t_);dge=n(qSe,"STRONG",{});var xTt=s(dge);d6o=r(xTt,"ibert"),xTt.forEach(t),c6o=r(qSe," \u2014 "),uG=n(qSe,"A",{href:!0});var $Tt=s(uG);m6o=r($Tt,"IBertModel"),$Tt.forEach(t),f6o=r(qSe," (I-BERT model)"),qSe.forEach(t),g6o=i(x),a_=n(x,"LI",{});var jSe=s(a_);cge=n(jSe,"STRONG",{});var kTt=s(cge);h6o=r(kTt,"imagegpt"),kTt.forEach(t),u6o=r(jSe," \u2014 "),pG=n(jSe,"A",{href:!0});var STt=s(pG);p6o=r(STt,"ImageGPTModel"),STt.forEach(t),_6o=r(jSe," (ImageGPT model)"),jSe.forEach(t),b6o=i(x),n_=n(x,"LI",{});var DSe=s(n_);mge=n(DSe,"STRONG",{});var RTt=s(mge);v6o=r(RTt,"layoutlm"),RTt.forEach(t),F6o=r(DSe," \u2014 "),_G=n(DSe,"A",{href:!0});var PTt=s(_G);T6o=r(PTt,"LayoutLMModel"),PTt.forEach(t),M6o=r(DSe," (LayoutLM model)"),DSe.forEach(t),E6o=i(x),s_=n(x,"LI",{});var GSe=s(s_);fge=n(GSe,"STRONG",{});var BTt=s(fge);C6o=r(BTt,"layoutlmv2"),BTt.forEach(t),w6o=r(GSe," \u2014 "),bG=n(GSe,"A",{href:!0});var ITt=s(bG);A6o=r(ITt,"LayoutLMv2Model"),ITt.forEach(t),L6o=r(GSe," (LayoutLMv2 model)"),GSe.forEach(t),y6o=i(x),l_=n(x,"LI",{});var OSe=s(l_);gge=n(OSe,"STRONG",{});var NTt=s(gge);x6o=r(NTt,"layoutlmv3"),NTt.forEach(t),$6o=r(OSe," \u2014 "),vG=n(OSe,"A",{href:!0});var qTt=s(vG);k6o=r(qTt,"LayoutLMv3Model"),qTt.forEach(t),S6o=r(OSe," (LayoutLMv3 model)"),OSe.forEach(t),R6o=i(x),i_=n(x,"LI",{});var VSe=s(i_);hge=n(VSe,"STRONG",{});var jTt=s(hge);P6o=r(jTt,"led"),jTt.forEach(t),B6o=r(VSe," \u2014 "),FG=n(VSe,"A",{href:!0});var DTt=s(FG);I6o=r(DTt,"LEDModel"),DTt.forEach(t),N6o=r(VSe," (LED model)"),VSe.forEach(t),q6o=i(x),d_=n(x,"LI",{});var XSe=s(d_);uge=n(XSe,"STRONG",{});var GTt=s(uge);j6o=r(GTt,"levit"),GTt.forEach(t),D6o=r(XSe," \u2014 "),TG=n(XSe,"A",{href:!0});var OTt=s(TG);G6o=r(OTt,"LevitModel"),OTt.forEach(t),O6o=r(XSe," (LeViT model)"),XSe.forEach(t),V6o=i(x),c_=n(x,"LI",{});var zSe=s(c_);pge=n(zSe,"STRONG",{});var VTt=s(pge);X6o=r(VTt,"longformer"),VTt.forEach(t),z6o=r(zSe," \u2014 "),MG=n(zSe,"A",{href:!0});var XTt=s(MG);W6o=r(XTt,"LongformerModel"),XTt.forEach(t),Q6o=r(zSe," (Longformer model)"),zSe.forEach(t),U6o=i(x),m_=n(x,"LI",{});var WSe=s(m_);_ge=n(WSe,"STRONG",{});var zTt=s(_ge);H6o=r(zTt,"longt5"),zTt.forEach(t),J6o=r(WSe," \u2014 "),EG=n(WSe,"A",{href:!0});var WTt=s(EG);Y6o=r(WTt,"LongT5Model"),WTt.forEach(t),K6o=r(WSe," (LongT5 model)"),WSe.forEach(t),Z6o=i(x),f_=n(x,"LI",{});var QSe=s(f_);bge=n(QSe,"STRONG",{});var QTt=s(bge);eAo=r(QTt,"luke"),QTt.forEach(t),oAo=r(QSe," \u2014 "),CG=n(QSe,"A",{href:!0});var UTt=s(CG);rAo=r(UTt,"LukeModel"),UTt.forEach(t),tAo=r(QSe," (LUKE model)"),QSe.forEach(t),aAo=i(x),g_=n(x,"LI",{});var USe=s(g_);vge=n(USe,"STRONG",{});var HTt=s(vge);nAo=r(HTt,"lxmert"),HTt.forEach(t),sAo=r(USe," \u2014 "),wG=n(USe,"A",{href:!0});var JTt=s(wG);lAo=r(JTt,"LxmertModel"),JTt.forEach(t),iAo=r(USe," (LXMERT model)"),USe.forEach(t),dAo=i(x),h_=n(x,"LI",{});var HSe=s(h_);Fge=n(HSe,"STRONG",{});var YTt=s(Fge);cAo=r(YTt,"m2m_100"),YTt.forEach(t),mAo=r(HSe," \u2014 "),AG=n(HSe,"A",{href:!0});var KTt=s(AG);fAo=r(KTt,"M2M100Model"),KTt.forEach(t),gAo=r(HSe," (M2M100 model)"),HSe.forEach(t),hAo=i(x),u_=n(x,"LI",{});var JSe=s(u_);Tge=n(JSe,"STRONG",{});var ZTt=s(Tge);uAo=r(ZTt,"marian"),ZTt.forEach(t),pAo=r(JSe," \u2014 "),LG=n(JSe,"A",{href:!0});var eMt=s(LG);_Ao=r(eMt,"MarianModel"),eMt.forEach(t),bAo=r(JSe," (Marian model)"),JSe.forEach(t),vAo=i(x),p_=n(x,"LI",{});var YSe=s(p_);Mge=n(YSe,"STRONG",{});var oMt=s(Mge);FAo=r(oMt,"maskformer"),oMt.forEach(t),TAo=r(YSe," \u2014 "),yG=n(YSe,"A",{href:!0});var rMt=s(yG);MAo=r(rMt,"MaskFormerModel"),rMt.forEach(t),EAo=r(YSe," (MaskFormer model)"),YSe.forEach(t),CAo=i(x),__=n(x,"LI",{});var KSe=s(__);Ege=n(KSe,"STRONG",{});var tMt=s(Ege);wAo=r(tMt,"mbart"),tMt.forEach(t),AAo=r(KSe," \u2014 "),xG=n(KSe,"A",{href:!0});var aMt=s(xG);LAo=r(aMt,"MBartModel"),aMt.forEach(t),yAo=r(KSe," (mBART model)"),KSe.forEach(t),xAo=i(x),b_=n(x,"LI",{});var ZSe=s(b_);Cge=n(ZSe,"STRONG",{});var nMt=s(Cge);$Ao=r(nMt,"mctct"),nMt.forEach(t),kAo=r(ZSe," \u2014 "),$G=n(ZSe,"A",{href:!0});var sMt=s($G);SAo=r(sMt,"MCTCTModel"),sMt.forEach(t),RAo=r(ZSe," (M-CTC-T model)"),ZSe.forEach(t),PAo=i(x),v_=n(x,"LI",{});var eRe=s(v_);wge=n(eRe,"STRONG",{});var lMt=s(wge);BAo=r(lMt,"megatron-bert"),lMt.forEach(t),IAo=r(eRe," \u2014 "),kG=n(eRe,"A",{href:!0});var iMt=s(kG);NAo=r(iMt,"MegatronBertModel"),iMt.forEach(t),qAo=r(eRe," (Megatron-BERT model)"),eRe.forEach(t),jAo=i(x),F_=n(x,"LI",{});var oRe=s(F_);Age=n(oRe,"STRONG",{});var dMt=s(Age);DAo=r(dMt,"mobilebert"),dMt.forEach(t),GAo=r(oRe," \u2014 "),SG=n(oRe,"A",{href:!0});var cMt=s(SG);OAo=r(cMt,"MobileBertModel"),cMt.forEach(t),VAo=r(oRe," (MobileBERT model)"),oRe.forEach(t),XAo=i(x),T_=n(x,"LI",{});var rRe=s(T_);Lge=n(rRe,"STRONG",{});var mMt=s(Lge);zAo=r(mMt,"mobilevit"),mMt.forEach(t),WAo=r(rRe," \u2014 "),RG=n(rRe,"A",{href:!0});var fMt=s(RG);QAo=r(fMt,"MobileViTModel"),fMt.forEach(t),UAo=r(rRe," (MobileViT model)"),rRe.forEach(t),HAo=i(x),M_=n(x,"LI",{});var tRe=s(M_);yge=n(tRe,"STRONG",{});var gMt=s(yge);JAo=r(gMt,"mpnet"),gMt.forEach(t),YAo=r(tRe," \u2014 "),PG=n(tRe,"A",{href:!0});var hMt=s(PG);KAo=r(hMt,"MPNetModel"),hMt.forEach(t),ZAo=r(tRe," (MPNet model)"),tRe.forEach(t),e7o=i(x),E_=n(x,"LI",{});var aRe=s(E_);xge=n(aRe,"STRONG",{});var uMt=s(xge);o7o=r(uMt,"mt5"),uMt.forEach(t),r7o=r(aRe," \u2014 "),BG=n(aRe,"A",{href:!0});var pMt=s(BG);t7o=r(pMt,"MT5Model"),pMt.forEach(t),a7o=r(aRe," (MT5 model)"),aRe.forEach(t),n7o=i(x),C_=n(x,"LI",{});var nRe=s(C_);$ge=n(nRe,"STRONG",{});var _Mt=s($ge);s7o=r(_Mt,"mvp"),_Mt.forEach(t),l7o=r(nRe," \u2014 "),IG=n(nRe,"A",{href:!0});var bMt=s(IG);i7o=r(bMt,"MvpModel"),bMt.forEach(t),d7o=r(nRe," (MVP model)"),nRe.forEach(t),c7o=i(x),w_=n(x,"LI",{});var sRe=s(w_);kge=n(sRe,"STRONG",{});var vMt=s(kge);m7o=r(vMt,"nezha"),vMt.forEach(t),f7o=r(sRe," \u2014 "),NG=n(sRe,"A",{href:!0});var FMt=s(NG);g7o=r(FMt,"NezhaModel"),FMt.forEach(t),h7o=r(sRe," (Nezha model)"),sRe.forEach(t),u7o=i(x),A_=n(x,"LI",{});var lRe=s(A_);Sge=n(lRe,"STRONG",{});var TMt=s(Sge);p7o=r(TMt,"nllb"),TMt.forEach(t),_7o=r(lRe," \u2014 "),qG=n(lRe,"A",{href:!0});var MMt=s(qG);b7o=r(MMt,"M2M100Model"),MMt.forEach(t),v7o=r(lRe," (NLLB model)"),lRe.forEach(t),F7o=i(x),L_=n(x,"LI",{});var iRe=s(L_);Rge=n(iRe,"STRONG",{});var EMt=s(Rge);T7o=r(EMt,"nystromformer"),EMt.forEach(t),M7o=r(iRe," \u2014 "),jG=n(iRe,"A",{href:!0});var CMt=s(jG);E7o=r(CMt,"NystromformerModel"),CMt.forEach(t),C7o=r(iRe," (Nystr\xF6mformer model)"),iRe.forEach(t),w7o=i(x),y_=n(x,"LI",{});var dRe=s(y_);Pge=n(dRe,"STRONG",{});var wMt=s(Pge);A7o=r(wMt,"openai-gpt"),wMt.forEach(t),L7o=r(dRe," \u2014 "),DG=n(dRe,"A",{href:!0});var AMt=s(DG);y7o=r(AMt,"OpenAIGPTModel"),AMt.forEach(t),x7o=r(dRe," (OpenAI GPT model)"),dRe.forEach(t),$7o=i(x),x_=n(x,"LI",{});var cRe=s(x_);Bge=n(cRe,"STRONG",{});var LMt=s(Bge);k7o=r(LMt,"opt"),LMt.forEach(t),S7o=r(cRe," \u2014 "),GG=n(cRe,"A",{href:!0});var yMt=s(GG);R7o=r(yMt,"OPTModel"),yMt.forEach(t),P7o=r(cRe," (OPT model)"),cRe.forEach(t),B7o=i(x),$_=n(x,"LI",{});var mRe=s($_);Ige=n(mRe,"STRONG",{});var xMt=s(Ige);I7o=r(xMt,"owlvit"),xMt.forEach(t),N7o=r(mRe," \u2014 "),OG=n(mRe,"A",{href:!0});var $Mt=s(OG);q7o=r($Mt,"OwlViTModel"),$Mt.forEach(t),j7o=r(mRe," (OWL-ViT model)"),mRe.forEach(t),D7o=i(x),k_=n(x,"LI",{});var fRe=s(k_);Nge=n(fRe,"STRONG",{});var kMt=s(Nge);G7o=r(kMt,"pegasus"),kMt.forEach(t),O7o=r(fRe," \u2014 "),VG=n(fRe,"A",{href:!0});var SMt=s(VG);V7o=r(SMt,"PegasusModel"),SMt.forEach(t),X7o=r(fRe," (Pegasus model)"),fRe.forEach(t),z7o=i(x),S_=n(x,"LI",{});var gRe=s(S_);qge=n(gRe,"STRONG",{});var RMt=s(qge);W7o=r(RMt,"perceiver"),RMt.forEach(t),Q7o=r(gRe," \u2014 "),XG=n(gRe,"A",{href:!0});var PMt=s(XG);U7o=r(PMt,"PerceiverModel"),PMt.forEach(t),H7o=r(gRe," (Perceiver model)"),gRe.forEach(t),J7o=i(x),R_=n(x,"LI",{});var hRe=s(R_);jge=n(hRe,"STRONG",{});var BMt=s(jge);Y7o=r(BMt,"plbart"),BMt.forEach(t),K7o=r(hRe," \u2014 "),zG=n(hRe,"A",{href:!0});var IMt=s(zG);Z7o=r(IMt,"PLBartModel"),IMt.forEach(t),eLo=r(hRe," (PLBart model)"),hRe.forEach(t),oLo=i(x),P_=n(x,"LI",{});var uRe=s(P_);Dge=n(uRe,"STRONG",{});var NMt=s(Dge);rLo=r(NMt,"poolformer"),NMt.forEach(t),tLo=r(uRe," \u2014 "),WG=n(uRe,"A",{href:!0});var qMt=s(WG);aLo=r(qMt,"PoolFormerModel"),qMt.forEach(t),nLo=r(uRe," (PoolFormer model)"),uRe.forEach(t),sLo=i(x),B_=n(x,"LI",{});var pRe=s(B_);Gge=n(pRe,"STRONG",{});var jMt=s(Gge);lLo=r(jMt,"prophetnet"),jMt.forEach(t),iLo=r(pRe," \u2014 "),QG=n(pRe,"A",{href:!0});var DMt=s(QG);dLo=r(DMt,"ProphetNetModel"),DMt.forEach(t),cLo=r(pRe," (ProphetNet model)"),pRe.forEach(t),mLo=i(x),I_=n(x,"LI",{});var _Re=s(I_);Oge=n(_Re,"STRONG",{});var GMt=s(Oge);fLo=r(GMt,"qdqbert"),GMt.forEach(t),gLo=r(_Re," \u2014 "),UG=n(_Re,"A",{href:!0});var OMt=s(UG);hLo=r(OMt,"QDQBertModel"),OMt.forEach(t),uLo=r(_Re," (QDQBert model)"),_Re.forEach(t),pLo=i(x),N_=n(x,"LI",{});var bRe=s(N_);Vge=n(bRe,"STRONG",{});var VMt=s(Vge);_Lo=r(VMt,"reformer"),VMt.forEach(t),bLo=r(bRe," \u2014 "),HG=n(bRe,"A",{href:!0});var XMt=s(HG);vLo=r(XMt,"ReformerModel"),XMt.forEach(t),FLo=r(bRe," (Reformer model)"),bRe.forEach(t),TLo=i(x),q_=n(x,"LI",{});var vRe=s(q_);Xge=n(vRe,"STRONG",{});var zMt=s(Xge);MLo=r(zMt,"regnet"),zMt.forEach(t),ELo=r(vRe," \u2014 "),JG=n(vRe,"A",{href:!0});var WMt=s(JG);CLo=r(WMt,"RegNetModel"),WMt.forEach(t),wLo=r(vRe," (RegNet model)"),vRe.forEach(t),ALo=i(x),j_=n(x,"LI",{});var FRe=s(j_);zge=n(FRe,"STRONG",{});var QMt=s(zge);LLo=r(QMt,"rembert"),QMt.forEach(t),yLo=r(FRe," \u2014 "),YG=n(FRe,"A",{href:!0});var UMt=s(YG);xLo=r(UMt,"RemBertModel"),UMt.forEach(t),$Lo=r(FRe," (RemBERT model)"),FRe.forEach(t),kLo=i(x),D_=n(x,"LI",{});var TRe=s(D_);Wge=n(TRe,"STRONG",{});var HMt=s(Wge);SLo=r(HMt,"resnet"),HMt.forEach(t),RLo=r(TRe," \u2014 "),KG=n(TRe,"A",{href:!0});var JMt=s(KG);PLo=r(JMt,"ResNetModel"),JMt.forEach(t),BLo=r(TRe," (ResNet model)"),TRe.forEach(t),ILo=i(x),G_=n(x,"LI",{});var MRe=s(G_);Qge=n(MRe,"STRONG",{});var YMt=s(Qge);NLo=r(YMt,"retribert"),YMt.forEach(t),qLo=r(MRe," \u2014 "),ZG=n(MRe,"A",{href:!0});var KMt=s(ZG);jLo=r(KMt,"RetriBertModel"),KMt.forEach(t),DLo=r(MRe," (RetriBERT model)"),MRe.forEach(t),GLo=i(x),O_=n(x,"LI",{});var ERe=s(O_);Uge=n(ERe,"STRONG",{});var ZMt=s(Uge);OLo=r(ZMt,"roberta"),ZMt.forEach(t),VLo=r(ERe," \u2014 "),eO=n(ERe,"A",{href:!0});var eEt=s(eO);XLo=r(eEt,"RobertaModel"),eEt.forEach(t),zLo=r(ERe," (RoBERTa model)"),ERe.forEach(t),WLo=i(x),V_=n(x,"LI",{});var CRe=s(V_);Hge=n(CRe,"STRONG",{});var oEt=s(Hge);QLo=r(oEt,"roformer"),oEt.forEach(t),ULo=r(CRe," \u2014 "),oO=n(CRe,"A",{href:!0});var rEt=s(oO);HLo=r(rEt,"RoFormerModel"),rEt.forEach(t),JLo=r(CRe," (RoFormer model)"),CRe.forEach(t),YLo=i(x),X_=n(x,"LI",{});var wRe=s(X_);Jge=n(wRe,"STRONG",{});var tEt=s(Jge);KLo=r(tEt,"segformer"),tEt.forEach(t),ZLo=r(wRe," \u2014 "),rO=n(wRe,"A",{href:!0});var aEt=s(rO);eyo=r(aEt,"SegformerModel"),aEt.forEach(t),oyo=r(wRe," (SegFormer model)"),wRe.forEach(t),ryo=i(x),z_=n(x,"LI",{});var ARe=s(z_);Yge=n(ARe,"STRONG",{});var nEt=s(Yge);tyo=r(nEt,"sew"),nEt.forEach(t),ayo=r(ARe," \u2014 "),tO=n(ARe,"A",{href:!0});var sEt=s(tO);nyo=r(sEt,"SEWModel"),sEt.forEach(t),syo=r(ARe," (SEW model)"),ARe.forEach(t),lyo=i(x),W_=n(x,"LI",{});var LRe=s(W_);Kge=n(LRe,"STRONG",{});var lEt=s(Kge);iyo=r(lEt,"sew-d"),lEt.forEach(t),dyo=r(LRe," \u2014 "),aO=n(LRe,"A",{href:!0});var iEt=s(aO);cyo=r(iEt,"SEWDModel"),iEt.forEach(t),myo=r(LRe," (SEW-D model)"),LRe.forEach(t),fyo=i(x),Q_=n(x,"LI",{});var yRe=s(Q_);Zge=n(yRe,"STRONG",{});var dEt=s(Zge);gyo=r(dEt,"speech_to_text"),dEt.forEach(t),hyo=r(yRe," \u2014 "),nO=n(yRe,"A",{href:!0});var cEt=s(nO);uyo=r(cEt,"Speech2TextModel"),cEt.forEach(t),pyo=r(yRe," (Speech2Text model)"),yRe.forEach(t),_yo=i(x),U_=n(x,"LI",{});var xRe=s(U_);ehe=n(xRe,"STRONG",{});var mEt=s(ehe);byo=r(mEt,"splinter"),mEt.forEach(t),vyo=r(xRe," \u2014 "),sO=n(xRe,"A",{href:!0});var fEt=s(sO);Fyo=r(fEt,"SplinterModel"),fEt.forEach(t),Tyo=r(xRe," (Splinter model)"),xRe.forEach(t),Myo=i(x),H_=n(x,"LI",{});var $Re=s(H_);ohe=n($Re,"STRONG",{});var gEt=s(ohe);Eyo=r(gEt,"squeezebert"),gEt.forEach(t),Cyo=r($Re," \u2014 "),lO=n($Re,"A",{href:!0});var hEt=s(lO);wyo=r(hEt,"SqueezeBertModel"),hEt.forEach(t),Ayo=r($Re," (SqueezeBERT model)"),$Re.forEach(t),Lyo=i(x),J_=n(x,"LI",{});var kRe=s(J_);rhe=n(kRe,"STRONG",{});var uEt=s(rhe);yyo=r(uEt,"swin"),uEt.forEach(t),xyo=r(kRe," \u2014 "),iO=n(kRe,"A",{href:!0});var pEt=s(iO);$yo=r(pEt,"SwinModel"),pEt.forEach(t),kyo=r(kRe," (Swin Transformer model)"),kRe.forEach(t),Syo=i(x),Y_=n(x,"LI",{});var SRe=s(Y_);the=n(SRe,"STRONG",{});var _Et=s(the);Ryo=r(_Et,"swinv2"),_Et.forEach(t),Pyo=r(SRe," \u2014 "),dO=n(SRe,"A",{href:!0});var bEt=s(dO);Byo=r(bEt,"Swinv2Model"),bEt.forEach(t),Iyo=r(SRe," (Swin Transformer V2 model)"),SRe.forEach(t),Nyo=i(x),K_=n(x,"LI",{});var RRe=s(K_);ahe=n(RRe,"STRONG",{});var vEt=s(ahe);qyo=r(vEt,"t5"),vEt.forEach(t),jyo=r(RRe," \u2014 "),cO=n(RRe,"A",{href:!0});var FEt=s(cO);Dyo=r(FEt,"T5Model"),FEt.forEach(t),Gyo=r(RRe," (T5 model)"),RRe.forEach(t),Oyo=i(x),Z_=n(x,"LI",{});var PRe=s(Z_);nhe=n(PRe,"STRONG",{});var TEt=s(nhe);Vyo=r(TEt,"tapas"),TEt.forEach(t),Xyo=r(PRe," \u2014 "),mO=n(PRe,"A",{href:!0});var MEt=s(mO);zyo=r(MEt,"TapasModel"),MEt.forEach(t),Wyo=r(PRe," (TAPAS model)"),PRe.forEach(t),Qyo=i(x),e2=n(x,"LI",{});var BRe=s(e2);she=n(BRe,"STRONG",{});var EEt=s(she);Uyo=r(EEt,"trajectory_transformer"),EEt.forEach(t),Hyo=r(BRe," \u2014 "),fO=n(BRe,"A",{href:!0});var CEt=s(fO);Jyo=r(CEt,"TrajectoryTransformerModel"),CEt.forEach(t),Yyo=r(BRe," (Trajectory Transformer model)"),BRe.forEach(t),Kyo=i(x),o2=n(x,"LI",{});var IRe=s(o2);lhe=n(IRe,"STRONG",{});var wEt=s(lhe);Zyo=r(wEt,"transfo-xl"),wEt.forEach(t),e8o=r(IRe," \u2014 "),gO=n(IRe,"A",{href:!0});var AEt=s(gO);o8o=r(AEt,"TransfoXLModel"),AEt.forEach(t),r8o=r(IRe," (Transformer-XL model)"),IRe.forEach(t),t8o=i(x),r2=n(x,"LI",{});var NRe=s(r2);ihe=n(NRe,"STRONG",{});var LEt=s(ihe);a8o=r(LEt,"unispeech"),LEt.forEach(t),n8o=r(NRe," \u2014 "),hO=n(NRe,"A",{href:!0});var yEt=s(hO);s8o=r(yEt,"UniSpeechModel"),yEt.forEach(t),l8o=r(NRe," (UniSpeech model)"),NRe.forEach(t),i8o=i(x),t2=n(x,"LI",{});var qRe=s(t2);dhe=n(qRe,"STRONG",{});var xEt=s(dhe);d8o=r(xEt,"unispeech-sat"),xEt.forEach(t),c8o=r(qRe," \u2014 "),uO=n(qRe,"A",{href:!0});var $Et=s(uO);m8o=r($Et,"UniSpeechSatModel"),$Et.forEach(t),f8o=r(qRe," (UniSpeechSat model)"),qRe.forEach(t),g8o=i(x),a2=n(x,"LI",{});var jRe=s(a2);che=n(jRe,"STRONG",{});var kEt=s(che);h8o=r(kEt,"van"),kEt.forEach(t),u8o=r(jRe," \u2014 "),pO=n(jRe,"A",{href:!0});var SEt=s(pO);p8o=r(SEt,"VanModel"),SEt.forEach(t),_8o=r(jRe," (VAN model)"),jRe.forEach(t),b8o=i(x),n2=n(x,"LI",{});var DRe=s(n2);mhe=n(DRe,"STRONG",{});var REt=s(mhe);v8o=r(REt,"videomae"),REt.forEach(t),F8o=r(DRe," \u2014 "),_O=n(DRe,"A",{href:!0});var PEt=s(_O);T8o=r(PEt,"VideoMAEModel"),PEt.forEach(t),M8o=r(DRe," (VideoMAE model)"),DRe.forEach(t),E8o=i(x),s2=n(x,"LI",{});var GRe=s(s2);fhe=n(GRe,"STRONG",{});var BEt=s(fhe);C8o=r(BEt,"vilt"),BEt.forEach(t),w8o=r(GRe," \u2014 "),bO=n(GRe,"A",{href:!0});var IEt=s(bO);A8o=r(IEt,"ViltModel"),IEt.forEach(t),L8o=r(GRe," (ViLT model)"),GRe.forEach(t),y8o=i(x),l2=n(x,"LI",{});var ORe=s(l2);ghe=n(ORe,"STRONG",{});var NEt=s(ghe);x8o=r(NEt,"vision-text-dual-encoder"),NEt.forEach(t),$8o=r(ORe," \u2014 "),vO=n(ORe,"A",{href:!0});var qEt=s(vO);k8o=r(qEt,"VisionTextDualEncoderModel"),qEt.forEach(t),S8o=r(ORe," (VisionTextDualEncoder model)"),ORe.forEach(t),R8o=i(x),i2=n(x,"LI",{});var VRe=s(i2);hhe=n(VRe,"STRONG",{});var jEt=s(hhe);P8o=r(jEt,"visual_bert"),jEt.forEach(t),B8o=r(VRe," \u2014 "),FO=n(VRe,"A",{href:!0});var DEt=s(FO);I8o=r(DEt,"VisualBertModel"),DEt.forEach(t),N8o=r(VRe," (VisualBERT model)"),VRe.forEach(t),q8o=i(x),d2=n(x,"LI",{});var XRe=s(d2);uhe=n(XRe,"STRONG",{});var GEt=s(uhe);j8o=r(GEt,"vit"),GEt.forEach(t),D8o=r(XRe," \u2014 "),TO=n(XRe,"A",{href:!0});var OEt=s(TO);G8o=r(OEt,"ViTModel"),OEt.forEach(t),O8o=r(XRe," (ViT model)"),XRe.forEach(t),V8o=i(x),c2=n(x,"LI",{});var zRe=s(c2);phe=n(zRe,"STRONG",{});var VEt=s(phe);X8o=r(VEt,"vit_mae"),VEt.forEach(t),z8o=r(zRe," \u2014 "),MO=n(zRe,"A",{href:!0});var XEt=s(MO);W8o=r(XEt,"ViTMAEModel"),XEt.forEach(t),Q8o=r(zRe," (ViTMAE model)"),zRe.forEach(t),U8o=i(x),m2=n(x,"LI",{});var WRe=s(m2);_he=n(WRe,"STRONG",{});var zEt=s(_he);H8o=r(zEt,"wav2vec2"),zEt.forEach(t),J8o=r(WRe," \u2014 "),EO=n(WRe,"A",{href:!0});var WEt=s(EO);Y8o=r(WEt,"Wav2Vec2Model"),WEt.forEach(t),K8o=r(WRe," (Wav2Vec2 model)"),WRe.forEach(t),Z8o=i(x),f2=n(x,"LI",{});var QRe=s(f2);bhe=n(QRe,"STRONG",{});var QEt=s(bhe);e9o=r(QEt,"wav2vec2-conformer"),QEt.forEach(t),o9o=r(QRe," \u2014 "),CO=n(QRe,"A",{href:!0});var UEt=s(CO);r9o=r(UEt,"Wav2Vec2ConformerModel"),UEt.forEach(t),t9o=r(QRe," (Wav2Vec2-Conformer model)"),QRe.forEach(t),a9o=i(x),g2=n(x,"LI",{});var URe=s(g2);vhe=n(URe,"STRONG",{});var HEt=s(vhe);n9o=r(HEt,"wavlm"),HEt.forEach(t),s9o=r(URe," \u2014 "),wO=n(URe,"A",{href:!0});var JEt=s(wO);l9o=r(JEt,"WavLMModel"),JEt.forEach(t),i9o=r(URe," (WavLM model)"),URe.forEach(t),d9o=i(x),h2=n(x,"LI",{});var HRe=s(h2);Fhe=n(HRe,"STRONG",{});var YEt=s(Fhe);c9o=r(YEt,"xglm"),YEt.forEach(t),m9o=r(HRe," \u2014 "),AO=n(HRe,"A",{href:!0});var KEt=s(AO);f9o=r(KEt,"XGLMModel"),KEt.forEach(t),g9o=r(HRe," (XGLM model)"),HRe.forEach(t),h9o=i(x),u2=n(x,"LI",{});var JRe=s(u2);The=n(JRe,"STRONG",{});var ZEt=s(The);u9o=r(ZEt,"xlm"),ZEt.forEach(t),p9o=r(JRe," \u2014 "),LO=n(JRe,"A",{href:!0});var e4t=s(LO);_9o=r(e4t,"XLMModel"),e4t.forEach(t),b9o=r(JRe," (XLM model)"),JRe.forEach(t),v9o=i(x),p2=n(x,"LI",{});var YRe=s(p2);Mhe=n(YRe,"STRONG",{});var o4t=s(Mhe);F9o=r(o4t,"xlm-prophetnet"),o4t.forEach(t),T9o=r(YRe," \u2014 "),yO=n(YRe,"A",{href:!0});var r4t=s(yO);M9o=r(r4t,"XLMProphetNetModel"),r4t.forEach(t),E9o=r(YRe," (XLM-ProphetNet model)"),YRe.forEach(t),C9o=i(x),_2=n(x,"LI",{});var KRe=s(_2);Ehe=n(KRe,"STRONG",{});var t4t=s(Ehe);w9o=r(t4t,"xlm-roberta"),t4t.forEach(t),A9o=r(KRe," \u2014 "),xO=n(KRe,"A",{href:!0});var a4t=s(xO);L9o=r(a4t,"XLMRobertaModel"),a4t.forEach(t),y9o=r(KRe," (XLM-RoBERTa model)"),KRe.forEach(t),x9o=i(x),b2=n(x,"LI",{});var ZRe=s(b2);Che=n(ZRe,"STRONG",{});var n4t=s(Che);$9o=r(n4t,"xlm-roberta-xl"),n4t.forEach(t),k9o=r(ZRe," \u2014 "),$O=n(ZRe,"A",{href:!0});var s4t=s($O);S9o=r(s4t,"XLMRobertaXLModel"),s4t.forEach(t),R9o=r(ZRe," (XLM-RoBERTa-XL model)"),ZRe.forEach(t),P9o=i(x),v2=n(x,"LI",{});var ePe=s(v2);whe=n(ePe,"STRONG",{});var l4t=s(whe);B9o=r(l4t,"xlnet"),l4t.forEach(t),I9o=r(ePe," \u2014 "),kO=n(ePe,"A",{href:!0});var i4t=s(kO);N9o=r(i4t,"XLNetModel"),i4t.forEach(t),q9o=r(ePe," (XLNet model)"),ePe.forEach(t),j9o=i(x),F2=n(x,"LI",{});var oPe=s(F2);Ahe=n(oPe,"STRONG",{});var d4t=s(Ahe);D9o=r(d4t,"yolos"),d4t.forEach(t),G9o=r(oPe," \u2014 "),SO=n(oPe,"A",{href:!0});var c4t=s(SO);O9o=r(c4t,"YolosModel"),c4t.forEach(t),V9o=r(oPe," (YOLOS model)"),oPe.forEach(t),X9o=i(x),T2=n(x,"LI",{});var rPe=s(T2);Lhe=n(rPe,"STRONG",{});var m4t=s(Lhe);z9o=r(m4t,"yoso"),m4t.forEach(t),W9o=r(rPe," \u2014 "),RO=n(rPe,"A",{href:!0});var f4t=s(RO);Q9o=r(f4t,"YosoModel"),f4t.forEach(t),U9o=r(rPe," (YOSO model)"),rPe.forEach(t),x.forEach(t),H9o=i(ga),M2=n(ga,"P",{});var tPe=s(M2);J9o=r(tPe,"The model is set in evaluation mode by default using "),yhe=n(tPe,"CODE",{});var g4t=s(yhe);Y9o=r(g4t,"model.eval()"),g4t.forEach(t),K9o=r(tPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xhe=n(tPe,"CODE",{});var h4t=s(xhe);Z9o=r(h4t,"model.train()"),h4t.forEach(t),tPe.forEach(t),exo=i(ga),T(E2.$$.fragment,ga),ga.forEach(t),hl.forEach(t),jQe=i(m),nd=n(m,"H2",{class:!0});var HHe=s(nd);C2=n(HHe,"A",{id:!0,class:!0,href:!0});var u4t=s(C2);$he=n(u4t,"SPAN",{});var p4t=s($he);T(D8.$$.fragment,p4t),p4t.forEach(t),u4t.forEach(t),oxo=i(HHe),khe=n(HHe,"SPAN",{});var _4t=s(khe);rxo=r(_4t,"AutoModelForPreTraining"),_4t.forEach(t),HHe.forEach(t),DQe=i(m),Ro=n(m,"DIV",{class:!0});var ul=s(Ro);T(G8.$$.fragment,ul),txo=i(ul),sd=n(ul,"P",{});var Pae=s(sd);axo=r(Pae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),PO=n(Pae,"A",{href:!0});var b4t=s(PO);nxo=r(b4t,"from_pretrained()"),b4t.forEach(t),sxo=r(Pae," class method or the "),BO=n(Pae,"A",{href:!0});var v4t=s(BO);lxo=r(v4t,"from_config()"),v4t.forEach(t),ixo=r(Pae,` class
method.`),Pae.forEach(t),dxo=i(ul),O8=n(ul,"P",{});var JHe=s(O8);cxo=r(JHe,"This class cannot be instantiated directly using "),She=n(JHe,"CODE",{});var F4t=s(She);mxo=r(F4t,"__init__()"),F4t.forEach(t),fxo=r(JHe," (throws an error)."),JHe.forEach(t),gxo=i(ul),gt=n(ul,"DIV",{class:!0});var cL=s(gt);T(V8.$$.fragment,cL),hxo=i(cL),Rhe=n(cL,"P",{});var T4t=s(Rhe);uxo=r(T4t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),T4t.forEach(t),pxo=i(cL),ld=n(cL,"P",{});var Bae=s(ld);_xo=r(Bae,`Note:
Loading a model from its configuration file does `),Phe=n(Bae,"STRONG",{});var M4t=s(Phe);bxo=r(M4t,"not"),M4t.forEach(t),vxo=r(Bae,` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=n(Bae,"A",{href:!0});var E4t=s(IO);Fxo=r(E4t,"from_pretrained()"),E4t.forEach(t),Txo=r(Bae," to load the model weights."),Bae.forEach(t),Mxo=i(cL),T(w2.$$.fragment,cL),cL.forEach(t),Exo=i(ul),Ke=n(ul,"DIV",{class:!0});var ha=s(Ke);T(X8.$$.fragment,ha),Cxo=i(ha),Bhe=n(ha,"P",{});var C4t=s(Bhe);wxo=r(C4t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),C4t.forEach(t),Axo=i(ha),Xa=n(ha,"P",{});var mL=s(Xa);Lxo=r(mL,"The model class to instantiate is selected based on the "),Ihe=n(mL,"CODE",{});var w4t=s(Ihe);yxo=r(w4t,"model_type"),w4t.forEach(t),xxo=r(mL,` property of the config object (either
passed as an argument or loaded from `),Nhe=n(mL,"CODE",{});var A4t=s(Nhe);$xo=r(A4t,"pretrained_model_name_or_path"),A4t.forEach(t),kxo=r(mL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qhe=n(mL,"CODE",{});var L4t=s(qhe);Sxo=r(L4t,"pretrained_model_name_or_path"),L4t.forEach(t),Rxo=r(mL,":"),mL.forEach(t),Pxo=i(ha),G=n(ha,"UL",{});var O=s(G);A2=n(O,"LI",{});var aPe=s(A2);jhe=n(aPe,"STRONG",{});var y4t=s(jhe);Bxo=r(y4t,"albert"),y4t.forEach(t),Ixo=r(aPe," \u2014 "),NO=n(aPe,"A",{href:!0});var x4t=s(NO);Nxo=r(x4t,"AlbertForPreTraining"),x4t.forEach(t),qxo=r(aPe," (ALBERT model)"),aPe.forEach(t),jxo=i(O),L2=n(O,"LI",{});var nPe=s(L2);Dhe=n(nPe,"STRONG",{});var $4t=s(Dhe);Dxo=r($4t,"bart"),$4t.forEach(t),Gxo=r(nPe," \u2014 "),qO=n(nPe,"A",{href:!0});var k4t=s(qO);Oxo=r(k4t,"BartForConditionalGeneration"),k4t.forEach(t),Vxo=r(nPe," (BART model)"),nPe.forEach(t),Xxo=i(O),y2=n(O,"LI",{});var sPe=s(y2);Ghe=n(sPe,"STRONG",{});var S4t=s(Ghe);zxo=r(S4t,"bert"),S4t.forEach(t),Wxo=r(sPe," \u2014 "),jO=n(sPe,"A",{href:!0});var R4t=s(jO);Qxo=r(R4t,"BertForPreTraining"),R4t.forEach(t),Uxo=r(sPe," (BERT model)"),sPe.forEach(t),Hxo=i(O),x2=n(O,"LI",{});var lPe=s(x2);Ohe=n(lPe,"STRONG",{});var P4t=s(Ohe);Jxo=r(P4t,"big_bird"),P4t.forEach(t),Yxo=r(lPe," \u2014 "),DO=n(lPe,"A",{href:!0});var B4t=s(DO);Kxo=r(B4t,"BigBirdForPreTraining"),B4t.forEach(t),Zxo=r(lPe," (BigBird model)"),lPe.forEach(t),e$o=i(O),$2=n(O,"LI",{});var iPe=s($2);Vhe=n(iPe,"STRONG",{});var I4t=s(Vhe);o$o=r(I4t,"bloom"),I4t.forEach(t),r$o=r(iPe," \u2014 "),GO=n(iPe,"A",{href:!0});var N4t=s(GO);t$o=r(N4t,"BloomForCausalLM"),N4t.forEach(t),a$o=r(iPe," (BLOOM model)"),iPe.forEach(t),n$o=i(O),k2=n(O,"LI",{});var dPe=s(k2);Xhe=n(dPe,"STRONG",{});var q4t=s(Xhe);s$o=r(q4t,"camembert"),q4t.forEach(t),l$o=r(dPe," \u2014 "),OO=n(dPe,"A",{href:!0});var j4t=s(OO);i$o=r(j4t,"CamembertForMaskedLM"),j4t.forEach(t),d$o=r(dPe," (CamemBERT model)"),dPe.forEach(t),c$o=i(O),S2=n(O,"LI",{});var cPe=s(S2);zhe=n(cPe,"STRONG",{});var D4t=s(zhe);m$o=r(D4t,"ctrl"),D4t.forEach(t),f$o=r(cPe," \u2014 "),VO=n(cPe,"A",{href:!0});var G4t=s(VO);g$o=r(G4t,"CTRLLMHeadModel"),G4t.forEach(t),h$o=r(cPe," (CTRL model)"),cPe.forEach(t),u$o=i(O),R2=n(O,"LI",{});var mPe=s(R2);Whe=n(mPe,"STRONG",{});var O4t=s(Whe);p$o=r(O4t,"data2vec-text"),O4t.forEach(t),_$o=r(mPe," \u2014 "),XO=n(mPe,"A",{href:!0});var V4t=s(XO);b$o=r(V4t,"Data2VecTextForMaskedLM"),V4t.forEach(t),v$o=r(mPe," (Data2VecText model)"),mPe.forEach(t),F$o=i(O),P2=n(O,"LI",{});var fPe=s(P2);Qhe=n(fPe,"STRONG",{});var X4t=s(Qhe);T$o=r(X4t,"deberta"),X4t.forEach(t),M$o=r(fPe," \u2014 "),zO=n(fPe,"A",{href:!0});var z4t=s(zO);E$o=r(z4t,"DebertaForMaskedLM"),z4t.forEach(t),C$o=r(fPe," (DeBERTa model)"),fPe.forEach(t),w$o=i(O),B2=n(O,"LI",{});var gPe=s(B2);Uhe=n(gPe,"STRONG",{});var W4t=s(Uhe);A$o=r(W4t,"deberta-v2"),W4t.forEach(t),L$o=r(gPe," \u2014 "),WO=n(gPe,"A",{href:!0});var Q4t=s(WO);y$o=r(Q4t,"DebertaV2ForMaskedLM"),Q4t.forEach(t),x$o=r(gPe," (DeBERTa-v2 model)"),gPe.forEach(t),$$o=i(O),I2=n(O,"LI",{});var hPe=s(I2);Hhe=n(hPe,"STRONG",{});var U4t=s(Hhe);k$o=r(U4t,"distilbert"),U4t.forEach(t),S$o=r(hPe," \u2014 "),QO=n(hPe,"A",{href:!0});var H4t=s(QO);R$o=r(H4t,"DistilBertForMaskedLM"),H4t.forEach(t),P$o=r(hPe," (DistilBERT model)"),hPe.forEach(t),B$o=i(O),N2=n(O,"LI",{});var uPe=s(N2);Jhe=n(uPe,"STRONG",{});var J4t=s(Jhe);I$o=r(J4t,"electra"),J4t.forEach(t),N$o=r(uPe," \u2014 "),UO=n(uPe,"A",{href:!0});var Y4t=s(UO);q$o=r(Y4t,"ElectraForPreTraining"),Y4t.forEach(t),j$o=r(uPe," (ELECTRA model)"),uPe.forEach(t),D$o=i(O),q2=n(O,"LI",{});var pPe=s(q2);Yhe=n(pPe,"STRONG",{});var K4t=s(Yhe);G$o=r(K4t,"flaubert"),K4t.forEach(t),O$o=r(pPe," \u2014 "),HO=n(pPe,"A",{href:!0});var Z4t=s(HO);V$o=r(Z4t,"FlaubertWithLMHeadModel"),Z4t.forEach(t),X$o=r(pPe," (FlauBERT model)"),pPe.forEach(t),z$o=i(O),j2=n(O,"LI",{});var _Pe=s(j2);Khe=n(_Pe,"STRONG",{});var eCt=s(Khe);W$o=r(eCt,"flava"),eCt.forEach(t),Q$o=r(_Pe," \u2014 "),JO=n(_Pe,"A",{href:!0});var oCt=s(JO);U$o=r(oCt,"FlavaForPreTraining"),oCt.forEach(t),H$o=r(_Pe," (FLAVA model)"),_Pe.forEach(t),J$o=i(O),D2=n(O,"LI",{});var bPe=s(D2);Zhe=n(bPe,"STRONG",{});var rCt=s(Zhe);Y$o=r(rCt,"fnet"),rCt.forEach(t),K$o=r(bPe," \u2014 "),YO=n(bPe,"A",{href:!0});var tCt=s(YO);Z$o=r(tCt,"FNetForPreTraining"),tCt.forEach(t),eko=r(bPe," (FNet model)"),bPe.forEach(t),oko=i(O),G2=n(O,"LI",{});var vPe=s(G2);eue=n(vPe,"STRONG",{});var aCt=s(eue);rko=r(aCt,"fsmt"),aCt.forEach(t),tko=r(vPe," \u2014 "),KO=n(vPe,"A",{href:!0});var nCt=s(KO);ako=r(nCt,"FSMTForConditionalGeneration"),nCt.forEach(t),nko=r(vPe," (FairSeq Machine-Translation model)"),vPe.forEach(t),sko=i(O),O2=n(O,"LI",{});var FPe=s(O2);oue=n(FPe,"STRONG",{});var sCt=s(oue);lko=r(sCt,"funnel"),sCt.forEach(t),iko=r(FPe," \u2014 "),ZO=n(FPe,"A",{href:!0});var lCt=s(ZO);dko=r(lCt,"FunnelForPreTraining"),lCt.forEach(t),cko=r(FPe," (Funnel Transformer model)"),FPe.forEach(t),mko=i(O),V2=n(O,"LI",{});var TPe=s(V2);rue=n(TPe,"STRONG",{});var iCt=s(rue);fko=r(iCt,"gpt2"),iCt.forEach(t),gko=r(TPe," \u2014 "),eV=n(TPe,"A",{href:!0});var dCt=s(eV);hko=r(dCt,"GPT2LMHeadModel"),dCt.forEach(t),uko=r(TPe," (OpenAI GPT-2 model)"),TPe.forEach(t),pko=i(O),X2=n(O,"LI",{});var MPe=s(X2);tue=n(MPe,"STRONG",{});var cCt=s(tue);_ko=r(cCt,"ibert"),cCt.forEach(t),bko=r(MPe," \u2014 "),oV=n(MPe,"A",{href:!0});var mCt=s(oV);vko=r(mCt,"IBertForMaskedLM"),mCt.forEach(t),Fko=r(MPe," (I-BERT model)"),MPe.forEach(t),Tko=i(O),z2=n(O,"LI",{});var EPe=s(z2);aue=n(EPe,"STRONG",{});var fCt=s(aue);Mko=r(fCt,"layoutlm"),fCt.forEach(t),Eko=r(EPe," \u2014 "),rV=n(EPe,"A",{href:!0});var gCt=s(rV);Cko=r(gCt,"LayoutLMForMaskedLM"),gCt.forEach(t),wko=r(EPe," (LayoutLM model)"),EPe.forEach(t),Ako=i(O),W2=n(O,"LI",{});var CPe=s(W2);nue=n(CPe,"STRONG",{});var hCt=s(nue);Lko=r(hCt,"longformer"),hCt.forEach(t),yko=r(CPe," \u2014 "),tV=n(CPe,"A",{href:!0});var uCt=s(tV);xko=r(uCt,"LongformerForMaskedLM"),uCt.forEach(t),$ko=r(CPe," (Longformer model)"),CPe.forEach(t),kko=i(O),Q2=n(O,"LI",{});var wPe=s(Q2);sue=n(wPe,"STRONG",{});var pCt=s(sue);Sko=r(pCt,"luke"),pCt.forEach(t),Rko=r(wPe," \u2014 "),aV=n(wPe,"A",{href:!0});var _Ct=s(aV);Pko=r(_Ct,"LukeForMaskedLM"),_Ct.forEach(t),Bko=r(wPe," (LUKE model)"),wPe.forEach(t),Iko=i(O),U2=n(O,"LI",{});var APe=s(U2);lue=n(APe,"STRONG",{});var bCt=s(lue);Nko=r(bCt,"lxmert"),bCt.forEach(t),qko=r(APe," \u2014 "),nV=n(APe,"A",{href:!0});var vCt=s(nV);jko=r(vCt,"LxmertForPreTraining"),vCt.forEach(t),Dko=r(APe," (LXMERT model)"),APe.forEach(t),Gko=i(O),H2=n(O,"LI",{});var LPe=s(H2);iue=n(LPe,"STRONG",{});var FCt=s(iue);Oko=r(FCt,"megatron-bert"),FCt.forEach(t),Vko=r(LPe," \u2014 "),sV=n(LPe,"A",{href:!0});var TCt=s(sV);Xko=r(TCt,"MegatronBertForPreTraining"),TCt.forEach(t),zko=r(LPe," (Megatron-BERT model)"),LPe.forEach(t),Wko=i(O),J2=n(O,"LI",{});var yPe=s(J2);due=n(yPe,"STRONG",{});var MCt=s(due);Qko=r(MCt,"mobilebert"),MCt.forEach(t),Uko=r(yPe," \u2014 "),lV=n(yPe,"A",{href:!0});var ECt=s(lV);Hko=r(ECt,"MobileBertForPreTraining"),ECt.forEach(t),Jko=r(yPe," (MobileBERT model)"),yPe.forEach(t),Yko=i(O),Y2=n(O,"LI",{});var xPe=s(Y2);cue=n(xPe,"STRONG",{});var CCt=s(cue);Kko=r(CCt,"mpnet"),CCt.forEach(t),Zko=r(xPe," \u2014 "),iV=n(xPe,"A",{href:!0});var wCt=s(iV);eSo=r(wCt,"MPNetForMaskedLM"),wCt.forEach(t),oSo=r(xPe," (MPNet model)"),xPe.forEach(t),rSo=i(O),K2=n(O,"LI",{});var $Pe=s(K2);mue=n($Pe,"STRONG",{});var ACt=s(mue);tSo=r(ACt,"mvp"),ACt.forEach(t),aSo=r($Pe," \u2014 "),dV=n($Pe,"A",{href:!0});var LCt=s(dV);nSo=r(LCt,"MvpForConditionalGeneration"),LCt.forEach(t),sSo=r($Pe," (MVP model)"),$Pe.forEach(t),lSo=i(O),Z2=n(O,"LI",{});var kPe=s(Z2);fue=n(kPe,"STRONG",{});var yCt=s(fue);iSo=r(yCt,"nezha"),yCt.forEach(t),dSo=r(kPe," \u2014 "),cV=n(kPe,"A",{href:!0});var xCt=s(cV);cSo=r(xCt,"NezhaForPreTraining"),xCt.forEach(t),mSo=r(kPe," (Nezha model)"),kPe.forEach(t),fSo=i(O),eb=n(O,"LI",{});var SPe=s(eb);gue=n(SPe,"STRONG",{});var $Ct=s(gue);gSo=r($Ct,"openai-gpt"),$Ct.forEach(t),hSo=r(SPe," \u2014 "),mV=n(SPe,"A",{href:!0});var kCt=s(mV);uSo=r(kCt,"OpenAIGPTLMHeadModel"),kCt.forEach(t),pSo=r(SPe," (OpenAI GPT model)"),SPe.forEach(t),_So=i(O),ob=n(O,"LI",{});var RPe=s(ob);hue=n(RPe,"STRONG",{});var SCt=s(hue);bSo=r(SCt,"retribert"),SCt.forEach(t),vSo=r(RPe," \u2014 "),fV=n(RPe,"A",{href:!0});var RCt=s(fV);FSo=r(RCt,"RetriBertModel"),RCt.forEach(t),TSo=r(RPe," (RetriBERT model)"),RPe.forEach(t),MSo=i(O),rb=n(O,"LI",{});var PPe=s(rb);uue=n(PPe,"STRONG",{});var PCt=s(uue);ESo=r(PCt,"roberta"),PCt.forEach(t),CSo=r(PPe," \u2014 "),gV=n(PPe,"A",{href:!0});var BCt=s(gV);wSo=r(BCt,"RobertaForMaskedLM"),BCt.forEach(t),ASo=r(PPe," (RoBERTa model)"),PPe.forEach(t),LSo=i(O),tb=n(O,"LI",{});var BPe=s(tb);pue=n(BPe,"STRONG",{});var ICt=s(pue);ySo=r(ICt,"splinter"),ICt.forEach(t),xSo=r(BPe," \u2014 "),hV=n(BPe,"A",{href:!0});var NCt=s(hV);$So=r(NCt,"SplinterForPreTraining"),NCt.forEach(t),kSo=r(BPe," (Splinter model)"),BPe.forEach(t),SSo=i(O),ab=n(O,"LI",{});var IPe=s(ab);_ue=n(IPe,"STRONG",{});var qCt=s(_ue);RSo=r(qCt,"squeezebert"),qCt.forEach(t),PSo=r(IPe," \u2014 "),uV=n(IPe,"A",{href:!0});var jCt=s(uV);BSo=r(jCt,"SqueezeBertForMaskedLM"),jCt.forEach(t),ISo=r(IPe," (SqueezeBERT model)"),IPe.forEach(t),NSo=i(O),nb=n(O,"LI",{});var NPe=s(nb);bue=n(NPe,"STRONG",{});var DCt=s(bue);qSo=r(DCt,"t5"),DCt.forEach(t),jSo=r(NPe," \u2014 "),pV=n(NPe,"A",{href:!0});var GCt=s(pV);DSo=r(GCt,"T5ForConditionalGeneration"),GCt.forEach(t),GSo=r(NPe," (T5 model)"),NPe.forEach(t),OSo=i(O),sb=n(O,"LI",{});var qPe=s(sb);vue=n(qPe,"STRONG",{});var OCt=s(vue);VSo=r(OCt,"tapas"),OCt.forEach(t),XSo=r(qPe," \u2014 "),_V=n(qPe,"A",{href:!0});var VCt=s(_V);zSo=r(VCt,"TapasForMaskedLM"),VCt.forEach(t),WSo=r(qPe," (TAPAS model)"),qPe.forEach(t),QSo=i(O),lb=n(O,"LI",{});var jPe=s(lb);Fue=n(jPe,"STRONG",{});var XCt=s(Fue);USo=r(XCt,"transfo-xl"),XCt.forEach(t),HSo=r(jPe," \u2014 "),bV=n(jPe,"A",{href:!0});var zCt=s(bV);JSo=r(zCt,"TransfoXLLMHeadModel"),zCt.forEach(t),YSo=r(jPe," (Transformer-XL model)"),jPe.forEach(t),KSo=i(O),ib=n(O,"LI",{});var DPe=s(ib);Tue=n(DPe,"STRONG",{});var WCt=s(Tue);ZSo=r(WCt,"unispeech"),WCt.forEach(t),eRo=r(DPe," \u2014 "),vV=n(DPe,"A",{href:!0});var QCt=s(vV);oRo=r(QCt,"UniSpeechForPreTraining"),QCt.forEach(t),rRo=r(DPe," (UniSpeech model)"),DPe.forEach(t),tRo=i(O),db=n(O,"LI",{});var GPe=s(db);Mue=n(GPe,"STRONG",{});var UCt=s(Mue);aRo=r(UCt,"unispeech-sat"),UCt.forEach(t),nRo=r(GPe," \u2014 "),FV=n(GPe,"A",{href:!0});var HCt=s(FV);sRo=r(HCt,"UniSpeechSatForPreTraining"),HCt.forEach(t),lRo=r(GPe," (UniSpeechSat model)"),GPe.forEach(t),iRo=i(O),cb=n(O,"LI",{});var OPe=s(cb);Eue=n(OPe,"STRONG",{});var JCt=s(Eue);dRo=r(JCt,"videomae"),JCt.forEach(t),cRo=r(OPe," \u2014 "),TV=n(OPe,"A",{href:!0});var YCt=s(TV);mRo=r(YCt,"VideoMAEForPreTraining"),YCt.forEach(t),fRo=r(OPe," (VideoMAE model)"),OPe.forEach(t),gRo=i(O),mb=n(O,"LI",{});var VPe=s(mb);Cue=n(VPe,"STRONG",{});var KCt=s(Cue);hRo=r(KCt,"visual_bert"),KCt.forEach(t),uRo=r(VPe," \u2014 "),MV=n(VPe,"A",{href:!0});var ZCt=s(MV);pRo=r(ZCt,"VisualBertForPreTraining"),ZCt.forEach(t),_Ro=r(VPe," (VisualBERT model)"),VPe.forEach(t),bRo=i(O),fb=n(O,"LI",{});var XPe=s(fb);wue=n(XPe,"STRONG",{});var e3t=s(wue);vRo=r(e3t,"vit_mae"),e3t.forEach(t),FRo=r(XPe," \u2014 "),EV=n(XPe,"A",{href:!0});var o3t=s(EV);TRo=r(o3t,"ViTMAEForPreTraining"),o3t.forEach(t),MRo=r(XPe," (ViTMAE model)"),XPe.forEach(t),ERo=i(O),gb=n(O,"LI",{});var zPe=s(gb);Aue=n(zPe,"STRONG",{});var r3t=s(Aue);CRo=r(r3t,"wav2vec2"),r3t.forEach(t),wRo=r(zPe," \u2014 "),CV=n(zPe,"A",{href:!0});var t3t=s(CV);ARo=r(t3t,"Wav2Vec2ForPreTraining"),t3t.forEach(t),LRo=r(zPe," (Wav2Vec2 model)"),zPe.forEach(t),yRo=i(O),hb=n(O,"LI",{});var WPe=s(hb);Lue=n(WPe,"STRONG",{});var a3t=s(Lue);xRo=r(a3t,"wav2vec2-conformer"),a3t.forEach(t),$Ro=r(WPe," \u2014 "),wV=n(WPe,"A",{href:!0});var n3t=s(wV);kRo=r(n3t,"Wav2Vec2ConformerForPreTraining"),n3t.forEach(t),SRo=r(WPe," (Wav2Vec2-Conformer model)"),WPe.forEach(t),RRo=i(O),ub=n(O,"LI",{});var QPe=s(ub);yue=n(QPe,"STRONG",{});var s3t=s(yue);PRo=r(s3t,"xlm"),s3t.forEach(t),BRo=r(QPe," \u2014 "),AV=n(QPe,"A",{href:!0});var l3t=s(AV);IRo=r(l3t,"XLMWithLMHeadModel"),l3t.forEach(t),NRo=r(QPe," (XLM model)"),QPe.forEach(t),qRo=i(O),pb=n(O,"LI",{});var UPe=s(pb);xue=n(UPe,"STRONG",{});var i3t=s(xue);jRo=r(i3t,"xlm-roberta"),i3t.forEach(t),DRo=r(UPe," \u2014 "),LV=n(UPe,"A",{href:!0});var d3t=s(LV);GRo=r(d3t,"XLMRobertaForMaskedLM"),d3t.forEach(t),ORo=r(UPe," (XLM-RoBERTa model)"),UPe.forEach(t),VRo=i(O),_b=n(O,"LI",{});var HPe=s(_b);$ue=n(HPe,"STRONG",{});var c3t=s($ue);XRo=r(c3t,"xlm-roberta-xl"),c3t.forEach(t),zRo=r(HPe," \u2014 "),yV=n(HPe,"A",{href:!0});var m3t=s(yV);WRo=r(m3t,"XLMRobertaXLForMaskedLM"),m3t.forEach(t),QRo=r(HPe," (XLM-RoBERTa-XL model)"),HPe.forEach(t),URo=i(O),bb=n(O,"LI",{});var JPe=s(bb);kue=n(JPe,"STRONG",{});var f3t=s(kue);HRo=r(f3t,"xlnet"),f3t.forEach(t),JRo=r(JPe," \u2014 "),xV=n(JPe,"A",{href:!0});var g3t=s(xV);YRo=r(g3t,"XLNetLMHeadModel"),g3t.forEach(t),KRo=r(JPe," (XLNet model)"),JPe.forEach(t),O.forEach(t),ZRo=i(ha),vb=n(ha,"P",{});var YPe=s(vb);ePo=r(YPe,"The model is set in evaluation mode by default using "),Sue=n(YPe,"CODE",{});var h3t=s(Sue);oPo=r(h3t,"model.eval()"),h3t.forEach(t),rPo=r(YPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rue=n(YPe,"CODE",{});var u3t=s(Rue);tPo=r(u3t,"model.train()"),u3t.forEach(t),YPe.forEach(t),aPo=i(ha),T(Fb.$$.fragment,ha),ha.forEach(t),ul.forEach(t),GQe=i(m),id=n(m,"H2",{class:!0});var YHe=s(id);Tb=n(YHe,"A",{id:!0,class:!0,href:!0});var p3t=s(Tb);Pue=n(p3t,"SPAN",{});var _3t=s(Pue);T(z8.$$.fragment,_3t),_3t.forEach(t),p3t.forEach(t),nPo=i(YHe),Bue=n(YHe,"SPAN",{});var b3t=s(Bue);sPo=r(b3t,"AutoModelForCausalLM"),b3t.forEach(t),YHe.forEach(t),OQe=i(m),Po=n(m,"DIV",{class:!0});var pl=s(Po);T(W8.$$.fragment,pl),lPo=i(pl),dd=n(pl,"P",{});var Iae=s(dd);iPo=r(Iae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$V=n(Iae,"A",{href:!0});var v3t=s($V);dPo=r(v3t,"from_pretrained()"),v3t.forEach(t),cPo=r(Iae," class method or the "),kV=n(Iae,"A",{href:!0});var F3t=s(kV);mPo=r(F3t,"from_config()"),F3t.forEach(t),fPo=r(Iae,` class
method.`),Iae.forEach(t),gPo=i(pl),Q8=n(pl,"P",{});var KHe=s(Q8);hPo=r(KHe,"This class cannot be instantiated directly using "),Iue=n(KHe,"CODE",{});var T3t=s(Iue);uPo=r(T3t,"__init__()"),T3t.forEach(t),pPo=r(KHe," (throws an error)."),KHe.forEach(t),_Po=i(pl),ht=n(pl,"DIV",{class:!0});var fL=s(ht);T(U8.$$.fragment,fL),bPo=i(fL),Nue=n(fL,"P",{});var M3t=s(Nue);vPo=r(M3t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),M3t.forEach(t),FPo=i(fL),cd=n(fL,"P",{});var Nae=s(cd);TPo=r(Nae,`Note:
Loading a model from its configuration file does `),que=n(Nae,"STRONG",{});var E3t=s(que);MPo=r(E3t,"not"),E3t.forEach(t),EPo=r(Nae,` load the model weights. It only affects the
model\u2019s configuration. Use `),SV=n(Nae,"A",{href:!0});var C3t=s(SV);CPo=r(C3t,"from_pretrained()"),C3t.forEach(t),wPo=r(Nae," to load the model weights."),Nae.forEach(t),APo=i(fL),T(Mb.$$.fragment,fL),fL.forEach(t),LPo=i(pl),Ze=n(pl,"DIV",{class:!0});var ua=s(Ze);T(H8.$$.fragment,ua),yPo=i(ua),jue=n(ua,"P",{});var w3t=s(jue);xPo=r(w3t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),w3t.forEach(t),$Po=i(ua),za=n(ua,"P",{});var gL=s(za);kPo=r(gL,"The model class to instantiate is selected based on the "),Due=n(gL,"CODE",{});var A3t=s(Due);SPo=r(A3t,"model_type"),A3t.forEach(t),RPo=r(gL,` property of the config object (either
passed as an argument or loaded from `),Gue=n(gL,"CODE",{});var L3t=s(Gue);PPo=r(L3t,"pretrained_model_name_or_path"),L3t.forEach(t),BPo=r(gL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oue=n(gL,"CODE",{});var y3t=s(Oue);IPo=r(y3t,"pretrained_model_name_or_path"),y3t.forEach(t),NPo=r(gL,":"),gL.forEach(t),qPo=i(ua),z=n(ua,"UL",{});var W=s(z);Eb=n(W,"LI",{});var KPe=s(Eb);Vue=n(KPe,"STRONG",{});var x3t=s(Vue);jPo=r(x3t,"bart"),x3t.forEach(t),DPo=r(KPe," \u2014 "),RV=n(KPe,"A",{href:!0});var $3t=s(RV);GPo=r($3t,"BartForCausalLM"),$3t.forEach(t),OPo=r(KPe," (BART model)"),KPe.forEach(t),VPo=i(W),Cb=n(W,"LI",{});var ZPe=s(Cb);Xue=n(ZPe,"STRONG",{});var k3t=s(Xue);XPo=r(k3t,"bert"),k3t.forEach(t),zPo=r(ZPe," \u2014 "),PV=n(ZPe,"A",{href:!0});var S3t=s(PV);WPo=r(S3t,"BertLMHeadModel"),S3t.forEach(t),QPo=r(ZPe," (BERT model)"),ZPe.forEach(t),UPo=i(W),wb=n(W,"LI",{});var eBe=s(wb);zue=n(eBe,"STRONG",{});var R3t=s(zue);HPo=r(R3t,"bert-generation"),R3t.forEach(t),JPo=r(eBe," \u2014 "),BV=n(eBe,"A",{href:!0});var P3t=s(BV);YPo=r(P3t,"BertGenerationDecoder"),P3t.forEach(t),KPo=r(eBe," (Bert Generation model)"),eBe.forEach(t),ZPo=i(W),Ab=n(W,"LI",{});var oBe=s(Ab);Wue=n(oBe,"STRONG",{});var B3t=s(Wue);eBo=r(B3t,"big_bird"),B3t.forEach(t),oBo=r(oBe," \u2014 "),IV=n(oBe,"A",{href:!0});var I3t=s(IV);rBo=r(I3t,"BigBirdForCausalLM"),I3t.forEach(t),tBo=r(oBe," (BigBird model)"),oBe.forEach(t),aBo=i(W),Lb=n(W,"LI",{});var rBe=s(Lb);Que=n(rBe,"STRONG",{});var N3t=s(Que);nBo=r(N3t,"bigbird_pegasus"),N3t.forEach(t),sBo=r(rBe," \u2014 "),NV=n(rBe,"A",{href:!0});var q3t=s(NV);lBo=r(q3t,"BigBirdPegasusForCausalLM"),q3t.forEach(t),iBo=r(rBe," (BigBird-Pegasus model)"),rBe.forEach(t),dBo=i(W),yb=n(W,"LI",{});var tBe=s(yb);Uue=n(tBe,"STRONG",{});var j3t=s(Uue);cBo=r(j3t,"blenderbot"),j3t.forEach(t),mBo=r(tBe," \u2014 "),qV=n(tBe,"A",{href:!0});var D3t=s(qV);fBo=r(D3t,"BlenderbotForCausalLM"),D3t.forEach(t),gBo=r(tBe," (Blenderbot model)"),tBe.forEach(t),hBo=i(W),xb=n(W,"LI",{});var aBe=s(xb);Hue=n(aBe,"STRONG",{});var G3t=s(Hue);uBo=r(G3t,"blenderbot-small"),G3t.forEach(t),pBo=r(aBe," \u2014 "),jV=n(aBe,"A",{href:!0});var O3t=s(jV);_Bo=r(O3t,"BlenderbotSmallForCausalLM"),O3t.forEach(t),bBo=r(aBe," (BlenderbotSmall model)"),aBe.forEach(t),vBo=i(W),$b=n(W,"LI",{});var nBe=s($b);Jue=n(nBe,"STRONG",{});var V3t=s(Jue);FBo=r(V3t,"bloom"),V3t.forEach(t),TBo=r(nBe," \u2014 "),DV=n(nBe,"A",{href:!0});var X3t=s(DV);MBo=r(X3t,"BloomForCausalLM"),X3t.forEach(t),EBo=r(nBe," (BLOOM model)"),nBe.forEach(t),CBo=i(W),kb=n(W,"LI",{});var sBe=s(kb);Yue=n(sBe,"STRONG",{});var z3t=s(Yue);wBo=r(z3t,"camembert"),z3t.forEach(t),ABo=r(sBe," \u2014 "),GV=n(sBe,"A",{href:!0});var W3t=s(GV);LBo=r(W3t,"CamembertForCausalLM"),W3t.forEach(t),yBo=r(sBe," (CamemBERT model)"),sBe.forEach(t),xBo=i(W),Sb=n(W,"LI",{});var lBe=s(Sb);Kue=n(lBe,"STRONG",{});var Q3t=s(Kue);$Bo=r(Q3t,"codegen"),Q3t.forEach(t),kBo=r(lBe," \u2014 "),OV=n(lBe,"A",{href:!0});var U3t=s(OV);SBo=r(U3t,"CodeGenForCausalLM"),U3t.forEach(t),RBo=r(lBe," (CodeGen model)"),lBe.forEach(t),PBo=i(W),Rb=n(W,"LI",{});var iBe=s(Rb);Zue=n(iBe,"STRONG",{});var H3t=s(Zue);BBo=r(H3t,"ctrl"),H3t.forEach(t),IBo=r(iBe," \u2014 "),VV=n(iBe,"A",{href:!0});var J3t=s(VV);NBo=r(J3t,"CTRLLMHeadModel"),J3t.forEach(t),qBo=r(iBe," (CTRL model)"),iBe.forEach(t),jBo=i(W),Pb=n(W,"LI",{});var dBe=s(Pb);epe=n(dBe,"STRONG",{});var Y3t=s(epe);DBo=r(Y3t,"data2vec-text"),Y3t.forEach(t),GBo=r(dBe," \u2014 "),XV=n(dBe,"A",{href:!0});var K3t=s(XV);OBo=r(K3t,"Data2VecTextForCausalLM"),K3t.forEach(t),VBo=r(dBe," (Data2VecText model)"),dBe.forEach(t),XBo=i(W),Bb=n(W,"LI",{});var cBe=s(Bb);ope=n(cBe,"STRONG",{});var Z3t=s(ope);zBo=r(Z3t,"electra"),Z3t.forEach(t),WBo=r(cBe," \u2014 "),zV=n(cBe,"A",{href:!0});var e5t=s(zV);QBo=r(e5t,"ElectraForCausalLM"),e5t.forEach(t),UBo=r(cBe," (ELECTRA model)"),cBe.forEach(t),HBo=i(W),Ib=n(W,"LI",{});var mBe=s(Ib);rpe=n(mBe,"STRONG",{});var o5t=s(rpe);JBo=r(o5t,"gpt2"),o5t.forEach(t),YBo=r(mBe," \u2014 "),WV=n(mBe,"A",{href:!0});var r5t=s(WV);KBo=r(r5t,"GPT2LMHeadModel"),r5t.forEach(t),ZBo=r(mBe," (OpenAI GPT-2 model)"),mBe.forEach(t),eIo=i(W),Nb=n(W,"LI",{});var fBe=s(Nb);tpe=n(fBe,"STRONG",{});var t5t=s(tpe);oIo=r(t5t,"gpt_neo"),t5t.forEach(t),rIo=r(fBe," \u2014 "),QV=n(fBe,"A",{href:!0});var a5t=s(QV);tIo=r(a5t,"GPTNeoForCausalLM"),a5t.forEach(t),aIo=r(fBe," (GPT Neo model)"),fBe.forEach(t),nIo=i(W),qb=n(W,"LI",{});var gBe=s(qb);ape=n(gBe,"STRONG",{});var n5t=s(ape);sIo=r(n5t,"gpt_neox"),n5t.forEach(t),lIo=r(gBe," \u2014 "),UV=n(gBe,"A",{href:!0});var s5t=s(UV);iIo=r(s5t,"GPTNeoXForCausalLM"),s5t.forEach(t),dIo=r(gBe," (GPT NeoX model)"),gBe.forEach(t),cIo=i(W),jb=n(W,"LI",{});var hBe=s(jb);npe=n(hBe,"STRONG",{});var l5t=s(npe);mIo=r(l5t,"gptj"),l5t.forEach(t),fIo=r(hBe," \u2014 "),HV=n(hBe,"A",{href:!0});var i5t=s(HV);gIo=r(i5t,"GPTJForCausalLM"),i5t.forEach(t),hIo=r(hBe," (GPT-J model)"),hBe.forEach(t),uIo=i(W),Db=n(W,"LI",{});var uBe=s(Db);spe=n(uBe,"STRONG",{});var d5t=s(spe);pIo=r(d5t,"marian"),d5t.forEach(t),_Io=r(uBe," \u2014 "),JV=n(uBe,"A",{href:!0});var c5t=s(JV);bIo=r(c5t,"MarianForCausalLM"),c5t.forEach(t),vIo=r(uBe," (Marian model)"),uBe.forEach(t),FIo=i(W),Gb=n(W,"LI",{});var pBe=s(Gb);lpe=n(pBe,"STRONG",{});var m5t=s(lpe);TIo=r(m5t,"mbart"),m5t.forEach(t),MIo=r(pBe," \u2014 "),YV=n(pBe,"A",{href:!0});var f5t=s(YV);EIo=r(f5t,"MBartForCausalLM"),f5t.forEach(t),CIo=r(pBe," (mBART model)"),pBe.forEach(t),wIo=i(W),Ob=n(W,"LI",{});var _Be=s(Ob);ipe=n(_Be,"STRONG",{});var g5t=s(ipe);AIo=r(g5t,"megatron-bert"),g5t.forEach(t),LIo=r(_Be," \u2014 "),KV=n(_Be,"A",{href:!0});var h5t=s(KV);yIo=r(h5t,"MegatronBertForCausalLM"),h5t.forEach(t),xIo=r(_Be," (Megatron-BERT model)"),_Be.forEach(t),$Io=i(W),Vb=n(W,"LI",{});var bBe=s(Vb);dpe=n(bBe,"STRONG",{});var u5t=s(dpe);kIo=r(u5t,"mvp"),u5t.forEach(t),SIo=r(bBe," \u2014 "),ZV=n(bBe,"A",{href:!0});var p5t=s(ZV);RIo=r(p5t,"MvpForCausalLM"),p5t.forEach(t),PIo=r(bBe," (MVP model)"),bBe.forEach(t),BIo=i(W),Xb=n(W,"LI",{});var vBe=s(Xb);cpe=n(vBe,"STRONG",{});var _5t=s(cpe);IIo=r(_5t,"openai-gpt"),_5t.forEach(t),NIo=r(vBe," \u2014 "),eX=n(vBe,"A",{href:!0});var b5t=s(eX);qIo=r(b5t,"OpenAIGPTLMHeadModel"),b5t.forEach(t),jIo=r(vBe," (OpenAI GPT model)"),vBe.forEach(t),DIo=i(W),zb=n(W,"LI",{});var FBe=s(zb);mpe=n(FBe,"STRONG",{});var v5t=s(mpe);GIo=r(v5t,"opt"),v5t.forEach(t),OIo=r(FBe," \u2014 "),oX=n(FBe,"A",{href:!0});var F5t=s(oX);VIo=r(F5t,"OPTForCausalLM"),F5t.forEach(t),XIo=r(FBe," (OPT model)"),FBe.forEach(t),zIo=i(W),Wb=n(W,"LI",{});var TBe=s(Wb);fpe=n(TBe,"STRONG",{});var T5t=s(fpe);WIo=r(T5t,"pegasus"),T5t.forEach(t),QIo=r(TBe," \u2014 "),rX=n(TBe,"A",{href:!0});var M5t=s(rX);UIo=r(M5t,"PegasusForCausalLM"),M5t.forEach(t),HIo=r(TBe," (Pegasus model)"),TBe.forEach(t),JIo=i(W),Qb=n(W,"LI",{});var MBe=s(Qb);gpe=n(MBe,"STRONG",{});var E5t=s(gpe);YIo=r(E5t,"plbart"),E5t.forEach(t),KIo=r(MBe," \u2014 "),tX=n(MBe,"A",{href:!0});var C5t=s(tX);ZIo=r(C5t,"PLBartForCausalLM"),C5t.forEach(t),eNo=r(MBe," (PLBart model)"),MBe.forEach(t),oNo=i(W),Ub=n(W,"LI",{});var EBe=s(Ub);hpe=n(EBe,"STRONG",{});var w5t=s(hpe);rNo=r(w5t,"prophetnet"),w5t.forEach(t),tNo=r(EBe," \u2014 "),aX=n(EBe,"A",{href:!0});var A5t=s(aX);aNo=r(A5t,"ProphetNetForCausalLM"),A5t.forEach(t),nNo=r(EBe," (ProphetNet model)"),EBe.forEach(t),sNo=i(W),Hb=n(W,"LI",{});var CBe=s(Hb);upe=n(CBe,"STRONG",{});var L5t=s(upe);lNo=r(L5t,"qdqbert"),L5t.forEach(t),iNo=r(CBe," \u2014 "),nX=n(CBe,"A",{href:!0});var y5t=s(nX);dNo=r(y5t,"QDQBertLMHeadModel"),y5t.forEach(t),cNo=r(CBe," (QDQBert model)"),CBe.forEach(t),mNo=i(W),Jb=n(W,"LI",{});var wBe=s(Jb);ppe=n(wBe,"STRONG",{});var x5t=s(ppe);fNo=r(x5t,"reformer"),x5t.forEach(t),gNo=r(wBe," \u2014 "),sX=n(wBe,"A",{href:!0});var $5t=s(sX);hNo=r($5t,"ReformerModelWithLMHead"),$5t.forEach(t),uNo=r(wBe," (Reformer model)"),wBe.forEach(t),pNo=i(W),Yb=n(W,"LI",{});var ABe=s(Yb);_pe=n(ABe,"STRONG",{});var k5t=s(_pe);_No=r(k5t,"rembert"),k5t.forEach(t),bNo=r(ABe," \u2014 "),lX=n(ABe,"A",{href:!0});var S5t=s(lX);vNo=r(S5t,"RemBertForCausalLM"),S5t.forEach(t),FNo=r(ABe," (RemBERT model)"),ABe.forEach(t),TNo=i(W),Kb=n(W,"LI",{});var LBe=s(Kb);bpe=n(LBe,"STRONG",{});var R5t=s(bpe);MNo=r(R5t,"roberta"),R5t.forEach(t),ENo=r(LBe," \u2014 "),iX=n(LBe,"A",{href:!0});var P5t=s(iX);CNo=r(P5t,"RobertaForCausalLM"),P5t.forEach(t),wNo=r(LBe," (RoBERTa model)"),LBe.forEach(t),ANo=i(W),Zb=n(W,"LI",{});var yBe=s(Zb);vpe=n(yBe,"STRONG",{});var B5t=s(vpe);LNo=r(B5t,"roformer"),B5t.forEach(t),yNo=r(yBe," \u2014 "),dX=n(yBe,"A",{href:!0});var I5t=s(dX);xNo=r(I5t,"RoFormerForCausalLM"),I5t.forEach(t),$No=r(yBe," (RoFormer model)"),yBe.forEach(t),kNo=i(W),ev=n(W,"LI",{});var xBe=s(ev);Fpe=n(xBe,"STRONG",{});var N5t=s(Fpe);SNo=r(N5t,"speech_to_text_2"),N5t.forEach(t),RNo=r(xBe," \u2014 "),cX=n(xBe,"A",{href:!0});var q5t=s(cX);PNo=r(q5t,"Speech2Text2ForCausalLM"),q5t.forEach(t),BNo=r(xBe," (Speech2Text2 model)"),xBe.forEach(t),INo=i(W),ov=n(W,"LI",{});var $Be=s(ov);Tpe=n($Be,"STRONG",{});var j5t=s(Tpe);NNo=r(j5t,"transfo-xl"),j5t.forEach(t),qNo=r($Be," \u2014 "),mX=n($Be,"A",{href:!0});var D5t=s(mX);jNo=r(D5t,"TransfoXLLMHeadModel"),D5t.forEach(t),DNo=r($Be," (Transformer-XL model)"),$Be.forEach(t),GNo=i(W),rv=n(W,"LI",{});var kBe=s(rv);Mpe=n(kBe,"STRONG",{});var G5t=s(Mpe);ONo=r(G5t,"trocr"),G5t.forEach(t),VNo=r(kBe," \u2014 "),fX=n(kBe,"A",{href:!0});var O5t=s(fX);XNo=r(O5t,"TrOCRForCausalLM"),O5t.forEach(t),zNo=r(kBe," (TrOCR model)"),kBe.forEach(t),WNo=i(W),tv=n(W,"LI",{});var SBe=s(tv);Epe=n(SBe,"STRONG",{});var V5t=s(Epe);QNo=r(V5t,"xglm"),V5t.forEach(t),UNo=r(SBe," \u2014 "),gX=n(SBe,"A",{href:!0});var X5t=s(gX);HNo=r(X5t,"XGLMForCausalLM"),X5t.forEach(t),JNo=r(SBe," (XGLM model)"),SBe.forEach(t),YNo=i(W),av=n(W,"LI",{});var RBe=s(av);Cpe=n(RBe,"STRONG",{});var z5t=s(Cpe);KNo=r(z5t,"xlm"),z5t.forEach(t),ZNo=r(RBe," \u2014 "),hX=n(RBe,"A",{href:!0});var W5t=s(hX);eqo=r(W5t,"XLMWithLMHeadModel"),W5t.forEach(t),oqo=r(RBe," (XLM model)"),RBe.forEach(t),rqo=i(W),nv=n(W,"LI",{});var PBe=s(nv);wpe=n(PBe,"STRONG",{});var Q5t=s(wpe);tqo=r(Q5t,"xlm-prophetnet"),Q5t.forEach(t),aqo=r(PBe," \u2014 "),uX=n(PBe,"A",{href:!0});var U5t=s(uX);nqo=r(U5t,"XLMProphetNetForCausalLM"),U5t.forEach(t),sqo=r(PBe," (XLM-ProphetNet model)"),PBe.forEach(t),lqo=i(W),sv=n(W,"LI",{});var BBe=s(sv);Ape=n(BBe,"STRONG",{});var H5t=s(Ape);iqo=r(H5t,"xlm-roberta"),H5t.forEach(t),dqo=r(BBe," \u2014 "),pX=n(BBe,"A",{href:!0});var J5t=s(pX);cqo=r(J5t,"XLMRobertaForCausalLM"),J5t.forEach(t),mqo=r(BBe," (XLM-RoBERTa model)"),BBe.forEach(t),fqo=i(W),lv=n(W,"LI",{});var IBe=s(lv);Lpe=n(IBe,"STRONG",{});var Y5t=s(Lpe);gqo=r(Y5t,"xlm-roberta-xl"),Y5t.forEach(t),hqo=r(IBe," \u2014 "),_X=n(IBe,"A",{href:!0});var K5t=s(_X);uqo=r(K5t,"XLMRobertaXLForCausalLM"),K5t.forEach(t),pqo=r(IBe," (XLM-RoBERTa-XL model)"),IBe.forEach(t),_qo=i(W),iv=n(W,"LI",{});var NBe=s(iv);ype=n(NBe,"STRONG",{});var Z5t=s(ype);bqo=r(Z5t,"xlnet"),Z5t.forEach(t),vqo=r(NBe," \u2014 "),bX=n(NBe,"A",{href:!0});var e0t=s(bX);Fqo=r(e0t,"XLNetLMHeadModel"),e0t.forEach(t),Tqo=r(NBe," (XLNet model)"),NBe.forEach(t),W.forEach(t),Mqo=i(ua),dv=n(ua,"P",{});var qBe=s(dv);Eqo=r(qBe,"The model is set in evaluation mode by default using "),xpe=n(qBe,"CODE",{});var o0t=s(xpe);Cqo=r(o0t,"model.eval()"),o0t.forEach(t),wqo=r(qBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$pe=n(qBe,"CODE",{});var r0t=s($pe);Aqo=r(r0t,"model.train()"),r0t.forEach(t),qBe.forEach(t),Lqo=i(ua),T(cv.$$.fragment,ua),ua.forEach(t),pl.forEach(t),VQe=i(m),md=n(m,"H2",{class:!0});var ZHe=s(md);mv=n(ZHe,"A",{id:!0,class:!0,href:!0});var t0t=s(mv);kpe=n(t0t,"SPAN",{});var a0t=s(kpe);T(J8.$$.fragment,a0t),a0t.forEach(t),t0t.forEach(t),yqo=i(ZHe),Spe=n(ZHe,"SPAN",{});var n0t=s(Spe);xqo=r(n0t,"AutoModelForMaskedLM"),n0t.forEach(t),ZHe.forEach(t),XQe=i(m),Bo=n(m,"DIV",{class:!0});var _l=s(Bo);T(Y8.$$.fragment,_l),$qo=i(_l),fd=n(_l,"P",{});var qae=s(fd);kqo=r(qae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),vX=n(qae,"A",{href:!0});var s0t=s(vX);Sqo=r(s0t,"from_pretrained()"),s0t.forEach(t),Rqo=r(qae," class method or the "),FX=n(qae,"A",{href:!0});var l0t=s(FX);Pqo=r(l0t,"from_config()"),l0t.forEach(t),Bqo=r(qae,` class
method.`),qae.forEach(t),Iqo=i(_l),K8=n(_l,"P",{});var eJe=s(K8);Nqo=r(eJe,"This class cannot be instantiated directly using "),Rpe=n(eJe,"CODE",{});var i0t=s(Rpe);qqo=r(i0t,"__init__()"),i0t.forEach(t),jqo=r(eJe," (throws an error)."),eJe.forEach(t),Dqo=i(_l),ut=n(_l,"DIV",{class:!0});var hL=s(ut);T(Z8.$$.fragment,hL),Gqo=i(hL),Ppe=n(hL,"P",{});var d0t=s(Ppe);Oqo=r(d0t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),d0t.forEach(t),Vqo=i(hL),gd=n(hL,"P",{});var jae=s(gd);Xqo=r(jae,`Note:
Loading a model from its configuration file does `),Bpe=n(jae,"STRONG",{});var c0t=s(Bpe);zqo=r(c0t,"not"),c0t.forEach(t),Wqo=r(jae,` load the model weights. It only affects the
model\u2019s configuration. Use `),TX=n(jae,"A",{href:!0});var m0t=s(TX);Qqo=r(m0t,"from_pretrained()"),m0t.forEach(t),Uqo=r(jae," to load the model weights."),jae.forEach(t),Hqo=i(hL),T(fv.$$.fragment,hL),hL.forEach(t),Jqo=i(_l),eo=n(_l,"DIV",{class:!0});var pa=s(eo);T(e9.$$.fragment,pa),Yqo=i(pa),Ipe=n(pa,"P",{});var f0t=s(Ipe);Kqo=r(f0t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),f0t.forEach(t),Zqo=i(pa),Wa=n(pa,"P",{});var uL=s(Wa);ejo=r(uL,"The model class to instantiate is selected based on the "),Npe=n(uL,"CODE",{});var g0t=s(Npe);ojo=r(g0t,"model_type"),g0t.forEach(t),rjo=r(uL,` property of the config object (either
passed as an argument or loaded from `),qpe=n(uL,"CODE",{});var h0t=s(qpe);tjo=r(h0t,"pretrained_model_name_or_path"),h0t.forEach(t),ajo=r(uL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jpe=n(uL,"CODE",{});var u0t=s(jpe);njo=r(u0t,"pretrained_model_name_or_path"),u0t.forEach(t),sjo=r(uL,":"),uL.forEach(t),ljo=i(pa),Q=n(pa,"UL",{});var J=s(Q);gv=n(J,"LI",{});var jBe=s(gv);Dpe=n(jBe,"STRONG",{});var p0t=s(Dpe);ijo=r(p0t,"albert"),p0t.forEach(t),djo=r(jBe," \u2014 "),MX=n(jBe,"A",{href:!0});var _0t=s(MX);cjo=r(_0t,"AlbertForMaskedLM"),_0t.forEach(t),mjo=r(jBe," (ALBERT model)"),jBe.forEach(t),fjo=i(J),hv=n(J,"LI",{});var DBe=s(hv);Gpe=n(DBe,"STRONG",{});var b0t=s(Gpe);gjo=r(b0t,"bart"),b0t.forEach(t),hjo=r(DBe," \u2014 "),EX=n(DBe,"A",{href:!0});var v0t=s(EX);ujo=r(v0t,"BartForConditionalGeneration"),v0t.forEach(t),pjo=r(DBe," (BART model)"),DBe.forEach(t),_jo=i(J),uv=n(J,"LI",{});var GBe=s(uv);Ope=n(GBe,"STRONG",{});var F0t=s(Ope);bjo=r(F0t,"bert"),F0t.forEach(t),vjo=r(GBe," \u2014 "),CX=n(GBe,"A",{href:!0});var T0t=s(CX);Fjo=r(T0t,"BertForMaskedLM"),T0t.forEach(t),Tjo=r(GBe," (BERT model)"),GBe.forEach(t),Mjo=i(J),pv=n(J,"LI",{});var OBe=s(pv);Vpe=n(OBe,"STRONG",{});var M0t=s(Vpe);Ejo=r(M0t,"big_bird"),M0t.forEach(t),Cjo=r(OBe," \u2014 "),wX=n(OBe,"A",{href:!0});var E0t=s(wX);wjo=r(E0t,"BigBirdForMaskedLM"),E0t.forEach(t),Ajo=r(OBe," (BigBird model)"),OBe.forEach(t),Ljo=i(J),_v=n(J,"LI",{});var VBe=s(_v);Xpe=n(VBe,"STRONG",{});var C0t=s(Xpe);yjo=r(C0t,"camembert"),C0t.forEach(t),xjo=r(VBe," \u2014 "),AX=n(VBe,"A",{href:!0});var w0t=s(AX);$jo=r(w0t,"CamembertForMaskedLM"),w0t.forEach(t),kjo=r(VBe," (CamemBERT model)"),VBe.forEach(t),Sjo=i(J),bv=n(J,"LI",{});var XBe=s(bv);zpe=n(XBe,"STRONG",{});var A0t=s(zpe);Rjo=r(A0t,"convbert"),A0t.forEach(t),Pjo=r(XBe," \u2014 "),LX=n(XBe,"A",{href:!0});var L0t=s(LX);Bjo=r(L0t,"ConvBertForMaskedLM"),L0t.forEach(t),Ijo=r(XBe," (ConvBERT model)"),XBe.forEach(t),Njo=i(J),vv=n(J,"LI",{});var zBe=s(vv);Wpe=n(zBe,"STRONG",{});var y0t=s(Wpe);qjo=r(y0t,"data2vec-text"),y0t.forEach(t),jjo=r(zBe," \u2014 "),yX=n(zBe,"A",{href:!0});var x0t=s(yX);Djo=r(x0t,"Data2VecTextForMaskedLM"),x0t.forEach(t),Gjo=r(zBe," (Data2VecText model)"),zBe.forEach(t),Ojo=i(J),Fv=n(J,"LI",{});var WBe=s(Fv);Qpe=n(WBe,"STRONG",{});var $0t=s(Qpe);Vjo=r($0t,"deberta"),$0t.forEach(t),Xjo=r(WBe," \u2014 "),xX=n(WBe,"A",{href:!0});var k0t=s(xX);zjo=r(k0t,"DebertaForMaskedLM"),k0t.forEach(t),Wjo=r(WBe," (DeBERTa model)"),WBe.forEach(t),Qjo=i(J),Tv=n(J,"LI",{});var QBe=s(Tv);Upe=n(QBe,"STRONG",{});var S0t=s(Upe);Ujo=r(S0t,"deberta-v2"),S0t.forEach(t),Hjo=r(QBe," \u2014 "),$X=n(QBe,"A",{href:!0});var R0t=s($X);Jjo=r(R0t,"DebertaV2ForMaskedLM"),R0t.forEach(t),Yjo=r(QBe," (DeBERTa-v2 model)"),QBe.forEach(t),Kjo=i(J),Mv=n(J,"LI",{});var UBe=s(Mv);Hpe=n(UBe,"STRONG",{});var P0t=s(Hpe);Zjo=r(P0t,"distilbert"),P0t.forEach(t),eDo=r(UBe," \u2014 "),kX=n(UBe,"A",{href:!0});var B0t=s(kX);oDo=r(B0t,"DistilBertForMaskedLM"),B0t.forEach(t),rDo=r(UBe," (DistilBERT model)"),UBe.forEach(t),tDo=i(J),Ev=n(J,"LI",{});var HBe=s(Ev);Jpe=n(HBe,"STRONG",{});var I0t=s(Jpe);aDo=r(I0t,"electra"),I0t.forEach(t),nDo=r(HBe," \u2014 "),SX=n(HBe,"A",{href:!0});var N0t=s(SX);sDo=r(N0t,"ElectraForMaskedLM"),N0t.forEach(t),lDo=r(HBe," (ELECTRA model)"),HBe.forEach(t),iDo=i(J),Cv=n(J,"LI",{});var JBe=s(Cv);Ype=n(JBe,"STRONG",{});var q0t=s(Ype);dDo=r(q0t,"flaubert"),q0t.forEach(t),cDo=r(JBe," \u2014 "),RX=n(JBe,"A",{href:!0});var j0t=s(RX);mDo=r(j0t,"FlaubertWithLMHeadModel"),j0t.forEach(t),fDo=r(JBe," (FlauBERT model)"),JBe.forEach(t),gDo=i(J),wv=n(J,"LI",{});var YBe=s(wv);Kpe=n(YBe,"STRONG",{});var D0t=s(Kpe);hDo=r(D0t,"fnet"),D0t.forEach(t),uDo=r(YBe," \u2014 "),PX=n(YBe,"A",{href:!0});var G0t=s(PX);pDo=r(G0t,"FNetForMaskedLM"),G0t.forEach(t),_Do=r(YBe," (FNet model)"),YBe.forEach(t),bDo=i(J),Av=n(J,"LI",{});var KBe=s(Av);Zpe=n(KBe,"STRONG",{});var O0t=s(Zpe);vDo=r(O0t,"funnel"),O0t.forEach(t),FDo=r(KBe," \u2014 "),BX=n(KBe,"A",{href:!0});var V0t=s(BX);TDo=r(V0t,"FunnelForMaskedLM"),V0t.forEach(t),MDo=r(KBe," (Funnel Transformer model)"),KBe.forEach(t),EDo=i(J),Lv=n(J,"LI",{});var ZBe=s(Lv);e_e=n(ZBe,"STRONG",{});var X0t=s(e_e);CDo=r(X0t,"ibert"),X0t.forEach(t),wDo=r(ZBe," \u2014 "),IX=n(ZBe,"A",{href:!0});var z0t=s(IX);ADo=r(z0t,"IBertForMaskedLM"),z0t.forEach(t),LDo=r(ZBe," (I-BERT model)"),ZBe.forEach(t),yDo=i(J),yv=n(J,"LI",{});var eIe=s(yv);o_e=n(eIe,"STRONG",{});var W0t=s(o_e);xDo=r(W0t,"layoutlm"),W0t.forEach(t),$Do=r(eIe," \u2014 "),NX=n(eIe,"A",{href:!0});var Q0t=s(NX);kDo=r(Q0t,"LayoutLMForMaskedLM"),Q0t.forEach(t),SDo=r(eIe," (LayoutLM model)"),eIe.forEach(t),RDo=i(J),xv=n(J,"LI",{});var oIe=s(xv);r_e=n(oIe,"STRONG",{});var U0t=s(r_e);PDo=r(U0t,"longformer"),U0t.forEach(t),BDo=r(oIe," \u2014 "),qX=n(oIe,"A",{href:!0});var H0t=s(qX);IDo=r(H0t,"LongformerForMaskedLM"),H0t.forEach(t),NDo=r(oIe," (Longformer model)"),oIe.forEach(t),qDo=i(J),$v=n(J,"LI",{});var rIe=s($v);t_e=n(rIe,"STRONG",{});var J0t=s(t_e);jDo=r(J0t,"luke"),J0t.forEach(t),DDo=r(rIe," \u2014 "),jX=n(rIe,"A",{href:!0});var Y0t=s(jX);GDo=r(Y0t,"LukeForMaskedLM"),Y0t.forEach(t),ODo=r(rIe," (LUKE model)"),rIe.forEach(t),VDo=i(J),kv=n(J,"LI",{});var tIe=s(kv);a_e=n(tIe,"STRONG",{});var K0t=s(a_e);XDo=r(K0t,"mbart"),K0t.forEach(t),zDo=r(tIe," \u2014 "),DX=n(tIe,"A",{href:!0});var Z0t=s(DX);WDo=r(Z0t,"MBartForConditionalGeneration"),Z0t.forEach(t),QDo=r(tIe," (mBART model)"),tIe.forEach(t),UDo=i(J),Sv=n(J,"LI",{});var aIe=s(Sv);n_e=n(aIe,"STRONG",{});var ewt=s(n_e);HDo=r(ewt,"megatron-bert"),ewt.forEach(t),JDo=r(aIe," \u2014 "),GX=n(aIe,"A",{href:!0});var owt=s(GX);YDo=r(owt,"MegatronBertForMaskedLM"),owt.forEach(t),KDo=r(aIe," (Megatron-BERT model)"),aIe.forEach(t),ZDo=i(J),Rv=n(J,"LI",{});var nIe=s(Rv);s_e=n(nIe,"STRONG",{});var rwt=s(s_e);eGo=r(rwt,"mobilebert"),rwt.forEach(t),oGo=r(nIe," \u2014 "),OX=n(nIe,"A",{href:!0});var twt=s(OX);rGo=r(twt,"MobileBertForMaskedLM"),twt.forEach(t),tGo=r(nIe," (MobileBERT model)"),nIe.forEach(t),aGo=i(J),Pv=n(J,"LI",{});var sIe=s(Pv);l_e=n(sIe,"STRONG",{});var awt=s(l_e);nGo=r(awt,"mpnet"),awt.forEach(t),sGo=r(sIe," \u2014 "),VX=n(sIe,"A",{href:!0});var nwt=s(VX);lGo=r(nwt,"MPNetForMaskedLM"),nwt.forEach(t),iGo=r(sIe," (MPNet model)"),sIe.forEach(t),dGo=i(J),Bv=n(J,"LI",{});var lIe=s(Bv);i_e=n(lIe,"STRONG",{});var swt=s(i_e);cGo=r(swt,"mvp"),swt.forEach(t),mGo=r(lIe," \u2014 "),XX=n(lIe,"A",{href:!0});var lwt=s(XX);fGo=r(lwt,"MvpForConditionalGeneration"),lwt.forEach(t),gGo=r(lIe," (MVP model)"),lIe.forEach(t),hGo=i(J),Iv=n(J,"LI",{});var iIe=s(Iv);d_e=n(iIe,"STRONG",{});var iwt=s(d_e);uGo=r(iwt,"nezha"),iwt.forEach(t),pGo=r(iIe," \u2014 "),zX=n(iIe,"A",{href:!0});var dwt=s(zX);_Go=r(dwt,"NezhaForMaskedLM"),dwt.forEach(t),bGo=r(iIe," (Nezha model)"),iIe.forEach(t),vGo=i(J),Nv=n(J,"LI",{});var dIe=s(Nv);c_e=n(dIe,"STRONG",{});var cwt=s(c_e);FGo=r(cwt,"nystromformer"),cwt.forEach(t),TGo=r(dIe," \u2014 "),WX=n(dIe,"A",{href:!0});var mwt=s(WX);MGo=r(mwt,"NystromformerForMaskedLM"),mwt.forEach(t),EGo=r(dIe," (Nystr\xF6mformer model)"),dIe.forEach(t),CGo=i(J),qv=n(J,"LI",{});var cIe=s(qv);m_e=n(cIe,"STRONG",{});var fwt=s(m_e);wGo=r(fwt,"perceiver"),fwt.forEach(t),AGo=r(cIe," \u2014 "),QX=n(cIe,"A",{href:!0});var gwt=s(QX);LGo=r(gwt,"PerceiverForMaskedLM"),gwt.forEach(t),yGo=r(cIe," (Perceiver model)"),cIe.forEach(t),xGo=i(J),jv=n(J,"LI",{});var mIe=s(jv);f_e=n(mIe,"STRONG",{});var hwt=s(f_e);$Go=r(hwt,"qdqbert"),hwt.forEach(t),kGo=r(mIe," \u2014 "),UX=n(mIe,"A",{href:!0});var uwt=s(UX);SGo=r(uwt,"QDQBertForMaskedLM"),uwt.forEach(t),RGo=r(mIe," (QDQBert model)"),mIe.forEach(t),PGo=i(J),Dv=n(J,"LI",{});var fIe=s(Dv);g_e=n(fIe,"STRONG",{});var pwt=s(g_e);BGo=r(pwt,"reformer"),pwt.forEach(t),IGo=r(fIe," \u2014 "),HX=n(fIe,"A",{href:!0});var _wt=s(HX);NGo=r(_wt,"ReformerForMaskedLM"),_wt.forEach(t),qGo=r(fIe," (Reformer model)"),fIe.forEach(t),jGo=i(J),Gv=n(J,"LI",{});var gIe=s(Gv);h_e=n(gIe,"STRONG",{});var bwt=s(h_e);DGo=r(bwt,"rembert"),bwt.forEach(t),GGo=r(gIe," \u2014 "),JX=n(gIe,"A",{href:!0});var vwt=s(JX);OGo=r(vwt,"RemBertForMaskedLM"),vwt.forEach(t),VGo=r(gIe," (RemBERT model)"),gIe.forEach(t),XGo=i(J),Ov=n(J,"LI",{});var hIe=s(Ov);u_e=n(hIe,"STRONG",{});var Fwt=s(u_e);zGo=r(Fwt,"roberta"),Fwt.forEach(t),WGo=r(hIe," \u2014 "),YX=n(hIe,"A",{href:!0});var Twt=s(YX);QGo=r(Twt,"RobertaForMaskedLM"),Twt.forEach(t),UGo=r(hIe," (RoBERTa model)"),hIe.forEach(t),HGo=i(J),Vv=n(J,"LI",{});var uIe=s(Vv);p_e=n(uIe,"STRONG",{});var Mwt=s(p_e);JGo=r(Mwt,"roformer"),Mwt.forEach(t),YGo=r(uIe," \u2014 "),KX=n(uIe,"A",{href:!0});var Ewt=s(KX);KGo=r(Ewt,"RoFormerForMaskedLM"),Ewt.forEach(t),ZGo=r(uIe," (RoFormer model)"),uIe.forEach(t),eOo=i(J),Xv=n(J,"LI",{});var pIe=s(Xv);__e=n(pIe,"STRONG",{});var Cwt=s(__e);oOo=r(Cwt,"squeezebert"),Cwt.forEach(t),rOo=r(pIe," \u2014 "),ZX=n(pIe,"A",{href:!0});var wwt=s(ZX);tOo=r(wwt,"SqueezeBertForMaskedLM"),wwt.forEach(t),aOo=r(pIe," (SqueezeBERT model)"),pIe.forEach(t),nOo=i(J),zv=n(J,"LI",{});var _Ie=s(zv);b_e=n(_Ie,"STRONG",{});var Awt=s(b_e);sOo=r(Awt,"tapas"),Awt.forEach(t),lOo=r(_Ie," \u2014 "),ez=n(_Ie,"A",{href:!0});var Lwt=s(ez);iOo=r(Lwt,"TapasForMaskedLM"),Lwt.forEach(t),dOo=r(_Ie," (TAPAS model)"),_Ie.forEach(t),cOo=i(J),Wv=n(J,"LI",{});var bIe=s(Wv);v_e=n(bIe,"STRONG",{});var ywt=s(v_e);mOo=r(ywt,"wav2vec2"),ywt.forEach(t),fOo=r(bIe," \u2014 "),F_e=n(bIe,"CODE",{});var xwt=s(F_e);gOo=r(xwt,"Wav2Vec2ForMaskedLM"),xwt.forEach(t),hOo=r(bIe," (Wav2Vec2 model)"),bIe.forEach(t),uOo=i(J),Qv=n(J,"LI",{});var vIe=s(Qv);T_e=n(vIe,"STRONG",{});var $wt=s(T_e);pOo=r($wt,"xlm"),$wt.forEach(t),_Oo=r(vIe," \u2014 "),oz=n(vIe,"A",{href:!0});var kwt=s(oz);bOo=r(kwt,"XLMWithLMHeadModel"),kwt.forEach(t),vOo=r(vIe," (XLM model)"),vIe.forEach(t),FOo=i(J),Uv=n(J,"LI",{});var FIe=s(Uv);M_e=n(FIe,"STRONG",{});var Swt=s(M_e);TOo=r(Swt,"xlm-roberta"),Swt.forEach(t),MOo=r(FIe," \u2014 "),rz=n(FIe,"A",{href:!0});var Rwt=s(rz);EOo=r(Rwt,"XLMRobertaForMaskedLM"),Rwt.forEach(t),COo=r(FIe," (XLM-RoBERTa model)"),FIe.forEach(t),wOo=i(J),Hv=n(J,"LI",{});var TIe=s(Hv);E_e=n(TIe,"STRONG",{});var Pwt=s(E_e);AOo=r(Pwt,"xlm-roberta-xl"),Pwt.forEach(t),LOo=r(TIe," \u2014 "),tz=n(TIe,"A",{href:!0});var Bwt=s(tz);yOo=r(Bwt,"XLMRobertaXLForMaskedLM"),Bwt.forEach(t),xOo=r(TIe," (XLM-RoBERTa-XL model)"),TIe.forEach(t),$Oo=i(J),Jv=n(J,"LI",{});var MIe=s(Jv);C_e=n(MIe,"STRONG",{});var Iwt=s(C_e);kOo=r(Iwt,"yoso"),Iwt.forEach(t),SOo=r(MIe," \u2014 "),az=n(MIe,"A",{href:!0});var Nwt=s(az);ROo=r(Nwt,"YosoForMaskedLM"),Nwt.forEach(t),POo=r(MIe," (YOSO model)"),MIe.forEach(t),J.forEach(t),BOo=i(pa),Yv=n(pa,"P",{});var EIe=s(Yv);IOo=r(EIe,"The model is set in evaluation mode by default using "),w_e=n(EIe,"CODE",{});var qwt=s(w_e);NOo=r(qwt,"model.eval()"),qwt.forEach(t),qOo=r(EIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A_e=n(EIe,"CODE",{});var jwt=s(A_e);jOo=r(jwt,"model.train()"),jwt.forEach(t),EIe.forEach(t),DOo=i(pa),T(Kv.$$.fragment,pa),pa.forEach(t),_l.forEach(t),zQe=i(m),hd=n(m,"H2",{class:!0});var oJe=s(hd);Zv=n(oJe,"A",{id:!0,class:!0,href:!0});var Dwt=s(Zv);L_e=n(Dwt,"SPAN",{});var Gwt=s(L_e);T(o9.$$.fragment,Gwt),Gwt.forEach(t),Dwt.forEach(t),GOo=i(oJe),y_e=n(oJe,"SPAN",{});var Owt=s(y_e);OOo=r(Owt,"AutoModelForSeq2SeqLM"),Owt.forEach(t),oJe.forEach(t),WQe=i(m),Io=n(m,"DIV",{class:!0});var bl=s(Io);T(r9.$$.fragment,bl),VOo=i(bl),ud=n(bl,"P",{});var Dae=s(ud);XOo=r(Dae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nz=n(Dae,"A",{href:!0});var Vwt=s(nz);zOo=r(Vwt,"from_pretrained()"),Vwt.forEach(t),WOo=r(Dae," class method or the "),sz=n(Dae,"A",{href:!0});var Xwt=s(sz);QOo=r(Xwt,"from_config()"),Xwt.forEach(t),UOo=r(Dae,` class
method.`),Dae.forEach(t),HOo=i(bl),t9=n(bl,"P",{});var rJe=s(t9);JOo=r(rJe,"This class cannot be instantiated directly using "),x_e=n(rJe,"CODE",{});var zwt=s(x_e);YOo=r(zwt,"__init__()"),zwt.forEach(t),KOo=r(rJe," (throws an error)."),rJe.forEach(t),ZOo=i(bl),pt=n(bl,"DIV",{class:!0});var pL=s(pt);T(a9.$$.fragment,pL),eVo=i(pL),$_e=n(pL,"P",{});var Wwt=s($_e);oVo=r(Wwt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Wwt.forEach(t),rVo=i(pL),pd=n(pL,"P",{});var Gae=s(pd);tVo=r(Gae,`Note:
Loading a model from its configuration file does `),k_e=n(Gae,"STRONG",{});var Qwt=s(k_e);aVo=r(Qwt,"not"),Qwt.forEach(t),nVo=r(Gae,` load the model weights. It only affects the
model\u2019s configuration. Use `),lz=n(Gae,"A",{href:!0});var Uwt=s(lz);sVo=r(Uwt,"from_pretrained()"),Uwt.forEach(t),lVo=r(Gae," to load the model weights."),Gae.forEach(t),iVo=i(pL),T(e1.$$.fragment,pL),pL.forEach(t),dVo=i(bl),oo=n(bl,"DIV",{class:!0});var _a=s(oo);T(n9.$$.fragment,_a),cVo=i(_a),S_e=n(_a,"P",{});var Hwt=s(S_e);mVo=r(Hwt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Hwt.forEach(t),fVo=i(_a),Qa=n(_a,"P",{});var _L=s(Qa);gVo=r(_L,"The model class to instantiate is selected based on the "),R_e=n(_L,"CODE",{});var Jwt=s(R_e);hVo=r(Jwt,"model_type"),Jwt.forEach(t),uVo=r(_L,` property of the config object (either
passed as an argument or loaded from `),P_e=n(_L,"CODE",{});var Ywt=s(P_e);pVo=r(Ywt,"pretrained_model_name_or_path"),Ywt.forEach(t),_Vo=r(_L,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B_e=n(_L,"CODE",{});var Kwt=s(B_e);bVo=r(Kwt,"pretrained_model_name_or_path"),Kwt.forEach(t),vVo=r(_L,":"),_L.forEach(t),FVo=i(_a),fe=n(_a,"UL",{});var _e=s(fe);o1=n(_e,"LI",{});var CIe=s(o1);I_e=n(CIe,"STRONG",{});var Zwt=s(I_e);TVo=r(Zwt,"bart"),Zwt.forEach(t),MVo=r(CIe," \u2014 "),iz=n(CIe,"A",{href:!0});var e6t=s(iz);EVo=r(e6t,"BartForConditionalGeneration"),e6t.forEach(t),CVo=r(CIe," (BART model)"),CIe.forEach(t),wVo=i(_e),r1=n(_e,"LI",{});var wIe=s(r1);N_e=n(wIe,"STRONG",{});var o6t=s(N_e);AVo=r(o6t,"bigbird_pegasus"),o6t.forEach(t),LVo=r(wIe," \u2014 "),dz=n(wIe,"A",{href:!0});var r6t=s(dz);yVo=r(r6t,"BigBirdPegasusForConditionalGeneration"),r6t.forEach(t),xVo=r(wIe," (BigBird-Pegasus model)"),wIe.forEach(t),$Vo=i(_e),t1=n(_e,"LI",{});var AIe=s(t1);q_e=n(AIe,"STRONG",{});var t6t=s(q_e);kVo=r(t6t,"blenderbot"),t6t.forEach(t),SVo=r(AIe," \u2014 "),cz=n(AIe,"A",{href:!0});var a6t=s(cz);RVo=r(a6t,"BlenderbotForConditionalGeneration"),a6t.forEach(t),PVo=r(AIe," (Blenderbot model)"),AIe.forEach(t),BVo=i(_e),a1=n(_e,"LI",{});var LIe=s(a1);j_e=n(LIe,"STRONG",{});var n6t=s(j_e);IVo=r(n6t,"blenderbot-small"),n6t.forEach(t),NVo=r(LIe," \u2014 "),mz=n(LIe,"A",{href:!0});var s6t=s(mz);qVo=r(s6t,"BlenderbotSmallForConditionalGeneration"),s6t.forEach(t),jVo=r(LIe," (BlenderbotSmall model)"),LIe.forEach(t),DVo=i(_e),n1=n(_e,"LI",{});var yIe=s(n1);D_e=n(yIe,"STRONG",{});var l6t=s(D_e);GVo=r(l6t,"encoder-decoder"),l6t.forEach(t),OVo=r(yIe," \u2014 "),fz=n(yIe,"A",{href:!0});var i6t=s(fz);VVo=r(i6t,"EncoderDecoderModel"),i6t.forEach(t),XVo=r(yIe," (Encoder decoder model)"),yIe.forEach(t),zVo=i(_e),s1=n(_e,"LI",{});var xIe=s(s1);G_e=n(xIe,"STRONG",{});var d6t=s(G_e);WVo=r(d6t,"fsmt"),d6t.forEach(t),QVo=r(xIe," \u2014 "),gz=n(xIe,"A",{href:!0});var c6t=s(gz);UVo=r(c6t,"FSMTForConditionalGeneration"),c6t.forEach(t),HVo=r(xIe," (FairSeq Machine-Translation model)"),xIe.forEach(t),JVo=i(_e),l1=n(_e,"LI",{});var $Ie=s(l1);O_e=n($Ie,"STRONG",{});var m6t=s(O_e);YVo=r(m6t,"led"),m6t.forEach(t),KVo=r($Ie," \u2014 "),hz=n($Ie,"A",{href:!0});var f6t=s(hz);ZVo=r(f6t,"LEDForConditionalGeneration"),f6t.forEach(t),eXo=r($Ie," (LED model)"),$Ie.forEach(t),oXo=i(_e),i1=n(_e,"LI",{});var kIe=s(i1);V_e=n(kIe,"STRONG",{});var g6t=s(V_e);rXo=r(g6t,"longt5"),g6t.forEach(t),tXo=r(kIe," \u2014 "),uz=n(kIe,"A",{href:!0});var h6t=s(uz);aXo=r(h6t,"LongT5ForConditionalGeneration"),h6t.forEach(t),nXo=r(kIe," (LongT5 model)"),kIe.forEach(t),sXo=i(_e),d1=n(_e,"LI",{});var SIe=s(d1);X_e=n(SIe,"STRONG",{});var u6t=s(X_e);lXo=r(u6t,"m2m_100"),u6t.forEach(t),iXo=r(SIe," \u2014 "),pz=n(SIe,"A",{href:!0});var p6t=s(pz);dXo=r(p6t,"M2M100ForConditionalGeneration"),p6t.forEach(t),cXo=r(SIe," (M2M100 model)"),SIe.forEach(t),mXo=i(_e),c1=n(_e,"LI",{});var RIe=s(c1);z_e=n(RIe,"STRONG",{});var _6t=s(z_e);fXo=r(_6t,"marian"),_6t.forEach(t),gXo=r(RIe," \u2014 "),_z=n(RIe,"A",{href:!0});var b6t=s(_z);hXo=r(b6t,"MarianMTModel"),b6t.forEach(t),uXo=r(RIe," (Marian model)"),RIe.forEach(t),pXo=i(_e),m1=n(_e,"LI",{});var PIe=s(m1);W_e=n(PIe,"STRONG",{});var v6t=s(W_e);_Xo=r(v6t,"mbart"),v6t.forEach(t),bXo=r(PIe," \u2014 "),bz=n(PIe,"A",{href:!0});var F6t=s(bz);vXo=r(F6t,"MBartForConditionalGeneration"),F6t.forEach(t),FXo=r(PIe," (mBART model)"),PIe.forEach(t),TXo=i(_e),f1=n(_e,"LI",{});var BIe=s(f1);Q_e=n(BIe,"STRONG",{});var T6t=s(Q_e);MXo=r(T6t,"mt5"),T6t.forEach(t),EXo=r(BIe," \u2014 "),vz=n(BIe,"A",{href:!0});var M6t=s(vz);CXo=r(M6t,"MT5ForConditionalGeneration"),M6t.forEach(t),wXo=r(BIe," (MT5 model)"),BIe.forEach(t),AXo=i(_e),g1=n(_e,"LI",{});var IIe=s(g1);U_e=n(IIe,"STRONG",{});var E6t=s(U_e);LXo=r(E6t,"mvp"),E6t.forEach(t),yXo=r(IIe," \u2014 "),Fz=n(IIe,"A",{href:!0});var C6t=s(Fz);xXo=r(C6t,"MvpForConditionalGeneration"),C6t.forEach(t),$Xo=r(IIe," (MVP model)"),IIe.forEach(t),kXo=i(_e),h1=n(_e,"LI",{});var NIe=s(h1);H_e=n(NIe,"STRONG",{});var w6t=s(H_e);SXo=r(w6t,"nllb"),w6t.forEach(t),RXo=r(NIe," \u2014 "),Tz=n(NIe,"A",{href:!0});var A6t=s(Tz);PXo=r(A6t,"M2M100ForConditionalGeneration"),A6t.forEach(t),BXo=r(NIe," (NLLB model)"),NIe.forEach(t),IXo=i(_e),u1=n(_e,"LI",{});var qIe=s(u1);J_e=n(qIe,"STRONG",{});var L6t=s(J_e);NXo=r(L6t,"pegasus"),L6t.forEach(t),qXo=r(qIe," \u2014 "),Mz=n(qIe,"A",{href:!0});var y6t=s(Mz);jXo=r(y6t,"PegasusForConditionalGeneration"),y6t.forEach(t),DXo=r(qIe," (Pegasus model)"),qIe.forEach(t),GXo=i(_e),p1=n(_e,"LI",{});var jIe=s(p1);Y_e=n(jIe,"STRONG",{});var x6t=s(Y_e);OXo=r(x6t,"plbart"),x6t.forEach(t),VXo=r(jIe," \u2014 "),Ez=n(jIe,"A",{href:!0});var $6t=s(Ez);XXo=r($6t,"PLBartForConditionalGeneration"),$6t.forEach(t),zXo=r(jIe," (PLBart model)"),jIe.forEach(t),WXo=i(_e),_1=n(_e,"LI",{});var DIe=s(_1);K_e=n(DIe,"STRONG",{});var k6t=s(K_e);QXo=r(k6t,"prophetnet"),k6t.forEach(t),UXo=r(DIe," \u2014 "),Cz=n(DIe,"A",{href:!0});var S6t=s(Cz);HXo=r(S6t,"ProphetNetForConditionalGeneration"),S6t.forEach(t),JXo=r(DIe," (ProphetNet model)"),DIe.forEach(t),YXo=i(_e),b1=n(_e,"LI",{});var GIe=s(b1);Z_e=n(GIe,"STRONG",{});var R6t=s(Z_e);KXo=r(R6t,"t5"),R6t.forEach(t),ZXo=r(GIe," \u2014 "),wz=n(GIe,"A",{href:!0});var P6t=s(wz);ezo=r(P6t,"T5ForConditionalGeneration"),P6t.forEach(t),ozo=r(GIe," (T5 model)"),GIe.forEach(t),rzo=i(_e),v1=n(_e,"LI",{});var OIe=s(v1);e2e=n(OIe,"STRONG",{});var B6t=s(e2e);tzo=r(B6t,"xlm-prophetnet"),B6t.forEach(t),azo=r(OIe," \u2014 "),Az=n(OIe,"A",{href:!0});var I6t=s(Az);nzo=r(I6t,"XLMProphetNetForConditionalGeneration"),I6t.forEach(t),szo=r(OIe," (XLM-ProphetNet model)"),OIe.forEach(t),_e.forEach(t),lzo=i(_a),F1=n(_a,"P",{});var VIe=s(F1);izo=r(VIe,"The model is set in evaluation mode by default using "),o2e=n(VIe,"CODE",{});var N6t=s(o2e);dzo=r(N6t,"model.eval()"),N6t.forEach(t),czo=r(VIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r2e=n(VIe,"CODE",{});var q6t=s(r2e);mzo=r(q6t,"model.train()"),q6t.forEach(t),VIe.forEach(t),fzo=i(_a),T(T1.$$.fragment,_a),_a.forEach(t),bl.forEach(t),QQe=i(m),_d=n(m,"H2",{class:!0});var tJe=s(_d);M1=n(tJe,"A",{id:!0,class:!0,href:!0});var j6t=s(M1);t2e=n(j6t,"SPAN",{});var D6t=s(t2e);T(s9.$$.fragment,D6t),D6t.forEach(t),j6t.forEach(t),gzo=i(tJe),a2e=n(tJe,"SPAN",{});var G6t=s(a2e);hzo=r(G6t,"AutoModelForSequenceClassification"),G6t.forEach(t),tJe.forEach(t),UQe=i(m),No=n(m,"DIV",{class:!0});var vl=s(No);T(l9.$$.fragment,vl),uzo=i(vl),bd=n(vl,"P",{});var Oae=s(bd);pzo=r(Oae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Lz=n(Oae,"A",{href:!0});var O6t=s(Lz);_zo=r(O6t,"from_pretrained()"),O6t.forEach(t),bzo=r(Oae," class method or the "),yz=n(Oae,"A",{href:!0});var V6t=s(yz);vzo=r(V6t,"from_config()"),V6t.forEach(t),Fzo=r(Oae,` class
method.`),Oae.forEach(t),Tzo=i(vl),i9=n(vl,"P",{});var aJe=s(i9);Mzo=r(aJe,"This class cannot be instantiated directly using "),n2e=n(aJe,"CODE",{});var X6t=s(n2e);Ezo=r(X6t,"__init__()"),X6t.forEach(t),Czo=r(aJe," (throws an error)."),aJe.forEach(t),wzo=i(vl),_t=n(vl,"DIV",{class:!0});var bL=s(_t);T(d9.$$.fragment,bL),Azo=i(bL),s2e=n(bL,"P",{});var z6t=s(s2e);Lzo=r(z6t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),z6t.forEach(t),yzo=i(bL),vd=n(bL,"P",{});var Vae=s(vd);xzo=r(Vae,`Note:
Loading a model from its configuration file does `),l2e=n(Vae,"STRONG",{});var W6t=s(l2e);$zo=r(W6t,"not"),W6t.forEach(t),kzo=r(Vae,` load the model weights. It only affects the
model\u2019s configuration. Use `),xz=n(Vae,"A",{href:!0});var Q6t=s(xz);Szo=r(Q6t,"from_pretrained()"),Q6t.forEach(t),Rzo=r(Vae," to load the model weights."),Vae.forEach(t),Pzo=i(bL),T(E1.$$.fragment,bL),bL.forEach(t),Bzo=i(vl),ro=n(vl,"DIV",{class:!0});var ba=s(ro);T(c9.$$.fragment,ba),Izo=i(ba),i2e=n(ba,"P",{});var U6t=s(i2e);Nzo=r(U6t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),U6t.forEach(t),qzo=i(ba),Ua=n(ba,"P",{});var vL=s(Ua);jzo=r(vL,"The model class to instantiate is selected based on the "),d2e=n(vL,"CODE",{});var H6t=s(d2e);Dzo=r(H6t,"model_type"),H6t.forEach(t),Gzo=r(vL,` property of the config object (either
passed as an argument or loaded from `),c2e=n(vL,"CODE",{});var J6t=s(c2e);Ozo=r(J6t,"pretrained_model_name_or_path"),J6t.forEach(t),Vzo=r(vL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m2e=n(vL,"CODE",{});var Y6t=s(m2e);Xzo=r(Y6t,"pretrained_model_name_or_path"),Y6t.forEach(t),zzo=r(vL,":"),vL.forEach(t),Wzo=i(ba),N=n(ba,"UL",{});var j=s(N);C1=n(j,"LI",{});var XIe=s(C1);f2e=n(XIe,"STRONG",{});var K6t=s(f2e);Qzo=r(K6t,"albert"),K6t.forEach(t),Uzo=r(XIe," \u2014 "),$z=n(XIe,"A",{href:!0});var Z6t=s($z);Hzo=r(Z6t,"AlbertForSequenceClassification"),Z6t.forEach(t),Jzo=r(XIe," (ALBERT model)"),XIe.forEach(t),Yzo=i(j),w1=n(j,"LI",{});var zIe=s(w1);g2e=n(zIe,"STRONG",{});var eAt=s(g2e);Kzo=r(eAt,"bart"),eAt.forEach(t),Zzo=r(zIe," \u2014 "),kz=n(zIe,"A",{href:!0});var oAt=s(kz);eWo=r(oAt,"BartForSequenceClassification"),oAt.forEach(t),oWo=r(zIe," (BART model)"),zIe.forEach(t),rWo=i(j),A1=n(j,"LI",{});var WIe=s(A1);h2e=n(WIe,"STRONG",{});var rAt=s(h2e);tWo=r(rAt,"bert"),rAt.forEach(t),aWo=r(WIe," \u2014 "),Sz=n(WIe,"A",{href:!0});var tAt=s(Sz);nWo=r(tAt,"BertForSequenceClassification"),tAt.forEach(t),sWo=r(WIe," (BERT model)"),WIe.forEach(t),lWo=i(j),L1=n(j,"LI",{});var QIe=s(L1);u2e=n(QIe,"STRONG",{});var aAt=s(u2e);iWo=r(aAt,"big_bird"),aAt.forEach(t),dWo=r(QIe," \u2014 "),Rz=n(QIe,"A",{href:!0});var nAt=s(Rz);cWo=r(nAt,"BigBirdForSequenceClassification"),nAt.forEach(t),mWo=r(QIe," (BigBird model)"),QIe.forEach(t),fWo=i(j),y1=n(j,"LI",{});var UIe=s(y1);p2e=n(UIe,"STRONG",{});var sAt=s(p2e);gWo=r(sAt,"bigbird_pegasus"),sAt.forEach(t),hWo=r(UIe," \u2014 "),Pz=n(UIe,"A",{href:!0});var lAt=s(Pz);uWo=r(lAt,"BigBirdPegasusForSequenceClassification"),lAt.forEach(t),pWo=r(UIe," (BigBird-Pegasus model)"),UIe.forEach(t),_Wo=i(j),x1=n(j,"LI",{});var HIe=s(x1);_2e=n(HIe,"STRONG",{});var iAt=s(_2e);bWo=r(iAt,"bloom"),iAt.forEach(t),vWo=r(HIe," \u2014 "),Bz=n(HIe,"A",{href:!0});var dAt=s(Bz);FWo=r(dAt,"BloomForSequenceClassification"),dAt.forEach(t),TWo=r(HIe," (BLOOM model)"),HIe.forEach(t),MWo=i(j),$1=n(j,"LI",{});var JIe=s($1);b2e=n(JIe,"STRONG",{});var cAt=s(b2e);EWo=r(cAt,"camembert"),cAt.forEach(t),CWo=r(JIe," \u2014 "),Iz=n(JIe,"A",{href:!0});var mAt=s(Iz);wWo=r(mAt,"CamembertForSequenceClassification"),mAt.forEach(t),AWo=r(JIe," (CamemBERT model)"),JIe.forEach(t),LWo=i(j),k1=n(j,"LI",{});var YIe=s(k1);v2e=n(YIe,"STRONG",{});var fAt=s(v2e);yWo=r(fAt,"canine"),fAt.forEach(t),xWo=r(YIe," \u2014 "),Nz=n(YIe,"A",{href:!0});var gAt=s(Nz);$Wo=r(gAt,"CanineForSequenceClassification"),gAt.forEach(t),kWo=r(YIe," (CANINE model)"),YIe.forEach(t),SWo=i(j),S1=n(j,"LI",{});var KIe=s(S1);F2e=n(KIe,"STRONG",{});var hAt=s(F2e);RWo=r(hAt,"convbert"),hAt.forEach(t),PWo=r(KIe," \u2014 "),qz=n(KIe,"A",{href:!0});var uAt=s(qz);BWo=r(uAt,"ConvBertForSequenceClassification"),uAt.forEach(t),IWo=r(KIe," (ConvBERT model)"),KIe.forEach(t),NWo=i(j),R1=n(j,"LI",{});var ZIe=s(R1);T2e=n(ZIe,"STRONG",{});var pAt=s(T2e);qWo=r(pAt,"ctrl"),pAt.forEach(t),jWo=r(ZIe," \u2014 "),jz=n(ZIe,"A",{href:!0});var _At=s(jz);DWo=r(_At,"CTRLForSequenceClassification"),_At.forEach(t),GWo=r(ZIe," (CTRL model)"),ZIe.forEach(t),OWo=i(j),P1=n(j,"LI",{});var eNe=s(P1);M2e=n(eNe,"STRONG",{});var bAt=s(M2e);VWo=r(bAt,"data2vec-text"),bAt.forEach(t),XWo=r(eNe," \u2014 "),Dz=n(eNe,"A",{href:!0});var vAt=s(Dz);zWo=r(vAt,"Data2VecTextForSequenceClassification"),vAt.forEach(t),WWo=r(eNe," (Data2VecText model)"),eNe.forEach(t),QWo=i(j),B1=n(j,"LI",{});var oNe=s(B1);E2e=n(oNe,"STRONG",{});var FAt=s(E2e);UWo=r(FAt,"deberta"),FAt.forEach(t),HWo=r(oNe," \u2014 "),Gz=n(oNe,"A",{href:!0});var TAt=s(Gz);JWo=r(TAt,"DebertaForSequenceClassification"),TAt.forEach(t),YWo=r(oNe," (DeBERTa model)"),oNe.forEach(t),KWo=i(j),I1=n(j,"LI",{});var rNe=s(I1);C2e=n(rNe,"STRONG",{});var MAt=s(C2e);ZWo=r(MAt,"deberta-v2"),MAt.forEach(t),eQo=r(rNe," \u2014 "),Oz=n(rNe,"A",{href:!0});var EAt=s(Oz);oQo=r(EAt,"DebertaV2ForSequenceClassification"),EAt.forEach(t),rQo=r(rNe," (DeBERTa-v2 model)"),rNe.forEach(t),tQo=i(j),N1=n(j,"LI",{});var tNe=s(N1);w2e=n(tNe,"STRONG",{});var CAt=s(w2e);aQo=r(CAt,"distilbert"),CAt.forEach(t),nQo=r(tNe," \u2014 "),Vz=n(tNe,"A",{href:!0});var wAt=s(Vz);sQo=r(wAt,"DistilBertForSequenceClassification"),wAt.forEach(t),lQo=r(tNe," (DistilBERT model)"),tNe.forEach(t),iQo=i(j),q1=n(j,"LI",{});var aNe=s(q1);A2e=n(aNe,"STRONG",{});var AAt=s(A2e);dQo=r(AAt,"electra"),AAt.forEach(t),cQo=r(aNe," \u2014 "),Xz=n(aNe,"A",{href:!0});var LAt=s(Xz);mQo=r(LAt,"ElectraForSequenceClassification"),LAt.forEach(t),fQo=r(aNe," (ELECTRA model)"),aNe.forEach(t),gQo=i(j),j1=n(j,"LI",{});var nNe=s(j1);L2e=n(nNe,"STRONG",{});var yAt=s(L2e);hQo=r(yAt,"flaubert"),yAt.forEach(t),uQo=r(nNe," \u2014 "),zz=n(nNe,"A",{href:!0});var xAt=s(zz);pQo=r(xAt,"FlaubertForSequenceClassification"),xAt.forEach(t),_Qo=r(nNe," (FlauBERT model)"),nNe.forEach(t),bQo=i(j),D1=n(j,"LI",{});var sNe=s(D1);y2e=n(sNe,"STRONG",{});var $At=s(y2e);vQo=r($At,"fnet"),$At.forEach(t),FQo=r(sNe," \u2014 "),Wz=n(sNe,"A",{href:!0});var kAt=s(Wz);TQo=r(kAt,"FNetForSequenceClassification"),kAt.forEach(t),MQo=r(sNe," (FNet model)"),sNe.forEach(t),EQo=i(j),G1=n(j,"LI",{});var lNe=s(G1);x2e=n(lNe,"STRONG",{});var SAt=s(x2e);CQo=r(SAt,"funnel"),SAt.forEach(t),wQo=r(lNe," \u2014 "),Qz=n(lNe,"A",{href:!0});var RAt=s(Qz);AQo=r(RAt,"FunnelForSequenceClassification"),RAt.forEach(t),LQo=r(lNe," (Funnel Transformer model)"),lNe.forEach(t),yQo=i(j),O1=n(j,"LI",{});var iNe=s(O1);$2e=n(iNe,"STRONG",{});var PAt=s($2e);xQo=r(PAt,"gpt2"),PAt.forEach(t),$Qo=r(iNe," \u2014 "),Uz=n(iNe,"A",{href:!0});var BAt=s(Uz);kQo=r(BAt,"GPT2ForSequenceClassification"),BAt.forEach(t),SQo=r(iNe," (OpenAI GPT-2 model)"),iNe.forEach(t),RQo=i(j),V1=n(j,"LI",{});var dNe=s(V1);k2e=n(dNe,"STRONG",{});var IAt=s(k2e);PQo=r(IAt,"gpt_neo"),IAt.forEach(t),BQo=r(dNe," \u2014 "),Hz=n(dNe,"A",{href:!0});var NAt=s(Hz);IQo=r(NAt,"GPTNeoForSequenceClassification"),NAt.forEach(t),NQo=r(dNe," (GPT Neo model)"),dNe.forEach(t),qQo=i(j),X1=n(j,"LI",{});var cNe=s(X1);S2e=n(cNe,"STRONG",{});var qAt=s(S2e);jQo=r(qAt,"gptj"),qAt.forEach(t),DQo=r(cNe," \u2014 "),Jz=n(cNe,"A",{href:!0});var jAt=s(Jz);GQo=r(jAt,"GPTJForSequenceClassification"),jAt.forEach(t),OQo=r(cNe," (GPT-J model)"),cNe.forEach(t),VQo=i(j),z1=n(j,"LI",{});var mNe=s(z1);R2e=n(mNe,"STRONG",{});var DAt=s(R2e);XQo=r(DAt,"ibert"),DAt.forEach(t),zQo=r(mNe," \u2014 "),Yz=n(mNe,"A",{href:!0});var GAt=s(Yz);WQo=r(GAt,"IBertForSequenceClassification"),GAt.forEach(t),QQo=r(mNe," (I-BERT model)"),mNe.forEach(t),UQo=i(j),W1=n(j,"LI",{});var fNe=s(W1);P2e=n(fNe,"STRONG",{});var OAt=s(P2e);HQo=r(OAt,"layoutlm"),OAt.forEach(t),JQo=r(fNe," \u2014 "),Kz=n(fNe,"A",{href:!0});var VAt=s(Kz);YQo=r(VAt,"LayoutLMForSequenceClassification"),VAt.forEach(t),KQo=r(fNe," (LayoutLM model)"),fNe.forEach(t),ZQo=i(j),Q1=n(j,"LI",{});var gNe=s(Q1);B2e=n(gNe,"STRONG",{});var XAt=s(B2e);eUo=r(XAt,"layoutlmv2"),XAt.forEach(t),oUo=r(gNe," \u2014 "),Zz=n(gNe,"A",{href:!0});var zAt=s(Zz);rUo=r(zAt,"LayoutLMv2ForSequenceClassification"),zAt.forEach(t),tUo=r(gNe," (LayoutLMv2 model)"),gNe.forEach(t),aUo=i(j),U1=n(j,"LI",{});var hNe=s(U1);I2e=n(hNe,"STRONG",{});var WAt=s(I2e);nUo=r(WAt,"layoutlmv3"),WAt.forEach(t),sUo=r(hNe," \u2014 "),eW=n(hNe,"A",{href:!0});var QAt=s(eW);lUo=r(QAt,"LayoutLMv3ForSequenceClassification"),QAt.forEach(t),iUo=r(hNe," (LayoutLMv3 model)"),hNe.forEach(t),dUo=i(j),H1=n(j,"LI",{});var uNe=s(H1);N2e=n(uNe,"STRONG",{});var UAt=s(N2e);cUo=r(UAt,"led"),UAt.forEach(t),mUo=r(uNe," \u2014 "),oW=n(uNe,"A",{href:!0});var HAt=s(oW);fUo=r(HAt,"LEDForSequenceClassification"),HAt.forEach(t),gUo=r(uNe," (LED model)"),uNe.forEach(t),hUo=i(j),J1=n(j,"LI",{});var pNe=s(J1);q2e=n(pNe,"STRONG",{});var JAt=s(q2e);uUo=r(JAt,"longformer"),JAt.forEach(t),pUo=r(pNe," \u2014 "),rW=n(pNe,"A",{href:!0});var YAt=s(rW);_Uo=r(YAt,"LongformerForSequenceClassification"),YAt.forEach(t),bUo=r(pNe," (Longformer model)"),pNe.forEach(t),vUo=i(j),Y1=n(j,"LI",{});var _Ne=s(Y1);j2e=n(_Ne,"STRONG",{});var KAt=s(j2e);FUo=r(KAt,"luke"),KAt.forEach(t),TUo=r(_Ne," \u2014 "),tW=n(_Ne,"A",{href:!0});var ZAt=s(tW);MUo=r(ZAt,"LukeForSequenceClassification"),ZAt.forEach(t),EUo=r(_Ne," (LUKE model)"),_Ne.forEach(t),CUo=i(j),K1=n(j,"LI",{});var bNe=s(K1);D2e=n(bNe,"STRONG",{});var e7t=s(D2e);wUo=r(e7t,"mbart"),e7t.forEach(t),AUo=r(bNe," \u2014 "),aW=n(bNe,"A",{href:!0});var o7t=s(aW);LUo=r(o7t,"MBartForSequenceClassification"),o7t.forEach(t),yUo=r(bNe," (mBART model)"),bNe.forEach(t),xUo=i(j),Z1=n(j,"LI",{});var vNe=s(Z1);G2e=n(vNe,"STRONG",{});var r7t=s(G2e);$Uo=r(r7t,"megatron-bert"),r7t.forEach(t),kUo=r(vNe," \u2014 "),nW=n(vNe,"A",{href:!0});var t7t=s(nW);SUo=r(t7t,"MegatronBertForSequenceClassification"),t7t.forEach(t),RUo=r(vNe," (Megatron-BERT model)"),vNe.forEach(t),PUo=i(j),eF=n(j,"LI",{});var FNe=s(eF);O2e=n(FNe,"STRONG",{});var a7t=s(O2e);BUo=r(a7t,"mobilebert"),a7t.forEach(t),IUo=r(FNe," \u2014 "),sW=n(FNe,"A",{href:!0});var n7t=s(sW);NUo=r(n7t,"MobileBertForSequenceClassification"),n7t.forEach(t),qUo=r(FNe," (MobileBERT model)"),FNe.forEach(t),jUo=i(j),oF=n(j,"LI",{});var TNe=s(oF);V2e=n(TNe,"STRONG",{});var s7t=s(V2e);DUo=r(s7t,"mpnet"),s7t.forEach(t),GUo=r(TNe," \u2014 "),lW=n(TNe,"A",{href:!0});var l7t=s(lW);OUo=r(l7t,"MPNetForSequenceClassification"),l7t.forEach(t),VUo=r(TNe," (MPNet model)"),TNe.forEach(t),XUo=i(j),rF=n(j,"LI",{});var MNe=s(rF);X2e=n(MNe,"STRONG",{});var i7t=s(X2e);zUo=r(i7t,"mvp"),i7t.forEach(t),WUo=r(MNe," \u2014 "),iW=n(MNe,"A",{href:!0});var d7t=s(iW);QUo=r(d7t,"MvpForSequenceClassification"),d7t.forEach(t),UUo=r(MNe," (MVP model)"),MNe.forEach(t),HUo=i(j),tF=n(j,"LI",{});var ENe=s(tF);z2e=n(ENe,"STRONG",{});var c7t=s(z2e);JUo=r(c7t,"nezha"),c7t.forEach(t),YUo=r(ENe," \u2014 "),dW=n(ENe,"A",{href:!0});var m7t=s(dW);KUo=r(m7t,"NezhaForSequenceClassification"),m7t.forEach(t),ZUo=r(ENe," (Nezha model)"),ENe.forEach(t),eHo=i(j),aF=n(j,"LI",{});var CNe=s(aF);W2e=n(CNe,"STRONG",{});var f7t=s(W2e);oHo=r(f7t,"nystromformer"),f7t.forEach(t),rHo=r(CNe," \u2014 "),cW=n(CNe,"A",{href:!0});var g7t=s(cW);tHo=r(g7t,"NystromformerForSequenceClassification"),g7t.forEach(t),aHo=r(CNe," (Nystr\xF6mformer model)"),CNe.forEach(t),nHo=i(j),nF=n(j,"LI",{});var wNe=s(nF);Q2e=n(wNe,"STRONG",{});var h7t=s(Q2e);sHo=r(h7t,"openai-gpt"),h7t.forEach(t),lHo=r(wNe," \u2014 "),mW=n(wNe,"A",{href:!0});var u7t=s(mW);iHo=r(u7t,"OpenAIGPTForSequenceClassification"),u7t.forEach(t),dHo=r(wNe," (OpenAI GPT model)"),wNe.forEach(t),cHo=i(j),sF=n(j,"LI",{});var ANe=s(sF);U2e=n(ANe,"STRONG",{});var p7t=s(U2e);mHo=r(p7t,"opt"),p7t.forEach(t),fHo=r(ANe," \u2014 "),fW=n(ANe,"A",{href:!0});var _7t=s(fW);gHo=r(_7t,"OPTForSequenceClassification"),_7t.forEach(t),hHo=r(ANe," (OPT model)"),ANe.forEach(t),uHo=i(j),lF=n(j,"LI",{});var LNe=s(lF);H2e=n(LNe,"STRONG",{});var b7t=s(H2e);pHo=r(b7t,"perceiver"),b7t.forEach(t),_Ho=r(LNe," \u2014 "),gW=n(LNe,"A",{href:!0});var v7t=s(gW);bHo=r(v7t,"PerceiverForSequenceClassification"),v7t.forEach(t),vHo=r(LNe," (Perceiver model)"),LNe.forEach(t),FHo=i(j),iF=n(j,"LI",{});var yNe=s(iF);J2e=n(yNe,"STRONG",{});var F7t=s(J2e);THo=r(F7t,"plbart"),F7t.forEach(t),MHo=r(yNe," \u2014 "),hW=n(yNe,"A",{href:!0});var T7t=s(hW);EHo=r(T7t,"PLBartForSequenceClassification"),T7t.forEach(t),CHo=r(yNe," (PLBart model)"),yNe.forEach(t),wHo=i(j),dF=n(j,"LI",{});var xNe=s(dF);Y2e=n(xNe,"STRONG",{});var M7t=s(Y2e);AHo=r(M7t,"qdqbert"),M7t.forEach(t),LHo=r(xNe," \u2014 "),uW=n(xNe,"A",{href:!0});var E7t=s(uW);yHo=r(E7t,"QDQBertForSequenceClassification"),E7t.forEach(t),xHo=r(xNe," (QDQBert model)"),xNe.forEach(t),$Ho=i(j),cF=n(j,"LI",{});var $Ne=s(cF);K2e=n($Ne,"STRONG",{});var C7t=s(K2e);kHo=r(C7t,"reformer"),C7t.forEach(t),SHo=r($Ne," \u2014 "),pW=n($Ne,"A",{href:!0});var w7t=s(pW);RHo=r(w7t,"ReformerForSequenceClassification"),w7t.forEach(t),PHo=r($Ne," (Reformer model)"),$Ne.forEach(t),BHo=i(j),mF=n(j,"LI",{});var kNe=s(mF);Z2e=n(kNe,"STRONG",{});var A7t=s(Z2e);IHo=r(A7t,"rembert"),A7t.forEach(t),NHo=r(kNe," \u2014 "),_W=n(kNe,"A",{href:!0});var L7t=s(_W);qHo=r(L7t,"RemBertForSequenceClassification"),L7t.forEach(t),jHo=r(kNe," (RemBERT model)"),kNe.forEach(t),DHo=i(j),fF=n(j,"LI",{});var SNe=s(fF);ebe=n(SNe,"STRONG",{});var y7t=s(ebe);GHo=r(y7t,"roberta"),y7t.forEach(t),OHo=r(SNe," \u2014 "),bW=n(SNe,"A",{href:!0});var x7t=s(bW);VHo=r(x7t,"RobertaForSequenceClassification"),x7t.forEach(t),XHo=r(SNe," (RoBERTa model)"),SNe.forEach(t),zHo=i(j),gF=n(j,"LI",{});var RNe=s(gF);obe=n(RNe,"STRONG",{});var $7t=s(obe);WHo=r($7t,"roformer"),$7t.forEach(t),QHo=r(RNe," \u2014 "),vW=n(RNe,"A",{href:!0});var k7t=s(vW);UHo=r(k7t,"RoFormerForSequenceClassification"),k7t.forEach(t),HHo=r(RNe," (RoFormer model)"),RNe.forEach(t),JHo=i(j),hF=n(j,"LI",{});var PNe=s(hF);rbe=n(PNe,"STRONG",{});var S7t=s(rbe);YHo=r(S7t,"squeezebert"),S7t.forEach(t),KHo=r(PNe," \u2014 "),FW=n(PNe,"A",{href:!0});var R7t=s(FW);ZHo=r(R7t,"SqueezeBertForSequenceClassification"),R7t.forEach(t),eJo=r(PNe," (SqueezeBERT model)"),PNe.forEach(t),oJo=i(j),uF=n(j,"LI",{});var BNe=s(uF);tbe=n(BNe,"STRONG",{});var P7t=s(tbe);rJo=r(P7t,"tapas"),P7t.forEach(t),tJo=r(BNe," \u2014 "),TW=n(BNe,"A",{href:!0});var B7t=s(TW);aJo=r(B7t,"TapasForSequenceClassification"),B7t.forEach(t),nJo=r(BNe," (TAPAS model)"),BNe.forEach(t),sJo=i(j),pF=n(j,"LI",{});var INe=s(pF);abe=n(INe,"STRONG",{});var I7t=s(abe);lJo=r(I7t,"transfo-xl"),I7t.forEach(t),iJo=r(INe," \u2014 "),MW=n(INe,"A",{href:!0});var N7t=s(MW);dJo=r(N7t,"TransfoXLForSequenceClassification"),N7t.forEach(t),cJo=r(INe," (Transformer-XL model)"),INe.forEach(t),mJo=i(j),_F=n(j,"LI",{});var NNe=s(_F);nbe=n(NNe,"STRONG",{});var q7t=s(nbe);fJo=r(q7t,"xlm"),q7t.forEach(t),gJo=r(NNe," \u2014 "),EW=n(NNe,"A",{href:!0});var j7t=s(EW);hJo=r(j7t,"XLMForSequenceClassification"),j7t.forEach(t),uJo=r(NNe," (XLM model)"),NNe.forEach(t),pJo=i(j),bF=n(j,"LI",{});var qNe=s(bF);sbe=n(qNe,"STRONG",{});var D7t=s(sbe);_Jo=r(D7t,"xlm-roberta"),D7t.forEach(t),bJo=r(qNe," \u2014 "),CW=n(qNe,"A",{href:!0});var G7t=s(CW);vJo=r(G7t,"XLMRobertaForSequenceClassification"),G7t.forEach(t),FJo=r(qNe," (XLM-RoBERTa model)"),qNe.forEach(t),TJo=i(j),vF=n(j,"LI",{});var jNe=s(vF);lbe=n(jNe,"STRONG",{});var O7t=s(lbe);MJo=r(O7t,"xlm-roberta-xl"),O7t.forEach(t),EJo=r(jNe," \u2014 "),wW=n(jNe,"A",{href:!0});var V7t=s(wW);CJo=r(V7t,"XLMRobertaXLForSequenceClassification"),V7t.forEach(t),wJo=r(jNe," (XLM-RoBERTa-XL model)"),jNe.forEach(t),AJo=i(j),FF=n(j,"LI",{});var DNe=s(FF);ibe=n(DNe,"STRONG",{});var X7t=s(ibe);LJo=r(X7t,"xlnet"),X7t.forEach(t),yJo=r(DNe," \u2014 "),AW=n(DNe,"A",{href:!0});var z7t=s(AW);xJo=r(z7t,"XLNetForSequenceClassification"),z7t.forEach(t),$Jo=r(DNe," (XLNet model)"),DNe.forEach(t),kJo=i(j),TF=n(j,"LI",{});var GNe=s(TF);dbe=n(GNe,"STRONG",{});var W7t=s(dbe);SJo=r(W7t,"yoso"),W7t.forEach(t),RJo=r(GNe," \u2014 "),LW=n(GNe,"A",{href:!0});var Q7t=s(LW);PJo=r(Q7t,"YosoForSequenceClassification"),Q7t.forEach(t),BJo=r(GNe," (YOSO model)"),GNe.forEach(t),j.forEach(t),IJo=i(ba),MF=n(ba,"P",{});var ONe=s(MF);NJo=r(ONe,"The model is set in evaluation mode by default using "),cbe=n(ONe,"CODE",{});var U7t=s(cbe);qJo=r(U7t,"model.eval()"),U7t.forEach(t),jJo=r(ONe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mbe=n(ONe,"CODE",{});var H7t=s(mbe);DJo=r(H7t,"model.train()"),H7t.forEach(t),ONe.forEach(t),GJo=i(ba),T(EF.$$.fragment,ba),ba.forEach(t),vl.forEach(t),HQe=i(m),Fd=n(m,"H2",{class:!0});var nJe=s(Fd);CF=n(nJe,"A",{id:!0,class:!0,href:!0});var J7t=s(CF);fbe=n(J7t,"SPAN",{});var Y7t=s(fbe);T(m9.$$.fragment,Y7t),Y7t.forEach(t),J7t.forEach(t),OJo=i(nJe),gbe=n(nJe,"SPAN",{});var K7t=s(gbe);VJo=r(K7t,"AutoModelForMultipleChoice"),K7t.forEach(t),nJe.forEach(t),JQe=i(m),qo=n(m,"DIV",{class:!0});var Fl=s(qo);T(f9.$$.fragment,Fl),XJo=i(Fl),Td=n(Fl,"P",{});var Xae=s(Td);zJo=r(Xae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),yW=n(Xae,"A",{href:!0});var Z7t=s(yW);WJo=r(Z7t,"from_pretrained()"),Z7t.forEach(t),QJo=r(Xae," class method or the "),xW=n(Xae,"A",{href:!0});var eLt=s(xW);UJo=r(eLt,"from_config()"),eLt.forEach(t),HJo=r(Xae,` class
method.`),Xae.forEach(t),JJo=i(Fl),g9=n(Fl,"P",{});var sJe=s(g9);YJo=r(sJe,"This class cannot be instantiated directly using "),hbe=n(sJe,"CODE",{});var oLt=s(hbe);KJo=r(oLt,"__init__()"),oLt.forEach(t),ZJo=r(sJe," (throws an error)."),sJe.forEach(t),eYo=i(Fl),bt=n(Fl,"DIV",{class:!0});var FL=s(bt);T(h9.$$.fragment,FL),oYo=i(FL),ube=n(FL,"P",{});var rLt=s(ube);rYo=r(rLt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),rLt.forEach(t),tYo=i(FL),Md=n(FL,"P",{});var zae=s(Md);aYo=r(zae,`Note:
Loading a model from its configuration file does `),pbe=n(zae,"STRONG",{});var tLt=s(pbe);nYo=r(tLt,"not"),tLt.forEach(t),sYo=r(zae,` load the model weights. It only affects the
model\u2019s configuration. Use `),$W=n(zae,"A",{href:!0});var aLt=s($W);lYo=r(aLt,"from_pretrained()"),aLt.forEach(t),iYo=r(zae," to load the model weights."),zae.forEach(t),dYo=i(FL),T(wF.$$.fragment,FL),FL.forEach(t),cYo=i(Fl),to=n(Fl,"DIV",{class:!0});var va=s(to);T(u9.$$.fragment,va),mYo=i(va),_be=n(va,"P",{});var nLt=s(_be);fYo=r(nLt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),nLt.forEach(t),gYo=i(va),Ha=n(va,"P",{});var TL=s(Ha);hYo=r(TL,"The model class to instantiate is selected based on the "),bbe=n(TL,"CODE",{});var sLt=s(bbe);uYo=r(sLt,"model_type"),sLt.forEach(t),pYo=r(TL,` property of the config object (either
passed as an argument or loaded from `),vbe=n(TL,"CODE",{});var lLt=s(vbe);_Yo=r(lLt,"pretrained_model_name_or_path"),lLt.forEach(t),bYo=r(TL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fbe=n(TL,"CODE",{});var iLt=s(Fbe);vYo=r(iLt,"pretrained_model_name_or_path"),iLt.forEach(t),FYo=r(TL,":"),TL.forEach(t),TYo=i(va),Z=n(va,"UL",{});var ee=s(Z);AF=n(ee,"LI",{});var VNe=s(AF);Tbe=n(VNe,"STRONG",{});var dLt=s(Tbe);MYo=r(dLt,"albert"),dLt.forEach(t),EYo=r(VNe," \u2014 "),kW=n(VNe,"A",{href:!0});var cLt=s(kW);CYo=r(cLt,"AlbertForMultipleChoice"),cLt.forEach(t),wYo=r(VNe," (ALBERT model)"),VNe.forEach(t),AYo=i(ee),LF=n(ee,"LI",{});var XNe=s(LF);Mbe=n(XNe,"STRONG",{});var mLt=s(Mbe);LYo=r(mLt,"bert"),mLt.forEach(t),yYo=r(XNe," \u2014 "),SW=n(XNe,"A",{href:!0});var fLt=s(SW);xYo=r(fLt,"BertForMultipleChoice"),fLt.forEach(t),$Yo=r(XNe," (BERT model)"),XNe.forEach(t),kYo=i(ee),yF=n(ee,"LI",{});var zNe=s(yF);Ebe=n(zNe,"STRONG",{});var gLt=s(Ebe);SYo=r(gLt,"big_bird"),gLt.forEach(t),RYo=r(zNe," \u2014 "),RW=n(zNe,"A",{href:!0});var hLt=s(RW);PYo=r(hLt,"BigBirdForMultipleChoice"),hLt.forEach(t),BYo=r(zNe," (BigBird model)"),zNe.forEach(t),IYo=i(ee),xF=n(ee,"LI",{});var WNe=s(xF);Cbe=n(WNe,"STRONG",{});var uLt=s(Cbe);NYo=r(uLt,"camembert"),uLt.forEach(t),qYo=r(WNe," \u2014 "),PW=n(WNe,"A",{href:!0});var pLt=s(PW);jYo=r(pLt,"CamembertForMultipleChoice"),pLt.forEach(t),DYo=r(WNe," (CamemBERT model)"),WNe.forEach(t),GYo=i(ee),$F=n(ee,"LI",{});var QNe=s($F);wbe=n(QNe,"STRONG",{});var _Lt=s(wbe);OYo=r(_Lt,"canine"),_Lt.forEach(t),VYo=r(QNe," \u2014 "),BW=n(QNe,"A",{href:!0});var bLt=s(BW);XYo=r(bLt,"CanineForMultipleChoice"),bLt.forEach(t),zYo=r(QNe," (CANINE model)"),QNe.forEach(t),WYo=i(ee),kF=n(ee,"LI",{});var UNe=s(kF);Abe=n(UNe,"STRONG",{});var vLt=s(Abe);QYo=r(vLt,"convbert"),vLt.forEach(t),UYo=r(UNe," \u2014 "),IW=n(UNe,"A",{href:!0});var FLt=s(IW);HYo=r(FLt,"ConvBertForMultipleChoice"),FLt.forEach(t),JYo=r(UNe," (ConvBERT model)"),UNe.forEach(t),YYo=i(ee),SF=n(ee,"LI",{});var HNe=s(SF);Lbe=n(HNe,"STRONG",{});var TLt=s(Lbe);KYo=r(TLt,"data2vec-text"),TLt.forEach(t),ZYo=r(HNe," \u2014 "),NW=n(HNe,"A",{href:!0});var MLt=s(NW);eKo=r(MLt,"Data2VecTextForMultipleChoice"),MLt.forEach(t),oKo=r(HNe," (Data2VecText model)"),HNe.forEach(t),rKo=i(ee),RF=n(ee,"LI",{});var JNe=s(RF);ybe=n(JNe,"STRONG",{});var ELt=s(ybe);tKo=r(ELt,"deberta-v2"),ELt.forEach(t),aKo=r(JNe," \u2014 "),qW=n(JNe,"A",{href:!0});var CLt=s(qW);nKo=r(CLt,"DebertaV2ForMultipleChoice"),CLt.forEach(t),sKo=r(JNe," (DeBERTa-v2 model)"),JNe.forEach(t),lKo=i(ee),PF=n(ee,"LI",{});var YNe=s(PF);xbe=n(YNe,"STRONG",{});var wLt=s(xbe);iKo=r(wLt,"distilbert"),wLt.forEach(t),dKo=r(YNe," \u2014 "),jW=n(YNe,"A",{href:!0});var ALt=s(jW);cKo=r(ALt,"DistilBertForMultipleChoice"),ALt.forEach(t),mKo=r(YNe," (DistilBERT model)"),YNe.forEach(t),fKo=i(ee),BF=n(ee,"LI",{});var KNe=s(BF);$be=n(KNe,"STRONG",{});var LLt=s($be);gKo=r(LLt,"electra"),LLt.forEach(t),hKo=r(KNe," \u2014 "),DW=n(KNe,"A",{href:!0});var yLt=s(DW);uKo=r(yLt,"ElectraForMultipleChoice"),yLt.forEach(t),pKo=r(KNe," (ELECTRA model)"),KNe.forEach(t),_Ko=i(ee),IF=n(ee,"LI",{});var ZNe=s(IF);kbe=n(ZNe,"STRONG",{});var xLt=s(kbe);bKo=r(xLt,"flaubert"),xLt.forEach(t),vKo=r(ZNe," \u2014 "),GW=n(ZNe,"A",{href:!0});var $Lt=s(GW);FKo=r($Lt,"FlaubertForMultipleChoice"),$Lt.forEach(t),TKo=r(ZNe," (FlauBERT model)"),ZNe.forEach(t),MKo=i(ee),NF=n(ee,"LI",{});var eqe=s(NF);Sbe=n(eqe,"STRONG",{});var kLt=s(Sbe);EKo=r(kLt,"fnet"),kLt.forEach(t),CKo=r(eqe," \u2014 "),OW=n(eqe,"A",{href:!0});var SLt=s(OW);wKo=r(SLt,"FNetForMultipleChoice"),SLt.forEach(t),AKo=r(eqe," (FNet model)"),eqe.forEach(t),LKo=i(ee),qF=n(ee,"LI",{});var oqe=s(qF);Rbe=n(oqe,"STRONG",{});var RLt=s(Rbe);yKo=r(RLt,"funnel"),RLt.forEach(t),xKo=r(oqe," \u2014 "),VW=n(oqe,"A",{href:!0});var PLt=s(VW);$Ko=r(PLt,"FunnelForMultipleChoice"),PLt.forEach(t),kKo=r(oqe," (Funnel Transformer model)"),oqe.forEach(t),SKo=i(ee),jF=n(ee,"LI",{});var rqe=s(jF);Pbe=n(rqe,"STRONG",{});var BLt=s(Pbe);RKo=r(BLt,"ibert"),BLt.forEach(t),PKo=r(rqe," \u2014 "),XW=n(rqe,"A",{href:!0});var ILt=s(XW);BKo=r(ILt,"IBertForMultipleChoice"),ILt.forEach(t),IKo=r(rqe," (I-BERT model)"),rqe.forEach(t),NKo=i(ee),DF=n(ee,"LI",{});var tqe=s(DF);Bbe=n(tqe,"STRONG",{});var NLt=s(Bbe);qKo=r(NLt,"longformer"),NLt.forEach(t),jKo=r(tqe," \u2014 "),zW=n(tqe,"A",{href:!0});var qLt=s(zW);DKo=r(qLt,"LongformerForMultipleChoice"),qLt.forEach(t),GKo=r(tqe," (Longformer model)"),tqe.forEach(t),OKo=i(ee),GF=n(ee,"LI",{});var aqe=s(GF);Ibe=n(aqe,"STRONG",{});var jLt=s(Ibe);VKo=r(jLt,"luke"),jLt.forEach(t),XKo=r(aqe," \u2014 "),WW=n(aqe,"A",{href:!0});var DLt=s(WW);zKo=r(DLt,"LukeForMultipleChoice"),DLt.forEach(t),WKo=r(aqe," (LUKE model)"),aqe.forEach(t),QKo=i(ee),OF=n(ee,"LI",{});var nqe=s(OF);Nbe=n(nqe,"STRONG",{});var GLt=s(Nbe);UKo=r(GLt,"megatron-bert"),GLt.forEach(t),HKo=r(nqe," \u2014 "),QW=n(nqe,"A",{href:!0});var OLt=s(QW);JKo=r(OLt,"MegatronBertForMultipleChoice"),OLt.forEach(t),YKo=r(nqe," (Megatron-BERT model)"),nqe.forEach(t),KKo=i(ee),VF=n(ee,"LI",{});var sqe=s(VF);qbe=n(sqe,"STRONG",{});var VLt=s(qbe);ZKo=r(VLt,"mobilebert"),VLt.forEach(t),eZo=r(sqe," \u2014 "),UW=n(sqe,"A",{href:!0});var XLt=s(UW);oZo=r(XLt,"MobileBertForMultipleChoice"),XLt.forEach(t),rZo=r(sqe," (MobileBERT model)"),sqe.forEach(t),tZo=i(ee),XF=n(ee,"LI",{});var lqe=s(XF);jbe=n(lqe,"STRONG",{});var zLt=s(jbe);aZo=r(zLt,"mpnet"),zLt.forEach(t),nZo=r(lqe," \u2014 "),HW=n(lqe,"A",{href:!0});var WLt=s(HW);sZo=r(WLt,"MPNetForMultipleChoice"),WLt.forEach(t),lZo=r(lqe," (MPNet model)"),lqe.forEach(t),iZo=i(ee),zF=n(ee,"LI",{});var iqe=s(zF);Dbe=n(iqe,"STRONG",{});var QLt=s(Dbe);dZo=r(QLt,"nezha"),QLt.forEach(t),cZo=r(iqe," \u2014 "),JW=n(iqe,"A",{href:!0});var ULt=s(JW);mZo=r(ULt,"NezhaForMultipleChoice"),ULt.forEach(t),fZo=r(iqe," (Nezha model)"),iqe.forEach(t),gZo=i(ee),WF=n(ee,"LI",{});var dqe=s(WF);Gbe=n(dqe,"STRONG",{});var HLt=s(Gbe);hZo=r(HLt,"nystromformer"),HLt.forEach(t),uZo=r(dqe," \u2014 "),YW=n(dqe,"A",{href:!0});var JLt=s(YW);pZo=r(JLt,"NystromformerForMultipleChoice"),JLt.forEach(t),_Zo=r(dqe," (Nystr\xF6mformer model)"),dqe.forEach(t),bZo=i(ee),QF=n(ee,"LI",{});var cqe=s(QF);Obe=n(cqe,"STRONG",{});var YLt=s(Obe);vZo=r(YLt,"qdqbert"),YLt.forEach(t),FZo=r(cqe," \u2014 "),KW=n(cqe,"A",{href:!0});var KLt=s(KW);TZo=r(KLt,"QDQBertForMultipleChoice"),KLt.forEach(t),MZo=r(cqe," (QDQBert model)"),cqe.forEach(t),EZo=i(ee),UF=n(ee,"LI",{});var mqe=s(UF);Vbe=n(mqe,"STRONG",{});var ZLt=s(Vbe);CZo=r(ZLt,"rembert"),ZLt.forEach(t),wZo=r(mqe," \u2014 "),ZW=n(mqe,"A",{href:!0});var eyt=s(ZW);AZo=r(eyt,"RemBertForMultipleChoice"),eyt.forEach(t),LZo=r(mqe," (RemBERT model)"),mqe.forEach(t),yZo=i(ee),HF=n(ee,"LI",{});var fqe=s(HF);Xbe=n(fqe,"STRONG",{});var oyt=s(Xbe);xZo=r(oyt,"roberta"),oyt.forEach(t),$Zo=r(fqe," \u2014 "),eQ=n(fqe,"A",{href:!0});var ryt=s(eQ);kZo=r(ryt,"RobertaForMultipleChoice"),ryt.forEach(t),SZo=r(fqe," (RoBERTa model)"),fqe.forEach(t),RZo=i(ee),JF=n(ee,"LI",{});var gqe=s(JF);zbe=n(gqe,"STRONG",{});var tyt=s(zbe);PZo=r(tyt,"roformer"),tyt.forEach(t),BZo=r(gqe," \u2014 "),oQ=n(gqe,"A",{href:!0});var ayt=s(oQ);IZo=r(ayt,"RoFormerForMultipleChoice"),ayt.forEach(t),NZo=r(gqe," (RoFormer model)"),gqe.forEach(t),qZo=i(ee),YF=n(ee,"LI",{});var hqe=s(YF);Wbe=n(hqe,"STRONG",{});var nyt=s(Wbe);jZo=r(nyt,"squeezebert"),nyt.forEach(t),DZo=r(hqe," \u2014 "),rQ=n(hqe,"A",{href:!0});var syt=s(rQ);GZo=r(syt,"SqueezeBertForMultipleChoice"),syt.forEach(t),OZo=r(hqe," (SqueezeBERT model)"),hqe.forEach(t),VZo=i(ee),KF=n(ee,"LI",{});var uqe=s(KF);Qbe=n(uqe,"STRONG",{});var lyt=s(Qbe);XZo=r(lyt,"xlm"),lyt.forEach(t),zZo=r(uqe," \u2014 "),tQ=n(uqe,"A",{href:!0});var iyt=s(tQ);WZo=r(iyt,"XLMForMultipleChoice"),iyt.forEach(t),QZo=r(uqe," (XLM model)"),uqe.forEach(t),UZo=i(ee),ZF=n(ee,"LI",{});var pqe=s(ZF);Ube=n(pqe,"STRONG",{});var dyt=s(Ube);HZo=r(dyt,"xlm-roberta"),dyt.forEach(t),JZo=r(pqe," \u2014 "),aQ=n(pqe,"A",{href:!0});var cyt=s(aQ);YZo=r(cyt,"XLMRobertaForMultipleChoice"),cyt.forEach(t),KZo=r(pqe," (XLM-RoBERTa model)"),pqe.forEach(t),ZZo=i(ee),eT=n(ee,"LI",{});var _qe=s(eT);Hbe=n(_qe,"STRONG",{});var myt=s(Hbe);eer=r(myt,"xlm-roberta-xl"),myt.forEach(t),oer=r(_qe," \u2014 "),nQ=n(_qe,"A",{href:!0});var fyt=s(nQ);rer=r(fyt,"XLMRobertaXLForMultipleChoice"),fyt.forEach(t),ter=r(_qe," (XLM-RoBERTa-XL model)"),_qe.forEach(t),aer=i(ee),oT=n(ee,"LI",{});var bqe=s(oT);Jbe=n(bqe,"STRONG",{});var gyt=s(Jbe);ner=r(gyt,"xlnet"),gyt.forEach(t),ser=r(bqe," \u2014 "),sQ=n(bqe,"A",{href:!0});var hyt=s(sQ);ler=r(hyt,"XLNetForMultipleChoice"),hyt.forEach(t),ier=r(bqe," (XLNet model)"),bqe.forEach(t),der=i(ee),rT=n(ee,"LI",{});var vqe=s(rT);Ybe=n(vqe,"STRONG",{});var uyt=s(Ybe);cer=r(uyt,"yoso"),uyt.forEach(t),mer=r(vqe," \u2014 "),lQ=n(vqe,"A",{href:!0});var pyt=s(lQ);fer=r(pyt,"YosoForMultipleChoice"),pyt.forEach(t),ger=r(vqe," (YOSO model)"),vqe.forEach(t),ee.forEach(t),her=i(va),tT=n(va,"P",{});var Fqe=s(tT);uer=r(Fqe,"The model is set in evaluation mode by default using "),Kbe=n(Fqe,"CODE",{});var _yt=s(Kbe);per=r(_yt,"model.eval()"),_yt.forEach(t),_er=r(Fqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zbe=n(Fqe,"CODE",{});var byt=s(Zbe);ber=r(byt,"model.train()"),byt.forEach(t),Fqe.forEach(t),ver=i(va),T(aT.$$.fragment,va),va.forEach(t),Fl.forEach(t),YQe=i(m),Ed=n(m,"H2",{class:!0});var lJe=s(Ed);nT=n(lJe,"A",{id:!0,class:!0,href:!0});var vyt=s(nT);eve=n(vyt,"SPAN",{});var Fyt=s(eve);T(p9.$$.fragment,Fyt),Fyt.forEach(t),vyt.forEach(t),Fer=i(lJe),ove=n(lJe,"SPAN",{});var Tyt=s(ove);Ter=r(Tyt,"AutoModelForNextSentencePrediction"),Tyt.forEach(t),lJe.forEach(t),KQe=i(m),jo=n(m,"DIV",{class:!0});var Tl=s(jo);T(_9.$$.fragment,Tl),Mer=i(Tl),Cd=n(Tl,"P",{});var Wae=s(Cd);Eer=r(Wae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),iQ=n(Wae,"A",{href:!0});var Myt=s(iQ);Cer=r(Myt,"from_pretrained()"),Myt.forEach(t),wer=r(Wae," class method or the "),dQ=n(Wae,"A",{href:!0});var Eyt=s(dQ);Aer=r(Eyt,"from_config()"),Eyt.forEach(t),Ler=r(Wae,` class
method.`),Wae.forEach(t),yer=i(Tl),b9=n(Tl,"P",{});var iJe=s(b9);xer=r(iJe,"This class cannot be instantiated directly using "),rve=n(iJe,"CODE",{});var Cyt=s(rve);$er=r(Cyt,"__init__()"),Cyt.forEach(t),ker=r(iJe," (throws an error)."),iJe.forEach(t),Ser=i(Tl),vt=n(Tl,"DIV",{class:!0});var ML=s(vt);T(v9.$$.fragment,ML),Rer=i(ML),tve=n(ML,"P",{});var wyt=s(tve);Per=r(wyt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),wyt.forEach(t),Ber=i(ML),wd=n(ML,"P",{});var Qae=s(wd);Ier=r(Qae,`Note:
Loading a model from its configuration file does `),ave=n(Qae,"STRONG",{});var Ayt=s(ave);Ner=r(Ayt,"not"),Ayt.forEach(t),qer=r(Qae,` load the model weights. It only affects the
model\u2019s configuration. Use `),cQ=n(Qae,"A",{href:!0});var Lyt=s(cQ);jer=r(Lyt,"from_pretrained()"),Lyt.forEach(t),Der=r(Qae," to load the model weights."),Qae.forEach(t),Ger=i(ML),T(sT.$$.fragment,ML),ML.forEach(t),Oer=i(Tl),ao=n(Tl,"DIV",{class:!0});var Fa=s(ao);T(F9.$$.fragment,Fa),Ver=i(Fa),nve=n(Fa,"P",{});var yyt=s(nve);Xer=r(yyt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),yyt.forEach(t),zer=i(Fa),Ja=n(Fa,"P",{});var EL=s(Ja);Wer=r(EL,"The model class to instantiate is selected based on the "),sve=n(EL,"CODE",{});var xyt=s(sve);Qer=r(xyt,"model_type"),xyt.forEach(t),Uer=r(EL,` property of the config object (either
passed as an argument or loaded from `),lve=n(EL,"CODE",{});var $yt=s(lve);Her=r($yt,"pretrained_model_name_or_path"),$yt.forEach(t),Jer=r(EL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ive=n(EL,"CODE",{});var kyt=s(ive);Yer=r(kyt,"pretrained_model_name_or_path"),kyt.forEach(t),Ker=r(EL,":"),EL.forEach(t),Zer=i(Fa),Do=n(Fa,"UL",{});var Ta=s(Do);lT=n(Ta,"LI",{});var Tqe=s(lT);dve=n(Tqe,"STRONG",{});var Syt=s(dve);eor=r(Syt,"bert"),Syt.forEach(t),oor=r(Tqe," \u2014 "),mQ=n(Tqe,"A",{href:!0});var Ryt=s(mQ);ror=r(Ryt,"BertForNextSentencePrediction"),Ryt.forEach(t),tor=r(Tqe," (BERT model)"),Tqe.forEach(t),aor=i(Ta),iT=n(Ta,"LI",{});var Mqe=s(iT);cve=n(Mqe,"STRONG",{});var Pyt=s(cve);nor=r(Pyt,"fnet"),Pyt.forEach(t),sor=r(Mqe," \u2014 "),fQ=n(Mqe,"A",{href:!0});var Byt=s(fQ);lor=r(Byt,"FNetForNextSentencePrediction"),Byt.forEach(t),ior=r(Mqe," (FNet model)"),Mqe.forEach(t),dor=i(Ta),dT=n(Ta,"LI",{});var Eqe=s(dT);mve=n(Eqe,"STRONG",{});var Iyt=s(mve);cor=r(Iyt,"megatron-bert"),Iyt.forEach(t),mor=r(Eqe," \u2014 "),gQ=n(Eqe,"A",{href:!0});var Nyt=s(gQ);gor=r(Nyt,"MegatronBertForNextSentencePrediction"),Nyt.forEach(t),hor=r(Eqe," (Megatron-BERT model)"),Eqe.forEach(t),uor=i(Ta),cT=n(Ta,"LI",{});var Cqe=s(cT);fve=n(Cqe,"STRONG",{});var qyt=s(fve);por=r(qyt,"mobilebert"),qyt.forEach(t),_or=r(Cqe," \u2014 "),hQ=n(Cqe,"A",{href:!0});var jyt=s(hQ);bor=r(jyt,"MobileBertForNextSentencePrediction"),jyt.forEach(t),vor=r(Cqe," (MobileBERT model)"),Cqe.forEach(t),For=i(Ta),mT=n(Ta,"LI",{});var wqe=s(mT);gve=n(wqe,"STRONG",{});var Dyt=s(gve);Tor=r(Dyt,"nezha"),Dyt.forEach(t),Mor=r(wqe," \u2014 "),uQ=n(wqe,"A",{href:!0});var Gyt=s(uQ);Eor=r(Gyt,"NezhaForNextSentencePrediction"),Gyt.forEach(t),Cor=r(wqe," (Nezha model)"),wqe.forEach(t),wor=i(Ta),fT=n(Ta,"LI",{});var Aqe=s(fT);hve=n(Aqe,"STRONG",{});var Oyt=s(hve);Aor=r(Oyt,"qdqbert"),Oyt.forEach(t),Lor=r(Aqe," \u2014 "),pQ=n(Aqe,"A",{href:!0});var Vyt=s(pQ);yor=r(Vyt,"QDQBertForNextSentencePrediction"),Vyt.forEach(t),xor=r(Aqe," (QDQBert model)"),Aqe.forEach(t),Ta.forEach(t),$or=i(Fa),gT=n(Fa,"P",{});var Lqe=s(gT);kor=r(Lqe,"The model is set in evaluation mode by default using "),uve=n(Lqe,"CODE",{});var Xyt=s(uve);Sor=r(Xyt,"model.eval()"),Xyt.forEach(t),Ror=r(Lqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pve=n(Lqe,"CODE",{});var zyt=s(pve);Por=r(zyt,"model.train()"),zyt.forEach(t),Lqe.forEach(t),Bor=i(Fa),T(hT.$$.fragment,Fa),Fa.forEach(t),Tl.forEach(t),ZQe=i(m),Ad=n(m,"H2",{class:!0});var dJe=s(Ad);uT=n(dJe,"A",{id:!0,class:!0,href:!0});var Wyt=s(uT);_ve=n(Wyt,"SPAN",{});var Qyt=s(_ve);T(T9.$$.fragment,Qyt),Qyt.forEach(t),Wyt.forEach(t),Ior=i(dJe),bve=n(dJe,"SPAN",{});var Uyt=s(bve);Nor=r(Uyt,"AutoModelForTokenClassification"),Uyt.forEach(t),dJe.forEach(t),eUe=i(m),Go=n(m,"DIV",{class:!0});var Ml=s(Go);T(M9.$$.fragment,Ml),qor=i(Ml),Ld=n(Ml,"P",{});var Uae=s(Ld);jor=r(Uae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),_Q=n(Uae,"A",{href:!0});var Hyt=s(_Q);Dor=r(Hyt,"from_pretrained()"),Hyt.forEach(t),Gor=r(Uae," class method or the "),bQ=n(Uae,"A",{href:!0});var Jyt=s(bQ);Oor=r(Jyt,"from_config()"),Jyt.forEach(t),Vor=r(Uae,` class
method.`),Uae.forEach(t),Xor=i(Ml),E9=n(Ml,"P",{});var cJe=s(E9);zor=r(cJe,"This class cannot be instantiated directly using "),vve=n(cJe,"CODE",{});var Yyt=s(vve);Wor=r(Yyt,"__init__()"),Yyt.forEach(t),Qor=r(cJe," (throws an error)."),cJe.forEach(t),Uor=i(Ml),Ft=n(Ml,"DIV",{class:!0});var CL=s(Ft);T(C9.$$.fragment,CL),Hor=i(CL),Fve=n(CL,"P",{});var Kyt=s(Fve);Jor=r(Kyt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Kyt.forEach(t),Yor=i(CL),yd=n(CL,"P",{});var Hae=s(yd);Kor=r(Hae,`Note:
Loading a model from its configuration file does `),Tve=n(Hae,"STRONG",{});var Zyt=s(Tve);Zor=r(Zyt,"not"),Zyt.forEach(t),err=r(Hae,` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=n(Hae,"A",{href:!0});var e8t=s(vQ);orr=r(e8t,"from_pretrained()"),e8t.forEach(t),rrr=r(Hae," to load the model weights."),Hae.forEach(t),trr=i(CL),T(pT.$$.fragment,CL),CL.forEach(t),arr=i(Ml),no=n(Ml,"DIV",{class:!0});var Ma=s(no);T(w9.$$.fragment,Ma),nrr=i(Ma),Mve=n(Ma,"P",{});var o8t=s(Mve);srr=r(o8t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),o8t.forEach(t),lrr=i(Ma),Ya=n(Ma,"P",{});var wL=s(Ya);irr=r(wL,"The model class to instantiate is selected based on the "),Eve=n(wL,"CODE",{});var r8t=s(Eve);drr=r(r8t,"model_type"),r8t.forEach(t),crr=r(wL,` property of the config object (either
passed as an argument or loaded from `),Cve=n(wL,"CODE",{});var t8t=s(Cve);mrr=r(t8t,"pretrained_model_name_or_path"),t8t.forEach(t),frr=r(wL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wve=n(wL,"CODE",{});var a8t=s(wve);grr=r(a8t,"pretrained_model_name_or_path"),a8t.forEach(t),hrr=r(wL,":"),wL.forEach(t),urr=i(Ma),H=n(Ma,"UL",{});var K=s(H);_T=n(K,"LI",{});var yqe=s(_T);Ave=n(yqe,"STRONG",{});var n8t=s(Ave);prr=r(n8t,"albert"),n8t.forEach(t),_rr=r(yqe," \u2014 "),FQ=n(yqe,"A",{href:!0});var s8t=s(FQ);brr=r(s8t,"AlbertForTokenClassification"),s8t.forEach(t),vrr=r(yqe," (ALBERT model)"),yqe.forEach(t),Frr=i(K),bT=n(K,"LI",{});var xqe=s(bT);Lve=n(xqe,"STRONG",{});var l8t=s(Lve);Trr=r(l8t,"bert"),l8t.forEach(t),Mrr=r(xqe," \u2014 "),TQ=n(xqe,"A",{href:!0});var i8t=s(TQ);Err=r(i8t,"BertForTokenClassification"),i8t.forEach(t),Crr=r(xqe," (BERT model)"),xqe.forEach(t),wrr=i(K),vT=n(K,"LI",{});var $qe=s(vT);yve=n($qe,"STRONG",{});var d8t=s(yve);Arr=r(d8t,"big_bird"),d8t.forEach(t),Lrr=r($qe," \u2014 "),MQ=n($qe,"A",{href:!0});var c8t=s(MQ);yrr=r(c8t,"BigBirdForTokenClassification"),c8t.forEach(t),xrr=r($qe," (BigBird model)"),$qe.forEach(t),$rr=i(K),FT=n(K,"LI",{});var kqe=s(FT);xve=n(kqe,"STRONG",{});var m8t=s(xve);krr=r(m8t,"bloom"),m8t.forEach(t),Srr=r(kqe," \u2014 "),EQ=n(kqe,"A",{href:!0});var f8t=s(EQ);Rrr=r(f8t,"BloomForTokenClassification"),f8t.forEach(t),Prr=r(kqe," (BLOOM model)"),kqe.forEach(t),Brr=i(K),TT=n(K,"LI",{});var Sqe=s(TT);$ve=n(Sqe,"STRONG",{});var g8t=s($ve);Irr=r(g8t,"camembert"),g8t.forEach(t),Nrr=r(Sqe," \u2014 "),CQ=n(Sqe,"A",{href:!0});var h8t=s(CQ);qrr=r(h8t,"CamembertForTokenClassification"),h8t.forEach(t),jrr=r(Sqe," (CamemBERT model)"),Sqe.forEach(t),Drr=i(K),MT=n(K,"LI",{});var Rqe=s(MT);kve=n(Rqe,"STRONG",{});var u8t=s(kve);Grr=r(u8t,"canine"),u8t.forEach(t),Orr=r(Rqe," \u2014 "),wQ=n(Rqe,"A",{href:!0});var p8t=s(wQ);Vrr=r(p8t,"CanineForTokenClassification"),p8t.forEach(t),Xrr=r(Rqe," (CANINE model)"),Rqe.forEach(t),zrr=i(K),ET=n(K,"LI",{});var Pqe=s(ET);Sve=n(Pqe,"STRONG",{});var _8t=s(Sve);Wrr=r(_8t,"convbert"),_8t.forEach(t),Qrr=r(Pqe," \u2014 "),AQ=n(Pqe,"A",{href:!0});var b8t=s(AQ);Urr=r(b8t,"ConvBertForTokenClassification"),b8t.forEach(t),Hrr=r(Pqe," (ConvBERT model)"),Pqe.forEach(t),Jrr=i(K),CT=n(K,"LI",{});var Bqe=s(CT);Rve=n(Bqe,"STRONG",{});var v8t=s(Rve);Yrr=r(v8t,"data2vec-text"),v8t.forEach(t),Krr=r(Bqe," \u2014 "),LQ=n(Bqe,"A",{href:!0});var F8t=s(LQ);Zrr=r(F8t,"Data2VecTextForTokenClassification"),F8t.forEach(t),etr=r(Bqe," (Data2VecText model)"),Bqe.forEach(t),otr=i(K),wT=n(K,"LI",{});var Iqe=s(wT);Pve=n(Iqe,"STRONG",{});var T8t=s(Pve);rtr=r(T8t,"deberta"),T8t.forEach(t),ttr=r(Iqe," \u2014 "),yQ=n(Iqe,"A",{href:!0});var M8t=s(yQ);atr=r(M8t,"DebertaForTokenClassification"),M8t.forEach(t),ntr=r(Iqe," (DeBERTa model)"),Iqe.forEach(t),str=i(K),AT=n(K,"LI",{});var Nqe=s(AT);Bve=n(Nqe,"STRONG",{});var E8t=s(Bve);ltr=r(E8t,"deberta-v2"),E8t.forEach(t),itr=r(Nqe," \u2014 "),xQ=n(Nqe,"A",{href:!0});var C8t=s(xQ);dtr=r(C8t,"DebertaV2ForTokenClassification"),C8t.forEach(t),ctr=r(Nqe," (DeBERTa-v2 model)"),Nqe.forEach(t),mtr=i(K),LT=n(K,"LI",{});var qqe=s(LT);Ive=n(qqe,"STRONG",{});var w8t=s(Ive);ftr=r(w8t,"distilbert"),w8t.forEach(t),gtr=r(qqe," \u2014 "),$Q=n(qqe,"A",{href:!0});var A8t=s($Q);htr=r(A8t,"DistilBertForTokenClassification"),A8t.forEach(t),utr=r(qqe," (DistilBERT model)"),qqe.forEach(t),ptr=i(K),yT=n(K,"LI",{});var jqe=s(yT);Nve=n(jqe,"STRONG",{});var L8t=s(Nve);_tr=r(L8t,"electra"),L8t.forEach(t),btr=r(jqe," \u2014 "),kQ=n(jqe,"A",{href:!0});var y8t=s(kQ);vtr=r(y8t,"ElectraForTokenClassification"),y8t.forEach(t),Ftr=r(jqe," (ELECTRA model)"),jqe.forEach(t),Ttr=i(K),xT=n(K,"LI",{});var Dqe=s(xT);qve=n(Dqe,"STRONG",{});var x8t=s(qve);Mtr=r(x8t,"flaubert"),x8t.forEach(t),Etr=r(Dqe," \u2014 "),SQ=n(Dqe,"A",{href:!0});var $8t=s(SQ);Ctr=r($8t,"FlaubertForTokenClassification"),$8t.forEach(t),wtr=r(Dqe," (FlauBERT model)"),Dqe.forEach(t),Atr=i(K),$T=n(K,"LI",{});var Gqe=s($T);jve=n(Gqe,"STRONG",{});var k8t=s(jve);Ltr=r(k8t,"fnet"),k8t.forEach(t),ytr=r(Gqe," \u2014 "),RQ=n(Gqe,"A",{href:!0});var S8t=s(RQ);xtr=r(S8t,"FNetForTokenClassification"),S8t.forEach(t),$tr=r(Gqe," (FNet model)"),Gqe.forEach(t),ktr=i(K),kT=n(K,"LI",{});var Oqe=s(kT);Dve=n(Oqe,"STRONG",{});var R8t=s(Dve);Str=r(R8t,"funnel"),R8t.forEach(t),Rtr=r(Oqe," \u2014 "),PQ=n(Oqe,"A",{href:!0});var P8t=s(PQ);Ptr=r(P8t,"FunnelForTokenClassification"),P8t.forEach(t),Btr=r(Oqe," (Funnel Transformer model)"),Oqe.forEach(t),Itr=i(K),ST=n(K,"LI",{});var Vqe=s(ST);Gve=n(Vqe,"STRONG",{});var B8t=s(Gve);Ntr=r(B8t,"gpt2"),B8t.forEach(t),qtr=r(Vqe," \u2014 "),BQ=n(Vqe,"A",{href:!0});var I8t=s(BQ);jtr=r(I8t,"GPT2ForTokenClassification"),I8t.forEach(t),Dtr=r(Vqe," (OpenAI GPT-2 model)"),Vqe.forEach(t),Gtr=i(K),RT=n(K,"LI",{});var Xqe=s(RT);Ove=n(Xqe,"STRONG",{});var N8t=s(Ove);Otr=r(N8t,"ibert"),N8t.forEach(t),Vtr=r(Xqe," \u2014 "),IQ=n(Xqe,"A",{href:!0});var q8t=s(IQ);Xtr=r(q8t,"IBertForTokenClassification"),q8t.forEach(t),ztr=r(Xqe," (I-BERT model)"),Xqe.forEach(t),Wtr=i(K),PT=n(K,"LI",{});var zqe=s(PT);Vve=n(zqe,"STRONG",{});var j8t=s(Vve);Qtr=r(j8t,"layoutlm"),j8t.forEach(t),Utr=r(zqe," \u2014 "),NQ=n(zqe,"A",{href:!0});var D8t=s(NQ);Htr=r(D8t,"LayoutLMForTokenClassification"),D8t.forEach(t),Jtr=r(zqe," (LayoutLM model)"),zqe.forEach(t),Ytr=i(K),BT=n(K,"LI",{});var Wqe=s(BT);Xve=n(Wqe,"STRONG",{});var G8t=s(Xve);Ktr=r(G8t,"layoutlmv2"),G8t.forEach(t),Ztr=r(Wqe," \u2014 "),qQ=n(Wqe,"A",{href:!0});var O8t=s(qQ);ear=r(O8t,"LayoutLMv2ForTokenClassification"),O8t.forEach(t),oar=r(Wqe," (LayoutLMv2 model)"),Wqe.forEach(t),rar=i(K),IT=n(K,"LI",{});var Qqe=s(IT);zve=n(Qqe,"STRONG",{});var V8t=s(zve);tar=r(V8t,"layoutlmv3"),V8t.forEach(t),aar=r(Qqe," \u2014 "),jQ=n(Qqe,"A",{href:!0});var X8t=s(jQ);nar=r(X8t,"LayoutLMv3ForTokenClassification"),X8t.forEach(t),sar=r(Qqe," (LayoutLMv3 model)"),Qqe.forEach(t),lar=i(K),NT=n(K,"LI",{});var Uqe=s(NT);Wve=n(Uqe,"STRONG",{});var z8t=s(Wve);iar=r(z8t,"longformer"),z8t.forEach(t),dar=r(Uqe," \u2014 "),DQ=n(Uqe,"A",{href:!0});var W8t=s(DQ);car=r(W8t,"LongformerForTokenClassification"),W8t.forEach(t),mar=r(Uqe," (Longformer model)"),Uqe.forEach(t),far=i(K),qT=n(K,"LI",{});var Hqe=s(qT);Qve=n(Hqe,"STRONG",{});var Q8t=s(Qve);gar=r(Q8t,"luke"),Q8t.forEach(t),har=r(Hqe," \u2014 "),GQ=n(Hqe,"A",{href:!0});var U8t=s(GQ);uar=r(U8t,"LukeForTokenClassification"),U8t.forEach(t),par=r(Hqe," (LUKE model)"),Hqe.forEach(t),_ar=i(K),jT=n(K,"LI",{});var Jqe=s(jT);Uve=n(Jqe,"STRONG",{});var H8t=s(Uve);bar=r(H8t,"megatron-bert"),H8t.forEach(t),Far=r(Jqe," \u2014 "),OQ=n(Jqe,"A",{href:!0});var J8t=s(OQ);Tar=r(J8t,"MegatronBertForTokenClassification"),J8t.forEach(t),Mar=r(Jqe," (Megatron-BERT model)"),Jqe.forEach(t),Ear=i(K),DT=n(K,"LI",{});var Yqe=s(DT);Hve=n(Yqe,"STRONG",{});var Y8t=s(Hve);Car=r(Y8t,"mobilebert"),Y8t.forEach(t),war=r(Yqe," \u2014 "),VQ=n(Yqe,"A",{href:!0});var K8t=s(VQ);Aar=r(K8t,"MobileBertForTokenClassification"),K8t.forEach(t),Lar=r(Yqe," (MobileBERT model)"),Yqe.forEach(t),yar=i(K),GT=n(K,"LI",{});var Kqe=s(GT);Jve=n(Kqe,"STRONG",{});var Z8t=s(Jve);xar=r(Z8t,"mpnet"),Z8t.forEach(t),$ar=r(Kqe," \u2014 "),XQ=n(Kqe,"A",{href:!0});var e9t=s(XQ);kar=r(e9t,"MPNetForTokenClassification"),e9t.forEach(t),Sar=r(Kqe," (MPNet model)"),Kqe.forEach(t),Rar=i(K),OT=n(K,"LI",{});var Zqe=s(OT);Yve=n(Zqe,"STRONG",{});var o9t=s(Yve);Par=r(o9t,"nezha"),o9t.forEach(t),Bar=r(Zqe," \u2014 "),zQ=n(Zqe,"A",{href:!0});var r9t=s(zQ);Iar=r(r9t,"NezhaForTokenClassification"),r9t.forEach(t),Nar=r(Zqe," (Nezha model)"),Zqe.forEach(t),qar=i(K),VT=n(K,"LI",{});var eje=s(VT);Kve=n(eje,"STRONG",{});var t9t=s(Kve);jar=r(t9t,"nystromformer"),t9t.forEach(t),Dar=r(eje," \u2014 "),WQ=n(eje,"A",{href:!0});var a9t=s(WQ);Gar=r(a9t,"NystromformerForTokenClassification"),a9t.forEach(t),Oar=r(eje," (Nystr\xF6mformer model)"),eje.forEach(t),Var=i(K),XT=n(K,"LI",{});var oje=s(XT);Zve=n(oje,"STRONG",{});var n9t=s(Zve);Xar=r(n9t,"qdqbert"),n9t.forEach(t),zar=r(oje," \u2014 "),QQ=n(oje,"A",{href:!0});var s9t=s(QQ);War=r(s9t,"QDQBertForTokenClassification"),s9t.forEach(t),Qar=r(oje," (QDQBert model)"),oje.forEach(t),Uar=i(K),zT=n(K,"LI",{});var rje=s(zT);e1e=n(rje,"STRONG",{});var l9t=s(e1e);Har=r(l9t,"rembert"),l9t.forEach(t),Jar=r(rje," \u2014 "),UQ=n(rje,"A",{href:!0});var i9t=s(UQ);Yar=r(i9t,"RemBertForTokenClassification"),i9t.forEach(t),Kar=r(rje," (RemBERT model)"),rje.forEach(t),Zar=i(K),WT=n(K,"LI",{});var tje=s(WT);o1e=n(tje,"STRONG",{});var d9t=s(o1e);enr=r(d9t,"roberta"),d9t.forEach(t),onr=r(tje," \u2014 "),HQ=n(tje,"A",{href:!0});var c9t=s(HQ);rnr=r(c9t,"RobertaForTokenClassification"),c9t.forEach(t),tnr=r(tje," (RoBERTa model)"),tje.forEach(t),anr=i(K),QT=n(K,"LI",{});var aje=s(QT);r1e=n(aje,"STRONG",{});var m9t=s(r1e);nnr=r(m9t,"roformer"),m9t.forEach(t),snr=r(aje," \u2014 "),JQ=n(aje,"A",{href:!0});var f9t=s(JQ);lnr=r(f9t,"RoFormerForTokenClassification"),f9t.forEach(t),inr=r(aje," (RoFormer model)"),aje.forEach(t),dnr=i(K),UT=n(K,"LI",{});var nje=s(UT);t1e=n(nje,"STRONG",{});var g9t=s(t1e);cnr=r(g9t,"squeezebert"),g9t.forEach(t),mnr=r(nje," \u2014 "),YQ=n(nje,"A",{href:!0});var h9t=s(YQ);fnr=r(h9t,"SqueezeBertForTokenClassification"),h9t.forEach(t),gnr=r(nje," (SqueezeBERT model)"),nje.forEach(t),hnr=i(K),HT=n(K,"LI",{});var sje=s(HT);a1e=n(sje,"STRONG",{});var u9t=s(a1e);unr=r(u9t,"xlm"),u9t.forEach(t),pnr=r(sje," \u2014 "),KQ=n(sje,"A",{href:!0});var p9t=s(KQ);_nr=r(p9t,"XLMForTokenClassification"),p9t.forEach(t),bnr=r(sje," (XLM model)"),sje.forEach(t),vnr=i(K),JT=n(K,"LI",{});var lje=s(JT);n1e=n(lje,"STRONG",{});var _9t=s(n1e);Fnr=r(_9t,"xlm-roberta"),_9t.forEach(t),Tnr=r(lje," \u2014 "),ZQ=n(lje,"A",{href:!0});var b9t=s(ZQ);Mnr=r(b9t,"XLMRobertaForTokenClassification"),b9t.forEach(t),Enr=r(lje," (XLM-RoBERTa model)"),lje.forEach(t),Cnr=i(K),YT=n(K,"LI",{});var ije=s(YT);s1e=n(ije,"STRONG",{});var v9t=s(s1e);wnr=r(v9t,"xlm-roberta-xl"),v9t.forEach(t),Anr=r(ije," \u2014 "),eU=n(ije,"A",{href:!0});var F9t=s(eU);Lnr=r(F9t,"XLMRobertaXLForTokenClassification"),F9t.forEach(t),ynr=r(ije," (XLM-RoBERTa-XL model)"),ije.forEach(t),xnr=i(K),KT=n(K,"LI",{});var dje=s(KT);l1e=n(dje,"STRONG",{});var T9t=s(l1e);$nr=r(T9t,"xlnet"),T9t.forEach(t),knr=r(dje," \u2014 "),oU=n(dje,"A",{href:!0});var M9t=s(oU);Snr=r(M9t,"XLNetForTokenClassification"),M9t.forEach(t),Rnr=r(dje," (XLNet model)"),dje.forEach(t),Pnr=i(K),ZT=n(K,"LI",{});var cje=s(ZT);i1e=n(cje,"STRONG",{});var E9t=s(i1e);Bnr=r(E9t,"yoso"),E9t.forEach(t),Inr=r(cje," \u2014 "),rU=n(cje,"A",{href:!0});var C9t=s(rU);Nnr=r(C9t,"YosoForTokenClassification"),C9t.forEach(t),qnr=r(cje," (YOSO model)"),cje.forEach(t),K.forEach(t),jnr=i(Ma),eM=n(Ma,"P",{});var mje=s(eM);Dnr=r(mje,"The model is set in evaluation mode by default using "),d1e=n(mje,"CODE",{});var w9t=s(d1e);Gnr=r(w9t,"model.eval()"),w9t.forEach(t),Onr=r(mje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c1e=n(mje,"CODE",{});var A9t=s(c1e);Vnr=r(A9t,"model.train()"),A9t.forEach(t),mje.forEach(t),Xnr=i(Ma),T(oM.$$.fragment,Ma),Ma.forEach(t),Ml.forEach(t),oUe=i(m),xd=n(m,"H2",{class:!0});var mJe=s(xd);rM=n(mJe,"A",{id:!0,class:!0,href:!0});var L9t=s(rM);m1e=n(L9t,"SPAN",{});var y9t=s(m1e);T(A9.$$.fragment,y9t),y9t.forEach(t),L9t.forEach(t),znr=i(mJe),f1e=n(mJe,"SPAN",{});var x9t=s(f1e);Wnr=r(x9t,"AutoModelForQuestionAnswering"),x9t.forEach(t),mJe.forEach(t),rUe=i(m),Oo=n(m,"DIV",{class:!0});var El=s(Oo);T(L9.$$.fragment,El),Qnr=i(El),$d=n(El,"P",{});var Jae=s($d);Unr=r(Jae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),tU=n(Jae,"A",{href:!0});var $9t=s(tU);Hnr=r($9t,"from_pretrained()"),$9t.forEach(t),Jnr=r(Jae," class method or the "),aU=n(Jae,"A",{href:!0});var k9t=s(aU);Ynr=r(k9t,"from_config()"),k9t.forEach(t),Knr=r(Jae,` class
method.`),Jae.forEach(t),Znr=i(El),y9=n(El,"P",{});var fJe=s(y9);esr=r(fJe,"This class cannot be instantiated directly using "),g1e=n(fJe,"CODE",{});var S9t=s(g1e);osr=r(S9t,"__init__()"),S9t.forEach(t),rsr=r(fJe," (throws an error)."),fJe.forEach(t),tsr=i(El),Tt=n(El,"DIV",{class:!0});var AL=s(Tt);T(x9.$$.fragment,AL),asr=i(AL),h1e=n(AL,"P",{});var R9t=s(h1e);nsr=r(R9t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),R9t.forEach(t),ssr=i(AL),kd=n(AL,"P",{});var Yae=s(kd);lsr=r(Yae,`Note:
Loading a model from its configuration file does `),u1e=n(Yae,"STRONG",{});var P9t=s(u1e);isr=r(P9t,"not"),P9t.forEach(t),dsr=r(Yae,` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=n(Yae,"A",{href:!0});var B9t=s(nU);csr=r(B9t,"from_pretrained()"),B9t.forEach(t),msr=r(Yae," to load the model weights."),Yae.forEach(t),fsr=i(AL),T(tM.$$.fragment,AL),AL.forEach(t),gsr=i(El),so=n(El,"DIV",{class:!0});var Ea=s(so);T($9.$$.fragment,Ea),hsr=i(Ea),p1e=n(Ea,"P",{});var I9t=s(p1e);usr=r(I9t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),I9t.forEach(t),psr=i(Ea),Ka=n(Ea,"P",{});var LL=s(Ka);_sr=r(LL,"The model class to instantiate is selected based on the "),_1e=n(LL,"CODE",{});var N9t=s(_1e);bsr=r(N9t,"model_type"),N9t.forEach(t),vsr=r(LL,` property of the config object (either
passed as an argument or loaded from `),b1e=n(LL,"CODE",{});var q9t=s(b1e);Fsr=r(q9t,"pretrained_model_name_or_path"),q9t.forEach(t),Tsr=r(LL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v1e=n(LL,"CODE",{});var j9t=s(v1e);Msr=r(j9t,"pretrained_model_name_or_path"),j9t.forEach(t),Esr=r(LL,":"),LL.forEach(t),Csr=i(Ea),V=n(Ea,"UL",{});var X=s(V);aM=n(X,"LI",{});var fje=s(aM);F1e=n(fje,"STRONG",{});var D9t=s(F1e);wsr=r(D9t,"albert"),D9t.forEach(t),Asr=r(fje," \u2014 "),sU=n(fje,"A",{href:!0});var G9t=s(sU);Lsr=r(G9t,"AlbertForQuestionAnswering"),G9t.forEach(t),ysr=r(fje," (ALBERT model)"),fje.forEach(t),xsr=i(X),nM=n(X,"LI",{});var gje=s(nM);T1e=n(gje,"STRONG",{});var O9t=s(T1e);$sr=r(O9t,"bart"),O9t.forEach(t),ksr=r(gje," \u2014 "),lU=n(gje,"A",{href:!0});var V9t=s(lU);Ssr=r(V9t,"BartForQuestionAnswering"),V9t.forEach(t),Rsr=r(gje," (BART model)"),gje.forEach(t),Psr=i(X),sM=n(X,"LI",{});var hje=s(sM);M1e=n(hje,"STRONG",{});var X9t=s(M1e);Bsr=r(X9t,"bert"),X9t.forEach(t),Isr=r(hje," \u2014 "),iU=n(hje,"A",{href:!0});var z9t=s(iU);Nsr=r(z9t,"BertForQuestionAnswering"),z9t.forEach(t),qsr=r(hje," (BERT model)"),hje.forEach(t),jsr=i(X),lM=n(X,"LI",{});var uje=s(lM);E1e=n(uje,"STRONG",{});var W9t=s(E1e);Dsr=r(W9t,"big_bird"),W9t.forEach(t),Gsr=r(uje," \u2014 "),dU=n(uje,"A",{href:!0});var Q9t=s(dU);Osr=r(Q9t,"BigBirdForQuestionAnswering"),Q9t.forEach(t),Vsr=r(uje," (BigBird model)"),uje.forEach(t),Xsr=i(X),iM=n(X,"LI",{});var pje=s(iM);C1e=n(pje,"STRONG",{});var U9t=s(C1e);zsr=r(U9t,"bigbird_pegasus"),U9t.forEach(t),Wsr=r(pje," \u2014 "),cU=n(pje,"A",{href:!0});var H9t=s(cU);Qsr=r(H9t,"BigBirdPegasusForQuestionAnswering"),H9t.forEach(t),Usr=r(pje," (BigBird-Pegasus model)"),pje.forEach(t),Hsr=i(X),dM=n(X,"LI",{});var _je=s(dM);w1e=n(_je,"STRONG",{});var J9t=s(w1e);Jsr=r(J9t,"camembert"),J9t.forEach(t),Ysr=r(_je," \u2014 "),mU=n(_je,"A",{href:!0});var Y9t=s(mU);Ksr=r(Y9t,"CamembertForQuestionAnswering"),Y9t.forEach(t),Zsr=r(_je," (CamemBERT model)"),_je.forEach(t),elr=i(X),cM=n(X,"LI",{});var bje=s(cM);A1e=n(bje,"STRONG",{});var K9t=s(A1e);olr=r(K9t,"canine"),K9t.forEach(t),rlr=r(bje," \u2014 "),fU=n(bje,"A",{href:!0});var Z9t=s(fU);tlr=r(Z9t,"CanineForQuestionAnswering"),Z9t.forEach(t),alr=r(bje," (CANINE model)"),bje.forEach(t),nlr=i(X),mM=n(X,"LI",{});var vje=s(mM);L1e=n(vje,"STRONG",{});var ext=s(L1e);slr=r(ext,"convbert"),ext.forEach(t),llr=r(vje," \u2014 "),gU=n(vje,"A",{href:!0});var oxt=s(gU);ilr=r(oxt,"ConvBertForQuestionAnswering"),oxt.forEach(t),dlr=r(vje," (ConvBERT model)"),vje.forEach(t),clr=i(X),fM=n(X,"LI",{});var Fje=s(fM);y1e=n(Fje,"STRONG",{});var rxt=s(y1e);mlr=r(rxt,"data2vec-text"),rxt.forEach(t),flr=r(Fje," \u2014 "),hU=n(Fje,"A",{href:!0});var txt=s(hU);glr=r(txt,"Data2VecTextForQuestionAnswering"),txt.forEach(t),hlr=r(Fje," (Data2VecText model)"),Fje.forEach(t),ulr=i(X),gM=n(X,"LI",{});var Tje=s(gM);x1e=n(Tje,"STRONG",{});var axt=s(x1e);plr=r(axt,"deberta"),axt.forEach(t),_lr=r(Tje," \u2014 "),uU=n(Tje,"A",{href:!0});var nxt=s(uU);blr=r(nxt,"DebertaForQuestionAnswering"),nxt.forEach(t),vlr=r(Tje," (DeBERTa model)"),Tje.forEach(t),Flr=i(X),hM=n(X,"LI",{});var Mje=s(hM);$1e=n(Mje,"STRONG",{});var sxt=s($1e);Tlr=r(sxt,"deberta-v2"),sxt.forEach(t),Mlr=r(Mje," \u2014 "),pU=n(Mje,"A",{href:!0});var lxt=s(pU);Elr=r(lxt,"DebertaV2ForQuestionAnswering"),lxt.forEach(t),Clr=r(Mje," (DeBERTa-v2 model)"),Mje.forEach(t),wlr=i(X),uM=n(X,"LI",{});var Eje=s(uM);k1e=n(Eje,"STRONG",{});var ixt=s(k1e);Alr=r(ixt,"distilbert"),ixt.forEach(t),Llr=r(Eje," \u2014 "),_U=n(Eje,"A",{href:!0});var dxt=s(_U);ylr=r(dxt,"DistilBertForQuestionAnswering"),dxt.forEach(t),xlr=r(Eje," (DistilBERT model)"),Eje.forEach(t),$lr=i(X),pM=n(X,"LI",{});var Cje=s(pM);S1e=n(Cje,"STRONG",{});var cxt=s(S1e);klr=r(cxt,"electra"),cxt.forEach(t),Slr=r(Cje," \u2014 "),bU=n(Cje,"A",{href:!0});var mxt=s(bU);Rlr=r(mxt,"ElectraForQuestionAnswering"),mxt.forEach(t),Plr=r(Cje," (ELECTRA model)"),Cje.forEach(t),Blr=i(X),_M=n(X,"LI",{});var wje=s(_M);R1e=n(wje,"STRONG",{});var fxt=s(R1e);Ilr=r(fxt,"flaubert"),fxt.forEach(t),Nlr=r(wje," \u2014 "),vU=n(wje,"A",{href:!0});var gxt=s(vU);qlr=r(gxt,"FlaubertForQuestionAnsweringSimple"),gxt.forEach(t),jlr=r(wje," (FlauBERT model)"),wje.forEach(t),Dlr=i(X),bM=n(X,"LI",{});var Aje=s(bM);P1e=n(Aje,"STRONG",{});var hxt=s(P1e);Glr=r(hxt,"fnet"),hxt.forEach(t),Olr=r(Aje," \u2014 "),FU=n(Aje,"A",{href:!0});var uxt=s(FU);Vlr=r(uxt,"FNetForQuestionAnswering"),uxt.forEach(t),Xlr=r(Aje," (FNet model)"),Aje.forEach(t),zlr=i(X),vM=n(X,"LI",{});var Lje=s(vM);B1e=n(Lje,"STRONG",{});var pxt=s(B1e);Wlr=r(pxt,"funnel"),pxt.forEach(t),Qlr=r(Lje," \u2014 "),TU=n(Lje,"A",{href:!0});var _xt=s(TU);Ulr=r(_xt,"FunnelForQuestionAnswering"),_xt.forEach(t),Hlr=r(Lje," (Funnel Transformer model)"),Lje.forEach(t),Jlr=i(X),FM=n(X,"LI",{});var yje=s(FM);I1e=n(yje,"STRONG",{});var bxt=s(I1e);Ylr=r(bxt,"gptj"),bxt.forEach(t),Klr=r(yje," \u2014 "),MU=n(yje,"A",{href:!0});var vxt=s(MU);Zlr=r(vxt,"GPTJForQuestionAnswering"),vxt.forEach(t),eir=r(yje," (GPT-J model)"),yje.forEach(t),oir=i(X),TM=n(X,"LI",{});var xje=s(TM);N1e=n(xje,"STRONG",{});var Fxt=s(N1e);rir=r(Fxt,"ibert"),Fxt.forEach(t),tir=r(xje," \u2014 "),EU=n(xje,"A",{href:!0});var Txt=s(EU);air=r(Txt,"IBertForQuestionAnswering"),Txt.forEach(t),nir=r(xje," (I-BERT model)"),xje.forEach(t),sir=i(X),MM=n(X,"LI",{});var $je=s(MM);q1e=n($je,"STRONG",{});var Mxt=s(q1e);lir=r(Mxt,"layoutlmv2"),Mxt.forEach(t),iir=r($je," \u2014 "),CU=n($je,"A",{href:!0});var Ext=s(CU);dir=r(Ext,"LayoutLMv2ForQuestionAnswering"),Ext.forEach(t),cir=r($je," (LayoutLMv2 model)"),$je.forEach(t),mir=i(X),EM=n(X,"LI",{});var kje=s(EM);j1e=n(kje,"STRONG",{});var Cxt=s(j1e);fir=r(Cxt,"layoutlmv3"),Cxt.forEach(t),gir=r(kje," \u2014 "),wU=n(kje,"A",{href:!0});var wxt=s(wU);hir=r(wxt,"LayoutLMv3ForQuestionAnswering"),wxt.forEach(t),uir=r(kje," (LayoutLMv3 model)"),kje.forEach(t),pir=i(X),CM=n(X,"LI",{});var Sje=s(CM);D1e=n(Sje,"STRONG",{});var Axt=s(D1e);_ir=r(Axt,"led"),Axt.forEach(t),bir=r(Sje," \u2014 "),AU=n(Sje,"A",{href:!0});var Lxt=s(AU);vir=r(Lxt,"LEDForQuestionAnswering"),Lxt.forEach(t),Fir=r(Sje," (LED model)"),Sje.forEach(t),Tir=i(X),wM=n(X,"LI",{});var Rje=s(wM);G1e=n(Rje,"STRONG",{});var yxt=s(G1e);Mir=r(yxt,"longformer"),yxt.forEach(t),Eir=r(Rje," \u2014 "),LU=n(Rje,"A",{href:!0});var xxt=s(LU);Cir=r(xxt,"LongformerForQuestionAnswering"),xxt.forEach(t),wir=r(Rje," (Longformer model)"),Rje.forEach(t),Air=i(X),AM=n(X,"LI",{});var Pje=s(AM);O1e=n(Pje,"STRONG",{});var $xt=s(O1e);Lir=r($xt,"luke"),$xt.forEach(t),yir=r(Pje," \u2014 "),yU=n(Pje,"A",{href:!0});var kxt=s(yU);xir=r(kxt,"LukeForQuestionAnswering"),kxt.forEach(t),$ir=r(Pje," (LUKE model)"),Pje.forEach(t),kir=i(X),LM=n(X,"LI",{});var Bje=s(LM);V1e=n(Bje,"STRONG",{});var Sxt=s(V1e);Sir=r(Sxt,"lxmert"),Sxt.forEach(t),Rir=r(Bje," \u2014 "),xU=n(Bje,"A",{href:!0});var Rxt=s(xU);Pir=r(Rxt,"LxmertForQuestionAnswering"),Rxt.forEach(t),Bir=r(Bje," (LXMERT model)"),Bje.forEach(t),Iir=i(X),yM=n(X,"LI",{});var Ije=s(yM);X1e=n(Ije,"STRONG",{});var Pxt=s(X1e);Nir=r(Pxt,"mbart"),Pxt.forEach(t),qir=r(Ije," \u2014 "),$U=n(Ije,"A",{href:!0});var Bxt=s($U);jir=r(Bxt,"MBartForQuestionAnswering"),Bxt.forEach(t),Dir=r(Ije," (mBART model)"),Ije.forEach(t),Gir=i(X),xM=n(X,"LI",{});var Nje=s(xM);z1e=n(Nje,"STRONG",{});var Ixt=s(z1e);Oir=r(Ixt,"megatron-bert"),Ixt.forEach(t),Vir=r(Nje," \u2014 "),kU=n(Nje,"A",{href:!0});var Nxt=s(kU);Xir=r(Nxt,"MegatronBertForQuestionAnswering"),Nxt.forEach(t),zir=r(Nje," (Megatron-BERT model)"),Nje.forEach(t),Wir=i(X),$M=n(X,"LI",{});var qje=s($M);W1e=n(qje,"STRONG",{});var qxt=s(W1e);Qir=r(qxt,"mobilebert"),qxt.forEach(t),Uir=r(qje," \u2014 "),SU=n(qje,"A",{href:!0});var jxt=s(SU);Hir=r(jxt,"MobileBertForQuestionAnswering"),jxt.forEach(t),Jir=r(qje," (MobileBERT model)"),qje.forEach(t),Yir=i(X),kM=n(X,"LI",{});var jje=s(kM);Q1e=n(jje,"STRONG",{});var Dxt=s(Q1e);Kir=r(Dxt,"mpnet"),Dxt.forEach(t),Zir=r(jje," \u2014 "),RU=n(jje,"A",{href:!0});var Gxt=s(RU);edr=r(Gxt,"MPNetForQuestionAnswering"),Gxt.forEach(t),odr=r(jje," (MPNet model)"),jje.forEach(t),rdr=i(X),SM=n(X,"LI",{});var Dje=s(SM);U1e=n(Dje,"STRONG",{});var Oxt=s(U1e);tdr=r(Oxt,"mvp"),Oxt.forEach(t),adr=r(Dje," \u2014 "),PU=n(Dje,"A",{href:!0});var Vxt=s(PU);ndr=r(Vxt,"MvpForQuestionAnswering"),Vxt.forEach(t),sdr=r(Dje," (MVP model)"),Dje.forEach(t),ldr=i(X),RM=n(X,"LI",{});var Gje=s(RM);H1e=n(Gje,"STRONG",{});var Xxt=s(H1e);idr=r(Xxt,"nezha"),Xxt.forEach(t),ddr=r(Gje," \u2014 "),BU=n(Gje,"A",{href:!0});var zxt=s(BU);cdr=r(zxt,"NezhaForQuestionAnswering"),zxt.forEach(t),mdr=r(Gje," (Nezha model)"),Gje.forEach(t),fdr=i(X),PM=n(X,"LI",{});var Oje=s(PM);J1e=n(Oje,"STRONG",{});var Wxt=s(J1e);gdr=r(Wxt,"nystromformer"),Wxt.forEach(t),hdr=r(Oje," \u2014 "),IU=n(Oje,"A",{href:!0});var Qxt=s(IU);udr=r(Qxt,"NystromformerForQuestionAnswering"),Qxt.forEach(t),pdr=r(Oje," (Nystr\xF6mformer model)"),Oje.forEach(t),_dr=i(X),BM=n(X,"LI",{});var Vje=s(BM);Y1e=n(Vje,"STRONG",{});var Uxt=s(Y1e);bdr=r(Uxt,"qdqbert"),Uxt.forEach(t),vdr=r(Vje," \u2014 "),NU=n(Vje,"A",{href:!0});var Hxt=s(NU);Fdr=r(Hxt,"QDQBertForQuestionAnswering"),Hxt.forEach(t),Tdr=r(Vje," (QDQBert model)"),Vje.forEach(t),Mdr=i(X),IM=n(X,"LI",{});var Xje=s(IM);K1e=n(Xje,"STRONG",{});var Jxt=s(K1e);Edr=r(Jxt,"reformer"),Jxt.forEach(t),Cdr=r(Xje," \u2014 "),qU=n(Xje,"A",{href:!0});var Yxt=s(qU);wdr=r(Yxt,"ReformerForQuestionAnswering"),Yxt.forEach(t),Adr=r(Xje," (Reformer model)"),Xje.forEach(t),Ldr=i(X),NM=n(X,"LI",{});var zje=s(NM);Z1e=n(zje,"STRONG",{});var Kxt=s(Z1e);ydr=r(Kxt,"rembert"),Kxt.forEach(t),xdr=r(zje," \u2014 "),jU=n(zje,"A",{href:!0});var Zxt=s(jU);$dr=r(Zxt,"RemBertForQuestionAnswering"),Zxt.forEach(t),kdr=r(zje," (RemBERT model)"),zje.forEach(t),Sdr=i(X),qM=n(X,"LI",{});var Wje=s(qM);eFe=n(Wje,"STRONG",{});var e$t=s(eFe);Rdr=r(e$t,"roberta"),e$t.forEach(t),Pdr=r(Wje," \u2014 "),DU=n(Wje,"A",{href:!0});var o$t=s(DU);Bdr=r(o$t,"RobertaForQuestionAnswering"),o$t.forEach(t),Idr=r(Wje," (RoBERTa model)"),Wje.forEach(t),Ndr=i(X),jM=n(X,"LI",{});var Qje=s(jM);oFe=n(Qje,"STRONG",{});var r$t=s(oFe);qdr=r(r$t,"roformer"),r$t.forEach(t),jdr=r(Qje," \u2014 "),GU=n(Qje,"A",{href:!0});var t$t=s(GU);Ddr=r(t$t,"RoFormerForQuestionAnswering"),t$t.forEach(t),Gdr=r(Qje," (RoFormer model)"),Qje.forEach(t),Odr=i(X),DM=n(X,"LI",{});var Uje=s(DM);rFe=n(Uje,"STRONG",{});var a$t=s(rFe);Vdr=r(a$t,"splinter"),a$t.forEach(t),Xdr=r(Uje," \u2014 "),OU=n(Uje,"A",{href:!0});var n$t=s(OU);zdr=r(n$t,"SplinterForQuestionAnswering"),n$t.forEach(t),Wdr=r(Uje," (Splinter model)"),Uje.forEach(t),Qdr=i(X),GM=n(X,"LI",{});var Hje=s(GM);tFe=n(Hje,"STRONG",{});var s$t=s(tFe);Udr=r(s$t,"squeezebert"),s$t.forEach(t),Hdr=r(Hje," \u2014 "),VU=n(Hje,"A",{href:!0});var l$t=s(VU);Jdr=r(l$t,"SqueezeBertForQuestionAnswering"),l$t.forEach(t),Ydr=r(Hje," (SqueezeBERT model)"),Hje.forEach(t),Kdr=i(X),OM=n(X,"LI",{});var Jje=s(OM);aFe=n(Jje,"STRONG",{});var i$t=s(aFe);Zdr=r(i$t,"xlm"),i$t.forEach(t),ecr=r(Jje," \u2014 "),XU=n(Jje,"A",{href:!0});var d$t=s(XU);ocr=r(d$t,"XLMForQuestionAnsweringSimple"),d$t.forEach(t),rcr=r(Jje," (XLM model)"),Jje.forEach(t),tcr=i(X),VM=n(X,"LI",{});var Yje=s(VM);nFe=n(Yje,"STRONG",{});var c$t=s(nFe);acr=r(c$t,"xlm-roberta"),c$t.forEach(t),ncr=r(Yje," \u2014 "),zU=n(Yje,"A",{href:!0});var m$t=s(zU);scr=r(m$t,"XLMRobertaForQuestionAnswering"),m$t.forEach(t),lcr=r(Yje," (XLM-RoBERTa model)"),Yje.forEach(t),icr=i(X),XM=n(X,"LI",{});var Kje=s(XM);sFe=n(Kje,"STRONG",{});var f$t=s(sFe);dcr=r(f$t,"xlm-roberta-xl"),f$t.forEach(t),ccr=r(Kje," \u2014 "),WU=n(Kje,"A",{href:!0});var g$t=s(WU);mcr=r(g$t,"XLMRobertaXLForQuestionAnswering"),g$t.forEach(t),fcr=r(Kje," (XLM-RoBERTa-XL model)"),Kje.forEach(t),gcr=i(X),zM=n(X,"LI",{});var Zje=s(zM);lFe=n(Zje,"STRONG",{});var h$t=s(lFe);hcr=r(h$t,"xlnet"),h$t.forEach(t),ucr=r(Zje," \u2014 "),QU=n(Zje,"A",{href:!0});var u$t=s(QU);pcr=r(u$t,"XLNetForQuestionAnsweringSimple"),u$t.forEach(t),_cr=r(Zje," (XLNet model)"),Zje.forEach(t),bcr=i(X),WM=n(X,"LI",{});var eDe=s(WM);iFe=n(eDe,"STRONG",{});var p$t=s(iFe);vcr=r(p$t,"yoso"),p$t.forEach(t),Fcr=r(eDe," \u2014 "),UU=n(eDe,"A",{href:!0});var _$t=s(UU);Tcr=r(_$t,"YosoForQuestionAnswering"),_$t.forEach(t),Mcr=r(eDe," (YOSO model)"),eDe.forEach(t),X.forEach(t),Ecr=i(Ea),QM=n(Ea,"P",{});var oDe=s(QM);Ccr=r(oDe,"The model is set in evaluation mode by default using "),dFe=n(oDe,"CODE",{});var b$t=s(dFe);wcr=r(b$t,"model.eval()"),b$t.forEach(t),Acr=r(oDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cFe=n(oDe,"CODE",{});var v$t=s(cFe);Lcr=r(v$t,"model.train()"),v$t.forEach(t),oDe.forEach(t),ycr=i(Ea),T(UM.$$.fragment,Ea),Ea.forEach(t),El.forEach(t),tUe=i(m),Sd=n(m,"H2",{class:!0});var gJe=s(Sd);HM=n(gJe,"A",{id:!0,class:!0,href:!0});var F$t=s(HM);mFe=n(F$t,"SPAN",{});var T$t=s(mFe);T(k9.$$.fragment,T$t),T$t.forEach(t),F$t.forEach(t),xcr=i(gJe),fFe=n(gJe,"SPAN",{});var M$t=s(fFe);$cr=r(M$t,"AutoModelForTableQuestionAnswering"),M$t.forEach(t),gJe.forEach(t),aUe=i(m),Vo=n(m,"DIV",{class:!0});var Cl=s(Vo);T(S9.$$.fragment,Cl),kcr=i(Cl),Rd=n(Cl,"P",{});var Kae=s(Rd);Scr=r(Kae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),HU=n(Kae,"A",{href:!0});var E$t=s(HU);Rcr=r(E$t,"from_pretrained()"),E$t.forEach(t),Pcr=r(Kae," class method or the "),JU=n(Kae,"A",{href:!0});var C$t=s(JU);Bcr=r(C$t,"from_config()"),C$t.forEach(t),Icr=r(Kae,` class
method.`),Kae.forEach(t),Ncr=i(Cl),R9=n(Cl,"P",{});var hJe=s(R9);qcr=r(hJe,"This class cannot be instantiated directly using "),gFe=n(hJe,"CODE",{});var w$t=s(gFe);jcr=r(w$t,"__init__()"),w$t.forEach(t),Dcr=r(hJe," (throws an error)."),hJe.forEach(t),Gcr=i(Cl),Mt=n(Cl,"DIV",{class:!0});var yL=s(Mt);T(P9.$$.fragment,yL),Ocr=i(yL),hFe=n(yL,"P",{});var A$t=s(hFe);Vcr=r(A$t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),A$t.forEach(t),Xcr=i(yL),Pd=n(yL,"P",{});var Zae=s(Pd);zcr=r(Zae,`Note:
Loading a model from its configuration file does `),uFe=n(Zae,"STRONG",{});var L$t=s(uFe);Wcr=r(L$t,"not"),L$t.forEach(t),Qcr=r(Zae,` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=n(Zae,"A",{href:!0});var y$t=s(YU);Ucr=r(y$t,"from_pretrained()"),y$t.forEach(t),Hcr=r(Zae," to load the model weights."),Zae.forEach(t),Jcr=i(yL),T(JM.$$.fragment,yL),yL.forEach(t),Ycr=i(Cl),lo=n(Cl,"DIV",{class:!0});var Ca=s(lo);T(B9.$$.fragment,Ca),Kcr=i(Ca),pFe=n(Ca,"P",{});var x$t=s(pFe);Zcr=r(x$t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),x$t.forEach(t),emr=i(Ca),Za=n(Ca,"P",{});var xL=s(Za);omr=r(xL,"The model class to instantiate is selected based on the "),_Fe=n(xL,"CODE",{});var $$t=s(_Fe);rmr=r($$t,"model_type"),$$t.forEach(t),tmr=r(xL,` property of the config object (either
passed as an argument or loaded from `),bFe=n(xL,"CODE",{});var k$t=s(bFe);amr=r(k$t,"pretrained_model_name_or_path"),k$t.forEach(t),nmr=r(xL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vFe=n(xL,"CODE",{});var S$t=s(vFe);smr=r(S$t,"pretrained_model_name_or_path"),S$t.forEach(t),lmr=r(xL,":"),xL.forEach(t),imr=i(Ca),FFe=n(Ca,"UL",{});var R$t=s(FFe);YM=n(R$t,"LI",{});var rDe=s(YM);TFe=n(rDe,"STRONG",{});var P$t=s(TFe);dmr=r(P$t,"tapas"),P$t.forEach(t),cmr=r(rDe," \u2014 "),KU=n(rDe,"A",{href:!0});var B$t=s(KU);mmr=r(B$t,"TapasForQuestionAnswering"),B$t.forEach(t),fmr=r(rDe," (TAPAS model)"),rDe.forEach(t),R$t.forEach(t),gmr=i(Ca),KM=n(Ca,"P",{});var tDe=s(KM);hmr=r(tDe,"The model is set in evaluation mode by default using "),MFe=n(tDe,"CODE",{});var I$t=s(MFe);umr=r(I$t,"model.eval()"),I$t.forEach(t),pmr=r(tDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),EFe=n(tDe,"CODE",{});var N$t=s(EFe);_mr=r(N$t,"model.train()"),N$t.forEach(t),tDe.forEach(t),bmr=i(Ca),T(ZM.$$.fragment,Ca),Ca.forEach(t),Cl.forEach(t),nUe=i(m),Bd=n(m,"H2",{class:!0});var uJe=s(Bd);eE=n(uJe,"A",{id:!0,class:!0,href:!0});var q$t=s(eE);CFe=n(q$t,"SPAN",{});var j$t=s(CFe);T(I9.$$.fragment,j$t),j$t.forEach(t),q$t.forEach(t),vmr=i(uJe),wFe=n(uJe,"SPAN",{});var D$t=s(wFe);Fmr=r(D$t,"AutoModelForImageClassification"),D$t.forEach(t),uJe.forEach(t),sUe=i(m),Xo=n(m,"DIV",{class:!0});var wl=s(Xo);T(N9.$$.fragment,wl),Tmr=i(wl),Id=n(wl,"P",{});var ene=s(Id);Mmr=r(ene,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ZU=n(ene,"A",{href:!0});var G$t=s(ZU);Emr=r(G$t,"from_pretrained()"),G$t.forEach(t),Cmr=r(ene," class method or the "),eH=n(ene,"A",{href:!0});var O$t=s(eH);wmr=r(O$t,"from_config()"),O$t.forEach(t),Amr=r(ene,` class
method.`),ene.forEach(t),Lmr=i(wl),q9=n(wl,"P",{});var pJe=s(q9);ymr=r(pJe,"This class cannot be instantiated directly using "),AFe=n(pJe,"CODE",{});var V$t=s(AFe);xmr=r(V$t,"__init__()"),V$t.forEach(t),$mr=r(pJe," (throws an error)."),pJe.forEach(t),kmr=i(wl),Et=n(wl,"DIV",{class:!0});var $L=s(Et);T(j9.$$.fragment,$L),Smr=i($L),LFe=n($L,"P",{});var X$t=s(LFe);Rmr=r(X$t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),X$t.forEach(t),Pmr=i($L),Nd=n($L,"P",{});var one=s(Nd);Bmr=r(one,`Note:
Loading a model from its configuration file does `),yFe=n(one,"STRONG",{});var z$t=s(yFe);Imr=r(z$t,"not"),z$t.forEach(t),Nmr=r(one,` load the model weights. It only affects the
model\u2019s configuration. Use `),oH=n(one,"A",{href:!0});var W$t=s(oH);qmr=r(W$t,"from_pretrained()"),W$t.forEach(t),jmr=r(one," to load the model weights."),one.forEach(t),Dmr=i($L),T(oE.$$.fragment,$L),$L.forEach(t),Gmr=i(wl),io=n(wl,"DIV",{class:!0});var wa=s(io);T(D9.$$.fragment,wa),Omr=i(wa),xFe=n(wa,"P",{});var Q$t=s(xFe);Vmr=r(Q$t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Q$t.forEach(t),Xmr=i(wa),en=n(wa,"P",{});var kL=s(en);zmr=r(kL,"The model class to instantiate is selected based on the "),$Fe=n(kL,"CODE",{});var U$t=s($Fe);Wmr=r(U$t,"model_type"),U$t.forEach(t),Qmr=r(kL,` property of the config object (either
passed as an argument or loaded from `),kFe=n(kL,"CODE",{});var H$t=s(kFe);Umr=r(H$t,"pretrained_model_name_or_path"),H$t.forEach(t),Hmr=r(kL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SFe=n(kL,"CODE",{});var J$t=s(SFe);Jmr=r(J$t,"pretrained_model_name_or_path"),J$t.forEach(t),Ymr=r(kL,":"),kL.forEach(t),Kmr=i(wa),be=n(wa,"UL",{});var Fe=s(be);rE=n(Fe,"LI",{});var aDe=s(rE);RFe=n(aDe,"STRONG",{});var Y$t=s(RFe);Zmr=r(Y$t,"beit"),Y$t.forEach(t),efr=r(aDe," \u2014 "),rH=n(aDe,"A",{href:!0});var K$t=s(rH);ofr=r(K$t,"BeitForImageClassification"),K$t.forEach(t),rfr=r(aDe," (BEiT model)"),aDe.forEach(t),tfr=i(Fe),tE=n(Fe,"LI",{});var nDe=s(tE);PFe=n(nDe,"STRONG",{});var Z$t=s(PFe);afr=r(Z$t,"convnext"),Z$t.forEach(t),nfr=r(nDe," \u2014 "),tH=n(nDe,"A",{href:!0});var ekt=s(tH);sfr=r(ekt,"ConvNextForImageClassification"),ekt.forEach(t),lfr=r(nDe," (ConvNeXT model)"),nDe.forEach(t),ifr=i(Fe),aE=n(Fe,"LI",{});var sDe=s(aE);BFe=n(sDe,"STRONG",{});var okt=s(BFe);dfr=r(okt,"cvt"),okt.forEach(t),cfr=r(sDe," \u2014 "),aH=n(sDe,"A",{href:!0});var rkt=s(aH);mfr=r(rkt,"CvtForImageClassification"),rkt.forEach(t),ffr=r(sDe," (CvT model)"),sDe.forEach(t),gfr=i(Fe),nE=n(Fe,"LI",{});var lDe=s(nE);IFe=n(lDe,"STRONG",{});var tkt=s(IFe);hfr=r(tkt,"data2vec-vision"),tkt.forEach(t),ufr=r(lDe," \u2014 "),nH=n(lDe,"A",{href:!0});var akt=s(nH);pfr=r(akt,"Data2VecVisionForImageClassification"),akt.forEach(t),_fr=r(lDe," (Data2VecVision model)"),lDe.forEach(t),bfr=i(Fe),sl=n(Fe,"LI",{});var HR=s(sl);NFe=n(HR,"STRONG",{});var nkt=s(NFe);vfr=r(nkt,"deit"),nkt.forEach(t),Ffr=r(HR," \u2014 "),sH=n(HR,"A",{href:!0});var skt=s(sH);Tfr=r(skt,"DeiTForImageClassification"),skt.forEach(t),Mfr=r(HR," or "),lH=n(HR,"A",{href:!0});var lkt=s(lH);Efr=r(lkt,"DeiTForImageClassificationWithTeacher"),lkt.forEach(t),Cfr=r(HR," (DeiT model)"),HR.forEach(t),wfr=i(Fe),sE=n(Fe,"LI",{});var iDe=s(sE);qFe=n(iDe,"STRONG",{});var ikt=s(qFe);Afr=r(ikt,"imagegpt"),ikt.forEach(t),Lfr=r(iDe," \u2014 "),iH=n(iDe,"A",{href:!0});var dkt=s(iH);yfr=r(dkt,"ImageGPTForImageClassification"),dkt.forEach(t),xfr=r(iDe," (ImageGPT model)"),iDe.forEach(t),$fr=i(Fe),ll=n(Fe,"LI",{});var JR=s(ll);jFe=n(JR,"STRONG",{});var ckt=s(jFe);kfr=r(ckt,"levit"),ckt.forEach(t),Sfr=r(JR," \u2014 "),dH=n(JR,"A",{href:!0});var mkt=s(dH);Rfr=r(mkt,"LevitForImageClassification"),mkt.forEach(t),Pfr=r(JR," or "),cH=n(JR,"A",{href:!0});var fkt=s(cH);Bfr=r(fkt,"LevitForImageClassificationWithTeacher"),fkt.forEach(t),Ifr=r(JR," (LeViT model)"),JR.forEach(t),Nfr=i(Fe),lE=n(Fe,"LI",{});var dDe=s(lE);DFe=n(dDe,"STRONG",{});var gkt=s(DFe);qfr=r(gkt,"mobilevit"),gkt.forEach(t),jfr=r(dDe," \u2014 "),mH=n(dDe,"A",{href:!0});var hkt=s(mH);Dfr=r(hkt,"MobileViTForImageClassification"),hkt.forEach(t),Gfr=r(dDe," (MobileViT model)"),dDe.forEach(t),Ofr=i(Fe),Ct=n(Fe,"LI",{});var Km=s(Ct);GFe=n(Km,"STRONG",{});var ukt=s(GFe);Vfr=r(ukt,"perceiver"),ukt.forEach(t),Xfr=r(Km," \u2014 "),fH=n(Km,"A",{href:!0});var pkt=s(fH);zfr=r(pkt,"PerceiverForImageClassificationLearned"),pkt.forEach(t),Wfr=r(Km," or "),gH=n(Km,"A",{href:!0});var _kt=s(gH);Qfr=r(_kt,"PerceiverForImageClassificationFourier"),_kt.forEach(t),Ufr=r(Km," or "),hH=n(Km,"A",{href:!0});var bkt=s(hH);Hfr=r(bkt,"PerceiverForImageClassificationConvProcessing"),bkt.forEach(t),Jfr=r(Km," (Perceiver model)"),Km.forEach(t),Yfr=i(Fe),iE=n(Fe,"LI",{});var cDe=s(iE);OFe=n(cDe,"STRONG",{});var vkt=s(OFe);Kfr=r(vkt,"poolformer"),vkt.forEach(t),Zfr=r(cDe," \u2014 "),uH=n(cDe,"A",{href:!0});var Fkt=s(uH);egr=r(Fkt,"PoolFormerForImageClassification"),Fkt.forEach(t),ogr=r(cDe," (PoolFormer model)"),cDe.forEach(t),rgr=i(Fe),dE=n(Fe,"LI",{});var mDe=s(dE);VFe=n(mDe,"STRONG",{});var Tkt=s(VFe);tgr=r(Tkt,"regnet"),Tkt.forEach(t),agr=r(mDe," \u2014 "),pH=n(mDe,"A",{href:!0});var Mkt=s(pH);ngr=r(Mkt,"RegNetForImageClassification"),Mkt.forEach(t),sgr=r(mDe," (RegNet model)"),mDe.forEach(t),lgr=i(Fe),cE=n(Fe,"LI",{});var fDe=s(cE);XFe=n(fDe,"STRONG",{});var Ekt=s(XFe);igr=r(Ekt,"resnet"),Ekt.forEach(t),dgr=r(fDe," \u2014 "),_H=n(fDe,"A",{href:!0});var Ckt=s(_H);cgr=r(Ckt,"ResNetForImageClassification"),Ckt.forEach(t),mgr=r(fDe," (ResNet model)"),fDe.forEach(t),fgr=i(Fe),mE=n(Fe,"LI",{});var gDe=s(mE);zFe=n(gDe,"STRONG",{});var wkt=s(zFe);ggr=r(wkt,"segformer"),wkt.forEach(t),hgr=r(gDe," \u2014 "),bH=n(gDe,"A",{href:!0});var Akt=s(bH);ugr=r(Akt,"SegformerForImageClassification"),Akt.forEach(t),pgr=r(gDe," (SegFormer model)"),gDe.forEach(t),_gr=i(Fe),fE=n(Fe,"LI",{});var hDe=s(fE);WFe=n(hDe,"STRONG",{});var Lkt=s(WFe);bgr=r(Lkt,"swin"),Lkt.forEach(t),vgr=r(hDe," \u2014 "),vH=n(hDe,"A",{href:!0});var ykt=s(vH);Fgr=r(ykt,"SwinForImageClassification"),ykt.forEach(t),Tgr=r(hDe," (Swin Transformer model)"),hDe.forEach(t),Mgr=i(Fe),gE=n(Fe,"LI",{});var uDe=s(gE);QFe=n(uDe,"STRONG",{});var xkt=s(QFe);Egr=r(xkt,"swinv2"),xkt.forEach(t),Cgr=r(uDe," \u2014 "),FH=n(uDe,"A",{href:!0});var $kt=s(FH);wgr=r($kt,"Swinv2ForImageClassification"),$kt.forEach(t),Agr=r(uDe," (Swin Transformer V2 model)"),uDe.forEach(t),Lgr=i(Fe),hE=n(Fe,"LI",{});var pDe=s(hE);UFe=n(pDe,"STRONG",{});var kkt=s(UFe);ygr=r(kkt,"van"),kkt.forEach(t),xgr=r(pDe," \u2014 "),TH=n(pDe,"A",{href:!0});var Skt=s(TH);$gr=r(Skt,"VanForImageClassification"),Skt.forEach(t),kgr=r(pDe," (VAN model)"),pDe.forEach(t),Sgr=i(Fe),uE=n(Fe,"LI",{});var _De=s(uE);HFe=n(_De,"STRONG",{});var Rkt=s(HFe);Rgr=r(Rkt,"vit"),Rkt.forEach(t),Pgr=r(_De," \u2014 "),MH=n(_De,"A",{href:!0});var Pkt=s(MH);Bgr=r(Pkt,"ViTForImageClassification"),Pkt.forEach(t),Igr=r(_De," (ViT model)"),_De.forEach(t),Fe.forEach(t),Ngr=i(wa),pE=n(wa,"P",{});var bDe=s(pE);qgr=r(bDe,"The model is set in evaluation mode by default using "),JFe=n(bDe,"CODE",{});var Bkt=s(JFe);jgr=r(Bkt,"model.eval()"),Bkt.forEach(t),Dgr=r(bDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),YFe=n(bDe,"CODE",{});var Ikt=s(YFe);Ggr=r(Ikt,"model.train()"),Ikt.forEach(t),bDe.forEach(t),Ogr=i(wa),T(_E.$$.fragment,wa),wa.forEach(t),wl.forEach(t),lUe=i(m),qd=n(m,"H2",{class:!0});var _Je=s(qd);bE=n(_Je,"A",{id:!0,class:!0,href:!0});var Nkt=s(bE);KFe=n(Nkt,"SPAN",{});var qkt=s(KFe);T(G9.$$.fragment,qkt),qkt.forEach(t),Nkt.forEach(t),Vgr=i(_Je),ZFe=n(_Je,"SPAN",{});var jkt=s(ZFe);Xgr=r(jkt,"AutoModelForVideoClassification"),jkt.forEach(t),_Je.forEach(t),iUe=i(m),zo=n(m,"DIV",{class:!0});var Al=s(zo);T(O9.$$.fragment,Al),zgr=i(Al),jd=n(Al,"P",{});var rne=s(jd);Wgr=r(rne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),EH=n(rne,"A",{href:!0});var Dkt=s(EH);Qgr=r(Dkt,"from_pretrained()"),Dkt.forEach(t),Ugr=r(rne," class method or the "),CH=n(rne,"A",{href:!0});var Gkt=s(CH);Hgr=r(Gkt,"from_config()"),Gkt.forEach(t),Jgr=r(rne,` class
method.`),rne.forEach(t),Ygr=i(Al),V9=n(Al,"P",{});var bJe=s(V9);Kgr=r(bJe,"This class cannot be instantiated directly using "),eTe=n(bJe,"CODE",{});var Okt=s(eTe);Zgr=r(Okt,"__init__()"),Okt.forEach(t),ehr=r(bJe," (throws an error)."),bJe.forEach(t),ohr=i(Al),wt=n(Al,"DIV",{class:!0});var SL=s(wt);T(X9.$$.fragment,SL),rhr=i(SL),oTe=n(SL,"P",{});var Vkt=s(oTe);thr=r(Vkt,"Instantiates one of the model classes of the library (with a video classification head) from a configuration."),Vkt.forEach(t),ahr=i(SL),Dd=n(SL,"P",{});var tne=s(Dd);nhr=r(tne,`Note:
Loading a model from its configuration file does `),rTe=n(tne,"STRONG",{});var Xkt=s(rTe);shr=r(Xkt,"not"),Xkt.forEach(t),lhr=r(tne,` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=n(tne,"A",{href:!0});var zkt=s(wH);ihr=r(zkt,"from_pretrained()"),zkt.forEach(t),dhr=r(tne," to load the model weights."),tne.forEach(t),chr=i(SL),T(vE.$$.fragment,SL),SL.forEach(t),mhr=i(Al),co=n(Al,"DIV",{class:!0});var Aa=s(co);T(z9.$$.fragment,Aa),fhr=i(Aa),tTe=n(Aa,"P",{});var Wkt=s(tTe);ghr=r(Wkt,"Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),Wkt.forEach(t),hhr=i(Aa),on=n(Aa,"P",{});var RL=s(on);uhr=r(RL,"The model class to instantiate is selected based on the "),aTe=n(RL,"CODE",{});var Qkt=s(aTe);phr=r(Qkt,"model_type"),Qkt.forEach(t),_hr=r(RL,` property of the config object (either
passed as an argument or loaded from `),nTe=n(RL,"CODE",{});var Ukt=s(nTe);bhr=r(Ukt,"pretrained_model_name_or_path"),Ukt.forEach(t),vhr=r(RL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sTe=n(RL,"CODE",{});var Hkt=s(sTe);Fhr=r(Hkt,"pretrained_model_name_or_path"),Hkt.forEach(t),Thr=r(RL,":"),RL.forEach(t),Mhr=i(Aa),lTe=n(Aa,"UL",{});var Jkt=s(lTe);FE=n(Jkt,"LI",{});var vDe=s(FE);iTe=n(vDe,"STRONG",{});var Ykt=s(iTe);Ehr=r(Ykt,"videomae"),Ykt.forEach(t),Chr=r(vDe," \u2014 "),AH=n(vDe,"A",{href:!0});var Kkt=s(AH);whr=r(Kkt,"VideoMAEForVideoClassification"),Kkt.forEach(t),Ahr=r(vDe," (VideoMAE model)"),vDe.forEach(t),Jkt.forEach(t),Lhr=i(Aa),TE=n(Aa,"P",{});var FDe=s(TE);yhr=r(FDe,"The model is set in evaluation mode by default using "),dTe=n(FDe,"CODE",{});var Zkt=s(dTe);xhr=r(Zkt,"model.eval()"),Zkt.forEach(t),$hr=r(FDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cTe=n(FDe,"CODE",{});var eSt=s(cTe);khr=r(eSt,"model.train()"),eSt.forEach(t),FDe.forEach(t),Shr=i(Aa),T(ME.$$.fragment,Aa),Aa.forEach(t),Al.forEach(t),dUe=i(m),Gd=n(m,"H2",{class:!0});var vJe=s(Gd);EE=n(vJe,"A",{id:!0,class:!0,href:!0});var oSt=s(EE);mTe=n(oSt,"SPAN",{});var rSt=s(mTe);T(W9.$$.fragment,rSt),rSt.forEach(t),oSt.forEach(t),Rhr=i(vJe),fTe=n(vJe,"SPAN",{});var tSt=s(fTe);Phr=r(tSt,"AutoModelForVision2Seq"),tSt.forEach(t),vJe.forEach(t),cUe=i(m),Wo=n(m,"DIV",{class:!0});var Ll=s(Wo);T(Q9.$$.fragment,Ll),Bhr=i(Ll),Od=n(Ll,"P",{});var ane=s(Od);Ihr=r(ane,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),LH=n(ane,"A",{href:!0});var aSt=s(LH);Nhr=r(aSt,"from_pretrained()"),aSt.forEach(t),qhr=r(ane," class method or the "),yH=n(ane,"A",{href:!0});var nSt=s(yH);jhr=r(nSt,"from_config()"),nSt.forEach(t),Dhr=r(ane,` class
method.`),ane.forEach(t),Ghr=i(Ll),U9=n(Ll,"P",{});var FJe=s(U9);Ohr=r(FJe,"This class cannot be instantiated directly using "),gTe=n(FJe,"CODE",{});var sSt=s(gTe);Vhr=r(sSt,"__init__()"),sSt.forEach(t),Xhr=r(FJe," (throws an error)."),FJe.forEach(t),zhr=i(Ll),At=n(Ll,"DIV",{class:!0});var PL=s(At);T(H9.$$.fragment,PL),Whr=i(PL),hTe=n(PL,"P",{});var lSt=s(hTe);Qhr=r(lSt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),lSt.forEach(t),Uhr=i(PL),Vd=n(PL,"P",{});var nne=s(Vd);Hhr=r(nne,`Note:
Loading a model from its configuration file does `),uTe=n(nne,"STRONG",{});var iSt=s(uTe);Jhr=r(iSt,"not"),iSt.forEach(t),Yhr=r(nne,` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=n(nne,"A",{href:!0});var dSt=s(xH);Khr=r(dSt,"from_pretrained()"),dSt.forEach(t),Zhr=r(nne," to load the model weights."),nne.forEach(t),eur=i(PL),T(CE.$$.fragment,PL),PL.forEach(t),our=i(Ll),mo=n(Ll,"DIV",{class:!0});var La=s(mo);T(J9.$$.fragment,La),rur=i(La),pTe=n(La,"P",{});var cSt=s(pTe);tur=r(cSt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),cSt.forEach(t),aur=i(La),rn=n(La,"P",{});var BL=s(rn);nur=r(BL,"The model class to instantiate is selected based on the "),_Te=n(BL,"CODE",{});var mSt=s(_Te);sur=r(mSt,"model_type"),mSt.forEach(t),lur=r(BL,` property of the config object (either
passed as an argument or loaded from `),bTe=n(BL,"CODE",{});var fSt=s(bTe);iur=r(fSt,"pretrained_model_name_or_path"),fSt.forEach(t),dur=r(BL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vTe=n(BL,"CODE",{});var gSt=s(vTe);cur=r(gSt,"pretrained_model_name_or_path"),gSt.forEach(t),mur=r(BL,":"),BL.forEach(t),fur=i(La),FTe=n(La,"UL",{});var hSt=s(FTe);wE=n(hSt,"LI",{});var TDe=s(wE);TTe=n(TDe,"STRONG",{});var uSt=s(TTe);gur=r(uSt,"vision-encoder-decoder"),uSt.forEach(t),hur=r(TDe," \u2014 "),$H=n(TDe,"A",{href:!0});var pSt=s($H);uur=r(pSt,"VisionEncoderDecoderModel"),pSt.forEach(t),pur=r(TDe," (Vision Encoder decoder model)"),TDe.forEach(t),hSt.forEach(t),_ur=i(La),AE=n(La,"P",{});var MDe=s(AE);bur=r(MDe,"The model is set in evaluation mode by default using "),MTe=n(MDe,"CODE",{});var _St=s(MTe);vur=r(_St,"model.eval()"),_St.forEach(t),Fur=r(MDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ETe=n(MDe,"CODE",{});var bSt=s(ETe);Tur=r(bSt,"model.train()"),bSt.forEach(t),MDe.forEach(t),Mur=i(La),T(LE.$$.fragment,La),La.forEach(t),Ll.forEach(t),mUe=i(m),Xd=n(m,"H2",{class:!0});var TJe=s(Xd);yE=n(TJe,"A",{id:!0,class:!0,href:!0});var vSt=s(yE);CTe=n(vSt,"SPAN",{});var FSt=s(CTe);T(Y9.$$.fragment,FSt),FSt.forEach(t),vSt.forEach(t),Eur=i(TJe),wTe=n(TJe,"SPAN",{});var TSt=s(wTe);Cur=r(TSt,"AutoModelForVisualQuestionAnswering"),TSt.forEach(t),TJe.forEach(t),fUe=i(m),Qo=n(m,"DIV",{class:!0});var yl=s(Qo);T(K9.$$.fragment,yl),wur=i(yl),zd=n(yl,"P",{});var sne=s(zd);Aur=r(sne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),kH=n(sne,"A",{href:!0});var MSt=s(kH);Lur=r(MSt,"from_pretrained()"),MSt.forEach(t),yur=r(sne," class method or the "),SH=n(sne,"A",{href:!0});var ESt=s(SH);xur=r(ESt,"from_config()"),ESt.forEach(t),$ur=r(sne,` class
method.`),sne.forEach(t),kur=i(yl),Z9=n(yl,"P",{});var MJe=s(Z9);Sur=r(MJe,"This class cannot be instantiated directly using "),ATe=n(MJe,"CODE",{});var CSt=s(ATe);Rur=r(CSt,"__init__()"),CSt.forEach(t),Pur=r(MJe," (throws an error)."),MJe.forEach(t),Bur=i(yl),Lt=n(yl,"DIV",{class:!0});var IL=s(Lt);T(ex.$$.fragment,IL),Iur=i(IL),LTe=n(IL,"P",{});var wSt=s(LTe);Nur=r(wSt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),wSt.forEach(t),qur=i(IL),Wd=n(IL,"P",{});var lne=s(Wd);jur=r(lne,`Note:
Loading a model from its configuration file does `),yTe=n(lne,"STRONG",{});var ASt=s(yTe);Dur=r(ASt,"not"),ASt.forEach(t),Gur=r(lne,` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=n(lne,"A",{href:!0});var LSt=s(RH);Our=r(LSt,"from_pretrained()"),LSt.forEach(t),Vur=r(lne," to load the model weights."),lne.forEach(t),Xur=i(IL),T(xE.$$.fragment,IL),IL.forEach(t),zur=i(yl),fo=n(yl,"DIV",{class:!0});var ya=s(fo);T(ox.$$.fragment,ya),Wur=i(ya),xTe=n(ya,"P",{});var ySt=s(xTe);Qur=r(ySt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),ySt.forEach(t),Uur=i(ya),tn=n(ya,"P",{});var NL=s(tn);Hur=r(NL,"The model class to instantiate is selected based on the "),$Te=n(NL,"CODE",{});var xSt=s($Te);Jur=r(xSt,"model_type"),xSt.forEach(t),Yur=r(NL,` property of the config object (either
passed as an argument or loaded from `),kTe=n(NL,"CODE",{});var $St=s(kTe);Kur=r($St,"pretrained_model_name_or_path"),$St.forEach(t),Zur=r(NL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),STe=n(NL,"CODE",{});var kSt=s(STe);epr=r(kSt,"pretrained_model_name_or_path"),kSt.forEach(t),opr=r(NL,":"),NL.forEach(t),rpr=i(ya),RTe=n(ya,"UL",{});var SSt=s(RTe);$E=n(SSt,"LI",{});var EDe=s($E);PTe=n(EDe,"STRONG",{});var RSt=s(PTe);tpr=r(RSt,"vilt"),RSt.forEach(t),apr=r(EDe," \u2014 "),PH=n(EDe,"A",{href:!0});var PSt=s(PH);npr=r(PSt,"ViltForQuestionAnswering"),PSt.forEach(t),spr=r(EDe," (ViLT model)"),EDe.forEach(t),SSt.forEach(t),lpr=i(ya),kE=n(ya,"P",{});var CDe=s(kE);ipr=r(CDe,"The model is set in evaluation mode by default using "),BTe=n(CDe,"CODE",{});var BSt=s(BTe);dpr=r(BSt,"model.eval()"),BSt.forEach(t),cpr=r(CDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ITe=n(CDe,"CODE",{});var ISt=s(ITe);mpr=r(ISt,"model.train()"),ISt.forEach(t),CDe.forEach(t),fpr=i(ya),T(SE.$$.fragment,ya),ya.forEach(t),yl.forEach(t),gUe=i(m),Qd=n(m,"H2",{class:!0});var EJe=s(Qd);RE=n(EJe,"A",{id:!0,class:!0,href:!0});var NSt=s(RE);NTe=n(NSt,"SPAN",{});var qSt=s(NTe);T(rx.$$.fragment,qSt),qSt.forEach(t),NSt.forEach(t),gpr=i(EJe),qTe=n(EJe,"SPAN",{});var jSt=s(qTe);hpr=r(jSt,"AutoModelForAudioClassification"),jSt.forEach(t),EJe.forEach(t),hUe=i(m),Uo=n(m,"DIV",{class:!0});var xl=s(Uo);T(tx.$$.fragment,xl),upr=i(xl),Ud=n(xl,"P",{});var ine=s(Ud);ppr=r(ine,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),BH=n(ine,"A",{href:!0});var DSt=s(BH);_pr=r(DSt,"from_pretrained()"),DSt.forEach(t),bpr=r(ine," class method or the "),IH=n(ine,"A",{href:!0});var GSt=s(IH);vpr=r(GSt,"from_config()"),GSt.forEach(t),Fpr=r(ine,` class
method.`),ine.forEach(t),Tpr=i(xl),ax=n(xl,"P",{});var CJe=s(ax);Mpr=r(CJe,"This class cannot be instantiated directly using "),jTe=n(CJe,"CODE",{});var OSt=s(jTe);Epr=r(OSt,"__init__()"),OSt.forEach(t),Cpr=r(CJe," (throws an error)."),CJe.forEach(t),wpr=i(xl),yt=n(xl,"DIV",{class:!0});var qL=s(yt);T(nx.$$.fragment,qL),Apr=i(qL),DTe=n(qL,"P",{});var VSt=s(DTe);Lpr=r(VSt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),VSt.forEach(t),ypr=i(qL),Hd=n(qL,"P",{});var dne=s(Hd);xpr=r(dne,`Note:
Loading a model from its configuration file does `),GTe=n(dne,"STRONG",{});var XSt=s(GTe);$pr=r(XSt,"not"),XSt.forEach(t),kpr=r(dne,` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=n(dne,"A",{href:!0});var zSt=s(NH);Spr=r(zSt,"from_pretrained()"),zSt.forEach(t),Rpr=r(dne," to load the model weights."),dne.forEach(t),Ppr=i(qL),T(PE.$$.fragment,qL),qL.forEach(t),Bpr=i(xl),go=n(xl,"DIV",{class:!0});var xa=s(go);T(sx.$$.fragment,xa),Ipr=i(xa),OTe=n(xa,"P",{});var WSt=s(OTe);Npr=r(WSt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),WSt.forEach(t),qpr=i(xa),an=n(xa,"P",{});var jL=s(an);jpr=r(jL,"The model class to instantiate is selected based on the "),VTe=n(jL,"CODE",{});var QSt=s(VTe);Dpr=r(QSt,"model_type"),QSt.forEach(t),Gpr=r(jL,` property of the config object (either
passed as an argument or loaded from `),XTe=n(jL,"CODE",{});var USt=s(XTe);Opr=r(USt,"pretrained_model_name_or_path"),USt.forEach(t),Vpr=r(jL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zTe=n(jL,"CODE",{});var HSt=s(zTe);Xpr=r(HSt,"pretrained_model_name_or_path"),HSt.forEach(t),zpr=r(jL,":"),jL.forEach(t),Wpr=i(xa),Pe=n(xa,"UL",{});var We=s(Pe);BE=n(We,"LI",{});var wDe=s(BE);WTe=n(wDe,"STRONG",{});var JSt=s(WTe);Qpr=r(JSt,"data2vec-audio"),JSt.forEach(t),Upr=r(wDe," \u2014 "),qH=n(wDe,"A",{href:!0});var YSt=s(qH);Hpr=r(YSt,"Data2VecAudioForSequenceClassification"),YSt.forEach(t),Jpr=r(wDe," (Data2VecAudio model)"),wDe.forEach(t),Ypr=i(We),IE=n(We,"LI",{});var ADe=s(IE);QTe=n(ADe,"STRONG",{});var KSt=s(QTe);Kpr=r(KSt,"hubert"),KSt.forEach(t),Zpr=r(ADe," \u2014 "),jH=n(ADe,"A",{href:!0});var ZSt=s(jH);e_r=r(ZSt,"HubertForSequenceClassification"),ZSt.forEach(t),o_r=r(ADe," (Hubert model)"),ADe.forEach(t),r_r=i(We),NE=n(We,"LI",{});var LDe=s(NE);UTe=n(LDe,"STRONG",{});var eRt=s(UTe);t_r=r(eRt,"sew"),eRt.forEach(t),a_r=r(LDe," \u2014 "),DH=n(LDe,"A",{href:!0});var oRt=s(DH);n_r=r(oRt,"SEWForSequenceClassification"),oRt.forEach(t),s_r=r(LDe," (SEW model)"),LDe.forEach(t),l_r=i(We),qE=n(We,"LI",{});var yDe=s(qE);HTe=n(yDe,"STRONG",{});var rRt=s(HTe);i_r=r(rRt,"sew-d"),rRt.forEach(t),d_r=r(yDe," \u2014 "),GH=n(yDe,"A",{href:!0});var tRt=s(GH);c_r=r(tRt,"SEWDForSequenceClassification"),tRt.forEach(t),m_r=r(yDe," (SEW-D model)"),yDe.forEach(t),f_r=i(We),jE=n(We,"LI",{});var xDe=s(jE);JTe=n(xDe,"STRONG",{});var aRt=s(JTe);g_r=r(aRt,"unispeech"),aRt.forEach(t),h_r=r(xDe," \u2014 "),OH=n(xDe,"A",{href:!0});var nRt=s(OH);u_r=r(nRt,"UniSpeechForSequenceClassification"),nRt.forEach(t),p_r=r(xDe," (UniSpeech model)"),xDe.forEach(t),__r=i(We),DE=n(We,"LI",{});var $De=s(DE);YTe=n($De,"STRONG",{});var sRt=s(YTe);b_r=r(sRt,"unispeech-sat"),sRt.forEach(t),v_r=r($De," \u2014 "),VH=n($De,"A",{href:!0});var lRt=s(VH);F_r=r(lRt,"UniSpeechSatForSequenceClassification"),lRt.forEach(t),T_r=r($De," (UniSpeechSat model)"),$De.forEach(t),M_r=i(We),GE=n(We,"LI",{});var kDe=s(GE);KTe=n(kDe,"STRONG",{});var iRt=s(KTe);E_r=r(iRt,"wav2vec2"),iRt.forEach(t),C_r=r(kDe," \u2014 "),XH=n(kDe,"A",{href:!0});var dRt=s(XH);w_r=r(dRt,"Wav2Vec2ForSequenceClassification"),dRt.forEach(t),A_r=r(kDe," (Wav2Vec2 model)"),kDe.forEach(t),L_r=i(We),OE=n(We,"LI",{});var SDe=s(OE);ZTe=n(SDe,"STRONG",{});var cRt=s(ZTe);y_r=r(cRt,"wav2vec2-conformer"),cRt.forEach(t),x_r=r(SDe," \u2014 "),zH=n(SDe,"A",{href:!0});var mRt=s(zH);$_r=r(mRt,"Wav2Vec2ConformerForSequenceClassification"),mRt.forEach(t),k_r=r(SDe," (Wav2Vec2-Conformer model)"),SDe.forEach(t),S_r=i(We),VE=n(We,"LI",{});var RDe=s(VE);eMe=n(RDe,"STRONG",{});var fRt=s(eMe);R_r=r(fRt,"wavlm"),fRt.forEach(t),P_r=r(RDe," \u2014 "),WH=n(RDe,"A",{href:!0});var gRt=s(WH);B_r=r(gRt,"WavLMForSequenceClassification"),gRt.forEach(t),I_r=r(RDe," (WavLM model)"),RDe.forEach(t),We.forEach(t),N_r=i(xa),XE=n(xa,"P",{});var PDe=s(XE);q_r=r(PDe,"The model is set in evaluation mode by default using "),oMe=n(PDe,"CODE",{});var hRt=s(oMe);j_r=r(hRt,"model.eval()"),hRt.forEach(t),D_r=r(PDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rMe=n(PDe,"CODE",{});var uRt=s(rMe);G_r=r(uRt,"model.train()"),uRt.forEach(t),PDe.forEach(t),O_r=i(xa),T(zE.$$.fragment,xa),xa.forEach(t),xl.forEach(t),uUe=i(m),Jd=n(m,"H2",{class:!0});var wJe=s(Jd);WE=n(wJe,"A",{id:!0,class:!0,href:!0});var pRt=s(WE);tMe=n(pRt,"SPAN",{});var _Rt=s(tMe);T(lx.$$.fragment,_Rt),_Rt.forEach(t),pRt.forEach(t),V_r=i(wJe),aMe=n(wJe,"SPAN",{});var bRt=s(aMe);X_r=r(bRt,"AutoModelForAudioFrameClassification"),bRt.forEach(t),wJe.forEach(t),pUe=i(m),Ho=n(m,"DIV",{class:!0});var $l=s(Ho);T(ix.$$.fragment,$l),z_r=i($l),Yd=n($l,"P",{});var cne=s(Yd);W_r=r(cne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),QH=n(cne,"A",{href:!0});var vRt=s(QH);Q_r=r(vRt,"from_pretrained()"),vRt.forEach(t),U_r=r(cne," class method or the "),UH=n(cne,"A",{href:!0});var FRt=s(UH);H_r=r(FRt,"from_config()"),FRt.forEach(t),J_r=r(cne,` class
method.`),cne.forEach(t),Y_r=i($l),dx=n($l,"P",{});var AJe=s(dx);K_r=r(AJe,"This class cannot be instantiated directly using "),nMe=n(AJe,"CODE",{});var TRt=s(nMe);Z_r=r(TRt,"__init__()"),TRt.forEach(t),e2r=r(AJe," (throws an error)."),AJe.forEach(t),o2r=i($l),xt=n($l,"DIV",{class:!0});var DL=s(xt);T(cx.$$.fragment,DL),r2r=i(DL),sMe=n(DL,"P",{});var MRt=s(sMe);t2r=r(MRt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),MRt.forEach(t),a2r=i(DL),Kd=n(DL,"P",{});var mne=s(Kd);n2r=r(mne,`Note:
Loading a model from its configuration file does `),lMe=n(mne,"STRONG",{});var ERt=s(lMe);s2r=r(ERt,"not"),ERt.forEach(t),l2r=r(mne,` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=n(mne,"A",{href:!0});var CRt=s(HH);i2r=r(CRt,"from_pretrained()"),CRt.forEach(t),d2r=r(mne," to load the model weights."),mne.forEach(t),c2r=i(DL),T(QE.$$.fragment,DL),DL.forEach(t),m2r=i($l),ho=n($l,"DIV",{class:!0});var $a=s(ho);T(mx.$$.fragment,$a),f2r=i($a),iMe=n($a,"P",{});var wRt=s(iMe);g2r=r(wRt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),wRt.forEach(t),h2r=i($a),nn=n($a,"P",{});var GL=s(nn);u2r=r(GL,"The model class to instantiate is selected based on the "),dMe=n(GL,"CODE",{});var ARt=s(dMe);p2r=r(ARt,"model_type"),ARt.forEach(t),_2r=r(GL,` property of the config object (either
passed as an argument or loaded from `),cMe=n(GL,"CODE",{});var LRt=s(cMe);b2r=r(LRt,"pretrained_model_name_or_path"),LRt.forEach(t),v2r=r(GL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mMe=n(GL,"CODE",{});var yRt=s(mMe);F2r=r(yRt,"pretrained_model_name_or_path"),yRt.forEach(t),T2r=r(GL,":"),GL.forEach(t),M2r=i($a),st=n($a,"UL",{});var kl=s(st);UE=n(kl,"LI",{});var BDe=s(UE);fMe=n(BDe,"STRONG",{});var xRt=s(fMe);E2r=r(xRt,"data2vec-audio"),xRt.forEach(t),C2r=r(BDe," \u2014 "),JH=n(BDe,"A",{href:!0});var $Rt=s(JH);w2r=r($Rt,"Data2VecAudioForAudioFrameClassification"),$Rt.forEach(t),A2r=r(BDe," (Data2VecAudio model)"),BDe.forEach(t),L2r=i(kl),HE=n(kl,"LI",{});var IDe=s(HE);gMe=n(IDe,"STRONG",{});var kRt=s(gMe);y2r=r(kRt,"unispeech-sat"),kRt.forEach(t),x2r=r(IDe," \u2014 "),YH=n(IDe,"A",{href:!0});var SRt=s(YH);$2r=r(SRt,"UniSpeechSatForAudioFrameClassification"),SRt.forEach(t),k2r=r(IDe," (UniSpeechSat model)"),IDe.forEach(t),S2r=i(kl),JE=n(kl,"LI",{});var NDe=s(JE);hMe=n(NDe,"STRONG",{});var RRt=s(hMe);R2r=r(RRt,"wav2vec2"),RRt.forEach(t),P2r=r(NDe," \u2014 "),KH=n(NDe,"A",{href:!0});var PRt=s(KH);B2r=r(PRt,"Wav2Vec2ForAudioFrameClassification"),PRt.forEach(t),I2r=r(NDe," (Wav2Vec2 model)"),NDe.forEach(t),N2r=i(kl),YE=n(kl,"LI",{});var qDe=s(YE);uMe=n(qDe,"STRONG",{});var BRt=s(uMe);q2r=r(BRt,"wav2vec2-conformer"),BRt.forEach(t),j2r=r(qDe," \u2014 "),ZH=n(qDe,"A",{href:!0});var IRt=s(ZH);D2r=r(IRt,"Wav2Vec2ConformerForAudioFrameClassification"),IRt.forEach(t),G2r=r(qDe," (Wav2Vec2-Conformer model)"),qDe.forEach(t),O2r=i(kl),KE=n(kl,"LI",{});var jDe=s(KE);pMe=n(jDe,"STRONG",{});var NRt=s(pMe);V2r=r(NRt,"wavlm"),NRt.forEach(t),X2r=r(jDe," \u2014 "),eJ=n(jDe,"A",{href:!0});var qRt=s(eJ);z2r=r(qRt,"WavLMForAudioFrameClassification"),qRt.forEach(t),W2r=r(jDe," (WavLM model)"),jDe.forEach(t),kl.forEach(t),Q2r=i($a),ZE=n($a,"P",{});var DDe=s(ZE);U2r=r(DDe,"The model is set in evaluation mode by default using "),_Me=n(DDe,"CODE",{});var jRt=s(_Me);H2r=r(jRt,"model.eval()"),jRt.forEach(t),J2r=r(DDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bMe=n(DDe,"CODE",{});var DRt=s(bMe);Y2r=r(DRt,"model.train()"),DRt.forEach(t),DDe.forEach(t),K2r=i($a),T(e4.$$.fragment,$a),$a.forEach(t),$l.forEach(t),_Ue=i(m),Zd=n(m,"H2",{class:!0});var LJe=s(Zd);o4=n(LJe,"A",{id:!0,class:!0,href:!0});var GRt=s(o4);vMe=n(GRt,"SPAN",{});var ORt=s(vMe);T(fx.$$.fragment,ORt),ORt.forEach(t),GRt.forEach(t),Z2r=i(LJe),FMe=n(LJe,"SPAN",{});var VRt=s(FMe);ebr=r(VRt,"AutoModelForCTC"),VRt.forEach(t),LJe.forEach(t),bUe=i(m),Jo=n(m,"DIV",{class:!0});var Sl=s(Jo);T(gx.$$.fragment,Sl),obr=i(Sl),ec=n(Sl,"P",{});var fne=s(ec);rbr=r(fne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),oJ=n(fne,"A",{href:!0});var XRt=s(oJ);tbr=r(XRt,"from_pretrained()"),XRt.forEach(t),abr=r(fne," class method or the "),rJ=n(fne,"A",{href:!0});var zRt=s(rJ);nbr=r(zRt,"from_config()"),zRt.forEach(t),sbr=r(fne,` class
method.`),fne.forEach(t),lbr=i(Sl),hx=n(Sl,"P",{});var yJe=s(hx);ibr=r(yJe,"This class cannot be instantiated directly using "),TMe=n(yJe,"CODE",{});var WRt=s(TMe);dbr=r(WRt,"__init__()"),WRt.forEach(t),cbr=r(yJe," (throws an error)."),yJe.forEach(t),mbr=i(Sl),$t=n(Sl,"DIV",{class:!0});var OL=s($t);T(ux.$$.fragment,OL),fbr=i(OL),MMe=n(OL,"P",{});var QRt=s(MMe);gbr=r(QRt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),QRt.forEach(t),hbr=i(OL),oc=n(OL,"P",{});var gne=s(oc);ubr=r(gne,`Note:
Loading a model from its configuration file does `),EMe=n(gne,"STRONG",{});var URt=s(EMe);pbr=r(URt,"not"),URt.forEach(t),_br=r(gne,` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=n(gne,"A",{href:!0});var HRt=s(tJ);bbr=r(HRt,"from_pretrained()"),HRt.forEach(t),vbr=r(gne," to load the model weights."),gne.forEach(t),Fbr=i(OL),T(r4.$$.fragment,OL),OL.forEach(t),Tbr=i(Sl),uo=n(Sl,"DIV",{class:!0});var ka=s(uo);T(px.$$.fragment,ka),Mbr=i(ka),CMe=n(ka,"P",{});var JRt=s(CMe);Ebr=r(JRt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),JRt.forEach(t),Cbr=i(ka),sn=n(ka,"P",{});var VL=s(sn);wbr=r(VL,"The model class to instantiate is selected based on the "),wMe=n(VL,"CODE",{});var YRt=s(wMe);Abr=r(YRt,"model_type"),YRt.forEach(t),Lbr=r(VL,` property of the config object (either
passed as an argument or loaded from `),AMe=n(VL,"CODE",{});var KRt=s(AMe);ybr=r(KRt,"pretrained_model_name_or_path"),KRt.forEach(t),xbr=r(VL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LMe=n(VL,"CODE",{});var ZRt=s(LMe);$br=r(ZRt,"pretrained_model_name_or_path"),ZRt.forEach(t),kbr=r(VL,":"),VL.forEach(t),Sbr=i(ka),Le=n(ka,"UL",{});var Be=s(Le);t4=n(Be,"LI",{});var GDe=s(t4);yMe=n(GDe,"STRONG",{});var ePt=s(yMe);Rbr=r(ePt,"data2vec-audio"),ePt.forEach(t),Pbr=r(GDe," \u2014 "),aJ=n(GDe,"A",{href:!0});var oPt=s(aJ);Bbr=r(oPt,"Data2VecAudioForCTC"),oPt.forEach(t),Ibr=r(GDe," (Data2VecAudio model)"),GDe.forEach(t),Nbr=i(Be),a4=n(Be,"LI",{});var ODe=s(a4);xMe=n(ODe,"STRONG",{});var rPt=s(xMe);qbr=r(rPt,"hubert"),rPt.forEach(t),jbr=r(ODe," \u2014 "),nJ=n(ODe,"A",{href:!0});var tPt=s(nJ);Dbr=r(tPt,"HubertForCTC"),tPt.forEach(t),Gbr=r(ODe," (Hubert model)"),ODe.forEach(t),Obr=i(Be),n4=n(Be,"LI",{});var VDe=s(n4);$Me=n(VDe,"STRONG",{});var aPt=s($Me);Vbr=r(aPt,"mctct"),aPt.forEach(t),Xbr=r(VDe," \u2014 "),sJ=n(VDe,"A",{href:!0});var nPt=s(sJ);zbr=r(nPt,"MCTCTForCTC"),nPt.forEach(t),Wbr=r(VDe," (M-CTC-T model)"),VDe.forEach(t),Qbr=i(Be),s4=n(Be,"LI",{});var XDe=s(s4);kMe=n(XDe,"STRONG",{});var sPt=s(kMe);Ubr=r(sPt,"sew"),sPt.forEach(t),Hbr=r(XDe," \u2014 "),lJ=n(XDe,"A",{href:!0});var lPt=s(lJ);Jbr=r(lPt,"SEWForCTC"),lPt.forEach(t),Ybr=r(XDe," (SEW model)"),XDe.forEach(t),Kbr=i(Be),l4=n(Be,"LI",{});var zDe=s(l4);SMe=n(zDe,"STRONG",{});var iPt=s(SMe);Zbr=r(iPt,"sew-d"),iPt.forEach(t),evr=r(zDe," \u2014 "),iJ=n(zDe,"A",{href:!0});var dPt=s(iJ);ovr=r(dPt,"SEWDForCTC"),dPt.forEach(t),rvr=r(zDe," (SEW-D model)"),zDe.forEach(t),tvr=i(Be),i4=n(Be,"LI",{});var WDe=s(i4);RMe=n(WDe,"STRONG",{});var cPt=s(RMe);avr=r(cPt,"unispeech"),cPt.forEach(t),nvr=r(WDe," \u2014 "),dJ=n(WDe,"A",{href:!0});var mPt=s(dJ);svr=r(mPt,"UniSpeechForCTC"),mPt.forEach(t),lvr=r(WDe," (UniSpeech model)"),WDe.forEach(t),ivr=i(Be),d4=n(Be,"LI",{});var QDe=s(d4);PMe=n(QDe,"STRONG",{});var fPt=s(PMe);dvr=r(fPt,"unispeech-sat"),fPt.forEach(t),cvr=r(QDe," \u2014 "),cJ=n(QDe,"A",{href:!0});var gPt=s(cJ);mvr=r(gPt,"UniSpeechSatForCTC"),gPt.forEach(t),fvr=r(QDe," (UniSpeechSat model)"),QDe.forEach(t),gvr=i(Be),c4=n(Be,"LI",{});var UDe=s(c4);BMe=n(UDe,"STRONG",{});var hPt=s(BMe);hvr=r(hPt,"wav2vec2"),hPt.forEach(t),uvr=r(UDe," \u2014 "),mJ=n(UDe,"A",{href:!0});var uPt=s(mJ);pvr=r(uPt,"Wav2Vec2ForCTC"),uPt.forEach(t),_vr=r(UDe," (Wav2Vec2 model)"),UDe.forEach(t),bvr=i(Be),m4=n(Be,"LI",{});var HDe=s(m4);IMe=n(HDe,"STRONG",{});var pPt=s(IMe);vvr=r(pPt,"wav2vec2-conformer"),pPt.forEach(t),Fvr=r(HDe," \u2014 "),fJ=n(HDe,"A",{href:!0});var _Pt=s(fJ);Tvr=r(_Pt,"Wav2Vec2ConformerForCTC"),_Pt.forEach(t),Mvr=r(HDe," (Wav2Vec2-Conformer model)"),HDe.forEach(t),Evr=i(Be),f4=n(Be,"LI",{});var JDe=s(f4);NMe=n(JDe,"STRONG",{});var bPt=s(NMe);Cvr=r(bPt,"wavlm"),bPt.forEach(t),wvr=r(JDe," \u2014 "),gJ=n(JDe,"A",{href:!0});var vPt=s(gJ);Avr=r(vPt,"WavLMForCTC"),vPt.forEach(t),Lvr=r(JDe," (WavLM model)"),JDe.forEach(t),Be.forEach(t),yvr=i(ka),g4=n(ka,"P",{});var YDe=s(g4);xvr=r(YDe,"The model is set in evaluation mode by default using "),qMe=n(YDe,"CODE",{});var FPt=s(qMe);$vr=r(FPt,"model.eval()"),FPt.forEach(t),kvr=r(YDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jMe=n(YDe,"CODE",{});var TPt=s(jMe);Svr=r(TPt,"model.train()"),TPt.forEach(t),YDe.forEach(t),Rvr=i(ka),T(h4.$$.fragment,ka),ka.forEach(t),Sl.forEach(t),vUe=i(m),rc=n(m,"H2",{class:!0});var xJe=s(rc);u4=n(xJe,"A",{id:!0,class:!0,href:!0});var MPt=s(u4);DMe=n(MPt,"SPAN",{});var EPt=s(DMe);T(_x.$$.fragment,EPt),EPt.forEach(t),MPt.forEach(t),Pvr=i(xJe),GMe=n(xJe,"SPAN",{});var CPt=s(GMe);Bvr=r(CPt,"AutoModelForSpeechSeq2Seq"),CPt.forEach(t),xJe.forEach(t),FUe=i(m),Yo=n(m,"DIV",{class:!0});var Rl=s(Yo);T(bx.$$.fragment,Rl),Ivr=i(Rl),tc=n(Rl,"P",{});var hne=s(tc);Nvr=r(hne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),hJ=n(hne,"A",{href:!0});var wPt=s(hJ);qvr=r(wPt,"from_pretrained()"),wPt.forEach(t),jvr=r(hne," class method or the "),uJ=n(hne,"A",{href:!0});var APt=s(uJ);Dvr=r(APt,"from_config()"),APt.forEach(t),Gvr=r(hne,` class
method.`),hne.forEach(t),Ovr=i(Rl),vx=n(Rl,"P",{});var $Je=s(vx);Vvr=r($Je,"This class cannot be instantiated directly using "),OMe=n($Je,"CODE",{});var LPt=s(OMe);Xvr=r(LPt,"__init__()"),LPt.forEach(t),zvr=r($Je," (throws an error)."),$Je.forEach(t),Wvr=i(Rl),kt=n(Rl,"DIV",{class:!0});var XL=s(kt);T(Fx.$$.fragment,XL),Qvr=i(XL),VMe=n(XL,"P",{});var yPt=s(VMe);Uvr=r(yPt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),yPt.forEach(t),Hvr=i(XL),ac=n(XL,"P",{});var une=s(ac);Jvr=r(une,`Note:
Loading a model from its configuration file does `),XMe=n(une,"STRONG",{});var xPt=s(XMe);Yvr=r(xPt,"not"),xPt.forEach(t),Kvr=r(une,` load the model weights. It only affects the
model\u2019s configuration. Use `),pJ=n(une,"A",{href:!0});var $Pt=s(pJ);Zvr=r($Pt,"from_pretrained()"),$Pt.forEach(t),e1r=r(une," to load the model weights."),une.forEach(t),o1r=i(XL),T(p4.$$.fragment,XL),XL.forEach(t),r1r=i(Rl),po=n(Rl,"DIV",{class:!0});var Sa=s(po);T(Tx.$$.fragment,Sa),t1r=i(Sa),zMe=n(Sa,"P",{});var kPt=s(zMe);a1r=r(kPt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),kPt.forEach(t),n1r=i(Sa),ln=n(Sa,"P",{});var zL=s(ln);s1r=r(zL,"The model class to instantiate is selected based on the "),WMe=n(zL,"CODE",{});var SPt=s(WMe);l1r=r(SPt,"model_type"),SPt.forEach(t),i1r=r(zL,` property of the config object (either
passed as an argument or loaded from `),QMe=n(zL,"CODE",{});var RPt=s(QMe);d1r=r(RPt,"pretrained_model_name_or_path"),RPt.forEach(t),c1r=r(zL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UMe=n(zL,"CODE",{});var PPt=s(UMe);m1r=r(PPt,"pretrained_model_name_or_path"),PPt.forEach(t),f1r=r(zL,":"),zL.forEach(t),g1r=i(Sa),Mx=n(Sa,"UL",{});var kJe=s(Mx);_4=n(kJe,"LI",{});var KDe=s(_4);HMe=n(KDe,"STRONG",{});var BPt=s(HMe);h1r=r(BPt,"speech-encoder-decoder"),BPt.forEach(t),u1r=r(KDe," \u2014 "),_J=n(KDe,"A",{href:!0});var IPt=s(_J);p1r=r(IPt,"SpeechEncoderDecoderModel"),IPt.forEach(t),_1r=r(KDe," (Speech Encoder decoder model)"),KDe.forEach(t),b1r=i(kJe),b4=n(kJe,"LI",{});var ZDe=s(b4);JMe=n(ZDe,"STRONG",{});var NPt=s(JMe);v1r=r(NPt,"speech_to_text"),NPt.forEach(t),F1r=r(ZDe," \u2014 "),bJ=n(ZDe,"A",{href:!0});var qPt=s(bJ);T1r=r(qPt,"Speech2TextForConditionalGeneration"),qPt.forEach(t),M1r=r(ZDe," (Speech2Text model)"),ZDe.forEach(t),kJe.forEach(t),E1r=i(Sa),v4=n(Sa,"P",{});var eGe=s(v4);C1r=r(eGe,"The model is set in evaluation mode by default using "),YMe=n(eGe,"CODE",{});var jPt=s(YMe);w1r=r(jPt,"model.eval()"),jPt.forEach(t),A1r=r(eGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),KMe=n(eGe,"CODE",{});var DPt=s(KMe);L1r=r(DPt,"model.train()"),DPt.forEach(t),eGe.forEach(t),y1r=i(Sa),T(F4.$$.fragment,Sa),Sa.forEach(t),Rl.forEach(t),TUe=i(m),nc=n(m,"H2",{class:!0});var SJe=s(nc);T4=n(SJe,"A",{id:!0,class:!0,href:!0});var GPt=s(T4);ZMe=n(GPt,"SPAN",{});var OPt=s(ZMe);T(Ex.$$.fragment,OPt),OPt.forEach(t),GPt.forEach(t),x1r=i(SJe),eEe=n(SJe,"SPAN",{});var VPt=s(eEe);$1r=r(VPt,"AutoModelForAudioXVector"),VPt.forEach(t),SJe.forEach(t),MUe=i(m),Ko=n(m,"DIV",{class:!0});var Pl=s(Ko);T(Cx.$$.fragment,Pl),k1r=i(Pl),sc=n(Pl,"P",{});var pne=s(sc);S1r=r(pne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),vJ=n(pne,"A",{href:!0});var XPt=s(vJ);R1r=r(XPt,"from_pretrained()"),XPt.forEach(t),P1r=r(pne," class method or the "),FJ=n(pne,"A",{href:!0});var zPt=s(FJ);B1r=r(zPt,"from_config()"),zPt.forEach(t),I1r=r(pne,` class
method.`),pne.forEach(t),N1r=i(Pl),wx=n(Pl,"P",{});var RJe=s(wx);q1r=r(RJe,"This class cannot be instantiated directly using "),oEe=n(RJe,"CODE",{});var WPt=s(oEe);j1r=r(WPt,"__init__()"),WPt.forEach(t),D1r=r(RJe," (throws an error)."),RJe.forEach(t),G1r=i(Pl),St=n(Pl,"DIV",{class:!0});var WL=s(St);T(Ax.$$.fragment,WL),O1r=i(WL),rEe=n(WL,"P",{});var QPt=s(rEe);V1r=r(QPt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),QPt.forEach(t),X1r=i(WL),lc=n(WL,"P",{});var _ne=s(lc);z1r=r(_ne,`Note:
Loading a model from its configuration file does `),tEe=n(_ne,"STRONG",{});var UPt=s(tEe);W1r=r(UPt,"not"),UPt.forEach(t),Q1r=r(_ne,` load the model weights. It only affects the
model\u2019s configuration. Use `),TJ=n(_ne,"A",{href:!0});var HPt=s(TJ);U1r=r(HPt,"from_pretrained()"),HPt.forEach(t),H1r=r(_ne," to load the model weights."),_ne.forEach(t),J1r=i(WL),T(M4.$$.fragment,WL),WL.forEach(t),Y1r=i(Pl),_o=n(Pl,"DIV",{class:!0});var Ra=s(_o);T(Lx.$$.fragment,Ra),K1r=i(Ra),aEe=n(Ra,"P",{});var JPt=s(aEe);Z1r=r(JPt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),JPt.forEach(t),eFr=i(Ra),dn=n(Ra,"P",{});var QL=s(dn);oFr=r(QL,"The model class to instantiate is selected based on the "),nEe=n(QL,"CODE",{});var YPt=s(nEe);rFr=r(YPt,"model_type"),YPt.forEach(t),tFr=r(QL,` property of the config object (either
passed as an argument or loaded from `),sEe=n(QL,"CODE",{});var KPt=s(sEe);aFr=r(KPt,"pretrained_model_name_or_path"),KPt.forEach(t),nFr=r(QL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lEe=n(QL,"CODE",{});var ZPt=s(lEe);sFr=r(ZPt,"pretrained_model_name_or_path"),ZPt.forEach(t),lFr=r(QL,":"),QL.forEach(t),iFr=i(Ra),lt=n(Ra,"UL",{});var Bl=s(lt);E4=n(Bl,"LI",{});var oGe=s(E4);iEe=n(oGe,"STRONG",{});var eBt=s(iEe);dFr=r(eBt,"data2vec-audio"),eBt.forEach(t),cFr=r(oGe," \u2014 "),MJ=n(oGe,"A",{href:!0});var oBt=s(MJ);mFr=r(oBt,"Data2VecAudioForXVector"),oBt.forEach(t),fFr=r(oGe," (Data2VecAudio model)"),oGe.forEach(t),gFr=i(Bl),C4=n(Bl,"LI",{});var rGe=s(C4);dEe=n(rGe,"STRONG",{});var rBt=s(dEe);hFr=r(rBt,"unispeech-sat"),rBt.forEach(t),uFr=r(rGe," \u2014 "),EJ=n(rGe,"A",{href:!0});var tBt=s(EJ);pFr=r(tBt,"UniSpeechSatForXVector"),tBt.forEach(t),_Fr=r(rGe," (UniSpeechSat model)"),rGe.forEach(t),bFr=i(Bl),w4=n(Bl,"LI",{});var tGe=s(w4);cEe=n(tGe,"STRONG",{});var aBt=s(cEe);vFr=r(aBt,"wav2vec2"),aBt.forEach(t),FFr=r(tGe," \u2014 "),CJ=n(tGe,"A",{href:!0});var nBt=s(CJ);TFr=r(nBt,"Wav2Vec2ForXVector"),nBt.forEach(t),MFr=r(tGe," (Wav2Vec2 model)"),tGe.forEach(t),EFr=i(Bl),A4=n(Bl,"LI",{});var aGe=s(A4);mEe=n(aGe,"STRONG",{});var sBt=s(mEe);CFr=r(sBt,"wav2vec2-conformer"),sBt.forEach(t),wFr=r(aGe," \u2014 "),wJ=n(aGe,"A",{href:!0});var lBt=s(wJ);AFr=r(lBt,"Wav2Vec2ConformerForXVector"),lBt.forEach(t),LFr=r(aGe," (Wav2Vec2-Conformer model)"),aGe.forEach(t),yFr=i(Bl),L4=n(Bl,"LI",{});var nGe=s(L4);fEe=n(nGe,"STRONG",{});var iBt=s(fEe);xFr=r(iBt,"wavlm"),iBt.forEach(t),$Fr=r(nGe," \u2014 "),AJ=n(nGe,"A",{href:!0});var dBt=s(AJ);kFr=r(dBt,"WavLMForXVector"),dBt.forEach(t),SFr=r(nGe," (WavLM model)"),nGe.forEach(t),Bl.forEach(t),RFr=i(Ra),y4=n(Ra,"P",{});var sGe=s(y4);PFr=r(sGe,"The model is set in evaluation mode by default using "),gEe=n(sGe,"CODE",{});var cBt=s(gEe);BFr=r(cBt,"model.eval()"),cBt.forEach(t),IFr=r(sGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hEe=n(sGe,"CODE",{});var mBt=s(hEe);NFr=r(mBt,"model.train()"),mBt.forEach(t),sGe.forEach(t),qFr=i(Ra),T(x4.$$.fragment,Ra),Ra.forEach(t),Pl.forEach(t),EUe=i(m),ic=n(m,"H2",{class:!0});var PJe=s(ic);$4=n(PJe,"A",{id:!0,class:!0,href:!0});var fBt=s($4);uEe=n(fBt,"SPAN",{});var gBt=s(uEe);T(yx.$$.fragment,gBt),gBt.forEach(t),fBt.forEach(t),jFr=i(PJe),pEe=n(PJe,"SPAN",{});var hBt=s(pEe);DFr=r(hBt,"AutoModelForMaskedImageModeling"),hBt.forEach(t),PJe.forEach(t),CUe=i(m),Zo=n(m,"DIV",{class:!0});var Il=s(Zo);T(xx.$$.fragment,Il),GFr=i(Il),dc=n(Il,"P",{});var bne=s(dc);OFr=r(bne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),LJ=n(bne,"A",{href:!0});var uBt=s(LJ);VFr=r(uBt,"from_pretrained()"),uBt.forEach(t),XFr=r(bne," class method or the "),yJ=n(bne,"A",{href:!0});var pBt=s(yJ);zFr=r(pBt,"from_config()"),pBt.forEach(t),WFr=r(bne,` class
method.`),bne.forEach(t),QFr=i(Il),$x=n(Il,"P",{});var BJe=s($x);UFr=r(BJe,"This class cannot be instantiated directly using "),_Ee=n(BJe,"CODE",{});var _Bt=s(_Ee);HFr=r(_Bt,"__init__()"),_Bt.forEach(t),JFr=r(BJe," (throws an error)."),BJe.forEach(t),YFr=i(Il),Rt=n(Il,"DIV",{class:!0});var UL=s(Rt);T(kx.$$.fragment,UL),KFr=i(UL),bEe=n(UL,"P",{});var bBt=s(bEe);ZFr=r(bBt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),bBt.forEach(t),eTr=i(UL),cc=n(UL,"P",{});var vne=s(cc);oTr=r(vne,`Note:
Loading a model from its configuration file does `),vEe=n(vne,"STRONG",{});var vBt=s(vEe);rTr=r(vBt,"not"),vBt.forEach(t),tTr=r(vne,` load the model weights. It only affects the
model\u2019s configuration. Use `),xJ=n(vne,"A",{href:!0});var FBt=s(xJ);aTr=r(FBt,"from_pretrained()"),FBt.forEach(t),nTr=r(vne," to load the model weights."),vne.forEach(t),sTr=i(UL),T(k4.$$.fragment,UL),UL.forEach(t),lTr=i(Il),bo=n(Il,"DIV",{class:!0});var Pa=s(bo);T(Sx.$$.fragment,Pa),iTr=i(Pa),FEe=n(Pa,"P",{});var TBt=s(FEe);dTr=r(TBt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),TBt.forEach(t),cTr=i(Pa),cn=n(Pa,"P",{});var HL=s(cn);mTr=r(HL,"The model class to instantiate is selected based on the "),TEe=n(HL,"CODE",{});var MBt=s(TEe);fTr=r(MBt,"model_type"),MBt.forEach(t),gTr=r(HL,` property of the config object (either
passed as an argument or loaded from `),MEe=n(HL,"CODE",{});var EBt=s(MEe);hTr=r(EBt,"pretrained_model_name_or_path"),EBt.forEach(t),uTr=r(HL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EEe=n(HL,"CODE",{});var CBt=s(EEe);pTr=r(CBt,"pretrained_model_name_or_path"),CBt.forEach(t),_Tr=r(HL,":"),HL.forEach(t),bTr=i(Pa),mn=n(Pa,"UL",{});var JL=s(mn);S4=n(JL,"LI",{});var lGe=s(S4);CEe=n(lGe,"STRONG",{});var wBt=s(CEe);vTr=r(wBt,"deit"),wBt.forEach(t),FTr=r(lGe," \u2014 "),$J=n(lGe,"A",{href:!0});var ABt=s($J);TTr=r(ABt,"DeiTForMaskedImageModeling"),ABt.forEach(t),MTr=r(lGe," (DeiT model)"),lGe.forEach(t),ETr=i(JL),R4=n(JL,"LI",{});var iGe=s(R4);wEe=n(iGe,"STRONG",{});var LBt=s(wEe);CTr=r(LBt,"swin"),LBt.forEach(t),wTr=r(iGe," \u2014 "),kJ=n(iGe,"A",{href:!0});var yBt=s(kJ);ATr=r(yBt,"SwinForMaskedImageModeling"),yBt.forEach(t),LTr=r(iGe," (Swin Transformer model)"),iGe.forEach(t),yTr=i(JL),P4=n(JL,"LI",{});var dGe=s(P4);AEe=n(dGe,"STRONG",{});var xBt=s(AEe);xTr=r(xBt,"swinv2"),xBt.forEach(t),$Tr=r(dGe," \u2014 "),SJ=n(dGe,"A",{href:!0});var $Bt=s(SJ);kTr=r($Bt,"Swinv2ForMaskedImageModeling"),$Bt.forEach(t),STr=r(dGe," (Swin Transformer V2 model)"),dGe.forEach(t),RTr=i(JL),B4=n(JL,"LI",{});var cGe=s(B4);LEe=n(cGe,"STRONG",{});var kBt=s(LEe);PTr=r(kBt,"vit"),kBt.forEach(t),BTr=r(cGe," \u2014 "),RJ=n(cGe,"A",{href:!0});var SBt=s(RJ);ITr=r(SBt,"ViTForMaskedImageModeling"),SBt.forEach(t),NTr=r(cGe," (ViT model)"),cGe.forEach(t),JL.forEach(t),qTr=i(Pa),I4=n(Pa,"P",{});var mGe=s(I4);jTr=r(mGe,"The model is set in evaluation mode by default using "),yEe=n(mGe,"CODE",{});var RBt=s(yEe);DTr=r(RBt,"model.eval()"),RBt.forEach(t),GTr=r(mGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xEe=n(mGe,"CODE",{});var PBt=s(xEe);OTr=r(PBt,"model.train()"),PBt.forEach(t),mGe.forEach(t),VTr=i(Pa),T(N4.$$.fragment,Pa),Pa.forEach(t),Il.forEach(t),wUe=i(m),mc=n(m,"H2",{class:!0});var IJe=s(mc);q4=n(IJe,"A",{id:!0,class:!0,href:!0});var BBt=s(q4);$Ee=n(BBt,"SPAN",{});var IBt=s($Ee);T(Rx.$$.fragment,IBt),IBt.forEach(t),BBt.forEach(t),XTr=i(IJe),kEe=n(IJe,"SPAN",{});var NBt=s(kEe);zTr=r(NBt,"AutoModelForObjectDetection"),NBt.forEach(t),IJe.forEach(t),AUe=i(m),er=n(m,"DIV",{class:!0});var Nl=s(er);T(Px.$$.fragment,Nl),WTr=i(Nl),fc=n(Nl,"P",{});var Fne=s(fc);QTr=r(Fne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),PJ=n(Fne,"A",{href:!0});var qBt=s(PJ);UTr=r(qBt,"from_pretrained()"),qBt.forEach(t),HTr=r(Fne," class method or the "),BJ=n(Fne,"A",{href:!0});var jBt=s(BJ);JTr=r(jBt,"from_config()"),jBt.forEach(t),YTr=r(Fne,` class
method.`),Fne.forEach(t),KTr=i(Nl),Bx=n(Nl,"P",{});var NJe=s(Bx);ZTr=r(NJe,"This class cannot be instantiated directly using "),SEe=n(NJe,"CODE",{});var DBt=s(SEe);eMr=r(DBt,"__init__()"),DBt.forEach(t),oMr=r(NJe," (throws an error)."),NJe.forEach(t),rMr=i(Nl),Pt=n(Nl,"DIV",{class:!0});var YL=s(Pt);T(Ix.$$.fragment,YL),tMr=i(YL),REe=n(YL,"P",{});var GBt=s(REe);aMr=r(GBt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),GBt.forEach(t),nMr=i(YL),gc=n(YL,"P",{});var Tne=s(gc);sMr=r(Tne,`Note:
Loading a model from its configuration file does `),PEe=n(Tne,"STRONG",{});var OBt=s(PEe);lMr=r(OBt,"not"),OBt.forEach(t),iMr=r(Tne,` load the model weights. It only affects the
model\u2019s configuration. Use `),IJ=n(Tne,"A",{href:!0});var VBt=s(IJ);dMr=r(VBt,"from_pretrained()"),VBt.forEach(t),cMr=r(Tne," to load the model weights."),Tne.forEach(t),mMr=i(YL),T(j4.$$.fragment,YL),YL.forEach(t),fMr=i(Nl),vo=n(Nl,"DIV",{class:!0});var Ba=s(vo);T(Nx.$$.fragment,Ba),gMr=i(Ba),BEe=n(Ba,"P",{});var XBt=s(BEe);hMr=r(XBt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),XBt.forEach(t),uMr=i(Ba),fn=n(Ba,"P",{});var KL=s(fn);pMr=r(KL,"The model class to instantiate is selected based on the "),IEe=n(KL,"CODE",{});var zBt=s(IEe);_Mr=r(zBt,"model_type"),zBt.forEach(t),bMr=r(KL,` property of the config object (either
passed as an argument or loaded from `),NEe=n(KL,"CODE",{});var WBt=s(NEe);vMr=r(WBt,"pretrained_model_name_or_path"),WBt.forEach(t),FMr=r(KL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qEe=n(KL,"CODE",{});var QBt=s(qEe);TMr=r(QBt,"pretrained_model_name_or_path"),QBt.forEach(t),MMr=r(KL,":"),KL.forEach(t),EMr=i(Ba),qx=n(Ba,"UL",{});var qJe=s(qx);D4=n(qJe,"LI",{});var fGe=s(D4);jEe=n(fGe,"STRONG",{});var UBt=s(jEe);CMr=r(UBt,"detr"),UBt.forEach(t),wMr=r(fGe," \u2014 "),NJ=n(fGe,"A",{href:!0});var HBt=s(NJ);AMr=r(HBt,"DetrForObjectDetection"),HBt.forEach(t),LMr=r(fGe," (DETR model)"),fGe.forEach(t),yMr=i(qJe),G4=n(qJe,"LI",{});var gGe=s(G4);DEe=n(gGe,"STRONG",{});var JBt=s(DEe);xMr=r(JBt,"yolos"),JBt.forEach(t),$Mr=r(gGe," \u2014 "),qJ=n(gGe,"A",{href:!0});var YBt=s(qJ);kMr=r(YBt,"YolosForObjectDetection"),YBt.forEach(t),SMr=r(gGe," (YOLOS model)"),gGe.forEach(t),qJe.forEach(t),RMr=i(Ba),O4=n(Ba,"P",{});var hGe=s(O4);PMr=r(hGe,"The model is set in evaluation mode by default using "),GEe=n(hGe,"CODE",{});var KBt=s(GEe);BMr=r(KBt,"model.eval()"),KBt.forEach(t),IMr=r(hGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),OEe=n(hGe,"CODE",{});var ZBt=s(OEe);NMr=r(ZBt,"model.train()"),ZBt.forEach(t),hGe.forEach(t),qMr=i(Ba),T(V4.$$.fragment,Ba),Ba.forEach(t),Nl.forEach(t),LUe=i(m),hc=n(m,"H2",{class:!0});var jJe=s(hc);X4=n(jJe,"A",{id:!0,class:!0,href:!0});var eIt=s(X4);VEe=n(eIt,"SPAN",{});var oIt=s(VEe);T(jx.$$.fragment,oIt),oIt.forEach(t),eIt.forEach(t),jMr=i(jJe),XEe=n(jJe,"SPAN",{});var rIt=s(XEe);DMr=r(rIt,"AutoModelForImageSegmentation"),rIt.forEach(t),jJe.forEach(t),yUe=i(m),or=n(m,"DIV",{class:!0});var ql=s(or);T(Dx.$$.fragment,ql),GMr=i(ql),uc=n(ql,"P",{});var Mne=s(uc);OMr=r(Mne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),jJ=n(Mne,"A",{href:!0});var tIt=s(jJ);VMr=r(tIt,"from_pretrained()"),tIt.forEach(t),XMr=r(Mne," class method or the "),DJ=n(Mne,"A",{href:!0});var aIt=s(DJ);zMr=r(aIt,"from_config()"),aIt.forEach(t),WMr=r(Mne,` class
method.`),Mne.forEach(t),QMr=i(ql),Gx=n(ql,"P",{});var DJe=s(Gx);UMr=r(DJe,"This class cannot be instantiated directly using "),zEe=n(DJe,"CODE",{});var nIt=s(zEe);HMr=r(nIt,"__init__()"),nIt.forEach(t),JMr=r(DJe," (throws an error)."),DJe.forEach(t),YMr=i(ql),Bt=n(ql,"DIV",{class:!0});var ZL=s(Bt);T(Ox.$$.fragment,ZL),KMr=i(ZL),WEe=n(ZL,"P",{});var sIt=s(WEe);ZMr=r(sIt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),sIt.forEach(t),eEr=i(ZL),pc=n(ZL,"P",{});var Ene=s(pc);oEr=r(Ene,`Note:
Loading a model from its configuration file does `),QEe=n(Ene,"STRONG",{});var lIt=s(QEe);rEr=r(lIt,"not"),lIt.forEach(t),tEr=r(Ene,` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=n(Ene,"A",{href:!0});var iIt=s(GJ);aEr=r(iIt,"from_pretrained()"),iIt.forEach(t),nEr=r(Ene," to load the model weights."),Ene.forEach(t),sEr=i(ZL),T(z4.$$.fragment,ZL),ZL.forEach(t),lEr=i(ql),Fo=n(ql,"DIV",{class:!0});var Ia=s(Fo);T(Vx.$$.fragment,Ia),iEr=i(Ia),UEe=n(Ia,"P",{});var dIt=s(UEe);dEr=r(dIt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),dIt.forEach(t),cEr=i(Ia),gn=n(Ia,"P",{});var ey=s(gn);mEr=r(ey,"The model class to instantiate is selected based on the "),HEe=n(ey,"CODE",{});var cIt=s(HEe);fEr=r(cIt,"model_type"),cIt.forEach(t),gEr=r(ey,` property of the config object (either
passed as an argument or loaded from `),JEe=n(ey,"CODE",{});var mIt=s(JEe);hEr=r(mIt,"pretrained_model_name_or_path"),mIt.forEach(t),uEr=r(ey,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YEe=n(ey,"CODE",{});var fIt=s(YEe);pEr=r(fIt,"pretrained_model_name_or_path"),fIt.forEach(t),_Er=r(ey,":"),ey.forEach(t),bEr=i(Ia),KEe=n(Ia,"UL",{});var gIt=s(KEe);W4=n(gIt,"LI",{});var uGe=s(W4);ZEe=n(uGe,"STRONG",{});var hIt=s(ZEe);vEr=r(hIt,"detr"),hIt.forEach(t),FEr=r(uGe," \u2014 "),OJ=n(uGe,"A",{href:!0});var uIt=s(OJ);TEr=r(uIt,"DetrForSegmentation"),uIt.forEach(t),MEr=r(uGe," (DETR model)"),uGe.forEach(t),gIt.forEach(t),EEr=i(Ia),Q4=n(Ia,"P",{});var pGe=s(Q4);CEr=r(pGe,"The model is set in evaluation mode by default using "),e4e=n(pGe,"CODE",{});var pIt=s(e4e);wEr=r(pIt,"model.eval()"),pIt.forEach(t),AEr=r(pGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o4e=n(pGe,"CODE",{});var _It=s(o4e);LEr=r(_It,"model.train()"),_It.forEach(t),pGe.forEach(t),yEr=i(Ia),T(U4.$$.fragment,Ia),Ia.forEach(t),ql.forEach(t),xUe=i(m),_c=n(m,"H2",{class:!0});var GJe=s(_c);H4=n(GJe,"A",{id:!0,class:!0,href:!0});var bIt=s(H4);r4e=n(bIt,"SPAN",{});var vIt=s(r4e);T(Xx.$$.fragment,vIt),vIt.forEach(t),bIt.forEach(t),xEr=i(GJe),t4e=n(GJe,"SPAN",{});var FIt=s(t4e);$Er=r(FIt,"AutoModelForSemanticSegmentation"),FIt.forEach(t),GJe.forEach(t),$Ue=i(m),rr=n(m,"DIV",{class:!0});var jl=s(rr);T(zx.$$.fragment,jl),kEr=i(jl),bc=n(jl,"P",{});var Cne=s(bc);SEr=r(Cne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),VJ=n(Cne,"A",{href:!0});var TIt=s(VJ);REr=r(TIt,"from_pretrained()"),TIt.forEach(t),PEr=r(Cne," class method or the "),XJ=n(Cne,"A",{href:!0});var MIt=s(XJ);BEr=r(MIt,"from_config()"),MIt.forEach(t),IEr=r(Cne,` class
method.`),Cne.forEach(t),NEr=i(jl),Wx=n(jl,"P",{});var OJe=s(Wx);qEr=r(OJe,"This class cannot be instantiated directly using "),a4e=n(OJe,"CODE",{});var EIt=s(a4e);jEr=r(EIt,"__init__()"),EIt.forEach(t),DEr=r(OJe," (throws an error)."),OJe.forEach(t),GEr=i(jl),It=n(jl,"DIV",{class:!0});var oy=s(It);T(Qx.$$.fragment,oy),OEr=i(oy),n4e=n(oy,"P",{});var CIt=s(n4e);VEr=r(CIt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),CIt.forEach(t),XEr=i(oy),vc=n(oy,"P",{});var wne=s(vc);zEr=r(wne,`Note:
Loading a model from its configuration file does `),s4e=n(wne,"STRONG",{});var wIt=s(s4e);WEr=r(wIt,"not"),wIt.forEach(t),QEr=r(wne,` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=n(wne,"A",{href:!0});var AIt=s(zJ);UEr=r(AIt,"from_pretrained()"),AIt.forEach(t),HEr=r(wne," to load the model weights."),wne.forEach(t),JEr=i(oy),T(J4.$$.fragment,oy),oy.forEach(t),YEr=i(jl),To=n(jl,"DIV",{class:!0});var Na=s(To);T(Ux.$$.fragment,Na),KEr=i(Na),l4e=n(Na,"P",{});var LIt=s(l4e);ZEr=r(LIt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),LIt.forEach(t),e4r=i(Na),hn=n(Na,"P",{});var ry=s(hn);o4r=r(ry,"The model class to instantiate is selected based on the "),i4e=n(ry,"CODE",{});var yIt=s(i4e);r4r=r(yIt,"model_type"),yIt.forEach(t),t4r=r(ry,` property of the config object (either
passed as an argument or loaded from `),d4e=n(ry,"CODE",{});var xIt=s(d4e);a4r=r(xIt,"pretrained_model_name_or_path"),xIt.forEach(t),n4r=r(ry,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c4e=n(ry,"CODE",{});var $It=s(c4e);s4r=r($It,"pretrained_model_name_or_path"),$It.forEach(t),l4r=r(ry,":"),ry.forEach(t),i4r=i(Na),it=n(Na,"UL",{});var Dl=s(it);Y4=n(Dl,"LI",{});var _Ge=s(Y4);m4e=n(_Ge,"STRONG",{});var kIt=s(m4e);d4r=r(kIt,"beit"),kIt.forEach(t),c4r=r(_Ge," \u2014 "),WJ=n(_Ge,"A",{href:!0});var SIt=s(WJ);m4r=r(SIt,"BeitForSemanticSegmentation"),SIt.forEach(t),f4r=r(_Ge," (BEiT model)"),_Ge.forEach(t),g4r=i(Dl),K4=n(Dl,"LI",{});var bGe=s(K4);f4e=n(bGe,"STRONG",{});var RIt=s(f4e);h4r=r(RIt,"data2vec-vision"),RIt.forEach(t),u4r=r(bGe," \u2014 "),QJ=n(bGe,"A",{href:!0});var PIt=s(QJ);p4r=r(PIt,"Data2VecVisionForSemanticSegmentation"),PIt.forEach(t),_4r=r(bGe," (Data2VecVision model)"),bGe.forEach(t),b4r=i(Dl),Z4=n(Dl,"LI",{});var vGe=s(Z4);g4e=n(vGe,"STRONG",{});var BIt=s(g4e);v4r=r(BIt,"dpt"),BIt.forEach(t),F4r=r(vGe," \u2014 "),UJ=n(vGe,"A",{href:!0});var IIt=s(UJ);T4r=r(IIt,"DPTForSemanticSegmentation"),IIt.forEach(t),M4r=r(vGe," (DPT model)"),vGe.forEach(t),E4r=i(Dl),eC=n(Dl,"LI",{});var FGe=s(eC);h4e=n(FGe,"STRONG",{});var NIt=s(h4e);C4r=r(NIt,"mobilevit"),NIt.forEach(t),w4r=r(FGe," \u2014 "),HJ=n(FGe,"A",{href:!0});var qIt=s(HJ);A4r=r(qIt,"MobileViTForSemanticSegmentation"),qIt.forEach(t),L4r=r(FGe," (MobileViT model)"),FGe.forEach(t),y4r=i(Dl),oC=n(Dl,"LI",{});var TGe=s(oC);u4e=n(TGe,"STRONG",{});var jIt=s(u4e);x4r=r(jIt,"segformer"),jIt.forEach(t),$4r=r(TGe," \u2014 "),JJ=n(TGe,"A",{href:!0});var DIt=s(JJ);k4r=r(DIt,"SegformerForSemanticSegmentation"),DIt.forEach(t),S4r=r(TGe," (SegFormer model)"),TGe.forEach(t),Dl.forEach(t),R4r=i(Na),rC=n(Na,"P",{});var MGe=s(rC);P4r=r(MGe,"The model is set in evaluation mode by default using "),p4e=n(MGe,"CODE",{});var GIt=s(p4e);B4r=r(GIt,"model.eval()"),GIt.forEach(t),I4r=r(MGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_4e=n(MGe,"CODE",{});var OIt=s(_4e);N4r=r(OIt,"model.train()"),OIt.forEach(t),MGe.forEach(t),q4r=i(Na),T(tC.$$.fragment,Na),Na.forEach(t),jl.forEach(t),kUe=i(m),Fc=n(m,"H2",{class:!0});var VJe=s(Fc);aC=n(VJe,"A",{id:!0,class:!0,href:!0});var VIt=s(aC);b4e=n(VIt,"SPAN",{});var XIt=s(b4e);T(Hx.$$.fragment,XIt),XIt.forEach(t),VIt.forEach(t),j4r=i(VJe),v4e=n(VJe,"SPAN",{});var zIt=s(v4e);D4r=r(zIt,"AutoModelForInstanceSegmentation"),zIt.forEach(t),VJe.forEach(t),SUe=i(m),tr=n(m,"DIV",{class:!0});var Gl=s(tr);T(Jx.$$.fragment,Gl),G4r=i(Gl),Tc=n(Gl,"P",{});var Ane=s(Tc);O4r=r(Ane,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),YJ=n(Ane,"A",{href:!0});var WIt=s(YJ);V4r=r(WIt,"from_pretrained()"),WIt.forEach(t),X4r=r(Ane," class method or the "),KJ=n(Ane,"A",{href:!0});var QIt=s(KJ);z4r=r(QIt,"from_config()"),QIt.forEach(t),W4r=r(Ane,` class
method.`),Ane.forEach(t),Q4r=i(Gl),Yx=n(Gl,"P",{});var XJe=s(Yx);U4r=r(XJe,"This class cannot be instantiated directly using "),F4e=n(XJe,"CODE",{});var UIt=s(F4e);H4r=r(UIt,"__init__()"),UIt.forEach(t),J4r=r(XJe," (throws an error)."),XJe.forEach(t),Y4r=i(Gl),Nt=n(Gl,"DIV",{class:!0});var ty=s(Nt);T(Kx.$$.fragment,ty),K4r=i(ty),T4e=n(ty,"P",{});var HIt=s(T4e);Z4r=r(HIt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),HIt.forEach(t),eCr=i(ty),Mc=n(ty,"P",{});var Lne=s(Mc);oCr=r(Lne,`Note:
Loading a model from its configuration file does `),M4e=n(Lne,"STRONG",{});var JIt=s(M4e);rCr=r(JIt,"not"),JIt.forEach(t),tCr=r(Lne,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=n(Lne,"A",{href:!0});var YIt=s(ZJ);aCr=r(YIt,"from_pretrained()"),YIt.forEach(t),nCr=r(Lne," to load the model weights."),Lne.forEach(t),sCr=i(ty),T(nC.$$.fragment,ty),ty.forEach(t),lCr=i(Gl),Mo=n(Gl,"DIV",{class:!0});var qa=s(Mo);T(Zx.$$.fragment,qa),iCr=i(qa),E4e=n(qa,"P",{});var KIt=s(E4e);dCr=r(KIt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),KIt.forEach(t),cCr=i(qa),un=n(qa,"P",{});var ay=s(un);mCr=r(ay,"The model class to instantiate is selected based on the "),C4e=n(ay,"CODE",{});var ZIt=s(C4e);fCr=r(ZIt,"model_type"),ZIt.forEach(t),gCr=r(ay,` property of the config object (either
passed as an argument or loaded from `),w4e=n(ay,"CODE",{});var eNt=s(w4e);hCr=r(eNt,"pretrained_model_name_or_path"),eNt.forEach(t),uCr=r(ay,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A4e=n(ay,"CODE",{});var oNt=s(A4e);pCr=r(oNt,"pretrained_model_name_or_path"),oNt.forEach(t),_Cr=r(ay,":"),ay.forEach(t),bCr=i(qa),L4e=n(qa,"UL",{});var rNt=s(L4e);sC=n(rNt,"LI",{});var EGe=s(sC);y4e=n(EGe,"STRONG",{});var tNt=s(y4e);vCr=r(tNt,"maskformer"),tNt.forEach(t),FCr=r(EGe," \u2014 "),eY=n(EGe,"A",{href:!0});var aNt=s(eY);TCr=r(aNt,"MaskFormerForInstanceSegmentation"),aNt.forEach(t),MCr=r(EGe," (MaskFormer model)"),EGe.forEach(t),rNt.forEach(t),ECr=i(qa),lC=n(qa,"P",{});var CGe=s(lC);CCr=r(CGe,"The model is set in evaluation mode by default using "),x4e=n(CGe,"CODE",{});var nNt=s(x4e);wCr=r(nNt,"model.eval()"),nNt.forEach(t),ACr=r(CGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$4e=n(CGe,"CODE",{});var sNt=s($4e);LCr=r(sNt,"model.train()"),sNt.forEach(t),CGe.forEach(t),yCr=i(qa),T(iC.$$.fragment,qa),qa.forEach(t),Gl.forEach(t),RUe=i(m),Ec=n(m,"H2",{class:!0});var zJe=s(Ec);dC=n(zJe,"A",{id:!0,class:!0,href:!0});var lNt=s(dC);k4e=n(lNt,"SPAN",{});var iNt=s(k4e);T(e$.$$.fragment,iNt),iNt.forEach(t),lNt.forEach(t),xCr=i(zJe),S4e=n(zJe,"SPAN",{});var dNt=s(S4e);$Cr=r(dNt,"TFAutoModel"),dNt.forEach(t),zJe.forEach(t),PUe=i(m),ar=n(m,"DIV",{class:!0});var Ol=s(ar);T(o$.$$.fragment,Ol),kCr=i(Ol),Cc=n(Ol,"P",{});var yne=s(Cc);SCr=r(yne,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),oY=n(yne,"A",{href:!0});var cNt=s(oY);RCr=r(cNt,"from_pretrained()"),cNt.forEach(t),PCr=r(yne," class method or the "),rY=n(yne,"A",{href:!0});var mNt=s(rY);BCr=r(mNt,"from_config()"),mNt.forEach(t),ICr=r(yne,` class
method.`),yne.forEach(t),NCr=i(Ol),r$=n(Ol,"P",{});var WJe=s(r$);qCr=r(WJe,"This class cannot be instantiated directly using "),R4e=n(WJe,"CODE",{});var fNt=s(R4e);jCr=r(fNt,"__init__()"),fNt.forEach(t),DCr=r(WJe," (throws an error)."),WJe.forEach(t),GCr=i(Ol),qt=n(Ol,"DIV",{class:!0});var ny=s(qt);T(t$.$$.fragment,ny),OCr=i(ny),P4e=n(ny,"P",{});var gNt=s(P4e);VCr=r(gNt,"Instantiates one of the base model classes of the library from a configuration."),gNt.forEach(t),XCr=i(ny),wc=n(ny,"P",{});var xne=s(wc);zCr=r(xne,`Note:
Loading a model from its configuration file does `),B4e=n(xne,"STRONG",{});var hNt=s(B4e);WCr=r(hNt,"not"),hNt.forEach(t),QCr=r(xne,` load the model weights. It only affects the
model\u2019s configuration. Use `),tY=n(xne,"A",{href:!0});var uNt=s(tY);UCr=r(uNt,"from_pretrained()"),uNt.forEach(t),HCr=r(xne," to load the model weights."),xne.forEach(t),JCr=i(ny),T(cC.$$.fragment,ny),ny.forEach(t),YCr=i(Ol),Rr=n(Ol,"DIV",{class:!0});var Vl=s(Rr);T(a$.$$.fragment,Vl),KCr=i(Vl),I4e=n(Vl,"P",{});var pNt=s(I4e);ZCr=r(pNt,"Instantiate one of the base model classes of the library from a pretrained model."),pNt.forEach(t),e3r=i(Vl),pn=n(Vl,"P",{});var sy=s(pn);o3r=r(sy,"The model class to instantiate is selected based on the "),N4e=n(sy,"CODE",{});var _Nt=s(N4e);r3r=r(_Nt,"model_type"),_Nt.forEach(t),t3r=r(sy,` property of the config object (either
passed as an argument or loaded from `),q4e=n(sy,"CODE",{});var bNt=s(q4e);a3r=r(bNt,"pretrained_model_name_or_path"),bNt.forEach(t),n3r=r(sy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j4e=n(sy,"CODE",{});var vNt=s(j4e);s3r=r(vNt,"pretrained_model_name_or_path"),vNt.forEach(t),l3r=r(sy,":"),sy.forEach(t),i3r=i(Vl),q=n(Vl,"UL",{});var D=s(q);mC=n(D,"LI",{});var wGe=s(mC);D4e=n(wGe,"STRONG",{});var FNt=s(D4e);d3r=r(FNt,"albert"),FNt.forEach(t),c3r=r(wGe," \u2014 "),aY=n(wGe,"A",{href:!0});var TNt=s(aY);m3r=r(TNt,"TFAlbertModel"),TNt.forEach(t),f3r=r(wGe," (ALBERT model)"),wGe.forEach(t),g3r=i(D),fC=n(D,"LI",{});var AGe=s(fC);G4e=n(AGe,"STRONG",{});var MNt=s(G4e);h3r=r(MNt,"bart"),MNt.forEach(t),u3r=r(AGe," \u2014 "),nY=n(AGe,"A",{href:!0});var ENt=s(nY);p3r=r(ENt,"TFBartModel"),ENt.forEach(t),_3r=r(AGe," (BART model)"),AGe.forEach(t),b3r=i(D),gC=n(D,"LI",{});var LGe=s(gC);O4e=n(LGe,"STRONG",{});var CNt=s(O4e);v3r=r(CNt,"bert"),CNt.forEach(t),F3r=r(LGe," \u2014 "),sY=n(LGe,"A",{href:!0});var wNt=s(sY);T3r=r(wNt,"TFBertModel"),wNt.forEach(t),M3r=r(LGe," (BERT model)"),LGe.forEach(t),E3r=i(D),hC=n(D,"LI",{});var yGe=s(hC);V4e=n(yGe,"STRONG",{});var ANt=s(V4e);C3r=r(ANt,"blenderbot"),ANt.forEach(t),w3r=r(yGe," \u2014 "),lY=n(yGe,"A",{href:!0});var LNt=s(lY);A3r=r(LNt,"TFBlenderbotModel"),LNt.forEach(t),L3r=r(yGe," (Blenderbot model)"),yGe.forEach(t),y3r=i(D),uC=n(D,"LI",{});var xGe=s(uC);X4e=n(xGe,"STRONG",{});var yNt=s(X4e);x3r=r(yNt,"blenderbot-small"),yNt.forEach(t),$3r=r(xGe," \u2014 "),iY=n(xGe,"A",{href:!0});var xNt=s(iY);k3r=r(xNt,"TFBlenderbotSmallModel"),xNt.forEach(t),S3r=r(xGe," (BlenderbotSmall model)"),xGe.forEach(t),R3r=i(D),pC=n(D,"LI",{});var $Ge=s(pC);z4e=n($Ge,"STRONG",{});var $Nt=s(z4e);P3r=r($Nt,"camembert"),$Nt.forEach(t),B3r=r($Ge," \u2014 "),dY=n($Ge,"A",{href:!0});var kNt=s(dY);I3r=r(kNt,"TFCamembertModel"),kNt.forEach(t),N3r=r($Ge," (CamemBERT model)"),$Ge.forEach(t),q3r=i(D),_C=n(D,"LI",{});var kGe=s(_C);W4e=n(kGe,"STRONG",{});var SNt=s(W4e);j3r=r(SNt,"clip"),SNt.forEach(t),D3r=r(kGe," \u2014 "),cY=n(kGe,"A",{href:!0});var RNt=s(cY);G3r=r(RNt,"TFCLIPModel"),RNt.forEach(t),O3r=r(kGe," (CLIP model)"),kGe.forEach(t),V3r=i(D),bC=n(D,"LI",{});var SGe=s(bC);Q4e=n(SGe,"STRONG",{});var PNt=s(Q4e);X3r=r(PNt,"convbert"),PNt.forEach(t),z3r=r(SGe," \u2014 "),mY=n(SGe,"A",{href:!0});var BNt=s(mY);W3r=r(BNt,"TFConvBertModel"),BNt.forEach(t),Q3r=r(SGe," (ConvBERT model)"),SGe.forEach(t),U3r=i(D),vC=n(D,"LI",{});var RGe=s(vC);U4e=n(RGe,"STRONG",{});var INt=s(U4e);H3r=r(INt,"convnext"),INt.forEach(t),J3r=r(RGe," \u2014 "),fY=n(RGe,"A",{href:!0});var NNt=s(fY);Y3r=r(NNt,"TFConvNextModel"),NNt.forEach(t),K3r=r(RGe," (ConvNeXT model)"),RGe.forEach(t),Z3r=i(D),FC=n(D,"LI",{});var PGe=s(FC);H4e=n(PGe,"STRONG",{});var qNt=s(H4e);e5r=r(qNt,"ctrl"),qNt.forEach(t),o5r=r(PGe," \u2014 "),gY=n(PGe,"A",{href:!0});var jNt=s(gY);r5r=r(jNt,"TFCTRLModel"),jNt.forEach(t),t5r=r(PGe," (CTRL model)"),PGe.forEach(t),a5r=i(D),TC=n(D,"LI",{});var BGe=s(TC);J4e=n(BGe,"STRONG",{});var DNt=s(J4e);n5r=r(DNt,"data2vec-vision"),DNt.forEach(t),s5r=r(BGe," \u2014 "),hY=n(BGe,"A",{href:!0});var GNt=s(hY);l5r=r(GNt,"TFData2VecVisionModel"),GNt.forEach(t),i5r=r(BGe," (Data2VecVision model)"),BGe.forEach(t),d5r=i(D),MC=n(D,"LI",{});var IGe=s(MC);Y4e=n(IGe,"STRONG",{});var ONt=s(Y4e);c5r=r(ONt,"deberta"),ONt.forEach(t),m5r=r(IGe," \u2014 "),uY=n(IGe,"A",{href:!0});var VNt=s(uY);f5r=r(VNt,"TFDebertaModel"),VNt.forEach(t),g5r=r(IGe," (DeBERTa model)"),IGe.forEach(t),h5r=i(D),EC=n(D,"LI",{});var NGe=s(EC);K4e=n(NGe,"STRONG",{});var XNt=s(K4e);u5r=r(XNt,"deberta-v2"),XNt.forEach(t),p5r=r(NGe," \u2014 "),pY=n(NGe,"A",{href:!0});var zNt=s(pY);_5r=r(zNt,"TFDebertaV2Model"),zNt.forEach(t),b5r=r(NGe," (DeBERTa-v2 model)"),NGe.forEach(t),v5r=i(D),CC=n(D,"LI",{});var qGe=s(CC);Z4e=n(qGe,"STRONG",{});var WNt=s(Z4e);F5r=r(WNt,"deit"),WNt.forEach(t),T5r=r(qGe," \u2014 "),_Y=n(qGe,"A",{href:!0});var QNt=s(_Y);M5r=r(QNt,"TFDeiTModel"),QNt.forEach(t),E5r=r(qGe," (DeiT model)"),qGe.forEach(t),C5r=i(D),wC=n(D,"LI",{});var jGe=s(wC);eCe=n(jGe,"STRONG",{});var UNt=s(eCe);w5r=r(UNt,"distilbert"),UNt.forEach(t),A5r=r(jGe," \u2014 "),bY=n(jGe,"A",{href:!0});var HNt=s(bY);L5r=r(HNt,"TFDistilBertModel"),HNt.forEach(t),y5r=r(jGe," (DistilBERT model)"),jGe.forEach(t),x5r=i(D),AC=n(D,"LI",{});var DGe=s(AC);oCe=n(DGe,"STRONG",{});var JNt=s(oCe);$5r=r(JNt,"dpr"),JNt.forEach(t),k5r=r(DGe," \u2014 "),vY=n(DGe,"A",{href:!0});var YNt=s(vY);S5r=r(YNt,"TFDPRQuestionEncoder"),YNt.forEach(t),R5r=r(DGe," (DPR model)"),DGe.forEach(t),P5r=i(D),LC=n(D,"LI",{});var GGe=s(LC);rCe=n(GGe,"STRONG",{});var KNt=s(rCe);B5r=r(KNt,"electra"),KNt.forEach(t),I5r=r(GGe," \u2014 "),FY=n(GGe,"A",{href:!0});var ZNt=s(FY);N5r=r(ZNt,"TFElectraModel"),ZNt.forEach(t),q5r=r(GGe," (ELECTRA model)"),GGe.forEach(t),j5r=i(D),yC=n(D,"LI",{});var OGe=s(yC);tCe=n(OGe,"STRONG",{});var eqt=s(tCe);D5r=r(eqt,"flaubert"),eqt.forEach(t),G5r=r(OGe," \u2014 "),TY=n(OGe,"A",{href:!0});var oqt=s(TY);O5r=r(oqt,"TFFlaubertModel"),oqt.forEach(t),V5r=r(OGe," (FlauBERT model)"),OGe.forEach(t),X5r=i(D),il=n(D,"LI",{});var YR=s(il);aCe=n(YR,"STRONG",{});var rqt=s(aCe);z5r=r(rqt,"funnel"),rqt.forEach(t),W5r=r(YR," \u2014 "),MY=n(YR,"A",{href:!0});var tqt=s(MY);Q5r=r(tqt,"TFFunnelModel"),tqt.forEach(t),U5r=r(YR," or "),EY=n(YR,"A",{href:!0});var aqt=s(EY);H5r=r(aqt,"TFFunnelBaseModel"),aqt.forEach(t),J5r=r(YR," (Funnel Transformer model)"),YR.forEach(t),Y5r=i(D),xC=n(D,"LI",{});var VGe=s(xC);nCe=n(VGe,"STRONG",{});var nqt=s(nCe);K5r=r(nqt,"gpt2"),nqt.forEach(t),Z5r=r(VGe," \u2014 "),CY=n(VGe,"A",{href:!0});var sqt=s(CY);e0r=r(sqt,"TFGPT2Model"),sqt.forEach(t),o0r=r(VGe," (OpenAI GPT-2 model)"),VGe.forEach(t),r0r=i(D),$C=n(D,"LI",{});var XGe=s($C);sCe=n(XGe,"STRONG",{});var lqt=s(sCe);t0r=r(lqt,"gptj"),lqt.forEach(t),a0r=r(XGe," \u2014 "),wY=n(XGe,"A",{href:!0});var iqt=s(wY);n0r=r(iqt,"TFGPTJModel"),iqt.forEach(t),s0r=r(XGe," (GPT-J model)"),XGe.forEach(t),l0r=i(D),kC=n(D,"LI",{});var zGe=s(kC);lCe=n(zGe,"STRONG",{});var dqt=s(lCe);i0r=r(dqt,"hubert"),dqt.forEach(t),d0r=r(zGe," \u2014 "),AY=n(zGe,"A",{href:!0});var cqt=s(AY);c0r=r(cqt,"TFHubertModel"),cqt.forEach(t),m0r=r(zGe," (Hubert model)"),zGe.forEach(t),f0r=i(D),SC=n(D,"LI",{});var WGe=s(SC);iCe=n(WGe,"STRONG",{});var mqt=s(iCe);g0r=r(mqt,"layoutlm"),mqt.forEach(t),h0r=r(WGe," \u2014 "),LY=n(WGe,"A",{href:!0});var fqt=s(LY);u0r=r(fqt,"TFLayoutLMModel"),fqt.forEach(t),p0r=r(WGe," (LayoutLM model)"),WGe.forEach(t),_0r=i(D),RC=n(D,"LI",{});var QGe=s(RC);dCe=n(QGe,"STRONG",{});var gqt=s(dCe);b0r=r(gqt,"led"),gqt.forEach(t),v0r=r(QGe," \u2014 "),yY=n(QGe,"A",{href:!0});var hqt=s(yY);F0r=r(hqt,"TFLEDModel"),hqt.forEach(t),T0r=r(QGe," (LED model)"),QGe.forEach(t),M0r=i(D),PC=n(D,"LI",{});var UGe=s(PC);cCe=n(UGe,"STRONG",{});var uqt=s(cCe);E0r=r(uqt,"longformer"),uqt.forEach(t),C0r=r(UGe," \u2014 "),xY=n(UGe,"A",{href:!0});var pqt=s(xY);w0r=r(pqt,"TFLongformerModel"),pqt.forEach(t),A0r=r(UGe," (Longformer model)"),UGe.forEach(t),L0r=i(D),BC=n(D,"LI",{});var HGe=s(BC);mCe=n(HGe,"STRONG",{});var _qt=s(mCe);y0r=r(_qt,"lxmert"),_qt.forEach(t),x0r=r(HGe," \u2014 "),$Y=n(HGe,"A",{href:!0});var bqt=s($Y);$0r=r(bqt,"TFLxmertModel"),bqt.forEach(t),k0r=r(HGe," (LXMERT model)"),HGe.forEach(t),S0r=i(D),IC=n(D,"LI",{});var JGe=s(IC);fCe=n(JGe,"STRONG",{});var vqt=s(fCe);R0r=r(vqt,"marian"),vqt.forEach(t),P0r=r(JGe," \u2014 "),kY=n(JGe,"A",{href:!0});var Fqt=s(kY);B0r=r(Fqt,"TFMarianModel"),Fqt.forEach(t),I0r=r(JGe," (Marian model)"),JGe.forEach(t),N0r=i(D),NC=n(D,"LI",{});var YGe=s(NC);gCe=n(YGe,"STRONG",{});var Tqt=s(gCe);q0r=r(Tqt,"mbart"),Tqt.forEach(t),j0r=r(YGe," \u2014 "),SY=n(YGe,"A",{href:!0});var Mqt=s(SY);D0r=r(Mqt,"TFMBartModel"),Mqt.forEach(t),G0r=r(YGe," (mBART model)"),YGe.forEach(t),O0r=i(D),qC=n(D,"LI",{});var KGe=s(qC);hCe=n(KGe,"STRONG",{});var Eqt=s(hCe);V0r=r(Eqt,"mobilebert"),Eqt.forEach(t),X0r=r(KGe," \u2014 "),RY=n(KGe,"A",{href:!0});var Cqt=s(RY);z0r=r(Cqt,"TFMobileBertModel"),Cqt.forEach(t),W0r=r(KGe," (MobileBERT model)"),KGe.forEach(t),Q0r=i(D),jC=n(D,"LI",{});var ZGe=s(jC);uCe=n(ZGe,"STRONG",{});var wqt=s(uCe);U0r=r(wqt,"mpnet"),wqt.forEach(t),H0r=r(ZGe," \u2014 "),PY=n(ZGe,"A",{href:!0});var Aqt=s(PY);J0r=r(Aqt,"TFMPNetModel"),Aqt.forEach(t),Y0r=r(ZGe," (MPNet model)"),ZGe.forEach(t),K0r=i(D),DC=n(D,"LI",{});var eOe=s(DC);pCe=n(eOe,"STRONG",{});var Lqt=s(pCe);Z0r=r(Lqt,"mt5"),Lqt.forEach(t),ewr=r(eOe," \u2014 "),BY=n(eOe,"A",{href:!0});var yqt=s(BY);owr=r(yqt,"TFMT5Model"),yqt.forEach(t),rwr=r(eOe," (MT5 model)"),eOe.forEach(t),twr=i(D),GC=n(D,"LI",{});var oOe=s(GC);_Ce=n(oOe,"STRONG",{});var xqt=s(_Ce);awr=r(xqt,"openai-gpt"),xqt.forEach(t),nwr=r(oOe," \u2014 "),IY=n(oOe,"A",{href:!0});var $qt=s(IY);swr=r($qt,"TFOpenAIGPTModel"),$qt.forEach(t),lwr=r(oOe," (OpenAI GPT model)"),oOe.forEach(t),iwr=i(D),OC=n(D,"LI",{});var rOe=s(OC);bCe=n(rOe,"STRONG",{});var kqt=s(bCe);dwr=r(kqt,"opt"),kqt.forEach(t),cwr=r(rOe," \u2014 "),NY=n(rOe,"A",{href:!0});var Sqt=s(NY);mwr=r(Sqt,"TFOPTModel"),Sqt.forEach(t),fwr=r(rOe," (OPT model)"),rOe.forEach(t),gwr=i(D),VC=n(D,"LI",{});var tOe=s(VC);vCe=n(tOe,"STRONG",{});var Rqt=s(vCe);hwr=r(Rqt,"pegasus"),Rqt.forEach(t),uwr=r(tOe," \u2014 "),qY=n(tOe,"A",{href:!0});var Pqt=s(qY);pwr=r(Pqt,"TFPegasusModel"),Pqt.forEach(t),_wr=r(tOe," (Pegasus model)"),tOe.forEach(t),bwr=i(D),XC=n(D,"LI",{});var aOe=s(XC);FCe=n(aOe,"STRONG",{});var Bqt=s(FCe);vwr=r(Bqt,"regnet"),Bqt.forEach(t),Fwr=r(aOe," \u2014 "),jY=n(aOe,"A",{href:!0});var Iqt=s(jY);Twr=r(Iqt,"TFRegNetModel"),Iqt.forEach(t),Mwr=r(aOe," (RegNet model)"),aOe.forEach(t),Ewr=i(D),zC=n(D,"LI",{});var nOe=s(zC);TCe=n(nOe,"STRONG",{});var Nqt=s(TCe);Cwr=r(Nqt,"rembert"),Nqt.forEach(t),wwr=r(nOe," \u2014 "),DY=n(nOe,"A",{href:!0});var qqt=s(DY);Awr=r(qqt,"TFRemBertModel"),qqt.forEach(t),Lwr=r(nOe," (RemBERT model)"),nOe.forEach(t),ywr=i(D),WC=n(D,"LI",{});var sOe=s(WC);MCe=n(sOe,"STRONG",{});var jqt=s(MCe);xwr=r(jqt,"resnet"),jqt.forEach(t),$wr=r(sOe," \u2014 "),GY=n(sOe,"A",{href:!0});var Dqt=s(GY);kwr=r(Dqt,"TFResNetModel"),Dqt.forEach(t),Swr=r(sOe," (ResNet model)"),sOe.forEach(t),Rwr=i(D),QC=n(D,"LI",{});var lOe=s(QC);ECe=n(lOe,"STRONG",{});var Gqt=s(ECe);Pwr=r(Gqt,"roberta"),Gqt.forEach(t),Bwr=r(lOe," \u2014 "),OY=n(lOe,"A",{href:!0});var Oqt=s(OY);Iwr=r(Oqt,"TFRobertaModel"),Oqt.forEach(t),Nwr=r(lOe," (RoBERTa model)"),lOe.forEach(t),qwr=i(D),UC=n(D,"LI",{});var iOe=s(UC);CCe=n(iOe,"STRONG",{});var Vqt=s(CCe);jwr=r(Vqt,"roformer"),Vqt.forEach(t),Dwr=r(iOe," \u2014 "),VY=n(iOe,"A",{href:!0});var Xqt=s(VY);Gwr=r(Xqt,"TFRoFormerModel"),Xqt.forEach(t),Owr=r(iOe," (RoFormer model)"),iOe.forEach(t),Vwr=i(D),HC=n(D,"LI",{});var dOe=s(HC);wCe=n(dOe,"STRONG",{});var zqt=s(wCe);Xwr=r(zqt,"segformer"),zqt.forEach(t),zwr=r(dOe," \u2014 "),XY=n(dOe,"A",{href:!0});var Wqt=s(XY);Wwr=r(Wqt,"TFSegformerModel"),Wqt.forEach(t),Qwr=r(dOe," (SegFormer model)"),dOe.forEach(t),Uwr=i(D),JC=n(D,"LI",{});var cOe=s(JC);ACe=n(cOe,"STRONG",{});var Qqt=s(ACe);Hwr=r(Qqt,"speech_to_text"),Qqt.forEach(t),Jwr=r(cOe," \u2014 "),zY=n(cOe,"A",{href:!0});var Uqt=s(zY);Ywr=r(Uqt,"TFSpeech2TextModel"),Uqt.forEach(t),Kwr=r(cOe," (Speech2Text model)"),cOe.forEach(t),Zwr=i(D),YC=n(D,"LI",{});var mOe=s(YC);LCe=n(mOe,"STRONG",{});var Hqt=s(LCe);e6r=r(Hqt,"swin"),Hqt.forEach(t),o6r=r(mOe," \u2014 "),WY=n(mOe,"A",{href:!0});var Jqt=s(WY);r6r=r(Jqt,"TFSwinModel"),Jqt.forEach(t),t6r=r(mOe," (Swin Transformer model)"),mOe.forEach(t),a6r=i(D),KC=n(D,"LI",{});var fOe=s(KC);yCe=n(fOe,"STRONG",{});var Yqt=s(yCe);n6r=r(Yqt,"t5"),Yqt.forEach(t),s6r=r(fOe," \u2014 "),QY=n(fOe,"A",{href:!0});var Kqt=s(QY);l6r=r(Kqt,"TFT5Model"),Kqt.forEach(t),i6r=r(fOe," (T5 model)"),fOe.forEach(t),d6r=i(D),ZC=n(D,"LI",{});var gOe=s(ZC);xCe=n(gOe,"STRONG",{});var Zqt=s(xCe);c6r=r(Zqt,"tapas"),Zqt.forEach(t),m6r=r(gOe," \u2014 "),UY=n(gOe,"A",{href:!0});var ejt=s(UY);f6r=r(ejt,"TFTapasModel"),ejt.forEach(t),g6r=r(gOe," (TAPAS model)"),gOe.forEach(t),h6r=i(D),e3=n(D,"LI",{});var hOe=s(e3);$Ce=n(hOe,"STRONG",{});var ojt=s($Ce);u6r=r(ojt,"transfo-xl"),ojt.forEach(t),p6r=r(hOe," \u2014 "),HY=n(hOe,"A",{href:!0});var rjt=s(HY);_6r=r(rjt,"TFTransfoXLModel"),rjt.forEach(t),b6r=r(hOe," (Transformer-XL model)"),hOe.forEach(t),v6r=i(D),o3=n(D,"LI",{});var uOe=s(o3);kCe=n(uOe,"STRONG",{});var tjt=s(kCe);F6r=r(tjt,"vit"),tjt.forEach(t),T6r=r(uOe," \u2014 "),JY=n(uOe,"A",{href:!0});var ajt=s(JY);M6r=r(ajt,"TFViTModel"),ajt.forEach(t),E6r=r(uOe," (ViT model)"),uOe.forEach(t),C6r=i(D),r3=n(D,"LI",{});var pOe=s(r3);SCe=n(pOe,"STRONG",{});var njt=s(SCe);w6r=r(njt,"vit_mae"),njt.forEach(t),A6r=r(pOe," \u2014 "),YY=n(pOe,"A",{href:!0});var sjt=s(YY);L6r=r(sjt,"TFViTMAEModel"),sjt.forEach(t),y6r=r(pOe," (ViTMAE model)"),pOe.forEach(t),x6r=i(D),t3=n(D,"LI",{});var _Oe=s(t3);RCe=n(_Oe,"STRONG",{});var ljt=s(RCe);$6r=r(ljt,"wav2vec2"),ljt.forEach(t),k6r=r(_Oe," \u2014 "),KY=n(_Oe,"A",{href:!0});var ijt=s(KY);S6r=r(ijt,"TFWav2Vec2Model"),ijt.forEach(t),R6r=r(_Oe," (Wav2Vec2 model)"),_Oe.forEach(t),P6r=i(D),a3=n(D,"LI",{});var bOe=s(a3);PCe=n(bOe,"STRONG",{});var djt=s(PCe);B6r=r(djt,"xlm"),djt.forEach(t),I6r=r(bOe," \u2014 "),ZY=n(bOe,"A",{href:!0});var cjt=s(ZY);N6r=r(cjt,"TFXLMModel"),cjt.forEach(t),q6r=r(bOe," (XLM model)"),bOe.forEach(t),j6r=i(D),n3=n(D,"LI",{});var vOe=s(n3);BCe=n(vOe,"STRONG",{});var mjt=s(BCe);D6r=r(mjt,"xlm-roberta"),mjt.forEach(t),G6r=r(vOe," \u2014 "),eK=n(vOe,"A",{href:!0});var fjt=s(eK);O6r=r(fjt,"TFXLMRobertaModel"),fjt.forEach(t),V6r=r(vOe," (XLM-RoBERTa model)"),vOe.forEach(t),X6r=i(D),s3=n(D,"LI",{});var FOe=s(s3);ICe=n(FOe,"STRONG",{});var gjt=s(ICe);z6r=r(gjt,"xlnet"),gjt.forEach(t),W6r=r(FOe," \u2014 "),oK=n(FOe,"A",{href:!0});var hjt=s(oK);Q6r=r(hjt,"TFXLNetModel"),hjt.forEach(t),U6r=r(FOe," (XLNet model)"),FOe.forEach(t),D.forEach(t),H6r=i(Vl),T(l3.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),BUe=i(m),Ac=n(m,"H2",{class:!0});var QJe=s(Ac);i3=n(QJe,"A",{id:!0,class:!0,href:!0});var ujt=s(i3);NCe=n(ujt,"SPAN",{});var pjt=s(NCe);T(n$.$$.fragment,pjt),pjt.forEach(t),ujt.forEach(t),J6r=i(QJe),qCe=n(QJe,"SPAN",{});var _jt=s(qCe);Y6r=r(_jt,"TFAutoModelForPreTraining"),_jt.forEach(t),QJe.forEach(t),IUe=i(m),nr=n(m,"DIV",{class:!0});var Xl=s(nr);T(s$.$$.fragment,Xl),K6r=i(Xl),Lc=n(Xl,"P",{});var $ne=s(Lc);Z6r=r($ne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),rK=n($ne,"A",{href:!0});var bjt=s(rK);eAr=r(bjt,"from_pretrained()"),bjt.forEach(t),oAr=r($ne," class method or the "),tK=n($ne,"A",{href:!0});var vjt=s(tK);rAr=r(vjt,"from_config()"),vjt.forEach(t),tAr=r($ne,` class
method.`),$ne.forEach(t),aAr=i(Xl),l$=n(Xl,"P",{});var UJe=s(l$);nAr=r(UJe,"This class cannot be instantiated directly using "),jCe=n(UJe,"CODE",{});var Fjt=s(jCe);sAr=r(Fjt,"__init__()"),Fjt.forEach(t),lAr=r(UJe," (throws an error)."),UJe.forEach(t),iAr=i(Xl),jt=n(Xl,"DIV",{class:!0});var ly=s(jt);T(i$.$$.fragment,ly),dAr=i(ly),DCe=n(ly,"P",{});var Tjt=s(DCe);cAr=r(Tjt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Tjt.forEach(t),mAr=i(ly),yc=n(ly,"P",{});var kne=s(yc);fAr=r(kne,`Note:
Loading a model from its configuration file does `),GCe=n(kne,"STRONG",{});var Mjt=s(GCe);gAr=r(Mjt,"not"),Mjt.forEach(t),hAr=r(kne,` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=n(kne,"A",{href:!0});var Ejt=s(aK);uAr=r(Ejt,"from_pretrained()"),Ejt.forEach(t),pAr=r(kne," to load the model weights."),kne.forEach(t),_Ar=i(ly),T(d3.$$.fragment,ly),ly.forEach(t),bAr=i(Xl),Pr=n(Xl,"DIV",{class:!0});var zl=s(Pr);T(d$.$$.fragment,zl),vAr=i(zl),OCe=n(zl,"P",{});var Cjt=s(OCe);FAr=r(Cjt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Cjt.forEach(t),TAr=i(zl),_n=n(zl,"P",{});var iy=s(_n);MAr=r(iy,"The model class to instantiate is selected based on the "),VCe=n(iy,"CODE",{});var wjt=s(VCe);EAr=r(wjt,"model_type"),wjt.forEach(t),CAr=r(iy,` property of the config object (either
passed as an argument or loaded from `),XCe=n(iy,"CODE",{});var Ajt=s(XCe);wAr=r(Ajt,"pretrained_model_name_or_path"),Ajt.forEach(t),AAr=r(iy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zCe=n(iy,"CODE",{});var Ljt=s(zCe);LAr=r(Ljt,"pretrained_model_name_or_path"),Ljt.forEach(t),yAr=r(iy,":"),iy.forEach(t),xAr=i(zl),se=n(zl,"UL",{});var le=s(se);c3=n(le,"LI",{});var TOe=s(c3);WCe=n(TOe,"STRONG",{});var yjt=s(WCe);$Ar=r(yjt,"albert"),yjt.forEach(t),kAr=r(TOe," \u2014 "),nK=n(TOe,"A",{href:!0});var xjt=s(nK);SAr=r(xjt,"TFAlbertForPreTraining"),xjt.forEach(t),RAr=r(TOe," (ALBERT model)"),TOe.forEach(t),PAr=i(le),m3=n(le,"LI",{});var MOe=s(m3);QCe=n(MOe,"STRONG",{});var $jt=s(QCe);BAr=r($jt,"bart"),$jt.forEach(t),IAr=r(MOe," \u2014 "),sK=n(MOe,"A",{href:!0});var kjt=s(sK);NAr=r(kjt,"TFBartForConditionalGeneration"),kjt.forEach(t),qAr=r(MOe," (BART model)"),MOe.forEach(t),jAr=i(le),f3=n(le,"LI",{});var EOe=s(f3);UCe=n(EOe,"STRONG",{});var Sjt=s(UCe);DAr=r(Sjt,"bert"),Sjt.forEach(t),GAr=r(EOe," \u2014 "),lK=n(EOe,"A",{href:!0});var Rjt=s(lK);OAr=r(Rjt,"TFBertForPreTraining"),Rjt.forEach(t),VAr=r(EOe," (BERT model)"),EOe.forEach(t),XAr=i(le),g3=n(le,"LI",{});var COe=s(g3);HCe=n(COe,"STRONG",{});var Pjt=s(HCe);zAr=r(Pjt,"camembert"),Pjt.forEach(t),WAr=r(COe," \u2014 "),iK=n(COe,"A",{href:!0});var Bjt=s(iK);QAr=r(Bjt,"TFCamembertForMaskedLM"),Bjt.forEach(t),UAr=r(COe," (CamemBERT model)"),COe.forEach(t),HAr=i(le),h3=n(le,"LI",{});var wOe=s(h3);JCe=n(wOe,"STRONG",{});var Ijt=s(JCe);JAr=r(Ijt,"ctrl"),Ijt.forEach(t),YAr=r(wOe," \u2014 "),dK=n(wOe,"A",{href:!0});var Njt=s(dK);KAr=r(Njt,"TFCTRLLMHeadModel"),Njt.forEach(t),ZAr=r(wOe," (CTRL model)"),wOe.forEach(t),e7r=i(le),u3=n(le,"LI",{});var AOe=s(u3);YCe=n(AOe,"STRONG",{});var qjt=s(YCe);o7r=r(qjt,"distilbert"),qjt.forEach(t),r7r=r(AOe," \u2014 "),cK=n(AOe,"A",{href:!0});var jjt=s(cK);t7r=r(jjt,"TFDistilBertForMaskedLM"),jjt.forEach(t),a7r=r(AOe," (DistilBERT model)"),AOe.forEach(t),n7r=i(le),p3=n(le,"LI",{});var LOe=s(p3);KCe=n(LOe,"STRONG",{});var Djt=s(KCe);s7r=r(Djt,"electra"),Djt.forEach(t),l7r=r(LOe," \u2014 "),mK=n(LOe,"A",{href:!0});var Gjt=s(mK);i7r=r(Gjt,"TFElectraForPreTraining"),Gjt.forEach(t),d7r=r(LOe," (ELECTRA model)"),LOe.forEach(t),c7r=i(le),_3=n(le,"LI",{});var yOe=s(_3);ZCe=n(yOe,"STRONG",{});var Ojt=s(ZCe);m7r=r(Ojt,"flaubert"),Ojt.forEach(t),f7r=r(yOe," \u2014 "),fK=n(yOe,"A",{href:!0});var Vjt=s(fK);g7r=r(Vjt,"TFFlaubertWithLMHeadModel"),Vjt.forEach(t),h7r=r(yOe," (FlauBERT model)"),yOe.forEach(t),u7r=i(le),b3=n(le,"LI",{});var xOe=s(b3);e3e=n(xOe,"STRONG",{});var Xjt=s(e3e);p7r=r(Xjt,"funnel"),Xjt.forEach(t),_7r=r(xOe," \u2014 "),gK=n(xOe,"A",{href:!0});var zjt=s(gK);b7r=r(zjt,"TFFunnelForPreTraining"),zjt.forEach(t),v7r=r(xOe," (Funnel Transformer model)"),xOe.forEach(t),F7r=i(le),v3=n(le,"LI",{});var $Oe=s(v3);o3e=n($Oe,"STRONG",{});var Wjt=s(o3e);T7r=r(Wjt,"gpt2"),Wjt.forEach(t),M7r=r($Oe," \u2014 "),hK=n($Oe,"A",{href:!0});var Qjt=s(hK);E7r=r(Qjt,"TFGPT2LMHeadModel"),Qjt.forEach(t),C7r=r($Oe," (OpenAI GPT-2 model)"),$Oe.forEach(t),w7r=i(le),F3=n(le,"LI",{});var kOe=s(F3);r3e=n(kOe,"STRONG",{});var Ujt=s(r3e);A7r=r(Ujt,"layoutlm"),Ujt.forEach(t),L7r=r(kOe," \u2014 "),uK=n(kOe,"A",{href:!0});var Hjt=s(uK);y7r=r(Hjt,"TFLayoutLMForMaskedLM"),Hjt.forEach(t),x7r=r(kOe," (LayoutLM model)"),kOe.forEach(t),$7r=i(le),T3=n(le,"LI",{});var SOe=s(T3);t3e=n(SOe,"STRONG",{});var Jjt=s(t3e);k7r=r(Jjt,"lxmert"),Jjt.forEach(t),S7r=r(SOe," \u2014 "),pK=n(SOe,"A",{href:!0});var Yjt=s(pK);R7r=r(Yjt,"TFLxmertForPreTraining"),Yjt.forEach(t),P7r=r(SOe," (LXMERT model)"),SOe.forEach(t),B7r=i(le),M3=n(le,"LI",{});var ROe=s(M3);a3e=n(ROe,"STRONG",{});var Kjt=s(a3e);I7r=r(Kjt,"mobilebert"),Kjt.forEach(t),N7r=r(ROe," \u2014 "),_K=n(ROe,"A",{href:!0});var Zjt=s(_K);q7r=r(Zjt,"TFMobileBertForPreTraining"),Zjt.forEach(t),j7r=r(ROe," (MobileBERT model)"),ROe.forEach(t),D7r=i(le),E3=n(le,"LI",{});var POe=s(E3);n3e=n(POe,"STRONG",{});var eDt=s(n3e);G7r=r(eDt,"mpnet"),eDt.forEach(t),O7r=r(POe," \u2014 "),bK=n(POe,"A",{href:!0});var oDt=s(bK);V7r=r(oDt,"TFMPNetForMaskedLM"),oDt.forEach(t),X7r=r(POe," (MPNet model)"),POe.forEach(t),z7r=i(le),C3=n(le,"LI",{});var BOe=s(C3);s3e=n(BOe,"STRONG",{});var rDt=s(s3e);W7r=r(rDt,"openai-gpt"),rDt.forEach(t),Q7r=r(BOe," \u2014 "),vK=n(BOe,"A",{href:!0});var tDt=s(vK);U7r=r(tDt,"TFOpenAIGPTLMHeadModel"),tDt.forEach(t),H7r=r(BOe," (OpenAI GPT model)"),BOe.forEach(t),J7r=i(le),w3=n(le,"LI",{});var IOe=s(w3);l3e=n(IOe,"STRONG",{});var aDt=s(l3e);Y7r=r(aDt,"roberta"),aDt.forEach(t),K7r=r(IOe," \u2014 "),FK=n(IOe,"A",{href:!0});var nDt=s(FK);Z7r=r(nDt,"TFRobertaForMaskedLM"),nDt.forEach(t),eLr=r(IOe," (RoBERTa model)"),IOe.forEach(t),oLr=i(le),A3=n(le,"LI",{});var NOe=s(A3);i3e=n(NOe,"STRONG",{});var sDt=s(i3e);rLr=r(sDt,"t5"),sDt.forEach(t),tLr=r(NOe," \u2014 "),TK=n(NOe,"A",{href:!0});var lDt=s(TK);aLr=r(lDt,"TFT5ForConditionalGeneration"),lDt.forEach(t),nLr=r(NOe," (T5 model)"),NOe.forEach(t),sLr=i(le),L3=n(le,"LI",{});var qOe=s(L3);d3e=n(qOe,"STRONG",{});var iDt=s(d3e);lLr=r(iDt,"tapas"),iDt.forEach(t),iLr=r(qOe," \u2014 "),MK=n(qOe,"A",{href:!0});var dDt=s(MK);dLr=r(dDt,"TFTapasForMaskedLM"),dDt.forEach(t),cLr=r(qOe," (TAPAS model)"),qOe.forEach(t),mLr=i(le),y3=n(le,"LI",{});var jOe=s(y3);c3e=n(jOe,"STRONG",{});var cDt=s(c3e);fLr=r(cDt,"transfo-xl"),cDt.forEach(t),gLr=r(jOe," \u2014 "),EK=n(jOe,"A",{href:!0});var mDt=s(EK);hLr=r(mDt,"TFTransfoXLLMHeadModel"),mDt.forEach(t),uLr=r(jOe," (Transformer-XL model)"),jOe.forEach(t),pLr=i(le),x3=n(le,"LI",{});var DOe=s(x3);m3e=n(DOe,"STRONG",{});var fDt=s(m3e);_Lr=r(fDt,"vit_mae"),fDt.forEach(t),bLr=r(DOe," \u2014 "),CK=n(DOe,"A",{href:!0});var gDt=s(CK);vLr=r(gDt,"TFViTMAEForPreTraining"),gDt.forEach(t),FLr=r(DOe," (ViTMAE model)"),DOe.forEach(t),TLr=i(le),$3=n(le,"LI",{});var GOe=s($3);f3e=n(GOe,"STRONG",{});var hDt=s(f3e);MLr=r(hDt,"xlm"),hDt.forEach(t),ELr=r(GOe," \u2014 "),wK=n(GOe,"A",{href:!0});var uDt=s(wK);CLr=r(uDt,"TFXLMWithLMHeadModel"),uDt.forEach(t),wLr=r(GOe," (XLM model)"),GOe.forEach(t),ALr=i(le),k3=n(le,"LI",{});var OOe=s(k3);g3e=n(OOe,"STRONG",{});var pDt=s(g3e);LLr=r(pDt,"xlm-roberta"),pDt.forEach(t),yLr=r(OOe," \u2014 "),AK=n(OOe,"A",{href:!0});var _Dt=s(AK);xLr=r(_Dt,"TFXLMRobertaForMaskedLM"),_Dt.forEach(t),$Lr=r(OOe," (XLM-RoBERTa model)"),OOe.forEach(t),kLr=i(le),S3=n(le,"LI",{});var VOe=s(S3);h3e=n(VOe,"STRONG",{});var bDt=s(h3e);SLr=r(bDt,"xlnet"),bDt.forEach(t),RLr=r(VOe," \u2014 "),LK=n(VOe,"A",{href:!0});var vDt=s(LK);PLr=r(vDt,"TFXLNetLMHeadModel"),vDt.forEach(t),BLr=r(VOe," (XLNet model)"),VOe.forEach(t),le.forEach(t),ILr=i(zl),T(R3.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),NUe=i(m),xc=n(m,"H2",{class:!0});var HJe=s(xc);P3=n(HJe,"A",{id:!0,class:!0,href:!0});var FDt=s(P3);u3e=n(FDt,"SPAN",{});var TDt=s(u3e);T(c$.$$.fragment,TDt),TDt.forEach(t),FDt.forEach(t),NLr=i(HJe),p3e=n(HJe,"SPAN",{});var MDt=s(p3e);qLr=r(MDt,"TFAutoModelForCausalLM"),MDt.forEach(t),HJe.forEach(t),qUe=i(m),sr=n(m,"DIV",{class:!0});var Wl=s(sr);T(m$.$$.fragment,Wl),jLr=i(Wl),$c=n(Wl,"P",{});var Sne=s($c);DLr=r(Sne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yK=n(Sne,"A",{href:!0});var EDt=s(yK);GLr=r(EDt,"from_pretrained()"),EDt.forEach(t),OLr=r(Sne," class method or the "),xK=n(Sne,"A",{href:!0});var CDt=s(xK);VLr=r(CDt,"from_config()"),CDt.forEach(t),XLr=r(Sne,` class
method.`),Sne.forEach(t),zLr=i(Wl),f$=n(Wl,"P",{});var JJe=s(f$);WLr=r(JJe,"This class cannot be instantiated directly using "),_3e=n(JJe,"CODE",{});var wDt=s(_3e);QLr=r(wDt,"__init__()"),wDt.forEach(t),ULr=r(JJe," (throws an error)."),JJe.forEach(t),HLr=i(Wl),Dt=n(Wl,"DIV",{class:!0});var dy=s(Dt);T(g$.$$.fragment,dy),JLr=i(dy),b3e=n(dy,"P",{});var ADt=s(b3e);YLr=r(ADt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ADt.forEach(t),KLr=i(dy),kc=n(dy,"P",{});var Rne=s(kc);ZLr=r(Rne,`Note:
Loading a model from its configuration file does `),v3e=n(Rne,"STRONG",{});var LDt=s(v3e);eyr=r(LDt,"not"),LDt.forEach(t),oyr=r(Rne,` load the model weights. It only affects the
model\u2019s configuration. Use `),$K=n(Rne,"A",{href:!0});var yDt=s($K);ryr=r(yDt,"from_pretrained()"),yDt.forEach(t),tyr=r(Rne," to load the model weights."),Rne.forEach(t),ayr=i(dy),T(B3.$$.fragment,dy),dy.forEach(t),nyr=i(Wl),Br=n(Wl,"DIV",{class:!0});var Ql=s(Br);T(h$.$$.fragment,Ql),syr=i(Ql),F3e=n(Ql,"P",{});var xDt=s(F3e);lyr=r(xDt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),xDt.forEach(t),iyr=i(Ql),bn=n(Ql,"P",{});var cy=s(bn);dyr=r(cy,"The model class to instantiate is selected based on the "),T3e=n(cy,"CODE",{});var $Dt=s(T3e);cyr=r($Dt,"model_type"),$Dt.forEach(t),myr=r(cy,` property of the config object (either
passed as an argument or loaded from `),M3e=n(cy,"CODE",{});var kDt=s(M3e);fyr=r(kDt,"pretrained_model_name_or_path"),kDt.forEach(t),gyr=r(cy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E3e=n(cy,"CODE",{});var SDt=s(E3e);hyr=r(SDt,"pretrained_model_name_or_path"),SDt.forEach(t),uyr=r(cy,":"),cy.forEach(t),pyr=i(Ql),Me=n(Ql,"UL",{});var Ce=s(Me);I3=n(Ce,"LI",{});var XOe=s(I3);C3e=n(XOe,"STRONG",{});var RDt=s(C3e);_yr=r(RDt,"bert"),RDt.forEach(t),byr=r(XOe," \u2014 "),kK=n(XOe,"A",{href:!0});var PDt=s(kK);vyr=r(PDt,"TFBertLMHeadModel"),PDt.forEach(t),Fyr=r(XOe," (BERT model)"),XOe.forEach(t),Tyr=i(Ce),N3=n(Ce,"LI",{});var zOe=s(N3);w3e=n(zOe,"STRONG",{});var BDt=s(w3e);Myr=r(BDt,"camembert"),BDt.forEach(t),Eyr=r(zOe," \u2014 "),SK=n(zOe,"A",{href:!0});var IDt=s(SK);Cyr=r(IDt,"TFCamembertForCausalLM"),IDt.forEach(t),wyr=r(zOe," (CamemBERT model)"),zOe.forEach(t),Ayr=i(Ce),q3=n(Ce,"LI",{});var WOe=s(q3);A3e=n(WOe,"STRONG",{});var NDt=s(A3e);Lyr=r(NDt,"ctrl"),NDt.forEach(t),yyr=r(WOe," \u2014 "),RK=n(WOe,"A",{href:!0});var qDt=s(RK);xyr=r(qDt,"TFCTRLLMHeadModel"),qDt.forEach(t),$yr=r(WOe," (CTRL model)"),WOe.forEach(t),kyr=i(Ce),j3=n(Ce,"LI",{});var QOe=s(j3);L3e=n(QOe,"STRONG",{});var jDt=s(L3e);Syr=r(jDt,"gpt2"),jDt.forEach(t),Ryr=r(QOe," \u2014 "),PK=n(QOe,"A",{href:!0});var DDt=s(PK);Pyr=r(DDt,"TFGPT2LMHeadModel"),DDt.forEach(t),Byr=r(QOe," (OpenAI GPT-2 model)"),QOe.forEach(t),Iyr=i(Ce),D3=n(Ce,"LI",{});var UOe=s(D3);y3e=n(UOe,"STRONG",{});var GDt=s(y3e);Nyr=r(GDt,"gptj"),GDt.forEach(t),qyr=r(UOe," \u2014 "),BK=n(UOe,"A",{href:!0});var ODt=s(BK);jyr=r(ODt,"TFGPTJForCausalLM"),ODt.forEach(t),Dyr=r(UOe," (GPT-J model)"),UOe.forEach(t),Gyr=i(Ce),G3=n(Ce,"LI",{});var HOe=s(G3);x3e=n(HOe,"STRONG",{});var VDt=s(x3e);Oyr=r(VDt,"openai-gpt"),VDt.forEach(t),Vyr=r(HOe," \u2014 "),IK=n(HOe,"A",{href:!0});var XDt=s(IK);Xyr=r(XDt,"TFOpenAIGPTLMHeadModel"),XDt.forEach(t),zyr=r(HOe," (OpenAI GPT model)"),HOe.forEach(t),Wyr=i(Ce),O3=n(Ce,"LI",{});var JOe=s(O3);$3e=n(JOe,"STRONG",{});var zDt=s($3e);Qyr=r(zDt,"opt"),zDt.forEach(t),Uyr=r(JOe," \u2014 "),NK=n(JOe,"A",{href:!0});var WDt=s(NK);Hyr=r(WDt,"TFOPTForCausalLM"),WDt.forEach(t),Jyr=r(JOe," (OPT model)"),JOe.forEach(t),Yyr=i(Ce),V3=n(Ce,"LI",{});var YOe=s(V3);k3e=n(YOe,"STRONG",{});var QDt=s(k3e);Kyr=r(QDt,"rembert"),QDt.forEach(t),Zyr=r(YOe," \u2014 "),qK=n(YOe,"A",{href:!0});var UDt=s(qK);e8r=r(UDt,"TFRemBertForCausalLM"),UDt.forEach(t),o8r=r(YOe," (RemBERT model)"),YOe.forEach(t),r8r=i(Ce),X3=n(Ce,"LI",{});var KOe=s(X3);S3e=n(KOe,"STRONG",{});var HDt=s(S3e);t8r=r(HDt,"roberta"),HDt.forEach(t),a8r=r(KOe," \u2014 "),jK=n(KOe,"A",{href:!0});var JDt=s(jK);n8r=r(JDt,"TFRobertaForCausalLM"),JDt.forEach(t),s8r=r(KOe," (RoBERTa model)"),KOe.forEach(t),l8r=i(Ce),z3=n(Ce,"LI",{});var ZOe=s(z3);R3e=n(ZOe,"STRONG",{});var YDt=s(R3e);i8r=r(YDt,"roformer"),YDt.forEach(t),d8r=r(ZOe," \u2014 "),DK=n(ZOe,"A",{href:!0});var KDt=s(DK);c8r=r(KDt,"TFRoFormerForCausalLM"),KDt.forEach(t),m8r=r(ZOe," (RoFormer model)"),ZOe.forEach(t),f8r=i(Ce),W3=n(Ce,"LI",{});var eVe=s(W3);P3e=n(eVe,"STRONG",{});var ZDt=s(P3e);g8r=r(ZDt,"transfo-xl"),ZDt.forEach(t),h8r=r(eVe," \u2014 "),GK=n(eVe,"A",{href:!0});var eGt=s(GK);u8r=r(eGt,"TFTransfoXLLMHeadModel"),eGt.forEach(t),p8r=r(eVe," (Transformer-XL model)"),eVe.forEach(t),_8r=i(Ce),Q3=n(Ce,"LI",{});var oVe=s(Q3);B3e=n(oVe,"STRONG",{});var oGt=s(B3e);b8r=r(oGt,"xlm"),oGt.forEach(t),v8r=r(oVe," \u2014 "),OK=n(oVe,"A",{href:!0});var rGt=s(OK);F8r=r(rGt,"TFXLMWithLMHeadModel"),rGt.forEach(t),T8r=r(oVe," (XLM model)"),oVe.forEach(t),M8r=i(Ce),U3=n(Ce,"LI",{});var rVe=s(U3);I3e=n(rVe,"STRONG",{});var tGt=s(I3e);E8r=r(tGt,"xlnet"),tGt.forEach(t),C8r=r(rVe," \u2014 "),VK=n(rVe,"A",{href:!0});var aGt=s(VK);w8r=r(aGt,"TFXLNetLMHeadModel"),aGt.forEach(t),A8r=r(rVe," (XLNet model)"),rVe.forEach(t),Ce.forEach(t),L8r=i(Ql),T(H3.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),jUe=i(m),Sc=n(m,"H2",{class:!0});var YJe=s(Sc);J3=n(YJe,"A",{id:!0,class:!0,href:!0});var nGt=s(J3);N3e=n(nGt,"SPAN",{});var sGt=s(N3e);T(u$.$$.fragment,sGt),sGt.forEach(t),nGt.forEach(t),y8r=i(YJe),q3e=n(YJe,"SPAN",{});var lGt=s(q3e);x8r=r(lGt,"TFAutoModelForImageClassification"),lGt.forEach(t),YJe.forEach(t),DUe=i(m),lr=n(m,"DIV",{class:!0});var Ul=s(lr);T(p$.$$.fragment,Ul),$8r=i(Ul),Rc=n(Ul,"P",{});var Pne=s(Rc);k8r=r(Pne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),XK=n(Pne,"A",{href:!0});var iGt=s(XK);S8r=r(iGt,"from_pretrained()"),iGt.forEach(t),R8r=r(Pne," class method or the "),zK=n(Pne,"A",{href:!0});var dGt=s(zK);P8r=r(dGt,"from_config()"),dGt.forEach(t),B8r=r(Pne,` class
method.`),Pne.forEach(t),I8r=i(Ul),_$=n(Ul,"P",{});var KJe=s(_$);N8r=r(KJe,"This class cannot be instantiated directly using "),j3e=n(KJe,"CODE",{});var cGt=s(j3e);q8r=r(cGt,"__init__()"),cGt.forEach(t),j8r=r(KJe," (throws an error)."),KJe.forEach(t),D8r=i(Ul),Gt=n(Ul,"DIV",{class:!0});var my=s(Gt);T(b$.$$.fragment,my),G8r=i(my),D3e=n(my,"P",{});var mGt=s(D3e);O8r=r(mGt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),mGt.forEach(t),V8r=i(my),Pc=n(my,"P",{});var Bne=s(Pc);X8r=r(Bne,`Note:
Loading a model from its configuration file does `),G3e=n(Bne,"STRONG",{});var fGt=s(G3e);z8r=r(fGt,"not"),fGt.forEach(t),W8r=r(Bne,` load the model weights. It only affects the
model\u2019s configuration. Use `),WK=n(Bne,"A",{href:!0});var gGt=s(WK);Q8r=r(gGt,"from_pretrained()"),gGt.forEach(t),U8r=r(Bne," to load the model weights."),Bne.forEach(t),H8r=i(my),T(Y3.$$.fragment,my),my.forEach(t),J8r=i(Ul),Ir=n(Ul,"DIV",{class:!0});var Hl=s(Ir);T(v$.$$.fragment,Hl),Y8r=i(Hl),O3e=n(Hl,"P",{});var hGt=s(O3e);K8r=r(hGt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hGt.forEach(t),Z8r=i(Hl),vn=n(Hl,"P",{});var fy=s(vn);e9r=r(fy,"The model class to instantiate is selected based on the "),V3e=n(fy,"CODE",{});var uGt=s(V3e);o9r=r(uGt,"model_type"),uGt.forEach(t),r9r=r(fy,` property of the config object (either
passed as an argument or loaded from `),X3e=n(fy,"CODE",{});var pGt=s(X3e);t9r=r(pGt,"pretrained_model_name_or_path"),pGt.forEach(t),a9r=r(fy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z3e=n(fy,"CODE",{});var _Gt=s(z3e);n9r=r(_Gt,"pretrained_model_name_or_path"),_Gt.forEach(t),s9r=r(fy,":"),fy.forEach(t),l9r=i(Hl),Ve=n(Hl,"UL",{});var Eo=s(Ve);K3=n(Eo,"LI",{});var tVe=s(K3);W3e=n(tVe,"STRONG",{});var bGt=s(W3e);i9r=r(bGt,"convnext"),bGt.forEach(t),d9r=r(tVe," \u2014 "),QK=n(tVe,"A",{href:!0});var vGt=s(QK);c9r=r(vGt,"TFConvNextForImageClassification"),vGt.forEach(t),m9r=r(tVe," (ConvNeXT model)"),tVe.forEach(t),f9r=i(Eo),Z3=n(Eo,"LI",{});var aVe=s(Z3);Q3e=n(aVe,"STRONG",{});var FGt=s(Q3e);g9r=r(FGt,"data2vec-vision"),FGt.forEach(t),h9r=r(aVe," \u2014 "),UK=n(aVe,"A",{href:!0});var TGt=s(UK);u9r=r(TGt,"TFData2VecVisionForImageClassification"),TGt.forEach(t),p9r=r(aVe," (Data2VecVision model)"),aVe.forEach(t),_9r=i(Eo),dl=n(Eo,"LI",{});var KR=s(dl);U3e=n(KR,"STRONG",{});var MGt=s(U3e);b9r=r(MGt,"deit"),MGt.forEach(t),v9r=r(KR," \u2014 "),HK=n(KR,"A",{href:!0});var EGt=s(HK);F9r=r(EGt,"TFDeiTForImageClassification"),EGt.forEach(t),T9r=r(KR," or "),JK=n(KR,"A",{href:!0});var CGt=s(JK);M9r=r(CGt,"TFDeiTForImageClassificationWithTeacher"),CGt.forEach(t),E9r=r(KR," (DeiT model)"),KR.forEach(t),C9r=i(Eo),e5=n(Eo,"LI",{});var nVe=s(e5);H3e=n(nVe,"STRONG",{});var wGt=s(H3e);w9r=r(wGt,"regnet"),wGt.forEach(t),A9r=r(nVe," \u2014 "),YK=n(nVe,"A",{href:!0});var AGt=s(YK);L9r=r(AGt,"TFRegNetForImageClassification"),AGt.forEach(t),y9r=r(nVe," (RegNet model)"),nVe.forEach(t),x9r=i(Eo),o5=n(Eo,"LI",{});var sVe=s(o5);J3e=n(sVe,"STRONG",{});var LGt=s(J3e);$9r=r(LGt,"resnet"),LGt.forEach(t),k9r=r(sVe," \u2014 "),KK=n(sVe,"A",{href:!0});var yGt=s(KK);S9r=r(yGt,"TFResNetForImageClassification"),yGt.forEach(t),R9r=r(sVe," (ResNet model)"),sVe.forEach(t),P9r=i(Eo),r5=n(Eo,"LI",{});var lVe=s(r5);Y3e=n(lVe,"STRONG",{});var xGt=s(Y3e);B9r=r(xGt,"segformer"),xGt.forEach(t),I9r=r(lVe," \u2014 "),ZK=n(lVe,"A",{href:!0});var $Gt=s(ZK);N9r=r($Gt,"TFSegformerForImageClassification"),$Gt.forEach(t),q9r=r(lVe," (SegFormer model)"),lVe.forEach(t),j9r=i(Eo),t5=n(Eo,"LI",{});var iVe=s(t5);K3e=n(iVe,"STRONG",{});var kGt=s(K3e);D9r=r(kGt,"swin"),kGt.forEach(t),G9r=r(iVe," \u2014 "),eZ=n(iVe,"A",{href:!0});var SGt=s(eZ);O9r=r(SGt,"TFSwinForImageClassification"),SGt.forEach(t),V9r=r(iVe," (Swin Transformer model)"),iVe.forEach(t),X9r=i(Eo),a5=n(Eo,"LI",{});var dVe=s(a5);Z3e=n(dVe,"STRONG",{});var RGt=s(Z3e);z9r=r(RGt,"vit"),RGt.forEach(t),W9r=r(dVe," \u2014 "),oZ=n(dVe,"A",{href:!0});var PGt=s(oZ);Q9r=r(PGt,"TFViTForImageClassification"),PGt.forEach(t),U9r=r(dVe," (ViT model)"),dVe.forEach(t),Eo.forEach(t),H9r=i(Hl),T(n5.$$.fragment,Hl),Hl.forEach(t),Ul.forEach(t),GUe=i(m),Bc=n(m,"H2",{class:!0});var ZJe=s(Bc);s5=n(ZJe,"A",{id:!0,class:!0,href:!0});var BGt=s(s5);e5e=n(BGt,"SPAN",{});var IGt=s(e5e);T(F$.$$.fragment,IGt),IGt.forEach(t),BGt.forEach(t),J9r=i(ZJe),o5e=n(ZJe,"SPAN",{});var NGt=s(o5e);Y9r=r(NGt,"TFAutoModelForSemanticSegmentation"),NGt.forEach(t),ZJe.forEach(t),OUe=i(m),ir=n(m,"DIV",{class:!0});var Jl=s(ir);T(T$.$$.fragment,Jl),K9r=i(Jl),Ic=n(Jl,"P",{});var Ine=s(Ic);Z9r=r(Ine,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),rZ=n(Ine,"A",{href:!0});var qGt=s(rZ);exr=r(qGt,"from_pretrained()"),qGt.forEach(t),oxr=r(Ine," class method or the "),tZ=n(Ine,"A",{href:!0});var jGt=s(tZ);rxr=r(jGt,"from_config()"),jGt.forEach(t),txr=r(Ine,` class
method.`),Ine.forEach(t),axr=i(Jl),M$=n(Jl,"P",{});var eYe=s(M$);nxr=r(eYe,"This class cannot be instantiated directly using "),r5e=n(eYe,"CODE",{});var DGt=s(r5e);sxr=r(DGt,"__init__()"),DGt.forEach(t),lxr=r(eYe," (throws an error)."),eYe.forEach(t),ixr=i(Jl),Ot=n(Jl,"DIV",{class:!0});var gy=s(Ot);T(E$.$$.fragment,gy),dxr=i(gy),t5e=n(gy,"P",{});var GGt=s(t5e);cxr=r(GGt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),GGt.forEach(t),mxr=i(gy),Nc=n(gy,"P",{});var Nne=s(Nc);fxr=r(Nne,`Note:
Loading a model from its configuration file does `),a5e=n(Nne,"STRONG",{});var OGt=s(a5e);gxr=r(OGt,"not"),OGt.forEach(t),hxr=r(Nne,` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=n(Nne,"A",{href:!0});var VGt=s(aZ);uxr=r(VGt,"from_pretrained()"),VGt.forEach(t),pxr=r(Nne," to load the model weights."),Nne.forEach(t),_xr=i(gy),T(l5.$$.fragment,gy),gy.forEach(t),bxr=i(Jl),Nr=n(Jl,"DIV",{class:!0});var Yl=s(Nr);T(C$.$$.fragment,Yl),vxr=i(Yl),n5e=n(Yl,"P",{});var XGt=s(n5e);Fxr=r(XGt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),XGt.forEach(t),Txr=i(Yl),Fn=n(Yl,"P",{});var hy=s(Fn);Mxr=r(hy,"The model class to instantiate is selected based on the "),s5e=n(hy,"CODE",{});var zGt=s(s5e);Exr=r(zGt,"model_type"),zGt.forEach(t),Cxr=r(hy,` property of the config object (either
passed as an argument or loaded from `),l5e=n(hy,"CODE",{});var WGt=s(l5e);wxr=r(WGt,"pretrained_model_name_or_path"),WGt.forEach(t),Axr=r(hy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i5e=n(hy,"CODE",{});var QGt=s(i5e);Lxr=r(QGt,"pretrained_model_name_or_path"),QGt.forEach(t),yxr=r(hy,":"),hy.forEach(t),xxr=i(Yl),w$=n(Yl,"UL",{});var oYe=s(w$);i5=n(oYe,"LI",{});var cVe=s(i5);d5e=n(cVe,"STRONG",{});var UGt=s(d5e);$xr=r(UGt,"data2vec-vision"),UGt.forEach(t),kxr=r(cVe," \u2014 "),nZ=n(cVe,"A",{href:!0});var HGt=s(nZ);Sxr=r(HGt,"TFData2VecVisionForSemanticSegmentation"),HGt.forEach(t),Rxr=r(cVe," (Data2VecVision model)"),cVe.forEach(t),Pxr=i(oYe),d5=n(oYe,"LI",{});var mVe=s(d5);c5e=n(mVe,"STRONG",{});var JGt=s(c5e);Bxr=r(JGt,"segformer"),JGt.forEach(t),Ixr=r(mVe," \u2014 "),sZ=n(mVe,"A",{href:!0});var YGt=s(sZ);Nxr=r(YGt,"TFSegformerForSemanticSegmentation"),YGt.forEach(t),qxr=r(mVe," (SegFormer model)"),mVe.forEach(t),oYe.forEach(t),jxr=i(Yl),T(c5.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),VUe=i(m),qc=n(m,"H2",{class:!0});var rYe=s(qc);m5=n(rYe,"A",{id:!0,class:!0,href:!0});var KGt=s(m5);m5e=n(KGt,"SPAN",{});var ZGt=s(m5e);T(A$.$$.fragment,ZGt),ZGt.forEach(t),KGt.forEach(t),Dxr=i(rYe),f5e=n(rYe,"SPAN",{});var eOt=s(f5e);Gxr=r(eOt,"TFAutoModelForMaskedLM"),eOt.forEach(t),rYe.forEach(t),XUe=i(m),dr=n(m,"DIV",{class:!0});var Kl=s(dr);T(L$.$$.fragment,Kl),Oxr=i(Kl),jc=n(Kl,"P",{});var qne=s(jc);Vxr=r(qne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),lZ=n(qne,"A",{href:!0});var oOt=s(lZ);Xxr=r(oOt,"from_pretrained()"),oOt.forEach(t),zxr=r(qne," class method or the "),iZ=n(qne,"A",{href:!0});var rOt=s(iZ);Wxr=r(rOt,"from_config()"),rOt.forEach(t),Qxr=r(qne,` class
method.`),qne.forEach(t),Uxr=i(Kl),y$=n(Kl,"P",{});var tYe=s(y$);Hxr=r(tYe,"This class cannot be instantiated directly using "),g5e=n(tYe,"CODE",{});var tOt=s(g5e);Jxr=r(tOt,"__init__()"),tOt.forEach(t),Yxr=r(tYe," (throws an error)."),tYe.forEach(t),Kxr=i(Kl),Vt=n(Kl,"DIV",{class:!0});var uy=s(Vt);T(x$.$$.fragment,uy),Zxr=i(uy),h5e=n(uy,"P",{});var aOt=s(h5e);e$r=r(aOt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),aOt.forEach(t),o$r=i(uy),Dc=n(uy,"P",{});var jne=s(Dc);r$r=r(jne,`Note:
Loading a model from its configuration file does `),u5e=n(jne,"STRONG",{});var nOt=s(u5e);t$r=r(nOt,"not"),nOt.forEach(t),a$r=r(jne,` load the model weights. It only affects the
model\u2019s configuration. Use `),dZ=n(jne,"A",{href:!0});var sOt=s(dZ);n$r=r(sOt,"from_pretrained()"),sOt.forEach(t),s$r=r(jne," to load the model weights."),jne.forEach(t),l$r=i(uy),T(f5.$$.fragment,uy),uy.forEach(t),i$r=i(Kl),qr=n(Kl,"DIV",{class:!0});var Zl=s(qr);T($$.$$.fragment,Zl),d$r=i(Zl),p5e=n(Zl,"P",{});var lOt=s(p5e);c$r=r(lOt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),lOt.forEach(t),m$r=i(Zl),Tn=n(Zl,"P",{});var py=s(Tn);f$r=r(py,"The model class to instantiate is selected based on the "),_5e=n(py,"CODE",{});var iOt=s(_5e);g$r=r(iOt,"model_type"),iOt.forEach(t),h$r=r(py,` property of the config object (either
passed as an argument or loaded from `),b5e=n(py,"CODE",{});var dOt=s(b5e);u$r=r(dOt,"pretrained_model_name_or_path"),dOt.forEach(t),p$r=r(py,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v5e=n(py,"CODE",{});var cOt=s(v5e);_$r=r(cOt,"pretrained_model_name_or_path"),cOt.forEach(t),b$r=r(py,":"),py.forEach(t),v$r=i(Zl),ie=n(Zl,"UL",{});var ge=s(ie);g5=n(ge,"LI",{});var fVe=s(g5);F5e=n(fVe,"STRONG",{});var mOt=s(F5e);F$r=r(mOt,"albert"),mOt.forEach(t),T$r=r(fVe," \u2014 "),cZ=n(fVe,"A",{href:!0});var fOt=s(cZ);M$r=r(fOt,"TFAlbertForMaskedLM"),fOt.forEach(t),E$r=r(fVe," (ALBERT model)"),fVe.forEach(t),C$r=i(ge),h5=n(ge,"LI",{});var gVe=s(h5);T5e=n(gVe,"STRONG",{});var gOt=s(T5e);w$r=r(gOt,"bert"),gOt.forEach(t),A$r=r(gVe," \u2014 "),mZ=n(gVe,"A",{href:!0});var hOt=s(mZ);L$r=r(hOt,"TFBertForMaskedLM"),hOt.forEach(t),y$r=r(gVe," (BERT model)"),gVe.forEach(t),x$r=i(ge),u5=n(ge,"LI",{});var hVe=s(u5);M5e=n(hVe,"STRONG",{});var uOt=s(M5e);$$r=r(uOt,"camembert"),uOt.forEach(t),k$r=r(hVe," \u2014 "),fZ=n(hVe,"A",{href:!0});var pOt=s(fZ);S$r=r(pOt,"TFCamembertForMaskedLM"),pOt.forEach(t),R$r=r(hVe," (CamemBERT model)"),hVe.forEach(t),P$r=i(ge),p5=n(ge,"LI",{});var uVe=s(p5);E5e=n(uVe,"STRONG",{});var _Ot=s(E5e);B$r=r(_Ot,"convbert"),_Ot.forEach(t),I$r=r(uVe," \u2014 "),gZ=n(uVe,"A",{href:!0});var bOt=s(gZ);N$r=r(bOt,"TFConvBertForMaskedLM"),bOt.forEach(t),q$r=r(uVe," (ConvBERT model)"),uVe.forEach(t),j$r=i(ge),_5=n(ge,"LI",{});var pVe=s(_5);C5e=n(pVe,"STRONG",{});var vOt=s(C5e);D$r=r(vOt,"deberta"),vOt.forEach(t),G$r=r(pVe," \u2014 "),hZ=n(pVe,"A",{href:!0});var FOt=s(hZ);O$r=r(FOt,"TFDebertaForMaskedLM"),FOt.forEach(t),V$r=r(pVe," (DeBERTa model)"),pVe.forEach(t),X$r=i(ge),b5=n(ge,"LI",{});var _Ve=s(b5);w5e=n(_Ve,"STRONG",{});var TOt=s(w5e);z$r=r(TOt,"deberta-v2"),TOt.forEach(t),W$r=r(_Ve," \u2014 "),uZ=n(_Ve,"A",{href:!0});var MOt=s(uZ);Q$r=r(MOt,"TFDebertaV2ForMaskedLM"),MOt.forEach(t),U$r=r(_Ve," (DeBERTa-v2 model)"),_Ve.forEach(t),H$r=i(ge),v5=n(ge,"LI",{});var bVe=s(v5);A5e=n(bVe,"STRONG",{});var EOt=s(A5e);J$r=r(EOt,"distilbert"),EOt.forEach(t),Y$r=r(bVe," \u2014 "),pZ=n(bVe,"A",{href:!0});var COt=s(pZ);K$r=r(COt,"TFDistilBertForMaskedLM"),COt.forEach(t),Z$r=r(bVe," (DistilBERT model)"),bVe.forEach(t),ekr=i(ge),F5=n(ge,"LI",{});var vVe=s(F5);L5e=n(vVe,"STRONG",{});var wOt=s(L5e);okr=r(wOt,"electra"),wOt.forEach(t),rkr=r(vVe," \u2014 "),_Z=n(vVe,"A",{href:!0});var AOt=s(_Z);tkr=r(AOt,"TFElectraForMaskedLM"),AOt.forEach(t),akr=r(vVe," (ELECTRA model)"),vVe.forEach(t),nkr=i(ge),T5=n(ge,"LI",{});var FVe=s(T5);y5e=n(FVe,"STRONG",{});var LOt=s(y5e);skr=r(LOt,"flaubert"),LOt.forEach(t),lkr=r(FVe," \u2014 "),bZ=n(FVe,"A",{href:!0});var yOt=s(bZ);ikr=r(yOt,"TFFlaubertWithLMHeadModel"),yOt.forEach(t),dkr=r(FVe," (FlauBERT model)"),FVe.forEach(t),ckr=i(ge),M5=n(ge,"LI",{});var TVe=s(M5);x5e=n(TVe,"STRONG",{});var xOt=s(x5e);mkr=r(xOt,"funnel"),xOt.forEach(t),fkr=r(TVe," \u2014 "),vZ=n(TVe,"A",{href:!0});var $Ot=s(vZ);gkr=r($Ot,"TFFunnelForMaskedLM"),$Ot.forEach(t),hkr=r(TVe," (Funnel Transformer model)"),TVe.forEach(t),ukr=i(ge),E5=n(ge,"LI",{});var MVe=s(E5);$5e=n(MVe,"STRONG",{});var kOt=s($5e);pkr=r(kOt,"layoutlm"),kOt.forEach(t),_kr=r(MVe," \u2014 "),FZ=n(MVe,"A",{href:!0});var SOt=s(FZ);bkr=r(SOt,"TFLayoutLMForMaskedLM"),SOt.forEach(t),vkr=r(MVe," (LayoutLM model)"),MVe.forEach(t),Fkr=i(ge),C5=n(ge,"LI",{});var EVe=s(C5);k5e=n(EVe,"STRONG",{});var ROt=s(k5e);Tkr=r(ROt,"longformer"),ROt.forEach(t),Mkr=r(EVe," \u2014 "),TZ=n(EVe,"A",{href:!0});var POt=s(TZ);Ekr=r(POt,"TFLongformerForMaskedLM"),POt.forEach(t),Ckr=r(EVe," (Longformer model)"),EVe.forEach(t),wkr=i(ge),w5=n(ge,"LI",{});var CVe=s(w5);S5e=n(CVe,"STRONG",{});var BOt=s(S5e);Akr=r(BOt,"mobilebert"),BOt.forEach(t),Lkr=r(CVe," \u2014 "),MZ=n(CVe,"A",{href:!0});var IOt=s(MZ);ykr=r(IOt,"TFMobileBertForMaskedLM"),IOt.forEach(t),xkr=r(CVe," (MobileBERT model)"),CVe.forEach(t),$kr=i(ge),A5=n(ge,"LI",{});var wVe=s(A5);R5e=n(wVe,"STRONG",{});var NOt=s(R5e);kkr=r(NOt,"mpnet"),NOt.forEach(t),Skr=r(wVe," \u2014 "),EZ=n(wVe,"A",{href:!0});var qOt=s(EZ);Rkr=r(qOt,"TFMPNetForMaskedLM"),qOt.forEach(t),Pkr=r(wVe," (MPNet model)"),wVe.forEach(t),Bkr=i(ge),L5=n(ge,"LI",{});var AVe=s(L5);P5e=n(AVe,"STRONG",{});var jOt=s(P5e);Ikr=r(jOt,"rembert"),jOt.forEach(t),Nkr=r(AVe," \u2014 "),CZ=n(AVe,"A",{href:!0});var DOt=s(CZ);qkr=r(DOt,"TFRemBertForMaskedLM"),DOt.forEach(t),jkr=r(AVe," (RemBERT model)"),AVe.forEach(t),Dkr=i(ge),y5=n(ge,"LI",{});var LVe=s(y5);B5e=n(LVe,"STRONG",{});var GOt=s(B5e);Gkr=r(GOt,"roberta"),GOt.forEach(t),Okr=r(LVe," \u2014 "),wZ=n(LVe,"A",{href:!0});var OOt=s(wZ);Vkr=r(OOt,"TFRobertaForMaskedLM"),OOt.forEach(t),Xkr=r(LVe," (RoBERTa model)"),LVe.forEach(t),zkr=i(ge),x5=n(ge,"LI",{});var yVe=s(x5);I5e=n(yVe,"STRONG",{});var VOt=s(I5e);Wkr=r(VOt,"roformer"),VOt.forEach(t),Qkr=r(yVe," \u2014 "),AZ=n(yVe,"A",{href:!0});var XOt=s(AZ);Ukr=r(XOt,"TFRoFormerForMaskedLM"),XOt.forEach(t),Hkr=r(yVe," (RoFormer model)"),yVe.forEach(t),Jkr=i(ge),$5=n(ge,"LI",{});var xVe=s($5);N5e=n(xVe,"STRONG",{});var zOt=s(N5e);Ykr=r(zOt,"tapas"),zOt.forEach(t),Kkr=r(xVe," \u2014 "),LZ=n(xVe,"A",{href:!0});var WOt=s(LZ);Zkr=r(WOt,"TFTapasForMaskedLM"),WOt.forEach(t),eSr=r(xVe," (TAPAS model)"),xVe.forEach(t),oSr=i(ge),k5=n(ge,"LI",{});var $Ve=s(k5);q5e=n($Ve,"STRONG",{});var QOt=s(q5e);rSr=r(QOt,"xlm"),QOt.forEach(t),tSr=r($Ve," \u2014 "),yZ=n($Ve,"A",{href:!0});var UOt=s(yZ);aSr=r(UOt,"TFXLMWithLMHeadModel"),UOt.forEach(t),nSr=r($Ve," (XLM model)"),$Ve.forEach(t),sSr=i(ge),S5=n(ge,"LI",{});var kVe=s(S5);j5e=n(kVe,"STRONG",{});var HOt=s(j5e);lSr=r(HOt,"xlm-roberta"),HOt.forEach(t),iSr=r(kVe," \u2014 "),xZ=n(kVe,"A",{href:!0});var JOt=s(xZ);dSr=r(JOt,"TFXLMRobertaForMaskedLM"),JOt.forEach(t),cSr=r(kVe," (XLM-RoBERTa model)"),kVe.forEach(t),ge.forEach(t),mSr=i(Zl),T(R5.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),zUe=i(m),Gc=n(m,"H2",{class:!0});var aYe=s(Gc);P5=n(aYe,"A",{id:!0,class:!0,href:!0});var YOt=s(P5);D5e=n(YOt,"SPAN",{});var KOt=s(D5e);T(k$.$$.fragment,KOt),KOt.forEach(t),YOt.forEach(t),fSr=i(aYe),G5e=n(aYe,"SPAN",{});var ZOt=s(G5e);gSr=r(ZOt,"TFAutoModelForSeq2SeqLM"),ZOt.forEach(t),aYe.forEach(t),WUe=i(m),cr=n(m,"DIV",{class:!0});var ei=s(cr);T(S$.$$.fragment,ei),hSr=i(ei),Oc=n(ei,"P",{});var Dne=s(Oc);uSr=r(Dne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$Z=n(Dne,"A",{href:!0});var eVt=s($Z);pSr=r(eVt,"from_pretrained()"),eVt.forEach(t),_Sr=r(Dne," class method or the "),kZ=n(Dne,"A",{href:!0});var oVt=s(kZ);bSr=r(oVt,"from_config()"),oVt.forEach(t),vSr=r(Dne,` class
method.`),Dne.forEach(t),FSr=i(ei),R$=n(ei,"P",{});var nYe=s(R$);TSr=r(nYe,"This class cannot be instantiated directly using "),O5e=n(nYe,"CODE",{});var rVt=s(O5e);MSr=r(rVt,"__init__()"),rVt.forEach(t),ESr=r(nYe," (throws an error)."),nYe.forEach(t),CSr=i(ei),Xt=n(ei,"DIV",{class:!0});var _y=s(Xt);T(P$.$$.fragment,_y),wSr=i(_y),V5e=n(_y,"P",{});var tVt=s(V5e);ASr=r(tVt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),tVt.forEach(t),LSr=i(_y),Vc=n(_y,"P",{});var Gne=s(Vc);ySr=r(Gne,`Note:
Loading a model from its configuration file does `),X5e=n(Gne,"STRONG",{});var aVt=s(X5e);xSr=r(aVt,"not"),aVt.forEach(t),$Sr=r(Gne,` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=n(Gne,"A",{href:!0});var nVt=s(SZ);kSr=r(nVt,"from_pretrained()"),nVt.forEach(t),SSr=r(Gne," to load the model weights."),Gne.forEach(t),RSr=i(_y),T(B5.$$.fragment,_y),_y.forEach(t),PSr=i(ei),jr=n(ei,"DIV",{class:!0});var oi=s(jr);T(B$.$$.fragment,oi),BSr=i(oi),z5e=n(oi,"P",{});var sVt=s(z5e);ISr=r(sVt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),sVt.forEach(t),NSr=i(oi),Mn=n(oi,"P",{});var by=s(Mn);qSr=r(by,"The model class to instantiate is selected based on the "),W5e=n(by,"CODE",{});var lVt=s(W5e);jSr=r(lVt,"model_type"),lVt.forEach(t),DSr=r(by,` property of the config object (either
passed as an argument or loaded from `),Q5e=n(by,"CODE",{});var iVt=s(Q5e);GSr=r(iVt,"pretrained_model_name_or_path"),iVt.forEach(t),OSr=r(by,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U5e=n(by,"CODE",{});var dVt=s(U5e);VSr=r(dVt,"pretrained_model_name_or_path"),dVt.forEach(t),XSr=r(by,":"),by.forEach(t),zSr=i(oi),ye=n(oi,"UL",{});var Ie=s(ye);I5=n(Ie,"LI",{});var SVe=s(I5);H5e=n(SVe,"STRONG",{});var cVt=s(H5e);WSr=r(cVt,"bart"),cVt.forEach(t),QSr=r(SVe," \u2014 "),RZ=n(SVe,"A",{href:!0});var mVt=s(RZ);USr=r(mVt,"TFBartForConditionalGeneration"),mVt.forEach(t),HSr=r(SVe," (BART model)"),SVe.forEach(t),JSr=i(Ie),N5=n(Ie,"LI",{});var RVe=s(N5);J5e=n(RVe,"STRONG",{});var fVt=s(J5e);YSr=r(fVt,"blenderbot"),fVt.forEach(t),KSr=r(RVe," \u2014 "),PZ=n(RVe,"A",{href:!0});var gVt=s(PZ);ZSr=r(gVt,"TFBlenderbotForConditionalGeneration"),gVt.forEach(t),eRr=r(RVe," (Blenderbot model)"),RVe.forEach(t),oRr=i(Ie),q5=n(Ie,"LI",{});var PVe=s(q5);Y5e=n(PVe,"STRONG",{});var hVt=s(Y5e);rRr=r(hVt,"blenderbot-small"),hVt.forEach(t),tRr=r(PVe," \u2014 "),BZ=n(PVe,"A",{href:!0});var uVt=s(BZ);aRr=r(uVt,"TFBlenderbotSmallForConditionalGeneration"),uVt.forEach(t),nRr=r(PVe," (BlenderbotSmall model)"),PVe.forEach(t),sRr=i(Ie),j5=n(Ie,"LI",{});var BVe=s(j5);K5e=n(BVe,"STRONG",{});var pVt=s(K5e);lRr=r(pVt,"encoder-decoder"),pVt.forEach(t),iRr=r(BVe," \u2014 "),IZ=n(BVe,"A",{href:!0});var _Vt=s(IZ);dRr=r(_Vt,"TFEncoderDecoderModel"),_Vt.forEach(t),cRr=r(BVe," (Encoder decoder model)"),BVe.forEach(t),mRr=i(Ie),D5=n(Ie,"LI",{});var IVe=s(D5);Z5e=n(IVe,"STRONG",{});var bVt=s(Z5e);fRr=r(bVt,"led"),bVt.forEach(t),gRr=r(IVe," \u2014 "),NZ=n(IVe,"A",{href:!0});var vVt=s(NZ);hRr=r(vVt,"TFLEDForConditionalGeneration"),vVt.forEach(t),uRr=r(IVe," (LED model)"),IVe.forEach(t),pRr=i(Ie),G5=n(Ie,"LI",{});var NVe=s(G5);e0e=n(NVe,"STRONG",{});var FVt=s(e0e);_Rr=r(FVt,"marian"),FVt.forEach(t),bRr=r(NVe," \u2014 "),qZ=n(NVe,"A",{href:!0});var TVt=s(qZ);vRr=r(TVt,"TFMarianMTModel"),TVt.forEach(t),FRr=r(NVe," (Marian model)"),NVe.forEach(t),TRr=i(Ie),O5=n(Ie,"LI",{});var qVe=s(O5);o0e=n(qVe,"STRONG",{});var MVt=s(o0e);MRr=r(MVt,"mbart"),MVt.forEach(t),ERr=r(qVe," \u2014 "),jZ=n(qVe,"A",{href:!0});var EVt=s(jZ);CRr=r(EVt,"TFMBartForConditionalGeneration"),EVt.forEach(t),wRr=r(qVe," (mBART model)"),qVe.forEach(t),ARr=i(Ie),V5=n(Ie,"LI",{});var jVe=s(V5);r0e=n(jVe,"STRONG",{});var CVt=s(r0e);LRr=r(CVt,"mt5"),CVt.forEach(t),yRr=r(jVe," \u2014 "),DZ=n(jVe,"A",{href:!0});var wVt=s(DZ);xRr=r(wVt,"TFMT5ForConditionalGeneration"),wVt.forEach(t),$Rr=r(jVe," (MT5 model)"),jVe.forEach(t),kRr=i(Ie),X5=n(Ie,"LI",{});var DVe=s(X5);t0e=n(DVe,"STRONG",{});var AVt=s(t0e);SRr=r(AVt,"pegasus"),AVt.forEach(t),RRr=r(DVe," \u2014 "),GZ=n(DVe,"A",{href:!0});var LVt=s(GZ);PRr=r(LVt,"TFPegasusForConditionalGeneration"),LVt.forEach(t),BRr=r(DVe," (Pegasus model)"),DVe.forEach(t),IRr=i(Ie),z5=n(Ie,"LI",{});var GVe=s(z5);a0e=n(GVe,"STRONG",{});var yVt=s(a0e);NRr=r(yVt,"t5"),yVt.forEach(t),qRr=r(GVe," \u2014 "),OZ=n(GVe,"A",{href:!0});var xVt=s(OZ);jRr=r(xVt,"TFT5ForConditionalGeneration"),xVt.forEach(t),DRr=r(GVe," (T5 model)"),GVe.forEach(t),Ie.forEach(t),GRr=i(oi),T(W5.$$.fragment,oi),oi.forEach(t),ei.forEach(t),QUe=i(m),Xc=n(m,"H2",{class:!0});var sYe=s(Xc);Q5=n(sYe,"A",{id:!0,class:!0,href:!0});var $Vt=s(Q5);n0e=n($Vt,"SPAN",{});var kVt=s(n0e);T(I$.$$.fragment,kVt),kVt.forEach(t),$Vt.forEach(t),ORr=i(sYe),s0e=n(sYe,"SPAN",{});var SVt=s(s0e);VRr=r(SVt,"TFAutoModelForSequenceClassification"),SVt.forEach(t),sYe.forEach(t),UUe=i(m),mr=n(m,"DIV",{class:!0});var ri=s(mr);T(N$.$$.fragment,ri),XRr=i(ri),zc=n(ri,"P",{});var One=s(zc);zRr=r(One,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VZ=n(One,"A",{href:!0});var RVt=s(VZ);WRr=r(RVt,"from_pretrained()"),RVt.forEach(t),QRr=r(One," class method or the "),XZ=n(One,"A",{href:!0});var PVt=s(XZ);URr=r(PVt,"from_config()"),PVt.forEach(t),HRr=r(One,` class
method.`),One.forEach(t),JRr=i(ri),q$=n(ri,"P",{});var lYe=s(q$);YRr=r(lYe,"This class cannot be instantiated directly using "),l0e=n(lYe,"CODE",{});var BVt=s(l0e);KRr=r(BVt,"__init__()"),BVt.forEach(t),ZRr=r(lYe," (throws an error)."),lYe.forEach(t),ePr=i(ri),zt=n(ri,"DIV",{class:!0});var vy=s(zt);T(j$.$$.fragment,vy),oPr=i(vy),i0e=n(vy,"P",{});var IVt=s(i0e);rPr=r(IVt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),IVt.forEach(t),tPr=i(vy),Wc=n(vy,"P",{});var Vne=s(Wc);aPr=r(Vne,`Note:
Loading a model from its configuration file does `),d0e=n(Vne,"STRONG",{});var NVt=s(d0e);nPr=r(NVt,"not"),NVt.forEach(t),sPr=r(Vne,` load the model weights. It only affects the
model\u2019s configuration. Use `),zZ=n(Vne,"A",{href:!0});var qVt=s(zZ);lPr=r(qVt,"from_pretrained()"),qVt.forEach(t),iPr=r(Vne," to load the model weights."),Vne.forEach(t),dPr=i(vy),T(U5.$$.fragment,vy),vy.forEach(t),cPr=i(ri),Dr=n(ri,"DIV",{class:!0});var ti=s(Dr);T(D$.$$.fragment,ti),mPr=i(ti),c0e=n(ti,"P",{});var jVt=s(c0e);fPr=r(jVt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),jVt.forEach(t),gPr=i(ti),En=n(ti,"P",{});var Fy=s(En);hPr=r(Fy,"The model class to instantiate is selected based on the "),m0e=n(Fy,"CODE",{});var DVt=s(m0e);uPr=r(DVt,"model_type"),DVt.forEach(t),pPr=r(Fy,` property of the config object (either
passed as an argument or loaded from `),f0e=n(Fy,"CODE",{});var GVt=s(f0e);_Pr=r(GVt,"pretrained_model_name_or_path"),GVt.forEach(t),bPr=r(Fy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g0e=n(Fy,"CODE",{});var OVt=s(g0e);vPr=r(OVt,"pretrained_model_name_or_path"),OVt.forEach(t),FPr=r(Fy,":"),Fy.forEach(t),TPr=i(ti),te=n(ti,"UL",{});var ne=s(te);H5=n(ne,"LI",{});var OVe=s(H5);h0e=n(OVe,"STRONG",{});var VVt=s(h0e);MPr=r(VVt,"albert"),VVt.forEach(t),EPr=r(OVe," \u2014 "),WZ=n(OVe,"A",{href:!0});var XVt=s(WZ);CPr=r(XVt,"TFAlbertForSequenceClassification"),XVt.forEach(t),wPr=r(OVe," (ALBERT model)"),OVe.forEach(t),APr=i(ne),J5=n(ne,"LI",{});var VVe=s(J5);u0e=n(VVe,"STRONG",{});var zVt=s(u0e);LPr=r(zVt,"bert"),zVt.forEach(t),yPr=r(VVe," \u2014 "),QZ=n(VVe,"A",{href:!0});var WVt=s(QZ);xPr=r(WVt,"TFBertForSequenceClassification"),WVt.forEach(t),$Pr=r(VVe," (BERT model)"),VVe.forEach(t),kPr=i(ne),Y5=n(ne,"LI",{});var XVe=s(Y5);p0e=n(XVe,"STRONG",{});var QVt=s(p0e);SPr=r(QVt,"camembert"),QVt.forEach(t),RPr=r(XVe," \u2014 "),UZ=n(XVe,"A",{href:!0});var UVt=s(UZ);PPr=r(UVt,"TFCamembertForSequenceClassification"),UVt.forEach(t),BPr=r(XVe," (CamemBERT model)"),XVe.forEach(t),IPr=i(ne),K5=n(ne,"LI",{});var zVe=s(K5);_0e=n(zVe,"STRONG",{});var HVt=s(_0e);NPr=r(HVt,"convbert"),HVt.forEach(t),qPr=r(zVe," \u2014 "),HZ=n(zVe,"A",{href:!0});var JVt=s(HZ);jPr=r(JVt,"TFConvBertForSequenceClassification"),JVt.forEach(t),DPr=r(zVe," (ConvBERT model)"),zVe.forEach(t),GPr=i(ne),Z5=n(ne,"LI",{});var WVe=s(Z5);b0e=n(WVe,"STRONG",{});var YVt=s(b0e);OPr=r(YVt,"ctrl"),YVt.forEach(t),VPr=r(WVe," \u2014 "),JZ=n(WVe,"A",{href:!0});var KVt=s(JZ);XPr=r(KVt,"TFCTRLForSequenceClassification"),KVt.forEach(t),zPr=r(WVe," (CTRL model)"),WVe.forEach(t),WPr=i(ne),e0=n(ne,"LI",{});var QVe=s(e0);v0e=n(QVe,"STRONG",{});var ZVt=s(v0e);QPr=r(ZVt,"deberta"),ZVt.forEach(t),UPr=r(QVe," \u2014 "),YZ=n(QVe,"A",{href:!0});var eXt=s(YZ);HPr=r(eXt,"TFDebertaForSequenceClassification"),eXt.forEach(t),JPr=r(QVe," (DeBERTa model)"),QVe.forEach(t),YPr=i(ne),o0=n(ne,"LI",{});var UVe=s(o0);F0e=n(UVe,"STRONG",{});var oXt=s(F0e);KPr=r(oXt,"deberta-v2"),oXt.forEach(t),ZPr=r(UVe," \u2014 "),KZ=n(UVe,"A",{href:!0});var rXt=s(KZ);eBr=r(rXt,"TFDebertaV2ForSequenceClassification"),rXt.forEach(t),oBr=r(UVe," (DeBERTa-v2 model)"),UVe.forEach(t),rBr=i(ne),r0=n(ne,"LI",{});var HVe=s(r0);T0e=n(HVe,"STRONG",{});var tXt=s(T0e);tBr=r(tXt,"distilbert"),tXt.forEach(t),aBr=r(HVe," \u2014 "),ZZ=n(HVe,"A",{href:!0});var aXt=s(ZZ);nBr=r(aXt,"TFDistilBertForSequenceClassification"),aXt.forEach(t),sBr=r(HVe," (DistilBERT model)"),HVe.forEach(t),lBr=i(ne),t0=n(ne,"LI",{});var JVe=s(t0);M0e=n(JVe,"STRONG",{});var nXt=s(M0e);iBr=r(nXt,"electra"),nXt.forEach(t),dBr=r(JVe," \u2014 "),eee=n(JVe,"A",{href:!0});var sXt=s(eee);cBr=r(sXt,"TFElectraForSequenceClassification"),sXt.forEach(t),mBr=r(JVe," (ELECTRA model)"),JVe.forEach(t),fBr=i(ne),a0=n(ne,"LI",{});var YVe=s(a0);E0e=n(YVe,"STRONG",{});var lXt=s(E0e);gBr=r(lXt,"flaubert"),lXt.forEach(t),hBr=r(YVe," \u2014 "),oee=n(YVe,"A",{href:!0});var iXt=s(oee);uBr=r(iXt,"TFFlaubertForSequenceClassification"),iXt.forEach(t),pBr=r(YVe," (FlauBERT model)"),YVe.forEach(t),_Br=i(ne),n0=n(ne,"LI",{});var KVe=s(n0);C0e=n(KVe,"STRONG",{});var dXt=s(C0e);bBr=r(dXt,"funnel"),dXt.forEach(t),vBr=r(KVe," \u2014 "),ree=n(KVe,"A",{href:!0});var cXt=s(ree);FBr=r(cXt,"TFFunnelForSequenceClassification"),cXt.forEach(t),TBr=r(KVe," (Funnel Transformer model)"),KVe.forEach(t),MBr=i(ne),s0=n(ne,"LI",{});var ZVe=s(s0);w0e=n(ZVe,"STRONG",{});var mXt=s(w0e);EBr=r(mXt,"gpt2"),mXt.forEach(t),CBr=r(ZVe," \u2014 "),tee=n(ZVe,"A",{href:!0});var fXt=s(tee);wBr=r(fXt,"TFGPT2ForSequenceClassification"),fXt.forEach(t),ABr=r(ZVe," (OpenAI GPT-2 model)"),ZVe.forEach(t),LBr=i(ne),l0=n(ne,"LI",{});var eXe=s(l0);A0e=n(eXe,"STRONG",{});var gXt=s(A0e);yBr=r(gXt,"gptj"),gXt.forEach(t),xBr=r(eXe," \u2014 "),aee=n(eXe,"A",{href:!0});var hXt=s(aee);$Br=r(hXt,"TFGPTJForSequenceClassification"),hXt.forEach(t),kBr=r(eXe," (GPT-J model)"),eXe.forEach(t),SBr=i(ne),i0=n(ne,"LI",{});var oXe=s(i0);L0e=n(oXe,"STRONG",{});var uXt=s(L0e);RBr=r(uXt,"layoutlm"),uXt.forEach(t),PBr=r(oXe," \u2014 "),nee=n(oXe,"A",{href:!0});var pXt=s(nee);BBr=r(pXt,"TFLayoutLMForSequenceClassification"),pXt.forEach(t),IBr=r(oXe," (LayoutLM model)"),oXe.forEach(t),NBr=i(ne),d0=n(ne,"LI",{});var rXe=s(d0);y0e=n(rXe,"STRONG",{});var _Xt=s(y0e);qBr=r(_Xt,"longformer"),_Xt.forEach(t),jBr=r(rXe," \u2014 "),see=n(rXe,"A",{href:!0});var bXt=s(see);DBr=r(bXt,"TFLongformerForSequenceClassification"),bXt.forEach(t),GBr=r(rXe," (Longformer model)"),rXe.forEach(t),OBr=i(ne),c0=n(ne,"LI",{});var tXe=s(c0);x0e=n(tXe,"STRONG",{});var vXt=s(x0e);VBr=r(vXt,"mobilebert"),vXt.forEach(t),XBr=r(tXe," \u2014 "),lee=n(tXe,"A",{href:!0});var FXt=s(lee);zBr=r(FXt,"TFMobileBertForSequenceClassification"),FXt.forEach(t),WBr=r(tXe," (MobileBERT model)"),tXe.forEach(t),QBr=i(ne),m0=n(ne,"LI",{});var aXe=s(m0);$0e=n(aXe,"STRONG",{});var TXt=s($0e);UBr=r(TXt,"mpnet"),TXt.forEach(t),HBr=r(aXe," \u2014 "),iee=n(aXe,"A",{href:!0});var MXt=s(iee);JBr=r(MXt,"TFMPNetForSequenceClassification"),MXt.forEach(t),YBr=r(aXe," (MPNet model)"),aXe.forEach(t),KBr=i(ne),f0=n(ne,"LI",{});var nXe=s(f0);k0e=n(nXe,"STRONG",{});var EXt=s(k0e);ZBr=r(EXt,"openai-gpt"),EXt.forEach(t),eIr=r(nXe," \u2014 "),dee=n(nXe,"A",{href:!0});var CXt=s(dee);oIr=r(CXt,"TFOpenAIGPTForSequenceClassification"),CXt.forEach(t),rIr=r(nXe," (OpenAI GPT model)"),nXe.forEach(t),tIr=i(ne),g0=n(ne,"LI",{});var sXe=s(g0);S0e=n(sXe,"STRONG",{});var wXt=s(S0e);aIr=r(wXt,"rembert"),wXt.forEach(t),nIr=r(sXe," \u2014 "),cee=n(sXe,"A",{href:!0});var AXt=s(cee);sIr=r(AXt,"TFRemBertForSequenceClassification"),AXt.forEach(t),lIr=r(sXe," (RemBERT model)"),sXe.forEach(t),iIr=i(ne),h0=n(ne,"LI",{});var lXe=s(h0);R0e=n(lXe,"STRONG",{});var LXt=s(R0e);dIr=r(LXt,"roberta"),LXt.forEach(t),cIr=r(lXe," \u2014 "),mee=n(lXe,"A",{href:!0});var yXt=s(mee);mIr=r(yXt,"TFRobertaForSequenceClassification"),yXt.forEach(t),fIr=r(lXe," (RoBERTa model)"),lXe.forEach(t),gIr=i(ne),u0=n(ne,"LI",{});var iXe=s(u0);P0e=n(iXe,"STRONG",{});var xXt=s(P0e);hIr=r(xXt,"roformer"),xXt.forEach(t),uIr=r(iXe," \u2014 "),fee=n(iXe,"A",{href:!0});var $Xt=s(fee);pIr=r($Xt,"TFRoFormerForSequenceClassification"),$Xt.forEach(t),_Ir=r(iXe," (RoFormer model)"),iXe.forEach(t),bIr=i(ne),p0=n(ne,"LI",{});var dXe=s(p0);B0e=n(dXe,"STRONG",{});var kXt=s(B0e);vIr=r(kXt,"tapas"),kXt.forEach(t),FIr=r(dXe," \u2014 "),gee=n(dXe,"A",{href:!0});var SXt=s(gee);TIr=r(SXt,"TFTapasForSequenceClassification"),SXt.forEach(t),MIr=r(dXe," (TAPAS model)"),dXe.forEach(t),EIr=i(ne),_0=n(ne,"LI",{});var cXe=s(_0);I0e=n(cXe,"STRONG",{});var RXt=s(I0e);CIr=r(RXt,"transfo-xl"),RXt.forEach(t),wIr=r(cXe," \u2014 "),hee=n(cXe,"A",{href:!0});var PXt=s(hee);AIr=r(PXt,"TFTransfoXLForSequenceClassification"),PXt.forEach(t),LIr=r(cXe," (Transformer-XL model)"),cXe.forEach(t),yIr=i(ne),b0=n(ne,"LI",{});var mXe=s(b0);N0e=n(mXe,"STRONG",{});var BXt=s(N0e);xIr=r(BXt,"xlm"),BXt.forEach(t),$Ir=r(mXe," \u2014 "),uee=n(mXe,"A",{href:!0});var IXt=s(uee);kIr=r(IXt,"TFXLMForSequenceClassification"),IXt.forEach(t),SIr=r(mXe," (XLM model)"),mXe.forEach(t),RIr=i(ne),v0=n(ne,"LI",{});var fXe=s(v0);q0e=n(fXe,"STRONG",{});var NXt=s(q0e);PIr=r(NXt,"xlm-roberta"),NXt.forEach(t),BIr=r(fXe," \u2014 "),pee=n(fXe,"A",{href:!0});var qXt=s(pee);IIr=r(qXt,"TFXLMRobertaForSequenceClassification"),qXt.forEach(t),NIr=r(fXe," (XLM-RoBERTa model)"),fXe.forEach(t),qIr=i(ne),F0=n(ne,"LI",{});var gXe=s(F0);j0e=n(gXe,"STRONG",{});var jXt=s(j0e);jIr=r(jXt,"xlnet"),jXt.forEach(t),DIr=r(gXe," \u2014 "),_ee=n(gXe,"A",{href:!0});var DXt=s(_ee);GIr=r(DXt,"TFXLNetForSequenceClassification"),DXt.forEach(t),OIr=r(gXe," (XLNet model)"),gXe.forEach(t),ne.forEach(t),VIr=i(ti),T(T0.$$.fragment,ti),ti.forEach(t),ri.forEach(t),HUe=i(m),Qc=n(m,"H2",{class:!0});var iYe=s(Qc);M0=n(iYe,"A",{id:!0,class:!0,href:!0});var GXt=s(M0);D0e=n(GXt,"SPAN",{});var OXt=s(D0e);T(G$.$$.fragment,OXt),OXt.forEach(t),GXt.forEach(t),XIr=i(iYe),G0e=n(iYe,"SPAN",{});var VXt=s(G0e);zIr=r(VXt,"TFAutoModelForMultipleChoice"),VXt.forEach(t),iYe.forEach(t),JUe=i(m),fr=n(m,"DIV",{class:!0});var ai=s(fr);T(O$.$$.fragment,ai),WIr=i(ai),Uc=n(ai,"P",{});var Xne=s(Uc);QIr=r(Xne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bee=n(Xne,"A",{href:!0});var XXt=s(bee);UIr=r(XXt,"from_pretrained()"),XXt.forEach(t),HIr=r(Xne," class method or the "),vee=n(Xne,"A",{href:!0});var zXt=s(vee);JIr=r(zXt,"from_config()"),zXt.forEach(t),YIr=r(Xne,` class
method.`),Xne.forEach(t),KIr=i(ai),V$=n(ai,"P",{});var dYe=s(V$);ZIr=r(dYe,"This class cannot be instantiated directly using "),O0e=n(dYe,"CODE",{});var WXt=s(O0e);eNr=r(WXt,"__init__()"),WXt.forEach(t),oNr=r(dYe," (throws an error)."),dYe.forEach(t),rNr=i(ai),Wt=n(ai,"DIV",{class:!0});var Ty=s(Wt);T(X$.$$.fragment,Ty),tNr=i(Ty),V0e=n(Ty,"P",{});var QXt=s(V0e);aNr=r(QXt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),QXt.forEach(t),nNr=i(Ty),Hc=n(Ty,"P",{});var zne=s(Hc);sNr=r(zne,`Note:
Loading a model from its configuration file does `),X0e=n(zne,"STRONG",{});var UXt=s(X0e);lNr=r(UXt,"not"),UXt.forEach(t),iNr=r(zne,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fee=n(zne,"A",{href:!0});var HXt=s(Fee);dNr=r(HXt,"from_pretrained()"),HXt.forEach(t),cNr=r(zne," to load the model weights."),zne.forEach(t),mNr=i(Ty),T(E0.$$.fragment,Ty),Ty.forEach(t),fNr=i(ai),Gr=n(ai,"DIV",{class:!0});var ni=s(Gr);T(z$.$$.fragment,ni),gNr=i(ni),z0e=n(ni,"P",{});var JXt=s(z0e);hNr=r(JXt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),JXt.forEach(t),uNr=i(ni),Cn=n(ni,"P",{});var My=s(Cn);pNr=r(My,"The model class to instantiate is selected based on the "),W0e=n(My,"CODE",{});var YXt=s(W0e);_Nr=r(YXt,"model_type"),YXt.forEach(t),bNr=r(My,` property of the config object (either
passed as an argument or loaded from `),Q0e=n(My,"CODE",{});var KXt=s(Q0e);vNr=r(KXt,"pretrained_model_name_or_path"),KXt.forEach(t),FNr=r(My,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U0e=n(My,"CODE",{});var ZXt=s(U0e);TNr=r(ZXt,"pretrained_model_name_or_path"),ZXt.forEach(t),MNr=r(My,":"),My.forEach(t),ENr=i(ni),ve=n(ni,"UL",{});var Te=s(ve);C0=n(Te,"LI",{});var hXe=s(C0);H0e=n(hXe,"STRONG",{});var ezt=s(H0e);CNr=r(ezt,"albert"),ezt.forEach(t),wNr=r(hXe," \u2014 "),Tee=n(hXe,"A",{href:!0});var ozt=s(Tee);ANr=r(ozt,"TFAlbertForMultipleChoice"),ozt.forEach(t),LNr=r(hXe," (ALBERT model)"),hXe.forEach(t),yNr=i(Te),w0=n(Te,"LI",{});var uXe=s(w0);J0e=n(uXe,"STRONG",{});var rzt=s(J0e);xNr=r(rzt,"bert"),rzt.forEach(t),$Nr=r(uXe," \u2014 "),Mee=n(uXe,"A",{href:!0});var tzt=s(Mee);kNr=r(tzt,"TFBertForMultipleChoice"),tzt.forEach(t),SNr=r(uXe," (BERT model)"),uXe.forEach(t),RNr=i(Te),A0=n(Te,"LI",{});var pXe=s(A0);Y0e=n(pXe,"STRONG",{});var azt=s(Y0e);PNr=r(azt,"camembert"),azt.forEach(t),BNr=r(pXe," \u2014 "),Eee=n(pXe,"A",{href:!0});var nzt=s(Eee);INr=r(nzt,"TFCamembertForMultipleChoice"),nzt.forEach(t),NNr=r(pXe," (CamemBERT model)"),pXe.forEach(t),qNr=i(Te),L0=n(Te,"LI",{});var _Xe=s(L0);K0e=n(_Xe,"STRONG",{});var szt=s(K0e);jNr=r(szt,"convbert"),szt.forEach(t),DNr=r(_Xe," \u2014 "),Cee=n(_Xe,"A",{href:!0});var lzt=s(Cee);GNr=r(lzt,"TFConvBertForMultipleChoice"),lzt.forEach(t),ONr=r(_Xe," (ConvBERT model)"),_Xe.forEach(t),VNr=i(Te),y0=n(Te,"LI",{});var bXe=s(y0);Z0e=n(bXe,"STRONG",{});var izt=s(Z0e);XNr=r(izt,"distilbert"),izt.forEach(t),zNr=r(bXe," \u2014 "),wee=n(bXe,"A",{href:!0});var dzt=s(wee);WNr=r(dzt,"TFDistilBertForMultipleChoice"),dzt.forEach(t),QNr=r(bXe," (DistilBERT model)"),bXe.forEach(t),UNr=i(Te),x0=n(Te,"LI",{});var vXe=s(x0);ewe=n(vXe,"STRONG",{});var czt=s(ewe);HNr=r(czt,"electra"),czt.forEach(t),JNr=r(vXe," \u2014 "),Aee=n(vXe,"A",{href:!0});var mzt=s(Aee);YNr=r(mzt,"TFElectraForMultipleChoice"),mzt.forEach(t),KNr=r(vXe," (ELECTRA model)"),vXe.forEach(t),ZNr=i(Te),$0=n(Te,"LI",{});var FXe=s($0);owe=n(FXe,"STRONG",{});var fzt=s(owe);eqr=r(fzt,"flaubert"),fzt.forEach(t),oqr=r(FXe," \u2014 "),Lee=n(FXe,"A",{href:!0});var gzt=s(Lee);rqr=r(gzt,"TFFlaubertForMultipleChoice"),gzt.forEach(t),tqr=r(FXe," (FlauBERT model)"),FXe.forEach(t),aqr=i(Te),k0=n(Te,"LI",{});var TXe=s(k0);rwe=n(TXe,"STRONG",{});var hzt=s(rwe);nqr=r(hzt,"funnel"),hzt.forEach(t),sqr=r(TXe," \u2014 "),yee=n(TXe,"A",{href:!0});var uzt=s(yee);lqr=r(uzt,"TFFunnelForMultipleChoice"),uzt.forEach(t),iqr=r(TXe," (Funnel Transformer model)"),TXe.forEach(t),dqr=i(Te),S0=n(Te,"LI",{});var MXe=s(S0);twe=n(MXe,"STRONG",{});var pzt=s(twe);cqr=r(pzt,"longformer"),pzt.forEach(t),mqr=r(MXe," \u2014 "),xee=n(MXe,"A",{href:!0});var _zt=s(xee);fqr=r(_zt,"TFLongformerForMultipleChoice"),_zt.forEach(t),gqr=r(MXe," (Longformer model)"),MXe.forEach(t),hqr=i(Te),R0=n(Te,"LI",{});var EXe=s(R0);awe=n(EXe,"STRONG",{});var bzt=s(awe);uqr=r(bzt,"mobilebert"),bzt.forEach(t),pqr=r(EXe," \u2014 "),$ee=n(EXe,"A",{href:!0});var vzt=s($ee);_qr=r(vzt,"TFMobileBertForMultipleChoice"),vzt.forEach(t),bqr=r(EXe," (MobileBERT model)"),EXe.forEach(t),vqr=i(Te),P0=n(Te,"LI",{});var CXe=s(P0);nwe=n(CXe,"STRONG",{});var Fzt=s(nwe);Fqr=r(Fzt,"mpnet"),Fzt.forEach(t),Tqr=r(CXe," \u2014 "),kee=n(CXe,"A",{href:!0});var Tzt=s(kee);Mqr=r(Tzt,"TFMPNetForMultipleChoice"),Tzt.forEach(t),Eqr=r(CXe," (MPNet model)"),CXe.forEach(t),Cqr=i(Te),B0=n(Te,"LI",{});var wXe=s(B0);swe=n(wXe,"STRONG",{});var Mzt=s(swe);wqr=r(Mzt,"rembert"),Mzt.forEach(t),Aqr=r(wXe," \u2014 "),See=n(wXe,"A",{href:!0});var Ezt=s(See);Lqr=r(Ezt,"TFRemBertForMultipleChoice"),Ezt.forEach(t),yqr=r(wXe," (RemBERT model)"),wXe.forEach(t),xqr=i(Te),I0=n(Te,"LI",{});var AXe=s(I0);lwe=n(AXe,"STRONG",{});var Czt=s(lwe);$qr=r(Czt,"roberta"),Czt.forEach(t),kqr=r(AXe," \u2014 "),Ree=n(AXe,"A",{href:!0});var wzt=s(Ree);Sqr=r(wzt,"TFRobertaForMultipleChoice"),wzt.forEach(t),Rqr=r(AXe," (RoBERTa model)"),AXe.forEach(t),Pqr=i(Te),N0=n(Te,"LI",{});var LXe=s(N0);iwe=n(LXe,"STRONG",{});var Azt=s(iwe);Bqr=r(Azt,"roformer"),Azt.forEach(t),Iqr=r(LXe," \u2014 "),Pee=n(LXe,"A",{href:!0});var Lzt=s(Pee);Nqr=r(Lzt,"TFRoFormerForMultipleChoice"),Lzt.forEach(t),qqr=r(LXe," (RoFormer model)"),LXe.forEach(t),jqr=i(Te),q0=n(Te,"LI",{});var yXe=s(q0);dwe=n(yXe,"STRONG",{});var yzt=s(dwe);Dqr=r(yzt,"xlm"),yzt.forEach(t),Gqr=r(yXe," \u2014 "),Bee=n(yXe,"A",{href:!0});var xzt=s(Bee);Oqr=r(xzt,"TFXLMForMultipleChoice"),xzt.forEach(t),Vqr=r(yXe," (XLM model)"),yXe.forEach(t),Xqr=i(Te),j0=n(Te,"LI",{});var xXe=s(j0);cwe=n(xXe,"STRONG",{});var $zt=s(cwe);zqr=r($zt,"xlm-roberta"),$zt.forEach(t),Wqr=r(xXe," \u2014 "),Iee=n(xXe,"A",{href:!0});var kzt=s(Iee);Qqr=r(kzt,"TFXLMRobertaForMultipleChoice"),kzt.forEach(t),Uqr=r(xXe," (XLM-RoBERTa model)"),xXe.forEach(t),Hqr=i(Te),D0=n(Te,"LI",{});var $Xe=s(D0);mwe=n($Xe,"STRONG",{});var Szt=s(mwe);Jqr=r(Szt,"xlnet"),Szt.forEach(t),Yqr=r($Xe," \u2014 "),Nee=n($Xe,"A",{href:!0});var Rzt=s(Nee);Kqr=r(Rzt,"TFXLNetForMultipleChoice"),Rzt.forEach(t),Zqr=r($Xe," (XLNet model)"),$Xe.forEach(t),Te.forEach(t),ejr=i(ni),T(G0.$$.fragment,ni),ni.forEach(t),ai.forEach(t),YUe=i(m),Jc=n(m,"H2",{class:!0});var cYe=s(Jc);O0=n(cYe,"A",{id:!0,class:!0,href:!0});var Pzt=s(O0);fwe=n(Pzt,"SPAN",{});var Bzt=s(fwe);T(W$.$$.fragment,Bzt),Bzt.forEach(t),Pzt.forEach(t),ojr=i(cYe),gwe=n(cYe,"SPAN",{});var Izt=s(gwe);rjr=r(Izt,"TFAutoModelForNextSentencePrediction"),Izt.forEach(t),cYe.forEach(t),KUe=i(m),gr=n(m,"DIV",{class:!0});var si=s(gr);T(Q$.$$.fragment,si),tjr=i(si),Yc=n(si,"P",{});var Wne=s(Yc);ajr=r(Wne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),qee=n(Wne,"A",{href:!0});var Nzt=s(qee);njr=r(Nzt,"from_pretrained()"),Nzt.forEach(t),sjr=r(Wne," class method or the "),jee=n(Wne,"A",{href:!0});var qzt=s(jee);ljr=r(qzt,"from_config()"),qzt.forEach(t),ijr=r(Wne,` class
method.`),Wne.forEach(t),djr=i(si),U$=n(si,"P",{});var mYe=s(U$);cjr=r(mYe,"This class cannot be instantiated directly using "),hwe=n(mYe,"CODE",{});var jzt=s(hwe);mjr=r(jzt,"__init__()"),jzt.forEach(t),fjr=r(mYe," (throws an error)."),mYe.forEach(t),gjr=i(si),Qt=n(si,"DIV",{class:!0});var Ey=s(Qt);T(H$.$$.fragment,Ey),hjr=i(Ey),uwe=n(Ey,"P",{});var Dzt=s(uwe);ujr=r(Dzt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Dzt.forEach(t),pjr=i(Ey),Kc=n(Ey,"P",{});var Qne=s(Kc);_jr=r(Qne,`Note:
Loading a model from its configuration file does `),pwe=n(Qne,"STRONG",{});var Gzt=s(pwe);bjr=r(Gzt,"not"),Gzt.forEach(t),vjr=r(Qne,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dee=n(Qne,"A",{href:!0});var Ozt=s(Dee);Fjr=r(Ozt,"from_pretrained()"),Ozt.forEach(t),Tjr=r(Qne," to load the model weights."),Qne.forEach(t),Mjr=i(Ey),T(V0.$$.fragment,Ey),Ey.forEach(t),Ejr=i(si),Or=n(si,"DIV",{class:!0});var li=s(Or);T(J$.$$.fragment,li),Cjr=i(li),_we=n(li,"P",{});var Vzt=s(_we);wjr=r(Vzt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Vzt.forEach(t),Ajr=i(li),wn=n(li,"P",{});var Cy=s(wn);Ljr=r(Cy,"The model class to instantiate is selected based on the "),bwe=n(Cy,"CODE",{});var Xzt=s(bwe);yjr=r(Xzt,"model_type"),Xzt.forEach(t),xjr=r(Cy,` property of the config object (either
passed as an argument or loaded from `),vwe=n(Cy,"CODE",{});var zzt=s(vwe);$jr=r(zzt,"pretrained_model_name_or_path"),zzt.forEach(t),kjr=r(Cy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fwe=n(Cy,"CODE",{});var Wzt=s(Fwe);Sjr=r(Wzt,"pretrained_model_name_or_path"),Wzt.forEach(t),Rjr=r(Cy,":"),Cy.forEach(t),Pjr=i(li),Y$=n(li,"UL",{});var fYe=s(Y$);X0=n(fYe,"LI",{});var kXe=s(X0);Twe=n(kXe,"STRONG",{});var Qzt=s(Twe);Bjr=r(Qzt,"bert"),Qzt.forEach(t),Ijr=r(kXe," \u2014 "),Gee=n(kXe,"A",{href:!0});var Uzt=s(Gee);Njr=r(Uzt,"TFBertForNextSentencePrediction"),Uzt.forEach(t),qjr=r(kXe," (BERT model)"),kXe.forEach(t),jjr=i(fYe),z0=n(fYe,"LI",{});var SXe=s(z0);Mwe=n(SXe,"STRONG",{});var Hzt=s(Mwe);Djr=r(Hzt,"mobilebert"),Hzt.forEach(t),Gjr=r(SXe," \u2014 "),Oee=n(SXe,"A",{href:!0});var Jzt=s(Oee);Ojr=r(Jzt,"TFMobileBertForNextSentencePrediction"),Jzt.forEach(t),Vjr=r(SXe," (MobileBERT model)"),SXe.forEach(t),fYe.forEach(t),Xjr=i(li),T(W0.$$.fragment,li),li.forEach(t),si.forEach(t),ZUe=i(m),Zc=n(m,"H2",{class:!0});var gYe=s(Zc);Q0=n(gYe,"A",{id:!0,class:!0,href:!0});var Yzt=s(Q0);Ewe=n(Yzt,"SPAN",{});var Kzt=s(Ewe);T(K$.$$.fragment,Kzt),Kzt.forEach(t),Yzt.forEach(t),zjr=i(gYe),Cwe=n(gYe,"SPAN",{});var Zzt=s(Cwe);Wjr=r(Zzt,"TFAutoModelForTableQuestionAnswering"),Zzt.forEach(t),gYe.forEach(t),eHe=i(m),hr=n(m,"DIV",{class:!0});var ii=s(hr);T(Z$.$$.fragment,ii),Qjr=i(ii),em=n(ii,"P",{});var Une=s(em);Ujr=r(Une,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Vee=n(Une,"A",{href:!0});var eWt=s(Vee);Hjr=r(eWt,"from_pretrained()"),eWt.forEach(t),Jjr=r(Une," class method or the "),Xee=n(Une,"A",{href:!0});var oWt=s(Xee);Yjr=r(oWt,"from_config()"),oWt.forEach(t),Kjr=r(Une,` class
method.`),Une.forEach(t),Zjr=i(ii),ek=n(ii,"P",{});var hYe=s(ek);eDr=r(hYe,"This class cannot be instantiated directly using "),wwe=n(hYe,"CODE",{});var rWt=s(wwe);oDr=r(rWt,"__init__()"),rWt.forEach(t),rDr=r(hYe," (throws an error)."),hYe.forEach(t),tDr=i(ii),Ut=n(ii,"DIV",{class:!0});var wy=s(Ut);T(ok.$$.fragment,wy),aDr=i(wy),Awe=n(wy,"P",{});var tWt=s(Awe);nDr=r(tWt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),tWt.forEach(t),sDr=i(wy),om=n(wy,"P",{});var Hne=s(om);lDr=r(Hne,`Note:
Loading a model from its configuration file does `),Lwe=n(Hne,"STRONG",{});var aWt=s(Lwe);iDr=r(aWt,"not"),aWt.forEach(t),dDr=r(Hne,` load the model weights. It only affects the
model\u2019s configuration. Use `),zee=n(Hne,"A",{href:!0});var nWt=s(zee);cDr=r(nWt,"from_pretrained()"),nWt.forEach(t),mDr=r(Hne," to load the model weights."),Hne.forEach(t),fDr=i(wy),T(U0.$$.fragment,wy),wy.forEach(t),gDr=i(ii),Vr=n(ii,"DIV",{class:!0});var di=s(Vr);T(rk.$$.fragment,di),hDr=i(di),ywe=n(di,"P",{});var sWt=s(ywe);uDr=r(sWt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),sWt.forEach(t),pDr=i(di),An=n(di,"P",{});var Ay=s(An);_Dr=r(Ay,"The model class to instantiate is selected based on the "),xwe=n(Ay,"CODE",{});var lWt=s(xwe);bDr=r(lWt,"model_type"),lWt.forEach(t),vDr=r(Ay,` property of the config object (either
passed as an argument or loaded from `),$we=n(Ay,"CODE",{});var iWt=s($we);FDr=r(iWt,"pretrained_model_name_or_path"),iWt.forEach(t),TDr=r(Ay,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kwe=n(Ay,"CODE",{});var dWt=s(kwe);MDr=r(dWt,"pretrained_model_name_or_path"),dWt.forEach(t),EDr=r(Ay,":"),Ay.forEach(t),CDr=i(di),Swe=n(di,"UL",{});var cWt=s(Swe);H0=n(cWt,"LI",{});var RXe=s(H0);Rwe=n(RXe,"STRONG",{});var mWt=s(Rwe);wDr=r(mWt,"tapas"),mWt.forEach(t),ADr=r(RXe," \u2014 "),Wee=n(RXe,"A",{href:!0});var fWt=s(Wee);LDr=r(fWt,"TFTapasForQuestionAnswering"),fWt.forEach(t),yDr=r(RXe," (TAPAS model)"),RXe.forEach(t),cWt.forEach(t),xDr=i(di),T(J0.$$.fragment,di),di.forEach(t),ii.forEach(t),oHe=i(m),rm=n(m,"H2",{class:!0});var uYe=s(rm);Y0=n(uYe,"A",{id:!0,class:!0,href:!0});var gWt=s(Y0);Pwe=n(gWt,"SPAN",{});var hWt=s(Pwe);T(tk.$$.fragment,hWt),hWt.forEach(t),gWt.forEach(t),$Dr=i(uYe),Bwe=n(uYe,"SPAN",{});var uWt=s(Bwe);kDr=r(uWt,"TFAutoModelForTokenClassification"),uWt.forEach(t),uYe.forEach(t),rHe=i(m),ur=n(m,"DIV",{class:!0});var ci=s(ur);T(ak.$$.fragment,ci),SDr=i(ci),tm=n(ci,"P",{});var Jne=s(tm);RDr=r(Jne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Qee=n(Jne,"A",{href:!0});var pWt=s(Qee);PDr=r(pWt,"from_pretrained()"),pWt.forEach(t),BDr=r(Jne," class method or the "),Uee=n(Jne,"A",{href:!0});var _Wt=s(Uee);IDr=r(_Wt,"from_config()"),_Wt.forEach(t),NDr=r(Jne,` class
method.`),Jne.forEach(t),qDr=i(ci),nk=n(ci,"P",{});var pYe=s(nk);jDr=r(pYe,"This class cannot be instantiated directly using "),Iwe=n(pYe,"CODE",{});var bWt=s(Iwe);DDr=r(bWt,"__init__()"),bWt.forEach(t),GDr=r(pYe," (throws an error)."),pYe.forEach(t),ODr=i(ci),Ht=n(ci,"DIV",{class:!0});var Ly=s(Ht);T(sk.$$.fragment,Ly),VDr=i(Ly),Nwe=n(Ly,"P",{});var vWt=s(Nwe);XDr=r(vWt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),vWt.forEach(t),zDr=i(Ly),am=n(Ly,"P",{});var Yne=s(am);WDr=r(Yne,`Note:
Loading a model from its configuration file does `),qwe=n(Yne,"STRONG",{});var FWt=s(qwe);QDr=r(FWt,"not"),FWt.forEach(t),UDr=r(Yne,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hee=n(Yne,"A",{href:!0});var TWt=s(Hee);HDr=r(TWt,"from_pretrained()"),TWt.forEach(t),JDr=r(Yne," to load the model weights."),Yne.forEach(t),YDr=i(Ly),T(K0.$$.fragment,Ly),Ly.forEach(t),KDr=i(ci),Xr=n(ci,"DIV",{class:!0});var mi=s(Xr);T(lk.$$.fragment,mi),ZDr=i(mi),jwe=n(mi,"P",{});var MWt=s(jwe);eGr=r(MWt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),MWt.forEach(t),oGr=i(mi),Ln=n(mi,"P",{});var yy=s(Ln);rGr=r(yy,"The model class to instantiate is selected based on the "),Dwe=n(yy,"CODE",{});var EWt=s(Dwe);tGr=r(EWt,"model_type"),EWt.forEach(t),aGr=r(yy,` property of the config object (either
passed as an argument or loaded from `),Gwe=n(yy,"CODE",{});var CWt=s(Gwe);nGr=r(CWt,"pretrained_model_name_or_path"),CWt.forEach(t),sGr=r(yy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Owe=n(yy,"CODE",{});var wWt=s(Owe);lGr=r(wWt,"pretrained_model_name_or_path"),wWt.forEach(t),iGr=r(yy,":"),yy.forEach(t),dGr=i(mi),de=n(mi,"UL",{});var he=s(de);Z0=n(he,"LI",{});var PXe=s(Z0);Vwe=n(PXe,"STRONG",{});var AWt=s(Vwe);cGr=r(AWt,"albert"),AWt.forEach(t),mGr=r(PXe," \u2014 "),Jee=n(PXe,"A",{href:!0});var LWt=s(Jee);fGr=r(LWt,"TFAlbertForTokenClassification"),LWt.forEach(t),gGr=r(PXe," (ALBERT model)"),PXe.forEach(t),hGr=i(he),ew=n(he,"LI",{});var BXe=s(ew);Xwe=n(BXe,"STRONG",{});var yWt=s(Xwe);uGr=r(yWt,"bert"),yWt.forEach(t),pGr=r(BXe," \u2014 "),Yee=n(BXe,"A",{href:!0});var xWt=s(Yee);_Gr=r(xWt,"TFBertForTokenClassification"),xWt.forEach(t),bGr=r(BXe," (BERT model)"),BXe.forEach(t),vGr=i(he),ow=n(he,"LI",{});var IXe=s(ow);zwe=n(IXe,"STRONG",{});var $Wt=s(zwe);FGr=r($Wt,"camembert"),$Wt.forEach(t),TGr=r(IXe," \u2014 "),Kee=n(IXe,"A",{href:!0});var kWt=s(Kee);MGr=r(kWt,"TFCamembertForTokenClassification"),kWt.forEach(t),EGr=r(IXe," (CamemBERT model)"),IXe.forEach(t),CGr=i(he),rw=n(he,"LI",{});var NXe=s(rw);Wwe=n(NXe,"STRONG",{});var SWt=s(Wwe);wGr=r(SWt,"convbert"),SWt.forEach(t),AGr=r(NXe," \u2014 "),Zee=n(NXe,"A",{href:!0});var RWt=s(Zee);LGr=r(RWt,"TFConvBertForTokenClassification"),RWt.forEach(t),yGr=r(NXe," (ConvBERT model)"),NXe.forEach(t),xGr=i(he),tw=n(he,"LI",{});var qXe=s(tw);Qwe=n(qXe,"STRONG",{});var PWt=s(Qwe);$Gr=r(PWt,"deberta"),PWt.forEach(t),kGr=r(qXe," \u2014 "),eoe=n(qXe,"A",{href:!0});var BWt=s(eoe);SGr=r(BWt,"TFDebertaForTokenClassification"),BWt.forEach(t),RGr=r(qXe," (DeBERTa model)"),qXe.forEach(t),PGr=i(he),aw=n(he,"LI",{});var jXe=s(aw);Uwe=n(jXe,"STRONG",{});var IWt=s(Uwe);BGr=r(IWt,"deberta-v2"),IWt.forEach(t),IGr=r(jXe," \u2014 "),ooe=n(jXe,"A",{href:!0});var NWt=s(ooe);NGr=r(NWt,"TFDebertaV2ForTokenClassification"),NWt.forEach(t),qGr=r(jXe," (DeBERTa-v2 model)"),jXe.forEach(t),jGr=i(he),nw=n(he,"LI",{});var DXe=s(nw);Hwe=n(DXe,"STRONG",{});var qWt=s(Hwe);DGr=r(qWt,"distilbert"),qWt.forEach(t),GGr=r(DXe," \u2014 "),roe=n(DXe,"A",{href:!0});var jWt=s(roe);OGr=r(jWt,"TFDistilBertForTokenClassification"),jWt.forEach(t),VGr=r(DXe," (DistilBERT model)"),DXe.forEach(t),XGr=i(he),sw=n(he,"LI",{});var GXe=s(sw);Jwe=n(GXe,"STRONG",{});var DWt=s(Jwe);zGr=r(DWt,"electra"),DWt.forEach(t),WGr=r(GXe," \u2014 "),toe=n(GXe,"A",{href:!0});var GWt=s(toe);QGr=r(GWt,"TFElectraForTokenClassification"),GWt.forEach(t),UGr=r(GXe," (ELECTRA model)"),GXe.forEach(t),HGr=i(he),lw=n(he,"LI",{});var OXe=s(lw);Ywe=n(OXe,"STRONG",{});var OWt=s(Ywe);JGr=r(OWt,"flaubert"),OWt.forEach(t),YGr=r(OXe," \u2014 "),aoe=n(OXe,"A",{href:!0});var VWt=s(aoe);KGr=r(VWt,"TFFlaubertForTokenClassification"),VWt.forEach(t),ZGr=r(OXe," (FlauBERT model)"),OXe.forEach(t),eOr=i(he),iw=n(he,"LI",{});var VXe=s(iw);Kwe=n(VXe,"STRONG",{});var XWt=s(Kwe);oOr=r(XWt,"funnel"),XWt.forEach(t),rOr=r(VXe," \u2014 "),noe=n(VXe,"A",{href:!0});var zWt=s(noe);tOr=r(zWt,"TFFunnelForTokenClassification"),zWt.forEach(t),aOr=r(VXe," (Funnel Transformer model)"),VXe.forEach(t),nOr=i(he),dw=n(he,"LI",{});var XXe=s(dw);Zwe=n(XXe,"STRONG",{});var WWt=s(Zwe);sOr=r(WWt,"layoutlm"),WWt.forEach(t),lOr=r(XXe," \u2014 "),soe=n(XXe,"A",{href:!0});var QWt=s(soe);iOr=r(QWt,"TFLayoutLMForTokenClassification"),QWt.forEach(t),dOr=r(XXe," (LayoutLM model)"),XXe.forEach(t),cOr=i(he),cw=n(he,"LI",{});var zXe=s(cw);e6e=n(zXe,"STRONG",{});var UWt=s(e6e);mOr=r(UWt,"longformer"),UWt.forEach(t),fOr=r(zXe," \u2014 "),loe=n(zXe,"A",{href:!0});var HWt=s(loe);gOr=r(HWt,"TFLongformerForTokenClassification"),HWt.forEach(t),hOr=r(zXe," (Longformer model)"),zXe.forEach(t),uOr=i(he),mw=n(he,"LI",{});var WXe=s(mw);o6e=n(WXe,"STRONG",{});var JWt=s(o6e);pOr=r(JWt,"mobilebert"),JWt.forEach(t),_Or=r(WXe," \u2014 "),ioe=n(WXe,"A",{href:!0});var YWt=s(ioe);bOr=r(YWt,"TFMobileBertForTokenClassification"),YWt.forEach(t),vOr=r(WXe," (MobileBERT model)"),WXe.forEach(t),FOr=i(he),fw=n(he,"LI",{});var QXe=s(fw);r6e=n(QXe,"STRONG",{});var KWt=s(r6e);TOr=r(KWt,"mpnet"),KWt.forEach(t),MOr=r(QXe," \u2014 "),doe=n(QXe,"A",{href:!0});var ZWt=s(doe);EOr=r(ZWt,"TFMPNetForTokenClassification"),ZWt.forEach(t),COr=r(QXe," (MPNet model)"),QXe.forEach(t),wOr=i(he),gw=n(he,"LI",{});var UXe=s(gw);t6e=n(UXe,"STRONG",{});var eQt=s(t6e);AOr=r(eQt,"rembert"),eQt.forEach(t),LOr=r(UXe," \u2014 "),coe=n(UXe,"A",{href:!0});var oQt=s(coe);yOr=r(oQt,"TFRemBertForTokenClassification"),oQt.forEach(t),xOr=r(UXe," (RemBERT model)"),UXe.forEach(t),$Or=i(he),hw=n(he,"LI",{});var HXe=s(hw);a6e=n(HXe,"STRONG",{});var rQt=s(a6e);kOr=r(rQt,"roberta"),rQt.forEach(t),SOr=r(HXe," \u2014 "),moe=n(HXe,"A",{href:!0});var tQt=s(moe);ROr=r(tQt,"TFRobertaForTokenClassification"),tQt.forEach(t),POr=r(HXe," (RoBERTa model)"),HXe.forEach(t),BOr=i(he),uw=n(he,"LI",{});var JXe=s(uw);n6e=n(JXe,"STRONG",{});var aQt=s(n6e);IOr=r(aQt,"roformer"),aQt.forEach(t),NOr=r(JXe," \u2014 "),foe=n(JXe,"A",{href:!0});var nQt=s(foe);qOr=r(nQt,"TFRoFormerForTokenClassification"),nQt.forEach(t),jOr=r(JXe," (RoFormer model)"),JXe.forEach(t),DOr=i(he),pw=n(he,"LI",{});var YXe=s(pw);s6e=n(YXe,"STRONG",{});var sQt=s(s6e);GOr=r(sQt,"xlm"),sQt.forEach(t),OOr=r(YXe," \u2014 "),goe=n(YXe,"A",{href:!0});var lQt=s(goe);VOr=r(lQt,"TFXLMForTokenClassification"),lQt.forEach(t),XOr=r(YXe," (XLM model)"),YXe.forEach(t),zOr=i(he),_w=n(he,"LI",{});var KXe=s(_w);l6e=n(KXe,"STRONG",{});var iQt=s(l6e);WOr=r(iQt,"xlm-roberta"),iQt.forEach(t),QOr=r(KXe," \u2014 "),hoe=n(KXe,"A",{href:!0});var dQt=s(hoe);UOr=r(dQt,"TFXLMRobertaForTokenClassification"),dQt.forEach(t),HOr=r(KXe," (XLM-RoBERTa model)"),KXe.forEach(t),JOr=i(he),bw=n(he,"LI",{});var ZXe=s(bw);i6e=n(ZXe,"STRONG",{});var cQt=s(i6e);YOr=r(cQt,"xlnet"),cQt.forEach(t),KOr=r(ZXe," \u2014 "),uoe=n(ZXe,"A",{href:!0});var mQt=s(uoe);ZOr=r(mQt,"TFXLNetForTokenClassification"),mQt.forEach(t),eVr=r(ZXe," (XLNet model)"),ZXe.forEach(t),he.forEach(t),oVr=i(mi),T(vw.$$.fragment,mi),mi.forEach(t),ci.forEach(t),tHe=i(m),nm=n(m,"H2",{class:!0});var _Ye=s(nm);Fw=n(_Ye,"A",{id:!0,class:!0,href:!0});var fQt=s(Fw);d6e=n(fQt,"SPAN",{});var gQt=s(d6e);T(ik.$$.fragment,gQt),gQt.forEach(t),fQt.forEach(t),rVr=i(_Ye),c6e=n(_Ye,"SPAN",{});var hQt=s(c6e);tVr=r(hQt,"TFAutoModelForQuestionAnswering"),hQt.forEach(t),_Ye.forEach(t),aHe=i(m),pr=n(m,"DIV",{class:!0});var fi=s(pr);T(dk.$$.fragment,fi),aVr=i(fi),sm=n(fi,"P",{});var Kne=s(sm);nVr=r(Kne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),poe=n(Kne,"A",{href:!0});var uQt=s(poe);sVr=r(uQt,"from_pretrained()"),uQt.forEach(t),lVr=r(Kne," class method or the "),_oe=n(Kne,"A",{href:!0});var pQt=s(_oe);iVr=r(pQt,"from_config()"),pQt.forEach(t),dVr=r(Kne,` class
method.`),Kne.forEach(t),cVr=i(fi),ck=n(fi,"P",{});var bYe=s(ck);mVr=r(bYe,"This class cannot be instantiated directly using "),m6e=n(bYe,"CODE",{});var _Qt=s(m6e);fVr=r(_Qt,"__init__()"),_Qt.forEach(t),gVr=r(bYe," (throws an error)."),bYe.forEach(t),hVr=i(fi),Jt=n(fi,"DIV",{class:!0});var xy=s(Jt);T(mk.$$.fragment,xy),uVr=i(xy),f6e=n(xy,"P",{});var bQt=s(f6e);pVr=r(bQt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),bQt.forEach(t),_Vr=i(xy),lm=n(xy,"P",{});var Zne=s(lm);bVr=r(Zne,`Note:
Loading a model from its configuration file does `),g6e=n(Zne,"STRONG",{});var vQt=s(g6e);vVr=r(vQt,"not"),vQt.forEach(t),FVr=r(Zne,` load the model weights. It only affects the
model\u2019s configuration. Use `),boe=n(Zne,"A",{href:!0});var FQt=s(boe);TVr=r(FQt,"from_pretrained()"),FQt.forEach(t),MVr=r(Zne," to load the model weights."),Zne.forEach(t),EVr=i(xy),T(Tw.$$.fragment,xy),xy.forEach(t),CVr=i(fi),zr=n(fi,"DIV",{class:!0});var gi=s(zr);T(fk.$$.fragment,gi),wVr=i(gi),h6e=n(gi,"P",{});var TQt=s(h6e);AVr=r(TQt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),TQt.forEach(t),LVr=i(gi),yn=n(gi,"P",{});var $y=s(yn);yVr=r($y,"The model class to instantiate is selected based on the "),u6e=n($y,"CODE",{});var MQt=s(u6e);xVr=r(MQt,"model_type"),MQt.forEach(t),$Vr=r($y,` property of the config object (either
passed as an argument or loaded from `),p6e=n($y,"CODE",{});var EQt=s(p6e);kVr=r(EQt,"pretrained_model_name_or_path"),EQt.forEach(t),SVr=r($y,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_6e=n($y,"CODE",{});var CQt=s(_6e);RVr=r(CQt,"pretrained_model_name_or_path"),CQt.forEach(t),PVr=r($y,":"),$y.forEach(t),BVr=i(gi),ce=n(gi,"UL",{});var ue=s(ce);Mw=n(ue,"LI",{});var eze=s(Mw);b6e=n(eze,"STRONG",{});var wQt=s(b6e);IVr=r(wQt,"albert"),wQt.forEach(t),NVr=r(eze," \u2014 "),voe=n(eze,"A",{href:!0});var AQt=s(voe);qVr=r(AQt,"TFAlbertForQuestionAnswering"),AQt.forEach(t),jVr=r(eze," (ALBERT model)"),eze.forEach(t),DVr=i(ue),Ew=n(ue,"LI",{});var oze=s(Ew);v6e=n(oze,"STRONG",{});var LQt=s(v6e);GVr=r(LQt,"bert"),LQt.forEach(t),OVr=r(oze," \u2014 "),Foe=n(oze,"A",{href:!0});var yQt=s(Foe);VVr=r(yQt,"TFBertForQuestionAnswering"),yQt.forEach(t),XVr=r(oze," (BERT model)"),oze.forEach(t),zVr=i(ue),Cw=n(ue,"LI",{});var rze=s(Cw);F6e=n(rze,"STRONG",{});var xQt=s(F6e);WVr=r(xQt,"camembert"),xQt.forEach(t),QVr=r(rze," \u2014 "),Toe=n(rze,"A",{href:!0});var $Qt=s(Toe);UVr=r($Qt,"TFCamembertForQuestionAnswering"),$Qt.forEach(t),HVr=r(rze," (CamemBERT model)"),rze.forEach(t),JVr=i(ue),ww=n(ue,"LI",{});var tze=s(ww);T6e=n(tze,"STRONG",{});var kQt=s(T6e);YVr=r(kQt,"convbert"),kQt.forEach(t),KVr=r(tze," \u2014 "),Moe=n(tze,"A",{href:!0});var SQt=s(Moe);ZVr=r(SQt,"TFConvBertForQuestionAnswering"),SQt.forEach(t),eXr=r(tze," (ConvBERT model)"),tze.forEach(t),oXr=i(ue),Aw=n(ue,"LI",{});var aze=s(Aw);M6e=n(aze,"STRONG",{});var RQt=s(M6e);rXr=r(RQt,"deberta"),RQt.forEach(t),tXr=r(aze," \u2014 "),Eoe=n(aze,"A",{href:!0});var PQt=s(Eoe);aXr=r(PQt,"TFDebertaForQuestionAnswering"),PQt.forEach(t),nXr=r(aze," (DeBERTa model)"),aze.forEach(t),sXr=i(ue),Lw=n(ue,"LI",{});var nze=s(Lw);E6e=n(nze,"STRONG",{});var BQt=s(E6e);lXr=r(BQt,"deberta-v2"),BQt.forEach(t),iXr=r(nze," \u2014 "),Coe=n(nze,"A",{href:!0});var IQt=s(Coe);dXr=r(IQt,"TFDebertaV2ForQuestionAnswering"),IQt.forEach(t),cXr=r(nze," (DeBERTa-v2 model)"),nze.forEach(t),mXr=i(ue),yw=n(ue,"LI",{});var sze=s(yw);C6e=n(sze,"STRONG",{});var NQt=s(C6e);fXr=r(NQt,"distilbert"),NQt.forEach(t),gXr=r(sze," \u2014 "),woe=n(sze,"A",{href:!0});var qQt=s(woe);hXr=r(qQt,"TFDistilBertForQuestionAnswering"),qQt.forEach(t),uXr=r(sze," (DistilBERT model)"),sze.forEach(t),pXr=i(ue),xw=n(ue,"LI",{});var lze=s(xw);w6e=n(lze,"STRONG",{});var jQt=s(w6e);_Xr=r(jQt,"electra"),jQt.forEach(t),bXr=r(lze," \u2014 "),Aoe=n(lze,"A",{href:!0});var DQt=s(Aoe);vXr=r(DQt,"TFElectraForQuestionAnswering"),DQt.forEach(t),FXr=r(lze," (ELECTRA model)"),lze.forEach(t),TXr=i(ue),$w=n(ue,"LI",{});var ize=s($w);A6e=n(ize,"STRONG",{});var GQt=s(A6e);MXr=r(GQt,"flaubert"),GQt.forEach(t),EXr=r(ize," \u2014 "),Loe=n(ize,"A",{href:!0});var OQt=s(Loe);CXr=r(OQt,"TFFlaubertForQuestionAnsweringSimple"),OQt.forEach(t),wXr=r(ize," (FlauBERT model)"),ize.forEach(t),AXr=i(ue),kw=n(ue,"LI",{});var dze=s(kw);L6e=n(dze,"STRONG",{});var VQt=s(L6e);LXr=r(VQt,"funnel"),VQt.forEach(t),yXr=r(dze," \u2014 "),yoe=n(dze,"A",{href:!0});var XQt=s(yoe);xXr=r(XQt,"TFFunnelForQuestionAnswering"),XQt.forEach(t),$Xr=r(dze," (Funnel Transformer model)"),dze.forEach(t),kXr=i(ue),Sw=n(ue,"LI",{});var cze=s(Sw);y6e=n(cze,"STRONG",{});var zQt=s(y6e);SXr=r(zQt,"gptj"),zQt.forEach(t),RXr=r(cze," \u2014 "),xoe=n(cze,"A",{href:!0});var WQt=s(xoe);PXr=r(WQt,"TFGPTJForQuestionAnswering"),WQt.forEach(t),BXr=r(cze," (GPT-J model)"),cze.forEach(t),IXr=i(ue),Rw=n(ue,"LI",{});var mze=s(Rw);x6e=n(mze,"STRONG",{});var QQt=s(x6e);NXr=r(QQt,"longformer"),QQt.forEach(t),qXr=r(mze," \u2014 "),$oe=n(mze,"A",{href:!0});var UQt=s($oe);jXr=r(UQt,"TFLongformerForQuestionAnswering"),UQt.forEach(t),DXr=r(mze," (Longformer model)"),mze.forEach(t),GXr=i(ue),Pw=n(ue,"LI",{});var fze=s(Pw);$6e=n(fze,"STRONG",{});var HQt=s($6e);OXr=r(HQt,"mobilebert"),HQt.forEach(t),VXr=r(fze," \u2014 "),koe=n(fze,"A",{href:!0});var JQt=s(koe);XXr=r(JQt,"TFMobileBertForQuestionAnswering"),JQt.forEach(t),zXr=r(fze," (MobileBERT model)"),fze.forEach(t),WXr=i(ue),Bw=n(ue,"LI",{});var gze=s(Bw);k6e=n(gze,"STRONG",{});var YQt=s(k6e);QXr=r(YQt,"mpnet"),YQt.forEach(t),UXr=r(gze," \u2014 "),Soe=n(gze,"A",{href:!0});var KQt=s(Soe);HXr=r(KQt,"TFMPNetForQuestionAnswering"),KQt.forEach(t),JXr=r(gze," (MPNet model)"),gze.forEach(t),YXr=i(ue),Iw=n(ue,"LI",{});var hze=s(Iw);S6e=n(hze,"STRONG",{});var ZQt=s(S6e);KXr=r(ZQt,"rembert"),ZQt.forEach(t),ZXr=r(hze," \u2014 "),Roe=n(hze,"A",{href:!0});var eUt=s(Roe);ezr=r(eUt,"TFRemBertForQuestionAnswering"),eUt.forEach(t),ozr=r(hze," (RemBERT model)"),hze.forEach(t),rzr=i(ue),Nw=n(ue,"LI",{});var uze=s(Nw);R6e=n(uze,"STRONG",{});var oUt=s(R6e);tzr=r(oUt,"roberta"),oUt.forEach(t),azr=r(uze," \u2014 "),Poe=n(uze,"A",{href:!0});var rUt=s(Poe);nzr=r(rUt,"TFRobertaForQuestionAnswering"),rUt.forEach(t),szr=r(uze," (RoBERTa model)"),uze.forEach(t),lzr=i(ue),qw=n(ue,"LI",{});var pze=s(qw);P6e=n(pze,"STRONG",{});var tUt=s(P6e);izr=r(tUt,"roformer"),tUt.forEach(t),dzr=r(pze," \u2014 "),Boe=n(pze,"A",{href:!0});var aUt=s(Boe);czr=r(aUt,"TFRoFormerForQuestionAnswering"),aUt.forEach(t),mzr=r(pze," (RoFormer model)"),pze.forEach(t),fzr=i(ue),jw=n(ue,"LI",{});var _ze=s(jw);B6e=n(_ze,"STRONG",{});var nUt=s(B6e);gzr=r(nUt,"xlm"),nUt.forEach(t),hzr=r(_ze," \u2014 "),Ioe=n(_ze,"A",{href:!0});var sUt=s(Ioe);uzr=r(sUt,"TFXLMForQuestionAnsweringSimple"),sUt.forEach(t),pzr=r(_ze," (XLM model)"),_ze.forEach(t),_zr=i(ue),Dw=n(ue,"LI",{});var bze=s(Dw);I6e=n(bze,"STRONG",{});var lUt=s(I6e);bzr=r(lUt,"xlm-roberta"),lUt.forEach(t),vzr=r(bze," \u2014 "),Noe=n(bze,"A",{href:!0});var iUt=s(Noe);Fzr=r(iUt,"TFXLMRobertaForQuestionAnswering"),iUt.forEach(t),Tzr=r(bze," (XLM-RoBERTa model)"),bze.forEach(t),Mzr=i(ue),Gw=n(ue,"LI",{});var vze=s(Gw);N6e=n(vze,"STRONG",{});var dUt=s(N6e);Ezr=r(dUt,"xlnet"),dUt.forEach(t),Czr=r(vze," \u2014 "),qoe=n(vze,"A",{href:!0});var cUt=s(qoe);wzr=r(cUt,"TFXLNetForQuestionAnsweringSimple"),cUt.forEach(t),Azr=r(vze," (XLNet model)"),vze.forEach(t),ue.forEach(t),Lzr=i(gi),T(Ow.$$.fragment,gi),gi.forEach(t),fi.forEach(t),nHe=i(m),im=n(m,"H2",{class:!0});var vYe=s(im);Vw=n(vYe,"A",{id:!0,class:!0,href:!0});var mUt=s(Vw);q6e=n(mUt,"SPAN",{});var fUt=s(q6e);T(gk.$$.fragment,fUt),fUt.forEach(t),mUt.forEach(t),yzr=i(vYe),j6e=n(vYe,"SPAN",{});var gUt=s(j6e);xzr=r(gUt,"TFAutoModelForVision2Seq"),gUt.forEach(t),vYe.forEach(t),sHe=i(m),_r=n(m,"DIV",{class:!0});var hi=s(_r);T(hk.$$.fragment,hi),$zr=i(hi),dm=n(hi,"P",{});var ese=s(dm);kzr=r(ese,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),joe=n(ese,"A",{href:!0});var hUt=s(joe);Szr=r(hUt,"from_pretrained()"),hUt.forEach(t),Rzr=r(ese," class method or the "),Doe=n(ese,"A",{href:!0});var uUt=s(Doe);Pzr=r(uUt,"from_config()"),uUt.forEach(t),Bzr=r(ese,` class
method.`),ese.forEach(t),Izr=i(hi),uk=n(hi,"P",{});var FYe=s(uk);Nzr=r(FYe,"This class cannot be instantiated directly using "),D6e=n(FYe,"CODE",{});var pUt=s(D6e);qzr=r(pUt,"__init__()"),pUt.forEach(t),jzr=r(FYe," (throws an error)."),FYe.forEach(t),Dzr=i(hi),Yt=n(hi,"DIV",{class:!0});var ky=s(Yt);T(pk.$$.fragment,ky),Gzr=i(ky),G6e=n(ky,"P",{});var _Ut=s(G6e);Ozr=r(_Ut,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_Ut.forEach(t),Vzr=i(ky),cm=n(ky,"P",{});var ose=s(cm);Xzr=r(ose,`Note:
Loading a model from its configuration file does `),O6e=n(ose,"STRONG",{});var bUt=s(O6e);zzr=r(bUt,"not"),bUt.forEach(t),Wzr=r(ose,` load the model weights. It only affects the
model\u2019s configuration. Use `),Goe=n(ose,"A",{href:!0});var vUt=s(Goe);Qzr=r(vUt,"from_pretrained()"),vUt.forEach(t),Uzr=r(ose," to load the model weights."),ose.forEach(t),Hzr=i(ky),T(Xw.$$.fragment,ky),ky.forEach(t),Jzr=i(hi),Wr=n(hi,"DIV",{class:!0});var ui=s(Wr);T(_k.$$.fragment,ui),Yzr=i(ui),V6e=n(ui,"P",{});var FUt=s(V6e);Kzr=r(FUt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),FUt.forEach(t),Zzr=i(ui),xn=n(ui,"P",{});var Sy=s(xn);eWr=r(Sy,"The model class to instantiate is selected based on the "),X6e=n(Sy,"CODE",{});var TUt=s(X6e);oWr=r(TUt,"model_type"),TUt.forEach(t),rWr=r(Sy,` property of the config object (either
passed as an argument or loaded from `),z6e=n(Sy,"CODE",{});var MUt=s(z6e);tWr=r(MUt,"pretrained_model_name_or_path"),MUt.forEach(t),aWr=r(Sy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W6e=n(Sy,"CODE",{});var EUt=s(W6e);nWr=r(EUt,"pretrained_model_name_or_path"),EUt.forEach(t),sWr=r(Sy,":"),Sy.forEach(t),lWr=i(ui),Q6e=n(ui,"UL",{});var CUt=s(Q6e);zw=n(CUt,"LI",{});var Fze=s(zw);U6e=n(Fze,"STRONG",{});var wUt=s(U6e);iWr=r(wUt,"vision-encoder-decoder"),wUt.forEach(t),dWr=r(Fze," \u2014 "),Ooe=n(Fze,"A",{href:!0});var AUt=s(Ooe);cWr=r(AUt,"TFVisionEncoderDecoderModel"),AUt.forEach(t),mWr=r(Fze," (Vision Encoder decoder model)"),Fze.forEach(t),CUt.forEach(t),fWr=i(ui),T(Ww.$$.fragment,ui),ui.forEach(t),hi.forEach(t),lHe=i(m),mm=n(m,"H2",{class:!0});var TYe=s(mm);Qw=n(TYe,"A",{id:!0,class:!0,href:!0});var LUt=s(Qw);H6e=n(LUt,"SPAN",{});var yUt=s(H6e);T(bk.$$.fragment,yUt),yUt.forEach(t),LUt.forEach(t),gWr=i(TYe),J6e=n(TYe,"SPAN",{});var xUt=s(J6e);hWr=r(xUt,"TFAutoModelForSpeechSeq2Seq"),xUt.forEach(t),TYe.forEach(t),iHe=i(m),br=n(m,"DIV",{class:!0});var pi=s(br);T(vk.$$.fragment,pi),uWr=i(pi),fm=n(pi,"P",{});var rse=s(fm);pWr=r(rse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Voe=n(rse,"A",{href:!0});var $Ut=s(Voe);_Wr=r($Ut,"from_pretrained()"),$Ut.forEach(t),bWr=r(rse," class method or the "),Xoe=n(rse,"A",{href:!0});var kUt=s(Xoe);vWr=r(kUt,"from_config()"),kUt.forEach(t),FWr=r(rse,` class
method.`),rse.forEach(t),TWr=i(pi),Fk=n(pi,"P",{});var MYe=s(Fk);MWr=r(MYe,"This class cannot be instantiated directly using "),Y6e=n(MYe,"CODE",{});var SUt=s(Y6e);EWr=r(SUt,"__init__()"),SUt.forEach(t),CWr=r(MYe," (throws an error)."),MYe.forEach(t),wWr=i(pi),Kt=n(pi,"DIV",{class:!0});var Ry=s(Kt);T(Tk.$$.fragment,Ry),AWr=i(Ry),K6e=n(Ry,"P",{});var RUt=s(K6e);LWr=r(RUt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),RUt.forEach(t),yWr=i(Ry),gm=n(Ry,"P",{});var tse=s(gm);xWr=r(tse,`Note:
Loading a model from its configuration file does `),Z6e=n(tse,"STRONG",{});var PUt=s(Z6e);$Wr=r(PUt,"not"),PUt.forEach(t),kWr=r(tse,` load the model weights. It only affects the
model\u2019s configuration. Use `),zoe=n(tse,"A",{href:!0});var BUt=s(zoe);SWr=r(BUt,"from_pretrained()"),BUt.forEach(t),RWr=r(tse," to load the model weights."),tse.forEach(t),PWr=i(Ry),T(Uw.$$.fragment,Ry),Ry.forEach(t),BWr=i(pi),Qr=n(pi,"DIV",{class:!0});var _i=s(Qr);T(Mk.$$.fragment,_i),IWr=i(_i),eAe=n(_i,"P",{});var IUt=s(eAe);NWr=r(IUt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),IUt.forEach(t),qWr=i(_i),$n=n(_i,"P",{});var Py=s($n);jWr=r(Py,"The model class to instantiate is selected based on the "),oAe=n(Py,"CODE",{});var NUt=s(oAe);DWr=r(NUt,"model_type"),NUt.forEach(t),GWr=r(Py,` property of the config object (either
passed as an argument or loaded from `),rAe=n(Py,"CODE",{});var qUt=s(rAe);OWr=r(qUt,"pretrained_model_name_or_path"),qUt.forEach(t),VWr=r(Py,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tAe=n(Py,"CODE",{});var jUt=s(tAe);XWr=r(jUt,"pretrained_model_name_or_path"),jUt.forEach(t),zWr=r(Py,":"),Py.forEach(t),WWr=i(_i),aAe=n(_i,"UL",{});var DUt=s(aAe);Hw=n(DUt,"LI",{});var Tze=s(Hw);nAe=n(Tze,"STRONG",{});var GUt=s(nAe);QWr=r(GUt,"speech_to_text"),GUt.forEach(t),UWr=r(Tze," \u2014 "),Woe=n(Tze,"A",{href:!0});var OUt=s(Woe);HWr=r(OUt,"TFSpeech2TextForConditionalGeneration"),OUt.forEach(t),JWr=r(Tze," (Speech2Text model)"),Tze.forEach(t),DUt.forEach(t),YWr=i(_i),T(Jw.$$.fragment,_i),_i.forEach(t),pi.forEach(t),dHe=i(m),hm=n(m,"H2",{class:!0});var EYe=s(hm);Yw=n(EYe,"A",{id:!0,class:!0,href:!0});var VUt=s(Yw);sAe=n(VUt,"SPAN",{});var XUt=s(sAe);T(Ek.$$.fragment,XUt),XUt.forEach(t),VUt.forEach(t),KWr=i(EYe),lAe=n(EYe,"SPAN",{});var zUt=s(lAe);ZWr=r(zUt,"FlaxAutoModel"),zUt.forEach(t),EYe.forEach(t),cHe=i(m),vr=n(m,"DIV",{class:!0});var bi=s(vr);T(Ck.$$.fragment,bi),eQr=i(bi),um=n(bi,"P",{});var ase=s(um);oQr=r(ase,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Qoe=n(ase,"A",{href:!0});var WUt=s(Qoe);rQr=r(WUt,"from_pretrained()"),WUt.forEach(t),tQr=r(ase," class method or the "),Uoe=n(ase,"A",{href:!0});var QUt=s(Uoe);aQr=r(QUt,"from_config()"),QUt.forEach(t),nQr=r(ase,` class
method.`),ase.forEach(t),sQr=i(bi),wk=n(bi,"P",{});var CYe=s(wk);lQr=r(CYe,"This class cannot be instantiated directly using "),iAe=n(CYe,"CODE",{});var UUt=s(iAe);iQr=r(UUt,"__init__()"),UUt.forEach(t),dQr=r(CYe," (throws an error)."),CYe.forEach(t),cQr=i(bi),Zt=n(bi,"DIV",{class:!0});var By=s(Zt);T(Ak.$$.fragment,By),mQr=i(By),dAe=n(By,"P",{});var HUt=s(dAe);fQr=r(HUt,"Instantiates one of the base model classes of the library from a configuration."),HUt.forEach(t),gQr=i(By),pm=n(By,"P",{});var nse=s(pm);hQr=r(nse,`Note:
Loading a model from its configuration file does `),cAe=n(nse,"STRONG",{});var JUt=s(cAe);uQr=r(JUt,"not"),JUt.forEach(t),pQr=r(nse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hoe=n(nse,"A",{href:!0});var YUt=s(Hoe);_Qr=r(YUt,"from_pretrained()"),YUt.forEach(t),bQr=r(nse," to load the model weights."),nse.forEach(t),vQr=i(By),T(Kw.$$.fragment,By),By.forEach(t),FQr=i(bi),Ur=n(bi,"DIV",{class:!0});var vi=s(Ur);T(Lk.$$.fragment,vi),TQr=i(vi),mAe=n(vi,"P",{});var KUt=s(mAe);MQr=r(KUt,"Instantiate one of the base model classes of the library from a pretrained model."),KUt.forEach(t),EQr=i(vi),kn=n(vi,"P",{});var Iy=s(kn);CQr=r(Iy,"The model class to instantiate is selected based on the "),fAe=n(Iy,"CODE",{});var ZUt=s(fAe);wQr=r(ZUt,"model_type"),ZUt.forEach(t),AQr=r(Iy,` property of the config object (either
passed as an argument or loaded from `),gAe=n(Iy,"CODE",{});var eHt=s(gAe);LQr=r(eHt,"pretrained_model_name_or_path"),eHt.forEach(t),yQr=r(Iy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hAe=n(Iy,"CODE",{});var oHt=s(hAe);xQr=r(oHt,"pretrained_model_name_or_path"),oHt.forEach(t),$Qr=r(Iy,":"),Iy.forEach(t),kQr=i(vi),re=n(vi,"UL",{});var ae=s(re);Zw=n(ae,"LI",{});var Mze=s(Zw);uAe=n(Mze,"STRONG",{});var rHt=s(uAe);SQr=r(rHt,"albert"),rHt.forEach(t),RQr=r(Mze," \u2014 "),Joe=n(Mze,"A",{href:!0});var tHt=s(Joe);PQr=r(tHt,"FlaxAlbertModel"),tHt.forEach(t),BQr=r(Mze," (ALBERT model)"),Mze.forEach(t),IQr=i(ae),e6=n(ae,"LI",{});var Eze=s(e6);pAe=n(Eze,"STRONG",{});var aHt=s(pAe);NQr=r(aHt,"bart"),aHt.forEach(t),qQr=r(Eze," \u2014 "),Yoe=n(Eze,"A",{href:!0});var nHt=s(Yoe);jQr=r(nHt,"FlaxBartModel"),nHt.forEach(t),DQr=r(Eze," (BART model)"),Eze.forEach(t),GQr=i(ae),o6=n(ae,"LI",{});var Cze=s(o6);_Ae=n(Cze,"STRONG",{});var sHt=s(_Ae);OQr=r(sHt,"beit"),sHt.forEach(t),VQr=r(Cze," \u2014 "),Koe=n(Cze,"A",{href:!0});var lHt=s(Koe);XQr=r(lHt,"FlaxBeitModel"),lHt.forEach(t),zQr=r(Cze," (BEiT model)"),Cze.forEach(t),WQr=i(ae),r6=n(ae,"LI",{});var wze=s(r6);bAe=n(wze,"STRONG",{});var iHt=s(bAe);QQr=r(iHt,"bert"),iHt.forEach(t),UQr=r(wze," \u2014 "),Zoe=n(wze,"A",{href:!0});var dHt=s(Zoe);HQr=r(dHt,"FlaxBertModel"),dHt.forEach(t),JQr=r(wze," (BERT model)"),wze.forEach(t),YQr=i(ae),t6=n(ae,"LI",{});var Aze=s(t6);vAe=n(Aze,"STRONG",{});var cHt=s(vAe);KQr=r(cHt,"big_bird"),cHt.forEach(t),ZQr=r(Aze," \u2014 "),ere=n(Aze,"A",{href:!0});var mHt=s(ere);eUr=r(mHt,"FlaxBigBirdModel"),mHt.forEach(t),oUr=r(Aze," (BigBird model)"),Aze.forEach(t),rUr=i(ae),a6=n(ae,"LI",{});var Lze=s(a6);FAe=n(Lze,"STRONG",{});var fHt=s(FAe);tUr=r(fHt,"blenderbot"),fHt.forEach(t),aUr=r(Lze," \u2014 "),ore=n(Lze,"A",{href:!0});var gHt=s(ore);nUr=r(gHt,"FlaxBlenderbotModel"),gHt.forEach(t),sUr=r(Lze," (Blenderbot model)"),Lze.forEach(t),lUr=i(ae),n6=n(ae,"LI",{});var yze=s(n6);TAe=n(yze,"STRONG",{});var hHt=s(TAe);iUr=r(hHt,"blenderbot-small"),hHt.forEach(t),dUr=r(yze," \u2014 "),rre=n(yze,"A",{href:!0});var uHt=s(rre);cUr=r(uHt,"FlaxBlenderbotSmallModel"),uHt.forEach(t),mUr=r(yze," (BlenderbotSmall model)"),yze.forEach(t),fUr=i(ae),s6=n(ae,"LI",{});var xze=s(s6);MAe=n(xze,"STRONG",{});var pHt=s(MAe);gUr=r(pHt,"clip"),pHt.forEach(t),hUr=r(xze," \u2014 "),tre=n(xze,"A",{href:!0});var _Ht=s(tre);uUr=r(_Ht,"FlaxCLIPModel"),_Ht.forEach(t),pUr=r(xze," (CLIP model)"),xze.forEach(t),_Ur=i(ae),l6=n(ae,"LI",{});var $ze=s(l6);EAe=n($ze,"STRONG",{});var bHt=s(EAe);bUr=r(bHt,"distilbert"),bHt.forEach(t),vUr=r($ze," \u2014 "),are=n($ze,"A",{href:!0});var vHt=s(are);FUr=r(vHt,"FlaxDistilBertModel"),vHt.forEach(t),TUr=r($ze," (DistilBERT model)"),$ze.forEach(t),MUr=i(ae),i6=n(ae,"LI",{});var kze=s(i6);CAe=n(kze,"STRONG",{});var FHt=s(CAe);EUr=r(FHt,"electra"),FHt.forEach(t),CUr=r(kze," \u2014 "),nre=n(kze,"A",{href:!0});var THt=s(nre);wUr=r(THt,"FlaxElectraModel"),THt.forEach(t),AUr=r(kze," (ELECTRA model)"),kze.forEach(t),LUr=i(ae),d6=n(ae,"LI",{});var Sze=s(d6);wAe=n(Sze,"STRONG",{});var MHt=s(wAe);yUr=r(MHt,"gpt2"),MHt.forEach(t),xUr=r(Sze," \u2014 "),sre=n(Sze,"A",{href:!0});var EHt=s(sre);$Ur=r(EHt,"FlaxGPT2Model"),EHt.forEach(t),kUr=r(Sze," (OpenAI GPT-2 model)"),Sze.forEach(t),SUr=i(ae),c6=n(ae,"LI",{});var Rze=s(c6);AAe=n(Rze,"STRONG",{});var CHt=s(AAe);RUr=r(CHt,"gpt_neo"),CHt.forEach(t),PUr=r(Rze," \u2014 "),lre=n(Rze,"A",{href:!0});var wHt=s(lre);BUr=r(wHt,"FlaxGPTNeoModel"),wHt.forEach(t),IUr=r(Rze," (GPT Neo model)"),Rze.forEach(t),NUr=i(ae),m6=n(ae,"LI",{});var Pze=s(m6);LAe=n(Pze,"STRONG",{});var AHt=s(LAe);qUr=r(AHt,"gptj"),AHt.forEach(t),jUr=r(Pze," \u2014 "),ire=n(Pze,"A",{href:!0});var LHt=s(ire);DUr=r(LHt,"FlaxGPTJModel"),LHt.forEach(t),GUr=r(Pze," (GPT-J model)"),Pze.forEach(t),OUr=i(ae),f6=n(ae,"LI",{});var Bze=s(f6);yAe=n(Bze,"STRONG",{});var yHt=s(yAe);VUr=r(yHt,"longt5"),yHt.forEach(t),XUr=r(Bze," \u2014 "),dre=n(Bze,"A",{href:!0});var xHt=s(dre);zUr=r(xHt,"FlaxLongT5Model"),xHt.forEach(t),WUr=r(Bze," (LongT5 model)"),Bze.forEach(t),QUr=i(ae),g6=n(ae,"LI",{});var Ize=s(g6);xAe=n(Ize,"STRONG",{});var $Ht=s(xAe);UUr=r($Ht,"marian"),$Ht.forEach(t),HUr=r(Ize," \u2014 "),cre=n(Ize,"A",{href:!0});var kHt=s(cre);JUr=r(kHt,"FlaxMarianModel"),kHt.forEach(t),YUr=r(Ize," (Marian model)"),Ize.forEach(t),KUr=i(ae),h6=n(ae,"LI",{});var Nze=s(h6);$Ae=n(Nze,"STRONG",{});var SHt=s($Ae);ZUr=r(SHt,"mbart"),SHt.forEach(t),eHr=r(Nze," \u2014 "),mre=n(Nze,"A",{href:!0});var RHt=s(mre);oHr=r(RHt,"FlaxMBartModel"),RHt.forEach(t),rHr=r(Nze," (mBART model)"),Nze.forEach(t),tHr=i(ae),u6=n(ae,"LI",{});var qze=s(u6);kAe=n(qze,"STRONG",{});var PHt=s(kAe);aHr=r(PHt,"mt5"),PHt.forEach(t),nHr=r(qze," \u2014 "),fre=n(qze,"A",{href:!0});var BHt=s(fre);sHr=r(BHt,"FlaxMT5Model"),BHt.forEach(t),lHr=r(qze," (MT5 model)"),qze.forEach(t),iHr=i(ae),p6=n(ae,"LI",{});var jze=s(p6);SAe=n(jze,"STRONG",{});var IHt=s(SAe);dHr=r(IHt,"opt"),IHt.forEach(t),cHr=r(jze," \u2014 "),gre=n(jze,"A",{href:!0});var NHt=s(gre);mHr=r(NHt,"FlaxOPTModel"),NHt.forEach(t),fHr=r(jze," (OPT model)"),jze.forEach(t),gHr=i(ae),_6=n(ae,"LI",{});var Dze=s(_6);RAe=n(Dze,"STRONG",{});var qHt=s(RAe);hHr=r(qHt,"pegasus"),qHt.forEach(t),uHr=r(Dze," \u2014 "),hre=n(Dze,"A",{href:!0});var jHt=s(hre);pHr=r(jHt,"FlaxPegasusModel"),jHt.forEach(t),_Hr=r(Dze," (Pegasus model)"),Dze.forEach(t),bHr=i(ae),b6=n(ae,"LI",{});var Gze=s(b6);PAe=n(Gze,"STRONG",{});var DHt=s(PAe);vHr=r(DHt,"roberta"),DHt.forEach(t),FHr=r(Gze," \u2014 "),ure=n(Gze,"A",{href:!0});var GHt=s(ure);THr=r(GHt,"FlaxRobertaModel"),GHt.forEach(t),MHr=r(Gze," (RoBERTa model)"),Gze.forEach(t),EHr=i(ae),v6=n(ae,"LI",{});var Oze=s(v6);BAe=n(Oze,"STRONG",{});var OHt=s(BAe);CHr=r(OHt,"roformer"),OHt.forEach(t),wHr=r(Oze," \u2014 "),pre=n(Oze,"A",{href:!0});var VHt=s(pre);AHr=r(VHt,"FlaxRoFormerModel"),VHt.forEach(t),LHr=r(Oze," (RoFormer model)"),Oze.forEach(t),yHr=i(ae),F6=n(ae,"LI",{});var Vze=s(F6);IAe=n(Vze,"STRONG",{});var XHt=s(IAe);xHr=r(XHt,"t5"),XHt.forEach(t),$Hr=r(Vze," \u2014 "),_re=n(Vze,"A",{href:!0});var zHt=s(_re);kHr=r(zHt,"FlaxT5Model"),zHt.forEach(t),SHr=r(Vze," (T5 model)"),Vze.forEach(t),RHr=i(ae),T6=n(ae,"LI",{});var Xze=s(T6);NAe=n(Xze,"STRONG",{});var WHt=s(NAe);PHr=r(WHt,"vision-text-dual-encoder"),WHt.forEach(t),BHr=r(Xze," \u2014 "),bre=n(Xze,"A",{href:!0});var QHt=s(bre);IHr=r(QHt,"FlaxVisionTextDualEncoderModel"),QHt.forEach(t),NHr=r(Xze," (VisionTextDualEncoder model)"),Xze.forEach(t),qHr=i(ae),M6=n(ae,"LI",{});var zze=s(M6);qAe=n(zze,"STRONG",{});var UHt=s(qAe);jHr=r(UHt,"vit"),UHt.forEach(t),DHr=r(zze," \u2014 "),vre=n(zze,"A",{href:!0});var HHt=s(vre);GHr=r(HHt,"FlaxViTModel"),HHt.forEach(t),OHr=r(zze," (ViT model)"),zze.forEach(t),VHr=i(ae),E6=n(ae,"LI",{});var Wze=s(E6);jAe=n(Wze,"STRONG",{});var JHt=s(jAe);XHr=r(JHt,"wav2vec2"),JHt.forEach(t),zHr=r(Wze," \u2014 "),Fre=n(Wze,"A",{href:!0});var YHt=s(Fre);WHr=r(YHt,"FlaxWav2Vec2Model"),YHt.forEach(t),QHr=r(Wze," (Wav2Vec2 model)"),Wze.forEach(t),UHr=i(ae),C6=n(ae,"LI",{});var Qze=s(C6);DAe=n(Qze,"STRONG",{});var KHt=s(DAe);HHr=r(KHt,"xglm"),KHt.forEach(t),JHr=r(Qze," \u2014 "),Tre=n(Qze,"A",{href:!0});var ZHt=s(Tre);YHr=r(ZHt,"FlaxXGLMModel"),ZHt.forEach(t),KHr=r(Qze," (XGLM model)"),Qze.forEach(t),ZHr=i(ae),w6=n(ae,"LI",{});var Uze=s(w6);GAe=n(Uze,"STRONG",{});var eJt=s(GAe);eJr=r(eJt,"xlm-roberta"),eJt.forEach(t),oJr=r(Uze," \u2014 "),Mre=n(Uze,"A",{href:!0});var oJt=s(Mre);rJr=r(oJt,"FlaxXLMRobertaModel"),oJt.forEach(t),tJr=r(Uze," (XLM-RoBERTa model)"),Uze.forEach(t),ae.forEach(t),aJr=i(vi),T(A6.$$.fragment,vi),vi.forEach(t),bi.forEach(t),mHe=i(m),_m=n(m,"H2",{class:!0});var wYe=s(_m);L6=n(wYe,"A",{id:!0,class:!0,href:!0});var rJt=s(L6);OAe=n(rJt,"SPAN",{});var tJt=s(OAe);T(yk.$$.fragment,tJt),tJt.forEach(t),rJt.forEach(t),nJr=i(wYe),VAe=n(wYe,"SPAN",{});var aJt=s(VAe);sJr=r(aJt,"FlaxAutoModelForCausalLM"),aJt.forEach(t),wYe.forEach(t),fHe=i(m),Fr=n(m,"DIV",{class:!0});var Fi=s(Fr);T(xk.$$.fragment,Fi),lJr=i(Fi),bm=n(Fi,"P",{});var sse=s(bm);iJr=r(sse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Ere=n(sse,"A",{href:!0});var nJt=s(Ere);dJr=r(nJt,"from_pretrained()"),nJt.forEach(t),cJr=r(sse," class method or the "),Cre=n(sse,"A",{href:!0});var sJt=s(Cre);mJr=r(sJt,"from_config()"),sJt.forEach(t),fJr=r(sse,` class
method.`),sse.forEach(t),gJr=i(Fi),$k=n(Fi,"P",{});var AYe=s($k);hJr=r(AYe,"This class cannot be instantiated directly using "),XAe=n(AYe,"CODE",{});var lJt=s(XAe);uJr=r(lJt,"__init__()"),lJt.forEach(t),pJr=r(AYe," (throws an error)."),AYe.forEach(t),_Jr=i(Fi),ea=n(Fi,"DIV",{class:!0});var Ny=s(ea);T(kk.$$.fragment,Ny),bJr=i(Ny),zAe=n(Ny,"P",{});var iJt=s(zAe);vJr=r(iJt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),iJt.forEach(t),FJr=i(Ny),vm=n(Ny,"P",{});var lse=s(vm);TJr=r(lse,`Note:
Loading a model from its configuration file does `),WAe=n(lse,"STRONG",{});var dJt=s(WAe);MJr=r(dJt,"not"),dJt.forEach(t),EJr=r(lse,` load the model weights. It only affects the
model\u2019s configuration. Use `),wre=n(lse,"A",{href:!0});var cJt=s(wre);CJr=r(cJt,"from_pretrained()"),cJt.forEach(t),wJr=r(lse," to load the model weights."),lse.forEach(t),AJr=i(Ny),T(y6.$$.fragment,Ny),Ny.forEach(t),LJr=i(Fi),Hr=n(Fi,"DIV",{class:!0});var Ti=s(Hr);T(Sk.$$.fragment,Ti),yJr=i(Ti),QAe=n(Ti,"P",{});var mJt=s(QAe);xJr=r(mJt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),mJt.forEach(t),$Jr=i(Ti),Sn=n(Ti,"P",{});var qy=s(Sn);kJr=r(qy,"The model class to instantiate is selected based on the "),UAe=n(qy,"CODE",{});var fJt=s(UAe);SJr=r(fJt,"model_type"),fJt.forEach(t),RJr=r(qy,` property of the config object (either
passed as an argument or loaded from `),HAe=n(qy,"CODE",{});var gJt=s(HAe);PJr=r(gJt,"pretrained_model_name_or_path"),gJt.forEach(t),BJr=r(qy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JAe=n(qy,"CODE",{});var hJt=s(JAe);IJr=r(hJt,"pretrained_model_name_or_path"),hJt.forEach(t),NJr=r(qy,":"),qy.forEach(t),qJr=i(Ti),xe=n(Ti,"UL",{});var Ne=s(xe);x6=n(Ne,"LI",{});var Hze=s(x6);YAe=n(Hze,"STRONG",{});var uJt=s(YAe);jJr=r(uJt,"bart"),uJt.forEach(t),DJr=r(Hze," \u2014 "),Are=n(Hze,"A",{href:!0});var pJt=s(Are);GJr=r(pJt,"FlaxBartForCausalLM"),pJt.forEach(t),OJr=r(Hze," (BART model)"),Hze.forEach(t),VJr=i(Ne),$6=n(Ne,"LI",{});var Jze=s($6);KAe=n(Jze,"STRONG",{});var _Jt=s(KAe);XJr=r(_Jt,"bert"),_Jt.forEach(t),zJr=r(Jze," \u2014 "),Lre=n(Jze,"A",{href:!0});var bJt=s(Lre);WJr=r(bJt,"FlaxBertForCausalLM"),bJt.forEach(t),QJr=r(Jze," (BERT model)"),Jze.forEach(t),UJr=i(Ne),k6=n(Ne,"LI",{});var Yze=s(k6);ZAe=n(Yze,"STRONG",{});var vJt=s(ZAe);HJr=r(vJt,"big_bird"),vJt.forEach(t),JJr=r(Yze," \u2014 "),yre=n(Yze,"A",{href:!0});var FJt=s(yre);YJr=r(FJt,"FlaxBigBirdForCausalLM"),FJt.forEach(t),KJr=r(Yze," (BigBird model)"),Yze.forEach(t),ZJr=i(Ne),S6=n(Ne,"LI",{});var Kze=s(S6);e7e=n(Kze,"STRONG",{});var TJt=s(e7e);eYr=r(TJt,"electra"),TJt.forEach(t),oYr=r(Kze," \u2014 "),xre=n(Kze,"A",{href:!0});var MJt=s(xre);rYr=r(MJt,"FlaxElectraForCausalLM"),MJt.forEach(t),tYr=r(Kze," (ELECTRA model)"),Kze.forEach(t),aYr=i(Ne),R6=n(Ne,"LI",{});var Zze=s(R6);o7e=n(Zze,"STRONG",{});var EJt=s(o7e);nYr=r(EJt,"gpt2"),EJt.forEach(t),sYr=r(Zze," \u2014 "),$re=n(Zze,"A",{href:!0});var CJt=s($re);lYr=r(CJt,"FlaxGPT2LMHeadModel"),CJt.forEach(t),iYr=r(Zze," (OpenAI GPT-2 model)"),Zze.forEach(t),dYr=i(Ne),P6=n(Ne,"LI",{});var eWe=s(P6);r7e=n(eWe,"STRONG",{});var wJt=s(r7e);cYr=r(wJt,"gpt_neo"),wJt.forEach(t),mYr=r(eWe," \u2014 "),kre=n(eWe,"A",{href:!0});var AJt=s(kre);fYr=r(AJt,"FlaxGPTNeoForCausalLM"),AJt.forEach(t),gYr=r(eWe," (GPT Neo model)"),eWe.forEach(t),hYr=i(Ne),B6=n(Ne,"LI",{});var oWe=s(B6);t7e=n(oWe,"STRONG",{});var LJt=s(t7e);uYr=r(LJt,"gptj"),LJt.forEach(t),pYr=r(oWe," \u2014 "),Sre=n(oWe,"A",{href:!0});var yJt=s(Sre);_Yr=r(yJt,"FlaxGPTJForCausalLM"),yJt.forEach(t),bYr=r(oWe," (GPT-J model)"),oWe.forEach(t),vYr=i(Ne),I6=n(Ne,"LI",{});var rWe=s(I6);a7e=n(rWe,"STRONG",{});var xJt=s(a7e);FYr=r(xJt,"opt"),xJt.forEach(t),TYr=r(rWe," \u2014 "),Rre=n(rWe,"A",{href:!0});var $Jt=s(Rre);MYr=r($Jt,"FlaxOPTForCausalLM"),$Jt.forEach(t),EYr=r(rWe," (OPT model)"),rWe.forEach(t),CYr=i(Ne),N6=n(Ne,"LI",{});var tWe=s(N6);n7e=n(tWe,"STRONG",{});var kJt=s(n7e);wYr=r(kJt,"roberta"),kJt.forEach(t),AYr=r(tWe," \u2014 "),Pre=n(tWe,"A",{href:!0});var SJt=s(Pre);LYr=r(SJt,"FlaxRobertaForCausalLM"),SJt.forEach(t),yYr=r(tWe," (RoBERTa model)"),tWe.forEach(t),xYr=i(Ne),q6=n(Ne,"LI",{});var aWe=s(q6);s7e=n(aWe,"STRONG",{});var RJt=s(s7e);$Yr=r(RJt,"xglm"),RJt.forEach(t),kYr=r(aWe," \u2014 "),Bre=n(aWe,"A",{href:!0});var PJt=s(Bre);SYr=r(PJt,"FlaxXGLMForCausalLM"),PJt.forEach(t),RYr=r(aWe," (XGLM model)"),aWe.forEach(t),Ne.forEach(t),PYr=i(Ti),T(j6.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),gHe=i(m),Fm=n(m,"H2",{class:!0});var LYe=s(Fm);D6=n(LYe,"A",{id:!0,class:!0,href:!0});var BJt=s(D6);l7e=n(BJt,"SPAN",{});var IJt=s(l7e);T(Rk.$$.fragment,IJt),IJt.forEach(t),BJt.forEach(t),BYr=i(LYe),i7e=n(LYe,"SPAN",{});var NJt=s(i7e);IYr=r(NJt,"FlaxAutoModelForPreTraining"),NJt.forEach(t),LYe.forEach(t),hHe=i(m),Tr=n(m,"DIV",{class:!0});var Mi=s(Tr);T(Pk.$$.fragment,Mi),NYr=i(Mi),Tm=n(Mi,"P",{});var ise=s(Tm);qYr=r(ise,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Ire=n(ise,"A",{href:!0});var qJt=s(Ire);jYr=r(qJt,"from_pretrained()"),qJt.forEach(t),DYr=r(ise," class method or the "),Nre=n(ise,"A",{href:!0});var jJt=s(Nre);GYr=r(jJt,"from_config()"),jJt.forEach(t),OYr=r(ise,` class
method.`),ise.forEach(t),VYr=i(Mi),Bk=n(Mi,"P",{});var yYe=s(Bk);XYr=r(yYe,"This class cannot be instantiated directly using "),d7e=n(yYe,"CODE",{});var DJt=s(d7e);zYr=r(DJt,"__init__()"),DJt.forEach(t),WYr=r(yYe," (throws an error)."),yYe.forEach(t),QYr=i(Mi),oa=n(Mi,"DIV",{class:!0});var jy=s(oa);T(Ik.$$.fragment,jy),UYr=i(jy),c7e=n(jy,"P",{});var GJt=s(c7e);HYr=r(GJt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),GJt.forEach(t),JYr=i(jy),Mm=n(jy,"P",{});var dse=s(Mm);YYr=r(dse,`Note:
Loading a model from its configuration file does `),m7e=n(dse,"STRONG",{});var OJt=s(m7e);KYr=r(OJt,"not"),OJt.forEach(t),ZYr=r(dse,` load the model weights. It only affects the
model\u2019s configuration. Use `),qre=n(dse,"A",{href:!0});var VJt=s(qre);eKr=r(VJt,"from_pretrained()"),VJt.forEach(t),oKr=r(dse," to load the model weights."),dse.forEach(t),rKr=i(jy),T(G6.$$.fragment,jy),jy.forEach(t),tKr=i(Mi),Jr=n(Mi,"DIV",{class:!0});var Ei=s(Jr);T(Nk.$$.fragment,Ei),aKr=i(Ei),f7e=n(Ei,"P",{});var XJt=s(f7e);nKr=r(XJt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),XJt.forEach(t),sKr=i(Ei),Rn=n(Ei,"P",{});var Dy=s(Rn);lKr=r(Dy,"The model class to instantiate is selected based on the "),g7e=n(Dy,"CODE",{});var zJt=s(g7e);iKr=r(zJt,"model_type"),zJt.forEach(t),dKr=r(Dy,` property of the config object (either
passed as an argument or loaded from `),h7e=n(Dy,"CODE",{});var WJt=s(h7e);cKr=r(WJt,"pretrained_model_name_or_path"),WJt.forEach(t),mKr=r(Dy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u7e=n(Dy,"CODE",{});var QJt=s(u7e);fKr=r(QJt,"pretrained_model_name_or_path"),QJt.forEach(t),gKr=r(Dy,":"),Dy.forEach(t),hKr=i(Ei),Ee=n(Ei,"UL",{});var we=s(Ee);O6=n(we,"LI",{});var nWe=s(O6);p7e=n(nWe,"STRONG",{});var UJt=s(p7e);uKr=r(UJt,"albert"),UJt.forEach(t),pKr=r(nWe," \u2014 "),jre=n(nWe,"A",{href:!0});var HJt=s(jre);_Kr=r(HJt,"FlaxAlbertForPreTraining"),HJt.forEach(t),bKr=r(nWe," (ALBERT model)"),nWe.forEach(t),vKr=i(we),V6=n(we,"LI",{});var sWe=s(V6);_7e=n(sWe,"STRONG",{});var JJt=s(_7e);FKr=r(JJt,"bart"),JJt.forEach(t),TKr=r(sWe," \u2014 "),Dre=n(sWe,"A",{href:!0});var YJt=s(Dre);MKr=r(YJt,"FlaxBartForConditionalGeneration"),YJt.forEach(t),EKr=r(sWe," (BART model)"),sWe.forEach(t),CKr=i(we),X6=n(we,"LI",{});var lWe=s(X6);b7e=n(lWe,"STRONG",{});var KJt=s(b7e);wKr=r(KJt,"bert"),KJt.forEach(t),AKr=r(lWe," \u2014 "),Gre=n(lWe,"A",{href:!0});var ZJt=s(Gre);LKr=r(ZJt,"FlaxBertForPreTraining"),ZJt.forEach(t),yKr=r(lWe," (BERT model)"),lWe.forEach(t),xKr=i(we),z6=n(we,"LI",{});var iWe=s(z6);v7e=n(iWe,"STRONG",{});var eYt=s(v7e);$Kr=r(eYt,"big_bird"),eYt.forEach(t),kKr=r(iWe," \u2014 "),Ore=n(iWe,"A",{href:!0});var oYt=s(Ore);SKr=r(oYt,"FlaxBigBirdForPreTraining"),oYt.forEach(t),RKr=r(iWe," (BigBird model)"),iWe.forEach(t),PKr=i(we),W6=n(we,"LI",{});var dWe=s(W6);F7e=n(dWe,"STRONG",{});var rYt=s(F7e);BKr=r(rYt,"electra"),rYt.forEach(t),IKr=r(dWe," \u2014 "),Vre=n(dWe,"A",{href:!0});var tYt=s(Vre);NKr=r(tYt,"FlaxElectraForPreTraining"),tYt.forEach(t),qKr=r(dWe," (ELECTRA model)"),dWe.forEach(t),jKr=i(we),Q6=n(we,"LI",{});var cWe=s(Q6);T7e=n(cWe,"STRONG",{});var aYt=s(T7e);DKr=r(aYt,"longt5"),aYt.forEach(t),GKr=r(cWe," \u2014 "),Xre=n(cWe,"A",{href:!0});var nYt=s(Xre);OKr=r(nYt,"FlaxLongT5ForConditionalGeneration"),nYt.forEach(t),VKr=r(cWe," (LongT5 model)"),cWe.forEach(t),XKr=i(we),U6=n(we,"LI",{});var mWe=s(U6);M7e=n(mWe,"STRONG",{});var sYt=s(M7e);zKr=r(sYt,"mbart"),sYt.forEach(t),WKr=r(mWe," \u2014 "),zre=n(mWe,"A",{href:!0});var lYt=s(zre);QKr=r(lYt,"FlaxMBartForConditionalGeneration"),lYt.forEach(t),UKr=r(mWe," (mBART model)"),mWe.forEach(t),HKr=i(we),H6=n(we,"LI",{});var fWe=s(H6);E7e=n(fWe,"STRONG",{});var iYt=s(E7e);JKr=r(iYt,"mt5"),iYt.forEach(t),YKr=r(fWe," \u2014 "),Wre=n(fWe,"A",{href:!0});var dYt=s(Wre);KKr=r(dYt,"FlaxMT5ForConditionalGeneration"),dYt.forEach(t),ZKr=r(fWe," (MT5 model)"),fWe.forEach(t),eZr=i(we),J6=n(we,"LI",{});var gWe=s(J6);C7e=n(gWe,"STRONG",{});var cYt=s(C7e);oZr=r(cYt,"roberta"),cYt.forEach(t),rZr=r(gWe," \u2014 "),Qre=n(gWe,"A",{href:!0});var mYt=s(Qre);tZr=r(mYt,"FlaxRobertaForMaskedLM"),mYt.forEach(t),aZr=r(gWe," (RoBERTa model)"),gWe.forEach(t),nZr=i(we),Y6=n(we,"LI",{});var hWe=s(Y6);w7e=n(hWe,"STRONG",{});var fYt=s(w7e);sZr=r(fYt,"roformer"),fYt.forEach(t),lZr=r(hWe," \u2014 "),Ure=n(hWe,"A",{href:!0});var gYt=s(Ure);iZr=r(gYt,"FlaxRoFormerForMaskedLM"),gYt.forEach(t),dZr=r(hWe," (RoFormer model)"),hWe.forEach(t),cZr=i(we),K6=n(we,"LI",{});var uWe=s(K6);A7e=n(uWe,"STRONG",{});var hYt=s(A7e);mZr=r(hYt,"t5"),hYt.forEach(t),fZr=r(uWe," \u2014 "),Hre=n(uWe,"A",{href:!0});var uYt=s(Hre);gZr=r(uYt,"FlaxT5ForConditionalGeneration"),uYt.forEach(t),hZr=r(uWe," (T5 model)"),uWe.forEach(t),uZr=i(we),Z6=n(we,"LI",{});var pWe=s(Z6);L7e=n(pWe,"STRONG",{});var pYt=s(L7e);pZr=r(pYt,"wav2vec2"),pYt.forEach(t),_Zr=r(pWe," \u2014 "),Jre=n(pWe,"A",{href:!0});var _Yt=s(Jre);bZr=r(_Yt,"FlaxWav2Vec2ForPreTraining"),_Yt.forEach(t),vZr=r(pWe," (Wav2Vec2 model)"),pWe.forEach(t),FZr=i(we),eA=n(we,"LI",{});var _We=s(eA);y7e=n(_We,"STRONG",{});var bYt=s(y7e);TZr=r(bYt,"xlm-roberta"),bYt.forEach(t),MZr=r(_We," \u2014 "),Yre=n(_We,"A",{href:!0});var vYt=s(Yre);EZr=r(vYt,"FlaxXLMRobertaForMaskedLM"),vYt.forEach(t),CZr=r(_We," (XLM-RoBERTa model)"),_We.forEach(t),we.forEach(t),wZr=i(Ei),T(oA.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),uHe=i(m),Em=n(m,"H2",{class:!0});var xYe=s(Em);rA=n(xYe,"A",{id:!0,class:!0,href:!0});var FYt=s(rA);x7e=n(FYt,"SPAN",{});var TYt=s(x7e);T(qk.$$.fragment,TYt),TYt.forEach(t),FYt.forEach(t),AZr=i(xYe),$7e=n(xYe,"SPAN",{});var MYt=s($7e);LZr=r(MYt,"FlaxAutoModelForMaskedLM"),MYt.forEach(t),xYe.forEach(t),pHe=i(m),Mr=n(m,"DIV",{class:!0});var Ci=s(Mr);T(jk.$$.fragment,Ci),yZr=i(Ci),Cm=n(Ci,"P",{});var cse=s(Cm);xZr=r(cse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Kre=n(cse,"A",{href:!0});var EYt=s(Kre);$Zr=r(EYt,"from_pretrained()"),EYt.forEach(t),kZr=r(cse," class method or the "),Zre=n(cse,"A",{href:!0});var CYt=s(Zre);SZr=r(CYt,"from_config()"),CYt.forEach(t),RZr=r(cse,` class
method.`),cse.forEach(t),PZr=i(Ci),Dk=n(Ci,"P",{});var $Ye=s(Dk);BZr=r($Ye,"This class cannot be instantiated directly using "),k7e=n($Ye,"CODE",{});var wYt=s(k7e);IZr=r(wYt,"__init__()"),wYt.forEach(t),NZr=r($Ye," (throws an error)."),$Ye.forEach(t),qZr=i(Ci),ra=n(Ci,"DIV",{class:!0});var Gy=s(ra);T(Gk.$$.fragment,Gy),jZr=i(Gy),S7e=n(Gy,"P",{});var AYt=s(S7e);DZr=r(AYt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),AYt.forEach(t),GZr=i(Gy),wm=n(Gy,"P",{});var mse=s(wm);OZr=r(mse,`Note:
Loading a model from its configuration file does `),R7e=n(mse,"STRONG",{});var LYt=s(R7e);VZr=r(LYt,"not"),LYt.forEach(t),XZr=r(mse,` load the model weights. It only affects the
model\u2019s configuration. Use `),ete=n(mse,"A",{href:!0});var yYt=s(ete);zZr=r(yYt,"from_pretrained()"),yYt.forEach(t),WZr=r(mse," to load the model weights."),mse.forEach(t),QZr=i(Gy),T(tA.$$.fragment,Gy),Gy.forEach(t),UZr=i(Ci),Yr=n(Ci,"DIV",{class:!0});var wi=s(Yr);T(Ok.$$.fragment,wi),HZr=i(wi),P7e=n(wi,"P",{});var xYt=s(P7e);JZr=r(xYt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),xYt.forEach(t),YZr=i(wi),Pn=n(wi,"P",{});var Oy=s(Pn);KZr=r(Oy,"The model class to instantiate is selected based on the "),B7e=n(Oy,"CODE",{});var $Yt=s(B7e);ZZr=r($Yt,"model_type"),$Yt.forEach(t),eet=r(Oy,` property of the config object (either
passed as an argument or loaded from `),I7e=n(Oy,"CODE",{});var kYt=s(I7e);oet=r(kYt,"pretrained_model_name_or_path"),kYt.forEach(t),ret=r(Oy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N7e=n(Oy,"CODE",{});var SYt=s(N7e);tet=r(SYt,"pretrained_model_name_or_path"),SYt.forEach(t),aet=r(Oy,":"),Oy.forEach(t),net=i(wi),$e=n(wi,"UL",{});var qe=s($e);aA=n(qe,"LI",{});var bWe=s(aA);q7e=n(bWe,"STRONG",{});var RYt=s(q7e);set=r(RYt,"albert"),RYt.forEach(t),iet=r(bWe," \u2014 "),ote=n(bWe,"A",{href:!0});var PYt=s(ote);det=r(PYt,"FlaxAlbertForMaskedLM"),PYt.forEach(t),cet=r(bWe," (ALBERT model)"),bWe.forEach(t),met=i(qe),nA=n(qe,"LI",{});var vWe=s(nA);j7e=n(vWe,"STRONG",{});var BYt=s(j7e);fet=r(BYt,"bart"),BYt.forEach(t),get=r(vWe," \u2014 "),rte=n(vWe,"A",{href:!0});var IYt=s(rte);het=r(IYt,"FlaxBartForConditionalGeneration"),IYt.forEach(t),uet=r(vWe," (BART model)"),vWe.forEach(t),pet=i(qe),sA=n(qe,"LI",{});var FWe=s(sA);D7e=n(FWe,"STRONG",{});var NYt=s(D7e);_et=r(NYt,"bert"),NYt.forEach(t),bet=r(FWe," \u2014 "),tte=n(FWe,"A",{href:!0});var qYt=s(tte);vet=r(qYt,"FlaxBertForMaskedLM"),qYt.forEach(t),Fet=r(FWe," (BERT model)"),FWe.forEach(t),Tet=i(qe),lA=n(qe,"LI",{});var TWe=s(lA);G7e=n(TWe,"STRONG",{});var jYt=s(G7e);Met=r(jYt,"big_bird"),jYt.forEach(t),Eet=r(TWe," \u2014 "),ate=n(TWe,"A",{href:!0});var DYt=s(ate);Cet=r(DYt,"FlaxBigBirdForMaskedLM"),DYt.forEach(t),wet=r(TWe," (BigBird model)"),TWe.forEach(t),Aet=i(qe),iA=n(qe,"LI",{});var MWe=s(iA);O7e=n(MWe,"STRONG",{});var GYt=s(O7e);Let=r(GYt,"distilbert"),GYt.forEach(t),yet=r(MWe," \u2014 "),nte=n(MWe,"A",{href:!0});var OYt=s(nte);xet=r(OYt,"FlaxDistilBertForMaskedLM"),OYt.forEach(t),$et=r(MWe," (DistilBERT model)"),MWe.forEach(t),ket=i(qe),dA=n(qe,"LI",{});var EWe=s(dA);V7e=n(EWe,"STRONG",{});var VYt=s(V7e);Set=r(VYt,"electra"),VYt.forEach(t),Ret=r(EWe," \u2014 "),ste=n(EWe,"A",{href:!0});var XYt=s(ste);Pet=r(XYt,"FlaxElectraForMaskedLM"),XYt.forEach(t),Bet=r(EWe," (ELECTRA model)"),EWe.forEach(t),Iet=i(qe),cA=n(qe,"LI",{});var CWe=s(cA);X7e=n(CWe,"STRONG",{});var zYt=s(X7e);Net=r(zYt,"mbart"),zYt.forEach(t),qet=r(CWe," \u2014 "),lte=n(CWe,"A",{href:!0});var WYt=s(lte);jet=r(WYt,"FlaxMBartForConditionalGeneration"),WYt.forEach(t),Det=r(CWe," (mBART model)"),CWe.forEach(t),Get=i(qe),mA=n(qe,"LI",{});var wWe=s(mA);z7e=n(wWe,"STRONG",{});var QYt=s(z7e);Oet=r(QYt,"roberta"),QYt.forEach(t),Vet=r(wWe," \u2014 "),ite=n(wWe,"A",{href:!0});var UYt=s(ite);Xet=r(UYt,"FlaxRobertaForMaskedLM"),UYt.forEach(t),zet=r(wWe," (RoBERTa model)"),wWe.forEach(t),Wet=i(qe),fA=n(qe,"LI",{});var AWe=s(fA);W7e=n(AWe,"STRONG",{});var HYt=s(W7e);Qet=r(HYt,"roformer"),HYt.forEach(t),Uet=r(AWe," \u2014 "),dte=n(AWe,"A",{href:!0});var JYt=s(dte);Het=r(JYt,"FlaxRoFormerForMaskedLM"),JYt.forEach(t),Jet=r(AWe," (RoFormer model)"),AWe.forEach(t),Yet=i(qe),gA=n(qe,"LI",{});var LWe=s(gA);Q7e=n(LWe,"STRONG",{});var YYt=s(Q7e);Ket=r(YYt,"xlm-roberta"),YYt.forEach(t),Zet=r(LWe," \u2014 "),cte=n(LWe,"A",{href:!0});var KYt=s(cte);eot=r(KYt,"FlaxXLMRobertaForMaskedLM"),KYt.forEach(t),oot=r(LWe," (XLM-RoBERTa model)"),LWe.forEach(t),qe.forEach(t),rot=i(wi),T(hA.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),_He=i(m),Am=n(m,"H2",{class:!0});var kYe=s(Am);uA=n(kYe,"A",{id:!0,class:!0,href:!0});var ZYt=s(uA);U7e=n(ZYt,"SPAN",{});var eKt=s(U7e);T(Vk.$$.fragment,eKt),eKt.forEach(t),ZYt.forEach(t),tot=i(kYe),H7e=n(kYe,"SPAN",{});var oKt=s(H7e);aot=r(oKt,"FlaxAutoModelForSeq2SeqLM"),oKt.forEach(t),kYe.forEach(t),bHe=i(m),Er=n(m,"DIV",{class:!0});var Ai=s(Er);T(Xk.$$.fragment,Ai),not=i(Ai),Lm=n(Ai,"P",{});var fse=s(Lm);sot=r(fse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),mte=n(fse,"A",{href:!0});var rKt=s(mte);lot=r(rKt,"from_pretrained()"),rKt.forEach(t),iot=r(fse," class method or the "),fte=n(fse,"A",{href:!0});var tKt=s(fte);dot=r(tKt,"from_config()"),tKt.forEach(t),cot=r(fse,` class
method.`),fse.forEach(t),mot=i(Ai),zk=n(Ai,"P",{});var SYe=s(zk);fot=r(SYe,"This class cannot be instantiated directly using "),J7e=n(SYe,"CODE",{});var aKt=s(J7e);got=r(aKt,"__init__()"),aKt.forEach(t),hot=r(SYe," (throws an error)."),SYe.forEach(t),uot=i(Ai),ta=n(Ai,"DIV",{class:!0});var Vy=s(ta);T(Wk.$$.fragment,Vy),pot=i(Vy),Y7e=n(Vy,"P",{});var nKt=s(Y7e);_ot=r(nKt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),nKt.forEach(t),bot=i(Vy),ym=n(Vy,"P",{});var gse=s(ym);vot=r(gse,`Note:
Loading a model from its configuration file does `),K7e=n(gse,"STRONG",{});var sKt=s(K7e);Fot=r(sKt,"not"),sKt.forEach(t),Tot=r(gse,` load the model weights. It only affects the
model\u2019s configuration. Use `),gte=n(gse,"A",{href:!0});var lKt=s(gte);Mot=r(lKt,"from_pretrained()"),lKt.forEach(t),Eot=r(gse," to load the model weights."),gse.forEach(t),Cot=i(Vy),T(pA.$$.fragment,Vy),Vy.forEach(t),wot=i(Ai),Kr=n(Ai,"DIV",{class:!0});var Li=s(Kr);T(Qk.$$.fragment,Li),Aot=i(Li),Z7e=n(Li,"P",{});var iKt=s(Z7e);Lot=r(iKt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),iKt.forEach(t),yot=i(Li),Bn=n(Li,"P",{});var Xy=s(Bn);xot=r(Xy,"The model class to instantiate is selected based on the "),eLe=n(Xy,"CODE",{});var dKt=s(eLe);$ot=r(dKt,"model_type"),dKt.forEach(t),kot=r(Xy,` property of the config object (either
passed as an argument or loaded from `),oLe=n(Xy,"CODE",{});var cKt=s(oLe);Sot=r(cKt,"pretrained_model_name_or_path"),cKt.forEach(t),Rot=r(Xy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rLe=n(Xy,"CODE",{});var mKt=s(rLe);Pot=r(mKt,"pretrained_model_name_or_path"),mKt.forEach(t),Bot=r(Xy,":"),Xy.forEach(t),Iot=i(Li),ke=n(Li,"UL",{});var je=s(ke);_A=n(je,"LI",{});var yWe=s(_A);tLe=n(yWe,"STRONG",{});var fKt=s(tLe);Not=r(fKt,"bart"),fKt.forEach(t),qot=r(yWe," \u2014 "),hte=n(yWe,"A",{href:!0});var gKt=s(hte);jot=r(gKt,"FlaxBartForConditionalGeneration"),gKt.forEach(t),Dot=r(yWe," (BART model)"),yWe.forEach(t),Got=i(je),bA=n(je,"LI",{});var xWe=s(bA);aLe=n(xWe,"STRONG",{});var hKt=s(aLe);Oot=r(hKt,"blenderbot"),hKt.forEach(t),Vot=r(xWe," \u2014 "),ute=n(xWe,"A",{href:!0});var uKt=s(ute);Xot=r(uKt,"FlaxBlenderbotForConditionalGeneration"),uKt.forEach(t),zot=r(xWe," (Blenderbot model)"),xWe.forEach(t),Wot=i(je),vA=n(je,"LI",{});var $We=s(vA);nLe=n($We,"STRONG",{});var pKt=s(nLe);Qot=r(pKt,"blenderbot-small"),pKt.forEach(t),Uot=r($We," \u2014 "),pte=n($We,"A",{href:!0});var _Kt=s(pte);Hot=r(_Kt,"FlaxBlenderbotSmallForConditionalGeneration"),_Kt.forEach(t),Jot=r($We," (BlenderbotSmall model)"),$We.forEach(t),Yot=i(je),FA=n(je,"LI",{});var kWe=s(FA);sLe=n(kWe,"STRONG",{});var bKt=s(sLe);Kot=r(bKt,"encoder-decoder"),bKt.forEach(t),Zot=r(kWe," \u2014 "),_te=n(kWe,"A",{href:!0});var vKt=s(_te);ert=r(vKt,"FlaxEncoderDecoderModel"),vKt.forEach(t),ort=r(kWe," (Encoder decoder model)"),kWe.forEach(t),rrt=i(je),TA=n(je,"LI",{});var SWe=s(TA);lLe=n(SWe,"STRONG",{});var FKt=s(lLe);trt=r(FKt,"longt5"),FKt.forEach(t),art=r(SWe," \u2014 "),bte=n(SWe,"A",{href:!0});var TKt=s(bte);nrt=r(TKt,"FlaxLongT5ForConditionalGeneration"),TKt.forEach(t),srt=r(SWe," (LongT5 model)"),SWe.forEach(t),lrt=i(je),MA=n(je,"LI",{});var RWe=s(MA);iLe=n(RWe,"STRONG",{});var MKt=s(iLe);irt=r(MKt,"marian"),MKt.forEach(t),drt=r(RWe," \u2014 "),vte=n(RWe,"A",{href:!0});var EKt=s(vte);crt=r(EKt,"FlaxMarianMTModel"),EKt.forEach(t),mrt=r(RWe," (Marian model)"),RWe.forEach(t),frt=i(je),EA=n(je,"LI",{});var PWe=s(EA);dLe=n(PWe,"STRONG",{});var CKt=s(dLe);grt=r(CKt,"mbart"),CKt.forEach(t),hrt=r(PWe," \u2014 "),Fte=n(PWe,"A",{href:!0});var wKt=s(Fte);urt=r(wKt,"FlaxMBartForConditionalGeneration"),wKt.forEach(t),prt=r(PWe," (mBART model)"),PWe.forEach(t),_rt=i(je),CA=n(je,"LI",{});var BWe=s(CA);cLe=n(BWe,"STRONG",{});var AKt=s(cLe);brt=r(AKt,"mt5"),AKt.forEach(t),vrt=r(BWe," \u2014 "),Tte=n(BWe,"A",{href:!0});var LKt=s(Tte);Frt=r(LKt,"FlaxMT5ForConditionalGeneration"),LKt.forEach(t),Trt=r(BWe," (MT5 model)"),BWe.forEach(t),Mrt=i(je),wA=n(je,"LI",{});var IWe=s(wA);mLe=n(IWe,"STRONG",{});var yKt=s(mLe);Ert=r(yKt,"pegasus"),yKt.forEach(t),Crt=r(IWe," \u2014 "),Mte=n(IWe,"A",{href:!0});var xKt=s(Mte);wrt=r(xKt,"FlaxPegasusForConditionalGeneration"),xKt.forEach(t),Art=r(IWe," (Pegasus model)"),IWe.forEach(t),Lrt=i(je),AA=n(je,"LI",{});var NWe=s(AA);fLe=n(NWe,"STRONG",{});var $Kt=s(fLe);yrt=r($Kt,"t5"),$Kt.forEach(t),xrt=r(NWe," \u2014 "),Ete=n(NWe,"A",{href:!0});var kKt=s(Ete);$rt=r(kKt,"FlaxT5ForConditionalGeneration"),kKt.forEach(t),krt=r(NWe," (T5 model)"),NWe.forEach(t),je.forEach(t),Srt=i(Li),T(LA.$$.fragment,Li),Li.forEach(t),Ai.forEach(t),vHe=i(m),xm=n(m,"H2",{class:!0});var RYe=s(xm);yA=n(RYe,"A",{id:!0,class:!0,href:!0});var SKt=s(yA);gLe=n(SKt,"SPAN",{});var RKt=s(gLe);T(Uk.$$.fragment,RKt),RKt.forEach(t),SKt.forEach(t),Rrt=i(RYe),hLe=n(RYe,"SPAN",{});var PKt=s(hLe);Prt=r(PKt,"FlaxAutoModelForSequenceClassification"),PKt.forEach(t),RYe.forEach(t),FHe=i(m),Cr=n(m,"DIV",{class:!0});var yi=s(Cr);T(Hk.$$.fragment,yi),Brt=i(yi),$m=n(yi,"P",{});var hse=s($m);Irt=r(hse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Cte=n(hse,"A",{href:!0});var BKt=s(Cte);Nrt=r(BKt,"from_pretrained()"),BKt.forEach(t),qrt=r(hse," class method or the "),wte=n(hse,"A",{href:!0});var IKt=s(wte);jrt=r(IKt,"from_config()"),IKt.forEach(t),Drt=r(hse,` class
method.`),hse.forEach(t),Grt=i(yi),Jk=n(yi,"P",{});var PYe=s(Jk);Ort=r(PYe,"This class cannot be instantiated directly using "),uLe=n(PYe,"CODE",{});var NKt=s(uLe);Vrt=r(NKt,"__init__()"),NKt.forEach(t),Xrt=r(PYe," (throws an error)."),PYe.forEach(t),zrt=i(yi),aa=n(yi,"DIV",{class:!0});var zy=s(aa);T(Yk.$$.fragment,zy),Wrt=i(zy),pLe=n(zy,"P",{});var qKt=s(pLe);Qrt=r(qKt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),qKt.forEach(t),Urt=i(zy),km=n(zy,"P",{});var use=s(km);Hrt=r(use,`Note:
Loading a model from its configuration file does `),_Le=n(use,"STRONG",{});var jKt=s(_Le);Jrt=r(jKt,"not"),jKt.forEach(t),Yrt=r(use,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ate=n(use,"A",{href:!0});var DKt=s(Ate);Krt=r(DKt,"from_pretrained()"),DKt.forEach(t),Zrt=r(use," to load the model weights."),use.forEach(t),ett=i(zy),T(xA.$$.fragment,zy),zy.forEach(t),ott=i(yi),Zr=n(yi,"DIV",{class:!0});var xi=s(Zr);T(Kk.$$.fragment,xi),rtt=i(xi),bLe=n(xi,"P",{});var GKt=s(bLe);ttt=r(GKt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),GKt.forEach(t),att=i(xi),In=n(xi,"P",{});var Wy=s(In);ntt=r(Wy,"The model class to instantiate is selected based on the "),vLe=n(Wy,"CODE",{});var OKt=s(vLe);stt=r(OKt,"model_type"),OKt.forEach(t),ltt=r(Wy,` property of the config object (either
passed as an argument or loaded from `),FLe=n(Wy,"CODE",{});var VKt=s(FLe);itt=r(VKt,"pretrained_model_name_or_path"),VKt.forEach(t),dtt=r(Wy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TLe=n(Wy,"CODE",{});var XKt=s(TLe);ctt=r(XKt,"pretrained_model_name_or_path"),XKt.forEach(t),mtt=r(Wy,":"),Wy.forEach(t),ftt=i(xi),Se=n(xi,"UL",{});var De=s(Se);$A=n(De,"LI",{});var qWe=s($A);MLe=n(qWe,"STRONG",{});var zKt=s(MLe);gtt=r(zKt,"albert"),zKt.forEach(t),htt=r(qWe," \u2014 "),Lte=n(qWe,"A",{href:!0});var WKt=s(Lte);utt=r(WKt,"FlaxAlbertForSequenceClassification"),WKt.forEach(t),ptt=r(qWe," (ALBERT model)"),qWe.forEach(t),_tt=i(De),kA=n(De,"LI",{});var jWe=s(kA);ELe=n(jWe,"STRONG",{});var QKt=s(ELe);btt=r(QKt,"bart"),QKt.forEach(t),vtt=r(jWe," \u2014 "),yte=n(jWe,"A",{href:!0});var UKt=s(yte);Ftt=r(UKt,"FlaxBartForSequenceClassification"),UKt.forEach(t),Ttt=r(jWe," (BART model)"),jWe.forEach(t),Mtt=i(De),SA=n(De,"LI",{});var DWe=s(SA);CLe=n(DWe,"STRONG",{});var HKt=s(CLe);Ett=r(HKt,"bert"),HKt.forEach(t),Ctt=r(DWe," \u2014 "),xte=n(DWe,"A",{href:!0});var JKt=s(xte);wtt=r(JKt,"FlaxBertForSequenceClassification"),JKt.forEach(t),Att=r(DWe," (BERT model)"),DWe.forEach(t),Ltt=i(De),RA=n(De,"LI",{});var GWe=s(RA);wLe=n(GWe,"STRONG",{});var YKt=s(wLe);ytt=r(YKt,"big_bird"),YKt.forEach(t),xtt=r(GWe," \u2014 "),$te=n(GWe,"A",{href:!0});var KKt=s($te);$tt=r(KKt,"FlaxBigBirdForSequenceClassification"),KKt.forEach(t),ktt=r(GWe," (BigBird model)"),GWe.forEach(t),Stt=i(De),PA=n(De,"LI",{});var OWe=s(PA);ALe=n(OWe,"STRONG",{});var ZKt=s(ALe);Rtt=r(ZKt,"distilbert"),ZKt.forEach(t),Ptt=r(OWe," \u2014 "),kte=n(OWe,"A",{href:!0});var eZt=s(kte);Btt=r(eZt,"FlaxDistilBertForSequenceClassification"),eZt.forEach(t),Itt=r(OWe," (DistilBERT model)"),OWe.forEach(t),Ntt=i(De),BA=n(De,"LI",{});var VWe=s(BA);LLe=n(VWe,"STRONG",{});var oZt=s(LLe);qtt=r(oZt,"electra"),oZt.forEach(t),jtt=r(VWe," \u2014 "),Ste=n(VWe,"A",{href:!0});var rZt=s(Ste);Dtt=r(rZt,"FlaxElectraForSequenceClassification"),rZt.forEach(t),Gtt=r(VWe," (ELECTRA model)"),VWe.forEach(t),Ott=i(De),IA=n(De,"LI",{});var XWe=s(IA);yLe=n(XWe,"STRONG",{});var tZt=s(yLe);Vtt=r(tZt,"mbart"),tZt.forEach(t),Xtt=r(XWe," \u2014 "),Rte=n(XWe,"A",{href:!0});var aZt=s(Rte);ztt=r(aZt,"FlaxMBartForSequenceClassification"),aZt.forEach(t),Wtt=r(XWe," (mBART model)"),XWe.forEach(t),Qtt=i(De),NA=n(De,"LI",{});var zWe=s(NA);xLe=n(zWe,"STRONG",{});var nZt=s(xLe);Utt=r(nZt,"roberta"),nZt.forEach(t),Htt=r(zWe," \u2014 "),Pte=n(zWe,"A",{href:!0});var sZt=s(Pte);Jtt=r(sZt,"FlaxRobertaForSequenceClassification"),sZt.forEach(t),Ytt=r(zWe," (RoBERTa model)"),zWe.forEach(t),Ktt=i(De),qA=n(De,"LI",{});var WWe=s(qA);$Le=n(WWe,"STRONG",{});var lZt=s($Le);Ztt=r(lZt,"roformer"),lZt.forEach(t),eat=r(WWe," \u2014 "),Bte=n(WWe,"A",{href:!0});var iZt=s(Bte);oat=r(iZt,"FlaxRoFormerForSequenceClassification"),iZt.forEach(t),rat=r(WWe," (RoFormer model)"),WWe.forEach(t),tat=i(De),jA=n(De,"LI",{});var QWe=s(jA);kLe=n(QWe,"STRONG",{});var dZt=s(kLe);aat=r(dZt,"xlm-roberta"),dZt.forEach(t),nat=r(QWe," \u2014 "),Ite=n(QWe,"A",{href:!0});var cZt=s(Ite);sat=r(cZt,"FlaxXLMRobertaForSequenceClassification"),cZt.forEach(t),lat=r(QWe," (XLM-RoBERTa model)"),QWe.forEach(t),De.forEach(t),iat=i(xi),T(DA.$$.fragment,xi),xi.forEach(t),yi.forEach(t),THe=i(m),Sm=n(m,"H2",{class:!0});var BYe=s(Sm);GA=n(BYe,"A",{id:!0,class:!0,href:!0});var mZt=s(GA);SLe=n(mZt,"SPAN",{});var fZt=s(SLe);T(Zk.$$.fragment,fZt),fZt.forEach(t),mZt.forEach(t),dat=i(BYe),RLe=n(BYe,"SPAN",{});var gZt=s(RLe);cat=r(gZt,"FlaxAutoModelForQuestionAnswering"),gZt.forEach(t),BYe.forEach(t),MHe=i(m),wr=n(m,"DIV",{class:!0});var $i=s(wr);T(eS.$$.fragment,$i),mat=i($i),Rm=n($i,"P",{});var pse=s(Rm);fat=r(pse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Nte=n(pse,"A",{href:!0});var hZt=s(Nte);gat=r(hZt,"from_pretrained()"),hZt.forEach(t),hat=r(pse," class method or the "),qte=n(pse,"A",{href:!0});var uZt=s(qte);uat=r(uZt,"from_config()"),uZt.forEach(t),pat=r(pse,` class
method.`),pse.forEach(t),_at=i($i),oS=n($i,"P",{});var IYe=s(oS);bat=r(IYe,"This class cannot be instantiated directly using "),PLe=n(IYe,"CODE",{});var pZt=s(PLe);vat=r(pZt,"__init__()"),pZt.forEach(t),Fat=r(IYe," (throws an error)."),IYe.forEach(t),Tat=i($i),na=n($i,"DIV",{class:!0});var Qy=s(na);T(rS.$$.fragment,Qy),Mat=i(Qy),BLe=n(Qy,"P",{});var _Zt=s(BLe);Eat=r(_Zt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),_Zt.forEach(t),Cat=i(Qy),Pm=n(Qy,"P",{});var _se=s(Pm);wat=r(_se,`Note:
Loading a model from its configuration file does `),ILe=n(_se,"STRONG",{});var bZt=s(ILe);Aat=r(bZt,"not"),bZt.forEach(t),Lat=r(_se,` load the model weights. It only affects the
model\u2019s configuration. Use `),jte=n(_se,"A",{href:!0});var vZt=s(jte);yat=r(vZt,"from_pretrained()"),vZt.forEach(t),xat=r(_se," to load the model weights."),_se.forEach(t),$at=i(Qy),T(OA.$$.fragment,Qy),Qy.forEach(t),kat=i($i),et=n($i,"DIV",{class:!0});var ki=s(et);T(tS.$$.fragment,ki),Sat=i(ki),NLe=n(ki,"P",{});var FZt=s(NLe);Rat=r(FZt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),FZt.forEach(t),Pat=i(ki),Nn=n(ki,"P",{});var Uy=s(Nn);Bat=r(Uy,"The model class to instantiate is selected based on the "),qLe=n(Uy,"CODE",{});var TZt=s(qLe);Iat=r(TZt,"model_type"),TZt.forEach(t),Nat=r(Uy,` property of the config object (either
passed as an argument or loaded from `),jLe=n(Uy,"CODE",{});var MZt=s(jLe);qat=r(MZt,"pretrained_model_name_or_path"),MZt.forEach(t),jat=r(Uy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DLe=n(Uy,"CODE",{});var EZt=s(DLe);Dat=r(EZt,"pretrained_model_name_or_path"),EZt.forEach(t),Gat=r(Uy,":"),Uy.forEach(t),Oat=i(ki),Re=n(ki,"UL",{});var Ge=s(Re);VA=n(Ge,"LI",{});var UWe=s(VA);GLe=n(UWe,"STRONG",{});var CZt=s(GLe);Vat=r(CZt,"albert"),CZt.forEach(t),Xat=r(UWe," \u2014 "),Dte=n(UWe,"A",{href:!0});var wZt=s(Dte);zat=r(wZt,"FlaxAlbertForQuestionAnswering"),wZt.forEach(t),Wat=r(UWe," (ALBERT model)"),UWe.forEach(t),Qat=i(Ge),XA=n(Ge,"LI",{});var HWe=s(XA);OLe=n(HWe,"STRONG",{});var AZt=s(OLe);Uat=r(AZt,"bart"),AZt.forEach(t),Hat=r(HWe," \u2014 "),Gte=n(HWe,"A",{href:!0});var LZt=s(Gte);Jat=r(LZt,"FlaxBartForQuestionAnswering"),LZt.forEach(t),Yat=r(HWe," (BART model)"),HWe.forEach(t),Kat=i(Ge),zA=n(Ge,"LI",{});var JWe=s(zA);VLe=n(JWe,"STRONG",{});var yZt=s(VLe);Zat=r(yZt,"bert"),yZt.forEach(t),ent=r(JWe," \u2014 "),Ote=n(JWe,"A",{href:!0});var xZt=s(Ote);ont=r(xZt,"FlaxBertForQuestionAnswering"),xZt.forEach(t),rnt=r(JWe," (BERT model)"),JWe.forEach(t),tnt=i(Ge),WA=n(Ge,"LI",{});var YWe=s(WA);XLe=n(YWe,"STRONG",{});var $Zt=s(XLe);ant=r($Zt,"big_bird"),$Zt.forEach(t),nnt=r(YWe," \u2014 "),Vte=n(YWe,"A",{href:!0});var kZt=s(Vte);snt=r(kZt,"FlaxBigBirdForQuestionAnswering"),kZt.forEach(t),lnt=r(YWe," (BigBird model)"),YWe.forEach(t),int=i(Ge),QA=n(Ge,"LI",{});var KWe=s(QA);zLe=n(KWe,"STRONG",{});var SZt=s(zLe);dnt=r(SZt,"distilbert"),SZt.forEach(t),cnt=r(KWe," \u2014 "),Xte=n(KWe,"A",{href:!0});var RZt=s(Xte);mnt=r(RZt,"FlaxDistilBertForQuestionAnswering"),RZt.forEach(t),fnt=r(KWe," (DistilBERT model)"),KWe.forEach(t),gnt=i(Ge),UA=n(Ge,"LI",{});var ZWe=s(UA);WLe=n(ZWe,"STRONG",{});var PZt=s(WLe);hnt=r(PZt,"electra"),PZt.forEach(t),unt=r(ZWe," \u2014 "),zte=n(ZWe,"A",{href:!0});var BZt=s(zte);pnt=r(BZt,"FlaxElectraForQuestionAnswering"),BZt.forEach(t),_nt=r(ZWe," (ELECTRA model)"),ZWe.forEach(t),bnt=i(Ge),HA=n(Ge,"LI",{});var eQe=s(HA);QLe=n(eQe,"STRONG",{});var IZt=s(QLe);vnt=r(IZt,"mbart"),IZt.forEach(t),Fnt=r(eQe," \u2014 "),Wte=n(eQe,"A",{href:!0});var NZt=s(Wte);Tnt=r(NZt,"FlaxMBartForQuestionAnswering"),NZt.forEach(t),Mnt=r(eQe," (mBART model)"),eQe.forEach(t),Ent=i(Ge),JA=n(Ge,"LI",{});var oQe=s(JA);ULe=n(oQe,"STRONG",{});var qZt=s(ULe);Cnt=r(qZt,"roberta"),qZt.forEach(t),wnt=r(oQe," \u2014 "),Qte=n(oQe,"A",{href:!0});var jZt=s(Qte);Ant=r(jZt,"FlaxRobertaForQuestionAnswering"),jZt.forEach(t),Lnt=r(oQe," (RoBERTa model)"),oQe.forEach(t),ynt=i(Ge),YA=n(Ge,"LI",{});var rQe=s(YA);HLe=n(rQe,"STRONG",{});var DZt=s(HLe);xnt=r(DZt,"roformer"),DZt.forEach(t),$nt=r(rQe," \u2014 "),Ute=n(rQe,"A",{href:!0});var GZt=s(Ute);knt=r(GZt,"FlaxRoFormerForQuestionAnswering"),GZt.forEach(t),Snt=r(rQe," (RoFormer model)"),rQe.forEach(t),Rnt=i(Ge),KA=n(Ge,"LI",{});var tQe=s(KA);JLe=n(tQe,"STRONG",{});var OZt=s(JLe);Pnt=r(OZt,"xlm-roberta"),OZt.forEach(t),Bnt=r(tQe," \u2014 "),Hte=n(tQe,"A",{href:!0});var VZt=s(Hte);Int=r(VZt,"FlaxXLMRobertaForQuestionAnswering"),VZt.forEach(t),Nnt=r(tQe," (XLM-RoBERTa model)"),tQe.forEach(t),Ge.forEach(t),qnt=i(ki),T(ZA.$$.fragment,ki),ki.forEach(t),$i.forEach(t),EHe=i(m),Bm=n(m,"H2",{class:!0});var NYe=s(Bm);e7=n(NYe,"A",{id:!0,class:!0,href:!0});var XZt=s(e7);YLe=n(XZt,"SPAN",{});var zZt=s(YLe);T(aS.$$.fragment,zZt),zZt.forEach(t),XZt.forEach(t),jnt=i(NYe),KLe=n(NYe,"SPAN",{});var WZt=s(KLe);Dnt=r(WZt,"FlaxAutoModelForTokenClassification"),WZt.forEach(t),NYe.forEach(t),CHe=i(m),Ar=n(m,"DIV",{class:!0});var Si=s(Ar);T(nS.$$.fragment,Si),Gnt=i(Si),Im=n(Si,"P",{});var bse=s(Im);Ont=r(bse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Jte=n(bse,"A",{href:!0});var QZt=s(Jte);Vnt=r(QZt,"from_pretrained()"),QZt.forEach(t),Xnt=r(bse," class method or the "),Yte=n(bse,"A",{href:!0});var UZt=s(Yte);znt=r(UZt,"from_config()"),UZt.forEach(t),Wnt=r(bse,` class
method.`),bse.forEach(t),Qnt=i(Si),sS=n(Si,"P",{});var qYe=s(sS);Unt=r(qYe,"This class cannot be instantiated directly using "),ZLe=n(qYe,"CODE",{});var HZt=s(ZLe);Hnt=r(HZt,"__init__()"),HZt.forEach(t),Jnt=r(qYe," (throws an error)."),qYe.forEach(t),Ynt=i(Si),sa=n(Si,"DIV",{class:!0});var Hy=s(sa);T(lS.$$.fragment,Hy),Knt=i(Hy),eye=n(Hy,"P",{});var JZt=s(eye);Znt=r(JZt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),JZt.forEach(t),est=i(Hy),Nm=n(Hy,"P",{});var vse=s(Nm);ost=r(vse,`Note:
Loading a model from its configuration file does `),oye=n(vse,"STRONG",{});var YZt=s(oye);rst=r(YZt,"not"),YZt.forEach(t),tst=r(vse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kte=n(vse,"A",{href:!0});var KZt=s(Kte);ast=r(KZt,"from_pretrained()"),KZt.forEach(t),nst=r(vse," to load the model weights."),vse.forEach(t),sst=i(Hy),T(o7.$$.fragment,Hy),Hy.forEach(t),lst=i(Si),ot=n(Si,"DIV",{class:!0});var Ri=s(ot);T(iS.$$.fragment,Ri),ist=i(Ri),rye=n(Ri,"P",{});var ZZt=s(rye);dst=r(ZZt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ZZt.forEach(t),cst=i(Ri),qn=n(Ri,"P",{});var Jy=s(qn);mst=r(Jy,"The model class to instantiate is selected based on the "),tye=n(Jy,"CODE",{});var eea=s(tye);fst=r(eea,"model_type"),eea.forEach(t),gst=r(Jy,` property of the config object (either
passed as an argument or loaded from `),aye=n(Jy,"CODE",{});var oea=s(aye);hst=r(oea,"pretrained_model_name_or_path"),oea.forEach(t),ust=r(Jy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nye=n(Jy,"CODE",{});var rea=s(nye);pst=r(rea,"pretrained_model_name_or_path"),rea.forEach(t),_st=r(Jy,":"),Jy.forEach(t),bst=i(Ri),Xe=n(Ri,"UL",{});var Co=s(Xe);r7=n(Co,"LI",{});var aQe=s(r7);sye=n(aQe,"STRONG",{});var tea=s(sye);vst=r(tea,"albert"),tea.forEach(t),Fst=r(aQe," \u2014 "),Zte=n(aQe,"A",{href:!0});var aea=s(Zte);Tst=r(aea,"FlaxAlbertForTokenClassification"),aea.forEach(t),Mst=r(aQe," (ALBERT model)"),aQe.forEach(t),Est=i(Co),t7=n(Co,"LI",{});var nQe=s(t7);lye=n(nQe,"STRONG",{});var nea=s(lye);Cst=r(nea,"bert"),nea.forEach(t),wst=r(nQe," \u2014 "),eae=n(nQe,"A",{href:!0});var sea=s(eae);Ast=r(sea,"FlaxBertForTokenClassification"),sea.forEach(t),Lst=r(nQe," (BERT model)"),nQe.forEach(t),yst=i(Co),a7=n(Co,"LI",{});var sQe=s(a7);iye=n(sQe,"STRONG",{});var lea=s(iye);xst=r(lea,"big_bird"),lea.forEach(t),$st=r(sQe," \u2014 "),oae=n(sQe,"A",{href:!0});var iea=s(oae);kst=r(iea,"FlaxBigBirdForTokenClassification"),iea.forEach(t),Sst=r(sQe," (BigBird model)"),sQe.forEach(t),Rst=i(Co),n7=n(Co,"LI",{});var lQe=s(n7);dye=n(lQe,"STRONG",{});var dea=s(dye);Pst=r(dea,"distilbert"),dea.forEach(t),Bst=r(lQe," \u2014 "),rae=n(lQe,"A",{href:!0});var cea=s(rae);Ist=r(cea,"FlaxDistilBertForTokenClassification"),cea.forEach(t),Nst=r(lQe," (DistilBERT model)"),lQe.forEach(t),qst=i(Co),s7=n(Co,"LI",{});var iQe=s(s7);cye=n(iQe,"STRONG",{});var mea=s(cye);jst=r(mea,"electra"),mea.forEach(t),Dst=r(iQe," \u2014 "),tae=n(iQe,"A",{href:!0});var fea=s(tae);Gst=r(fea,"FlaxElectraForTokenClassification"),fea.forEach(t),Ost=r(iQe," (ELECTRA model)"),iQe.forEach(t),Vst=i(Co),l7=n(Co,"LI",{});var dQe=s(l7);mye=n(dQe,"STRONG",{});var gea=s(mye);Xst=r(gea,"roberta"),gea.forEach(t),zst=r(dQe," \u2014 "),aae=n(dQe,"A",{href:!0});var hea=s(aae);Wst=r(hea,"FlaxRobertaForTokenClassification"),hea.forEach(t),Qst=r(dQe," (RoBERTa model)"),dQe.forEach(t),Ust=i(Co),i7=n(Co,"LI",{});var cQe=s(i7);fye=n(cQe,"STRONG",{});var uea=s(fye);Hst=r(uea,"roformer"),uea.forEach(t),Jst=r(cQe," \u2014 "),nae=n(cQe,"A",{href:!0});var pea=s(nae);Yst=r(pea,"FlaxRoFormerForTokenClassification"),pea.forEach(t),Kst=r(cQe," (RoFormer model)"),cQe.forEach(t),Zst=i(Co),d7=n(Co,"LI",{});var mQe=s(d7);gye=n(mQe,"STRONG",{});var _ea=s(gye);elt=r(_ea,"xlm-roberta"),_ea.forEach(t),olt=r(mQe," \u2014 "),sae=n(mQe,"A",{href:!0});var bea=s(sae);rlt=r(bea,"FlaxXLMRobertaForTokenClassification"),bea.forEach(t),tlt=r(mQe," (XLM-RoBERTa model)"),mQe.forEach(t),Co.forEach(t),alt=i(Ri),T(c7.$$.fragment,Ri),Ri.forEach(t),Si.forEach(t),wHe=i(m),qm=n(m,"H2",{class:!0});var jYe=s(qm);m7=n(jYe,"A",{id:!0,class:!0,href:!0});var vea=s(m7);hye=n(vea,"SPAN",{});var Fea=s(hye);T(dS.$$.fragment,Fea),Fea.forEach(t),vea.forEach(t),nlt=i(jYe),uye=n(jYe,"SPAN",{});var Tea=s(uye);slt=r(Tea,"FlaxAutoModelForMultipleChoice"),Tea.forEach(t),jYe.forEach(t),AHe=i(m),Lr=n(m,"DIV",{class:!0});var Pi=s(Lr);T(cS.$$.fragment,Pi),llt=i(Pi),jm=n(Pi,"P",{});var Fse=s(jm);ilt=r(Fse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),lae=n(Fse,"A",{href:!0});var Mea=s(lae);dlt=r(Mea,"from_pretrained()"),Mea.forEach(t),clt=r(Fse," class method or the "),iae=n(Fse,"A",{href:!0});var Eea=s(iae);mlt=r(Eea,"from_config()"),Eea.forEach(t),flt=r(Fse,` class
method.`),Fse.forEach(t),glt=i(Pi),mS=n(Pi,"P",{});var DYe=s(mS);hlt=r(DYe,"This class cannot be instantiated directly using "),pye=n(DYe,"CODE",{});var Cea=s(pye);ult=r(Cea,"__init__()"),Cea.forEach(t),plt=r(DYe," (throws an error)."),DYe.forEach(t),_lt=i(Pi),la=n(Pi,"DIV",{class:!0});var Yy=s(la);T(fS.$$.fragment,Yy),blt=i(Yy),_ye=n(Yy,"P",{});var wea=s(_ye);vlt=r(wea,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),wea.forEach(t),Flt=i(Yy),Dm=n(Yy,"P",{});var Tse=s(Dm);Tlt=r(Tse,`Note:
Loading a model from its configuration file does `),bye=n(Tse,"STRONG",{});var Aea=s(bye);Mlt=r(Aea,"not"),Aea.forEach(t),Elt=r(Tse,` load the model weights. It only affects the
model\u2019s configuration. Use `),dae=n(Tse,"A",{href:!0});var Lea=s(dae);Clt=r(Lea,"from_pretrained()"),Lea.forEach(t),wlt=r(Tse," to load the model weights."),Tse.forEach(t),Alt=i(Yy),T(f7.$$.fragment,Yy),Yy.forEach(t),Llt=i(Pi),rt=n(Pi,"DIV",{class:!0});var Bi=s(rt);T(gS.$$.fragment,Bi),ylt=i(Bi),vye=n(Bi,"P",{});var yea=s(vye);xlt=r(yea,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),yea.forEach(t),$lt=i(Bi),jn=n(Bi,"P",{});var Ky=s(jn);klt=r(Ky,"The model class to instantiate is selected based on the "),Fye=n(Ky,"CODE",{});var xea=s(Fye);Slt=r(xea,"model_type"),xea.forEach(t),Rlt=r(Ky,` property of the config object (either
passed as an argument or loaded from `),Tye=n(Ky,"CODE",{});var $ea=s(Tye);Plt=r($ea,"pretrained_model_name_or_path"),$ea.forEach(t),Blt=r(Ky,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mye=n(Ky,"CODE",{});var kea=s(Mye);Ilt=r(kea,"pretrained_model_name_or_path"),kea.forEach(t),Nlt=r(Ky,":"),Ky.forEach(t),qlt=i(Bi),ze=n(Bi,"UL",{});var wo=s(ze);g7=n(wo,"LI",{});var fQe=s(g7);Eye=n(fQe,"STRONG",{});var Sea=s(Eye);jlt=r(Sea,"albert"),Sea.forEach(t),Dlt=r(fQe," \u2014 "),cae=n(fQe,"A",{href:!0});var Rea=s(cae);Glt=r(Rea,"FlaxAlbertForMultipleChoice"),Rea.forEach(t),Olt=r(fQe," (ALBERT model)"),fQe.forEach(t),Vlt=i(wo),h7=n(wo,"LI",{});var gQe=s(h7);Cye=n(gQe,"STRONG",{});var Pea=s(Cye);Xlt=r(Pea,"bert"),Pea.forEach(t),zlt=r(gQe," \u2014 "),mae=n(gQe,"A",{href:!0});var Bea=s(mae);Wlt=r(Bea,"FlaxBertForMultipleChoice"),Bea.forEach(t),Qlt=r(gQe," (BERT model)"),gQe.forEach(t),Ult=i(wo),u7=n(wo,"LI",{});var hQe=s(u7);wye=n(hQe,"STRONG",{});var Iea=s(wye);Hlt=r(Iea,"big_bird"),Iea.forEach(t),Jlt=r(hQe," \u2014 "),fae=n(hQe,"A",{href:!0});var Nea=s(fae);Ylt=r(Nea,"FlaxBigBirdForMultipleChoice"),Nea.forEach(t),Klt=r(hQe," (BigBird model)"),hQe.forEach(t),Zlt=i(wo),p7=n(wo,"LI",{});var uQe=s(p7);Aye=n(uQe,"STRONG",{});var qea=s(Aye);eit=r(qea,"distilbert"),qea.forEach(t),oit=r(uQe," \u2014 "),gae=n(uQe,"A",{href:!0});var jea=s(gae);rit=r(jea,"FlaxDistilBertForMultipleChoice"),jea.forEach(t),tit=r(uQe," (DistilBERT model)"),uQe.forEach(t),ait=i(wo),_7=n(wo,"LI",{});var pQe=s(_7);Lye=n(pQe,"STRONG",{});var Dea=s(Lye);nit=r(Dea,"electra"),Dea.forEach(t),sit=r(pQe," \u2014 "),hae=n(pQe,"A",{href:!0});var Gea=s(hae);lit=r(Gea,"FlaxElectraForMultipleChoice"),Gea.forEach(t),iit=r(pQe," (ELECTRA model)"),pQe.forEach(t),dit=i(wo),b7=n(wo,"LI",{});var _Qe=s(b7);yye=n(_Qe,"STRONG",{});var Oea=s(yye);cit=r(Oea,"roberta"),Oea.forEach(t),mit=r(_Qe," \u2014 "),uae=n(_Qe,"A",{href:!0});var Vea=s(uae);fit=r(Vea,"FlaxRobertaForMultipleChoice"),Vea.forEach(t),git=r(_Qe," (RoBERTa model)"),_Qe.forEach(t),hit=i(wo),v7=n(wo,"LI",{});var bQe=s(v7);xye=n(bQe,"STRONG",{});var Xea=s(xye);uit=r(Xea,"roformer"),Xea.forEach(t),pit=r(bQe," \u2014 "),pae=n(bQe,"A",{href:!0});var zea=s(pae);_it=r(zea,"FlaxRoFormerForMultipleChoice"),zea.forEach(t),bit=r(bQe," (RoFormer model)"),bQe.forEach(t),vit=i(wo),F7=n(wo,"LI",{});var vQe=s(F7);$ye=n(vQe,"STRONG",{});var Wea=s($ye);Fit=r(Wea,"xlm-roberta"),Wea.forEach(t),Tit=r(vQe," \u2014 "),_ae=n(vQe,"A",{href:!0});var Qea=s(_ae);Mit=r(Qea,"FlaxXLMRobertaForMultipleChoice"),Qea.forEach(t),Eit=r(vQe," (XLM-RoBERTa model)"),vQe.forEach(t),wo.forEach(t),Cit=i(Bi),T(T7.$$.fragment,Bi),Bi.forEach(t),Pi.forEach(t),LHe=i(m),Gm=n(m,"H2",{class:!0});var GYe=s(Gm);M7=n(GYe,"A",{id:!0,class:!0,href:!0});var Uea=s(M7);kye=n(Uea,"SPAN",{});var Hea=s(kye);T(hS.$$.fragment,Hea),Hea.forEach(t),Uea.forEach(t),wit=i(GYe),Sye=n(GYe,"SPAN",{});var Jea=s(Sye);Ait=r(Jea,"FlaxAutoModelForNextSentencePrediction"),Jea.forEach(t),GYe.forEach(t),yHe=i(m),yr=n(m,"DIV",{class:!0});var Ii=s(yr);T(uS.$$.fragment,Ii),Lit=i(Ii),Om=n(Ii,"P",{});var Mse=s(Om);yit=r(Mse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),bae=n(Mse,"A",{href:!0});var Yea=s(bae);xit=r(Yea,"from_pretrained()"),Yea.forEach(t),$it=r(Mse," class method or the "),vae=n(Mse,"A",{href:!0});var Kea=s(vae);kit=r(Kea,"from_config()"),Kea.forEach(t),Sit=r(Mse,` class
method.`),Mse.forEach(t),Rit=i(Ii),pS=n(Ii,"P",{});var OYe=s(pS);Pit=r(OYe,"This class cannot be instantiated directly using "),Rye=n(OYe,"CODE",{});var Zea=s(Rye);Bit=r(Zea,"__init__()"),Zea.forEach(t),Iit=r(OYe," (throws an error)."),OYe.forEach(t),Nit=i(Ii),ia=n(Ii,"DIV",{class:!0});var Zy=s(ia);T(_S.$$.fragment,Zy),qit=i(Zy),Pye=n(Zy,"P",{});var eoa=s(Pye);jit=r(eoa,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),eoa.forEach(t),Dit=i(Zy),Vm=n(Zy,"P",{});var Ese=s(Vm);Git=r(Ese,`Note:
Loading a model from its configuration file does `),Bye=n(Ese,"STRONG",{});var ooa=s(Bye);Oit=r(ooa,"not"),ooa.forEach(t),Vit=r(Ese,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fae=n(Ese,"A",{href:!0});var roa=s(Fae);Xit=r(roa,"from_pretrained()"),roa.forEach(t),zit=r(Ese," to load the model weights."),Ese.forEach(t),Wit=i(Zy),T(E7.$$.fragment,Zy),Zy.forEach(t),Qit=i(Ii),tt=n(Ii,"DIV",{class:!0});var Ni=s(tt);T(bS.$$.fragment,Ni),Uit=i(Ni),Iye=n(Ni,"P",{});var toa=s(Iye);Hit=r(toa,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),toa.forEach(t),Jit=i(Ni),Dn=n(Ni,"P",{});var e8=s(Dn);Yit=r(e8,"The model class to instantiate is selected based on the "),Nye=n(e8,"CODE",{});var aoa=s(Nye);Kit=r(aoa,"model_type"),aoa.forEach(t),Zit=r(e8,` property of the config object (either
passed as an argument or loaded from `),qye=n(e8,"CODE",{});var noa=s(qye);edt=r(noa,"pretrained_model_name_or_path"),noa.forEach(t),odt=r(e8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jye=n(e8,"CODE",{});var soa=s(jye);rdt=r(soa,"pretrained_model_name_or_path"),soa.forEach(t),tdt=r(e8,":"),e8.forEach(t),adt=i(Ni),Dye=n(Ni,"UL",{});var loa=s(Dye);C7=n(loa,"LI",{});var FQe=s(C7);Gye=n(FQe,"STRONG",{});var ioa=s(Gye);ndt=r(ioa,"bert"),ioa.forEach(t),sdt=r(FQe," \u2014 "),Tae=n(FQe,"A",{href:!0});var doa=s(Tae);ldt=r(doa,"FlaxBertForNextSentencePrediction"),doa.forEach(t),idt=r(FQe," (BERT model)"),FQe.forEach(t),loa.forEach(t),ddt=i(Ni),T(w7.$$.fragment,Ni),Ni.forEach(t),Ii.forEach(t),xHe=i(m),Xm=n(m,"H2",{class:!0});var VYe=s(Xm);A7=n(VYe,"A",{id:!0,class:!0,href:!0});var coa=s(A7);Oye=n(coa,"SPAN",{});var moa=s(Oye);T(vS.$$.fragment,moa),moa.forEach(t),coa.forEach(t),cdt=i(VYe),Vye=n(VYe,"SPAN",{});var foa=s(Vye);mdt=r(foa,"FlaxAutoModelForImageClassification"),foa.forEach(t),VYe.forEach(t),$He=i(m),xr=n(m,"DIV",{class:!0});var qi=s(xr);T(FS.$$.fragment,qi),fdt=i(qi),zm=n(qi,"P",{});var Cse=s(zm);gdt=r(Cse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Mae=n(Cse,"A",{href:!0});var goa=s(Mae);hdt=r(goa,"from_pretrained()"),goa.forEach(t),udt=r(Cse," class method or the "),Eae=n(Cse,"A",{href:!0});var hoa=s(Eae);pdt=r(hoa,"from_config()"),hoa.forEach(t),_dt=r(Cse,` class
method.`),Cse.forEach(t),bdt=i(qi),TS=n(qi,"P",{});var XYe=s(TS);vdt=r(XYe,"This class cannot be instantiated directly using "),Xye=n(XYe,"CODE",{});var uoa=s(Xye);Fdt=r(uoa,"__init__()"),uoa.forEach(t),Tdt=r(XYe," (throws an error)."),XYe.forEach(t),Mdt=i(qi),da=n(qi,"DIV",{class:!0});var o8=s(da);T(MS.$$.fragment,o8),Edt=i(o8),zye=n(o8,"P",{});var poa=s(zye);Cdt=r(poa,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),poa.forEach(t),wdt=i(o8),Wm=n(o8,"P",{});var wse=s(Wm);Adt=r(wse,`Note:
Loading a model from its configuration file does `),Wye=n(wse,"STRONG",{});var _oa=s(Wye);Ldt=r(_oa,"not"),_oa.forEach(t),ydt=r(wse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cae=n(wse,"A",{href:!0});var boa=s(Cae);xdt=r(boa,"from_pretrained()"),boa.forEach(t),$dt=r(wse," to load the model weights."),wse.forEach(t),kdt=i(o8),T(L7.$$.fragment,o8),o8.forEach(t),Sdt=i(qi),at=n(qi,"DIV",{class:!0});var ji=s(at);T(ES.$$.fragment,ji),Rdt=i(ji),Qye=n(ji,"P",{});var voa=s(Qye);Pdt=r(voa,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),voa.forEach(t),Bdt=i(ji),Gn=n(ji,"P",{});var r8=s(Gn);Idt=r(r8,"The model class to instantiate is selected based on the "),Uye=n(r8,"CODE",{});var Foa=s(Uye);Ndt=r(Foa,"model_type"),Foa.forEach(t),qdt=r(r8,` property of the config object (either
passed as an argument or loaded from `),Hye=n(r8,"CODE",{});var Toa=s(Hye);jdt=r(Toa,"pretrained_model_name_or_path"),Toa.forEach(t),Ddt=r(r8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jye=n(r8,"CODE",{});var Moa=s(Jye);Gdt=r(Moa,"pretrained_model_name_or_path"),Moa.forEach(t),Odt=r(r8,":"),r8.forEach(t),Vdt=i(ji),CS=n(ji,"UL",{});var zYe=s(CS);y7=n(zYe,"LI",{});var TQe=s(y7);Yye=n(TQe,"STRONG",{});var Eoa=s(Yye);Xdt=r(Eoa,"beit"),Eoa.forEach(t),zdt=r(TQe," \u2014 "),wae=n(TQe,"A",{href:!0});var Coa=s(wae);Wdt=r(Coa,"FlaxBeitForImageClassification"),Coa.forEach(t),Qdt=r(TQe," (BEiT model)"),TQe.forEach(t),Udt=i(zYe),x7=n(zYe,"LI",{});var MQe=s(x7);Kye=n(MQe,"STRONG",{});var woa=s(Kye);Hdt=r(woa,"vit"),woa.forEach(t),Jdt=r(MQe," \u2014 "),Aae=n(MQe,"A",{href:!0});var Aoa=s(Aae);Ydt=r(Aoa,"FlaxViTForImageClassification"),Aoa.forEach(t),Kdt=r(MQe," (ViT model)"),MQe.forEach(t),zYe.forEach(t),Zdt=i(ji),T($7.$$.fragment,ji),ji.forEach(t),qi.forEach(t),kHe=i(m),Qm=n(m,"H2",{class:!0});var WYe=s(Qm);k7=n(WYe,"A",{id:!0,class:!0,href:!0});var Loa=s(k7);Zye=n(Loa,"SPAN",{});var yoa=s(Zye);T(wS.$$.fragment,yoa),yoa.forEach(t),Loa.forEach(t),ect=i(WYe),e8e=n(WYe,"SPAN",{});var xoa=s(e8e);oct=r(xoa,"FlaxAutoModelForVision2Seq"),xoa.forEach(t),WYe.forEach(t),SHe=i(m),$r=n(m,"DIV",{class:!0});var Di=s($r);T(AS.$$.fragment,Di),rct=i(Di),Um=n(Di,"P",{});var Ase=s(Um);tct=r(Ase,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Lae=n(Ase,"A",{href:!0});var $oa=s(Lae);act=r($oa,"from_pretrained()"),$oa.forEach(t),nct=r(Ase," class method or the "),yae=n(Ase,"A",{href:!0});var koa=s(yae);sct=r(koa,"from_config()"),koa.forEach(t),lct=r(Ase,` class
method.`),Ase.forEach(t),ict=i(Di),LS=n(Di,"P",{});var QYe=s(LS);dct=r(QYe,"This class cannot be instantiated directly using "),o8e=n(QYe,"CODE",{});var Soa=s(o8e);cct=r(Soa,"__init__()"),Soa.forEach(t),mct=r(QYe," (throws an error)."),QYe.forEach(t),fct=i(Di),ca=n(Di,"DIV",{class:!0});var t8=s(ca);T(yS.$$.fragment,t8),gct=i(t8),r8e=n(t8,"P",{});var Roa=s(r8e);hct=r(Roa,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Roa.forEach(t),uct=i(t8),Hm=n(t8,"P",{});var Lse=s(Hm);pct=r(Lse,`Note:
Loading a model from its configuration file does `),t8e=n(Lse,"STRONG",{});var Poa=s(t8e);_ct=r(Poa,"not"),Poa.forEach(t),bct=r(Lse,` load the model weights. It only affects the
model\u2019s configuration. Use `),xae=n(Lse,"A",{href:!0});var Boa=s(xae);vct=r(Boa,"from_pretrained()"),Boa.forEach(t),Fct=r(Lse," to load the model weights."),Lse.forEach(t),Tct=i(t8),T(S7.$$.fragment,t8),t8.forEach(t),Mct=i(Di),nt=n(Di,"DIV",{class:!0});var Gi=s(nt);T(xS.$$.fragment,Gi),Ect=i(Gi),a8e=n(Gi,"P",{});var Ioa=s(a8e);Cct=r(Ioa,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ioa.forEach(t),wct=i(Gi),On=n(Gi,"P",{});var a8=s(On);Act=r(a8,"The model class to instantiate is selected based on the "),n8e=n(a8,"CODE",{});var Noa=s(n8e);Lct=r(Noa,"model_type"),Noa.forEach(t),yct=r(a8,` property of the config object (either
passed as an argument or loaded from `),s8e=n(a8,"CODE",{});var qoa=s(s8e);xct=r(qoa,"pretrained_model_name_or_path"),qoa.forEach(t),$ct=r(a8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l8e=n(a8,"CODE",{});var joa=s(l8e);kct=r(joa,"pretrained_model_name_or_path"),joa.forEach(t),Sct=r(a8,":"),a8.forEach(t),Rct=i(Gi),i8e=n(Gi,"UL",{});var Doa=s(i8e);R7=n(Doa,"LI",{});var EQe=s(R7);d8e=n(EQe,"STRONG",{});var Goa=s(d8e);Pct=r(Goa,"vision-encoder-decoder"),Goa.forEach(t),Bct=r(EQe," \u2014 "),$ae=n(EQe,"A",{href:!0});var Ooa=s($ae);Ict=r(Ooa,"FlaxVisionEncoderDecoderModel"),Ooa.forEach(t),Nct=r(EQe," (Vision Encoder decoder model)"),EQe.forEach(t),Doa.forEach(t),qct=i(Gi),T(P7.$$.fragment,Gi),Gi.forEach(t),Di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Kta)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(Xn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(Wn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c(Qn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(Ui,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(tf,"id","extending-the-auto-classes"),c(tf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tf,"href","#extending-the-auto-classes"),c(Hi,"class","relative group"),c(nf,"id","transformers.AutoConfig"),c(nf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nf,"href","#transformers.AutoConfig"),c(Ji,"class","relative group"),c(nP,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(sP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(lP,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(iP,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(dP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(cP,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(mP,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(fP,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(gP,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(hP,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(uP,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig"),c(pP,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(_P,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(bP,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(vP,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig"),c(FP,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(TP,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(MP,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(EP,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig"),c(CP,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(wP,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(AP,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(LP,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(yP,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(xP,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c($P,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(kP,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(SP,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(RP,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(PP,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(BP,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(IP,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(NP,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(qP,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),c(jP,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(DP,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(GP,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(OP,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(VP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(XP,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(zP,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(WP,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(QP,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig"),c(UP,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(HP,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(JP,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(YP,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(KP,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(ZP,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(eB,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(oB,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig"),c(rB,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(tB,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config"),c(aB,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(nB,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(sB,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(lB,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(iB,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(dB,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(cB,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig"),c(mB,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(fB,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(gB,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(hB,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(uB,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(pB,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig"),c(_B,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig"),c(bB,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(vB,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(FB,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),c(TB,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig"),c(MB,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(EB,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(CB,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(wB,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(AB,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(LB,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(yB,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(xB,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c($B,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(kB,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(SB,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(RB,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(PB,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(BB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(IB,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(NB,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(qB,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(jB,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(DB,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(GB,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(OB,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(VB,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(XB,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(zB,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(WB,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config"),c(QB,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(UB,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(HB,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(JB,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(YB,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(KB,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(ZB,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(eI,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(oI,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig"),c(rI,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(tI,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(aI,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(nI,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(sI,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(lI,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(iI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(dI,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(cI,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(mI,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(fI,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(gI,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(hI,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(uI,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(pI,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(_I,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(bI,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Th,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mh,"id","transformers.AutoTokenizer"),c(Mh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mh,"href","#transformers.AutoTokenizer"),c(Ki,"class","relative group"),c(vI,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(FI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(TI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(MI,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(EI,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(CI,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(wI,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(AI,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(LI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(yI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(xI,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c($I,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(kI,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(SI,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(RI,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(PI,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(BI,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(II,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(NI,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(qI,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(jI,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(DI,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(GI,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(OI,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(VI,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(XI,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(zI,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(WI,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(QI,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(UI,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(HI,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(JI,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(YI,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(KI,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(ZI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(eN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(oN,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(rN,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(tN,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(aN,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(nN,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(sN,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(lN,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(iN,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(dN,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(cN,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(mN,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(fN,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(gN,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(hN,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(uN,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(pN,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(_N,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(bN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(vN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(FN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(TN,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(MN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(EN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(CN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(wN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(AN,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(LN,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(yN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(xN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c($N,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(kN,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(SN,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(RN,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(PN,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(BN,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(IN,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(NN,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(qN,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(jN,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(DN,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(GN,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(ON,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(VN,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(XN,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(zN,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(WN,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(QN,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(UN,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(HN,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(JN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(YN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(KN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(ZN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(eq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(oq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(rq,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(tq,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(aq,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(nq,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(sq,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(lq,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(iq,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(dq,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizer"),c(cq,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(mq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(fq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(gq,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizer"),c(hq,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(uq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(pq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(_q,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(bq,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(vq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(Fq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(Tq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(Mq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Eq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(Cq,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(wq,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(Aq,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(Lq,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(yq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(xq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c($q,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(kq,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(Sq,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(Rq,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(Pq,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(Bq,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(Iq,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(Nq,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(qq,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(jq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Dq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Gq,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(Oq,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(Vq,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(Xq,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(zq,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(Wq,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(Qq,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(Uq,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(Hq,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(Jq,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(Yq,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(Kq,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(Zq,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(ej,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(oj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(rj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(tj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(aj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(nj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(sj,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(lj,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(ij,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(dj,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(cj,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(mj,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(fj,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(gj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(hj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(uj,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(pj,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(_j,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(bj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(au,"id","transformers.AutoFeatureExtractor"),c(au,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(au,"href","#transformers.AutoFeatureExtractor"),c(Zi,"class","relative group"),c(vj,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(Fj,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(Tj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Mj,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Ej,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Cj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(wj,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(Aj,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(Lj,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(yj,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(xj,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c($j,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(kj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Sj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Rj,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(Pj,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(Bj,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(Ij,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(Nj,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(qj,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(jj,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(Dj,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),c(Gj,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(Oj,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(Vj,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Xj,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(zj,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(Wj,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(Qj,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Uj,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Hj,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Jj,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Yj,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(Kj,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Zj,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(eD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(oD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(rD,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zu,"id","transformers.AutoProcessor"),c(zu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zu,"href","#transformers.AutoProcessor"),c(ed,"class","relative group"),c(tD,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(aD,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(nD,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaProcessor"),c(sD,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(lD,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(iD,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(dD,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(cD,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTProcessor"),c(mD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(fD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(gD,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(hD,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(uD,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(pD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(_D,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(bD,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(vD,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(FD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(TD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(MD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hp,"id","transformers.AutoModel"),c(hp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hp,"href","#transformers.AutoModel"),c(rd,"class","relative group"),c(ED,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(LD,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(yD,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(xD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c($D,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(kD,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(SD,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(RD,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(PD,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(BD,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel"),c(ID,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(ND,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(qD,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(jD,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel"),c(DD,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(GD,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(OD,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(VD,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel"),c(XD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(zD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(WD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(QD,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(UD,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(HD,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(JD,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(YD,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(KD,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(ZD,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(eG,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(oG,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(rG,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(tG,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),c(aG,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(nG,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(sG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(lG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(iG,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(dG,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(cG,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(mG,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(fG,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(gG,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel"),c(hG,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(uG,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c(pG,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(_G,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(bG,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(vG,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(FG,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(TG,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitModel"),c(MG,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(EG,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model"),c(CG,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(wG,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(AG,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(LG,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(yG,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(xG,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c($G,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel"),c(kG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(SG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(RG,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel"),c(PG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(BG,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(IG,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel"),c(NG,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel"),c(qG,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(jG,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(DG,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(GG,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),c(OG,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel"),c(VG,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(XG,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(zG,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(WG,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(QG,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(UG,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(HG,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(JG,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(YG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(KG,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(ZG,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(eO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(oO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(rO,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(tO,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(aO,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(nO,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(sO,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(lO,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(iO,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(dO,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model"),c(cO,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(mO,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(fO,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(gO,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(hO,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(uO,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(pO,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(_O,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEModel"),c(bO,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(vO,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(FO,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(TO,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(MO,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(EO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(CO,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(wO,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(AO,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(LO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(yO,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(xO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c($O,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(kO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(SO,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(RO,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C2,"id","transformers.AutoModelForPreTraining"),c(C2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C2,"href","#transformers.AutoModelForPreTraining"),c(nd,"class","relative group"),c(PO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(qO,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(jO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(DO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(GO,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(OO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(VO,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(XO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(zO,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(WO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(QO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(UO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(HO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(JO,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),c(YO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(KO,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(ZO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(eV,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(oV,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(rV,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(tV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(aV,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(nV,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(sV,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(lV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(iV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(dV,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(cV,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(mV,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(fV,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(gV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(hV,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(uV,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(pV,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(_V,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(bV,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(vV,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(FV,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(TV,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForPreTraining"),c(MV,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(EV,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(CV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(wV,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(AV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(LV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(yV,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(xV,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tb,"id","transformers.AutoModelForCausalLM"),c(Tb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tb,"href","#transformers.AutoModelForCausalLM"),c(id,"class","relative group"),c($V,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RV,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(PV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(BV,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(IV,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(NV,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(qV,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(jV,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(DV,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(GV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(OV,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(VV,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(XV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(zV,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(WV,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(QV,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(UV,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(HV,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(JV,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(YV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(KV,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(ZV,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM"),c(eX,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(oX,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),c(rX,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(tX,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(aX,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(nX,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(sX,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(lX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(iX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(dX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(cX,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(mX,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(fX,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(gX,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(hX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(uX,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(pX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(_X,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(bX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mv,"id","transformers.AutoModelForMaskedLM"),c(mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mv,"href","#transformers.AutoModelForMaskedLM"),c(md,"class","relative group"),c(vX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MX,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(EX,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(CX,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(wX,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(AX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(LX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(yX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(xX,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c($X,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(kX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(SX,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(RX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(PX,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(BX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(IX,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(NX,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(qX,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(jX,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(DX,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(GX,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(OX,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(VX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(XX,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(zX,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(WX,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(QX,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(UX,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(HX,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(JX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(YX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(KX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(ZX,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(ez,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(oz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(rz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(tz,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(az,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zv,"id","transformers.AutoModelForSeq2SeqLM"),c(Zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zv,"href","#transformers.AutoModelForSeq2SeqLM"),c(hd,"class","relative group"),c(nz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iz,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(dz,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(cz,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(mz,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(fz,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(gz,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(hz,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(uz,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(pz,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(_z,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(bz,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(vz,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(Fz,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(Tz,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Mz,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(Ez,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(Cz,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(wz,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Az,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M1,"id","transformers.AutoModelForSequenceClassification"),c(M1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M1,"href","#transformers.AutoModelForSequenceClassification"),c(_d,"class","relative group"),c(Lz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($z,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(kz,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(Sz,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(Rz,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(Pz,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(Bz,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(Iz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(Nz,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(qz,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(jz,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(Dz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(Gz,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(Oz,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(Vz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(Xz,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(zz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(Wz,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(Qz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(Uz,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(Hz,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(Jz,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(Yz,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(Kz,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(Zz,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(eW,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(oW,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(rW,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(tW,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForSequenceClassification"),c(aW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(nW,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(sW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(lW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(iW,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(dW,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(cW,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(mW,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(fW,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification"),c(gW,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(hW,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(uW,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(pW,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(_W,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(bW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(vW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(FW,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(TW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(MW,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(EW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(CW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(wW,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(AW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(LW,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CF,"id","transformers.AutoModelForMultipleChoice"),c(CF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CF,"href","#transformers.AutoModelForMultipleChoice"),c(Fd,"class","relative group"),c(yW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($W,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kW,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(SW,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(RW,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(PW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(BW,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(IW,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(NW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(qW,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(jW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(DW,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(GW,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(OW,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(VW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(XW,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(zW,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(WW,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMultipleChoice"),c(QW,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(UW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(HW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(JW,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(YW,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(KW,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(ZW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(eQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(oQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(rQ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(tQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(aQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(nQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(sQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(lQ,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nT,"id","transformers.AutoModelForNextSentencePrediction"),c(nT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nT,"href","#transformers.AutoModelForNextSentencePrediction"),c(Ed,"class","relative group"),c(iQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(fQ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(gQ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(hQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(uQ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(pQ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uT,"id","transformers.AutoModelForTokenClassification"),c(uT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uT,"href","#transformers.AutoModelForTokenClassification"),c(Ad,"class","relative group"),c(_Q,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(TQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(MQ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(EQ,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(CQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(wQ,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(AQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(LQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(yQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(xQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c($Q,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(kQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(SQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(RQ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(PQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(BQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(IQ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(NQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(qQ,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(jQ,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(DQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(GQ,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForTokenClassification"),c(OQ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(VQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(XQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(zQ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(WQ,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(QQ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(UQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(HQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(JQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(YQ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(KQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(ZQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(eU,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(oU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(rU,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rM,"id","transformers.AutoModelForQuestionAnswering"),c(rM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rM,"href","#transformers.AutoModelForQuestionAnswering"),c(xd,"class","relative group"),c(tU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sU,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(lU,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(iU,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(dU,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(cU,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(mU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(fU,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(gU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(hU,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(uU,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(pU,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(_U,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(bU,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(vU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(FU,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(TU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(MU,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(EU,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(CU,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(wU,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(AU,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(LU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(yU,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForQuestionAnswering"),c(xU,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c($U,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(kU,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(SU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(RU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(PU,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(BU,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(IU,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(NU,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(qU,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(jU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(DU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(GU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(OU,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(VU,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(XU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(zU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(WU,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(QU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(UU,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HM,"id","transformers.AutoModelForTableQuestionAnswering"),c(HM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HM,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Sd,"class","relative group"),c(HU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KU,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eE,"id","transformers.AutoModelForImageClassification"),c(eE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eE,"href","#transformers.AutoModelForImageClassification"),c(Bd,"class","relative group"),c(ZU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rH,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(tH,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(aH,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification"),c(nH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(sH,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(lH,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(iH,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(dH,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification"),c(cH,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(mH,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(fH,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(gH,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(hH,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(uH,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(pH,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(_H,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(bH,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(vH,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(FH,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),c(TH,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(MH,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bE,"id","transformers.AutoModelForVideoClassification"),c(bE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bE,"href","#transformers.AutoModelForVideoClassification"),c(qd,"class","relative group"),c(EH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AH,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForVideoClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EE,"id","transformers.AutoModelForVision2Seq"),c(EE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EE,"href","#transformers.AutoModelForVision2Seq"),c(Gd,"class","relative group"),c(LH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($H,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yE,"id","transformers.AutoModelForVisualQuestionAnswering"),c(yE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yE,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Xd,"class","relative group"),c(kH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PH,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RE,"id","transformers.AutoModelForAudioClassification"),c(RE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RE,"href","#transformers.AutoModelForAudioClassification"),c(Qd,"class","relative group"),c(BH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(jH,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(DH,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(GH,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(OH,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(VH,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(XH,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(zH,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(WH,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WE,"id","transformers.AutoModelForAudioFrameClassification"),c(WE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WE,"href","#transformers.AutoModelForAudioFrameClassification"),c(Jd,"class","relative group"),c(QH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(YH,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(KH,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(ZH,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(eJ,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o4,"id","transformers.AutoModelForCTC"),c(o4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o4,"href","#transformers.AutoModelForCTC"),c(Zd,"class","relative group"),c(oJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aJ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(nJ,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(sJ,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC"),c(lJ,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(iJ,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(dJ,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(cJ,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(mJ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(fJ,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(gJ,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u4,"id","transformers.AutoModelForSpeechSeq2Seq"),c(u4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u4,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(rc,"class","relative group"),c(hJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_J,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(bJ,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T4,"id","transformers.AutoModelForAudioXVector"),c(T4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T4,"href","#transformers.AutoModelForAudioXVector"),c(nc,"class","relative group"),c(vJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MJ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(EJ,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(CJ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(wJ,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(AJ,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($4,"id","transformers.AutoModelForMaskedImageModeling"),c($4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($4,"href","#transformers.AutoModelForMaskedImageModeling"),c(ic,"class","relative group"),c(LJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($J,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(kJ,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(SJ,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),c(RJ,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q4,"id","transformers.AutoModelForObjectDetection"),c(q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q4,"href","#transformers.AutoModelForObjectDetection"),c(mc,"class","relative group"),c(PJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NJ,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(qJ,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X4,"id","transformers.AutoModelForImageSegmentation"),c(X4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X4,"href","#transformers.AutoModelForImageSegmentation"),c(hc,"class","relative group"),c(jJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OJ,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H4,"id","transformers.AutoModelForSemanticSegmentation"),c(H4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H4,"href","#transformers.AutoModelForSemanticSegmentation"),c(_c,"class","relative group"),c(VJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WJ,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(QJ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(UJ,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(HJ,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(JJ,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aC,"id","transformers.AutoModelForInstanceSegmentation"),c(aC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aC,"href","#transformers.AutoModelForInstanceSegmentation"),c(Fc,"class","relative group"),c(YJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eY,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dC,"id","transformers.TFAutoModel"),c(dC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dC,"href","#transformers.TFAutoModel"),c(Ec,"class","relative group"),c(oY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aY,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(nY,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(sY,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(lY,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(iY,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(dY,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(cY,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(mY,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(fY,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(gY,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(hY,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(uY,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(pY,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(_Y,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel"),c(bY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(vY,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(FY,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(TY,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(MY,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(EY,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(CY,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(wY,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(AY,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(LY,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(yY,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(xY,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c($Y,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(kY,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(SY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(RY,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(PY,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(BY,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(IY,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(NY,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel"),c(qY,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(jY,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel"),c(DY,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(GY,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel"),c(OY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(VY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(XY,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel"),c(zY,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(WY,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),c(QY,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(UY,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(HY,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(JY,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(YY,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(KY,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(ZY,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(eK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(oK,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i3,"id","transformers.TFAutoModelForPreTraining"),c(i3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i3,"href","#transformers.TFAutoModelForPreTraining"),c(Ac,"class","relative group"),c(rK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nK,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(sK,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(lK,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(iK,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(dK,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(cK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(mK,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(fK,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(gK,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(hK,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(uK,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(pK,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(_K,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(bK,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(vK,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(FK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(TK,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(MK,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(EK,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(CK,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(wK,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(AK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(LK,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P3,"id","transformers.TFAutoModelForCausalLM"),c(P3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P3,"href","#transformers.TFAutoModelForCausalLM"),c(xc,"class","relative group"),c(yK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($K,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kK,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(SK,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(RK,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(PK,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(BK,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(IK,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(NK,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(qK,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(jK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(DK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(GK,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(OK,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(VK,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J3,"id","transformers.TFAutoModelForImageClassification"),c(J3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J3,"href","#transformers.TFAutoModelForImageClassification"),c(Sc,"class","relative group"),c(XK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QK,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(UK,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(HK,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(JK,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(YK,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(KK,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(ZK,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),c(eZ,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(oZ,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s5,"id","transformers.TFAutoModelForSemanticSegmentation"),c(s5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s5,"href","#transformers.TFAutoModelForSemanticSegmentation"),c(Bc,"class","relative group"),c(rZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nZ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation"),c(sZ,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m5,"id","transformers.TFAutoModelForMaskedLM"),c(m5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m5,"href","#transformers.TFAutoModelForMaskedLM"),c(qc,"class","relative group"),c(lZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(mZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(fZ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(gZ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(hZ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(uZ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(pZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(_Z,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(bZ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(vZ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(FZ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(TZ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(MZ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(EZ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(CZ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(wZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(AZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(LZ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(yZ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(xZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P5,"id","transformers.TFAutoModelForSeq2SeqLM"),c(P5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P5,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c($Z,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RZ,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(PZ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(BZ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(IZ,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(NZ,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(qZ,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(jZ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(DZ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(GZ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(OZ,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q5,"id","transformers.TFAutoModelForSequenceClassification"),c(Q5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q5,"href","#transformers.TFAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(VZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(QZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(UZ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(HZ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(JZ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(YZ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(KZ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(ZZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(eee,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(oee,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(ree,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(tee,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(aee,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(nee,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(see,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(lee,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(iee,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(dee,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(cee,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(mee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(fee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(gee,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(hee,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(uee,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(pee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(_ee,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M0,"id","transformers.TFAutoModelForMultipleChoice"),c(M0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M0,"href","#transformers.TFAutoModelForMultipleChoice"),c(Qc,"class","relative group"),c(bee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Fee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tee,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(Mee,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(Eee,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(Cee,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(wee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(Aee,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(Lee,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(yee,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(xee,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c($ee,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(kee,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(See,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(Ree,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(Pee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(Bee,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(Iee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(Nee,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O0,"id","transformers.TFAutoModelForNextSentencePrediction"),c(O0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O0,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Jc,"class","relative group"),c(qee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gee,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(Oee,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q0,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(Q0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q0,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Zc,"class","relative group"),c(Vee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wee,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y0,"id","transformers.TFAutoModelForTokenClassification"),c(Y0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y0,"href","#transformers.TFAutoModelForTokenClassification"),c(rm,"class","relative group"),c(Qee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jee,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(Yee,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(Kee,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(Zee,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(eoe,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(ooe,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(roe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(toe,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(aoe,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(noe,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(soe,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(loe,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(ioe,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(doe,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(coe,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(moe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(foe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(goe,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(hoe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(uoe,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fw,"id","transformers.TFAutoModelForQuestionAnswering"),c(Fw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fw,"href","#transformers.TFAutoModelForQuestionAnswering"),c(nm,"class","relative group"),c(poe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_oe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(boe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(voe,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(Foe,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(Toe,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(Moe,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(Eoe,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(Coe,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(woe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(Aoe,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(Loe,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(yoe,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(xoe,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c($oe,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(koe,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(Soe,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(Roe,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(Poe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(Boe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(Ioe,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(Noe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(qoe,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vw,"id","transformers.TFAutoModelForVision2Seq"),c(Vw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vw,"href","#transformers.TFAutoModelForVision2Seq"),c(im,"class","relative group"),c(joe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Doe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Goe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ooe,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qw,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(Qw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qw,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(mm,"class","relative group"),c(Voe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Woe,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yw,"id","transformers.FlaxAutoModel"),c(Yw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yw,"href","#transformers.FlaxAutoModel"),c(hm,"class","relative group"),c(Qoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Joe,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(Yoe,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(Koe,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(Zoe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(ere,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(ore,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(rre,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(tre,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(are,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(nre,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(sre,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(lre,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(ire,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(dre,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(cre,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(mre,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(fre,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(gre,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel"),c(hre,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(ure,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(pre,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(_re,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(bre,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(vre,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(Fre,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(Tre,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(Mre,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L6,"id","transformers.FlaxAutoModelForCausalLM"),c(L6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L6,"href","#transformers.FlaxAutoModelForCausalLM"),c(_m,"class","relative group"),c(Ere,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Are,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Lre,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(yre,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(xre,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c($re,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(kre,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(Sre,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(Rre,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(Pre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(Bre,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D6,"id","transformers.FlaxAutoModelForPreTraining"),c(D6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D6,"href","#transformers.FlaxAutoModelForPreTraining"),c(Fm,"class","relative group"),c(Ire,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jre,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(Dre,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Gre,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(Ore,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Vre,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(Xre,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(zre,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Wre,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Qre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Ure,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Hre,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Jre,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(Yre,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rA,"id","transformers.FlaxAutoModelForMaskedLM"),c(rA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rA,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Em,"class","relative group"),c(Kre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ete,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ote,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(rte,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(tte,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(ate,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(nte,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(ste,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(lte,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(ite,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(dte,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(cte,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uA,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(uA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uA,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Am,"class","relative group"),c(mte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hte,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(ute,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(pte,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(_te,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(bte,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(vte,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Fte,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Tte,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Mte,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Ete,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yA,"id","transformers.FlaxAutoModelForSequenceClassification"),c(yA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yA,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(xm,"class","relative group"),c(Cte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ate,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lte,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(yte,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(xte,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c($te,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(kte,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Ste,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Rte,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Pte,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Bte,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Ite,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GA,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(GA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GA,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Sm,"class","relative group"),c(Nte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dte,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Gte,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Ote,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Vte,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Xte,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(zte,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(Wte,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Qte,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Ute,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Hte,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e7,"id","transformers.FlaxAutoModelForTokenClassification"),c(e7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e7,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Bm,"class","relative group"),c(Jte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zte,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(eae,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(oae,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(rae,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(tae,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(aae,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(nae,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(sae,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m7,"id","transformers.FlaxAutoModelForMultipleChoice"),c(m7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m7,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(qm,"class","relative group"),c(lae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cae,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(mae,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(fae,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(gae,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(hae,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(uae,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(pae,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(_ae,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M7,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(M7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M7,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Gm,"class","relative group"),c(bae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Fae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tae,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A7,"id","transformers.FlaxAutoModelForImageClassification"),c(A7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A7,"href","#transformers.FlaxAutoModelForImageClassification"),c(Xm,"class","relative group"),c(Mae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Eae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wae,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Aae,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k7,"id","transformers.FlaxAutoModelForVision2Seq"),c(k7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k7,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Qm,"class","relative group"),c(Lae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($ae,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,v,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,Ao),e(Ao,Oi),b(m,Zm,_),b(m,mt,_),e(mt,Vi),e(mt,Xi),e(Xi,n8),e(mt,ef),b(m,Oe,_),b(m,Qe,_),e(Qe,zi),e(Qe,Xn),e(Xn,s8),e(Qe,zn),e(Qe,Wn),e(Wn,l8),e(Qe,Wi),e(Qe,Qn),e(Qn,i8),e(Qe,Qi),b(m,of,_),M(ja,m,_),b(m,Ue,_),b(m,Ae,_),e(Ae,ZR),e(Ae,Ui),e(Ui,eP),e(Ae,oP),b(m,Lo,_),b(m,Da,_),e(Da,rP),e(Da,rf),e(rf,tP),e(Da,UYe),b(m,CQe,_),b(m,Hi,_),e(Hi,tf),e(tf,yse),M(d8,yse,null),e(Hi,HYe),e(Hi,xse),e(xse,JYe),b(m,wQe,_),b(m,Un,_),e(Un,YYe),e(Un,$se),e($se,KYe),e(Un,ZYe),e(Un,kse),e(kse,eKe),e(Un,oKe),b(m,AQe,_),M(c8,m,_),b(m,LQe,_),b(m,aP,_),e(aP,rKe),b(m,yQe,_),M(af,m,_),b(m,xQe,_),b(m,Ji,_),e(Ji,nf),e(nf,Sse),M(m8,Sse,null),e(Ji,tKe),e(Ji,Rse),e(Rse,aKe),b(m,$Qe,_),b(m,yo,_),M(f8,yo,null),e(yo,nKe),e(yo,g8),e(g8,sKe),e(g8,nP),e(nP,lKe),e(g8,iKe),e(yo,dKe),e(yo,h8),e(h8,cKe),e(h8,Pse),e(Pse,mKe),e(h8,fKe),e(yo,gKe),e(yo,kr),M(u8,kr,null),e(kr,hKe),e(kr,Bse),e(Bse,uKe),e(kr,pKe),e(kr,Yi),e(Yi,_Ke),e(Yi,Ise),e(Ise,bKe),e(Yi,vKe),e(Yi,Nse),e(Nse,FKe),e(Yi,TKe),e(kr,MKe),e(kr,A),e(A,sf),e(sf,qse),e(qse,EKe),e(sf,CKe),e(sf,sP),e(sP,wKe),e(sf,AKe),e(A,LKe),e(A,lf),e(lf,jse),e(jse,yKe),e(lf,xKe),e(lf,lP),e(lP,$Ke),e(lf,kKe),e(A,SKe),e(A,df),e(df,Dse),e(Dse,RKe),e(df,PKe),e(df,iP),e(iP,BKe),e(df,IKe),e(A,NKe),e(A,cf),e(cf,Gse),e(Gse,qKe),e(cf,jKe),e(cf,dP),e(dP,DKe),e(cf,GKe),e(A,OKe),e(A,mf),e(mf,Ose),e(Ose,VKe),e(mf,XKe),e(mf,cP),e(cP,zKe),e(mf,WKe),e(A,QKe),e(A,ff),e(ff,Vse),e(Vse,UKe),e(ff,HKe),e(ff,mP),e(mP,JKe),e(ff,YKe),e(A,KKe),e(A,gf),e(gf,Xse),e(Xse,ZKe),e(gf,eZe),e(gf,fP),e(fP,oZe),e(gf,rZe),e(A,tZe),e(A,hf),e(hf,zse),e(zse,aZe),e(hf,nZe),e(hf,gP),e(gP,sZe),e(hf,lZe),e(A,iZe),e(A,uf),e(uf,Wse),e(Wse,dZe),e(uf,cZe),e(uf,hP),e(hP,mZe),e(uf,fZe),e(A,gZe),e(A,pf),e(pf,Qse),e(Qse,hZe),e(pf,uZe),e(pf,uP),e(uP,pZe),e(pf,_Ze),e(A,bZe),e(A,_f),e(_f,Use),e(Use,vZe),e(_f,FZe),e(_f,pP),e(pP,TZe),e(_f,MZe),e(A,EZe),e(A,bf),e(bf,Hse),e(Hse,CZe),e(bf,wZe),e(bf,_P),e(_P,AZe),e(bf,LZe),e(A,yZe),e(A,vf),e(vf,Jse),e(Jse,xZe),e(vf,$Ze),e(vf,bP),e(bP,kZe),e(vf,SZe),e(A,RZe),e(A,Ff),e(Ff,Yse),e(Yse,PZe),e(Ff,BZe),e(Ff,vP),e(vP,IZe),e(Ff,NZe),e(A,qZe),e(A,Tf),e(Tf,Kse),e(Kse,jZe),e(Tf,DZe),e(Tf,FP),e(FP,GZe),e(Tf,OZe),e(A,VZe),e(A,Mf),e(Mf,Zse),e(Zse,XZe),e(Mf,zZe),e(Mf,TP),e(TP,WZe),e(Mf,QZe),e(A,UZe),e(A,Ef),e(Ef,ele),e(ele,HZe),e(Ef,JZe),e(Ef,MP),e(MP,YZe),e(Ef,KZe),e(A,ZZe),e(A,Cf),e(Cf,ole),e(ole,eeo),e(Cf,oeo),e(Cf,EP),e(EP,reo),e(Cf,teo),e(A,aeo),e(A,wf),e(wf,rle),e(rle,neo),e(wf,seo),e(wf,CP),e(CP,leo),e(wf,ieo),e(A,deo),e(A,Af),e(Af,tle),e(tle,ceo),e(Af,meo),e(Af,wP),e(wP,feo),e(Af,geo),e(A,heo),e(A,Lf),e(Lf,ale),e(ale,ueo),e(Lf,peo),e(Lf,AP),e(AP,_eo),e(Lf,beo),e(A,veo),e(A,yf),e(yf,nle),e(nle,Feo),e(yf,Teo),e(yf,LP),e(LP,Meo),e(yf,Eeo),e(A,Ceo),e(A,xf),e(xf,sle),e(sle,weo),e(xf,Aeo),e(xf,yP),e(yP,Leo),e(xf,yeo),e(A,xeo),e(A,$f),e($f,lle),e(lle,$eo),e($f,keo),e($f,xP),e(xP,Seo),e($f,Reo),e(A,Peo),e(A,kf),e(kf,ile),e(ile,Beo),e(kf,Ieo),e(kf,$P),e($P,Neo),e(kf,qeo),e(A,jeo),e(A,Sf),e(Sf,dle),e(dle,Deo),e(Sf,Geo),e(Sf,kP),e(kP,Oeo),e(Sf,Veo),e(A,Xeo),e(A,Rf),e(Rf,cle),e(cle,zeo),e(Rf,Weo),e(Rf,SP),e(SP,Qeo),e(Rf,Ueo),e(A,Heo),e(A,Pf),e(Pf,mle),e(mle,Jeo),e(Pf,Yeo),e(Pf,RP),e(RP,Keo),e(Pf,Zeo),e(A,eoo),e(A,Bf),e(Bf,fle),e(fle,ooo),e(Bf,roo),e(Bf,PP),e(PP,too),e(Bf,aoo),e(A,noo),e(A,If),e(If,gle),e(gle,soo),e(If,loo),e(If,BP),e(BP,ioo),e(If,doo),e(A,coo),e(A,Nf),e(Nf,hle),e(hle,moo),e(Nf,foo),e(Nf,IP),e(IP,goo),e(Nf,hoo),e(A,uoo),e(A,qf),e(qf,ule),e(ule,poo),e(qf,_oo),e(qf,NP),e(NP,boo),e(qf,voo),e(A,Foo),e(A,jf),e(jf,ple),e(ple,Too),e(jf,Moo),e(jf,qP),e(qP,Eoo),e(jf,Coo),e(A,woo),e(A,Df),e(Df,_le),e(_le,Aoo),e(Df,Loo),e(Df,jP),e(jP,yoo),e(Df,xoo),e(A,$oo),e(A,Gf),e(Gf,ble),e(ble,koo),e(Gf,Soo),e(Gf,DP),e(DP,Roo),e(Gf,Poo),e(A,Boo),e(A,Of),e(Of,vle),e(vle,Ioo),e(Of,Noo),e(Of,GP),e(GP,qoo),e(Of,joo),e(A,Doo),e(A,Vf),e(Vf,Fle),e(Fle,Goo),e(Vf,Ooo),e(Vf,OP),e(OP,Voo),e(Vf,Xoo),e(A,zoo),e(A,Xf),e(Xf,Tle),e(Tle,Woo),e(Xf,Qoo),e(Xf,VP),e(VP,Uoo),e(Xf,Hoo),e(A,Joo),e(A,zf),e(zf,Mle),e(Mle,Yoo),e(zf,Koo),e(zf,XP),e(XP,Zoo),e(zf,ero),e(A,oro),e(A,Wf),e(Wf,Ele),e(Ele,rro),e(Wf,tro),e(Wf,zP),e(zP,aro),e(Wf,nro),e(A,sro),e(A,Qf),e(Qf,Cle),e(Cle,lro),e(Qf,iro),e(Qf,WP),e(WP,dro),e(Qf,cro),e(A,mro),e(A,Uf),e(Uf,wle),e(wle,fro),e(Uf,gro),e(Uf,QP),e(QP,hro),e(Uf,uro),e(A,pro),e(A,Hf),e(Hf,Ale),e(Ale,_ro),e(Hf,bro),e(Hf,UP),e(UP,vro),e(Hf,Fro),e(A,Tro),e(A,Jf),e(Jf,Lle),e(Lle,Mro),e(Jf,Ero),e(Jf,HP),e(HP,Cro),e(Jf,wro),e(A,Aro),e(A,Yf),e(Yf,yle),e(yle,Lro),e(Yf,yro),e(Yf,JP),e(JP,xro),e(Yf,$ro),e(A,kro),e(A,Kf),e(Kf,xle),e(xle,Sro),e(Kf,Rro),e(Kf,YP),e(YP,Pro),e(Kf,Bro),e(A,Iro),e(A,Zf),e(Zf,$le),e($le,Nro),e(Zf,qro),e(Zf,KP),e(KP,jro),e(Zf,Dro),e(A,Gro),e(A,eg),e(eg,kle),e(kle,Oro),e(eg,Vro),e(eg,ZP),e(ZP,Xro),e(eg,zro),e(A,Wro),e(A,og),e(og,Sle),e(Sle,Qro),e(og,Uro),e(og,eB),e(eB,Hro),e(og,Jro),e(A,Yro),e(A,rg),e(rg,Rle),e(Rle,Kro),e(rg,Zro),e(rg,oB),e(oB,eto),e(rg,oto),e(A,rto),e(A,tg),e(tg,Ple),e(Ple,tto),e(tg,ato),e(tg,rB),e(rB,nto),e(tg,sto),e(A,lto),e(A,ag),e(ag,Ble),e(Ble,ito),e(ag,dto),e(ag,tB),e(tB,cto),e(ag,mto),e(A,fto),e(A,ng),e(ng,Ile),e(Ile,gto),e(ng,hto),e(ng,aB),e(aB,uto),e(ng,pto),e(A,_to),e(A,sg),e(sg,Nle),e(Nle,bto),e(sg,vto),e(sg,nB),e(nB,Fto),e(sg,Tto),e(A,Mto),e(A,lg),e(lg,qle),e(qle,Eto),e(lg,Cto),e(lg,sB),e(sB,wto),e(lg,Ato),e(A,Lto),e(A,ig),e(ig,jle),e(jle,yto),e(ig,xto),e(ig,lB),e(lB,$to),e(ig,kto),e(A,Sto),e(A,dg),e(dg,Dle),e(Dle,Rto),e(dg,Pto),e(dg,iB),e(iB,Bto),e(dg,Ito),e(A,Nto),e(A,cg),e(cg,Gle),e(Gle,qto),e(cg,jto),e(cg,dB),e(dB,Dto),e(cg,Gto),e(A,Oto),e(A,mg),e(mg,Ole),e(Ole,Vto),e(mg,Xto),e(mg,cB),e(cB,zto),e(mg,Wto),e(A,Qto),e(A,fg),e(fg,Vle),e(Vle,Uto),e(fg,Hto),e(fg,mB),e(mB,Jto),e(fg,Yto),e(A,Kto),e(A,gg),e(gg,Xle),e(Xle,Zto),e(gg,eao),e(gg,fB),e(fB,oao),e(gg,rao),e(A,tao),e(A,hg),e(hg,zle),e(zle,aao),e(hg,nao),e(hg,gB),e(gB,sao),e(hg,lao),e(A,iao),e(A,ug),e(ug,Wle),e(Wle,dao),e(ug,cao),e(ug,hB),e(hB,mao),e(ug,fao),e(A,gao),e(A,pg),e(pg,Qle),e(Qle,hao),e(pg,uao),e(pg,uB),e(uB,pao),e(pg,_ao),e(A,bao),e(A,_g),e(_g,Ule),e(Ule,vao),e(_g,Fao),e(_g,pB),e(pB,Tao),e(_g,Mao),e(A,Eao),e(A,bg),e(bg,Hle),e(Hle,Cao),e(bg,wao),e(bg,_B),e(_B,Aao),e(bg,Lao),e(A,yao),e(A,vg),e(vg,Jle),e(Jle,xao),e(vg,$ao),e(vg,bB),e(bB,kao),e(vg,Sao),e(A,Rao),e(A,Fg),e(Fg,Yle),e(Yle,Pao),e(Fg,Bao),e(Fg,vB),e(vB,Iao),e(Fg,Nao),e(A,qao),e(A,Tg),e(Tg,Kle),e(Kle,jao),e(Tg,Dao),e(Tg,FB),e(FB,Gao),e(Tg,Oao),e(A,Vao),e(A,Mg),e(Mg,Zle),e(Zle,Xao),e(Mg,zao),e(Mg,TB),e(TB,Wao),e(Mg,Qao),e(A,Uao),e(A,Eg),e(Eg,eie),e(eie,Hao),e(Eg,Jao),e(Eg,MB),e(MB,Yao),e(Eg,Kao),e(A,Zao),e(A,Cg),e(Cg,oie),e(oie,eno),e(Cg,ono),e(Cg,EB),e(EB,rno),e(Cg,tno),e(A,ano),e(A,wg),e(wg,rie),e(rie,nno),e(wg,sno),e(wg,CB),e(CB,lno),e(wg,ino),e(A,dno),e(A,Ag),e(Ag,tie),e(tie,cno),e(Ag,mno),e(Ag,wB),e(wB,fno),e(Ag,gno),e(A,hno),e(A,Lg),e(Lg,aie),e(aie,uno),e(Lg,pno),e(Lg,AB),e(AB,_no),e(Lg,bno),e(A,vno),e(A,yg),e(yg,nie),e(nie,Fno),e(yg,Tno),e(yg,LB),e(LB,Mno),e(yg,Eno),e(A,Cno),e(A,xg),e(xg,sie),e(sie,wno),e(xg,Ano),e(xg,yB),e(yB,Lno),e(xg,yno),e(A,xno),e(A,$g),e($g,lie),e(lie,$no),e($g,kno),e($g,xB),e(xB,Sno),e($g,Rno),e(A,Pno),e(A,kg),e(kg,iie),e(iie,Bno),e(kg,Ino),e(kg,$B),e($B,Nno),e(kg,qno),e(A,jno),e(A,Sg),e(Sg,die),e(die,Dno),e(Sg,Gno),e(Sg,kB),e(kB,Ono),e(Sg,Vno),e(A,Xno),e(A,Rg),e(Rg,cie),e(cie,zno),e(Rg,Wno),e(Rg,SB),e(SB,Qno),e(Rg,Uno),e(A,Hno),e(A,Pg),e(Pg,mie),e(mie,Jno),e(Pg,Yno),e(Pg,RB),e(RB,Kno),e(Pg,Zno),e(A,eso),e(A,Bg),e(Bg,fie),e(fie,oso),e(Bg,rso),e(Bg,PB),e(PB,tso),e(Bg,aso),e(A,nso),e(A,Ig),e(Ig,gie),e(gie,sso),e(Ig,lso),e(Ig,BB),e(BB,iso),e(Ig,dso),e(A,cso),e(A,Ng),e(Ng,hie),e(hie,mso),e(Ng,fso),e(Ng,IB),e(IB,gso),e(Ng,hso),e(A,uso),e(A,qg),e(qg,uie),e(uie,pso),e(qg,_so),e(qg,NB),e(NB,bso),e(qg,vso),e(A,Fso),e(A,jg),e(jg,pie),e(pie,Tso),e(jg,Mso),e(jg,qB),e(qB,Eso),e(jg,Cso),e(A,wso),e(A,Dg),e(Dg,_ie),e(_ie,Aso),e(Dg,Lso),e(Dg,jB),e(jB,yso),e(Dg,xso),e(A,$so),e(A,Gg),e(Gg,bie),e(bie,kso),e(Gg,Sso),e(Gg,DB),e(DB,Rso),e(Gg,Pso),e(A,Bso),e(A,Og),e(Og,vie),e(vie,Iso),e(Og,Nso),e(Og,GB),e(GB,qso),e(Og,jso),e(A,Dso),e(A,Vg),e(Vg,Fie),e(Fie,Gso),e(Vg,Oso),e(Vg,OB),e(OB,Vso),e(Vg,Xso),e(A,zso),e(A,Xg),e(Xg,Tie),e(Tie,Wso),e(Xg,Qso),e(Xg,VB),e(VB,Uso),e(Xg,Hso),e(A,Jso),e(A,zg),e(zg,Mie),e(Mie,Yso),e(zg,Kso),e(zg,XB),e(XB,Zso),e(zg,elo),e(A,olo),e(A,Wg),e(Wg,Eie),e(Eie,rlo),e(Wg,tlo),e(Wg,zB),e(zB,alo),e(Wg,nlo),e(A,slo),e(A,Qg),e(Qg,Cie),e(Cie,llo),e(Qg,ilo),e(Qg,WB),e(WB,dlo),e(Qg,clo),e(A,mlo),e(A,Ug),e(Ug,wie),e(wie,flo),e(Ug,glo),e(Ug,QB),e(QB,hlo),e(Ug,ulo),e(A,plo),e(A,Hg),e(Hg,Aie),e(Aie,_lo),e(Hg,blo),e(Hg,UB),e(UB,vlo),e(Hg,Flo),e(A,Tlo),e(A,Jg),e(Jg,Lie),e(Lie,Mlo),e(Jg,Elo),e(Jg,HB),e(HB,Clo),e(Jg,wlo),e(A,Alo),e(A,Yg),e(Yg,yie),e(yie,Llo),e(Yg,ylo),e(Yg,JB),e(JB,xlo),e(Yg,$lo),e(A,klo),e(A,Kg),e(Kg,xie),e(xie,Slo),e(Kg,Rlo),e(Kg,YB),e(YB,Plo),e(Kg,Blo),e(A,Ilo),e(A,Zg),e(Zg,$ie),e($ie,Nlo),e(Zg,qlo),e(Zg,KB),e(KB,jlo),e(Zg,Dlo),e(A,Glo),e(A,eh),e(eh,kie),e(kie,Olo),e(eh,Vlo),e(eh,ZB),e(ZB,Xlo),e(eh,zlo),e(A,Wlo),e(A,oh),e(oh,Sie),e(Sie,Qlo),e(oh,Ulo),e(oh,eI),e(eI,Hlo),e(oh,Jlo),e(A,Ylo),e(A,rh),e(rh,Rie),e(Rie,Klo),e(rh,Zlo),e(rh,oI),e(oI,eio),e(rh,oio),e(A,rio),e(A,th),e(th,Pie),e(Pie,tio),e(th,aio),e(th,rI),e(rI,nio),e(th,sio),e(A,lio),e(A,ah),e(ah,Bie),e(Bie,iio),e(ah,dio),e(ah,tI),e(tI,cio),e(ah,mio),e(A,fio),e(A,nh),e(nh,Iie),e(Iie,gio),e(nh,hio),e(nh,aI),e(aI,uio),e(nh,pio),e(A,_io),e(A,sh),e(sh,Nie),e(Nie,bio),e(sh,vio),e(sh,nI),e(nI,Fio),e(sh,Tio),e(A,Mio),e(A,lh),e(lh,qie),e(qie,Eio),e(lh,Cio),e(lh,sI),e(sI,wio),e(lh,Aio),e(A,Lio),e(A,ih),e(ih,jie),e(jie,yio),e(ih,xio),e(ih,lI),e(lI,$io),e(ih,kio),e(A,Sio),e(A,dh),e(dh,Die),e(Die,Rio),e(dh,Pio),e(dh,iI),e(iI,Bio),e(dh,Iio),e(A,Nio),e(A,ch),e(ch,Gie),e(Gie,qio),e(ch,jio),e(ch,dI),e(dI,Dio),e(ch,Gio),e(A,Oio),e(A,mh),e(mh,Oie),e(Oie,Vio),e(mh,Xio),e(mh,cI),e(cI,zio),e(mh,Wio),e(A,Qio),e(A,fh),e(fh,Vie),e(Vie,Uio),e(fh,Hio),e(fh,mI),e(mI,Jio),e(fh,Yio),e(A,Kio),e(A,gh),e(gh,Xie),e(Xie,Zio),e(gh,edo),e(gh,fI),e(fI,odo),e(gh,rdo),e(A,tdo),e(A,hh),e(hh,zie),e(zie,ado),e(hh,ndo),e(hh,gI),e(gI,sdo),e(hh,ldo),e(A,ido),e(A,uh),e(uh,Wie),e(Wie,ddo),e(uh,cdo),e(uh,hI),e(hI,mdo),e(uh,fdo),e(A,gdo),e(A,ph),e(ph,Qie),e(Qie,hdo),e(ph,udo),e(ph,uI),e(uI,pdo),e(ph,_do),e(A,bdo),e(A,_h),e(_h,Uie),e(Uie,vdo),e(_h,Fdo),e(_h,pI),e(pI,Tdo),e(_h,Mdo),e(A,Edo),e(A,bh),e(bh,Hie),e(Hie,Cdo),e(bh,wdo),e(bh,_I),e(_I,Ado),e(bh,Ldo),e(A,ydo),e(A,vh),e(vh,Jie),e(Jie,xdo),e(vh,$do),e(vh,bI),e(bI,kdo),e(vh,Sdo),e(kr,Rdo),M(Fh,kr,null),e(yo,Pdo),e(yo,Th),M(p8,Th,null),e(Th,Bdo),e(Th,Yie),e(Yie,Ido),b(m,kQe,_),b(m,Ki,_),e(Ki,Mh),e(Mh,Kie),M(_8,Kie,null),e(Ki,Ndo),e(Ki,Zie),e(Zie,qdo),b(m,SQe,_),b(m,xo,_),M(b8,xo,null),e(xo,jdo),e(xo,v8),e(v8,Ddo),e(v8,vI),e(vI,Gdo),e(v8,Odo),e(xo,Vdo),e(xo,F8),e(F8,Xdo),e(F8,ede),e(ede,zdo),e(F8,Wdo),e(xo,Qdo),e(xo,Sr),M(T8,Sr,null),e(Sr,Udo),e(Sr,ode),e(ode,Hdo),e(Sr,Jdo),e(Sr,Ga),e(Ga,Ydo),e(Ga,rde),e(rde,Kdo),e(Ga,Zdo),e(Ga,tde),e(tde,eco),e(Ga,oco),e(Ga,ade),e(ade,rco),e(Ga,tco),e(Sr,aco),e(Sr,k),e(k,Hn),e(Hn,nde),e(nde,nco),e(Hn,sco),e(Hn,FI),e(FI,lco),e(Hn,ico),e(Hn,TI),e(TI,dco),e(Hn,cco),e(k,mco),e(k,Jn),e(Jn,sde),e(sde,fco),e(Jn,gco),e(Jn,MI),e(MI,hco),e(Jn,uco),e(Jn,EI),e(EI,pco),e(Jn,_co),e(k,bco),e(k,Yn),e(Yn,lde),e(lde,vco),e(Yn,Fco),e(Yn,CI),e(CI,Tco),e(Yn,Mco),e(Yn,wI),e(wI,Eco),e(Yn,Cco),e(k,wco),e(k,Eh),e(Eh,ide),e(ide,Aco),e(Eh,Lco),e(Eh,AI),e(AI,yco),e(Eh,xco),e(k,$co),e(k,Kn),e(Kn,dde),e(dde,kco),e(Kn,Sco),e(Kn,LI),e(LI,Rco),e(Kn,Pco),e(Kn,yI),e(yI,Bco),e(Kn,Ico),e(k,Nco),e(k,Ch),e(Ch,cde),e(cde,qco),e(Ch,jco),e(Ch,xI),e(xI,Dco),e(Ch,Gco),e(k,Oco),e(k,wh),e(wh,mde),e(mde,Vco),e(wh,Xco),e(wh,$I),e($I,zco),e(wh,Wco),e(k,Qco),e(k,Ah),e(Ah,fde),e(fde,Uco),e(Ah,Hco),e(Ah,kI),e(kI,Jco),e(Ah,Yco),e(k,Kco),e(k,Zn),e(Zn,gde),e(gde,Zco),e(Zn,emo),e(Zn,SI),e(SI,omo),e(Zn,rmo),e(Zn,RI),e(RI,tmo),e(Zn,amo),e(k,nmo),e(k,es),e(es,hde),e(hde,smo),e(es,lmo),e(es,PI),e(PI,imo),e(es,dmo),e(es,BI),e(BI,cmo),e(es,mmo),e(k,fmo),e(k,os),e(os,ude),e(ude,gmo),e(os,hmo),e(os,II),e(II,umo),e(os,pmo),e(os,NI),e(NI,_mo),e(os,bmo),e(k,vmo),e(k,Lh),e(Lh,pde),e(pde,Fmo),e(Lh,Tmo),e(Lh,qI),e(qI,Mmo),e(Lh,Emo),e(k,Cmo),e(k,yh),e(yh,_de),e(_de,wmo),e(yh,Amo),e(yh,jI),e(jI,Lmo),e(yh,ymo),e(k,xmo),e(k,xh),e(xh,bde),e(bde,$mo),e(xh,kmo),e(xh,DI),e(DI,Smo),e(xh,Rmo),e(k,Pmo),e(k,rs),e(rs,vde),e(vde,Bmo),e(rs,Imo),e(rs,GI),e(GI,Nmo),e(rs,qmo),e(rs,OI),e(OI,jmo),e(rs,Dmo),e(k,Gmo),e(k,$h),e($h,Fde),e(Fde,Omo),e($h,Vmo),e($h,VI),e(VI,Xmo),e($h,zmo),e(k,Wmo),e(k,ts),e(ts,Tde),e(Tde,Qmo),e(ts,Umo),e(ts,XI),e(XI,Hmo),e(ts,Jmo),e(ts,zI),e(zI,Ymo),e(ts,Kmo),e(k,Zmo),e(k,as),e(as,Mde),e(Mde,efo),e(as,ofo),e(as,WI),e(WI,rfo),e(as,tfo),e(as,QI),e(QI,afo),e(as,nfo),e(k,sfo),e(k,ns),e(ns,Ede),e(Ede,lfo),e(ns,ifo),e(ns,UI),e(UI,dfo),e(ns,cfo),e(ns,HI),e(HI,mfo),e(ns,ffo),e(k,gfo),e(k,ss),e(ss,Cde),e(Cde,hfo),e(ss,ufo),e(ss,JI),e(JI,pfo),e(ss,_fo),e(ss,YI),e(YI,bfo),e(ss,vfo),e(k,Ffo),e(k,kh),e(kh,wde),e(wde,Tfo),e(kh,Mfo),e(kh,KI),e(KI,Efo),e(kh,Cfo),e(k,wfo),e(k,ls),e(ls,Ade),e(Ade,Afo),e(ls,Lfo),e(ls,ZI),e(ZI,yfo),e(ls,xfo),e(ls,eN),e(eN,$fo),e(ls,kfo),e(k,Sfo),e(k,is),e(is,Lde),e(Lde,Rfo),e(is,Pfo),e(is,oN),e(oN,Bfo),e(is,Ifo),e(is,rN),e(rN,Nfo),e(is,qfo),e(k,jfo),e(k,ds),e(ds,yde),e(yde,Dfo),e(ds,Gfo),e(ds,tN),e(tN,Ofo),e(ds,Vfo),e(ds,aN),e(aN,Xfo),e(ds,zfo),e(k,Wfo),e(k,cs),e(cs,xde),e(xde,Qfo),e(cs,Ufo),e(cs,nN),e(nN,Hfo),e(cs,Jfo),e(cs,sN),e(sN,Yfo),e(cs,Kfo),e(k,Zfo),e(k,ms),e(ms,$de),e($de,ego),e(ms,ogo),e(ms,lN),e(lN,rgo),e(ms,tgo),e(ms,iN),e(iN,ago),e(ms,ngo),e(k,sgo),e(k,fs),e(fs,kde),e(kde,lgo),e(fs,igo),e(fs,dN),e(dN,dgo),e(fs,cgo),e(fs,cN),e(cN,mgo),e(fs,fgo),e(k,ggo),e(k,Sh),e(Sh,Sde),e(Sde,hgo),e(Sh,ugo),e(Sh,mN),e(mN,pgo),e(Sh,_go),e(k,bgo),e(k,gs),e(gs,Rde),e(Rde,vgo),e(gs,Fgo),e(gs,fN),e(fN,Tgo),e(gs,Mgo),e(gs,gN),e(gN,Ego),e(gs,Cgo),e(k,wgo),e(k,Rh),e(Rh,Pde),e(Pde,Ago),e(Rh,Lgo),e(Rh,hN),e(hN,ygo),e(Rh,xgo),e(k,$go),e(k,hs),e(hs,Bde),e(Bde,kgo),e(hs,Sgo),e(hs,uN),e(uN,Rgo),e(hs,Pgo),e(hs,pN),e(pN,Bgo),e(hs,Igo),e(k,Ngo),e(k,us),e(us,Ide),e(Ide,qgo),e(us,jgo),e(us,_N),e(_N,Dgo),e(us,Ggo),e(us,bN),e(bN,Ogo),e(us,Vgo),e(k,Xgo),e(k,ps),e(ps,Nde),e(Nde,zgo),e(ps,Wgo),e(ps,vN),e(vN,Qgo),e(ps,Ugo),e(ps,FN),e(FN,Hgo),e(ps,Jgo),e(k,Ygo),e(k,Ph),e(Ph,qde),e(qde,Kgo),e(Ph,Zgo),e(Ph,TN),e(TN,eho),e(Ph,oho),e(k,rho),e(k,_s),e(_s,jde),e(jde,tho),e(_s,aho),e(_s,MN),e(MN,nho),e(_s,sho),e(_s,EN),e(EN,lho),e(_s,iho),e(k,dho),e(k,bs),e(bs,Dde),e(Dde,cho),e(bs,mho),e(bs,CN),e(CN,fho),e(bs,gho),e(bs,wN),e(wN,hho),e(bs,uho),e(k,pho),e(k,vs),e(vs,Gde),e(Gde,_ho),e(vs,bho),e(vs,AN),e(AN,vho),e(vs,Fho),e(vs,LN),e(LN,Tho),e(vs,Mho),e(k,Eho),e(k,Bh),e(Bh,Ode),e(Ode,Cho),e(Bh,who),e(Bh,yN),e(yN,Aho),e(Bh,Lho),e(k,yho),e(k,Fs),e(Fs,Vde),e(Vde,xho),e(Fs,$ho),e(Fs,xN),e(xN,kho),e(Fs,Sho),e(Fs,$N),e($N,Rho),e(Fs,Pho),e(k,Bho),e(k,Ts),e(Ts,Xde),e(Xde,Iho),e(Ts,Nho),e(Ts,kN),e(kN,qho),e(Ts,jho),e(Ts,SN),e(SN,Dho),e(Ts,Gho),e(k,Oho),e(k,Ms),e(Ms,zde),e(zde,Vho),e(Ms,Xho),e(Ms,RN),e(RN,zho),e(Ms,Who),e(Ms,PN),e(PN,Qho),e(Ms,Uho),e(k,Hho),e(k,Es),e(Es,Wde),e(Wde,Jho),e(Es,Yho),e(Es,BN),e(BN,Kho),e(Es,Zho),e(Es,IN),e(IN,euo),e(Es,ouo),e(k,ruo),e(k,Cs),e(Cs,Qde),e(Qde,tuo),e(Cs,auo),e(Cs,NN),e(NN,nuo),e(Cs,suo),e(Cs,qN),e(qN,luo),e(Cs,iuo),e(k,duo),e(k,ws),e(ws,Ude),e(Ude,cuo),e(ws,muo),e(ws,jN),e(jN,fuo),e(ws,guo),e(ws,DN),e(DN,huo),e(ws,uuo),e(k,puo),e(k,As),e(As,Hde),e(Hde,_uo),e(As,buo),e(As,GN),e(GN,vuo),e(As,Fuo),e(As,ON),e(ON,Tuo),e(As,Muo),e(k,Euo),e(k,Ls),e(Ls,Jde),e(Jde,Cuo),e(Ls,wuo),e(Ls,VN),e(VN,Auo),e(Ls,Luo),e(Ls,XN),e(XN,yuo),e(Ls,xuo),e(k,$uo),e(k,Ih),e(Ih,Yde),e(Yde,kuo),e(Ih,Suo),e(Ih,zN),e(zN,Ruo),e(Ih,Puo),e(k,Buo),e(k,ys),e(ys,Kde),e(Kde,Iuo),e(ys,Nuo),e(ys,WN),e(WN,quo),e(ys,juo),e(ys,QN),e(QN,Duo),e(ys,Guo),e(k,Ouo),e(k,Nh),e(Nh,Zde),e(Zde,Vuo),e(Nh,Xuo),e(Nh,UN),e(UN,zuo),e(Nh,Wuo),e(k,Quo),e(k,qh),e(qh,ece),e(ece,Uuo),e(qh,Huo),e(qh,HN),e(HN,Juo),e(qh,Yuo),e(k,Kuo),e(k,xs),e(xs,oce),e(oce,Zuo),e(xs,epo),e(xs,JN),e(JN,opo),e(xs,rpo),e(xs,YN),e(YN,tpo),e(xs,apo),e(k,npo),e(k,$s),e($s,rce),e(rce,spo),e($s,lpo),e($s,KN),e(KN,ipo),e($s,dpo),e($s,ZN),e(ZN,cpo),e($s,mpo),e(k,fpo),e(k,ks),e(ks,tce),e(tce,gpo),e(ks,hpo),e(ks,eq),e(eq,upo),e(ks,ppo),e(ks,oq),e(oq,_po),e(ks,bpo),e(k,vpo),e(k,jh),e(jh,ace),e(ace,Fpo),e(jh,Tpo),e(jh,rq),e(rq,Mpo),e(jh,Epo),e(k,Cpo),e(k,Ss),e(Ss,nce),e(nce,wpo),e(Ss,Apo),e(Ss,tq),e(tq,Lpo),e(Ss,ypo),e(Ss,aq),e(aq,xpo),e(Ss,$po),e(k,kpo),e(k,Rs),e(Rs,sce),e(sce,Spo),e(Rs,Rpo),e(Rs,nq),e(nq,Ppo),e(Rs,Bpo),e(Rs,sq),e(sq,Ipo),e(Rs,Npo),e(k,qpo),e(k,Ps),e(Ps,lce),e(lce,jpo),e(Ps,Dpo),e(Ps,lq),e(lq,Gpo),e(Ps,Opo),e(Ps,iq),e(iq,Vpo),e(Ps,Xpo),e(k,zpo),e(k,Bs),e(Bs,ice),e(ice,Wpo),e(Bs,Qpo),e(Bs,dq),e(dq,Upo),e(Bs,Hpo),e(Bs,cq),e(cq,Jpo),e(Bs,Ypo),e(k,Kpo),e(k,Is),e(Is,dce),e(dce,Zpo),e(Is,e_o),e(Is,mq),e(mq,o_o),e(Is,r_o),e(Is,fq),e(fq,t_o),e(Is,a_o),e(k,n_o),e(k,Ns),e(Ns,cce),e(cce,s_o),e(Ns,l_o),e(Ns,gq),e(gq,i_o),e(Ns,d_o),e(Ns,hq),e(hq,c_o),e(Ns,m_o),e(k,f_o),e(k,qs),e(qs,mce),e(mce,g_o),e(qs,h_o),e(qs,uq),e(uq,u_o),e(qs,p_o),e(qs,pq),e(pq,__o),e(qs,b_o),e(k,v_o),e(k,js),e(js,fce),e(fce,F_o),e(js,T_o),e(js,_q),e(_q,M_o),e(js,E_o),e(js,bq),e(bq,C_o),e(js,w_o),e(k,A_o),e(k,Dh),e(Dh,gce),e(gce,L_o),e(Dh,y_o),e(Dh,vq),e(vq,x_o),e(Dh,$_o),e(k,k_o),e(k,Ds),e(Ds,hce),e(hce,S_o),e(Ds,R_o),e(Ds,Fq),e(Fq,P_o),e(Ds,B_o),e(Ds,Tq),e(Tq,I_o),e(Ds,N_o),e(k,q_o),e(k,Gs),e(Gs,uce),e(uce,j_o),e(Gs,D_o),e(Gs,Mq),e(Mq,G_o),e(Gs,O_o),e(Gs,Eq),e(Eq,V_o),e(Gs,X_o),e(k,z_o),e(k,Gh),e(Gh,pce),e(pce,W_o),e(Gh,Q_o),e(Gh,Cq),e(Cq,U_o),e(Gh,H_o),e(k,J_o),e(k,Oh),e(Oh,_ce),e(_ce,Y_o),e(Oh,K_o),e(Oh,wq),e(wq,Z_o),e(Oh,e2o),e(k,o2o),e(k,Vh),e(Vh,bce),e(bce,r2o),e(Vh,t2o),e(Vh,Aq),e(Aq,a2o),e(Vh,n2o),e(k,s2o),e(k,Xh),e(Xh,vce),e(vce,l2o),e(Xh,i2o),e(Xh,Lq),e(Lq,d2o),e(Xh,c2o),e(k,m2o),e(k,Os),e(Os,Fce),e(Fce,f2o),e(Os,g2o),e(Os,yq),e(yq,h2o),e(Os,u2o),e(Os,xq),e(xq,p2o),e(Os,_2o),e(k,b2o),e(k,zh),e(zh,Tce),e(Tce,v2o),e(zh,F2o),e(zh,$q),e($q,T2o),e(zh,M2o),e(k,E2o),e(k,Vs),e(Vs,Mce),e(Mce,C2o),e(Vs,w2o),e(Vs,kq),e(kq,A2o),e(Vs,L2o),e(Vs,Sq),e(Sq,y2o),e(Vs,x2o),e(k,$2o),e(k,Xs),e(Xs,Ece),e(Ece,k2o),e(Xs,S2o),e(Xs,Rq),e(Rq,R2o),e(Xs,P2o),e(Xs,Pq),e(Pq,B2o),e(Xs,I2o),e(k,N2o),e(k,zs),e(zs,Cce),e(Cce,q2o),e(zs,j2o),e(zs,Bq),e(Bq,D2o),e(zs,G2o),e(zs,Iq),e(Iq,O2o),e(zs,V2o),e(k,X2o),e(k,Ws),e(Ws,wce),e(wce,z2o),e(Ws,W2o),e(Ws,Nq),e(Nq,Q2o),e(Ws,U2o),e(Ws,qq),e(qq,H2o),e(Ws,J2o),e(k,Y2o),e(k,Qs),e(Qs,Ace),e(Ace,K2o),e(Qs,Z2o),e(Qs,jq),e(jq,ebo),e(Qs,obo),e(Qs,Dq),e(Dq,rbo),e(Qs,tbo),e(k,abo),e(k,Us),e(Us,Lce),e(Lce,nbo),e(Us,sbo),e(Us,Gq),e(Gq,lbo),e(Us,ibo),e(Us,Oq),e(Oq,dbo),e(Us,cbo),e(k,mbo),e(k,Wh),e(Wh,yce),e(yce,fbo),e(Wh,gbo),e(Wh,Vq),e(Vq,hbo),e(Wh,ubo),e(k,pbo),e(k,Qh),e(Qh,xce),e(xce,_bo),e(Qh,bbo),e(Qh,Xq),e(Xq,vbo),e(Qh,Fbo),e(k,Tbo),e(k,Hs),e(Hs,$ce),e($ce,Mbo),e(Hs,Ebo),e(Hs,zq),e(zq,Cbo),e(Hs,wbo),e(Hs,Wq),e(Wq,Abo),e(Hs,Lbo),e(k,ybo),e(k,Js),e(Js,kce),e(kce,xbo),e(Js,$bo),e(Js,Qq),e(Qq,kbo),e(Js,Sbo),e(Js,Uq),e(Uq,Rbo),e(Js,Pbo),e(k,Bbo),e(k,Ys),e(Ys,Sce),e(Sce,Ibo),e(Ys,Nbo),e(Ys,Hq),e(Hq,qbo),e(Ys,jbo),e(Ys,Jq),e(Jq,Dbo),e(Ys,Gbo),e(k,Obo),e(k,Uh),e(Uh,Rce),e(Rce,Vbo),e(Uh,Xbo),e(Uh,Yq),e(Yq,zbo),e(Uh,Wbo),e(k,Qbo),e(k,Hh),e(Hh,Pce),e(Pce,Ubo),e(Hh,Hbo),e(Hh,Kq),e(Kq,Jbo),e(Hh,Ybo),e(k,Kbo),e(k,Jh),e(Jh,Bce),e(Bce,Zbo),e(Jh,evo),e(Jh,Zq),e(Zq,ovo),e(Jh,rvo),e(k,tvo),e(k,Ks),e(Ks,Ice),e(Ice,avo),e(Ks,nvo),e(Ks,ej),e(ej,svo),e(Ks,lvo),e(Ks,oj),e(oj,ivo),e(Ks,dvo),e(k,cvo),e(k,Zs),e(Zs,Nce),e(Nce,mvo),e(Zs,fvo),e(Zs,rj),e(rj,gvo),e(Zs,hvo),e(Zs,tj),e(tj,uvo),e(Zs,pvo),e(k,_vo),e(k,Yh),e(Yh,qce),e(qce,bvo),e(Yh,vvo),e(Yh,aj),e(aj,Fvo),e(Yh,Tvo),e(k,Mvo),e(k,Kh),e(Kh,jce),e(jce,Evo),e(Kh,Cvo),e(Kh,nj),e(nj,wvo),e(Kh,Avo),e(k,Lvo),e(k,Zh),e(Zh,Dce),e(Dce,yvo),e(Zh,xvo),e(Zh,sj),e(sj,$vo),e(Zh,kvo),e(k,Svo),e(k,el),e(el,Gce),e(Gce,Rvo),e(el,Pvo),e(el,lj),e(lj,Bvo),e(el,Ivo),e(el,ij),e(ij,Nvo),e(el,qvo),e(k,jvo),e(k,eu),e(eu,Oce),e(Oce,Dvo),e(eu,Gvo),e(eu,dj),e(dj,Ovo),e(eu,Vvo),e(k,Xvo),e(k,ou),e(ou,Vce),e(Vce,zvo),e(ou,Wvo),e(ou,cj),e(cj,Qvo),e(ou,Uvo),e(k,Hvo),e(k,ol),e(ol,Xce),e(Xce,Jvo),e(ol,Yvo),e(ol,mj),e(mj,Kvo),e(ol,Zvo),e(ol,fj),e(fj,e1o),e(ol,o1o),e(k,r1o),e(k,rl),e(rl,zce),e(zce,t1o),e(rl,a1o),e(rl,gj),e(gj,n1o),e(rl,s1o),e(rl,hj),e(hj,l1o),e(rl,i1o),e(k,d1o),e(k,tl),e(tl,Wce),e(Wce,c1o),e(tl,m1o),e(tl,uj),e(uj,f1o),e(tl,g1o),e(tl,pj),e(pj,h1o),e(tl,u1o),e(k,p1o),e(k,al),e(al,Qce),e(Qce,_1o),e(al,b1o),e(al,_j),e(_j,v1o),e(al,F1o),e(al,bj),e(bj,T1o),e(al,M1o),e(Sr,E1o),M(ru,Sr,null),e(xo,C1o),e(xo,tu),M(M8,tu,null),e(tu,w1o),e(tu,Uce),e(Uce,A1o),b(m,RQe,_),b(m,Zi,_),e(Zi,au),e(au,Hce),M(E8,Hce,null),e(Zi,L1o),e(Zi,Jce),e(Jce,y1o),b(m,PQe,_),b(m,$o,_),M(C8,$o,null),e($o,x1o),e($o,w8),e(w8,$1o),e(w8,vj),e(vj,k1o),e(w8,S1o),e($o,R1o),e($o,A8),e(A8,P1o),e(A8,Yce),e(Yce,B1o),e(A8,I1o),e($o,N1o),e($o,He),M(L8,He,null),e(He,q1o),e(He,Kce),e(Kce,j1o),e(He,D1o),e(He,Oa),e(Oa,G1o),e(Oa,Zce),e(Zce,O1o),e(Oa,V1o),e(Oa,eme),e(eme,X1o),e(Oa,z1o),e(Oa,ome),e(ome,W1o),e(Oa,Q1o),e(He,U1o),e(He,U),e(U,nu),e(nu,rme),e(rme,H1o),e(nu,J1o),e(nu,Fj),e(Fj,Y1o),e(nu,K1o),e(U,Z1o),e(U,su),e(su,tme),e(tme,eFo),e(su,oFo),e(su,Tj),e(Tj,rFo),e(su,tFo),e(U,aFo),e(U,lu),e(lu,ame),e(ame,nFo),e(lu,sFo),e(lu,Mj),e(Mj,lFo),e(lu,iFo),e(U,dFo),e(U,iu),e(iu,nme),e(nme,cFo),e(iu,mFo),e(iu,Ej),e(Ej,fFo),e(iu,gFo),e(U,hFo),e(U,du),e(du,sme),e(sme,uFo),e(du,pFo),e(du,Cj),e(Cj,_Fo),e(du,bFo),e(U,vFo),e(U,cu),e(cu,lme),e(lme,FFo),e(cu,TFo),e(cu,wj),e(wj,MFo),e(cu,EFo),e(U,CFo),e(U,mu),e(mu,ime),e(ime,wFo),e(mu,AFo),e(mu,Aj),e(Aj,LFo),e(mu,yFo),e(U,xFo),e(U,fu),e(fu,dme),e(dme,$Fo),e(fu,kFo),e(fu,Lj),e(Lj,SFo),e(fu,RFo),e(U,PFo),e(U,gu),e(gu,cme),e(cme,BFo),e(gu,IFo),e(gu,yj),e(yj,NFo),e(gu,qFo),e(U,jFo),e(U,hu),e(hu,mme),e(mme,DFo),e(hu,GFo),e(hu,xj),e(xj,OFo),e(hu,VFo),e(U,XFo),e(U,uu),e(uu,fme),e(fme,zFo),e(uu,WFo),e(uu,$j),e($j,QFo),e(uu,UFo),e(U,HFo),e(U,pu),e(pu,gme),e(gme,JFo),e(pu,YFo),e(pu,kj),e(kj,KFo),e(pu,ZFo),e(U,eTo),e(U,_u),e(_u,hme),e(hme,oTo),e(_u,rTo),e(_u,Sj),e(Sj,tTo),e(_u,aTo),e(U,nTo),e(U,bu),e(bu,ume),e(ume,sTo),e(bu,lTo),e(bu,Rj),e(Rj,iTo),e(bu,dTo),e(U,cTo),e(U,vu),e(vu,pme),e(pme,mTo),e(vu,fTo),e(vu,Pj),e(Pj,gTo),e(vu,hTo),e(U,uTo),e(U,Fu),e(Fu,_me),e(_me,pTo),e(Fu,_To),e(Fu,Bj),e(Bj,bTo),e(Fu,vTo),e(U,FTo),e(U,Tu),e(Tu,bme),e(bme,TTo),e(Tu,MTo),e(Tu,Ij),e(Ij,ETo),e(Tu,CTo),e(U,wTo),e(U,Mu),e(Mu,vme),e(vme,ATo),e(Mu,LTo),e(Mu,Nj),e(Nj,yTo),e(Mu,xTo),e(U,$To),e(U,Eu),e(Eu,Fme),e(Fme,kTo),e(Eu,STo),e(Eu,qj),e(qj,RTo),e(Eu,PTo),e(U,BTo),e(U,Cu),e(Cu,Tme),e(Tme,ITo),e(Cu,NTo),e(Cu,jj),e(jj,qTo),e(Cu,jTo),e(U,DTo),e(U,wu),e(wu,Mme),e(Mme,GTo),e(wu,OTo),e(wu,Dj),e(Dj,VTo),e(wu,XTo),e(U,zTo),e(U,Au),e(Au,Eme),e(Eme,WTo),e(Au,QTo),e(Au,Gj),e(Gj,UTo),e(Au,HTo),e(U,JTo),e(U,Lu),e(Lu,Cme),e(Cme,YTo),e(Lu,KTo),e(Lu,Oj),e(Oj,ZTo),e(Lu,eMo),e(U,oMo),e(U,yu),e(yu,wme),e(wme,rMo),e(yu,tMo),e(yu,Vj),e(Vj,aMo),e(yu,nMo),e(U,sMo),e(U,xu),e(xu,Ame),e(Ame,lMo),e(xu,iMo),e(xu,Xj),e(Xj,dMo),e(xu,cMo),e(U,mMo),e(U,$u),e($u,Lme),e(Lme,fMo),e($u,gMo),e($u,zj),e(zj,hMo),e($u,uMo),e(U,pMo),e(U,ku),e(ku,yme),e(yme,_Mo),e(ku,bMo),e(ku,Wj),e(Wj,vMo),e(ku,FMo),e(U,TMo),e(U,Su),e(Su,xme),e(xme,MMo),e(Su,EMo),e(Su,Qj),e(Qj,CMo),e(Su,wMo),e(U,AMo),e(U,Ru),e(Ru,$me),e($me,LMo),e(Ru,yMo),e(Ru,Uj),e(Uj,xMo),e(Ru,$Mo),e(U,kMo),e(U,Pu),e(Pu,kme),e(kme,SMo),e(Pu,RMo),e(Pu,Hj),e(Hj,PMo),e(Pu,BMo),e(U,IMo),e(U,Bu),e(Bu,Sme),e(Sme,NMo),e(Bu,qMo),e(Bu,Jj),e(Jj,jMo),e(Bu,DMo),e(U,GMo),e(U,Iu),e(Iu,Rme),e(Rme,OMo),e(Iu,VMo),e(Iu,Yj),e(Yj,XMo),e(Iu,zMo),e(U,WMo),e(U,Nu),e(Nu,Pme),e(Pme,QMo),e(Nu,UMo),e(Nu,Kj),e(Kj,HMo),e(Nu,JMo),e(U,YMo),e(U,qu),e(qu,Bme),e(Bme,KMo),e(qu,ZMo),e(qu,Zj),e(Zj,eEo),e(qu,oEo),e(U,rEo),e(U,ju),e(ju,Ime),e(Ime,tEo),e(ju,aEo),e(ju,eD),e(eD,nEo),e(ju,sEo),e(U,lEo),e(U,Du),e(Du,Nme),e(Nme,iEo),e(Du,dEo),e(Du,oD),e(oD,cEo),e(Du,mEo),e(U,fEo),e(U,Gu),e(Gu,qme),e(qme,gEo),e(Gu,hEo),e(Gu,rD),e(rD,uEo),e(Gu,pEo),e(He,_Eo),M(Ou,He,null),e(He,bEo),M(Vu,He,null),e($o,vEo),e($o,Xu),M(y8,Xu,null),e(Xu,FEo),e(Xu,jme),e(jme,TEo),b(m,BQe,_),b(m,ed,_),e(ed,zu),e(zu,Dme),M(x8,Dme,null),e(ed,MEo),e(ed,Gme),e(Gme,EEo),b(m,IQe,_),b(m,ko,_),M($8,ko,null),e(ko,CEo),e(ko,k8),e(k8,wEo),e(k8,tD),e(tD,AEo),e(k8,LEo),e(ko,yEo),e(ko,S8),e(S8,xEo),e(S8,Ome),e(Ome,$Eo),e(S8,kEo),e(ko,SEo),e(ko,Je),M(R8,Je,null),e(Je,REo),e(Je,Vme),e(Vme,PEo),e(Je,BEo),e(Je,od),e(od,IEo),e(od,Xme),e(Xme,NEo),e(od,qEo),e(od,zme),e(zme,jEo),e(od,DEo),e(Je,GEo),e(Je,me),e(me,Wu),e(Wu,Wme),e(Wme,OEo),e(Wu,VEo),e(Wu,aD),e(aD,XEo),e(Wu,zEo),e(me,WEo),e(me,Qu),e(Qu,Qme),e(Qme,QEo),e(Qu,UEo),e(Qu,nD),e(nD,HEo),e(Qu,JEo),e(me,YEo),e(me,Uu),e(Uu,Ume),e(Ume,KEo),e(Uu,ZEo),e(Uu,sD),e(sD,e4o),e(Uu,o4o),e(me,r4o),e(me,Hu),e(Hu,Hme),e(Hme,t4o),e(Hu,a4o),e(Hu,lD),e(lD,n4o),e(Hu,s4o),e(me,l4o),e(me,Ju),e(Ju,Jme),e(Jme,i4o),e(Ju,d4o),e(Ju,iD),e(iD,c4o),e(Ju,m4o),e(me,f4o),e(me,Yu),e(Yu,Yme),e(Yme,g4o),e(Yu,h4o),e(Yu,dD),e(dD,u4o),e(Yu,p4o),e(me,_4o),e(me,Ku),e(Ku,Kme),e(Kme,b4o),e(Ku,v4o),e(Ku,cD),e(cD,F4o),e(Ku,T4o),e(me,M4o),e(me,Zu),e(Zu,Zme),e(Zme,E4o),e(Zu,C4o),e(Zu,mD),e(mD,w4o),e(Zu,A4o),e(me,L4o),e(me,ep),e(ep,efe),e(efe,y4o),e(ep,x4o),e(ep,fD),e(fD,$4o),e(ep,k4o),e(me,S4o),e(me,op),e(op,ofe),e(ofe,R4o),e(op,P4o),e(op,gD),e(gD,B4o),e(op,I4o),e(me,N4o),e(me,rp),e(rp,rfe),e(rfe,q4o),e(rp,j4o),e(rp,hD),e(hD,D4o),e(rp,G4o),e(me,O4o),e(me,tp),e(tp,tfe),e(tfe,V4o),e(tp,X4o),e(tp,uD),e(uD,z4o),e(tp,W4o),e(me,Q4o),e(me,ap),e(ap,afe),e(afe,U4o),e(ap,H4o),e(ap,pD),e(pD,J4o),e(ap,Y4o),e(me,K4o),e(me,np),e(np,nfe),e(nfe,Z4o),e(np,eCo),e(np,_D),e(_D,oCo),e(np,rCo),e(me,tCo),e(me,sp),e(sp,sfe),e(sfe,aCo),e(sp,nCo),e(sp,bD),e(bD,sCo),e(sp,lCo),e(me,iCo),e(me,lp),e(lp,lfe),e(lfe,dCo),e(lp,cCo),e(lp,vD),e(vD,mCo),e(lp,fCo),e(me,gCo),e(me,ip),e(ip,ife),e(ife,hCo),e(ip,uCo),e(ip,FD),e(FD,pCo),e(ip,_Co),e(me,bCo),e(me,dp),e(dp,dfe),e(dfe,vCo),e(dp,FCo),e(dp,TD),e(TD,TCo),e(dp,MCo),e(me,ECo),e(me,cp),e(cp,cfe),e(cfe,CCo),e(cp,wCo),e(cp,MD),e(MD,ACo),e(cp,LCo),e(Je,yCo),M(mp,Je,null),e(Je,xCo),M(fp,Je,null),e(ko,$Co),e(ko,gp),M(P8,gp,null),e(gp,kCo),e(gp,mfe),e(mfe,SCo),b(m,NQe,_),b(m,rd,_),e(rd,hp),e(hp,ffe),M(B8,ffe,null),e(rd,RCo),e(rd,gfe),e(gfe,PCo),b(m,qQe,_),b(m,So,_),M(I8,So,null),e(So,BCo),e(So,td),e(td,ICo),e(td,ED),e(ED,NCo),e(td,qCo),e(td,CD),e(CD,jCo),e(td,DCo),e(So,GCo),e(So,N8),e(N8,OCo),e(N8,hfe),e(hfe,VCo),e(N8,XCo),e(So,zCo),e(So,ft),M(q8,ft,null),e(ft,WCo),e(ft,ufe),e(ufe,QCo),e(ft,UCo),e(ft,ad),e(ad,HCo),e(ad,pfe),e(pfe,JCo),e(ad,YCo),e(ad,wD),e(wD,KCo),e(ad,ZCo),e(ft,e3o),M(up,ft,null),e(So,o3o),e(So,Ye),M(j8,Ye,null),e(Ye,r3o),e(Ye,_fe),e(_fe,t3o),e(Ye,a3o),e(Ye,Va),e(Va,n3o),e(Va,bfe),e(bfe,s3o),e(Va,l3o),e(Va,vfe),e(vfe,i3o),e(Va,d3o),e(Va,Ffe),e(Ffe,c3o),e(Va,m3o),e(Ye,f3o),e(Ye,y),e(y,pp),e(pp,Tfe),e(Tfe,g3o),e(pp,h3o),e(pp,AD),e(AD,u3o),e(pp,p3o),e(y,_3o),e(y,_p),e(_p,Mfe),e(Mfe,b3o),e(_p,v3o),e(_p,LD),e(LD,F3o),e(_p,T3o),e(y,M3o),e(y,bp),e(bp,Efe),e(Efe,E3o),e(bp,C3o),e(bp,yD),e(yD,w3o),e(bp,A3o),e(y,L3o),e(y,vp),e(vp,Cfe),e(Cfe,y3o),e(vp,x3o),e(vp,xD),e(xD,$3o),e(vp,k3o),e(y,S3o),e(y,Fp),e(Fp,wfe),e(wfe,R3o),e(Fp,P3o),e(Fp,$D),e($D,B3o),e(Fp,I3o),e(y,N3o),e(y,Tp),e(Tp,Afe),e(Afe,q3o),e(Tp,j3o),e(Tp,kD),e(kD,D3o),e(Tp,G3o),e(y,O3o),e(y,Mp),e(Mp,Lfe),e(Lfe,V3o),e(Mp,X3o),e(Mp,SD),e(SD,z3o),e(Mp,W3o),e(y,Q3o),e(y,Ep),e(Ep,yfe),e(yfe,U3o),e(Ep,H3o),e(Ep,RD),e(RD,J3o),e(Ep,Y3o),e(y,K3o),e(y,Cp),e(Cp,xfe),e(xfe,Z3o),e(Cp,e5o),e(Cp,PD),e(PD,o5o),e(Cp,r5o),e(y,t5o),e(y,wp),e(wp,$fe),e($fe,a5o),e(wp,n5o),e(wp,BD),e(BD,s5o),e(wp,l5o),e(y,i5o),e(y,Ap),e(Ap,kfe),e(kfe,d5o),e(Ap,c5o),e(Ap,ID),e(ID,m5o),e(Ap,f5o),e(y,g5o),e(y,Lp),e(Lp,Sfe),e(Sfe,h5o),e(Lp,u5o),e(Lp,ND),e(ND,p5o),e(Lp,_5o),e(y,b5o),e(y,yp),e(yp,Rfe),e(Rfe,v5o),e(yp,F5o),e(yp,qD),e(qD,T5o),e(yp,M5o),e(y,E5o),e(y,xp),e(xp,Pfe),e(Pfe,C5o),e(xp,w5o),e(xp,jD),e(jD,A5o),e(xp,L5o),e(y,y5o),e(y,$p),e($p,Bfe),e(Bfe,x5o),e($p,$5o),e($p,DD),e(DD,k5o),e($p,S5o),e(y,R5o),e(y,kp),e(kp,Ife),e(Ife,P5o),e(kp,B5o),e(kp,GD),e(GD,I5o),e(kp,N5o),e(y,q5o),e(y,Sp),e(Sp,Nfe),e(Nfe,j5o),e(Sp,D5o),e(Sp,OD),e(OD,G5o),e(Sp,O5o),e(y,V5o),e(y,Rp),e(Rp,qfe),e(qfe,X5o),e(Rp,z5o),e(Rp,VD),e(VD,W5o),e(Rp,Q5o),e(y,U5o),e(y,Pp),e(Pp,jfe),e(jfe,H5o),e(Pp,J5o),e(Pp,XD),e(XD,Y5o),e(Pp,K5o),e(y,Z5o),e(y,Bp),e(Bp,Dfe),e(Dfe,e0o),e(Bp,o0o),e(Bp,zD),e(zD,r0o),e(Bp,t0o),e(y,a0o),e(y,Ip),e(Ip,Gfe),e(Gfe,n0o),e(Ip,s0o),e(Ip,WD),e(WD,l0o),e(Ip,i0o),e(y,d0o),e(y,Np),e(Np,Ofe),e(Ofe,c0o),e(Np,m0o),e(Np,QD),e(QD,f0o),e(Np,g0o),e(y,h0o),e(y,qp),e(qp,Vfe),e(Vfe,u0o),e(qp,p0o),e(qp,UD),e(UD,_0o),e(qp,b0o),e(y,v0o),e(y,jp),e(jp,Xfe),e(Xfe,F0o),e(jp,T0o),e(jp,HD),e(HD,M0o),e(jp,E0o),e(y,C0o),e(y,Dp),e(Dp,zfe),e(zfe,w0o),e(Dp,A0o),e(Dp,JD),e(JD,L0o),e(Dp,y0o),e(y,x0o),e(y,Gp),e(Gp,Wfe),e(Wfe,$0o),e(Gp,k0o),e(Gp,YD),e(YD,S0o),e(Gp,R0o),e(y,P0o),e(y,Op),e(Op,Qfe),e(Qfe,B0o),e(Op,I0o),e(Op,KD),e(KD,N0o),e(Op,q0o),e(y,j0o),e(y,Vp),e(Vp,Ufe),e(Ufe,D0o),e(Vp,G0o),e(Vp,ZD),e(ZD,O0o),e(Vp,V0o),e(y,X0o),e(y,Xp),e(Xp,Hfe),e(Hfe,z0o),e(Xp,W0o),e(Xp,eG),e(eG,Q0o),e(Xp,U0o),e(y,H0o),e(y,zp),e(zp,Jfe),e(Jfe,J0o),e(zp,Y0o),e(zp,oG),e(oG,K0o),e(zp,Z0o),e(y,ewo),e(y,Wp),e(Wp,Yfe),e(Yfe,owo),e(Wp,rwo),e(Wp,rG),e(rG,two),e(Wp,awo),e(y,nwo),e(y,Qp),e(Qp,Kfe),e(Kfe,swo),e(Qp,lwo),e(Qp,tG),e(tG,iwo),e(Qp,dwo),e(y,cwo),e(y,Up),e(Up,Zfe),e(Zfe,mwo),e(Up,fwo),e(Up,aG),e(aG,gwo),e(Up,hwo),e(y,uwo),e(y,Hp),e(Hp,ege),e(ege,pwo),e(Hp,_wo),e(Hp,nG),e(nG,bwo),e(Hp,vwo),e(y,Fwo),e(y,nl),e(nl,oge),e(oge,Two),e(nl,Mwo),e(nl,sG),e(sG,Ewo),e(nl,Cwo),e(nl,lG),e(lG,wwo),e(nl,Awo),e(y,Lwo),e(y,Jp),e(Jp,rge),e(rge,ywo),e(Jp,xwo),e(Jp,iG),e(iG,$wo),e(Jp,kwo),e(y,Swo),e(y,Yp),e(Yp,tge),e(tge,Rwo),e(Yp,Pwo),e(Yp,dG),e(dG,Bwo),e(Yp,Iwo),e(y,Nwo),e(y,Kp),e(Kp,age),e(age,qwo),e(Kp,jwo),e(Kp,cG),e(cG,Dwo),e(Kp,Gwo),e(y,Owo),e(y,Zp),e(Zp,nge),e(nge,Vwo),e(Zp,Xwo),e(Zp,mG),e(mG,zwo),e(Zp,Wwo),e(y,Qwo),e(y,e_),e(e_,sge),e(sge,Uwo),e(e_,Hwo),e(e_,fG),e(fG,Jwo),e(e_,Ywo),e(y,Kwo),e(y,o_),e(o_,lge),e(lge,Zwo),e(o_,e6o),e(o_,gG),e(gG,o6o),e(o_,r6o),e(y,t6o),e(y,r_),e(r_,ige),e(ige,a6o),e(r_,n6o),e(r_,hG),e(hG,s6o),e(r_,l6o),e(y,i6o),e(y,t_),e(t_,dge),e(dge,d6o),e(t_,c6o),e(t_,uG),e(uG,m6o),e(t_,f6o),e(y,g6o),e(y,a_),e(a_,cge),e(cge,h6o),e(a_,u6o),e(a_,pG),e(pG,p6o),e(a_,_6o),e(y,b6o),e(y,n_),e(n_,mge),e(mge,v6o),e(n_,F6o),e(n_,_G),e(_G,T6o),e(n_,M6o),e(y,E6o),e(y,s_),e(s_,fge),e(fge,C6o),e(s_,w6o),e(s_,bG),e(bG,A6o),e(s_,L6o),e(y,y6o),e(y,l_),e(l_,gge),e(gge,x6o),e(l_,$6o),e(l_,vG),e(vG,k6o),e(l_,S6o),e(y,R6o),e(y,i_),e(i_,hge),e(hge,P6o),e(i_,B6o),e(i_,FG),e(FG,I6o),e(i_,N6o),e(y,q6o),e(y,d_),e(d_,uge),e(uge,j6o),e(d_,D6o),e(d_,TG),e(TG,G6o),e(d_,O6o),e(y,V6o),e(y,c_),e(c_,pge),e(pge,X6o),e(c_,z6o),e(c_,MG),e(MG,W6o),e(c_,Q6o),e(y,U6o),e(y,m_),e(m_,_ge),e(_ge,H6o),e(m_,J6o),e(m_,EG),e(EG,Y6o),e(m_,K6o),e(y,Z6o),e(y,f_),e(f_,bge),e(bge,eAo),e(f_,oAo),e(f_,CG),e(CG,rAo),e(f_,tAo),e(y,aAo),e(y,g_),e(g_,vge),e(vge,nAo),e(g_,sAo),e(g_,wG),e(wG,lAo),e(g_,iAo),e(y,dAo),e(y,h_),e(h_,Fge),e(Fge,cAo),e(h_,mAo),e(h_,AG),e(AG,fAo),e(h_,gAo),e(y,hAo),e(y,u_),e(u_,Tge),e(Tge,uAo),e(u_,pAo),e(u_,LG),e(LG,_Ao),e(u_,bAo),e(y,vAo),e(y,p_),e(p_,Mge),e(Mge,FAo),e(p_,TAo),e(p_,yG),e(yG,MAo),e(p_,EAo),e(y,CAo),e(y,__),e(__,Ege),e(Ege,wAo),e(__,AAo),e(__,xG),e(xG,LAo),e(__,yAo),e(y,xAo),e(y,b_),e(b_,Cge),e(Cge,$Ao),e(b_,kAo),e(b_,$G),e($G,SAo),e(b_,RAo),e(y,PAo),e(y,v_),e(v_,wge),e(wge,BAo),e(v_,IAo),e(v_,kG),e(kG,NAo),e(v_,qAo),e(y,jAo),e(y,F_),e(F_,Age),e(Age,DAo),e(F_,GAo),e(F_,SG),e(SG,OAo),e(F_,VAo),e(y,XAo),e(y,T_),e(T_,Lge),e(Lge,zAo),e(T_,WAo),e(T_,RG),e(RG,QAo),e(T_,UAo),e(y,HAo),e(y,M_),e(M_,yge),e(yge,JAo),e(M_,YAo),e(M_,PG),e(PG,KAo),e(M_,ZAo),e(y,e7o),e(y,E_),e(E_,xge),e(xge,o7o),e(E_,r7o),e(E_,BG),e(BG,t7o),e(E_,a7o),e(y,n7o),e(y,C_),e(C_,$ge),e($ge,s7o),e(C_,l7o),e(C_,IG),e(IG,i7o),e(C_,d7o),e(y,c7o),e(y,w_),e(w_,kge),e(kge,m7o),e(w_,f7o),e(w_,NG),e(NG,g7o),e(w_,h7o),e(y,u7o),e(y,A_),e(A_,Sge),e(Sge,p7o),e(A_,_7o),e(A_,qG),e(qG,b7o),e(A_,v7o),e(y,F7o),e(y,L_),e(L_,Rge),e(Rge,T7o),e(L_,M7o),e(L_,jG),e(jG,E7o),e(L_,C7o),e(y,w7o),e(y,y_),e(y_,Pge),e(Pge,A7o),e(y_,L7o),e(y_,DG),e(DG,y7o),e(y_,x7o),e(y,$7o),e(y,x_),e(x_,Bge),e(Bge,k7o),e(x_,S7o),e(x_,GG),e(GG,R7o),e(x_,P7o),e(y,B7o),e(y,$_),e($_,Ige),e(Ige,I7o),e($_,N7o),e($_,OG),e(OG,q7o),e($_,j7o),e(y,D7o),e(y,k_),e(k_,Nge),e(Nge,G7o),e(k_,O7o),e(k_,VG),e(VG,V7o),e(k_,X7o),e(y,z7o),e(y,S_),e(S_,qge),e(qge,W7o),e(S_,Q7o),e(S_,XG),e(XG,U7o),e(S_,H7o),e(y,J7o),e(y,R_),e(R_,jge),e(jge,Y7o),e(R_,K7o),e(R_,zG),e(zG,Z7o),e(R_,eLo),e(y,oLo),e(y,P_),e(P_,Dge),e(Dge,rLo),e(P_,tLo),e(P_,WG),e(WG,aLo),e(P_,nLo),e(y,sLo),e(y,B_),e(B_,Gge),e(Gge,lLo),e(B_,iLo),e(B_,QG),e(QG,dLo),e(B_,cLo),e(y,mLo),e(y,I_),e(I_,Oge),e(Oge,fLo),e(I_,gLo),e(I_,UG),e(UG,hLo),e(I_,uLo),e(y,pLo),e(y,N_),e(N_,Vge),e(Vge,_Lo),e(N_,bLo),e(N_,HG),e(HG,vLo),e(N_,FLo),e(y,TLo),e(y,q_),e(q_,Xge),e(Xge,MLo),e(q_,ELo),e(q_,JG),e(JG,CLo),e(q_,wLo),e(y,ALo),e(y,j_),e(j_,zge),e(zge,LLo),e(j_,yLo),e(j_,YG),e(YG,xLo),e(j_,$Lo),e(y,kLo),e(y,D_),e(D_,Wge),e(Wge,SLo),e(D_,RLo),e(D_,KG),e(KG,PLo),e(D_,BLo),e(y,ILo),e(y,G_),e(G_,Qge),e(Qge,NLo),e(G_,qLo),e(G_,ZG),e(ZG,jLo),e(G_,DLo),e(y,GLo),e(y,O_),e(O_,Uge),e(Uge,OLo),e(O_,VLo),e(O_,eO),e(eO,XLo),e(O_,zLo),e(y,WLo),e(y,V_),e(V_,Hge),e(Hge,QLo),e(V_,ULo),e(V_,oO),e(oO,HLo),e(V_,JLo),e(y,YLo),e(y,X_),e(X_,Jge),e(Jge,KLo),e(X_,ZLo),e(X_,rO),e(rO,eyo),e(X_,oyo),e(y,ryo),e(y,z_),e(z_,Yge),e(Yge,tyo),e(z_,ayo),e(z_,tO),e(tO,nyo),e(z_,syo),e(y,lyo),e(y,W_),e(W_,Kge),e(Kge,iyo),e(W_,dyo),e(W_,aO),e(aO,cyo),e(W_,myo),e(y,fyo),e(y,Q_),e(Q_,Zge),e(Zge,gyo),e(Q_,hyo),e(Q_,nO),e(nO,uyo),e(Q_,pyo),e(y,_yo),e(y,U_),e(U_,ehe),e(ehe,byo),e(U_,vyo),e(U_,sO),e(sO,Fyo),e(U_,Tyo),e(y,Myo),e(y,H_),e(H_,ohe),e(ohe,Eyo),e(H_,Cyo),e(H_,lO),e(lO,wyo),e(H_,Ayo),e(y,Lyo),e(y,J_),e(J_,rhe),e(rhe,yyo),e(J_,xyo),e(J_,iO),e(iO,$yo),e(J_,kyo),e(y,Syo),e(y,Y_),e(Y_,the),e(the,Ryo),e(Y_,Pyo),e(Y_,dO),e(dO,Byo),e(Y_,Iyo),e(y,Nyo),e(y,K_),e(K_,ahe),e(ahe,qyo),e(K_,jyo),e(K_,cO),e(cO,Dyo),e(K_,Gyo),e(y,Oyo),e(y,Z_),e(Z_,nhe),e(nhe,Vyo),e(Z_,Xyo),e(Z_,mO),e(mO,zyo),e(Z_,Wyo),e(y,Qyo),e(y,e2),e(e2,she),e(she,Uyo),e(e2,Hyo),e(e2,fO),e(fO,Jyo),e(e2,Yyo),e(y,Kyo),e(y,o2),e(o2,lhe),e(lhe,Zyo),e(o2,e8o),e(o2,gO),e(gO,o8o),e(o2,r8o),e(y,t8o),e(y,r2),e(r2,ihe),e(ihe,a8o),e(r2,n8o),e(r2,hO),e(hO,s8o),e(r2,l8o),e(y,i8o),e(y,t2),e(t2,dhe),e(dhe,d8o),e(t2,c8o),e(t2,uO),e(uO,m8o),e(t2,f8o),e(y,g8o),e(y,a2),e(a2,che),e(che,h8o),e(a2,u8o),e(a2,pO),e(pO,p8o),e(a2,_8o),e(y,b8o),e(y,n2),e(n2,mhe),e(mhe,v8o),e(n2,F8o),e(n2,_O),e(_O,T8o),e(n2,M8o),e(y,E8o),e(y,s2),e(s2,fhe),e(fhe,C8o),e(s2,w8o),e(s2,bO),e(bO,A8o),e(s2,L8o),e(y,y8o),e(y,l2),e(l2,ghe),e(ghe,x8o),e(l2,$8o),e(l2,vO),e(vO,k8o),e(l2,S8o),e(y,R8o),e(y,i2),e(i2,hhe),e(hhe,P8o),e(i2,B8o),e(i2,FO),e(FO,I8o),e(i2,N8o),e(y,q8o),e(y,d2),e(d2,uhe),e(uhe,j8o),e(d2,D8o),e(d2,TO),e(TO,G8o),e(d2,O8o),e(y,V8o),e(y,c2),e(c2,phe),e(phe,X8o),e(c2,z8o),e(c2,MO),e(MO,W8o),e(c2,Q8o),e(y,U8o),e(y,m2),e(m2,_he),e(_he,H8o),e(m2,J8o),e(m2,EO),e(EO,Y8o),e(m2,K8o),e(y,Z8o),e(y,f2),e(f2,bhe),e(bhe,e9o),e(f2,o9o),e(f2,CO),e(CO,r9o),e(f2,t9o),e(y,a9o),e(y,g2),e(g2,vhe),e(vhe,n9o),e(g2,s9o),e(g2,wO),e(wO,l9o),e(g2,i9o),e(y,d9o),e(y,h2),e(h2,Fhe),e(Fhe,c9o),e(h2,m9o),e(h2,AO),e(AO,f9o),e(h2,g9o),e(y,h9o),e(y,u2),e(u2,The),e(The,u9o),e(u2,p9o),e(u2,LO),e(LO,_9o),e(u2,b9o),e(y,v9o),e(y,p2),e(p2,Mhe),e(Mhe,F9o),e(p2,T9o),e(p2,yO),e(yO,M9o),e(p2,E9o),e(y,C9o),e(y,_2),e(_2,Ehe),e(Ehe,w9o),e(_2,A9o),e(_2,xO),e(xO,L9o),e(_2,y9o),e(y,x9o),e(y,b2),e(b2,Che),e(Che,$9o),e(b2,k9o),e(b2,$O),e($O,S9o),e(b2,R9o),e(y,P9o),e(y,v2),e(v2,whe),e(whe,B9o),e(v2,I9o),e(v2,kO),e(kO,N9o),e(v2,q9o),e(y,j9o),e(y,F2),e(F2,Ahe),e(Ahe,D9o),e(F2,G9o),e(F2,SO),e(SO,O9o),e(F2,V9o),e(y,X9o),e(y,T2),e(T2,Lhe),e(Lhe,z9o),e(T2,W9o),e(T2,RO),e(RO,Q9o),e(T2,U9o),e(Ye,H9o),e(Ye,M2),e(M2,J9o),e(M2,yhe),e(yhe,Y9o),e(M2,K9o),e(M2,xhe),e(xhe,Z9o),e(Ye,exo),M(E2,Ye,null),b(m,jQe,_),b(m,nd,_),e(nd,C2),e(C2,$he),M(D8,$he,null),e(nd,oxo),e(nd,khe),e(khe,rxo),b(m,DQe,_),b(m,Ro,_),M(G8,Ro,null),e(Ro,txo),e(Ro,sd),e(sd,axo),e(sd,PO),e(PO,nxo),e(sd,sxo),e(sd,BO),e(BO,lxo),e(sd,ixo),e(Ro,dxo),e(Ro,O8),e(O8,cxo),e(O8,She),e(She,mxo),e(O8,fxo),e(Ro,gxo),e(Ro,gt),M(V8,gt,null),e(gt,hxo),e(gt,Rhe),e(Rhe,uxo),e(gt,pxo),e(gt,ld),e(ld,_xo),e(ld,Phe),e(Phe,bxo),e(ld,vxo),e(ld,IO),e(IO,Fxo),e(ld,Txo),e(gt,Mxo),M(w2,gt,null),e(Ro,Exo),e(Ro,Ke),M(X8,Ke,null),e(Ke,Cxo),e(Ke,Bhe),e(Bhe,wxo),e(Ke,Axo),e(Ke,Xa),e(Xa,Lxo),e(Xa,Ihe),e(Ihe,yxo),e(Xa,xxo),e(Xa,Nhe),e(Nhe,$xo),e(Xa,kxo),e(Xa,qhe),e(qhe,Sxo),e(Xa,Rxo),e(Ke,Pxo),e(Ke,G),e(G,A2),e(A2,jhe),e(jhe,Bxo),e(A2,Ixo),e(A2,NO),e(NO,Nxo),e(A2,qxo),e(G,jxo),e(G,L2),e(L2,Dhe),e(Dhe,Dxo),e(L2,Gxo),e(L2,qO),e(qO,Oxo),e(L2,Vxo),e(G,Xxo),e(G,y2),e(y2,Ghe),e(Ghe,zxo),e(y2,Wxo),e(y2,jO),e(jO,Qxo),e(y2,Uxo),e(G,Hxo),e(G,x2),e(x2,Ohe),e(Ohe,Jxo),e(x2,Yxo),e(x2,DO),e(DO,Kxo),e(x2,Zxo),e(G,e$o),e(G,$2),e($2,Vhe),e(Vhe,o$o),e($2,r$o),e($2,GO),e(GO,t$o),e($2,a$o),e(G,n$o),e(G,k2),e(k2,Xhe),e(Xhe,s$o),e(k2,l$o),e(k2,OO),e(OO,i$o),e(k2,d$o),e(G,c$o),e(G,S2),e(S2,zhe),e(zhe,m$o),e(S2,f$o),e(S2,VO),e(VO,g$o),e(S2,h$o),e(G,u$o),e(G,R2),e(R2,Whe),e(Whe,p$o),e(R2,_$o),e(R2,XO),e(XO,b$o),e(R2,v$o),e(G,F$o),e(G,P2),e(P2,Qhe),e(Qhe,T$o),e(P2,M$o),e(P2,zO),e(zO,E$o),e(P2,C$o),e(G,w$o),e(G,B2),e(B2,Uhe),e(Uhe,A$o),e(B2,L$o),e(B2,WO),e(WO,y$o),e(B2,x$o),e(G,$$o),e(G,I2),e(I2,Hhe),e(Hhe,k$o),e(I2,S$o),e(I2,QO),e(QO,R$o),e(I2,P$o),e(G,B$o),e(G,N2),e(N2,Jhe),e(Jhe,I$o),e(N2,N$o),e(N2,UO),e(UO,q$o),e(N2,j$o),e(G,D$o),e(G,q2),e(q2,Yhe),e(Yhe,G$o),e(q2,O$o),e(q2,HO),e(HO,V$o),e(q2,X$o),e(G,z$o),e(G,j2),e(j2,Khe),e(Khe,W$o),e(j2,Q$o),e(j2,JO),e(JO,U$o),e(j2,H$o),e(G,J$o),e(G,D2),e(D2,Zhe),e(Zhe,Y$o),e(D2,K$o),e(D2,YO),e(YO,Z$o),e(D2,eko),e(G,oko),e(G,G2),e(G2,eue),e(eue,rko),e(G2,tko),e(G2,KO),e(KO,ako),e(G2,nko),e(G,sko),e(G,O2),e(O2,oue),e(oue,lko),e(O2,iko),e(O2,ZO),e(ZO,dko),e(O2,cko),e(G,mko),e(G,V2),e(V2,rue),e(rue,fko),e(V2,gko),e(V2,eV),e(eV,hko),e(V2,uko),e(G,pko),e(G,X2),e(X2,tue),e(tue,_ko),e(X2,bko),e(X2,oV),e(oV,vko),e(X2,Fko),e(G,Tko),e(G,z2),e(z2,aue),e(aue,Mko),e(z2,Eko),e(z2,rV),e(rV,Cko),e(z2,wko),e(G,Ako),e(G,W2),e(W2,nue),e(nue,Lko),e(W2,yko),e(W2,tV),e(tV,xko),e(W2,$ko),e(G,kko),e(G,Q2),e(Q2,sue),e(sue,Sko),e(Q2,Rko),e(Q2,aV),e(aV,Pko),e(Q2,Bko),e(G,Iko),e(G,U2),e(U2,lue),e(lue,Nko),e(U2,qko),e(U2,nV),e(nV,jko),e(U2,Dko),e(G,Gko),e(G,H2),e(H2,iue),e(iue,Oko),e(H2,Vko),e(H2,sV),e(sV,Xko),e(H2,zko),e(G,Wko),e(G,J2),e(J2,due),e(due,Qko),e(J2,Uko),e(J2,lV),e(lV,Hko),e(J2,Jko),e(G,Yko),e(G,Y2),e(Y2,cue),e(cue,Kko),e(Y2,Zko),e(Y2,iV),e(iV,eSo),e(Y2,oSo),e(G,rSo),e(G,K2),e(K2,mue),e(mue,tSo),e(K2,aSo),e(K2,dV),e(dV,nSo),e(K2,sSo),e(G,lSo),e(G,Z2),e(Z2,fue),e(fue,iSo),e(Z2,dSo),e(Z2,cV),e(cV,cSo),e(Z2,mSo),e(G,fSo),e(G,eb),e(eb,gue),e(gue,gSo),e(eb,hSo),e(eb,mV),e(mV,uSo),e(eb,pSo),e(G,_So),e(G,ob),e(ob,hue),e(hue,bSo),e(ob,vSo),e(ob,fV),e(fV,FSo),e(ob,TSo),e(G,MSo),e(G,rb),e(rb,uue),e(uue,ESo),e(rb,CSo),e(rb,gV),e(gV,wSo),e(rb,ASo),e(G,LSo),e(G,tb),e(tb,pue),e(pue,ySo),e(tb,xSo),e(tb,hV),e(hV,$So),e(tb,kSo),e(G,SSo),e(G,ab),e(ab,_ue),e(_ue,RSo),e(ab,PSo),e(ab,uV),e(uV,BSo),e(ab,ISo),e(G,NSo),e(G,nb),e(nb,bue),e(bue,qSo),e(nb,jSo),e(nb,pV),e(pV,DSo),e(nb,GSo),e(G,OSo),e(G,sb),e(sb,vue),e(vue,VSo),e(sb,XSo),e(sb,_V),e(_V,zSo),e(sb,WSo),e(G,QSo),e(G,lb),e(lb,Fue),e(Fue,USo),e(lb,HSo),e(lb,bV),e(bV,JSo),e(lb,YSo),e(G,KSo),e(G,ib),e(ib,Tue),e(Tue,ZSo),e(ib,eRo),e(ib,vV),e(vV,oRo),e(ib,rRo),e(G,tRo),e(G,db),e(db,Mue),e(Mue,aRo),e(db,nRo),e(db,FV),e(FV,sRo),e(db,lRo),e(G,iRo),e(G,cb),e(cb,Eue),e(Eue,dRo),e(cb,cRo),e(cb,TV),e(TV,mRo),e(cb,fRo),e(G,gRo),e(G,mb),e(mb,Cue),e(Cue,hRo),e(mb,uRo),e(mb,MV),e(MV,pRo),e(mb,_Ro),e(G,bRo),e(G,fb),e(fb,wue),e(wue,vRo),e(fb,FRo),e(fb,EV),e(EV,TRo),e(fb,MRo),e(G,ERo),e(G,gb),e(gb,Aue),e(Aue,CRo),e(gb,wRo),e(gb,CV),e(CV,ARo),e(gb,LRo),e(G,yRo),e(G,hb),e(hb,Lue),e(Lue,xRo),e(hb,$Ro),e(hb,wV),e(wV,kRo),e(hb,SRo),e(G,RRo),e(G,ub),e(ub,yue),e(yue,PRo),e(ub,BRo),e(ub,AV),e(AV,IRo),e(ub,NRo),e(G,qRo),e(G,pb),e(pb,xue),e(xue,jRo),e(pb,DRo),e(pb,LV),e(LV,GRo),e(pb,ORo),e(G,VRo),e(G,_b),e(_b,$ue),e($ue,XRo),e(_b,zRo),e(_b,yV),e(yV,WRo),e(_b,QRo),e(G,URo),e(G,bb),e(bb,kue),e(kue,HRo),e(bb,JRo),e(bb,xV),e(xV,YRo),e(bb,KRo),e(Ke,ZRo),e(Ke,vb),e(vb,ePo),e(vb,Sue),e(Sue,oPo),e(vb,rPo),e(vb,Rue),e(Rue,tPo),e(Ke,aPo),M(Fb,Ke,null),b(m,GQe,_),b(m,id,_),e(id,Tb),e(Tb,Pue),M(z8,Pue,null),e(id,nPo),e(id,Bue),e(Bue,sPo),b(m,OQe,_),b(m,Po,_),M(W8,Po,null),e(Po,lPo),e(Po,dd),e(dd,iPo),e(dd,$V),e($V,dPo),e(dd,cPo),e(dd,kV),e(kV,mPo),e(dd,fPo),e(Po,gPo),e(Po,Q8),e(Q8,hPo),e(Q8,Iue),e(Iue,uPo),e(Q8,pPo),e(Po,_Po),e(Po,ht),M(U8,ht,null),e(ht,bPo),e(ht,Nue),e(Nue,vPo),e(ht,FPo),e(ht,cd),e(cd,TPo),e(cd,que),e(que,MPo),e(cd,EPo),e(cd,SV),e(SV,CPo),e(cd,wPo),e(ht,APo),M(Mb,ht,null),e(Po,LPo),e(Po,Ze),M(H8,Ze,null),e(Ze,yPo),e(Ze,jue),e(jue,xPo),e(Ze,$Po),e(Ze,za),e(za,kPo),e(za,Due),e(Due,SPo),e(za,RPo),e(za,Gue),e(Gue,PPo),e(za,BPo),e(za,Oue),e(Oue,IPo),e(za,NPo),e(Ze,qPo),e(Ze,z),e(z,Eb),e(Eb,Vue),e(Vue,jPo),e(Eb,DPo),e(Eb,RV),e(RV,GPo),e(Eb,OPo),e(z,VPo),e(z,Cb),e(Cb,Xue),e(Xue,XPo),e(Cb,zPo),e(Cb,PV),e(PV,WPo),e(Cb,QPo),e(z,UPo),e(z,wb),e(wb,zue),e(zue,HPo),e(wb,JPo),e(wb,BV),e(BV,YPo),e(wb,KPo),e(z,ZPo),e(z,Ab),e(Ab,Wue),e(Wue,eBo),e(Ab,oBo),e(Ab,IV),e(IV,rBo),e(Ab,tBo),e(z,aBo),e(z,Lb),e(Lb,Que),e(Que,nBo),e(Lb,sBo),e(Lb,NV),e(NV,lBo),e(Lb,iBo),e(z,dBo),e(z,yb),e(yb,Uue),e(Uue,cBo),e(yb,mBo),e(yb,qV),e(qV,fBo),e(yb,gBo),e(z,hBo),e(z,xb),e(xb,Hue),e(Hue,uBo),e(xb,pBo),e(xb,jV),e(jV,_Bo),e(xb,bBo),e(z,vBo),e(z,$b),e($b,Jue),e(Jue,FBo),e($b,TBo),e($b,DV),e(DV,MBo),e($b,EBo),e(z,CBo),e(z,kb),e(kb,Yue),e(Yue,wBo),e(kb,ABo),e(kb,GV),e(GV,LBo),e(kb,yBo),e(z,xBo),e(z,Sb),e(Sb,Kue),e(Kue,$Bo),e(Sb,kBo),e(Sb,OV),e(OV,SBo),e(Sb,RBo),e(z,PBo),e(z,Rb),e(Rb,Zue),e(Zue,BBo),e(Rb,IBo),e(Rb,VV),e(VV,NBo),e(Rb,qBo),e(z,jBo),e(z,Pb),e(Pb,epe),e(epe,DBo),e(Pb,GBo),e(Pb,XV),e(XV,OBo),e(Pb,VBo),e(z,XBo),e(z,Bb),e(Bb,ope),e(ope,zBo),e(Bb,WBo),e(Bb,zV),e(zV,QBo),e(Bb,UBo),e(z,HBo),e(z,Ib),e(Ib,rpe),e(rpe,JBo),e(Ib,YBo),e(Ib,WV),e(WV,KBo),e(Ib,ZBo),e(z,eIo),e(z,Nb),e(Nb,tpe),e(tpe,oIo),e(Nb,rIo),e(Nb,QV),e(QV,tIo),e(Nb,aIo),e(z,nIo),e(z,qb),e(qb,ape),e(ape,sIo),e(qb,lIo),e(qb,UV),e(UV,iIo),e(qb,dIo),e(z,cIo),e(z,jb),e(jb,npe),e(npe,mIo),e(jb,fIo),e(jb,HV),e(HV,gIo),e(jb,hIo),e(z,uIo),e(z,Db),e(Db,spe),e(spe,pIo),e(Db,_Io),e(Db,JV),e(JV,bIo),e(Db,vIo),e(z,FIo),e(z,Gb),e(Gb,lpe),e(lpe,TIo),e(Gb,MIo),e(Gb,YV),e(YV,EIo),e(Gb,CIo),e(z,wIo),e(z,Ob),e(Ob,ipe),e(ipe,AIo),e(Ob,LIo),e(Ob,KV),e(KV,yIo),e(Ob,xIo),e(z,$Io),e(z,Vb),e(Vb,dpe),e(dpe,kIo),e(Vb,SIo),e(Vb,ZV),e(ZV,RIo),e(Vb,PIo),e(z,BIo),e(z,Xb),e(Xb,cpe),e(cpe,IIo),e(Xb,NIo),e(Xb,eX),e(eX,qIo),e(Xb,jIo),e(z,DIo),e(z,zb),e(zb,mpe),e(mpe,GIo),e(zb,OIo),e(zb,oX),e(oX,VIo),e(zb,XIo),e(z,zIo),e(z,Wb),e(Wb,fpe),e(fpe,WIo),e(Wb,QIo),e(Wb,rX),e(rX,UIo),e(Wb,HIo),e(z,JIo),e(z,Qb),e(Qb,gpe),e(gpe,YIo),e(Qb,KIo),e(Qb,tX),e(tX,ZIo),e(Qb,eNo),e(z,oNo),e(z,Ub),e(Ub,hpe),e(hpe,rNo),e(Ub,tNo),e(Ub,aX),e(aX,aNo),e(Ub,nNo),e(z,sNo),e(z,Hb),e(Hb,upe),e(upe,lNo),e(Hb,iNo),e(Hb,nX),e(nX,dNo),e(Hb,cNo),e(z,mNo),e(z,Jb),e(Jb,ppe),e(ppe,fNo),e(Jb,gNo),e(Jb,sX),e(sX,hNo),e(Jb,uNo),e(z,pNo),e(z,Yb),e(Yb,_pe),e(_pe,_No),e(Yb,bNo),e(Yb,lX),e(lX,vNo),e(Yb,FNo),e(z,TNo),e(z,Kb),e(Kb,bpe),e(bpe,MNo),e(Kb,ENo),e(Kb,iX),e(iX,CNo),e(Kb,wNo),e(z,ANo),e(z,Zb),e(Zb,vpe),e(vpe,LNo),e(Zb,yNo),e(Zb,dX),e(dX,xNo),e(Zb,$No),e(z,kNo),e(z,ev),e(ev,Fpe),e(Fpe,SNo),e(ev,RNo),e(ev,cX),e(cX,PNo),e(ev,BNo),e(z,INo),e(z,ov),e(ov,Tpe),e(Tpe,NNo),e(ov,qNo),e(ov,mX),e(mX,jNo),e(ov,DNo),e(z,GNo),e(z,rv),e(rv,Mpe),e(Mpe,ONo),e(rv,VNo),e(rv,fX),e(fX,XNo),e(rv,zNo),e(z,WNo),e(z,tv),e(tv,Epe),e(Epe,QNo),e(tv,UNo),e(tv,gX),e(gX,HNo),e(tv,JNo),e(z,YNo),e(z,av),e(av,Cpe),e(Cpe,KNo),e(av,ZNo),e(av,hX),e(hX,eqo),e(av,oqo),e(z,rqo),e(z,nv),e(nv,wpe),e(wpe,tqo),e(nv,aqo),e(nv,uX),e(uX,nqo),e(nv,sqo),e(z,lqo),e(z,sv),e(sv,Ape),e(Ape,iqo),e(sv,dqo),e(sv,pX),e(pX,cqo),e(sv,mqo),e(z,fqo),e(z,lv),e(lv,Lpe),e(Lpe,gqo),e(lv,hqo),e(lv,_X),e(_X,uqo),e(lv,pqo),e(z,_qo),e(z,iv),e(iv,ype),e(ype,bqo),e(iv,vqo),e(iv,bX),e(bX,Fqo),e(iv,Tqo),e(Ze,Mqo),e(Ze,dv),e(dv,Eqo),e(dv,xpe),e(xpe,Cqo),e(dv,wqo),e(dv,$pe),e($pe,Aqo),e(Ze,Lqo),M(cv,Ze,null),b(m,VQe,_),b(m,md,_),e(md,mv),e(mv,kpe),M(J8,kpe,null),e(md,yqo),e(md,Spe),e(Spe,xqo),b(m,XQe,_),b(m,Bo,_),M(Y8,Bo,null),e(Bo,$qo),e(Bo,fd),e(fd,kqo),e(fd,vX),e(vX,Sqo),e(fd,Rqo),e(fd,FX),e(FX,Pqo),e(fd,Bqo),e(Bo,Iqo),e(Bo,K8),e(K8,Nqo),e(K8,Rpe),e(Rpe,qqo),e(K8,jqo),e(Bo,Dqo),e(Bo,ut),M(Z8,ut,null),e(ut,Gqo),e(ut,Ppe),e(Ppe,Oqo),e(ut,Vqo),e(ut,gd),e(gd,Xqo),e(gd,Bpe),e(Bpe,zqo),e(gd,Wqo),e(gd,TX),e(TX,Qqo),e(gd,Uqo),e(ut,Hqo),M(fv,ut,null),e(Bo,Jqo),e(Bo,eo),M(e9,eo,null),e(eo,Yqo),e(eo,Ipe),e(Ipe,Kqo),e(eo,Zqo),e(eo,Wa),e(Wa,ejo),e(Wa,Npe),e(Npe,ojo),e(Wa,rjo),e(Wa,qpe),e(qpe,tjo),e(Wa,ajo),e(Wa,jpe),e(jpe,njo),e(Wa,sjo),e(eo,ljo),e(eo,Q),e(Q,gv),e(gv,Dpe),e(Dpe,ijo),e(gv,djo),e(gv,MX),e(MX,cjo),e(gv,mjo),e(Q,fjo),e(Q,hv),e(hv,Gpe),e(Gpe,gjo),e(hv,hjo),e(hv,EX),e(EX,ujo),e(hv,pjo),e(Q,_jo),e(Q,uv),e(uv,Ope),e(Ope,bjo),e(uv,vjo),e(uv,CX),e(CX,Fjo),e(uv,Tjo),e(Q,Mjo),e(Q,pv),e(pv,Vpe),e(Vpe,Ejo),e(pv,Cjo),e(pv,wX),e(wX,wjo),e(pv,Ajo),e(Q,Ljo),e(Q,_v),e(_v,Xpe),e(Xpe,yjo),e(_v,xjo),e(_v,AX),e(AX,$jo),e(_v,kjo),e(Q,Sjo),e(Q,bv),e(bv,zpe),e(zpe,Rjo),e(bv,Pjo),e(bv,LX),e(LX,Bjo),e(bv,Ijo),e(Q,Njo),e(Q,vv),e(vv,Wpe),e(Wpe,qjo),e(vv,jjo),e(vv,yX),e(yX,Djo),e(vv,Gjo),e(Q,Ojo),e(Q,Fv),e(Fv,Qpe),e(Qpe,Vjo),e(Fv,Xjo),e(Fv,xX),e(xX,zjo),e(Fv,Wjo),e(Q,Qjo),e(Q,Tv),e(Tv,Upe),e(Upe,Ujo),e(Tv,Hjo),e(Tv,$X),e($X,Jjo),e(Tv,Yjo),e(Q,Kjo),e(Q,Mv),e(Mv,Hpe),e(Hpe,Zjo),e(Mv,eDo),e(Mv,kX),e(kX,oDo),e(Mv,rDo),e(Q,tDo),e(Q,Ev),e(Ev,Jpe),e(Jpe,aDo),e(Ev,nDo),e(Ev,SX),e(SX,sDo),e(Ev,lDo),e(Q,iDo),e(Q,Cv),e(Cv,Ype),e(Ype,dDo),e(Cv,cDo),e(Cv,RX),e(RX,mDo),e(Cv,fDo),e(Q,gDo),e(Q,wv),e(wv,Kpe),e(Kpe,hDo),e(wv,uDo),e(wv,PX),e(PX,pDo),e(wv,_Do),e(Q,bDo),e(Q,Av),e(Av,Zpe),e(Zpe,vDo),e(Av,FDo),e(Av,BX),e(BX,TDo),e(Av,MDo),e(Q,EDo),e(Q,Lv),e(Lv,e_e),e(e_e,CDo),e(Lv,wDo),e(Lv,IX),e(IX,ADo),e(Lv,LDo),e(Q,yDo),e(Q,yv),e(yv,o_e),e(o_e,xDo),e(yv,$Do),e(yv,NX),e(NX,kDo),e(yv,SDo),e(Q,RDo),e(Q,xv),e(xv,r_e),e(r_e,PDo),e(xv,BDo),e(xv,qX),e(qX,IDo),e(xv,NDo),e(Q,qDo),e(Q,$v),e($v,t_e),e(t_e,jDo),e($v,DDo),e($v,jX),e(jX,GDo),e($v,ODo),e(Q,VDo),e(Q,kv),e(kv,a_e),e(a_e,XDo),e(kv,zDo),e(kv,DX),e(DX,WDo),e(kv,QDo),e(Q,UDo),e(Q,Sv),e(Sv,n_e),e(n_e,HDo),e(Sv,JDo),e(Sv,GX),e(GX,YDo),e(Sv,KDo),e(Q,ZDo),e(Q,Rv),e(Rv,s_e),e(s_e,eGo),e(Rv,oGo),e(Rv,OX),e(OX,rGo),e(Rv,tGo),e(Q,aGo),e(Q,Pv),e(Pv,l_e),e(l_e,nGo),e(Pv,sGo),e(Pv,VX),e(VX,lGo),e(Pv,iGo),e(Q,dGo),e(Q,Bv),e(Bv,i_e),e(i_e,cGo),e(Bv,mGo),e(Bv,XX),e(XX,fGo),e(Bv,gGo),e(Q,hGo),e(Q,Iv),e(Iv,d_e),e(d_e,uGo),e(Iv,pGo),e(Iv,zX),e(zX,_Go),e(Iv,bGo),e(Q,vGo),e(Q,Nv),e(Nv,c_e),e(c_e,FGo),e(Nv,TGo),e(Nv,WX),e(WX,MGo),e(Nv,EGo),e(Q,CGo),e(Q,qv),e(qv,m_e),e(m_e,wGo),e(qv,AGo),e(qv,QX),e(QX,LGo),e(qv,yGo),e(Q,xGo),e(Q,jv),e(jv,f_e),e(f_e,$Go),e(jv,kGo),e(jv,UX),e(UX,SGo),e(jv,RGo),e(Q,PGo),e(Q,Dv),e(Dv,g_e),e(g_e,BGo),e(Dv,IGo),e(Dv,HX),e(HX,NGo),e(Dv,qGo),e(Q,jGo),e(Q,Gv),e(Gv,h_e),e(h_e,DGo),e(Gv,GGo),e(Gv,JX),e(JX,OGo),e(Gv,VGo),e(Q,XGo),e(Q,Ov),e(Ov,u_e),e(u_e,zGo),e(Ov,WGo),e(Ov,YX),e(YX,QGo),e(Ov,UGo),e(Q,HGo),e(Q,Vv),e(Vv,p_e),e(p_e,JGo),e(Vv,YGo),e(Vv,KX),e(KX,KGo),e(Vv,ZGo),e(Q,eOo),e(Q,Xv),e(Xv,__e),e(__e,oOo),e(Xv,rOo),e(Xv,ZX),e(ZX,tOo),e(Xv,aOo),e(Q,nOo),e(Q,zv),e(zv,b_e),e(b_e,sOo),e(zv,lOo),e(zv,ez),e(ez,iOo),e(zv,dOo),e(Q,cOo),e(Q,Wv),e(Wv,v_e),e(v_e,mOo),e(Wv,fOo),e(Wv,F_e),e(F_e,gOo),e(Wv,hOo),e(Q,uOo),e(Q,Qv),e(Qv,T_e),e(T_e,pOo),e(Qv,_Oo),e(Qv,oz),e(oz,bOo),e(Qv,vOo),e(Q,FOo),e(Q,Uv),e(Uv,M_e),e(M_e,TOo),e(Uv,MOo),e(Uv,rz),e(rz,EOo),e(Uv,COo),e(Q,wOo),e(Q,Hv),e(Hv,E_e),e(E_e,AOo),e(Hv,LOo),e(Hv,tz),e(tz,yOo),e(Hv,xOo),e(Q,$Oo),e(Q,Jv),e(Jv,C_e),e(C_e,kOo),e(Jv,SOo),e(Jv,az),e(az,ROo),e(Jv,POo),e(eo,BOo),e(eo,Yv),e(Yv,IOo),e(Yv,w_e),e(w_e,NOo),e(Yv,qOo),e(Yv,A_e),e(A_e,jOo),e(eo,DOo),M(Kv,eo,null),b(m,zQe,_),b(m,hd,_),e(hd,Zv),e(Zv,L_e),M(o9,L_e,null),e(hd,GOo),e(hd,y_e),e(y_e,OOo),b(m,WQe,_),b(m,Io,_),M(r9,Io,null),e(Io,VOo),e(Io,ud),e(ud,XOo),e(ud,nz),e(nz,zOo),e(ud,WOo),e(ud,sz),e(sz,QOo),e(ud,UOo),e(Io,HOo),e(Io,t9),e(t9,JOo),e(t9,x_e),e(x_e,YOo),e(t9,KOo),e(Io,ZOo),e(Io,pt),M(a9,pt,null),e(pt,eVo),e(pt,$_e),e($_e,oVo),e(pt,rVo),e(pt,pd),e(pd,tVo),e(pd,k_e),e(k_e,aVo),e(pd,nVo),e(pd,lz),e(lz,sVo),e(pd,lVo),e(pt,iVo),M(e1,pt,null),e(Io,dVo),e(Io,oo),M(n9,oo,null),e(oo,cVo),e(oo,S_e),e(S_e,mVo),e(oo,fVo),e(oo,Qa),e(Qa,gVo),e(Qa,R_e),e(R_e,hVo),e(Qa,uVo),e(Qa,P_e),e(P_e,pVo),e(Qa,_Vo),e(Qa,B_e),e(B_e,bVo),e(Qa,vVo),e(oo,FVo),e(oo,fe),e(fe,o1),e(o1,I_e),e(I_e,TVo),e(o1,MVo),e(o1,iz),e(iz,EVo),e(o1,CVo),e(fe,wVo),e(fe,r1),e(r1,N_e),e(N_e,AVo),e(r1,LVo),e(r1,dz),e(dz,yVo),e(r1,xVo),e(fe,$Vo),e(fe,t1),e(t1,q_e),e(q_e,kVo),e(t1,SVo),e(t1,cz),e(cz,RVo),e(t1,PVo),e(fe,BVo),e(fe,a1),e(a1,j_e),e(j_e,IVo),e(a1,NVo),e(a1,mz),e(mz,qVo),e(a1,jVo),e(fe,DVo),e(fe,n1),e(n1,D_e),e(D_e,GVo),e(n1,OVo),e(n1,fz),e(fz,VVo),e(n1,XVo),e(fe,zVo),e(fe,s1),e(s1,G_e),e(G_e,WVo),e(s1,QVo),e(s1,gz),e(gz,UVo),e(s1,HVo),e(fe,JVo),e(fe,l1),e(l1,O_e),e(O_e,YVo),e(l1,KVo),e(l1,hz),e(hz,ZVo),e(l1,eXo),e(fe,oXo),e(fe,i1),e(i1,V_e),e(V_e,rXo),e(i1,tXo),e(i1,uz),e(uz,aXo),e(i1,nXo),e(fe,sXo),e(fe,d1),e(d1,X_e),e(X_e,lXo),e(d1,iXo),e(d1,pz),e(pz,dXo),e(d1,cXo),e(fe,mXo),e(fe,c1),e(c1,z_e),e(z_e,fXo),e(c1,gXo),e(c1,_z),e(_z,hXo),e(c1,uXo),e(fe,pXo),e(fe,m1),e(m1,W_e),e(W_e,_Xo),e(m1,bXo),e(m1,bz),e(bz,vXo),e(m1,FXo),e(fe,TXo),e(fe,f1),e(f1,Q_e),e(Q_e,MXo),e(f1,EXo),e(f1,vz),e(vz,CXo),e(f1,wXo),e(fe,AXo),e(fe,g1),e(g1,U_e),e(U_e,LXo),e(g1,yXo),e(g1,Fz),e(Fz,xXo),e(g1,$Xo),e(fe,kXo),e(fe,h1),e(h1,H_e),e(H_e,SXo),e(h1,RXo),e(h1,Tz),e(Tz,PXo),e(h1,BXo),e(fe,IXo),e(fe,u1),e(u1,J_e),e(J_e,NXo),e(u1,qXo),e(u1,Mz),e(Mz,jXo),e(u1,DXo),e(fe,GXo),e(fe,p1),e(p1,Y_e),e(Y_e,OXo),e(p1,VXo),e(p1,Ez),e(Ez,XXo),e(p1,zXo),e(fe,WXo),e(fe,_1),e(_1,K_e),e(K_e,QXo),e(_1,UXo),e(_1,Cz),e(Cz,HXo),e(_1,JXo),e(fe,YXo),e(fe,b1),e(b1,Z_e),e(Z_e,KXo),e(b1,ZXo),e(b1,wz),e(wz,ezo),e(b1,ozo),e(fe,rzo),e(fe,v1),e(v1,e2e),e(e2e,tzo),e(v1,azo),e(v1,Az),e(Az,nzo),e(v1,szo),e(oo,lzo),e(oo,F1),e(F1,izo),e(F1,o2e),e(o2e,dzo),e(F1,czo),e(F1,r2e),e(r2e,mzo),e(oo,fzo),M(T1,oo,null),b(m,QQe,_),b(m,_d,_),e(_d,M1),e(M1,t2e),M(s9,t2e,null),e(_d,gzo),e(_d,a2e),e(a2e,hzo),b(m,UQe,_),b(m,No,_),M(l9,No,null),e(No,uzo),e(No,bd),e(bd,pzo),e(bd,Lz),e(Lz,_zo),e(bd,bzo),e(bd,yz),e(yz,vzo),e(bd,Fzo),e(No,Tzo),e(No,i9),e(i9,Mzo),e(i9,n2e),e(n2e,Ezo),e(i9,Czo),e(No,wzo),e(No,_t),M(d9,_t,null),e(_t,Azo),e(_t,s2e),e(s2e,Lzo),e(_t,yzo),e(_t,vd),e(vd,xzo),e(vd,l2e),e(l2e,$zo),e(vd,kzo),e(vd,xz),e(xz,Szo),e(vd,Rzo),e(_t,Pzo),M(E1,_t,null),e(No,Bzo),e(No,ro),M(c9,ro,null),e(ro,Izo),e(ro,i2e),e(i2e,Nzo),e(ro,qzo),e(ro,Ua),e(Ua,jzo),e(Ua,d2e),e(d2e,Dzo),e(Ua,Gzo),e(Ua,c2e),e(c2e,Ozo),e(Ua,Vzo),e(Ua,m2e),e(m2e,Xzo),e(Ua,zzo),e(ro,Wzo),e(ro,N),e(N,C1),e(C1,f2e),e(f2e,Qzo),e(C1,Uzo),e(C1,$z),e($z,Hzo),e(C1,Jzo),e(N,Yzo),e(N,w1),e(w1,g2e),e(g2e,Kzo),e(w1,Zzo),e(w1,kz),e(kz,eWo),e(w1,oWo),e(N,rWo),e(N,A1),e(A1,h2e),e(h2e,tWo),e(A1,aWo),e(A1,Sz),e(Sz,nWo),e(A1,sWo),e(N,lWo),e(N,L1),e(L1,u2e),e(u2e,iWo),e(L1,dWo),e(L1,Rz),e(Rz,cWo),e(L1,mWo),e(N,fWo),e(N,y1),e(y1,p2e),e(p2e,gWo),e(y1,hWo),e(y1,Pz),e(Pz,uWo),e(y1,pWo),e(N,_Wo),e(N,x1),e(x1,_2e),e(_2e,bWo),e(x1,vWo),e(x1,Bz),e(Bz,FWo),e(x1,TWo),e(N,MWo),e(N,$1),e($1,b2e),e(b2e,EWo),e($1,CWo),e($1,Iz),e(Iz,wWo),e($1,AWo),e(N,LWo),e(N,k1),e(k1,v2e),e(v2e,yWo),e(k1,xWo),e(k1,Nz),e(Nz,$Wo),e(k1,kWo),e(N,SWo),e(N,S1),e(S1,F2e),e(F2e,RWo),e(S1,PWo),e(S1,qz),e(qz,BWo),e(S1,IWo),e(N,NWo),e(N,R1),e(R1,T2e),e(T2e,qWo),e(R1,jWo),e(R1,jz),e(jz,DWo),e(R1,GWo),e(N,OWo),e(N,P1),e(P1,M2e),e(M2e,VWo),e(P1,XWo),e(P1,Dz),e(Dz,zWo),e(P1,WWo),e(N,QWo),e(N,B1),e(B1,E2e),e(E2e,UWo),e(B1,HWo),e(B1,Gz),e(Gz,JWo),e(B1,YWo),e(N,KWo),e(N,I1),e(I1,C2e),e(C2e,ZWo),e(I1,eQo),e(I1,Oz),e(Oz,oQo),e(I1,rQo),e(N,tQo),e(N,N1),e(N1,w2e),e(w2e,aQo),e(N1,nQo),e(N1,Vz),e(Vz,sQo),e(N1,lQo),e(N,iQo),e(N,q1),e(q1,A2e),e(A2e,dQo),e(q1,cQo),e(q1,Xz),e(Xz,mQo),e(q1,fQo),e(N,gQo),e(N,j1),e(j1,L2e),e(L2e,hQo),e(j1,uQo),e(j1,zz),e(zz,pQo),e(j1,_Qo),e(N,bQo),e(N,D1),e(D1,y2e),e(y2e,vQo),e(D1,FQo),e(D1,Wz),e(Wz,TQo),e(D1,MQo),e(N,EQo),e(N,G1),e(G1,x2e),e(x2e,CQo),e(G1,wQo),e(G1,Qz),e(Qz,AQo),e(G1,LQo),e(N,yQo),e(N,O1),e(O1,$2e),e($2e,xQo),e(O1,$Qo),e(O1,Uz),e(Uz,kQo),e(O1,SQo),e(N,RQo),e(N,V1),e(V1,k2e),e(k2e,PQo),e(V1,BQo),e(V1,Hz),e(Hz,IQo),e(V1,NQo),e(N,qQo),e(N,X1),e(X1,S2e),e(S2e,jQo),e(X1,DQo),e(X1,Jz),e(Jz,GQo),e(X1,OQo),e(N,VQo),e(N,z1),e(z1,R2e),e(R2e,XQo),e(z1,zQo),e(z1,Yz),e(Yz,WQo),e(z1,QQo),e(N,UQo),e(N,W1),e(W1,P2e),e(P2e,HQo),e(W1,JQo),e(W1,Kz),e(Kz,YQo),e(W1,KQo),e(N,ZQo),e(N,Q1),e(Q1,B2e),e(B2e,eUo),e(Q1,oUo),e(Q1,Zz),e(Zz,rUo),e(Q1,tUo),e(N,aUo),e(N,U1),e(U1,I2e),e(I2e,nUo),e(U1,sUo),e(U1,eW),e(eW,lUo),e(U1,iUo),e(N,dUo),e(N,H1),e(H1,N2e),e(N2e,cUo),e(H1,mUo),e(H1,oW),e(oW,fUo),e(H1,gUo),e(N,hUo),e(N,J1),e(J1,q2e),e(q2e,uUo),e(J1,pUo),e(J1,rW),e(rW,_Uo),e(J1,bUo),e(N,vUo),e(N,Y1),e(Y1,j2e),e(j2e,FUo),e(Y1,TUo),e(Y1,tW),e(tW,MUo),e(Y1,EUo),e(N,CUo),e(N,K1),e(K1,D2e),e(D2e,wUo),e(K1,AUo),e(K1,aW),e(aW,LUo),e(K1,yUo),e(N,xUo),e(N,Z1),e(Z1,G2e),e(G2e,$Uo),e(Z1,kUo),e(Z1,nW),e(nW,SUo),e(Z1,RUo),e(N,PUo),e(N,eF),e(eF,O2e),e(O2e,BUo),e(eF,IUo),e(eF,sW),e(sW,NUo),e(eF,qUo),e(N,jUo),e(N,oF),e(oF,V2e),e(V2e,DUo),e(oF,GUo),e(oF,lW),e(lW,OUo),e(oF,VUo),e(N,XUo),e(N,rF),e(rF,X2e),e(X2e,zUo),e(rF,WUo),e(rF,iW),e(iW,QUo),e(rF,UUo),e(N,HUo),e(N,tF),e(tF,z2e),e(z2e,JUo),e(tF,YUo),e(tF,dW),e(dW,KUo),e(tF,ZUo),e(N,eHo),e(N,aF),e(aF,W2e),e(W2e,oHo),e(aF,rHo),e(aF,cW),e(cW,tHo),e(aF,aHo),e(N,nHo),e(N,nF),e(nF,Q2e),e(Q2e,sHo),e(nF,lHo),e(nF,mW),e(mW,iHo),e(nF,dHo),e(N,cHo),e(N,sF),e(sF,U2e),e(U2e,mHo),e(sF,fHo),e(sF,fW),e(fW,gHo),e(sF,hHo),e(N,uHo),e(N,lF),e(lF,H2e),e(H2e,pHo),e(lF,_Ho),e(lF,gW),e(gW,bHo),e(lF,vHo),e(N,FHo),e(N,iF),e(iF,J2e),e(J2e,THo),e(iF,MHo),e(iF,hW),e(hW,EHo),e(iF,CHo),e(N,wHo),e(N,dF),e(dF,Y2e),e(Y2e,AHo),e(dF,LHo),e(dF,uW),e(uW,yHo),e(dF,xHo),e(N,$Ho),e(N,cF),e(cF,K2e),e(K2e,kHo),e(cF,SHo),e(cF,pW),e(pW,RHo),e(cF,PHo),e(N,BHo),e(N,mF),e(mF,Z2e),e(Z2e,IHo),e(mF,NHo),e(mF,_W),e(_W,qHo),e(mF,jHo),e(N,DHo),e(N,fF),e(fF,ebe),e(ebe,GHo),e(fF,OHo),e(fF,bW),e(bW,VHo),e(fF,XHo),e(N,zHo),e(N,gF),e(gF,obe),e(obe,WHo),e(gF,QHo),e(gF,vW),e(vW,UHo),e(gF,HHo),e(N,JHo),e(N,hF),e(hF,rbe),e(rbe,YHo),e(hF,KHo),e(hF,FW),e(FW,ZHo),e(hF,eJo),e(N,oJo),e(N,uF),e(uF,tbe),e(tbe,rJo),e(uF,tJo),e(uF,TW),e(TW,aJo),e(uF,nJo),e(N,sJo),e(N,pF),e(pF,abe),e(abe,lJo),e(pF,iJo),e(pF,MW),e(MW,dJo),e(pF,cJo),e(N,mJo),e(N,_F),e(_F,nbe),e(nbe,fJo),e(_F,gJo),e(_F,EW),e(EW,hJo),e(_F,uJo),e(N,pJo),e(N,bF),e(bF,sbe),e(sbe,_Jo),e(bF,bJo),e(bF,CW),e(CW,vJo),e(bF,FJo),e(N,TJo),e(N,vF),e(vF,lbe),e(lbe,MJo),e(vF,EJo),e(vF,wW),e(wW,CJo),e(vF,wJo),e(N,AJo),e(N,FF),e(FF,ibe),e(ibe,LJo),e(FF,yJo),e(FF,AW),e(AW,xJo),e(FF,$Jo),e(N,kJo),e(N,TF),e(TF,dbe),e(dbe,SJo),e(TF,RJo),e(TF,LW),e(LW,PJo),e(TF,BJo),e(ro,IJo),e(ro,MF),e(MF,NJo),e(MF,cbe),e(cbe,qJo),e(MF,jJo),e(MF,mbe),e(mbe,DJo),e(ro,GJo),M(EF,ro,null),b(m,HQe,_),b(m,Fd,_),e(Fd,CF),e(CF,fbe),M(m9,fbe,null),e(Fd,OJo),e(Fd,gbe),e(gbe,VJo),b(m,JQe,_),b(m,qo,_),M(f9,qo,null),e(qo,XJo),e(qo,Td),e(Td,zJo),e(Td,yW),e(yW,WJo),e(Td,QJo),e(Td,xW),e(xW,UJo),e(Td,HJo),e(qo,JJo),e(qo,g9),e(g9,YJo),e(g9,hbe),e(hbe,KJo),e(g9,ZJo),e(qo,eYo),e(qo,bt),M(h9,bt,null),e(bt,oYo),e(bt,ube),e(ube,rYo),e(bt,tYo),e(bt,Md),e(Md,aYo),e(Md,pbe),e(pbe,nYo),e(Md,sYo),e(Md,$W),e($W,lYo),e(Md,iYo),e(bt,dYo),M(wF,bt,null),e(qo,cYo),e(qo,to),M(u9,to,null),e(to,mYo),e(to,_be),e(_be,fYo),e(to,gYo),e(to,Ha),e(Ha,hYo),e(Ha,bbe),e(bbe,uYo),e(Ha,pYo),e(Ha,vbe),e(vbe,_Yo),e(Ha,bYo),e(Ha,Fbe),e(Fbe,vYo),e(Ha,FYo),e(to,TYo),e(to,Z),e(Z,AF),e(AF,Tbe),e(Tbe,MYo),e(AF,EYo),e(AF,kW),e(kW,CYo),e(AF,wYo),e(Z,AYo),e(Z,LF),e(LF,Mbe),e(Mbe,LYo),e(LF,yYo),e(LF,SW),e(SW,xYo),e(LF,$Yo),e(Z,kYo),e(Z,yF),e(yF,Ebe),e(Ebe,SYo),e(yF,RYo),e(yF,RW),e(RW,PYo),e(yF,BYo),e(Z,IYo),e(Z,xF),e(xF,Cbe),e(Cbe,NYo),e(xF,qYo),e(xF,PW),e(PW,jYo),e(xF,DYo),e(Z,GYo),e(Z,$F),e($F,wbe),e(wbe,OYo),e($F,VYo),e($F,BW),e(BW,XYo),e($F,zYo),e(Z,WYo),e(Z,kF),e(kF,Abe),e(Abe,QYo),e(kF,UYo),e(kF,IW),e(IW,HYo),e(kF,JYo),e(Z,YYo),e(Z,SF),e(SF,Lbe),e(Lbe,KYo),e(SF,ZYo),e(SF,NW),e(NW,eKo),e(SF,oKo),e(Z,rKo),e(Z,RF),e(RF,ybe),e(ybe,tKo),e(RF,aKo),e(RF,qW),e(qW,nKo),e(RF,sKo),e(Z,lKo),e(Z,PF),e(PF,xbe),e(xbe,iKo),e(PF,dKo),e(PF,jW),e(jW,cKo),e(PF,mKo),e(Z,fKo),e(Z,BF),e(BF,$be),e($be,gKo),e(BF,hKo),e(BF,DW),e(DW,uKo),e(BF,pKo),e(Z,_Ko),e(Z,IF),e(IF,kbe),e(kbe,bKo),e(IF,vKo),e(IF,GW),e(GW,FKo),e(IF,TKo),e(Z,MKo),e(Z,NF),e(NF,Sbe),e(Sbe,EKo),e(NF,CKo),e(NF,OW),e(OW,wKo),e(NF,AKo),e(Z,LKo),e(Z,qF),e(qF,Rbe),e(Rbe,yKo),e(qF,xKo),e(qF,VW),e(VW,$Ko),e(qF,kKo),e(Z,SKo),e(Z,jF),e(jF,Pbe),e(Pbe,RKo),e(jF,PKo),e(jF,XW),e(XW,BKo),e(jF,IKo),e(Z,NKo),e(Z,DF),e(DF,Bbe),e(Bbe,qKo),e(DF,jKo),e(DF,zW),e(zW,DKo),e(DF,GKo),e(Z,OKo),e(Z,GF),e(GF,Ibe),e(Ibe,VKo),e(GF,XKo),e(GF,WW),e(WW,zKo),e(GF,WKo),e(Z,QKo),e(Z,OF),e(OF,Nbe),e(Nbe,UKo),e(OF,HKo),e(OF,QW),e(QW,JKo),e(OF,YKo),e(Z,KKo),e(Z,VF),e(VF,qbe),e(qbe,ZKo),e(VF,eZo),e(VF,UW),e(UW,oZo),e(VF,rZo),e(Z,tZo),e(Z,XF),e(XF,jbe),e(jbe,aZo),e(XF,nZo),e(XF,HW),e(HW,sZo),e(XF,lZo),e(Z,iZo),e(Z,zF),e(zF,Dbe),e(Dbe,dZo),e(zF,cZo),e(zF,JW),e(JW,mZo),e(zF,fZo),e(Z,gZo),e(Z,WF),e(WF,Gbe),e(Gbe,hZo),e(WF,uZo),e(WF,YW),e(YW,pZo),e(WF,_Zo),e(Z,bZo),e(Z,QF),e(QF,Obe),e(Obe,vZo),e(QF,FZo),e(QF,KW),e(KW,TZo),e(QF,MZo),e(Z,EZo),e(Z,UF),e(UF,Vbe),e(Vbe,CZo),e(UF,wZo),e(UF,ZW),e(ZW,AZo),e(UF,LZo),e(Z,yZo),e(Z,HF),e(HF,Xbe),e(Xbe,xZo),e(HF,$Zo),e(HF,eQ),e(eQ,kZo),e(HF,SZo),e(Z,RZo),e(Z,JF),e(JF,zbe),e(zbe,PZo),e(JF,BZo),e(JF,oQ),e(oQ,IZo),e(JF,NZo),e(Z,qZo),e(Z,YF),e(YF,Wbe),e(Wbe,jZo),e(YF,DZo),e(YF,rQ),e(rQ,GZo),e(YF,OZo),e(Z,VZo),e(Z,KF),e(KF,Qbe),e(Qbe,XZo),e(KF,zZo),e(KF,tQ),e(tQ,WZo),e(KF,QZo),e(Z,UZo),e(Z,ZF),e(ZF,Ube),e(Ube,HZo),e(ZF,JZo),e(ZF,aQ),e(aQ,YZo),e(ZF,KZo),e(Z,ZZo),e(Z,eT),e(eT,Hbe),e(Hbe,eer),e(eT,oer),e(eT,nQ),e(nQ,rer),e(eT,ter),e(Z,aer),e(Z,oT),e(oT,Jbe),e(Jbe,ner),e(oT,ser),e(oT,sQ),e(sQ,ler),e(oT,ier),e(Z,der),e(Z,rT),e(rT,Ybe),e(Ybe,cer),e(rT,mer),e(rT,lQ),e(lQ,fer),e(rT,ger),e(to,her),e(to,tT),e(tT,uer),e(tT,Kbe),e(Kbe,per),e(tT,_er),e(tT,Zbe),e(Zbe,ber),e(to,ver),M(aT,to,null),b(m,YQe,_),b(m,Ed,_),e(Ed,nT),e(nT,eve),M(p9,eve,null),e(Ed,Fer),e(Ed,ove),e(ove,Ter),b(m,KQe,_),b(m,jo,_),M(_9,jo,null),e(jo,Mer),e(jo,Cd),e(Cd,Eer),e(Cd,iQ),e(iQ,Cer),e(Cd,wer),e(Cd,dQ),e(dQ,Aer),e(Cd,Ler),e(jo,yer),e(jo,b9),e(b9,xer),e(b9,rve),e(rve,$er),e(b9,ker),e(jo,Ser),e(jo,vt),M(v9,vt,null),e(vt,Rer),e(vt,tve),e(tve,Per),e(vt,Ber),e(vt,wd),e(wd,Ier),e(wd,ave),e(ave,Ner),e(wd,qer),e(wd,cQ),e(cQ,jer),e(wd,Der),e(vt,Ger),M(sT,vt,null),e(jo,Oer),e(jo,ao),M(F9,ao,null),e(ao,Ver),e(ao,nve),e(nve,Xer),e(ao,zer),e(ao,Ja),e(Ja,Wer),e(Ja,sve),e(sve,Qer),e(Ja,Uer),e(Ja,lve),e(lve,Her),e(Ja,Jer),e(Ja,ive),e(ive,Yer),e(Ja,Ker),e(ao,Zer),e(ao,Do),e(Do,lT),e(lT,dve),e(dve,eor),e(lT,oor),e(lT,mQ),e(mQ,ror),e(lT,tor),e(Do,aor),e(Do,iT),e(iT,cve),e(cve,nor),e(iT,sor),e(iT,fQ),e(fQ,lor),e(iT,ior),e(Do,dor),e(Do,dT),e(dT,mve),e(mve,cor),e(dT,mor),e(dT,gQ),e(gQ,gor),e(dT,hor),e(Do,uor),e(Do,cT),e(cT,fve),e(fve,por),e(cT,_or),e(cT,hQ),e(hQ,bor),e(cT,vor),e(Do,For),e(Do,mT),e(mT,gve),e(gve,Tor),e(mT,Mor),e(mT,uQ),e(uQ,Eor),e(mT,Cor),e(Do,wor),e(Do,fT),e(fT,hve),e(hve,Aor),e(fT,Lor),e(fT,pQ),e(pQ,yor),e(fT,xor),e(ao,$or),e(ao,gT),e(gT,kor),e(gT,uve),e(uve,Sor),e(gT,Ror),e(gT,pve),e(pve,Por),e(ao,Bor),M(hT,ao,null),b(m,ZQe,_),b(m,Ad,_),e(Ad,uT),e(uT,_ve),M(T9,_ve,null),e(Ad,Ior),e(Ad,bve),e(bve,Nor),b(m,eUe,_),b(m,Go,_),M(M9,Go,null),e(Go,qor),e(Go,Ld),e(Ld,jor),e(Ld,_Q),e(_Q,Dor),e(Ld,Gor),e(Ld,bQ),e(bQ,Oor),e(Ld,Vor),e(Go,Xor),e(Go,E9),e(E9,zor),e(E9,vve),e(vve,Wor),e(E9,Qor),e(Go,Uor),e(Go,Ft),M(C9,Ft,null),e(Ft,Hor),e(Ft,Fve),e(Fve,Jor),e(Ft,Yor),e(Ft,yd),e(yd,Kor),e(yd,Tve),e(Tve,Zor),e(yd,err),e(yd,vQ),e(vQ,orr),e(yd,rrr),e(Ft,trr),M(pT,Ft,null),e(Go,arr),e(Go,no),M(w9,no,null),e(no,nrr),e(no,Mve),e(Mve,srr),e(no,lrr),e(no,Ya),e(Ya,irr),e(Ya,Eve),e(Eve,drr),e(Ya,crr),e(Ya,Cve),e(Cve,mrr),e(Ya,frr),e(Ya,wve),e(wve,grr),e(Ya,hrr),e(no,urr),e(no,H),e(H,_T),e(_T,Ave),e(Ave,prr),e(_T,_rr),e(_T,FQ),e(FQ,brr),e(_T,vrr),e(H,Frr),e(H,bT),e(bT,Lve),e(Lve,Trr),e(bT,Mrr),e(bT,TQ),e(TQ,Err),e(bT,Crr),e(H,wrr),e(H,vT),e(vT,yve),e(yve,Arr),e(vT,Lrr),e(vT,MQ),e(MQ,yrr),e(vT,xrr),e(H,$rr),e(H,FT),e(FT,xve),e(xve,krr),e(FT,Srr),e(FT,EQ),e(EQ,Rrr),e(FT,Prr),e(H,Brr),e(H,TT),e(TT,$ve),e($ve,Irr),e(TT,Nrr),e(TT,CQ),e(CQ,qrr),e(TT,jrr),e(H,Drr),e(H,MT),e(MT,kve),e(kve,Grr),e(MT,Orr),e(MT,wQ),e(wQ,Vrr),e(MT,Xrr),e(H,zrr),e(H,ET),e(ET,Sve),e(Sve,Wrr),e(ET,Qrr),e(ET,AQ),e(AQ,Urr),e(ET,Hrr),e(H,Jrr),e(H,CT),e(CT,Rve),e(Rve,Yrr),e(CT,Krr),e(CT,LQ),e(LQ,Zrr),e(CT,etr),e(H,otr),e(H,wT),e(wT,Pve),e(Pve,rtr),e(wT,ttr),e(wT,yQ),e(yQ,atr),e(wT,ntr),e(H,str),e(H,AT),e(AT,Bve),e(Bve,ltr),e(AT,itr),e(AT,xQ),e(xQ,dtr),e(AT,ctr),e(H,mtr),e(H,LT),e(LT,Ive),e(Ive,ftr),e(LT,gtr),e(LT,$Q),e($Q,htr),e(LT,utr),e(H,ptr),e(H,yT),e(yT,Nve),e(Nve,_tr),e(yT,btr),e(yT,kQ),e(kQ,vtr),e(yT,Ftr),e(H,Ttr),e(H,xT),e(xT,qve),e(qve,Mtr),e(xT,Etr),e(xT,SQ),e(SQ,Ctr),e(xT,wtr),e(H,Atr),e(H,$T),e($T,jve),e(jve,Ltr),e($T,ytr),e($T,RQ),e(RQ,xtr),e($T,$tr),e(H,ktr),e(H,kT),e(kT,Dve),e(Dve,Str),e(kT,Rtr),e(kT,PQ),e(PQ,Ptr),e(kT,Btr),e(H,Itr),e(H,ST),e(ST,Gve),e(Gve,Ntr),e(ST,qtr),e(ST,BQ),e(BQ,jtr),e(ST,Dtr),e(H,Gtr),e(H,RT),e(RT,Ove),e(Ove,Otr),e(RT,Vtr),e(RT,IQ),e(IQ,Xtr),e(RT,ztr),e(H,Wtr),e(H,PT),e(PT,Vve),e(Vve,Qtr),e(PT,Utr),e(PT,NQ),e(NQ,Htr),e(PT,Jtr),e(H,Ytr),e(H,BT),e(BT,Xve),e(Xve,Ktr),e(BT,Ztr),e(BT,qQ),e(qQ,ear),e(BT,oar),e(H,rar),e(H,IT),e(IT,zve),e(zve,tar),e(IT,aar),e(IT,jQ),e(jQ,nar),e(IT,sar),e(H,lar),e(H,NT),e(NT,Wve),e(Wve,iar),e(NT,dar),e(NT,DQ),e(DQ,car),e(NT,mar),e(H,far),e(H,qT),e(qT,Qve),e(Qve,gar),e(qT,har),e(qT,GQ),e(GQ,uar),e(qT,par),e(H,_ar),e(H,jT),e(jT,Uve),e(Uve,bar),e(jT,Far),e(jT,OQ),e(OQ,Tar),e(jT,Mar),e(H,Ear),e(H,DT),e(DT,Hve),e(Hve,Car),e(DT,war),e(DT,VQ),e(VQ,Aar),e(DT,Lar),e(H,yar),e(H,GT),e(GT,Jve),e(Jve,xar),e(GT,$ar),e(GT,XQ),e(XQ,kar),e(GT,Sar),e(H,Rar),e(H,OT),e(OT,Yve),e(Yve,Par),e(OT,Bar),e(OT,zQ),e(zQ,Iar),e(OT,Nar),e(H,qar),e(H,VT),e(VT,Kve),e(Kve,jar),e(VT,Dar),e(VT,WQ),e(WQ,Gar),e(VT,Oar),e(H,Var),e(H,XT),e(XT,Zve),e(Zve,Xar),e(XT,zar),e(XT,QQ),e(QQ,War),e(XT,Qar),e(H,Uar),e(H,zT),e(zT,e1e),e(e1e,Har),e(zT,Jar),e(zT,UQ),e(UQ,Yar),e(zT,Kar),e(H,Zar),e(H,WT),e(WT,o1e),e(o1e,enr),e(WT,onr),e(WT,HQ),e(HQ,rnr),e(WT,tnr),e(H,anr),e(H,QT),e(QT,r1e),e(r1e,nnr),e(QT,snr),e(QT,JQ),e(JQ,lnr),e(QT,inr),e(H,dnr),e(H,UT),e(UT,t1e),e(t1e,cnr),e(UT,mnr),e(UT,YQ),e(YQ,fnr),e(UT,gnr),e(H,hnr),e(H,HT),e(HT,a1e),e(a1e,unr),e(HT,pnr),e(HT,KQ),e(KQ,_nr),e(HT,bnr),e(H,vnr),e(H,JT),e(JT,n1e),e(n1e,Fnr),e(JT,Tnr),e(JT,ZQ),e(ZQ,Mnr),e(JT,Enr),e(H,Cnr),e(H,YT),e(YT,s1e),e(s1e,wnr),e(YT,Anr),e(YT,eU),e(eU,Lnr),e(YT,ynr),e(H,xnr),e(H,KT),e(KT,l1e),e(l1e,$nr),e(KT,knr),e(KT,oU),e(oU,Snr),e(KT,Rnr),e(H,Pnr),e(H,ZT),e(ZT,i1e),e(i1e,Bnr),e(ZT,Inr),e(ZT,rU),e(rU,Nnr),e(ZT,qnr),e(no,jnr),e(no,eM),e(eM,Dnr),e(eM,d1e),e(d1e,Gnr),e(eM,Onr),e(eM,c1e),e(c1e,Vnr),e(no,Xnr),M(oM,no,null),b(m,oUe,_),b(m,xd,_),e(xd,rM),e(rM,m1e),M(A9,m1e,null),e(xd,znr),e(xd,f1e),e(f1e,Wnr),b(m,rUe,_),b(m,Oo,_),M(L9,Oo,null),e(Oo,Qnr),e(Oo,$d),e($d,Unr),e($d,tU),e(tU,Hnr),e($d,Jnr),e($d,aU),e(aU,Ynr),e($d,Knr),e(Oo,Znr),e(Oo,y9),e(y9,esr),e(y9,g1e),e(g1e,osr),e(y9,rsr),e(Oo,tsr),e(Oo,Tt),M(x9,Tt,null),e(Tt,asr),e(Tt,h1e),e(h1e,nsr),e(Tt,ssr),e(Tt,kd),e(kd,lsr),e(kd,u1e),e(u1e,isr),e(kd,dsr),e(kd,nU),e(nU,csr),e(kd,msr),e(Tt,fsr),M(tM,Tt,null),e(Oo,gsr),e(Oo,so),M($9,so,null),e(so,hsr),e(so,p1e),e(p1e,usr),e(so,psr),e(so,Ka),e(Ka,_sr),e(Ka,_1e),e(_1e,bsr),e(Ka,vsr),e(Ka,b1e),e(b1e,Fsr),e(Ka,Tsr),e(Ka,v1e),e(v1e,Msr),e(Ka,Esr),e(so,Csr),e(so,V),e(V,aM),e(aM,F1e),e(F1e,wsr),e(aM,Asr),e(aM,sU),e(sU,Lsr),e(aM,ysr),e(V,xsr),e(V,nM),e(nM,T1e),e(T1e,$sr),e(nM,ksr),e(nM,lU),e(lU,Ssr),e(nM,Rsr),e(V,Psr),e(V,sM),e(sM,M1e),e(M1e,Bsr),e(sM,Isr),e(sM,iU),e(iU,Nsr),e(sM,qsr),e(V,jsr),e(V,lM),e(lM,E1e),e(E1e,Dsr),e(lM,Gsr),e(lM,dU),e(dU,Osr),e(lM,Vsr),e(V,Xsr),e(V,iM),e(iM,C1e),e(C1e,zsr),e(iM,Wsr),e(iM,cU),e(cU,Qsr),e(iM,Usr),e(V,Hsr),e(V,dM),e(dM,w1e),e(w1e,Jsr),e(dM,Ysr),e(dM,mU),e(mU,Ksr),e(dM,Zsr),e(V,elr),e(V,cM),e(cM,A1e),e(A1e,olr),e(cM,rlr),e(cM,fU),e(fU,tlr),e(cM,alr),e(V,nlr),e(V,mM),e(mM,L1e),e(L1e,slr),e(mM,llr),e(mM,gU),e(gU,ilr),e(mM,dlr),e(V,clr),e(V,fM),e(fM,y1e),e(y1e,mlr),e(fM,flr),e(fM,hU),e(hU,glr),e(fM,hlr),e(V,ulr),e(V,gM),e(gM,x1e),e(x1e,plr),e(gM,_lr),e(gM,uU),e(uU,blr),e(gM,vlr),e(V,Flr),e(V,hM),e(hM,$1e),e($1e,Tlr),e(hM,Mlr),e(hM,pU),e(pU,Elr),e(hM,Clr),e(V,wlr),e(V,uM),e(uM,k1e),e(k1e,Alr),e(uM,Llr),e(uM,_U),e(_U,ylr),e(uM,xlr),e(V,$lr),e(V,pM),e(pM,S1e),e(S1e,klr),e(pM,Slr),e(pM,bU),e(bU,Rlr),e(pM,Plr),e(V,Blr),e(V,_M),e(_M,R1e),e(R1e,Ilr),e(_M,Nlr),e(_M,vU),e(vU,qlr),e(_M,jlr),e(V,Dlr),e(V,bM),e(bM,P1e),e(P1e,Glr),e(bM,Olr),e(bM,FU),e(FU,Vlr),e(bM,Xlr),e(V,zlr),e(V,vM),e(vM,B1e),e(B1e,Wlr),e(vM,Qlr),e(vM,TU),e(TU,Ulr),e(vM,Hlr),e(V,Jlr),e(V,FM),e(FM,I1e),e(I1e,Ylr),e(FM,Klr),e(FM,MU),e(MU,Zlr),e(FM,eir),e(V,oir),e(V,TM),e(TM,N1e),e(N1e,rir),e(TM,tir),e(TM,EU),e(EU,air),e(TM,nir),e(V,sir),e(V,MM),e(MM,q1e),e(q1e,lir),e(MM,iir),e(MM,CU),e(CU,dir),e(MM,cir),e(V,mir),e(V,EM),e(EM,j1e),e(j1e,fir),e(EM,gir),e(EM,wU),e(wU,hir),e(EM,uir),e(V,pir),e(V,CM),e(CM,D1e),e(D1e,_ir),e(CM,bir),e(CM,AU),e(AU,vir),e(CM,Fir),e(V,Tir),e(V,wM),e(wM,G1e),e(G1e,Mir),e(wM,Eir),e(wM,LU),e(LU,Cir),e(wM,wir),e(V,Air),e(V,AM),e(AM,O1e),e(O1e,Lir),e(AM,yir),e(AM,yU),e(yU,xir),e(AM,$ir),e(V,kir),e(V,LM),e(LM,V1e),e(V1e,Sir),e(LM,Rir),e(LM,xU),e(xU,Pir),e(LM,Bir),e(V,Iir),e(V,yM),e(yM,X1e),e(X1e,Nir),e(yM,qir),e(yM,$U),e($U,jir),e(yM,Dir),e(V,Gir),e(V,xM),e(xM,z1e),e(z1e,Oir),e(xM,Vir),e(xM,kU),e(kU,Xir),e(xM,zir),e(V,Wir),e(V,$M),e($M,W1e),e(W1e,Qir),e($M,Uir),e($M,SU),e(SU,Hir),e($M,Jir),e(V,Yir),e(V,kM),e(kM,Q1e),e(Q1e,Kir),e(kM,Zir),e(kM,RU),e(RU,edr),e(kM,odr),e(V,rdr),e(V,SM),e(SM,U1e),e(U1e,tdr),e(SM,adr),e(SM,PU),e(PU,ndr),e(SM,sdr),e(V,ldr),e(V,RM),e(RM,H1e),e(H1e,idr),e(RM,ddr),e(RM,BU),e(BU,cdr),e(RM,mdr),e(V,fdr),e(V,PM),e(PM,J1e),e(J1e,gdr),e(PM,hdr),e(PM,IU),e(IU,udr),e(PM,pdr),e(V,_dr),e(V,BM),e(BM,Y1e),e(Y1e,bdr),e(BM,vdr),e(BM,NU),e(NU,Fdr),e(BM,Tdr),e(V,Mdr),e(V,IM),e(IM,K1e),e(K1e,Edr),e(IM,Cdr),e(IM,qU),e(qU,wdr),e(IM,Adr),e(V,Ldr),e(V,NM),e(NM,Z1e),e(Z1e,ydr),e(NM,xdr),e(NM,jU),e(jU,$dr),e(NM,kdr),e(V,Sdr),e(V,qM),e(qM,eFe),e(eFe,Rdr),e(qM,Pdr),e(qM,DU),e(DU,Bdr),e(qM,Idr),e(V,Ndr),e(V,jM),e(jM,oFe),e(oFe,qdr),e(jM,jdr),e(jM,GU),e(GU,Ddr),e(jM,Gdr),e(V,Odr),e(V,DM),e(DM,rFe),e(rFe,Vdr),e(DM,Xdr),e(DM,OU),e(OU,zdr),e(DM,Wdr),e(V,Qdr),e(V,GM),e(GM,tFe),e(tFe,Udr),e(GM,Hdr),e(GM,VU),e(VU,Jdr),e(GM,Ydr),e(V,Kdr),e(V,OM),e(OM,aFe),e(aFe,Zdr),e(OM,ecr),e(OM,XU),e(XU,ocr),e(OM,rcr),e(V,tcr),e(V,VM),e(VM,nFe),e(nFe,acr),e(VM,ncr),e(VM,zU),e(zU,scr),e(VM,lcr),e(V,icr),e(V,XM),e(XM,sFe),e(sFe,dcr),e(XM,ccr),e(XM,WU),e(WU,mcr),e(XM,fcr),e(V,gcr),e(V,zM),e(zM,lFe),e(lFe,hcr),e(zM,ucr),e(zM,QU),e(QU,pcr),e(zM,_cr),e(V,bcr),e(V,WM),e(WM,iFe),e(iFe,vcr),e(WM,Fcr),e(WM,UU),e(UU,Tcr),e(WM,Mcr),e(so,Ecr),e(so,QM),e(QM,Ccr),e(QM,dFe),e(dFe,wcr),e(QM,Acr),e(QM,cFe),e(cFe,Lcr),e(so,ycr),M(UM,so,null),b(m,tUe,_),b(m,Sd,_),e(Sd,HM),e(HM,mFe),M(k9,mFe,null),e(Sd,xcr),e(Sd,fFe),e(fFe,$cr),b(m,aUe,_),b(m,Vo,_),M(S9,Vo,null),e(Vo,kcr),e(Vo,Rd),e(Rd,Scr),e(Rd,HU),e(HU,Rcr),e(Rd,Pcr),e(Rd,JU),e(JU,Bcr),e(Rd,Icr),e(Vo,Ncr),e(Vo,R9),e(R9,qcr),e(R9,gFe),e(gFe,jcr),e(R9,Dcr),e(Vo,Gcr),e(Vo,Mt),M(P9,Mt,null),e(Mt,Ocr),e(Mt,hFe),e(hFe,Vcr),e(Mt,Xcr),e(Mt,Pd),e(Pd,zcr),e(Pd,uFe),e(uFe,Wcr),e(Pd,Qcr),e(Pd,YU),e(YU,Ucr),e(Pd,Hcr),e(Mt,Jcr),M(JM,Mt,null),e(Vo,Ycr),e(Vo,lo),M(B9,lo,null),e(lo,Kcr),e(lo,pFe),e(pFe,Zcr),e(lo,emr),e(lo,Za),e(Za,omr),e(Za,_Fe),e(_Fe,rmr),e(Za,tmr),e(Za,bFe),e(bFe,amr),e(Za,nmr),e(Za,vFe),e(vFe,smr),e(Za,lmr),e(lo,imr),e(lo,FFe),e(FFe,YM),e(YM,TFe),e(TFe,dmr),e(YM,cmr),e(YM,KU),e(KU,mmr),e(YM,fmr),e(lo,gmr),e(lo,KM),e(KM,hmr),e(KM,MFe),e(MFe,umr),e(KM,pmr),e(KM,EFe),e(EFe,_mr),e(lo,bmr),M(ZM,lo,null),b(m,nUe,_),b(m,Bd,_),e(Bd,eE),e(eE,CFe),M(I9,CFe,null),e(Bd,vmr),e(Bd,wFe),e(wFe,Fmr),b(m,sUe,_),b(m,Xo,_),M(N9,Xo,null),e(Xo,Tmr),e(Xo,Id),e(Id,Mmr),e(Id,ZU),e(ZU,Emr),e(Id,Cmr),e(Id,eH),e(eH,wmr),e(Id,Amr),e(Xo,Lmr),e(Xo,q9),e(q9,ymr),e(q9,AFe),e(AFe,xmr),e(q9,$mr),e(Xo,kmr),e(Xo,Et),M(j9,Et,null),e(Et,Smr),e(Et,LFe),e(LFe,Rmr),e(Et,Pmr),e(Et,Nd),e(Nd,Bmr),e(Nd,yFe),e(yFe,Imr),e(Nd,Nmr),e(Nd,oH),e(oH,qmr),e(Nd,jmr),e(Et,Dmr),M(oE,Et,null),e(Xo,Gmr),e(Xo,io),M(D9,io,null),e(io,Omr),e(io,xFe),e(xFe,Vmr),e(io,Xmr),e(io,en),e(en,zmr),e(en,$Fe),e($Fe,Wmr),e(en,Qmr),e(en,kFe),e(kFe,Umr),e(en,Hmr),e(en,SFe),e(SFe,Jmr),e(en,Ymr),e(io,Kmr),e(io,be),e(be,rE),e(rE,RFe),e(RFe,Zmr),e(rE,efr),e(rE,rH),e(rH,ofr),e(rE,rfr),e(be,tfr),e(be,tE),e(tE,PFe),e(PFe,afr),e(tE,nfr),e(tE,tH),e(tH,sfr),e(tE,lfr),e(be,ifr),e(be,aE),e(aE,BFe),e(BFe,dfr),e(aE,cfr),e(aE,aH),e(aH,mfr),e(aE,ffr),e(be,gfr),e(be,nE),e(nE,IFe),e(IFe,hfr),e(nE,ufr),e(nE,nH),e(nH,pfr),e(nE,_fr),e(be,bfr),e(be,sl),e(sl,NFe),e(NFe,vfr),e(sl,Ffr),e(sl,sH),e(sH,Tfr),e(sl,Mfr),e(sl,lH),e(lH,Efr),e(sl,Cfr),e(be,wfr),e(be,sE),e(sE,qFe),e(qFe,Afr),e(sE,Lfr),e(sE,iH),e(iH,yfr),e(sE,xfr),e(be,$fr),e(be,ll),e(ll,jFe),e(jFe,kfr),e(ll,Sfr),e(ll,dH),e(dH,Rfr),e(ll,Pfr),e(ll,cH),e(cH,Bfr),e(ll,Ifr),e(be,Nfr),e(be,lE),e(lE,DFe),e(DFe,qfr),e(lE,jfr),e(lE,mH),e(mH,Dfr),e(lE,Gfr),e(be,Ofr),e(be,Ct),e(Ct,GFe),e(GFe,Vfr),e(Ct,Xfr),e(Ct,fH),e(fH,zfr),e(Ct,Wfr),e(Ct,gH),e(gH,Qfr),e(Ct,Ufr),e(Ct,hH),e(hH,Hfr),e(Ct,Jfr),e(be,Yfr),e(be,iE),e(iE,OFe),e(OFe,Kfr),e(iE,Zfr),e(iE,uH),e(uH,egr),e(iE,ogr),e(be,rgr),e(be,dE),e(dE,VFe),e(VFe,tgr),e(dE,agr),e(dE,pH),e(pH,ngr),e(dE,sgr),e(be,lgr),e(be,cE),e(cE,XFe),e(XFe,igr),e(cE,dgr),e(cE,_H),e(_H,cgr),e(cE,mgr),e(be,fgr),e(be,mE),e(mE,zFe),e(zFe,ggr),e(mE,hgr),e(mE,bH),e(bH,ugr),e(mE,pgr),e(be,_gr),e(be,fE),e(fE,WFe),e(WFe,bgr),e(fE,vgr),e(fE,vH),e(vH,Fgr),e(fE,Tgr),e(be,Mgr),e(be,gE),e(gE,QFe),e(QFe,Egr),e(gE,Cgr),e(gE,FH),e(FH,wgr),e(gE,Agr),e(be,Lgr),e(be,hE),e(hE,UFe),e(UFe,ygr),e(hE,xgr),e(hE,TH),e(TH,$gr),e(hE,kgr),e(be,Sgr),e(be,uE),e(uE,HFe),e(HFe,Rgr),e(uE,Pgr),e(uE,MH),e(MH,Bgr),e(uE,Igr),e(io,Ngr),e(io,pE),e(pE,qgr),e(pE,JFe),e(JFe,jgr),e(pE,Dgr),e(pE,YFe),e(YFe,Ggr),e(io,Ogr),M(_E,io,null),b(m,lUe,_),b(m,qd,_),e(qd,bE),e(bE,KFe),M(G9,KFe,null),e(qd,Vgr),e(qd,ZFe),e(ZFe,Xgr),b(m,iUe,_),b(m,zo,_),M(O9,zo,null),e(zo,zgr),e(zo,jd),e(jd,Wgr),e(jd,EH),e(EH,Qgr),e(jd,Ugr),e(jd,CH),e(CH,Hgr),e(jd,Jgr),e(zo,Ygr),e(zo,V9),e(V9,Kgr),e(V9,eTe),e(eTe,Zgr),e(V9,ehr),e(zo,ohr),e(zo,wt),M(X9,wt,null),e(wt,rhr),e(wt,oTe),e(oTe,thr),e(wt,ahr),e(wt,Dd),e(Dd,nhr),e(Dd,rTe),e(rTe,shr),e(Dd,lhr),e(Dd,wH),e(wH,ihr),e(Dd,dhr),e(wt,chr),M(vE,wt,null),e(zo,mhr),e(zo,co),M(z9,co,null),e(co,fhr),e(co,tTe),e(tTe,ghr),e(co,hhr),e(co,on),e(on,uhr),e(on,aTe),e(aTe,phr),e(on,_hr),e(on,nTe),e(nTe,bhr),e(on,vhr),e(on,sTe),e(sTe,Fhr),e(on,Thr),e(co,Mhr),e(co,lTe),e(lTe,FE),e(FE,iTe),e(iTe,Ehr),e(FE,Chr),e(FE,AH),e(AH,whr),e(FE,Ahr),e(co,Lhr),e(co,TE),e(TE,yhr),e(TE,dTe),e(dTe,xhr),e(TE,$hr),e(TE,cTe),e(cTe,khr),e(co,Shr),M(ME,co,null),b(m,dUe,_),b(m,Gd,_),e(Gd,EE),e(EE,mTe),M(W9,mTe,null),e(Gd,Rhr),e(Gd,fTe),e(fTe,Phr),b(m,cUe,_),b(m,Wo,_),M(Q9,Wo,null),e(Wo,Bhr),e(Wo,Od),e(Od,Ihr),e(Od,LH),e(LH,Nhr),e(Od,qhr),e(Od,yH),e(yH,jhr),e(Od,Dhr),e(Wo,Ghr),e(Wo,U9),e(U9,Ohr),e(U9,gTe),e(gTe,Vhr),e(U9,Xhr),e(Wo,zhr),e(Wo,At),M(H9,At,null),e(At,Whr),e(At,hTe),e(hTe,Qhr),e(At,Uhr),e(At,Vd),e(Vd,Hhr),e(Vd,uTe),e(uTe,Jhr),e(Vd,Yhr),e(Vd,xH),e(xH,Khr),e(Vd,Zhr),e(At,eur),M(CE,At,null),e(Wo,our),e(Wo,mo),M(J9,mo,null),e(mo,rur),e(mo,pTe),e(pTe,tur),e(mo,aur),e(mo,rn),e(rn,nur),e(rn,_Te),e(_Te,sur),e(rn,lur),e(rn,bTe),e(bTe,iur),e(rn,dur),e(rn,vTe),e(vTe,cur),e(rn,mur),e(mo,fur),e(mo,FTe),e(FTe,wE),e(wE,TTe),e(TTe,gur),e(wE,hur),e(wE,$H),e($H,uur),e(wE,pur),e(mo,_ur),e(mo,AE),e(AE,bur),e(AE,MTe),e(MTe,vur),e(AE,Fur),e(AE,ETe),e(ETe,Tur),e(mo,Mur),M(LE,mo,null),b(m,mUe,_),b(m,Xd,_),e(Xd,yE),e(yE,CTe),M(Y9,CTe,null),e(Xd,Eur),e(Xd,wTe),e(wTe,Cur),b(m,fUe,_),b(m,Qo,_),M(K9,Qo,null),e(Qo,wur),e(Qo,zd),e(zd,Aur),e(zd,kH),e(kH,Lur),e(zd,yur),e(zd,SH),e(SH,xur),e(zd,$ur),e(Qo,kur),e(Qo,Z9),e(Z9,Sur),e(Z9,ATe),e(ATe,Rur),e(Z9,Pur),e(Qo,Bur),e(Qo,Lt),M(ex,Lt,null),e(Lt,Iur),e(Lt,LTe),e(LTe,Nur),e(Lt,qur),e(Lt,Wd),e(Wd,jur),e(Wd,yTe),e(yTe,Dur),e(Wd,Gur),e(Wd,RH),e(RH,Our),e(Wd,Vur),e(Lt,Xur),M(xE,Lt,null),e(Qo,zur),e(Qo,fo),M(ox,fo,null),e(fo,Wur),e(fo,xTe),e(xTe,Qur),e(fo,Uur),e(fo,tn),e(tn,Hur),e(tn,$Te),e($Te,Jur),e(tn,Yur),e(tn,kTe),e(kTe,Kur),e(tn,Zur),e(tn,STe),e(STe,epr),e(tn,opr),e(fo,rpr),e(fo,RTe),e(RTe,$E),e($E,PTe),e(PTe,tpr),e($E,apr),e($E,PH),e(PH,npr),e($E,spr),e(fo,lpr),e(fo,kE),e(kE,ipr),e(kE,BTe),e(BTe,dpr),e(kE,cpr),e(kE,ITe),e(ITe,mpr),e(fo,fpr),M(SE,fo,null),b(m,gUe,_),b(m,Qd,_),e(Qd,RE),e(RE,NTe),M(rx,NTe,null),e(Qd,gpr),e(Qd,qTe),e(qTe,hpr),b(m,hUe,_),b(m,Uo,_),M(tx,Uo,null),e(Uo,upr),e(Uo,Ud),e(Ud,ppr),e(Ud,BH),e(BH,_pr),e(Ud,bpr),e(Ud,IH),e(IH,vpr),e(Ud,Fpr),e(Uo,Tpr),e(Uo,ax),e(ax,Mpr),e(ax,jTe),e(jTe,Epr),e(ax,Cpr),e(Uo,wpr),e(Uo,yt),M(nx,yt,null),e(yt,Apr),e(yt,DTe),e(DTe,Lpr),e(yt,ypr),e(yt,Hd),e(Hd,xpr),e(Hd,GTe),e(GTe,$pr),e(Hd,kpr),e(Hd,NH),e(NH,Spr),e(Hd,Rpr),e(yt,Ppr),M(PE,yt,null),e(Uo,Bpr),e(Uo,go),M(sx,go,null),e(go,Ipr),e(go,OTe),e(OTe,Npr),e(go,qpr),e(go,an),e(an,jpr),e(an,VTe),e(VTe,Dpr),e(an,Gpr),e(an,XTe),e(XTe,Opr),e(an,Vpr),e(an,zTe),e(zTe,Xpr),e(an,zpr),e(go,Wpr),e(go,Pe),e(Pe,BE),e(BE,WTe),e(WTe,Qpr),e(BE,Upr),e(BE,qH),e(qH,Hpr),e(BE,Jpr),e(Pe,Ypr),e(Pe,IE),e(IE,QTe),e(QTe,Kpr),e(IE,Zpr),e(IE,jH),e(jH,e_r),e(IE,o_r),e(Pe,r_r),e(Pe,NE),e(NE,UTe),e(UTe,t_r),e(NE,a_r),e(NE,DH),e(DH,n_r),e(NE,s_r),e(Pe,l_r),e(Pe,qE),e(qE,HTe),e(HTe,i_r),e(qE,d_r),e(qE,GH),e(GH,c_r),e(qE,m_r),e(Pe,f_r),e(Pe,jE),e(jE,JTe),e(JTe,g_r),e(jE,h_r),e(jE,OH),e(OH,u_r),e(jE,p_r),e(Pe,__r),e(Pe,DE),e(DE,YTe),e(YTe,b_r),e(DE,v_r),e(DE,VH),e(VH,F_r),e(DE,T_r),e(Pe,M_r),e(Pe,GE),e(GE,KTe),e(KTe,E_r),e(GE,C_r),e(GE,XH),e(XH,w_r),e(GE,A_r),e(Pe,L_r),e(Pe,OE),e(OE,ZTe),e(ZTe,y_r),e(OE,x_r),e(OE,zH),e(zH,$_r),e(OE,k_r),e(Pe,S_r),e(Pe,VE),e(VE,eMe),e(eMe,R_r),e(VE,P_r),e(VE,WH),e(WH,B_r),e(VE,I_r),e(go,N_r),e(go,XE),e(XE,q_r),e(XE,oMe),e(oMe,j_r),e(XE,D_r),e(XE,rMe),e(rMe,G_r),e(go,O_r),M(zE,go,null),b(m,uUe,_),b(m,Jd,_),e(Jd,WE),e(WE,tMe),M(lx,tMe,null),e(Jd,V_r),e(Jd,aMe),e(aMe,X_r),b(m,pUe,_),b(m,Ho,_),M(ix,Ho,null),e(Ho,z_r),e(Ho,Yd),e(Yd,W_r),e(Yd,QH),e(QH,Q_r),e(Yd,U_r),e(Yd,UH),e(UH,H_r),e(Yd,J_r),e(Ho,Y_r),e(Ho,dx),e(dx,K_r),e(dx,nMe),e(nMe,Z_r),e(dx,e2r),e(Ho,o2r),e(Ho,xt),M(cx,xt,null),e(xt,r2r),e(xt,sMe),e(sMe,t2r),e(xt,a2r),e(xt,Kd),e(Kd,n2r),e(Kd,lMe),e(lMe,s2r),e(Kd,l2r),e(Kd,HH),e(HH,i2r),e(Kd,d2r),e(xt,c2r),M(QE,xt,null),e(Ho,m2r),e(Ho,ho),M(mx,ho,null),e(ho,f2r),e(ho,iMe),e(iMe,g2r),e(ho,h2r),e(ho,nn),e(nn,u2r),e(nn,dMe),e(dMe,p2r),e(nn,_2r),e(nn,cMe),e(cMe,b2r),e(nn,v2r),e(nn,mMe),e(mMe,F2r),e(nn,T2r),e(ho,M2r),e(ho,st),e(st,UE),e(UE,fMe),e(fMe,E2r),e(UE,C2r),e(UE,JH),e(JH,w2r),e(UE,A2r),e(st,L2r),e(st,HE),e(HE,gMe),e(gMe,y2r),e(HE,x2r),e(HE,YH),e(YH,$2r),e(HE,k2r),e(st,S2r),e(st,JE),e(JE,hMe),e(hMe,R2r),e(JE,P2r),e(JE,KH),e(KH,B2r),e(JE,I2r),e(st,N2r),e(st,YE),e(YE,uMe),e(uMe,q2r),e(YE,j2r),e(YE,ZH),e(ZH,D2r),e(YE,G2r),e(st,O2r),e(st,KE),e(KE,pMe),e(pMe,V2r),e(KE,X2r),e(KE,eJ),e(eJ,z2r),e(KE,W2r),e(ho,Q2r),e(ho,ZE),e(ZE,U2r),e(ZE,_Me),e(_Me,H2r),e(ZE,J2r),e(ZE,bMe),e(bMe,Y2r),e(ho,K2r),M(e4,ho,null),b(m,_Ue,_),b(m,Zd,_),e(Zd,o4),e(o4,vMe),M(fx,vMe,null),e(Zd,Z2r),e(Zd,FMe),e(FMe,ebr),b(m,bUe,_),b(m,Jo,_),M(gx,Jo,null),e(Jo,obr),e(Jo,ec),e(ec,rbr),e(ec,oJ),e(oJ,tbr),e(ec,abr),e(ec,rJ),e(rJ,nbr),e(ec,sbr),e(Jo,lbr),e(Jo,hx),e(hx,ibr),e(hx,TMe),e(TMe,dbr),e(hx,cbr),e(Jo,mbr),e(Jo,$t),M(ux,$t,null),e($t,fbr),e($t,MMe),e(MMe,gbr),e($t,hbr),e($t,oc),e(oc,ubr),e(oc,EMe),e(EMe,pbr),e(oc,_br),e(oc,tJ),e(tJ,bbr),e(oc,vbr),e($t,Fbr),M(r4,$t,null),e(Jo,Tbr),e(Jo,uo),M(px,uo,null),e(uo,Mbr),e(uo,CMe),e(CMe,Ebr),e(uo,Cbr),e(uo,sn),e(sn,wbr),e(sn,wMe),e(wMe,Abr),e(sn,Lbr),e(sn,AMe),e(AMe,ybr),e(sn,xbr),e(sn,LMe),e(LMe,$br),e(sn,kbr),e(uo,Sbr),e(uo,Le),e(Le,t4),e(t4,yMe),e(yMe,Rbr),e(t4,Pbr),e(t4,aJ),e(aJ,Bbr),e(t4,Ibr),e(Le,Nbr),e(Le,a4),e(a4,xMe),e(xMe,qbr),e(a4,jbr),e(a4,nJ),e(nJ,Dbr),e(a4,Gbr),e(Le,Obr),e(Le,n4),e(n4,$Me),e($Me,Vbr),e(n4,Xbr),e(n4,sJ),e(sJ,zbr),e(n4,Wbr),e(Le,Qbr),e(Le,s4),e(s4,kMe),e(kMe,Ubr),e(s4,Hbr),e(s4,lJ),e(lJ,Jbr),e(s4,Ybr),e(Le,Kbr),e(Le,l4),e(l4,SMe),e(SMe,Zbr),e(l4,evr),e(l4,iJ),e(iJ,ovr),e(l4,rvr),e(Le,tvr),e(Le,i4),e(i4,RMe),e(RMe,avr),e(i4,nvr),e(i4,dJ),e(dJ,svr),e(i4,lvr),e(Le,ivr),e(Le,d4),e(d4,PMe),e(PMe,dvr),e(d4,cvr),e(d4,cJ),e(cJ,mvr),e(d4,fvr),e(Le,gvr),e(Le,c4),e(c4,BMe),e(BMe,hvr),e(c4,uvr),e(c4,mJ),e(mJ,pvr),e(c4,_vr),e(Le,bvr),e(Le,m4),e(m4,IMe),e(IMe,vvr),e(m4,Fvr),e(m4,fJ),e(fJ,Tvr),e(m4,Mvr),e(Le,Evr),e(Le,f4),e(f4,NMe),e(NMe,Cvr),e(f4,wvr),e(f4,gJ),e(gJ,Avr),e(f4,Lvr),e(uo,yvr),e(uo,g4),e(g4,xvr),e(g4,qMe),e(qMe,$vr),e(g4,kvr),e(g4,jMe),e(jMe,Svr),e(uo,Rvr),M(h4,uo,null),b(m,vUe,_),b(m,rc,_),e(rc,u4),e(u4,DMe),M(_x,DMe,null),e(rc,Pvr),e(rc,GMe),e(GMe,Bvr),b(m,FUe,_),b(m,Yo,_),M(bx,Yo,null),e(Yo,Ivr),e(Yo,tc),e(tc,Nvr),e(tc,hJ),e(hJ,qvr),e(tc,jvr),e(tc,uJ),e(uJ,Dvr),e(tc,Gvr),e(Yo,Ovr),e(Yo,vx),e(vx,Vvr),e(vx,OMe),e(OMe,Xvr),e(vx,zvr),e(Yo,Wvr),e(Yo,kt),M(Fx,kt,null),e(kt,Qvr),e(kt,VMe),e(VMe,Uvr),e(kt,Hvr),e(kt,ac),e(ac,Jvr),e(ac,XMe),e(XMe,Yvr),e(ac,Kvr),e(ac,pJ),e(pJ,Zvr),e(ac,e1r),e(kt,o1r),M(p4,kt,null),e(Yo,r1r),e(Yo,po),M(Tx,po,null),e(po,t1r),e(po,zMe),e(zMe,a1r),e(po,n1r),e(po,ln),e(ln,s1r),e(ln,WMe),e(WMe,l1r),e(ln,i1r),e(ln,QMe),e(QMe,d1r),e(ln,c1r),e(ln,UMe),e(UMe,m1r),e(ln,f1r),e(po,g1r),e(po,Mx),e(Mx,_4),e(_4,HMe),e(HMe,h1r),e(_4,u1r),e(_4,_J),e(_J,p1r),e(_4,_1r),e(Mx,b1r),e(Mx,b4),e(b4,JMe),e(JMe,v1r),e(b4,F1r),e(b4,bJ),e(bJ,T1r),e(b4,M1r),e(po,E1r),e(po,v4),e(v4,C1r),e(v4,YMe),e(YMe,w1r),e(v4,A1r),e(v4,KMe),e(KMe,L1r),e(po,y1r),M(F4,po,null),b(m,TUe,_),b(m,nc,_),e(nc,T4),e(T4,ZMe),M(Ex,ZMe,null),e(nc,x1r),e(nc,eEe),e(eEe,$1r),b(m,MUe,_),b(m,Ko,_),M(Cx,Ko,null),e(Ko,k1r),e(Ko,sc),e(sc,S1r),e(sc,vJ),e(vJ,R1r),e(sc,P1r),e(sc,FJ),e(FJ,B1r),e(sc,I1r),e(Ko,N1r),e(Ko,wx),e(wx,q1r),e(wx,oEe),e(oEe,j1r),e(wx,D1r),e(Ko,G1r),e(Ko,St),M(Ax,St,null),e(St,O1r),e(St,rEe),e(rEe,V1r),e(St,X1r),e(St,lc),e(lc,z1r),e(lc,tEe),e(tEe,W1r),e(lc,Q1r),e(lc,TJ),e(TJ,U1r),e(lc,H1r),e(St,J1r),M(M4,St,null),e(Ko,Y1r),e(Ko,_o),M(Lx,_o,null),e(_o,K1r),e(_o,aEe),e(aEe,Z1r),e(_o,eFr),e(_o,dn),e(dn,oFr),e(dn,nEe),e(nEe,rFr),e(dn,tFr),e(dn,sEe),e(sEe,aFr),e(dn,nFr),e(dn,lEe),e(lEe,sFr),e(dn,lFr),e(_o,iFr),e(_o,lt),e(lt,E4),e(E4,iEe),e(iEe,dFr),e(E4,cFr),e(E4,MJ),e(MJ,mFr),e(E4,fFr),e(lt,gFr),e(lt,C4),e(C4,dEe),e(dEe,hFr),e(C4,uFr),e(C4,EJ),e(EJ,pFr),e(C4,_Fr),e(lt,bFr),e(lt,w4),e(w4,cEe),e(cEe,vFr),e(w4,FFr),e(w4,CJ),e(CJ,TFr),e(w4,MFr),e(lt,EFr),e(lt,A4),e(A4,mEe),e(mEe,CFr),e(A4,wFr),e(A4,wJ),e(wJ,AFr),e(A4,LFr),e(lt,yFr),e(lt,L4),e(L4,fEe),e(fEe,xFr),e(L4,$Fr),e(L4,AJ),e(AJ,kFr),e(L4,SFr),e(_o,RFr),e(_o,y4),e(y4,PFr),e(y4,gEe),e(gEe,BFr),e(y4,IFr),e(y4,hEe),e(hEe,NFr),e(_o,qFr),M(x4,_o,null),b(m,EUe,_),b(m,ic,_),e(ic,$4),e($4,uEe),M(yx,uEe,null),e(ic,jFr),e(ic,pEe),e(pEe,DFr),b(m,CUe,_),b(m,Zo,_),M(xx,Zo,null),e(Zo,GFr),e(Zo,dc),e(dc,OFr),e(dc,LJ),e(LJ,VFr),e(dc,XFr),e(dc,yJ),e(yJ,zFr),e(dc,WFr),e(Zo,QFr),e(Zo,$x),e($x,UFr),e($x,_Ee),e(_Ee,HFr),e($x,JFr),e(Zo,YFr),e(Zo,Rt),M(kx,Rt,null),e(Rt,KFr),e(Rt,bEe),e(bEe,ZFr),e(Rt,eTr),e(Rt,cc),e(cc,oTr),e(cc,vEe),e(vEe,rTr),e(cc,tTr),e(cc,xJ),e(xJ,aTr),e(cc,nTr),e(Rt,sTr),M(k4,Rt,null),e(Zo,lTr),e(Zo,bo),M(Sx,bo,null),e(bo,iTr),e(bo,FEe),e(FEe,dTr),e(bo,cTr),e(bo,cn),e(cn,mTr),e(cn,TEe),e(TEe,fTr),e(cn,gTr),e(cn,MEe),e(MEe,hTr),e(cn,uTr),e(cn,EEe),e(EEe,pTr),e(cn,_Tr),e(bo,bTr),e(bo,mn),e(mn,S4),e(S4,CEe),e(CEe,vTr),e(S4,FTr),e(S4,$J),e($J,TTr),e(S4,MTr),e(mn,ETr),e(mn,R4),e(R4,wEe),e(wEe,CTr),e(R4,wTr),e(R4,kJ),e(kJ,ATr),e(R4,LTr),e(mn,yTr),e(mn,P4),e(P4,AEe),e(AEe,xTr),e(P4,$Tr),e(P4,SJ),e(SJ,kTr),e(P4,STr),e(mn,RTr),e(mn,B4),e(B4,LEe),e(LEe,PTr),e(B4,BTr),e(B4,RJ),e(RJ,ITr),e(B4,NTr),e(bo,qTr),e(bo,I4),e(I4,jTr),e(I4,yEe),e(yEe,DTr),e(I4,GTr),e(I4,xEe),e(xEe,OTr),e(bo,VTr),M(N4,bo,null),b(m,wUe,_),b(m,mc,_),e(mc,q4),e(q4,$Ee),M(Rx,$Ee,null),e(mc,XTr),e(mc,kEe),e(kEe,zTr),b(m,AUe,_),b(m,er,_),M(Px,er,null),e(er,WTr),e(er,fc),e(fc,QTr),e(fc,PJ),e(PJ,UTr),e(fc,HTr),e(fc,BJ),e(BJ,JTr),e(fc,YTr),e(er,KTr),e(er,Bx),e(Bx,ZTr),e(Bx,SEe),e(SEe,eMr),e(Bx,oMr),e(er,rMr),e(er,Pt),M(Ix,Pt,null),e(Pt,tMr),e(Pt,REe),e(REe,aMr),e(Pt,nMr),e(Pt,gc),e(gc,sMr),e(gc,PEe),e(PEe,lMr),e(gc,iMr),e(gc,IJ),e(IJ,dMr),e(gc,cMr),e(Pt,mMr),M(j4,Pt,null),e(er,fMr),e(er,vo),M(Nx,vo,null),e(vo,gMr),e(vo,BEe),e(BEe,hMr),e(vo,uMr),e(vo,fn),e(fn,pMr),e(fn,IEe),e(IEe,_Mr),e(fn,bMr),e(fn,NEe),e(NEe,vMr),e(fn,FMr),e(fn,qEe),e(qEe,TMr),e(fn,MMr),e(vo,EMr),e(vo,qx),e(qx,D4),e(D4,jEe),e(jEe,CMr),e(D4,wMr),e(D4,NJ),e(NJ,AMr),e(D4,LMr),e(qx,yMr),e(qx,G4),e(G4,DEe),e(DEe,xMr),e(G4,$Mr),e(G4,qJ),e(qJ,kMr),e(G4,SMr),e(vo,RMr),e(vo,O4),e(O4,PMr),e(O4,GEe),e(GEe,BMr),e(O4,IMr),e(O4,OEe),e(OEe,NMr),e(vo,qMr),M(V4,vo,null),b(m,LUe,_),b(m,hc,_),e(hc,X4),e(X4,VEe),M(jx,VEe,null),e(hc,jMr),e(hc,XEe),e(XEe,DMr),b(m,yUe,_),b(m,or,_),M(Dx,or,null),e(or,GMr),e(or,uc),e(uc,OMr),e(uc,jJ),e(jJ,VMr),e(uc,XMr),e(uc,DJ),e(DJ,zMr),e(uc,WMr),e(or,QMr),e(or,Gx),e(Gx,UMr),e(Gx,zEe),e(zEe,HMr),e(Gx,JMr),e(or,YMr),e(or,Bt),M(Ox,Bt,null),e(Bt,KMr),e(Bt,WEe),e(WEe,ZMr),e(Bt,eEr),e(Bt,pc),e(pc,oEr),e(pc,QEe),e(QEe,rEr),e(pc,tEr),e(pc,GJ),e(GJ,aEr),e(pc,nEr),e(Bt,sEr),M(z4,Bt,null),e(or,lEr),e(or,Fo),M(Vx,Fo,null),e(Fo,iEr),e(Fo,UEe),e(UEe,dEr),e(Fo,cEr),e(Fo,gn),e(gn,mEr),e(gn,HEe),e(HEe,fEr),e(gn,gEr),e(gn,JEe),e(JEe,hEr),e(gn,uEr),e(gn,YEe),e(YEe,pEr),e(gn,_Er),e(Fo,bEr),e(Fo,KEe),e(KEe,W4),e(W4,ZEe),e(ZEe,vEr),e(W4,FEr),e(W4,OJ),e(OJ,TEr),e(W4,MEr),e(Fo,EEr),e(Fo,Q4),e(Q4,CEr),e(Q4,e4e),e(e4e,wEr),e(Q4,AEr),e(Q4,o4e),e(o4e,LEr),e(Fo,yEr),M(U4,Fo,null),b(m,xUe,_),b(m,_c,_),e(_c,H4),e(H4,r4e),M(Xx,r4e,null),e(_c,xEr),e(_c,t4e),e(t4e,$Er),b(m,$Ue,_),b(m,rr,_),M(zx,rr,null),e(rr,kEr),e(rr,bc),e(bc,SEr),e(bc,VJ),e(VJ,REr),e(bc,PEr),e(bc,XJ),e(XJ,BEr),e(bc,IEr),e(rr,NEr),e(rr,Wx),e(Wx,qEr),e(Wx,a4e),e(a4e,jEr),e(Wx,DEr),e(rr,GEr),e(rr,It),M(Qx,It,null),e(It,OEr),e(It,n4e),e(n4e,VEr),e(It,XEr),e(It,vc),e(vc,zEr),e(vc,s4e),e(s4e,WEr),e(vc,QEr),e(vc,zJ),e(zJ,UEr),e(vc,HEr),e(It,JEr),M(J4,It,null),e(rr,YEr),e(rr,To),M(Ux,To,null),e(To,KEr),e(To,l4e),e(l4e,ZEr),e(To,e4r),e(To,hn),e(hn,o4r),e(hn,i4e),e(i4e,r4r),e(hn,t4r),e(hn,d4e),e(d4e,a4r),e(hn,n4r),e(hn,c4e),e(c4e,s4r),e(hn,l4r),e(To,i4r),e(To,it),e(it,Y4),e(Y4,m4e),e(m4e,d4r),e(Y4,c4r),e(Y4,WJ),e(WJ,m4r),e(Y4,f4r),e(it,g4r),e(it,K4),e(K4,f4e),e(f4e,h4r),e(K4,u4r),e(K4,QJ),e(QJ,p4r),e(K4,_4r),e(it,b4r),e(it,Z4),e(Z4,g4e),e(g4e,v4r),e(Z4,F4r),e(Z4,UJ),e(UJ,T4r),e(Z4,M4r),e(it,E4r),e(it,eC),e(eC,h4e),e(h4e,C4r),e(eC,w4r),e(eC,HJ),e(HJ,A4r),e(eC,L4r),e(it,y4r),e(it,oC),e(oC,u4e),e(u4e,x4r),e(oC,$4r),e(oC,JJ),e(JJ,k4r),e(oC,S4r),e(To,R4r),e(To,rC),e(rC,P4r),e(rC,p4e),e(p4e,B4r),e(rC,I4r),e(rC,_4e),e(_4e,N4r),e(To,q4r),M(tC,To,null),b(m,kUe,_),b(m,Fc,_),e(Fc,aC),e(aC,b4e),M(Hx,b4e,null),e(Fc,j4r),e(Fc,v4e),e(v4e,D4r),b(m,SUe,_),b(m,tr,_),M(Jx,tr,null),e(tr,G4r),e(tr,Tc),e(Tc,O4r),e(Tc,YJ),e(YJ,V4r),e(Tc,X4r),e(Tc,KJ),e(KJ,z4r),e(Tc,W4r),e(tr,Q4r),e(tr,Yx),e(Yx,U4r),e(Yx,F4e),e(F4e,H4r),e(Yx,J4r),e(tr,Y4r),e(tr,Nt),M(Kx,Nt,null),e(Nt,K4r),e(Nt,T4e),e(T4e,Z4r),e(Nt,eCr),e(Nt,Mc),e(Mc,oCr),e(Mc,M4e),e(M4e,rCr),e(Mc,tCr),e(Mc,ZJ),e(ZJ,aCr),e(Mc,nCr),e(Nt,sCr),M(nC,Nt,null),e(tr,lCr),e(tr,Mo),M(Zx,Mo,null),e(Mo,iCr),e(Mo,E4e),e(E4e,dCr),e(Mo,cCr),e(Mo,un),e(un,mCr),e(un,C4e),e(C4e,fCr),e(un,gCr),e(un,w4e),e(w4e,hCr),e(un,uCr),e(un,A4e),e(A4e,pCr),e(un,_Cr),e(Mo,bCr),e(Mo,L4e),e(L4e,sC),e(sC,y4e),e(y4e,vCr),e(sC,FCr),e(sC,eY),e(eY,TCr),e(sC,MCr),e(Mo,ECr),e(Mo,lC),e(lC,CCr),e(lC,x4e),e(x4e,wCr),e(lC,ACr),e(lC,$4e),e($4e,LCr),e(Mo,yCr),M(iC,Mo,null),b(m,RUe,_),b(m,Ec,_),e(Ec,dC),e(dC,k4e),M(e$,k4e,null),e(Ec,xCr),e(Ec,S4e),e(S4e,$Cr),b(m,PUe,_),b(m,ar,_),M(o$,ar,null),e(ar,kCr),e(ar,Cc),e(Cc,SCr),e(Cc,oY),e(oY,RCr),e(Cc,PCr),e(Cc,rY),e(rY,BCr),e(Cc,ICr),e(ar,NCr),e(ar,r$),e(r$,qCr),e(r$,R4e),e(R4e,jCr),e(r$,DCr),e(ar,GCr),e(ar,qt),M(t$,qt,null),e(qt,OCr),e(qt,P4e),e(P4e,VCr),e(qt,XCr),e(qt,wc),e(wc,zCr),e(wc,B4e),e(B4e,WCr),e(wc,QCr),e(wc,tY),e(tY,UCr),e(wc,HCr),e(qt,JCr),M(cC,qt,null),e(ar,YCr),e(ar,Rr),M(a$,Rr,null),e(Rr,KCr),e(Rr,I4e),e(I4e,ZCr),e(Rr,e3r),e(Rr,pn),e(pn,o3r),e(pn,N4e),e(N4e,r3r),e(pn,t3r),e(pn,q4e),e(q4e,a3r),e(pn,n3r),e(pn,j4e),e(j4e,s3r),e(pn,l3r),e(Rr,i3r),e(Rr,q),e(q,mC),e(mC,D4e),e(D4e,d3r),e(mC,c3r),e(mC,aY),e(aY,m3r),e(mC,f3r),e(q,g3r),e(q,fC),e(fC,G4e),e(G4e,h3r),e(fC,u3r),e(fC,nY),e(nY,p3r),e(fC,_3r),e(q,b3r),e(q,gC),e(gC,O4e),e(O4e,v3r),e(gC,F3r),e(gC,sY),e(sY,T3r),e(gC,M3r),e(q,E3r),e(q,hC),e(hC,V4e),e(V4e,C3r),e(hC,w3r),e(hC,lY),e(lY,A3r),e(hC,L3r),e(q,y3r),e(q,uC),e(uC,X4e),e(X4e,x3r),e(uC,$3r),e(uC,iY),e(iY,k3r),e(uC,S3r),e(q,R3r),e(q,pC),e(pC,z4e),e(z4e,P3r),e(pC,B3r),e(pC,dY),e(dY,I3r),e(pC,N3r),e(q,q3r),e(q,_C),e(_C,W4e),e(W4e,j3r),e(_C,D3r),e(_C,cY),e(cY,G3r),e(_C,O3r),e(q,V3r),e(q,bC),e(bC,Q4e),e(Q4e,X3r),e(bC,z3r),e(bC,mY),e(mY,W3r),e(bC,Q3r),e(q,U3r),e(q,vC),e(vC,U4e),e(U4e,H3r),e(vC,J3r),e(vC,fY),e(fY,Y3r),e(vC,K3r),e(q,Z3r),e(q,FC),e(FC,H4e),e(H4e,e5r),e(FC,o5r),e(FC,gY),e(gY,r5r),e(FC,t5r),e(q,a5r),e(q,TC),e(TC,J4e),e(J4e,n5r),e(TC,s5r),e(TC,hY),e(hY,l5r),e(TC,i5r),e(q,d5r),e(q,MC),e(MC,Y4e),e(Y4e,c5r),e(MC,m5r),e(MC,uY),e(uY,f5r),e(MC,g5r),e(q,h5r),e(q,EC),e(EC,K4e),e(K4e,u5r),e(EC,p5r),e(EC,pY),e(pY,_5r),e(EC,b5r),e(q,v5r),e(q,CC),e(CC,Z4e),e(Z4e,F5r),e(CC,T5r),e(CC,_Y),e(_Y,M5r),e(CC,E5r),e(q,C5r),e(q,wC),e(wC,eCe),e(eCe,w5r),e(wC,A5r),e(wC,bY),e(bY,L5r),e(wC,y5r),e(q,x5r),e(q,AC),e(AC,oCe),e(oCe,$5r),e(AC,k5r),e(AC,vY),e(vY,S5r),e(AC,R5r),e(q,P5r),e(q,LC),e(LC,rCe),e(rCe,B5r),e(LC,I5r),e(LC,FY),e(FY,N5r),e(LC,q5r),e(q,j5r),e(q,yC),e(yC,tCe),e(tCe,D5r),e(yC,G5r),e(yC,TY),e(TY,O5r),e(yC,V5r),e(q,X5r),e(q,il),e(il,aCe),e(aCe,z5r),e(il,W5r),e(il,MY),e(MY,Q5r),e(il,U5r),e(il,EY),e(EY,H5r),e(il,J5r),e(q,Y5r),e(q,xC),e(xC,nCe),e(nCe,K5r),e(xC,Z5r),e(xC,CY),e(CY,e0r),e(xC,o0r),e(q,r0r),e(q,$C),e($C,sCe),e(sCe,t0r),e($C,a0r),e($C,wY),e(wY,n0r),e($C,s0r),e(q,l0r),e(q,kC),e(kC,lCe),e(lCe,i0r),e(kC,d0r),e(kC,AY),e(AY,c0r),e(kC,m0r),e(q,f0r),e(q,SC),e(SC,iCe),e(iCe,g0r),e(SC,h0r),e(SC,LY),e(LY,u0r),e(SC,p0r),e(q,_0r),e(q,RC),e(RC,dCe),e(dCe,b0r),e(RC,v0r),e(RC,yY),e(yY,F0r),e(RC,T0r),e(q,M0r),e(q,PC),e(PC,cCe),e(cCe,E0r),e(PC,C0r),e(PC,xY),e(xY,w0r),e(PC,A0r),e(q,L0r),e(q,BC),e(BC,mCe),e(mCe,y0r),e(BC,x0r),e(BC,$Y),e($Y,$0r),e(BC,k0r),e(q,S0r),e(q,IC),e(IC,fCe),e(fCe,R0r),e(IC,P0r),e(IC,kY),e(kY,B0r),e(IC,I0r),e(q,N0r),e(q,NC),e(NC,gCe),e(gCe,q0r),e(NC,j0r),e(NC,SY),e(SY,D0r),e(NC,G0r),e(q,O0r),e(q,qC),e(qC,hCe),e(hCe,V0r),e(qC,X0r),e(qC,RY),e(RY,z0r),e(qC,W0r),e(q,Q0r),e(q,jC),e(jC,uCe),e(uCe,U0r),e(jC,H0r),e(jC,PY),e(PY,J0r),e(jC,Y0r),e(q,K0r),e(q,DC),e(DC,pCe),e(pCe,Z0r),e(DC,ewr),e(DC,BY),e(BY,owr),e(DC,rwr),e(q,twr),e(q,GC),e(GC,_Ce),e(_Ce,awr),e(GC,nwr),e(GC,IY),e(IY,swr),e(GC,lwr),e(q,iwr),e(q,OC),e(OC,bCe),e(bCe,dwr),e(OC,cwr),e(OC,NY),e(NY,mwr),e(OC,fwr),e(q,gwr),e(q,VC),e(VC,vCe),e(vCe,hwr),e(VC,uwr),e(VC,qY),e(qY,pwr),e(VC,_wr),e(q,bwr),e(q,XC),e(XC,FCe),e(FCe,vwr),e(XC,Fwr),e(XC,jY),e(jY,Twr),e(XC,Mwr),e(q,Ewr),e(q,zC),e(zC,TCe),e(TCe,Cwr),e(zC,wwr),e(zC,DY),e(DY,Awr),e(zC,Lwr),e(q,ywr),e(q,WC),e(WC,MCe),e(MCe,xwr),e(WC,$wr),e(WC,GY),e(GY,kwr),e(WC,Swr),e(q,Rwr),e(q,QC),e(QC,ECe),e(ECe,Pwr),e(QC,Bwr),e(QC,OY),e(OY,Iwr),e(QC,Nwr),e(q,qwr),e(q,UC),e(UC,CCe),e(CCe,jwr),e(UC,Dwr),e(UC,VY),e(VY,Gwr),e(UC,Owr),e(q,Vwr),e(q,HC),e(HC,wCe),e(wCe,Xwr),e(HC,zwr),e(HC,XY),e(XY,Wwr),e(HC,Qwr),e(q,Uwr),e(q,JC),e(JC,ACe),e(ACe,Hwr),e(JC,Jwr),e(JC,zY),e(zY,Ywr),e(JC,Kwr),e(q,Zwr),e(q,YC),e(YC,LCe),e(LCe,e6r),e(YC,o6r),e(YC,WY),e(WY,r6r),e(YC,t6r),e(q,a6r),e(q,KC),e(KC,yCe),e(yCe,n6r),e(KC,s6r),e(KC,QY),e(QY,l6r),e(KC,i6r),e(q,d6r),e(q,ZC),e(ZC,xCe),e(xCe,c6r),e(ZC,m6r),e(ZC,UY),e(UY,f6r),e(ZC,g6r),e(q,h6r),e(q,e3),e(e3,$Ce),e($Ce,u6r),e(e3,p6r),e(e3,HY),e(HY,_6r),e(e3,b6r),e(q,v6r),e(q,o3),e(o3,kCe),e(kCe,F6r),e(o3,T6r),e(o3,JY),e(JY,M6r),e(o3,E6r),e(q,C6r),e(q,r3),e(r3,SCe),e(SCe,w6r),e(r3,A6r),e(r3,YY),e(YY,L6r),e(r3,y6r),e(q,x6r),e(q,t3),e(t3,RCe),e(RCe,$6r),e(t3,k6r),e(t3,KY),e(KY,S6r),e(t3,R6r),e(q,P6r),e(q,a3),e(a3,PCe),e(PCe,B6r),e(a3,I6r),e(a3,ZY),e(ZY,N6r),e(a3,q6r),e(q,j6r),e(q,n3),e(n3,BCe),e(BCe,D6r),e(n3,G6r),e(n3,eK),e(eK,O6r),e(n3,V6r),e(q,X6r),e(q,s3),e(s3,ICe),e(ICe,z6r),e(s3,W6r),e(s3,oK),e(oK,Q6r),e(s3,U6r),e(Rr,H6r),M(l3,Rr,null),b(m,BUe,_),b(m,Ac,_),e(Ac,i3),e(i3,NCe),M(n$,NCe,null),e(Ac,J6r),e(Ac,qCe),e(qCe,Y6r),b(m,IUe,_),b(m,nr,_),M(s$,nr,null),e(nr,K6r),e(nr,Lc),e(Lc,Z6r),e(Lc,rK),e(rK,eAr),e(Lc,oAr),e(Lc,tK),e(tK,rAr),e(Lc,tAr),e(nr,aAr),e(nr,l$),e(l$,nAr),e(l$,jCe),e(jCe,sAr),e(l$,lAr),e(nr,iAr),e(nr,jt),M(i$,jt,null),e(jt,dAr),e(jt,DCe),e(DCe,cAr),e(jt,mAr),e(jt,yc),e(yc,fAr),e(yc,GCe),e(GCe,gAr),e(yc,hAr),e(yc,aK),e(aK,uAr),e(yc,pAr),e(jt,_Ar),M(d3,jt,null),e(nr,bAr),e(nr,Pr),M(d$,Pr,null),e(Pr,vAr),e(Pr,OCe),e(OCe,FAr),e(Pr,TAr),e(Pr,_n),e(_n,MAr),e(_n,VCe),e(VCe,EAr),e(_n,CAr),e(_n,XCe),e(XCe,wAr),e(_n,AAr),e(_n,zCe),e(zCe,LAr),e(_n,yAr),e(Pr,xAr),e(Pr,se),e(se,c3),e(c3,WCe),e(WCe,$Ar),e(c3,kAr),e(c3,nK),e(nK,SAr),e(c3,RAr),e(se,PAr),e(se,m3),e(m3,QCe),e(QCe,BAr),e(m3,IAr),e(m3,sK),e(sK,NAr),e(m3,qAr),e(se,jAr),e(se,f3),e(f3,UCe),e(UCe,DAr),e(f3,GAr),e(f3,lK),e(lK,OAr),e(f3,VAr),e(se,XAr),e(se,g3),e(g3,HCe),e(HCe,zAr),e(g3,WAr),e(g3,iK),e(iK,QAr),e(g3,UAr),e(se,HAr),e(se,h3),e(h3,JCe),e(JCe,JAr),e(h3,YAr),e(h3,dK),e(dK,KAr),e(h3,ZAr),e(se,e7r),e(se,u3),e(u3,YCe),e(YCe,o7r),e(u3,r7r),e(u3,cK),e(cK,t7r),e(u3,a7r),e(se,n7r),e(se,p3),e(p3,KCe),e(KCe,s7r),e(p3,l7r),e(p3,mK),e(mK,i7r),e(p3,d7r),e(se,c7r),e(se,_3),e(_3,ZCe),e(ZCe,m7r),e(_3,f7r),e(_3,fK),e(fK,g7r),e(_3,h7r),e(se,u7r),e(se,b3),e(b3,e3e),e(e3e,p7r),e(b3,_7r),e(b3,gK),e(gK,b7r),e(b3,v7r),e(se,F7r),e(se,v3),e(v3,o3e),e(o3e,T7r),e(v3,M7r),e(v3,hK),e(hK,E7r),e(v3,C7r),e(se,w7r),e(se,F3),e(F3,r3e),e(r3e,A7r),e(F3,L7r),e(F3,uK),e(uK,y7r),e(F3,x7r),e(se,$7r),e(se,T3),e(T3,t3e),e(t3e,k7r),e(T3,S7r),e(T3,pK),e(pK,R7r),e(T3,P7r),e(se,B7r),e(se,M3),e(M3,a3e),e(a3e,I7r),e(M3,N7r),e(M3,_K),e(_K,q7r),e(M3,j7r),e(se,D7r),e(se,E3),e(E3,n3e),e(n3e,G7r),e(E3,O7r),e(E3,bK),e(bK,V7r),e(E3,X7r),e(se,z7r),e(se,C3),e(C3,s3e),e(s3e,W7r),e(C3,Q7r),e(C3,vK),e(vK,U7r),e(C3,H7r),e(se,J7r),e(se,w3),e(w3,l3e),e(l3e,Y7r),e(w3,K7r),e(w3,FK),e(FK,Z7r),e(w3,eLr),e(se,oLr),e(se,A3),e(A3,i3e),e(i3e,rLr),e(A3,tLr),e(A3,TK),e(TK,aLr),e(A3,nLr),e(se,sLr),e(se,L3),e(L3,d3e),e(d3e,lLr),e(L3,iLr),e(L3,MK),e(MK,dLr),e(L3,cLr),e(se,mLr),e(se,y3),e(y3,c3e),e(c3e,fLr),e(y3,gLr),e(y3,EK),e(EK,hLr),e(y3,uLr),e(se,pLr),e(se,x3),e(x3,m3e),e(m3e,_Lr),e(x3,bLr),e(x3,CK),e(CK,vLr),e(x3,FLr),e(se,TLr),e(se,$3),e($3,f3e),e(f3e,MLr),e($3,ELr),e($3,wK),e(wK,CLr),e($3,wLr),e(se,ALr),e(se,k3),e(k3,g3e),e(g3e,LLr),e(k3,yLr),e(k3,AK),e(AK,xLr),e(k3,$Lr),e(se,kLr),e(se,S3),e(S3,h3e),e(h3e,SLr),e(S3,RLr),e(S3,LK),e(LK,PLr),e(S3,BLr),e(Pr,ILr),M(R3,Pr,null),b(m,NUe,_),b(m,xc,_),e(xc,P3),e(P3,u3e),M(c$,u3e,null),e(xc,NLr),e(xc,p3e),e(p3e,qLr),b(m,qUe,_),b(m,sr,_),M(m$,sr,null),e(sr,jLr),e(sr,$c),e($c,DLr),e($c,yK),e(yK,GLr),e($c,OLr),e($c,xK),e(xK,VLr),e($c,XLr),e(sr,zLr),e(sr,f$),e(f$,WLr),e(f$,_3e),e(_3e,QLr),e(f$,ULr),e(sr,HLr),e(sr,Dt),M(g$,Dt,null),e(Dt,JLr),e(Dt,b3e),e(b3e,YLr),e(Dt,KLr),e(Dt,kc),e(kc,ZLr),e(kc,v3e),e(v3e,eyr),e(kc,oyr),e(kc,$K),e($K,ryr),e(kc,tyr),e(Dt,ayr),M(B3,Dt,null),e(sr,nyr),e(sr,Br),M(h$,Br,null),e(Br,syr),e(Br,F3e),e(F3e,lyr),e(Br,iyr),e(Br,bn),e(bn,dyr),e(bn,T3e),e(T3e,cyr),e(bn,myr),e(bn,M3e),e(M3e,fyr),e(bn,gyr),e(bn,E3e),e(E3e,hyr),e(bn,uyr),e(Br,pyr),e(Br,Me),e(Me,I3),e(I3,C3e),e(C3e,_yr),e(I3,byr),e(I3,kK),e(kK,vyr),e(I3,Fyr),e(Me,Tyr),e(Me,N3),e(N3,w3e),e(w3e,Myr),e(N3,Eyr),e(N3,SK),e(SK,Cyr),e(N3,wyr),e(Me,Ayr),e(Me,q3),e(q3,A3e),e(A3e,Lyr),e(q3,yyr),e(q3,RK),e(RK,xyr),e(q3,$yr),e(Me,kyr),e(Me,j3),e(j3,L3e),e(L3e,Syr),e(j3,Ryr),e(j3,PK),e(PK,Pyr),e(j3,Byr),e(Me,Iyr),e(Me,D3),e(D3,y3e),e(y3e,Nyr),e(D3,qyr),e(D3,BK),e(BK,jyr),e(D3,Dyr),e(Me,Gyr),e(Me,G3),e(G3,x3e),e(x3e,Oyr),e(G3,Vyr),e(G3,IK),e(IK,Xyr),e(G3,zyr),e(Me,Wyr),e(Me,O3),e(O3,$3e),e($3e,Qyr),e(O3,Uyr),e(O3,NK),e(NK,Hyr),e(O3,Jyr),e(Me,Yyr),e(Me,V3),e(V3,k3e),e(k3e,Kyr),e(V3,Zyr),e(V3,qK),e(qK,e8r),e(V3,o8r),e(Me,r8r),e(Me,X3),e(X3,S3e),e(S3e,t8r),e(X3,a8r),e(X3,jK),e(jK,n8r),e(X3,s8r),e(Me,l8r),e(Me,z3),e(z3,R3e),e(R3e,i8r),e(z3,d8r),e(z3,DK),e(DK,c8r),e(z3,m8r),e(Me,f8r),e(Me,W3),e(W3,P3e),e(P3e,g8r),e(W3,h8r),e(W3,GK),e(GK,u8r),e(W3,p8r),e(Me,_8r),e(Me,Q3),e(Q3,B3e),e(B3e,b8r),e(Q3,v8r),e(Q3,OK),e(OK,F8r),e(Q3,T8r),e(Me,M8r),e(Me,U3),e(U3,I3e),e(I3e,E8r),e(U3,C8r),e(U3,VK),e(VK,w8r),e(U3,A8r),e(Br,L8r),M(H3,Br,null),b(m,jUe,_),b(m,Sc,_),e(Sc,J3),e(J3,N3e),M(u$,N3e,null),e(Sc,y8r),e(Sc,q3e),e(q3e,x8r),b(m,DUe,_),b(m,lr,_),M(p$,lr,null),e(lr,$8r),e(lr,Rc),e(Rc,k8r),e(Rc,XK),e(XK,S8r),e(Rc,R8r),e(Rc,zK),e(zK,P8r),e(Rc,B8r),e(lr,I8r),e(lr,_$),e(_$,N8r),e(_$,j3e),e(j3e,q8r),e(_$,j8r),e(lr,D8r),e(lr,Gt),M(b$,Gt,null),e(Gt,G8r),e(Gt,D3e),e(D3e,O8r),e(Gt,V8r),e(Gt,Pc),e(Pc,X8r),e(Pc,G3e),e(G3e,z8r),e(Pc,W8r),e(Pc,WK),e(WK,Q8r),e(Pc,U8r),e(Gt,H8r),M(Y3,Gt,null),e(lr,J8r),e(lr,Ir),M(v$,Ir,null),e(Ir,Y8r),e(Ir,O3e),e(O3e,K8r),e(Ir,Z8r),e(Ir,vn),e(vn,e9r),e(vn,V3e),e(V3e,o9r),e(vn,r9r),e(vn,X3e),e(X3e,t9r),e(vn,a9r),e(vn,z3e),e(z3e,n9r),e(vn,s9r),e(Ir,l9r),e(Ir,Ve),e(Ve,K3),e(K3,W3e),e(W3e,i9r),e(K3,d9r),e(K3,QK),e(QK,c9r),e(K3,m9r),e(Ve,f9r),e(Ve,Z3),e(Z3,Q3e),e(Q3e,g9r),e(Z3,h9r),e(Z3,UK),e(UK,u9r),e(Z3,p9r),e(Ve,_9r),e(Ve,dl),e(dl,U3e),e(U3e,b9r),e(dl,v9r),e(dl,HK),e(HK,F9r),e(dl,T9r),e(dl,JK),e(JK,M9r),e(dl,E9r),e(Ve,C9r),e(Ve,e5),e(e5,H3e),e(H3e,w9r),e(e5,A9r),e(e5,YK),e(YK,L9r),e(e5,y9r),e(Ve,x9r),e(Ve,o5),e(o5,J3e),e(J3e,$9r),e(o5,k9r),e(o5,KK),e(KK,S9r),e(o5,R9r),e(Ve,P9r),e(Ve,r5),e(r5,Y3e),e(Y3e,B9r),e(r5,I9r),e(r5,ZK),e(ZK,N9r),e(r5,q9r),e(Ve,j9r),e(Ve,t5),e(t5,K3e),e(K3e,D9r),e(t5,G9r),e(t5,eZ),e(eZ,O9r),e(t5,V9r),e(Ve,X9r),e(Ve,a5),e(a5,Z3e),e(Z3e,z9r),e(a5,W9r),e(a5,oZ),e(oZ,Q9r),e(a5,U9r),e(Ir,H9r),M(n5,Ir,null),b(m,GUe,_),b(m,Bc,_),e(Bc,s5),e(s5,e5e),M(F$,e5e,null),e(Bc,J9r),e(Bc,o5e),e(o5e,Y9r),b(m,OUe,_),b(m,ir,_),M(T$,ir,null),e(ir,K9r),e(ir,Ic),e(Ic,Z9r),e(Ic,rZ),e(rZ,exr),e(Ic,oxr),e(Ic,tZ),e(tZ,rxr),e(Ic,txr),e(ir,axr),e(ir,M$),e(M$,nxr),e(M$,r5e),e(r5e,sxr),e(M$,lxr),e(ir,ixr),e(ir,Ot),M(E$,Ot,null),e(Ot,dxr),e(Ot,t5e),e(t5e,cxr),e(Ot,mxr),e(Ot,Nc),e(Nc,fxr),e(Nc,a5e),e(a5e,gxr),e(Nc,hxr),e(Nc,aZ),e(aZ,uxr),e(Nc,pxr),e(Ot,_xr),M(l5,Ot,null),e(ir,bxr),e(ir,Nr),M(C$,Nr,null),e(Nr,vxr),e(Nr,n5e),e(n5e,Fxr),e(Nr,Txr),e(Nr,Fn),e(Fn,Mxr),e(Fn,s5e),e(s5e,Exr),e(Fn,Cxr),e(Fn,l5e),e(l5e,wxr),e(Fn,Axr),e(Fn,i5e),e(i5e,Lxr),e(Fn,yxr),e(Nr,xxr),e(Nr,w$),e(w$,i5),e(i5,d5e),e(d5e,$xr),e(i5,kxr),e(i5,nZ),e(nZ,Sxr),e(i5,Rxr),e(w$,Pxr),e(w$,d5),e(d5,c5e),e(c5e,Bxr),e(d5,Ixr),e(d5,sZ),e(sZ,Nxr),e(d5,qxr),e(Nr,jxr),M(c5,Nr,null),b(m,VUe,_),b(m,qc,_),e(qc,m5),e(m5,m5e),M(A$,m5e,null),e(qc,Dxr),e(qc,f5e),e(f5e,Gxr),b(m,XUe,_),b(m,dr,_),M(L$,dr,null),e(dr,Oxr),e(dr,jc),e(jc,Vxr),e(jc,lZ),e(lZ,Xxr),e(jc,zxr),e(jc,iZ),e(iZ,Wxr),e(jc,Qxr),e(dr,Uxr),e(dr,y$),e(y$,Hxr),e(y$,g5e),e(g5e,Jxr),e(y$,Yxr),e(dr,Kxr),e(dr,Vt),M(x$,Vt,null),e(Vt,Zxr),e(Vt,h5e),e(h5e,e$r),e(Vt,o$r),e(Vt,Dc),e(Dc,r$r),e(Dc,u5e),e(u5e,t$r),e(Dc,a$r),e(Dc,dZ),e(dZ,n$r),e(Dc,s$r),e(Vt,l$r),M(f5,Vt,null),e(dr,i$r),e(dr,qr),M($$,qr,null),e(qr,d$r),e(qr,p5e),e(p5e,c$r),e(qr,m$r),e(qr,Tn),e(Tn,f$r),e(Tn,_5e),e(_5e,g$r),e(Tn,h$r),e(Tn,b5e),e(b5e,u$r),e(Tn,p$r),e(Tn,v5e),e(v5e,_$r),e(Tn,b$r),e(qr,v$r),e(qr,ie),e(ie,g5),e(g5,F5e),e(F5e,F$r),e(g5,T$r),e(g5,cZ),e(cZ,M$r),e(g5,E$r),e(ie,C$r),e(ie,h5),e(h5,T5e),e(T5e,w$r),e(h5,A$r),e(h5,mZ),e(mZ,L$r),e(h5,y$r),e(ie,x$r),e(ie,u5),e(u5,M5e),e(M5e,$$r),e(u5,k$r),e(u5,fZ),e(fZ,S$r),e(u5,R$r),e(ie,P$r),e(ie,p5),e(p5,E5e),e(E5e,B$r),e(p5,I$r),e(p5,gZ),e(gZ,N$r),e(p5,q$r),e(ie,j$r),e(ie,_5),e(_5,C5e),e(C5e,D$r),e(_5,G$r),e(_5,hZ),e(hZ,O$r),e(_5,V$r),e(ie,X$r),e(ie,b5),e(b5,w5e),e(w5e,z$r),e(b5,W$r),e(b5,uZ),e(uZ,Q$r),e(b5,U$r),e(ie,H$r),e(ie,v5),e(v5,A5e),e(A5e,J$r),e(v5,Y$r),e(v5,pZ),e(pZ,K$r),e(v5,Z$r),e(ie,ekr),e(ie,F5),e(F5,L5e),e(L5e,okr),e(F5,rkr),e(F5,_Z),e(_Z,tkr),e(F5,akr),e(ie,nkr),e(ie,T5),e(T5,y5e),e(y5e,skr),e(T5,lkr),e(T5,bZ),e(bZ,ikr),e(T5,dkr),e(ie,ckr),e(ie,M5),e(M5,x5e),e(x5e,mkr),e(M5,fkr),e(M5,vZ),e(vZ,gkr),e(M5,hkr),e(ie,ukr),e(ie,E5),e(E5,$5e),e($5e,pkr),e(E5,_kr),e(E5,FZ),e(FZ,bkr),e(E5,vkr),e(ie,Fkr),e(ie,C5),e(C5,k5e),e(k5e,Tkr),e(C5,Mkr),e(C5,TZ),e(TZ,Ekr),e(C5,Ckr),e(ie,wkr),e(ie,w5),e(w5,S5e),e(S5e,Akr),e(w5,Lkr),e(w5,MZ),e(MZ,ykr),e(w5,xkr),e(ie,$kr),e(ie,A5),e(A5,R5e),e(R5e,kkr),e(A5,Skr),e(A5,EZ),e(EZ,Rkr),e(A5,Pkr),e(ie,Bkr),e(ie,L5),e(L5,P5e),e(P5e,Ikr),e(L5,Nkr),e(L5,CZ),e(CZ,qkr),e(L5,jkr),e(ie,Dkr),e(ie,y5),e(y5,B5e),e(B5e,Gkr),e(y5,Okr),e(y5,wZ),e(wZ,Vkr),e(y5,Xkr),e(ie,zkr),e(ie,x5),e(x5,I5e),e(I5e,Wkr),e(x5,Qkr),e(x5,AZ),e(AZ,Ukr),e(x5,Hkr),e(ie,Jkr),e(ie,$5),e($5,N5e),e(N5e,Ykr),e($5,Kkr),e($5,LZ),e(LZ,Zkr),e($5,eSr),e(ie,oSr),e(ie,k5),e(k5,q5e),e(q5e,rSr),e(k5,tSr),e(k5,yZ),e(yZ,aSr),e(k5,nSr),e(ie,sSr),e(ie,S5),e(S5,j5e),e(j5e,lSr),e(S5,iSr),e(S5,xZ),e(xZ,dSr),e(S5,cSr),e(qr,mSr),M(R5,qr,null),b(m,zUe,_),b(m,Gc,_),e(Gc,P5),e(P5,D5e),M(k$,D5e,null),e(Gc,fSr),e(Gc,G5e),e(G5e,gSr),b(m,WUe,_),b(m,cr,_),M(S$,cr,null),e(cr,hSr),e(cr,Oc),e(Oc,uSr),e(Oc,$Z),e($Z,pSr),e(Oc,_Sr),e(Oc,kZ),e(kZ,bSr),e(Oc,vSr),e(cr,FSr),e(cr,R$),e(R$,TSr),e(R$,O5e),e(O5e,MSr),e(R$,ESr),e(cr,CSr),e(cr,Xt),M(P$,Xt,null),e(Xt,wSr),e(Xt,V5e),e(V5e,ASr),e(Xt,LSr),e(Xt,Vc),e(Vc,ySr),e(Vc,X5e),e(X5e,xSr),e(Vc,$Sr),e(Vc,SZ),e(SZ,kSr),e(Vc,SSr),e(Xt,RSr),M(B5,Xt,null),e(cr,PSr),e(cr,jr),M(B$,jr,null),e(jr,BSr),e(jr,z5e),e(z5e,ISr),e(jr,NSr),e(jr,Mn),e(Mn,qSr),e(Mn,W5e),e(W5e,jSr),e(Mn,DSr),e(Mn,Q5e),e(Q5e,GSr),e(Mn,OSr),e(Mn,U5e),e(U5e,VSr),e(Mn,XSr),e(jr,zSr),e(jr,ye),e(ye,I5),e(I5,H5e),e(H5e,WSr),e(I5,QSr),e(I5,RZ),e(RZ,USr),e(I5,HSr),e(ye,JSr),e(ye,N5),e(N5,J5e),e(J5e,YSr),e(N5,KSr),e(N5,PZ),e(PZ,ZSr),e(N5,eRr),e(ye,oRr),e(ye,q5),e(q5,Y5e),e(Y5e,rRr),e(q5,tRr),e(q5,BZ),e(BZ,aRr),e(q5,nRr),e(ye,sRr),e(ye,j5),e(j5,K5e),e(K5e,lRr),e(j5,iRr),e(j5,IZ),e(IZ,dRr),e(j5,cRr),e(ye,mRr),e(ye,D5),e(D5,Z5e),e(Z5e,fRr),e(D5,gRr),e(D5,NZ),e(NZ,hRr),e(D5,uRr),e(ye,pRr),e(ye,G5),e(G5,e0e),e(e0e,_Rr),e(G5,bRr),e(G5,qZ),e(qZ,vRr),e(G5,FRr),e(ye,TRr),e(ye,O5),e(O5,o0e),e(o0e,MRr),e(O5,ERr),e(O5,jZ),e(jZ,CRr),e(O5,wRr),e(ye,ARr),e(ye,V5),e(V5,r0e),e(r0e,LRr),e(V5,yRr),e(V5,DZ),e(DZ,xRr),e(V5,$Rr),e(ye,kRr),e(ye,X5),e(X5,t0e),e(t0e,SRr),e(X5,RRr),e(X5,GZ),e(GZ,PRr),e(X5,BRr),e(ye,IRr),e(ye,z5),e(z5,a0e),e(a0e,NRr),e(z5,qRr),e(z5,OZ),e(OZ,jRr),e(z5,DRr),e(jr,GRr),M(W5,jr,null),b(m,QUe,_),b(m,Xc,_),e(Xc,Q5),e(Q5,n0e),M(I$,n0e,null),e(Xc,ORr),e(Xc,s0e),e(s0e,VRr),b(m,UUe,_),b(m,mr,_),M(N$,mr,null),e(mr,XRr),e(mr,zc),e(zc,zRr),e(zc,VZ),e(VZ,WRr),e(zc,QRr),e(zc,XZ),e(XZ,URr),e(zc,HRr),e(mr,JRr),e(mr,q$),e(q$,YRr),e(q$,l0e),e(l0e,KRr),e(q$,ZRr),e(mr,ePr),e(mr,zt),M(j$,zt,null),e(zt,oPr),e(zt,i0e),e(i0e,rPr),e(zt,tPr),e(zt,Wc),e(Wc,aPr),e(Wc,d0e),e(d0e,nPr),e(Wc,sPr),e(Wc,zZ),e(zZ,lPr),e(Wc,iPr),e(zt,dPr),M(U5,zt,null),e(mr,cPr),e(mr,Dr),M(D$,Dr,null),e(Dr,mPr),e(Dr,c0e),e(c0e,fPr),e(Dr,gPr),e(Dr,En),e(En,hPr),e(En,m0e),e(m0e,uPr),e(En,pPr),e(En,f0e),e(f0e,_Pr),e(En,bPr),e(En,g0e),e(g0e,vPr),e(En,FPr),e(Dr,TPr),e(Dr,te),e(te,H5),e(H5,h0e),e(h0e,MPr),e(H5,EPr),e(H5,WZ),e(WZ,CPr),e(H5,wPr),e(te,APr),e(te,J5),e(J5,u0e),e(u0e,LPr),e(J5,yPr),e(J5,QZ),e(QZ,xPr),e(J5,$Pr),e(te,kPr),e(te,Y5),e(Y5,p0e),e(p0e,SPr),e(Y5,RPr),e(Y5,UZ),e(UZ,PPr),e(Y5,BPr),e(te,IPr),e(te,K5),e(K5,_0e),e(_0e,NPr),e(K5,qPr),e(K5,HZ),e(HZ,jPr),e(K5,DPr),e(te,GPr),e(te,Z5),e(Z5,b0e),e(b0e,OPr),e(Z5,VPr),e(Z5,JZ),e(JZ,XPr),e(Z5,zPr),e(te,WPr),e(te,e0),e(e0,v0e),e(v0e,QPr),e(e0,UPr),e(e0,YZ),e(YZ,HPr),e(e0,JPr),e(te,YPr),e(te,o0),e(o0,F0e),e(F0e,KPr),e(o0,ZPr),e(o0,KZ),e(KZ,eBr),e(o0,oBr),e(te,rBr),e(te,r0),e(r0,T0e),e(T0e,tBr),e(r0,aBr),e(r0,ZZ),e(ZZ,nBr),e(r0,sBr),e(te,lBr),e(te,t0),e(t0,M0e),e(M0e,iBr),e(t0,dBr),e(t0,eee),e(eee,cBr),e(t0,mBr),e(te,fBr),e(te,a0),e(a0,E0e),e(E0e,gBr),e(a0,hBr),e(a0,oee),e(oee,uBr),e(a0,pBr),e(te,_Br),e(te,n0),e(n0,C0e),e(C0e,bBr),e(n0,vBr),e(n0,ree),e(ree,FBr),e(n0,TBr),e(te,MBr),e(te,s0),e(s0,w0e),e(w0e,EBr),e(s0,CBr),e(s0,tee),e(tee,wBr),e(s0,ABr),e(te,LBr),e(te,l0),e(l0,A0e),e(A0e,yBr),e(l0,xBr),e(l0,aee),e(aee,$Br),e(l0,kBr),e(te,SBr),e(te,i0),e(i0,L0e),e(L0e,RBr),e(i0,PBr),e(i0,nee),e(nee,BBr),e(i0,IBr),e(te,NBr),e(te,d0),e(d0,y0e),e(y0e,qBr),e(d0,jBr),e(d0,see),e(see,DBr),e(d0,GBr),e(te,OBr),e(te,c0),e(c0,x0e),e(x0e,VBr),e(c0,XBr),e(c0,lee),e(lee,zBr),e(c0,WBr),e(te,QBr),e(te,m0),e(m0,$0e),e($0e,UBr),e(m0,HBr),e(m0,iee),e(iee,JBr),e(m0,YBr),e(te,KBr),e(te,f0),e(f0,k0e),e(k0e,ZBr),e(f0,eIr),e(f0,dee),e(dee,oIr),e(f0,rIr),e(te,tIr),e(te,g0),e(g0,S0e),e(S0e,aIr),e(g0,nIr),e(g0,cee),e(cee,sIr),e(g0,lIr),e(te,iIr),e(te,h0),e(h0,R0e),e(R0e,dIr),e(h0,cIr),e(h0,mee),e(mee,mIr),e(h0,fIr),e(te,gIr),e(te,u0),e(u0,P0e),e(P0e,hIr),e(u0,uIr),e(u0,fee),e(fee,pIr),e(u0,_Ir),e(te,bIr),e(te,p0),e(p0,B0e),e(B0e,vIr),e(p0,FIr),e(p0,gee),e(gee,TIr),e(p0,MIr),e(te,EIr),e(te,_0),e(_0,I0e),e(I0e,CIr),e(_0,wIr),e(_0,hee),e(hee,AIr),e(_0,LIr),e(te,yIr),e(te,b0),e(b0,N0e),e(N0e,xIr),e(b0,$Ir),e(b0,uee),e(uee,kIr),e(b0,SIr),e(te,RIr),e(te,v0),e(v0,q0e),e(q0e,PIr),e(v0,BIr),e(v0,pee),e(pee,IIr),e(v0,NIr),e(te,qIr),e(te,F0),e(F0,j0e),e(j0e,jIr),e(F0,DIr),e(F0,_ee),e(_ee,GIr),e(F0,OIr),e(Dr,VIr),M(T0,Dr,null),b(m,HUe,_),b(m,Qc,_),e(Qc,M0),e(M0,D0e),M(G$,D0e,null),e(Qc,XIr),e(Qc,G0e),e(G0e,zIr),b(m,JUe,_),b(m,fr,_),M(O$,fr,null),e(fr,WIr),e(fr,Uc),e(Uc,QIr),e(Uc,bee),e(bee,UIr),e(Uc,HIr),e(Uc,vee),e(vee,JIr),e(Uc,YIr),e(fr,KIr),e(fr,V$),e(V$,ZIr),e(V$,O0e),e(O0e,eNr),e(V$,oNr),e(fr,rNr),e(fr,Wt),M(X$,Wt,null),e(Wt,tNr),e(Wt,V0e),e(V0e,aNr),e(Wt,nNr),e(Wt,Hc),e(Hc,sNr),e(Hc,X0e),e(X0e,lNr),e(Hc,iNr),e(Hc,Fee),e(Fee,dNr),e(Hc,cNr),e(Wt,mNr),M(E0,Wt,null),e(fr,fNr),e(fr,Gr),M(z$,Gr,null),e(Gr,gNr),e(Gr,z0e),e(z0e,hNr),e(Gr,uNr),e(Gr,Cn),e(Cn,pNr),e(Cn,W0e),e(W0e,_Nr),e(Cn,bNr),e(Cn,Q0e),e(Q0e,vNr),e(Cn,FNr),e(Cn,U0e),e(U0e,TNr),e(Cn,MNr),e(Gr,ENr),e(Gr,ve),e(ve,C0),e(C0,H0e),e(H0e,CNr),e(C0,wNr),e(C0,Tee),e(Tee,ANr),e(C0,LNr),e(ve,yNr),e(ve,w0),e(w0,J0e),e(J0e,xNr),e(w0,$Nr),e(w0,Mee),e(Mee,kNr),e(w0,SNr),e(ve,RNr),e(ve,A0),e(A0,Y0e),e(Y0e,PNr),e(A0,BNr),e(A0,Eee),e(Eee,INr),e(A0,NNr),e(ve,qNr),e(ve,L0),e(L0,K0e),e(K0e,jNr),e(L0,DNr),e(L0,Cee),e(Cee,GNr),e(L0,ONr),e(ve,VNr),e(ve,y0),e(y0,Z0e),e(Z0e,XNr),e(y0,zNr),e(y0,wee),e(wee,WNr),e(y0,QNr),e(ve,UNr),e(ve,x0),e(x0,ewe),e(ewe,HNr),e(x0,JNr),e(x0,Aee),e(Aee,YNr),e(x0,KNr),e(ve,ZNr),e(ve,$0),e($0,owe),e(owe,eqr),e($0,oqr),e($0,Lee),e(Lee,rqr),e($0,tqr),e(ve,aqr),e(ve,k0),e(k0,rwe),e(rwe,nqr),e(k0,sqr),e(k0,yee),e(yee,lqr),e(k0,iqr),e(ve,dqr),e(ve,S0),e(S0,twe),e(twe,cqr),e(S0,mqr),e(S0,xee),e(xee,fqr),e(S0,gqr),e(ve,hqr),e(ve,R0),e(R0,awe),e(awe,uqr),e(R0,pqr),e(R0,$ee),e($ee,_qr),e(R0,bqr),e(ve,vqr),e(ve,P0),e(P0,nwe),e(nwe,Fqr),e(P0,Tqr),e(P0,kee),e(kee,Mqr),e(P0,Eqr),e(ve,Cqr),e(ve,B0),e(B0,swe),e(swe,wqr),e(B0,Aqr),e(B0,See),e(See,Lqr),e(B0,yqr),e(ve,xqr),e(ve,I0),e(I0,lwe),e(lwe,$qr),e(I0,kqr),e(I0,Ree),e(Ree,Sqr),e(I0,Rqr),e(ve,Pqr),e(ve,N0),e(N0,iwe),e(iwe,Bqr),e(N0,Iqr),e(N0,Pee),e(Pee,Nqr),e(N0,qqr),e(ve,jqr),e(ve,q0),e(q0,dwe),e(dwe,Dqr),e(q0,Gqr),e(q0,Bee),e(Bee,Oqr),e(q0,Vqr),e(ve,Xqr),e(ve,j0),e(j0,cwe),e(cwe,zqr),e(j0,Wqr),e(j0,Iee),e(Iee,Qqr),e(j0,Uqr),e(ve,Hqr),e(ve,D0),e(D0,mwe),e(mwe,Jqr),e(D0,Yqr),e(D0,Nee),e(Nee,Kqr),e(D0,Zqr),e(Gr,ejr),M(G0,Gr,null),b(m,YUe,_),b(m,Jc,_),e(Jc,O0),e(O0,fwe),M(W$,fwe,null),e(Jc,ojr),e(Jc,gwe),e(gwe,rjr),b(m,KUe,_),b(m,gr,_),M(Q$,gr,null),e(gr,tjr),e(gr,Yc),e(Yc,ajr),e(Yc,qee),e(qee,njr),e(Yc,sjr),e(Yc,jee),e(jee,ljr),e(Yc,ijr),e(gr,djr),e(gr,U$),e(U$,cjr),e(U$,hwe),e(hwe,mjr),e(U$,fjr),e(gr,gjr),e(gr,Qt),M(H$,Qt,null),e(Qt,hjr),e(Qt,uwe),e(uwe,ujr),e(Qt,pjr),e(Qt,Kc),e(Kc,_jr),e(Kc,pwe),e(pwe,bjr),e(Kc,vjr),e(Kc,Dee),e(Dee,Fjr),e(Kc,Tjr),e(Qt,Mjr),M(V0,Qt,null),e(gr,Ejr),e(gr,Or),M(J$,Or,null),e(Or,Cjr),e(Or,_we),e(_we,wjr),e(Or,Ajr),e(Or,wn),e(wn,Ljr),e(wn,bwe),e(bwe,yjr),e(wn,xjr),e(wn,vwe),e(vwe,$jr),e(wn,kjr),e(wn,Fwe),e(Fwe,Sjr),e(wn,Rjr),e(Or,Pjr),e(Or,Y$),e(Y$,X0),e(X0,Twe),e(Twe,Bjr),e(X0,Ijr),e(X0,Gee),e(Gee,Njr),e(X0,qjr),e(Y$,jjr),e(Y$,z0),e(z0,Mwe),e(Mwe,Djr),e(z0,Gjr),e(z0,Oee),e(Oee,Ojr),e(z0,Vjr),e(Or,Xjr),M(W0,Or,null),b(m,ZUe,_),b(m,Zc,_),e(Zc,Q0),e(Q0,Ewe),M(K$,Ewe,null),e(Zc,zjr),e(Zc,Cwe),e(Cwe,Wjr),b(m,eHe,_),b(m,hr,_),M(Z$,hr,null),e(hr,Qjr),e(hr,em),e(em,Ujr),e(em,Vee),e(Vee,Hjr),e(em,Jjr),e(em,Xee),e(Xee,Yjr),e(em,Kjr),e(hr,Zjr),e(hr,ek),e(ek,eDr),e(ek,wwe),e(wwe,oDr),e(ek,rDr),e(hr,tDr),e(hr,Ut),M(ok,Ut,null),e(Ut,aDr),e(Ut,Awe),e(Awe,nDr),e(Ut,sDr),e(Ut,om),e(om,lDr),e(om,Lwe),e(Lwe,iDr),e(om,dDr),e(om,zee),e(zee,cDr),e(om,mDr),e(Ut,fDr),M(U0,Ut,null),e(hr,gDr),e(hr,Vr),M(rk,Vr,null),e(Vr,hDr),e(Vr,ywe),e(ywe,uDr),e(Vr,pDr),e(Vr,An),e(An,_Dr),e(An,xwe),e(xwe,bDr),e(An,vDr),e(An,$we),e($we,FDr),e(An,TDr),e(An,kwe),e(kwe,MDr),e(An,EDr),e(Vr,CDr),e(Vr,Swe),e(Swe,H0),e(H0,Rwe),e(Rwe,wDr),e(H0,ADr),e(H0,Wee),e(Wee,LDr),e(H0,yDr),e(Vr,xDr),M(J0,Vr,null),b(m,oHe,_),b(m,rm,_),e(rm,Y0),e(Y0,Pwe),M(tk,Pwe,null),e(rm,$Dr),e(rm,Bwe),e(Bwe,kDr),b(m,rHe,_),b(m,ur,_),M(ak,ur,null),e(ur,SDr),e(ur,tm),e(tm,RDr),e(tm,Qee),e(Qee,PDr),e(tm,BDr),e(tm,Uee),e(Uee,IDr),e(tm,NDr),e(ur,qDr),e(ur,nk),e(nk,jDr),e(nk,Iwe),e(Iwe,DDr),e(nk,GDr),e(ur,ODr),e(ur,Ht),M(sk,Ht,null),e(Ht,VDr),e(Ht,Nwe),e(Nwe,XDr),e(Ht,zDr),e(Ht,am),e(am,WDr),e(am,qwe),e(qwe,QDr),e(am,UDr),e(am,Hee),e(Hee,HDr),e(am,JDr),e(Ht,YDr),M(K0,Ht,null),e(ur,KDr),e(ur,Xr),M(lk,Xr,null),e(Xr,ZDr),e(Xr,jwe),e(jwe,eGr),e(Xr,oGr),e(Xr,Ln),e(Ln,rGr),e(Ln,Dwe),e(Dwe,tGr),e(Ln,aGr),e(Ln,Gwe),e(Gwe,nGr),e(Ln,sGr),e(Ln,Owe),e(Owe,lGr),e(Ln,iGr),e(Xr,dGr),e(Xr,de),e(de,Z0),e(Z0,Vwe),e(Vwe,cGr),e(Z0,mGr),e(Z0,Jee),e(Jee,fGr),e(Z0,gGr),e(de,hGr),e(de,ew),e(ew,Xwe),e(Xwe,uGr),e(ew,pGr),e(ew,Yee),e(Yee,_Gr),e(ew,bGr),e(de,vGr),e(de,ow),e(ow,zwe),e(zwe,FGr),e(ow,TGr),e(ow,Kee),e(Kee,MGr),e(ow,EGr),e(de,CGr),e(de,rw),e(rw,Wwe),e(Wwe,wGr),e(rw,AGr),e(rw,Zee),e(Zee,LGr),e(rw,yGr),e(de,xGr),e(de,tw),e(tw,Qwe),e(Qwe,$Gr),e(tw,kGr),e(tw,eoe),e(eoe,SGr),e(tw,RGr),e(de,PGr),e(de,aw),e(aw,Uwe),e(Uwe,BGr),e(aw,IGr),e(aw,ooe),e(ooe,NGr),e(aw,qGr),e(de,jGr),e(de,nw),e(nw,Hwe),e(Hwe,DGr),e(nw,GGr),e(nw,roe),e(roe,OGr),e(nw,VGr),e(de,XGr),e(de,sw),e(sw,Jwe),e(Jwe,zGr),e(sw,WGr),e(sw,toe),e(toe,QGr),e(sw,UGr),e(de,HGr),e(de,lw),e(lw,Ywe),e(Ywe,JGr),e(lw,YGr),e(lw,aoe),e(aoe,KGr),e(lw,ZGr),e(de,eOr),e(de,iw),e(iw,Kwe),e(Kwe,oOr),e(iw,rOr),e(iw,noe),e(noe,tOr),e(iw,aOr),e(de,nOr),e(de,dw),e(dw,Zwe),e(Zwe,sOr),e(dw,lOr),e(dw,soe),e(soe,iOr),e(dw,dOr),e(de,cOr),e(de,cw),e(cw,e6e),e(e6e,mOr),e(cw,fOr),e(cw,loe),e(loe,gOr),e(cw,hOr),e(de,uOr),e(de,mw),e(mw,o6e),e(o6e,pOr),e(mw,_Or),e(mw,ioe),e(ioe,bOr),e(mw,vOr),e(de,FOr),e(de,fw),e(fw,r6e),e(r6e,TOr),e(fw,MOr),e(fw,doe),e(doe,EOr),e(fw,COr),e(de,wOr),e(de,gw),e(gw,t6e),e(t6e,AOr),e(gw,LOr),e(gw,coe),e(coe,yOr),e(gw,xOr),e(de,$Or),e(de,hw),e(hw,a6e),e(a6e,kOr),e(hw,SOr),e(hw,moe),e(moe,ROr),e(hw,POr),e(de,BOr),e(de,uw),e(uw,n6e),e(n6e,IOr),e(uw,NOr),e(uw,foe),e(foe,qOr),e(uw,jOr),e(de,DOr),e(de,pw),e(pw,s6e),e(s6e,GOr),e(pw,OOr),e(pw,goe),e(goe,VOr),e(pw,XOr),e(de,zOr),e(de,_w),e(_w,l6e),e(l6e,WOr),e(_w,QOr),e(_w,hoe),e(hoe,UOr),e(_w,HOr),e(de,JOr),e(de,bw),e(bw,i6e),e(i6e,YOr),e(bw,KOr),e(bw,uoe),e(uoe,ZOr),e(bw,eVr),e(Xr,oVr),M(vw,Xr,null),b(m,tHe,_),b(m,nm,_),e(nm,Fw),e(Fw,d6e),M(ik,d6e,null),e(nm,rVr),e(nm,c6e),e(c6e,tVr),b(m,aHe,_),b(m,pr,_),M(dk,pr,null),e(pr,aVr),e(pr,sm),e(sm,nVr),e(sm,poe),e(poe,sVr),e(sm,lVr),e(sm,_oe),e(_oe,iVr),e(sm,dVr),e(pr,cVr),e(pr,ck),e(ck,mVr),e(ck,m6e),e(m6e,fVr),e(ck,gVr),e(pr,hVr),e(pr,Jt),M(mk,Jt,null),e(Jt,uVr),e(Jt,f6e),e(f6e,pVr),e(Jt,_Vr),e(Jt,lm),e(lm,bVr),e(lm,g6e),e(g6e,vVr),e(lm,FVr),e(lm,boe),e(boe,TVr),e(lm,MVr),e(Jt,EVr),M(Tw,Jt,null),e(pr,CVr),e(pr,zr),M(fk,zr,null),e(zr,wVr),e(zr,h6e),e(h6e,AVr),e(zr,LVr),e(zr,yn),e(yn,yVr),e(yn,u6e),e(u6e,xVr),e(yn,$Vr),e(yn,p6e),e(p6e,kVr),e(yn,SVr),e(yn,_6e),e(_6e,RVr),e(yn,PVr),e(zr,BVr),e(zr,ce),e(ce,Mw),e(Mw,b6e),e(b6e,IVr),e(Mw,NVr),e(Mw,voe),e(voe,qVr),e(Mw,jVr),e(ce,DVr),e(ce,Ew),e(Ew,v6e),e(v6e,GVr),e(Ew,OVr),e(Ew,Foe),e(Foe,VVr),e(Ew,XVr),e(ce,zVr),e(ce,Cw),e(Cw,F6e),e(F6e,WVr),e(Cw,QVr),e(Cw,Toe),e(Toe,UVr),e(Cw,HVr),e(ce,JVr),e(ce,ww),e(ww,T6e),e(T6e,YVr),e(ww,KVr),e(ww,Moe),e(Moe,ZVr),e(ww,eXr),e(ce,oXr),e(ce,Aw),e(Aw,M6e),e(M6e,rXr),e(Aw,tXr),e(Aw,Eoe),e(Eoe,aXr),e(Aw,nXr),e(ce,sXr),e(ce,Lw),e(Lw,E6e),e(E6e,lXr),e(Lw,iXr),e(Lw,Coe),e(Coe,dXr),e(Lw,cXr),e(ce,mXr),e(ce,yw),e(yw,C6e),e(C6e,fXr),e(yw,gXr),e(yw,woe),e(woe,hXr),e(yw,uXr),e(ce,pXr),e(ce,xw),e(xw,w6e),e(w6e,_Xr),e(xw,bXr),e(xw,Aoe),e(Aoe,vXr),e(xw,FXr),e(ce,TXr),e(ce,$w),e($w,A6e),e(A6e,MXr),e($w,EXr),e($w,Loe),e(Loe,CXr),e($w,wXr),e(ce,AXr),e(ce,kw),e(kw,L6e),e(L6e,LXr),e(kw,yXr),e(kw,yoe),e(yoe,xXr),e(kw,$Xr),e(ce,kXr),e(ce,Sw),e(Sw,y6e),e(y6e,SXr),e(Sw,RXr),e(Sw,xoe),e(xoe,PXr),e(Sw,BXr),e(ce,IXr),e(ce,Rw),e(Rw,x6e),e(x6e,NXr),e(Rw,qXr),e(Rw,$oe),e($oe,jXr),e(Rw,DXr),e(ce,GXr),e(ce,Pw),e(Pw,$6e),e($6e,OXr),e(Pw,VXr),e(Pw,koe),e(koe,XXr),e(Pw,zXr),e(ce,WXr),e(ce,Bw),e(Bw,k6e),e(k6e,QXr),e(Bw,UXr),e(Bw,Soe),e(Soe,HXr),e(Bw,JXr),e(ce,YXr),e(ce,Iw),e(Iw,S6e),e(S6e,KXr),e(Iw,ZXr),e(Iw,Roe),e(Roe,ezr),e(Iw,ozr),e(ce,rzr),e(ce,Nw),e(Nw,R6e),e(R6e,tzr),e(Nw,azr),e(Nw,Poe),e(Poe,nzr),e(Nw,szr),e(ce,lzr),e(ce,qw),e(qw,P6e),e(P6e,izr),e(qw,dzr),e(qw,Boe),e(Boe,czr),e(qw,mzr),e(ce,fzr),e(ce,jw),e(jw,B6e),e(B6e,gzr),e(jw,hzr),e(jw,Ioe),e(Ioe,uzr),e(jw,pzr),e(ce,_zr),e(ce,Dw),e(Dw,I6e),e(I6e,bzr),e(Dw,vzr),e(Dw,Noe),e(Noe,Fzr),e(Dw,Tzr),e(ce,Mzr),e(ce,Gw),e(Gw,N6e),e(N6e,Ezr),e(Gw,Czr),e(Gw,qoe),e(qoe,wzr),e(Gw,Azr),e(zr,Lzr),M(Ow,zr,null),b(m,nHe,_),b(m,im,_),e(im,Vw),e(Vw,q6e),M(gk,q6e,null),e(im,yzr),e(im,j6e),e(j6e,xzr),b(m,sHe,_),b(m,_r,_),M(hk,_r,null),e(_r,$zr),e(_r,dm),e(dm,kzr),e(dm,joe),e(joe,Szr),e(dm,Rzr),e(dm,Doe),e(Doe,Pzr),e(dm,Bzr),e(_r,Izr),e(_r,uk),e(uk,Nzr),e(uk,D6e),e(D6e,qzr),e(uk,jzr),e(_r,Dzr),e(_r,Yt),M(pk,Yt,null),e(Yt,Gzr),e(Yt,G6e),e(G6e,Ozr),e(Yt,Vzr),e(Yt,cm),e(cm,Xzr),e(cm,O6e),e(O6e,zzr),e(cm,Wzr),e(cm,Goe),e(Goe,Qzr),e(cm,Uzr),e(Yt,Hzr),M(Xw,Yt,null),e(_r,Jzr),e(_r,Wr),M(_k,Wr,null),e(Wr,Yzr),e(Wr,V6e),e(V6e,Kzr),e(Wr,Zzr),e(Wr,xn),e(xn,eWr),e(xn,X6e),e(X6e,oWr),e(xn,rWr),e(xn,z6e),e(z6e,tWr),e(xn,aWr),e(xn,W6e),e(W6e,nWr),e(xn,sWr),e(Wr,lWr),e(Wr,Q6e),e(Q6e,zw),e(zw,U6e),e(U6e,iWr),e(zw,dWr),e(zw,Ooe),e(Ooe,cWr),e(zw,mWr),e(Wr,fWr),M(Ww,Wr,null),b(m,lHe,_),b(m,mm,_),e(mm,Qw),e(Qw,H6e),M(bk,H6e,null),e(mm,gWr),e(mm,J6e),e(J6e,hWr),b(m,iHe,_),b(m,br,_),M(vk,br,null),e(br,uWr),e(br,fm),e(fm,pWr),e(fm,Voe),e(Voe,_Wr),e(fm,bWr),e(fm,Xoe),e(Xoe,vWr),e(fm,FWr),e(br,TWr),e(br,Fk),e(Fk,MWr),e(Fk,Y6e),e(Y6e,EWr),e(Fk,CWr),e(br,wWr),e(br,Kt),M(Tk,Kt,null),e(Kt,AWr),e(Kt,K6e),e(K6e,LWr),e(Kt,yWr),e(Kt,gm),e(gm,xWr),e(gm,Z6e),e(Z6e,$Wr),e(gm,kWr),e(gm,zoe),e(zoe,SWr),e(gm,RWr),e(Kt,PWr),M(Uw,Kt,null),e(br,BWr),e(br,Qr),M(Mk,Qr,null),e(Qr,IWr),e(Qr,eAe),e(eAe,NWr),e(Qr,qWr),e(Qr,$n),e($n,jWr),e($n,oAe),e(oAe,DWr),e($n,GWr),e($n,rAe),e(rAe,OWr),e($n,VWr),e($n,tAe),e(tAe,XWr),e($n,zWr),e(Qr,WWr),e(Qr,aAe),e(aAe,Hw),e(Hw,nAe),e(nAe,QWr),e(Hw,UWr),e(Hw,Woe),e(Woe,HWr),e(Hw,JWr),e(Qr,YWr),M(Jw,Qr,null),b(m,dHe,_),b(m,hm,_),e(hm,Yw),e(Yw,sAe),M(Ek,sAe,null),e(hm,KWr),e(hm,lAe),e(lAe,ZWr),b(m,cHe,_),b(m,vr,_),M(Ck,vr,null),e(vr,eQr),e(vr,um),e(um,oQr),e(um,Qoe),e(Qoe,rQr),e(um,tQr),e(um,Uoe),e(Uoe,aQr),e(um,nQr),e(vr,sQr),e(vr,wk),e(wk,lQr),e(wk,iAe),e(iAe,iQr),e(wk,dQr),e(vr,cQr),e(vr,Zt),M(Ak,Zt,null),e(Zt,mQr),e(Zt,dAe),e(dAe,fQr),e(Zt,gQr),e(Zt,pm),e(pm,hQr),e(pm,cAe),e(cAe,uQr),e(pm,pQr),e(pm,Hoe),e(Hoe,_Qr),e(pm,bQr),e(Zt,vQr),M(Kw,Zt,null),e(vr,FQr),e(vr,Ur),M(Lk,Ur,null),e(Ur,TQr),e(Ur,mAe),e(mAe,MQr),e(Ur,EQr),e(Ur,kn),e(kn,CQr),e(kn,fAe),e(fAe,wQr),e(kn,AQr),e(kn,gAe),e(gAe,LQr),e(kn,yQr),e(kn,hAe),e(hAe,xQr),e(kn,$Qr),e(Ur,kQr),e(Ur,re),e(re,Zw),e(Zw,uAe),e(uAe,SQr),e(Zw,RQr),e(Zw,Joe),e(Joe,PQr),e(Zw,BQr),e(re,IQr),e(re,e6),e(e6,pAe),e(pAe,NQr),e(e6,qQr),e(e6,Yoe),e(Yoe,jQr),e(e6,DQr),e(re,GQr),e(re,o6),e(o6,_Ae),e(_Ae,OQr),e(o6,VQr),e(o6,Koe),e(Koe,XQr),e(o6,zQr),e(re,WQr),e(re,r6),e(r6,bAe),e(bAe,QQr),e(r6,UQr),e(r6,Zoe),e(Zoe,HQr),e(r6,JQr),e(re,YQr),e(re,t6),e(t6,vAe),e(vAe,KQr),e(t6,ZQr),e(t6,ere),e(ere,eUr),e(t6,oUr),e(re,rUr),e(re,a6),e(a6,FAe),e(FAe,tUr),e(a6,aUr),e(a6,ore),e(ore,nUr),e(a6,sUr),e(re,lUr),e(re,n6),e(n6,TAe),e(TAe,iUr),e(n6,dUr),e(n6,rre),e(rre,cUr),e(n6,mUr),e(re,fUr),e(re,s6),e(s6,MAe),e(MAe,gUr),e(s6,hUr),e(s6,tre),e(tre,uUr),e(s6,pUr),e(re,_Ur),e(re,l6),e(l6,EAe),e(EAe,bUr),e(l6,vUr),e(l6,are),e(are,FUr),e(l6,TUr),e(re,MUr),e(re,i6),e(i6,CAe),e(CAe,EUr),e(i6,CUr),e(i6,nre),e(nre,wUr),e(i6,AUr),e(re,LUr),e(re,d6),e(d6,wAe),e(wAe,yUr),e(d6,xUr),e(d6,sre),e(sre,$Ur),e(d6,kUr),e(re,SUr),e(re,c6),e(c6,AAe),e(AAe,RUr),e(c6,PUr),e(c6,lre),e(lre,BUr),e(c6,IUr),e(re,NUr),e(re,m6),e(m6,LAe),e(LAe,qUr),e(m6,jUr),e(m6,ire),e(ire,DUr),e(m6,GUr),e(re,OUr),e(re,f6),e(f6,yAe),e(yAe,VUr),e(f6,XUr),e(f6,dre),e(dre,zUr),e(f6,WUr),e(re,QUr),e(re,g6),e(g6,xAe),e(xAe,UUr),e(g6,HUr),e(g6,cre),e(cre,JUr),e(g6,YUr),e(re,KUr),e(re,h6),e(h6,$Ae),e($Ae,ZUr),e(h6,eHr),e(h6,mre),e(mre,oHr),e(h6,rHr),e(re,tHr),e(re,u6),e(u6,kAe),e(kAe,aHr),e(u6,nHr),e(u6,fre),e(fre,sHr),e(u6,lHr),e(re,iHr),e(re,p6),e(p6,SAe),e(SAe,dHr),e(p6,cHr),e(p6,gre),e(gre,mHr),e(p6,fHr),e(re,gHr),e(re,_6),e(_6,RAe),e(RAe,hHr),e(_6,uHr),e(_6,hre),e(hre,pHr),e(_6,_Hr),e(re,bHr),e(re,b6),e(b6,PAe),e(PAe,vHr),e(b6,FHr),e(b6,ure),e(ure,THr),e(b6,MHr),e(re,EHr),e(re,v6),e(v6,BAe),e(BAe,CHr),e(v6,wHr),e(v6,pre),e(pre,AHr),e(v6,LHr),e(re,yHr),e(re,F6),e(F6,IAe),e(IAe,xHr),e(F6,$Hr),e(F6,_re),e(_re,kHr),e(F6,SHr),e(re,RHr),e(re,T6),e(T6,NAe),e(NAe,PHr),e(T6,BHr),e(T6,bre),e(bre,IHr),e(T6,NHr),e(re,qHr),e(re,M6),e(M6,qAe),e(qAe,jHr),e(M6,DHr),e(M6,vre),e(vre,GHr),e(M6,OHr),e(re,VHr),e(re,E6),e(E6,jAe),e(jAe,XHr),e(E6,zHr),e(E6,Fre),e(Fre,WHr),e(E6,QHr),e(re,UHr),e(re,C6),e(C6,DAe),e(DAe,HHr),e(C6,JHr),e(C6,Tre),e(Tre,YHr),e(C6,KHr),e(re,ZHr),e(re,w6),e(w6,GAe),e(GAe,eJr),e(w6,oJr),e(w6,Mre),e(Mre,rJr),e(w6,tJr),e(Ur,aJr),M(A6,Ur,null),b(m,mHe,_),b(m,_m,_),e(_m,L6),e(L6,OAe),M(yk,OAe,null),e(_m,nJr),e(_m,VAe),e(VAe,sJr),b(m,fHe,_),b(m,Fr,_),M(xk,Fr,null),e(Fr,lJr),e(Fr,bm),e(bm,iJr),e(bm,Ere),e(Ere,dJr),e(bm,cJr),e(bm,Cre),e(Cre,mJr),e(bm,fJr),e(Fr,gJr),e(Fr,$k),e($k,hJr),e($k,XAe),e(XAe,uJr),e($k,pJr),e(Fr,_Jr),e(Fr,ea),M(kk,ea,null),e(ea,bJr),e(ea,zAe),e(zAe,vJr),e(ea,FJr),e(ea,vm),e(vm,TJr),e(vm,WAe),e(WAe,MJr),e(vm,EJr),e(vm,wre),e(wre,CJr),e(vm,wJr),e(ea,AJr),M(y6,ea,null),e(Fr,LJr),e(Fr,Hr),M(Sk,Hr,null),e(Hr,yJr),e(Hr,QAe),e(QAe,xJr),e(Hr,$Jr),e(Hr,Sn),e(Sn,kJr),e(Sn,UAe),e(UAe,SJr),e(Sn,RJr),e(Sn,HAe),e(HAe,PJr),e(Sn,BJr),e(Sn,JAe),e(JAe,IJr),e(Sn,NJr),e(Hr,qJr),e(Hr,xe),e(xe,x6),e(x6,YAe),e(YAe,jJr),e(x6,DJr),e(x6,Are),e(Are,GJr),e(x6,OJr),e(xe,VJr),e(xe,$6),e($6,KAe),e(KAe,XJr),e($6,zJr),e($6,Lre),e(Lre,WJr),e($6,QJr),e(xe,UJr),e(xe,k6),e(k6,ZAe),e(ZAe,HJr),e(k6,JJr),e(k6,yre),e(yre,YJr),e(k6,KJr),e(xe,ZJr),e(xe,S6),e(S6,e7e),e(e7e,eYr),e(S6,oYr),e(S6,xre),e(xre,rYr),e(S6,tYr),e(xe,aYr),e(xe,R6),e(R6,o7e),e(o7e,nYr),e(R6,sYr),e(R6,$re),e($re,lYr),e(R6,iYr),e(xe,dYr),e(xe,P6),e(P6,r7e),e(r7e,cYr),e(P6,mYr),e(P6,kre),e(kre,fYr),e(P6,gYr),e(xe,hYr),e(xe,B6),e(B6,t7e),e(t7e,uYr),e(B6,pYr),e(B6,Sre),e(Sre,_Yr),e(B6,bYr),e(xe,vYr),e(xe,I6),e(I6,a7e),e(a7e,FYr),e(I6,TYr),e(I6,Rre),e(Rre,MYr),e(I6,EYr),e(xe,CYr),e(xe,N6),e(N6,n7e),e(n7e,wYr),e(N6,AYr),e(N6,Pre),e(Pre,LYr),e(N6,yYr),e(xe,xYr),e(xe,q6),e(q6,s7e),e(s7e,$Yr),e(q6,kYr),e(q6,Bre),e(Bre,SYr),e(q6,RYr),e(Hr,PYr),M(j6,Hr,null),b(m,gHe,_),b(m,Fm,_),e(Fm,D6),e(D6,l7e),M(Rk,l7e,null),e(Fm,BYr),e(Fm,i7e),e(i7e,IYr),b(m,hHe,_),b(m,Tr,_),M(Pk,Tr,null),e(Tr,NYr),e(Tr,Tm),e(Tm,qYr),e(Tm,Ire),e(Ire,jYr),e(Tm,DYr),e(Tm,Nre),e(Nre,GYr),e(Tm,OYr),e(Tr,VYr),e(Tr,Bk),e(Bk,XYr),e(Bk,d7e),e(d7e,zYr),e(Bk,WYr),e(Tr,QYr),e(Tr,oa),M(Ik,oa,null),e(oa,UYr),e(oa,c7e),e(c7e,HYr),e(oa,JYr),e(oa,Mm),e(Mm,YYr),e(Mm,m7e),e(m7e,KYr),e(Mm,ZYr),e(Mm,qre),e(qre,eKr),e(Mm,oKr),e(oa,rKr),M(G6,oa,null),e(Tr,tKr),e(Tr,Jr),M(Nk,Jr,null),e(Jr,aKr),e(Jr,f7e),e(f7e,nKr),e(Jr,sKr),e(Jr,Rn),e(Rn,lKr),e(Rn,g7e),e(g7e,iKr),e(Rn,dKr),e(Rn,h7e),e(h7e,cKr),e(Rn,mKr),e(Rn,u7e),e(u7e,fKr),e(Rn,gKr),e(Jr,hKr),e(Jr,Ee),e(Ee,O6),e(O6,p7e),e(p7e,uKr),e(O6,pKr),e(O6,jre),e(jre,_Kr),e(O6,bKr),e(Ee,vKr),e(Ee,V6),e(V6,_7e),e(_7e,FKr),e(V6,TKr),e(V6,Dre),e(Dre,MKr),e(V6,EKr),e(Ee,CKr),e(Ee,X6),e(X6,b7e),e(b7e,wKr),e(X6,AKr),e(X6,Gre),e(Gre,LKr),e(X6,yKr),e(Ee,xKr),e(Ee,z6),e(z6,v7e),e(v7e,$Kr),e(z6,kKr),e(z6,Ore),e(Ore,SKr),e(z6,RKr),e(Ee,PKr),e(Ee,W6),e(W6,F7e),e(F7e,BKr),e(W6,IKr),e(W6,Vre),e(Vre,NKr),e(W6,qKr),e(Ee,jKr),e(Ee,Q6),e(Q6,T7e),e(T7e,DKr),e(Q6,GKr),e(Q6,Xre),e(Xre,OKr),e(Q6,VKr),e(Ee,XKr),e(Ee,U6),e(U6,M7e),e(M7e,zKr),e(U6,WKr),e(U6,zre),e(zre,QKr),e(U6,UKr),e(Ee,HKr),e(Ee,H6),e(H6,E7e),e(E7e,JKr),e(H6,YKr),e(H6,Wre),e(Wre,KKr),e(H6,ZKr),e(Ee,eZr),e(Ee,J6),e(J6,C7e),e(C7e,oZr),e(J6,rZr),e(J6,Qre),e(Qre,tZr),e(J6,aZr),e(Ee,nZr),e(Ee,Y6),e(Y6,w7e),e(w7e,sZr),e(Y6,lZr),e(Y6,Ure),e(Ure,iZr),e(Y6,dZr),e(Ee,cZr),e(Ee,K6),e(K6,A7e),e(A7e,mZr),e(K6,fZr),e(K6,Hre),e(Hre,gZr),e(K6,hZr),e(Ee,uZr),e(Ee,Z6),e(Z6,L7e),e(L7e,pZr),e(Z6,_Zr),e(Z6,Jre),e(Jre,bZr),e(Z6,vZr),e(Ee,FZr),e(Ee,eA),e(eA,y7e),e(y7e,TZr),e(eA,MZr),e(eA,Yre),e(Yre,EZr),e(eA,CZr),e(Jr,wZr),M(oA,Jr,null),b(m,uHe,_),b(m,Em,_),e(Em,rA),e(rA,x7e),M(qk,x7e,null),e(Em,AZr),e(Em,$7e),e($7e,LZr),b(m,pHe,_),b(m,Mr,_),M(jk,Mr,null),e(Mr,yZr),e(Mr,Cm),e(Cm,xZr),e(Cm,Kre),e(Kre,$Zr),e(Cm,kZr),e(Cm,Zre),e(Zre,SZr),e(Cm,RZr),e(Mr,PZr),e(Mr,Dk),e(Dk,BZr),e(Dk,k7e),e(k7e,IZr),e(Dk,NZr),e(Mr,qZr),e(Mr,ra),M(Gk,ra,null),e(ra,jZr),e(ra,S7e),e(S7e,DZr),e(ra,GZr),e(ra,wm),e(wm,OZr),e(wm,R7e),e(R7e,VZr),e(wm,XZr),e(wm,ete),e(ete,zZr),e(wm,WZr),e(ra,QZr),M(tA,ra,null),e(Mr,UZr),e(Mr,Yr),M(Ok,Yr,null),e(Yr,HZr),e(Yr,P7e),e(P7e,JZr),e(Yr,YZr),e(Yr,Pn),e(Pn,KZr),e(Pn,B7e),e(B7e,ZZr),e(Pn,eet),e(Pn,I7e),e(I7e,oet),e(Pn,ret),e(Pn,N7e),e(N7e,tet),e(Pn,aet),e(Yr,net),e(Yr,$e),e($e,aA),e(aA,q7e),e(q7e,set),e(aA,iet),e(aA,ote),e(ote,det),e(aA,cet),e($e,met),e($e,nA),e(nA,j7e),e(j7e,fet),e(nA,get),e(nA,rte),e(rte,het),e(nA,uet),e($e,pet),e($e,sA),e(sA,D7e),e(D7e,_et),e(sA,bet),e(sA,tte),e(tte,vet),e(sA,Fet),e($e,Tet),e($e,lA),e(lA,G7e),e(G7e,Met),e(lA,Eet),e(lA,ate),e(ate,Cet),e(lA,wet),e($e,Aet),e($e,iA),e(iA,O7e),e(O7e,Let),e(iA,yet),e(iA,nte),e(nte,xet),e(iA,$et),e($e,ket),e($e,dA),e(dA,V7e),e(V7e,Set),e(dA,Ret),e(dA,ste),e(ste,Pet),e(dA,Bet),e($e,Iet),e($e,cA),e(cA,X7e),e(X7e,Net),e(cA,qet),e(cA,lte),e(lte,jet),e(cA,Det),e($e,Get),e($e,mA),e(mA,z7e),e(z7e,Oet),e(mA,Vet),e(mA,ite),e(ite,Xet),e(mA,zet),e($e,Wet),e($e,fA),e(fA,W7e),e(W7e,Qet),e(fA,Uet),e(fA,dte),e(dte,Het),e(fA,Jet),e($e,Yet),e($e,gA),e(gA,Q7e),e(Q7e,Ket),e(gA,Zet),e(gA,cte),e(cte,eot),e(gA,oot),e(Yr,rot),M(hA,Yr,null),b(m,_He,_),b(m,Am,_),e(Am,uA),e(uA,U7e),M(Vk,U7e,null),e(Am,tot),e(Am,H7e),e(H7e,aot),b(m,bHe,_),b(m,Er,_),M(Xk,Er,null),e(Er,not),e(Er,Lm),e(Lm,sot),e(Lm,mte),e(mte,lot),e(Lm,iot),e(Lm,fte),e(fte,dot),e(Lm,cot),e(Er,mot),e(Er,zk),e(zk,fot),e(zk,J7e),e(J7e,got),e(zk,hot),e(Er,uot),e(Er,ta),M(Wk,ta,null),e(ta,pot),e(ta,Y7e),e(Y7e,_ot),e(ta,bot),e(ta,ym),e(ym,vot),e(ym,K7e),e(K7e,Fot),e(ym,Tot),e(ym,gte),e(gte,Mot),e(ym,Eot),e(ta,Cot),M(pA,ta,null),e(Er,wot),e(Er,Kr),M(Qk,Kr,null),e(Kr,Aot),e(Kr,Z7e),e(Z7e,Lot),e(Kr,yot),e(Kr,Bn),e(Bn,xot),e(Bn,eLe),e(eLe,$ot),e(Bn,kot),e(Bn,oLe),e(oLe,Sot),e(Bn,Rot),e(Bn,rLe),e(rLe,Pot),e(Bn,Bot),e(Kr,Iot),e(Kr,ke),e(ke,_A),e(_A,tLe),e(tLe,Not),e(_A,qot),e(_A,hte),e(hte,jot),e(_A,Dot),e(ke,Got),e(ke,bA),e(bA,aLe),e(aLe,Oot),e(bA,Vot),e(bA,ute),e(ute,Xot),e(bA,zot),e(ke,Wot),e(ke,vA),e(vA,nLe),e(nLe,Qot),e(vA,Uot),e(vA,pte),e(pte,Hot),e(vA,Jot),e(ke,Yot),e(ke,FA),e(FA,sLe),e(sLe,Kot),e(FA,Zot),e(FA,_te),e(_te,ert),e(FA,ort),e(ke,rrt),e(ke,TA),e(TA,lLe),e(lLe,trt),e(TA,art),e(TA,bte),e(bte,nrt),e(TA,srt),e(ke,lrt),e(ke,MA),e(MA,iLe),e(iLe,irt),e(MA,drt),e(MA,vte),e(vte,crt),e(MA,mrt),e(ke,frt),e(ke,EA),e(EA,dLe),e(dLe,grt),e(EA,hrt),e(EA,Fte),e(Fte,urt),e(EA,prt),e(ke,_rt),e(ke,CA),e(CA,cLe),e(cLe,brt),e(CA,vrt),e(CA,Tte),e(Tte,Frt),e(CA,Trt),e(ke,Mrt),e(ke,wA),e(wA,mLe),e(mLe,Ert),e(wA,Crt),e(wA,Mte),e(Mte,wrt),e(wA,Art),e(ke,Lrt),e(ke,AA),e(AA,fLe),e(fLe,yrt),e(AA,xrt),e(AA,Ete),e(Ete,$rt),e(AA,krt),e(Kr,Srt),M(LA,Kr,null),b(m,vHe,_),b(m,xm,_),e(xm,yA),e(yA,gLe),M(Uk,gLe,null),e(xm,Rrt),e(xm,hLe),e(hLe,Prt),b(m,FHe,_),b(m,Cr,_),M(Hk,Cr,null),e(Cr,Brt),e(Cr,$m),e($m,Irt),e($m,Cte),e(Cte,Nrt),e($m,qrt),e($m,wte),e(wte,jrt),e($m,Drt),e(Cr,Grt),e(Cr,Jk),e(Jk,Ort),e(Jk,uLe),e(uLe,Vrt),e(Jk,Xrt),e(Cr,zrt),e(Cr,aa),M(Yk,aa,null),e(aa,Wrt),e(aa,pLe),e(pLe,Qrt),e(aa,Urt),e(aa,km),e(km,Hrt),e(km,_Le),e(_Le,Jrt),e(km,Yrt),e(km,Ate),e(Ate,Krt),e(km,Zrt),e(aa,ett),M(xA,aa,null),e(Cr,ott),e(Cr,Zr),M(Kk,Zr,null),e(Zr,rtt),e(Zr,bLe),e(bLe,ttt),e(Zr,att),e(Zr,In),e(In,ntt),e(In,vLe),e(vLe,stt),e(In,ltt),e(In,FLe),e(FLe,itt),e(In,dtt),e(In,TLe),e(TLe,ctt),e(In,mtt),e(Zr,ftt),e(Zr,Se),e(Se,$A),e($A,MLe),e(MLe,gtt),e($A,htt),e($A,Lte),e(Lte,utt),e($A,ptt),e(Se,_tt),e(Se,kA),e(kA,ELe),e(ELe,btt),e(kA,vtt),e(kA,yte),e(yte,Ftt),e(kA,Ttt),e(Se,Mtt),e(Se,SA),e(SA,CLe),e(CLe,Ett),e(SA,Ctt),e(SA,xte),e(xte,wtt),e(SA,Att),e(Se,Ltt),e(Se,RA),e(RA,wLe),e(wLe,ytt),e(RA,xtt),e(RA,$te),e($te,$tt),e(RA,ktt),e(Se,Stt),e(Se,PA),e(PA,ALe),e(ALe,Rtt),e(PA,Ptt),e(PA,kte),e(kte,Btt),e(PA,Itt),e(Se,Ntt),e(Se,BA),e(BA,LLe),e(LLe,qtt),e(BA,jtt),e(BA,Ste),e(Ste,Dtt),e(BA,Gtt),e(Se,Ott),e(Se,IA),e(IA,yLe),e(yLe,Vtt),e(IA,Xtt),e(IA,Rte),e(Rte,ztt),e(IA,Wtt),e(Se,Qtt),e(Se,NA),e(NA,xLe),e(xLe,Utt),e(NA,Htt),e(NA,Pte),e(Pte,Jtt),e(NA,Ytt),e(Se,Ktt),e(Se,qA),e(qA,$Le),e($Le,Ztt),e(qA,eat),e(qA,Bte),e(Bte,oat),e(qA,rat),e(Se,tat),e(Se,jA),e(jA,kLe),e(kLe,aat),e(jA,nat),e(jA,Ite),e(Ite,sat),e(jA,lat),e(Zr,iat),M(DA,Zr,null),b(m,THe,_),b(m,Sm,_),e(Sm,GA),e(GA,SLe),M(Zk,SLe,null),e(Sm,dat),e(Sm,RLe),e(RLe,cat),b(m,MHe,_),b(m,wr,_),M(eS,wr,null),e(wr,mat),e(wr,Rm),e(Rm,fat),e(Rm,Nte),e(Nte,gat),e(Rm,hat),e(Rm,qte),e(qte,uat),e(Rm,pat),e(wr,_at),e(wr,oS),e(oS,bat),e(oS,PLe),e(PLe,vat),e(oS,Fat),e(wr,Tat),e(wr,na),M(rS,na,null),e(na,Mat),e(na,BLe),e(BLe,Eat),e(na,Cat),e(na,Pm),e(Pm,wat),e(Pm,ILe),e(ILe,Aat),e(Pm,Lat),e(Pm,jte),e(jte,yat),e(Pm,xat),e(na,$at),M(OA,na,null),e(wr,kat),e(wr,et),M(tS,et,null),e(et,Sat),e(et,NLe),e(NLe,Rat),e(et,Pat),e(et,Nn),e(Nn,Bat),e(Nn,qLe),e(qLe,Iat),e(Nn,Nat),e(Nn,jLe),e(jLe,qat),e(Nn,jat),e(Nn,DLe),e(DLe,Dat),e(Nn,Gat),e(et,Oat),e(et,Re),e(Re,VA),e(VA,GLe),e(GLe,Vat),e(VA,Xat),e(VA,Dte),e(Dte,zat),e(VA,Wat),e(Re,Qat),e(Re,XA),e(XA,OLe),e(OLe,Uat),e(XA,Hat),e(XA,Gte),e(Gte,Jat),e(XA,Yat),e(Re,Kat),e(Re,zA),e(zA,VLe),e(VLe,Zat),e(zA,ent),e(zA,Ote),e(Ote,ont),e(zA,rnt),e(Re,tnt),e(Re,WA),e(WA,XLe),e(XLe,ant),e(WA,nnt),e(WA,Vte),e(Vte,snt),e(WA,lnt),e(Re,int),e(Re,QA),e(QA,zLe),e(zLe,dnt),e(QA,cnt),e(QA,Xte),e(Xte,mnt),e(QA,fnt),e(Re,gnt),e(Re,UA),e(UA,WLe),e(WLe,hnt),e(UA,unt),e(UA,zte),e(zte,pnt),e(UA,_nt),e(Re,bnt),e(Re,HA),e(HA,QLe),e(QLe,vnt),e(HA,Fnt),e(HA,Wte),e(Wte,Tnt),e(HA,Mnt),e(Re,Ent),e(Re,JA),e(JA,ULe),e(ULe,Cnt),e(JA,wnt),e(JA,Qte),e(Qte,Ant),e(JA,Lnt),e(Re,ynt),e(Re,YA),e(YA,HLe),e(HLe,xnt),e(YA,$nt),e(YA,Ute),e(Ute,knt),e(YA,Snt),e(Re,Rnt),e(Re,KA),e(KA,JLe),e(JLe,Pnt),e(KA,Bnt),e(KA,Hte),e(Hte,Int),e(KA,Nnt),e(et,qnt),M(ZA,et,null),b(m,EHe,_),b(m,Bm,_),e(Bm,e7),e(e7,YLe),M(aS,YLe,null),e(Bm,jnt),e(Bm,KLe),e(KLe,Dnt),b(m,CHe,_),b(m,Ar,_),M(nS,Ar,null),e(Ar,Gnt),e(Ar,Im),e(Im,Ont),e(Im,Jte),e(Jte,Vnt),e(Im,Xnt),e(Im,Yte),e(Yte,znt),e(Im,Wnt),e(Ar,Qnt),e(Ar,sS),e(sS,Unt),e(sS,ZLe),e(ZLe,Hnt),e(sS,Jnt),e(Ar,Ynt),e(Ar,sa),M(lS,sa,null),e(sa,Knt),e(sa,eye),e(eye,Znt),e(sa,est),e(sa,Nm),e(Nm,ost),e(Nm,oye),e(oye,rst),e(Nm,tst),e(Nm,Kte),e(Kte,ast),e(Nm,nst),e(sa,sst),M(o7,sa,null),e(Ar,lst),e(Ar,ot),M(iS,ot,null),e(ot,ist),e(ot,rye),e(rye,dst),e(ot,cst),e(ot,qn),e(qn,mst),e(qn,tye),e(tye,fst),e(qn,gst),e(qn,aye),e(aye,hst),e(qn,ust),e(qn,nye),e(nye,pst),e(qn,_st),e(ot,bst),e(ot,Xe),e(Xe,r7),e(r7,sye),e(sye,vst),e(r7,Fst),e(r7,Zte),e(Zte,Tst),e(r7,Mst),e(Xe,Est),e(Xe,t7),e(t7,lye),e(lye,Cst),e(t7,wst),e(t7,eae),e(eae,Ast),e(t7,Lst),e(Xe,yst),e(Xe,a7),e(a7,iye),e(iye,xst),e(a7,$st),e(a7,oae),e(oae,kst),e(a7,Sst),e(Xe,Rst),e(Xe,n7),e(n7,dye),e(dye,Pst),e(n7,Bst),e(n7,rae),e(rae,Ist),e(n7,Nst),e(Xe,qst),e(Xe,s7),e(s7,cye),e(cye,jst),e(s7,Dst),e(s7,tae),e(tae,Gst),e(s7,Ost),e(Xe,Vst),e(Xe,l7),e(l7,mye),e(mye,Xst),e(l7,zst),e(l7,aae),e(aae,Wst),e(l7,Qst),e(Xe,Ust),e(Xe,i7),e(i7,fye),e(fye,Hst),e(i7,Jst),e(i7,nae),e(nae,Yst),e(i7,Kst),e(Xe,Zst),e(Xe,d7),e(d7,gye),e(gye,elt),e(d7,olt),e(d7,sae),e(sae,rlt),e(d7,tlt),e(ot,alt),M(c7,ot,null),b(m,wHe,_),b(m,qm,_),e(qm,m7),e(m7,hye),M(dS,hye,null),e(qm,nlt),e(qm,uye),e(uye,slt),b(m,AHe,_),b(m,Lr,_),M(cS,Lr,null),e(Lr,llt),e(Lr,jm),e(jm,ilt),e(jm,lae),e(lae,dlt),e(jm,clt),e(jm,iae),e(iae,mlt),e(jm,flt),e(Lr,glt),e(Lr,mS),e(mS,hlt),e(mS,pye),e(pye,ult),e(mS,plt),e(Lr,_lt),e(Lr,la),M(fS,la,null),e(la,blt),e(la,_ye),e(_ye,vlt),e(la,Flt),e(la,Dm),e(Dm,Tlt),e(Dm,bye),e(bye,Mlt),e(Dm,Elt),e(Dm,dae),e(dae,Clt),e(Dm,wlt),e(la,Alt),M(f7,la,null),e(Lr,Llt),e(Lr,rt),M(gS,rt,null),e(rt,ylt),e(rt,vye),e(vye,xlt),e(rt,$lt),e(rt,jn),e(jn,klt),e(jn,Fye),e(Fye,Slt),e(jn,Rlt),e(jn,Tye),e(Tye,Plt),e(jn,Blt),e(jn,Mye),e(Mye,Ilt),e(jn,Nlt),e(rt,qlt),e(rt,ze),e(ze,g7),e(g7,Eye),e(Eye,jlt),e(g7,Dlt),e(g7,cae),e(cae,Glt),e(g7,Olt),e(ze,Vlt),e(ze,h7),e(h7,Cye),e(Cye,Xlt),e(h7,zlt),e(h7,mae),e(mae,Wlt),e(h7,Qlt),e(ze,Ult),e(ze,u7),e(u7,wye),e(wye,Hlt),e(u7,Jlt),e(u7,fae),e(fae,Ylt),e(u7,Klt),e(ze,Zlt),e(ze,p7),e(p7,Aye),e(Aye,eit),e(p7,oit),e(p7,gae),e(gae,rit),e(p7,tit),e(ze,ait),e(ze,_7),e(_7,Lye),e(Lye,nit),e(_7,sit),e(_7,hae),e(hae,lit),e(_7,iit),e(ze,dit),e(ze,b7),e(b7,yye),e(yye,cit),e(b7,mit),e(b7,uae),e(uae,fit),e(b7,git),e(ze,hit),e(ze,v7),e(v7,xye),e(xye,uit),e(v7,pit),e(v7,pae),e(pae,_it),e(v7,bit),e(ze,vit),e(ze,F7),e(F7,$ye),e($ye,Fit),e(F7,Tit),e(F7,_ae),e(_ae,Mit),e(F7,Eit),e(rt,Cit),M(T7,rt,null),b(m,LHe,_),b(m,Gm,_),e(Gm,M7),e(M7,kye),M(hS,kye,null),e(Gm,wit),e(Gm,Sye),e(Sye,Ait),b(m,yHe,_),b(m,yr,_),M(uS,yr,null),e(yr,Lit),e(yr,Om),e(Om,yit),e(Om,bae),e(bae,xit),e(Om,$it),e(Om,vae),e(vae,kit),e(Om,Sit),e(yr,Rit),e(yr,pS),e(pS,Pit),e(pS,Rye),e(Rye,Bit),e(pS,Iit),e(yr,Nit),e(yr,ia),M(_S,ia,null),e(ia,qit),e(ia,Pye),e(Pye,jit),e(ia,Dit),e(ia,Vm),e(Vm,Git),e(Vm,Bye),e(Bye,Oit),e(Vm,Vit),e(Vm,Fae),e(Fae,Xit),e(Vm,zit),e(ia,Wit),M(E7,ia,null),e(yr,Qit),e(yr,tt),M(bS,tt,null),e(tt,Uit),e(tt,Iye),e(Iye,Hit),e(tt,Jit),e(tt,Dn),e(Dn,Yit),e(Dn,Nye),e(Nye,Kit),e(Dn,Zit),e(Dn,qye),e(qye,edt),e(Dn,odt),e(Dn,jye),e(jye,rdt),e(Dn,tdt),e(tt,adt),e(tt,Dye),e(Dye,C7),e(C7,Gye),e(Gye,ndt),e(C7,sdt),e(C7,Tae),e(Tae,ldt),e(C7,idt),e(tt,ddt),M(w7,tt,null),b(m,xHe,_),b(m,Xm,_),e(Xm,A7),e(A7,Oye),M(vS,Oye,null),e(Xm,cdt),e(Xm,Vye),e(Vye,mdt),b(m,$He,_),b(m,xr,_),M(FS,xr,null),e(xr,fdt),e(xr,zm),e(zm,gdt),e(zm,Mae),e(Mae,hdt),e(zm,udt),e(zm,Eae),e(Eae,pdt),e(zm,_dt),e(xr,bdt),e(xr,TS),e(TS,vdt),e(TS,Xye),e(Xye,Fdt),e(TS,Tdt),e(xr,Mdt),e(xr,da),M(MS,da,null),e(da,Edt),e(da,zye),e(zye,Cdt),e(da,wdt),e(da,Wm),e(Wm,Adt),e(Wm,Wye),e(Wye,Ldt),e(Wm,ydt),e(Wm,Cae),e(Cae,xdt),e(Wm,$dt),e(da,kdt),M(L7,da,null),e(xr,Sdt),e(xr,at),M(ES,at,null),e(at,Rdt),e(at,Qye),e(Qye,Pdt),e(at,Bdt),e(at,Gn),e(Gn,Idt),e(Gn,Uye),e(Uye,Ndt),e(Gn,qdt),e(Gn,Hye),e(Hye,jdt),e(Gn,Ddt),e(Gn,Jye),e(Jye,Gdt),e(Gn,Odt),e(at,Vdt),e(at,CS),e(CS,y7),e(y7,Yye),e(Yye,Xdt),e(y7,zdt),e(y7,wae),e(wae,Wdt),e(y7,Qdt),e(CS,Udt),e(CS,x7),e(x7,Kye),e(Kye,Hdt),e(x7,Jdt),e(x7,Aae),e(Aae,Ydt),e(x7,Kdt),e(at,Zdt),M($7,at,null),b(m,kHe,_),b(m,Qm,_),e(Qm,k7),e(k7,Zye),M(wS,Zye,null),e(Qm,ect),e(Qm,e8e),e(e8e,oct),b(m,SHe,_),b(m,$r,_),M(AS,$r,null),e($r,rct),e($r,Um),e(Um,tct),e(Um,Lae),e(Lae,act),e(Um,nct),e(Um,yae),e(yae,sct),e(Um,lct),e($r,ict),e($r,LS),e(LS,dct),e(LS,o8e),e(o8e,cct),e(LS,mct),e($r,fct),e($r,ca),M(yS,ca,null),e(ca,gct),e(ca,r8e),e(r8e,hct),e(ca,uct),e(ca,Hm),e(Hm,pct),e(Hm,t8e),e(t8e,_ct),e(Hm,bct),e(Hm,xae),e(xae,vct),e(Hm,Fct),e(ca,Tct),M(S7,ca,null),e($r,Mct),e($r,nt),M(xS,nt,null),e(nt,Ect),e(nt,a8e),e(a8e,Cct),e(nt,wct),e(nt,On),e(On,Act),e(On,n8e),e(n8e,Lct),e(On,yct),e(On,s8e),e(s8e,xct),e(On,$ct),e(On,l8e),e(l8e,kct),e(On,Sct),e(nt,Rct),e(nt,i8e),e(i8e,R7),e(R7,d8e),e(d8e,Pct),e(R7,Bct),e(R7,$ae),e($ae,Ict),e(R7,Nct),e(nt,qct),M(P7,nt,null),RHe=!0},p(m,[_]){const $S={};_&2&&($S.$$scope={dirty:_,ctx:m}),af.$set($S);const c8e={};_&2&&(c8e.$$scope={dirty:_,ctx:m}),Fh.$set(c8e);const m8e={};_&2&&(m8e.$$scope={dirty:_,ctx:m}),ru.$set(m8e);const f8e={};_&2&&(f8e.$$scope={dirty:_,ctx:m}),Ou.$set(f8e);const kS={};_&2&&(kS.$$scope={dirty:_,ctx:m}),Vu.$set(kS);const g8e={};_&2&&(g8e.$$scope={dirty:_,ctx:m}),mp.$set(g8e);const Vn={};_&2&&(Vn.$$scope={dirty:_,ctx:m}),fp.$set(Vn);const h8e={};_&2&&(h8e.$$scope={dirty:_,ctx:m}),up.$set(h8e);const u8e={};_&2&&(u8e.$$scope={dirty:_,ctx:m}),E2.$set(u8e);const p8e={};_&2&&(p8e.$$scope={dirty:_,ctx:m}),w2.$set(p8e);const SS={};_&2&&(SS.$$scope={dirty:_,ctx:m}),Fb.$set(SS);const _8e={};_&2&&(_8e.$$scope={dirty:_,ctx:m}),Mb.$set(_8e);const RS={};_&2&&(RS.$$scope={dirty:_,ctx:m}),cv.$set(RS);const b8e={};_&2&&(b8e.$$scope={dirty:_,ctx:m}),fv.$set(b8e);const PS={};_&2&&(PS.$$scope={dirty:_,ctx:m}),Kv.$set(PS);const v8e={};_&2&&(v8e.$$scope={dirty:_,ctx:m}),e1.$set(v8e);const F8e={};_&2&&(F8e.$$scope={dirty:_,ctx:m}),T1.$set(F8e);const T8e={};_&2&&(T8e.$$scope={dirty:_,ctx:m}),E1.$set(T8e);const Jm={};_&2&&(Jm.$$scope={dirty:_,ctx:m}),EF.$set(Jm);const M8e={};_&2&&(M8e.$$scope={dirty:_,ctx:m}),wF.$set(M8e);const E8e={};_&2&&(E8e.$$scope={dirty:_,ctx:m}),aT.$set(E8e);const C8e={};_&2&&(C8e.$$scope={dirty:_,ctx:m}),sT.$set(C8e);const BS={};_&2&&(BS.$$scope={dirty:_,ctx:m}),hT.$set(BS);const w8e={};_&2&&(w8e.$$scope={dirty:_,ctx:m}),pT.$set(w8e);const A8e={};_&2&&(A8e.$$scope={dirty:_,ctx:m}),oM.$set(A8e);const L8e={};_&2&&(L8e.$$scope={dirty:_,ctx:m}),tM.$set(L8e);const dt={};_&2&&(dt.$$scope={dirty:_,ctx:m}),UM.$set(dt);const IS={};_&2&&(IS.$$scope={dirty:_,ctx:m}),JM.$set(IS);const y8e={};_&2&&(y8e.$$scope={dirty:_,ctx:m}),ZM.$set(y8e);const NS={};_&2&&(NS.$$scope={dirty:_,ctx:m}),oE.$set(NS);const x8e={};_&2&&(x8e.$$scope={dirty:_,ctx:m}),_E.$set(x8e);const ct={};_&2&&(ct.$$scope={dirty:_,ctx:m}),vE.$set(ct);const $8e={};_&2&&($8e.$$scope={dirty:_,ctx:m}),ME.$set($8e);const Ym={};_&2&&(Ym.$$scope={dirty:_,ctx:m}),CE.$set(Ym);const k8e={};_&2&&(k8e.$$scope={dirty:_,ctx:m}),LE.$set(k8e);const S8e={};_&2&&(S8e.$$scope={dirty:_,ctx:m}),xE.$set(S8e);const L={};_&2&&(L.$$scope={dirty:_,ctx:m}),SE.$set(L);const B7={};_&2&&(B7.$$scope={dirty:_,ctx:m}),PE.$set(B7);const R8e={};_&2&&(R8e.$$scope={dirty:_,ctx:m}),zE.$set(R8e);const P8e={};_&2&&(P8e.$$scope={dirty:_,ctx:m}),QE.$set(P8e);const I7={};_&2&&(I7.$$scope={dirty:_,ctx:m}),e4.$set(I7);const B8e={};_&2&&(B8e.$$scope={dirty:_,ctx:m}),r4.$set(B8e);const I8e={};_&2&&(I8e.$$scope={dirty:_,ctx:m}),h4.$set(I8e);const N7={};_&2&&(N7.$$scope={dirty:_,ctx:m}),p4.$set(N7);const N8e={};_&2&&(N8e.$$scope={dirty:_,ctx:m}),F4.$set(N8e);const q8e={};_&2&&(q8e.$$scope={dirty:_,ctx:m}),M4.$set(q8e);const q7={};_&2&&(q7.$$scope={dirty:_,ctx:m}),x4.$set(q7);const j8e={};_&2&&(j8e.$$scope={dirty:_,ctx:m}),k4.$set(j8e);const D8e={};_&2&&(D8e.$$scope={dirty:_,ctx:m}),N4.$set(D8e);const j7={};_&2&&(j7.$$scope={dirty:_,ctx:m}),j4.$set(j7);const G8e={};_&2&&(G8e.$$scope={dirty:_,ctx:m}),V4.$set(G8e);const O8e={};_&2&&(O8e.$$scope={dirty:_,ctx:m}),z4.$set(O8e);const D7={};_&2&&(D7.$$scope={dirty:_,ctx:m}),U4.$set(D7);const V8e={};_&2&&(V8e.$$scope={dirty:_,ctx:m}),J4.$set(V8e);const X8e={};_&2&&(X8e.$$scope={dirty:_,ctx:m}),tC.$set(X8e);const G7={};_&2&&(G7.$$scope={dirty:_,ctx:m}),nC.$set(G7);const z8e={};_&2&&(z8e.$$scope={dirty:_,ctx:m}),iC.$set(z8e);const W8e={};_&2&&(W8e.$$scope={dirty:_,ctx:m}),cC.$set(W8e);const O7={};_&2&&(O7.$$scope={dirty:_,ctx:m}),l3.$set(O7);const Q8e={};_&2&&(Q8e.$$scope={dirty:_,ctx:m}),d3.$set(Q8e);const U8e={};_&2&&(U8e.$$scope={dirty:_,ctx:m}),R3.$set(U8e);const V7={};_&2&&(V7.$$scope={dirty:_,ctx:m}),B3.$set(V7);const H8e={};_&2&&(H8e.$$scope={dirty:_,ctx:m}),H3.$set(H8e);const J8e={};_&2&&(J8e.$$scope={dirty:_,ctx:m}),Y3.$set(J8e);const X7={};_&2&&(X7.$$scope={dirty:_,ctx:m}),n5.$set(X7);const Y8e={};_&2&&(Y8e.$$scope={dirty:_,ctx:m}),l5.$set(Y8e);const K8e={};_&2&&(K8e.$$scope={dirty:_,ctx:m}),c5.$set(K8e);const z7={};_&2&&(z7.$$scope={dirty:_,ctx:m}),f5.$set(z7);const Z8e={};_&2&&(Z8e.$$scope={dirty:_,ctx:m}),R5.$set(Z8e);const e9e={};_&2&&(e9e.$$scope={dirty:_,ctx:m}),B5.$set(e9e);const W7={};_&2&&(W7.$$scope={dirty:_,ctx:m}),W5.$set(W7);const o9e={};_&2&&(o9e.$$scope={dirty:_,ctx:m}),U5.$set(o9e);const r9e={};_&2&&(r9e.$$scope={dirty:_,ctx:m}),T0.$set(r9e);const Q7={};_&2&&(Q7.$$scope={dirty:_,ctx:m}),E0.$set(Q7);const t9e={};_&2&&(t9e.$$scope={dirty:_,ctx:m}),G0.$set(t9e);const a9e={};_&2&&(a9e.$$scope={dirty:_,ctx:m}),V0.$set(a9e);const U7={};_&2&&(U7.$$scope={dirty:_,ctx:m}),W0.$set(U7);const n9e={};_&2&&(n9e.$$scope={dirty:_,ctx:m}),U0.$set(n9e);const s9e={};_&2&&(s9e.$$scope={dirty:_,ctx:m}),J0.$set(s9e);const H7={};_&2&&(H7.$$scope={dirty:_,ctx:m}),K0.$set(H7);const l9e={};_&2&&(l9e.$$scope={dirty:_,ctx:m}),vw.$set(l9e);const i9e={};_&2&&(i9e.$$scope={dirty:_,ctx:m}),Tw.$set(i9e);const J7={};_&2&&(J7.$$scope={dirty:_,ctx:m}),Ow.$set(J7);const d9e={};_&2&&(d9e.$$scope={dirty:_,ctx:m}),Xw.$set(d9e);const c9e={};_&2&&(c9e.$$scope={dirty:_,ctx:m}),Ww.$set(c9e);const Y7={};_&2&&(Y7.$$scope={dirty:_,ctx:m}),Uw.$set(Y7);const m9e={};_&2&&(m9e.$$scope={dirty:_,ctx:m}),Jw.$set(m9e);const f9e={};_&2&&(f9e.$$scope={dirty:_,ctx:m}),Kw.$set(f9e);const K7={};_&2&&(K7.$$scope={dirty:_,ctx:m}),A6.$set(K7);const g9e={};_&2&&(g9e.$$scope={dirty:_,ctx:m}),y6.$set(g9e);const h9e={};_&2&&(h9e.$$scope={dirty:_,ctx:m}),j6.$set(h9e);const Z7={};_&2&&(Z7.$$scope={dirty:_,ctx:m}),G6.$set(Z7);const u9e={};_&2&&(u9e.$$scope={dirty:_,ctx:m}),oA.$set(u9e);const p9e={};_&2&&(p9e.$$scope={dirty:_,ctx:m}),tA.$set(p9e);const eL={};_&2&&(eL.$$scope={dirty:_,ctx:m}),hA.$set(eL);const _9e={};_&2&&(_9e.$$scope={dirty:_,ctx:m}),pA.$set(_9e);const b9e={};_&2&&(b9e.$$scope={dirty:_,ctx:m}),LA.$set(b9e);const oL={};_&2&&(oL.$$scope={dirty:_,ctx:m}),xA.$set(oL);const v9e={};_&2&&(v9e.$$scope={dirty:_,ctx:m}),DA.$set(v9e);const F9e={};_&2&&(F9e.$$scope={dirty:_,ctx:m}),OA.$set(F9e);const rL={};_&2&&(rL.$$scope={dirty:_,ctx:m}),ZA.$set(rL);const T9e={};_&2&&(T9e.$$scope={dirty:_,ctx:m}),o7.$set(T9e);const M9e={};_&2&&(M9e.$$scope={dirty:_,ctx:m}),c7.$set(M9e);const tL={};_&2&&(tL.$$scope={dirty:_,ctx:m}),f7.$set(tL);const E9e={};_&2&&(E9e.$$scope={dirty:_,ctx:m}),T7.$set(E9e);const C9e={};_&2&&(C9e.$$scope={dirty:_,ctx:m}),E7.$set(C9e);const aL={};_&2&&(aL.$$scope={dirty:_,ctx:m}),w7.$set(aL);const w9e={};_&2&&(w9e.$$scope={dirty:_,ctx:m}),L7.$set(w9e);const A9e={};_&2&&(A9e.$$scope={dirty:_,ctx:m}),$7.$set(A9e);const nL={};_&2&&(nL.$$scope={dirty:_,ctx:m}),S7.$set(nL);const L9e={};_&2&&(L9e.$$scope={dirty:_,ctx:m}),P7.$set(L9e)},i(m){RHe||(E(d.$$.fragment,m),E(ja.$$.fragment,m),E(d8.$$.fragment,m),E(c8.$$.fragment,m),E(af.$$.fragment,m),E(m8.$$.fragment,m),E(f8.$$.fragment,m),E(u8.$$.fragment,m),E(Fh.$$.fragment,m),E(p8.$$.fragment,m),E(_8.$$.fragment,m),E(b8.$$.fragment,m),E(T8.$$.fragment,m),E(ru.$$.fragment,m),E(M8.$$.fragment,m),E(E8.$$.fragment,m),E(C8.$$.fragment,m),E(L8.$$.fragment,m),E(Ou.$$.fragment,m),E(Vu.$$.fragment,m),E(y8.$$.fragment,m),E(x8.$$.fragment,m),E($8.$$.fragment,m),E(R8.$$.fragment,m),E(mp.$$.fragment,m),E(fp.$$.fragment,m),E(P8.$$.fragment,m),E(B8.$$.fragment,m),E(I8.$$.fragment,m),E(q8.$$.fragment,m),E(up.$$.fragment,m),E(j8.$$.fragment,m),E(E2.$$.fragment,m),E(D8.$$.fragment,m),E(G8.$$.fragment,m),E(V8.$$.fragment,m),E(w2.$$.fragment,m),E(X8.$$.fragment,m),E(Fb.$$.fragment,m),E(z8.$$.fragment,m),E(W8.$$.fragment,m),E(U8.$$.fragment,m),E(Mb.$$.fragment,m),E(H8.$$.fragment,m),E(cv.$$.fragment,m),E(J8.$$.fragment,m),E(Y8.$$.fragment,m),E(Z8.$$.fragment,m),E(fv.$$.fragment,m),E(e9.$$.fragment,m),E(Kv.$$.fragment,m),E(o9.$$.fragment,m),E(r9.$$.fragment,m),E(a9.$$.fragment,m),E(e1.$$.fragment,m),E(n9.$$.fragment,m),E(T1.$$.fragment,m),E(s9.$$.fragment,m),E(l9.$$.fragment,m),E(d9.$$.fragment,m),E(E1.$$.fragment,m),E(c9.$$.fragment,m),E(EF.$$.fragment,m),E(m9.$$.fragment,m),E(f9.$$.fragment,m),E(h9.$$.fragment,m),E(wF.$$.fragment,m),E(u9.$$.fragment,m),E(aT.$$.fragment,m),E(p9.$$.fragment,m),E(_9.$$.fragment,m),E(v9.$$.fragment,m),E(sT.$$.fragment,m),E(F9.$$.fragment,m),E(hT.$$.fragment,m),E(T9.$$.fragment,m),E(M9.$$.fragment,m),E(C9.$$.fragment,m),E(pT.$$.fragment,m),E(w9.$$.fragment,m),E(oM.$$.fragment,m),E(A9.$$.fragment,m),E(L9.$$.fragment,m),E(x9.$$.fragment,m),E(tM.$$.fragment,m),E($9.$$.fragment,m),E(UM.$$.fragment,m),E(k9.$$.fragment,m),E(S9.$$.fragment,m),E(P9.$$.fragment,m),E(JM.$$.fragment,m),E(B9.$$.fragment,m),E(ZM.$$.fragment,m),E(I9.$$.fragment,m),E(N9.$$.fragment,m),E(j9.$$.fragment,m),E(oE.$$.fragment,m),E(D9.$$.fragment,m),E(_E.$$.fragment,m),E(G9.$$.fragment,m),E(O9.$$.fragment,m),E(X9.$$.fragment,m),E(vE.$$.fragment,m),E(z9.$$.fragment,m),E(ME.$$.fragment,m),E(W9.$$.fragment,m),E(Q9.$$.fragment,m),E(H9.$$.fragment,m),E(CE.$$.fragment,m),E(J9.$$.fragment,m),E(LE.$$.fragment,m),E(Y9.$$.fragment,m),E(K9.$$.fragment,m),E(ex.$$.fragment,m),E(xE.$$.fragment,m),E(ox.$$.fragment,m),E(SE.$$.fragment,m),E(rx.$$.fragment,m),E(tx.$$.fragment,m),E(nx.$$.fragment,m),E(PE.$$.fragment,m),E(sx.$$.fragment,m),E(zE.$$.fragment,m),E(lx.$$.fragment,m),E(ix.$$.fragment,m),E(cx.$$.fragment,m),E(QE.$$.fragment,m),E(mx.$$.fragment,m),E(e4.$$.fragment,m),E(fx.$$.fragment,m),E(gx.$$.fragment,m),E(ux.$$.fragment,m),E(r4.$$.fragment,m),E(px.$$.fragment,m),E(h4.$$.fragment,m),E(_x.$$.fragment,m),E(bx.$$.fragment,m),E(Fx.$$.fragment,m),E(p4.$$.fragment,m),E(Tx.$$.fragment,m),E(F4.$$.fragment,m),E(Ex.$$.fragment,m),E(Cx.$$.fragment,m),E(Ax.$$.fragment,m),E(M4.$$.fragment,m),E(Lx.$$.fragment,m),E(x4.$$.fragment,m),E(yx.$$.fragment,m),E(xx.$$.fragment,m),E(kx.$$.fragment,m),E(k4.$$.fragment,m),E(Sx.$$.fragment,m),E(N4.$$.fragment,m),E(Rx.$$.fragment,m),E(Px.$$.fragment,m),E(Ix.$$.fragment,m),E(j4.$$.fragment,m),E(Nx.$$.fragment,m),E(V4.$$.fragment,m),E(jx.$$.fragment,m),E(Dx.$$.fragment,m),E(Ox.$$.fragment,m),E(z4.$$.fragment,m),E(Vx.$$.fragment,m),E(U4.$$.fragment,m),E(Xx.$$.fragment,m),E(zx.$$.fragment,m),E(Qx.$$.fragment,m),E(J4.$$.fragment,m),E(Ux.$$.fragment,m),E(tC.$$.fragment,m),E(Hx.$$.fragment,m),E(Jx.$$.fragment,m),E(Kx.$$.fragment,m),E(nC.$$.fragment,m),E(Zx.$$.fragment,m),E(iC.$$.fragment,m),E(e$.$$.fragment,m),E(o$.$$.fragment,m),E(t$.$$.fragment,m),E(cC.$$.fragment,m),E(a$.$$.fragment,m),E(l3.$$.fragment,m),E(n$.$$.fragment,m),E(s$.$$.fragment,m),E(i$.$$.fragment,m),E(d3.$$.fragment,m),E(d$.$$.fragment,m),E(R3.$$.fragment,m),E(c$.$$.fragment,m),E(m$.$$.fragment,m),E(g$.$$.fragment,m),E(B3.$$.fragment,m),E(h$.$$.fragment,m),E(H3.$$.fragment,m),E(u$.$$.fragment,m),E(p$.$$.fragment,m),E(b$.$$.fragment,m),E(Y3.$$.fragment,m),E(v$.$$.fragment,m),E(n5.$$.fragment,m),E(F$.$$.fragment,m),E(T$.$$.fragment,m),E(E$.$$.fragment,m),E(l5.$$.fragment,m),E(C$.$$.fragment,m),E(c5.$$.fragment,m),E(A$.$$.fragment,m),E(L$.$$.fragment,m),E(x$.$$.fragment,m),E(f5.$$.fragment,m),E($$.$$.fragment,m),E(R5.$$.fragment,m),E(k$.$$.fragment,m),E(S$.$$.fragment,m),E(P$.$$.fragment,m),E(B5.$$.fragment,m),E(B$.$$.fragment,m),E(W5.$$.fragment,m),E(I$.$$.fragment,m),E(N$.$$.fragment,m),E(j$.$$.fragment,m),E(U5.$$.fragment,m),E(D$.$$.fragment,m),E(T0.$$.fragment,m),E(G$.$$.fragment,m),E(O$.$$.fragment,m),E(X$.$$.fragment,m),E(E0.$$.fragment,m),E(z$.$$.fragment,m),E(G0.$$.fragment,m),E(W$.$$.fragment,m),E(Q$.$$.fragment,m),E(H$.$$.fragment,m),E(V0.$$.fragment,m),E(J$.$$.fragment,m),E(W0.$$.fragment,m),E(K$.$$.fragment,m),E(Z$.$$.fragment,m),E(ok.$$.fragment,m),E(U0.$$.fragment,m),E(rk.$$.fragment,m),E(J0.$$.fragment,m),E(tk.$$.fragment,m),E(ak.$$.fragment,m),E(sk.$$.fragment,m),E(K0.$$.fragment,m),E(lk.$$.fragment,m),E(vw.$$.fragment,m),E(ik.$$.fragment,m),E(dk.$$.fragment,m),E(mk.$$.fragment,m),E(Tw.$$.fragment,m),E(fk.$$.fragment,m),E(Ow.$$.fragment,m),E(gk.$$.fragment,m),E(hk.$$.fragment,m),E(pk.$$.fragment,m),E(Xw.$$.fragment,m),E(_k.$$.fragment,m),E(Ww.$$.fragment,m),E(bk.$$.fragment,m),E(vk.$$.fragment,m),E(Tk.$$.fragment,m),E(Uw.$$.fragment,m),E(Mk.$$.fragment,m),E(Jw.$$.fragment,m),E(Ek.$$.fragment,m),E(Ck.$$.fragment,m),E(Ak.$$.fragment,m),E(Kw.$$.fragment,m),E(Lk.$$.fragment,m),E(A6.$$.fragment,m),E(yk.$$.fragment,m),E(xk.$$.fragment,m),E(kk.$$.fragment,m),E(y6.$$.fragment,m),E(Sk.$$.fragment,m),E(j6.$$.fragment,m),E(Rk.$$.fragment,m),E(Pk.$$.fragment,m),E(Ik.$$.fragment,m),E(G6.$$.fragment,m),E(Nk.$$.fragment,m),E(oA.$$.fragment,m),E(qk.$$.fragment,m),E(jk.$$.fragment,m),E(Gk.$$.fragment,m),E(tA.$$.fragment,m),E(Ok.$$.fragment,m),E(hA.$$.fragment,m),E(Vk.$$.fragment,m),E(Xk.$$.fragment,m),E(Wk.$$.fragment,m),E(pA.$$.fragment,m),E(Qk.$$.fragment,m),E(LA.$$.fragment,m),E(Uk.$$.fragment,m),E(Hk.$$.fragment,m),E(Yk.$$.fragment,m),E(xA.$$.fragment,m),E(Kk.$$.fragment,m),E(DA.$$.fragment,m),E(Zk.$$.fragment,m),E(eS.$$.fragment,m),E(rS.$$.fragment,m),E(OA.$$.fragment,m),E(tS.$$.fragment,m),E(ZA.$$.fragment,m),E(aS.$$.fragment,m),E(nS.$$.fragment,m),E(lS.$$.fragment,m),E(o7.$$.fragment,m),E(iS.$$.fragment,m),E(c7.$$.fragment,m),E(dS.$$.fragment,m),E(cS.$$.fragment,m),E(fS.$$.fragment,m),E(f7.$$.fragment,m),E(gS.$$.fragment,m),E(T7.$$.fragment,m),E(hS.$$.fragment,m),E(uS.$$.fragment,m),E(_S.$$.fragment,m),E(E7.$$.fragment,m),E(bS.$$.fragment,m),E(w7.$$.fragment,m),E(vS.$$.fragment,m),E(FS.$$.fragment,m),E(MS.$$.fragment,m),E(L7.$$.fragment,m),E(ES.$$.fragment,m),E($7.$$.fragment,m),E(wS.$$.fragment,m),E(AS.$$.fragment,m),E(yS.$$.fragment,m),E(S7.$$.fragment,m),E(xS.$$.fragment,m),E(P7.$$.fragment,m),RHe=!0)},o(m){C(d.$$.fragment,m),C(ja.$$.fragment,m),C(d8.$$.fragment,m),C(c8.$$.fragment,m),C(af.$$.fragment,m),C(m8.$$.fragment,m),C(f8.$$.fragment,m),C(u8.$$.fragment,m),C(Fh.$$.fragment,m),C(p8.$$.fragment,m),C(_8.$$.fragment,m),C(b8.$$.fragment,m),C(T8.$$.fragment,m),C(ru.$$.fragment,m),C(M8.$$.fragment,m),C(E8.$$.fragment,m),C(C8.$$.fragment,m),C(L8.$$.fragment,m),C(Ou.$$.fragment,m),C(Vu.$$.fragment,m),C(y8.$$.fragment,m),C(x8.$$.fragment,m),C($8.$$.fragment,m),C(R8.$$.fragment,m),C(mp.$$.fragment,m),C(fp.$$.fragment,m),C(P8.$$.fragment,m),C(B8.$$.fragment,m),C(I8.$$.fragment,m),C(q8.$$.fragment,m),C(up.$$.fragment,m),C(j8.$$.fragment,m),C(E2.$$.fragment,m),C(D8.$$.fragment,m),C(G8.$$.fragment,m),C(V8.$$.fragment,m),C(w2.$$.fragment,m),C(X8.$$.fragment,m),C(Fb.$$.fragment,m),C(z8.$$.fragment,m),C(W8.$$.fragment,m),C(U8.$$.fragment,m),C(Mb.$$.fragment,m),C(H8.$$.fragment,m),C(cv.$$.fragment,m),C(J8.$$.fragment,m),C(Y8.$$.fragment,m),C(Z8.$$.fragment,m),C(fv.$$.fragment,m),C(e9.$$.fragment,m),C(Kv.$$.fragment,m),C(o9.$$.fragment,m),C(r9.$$.fragment,m),C(a9.$$.fragment,m),C(e1.$$.fragment,m),C(n9.$$.fragment,m),C(T1.$$.fragment,m),C(s9.$$.fragment,m),C(l9.$$.fragment,m),C(d9.$$.fragment,m),C(E1.$$.fragment,m),C(c9.$$.fragment,m),C(EF.$$.fragment,m),C(m9.$$.fragment,m),C(f9.$$.fragment,m),C(h9.$$.fragment,m),C(wF.$$.fragment,m),C(u9.$$.fragment,m),C(aT.$$.fragment,m),C(p9.$$.fragment,m),C(_9.$$.fragment,m),C(v9.$$.fragment,m),C(sT.$$.fragment,m),C(F9.$$.fragment,m),C(hT.$$.fragment,m),C(T9.$$.fragment,m),C(M9.$$.fragment,m),C(C9.$$.fragment,m),C(pT.$$.fragment,m),C(w9.$$.fragment,m),C(oM.$$.fragment,m),C(A9.$$.fragment,m),C(L9.$$.fragment,m),C(x9.$$.fragment,m),C(tM.$$.fragment,m),C($9.$$.fragment,m),C(UM.$$.fragment,m),C(k9.$$.fragment,m),C(S9.$$.fragment,m),C(P9.$$.fragment,m),C(JM.$$.fragment,m),C(B9.$$.fragment,m),C(ZM.$$.fragment,m),C(I9.$$.fragment,m),C(N9.$$.fragment,m),C(j9.$$.fragment,m),C(oE.$$.fragment,m),C(D9.$$.fragment,m),C(_E.$$.fragment,m),C(G9.$$.fragment,m),C(O9.$$.fragment,m),C(X9.$$.fragment,m),C(vE.$$.fragment,m),C(z9.$$.fragment,m),C(ME.$$.fragment,m),C(W9.$$.fragment,m),C(Q9.$$.fragment,m),C(H9.$$.fragment,m),C(CE.$$.fragment,m),C(J9.$$.fragment,m),C(LE.$$.fragment,m),C(Y9.$$.fragment,m),C(K9.$$.fragment,m),C(ex.$$.fragment,m),C(xE.$$.fragment,m),C(ox.$$.fragment,m),C(SE.$$.fragment,m),C(rx.$$.fragment,m),C(tx.$$.fragment,m),C(nx.$$.fragment,m),C(PE.$$.fragment,m),C(sx.$$.fragment,m),C(zE.$$.fragment,m),C(lx.$$.fragment,m),C(ix.$$.fragment,m),C(cx.$$.fragment,m),C(QE.$$.fragment,m),C(mx.$$.fragment,m),C(e4.$$.fragment,m),C(fx.$$.fragment,m),C(gx.$$.fragment,m),C(ux.$$.fragment,m),C(r4.$$.fragment,m),C(px.$$.fragment,m),C(h4.$$.fragment,m),C(_x.$$.fragment,m),C(bx.$$.fragment,m),C(Fx.$$.fragment,m),C(p4.$$.fragment,m),C(Tx.$$.fragment,m),C(F4.$$.fragment,m),C(Ex.$$.fragment,m),C(Cx.$$.fragment,m),C(Ax.$$.fragment,m),C(M4.$$.fragment,m),C(Lx.$$.fragment,m),C(x4.$$.fragment,m),C(yx.$$.fragment,m),C(xx.$$.fragment,m),C(kx.$$.fragment,m),C(k4.$$.fragment,m),C(Sx.$$.fragment,m),C(N4.$$.fragment,m),C(Rx.$$.fragment,m),C(Px.$$.fragment,m),C(Ix.$$.fragment,m),C(j4.$$.fragment,m),C(Nx.$$.fragment,m),C(V4.$$.fragment,m),C(jx.$$.fragment,m),C(Dx.$$.fragment,m),C(Ox.$$.fragment,m),C(z4.$$.fragment,m),C(Vx.$$.fragment,m),C(U4.$$.fragment,m),C(Xx.$$.fragment,m),C(zx.$$.fragment,m),C(Qx.$$.fragment,m),C(J4.$$.fragment,m),C(Ux.$$.fragment,m),C(tC.$$.fragment,m),C(Hx.$$.fragment,m),C(Jx.$$.fragment,m),C(Kx.$$.fragment,m),C(nC.$$.fragment,m),C(Zx.$$.fragment,m),C(iC.$$.fragment,m),C(e$.$$.fragment,m),C(o$.$$.fragment,m),C(t$.$$.fragment,m),C(cC.$$.fragment,m),C(a$.$$.fragment,m),C(l3.$$.fragment,m),C(n$.$$.fragment,m),C(s$.$$.fragment,m),C(i$.$$.fragment,m),C(d3.$$.fragment,m),C(d$.$$.fragment,m),C(R3.$$.fragment,m),C(c$.$$.fragment,m),C(m$.$$.fragment,m),C(g$.$$.fragment,m),C(B3.$$.fragment,m),C(h$.$$.fragment,m),C(H3.$$.fragment,m),C(u$.$$.fragment,m),C(p$.$$.fragment,m),C(b$.$$.fragment,m),C(Y3.$$.fragment,m),C(v$.$$.fragment,m),C(n5.$$.fragment,m),C(F$.$$.fragment,m),C(T$.$$.fragment,m),C(E$.$$.fragment,m),C(l5.$$.fragment,m),C(C$.$$.fragment,m),C(c5.$$.fragment,m),C(A$.$$.fragment,m),C(L$.$$.fragment,m),C(x$.$$.fragment,m),C(f5.$$.fragment,m),C($$.$$.fragment,m),C(R5.$$.fragment,m),C(k$.$$.fragment,m),C(S$.$$.fragment,m),C(P$.$$.fragment,m),C(B5.$$.fragment,m),C(B$.$$.fragment,m),C(W5.$$.fragment,m),C(I$.$$.fragment,m),C(N$.$$.fragment,m),C(j$.$$.fragment,m),C(U5.$$.fragment,m),C(D$.$$.fragment,m),C(T0.$$.fragment,m),C(G$.$$.fragment,m),C(O$.$$.fragment,m),C(X$.$$.fragment,m),C(E0.$$.fragment,m),C(z$.$$.fragment,m),C(G0.$$.fragment,m),C(W$.$$.fragment,m),C(Q$.$$.fragment,m),C(H$.$$.fragment,m),C(V0.$$.fragment,m),C(J$.$$.fragment,m),C(W0.$$.fragment,m),C(K$.$$.fragment,m),C(Z$.$$.fragment,m),C(ok.$$.fragment,m),C(U0.$$.fragment,m),C(rk.$$.fragment,m),C(J0.$$.fragment,m),C(tk.$$.fragment,m),C(ak.$$.fragment,m),C(sk.$$.fragment,m),C(K0.$$.fragment,m),C(lk.$$.fragment,m),C(vw.$$.fragment,m),C(ik.$$.fragment,m),C(dk.$$.fragment,m),C(mk.$$.fragment,m),C(Tw.$$.fragment,m),C(fk.$$.fragment,m),C(Ow.$$.fragment,m),C(gk.$$.fragment,m),C(hk.$$.fragment,m),C(pk.$$.fragment,m),C(Xw.$$.fragment,m),C(_k.$$.fragment,m),C(Ww.$$.fragment,m),C(bk.$$.fragment,m),C(vk.$$.fragment,m),C(Tk.$$.fragment,m),C(Uw.$$.fragment,m),C(Mk.$$.fragment,m),C(Jw.$$.fragment,m),C(Ek.$$.fragment,m),C(Ck.$$.fragment,m),C(Ak.$$.fragment,m),C(Kw.$$.fragment,m),C(Lk.$$.fragment,m),C(A6.$$.fragment,m),C(yk.$$.fragment,m),C(xk.$$.fragment,m),C(kk.$$.fragment,m),C(y6.$$.fragment,m),C(Sk.$$.fragment,m),C(j6.$$.fragment,m),C(Rk.$$.fragment,m),C(Pk.$$.fragment,m),C(Ik.$$.fragment,m),C(G6.$$.fragment,m),C(Nk.$$.fragment,m),C(oA.$$.fragment,m),C(qk.$$.fragment,m),C(jk.$$.fragment,m),C(Gk.$$.fragment,m),C(tA.$$.fragment,m),C(Ok.$$.fragment,m),C(hA.$$.fragment,m),C(Vk.$$.fragment,m),C(Xk.$$.fragment,m),C(Wk.$$.fragment,m),C(pA.$$.fragment,m),C(Qk.$$.fragment,m),C(LA.$$.fragment,m),C(Uk.$$.fragment,m),C(Hk.$$.fragment,m),C(Yk.$$.fragment,m),C(xA.$$.fragment,m),C(Kk.$$.fragment,m),C(DA.$$.fragment,m),C(Zk.$$.fragment,m),C(eS.$$.fragment,m),C(rS.$$.fragment,m),C(OA.$$.fragment,m),C(tS.$$.fragment,m),C(ZA.$$.fragment,m),C(aS.$$.fragment,m),C(nS.$$.fragment,m),C(lS.$$.fragment,m),C(o7.$$.fragment,m),C(iS.$$.fragment,m),C(c7.$$.fragment,m),C(dS.$$.fragment,m),C(cS.$$.fragment,m),C(fS.$$.fragment,m),C(f7.$$.fragment,m),C(gS.$$.fragment,m),C(T7.$$.fragment,m),C(hS.$$.fragment,m),C(uS.$$.fragment,m),C(_S.$$.fragment,m),C(E7.$$.fragment,m),C(bS.$$.fragment,m),C(w7.$$.fragment,m),C(vS.$$.fragment,m),C(FS.$$.fragment,m),C(MS.$$.fragment,m),C(L7.$$.fragment,m),C(ES.$$.fragment,m),C($7.$$.fragment,m),C(wS.$$.fragment,m),C(AS.$$.fragment,m),C(yS.$$.fragment,m),C(S7.$$.fragment,m),C(xS.$$.fragment,m),C(P7.$$.fragment,m),RHe=!1},d(m){t(g),m&&t(v),m&&t(u),w(d),m&&t(Zm),m&&t(mt),m&&t(Oe),m&&t(Qe),m&&t(of),w(ja,m),m&&t(Ue),m&&t(Ae),m&&t(Lo),m&&t(Da),m&&t(CQe),m&&t(Hi),w(d8),m&&t(wQe),m&&t(Un),m&&t(AQe),w(c8,m),m&&t(LQe),m&&t(aP),m&&t(yQe),w(af,m),m&&t(xQe),m&&t(Ji),w(m8),m&&t($Qe),m&&t(yo),w(f8),w(u8),w(Fh),w(p8),m&&t(kQe),m&&t(Ki),w(_8),m&&t(SQe),m&&t(xo),w(b8),w(T8),w(ru),w(M8),m&&t(RQe),m&&t(Zi),w(E8),m&&t(PQe),m&&t($o),w(C8),w(L8),w(Ou),w(Vu),w(y8),m&&t(BQe),m&&t(ed),w(x8),m&&t(IQe),m&&t(ko),w($8),w(R8),w(mp),w(fp),w(P8),m&&t(NQe),m&&t(rd),w(B8),m&&t(qQe),m&&t(So),w(I8),w(q8),w(up),w(j8),w(E2),m&&t(jQe),m&&t(nd),w(D8),m&&t(DQe),m&&t(Ro),w(G8),w(V8),w(w2),w(X8),w(Fb),m&&t(GQe),m&&t(id),w(z8),m&&t(OQe),m&&t(Po),w(W8),w(U8),w(Mb),w(H8),w(cv),m&&t(VQe),m&&t(md),w(J8),m&&t(XQe),m&&t(Bo),w(Y8),w(Z8),w(fv),w(e9),w(Kv),m&&t(zQe),m&&t(hd),w(o9),m&&t(WQe),m&&t(Io),w(r9),w(a9),w(e1),w(n9),w(T1),m&&t(QQe),m&&t(_d),w(s9),m&&t(UQe),m&&t(No),w(l9),w(d9),w(E1),w(c9),w(EF),m&&t(HQe),m&&t(Fd),w(m9),m&&t(JQe),m&&t(qo),w(f9),w(h9),w(wF),w(u9),w(aT),m&&t(YQe),m&&t(Ed),w(p9),m&&t(KQe),m&&t(jo),w(_9),w(v9),w(sT),w(F9),w(hT),m&&t(ZQe),m&&t(Ad),w(T9),m&&t(eUe),m&&t(Go),w(M9),w(C9),w(pT),w(w9),w(oM),m&&t(oUe),m&&t(xd),w(A9),m&&t(rUe),m&&t(Oo),w(L9),w(x9),w(tM),w($9),w(UM),m&&t(tUe),m&&t(Sd),w(k9),m&&t(aUe),m&&t(Vo),w(S9),w(P9),w(JM),w(B9),w(ZM),m&&t(nUe),m&&t(Bd),w(I9),m&&t(sUe),m&&t(Xo),w(N9),w(j9),w(oE),w(D9),w(_E),m&&t(lUe),m&&t(qd),w(G9),m&&t(iUe),m&&t(zo),w(O9),w(X9),w(vE),w(z9),w(ME),m&&t(dUe),m&&t(Gd),w(W9),m&&t(cUe),m&&t(Wo),w(Q9),w(H9),w(CE),w(J9),w(LE),m&&t(mUe),m&&t(Xd),w(Y9),m&&t(fUe),m&&t(Qo),w(K9),w(ex),w(xE),w(ox),w(SE),m&&t(gUe),m&&t(Qd),w(rx),m&&t(hUe),m&&t(Uo),w(tx),w(nx),w(PE),w(sx),w(zE),m&&t(uUe),m&&t(Jd),w(lx),m&&t(pUe),m&&t(Ho),w(ix),w(cx),w(QE),w(mx),w(e4),m&&t(_Ue),m&&t(Zd),w(fx),m&&t(bUe),m&&t(Jo),w(gx),w(ux),w(r4),w(px),w(h4),m&&t(vUe),m&&t(rc),w(_x),m&&t(FUe),m&&t(Yo),w(bx),w(Fx),w(p4),w(Tx),w(F4),m&&t(TUe),m&&t(nc),w(Ex),m&&t(MUe),m&&t(Ko),w(Cx),w(Ax),w(M4),w(Lx),w(x4),m&&t(EUe),m&&t(ic),w(yx),m&&t(CUe),m&&t(Zo),w(xx),w(kx),w(k4),w(Sx),w(N4),m&&t(wUe),m&&t(mc),w(Rx),m&&t(AUe),m&&t(er),w(Px),w(Ix),w(j4),w(Nx),w(V4),m&&t(LUe),m&&t(hc),w(jx),m&&t(yUe),m&&t(or),w(Dx),w(Ox),w(z4),w(Vx),w(U4),m&&t(xUe),m&&t(_c),w(Xx),m&&t($Ue),m&&t(rr),w(zx),w(Qx),w(J4),w(Ux),w(tC),m&&t(kUe),m&&t(Fc),w(Hx),m&&t(SUe),m&&t(tr),w(Jx),w(Kx),w(nC),w(Zx),w(iC),m&&t(RUe),m&&t(Ec),w(e$),m&&t(PUe),m&&t(ar),w(o$),w(t$),w(cC),w(a$),w(l3),m&&t(BUe),m&&t(Ac),w(n$),m&&t(IUe),m&&t(nr),w(s$),w(i$),w(d3),w(d$),w(R3),m&&t(NUe),m&&t(xc),w(c$),m&&t(qUe),m&&t(sr),w(m$),w(g$),w(B3),w(h$),w(H3),m&&t(jUe),m&&t(Sc),w(u$),m&&t(DUe),m&&t(lr),w(p$),w(b$),w(Y3),w(v$),w(n5),m&&t(GUe),m&&t(Bc),w(F$),m&&t(OUe),m&&t(ir),w(T$),w(E$),w(l5),w(C$),w(c5),m&&t(VUe),m&&t(qc),w(A$),m&&t(XUe),m&&t(dr),w(L$),w(x$),w(f5),w($$),w(R5),m&&t(zUe),m&&t(Gc),w(k$),m&&t(WUe),m&&t(cr),w(S$),w(P$),w(B5),w(B$),w(W5),m&&t(QUe),m&&t(Xc),w(I$),m&&t(UUe),m&&t(mr),w(N$),w(j$),w(U5),w(D$),w(T0),m&&t(HUe),m&&t(Qc),w(G$),m&&t(JUe),m&&t(fr),w(O$),w(X$),w(E0),w(z$),w(G0),m&&t(YUe),m&&t(Jc),w(W$),m&&t(KUe),m&&t(gr),w(Q$),w(H$),w(V0),w(J$),w(W0),m&&t(ZUe),m&&t(Zc),w(K$),m&&t(eHe),m&&t(hr),w(Z$),w(ok),w(U0),w(rk),w(J0),m&&t(oHe),m&&t(rm),w(tk),m&&t(rHe),m&&t(ur),w(ak),w(sk),w(K0),w(lk),w(vw),m&&t(tHe),m&&t(nm),w(ik),m&&t(aHe),m&&t(pr),w(dk),w(mk),w(Tw),w(fk),w(Ow),m&&t(nHe),m&&t(im),w(gk),m&&t(sHe),m&&t(_r),w(hk),w(pk),w(Xw),w(_k),w(Ww),m&&t(lHe),m&&t(mm),w(bk),m&&t(iHe),m&&t(br),w(vk),w(Tk),w(Uw),w(Mk),w(Jw),m&&t(dHe),m&&t(hm),w(Ek),m&&t(cHe),m&&t(vr),w(Ck),w(Ak),w(Kw),w(Lk),w(A6),m&&t(mHe),m&&t(_m),w(yk),m&&t(fHe),m&&t(Fr),w(xk),w(kk),w(y6),w(Sk),w(j6),m&&t(gHe),m&&t(Fm),w(Rk),m&&t(hHe),m&&t(Tr),w(Pk),w(Ik),w(G6),w(Nk),w(oA),m&&t(uHe),m&&t(Em),w(qk),m&&t(pHe),m&&t(Mr),w(jk),w(Gk),w(tA),w(Ok),w(hA),m&&t(_He),m&&t(Am),w(Vk),m&&t(bHe),m&&t(Er),w(Xk),w(Wk),w(pA),w(Qk),w(LA),m&&t(vHe),m&&t(xm),w(Uk),m&&t(FHe),m&&t(Cr),w(Hk),w(Yk),w(xA),w(Kk),w(DA),m&&t(THe),m&&t(Sm),w(Zk),m&&t(MHe),m&&t(wr),w(eS),w(rS),w(OA),w(tS),w(ZA),m&&t(EHe),m&&t(Bm),w(aS),m&&t(CHe),m&&t(Ar),w(nS),w(lS),w(o7),w(iS),w(c7),m&&t(wHe),m&&t(qm),w(dS),m&&t(AHe),m&&t(Lr),w(cS),w(fS),w(f7),w(gS),w(T7),m&&t(LHe),m&&t(Gm),w(hS),m&&t(yHe),m&&t(yr),w(uS),w(_S),w(E7),w(bS),w(w7),m&&t(xHe),m&&t(Xm),w(vS),m&&t($He),m&&t(xr),w(FS),w(MS),w(L7),w(ES),w($7),m&&t(kHe),m&&t(Qm),w(wS),m&&t(SHe),m&&t($r),w(AS),w(yS),w(S7),w(xS),w(P7)}}}const Kta={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVideoClassification",title:"AutoModelForVideoClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForSemanticSegmentation",title:"TFAutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Zta($){return Qoa(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class saa extends Voa{constructor(g){super();Xoa(this,g,Zta,Yta,zoa,{})}}export{saa as default,Kta as metadata};
