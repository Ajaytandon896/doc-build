import{S as Caa,i as waa,s as Aaa,e as a,k as l,w as F,t as o,M as Laa,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as yaa,L as q}from"../../chunks/vendor-hf-doc-builder.js";import{T as Uft}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as B}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as oe}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as N}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function xaa($){let g,v,u,f,p,d,h,Ao,Oi,ef,mt,Vi,Xi,v8,of,Ve,Ue,zi,Xn,F8,zn,Wn,T8,Wi,Qn,M8,Qi,rf,ja;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Ao=o(`, make sure its
`),Oi=a("code"),ef=o("model_type"),mt=o(" attribute is set to the same key you use when registering the config (here "),Vi=a("code"),Xi=o('"new-model"'),v8=o(")."),of=l(),Ve=a("p"),Ue=o("Likewise, if your "),zi=a("code"),Xn=o("NewModel"),F8=o(" is a subclass of "),zn=a("a"),Wn=o("PreTrainedModel"),T8=o(`, make sure its
`),Wi=a("code"),Qn=o("config_class"),M8=o(` attribute is set to the same class you use when registering the model (here
`),Qi=a("code"),rf=o("NewModelConfig"),ja=o(")."),this.h()},l(He){g=n(He,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var fP=s(u);f=r(fP,"NewModelConfig"),fP.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Ui=s(d);h=r(Ui,"PretrainedConfig"),Ui.forEach(t),Ao=r(Ae,`, make sure its
`),Oi=n(Ae,"CODE",{});var gP=s(Oi);ef=r(gP,"model_type"),gP.forEach(t),mt=r(Ae," attribute is set to the same key you use when registering the config (here "),Vi=n(Ae,"CODE",{});var hP=s(Vi);Xi=r(hP,'"new-model"'),hP.forEach(t),v8=r(Ae,")."),Ae.forEach(t),of=i(He),Ve=n(He,"P",{});var Lo=s(Ve);Ue=r(Lo,"Likewise, if your "),zi=n(Lo,"CODE",{});var Da=s(zi);Xn=r(Da,"NewModel"),Da.forEach(t),F8=r(Lo," is a subclass of "),zn=n(Lo,"A",{href:!0});var uP=s(zn);Wn=r(uP,"PreTrainedModel"),uP.forEach(t),T8=r(Lo,`, make sure its
`),Wi=n(Lo,"CODE",{});var tf=s(Wi);Qn=r(tf,"config_class"),tf.forEach(t),M8=r(Lo,` attribute is set to the same class you use when registering the model (here
`),Qi=n(Lo,"CODE",{});var pP=s(Qi);rf=r(pP,"NewModelConfig"),pP.forEach(t),ja=r(Lo,")."),Lo.forEach(t),this.h()},h(){c(zn,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(He,Ae){b(He,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,Ao),e(g,Oi),e(Oi,ef),e(g,mt),e(g,Vi),e(Vi,Xi),e(g,v8),b(He,of,Ae),b(He,Ve,Ae),e(Ve,Ue),e(Ve,zi),e(zi,Xn),e(Ve,F8),e(Ve,zn),e(zn,Wn),e(Ve,T8),e(Ve,Wi),e(Wi,Qn),e(Ve,M8),e(Ve,Qi),e(Qi,rf),e(Ve,ja)},d(He){He&&t(g),He&&t(of),He&&t(Ve)}}}function $aa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kaa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Saa($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Ao=s(u);f=r(Ao,"use_auth_token=True"),Ao.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function Raa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Paa($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Ao=s(u);f=r(Ao,"use_auth_token=True"),Ao.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function Baa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Iaa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Naa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qaa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jaa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Daa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Gaa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Oaa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Vaa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Xaa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zaa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Waa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Qaa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Uaa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Haa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Jaa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Yaa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Kaa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Zaa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ena($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ona($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ana($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVideoClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVideoClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ina($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function una($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _na($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Fna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Tna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Mna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ena($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Cna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ana($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Lna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $na($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Sna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Rna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Pna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Bna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ina($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Nna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Dna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Gna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSemanticSegmentation.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ona($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Vna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Xna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Wna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Qna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Una($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Hna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Jna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Yna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Kna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Zna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function esa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function osa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function asa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ssa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function isa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function csa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function msa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function usa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function psa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _sa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Fsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Tsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Msa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Esa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Csa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Asa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Lsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ysa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $sa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ksa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ssa($){let g,v,u,f,p,d,h,Ao,Oi,ef,mt,Vi,Xi,v8,of,Ve,Ue,zi,Xn,F8,zn,Wn,T8,Wi,Qn,M8,Qi,rf,ja,He,Ae,fP,Ui,gP,hP,Lo,Da,uP,tf,pP,WKe,EUe,Hi,af,ole,E8,QKe,rle,UKe,CUe,Un,HKe,tle,JKe,YKe,ale,KKe,ZKe,wUe,C8,AUe,_P,eZe,LUe,nf,yUe,Ji,sf,nle,w8,oZe,sle,rZe,xUe,yo,A8,tZe,L8,aZe,bP,nZe,sZe,lZe,y8,iZe,lle,dZe,cZe,mZe,kr,x8,fZe,ile,gZe,hZe,Yi,uZe,dle,pZe,_Ze,cle,bZe,vZe,FZe,A,lf,mle,TZe,MZe,vP,EZe,CZe,wZe,df,fle,AZe,LZe,FP,yZe,xZe,$Ze,cf,gle,kZe,SZe,TP,RZe,PZe,BZe,mf,hle,IZe,NZe,MP,qZe,jZe,DZe,ff,ule,GZe,OZe,EP,VZe,XZe,zZe,gf,ple,WZe,QZe,CP,UZe,HZe,JZe,hf,_le,YZe,KZe,wP,ZZe,eeo,oeo,uf,ble,reo,teo,AP,aeo,neo,seo,pf,vle,leo,ieo,LP,deo,ceo,meo,_f,Fle,feo,geo,yP,heo,ueo,peo,bf,Tle,_eo,beo,xP,veo,Feo,Teo,vf,Mle,Meo,Eeo,$P,Ceo,weo,Aeo,Ff,Ele,Leo,yeo,kP,xeo,$eo,keo,Tf,Cle,Seo,Reo,SP,Peo,Beo,Ieo,Mf,wle,Neo,qeo,RP,jeo,Deo,Geo,Ef,Ale,Oeo,Veo,PP,Xeo,zeo,Weo,Cf,Lle,Qeo,Ueo,BP,Heo,Jeo,Yeo,wf,yle,Keo,Zeo,IP,eoo,ooo,roo,Af,xle,too,aoo,NP,noo,soo,loo,Lf,$le,ioo,doo,qP,coo,moo,foo,yf,kle,goo,hoo,jP,uoo,poo,_oo,xf,Sle,boo,voo,DP,Foo,Too,Moo,$f,Rle,Eoo,Coo,GP,woo,Aoo,Loo,kf,Ple,yoo,xoo,OP,$oo,koo,Soo,Sf,Ble,Roo,Poo,VP,Boo,Ioo,Noo,Rf,Ile,qoo,joo,XP,Doo,Goo,Ooo,Pf,Nle,Voo,Xoo,zP,zoo,Woo,Qoo,Bf,qle,Uoo,Hoo,WP,Joo,Yoo,Koo,If,jle,Zoo,ero,QP,oro,rro,tro,Nf,Dle,aro,nro,UP,sro,lro,iro,qf,Gle,dro,cro,HP,mro,fro,gro,jf,Ole,hro,uro,JP,pro,_ro,bro,Df,Vle,vro,Fro,YP,Tro,Mro,Ero,Gf,Xle,Cro,wro,KP,Aro,Lro,yro,Of,zle,xro,$ro,ZP,kro,Sro,Rro,Vf,Wle,Pro,Bro,eB,Iro,Nro,qro,Xf,Qle,jro,Dro,oB,Gro,Oro,Vro,zf,Ule,Xro,zro,rB,Wro,Qro,Uro,Wf,Hle,Hro,Jro,tB,Yro,Kro,Zro,Qf,Jle,eto,oto,aB,rto,tto,ato,Uf,Yle,nto,sto,nB,lto,ito,dto,Hf,Kle,cto,mto,sB,fto,gto,hto,Jf,Zle,uto,pto,lB,_to,bto,vto,Yf,eie,Fto,Tto,iB,Mto,Eto,Cto,Kf,oie,wto,Ato,dB,Lto,yto,xto,Zf,rie,$to,kto,cB,Sto,Rto,Pto,eg,tie,Bto,Ito,mB,Nto,qto,jto,og,aie,Dto,Gto,fB,Oto,Vto,Xto,rg,nie,zto,Wto,gB,Qto,Uto,Hto,tg,sie,Jto,Yto,hB,Kto,Zto,eao,ag,lie,oao,rao,uB,tao,aao,nao,ng,iie,sao,lao,pB,iao,dao,cao,sg,die,mao,fao,_B,gao,hao,uao,lg,cie,pao,_ao,bB,bao,vao,Fao,ig,mie,Tao,Mao,vB,Eao,Cao,wao,dg,fie,Aao,Lao,FB,yao,xao,$ao,cg,gie,kao,Sao,TB,Rao,Pao,Bao,mg,hie,Iao,Nao,MB,qao,jao,Dao,fg,uie,Gao,Oao,EB,Vao,Xao,zao,gg,pie,Wao,Qao,CB,Uao,Hao,Jao,hg,_ie,Yao,Kao,wB,Zao,eno,ono,ug,bie,rno,tno,AB,ano,nno,sno,pg,vie,lno,ino,LB,dno,cno,mno,_g,Fie,fno,gno,yB,hno,uno,pno,bg,Tie,_no,bno,xB,vno,Fno,Tno,vg,Mie,Mno,Eno,$B,Cno,wno,Ano,Fg,Eie,Lno,yno,kB,xno,$no,kno,Tg,Cie,Sno,Rno,SB,Pno,Bno,Ino,Mg,wie,Nno,qno,RB,jno,Dno,Gno,Eg,Aie,Ono,Vno,PB,Xno,zno,Wno,Cg,Lie,Qno,Uno,BB,Hno,Jno,Yno,wg,yie,Kno,Zno,IB,eso,oso,rso,Ag,xie,tso,aso,NB,nso,sso,lso,Lg,$ie,iso,dso,qB,cso,mso,fso,yg,kie,gso,hso,jB,uso,pso,_so,xg,Sie,bso,vso,DB,Fso,Tso,Mso,$g,Rie,Eso,Cso,GB,wso,Aso,Lso,kg,Pie,yso,xso,OB,$so,kso,Sso,Sg,Bie,Rso,Pso,VB,Bso,Iso,Nso,Rg,Iie,qso,jso,XB,Dso,Gso,Oso,Pg,Nie,Vso,Xso,zB,zso,Wso,Qso,Bg,qie,Uso,Hso,WB,Jso,Yso,Kso,Ig,jie,Zso,elo,QB,olo,rlo,tlo,Ng,Die,alo,nlo,UB,slo,llo,ilo,qg,Gie,dlo,clo,HB,mlo,flo,glo,jg,Oie,hlo,ulo,JB,plo,_lo,blo,Dg,Vie,vlo,Flo,YB,Tlo,Mlo,Elo,Gg,Xie,Clo,wlo,KB,Alo,Llo,ylo,Og,zie,xlo,$lo,ZB,klo,Slo,Rlo,Vg,Wie,Plo,Blo,eI,Ilo,Nlo,qlo,Xg,Qie,jlo,Dlo,oI,Glo,Olo,Vlo,zg,Uie,Xlo,zlo,rI,Wlo,Qlo,Ulo,Wg,Hie,Hlo,Jlo,tI,Ylo,Klo,Zlo,Qg,Jie,eio,oio,aI,rio,tio,aio,Ug,Yie,nio,sio,nI,lio,iio,dio,Hg,Kie,cio,mio,sI,fio,gio,hio,Jg,Zie,uio,pio,lI,_io,bio,vio,Yg,ede,Fio,Tio,iI,Mio,Eio,Cio,Kg,ode,wio,Aio,dI,Lio,yio,xio,Zg,rde,$io,kio,cI,Sio,Rio,Pio,eh,tde,Bio,Iio,mI,Nio,qio,jio,oh,ade,Dio,Gio,fI,Oio,Vio,Xio,rh,nde,zio,Wio,gI,Qio,Uio,Hio,th,sde,Jio,Yio,hI,Kio,Zio,edo,ah,lde,odo,rdo,uI,tdo,ado,ndo,nh,ide,sdo,ldo,pI,ido,ddo,cdo,sh,dde,mdo,fdo,_I,gdo,hdo,udo,lh,cde,pdo,_do,bI,bdo,vdo,Fdo,ih,mde,Tdo,Mdo,vI,Edo,Cdo,wdo,dh,fde,Ado,Ldo,FI,ydo,xdo,$do,ch,gde,kdo,Sdo,TI,Rdo,Pdo,Bdo,mh,hde,Ido,Ndo,MI,qdo,jdo,Ddo,fh,ude,Gdo,Odo,EI,Vdo,Xdo,zdo,gh,pde,Wdo,Qdo,CI,Udo,Hdo,Jdo,hh,_de,Ydo,Kdo,wI,Zdo,eco,oco,uh,bde,rco,tco,AI,aco,nco,sco,ph,vde,lco,ico,LI,dco,cco,mco,_h,Fde,fco,gco,yI,hco,uco,pco,bh,Tde,_co,bco,xI,vco,Fco,Tco,vh,Mde,Mco,Eco,$I,Cco,wco,Aco,Fh,Ede,Lco,yco,kI,xco,$co,kco,Th,Cde,Sco,Rco,SI,Pco,Bco,Ico,Mh,Nco,Eh,$8,qco,wde,jco,$Ue,Ki,Ch,Ade,k8,Dco,Lde,Gco,kUe,xo,S8,Oco,R8,Vco,RI,Xco,zco,Wco,P8,Qco,yde,Uco,Hco,Jco,Sr,B8,Yco,xde,Kco,Zco,Ga,emo,$de,omo,rmo,kde,tmo,amo,Sde,nmo,smo,lmo,k,Hn,Rde,imo,dmo,PI,cmo,mmo,BI,fmo,gmo,hmo,Jn,Pde,umo,pmo,II,_mo,bmo,NI,vmo,Fmo,Tmo,Yn,Bde,Mmo,Emo,qI,Cmo,wmo,jI,Amo,Lmo,ymo,wh,Ide,xmo,$mo,DI,kmo,Smo,Rmo,Kn,Nde,Pmo,Bmo,GI,Imo,Nmo,OI,qmo,jmo,Dmo,Ah,qde,Gmo,Omo,VI,Vmo,Xmo,zmo,Lh,jde,Wmo,Qmo,XI,Umo,Hmo,Jmo,yh,Dde,Ymo,Kmo,zI,Zmo,efo,ofo,Zn,Gde,rfo,tfo,WI,afo,nfo,QI,sfo,lfo,ifo,es,Ode,dfo,cfo,UI,mfo,ffo,HI,gfo,hfo,ufo,os,Vde,pfo,_fo,JI,bfo,vfo,YI,Ffo,Tfo,Mfo,xh,Xde,Efo,Cfo,KI,wfo,Afo,Lfo,$h,zde,yfo,xfo,ZI,$fo,kfo,Sfo,kh,Wde,Rfo,Pfo,eN,Bfo,Ifo,Nfo,rs,Qde,qfo,jfo,oN,Dfo,Gfo,rN,Ofo,Vfo,Xfo,Sh,Ude,zfo,Wfo,tN,Qfo,Ufo,Hfo,ts,Hde,Jfo,Yfo,aN,Kfo,Zfo,nN,ego,ogo,rgo,as,Jde,tgo,ago,sN,ngo,sgo,lN,lgo,igo,dgo,ns,Yde,cgo,mgo,iN,fgo,ggo,dN,hgo,ugo,pgo,ss,Kde,_go,bgo,cN,vgo,Fgo,mN,Tgo,Mgo,Ego,Rh,Zde,Cgo,wgo,fN,Ago,Lgo,ygo,ls,ece,xgo,$go,gN,kgo,Sgo,hN,Rgo,Pgo,Bgo,is,oce,Igo,Ngo,uN,qgo,jgo,pN,Dgo,Ggo,Ogo,ds,rce,Vgo,Xgo,_N,zgo,Wgo,bN,Qgo,Ugo,Hgo,cs,tce,Jgo,Ygo,vN,Kgo,Zgo,FN,eho,oho,rho,ms,ace,tho,aho,TN,nho,sho,MN,lho,iho,dho,fs,nce,cho,mho,EN,fho,gho,CN,hho,uho,pho,Ph,sce,_ho,bho,wN,vho,Fho,Tho,gs,lce,Mho,Eho,AN,Cho,who,LN,Aho,Lho,yho,Bh,ice,xho,$ho,yN,kho,Sho,Rho,hs,dce,Pho,Bho,xN,Iho,Nho,$N,qho,jho,Dho,us,cce,Gho,Oho,kN,Vho,Xho,SN,zho,Who,Qho,ps,mce,Uho,Hho,RN,Jho,Yho,PN,Kho,Zho,euo,Ih,fce,ouo,ruo,BN,tuo,auo,nuo,_s,gce,suo,luo,IN,iuo,duo,NN,cuo,muo,fuo,bs,hce,guo,huo,qN,uuo,puo,jN,_uo,buo,vuo,vs,uce,Fuo,Tuo,DN,Muo,Euo,GN,Cuo,wuo,Auo,Nh,pce,Luo,yuo,ON,xuo,$uo,kuo,Fs,_ce,Suo,Ruo,VN,Puo,Buo,XN,Iuo,Nuo,quo,Ts,bce,juo,Duo,zN,Guo,Ouo,WN,Vuo,Xuo,zuo,Ms,vce,Wuo,Quo,QN,Uuo,Huo,UN,Juo,Yuo,Kuo,Es,Fce,Zuo,epo,HN,opo,rpo,JN,tpo,apo,npo,Cs,Tce,spo,lpo,YN,ipo,dpo,KN,cpo,mpo,fpo,ws,Mce,gpo,hpo,ZN,upo,ppo,eq,_po,bpo,vpo,As,Ece,Fpo,Tpo,oq,Mpo,Epo,rq,Cpo,wpo,Apo,Ls,Cce,Lpo,ypo,tq,xpo,$po,aq,kpo,Spo,Rpo,qh,wce,Ppo,Bpo,nq,Ipo,Npo,qpo,ys,Ace,jpo,Dpo,sq,Gpo,Opo,lq,Vpo,Xpo,zpo,jh,Lce,Wpo,Qpo,iq,Upo,Hpo,Jpo,Dh,yce,Ypo,Kpo,dq,Zpo,e_o,o_o,xs,xce,r_o,t_o,cq,a_o,n_o,mq,s_o,l_o,i_o,$s,$ce,d_o,c_o,fq,m_o,f_o,gq,g_o,h_o,u_o,ks,kce,p_o,__o,hq,b_o,v_o,uq,F_o,T_o,M_o,Gh,Sce,E_o,C_o,pq,w_o,A_o,L_o,Ss,Rce,y_o,x_o,_q,$_o,k_o,bq,S_o,R_o,P_o,Rs,Pce,B_o,I_o,vq,N_o,q_o,Fq,j_o,D_o,G_o,Ps,Bce,O_o,V_o,Tq,X_o,z_o,Mq,W_o,Q_o,U_o,Bs,Ice,H_o,J_o,Eq,Y_o,K_o,Cq,Z_o,e2o,o2o,Is,Nce,r2o,t2o,wq,a2o,n2o,Aq,s2o,l2o,i2o,Ns,qce,d2o,c2o,Lq,m2o,f2o,yq,g2o,h2o,u2o,qs,jce,p2o,_2o,xq,b2o,v2o,$q,F2o,T2o,M2o,js,Dce,E2o,C2o,kq,w2o,A2o,Sq,L2o,y2o,x2o,Oh,Gce,$2o,k2o,Rq,S2o,R2o,P2o,Ds,Oce,B2o,I2o,Pq,N2o,q2o,Bq,j2o,D2o,G2o,Gs,Vce,O2o,V2o,Iq,X2o,z2o,Nq,W2o,Q2o,U2o,Vh,Xce,H2o,J2o,qq,Y2o,K2o,Z2o,Xh,zce,ebo,obo,jq,rbo,tbo,abo,zh,Wce,nbo,sbo,Dq,lbo,ibo,dbo,Wh,Qce,cbo,mbo,Gq,fbo,gbo,hbo,Os,Uce,ubo,pbo,Oq,_bo,bbo,Vq,vbo,Fbo,Tbo,Qh,Hce,Mbo,Ebo,Xq,Cbo,wbo,Abo,Vs,Jce,Lbo,ybo,zq,xbo,$bo,Wq,kbo,Sbo,Rbo,Xs,Yce,Pbo,Bbo,Qq,Ibo,Nbo,Uq,qbo,jbo,Dbo,zs,Kce,Gbo,Obo,Hq,Vbo,Xbo,Jq,zbo,Wbo,Qbo,Ws,Zce,Ubo,Hbo,Yq,Jbo,Ybo,Kq,Kbo,Zbo,evo,Qs,eme,ovo,rvo,Zq,tvo,avo,ej,nvo,svo,lvo,Us,ome,ivo,dvo,oj,cvo,mvo,rj,fvo,gvo,hvo,Uh,rme,uvo,pvo,tj,_vo,bvo,vvo,Hh,tme,Fvo,Tvo,aj,Mvo,Evo,Cvo,Hs,ame,wvo,Avo,nj,Lvo,yvo,sj,xvo,$vo,kvo,Js,nme,Svo,Rvo,lj,Pvo,Bvo,ij,Ivo,Nvo,qvo,Ys,sme,jvo,Dvo,dj,Gvo,Ovo,cj,Vvo,Xvo,zvo,Jh,lme,Wvo,Qvo,mj,Uvo,Hvo,Jvo,Yh,ime,Yvo,Kvo,fj,Zvo,e1o,o1o,Kh,dme,r1o,t1o,gj,a1o,n1o,s1o,Ks,cme,l1o,i1o,hj,d1o,c1o,uj,m1o,f1o,g1o,Zs,mme,h1o,u1o,pj,p1o,_1o,_j,b1o,v1o,F1o,Zh,fme,T1o,M1o,bj,E1o,C1o,w1o,eu,gme,A1o,L1o,vj,y1o,x1o,$1o,ou,hme,k1o,S1o,Fj,R1o,P1o,B1o,el,ume,I1o,N1o,Tj,q1o,j1o,Mj,D1o,G1o,O1o,ru,pme,V1o,X1o,Ej,z1o,W1o,Q1o,tu,_me,U1o,H1o,Cj,J1o,Y1o,K1o,ol,bme,Z1o,eFo,wj,oFo,rFo,Aj,tFo,aFo,nFo,rl,vme,sFo,lFo,Lj,iFo,dFo,yj,cFo,mFo,fFo,tl,Fme,gFo,hFo,xj,uFo,pFo,$j,_Fo,bFo,vFo,al,Tme,FFo,TFo,kj,MFo,EFo,Sj,CFo,wFo,AFo,au,LFo,nu,I8,yFo,Mme,xFo,SUe,Zi,su,Eme,N8,$Fo,Cme,kFo,RUe,$o,q8,SFo,j8,RFo,Rj,PFo,BFo,IFo,D8,NFo,wme,qFo,jFo,DFo,Je,G8,GFo,Ame,OFo,VFo,Oa,XFo,Lme,zFo,WFo,yme,QFo,UFo,xme,HFo,JFo,YFo,Q,lu,$me,KFo,ZFo,Pj,eTo,oTo,rTo,iu,kme,tTo,aTo,Bj,nTo,sTo,lTo,du,Sme,iTo,dTo,Ij,cTo,mTo,fTo,cu,Rme,gTo,hTo,Nj,uTo,pTo,_To,mu,Pme,bTo,vTo,qj,FTo,TTo,MTo,fu,Bme,ETo,CTo,jj,wTo,ATo,LTo,gu,Ime,yTo,xTo,Dj,$To,kTo,STo,hu,Nme,RTo,PTo,Gj,BTo,ITo,NTo,uu,qme,qTo,jTo,Oj,DTo,GTo,OTo,pu,jme,VTo,XTo,Vj,zTo,WTo,QTo,_u,Dme,UTo,HTo,Xj,JTo,YTo,KTo,bu,Gme,ZTo,eMo,zj,oMo,rMo,tMo,vu,Ome,aMo,nMo,Wj,sMo,lMo,iMo,Fu,Vme,dMo,cMo,Qj,mMo,fMo,gMo,Tu,Xme,hMo,uMo,Uj,pMo,_Mo,bMo,Mu,zme,vMo,FMo,Hj,TMo,MMo,EMo,Eu,Wme,CMo,wMo,Jj,AMo,LMo,yMo,Cu,Qme,xMo,$Mo,Yj,kMo,SMo,RMo,wu,Ume,PMo,BMo,Kj,IMo,NMo,qMo,Au,Hme,jMo,DMo,Zj,GMo,OMo,VMo,Lu,Jme,XMo,zMo,eD,WMo,QMo,UMo,yu,Yme,HMo,JMo,oD,YMo,KMo,ZMo,xu,Kme,eEo,oEo,rD,rEo,tEo,aEo,$u,Zme,nEo,sEo,tD,lEo,iEo,dEo,ku,efe,cEo,mEo,aD,fEo,gEo,hEo,Su,ofe,uEo,pEo,nD,_Eo,bEo,vEo,Ru,rfe,FEo,TEo,sD,MEo,EEo,CEo,Pu,tfe,wEo,AEo,lD,LEo,yEo,xEo,Bu,afe,$Eo,kEo,iD,SEo,REo,PEo,Iu,nfe,BEo,IEo,dD,NEo,qEo,jEo,Nu,sfe,DEo,GEo,cD,OEo,VEo,XEo,qu,lfe,zEo,WEo,mD,QEo,UEo,HEo,ju,ife,JEo,YEo,fD,KEo,ZEo,e4o,Du,dfe,o4o,r4o,gD,t4o,a4o,n4o,Gu,cfe,s4o,l4o,hD,i4o,d4o,c4o,Ou,mfe,m4o,f4o,uD,g4o,h4o,u4o,Vu,ffe,p4o,_4o,pD,b4o,v4o,F4o,Xu,gfe,T4o,M4o,_D,E4o,C4o,w4o,zu,A4o,Wu,L4o,Qu,O8,y4o,hfe,x4o,PUe,ed,Uu,ufe,V8,$4o,pfe,k4o,BUe,ko,X8,S4o,z8,R4o,bD,P4o,B4o,I4o,W8,N4o,_fe,q4o,j4o,D4o,Ye,Q8,G4o,bfe,O4o,V4o,od,X4o,vfe,z4o,W4o,Ffe,Q4o,U4o,H4o,ce,Hu,Tfe,J4o,Y4o,vD,K4o,Z4o,eCo,Ju,Mfe,oCo,rCo,FD,tCo,aCo,nCo,Yu,Efe,sCo,lCo,TD,iCo,dCo,cCo,Ku,Cfe,mCo,fCo,MD,gCo,hCo,uCo,Zu,wfe,pCo,_Co,ED,bCo,vCo,FCo,ep,Afe,TCo,MCo,CD,ECo,CCo,wCo,op,Lfe,ACo,LCo,wD,yCo,xCo,$Co,rp,yfe,kCo,SCo,AD,RCo,PCo,BCo,tp,xfe,ICo,NCo,LD,qCo,jCo,DCo,ap,$fe,GCo,OCo,yD,VCo,XCo,zCo,np,kfe,WCo,QCo,xD,UCo,HCo,JCo,sp,Sfe,YCo,KCo,$D,ZCo,e3o,o3o,lp,Rfe,r3o,t3o,kD,a3o,n3o,s3o,ip,Pfe,l3o,i3o,SD,d3o,c3o,m3o,dp,Bfe,f3o,g3o,RD,h3o,u3o,p3o,cp,Ife,_3o,b3o,PD,v3o,F3o,T3o,mp,Nfe,M3o,E3o,BD,C3o,w3o,A3o,fp,qfe,L3o,y3o,ID,x3o,$3o,k3o,gp,jfe,S3o,R3o,ND,P3o,B3o,I3o,hp,Dfe,N3o,q3o,qD,j3o,D3o,G3o,up,O3o,pp,V3o,_p,U8,X3o,Gfe,z3o,IUe,rd,bp,Ofe,H8,W3o,Vfe,Q3o,NUe,So,J8,U3o,td,H3o,jD,J3o,Y3o,DD,K3o,Z3o,e5o,Y8,o5o,Xfe,r5o,t5o,a5o,ft,K8,n5o,zfe,s5o,l5o,ad,i5o,Wfe,d5o,c5o,GD,m5o,f5o,g5o,vp,h5o,Ke,Z8,u5o,Qfe,p5o,_5o,Va,b5o,Ufe,v5o,F5o,Hfe,T5o,M5o,Jfe,E5o,C5o,w5o,y,Fp,Yfe,A5o,L5o,OD,y5o,x5o,$5o,Tp,Kfe,k5o,S5o,VD,R5o,P5o,B5o,Mp,Zfe,I5o,N5o,XD,q5o,j5o,D5o,Ep,ege,G5o,O5o,zD,V5o,X5o,z5o,Cp,oge,W5o,Q5o,WD,U5o,H5o,J5o,wp,rge,Y5o,K5o,QD,Z5o,e0o,o0o,Ap,tge,r0o,t0o,UD,a0o,n0o,s0o,Lp,age,l0o,i0o,HD,d0o,c0o,m0o,yp,nge,f0o,g0o,JD,h0o,u0o,p0o,xp,sge,_0o,b0o,YD,v0o,F0o,T0o,$p,lge,M0o,E0o,KD,C0o,w0o,A0o,kp,ige,L0o,y0o,ZD,x0o,$0o,k0o,Sp,dge,S0o,R0o,eG,P0o,B0o,I0o,Rp,cge,N0o,q0o,oG,j0o,D0o,G0o,Pp,mge,O0o,V0o,rG,X0o,z0o,W0o,Bp,fge,Q0o,U0o,tG,H0o,J0o,Y0o,Ip,gge,K0o,Z0o,aG,ewo,owo,rwo,Np,hge,two,awo,nG,nwo,swo,lwo,qp,uge,iwo,dwo,sG,cwo,mwo,fwo,jp,pge,gwo,hwo,lG,uwo,pwo,_wo,Dp,_ge,bwo,vwo,iG,Fwo,Two,Mwo,Gp,bge,Ewo,Cwo,dG,wwo,Awo,Lwo,Op,vge,ywo,xwo,cG,$wo,kwo,Swo,Vp,Fge,Rwo,Pwo,mG,Bwo,Iwo,Nwo,Xp,Tge,qwo,jwo,fG,Dwo,Gwo,Owo,zp,Mge,Vwo,Xwo,gG,zwo,Wwo,Qwo,Wp,Ege,Uwo,Hwo,hG,Jwo,Ywo,Kwo,Qp,Cge,Zwo,e6o,uG,o6o,r6o,t6o,Up,wge,a6o,n6o,pG,s6o,l6o,i6o,Hp,Age,d6o,c6o,_G,m6o,f6o,g6o,Jp,Lge,h6o,u6o,bG,p6o,_6o,b6o,Yp,yge,v6o,F6o,vG,T6o,M6o,E6o,Kp,xge,C6o,w6o,FG,A6o,L6o,y6o,Zp,$ge,x6o,$6o,TG,k6o,S6o,R6o,e_,kge,P6o,B6o,MG,I6o,N6o,q6o,nl,Sge,j6o,D6o,EG,G6o,O6o,CG,V6o,X6o,z6o,o_,Rge,W6o,Q6o,wG,U6o,H6o,J6o,r_,Pge,Y6o,K6o,AG,Z6o,eAo,oAo,t_,Bge,rAo,tAo,LG,aAo,nAo,sAo,a_,Ige,lAo,iAo,yG,dAo,cAo,mAo,n_,Nge,fAo,gAo,xG,hAo,uAo,pAo,s_,qge,_Ao,bAo,$G,vAo,FAo,TAo,l_,jge,MAo,EAo,kG,CAo,wAo,AAo,i_,Dge,LAo,yAo,SG,xAo,$Ao,kAo,d_,Gge,SAo,RAo,RG,PAo,BAo,IAo,c_,Oge,NAo,qAo,PG,jAo,DAo,GAo,m_,Vge,OAo,VAo,BG,XAo,zAo,WAo,f_,Xge,QAo,UAo,IG,HAo,JAo,YAo,g_,zge,KAo,ZAo,NG,e7o,o7o,r7o,h_,Wge,t7o,a7o,qG,n7o,s7o,l7o,u_,Qge,i7o,d7o,jG,c7o,m7o,f7o,p_,Uge,g7o,h7o,DG,u7o,p7o,_7o,__,Hge,b7o,v7o,GG,F7o,T7o,M7o,b_,Jge,E7o,C7o,OG,w7o,A7o,L7o,v_,Yge,y7o,x7o,VG,$7o,k7o,S7o,F_,Kge,R7o,P7o,XG,B7o,I7o,N7o,T_,Zge,q7o,j7o,zG,D7o,G7o,O7o,M_,ehe,V7o,X7o,WG,z7o,W7o,Q7o,E_,ohe,U7o,H7o,QG,J7o,Y7o,K7o,C_,rhe,Z7o,eLo,UG,oLo,rLo,tLo,w_,the,aLo,nLo,HG,sLo,lLo,iLo,A_,ahe,dLo,cLo,JG,mLo,fLo,gLo,L_,nhe,hLo,uLo,YG,pLo,_Lo,bLo,y_,she,vLo,FLo,KG,TLo,MLo,ELo,x_,lhe,CLo,wLo,ZG,ALo,LLo,yLo,$_,ihe,xLo,$Lo,eO,kLo,SLo,RLo,k_,dhe,PLo,BLo,oO,ILo,NLo,qLo,S_,che,jLo,DLo,rO,GLo,OLo,VLo,R_,mhe,XLo,zLo,tO,WLo,QLo,ULo,P_,fhe,HLo,JLo,aO,YLo,KLo,ZLo,B_,ghe,eyo,oyo,nO,ryo,tyo,ayo,I_,hhe,nyo,syo,sO,lyo,iyo,dyo,N_,uhe,cyo,myo,lO,fyo,gyo,hyo,q_,phe,uyo,pyo,iO,_yo,byo,vyo,j_,_he,Fyo,Tyo,dO,Myo,Eyo,Cyo,D_,bhe,wyo,Ayo,cO,Lyo,yyo,xyo,G_,vhe,$yo,kyo,mO,Syo,Ryo,Pyo,O_,Fhe,Byo,Iyo,fO,Nyo,qyo,jyo,V_,The,Dyo,Gyo,gO,Oyo,Vyo,Xyo,X_,Mhe,zyo,Wyo,hO,Qyo,Uyo,Hyo,z_,Ehe,Jyo,Yyo,uO,Kyo,Zyo,e8o,W_,Che,o8o,r8o,pO,t8o,a8o,n8o,Q_,whe,s8o,l8o,_O,i8o,d8o,c8o,U_,Ahe,m8o,f8o,bO,g8o,h8o,u8o,H_,Lhe,p8o,_8o,vO,b8o,v8o,F8o,J_,yhe,T8o,M8o,FO,E8o,C8o,w8o,Y_,xhe,A8o,L8o,TO,y8o,x8o,$8o,K_,$he,k8o,S8o,MO,R8o,P8o,B8o,Z_,khe,I8o,N8o,EO,q8o,j8o,D8o,e2,She,G8o,O8o,CO,V8o,X8o,z8o,o2,Rhe,W8o,Q8o,wO,U8o,H8o,J8o,r2,Phe,Y8o,K8o,AO,Z8o,e9o,o9o,t2,Bhe,r9o,t9o,LO,a9o,n9o,s9o,a2,Ihe,l9o,i9o,yO,d9o,c9o,m9o,n2,Nhe,f9o,g9o,xO,h9o,u9o,p9o,s2,qhe,_9o,b9o,$O,v9o,F9o,T9o,l2,jhe,M9o,E9o,kO,C9o,w9o,A9o,i2,Dhe,L9o,y9o,SO,x9o,$9o,k9o,d2,Ghe,S9o,R9o,RO,P9o,B9o,I9o,c2,Ohe,N9o,q9o,PO,j9o,D9o,G9o,m2,Vhe,O9o,V9o,BO,X9o,z9o,W9o,f2,Xhe,Q9o,U9o,IO,H9o,J9o,Y9o,g2,zhe,K9o,Z9o,NO,exo,oxo,rxo,h2,Whe,txo,axo,qO,nxo,sxo,lxo,u2,Qhe,ixo,dxo,jO,cxo,mxo,fxo,p2,Uhe,gxo,hxo,DO,uxo,pxo,_xo,_2,Hhe,bxo,vxo,GO,Fxo,Txo,Mxo,b2,Jhe,Exo,Cxo,OO,wxo,Axo,Lxo,v2,Yhe,yxo,xxo,VO,$xo,kxo,Sxo,F2,Khe,Rxo,Pxo,XO,Bxo,Ixo,Nxo,T2,Zhe,qxo,jxo,zO,Dxo,Gxo,Oxo,M2,eue,Vxo,Xxo,WO,zxo,Wxo,Qxo,E2,oue,Uxo,Hxo,QO,Jxo,Yxo,Kxo,C2,rue,Zxo,e$o,UO,o$o,r$o,t$o,w2,tue,a$o,n$o,HO,s$o,l$o,i$o,A2,aue,d$o,c$o,JO,m$o,f$o,g$o,L2,h$o,nue,u$o,p$o,sue,_$o,b$o,y2,qUe,nd,x2,lue,e9,v$o,iue,F$o,jUe,Ro,o9,T$o,sd,M$o,YO,E$o,C$o,KO,w$o,A$o,L$o,r9,y$o,due,x$o,$$o,k$o,gt,t9,S$o,cue,R$o,P$o,ld,B$o,mue,I$o,N$o,ZO,q$o,j$o,D$o,$2,G$o,Ze,a9,O$o,fue,V$o,X$o,Xa,z$o,gue,W$o,Q$o,hue,U$o,H$o,uue,J$o,Y$o,K$o,G,k2,pue,Z$o,eko,eV,oko,rko,tko,S2,_ue,ako,nko,oV,sko,lko,iko,R2,bue,dko,cko,rV,mko,fko,gko,P2,vue,hko,uko,tV,pko,_ko,bko,B2,Fue,vko,Fko,aV,Tko,Mko,Eko,I2,Tue,Cko,wko,nV,Ako,Lko,yko,N2,Mue,xko,$ko,sV,kko,Sko,Rko,q2,Eue,Pko,Bko,lV,Iko,Nko,qko,j2,Cue,jko,Dko,iV,Gko,Oko,Vko,D2,wue,Xko,zko,dV,Wko,Qko,Uko,G2,Aue,Hko,Jko,cV,Yko,Kko,Zko,O2,Lue,eSo,oSo,mV,rSo,tSo,aSo,V2,yue,nSo,sSo,fV,lSo,iSo,dSo,X2,xue,cSo,mSo,gV,fSo,gSo,hSo,z2,$ue,uSo,pSo,hV,_So,bSo,vSo,W2,kue,FSo,TSo,uV,MSo,ESo,CSo,Q2,Sue,wSo,ASo,pV,LSo,ySo,xSo,U2,Rue,$So,kSo,_V,SSo,RSo,PSo,H2,Pue,BSo,ISo,bV,NSo,qSo,jSo,J2,Bue,DSo,GSo,vV,OSo,VSo,XSo,Y2,Iue,zSo,WSo,FV,QSo,USo,HSo,K2,Nue,JSo,YSo,TV,KSo,ZSo,eRo,Z2,que,oRo,rRo,MV,tRo,aRo,nRo,eb,jue,sRo,lRo,EV,iRo,dRo,cRo,ob,Due,mRo,fRo,CV,gRo,hRo,uRo,rb,Gue,pRo,_Ro,wV,bRo,vRo,FRo,tb,Oue,TRo,MRo,AV,ERo,CRo,wRo,ab,Vue,ARo,LRo,LV,yRo,xRo,$Ro,nb,Xue,kRo,SRo,yV,RRo,PRo,BRo,sb,zue,IRo,NRo,xV,qRo,jRo,DRo,lb,Wue,GRo,ORo,$V,VRo,XRo,zRo,ib,Que,WRo,QRo,kV,URo,HRo,JRo,db,Uue,YRo,KRo,SV,ZRo,ePo,oPo,cb,Hue,rPo,tPo,RV,aPo,nPo,sPo,mb,Jue,lPo,iPo,PV,dPo,cPo,mPo,fb,Yue,fPo,gPo,BV,hPo,uPo,pPo,gb,Kue,_Po,bPo,IV,vPo,FPo,TPo,hb,Zue,MPo,EPo,NV,CPo,wPo,APo,ub,epe,LPo,yPo,qV,xPo,$Po,kPo,pb,ope,SPo,RPo,jV,PPo,BPo,IPo,_b,rpe,NPo,qPo,DV,jPo,DPo,GPo,bb,tpe,OPo,VPo,GV,XPo,zPo,WPo,vb,ape,QPo,UPo,OV,HPo,JPo,YPo,Fb,npe,KPo,ZPo,VV,eBo,oBo,rBo,Tb,spe,tBo,aBo,XV,nBo,sBo,lBo,Mb,lpe,iBo,dBo,zV,cBo,mBo,fBo,Eb,ipe,gBo,hBo,WV,uBo,pBo,_Bo,Cb,bBo,dpe,vBo,FBo,cpe,TBo,MBo,wb,DUe,id,Ab,mpe,n9,EBo,fpe,CBo,GUe,Po,s9,wBo,dd,ABo,QV,LBo,yBo,UV,xBo,$Bo,kBo,l9,SBo,gpe,RBo,PBo,BBo,ht,i9,IBo,hpe,NBo,qBo,cd,jBo,upe,DBo,GBo,HV,OBo,VBo,XBo,Lb,zBo,eo,d9,WBo,ppe,QBo,UBo,za,HBo,_pe,JBo,YBo,bpe,KBo,ZBo,vpe,eIo,oIo,rIo,z,yb,Fpe,tIo,aIo,JV,nIo,sIo,lIo,xb,Tpe,iIo,dIo,YV,cIo,mIo,fIo,$b,Mpe,gIo,hIo,KV,uIo,pIo,_Io,kb,Epe,bIo,vIo,ZV,FIo,TIo,MIo,Sb,Cpe,EIo,CIo,eX,wIo,AIo,LIo,Rb,wpe,yIo,xIo,oX,$Io,kIo,SIo,Pb,Ape,RIo,PIo,rX,BIo,IIo,NIo,Bb,Lpe,qIo,jIo,tX,DIo,GIo,OIo,Ib,ype,VIo,XIo,aX,zIo,WIo,QIo,Nb,xpe,UIo,HIo,nX,JIo,YIo,KIo,qb,$pe,ZIo,eNo,sX,oNo,rNo,tNo,jb,kpe,aNo,nNo,lX,sNo,lNo,iNo,Db,Spe,dNo,cNo,iX,mNo,fNo,gNo,Gb,Rpe,hNo,uNo,dX,pNo,_No,bNo,Ob,Ppe,vNo,FNo,cX,TNo,MNo,ENo,Vb,Bpe,CNo,wNo,mX,ANo,LNo,yNo,Xb,Ipe,xNo,$No,fX,kNo,SNo,RNo,zb,Npe,PNo,BNo,gX,INo,NNo,qNo,Wb,qpe,jNo,DNo,hX,GNo,ONo,VNo,Qb,jpe,XNo,zNo,uX,WNo,QNo,UNo,Ub,Dpe,HNo,JNo,pX,YNo,KNo,ZNo,Hb,Gpe,eqo,oqo,_X,rqo,tqo,aqo,Jb,Ope,nqo,sqo,bX,lqo,iqo,dqo,Yb,Vpe,cqo,mqo,vX,fqo,gqo,hqo,Kb,Xpe,uqo,pqo,FX,_qo,bqo,vqo,Zb,zpe,Fqo,Tqo,TX,Mqo,Eqo,Cqo,ev,Wpe,wqo,Aqo,MX,Lqo,yqo,xqo,ov,Qpe,$qo,kqo,EX,Sqo,Rqo,Pqo,rv,Upe,Bqo,Iqo,CX,Nqo,qqo,jqo,tv,Hpe,Dqo,Gqo,wX,Oqo,Vqo,Xqo,av,Jpe,zqo,Wqo,AX,Qqo,Uqo,Hqo,nv,Ype,Jqo,Yqo,LX,Kqo,Zqo,ejo,sv,Kpe,ojo,rjo,yX,tjo,ajo,njo,lv,Zpe,sjo,ljo,xX,ijo,djo,cjo,iv,e_e,mjo,fjo,$X,gjo,hjo,ujo,dv,o_e,pjo,_jo,kX,bjo,vjo,Fjo,cv,r_e,Tjo,Mjo,SX,Ejo,Cjo,wjo,mv,t_e,Ajo,Ljo,RX,yjo,xjo,$jo,fv,a_e,kjo,Sjo,PX,Rjo,Pjo,Bjo,gv,n_e,Ijo,Njo,BX,qjo,jjo,Djo,hv,Gjo,s_e,Ojo,Vjo,l_e,Xjo,zjo,uv,OUe,md,pv,i_e,c9,Wjo,d_e,Qjo,VUe,Bo,m9,Ujo,fd,Hjo,IX,Jjo,Yjo,NX,Kjo,Zjo,eDo,f9,oDo,c_e,rDo,tDo,aDo,ut,g9,nDo,m_e,sDo,lDo,gd,iDo,f_e,dDo,cDo,qX,mDo,fDo,gDo,_v,hDo,oo,h9,uDo,g_e,pDo,_Do,Wa,bDo,h_e,vDo,FDo,u_e,TDo,MDo,p_e,EDo,CDo,wDo,U,bv,__e,ADo,LDo,jX,yDo,xDo,$Do,vv,b_e,kDo,SDo,DX,RDo,PDo,BDo,Fv,v_e,IDo,NDo,GX,qDo,jDo,DDo,Tv,F_e,GDo,ODo,OX,VDo,XDo,zDo,Mv,T_e,WDo,QDo,VX,UDo,HDo,JDo,Ev,M_e,YDo,KDo,XX,ZDo,eGo,oGo,Cv,E_e,rGo,tGo,zX,aGo,nGo,sGo,wv,C_e,lGo,iGo,WX,dGo,cGo,mGo,Av,w_e,fGo,gGo,QX,hGo,uGo,pGo,Lv,A_e,_Go,bGo,UX,vGo,FGo,TGo,yv,L_e,MGo,EGo,HX,CGo,wGo,AGo,xv,y_e,LGo,yGo,JX,xGo,$Go,kGo,$v,x_e,SGo,RGo,YX,PGo,BGo,IGo,kv,$_e,NGo,qGo,KX,jGo,DGo,GGo,Sv,k_e,OGo,VGo,ZX,XGo,zGo,WGo,Rv,S_e,QGo,UGo,ez,HGo,JGo,YGo,Pv,R_e,KGo,ZGo,oz,eOo,oOo,rOo,Bv,P_e,tOo,aOo,rz,nOo,sOo,lOo,Iv,B_e,iOo,dOo,tz,cOo,mOo,fOo,Nv,I_e,gOo,hOo,az,uOo,pOo,_Oo,qv,N_e,bOo,vOo,nz,FOo,TOo,MOo,jv,q_e,EOo,COo,sz,wOo,AOo,LOo,Dv,j_e,yOo,xOo,lz,$Oo,kOo,SOo,Gv,D_e,ROo,POo,iz,BOo,IOo,NOo,Ov,G_e,qOo,jOo,dz,DOo,GOo,OOo,Vv,O_e,VOo,XOo,cz,zOo,WOo,QOo,Xv,V_e,UOo,HOo,mz,JOo,YOo,KOo,zv,X_e,ZOo,eVo,fz,oVo,rVo,tVo,Wv,z_e,aVo,nVo,gz,sVo,lVo,iVo,Qv,W_e,dVo,cVo,hz,mVo,fVo,gVo,Uv,Q_e,hVo,uVo,uz,pVo,_Vo,bVo,Hv,U_e,vVo,FVo,pz,TVo,MVo,EVo,Jv,H_e,CVo,wVo,_z,AVo,LVo,yVo,Yv,J_e,xVo,$Vo,Y_e,kVo,SVo,RVo,Kv,K_e,PVo,BVo,bz,IVo,NVo,qVo,Zv,Z_e,jVo,DVo,vz,GVo,OVo,VVo,e1,e2e,XVo,zVo,Fz,WVo,QVo,UVo,o1,o2e,HVo,JVo,Tz,YVo,KVo,ZVo,r1,eXo,r2e,oXo,rXo,t2e,tXo,aXo,t1,XUe,hd,a1,a2e,u9,nXo,n2e,sXo,zUe,Io,p9,lXo,ud,iXo,Mz,dXo,cXo,Ez,mXo,fXo,gXo,_9,hXo,s2e,uXo,pXo,_Xo,pt,b9,bXo,l2e,vXo,FXo,pd,TXo,i2e,MXo,EXo,Cz,CXo,wXo,AXo,n1,LXo,ro,v9,yXo,d2e,xXo,$Xo,Qa,kXo,c2e,SXo,RXo,m2e,PXo,BXo,f2e,IXo,NXo,qXo,he,s1,g2e,jXo,DXo,wz,GXo,OXo,VXo,l1,h2e,XXo,zXo,Az,WXo,QXo,UXo,i1,u2e,HXo,JXo,Lz,YXo,KXo,ZXo,d1,p2e,ezo,ozo,yz,rzo,tzo,azo,c1,_2e,nzo,szo,xz,lzo,izo,dzo,m1,b2e,czo,mzo,$z,fzo,gzo,hzo,f1,v2e,uzo,pzo,kz,_zo,bzo,vzo,g1,F2e,Fzo,Tzo,Sz,Mzo,Ezo,Czo,h1,T2e,wzo,Azo,Rz,Lzo,yzo,xzo,u1,M2e,$zo,kzo,Pz,Szo,Rzo,Pzo,p1,E2e,Bzo,Izo,Bz,Nzo,qzo,jzo,_1,C2e,Dzo,Gzo,Iz,Ozo,Vzo,Xzo,b1,w2e,zzo,Wzo,Nz,Qzo,Uzo,Hzo,v1,A2e,Jzo,Yzo,qz,Kzo,Zzo,eWo,F1,L2e,oWo,rWo,jz,tWo,aWo,nWo,T1,y2e,sWo,lWo,Dz,iWo,dWo,cWo,M1,x2e,mWo,fWo,Gz,gWo,hWo,uWo,E1,$2e,pWo,_Wo,Oz,bWo,vWo,FWo,C1,k2e,TWo,MWo,Vz,EWo,CWo,wWo,w1,AWo,S2e,LWo,yWo,R2e,xWo,$Wo,A1,WUe,_d,L1,P2e,F9,kWo,B2e,SWo,QUe,No,T9,RWo,bd,PWo,Xz,BWo,IWo,zz,NWo,qWo,jWo,M9,DWo,I2e,GWo,OWo,VWo,_t,E9,XWo,N2e,zWo,WWo,vd,QWo,q2e,UWo,HWo,Wz,JWo,YWo,KWo,y1,ZWo,to,C9,eQo,j2e,oQo,rQo,Ua,tQo,D2e,aQo,nQo,G2e,sQo,lQo,O2e,iQo,dQo,cQo,j,x1,V2e,mQo,fQo,Qz,gQo,hQo,uQo,$1,X2e,pQo,_Qo,Uz,bQo,vQo,FQo,k1,z2e,TQo,MQo,Hz,EQo,CQo,wQo,S1,W2e,AQo,LQo,Jz,yQo,xQo,$Qo,R1,Q2e,kQo,SQo,Yz,RQo,PQo,BQo,P1,U2e,IQo,NQo,Kz,qQo,jQo,DQo,B1,H2e,GQo,OQo,Zz,VQo,XQo,zQo,I1,J2e,WQo,QQo,eW,UQo,HQo,JQo,N1,Y2e,YQo,KQo,oW,ZQo,eUo,oUo,q1,K2e,rUo,tUo,rW,aUo,nUo,sUo,j1,Z2e,lUo,iUo,tW,dUo,cUo,mUo,D1,ebe,fUo,gUo,aW,hUo,uUo,pUo,G1,obe,_Uo,bUo,nW,vUo,FUo,TUo,O1,rbe,MUo,EUo,sW,CUo,wUo,AUo,V1,tbe,LUo,yUo,lW,xUo,$Uo,kUo,X1,abe,SUo,RUo,iW,PUo,BUo,IUo,z1,nbe,NUo,qUo,dW,jUo,DUo,GUo,W1,sbe,OUo,VUo,cW,XUo,zUo,WUo,Q1,lbe,QUo,UUo,mW,HUo,JUo,YUo,U1,ibe,KUo,ZUo,fW,eHo,oHo,rHo,H1,dbe,tHo,aHo,gW,nHo,sHo,lHo,J1,cbe,iHo,dHo,hW,cHo,mHo,fHo,Y1,mbe,gHo,hHo,uW,uHo,pHo,_Ho,K1,fbe,bHo,vHo,pW,FHo,THo,MHo,Z1,gbe,EHo,CHo,_W,wHo,AHo,LHo,eF,hbe,yHo,xHo,bW,$Ho,kHo,SHo,oF,ube,RHo,PHo,vW,BHo,IHo,NHo,rF,pbe,qHo,jHo,FW,DHo,GHo,OHo,tF,_be,VHo,XHo,TW,zHo,WHo,QHo,aF,bbe,UHo,HHo,MW,JHo,YHo,KHo,nF,vbe,ZHo,eJo,EW,oJo,rJo,tJo,sF,Fbe,aJo,nJo,CW,sJo,lJo,iJo,lF,Tbe,dJo,cJo,wW,mJo,fJo,gJo,iF,Mbe,hJo,uJo,AW,pJo,_Jo,bJo,dF,Ebe,vJo,FJo,LW,TJo,MJo,EJo,cF,Cbe,CJo,wJo,yW,AJo,LJo,yJo,mF,wbe,xJo,$Jo,xW,kJo,SJo,RJo,fF,Abe,PJo,BJo,$W,IJo,NJo,qJo,gF,Lbe,jJo,DJo,kW,GJo,OJo,VJo,hF,ybe,XJo,zJo,SW,WJo,QJo,UJo,uF,xbe,HJo,JJo,RW,YJo,KJo,ZJo,pF,$be,eYo,oYo,PW,rYo,tYo,aYo,_F,kbe,nYo,sYo,BW,lYo,iYo,dYo,bF,Sbe,cYo,mYo,IW,fYo,gYo,hYo,vF,Rbe,uYo,pYo,NW,_Yo,bYo,vYo,FF,Pbe,FYo,TYo,qW,MYo,EYo,CYo,TF,Bbe,wYo,AYo,jW,LYo,yYo,xYo,MF,Ibe,$Yo,kYo,DW,SYo,RYo,PYo,EF,Nbe,BYo,IYo,GW,NYo,qYo,jYo,CF,qbe,DYo,GYo,OW,OYo,VYo,XYo,wF,jbe,zYo,WYo,VW,QYo,UYo,HYo,AF,Dbe,JYo,YYo,XW,KYo,ZYo,eKo,LF,oKo,Gbe,rKo,tKo,Obe,aKo,nKo,yF,UUe,Fd,xF,Vbe,w9,sKo,Xbe,lKo,HUe,qo,A9,iKo,Td,dKo,zW,cKo,mKo,WW,fKo,gKo,hKo,L9,uKo,zbe,pKo,_Ko,bKo,bt,y9,vKo,Wbe,FKo,TKo,Md,MKo,Qbe,EKo,CKo,QW,wKo,AKo,LKo,$F,yKo,ao,x9,xKo,Ube,$Ko,kKo,Ha,SKo,Hbe,RKo,PKo,Jbe,BKo,IKo,Ybe,NKo,qKo,jKo,Z,kF,Kbe,DKo,GKo,UW,OKo,VKo,XKo,SF,Zbe,zKo,WKo,HW,QKo,UKo,HKo,RF,eve,JKo,YKo,JW,KKo,ZKo,eZo,PF,ove,oZo,rZo,YW,tZo,aZo,nZo,BF,rve,sZo,lZo,KW,iZo,dZo,cZo,IF,tve,mZo,fZo,ZW,gZo,hZo,uZo,NF,ave,pZo,_Zo,eQ,bZo,vZo,FZo,qF,nve,TZo,MZo,oQ,EZo,CZo,wZo,jF,sve,AZo,LZo,rQ,yZo,xZo,$Zo,DF,lve,kZo,SZo,tQ,RZo,PZo,BZo,GF,ive,IZo,NZo,aQ,qZo,jZo,DZo,OF,dve,GZo,OZo,nQ,VZo,XZo,zZo,VF,cve,WZo,QZo,sQ,UZo,HZo,JZo,XF,mve,YZo,KZo,lQ,ZZo,eer,oer,zF,fve,rer,ter,iQ,aer,ner,ser,WF,gve,ler,ier,dQ,der,cer,mer,QF,hve,fer,ger,cQ,her,uer,per,UF,uve,_er,ber,mQ,ver,Fer,Ter,HF,pve,Mer,Eer,fQ,Cer,wer,Aer,JF,_ve,Ler,yer,gQ,xer,$er,ker,YF,bve,Ser,Rer,hQ,Per,Ber,Ier,KF,vve,Ner,qer,uQ,jer,Der,Ger,ZF,Fve,Oer,Ver,pQ,Xer,zer,Wer,eT,Tve,Qer,Uer,_Q,Her,Jer,Yer,oT,Mve,Ker,Zer,bQ,eor,oor,ror,rT,Eve,tor,aor,vQ,nor,sor,lor,tT,Cve,ior,dor,FQ,cor,mor,gor,aT,wve,hor,uor,TQ,por,_or,bor,nT,Ave,vor,For,MQ,Tor,Mor,Eor,sT,Lve,Cor,wor,EQ,Aor,Lor,yor,lT,yve,xor,$or,CQ,kor,Sor,Ror,iT,Por,xve,Bor,Ior,$ve,Nor,qor,dT,JUe,Ed,cT,kve,$9,jor,Sve,Dor,YUe,jo,k9,Gor,Cd,Oor,wQ,Vor,Xor,AQ,zor,Wor,Qor,S9,Uor,Rve,Hor,Jor,Yor,vt,R9,Kor,Pve,Zor,err,wd,orr,Bve,rrr,trr,LQ,arr,nrr,srr,mT,lrr,no,P9,irr,Ive,drr,crr,Ja,mrr,Nve,frr,grr,qve,hrr,urr,jve,prr,_rr,brr,Do,fT,Dve,vrr,Frr,yQ,Trr,Mrr,Err,gT,Gve,Crr,wrr,xQ,Arr,Lrr,yrr,hT,Ove,xrr,$rr,$Q,krr,Srr,Rrr,uT,Vve,Prr,Brr,kQ,Irr,Nrr,qrr,pT,Xve,jrr,Drr,SQ,Grr,Orr,Vrr,_T,zve,Xrr,zrr,RQ,Wrr,Qrr,Urr,bT,Hrr,Wve,Jrr,Yrr,Qve,Krr,Zrr,vT,KUe,Ad,FT,Uve,B9,etr,Hve,otr,ZUe,Go,I9,rtr,Ld,ttr,PQ,atr,ntr,BQ,str,ltr,itr,N9,dtr,Jve,ctr,mtr,ftr,Ft,q9,gtr,Yve,htr,utr,yd,ptr,Kve,_tr,btr,IQ,vtr,Ftr,Ttr,TT,Mtr,so,j9,Etr,Zve,Ctr,wtr,Ya,Atr,e1e,Ltr,ytr,o1e,xtr,$tr,r1e,ktr,Str,Rtr,H,MT,t1e,Ptr,Btr,NQ,Itr,Ntr,qtr,ET,a1e,jtr,Dtr,qQ,Gtr,Otr,Vtr,CT,n1e,Xtr,ztr,jQ,Wtr,Qtr,Utr,wT,s1e,Htr,Jtr,DQ,Ytr,Ktr,Ztr,AT,l1e,ear,oar,GQ,rar,tar,aar,LT,i1e,nar,sar,OQ,lar,iar,dar,yT,d1e,car,mar,VQ,far,gar,har,xT,c1e,uar,par,XQ,_ar,bar,Far,$T,m1e,Tar,Mar,zQ,Ear,Car,war,kT,f1e,Aar,Lar,WQ,yar,xar,$ar,ST,g1e,kar,Sar,QQ,Rar,Par,Bar,RT,h1e,Iar,Nar,UQ,qar,jar,Dar,PT,u1e,Gar,Oar,HQ,Var,Xar,zar,BT,p1e,War,Qar,JQ,Uar,Har,Jar,IT,_1e,Yar,Kar,YQ,Zar,enr,onr,NT,b1e,rnr,tnr,KQ,anr,nnr,snr,qT,v1e,lnr,inr,ZQ,dnr,cnr,mnr,jT,F1e,fnr,gnr,eU,hnr,unr,pnr,DT,T1e,_nr,bnr,oU,vnr,Fnr,Tnr,GT,M1e,Mnr,Enr,rU,Cnr,wnr,Anr,OT,E1e,Lnr,ynr,tU,xnr,$nr,knr,VT,C1e,Snr,Rnr,aU,Pnr,Bnr,Inr,XT,w1e,Nnr,qnr,nU,jnr,Dnr,Gnr,zT,A1e,Onr,Vnr,sU,Xnr,znr,Wnr,WT,L1e,Qnr,Unr,lU,Hnr,Jnr,Ynr,QT,y1e,Knr,Znr,iU,esr,osr,rsr,UT,x1e,tsr,asr,dU,nsr,ssr,lsr,HT,$1e,isr,dsr,cU,csr,msr,fsr,JT,k1e,gsr,hsr,mU,usr,psr,_sr,YT,S1e,bsr,vsr,fU,Fsr,Tsr,Msr,KT,R1e,Esr,Csr,gU,wsr,Asr,Lsr,ZT,P1e,ysr,xsr,hU,$sr,ksr,Ssr,eM,B1e,Rsr,Psr,uU,Bsr,Isr,Nsr,oM,I1e,qsr,jsr,pU,Dsr,Gsr,Osr,rM,N1e,Vsr,Xsr,_U,zsr,Wsr,Qsr,tM,q1e,Usr,Hsr,bU,Jsr,Ysr,Ksr,aM,j1e,Zsr,elr,vU,olr,rlr,tlr,nM,alr,D1e,nlr,slr,G1e,llr,ilr,sM,eHe,xd,lM,O1e,D9,dlr,V1e,clr,oHe,Oo,G9,mlr,$d,flr,FU,glr,hlr,TU,ulr,plr,_lr,O9,blr,X1e,vlr,Flr,Tlr,Tt,V9,Mlr,z1e,Elr,Clr,kd,wlr,W1e,Alr,Llr,MU,ylr,xlr,$lr,iM,klr,lo,X9,Slr,Q1e,Rlr,Plr,Ka,Blr,U1e,Ilr,Nlr,H1e,qlr,jlr,J1e,Dlr,Glr,Olr,V,dM,Y1e,Vlr,Xlr,EU,zlr,Wlr,Qlr,cM,K1e,Ulr,Hlr,CU,Jlr,Ylr,Klr,mM,Z1e,Zlr,eir,wU,oir,rir,tir,fM,eFe,air,nir,AU,sir,lir,iir,gM,oFe,dir,cir,LU,mir,fir,gir,hM,rFe,hir,uir,yU,pir,_ir,bir,uM,tFe,vir,Fir,xU,Tir,Mir,Eir,pM,aFe,Cir,wir,$U,Air,Lir,yir,_M,nFe,xir,$ir,kU,kir,Sir,Rir,bM,sFe,Pir,Bir,SU,Iir,Nir,qir,vM,lFe,jir,Dir,RU,Gir,Oir,Vir,FM,iFe,Xir,zir,PU,Wir,Qir,Uir,TM,dFe,Hir,Jir,BU,Yir,Kir,Zir,MM,cFe,edr,odr,IU,rdr,tdr,adr,EM,mFe,ndr,sdr,NU,ldr,idr,ddr,CM,fFe,cdr,mdr,qU,fdr,gdr,hdr,wM,gFe,udr,pdr,jU,_dr,bdr,vdr,AM,hFe,Fdr,Tdr,DU,Mdr,Edr,Cdr,LM,uFe,wdr,Adr,GU,Ldr,ydr,xdr,yM,pFe,$dr,kdr,OU,Sdr,Rdr,Pdr,xM,_Fe,Bdr,Idr,VU,Ndr,qdr,jdr,$M,bFe,Ddr,Gdr,XU,Odr,Vdr,Xdr,kM,vFe,zdr,Wdr,zU,Qdr,Udr,Hdr,SM,FFe,Jdr,Ydr,WU,Kdr,Zdr,ecr,RM,TFe,ocr,rcr,QU,tcr,acr,ncr,PM,MFe,scr,lcr,UU,icr,dcr,ccr,BM,EFe,mcr,fcr,HU,gcr,hcr,ucr,IM,CFe,pcr,_cr,JU,bcr,vcr,Fcr,NM,wFe,Tcr,Mcr,YU,Ecr,Ccr,wcr,qM,AFe,Acr,Lcr,KU,ycr,xcr,$cr,jM,LFe,kcr,Scr,ZU,Rcr,Pcr,Bcr,DM,yFe,Icr,Ncr,eH,qcr,jcr,Dcr,GM,xFe,Gcr,Ocr,oH,Vcr,Xcr,zcr,OM,$Fe,Wcr,Qcr,rH,Ucr,Hcr,Jcr,VM,kFe,Ycr,Kcr,tH,Zcr,emr,omr,XM,SFe,rmr,tmr,aH,amr,nmr,smr,zM,RFe,lmr,imr,nH,dmr,cmr,mmr,WM,PFe,fmr,gmr,sH,hmr,umr,pmr,QM,BFe,_mr,bmr,lH,vmr,Fmr,Tmr,UM,IFe,Mmr,Emr,iH,Cmr,wmr,Amr,HM,NFe,Lmr,ymr,dH,xmr,$mr,kmr,JM,qFe,Smr,Rmr,cH,Pmr,Bmr,Imr,YM,jFe,Nmr,qmr,mH,jmr,Dmr,Gmr,KM,Omr,DFe,Vmr,Xmr,GFe,zmr,Wmr,ZM,rHe,Sd,eE,OFe,z9,Qmr,VFe,Umr,tHe,Vo,W9,Hmr,Rd,Jmr,fH,Ymr,Kmr,gH,Zmr,efr,ofr,Q9,rfr,XFe,tfr,afr,nfr,Mt,U9,sfr,zFe,lfr,ifr,Pd,dfr,WFe,cfr,mfr,hH,ffr,gfr,hfr,oE,ufr,io,H9,pfr,QFe,_fr,bfr,Za,vfr,UFe,Ffr,Tfr,HFe,Mfr,Efr,JFe,Cfr,wfr,Afr,YFe,rE,KFe,Lfr,yfr,uH,xfr,$fr,kfr,tE,Sfr,ZFe,Rfr,Pfr,eTe,Bfr,Ifr,aE,aHe,Bd,nE,oTe,J9,Nfr,rTe,qfr,nHe,Xo,Y9,jfr,Id,Dfr,pH,Gfr,Ofr,_H,Vfr,Xfr,zfr,K9,Wfr,tTe,Qfr,Ufr,Hfr,Et,Z9,Jfr,aTe,Yfr,Kfr,Nd,Zfr,nTe,egr,ogr,bH,rgr,tgr,agr,sE,ngr,co,ex,sgr,sTe,lgr,igr,en,dgr,lTe,cgr,mgr,iTe,fgr,ggr,dTe,hgr,ugr,pgr,be,lE,cTe,_gr,bgr,vH,vgr,Fgr,Tgr,iE,mTe,Mgr,Egr,FH,Cgr,wgr,Agr,dE,fTe,Lgr,ygr,TH,xgr,$gr,kgr,cE,gTe,Sgr,Rgr,MH,Pgr,Bgr,Igr,sl,hTe,Ngr,qgr,EH,jgr,Dgr,CH,Ggr,Ogr,Vgr,mE,uTe,Xgr,zgr,wH,Wgr,Qgr,Ugr,ll,pTe,Hgr,Jgr,AH,Ygr,Kgr,LH,Zgr,ehr,ohr,fE,_Te,rhr,thr,yH,ahr,nhr,shr,Ct,bTe,lhr,ihr,xH,dhr,chr,$H,mhr,fhr,kH,ghr,hhr,uhr,gE,vTe,phr,_hr,SH,bhr,vhr,Fhr,hE,FTe,Thr,Mhr,RH,Ehr,Chr,whr,uE,TTe,Ahr,Lhr,PH,yhr,xhr,$hr,pE,MTe,khr,Shr,BH,Rhr,Phr,Bhr,_E,ETe,Ihr,Nhr,IH,qhr,jhr,Dhr,bE,CTe,Ghr,Ohr,NH,Vhr,Xhr,zhr,vE,wTe,Whr,Qhr,qH,Uhr,Hhr,Jhr,FE,ATe,Yhr,Khr,jH,Zhr,eur,our,TE,rur,LTe,tur,aur,yTe,nur,sur,ME,sHe,qd,EE,xTe,ox,lur,$Te,iur,lHe,zo,rx,dur,jd,cur,DH,mur,fur,GH,gur,hur,uur,tx,pur,kTe,_ur,bur,vur,wt,ax,Fur,STe,Tur,Mur,Dd,Eur,RTe,Cur,wur,OH,Aur,Lur,yur,CE,xur,mo,nx,$ur,PTe,kur,Sur,on,Rur,BTe,Pur,Bur,ITe,Iur,Nur,NTe,qur,jur,Dur,qTe,wE,jTe,Gur,Our,VH,Vur,Xur,zur,AE,Wur,DTe,Qur,Uur,GTe,Hur,Jur,LE,iHe,Gd,yE,OTe,sx,Yur,VTe,Kur,dHe,Wo,lx,Zur,Od,epr,XH,opr,rpr,zH,tpr,apr,npr,ix,spr,XTe,lpr,ipr,dpr,At,dx,cpr,zTe,mpr,fpr,Vd,gpr,WTe,hpr,upr,WH,ppr,_pr,bpr,xE,vpr,fo,cx,Fpr,QTe,Tpr,Mpr,rn,Epr,UTe,Cpr,wpr,HTe,Apr,Lpr,JTe,ypr,xpr,$pr,YTe,$E,KTe,kpr,Spr,QH,Rpr,Ppr,Bpr,kE,Ipr,ZTe,Npr,qpr,eMe,jpr,Dpr,SE,cHe,Xd,RE,oMe,mx,Gpr,rMe,Opr,mHe,Qo,fx,Vpr,zd,Xpr,UH,zpr,Wpr,HH,Qpr,Upr,Hpr,gx,Jpr,tMe,Ypr,Kpr,Zpr,Lt,hx,e_r,aMe,o_r,r_r,Wd,t_r,nMe,a_r,n_r,JH,s_r,l_r,i_r,PE,d_r,go,ux,c_r,sMe,m_r,f_r,tn,g_r,lMe,h_r,u_r,iMe,p_r,__r,dMe,b_r,v_r,F_r,cMe,BE,mMe,T_r,M_r,YH,E_r,C_r,w_r,IE,A_r,fMe,L_r,y_r,gMe,x_r,$_r,NE,fHe,Qd,qE,hMe,px,k_r,uMe,S_r,gHe,Uo,_x,R_r,Ud,P_r,KH,B_r,I_r,ZH,N_r,q_r,j_r,bx,D_r,pMe,G_r,O_r,V_r,yt,vx,X_r,_Me,z_r,W_r,Hd,Q_r,bMe,U_r,H_r,eJ,J_r,Y_r,K_r,jE,Z_r,ho,Fx,e2r,vMe,o2r,r2r,an,t2r,FMe,a2r,n2r,TMe,s2r,l2r,MMe,i2r,d2r,c2r,Pe,DE,EMe,m2r,f2r,oJ,g2r,h2r,u2r,GE,CMe,p2r,_2r,rJ,b2r,v2r,F2r,OE,wMe,T2r,M2r,tJ,E2r,C2r,w2r,VE,AMe,A2r,L2r,aJ,y2r,x2r,$2r,XE,LMe,k2r,S2r,nJ,R2r,P2r,B2r,zE,yMe,I2r,N2r,sJ,q2r,j2r,D2r,WE,xMe,G2r,O2r,lJ,V2r,X2r,z2r,QE,$Me,W2r,Q2r,iJ,U2r,H2r,J2r,UE,kMe,Y2r,K2r,dJ,Z2r,ebr,obr,HE,rbr,SMe,tbr,abr,RMe,nbr,sbr,JE,hHe,Jd,YE,PMe,Tx,lbr,BMe,ibr,uHe,Ho,Mx,dbr,Yd,cbr,cJ,mbr,fbr,mJ,gbr,hbr,ubr,Ex,pbr,IMe,_br,bbr,vbr,xt,Cx,Fbr,NMe,Tbr,Mbr,Kd,Ebr,qMe,Cbr,wbr,fJ,Abr,Lbr,ybr,KE,xbr,uo,wx,$br,jMe,kbr,Sbr,nn,Rbr,DMe,Pbr,Bbr,GMe,Ibr,Nbr,OMe,qbr,jbr,Dbr,st,ZE,VMe,Gbr,Obr,gJ,Vbr,Xbr,zbr,e4,XMe,Wbr,Qbr,hJ,Ubr,Hbr,Jbr,o4,zMe,Ybr,Kbr,uJ,Zbr,evr,ovr,r4,WMe,rvr,tvr,pJ,avr,nvr,svr,t4,QMe,lvr,ivr,_J,dvr,cvr,mvr,a4,fvr,UMe,gvr,hvr,HMe,uvr,pvr,n4,pHe,Zd,s4,JMe,Ax,_vr,YMe,bvr,_He,Jo,Lx,vvr,ec,Fvr,bJ,Tvr,Mvr,vJ,Evr,Cvr,wvr,yx,Avr,KMe,Lvr,yvr,xvr,$t,xx,$vr,ZMe,kvr,Svr,oc,Rvr,eEe,Pvr,Bvr,FJ,Ivr,Nvr,qvr,l4,jvr,po,$x,Dvr,oEe,Gvr,Ovr,sn,Vvr,rEe,Xvr,zvr,tEe,Wvr,Qvr,aEe,Uvr,Hvr,Jvr,Le,i4,nEe,Yvr,Kvr,TJ,Zvr,e1r,o1r,d4,sEe,r1r,t1r,MJ,a1r,n1r,s1r,c4,lEe,l1r,i1r,EJ,d1r,c1r,m1r,m4,iEe,f1r,g1r,CJ,h1r,u1r,p1r,f4,dEe,_1r,b1r,wJ,v1r,F1r,T1r,g4,cEe,M1r,E1r,AJ,C1r,w1r,A1r,h4,mEe,L1r,y1r,LJ,x1r,$1r,k1r,u4,fEe,S1r,R1r,yJ,P1r,B1r,I1r,p4,gEe,N1r,q1r,xJ,j1r,D1r,G1r,_4,hEe,O1r,V1r,$J,X1r,z1r,W1r,b4,Q1r,uEe,U1r,H1r,pEe,J1r,Y1r,v4,bHe,rc,F4,_Ee,kx,K1r,bEe,Z1r,vHe,Yo,Sx,eFr,tc,oFr,kJ,rFr,tFr,SJ,aFr,nFr,sFr,Rx,lFr,vEe,iFr,dFr,cFr,kt,Px,mFr,FEe,fFr,gFr,ac,hFr,TEe,uFr,pFr,RJ,_Fr,bFr,vFr,T4,FFr,_o,Bx,TFr,MEe,MFr,EFr,ln,CFr,EEe,wFr,AFr,CEe,LFr,yFr,wEe,xFr,$Fr,kFr,Ix,M4,AEe,SFr,RFr,PJ,PFr,BFr,IFr,E4,LEe,NFr,qFr,BJ,jFr,DFr,GFr,C4,OFr,yEe,VFr,XFr,xEe,zFr,WFr,w4,FHe,nc,A4,$Ee,Nx,QFr,kEe,UFr,THe,Ko,qx,HFr,sc,JFr,IJ,YFr,KFr,NJ,ZFr,eTr,oTr,jx,rTr,SEe,tTr,aTr,nTr,St,Dx,sTr,REe,lTr,iTr,lc,dTr,PEe,cTr,mTr,qJ,fTr,gTr,hTr,L4,uTr,bo,Gx,pTr,BEe,_Tr,bTr,dn,vTr,IEe,FTr,TTr,NEe,MTr,ETr,qEe,CTr,wTr,ATr,lt,y4,jEe,LTr,yTr,jJ,xTr,$Tr,kTr,x4,DEe,STr,RTr,DJ,PTr,BTr,ITr,$4,GEe,NTr,qTr,GJ,jTr,DTr,GTr,k4,OEe,OTr,VTr,OJ,XTr,zTr,WTr,S4,VEe,QTr,UTr,VJ,HTr,JTr,YTr,R4,KTr,XEe,ZTr,eMr,zEe,oMr,rMr,P4,MHe,ic,B4,WEe,Ox,tMr,QEe,aMr,EHe,Zo,Vx,nMr,dc,sMr,XJ,lMr,iMr,zJ,dMr,cMr,mMr,Xx,fMr,UEe,gMr,hMr,uMr,Rt,zx,pMr,HEe,_Mr,bMr,cc,vMr,JEe,FMr,TMr,WJ,MMr,EMr,CMr,I4,wMr,vo,Wx,AMr,YEe,LMr,yMr,cn,xMr,KEe,$Mr,kMr,ZEe,SMr,RMr,e4e,PMr,BMr,IMr,mn,N4,o4e,NMr,qMr,QJ,jMr,DMr,GMr,q4,r4e,OMr,VMr,UJ,XMr,zMr,WMr,j4,t4e,QMr,UMr,HJ,HMr,JMr,YMr,D4,a4e,KMr,ZMr,JJ,eEr,oEr,rEr,G4,tEr,n4e,aEr,nEr,s4e,sEr,lEr,O4,CHe,mc,V4,l4e,Qx,iEr,i4e,dEr,wHe,er,Ux,cEr,fc,mEr,YJ,fEr,gEr,KJ,hEr,uEr,pEr,Hx,_Er,d4e,bEr,vEr,FEr,Pt,Jx,TEr,c4e,MEr,EEr,gc,CEr,m4e,wEr,AEr,ZJ,LEr,yEr,xEr,X4,$Er,Fo,Yx,kEr,f4e,SEr,REr,fn,PEr,g4e,BEr,IEr,h4e,NEr,qEr,u4e,jEr,DEr,GEr,Kx,z4,p4e,OEr,VEr,eY,XEr,zEr,WEr,W4,_4e,QEr,UEr,oY,HEr,JEr,YEr,Q4,KEr,b4e,ZEr,e4r,v4e,o4r,r4r,U4,AHe,hc,H4,F4e,Zx,t4r,T4e,a4r,LHe,or,e$,n4r,uc,s4r,rY,l4r,i4r,tY,d4r,c4r,m4r,o$,f4r,M4e,g4r,h4r,u4r,Bt,r$,p4r,E4e,_4r,b4r,pc,v4r,C4e,F4r,T4r,aY,M4r,E4r,C4r,J4,w4r,To,t$,A4r,w4e,L4r,y4r,gn,x4r,A4e,$4r,k4r,L4e,S4r,R4r,y4e,P4r,B4r,I4r,x4e,Y4,$4e,N4r,q4r,nY,j4r,D4r,G4r,K4,O4r,k4e,V4r,X4r,S4e,z4r,W4r,Z4,yHe,_c,eC,R4e,a$,Q4r,P4e,U4r,xHe,rr,n$,H4r,bc,J4r,sY,Y4r,K4r,lY,Z4r,eCr,oCr,s$,rCr,B4e,tCr,aCr,nCr,It,l$,sCr,I4e,lCr,iCr,vc,dCr,N4e,cCr,mCr,iY,fCr,gCr,hCr,oC,uCr,Mo,i$,pCr,q4e,_Cr,bCr,hn,vCr,j4e,FCr,TCr,D4e,MCr,ECr,G4e,CCr,wCr,ACr,it,rC,O4e,LCr,yCr,dY,xCr,$Cr,kCr,tC,V4e,SCr,RCr,cY,PCr,BCr,ICr,aC,X4e,NCr,qCr,mY,jCr,DCr,GCr,nC,z4e,OCr,VCr,fY,XCr,zCr,WCr,sC,W4e,QCr,UCr,gY,HCr,JCr,YCr,lC,KCr,Q4e,ZCr,e3r,U4e,o3r,r3r,iC,$He,Fc,dC,H4e,d$,t3r,J4e,a3r,kHe,tr,c$,n3r,Tc,s3r,hY,l3r,i3r,uY,d3r,c3r,m3r,m$,f3r,Y4e,g3r,h3r,u3r,Nt,f$,p3r,K4e,_3r,b3r,Mc,v3r,Z4e,F3r,T3r,pY,M3r,E3r,C3r,cC,w3r,Eo,g$,A3r,eCe,L3r,y3r,un,x3r,oCe,$3r,k3r,rCe,S3r,R3r,tCe,P3r,B3r,I3r,aCe,mC,nCe,N3r,q3r,_Y,j3r,D3r,G3r,fC,O3r,sCe,V3r,X3r,lCe,z3r,W3r,gC,SHe,Ec,hC,iCe,h$,Q3r,dCe,U3r,RHe,ar,u$,H3r,Cc,J3r,bY,Y3r,K3r,vY,Z3r,e5r,o5r,p$,r5r,cCe,t5r,a5r,n5r,qt,_$,s5r,mCe,l5r,i5r,wc,d5r,fCe,c5r,m5r,FY,f5r,g5r,h5r,uC,u5r,Rr,b$,p5r,gCe,_5r,b5r,pn,v5r,hCe,F5r,T5r,uCe,M5r,E5r,pCe,C5r,w5r,A5r,P,pC,_Ce,L5r,y5r,TY,x5r,$5r,k5r,_C,bCe,S5r,R5r,MY,P5r,B5r,I5r,bC,vCe,N5r,q5r,EY,j5r,D5r,G5r,vC,FCe,O5r,V5r,CY,X5r,z5r,W5r,FC,TCe,Q5r,U5r,wY,H5r,J5r,Y5r,TC,MCe,K5r,Z5r,AY,e0r,o0r,r0r,MC,ECe,t0r,a0r,LY,n0r,s0r,l0r,EC,CCe,i0r,d0r,yY,c0r,m0r,f0r,CC,wCe,g0r,h0r,xY,u0r,p0r,_0r,wC,ACe,b0r,v0r,$Y,F0r,T0r,M0r,AC,LCe,E0r,C0r,kY,w0r,A0r,L0r,LC,yCe,y0r,x0r,SY,$0r,k0r,S0r,yC,xCe,R0r,P0r,RY,B0r,I0r,N0r,xC,$Ce,q0r,j0r,PY,D0r,G0r,O0r,$C,kCe,V0r,X0r,BY,z0r,W0r,Q0r,kC,SCe,U0r,H0r,IY,J0r,Y0r,K0r,SC,RCe,Z0r,ewr,NY,owr,rwr,twr,RC,PCe,awr,nwr,qY,swr,lwr,iwr,il,BCe,dwr,cwr,jY,mwr,fwr,DY,gwr,hwr,uwr,PC,ICe,pwr,_wr,GY,bwr,vwr,Fwr,BC,NCe,Twr,Mwr,OY,Ewr,Cwr,wwr,IC,qCe,Awr,Lwr,VY,ywr,xwr,$wr,NC,jCe,kwr,Swr,XY,Rwr,Pwr,Bwr,qC,DCe,Iwr,Nwr,zY,qwr,jwr,Dwr,jC,GCe,Gwr,Owr,WY,Vwr,Xwr,zwr,DC,OCe,Wwr,Qwr,QY,Uwr,Hwr,Jwr,GC,VCe,Ywr,Kwr,UY,Zwr,e6r,o6r,OC,XCe,r6r,t6r,HY,a6r,n6r,s6r,VC,zCe,l6r,i6r,JY,d6r,c6r,m6r,XC,WCe,f6r,g6r,YY,h6r,u6r,p6r,zC,QCe,_6r,b6r,KY,v6r,F6r,T6r,WC,UCe,M6r,E6r,ZY,C6r,w6r,A6r,QC,HCe,L6r,y6r,eK,x6r,$6r,k6r,UC,JCe,S6r,R6r,oK,P6r,B6r,I6r,HC,YCe,N6r,q6r,rK,j6r,D6r,G6r,JC,KCe,O6r,V6r,tK,X6r,z6r,W6r,YC,ZCe,Q6r,U6r,aK,H6r,J6r,Y6r,KC,e3e,K6r,Z6r,nK,eAr,oAr,rAr,ZC,o3e,tAr,aAr,sK,nAr,sAr,lAr,e3,r3e,iAr,dAr,lK,cAr,mAr,fAr,o3,t3e,gAr,hAr,iK,uAr,pAr,_Ar,r3,a3e,bAr,vAr,dK,FAr,TAr,MAr,t3,n3e,EAr,CAr,cK,wAr,AAr,LAr,a3,s3e,yAr,xAr,mK,$Ar,kAr,SAr,n3,l3e,RAr,PAr,fK,BAr,IAr,NAr,s3,i3e,qAr,jAr,gK,DAr,GAr,OAr,l3,d3e,VAr,XAr,hK,zAr,WAr,QAr,i3,c3e,UAr,HAr,uK,JAr,YAr,KAr,d3,m3e,ZAr,e7r,pK,o7r,r7r,t7r,c3,f3e,a7r,n7r,_K,s7r,l7r,i7r,m3,g3e,d7r,c7r,bK,m7r,f7r,g7r,f3,h3e,h7r,u7r,vK,p7r,_7r,b7r,g3,u3e,v7r,F7r,FK,T7r,M7r,E7r,h3,p3e,C7r,w7r,TK,A7r,L7r,y7r,u3,PHe,Ac,p3,_3e,v$,x7r,b3e,$7r,BHe,nr,F$,k7r,Lc,S7r,MK,R7r,P7r,EK,B7r,I7r,N7r,T$,q7r,v3e,j7r,D7r,G7r,jt,M$,O7r,F3e,V7r,X7r,yc,z7r,T3e,W7r,Q7r,CK,U7r,H7r,J7r,_3,Y7r,Pr,E$,K7r,M3e,Z7r,eLr,_n,oLr,E3e,rLr,tLr,C3e,aLr,nLr,w3e,sLr,lLr,iLr,se,b3,A3e,dLr,cLr,wK,mLr,fLr,gLr,v3,L3e,hLr,uLr,AK,pLr,_Lr,bLr,F3,y3e,vLr,FLr,LK,TLr,MLr,ELr,T3,x3e,CLr,wLr,yK,ALr,LLr,yLr,M3,$3e,xLr,$Lr,xK,kLr,SLr,RLr,E3,k3e,PLr,BLr,$K,ILr,NLr,qLr,C3,S3e,jLr,DLr,kK,GLr,OLr,VLr,w3,R3e,XLr,zLr,SK,WLr,QLr,ULr,A3,P3e,HLr,JLr,RK,YLr,KLr,ZLr,L3,B3e,eyr,oyr,PK,ryr,tyr,ayr,y3,I3e,nyr,syr,BK,lyr,iyr,dyr,x3,N3e,cyr,myr,IK,fyr,gyr,hyr,$3,q3e,uyr,pyr,NK,_yr,byr,vyr,k3,j3e,Fyr,Tyr,qK,Myr,Eyr,Cyr,S3,D3e,wyr,Ayr,jK,Lyr,yyr,xyr,R3,G3e,$yr,kyr,DK,Syr,Ryr,Pyr,P3,O3e,Byr,Iyr,GK,Nyr,qyr,jyr,B3,V3e,Dyr,Gyr,OK,Oyr,Vyr,Xyr,I3,X3e,zyr,Wyr,VK,Qyr,Uyr,Hyr,N3,z3e,Jyr,Yyr,XK,Kyr,Zyr,e8r,q3,W3e,o8r,r8r,zK,t8r,a8r,n8r,j3,Q3e,s8r,l8r,WK,i8r,d8r,c8r,D3,U3e,m8r,f8r,QK,g8r,h8r,u8r,G3,IHe,xc,O3,H3e,C$,p8r,J3e,_8r,NHe,sr,w$,b8r,$c,v8r,UK,F8r,T8r,HK,M8r,E8r,C8r,A$,w8r,Y3e,A8r,L8r,y8r,Dt,L$,x8r,K3e,$8r,k8r,kc,S8r,Z3e,R8r,P8r,JK,B8r,I8r,N8r,V3,q8r,Br,y$,j8r,e5e,D8r,G8r,bn,O8r,o5e,V8r,X8r,r5e,z8r,W8r,t5e,Q8r,U8r,H8r,Me,X3,a5e,J8r,Y8r,YK,K8r,Z8r,e9r,z3,n5e,o9r,r9r,KK,t9r,a9r,n9r,W3,s5e,s9r,l9r,ZK,i9r,d9r,c9r,Q3,l5e,m9r,f9r,eZ,g9r,h9r,u9r,U3,i5e,p9r,_9r,oZ,b9r,v9r,F9r,H3,d5e,T9r,M9r,rZ,E9r,C9r,w9r,J3,c5e,A9r,L9r,tZ,y9r,x9r,$9r,Y3,m5e,k9r,S9r,aZ,R9r,P9r,B9r,K3,f5e,I9r,N9r,nZ,q9r,j9r,D9r,Z3,g5e,G9r,O9r,sZ,V9r,X9r,z9r,e5,h5e,W9r,Q9r,lZ,U9r,H9r,J9r,o5,u5e,Y9r,K9r,iZ,Z9r,exr,oxr,r5,p5e,rxr,txr,dZ,axr,nxr,sxr,t5,_5e,lxr,ixr,cZ,dxr,cxr,mxr,a5,qHe,Sc,n5,b5e,x$,fxr,v5e,gxr,jHe,lr,$$,hxr,Rc,uxr,mZ,pxr,_xr,fZ,bxr,vxr,Fxr,k$,Txr,F5e,Mxr,Exr,Cxr,Gt,S$,wxr,T5e,Axr,Lxr,Pc,yxr,M5e,xxr,$xr,gZ,kxr,Sxr,Rxr,s5,Pxr,Ir,R$,Bxr,E5e,Ixr,Nxr,vn,qxr,C5e,jxr,Dxr,w5e,Gxr,Oxr,A5e,Vxr,Xxr,zxr,Be,l5,L5e,Wxr,Qxr,hZ,Uxr,Hxr,Jxr,i5,y5e,Yxr,Kxr,uZ,Zxr,e$r,o$r,dl,x5e,r$r,t$r,pZ,a$r,n$r,_Z,s$r,l$r,i$r,d5,$5e,d$r,c$r,bZ,m$r,f$r,g$r,c5,k5e,h$r,u$r,vZ,p$r,_$r,b$r,m5,S5e,v$r,F$r,FZ,T$r,M$r,E$r,f5,R5e,C$r,w$r,TZ,A$r,L$r,y$r,g5,P5e,x$r,$$r,MZ,k$r,S$r,R$r,h5,B5e,P$r,B$r,EZ,I$r,N$r,q$r,u5,DHe,Bc,p5,I5e,P$,j$r,N5e,D$r,GHe,ir,B$,G$r,Ic,O$r,CZ,V$r,X$r,wZ,z$r,W$r,Q$r,I$,U$r,q5e,H$r,J$r,Y$r,Ot,N$,K$r,j5e,Z$r,ekr,Nc,okr,D5e,rkr,tkr,AZ,akr,nkr,skr,_5,lkr,Nr,q$,ikr,G5e,dkr,ckr,Fn,mkr,O5e,fkr,gkr,V5e,hkr,ukr,X5e,pkr,_kr,bkr,qc,b5,z5e,vkr,Fkr,LZ,Tkr,Mkr,Ekr,v5,W5e,Ckr,wkr,yZ,Akr,Lkr,ykr,F5,Q5e,xkr,$kr,xZ,kkr,Skr,Rkr,T5,OHe,jc,M5,U5e,j$,Pkr,H5e,Bkr,VHe,dr,D$,Ikr,Dc,Nkr,$Z,qkr,jkr,kZ,Dkr,Gkr,Okr,G$,Vkr,J5e,Xkr,zkr,Wkr,Vt,O$,Qkr,Y5e,Ukr,Hkr,Gc,Jkr,K5e,Ykr,Kkr,SZ,Zkr,eSr,oSr,E5,rSr,qr,V$,tSr,Z5e,aSr,nSr,Tn,sSr,e0e,lSr,iSr,o0e,dSr,cSr,r0e,mSr,fSr,gSr,me,C5,t0e,hSr,uSr,RZ,pSr,_Sr,bSr,w5,a0e,vSr,FSr,PZ,TSr,MSr,ESr,A5,n0e,CSr,wSr,BZ,ASr,LSr,ySr,L5,s0e,xSr,$Sr,IZ,kSr,SSr,RSr,y5,l0e,PSr,BSr,NZ,ISr,NSr,qSr,x5,i0e,jSr,DSr,qZ,GSr,OSr,VSr,$5,d0e,XSr,zSr,jZ,WSr,QSr,USr,k5,c0e,HSr,JSr,DZ,YSr,KSr,ZSr,S5,m0e,eRr,oRr,GZ,rRr,tRr,aRr,R5,f0e,nRr,sRr,OZ,lRr,iRr,dRr,P5,g0e,cRr,mRr,VZ,fRr,gRr,hRr,B5,h0e,uRr,pRr,XZ,_Rr,bRr,vRr,I5,u0e,FRr,TRr,zZ,MRr,ERr,CRr,N5,p0e,wRr,ARr,WZ,LRr,yRr,xRr,q5,_0e,$Rr,kRr,QZ,SRr,RRr,PRr,j5,b0e,BRr,IRr,UZ,NRr,qRr,jRr,D5,v0e,DRr,GRr,HZ,ORr,VRr,XRr,G5,F0e,zRr,WRr,JZ,QRr,URr,HRr,O5,T0e,JRr,YRr,YZ,KRr,ZRr,ePr,V5,M0e,oPr,rPr,KZ,tPr,aPr,nPr,X5,XHe,Oc,z5,E0e,X$,sPr,C0e,lPr,zHe,cr,z$,iPr,Vc,dPr,ZZ,cPr,mPr,eee,fPr,gPr,hPr,W$,uPr,w0e,pPr,_Pr,bPr,Xt,Q$,vPr,A0e,FPr,TPr,Xc,MPr,L0e,EPr,CPr,oee,wPr,APr,LPr,W5,yPr,jr,U$,xPr,y0e,$Pr,kPr,Mn,SPr,x0e,RPr,PPr,$0e,BPr,IPr,k0e,NPr,qPr,jPr,ye,Q5,S0e,DPr,GPr,ree,OPr,VPr,XPr,U5,R0e,zPr,WPr,tee,QPr,UPr,HPr,H5,P0e,JPr,YPr,aee,KPr,ZPr,eBr,J5,B0e,oBr,rBr,nee,tBr,aBr,nBr,Y5,I0e,sBr,lBr,see,iBr,dBr,cBr,K5,N0e,mBr,fBr,lee,gBr,hBr,uBr,Z5,q0e,pBr,_Br,iee,bBr,vBr,FBr,e0,j0e,TBr,MBr,dee,EBr,CBr,wBr,o0,D0e,ABr,LBr,cee,yBr,xBr,$Br,r0,G0e,kBr,SBr,mee,RBr,PBr,BBr,t0,WHe,zc,a0,O0e,H$,IBr,V0e,NBr,QHe,mr,J$,qBr,Wc,jBr,fee,DBr,GBr,gee,OBr,VBr,XBr,Y$,zBr,X0e,WBr,QBr,UBr,zt,K$,HBr,z0e,JBr,YBr,Qc,KBr,W0e,ZBr,eIr,hee,oIr,rIr,tIr,n0,aIr,Dr,Z$,nIr,Q0e,sIr,lIr,En,iIr,U0e,dIr,cIr,H0e,mIr,fIr,J0e,gIr,hIr,uIr,re,s0,Y0e,pIr,_Ir,uee,bIr,vIr,FIr,l0,K0e,TIr,MIr,pee,EIr,CIr,wIr,i0,Z0e,AIr,LIr,_ee,yIr,xIr,$Ir,d0,ewe,kIr,SIr,bee,RIr,PIr,BIr,c0,owe,IIr,NIr,vee,qIr,jIr,DIr,m0,rwe,GIr,OIr,Fee,VIr,XIr,zIr,f0,twe,WIr,QIr,Tee,UIr,HIr,JIr,g0,awe,YIr,KIr,Mee,ZIr,eNr,oNr,h0,nwe,rNr,tNr,Eee,aNr,nNr,sNr,u0,swe,lNr,iNr,Cee,dNr,cNr,mNr,p0,lwe,fNr,gNr,wee,hNr,uNr,pNr,_0,iwe,_Nr,bNr,Aee,vNr,FNr,TNr,b0,dwe,MNr,ENr,Lee,CNr,wNr,ANr,v0,cwe,LNr,yNr,yee,xNr,$Nr,kNr,F0,mwe,SNr,RNr,xee,PNr,BNr,INr,T0,fwe,NNr,qNr,$ee,jNr,DNr,GNr,M0,gwe,ONr,VNr,kee,XNr,zNr,WNr,E0,hwe,QNr,UNr,See,HNr,JNr,YNr,C0,uwe,KNr,ZNr,Ree,eqr,oqr,rqr,w0,pwe,tqr,aqr,Pee,nqr,sqr,lqr,A0,_we,iqr,dqr,Bee,cqr,mqr,fqr,L0,bwe,gqr,hqr,Iee,uqr,pqr,_qr,y0,vwe,bqr,vqr,Nee,Fqr,Tqr,Mqr,x0,Fwe,Eqr,Cqr,qee,wqr,Aqr,Lqr,$0,Twe,yqr,xqr,jee,$qr,kqr,Sqr,k0,Mwe,Rqr,Pqr,Dee,Bqr,Iqr,Nqr,S0,Ewe,qqr,jqr,Gee,Dqr,Gqr,Oqr,R0,UHe,Uc,P0,Cwe,ek,Vqr,wwe,Xqr,HHe,fr,ok,zqr,Hc,Wqr,Oee,Qqr,Uqr,Vee,Hqr,Jqr,Yqr,rk,Kqr,Awe,Zqr,ejr,ojr,Wt,tk,rjr,Lwe,tjr,ajr,Jc,njr,ywe,sjr,ljr,Xee,ijr,djr,cjr,B0,mjr,Gr,ak,fjr,xwe,gjr,hjr,Cn,ujr,$we,pjr,_jr,kwe,bjr,vjr,Swe,Fjr,Tjr,Mjr,ve,I0,Rwe,Ejr,Cjr,zee,wjr,Ajr,Ljr,N0,Pwe,yjr,xjr,Wee,$jr,kjr,Sjr,q0,Bwe,Rjr,Pjr,Qee,Bjr,Ijr,Njr,j0,Iwe,qjr,jjr,Uee,Djr,Gjr,Ojr,D0,Nwe,Vjr,Xjr,Hee,zjr,Wjr,Qjr,G0,qwe,Ujr,Hjr,Jee,Jjr,Yjr,Kjr,O0,jwe,Zjr,eDr,Yee,oDr,rDr,tDr,V0,Dwe,aDr,nDr,Kee,sDr,lDr,iDr,X0,Gwe,dDr,cDr,Zee,mDr,fDr,gDr,z0,Owe,hDr,uDr,eoe,pDr,_Dr,bDr,W0,Vwe,vDr,FDr,ooe,TDr,MDr,EDr,Q0,Xwe,CDr,wDr,roe,ADr,LDr,yDr,U0,zwe,xDr,$Dr,toe,kDr,SDr,RDr,H0,Wwe,PDr,BDr,aoe,IDr,NDr,qDr,J0,Qwe,jDr,DDr,noe,GDr,ODr,VDr,Y0,Uwe,XDr,zDr,soe,WDr,QDr,UDr,K0,Hwe,HDr,JDr,loe,YDr,KDr,ZDr,Z0,JHe,Yc,ew,Jwe,nk,eGr,Ywe,oGr,YHe,gr,sk,rGr,Kc,tGr,ioe,aGr,nGr,doe,sGr,lGr,iGr,lk,dGr,Kwe,cGr,mGr,fGr,Qt,ik,gGr,Zwe,hGr,uGr,Zc,pGr,e6e,_Gr,bGr,coe,vGr,FGr,TGr,ow,MGr,Or,dk,EGr,o6e,CGr,wGr,wn,AGr,r6e,LGr,yGr,t6e,xGr,$Gr,a6e,kGr,SGr,RGr,ck,rw,n6e,PGr,BGr,moe,IGr,NGr,qGr,tw,s6e,jGr,DGr,foe,GGr,OGr,VGr,aw,KHe,em,nw,l6e,mk,XGr,i6e,zGr,ZHe,hr,fk,WGr,om,QGr,goe,UGr,HGr,hoe,JGr,YGr,KGr,gk,ZGr,d6e,eOr,oOr,rOr,Ut,hk,tOr,c6e,aOr,nOr,rm,sOr,m6e,lOr,iOr,uoe,dOr,cOr,mOr,sw,fOr,Vr,uk,gOr,f6e,hOr,uOr,An,pOr,g6e,_Or,bOr,h6e,vOr,FOr,u6e,TOr,MOr,EOr,p6e,lw,_6e,COr,wOr,poe,AOr,LOr,yOr,iw,eJe,tm,dw,b6e,pk,xOr,v6e,$Or,oJe,ur,_k,kOr,am,SOr,_oe,ROr,POr,boe,BOr,IOr,NOr,bk,qOr,F6e,jOr,DOr,GOr,Ht,vk,OOr,T6e,VOr,XOr,nm,zOr,M6e,WOr,QOr,voe,UOr,HOr,JOr,cw,YOr,Xr,Fk,KOr,E6e,ZOr,eVr,Ln,oVr,C6e,rVr,tVr,w6e,aVr,nVr,A6e,sVr,lVr,iVr,ie,mw,L6e,dVr,cVr,Foe,mVr,fVr,gVr,fw,y6e,hVr,uVr,Toe,pVr,_Vr,bVr,gw,x6e,vVr,FVr,Moe,TVr,MVr,EVr,hw,$6e,CVr,wVr,Eoe,AVr,LVr,yVr,uw,k6e,xVr,$Vr,Coe,kVr,SVr,RVr,pw,S6e,PVr,BVr,woe,IVr,NVr,qVr,_w,R6e,jVr,DVr,Aoe,GVr,OVr,VVr,bw,P6e,XVr,zVr,Loe,WVr,QVr,UVr,vw,B6e,HVr,JVr,yoe,YVr,KVr,ZVr,Fw,I6e,eXr,oXr,xoe,rXr,tXr,aXr,Tw,N6e,nXr,sXr,$oe,lXr,iXr,dXr,Mw,q6e,cXr,mXr,koe,fXr,gXr,hXr,Ew,j6e,uXr,pXr,Soe,_Xr,bXr,vXr,Cw,D6e,FXr,TXr,Roe,MXr,EXr,CXr,ww,G6e,wXr,AXr,Poe,LXr,yXr,xXr,Aw,O6e,$Xr,kXr,Boe,SXr,RXr,PXr,Lw,V6e,BXr,IXr,Ioe,NXr,qXr,jXr,yw,X6e,DXr,GXr,Noe,OXr,VXr,XXr,xw,z6e,zXr,WXr,qoe,QXr,UXr,HXr,$w,W6e,JXr,YXr,joe,KXr,ZXr,ezr,kw,Q6e,ozr,rzr,Doe,tzr,azr,nzr,Sw,rJe,sm,Rw,U6e,Tk,szr,H6e,lzr,tJe,pr,Mk,izr,lm,dzr,Goe,czr,mzr,Ooe,fzr,gzr,hzr,Ek,uzr,J6e,pzr,_zr,bzr,Jt,Ck,vzr,Y6e,Fzr,Tzr,im,Mzr,K6e,Ezr,Czr,Voe,wzr,Azr,Lzr,Pw,yzr,zr,wk,xzr,Z6e,$zr,kzr,yn,Szr,eAe,Rzr,Pzr,oAe,Bzr,Izr,rAe,Nzr,qzr,jzr,de,Bw,tAe,Dzr,Gzr,Xoe,Ozr,Vzr,Xzr,Iw,aAe,zzr,Wzr,zoe,Qzr,Uzr,Hzr,Nw,nAe,Jzr,Yzr,Woe,Kzr,Zzr,eWr,qw,sAe,oWr,rWr,Qoe,tWr,aWr,nWr,jw,lAe,sWr,lWr,Uoe,iWr,dWr,cWr,Dw,iAe,mWr,fWr,Hoe,gWr,hWr,uWr,Gw,dAe,pWr,_Wr,Joe,bWr,vWr,FWr,Ow,cAe,TWr,MWr,Yoe,EWr,CWr,wWr,Vw,mAe,AWr,LWr,Koe,yWr,xWr,$Wr,Xw,fAe,kWr,SWr,Zoe,RWr,PWr,BWr,zw,gAe,IWr,NWr,ere,qWr,jWr,DWr,Ww,hAe,GWr,OWr,ore,VWr,XWr,zWr,Qw,uAe,WWr,QWr,rre,UWr,HWr,JWr,Uw,pAe,YWr,KWr,tre,ZWr,eQr,oQr,Hw,_Ae,rQr,tQr,are,aQr,nQr,sQr,Jw,bAe,lQr,iQr,nre,dQr,cQr,mQr,Yw,vAe,fQr,gQr,sre,hQr,uQr,pQr,Kw,FAe,_Qr,bQr,lre,vQr,FQr,TQr,Zw,TAe,MQr,EQr,ire,CQr,wQr,AQr,e6,MAe,LQr,yQr,dre,xQr,$Qr,kQr,o6,EAe,SQr,RQr,cre,PQr,BQr,IQr,r6,aJe,dm,t6,CAe,Ak,NQr,wAe,qQr,nJe,_r,Lk,jQr,cm,DQr,mre,GQr,OQr,fre,VQr,XQr,zQr,yk,WQr,AAe,QQr,UQr,HQr,Yt,xk,JQr,LAe,YQr,KQr,mm,ZQr,yAe,eUr,oUr,gre,rUr,tUr,aUr,a6,nUr,Wr,$k,sUr,xAe,lUr,iUr,xn,dUr,$Ae,cUr,mUr,kAe,fUr,gUr,SAe,hUr,uUr,pUr,RAe,n6,PAe,_Ur,bUr,hre,vUr,FUr,TUr,s6,sJe,fm,l6,BAe,kk,MUr,IAe,EUr,lJe,br,Sk,CUr,gm,wUr,ure,AUr,LUr,pre,yUr,xUr,$Ur,Rk,kUr,NAe,SUr,RUr,PUr,Kt,Pk,BUr,qAe,IUr,NUr,hm,qUr,jAe,jUr,DUr,_re,GUr,OUr,VUr,i6,XUr,Qr,Bk,zUr,DAe,WUr,QUr,$n,UUr,GAe,HUr,JUr,OAe,YUr,KUr,VAe,ZUr,eHr,oHr,XAe,d6,zAe,rHr,tHr,bre,aHr,nHr,sHr,c6,iJe,um,m6,WAe,Ik,lHr,QAe,iHr,dJe,vr,Nk,dHr,pm,cHr,vre,mHr,fHr,Fre,gHr,hHr,uHr,qk,pHr,UAe,_Hr,bHr,vHr,Zt,jk,FHr,HAe,THr,MHr,_m,EHr,JAe,CHr,wHr,Tre,AHr,LHr,yHr,f6,xHr,Ur,Dk,$Hr,YAe,kHr,SHr,kn,RHr,KAe,PHr,BHr,ZAe,IHr,NHr,e7e,qHr,jHr,DHr,te,g6,o7e,GHr,OHr,Mre,VHr,XHr,zHr,h6,r7e,WHr,QHr,Ere,UHr,HHr,JHr,u6,t7e,YHr,KHr,Cre,ZHr,eJr,oJr,p6,a7e,rJr,tJr,wre,aJr,nJr,sJr,_6,n7e,lJr,iJr,Are,dJr,cJr,mJr,b6,s7e,fJr,gJr,Lre,hJr,uJr,pJr,v6,l7e,_Jr,bJr,yre,vJr,FJr,TJr,F6,i7e,MJr,EJr,xre,CJr,wJr,AJr,T6,d7e,LJr,yJr,$re,xJr,$Jr,kJr,M6,c7e,SJr,RJr,kre,PJr,BJr,IJr,E6,m7e,NJr,qJr,Sre,jJr,DJr,GJr,C6,f7e,OJr,VJr,Rre,XJr,zJr,WJr,w6,g7e,QJr,UJr,Pre,HJr,JJr,YJr,A6,h7e,KJr,ZJr,Bre,eYr,oYr,rYr,L6,u7e,tYr,aYr,Ire,nYr,sYr,lYr,y6,p7e,iYr,dYr,Nre,cYr,mYr,fYr,x6,_7e,gYr,hYr,qre,uYr,pYr,_Yr,$6,b7e,bYr,vYr,jre,FYr,TYr,MYr,k6,v7e,EYr,CYr,Dre,wYr,AYr,LYr,S6,F7e,yYr,xYr,Gre,$Yr,kYr,SYr,R6,T7e,RYr,PYr,Ore,BYr,IYr,NYr,P6,M7e,qYr,jYr,Vre,DYr,GYr,OYr,B6,E7e,VYr,XYr,Xre,zYr,WYr,QYr,I6,C7e,UYr,HYr,zre,JYr,YYr,KYr,N6,w7e,ZYr,eKr,Wre,oKr,rKr,tKr,q6,A7e,aKr,nKr,Qre,sKr,lKr,iKr,j6,L7e,dKr,cKr,Ure,mKr,fKr,gKr,D6,cJe,bm,G6,y7e,Gk,hKr,x7e,uKr,mJe,Fr,Ok,pKr,vm,_Kr,Hre,bKr,vKr,Jre,FKr,TKr,MKr,Vk,EKr,$7e,CKr,wKr,AKr,ea,Xk,LKr,k7e,yKr,xKr,Fm,$Kr,S7e,kKr,SKr,Yre,RKr,PKr,BKr,O6,IKr,Hr,zk,NKr,R7e,qKr,jKr,Sn,DKr,P7e,GKr,OKr,B7e,VKr,XKr,I7e,zKr,WKr,QKr,xe,V6,N7e,UKr,HKr,Kre,JKr,YKr,KKr,X6,q7e,ZKr,eZr,Zre,oZr,rZr,tZr,z6,j7e,aZr,nZr,ete,sZr,lZr,iZr,W6,D7e,dZr,cZr,ote,mZr,fZr,gZr,Q6,G7e,hZr,uZr,rte,pZr,_Zr,bZr,U6,O7e,vZr,FZr,tte,TZr,MZr,EZr,H6,V7e,CZr,wZr,ate,AZr,LZr,yZr,J6,X7e,xZr,$Zr,nte,kZr,SZr,RZr,Y6,z7e,PZr,BZr,ste,IZr,NZr,qZr,K6,W7e,jZr,DZr,lte,GZr,OZr,VZr,Z6,fJe,Tm,eA,Q7e,Wk,XZr,U7e,zZr,gJe,Tr,Qk,WZr,Mm,QZr,ite,UZr,HZr,dte,JZr,YZr,KZr,Uk,ZZr,H7e,eet,oet,ret,oa,Hk,tet,J7e,aet,net,Em,set,Y7e,iet,det,cte,cet,met,fet,oA,get,Jr,Jk,het,K7e,uet,pet,Rn,_et,Z7e,bet,vet,eLe,Fet,Tet,oLe,Met,Eet,Cet,Ee,rA,rLe,wet,Aet,mte,Let,yet,xet,tA,tLe,$et,ket,fte,Set,Ret,Pet,aA,aLe,Bet,Iet,gte,Net,qet,jet,nA,nLe,Det,Get,hte,Oet,Vet,Xet,sA,sLe,zet,Wet,ute,Qet,Uet,Het,lA,lLe,Jet,Yet,pte,Ket,Zet,eot,iA,iLe,oot,rot,_te,tot,aot,not,dA,dLe,sot,lot,bte,iot,dot,cot,cA,cLe,mot,fot,vte,got,hot,uot,mA,mLe,pot,_ot,Fte,bot,vot,Fot,fA,fLe,Tot,Mot,Tte,Eot,Cot,wot,gA,gLe,Aot,Lot,Mte,yot,xot,$ot,hA,hLe,kot,Sot,Ete,Rot,Pot,Bot,uA,hJe,Cm,pA,uLe,Yk,Iot,pLe,Not,uJe,Mr,Kk,qot,wm,jot,Cte,Dot,Got,wte,Oot,Vot,Xot,Zk,zot,_Le,Wot,Qot,Uot,ra,eS,Hot,bLe,Jot,Yot,Am,Kot,vLe,Zot,ert,Ate,ort,rrt,trt,_A,art,Yr,oS,nrt,FLe,srt,lrt,Pn,irt,TLe,drt,crt,MLe,mrt,frt,ELe,grt,hrt,urt,$e,bA,CLe,prt,_rt,Lte,brt,vrt,Frt,vA,wLe,Trt,Mrt,yte,Ert,Crt,wrt,FA,ALe,Art,Lrt,xte,yrt,xrt,$rt,TA,LLe,krt,Srt,$te,Rrt,Prt,Brt,MA,yLe,Irt,Nrt,kte,qrt,jrt,Drt,EA,xLe,Grt,Ort,Ste,Vrt,Xrt,zrt,CA,$Le,Wrt,Qrt,Rte,Urt,Hrt,Jrt,wA,kLe,Yrt,Krt,Pte,Zrt,ett,ott,AA,SLe,rtt,ttt,Bte,att,ntt,stt,LA,RLe,ltt,itt,Ite,dtt,ctt,mtt,yA,pJe,Lm,xA,PLe,rS,ftt,BLe,gtt,_Je,Er,tS,htt,ym,utt,Nte,ptt,_tt,qte,btt,vtt,Ftt,aS,Ttt,ILe,Mtt,Ett,Ctt,ta,nS,wtt,NLe,Att,Ltt,xm,ytt,qLe,xtt,$tt,jte,ktt,Stt,Rtt,$A,Ptt,Kr,sS,Btt,jLe,Itt,Ntt,Bn,qtt,DLe,jtt,Dtt,GLe,Gtt,Ott,OLe,Vtt,Xtt,ztt,ke,kA,VLe,Wtt,Qtt,Dte,Utt,Htt,Jtt,SA,XLe,Ytt,Ktt,Gte,Ztt,eat,oat,RA,zLe,rat,tat,Ote,aat,nat,sat,PA,WLe,lat,iat,Vte,dat,cat,mat,BA,QLe,fat,gat,Xte,hat,uat,pat,IA,ULe,_at,bat,zte,vat,Fat,Tat,NA,HLe,Mat,Eat,Wte,Cat,wat,Aat,qA,JLe,Lat,yat,Qte,xat,$at,kat,jA,YLe,Sat,Rat,Ute,Pat,Bat,Iat,DA,KLe,Nat,qat,Hte,jat,Dat,Gat,GA,bJe,$m,OA,ZLe,lS,Oat,eye,Vat,vJe,Cr,iS,Xat,km,zat,Jte,Wat,Qat,Yte,Uat,Hat,Jat,dS,Yat,oye,Kat,Zat,ent,aa,cS,ont,rye,rnt,tnt,Sm,ant,tye,nnt,snt,Kte,lnt,int,dnt,VA,cnt,Zr,mS,mnt,aye,fnt,gnt,In,hnt,nye,unt,pnt,sye,_nt,bnt,lye,vnt,Fnt,Tnt,Se,XA,iye,Mnt,Ent,Zte,Cnt,wnt,Ant,zA,dye,Lnt,ynt,eae,xnt,$nt,knt,WA,cye,Snt,Rnt,oae,Pnt,Bnt,Int,QA,mye,Nnt,qnt,rae,jnt,Dnt,Gnt,UA,fye,Ont,Vnt,tae,Xnt,znt,Wnt,HA,gye,Qnt,Unt,aae,Hnt,Jnt,Ynt,JA,hye,Knt,Znt,nae,est,ost,rst,YA,uye,tst,ast,sae,nst,sst,lst,KA,pye,ist,dst,lae,cst,mst,fst,ZA,_ye,gst,hst,iae,ust,pst,_st,e7,FJe,Rm,o7,bye,fS,bst,vye,vst,TJe,wr,gS,Fst,Pm,Tst,dae,Mst,Est,cae,Cst,wst,Ast,hS,Lst,Fye,yst,xst,$st,na,uS,kst,Tye,Sst,Rst,Bm,Pst,Mye,Bst,Ist,mae,Nst,qst,jst,r7,Dst,et,pS,Gst,Eye,Ost,Vst,Nn,Xst,Cye,zst,Wst,wye,Qst,Ust,Aye,Hst,Jst,Yst,Re,t7,Lye,Kst,Zst,fae,elt,olt,rlt,a7,yye,tlt,alt,gae,nlt,slt,llt,n7,xye,ilt,dlt,hae,clt,mlt,flt,s7,$ye,glt,hlt,uae,ult,plt,_lt,l7,kye,blt,vlt,pae,Flt,Tlt,Mlt,i7,Sye,Elt,Clt,_ae,wlt,Alt,Llt,d7,Rye,ylt,xlt,bae,$lt,klt,Slt,c7,Pye,Rlt,Plt,vae,Blt,Ilt,Nlt,m7,Bye,qlt,jlt,Fae,Dlt,Glt,Olt,f7,Iye,Vlt,Xlt,Tae,zlt,Wlt,Qlt,g7,MJe,Im,h7,Nye,_S,Ult,qye,Hlt,EJe,Ar,bS,Jlt,Nm,Ylt,Mae,Klt,Zlt,Eae,eit,oit,rit,vS,tit,jye,ait,nit,sit,sa,FS,lit,Dye,iit,dit,qm,cit,Gye,mit,fit,Cae,git,hit,uit,u7,pit,ot,TS,_it,Oye,bit,vit,qn,Fit,Vye,Tit,Mit,Xye,Eit,Cit,zye,wit,Ait,Lit,Xe,p7,Wye,yit,xit,wae,$it,kit,Sit,_7,Qye,Rit,Pit,Aae,Bit,Iit,Nit,b7,Uye,qit,jit,Lae,Dit,Git,Oit,v7,Hye,Vit,Xit,yae,zit,Wit,Qit,F7,Jye,Uit,Hit,xae,Jit,Yit,Kit,T7,Yye,Zit,edt,$ae,odt,rdt,tdt,M7,Kye,adt,ndt,kae,sdt,ldt,idt,E7,Zye,ddt,cdt,Sae,mdt,fdt,gdt,C7,CJe,jm,w7,e8e,MS,hdt,o8e,udt,wJe,Lr,ES,pdt,Dm,_dt,Rae,bdt,vdt,Pae,Fdt,Tdt,Mdt,CS,Edt,r8e,Cdt,wdt,Adt,la,wS,Ldt,t8e,ydt,xdt,Gm,$dt,a8e,kdt,Sdt,Bae,Rdt,Pdt,Bdt,A7,Idt,rt,AS,Ndt,n8e,qdt,jdt,jn,Ddt,s8e,Gdt,Odt,l8e,Vdt,Xdt,i8e,zdt,Wdt,Qdt,ze,L7,d8e,Udt,Hdt,Iae,Jdt,Ydt,Kdt,y7,c8e,Zdt,ect,Nae,oct,rct,tct,x7,m8e,act,nct,qae,sct,lct,ict,$7,f8e,dct,cct,jae,mct,fct,gct,k7,g8e,hct,uct,Dae,pct,_ct,bct,S7,h8e,vct,Fct,Gae,Tct,Mct,Ect,R7,u8e,Cct,wct,Oae,Act,Lct,yct,P7,p8e,xct,$ct,Vae,kct,Sct,Rct,B7,AJe,Om,I7,_8e,LS,Pct,b8e,Bct,LJe,yr,yS,Ict,Vm,Nct,Xae,qct,jct,zae,Dct,Gct,Oct,xS,Vct,v8e,Xct,zct,Wct,ia,$S,Qct,F8e,Uct,Hct,Xm,Jct,T8e,Yct,Kct,Wae,Zct,emt,omt,N7,rmt,tt,kS,tmt,M8e,amt,nmt,Dn,smt,E8e,lmt,imt,C8e,dmt,cmt,w8e,mmt,fmt,gmt,A8e,q7,L8e,hmt,umt,Qae,pmt,_mt,bmt,j7,yJe,zm,D7,y8e,SS,vmt,x8e,Fmt,xJe,xr,RS,Tmt,Wm,Mmt,Uae,Emt,Cmt,Hae,wmt,Amt,Lmt,PS,ymt,$8e,xmt,$mt,kmt,da,BS,Smt,k8e,Rmt,Pmt,Qm,Bmt,S8e,Imt,Nmt,Jae,qmt,jmt,Dmt,G7,Gmt,at,IS,Omt,R8e,Vmt,Xmt,Gn,zmt,P8e,Wmt,Qmt,B8e,Umt,Hmt,I8e,Jmt,Ymt,Kmt,NS,O7,N8e,Zmt,eft,Yae,oft,rft,tft,V7,q8e,aft,nft,Kae,sft,lft,ift,X7,$Je,Um,z7,j8e,qS,dft,D8e,cft,kJe,$r,jS,mft,Hm,fft,Zae,gft,hft,ene,uft,pft,_ft,DS,bft,G8e,vft,Fft,Tft,ca,GS,Mft,O8e,Eft,Cft,Jm,wft,V8e,Aft,Lft,one,yft,xft,$ft,W7,kft,nt,OS,Sft,X8e,Rft,Pft,On,Bft,z8e,Ift,Nft,W8e,qft,jft,Q8e,Dft,Gft,Oft,U8e,Q7,H8e,Vft,Xft,rne,zft,Wft,Qft,U7,SJe;return d=new oe({}),ja=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),E8=new oe({}),C8=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),nf=new Uft({props:{warning:!0,$$slots:{default:[xaa]},$$scope:{ctx:$}}}),w8=new oe({}),A8=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L625"}}),x8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L648"}}),Mh=new N({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[$aa]},$$scope:{ctx:$}}}),$8=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L771"}}),k8=new oe({}),S8=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L418"}}),B8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L432"}}),au=new N({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[kaa]},$$scope:{ctx:$}}}),I8=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L633"}}),N8=new oe({}),q8=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L199"}}),G8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L213"}}),zu=new Uft({props:{$$slots:{default:[Saa]},$$scope:{ctx:$}}}),Wu=new N({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[Raa]},$$scope:{ctx:$}}}),O8=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L340"}}),V8=new oe({}),X8=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L91"}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L105"}}),up=new Uft({props:{$$slots:{default:[Paa]},$$scope:{ctx:$}}}),pp=new N({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[Baa]},$$scope:{ctx:$}}}),U8=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L258"}}),H8=new oe({}),J8=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L808"}}),K8=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinConfig">DonutSwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinModel">DonutSwinModel</a> (DonutSwin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEModel">VideoMAEModel</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),vp=new N({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[Iaa]},$$scope:{ctx:$}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),y2=new N({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[Naa]},$$scope:{ctx:$}}}),e9=new oe({}),o9=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L815"}}),t9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForPreTraining">VideoMAEForPreTraining</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$2=new N({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[qaa]},$$scope:{ctx:$}}}),a9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),wb=new N({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[jaa]},$$scope:{ctx:$}}}),n9=new oe({}),s9=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L830"}}),i9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Lb=new N({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Daa]},$$scope:{ctx:$}}}),d9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),uv=new N({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Gaa]},$$scope:{ctx:$}}}),c9=new oe({}),m9=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L837"}}),g9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_v=new N({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[Oaa]},$$scope:{ctx:$}}}),h9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),t1=new N({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Vaa]},$$scope:{ctx:$}}}),u9=new oe({}),p9=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L844"}}),b9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),n1=new N({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Xaa]},$$scope:{ctx:$}}}),v9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),A1=new N({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[zaa]},$$scope:{ctx:$}}}),F9=new oe({}),T9=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L853"}}),E9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForSequenceClassification">LukeForSequenceClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),y1=new N({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[Waa]},$$scope:{ctx:$}}}),C9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),yF=new N({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Qaa]},$$scope:{ctx:$}}}),w9=new oe({}),A9=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L898"}}),y9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMultipleChoice">LukeForMultipleChoice</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$F=new N({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[Uaa]},$$scope:{ctx:$}}}),x9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),dT=new N({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Haa]},$$scope:{ctx:$}}}),$9=new oe({}),k9=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L905"}}),R9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),mT=new N({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Jaa]},$$scope:{ctx:$}}}),P9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),vT=new N({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Yaa]},$$scope:{ctx:$}}}),B9=new oe({}),I9=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L891"}}),q9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForTokenClassification">LukeForTokenClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),TT=new N({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Kaa]},$$scope:{ctx:$}}}),j9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),sM=new N({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Zaa]},$$scope:{ctx:$}}}),D9=new oe({}),G9=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L862"}}),V9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForQuestionAnswering">LukeForQuestionAnswering</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),iM=new N({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[ena]},$$scope:{ctx:$}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ZM=new N({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[ona]},$$scope:{ctx:$}}}),z9=new oe({}),W9=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L869"}}),U9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),oE=new N({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[rna]},$$scope:{ctx:$}}}),H9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),aE=new N({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[tna]},$$scope:{ctx:$}}}),J9=new oe({}),Y9=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L914"}}),Z9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),sE=new N({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[ana]},$$scope:{ctx:$}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ME=new N({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[nna]},$$scope:{ctx:$}}}),ox=new oe({}),rx=new R({props:{name:"class transformers.AutoModelForVideoClassification",anchor:"transformers.AutoModelForVideoClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L953"}}),ax=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVideoClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForVideoClassification">VideoMAEForVideoClassification</a> (VideoMAE model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),CE=new N({props:{anchor:"transformers.AutoModelForVideoClassification.from_config.example",$$slots:{default:[sna]},$$scope:{ctx:$}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVideoClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),LE=new N({props:{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.example",$$slots:{default:[lna]},$$scope:{ctx:$}}}),sx=new oe({}),lx=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L960"}}),dx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),xE=new N({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[ina]},$$scope:{ctx:$}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),SE=new N({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[dna]},$$scope:{ctx:$}}}),mx=new oe({}),fx=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L880"}}),hx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),PE=new N({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[cna]},$$scope:{ctx:$}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),NE=new N({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[mna]},$$scope:{ctx:$}}}),px=new oe({}),_x=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L967"}}),vx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),jE=new N({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[fna]},$$scope:{ctx:$}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),JE=new N({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[gna]},$$scope:{ctx:$}}}),Tx=new oe({}),Mx=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L990"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),KE=new N({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[hna]},$$scope:{ctx:$}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),n4=new N({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[una]},$$scope:{ctx:$}}}),Ax=new oe({}),Lx=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L974"}}),xx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),l4=new N({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[pna]},$$scope:{ctx:$}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),v4=new N({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[_na]},$$scope:{ctx:$}}}),kx=new oe({}),Sx=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L981"}}),Px=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),T4=new N({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[bna]},$$scope:{ctx:$}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),w4=new N({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[vna]},$$scope:{ctx:$}}}),Nx=new oe({}),qx=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L999"}}),Dx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),L4=new N({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Fna]},$$scope:{ctx:$}}}),Gx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),P4=new N({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Tna]},$$scope:{ctx:$}}}),Ox=new oe({}),Vx=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1006"}}),zx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),I4=new N({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Mna]},$$scope:{ctx:$}}}),Wx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),O4=new N({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[Ena]},$$scope:{ctx:$}}}),Qx=new oe({}),Ux=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L946"}}),Jx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),X4=new N({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Cna]},$$scope:{ctx:$}}}),Yx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),U4=new N({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[wna]},$$scope:{ctx:$}}}),Zx=new oe({}),e$=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L921"}}),r$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),J4=new N({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[Ana]},$$scope:{ctx:$}}}),t$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Z4=new N({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[Lna]},$$scope:{ctx:$}}}),a$=new oe({}),n$=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L928"}}),l$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),oC=new N({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[yna]},$$scope:{ctx:$}}}),i$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),iC=new N({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[xna]},$$scope:{ctx:$}}}),d$=new oe({}),c$=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L937"}}),f$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),cC=new N({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[$na]},$$scope:{ctx:$}}}),g$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),gC=new N({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[kna]},$$scope:{ctx:$}}}),h$=new oe({}),u$=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),_$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3Model">TFLayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTModel">TFMobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMModel">TFXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),uC=new N({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Sna]},$$scope:{ctx:$}}}),b$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),u3=new N({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[Rna]},$$scope:{ctx:$}}}),v$=new oe({}),F$=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L430"}}),M$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_3=new N({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Pna]},$$scope:{ctx:$}}}),E$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),G3=new N({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Bna]},$$scope:{ctx:$}}}),C$=new oe({}),w$=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L445"}}),L$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMForCausalLM">TFXGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),V3=new N({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[Ina]},$$scope:{ctx:$}}}),y$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),a5=new N({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Nna]},$$scope:{ctx:$}}}),x$=new oe({}),$$=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L461"}}),S$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForImageClassification">TFMobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),s5=new N({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[qna]},$$scope:{ctx:$}}}),R$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),u5=new N({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[jna]},$$scope:{ctx:$}}}),P$=new oe({}),B$=new R({props:{name:"class transformers.TFAutoModelForSemanticSegmentation",anchor:"transformers.TFAutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L470"}}),N$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation">TFData2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForSemanticSegmentation">TFMobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation">TFSegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_5=new N({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Dna]},$$scope:{ctx:$}}}),q$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),T5=new N({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Gna]},$$scope:{ctx:$}}}),j$=new oe({}),D$=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L486"}}),O$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),E5=new N({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[Ona]},$$scope:{ctx:$}}}),V$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),X5=new N({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Vna]},$$scope:{ctx:$}}}),X$=new oe({}),z$=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L493"}}),Q$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),W5=new N({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Xna]},$$scope:{ctx:$}}}),U$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),t0=new N({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[zna]},$$scope:{ctx:$}}}),H$=new oe({}),J$=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L502"}}),K$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForSequenceClassification">TFLayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),n0=new N({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Wna]},$$scope:{ctx:$}}}),Z$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),R0=new N({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Qna]},$$scope:{ctx:$}}}),ek=new oe({}),ok=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L538"}}),tk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),B0=new N({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Una]},$$scope:{ctx:$}}}),ak=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Z0=new N({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Hna]},$$scope:{ctx:$}}}),nk=new oe({}),sk=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L545"}}),ik=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ow=new N({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Jna]},$$scope:{ctx:$}}}),dk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),aw=new N({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Yna]},$$scope:{ctx:$}}}),mk=new oe({}),fk=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L518"}}),hk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),sw=new N({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Kna]},$$scope:{ctx:$}}}),uk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),iw=new N({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Zna]},$$scope:{ctx:$}}}),pk=new oe({}),_k=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L529"}}),vk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForTokenClassification">TFLayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),cw=new N({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[esa]},$$scope:{ctx:$}}}),Fk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Sw=new N({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[osa]},$$scope:{ctx:$}}}),Tk=new oe({}),Mk=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L511"}}),Ck=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForQuestionAnswering">TFLayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Pw=new N({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[rsa]},$$scope:{ctx:$}}}),wk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),r6=new N({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[tsa]},$$scope:{ctx:$}}}),Ak=new oe({}),Lk=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L479"}}),xk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),a6=new N({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[asa]},$$scope:{ctx:$}}}),$k=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),s6=new N({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[nsa]},$$scope:{ctx:$}}}),kk=new oe({}),Sk=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L554"}}),Pk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),i6=new N({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[ssa]},$$scope:{ctx:$}}}),Bk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),c6=new N({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[lsa]},$$scope:{ctx:$}}}),Ik=new oe({}),Nk=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),jk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),f6=new N({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[isa]},$$scope:{ctx:$}}}),Dk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),D6=new N({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[dsa]},$$scope:{ctx:$}}}),Gk=new oe({}),Ok=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),Xk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),O6=new N({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[csa]},$$scope:{ctx:$}}}),zk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Z6=new N({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[msa]},$$scope:{ctx:$}}}),Wk=new oe({}),Qk=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),Hk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),oA=new N({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[fsa]},$$scope:{ctx:$}}}),Jk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),uA=new N({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[gsa]},$$scope:{ctx:$}}}),Yk=new oe({}),Kk=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),eS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_A=new N({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[hsa]},$$scope:{ctx:$}}}),oS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),yA=new N({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[usa]},$$scope:{ctx:$}}}),rS=new oe({}),tS=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),nS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$A=new N({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[psa]},$$scope:{ctx:$}}}),sS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),GA=new N({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[_sa]},$$scope:{ctx:$}}}),lS=new oe({}),iS=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),cS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),VA=new N({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[bsa]},$$scope:{ctx:$}}}),mS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),e7=new N({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[vsa]},$$scope:{ctx:$}}}),fS=new oe({}),gS=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),uS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),r7=new N({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Fsa]},$$scope:{ctx:$}}}),pS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),g7=new N({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Tsa]},$$scope:{ctx:$}}}),_S=new oe({}),bS=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),FS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),u7=new N({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Msa]},$$scope:{ctx:$}}}),TS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),C7=new N({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Esa]},$$scope:{ctx:$}}}),MS=new oe({}),ES=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),wS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),A7=new N({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Csa]},$$scope:{ctx:$}}}),AS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),B7=new N({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[wsa]},$$scope:{ctx:$}}}),LS=new oe({}),yS=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),$S=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),N7=new N({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Asa]},$$scope:{ctx:$}}}),kS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),j7=new N({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Lsa]},$$scope:{ctx:$}}}),SS=new oe({}),RS=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),BS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),G7=new N({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[ysa]},$$scope:{ctx:$}}}),IS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),X7=new N({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[xsa]},$$scope:{ctx:$}}}),qS=new oe({}),jS=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),GS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),W7=new N({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[$sa]},$$scope:{ctx:$}}}),OS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),U7=new N({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[ksa]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(d.$$.fragment),h=l(),Ao=a("span"),Oi=o("Auto Classes"),ef=l(),mt=a("p"),Vi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Xi=a("code"),v8=o("from_pretrained()"),of=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ve=l(),Ue=a("p"),zi=o("Instantiating one of "),Xn=a("a"),F8=o("AutoConfig"),zn=o(", "),Wn=a("a"),T8=o("AutoModel"),Wi=o(`, and
`),Qn=a("a"),M8=o("AutoTokenizer"),Qi=o(" will directly create a class of the relevant architecture. For instance"),rf=l(),F(ja.$$.fragment),He=l(),Ae=a("p"),fP=o("will create a model that is an instance of "),Ui=a("a"),gP=o("BertModel"),hP=o("."),Lo=l(),Da=a("p"),uP=o("There is one class of "),tf=a("code"),pP=o("AutoModel"),WKe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),EUe=l(),Hi=a("h2"),af=a("a"),ole=a("span"),F(E8.$$.fragment),QKe=l(),rle=a("span"),UKe=o("Extending the Auto Classes"),CUe=l(),Un=a("p"),HKe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),tle=a("code"),JKe=o("NewModel"),YKe=o(", make sure you have a "),ale=a("code"),KKe=o("NewModelConfig"),ZKe=o(` then you can add those to the auto
classes like this:`),wUe=l(),F(C8.$$.fragment),AUe=l(),_P=a("p"),eZe=o("You will then be able to use the auto classes like you would usually do!"),LUe=l(),F(nf.$$.fragment),yUe=l(),Ji=a("h2"),sf=a("a"),nle=a("span"),F(w8.$$.fragment),oZe=l(),sle=a("span"),rZe=o("AutoConfig"),xUe=l(),yo=a("div"),F(A8.$$.fragment),tZe=l(),L8=a("p"),aZe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),bP=a("a"),nZe=o("from_pretrained()"),sZe=o(" class method."),lZe=l(),y8=a("p"),iZe=o("This class cannot be instantiated directly using "),lle=a("code"),dZe=o("__init__()"),cZe=o(" (throws an error)."),mZe=l(),kr=a("div"),F(x8.$$.fragment),fZe=l(),ile=a("p"),gZe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),hZe=l(),Yi=a("p"),uZe=o("The configuration class to instantiate is selected based on the "),dle=a("code"),pZe=o("model_type"),_Ze=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),cle=a("code"),bZe=o("pretrained_model_name_or_path"),vZe=o(":"),FZe=l(),A=a("ul"),lf=a("li"),mle=a("strong"),TZe=o("albert"),MZe=o(" \u2014 "),vP=a("a"),EZe=o("AlbertConfig"),CZe=o(" (ALBERT model)"),wZe=l(),df=a("li"),fle=a("strong"),AZe=o("bart"),LZe=o(" \u2014 "),FP=a("a"),yZe=o("BartConfig"),xZe=o(" (BART model)"),$Ze=l(),cf=a("li"),gle=a("strong"),kZe=o("beit"),SZe=o(" \u2014 "),TP=a("a"),RZe=o("BeitConfig"),PZe=o(" (BEiT model)"),BZe=l(),mf=a("li"),hle=a("strong"),IZe=o("bert"),NZe=o(" \u2014 "),MP=a("a"),qZe=o("BertConfig"),jZe=o(" (BERT model)"),DZe=l(),ff=a("li"),ule=a("strong"),GZe=o("bert-generation"),OZe=o(" \u2014 "),EP=a("a"),VZe=o("BertGenerationConfig"),XZe=o(" (Bert Generation model)"),zZe=l(),gf=a("li"),ple=a("strong"),WZe=o("big_bird"),QZe=o(" \u2014 "),CP=a("a"),UZe=o("BigBirdConfig"),HZe=o(" (BigBird model)"),JZe=l(),hf=a("li"),_le=a("strong"),YZe=o("bigbird_pegasus"),KZe=o(" \u2014 "),wP=a("a"),ZZe=o("BigBirdPegasusConfig"),eeo=o(" (BigBird-Pegasus model)"),oeo=l(),uf=a("li"),ble=a("strong"),reo=o("blenderbot"),teo=o(" \u2014 "),AP=a("a"),aeo=o("BlenderbotConfig"),neo=o(" (Blenderbot model)"),seo=l(),pf=a("li"),vle=a("strong"),leo=o("blenderbot-small"),ieo=o(" \u2014 "),LP=a("a"),deo=o("BlenderbotSmallConfig"),ceo=o(" (BlenderbotSmall model)"),meo=l(),_f=a("li"),Fle=a("strong"),feo=o("bloom"),geo=o(" \u2014 "),yP=a("a"),heo=o("BloomConfig"),ueo=o(" (BLOOM model)"),peo=l(),bf=a("li"),Tle=a("strong"),_eo=o("camembert"),beo=o(" \u2014 "),xP=a("a"),veo=o("CamembertConfig"),Feo=o(" (CamemBERT model)"),Teo=l(),vf=a("li"),Mle=a("strong"),Meo=o("canine"),Eeo=o(" \u2014 "),$P=a("a"),Ceo=o("CanineConfig"),weo=o(" (CANINE model)"),Aeo=l(),Ff=a("li"),Ele=a("strong"),Leo=o("clip"),yeo=o(" \u2014 "),kP=a("a"),xeo=o("CLIPConfig"),$eo=o(" (CLIP model)"),keo=l(),Tf=a("li"),Cle=a("strong"),Seo=o("codegen"),Reo=o(" \u2014 "),SP=a("a"),Peo=o("CodeGenConfig"),Beo=o(" (CodeGen model)"),Ieo=l(),Mf=a("li"),wle=a("strong"),Neo=o("convbert"),qeo=o(" \u2014 "),RP=a("a"),jeo=o("ConvBertConfig"),Deo=o(" (ConvBERT model)"),Geo=l(),Ef=a("li"),Ale=a("strong"),Oeo=o("convnext"),Veo=o(" \u2014 "),PP=a("a"),Xeo=o("ConvNextConfig"),zeo=o(" (ConvNeXT model)"),Weo=l(),Cf=a("li"),Lle=a("strong"),Qeo=o("ctrl"),Ueo=o(" \u2014 "),BP=a("a"),Heo=o("CTRLConfig"),Jeo=o(" (CTRL model)"),Yeo=l(),wf=a("li"),yle=a("strong"),Keo=o("cvt"),Zeo=o(" \u2014 "),IP=a("a"),eoo=o("CvtConfig"),ooo=o(" (CvT model)"),roo=l(),Af=a("li"),xle=a("strong"),too=o("data2vec-audio"),aoo=o(" \u2014 "),NP=a("a"),noo=o("Data2VecAudioConfig"),soo=o(" (Data2VecAudio model)"),loo=l(),Lf=a("li"),$le=a("strong"),ioo=o("data2vec-text"),doo=o(" \u2014 "),qP=a("a"),coo=o("Data2VecTextConfig"),moo=o(" (Data2VecText model)"),foo=l(),yf=a("li"),kle=a("strong"),goo=o("data2vec-vision"),hoo=o(" \u2014 "),jP=a("a"),uoo=o("Data2VecVisionConfig"),poo=o(" (Data2VecVision model)"),_oo=l(),xf=a("li"),Sle=a("strong"),boo=o("deberta"),voo=o(" \u2014 "),DP=a("a"),Foo=o("DebertaConfig"),Too=o(" (DeBERTa model)"),Moo=l(),$f=a("li"),Rle=a("strong"),Eoo=o("deberta-v2"),Coo=o(" \u2014 "),GP=a("a"),woo=o("DebertaV2Config"),Aoo=o(" (DeBERTa-v2 model)"),Loo=l(),kf=a("li"),Ple=a("strong"),yoo=o("decision_transformer"),xoo=o(" \u2014 "),OP=a("a"),$oo=o("DecisionTransformerConfig"),koo=o(" (Decision Transformer model)"),Soo=l(),Sf=a("li"),Ble=a("strong"),Roo=o("deit"),Poo=o(" \u2014 "),VP=a("a"),Boo=o("DeiTConfig"),Ioo=o(" (DeiT model)"),Noo=l(),Rf=a("li"),Ile=a("strong"),qoo=o("detr"),joo=o(" \u2014 "),XP=a("a"),Doo=o("DetrConfig"),Goo=o(" (DETR model)"),Ooo=l(),Pf=a("li"),Nle=a("strong"),Voo=o("distilbert"),Xoo=o(" \u2014 "),zP=a("a"),zoo=o("DistilBertConfig"),Woo=o(" (DistilBERT model)"),Qoo=l(),Bf=a("li"),qle=a("strong"),Uoo=o("donut-swin"),Hoo=o(" \u2014 "),WP=a("a"),Joo=o("DonutSwinConfig"),Yoo=o(" (DonutSwin model)"),Koo=l(),If=a("li"),jle=a("strong"),Zoo=o("dpr"),ero=o(" \u2014 "),QP=a("a"),oro=o("DPRConfig"),rro=o(" (DPR model)"),tro=l(),Nf=a("li"),Dle=a("strong"),aro=o("dpt"),nro=o(" \u2014 "),UP=a("a"),sro=o("DPTConfig"),lro=o(" (DPT model)"),iro=l(),qf=a("li"),Gle=a("strong"),dro=o("electra"),cro=o(" \u2014 "),HP=a("a"),mro=o("ElectraConfig"),fro=o(" (ELECTRA model)"),gro=l(),jf=a("li"),Ole=a("strong"),hro=o("encoder-decoder"),uro=o(" \u2014 "),JP=a("a"),pro=o("EncoderDecoderConfig"),_ro=o(" (Encoder decoder model)"),bro=l(),Df=a("li"),Vle=a("strong"),vro=o("flaubert"),Fro=o(" \u2014 "),YP=a("a"),Tro=o("FlaubertConfig"),Mro=o(" (FlauBERT model)"),Ero=l(),Gf=a("li"),Xle=a("strong"),Cro=o("flava"),wro=o(" \u2014 "),KP=a("a"),Aro=o("FlavaConfig"),Lro=o(" (FLAVA model)"),yro=l(),Of=a("li"),zle=a("strong"),xro=o("fnet"),$ro=o(" \u2014 "),ZP=a("a"),kro=o("FNetConfig"),Sro=o(" (FNet model)"),Rro=l(),Vf=a("li"),Wle=a("strong"),Pro=o("fsmt"),Bro=o(" \u2014 "),eB=a("a"),Iro=o("FSMTConfig"),Nro=o(" (FairSeq Machine-Translation model)"),qro=l(),Xf=a("li"),Qle=a("strong"),jro=o("funnel"),Dro=o(" \u2014 "),oB=a("a"),Gro=o("FunnelConfig"),Oro=o(" (Funnel Transformer model)"),Vro=l(),zf=a("li"),Ule=a("strong"),Xro=o("glpn"),zro=o(" \u2014 "),rB=a("a"),Wro=o("GLPNConfig"),Qro=o(" (GLPN model)"),Uro=l(),Wf=a("li"),Hle=a("strong"),Hro=o("gpt2"),Jro=o(" \u2014 "),tB=a("a"),Yro=o("GPT2Config"),Kro=o(" (OpenAI GPT-2 model)"),Zro=l(),Qf=a("li"),Jle=a("strong"),eto=o("gpt_neo"),oto=o(" \u2014 "),aB=a("a"),rto=o("GPTNeoConfig"),tto=o(" (GPT Neo model)"),ato=l(),Uf=a("li"),Yle=a("strong"),nto=o("gpt_neox"),sto=o(" \u2014 "),nB=a("a"),lto=o("GPTNeoXConfig"),ito=o(" (GPT NeoX model)"),dto=l(),Hf=a("li"),Kle=a("strong"),cto=o("gptj"),mto=o(" \u2014 "),sB=a("a"),fto=o("GPTJConfig"),gto=o(" (GPT-J model)"),hto=l(),Jf=a("li"),Zle=a("strong"),uto=o("groupvit"),pto=o(" \u2014 "),lB=a("a"),_to=o("GroupViTConfig"),bto=o(" (GroupViT model)"),vto=l(),Yf=a("li"),eie=a("strong"),Fto=o("hubert"),Tto=o(" \u2014 "),iB=a("a"),Mto=o("HubertConfig"),Eto=o(" (Hubert model)"),Cto=l(),Kf=a("li"),oie=a("strong"),wto=o("ibert"),Ato=o(" \u2014 "),dB=a("a"),Lto=o("IBertConfig"),yto=o(" (I-BERT model)"),xto=l(),Zf=a("li"),rie=a("strong"),$to=o("imagegpt"),kto=o(" \u2014 "),cB=a("a"),Sto=o("ImageGPTConfig"),Rto=o(" (ImageGPT model)"),Pto=l(),eg=a("li"),tie=a("strong"),Bto=o("layoutlm"),Ito=o(" \u2014 "),mB=a("a"),Nto=o("LayoutLMConfig"),qto=o(" (LayoutLM model)"),jto=l(),og=a("li"),aie=a("strong"),Dto=o("layoutlmv2"),Gto=o(" \u2014 "),fB=a("a"),Oto=o("LayoutLMv2Config"),Vto=o(" (LayoutLMv2 model)"),Xto=l(),rg=a("li"),nie=a("strong"),zto=o("layoutlmv3"),Wto=o(" \u2014 "),gB=a("a"),Qto=o("LayoutLMv3Config"),Uto=o(" (LayoutLMv3 model)"),Hto=l(),tg=a("li"),sie=a("strong"),Jto=o("led"),Yto=o(" \u2014 "),hB=a("a"),Kto=o("LEDConfig"),Zto=o(" (LED model)"),eao=l(),ag=a("li"),lie=a("strong"),oao=o("levit"),rao=o(" \u2014 "),uB=a("a"),tao=o("LevitConfig"),aao=o(" (LeViT model)"),nao=l(),ng=a("li"),iie=a("strong"),sao=o("longformer"),lao=o(" \u2014 "),pB=a("a"),iao=o("LongformerConfig"),dao=o(" (Longformer model)"),cao=l(),sg=a("li"),die=a("strong"),mao=o("longt5"),fao=o(" \u2014 "),_B=a("a"),gao=o("LongT5Config"),hao=o(" (LongT5 model)"),uao=l(),lg=a("li"),cie=a("strong"),pao=o("luke"),_ao=o(" \u2014 "),bB=a("a"),bao=o("LukeConfig"),vao=o(" (LUKE model)"),Fao=l(),ig=a("li"),mie=a("strong"),Tao=o("lxmert"),Mao=o(" \u2014 "),vB=a("a"),Eao=o("LxmertConfig"),Cao=o(" (LXMERT model)"),wao=l(),dg=a("li"),fie=a("strong"),Aao=o("m2m_100"),Lao=o(" \u2014 "),FB=a("a"),yao=o("M2M100Config"),xao=o(" (M2M100 model)"),$ao=l(),cg=a("li"),gie=a("strong"),kao=o("marian"),Sao=o(" \u2014 "),TB=a("a"),Rao=o("MarianConfig"),Pao=o(" (Marian model)"),Bao=l(),mg=a("li"),hie=a("strong"),Iao=o("maskformer"),Nao=o(" \u2014 "),MB=a("a"),qao=o("MaskFormerConfig"),jao=o(" (MaskFormer model)"),Dao=l(),fg=a("li"),uie=a("strong"),Gao=o("mbart"),Oao=o(" \u2014 "),EB=a("a"),Vao=o("MBartConfig"),Xao=o(" (mBART model)"),zao=l(),gg=a("li"),pie=a("strong"),Wao=o("mctct"),Qao=o(" \u2014 "),CB=a("a"),Uao=o("MCTCTConfig"),Hao=o(" (M-CTC-T model)"),Jao=l(),hg=a("li"),_ie=a("strong"),Yao=o("megatron-bert"),Kao=o(" \u2014 "),wB=a("a"),Zao=o("MegatronBertConfig"),eno=o(" (Megatron-BERT model)"),ono=l(),ug=a("li"),bie=a("strong"),rno=o("mobilebert"),tno=o(" \u2014 "),AB=a("a"),ano=o("MobileBertConfig"),nno=o(" (MobileBERT model)"),sno=l(),pg=a("li"),vie=a("strong"),lno=o("mobilevit"),ino=o(" \u2014 "),LB=a("a"),dno=o("MobileViTConfig"),cno=o(" (MobileViT model)"),mno=l(),_g=a("li"),Fie=a("strong"),fno=o("mpnet"),gno=o(" \u2014 "),yB=a("a"),hno=o("MPNetConfig"),uno=o(" (MPNet model)"),pno=l(),bg=a("li"),Tie=a("strong"),_no=o("mt5"),bno=o(" \u2014 "),xB=a("a"),vno=o("MT5Config"),Fno=o(" (MT5 model)"),Tno=l(),vg=a("li"),Mie=a("strong"),Mno=o("mvp"),Eno=o(" \u2014 "),$B=a("a"),Cno=o("MvpConfig"),wno=o(" (MVP model)"),Ano=l(),Fg=a("li"),Eie=a("strong"),Lno=o("nezha"),yno=o(" \u2014 "),kB=a("a"),xno=o("NezhaConfig"),$no=o(" (Nezha model)"),kno=l(),Tg=a("li"),Cie=a("strong"),Sno=o("nystromformer"),Rno=o(" \u2014 "),SB=a("a"),Pno=o("NystromformerConfig"),Bno=o(" (Nystr\xF6mformer model)"),Ino=l(),Mg=a("li"),wie=a("strong"),Nno=o("openai-gpt"),qno=o(" \u2014 "),RB=a("a"),jno=o("OpenAIGPTConfig"),Dno=o(" (OpenAI GPT model)"),Gno=l(),Eg=a("li"),Aie=a("strong"),Ono=o("opt"),Vno=o(" \u2014 "),PB=a("a"),Xno=o("OPTConfig"),zno=o(" (OPT model)"),Wno=l(),Cg=a("li"),Lie=a("strong"),Qno=o("owlvit"),Uno=o(" \u2014 "),BB=a("a"),Hno=o("OwlViTConfig"),Jno=o(" (OWL-ViT model)"),Yno=l(),wg=a("li"),yie=a("strong"),Kno=o("pegasus"),Zno=o(" \u2014 "),IB=a("a"),eso=o("PegasusConfig"),oso=o(" (Pegasus model)"),rso=l(),Ag=a("li"),xie=a("strong"),tso=o("perceiver"),aso=o(" \u2014 "),NB=a("a"),nso=o("PerceiverConfig"),sso=o(" (Perceiver model)"),lso=l(),Lg=a("li"),$ie=a("strong"),iso=o("plbart"),dso=o(" \u2014 "),qB=a("a"),cso=o("PLBartConfig"),mso=o(" (PLBart model)"),fso=l(),yg=a("li"),kie=a("strong"),gso=o("poolformer"),hso=o(" \u2014 "),jB=a("a"),uso=o("PoolFormerConfig"),pso=o(" (PoolFormer model)"),_so=l(),xg=a("li"),Sie=a("strong"),bso=o("prophetnet"),vso=o(" \u2014 "),DB=a("a"),Fso=o("ProphetNetConfig"),Tso=o(" (ProphetNet model)"),Mso=l(),$g=a("li"),Rie=a("strong"),Eso=o("qdqbert"),Cso=o(" \u2014 "),GB=a("a"),wso=o("QDQBertConfig"),Aso=o(" (QDQBert model)"),Lso=l(),kg=a("li"),Pie=a("strong"),yso=o("rag"),xso=o(" \u2014 "),OB=a("a"),$so=o("RagConfig"),kso=o(" (RAG model)"),Sso=l(),Sg=a("li"),Bie=a("strong"),Rso=o("realm"),Pso=o(" \u2014 "),VB=a("a"),Bso=o("RealmConfig"),Iso=o(" (REALM model)"),Nso=l(),Rg=a("li"),Iie=a("strong"),qso=o("reformer"),jso=o(" \u2014 "),XB=a("a"),Dso=o("ReformerConfig"),Gso=o(" (Reformer model)"),Oso=l(),Pg=a("li"),Nie=a("strong"),Vso=o("regnet"),Xso=o(" \u2014 "),zB=a("a"),zso=o("RegNetConfig"),Wso=o(" (RegNet model)"),Qso=l(),Bg=a("li"),qie=a("strong"),Uso=o("rembert"),Hso=o(" \u2014 "),WB=a("a"),Jso=o("RemBertConfig"),Yso=o(" (RemBERT model)"),Kso=l(),Ig=a("li"),jie=a("strong"),Zso=o("resnet"),elo=o(" \u2014 "),QB=a("a"),olo=o("ResNetConfig"),rlo=o(" (ResNet model)"),tlo=l(),Ng=a("li"),Die=a("strong"),alo=o("retribert"),nlo=o(" \u2014 "),UB=a("a"),slo=o("RetriBertConfig"),llo=o(" (RetriBERT model)"),ilo=l(),qg=a("li"),Gie=a("strong"),dlo=o("roberta"),clo=o(" \u2014 "),HB=a("a"),mlo=o("RobertaConfig"),flo=o(" (RoBERTa model)"),glo=l(),jg=a("li"),Oie=a("strong"),hlo=o("roformer"),ulo=o(" \u2014 "),JB=a("a"),plo=o("RoFormerConfig"),_lo=o(" (RoFormer model)"),blo=l(),Dg=a("li"),Vie=a("strong"),vlo=o("segformer"),Flo=o(" \u2014 "),YB=a("a"),Tlo=o("SegformerConfig"),Mlo=o(" (SegFormer model)"),Elo=l(),Gg=a("li"),Xie=a("strong"),Clo=o("sew"),wlo=o(" \u2014 "),KB=a("a"),Alo=o("SEWConfig"),Llo=o(" (SEW model)"),ylo=l(),Og=a("li"),zie=a("strong"),xlo=o("sew-d"),$lo=o(" \u2014 "),ZB=a("a"),klo=o("SEWDConfig"),Slo=o(" (SEW-D model)"),Rlo=l(),Vg=a("li"),Wie=a("strong"),Plo=o("speech-encoder-decoder"),Blo=o(" \u2014 "),eI=a("a"),Ilo=o("SpeechEncoderDecoderConfig"),Nlo=o(" (Speech Encoder decoder model)"),qlo=l(),Xg=a("li"),Qie=a("strong"),jlo=o("speech_to_text"),Dlo=o(" \u2014 "),oI=a("a"),Glo=o("Speech2TextConfig"),Olo=o(" (Speech2Text model)"),Vlo=l(),zg=a("li"),Uie=a("strong"),Xlo=o("speech_to_text_2"),zlo=o(" \u2014 "),rI=a("a"),Wlo=o("Speech2Text2Config"),Qlo=o(" (Speech2Text2 model)"),Ulo=l(),Wg=a("li"),Hie=a("strong"),Hlo=o("splinter"),Jlo=o(" \u2014 "),tI=a("a"),Ylo=o("SplinterConfig"),Klo=o(" (Splinter model)"),Zlo=l(),Qg=a("li"),Jie=a("strong"),eio=o("squeezebert"),oio=o(" \u2014 "),aI=a("a"),rio=o("SqueezeBertConfig"),tio=o(" (SqueezeBERT model)"),aio=l(),Ug=a("li"),Yie=a("strong"),nio=o("swin"),sio=o(" \u2014 "),nI=a("a"),lio=o("SwinConfig"),iio=o(" (Swin Transformer model)"),dio=l(),Hg=a("li"),Kie=a("strong"),cio=o("swinv2"),mio=o(" \u2014 "),sI=a("a"),fio=o("Swinv2Config"),gio=o(" (Swin Transformer V2 model)"),hio=l(),Jg=a("li"),Zie=a("strong"),uio=o("t5"),pio=o(" \u2014 "),lI=a("a"),_io=o("T5Config"),bio=o(" (T5 model)"),vio=l(),Yg=a("li"),ede=a("strong"),Fio=o("tapas"),Tio=o(" \u2014 "),iI=a("a"),Mio=o("TapasConfig"),Eio=o(" (TAPAS model)"),Cio=l(),Kg=a("li"),ode=a("strong"),wio=o("trajectory_transformer"),Aio=o(" \u2014 "),dI=a("a"),Lio=o("TrajectoryTransformerConfig"),yio=o(" (Trajectory Transformer model)"),xio=l(),Zg=a("li"),rde=a("strong"),$io=o("transfo-xl"),kio=o(" \u2014 "),cI=a("a"),Sio=o("TransfoXLConfig"),Rio=o(" (Transformer-XL model)"),Pio=l(),eh=a("li"),tde=a("strong"),Bio=o("trocr"),Iio=o(" \u2014 "),mI=a("a"),Nio=o("TrOCRConfig"),qio=o(" (TrOCR model)"),jio=l(),oh=a("li"),ade=a("strong"),Dio=o("unispeech"),Gio=o(" \u2014 "),fI=a("a"),Oio=o("UniSpeechConfig"),Vio=o(" (UniSpeech model)"),Xio=l(),rh=a("li"),nde=a("strong"),zio=o("unispeech-sat"),Wio=o(" \u2014 "),gI=a("a"),Qio=o("UniSpeechSatConfig"),Uio=o(" (UniSpeechSat model)"),Hio=l(),th=a("li"),sde=a("strong"),Jio=o("van"),Yio=o(" \u2014 "),hI=a("a"),Kio=o("VanConfig"),Zio=o(" (VAN model)"),edo=l(),ah=a("li"),lde=a("strong"),odo=o("videomae"),rdo=o(" \u2014 "),uI=a("a"),tdo=o("VideoMAEConfig"),ado=o(" (VideoMAE model)"),ndo=l(),nh=a("li"),ide=a("strong"),sdo=o("vilt"),ldo=o(" \u2014 "),pI=a("a"),ido=o("ViltConfig"),ddo=o(" (ViLT model)"),cdo=l(),sh=a("li"),dde=a("strong"),mdo=o("vision-encoder-decoder"),fdo=o(" \u2014 "),_I=a("a"),gdo=o("VisionEncoderDecoderConfig"),hdo=o(" (Vision Encoder decoder model)"),udo=l(),lh=a("li"),cde=a("strong"),pdo=o("vision-text-dual-encoder"),_do=o(" \u2014 "),bI=a("a"),bdo=o("VisionTextDualEncoderConfig"),vdo=o(" (VisionTextDualEncoder model)"),Fdo=l(),ih=a("li"),mde=a("strong"),Tdo=o("visual_bert"),Mdo=o(" \u2014 "),vI=a("a"),Edo=o("VisualBertConfig"),Cdo=o(" (VisualBERT model)"),wdo=l(),dh=a("li"),fde=a("strong"),Ado=o("vit"),Ldo=o(" \u2014 "),FI=a("a"),ydo=o("ViTConfig"),xdo=o(" (ViT model)"),$do=l(),ch=a("li"),gde=a("strong"),kdo=o("vit_mae"),Sdo=o(" \u2014 "),TI=a("a"),Rdo=o("ViTMAEConfig"),Pdo=o(" (ViTMAE model)"),Bdo=l(),mh=a("li"),hde=a("strong"),Ido=o("wav2vec2"),Ndo=o(" \u2014 "),MI=a("a"),qdo=o("Wav2Vec2Config"),jdo=o(" (Wav2Vec2 model)"),Ddo=l(),fh=a("li"),ude=a("strong"),Gdo=o("wav2vec2-conformer"),Odo=o(" \u2014 "),EI=a("a"),Vdo=o("Wav2Vec2ConformerConfig"),Xdo=o(" (Wav2Vec2-Conformer model)"),zdo=l(),gh=a("li"),pde=a("strong"),Wdo=o("wavlm"),Qdo=o(" \u2014 "),CI=a("a"),Udo=o("WavLMConfig"),Hdo=o(" (WavLM model)"),Jdo=l(),hh=a("li"),_de=a("strong"),Ydo=o("xglm"),Kdo=o(" \u2014 "),wI=a("a"),Zdo=o("XGLMConfig"),eco=o(" (XGLM model)"),oco=l(),uh=a("li"),bde=a("strong"),rco=o("xlm"),tco=o(" \u2014 "),AI=a("a"),aco=o("XLMConfig"),nco=o(" (XLM model)"),sco=l(),ph=a("li"),vde=a("strong"),lco=o("xlm-prophetnet"),ico=o(" \u2014 "),LI=a("a"),dco=o("XLMProphetNetConfig"),cco=o(" (XLM-ProphetNet model)"),mco=l(),_h=a("li"),Fde=a("strong"),fco=o("xlm-roberta"),gco=o(" \u2014 "),yI=a("a"),hco=o("XLMRobertaConfig"),uco=o(" (XLM-RoBERTa model)"),pco=l(),bh=a("li"),Tde=a("strong"),_co=o("xlm-roberta-xl"),bco=o(" \u2014 "),xI=a("a"),vco=o("XLMRobertaXLConfig"),Fco=o(" (XLM-RoBERTa-XL model)"),Tco=l(),vh=a("li"),Mde=a("strong"),Mco=o("xlnet"),Eco=o(" \u2014 "),$I=a("a"),Cco=o("XLNetConfig"),wco=o(" (XLNet model)"),Aco=l(),Fh=a("li"),Ede=a("strong"),Lco=o("yolos"),yco=o(" \u2014 "),kI=a("a"),xco=o("YolosConfig"),$co=o(" (YOLOS model)"),kco=l(),Th=a("li"),Cde=a("strong"),Sco=o("yoso"),Rco=o(" \u2014 "),SI=a("a"),Pco=o("YosoConfig"),Bco=o(" (YOSO model)"),Ico=l(),F(Mh.$$.fragment),Nco=l(),Eh=a("div"),F($8.$$.fragment),qco=l(),wde=a("p"),jco=o("Register a new configuration for this class."),$Ue=l(),Ki=a("h2"),Ch=a("a"),Ade=a("span"),F(k8.$$.fragment),Dco=l(),Lde=a("span"),Gco=o("AutoTokenizer"),kUe=l(),xo=a("div"),F(S8.$$.fragment),Oco=l(),R8=a("p"),Vco=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),RI=a("a"),Xco=o("AutoTokenizer.from_pretrained()"),zco=o(" class method."),Wco=l(),P8=a("p"),Qco=o("This class cannot be instantiated directly using "),yde=a("code"),Uco=o("__init__()"),Hco=o(" (throws an error)."),Jco=l(),Sr=a("div"),F(B8.$$.fragment),Yco=l(),xde=a("p"),Kco=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Zco=l(),Ga=a("p"),emo=o("The tokenizer class to instantiate is selected based on the "),$de=a("code"),omo=o("model_type"),rmo=o(` property of the config object (either
passed as an argument or loaded from `),kde=a("code"),tmo=o("pretrained_model_name_or_path"),amo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sde=a("code"),nmo=o("pretrained_model_name_or_path"),smo=o(":"),lmo=l(),k=a("ul"),Hn=a("li"),Rde=a("strong"),imo=o("albert"),dmo=o(" \u2014 "),PI=a("a"),cmo=o("AlbertTokenizer"),mmo=o(" or "),BI=a("a"),fmo=o("AlbertTokenizerFast"),gmo=o(" (ALBERT model)"),hmo=l(),Jn=a("li"),Pde=a("strong"),umo=o("bart"),pmo=o(" \u2014 "),II=a("a"),_mo=o("BartTokenizer"),bmo=o(" or "),NI=a("a"),vmo=o("BartTokenizerFast"),Fmo=o(" (BART model)"),Tmo=l(),Yn=a("li"),Bde=a("strong"),Mmo=o("barthez"),Emo=o(" \u2014 "),qI=a("a"),Cmo=o("BarthezTokenizer"),wmo=o(" or "),jI=a("a"),Amo=o("BarthezTokenizerFast"),Lmo=o(" (BARThez model)"),ymo=l(),wh=a("li"),Ide=a("strong"),xmo=o("bartpho"),$mo=o(" \u2014 "),DI=a("a"),kmo=o("BartphoTokenizer"),Smo=o(" (BARTpho model)"),Rmo=l(),Kn=a("li"),Nde=a("strong"),Pmo=o("bert"),Bmo=o(" \u2014 "),GI=a("a"),Imo=o("BertTokenizer"),Nmo=o(" or "),OI=a("a"),qmo=o("BertTokenizerFast"),jmo=o(" (BERT model)"),Dmo=l(),Ah=a("li"),qde=a("strong"),Gmo=o("bert-generation"),Omo=o(" \u2014 "),VI=a("a"),Vmo=o("BertGenerationTokenizer"),Xmo=o(" (Bert Generation model)"),zmo=l(),Lh=a("li"),jde=a("strong"),Wmo=o("bert-japanese"),Qmo=o(" \u2014 "),XI=a("a"),Umo=o("BertJapaneseTokenizer"),Hmo=o(" (BertJapanese model)"),Jmo=l(),yh=a("li"),Dde=a("strong"),Ymo=o("bertweet"),Kmo=o(" \u2014 "),zI=a("a"),Zmo=o("BertweetTokenizer"),efo=o(" (BERTweet model)"),ofo=l(),Zn=a("li"),Gde=a("strong"),rfo=o("big_bird"),tfo=o(" \u2014 "),WI=a("a"),afo=o("BigBirdTokenizer"),nfo=o(" or "),QI=a("a"),sfo=o("BigBirdTokenizerFast"),lfo=o(" (BigBird model)"),ifo=l(),es=a("li"),Ode=a("strong"),dfo=o("bigbird_pegasus"),cfo=o(" \u2014 "),UI=a("a"),mfo=o("PegasusTokenizer"),ffo=o(" or "),HI=a("a"),gfo=o("PegasusTokenizerFast"),hfo=o(" (BigBird-Pegasus model)"),ufo=l(),os=a("li"),Vde=a("strong"),pfo=o("blenderbot"),_fo=o(" \u2014 "),JI=a("a"),bfo=o("BlenderbotTokenizer"),vfo=o(" or "),YI=a("a"),Ffo=o("BlenderbotTokenizerFast"),Tfo=o(" (Blenderbot model)"),Mfo=l(),xh=a("li"),Xde=a("strong"),Efo=o("blenderbot-small"),Cfo=o(" \u2014 "),KI=a("a"),wfo=o("BlenderbotSmallTokenizer"),Afo=o(" (BlenderbotSmall model)"),Lfo=l(),$h=a("li"),zde=a("strong"),yfo=o("bloom"),xfo=o(" \u2014 "),ZI=a("a"),$fo=o("BloomTokenizerFast"),kfo=o(" (BLOOM model)"),Sfo=l(),kh=a("li"),Wde=a("strong"),Rfo=o("byt5"),Pfo=o(" \u2014 "),eN=a("a"),Bfo=o("ByT5Tokenizer"),Ifo=o(" (ByT5 model)"),Nfo=l(),rs=a("li"),Qde=a("strong"),qfo=o("camembert"),jfo=o(" \u2014 "),oN=a("a"),Dfo=o("CamembertTokenizer"),Gfo=o(" or "),rN=a("a"),Ofo=o("CamembertTokenizerFast"),Vfo=o(" (CamemBERT model)"),Xfo=l(),Sh=a("li"),Ude=a("strong"),zfo=o("canine"),Wfo=o(" \u2014 "),tN=a("a"),Qfo=o("CanineTokenizer"),Ufo=o(" (CANINE model)"),Hfo=l(),ts=a("li"),Hde=a("strong"),Jfo=o("clip"),Yfo=o(" \u2014 "),aN=a("a"),Kfo=o("CLIPTokenizer"),Zfo=o(" or "),nN=a("a"),ego=o("CLIPTokenizerFast"),ogo=o(" (CLIP model)"),rgo=l(),as=a("li"),Jde=a("strong"),tgo=o("codegen"),ago=o(" \u2014 "),sN=a("a"),ngo=o("CodeGenTokenizer"),sgo=o(" or "),lN=a("a"),lgo=o("CodeGenTokenizerFast"),igo=o(" (CodeGen model)"),dgo=l(),ns=a("li"),Yde=a("strong"),cgo=o("convbert"),mgo=o(" \u2014 "),iN=a("a"),fgo=o("ConvBertTokenizer"),ggo=o(" or "),dN=a("a"),hgo=o("ConvBertTokenizerFast"),ugo=o(" (ConvBERT model)"),pgo=l(),ss=a("li"),Kde=a("strong"),_go=o("cpm"),bgo=o(" \u2014 "),cN=a("a"),vgo=o("CpmTokenizer"),Fgo=o(" or "),mN=a("a"),Tgo=o("CpmTokenizerFast"),Mgo=o(" (CPM model)"),Ego=l(),Rh=a("li"),Zde=a("strong"),Cgo=o("ctrl"),wgo=o(" \u2014 "),fN=a("a"),Ago=o("CTRLTokenizer"),Lgo=o(" (CTRL model)"),ygo=l(),ls=a("li"),ece=a("strong"),xgo=o("data2vec-text"),$go=o(" \u2014 "),gN=a("a"),kgo=o("RobertaTokenizer"),Sgo=o(" or "),hN=a("a"),Rgo=o("RobertaTokenizerFast"),Pgo=o(" (Data2VecText model)"),Bgo=l(),is=a("li"),oce=a("strong"),Igo=o("deberta"),Ngo=o(" \u2014 "),uN=a("a"),qgo=o("DebertaTokenizer"),jgo=o(" or "),pN=a("a"),Dgo=o("DebertaTokenizerFast"),Ggo=o(" (DeBERTa model)"),Ogo=l(),ds=a("li"),rce=a("strong"),Vgo=o("deberta-v2"),Xgo=o(" \u2014 "),_N=a("a"),zgo=o("DebertaV2Tokenizer"),Wgo=o(" or "),bN=a("a"),Qgo=o("DebertaV2TokenizerFast"),Ugo=o(" (DeBERTa-v2 model)"),Hgo=l(),cs=a("li"),tce=a("strong"),Jgo=o("distilbert"),Ygo=o(" \u2014 "),vN=a("a"),Kgo=o("DistilBertTokenizer"),Zgo=o(" or "),FN=a("a"),eho=o("DistilBertTokenizerFast"),oho=o(" (DistilBERT model)"),rho=l(),ms=a("li"),ace=a("strong"),tho=o("dpr"),aho=o(" \u2014 "),TN=a("a"),nho=o("DPRQuestionEncoderTokenizer"),sho=o(" or "),MN=a("a"),lho=o("DPRQuestionEncoderTokenizerFast"),iho=o(" (DPR model)"),dho=l(),fs=a("li"),nce=a("strong"),cho=o("electra"),mho=o(" \u2014 "),EN=a("a"),fho=o("ElectraTokenizer"),gho=o(" or "),CN=a("a"),hho=o("ElectraTokenizerFast"),uho=o(" (ELECTRA model)"),pho=l(),Ph=a("li"),sce=a("strong"),_ho=o("flaubert"),bho=o(" \u2014 "),wN=a("a"),vho=o("FlaubertTokenizer"),Fho=o(" (FlauBERT model)"),Tho=l(),gs=a("li"),lce=a("strong"),Mho=o("fnet"),Eho=o(" \u2014 "),AN=a("a"),Cho=o("FNetTokenizer"),who=o(" or "),LN=a("a"),Aho=o("FNetTokenizerFast"),Lho=o(" (FNet model)"),yho=l(),Bh=a("li"),ice=a("strong"),xho=o("fsmt"),$ho=o(" \u2014 "),yN=a("a"),kho=o("FSMTTokenizer"),Sho=o(" (FairSeq Machine-Translation model)"),Rho=l(),hs=a("li"),dce=a("strong"),Pho=o("funnel"),Bho=o(" \u2014 "),xN=a("a"),Iho=o("FunnelTokenizer"),Nho=o(" or "),$N=a("a"),qho=o("FunnelTokenizerFast"),jho=o(" (Funnel Transformer model)"),Dho=l(),us=a("li"),cce=a("strong"),Gho=o("gpt2"),Oho=o(" \u2014 "),kN=a("a"),Vho=o("GPT2Tokenizer"),Xho=o(" or "),SN=a("a"),zho=o("GPT2TokenizerFast"),Who=o(" (OpenAI GPT-2 model)"),Qho=l(),ps=a("li"),mce=a("strong"),Uho=o("gpt_neo"),Hho=o(" \u2014 "),RN=a("a"),Jho=o("GPT2Tokenizer"),Yho=o(" or "),PN=a("a"),Kho=o("GPT2TokenizerFast"),Zho=o(" (GPT Neo model)"),euo=l(),Ih=a("li"),fce=a("strong"),ouo=o("gpt_neox"),ruo=o(" \u2014 "),BN=a("a"),tuo=o("GPTNeoXTokenizerFast"),auo=o(" (GPT NeoX model)"),nuo=l(),_s=a("li"),gce=a("strong"),suo=o("gptj"),luo=o(" \u2014 "),IN=a("a"),iuo=o("GPT2Tokenizer"),duo=o(" or "),NN=a("a"),cuo=o("GPT2TokenizerFast"),muo=o(" (GPT-J model)"),fuo=l(),bs=a("li"),hce=a("strong"),guo=o("groupvit"),huo=o(" \u2014 "),qN=a("a"),uuo=o("CLIPTokenizer"),puo=o(" or "),jN=a("a"),_uo=o("CLIPTokenizerFast"),buo=o(" (GroupViT model)"),vuo=l(),vs=a("li"),uce=a("strong"),Fuo=o("herbert"),Tuo=o(" \u2014 "),DN=a("a"),Muo=o("HerbertTokenizer"),Euo=o(" or "),GN=a("a"),Cuo=o("HerbertTokenizerFast"),wuo=o(" (HerBERT model)"),Auo=l(),Nh=a("li"),pce=a("strong"),Luo=o("hubert"),yuo=o(" \u2014 "),ON=a("a"),xuo=o("Wav2Vec2CTCTokenizer"),$uo=o(" (Hubert model)"),kuo=l(),Fs=a("li"),_ce=a("strong"),Suo=o("ibert"),Ruo=o(" \u2014 "),VN=a("a"),Puo=o("RobertaTokenizer"),Buo=o(" or "),XN=a("a"),Iuo=o("RobertaTokenizerFast"),Nuo=o(" (I-BERT model)"),quo=l(),Ts=a("li"),bce=a("strong"),juo=o("layoutlm"),Duo=o(" \u2014 "),zN=a("a"),Guo=o("LayoutLMTokenizer"),Ouo=o(" or "),WN=a("a"),Vuo=o("LayoutLMTokenizerFast"),Xuo=o(" (LayoutLM model)"),zuo=l(),Ms=a("li"),vce=a("strong"),Wuo=o("layoutlmv2"),Quo=o(" \u2014 "),QN=a("a"),Uuo=o("LayoutLMv2Tokenizer"),Huo=o(" or "),UN=a("a"),Juo=o("LayoutLMv2TokenizerFast"),Yuo=o(" (LayoutLMv2 model)"),Kuo=l(),Es=a("li"),Fce=a("strong"),Zuo=o("layoutlmv3"),epo=o(" \u2014 "),HN=a("a"),opo=o("LayoutLMv3Tokenizer"),rpo=o(" or "),JN=a("a"),tpo=o("LayoutLMv3TokenizerFast"),apo=o(" (LayoutLMv3 model)"),npo=l(),Cs=a("li"),Tce=a("strong"),spo=o("layoutxlm"),lpo=o(" \u2014 "),YN=a("a"),ipo=o("LayoutXLMTokenizer"),dpo=o(" or "),KN=a("a"),cpo=o("LayoutXLMTokenizerFast"),mpo=o(" (LayoutXLM model)"),fpo=l(),ws=a("li"),Mce=a("strong"),gpo=o("led"),hpo=o(" \u2014 "),ZN=a("a"),upo=o("LEDTokenizer"),ppo=o(" or "),eq=a("a"),_po=o("LEDTokenizerFast"),bpo=o(" (LED model)"),vpo=l(),As=a("li"),Ece=a("strong"),Fpo=o("longformer"),Tpo=o(" \u2014 "),oq=a("a"),Mpo=o("LongformerTokenizer"),Epo=o(" or "),rq=a("a"),Cpo=o("LongformerTokenizerFast"),wpo=o(" (Longformer model)"),Apo=l(),Ls=a("li"),Cce=a("strong"),Lpo=o("longt5"),ypo=o(" \u2014 "),tq=a("a"),xpo=o("T5Tokenizer"),$po=o(" or "),aq=a("a"),kpo=o("T5TokenizerFast"),Spo=o(" (LongT5 model)"),Rpo=l(),qh=a("li"),wce=a("strong"),Ppo=o("luke"),Bpo=o(" \u2014 "),nq=a("a"),Ipo=o("LukeTokenizer"),Npo=o(" (LUKE model)"),qpo=l(),ys=a("li"),Ace=a("strong"),jpo=o("lxmert"),Dpo=o(" \u2014 "),sq=a("a"),Gpo=o("LxmertTokenizer"),Opo=o(" or "),lq=a("a"),Vpo=o("LxmertTokenizerFast"),Xpo=o(" (LXMERT model)"),zpo=l(),jh=a("li"),Lce=a("strong"),Wpo=o("m2m_100"),Qpo=o(" \u2014 "),iq=a("a"),Upo=o("M2M100Tokenizer"),Hpo=o(" (M2M100 model)"),Jpo=l(),Dh=a("li"),yce=a("strong"),Ypo=o("marian"),Kpo=o(" \u2014 "),dq=a("a"),Zpo=o("MarianTokenizer"),e_o=o(" (Marian model)"),o_o=l(),xs=a("li"),xce=a("strong"),r_o=o("mbart"),t_o=o(" \u2014 "),cq=a("a"),a_o=o("MBartTokenizer"),n_o=o(" or "),mq=a("a"),s_o=o("MBartTokenizerFast"),l_o=o(" (mBART model)"),i_o=l(),$s=a("li"),$ce=a("strong"),d_o=o("mbart50"),c_o=o(" \u2014 "),fq=a("a"),m_o=o("MBart50Tokenizer"),f_o=o(" or "),gq=a("a"),g_o=o("MBart50TokenizerFast"),h_o=o(" (mBART-50 model)"),u_o=l(),ks=a("li"),kce=a("strong"),p_o=o("megatron-bert"),__o=o(" \u2014 "),hq=a("a"),b_o=o("BertTokenizer"),v_o=o(" or "),uq=a("a"),F_o=o("BertTokenizerFast"),T_o=o(" (Megatron-BERT model)"),M_o=l(),Gh=a("li"),Sce=a("strong"),E_o=o("mluke"),C_o=o(" \u2014 "),pq=a("a"),w_o=o("MLukeTokenizer"),A_o=o(" (mLUKE model)"),L_o=l(),Ss=a("li"),Rce=a("strong"),y_o=o("mobilebert"),x_o=o(" \u2014 "),_q=a("a"),$_o=o("MobileBertTokenizer"),k_o=o(" or "),bq=a("a"),S_o=o("MobileBertTokenizerFast"),R_o=o(" (MobileBERT model)"),P_o=l(),Rs=a("li"),Pce=a("strong"),B_o=o("mpnet"),I_o=o(" \u2014 "),vq=a("a"),N_o=o("MPNetTokenizer"),q_o=o(" or "),Fq=a("a"),j_o=o("MPNetTokenizerFast"),D_o=o(" (MPNet model)"),G_o=l(),Ps=a("li"),Bce=a("strong"),O_o=o("mt5"),V_o=o(" \u2014 "),Tq=a("a"),X_o=o("MT5Tokenizer"),z_o=o(" or "),Mq=a("a"),W_o=o("MT5TokenizerFast"),Q_o=o(" (MT5 model)"),U_o=l(),Bs=a("li"),Ice=a("strong"),H_o=o("mvp"),J_o=o(" \u2014 "),Eq=a("a"),Y_o=o("MvpTokenizer"),K_o=o(" or "),Cq=a("a"),Z_o=o("MvpTokenizerFast"),e2o=o(" (MVP model)"),o2o=l(),Is=a("li"),Nce=a("strong"),r2o=o("nezha"),t2o=o(" \u2014 "),wq=a("a"),a2o=o("BertTokenizer"),n2o=o(" or "),Aq=a("a"),s2o=o("BertTokenizerFast"),l2o=o(" (Nezha model)"),i2o=l(),Ns=a("li"),qce=a("strong"),d2o=o("nllb"),c2o=o(" \u2014 "),Lq=a("a"),m2o=o("NllbTokenizer"),f2o=o(" or "),yq=a("a"),g2o=o("NllbTokenizerFast"),h2o=o(" (NLLB model)"),u2o=l(),qs=a("li"),jce=a("strong"),p2o=o("nystromformer"),_2o=o(" \u2014 "),xq=a("a"),b2o=o("AlbertTokenizer"),v2o=o(" or "),$q=a("a"),F2o=o("AlbertTokenizerFast"),T2o=o(" (Nystr\xF6mformer model)"),M2o=l(),js=a("li"),Dce=a("strong"),E2o=o("openai-gpt"),C2o=o(" \u2014 "),kq=a("a"),w2o=o("OpenAIGPTTokenizer"),A2o=o(" or "),Sq=a("a"),L2o=o("OpenAIGPTTokenizerFast"),y2o=o(" (OpenAI GPT model)"),x2o=l(),Oh=a("li"),Gce=a("strong"),$2o=o("opt"),k2o=o(" \u2014 "),Rq=a("a"),S2o=o("GPT2Tokenizer"),R2o=o(" (OPT model)"),P2o=l(),Ds=a("li"),Oce=a("strong"),B2o=o("owlvit"),I2o=o(" \u2014 "),Pq=a("a"),N2o=o("CLIPTokenizer"),q2o=o(" or "),Bq=a("a"),j2o=o("CLIPTokenizerFast"),D2o=o(" (OWL-ViT model)"),G2o=l(),Gs=a("li"),Vce=a("strong"),O2o=o("pegasus"),V2o=o(" \u2014 "),Iq=a("a"),X2o=o("PegasusTokenizer"),z2o=o(" or "),Nq=a("a"),W2o=o("PegasusTokenizerFast"),Q2o=o(" (Pegasus model)"),U2o=l(),Vh=a("li"),Xce=a("strong"),H2o=o("perceiver"),J2o=o(" \u2014 "),qq=a("a"),Y2o=o("PerceiverTokenizer"),K2o=o(" (Perceiver model)"),Z2o=l(),Xh=a("li"),zce=a("strong"),ebo=o("phobert"),obo=o(" \u2014 "),jq=a("a"),rbo=o("PhobertTokenizer"),tbo=o(" (PhoBERT model)"),abo=l(),zh=a("li"),Wce=a("strong"),nbo=o("plbart"),sbo=o(" \u2014 "),Dq=a("a"),lbo=o("PLBartTokenizer"),ibo=o(" (PLBart model)"),dbo=l(),Wh=a("li"),Qce=a("strong"),cbo=o("prophetnet"),mbo=o(" \u2014 "),Gq=a("a"),fbo=o("ProphetNetTokenizer"),gbo=o(" (ProphetNet model)"),hbo=l(),Os=a("li"),Uce=a("strong"),ubo=o("qdqbert"),pbo=o(" \u2014 "),Oq=a("a"),_bo=o("BertTokenizer"),bbo=o(" or "),Vq=a("a"),vbo=o("BertTokenizerFast"),Fbo=o(" (QDQBert model)"),Tbo=l(),Qh=a("li"),Hce=a("strong"),Mbo=o("rag"),Ebo=o(" \u2014 "),Xq=a("a"),Cbo=o("RagTokenizer"),wbo=o(" (RAG model)"),Abo=l(),Vs=a("li"),Jce=a("strong"),Lbo=o("realm"),ybo=o(" \u2014 "),zq=a("a"),xbo=o("RealmTokenizer"),$bo=o(" or "),Wq=a("a"),kbo=o("RealmTokenizerFast"),Sbo=o(" (REALM model)"),Rbo=l(),Xs=a("li"),Yce=a("strong"),Pbo=o("reformer"),Bbo=o(" \u2014 "),Qq=a("a"),Ibo=o("ReformerTokenizer"),Nbo=o(" or "),Uq=a("a"),qbo=o("ReformerTokenizerFast"),jbo=o(" (Reformer model)"),Dbo=l(),zs=a("li"),Kce=a("strong"),Gbo=o("rembert"),Obo=o(" \u2014 "),Hq=a("a"),Vbo=o("RemBertTokenizer"),Xbo=o(" or "),Jq=a("a"),zbo=o("RemBertTokenizerFast"),Wbo=o(" (RemBERT model)"),Qbo=l(),Ws=a("li"),Zce=a("strong"),Ubo=o("retribert"),Hbo=o(" \u2014 "),Yq=a("a"),Jbo=o("RetriBertTokenizer"),Ybo=o(" or "),Kq=a("a"),Kbo=o("RetriBertTokenizerFast"),Zbo=o(" (RetriBERT model)"),evo=l(),Qs=a("li"),eme=a("strong"),ovo=o("roberta"),rvo=o(" \u2014 "),Zq=a("a"),tvo=o("RobertaTokenizer"),avo=o(" or "),ej=a("a"),nvo=o("RobertaTokenizerFast"),svo=o(" (RoBERTa model)"),lvo=l(),Us=a("li"),ome=a("strong"),ivo=o("roformer"),dvo=o(" \u2014 "),oj=a("a"),cvo=o("RoFormerTokenizer"),mvo=o(" or "),rj=a("a"),fvo=o("RoFormerTokenizerFast"),gvo=o(" (RoFormer model)"),hvo=l(),Uh=a("li"),rme=a("strong"),uvo=o("speech_to_text"),pvo=o(" \u2014 "),tj=a("a"),_vo=o("Speech2TextTokenizer"),bvo=o(" (Speech2Text model)"),vvo=l(),Hh=a("li"),tme=a("strong"),Fvo=o("speech_to_text_2"),Tvo=o(" \u2014 "),aj=a("a"),Mvo=o("Speech2Text2Tokenizer"),Evo=o(" (Speech2Text2 model)"),Cvo=l(),Hs=a("li"),ame=a("strong"),wvo=o("splinter"),Avo=o(" \u2014 "),nj=a("a"),Lvo=o("SplinterTokenizer"),yvo=o(" or "),sj=a("a"),xvo=o("SplinterTokenizerFast"),$vo=o(" (Splinter model)"),kvo=l(),Js=a("li"),nme=a("strong"),Svo=o("squeezebert"),Rvo=o(" \u2014 "),lj=a("a"),Pvo=o("SqueezeBertTokenizer"),Bvo=o(" or "),ij=a("a"),Ivo=o("SqueezeBertTokenizerFast"),Nvo=o(" (SqueezeBERT model)"),qvo=l(),Ys=a("li"),sme=a("strong"),jvo=o("t5"),Dvo=o(" \u2014 "),dj=a("a"),Gvo=o("T5Tokenizer"),Ovo=o(" or "),cj=a("a"),Vvo=o("T5TokenizerFast"),Xvo=o(" (T5 model)"),zvo=l(),Jh=a("li"),lme=a("strong"),Wvo=o("tapas"),Qvo=o(" \u2014 "),mj=a("a"),Uvo=o("TapasTokenizer"),Hvo=o(" (TAPAS model)"),Jvo=l(),Yh=a("li"),ime=a("strong"),Yvo=o("tapex"),Kvo=o(" \u2014 "),fj=a("a"),Zvo=o("TapexTokenizer"),e1o=o(" (TAPEX model)"),o1o=l(),Kh=a("li"),dme=a("strong"),r1o=o("transfo-xl"),t1o=o(" \u2014 "),gj=a("a"),a1o=o("TransfoXLTokenizer"),n1o=o(" (Transformer-XL model)"),s1o=l(),Ks=a("li"),cme=a("strong"),l1o=o("vilt"),i1o=o(" \u2014 "),hj=a("a"),d1o=o("BertTokenizer"),c1o=o(" or "),uj=a("a"),m1o=o("BertTokenizerFast"),f1o=o(" (ViLT model)"),g1o=l(),Zs=a("li"),mme=a("strong"),h1o=o("visual_bert"),u1o=o(" \u2014 "),pj=a("a"),p1o=o("BertTokenizer"),_1o=o(" or "),_j=a("a"),b1o=o("BertTokenizerFast"),v1o=o(" (VisualBERT model)"),F1o=l(),Zh=a("li"),fme=a("strong"),T1o=o("wav2vec2"),M1o=o(" \u2014 "),bj=a("a"),E1o=o("Wav2Vec2CTCTokenizer"),C1o=o(" (Wav2Vec2 model)"),w1o=l(),eu=a("li"),gme=a("strong"),A1o=o("wav2vec2-conformer"),L1o=o(" \u2014 "),vj=a("a"),y1o=o("Wav2Vec2CTCTokenizer"),x1o=o(" (Wav2Vec2-Conformer model)"),$1o=l(),ou=a("li"),hme=a("strong"),k1o=o("wav2vec2_phoneme"),S1o=o(" \u2014 "),Fj=a("a"),R1o=o("Wav2Vec2PhonemeCTCTokenizer"),P1o=o(" (Wav2Vec2Phoneme model)"),B1o=l(),el=a("li"),ume=a("strong"),I1o=o("xglm"),N1o=o(" \u2014 "),Tj=a("a"),q1o=o("XGLMTokenizer"),j1o=o(" or "),Mj=a("a"),D1o=o("XGLMTokenizerFast"),G1o=o(" (XGLM model)"),O1o=l(),ru=a("li"),pme=a("strong"),V1o=o("xlm"),X1o=o(" \u2014 "),Ej=a("a"),z1o=o("XLMTokenizer"),W1o=o(" (XLM model)"),Q1o=l(),tu=a("li"),_me=a("strong"),U1o=o("xlm-prophetnet"),H1o=o(" \u2014 "),Cj=a("a"),J1o=o("XLMProphetNetTokenizer"),Y1o=o(" (XLM-ProphetNet model)"),K1o=l(),ol=a("li"),bme=a("strong"),Z1o=o("xlm-roberta"),eFo=o(" \u2014 "),wj=a("a"),oFo=o("XLMRobertaTokenizer"),rFo=o(" or "),Aj=a("a"),tFo=o("XLMRobertaTokenizerFast"),aFo=o(" (XLM-RoBERTa model)"),nFo=l(),rl=a("li"),vme=a("strong"),sFo=o("xlm-roberta-xl"),lFo=o(" \u2014 "),Lj=a("a"),iFo=o("RobertaTokenizer"),dFo=o(" or "),yj=a("a"),cFo=o("RobertaTokenizerFast"),mFo=o(" (XLM-RoBERTa-XL model)"),fFo=l(),tl=a("li"),Fme=a("strong"),gFo=o("xlnet"),hFo=o(" \u2014 "),xj=a("a"),uFo=o("XLNetTokenizer"),pFo=o(" or "),$j=a("a"),_Fo=o("XLNetTokenizerFast"),bFo=o(" (XLNet model)"),vFo=l(),al=a("li"),Tme=a("strong"),FFo=o("yoso"),TFo=o(" \u2014 "),kj=a("a"),MFo=o("AlbertTokenizer"),EFo=o(" or "),Sj=a("a"),CFo=o("AlbertTokenizerFast"),wFo=o(" (YOSO model)"),AFo=l(),F(au.$$.fragment),LFo=l(),nu=a("div"),F(I8.$$.fragment),yFo=l(),Mme=a("p"),xFo=o("Register a new tokenizer in this mapping."),SUe=l(),Zi=a("h2"),su=a("a"),Eme=a("span"),F(N8.$$.fragment),$Fo=l(),Cme=a("span"),kFo=o("AutoFeatureExtractor"),RUe=l(),$o=a("div"),F(q8.$$.fragment),SFo=l(),j8=a("p"),RFo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Rj=a("a"),PFo=o("AutoFeatureExtractor.from_pretrained()"),BFo=o(" class method."),IFo=l(),D8=a("p"),NFo=o("This class cannot be instantiated directly using "),wme=a("code"),qFo=o("__init__()"),jFo=o(" (throws an error)."),DFo=l(),Je=a("div"),F(G8.$$.fragment),GFo=l(),Ame=a("p"),OFo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),VFo=l(),Oa=a("p"),XFo=o("The feature extractor class to instantiate is selected based on the "),Lme=a("code"),zFo=o("model_type"),WFo=o(` property of the config object
(either passed as an argument or loaded from `),yme=a("code"),QFo=o("pretrained_model_name_or_path"),UFo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),xme=a("code"),HFo=o("pretrained_model_name_or_path"),JFo=o(":"),YFo=l(),Q=a("ul"),lu=a("li"),$me=a("strong"),KFo=o("beit"),ZFo=o(" \u2014 "),Pj=a("a"),eTo=o("BeitFeatureExtractor"),oTo=o(" (BEiT model)"),rTo=l(),iu=a("li"),kme=a("strong"),tTo=o("clip"),aTo=o(" \u2014 "),Bj=a("a"),nTo=o("CLIPFeatureExtractor"),sTo=o(" (CLIP model)"),lTo=l(),du=a("li"),Sme=a("strong"),iTo=o("convnext"),dTo=o(" \u2014 "),Ij=a("a"),cTo=o("ConvNextFeatureExtractor"),mTo=o(" (ConvNeXT model)"),fTo=l(),cu=a("li"),Rme=a("strong"),gTo=o("cvt"),hTo=o(" \u2014 "),Nj=a("a"),uTo=o("ConvNextFeatureExtractor"),pTo=o(" (CvT model)"),_To=l(),mu=a("li"),Pme=a("strong"),bTo=o("data2vec-audio"),vTo=o(" \u2014 "),qj=a("a"),FTo=o("Wav2Vec2FeatureExtractor"),TTo=o(" (Data2VecAudio model)"),MTo=l(),fu=a("li"),Bme=a("strong"),ETo=o("data2vec-vision"),CTo=o(" \u2014 "),jj=a("a"),wTo=o("BeitFeatureExtractor"),ATo=o(" (Data2VecVision model)"),LTo=l(),gu=a("li"),Ime=a("strong"),yTo=o("deit"),xTo=o(" \u2014 "),Dj=a("a"),$To=o("DeiTFeatureExtractor"),kTo=o(" (DeiT model)"),STo=l(),hu=a("li"),Nme=a("strong"),RTo=o("detr"),PTo=o(" \u2014 "),Gj=a("a"),BTo=o("DetrFeatureExtractor"),ITo=o(" (DETR model)"),NTo=l(),uu=a("li"),qme=a("strong"),qTo=o("donut"),jTo=o(" \u2014 "),Oj=a("a"),DTo=o("DonutFeatureExtractor"),GTo=o(" (Donut model)"),OTo=l(),pu=a("li"),jme=a("strong"),VTo=o("dpt"),XTo=o(" \u2014 "),Vj=a("a"),zTo=o("DPTFeatureExtractor"),WTo=o(" (DPT model)"),QTo=l(),_u=a("li"),Dme=a("strong"),UTo=o("flava"),HTo=o(" \u2014 "),Xj=a("a"),JTo=o("FlavaFeatureExtractor"),YTo=o(" (FLAVA model)"),KTo=l(),bu=a("li"),Gme=a("strong"),ZTo=o("glpn"),eMo=o(" \u2014 "),zj=a("a"),oMo=o("GLPNFeatureExtractor"),rMo=o(" (GLPN model)"),tMo=l(),vu=a("li"),Ome=a("strong"),aMo=o("groupvit"),nMo=o(" \u2014 "),Wj=a("a"),sMo=o("CLIPFeatureExtractor"),lMo=o(" (GroupViT model)"),iMo=l(),Fu=a("li"),Vme=a("strong"),dMo=o("hubert"),cMo=o(" \u2014 "),Qj=a("a"),mMo=o("Wav2Vec2FeatureExtractor"),fMo=o(" (Hubert model)"),gMo=l(),Tu=a("li"),Xme=a("strong"),hMo=o("imagegpt"),uMo=o(" \u2014 "),Uj=a("a"),pMo=o("ImageGPTFeatureExtractor"),_Mo=o(" (ImageGPT model)"),bMo=l(),Mu=a("li"),zme=a("strong"),vMo=o("layoutlmv2"),FMo=o(" \u2014 "),Hj=a("a"),TMo=o("LayoutLMv2FeatureExtractor"),MMo=o(" (LayoutLMv2 model)"),EMo=l(),Eu=a("li"),Wme=a("strong"),CMo=o("layoutlmv3"),wMo=o(" \u2014 "),Jj=a("a"),AMo=o("LayoutLMv3FeatureExtractor"),LMo=o(" (LayoutLMv3 model)"),yMo=l(),Cu=a("li"),Qme=a("strong"),xMo=o("levit"),$Mo=o(" \u2014 "),Yj=a("a"),kMo=o("LevitFeatureExtractor"),SMo=o(" (LeViT model)"),RMo=l(),wu=a("li"),Ume=a("strong"),PMo=o("maskformer"),BMo=o(" \u2014 "),Kj=a("a"),IMo=o("MaskFormerFeatureExtractor"),NMo=o(" (MaskFormer model)"),qMo=l(),Au=a("li"),Hme=a("strong"),jMo=o("mctct"),DMo=o(" \u2014 "),Zj=a("a"),GMo=o("MCTCTFeatureExtractor"),OMo=o(" (M-CTC-T model)"),VMo=l(),Lu=a("li"),Jme=a("strong"),XMo=o("mobilevit"),zMo=o(" \u2014 "),eD=a("a"),WMo=o("MobileViTFeatureExtractor"),QMo=o(" (MobileViT model)"),UMo=l(),yu=a("li"),Yme=a("strong"),HMo=o("owlvit"),JMo=o(" \u2014 "),oD=a("a"),YMo=o("OwlViTFeatureExtractor"),KMo=o(" (OWL-ViT model)"),ZMo=l(),xu=a("li"),Kme=a("strong"),eEo=o("perceiver"),oEo=o(" \u2014 "),rD=a("a"),rEo=o("PerceiverFeatureExtractor"),tEo=o(" (Perceiver model)"),aEo=l(),$u=a("li"),Zme=a("strong"),nEo=o("poolformer"),sEo=o(" \u2014 "),tD=a("a"),lEo=o("PoolFormerFeatureExtractor"),iEo=o(" (PoolFormer model)"),dEo=l(),ku=a("li"),efe=a("strong"),cEo=o("regnet"),mEo=o(" \u2014 "),aD=a("a"),fEo=o("ConvNextFeatureExtractor"),gEo=o(" (RegNet model)"),hEo=l(),Su=a("li"),ofe=a("strong"),uEo=o("resnet"),pEo=o(" \u2014 "),nD=a("a"),_Eo=o("ConvNextFeatureExtractor"),bEo=o(" (ResNet model)"),vEo=l(),Ru=a("li"),rfe=a("strong"),FEo=o("segformer"),TEo=o(" \u2014 "),sD=a("a"),MEo=o("SegformerFeatureExtractor"),EEo=o(" (SegFormer model)"),CEo=l(),Pu=a("li"),tfe=a("strong"),wEo=o("speech_to_text"),AEo=o(" \u2014 "),lD=a("a"),LEo=o("Speech2TextFeatureExtractor"),yEo=o(" (Speech2Text model)"),xEo=l(),Bu=a("li"),afe=a("strong"),$Eo=o("swin"),kEo=o(" \u2014 "),iD=a("a"),SEo=o("ViTFeatureExtractor"),REo=o(" (Swin Transformer model)"),PEo=l(),Iu=a("li"),nfe=a("strong"),BEo=o("swinv2"),IEo=o(" \u2014 "),dD=a("a"),NEo=o("ViTFeatureExtractor"),qEo=o(" (Swin Transformer V2 model)"),jEo=l(),Nu=a("li"),sfe=a("strong"),DEo=o("van"),GEo=o(" \u2014 "),cD=a("a"),OEo=o("ConvNextFeatureExtractor"),VEo=o(" (VAN model)"),XEo=l(),qu=a("li"),lfe=a("strong"),zEo=o("videomae"),WEo=o(" \u2014 "),mD=a("a"),QEo=o("VideoMAEFeatureExtractor"),UEo=o(" (VideoMAE model)"),HEo=l(),ju=a("li"),ife=a("strong"),JEo=o("vilt"),YEo=o(" \u2014 "),fD=a("a"),KEo=o("ViltFeatureExtractor"),ZEo=o(" (ViLT model)"),e4o=l(),Du=a("li"),dfe=a("strong"),o4o=o("vit"),r4o=o(" \u2014 "),gD=a("a"),t4o=o("ViTFeatureExtractor"),a4o=o(" (ViT model)"),n4o=l(),Gu=a("li"),cfe=a("strong"),s4o=o("vit_mae"),l4o=o(" \u2014 "),hD=a("a"),i4o=o("ViTFeatureExtractor"),d4o=o(" (ViTMAE model)"),c4o=l(),Ou=a("li"),mfe=a("strong"),m4o=o("wav2vec2"),f4o=o(" \u2014 "),uD=a("a"),g4o=o("Wav2Vec2FeatureExtractor"),h4o=o(" (Wav2Vec2 model)"),u4o=l(),Vu=a("li"),ffe=a("strong"),p4o=o("wav2vec2-conformer"),_4o=o(" \u2014 "),pD=a("a"),b4o=o("Wav2Vec2FeatureExtractor"),v4o=o(" (Wav2Vec2-Conformer model)"),F4o=l(),Xu=a("li"),gfe=a("strong"),T4o=o("yolos"),M4o=o(" \u2014 "),_D=a("a"),E4o=o("YolosFeatureExtractor"),C4o=o(" (YOLOS model)"),w4o=l(),F(zu.$$.fragment),A4o=l(),F(Wu.$$.fragment),L4o=l(),Qu=a("div"),F(O8.$$.fragment),y4o=l(),hfe=a("p"),x4o=o("Register a new feature extractor for this class."),PUe=l(),ed=a("h2"),Uu=a("a"),ufe=a("span"),F(V8.$$.fragment),$4o=l(),pfe=a("span"),k4o=o("AutoProcessor"),BUe=l(),ko=a("div"),F(X8.$$.fragment),S4o=l(),z8=a("p"),R4o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),bD=a("a"),P4o=o("AutoProcessor.from_pretrained()"),B4o=o(" class method."),I4o=l(),W8=a("p"),N4o=o("This class cannot be instantiated directly using "),_fe=a("code"),q4o=o("__init__()"),j4o=o(" (throws an error)."),D4o=l(),Ye=a("div"),F(Q8.$$.fragment),G4o=l(),bfe=a("p"),O4o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),V4o=l(),od=a("p"),X4o=o("The processor class to instantiate is selected based on the "),vfe=a("code"),z4o=o("model_type"),W4o=o(` property of the config object (either
passed as an argument or loaded from `),Ffe=a("code"),Q4o=o("pretrained_model_name_or_path"),U4o=o(" if possible):"),H4o=l(),ce=a("ul"),Hu=a("li"),Tfe=a("strong"),J4o=o("clip"),Y4o=o(" \u2014 "),vD=a("a"),K4o=o("CLIPProcessor"),Z4o=o(" (CLIP model)"),eCo=l(),Ju=a("li"),Mfe=a("strong"),oCo=o("donut"),rCo=o(" \u2014 "),FD=a("a"),tCo=o("DonutProcessor"),aCo=o(" (Donut model)"),nCo=l(),Yu=a("li"),Efe=a("strong"),sCo=o("flava"),lCo=o(" \u2014 "),TD=a("a"),iCo=o("FlavaProcessor"),dCo=o(" (FLAVA model)"),cCo=l(),Ku=a("li"),Cfe=a("strong"),mCo=o("groupvit"),fCo=o(" \u2014 "),MD=a("a"),gCo=o("CLIPProcessor"),hCo=o(" (GroupViT model)"),uCo=l(),Zu=a("li"),wfe=a("strong"),pCo=o("layoutlmv2"),_Co=o(" \u2014 "),ED=a("a"),bCo=o("LayoutLMv2Processor"),vCo=o(" (LayoutLMv2 model)"),FCo=l(),ep=a("li"),Afe=a("strong"),TCo=o("layoutlmv3"),MCo=o(" \u2014 "),CD=a("a"),ECo=o("LayoutLMv3Processor"),CCo=o(" (LayoutLMv3 model)"),wCo=l(),op=a("li"),Lfe=a("strong"),ACo=o("layoutxlm"),LCo=o(" \u2014 "),wD=a("a"),yCo=o("LayoutXLMProcessor"),xCo=o(" (LayoutXLM model)"),$Co=l(),rp=a("li"),yfe=a("strong"),kCo=o("owlvit"),SCo=o(" \u2014 "),AD=a("a"),RCo=o("OwlViTProcessor"),PCo=o(" (OWL-ViT model)"),BCo=l(),tp=a("li"),xfe=a("strong"),ICo=o("sew"),NCo=o(" \u2014 "),LD=a("a"),qCo=o("Wav2Vec2Processor"),jCo=o(" (SEW model)"),DCo=l(),ap=a("li"),$fe=a("strong"),GCo=o("sew-d"),OCo=o(" \u2014 "),yD=a("a"),VCo=o("Wav2Vec2Processor"),XCo=o(" (SEW-D model)"),zCo=l(),np=a("li"),kfe=a("strong"),WCo=o("speech_to_text"),QCo=o(" \u2014 "),xD=a("a"),UCo=o("Speech2TextProcessor"),HCo=o(" (Speech2Text model)"),JCo=l(),sp=a("li"),Sfe=a("strong"),YCo=o("speech_to_text_2"),KCo=o(" \u2014 "),$D=a("a"),ZCo=o("Speech2Text2Processor"),e3o=o(" (Speech2Text2 model)"),o3o=l(),lp=a("li"),Rfe=a("strong"),r3o=o("trocr"),t3o=o(" \u2014 "),kD=a("a"),a3o=o("TrOCRProcessor"),n3o=o(" (TrOCR model)"),s3o=l(),ip=a("li"),Pfe=a("strong"),l3o=o("unispeech"),i3o=o(" \u2014 "),SD=a("a"),d3o=o("Wav2Vec2Processor"),c3o=o(" (UniSpeech model)"),m3o=l(),dp=a("li"),Bfe=a("strong"),f3o=o("unispeech-sat"),g3o=o(" \u2014 "),RD=a("a"),h3o=o("Wav2Vec2Processor"),u3o=o(" (UniSpeechSat model)"),p3o=l(),cp=a("li"),Ife=a("strong"),_3o=o("vilt"),b3o=o(" \u2014 "),PD=a("a"),v3o=o("ViltProcessor"),F3o=o(" (ViLT model)"),T3o=l(),mp=a("li"),Nfe=a("strong"),M3o=o("vision-text-dual-encoder"),E3o=o(" \u2014 "),BD=a("a"),C3o=o("VisionTextDualEncoderProcessor"),w3o=o(" (VisionTextDualEncoder model)"),A3o=l(),fp=a("li"),qfe=a("strong"),L3o=o("wav2vec2"),y3o=o(" \u2014 "),ID=a("a"),x3o=o("Wav2Vec2Processor"),$3o=o(" (Wav2Vec2 model)"),k3o=l(),gp=a("li"),jfe=a("strong"),S3o=o("wav2vec2-conformer"),R3o=o(" \u2014 "),ND=a("a"),P3o=o("Wav2Vec2Processor"),B3o=o(" (Wav2Vec2-Conformer model)"),I3o=l(),hp=a("li"),Dfe=a("strong"),N3o=o("wavlm"),q3o=o(" \u2014 "),qD=a("a"),j3o=o("Wav2Vec2Processor"),D3o=o(" (WavLM model)"),G3o=l(),F(up.$$.fragment),O3o=l(),F(pp.$$.fragment),V3o=l(),_p=a("div"),F(U8.$$.fragment),X3o=l(),Gfe=a("p"),z3o=o("Register a new processor for this class."),IUe=l(),rd=a("h2"),bp=a("a"),Ofe=a("span"),F(H8.$$.fragment),W3o=l(),Vfe=a("span"),Q3o=o("AutoModel"),NUe=l(),So=a("div"),F(J8.$$.fragment),U3o=l(),td=a("p"),H3o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),jD=a("a"),J3o=o("from_pretrained()"),Y3o=o(" class method or the "),DD=a("a"),K3o=o("from_config()"),Z3o=o(` class
method.`),e5o=l(),Y8=a("p"),o5o=o("This class cannot be instantiated directly using "),Xfe=a("code"),r5o=o("__init__()"),t5o=o(" (throws an error)."),a5o=l(),ft=a("div"),F(K8.$$.fragment),n5o=l(),zfe=a("p"),s5o=o("Instantiates one of the base model classes of the library from a configuration."),l5o=l(),ad=a("p"),i5o=o(`Note:
Loading a model from its configuration file does `),Wfe=a("strong"),d5o=o("not"),c5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GD=a("a"),m5o=o("from_pretrained()"),f5o=o(" to load the model weights."),g5o=l(),F(vp.$$.fragment),h5o=l(),Ke=a("div"),F(Z8.$$.fragment),u5o=l(),Qfe=a("p"),p5o=o("Instantiate one of the base model classes of the library from a pretrained model."),_5o=l(),Va=a("p"),b5o=o("The model class to instantiate is selected based on the "),Ufe=a("code"),v5o=o("model_type"),F5o=o(` property of the config object (either
passed as an argument or loaded from `),Hfe=a("code"),T5o=o("pretrained_model_name_or_path"),M5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jfe=a("code"),E5o=o("pretrained_model_name_or_path"),C5o=o(":"),w5o=l(),y=a("ul"),Fp=a("li"),Yfe=a("strong"),A5o=o("albert"),L5o=o(" \u2014 "),OD=a("a"),y5o=o("AlbertModel"),x5o=o(" (ALBERT model)"),$5o=l(),Tp=a("li"),Kfe=a("strong"),k5o=o("bart"),S5o=o(" \u2014 "),VD=a("a"),R5o=o("BartModel"),P5o=o(" (BART model)"),B5o=l(),Mp=a("li"),Zfe=a("strong"),I5o=o("beit"),N5o=o(" \u2014 "),XD=a("a"),q5o=o("BeitModel"),j5o=o(" (BEiT model)"),D5o=l(),Ep=a("li"),ege=a("strong"),G5o=o("bert"),O5o=o(" \u2014 "),zD=a("a"),V5o=o("BertModel"),X5o=o(" (BERT model)"),z5o=l(),Cp=a("li"),oge=a("strong"),W5o=o("bert-generation"),Q5o=o(" \u2014 "),WD=a("a"),U5o=o("BertGenerationEncoder"),H5o=o(" (Bert Generation model)"),J5o=l(),wp=a("li"),rge=a("strong"),Y5o=o("big_bird"),K5o=o(" \u2014 "),QD=a("a"),Z5o=o("BigBirdModel"),e0o=o(" (BigBird model)"),o0o=l(),Ap=a("li"),tge=a("strong"),r0o=o("bigbird_pegasus"),t0o=o(" \u2014 "),UD=a("a"),a0o=o("BigBirdPegasusModel"),n0o=o(" (BigBird-Pegasus model)"),s0o=l(),Lp=a("li"),age=a("strong"),l0o=o("blenderbot"),i0o=o(" \u2014 "),HD=a("a"),d0o=o("BlenderbotModel"),c0o=o(" (Blenderbot model)"),m0o=l(),yp=a("li"),nge=a("strong"),f0o=o("blenderbot-small"),g0o=o(" \u2014 "),JD=a("a"),h0o=o("BlenderbotSmallModel"),u0o=o(" (BlenderbotSmall model)"),p0o=l(),xp=a("li"),sge=a("strong"),_0o=o("bloom"),b0o=o(" \u2014 "),YD=a("a"),v0o=o("BloomModel"),F0o=o(" (BLOOM model)"),T0o=l(),$p=a("li"),lge=a("strong"),M0o=o("camembert"),E0o=o(" \u2014 "),KD=a("a"),C0o=o("CamembertModel"),w0o=o(" (CamemBERT model)"),A0o=l(),kp=a("li"),ige=a("strong"),L0o=o("canine"),y0o=o(" \u2014 "),ZD=a("a"),x0o=o("CanineModel"),$0o=o(" (CANINE model)"),k0o=l(),Sp=a("li"),dge=a("strong"),S0o=o("clip"),R0o=o(" \u2014 "),eG=a("a"),P0o=o("CLIPModel"),B0o=o(" (CLIP model)"),I0o=l(),Rp=a("li"),cge=a("strong"),N0o=o("codegen"),q0o=o(" \u2014 "),oG=a("a"),j0o=o("CodeGenModel"),D0o=o(" (CodeGen model)"),G0o=l(),Pp=a("li"),mge=a("strong"),O0o=o("convbert"),V0o=o(" \u2014 "),rG=a("a"),X0o=o("ConvBertModel"),z0o=o(" (ConvBERT model)"),W0o=l(),Bp=a("li"),fge=a("strong"),Q0o=o("convnext"),U0o=o(" \u2014 "),tG=a("a"),H0o=o("ConvNextModel"),J0o=o(" (ConvNeXT model)"),Y0o=l(),Ip=a("li"),gge=a("strong"),K0o=o("ctrl"),Z0o=o(" \u2014 "),aG=a("a"),ewo=o("CTRLModel"),owo=o(" (CTRL model)"),rwo=l(),Np=a("li"),hge=a("strong"),two=o("cvt"),awo=o(" \u2014 "),nG=a("a"),nwo=o("CvtModel"),swo=o(" (CvT model)"),lwo=l(),qp=a("li"),uge=a("strong"),iwo=o("data2vec-audio"),dwo=o(" \u2014 "),sG=a("a"),cwo=o("Data2VecAudioModel"),mwo=o(" (Data2VecAudio model)"),fwo=l(),jp=a("li"),pge=a("strong"),gwo=o("data2vec-text"),hwo=o(" \u2014 "),lG=a("a"),uwo=o("Data2VecTextModel"),pwo=o(" (Data2VecText model)"),_wo=l(),Dp=a("li"),_ge=a("strong"),bwo=o("data2vec-vision"),vwo=o(" \u2014 "),iG=a("a"),Fwo=o("Data2VecVisionModel"),Two=o(" (Data2VecVision model)"),Mwo=l(),Gp=a("li"),bge=a("strong"),Ewo=o("deberta"),Cwo=o(" \u2014 "),dG=a("a"),wwo=o("DebertaModel"),Awo=o(" (DeBERTa model)"),Lwo=l(),Op=a("li"),vge=a("strong"),ywo=o("deberta-v2"),xwo=o(" \u2014 "),cG=a("a"),$wo=o("DebertaV2Model"),kwo=o(" (DeBERTa-v2 model)"),Swo=l(),Vp=a("li"),Fge=a("strong"),Rwo=o("decision_transformer"),Pwo=o(" \u2014 "),mG=a("a"),Bwo=o("DecisionTransformerModel"),Iwo=o(" (Decision Transformer model)"),Nwo=l(),Xp=a("li"),Tge=a("strong"),qwo=o("deit"),jwo=o(" \u2014 "),fG=a("a"),Dwo=o("DeiTModel"),Gwo=o(" (DeiT model)"),Owo=l(),zp=a("li"),Mge=a("strong"),Vwo=o("detr"),Xwo=o(" \u2014 "),gG=a("a"),zwo=o("DetrModel"),Wwo=o(" (DETR model)"),Qwo=l(),Wp=a("li"),Ege=a("strong"),Uwo=o("distilbert"),Hwo=o(" \u2014 "),hG=a("a"),Jwo=o("DistilBertModel"),Ywo=o(" (DistilBERT model)"),Kwo=l(),Qp=a("li"),Cge=a("strong"),Zwo=o("donut-swin"),e6o=o(" \u2014 "),uG=a("a"),o6o=o("DonutSwinModel"),r6o=o(" (DonutSwin model)"),t6o=l(),Up=a("li"),wge=a("strong"),a6o=o("dpr"),n6o=o(" \u2014 "),pG=a("a"),s6o=o("DPRQuestionEncoder"),l6o=o(" (DPR model)"),i6o=l(),Hp=a("li"),Age=a("strong"),d6o=o("dpt"),c6o=o(" \u2014 "),_G=a("a"),m6o=o("DPTModel"),f6o=o(" (DPT model)"),g6o=l(),Jp=a("li"),Lge=a("strong"),h6o=o("electra"),u6o=o(" \u2014 "),bG=a("a"),p6o=o("ElectraModel"),_6o=o(" (ELECTRA model)"),b6o=l(),Yp=a("li"),yge=a("strong"),v6o=o("flaubert"),F6o=o(" \u2014 "),vG=a("a"),T6o=o("FlaubertModel"),M6o=o(" (FlauBERT model)"),E6o=l(),Kp=a("li"),xge=a("strong"),C6o=o("flava"),w6o=o(" \u2014 "),FG=a("a"),A6o=o("FlavaModel"),L6o=o(" (FLAVA model)"),y6o=l(),Zp=a("li"),$ge=a("strong"),x6o=o("fnet"),$6o=o(" \u2014 "),TG=a("a"),k6o=o("FNetModel"),S6o=o(" (FNet model)"),R6o=l(),e_=a("li"),kge=a("strong"),P6o=o("fsmt"),B6o=o(" \u2014 "),MG=a("a"),I6o=o("FSMTModel"),N6o=o(" (FairSeq Machine-Translation model)"),q6o=l(),nl=a("li"),Sge=a("strong"),j6o=o("funnel"),D6o=o(" \u2014 "),EG=a("a"),G6o=o("FunnelModel"),O6o=o(" or "),CG=a("a"),V6o=o("FunnelBaseModel"),X6o=o(" (Funnel Transformer model)"),z6o=l(),o_=a("li"),Rge=a("strong"),W6o=o("glpn"),Q6o=o(" \u2014 "),wG=a("a"),U6o=o("GLPNModel"),H6o=o(" (GLPN model)"),J6o=l(),r_=a("li"),Pge=a("strong"),Y6o=o("gpt2"),K6o=o(" \u2014 "),AG=a("a"),Z6o=o("GPT2Model"),eAo=o(" (OpenAI GPT-2 model)"),oAo=l(),t_=a("li"),Bge=a("strong"),rAo=o("gpt_neo"),tAo=o(" \u2014 "),LG=a("a"),aAo=o("GPTNeoModel"),nAo=o(" (GPT Neo model)"),sAo=l(),a_=a("li"),Ige=a("strong"),lAo=o("gpt_neox"),iAo=o(" \u2014 "),yG=a("a"),dAo=o("GPTNeoXModel"),cAo=o(" (GPT NeoX model)"),mAo=l(),n_=a("li"),Nge=a("strong"),fAo=o("gptj"),gAo=o(" \u2014 "),xG=a("a"),hAo=o("GPTJModel"),uAo=o(" (GPT-J model)"),pAo=l(),s_=a("li"),qge=a("strong"),_Ao=o("groupvit"),bAo=o(" \u2014 "),$G=a("a"),vAo=o("GroupViTModel"),FAo=o(" (GroupViT model)"),TAo=l(),l_=a("li"),jge=a("strong"),MAo=o("hubert"),EAo=o(" \u2014 "),kG=a("a"),CAo=o("HubertModel"),wAo=o(" (Hubert model)"),AAo=l(),i_=a("li"),Dge=a("strong"),LAo=o("ibert"),yAo=o(" \u2014 "),SG=a("a"),xAo=o("IBertModel"),$Ao=o(" (I-BERT model)"),kAo=l(),d_=a("li"),Gge=a("strong"),SAo=o("imagegpt"),RAo=o(" \u2014 "),RG=a("a"),PAo=o("ImageGPTModel"),BAo=o(" (ImageGPT model)"),IAo=l(),c_=a("li"),Oge=a("strong"),NAo=o("layoutlm"),qAo=o(" \u2014 "),PG=a("a"),jAo=o("LayoutLMModel"),DAo=o(" (LayoutLM model)"),GAo=l(),m_=a("li"),Vge=a("strong"),OAo=o("layoutlmv2"),VAo=o(" \u2014 "),BG=a("a"),XAo=o("LayoutLMv2Model"),zAo=o(" (LayoutLMv2 model)"),WAo=l(),f_=a("li"),Xge=a("strong"),QAo=o("layoutlmv3"),UAo=o(" \u2014 "),IG=a("a"),HAo=o("LayoutLMv3Model"),JAo=o(" (LayoutLMv3 model)"),YAo=l(),g_=a("li"),zge=a("strong"),KAo=o("led"),ZAo=o(" \u2014 "),NG=a("a"),e7o=o("LEDModel"),o7o=o(" (LED model)"),r7o=l(),h_=a("li"),Wge=a("strong"),t7o=o("levit"),a7o=o(" \u2014 "),qG=a("a"),n7o=o("LevitModel"),s7o=o(" (LeViT model)"),l7o=l(),u_=a("li"),Qge=a("strong"),i7o=o("longformer"),d7o=o(" \u2014 "),jG=a("a"),c7o=o("LongformerModel"),m7o=o(" (Longformer model)"),f7o=l(),p_=a("li"),Uge=a("strong"),g7o=o("longt5"),h7o=o(" \u2014 "),DG=a("a"),u7o=o("LongT5Model"),p7o=o(" (LongT5 model)"),_7o=l(),__=a("li"),Hge=a("strong"),b7o=o("luke"),v7o=o(" \u2014 "),GG=a("a"),F7o=o("LukeModel"),T7o=o(" (LUKE model)"),M7o=l(),b_=a("li"),Jge=a("strong"),E7o=o("lxmert"),C7o=o(" \u2014 "),OG=a("a"),w7o=o("LxmertModel"),A7o=o(" (LXMERT model)"),L7o=l(),v_=a("li"),Yge=a("strong"),y7o=o("m2m_100"),x7o=o(" \u2014 "),VG=a("a"),$7o=o("M2M100Model"),k7o=o(" (M2M100 model)"),S7o=l(),F_=a("li"),Kge=a("strong"),R7o=o("marian"),P7o=o(" \u2014 "),XG=a("a"),B7o=o("MarianModel"),I7o=o(" (Marian model)"),N7o=l(),T_=a("li"),Zge=a("strong"),q7o=o("maskformer"),j7o=o(" \u2014 "),zG=a("a"),D7o=o("MaskFormerModel"),G7o=o(" (MaskFormer model)"),O7o=l(),M_=a("li"),ehe=a("strong"),V7o=o("mbart"),X7o=o(" \u2014 "),WG=a("a"),z7o=o("MBartModel"),W7o=o(" (mBART model)"),Q7o=l(),E_=a("li"),ohe=a("strong"),U7o=o("mctct"),H7o=o(" \u2014 "),QG=a("a"),J7o=o("MCTCTModel"),Y7o=o(" (M-CTC-T model)"),K7o=l(),C_=a("li"),rhe=a("strong"),Z7o=o("megatron-bert"),eLo=o(" \u2014 "),UG=a("a"),oLo=o("MegatronBertModel"),rLo=o(" (Megatron-BERT model)"),tLo=l(),w_=a("li"),the=a("strong"),aLo=o("mobilebert"),nLo=o(" \u2014 "),HG=a("a"),sLo=o("MobileBertModel"),lLo=o(" (MobileBERT model)"),iLo=l(),A_=a("li"),ahe=a("strong"),dLo=o("mobilevit"),cLo=o(" \u2014 "),JG=a("a"),mLo=o("MobileViTModel"),fLo=o(" (MobileViT model)"),gLo=l(),L_=a("li"),nhe=a("strong"),hLo=o("mpnet"),uLo=o(" \u2014 "),YG=a("a"),pLo=o("MPNetModel"),_Lo=o(" (MPNet model)"),bLo=l(),y_=a("li"),she=a("strong"),vLo=o("mt5"),FLo=o(" \u2014 "),KG=a("a"),TLo=o("MT5Model"),MLo=o(" (MT5 model)"),ELo=l(),x_=a("li"),lhe=a("strong"),CLo=o("mvp"),wLo=o(" \u2014 "),ZG=a("a"),ALo=o("MvpModel"),LLo=o(" (MVP model)"),yLo=l(),$_=a("li"),ihe=a("strong"),xLo=o("nezha"),$Lo=o(" \u2014 "),eO=a("a"),kLo=o("NezhaModel"),SLo=o(" (Nezha model)"),RLo=l(),k_=a("li"),dhe=a("strong"),PLo=o("nllb"),BLo=o(" \u2014 "),oO=a("a"),ILo=o("M2M100Model"),NLo=o(" (NLLB model)"),qLo=l(),S_=a("li"),che=a("strong"),jLo=o("nystromformer"),DLo=o(" \u2014 "),rO=a("a"),GLo=o("NystromformerModel"),OLo=o(" (Nystr\xF6mformer model)"),VLo=l(),R_=a("li"),mhe=a("strong"),XLo=o("openai-gpt"),zLo=o(" \u2014 "),tO=a("a"),WLo=o("OpenAIGPTModel"),QLo=o(" (OpenAI GPT model)"),ULo=l(),P_=a("li"),fhe=a("strong"),HLo=o("opt"),JLo=o(" \u2014 "),aO=a("a"),YLo=o("OPTModel"),KLo=o(" (OPT model)"),ZLo=l(),B_=a("li"),ghe=a("strong"),eyo=o("owlvit"),oyo=o(" \u2014 "),nO=a("a"),ryo=o("OwlViTModel"),tyo=o(" (OWL-ViT model)"),ayo=l(),I_=a("li"),hhe=a("strong"),nyo=o("pegasus"),syo=o(" \u2014 "),sO=a("a"),lyo=o("PegasusModel"),iyo=o(" (Pegasus model)"),dyo=l(),N_=a("li"),uhe=a("strong"),cyo=o("perceiver"),myo=o(" \u2014 "),lO=a("a"),fyo=o("PerceiverModel"),gyo=o(" (Perceiver model)"),hyo=l(),q_=a("li"),phe=a("strong"),uyo=o("plbart"),pyo=o(" \u2014 "),iO=a("a"),_yo=o("PLBartModel"),byo=o(" (PLBart model)"),vyo=l(),j_=a("li"),_he=a("strong"),Fyo=o("poolformer"),Tyo=o(" \u2014 "),dO=a("a"),Myo=o("PoolFormerModel"),Eyo=o(" (PoolFormer model)"),Cyo=l(),D_=a("li"),bhe=a("strong"),wyo=o("prophetnet"),Ayo=o(" \u2014 "),cO=a("a"),Lyo=o("ProphetNetModel"),yyo=o(" (ProphetNet model)"),xyo=l(),G_=a("li"),vhe=a("strong"),$yo=o("qdqbert"),kyo=o(" \u2014 "),mO=a("a"),Syo=o("QDQBertModel"),Ryo=o(" (QDQBert model)"),Pyo=l(),O_=a("li"),Fhe=a("strong"),Byo=o("reformer"),Iyo=o(" \u2014 "),fO=a("a"),Nyo=o("ReformerModel"),qyo=o(" (Reformer model)"),jyo=l(),V_=a("li"),The=a("strong"),Dyo=o("regnet"),Gyo=o(" \u2014 "),gO=a("a"),Oyo=o("RegNetModel"),Vyo=o(" (RegNet model)"),Xyo=l(),X_=a("li"),Mhe=a("strong"),zyo=o("rembert"),Wyo=o(" \u2014 "),hO=a("a"),Qyo=o("RemBertModel"),Uyo=o(" (RemBERT model)"),Hyo=l(),z_=a("li"),Ehe=a("strong"),Jyo=o("resnet"),Yyo=o(" \u2014 "),uO=a("a"),Kyo=o("ResNetModel"),Zyo=o(" (ResNet model)"),e8o=l(),W_=a("li"),Che=a("strong"),o8o=o("retribert"),r8o=o(" \u2014 "),pO=a("a"),t8o=o("RetriBertModel"),a8o=o(" (RetriBERT model)"),n8o=l(),Q_=a("li"),whe=a("strong"),s8o=o("roberta"),l8o=o(" \u2014 "),_O=a("a"),i8o=o("RobertaModel"),d8o=o(" (RoBERTa model)"),c8o=l(),U_=a("li"),Ahe=a("strong"),m8o=o("roformer"),f8o=o(" \u2014 "),bO=a("a"),g8o=o("RoFormerModel"),h8o=o(" (RoFormer model)"),u8o=l(),H_=a("li"),Lhe=a("strong"),p8o=o("segformer"),_8o=o(" \u2014 "),vO=a("a"),b8o=o("SegformerModel"),v8o=o(" (SegFormer model)"),F8o=l(),J_=a("li"),yhe=a("strong"),T8o=o("sew"),M8o=o(" \u2014 "),FO=a("a"),E8o=o("SEWModel"),C8o=o(" (SEW model)"),w8o=l(),Y_=a("li"),xhe=a("strong"),A8o=o("sew-d"),L8o=o(" \u2014 "),TO=a("a"),y8o=o("SEWDModel"),x8o=o(" (SEW-D model)"),$8o=l(),K_=a("li"),$he=a("strong"),k8o=o("speech_to_text"),S8o=o(" \u2014 "),MO=a("a"),R8o=o("Speech2TextModel"),P8o=o(" (Speech2Text model)"),B8o=l(),Z_=a("li"),khe=a("strong"),I8o=o("splinter"),N8o=o(" \u2014 "),EO=a("a"),q8o=o("SplinterModel"),j8o=o(" (Splinter model)"),D8o=l(),e2=a("li"),She=a("strong"),G8o=o("squeezebert"),O8o=o(" \u2014 "),CO=a("a"),V8o=o("SqueezeBertModel"),X8o=o(" (SqueezeBERT model)"),z8o=l(),o2=a("li"),Rhe=a("strong"),W8o=o("swin"),Q8o=o(" \u2014 "),wO=a("a"),U8o=o("SwinModel"),H8o=o(" (Swin Transformer model)"),J8o=l(),r2=a("li"),Phe=a("strong"),Y8o=o("swinv2"),K8o=o(" \u2014 "),AO=a("a"),Z8o=o("Swinv2Model"),e9o=o(" (Swin Transformer V2 model)"),o9o=l(),t2=a("li"),Bhe=a("strong"),r9o=o("t5"),t9o=o(" \u2014 "),LO=a("a"),a9o=o("T5Model"),n9o=o(" (T5 model)"),s9o=l(),a2=a("li"),Ihe=a("strong"),l9o=o("tapas"),i9o=o(" \u2014 "),yO=a("a"),d9o=o("TapasModel"),c9o=o(" (TAPAS model)"),m9o=l(),n2=a("li"),Nhe=a("strong"),f9o=o("trajectory_transformer"),g9o=o(" \u2014 "),xO=a("a"),h9o=o("TrajectoryTransformerModel"),u9o=o(" (Trajectory Transformer model)"),p9o=l(),s2=a("li"),qhe=a("strong"),_9o=o("transfo-xl"),b9o=o(" \u2014 "),$O=a("a"),v9o=o("TransfoXLModel"),F9o=o(" (Transformer-XL model)"),T9o=l(),l2=a("li"),jhe=a("strong"),M9o=o("unispeech"),E9o=o(" \u2014 "),kO=a("a"),C9o=o("UniSpeechModel"),w9o=o(" (UniSpeech model)"),A9o=l(),i2=a("li"),Dhe=a("strong"),L9o=o("unispeech-sat"),y9o=o(" \u2014 "),SO=a("a"),x9o=o("UniSpeechSatModel"),$9o=o(" (UniSpeechSat model)"),k9o=l(),d2=a("li"),Ghe=a("strong"),S9o=o("van"),R9o=o(" \u2014 "),RO=a("a"),P9o=o("VanModel"),B9o=o(" (VAN model)"),I9o=l(),c2=a("li"),Ohe=a("strong"),N9o=o("videomae"),q9o=o(" \u2014 "),PO=a("a"),j9o=o("VideoMAEModel"),D9o=o(" (VideoMAE model)"),G9o=l(),m2=a("li"),Vhe=a("strong"),O9o=o("vilt"),V9o=o(" \u2014 "),BO=a("a"),X9o=o("ViltModel"),z9o=o(" (ViLT model)"),W9o=l(),f2=a("li"),Xhe=a("strong"),Q9o=o("vision-text-dual-encoder"),U9o=o(" \u2014 "),IO=a("a"),H9o=o("VisionTextDualEncoderModel"),J9o=o(" (VisionTextDualEncoder model)"),Y9o=l(),g2=a("li"),zhe=a("strong"),K9o=o("visual_bert"),Z9o=o(" \u2014 "),NO=a("a"),exo=o("VisualBertModel"),oxo=o(" (VisualBERT model)"),rxo=l(),h2=a("li"),Whe=a("strong"),txo=o("vit"),axo=o(" \u2014 "),qO=a("a"),nxo=o("ViTModel"),sxo=o(" (ViT model)"),lxo=l(),u2=a("li"),Qhe=a("strong"),ixo=o("vit_mae"),dxo=o(" \u2014 "),jO=a("a"),cxo=o("ViTMAEModel"),mxo=o(" (ViTMAE model)"),fxo=l(),p2=a("li"),Uhe=a("strong"),gxo=o("wav2vec2"),hxo=o(" \u2014 "),DO=a("a"),uxo=o("Wav2Vec2Model"),pxo=o(" (Wav2Vec2 model)"),_xo=l(),_2=a("li"),Hhe=a("strong"),bxo=o("wav2vec2-conformer"),vxo=o(" \u2014 "),GO=a("a"),Fxo=o("Wav2Vec2ConformerModel"),Txo=o(" (Wav2Vec2-Conformer model)"),Mxo=l(),b2=a("li"),Jhe=a("strong"),Exo=o("wavlm"),Cxo=o(" \u2014 "),OO=a("a"),wxo=o("WavLMModel"),Axo=o(" (WavLM model)"),Lxo=l(),v2=a("li"),Yhe=a("strong"),yxo=o("xglm"),xxo=o(" \u2014 "),VO=a("a"),$xo=o("XGLMModel"),kxo=o(" (XGLM model)"),Sxo=l(),F2=a("li"),Khe=a("strong"),Rxo=o("xlm"),Pxo=o(" \u2014 "),XO=a("a"),Bxo=o("XLMModel"),Ixo=o(" (XLM model)"),Nxo=l(),T2=a("li"),Zhe=a("strong"),qxo=o("xlm-prophetnet"),jxo=o(" \u2014 "),zO=a("a"),Dxo=o("XLMProphetNetModel"),Gxo=o(" (XLM-ProphetNet model)"),Oxo=l(),M2=a("li"),eue=a("strong"),Vxo=o("xlm-roberta"),Xxo=o(" \u2014 "),WO=a("a"),zxo=o("XLMRobertaModel"),Wxo=o(" (XLM-RoBERTa model)"),Qxo=l(),E2=a("li"),oue=a("strong"),Uxo=o("xlm-roberta-xl"),Hxo=o(" \u2014 "),QO=a("a"),Jxo=o("XLMRobertaXLModel"),Yxo=o(" (XLM-RoBERTa-XL model)"),Kxo=l(),C2=a("li"),rue=a("strong"),Zxo=o("xlnet"),e$o=o(" \u2014 "),UO=a("a"),o$o=o("XLNetModel"),r$o=o(" (XLNet model)"),t$o=l(),w2=a("li"),tue=a("strong"),a$o=o("yolos"),n$o=o(" \u2014 "),HO=a("a"),s$o=o("YolosModel"),l$o=o(" (YOLOS model)"),i$o=l(),A2=a("li"),aue=a("strong"),d$o=o("yoso"),c$o=o(" \u2014 "),JO=a("a"),m$o=o("YosoModel"),f$o=o(" (YOSO model)"),g$o=l(),L2=a("p"),h$o=o("The model is set in evaluation mode by default using "),nue=a("code"),u$o=o("model.eval()"),p$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sue=a("code"),_$o=o("model.train()"),b$o=l(),F(y2.$$.fragment),qUe=l(),nd=a("h2"),x2=a("a"),lue=a("span"),F(e9.$$.fragment),v$o=l(),iue=a("span"),F$o=o("AutoModelForPreTraining"),jUe=l(),Ro=a("div"),F(o9.$$.fragment),T$o=l(),sd=a("p"),M$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),YO=a("a"),E$o=o("from_pretrained()"),C$o=o(" class method or the "),KO=a("a"),w$o=o("from_config()"),A$o=o(` class
method.`),L$o=l(),r9=a("p"),y$o=o("This class cannot be instantiated directly using "),due=a("code"),x$o=o("__init__()"),$$o=o(" (throws an error)."),k$o=l(),gt=a("div"),F(t9.$$.fragment),S$o=l(),cue=a("p"),R$o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),P$o=l(),ld=a("p"),B$o=o(`Note:
Loading a model from its configuration file does `),mue=a("strong"),I$o=o("not"),N$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZO=a("a"),q$o=o("from_pretrained()"),j$o=o(" to load the model weights."),D$o=l(),F($2.$$.fragment),G$o=l(),Ze=a("div"),F(a9.$$.fragment),O$o=l(),fue=a("p"),V$o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),X$o=l(),Xa=a("p"),z$o=o("The model class to instantiate is selected based on the "),gue=a("code"),W$o=o("model_type"),Q$o=o(` property of the config object (either
passed as an argument or loaded from `),hue=a("code"),U$o=o("pretrained_model_name_or_path"),H$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=a("code"),J$o=o("pretrained_model_name_or_path"),Y$o=o(":"),K$o=l(),G=a("ul"),k2=a("li"),pue=a("strong"),Z$o=o("albert"),eko=o(" \u2014 "),eV=a("a"),oko=o("AlbertForPreTraining"),rko=o(" (ALBERT model)"),tko=l(),S2=a("li"),_ue=a("strong"),ako=o("bart"),nko=o(" \u2014 "),oV=a("a"),sko=o("BartForConditionalGeneration"),lko=o(" (BART model)"),iko=l(),R2=a("li"),bue=a("strong"),dko=o("bert"),cko=o(" \u2014 "),rV=a("a"),mko=o("BertForPreTraining"),fko=o(" (BERT model)"),gko=l(),P2=a("li"),vue=a("strong"),hko=o("big_bird"),uko=o(" \u2014 "),tV=a("a"),pko=o("BigBirdForPreTraining"),_ko=o(" (BigBird model)"),bko=l(),B2=a("li"),Fue=a("strong"),vko=o("bloom"),Fko=o(" \u2014 "),aV=a("a"),Tko=o("BloomForCausalLM"),Mko=o(" (BLOOM model)"),Eko=l(),I2=a("li"),Tue=a("strong"),Cko=o("camembert"),wko=o(" \u2014 "),nV=a("a"),Ako=o("CamembertForMaskedLM"),Lko=o(" (CamemBERT model)"),yko=l(),N2=a("li"),Mue=a("strong"),xko=o("ctrl"),$ko=o(" \u2014 "),sV=a("a"),kko=o("CTRLLMHeadModel"),Sko=o(" (CTRL model)"),Rko=l(),q2=a("li"),Eue=a("strong"),Pko=o("data2vec-text"),Bko=o(" \u2014 "),lV=a("a"),Iko=o("Data2VecTextForMaskedLM"),Nko=o(" (Data2VecText model)"),qko=l(),j2=a("li"),Cue=a("strong"),jko=o("deberta"),Dko=o(" \u2014 "),iV=a("a"),Gko=o("DebertaForMaskedLM"),Oko=o(" (DeBERTa model)"),Vko=l(),D2=a("li"),wue=a("strong"),Xko=o("deberta-v2"),zko=o(" \u2014 "),dV=a("a"),Wko=o("DebertaV2ForMaskedLM"),Qko=o(" (DeBERTa-v2 model)"),Uko=l(),G2=a("li"),Aue=a("strong"),Hko=o("distilbert"),Jko=o(" \u2014 "),cV=a("a"),Yko=o("DistilBertForMaskedLM"),Kko=o(" (DistilBERT model)"),Zko=l(),O2=a("li"),Lue=a("strong"),eSo=o("electra"),oSo=o(" \u2014 "),mV=a("a"),rSo=o("ElectraForPreTraining"),tSo=o(" (ELECTRA model)"),aSo=l(),V2=a("li"),yue=a("strong"),nSo=o("flaubert"),sSo=o(" \u2014 "),fV=a("a"),lSo=o("FlaubertWithLMHeadModel"),iSo=o(" (FlauBERT model)"),dSo=l(),X2=a("li"),xue=a("strong"),cSo=o("flava"),mSo=o(" \u2014 "),gV=a("a"),fSo=o("FlavaForPreTraining"),gSo=o(" (FLAVA model)"),hSo=l(),z2=a("li"),$ue=a("strong"),uSo=o("fnet"),pSo=o(" \u2014 "),hV=a("a"),_So=o("FNetForPreTraining"),bSo=o(" (FNet model)"),vSo=l(),W2=a("li"),kue=a("strong"),FSo=o("fsmt"),TSo=o(" \u2014 "),uV=a("a"),MSo=o("FSMTForConditionalGeneration"),ESo=o(" (FairSeq Machine-Translation model)"),CSo=l(),Q2=a("li"),Sue=a("strong"),wSo=o("funnel"),ASo=o(" \u2014 "),pV=a("a"),LSo=o("FunnelForPreTraining"),ySo=o(" (Funnel Transformer model)"),xSo=l(),U2=a("li"),Rue=a("strong"),$So=o("gpt2"),kSo=o(" \u2014 "),_V=a("a"),SSo=o("GPT2LMHeadModel"),RSo=o(" (OpenAI GPT-2 model)"),PSo=l(),H2=a("li"),Pue=a("strong"),BSo=o("ibert"),ISo=o(" \u2014 "),bV=a("a"),NSo=o("IBertForMaskedLM"),qSo=o(" (I-BERT model)"),jSo=l(),J2=a("li"),Bue=a("strong"),DSo=o("layoutlm"),GSo=o(" \u2014 "),vV=a("a"),OSo=o("LayoutLMForMaskedLM"),VSo=o(" (LayoutLM model)"),XSo=l(),Y2=a("li"),Iue=a("strong"),zSo=o("longformer"),WSo=o(" \u2014 "),FV=a("a"),QSo=o("LongformerForMaskedLM"),USo=o(" (Longformer model)"),HSo=l(),K2=a("li"),Nue=a("strong"),JSo=o("luke"),YSo=o(" \u2014 "),TV=a("a"),KSo=o("LukeForMaskedLM"),ZSo=o(" (LUKE model)"),eRo=l(),Z2=a("li"),que=a("strong"),oRo=o("lxmert"),rRo=o(" \u2014 "),MV=a("a"),tRo=o("LxmertForPreTraining"),aRo=o(" (LXMERT model)"),nRo=l(),eb=a("li"),jue=a("strong"),sRo=o("megatron-bert"),lRo=o(" \u2014 "),EV=a("a"),iRo=o("MegatronBertForPreTraining"),dRo=o(" (Megatron-BERT model)"),cRo=l(),ob=a("li"),Due=a("strong"),mRo=o("mobilebert"),fRo=o(" \u2014 "),CV=a("a"),gRo=o("MobileBertForPreTraining"),hRo=o(" (MobileBERT model)"),uRo=l(),rb=a("li"),Gue=a("strong"),pRo=o("mpnet"),_Ro=o(" \u2014 "),wV=a("a"),bRo=o("MPNetForMaskedLM"),vRo=o(" (MPNet model)"),FRo=l(),tb=a("li"),Oue=a("strong"),TRo=o("mvp"),MRo=o(" \u2014 "),AV=a("a"),ERo=o("MvpForConditionalGeneration"),CRo=o(" (MVP model)"),wRo=l(),ab=a("li"),Vue=a("strong"),ARo=o("nezha"),LRo=o(" \u2014 "),LV=a("a"),yRo=o("NezhaForPreTraining"),xRo=o(" (Nezha model)"),$Ro=l(),nb=a("li"),Xue=a("strong"),kRo=o("openai-gpt"),SRo=o(" \u2014 "),yV=a("a"),RRo=o("OpenAIGPTLMHeadModel"),PRo=o(" (OpenAI GPT model)"),BRo=l(),sb=a("li"),zue=a("strong"),IRo=o("retribert"),NRo=o(" \u2014 "),xV=a("a"),qRo=o("RetriBertModel"),jRo=o(" (RetriBERT model)"),DRo=l(),lb=a("li"),Wue=a("strong"),GRo=o("roberta"),ORo=o(" \u2014 "),$V=a("a"),VRo=o("RobertaForMaskedLM"),XRo=o(" (RoBERTa model)"),zRo=l(),ib=a("li"),Que=a("strong"),WRo=o("splinter"),QRo=o(" \u2014 "),kV=a("a"),URo=o("SplinterForPreTraining"),HRo=o(" (Splinter model)"),JRo=l(),db=a("li"),Uue=a("strong"),YRo=o("squeezebert"),KRo=o(" \u2014 "),SV=a("a"),ZRo=o("SqueezeBertForMaskedLM"),ePo=o(" (SqueezeBERT model)"),oPo=l(),cb=a("li"),Hue=a("strong"),rPo=o("t5"),tPo=o(" \u2014 "),RV=a("a"),aPo=o("T5ForConditionalGeneration"),nPo=o(" (T5 model)"),sPo=l(),mb=a("li"),Jue=a("strong"),lPo=o("tapas"),iPo=o(" \u2014 "),PV=a("a"),dPo=o("TapasForMaskedLM"),cPo=o(" (TAPAS model)"),mPo=l(),fb=a("li"),Yue=a("strong"),fPo=o("transfo-xl"),gPo=o(" \u2014 "),BV=a("a"),hPo=o("TransfoXLLMHeadModel"),uPo=o(" (Transformer-XL model)"),pPo=l(),gb=a("li"),Kue=a("strong"),_Po=o("unispeech"),bPo=o(" \u2014 "),IV=a("a"),vPo=o("UniSpeechForPreTraining"),FPo=o(" (UniSpeech model)"),TPo=l(),hb=a("li"),Zue=a("strong"),MPo=o("unispeech-sat"),EPo=o(" \u2014 "),NV=a("a"),CPo=o("UniSpeechSatForPreTraining"),wPo=o(" (UniSpeechSat model)"),APo=l(),ub=a("li"),epe=a("strong"),LPo=o("videomae"),yPo=o(" \u2014 "),qV=a("a"),xPo=o("VideoMAEForPreTraining"),$Po=o(" (VideoMAE model)"),kPo=l(),pb=a("li"),ope=a("strong"),SPo=o("visual_bert"),RPo=o(" \u2014 "),jV=a("a"),PPo=o("VisualBertForPreTraining"),BPo=o(" (VisualBERT model)"),IPo=l(),_b=a("li"),rpe=a("strong"),NPo=o("vit_mae"),qPo=o(" \u2014 "),DV=a("a"),jPo=o("ViTMAEForPreTraining"),DPo=o(" (ViTMAE model)"),GPo=l(),bb=a("li"),tpe=a("strong"),OPo=o("wav2vec2"),VPo=o(" \u2014 "),GV=a("a"),XPo=o("Wav2Vec2ForPreTraining"),zPo=o(" (Wav2Vec2 model)"),WPo=l(),vb=a("li"),ape=a("strong"),QPo=o("wav2vec2-conformer"),UPo=o(" \u2014 "),OV=a("a"),HPo=o("Wav2Vec2ConformerForPreTraining"),JPo=o(" (Wav2Vec2-Conformer model)"),YPo=l(),Fb=a("li"),npe=a("strong"),KPo=o("xlm"),ZPo=o(" \u2014 "),VV=a("a"),eBo=o("XLMWithLMHeadModel"),oBo=o(" (XLM model)"),rBo=l(),Tb=a("li"),spe=a("strong"),tBo=o("xlm-roberta"),aBo=o(" \u2014 "),XV=a("a"),nBo=o("XLMRobertaForMaskedLM"),sBo=o(" (XLM-RoBERTa model)"),lBo=l(),Mb=a("li"),lpe=a("strong"),iBo=o("xlm-roberta-xl"),dBo=o(" \u2014 "),zV=a("a"),cBo=o("XLMRobertaXLForMaskedLM"),mBo=o(" (XLM-RoBERTa-XL model)"),fBo=l(),Eb=a("li"),ipe=a("strong"),gBo=o("xlnet"),hBo=o(" \u2014 "),WV=a("a"),uBo=o("XLNetLMHeadModel"),pBo=o(" (XLNet model)"),_Bo=l(),Cb=a("p"),bBo=o("The model is set in evaluation mode by default using "),dpe=a("code"),vBo=o("model.eval()"),FBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cpe=a("code"),TBo=o("model.train()"),MBo=l(),F(wb.$$.fragment),DUe=l(),id=a("h2"),Ab=a("a"),mpe=a("span"),F(n9.$$.fragment),EBo=l(),fpe=a("span"),CBo=o("AutoModelForCausalLM"),GUe=l(),Po=a("div"),F(s9.$$.fragment),wBo=l(),dd=a("p"),ABo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),QV=a("a"),LBo=o("from_pretrained()"),yBo=o(" class method or the "),UV=a("a"),xBo=o("from_config()"),$Bo=o(` class
method.`),kBo=l(),l9=a("p"),SBo=o("This class cannot be instantiated directly using "),gpe=a("code"),RBo=o("__init__()"),PBo=o(" (throws an error)."),BBo=l(),ht=a("div"),F(i9.$$.fragment),IBo=l(),hpe=a("p"),NBo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),qBo=l(),cd=a("p"),jBo=o(`Note:
Loading a model from its configuration file does `),upe=a("strong"),DBo=o("not"),GBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HV=a("a"),OBo=o("from_pretrained()"),VBo=o(" to load the model weights."),XBo=l(),F(Lb.$$.fragment),zBo=l(),eo=a("div"),F(d9.$$.fragment),WBo=l(),ppe=a("p"),QBo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),UBo=l(),za=a("p"),HBo=o("The model class to instantiate is selected based on the "),_pe=a("code"),JBo=o("model_type"),YBo=o(` property of the config object (either
passed as an argument or loaded from `),bpe=a("code"),KBo=o("pretrained_model_name_or_path"),ZBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vpe=a("code"),eIo=o("pretrained_model_name_or_path"),oIo=o(":"),rIo=l(),z=a("ul"),yb=a("li"),Fpe=a("strong"),tIo=o("bart"),aIo=o(" \u2014 "),JV=a("a"),nIo=o("BartForCausalLM"),sIo=o(" (BART model)"),lIo=l(),xb=a("li"),Tpe=a("strong"),iIo=o("bert"),dIo=o(" \u2014 "),YV=a("a"),cIo=o("BertLMHeadModel"),mIo=o(" (BERT model)"),fIo=l(),$b=a("li"),Mpe=a("strong"),gIo=o("bert-generation"),hIo=o(" \u2014 "),KV=a("a"),uIo=o("BertGenerationDecoder"),pIo=o(" (Bert Generation model)"),_Io=l(),kb=a("li"),Epe=a("strong"),bIo=o("big_bird"),vIo=o(" \u2014 "),ZV=a("a"),FIo=o("BigBirdForCausalLM"),TIo=o(" (BigBird model)"),MIo=l(),Sb=a("li"),Cpe=a("strong"),EIo=o("bigbird_pegasus"),CIo=o(" \u2014 "),eX=a("a"),wIo=o("BigBirdPegasusForCausalLM"),AIo=o(" (BigBird-Pegasus model)"),LIo=l(),Rb=a("li"),wpe=a("strong"),yIo=o("blenderbot"),xIo=o(" \u2014 "),oX=a("a"),$Io=o("BlenderbotForCausalLM"),kIo=o(" (Blenderbot model)"),SIo=l(),Pb=a("li"),Ape=a("strong"),RIo=o("blenderbot-small"),PIo=o(" \u2014 "),rX=a("a"),BIo=o("BlenderbotSmallForCausalLM"),IIo=o(" (BlenderbotSmall model)"),NIo=l(),Bb=a("li"),Lpe=a("strong"),qIo=o("bloom"),jIo=o(" \u2014 "),tX=a("a"),DIo=o("BloomForCausalLM"),GIo=o(" (BLOOM model)"),OIo=l(),Ib=a("li"),ype=a("strong"),VIo=o("camembert"),XIo=o(" \u2014 "),aX=a("a"),zIo=o("CamembertForCausalLM"),WIo=o(" (CamemBERT model)"),QIo=l(),Nb=a("li"),xpe=a("strong"),UIo=o("codegen"),HIo=o(" \u2014 "),nX=a("a"),JIo=o("CodeGenForCausalLM"),YIo=o(" (CodeGen model)"),KIo=l(),qb=a("li"),$pe=a("strong"),ZIo=o("ctrl"),eNo=o(" \u2014 "),sX=a("a"),oNo=o("CTRLLMHeadModel"),rNo=o(" (CTRL model)"),tNo=l(),jb=a("li"),kpe=a("strong"),aNo=o("data2vec-text"),nNo=o(" \u2014 "),lX=a("a"),sNo=o("Data2VecTextForCausalLM"),lNo=o(" (Data2VecText model)"),iNo=l(),Db=a("li"),Spe=a("strong"),dNo=o("electra"),cNo=o(" \u2014 "),iX=a("a"),mNo=o("ElectraForCausalLM"),fNo=o(" (ELECTRA model)"),gNo=l(),Gb=a("li"),Rpe=a("strong"),hNo=o("gpt2"),uNo=o(" \u2014 "),dX=a("a"),pNo=o("GPT2LMHeadModel"),_No=o(" (OpenAI GPT-2 model)"),bNo=l(),Ob=a("li"),Ppe=a("strong"),vNo=o("gpt_neo"),FNo=o(" \u2014 "),cX=a("a"),TNo=o("GPTNeoForCausalLM"),MNo=o(" (GPT Neo model)"),ENo=l(),Vb=a("li"),Bpe=a("strong"),CNo=o("gpt_neox"),wNo=o(" \u2014 "),mX=a("a"),ANo=o("GPTNeoXForCausalLM"),LNo=o(" (GPT NeoX model)"),yNo=l(),Xb=a("li"),Ipe=a("strong"),xNo=o("gptj"),$No=o(" \u2014 "),fX=a("a"),kNo=o("GPTJForCausalLM"),SNo=o(" (GPT-J model)"),RNo=l(),zb=a("li"),Npe=a("strong"),PNo=o("marian"),BNo=o(" \u2014 "),gX=a("a"),INo=o("MarianForCausalLM"),NNo=o(" (Marian model)"),qNo=l(),Wb=a("li"),qpe=a("strong"),jNo=o("mbart"),DNo=o(" \u2014 "),hX=a("a"),GNo=o("MBartForCausalLM"),ONo=o(" (mBART model)"),VNo=l(),Qb=a("li"),jpe=a("strong"),XNo=o("megatron-bert"),zNo=o(" \u2014 "),uX=a("a"),WNo=o("MegatronBertForCausalLM"),QNo=o(" (Megatron-BERT model)"),UNo=l(),Ub=a("li"),Dpe=a("strong"),HNo=o("mvp"),JNo=o(" \u2014 "),pX=a("a"),YNo=o("MvpForCausalLM"),KNo=o(" (MVP model)"),ZNo=l(),Hb=a("li"),Gpe=a("strong"),eqo=o("openai-gpt"),oqo=o(" \u2014 "),_X=a("a"),rqo=o("OpenAIGPTLMHeadModel"),tqo=o(" (OpenAI GPT model)"),aqo=l(),Jb=a("li"),Ope=a("strong"),nqo=o("opt"),sqo=o(" \u2014 "),bX=a("a"),lqo=o("OPTForCausalLM"),iqo=o(" (OPT model)"),dqo=l(),Yb=a("li"),Vpe=a("strong"),cqo=o("pegasus"),mqo=o(" \u2014 "),vX=a("a"),fqo=o("PegasusForCausalLM"),gqo=o(" (Pegasus model)"),hqo=l(),Kb=a("li"),Xpe=a("strong"),uqo=o("plbart"),pqo=o(" \u2014 "),FX=a("a"),_qo=o("PLBartForCausalLM"),bqo=o(" (PLBart model)"),vqo=l(),Zb=a("li"),zpe=a("strong"),Fqo=o("prophetnet"),Tqo=o(" \u2014 "),TX=a("a"),Mqo=o("ProphetNetForCausalLM"),Eqo=o(" (ProphetNet model)"),Cqo=l(),ev=a("li"),Wpe=a("strong"),wqo=o("qdqbert"),Aqo=o(" \u2014 "),MX=a("a"),Lqo=o("QDQBertLMHeadModel"),yqo=o(" (QDQBert model)"),xqo=l(),ov=a("li"),Qpe=a("strong"),$qo=o("reformer"),kqo=o(" \u2014 "),EX=a("a"),Sqo=o("ReformerModelWithLMHead"),Rqo=o(" (Reformer model)"),Pqo=l(),rv=a("li"),Upe=a("strong"),Bqo=o("rembert"),Iqo=o(" \u2014 "),CX=a("a"),Nqo=o("RemBertForCausalLM"),qqo=o(" (RemBERT model)"),jqo=l(),tv=a("li"),Hpe=a("strong"),Dqo=o("roberta"),Gqo=o(" \u2014 "),wX=a("a"),Oqo=o("RobertaForCausalLM"),Vqo=o(" (RoBERTa model)"),Xqo=l(),av=a("li"),Jpe=a("strong"),zqo=o("roformer"),Wqo=o(" \u2014 "),AX=a("a"),Qqo=o("RoFormerForCausalLM"),Uqo=o(" (RoFormer model)"),Hqo=l(),nv=a("li"),Ype=a("strong"),Jqo=o("speech_to_text_2"),Yqo=o(" \u2014 "),LX=a("a"),Kqo=o("Speech2Text2ForCausalLM"),Zqo=o(" (Speech2Text2 model)"),ejo=l(),sv=a("li"),Kpe=a("strong"),ojo=o("transfo-xl"),rjo=o(" \u2014 "),yX=a("a"),tjo=o("TransfoXLLMHeadModel"),ajo=o(" (Transformer-XL model)"),njo=l(),lv=a("li"),Zpe=a("strong"),sjo=o("trocr"),ljo=o(" \u2014 "),xX=a("a"),ijo=o("TrOCRForCausalLM"),djo=o(" (TrOCR model)"),cjo=l(),iv=a("li"),e_e=a("strong"),mjo=o("xglm"),fjo=o(" \u2014 "),$X=a("a"),gjo=o("XGLMForCausalLM"),hjo=o(" (XGLM model)"),ujo=l(),dv=a("li"),o_e=a("strong"),pjo=o("xlm"),_jo=o(" \u2014 "),kX=a("a"),bjo=o("XLMWithLMHeadModel"),vjo=o(" (XLM model)"),Fjo=l(),cv=a("li"),r_e=a("strong"),Tjo=o("xlm-prophetnet"),Mjo=o(" \u2014 "),SX=a("a"),Ejo=o("XLMProphetNetForCausalLM"),Cjo=o(" (XLM-ProphetNet model)"),wjo=l(),mv=a("li"),t_e=a("strong"),Ajo=o("xlm-roberta"),Ljo=o(" \u2014 "),RX=a("a"),yjo=o("XLMRobertaForCausalLM"),xjo=o(" (XLM-RoBERTa model)"),$jo=l(),fv=a("li"),a_e=a("strong"),kjo=o("xlm-roberta-xl"),Sjo=o(" \u2014 "),PX=a("a"),Rjo=o("XLMRobertaXLForCausalLM"),Pjo=o(" (XLM-RoBERTa-XL model)"),Bjo=l(),gv=a("li"),n_e=a("strong"),Ijo=o("xlnet"),Njo=o(" \u2014 "),BX=a("a"),qjo=o("XLNetLMHeadModel"),jjo=o(" (XLNet model)"),Djo=l(),hv=a("p"),Gjo=o("The model is set in evaluation mode by default using "),s_e=a("code"),Ojo=o("model.eval()"),Vjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l_e=a("code"),Xjo=o("model.train()"),zjo=l(),F(uv.$$.fragment),OUe=l(),md=a("h2"),pv=a("a"),i_e=a("span"),F(c9.$$.fragment),Wjo=l(),d_e=a("span"),Qjo=o("AutoModelForMaskedLM"),VUe=l(),Bo=a("div"),F(m9.$$.fragment),Ujo=l(),fd=a("p"),Hjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),IX=a("a"),Jjo=o("from_pretrained()"),Yjo=o(" class method or the "),NX=a("a"),Kjo=o("from_config()"),Zjo=o(` class
method.`),eDo=l(),f9=a("p"),oDo=o("This class cannot be instantiated directly using "),c_e=a("code"),rDo=o("__init__()"),tDo=o(" (throws an error)."),aDo=l(),ut=a("div"),F(g9.$$.fragment),nDo=l(),m_e=a("p"),sDo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lDo=l(),gd=a("p"),iDo=o(`Note:
Loading a model from its configuration file does `),f_e=a("strong"),dDo=o("not"),cDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qX=a("a"),mDo=o("from_pretrained()"),fDo=o(" to load the model weights."),gDo=l(),F(_v.$$.fragment),hDo=l(),oo=a("div"),F(h9.$$.fragment),uDo=l(),g_e=a("p"),pDo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),_Do=l(),Wa=a("p"),bDo=o("The model class to instantiate is selected based on the "),h_e=a("code"),vDo=o("model_type"),FDo=o(` property of the config object (either
passed as an argument or loaded from `),u_e=a("code"),TDo=o("pretrained_model_name_or_path"),MDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p_e=a("code"),EDo=o("pretrained_model_name_or_path"),CDo=o(":"),wDo=l(),U=a("ul"),bv=a("li"),__e=a("strong"),ADo=o("albert"),LDo=o(" \u2014 "),jX=a("a"),yDo=o("AlbertForMaskedLM"),xDo=o(" (ALBERT model)"),$Do=l(),vv=a("li"),b_e=a("strong"),kDo=o("bart"),SDo=o(" \u2014 "),DX=a("a"),RDo=o("BartForConditionalGeneration"),PDo=o(" (BART model)"),BDo=l(),Fv=a("li"),v_e=a("strong"),IDo=o("bert"),NDo=o(" \u2014 "),GX=a("a"),qDo=o("BertForMaskedLM"),jDo=o(" (BERT model)"),DDo=l(),Tv=a("li"),F_e=a("strong"),GDo=o("big_bird"),ODo=o(" \u2014 "),OX=a("a"),VDo=o("BigBirdForMaskedLM"),XDo=o(" (BigBird model)"),zDo=l(),Mv=a("li"),T_e=a("strong"),WDo=o("camembert"),QDo=o(" \u2014 "),VX=a("a"),UDo=o("CamembertForMaskedLM"),HDo=o(" (CamemBERT model)"),JDo=l(),Ev=a("li"),M_e=a("strong"),YDo=o("convbert"),KDo=o(" \u2014 "),XX=a("a"),ZDo=o("ConvBertForMaskedLM"),eGo=o(" (ConvBERT model)"),oGo=l(),Cv=a("li"),E_e=a("strong"),rGo=o("data2vec-text"),tGo=o(" \u2014 "),zX=a("a"),aGo=o("Data2VecTextForMaskedLM"),nGo=o(" (Data2VecText model)"),sGo=l(),wv=a("li"),C_e=a("strong"),lGo=o("deberta"),iGo=o(" \u2014 "),WX=a("a"),dGo=o("DebertaForMaskedLM"),cGo=o(" (DeBERTa model)"),mGo=l(),Av=a("li"),w_e=a("strong"),fGo=o("deberta-v2"),gGo=o(" \u2014 "),QX=a("a"),hGo=o("DebertaV2ForMaskedLM"),uGo=o(" (DeBERTa-v2 model)"),pGo=l(),Lv=a("li"),A_e=a("strong"),_Go=o("distilbert"),bGo=o(" \u2014 "),UX=a("a"),vGo=o("DistilBertForMaskedLM"),FGo=o(" (DistilBERT model)"),TGo=l(),yv=a("li"),L_e=a("strong"),MGo=o("electra"),EGo=o(" \u2014 "),HX=a("a"),CGo=o("ElectraForMaskedLM"),wGo=o(" (ELECTRA model)"),AGo=l(),xv=a("li"),y_e=a("strong"),LGo=o("flaubert"),yGo=o(" \u2014 "),JX=a("a"),xGo=o("FlaubertWithLMHeadModel"),$Go=o(" (FlauBERT model)"),kGo=l(),$v=a("li"),x_e=a("strong"),SGo=o("fnet"),RGo=o(" \u2014 "),YX=a("a"),PGo=o("FNetForMaskedLM"),BGo=o(" (FNet model)"),IGo=l(),kv=a("li"),$_e=a("strong"),NGo=o("funnel"),qGo=o(" \u2014 "),KX=a("a"),jGo=o("FunnelForMaskedLM"),DGo=o(" (Funnel Transformer model)"),GGo=l(),Sv=a("li"),k_e=a("strong"),OGo=o("ibert"),VGo=o(" \u2014 "),ZX=a("a"),XGo=o("IBertForMaskedLM"),zGo=o(" (I-BERT model)"),WGo=l(),Rv=a("li"),S_e=a("strong"),QGo=o("layoutlm"),UGo=o(" \u2014 "),ez=a("a"),HGo=o("LayoutLMForMaskedLM"),JGo=o(" (LayoutLM model)"),YGo=l(),Pv=a("li"),R_e=a("strong"),KGo=o("longformer"),ZGo=o(" \u2014 "),oz=a("a"),eOo=o("LongformerForMaskedLM"),oOo=o(" (Longformer model)"),rOo=l(),Bv=a("li"),P_e=a("strong"),tOo=o("luke"),aOo=o(" \u2014 "),rz=a("a"),nOo=o("LukeForMaskedLM"),sOo=o(" (LUKE model)"),lOo=l(),Iv=a("li"),B_e=a("strong"),iOo=o("mbart"),dOo=o(" \u2014 "),tz=a("a"),cOo=o("MBartForConditionalGeneration"),mOo=o(" (mBART model)"),fOo=l(),Nv=a("li"),I_e=a("strong"),gOo=o("megatron-bert"),hOo=o(" \u2014 "),az=a("a"),uOo=o("MegatronBertForMaskedLM"),pOo=o(" (Megatron-BERT model)"),_Oo=l(),qv=a("li"),N_e=a("strong"),bOo=o("mobilebert"),vOo=o(" \u2014 "),nz=a("a"),FOo=o("MobileBertForMaskedLM"),TOo=o(" (MobileBERT model)"),MOo=l(),jv=a("li"),q_e=a("strong"),EOo=o("mpnet"),COo=o(" \u2014 "),sz=a("a"),wOo=o("MPNetForMaskedLM"),AOo=o(" (MPNet model)"),LOo=l(),Dv=a("li"),j_e=a("strong"),yOo=o("mvp"),xOo=o(" \u2014 "),lz=a("a"),$Oo=o("MvpForConditionalGeneration"),kOo=o(" (MVP model)"),SOo=l(),Gv=a("li"),D_e=a("strong"),ROo=o("nezha"),POo=o(" \u2014 "),iz=a("a"),BOo=o("NezhaForMaskedLM"),IOo=o(" (Nezha model)"),NOo=l(),Ov=a("li"),G_e=a("strong"),qOo=o("nystromformer"),jOo=o(" \u2014 "),dz=a("a"),DOo=o("NystromformerForMaskedLM"),GOo=o(" (Nystr\xF6mformer model)"),OOo=l(),Vv=a("li"),O_e=a("strong"),VOo=o("perceiver"),XOo=o(" \u2014 "),cz=a("a"),zOo=o("PerceiverForMaskedLM"),WOo=o(" (Perceiver model)"),QOo=l(),Xv=a("li"),V_e=a("strong"),UOo=o("qdqbert"),HOo=o(" \u2014 "),mz=a("a"),JOo=o("QDQBertForMaskedLM"),YOo=o(" (QDQBert model)"),KOo=l(),zv=a("li"),X_e=a("strong"),ZOo=o("reformer"),eVo=o(" \u2014 "),fz=a("a"),oVo=o("ReformerForMaskedLM"),rVo=o(" (Reformer model)"),tVo=l(),Wv=a("li"),z_e=a("strong"),aVo=o("rembert"),nVo=o(" \u2014 "),gz=a("a"),sVo=o("RemBertForMaskedLM"),lVo=o(" (RemBERT model)"),iVo=l(),Qv=a("li"),W_e=a("strong"),dVo=o("roberta"),cVo=o(" \u2014 "),hz=a("a"),mVo=o("RobertaForMaskedLM"),fVo=o(" (RoBERTa model)"),gVo=l(),Uv=a("li"),Q_e=a("strong"),hVo=o("roformer"),uVo=o(" \u2014 "),uz=a("a"),pVo=o("RoFormerForMaskedLM"),_Vo=o(" (RoFormer model)"),bVo=l(),Hv=a("li"),U_e=a("strong"),vVo=o("squeezebert"),FVo=o(" \u2014 "),pz=a("a"),TVo=o("SqueezeBertForMaskedLM"),MVo=o(" (SqueezeBERT model)"),EVo=l(),Jv=a("li"),H_e=a("strong"),CVo=o("tapas"),wVo=o(" \u2014 "),_z=a("a"),AVo=o("TapasForMaskedLM"),LVo=o(" (TAPAS model)"),yVo=l(),Yv=a("li"),J_e=a("strong"),xVo=o("wav2vec2"),$Vo=o(" \u2014 "),Y_e=a("code"),kVo=o("Wav2Vec2ForMaskedLM"),SVo=o(" (Wav2Vec2 model)"),RVo=l(),Kv=a("li"),K_e=a("strong"),PVo=o("xlm"),BVo=o(" \u2014 "),bz=a("a"),IVo=o("XLMWithLMHeadModel"),NVo=o(" (XLM model)"),qVo=l(),Zv=a("li"),Z_e=a("strong"),jVo=o("xlm-roberta"),DVo=o(" \u2014 "),vz=a("a"),GVo=o("XLMRobertaForMaskedLM"),OVo=o(" (XLM-RoBERTa model)"),VVo=l(),e1=a("li"),e2e=a("strong"),XVo=o("xlm-roberta-xl"),zVo=o(" \u2014 "),Fz=a("a"),WVo=o("XLMRobertaXLForMaskedLM"),QVo=o(" (XLM-RoBERTa-XL model)"),UVo=l(),o1=a("li"),o2e=a("strong"),HVo=o("yoso"),JVo=o(" \u2014 "),Tz=a("a"),YVo=o("YosoForMaskedLM"),KVo=o(" (YOSO model)"),ZVo=l(),r1=a("p"),eXo=o("The model is set in evaluation mode by default using "),r2e=a("code"),oXo=o("model.eval()"),rXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t2e=a("code"),tXo=o("model.train()"),aXo=l(),F(t1.$$.fragment),XUe=l(),hd=a("h2"),a1=a("a"),a2e=a("span"),F(u9.$$.fragment),nXo=l(),n2e=a("span"),sXo=o("AutoModelForSeq2SeqLM"),zUe=l(),Io=a("div"),F(p9.$$.fragment),lXo=l(),ud=a("p"),iXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Mz=a("a"),dXo=o("from_pretrained()"),cXo=o(" class method or the "),Ez=a("a"),mXo=o("from_config()"),fXo=o(` class
method.`),gXo=l(),_9=a("p"),hXo=o("This class cannot be instantiated directly using "),s2e=a("code"),uXo=o("__init__()"),pXo=o(" (throws an error)."),_Xo=l(),pt=a("div"),F(b9.$$.fragment),bXo=l(),l2e=a("p"),vXo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),FXo=l(),pd=a("p"),TXo=o(`Note:
Loading a model from its configuration file does `),i2e=a("strong"),MXo=o("not"),EXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cz=a("a"),CXo=o("from_pretrained()"),wXo=o(" to load the model weights."),AXo=l(),F(n1.$$.fragment),LXo=l(),ro=a("div"),F(v9.$$.fragment),yXo=l(),d2e=a("p"),xXo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$Xo=l(),Qa=a("p"),kXo=o("The model class to instantiate is selected based on the "),c2e=a("code"),SXo=o("model_type"),RXo=o(` property of the config object (either
passed as an argument or loaded from `),m2e=a("code"),PXo=o("pretrained_model_name_or_path"),BXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f2e=a("code"),IXo=o("pretrained_model_name_or_path"),NXo=o(":"),qXo=l(),he=a("ul"),s1=a("li"),g2e=a("strong"),jXo=o("bart"),DXo=o(" \u2014 "),wz=a("a"),GXo=o("BartForConditionalGeneration"),OXo=o(" (BART model)"),VXo=l(),l1=a("li"),h2e=a("strong"),XXo=o("bigbird_pegasus"),zXo=o(" \u2014 "),Az=a("a"),WXo=o("BigBirdPegasusForConditionalGeneration"),QXo=o(" (BigBird-Pegasus model)"),UXo=l(),i1=a("li"),u2e=a("strong"),HXo=o("blenderbot"),JXo=o(" \u2014 "),Lz=a("a"),YXo=o("BlenderbotForConditionalGeneration"),KXo=o(" (Blenderbot model)"),ZXo=l(),d1=a("li"),p2e=a("strong"),ezo=o("blenderbot-small"),ozo=o(" \u2014 "),yz=a("a"),rzo=o("BlenderbotSmallForConditionalGeneration"),tzo=o(" (BlenderbotSmall model)"),azo=l(),c1=a("li"),_2e=a("strong"),nzo=o("encoder-decoder"),szo=o(" \u2014 "),xz=a("a"),lzo=o("EncoderDecoderModel"),izo=o(" (Encoder decoder model)"),dzo=l(),m1=a("li"),b2e=a("strong"),czo=o("fsmt"),mzo=o(" \u2014 "),$z=a("a"),fzo=o("FSMTForConditionalGeneration"),gzo=o(" (FairSeq Machine-Translation model)"),hzo=l(),f1=a("li"),v2e=a("strong"),uzo=o("led"),pzo=o(" \u2014 "),kz=a("a"),_zo=o("LEDForConditionalGeneration"),bzo=o(" (LED model)"),vzo=l(),g1=a("li"),F2e=a("strong"),Fzo=o("longt5"),Tzo=o(" \u2014 "),Sz=a("a"),Mzo=o("LongT5ForConditionalGeneration"),Ezo=o(" (LongT5 model)"),Czo=l(),h1=a("li"),T2e=a("strong"),wzo=o("m2m_100"),Azo=o(" \u2014 "),Rz=a("a"),Lzo=o("M2M100ForConditionalGeneration"),yzo=o(" (M2M100 model)"),xzo=l(),u1=a("li"),M2e=a("strong"),$zo=o("marian"),kzo=o(" \u2014 "),Pz=a("a"),Szo=o("MarianMTModel"),Rzo=o(" (Marian model)"),Pzo=l(),p1=a("li"),E2e=a("strong"),Bzo=o("mbart"),Izo=o(" \u2014 "),Bz=a("a"),Nzo=o("MBartForConditionalGeneration"),qzo=o(" (mBART model)"),jzo=l(),_1=a("li"),C2e=a("strong"),Dzo=o("mt5"),Gzo=o(" \u2014 "),Iz=a("a"),Ozo=o("MT5ForConditionalGeneration"),Vzo=o(" (MT5 model)"),Xzo=l(),b1=a("li"),w2e=a("strong"),zzo=o("mvp"),Wzo=o(" \u2014 "),Nz=a("a"),Qzo=o("MvpForConditionalGeneration"),Uzo=o(" (MVP model)"),Hzo=l(),v1=a("li"),A2e=a("strong"),Jzo=o("nllb"),Yzo=o(" \u2014 "),qz=a("a"),Kzo=o("M2M100ForConditionalGeneration"),Zzo=o(" (NLLB model)"),eWo=l(),F1=a("li"),L2e=a("strong"),oWo=o("pegasus"),rWo=o(" \u2014 "),jz=a("a"),tWo=o("PegasusForConditionalGeneration"),aWo=o(" (Pegasus model)"),nWo=l(),T1=a("li"),y2e=a("strong"),sWo=o("plbart"),lWo=o(" \u2014 "),Dz=a("a"),iWo=o("PLBartForConditionalGeneration"),dWo=o(" (PLBart model)"),cWo=l(),M1=a("li"),x2e=a("strong"),mWo=o("prophetnet"),fWo=o(" \u2014 "),Gz=a("a"),gWo=o("ProphetNetForConditionalGeneration"),hWo=o(" (ProphetNet model)"),uWo=l(),E1=a("li"),$2e=a("strong"),pWo=o("t5"),_Wo=o(" \u2014 "),Oz=a("a"),bWo=o("T5ForConditionalGeneration"),vWo=o(" (T5 model)"),FWo=l(),C1=a("li"),k2e=a("strong"),TWo=o("xlm-prophetnet"),MWo=o(" \u2014 "),Vz=a("a"),EWo=o("XLMProphetNetForConditionalGeneration"),CWo=o(" (XLM-ProphetNet model)"),wWo=l(),w1=a("p"),AWo=o("The model is set in evaluation mode by default using "),S2e=a("code"),LWo=o("model.eval()"),yWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R2e=a("code"),xWo=o("model.train()"),$Wo=l(),F(A1.$$.fragment),WUe=l(),_d=a("h2"),L1=a("a"),P2e=a("span"),F(F9.$$.fragment),kWo=l(),B2e=a("span"),SWo=o("AutoModelForSequenceClassification"),QUe=l(),No=a("div"),F(T9.$$.fragment),RWo=l(),bd=a("p"),PWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Xz=a("a"),BWo=o("from_pretrained()"),IWo=o(" class method or the "),zz=a("a"),NWo=o("from_config()"),qWo=o(` class
method.`),jWo=l(),M9=a("p"),DWo=o("This class cannot be instantiated directly using "),I2e=a("code"),GWo=o("__init__()"),OWo=o(" (throws an error)."),VWo=l(),_t=a("div"),F(E9.$$.fragment),XWo=l(),N2e=a("p"),zWo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),WWo=l(),vd=a("p"),QWo=o(`Note:
Loading a model from its configuration file does `),q2e=a("strong"),UWo=o("not"),HWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wz=a("a"),JWo=o("from_pretrained()"),YWo=o(" to load the model weights."),KWo=l(),F(y1.$$.fragment),ZWo=l(),to=a("div"),F(C9.$$.fragment),eQo=l(),j2e=a("p"),oQo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),rQo=l(),Ua=a("p"),tQo=o("The model class to instantiate is selected based on the "),D2e=a("code"),aQo=o("model_type"),nQo=o(` property of the config object (either
passed as an argument or loaded from `),G2e=a("code"),sQo=o("pretrained_model_name_or_path"),lQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O2e=a("code"),iQo=o("pretrained_model_name_or_path"),dQo=o(":"),cQo=l(),j=a("ul"),x1=a("li"),V2e=a("strong"),mQo=o("albert"),fQo=o(" \u2014 "),Qz=a("a"),gQo=o("AlbertForSequenceClassification"),hQo=o(" (ALBERT model)"),uQo=l(),$1=a("li"),X2e=a("strong"),pQo=o("bart"),_Qo=o(" \u2014 "),Uz=a("a"),bQo=o("BartForSequenceClassification"),vQo=o(" (BART model)"),FQo=l(),k1=a("li"),z2e=a("strong"),TQo=o("bert"),MQo=o(" \u2014 "),Hz=a("a"),EQo=o("BertForSequenceClassification"),CQo=o(" (BERT model)"),wQo=l(),S1=a("li"),W2e=a("strong"),AQo=o("big_bird"),LQo=o(" \u2014 "),Jz=a("a"),yQo=o("BigBirdForSequenceClassification"),xQo=o(" (BigBird model)"),$Qo=l(),R1=a("li"),Q2e=a("strong"),kQo=o("bigbird_pegasus"),SQo=o(" \u2014 "),Yz=a("a"),RQo=o("BigBirdPegasusForSequenceClassification"),PQo=o(" (BigBird-Pegasus model)"),BQo=l(),P1=a("li"),U2e=a("strong"),IQo=o("bloom"),NQo=o(" \u2014 "),Kz=a("a"),qQo=o("BloomForSequenceClassification"),jQo=o(" (BLOOM model)"),DQo=l(),B1=a("li"),H2e=a("strong"),GQo=o("camembert"),OQo=o(" \u2014 "),Zz=a("a"),VQo=o("CamembertForSequenceClassification"),XQo=o(" (CamemBERT model)"),zQo=l(),I1=a("li"),J2e=a("strong"),WQo=o("canine"),QQo=o(" \u2014 "),eW=a("a"),UQo=o("CanineForSequenceClassification"),HQo=o(" (CANINE model)"),JQo=l(),N1=a("li"),Y2e=a("strong"),YQo=o("convbert"),KQo=o(" \u2014 "),oW=a("a"),ZQo=o("ConvBertForSequenceClassification"),eUo=o(" (ConvBERT model)"),oUo=l(),q1=a("li"),K2e=a("strong"),rUo=o("ctrl"),tUo=o(" \u2014 "),rW=a("a"),aUo=o("CTRLForSequenceClassification"),nUo=o(" (CTRL model)"),sUo=l(),j1=a("li"),Z2e=a("strong"),lUo=o("data2vec-text"),iUo=o(" \u2014 "),tW=a("a"),dUo=o("Data2VecTextForSequenceClassification"),cUo=o(" (Data2VecText model)"),mUo=l(),D1=a("li"),ebe=a("strong"),fUo=o("deberta"),gUo=o(" \u2014 "),aW=a("a"),hUo=o("DebertaForSequenceClassification"),uUo=o(" (DeBERTa model)"),pUo=l(),G1=a("li"),obe=a("strong"),_Uo=o("deberta-v2"),bUo=o(" \u2014 "),nW=a("a"),vUo=o("DebertaV2ForSequenceClassification"),FUo=o(" (DeBERTa-v2 model)"),TUo=l(),O1=a("li"),rbe=a("strong"),MUo=o("distilbert"),EUo=o(" \u2014 "),sW=a("a"),CUo=o("DistilBertForSequenceClassification"),wUo=o(" (DistilBERT model)"),AUo=l(),V1=a("li"),tbe=a("strong"),LUo=o("electra"),yUo=o(" \u2014 "),lW=a("a"),xUo=o("ElectraForSequenceClassification"),$Uo=o(" (ELECTRA model)"),kUo=l(),X1=a("li"),abe=a("strong"),SUo=o("flaubert"),RUo=o(" \u2014 "),iW=a("a"),PUo=o("FlaubertForSequenceClassification"),BUo=o(" (FlauBERT model)"),IUo=l(),z1=a("li"),nbe=a("strong"),NUo=o("fnet"),qUo=o(" \u2014 "),dW=a("a"),jUo=o("FNetForSequenceClassification"),DUo=o(" (FNet model)"),GUo=l(),W1=a("li"),sbe=a("strong"),OUo=o("funnel"),VUo=o(" \u2014 "),cW=a("a"),XUo=o("FunnelForSequenceClassification"),zUo=o(" (Funnel Transformer model)"),WUo=l(),Q1=a("li"),lbe=a("strong"),QUo=o("gpt2"),UUo=o(" \u2014 "),mW=a("a"),HUo=o("GPT2ForSequenceClassification"),JUo=o(" (OpenAI GPT-2 model)"),YUo=l(),U1=a("li"),ibe=a("strong"),KUo=o("gpt_neo"),ZUo=o(" \u2014 "),fW=a("a"),eHo=o("GPTNeoForSequenceClassification"),oHo=o(" (GPT Neo model)"),rHo=l(),H1=a("li"),dbe=a("strong"),tHo=o("gptj"),aHo=o(" \u2014 "),gW=a("a"),nHo=o("GPTJForSequenceClassification"),sHo=o(" (GPT-J model)"),lHo=l(),J1=a("li"),cbe=a("strong"),iHo=o("ibert"),dHo=o(" \u2014 "),hW=a("a"),cHo=o("IBertForSequenceClassification"),mHo=o(" (I-BERT model)"),fHo=l(),Y1=a("li"),mbe=a("strong"),gHo=o("layoutlm"),hHo=o(" \u2014 "),uW=a("a"),uHo=o("LayoutLMForSequenceClassification"),pHo=o(" (LayoutLM model)"),_Ho=l(),K1=a("li"),fbe=a("strong"),bHo=o("layoutlmv2"),vHo=o(" \u2014 "),pW=a("a"),FHo=o("LayoutLMv2ForSequenceClassification"),THo=o(" (LayoutLMv2 model)"),MHo=l(),Z1=a("li"),gbe=a("strong"),EHo=o("layoutlmv3"),CHo=o(" \u2014 "),_W=a("a"),wHo=o("LayoutLMv3ForSequenceClassification"),AHo=o(" (LayoutLMv3 model)"),LHo=l(),eF=a("li"),hbe=a("strong"),yHo=o("led"),xHo=o(" \u2014 "),bW=a("a"),$Ho=o("LEDForSequenceClassification"),kHo=o(" (LED model)"),SHo=l(),oF=a("li"),ube=a("strong"),RHo=o("longformer"),PHo=o(" \u2014 "),vW=a("a"),BHo=o("LongformerForSequenceClassification"),IHo=o(" (Longformer model)"),NHo=l(),rF=a("li"),pbe=a("strong"),qHo=o("luke"),jHo=o(" \u2014 "),FW=a("a"),DHo=o("LukeForSequenceClassification"),GHo=o(" (LUKE model)"),OHo=l(),tF=a("li"),_be=a("strong"),VHo=o("mbart"),XHo=o(" \u2014 "),TW=a("a"),zHo=o("MBartForSequenceClassification"),WHo=o(" (mBART model)"),QHo=l(),aF=a("li"),bbe=a("strong"),UHo=o("megatron-bert"),HHo=o(" \u2014 "),MW=a("a"),JHo=o("MegatronBertForSequenceClassification"),YHo=o(" (Megatron-BERT model)"),KHo=l(),nF=a("li"),vbe=a("strong"),ZHo=o("mobilebert"),eJo=o(" \u2014 "),EW=a("a"),oJo=o("MobileBertForSequenceClassification"),rJo=o(" (MobileBERT model)"),tJo=l(),sF=a("li"),Fbe=a("strong"),aJo=o("mpnet"),nJo=o(" \u2014 "),CW=a("a"),sJo=o("MPNetForSequenceClassification"),lJo=o(" (MPNet model)"),iJo=l(),lF=a("li"),Tbe=a("strong"),dJo=o("mvp"),cJo=o(" \u2014 "),wW=a("a"),mJo=o("MvpForSequenceClassification"),fJo=o(" (MVP model)"),gJo=l(),iF=a("li"),Mbe=a("strong"),hJo=o("nezha"),uJo=o(" \u2014 "),AW=a("a"),pJo=o("NezhaForSequenceClassification"),_Jo=o(" (Nezha model)"),bJo=l(),dF=a("li"),Ebe=a("strong"),vJo=o("nystromformer"),FJo=o(" \u2014 "),LW=a("a"),TJo=o("NystromformerForSequenceClassification"),MJo=o(" (Nystr\xF6mformer model)"),EJo=l(),cF=a("li"),Cbe=a("strong"),CJo=o("openai-gpt"),wJo=o(" \u2014 "),yW=a("a"),AJo=o("OpenAIGPTForSequenceClassification"),LJo=o(" (OpenAI GPT model)"),yJo=l(),mF=a("li"),wbe=a("strong"),xJo=o("opt"),$Jo=o(" \u2014 "),xW=a("a"),kJo=o("OPTForSequenceClassification"),SJo=o(" (OPT model)"),RJo=l(),fF=a("li"),Abe=a("strong"),PJo=o("perceiver"),BJo=o(" \u2014 "),$W=a("a"),IJo=o("PerceiverForSequenceClassification"),NJo=o(" (Perceiver model)"),qJo=l(),gF=a("li"),Lbe=a("strong"),jJo=o("plbart"),DJo=o(" \u2014 "),kW=a("a"),GJo=o("PLBartForSequenceClassification"),OJo=o(" (PLBart model)"),VJo=l(),hF=a("li"),ybe=a("strong"),XJo=o("qdqbert"),zJo=o(" \u2014 "),SW=a("a"),WJo=o("QDQBertForSequenceClassification"),QJo=o(" (QDQBert model)"),UJo=l(),uF=a("li"),xbe=a("strong"),HJo=o("reformer"),JJo=o(" \u2014 "),RW=a("a"),YJo=o("ReformerForSequenceClassification"),KJo=o(" (Reformer model)"),ZJo=l(),pF=a("li"),$be=a("strong"),eYo=o("rembert"),oYo=o(" \u2014 "),PW=a("a"),rYo=o("RemBertForSequenceClassification"),tYo=o(" (RemBERT model)"),aYo=l(),_F=a("li"),kbe=a("strong"),nYo=o("roberta"),sYo=o(" \u2014 "),BW=a("a"),lYo=o("RobertaForSequenceClassification"),iYo=o(" (RoBERTa model)"),dYo=l(),bF=a("li"),Sbe=a("strong"),cYo=o("roformer"),mYo=o(" \u2014 "),IW=a("a"),fYo=o("RoFormerForSequenceClassification"),gYo=o(" (RoFormer model)"),hYo=l(),vF=a("li"),Rbe=a("strong"),uYo=o("squeezebert"),pYo=o(" \u2014 "),NW=a("a"),_Yo=o("SqueezeBertForSequenceClassification"),bYo=o(" (SqueezeBERT model)"),vYo=l(),FF=a("li"),Pbe=a("strong"),FYo=o("tapas"),TYo=o(" \u2014 "),qW=a("a"),MYo=o("TapasForSequenceClassification"),EYo=o(" (TAPAS model)"),CYo=l(),TF=a("li"),Bbe=a("strong"),wYo=o("transfo-xl"),AYo=o(" \u2014 "),jW=a("a"),LYo=o("TransfoXLForSequenceClassification"),yYo=o(" (Transformer-XL model)"),xYo=l(),MF=a("li"),Ibe=a("strong"),$Yo=o("xlm"),kYo=o(" \u2014 "),DW=a("a"),SYo=o("XLMForSequenceClassification"),RYo=o(" (XLM model)"),PYo=l(),EF=a("li"),Nbe=a("strong"),BYo=o("xlm-roberta"),IYo=o(" \u2014 "),GW=a("a"),NYo=o("XLMRobertaForSequenceClassification"),qYo=o(" (XLM-RoBERTa model)"),jYo=l(),CF=a("li"),qbe=a("strong"),DYo=o("xlm-roberta-xl"),GYo=o(" \u2014 "),OW=a("a"),OYo=o("XLMRobertaXLForSequenceClassification"),VYo=o(" (XLM-RoBERTa-XL model)"),XYo=l(),wF=a("li"),jbe=a("strong"),zYo=o("xlnet"),WYo=o(" \u2014 "),VW=a("a"),QYo=o("XLNetForSequenceClassification"),UYo=o(" (XLNet model)"),HYo=l(),AF=a("li"),Dbe=a("strong"),JYo=o("yoso"),YYo=o(" \u2014 "),XW=a("a"),KYo=o("YosoForSequenceClassification"),ZYo=o(" (YOSO model)"),eKo=l(),LF=a("p"),oKo=o("The model is set in evaluation mode by default using "),Gbe=a("code"),rKo=o("model.eval()"),tKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Obe=a("code"),aKo=o("model.train()"),nKo=l(),F(yF.$$.fragment),UUe=l(),Fd=a("h2"),xF=a("a"),Vbe=a("span"),F(w9.$$.fragment),sKo=l(),Xbe=a("span"),lKo=o("AutoModelForMultipleChoice"),HUe=l(),qo=a("div"),F(A9.$$.fragment),iKo=l(),Td=a("p"),dKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),zW=a("a"),cKo=o("from_pretrained()"),mKo=o(" class method or the "),WW=a("a"),fKo=o("from_config()"),gKo=o(` class
method.`),hKo=l(),L9=a("p"),uKo=o("This class cannot be instantiated directly using "),zbe=a("code"),pKo=o("__init__()"),_Ko=o(" (throws an error)."),bKo=l(),bt=a("div"),F(y9.$$.fragment),vKo=l(),Wbe=a("p"),FKo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),TKo=l(),Md=a("p"),MKo=o(`Note:
Loading a model from its configuration file does `),Qbe=a("strong"),EKo=o("not"),CKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=a("a"),wKo=o("from_pretrained()"),AKo=o(" to load the model weights."),LKo=l(),F($F.$$.fragment),yKo=l(),ao=a("div"),F(x9.$$.fragment),xKo=l(),Ube=a("p"),$Ko=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),kKo=l(),Ha=a("p"),SKo=o("The model class to instantiate is selected based on the "),Hbe=a("code"),RKo=o("model_type"),PKo=o(` property of the config object (either
passed as an argument or loaded from `),Jbe=a("code"),BKo=o("pretrained_model_name_or_path"),IKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ybe=a("code"),NKo=o("pretrained_model_name_or_path"),qKo=o(":"),jKo=l(),Z=a("ul"),kF=a("li"),Kbe=a("strong"),DKo=o("albert"),GKo=o(" \u2014 "),UW=a("a"),OKo=o("AlbertForMultipleChoice"),VKo=o(" (ALBERT model)"),XKo=l(),SF=a("li"),Zbe=a("strong"),zKo=o("bert"),WKo=o(" \u2014 "),HW=a("a"),QKo=o("BertForMultipleChoice"),UKo=o(" (BERT model)"),HKo=l(),RF=a("li"),eve=a("strong"),JKo=o("big_bird"),YKo=o(" \u2014 "),JW=a("a"),KKo=o("BigBirdForMultipleChoice"),ZKo=o(" (BigBird model)"),eZo=l(),PF=a("li"),ove=a("strong"),oZo=o("camembert"),rZo=o(" \u2014 "),YW=a("a"),tZo=o("CamembertForMultipleChoice"),aZo=o(" (CamemBERT model)"),nZo=l(),BF=a("li"),rve=a("strong"),sZo=o("canine"),lZo=o(" \u2014 "),KW=a("a"),iZo=o("CanineForMultipleChoice"),dZo=o(" (CANINE model)"),cZo=l(),IF=a("li"),tve=a("strong"),mZo=o("convbert"),fZo=o(" \u2014 "),ZW=a("a"),gZo=o("ConvBertForMultipleChoice"),hZo=o(" (ConvBERT model)"),uZo=l(),NF=a("li"),ave=a("strong"),pZo=o("data2vec-text"),_Zo=o(" \u2014 "),eQ=a("a"),bZo=o("Data2VecTextForMultipleChoice"),vZo=o(" (Data2VecText model)"),FZo=l(),qF=a("li"),nve=a("strong"),TZo=o("deberta-v2"),MZo=o(" \u2014 "),oQ=a("a"),EZo=o("DebertaV2ForMultipleChoice"),CZo=o(" (DeBERTa-v2 model)"),wZo=l(),jF=a("li"),sve=a("strong"),AZo=o("distilbert"),LZo=o(" \u2014 "),rQ=a("a"),yZo=o("DistilBertForMultipleChoice"),xZo=o(" (DistilBERT model)"),$Zo=l(),DF=a("li"),lve=a("strong"),kZo=o("electra"),SZo=o(" \u2014 "),tQ=a("a"),RZo=o("ElectraForMultipleChoice"),PZo=o(" (ELECTRA model)"),BZo=l(),GF=a("li"),ive=a("strong"),IZo=o("flaubert"),NZo=o(" \u2014 "),aQ=a("a"),qZo=o("FlaubertForMultipleChoice"),jZo=o(" (FlauBERT model)"),DZo=l(),OF=a("li"),dve=a("strong"),GZo=o("fnet"),OZo=o(" \u2014 "),nQ=a("a"),VZo=o("FNetForMultipleChoice"),XZo=o(" (FNet model)"),zZo=l(),VF=a("li"),cve=a("strong"),WZo=o("funnel"),QZo=o(" \u2014 "),sQ=a("a"),UZo=o("FunnelForMultipleChoice"),HZo=o(" (Funnel Transformer model)"),JZo=l(),XF=a("li"),mve=a("strong"),YZo=o("ibert"),KZo=o(" \u2014 "),lQ=a("a"),ZZo=o("IBertForMultipleChoice"),eer=o(" (I-BERT model)"),oer=l(),zF=a("li"),fve=a("strong"),rer=o("longformer"),ter=o(" \u2014 "),iQ=a("a"),aer=o("LongformerForMultipleChoice"),ner=o(" (Longformer model)"),ser=l(),WF=a("li"),gve=a("strong"),ler=o("luke"),ier=o(" \u2014 "),dQ=a("a"),der=o("LukeForMultipleChoice"),cer=o(" (LUKE model)"),mer=l(),QF=a("li"),hve=a("strong"),fer=o("megatron-bert"),ger=o(" \u2014 "),cQ=a("a"),her=o("MegatronBertForMultipleChoice"),uer=o(" (Megatron-BERT model)"),per=l(),UF=a("li"),uve=a("strong"),_er=o("mobilebert"),ber=o(" \u2014 "),mQ=a("a"),ver=o("MobileBertForMultipleChoice"),Fer=o(" (MobileBERT model)"),Ter=l(),HF=a("li"),pve=a("strong"),Mer=o("mpnet"),Eer=o(" \u2014 "),fQ=a("a"),Cer=o("MPNetForMultipleChoice"),wer=o(" (MPNet model)"),Aer=l(),JF=a("li"),_ve=a("strong"),Ler=o("nezha"),yer=o(" \u2014 "),gQ=a("a"),xer=o("NezhaForMultipleChoice"),$er=o(" (Nezha model)"),ker=l(),YF=a("li"),bve=a("strong"),Ser=o("nystromformer"),Rer=o(" \u2014 "),hQ=a("a"),Per=o("NystromformerForMultipleChoice"),Ber=o(" (Nystr\xF6mformer model)"),Ier=l(),KF=a("li"),vve=a("strong"),Ner=o("qdqbert"),qer=o(" \u2014 "),uQ=a("a"),jer=o("QDQBertForMultipleChoice"),Der=o(" (QDQBert model)"),Ger=l(),ZF=a("li"),Fve=a("strong"),Oer=o("rembert"),Ver=o(" \u2014 "),pQ=a("a"),Xer=o("RemBertForMultipleChoice"),zer=o(" (RemBERT model)"),Wer=l(),eT=a("li"),Tve=a("strong"),Qer=o("roberta"),Uer=o(" \u2014 "),_Q=a("a"),Her=o("RobertaForMultipleChoice"),Jer=o(" (RoBERTa model)"),Yer=l(),oT=a("li"),Mve=a("strong"),Ker=o("roformer"),Zer=o(" \u2014 "),bQ=a("a"),eor=o("RoFormerForMultipleChoice"),oor=o(" (RoFormer model)"),ror=l(),rT=a("li"),Eve=a("strong"),tor=o("squeezebert"),aor=o(" \u2014 "),vQ=a("a"),nor=o("SqueezeBertForMultipleChoice"),sor=o(" (SqueezeBERT model)"),lor=l(),tT=a("li"),Cve=a("strong"),ior=o("xlm"),dor=o(" \u2014 "),FQ=a("a"),cor=o("XLMForMultipleChoice"),mor=o(" (XLM model)"),gor=l(),aT=a("li"),wve=a("strong"),hor=o("xlm-roberta"),uor=o(" \u2014 "),TQ=a("a"),por=o("XLMRobertaForMultipleChoice"),_or=o(" (XLM-RoBERTa model)"),bor=l(),nT=a("li"),Ave=a("strong"),vor=o("xlm-roberta-xl"),For=o(" \u2014 "),MQ=a("a"),Tor=o("XLMRobertaXLForMultipleChoice"),Mor=o(" (XLM-RoBERTa-XL model)"),Eor=l(),sT=a("li"),Lve=a("strong"),Cor=o("xlnet"),wor=o(" \u2014 "),EQ=a("a"),Aor=o("XLNetForMultipleChoice"),Lor=o(" (XLNet model)"),yor=l(),lT=a("li"),yve=a("strong"),xor=o("yoso"),$or=o(" \u2014 "),CQ=a("a"),kor=o("YosoForMultipleChoice"),Sor=o(" (YOSO model)"),Ror=l(),iT=a("p"),Por=o("The model is set in evaluation mode by default using "),xve=a("code"),Bor=o("model.eval()"),Ior=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ve=a("code"),Nor=o("model.train()"),qor=l(),F(dT.$$.fragment),JUe=l(),Ed=a("h2"),cT=a("a"),kve=a("span"),F($9.$$.fragment),jor=l(),Sve=a("span"),Dor=o("AutoModelForNextSentencePrediction"),YUe=l(),jo=a("div"),F(k9.$$.fragment),Gor=l(),Cd=a("p"),Oor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),wQ=a("a"),Vor=o("from_pretrained()"),Xor=o(" class method or the "),AQ=a("a"),zor=o("from_config()"),Wor=o(` class
method.`),Qor=l(),S9=a("p"),Uor=o("This class cannot be instantiated directly using "),Rve=a("code"),Hor=o("__init__()"),Jor=o(" (throws an error)."),Yor=l(),vt=a("div"),F(R9.$$.fragment),Kor=l(),Pve=a("p"),Zor=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),err=l(),wd=a("p"),orr=o(`Note:
Loading a model from its configuration file does `),Bve=a("strong"),rrr=o("not"),trr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LQ=a("a"),arr=o("from_pretrained()"),nrr=o(" to load the model weights."),srr=l(),F(mT.$$.fragment),lrr=l(),no=a("div"),F(P9.$$.fragment),irr=l(),Ive=a("p"),drr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),crr=l(),Ja=a("p"),mrr=o("The model class to instantiate is selected based on the "),Nve=a("code"),frr=o("model_type"),grr=o(` property of the config object (either
passed as an argument or loaded from `),qve=a("code"),hrr=o("pretrained_model_name_or_path"),urr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jve=a("code"),prr=o("pretrained_model_name_or_path"),_rr=o(":"),brr=l(),Do=a("ul"),fT=a("li"),Dve=a("strong"),vrr=o("bert"),Frr=o(" \u2014 "),yQ=a("a"),Trr=o("BertForNextSentencePrediction"),Mrr=o(" (BERT model)"),Err=l(),gT=a("li"),Gve=a("strong"),Crr=o("fnet"),wrr=o(" \u2014 "),xQ=a("a"),Arr=o("FNetForNextSentencePrediction"),Lrr=o(" (FNet model)"),yrr=l(),hT=a("li"),Ove=a("strong"),xrr=o("megatron-bert"),$rr=o(" \u2014 "),$Q=a("a"),krr=o("MegatronBertForNextSentencePrediction"),Srr=o(" (Megatron-BERT model)"),Rrr=l(),uT=a("li"),Vve=a("strong"),Prr=o("mobilebert"),Brr=o(" \u2014 "),kQ=a("a"),Irr=o("MobileBertForNextSentencePrediction"),Nrr=o(" (MobileBERT model)"),qrr=l(),pT=a("li"),Xve=a("strong"),jrr=o("nezha"),Drr=o(" \u2014 "),SQ=a("a"),Grr=o("NezhaForNextSentencePrediction"),Orr=o(" (Nezha model)"),Vrr=l(),_T=a("li"),zve=a("strong"),Xrr=o("qdqbert"),zrr=o(" \u2014 "),RQ=a("a"),Wrr=o("QDQBertForNextSentencePrediction"),Qrr=o(" (QDQBert model)"),Urr=l(),bT=a("p"),Hrr=o("The model is set in evaluation mode by default using "),Wve=a("code"),Jrr=o("model.eval()"),Yrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qve=a("code"),Krr=o("model.train()"),Zrr=l(),F(vT.$$.fragment),KUe=l(),Ad=a("h2"),FT=a("a"),Uve=a("span"),F(B9.$$.fragment),etr=l(),Hve=a("span"),otr=o("AutoModelForTokenClassification"),ZUe=l(),Go=a("div"),F(I9.$$.fragment),rtr=l(),Ld=a("p"),ttr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),PQ=a("a"),atr=o("from_pretrained()"),ntr=o(" class method or the "),BQ=a("a"),str=o("from_config()"),ltr=o(` class
method.`),itr=l(),N9=a("p"),dtr=o("This class cannot be instantiated directly using "),Jve=a("code"),ctr=o("__init__()"),mtr=o(" (throws an error)."),ftr=l(),Ft=a("div"),F(q9.$$.fragment),gtr=l(),Yve=a("p"),htr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),utr=l(),yd=a("p"),ptr=o(`Note:
Loading a model from its configuration file does `),Kve=a("strong"),_tr=o("not"),btr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=a("a"),vtr=o("from_pretrained()"),Ftr=o(" to load the model weights."),Ttr=l(),F(TT.$$.fragment),Mtr=l(),so=a("div"),F(j9.$$.fragment),Etr=l(),Zve=a("p"),Ctr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),wtr=l(),Ya=a("p"),Atr=o("The model class to instantiate is selected based on the "),e1e=a("code"),Ltr=o("model_type"),ytr=o(` property of the config object (either
passed as an argument or loaded from `),o1e=a("code"),xtr=o("pretrained_model_name_or_path"),$tr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r1e=a("code"),ktr=o("pretrained_model_name_or_path"),Str=o(":"),Rtr=l(),H=a("ul"),MT=a("li"),t1e=a("strong"),Ptr=o("albert"),Btr=o(" \u2014 "),NQ=a("a"),Itr=o("AlbertForTokenClassification"),Ntr=o(" (ALBERT model)"),qtr=l(),ET=a("li"),a1e=a("strong"),jtr=o("bert"),Dtr=o(" \u2014 "),qQ=a("a"),Gtr=o("BertForTokenClassification"),Otr=o(" (BERT model)"),Vtr=l(),CT=a("li"),n1e=a("strong"),Xtr=o("big_bird"),ztr=o(" \u2014 "),jQ=a("a"),Wtr=o("BigBirdForTokenClassification"),Qtr=o(" (BigBird model)"),Utr=l(),wT=a("li"),s1e=a("strong"),Htr=o("bloom"),Jtr=o(" \u2014 "),DQ=a("a"),Ytr=o("BloomForTokenClassification"),Ktr=o(" (BLOOM model)"),Ztr=l(),AT=a("li"),l1e=a("strong"),ear=o("camembert"),oar=o(" \u2014 "),GQ=a("a"),rar=o("CamembertForTokenClassification"),tar=o(" (CamemBERT model)"),aar=l(),LT=a("li"),i1e=a("strong"),nar=o("canine"),sar=o(" \u2014 "),OQ=a("a"),lar=o("CanineForTokenClassification"),iar=o(" (CANINE model)"),dar=l(),yT=a("li"),d1e=a("strong"),car=o("convbert"),mar=o(" \u2014 "),VQ=a("a"),far=o("ConvBertForTokenClassification"),gar=o(" (ConvBERT model)"),har=l(),xT=a("li"),c1e=a("strong"),uar=o("data2vec-text"),par=o(" \u2014 "),XQ=a("a"),_ar=o("Data2VecTextForTokenClassification"),bar=o(" (Data2VecText model)"),Far=l(),$T=a("li"),m1e=a("strong"),Tar=o("deberta"),Mar=o(" \u2014 "),zQ=a("a"),Ear=o("DebertaForTokenClassification"),Car=o(" (DeBERTa model)"),war=l(),kT=a("li"),f1e=a("strong"),Aar=o("deberta-v2"),Lar=o(" \u2014 "),WQ=a("a"),yar=o("DebertaV2ForTokenClassification"),xar=o(" (DeBERTa-v2 model)"),$ar=l(),ST=a("li"),g1e=a("strong"),kar=o("distilbert"),Sar=o(" \u2014 "),QQ=a("a"),Rar=o("DistilBertForTokenClassification"),Par=o(" (DistilBERT model)"),Bar=l(),RT=a("li"),h1e=a("strong"),Iar=o("electra"),Nar=o(" \u2014 "),UQ=a("a"),qar=o("ElectraForTokenClassification"),jar=o(" (ELECTRA model)"),Dar=l(),PT=a("li"),u1e=a("strong"),Gar=o("flaubert"),Oar=o(" \u2014 "),HQ=a("a"),Var=o("FlaubertForTokenClassification"),Xar=o(" (FlauBERT model)"),zar=l(),BT=a("li"),p1e=a("strong"),War=o("fnet"),Qar=o(" \u2014 "),JQ=a("a"),Uar=o("FNetForTokenClassification"),Har=o(" (FNet model)"),Jar=l(),IT=a("li"),_1e=a("strong"),Yar=o("funnel"),Kar=o(" \u2014 "),YQ=a("a"),Zar=o("FunnelForTokenClassification"),enr=o(" (Funnel Transformer model)"),onr=l(),NT=a("li"),b1e=a("strong"),rnr=o("gpt2"),tnr=o(" \u2014 "),KQ=a("a"),anr=o("GPT2ForTokenClassification"),nnr=o(" (OpenAI GPT-2 model)"),snr=l(),qT=a("li"),v1e=a("strong"),lnr=o("ibert"),inr=o(" \u2014 "),ZQ=a("a"),dnr=o("IBertForTokenClassification"),cnr=o(" (I-BERT model)"),mnr=l(),jT=a("li"),F1e=a("strong"),fnr=o("layoutlm"),gnr=o(" \u2014 "),eU=a("a"),hnr=o("LayoutLMForTokenClassification"),unr=o(" (LayoutLM model)"),pnr=l(),DT=a("li"),T1e=a("strong"),_nr=o("layoutlmv2"),bnr=o(" \u2014 "),oU=a("a"),vnr=o("LayoutLMv2ForTokenClassification"),Fnr=o(" (LayoutLMv2 model)"),Tnr=l(),GT=a("li"),M1e=a("strong"),Mnr=o("layoutlmv3"),Enr=o(" \u2014 "),rU=a("a"),Cnr=o("LayoutLMv3ForTokenClassification"),wnr=o(" (LayoutLMv3 model)"),Anr=l(),OT=a("li"),E1e=a("strong"),Lnr=o("longformer"),ynr=o(" \u2014 "),tU=a("a"),xnr=o("LongformerForTokenClassification"),$nr=o(" (Longformer model)"),knr=l(),VT=a("li"),C1e=a("strong"),Snr=o("luke"),Rnr=o(" \u2014 "),aU=a("a"),Pnr=o("LukeForTokenClassification"),Bnr=o(" (LUKE model)"),Inr=l(),XT=a("li"),w1e=a("strong"),Nnr=o("megatron-bert"),qnr=o(" \u2014 "),nU=a("a"),jnr=o("MegatronBertForTokenClassification"),Dnr=o(" (Megatron-BERT model)"),Gnr=l(),zT=a("li"),A1e=a("strong"),Onr=o("mobilebert"),Vnr=o(" \u2014 "),sU=a("a"),Xnr=o("MobileBertForTokenClassification"),znr=o(" (MobileBERT model)"),Wnr=l(),WT=a("li"),L1e=a("strong"),Qnr=o("mpnet"),Unr=o(" \u2014 "),lU=a("a"),Hnr=o("MPNetForTokenClassification"),Jnr=o(" (MPNet model)"),Ynr=l(),QT=a("li"),y1e=a("strong"),Knr=o("nezha"),Znr=o(" \u2014 "),iU=a("a"),esr=o("NezhaForTokenClassification"),osr=o(" (Nezha model)"),rsr=l(),UT=a("li"),x1e=a("strong"),tsr=o("nystromformer"),asr=o(" \u2014 "),dU=a("a"),nsr=o("NystromformerForTokenClassification"),ssr=o(" (Nystr\xF6mformer model)"),lsr=l(),HT=a("li"),$1e=a("strong"),isr=o("qdqbert"),dsr=o(" \u2014 "),cU=a("a"),csr=o("QDQBertForTokenClassification"),msr=o(" (QDQBert model)"),fsr=l(),JT=a("li"),k1e=a("strong"),gsr=o("rembert"),hsr=o(" \u2014 "),mU=a("a"),usr=o("RemBertForTokenClassification"),psr=o(" (RemBERT model)"),_sr=l(),YT=a("li"),S1e=a("strong"),bsr=o("roberta"),vsr=o(" \u2014 "),fU=a("a"),Fsr=o("RobertaForTokenClassification"),Tsr=o(" (RoBERTa model)"),Msr=l(),KT=a("li"),R1e=a("strong"),Esr=o("roformer"),Csr=o(" \u2014 "),gU=a("a"),wsr=o("RoFormerForTokenClassification"),Asr=o(" (RoFormer model)"),Lsr=l(),ZT=a("li"),P1e=a("strong"),ysr=o("squeezebert"),xsr=o(" \u2014 "),hU=a("a"),$sr=o("SqueezeBertForTokenClassification"),ksr=o(" (SqueezeBERT model)"),Ssr=l(),eM=a("li"),B1e=a("strong"),Rsr=o("xlm"),Psr=o(" \u2014 "),uU=a("a"),Bsr=o("XLMForTokenClassification"),Isr=o(" (XLM model)"),Nsr=l(),oM=a("li"),I1e=a("strong"),qsr=o("xlm-roberta"),jsr=o(" \u2014 "),pU=a("a"),Dsr=o("XLMRobertaForTokenClassification"),Gsr=o(" (XLM-RoBERTa model)"),Osr=l(),rM=a("li"),N1e=a("strong"),Vsr=o("xlm-roberta-xl"),Xsr=o(" \u2014 "),_U=a("a"),zsr=o("XLMRobertaXLForTokenClassification"),Wsr=o(" (XLM-RoBERTa-XL model)"),Qsr=l(),tM=a("li"),q1e=a("strong"),Usr=o("xlnet"),Hsr=o(" \u2014 "),bU=a("a"),Jsr=o("XLNetForTokenClassification"),Ysr=o(" (XLNet model)"),Ksr=l(),aM=a("li"),j1e=a("strong"),Zsr=o("yoso"),elr=o(" \u2014 "),vU=a("a"),olr=o("YosoForTokenClassification"),rlr=o(" (YOSO model)"),tlr=l(),nM=a("p"),alr=o("The model is set in evaluation mode by default using "),D1e=a("code"),nlr=o("model.eval()"),slr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G1e=a("code"),llr=o("model.train()"),ilr=l(),F(sM.$$.fragment),eHe=l(),xd=a("h2"),lM=a("a"),O1e=a("span"),F(D9.$$.fragment),dlr=l(),V1e=a("span"),clr=o("AutoModelForQuestionAnswering"),oHe=l(),Oo=a("div"),F(G9.$$.fragment),mlr=l(),$d=a("p"),flr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),FU=a("a"),glr=o("from_pretrained()"),hlr=o(" class method or the "),TU=a("a"),ulr=o("from_config()"),plr=o(` class
method.`),_lr=l(),O9=a("p"),blr=o("This class cannot be instantiated directly using "),X1e=a("code"),vlr=o("__init__()"),Flr=o(" (throws an error)."),Tlr=l(),Tt=a("div"),F(V9.$$.fragment),Mlr=l(),z1e=a("p"),Elr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Clr=l(),kd=a("p"),wlr=o(`Note:
Loading a model from its configuration file does `),W1e=a("strong"),Alr=o("not"),Llr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MU=a("a"),ylr=o("from_pretrained()"),xlr=o(" to load the model weights."),$lr=l(),F(iM.$$.fragment),klr=l(),lo=a("div"),F(X9.$$.fragment),Slr=l(),Q1e=a("p"),Rlr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Plr=l(),Ka=a("p"),Blr=o("The model class to instantiate is selected based on the "),U1e=a("code"),Ilr=o("model_type"),Nlr=o(` property of the config object (either
passed as an argument or loaded from `),H1e=a("code"),qlr=o("pretrained_model_name_or_path"),jlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J1e=a("code"),Dlr=o("pretrained_model_name_or_path"),Glr=o(":"),Olr=l(),V=a("ul"),dM=a("li"),Y1e=a("strong"),Vlr=o("albert"),Xlr=o(" \u2014 "),EU=a("a"),zlr=o("AlbertForQuestionAnswering"),Wlr=o(" (ALBERT model)"),Qlr=l(),cM=a("li"),K1e=a("strong"),Ulr=o("bart"),Hlr=o(" \u2014 "),CU=a("a"),Jlr=o("BartForQuestionAnswering"),Ylr=o(" (BART model)"),Klr=l(),mM=a("li"),Z1e=a("strong"),Zlr=o("bert"),eir=o(" \u2014 "),wU=a("a"),oir=o("BertForQuestionAnswering"),rir=o(" (BERT model)"),tir=l(),fM=a("li"),eFe=a("strong"),air=o("big_bird"),nir=o(" \u2014 "),AU=a("a"),sir=o("BigBirdForQuestionAnswering"),lir=o(" (BigBird model)"),iir=l(),gM=a("li"),oFe=a("strong"),dir=o("bigbird_pegasus"),cir=o(" \u2014 "),LU=a("a"),mir=o("BigBirdPegasusForQuestionAnswering"),fir=o(" (BigBird-Pegasus model)"),gir=l(),hM=a("li"),rFe=a("strong"),hir=o("camembert"),uir=o(" \u2014 "),yU=a("a"),pir=o("CamembertForQuestionAnswering"),_ir=o(" (CamemBERT model)"),bir=l(),uM=a("li"),tFe=a("strong"),vir=o("canine"),Fir=o(" \u2014 "),xU=a("a"),Tir=o("CanineForQuestionAnswering"),Mir=o(" (CANINE model)"),Eir=l(),pM=a("li"),aFe=a("strong"),Cir=o("convbert"),wir=o(" \u2014 "),$U=a("a"),Air=o("ConvBertForQuestionAnswering"),Lir=o(" (ConvBERT model)"),yir=l(),_M=a("li"),nFe=a("strong"),xir=o("data2vec-text"),$ir=o(" \u2014 "),kU=a("a"),kir=o("Data2VecTextForQuestionAnswering"),Sir=o(" (Data2VecText model)"),Rir=l(),bM=a("li"),sFe=a("strong"),Pir=o("deberta"),Bir=o(" \u2014 "),SU=a("a"),Iir=o("DebertaForQuestionAnswering"),Nir=o(" (DeBERTa model)"),qir=l(),vM=a("li"),lFe=a("strong"),jir=o("deberta-v2"),Dir=o(" \u2014 "),RU=a("a"),Gir=o("DebertaV2ForQuestionAnswering"),Oir=o(" (DeBERTa-v2 model)"),Vir=l(),FM=a("li"),iFe=a("strong"),Xir=o("distilbert"),zir=o(" \u2014 "),PU=a("a"),Wir=o("DistilBertForQuestionAnswering"),Qir=o(" (DistilBERT model)"),Uir=l(),TM=a("li"),dFe=a("strong"),Hir=o("electra"),Jir=o(" \u2014 "),BU=a("a"),Yir=o("ElectraForQuestionAnswering"),Kir=o(" (ELECTRA model)"),Zir=l(),MM=a("li"),cFe=a("strong"),edr=o("flaubert"),odr=o(" \u2014 "),IU=a("a"),rdr=o("FlaubertForQuestionAnsweringSimple"),tdr=o(" (FlauBERT model)"),adr=l(),EM=a("li"),mFe=a("strong"),ndr=o("fnet"),sdr=o(" \u2014 "),NU=a("a"),ldr=o("FNetForQuestionAnswering"),idr=o(" (FNet model)"),ddr=l(),CM=a("li"),fFe=a("strong"),cdr=o("funnel"),mdr=o(" \u2014 "),qU=a("a"),fdr=o("FunnelForQuestionAnswering"),gdr=o(" (Funnel Transformer model)"),hdr=l(),wM=a("li"),gFe=a("strong"),udr=o("gptj"),pdr=o(" \u2014 "),jU=a("a"),_dr=o("GPTJForQuestionAnswering"),bdr=o(" (GPT-J model)"),vdr=l(),AM=a("li"),hFe=a("strong"),Fdr=o("ibert"),Tdr=o(" \u2014 "),DU=a("a"),Mdr=o("IBertForQuestionAnswering"),Edr=o(" (I-BERT model)"),Cdr=l(),LM=a("li"),uFe=a("strong"),wdr=o("layoutlmv2"),Adr=o(" \u2014 "),GU=a("a"),Ldr=o("LayoutLMv2ForQuestionAnswering"),ydr=o(" (LayoutLMv2 model)"),xdr=l(),yM=a("li"),pFe=a("strong"),$dr=o("layoutlmv3"),kdr=o(" \u2014 "),OU=a("a"),Sdr=o("LayoutLMv3ForQuestionAnswering"),Rdr=o(" (LayoutLMv3 model)"),Pdr=l(),xM=a("li"),_Fe=a("strong"),Bdr=o("led"),Idr=o(" \u2014 "),VU=a("a"),Ndr=o("LEDForQuestionAnswering"),qdr=o(" (LED model)"),jdr=l(),$M=a("li"),bFe=a("strong"),Ddr=o("longformer"),Gdr=o(" \u2014 "),XU=a("a"),Odr=o("LongformerForQuestionAnswering"),Vdr=o(" (Longformer model)"),Xdr=l(),kM=a("li"),vFe=a("strong"),zdr=o("luke"),Wdr=o(" \u2014 "),zU=a("a"),Qdr=o("LukeForQuestionAnswering"),Udr=o(" (LUKE model)"),Hdr=l(),SM=a("li"),FFe=a("strong"),Jdr=o("lxmert"),Ydr=o(" \u2014 "),WU=a("a"),Kdr=o("LxmertForQuestionAnswering"),Zdr=o(" (LXMERT model)"),ecr=l(),RM=a("li"),TFe=a("strong"),ocr=o("mbart"),rcr=o(" \u2014 "),QU=a("a"),tcr=o("MBartForQuestionAnswering"),acr=o(" (mBART model)"),ncr=l(),PM=a("li"),MFe=a("strong"),scr=o("megatron-bert"),lcr=o(" \u2014 "),UU=a("a"),icr=o("MegatronBertForQuestionAnswering"),dcr=o(" (Megatron-BERT model)"),ccr=l(),BM=a("li"),EFe=a("strong"),mcr=o("mobilebert"),fcr=o(" \u2014 "),HU=a("a"),gcr=o("MobileBertForQuestionAnswering"),hcr=o(" (MobileBERT model)"),ucr=l(),IM=a("li"),CFe=a("strong"),pcr=o("mpnet"),_cr=o(" \u2014 "),JU=a("a"),bcr=o("MPNetForQuestionAnswering"),vcr=o(" (MPNet model)"),Fcr=l(),NM=a("li"),wFe=a("strong"),Tcr=o("mvp"),Mcr=o(" \u2014 "),YU=a("a"),Ecr=o("MvpForQuestionAnswering"),Ccr=o(" (MVP model)"),wcr=l(),qM=a("li"),AFe=a("strong"),Acr=o("nezha"),Lcr=o(" \u2014 "),KU=a("a"),ycr=o("NezhaForQuestionAnswering"),xcr=o(" (Nezha model)"),$cr=l(),jM=a("li"),LFe=a("strong"),kcr=o("nystromformer"),Scr=o(" \u2014 "),ZU=a("a"),Rcr=o("NystromformerForQuestionAnswering"),Pcr=o(" (Nystr\xF6mformer model)"),Bcr=l(),DM=a("li"),yFe=a("strong"),Icr=o("qdqbert"),Ncr=o(" \u2014 "),eH=a("a"),qcr=o("QDQBertForQuestionAnswering"),jcr=o(" (QDQBert model)"),Dcr=l(),GM=a("li"),xFe=a("strong"),Gcr=o("reformer"),Ocr=o(" \u2014 "),oH=a("a"),Vcr=o("ReformerForQuestionAnswering"),Xcr=o(" (Reformer model)"),zcr=l(),OM=a("li"),$Fe=a("strong"),Wcr=o("rembert"),Qcr=o(" \u2014 "),rH=a("a"),Ucr=o("RemBertForQuestionAnswering"),Hcr=o(" (RemBERT model)"),Jcr=l(),VM=a("li"),kFe=a("strong"),Ycr=o("roberta"),Kcr=o(" \u2014 "),tH=a("a"),Zcr=o("RobertaForQuestionAnswering"),emr=o(" (RoBERTa model)"),omr=l(),XM=a("li"),SFe=a("strong"),rmr=o("roformer"),tmr=o(" \u2014 "),aH=a("a"),amr=o("RoFormerForQuestionAnswering"),nmr=o(" (RoFormer model)"),smr=l(),zM=a("li"),RFe=a("strong"),lmr=o("splinter"),imr=o(" \u2014 "),nH=a("a"),dmr=o("SplinterForQuestionAnswering"),cmr=o(" (Splinter model)"),mmr=l(),WM=a("li"),PFe=a("strong"),fmr=o("squeezebert"),gmr=o(" \u2014 "),sH=a("a"),hmr=o("SqueezeBertForQuestionAnswering"),umr=o(" (SqueezeBERT model)"),pmr=l(),QM=a("li"),BFe=a("strong"),_mr=o("xlm"),bmr=o(" \u2014 "),lH=a("a"),vmr=o("XLMForQuestionAnsweringSimple"),Fmr=o(" (XLM model)"),Tmr=l(),UM=a("li"),IFe=a("strong"),Mmr=o("xlm-roberta"),Emr=o(" \u2014 "),iH=a("a"),Cmr=o("XLMRobertaForQuestionAnswering"),wmr=o(" (XLM-RoBERTa model)"),Amr=l(),HM=a("li"),NFe=a("strong"),Lmr=o("xlm-roberta-xl"),ymr=o(" \u2014 "),dH=a("a"),xmr=o("XLMRobertaXLForQuestionAnswering"),$mr=o(" (XLM-RoBERTa-XL model)"),kmr=l(),JM=a("li"),qFe=a("strong"),Smr=o("xlnet"),Rmr=o(" \u2014 "),cH=a("a"),Pmr=o("XLNetForQuestionAnsweringSimple"),Bmr=o(" (XLNet model)"),Imr=l(),YM=a("li"),jFe=a("strong"),Nmr=o("yoso"),qmr=o(" \u2014 "),mH=a("a"),jmr=o("YosoForQuestionAnswering"),Dmr=o(" (YOSO model)"),Gmr=l(),KM=a("p"),Omr=o("The model is set in evaluation mode by default using "),DFe=a("code"),Vmr=o("model.eval()"),Xmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),GFe=a("code"),zmr=o("model.train()"),Wmr=l(),F(ZM.$$.fragment),rHe=l(),Sd=a("h2"),eE=a("a"),OFe=a("span"),F(z9.$$.fragment),Qmr=l(),VFe=a("span"),Umr=o("AutoModelForTableQuestionAnswering"),tHe=l(),Vo=a("div"),F(W9.$$.fragment),Hmr=l(),Rd=a("p"),Jmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),fH=a("a"),Ymr=o("from_pretrained()"),Kmr=o(" class method or the "),gH=a("a"),Zmr=o("from_config()"),efr=o(` class
method.`),ofr=l(),Q9=a("p"),rfr=o("This class cannot be instantiated directly using "),XFe=a("code"),tfr=o("__init__()"),afr=o(" (throws an error)."),nfr=l(),Mt=a("div"),F(U9.$$.fragment),sfr=l(),zFe=a("p"),lfr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ifr=l(),Pd=a("p"),dfr=o(`Note:
Loading a model from its configuration file does `),WFe=a("strong"),cfr=o("not"),mfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=a("a"),ffr=o("from_pretrained()"),gfr=o(" to load the model weights."),hfr=l(),F(oE.$$.fragment),ufr=l(),io=a("div"),F(H9.$$.fragment),pfr=l(),QFe=a("p"),_fr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),bfr=l(),Za=a("p"),vfr=o("The model class to instantiate is selected based on the "),UFe=a("code"),Ffr=o("model_type"),Tfr=o(` property of the config object (either
passed as an argument or loaded from `),HFe=a("code"),Mfr=o("pretrained_model_name_or_path"),Efr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JFe=a("code"),Cfr=o("pretrained_model_name_or_path"),wfr=o(":"),Afr=l(),YFe=a("ul"),rE=a("li"),KFe=a("strong"),Lfr=o("tapas"),yfr=o(" \u2014 "),uH=a("a"),xfr=o("TapasForQuestionAnswering"),$fr=o(" (TAPAS model)"),kfr=l(),tE=a("p"),Sfr=o("The model is set in evaluation mode by default using "),ZFe=a("code"),Rfr=o("model.eval()"),Pfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eTe=a("code"),Bfr=o("model.train()"),Ifr=l(),F(aE.$$.fragment),aHe=l(),Bd=a("h2"),nE=a("a"),oTe=a("span"),F(J9.$$.fragment),Nfr=l(),rTe=a("span"),qfr=o("AutoModelForImageClassification"),nHe=l(),Xo=a("div"),F(Y9.$$.fragment),jfr=l(),Id=a("p"),Dfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pH=a("a"),Gfr=o("from_pretrained()"),Ofr=o(" class method or the "),_H=a("a"),Vfr=o("from_config()"),Xfr=o(` class
method.`),zfr=l(),K9=a("p"),Wfr=o("This class cannot be instantiated directly using "),tTe=a("code"),Qfr=o("__init__()"),Ufr=o(" (throws an error)."),Hfr=l(),Et=a("div"),F(Z9.$$.fragment),Jfr=l(),aTe=a("p"),Yfr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Kfr=l(),Nd=a("p"),Zfr=o(`Note:
Loading a model from its configuration file does `),nTe=a("strong"),egr=o("not"),ogr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=a("a"),rgr=o("from_pretrained()"),tgr=o(" to load the model weights."),agr=l(),F(sE.$$.fragment),ngr=l(),co=a("div"),F(ex.$$.fragment),sgr=l(),sTe=a("p"),lgr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),igr=l(),en=a("p"),dgr=o("The model class to instantiate is selected based on the "),lTe=a("code"),cgr=o("model_type"),mgr=o(` property of the config object (either
passed as an argument or loaded from `),iTe=a("code"),fgr=o("pretrained_model_name_or_path"),ggr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dTe=a("code"),hgr=o("pretrained_model_name_or_path"),ugr=o(":"),pgr=l(),be=a("ul"),lE=a("li"),cTe=a("strong"),_gr=o("beit"),bgr=o(" \u2014 "),vH=a("a"),vgr=o("BeitForImageClassification"),Fgr=o(" (BEiT model)"),Tgr=l(),iE=a("li"),mTe=a("strong"),Mgr=o("convnext"),Egr=o(" \u2014 "),FH=a("a"),Cgr=o("ConvNextForImageClassification"),wgr=o(" (ConvNeXT model)"),Agr=l(),dE=a("li"),fTe=a("strong"),Lgr=o("cvt"),ygr=o(" \u2014 "),TH=a("a"),xgr=o("CvtForImageClassification"),$gr=o(" (CvT model)"),kgr=l(),cE=a("li"),gTe=a("strong"),Sgr=o("data2vec-vision"),Rgr=o(" \u2014 "),MH=a("a"),Pgr=o("Data2VecVisionForImageClassification"),Bgr=o(" (Data2VecVision model)"),Igr=l(),sl=a("li"),hTe=a("strong"),Ngr=o("deit"),qgr=o(" \u2014 "),EH=a("a"),jgr=o("DeiTForImageClassification"),Dgr=o(" or "),CH=a("a"),Ggr=o("DeiTForImageClassificationWithTeacher"),Ogr=o(" (DeiT model)"),Vgr=l(),mE=a("li"),uTe=a("strong"),Xgr=o("imagegpt"),zgr=o(" \u2014 "),wH=a("a"),Wgr=o("ImageGPTForImageClassification"),Qgr=o(" (ImageGPT model)"),Ugr=l(),ll=a("li"),pTe=a("strong"),Hgr=o("levit"),Jgr=o(" \u2014 "),AH=a("a"),Ygr=o("LevitForImageClassification"),Kgr=o(" or "),LH=a("a"),Zgr=o("LevitForImageClassificationWithTeacher"),ehr=o(" (LeViT model)"),ohr=l(),fE=a("li"),_Te=a("strong"),rhr=o("mobilevit"),thr=o(" \u2014 "),yH=a("a"),ahr=o("MobileViTForImageClassification"),nhr=o(" (MobileViT model)"),shr=l(),Ct=a("li"),bTe=a("strong"),lhr=o("perceiver"),ihr=o(" \u2014 "),xH=a("a"),dhr=o("PerceiverForImageClassificationLearned"),chr=o(" or "),$H=a("a"),mhr=o("PerceiverForImageClassificationFourier"),fhr=o(" or "),kH=a("a"),ghr=o("PerceiverForImageClassificationConvProcessing"),hhr=o(" (Perceiver model)"),uhr=l(),gE=a("li"),vTe=a("strong"),phr=o("poolformer"),_hr=o(" \u2014 "),SH=a("a"),bhr=o("PoolFormerForImageClassification"),vhr=o(" (PoolFormer model)"),Fhr=l(),hE=a("li"),FTe=a("strong"),Thr=o("regnet"),Mhr=o(" \u2014 "),RH=a("a"),Ehr=o("RegNetForImageClassification"),Chr=o(" (RegNet model)"),whr=l(),uE=a("li"),TTe=a("strong"),Ahr=o("resnet"),Lhr=o(" \u2014 "),PH=a("a"),yhr=o("ResNetForImageClassification"),xhr=o(" (ResNet model)"),$hr=l(),pE=a("li"),MTe=a("strong"),khr=o("segformer"),Shr=o(" \u2014 "),BH=a("a"),Rhr=o("SegformerForImageClassification"),Phr=o(" (SegFormer model)"),Bhr=l(),_E=a("li"),ETe=a("strong"),Ihr=o("swin"),Nhr=o(" \u2014 "),IH=a("a"),qhr=o("SwinForImageClassification"),jhr=o(" (Swin Transformer model)"),Dhr=l(),bE=a("li"),CTe=a("strong"),Ghr=o("swinv2"),Ohr=o(" \u2014 "),NH=a("a"),Vhr=o("Swinv2ForImageClassification"),Xhr=o(" (Swin Transformer V2 model)"),zhr=l(),vE=a("li"),wTe=a("strong"),Whr=o("van"),Qhr=o(" \u2014 "),qH=a("a"),Uhr=o("VanForImageClassification"),Hhr=o(" (VAN model)"),Jhr=l(),FE=a("li"),ATe=a("strong"),Yhr=o("vit"),Khr=o(" \u2014 "),jH=a("a"),Zhr=o("ViTForImageClassification"),eur=o(" (ViT model)"),our=l(),TE=a("p"),rur=o("The model is set in evaluation mode by default using "),LTe=a("code"),tur=o("model.eval()"),aur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yTe=a("code"),nur=o("model.train()"),sur=l(),F(ME.$$.fragment),sHe=l(),qd=a("h2"),EE=a("a"),xTe=a("span"),F(ox.$$.fragment),lur=l(),$Te=a("span"),iur=o("AutoModelForVideoClassification"),lHe=l(),zo=a("div"),F(rx.$$.fragment),dur=l(),jd=a("p"),cur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),DH=a("a"),mur=o("from_pretrained()"),fur=o(" class method or the "),GH=a("a"),gur=o("from_config()"),hur=o(` class
method.`),uur=l(),tx=a("p"),pur=o("This class cannot be instantiated directly using "),kTe=a("code"),_ur=o("__init__()"),bur=o(" (throws an error)."),vur=l(),wt=a("div"),F(ax.$$.fragment),Fur=l(),STe=a("p"),Tur=o("Instantiates one of the model classes of the library (with a video classification head) from a configuration."),Mur=l(),Dd=a("p"),Eur=o(`Note:
Loading a model from its configuration file does `),RTe=a("strong"),Cur=o("not"),wur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OH=a("a"),Aur=o("from_pretrained()"),Lur=o(" to load the model weights."),yur=l(),F(CE.$$.fragment),xur=l(),mo=a("div"),F(nx.$$.fragment),$ur=l(),PTe=a("p"),kur=o("Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),Sur=l(),on=a("p"),Rur=o("The model class to instantiate is selected based on the "),BTe=a("code"),Pur=o("model_type"),Bur=o(` property of the config object (either
passed as an argument or loaded from `),ITe=a("code"),Iur=o("pretrained_model_name_or_path"),Nur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NTe=a("code"),qur=o("pretrained_model_name_or_path"),jur=o(":"),Dur=l(),qTe=a("ul"),wE=a("li"),jTe=a("strong"),Gur=o("videomae"),Our=o(" \u2014 "),VH=a("a"),Vur=o("VideoMAEForVideoClassification"),Xur=o(" (VideoMAE model)"),zur=l(),AE=a("p"),Wur=o("The model is set in evaluation mode by default using "),DTe=a("code"),Qur=o("model.eval()"),Uur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),GTe=a("code"),Hur=o("model.train()"),Jur=l(),F(LE.$$.fragment),iHe=l(),Gd=a("h2"),yE=a("a"),OTe=a("span"),F(sx.$$.fragment),Yur=l(),VTe=a("span"),Kur=o("AutoModelForVision2Seq"),dHe=l(),Wo=a("div"),F(lx.$$.fragment),Zur=l(),Od=a("p"),epr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),XH=a("a"),opr=o("from_pretrained()"),rpr=o(" class method or the "),zH=a("a"),tpr=o("from_config()"),apr=o(` class
method.`),npr=l(),ix=a("p"),spr=o("This class cannot be instantiated directly using "),XTe=a("code"),lpr=o("__init__()"),ipr=o(" (throws an error)."),dpr=l(),At=a("div"),F(dx.$$.fragment),cpr=l(),zTe=a("p"),mpr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),fpr=l(),Vd=a("p"),gpr=o(`Note:
Loading a model from its configuration file does `),WTe=a("strong"),hpr=o("not"),upr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=a("a"),ppr=o("from_pretrained()"),_pr=o(" to load the model weights."),bpr=l(),F(xE.$$.fragment),vpr=l(),fo=a("div"),F(cx.$$.fragment),Fpr=l(),QTe=a("p"),Tpr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Mpr=l(),rn=a("p"),Epr=o("The model class to instantiate is selected based on the "),UTe=a("code"),Cpr=o("model_type"),wpr=o(` property of the config object (either
passed as an argument or loaded from `),HTe=a("code"),Apr=o("pretrained_model_name_or_path"),Lpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JTe=a("code"),ypr=o("pretrained_model_name_or_path"),xpr=o(":"),$pr=l(),YTe=a("ul"),$E=a("li"),KTe=a("strong"),kpr=o("vision-encoder-decoder"),Spr=o(" \u2014 "),QH=a("a"),Rpr=o("VisionEncoderDecoderModel"),Ppr=o(" (Vision Encoder decoder model)"),Bpr=l(),kE=a("p"),Ipr=o("The model is set in evaluation mode by default using "),ZTe=a("code"),Npr=o("model.eval()"),qpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eMe=a("code"),jpr=o("model.train()"),Dpr=l(),F(SE.$$.fragment),cHe=l(),Xd=a("h2"),RE=a("a"),oMe=a("span"),F(mx.$$.fragment),Gpr=l(),rMe=a("span"),Opr=o("AutoModelForVisualQuestionAnswering"),mHe=l(),Qo=a("div"),F(fx.$$.fragment),Vpr=l(),zd=a("p"),Xpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),UH=a("a"),zpr=o("from_pretrained()"),Wpr=o(" class method or the "),HH=a("a"),Qpr=o("from_config()"),Upr=o(` class
method.`),Hpr=l(),gx=a("p"),Jpr=o("This class cannot be instantiated directly using "),tMe=a("code"),Ypr=o("__init__()"),Kpr=o(" (throws an error)."),Zpr=l(),Lt=a("div"),F(hx.$$.fragment),e_r=l(),aMe=a("p"),o_r=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),r_r=l(),Wd=a("p"),t_r=o(`Note:
Loading a model from its configuration file does `),nMe=a("strong"),a_r=o("not"),n_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JH=a("a"),s_r=o("from_pretrained()"),l_r=o(" to load the model weights."),i_r=l(),F(PE.$$.fragment),d_r=l(),go=a("div"),F(ux.$$.fragment),c_r=l(),sMe=a("p"),m_r=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),f_r=l(),tn=a("p"),g_r=o("The model class to instantiate is selected based on the "),lMe=a("code"),h_r=o("model_type"),u_r=o(` property of the config object (either
passed as an argument or loaded from `),iMe=a("code"),p_r=o("pretrained_model_name_or_path"),__r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dMe=a("code"),b_r=o("pretrained_model_name_or_path"),v_r=o(":"),F_r=l(),cMe=a("ul"),BE=a("li"),mMe=a("strong"),T_r=o("vilt"),M_r=o(" \u2014 "),YH=a("a"),E_r=o("ViltForQuestionAnswering"),C_r=o(" (ViLT model)"),w_r=l(),IE=a("p"),A_r=o("The model is set in evaluation mode by default using "),fMe=a("code"),L_r=o("model.eval()"),y_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gMe=a("code"),x_r=o("model.train()"),$_r=l(),F(NE.$$.fragment),fHe=l(),Qd=a("h2"),qE=a("a"),hMe=a("span"),F(px.$$.fragment),k_r=l(),uMe=a("span"),S_r=o("AutoModelForAudioClassification"),gHe=l(),Uo=a("div"),F(_x.$$.fragment),R_r=l(),Ud=a("p"),P_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),KH=a("a"),B_r=o("from_pretrained()"),I_r=o(" class method or the "),ZH=a("a"),N_r=o("from_config()"),q_r=o(` class
method.`),j_r=l(),bx=a("p"),D_r=o("This class cannot be instantiated directly using "),pMe=a("code"),G_r=o("__init__()"),O_r=o(" (throws an error)."),V_r=l(),yt=a("div"),F(vx.$$.fragment),X_r=l(),_Me=a("p"),z_r=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),W_r=l(),Hd=a("p"),Q_r=o(`Note:
Loading a model from its configuration file does `),bMe=a("strong"),U_r=o("not"),H_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eJ=a("a"),J_r=o("from_pretrained()"),Y_r=o(" to load the model weights."),K_r=l(),F(jE.$$.fragment),Z_r=l(),ho=a("div"),F(Fx.$$.fragment),e2r=l(),vMe=a("p"),o2r=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),r2r=l(),an=a("p"),t2r=o("The model class to instantiate is selected based on the "),FMe=a("code"),a2r=o("model_type"),n2r=o(` property of the config object (either
passed as an argument or loaded from `),TMe=a("code"),s2r=o("pretrained_model_name_or_path"),l2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MMe=a("code"),i2r=o("pretrained_model_name_or_path"),d2r=o(":"),c2r=l(),Pe=a("ul"),DE=a("li"),EMe=a("strong"),m2r=o("data2vec-audio"),f2r=o(" \u2014 "),oJ=a("a"),g2r=o("Data2VecAudioForSequenceClassification"),h2r=o(" (Data2VecAudio model)"),u2r=l(),GE=a("li"),CMe=a("strong"),p2r=o("hubert"),_2r=o(" \u2014 "),rJ=a("a"),b2r=o("HubertForSequenceClassification"),v2r=o(" (Hubert model)"),F2r=l(),OE=a("li"),wMe=a("strong"),T2r=o("sew"),M2r=o(" \u2014 "),tJ=a("a"),E2r=o("SEWForSequenceClassification"),C2r=o(" (SEW model)"),w2r=l(),VE=a("li"),AMe=a("strong"),A2r=o("sew-d"),L2r=o(" \u2014 "),aJ=a("a"),y2r=o("SEWDForSequenceClassification"),x2r=o(" (SEW-D model)"),$2r=l(),XE=a("li"),LMe=a("strong"),k2r=o("unispeech"),S2r=o(" \u2014 "),nJ=a("a"),R2r=o("UniSpeechForSequenceClassification"),P2r=o(" (UniSpeech model)"),B2r=l(),zE=a("li"),yMe=a("strong"),I2r=o("unispeech-sat"),N2r=o(" \u2014 "),sJ=a("a"),q2r=o("UniSpeechSatForSequenceClassification"),j2r=o(" (UniSpeechSat model)"),D2r=l(),WE=a("li"),xMe=a("strong"),G2r=o("wav2vec2"),O2r=o(" \u2014 "),lJ=a("a"),V2r=o("Wav2Vec2ForSequenceClassification"),X2r=o(" (Wav2Vec2 model)"),z2r=l(),QE=a("li"),$Me=a("strong"),W2r=o("wav2vec2-conformer"),Q2r=o(" \u2014 "),iJ=a("a"),U2r=o("Wav2Vec2ConformerForSequenceClassification"),H2r=o(" (Wav2Vec2-Conformer model)"),J2r=l(),UE=a("li"),kMe=a("strong"),Y2r=o("wavlm"),K2r=o(" \u2014 "),dJ=a("a"),Z2r=o("WavLMForSequenceClassification"),ebr=o(" (WavLM model)"),obr=l(),HE=a("p"),rbr=o("The model is set in evaluation mode by default using "),SMe=a("code"),tbr=o("model.eval()"),abr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),RMe=a("code"),nbr=o("model.train()"),sbr=l(),F(JE.$$.fragment),hHe=l(),Jd=a("h2"),YE=a("a"),PMe=a("span"),F(Tx.$$.fragment),lbr=l(),BMe=a("span"),ibr=o("AutoModelForAudioFrameClassification"),uHe=l(),Ho=a("div"),F(Mx.$$.fragment),dbr=l(),Yd=a("p"),cbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),cJ=a("a"),mbr=o("from_pretrained()"),fbr=o(" class method or the "),mJ=a("a"),gbr=o("from_config()"),hbr=o(` class
method.`),ubr=l(),Ex=a("p"),pbr=o("This class cannot be instantiated directly using "),IMe=a("code"),_br=o("__init__()"),bbr=o(" (throws an error)."),vbr=l(),xt=a("div"),F(Cx.$$.fragment),Fbr=l(),NMe=a("p"),Tbr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Mbr=l(),Kd=a("p"),Ebr=o(`Note:
Loading a model from its configuration file does `),qMe=a("strong"),Cbr=o("not"),wbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=a("a"),Abr=o("from_pretrained()"),Lbr=o(" to load the model weights."),ybr=l(),F(KE.$$.fragment),xbr=l(),uo=a("div"),F(wx.$$.fragment),$br=l(),jMe=a("p"),kbr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Sbr=l(),nn=a("p"),Rbr=o("The model class to instantiate is selected based on the "),DMe=a("code"),Pbr=o("model_type"),Bbr=o(` property of the config object (either
passed as an argument or loaded from `),GMe=a("code"),Ibr=o("pretrained_model_name_or_path"),Nbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OMe=a("code"),qbr=o("pretrained_model_name_or_path"),jbr=o(":"),Dbr=l(),st=a("ul"),ZE=a("li"),VMe=a("strong"),Gbr=o("data2vec-audio"),Obr=o(" \u2014 "),gJ=a("a"),Vbr=o("Data2VecAudioForAudioFrameClassification"),Xbr=o(" (Data2VecAudio model)"),zbr=l(),e4=a("li"),XMe=a("strong"),Wbr=o("unispeech-sat"),Qbr=o(" \u2014 "),hJ=a("a"),Ubr=o("UniSpeechSatForAudioFrameClassification"),Hbr=o(" (UniSpeechSat model)"),Jbr=l(),o4=a("li"),zMe=a("strong"),Ybr=o("wav2vec2"),Kbr=o(" \u2014 "),uJ=a("a"),Zbr=o("Wav2Vec2ForAudioFrameClassification"),evr=o(" (Wav2Vec2 model)"),ovr=l(),r4=a("li"),WMe=a("strong"),rvr=o("wav2vec2-conformer"),tvr=o(" \u2014 "),pJ=a("a"),avr=o("Wav2Vec2ConformerForAudioFrameClassification"),nvr=o(" (Wav2Vec2-Conformer model)"),svr=l(),t4=a("li"),QMe=a("strong"),lvr=o("wavlm"),ivr=o(" \u2014 "),_J=a("a"),dvr=o("WavLMForAudioFrameClassification"),cvr=o(" (WavLM model)"),mvr=l(),a4=a("p"),fvr=o("The model is set in evaluation mode by default using "),UMe=a("code"),gvr=o("model.eval()"),hvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),HMe=a("code"),uvr=o("model.train()"),pvr=l(),F(n4.$$.fragment),pHe=l(),Zd=a("h2"),s4=a("a"),JMe=a("span"),F(Ax.$$.fragment),_vr=l(),YMe=a("span"),bvr=o("AutoModelForCTC"),_He=l(),Jo=a("div"),F(Lx.$$.fragment),vvr=l(),ec=a("p"),Fvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),bJ=a("a"),Tvr=o("from_pretrained()"),Mvr=o(" class method or the "),vJ=a("a"),Evr=o("from_config()"),Cvr=o(` class
method.`),wvr=l(),yx=a("p"),Avr=o("This class cannot be instantiated directly using "),KMe=a("code"),Lvr=o("__init__()"),yvr=o(" (throws an error)."),xvr=l(),$t=a("div"),F(xx.$$.fragment),$vr=l(),ZMe=a("p"),kvr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Svr=l(),oc=a("p"),Rvr=o(`Note:
Loading a model from its configuration file does `),eEe=a("strong"),Pvr=o("not"),Bvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FJ=a("a"),Ivr=o("from_pretrained()"),Nvr=o(" to load the model weights."),qvr=l(),F(l4.$$.fragment),jvr=l(),po=a("div"),F($x.$$.fragment),Dvr=l(),oEe=a("p"),Gvr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Ovr=l(),sn=a("p"),Vvr=o("The model class to instantiate is selected based on the "),rEe=a("code"),Xvr=o("model_type"),zvr=o(` property of the config object (either
passed as an argument or loaded from `),tEe=a("code"),Wvr=o("pretrained_model_name_or_path"),Qvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aEe=a("code"),Uvr=o("pretrained_model_name_or_path"),Hvr=o(":"),Jvr=l(),Le=a("ul"),i4=a("li"),nEe=a("strong"),Yvr=o("data2vec-audio"),Kvr=o(" \u2014 "),TJ=a("a"),Zvr=o("Data2VecAudioForCTC"),e1r=o(" (Data2VecAudio model)"),o1r=l(),d4=a("li"),sEe=a("strong"),r1r=o("hubert"),t1r=o(" \u2014 "),MJ=a("a"),a1r=o("HubertForCTC"),n1r=o(" (Hubert model)"),s1r=l(),c4=a("li"),lEe=a("strong"),l1r=o("mctct"),i1r=o(" \u2014 "),EJ=a("a"),d1r=o("MCTCTForCTC"),c1r=o(" (M-CTC-T model)"),m1r=l(),m4=a("li"),iEe=a("strong"),f1r=o("sew"),g1r=o(" \u2014 "),CJ=a("a"),h1r=o("SEWForCTC"),u1r=o(" (SEW model)"),p1r=l(),f4=a("li"),dEe=a("strong"),_1r=o("sew-d"),b1r=o(" \u2014 "),wJ=a("a"),v1r=o("SEWDForCTC"),F1r=o(" (SEW-D model)"),T1r=l(),g4=a("li"),cEe=a("strong"),M1r=o("unispeech"),E1r=o(" \u2014 "),AJ=a("a"),C1r=o("UniSpeechForCTC"),w1r=o(" (UniSpeech model)"),A1r=l(),h4=a("li"),mEe=a("strong"),L1r=o("unispeech-sat"),y1r=o(" \u2014 "),LJ=a("a"),x1r=o("UniSpeechSatForCTC"),$1r=o(" (UniSpeechSat model)"),k1r=l(),u4=a("li"),fEe=a("strong"),S1r=o("wav2vec2"),R1r=o(" \u2014 "),yJ=a("a"),P1r=o("Wav2Vec2ForCTC"),B1r=o(" (Wav2Vec2 model)"),I1r=l(),p4=a("li"),gEe=a("strong"),N1r=o("wav2vec2-conformer"),q1r=o(" \u2014 "),xJ=a("a"),j1r=o("Wav2Vec2ConformerForCTC"),D1r=o(" (Wav2Vec2-Conformer model)"),G1r=l(),_4=a("li"),hEe=a("strong"),O1r=o("wavlm"),V1r=o(" \u2014 "),$J=a("a"),X1r=o("WavLMForCTC"),z1r=o(" (WavLM model)"),W1r=l(),b4=a("p"),Q1r=o("The model is set in evaluation mode by default using "),uEe=a("code"),U1r=o("model.eval()"),H1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pEe=a("code"),J1r=o("model.train()"),Y1r=l(),F(v4.$$.fragment),bHe=l(),rc=a("h2"),F4=a("a"),_Ee=a("span"),F(kx.$$.fragment),K1r=l(),bEe=a("span"),Z1r=o("AutoModelForSpeechSeq2Seq"),vHe=l(),Yo=a("div"),F(Sx.$$.fragment),eFr=l(),tc=a("p"),oFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),kJ=a("a"),rFr=o("from_pretrained()"),tFr=o(" class method or the "),SJ=a("a"),aFr=o("from_config()"),nFr=o(` class
method.`),sFr=l(),Rx=a("p"),lFr=o("This class cannot be instantiated directly using "),vEe=a("code"),iFr=o("__init__()"),dFr=o(" (throws an error)."),cFr=l(),kt=a("div"),F(Px.$$.fragment),mFr=l(),FEe=a("p"),fFr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),gFr=l(),ac=a("p"),hFr=o(`Note:
Loading a model from its configuration file does `),TEe=a("strong"),uFr=o("not"),pFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=a("a"),_Fr=o("from_pretrained()"),bFr=o(" to load the model weights."),vFr=l(),F(T4.$$.fragment),FFr=l(),_o=a("div"),F(Bx.$$.fragment),TFr=l(),MEe=a("p"),MFr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),EFr=l(),ln=a("p"),CFr=o("The model class to instantiate is selected based on the "),EEe=a("code"),wFr=o("model_type"),AFr=o(` property of the config object (either
passed as an argument or loaded from `),CEe=a("code"),LFr=o("pretrained_model_name_or_path"),yFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wEe=a("code"),xFr=o("pretrained_model_name_or_path"),$Fr=o(":"),kFr=l(),Ix=a("ul"),M4=a("li"),AEe=a("strong"),SFr=o("speech-encoder-decoder"),RFr=o(" \u2014 "),PJ=a("a"),PFr=o("SpeechEncoderDecoderModel"),BFr=o(" (Speech Encoder decoder model)"),IFr=l(),E4=a("li"),LEe=a("strong"),NFr=o("speech_to_text"),qFr=o(" \u2014 "),BJ=a("a"),jFr=o("Speech2TextForConditionalGeneration"),DFr=o(" (Speech2Text model)"),GFr=l(),C4=a("p"),OFr=o("The model is set in evaluation mode by default using "),yEe=a("code"),VFr=o("model.eval()"),XFr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xEe=a("code"),zFr=o("model.train()"),WFr=l(),F(w4.$$.fragment),FHe=l(),nc=a("h2"),A4=a("a"),$Ee=a("span"),F(Nx.$$.fragment),QFr=l(),kEe=a("span"),UFr=o("AutoModelForAudioXVector"),THe=l(),Ko=a("div"),F(qx.$$.fragment),HFr=l(),sc=a("p"),JFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),IJ=a("a"),YFr=o("from_pretrained()"),KFr=o(" class method or the "),NJ=a("a"),ZFr=o("from_config()"),eTr=o(` class
method.`),oTr=l(),jx=a("p"),rTr=o("This class cannot be instantiated directly using "),SEe=a("code"),tTr=o("__init__()"),aTr=o(" (throws an error)."),nTr=l(),St=a("div"),F(Dx.$$.fragment),sTr=l(),REe=a("p"),lTr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),iTr=l(),lc=a("p"),dTr=o(`Note:
Loading a model from its configuration file does `),PEe=a("strong"),cTr=o("not"),mTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=a("a"),fTr=o("from_pretrained()"),gTr=o(" to load the model weights."),hTr=l(),F(L4.$$.fragment),uTr=l(),bo=a("div"),F(Gx.$$.fragment),pTr=l(),BEe=a("p"),_Tr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),bTr=l(),dn=a("p"),vTr=o("The model class to instantiate is selected based on the "),IEe=a("code"),FTr=o("model_type"),TTr=o(` property of the config object (either
passed as an argument or loaded from `),NEe=a("code"),MTr=o("pretrained_model_name_or_path"),ETr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qEe=a("code"),CTr=o("pretrained_model_name_or_path"),wTr=o(":"),ATr=l(),lt=a("ul"),y4=a("li"),jEe=a("strong"),LTr=o("data2vec-audio"),yTr=o(" \u2014 "),jJ=a("a"),xTr=o("Data2VecAudioForXVector"),$Tr=o(" (Data2VecAudio model)"),kTr=l(),x4=a("li"),DEe=a("strong"),STr=o("unispeech-sat"),RTr=o(" \u2014 "),DJ=a("a"),PTr=o("UniSpeechSatForXVector"),BTr=o(" (UniSpeechSat model)"),ITr=l(),$4=a("li"),GEe=a("strong"),NTr=o("wav2vec2"),qTr=o(" \u2014 "),GJ=a("a"),jTr=o("Wav2Vec2ForXVector"),DTr=o(" (Wav2Vec2 model)"),GTr=l(),k4=a("li"),OEe=a("strong"),OTr=o("wav2vec2-conformer"),VTr=o(" \u2014 "),OJ=a("a"),XTr=o("Wav2Vec2ConformerForXVector"),zTr=o(" (Wav2Vec2-Conformer model)"),WTr=l(),S4=a("li"),VEe=a("strong"),QTr=o("wavlm"),UTr=o(" \u2014 "),VJ=a("a"),HTr=o("WavLMForXVector"),JTr=o(" (WavLM model)"),YTr=l(),R4=a("p"),KTr=o("The model is set in evaluation mode by default using "),XEe=a("code"),ZTr=o("model.eval()"),eMr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zEe=a("code"),oMr=o("model.train()"),rMr=l(),F(P4.$$.fragment),MHe=l(),ic=a("h2"),B4=a("a"),WEe=a("span"),F(Ox.$$.fragment),tMr=l(),QEe=a("span"),aMr=o("AutoModelForMaskedImageModeling"),EHe=l(),Zo=a("div"),F(Vx.$$.fragment),nMr=l(),dc=a("p"),sMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),XJ=a("a"),lMr=o("from_pretrained()"),iMr=o(" class method or the "),zJ=a("a"),dMr=o("from_config()"),cMr=o(` class
method.`),mMr=l(),Xx=a("p"),fMr=o("This class cannot be instantiated directly using "),UEe=a("code"),gMr=o("__init__()"),hMr=o(" (throws an error)."),uMr=l(),Rt=a("div"),F(zx.$$.fragment),pMr=l(),HEe=a("p"),_Mr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),bMr=l(),cc=a("p"),vMr=o(`Note:
Loading a model from its configuration file does `),JEe=a("strong"),FMr=o("not"),TMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=a("a"),MMr=o("from_pretrained()"),EMr=o(" to load the model weights."),CMr=l(),F(I4.$$.fragment),wMr=l(),vo=a("div"),F(Wx.$$.fragment),AMr=l(),YEe=a("p"),LMr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),yMr=l(),cn=a("p"),xMr=o("The model class to instantiate is selected based on the "),KEe=a("code"),$Mr=o("model_type"),kMr=o(` property of the config object (either
passed as an argument or loaded from `),ZEe=a("code"),SMr=o("pretrained_model_name_or_path"),RMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e4e=a("code"),PMr=o("pretrained_model_name_or_path"),BMr=o(":"),IMr=l(),mn=a("ul"),N4=a("li"),o4e=a("strong"),NMr=o("deit"),qMr=o(" \u2014 "),QJ=a("a"),jMr=o("DeiTForMaskedImageModeling"),DMr=o(" (DeiT model)"),GMr=l(),q4=a("li"),r4e=a("strong"),OMr=o("swin"),VMr=o(" \u2014 "),UJ=a("a"),XMr=o("SwinForMaskedImageModeling"),zMr=o(" (Swin Transformer model)"),WMr=l(),j4=a("li"),t4e=a("strong"),QMr=o("swinv2"),UMr=o(" \u2014 "),HJ=a("a"),HMr=o("Swinv2ForMaskedImageModeling"),JMr=o(" (Swin Transformer V2 model)"),YMr=l(),D4=a("li"),a4e=a("strong"),KMr=o("vit"),ZMr=o(" \u2014 "),JJ=a("a"),eEr=o("ViTForMaskedImageModeling"),oEr=o(" (ViT model)"),rEr=l(),G4=a("p"),tEr=o("The model is set in evaluation mode by default using "),n4e=a("code"),aEr=o("model.eval()"),nEr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s4e=a("code"),sEr=o("model.train()"),lEr=l(),F(O4.$$.fragment),CHe=l(),mc=a("h2"),V4=a("a"),l4e=a("span"),F(Qx.$$.fragment),iEr=l(),i4e=a("span"),dEr=o("AutoModelForObjectDetection"),wHe=l(),er=a("div"),F(Ux.$$.fragment),cEr=l(),fc=a("p"),mEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),YJ=a("a"),fEr=o("from_pretrained()"),gEr=o(" class method or the "),KJ=a("a"),hEr=o("from_config()"),uEr=o(` class
method.`),pEr=l(),Hx=a("p"),_Er=o("This class cannot be instantiated directly using "),d4e=a("code"),bEr=o("__init__()"),vEr=o(" (throws an error)."),FEr=l(),Pt=a("div"),F(Jx.$$.fragment),TEr=l(),c4e=a("p"),MEr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),EEr=l(),gc=a("p"),CEr=o(`Note:
Loading a model from its configuration file does `),m4e=a("strong"),wEr=o("not"),AEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=a("a"),LEr=o("from_pretrained()"),yEr=o(" to load the model weights."),xEr=l(),F(X4.$$.fragment),$Er=l(),Fo=a("div"),F(Yx.$$.fragment),kEr=l(),f4e=a("p"),SEr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),REr=l(),fn=a("p"),PEr=o("The model class to instantiate is selected based on the "),g4e=a("code"),BEr=o("model_type"),IEr=o(` property of the config object (either
passed as an argument or loaded from `),h4e=a("code"),NEr=o("pretrained_model_name_or_path"),qEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u4e=a("code"),jEr=o("pretrained_model_name_or_path"),DEr=o(":"),GEr=l(),Kx=a("ul"),z4=a("li"),p4e=a("strong"),OEr=o("detr"),VEr=o(" \u2014 "),eY=a("a"),XEr=o("DetrForObjectDetection"),zEr=o(" (DETR model)"),WEr=l(),W4=a("li"),_4e=a("strong"),QEr=o("yolos"),UEr=o(" \u2014 "),oY=a("a"),HEr=o("YolosForObjectDetection"),JEr=o(" (YOLOS model)"),YEr=l(),Q4=a("p"),KEr=o("The model is set in evaluation mode by default using "),b4e=a("code"),ZEr=o("model.eval()"),e4r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v4e=a("code"),o4r=o("model.train()"),r4r=l(),F(U4.$$.fragment),AHe=l(),hc=a("h2"),H4=a("a"),F4e=a("span"),F(Zx.$$.fragment),t4r=l(),T4e=a("span"),a4r=o("AutoModelForImageSegmentation"),LHe=l(),or=a("div"),F(e$.$$.fragment),n4r=l(),uc=a("p"),s4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),rY=a("a"),l4r=o("from_pretrained()"),i4r=o(" class method or the "),tY=a("a"),d4r=o("from_config()"),c4r=o(` class
method.`),m4r=l(),o$=a("p"),f4r=o("This class cannot be instantiated directly using "),M4e=a("code"),g4r=o("__init__()"),h4r=o(" (throws an error)."),u4r=l(),Bt=a("div"),F(r$.$$.fragment),p4r=l(),E4e=a("p"),_4r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),b4r=l(),pc=a("p"),v4r=o(`Note:
Loading a model from its configuration file does `),C4e=a("strong"),F4r=o("not"),T4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aY=a("a"),M4r=o("from_pretrained()"),E4r=o(" to load the model weights."),C4r=l(),F(J4.$$.fragment),w4r=l(),To=a("div"),F(t$.$$.fragment),A4r=l(),w4e=a("p"),L4r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),y4r=l(),gn=a("p"),x4r=o("The model class to instantiate is selected based on the "),A4e=a("code"),$4r=o("model_type"),k4r=o(` property of the config object (either
passed as an argument or loaded from `),L4e=a("code"),S4r=o("pretrained_model_name_or_path"),R4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y4e=a("code"),P4r=o("pretrained_model_name_or_path"),B4r=o(":"),I4r=l(),x4e=a("ul"),Y4=a("li"),$4e=a("strong"),N4r=o("detr"),q4r=o(" \u2014 "),nY=a("a"),j4r=o("DetrForSegmentation"),D4r=o(" (DETR model)"),G4r=l(),K4=a("p"),O4r=o("The model is set in evaluation mode by default using "),k4e=a("code"),V4r=o("model.eval()"),X4r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S4e=a("code"),z4r=o("model.train()"),W4r=l(),F(Z4.$$.fragment),yHe=l(),_c=a("h2"),eC=a("a"),R4e=a("span"),F(a$.$$.fragment),Q4r=l(),P4e=a("span"),U4r=o("AutoModelForSemanticSegmentation"),xHe=l(),rr=a("div"),F(n$.$$.fragment),H4r=l(),bc=a("p"),J4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),sY=a("a"),Y4r=o("from_pretrained()"),K4r=o(" class method or the "),lY=a("a"),Z4r=o("from_config()"),eCr=o(` class
method.`),oCr=l(),s$=a("p"),rCr=o("This class cannot be instantiated directly using "),B4e=a("code"),tCr=o("__init__()"),aCr=o(" (throws an error)."),nCr=l(),It=a("div"),F(l$.$$.fragment),sCr=l(),I4e=a("p"),lCr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),iCr=l(),vc=a("p"),dCr=o(`Note:
Loading a model from its configuration file does `),N4e=a("strong"),cCr=o("not"),mCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iY=a("a"),fCr=o("from_pretrained()"),gCr=o(" to load the model weights."),hCr=l(),F(oC.$$.fragment),uCr=l(),Mo=a("div"),F(i$.$$.fragment),pCr=l(),q4e=a("p"),_Cr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),bCr=l(),hn=a("p"),vCr=o("The model class to instantiate is selected based on the "),j4e=a("code"),FCr=o("model_type"),TCr=o(` property of the config object (either
passed as an argument or loaded from `),D4e=a("code"),MCr=o("pretrained_model_name_or_path"),ECr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G4e=a("code"),CCr=o("pretrained_model_name_or_path"),wCr=o(":"),ACr=l(),it=a("ul"),rC=a("li"),O4e=a("strong"),LCr=o("beit"),yCr=o(" \u2014 "),dY=a("a"),xCr=o("BeitForSemanticSegmentation"),$Cr=o(" (BEiT model)"),kCr=l(),tC=a("li"),V4e=a("strong"),SCr=o("data2vec-vision"),RCr=o(" \u2014 "),cY=a("a"),PCr=o("Data2VecVisionForSemanticSegmentation"),BCr=o(" (Data2VecVision model)"),ICr=l(),aC=a("li"),X4e=a("strong"),NCr=o("dpt"),qCr=o(" \u2014 "),mY=a("a"),jCr=o("DPTForSemanticSegmentation"),DCr=o(" (DPT model)"),GCr=l(),nC=a("li"),z4e=a("strong"),OCr=o("mobilevit"),VCr=o(" \u2014 "),fY=a("a"),XCr=o("MobileViTForSemanticSegmentation"),zCr=o(" (MobileViT model)"),WCr=l(),sC=a("li"),W4e=a("strong"),QCr=o("segformer"),UCr=o(" \u2014 "),gY=a("a"),HCr=o("SegformerForSemanticSegmentation"),JCr=o(" (SegFormer model)"),YCr=l(),lC=a("p"),KCr=o("The model is set in evaluation mode by default using "),Q4e=a("code"),ZCr=o("model.eval()"),e3r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U4e=a("code"),o3r=o("model.train()"),r3r=l(),F(iC.$$.fragment),$He=l(),Fc=a("h2"),dC=a("a"),H4e=a("span"),F(d$.$$.fragment),t3r=l(),J4e=a("span"),a3r=o("AutoModelForInstanceSegmentation"),kHe=l(),tr=a("div"),F(c$.$$.fragment),n3r=l(),Tc=a("p"),s3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),hY=a("a"),l3r=o("from_pretrained()"),i3r=o(" class method or the "),uY=a("a"),d3r=o("from_config()"),c3r=o(` class
method.`),m3r=l(),m$=a("p"),f3r=o("This class cannot be instantiated directly using "),Y4e=a("code"),g3r=o("__init__()"),h3r=o(" (throws an error)."),u3r=l(),Nt=a("div"),F(f$.$$.fragment),p3r=l(),K4e=a("p"),_3r=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),b3r=l(),Mc=a("p"),v3r=o(`Note:
Loading a model from its configuration file does `),Z4e=a("strong"),F3r=o("not"),T3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=a("a"),M3r=o("from_pretrained()"),E3r=o(" to load the model weights."),C3r=l(),F(cC.$$.fragment),w3r=l(),Eo=a("div"),F(g$.$$.fragment),A3r=l(),eCe=a("p"),L3r=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),y3r=l(),un=a("p"),x3r=o("The model class to instantiate is selected based on the "),oCe=a("code"),$3r=o("model_type"),k3r=o(` property of the config object (either
passed as an argument or loaded from `),rCe=a("code"),S3r=o("pretrained_model_name_or_path"),R3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tCe=a("code"),P3r=o("pretrained_model_name_or_path"),B3r=o(":"),I3r=l(),aCe=a("ul"),mC=a("li"),nCe=a("strong"),N3r=o("maskformer"),q3r=o(" \u2014 "),_Y=a("a"),j3r=o("MaskFormerForInstanceSegmentation"),D3r=o(" (MaskFormer model)"),G3r=l(),fC=a("p"),O3r=o("The model is set in evaluation mode by default using "),sCe=a("code"),V3r=o("model.eval()"),X3r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lCe=a("code"),z3r=o("model.train()"),W3r=l(),F(gC.$$.fragment),SHe=l(),Ec=a("h2"),hC=a("a"),iCe=a("span"),F(h$.$$.fragment),Q3r=l(),dCe=a("span"),U3r=o("TFAutoModel"),RHe=l(),ar=a("div"),F(u$.$$.fragment),H3r=l(),Cc=a("p"),J3r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),bY=a("a"),Y3r=o("from_pretrained()"),K3r=o(" class method or the "),vY=a("a"),Z3r=o("from_config()"),e5r=o(` class
method.`),o5r=l(),p$=a("p"),r5r=o("This class cannot be instantiated directly using "),cCe=a("code"),t5r=o("__init__()"),a5r=o(" (throws an error)."),n5r=l(),qt=a("div"),F(_$.$$.fragment),s5r=l(),mCe=a("p"),l5r=o("Instantiates one of the base model classes of the library from a configuration."),i5r=l(),wc=a("p"),d5r=o(`Note:
Loading a model from its configuration file does `),fCe=a("strong"),c5r=o("not"),m5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=a("a"),f5r=o("from_pretrained()"),g5r=o(" to load the model weights."),h5r=l(),F(uC.$$.fragment),u5r=l(),Rr=a("div"),F(b$.$$.fragment),p5r=l(),gCe=a("p"),_5r=o("Instantiate one of the base model classes of the library from a pretrained model."),b5r=l(),pn=a("p"),v5r=o("The model class to instantiate is selected based on the "),hCe=a("code"),F5r=o("model_type"),T5r=o(` property of the config object (either
passed as an argument or loaded from `),uCe=a("code"),M5r=o("pretrained_model_name_or_path"),E5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pCe=a("code"),C5r=o("pretrained_model_name_or_path"),w5r=o(":"),A5r=l(),P=a("ul"),pC=a("li"),_Ce=a("strong"),L5r=o("albert"),y5r=o(" \u2014 "),TY=a("a"),x5r=o("TFAlbertModel"),$5r=o(" (ALBERT model)"),k5r=l(),_C=a("li"),bCe=a("strong"),S5r=o("bart"),R5r=o(" \u2014 "),MY=a("a"),P5r=o("TFBartModel"),B5r=o(" (BART model)"),I5r=l(),bC=a("li"),vCe=a("strong"),N5r=o("bert"),q5r=o(" \u2014 "),EY=a("a"),j5r=o("TFBertModel"),D5r=o(" (BERT model)"),G5r=l(),vC=a("li"),FCe=a("strong"),O5r=o("blenderbot"),V5r=o(" \u2014 "),CY=a("a"),X5r=o("TFBlenderbotModel"),z5r=o(" (Blenderbot model)"),W5r=l(),FC=a("li"),TCe=a("strong"),Q5r=o("blenderbot-small"),U5r=o(" \u2014 "),wY=a("a"),H5r=o("TFBlenderbotSmallModel"),J5r=o(" (BlenderbotSmall model)"),Y5r=l(),TC=a("li"),MCe=a("strong"),K5r=o("camembert"),Z5r=o(" \u2014 "),AY=a("a"),e0r=o("TFCamembertModel"),o0r=o(" (CamemBERT model)"),r0r=l(),MC=a("li"),ECe=a("strong"),t0r=o("clip"),a0r=o(" \u2014 "),LY=a("a"),n0r=o("TFCLIPModel"),s0r=o(" (CLIP model)"),l0r=l(),EC=a("li"),CCe=a("strong"),i0r=o("convbert"),d0r=o(" \u2014 "),yY=a("a"),c0r=o("TFConvBertModel"),m0r=o(" (ConvBERT model)"),f0r=l(),CC=a("li"),wCe=a("strong"),g0r=o("convnext"),h0r=o(" \u2014 "),xY=a("a"),u0r=o("TFConvNextModel"),p0r=o(" (ConvNeXT model)"),_0r=l(),wC=a("li"),ACe=a("strong"),b0r=o("ctrl"),v0r=o(" \u2014 "),$Y=a("a"),F0r=o("TFCTRLModel"),T0r=o(" (CTRL model)"),M0r=l(),AC=a("li"),LCe=a("strong"),E0r=o("data2vec-vision"),C0r=o(" \u2014 "),kY=a("a"),w0r=o("TFData2VecVisionModel"),A0r=o(" (Data2VecVision model)"),L0r=l(),LC=a("li"),yCe=a("strong"),y0r=o("deberta"),x0r=o(" \u2014 "),SY=a("a"),$0r=o("TFDebertaModel"),k0r=o(" (DeBERTa model)"),S0r=l(),yC=a("li"),xCe=a("strong"),R0r=o("deberta-v2"),P0r=o(" \u2014 "),RY=a("a"),B0r=o("TFDebertaV2Model"),I0r=o(" (DeBERTa-v2 model)"),N0r=l(),xC=a("li"),$Ce=a("strong"),q0r=o("deit"),j0r=o(" \u2014 "),PY=a("a"),D0r=o("TFDeiTModel"),G0r=o(" (DeiT model)"),O0r=l(),$C=a("li"),kCe=a("strong"),V0r=o("distilbert"),X0r=o(" \u2014 "),BY=a("a"),z0r=o("TFDistilBertModel"),W0r=o(" (DistilBERT model)"),Q0r=l(),kC=a("li"),SCe=a("strong"),U0r=o("dpr"),H0r=o(" \u2014 "),IY=a("a"),J0r=o("TFDPRQuestionEncoder"),Y0r=o(" (DPR model)"),K0r=l(),SC=a("li"),RCe=a("strong"),Z0r=o("electra"),ewr=o(" \u2014 "),NY=a("a"),owr=o("TFElectraModel"),rwr=o(" (ELECTRA model)"),twr=l(),RC=a("li"),PCe=a("strong"),awr=o("flaubert"),nwr=o(" \u2014 "),qY=a("a"),swr=o("TFFlaubertModel"),lwr=o(" (FlauBERT model)"),iwr=l(),il=a("li"),BCe=a("strong"),dwr=o("funnel"),cwr=o(" \u2014 "),jY=a("a"),mwr=o("TFFunnelModel"),fwr=o(" or "),DY=a("a"),gwr=o("TFFunnelBaseModel"),hwr=o(" (Funnel Transformer model)"),uwr=l(),PC=a("li"),ICe=a("strong"),pwr=o("gpt2"),_wr=o(" \u2014 "),GY=a("a"),bwr=o("TFGPT2Model"),vwr=o(" (OpenAI GPT-2 model)"),Fwr=l(),BC=a("li"),NCe=a("strong"),Twr=o("gptj"),Mwr=o(" \u2014 "),OY=a("a"),Ewr=o("TFGPTJModel"),Cwr=o(" (GPT-J model)"),wwr=l(),IC=a("li"),qCe=a("strong"),Awr=o("hubert"),Lwr=o(" \u2014 "),VY=a("a"),ywr=o("TFHubertModel"),xwr=o(" (Hubert model)"),$wr=l(),NC=a("li"),jCe=a("strong"),kwr=o("layoutlm"),Swr=o(" \u2014 "),XY=a("a"),Rwr=o("TFLayoutLMModel"),Pwr=o(" (LayoutLM model)"),Bwr=l(),qC=a("li"),DCe=a("strong"),Iwr=o("layoutlmv3"),Nwr=o(" \u2014 "),zY=a("a"),qwr=o("TFLayoutLMv3Model"),jwr=o(" (LayoutLMv3 model)"),Dwr=l(),jC=a("li"),GCe=a("strong"),Gwr=o("led"),Owr=o(" \u2014 "),WY=a("a"),Vwr=o("TFLEDModel"),Xwr=o(" (LED model)"),zwr=l(),DC=a("li"),OCe=a("strong"),Wwr=o("longformer"),Qwr=o(" \u2014 "),QY=a("a"),Uwr=o("TFLongformerModel"),Hwr=o(" (Longformer model)"),Jwr=l(),GC=a("li"),VCe=a("strong"),Ywr=o("lxmert"),Kwr=o(" \u2014 "),UY=a("a"),Zwr=o("TFLxmertModel"),e6r=o(" (LXMERT model)"),o6r=l(),OC=a("li"),XCe=a("strong"),r6r=o("marian"),t6r=o(" \u2014 "),HY=a("a"),a6r=o("TFMarianModel"),n6r=o(" (Marian model)"),s6r=l(),VC=a("li"),zCe=a("strong"),l6r=o("mbart"),i6r=o(" \u2014 "),JY=a("a"),d6r=o("TFMBartModel"),c6r=o(" (mBART model)"),m6r=l(),XC=a("li"),WCe=a("strong"),f6r=o("mobilebert"),g6r=o(" \u2014 "),YY=a("a"),h6r=o("TFMobileBertModel"),u6r=o(" (MobileBERT model)"),p6r=l(),zC=a("li"),QCe=a("strong"),_6r=o("mobilevit"),b6r=o(" \u2014 "),KY=a("a"),v6r=o("TFMobileViTModel"),F6r=o(" (MobileViT model)"),T6r=l(),WC=a("li"),UCe=a("strong"),M6r=o("mpnet"),E6r=o(" \u2014 "),ZY=a("a"),C6r=o("TFMPNetModel"),w6r=o(" (MPNet model)"),A6r=l(),QC=a("li"),HCe=a("strong"),L6r=o("mt5"),y6r=o(" \u2014 "),eK=a("a"),x6r=o("TFMT5Model"),$6r=o(" (MT5 model)"),k6r=l(),UC=a("li"),JCe=a("strong"),S6r=o("openai-gpt"),R6r=o(" \u2014 "),oK=a("a"),P6r=o("TFOpenAIGPTModel"),B6r=o(" (OpenAI GPT model)"),I6r=l(),HC=a("li"),YCe=a("strong"),N6r=o("opt"),q6r=o(" \u2014 "),rK=a("a"),j6r=o("TFOPTModel"),D6r=o(" (OPT model)"),G6r=l(),JC=a("li"),KCe=a("strong"),O6r=o("pegasus"),V6r=o(" \u2014 "),tK=a("a"),X6r=o("TFPegasusModel"),z6r=o(" (Pegasus model)"),W6r=l(),YC=a("li"),ZCe=a("strong"),Q6r=o("regnet"),U6r=o(" \u2014 "),aK=a("a"),H6r=o("TFRegNetModel"),J6r=o(" (RegNet model)"),Y6r=l(),KC=a("li"),e3e=a("strong"),K6r=o("rembert"),Z6r=o(" \u2014 "),nK=a("a"),eAr=o("TFRemBertModel"),oAr=o(" (RemBERT model)"),rAr=l(),ZC=a("li"),o3e=a("strong"),tAr=o("resnet"),aAr=o(" \u2014 "),sK=a("a"),nAr=o("TFResNetModel"),sAr=o(" (ResNet model)"),lAr=l(),e3=a("li"),r3e=a("strong"),iAr=o("roberta"),dAr=o(" \u2014 "),lK=a("a"),cAr=o("TFRobertaModel"),mAr=o(" (RoBERTa model)"),fAr=l(),o3=a("li"),t3e=a("strong"),gAr=o("roformer"),hAr=o(" \u2014 "),iK=a("a"),uAr=o("TFRoFormerModel"),pAr=o(" (RoFormer model)"),_Ar=l(),r3=a("li"),a3e=a("strong"),bAr=o("segformer"),vAr=o(" \u2014 "),dK=a("a"),FAr=o("TFSegformerModel"),TAr=o(" (SegFormer model)"),MAr=l(),t3=a("li"),n3e=a("strong"),EAr=o("speech_to_text"),CAr=o(" \u2014 "),cK=a("a"),wAr=o("TFSpeech2TextModel"),AAr=o(" (Speech2Text model)"),LAr=l(),a3=a("li"),s3e=a("strong"),yAr=o("swin"),xAr=o(" \u2014 "),mK=a("a"),$Ar=o("TFSwinModel"),kAr=o(" (Swin Transformer model)"),SAr=l(),n3=a("li"),l3e=a("strong"),RAr=o("t5"),PAr=o(" \u2014 "),fK=a("a"),BAr=o("TFT5Model"),IAr=o(" (T5 model)"),NAr=l(),s3=a("li"),i3e=a("strong"),qAr=o("tapas"),jAr=o(" \u2014 "),gK=a("a"),DAr=o("TFTapasModel"),GAr=o(" (TAPAS model)"),OAr=l(),l3=a("li"),d3e=a("strong"),VAr=o("transfo-xl"),XAr=o(" \u2014 "),hK=a("a"),zAr=o("TFTransfoXLModel"),WAr=o(" (Transformer-XL model)"),QAr=l(),i3=a("li"),c3e=a("strong"),UAr=o("vit"),HAr=o(" \u2014 "),uK=a("a"),JAr=o("TFViTModel"),YAr=o(" (ViT model)"),KAr=l(),d3=a("li"),m3e=a("strong"),ZAr=o("vit_mae"),e7r=o(" \u2014 "),pK=a("a"),o7r=o("TFViTMAEModel"),r7r=o(" (ViTMAE model)"),t7r=l(),c3=a("li"),f3e=a("strong"),a7r=o("wav2vec2"),n7r=o(" \u2014 "),_K=a("a"),s7r=o("TFWav2Vec2Model"),l7r=o(" (Wav2Vec2 model)"),i7r=l(),m3=a("li"),g3e=a("strong"),d7r=o("xglm"),c7r=o(" \u2014 "),bK=a("a"),m7r=o("TFXGLMModel"),f7r=o(" (XGLM model)"),g7r=l(),f3=a("li"),h3e=a("strong"),h7r=o("xlm"),u7r=o(" \u2014 "),vK=a("a"),p7r=o("TFXLMModel"),_7r=o(" (XLM model)"),b7r=l(),g3=a("li"),u3e=a("strong"),v7r=o("xlm-roberta"),F7r=o(" \u2014 "),FK=a("a"),T7r=o("TFXLMRobertaModel"),M7r=o(" (XLM-RoBERTa model)"),E7r=l(),h3=a("li"),p3e=a("strong"),C7r=o("xlnet"),w7r=o(" \u2014 "),TK=a("a"),A7r=o("TFXLNetModel"),L7r=o(" (XLNet model)"),y7r=l(),F(u3.$$.fragment),PHe=l(),Ac=a("h2"),p3=a("a"),_3e=a("span"),F(v$.$$.fragment),x7r=l(),b3e=a("span"),$7r=o("TFAutoModelForPreTraining"),BHe=l(),nr=a("div"),F(F$.$$.fragment),k7r=l(),Lc=a("p"),S7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),MK=a("a"),R7r=o("from_pretrained()"),P7r=o(" class method or the "),EK=a("a"),B7r=o("from_config()"),I7r=o(` class
method.`),N7r=l(),T$=a("p"),q7r=o("This class cannot be instantiated directly using "),v3e=a("code"),j7r=o("__init__()"),D7r=o(" (throws an error)."),G7r=l(),jt=a("div"),F(M$.$$.fragment),O7r=l(),F3e=a("p"),V7r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),X7r=l(),yc=a("p"),z7r=o(`Note:
Loading a model from its configuration file does `),T3e=a("strong"),W7r=o("not"),Q7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CK=a("a"),U7r=o("from_pretrained()"),H7r=o(" to load the model weights."),J7r=l(),F(_3.$$.fragment),Y7r=l(),Pr=a("div"),F(E$.$$.fragment),K7r=l(),M3e=a("p"),Z7r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),eLr=l(),_n=a("p"),oLr=o("The model class to instantiate is selected based on the "),E3e=a("code"),rLr=o("model_type"),tLr=o(` property of the config object (either
passed as an argument or loaded from `),C3e=a("code"),aLr=o("pretrained_model_name_or_path"),nLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w3e=a("code"),sLr=o("pretrained_model_name_or_path"),lLr=o(":"),iLr=l(),se=a("ul"),b3=a("li"),A3e=a("strong"),dLr=o("albert"),cLr=o(" \u2014 "),wK=a("a"),mLr=o("TFAlbertForPreTraining"),fLr=o(" (ALBERT model)"),gLr=l(),v3=a("li"),L3e=a("strong"),hLr=o("bart"),uLr=o(" \u2014 "),AK=a("a"),pLr=o("TFBartForConditionalGeneration"),_Lr=o(" (BART model)"),bLr=l(),F3=a("li"),y3e=a("strong"),vLr=o("bert"),FLr=o(" \u2014 "),LK=a("a"),TLr=o("TFBertForPreTraining"),MLr=o(" (BERT model)"),ELr=l(),T3=a("li"),x3e=a("strong"),CLr=o("camembert"),wLr=o(" \u2014 "),yK=a("a"),ALr=o("TFCamembertForMaskedLM"),LLr=o(" (CamemBERT model)"),yLr=l(),M3=a("li"),$3e=a("strong"),xLr=o("ctrl"),$Lr=o(" \u2014 "),xK=a("a"),kLr=o("TFCTRLLMHeadModel"),SLr=o(" (CTRL model)"),RLr=l(),E3=a("li"),k3e=a("strong"),PLr=o("distilbert"),BLr=o(" \u2014 "),$K=a("a"),ILr=o("TFDistilBertForMaskedLM"),NLr=o(" (DistilBERT model)"),qLr=l(),C3=a("li"),S3e=a("strong"),jLr=o("electra"),DLr=o(" \u2014 "),kK=a("a"),GLr=o("TFElectraForPreTraining"),OLr=o(" (ELECTRA model)"),VLr=l(),w3=a("li"),R3e=a("strong"),XLr=o("flaubert"),zLr=o(" \u2014 "),SK=a("a"),WLr=o("TFFlaubertWithLMHeadModel"),QLr=o(" (FlauBERT model)"),ULr=l(),A3=a("li"),P3e=a("strong"),HLr=o("funnel"),JLr=o(" \u2014 "),RK=a("a"),YLr=o("TFFunnelForPreTraining"),KLr=o(" (Funnel Transformer model)"),ZLr=l(),L3=a("li"),B3e=a("strong"),eyr=o("gpt2"),oyr=o(" \u2014 "),PK=a("a"),ryr=o("TFGPT2LMHeadModel"),tyr=o(" (OpenAI GPT-2 model)"),ayr=l(),y3=a("li"),I3e=a("strong"),nyr=o("layoutlm"),syr=o(" \u2014 "),BK=a("a"),lyr=o("TFLayoutLMForMaskedLM"),iyr=o(" (LayoutLM model)"),dyr=l(),x3=a("li"),N3e=a("strong"),cyr=o("lxmert"),myr=o(" \u2014 "),IK=a("a"),fyr=o("TFLxmertForPreTraining"),gyr=o(" (LXMERT model)"),hyr=l(),$3=a("li"),q3e=a("strong"),uyr=o("mobilebert"),pyr=o(" \u2014 "),NK=a("a"),_yr=o("TFMobileBertForPreTraining"),byr=o(" (MobileBERT model)"),vyr=l(),k3=a("li"),j3e=a("strong"),Fyr=o("mpnet"),Tyr=o(" \u2014 "),qK=a("a"),Myr=o("TFMPNetForMaskedLM"),Eyr=o(" (MPNet model)"),Cyr=l(),S3=a("li"),D3e=a("strong"),wyr=o("openai-gpt"),Ayr=o(" \u2014 "),jK=a("a"),Lyr=o("TFOpenAIGPTLMHeadModel"),yyr=o(" (OpenAI GPT model)"),xyr=l(),R3=a("li"),G3e=a("strong"),$yr=o("roberta"),kyr=o(" \u2014 "),DK=a("a"),Syr=o("TFRobertaForMaskedLM"),Ryr=o(" (RoBERTa model)"),Pyr=l(),P3=a("li"),O3e=a("strong"),Byr=o("t5"),Iyr=o(" \u2014 "),GK=a("a"),Nyr=o("TFT5ForConditionalGeneration"),qyr=o(" (T5 model)"),jyr=l(),B3=a("li"),V3e=a("strong"),Dyr=o("tapas"),Gyr=o(" \u2014 "),OK=a("a"),Oyr=o("TFTapasForMaskedLM"),Vyr=o(" (TAPAS model)"),Xyr=l(),I3=a("li"),X3e=a("strong"),zyr=o("transfo-xl"),Wyr=o(" \u2014 "),VK=a("a"),Qyr=o("TFTransfoXLLMHeadModel"),Uyr=o(" (Transformer-XL model)"),Hyr=l(),N3=a("li"),z3e=a("strong"),Jyr=o("vit_mae"),Yyr=o(" \u2014 "),XK=a("a"),Kyr=o("TFViTMAEForPreTraining"),Zyr=o(" (ViTMAE model)"),e8r=l(),q3=a("li"),W3e=a("strong"),o8r=o("xlm"),r8r=o(" \u2014 "),zK=a("a"),t8r=o("TFXLMWithLMHeadModel"),a8r=o(" (XLM model)"),n8r=l(),j3=a("li"),Q3e=a("strong"),s8r=o("xlm-roberta"),l8r=o(" \u2014 "),WK=a("a"),i8r=o("TFXLMRobertaForMaskedLM"),d8r=o(" (XLM-RoBERTa model)"),c8r=l(),D3=a("li"),U3e=a("strong"),m8r=o("xlnet"),f8r=o(" \u2014 "),QK=a("a"),g8r=o("TFXLNetLMHeadModel"),h8r=o(" (XLNet model)"),u8r=l(),F(G3.$$.fragment),IHe=l(),xc=a("h2"),O3=a("a"),H3e=a("span"),F(C$.$$.fragment),p8r=l(),J3e=a("span"),_8r=o("TFAutoModelForCausalLM"),NHe=l(),sr=a("div"),F(w$.$$.fragment),b8r=l(),$c=a("p"),v8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),UK=a("a"),F8r=o("from_pretrained()"),T8r=o(" class method or the "),HK=a("a"),M8r=o("from_config()"),E8r=o(` class
method.`),C8r=l(),A$=a("p"),w8r=o("This class cannot be instantiated directly using "),Y3e=a("code"),A8r=o("__init__()"),L8r=o(" (throws an error)."),y8r=l(),Dt=a("div"),F(L$.$$.fragment),x8r=l(),K3e=a("p"),$8r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),k8r=l(),kc=a("p"),S8r=o(`Note:
Loading a model from its configuration file does `),Z3e=a("strong"),R8r=o("not"),P8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=a("a"),B8r=o("from_pretrained()"),I8r=o(" to load the model weights."),N8r=l(),F(V3.$$.fragment),q8r=l(),Br=a("div"),F(y$.$$.fragment),j8r=l(),e5e=a("p"),D8r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),G8r=l(),bn=a("p"),O8r=o("The model class to instantiate is selected based on the "),o5e=a("code"),V8r=o("model_type"),X8r=o(` property of the config object (either
passed as an argument or loaded from `),r5e=a("code"),z8r=o("pretrained_model_name_or_path"),W8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t5e=a("code"),Q8r=o("pretrained_model_name_or_path"),U8r=o(":"),H8r=l(),Me=a("ul"),X3=a("li"),a5e=a("strong"),J8r=o("bert"),Y8r=o(" \u2014 "),YK=a("a"),K8r=o("TFBertLMHeadModel"),Z8r=o(" (BERT model)"),e9r=l(),z3=a("li"),n5e=a("strong"),o9r=o("camembert"),r9r=o(" \u2014 "),KK=a("a"),t9r=o("TFCamembertForCausalLM"),a9r=o(" (CamemBERT model)"),n9r=l(),W3=a("li"),s5e=a("strong"),s9r=o("ctrl"),l9r=o(" \u2014 "),ZK=a("a"),i9r=o("TFCTRLLMHeadModel"),d9r=o(" (CTRL model)"),c9r=l(),Q3=a("li"),l5e=a("strong"),m9r=o("gpt2"),f9r=o(" \u2014 "),eZ=a("a"),g9r=o("TFGPT2LMHeadModel"),h9r=o(" (OpenAI GPT-2 model)"),u9r=l(),U3=a("li"),i5e=a("strong"),p9r=o("gptj"),_9r=o(" \u2014 "),oZ=a("a"),b9r=o("TFGPTJForCausalLM"),v9r=o(" (GPT-J model)"),F9r=l(),H3=a("li"),d5e=a("strong"),T9r=o("openai-gpt"),M9r=o(" \u2014 "),rZ=a("a"),E9r=o("TFOpenAIGPTLMHeadModel"),C9r=o(" (OpenAI GPT model)"),w9r=l(),J3=a("li"),c5e=a("strong"),A9r=o("opt"),L9r=o(" \u2014 "),tZ=a("a"),y9r=o("TFOPTForCausalLM"),x9r=o(" (OPT model)"),$9r=l(),Y3=a("li"),m5e=a("strong"),k9r=o("rembert"),S9r=o(" \u2014 "),aZ=a("a"),R9r=o("TFRemBertForCausalLM"),P9r=o(" (RemBERT model)"),B9r=l(),K3=a("li"),f5e=a("strong"),I9r=o("roberta"),N9r=o(" \u2014 "),nZ=a("a"),q9r=o("TFRobertaForCausalLM"),j9r=o(" (RoBERTa model)"),D9r=l(),Z3=a("li"),g5e=a("strong"),G9r=o("roformer"),O9r=o(" \u2014 "),sZ=a("a"),V9r=o("TFRoFormerForCausalLM"),X9r=o(" (RoFormer model)"),z9r=l(),e5=a("li"),h5e=a("strong"),W9r=o("transfo-xl"),Q9r=o(" \u2014 "),lZ=a("a"),U9r=o("TFTransfoXLLMHeadModel"),H9r=o(" (Transformer-XL model)"),J9r=l(),o5=a("li"),u5e=a("strong"),Y9r=o("xglm"),K9r=o(" \u2014 "),iZ=a("a"),Z9r=o("TFXGLMForCausalLM"),exr=o(" (XGLM model)"),oxr=l(),r5=a("li"),p5e=a("strong"),rxr=o("xlm"),txr=o(" \u2014 "),dZ=a("a"),axr=o("TFXLMWithLMHeadModel"),nxr=o(" (XLM model)"),sxr=l(),t5=a("li"),_5e=a("strong"),lxr=o("xlnet"),ixr=o(" \u2014 "),cZ=a("a"),dxr=o("TFXLNetLMHeadModel"),cxr=o(" (XLNet model)"),mxr=l(),F(a5.$$.fragment),qHe=l(),Sc=a("h2"),n5=a("a"),b5e=a("span"),F(x$.$$.fragment),fxr=l(),v5e=a("span"),gxr=o("TFAutoModelForImageClassification"),jHe=l(),lr=a("div"),F($$.$$.fragment),hxr=l(),Rc=a("p"),uxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),mZ=a("a"),pxr=o("from_pretrained()"),_xr=o(" class method or the "),fZ=a("a"),bxr=o("from_config()"),vxr=o(` class
method.`),Fxr=l(),k$=a("p"),Txr=o("This class cannot be instantiated directly using "),F5e=a("code"),Mxr=o("__init__()"),Exr=o(" (throws an error)."),Cxr=l(),Gt=a("div"),F(S$.$$.fragment),wxr=l(),T5e=a("p"),Axr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Lxr=l(),Pc=a("p"),yxr=o(`Note:
Loading a model from its configuration file does `),M5e=a("strong"),xxr=o("not"),$xr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gZ=a("a"),kxr=o("from_pretrained()"),Sxr=o(" to load the model weights."),Rxr=l(),F(s5.$$.fragment),Pxr=l(),Ir=a("div"),F(R$.$$.fragment),Bxr=l(),E5e=a("p"),Ixr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Nxr=l(),vn=a("p"),qxr=o("The model class to instantiate is selected based on the "),C5e=a("code"),jxr=o("model_type"),Dxr=o(` property of the config object (either
passed as an argument or loaded from `),w5e=a("code"),Gxr=o("pretrained_model_name_or_path"),Oxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A5e=a("code"),Vxr=o("pretrained_model_name_or_path"),Xxr=o(":"),zxr=l(),Be=a("ul"),l5=a("li"),L5e=a("strong"),Wxr=o("convnext"),Qxr=o(" \u2014 "),hZ=a("a"),Uxr=o("TFConvNextForImageClassification"),Hxr=o(" (ConvNeXT model)"),Jxr=l(),i5=a("li"),y5e=a("strong"),Yxr=o("data2vec-vision"),Kxr=o(" \u2014 "),uZ=a("a"),Zxr=o("TFData2VecVisionForImageClassification"),e$r=o(" (Data2VecVision model)"),o$r=l(),dl=a("li"),x5e=a("strong"),r$r=o("deit"),t$r=o(" \u2014 "),pZ=a("a"),a$r=o("TFDeiTForImageClassification"),n$r=o(" or "),_Z=a("a"),s$r=o("TFDeiTForImageClassificationWithTeacher"),l$r=o(" (DeiT model)"),i$r=l(),d5=a("li"),$5e=a("strong"),d$r=o("mobilevit"),c$r=o(" \u2014 "),bZ=a("a"),m$r=o("TFMobileViTForImageClassification"),f$r=o(" (MobileViT model)"),g$r=l(),c5=a("li"),k5e=a("strong"),h$r=o("regnet"),u$r=o(" \u2014 "),vZ=a("a"),p$r=o("TFRegNetForImageClassification"),_$r=o(" (RegNet model)"),b$r=l(),m5=a("li"),S5e=a("strong"),v$r=o("resnet"),F$r=o(" \u2014 "),FZ=a("a"),T$r=o("TFResNetForImageClassification"),M$r=o(" (ResNet model)"),E$r=l(),f5=a("li"),R5e=a("strong"),C$r=o("segformer"),w$r=o(" \u2014 "),TZ=a("a"),A$r=o("TFSegformerForImageClassification"),L$r=o(" (SegFormer model)"),y$r=l(),g5=a("li"),P5e=a("strong"),x$r=o("swin"),$$r=o(" \u2014 "),MZ=a("a"),k$r=o("TFSwinForImageClassification"),S$r=o(" (Swin Transformer model)"),R$r=l(),h5=a("li"),B5e=a("strong"),P$r=o("vit"),B$r=o(" \u2014 "),EZ=a("a"),I$r=o("TFViTForImageClassification"),N$r=o(" (ViT model)"),q$r=l(),F(u5.$$.fragment),DHe=l(),Bc=a("h2"),p5=a("a"),I5e=a("span"),F(P$.$$.fragment),j$r=l(),N5e=a("span"),D$r=o("TFAutoModelForSemanticSegmentation"),GHe=l(),ir=a("div"),F(B$.$$.fragment),G$r=l(),Ic=a("p"),O$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),CZ=a("a"),V$r=o("from_pretrained()"),X$r=o(" class method or the "),wZ=a("a"),z$r=o("from_config()"),W$r=o(` class
method.`),Q$r=l(),I$=a("p"),U$r=o("This class cannot be instantiated directly using "),q5e=a("code"),H$r=o("__init__()"),J$r=o(" (throws an error)."),Y$r=l(),Ot=a("div"),F(N$.$$.fragment),K$r=l(),j5e=a("p"),Z$r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),ekr=l(),Nc=a("p"),okr=o(`Note:
Loading a model from its configuration file does `),D5e=a("strong"),rkr=o("not"),tkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AZ=a("a"),akr=o("from_pretrained()"),nkr=o(" to load the model weights."),skr=l(),F(_5.$$.fragment),lkr=l(),Nr=a("div"),F(q$.$$.fragment),ikr=l(),G5e=a("p"),dkr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),ckr=l(),Fn=a("p"),mkr=o("The model class to instantiate is selected based on the "),O5e=a("code"),fkr=o("model_type"),gkr=o(` property of the config object (either
passed as an argument or loaded from `),V5e=a("code"),hkr=o("pretrained_model_name_or_path"),ukr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X5e=a("code"),pkr=o("pretrained_model_name_or_path"),_kr=o(":"),bkr=l(),qc=a("ul"),b5=a("li"),z5e=a("strong"),vkr=o("data2vec-vision"),Fkr=o(" \u2014 "),LZ=a("a"),Tkr=o("TFData2VecVisionForSemanticSegmentation"),Mkr=o(" (Data2VecVision model)"),Ekr=l(),v5=a("li"),W5e=a("strong"),Ckr=o("mobilevit"),wkr=o(" \u2014 "),yZ=a("a"),Akr=o("TFMobileViTForSemanticSegmentation"),Lkr=o(" (MobileViT model)"),ykr=l(),F5=a("li"),Q5e=a("strong"),xkr=o("segformer"),$kr=o(" \u2014 "),xZ=a("a"),kkr=o("TFSegformerForSemanticSegmentation"),Skr=o(" (SegFormer model)"),Rkr=l(),F(T5.$$.fragment),OHe=l(),jc=a("h2"),M5=a("a"),U5e=a("span"),F(j$.$$.fragment),Pkr=l(),H5e=a("span"),Bkr=o("TFAutoModelForMaskedLM"),VHe=l(),dr=a("div"),F(D$.$$.fragment),Ikr=l(),Dc=a("p"),Nkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$Z=a("a"),qkr=o("from_pretrained()"),jkr=o(" class method or the "),kZ=a("a"),Dkr=o("from_config()"),Gkr=o(` class
method.`),Okr=l(),G$=a("p"),Vkr=o("This class cannot be instantiated directly using "),J5e=a("code"),Xkr=o("__init__()"),zkr=o(" (throws an error)."),Wkr=l(),Vt=a("div"),F(O$.$$.fragment),Qkr=l(),Y5e=a("p"),Ukr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Hkr=l(),Gc=a("p"),Jkr=o(`Note:
Loading a model from its configuration file does `),K5e=a("strong"),Ykr=o("not"),Kkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=a("a"),Zkr=o("from_pretrained()"),eSr=o(" to load the model weights."),oSr=l(),F(E5.$$.fragment),rSr=l(),qr=a("div"),F(V$.$$.fragment),tSr=l(),Z5e=a("p"),aSr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),nSr=l(),Tn=a("p"),sSr=o("The model class to instantiate is selected based on the "),e0e=a("code"),lSr=o("model_type"),iSr=o(` property of the config object (either
passed as an argument or loaded from `),o0e=a("code"),dSr=o("pretrained_model_name_or_path"),cSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r0e=a("code"),mSr=o("pretrained_model_name_or_path"),fSr=o(":"),gSr=l(),me=a("ul"),C5=a("li"),t0e=a("strong"),hSr=o("albert"),uSr=o(" \u2014 "),RZ=a("a"),pSr=o("TFAlbertForMaskedLM"),_Sr=o(" (ALBERT model)"),bSr=l(),w5=a("li"),a0e=a("strong"),vSr=o("bert"),FSr=o(" \u2014 "),PZ=a("a"),TSr=o("TFBertForMaskedLM"),MSr=o(" (BERT model)"),ESr=l(),A5=a("li"),n0e=a("strong"),CSr=o("camembert"),wSr=o(" \u2014 "),BZ=a("a"),ASr=o("TFCamembertForMaskedLM"),LSr=o(" (CamemBERT model)"),ySr=l(),L5=a("li"),s0e=a("strong"),xSr=o("convbert"),$Sr=o(" \u2014 "),IZ=a("a"),kSr=o("TFConvBertForMaskedLM"),SSr=o(" (ConvBERT model)"),RSr=l(),y5=a("li"),l0e=a("strong"),PSr=o("deberta"),BSr=o(" \u2014 "),NZ=a("a"),ISr=o("TFDebertaForMaskedLM"),NSr=o(" (DeBERTa model)"),qSr=l(),x5=a("li"),i0e=a("strong"),jSr=o("deberta-v2"),DSr=o(" \u2014 "),qZ=a("a"),GSr=o("TFDebertaV2ForMaskedLM"),OSr=o(" (DeBERTa-v2 model)"),VSr=l(),$5=a("li"),d0e=a("strong"),XSr=o("distilbert"),zSr=o(" \u2014 "),jZ=a("a"),WSr=o("TFDistilBertForMaskedLM"),QSr=o(" (DistilBERT model)"),USr=l(),k5=a("li"),c0e=a("strong"),HSr=o("electra"),JSr=o(" \u2014 "),DZ=a("a"),YSr=o("TFElectraForMaskedLM"),KSr=o(" (ELECTRA model)"),ZSr=l(),S5=a("li"),m0e=a("strong"),eRr=o("flaubert"),oRr=o(" \u2014 "),GZ=a("a"),rRr=o("TFFlaubertWithLMHeadModel"),tRr=o(" (FlauBERT model)"),aRr=l(),R5=a("li"),f0e=a("strong"),nRr=o("funnel"),sRr=o(" \u2014 "),OZ=a("a"),lRr=o("TFFunnelForMaskedLM"),iRr=o(" (Funnel Transformer model)"),dRr=l(),P5=a("li"),g0e=a("strong"),cRr=o("layoutlm"),mRr=o(" \u2014 "),VZ=a("a"),fRr=o("TFLayoutLMForMaskedLM"),gRr=o(" (LayoutLM model)"),hRr=l(),B5=a("li"),h0e=a("strong"),uRr=o("longformer"),pRr=o(" \u2014 "),XZ=a("a"),_Rr=o("TFLongformerForMaskedLM"),bRr=o(" (Longformer model)"),vRr=l(),I5=a("li"),u0e=a("strong"),FRr=o("mobilebert"),TRr=o(" \u2014 "),zZ=a("a"),MRr=o("TFMobileBertForMaskedLM"),ERr=o(" (MobileBERT model)"),CRr=l(),N5=a("li"),p0e=a("strong"),wRr=o("mpnet"),ARr=o(" \u2014 "),WZ=a("a"),LRr=o("TFMPNetForMaskedLM"),yRr=o(" (MPNet model)"),xRr=l(),q5=a("li"),_0e=a("strong"),$Rr=o("rembert"),kRr=o(" \u2014 "),QZ=a("a"),SRr=o("TFRemBertForMaskedLM"),RRr=o(" (RemBERT model)"),PRr=l(),j5=a("li"),b0e=a("strong"),BRr=o("roberta"),IRr=o(" \u2014 "),UZ=a("a"),NRr=o("TFRobertaForMaskedLM"),qRr=o(" (RoBERTa model)"),jRr=l(),D5=a("li"),v0e=a("strong"),DRr=o("roformer"),GRr=o(" \u2014 "),HZ=a("a"),ORr=o("TFRoFormerForMaskedLM"),VRr=o(" (RoFormer model)"),XRr=l(),G5=a("li"),F0e=a("strong"),zRr=o("tapas"),WRr=o(" \u2014 "),JZ=a("a"),QRr=o("TFTapasForMaskedLM"),URr=o(" (TAPAS model)"),HRr=l(),O5=a("li"),T0e=a("strong"),JRr=o("xlm"),YRr=o(" \u2014 "),YZ=a("a"),KRr=o("TFXLMWithLMHeadModel"),ZRr=o(" (XLM model)"),ePr=l(),V5=a("li"),M0e=a("strong"),oPr=o("xlm-roberta"),rPr=o(" \u2014 "),KZ=a("a"),tPr=o("TFXLMRobertaForMaskedLM"),aPr=o(" (XLM-RoBERTa model)"),nPr=l(),F(X5.$$.fragment),XHe=l(),Oc=a("h2"),z5=a("a"),E0e=a("span"),F(X$.$$.fragment),sPr=l(),C0e=a("span"),lPr=o("TFAutoModelForSeq2SeqLM"),zHe=l(),cr=a("div"),F(z$.$$.fragment),iPr=l(),Vc=a("p"),dPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ZZ=a("a"),cPr=o("from_pretrained()"),mPr=o(" class method or the "),eee=a("a"),fPr=o("from_config()"),gPr=o(` class
method.`),hPr=l(),W$=a("p"),uPr=o("This class cannot be instantiated directly using "),w0e=a("code"),pPr=o("__init__()"),_Pr=o(" (throws an error)."),bPr=l(),Xt=a("div"),F(Q$.$$.fragment),vPr=l(),A0e=a("p"),FPr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),TPr=l(),Xc=a("p"),MPr=o(`Note:
Loading a model from its configuration file does `),L0e=a("strong"),EPr=o("not"),CPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oee=a("a"),wPr=o("from_pretrained()"),APr=o(" to load the model weights."),LPr=l(),F(W5.$$.fragment),yPr=l(),jr=a("div"),F(U$.$$.fragment),xPr=l(),y0e=a("p"),$Pr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),kPr=l(),Mn=a("p"),SPr=o("The model class to instantiate is selected based on the "),x0e=a("code"),RPr=o("model_type"),PPr=o(` property of the config object (either
passed as an argument or loaded from `),$0e=a("code"),BPr=o("pretrained_model_name_or_path"),IPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k0e=a("code"),NPr=o("pretrained_model_name_or_path"),qPr=o(":"),jPr=l(),ye=a("ul"),Q5=a("li"),S0e=a("strong"),DPr=o("bart"),GPr=o(" \u2014 "),ree=a("a"),OPr=o("TFBartForConditionalGeneration"),VPr=o(" (BART model)"),XPr=l(),U5=a("li"),R0e=a("strong"),zPr=o("blenderbot"),WPr=o(" \u2014 "),tee=a("a"),QPr=o("TFBlenderbotForConditionalGeneration"),UPr=o(" (Blenderbot model)"),HPr=l(),H5=a("li"),P0e=a("strong"),JPr=o("blenderbot-small"),YPr=o(" \u2014 "),aee=a("a"),KPr=o("TFBlenderbotSmallForConditionalGeneration"),ZPr=o(" (BlenderbotSmall model)"),eBr=l(),J5=a("li"),B0e=a("strong"),oBr=o("encoder-decoder"),rBr=o(" \u2014 "),nee=a("a"),tBr=o("TFEncoderDecoderModel"),aBr=o(" (Encoder decoder model)"),nBr=l(),Y5=a("li"),I0e=a("strong"),sBr=o("led"),lBr=o(" \u2014 "),see=a("a"),iBr=o("TFLEDForConditionalGeneration"),dBr=o(" (LED model)"),cBr=l(),K5=a("li"),N0e=a("strong"),mBr=o("marian"),fBr=o(" \u2014 "),lee=a("a"),gBr=o("TFMarianMTModel"),hBr=o(" (Marian model)"),uBr=l(),Z5=a("li"),q0e=a("strong"),pBr=o("mbart"),_Br=o(" \u2014 "),iee=a("a"),bBr=o("TFMBartForConditionalGeneration"),vBr=o(" (mBART model)"),FBr=l(),e0=a("li"),j0e=a("strong"),TBr=o("mt5"),MBr=o(" \u2014 "),dee=a("a"),EBr=o("TFMT5ForConditionalGeneration"),CBr=o(" (MT5 model)"),wBr=l(),o0=a("li"),D0e=a("strong"),ABr=o("pegasus"),LBr=o(" \u2014 "),cee=a("a"),yBr=o("TFPegasusForConditionalGeneration"),xBr=o(" (Pegasus model)"),$Br=l(),r0=a("li"),G0e=a("strong"),kBr=o("t5"),SBr=o(" \u2014 "),mee=a("a"),RBr=o("TFT5ForConditionalGeneration"),PBr=o(" (T5 model)"),BBr=l(),F(t0.$$.fragment),WHe=l(),zc=a("h2"),a0=a("a"),O0e=a("span"),F(H$.$$.fragment),IBr=l(),V0e=a("span"),NBr=o("TFAutoModelForSequenceClassification"),QHe=l(),mr=a("div"),F(J$.$$.fragment),qBr=l(),Wc=a("p"),jBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),fee=a("a"),DBr=o("from_pretrained()"),GBr=o(" class method or the "),gee=a("a"),OBr=o("from_config()"),VBr=o(` class
method.`),XBr=l(),Y$=a("p"),zBr=o("This class cannot be instantiated directly using "),X0e=a("code"),WBr=o("__init__()"),QBr=o(" (throws an error)."),UBr=l(),zt=a("div"),F(K$.$$.fragment),HBr=l(),z0e=a("p"),JBr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),YBr=l(),Qc=a("p"),KBr=o(`Note:
Loading a model from its configuration file does `),W0e=a("strong"),ZBr=o("not"),eIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hee=a("a"),oIr=o("from_pretrained()"),rIr=o(" to load the model weights."),tIr=l(),F(n0.$$.fragment),aIr=l(),Dr=a("div"),F(Z$.$$.fragment),nIr=l(),Q0e=a("p"),sIr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),lIr=l(),En=a("p"),iIr=o("The model class to instantiate is selected based on the "),U0e=a("code"),dIr=o("model_type"),cIr=o(` property of the config object (either
passed as an argument or loaded from `),H0e=a("code"),mIr=o("pretrained_model_name_or_path"),fIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J0e=a("code"),gIr=o("pretrained_model_name_or_path"),hIr=o(":"),uIr=l(),re=a("ul"),s0=a("li"),Y0e=a("strong"),pIr=o("albert"),_Ir=o(" \u2014 "),uee=a("a"),bIr=o("TFAlbertForSequenceClassification"),vIr=o(" (ALBERT model)"),FIr=l(),l0=a("li"),K0e=a("strong"),TIr=o("bert"),MIr=o(" \u2014 "),pee=a("a"),EIr=o("TFBertForSequenceClassification"),CIr=o(" (BERT model)"),wIr=l(),i0=a("li"),Z0e=a("strong"),AIr=o("camembert"),LIr=o(" \u2014 "),_ee=a("a"),yIr=o("TFCamembertForSequenceClassification"),xIr=o(" (CamemBERT model)"),$Ir=l(),d0=a("li"),ewe=a("strong"),kIr=o("convbert"),SIr=o(" \u2014 "),bee=a("a"),RIr=o("TFConvBertForSequenceClassification"),PIr=o(" (ConvBERT model)"),BIr=l(),c0=a("li"),owe=a("strong"),IIr=o("ctrl"),NIr=o(" \u2014 "),vee=a("a"),qIr=o("TFCTRLForSequenceClassification"),jIr=o(" (CTRL model)"),DIr=l(),m0=a("li"),rwe=a("strong"),GIr=o("deberta"),OIr=o(" \u2014 "),Fee=a("a"),VIr=o("TFDebertaForSequenceClassification"),XIr=o(" (DeBERTa model)"),zIr=l(),f0=a("li"),twe=a("strong"),WIr=o("deberta-v2"),QIr=o(" \u2014 "),Tee=a("a"),UIr=o("TFDebertaV2ForSequenceClassification"),HIr=o(" (DeBERTa-v2 model)"),JIr=l(),g0=a("li"),awe=a("strong"),YIr=o("distilbert"),KIr=o(" \u2014 "),Mee=a("a"),ZIr=o("TFDistilBertForSequenceClassification"),eNr=o(" (DistilBERT model)"),oNr=l(),h0=a("li"),nwe=a("strong"),rNr=o("electra"),tNr=o(" \u2014 "),Eee=a("a"),aNr=o("TFElectraForSequenceClassification"),nNr=o(" (ELECTRA model)"),sNr=l(),u0=a("li"),swe=a("strong"),lNr=o("flaubert"),iNr=o(" \u2014 "),Cee=a("a"),dNr=o("TFFlaubertForSequenceClassification"),cNr=o(" (FlauBERT model)"),mNr=l(),p0=a("li"),lwe=a("strong"),fNr=o("funnel"),gNr=o(" \u2014 "),wee=a("a"),hNr=o("TFFunnelForSequenceClassification"),uNr=o(" (Funnel Transformer model)"),pNr=l(),_0=a("li"),iwe=a("strong"),_Nr=o("gpt2"),bNr=o(" \u2014 "),Aee=a("a"),vNr=o("TFGPT2ForSequenceClassification"),FNr=o(" (OpenAI GPT-2 model)"),TNr=l(),b0=a("li"),dwe=a("strong"),MNr=o("gptj"),ENr=o(" \u2014 "),Lee=a("a"),CNr=o("TFGPTJForSequenceClassification"),wNr=o(" (GPT-J model)"),ANr=l(),v0=a("li"),cwe=a("strong"),LNr=o("layoutlm"),yNr=o(" \u2014 "),yee=a("a"),xNr=o("TFLayoutLMForSequenceClassification"),$Nr=o(" (LayoutLM model)"),kNr=l(),F0=a("li"),mwe=a("strong"),SNr=o("layoutlmv3"),RNr=o(" \u2014 "),xee=a("a"),PNr=o("TFLayoutLMv3ForSequenceClassification"),BNr=o(" (LayoutLMv3 model)"),INr=l(),T0=a("li"),fwe=a("strong"),NNr=o("longformer"),qNr=o(" \u2014 "),$ee=a("a"),jNr=o("TFLongformerForSequenceClassification"),DNr=o(" (Longformer model)"),GNr=l(),M0=a("li"),gwe=a("strong"),ONr=o("mobilebert"),VNr=o(" \u2014 "),kee=a("a"),XNr=o("TFMobileBertForSequenceClassification"),zNr=o(" (MobileBERT model)"),WNr=l(),E0=a("li"),hwe=a("strong"),QNr=o("mpnet"),UNr=o(" \u2014 "),See=a("a"),HNr=o("TFMPNetForSequenceClassification"),JNr=o(" (MPNet model)"),YNr=l(),C0=a("li"),uwe=a("strong"),KNr=o("openai-gpt"),ZNr=o(" \u2014 "),Ree=a("a"),eqr=o("TFOpenAIGPTForSequenceClassification"),oqr=o(" (OpenAI GPT model)"),rqr=l(),w0=a("li"),pwe=a("strong"),tqr=o("rembert"),aqr=o(" \u2014 "),Pee=a("a"),nqr=o("TFRemBertForSequenceClassification"),sqr=o(" (RemBERT model)"),lqr=l(),A0=a("li"),_we=a("strong"),iqr=o("roberta"),dqr=o(" \u2014 "),Bee=a("a"),cqr=o("TFRobertaForSequenceClassification"),mqr=o(" (RoBERTa model)"),fqr=l(),L0=a("li"),bwe=a("strong"),gqr=o("roformer"),hqr=o(" \u2014 "),Iee=a("a"),uqr=o("TFRoFormerForSequenceClassification"),pqr=o(" (RoFormer model)"),_qr=l(),y0=a("li"),vwe=a("strong"),bqr=o("tapas"),vqr=o(" \u2014 "),Nee=a("a"),Fqr=o("TFTapasForSequenceClassification"),Tqr=o(" (TAPAS model)"),Mqr=l(),x0=a("li"),Fwe=a("strong"),Eqr=o("transfo-xl"),Cqr=o(" \u2014 "),qee=a("a"),wqr=o("TFTransfoXLForSequenceClassification"),Aqr=o(" (Transformer-XL model)"),Lqr=l(),$0=a("li"),Twe=a("strong"),yqr=o("xlm"),xqr=o(" \u2014 "),jee=a("a"),$qr=o("TFXLMForSequenceClassification"),kqr=o(" (XLM model)"),Sqr=l(),k0=a("li"),Mwe=a("strong"),Rqr=o("xlm-roberta"),Pqr=o(" \u2014 "),Dee=a("a"),Bqr=o("TFXLMRobertaForSequenceClassification"),Iqr=o(" (XLM-RoBERTa model)"),Nqr=l(),S0=a("li"),Ewe=a("strong"),qqr=o("xlnet"),jqr=o(" \u2014 "),Gee=a("a"),Dqr=o("TFXLNetForSequenceClassification"),Gqr=o(" (XLNet model)"),Oqr=l(),F(R0.$$.fragment),UHe=l(),Uc=a("h2"),P0=a("a"),Cwe=a("span"),F(ek.$$.fragment),Vqr=l(),wwe=a("span"),Xqr=o("TFAutoModelForMultipleChoice"),HHe=l(),fr=a("div"),F(ok.$$.fragment),zqr=l(),Hc=a("p"),Wqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Oee=a("a"),Qqr=o("from_pretrained()"),Uqr=o(" class method or the "),Vee=a("a"),Hqr=o("from_config()"),Jqr=o(` class
method.`),Yqr=l(),rk=a("p"),Kqr=o("This class cannot be instantiated directly using "),Awe=a("code"),Zqr=o("__init__()"),ejr=o(" (throws an error)."),ojr=l(),Wt=a("div"),F(tk.$$.fragment),rjr=l(),Lwe=a("p"),tjr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ajr=l(),Jc=a("p"),njr=o(`Note:
Loading a model from its configuration file does `),ywe=a("strong"),sjr=o("not"),ljr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xee=a("a"),ijr=o("from_pretrained()"),djr=o(" to load the model weights."),cjr=l(),F(B0.$$.fragment),mjr=l(),Gr=a("div"),F(ak.$$.fragment),fjr=l(),xwe=a("p"),gjr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),hjr=l(),Cn=a("p"),ujr=o("The model class to instantiate is selected based on the "),$we=a("code"),pjr=o("model_type"),_jr=o(` property of the config object (either
passed as an argument or loaded from `),kwe=a("code"),bjr=o("pretrained_model_name_or_path"),vjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Swe=a("code"),Fjr=o("pretrained_model_name_or_path"),Tjr=o(":"),Mjr=l(),ve=a("ul"),I0=a("li"),Rwe=a("strong"),Ejr=o("albert"),Cjr=o(" \u2014 "),zee=a("a"),wjr=o("TFAlbertForMultipleChoice"),Ajr=o(" (ALBERT model)"),Ljr=l(),N0=a("li"),Pwe=a("strong"),yjr=o("bert"),xjr=o(" \u2014 "),Wee=a("a"),$jr=o("TFBertForMultipleChoice"),kjr=o(" (BERT model)"),Sjr=l(),q0=a("li"),Bwe=a("strong"),Rjr=o("camembert"),Pjr=o(" \u2014 "),Qee=a("a"),Bjr=o("TFCamembertForMultipleChoice"),Ijr=o(" (CamemBERT model)"),Njr=l(),j0=a("li"),Iwe=a("strong"),qjr=o("convbert"),jjr=o(" \u2014 "),Uee=a("a"),Djr=o("TFConvBertForMultipleChoice"),Gjr=o(" (ConvBERT model)"),Ojr=l(),D0=a("li"),Nwe=a("strong"),Vjr=o("distilbert"),Xjr=o(" \u2014 "),Hee=a("a"),zjr=o("TFDistilBertForMultipleChoice"),Wjr=o(" (DistilBERT model)"),Qjr=l(),G0=a("li"),qwe=a("strong"),Ujr=o("electra"),Hjr=o(" \u2014 "),Jee=a("a"),Jjr=o("TFElectraForMultipleChoice"),Yjr=o(" (ELECTRA model)"),Kjr=l(),O0=a("li"),jwe=a("strong"),Zjr=o("flaubert"),eDr=o(" \u2014 "),Yee=a("a"),oDr=o("TFFlaubertForMultipleChoice"),rDr=o(" (FlauBERT model)"),tDr=l(),V0=a("li"),Dwe=a("strong"),aDr=o("funnel"),nDr=o(" \u2014 "),Kee=a("a"),sDr=o("TFFunnelForMultipleChoice"),lDr=o(" (Funnel Transformer model)"),iDr=l(),X0=a("li"),Gwe=a("strong"),dDr=o("longformer"),cDr=o(" \u2014 "),Zee=a("a"),mDr=o("TFLongformerForMultipleChoice"),fDr=o(" (Longformer model)"),gDr=l(),z0=a("li"),Owe=a("strong"),hDr=o("mobilebert"),uDr=o(" \u2014 "),eoe=a("a"),pDr=o("TFMobileBertForMultipleChoice"),_Dr=o(" (MobileBERT model)"),bDr=l(),W0=a("li"),Vwe=a("strong"),vDr=o("mpnet"),FDr=o(" \u2014 "),ooe=a("a"),TDr=o("TFMPNetForMultipleChoice"),MDr=o(" (MPNet model)"),EDr=l(),Q0=a("li"),Xwe=a("strong"),CDr=o("rembert"),wDr=o(" \u2014 "),roe=a("a"),ADr=o("TFRemBertForMultipleChoice"),LDr=o(" (RemBERT model)"),yDr=l(),U0=a("li"),zwe=a("strong"),xDr=o("roberta"),$Dr=o(" \u2014 "),toe=a("a"),kDr=o("TFRobertaForMultipleChoice"),SDr=o(" (RoBERTa model)"),RDr=l(),H0=a("li"),Wwe=a("strong"),PDr=o("roformer"),BDr=o(" \u2014 "),aoe=a("a"),IDr=o("TFRoFormerForMultipleChoice"),NDr=o(" (RoFormer model)"),qDr=l(),J0=a("li"),Qwe=a("strong"),jDr=o("xlm"),DDr=o(" \u2014 "),noe=a("a"),GDr=o("TFXLMForMultipleChoice"),ODr=o(" (XLM model)"),VDr=l(),Y0=a("li"),Uwe=a("strong"),XDr=o("xlm-roberta"),zDr=o(" \u2014 "),soe=a("a"),WDr=o("TFXLMRobertaForMultipleChoice"),QDr=o(" (XLM-RoBERTa model)"),UDr=l(),K0=a("li"),Hwe=a("strong"),HDr=o("xlnet"),JDr=o(" \u2014 "),loe=a("a"),YDr=o("TFXLNetForMultipleChoice"),KDr=o(" (XLNet model)"),ZDr=l(),F(Z0.$$.fragment),JHe=l(),Yc=a("h2"),ew=a("a"),Jwe=a("span"),F(nk.$$.fragment),eGr=l(),Ywe=a("span"),oGr=o("TFAutoModelForNextSentencePrediction"),YHe=l(),gr=a("div"),F(sk.$$.fragment),rGr=l(),Kc=a("p"),tGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ioe=a("a"),aGr=o("from_pretrained()"),nGr=o(" class method or the "),doe=a("a"),sGr=o("from_config()"),lGr=o(` class
method.`),iGr=l(),lk=a("p"),dGr=o("This class cannot be instantiated directly using "),Kwe=a("code"),cGr=o("__init__()"),mGr=o(" (throws an error)."),fGr=l(),Qt=a("div"),F(ik.$$.fragment),gGr=l(),Zwe=a("p"),hGr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),uGr=l(),Zc=a("p"),pGr=o(`Note:
Loading a model from its configuration file does `),e6e=a("strong"),_Gr=o("not"),bGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),coe=a("a"),vGr=o("from_pretrained()"),FGr=o(" to load the model weights."),TGr=l(),F(ow.$$.fragment),MGr=l(),Or=a("div"),F(dk.$$.fragment),EGr=l(),o6e=a("p"),CGr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),wGr=l(),wn=a("p"),AGr=o("The model class to instantiate is selected based on the "),r6e=a("code"),LGr=o("model_type"),yGr=o(` property of the config object (either
passed as an argument or loaded from `),t6e=a("code"),xGr=o("pretrained_model_name_or_path"),$Gr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a6e=a("code"),kGr=o("pretrained_model_name_or_path"),SGr=o(":"),RGr=l(),ck=a("ul"),rw=a("li"),n6e=a("strong"),PGr=o("bert"),BGr=o(" \u2014 "),moe=a("a"),IGr=o("TFBertForNextSentencePrediction"),NGr=o(" (BERT model)"),qGr=l(),tw=a("li"),s6e=a("strong"),jGr=o("mobilebert"),DGr=o(" \u2014 "),foe=a("a"),GGr=o("TFMobileBertForNextSentencePrediction"),OGr=o(" (MobileBERT model)"),VGr=l(),F(aw.$$.fragment),KHe=l(),em=a("h2"),nw=a("a"),l6e=a("span"),F(mk.$$.fragment),XGr=l(),i6e=a("span"),zGr=o("TFAutoModelForTableQuestionAnswering"),ZHe=l(),hr=a("div"),F(fk.$$.fragment),WGr=l(),om=a("p"),QGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),goe=a("a"),UGr=o("from_pretrained()"),HGr=o(" class method or the "),hoe=a("a"),JGr=o("from_config()"),YGr=o(` class
method.`),KGr=l(),gk=a("p"),ZGr=o("This class cannot be instantiated directly using "),d6e=a("code"),eOr=o("__init__()"),oOr=o(" (throws an error)."),rOr=l(),Ut=a("div"),F(hk.$$.fragment),tOr=l(),c6e=a("p"),aOr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),nOr=l(),rm=a("p"),sOr=o(`Note:
Loading a model from its configuration file does `),m6e=a("strong"),lOr=o("not"),iOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uoe=a("a"),dOr=o("from_pretrained()"),cOr=o(" to load the model weights."),mOr=l(),F(sw.$$.fragment),fOr=l(),Vr=a("div"),F(uk.$$.fragment),gOr=l(),f6e=a("p"),hOr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),uOr=l(),An=a("p"),pOr=o("The model class to instantiate is selected based on the "),g6e=a("code"),_Or=o("model_type"),bOr=o(` property of the config object (either
passed as an argument or loaded from `),h6e=a("code"),vOr=o("pretrained_model_name_or_path"),FOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u6e=a("code"),TOr=o("pretrained_model_name_or_path"),MOr=o(":"),EOr=l(),p6e=a("ul"),lw=a("li"),_6e=a("strong"),COr=o("tapas"),wOr=o(" \u2014 "),poe=a("a"),AOr=o("TFTapasForQuestionAnswering"),LOr=o(" (TAPAS model)"),yOr=l(),F(iw.$$.fragment),eJe=l(),tm=a("h2"),dw=a("a"),b6e=a("span"),F(pk.$$.fragment),xOr=l(),v6e=a("span"),$Or=o("TFAutoModelForTokenClassification"),oJe=l(),ur=a("div"),F(_k.$$.fragment),kOr=l(),am=a("p"),SOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),_oe=a("a"),ROr=o("from_pretrained()"),POr=o(" class method or the "),boe=a("a"),BOr=o("from_config()"),IOr=o(` class
method.`),NOr=l(),bk=a("p"),qOr=o("This class cannot be instantiated directly using "),F6e=a("code"),jOr=o("__init__()"),DOr=o(" (throws an error)."),GOr=l(),Ht=a("div"),F(vk.$$.fragment),OOr=l(),T6e=a("p"),VOr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),XOr=l(),nm=a("p"),zOr=o(`Note:
Loading a model from its configuration file does `),M6e=a("strong"),WOr=o("not"),QOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),voe=a("a"),UOr=o("from_pretrained()"),HOr=o(" to load the model weights."),JOr=l(),F(cw.$$.fragment),YOr=l(),Xr=a("div"),F(Fk.$$.fragment),KOr=l(),E6e=a("p"),ZOr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),eVr=l(),Ln=a("p"),oVr=o("The model class to instantiate is selected based on the "),C6e=a("code"),rVr=o("model_type"),tVr=o(` property of the config object (either
passed as an argument or loaded from `),w6e=a("code"),aVr=o("pretrained_model_name_or_path"),nVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A6e=a("code"),sVr=o("pretrained_model_name_or_path"),lVr=o(":"),iVr=l(),ie=a("ul"),mw=a("li"),L6e=a("strong"),dVr=o("albert"),cVr=o(" \u2014 "),Foe=a("a"),mVr=o("TFAlbertForTokenClassification"),fVr=o(" (ALBERT model)"),gVr=l(),fw=a("li"),y6e=a("strong"),hVr=o("bert"),uVr=o(" \u2014 "),Toe=a("a"),pVr=o("TFBertForTokenClassification"),_Vr=o(" (BERT model)"),bVr=l(),gw=a("li"),x6e=a("strong"),vVr=o("camembert"),FVr=o(" \u2014 "),Moe=a("a"),TVr=o("TFCamembertForTokenClassification"),MVr=o(" (CamemBERT model)"),EVr=l(),hw=a("li"),$6e=a("strong"),CVr=o("convbert"),wVr=o(" \u2014 "),Eoe=a("a"),AVr=o("TFConvBertForTokenClassification"),LVr=o(" (ConvBERT model)"),yVr=l(),uw=a("li"),k6e=a("strong"),xVr=o("deberta"),$Vr=o(" \u2014 "),Coe=a("a"),kVr=o("TFDebertaForTokenClassification"),SVr=o(" (DeBERTa model)"),RVr=l(),pw=a("li"),S6e=a("strong"),PVr=o("deberta-v2"),BVr=o(" \u2014 "),woe=a("a"),IVr=o("TFDebertaV2ForTokenClassification"),NVr=o(" (DeBERTa-v2 model)"),qVr=l(),_w=a("li"),R6e=a("strong"),jVr=o("distilbert"),DVr=o(" \u2014 "),Aoe=a("a"),GVr=o("TFDistilBertForTokenClassification"),OVr=o(" (DistilBERT model)"),VVr=l(),bw=a("li"),P6e=a("strong"),XVr=o("electra"),zVr=o(" \u2014 "),Loe=a("a"),WVr=o("TFElectraForTokenClassification"),QVr=o(" (ELECTRA model)"),UVr=l(),vw=a("li"),B6e=a("strong"),HVr=o("flaubert"),JVr=o(" \u2014 "),yoe=a("a"),YVr=o("TFFlaubertForTokenClassification"),KVr=o(" (FlauBERT model)"),ZVr=l(),Fw=a("li"),I6e=a("strong"),eXr=o("funnel"),oXr=o(" \u2014 "),xoe=a("a"),rXr=o("TFFunnelForTokenClassification"),tXr=o(" (Funnel Transformer model)"),aXr=l(),Tw=a("li"),N6e=a("strong"),nXr=o("layoutlm"),sXr=o(" \u2014 "),$oe=a("a"),lXr=o("TFLayoutLMForTokenClassification"),iXr=o(" (LayoutLM model)"),dXr=l(),Mw=a("li"),q6e=a("strong"),cXr=o("layoutlmv3"),mXr=o(" \u2014 "),koe=a("a"),fXr=o("TFLayoutLMv3ForTokenClassification"),gXr=o(" (LayoutLMv3 model)"),hXr=l(),Ew=a("li"),j6e=a("strong"),uXr=o("longformer"),pXr=o(" \u2014 "),Soe=a("a"),_Xr=o("TFLongformerForTokenClassification"),bXr=o(" (Longformer model)"),vXr=l(),Cw=a("li"),D6e=a("strong"),FXr=o("mobilebert"),TXr=o(" \u2014 "),Roe=a("a"),MXr=o("TFMobileBertForTokenClassification"),EXr=o(" (MobileBERT model)"),CXr=l(),ww=a("li"),G6e=a("strong"),wXr=o("mpnet"),AXr=o(" \u2014 "),Poe=a("a"),LXr=o("TFMPNetForTokenClassification"),yXr=o(" (MPNet model)"),xXr=l(),Aw=a("li"),O6e=a("strong"),$Xr=o("rembert"),kXr=o(" \u2014 "),Boe=a("a"),SXr=o("TFRemBertForTokenClassification"),RXr=o(" (RemBERT model)"),PXr=l(),Lw=a("li"),V6e=a("strong"),BXr=o("roberta"),IXr=o(" \u2014 "),Ioe=a("a"),NXr=o("TFRobertaForTokenClassification"),qXr=o(" (RoBERTa model)"),jXr=l(),yw=a("li"),X6e=a("strong"),DXr=o("roformer"),GXr=o(" \u2014 "),Noe=a("a"),OXr=o("TFRoFormerForTokenClassification"),VXr=o(" (RoFormer model)"),XXr=l(),xw=a("li"),z6e=a("strong"),zXr=o("xlm"),WXr=o(" \u2014 "),qoe=a("a"),QXr=o("TFXLMForTokenClassification"),UXr=o(" (XLM model)"),HXr=l(),$w=a("li"),W6e=a("strong"),JXr=o("xlm-roberta"),YXr=o(" \u2014 "),joe=a("a"),KXr=o("TFXLMRobertaForTokenClassification"),ZXr=o(" (XLM-RoBERTa model)"),ezr=l(),kw=a("li"),Q6e=a("strong"),ozr=o("xlnet"),rzr=o(" \u2014 "),Doe=a("a"),tzr=o("TFXLNetForTokenClassification"),azr=o(" (XLNet model)"),nzr=l(),F(Sw.$$.fragment),rJe=l(),sm=a("h2"),Rw=a("a"),U6e=a("span"),F(Tk.$$.fragment),szr=l(),H6e=a("span"),lzr=o("TFAutoModelForQuestionAnswering"),tJe=l(),pr=a("div"),F(Mk.$$.fragment),izr=l(),lm=a("p"),dzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Goe=a("a"),czr=o("from_pretrained()"),mzr=o(" class method or the "),Ooe=a("a"),fzr=o("from_config()"),gzr=o(` class
method.`),hzr=l(),Ek=a("p"),uzr=o("This class cannot be instantiated directly using "),J6e=a("code"),pzr=o("__init__()"),_zr=o(" (throws an error)."),bzr=l(),Jt=a("div"),F(Ck.$$.fragment),vzr=l(),Y6e=a("p"),Fzr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Tzr=l(),im=a("p"),Mzr=o(`Note:
Loading a model from its configuration file does `),K6e=a("strong"),Ezr=o("not"),Czr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Voe=a("a"),wzr=o("from_pretrained()"),Azr=o(" to load the model weights."),Lzr=l(),F(Pw.$$.fragment),yzr=l(),zr=a("div"),F(wk.$$.fragment),xzr=l(),Z6e=a("p"),$zr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),kzr=l(),yn=a("p"),Szr=o("The model class to instantiate is selected based on the "),eAe=a("code"),Rzr=o("model_type"),Pzr=o(` property of the config object (either
passed as an argument or loaded from `),oAe=a("code"),Bzr=o("pretrained_model_name_or_path"),Izr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rAe=a("code"),Nzr=o("pretrained_model_name_or_path"),qzr=o(":"),jzr=l(),de=a("ul"),Bw=a("li"),tAe=a("strong"),Dzr=o("albert"),Gzr=o(" \u2014 "),Xoe=a("a"),Ozr=o("TFAlbertForQuestionAnswering"),Vzr=o(" (ALBERT model)"),Xzr=l(),Iw=a("li"),aAe=a("strong"),zzr=o("bert"),Wzr=o(" \u2014 "),zoe=a("a"),Qzr=o("TFBertForQuestionAnswering"),Uzr=o(" (BERT model)"),Hzr=l(),Nw=a("li"),nAe=a("strong"),Jzr=o("camembert"),Yzr=o(" \u2014 "),Woe=a("a"),Kzr=o("TFCamembertForQuestionAnswering"),Zzr=o(" (CamemBERT model)"),eWr=l(),qw=a("li"),sAe=a("strong"),oWr=o("convbert"),rWr=o(" \u2014 "),Qoe=a("a"),tWr=o("TFConvBertForQuestionAnswering"),aWr=o(" (ConvBERT model)"),nWr=l(),jw=a("li"),lAe=a("strong"),sWr=o("deberta"),lWr=o(" \u2014 "),Uoe=a("a"),iWr=o("TFDebertaForQuestionAnswering"),dWr=o(" (DeBERTa model)"),cWr=l(),Dw=a("li"),iAe=a("strong"),mWr=o("deberta-v2"),fWr=o(" \u2014 "),Hoe=a("a"),gWr=o("TFDebertaV2ForQuestionAnswering"),hWr=o(" (DeBERTa-v2 model)"),uWr=l(),Gw=a("li"),dAe=a("strong"),pWr=o("distilbert"),_Wr=o(" \u2014 "),Joe=a("a"),bWr=o("TFDistilBertForQuestionAnswering"),vWr=o(" (DistilBERT model)"),FWr=l(),Ow=a("li"),cAe=a("strong"),TWr=o("electra"),MWr=o(" \u2014 "),Yoe=a("a"),EWr=o("TFElectraForQuestionAnswering"),CWr=o(" (ELECTRA model)"),wWr=l(),Vw=a("li"),mAe=a("strong"),AWr=o("flaubert"),LWr=o(" \u2014 "),Koe=a("a"),yWr=o("TFFlaubertForQuestionAnsweringSimple"),xWr=o(" (FlauBERT model)"),$Wr=l(),Xw=a("li"),fAe=a("strong"),kWr=o("funnel"),SWr=o(" \u2014 "),Zoe=a("a"),RWr=o("TFFunnelForQuestionAnswering"),PWr=o(" (Funnel Transformer model)"),BWr=l(),zw=a("li"),gAe=a("strong"),IWr=o("gptj"),NWr=o(" \u2014 "),ere=a("a"),qWr=o("TFGPTJForQuestionAnswering"),jWr=o(" (GPT-J model)"),DWr=l(),Ww=a("li"),hAe=a("strong"),GWr=o("layoutlmv3"),OWr=o(" \u2014 "),ore=a("a"),VWr=o("TFLayoutLMv3ForQuestionAnswering"),XWr=o(" (LayoutLMv3 model)"),zWr=l(),Qw=a("li"),uAe=a("strong"),WWr=o("longformer"),QWr=o(" \u2014 "),rre=a("a"),UWr=o("TFLongformerForQuestionAnswering"),HWr=o(" (Longformer model)"),JWr=l(),Uw=a("li"),pAe=a("strong"),YWr=o("mobilebert"),KWr=o(" \u2014 "),tre=a("a"),ZWr=o("TFMobileBertForQuestionAnswering"),eQr=o(" (MobileBERT model)"),oQr=l(),Hw=a("li"),_Ae=a("strong"),rQr=o("mpnet"),tQr=o(" \u2014 "),are=a("a"),aQr=o("TFMPNetForQuestionAnswering"),nQr=o(" (MPNet model)"),sQr=l(),Jw=a("li"),bAe=a("strong"),lQr=o("rembert"),iQr=o(" \u2014 "),nre=a("a"),dQr=o("TFRemBertForQuestionAnswering"),cQr=o(" (RemBERT model)"),mQr=l(),Yw=a("li"),vAe=a("strong"),fQr=o("roberta"),gQr=o(" \u2014 "),sre=a("a"),hQr=o("TFRobertaForQuestionAnswering"),uQr=o(" (RoBERTa model)"),pQr=l(),Kw=a("li"),FAe=a("strong"),_Qr=o("roformer"),bQr=o(" \u2014 "),lre=a("a"),vQr=o("TFRoFormerForQuestionAnswering"),FQr=o(" (RoFormer model)"),TQr=l(),Zw=a("li"),TAe=a("strong"),MQr=o("xlm"),EQr=o(" \u2014 "),ire=a("a"),CQr=o("TFXLMForQuestionAnsweringSimple"),wQr=o(" (XLM model)"),AQr=l(),e6=a("li"),MAe=a("strong"),LQr=o("xlm-roberta"),yQr=o(" \u2014 "),dre=a("a"),xQr=o("TFXLMRobertaForQuestionAnswering"),$Qr=o(" (XLM-RoBERTa model)"),kQr=l(),o6=a("li"),EAe=a("strong"),SQr=o("xlnet"),RQr=o(" \u2014 "),cre=a("a"),PQr=o("TFXLNetForQuestionAnsweringSimple"),BQr=o(" (XLNet model)"),IQr=l(),F(r6.$$.fragment),aJe=l(),dm=a("h2"),t6=a("a"),CAe=a("span"),F(Ak.$$.fragment),NQr=l(),wAe=a("span"),qQr=o("TFAutoModelForVision2Seq"),nJe=l(),_r=a("div"),F(Lk.$$.fragment),jQr=l(),cm=a("p"),DQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mre=a("a"),GQr=o("from_pretrained()"),OQr=o(" class method or the "),fre=a("a"),VQr=o("from_config()"),XQr=o(` class
method.`),zQr=l(),yk=a("p"),WQr=o("This class cannot be instantiated directly using "),AAe=a("code"),QQr=o("__init__()"),UQr=o(" (throws an error)."),HQr=l(),Yt=a("div"),F(xk.$$.fragment),JQr=l(),LAe=a("p"),YQr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),KQr=l(),mm=a("p"),ZQr=o(`Note:
Loading a model from its configuration file does `),yAe=a("strong"),eUr=o("not"),oUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gre=a("a"),rUr=o("from_pretrained()"),tUr=o(" to load the model weights."),aUr=l(),F(a6.$$.fragment),nUr=l(),Wr=a("div"),F($k.$$.fragment),sUr=l(),xAe=a("p"),lUr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),iUr=l(),xn=a("p"),dUr=o("The model class to instantiate is selected based on the "),$Ae=a("code"),cUr=o("model_type"),mUr=o(` property of the config object (either
passed as an argument or loaded from `),kAe=a("code"),fUr=o("pretrained_model_name_or_path"),gUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SAe=a("code"),hUr=o("pretrained_model_name_or_path"),uUr=o(":"),pUr=l(),RAe=a("ul"),n6=a("li"),PAe=a("strong"),_Ur=o("vision-encoder-decoder"),bUr=o(" \u2014 "),hre=a("a"),vUr=o("TFVisionEncoderDecoderModel"),FUr=o(" (Vision Encoder decoder model)"),TUr=l(),F(s6.$$.fragment),sJe=l(),fm=a("h2"),l6=a("a"),BAe=a("span"),F(kk.$$.fragment),MUr=l(),IAe=a("span"),EUr=o("TFAutoModelForSpeechSeq2Seq"),lJe=l(),br=a("div"),F(Sk.$$.fragment),CUr=l(),gm=a("p"),wUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ure=a("a"),AUr=o("from_pretrained()"),LUr=o(" class method or the "),pre=a("a"),yUr=o("from_config()"),xUr=o(` class
method.`),$Ur=l(),Rk=a("p"),kUr=o("This class cannot be instantiated directly using "),NAe=a("code"),SUr=o("__init__()"),RUr=o(" (throws an error)."),PUr=l(),Kt=a("div"),F(Pk.$$.fragment),BUr=l(),qAe=a("p"),IUr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),NUr=l(),hm=a("p"),qUr=o(`Note:
Loading a model from its configuration file does `),jAe=a("strong"),jUr=o("not"),DUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_re=a("a"),GUr=o("from_pretrained()"),OUr=o(" to load the model weights."),VUr=l(),F(i6.$$.fragment),XUr=l(),Qr=a("div"),F(Bk.$$.fragment),zUr=l(),DAe=a("p"),WUr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),QUr=l(),$n=a("p"),UUr=o("The model class to instantiate is selected based on the "),GAe=a("code"),HUr=o("model_type"),JUr=o(` property of the config object (either
passed as an argument or loaded from `),OAe=a("code"),YUr=o("pretrained_model_name_or_path"),KUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VAe=a("code"),ZUr=o("pretrained_model_name_or_path"),eHr=o(":"),oHr=l(),XAe=a("ul"),d6=a("li"),zAe=a("strong"),rHr=o("speech_to_text"),tHr=o(" \u2014 "),bre=a("a"),aHr=o("TFSpeech2TextForConditionalGeneration"),nHr=o(" (Speech2Text model)"),sHr=l(),F(c6.$$.fragment),iJe=l(),um=a("h2"),m6=a("a"),WAe=a("span"),F(Ik.$$.fragment),lHr=l(),QAe=a("span"),iHr=o("FlaxAutoModel"),dJe=l(),vr=a("div"),F(Nk.$$.fragment),dHr=l(),pm=a("p"),cHr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vre=a("a"),mHr=o("from_pretrained()"),fHr=o(" class method or the "),Fre=a("a"),gHr=o("from_config()"),hHr=o(` class
method.`),uHr=l(),qk=a("p"),pHr=o("This class cannot be instantiated directly using "),UAe=a("code"),_Hr=o("__init__()"),bHr=o(" (throws an error)."),vHr=l(),Zt=a("div"),F(jk.$$.fragment),FHr=l(),HAe=a("p"),THr=o("Instantiates one of the base model classes of the library from a configuration."),MHr=l(),_m=a("p"),EHr=o(`Note:
Loading a model from its configuration file does `),JAe=a("strong"),CHr=o("not"),wHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tre=a("a"),AHr=o("from_pretrained()"),LHr=o(" to load the model weights."),yHr=l(),F(f6.$$.fragment),xHr=l(),Ur=a("div"),F(Dk.$$.fragment),$Hr=l(),YAe=a("p"),kHr=o("Instantiate one of the base model classes of the library from a pretrained model."),SHr=l(),kn=a("p"),RHr=o("The model class to instantiate is selected based on the "),KAe=a("code"),PHr=o("model_type"),BHr=o(` property of the config object (either
passed as an argument or loaded from `),ZAe=a("code"),IHr=o("pretrained_model_name_or_path"),NHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e7e=a("code"),qHr=o("pretrained_model_name_or_path"),jHr=o(":"),DHr=l(),te=a("ul"),g6=a("li"),o7e=a("strong"),GHr=o("albert"),OHr=o(" \u2014 "),Mre=a("a"),VHr=o("FlaxAlbertModel"),XHr=o(" (ALBERT model)"),zHr=l(),h6=a("li"),r7e=a("strong"),WHr=o("bart"),QHr=o(" \u2014 "),Ere=a("a"),UHr=o("FlaxBartModel"),HHr=o(" (BART model)"),JHr=l(),u6=a("li"),t7e=a("strong"),YHr=o("beit"),KHr=o(" \u2014 "),Cre=a("a"),ZHr=o("FlaxBeitModel"),eJr=o(" (BEiT model)"),oJr=l(),p6=a("li"),a7e=a("strong"),rJr=o("bert"),tJr=o(" \u2014 "),wre=a("a"),aJr=o("FlaxBertModel"),nJr=o(" (BERT model)"),sJr=l(),_6=a("li"),n7e=a("strong"),lJr=o("big_bird"),iJr=o(" \u2014 "),Are=a("a"),dJr=o("FlaxBigBirdModel"),cJr=o(" (BigBird model)"),mJr=l(),b6=a("li"),s7e=a("strong"),fJr=o("blenderbot"),gJr=o(" \u2014 "),Lre=a("a"),hJr=o("FlaxBlenderbotModel"),uJr=o(" (Blenderbot model)"),pJr=l(),v6=a("li"),l7e=a("strong"),_Jr=o("blenderbot-small"),bJr=o(" \u2014 "),yre=a("a"),vJr=o("FlaxBlenderbotSmallModel"),FJr=o(" (BlenderbotSmall model)"),TJr=l(),F6=a("li"),i7e=a("strong"),MJr=o("clip"),EJr=o(" \u2014 "),xre=a("a"),CJr=o("FlaxCLIPModel"),wJr=o(" (CLIP model)"),AJr=l(),T6=a("li"),d7e=a("strong"),LJr=o("distilbert"),yJr=o(" \u2014 "),$re=a("a"),xJr=o("FlaxDistilBertModel"),$Jr=o(" (DistilBERT model)"),kJr=l(),M6=a("li"),c7e=a("strong"),SJr=o("electra"),RJr=o(" \u2014 "),kre=a("a"),PJr=o("FlaxElectraModel"),BJr=o(" (ELECTRA model)"),IJr=l(),E6=a("li"),m7e=a("strong"),NJr=o("gpt2"),qJr=o(" \u2014 "),Sre=a("a"),jJr=o("FlaxGPT2Model"),DJr=o(" (OpenAI GPT-2 model)"),GJr=l(),C6=a("li"),f7e=a("strong"),OJr=o("gpt_neo"),VJr=o(" \u2014 "),Rre=a("a"),XJr=o("FlaxGPTNeoModel"),zJr=o(" (GPT Neo model)"),WJr=l(),w6=a("li"),g7e=a("strong"),QJr=o("gptj"),UJr=o(" \u2014 "),Pre=a("a"),HJr=o("FlaxGPTJModel"),JJr=o(" (GPT-J model)"),YJr=l(),A6=a("li"),h7e=a("strong"),KJr=o("longt5"),ZJr=o(" \u2014 "),Bre=a("a"),eYr=o("FlaxLongT5Model"),oYr=o(" (LongT5 model)"),rYr=l(),L6=a("li"),u7e=a("strong"),tYr=o("marian"),aYr=o(" \u2014 "),Ire=a("a"),nYr=o("FlaxMarianModel"),sYr=o(" (Marian model)"),lYr=l(),y6=a("li"),p7e=a("strong"),iYr=o("mbart"),dYr=o(" \u2014 "),Nre=a("a"),cYr=o("FlaxMBartModel"),mYr=o(" (mBART model)"),fYr=l(),x6=a("li"),_7e=a("strong"),gYr=o("mt5"),hYr=o(" \u2014 "),qre=a("a"),uYr=o("FlaxMT5Model"),pYr=o(" (MT5 model)"),_Yr=l(),$6=a("li"),b7e=a("strong"),bYr=o("opt"),vYr=o(" \u2014 "),jre=a("a"),FYr=o("FlaxOPTModel"),TYr=o(" (OPT model)"),MYr=l(),k6=a("li"),v7e=a("strong"),EYr=o("pegasus"),CYr=o(" \u2014 "),Dre=a("a"),wYr=o("FlaxPegasusModel"),AYr=o(" (Pegasus model)"),LYr=l(),S6=a("li"),F7e=a("strong"),yYr=o("roberta"),xYr=o(" \u2014 "),Gre=a("a"),$Yr=o("FlaxRobertaModel"),kYr=o(" (RoBERTa model)"),SYr=l(),R6=a("li"),T7e=a("strong"),RYr=o("roformer"),PYr=o(" \u2014 "),Ore=a("a"),BYr=o("FlaxRoFormerModel"),IYr=o(" (RoFormer model)"),NYr=l(),P6=a("li"),M7e=a("strong"),qYr=o("t5"),jYr=o(" \u2014 "),Vre=a("a"),DYr=o("FlaxT5Model"),GYr=o(" (T5 model)"),OYr=l(),B6=a("li"),E7e=a("strong"),VYr=o("vision-text-dual-encoder"),XYr=o(" \u2014 "),Xre=a("a"),zYr=o("FlaxVisionTextDualEncoderModel"),WYr=o(" (VisionTextDualEncoder model)"),QYr=l(),I6=a("li"),C7e=a("strong"),UYr=o("vit"),HYr=o(" \u2014 "),zre=a("a"),JYr=o("FlaxViTModel"),YYr=o(" (ViT model)"),KYr=l(),N6=a("li"),w7e=a("strong"),ZYr=o("wav2vec2"),eKr=o(" \u2014 "),Wre=a("a"),oKr=o("FlaxWav2Vec2Model"),rKr=o(" (Wav2Vec2 model)"),tKr=l(),q6=a("li"),A7e=a("strong"),aKr=o("xglm"),nKr=o(" \u2014 "),Qre=a("a"),sKr=o("FlaxXGLMModel"),lKr=o(" (XGLM model)"),iKr=l(),j6=a("li"),L7e=a("strong"),dKr=o("xlm-roberta"),cKr=o(" \u2014 "),Ure=a("a"),mKr=o("FlaxXLMRobertaModel"),fKr=o(" (XLM-RoBERTa model)"),gKr=l(),F(D6.$$.fragment),cJe=l(),bm=a("h2"),G6=a("a"),y7e=a("span"),F(Gk.$$.fragment),hKr=l(),x7e=a("span"),uKr=o("FlaxAutoModelForCausalLM"),mJe=l(),Fr=a("div"),F(Ok.$$.fragment),pKr=l(),vm=a("p"),_Kr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Hre=a("a"),bKr=o("from_pretrained()"),vKr=o(" class method or the "),Jre=a("a"),FKr=o("from_config()"),TKr=o(` class
method.`),MKr=l(),Vk=a("p"),EKr=o("This class cannot be instantiated directly using "),$7e=a("code"),CKr=o("__init__()"),wKr=o(" (throws an error)."),AKr=l(),ea=a("div"),F(Xk.$$.fragment),LKr=l(),k7e=a("p"),yKr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),xKr=l(),Fm=a("p"),$Kr=o(`Note:
Loading a model from its configuration file does `),S7e=a("strong"),kKr=o("not"),SKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yre=a("a"),RKr=o("from_pretrained()"),PKr=o(" to load the model weights."),BKr=l(),F(O6.$$.fragment),IKr=l(),Hr=a("div"),F(zk.$$.fragment),NKr=l(),R7e=a("p"),qKr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),jKr=l(),Sn=a("p"),DKr=o("The model class to instantiate is selected based on the "),P7e=a("code"),GKr=o("model_type"),OKr=o(` property of the config object (either
passed as an argument or loaded from `),B7e=a("code"),VKr=o("pretrained_model_name_or_path"),XKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I7e=a("code"),zKr=o("pretrained_model_name_or_path"),WKr=o(":"),QKr=l(),xe=a("ul"),V6=a("li"),N7e=a("strong"),UKr=o("bart"),HKr=o(" \u2014 "),Kre=a("a"),JKr=o("FlaxBartForCausalLM"),YKr=o(" (BART model)"),KKr=l(),X6=a("li"),q7e=a("strong"),ZKr=o("bert"),eZr=o(" \u2014 "),Zre=a("a"),oZr=o("FlaxBertForCausalLM"),rZr=o(" (BERT model)"),tZr=l(),z6=a("li"),j7e=a("strong"),aZr=o("big_bird"),nZr=o(" \u2014 "),ete=a("a"),sZr=o("FlaxBigBirdForCausalLM"),lZr=o(" (BigBird model)"),iZr=l(),W6=a("li"),D7e=a("strong"),dZr=o("electra"),cZr=o(" \u2014 "),ote=a("a"),mZr=o("FlaxElectraForCausalLM"),fZr=o(" (ELECTRA model)"),gZr=l(),Q6=a("li"),G7e=a("strong"),hZr=o("gpt2"),uZr=o(" \u2014 "),rte=a("a"),pZr=o("FlaxGPT2LMHeadModel"),_Zr=o(" (OpenAI GPT-2 model)"),bZr=l(),U6=a("li"),O7e=a("strong"),vZr=o("gpt_neo"),FZr=o(" \u2014 "),tte=a("a"),TZr=o("FlaxGPTNeoForCausalLM"),MZr=o(" (GPT Neo model)"),EZr=l(),H6=a("li"),V7e=a("strong"),CZr=o("gptj"),wZr=o(" \u2014 "),ate=a("a"),AZr=o("FlaxGPTJForCausalLM"),LZr=o(" (GPT-J model)"),yZr=l(),J6=a("li"),X7e=a("strong"),xZr=o("opt"),$Zr=o(" \u2014 "),nte=a("a"),kZr=o("FlaxOPTForCausalLM"),SZr=o(" (OPT model)"),RZr=l(),Y6=a("li"),z7e=a("strong"),PZr=o("roberta"),BZr=o(" \u2014 "),ste=a("a"),IZr=o("FlaxRobertaForCausalLM"),NZr=o(" (RoBERTa model)"),qZr=l(),K6=a("li"),W7e=a("strong"),jZr=o("xglm"),DZr=o(" \u2014 "),lte=a("a"),GZr=o("FlaxXGLMForCausalLM"),OZr=o(" (XGLM model)"),VZr=l(),F(Z6.$$.fragment),fJe=l(),Tm=a("h2"),eA=a("a"),Q7e=a("span"),F(Wk.$$.fragment),XZr=l(),U7e=a("span"),zZr=o("FlaxAutoModelForPreTraining"),gJe=l(),Tr=a("div"),F(Qk.$$.fragment),WZr=l(),Mm=a("p"),QZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ite=a("a"),UZr=o("from_pretrained()"),HZr=o(" class method or the "),dte=a("a"),JZr=o("from_config()"),YZr=o(` class
method.`),KZr=l(),Uk=a("p"),ZZr=o("This class cannot be instantiated directly using "),H7e=a("code"),eet=o("__init__()"),oet=o(" (throws an error)."),ret=l(),oa=a("div"),F(Hk.$$.fragment),tet=l(),J7e=a("p"),aet=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),net=l(),Em=a("p"),set=o(`Note:
Loading a model from its configuration file does `),Y7e=a("strong"),iet=o("not"),det=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cte=a("a"),cet=o("from_pretrained()"),met=o(" to load the model weights."),fet=l(),F(oA.$$.fragment),get=l(),Jr=a("div"),F(Jk.$$.fragment),het=l(),K7e=a("p"),uet=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),pet=l(),Rn=a("p"),_et=o("The model class to instantiate is selected based on the "),Z7e=a("code"),bet=o("model_type"),vet=o(` property of the config object (either
passed as an argument or loaded from `),eLe=a("code"),Fet=o("pretrained_model_name_or_path"),Tet=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oLe=a("code"),Met=o("pretrained_model_name_or_path"),Eet=o(":"),Cet=l(),Ee=a("ul"),rA=a("li"),rLe=a("strong"),wet=o("albert"),Aet=o(" \u2014 "),mte=a("a"),Let=o("FlaxAlbertForPreTraining"),yet=o(" (ALBERT model)"),xet=l(),tA=a("li"),tLe=a("strong"),$et=o("bart"),ket=o(" \u2014 "),fte=a("a"),Set=o("FlaxBartForConditionalGeneration"),Ret=o(" (BART model)"),Pet=l(),aA=a("li"),aLe=a("strong"),Bet=o("bert"),Iet=o(" \u2014 "),gte=a("a"),Net=o("FlaxBertForPreTraining"),qet=o(" (BERT model)"),jet=l(),nA=a("li"),nLe=a("strong"),Det=o("big_bird"),Get=o(" \u2014 "),hte=a("a"),Oet=o("FlaxBigBirdForPreTraining"),Vet=o(" (BigBird model)"),Xet=l(),sA=a("li"),sLe=a("strong"),zet=o("electra"),Wet=o(" \u2014 "),ute=a("a"),Qet=o("FlaxElectraForPreTraining"),Uet=o(" (ELECTRA model)"),Het=l(),lA=a("li"),lLe=a("strong"),Jet=o("longt5"),Yet=o(" \u2014 "),pte=a("a"),Ket=o("FlaxLongT5ForConditionalGeneration"),Zet=o(" (LongT5 model)"),eot=l(),iA=a("li"),iLe=a("strong"),oot=o("mbart"),rot=o(" \u2014 "),_te=a("a"),tot=o("FlaxMBartForConditionalGeneration"),aot=o(" (mBART model)"),not=l(),dA=a("li"),dLe=a("strong"),sot=o("mt5"),lot=o(" \u2014 "),bte=a("a"),iot=o("FlaxMT5ForConditionalGeneration"),dot=o(" (MT5 model)"),cot=l(),cA=a("li"),cLe=a("strong"),mot=o("roberta"),fot=o(" \u2014 "),vte=a("a"),got=o("FlaxRobertaForMaskedLM"),hot=o(" (RoBERTa model)"),uot=l(),mA=a("li"),mLe=a("strong"),pot=o("roformer"),_ot=o(" \u2014 "),Fte=a("a"),bot=o("FlaxRoFormerForMaskedLM"),vot=o(" (RoFormer model)"),Fot=l(),fA=a("li"),fLe=a("strong"),Tot=o("t5"),Mot=o(" \u2014 "),Tte=a("a"),Eot=o("FlaxT5ForConditionalGeneration"),Cot=o(" (T5 model)"),wot=l(),gA=a("li"),gLe=a("strong"),Aot=o("wav2vec2"),Lot=o(" \u2014 "),Mte=a("a"),yot=o("FlaxWav2Vec2ForPreTraining"),xot=o(" (Wav2Vec2 model)"),$ot=l(),hA=a("li"),hLe=a("strong"),kot=o("xlm-roberta"),Sot=o(" \u2014 "),Ete=a("a"),Rot=o("FlaxXLMRobertaForMaskedLM"),Pot=o(" (XLM-RoBERTa model)"),Bot=l(),F(uA.$$.fragment),hJe=l(),Cm=a("h2"),pA=a("a"),uLe=a("span"),F(Yk.$$.fragment),Iot=l(),pLe=a("span"),Not=o("FlaxAutoModelForMaskedLM"),uJe=l(),Mr=a("div"),F(Kk.$$.fragment),qot=l(),wm=a("p"),jot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Cte=a("a"),Dot=o("from_pretrained()"),Got=o(" class method or the "),wte=a("a"),Oot=o("from_config()"),Vot=o(` class
method.`),Xot=l(),Zk=a("p"),zot=o("This class cannot be instantiated directly using "),_Le=a("code"),Wot=o("__init__()"),Qot=o(" (throws an error)."),Uot=l(),ra=a("div"),F(eS.$$.fragment),Hot=l(),bLe=a("p"),Jot=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Yot=l(),Am=a("p"),Kot=o(`Note:
Loading a model from its configuration file does `),vLe=a("strong"),Zot=o("not"),ert=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ate=a("a"),ort=o("from_pretrained()"),rrt=o(" to load the model weights."),trt=l(),F(_A.$$.fragment),art=l(),Yr=a("div"),F(oS.$$.fragment),nrt=l(),FLe=a("p"),srt=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),lrt=l(),Pn=a("p"),irt=o("The model class to instantiate is selected based on the "),TLe=a("code"),drt=o("model_type"),crt=o(` property of the config object (either
passed as an argument or loaded from `),MLe=a("code"),mrt=o("pretrained_model_name_or_path"),frt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ELe=a("code"),grt=o("pretrained_model_name_or_path"),hrt=o(":"),urt=l(),$e=a("ul"),bA=a("li"),CLe=a("strong"),prt=o("albert"),_rt=o(" \u2014 "),Lte=a("a"),brt=o("FlaxAlbertForMaskedLM"),vrt=o(" (ALBERT model)"),Frt=l(),vA=a("li"),wLe=a("strong"),Trt=o("bart"),Mrt=o(" \u2014 "),yte=a("a"),Ert=o("FlaxBartForConditionalGeneration"),Crt=o(" (BART model)"),wrt=l(),FA=a("li"),ALe=a("strong"),Art=o("bert"),Lrt=o(" \u2014 "),xte=a("a"),yrt=o("FlaxBertForMaskedLM"),xrt=o(" (BERT model)"),$rt=l(),TA=a("li"),LLe=a("strong"),krt=o("big_bird"),Srt=o(" \u2014 "),$te=a("a"),Rrt=o("FlaxBigBirdForMaskedLM"),Prt=o(" (BigBird model)"),Brt=l(),MA=a("li"),yLe=a("strong"),Irt=o("distilbert"),Nrt=o(" \u2014 "),kte=a("a"),qrt=o("FlaxDistilBertForMaskedLM"),jrt=o(" (DistilBERT model)"),Drt=l(),EA=a("li"),xLe=a("strong"),Grt=o("electra"),Ort=o(" \u2014 "),Ste=a("a"),Vrt=o("FlaxElectraForMaskedLM"),Xrt=o(" (ELECTRA model)"),zrt=l(),CA=a("li"),$Le=a("strong"),Wrt=o("mbart"),Qrt=o(" \u2014 "),Rte=a("a"),Urt=o("FlaxMBartForConditionalGeneration"),Hrt=o(" (mBART model)"),Jrt=l(),wA=a("li"),kLe=a("strong"),Yrt=o("roberta"),Krt=o(" \u2014 "),Pte=a("a"),Zrt=o("FlaxRobertaForMaskedLM"),ett=o(" (RoBERTa model)"),ott=l(),AA=a("li"),SLe=a("strong"),rtt=o("roformer"),ttt=o(" \u2014 "),Bte=a("a"),att=o("FlaxRoFormerForMaskedLM"),ntt=o(" (RoFormer model)"),stt=l(),LA=a("li"),RLe=a("strong"),ltt=o("xlm-roberta"),itt=o(" \u2014 "),Ite=a("a"),dtt=o("FlaxXLMRobertaForMaskedLM"),ctt=o(" (XLM-RoBERTa model)"),mtt=l(),F(yA.$$.fragment),pJe=l(),Lm=a("h2"),xA=a("a"),PLe=a("span"),F(rS.$$.fragment),ftt=l(),BLe=a("span"),gtt=o("FlaxAutoModelForSeq2SeqLM"),_Je=l(),Er=a("div"),F(tS.$$.fragment),htt=l(),ym=a("p"),utt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Nte=a("a"),ptt=o("from_pretrained()"),_tt=o(" class method or the "),qte=a("a"),btt=o("from_config()"),vtt=o(` class
method.`),Ftt=l(),aS=a("p"),Ttt=o("This class cannot be instantiated directly using "),ILe=a("code"),Mtt=o("__init__()"),Ett=o(" (throws an error)."),Ctt=l(),ta=a("div"),F(nS.$$.fragment),wtt=l(),NLe=a("p"),Att=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Ltt=l(),xm=a("p"),ytt=o(`Note:
Loading a model from its configuration file does `),qLe=a("strong"),xtt=o("not"),$tt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jte=a("a"),ktt=o("from_pretrained()"),Stt=o(" to load the model weights."),Rtt=l(),F($A.$$.fragment),Ptt=l(),Kr=a("div"),F(sS.$$.fragment),Btt=l(),jLe=a("p"),Itt=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ntt=l(),Bn=a("p"),qtt=o("The model class to instantiate is selected based on the "),DLe=a("code"),jtt=o("model_type"),Dtt=o(` property of the config object (either
passed as an argument or loaded from `),GLe=a("code"),Gtt=o("pretrained_model_name_or_path"),Ott=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OLe=a("code"),Vtt=o("pretrained_model_name_or_path"),Xtt=o(":"),ztt=l(),ke=a("ul"),kA=a("li"),VLe=a("strong"),Wtt=o("bart"),Qtt=o(" \u2014 "),Dte=a("a"),Utt=o("FlaxBartForConditionalGeneration"),Htt=o(" (BART model)"),Jtt=l(),SA=a("li"),XLe=a("strong"),Ytt=o("blenderbot"),Ktt=o(" \u2014 "),Gte=a("a"),Ztt=o("FlaxBlenderbotForConditionalGeneration"),eat=o(" (Blenderbot model)"),oat=l(),RA=a("li"),zLe=a("strong"),rat=o("blenderbot-small"),tat=o(" \u2014 "),Ote=a("a"),aat=o("FlaxBlenderbotSmallForConditionalGeneration"),nat=o(" (BlenderbotSmall model)"),sat=l(),PA=a("li"),WLe=a("strong"),lat=o("encoder-decoder"),iat=o(" \u2014 "),Vte=a("a"),dat=o("FlaxEncoderDecoderModel"),cat=o(" (Encoder decoder model)"),mat=l(),BA=a("li"),QLe=a("strong"),fat=o("longt5"),gat=o(" \u2014 "),Xte=a("a"),hat=o("FlaxLongT5ForConditionalGeneration"),uat=o(" (LongT5 model)"),pat=l(),IA=a("li"),ULe=a("strong"),_at=o("marian"),bat=o(" \u2014 "),zte=a("a"),vat=o("FlaxMarianMTModel"),Fat=o(" (Marian model)"),Tat=l(),NA=a("li"),HLe=a("strong"),Mat=o("mbart"),Eat=o(" \u2014 "),Wte=a("a"),Cat=o("FlaxMBartForConditionalGeneration"),wat=o(" (mBART model)"),Aat=l(),qA=a("li"),JLe=a("strong"),Lat=o("mt5"),yat=o(" \u2014 "),Qte=a("a"),xat=o("FlaxMT5ForConditionalGeneration"),$at=o(" (MT5 model)"),kat=l(),jA=a("li"),YLe=a("strong"),Sat=o("pegasus"),Rat=o(" \u2014 "),Ute=a("a"),Pat=o("FlaxPegasusForConditionalGeneration"),Bat=o(" (Pegasus model)"),Iat=l(),DA=a("li"),KLe=a("strong"),Nat=o("t5"),qat=o(" \u2014 "),Hte=a("a"),jat=o("FlaxT5ForConditionalGeneration"),Dat=o(" (T5 model)"),Gat=l(),F(GA.$$.fragment),bJe=l(),$m=a("h2"),OA=a("a"),ZLe=a("span"),F(lS.$$.fragment),Oat=l(),eye=a("span"),Vat=o("FlaxAutoModelForSequenceClassification"),vJe=l(),Cr=a("div"),F(iS.$$.fragment),Xat=l(),km=a("p"),zat=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Jte=a("a"),Wat=o("from_pretrained()"),Qat=o(" class method or the "),Yte=a("a"),Uat=o("from_config()"),Hat=o(` class
method.`),Jat=l(),dS=a("p"),Yat=o("This class cannot be instantiated directly using "),oye=a("code"),Kat=o("__init__()"),Zat=o(" (throws an error)."),ent=l(),aa=a("div"),F(cS.$$.fragment),ont=l(),rye=a("p"),rnt=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),tnt=l(),Sm=a("p"),ant=o(`Note:
Loading a model from its configuration file does `),tye=a("strong"),nnt=o("not"),snt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kte=a("a"),lnt=o("from_pretrained()"),int=o(" to load the model weights."),dnt=l(),F(VA.$$.fragment),cnt=l(),Zr=a("div"),F(mS.$$.fragment),mnt=l(),aye=a("p"),fnt=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),gnt=l(),In=a("p"),hnt=o("The model class to instantiate is selected based on the "),nye=a("code"),unt=o("model_type"),pnt=o(` property of the config object (either
passed as an argument or loaded from `),sye=a("code"),_nt=o("pretrained_model_name_or_path"),bnt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lye=a("code"),vnt=o("pretrained_model_name_or_path"),Fnt=o(":"),Tnt=l(),Se=a("ul"),XA=a("li"),iye=a("strong"),Mnt=o("albert"),Ent=o(" \u2014 "),Zte=a("a"),Cnt=o("FlaxAlbertForSequenceClassification"),wnt=o(" (ALBERT model)"),Ant=l(),zA=a("li"),dye=a("strong"),Lnt=o("bart"),ynt=o(" \u2014 "),eae=a("a"),xnt=o("FlaxBartForSequenceClassification"),$nt=o(" (BART model)"),knt=l(),WA=a("li"),cye=a("strong"),Snt=o("bert"),Rnt=o(" \u2014 "),oae=a("a"),Pnt=o("FlaxBertForSequenceClassification"),Bnt=o(" (BERT model)"),Int=l(),QA=a("li"),mye=a("strong"),Nnt=o("big_bird"),qnt=o(" \u2014 "),rae=a("a"),jnt=o("FlaxBigBirdForSequenceClassification"),Dnt=o(" (BigBird model)"),Gnt=l(),UA=a("li"),fye=a("strong"),Ont=o("distilbert"),Vnt=o(" \u2014 "),tae=a("a"),Xnt=o("FlaxDistilBertForSequenceClassification"),znt=o(" (DistilBERT model)"),Wnt=l(),HA=a("li"),gye=a("strong"),Qnt=o("electra"),Unt=o(" \u2014 "),aae=a("a"),Hnt=o("FlaxElectraForSequenceClassification"),Jnt=o(" (ELECTRA model)"),Ynt=l(),JA=a("li"),hye=a("strong"),Knt=o("mbart"),Znt=o(" \u2014 "),nae=a("a"),est=o("FlaxMBartForSequenceClassification"),ost=o(" (mBART model)"),rst=l(),YA=a("li"),uye=a("strong"),tst=o("roberta"),ast=o(" \u2014 "),sae=a("a"),nst=o("FlaxRobertaForSequenceClassification"),sst=o(" (RoBERTa model)"),lst=l(),KA=a("li"),pye=a("strong"),ist=o("roformer"),dst=o(" \u2014 "),lae=a("a"),cst=o("FlaxRoFormerForSequenceClassification"),mst=o(" (RoFormer model)"),fst=l(),ZA=a("li"),_ye=a("strong"),gst=o("xlm-roberta"),hst=o(" \u2014 "),iae=a("a"),ust=o("FlaxXLMRobertaForSequenceClassification"),pst=o(" (XLM-RoBERTa model)"),_st=l(),F(e7.$$.fragment),FJe=l(),Rm=a("h2"),o7=a("a"),bye=a("span"),F(fS.$$.fragment),bst=l(),vye=a("span"),vst=o("FlaxAutoModelForQuestionAnswering"),TJe=l(),wr=a("div"),F(gS.$$.fragment),Fst=l(),Pm=a("p"),Tst=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dae=a("a"),Mst=o("from_pretrained()"),Est=o(" class method or the "),cae=a("a"),Cst=o("from_config()"),wst=o(` class
method.`),Ast=l(),hS=a("p"),Lst=o("This class cannot be instantiated directly using "),Fye=a("code"),yst=o("__init__()"),xst=o(" (throws an error)."),$st=l(),na=a("div"),F(uS.$$.fragment),kst=l(),Tye=a("p"),Sst=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Rst=l(),Bm=a("p"),Pst=o(`Note:
Loading a model from its configuration file does `),Mye=a("strong"),Bst=o("not"),Ist=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mae=a("a"),Nst=o("from_pretrained()"),qst=o(" to load the model weights."),jst=l(),F(r7.$$.fragment),Dst=l(),et=a("div"),F(pS.$$.fragment),Gst=l(),Eye=a("p"),Ost=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Vst=l(),Nn=a("p"),Xst=o("The model class to instantiate is selected based on the "),Cye=a("code"),zst=o("model_type"),Wst=o(` property of the config object (either
passed as an argument or loaded from `),wye=a("code"),Qst=o("pretrained_model_name_or_path"),Ust=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aye=a("code"),Hst=o("pretrained_model_name_or_path"),Jst=o(":"),Yst=l(),Re=a("ul"),t7=a("li"),Lye=a("strong"),Kst=o("albert"),Zst=o(" \u2014 "),fae=a("a"),elt=o("FlaxAlbertForQuestionAnswering"),olt=o(" (ALBERT model)"),rlt=l(),a7=a("li"),yye=a("strong"),tlt=o("bart"),alt=o(" \u2014 "),gae=a("a"),nlt=o("FlaxBartForQuestionAnswering"),slt=o(" (BART model)"),llt=l(),n7=a("li"),xye=a("strong"),ilt=o("bert"),dlt=o(" \u2014 "),hae=a("a"),clt=o("FlaxBertForQuestionAnswering"),mlt=o(" (BERT model)"),flt=l(),s7=a("li"),$ye=a("strong"),glt=o("big_bird"),hlt=o(" \u2014 "),uae=a("a"),ult=o("FlaxBigBirdForQuestionAnswering"),plt=o(" (BigBird model)"),_lt=l(),l7=a("li"),kye=a("strong"),blt=o("distilbert"),vlt=o(" \u2014 "),pae=a("a"),Flt=o("FlaxDistilBertForQuestionAnswering"),Tlt=o(" (DistilBERT model)"),Mlt=l(),i7=a("li"),Sye=a("strong"),Elt=o("electra"),Clt=o(" \u2014 "),_ae=a("a"),wlt=o("FlaxElectraForQuestionAnswering"),Alt=o(" (ELECTRA model)"),Llt=l(),d7=a("li"),Rye=a("strong"),ylt=o("mbart"),xlt=o(" \u2014 "),bae=a("a"),$lt=o("FlaxMBartForQuestionAnswering"),klt=o(" (mBART model)"),Slt=l(),c7=a("li"),Pye=a("strong"),Rlt=o("roberta"),Plt=o(" \u2014 "),vae=a("a"),Blt=o("FlaxRobertaForQuestionAnswering"),Ilt=o(" (RoBERTa model)"),Nlt=l(),m7=a("li"),Bye=a("strong"),qlt=o("roformer"),jlt=o(" \u2014 "),Fae=a("a"),Dlt=o("FlaxRoFormerForQuestionAnswering"),Glt=o(" (RoFormer model)"),Olt=l(),f7=a("li"),Iye=a("strong"),Vlt=o("xlm-roberta"),Xlt=o(" \u2014 "),Tae=a("a"),zlt=o("FlaxXLMRobertaForQuestionAnswering"),Wlt=o(" (XLM-RoBERTa model)"),Qlt=l(),F(g7.$$.fragment),MJe=l(),Im=a("h2"),h7=a("a"),Nye=a("span"),F(_S.$$.fragment),Ult=l(),qye=a("span"),Hlt=o("FlaxAutoModelForTokenClassification"),EJe=l(),Ar=a("div"),F(bS.$$.fragment),Jlt=l(),Nm=a("p"),Ylt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Mae=a("a"),Klt=o("from_pretrained()"),Zlt=o(" class method or the "),Eae=a("a"),eit=o("from_config()"),oit=o(` class
method.`),rit=l(),vS=a("p"),tit=o("This class cannot be instantiated directly using "),jye=a("code"),ait=o("__init__()"),nit=o(" (throws an error)."),sit=l(),sa=a("div"),F(FS.$$.fragment),lit=l(),Dye=a("p"),iit=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),dit=l(),qm=a("p"),cit=o(`Note:
Loading a model from its configuration file does `),Gye=a("strong"),mit=o("not"),fit=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cae=a("a"),git=o("from_pretrained()"),hit=o(" to load the model weights."),uit=l(),F(u7.$$.fragment),pit=l(),ot=a("div"),F(TS.$$.fragment),_it=l(),Oye=a("p"),bit=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),vit=l(),qn=a("p"),Fit=o("The model class to instantiate is selected based on the "),Vye=a("code"),Tit=o("model_type"),Mit=o(` property of the config object (either
passed as an argument or loaded from `),Xye=a("code"),Eit=o("pretrained_model_name_or_path"),Cit=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zye=a("code"),wit=o("pretrained_model_name_or_path"),Ait=o(":"),Lit=l(),Xe=a("ul"),p7=a("li"),Wye=a("strong"),yit=o("albert"),xit=o(" \u2014 "),wae=a("a"),$it=o("FlaxAlbertForTokenClassification"),kit=o(" (ALBERT model)"),Sit=l(),_7=a("li"),Qye=a("strong"),Rit=o("bert"),Pit=o(" \u2014 "),Aae=a("a"),Bit=o("FlaxBertForTokenClassification"),Iit=o(" (BERT model)"),Nit=l(),b7=a("li"),Uye=a("strong"),qit=o("big_bird"),jit=o(" \u2014 "),Lae=a("a"),Dit=o("FlaxBigBirdForTokenClassification"),Git=o(" (BigBird model)"),Oit=l(),v7=a("li"),Hye=a("strong"),Vit=o("distilbert"),Xit=o(" \u2014 "),yae=a("a"),zit=o("FlaxDistilBertForTokenClassification"),Wit=o(" (DistilBERT model)"),Qit=l(),F7=a("li"),Jye=a("strong"),Uit=o("electra"),Hit=o(" \u2014 "),xae=a("a"),Jit=o("FlaxElectraForTokenClassification"),Yit=o(" (ELECTRA model)"),Kit=l(),T7=a("li"),Yye=a("strong"),Zit=o("roberta"),edt=o(" \u2014 "),$ae=a("a"),odt=o("FlaxRobertaForTokenClassification"),rdt=o(" (RoBERTa model)"),tdt=l(),M7=a("li"),Kye=a("strong"),adt=o("roformer"),ndt=o(" \u2014 "),kae=a("a"),sdt=o("FlaxRoFormerForTokenClassification"),ldt=o(" (RoFormer model)"),idt=l(),E7=a("li"),Zye=a("strong"),ddt=o("xlm-roberta"),cdt=o(" \u2014 "),Sae=a("a"),mdt=o("FlaxXLMRobertaForTokenClassification"),fdt=o(" (XLM-RoBERTa model)"),gdt=l(),F(C7.$$.fragment),CJe=l(),jm=a("h2"),w7=a("a"),e8e=a("span"),F(MS.$$.fragment),hdt=l(),o8e=a("span"),udt=o("FlaxAutoModelForMultipleChoice"),wJe=l(),Lr=a("div"),F(ES.$$.fragment),pdt=l(),Dm=a("p"),_dt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Rae=a("a"),bdt=o("from_pretrained()"),vdt=o(" class method or the "),Pae=a("a"),Fdt=o("from_config()"),Tdt=o(` class
method.`),Mdt=l(),CS=a("p"),Edt=o("This class cannot be instantiated directly using "),r8e=a("code"),Cdt=o("__init__()"),wdt=o(" (throws an error)."),Adt=l(),la=a("div"),F(wS.$$.fragment),Ldt=l(),t8e=a("p"),ydt=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),xdt=l(),Gm=a("p"),$dt=o(`Note:
Loading a model from its configuration file does `),a8e=a("strong"),kdt=o("not"),Sdt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bae=a("a"),Rdt=o("from_pretrained()"),Pdt=o(" to load the model weights."),Bdt=l(),F(A7.$$.fragment),Idt=l(),rt=a("div"),F(AS.$$.fragment),Ndt=l(),n8e=a("p"),qdt=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),jdt=l(),jn=a("p"),Ddt=o("The model class to instantiate is selected based on the "),s8e=a("code"),Gdt=o("model_type"),Odt=o(` property of the config object (either
passed as an argument or loaded from `),l8e=a("code"),Vdt=o("pretrained_model_name_or_path"),Xdt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i8e=a("code"),zdt=o("pretrained_model_name_or_path"),Wdt=o(":"),Qdt=l(),ze=a("ul"),L7=a("li"),d8e=a("strong"),Udt=o("albert"),Hdt=o(" \u2014 "),Iae=a("a"),Jdt=o("FlaxAlbertForMultipleChoice"),Ydt=o(" (ALBERT model)"),Kdt=l(),y7=a("li"),c8e=a("strong"),Zdt=o("bert"),ect=o(" \u2014 "),Nae=a("a"),oct=o("FlaxBertForMultipleChoice"),rct=o(" (BERT model)"),tct=l(),x7=a("li"),m8e=a("strong"),act=o("big_bird"),nct=o(" \u2014 "),qae=a("a"),sct=o("FlaxBigBirdForMultipleChoice"),lct=o(" (BigBird model)"),ict=l(),$7=a("li"),f8e=a("strong"),dct=o("distilbert"),cct=o(" \u2014 "),jae=a("a"),mct=o("FlaxDistilBertForMultipleChoice"),fct=o(" (DistilBERT model)"),gct=l(),k7=a("li"),g8e=a("strong"),hct=o("electra"),uct=o(" \u2014 "),Dae=a("a"),pct=o("FlaxElectraForMultipleChoice"),_ct=o(" (ELECTRA model)"),bct=l(),S7=a("li"),h8e=a("strong"),vct=o("roberta"),Fct=o(" \u2014 "),Gae=a("a"),Tct=o("FlaxRobertaForMultipleChoice"),Mct=o(" (RoBERTa model)"),Ect=l(),R7=a("li"),u8e=a("strong"),Cct=o("roformer"),wct=o(" \u2014 "),Oae=a("a"),Act=o("FlaxRoFormerForMultipleChoice"),Lct=o(" (RoFormer model)"),yct=l(),P7=a("li"),p8e=a("strong"),xct=o("xlm-roberta"),$ct=o(" \u2014 "),Vae=a("a"),kct=o("FlaxXLMRobertaForMultipleChoice"),Sct=o(" (XLM-RoBERTa model)"),Rct=l(),F(B7.$$.fragment),AJe=l(),Om=a("h2"),I7=a("a"),_8e=a("span"),F(LS.$$.fragment),Pct=l(),b8e=a("span"),Bct=o("FlaxAutoModelForNextSentencePrediction"),LJe=l(),yr=a("div"),F(yS.$$.fragment),Ict=l(),Vm=a("p"),Nct=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Xae=a("a"),qct=o("from_pretrained()"),jct=o(" class method or the "),zae=a("a"),Dct=o("from_config()"),Gct=o(` class
method.`),Oct=l(),xS=a("p"),Vct=o("This class cannot be instantiated directly using "),v8e=a("code"),Xct=o("__init__()"),zct=o(" (throws an error)."),Wct=l(),ia=a("div"),F($S.$$.fragment),Qct=l(),F8e=a("p"),Uct=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Hct=l(),Xm=a("p"),Jct=o(`Note:
Loading a model from its configuration file does `),T8e=a("strong"),Yct=o("not"),Kct=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wae=a("a"),Zct=o("from_pretrained()"),emt=o(" to load the model weights."),omt=l(),F(N7.$$.fragment),rmt=l(),tt=a("div"),F(kS.$$.fragment),tmt=l(),M8e=a("p"),amt=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),nmt=l(),Dn=a("p"),smt=o("The model class to instantiate is selected based on the "),E8e=a("code"),lmt=o("model_type"),imt=o(` property of the config object (either
passed as an argument or loaded from `),C8e=a("code"),dmt=o("pretrained_model_name_or_path"),cmt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w8e=a("code"),mmt=o("pretrained_model_name_or_path"),fmt=o(":"),gmt=l(),A8e=a("ul"),q7=a("li"),L8e=a("strong"),hmt=o("bert"),umt=o(" \u2014 "),Qae=a("a"),pmt=o("FlaxBertForNextSentencePrediction"),_mt=o(" (BERT model)"),bmt=l(),F(j7.$$.fragment),yJe=l(),zm=a("h2"),D7=a("a"),y8e=a("span"),F(SS.$$.fragment),vmt=l(),x8e=a("span"),Fmt=o("FlaxAutoModelForImageClassification"),xJe=l(),xr=a("div"),F(RS.$$.fragment),Tmt=l(),Wm=a("p"),Mmt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Uae=a("a"),Emt=o("from_pretrained()"),Cmt=o(" class method or the "),Hae=a("a"),wmt=o("from_config()"),Amt=o(` class
method.`),Lmt=l(),PS=a("p"),ymt=o("This class cannot be instantiated directly using "),$8e=a("code"),xmt=o("__init__()"),$mt=o(" (throws an error)."),kmt=l(),da=a("div"),F(BS.$$.fragment),Smt=l(),k8e=a("p"),Rmt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Pmt=l(),Qm=a("p"),Bmt=o(`Note:
Loading a model from its configuration file does `),S8e=a("strong"),Imt=o("not"),Nmt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jae=a("a"),qmt=o("from_pretrained()"),jmt=o(" to load the model weights."),Dmt=l(),F(G7.$$.fragment),Gmt=l(),at=a("div"),F(IS.$$.fragment),Omt=l(),R8e=a("p"),Vmt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Xmt=l(),Gn=a("p"),zmt=o("The model class to instantiate is selected based on the "),P8e=a("code"),Wmt=o("model_type"),Qmt=o(` property of the config object (either
passed as an argument or loaded from `),B8e=a("code"),Umt=o("pretrained_model_name_or_path"),Hmt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I8e=a("code"),Jmt=o("pretrained_model_name_or_path"),Ymt=o(":"),Kmt=l(),NS=a("ul"),O7=a("li"),N8e=a("strong"),Zmt=o("beit"),eft=o(" \u2014 "),Yae=a("a"),oft=o("FlaxBeitForImageClassification"),rft=o(" (BEiT model)"),tft=l(),V7=a("li"),q8e=a("strong"),aft=o("vit"),nft=o(" \u2014 "),Kae=a("a"),sft=o("FlaxViTForImageClassification"),lft=o(" (ViT model)"),ift=l(),F(X7.$$.fragment),$Je=l(),Um=a("h2"),z7=a("a"),j8e=a("span"),F(qS.$$.fragment),dft=l(),D8e=a("span"),cft=o("FlaxAutoModelForVision2Seq"),kJe=l(),$r=a("div"),F(jS.$$.fragment),mft=l(),Hm=a("p"),fft=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Zae=a("a"),gft=o("from_pretrained()"),hft=o(" class method or the "),ene=a("a"),uft=o("from_config()"),pft=o(` class
method.`),_ft=l(),DS=a("p"),bft=o("This class cannot be instantiated directly using "),G8e=a("code"),vft=o("__init__()"),Fft=o(" (throws an error)."),Tft=l(),ca=a("div"),F(GS.$$.fragment),Mft=l(),O8e=a("p"),Eft=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Cft=l(),Jm=a("p"),wft=o(`Note:
Loading a model from its configuration file does `),V8e=a("strong"),Aft=o("not"),Lft=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),one=a("a"),yft=o("from_pretrained()"),xft=o(" to load the model weights."),$ft=l(),F(W7.$$.fragment),kft=l(),nt=a("div"),F(OS.$$.fragment),Sft=l(),X8e=a("p"),Rft=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Pft=l(),On=a("p"),Bft=o("The model class to instantiate is selected based on the "),z8e=a("code"),Ift=o("model_type"),Nft=o(` property of the config object (either
passed as an argument or loaded from `),W8e=a("code"),qft=o("pretrained_model_name_or_path"),jft=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q8e=a("code"),Dft=o("pretrained_model_name_or_path"),Gft=o(":"),Oft=l(),U8e=a("ul"),Q7=a("li"),H8e=a("strong"),Vft=o("vision-encoder-decoder"),Xft=o(" \u2014 "),rne=a("a"),zft=o("FlaxVisionEncoderDecoderModel"),Wft=o(" (Vision Encoder decoder model)"),Qft=l(),F(U7.$$.fragment),this.h()},l(m){const _=Laa('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(m),u=n(m,"H1",{class:!0});var VS=s(u);f=n(VS,"A",{id:!0,class:!0,href:!0});var J8e=s(f);p=n(J8e,"SPAN",{});var Y8e=s(p);T(d.$$.fragment,Y8e),Y8e.forEach(t),J8e.forEach(t),h=i(VS),Ao=n(VS,"SPAN",{});var K8e=s(Ao);Oi=r(K8e,"Auto Classes"),K8e.forEach(t),VS.forEach(t),ef=i(m),mt=n(m,"P",{});var XS=s(mt);Vi=r(XS,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Xi=n(XS,"CODE",{});var Z8e=s(Xi);v8=r(Z8e,"from_pretrained()"),Z8e.forEach(t),of=r(XS,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),XS.forEach(t),Ve=i(m),Ue=n(m,"P",{});var Vn=s(Ue);zi=r(Vn,"Instantiating one of "),Xn=n(Vn,"A",{href:!0});var e9e=s(Xn);F8=r(e9e,"AutoConfig"),e9e.forEach(t),zn=r(Vn,", "),Wn=n(Vn,"A",{href:!0});var o9e=s(Wn);T8=r(o9e,"AutoModel"),o9e.forEach(t),Wi=r(Vn,`, and
`),Qn=n(Vn,"A",{href:!0});var r9e=s(Qn);M8=r(r9e,"AutoTokenizer"),r9e.forEach(t),Qi=r(Vn," will directly create a class of the relevant architecture. For instance"),Vn.forEach(t),rf=i(m),T(ja.$$.fragment,m),He=i(m),Ae=n(m,"P",{});var zS=s(Ae);fP=r(zS,"will create a model that is an instance of "),Ui=n(zS,"A",{href:!0});var t9e=s(Ui);gP=r(t9e,"BertModel"),t9e.forEach(t),hP=r(zS,"."),zS.forEach(t),Lo=i(m),Da=n(m,"P",{});var WS=s(Da);uP=r(WS,"There is one class of "),tf=n(WS,"CODE",{});var a9e=s(tf);pP=r(a9e,"AutoModel"),a9e.forEach(t),WKe=r(WS," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),WS.forEach(t),EUe=i(m),Hi=n(m,"H2",{class:!0});var QS=s(Hi);af=n(QS,"A",{id:!0,class:!0,href:!0});var n9e=s(af);ole=n(n9e,"SPAN",{});var s9e=s(ole);T(E8.$$.fragment,s9e),s9e.forEach(t),n9e.forEach(t),QKe=i(QS),rle=n(QS,"SPAN",{});var l9e=s(rle);UKe=r(l9e,"Extending the Auto Classes"),l9e.forEach(t),QS.forEach(t),CUe=i(m),Un=n(m,"P",{});var Ym=s(Un);HKe=r(Ym,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),tle=n(Ym,"CODE",{});var i9e=s(tle);JKe=r(i9e,"NewModel"),i9e.forEach(t),YKe=r(Ym,", make sure you have a "),ale=n(Ym,"CODE",{});var d9e=s(ale);KKe=r(d9e,"NewModelConfig"),d9e.forEach(t),ZKe=r(Ym,` then you can add those to the auto
classes like this:`),Ym.forEach(t),wUe=i(m),T(C8.$$.fragment,m),AUe=i(m),_P=n(m,"P",{});var c9e=s(_P);eZe=r(c9e,"You will then be able to use the auto classes like you would usually do!"),c9e.forEach(t),LUe=i(m),T(nf.$$.fragment,m),yUe=i(m),Ji=n(m,"H2",{class:!0});var US=s(Ji);sf=n(US,"A",{id:!0,class:!0,href:!0});var m9e=s(sf);nle=n(m9e,"SPAN",{});var f9e=s(nle);T(w8.$$.fragment,f9e),f9e.forEach(t),m9e.forEach(t),oZe=i(US),sle=n(US,"SPAN",{});var g9e=s(sle);rZe=r(g9e,"AutoConfig"),g9e.forEach(t),US.forEach(t),xUe=i(m),yo=n(m,"DIV",{class:!0});var dt=s(yo);T(A8.$$.fragment,dt),tZe=i(dt),L8=n(dt,"P",{});var HS=s(L8);aZe=r(HS,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),bP=n(HS,"A",{href:!0});var h9e=s(bP);nZe=r(h9e,"from_pretrained()"),h9e.forEach(t),sZe=r(HS," class method."),HS.forEach(t),lZe=i(dt),y8=n(dt,"P",{});var JS=s(y8);iZe=r(JS,"This class cannot be instantiated directly using "),lle=n(JS,"CODE",{});var u9e=s(lle);dZe=r(u9e,"__init__()"),u9e.forEach(t),cZe=r(JS," (throws an error)."),JS.forEach(t),mZe=i(dt),kr=n(dt,"DIV",{class:!0});var ct=s(kr);T(x8.$$.fragment,ct),fZe=i(ct),ile=n(ct,"P",{});var p9e=s(ile);gZe=r(p9e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),p9e.forEach(t),hZe=i(ct),Yi=n(ct,"P",{});var Km=s(Yi);uZe=r(Km,"The configuration class to instantiate is selected based on the "),dle=n(Km,"CODE",{});var _9e=s(dle);pZe=r(_9e,"model_type"),_9e.forEach(t),_Ze=r(Km,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),cle=n(Km,"CODE",{});var b9e=s(cle);bZe=r(b9e,"pretrained_model_name_or_path"),b9e.forEach(t),vZe=r(Km,":"),Km.forEach(t),FZe=i(ct),A=n(ct,"UL",{});var L=s(A);lf=n(L,"LI",{});var H7=s(lf);mle=n(H7,"STRONG",{});var v9e=s(mle);TZe=r(v9e,"albert"),v9e.forEach(t),MZe=r(H7," \u2014 "),vP=n(H7,"A",{href:!0});var F9e=s(vP);EZe=r(F9e,"AlbertConfig"),F9e.forEach(t),CZe=r(H7," (ALBERT model)"),H7.forEach(t),wZe=i(L),df=n(L,"LI",{});var J7=s(df);fle=n(J7,"STRONG",{});var T9e=s(fle);AZe=r(T9e,"bart"),T9e.forEach(t),LZe=r(J7," \u2014 "),FP=n(J7,"A",{href:!0});var M9e=s(FP);yZe=r(M9e,"BartConfig"),M9e.forEach(t),xZe=r(J7," (BART model)"),J7.forEach(t),$Ze=i(L),cf=n(L,"LI",{});var Y7=s(cf);gle=n(Y7,"STRONG",{});var E9e=s(gle);kZe=r(E9e,"beit"),E9e.forEach(t),SZe=r(Y7," \u2014 "),TP=n(Y7,"A",{href:!0});var C9e=s(TP);RZe=r(C9e,"BeitConfig"),C9e.forEach(t),PZe=r(Y7," (BEiT model)"),Y7.forEach(t),BZe=i(L),mf=n(L,"LI",{});var K7=s(mf);hle=n(K7,"STRONG",{});var w9e=s(hle);IZe=r(w9e,"bert"),w9e.forEach(t),NZe=r(K7," \u2014 "),MP=n(K7,"A",{href:!0});var A9e=s(MP);qZe=r(A9e,"BertConfig"),A9e.forEach(t),jZe=r(K7," (BERT model)"),K7.forEach(t),DZe=i(L),ff=n(L,"LI",{});var Z7=s(ff);ule=n(Z7,"STRONG",{});var L9e=s(ule);GZe=r(L9e,"bert-generation"),L9e.forEach(t),OZe=r(Z7," \u2014 "),EP=n(Z7,"A",{href:!0});var y9e=s(EP);VZe=r(y9e,"BertGenerationConfig"),y9e.forEach(t),XZe=r(Z7," (Bert Generation model)"),Z7.forEach(t),zZe=i(L),gf=n(L,"LI",{});var eL=s(gf);ple=n(eL,"STRONG",{});var x9e=s(ple);WZe=r(x9e,"big_bird"),x9e.forEach(t),QZe=r(eL," \u2014 "),CP=n(eL,"A",{href:!0});var $9e=s(CP);UZe=r($9e,"BigBirdConfig"),$9e.forEach(t),HZe=r(eL," (BigBird model)"),eL.forEach(t),JZe=i(L),hf=n(L,"LI",{});var oL=s(hf);_le=n(oL,"STRONG",{});var k9e=s(_le);YZe=r(k9e,"bigbird_pegasus"),k9e.forEach(t),KZe=r(oL," \u2014 "),wP=n(oL,"A",{href:!0});var S9e=s(wP);ZZe=r(S9e,"BigBirdPegasusConfig"),S9e.forEach(t),eeo=r(oL," (BigBird-Pegasus model)"),oL.forEach(t),oeo=i(L),uf=n(L,"LI",{});var rL=s(uf);ble=n(rL,"STRONG",{});var R9e=s(ble);reo=r(R9e,"blenderbot"),R9e.forEach(t),teo=r(rL," \u2014 "),AP=n(rL,"A",{href:!0});var P9e=s(AP);aeo=r(P9e,"BlenderbotConfig"),P9e.forEach(t),neo=r(rL," (Blenderbot model)"),rL.forEach(t),seo=i(L),pf=n(L,"LI",{});var tL=s(pf);vle=n(tL,"STRONG",{});var B9e=s(vle);leo=r(B9e,"blenderbot-small"),B9e.forEach(t),ieo=r(tL," \u2014 "),LP=n(tL,"A",{href:!0});var I9e=s(LP);deo=r(I9e,"BlenderbotSmallConfig"),I9e.forEach(t),ceo=r(tL," (BlenderbotSmall model)"),tL.forEach(t),meo=i(L),_f=n(L,"LI",{});var aL=s(_f);Fle=n(aL,"STRONG",{});var N9e=s(Fle);feo=r(N9e,"bloom"),N9e.forEach(t),geo=r(aL," \u2014 "),yP=n(aL,"A",{href:!0});var q9e=s(yP);heo=r(q9e,"BloomConfig"),q9e.forEach(t),ueo=r(aL," (BLOOM model)"),aL.forEach(t),peo=i(L),bf=n(L,"LI",{});var nL=s(bf);Tle=n(nL,"STRONG",{});var j9e=s(Tle);_eo=r(j9e,"camembert"),j9e.forEach(t),beo=r(nL," \u2014 "),xP=n(nL,"A",{href:!0});var D9e=s(xP);veo=r(D9e,"CamembertConfig"),D9e.forEach(t),Feo=r(nL," (CamemBERT model)"),nL.forEach(t),Teo=i(L),vf=n(L,"LI",{});var sL=s(vf);Mle=n(sL,"STRONG",{});var G9e=s(Mle);Meo=r(G9e,"canine"),G9e.forEach(t),Eeo=r(sL," \u2014 "),$P=n(sL,"A",{href:!0});var O9e=s($P);Ceo=r(O9e,"CanineConfig"),O9e.forEach(t),weo=r(sL," (CANINE model)"),sL.forEach(t),Aeo=i(L),Ff=n(L,"LI",{});var lL=s(Ff);Ele=n(lL,"STRONG",{});var V9e=s(Ele);Leo=r(V9e,"clip"),V9e.forEach(t),yeo=r(lL," \u2014 "),kP=n(lL,"A",{href:!0});var X9e=s(kP);xeo=r(X9e,"CLIPConfig"),X9e.forEach(t),$eo=r(lL," (CLIP model)"),lL.forEach(t),keo=i(L),Tf=n(L,"LI",{});var iL=s(Tf);Cle=n(iL,"STRONG",{});var z9e=s(Cle);Seo=r(z9e,"codegen"),z9e.forEach(t),Reo=r(iL," \u2014 "),SP=n(iL,"A",{href:!0});var W9e=s(SP);Peo=r(W9e,"CodeGenConfig"),W9e.forEach(t),Beo=r(iL," (CodeGen model)"),iL.forEach(t),Ieo=i(L),Mf=n(L,"LI",{});var dL=s(Mf);wle=n(dL,"STRONG",{});var Q9e=s(wle);Neo=r(Q9e,"convbert"),Q9e.forEach(t),qeo=r(dL," \u2014 "),RP=n(dL,"A",{href:!0});var U9e=s(RP);jeo=r(U9e,"ConvBertConfig"),U9e.forEach(t),Deo=r(dL," (ConvBERT model)"),dL.forEach(t),Geo=i(L),Ef=n(L,"LI",{});var cL=s(Ef);Ale=n(cL,"STRONG",{});var H9e=s(Ale);Oeo=r(H9e,"convnext"),H9e.forEach(t),Veo=r(cL," \u2014 "),PP=n(cL,"A",{href:!0});var J9e=s(PP);Xeo=r(J9e,"ConvNextConfig"),J9e.forEach(t),zeo=r(cL," (ConvNeXT model)"),cL.forEach(t),Weo=i(L),Cf=n(L,"LI",{});var mL=s(Cf);Lle=n(mL,"STRONG",{});var Y9e=s(Lle);Qeo=r(Y9e,"ctrl"),Y9e.forEach(t),Ueo=r(mL," \u2014 "),BP=n(mL,"A",{href:!0});var K9e=s(BP);Heo=r(K9e,"CTRLConfig"),K9e.forEach(t),Jeo=r(mL," (CTRL model)"),mL.forEach(t),Yeo=i(L),wf=n(L,"LI",{});var fL=s(wf);yle=n(fL,"STRONG",{});var Z9e=s(yle);Keo=r(Z9e,"cvt"),Z9e.forEach(t),Zeo=r(fL," \u2014 "),IP=n(fL,"A",{href:!0});var exe=s(IP);eoo=r(exe,"CvtConfig"),exe.forEach(t),ooo=r(fL," (CvT model)"),fL.forEach(t),roo=i(L),Af=n(L,"LI",{});var gL=s(Af);xle=n(gL,"STRONG",{});var oxe=s(xle);too=r(oxe,"data2vec-audio"),oxe.forEach(t),aoo=r(gL," \u2014 "),NP=n(gL,"A",{href:!0});var rxe=s(NP);noo=r(rxe,"Data2VecAudioConfig"),rxe.forEach(t),soo=r(gL," (Data2VecAudio model)"),gL.forEach(t),loo=i(L),Lf=n(L,"LI",{});var hL=s(Lf);$le=n(hL,"STRONG",{});var txe=s($le);ioo=r(txe,"data2vec-text"),txe.forEach(t),doo=r(hL," \u2014 "),qP=n(hL,"A",{href:!0});var axe=s(qP);coo=r(axe,"Data2VecTextConfig"),axe.forEach(t),moo=r(hL," (Data2VecText model)"),hL.forEach(t),foo=i(L),yf=n(L,"LI",{});var uL=s(yf);kle=n(uL,"STRONG",{});var nxe=s(kle);goo=r(nxe,"data2vec-vision"),nxe.forEach(t),hoo=r(uL," \u2014 "),jP=n(uL,"A",{href:!0});var sxe=s(jP);uoo=r(sxe,"Data2VecVisionConfig"),sxe.forEach(t),poo=r(uL," (Data2VecVision model)"),uL.forEach(t),_oo=i(L),xf=n(L,"LI",{});var pL=s(xf);Sle=n(pL,"STRONG",{});var lxe=s(Sle);boo=r(lxe,"deberta"),lxe.forEach(t),voo=r(pL," \u2014 "),DP=n(pL,"A",{href:!0});var ixe=s(DP);Foo=r(ixe,"DebertaConfig"),ixe.forEach(t),Too=r(pL," (DeBERTa model)"),pL.forEach(t),Moo=i(L),$f=n(L,"LI",{});var _L=s($f);Rle=n(_L,"STRONG",{});var dxe=s(Rle);Eoo=r(dxe,"deberta-v2"),dxe.forEach(t),Coo=r(_L," \u2014 "),GP=n(_L,"A",{href:!0});var cxe=s(GP);woo=r(cxe,"DebertaV2Config"),cxe.forEach(t),Aoo=r(_L," (DeBERTa-v2 model)"),_L.forEach(t),Loo=i(L),kf=n(L,"LI",{});var bL=s(kf);Ple=n(bL,"STRONG",{});var mxe=s(Ple);yoo=r(mxe,"decision_transformer"),mxe.forEach(t),xoo=r(bL," \u2014 "),OP=n(bL,"A",{href:!0});var fxe=s(OP);$oo=r(fxe,"DecisionTransformerConfig"),fxe.forEach(t),koo=r(bL," (Decision Transformer model)"),bL.forEach(t),Soo=i(L),Sf=n(L,"LI",{});var vL=s(Sf);Ble=n(vL,"STRONG",{});var gxe=s(Ble);Roo=r(gxe,"deit"),gxe.forEach(t),Poo=r(vL," \u2014 "),VP=n(vL,"A",{href:!0});var Hft=s(VP);Boo=r(Hft,"DeiTConfig"),Hft.forEach(t),Ioo=r(vL," (DeiT model)"),vL.forEach(t),Noo=i(L),Rf=n(L,"LI",{});var hxe=s(Rf);Ile=n(hxe,"STRONG",{});var Jft=s(Ile);qoo=r(Jft,"detr"),Jft.forEach(t),joo=r(hxe," \u2014 "),XP=n(hxe,"A",{href:!0});var Yft=s(XP);Doo=r(Yft,"DetrConfig"),Yft.forEach(t),Goo=r(hxe," (DETR model)"),hxe.forEach(t),Ooo=i(L),Pf=n(L,"LI",{});var uxe=s(Pf);Nle=n(uxe,"STRONG",{});var Kft=s(Nle);Voo=r(Kft,"distilbert"),Kft.forEach(t),Xoo=r(uxe," \u2014 "),zP=n(uxe,"A",{href:!0});var Zft=s(zP);zoo=r(Zft,"DistilBertConfig"),Zft.forEach(t),Woo=r(uxe," (DistilBERT model)"),uxe.forEach(t),Qoo=i(L),Bf=n(L,"LI",{});var pxe=s(Bf);qle=n(pxe,"STRONG",{});var egt=s(qle);Uoo=r(egt,"donut-swin"),egt.forEach(t),Hoo=r(pxe," \u2014 "),WP=n(pxe,"A",{href:!0});var ogt=s(WP);Joo=r(ogt,"DonutSwinConfig"),ogt.forEach(t),Yoo=r(pxe," (DonutSwin model)"),pxe.forEach(t),Koo=i(L),If=n(L,"LI",{});var _xe=s(If);jle=n(_xe,"STRONG",{});var rgt=s(jle);Zoo=r(rgt,"dpr"),rgt.forEach(t),ero=r(_xe," \u2014 "),QP=n(_xe,"A",{href:!0});var tgt=s(QP);oro=r(tgt,"DPRConfig"),tgt.forEach(t),rro=r(_xe," (DPR model)"),_xe.forEach(t),tro=i(L),Nf=n(L,"LI",{});var bxe=s(Nf);Dle=n(bxe,"STRONG",{});var agt=s(Dle);aro=r(agt,"dpt"),agt.forEach(t),nro=r(bxe," \u2014 "),UP=n(bxe,"A",{href:!0});var ngt=s(UP);sro=r(ngt,"DPTConfig"),ngt.forEach(t),lro=r(bxe," (DPT model)"),bxe.forEach(t),iro=i(L),qf=n(L,"LI",{});var vxe=s(qf);Gle=n(vxe,"STRONG",{});var sgt=s(Gle);dro=r(sgt,"electra"),sgt.forEach(t),cro=r(vxe," \u2014 "),HP=n(vxe,"A",{href:!0});var lgt=s(HP);mro=r(lgt,"ElectraConfig"),lgt.forEach(t),fro=r(vxe," (ELECTRA model)"),vxe.forEach(t),gro=i(L),jf=n(L,"LI",{});var Fxe=s(jf);Ole=n(Fxe,"STRONG",{});var igt=s(Ole);hro=r(igt,"encoder-decoder"),igt.forEach(t),uro=r(Fxe," \u2014 "),JP=n(Fxe,"A",{href:!0});var dgt=s(JP);pro=r(dgt,"EncoderDecoderConfig"),dgt.forEach(t),_ro=r(Fxe," (Encoder decoder model)"),Fxe.forEach(t),bro=i(L),Df=n(L,"LI",{});var Txe=s(Df);Vle=n(Txe,"STRONG",{});var cgt=s(Vle);vro=r(cgt,"flaubert"),cgt.forEach(t),Fro=r(Txe," \u2014 "),YP=n(Txe,"A",{href:!0});var mgt=s(YP);Tro=r(mgt,"FlaubertConfig"),mgt.forEach(t),Mro=r(Txe," (FlauBERT model)"),Txe.forEach(t),Ero=i(L),Gf=n(L,"LI",{});var Mxe=s(Gf);Xle=n(Mxe,"STRONG",{});var fgt=s(Xle);Cro=r(fgt,"flava"),fgt.forEach(t),wro=r(Mxe," \u2014 "),KP=n(Mxe,"A",{href:!0});var ggt=s(KP);Aro=r(ggt,"FlavaConfig"),ggt.forEach(t),Lro=r(Mxe," (FLAVA model)"),Mxe.forEach(t),yro=i(L),Of=n(L,"LI",{});var Exe=s(Of);zle=n(Exe,"STRONG",{});var hgt=s(zle);xro=r(hgt,"fnet"),hgt.forEach(t),$ro=r(Exe," \u2014 "),ZP=n(Exe,"A",{href:!0});var ugt=s(ZP);kro=r(ugt,"FNetConfig"),ugt.forEach(t),Sro=r(Exe," (FNet model)"),Exe.forEach(t),Rro=i(L),Vf=n(L,"LI",{});var Cxe=s(Vf);Wle=n(Cxe,"STRONG",{});var pgt=s(Wle);Pro=r(pgt,"fsmt"),pgt.forEach(t),Bro=r(Cxe," \u2014 "),eB=n(Cxe,"A",{href:!0});var _gt=s(eB);Iro=r(_gt,"FSMTConfig"),_gt.forEach(t),Nro=r(Cxe," (FairSeq Machine-Translation model)"),Cxe.forEach(t),qro=i(L),Xf=n(L,"LI",{});var wxe=s(Xf);Qle=n(wxe,"STRONG",{});var bgt=s(Qle);jro=r(bgt,"funnel"),bgt.forEach(t),Dro=r(wxe," \u2014 "),oB=n(wxe,"A",{href:!0});var vgt=s(oB);Gro=r(vgt,"FunnelConfig"),vgt.forEach(t),Oro=r(wxe," (Funnel Transformer model)"),wxe.forEach(t),Vro=i(L),zf=n(L,"LI",{});var Axe=s(zf);Ule=n(Axe,"STRONG",{});var Fgt=s(Ule);Xro=r(Fgt,"glpn"),Fgt.forEach(t),zro=r(Axe," \u2014 "),rB=n(Axe,"A",{href:!0});var Tgt=s(rB);Wro=r(Tgt,"GLPNConfig"),Tgt.forEach(t),Qro=r(Axe," (GLPN model)"),Axe.forEach(t),Uro=i(L),Wf=n(L,"LI",{});var Lxe=s(Wf);Hle=n(Lxe,"STRONG",{});var Mgt=s(Hle);Hro=r(Mgt,"gpt2"),Mgt.forEach(t),Jro=r(Lxe," \u2014 "),tB=n(Lxe,"A",{href:!0});var Egt=s(tB);Yro=r(Egt,"GPT2Config"),Egt.forEach(t),Kro=r(Lxe," (OpenAI GPT-2 model)"),Lxe.forEach(t),Zro=i(L),Qf=n(L,"LI",{});var yxe=s(Qf);Jle=n(yxe,"STRONG",{});var Cgt=s(Jle);eto=r(Cgt,"gpt_neo"),Cgt.forEach(t),oto=r(yxe," \u2014 "),aB=n(yxe,"A",{href:!0});var wgt=s(aB);rto=r(wgt,"GPTNeoConfig"),wgt.forEach(t),tto=r(yxe," (GPT Neo model)"),yxe.forEach(t),ato=i(L),Uf=n(L,"LI",{});var xxe=s(Uf);Yle=n(xxe,"STRONG",{});var Agt=s(Yle);nto=r(Agt,"gpt_neox"),Agt.forEach(t),sto=r(xxe," \u2014 "),nB=n(xxe,"A",{href:!0});var Lgt=s(nB);lto=r(Lgt,"GPTNeoXConfig"),Lgt.forEach(t),ito=r(xxe," (GPT NeoX model)"),xxe.forEach(t),dto=i(L),Hf=n(L,"LI",{});var $xe=s(Hf);Kle=n($xe,"STRONG",{});var ygt=s(Kle);cto=r(ygt,"gptj"),ygt.forEach(t),mto=r($xe," \u2014 "),sB=n($xe,"A",{href:!0});var xgt=s(sB);fto=r(xgt,"GPTJConfig"),xgt.forEach(t),gto=r($xe," (GPT-J model)"),$xe.forEach(t),hto=i(L),Jf=n(L,"LI",{});var kxe=s(Jf);Zle=n(kxe,"STRONG",{});var $gt=s(Zle);uto=r($gt,"groupvit"),$gt.forEach(t),pto=r(kxe," \u2014 "),lB=n(kxe,"A",{href:!0});var kgt=s(lB);_to=r(kgt,"GroupViTConfig"),kgt.forEach(t),bto=r(kxe," (GroupViT model)"),kxe.forEach(t),vto=i(L),Yf=n(L,"LI",{});var Sxe=s(Yf);eie=n(Sxe,"STRONG",{});var Sgt=s(eie);Fto=r(Sgt,"hubert"),Sgt.forEach(t),Tto=r(Sxe," \u2014 "),iB=n(Sxe,"A",{href:!0});var Rgt=s(iB);Mto=r(Rgt,"HubertConfig"),Rgt.forEach(t),Eto=r(Sxe," (Hubert model)"),Sxe.forEach(t),Cto=i(L),Kf=n(L,"LI",{});var Rxe=s(Kf);oie=n(Rxe,"STRONG",{});var Pgt=s(oie);wto=r(Pgt,"ibert"),Pgt.forEach(t),Ato=r(Rxe," \u2014 "),dB=n(Rxe,"A",{href:!0});var Bgt=s(dB);Lto=r(Bgt,"IBertConfig"),Bgt.forEach(t),yto=r(Rxe," (I-BERT model)"),Rxe.forEach(t),xto=i(L),Zf=n(L,"LI",{});var Pxe=s(Zf);rie=n(Pxe,"STRONG",{});var Igt=s(rie);$to=r(Igt,"imagegpt"),Igt.forEach(t),kto=r(Pxe," \u2014 "),cB=n(Pxe,"A",{href:!0});var Ngt=s(cB);Sto=r(Ngt,"ImageGPTConfig"),Ngt.forEach(t),Rto=r(Pxe," (ImageGPT model)"),Pxe.forEach(t),Pto=i(L),eg=n(L,"LI",{});var Bxe=s(eg);tie=n(Bxe,"STRONG",{});var qgt=s(tie);Bto=r(qgt,"layoutlm"),qgt.forEach(t),Ito=r(Bxe," \u2014 "),mB=n(Bxe,"A",{href:!0});var jgt=s(mB);Nto=r(jgt,"LayoutLMConfig"),jgt.forEach(t),qto=r(Bxe," (LayoutLM model)"),Bxe.forEach(t),jto=i(L),og=n(L,"LI",{});var Ixe=s(og);aie=n(Ixe,"STRONG",{});var Dgt=s(aie);Dto=r(Dgt,"layoutlmv2"),Dgt.forEach(t),Gto=r(Ixe," \u2014 "),fB=n(Ixe,"A",{href:!0});var Ggt=s(fB);Oto=r(Ggt,"LayoutLMv2Config"),Ggt.forEach(t),Vto=r(Ixe," (LayoutLMv2 model)"),Ixe.forEach(t),Xto=i(L),rg=n(L,"LI",{});var Nxe=s(rg);nie=n(Nxe,"STRONG",{});var Ogt=s(nie);zto=r(Ogt,"layoutlmv3"),Ogt.forEach(t),Wto=r(Nxe," \u2014 "),gB=n(Nxe,"A",{href:!0});var Vgt=s(gB);Qto=r(Vgt,"LayoutLMv3Config"),Vgt.forEach(t),Uto=r(Nxe," (LayoutLMv3 model)"),Nxe.forEach(t),Hto=i(L),tg=n(L,"LI",{});var qxe=s(tg);sie=n(qxe,"STRONG",{});var Xgt=s(sie);Jto=r(Xgt,"led"),Xgt.forEach(t),Yto=r(qxe," \u2014 "),hB=n(qxe,"A",{href:!0});var zgt=s(hB);Kto=r(zgt,"LEDConfig"),zgt.forEach(t),Zto=r(qxe," (LED model)"),qxe.forEach(t),eao=i(L),ag=n(L,"LI",{});var jxe=s(ag);lie=n(jxe,"STRONG",{});var Wgt=s(lie);oao=r(Wgt,"levit"),Wgt.forEach(t),rao=r(jxe," \u2014 "),uB=n(jxe,"A",{href:!0});var Qgt=s(uB);tao=r(Qgt,"LevitConfig"),Qgt.forEach(t),aao=r(jxe," (LeViT model)"),jxe.forEach(t),nao=i(L),ng=n(L,"LI",{});var Dxe=s(ng);iie=n(Dxe,"STRONG",{});var Ugt=s(iie);sao=r(Ugt,"longformer"),Ugt.forEach(t),lao=r(Dxe," \u2014 "),pB=n(Dxe,"A",{href:!0});var Hgt=s(pB);iao=r(Hgt,"LongformerConfig"),Hgt.forEach(t),dao=r(Dxe," (Longformer model)"),Dxe.forEach(t),cao=i(L),sg=n(L,"LI",{});var Gxe=s(sg);die=n(Gxe,"STRONG",{});var Jgt=s(die);mao=r(Jgt,"longt5"),Jgt.forEach(t),fao=r(Gxe," \u2014 "),_B=n(Gxe,"A",{href:!0});var Ygt=s(_B);gao=r(Ygt,"LongT5Config"),Ygt.forEach(t),hao=r(Gxe," (LongT5 model)"),Gxe.forEach(t),uao=i(L),lg=n(L,"LI",{});var Oxe=s(lg);cie=n(Oxe,"STRONG",{});var Kgt=s(cie);pao=r(Kgt,"luke"),Kgt.forEach(t),_ao=r(Oxe," \u2014 "),bB=n(Oxe,"A",{href:!0});var Zgt=s(bB);bao=r(Zgt,"LukeConfig"),Zgt.forEach(t),vao=r(Oxe," (LUKE model)"),Oxe.forEach(t),Fao=i(L),ig=n(L,"LI",{});var Vxe=s(ig);mie=n(Vxe,"STRONG",{});var eht=s(mie);Tao=r(eht,"lxmert"),eht.forEach(t),Mao=r(Vxe," \u2014 "),vB=n(Vxe,"A",{href:!0});var oht=s(vB);Eao=r(oht,"LxmertConfig"),oht.forEach(t),Cao=r(Vxe," (LXMERT model)"),Vxe.forEach(t),wao=i(L),dg=n(L,"LI",{});var Xxe=s(dg);fie=n(Xxe,"STRONG",{});var rht=s(fie);Aao=r(rht,"m2m_100"),rht.forEach(t),Lao=r(Xxe," \u2014 "),FB=n(Xxe,"A",{href:!0});var tht=s(FB);yao=r(tht,"M2M100Config"),tht.forEach(t),xao=r(Xxe," (M2M100 model)"),Xxe.forEach(t),$ao=i(L),cg=n(L,"LI",{});var zxe=s(cg);gie=n(zxe,"STRONG",{});var aht=s(gie);kao=r(aht,"marian"),aht.forEach(t),Sao=r(zxe," \u2014 "),TB=n(zxe,"A",{href:!0});var nht=s(TB);Rao=r(nht,"MarianConfig"),nht.forEach(t),Pao=r(zxe," (Marian model)"),zxe.forEach(t),Bao=i(L),mg=n(L,"LI",{});var Wxe=s(mg);hie=n(Wxe,"STRONG",{});var sht=s(hie);Iao=r(sht,"maskformer"),sht.forEach(t),Nao=r(Wxe," \u2014 "),MB=n(Wxe,"A",{href:!0});var lht=s(MB);qao=r(lht,"MaskFormerConfig"),lht.forEach(t),jao=r(Wxe," (MaskFormer model)"),Wxe.forEach(t),Dao=i(L),fg=n(L,"LI",{});var Qxe=s(fg);uie=n(Qxe,"STRONG",{});var iht=s(uie);Gao=r(iht,"mbart"),iht.forEach(t),Oao=r(Qxe," \u2014 "),EB=n(Qxe,"A",{href:!0});var dht=s(EB);Vao=r(dht,"MBartConfig"),dht.forEach(t),Xao=r(Qxe," (mBART model)"),Qxe.forEach(t),zao=i(L),gg=n(L,"LI",{});var Uxe=s(gg);pie=n(Uxe,"STRONG",{});var cht=s(pie);Wao=r(cht,"mctct"),cht.forEach(t),Qao=r(Uxe," \u2014 "),CB=n(Uxe,"A",{href:!0});var mht=s(CB);Uao=r(mht,"MCTCTConfig"),mht.forEach(t),Hao=r(Uxe," (M-CTC-T model)"),Uxe.forEach(t),Jao=i(L),hg=n(L,"LI",{});var Hxe=s(hg);_ie=n(Hxe,"STRONG",{});var fht=s(_ie);Yao=r(fht,"megatron-bert"),fht.forEach(t),Kao=r(Hxe," \u2014 "),wB=n(Hxe,"A",{href:!0});var ght=s(wB);Zao=r(ght,"MegatronBertConfig"),ght.forEach(t),eno=r(Hxe," (Megatron-BERT model)"),Hxe.forEach(t),ono=i(L),ug=n(L,"LI",{});var Jxe=s(ug);bie=n(Jxe,"STRONG",{});var hht=s(bie);rno=r(hht,"mobilebert"),hht.forEach(t),tno=r(Jxe," \u2014 "),AB=n(Jxe,"A",{href:!0});var uht=s(AB);ano=r(uht,"MobileBertConfig"),uht.forEach(t),nno=r(Jxe," (MobileBERT model)"),Jxe.forEach(t),sno=i(L),pg=n(L,"LI",{});var Yxe=s(pg);vie=n(Yxe,"STRONG",{});var pht=s(vie);lno=r(pht,"mobilevit"),pht.forEach(t),ino=r(Yxe," \u2014 "),LB=n(Yxe,"A",{href:!0});var _ht=s(LB);dno=r(_ht,"MobileViTConfig"),_ht.forEach(t),cno=r(Yxe," (MobileViT model)"),Yxe.forEach(t),mno=i(L),_g=n(L,"LI",{});var Kxe=s(_g);Fie=n(Kxe,"STRONG",{});var bht=s(Fie);fno=r(bht,"mpnet"),bht.forEach(t),gno=r(Kxe," \u2014 "),yB=n(Kxe,"A",{href:!0});var vht=s(yB);hno=r(vht,"MPNetConfig"),vht.forEach(t),uno=r(Kxe," (MPNet model)"),Kxe.forEach(t),pno=i(L),bg=n(L,"LI",{});var Zxe=s(bg);Tie=n(Zxe,"STRONG",{});var Fht=s(Tie);_no=r(Fht,"mt5"),Fht.forEach(t),bno=r(Zxe," \u2014 "),xB=n(Zxe,"A",{href:!0});var Tht=s(xB);vno=r(Tht,"MT5Config"),Tht.forEach(t),Fno=r(Zxe," (MT5 model)"),Zxe.forEach(t),Tno=i(L),vg=n(L,"LI",{});var e$e=s(vg);Mie=n(e$e,"STRONG",{});var Mht=s(Mie);Mno=r(Mht,"mvp"),Mht.forEach(t),Eno=r(e$e," \u2014 "),$B=n(e$e,"A",{href:!0});var Eht=s($B);Cno=r(Eht,"MvpConfig"),Eht.forEach(t),wno=r(e$e," (MVP model)"),e$e.forEach(t),Ano=i(L),Fg=n(L,"LI",{});var o$e=s(Fg);Eie=n(o$e,"STRONG",{});var Cht=s(Eie);Lno=r(Cht,"nezha"),Cht.forEach(t),yno=r(o$e," \u2014 "),kB=n(o$e,"A",{href:!0});var wht=s(kB);xno=r(wht,"NezhaConfig"),wht.forEach(t),$no=r(o$e," (Nezha model)"),o$e.forEach(t),kno=i(L),Tg=n(L,"LI",{});var r$e=s(Tg);Cie=n(r$e,"STRONG",{});var Aht=s(Cie);Sno=r(Aht,"nystromformer"),Aht.forEach(t),Rno=r(r$e," \u2014 "),SB=n(r$e,"A",{href:!0});var Lht=s(SB);Pno=r(Lht,"NystromformerConfig"),Lht.forEach(t),Bno=r(r$e," (Nystr\xF6mformer model)"),r$e.forEach(t),Ino=i(L),Mg=n(L,"LI",{});var t$e=s(Mg);wie=n(t$e,"STRONG",{});var yht=s(wie);Nno=r(yht,"openai-gpt"),yht.forEach(t),qno=r(t$e," \u2014 "),RB=n(t$e,"A",{href:!0});var xht=s(RB);jno=r(xht,"OpenAIGPTConfig"),xht.forEach(t),Dno=r(t$e," (OpenAI GPT model)"),t$e.forEach(t),Gno=i(L),Eg=n(L,"LI",{});var a$e=s(Eg);Aie=n(a$e,"STRONG",{});var $ht=s(Aie);Ono=r($ht,"opt"),$ht.forEach(t),Vno=r(a$e," \u2014 "),PB=n(a$e,"A",{href:!0});var kht=s(PB);Xno=r(kht,"OPTConfig"),kht.forEach(t),zno=r(a$e," (OPT model)"),a$e.forEach(t),Wno=i(L),Cg=n(L,"LI",{});var n$e=s(Cg);Lie=n(n$e,"STRONG",{});var Sht=s(Lie);Qno=r(Sht,"owlvit"),Sht.forEach(t),Uno=r(n$e," \u2014 "),BB=n(n$e,"A",{href:!0});var Rht=s(BB);Hno=r(Rht,"OwlViTConfig"),Rht.forEach(t),Jno=r(n$e," (OWL-ViT model)"),n$e.forEach(t),Yno=i(L),wg=n(L,"LI",{});var s$e=s(wg);yie=n(s$e,"STRONG",{});var Pht=s(yie);Kno=r(Pht,"pegasus"),Pht.forEach(t),Zno=r(s$e," \u2014 "),IB=n(s$e,"A",{href:!0});var Bht=s(IB);eso=r(Bht,"PegasusConfig"),Bht.forEach(t),oso=r(s$e," (Pegasus model)"),s$e.forEach(t),rso=i(L),Ag=n(L,"LI",{});var l$e=s(Ag);xie=n(l$e,"STRONG",{});var Iht=s(xie);tso=r(Iht,"perceiver"),Iht.forEach(t),aso=r(l$e," \u2014 "),NB=n(l$e,"A",{href:!0});var Nht=s(NB);nso=r(Nht,"PerceiverConfig"),Nht.forEach(t),sso=r(l$e," (Perceiver model)"),l$e.forEach(t),lso=i(L),Lg=n(L,"LI",{});var i$e=s(Lg);$ie=n(i$e,"STRONG",{});var qht=s($ie);iso=r(qht,"plbart"),qht.forEach(t),dso=r(i$e," \u2014 "),qB=n(i$e,"A",{href:!0});var jht=s(qB);cso=r(jht,"PLBartConfig"),jht.forEach(t),mso=r(i$e," (PLBart model)"),i$e.forEach(t),fso=i(L),yg=n(L,"LI",{});var d$e=s(yg);kie=n(d$e,"STRONG",{});var Dht=s(kie);gso=r(Dht,"poolformer"),Dht.forEach(t),hso=r(d$e," \u2014 "),jB=n(d$e,"A",{href:!0});var Ght=s(jB);uso=r(Ght,"PoolFormerConfig"),Ght.forEach(t),pso=r(d$e," (PoolFormer model)"),d$e.forEach(t),_so=i(L),xg=n(L,"LI",{});var c$e=s(xg);Sie=n(c$e,"STRONG",{});var Oht=s(Sie);bso=r(Oht,"prophetnet"),Oht.forEach(t),vso=r(c$e," \u2014 "),DB=n(c$e,"A",{href:!0});var Vht=s(DB);Fso=r(Vht,"ProphetNetConfig"),Vht.forEach(t),Tso=r(c$e," (ProphetNet model)"),c$e.forEach(t),Mso=i(L),$g=n(L,"LI",{});var m$e=s($g);Rie=n(m$e,"STRONG",{});var Xht=s(Rie);Eso=r(Xht,"qdqbert"),Xht.forEach(t),Cso=r(m$e," \u2014 "),GB=n(m$e,"A",{href:!0});var zht=s(GB);wso=r(zht,"QDQBertConfig"),zht.forEach(t),Aso=r(m$e," (QDQBert model)"),m$e.forEach(t),Lso=i(L),kg=n(L,"LI",{});var f$e=s(kg);Pie=n(f$e,"STRONG",{});var Wht=s(Pie);yso=r(Wht,"rag"),Wht.forEach(t),xso=r(f$e," \u2014 "),OB=n(f$e,"A",{href:!0});var Qht=s(OB);$so=r(Qht,"RagConfig"),Qht.forEach(t),kso=r(f$e," (RAG model)"),f$e.forEach(t),Sso=i(L),Sg=n(L,"LI",{});var g$e=s(Sg);Bie=n(g$e,"STRONG",{});var Uht=s(Bie);Rso=r(Uht,"realm"),Uht.forEach(t),Pso=r(g$e," \u2014 "),VB=n(g$e,"A",{href:!0});var Hht=s(VB);Bso=r(Hht,"RealmConfig"),Hht.forEach(t),Iso=r(g$e," (REALM model)"),g$e.forEach(t),Nso=i(L),Rg=n(L,"LI",{});var h$e=s(Rg);Iie=n(h$e,"STRONG",{});var Jht=s(Iie);qso=r(Jht,"reformer"),Jht.forEach(t),jso=r(h$e," \u2014 "),XB=n(h$e,"A",{href:!0});var Yht=s(XB);Dso=r(Yht,"ReformerConfig"),Yht.forEach(t),Gso=r(h$e," (Reformer model)"),h$e.forEach(t),Oso=i(L),Pg=n(L,"LI",{});var u$e=s(Pg);Nie=n(u$e,"STRONG",{});var Kht=s(Nie);Vso=r(Kht,"regnet"),Kht.forEach(t),Xso=r(u$e," \u2014 "),zB=n(u$e,"A",{href:!0});var Zht=s(zB);zso=r(Zht,"RegNetConfig"),Zht.forEach(t),Wso=r(u$e," (RegNet model)"),u$e.forEach(t),Qso=i(L),Bg=n(L,"LI",{});var p$e=s(Bg);qie=n(p$e,"STRONG",{});var eut=s(qie);Uso=r(eut,"rembert"),eut.forEach(t),Hso=r(p$e," \u2014 "),WB=n(p$e,"A",{href:!0});var out=s(WB);Jso=r(out,"RemBertConfig"),out.forEach(t),Yso=r(p$e," (RemBERT model)"),p$e.forEach(t),Kso=i(L),Ig=n(L,"LI",{});var _$e=s(Ig);jie=n(_$e,"STRONG",{});var rut=s(jie);Zso=r(rut,"resnet"),rut.forEach(t),elo=r(_$e," \u2014 "),QB=n(_$e,"A",{href:!0});var tut=s(QB);olo=r(tut,"ResNetConfig"),tut.forEach(t),rlo=r(_$e," (ResNet model)"),_$e.forEach(t),tlo=i(L),Ng=n(L,"LI",{});var b$e=s(Ng);Die=n(b$e,"STRONG",{});var aut=s(Die);alo=r(aut,"retribert"),aut.forEach(t),nlo=r(b$e," \u2014 "),UB=n(b$e,"A",{href:!0});var nut=s(UB);slo=r(nut,"RetriBertConfig"),nut.forEach(t),llo=r(b$e," (RetriBERT model)"),b$e.forEach(t),ilo=i(L),qg=n(L,"LI",{});var v$e=s(qg);Gie=n(v$e,"STRONG",{});var sut=s(Gie);dlo=r(sut,"roberta"),sut.forEach(t),clo=r(v$e," \u2014 "),HB=n(v$e,"A",{href:!0});var lut=s(HB);mlo=r(lut,"RobertaConfig"),lut.forEach(t),flo=r(v$e," (RoBERTa model)"),v$e.forEach(t),glo=i(L),jg=n(L,"LI",{});var F$e=s(jg);Oie=n(F$e,"STRONG",{});var iut=s(Oie);hlo=r(iut,"roformer"),iut.forEach(t),ulo=r(F$e," \u2014 "),JB=n(F$e,"A",{href:!0});var dut=s(JB);plo=r(dut,"RoFormerConfig"),dut.forEach(t),_lo=r(F$e," (RoFormer model)"),F$e.forEach(t),blo=i(L),Dg=n(L,"LI",{});var T$e=s(Dg);Vie=n(T$e,"STRONG",{});var cut=s(Vie);vlo=r(cut,"segformer"),cut.forEach(t),Flo=r(T$e," \u2014 "),YB=n(T$e,"A",{href:!0});var mut=s(YB);Tlo=r(mut,"SegformerConfig"),mut.forEach(t),Mlo=r(T$e," (SegFormer model)"),T$e.forEach(t),Elo=i(L),Gg=n(L,"LI",{});var M$e=s(Gg);Xie=n(M$e,"STRONG",{});var fut=s(Xie);Clo=r(fut,"sew"),fut.forEach(t),wlo=r(M$e," \u2014 "),KB=n(M$e,"A",{href:!0});var gut=s(KB);Alo=r(gut,"SEWConfig"),gut.forEach(t),Llo=r(M$e," (SEW model)"),M$e.forEach(t),ylo=i(L),Og=n(L,"LI",{});var E$e=s(Og);zie=n(E$e,"STRONG",{});var hut=s(zie);xlo=r(hut,"sew-d"),hut.forEach(t),$lo=r(E$e," \u2014 "),ZB=n(E$e,"A",{href:!0});var uut=s(ZB);klo=r(uut,"SEWDConfig"),uut.forEach(t),Slo=r(E$e," (SEW-D model)"),E$e.forEach(t),Rlo=i(L),Vg=n(L,"LI",{});var C$e=s(Vg);Wie=n(C$e,"STRONG",{});var put=s(Wie);Plo=r(put,"speech-encoder-decoder"),put.forEach(t),Blo=r(C$e," \u2014 "),eI=n(C$e,"A",{href:!0});var _ut=s(eI);Ilo=r(_ut,"SpeechEncoderDecoderConfig"),_ut.forEach(t),Nlo=r(C$e," (Speech Encoder decoder model)"),C$e.forEach(t),qlo=i(L),Xg=n(L,"LI",{});var w$e=s(Xg);Qie=n(w$e,"STRONG",{});var but=s(Qie);jlo=r(but,"speech_to_text"),but.forEach(t),Dlo=r(w$e," \u2014 "),oI=n(w$e,"A",{href:!0});var vut=s(oI);Glo=r(vut,"Speech2TextConfig"),vut.forEach(t),Olo=r(w$e," (Speech2Text model)"),w$e.forEach(t),Vlo=i(L),zg=n(L,"LI",{});var A$e=s(zg);Uie=n(A$e,"STRONG",{});var Fut=s(Uie);Xlo=r(Fut,"speech_to_text_2"),Fut.forEach(t),zlo=r(A$e," \u2014 "),rI=n(A$e,"A",{href:!0});var Tut=s(rI);Wlo=r(Tut,"Speech2Text2Config"),Tut.forEach(t),Qlo=r(A$e," (Speech2Text2 model)"),A$e.forEach(t),Ulo=i(L),Wg=n(L,"LI",{});var L$e=s(Wg);Hie=n(L$e,"STRONG",{});var Mut=s(Hie);Hlo=r(Mut,"splinter"),Mut.forEach(t),Jlo=r(L$e," \u2014 "),tI=n(L$e,"A",{href:!0});var Eut=s(tI);Ylo=r(Eut,"SplinterConfig"),Eut.forEach(t),Klo=r(L$e," (Splinter model)"),L$e.forEach(t),Zlo=i(L),Qg=n(L,"LI",{});var y$e=s(Qg);Jie=n(y$e,"STRONG",{});var Cut=s(Jie);eio=r(Cut,"squeezebert"),Cut.forEach(t),oio=r(y$e," \u2014 "),aI=n(y$e,"A",{href:!0});var wut=s(aI);rio=r(wut,"SqueezeBertConfig"),wut.forEach(t),tio=r(y$e," (SqueezeBERT model)"),y$e.forEach(t),aio=i(L),Ug=n(L,"LI",{});var x$e=s(Ug);Yie=n(x$e,"STRONG",{});var Aut=s(Yie);nio=r(Aut,"swin"),Aut.forEach(t),sio=r(x$e," \u2014 "),nI=n(x$e,"A",{href:!0});var Lut=s(nI);lio=r(Lut,"SwinConfig"),Lut.forEach(t),iio=r(x$e," (Swin Transformer model)"),x$e.forEach(t),dio=i(L),Hg=n(L,"LI",{});var $$e=s(Hg);Kie=n($$e,"STRONG",{});var yut=s(Kie);cio=r(yut,"swinv2"),yut.forEach(t),mio=r($$e," \u2014 "),sI=n($$e,"A",{href:!0});var xut=s(sI);fio=r(xut,"Swinv2Config"),xut.forEach(t),gio=r($$e," (Swin Transformer V2 model)"),$$e.forEach(t),hio=i(L),Jg=n(L,"LI",{});var k$e=s(Jg);Zie=n(k$e,"STRONG",{});var $ut=s(Zie);uio=r($ut,"t5"),$ut.forEach(t),pio=r(k$e," \u2014 "),lI=n(k$e,"A",{href:!0});var kut=s(lI);_io=r(kut,"T5Config"),kut.forEach(t),bio=r(k$e," (T5 model)"),k$e.forEach(t),vio=i(L),Yg=n(L,"LI",{});var S$e=s(Yg);ede=n(S$e,"STRONG",{});var Sut=s(ede);Fio=r(Sut,"tapas"),Sut.forEach(t),Tio=r(S$e," \u2014 "),iI=n(S$e,"A",{href:!0});var Rut=s(iI);Mio=r(Rut,"TapasConfig"),Rut.forEach(t),Eio=r(S$e," (TAPAS model)"),S$e.forEach(t),Cio=i(L),Kg=n(L,"LI",{});var R$e=s(Kg);ode=n(R$e,"STRONG",{});var Put=s(ode);wio=r(Put,"trajectory_transformer"),Put.forEach(t),Aio=r(R$e," \u2014 "),dI=n(R$e,"A",{href:!0});var But=s(dI);Lio=r(But,"TrajectoryTransformerConfig"),But.forEach(t),yio=r(R$e," (Trajectory Transformer model)"),R$e.forEach(t),xio=i(L),Zg=n(L,"LI",{});var P$e=s(Zg);rde=n(P$e,"STRONG",{});var Iut=s(rde);$io=r(Iut,"transfo-xl"),Iut.forEach(t),kio=r(P$e," \u2014 "),cI=n(P$e,"A",{href:!0});var Nut=s(cI);Sio=r(Nut,"TransfoXLConfig"),Nut.forEach(t),Rio=r(P$e," (Transformer-XL model)"),P$e.forEach(t),Pio=i(L),eh=n(L,"LI",{});var B$e=s(eh);tde=n(B$e,"STRONG",{});var qut=s(tde);Bio=r(qut,"trocr"),qut.forEach(t),Iio=r(B$e," \u2014 "),mI=n(B$e,"A",{href:!0});var jut=s(mI);Nio=r(jut,"TrOCRConfig"),jut.forEach(t),qio=r(B$e," (TrOCR model)"),B$e.forEach(t),jio=i(L),oh=n(L,"LI",{});var I$e=s(oh);ade=n(I$e,"STRONG",{});var Dut=s(ade);Dio=r(Dut,"unispeech"),Dut.forEach(t),Gio=r(I$e," \u2014 "),fI=n(I$e,"A",{href:!0});var Gut=s(fI);Oio=r(Gut,"UniSpeechConfig"),Gut.forEach(t),Vio=r(I$e," (UniSpeech model)"),I$e.forEach(t),Xio=i(L),rh=n(L,"LI",{});var N$e=s(rh);nde=n(N$e,"STRONG",{});var Out=s(nde);zio=r(Out,"unispeech-sat"),Out.forEach(t),Wio=r(N$e," \u2014 "),gI=n(N$e,"A",{href:!0});var Vut=s(gI);Qio=r(Vut,"UniSpeechSatConfig"),Vut.forEach(t),Uio=r(N$e," (UniSpeechSat model)"),N$e.forEach(t),Hio=i(L),th=n(L,"LI",{});var q$e=s(th);sde=n(q$e,"STRONG",{});var Xut=s(sde);Jio=r(Xut,"van"),Xut.forEach(t),Yio=r(q$e," \u2014 "),hI=n(q$e,"A",{href:!0});var zut=s(hI);Kio=r(zut,"VanConfig"),zut.forEach(t),Zio=r(q$e," (VAN model)"),q$e.forEach(t),edo=i(L),ah=n(L,"LI",{});var j$e=s(ah);lde=n(j$e,"STRONG",{});var Wut=s(lde);odo=r(Wut,"videomae"),Wut.forEach(t),rdo=r(j$e," \u2014 "),uI=n(j$e,"A",{href:!0});var Qut=s(uI);tdo=r(Qut,"VideoMAEConfig"),Qut.forEach(t),ado=r(j$e," (VideoMAE model)"),j$e.forEach(t),ndo=i(L),nh=n(L,"LI",{});var D$e=s(nh);ide=n(D$e,"STRONG",{});var Uut=s(ide);sdo=r(Uut,"vilt"),Uut.forEach(t),ldo=r(D$e," \u2014 "),pI=n(D$e,"A",{href:!0});var Hut=s(pI);ido=r(Hut,"ViltConfig"),Hut.forEach(t),ddo=r(D$e," (ViLT model)"),D$e.forEach(t),cdo=i(L),sh=n(L,"LI",{});var G$e=s(sh);dde=n(G$e,"STRONG",{});var Jut=s(dde);mdo=r(Jut,"vision-encoder-decoder"),Jut.forEach(t),fdo=r(G$e," \u2014 "),_I=n(G$e,"A",{href:!0});var Yut=s(_I);gdo=r(Yut,"VisionEncoderDecoderConfig"),Yut.forEach(t),hdo=r(G$e," (Vision Encoder decoder model)"),G$e.forEach(t),udo=i(L),lh=n(L,"LI",{});var O$e=s(lh);cde=n(O$e,"STRONG",{});var Kut=s(cde);pdo=r(Kut,"vision-text-dual-encoder"),Kut.forEach(t),_do=r(O$e," \u2014 "),bI=n(O$e,"A",{href:!0});var Zut=s(bI);bdo=r(Zut,"VisionTextDualEncoderConfig"),Zut.forEach(t),vdo=r(O$e," (VisionTextDualEncoder model)"),O$e.forEach(t),Fdo=i(L),ih=n(L,"LI",{});var V$e=s(ih);mde=n(V$e,"STRONG",{});var ept=s(mde);Tdo=r(ept,"visual_bert"),ept.forEach(t),Mdo=r(V$e," \u2014 "),vI=n(V$e,"A",{href:!0});var opt=s(vI);Edo=r(opt,"VisualBertConfig"),opt.forEach(t),Cdo=r(V$e," (VisualBERT model)"),V$e.forEach(t),wdo=i(L),dh=n(L,"LI",{});var X$e=s(dh);fde=n(X$e,"STRONG",{});var rpt=s(fde);Ado=r(rpt,"vit"),rpt.forEach(t),Ldo=r(X$e," \u2014 "),FI=n(X$e,"A",{href:!0});var tpt=s(FI);ydo=r(tpt,"ViTConfig"),tpt.forEach(t),xdo=r(X$e," (ViT model)"),X$e.forEach(t),$do=i(L),ch=n(L,"LI",{});var z$e=s(ch);gde=n(z$e,"STRONG",{});var apt=s(gde);kdo=r(apt,"vit_mae"),apt.forEach(t),Sdo=r(z$e," \u2014 "),TI=n(z$e,"A",{href:!0});var npt=s(TI);Rdo=r(npt,"ViTMAEConfig"),npt.forEach(t),Pdo=r(z$e," (ViTMAE model)"),z$e.forEach(t),Bdo=i(L),mh=n(L,"LI",{});var W$e=s(mh);hde=n(W$e,"STRONG",{});var spt=s(hde);Ido=r(spt,"wav2vec2"),spt.forEach(t),Ndo=r(W$e," \u2014 "),MI=n(W$e,"A",{href:!0});var lpt=s(MI);qdo=r(lpt,"Wav2Vec2Config"),lpt.forEach(t),jdo=r(W$e," (Wav2Vec2 model)"),W$e.forEach(t),Ddo=i(L),fh=n(L,"LI",{});var Q$e=s(fh);ude=n(Q$e,"STRONG",{});var ipt=s(ude);Gdo=r(ipt,"wav2vec2-conformer"),ipt.forEach(t),Odo=r(Q$e," \u2014 "),EI=n(Q$e,"A",{href:!0});var dpt=s(EI);Vdo=r(dpt,"Wav2Vec2ConformerConfig"),dpt.forEach(t),Xdo=r(Q$e," (Wav2Vec2-Conformer model)"),Q$e.forEach(t),zdo=i(L),gh=n(L,"LI",{});var U$e=s(gh);pde=n(U$e,"STRONG",{});var cpt=s(pde);Wdo=r(cpt,"wavlm"),cpt.forEach(t),Qdo=r(U$e," \u2014 "),CI=n(U$e,"A",{href:!0});var mpt=s(CI);Udo=r(mpt,"WavLMConfig"),mpt.forEach(t),Hdo=r(U$e," (WavLM model)"),U$e.forEach(t),Jdo=i(L),hh=n(L,"LI",{});var H$e=s(hh);_de=n(H$e,"STRONG",{});var fpt=s(_de);Ydo=r(fpt,"xglm"),fpt.forEach(t),Kdo=r(H$e," \u2014 "),wI=n(H$e,"A",{href:!0});var gpt=s(wI);Zdo=r(gpt,"XGLMConfig"),gpt.forEach(t),eco=r(H$e," (XGLM model)"),H$e.forEach(t),oco=i(L),uh=n(L,"LI",{});var J$e=s(uh);bde=n(J$e,"STRONG",{});var hpt=s(bde);rco=r(hpt,"xlm"),hpt.forEach(t),tco=r(J$e," \u2014 "),AI=n(J$e,"A",{href:!0});var upt=s(AI);aco=r(upt,"XLMConfig"),upt.forEach(t),nco=r(J$e," (XLM model)"),J$e.forEach(t),sco=i(L),ph=n(L,"LI",{});var Y$e=s(ph);vde=n(Y$e,"STRONG",{});var ppt=s(vde);lco=r(ppt,"xlm-prophetnet"),ppt.forEach(t),ico=r(Y$e," \u2014 "),LI=n(Y$e,"A",{href:!0});var _pt=s(LI);dco=r(_pt,"XLMProphetNetConfig"),_pt.forEach(t),cco=r(Y$e," (XLM-ProphetNet model)"),Y$e.forEach(t),mco=i(L),_h=n(L,"LI",{});var K$e=s(_h);Fde=n(K$e,"STRONG",{});var bpt=s(Fde);fco=r(bpt,"xlm-roberta"),bpt.forEach(t),gco=r(K$e," \u2014 "),yI=n(K$e,"A",{href:!0});var vpt=s(yI);hco=r(vpt,"XLMRobertaConfig"),vpt.forEach(t),uco=r(K$e," (XLM-RoBERTa model)"),K$e.forEach(t),pco=i(L),bh=n(L,"LI",{});var Z$e=s(bh);Tde=n(Z$e,"STRONG",{});var Fpt=s(Tde);_co=r(Fpt,"xlm-roberta-xl"),Fpt.forEach(t),bco=r(Z$e," \u2014 "),xI=n(Z$e,"A",{href:!0});var Tpt=s(xI);vco=r(Tpt,"XLMRobertaXLConfig"),Tpt.forEach(t),Fco=r(Z$e," (XLM-RoBERTa-XL model)"),Z$e.forEach(t),Tco=i(L),vh=n(L,"LI",{});var eke=s(vh);Mde=n(eke,"STRONG",{});var Mpt=s(Mde);Mco=r(Mpt,"xlnet"),Mpt.forEach(t),Eco=r(eke," \u2014 "),$I=n(eke,"A",{href:!0});var Ept=s($I);Cco=r(Ept,"XLNetConfig"),Ept.forEach(t),wco=r(eke," (XLNet model)"),eke.forEach(t),Aco=i(L),Fh=n(L,"LI",{});var oke=s(Fh);Ede=n(oke,"STRONG",{});var Cpt=s(Ede);Lco=r(Cpt,"yolos"),Cpt.forEach(t),yco=r(oke," \u2014 "),kI=n(oke,"A",{href:!0});var wpt=s(kI);xco=r(wpt,"YolosConfig"),wpt.forEach(t),$co=r(oke," (YOLOS model)"),oke.forEach(t),kco=i(L),Th=n(L,"LI",{});var rke=s(Th);Cde=n(rke,"STRONG",{});var Apt=s(Cde);Sco=r(Apt,"yoso"),Apt.forEach(t),Rco=r(rke," \u2014 "),SI=n(rke,"A",{href:!0});var Lpt=s(SI);Pco=r(Lpt,"YosoConfig"),Lpt.forEach(t),Bco=r(rke," (YOSO model)"),rke.forEach(t),L.forEach(t),Ico=i(ct),T(Mh.$$.fragment,ct),ct.forEach(t),Nco=i(dt),Eh=n(dt,"DIV",{class:!0});var RJe=s(Eh);T($8.$$.fragment,RJe),qco=i(RJe),wde=n(RJe,"P",{});var ypt=s(wde);jco=r(ypt,"Register a new configuration for this class."),ypt.forEach(t),RJe.forEach(t),dt.forEach(t),$Ue=i(m),Ki=n(m,"H2",{class:!0});var PJe=s(Ki);Ch=n(PJe,"A",{id:!0,class:!0,href:!0});var xpt=s(Ch);Ade=n(xpt,"SPAN",{});var $pt=s(Ade);T(k8.$$.fragment,$pt),$pt.forEach(t),xpt.forEach(t),Dco=i(PJe),Lde=n(PJe,"SPAN",{});var kpt=s(Lde);Gco=r(kpt,"AutoTokenizer"),kpt.forEach(t),PJe.forEach(t),kUe=i(m),xo=n(m,"DIV",{class:!0});var cl=s(xo);T(S8.$$.fragment,cl),Oco=i(cl),R8=n(cl,"P",{});var BJe=s(R8);Vco=r(BJe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),RI=n(BJe,"A",{href:!0});var Spt=s(RI);Xco=r(Spt,"AutoTokenizer.from_pretrained()"),Spt.forEach(t),zco=r(BJe," class method."),BJe.forEach(t),Wco=i(cl),P8=n(cl,"P",{});var IJe=s(P8);Qco=r(IJe,"This class cannot be instantiated directly using "),yde=n(IJe,"CODE",{});var Rpt=s(yde);Uco=r(Rpt,"__init__()"),Rpt.forEach(t),Hco=r(IJe," (throws an error)."),IJe.forEach(t),Jco=i(cl),Sr=n(cl,"DIV",{class:!0});var ml=s(Sr);T(B8.$$.fragment,ml),Yco=i(ml),xde=n(ml,"P",{});var Ppt=s(xde);Kco=r(Ppt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Ppt.forEach(t),Zco=i(ml),Ga=n(ml,"P",{});var FL=s(Ga);emo=r(FL,"The tokenizer class to instantiate is selected based on the "),$de=n(FL,"CODE",{});var Bpt=s($de);omo=r(Bpt,"model_type"),Bpt.forEach(t),rmo=r(FL,` property of the config object (either
passed as an argument or loaded from `),kde=n(FL,"CODE",{});var Ipt=s(kde);tmo=r(Ipt,"pretrained_model_name_or_path"),Ipt.forEach(t),amo=r(FL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sde=n(FL,"CODE",{});var Npt=s(Sde);nmo=r(Npt,"pretrained_model_name_or_path"),Npt.forEach(t),smo=r(FL,":"),FL.forEach(t),lmo=i(ml),k=n(ml,"UL",{});var S=s(k);Hn=n(S,"LI",{});var YS=s(Hn);Rde=n(YS,"STRONG",{});var qpt=s(Rde);imo=r(qpt,"albert"),qpt.forEach(t),dmo=r(YS," \u2014 "),PI=n(YS,"A",{href:!0});var jpt=s(PI);cmo=r(jpt,"AlbertTokenizer"),jpt.forEach(t),mmo=r(YS," or "),BI=n(YS,"A",{href:!0});var Dpt=s(BI);fmo=r(Dpt,"AlbertTokenizerFast"),Dpt.forEach(t),gmo=r(YS," (ALBERT model)"),YS.forEach(t),hmo=i(S),Jn=n(S,"LI",{});var KS=s(Jn);Pde=n(KS,"STRONG",{});var Gpt=s(Pde);umo=r(Gpt,"bart"),Gpt.forEach(t),pmo=r(KS," \u2014 "),II=n(KS,"A",{href:!0});var Opt=s(II);_mo=r(Opt,"BartTokenizer"),Opt.forEach(t),bmo=r(KS," or "),NI=n(KS,"A",{href:!0});var Vpt=s(NI);vmo=r(Vpt,"BartTokenizerFast"),Vpt.forEach(t),Fmo=r(KS," (BART model)"),KS.forEach(t),Tmo=i(S),Yn=n(S,"LI",{});var ZS=s(Yn);Bde=n(ZS,"STRONG",{});var Xpt=s(Bde);Mmo=r(Xpt,"barthez"),Xpt.forEach(t),Emo=r(ZS," \u2014 "),qI=n(ZS,"A",{href:!0});var zpt=s(qI);Cmo=r(zpt,"BarthezTokenizer"),zpt.forEach(t),wmo=r(ZS," or "),jI=n(ZS,"A",{href:!0});var Wpt=s(jI);Amo=r(Wpt,"BarthezTokenizerFast"),Wpt.forEach(t),Lmo=r(ZS," (BARThez model)"),ZS.forEach(t),ymo=i(S),wh=n(S,"LI",{});var tke=s(wh);Ide=n(tke,"STRONG",{});var Qpt=s(Ide);xmo=r(Qpt,"bartpho"),Qpt.forEach(t),$mo=r(tke," \u2014 "),DI=n(tke,"A",{href:!0});var Upt=s(DI);kmo=r(Upt,"BartphoTokenizer"),Upt.forEach(t),Smo=r(tke," (BARTpho model)"),tke.forEach(t),Rmo=i(S),Kn=n(S,"LI",{});var eR=s(Kn);Nde=n(eR,"STRONG",{});var Hpt=s(Nde);Pmo=r(Hpt,"bert"),Hpt.forEach(t),Bmo=r(eR," \u2014 "),GI=n(eR,"A",{href:!0});var Jpt=s(GI);Imo=r(Jpt,"BertTokenizer"),Jpt.forEach(t),Nmo=r(eR," or "),OI=n(eR,"A",{href:!0});var Ypt=s(OI);qmo=r(Ypt,"BertTokenizerFast"),Ypt.forEach(t),jmo=r(eR," (BERT model)"),eR.forEach(t),Dmo=i(S),Ah=n(S,"LI",{});var ake=s(Ah);qde=n(ake,"STRONG",{});var Kpt=s(qde);Gmo=r(Kpt,"bert-generation"),Kpt.forEach(t),Omo=r(ake," \u2014 "),VI=n(ake,"A",{href:!0});var Zpt=s(VI);Vmo=r(Zpt,"BertGenerationTokenizer"),Zpt.forEach(t),Xmo=r(ake," (Bert Generation model)"),ake.forEach(t),zmo=i(S),Lh=n(S,"LI",{});var nke=s(Lh);jde=n(nke,"STRONG",{});var e_t=s(jde);Wmo=r(e_t,"bert-japanese"),e_t.forEach(t),Qmo=r(nke," \u2014 "),XI=n(nke,"A",{href:!0});var o_t=s(XI);Umo=r(o_t,"BertJapaneseTokenizer"),o_t.forEach(t),Hmo=r(nke," (BertJapanese model)"),nke.forEach(t),Jmo=i(S),yh=n(S,"LI",{});var ske=s(yh);Dde=n(ske,"STRONG",{});var r_t=s(Dde);Ymo=r(r_t,"bertweet"),r_t.forEach(t),Kmo=r(ske," \u2014 "),zI=n(ske,"A",{href:!0});var t_t=s(zI);Zmo=r(t_t,"BertweetTokenizer"),t_t.forEach(t),efo=r(ske," (BERTweet model)"),ske.forEach(t),ofo=i(S),Zn=n(S,"LI",{});var oR=s(Zn);Gde=n(oR,"STRONG",{});var a_t=s(Gde);rfo=r(a_t,"big_bird"),a_t.forEach(t),tfo=r(oR," \u2014 "),WI=n(oR,"A",{href:!0});var n_t=s(WI);afo=r(n_t,"BigBirdTokenizer"),n_t.forEach(t),nfo=r(oR," or "),QI=n(oR,"A",{href:!0});var s_t=s(QI);sfo=r(s_t,"BigBirdTokenizerFast"),s_t.forEach(t),lfo=r(oR," (BigBird model)"),oR.forEach(t),ifo=i(S),es=n(S,"LI",{});var rR=s(es);Ode=n(rR,"STRONG",{});var l_t=s(Ode);dfo=r(l_t,"bigbird_pegasus"),l_t.forEach(t),cfo=r(rR," \u2014 "),UI=n(rR,"A",{href:!0});var i_t=s(UI);mfo=r(i_t,"PegasusTokenizer"),i_t.forEach(t),ffo=r(rR," or "),HI=n(rR,"A",{href:!0});var d_t=s(HI);gfo=r(d_t,"PegasusTokenizerFast"),d_t.forEach(t),hfo=r(rR," (BigBird-Pegasus model)"),rR.forEach(t),ufo=i(S),os=n(S,"LI",{});var tR=s(os);Vde=n(tR,"STRONG",{});var c_t=s(Vde);pfo=r(c_t,"blenderbot"),c_t.forEach(t),_fo=r(tR," \u2014 "),JI=n(tR,"A",{href:!0});var m_t=s(JI);bfo=r(m_t,"BlenderbotTokenizer"),m_t.forEach(t),vfo=r(tR," or "),YI=n(tR,"A",{href:!0});var f_t=s(YI);Ffo=r(f_t,"BlenderbotTokenizerFast"),f_t.forEach(t),Tfo=r(tR," (Blenderbot model)"),tR.forEach(t),Mfo=i(S),xh=n(S,"LI",{});var lke=s(xh);Xde=n(lke,"STRONG",{});var g_t=s(Xde);Efo=r(g_t,"blenderbot-small"),g_t.forEach(t),Cfo=r(lke," \u2014 "),KI=n(lke,"A",{href:!0});var h_t=s(KI);wfo=r(h_t,"BlenderbotSmallTokenizer"),h_t.forEach(t),Afo=r(lke," (BlenderbotSmall model)"),lke.forEach(t),Lfo=i(S),$h=n(S,"LI",{});var ike=s($h);zde=n(ike,"STRONG",{});var u_t=s(zde);yfo=r(u_t,"bloom"),u_t.forEach(t),xfo=r(ike," \u2014 "),ZI=n(ike,"A",{href:!0});var p_t=s(ZI);$fo=r(p_t,"BloomTokenizerFast"),p_t.forEach(t),kfo=r(ike," (BLOOM model)"),ike.forEach(t),Sfo=i(S),kh=n(S,"LI",{});var dke=s(kh);Wde=n(dke,"STRONG",{});var __t=s(Wde);Rfo=r(__t,"byt5"),__t.forEach(t),Pfo=r(dke," \u2014 "),eN=n(dke,"A",{href:!0});var b_t=s(eN);Bfo=r(b_t,"ByT5Tokenizer"),b_t.forEach(t),Ifo=r(dke," (ByT5 model)"),dke.forEach(t),Nfo=i(S),rs=n(S,"LI",{});var aR=s(rs);Qde=n(aR,"STRONG",{});var v_t=s(Qde);qfo=r(v_t,"camembert"),v_t.forEach(t),jfo=r(aR," \u2014 "),oN=n(aR,"A",{href:!0});var F_t=s(oN);Dfo=r(F_t,"CamembertTokenizer"),F_t.forEach(t),Gfo=r(aR," or "),rN=n(aR,"A",{href:!0});var T_t=s(rN);Ofo=r(T_t,"CamembertTokenizerFast"),T_t.forEach(t),Vfo=r(aR," (CamemBERT model)"),aR.forEach(t),Xfo=i(S),Sh=n(S,"LI",{});var cke=s(Sh);Ude=n(cke,"STRONG",{});var M_t=s(Ude);zfo=r(M_t,"canine"),M_t.forEach(t),Wfo=r(cke," \u2014 "),tN=n(cke,"A",{href:!0});var E_t=s(tN);Qfo=r(E_t,"CanineTokenizer"),E_t.forEach(t),Ufo=r(cke," (CANINE model)"),cke.forEach(t),Hfo=i(S),ts=n(S,"LI",{});var nR=s(ts);Hde=n(nR,"STRONG",{});var C_t=s(Hde);Jfo=r(C_t,"clip"),C_t.forEach(t),Yfo=r(nR," \u2014 "),aN=n(nR,"A",{href:!0});var w_t=s(aN);Kfo=r(w_t,"CLIPTokenizer"),w_t.forEach(t),Zfo=r(nR," or "),nN=n(nR,"A",{href:!0});var A_t=s(nN);ego=r(A_t,"CLIPTokenizerFast"),A_t.forEach(t),ogo=r(nR," (CLIP model)"),nR.forEach(t),rgo=i(S),as=n(S,"LI",{});var sR=s(as);Jde=n(sR,"STRONG",{});var L_t=s(Jde);tgo=r(L_t,"codegen"),L_t.forEach(t),ago=r(sR," \u2014 "),sN=n(sR,"A",{href:!0});var y_t=s(sN);ngo=r(y_t,"CodeGenTokenizer"),y_t.forEach(t),sgo=r(sR," or "),lN=n(sR,"A",{href:!0});var x_t=s(lN);lgo=r(x_t,"CodeGenTokenizerFast"),x_t.forEach(t),igo=r(sR," (CodeGen model)"),sR.forEach(t),dgo=i(S),ns=n(S,"LI",{});var lR=s(ns);Yde=n(lR,"STRONG",{});var $_t=s(Yde);cgo=r($_t,"convbert"),$_t.forEach(t),mgo=r(lR," \u2014 "),iN=n(lR,"A",{href:!0});var k_t=s(iN);fgo=r(k_t,"ConvBertTokenizer"),k_t.forEach(t),ggo=r(lR," or "),dN=n(lR,"A",{href:!0});var S_t=s(dN);hgo=r(S_t,"ConvBertTokenizerFast"),S_t.forEach(t),ugo=r(lR," (ConvBERT model)"),lR.forEach(t),pgo=i(S),ss=n(S,"LI",{});var iR=s(ss);Kde=n(iR,"STRONG",{});var R_t=s(Kde);_go=r(R_t,"cpm"),R_t.forEach(t),bgo=r(iR," \u2014 "),cN=n(iR,"A",{href:!0});var P_t=s(cN);vgo=r(P_t,"CpmTokenizer"),P_t.forEach(t),Fgo=r(iR," or "),mN=n(iR,"A",{href:!0});var B_t=s(mN);Tgo=r(B_t,"CpmTokenizerFast"),B_t.forEach(t),Mgo=r(iR," (CPM model)"),iR.forEach(t),Ego=i(S),Rh=n(S,"LI",{});var mke=s(Rh);Zde=n(mke,"STRONG",{});var I_t=s(Zde);Cgo=r(I_t,"ctrl"),I_t.forEach(t),wgo=r(mke," \u2014 "),fN=n(mke,"A",{href:!0});var N_t=s(fN);Ago=r(N_t,"CTRLTokenizer"),N_t.forEach(t),Lgo=r(mke," (CTRL model)"),mke.forEach(t),ygo=i(S),ls=n(S,"LI",{});var dR=s(ls);ece=n(dR,"STRONG",{});var q_t=s(ece);xgo=r(q_t,"data2vec-text"),q_t.forEach(t),$go=r(dR," \u2014 "),gN=n(dR,"A",{href:!0});var j_t=s(gN);kgo=r(j_t,"RobertaTokenizer"),j_t.forEach(t),Sgo=r(dR," or "),hN=n(dR,"A",{href:!0});var D_t=s(hN);Rgo=r(D_t,"RobertaTokenizerFast"),D_t.forEach(t),Pgo=r(dR," (Data2VecText model)"),dR.forEach(t),Bgo=i(S),is=n(S,"LI",{});var cR=s(is);oce=n(cR,"STRONG",{});var G_t=s(oce);Igo=r(G_t,"deberta"),G_t.forEach(t),Ngo=r(cR," \u2014 "),uN=n(cR,"A",{href:!0});var O_t=s(uN);qgo=r(O_t,"DebertaTokenizer"),O_t.forEach(t),jgo=r(cR," or "),pN=n(cR,"A",{href:!0});var V_t=s(pN);Dgo=r(V_t,"DebertaTokenizerFast"),V_t.forEach(t),Ggo=r(cR," (DeBERTa model)"),cR.forEach(t),Ogo=i(S),ds=n(S,"LI",{});var mR=s(ds);rce=n(mR,"STRONG",{});var X_t=s(rce);Vgo=r(X_t,"deberta-v2"),X_t.forEach(t),Xgo=r(mR," \u2014 "),_N=n(mR,"A",{href:!0});var z_t=s(_N);zgo=r(z_t,"DebertaV2Tokenizer"),z_t.forEach(t),Wgo=r(mR," or "),bN=n(mR,"A",{href:!0});var W_t=s(bN);Qgo=r(W_t,"DebertaV2TokenizerFast"),W_t.forEach(t),Ugo=r(mR," (DeBERTa-v2 model)"),mR.forEach(t),Hgo=i(S),cs=n(S,"LI",{});var fR=s(cs);tce=n(fR,"STRONG",{});var Q_t=s(tce);Jgo=r(Q_t,"distilbert"),Q_t.forEach(t),Ygo=r(fR," \u2014 "),vN=n(fR,"A",{href:!0});var U_t=s(vN);Kgo=r(U_t,"DistilBertTokenizer"),U_t.forEach(t),Zgo=r(fR," or "),FN=n(fR,"A",{href:!0});var H_t=s(FN);eho=r(H_t,"DistilBertTokenizerFast"),H_t.forEach(t),oho=r(fR," (DistilBERT model)"),fR.forEach(t),rho=i(S),ms=n(S,"LI",{});var gR=s(ms);ace=n(gR,"STRONG",{});var J_t=s(ace);tho=r(J_t,"dpr"),J_t.forEach(t),aho=r(gR," \u2014 "),TN=n(gR,"A",{href:!0});var Y_t=s(TN);nho=r(Y_t,"DPRQuestionEncoderTokenizer"),Y_t.forEach(t),sho=r(gR," or "),MN=n(gR,"A",{href:!0});var K_t=s(MN);lho=r(K_t,"DPRQuestionEncoderTokenizerFast"),K_t.forEach(t),iho=r(gR," (DPR model)"),gR.forEach(t),dho=i(S),fs=n(S,"LI",{});var hR=s(fs);nce=n(hR,"STRONG",{});var Z_t=s(nce);cho=r(Z_t,"electra"),Z_t.forEach(t),mho=r(hR," \u2014 "),EN=n(hR,"A",{href:!0});var e2t=s(EN);fho=r(e2t,"ElectraTokenizer"),e2t.forEach(t),gho=r(hR," or "),CN=n(hR,"A",{href:!0});var o2t=s(CN);hho=r(o2t,"ElectraTokenizerFast"),o2t.forEach(t),uho=r(hR," (ELECTRA model)"),hR.forEach(t),pho=i(S),Ph=n(S,"LI",{});var fke=s(Ph);sce=n(fke,"STRONG",{});var r2t=s(sce);_ho=r(r2t,"flaubert"),r2t.forEach(t),bho=r(fke," \u2014 "),wN=n(fke,"A",{href:!0});var t2t=s(wN);vho=r(t2t,"FlaubertTokenizer"),t2t.forEach(t),Fho=r(fke," (FlauBERT model)"),fke.forEach(t),Tho=i(S),gs=n(S,"LI",{});var uR=s(gs);lce=n(uR,"STRONG",{});var a2t=s(lce);Mho=r(a2t,"fnet"),a2t.forEach(t),Eho=r(uR," \u2014 "),AN=n(uR,"A",{href:!0});var n2t=s(AN);Cho=r(n2t,"FNetTokenizer"),n2t.forEach(t),who=r(uR," or "),LN=n(uR,"A",{href:!0});var s2t=s(LN);Aho=r(s2t,"FNetTokenizerFast"),s2t.forEach(t),Lho=r(uR," (FNet model)"),uR.forEach(t),yho=i(S),Bh=n(S,"LI",{});var gke=s(Bh);ice=n(gke,"STRONG",{});var l2t=s(ice);xho=r(l2t,"fsmt"),l2t.forEach(t),$ho=r(gke," \u2014 "),yN=n(gke,"A",{href:!0});var i2t=s(yN);kho=r(i2t,"FSMTTokenizer"),i2t.forEach(t),Sho=r(gke," (FairSeq Machine-Translation model)"),gke.forEach(t),Rho=i(S),hs=n(S,"LI",{});var pR=s(hs);dce=n(pR,"STRONG",{});var d2t=s(dce);Pho=r(d2t,"funnel"),d2t.forEach(t),Bho=r(pR," \u2014 "),xN=n(pR,"A",{href:!0});var c2t=s(xN);Iho=r(c2t,"FunnelTokenizer"),c2t.forEach(t),Nho=r(pR," or "),$N=n(pR,"A",{href:!0});var m2t=s($N);qho=r(m2t,"FunnelTokenizerFast"),m2t.forEach(t),jho=r(pR," (Funnel Transformer model)"),pR.forEach(t),Dho=i(S),us=n(S,"LI",{});var _R=s(us);cce=n(_R,"STRONG",{});var f2t=s(cce);Gho=r(f2t,"gpt2"),f2t.forEach(t),Oho=r(_R," \u2014 "),kN=n(_R,"A",{href:!0});var g2t=s(kN);Vho=r(g2t,"GPT2Tokenizer"),g2t.forEach(t),Xho=r(_R," or "),SN=n(_R,"A",{href:!0});var h2t=s(SN);zho=r(h2t,"GPT2TokenizerFast"),h2t.forEach(t),Who=r(_R," (OpenAI GPT-2 model)"),_R.forEach(t),Qho=i(S),ps=n(S,"LI",{});var bR=s(ps);mce=n(bR,"STRONG",{});var u2t=s(mce);Uho=r(u2t,"gpt_neo"),u2t.forEach(t),Hho=r(bR," \u2014 "),RN=n(bR,"A",{href:!0});var p2t=s(RN);Jho=r(p2t,"GPT2Tokenizer"),p2t.forEach(t),Yho=r(bR," or "),PN=n(bR,"A",{href:!0});var _2t=s(PN);Kho=r(_2t,"GPT2TokenizerFast"),_2t.forEach(t),Zho=r(bR," (GPT Neo model)"),bR.forEach(t),euo=i(S),Ih=n(S,"LI",{});var hke=s(Ih);fce=n(hke,"STRONG",{});var b2t=s(fce);ouo=r(b2t,"gpt_neox"),b2t.forEach(t),ruo=r(hke," \u2014 "),BN=n(hke,"A",{href:!0});var v2t=s(BN);tuo=r(v2t,"GPTNeoXTokenizerFast"),v2t.forEach(t),auo=r(hke," (GPT NeoX model)"),hke.forEach(t),nuo=i(S),_s=n(S,"LI",{});var vR=s(_s);gce=n(vR,"STRONG",{});var F2t=s(gce);suo=r(F2t,"gptj"),F2t.forEach(t),luo=r(vR," \u2014 "),IN=n(vR,"A",{href:!0});var T2t=s(IN);iuo=r(T2t,"GPT2Tokenizer"),T2t.forEach(t),duo=r(vR," or "),NN=n(vR,"A",{href:!0});var M2t=s(NN);cuo=r(M2t,"GPT2TokenizerFast"),M2t.forEach(t),muo=r(vR," (GPT-J model)"),vR.forEach(t),fuo=i(S),bs=n(S,"LI",{});var FR=s(bs);hce=n(FR,"STRONG",{});var E2t=s(hce);guo=r(E2t,"groupvit"),E2t.forEach(t),huo=r(FR," \u2014 "),qN=n(FR,"A",{href:!0});var C2t=s(qN);uuo=r(C2t,"CLIPTokenizer"),C2t.forEach(t),puo=r(FR," or "),jN=n(FR,"A",{href:!0});var w2t=s(jN);_uo=r(w2t,"CLIPTokenizerFast"),w2t.forEach(t),buo=r(FR," (GroupViT model)"),FR.forEach(t),vuo=i(S),vs=n(S,"LI",{});var TR=s(vs);uce=n(TR,"STRONG",{});var A2t=s(uce);Fuo=r(A2t,"herbert"),A2t.forEach(t),Tuo=r(TR," \u2014 "),DN=n(TR,"A",{href:!0});var L2t=s(DN);Muo=r(L2t,"HerbertTokenizer"),L2t.forEach(t),Euo=r(TR," or "),GN=n(TR,"A",{href:!0});var y2t=s(GN);Cuo=r(y2t,"HerbertTokenizerFast"),y2t.forEach(t),wuo=r(TR," (HerBERT model)"),TR.forEach(t),Auo=i(S),Nh=n(S,"LI",{});var uke=s(Nh);pce=n(uke,"STRONG",{});var x2t=s(pce);Luo=r(x2t,"hubert"),x2t.forEach(t),yuo=r(uke," \u2014 "),ON=n(uke,"A",{href:!0});var $2t=s(ON);xuo=r($2t,"Wav2Vec2CTCTokenizer"),$2t.forEach(t),$uo=r(uke," (Hubert model)"),uke.forEach(t),kuo=i(S),Fs=n(S,"LI",{});var MR=s(Fs);_ce=n(MR,"STRONG",{});var k2t=s(_ce);Suo=r(k2t,"ibert"),k2t.forEach(t),Ruo=r(MR," \u2014 "),VN=n(MR,"A",{href:!0});var S2t=s(VN);Puo=r(S2t,"RobertaTokenizer"),S2t.forEach(t),Buo=r(MR," or "),XN=n(MR,"A",{href:!0});var R2t=s(XN);Iuo=r(R2t,"RobertaTokenizerFast"),R2t.forEach(t),Nuo=r(MR," (I-BERT model)"),MR.forEach(t),quo=i(S),Ts=n(S,"LI",{});var ER=s(Ts);bce=n(ER,"STRONG",{});var P2t=s(bce);juo=r(P2t,"layoutlm"),P2t.forEach(t),Duo=r(ER," \u2014 "),zN=n(ER,"A",{href:!0});var B2t=s(zN);Guo=r(B2t,"LayoutLMTokenizer"),B2t.forEach(t),Ouo=r(ER," or "),WN=n(ER,"A",{href:!0});var I2t=s(WN);Vuo=r(I2t,"LayoutLMTokenizerFast"),I2t.forEach(t),Xuo=r(ER," (LayoutLM model)"),ER.forEach(t),zuo=i(S),Ms=n(S,"LI",{});var CR=s(Ms);vce=n(CR,"STRONG",{});var N2t=s(vce);Wuo=r(N2t,"layoutlmv2"),N2t.forEach(t),Quo=r(CR," \u2014 "),QN=n(CR,"A",{href:!0});var q2t=s(QN);Uuo=r(q2t,"LayoutLMv2Tokenizer"),q2t.forEach(t),Huo=r(CR," or "),UN=n(CR,"A",{href:!0});var j2t=s(UN);Juo=r(j2t,"LayoutLMv2TokenizerFast"),j2t.forEach(t),Yuo=r(CR," (LayoutLMv2 model)"),CR.forEach(t),Kuo=i(S),Es=n(S,"LI",{});var wR=s(Es);Fce=n(wR,"STRONG",{});var D2t=s(Fce);Zuo=r(D2t,"layoutlmv3"),D2t.forEach(t),epo=r(wR," \u2014 "),HN=n(wR,"A",{href:!0});var G2t=s(HN);opo=r(G2t,"LayoutLMv3Tokenizer"),G2t.forEach(t),rpo=r(wR," or "),JN=n(wR,"A",{href:!0});var O2t=s(JN);tpo=r(O2t,"LayoutLMv3TokenizerFast"),O2t.forEach(t),apo=r(wR," (LayoutLMv3 model)"),wR.forEach(t),npo=i(S),Cs=n(S,"LI",{});var AR=s(Cs);Tce=n(AR,"STRONG",{});var V2t=s(Tce);spo=r(V2t,"layoutxlm"),V2t.forEach(t),lpo=r(AR," \u2014 "),YN=n(AR,"A",{href:!0});var X2t=s(YN);ipo=r(X2t,"LayoutXLMTokenizer"),X2t.forEach(t),dpo=r(AR," or "),KN=n(AR,"A",{href:!0});var z2t=s(KN);cpo=r(z2t,"LayoutXLMTokenizerFast"),z2t.forEach(t),mpo=r(AR," (LayoutXLM model)"),AR.forEach(t),fpo=i(S),ws=n(S,"LI",{});var LR=s(ws);Mce=n(LR,"STRONG",{});var W2t=s(Mce);gpo=r(W2t,"led"),W2t.forEach(t),hpo=r(LR," \u2014 "),ZN=n(LR,"A",{href:!0});var Q2t=s(ZN);upo=r(Q2t,"LEDTokenizer"),Q2t.forEach(t),ppo=r(LR," or "),eq=n(LR,"A",{href:!0});var U2t=s(eq);_po=r(U2t,"LEDTokenizerFast"),U2t.forEach(t),bpo=r(LR," (LED model)"),LR.forEach(t),vpo=i(S),As=n(S,"LI",{});var yR=s(As);Ece=n(yR,"STRONG",{});var H2t=s(Ece);Fpo=r(H2t,"longformer"),H2t.forEach(t),Tpo=r(yR," \u2014 "),oq=n(yR,"A",{href:!0});var J2t=s(oq);Mpo=r(J2t,"LongformerTokenizer"),J2t.forEach(t),Epo=r(yR," or "),rq=n(yR,"A",{href:!0});var Y2t=s(rq);Cpo=r(Y2t,"LongformerTokenizerFast"),Y2t.forEach(t),wpo=r(yR," (Longformer model)"),yR.forEach(t),Apo=i(S),Ls=n(S,"LI",{});var xR=s(Ls);Cce=n(xR,"STRONG",{});var K2t=s(Cce);Lpo=r(K2t,"longt5"),K2t.forEach(t),ypo=r(xR," \u2014 "),tq=n(xR,"A",{href:!0});var Z2t=s(tq);xpo=r(Z2t,"T5Tokenizer"),Z2t.forEach(t),$po=r(xR," or "),aq=n(xR,"A",{href:!0});var ebt=s(aq);kpo=r(ebt,"T5TokenizerFast"),ebt.forEach(t),Spo=r(xR," (LongT5 model)"),xR.forEach(t),Rpo=i(S),qh=n(S,"LI",{});var pke=s(qh);wce=n(pke,"STRONG",{});var obt=s(wce);Ppo=r(obt,"luke"),obt.forEach(t),Bpo=r(pke," \u2014 "),nq=n(pke,"A",{href:!0});var rbt=s(nq);Ipo=r(rbt,"LukeTokenizer"),rbt.forEach(t),Npo=r(pke," (LUKE model)"),pke.forEach(t),qpo=i(S),ys=n(S,"LI",{});var $R=s(ys);Ace=n($R,"STRONG",{});var tbt=s(Ace);jpo=r(tbt,"lxmert"),tbt.forEach(t),Dpo=r($R," \u2014 "),sq=n($R,"A",{href:!0});var abt=s(sq);Gpo=r(abt,"LxmertTokenizer"),abt.forEach(t),Opo=r($R," or "),lq=n($R,"A",{href:!0});var nbt=s(lq);Vpo=r(nbt,"LxmertTokenizerFast"),nbt.forEach(t),Xpo=r($R," (LXMERT model)"),$R.forEach(t),zpo=i(S),jh=n(S,"LI",{});var _ke=s(jh);Lce=n(_ke,"STRONG",{});var sbt=s(Lce);Wpo=r(sbt,"m2m_100"),sbt.forEach(t),Qpo=r(_ke," \u2014 "),iq=n(_ke,"A",{href:!0});var lbt=s(iq);Upo=r(lbt,"M2M100Tokenizer"),lbt.forEach(t),Hpo=r(_ke," (M2M100 model)"),_ke.forEach(t),Jpo=i(S),Dh=n(S,"LI",{});var bke=s(Dh);yce=n(bke,"STRONG",{});var ibt=s(yce);Ypo=r(ibt,"marian"),ibt.forEach(t),Kpo=r(bke," \u2014 "),dq=n(bke,"A",{href:!0});var dbt=s(dq);Zpo=r(dbt,"MarianTokenizer"),dbt.forEach(t),e_o=r(bke," (Marian model)"),bke.forEach(t),o_o=i(S),xs=n(S,"LI",{});var kR=s(xs);xce=n(kR,"STRONG",{});var cbt=s(xce);r_o=r(cbt,"mbart"),cbt.forEach(t),t_o=r(kR," \u2014 "),cq=n(kR,"A",{href:!0});var mbt=s(cq);a_o=r(mbt,"MBartTokenizer"),mbt.forEach(t),n_o=r(kR," or "),mq=n(kR,"A",{href:!0});var fbt=s(mq);s_o=r(fbt,"MBartTokenizerFast"),fbt.forEach(t),l_o=r(kR," (mBART model)"),kR.forEach(t),i_o=i(S),$s=n(S,"LI",{});var SR=s($s);$ce=n(SR,"STRONG",{});var gbt=s($ce);d_o=r(gbt,"mbart50"),gbt.forEach(t),c_o=r(SR," \u2014 "),fq=n(SR,"A",{href:!0});var hbt=s(fq);m_o=r(hbt,"MBart50Tokenizer"),hbt.forEach(t),f_o=r(SR," or "),gq=n(SR,"A",{href:!0});var ubt=s(gq);g_o=r(ubt,"MBart50TokenizerFast"),ubt.forEach(t),h_o=r(SR," (mBART-50 model)"),SR.forEach(t),u_o=i(S),ks=n(S,"LI",{});var RR=s(ks);kce=n(RR,"STRONG",{});var pbt=s(kce);p_o=r(pbt,"megatron-bert"),pbt.forEach(t),__o=r(RR," \u2014 "),hq=n(RR,"A",{href:!0});var _bt=s(hq);b_o=r(_bt,"BertTokenizer"),_bt.forEach(t),v_o=r(RR," or "),uq=n(RR,"A",{href:!0});var bbt=s(uq);F_o=r(bbt,"BertTokenizerFast"),bbt.forEach(t),T_o=r(RR," (Megatron-BERT model)"),RR.forEach(t),M_o=i(S),Gh=n(S,"LI",{});var vke=s(Gh);Sce=n(vke,"STRONG",{});var vbt=s(Sce);E_o=r(vbt,"mluke"),vbt.forEach(t),C_o=r(vke," \u2014 "),pq=n(vke,"A",{href:!0});var Fbt=s(pq);w_o=r(Fbt,"MLukeTokenizer"),Fbt.forEach(t),A_o=r(vke," (mLUKE model)"),vke.forEach(t),L_o=i(S),Ss=n(S,"LI",{});var PR=s(Ss);Rce=n(PR,"STRONG",{});var Tbt=s(Rce);y_o=r(Tbt,"mobilebert"),Tbt.forEach(t),x_o=r(PR," \u2014 "),_q=n(PR,"A",{href:!0});var Mbt=s(_q);$_o=r(Mbt,"MobileBertTokenizer"),Mbt.forEach(t),k_o=r(PR," or "),bq=n(PR,"A",{href:!0});var Ebt=s(bq);S_o=r(Ebt,"MobileBertTokenizerFast"),Ebt.forEach(t),R_o=r(PR," (MobileBERT model)"),PR.forEach(t),P_o=i(S),Rs=n(S,"LI",{});var BR=s(Rs);Pce=n(BR,"STRONG",{});var Cbt=s(Pce);B_o=r(Cbt,"mpnet"),Cbt.forEach(t),I_o=r(BR," \u2014 "),vq=n(BR,"A",{href:!0});var wbt=s(vq);N_o=r(wbt,"MPNetTokenizer"),wbt.forEach(t),q_o=r(BR," or "),Fq=n(BR,"A",{href:!0});var Abt=s(Fq);j_o=r(Abt,"MPNetTokenizerFast"),Abt.forEach(t),D_o=r(BR," (MPNet model)"),BR.forEach(t),G_o=i(S),Ps=n(S,"LI",{});var IR=s(Ps);Bce=n(IR,"STRONG",{});var Lbt=s(Bce);O_o=r(Lbt,"mt5"),Lbt.forEach(t),V_o=r(IR," \u2014 "),Tq=n(IR,"A",{href:!0});var ybt=s(Tq);X_o=r(ybt,"MT5Tokenizer"),ybt.forEach(t),z_o=r(IR," or "),Mq=n(IR,"A",{href:!0});var xbt=s(Mq);W_o=r(xbt,"MT5TokenizerFast"),xbt.forEach(t),Q_o=r(IR," (MT5 model)"),IR.forEach(t),U_o=i(S),Bs=n(S,"LI",{});var NR=s(Bs);Ice=n(NR,"STRONG",{});var $bt=s(Ice);H_o=r($bt,"mvp"),$bt.forEach(t),J_o=r(NR," \u2014 "),Eq=n(NR,"A",{href:!0});var kbt=s(Eq);Y_o=r(kbt,"MvpTokenizer"),kbt.forEach(t),K_o=r(NR," or "),Cq=n(NR,"A",{href:!0});var Sbt=s(Cq);Z_o=r(Sbt,"MvpTokenizerFast"),Sbt.forEach(t),e2o=r(NR," (MVP model)"),NR.forEach(t),o2o=i(S),Is=n(S,"LI",{});var qR=s(Is);Nce=n(qR,"STRONG",{});var Rbt=s(Nce);r2o=r(Rbt,"nezha"),Rbt.forEach(t),t2o=r(qR," \u2014 "),wq=n(qR,"A",{href:!0});var Pbt=s(wq);a2o=r(Pbt,"BertTokenizer"),Pbt.forEach(t),n2o=r(qR," or "),Aq=n(qR,"A",{href:!0});var Bbt=s(Aq);s2o=r(Bbt,"BertTokenizerFast"),Bbt.forEach(t),l2o=r(qR," (Nezha model)"),qR.forEach(t),i2o=i(S),Ns=n(S,"LI",{});var jR=s(Ns);qce=n(jR,"STRONG",{});var Ibt=s(qce);d2o=r(Ibt,"nllb"),Ibt.forEach(t),c2o=r(jR," \u2014 "),Lq=n(jR,"A",{href:!0});var Nbt=s(Lq);m2o=r(Nbt,"NllbTokenizer"),Nbt.forEach(t),f2o=r(jR," or "),yq=n(jR,"A",{href:!0});var qbt=s(yq);g2o=r(qbt,"NllbTokenizerFast"),qbt.forEach(t),h2o=r(jR," (NLLB model)"),jR.forEach(t),u2o=i(S),qs=n(S,"LI",{});var DR=s(qs);jce=n(DR,"STRONG",{});var jbt=s(jce);p2o=r(jbt,"nystromformer"),jbt.forEach(t),_2o=r(DR," \u2014 "),xq=n(DR,"A",{href:!0});var Dbt=s(xq);b2o=r(Dbt,"AlbertTokenizer"),Dbt.forEach(t),v2o=r(DR," or "),$q=n(DR,"A",{href:!0});var Gbt=s($q);F2o=r(Gbt,"AlbertTokenizerFast"),Gbt.forEach(t),T2o=r(DR," (Nystr\xF6mformer model)"),DR.forEach(t),M2o=i(S),js=n(S,"LI",{});var GR=s(js);Dce=n(GR,"STRONG",{});var Obt=s(Dce);E2o=r(Obt,"openai-gpt"),Obt.forEach(t),C2o=r(GR," \u2014 "),kq=n(GR,"A",{href:!0});var Vbt=s(kq);w2o=r(Vbt,"OpenAIGPTTokenizer"),Vbt.forEach(t),A2o=r(GR," or "),Sq=n(GR,"A",{href:!0});var Xbt=s(Sq);L2o=r(Xbt,"OpenAIGPTTokenizerFast"),Xbt.forEach(t),y2o=r(GR," (OpenAI GPT model)"),GR.forEach(t),x2o=i(S),Oh=n(S,"LI",{});var Fke=s(Oh);Gce=n(Fke,"STRONG",{});var zbt=s(Gce);$2o=r(zbt,"opt"),zbt.forEach(t),k2o=r(Fke," \u2014 "),Rq=n(Fke,"A",{href:!0});var Wbt=s(Rq);S2o=r(Wbt,"GPT2Tokenizer"),Wbt.forEach(t),R2o=r(Fke," (OPT model)"),Fke.forEach(t),P2o=i(S),Ds=n(S,"LI",{});var OR=s(Ds);Oce=n(OR,"STRONG",{});var Qbt=s(Oce);B2o=r(Qbt,"owlvit"),Qbt.forEach(t),I2o=r(OR," \u2014 "),Pq=n(OR,"A",{href:!0});var Ubt=s(Pq);N2o=r(Ubt,"CLIPTokenizer"),Ubt.forEach(t),q2o=r(OR," or "),Bq=n(OR,"A",{href:!0});var Hbt=s(Bq);j2o=r(Hbt,"CLIPTokenizerFast"),Hbt.forEach(t),D2o=r(OR," (OWL-ViT model)"),OR.forEach(t),G2o=i(S),Gs=n(S,"LI",{});var VR=s(Gs);Vce=n(VR,"STRONG",{});var Jbt=s(Vce);O2o=r(Jbt,"pegasus"),Jbt.forEach(t),V2o=r(VR," \u2014 "),Iq=n(VR,"A",{href:!0});var Ybt=s(Iq);X2o=r(Ybt,"PegasusTokenizer"),Ybt.forEach(t),z2o=r(VR," or "),Nq=n(VR,"A",{href:!0});var Kbt=s(Nq);W2o=r(Kbt,"PegasusTokenizerFast"),Kbt.forEach(t),Q2o=r(VR," (Pegasus model)"),VR.forEach(t),U2o=i(S),Vh=n(S,"LI",{});var Tke=s(Vh);Xce=n(Tke,"STRONG",{});var Zbt=s(Xce);H2o=r(Zbt,"perceiver"),Zbt.forEach(t),J2o=r(Tke," \u2014 "),qq=n(Tke,"A",{href:!0});var evt=s(qq);Y2o=r(evt,"PerceiverTokenizer"),evt.forEach(t),K2o=r(Tke," (Perceiver model)"),Tke.forEach(t),Z2o=i(S),Xh=n(S,"LI",{});var Mke=s(Xh);zce=n(Mke,"STRONG",{});var ovt=s(zce);ebo=r(ovt,"phobert"),ovt.forEach(t),obo=r(Mke," \u2014 "),jq=n(Mke,"A",{href:!0});var rvt=s(jq);rbo=r(rvt,"PhobertTokenizer"),rvt.forEach(t),tbo=r(Mke," (PhoBERT model)"),Mke.forEach(t),abo=i(S),zh=n(S,"LI",{});var Eke=s(zh);Wce=n(Eke,"STRONG",{});var tvt=s(Wce);nbo=r(tvt,"plbart"),tvt.forEach(t),sbo=r(Eke," \u2014 "),Dq=n(Eke,"A",{href:!0});var avt=s(Dq);lbo=r(avt,"PLBartTokenizer"),avt.forEach(t),ibo=r(Eke," (PLBart model)"),Eke.forEach(t),dbo=i(S),Wh=n(S,"LI",{});var Cke=s(Wh);Qce=n(Cke,"STRONG",{});var nvt=s(Qce);cbo=r(nvt,"prophetnet"),nvt.forEach(t),mbo=r(Cke," \u2014 "),Gq=n(Cke,"A",{href:!0});var svt=s(Gq);fbo=r(svt,"ProphetNetTokenizer"),svt.forEach(t),gbo=r(Cke," (ProphetNet model)"),Cke.forEach(t),hbo=i(S),Os=n(S,"LI",{});var XR=s(Os);Uce=n(XR,"STRONG",{});var lvt=s(Uce);ubo=r(lvt,"qdqbert"),lvt.forEach(t),pbo=r(XR," \u2014 "),Oq=n(XR,"A",{href:!0});var ivt=s(Oq);_bo=r(ivt,"BertTokenizer"),ivt.forEach(t),bbo=r(XR," or "),Vq=n(XR,"A",{href:!0});var dvt=s(Vq);vbo=r(dvt,"BertTokenizerFast"),dvt.forEach(t),Fbo=r(XR," (QDQBert model)"),XR.forEach(t),Tbo=i(S),Qh=n(S,"LI",{});var wke=s(Qh);Hce=n(wke,"STRONG",{});var cvt=s(Hce);Mbo=r(cvt,"rag"),cvt.forEach(t),Ebo=r(wke," \u2014 "),Xq=n(wke,"A",{href:!0});var mvt=s(Xq);Cbo=r(mvt,"RagTokenizer"),mvt.forEach(t),wbo=r(wke," (RAG model)"),wke.forEach(t),Abo=i(S),Vs=n(S,"LI",{});var zR=s(Vs);Jce=n(zR,"STRONG",{});var fvt=s(Jce);Lbo=r(fvt,"realm"),fvt.forEach(t),ybo=r(zR," \u2014 "),zq=n(zR,"A",{href:!0});var gvt=s(zq);xbo=r(gvt,"RealmTokenizer"),gvt.forEach(t),$bo=r(zR," or "),Wq=n(zR,"A",{href:!0});var hvt=s(Wq);kbo=r(hvt,"RealmTokenizerFast"),hvt.forEach(t),Sbo=r(zR," (REALM model)"),zR.forEach(t),Rbo=i(S),Xs=n(S,"LI",{});var WR=s(Xs);Yce=n(WR,"STRONG",{});var uvt=s(Yce);Pbo=r(uvt,"reformer"),uvt.forEach(t),Bbo=r(WR," \u2014 "),Qq=n(WR,"A",{href:!0});var pvt=s(Qq);Ibo=r(pvt,"ReformerTokenizer"),pvt.forEach(t),Nbo=r(WR," or "),Uq=n(WR,"A",{href:!0});var _vt=s(Uq);qbo=r(_vt,"ReformerTokenizerFast"),_vt.forEach(t),jbo=r(WR," (Reformer model)"),WR.forEach(t),Dbo=i(S),zs=n(S,"LI",{});var QR=s(zs);Kce=n(QR,"STRONG",{});var bvt=s(Kce);Gbo=r(bvt,"rembert"),bvt.forEach(t),Obo=r(QR," \u2014 "),Hq=n(QR,"A",{href:!0});var vvt=s(Hq);Vbo=r(vvt,"RemBertTokenizer"),vvt.forEach(t),Xbo=r(QR," or "),Jq=n(QR,"A",{href:!0});var Fvt=s(Jq);zbo=r(Fvt,"RemBertTokenizerFast"),Fvt.forEach(t),Wbo=r(QR," (RemBERT model)"),QR.forEach(t),Qbo=i(S),Ws=n(S,"LI",{});var UR=s(Ws);Zce=n(UR,"STRONG",{});var Tvt=s(Zce);Ubo=r(Tvt,"retribert"),Tvt.forEach(t),Hbo=r(UR," \u2014 "),Yq=n(UR,"A",{href:!0});var Mvt=s(Yq);Jbo=r(Mvt,"RetriBertTokenizer"),Mvt.forEach(t),Ybo=r(UR," or "),Kq=n(UR,"A",{href:!0});var Evt=s(Kq);Kbo=r(Evt,"RetriBertTokenizerFast"),Evt.forEach(t),Zbo=r(UR," (RetriBERT model)"),UR.forEach(t),evo=i(S),Qs=n(S,"LI",{});var HR=s(Qs);eme=n(HR,"STRONG",{});var Cvt=s(eme);ovo=r(Cvt,"roberta"),Cvt.forEach(t),rvo=r(HR," \u2014 "),Zq=n(HR,"A",{href:!0});var wvt=s(Zq);tvo=r(wvt,"RobertaTokenizer"),wvt.forEach(t),avo=r(HR," or "),ej=n(HR,"A",{href:!0});var Avt=s(ej);nvo=r(Avt,"RobertaTokenizerFast"),Avt.forEach(t),svo=r(HR," (RoBERTa model)"),HR.forEach(t),lvo=i(S),Us=n(S,"LI",{});var JR=s(Us);ome=n(JR,"STRONG",{});var Lvt=s(ome);ivo=r(Lvt,"roformer"),Lvt.forEach(t),dvo=r(JR," \u2014 "),oj=n(JR,"A",{href:!0});var yvt=s(oj);cvo=r(yvt,"RoFormerTokenizer"),yvt.forEach(t),mvo=r(JR," or "),rj=n(JR,"A",{href:!0});var xvt=s(rj);fvo=r(xvt,"RoFormerTokenizerFast"),xvt.forEach(t),gvo=r(JR," (RoFormer model)"),JR.forEach(t),hvo=i(S),Uh=n(S,"LI",{});var Ake=s(Uh);rme=n(Ake,"STRONG",{});var $vt=s(rme);uvo=r($vt,"speech_to_text"),$vt.forEach(t),pvo=r(Ake," \u2014 "),tj=n(Ake,"A",{href:!0});var kvt=s(tj);_vo=r(kvt,"Speech2TextTokenizer"),kvt.forEach(t),bvo=r(Ake," (Speech2Text model)"),Ake.forEach(t),vvo=i(S),Hh=n(S,"LI",{});var Lke=s(Hh);tme=n(Lke,"STRONG",{});var Svt=s(tme);Fvo=r(Svt,"speech_to_text_2"),Svt.forEach(t),Tvo=r(Lke," \u2014 "),aj=n(Lke,"A",{href:!0});var Rvt=s(aj);Mvo=r(Rvt,"Speech2Text2Tokenizer"),Rvt.forEach(t),Evo=r(Lke," (Speech2Text2 model)"),Lke.forEach(t),Cvo=i(S),Hs=n(S,"LI",{});var YR=s(Hs);ame=n(YR,"STRONG",{});var Pvt=s(ame);wvo=r(Pvt,"splinter"),Pvt.forEach(t),Avo=r(YR," \u2014 "),nj=n(YR,"A",{href:!0});var Bvt=s(nj);Lvo=r(Bvt,"SplinterTokenizer"),Bvt.forEach(t),yvo=r(YR," or "),sj=n(YR,"A",{href:!0});var Ivt=s(sj);xvo=r(Ivt,"SplinterTokenizerFast"),Ivt.forEach(t),$vo=r(YR," (Splinter model)"),YR.forEach(t),kvo=i(S),Js=n(S,"LI",{});var KR=s(Js);nme=n(KR,"STRONG",{});var Nvt=s(nme);Svo=r(Nvt,"squeezebert"),Nvt.forEach(t),Rvo=r(KR," \u2014 "),lj=n(KR,"A",{href:!0});var qvt=s(lj);Pvo=r(qvt,"SqueezeBertTokenizer"),qvt.forEach(t),Bvo=r(KR," or "),ij=n(KR,"A",{href:!0});var jvt=s(ij);Ivo=r(jvt,"SqueezeBertTokenizerFast"),jvt.forEach(t),Nvo=r(KR," (SqueezeBERT model)"),KR.forEach(t),qvo=i(S),Ys=n(S,"LI",{});var ZR=s(Ys);sme=n(ZR,"STRONG",{});var Dvt=s(sme);jvo=r(Dvt,"t5"),Dvt.forEach(t),Dvo=r(ZR," \u2014 "),dj=n(ZR,"A",{href:!0});var Gvt=s(dj);Gvo=r(Gvt,"T5Tokenizer"),Gvt.forEach(t),Ovo=r(ZR," or "),cj=n(ZR,"A",{href:!0});var Ovt=s(cj);Vvo=r(Ovt,"T5TokenizerFast"),Ovt.forEach(t),Xvo=r(ZR," (T5 model)"),ZR.forEach(t),zvo=i(S),Jh=n(S,"LI",{});var yke=s(Jh);lme=n(yke,"STRONG",{});var Vvt=s(lme);Wvo=r(Vvt,"tapas"),Vvt.forEach(t),Qvo=r(yke," \u2014 "),mj=n(yke,"A",{href:!0});var Xvt=s(mj);Uvo=r(Xvt,"TapasTokenizer"),Xvt.forEach(t),Hvo=r(yke," (TAPAS model)"),yke.forEach(t),Jvo=i(S),Yh=n(S,"LI",{});var xke=s(Yh);ime=n(xke,"STRONG",{});var zvt=s(ime);Yvo=r(zvt,"tapex"),zvt.forEach(t),Kvo=r(xke," \u2014 "),fj=n(xke,"A",{href:!0});var Wvt=s(fj);Zvo=r(Wvt,"TapexTokenizer"),Wvt.forEach(t),e1o=r(xke," (TAPEX model)"),xke.forEach(t),o1o=i(S),Kh=n(S,"LI",{});var $ke=s(Kh);dme=n($ke,"STRONG",{});var Qvt=s(dme);r1o=r(Qvt,"transfo-xl"),Qvt.forEach(t),t1o=r($ke," \u2014 "),gj=n($ke,"A",{href:!0});var Uvt=s(gj);a1o=r(Uvt,"TransfoXLTokenizer"),Uvt.forEach(t),n1o=r($ke," (Transformer-XL model)"),$ke.forEach(t),s1o=i(S),Ks=n(S,"LI",{});var eP=s(Ks);cme=n(eP,"STRONG",{});var Hvt=s(cme);l1o=r(Hvt,"vilt"),Hvt.forEach(t),i1o=r(eP," \u2014 "),hj=n(eP,"A",{href:!0});var Jvt=s(hj);d1o=r(Jvt,"BertTokenizer"),Jvt.forEach(t),c1o=r(eP," or "),uj=n(eP,"A",{href:!0});var Yvt=s(uj);m1o=r(Yvt,"BertTokenizerFast"),Yvt.forEach(t),f1o=r(eP," (ViLT model)"),eP.forEach(t),g1o=i(S),Zs=n(S,"LI",{});var oP=s(Zs);mme=n(oP,"STRONG",{});var Kvt=s(mme);h1o=r(Kvt,"visual_bert"),Kvt.forEach(t),u1o=r(oP," \u2014 "),pj=n(oP,"A",{href:!0});var Zvt=s(pj);p1o=r(Zvt,"BertTokenizer"),Zvt.forEach(t),_1o=r(oP," or "),_j=n(oP,"A",{href:!0});var e1t=s(_j);b1o=r(e1t,"BertTokenizerFast"),e1t.forEach(t),v1o=r(oP," (VisualBERT model)"),oP.forEach(t),F1o=i(S),Zh=n(S,"LI",{});var kke=s(Zh);fme=n(kke,"STRONG",{});var o1t=s(fme);T1o=r(o1t,"wav2vec2"),o1t.forEach(t),M1o=r(kke," \u2014 "),bj=n(kke,"A",{href:!0});var r1t=s(bj);E1o=r(r1t,"Wav2Vec2CTCTokenizer"),r1t.forEach(t),C1o=r(kke," (Wav2Vec2 model)"),kke.forEach(t),w1o=i(S),eu=n(S,"LI",{});var Ske=s(eu);gme=n(Ske,"STRONG",{});var t1t=s(gme);A1o=r(t1t,"wav2vec2-conformer"),t1t.forEach(t),L1o=r(Ske," \u2014 "),vj=n(Ske,"A",{href:!0});var a1t=s(vj);y1o=r(a1t,"Wav2Vec2CTCTokenizer"),a1t.forEach(t),x1o=r(Ske," (Wav2Vec2-Conformer model)"),Ske.forEach(t),$1o=i(S),ou=n(S,"LI",{});var Rke=s(ou);hme=n(Rke,"STRONG",{});var n1t=s(hme);k1o=r(n1t,"wav2vec2_phoneme"),n1t.forEach(t),S1o=r(Rke," \u2014 "),Fj=n(Rke,"A",{href:!0});var s1t=s(Fj);R1o=r(s1t,"Wav2Vec2PhonemeCTCTokenizer"),s1t.forEach(t),P1o=r(Rke," (Wav2Vec2Phoneme model)"),Rke.forEach(t),B1o=i(S),el=n(S,"LI",{});var rP=s(el);ume=n(rP,"STRONG",{});var l1t=s(ume);I1o=r(l1t,"xglm"),l1t.forEach(t),N1o=r(rP," \u2014 "),Tj=n(rP,"A",{href:!0});var i1t=s(Tj);q1o=r(i1t,"XGLMTokenizer"),i1t.forEach(t),j1o=r(rP," or "),Mj=n(rP,"A",{href:!0});var d1t=s(Mj);D1o=r(d1t,"XGLMTokenizerFast"),d1t.forEach(t),G1o=r(rP," (XGLM model)"),rP.forEach(t),O1o=i(S),ru=n(S,"LI",{});var Pke=s(ru);pme=n(Pke,"STRONG",{});var c1t=s(pme);V1o=r(c1t,"xlm"),c1t.forEach(t),X1o=r(Pke," \u2014 "),Ej=n(Pke,"A",{href:!0});var m1t=s(Ej);z1o=r(m1t,"XLMTokenizer"),m1t.forEach(t),W1o=r(Pke," (XLM model)"),Pke.forEach(t),Q1o=i(S),tu=n(S,"LI",{});var Bke=s(tu);_me=n(Bke,"STRONG",{});var f1t=s(_me);U1o=r(f1t,"xlm-prophetnet"),f1t.forEach(t),H1o=r(Bke," \u2014 "),Cj=n(Bke,"A",{href:!0});var g1t=s(Cj);J1o=r(g1t,"XLMProphetNetTokenizer"),g1t.forEach(t),Y1o=r(Bke," (XLM-ProphetNet model)"),Bke.forEach(t),K1o=i(S),ol=n(S,"LI",{});var tP=s(ol);bme=n(tP,"STRONG",{});var h1t=s(bme);Z1o=r(h1t,"xlm-roberta"),h1t.forEach(t),eFo=r(tP," \u2014 "),wj=n(tP,"A",{href:!0});var u1t=s(wj);oFo=r(u1t,"XLMRobertaTokenizer"),u1t.forEach(t),rFo=r(tP," or "),Aj=n(tP,"A",{href:!0});var p1t=s(Aj);tFo=r(p1t,"XLMRobertaTokenizerFast"),p1t.forEach(t),aFo=r(tP," (XLM-RoBERTa model)"),tP.forEach(t),nFo=i(S),rl=n(S,"LI",{});var aP=s(rl);vme=n(aP,"STRONG",{});var _1t=s(vme);sFo=r(_1t,"xlm-roberta-xl"),_1t.forEach(t),lFo=r(aP," \u2014 "),Lj=n(aP,"A",{href:!0});var b1t=s(Lj);iFo=r(b1t,"RobertaTokenizer"),b1t.forEach(t),dFo=r(aP," or "),yj=n(aP,"A",{href:!0});var v1t=s(yj);cFo=r(v1t,"RobertaTokenizerFast"),v1t.forEach(t),mFo=r(aP," (XLM-RoBERTa-XL model)"),aP.forEach(t),fFo=i(S),tl=n(S,"LI",{});var nP=s(tl);Fme=n(nP,"STRONG",{});var F1t=s(Fme);gFo=r(F1t,"xlnet"),F1t.forEach(t),hFo=r(nP," \u2014 "),xj=n(nP,"A",{href:!0});var T1t=s(xj);uFo=r(T1t,"XLNetTokenizer"),T1t.forEach(t),pFo=r(nP," or "),$j=n(nP,"A",{href:!0});var M1t=s($j);_Fo=r(M1t,"XLNetTokenizerFast"),M1t.forEach(t),bFo=r(nP," (XLNet model)"),nP.forEach(t),vFo=i(S),al=n(S,"LI",{});var sP=s(al);Tme=n(sP,"STRONG",{});var E1t=s(Tme);FFo=r(E1t,"yoso"),E1t.forEach(t),TFo=r(sP," \u2014 "),kj=n(sP,"A",{href:!0});var C1t=s(kj);MFo=r(C1t,"AlbertTokenizer"),C1t.forEach(t),EFo=r(sP," or "),Sj=n(sP,"A",{href:!0});var w1t=s(Sj);CFo=r(w1t,"AlbertTokenizerFast"),w1t.forEach(t),wFo=r(sP," (YOSO model)"),sP.forEach(t),S.forEach(t),AFo=i(ml),T(au.$$.fragment,ml),ml.forEach(t),LFo=i(cl),nu=n(cl,"DIV",{class:!0});var NJe=s(nu);T(I8.$$.fragment,NJe),yFo=i(NJe),Mme=n(NJe,"P",{});var A1t=s(Mme);xFo=r(A1t,"Register a new tokenizer in this mapping."),A1t.forEach(t),NJe.forEach(t),cl.forEach(t),SUe=i(m),Zi=n(m,"H2",{class:!0});var qJe=s(Zi);su=n(qJe,"A",{id:!0,class:!0,href:!0});var L1t=s(su);Eme=n(L1t,"SPAN",{});var y1t=s(Eme);T(N8.$$.fragment,y1t),y1t.forEach(t),L1t.forEach(t),$Fo=i(qJe),Cme=n(qJe,"SPAN",{});var x1t=s(Cme);kFo=r(x1t,"AutoFeatureExtractor"),x1t.forEach(t),qJe.forEach(t),RUe=i(m),$o=n(m,"DIV",{class:!0});var fl=s($o);T(q8.$$.fragment,fl),SFo=i(fl),j8=n(fl,"P",{});var jJe=s(j8);RFo=r(jJe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Rj=n(jJe,"A",{href:!0});var $1t=s(Rj);PFo=r($1t,"AutoFeatureExtractor.from_pretrained()"),$1t.forEach(t),BFo=r(jJe," class method."),jJe.forEach(t),IFo=i(fl),D8=n(fl,"P",{});var DJe=s(D8);NFo=r(DJe,"This class cannot be instantiated directly using "),wme=n(DJe,"CODE",{});var k1t=s(wme);qFo=r(k1t,"__init__()"),k1t.forEach(t),jFo=r(DJe," (throws an error)."),DJe.forEach(t),DFo=i(fl),Je=n(fl,"DIV",{class:!0});var ma=s(Je);T(G8.$$.fragment,ma),GFo=i(ma),Ame=n(ma,"P",{});var S1t=s(Ame);OFo=r(S1t,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),S1t.forEach(t),VFo=i(ma),Oa=n(ma,"P",{});var TL=s(Oa);XFo=r(TL,"The feature extractor class to instantiate is selected based on the "),Lme=n(TL,"CODE",{});var R1t=s(Lme);zFo=r(R1t,"model_type"),R1t.forEach(t),WFo=r(TL,` property of the config object
(either passed as an argument or loaded from `),yme=n(TL,"CODE",{});var P1t=s(yme);QFo=r(P1t,"pretrained_model_name_or_path"),P1t.forEach(t),UFo=r(TL,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),xme=n(TL,"CODE",{});var B1t=s(xme);HFo=r(B1t,"pretrained_model_name_or_path"),B1t.forEach(t),JFo=r(TL,":"),TL.forEach(t),YFo=i(ma),Q=n(ma,"UL",{});var J=s(Q);lu=n(J,"LI",{});var Ike=s(lu);$me=n(Ike,"STRONG",{});var I1t=s($me);KFo=r(I1t,"beit"),I1t.forEach(t),ZFo=r(Ike," \u2014 "),Pj=n(Ike,"A",{href:!0});var N1t=s(Pj);eTo=r(N1t,"BeitFeatureExtractor"),N1t.forEach(t),oTo=r(Ike," (BEiT model)"),Ike.forEach(t),rTo=i(J),iu=n(J,"LI",{});var Nke=s(iu);kme=n(Nke,"STRONG",{});var q1t=s(kme);tTo=r(q1t,"clip"),q1t.forEach(t),aTo=r(Nke," \u2014 "),Bj=n(Nke,"A",{href:!0});var j1t=s(Bj);nTo=r(j1t,"CLIPFeatureExtractor"),j1t.forEach(t),sTo=r(Nke," (CLIP model)"),Nke.forEach(t),lTo=i(J),du=n(J,"LI",{});var qke=s(du);Sme=n(qke,"STRONG",{});var D1t=s(Sme);iTo=r(D1t,"convnext"),D1t.forEach(t),dTo=r(qke," \u2014 "),Ij=n(qke,"A",{href:!0});var G1t=s(Ij);cTo=r(G1t,"ConvNextFeatureExtractor"),G1t.forEach(t),mTo=r(qke," (ConvNeXT model)"),qke.forEach(t),fTo=i(J),cu=n(J,"LI",{});var jke=s(cu);Rme=n(jke,"STRONG",{});var O1t=s(Rme);gTo=r(O1t,"cvt"),O1t.forEach(t),hTo=r(jke," \u2014 "),Nj=n(jke,"A",{href:!0});var V1t=s(Nj);uTo=r(V1t,"ConvNextFeatureExtractor"),V1t.forEach(t),pTo=r(jke," (CvT model)"),jke.forEach(t),_To=i(J),mu=n(J,"LI",{});var Dke=s(mu);Pme=n(Dke,"STRONG",{});var X1t=s(Pme);bTo=r(X1t,"data2vec-audio"),X1t.forEach(t),vTo=r(Dke," \u2014 "),qj=n(Dke,"A",{href:!0});var z1t=s(qj);FTo=r(z1t,"Wav2Vec2FeatureExtractor"),z1t.forEach(t),TTo=r(Dke," (Data2VecAudio model)"),Dke.forEach(t),MTo=i(J),fu=n(J,"LI",{});var Gke=s(fu);Bme=n(Gke,"STRONG",{});var W1t=s(Bme);ETo=r(W1t,"data2vec-vision"),W1t.forEach(t),CTo=r(Gke," \u2014 "),jj=n(Gke,"A",{href:!0});var Q1t=s(jj);wTo=r(Q1t,"BeitFeatureExtractor"),Q1t.forEach(t),ATo=r(Gke," (Data2VecVision model)"),Gke.forEach(t),LTo=i(J),gu=n(J,"LI",{});var Oke=s(gu);Ime=n(Oke,"STRONG",{});var U1t=s(Ime);yTo=r(U1t,"deit"),U1t.forEach(t),xTo=r(Oke," \u2014 "),Dj=n(Oke,"A",{href:!0});var H1t=s(Dj);$To=r(H1t,"DeiTFeatureExtractor"),H1t.forEach(t),kTo=r(Oke," (DeiT model)"),Oke.forEach(t),STo=i(J),hu=n(J,"LI",{});var Vke=s(hu);Nme=n(Vke,"STRONG",{});var J1t=s(Nme);RTo=r(J1t,"detr"),J1t.forEach(t),PTo=r(Vke," \u2014 "),Gj=n(Vke,"A",{href:!0});var Y1t=s(Gj);BTo=r(Y1t,"DetrFeatureExtractor"),Y1t.forEach(t),ITo=r(Vke," (DETR model)"),Vke.forEach(t),NTo=i(J),uu=n(J,"LI",{});var Xke=s(uu);qme=n(Xke,"STRONG",{});var K1t=s(qme);qTo=r(K1t,"donut"),K1t.forEach(t),jTo=r(Xke," \u2014 "),Oj=n(Xke,"A",{href:!0});var Z1t=s(Oj);DTo=r(Z1t,"DonutFeatureExtractor"),Z1t.forEach(t),GTo=r(Xke," (Donut model)"),Xke.forEach(t),OTo=i(J),pu=n(J,"LI",{});var zke=s(pu);jme=n(zke,"STRONG",{});var eFt=s(jme);VTo=r(eFt,"dpt"),eFt.forEach(t),XTo=r(zke," \u2014 "),Vj=n(zke,"A",{href:!0});var oFt=s(Vj);zTo=r(oFt,"DPTFeatureExtractor"),oFt.forEach(t),WTo=r(zke," (DPT model)"),zke.forEach(t),QTo=i(J),_u=n(J,"LI",{});var Wke=s(_u);Dme=n(Wke,"STRONG",{});var rFt=s(Dme);UTo=r(rFt,"flava"),rFt.forEach(t),HTo=r(Wke," \u2014 "),Xj=n(Wke,"A",{href:!0});var tFt=s(Xj);JTo=r(tFt,"FlavaFeatureExtractor"),tFt.forEach(t),YTo=r(Wke," (FLAVA model)"),Wke.forEach(t),KTo=i(J),bu=n(J,"LI",{});var Qke=s(bu);Gme=n(Qke,"STRONG",{});var aFt=s(Gme);ZTo=r(aFt,"glpn"),aFt.forEach(t),eMo=r(Qke," \u2014 "),zj=n(Qke,"A",{href:!0});var nFt=s(zj);oMo=r(nFt,"GLPNFeatureExtractor"),nFt.forEach(t),rMo=r(Qke," (GLPN model)"),Qke.forEach(t),tMo=i(J),vu=n(J,"LI",{});var Uke=s(vu);Ome=n(Uke,"STRONG",{});var sFt=s(Ome);aMo=r(sFt,"groupvit"),sFt.forEach(t),nMo=r(Uke," \u2014 "),Wj=n(Uke,"A",{href:!0});var lFt=s(Wj);sMo=r(lFt,"CLIPFeatureExtractor"),lFt.forEach(t),lMo=r(Uke," (GroupViT model)"),Uke.forEach(t),iMo=i(J),Fu=n(J,"LI",{});var Hke=s(Fu);Vme=n(Hke,"STRONG",{});var iFt=s(Vme);dMo=r(iFt,"hubert"),iFt.forEach(t),cMo=r(Hke," \u2014 "),Qj=n(Hke,"A",{href:!0});var dFt=s(Qj);mMo=r(dFt,"Wav2Vec2FeatureExtractor"),dFt.forEach(t),fMo=r(Hke," (Hubert model)"),Hke.forEach(t),gMo=i(J),Tu=n(J,"LI",{});var Jke=s(Tu);Xme=n(Jke,"STRONG",{});var cFt=s(Xme);hMo=r(cFt,"imagegpt"),cFt.forEach(t),uMo=r(Jke," \u2014 "),Uj=n(Jke,"A",{href:!0});var mFt=s(Uj);pMo=r(mFt,"ImageGPTFeatureExtractor"),mFt.forEach(t),_Mo=r(Jke," (ImageGPT model)"),Jke.forEach(t),bMo=i(J),Mu=n(J,"LI",{});var Yke=s(Mu);zme=n(Yke,"STRONG",{});var fFt=s(zme);vMo=r(fFt,"layoutlmv2"),fFt.forEach(t),FMo=r(Yke," \u2014 "),Hj=n(Yke,"A",{href:!0});var gFt=s(Hj);TMo=r(gFt,"LayoutLMv2FeatureExtractor"),gFt.forEach(t),MMo=r(Yke," (LayoutLMv2 model)"),Yke.forEach(t),EMo=i(J),Eu=n(J,"LI",{});var Kke=s(Eu);Wme=n(Kke,"STRONG",{});var hFt=s(Wme);CMo=r(hFt,"layoutlmv3"),hFt.forEach(t),wMo=r(Kke," \u2014 "),Jj=n(Kke,"A",{href:!0});var uFt=s(Jj);AMo=r(uFt,"LayoutLMv3FeatureExtractor"),uFt.forEach(t),LMo=r(Kke," (LayoutLMv3 model)"),Kke.forEach(t),yMo=i(J),Cu=n(J,"LI",{});var Zke=s(Cu);Qme=n(Zke,"STRONG",{});var pFt=s(Qme);xMo=r(pFt,"levit"),pFt.forEach(t),$Mo=r(Zke," \u2014 "),Yj=n(Zke,"A",{href:!0});var _Ft=s(Yj);kMo=r(_Ft,"LevitFeatureExtractor"),_Ft.forEach(t),SMo=r(Zke," (LeViT model)"),Zke.forEach(t),RMo=i(J),wu=n(J,"LI",{});var eSe=s(wu);Ume=n(eSe,"STRONG",{});var bFt=s(Ume);PMo=r(bFt,"maskformer"),bFt.forEach(t),BMo=r(eSe," \u2014 "),Kj=n(eSe,"A",{href:!0});var vFt=s(Kj);IMo=r(vFt,"MaskFormerFeatureExtractor"),vFt.forEach(t),NMo=r(eSe," (MaskFormer model)"),eSe.forEach(t),qMo=i(J),Au=n(J,"LI",{});var oSe=s(Au);Hme=n(oSe,"STRONG",{});var FFt=s(Hme);jMo=r(FFt,"mctct"),FFt.forEach(t),DMo=r(oSe," \u2014 "),Zj=n(oSe,"A",{href:!0});var TFt=s(Zj);GMo=r(TFt,"MCTCTFeatureExtractor"),TFt.forEach(t),OMo=r(oSe," (M-CTC-T model)"),oSe.forEach(t),VMo=i(J),Lu=n(J,"LI",{});var rSe=s(Lu);Jme=n(rSe,"STRONG",{});var MFt=s(Jme);XMo=r(MFt,"mobilevit"),MFt.forEach(t),zMo=r(rSe," \u2014 "),eD=n(rSe,"A",{href:!0});var EFt=s(eD);WMo=r(EFt,"MobileViTFeatureExtractor"),EFt.forEach(t),QMo=r(rSe," (MobileViT model)"),rSe.forEach(t),UMo=i(J),yu=n(J,"LI",{});var tSe=s(yu);Yme=n(tSe,"STRONG",{});var CFt=s(Yme);HMo=r(CFt,"owlvit"),CFt.forEach(t),JMo=r(tSe," \u2014 "),oD=n(tSe,"A",{href:!0});var wFt=s(oD);YMo=r(wFt,"OwlViTFeatureExtractor"),wFt.forEach(t),KMo=r(tSe," (OWL-ViT model)"),tSe.forEach(t),ZMo=i(J),xu=n(J,"LI",{});var aSe=s(xu);Kme=n(aSe,"STRONG",{});var AFt=s(Kme);eEo=r(AFt,"perceiver"),AFt.forEach(t),oEo=r(aSe," \u2014 "),rD=n(aSe,"A",{href:!0});var LFt=s(rD);rEo=r(LFt,"PerceiverFeatureExtractor"),LFt.forEach(t),tEo=r(aSe," (Perceiver model)"),aSe.forEach(t),aEo=i(J),$u=n(J,"LI",{});var nSe=s($u);Zme=n(nSe,"STRONG",{});var yFt=s(Zme);nEo=r(yFt,"poolformer"),yFt.forEach(t),sEo=r(nSe," \u2014 "),tD=n(nSe,"A",{href:!0});var xFt=s(tD);lEo=r(xFt,"PoolFormerFeatureExtractor"),xFt.forEach(t),iEo=r(nSe," (PoolFormer model)"),nSe.forEach(t),dEo=i(J),ku=n(J,"LI",{});var sSe=s(ku);efe=n(sSe,"STRONG",{});var $Ft=s(efe);cEo=r($Ft,"regnet"),$Ft.forEach(t),mEo=r(sSe," \u2014 "),aD=n(sSe,"A",{href:!0});var kFt=s(aD);fEo=r(kFt,"ConvNextFeatureExtractor"),kFt.forEach(t),gEo=r(sSe," (RegNet model)"),sSe.forEach(t),hEo=i(J),Su=n(J,"LI",{});var lSe=s(Su);ofe=n(lSe,"STRONG",{});var SFt=s(ofe);uEo=r(SFt,"resnet"),SFt.forEach(t),pEo=r(lSe," \u2014 "),nD=n(lSe,"A",{href:!0});var RFt=s(nD);_Eo=r(RFt,"ConvNextFeatureExtractor"),RFt.forEach(t),bEo=r(lSe," (ResNet model)"),lSe.forEach(t),vEo=i(J),Ru=n(J,"LI",{});var iSe=s(Ru);rfe=n(iSe,"STRONG",{});var PFt=s(rfe);FEo=r(PFt,"segformer"),PFt.forEach(t),TEo=r(iSe," \u2014 "),sD=n(iSe,"A",{href:!0});var BFt=s(sD);MEo=r(BFt,"SegformerFeatureExtractor"),BFt.forEach(t),EEo=r(iSe," (SegFormer model)"),iSe.forEach(t),CEo=i(J),Pu=n(J,"LI",{});var dSe=s(Pu);tfe=n(dSe,"STRONG",{});var IFt=s(tfe);wEo=r(IFt,"speech_to_text"),IFt.forEach(t),AEo=r(dSe," \u2014 "),lD=n(dSe,"A",{href:!0});var NFt=s(lD);LEo=r(NFt,"Speech2TextFeatureExtractor"),NFt.forEach(t),yEo=r(dSe," (Speech2Text model)"),dSe.forEach(t),xEo=i(J),Bu=n(J,"LI",{});var cSe=s(Bu);afe=n(cSe,"STRONG",{});var qFt=s(afe);$Eo=r(qFt,"swin"),qFt.forEach(t),kEo=r(cSe," \u2014 "),iD=n(cSe,"A",{href:!0});var jFt=s(iD);SEo=r(jFt,"ViTFeatureExtractor"),jFt.forEach(t),REo=r(cSe," (Swin Transformer model)"),cSe.forEach(t),PEo=i(J),Iu=n(J,"LI",{});var mSe=s(Iu);nfe=n(mSe,"STRONG",{});var DFt=s(nfe);BEo=r(DFt,"swinv2"),DFt.forEach(t),IEo=r(mSe," \u2014 "),dD=n(mSe,"A",{href:!0});var GFt=s(dD);NEo=r(GFt,"ViTFeatureExtractor"),GFt.forEach(t),qEo=r(mSe," (Swin Transformer V2 model)"),mSe.forEach(t),jEo=i(J),Nu=n(J,"LI",{});var fSe=s(Nu);sfe=n(fSe,"STRONG",{});var OFt=s(sfe);DEo=r(OFt,"van"),OFt.forEach(t),GEo=r(fSe," \u2014 "),cD=n(fSe,"A",{href:!0});var VFt=s(cD);OEo=r(VFt,"ConvNextFeatureExtractor"),VFt.forEach(t),VEo=r(fSe," (VAN model)"),fSe.forEach(t),XEo=i(J),qu=n(J,"LI",{});var gSe=s(qu);lfe=n(gSe,"STRONG",{});var XFt=s(lfe);zEo=r(XFt,"videomae"),XFt.forEach(t),WEo=r(gSe," \u2014 "),mD=n(gSe,"A",{href:!0});var zFt=s(mD);QEo=r(zFt,"VideoMAEFeatureExtractor"),zFt.forEach(t),UEo=r(gSe," (VideoMAE model)"),gSe.forEach(t),HEo=i(J),ju=n(J,"LI",{});var hSe=s(ju);ife=n(hSe,"STRONG",{});var WFt=s(ife);JEo=r(WFt,"vilt"),WFt.forEach(t),YEo=r(hSe," \u2014 "),fD=n(hSe,"A",{href:!0});var QFt=s(fD);KEo=r(QFt,"ViltFeatureExtractor"),QFt.forEach(t),ZEo=r(hSe," (ViLT model)"),hSe.forEach(t),e4o=i(J),Du=n(J,"LI",{});var uSe=s(Du);dfe=n(uSe,"STRONG",{});var UFt=s(dfe);o4o=r(UFt,"vit"),UFt.forEach(t),r4o=r(uSe," \u2014 "),gD=n(uSe,"A",{href:!0});var HFt=s(gD);t4o=r(HFt,"ViTFeatureExtractor"),HFt.forEach(t),a4o=r(uSe," (ViT model)"),uSe.forEach(t),n4o=i(J),Gu=n(J,"LI",{});var pSe=s(Gu);cfe=n(pSe,"STRONG",{});var JFt=s(cfe);s4o=r(JFt,"vit_mae"),JFt.forEach(t),l4o=r(pSe," \u2014 "),hD=n(pSe,"A",{href:!0});var YFt=s(hD);i4o=r(YFt,"ViTFeatureExtractor"),YFt.forEach(t),d4o=r(pSe," (ViTMAE model)"),pSe.forEach(t),c4o=i(J),Ou=n(J,"LI",{});var _Se=s(Ou);mfe=n(_Se,"STRONG",{});var KFt=s(mfe);m4o=r(KFt,"wav2vec2"),KFt.forEach(t),f4o=r(_Se," \u2014 "),uD=n(_Se,"A",{href:!0});var ZFt=s(uD);g4o=r(ZFt,"Wav2Vec2FeatureExtractor"),ZFt.forEach(t),h4o=r(_Se," (Wav2Vec2 model)"),_Se.forEach(t),u4o=i(J),Vu=n(J,"LI",{});var bSe=s(Vu);ffe=n(bSe,"STRONG",{});var eTt=s(ffe);p4o=r(eTt,"wav2vec2-conformer"),eTt.forEach(t),_4o=r(bSe," \u2014 "),pD=n(bSe,"A",{href:!0});var oTt=s(pD);b4o=r(oTt,"Wav2Vec2FeatureExtractor"),oTt.forEach(t),v4o=r(bSe," (Wav2Vec2-Conformer model)"),bSe.forEach(t),F4o=i(J),Xu=n(J,"LI",{});var vSe=s(Xu);gfe=n(vSe,"STRONG",{});var rTt=s(gfe);T4o=r(rTt,"yolos"),rTt.forEach(t),M4o=r(vSe," \u2014 "),_D=n(vSe,"A",{href:!0});var tTt=s(_D);E4o=r(tTt,"YolosFeatureExtractor"),tTt.forEach(t),C4o=r(vSe," (YOLOS model)"),vSe.forEach(t),J.forEach(t),w4o=i(ma),T(zu.$$.fragment,ma),A4o=i(ma),T(Wu.$$.fragment,ma),ma.forEach(t),L4o=i(fl),Qu=n(fl,"DIV",{class:!0});var GJe=s(Qu);T(O8.$$.fragment,GJe),y4o=i(GJe),hfe=n(GJe,"P",{});var aTt=s(hfe);x4o=r(aTt,"Register a new feature extractor for this class."),aTt.forEach(t),GJe.forEach(t),fl.forEach(t),PUe=i(m),ed=n(m,"H2",{class:!0});var OJe=s(ed);Uu=n(OJe,"A",{id:!0,class:!0,href:!0});var nTt=s(Uu);ufe=n(nTt,"SPAN",{});var sTt=s(ufe);T(V8.$$.fragment,sTt),sTt.forEach(t),nTt.forEach(t),$4o=i(OJe),pfe=n(OJe,"SPAN",{});var lTt=s(pfe);k4o=r(lTt,"AutoProcessor"),lTt.forEach(t),OJe.forEach(t),BUe=i(m),ko=n(m,"DIV",{class:!0});var gl=s(ko);T(X8.$$.fragment,gl),S4o=i(gl),z8=n(gl,"P",{});var VJe=s(z8);R4o=r(VJe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),bD=n(VJe,"A",{href:!0});var iTt=s(bD);P4o=r(iTt,"AutoProcessor.from_pretrained()"),iTt.forEach(t),B4o=r(VJe," class method."),VJe.forEach(t),I4o=i(gl),W8=n(gl,"P",{});var XJe=s(W8);N4o=r(XJe,"This class cannot be instantiated directly using "),_fe=n(XJe,"CODE",{});var dTt=s(_fe);q4o=r(dTt,"__init__()"),dTt.forEach(t),j4o=r(XJe," (throws an error)."),XJe.forEach(t),D4o=i(gl),Ye=n(gl,"DIV",{class:!0});var fa=s(Ye);T(Q8.$$.fragment,fa),G4o=i(fa),bfe=n(fa,"P",{});var cTt=s(bfe);O4o=r(cTt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),cTt.forEach(t),V4o=i(fa),od=n(fa,"P",{});var tne=s(od);X4o=r(tne,"The processor class to instantiate is selected based on the "),vfe=n(tne,"CODE",{});var mTt=s(vfe);z4o=r(mTt,"model_type"),mTt.forEach(t),W4o=r(tne,` property of the config object (either
passed as an argument or loaded from `),Ffe=n(tne,"CODE",{});var fTt=s(Ffe);Q4o=r(fTt,"pretrained_model_name_or_path"),fTt.forEach(t),U4o=r(tne," if possible):"),tne.forEach(t),H4o=i(fa),ce=n(fa,"UL",{});var ue=s(ce);Hu=n(ue,"LI",{});var FSe=s(Hu);Tfe=n(FSe,"STRONG",{});var gTt=s(Tfe);J4o=r(gTt,"clip"),gTt.forEach(t),Y4o=r(FSe," \u2014 "),vD=n(FSe,"A",{href:!0});var hTt=s(vD);K4o=r(hTt,"CLIPProcessor"),hTt.forEach(t),Z4o=r(FSe," (CLIP model)"),FSe.forEach(t),eCo=i(ue),Ju=n(ue,"LI",{});var TSe=s(Ju);Mfe=n(TSe,"STRONG",{});var uTt=s(Mfe);oCo=r(uTt,"donut"),uTt.forEach(t),rCo=r(TSe," \u2014 "),FD=n(TSe,"A",{href:!0});var pTt=s(FD);tCo=r(pTt,"DonutProcessor"),pTt.forEach(t),aCo=r(TSe," (Donut model)"),TSe.forEach(t),nCo=i(ue),Yu=n(ue,"LI",{});var MSe=s(Yu);Efe=n(MSe,"STRONG",{});var _Tt=s(Efe);sCo=r(_Tt,"flava"),_Tt.forEach(t),lCo=r(MSe," \u2014 "),TD=n(MSe,"A",{href:!0});var bTt=s(TD);iCo=r(bTt,"FlavaProcessor"),bTt.forEach(t),dCo=r(MSe," (FLAVA model)"),MSe.forEach(t),cCo=i(ue),Ku=n(ue,"LI",{});var ESe=s(Ku);Cfe=n(ESe,"STRONG",{});var vTt=s(Cfe);mCo=r(vTt,"groupvit"),vTt.forEach(t),fCo=r(ESe," \u2014 "),MD=n(ESe,"A",{href:!0});var FTt=s(MD);gCo=r(FTt,"CLIPProcessor"),FTt.forEach(t),hCo=r(ESe," (GroupViT model)"),ESe.forEach(t),uCo=i(ue),Zu=n(ue,"LI",{});var CSe=s(Zu);wfe=n(CSe,"STRONG",{});var TTt=s(wfe);pCo=r(TTt,"layoutlmv2"),TTt.forEach(t),_Co=r(CSe," \u2014 "),ED=n(CSe,"A",{href:!0});var MTt=s(ED);bCo=r(MTt,"LayoutLMv2Processor"),MTt.forEach(t),vCo=r(CSe," (LayoutLMv2 model)"),CSe.forEach(t),FCo=i(ue),ep=n(ue,"LI",{});var wSe=s(ep);Afe=n(wSe,"STRONG",{});var ETt=s(Afe);TCo=r(ETt,"layoutlmv3"),ETt.forEach(t),MCo=r(wSe," \u2014 "),CD=n(wSe,"A",{href:!0});var CTt=s(CD);ECo=r(CTt,"LayoutLMv3Processor"),CTt.forEach(t),CCo=r(wSe," (LayoutLMv3 model)"),wSe.forEach(t),wCo=i(ue),op=n(ue,"LI",{});var ASe=s(op);Lfe=n(ASe,"STRONG",{});var wTt=s(Lfe);ACo=r(wTt,"layoutxlm"),wTt.forEach(t),LCo=r(ASe," \u2014 "),wD=n(ASe,"A",{href:!0});var ATt=s(wD);yCo=r(ATt,"LayoutXLMProcessor"),ATt.forEach(t),xCo=r(ASe," (LayoutXLM model)"),ASe.forEach(t),$Co=i(ue),rp=n(ue,"LI",{});var LSe=s(rp);yfe=n(LSe,"STRONG",{});var LTt=s(yfe);kCo=r(LTt,"owlvit"),LTt.forEach(t),SCo=r(LSe," \u2014 "),AD=n(LSe,"A",{href:!0});var yTt=s(AD);RCo=r(yTt,"OwlViTProcessor"),yTt.forEach(t),PCo=r(LSe," (OWL-ViT model)"),LSe.forEach(t),BCo=i(ue),tp=n(ue,"LI",{});var ySe=s(tp);xfe=n(ySe,"STRONG",{});var xTt=s(xfe);ICo=r(xTt,"sew"),xTt.forEach(t),NCo=r(ySe," \u2014 "),LD=n(ySe,"A",{href:!0});var $Tt=s(LD);qCo=r($Tt,"Wav2Vec2Processor"),$Tt.forEach(t),jCo=r(ySe," (SEW model)"),ySe.forEach(t),DCo=i(ue),ap=n(ue,"LI",{});var xSe=s(ap);$fe=n(xSe,"STRONG",{});var kTt=s($fe);GCo=r(kTt,"sew-d"),kTt.forEach(t),OCo=r(xSe," \u2014 "),yD=n(xSe,"A",{href:!0});var STt=s(yD);VCo=r(STt,"Wav2Vec2Processor"),STt.forEach(t),XCo=r(xSe," (SEW-D model)"),xSe.forEach(t),zCo=i(ue),np=n(ue,"LI",{});var $Se=s(np);kfe=n($Se,"STRONG",{});var RTt=s(kfe);WCo=r(RTt,"speech_to_text"),RTt.forEach(t),QCo=r($Se," \u2014 "),xD=n($Se,"A",{href:!0});var PTt=s(xD);UCo=r(PTt,"Speech2TextProcessor"),PTt.forEach(t),HCo=r($Se," (Speech2Text model)"),$Se.forEach(t),JCo=i(ue),sp=n(ue,"LI",{});var kSe=s(sp);Sfe=n(kSe,"STRONG",{});var BTt=s(Sfe);YCo=r(BTt,"speech_to_text_2"),BTt.forEach(t),KCo=r(kSe," \u2014 "),$D=n(kSe,"A",{href:!0});var ITt=s($D);ZCo=r(ITt,"Speech2Text2Processor"),ITt.forEach(t),e3o=r(kSe," (Speech2Text2 model)"),kSe.forEach(t),o3o=i(ue),lp=n(ue,"LI",{});var SSe=s(lp);Rfe=n(SSe,"STRONG",{});var NTt=s(Rfe);r3o=r(NTt,"trocr"),NTt.forEach(t),t3o=r(SSe," \u2014 "),kD=n(SSe,"A",{href:!0});var qTt=s(kD);a3o=r(qTt,"TrOCRProcessor"),qTt.forEach(t),n3o=r(SSe," (TrOCR model)"),SSe.forEach(t),s3o=i(ue),ip=n(ue,"LI",{});var RSe=s(ip);Pfe=n(RSe,"STRONG",{});var jTt=s(Pfe);l3o=r(jTt,"unispeech"),jTt.forEach(t),i3o=r(RSe," \u2014 "),SD=n(RSe,"A",{href:!0});var DTt=s(SD);d3o=r(DTt,"Wav2Vec2Processor"),DTt.forEach(t),c3o=r(RSe," (UniSpeech model)"),RSe.forEach(t),m3o=i(ue),dp=n(ue,"LI",{});var PSe=s(dp);Bfe=n(PSe,"STRONG",{});var GTt=s(Bfe);f3o=r(GTt,"unispeech-sat"),GTt.forEach(t),g3o=r(PSe," \u2014 "),RD=n(PSe,"A",{href:!0});var OTt=s(RD);h3o=r(OTt,"Wav2Vec2Processor"),OTt.forEach(t),u3o=r(PSe," (UniSpeechSat model)"),PSe.forEach(t),p3o=i(ue),cp=n(ue,"LI",{});var BSe=s(cp);Ife=n(BSe,"STRONG",{});var VTt=s(Ife);_3o=r(VTt,"vilt"),VTt.forEach(t),b3o=r(BSe," \u2014 "),PD=n(BSe,"A",{href:!0});var XTt=s(PD);v3o=r(XTt,"ViltProcessor"),XTt.forEach(t),F3o=r(BSe," (ViLT model)"),BSe.forEach(t),T3o=i(ue),mp=n(ue,"LI",{});var ISe=s(mp);Nfe=n(ISe,"STRONG",{});var zTt=s(Nfe);M3o=r(zTt,"vision-text-dual-encoder"),zTt.forEach(t),E3o=r(ISe," \u2014 "),BD=n(ISe,"A",{href:!0});var WTt=s(BD);C3o=r(WTt,"VisionTextDualEncoderProcessor"),WTt.forEach(t),w3o=r(ISe," (VisionTextDualEncoder model)"),ISe.forEach(t),A3o=i(ue),fp=n(ue,"LI",{});var NSe=s(fp);qfe=n(NSe,"STRONG",{});var QTt=s(qfe);L3o=r(QTt,"wav2vec2"),QTt.forEach(t),y3o=r(NSe," \u2014 "),ID=n(NSe,"A",{href:!0});var UTt=s(ID);x3o=r(UTt,"Wav2Vec2Processor"),UTt.forEach(t),$3o=r(NSe," (Wav2Vec2 model)"),NSe.forEach(t),k3o=i(ue),gp=n(ue,"LI",{});var qSe=s(gp);jfe=n(qSe,"STRONG",{});var HTt=s(jfe);S3o=r(HTt,"wav2vec2-conformer"),HTt.forEach(t),R3o=r(qSe," \u2014 "),ND=n(qSe,"A",{href:!0});var JTt=s(ND);P3o=r(JTt,"Wav2Vec2Processor"),JTt.forEach(t),B3o=r(qSe," (Wav2Vec2-Conformer model)"),qSe.forEach(t),I3o=i(ue),hp=n(ue,"LI",{});var jSe=s(hp);Dfe=n(jSe,"STRONG",{});var YTt=s(Dfe);N3o=r(YTt,"wavlm"),YTt.forEach(t),q3o=r(jSe," \u2014 "),qD=n(jSe,"A",{href:!0});var KTt=s(qD);j3o=r(KTt,"Wav2Vec2Processor"),KTt.forEach(t),D3o=r(jSe," (WavLM model)"),jSe.forEach(t),ue.forEach(t),G3o=i(fa),T(up.$$.fragment,fa),O3o=i(fa),T(pp.$$.fragment,fa),fa.forEach(t),V3o=i(gl),_p=n(gl,"DIV",{class:!0});var zJe=s(_p);T(U8.$$.fragment,zJe),X3o=i(zJe),Gfe=n(zJe,"P",{});var ZTt=s(Gfe);z3o=r(ZTt,"Register a new processor for this class."),ZTt.forEach(t),zJe.forEach(t),gl.forEach(t),IUe=i(m),rd=n(m,"H2",{class:!0});var WJe=s(rd);bp=n(WJe,"A",{id:!0,class:!0,href:!0});var eMt=s(bp);Ofe=n(eMt,"SPAN",{});var oMt=s(Ofe);T(H8.$$.fragment,oMt),oMt.forEach(t),eMt.forEach(t),W3o=i(WJe),Vfe=n(WJe,"SPAN",{});var rMt=s(Vfe);Q3o=r(rMt,"AutoModel"),rMt.forEach(t),WJe.forEach(t),NUe=i(m),So=n(m,"DIV",{class:!0});var hl=s(So);T(J8.$$.fragment,hl),U3o=i(hl),td=n(hl,"P",{});var ane=s(td);H3o=r(ane,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),jD=n(ane,"A",{href:!0});var tMt=s(jD);J3o=r(tMt,"from_pretrained()"),tMt.forEach(t),Y3o=r(ane," class method or the "),DD=n(ane,"A",{href:!0});var aMt=s(DD);K3o=r(aMt,"from_config()"),aMt.forEach(t),Z3o=r(ane,` class
method.`),ane.forEach(t),e5o=i(hl),Y8=n(hl,"P",{});var QJe=s(Y8);o5o=r(QJe,"This class cannot be instantiated directly using "),Xfe=n(QJe,"CODE",{});var nMt=s(Xfe);r5o=r(nMt,"__init__()"),nMt.forEach(t),t5o=r(QJe," (throws an error)."),QJe.forEach(t),a5o=i(hl),ft=n(hl,"DIV",{class:!0});var ML=s(ft);T(K8.$$.fragment,ML),n5o=i(ML),zfe=n(ML,"P",{});var sMt=s(zfe);s5o=r(sMt,"Instantiates one of the base model classes of the library from a configuration."),sMt.forEach(t),l5o=i(ML),ad=n(ML,"P",{});var nne=s(ad);i5o=r(nne,`Note:
Loading a model from its configuration file does `),Wfe=n(nne,"STRONG",{});var lMt=s(Wfe);d5o=r(lMt,"not"),lMt.forEach(t),c5o=r(nne,` load the model weights. It only affects the
model\u2019s configuration. Use `),GD=n(nne,"A",{href:!0});var iMt=s(GD);m5o=r(iMt,"from_pretrained()"),iMt.forEach(t),f5o=r(nne," to load the model weights."),nne.forEach(t),g5o=i(ML),T(vp.$$.fragment,ML),ML.forEach(t),h5o=i(hl),Ke=n(hl,"DIV",{class:!0});var ga=s(Ke);T(Z8.$$.fragment,ga),u5o=i(ga),Qfe=n(ga,"P",{});var dMt=s(Qfe);p5o=r(dMt,"Instantiate one of the base model classes of the library from a pretrained model."),dMt.forEach(t),_5o=i(ga),Va=n(ga,"P",{});var EL=s(Va);b5o=r(EL,"The model class to instantiate is selected based on the "),Ufe=n(EL,"CODE",{});var cMt=s(Ufe);v5o=r(cMt,"model_type"),cMt.forEach(t),F5o=r(EL,` property of the config object (either
passed as an argument or loaded from `),Hfe=n(EL,"CODE",{});var mMt=s(Hfe);T5o=r(mMt,"pretrained_model_name_or_path"),mMt.forEach(t),M5o=r(EL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jfe=n(EL,"CODE",{});var fMt=s(Jfe);E5o=r(fMt,"pretrained_model_name_or_path"),fMt.forEach(t),C5o=r(EL,":"),EL.forEach(t),w5o=i(ga),y=n(ga,"UL",{});var x=s(y);Fp=n(x,"LI",{});var DSe=s(Fp);Yfe=n(DSe,"STRONG",{});var gMt=s(Yfe);A5o=r(gMt,"albert"),gMt.forEach(t),L5o=r(DSe," \u2014 "),OD=n(DSe,"A",{href:!0});var hMt=s(OD);y5o=r(hMt,"AlbertModel"),hMt.forEach(t),x5o=r(DSe," (ALBERT model)"),DSe.forEach(t),$5o=i(x),Tp=n(x,"LI",{});var GSe=s(Tp);Kfe=n(GSe,"STRONG",{});var uMt=s(Kfe);k5o=r(uMt,"bart"),uMt.forEach(t),S5o=r(GSe," \u2014 "),VD=n(GSe,"A",{href:!0});var pMt=s(VD);R5o=r(pMt,"BartModel"),pMt.forEach(t),P5o=r(GSe," (BART model)"),GSe.forEach(t),B5o=i(x),Mp=n(x,"LI",{});var OSe=s(Mp);Zfe=n(OSe,"STRONG",{});var _Mt=s(Zfe);I5o=r(_Mt,"beit"),_Mt.forEach(t),N5o=r(OSe," \u2014 "),XD=n(OSe,"A",{href:!0});var bMt=s(XD);q5o=r(bMt,"BeitModel"),bMt.forEach(t),j5o=r(OSe," (BEiT model)"),OSe.forEach(t),D5o=i(x),Ep=n(x,"LI",{});var VSe=s(Ep);ege=n(VSe,"STRONG",{});var vMt=s(ege);G5o=r(vMt,"bert"),vMt.forEach(t),O5o=r(VSe," \u2014 "),zD=n(VSe,"A",{href:!0});var FMt=s(zD);V5o=r(FMt,"BertModel"),FMt.forEach(t),X5o=r(VSe," (BERT model)"),VSe.forEach(t),z5o=i(x),Cp=n(x,"LI",{});var XSe=s(Cp);oge=n(XSe,"STRONG",{});var TMt=s(oge);W5o=r(TMt,"bert-generation"),TMt.forEach(t),Q5o=r(XSe," \u2014 "),WD=n(XSe,"A",{href:!0});var MMt=s(WD);U5o=r(MMt,"BertGenerationEncoder"),MMt.forEach(t),H5o=r(XSe," (Bert Generation model)"),XSe.forEach(t),J5o=i(x),wp=n(x,"LI",{});var zSe=s(wp);rge=n(zSe,"STRONG",{});var EMt=s(rge);Y5o=r(EMt,"big_bird"),EMt.forEach(t),K5o=r(zSe," \u2014 "),QD=n(zSe,"A",{href:!0});var CMt=s(QD);Z5o=r(CMt,"BigBirdModel"),CMt.forEach(t),e0o=r(zSe," (BigBird model)"),zSe.forEach(t),o0o=i(x),Ap=n(x,"LI",{});var WSe=s(Ap);tge=n(WSe,"STRONG",{});var wMt=s(tge);r0o=r(wMt,"bigbird_pegasus"),wMt.forEach(t),t0o=r(WSe," \u2014 "),UD=n(WSe,"A",{href:!0});var AMt=s(UD);a0o=r(AMt,"BigBirdPegasusModel"),AMt.forEach(t),n0o=r(WSe," (BigBird-Pegasus model)"),WSe.forEach(t),s0o=i(x),Lp=n(x,"LI",{});var QSe=s(Lp);age=n(QSe,"STRONG",{});var LMt=s(age);l0o=r(LMt,"blenderbot"),LMt.forEach(t),i0o=r(QSe," \u2014 "),HD=n(QSe,"A",{href:!0});var yMt=s(HD);d0o=r(yMt,"BlenderbotModel"),yMt.forEach(t),c0o=r(QSe," (Blenderbot model)"),QSe.forEach(t),m0o=i(x),yp=n(x,"LI",{});var USe=s(yp);nge=n(USe,"STRONG",{});var xMt=s(nge);f0o=r(xMt,"blenderbot-small"),xMt.forEach(t),g0o=r(USe," \u2014 "),JD=n(USe,"A",{href:!0});var $Mt=s(JD);h0o=r($Mt,"BlenderbotSmallModel"),$Mt.forEach(t),u0o=r(USe," (BlenderbotSmall model)"),USe.forEach(t),p0o=i(x),xp=n(x,"LI",{});var HSe=s(xp);sge=n(HSe,"STRONG",{});var kMt=s(sge);_0o=r(kMt,"bloom"),kMt.forEach(t),b0o=r(HSe," \u2014 "),YD=n(HSe,"A",{href:!0});var SMt=s(YD);v0o=r(SMt,"BloomModel"),SMt.forEach(t),F0o=r(HSe," (BLOOM model)"),HSe.forEach(t),T0o=i(x),$p=n(x,"LI",{});var JSe=s($p);lge=n(JSe,"STRONG",{});var RMt=s(lge);M0o=r(RMt,"camembert"),RMt.forEach(t),E0o=r(JSe," \u2014 "),KD=n(JSe,"A",{href:!0});var PMt=s(KD);C0o=r(PMt,"CamembertModel"),PMt.forEach(t),w0o=r(JSe," (CamemBERT model)"),JSe.forEach(t),A0o=i(x),kp=n(x,"LI",{});var YSe=s(kp);ige=n(YSe,"STRONG",{});var BMt=s(ige);L0o=r(BMt,"canine"),BMt.forEach(t),y0o=r(YSe," \u2014 "),ZD=n(YSe,"A",{href:!0});var IMt=s(ZD);x0o=r(IMt,"CanineModel"),IMt.forEach(t),$0o=r(YSe," (CANINE model)"),YSe.forEach(t),k0o=i(x),Sp=n(x,"LI",{});var KSe=s(Sp);dge=n(KSe,"STRONG",{});var NMt=s(dge);S0o=r(NMt,"clip"),NMt.forEach(t),R0o=r(KSe," \u2014 "),eG=n(KSe,"A",{href:!0});var qMt=s(eG);P0o=r(qMt,"CLIPModel"),qMt.forEach(t),B0o=r(KSe," (CLIP model)"),KSe.forEach(t),I0o=i(x),Rp=n(x,"LI",{});var ZSe=s(Rp);cge=n(ZSe,"STRONG",{});var jMt=s(cge);N0o=r(jMt,"codegen"),jMt.forEach(t),q0o=r(ZSe," \u2014 "),oG=n(ZSe,"A",{href:!0});var DMt=s(oG);j0o=r(DMt,"CodeGenModel"),DMt.forEach(t),D0o=r(ZSe," (CodeGen model)"),ZSe.forEach(t),G0o=i(x),Pp=n(x,"LI",{});var eRe=s(Pp);mge=n(eRe,"STRONG",{});var GMt=s(mge);O0o=r(GMt,"convbert"),GMt.forEach(t),V0o=r(eRe," \u2014 "),rG=n(eRe,"A",{href:!0});var OMt=s(rG);X0o=r(OMt,"ConvBertModel"),OMt.forEach(t),z0o=r(eRe," (ConvBERT model)"),eRe.forEach(t),W0o=i(x),Bp=n(x,"LI",{});var oRe=s(Bp);fge=n(oRe,"STRONG",{});var VMt=s(fge);Q0o=r(VMt,"convnext"),VMt.forEach(t),U0o=r(oRe," \u2014 "),tG=n(oRe,"A",{href:!0});var XMt=s(tG);H0o=r(XMt,"ConvNextModel"),XMt.forEach(t),J0o=r(oRe," (ConvNeXT model)"),oRe.forEach(t),Y0o=i(x),Ip=n(x,"LI",{});var rRe=s(Ip);gge=n(rRe,"STRONG",{});var zMt=s(gge);K0o=r(zMt,"ctrl"),zMt.forEach(t),Z0o=r(rRe," \u2014 "),aG=n(rRe,"A",{href:!0});var WMt=s(aG);ewo=r(WMt,"CTRLModel"),WMt.forEach(t),owo=r(rRe," (CTRL model)"),rRe.forEach(t),rwo=i(x),Np=n(x,"LI",{});var tRe=s(Np);hge=n(tRe,"STRONG",{});var QMt=s(hge);two=r(QMt,"cvt"),QMt.forEach(t),awo=r(tRe," \u2014 "),nG=n(tRe,"A",{href:!0});var UMt=s(nG);nwo=r(UMt,"CvtModel"),UMt.forEach(t),swo=r(tRe," (CvT model)"),tRe.forEach(t),lwo=i(x),qp=n(x,"LI",{});var aRe=s(qp);uge=n(aRe,"STRONG",{});var HMt=s(uge);iwo=r(HMt,"data2vec-audio"),HMt.forEach(t),dwo=r(aRe," \u2014 "),sG=n(aRe,"A",{href:!0});var JMt=s(sG);cwo=r(JMt,"Data2VecAudioModel"),JMt.forEach(t),mwo=r(aRe," (Data2VecAudio model)"),aRe.forEach(t),fwo=i(x),jp=n(x,"LI",{});var nRe=s(jp);pge=n(nRe,"STRONG",{});var YMt=s(pge);gwo=r(YMt,"data2vec-text"),YMt.forEach(t),hwo=r(nRe," \u2014 "),lG=n(nRe,"A",{href:!0});var KMt=s(lG);uwo=r(KMt,"Data2VecTextModel"),KMt.forEach(t),pwo=r(nRe," (Data2VecText model)"),nRe.forEach(t),_wo=i(x),Dp=n(x,"LI",{});var sRe=s(Dp);_ge=n(sRe,"STRONG",{});var ZMt=s(_ge);bwo=r(ZMt,"data2vec-vision"),ZMt.forEach(t),vwo=r(sRe," \u2014 "),iG=n(sRe,"A",{href:!0});var eEt=s(iG);Fwo=r(eEt,"Data2VecVisionModel"),eEt.forEach(t),Two=r(sRe," (Data2VecVision model)"),sRe.forEach(t),Mwo=i(x),Gp=n(x,"LI",{});var lRe=s(Gp);bge=n(lRe,"STRONG",{});var oEt=s(bge);Ewo=r(oEt,"deberta"),oEt.forEach(t),Cwo=r(lRe," \u2014 "),dG=n(lRe,"A",{href:!0});var rEt=s(dG);wwo=r(rEt,"DebertaModel"),rEt.forEach(t),Awo=r(lRe," (DeBERTa model)"),lRe.forEach(t),Lwo=i(x),Op=n(x,"LI",{});var iRe=s(Op);vge=n(iRe,"STRONG",{});var tEt=s(vge);ywo=r(tEt,"deberta-v2"),tEt.forEach(t),xwo=r(iRe," \u2014 "),cG=n(iRe,"A",{href:!0});var aEt=s(cG);$wo=r(aEt,"DebertaV2Model"),aEt.forEach(t),kwo=r(iRe," (DeBERTa-v2 model)"),iRe.forEach(t),Swo=i(x),Vp=n(x,"LI",{});var dRe=s(Vp);Fge=n(dRe,"STRONG",{});var nEt=s(Fge);Rwo=r(nEt,"decision_transformer"),nEt.forEach(t),Pwo=r(dRe," \u2014 "),mG=n(dRe,"A",{href:!0});var sEt=s(mG);Bwo=r(sEt,"DecisionTransformerModel"),sEt.forEach(t),Iwo=r(dRe," (Decision Transformer model)"),dRe.forEach(t),Nwo=i(x),Xp=n(x,"LI",{});var cRe=s(Xp);Tge=n(cRe,"STRONG",{});var lEt=s(Tge);qwo=r(lEt,"deit"),lEt.forEach(t),jwo=r(cRe," \u2014 "),fG=n(cRe,"A",{href:!0});var iEt=s(fG);Dwo=r(iEt,"DeiTModel"),iEt.forEach(t),Gwo=r(cRe," (DeiT model)"),cRe.forEach(t),Owo=i(x),zp=n(x,"LI",{});var mRe=s(zp);Mge=n(mRe,"STRONG",{});var dEt=s(Mge);Vwo=r(dEt,"detr"),dEt.forEach(t),Xwo=r(mRe," \u2014 "),gG=n(mRe,"A",{href:!0});var cEt=s(gG);zwo=r(cEt,"DetrModel"),cEt.forEach(t),Wwo=r(mRe," (DETR model)"),mRe.forEach(t),Qwo=i(x),Wp=n(x,"LI",{});var fRe=s(Wp);Ege=n(fRe,"STRONG",{});var mEt=s(Ege);Uwo=r(mEt,"distilbert"),mEt.forEach(t),Hwo=r(fRe," \u2014 "),hG=n(fRe,"A",{href:!0});var fEt=s(hG);Jwo=r(fEt,"DistilBertModel"),fEt.forEach(t),Ywo=r(fRe," (DistilBERT model)"),fRe.forEach(t),Kwo=i(x),Qp=n(x,"LI",{});var gRe=s(Qp);Cge=n(gRe,"STRONG",{});var gEt=s(Cge);Zwo=r(gEt,"donut-swin"),gEt.forEach(t),e6o=r(gRe," \u2014 "),uG=n(gRe,"A",{href:!0});var hEt=s(uG);o6o=r(hEt,"DonutSwinModel"),hEt.forEach(t),r6o=r(gRe," (DonutSwin model)"),gRe.forEach(t),t6o=i(x),Up=n(x,"LI",{});var hRe=s(Up);wge=n(hRe,"STRONG",{});var uEt=s(wge);a6o=r(uEt,"dpr"),uEt.forEach(t),n6o=r(hRe," \u2014 "),pG=n(hRe,"A",{href:!0});var pEt=s(pG);s6o=r(pEt,"DPRQuestionEncoder"),pEt.forEach(t),l6o=r(hRe," (DPR model)"),hRe.forEach(t),i6o=i(x),Hp=n(x,"LI",{});var uRe=s(Hp);Age=n(uRe,"STRONG",{});var _Et=s(Age);d6o=r(_Et,"dpt"),_Et.forEach(t),c6o=r(uRe," \u2014 "),_G=n(uRe,"A",{href:!0});var bEt=s(_G);m6o=r(bEt,"DPTModel"),bEt.forEach(t),f6o=r(uRe," (DPT model)"),uRe.forEach(t),g6o=i(x),Jp=n(x,"LI",{});var pRe=s(Jp);Lge=n(pRe,"STRONG",{});var vEt=s(Lge);h6o=r(vEt,"electra"),vEt.forEach(t),u6o=r(pRe," \u2014 "),bG=n(pRe,"A",{href:!0});var FEt=s(bG);p6o=r(FEt,"ElectraModel"),FEt.forEach(t),_6o=r(pRe," (ELECTRA model)"),pRe.forEach(t),b6o=i(x),Yp=n(x,"LI",{});var _Re=s(Yp);yge=n(_Re,"STRONG",{});var TEt=s(yge);v6o=r(TEt,"flaubert"),TEt.forEach(t),F6o=r(_Re," \u2014 "),vG=n(_Re,"A",{href:!0});var MEt=s(vG);T6o=r(MEt,"FlaubertModel"),MEt.forEach(t),M6o=r(_Re," (FlauBERT model)"),_Re.forEach(t),E6o=i(x),Kp=n(x,"LI",{});var bRe=s(Kp);xge=n(bRe,"STRONG",{});var EEt=s(xge);C6o=r(EEt,"flava"),EEt.forEach(t),w6o=r(bRe," \u2014 "),FG=n(bRe,"A",{href:!0});var CEt=s(FG);A6o=r(CEt,"FlavaModel"),CEt.forEach(t),L6o=r(bRe," (FLAVA model)"),bRe.forEach(t),y6o=i(x),Zp=n(x,"LI",{});var vRe=s(Zp);$ge=n(vRe,"STRONG",{});var wEt=s($ge);x6o=r(wEt,"fnet"),wEt.forEach(t),$6o=r(vRe," \u2014 "),TG=n(vRe,"A",{href:!0});var AEt=s(TG);k6o=r(AEt,"FNetModel"),AEt.forEach(t),S6o=r(vRe," (FNet model)"),vRe.forEach(t),R6o=i(x),e_=n(x,"LI",{});var FRe=s(e_);kge=n(FRe,"STRONG",{});var LEt=s(kge);P6o=r(LEt,"fsmt"),LEt.forEach(t),B6o=r(FRe," \u2014 "),MG=n(FRe,"A",{href:!0});var yEt=s(MG);I6o=r(yEt,"FSMTModel"),yEt.forEach(t),N6o=r(FRe," (FairSeq Machine-Translation model)"),FRe.forEach(t),q6o=i(x),nl=n(x,"LI",{});var lP=s(nl);Sge=n(lP,"STRONG",{});var xEt=s(Sge);j6o=r(xEt,"funnel"),xEt.forEach(t),D6o=r(lP," \u2014 "),EG=n(lP,"A",{href:!0});var $Et=s(EG);G6o=r($Et,"FunnelModel"),$Et.forEach(t),O6o=r(lP," or "),CG=n(lP,"A",{href:!0});var kEt=s(CG);V6o=r(kEt,"FunnelBaseModel"),kEt.forEach(t),X6o=r(lP," (Funnel Transformer model)"),lP.forEach(t),z6o=i(x),o_=n(x,"LI",{});var TRe=s(o_);Rge=n(TRe,"STRONG",{});var SEt=s(Rge);W6o=r(SEt,"glpn"),SEt.forEach(t),Q6o=r(TRe," \u2014 "),wG=n(TRe,"A",{href:!0});var REt=s(wG);U6o=r(REt,"GLPNModel"),REt.forEach(t),H6o=r(TRe," (GLPN model)"),TRe.forEach(t),J6o=i(x),r_=n(x,"LI",{});var MRe=s(r_);Pge=n(MRe,"STRONG",{});var PEt=s(Pge);Y6o=r(PEt,"gpt2"),PEt.forEach(t),K6o=r(MRe," \u2014 "),AG=n(MRe,"A",{href:!0});var BEt=s(AG);Z6o=r(BEt,"GPT2Model"),BEt.forEach(t),eAo=r(MRe," (OpenAI GPT-2 model)"),MRe.forEach(t),oAo=i(x),t_=n(x,"LI",{});var ERe=s(t_);Bge=n(ERe,"STRONG",{});var IEt=s(Bge);rAo=r(IEt,"gpt_neo"),IEt.forEach(t),tAo=r(ERe," \u2014 "),LG=n(ERe,"A",{href:!0});var NEt=s(LG);aAo=r(NEt,"GPTNeoModel"),NEt.forEach(t),nAo=r(ERe," (GPT Neo model)"),ERe.forEach(t),sAo=i(x),a_=n(x,"LI",{});var CRe=s(a_);Ige=n(CRe,"STRONG",{});var qEt=s(Ige);lAo=r(qEt,"gpt_neox"),qEt.forEach(t),iAo=r(CRe," \u2014 "),yG=n(CRe,"A",{href:!0});var jEt=s(yG);dAo=r(jEt,"GPTNeoXModel"),jEt.forEach(t),cAo=r(CRe," (GPT NeoX model)"),CRe.forEach(t),mAo=i(x),n_=n(x,"LI",{});var wRe=s(n_);Nge=n(wRe,"STRONG",{});var DEt=s(Nge);fAo=r(DEt,"gptj"),DEt.forEach(t),gAo=r(wRe," \u2014 "),xG=n(wRe,"A",{href:!0});var GEt=s(xG);hAo=r(GEt,"GPTJModel"),GEt.forEach(t),uAo=r(wRe," (GPT-J model)"),wRe.forEach(t),pAo=i(x),s_=n(x,"LI",{});var ARe=s(s_);qge=n(ARe,"STRONG",{});var OEt=s(qge);_Ao=r(OEt,"groupvit"),OEt.forEach(t),bAo=r(ARe," \u2014 "),$G=n(ARe,"A",{href:!0});var VEt=s($G);vAo=r(VEt,"GroupViTModel"),VEt.forEach(t),FAo=r(ARe," (GroupViT model)"),ARe.forEach(t),TAo=i(x),l_=n(x,"LI",{});var LRe=s(l_);jge=n(LRe,"STRONG",{});var XEt=s(jge);MAo=r(XEt,"hubert"),XEt.forEach(t),EAo=r(LRe," \u2014 "),kG=n(LRe,"A",{href:!0});var zEt=s(kG);CAo=r(zEt,"HubertModel"),zEt.forEach(t),wAo=r(LRe," (Hubert model)"),LRe.forEach(t),AAo=i(x),i_=n(x,"LI",{});var yRe=s(i_);Dge=n(yRe,"STRONG",{});var WEt=s(Dge);LAo=r(WEt,"ibert"),WEt.forEach(t),yAo=r(yRe," \u2014 "),SG=n(yRe,"A",{href:!0});var QEt=s(SG);xAo=r(QEt,"IBertModel"),QEt.forEach(t),$Ao=r(yRe," (I-BERT model)"),yRe.forEach(t),kAo=i(x),d_=n(x,"LI",{});var xRe=s(d_);Gge=n(xRe,"STRONG",{});var UEt=s(Gge);SAo=r(UEt,"imagegpt"),UEt.forEach(t),RAo=r(xRe," \u2014 "),RG=n(xRe,"A",{href:!0});var HEt=s(RG);PAo=r(HEt,"ImageGPTModel"),HEt.forEach(t),BAo=r(xRe," (ImageGPT model)"),xRe.forEach(t),IAo=i(x),c_=n(x,"LI",{});var $Re=s(c_);Oge=n($Re,"STRONG",{});var JEt=s(Oge);NAo=r(JEt,"layoutlm"),JEt.forEach(t),qAo=r($Re," \u2014 "),PG=n($Re,"A",{href:!0});var YEt=s(PG);jAo=r(YEt,"LayoutLMModel"),YEt.forEach(t),DAo=r($Re," (LayoutLM model)"),$Re.forEach(t),GAo=i(x),m_=n(x,"LI",{});var kRe=s(m_);Vge=n(kRe,"STRONG",{});var KEt=s(Vge);OAo=r(KEt,"layoutlmv2"),KEt.forEach(t),VAo=r(kRe," \u2014 "),BG=n(kRe,"A",{href:!0});var ZEt=s(BG);XAo=r(ZEt,"LayoutLMv2Model"),ZEt.forEach(t),zAo=r(kRe," (LayoutLMv2 model)"),kRe.forEach(t),WAo=i(x),f_=n(x,"LI",{});var SRe=s(f_);Xge=n(SRe,"STRONG",{});var e4t=s(Xge);QAo=r(e4t,"layoutlmv3"),e4t.forEach(t),UAo=r(SRe," \u2014 "),IG=n(SRe,"A",{href:!0});var o4t=s(IG);HAo=r(o4t,"LayoutLMv3Model"),o4t.forEach(t),JAo=r(SRe," (LayoutLMv3 model)"),SRe.forEach(t),YAo=i(x),g_=n(x,"LI",{});var RRe=s(g_);zge=n(RRe,"STRONG",{});var r4t=s(zge);KAo=r(r4t,"led"),r4t.forEach(t),ZAo=r(RRe," \u2014 "),NG=n(RRe,"A",{href:!0});var t4t=s(NG);e7o=r(t4t,"LEDModel"),t4t.forEach(t),o7o=r(RRe," (LED model)"),RRe.forEach(t),r7o=i(x),h_=n(x,"LI",{});var PRe=s(h_);Wge=n(PRe,"STRONG",{});var a4t=s(Wge);t7o=r(a4t,"levit"),a4t.forEach(t),a7o=r(PRe," \u2014 "),qG=n(PRe,"A",{href:!0});var n4t=s(qG);n7o=r(n4t,"LevitModel"),n4t.forEach(t),s7o=r(PRe," (LeViT model)"),PRe.forEach(t),l7o=i(x),u_=n(x,"LI",{});var BRe=s(u_);Qge=n(BRe,"STRONG",{});var s4t=s(Qge);i7o=r(s4t,"longformer"),s4t.forEach(t),d7o=r(BRe," \u2014 "),jG=n(BRe,"A",{href:!0});var l4t=s(jG);c7o=r(l4t,"LongformerModel"),l4t.forEach(t),m7o=r(BRe," (Longformer model)"),BRe.forEach(t),f7o=i(x),p_=n(x,"LI",{});var IRe=s(p_);Uge=n(IRe,"STRONG",{});var i4t=s(Uge);g7o=r(i4t,"longt5"),i4t.forEach(t),h7o=r(IRe," \u2014 "),DG=n(IRe,"A",{href:!0});var d4t=s(DG);u7o=r(d4t,"LongT5Model"),d4t.forEach(t),p7o=r(IRe," (LongT5 model)"),IRe.forEach(t),_7o=i(x),__=n(x,"LI",{});var NRe=s(__);Hge=n(NRe,"STRONG",{});var c4t=s(Hge);b7o=r(c4t,"luke"),c4t.forEach(t),v7o=r(NRe," \u2014 "),GG=n(NRe,"A",{href:!0});var m4t=s(GG);F7o=r(m4t,"LukeModel"),m4t.forEach(t),T7o=r(NRe," (LUKE model)"),NRe.forEach(t),M7o=i(x),b_=n(x,"LI",{});var qRe=s(b_);Jge=n(qRe,"STRONG",{});var f4t=s(Jge);E7o=r(f4t,"lxmert"),f4t.forEach(t),C7o=r(qRe," \u2014 "),OG=n(qRe,"A",{href:!0});var g4t=s(OG);w7o=r(g4t,"LxmertModel"),g4t.forEach(t),A7o=r(qRe," (LXMERT model)"),qRe.forEach(t),L7o=i(x),v_=n(x,"LI",{});var jRe=s(v_);Yge=n(jRe,"STRONG",{});var h4t=s(Yge);y7o=r(h4t,"m2m_100"),h4t.forEach(t),x7o=r(jRe," \u2014 "),VG=n(jRe,"A",{href:!0});var u4t=s(VG);$7o=r(u4t,"M2M100Model"),u4t.forEach(t),k7o=r(jRe," (M2M100 model)"),jRe.forEach(t),S7o=i(x),F_=n(x,"LI",{});var DRe=s(F_);Kge=n(DRe,"STRONG",{});var p4t=s(Kge);R7o=r(p4t,"marian"),p4t.forEach(t),P7o=r(DRe," \u2014 "),XG=n(DRe,"A",{href:!0});var _4t=s(XG);B7o=r(_4t,"MarianModel"),_4t.forEach(t),I7o=r(DRe," (Marian model)"),DRe.forEach(t),N7o=i(x),T_=n(x,"LI",{});var GRe=s(T_);Zge=n(GRe,"STRONG",{});var b4t=s(Zge);q7o=r(b4t,"maskformer"),b4t.forEach(t),j7o=r(GRe," \u2014 "),zG=n(GRe,"A",{href:!0});var v4t=s(zG);D7o=r(v4t,"MaskFormerModel"),v4t.forEach(t),G7o=r(GRe," (MaskFormer model)"),GRe.forEach(t),O7o=i(x),M_=n(x,"LI",{});var ORe=s(M_);ehe=n(ORe,"STRONG",{});var F4t=s(ehe);V7o=r(F4t,"mbart"),F4t.forEach(t),X7o=r(ORe," \u2014 "),WG=n(ORe,"A",{href:!0});var T4t=s(WG);z7o=r(T4t,"MBartModel"),T4t.forEach(t),W7o=r(ORe," (mBART model)"),ORe.forEach(t),Q7o=i(x),E_=n(x,"LI",{});var VRe=s(E_);ohe=n(VRe,"STRONG",{});var M4t=s(ohe);U7o=r(M4t,"mctct"),M4t.forEach(t),H7o=r(VRe," \u2014 "),QG=n(VRe,"A",{href:!0});var E4t=s(QG);J7o=r(E4t,"MCTCTModel"),E4t.forEach(t),Y7o=r(VRe," (M-CTC-T model)"),VRe.forEach(t),K7o=i(x),C_=n(x,"LI",{});var XRe=s(C_);rhe=n(XRe,"STRONG",{});var C4t=s(rhe);Z7o=r(C4t,"megatron-bert"),C4t.forEach(t),eLo=r(XRe," \u2014 "),UG=n(XRe,"A",{href:!0});var w4t=s(UG);oLo=r(w4t,"MegatronBertModel"),w4t.forEach(t),rLo=r(XRe," (Megatron-BERT model)"),XRe.forEach(t),tLo=i(x),w_=n(x,"LI",{});var zRe=s(w_);the=n(zRe,"STRONG",{});var A4t=s(the);aLo=r(A4t,"mobilebert"),A4t.forEach(t),nLo=r(zRe," \u2014 "),HG=n(zRe,"A",{href:!0});var L4t=s(HG);sLo=r(L4t,"MobileBertModel"),L4t.forEach(t),lLo=r(zRe," (MobileBERT model)"),zRe.forEach(t),iLo=i(x),A_=n(x,"LI",{});var WRe=s(A_);ahe=n(WRe,"STRONG",{});var y4t=s(ahe);dLo=r(y4t,"mobilevit"),y4t.forEach(t),cLo=r(WRe," \u2014 "),JG=n(WRe,"A",{href:!0});var x4t=s(JG);mLo=r(x4t,"MobileViTModel"),x4t.forEach(t),fLo=r(WRe," (MobileViT model)"),WRe.forEach(t),gLo=i(x),L_=n(x,"LI",{});var QRe=s(L_);nhe=n(QRe,"STRONG",{});var $4t=s(nhe);hLo=r($4t,"mpnet"),$4t.forEach(t),uLo=r(QRe," \u2014 "),YG=n(QRe,"A",{href:!0});var k4t=s(YG);pLo=r(k4t,"MPNetModel"),k4t.forEach(t),_Lo=r(QRe," (MPNet model)"),QRe.forEach(t),bLo=i(x),y_=n(x,"LI",{});var URe=s(y_);she=n(URe,"STRONG",{});var S4t=s(she);vLo=r(S4t,"mt5"),S4t.forEach(t),FLo=r(URe," \u2014 "),KG=n(URe,"A",{href:!0});var R4t=s(KG);TLo=r(R4t,"MT5Model"),R4t.forEach(t),MLo=r(URe," (MT5 model)"),URe.forEach(t),ELo=i(x),x_=n(x,"LI",{});var HRe=s(x_);lhe=n(HRe,"STRONG",{});var P4t=s(lhe);CLo=r(P4t,"mvp"),P4t.forEach(t),wLo=r(HRe," \u2014 "),ZG=n(HRe,"A",{href:!0});var B4t=s(ZG);ALo=r(B4t,"MvpModel"),B4t.forEach(t),LLo=r(HRe," (MVP model)"),HRe.forEach(t),yLo=i(x),$_=n(x,"LI",{});var JRe=s($_);ihe=n(JRe,"STRONG",{});var I4t=s(ihe);xLo=r(I4t,"nezha"),I4t.forEach(t),$Lo=r(JRe," \u2014 "),eO=n(JRe,"A",{href:!0});var N4t=s(eO);kLo=r(N4t,"NezhaModel"),N4t.forEach(t),SLo=r(JRe," (Nezha model)"),JRe.forEach(t),RLo=i(x),k_=n(x,"LI",{});var YRe=s(k_);dhe=n(YRe,"STRONG",{});var q4t=s(dhe);PLo=r(q4t,"nllb"),q4t.forEach(t),BLo=r(YRe," \u2014 "),oO=n(YRe,"A",{href:!0});var j4t=s(oO);ILo=r(j4t,"M2M100Model"),j4t.forEach(t),NLo=r(YRe," (NLLB model)"),YRe.forEach(t),qLo=i(x),S_=n(x,"LI",{});var KRe=s(S_);che=n(KRe,"STRONG",{});var D4t=s(che);jLo=r(D4t,"nystromformer"),D4t.forEach(t),DLo=r(KRe," \u2014 "),rO=n(KRe,"A",{href:!0});var G4t=s(rO);GLo=r(G4t,"NystromformerModel"),G4t.forEach(t),OLo=r(KRe," (Nystr\xF6mformer model)"),KRe.forEach(t),VLo=i(x),R_=n(x,"LI",{});var ZRe=s(R_);mhe=n(ZRe,"STRONG",{});var O4t=s(mhe);XLo=r(O4t,"openai-gpt"),O4t.forEach(t),zLo=r(ZRe," \u2014 "),tO=n(ZRe,"A",{href:!0});var V4t=s(tO);WLo=r(V4t,"OpenAIGPTModel"),V4t.forEach(t),QLo=r(ZRe," (OpenAI GPT model)"),ZRe.forEach(t),ULo=i(x),P_=n(x,"LI",{});var ePe=s(P_);fhe=n(ePe,"STRONG",{});var X4t=s(fhe);HLo=r(X4t,"opt"),X4t.forEach(t),JLo=r(ePe," \u2014 "),aO=n(ePe,"A",{href:!0});var z4t=s(aO);YLo=r(z4t,"OPTModel"),z4t.forEach(t),KLo=r(ePe," (OPT model)"),ePe.forEach(t),ZLo=i(x),B_=n(x,"LI",{});var oPe=s(B_);ghe=n(oPe,"STRONG",{});var W4t=s(ghe);eyo=r(W4t,"owlvit"),W4t.forEach(t),oyo=r(oPe," \u2014 "),nO=n(oPe,"A",{href:!0});var Q4t=s(nO);ryo=r(Q4t,"OwlViTModel"),Q4t.forEach(t),tyo=r(oPe," (OWL-ViT model)"),oPe.forEach(t),ayo=i(x),I_=n(x,"LI",{});var rPe=s(I_);hhe=n(rPe,"STRONG",{});var U4t=s(hhe);nyo=r(U4t,"pegasus"),U4t.forEach(t),syo=r(rPe," \u2014 "),sO=n(rPe,"A",{href:!0});var H4t=s(sO);lyo=r(H4t,"PegasusModel"),H4t.forEach(t),iyo=r(rPe," (Pegasus model)"),rPe.forEach(t),dyo=i(x),N_=n(x,"LI",{});var tPe=s(N_);uhe=n(tPe,"STRONG",{});var J4t=s(uhe);cyo=r(J4t,"perceiver"),J4t.forEach(t),myo=r(tPe," \u2014 "),lO=n(tPe,"A",{href:!0});var Y4t=s(lO);fyo=r(Y4t,"PerceiverModel"),Y4t.forEach(t),gyo=r(tPe," (Perceiver model)"),tPe.forEach(t),hyo=i(x),q_=n(x,"LI",{});var aPe=s(q_);phe=n(aPe,"STRONG",{});var K4t=s(phe);uyo=r(K4t,"plbart"),K4t.forEach(t),pyo=r(aPe," \u2014 "),iO=n(aPe,"A",{href:!0});var Z4t=s(iO);_yo=r(Z4t,"PLBartModel"),Z4t.forEach(t),byo=r(aPe," (PLBart model)"),aPe.forEach(t),vyo=i(x),j_=n(x,"LI",{});var nPe=s(j_);_he=n(nPe,"STRONG",{});var eCt=s(_he);Fyo=r(eCt,"poolformer"),eCt.forEach(t),Tyo=r(nPe," \u2014 "),dO=n(nPe,"A",{href:!0});var oCt=s(dO);Myo=r(oCt,"PoolFormerModel"),oCt.forEach(t),Eyo=r(nPe," (PoolFormer model)"),nPe.forEach(t),Cyo=i(x),D_=n(x,"LI",{});var sPe=s(D_);bhe=n(sPe,"STRONG",{});var rCt=s(bhe);wyo=r(rCt,"prophetnet"),rCt.forEach(t),Ayo=r(sPe," \u2014 "),cO=n(sPe,"A",{href:!0});var tCt=s(cO);Lyo=r(tCt,"ProphetNetModel"),tCt.forEach(t),yyo=r(sPe," (ProphetNet model)"),sPe.forEach(t),xyo=i(x),G_=n(x,"LI",{});var lPe=s(G_);vhe=n(lPe,"STRONG",{});var aCt=s(vhe);$yo=r(aCt,"qdqbert"),aCt.forEach(t),kyo=r(lPe," \u2014 "),mO=n(lPe,"A",{href:!0});var nCt=s(mO);Syo=r(nCt,"QDQBertModel"),nCt.forEach(t),Ryo=r(lPe," (QDQBert model)"),lPe.forEach(t),Pyo=i(x),O_=n(x,"LI",{});var iPe=s(O_);Fhe=n(iPe,"STRONG",{});var sCt=s(Fhe);Byo=r(sCt,"reformer"),sCt.forEach(t),Iyo=r(iPe," \u2014 "),fO=n(iPe,"A",{href:!0});var lCt=s(fO);Nyo=r(lCt,"ReformerModel"),lCt.forEach(t),qyo=r(iPe," (Reformer model)"),iPe.forEach(t),jyo=i(x),V_=n(x,"LI",{});var dPe=s(V_);The=n(dPe,"STRONG",{});var iCt=s(The);Dyo=r(iCt,"regnet"),iCt.forEach(t),Gyo=r(dPe," \u2014 "),gO=n(dPe,"A",{href:!0});var dCt=s(gO);Oyo=r(dCt,"RegNetModel"),dCt.forEach(t),Vyo=r(dPe," (RegNet model)"),dPe.forEach(t),Xyo=i(x),X_=n(x,"LI",{});var cPe=s(X_);Mhe=n(cPe,"STRONG",{});var cCt=s(Mhe);zyo=r(cCt,"rembert"),cCt.forEach(t),Wyo=r(cPe," \u2014 "),hO=n(cPe,"A",{href:!0});var mCt=s(hO);Qyo=r(mCt,"RemBertModel"),mCt.forEach(t),Uyo=r(cPe," (RemBERT model)"),cPe.forEach(t),Hyo=i(x),z_=n(x,"LI",{});var mPe=s(z_);Ehe=n(mPe,"STRONG",{});var fCt=s(Ehe);Jyo=r(fCt,"resnet"),fCt.forEach(t),Yyo=r(mPe," \u2014 "),uO=n(mPe,"A",{href:!0});var gCt=s(uO);Kyo=r(gCt,"ResNetModel"),gCt.forEach(t),Zyo=r(mPe," (ResNet model)"),mPe.forEach(t),e8o=i(x),W_=n(x,"LI",{});var fPe=s(W_);Che=n(fPe,"STRONG",{});var hCt=s(Che);o8o=r(hCt,"retribert"),hCt.forEach(t),r8o=r(fPe," \u2014 "),pO=n(fPe,"A",{href:!0});var uCt=s(pO);t8o=r(uCt,"RetriBertModel"),uCt.forEach(t),a8o=r(fPe," (RetriBERT model)"),fPe.forEach(t),n8o=i(x),Q_=n(x,"LI",{});var gPe=s(Q_);whe=n(gPe,"STRONG",{});var pCt=s(whe);s8o=r(pCt,"roberta"),pCt.forEach(t),l8o=r(gPe," \u2014 "),_O=n(gPe,"A",{href:!0});var _Ct=s(_O);i8o=r(_Ct,"RobertaModel"),_Ct.forEach(t),d8o=r(gPe," (RoBERTa model)"),gPe.forEach(t),c8o=i(x),U_=n(x,"LI",{});var hPe=s(U_);Ahe=n(hPe,"STRONG",{});var bCt=s(Ahe);m8o=r(bCt,"roformer"),bCt.forEach(t),f8o=r(hPe," \u2014 "),bO=n(hPe,"A",{href:!0});var vCt=s(bO);g8o=r(vCt,"RoFormerModel"),vCt.forEach(t),h8o=r(hPe," (RoFormer model)"),hPe.forEach(t),u8o=i(x),H_=n(x,"LI",{});var uPe=s(H_);Lhe=n(uPe,"STRONG",{});var FCt=s(Lhe);p8o=r(FCt,"segformer"),FCt.forEach(t),_8o=r(uPe," \u2014 "),vO=n(uPe,"A",{href:!0});var TCt=s(vO);b8o=r(TCt,"SegformerModel"),TCt.forEach(t),v8o=r(uPe," (SegFormer model)"),uPe.forEach(t),F8o=i(x),J_=n(x,"LI",{});var pPe=s(J_);yhe=n(pPe,"STRONG",{});var MCt=s(yhe);T8o=r(MCt,"sew"),MCt.forEach(t),M8o=r(pPe," \u2014 "),FO=n(pPe,"A",{href:!0});var ECt=s(FO);E8o=r(ECt,"SEWModel"),ECt.forEach(t),C8o=r(pPe," (SEW model)"),pPe.forEach(t),w8o=i(x),Y_=n(x,"LI",{});var _Pe=s(Y_);xhe=n(_Pe,"STRONG",{});var CCt=s(xhe);A8o=r(CCt,"sew-d"),CCt.forEach(t),L8o=r(_Pe," \u2014 "),TO=n(_Pe,"A",{href:!0});var wCt=s(TO);y8o=r(wCt,"SEWDModel"),wCt.forEach(t),x8o=r(_Pe," (SEW-D model)"),_Pe.forEach(t),$8o=i(x),K_=n(x,"LI",{});var bPe=s(K_);$he=n(bPe,"STRONG",{});var ACt=s($he);k8o=r(ACt,"speech_to_text"),ACt.forEach(t),S8o=r(bPe," \u2014 "),MO=n(bPe,"A",{href:!0});var LCt=s(MO);R8o=r(LCt,"Speech2TextModel"),LCt.forEach(t),P8o=r(bPe," (Speech2Text model)"),bPe.forEach(t),B8o=i(x),Z_=n(x,"LI",{});var vPe=s(Z_);khe=n(vPe,"STRONG",{});var yCt=s(khe);I8o=r(yCt,"splinter"),yCt.forEach(t),N8o=r(vPe," \u2014 "),EO=n(vPe,"A",{href:!0});var xCt=s(EO);q8o=r(xCt,"SplinterModel"),xCt.forEach(t),j8o=r(vPe," (Splinter model)"),vPe.forEach(t),D8o=i(x),e2=n(x,"LI",{});var FPe=s(e2);She=n(FPe,"STRONG",{});var $Ct=s(She);G8o=r($Ct,"squeezebert"),$Ct.forEach(t),O8o=r(FPe," \u2014 "),CO=n(FPe,"A",{href:!0});var kCt=s(CO);V8o=r(kCt,"SqueezeBertModel"),kCt.forEach(t),X8o=r(FPe," (SqueezeBERT model)"),FPe.forEach(t),z8o=i(x),o2=n(x,"LI",{});var TPe=s(o2);Rhe=n(TPe,"STRONG",{});var SCt=s(Rhe);W8o=r(SCt,"swin"),SCt.forEach(t),Q8o=r(TPe," \u2014 "),wO=n(TPe,"A",{href:!0});var RCt=s(wO);U8o=r(RCt,"SwinModel"),RCt.forEach(t),H8o=r(TPe," (Swin Transformer model)"),TPe.forEach(t),J8o=i(x),r2=n(x,"LI",{});var MPe=s(r2);Phe=n(MPe,"STRONG",{});var PCt=s(Phe);Y8o=r(PCt,"swinv2"),PCt.forEach(t),K8o=r(MPe," \u2014 "),AO=n(MPe,"A",{href:!0});var BCt=s(AO);Z8o=r(BCt,"Swinv2Model"),BCt.forEach(t),e9o=r(MPe," (Swin Transformer V2 model)"),MPe.forEach(t),o9o=i(x),t2=n(x,"LI",{});var EPe=s(t2);Bhe=n(EPe,"STRONG",{});var ICt=s(Bhe);r9o=r(ICt,"t5"),ICt.forEach(t),t9o=r(EPe," \u2014 "),LO=n(EPe,"A",{href:!0});var NCt=s(LO);a9o=r(NCt,"T5Model"),NCt.forEach(t),n9o=r(EPe," (T5 model)"),EPe.forEach(t),s9o=i(x),a2=n(x,"LI",{});var CPe=s(a2);Ihe=n(CPe,"STRONG",{});var qCt=s(Ihe);l9o=r(qCt,"tapas"),qCt.forEach(t),i9o=r(CPe," \u2014 "),yO=n(CPe,"A",{href:!0});var jCt=s(yO);d9o=r(jCt,"TapasModel"),jCt.forEach(t),c9o=r(CPe," (TAPAS model)"),CPe.forEach(t),m9o=i(x),n2=n(x,"LI",{});var wPe=s(n2);Nhe=n(wPe,"STRONG",{});var DCt=s(Nhe);f9o=r(DCt,"trajectory_transformer"),DCt.forEach(t),g9o=r(wPe," \u2014 "),xO=n(wPe,"A",{href:!0});var GCt=s(xO);h9o=r(GCt,"TrajectoryTransformerModel"),GCt.forEach(t),u9o=r(wPe," (Trajectory Transformer model)"),wPe.forEach(t),p9o=i(x),s2=n(x,"LI",{});var APe=s(s2);qhe=n(APe,"STRONG",{});var OCt=s(qhe);_9o=r(OCt,"transfo-xl"),OCt.forEach(t),b9o=r(APe," \u2014 "),$O=n(APe,"A",{href:!0});var VCt=s($O);v9o=r(VCt,"TransfoXLModel"),VCt.forEach(t),F9o=r(APe," (Transformer-XL model)"),APe.forEach(t),T9o=i(x),l2=n(x,"LI",{});var LPe=s(l2);jhe=n(LPe,"STRONG",{});var XCt=s(jhe);M9o=r(XCt,"unispeech"),XCt.forEach(t),E9o=r(LPe," \u2014 "),kO=n(LPe,"A",{href:!0});var zCt=s(kO);C9o=r(zCt,"UniSpeechModel"),zCt.forEach(t),w9o=r(LPe," (UniSpeech model)"),LPe.forEach(t),A9o=i(x),i2=n(x,"LI",{});var yPe=s(i2);Dhe=n(yPe,"STRONG",{});var WCt=s(Dhe);L9o=r(WCt,"unispeech-sat"),WCt.forEach(t),y9o=r(yPe," \u2014 "),SO=n(yPe,"A",{href:!0});var QCt=s(SO);x9o=r(QCt,"UniSpeechSatModel"),QCt.forEach(t),$9o=r(yPe," (UniSpeechSat model)"),yPe.forEach(t),k9o=i(x),d2=n(x,"LI",{});var xPe=s(d2);Ghe=n(xPe,"STRONG",{});var UCt=s(Ghe);S9o=r(UCt,"van"),UCt.forEach(t),R9o=r(xPe," \u2014 "),RO=n(xPe,"A",{href:!0});var HCt=s(RO);P9o=r(HCt,"VanModel"),HCt.forEach(t),B9o=r(xPe," (VAN model)"),xPe.forEach(t),I9o=i(x),c2=n(x,"LI",{});var $Pe=s(c2);Ohe=n($Pe,"STRONG",{});var JCt=s(Ohe);N9o=r(JCt,"videomae"),JCt.forEach(t),q9o=r($Pe," \u2014 "),PO=n($Pe,"A",{href:!0});var YCt=s(PO);j9o=r(YCt,"VideoMAEModel"),YCt.forEach(t),D9o=r($Pe," (VideoMAE model)"),$Pe.forEach(t),G9o=i(x),m2=n(x,"LI",{});var kPe=s(m2);Vhe=n(kPe,"STRONG",{});var KCt=s(Vhe);O9o=r(KCt,"vilt"),KCt.forEach(t),V9o=r(kPe," \u2014 "),BO=n(kPe,"A",{href:!0});var ZCt=s(BO);X9o=r(ZCt,"ViltModel"),ZCt.forEach(t),z9o=r(kPe," (ViLT model)"),kPe.forEach(t),W9o=i(x),f2=n(x,"LI",{});var SPe=s(f2);Xhe=n(SPe,"STRONG",{});var e3t=s(Xhe);Q9o=r(e3t,"vision-text-dual-encoder"),e3t.forEach(t),U9o=r(SPe," \u2014 "),IO=n(SPe,"A",{href:!0});var o3t=s(IO);H9o=r(o3t,"VisionTextDualEncoderModel"),o3t.forEach(t),J9o=r(SPe," (VisionTextDualEncoder model)"),SPe.forEach(t),Y9o=i(x),g2=n(x,"LI",{});var RPe=s(g2);zhe=n(RPe,"STRONG",{});var r3t=s(zhe);K9o=r(r3t,"visual_bert"),r3t.forEach(t),Z9o=r(RPe," \u2014 "),NO=n(RPe,"A",{href:!0});var t3t=s(NO);exo=r(t3t,"VisualBertModel"),t3t.forEach(t),oxo=r(RPe," (VisualBERT model)"),RPe.forEach(t),rxo=i(x),h2=n(x,"LI",{});var PPe=s(h2);Whe=n(PPe,"STRONG",{});var a3t=s(Whe);txo=r(a3t,"vit"),a3t.forEach(t),axo=r(PPe," \u2014 "),qO=n(PPe,"A",{href:!0});var n3t=s(qO);nxo=r(n3t,"ViTModel"),n3t.forEach(t),sxo=r(PPe," (ViT model)"),PPe.forEach(t),lxo=i(x),u2=n(x,"LI",{});var BPe=s(u2);Qhe=n(BPe,"STRONG",{});var s3t=s(Qhe);ixo=r(s3t,"vit_mae"),s3t.forEach(t),dxo=r(BPe," \u2014 "),jO=n(BPe,"A",{href:!0});var l3t=s(jO);cxo=r(l3t,"ViTMAEModel"),l3t.forEach(t),mxo=r(BPe," (ViTMAE model)"),BPe.forEach(t),fxo=i(x),p2=n(x,"LI",{});var IPe=s(p2);Uhe=n(IPe,"STRONG",{});var i3t=s(Uhe);gxo=r(i3t,"wav2vec2"),i3t.forEach(t),hxo=r(IPe," \u2014 "),DO=n(IPe,"A",{href:!0});var d3t=s(DO);uxo=r(d3t,"Wav2Vec2Model"),d3t.forEach(t),pxo=r(IPe," (Wav2Vec2 model)"),IPe.forEach(t),_xo=i(x),_2=n(x,"LI",{});var NPe=s(_2);Hhe=n(NPe,"STRONG",{});var c3t=s(Hhe);bxo=r(c3t,"wav2vec2-conformer"),c3t.forEach(t),vxo=r(NPe," \u2014 "),GO=n(NPe,"A",{href:!0});var m3t=s(GO);Fxo=r(m3t,"Wav2Vec2ConformerModel"),m3t.forEach(t),Txo=r(NPe," (Wav2Vec2-Conformer model)"),NPe.forEach(t),Mxo=i(x),b2=n(x,"LI",{});var qPe=s(b2);Jhe=n(qPe,"STRONG",{});var f3t=s(Jhe);Exo=r(f3t,"wavlm"),f3t.forEach(t),Cxo=r(qPe," \u2014 "),OO=n(qPe,"A",{href:!0});var g3t=s(OO);wxo=r(g3t,"WavLMModel"),g3t.forEach(t),Axo=r(qPe," (WavLM model)"),qPe.forEach(t),Lxo=i(x),v2=n(x,"LI",{});var jPe=s(v2);Yhe=n(jPe,"STRONG",{});var h3t=s(Yhe);yxo=r(h3t,"xglm"),h3t.forEach(t),xxo=r(jPe," \u2014 "),VO=n(jPe,"A",{href:!0});var u3t=s(VO);$xo=r(u3t,"XGLMModel"),u3t.forEach(t),kxo=r(jPe," (XGLM model)"),jPe.forEach(t),Sxo=i(x),F2=n(x,"LI",{});var DPe=s(F2);Khe=n(DPe,"STRONG",{});var p3t=s(Khe);Rxo=r(p3t,"xlm"),p3t.forEach(t),Pxo=r(DPe," \u2014 "),XO=n(DPe,"A",{href:!0});var _3t=s(XO);Bxo=r(_3t,"XLMModel"),_3t.forEach(t),Ixo=r(DPe," (XLM model)"),DPe.forEach(t),Nxo=i(x),T2=n(x,"LI",{});var GPe=s(T2);Zhe=n(GPe,"STRONG",{});var b3t=s(Zhe);qxo=r(b3t,"xlm-prophetnet"),b3t.forEach(t),jxo=r(GPe," \u2014 "),zO=n(GPe,"A",{href:!0});var v3t=s(zO);Dxo=r(v3t,"XLMProphetNetModel"),v3t.forEach(t),Gxo=r(GPe," (XLM-ProphetNet model)"),GPe.forEach(t),Oxo=i(x),M2=n(x,"LI",{});var OPe=s(M2);eue=n(OPe,"STRONG",{});var F3t=s(eue);Vxo=r(F3t,"xlm-roberta"),F3t.forEach(t),Xxo=r(OPe," \u2014 "),WO=n(OPe,"A",{href:!0});var T3t=s(WO);zxo=r(T3t,"XLMRobertaModel"),T3t.forEach(t),Wxo=r(OPe," (XLM-RoBERTa model)"),OPe.forEach(t),Qxo=i(x),E2=n(x,"LI",{});var VPe=s(E2);oue=n(VPe,"STRONG",{});var M3t=s(oue);Uxo=r(M3t,"xlm-roberta-xl"),M3t.forEach(t),Hxo=r(VPe," \u2014 "),QO=n(VPe,"A",{href:!0});var E3t=s(QO);Jxo=r(E3t,"XLMRobertaXLModel"),E3t.forEach(t),Yxo=r(VPe," (XLM-RoBERTa-XL model)"),VPe.forEach(t),Kxo=i(x),C2=n(x,"LI",{});var XPe=s(C2);rue=n(XPe,"STRONG",{});var C3t=s(rue);Zxo=r(C3t,"xlnet"),C3t.forEach(t),e$o=r(XPe," \u2014 "),UO=n(XPe,"A",{href:!0});var w3t=s(UO);o$o=r(w3t,"XLNetModel"),w3t.forEach(t),r$o=r(XPe," (XLNet model)"),XPe.forEach(t),t$o=i(x),w2=n(x,"LI",{});var zPe=s(w2);tue=n(zPe,"STRONG",{});var A3t=s(tue);a$o=r(A3t,"yolos"),A3t.forEach(t),n$o=r(zPe," \u2014 "),HO=n(zPe,"A",{href:!0});var L3t=s(HO);s$o=r(L3t,"YolosModel"),L3t.forEach(t),l$o=r(zPe," (YOLOS model)"),zPe.forEach(t),i$o=i(x),A2=n(x,"LI",{});var WPe=s(A2);aue=n(WPe,"STRONG",{});var y3t=s(aue);d$o=r(y3t,"yoso"),y3t.forEach(t),c$o=r(WPe," \u2014 "),JO=n(WPe,"A",{href:!0});var x3t=s(JO);m$o=r(x3t,"YosoModel"),x3t.forEach(t),f$o=r(WPe," (YOSO model)"),WPe.forEach(t),x.forEach(t),g$o=i(ga),L2=n(ga,"P",{});var QPe=s(L2);h$o=r(QPe,"The model is set in evaluation mode by default using "),nue=n(QPe,"CODE",{});var $3t=s(nue);u$o=r($3t,"model.eval()"),$3t.forEach(t),p$o=r(QPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sue=n(QPe,"CODE",{});var k3t=s(sue);_$o=r(k3t,"model.train()"),k3t.forEach(t),QPe.forEach(t),b$o=i(ga),T(y2.$$.fragment,ga),ga.forEach(t),hl.forEach(t),qUe=i(m),nd=n(m,"H2",{class:!0});var UJe=s(nd);x2=n(UJe,"A",{id:!0,class:!0,href:!0});var S3t=s(x2);lue=n(S3t,"SPAN",{});var R3t=s(lue);T(e9.$$.fragment,R3t),R3t.forEach(t),S3t.forEach(t),v$o=i(UJe),iue=n(UJe,"SPAN",{});var P3t=s(iue);F$o=r(P3t,"AutoModelForPreTraining"),P3t.forEach(t),UJe.forEach(t),jUe=i(m),Ro=n(m,"DIV",{class:!0});var ul=s(Ro);T(o9.$$.fragment,ul),T$o=i(ul),sd=n(ul,"P",{});var sne=s(sd);M$o=r(sne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),YO=n(sne,"A",{href:!0});var B3t=s(YO);E$o=r(B3t,"from_pretrained()"),B3t.forEach(t),C$o=r(sne," class method or the "),KO=n(sne,"A",{href:!0});var I3t=s(KO);w$o=r(I3t,"from_config()"),I3t.forEach(t),A$o=r(sne,` class
method.`),sne.forEach(t),L$o=i(ul),r9=n(ul,"P",{});var HJe=s(r9);y$o=r(HJe,"This class cannot be instantiated directly using "),due=n(HJe,"CODE",{});var N3t=s(due);x$o=r(N3t,"__init__()"),N3t.forEach(t),$$o=r(HJe," (throws an error)."),HJe.forEach(t),k$o=i(ul),gt=n(ul,"DIV",{class:!0});var CL=s(gt);T(t9.$$.fragment,CL),S$o=i(CL),cue=n(CL,"P",{});var q3t=s(cue);R$o=r(q3t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),q3t.forEach(t),P$o=i(CL),ld=n(CL,"P",{});var lne=s(ld);B$o=r(lne,`Note:
Loading a model from its configuration file does `),mue=n(lne,"STRONG",{});var j3t=s(mue);I$o=r(j3t,"not"),j3t.forEach(t),N$o=r(lne,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZO=n(lne,"A",{href:!0});var D3t=s(ZO);q$o=r(D3t,"from_pretrained()"),D3t.forEach(t),j$o=r(lne," to load the model weights."),lne.forEach(t),D$o=i(CL),T($2.$$.fragment,CL),CL.forEach(t),G$o=i(ul),Ze=n(ul,"DIV",{class:!0});var ha=s(Ze);T(a9.$$.fragment,ha),O$o=i(ha),fue=n(ha,"P",{});var G3t=s(fue);V$o=r(G3t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),G3t.forEach(t),X$o=i(ha),Xa=n(ha,"P",{});var wL=s(Xa);z$o=r(wL,"The model class to instantiate is selected based on the "),gue=n(wL,"CODE",{});var O3t=s(gue);W$o=r(O3t,"model_type"),O3t.forEach(t),Q$o=r(wL,` property of the config object (either
passed as an argument or loaded from `),hue=n(wL,"CODE",{});var V3t=s(hue);U$o=r(V3t,"pretrained_model_name_or_path"),V3t.forEach(t),H$o=r(wL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=n(wL,"CODE",{});var X3t=s(uue);J$o=r(X3t,"pretrained_model_name_or_path"),X3t.forEach(t),Y$o=r(wL,":"),wL.forEach(t),K$o=i(ha),G=n(ha,"UL",{});var O=s(G);k2=n(O,"LI",{});var UPe=s(k2);pue=n(UPe,"STRONG",{});var z3t=s(pue);Z$o=r(z3t,"albert"),z3t.forEach(t),eko=r(UPe," \u2014 "),eV=n(UPe,"A",{href:!0});var W3t=s(eV);oko=r(W3t,"AlbertForPreTraining"),W3t.forEach(t),rko=r(UPe," (ALBERT model)"),UPe.forEach(t),tko=i(O),S2=n(O,"LI",{});var HPe=s(S2);_ue=n(HPe,"STRONG",{});var Q3t=s(_ue);ako=r(Q3t,"bart"),Q3t.forEach(t),nko=r(HPe," \u2014 "),oV=n(HPe,"A",{href:!0});var U3t=s(oV);sko=r(U3t,"BartForConditionalGeneration"),U3t.forEach(t),lko=r(HPe," (BART model)"),HPe.forEach(t),iko=i(O),R2=n(O,"LI",{});var JPe=s(R2);bue=n(JPe,"STRONG",{});var H3t=s(bue);dko=r(H3t,"bert"),H3t.forEach(t),cko=r(JPe," \u2014 "),rV=n(JPe,"A",{href:!0});var J3t=s(rV);mko=r(J3t,"BertForPreTraining"),J3t.forEach(t),fko=r(JPe," (BERT model)"),JPe.forEach(t),gko=i(O),P2=n(O,"LI",{});var YPe=s(P2);vue=n(YPe,"STRONG",{});var Y3t=s(vue);hko=r(Y3t,"big_bird"),Y3t.forEach(t),uko=r(YPe," \u2014 "),tV=n(YPe,"A",{href:!0});var K3t=s(tV);pko=r(K3t,"BigBirdForPreTraining"),K3t.forEach(t),_ko=r(YPe," (BigBird model)"),YPe.forEach(t),bko=i(O),B2=n(O,"LI",{});var KPe=s(B2);Fue=n(KPe,"STRONG",{});var Z3t=s(Fue);vko=r(Z3t,"bloom"),Z3t.forEach(t),Fko=r(KPe," \u2014 "),aV=n(KPe,"A",{href:!0});var e5t=s(aV);Tko=r(e5t,"BloomForCausalLM"),e5t.forEach(t),Mko=r(KPe," (BLOOM model)"),KPe.forEach(t),Eko=i(O),I2=n(O,"LI",{});var ZPe=s(I2);Tue=n(ZPe,"STRONG",{});var o5t=s(Tue);Cko=r(o5t,"camembert"),o5t.forEach(t),wko=r(ZPe," \u2014 "),nV=n(ZPe,"A",{href:!0});var r5t=s(nV);Ako=r(r5t,"CamembertForMaskedLM"),r5t.forEach(t),Lko=r(ZPe," (CamemBERT model)"),ZPe.forEach(t),yko=i(O),N2=n(O,"LI",{});var eBe=s(N2);Mue=n(eBe,"STRONG",{});var t5t=s(Mue);xko=r(t5t,"ctrl"),t5t.forEach(t),$ko=r(eBe," \u2014 "),sV=n(eBe,"A",{href:!0});var a5t=s(sV);kko=r(a5t,"CTRLLMHeadModel"),a5t.forEach(t),Sko=r(eBe," (CTRL model)"),eBe.forEach(t),Rko=i(O),q2=n(O,"LI",{});var oBe=s(q2);Eue=n(oBe,"STRONG",{});var n5t=s(Eue);Pko=r(n5t,"data2vec-text"),n5t.forEach(t),Bko=r(oBe," \u2014 "),lV=n(oBe,"A",{href:!0});var s5t=s(lV);Iko=r(s5t,"Data2VecTextForMaskedLM"),s5t.forEach(t),Nko=r(oBe," (Data2VecText model)"),oBe.forEach(t),qko=i(O),j2=n(O,"LI",{});var rBe=s(j2);Cue=n(rBe,"STRONG",{});var l5t=s(Cue);jko=r(l5t,"deberta"),l5t.forEach(t),Dko=r(rBe," \u2014 "),iV=n(rBe,"A",{href:!0});var i5t=s(iV);Gko=r(i5t,"DebertaForMaskedLM"),i5t.forEach(t),Oko=r(rBe," (DeBERTa model)"),rBe.forEach(t),Vko=i(O),D2=n(O,"LI",{});var tBe=s(D2);wue=n(tBe,"STRONG",{});var d5t=s(wue);Xko=r(d5t,"deberta-v2"),d5t.forEach(t),zko=r(tBe," \u2014 "),dV=n(tBe,"A",{href:!0});var c5t=s(dV);Wko=r(c5t,"DebertaV2ForMaskedLM"),c5t.forEach(t),Qko=r(tBe," (DeBERTa-v2 model)"),tBe.forEach(t),Uko=i(O),G2=n(O,"LI",{});var aBe=s(G2);Aue=n(aBe,"STRONG",{});var m5t=s(Aue);Hko=r(m5t,"distilbert"),m5t.forEach(t),Jko=r(aBe," \u2014 "),cV=n(aBe,"A",{href:!0});var f5t=s(cV);Yko=r(f5t,"DistilBertForMaskedLM"),f5t.forEach(t),Kko=r(aBe," (DistilBERT model)"),aBe.forEach(t),Zko=i(O),O2=n(O,"LI",{});var nBe=s(O2);Lue=n(nBe,"STRONG",{});var g5t=s(Lue);eSo=r(g5t,"electra"),g5t.forEach(t),oSo=r(nBe," \u2014 "),mV=n(nBe,"A",{href:!0});var h5t=s(mV);rSo=r(h5t,"ElectraForPreTraining"),h5t.forEach(t),tSo=r(nBe," (ELECTRA model)"),nBe.forEach(t),aSo=i(O),V2=n(O,"LI",{});var sBe=s(V2);yue=n(sBe,"STRONG",{});var u5t=s(yue);nSo=r(u5t,"flaubert"),u5t.forEach(t),sSo=r(sBe," \u2014 "),fV=n(sBe,"A",{href:!0});var p5t=s(fV);lSo=r(p5t,"FlaubertWithLMHeadModel"),p5t.forEach(t),iSo=r(sBe," (FlauBERT model)"),sBe.forEach(t),dSo=i(O),X2=n(O,"LI",{});var lBe=s(X2);xue=n(lBe,"STRONG",{});var _5t=s(xue);cSo=r(_5t,"flava"),_5t.forEach(t),mSo=r(lBe," \u2014 "),gV=n(lBe,"A",{href:!0});var b5t=s(gV);fSo=r(b5t,"FlavaForPreTraining"),b5t.forEach(t),gSo=r(lBe," (FLAVA model)"),lBe.forEach(t),hSo=i(O),z2=n(O,"LI",{});var iBe=s(z2);$ue=n(iBe,"STRONG",{});var v5t=s($ue);uSo=r(v5t,"fnet"),v5t.forEach(t),pSo=r(iBe," \u2014 "),hV=n(iBe,"A",{href:!0});var F5t=s(hV);_So=r(F5t,"FNetForPreTraining"),F5t.forEach(t),bSo=r(iBe," (FNet model)"),iBe.forEach(t),vSo=i(O),W2=n(O,"LI",{});var dBe=s(W2);kue=n(dBe,"STRONG",{});var T5t=s(kue);FSo=r(T5t,"fsmt"),T5t.forEach(t),TSo=r(dBe," \u2014 "),uV=n(dBe,"A",{href:!0});var M5t=s(uV);MSo=r(M5t,"FSMTForConditionalGeneration"),M5t.forEach(t),ESo=r(dBe," (FairSeq Machine-Translation model)"),dBe.forEach(t),CSo=i(O),Q2=n(O,"LI",{});var cBe=s(Q2);Sue=n(cBe,"STRONG",{});var E5t=s(Sue);wSo=r(E5t,"funnel"),E5t.forEach(t),ASo=r(cBe," \u2014 "),pV=n(cBe,"A",{href:!0});var C5t=s(pV);LSo=r(C5t,"FunnelForPreTraining"),C5t.forEach(t),ySo=r(cBe," (Funnel Transformer model)"),cBe.forEach(t),xSo=i(O),U2=n(O,"LI",{});var mBe=s(U2);Rue=n(mBe,"STRONG",{});var w5t=s(Rue);$So=r(w5t,"gpt2"),w5t.forEach(t),kSo=r(mBe," \u2014 "),_V=n(mBe,"A",{href:!0});var A5t=s(_V);SSo=r(A5t,"GPT2LMHeadModel"),A5t.forEach(t),RSo=r(mBe," (OpenAI GPT-2 model)"),mBe.forEach(t),PSo=i(O),H2=n(O,"LI",{});var fBe=s(H2);Pue=n(fBe,"STRONG",{});var L5t=s(Pue);BSo=r(L5t,"ibert"),L5t.forEach(t),ISo=r(fBe," \u2014 "),bV=n(fBe,"A",{href:!0});var y5t=s(bV);NSo=r(y5t,"IBertForMaskedLM"),y5t.forEach(t),qSo=r(fBe," (I-BERT model)"),fBe.forEach(t),jSo=i(O),J2=n(O,"LI",{});var gBe=s(J2);Bue=n(gBe,"STRONG",{});var x5t=s(Bue);DSo=r(x5t,"layoutlm"),x5t.forEach(t),GSo=r(gBe," \u2014 "),vV=n(gBe,"A",{href:!0});var $5t=s(vV);OSo=r($5t,"LayoutLMForMaskedLM"),$5t.forEach(t),VSo=r(gBe," (LayoutLM model)"),gBe.forEach(t),XSo=i(O),Y2=n(O,"LI",{});var hBe=s(Y2);Iue=n(hBe,"STRONG",{});var k5t=s(Iue);zSo=r(k5t,"longformer"),k5t.forEach(t),WSo=r(hBe," \u2014 "),FV=n(hBe,"A",{href:!0});var S5t=s(FV);QSo=r(S5t,"LongformerForMaskedLM"),S5t.forEach(t),USo=r(hBe," (Longformer model)"),hBe.forEach(t),HSo=i(O),K2=n(O,"LI",{});var uBe=s(K2);Nue=n(uBe,"STRONG",{});var R5t=s(Nue);JSo=r(R5t,"luke"),R5t.forEach(t),YSo=r(uBe," \u2014 "),TV=n(uBe,"A",{href:!0});var P5t=s(TV);KSo=r(P5t,"LukeForMaskedLM"),P5t.forEach(t),ZSo=r(uBe," (LUKE model)"),uBe.forEach(t),eRo=i(O),Z2=n(O,"LI",{});var pBe=s(Z2);que=n(pBe,"STRONG",{});var B5t=s(que);oRo=r(B5t,"lxmert"),B5t.forEach(t),rRo=r(pBe," \u2014 "),MV=n(pBe,"A",{href:!0});var I5t=s(MV);tRo=r(I5t,"LxmertForPreTraining"),I5t.forEach(t),aRo=r(pBe," (LXMERT model)"),pBe.forEach(t),nRo=i(O),eb=n(O,"LI",{});var _Be=s(eb);jue=n(_Be,"STRONG",{});var N5t=s(jue);sRo=r(N5t,"megatron-bert"),N5t.forEach(t),lRo=r(_Be," \u2014 "),EV=n(_Be,"A",{href:!0});var q5t=s(EV);iRo=r(q5t,"MegatronBertForPreTraining"),q5t.forEach(t),dRo=r(_Be," (Megatron-BERT model)"),_Be.forEach(t),cRo=i(O),ob=n(O,"LI",{});var bBe=s(ob);Due=n(bBe,"STRONG",{});var j5t=s(Due);mRo=r(j5t,"mobilebert"),j5t.forEach(t),fRo=r(bBe," \u2014 "),CV=n(bBe,"A",{href:!0});var D5t=s(CV);gRo=r(D5t,"MobileBertForPreTraining"),D5t.forEach(t),hRo=r(bBe," (MobileBERT model)"),bBe.forEach(t),uRo=i(O),rb=n(O,"LI",{});var vBe=s(rb);Gue=n(vBe,"STRONG",{});var G5t=s(Gue);pRo=r(G5t,"mpnet"),G5t.forEach(t),_Ro=r(vBe," \u2014 "),wV=n(vBe,"A",{href:!0});var O5t=s(wV);bRo=r(O5t,"MPNetForMaskedLM"),O5t.forEach(t),vRo=r(vBe," (MPNet model)"),vBe.forEach(t),FRo=i(O),tb=n(O,"LI",{});var FBe=s(tb);Oue=n(FBe,"STRONG",{});var V5t=s(Oue);TRo=r(V5t,"mvp"),V5t.forEach(t),MRo=r(FBe," \u2014 "),AV=n(FBe,"A",{href:!0});var X5t=s(AV);ERo=r(X5t,"MvpForConditionalGeneration"),X5t.forEach(t),CRo=r(FBe," (MVP model)"),FBe.forEach(t),wRo=i(O),ab=n(O,"LI",{});var TBe=s(ab);Vue=n(TBe,"STRONG",{});var z5t=s(Vue);ARo=r(z5t,"nezha"),z5t.forEach(t),LRo=r(TBe," \u2014 "),LV=n(TBe,"A",{href:!0});var W5t=s(LV);yRo=r(W5t,"NezhaForPreTraining"),W5t.forEach(t),xRo=r(TBe," (Nezha model)"),TBe.forEach(t),$Ro=i(O),nb=n(O,"LI",{});var MBe=s(nb);Xue=n(MBe,"STRONG",{});var Q5t=s(Xue);kRo=r(Q5t,"openai-gpt"),Q5t.forEach(t),SRo=r(MBe," \u2014 "),yV=n(MBe,"A",{href:!0});var U5t=s(yV);RRo=r(U5t,"OpenAIGPTLMHeadModel"),U5t.forEach(t),PRo=r(MBe," (OpenAI GPT model)"),MBe.forEach(t),BRo=i(O),sb=n(O,"LI",{});var EBe=s(sb);zue=n(EBe,"STRONG",{});var H5t=s(zue);IRo=r(H5t,"retribert"),H5t.forEach(t),NRo=r(EBe," \u2014 "),xV=n(EBe,"A",{href:!0});var J5t=s(xV);qRo=r(J5t,"RetriBertModel"),J5t.forEach(t),jRo=r(EBe," (RetriBERT model)"),EBe.forEach(t),DRo=i(O),lb=n(O,"LI",{});var CBe=s(lb);Wue=n(CBe,"STRONG",{});var Y5t=s(Wue);GRo=r(Y5t,"roberta"),Y5t.forEach(t),ORo=r(CBe," \u2014 "),$V=n(CBe,"A",{href:!0});var K5t=s($V);VRo=r(K5t,"RobertaForMaskedLM"),K5t.forEach(t),XRo=r(CBe," (RoBERTa model)"),CBe.forEach(t),zRo=i(O),ib=n(O,"LI",{});var wBe=s(ib);Que=n(wBe,"STRONG",{});var Z5t=s(Que);WRo=r(Z5t,"splinter"),Z5t.forEach(t),QRo=r(wBe," \u2014 "),kV=n(wBe,"A",{href:!0});var e0t=s(kV);URo=r(e0t,"SplinterForPreTraining"),e0t.forEach(t),HRo=r(wBe," (Splinter model)"),wBe.forEach(t),JRo=i(O),db=n(O,"LI",{});var ABe=s(db);Uue=n(ABe,"STRONG",{});var o0t=s(Uue);YRo=r(o0t,"squeezebert"),o0t.forEach(t),KRo=r(ABe," \u2014 "),SV=n(ABe,"A",{href:!0});var r0t=s(SV);ZRo=r(r0t,"SqueezeBertForMaskedLM"),r0t.forEach(t),ePo=r(ABe," (SqueezeBERT model)"),ABe.forEach(t),oPo=i(O),cb=n(O,"LI",{});var LBe=s(cb);Hue=n(LBe,"STRONG",{});var t0t=s(Hue);rPo=r(t0t,"t5"),t0t.forEach(t),tPo=r(LBe," \u2014 "),RV=n(LBe,"A",{href:!0});var a0t=s(RV);aPo=r(a0t,"T5ForConditionalGeneration"),a0t.forEach(t),nPo=r(LBe," (T5 model)"),LBe.forEach(t),sPo=i(O),mb=n(O,"LI",{});var yBe=s(mb);Jue=n(yBe,"STRONG",{});var n0t=s(Jue);lPo=r(n0t,"tapas"),n0t.forEach(t),iPo=r(yBe," \u2014 "),PV=n(yBe,"A",{href:!0});var s0t=s(PV);dPo=r(s0t,"TapasForMaskedLM"),s0t.forEach(t),cPo=r(yBe," (TAPAS model)"),yBe.forEach(t),mPo=i(O),fb=n(O,"LI",{});var xBe=s(fb);Yue=n(xBe,"STRONG",{});var l0t=s(Yue);fPo=r(l0t,"transfo-xl"),l0t.forEach(t),gPo=r(xBe," \u2014 "),BV=n(xBe,"A",{href:!0});var i0t=s(BV);hPo=r(i0t,"TransfoXLLMHeadModel"),i0t.forEach(t),uPo=r(xBe," (Transformer-XL model)"),xBe.forEach(t),pPo=i(O),gb=n(O,"LI",{});var $Be=s(gb);Kue=n($Be,"STRONG",{});var d0t=s(Kue);_Po=r(d0t,"unispeech"),d0t.forEach(t),bPo=r($Be," \u2014 "),IV=n($Be,"A",{href:!0});var c0t=s(IV);vPo=r(c0t,"UniSpeechForPreTraining"),c0t.forEach(t),FPo=r($Be," (UniSpeech model)"),$Be.forEach(t),TPo=i(O),hb=n(O,"LI",{});var kBe=s(hb);Zue=n(kBe,"STRONG",{});var m0t=s(Zue);MPo=r(m0t,"unispeech-sat"),m0t.forEach(t),EPo=r(kBe," \u2014 "),NV=n(kBe,"A",{href:!0});var f0t=s(NV);CPo=r(f0t,"UniSpeechSatForPreTraining"),f0t.forEach(t),wPo=r(kBe," (UniSpeechSat model)"),kBe.forEach(t),APo=i(O),ub=n(O,"LI",{});var SBe=s(ub);epe=n(SBe,"STRONG",{});var g0t=s(epe);LPo=r(g0t,"videomae"),g0t.forEach(t),yPo=r(SBe," \u2014 "),qV=n(SBe,"A",{href:!0});var h0t=s(qV);xPo=r(h0t,"VideoMAEForPreTraining"),h0t.forEach(t),$Po=r(SBe," (VideoMAE model)"),SBe.forEach(t),kPo=i(O),pb=n(O,"LI",{});var RBe=s(pb);ope=n(RBe,"STRONG",{});var u0t=s(ope);SPo=r(u0t,"visual_bert"),u0t.forEach(t),RPo=r(RBe," \u2014 "),jV=n(RBe,"A",{href:!0});var p0t=s(jV);PPo=r(p0t,"VisualBertForPreTraining"),p0t.forEach(t),BPo=r(RBe," (VisualBERT model)"),RBe.forEach(t),IPo=i(O),_b=n(O,"LI",{});var PBe=s(_b);rpe=n(PBe,"STRONG",{});var _0t=s(rpe);NPo=r(_0t,"vit_mae"),_0t.forEach(t),qPo=r(PBe," \u2014 "),DV=n(PBe,"A",{href:!0});var b0t=s(DV);jPo=r(b0t,"ViTMAEForPreTraining"),b0t.forEach(t),DPo=r(PBe," (ViTMAE model)"),PBe.forEach(t),GPo=i(O),bb=n(O,"LI",{});var BBe=s(bb);tpe=n(BBe,"STRONG",{});var v0t=s(tpe);OPo=r(v0t,"wav2vec2"),v0t.forEach(t),VPo=r(BBe," \u2014 "),GV=n(BBe,"A",{href:!0});var F0t=s(GV);XPo=r(F0t,"Wav2Vec2ForPreTraining"),F0t.forEach(t),zPo=r(BBe," (Wav2Vec2 model)"),BBe.forEach(t),WPo=i(O),vb=n(O,"LI",{});var IBe=s(vb);ape=n(IBe,"STRONG",{});var T0t=s(ape);QPo=r(T0t,"wav2vec2-conformer"),T0t.forEach(t),UPo=r(IBe," \u2014 "),OV=n(IBe,"A",{href:!0});var M0t=s(OV);HPo=r(M0t,"Wav2Vec2ConformerForPreTraining"),M0t.forEach(t),JPo=r(IBe," (Wav2Vec2-Conformer model)"),IBe.forEach(t),YPo=i(O),Fb=n(O,"LI",{});var NBe=s(Fb);npe=n(NBe,"STRONG",{});var E0t=s(npe);KPo=r(E0t,"xlm"),E0t.forEach(t),ZPo=r(NBe," \u2014 "),VV=n(NBe,"A",{href:!0});var C0t=s(VV);eBo=r(C0t,"XLMWithLMHeadModel"),C0t.forEach(t),oBo=r(NBe," (XLM model)"),NBe.forEach(t),rBo=i(O),Tb=n(O,"LI",{});var qBe=s(Tb);spe=n(qBe,"STRONG",{});var w0t=s(spe);tBo=r(w0t,"xlm-roberta"),w0t.forEach(t),aBo=r(qBe," \u2014 "),XV=n(qBe,"A",{href:!0});var A0t=s(XV);nBo=r(A0t,"XLMRobertaForMaskedLM"),A0t.forEach(t),sBo=r(qBe," (XLM-RoBERTa model)"),qBe.forEach(t),lBo=i(O),Mb=n(O,"LI",{});var jBe=s(Mb);lpe=n(jBe,"STRONG",{});var L0t=s(lpe);iBo=r(L0t,"xlm-roberta-xl"),L0t.forEach(t),dBo=r(jBe," \u2014 "),zV=n(jBe,"A",{href:!0});var y0t=s(zV);cBo=r(y0t,"XLMRobertaXLForMaskedLM"),y0t.forEach(t),mBo=r(jBe," (XLM-RoBERTa-XL model)"),jBe.forEach(t),fBo=i(O),Eb=n(O,"LI",{});var DBe=s(Eb);ipe=n(DBe,"STRONG",{});var x0t=s(ipe);gBo=r(x0t,"xlnet"),x0t.forEach(t),hBo=r(DBe," \u2014 "),WV=n(DBe,"A",{href:!0});var $0t=s(WV);uBo=r($0t,"XLNetLMHeadModel"),$0t.forEach(t),pBo=r(DBe," (XLNet model)"),DBe.forEach(t),O.forEach(t),_Bo=i(ha),Cb=n(ha,"P",{});var GBe=s(Cb);bBo=r(GBe,"The model is set in evaluation mode by default using "),dpe=n(GBe,"CODE",{});var k0t=s(dpe);vBo=r(k0t,"model.eval()"),k0t.forEach(t),FBo=r(GBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cpe=n(GBe,"CODE",{});var S0t=s(cpe);TBo=r(S0t,"model.train()"),S0t.forEach(t),GBe.forEach(t),MBo=i(ha),T(wb.$$.fragment,ha),ha.forEach(t),ul.forEach(t),DUe=i(m),id=n(m,"H2",{class:!0});var JJe=s(id);Ab=n(JJe,"A",{id:!0,class:!0,href:!0});var R0t=s(Ab);mpe=n(R0t,"SPAN",{});var P0t=s(mpe);T(n9.$$.fragment,P0t),P0t.forEach(t),R0t.forEach(t),EBo=i(JJe),fpe=n(JJe,"SPAN",{});var B0t=s(fpe);CBo=r(B0t,"AutoModelForCausalLM"),B0t.forEach(t),JJe.forEach(t),GUe=i(m),Po=n(m,"DIV",{class:!0});var pl=s(Po);T(s9.$$.fragment,pl),wBo=i(pl),dd=n(pl,"P",{});var ine=s(dd);ABo=r(ine,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),QV=n(ine,"A",{href:!0});var I0t=s(QV);LBo=r(I0t,"from_pretrained()"),I0t.forEach(t),yBo=r(ine," class method or the "),UV=n(ine,"A",{href:!0});var N0t=s(UV);xBo=r(N0t,"from_config()"),N0t.forEach(t),$Bo=r(ine,` class
method.`),ine.forEach(t),kBo=i(pl),l9=n(pl,"P",{});var YJe=s(l9);SBo=r(YJe,"This class cannot be instantiated directly using "),gpe=n(YJe,"CODE",{});var q0t=s(gpe);RBo=r(q0t,"__init__()"),q0t.forEach(t),PBo=r(YJe," (throws an error)."),YJe.forEach(t),BBo=i(pl),ht=n(pl,"DIV",{class:!0});var AL=s(ht);T(i9.$$.fragment,AL),IBo=i(AL),hpe=n(AL,"P",{});var j0t=s(hpe);NBo=r(j0t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),j0t.forEach(t),qBo=i(AL),cd=n(AL,"P",{});var dne=s(cd);jBo=r(dne,`Note:
Loading a model from its configuration file does `),upe=n(dne,"STRONG",{});var D0t=s(upe);DBo=r(D0t,"not"),D0t.forEach(t),GBo=r(dne,` load the model weights. It only affects the
model\u2019s configuration. Use `),HV=n(dne,"A",{href:!0});var G0t=s(HV);OBo=r(G0t,"from_pretrained()"),G0t.forEach(t),VBo=r(dne," to load the model weights."),dne.forEach(t),XBo=i(AL),T(Lb.$$.fragment,AL),AL.forEach(t),zBo=i(pl),eo=n(pl,"DIV",{class:!0});var ua=s(eo);T(d9.$$.fragment,ua),WBo=i(ua),ppe=n(ua,"P",{});var O0t=s(ppe);QBo=r(O0t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),O0t.forEach(t),UBo=i(ua),za=n(ua,"P",{});var LL=s(za);HBo=r(LL,"The model class to instantiate is selected based on the "),_pe=n(LL,"CODE",{});var V0t=s(_pe);JBo=r(V0t,"model_type"),V0t.forEach(t),YBo=r(LL,` property of the config object (either
passed as an argument or loaded from `),bpe=n(LL,"CODE",{});var X0t=s(bpe);KBo=r(X0t,"pretrained_model_name_or_path"),X0t.forEach(t),ZBo=r(LL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vpe=n(LL,"CODE",{});var z0t=s(vpe);eIo=r(z0t,"pretrained_model_name_or_path"),z0t.forEach(t),oIo=r(LL,":"),LL.forEach(t),rIo=i(ua),z=n(ua,"UL",{});var W=s(z);yb=n(W,"LI",{});var OBe=s(yb);Fpe=n(OBe,"STRONG",{});var W0t=s(Fpe);tIo=r(W0t,"bart"),W0t.forEach(t),aIo=r(OBe," \u2014 "),JV=n(OBe,"A",{href:!0});var Q0t=s(JV);nIo=r(Q0t,"BartForCausalLM"),Q0t.forEach(t),sIo=r(OBe," (BART model)"),OBe.forEach(t),lIo=i(W),xb=n(W,"LI",{});var VBe=s(xb);Tpe=n(VBe,"STRONG",{});var U0t=s(Tpe);iIo=r(U0t,"bert"),U0t.forEach(t),dIo=r(VBe," \u2014 "),YV=n(VBe,"A",{href:!0});var H0t=s(YV);cIo=r(H0t,"BertLMHeadModel"),H0t.forEach(t),mIo=r(VBe," (BERT model)"),VBe.forEach(t),fIo=i(W),$b=n(W,"LI",{});var XBe=s($b);Mpe=n(XBe,"STRONG",{});var J0t=s(Mpe);gIo=r(J0t,"bert-generation"),J0t.forEach(t),hIo=r(XBe," \u2014 "),KV=n(XBe,"A",{href:!0});var Y0t=s(KV);uIo=r(Y0t,"BertGenerationDecoder"),Y0t.forEach(t),pIo=r(XBe," (Bert Generation model)"),XBe.forEach(t),_Io=i(W),kb=n(W,"LI",{});var zBe=s(kb);Epe=n(zBe,"STRONG",{});var K0t=s(Epe);bIo=r(K0t,"big_bird"),K0t.forEach(t),vIo=r(zBe," \u2014 "),ZV=n(zBe,"A",{href:!0});var Z0t=s(ZV);FIo=r(Z0t,"BigBirdForCausalLM"),Z0t.forEach(t),TIo=r(zBe," (BigBird model)"),zBe.forEach(t),MIo=i(W),Sb=n(W,"LI",{});var WBe=s(Sb);Cpe=n(WBe,"STRONG",{});var ewt=s(Cpe);EIo=r(ewt,"bigbird_pegasus"),ewt.forEach(t),CIo=r(WBe," \u2014 "),eX=n(WBe,"A",{href:!0});var owt=s(eX);wIo=r(owt,"BigBirdPegasusForCausalLM"),owt.forEach(t),AIo=r(WBe," (BigBird-Pegasus model)"),WBe.forEach(t),LIo=i(W),Rb=n(W,"LI",{});var QBe=s(Rb);wpe=n(QBe,"STRONG",{});var rwt=s(wpe);yIo=r(rwt,"blenderbot"),rwt.forEach(t),xIo=r(QBe," \u2014 "),oX=n(QBe,"A",{href:!0});var twt=s(oX);$Io=r(twt,"BlenderbotForCausalLM"),twt.forEach(t),kIo=r(QBe," (Blenderbot model)"),QBe.forEach(t),SIo=i(W),Pb=n(W,"LI",{});var UBe=s(Pb);Ape=n(UBe,"STRONG",{});var awt=s(Ape);RIo=r(awt,"blenderbot-small"),awt.forEach(t),PIo=r(UBe," \u2014 "),rX=n(UBe,"A",{href:!0});var nwt=s(rX);BIo=r(nwt,"BlenderbotSmallForCausalLM"),nwt.forEach(t),IIo=r(UBe," (BlenderbotSmall model)"),UBe.forEach(t),NIo=i(W),Bb=n(W,"LI",{});var HBe=s(Bb);Lpe=n(HBe,"STRONG",{});var swt=s(Lpe);qIo=r(swt,"bloom"),swt.forEach(t),jIo=r(HBe," \u2014 "),tX=n(HBe,"A",{href:!0});var lwt=s(tX);DIo=r(lwt,"BloomForCausalLM"),lwt.forEach(t),GIo=r(HBe," (BLOOM model)"),HBe.forEach(t),OIo=i(W),Ib=n(W,"LI",{});var JBe=s(Ib);ype=n(JBe,"STRONG",{});var iwt=s(ype);VIo=r(iwt,"camembert"),iwt.forEach(t),XIo=r(JBe," \u2014 "),aX=n(JBe,"A",{href:!0});var dwt=s(aX);zIo=r(dwt,"CamembertForCausalLM"),dwt.forEach(t),WIo=r(JBe," (CamemBERT model)"),JBe.forEach(t),QIo=i(W),Nb=n(W,"LI",{});var YBe=s(Nb);xpe=n(YBe,"STRONG",{});var cwt=s(xpe);UIo=r(cwt,"codegen"),cwt.forEach(t),HIo=r(YBe," \u2014 "),nX=n(YBe,"A",{href:!0});var mwt=s(nX);JIo=r(mwt,"CodeGenForCausalLM"),mwt.forEach(t),YIo=r(YBe," (CodeGen model)"),YBe.forEach(t),KIo=i(W),qb=n(W,"LI",{});var KBe=s(qb);$pe=n(KBe,"STRONG",{});var fwt=s($pe);ZIo=r(fwt,"ctrl"),fwt.forEach(t),eNo=r(KBe," \u2014 "),sX=n(KBe,"A",{href:!0});var gwt=s(sX);oNo=r(gwt,"CTRLLMHeadModel"),gwt.forEach(t),rNo=r(KBe," (CTRL model)"),KBe.forEach(t),tNo=i(W),jb=n(W,"LI",{});var ZBe=s(jb);kpe=n(ZBe,"STRONG",{});var hwt=s(kpe);aNo=r(hwt,"data2vec-text"),hwt.forEach(t),nNo=r(ZBe," \u2014 "),lX=n(ZBe,"A",{href:!0});var uwt=s(lX);sNo=r(uwt,"Data2VecTextForCausalLM"),uwt.forEach(t),lNo=r(ZBe," (Data2VecText model)"),ZBe.forEach(t),iNo=i(W),Db=n(W,"LI",{});var eIe=s(Db);Spe=n(eIe,"STRONG",{});var pwt=s(Spe);dNo=r(pwt,"electra"),pwt.forEach(t),cNo=r(eIe," \u2014 "),iX=n(eIe,"A",{href:!0});var _wt=s(iX);mNo=r(_wt,"ElectraForCausalLM"),_wt.forEach(t),fNo=r(eIe," (ELECTRA model)"),eIe.forEach(t),gNo=i(W),Gb=n(W,"LI",{});var oIe=s(Gb);Rpe=n(oIe,"STRONG",{});var bwt=s(Rpe);hNo=r(bwt,"gpt2"),bwt.forEach(t),uNo=r(oIe," \u2014 "),dX=n(oIe,"A",{href:!0});var vwt=s(dX);pNo=r(vwt,"GPT2LMHeadModel"),vwt.forEach(t),_No=r(oIe," (OpenAI GPT-2 model)"),oIe.forEach(t),bNo=i(W),Ob=n(W,"LI",{});var rIe=s(Ob);Ppe=n(rIe,"STRONG",{});var Fwt=s(Ppe);vNo=r(Fwt,"gpt_neo"),Fwt.forEach(t),FNo=r(rIe," \u2014 "),cX=n(rIe,"A",{href:!0});var Twt=s(cX);TNo=r(Twt,"GPTNeoForCausalLM"),Twt.forEach(t),MNo=r(rIe," (GPT Neo model)"),rIe.forEach(t),ENo=i(W),Vb=n(W,"LI",{});var tIe=s(Vb);Bpe=n(tIe,"STRONG",{});var Mwt=s(Bpe);CNo=r(Mwt,"gpt_neox"),Mwt.forEach(t),wNo=r(tIe," \u2014 "),mX=n(tIe,"A",{href:!0});var Ewt=s(mX);ANo=r(Ewt,"GPTNeoXForCausalLM"),Ewt.forEach(t),LNo=r(tIe," (GPT NeoX model)"),tIe.forEach(t),yNo=i(W),Xb=n(W,"LI",{});var aIe=s(Xb);Ipe=n(aIe,"STRONG",{});var Cwt=s(Ipe);xNo=r(Cwt,"gptj"),Cwt.forEach(t),$No=r(aIe," \u2014 "),fX=n(aIe,"A",{href:!0});var wwt=s(fX);kNo=r(wwt,"GPTJForCausalLM"),wwt.forEach(t),SNo=r(aIe," (GPT-J model)"),aIe.forEach(t),RNo=i(W),zb=n(W,"LI",{});var nIe=s(zb);Npe=n(nIe,"STRONG",{});var Awt=s(Npe);PNo=r(Awt,"marian"),Awt.forEach(t),BNo=r(nIe," \u2014 "),gX=n(nIe,"A",{href:!0});var Lwt=s(gX);INo=r(Lwt,"MarianForCausalLM"),Lwt.forEach(t),NNo=r(nIe," (Marian model)"),nIe.forEach(t),qNo=i(W),Wb=n(W,"LI",{});var sIe=s(Wb);qpe=n(sIe,"STRONG",{});var ywt=s(qpe);jNo=r(ywt,"mbart"),ywt.forEach(t),DNo=r(sIe," \u2014 "),hX=n(sIe,"A",{href:!0});var xwt=s(hX);GNo=r(xwt,"MBartForCausalLM"),xwt.forEach(t),ONo=r(sIe," (mBART model)"),sIe.forEach(t),VNo=i(W),Qb=n(W,"LI",{});var lIe=s(Qb);jpe=n(lIe,"STRONG",{});var $wt=s(jpe);XNo=r($wt,"megatron-bert"),$wt.forEach(t),zNo=r(lIe," \u2014 "),uX=n(lIe,"A",{href:!0});var kwt=s(uX);WNo=r(kwt,"MegatronBertForCausalLM"),kwt.forEach(t),QNo=r(lIe," (Megatron-BERT model)"),lIe.forEach(t),UNo=i(W),Ub=n(W,"LI",{});var iIe=s(Ub);Dpe=n(iIe,"STRONG",{});var Swt=s(Dpe);HNo=r(Swt,"mvp"),Swt.forEach(t),JNo=r(iIe," \u2014 "),pX=n(iIe,"A",{href:!0});var Rwt=s(pX);YNo=r(Rwt,"MvpForCausalLM"),Rwt.forEach(t),KNo=r(iIe," (MVP model)"),iIe.forEach(t),ZNo=i(W),Hb=n(W,"LI",{});var dIe=s(Hb);Gpe=n(dIe,"STRONG",{});var Pwt=s(Gpe);eqo=r(Pwt,"openai-gpt"),Pwt.forEach(t),oqo=r(dIe," \u2014 "),_X=n(dIe,"A",{href:!0});var Bwt=s(_X);rqo=r(Bwt,"OpenAIGPTLMHeadModel"),Bwt.forEach(t),tqo=r(dIe," (OpenAI GPT model)"),dIe.forEach(t),aqo=i(W),Jb=n(W,"LI",{});var cIe=s(Jb);Ope=n(cIe,"STRONG",{});var Iwt=s(Ope);nqo=r(Iwt,"opt"),Iwt.forEach(t),sqo=r(cIe," \u2014 "),bX=n(cIe,"A",{href:!0});var Nwt=s(bX);lqo=r(Nwt,"OPTForCausalLM"),Nwt.forEach(t),iqo=r(cIe," (OPT model)"),cIe.forEach(t),dqo=i(W),Yb=n(W,"LI",{});var mIe=s(Yb);Vpe=n(mIe,"STRONG",{});var qwt=s(Vpe);cqo=r(qwt,"pegasus"),qwt.forEach(t),mqo=r(mIe," \u2014 "),vX=n(mIe,"A",{href:!0});var jwt=s(vX);fqo=r(jwt,"PegasusForCausalLM"),jwt.forEach(t),gqo=r(mIe," (Pegasus model)"),mIe.forEach(t),hqo=i(W),Kb=n(W,"LI",{});var fIe=s(Kb);Xpe=n(fIe,"STRONG",{});var Dwt=s(Xpe);uqo=r(Dwt,"plbart"),Dwt.forEach(t),pqo=r(fIe," \u2014 "),FX=n(fIe,"A",{href:!0});var Gwt=s(FX);_qo=r(Gwt,"PLBartForCausalLM"),Gwt.forEach(t),bqo=r(fIe," (PLBart model)"),fIe.forEach(t),vqo=i(W),Zb=n(W,"LI",{});var gIe=s(Zb);zpe=n(gIe,"STRONG",{});var Owt=s(zpe);Fqo=r(Owt,"prophetnet"),Owt.forEach(t),Tqo=r(gIe," \u2014 "),TX=n(gIe,"A",{href:!0});var Vwt=s(TX);Mqo=r(Vwt,"ProphetNetForCausalLM"),Vwt.forEach(t),Eqo=r(gIe," (ProphetNet model)"),gIe.forEach(t),Cqo=i(W),ev=n(W,"LI",{});var hIe=s(ev);Wpe=n(hIe,"STRONG",{});var Xwt=s(Wpe);wqo=r(Xwt,"qdqbert"),Xwt.forEach(t),Aqo=r(hIe," \u2014 "),MX=n(hIe,"A",{href:!0});var zwt=s(MX);Lqo=r(zwt,"QDQBertLMHeadModel"),zwt.forEach(t),yqo=r(hIe," (QDQBert model)"),hIe.forEach(t),xqo=i(W),ov=n(W,"LI",{});var uIe=s(ov);Qpe=n(uIe,"STRONG",{});var Wwt=s(Qpe);$qo=r(Wwt,"reformer"),Wwt.forEach(t),kqo=r(uIe," \u2014 "),EX=n(uIe,"A",{href:!0});var Qwt=s(EX);Sqo=r(Qwt,"ReformerModelWithLMHead"),Qwt.forEach(t),Rqo=r(uIe," (Reformer model)"),uIe.forEach(t),Pqo=i(W),rv=n(W,"LI",{});var pIe=s(rv);Upe=n(pIe,"STRONG",{});var Uwt=s(Upe);Bqo=r(Uwt,"rembert"),Uwt.forEach(t),Iqo=r(pIe," \u2014 "),CX=n(pIe,"A",{href:!0});var Hwt=s(CX);Nqo=r(Hwt,"RemBertForCausalLM"),Hwt.forEach(t),qqo=r(pIe," (RemBERT model)"),pIe.forEach(t),jqo=i(W),tv=n(W,"LI",{});var _Ie=s(tv);Hpe=n(_Ie,"STRONG",{});var Jwt=s(Hpe);Dqo=r(Jwt,"roberta"),Jwt.forEach(t),Gqo=r(_Ie," \u2014 "),wX=n(_Ie,"A",{href:!0});var Ywt=s(wX);Oqo=r(Ywt,"RobertaForCausalLM"),Ywt.forEach(t),Vqo=r(_Ie," (RoBERTa model)"),_Ie.forEach(t),Xqo=i(W),av=n(W,"LI",{});var bIe=s(av);Jpe=n(bIe,"STRONG",{});var Kwt=s(Jpe);zqo=r(Kwt,"roformer"),Kwt.forEach(t),Wqo=r(bIe," \u2014 "),AX=n(bIe,"A",{href:!0});var Zwt=s(AX);Qqo=r(Zwt,"RoFormerForCausalLM"),Zwt.forEach(t),Uqo=r(bIe," (RoFormer model)"),bIe.forEach(t),Hqo=i(W),nv=n(W,"LI",{});var vIe=s(nv);Ype=n(vIe,"STRONG",{});var e6t=s(Ype);Jqo=r(e6t,"speech_to_text_2"),e6t.forEach(t),Yqo=r(vIe," \u2014 "),LX=n(vIe,"A",{href:!0});var o6t=s(LX);Kqo=r(o6t,"Speech2Text2ForCausalLM"),o6t.forEach(t),Zqo=r(vIe," (Speech2Text2 model)"),vIe.forEach(t),ejo=i(W),sv=n(W,"LI",{});var FIe=s(sv);Kpe=n(FIe,"STRONG",{});var r6t=s(Kpe);ojo=r(r6t,"transfo-xl"),r6t.forEach(t),rjo=r(FIe," \u2014 "),yX=n(FIe,"A",{href:!0});var t6t=s(yX);tjo=r(t6t,"TransfoXLLMHeadModel"),t6t.forEach(t),ajo=r(FIe," (Transformer-XL model)"),FIe.forEach(t),njo=i(W),lv=n(W,"LI",{});var TIe=s(lv);Zpe=n(TIe,"STRONG",{});var a6t=s(Zpe);sjo=r(a6t,"trocr"),a6t.forEach(t),ljo=r(TIe," \u2014 "),xX=n(TIe,"A",{href:!0});var n6t=s(xX);ijo=r(n6t,"TrOCRForCausalLM"),n6t.forEach(t),djo=r(TIe," (TrOCR model)"),TIe.forEach(t),cjo=i(W),iv=n(W,"LI",{});var MIe=s(iv);e_e=n(MIe,"STRONG",{});var s6t=s(e_e);mjo=r(s6t,"xglm"),s6t.forEach(t),fjo=r(MIe," \u2014 "),$X=n(MIe,"A",{href:!0});var l6t=s($X);gjo=r(l6t,"XGLMForCausalLM"),l6t.forEach(t),hjo=r(MIe," (XGLM model)"),MIe.forEach(t),ujo=i(W),dv=n(W,"LI",{});var EIe=s(dv);o_e=n(EIe,"STRONG",{});var i6t=s(o_e);pjo=r(i6t,"xlm"),i6t.forEach(t),_jo=r(EIe," \u2014 "),kX=n(EIe,"A",{href:!0});var d6t=s(kX);bjo=r(d6t,"XLMWithLMHeadModel"),d6t.forEach(t),vjo=r(EIe," (XLM model)"),EIe.forEach(t),Fjo=i(W),cv=n(W,"LI",{});var CIe=s(cv);r_e=n(CIe,"STRONG",{});var c6t=s(r_e);Tjo=r(c6t,"xlm-prophetnet"),c6t.forEach(t),Mjo=r(CIe," \u2014 "),SX=n(CIe,"A",{href:!0});var m6t=s(SX);Ejo=r(m6t,"XLMProphetNetForCausalLM"),m6t.forEach(t),Cjo=r(CIe," (XLM-ProphetNet model)"),CIe.forEach(t),wjo=i(W),mv=n(W,"LI",{});var wIe=s(mv);t_e=n(wIe,"STRONG",{});var f6t=s(t_e);Ajo=r(f6t,"xlm-roberta"),f6t.forEach(t),Ljo=r(wIe," \u2014 "),RX=n(wIe,"A",{href:!0});var g6t=s(RX);yjo=r(g6t,"XLMRobertaForCausalLM"),g6t.forEach(t),xjo=r(wIe," (XLM-RoBERTa model)"),wIe.forEach(t),$jo=i(W),fv=n(W,"LI",{});var AIe=s(fv);a_e=n(AIe,"STRONG",{});var h6t=s(a_e);kjo=r(h6t,"xlm-roberta-xl"),h6t.forEach(t),Sjo=r(AIe," \u2014 "),PX=n(AIe,"A",{href:!0});var u6t=s(PX);Rjo=r(u6t,"XLMRobertaXLForCausalLM"),u6t.forEach(t),Pjo=r(AIe," (XLM-RoBERTa-XL model)"),AIe.forEach(t),Bjo=i(W),gv=n(W,"LI",{});var LIe=s(gv);n_e=n(LIe,"STRONG",{});var p6t=s(n_e);Ijo=r(p6t,"xlnet"),p6t.forEach(t),Njo=r(LIe," \u2014 "),BX=n(LIe,"A",{href:!0});var _6t=s(BX);qjo=r(_6t,"XLNetLMHeadModel"),_6t.forEach(t),jjo=r(LIe," (XLNet model)"),LIe.forEach(t),W.forEach(t),Djo=i(ua),hv=n(ua,"P",{});var yIe=s(hv);Gjo=r(yIe,"The model is set in evaluation mode by default using "),s_e=n(yIe,"CODE",{});var b6t=s(s_e);Ojo=r(b6t,"model.eval()"),b6t.forEach(t),Vjo=r(yIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l_e=n(yIe,"CODE",{});var v6t=s(l_e);Xjo=r(v6t,"model.train()"),v6t.forEach(t),yIe.forEach(t),zjo=i(ua),T(uv.$$.fragment,ua),ua.forEach(t),pl.forEach(t),OUe=i(m),md=n(m,"H2",{class:!0});var KJe=s(md);pv=n(KJe,"A",{id:!0,class:!0,href:!0});var F6t=s(pv);i_e=n(F6t,"SPAN",{});var T6t=s(i_e);T(c9.$$.fragment,T6t),T6t.forEach(t),F6t.forEach(t),Wjo=i(KJe),d_e=n(KJe,"SPAN",{});var M6t=s(d_e);Qjo=r(M6t,"AutoModelForMaskedLM"),M6t.forEach(t),KJe.forEach(t),VUe=i(m),Bo=n(m,"DIV",{class:!0});var _l=s(Bo);T(m9.$$.fragment,_l),Ujo=i(_l),fd=n(_l,"P",{});var cne=s(fd);Hjo=r(cne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),IX=n(cne,"A",{href:!0});var E6t=s(IX);Jjo=r(E6t,"from_pretrained()"),E6t.forEach(t),Yjo=r(cne," class method or the "),NX=n(cne,"A",{href:!0});var C6t=s(NX);Kjo=r(C6t,"from_config()"),C6t.forEach(t),Zjo=r(cne,` class
method.`),cne.forEach(t),eDo=i(_l),f9=n(_l,"P",{});var ZJe=s(f9);oDo=r(ZJe,"This class cannot be instantiated directly using "),c_e=n(ZJe,"CODE",{});var w6t=s(c_e);rDo=r(w6t,"__init__()"),w6t.forEach(t),tDo=r(ZJe," (throws an error)."),ZJe.forEach(t),aDo=i(_l),ut=n(_l,"DIV",{class:!0});var yL=s(ut);T(g9.$$.fragment,yL),nDo=i(yL),m_e=n(yL,"P",{});var A6t=s(m_e);sDo=r(A6t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),A6t.forEach(t),lDo=i(yL),gd=n(yL,"P",{});var mne=s(gd);iDo=r(mne,`Note:
Loading a model from its configuration file does `),f_e=n(mne,"STRONG",{});var L6t=s(f_e);dDo=r(L6t,"not"),L6t.forEach(t),cDo=r(mne,` load the model weights. It only affects the
model\u2019s configuration. Use `),qX=n(mne,"A",{href:!0});var y6t=s(qX);mDo=r(y6t,"from_pretrained()"),y6t.forEach(t),fDo=r(mne," to load the model weights."),mne.forEach(t),gDo=i(yL),T(_v.$$.fragment,yL),yL.forEach(t),hDo=i(_l),oo=n(_l,"DIV",{class:!0});var pa=s(oo);T(h9.$$.fragment,pa),uDo=i(pa),g_e=n(pa,"P",{});var x6t=s(g_e);pDo=r(x6t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),x6t.forEach(t),_Do=i(pa),Wa=n(pa,"P",{});var xL=s(Wa);bDo=r(xL,"The model class to instantiate is selected based on the "),h_e=n(xL,"CODE",{});var $6t=s(h_e);vDo=r($6t,"model_type"),$6t.forEach(t),FDo=r(xL,` property of the config object (either
passed as an argument or loaded from `),u_e=n(xL,"CODE",{});var k6t=s(u_e);TDo=r(k6t,"pretrained_model_name_or_path"),k6t.forEach(t),MDo=r(xL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p_e=n(xL,"CODE",{});var S6t=s(p_e);EDo=r(S6t,"pretrained_model_name_or_path"),S6t.forEach(t),CDo=r(xL,":"),xL.forEach(t),wDo=i(pa),U=n(pa,"UL",{});var Y=s(U);bv=n(Y,"LI",{});var xIe=s(bv);__e=n(xIe,"STRONG",{});var R6t=s(__e);ADo=r(R6t,"albert"),R6t.forEach(t),LDo=r(xIe," \u2014 "),jX=n(xIe,"A",{href:!0});var P6t=s(jX);yDo=r(P6t,"AlbertForMaskedLM"),P6t.forEach(t),xDo=r(xIe," (ALBERT model)"),xIe.forEach(t),$Do=i(Y),vv=n(Y,"LI",{});var $Ie=s(vv);b_e=n($Ie,"STRONG",{});var B6t=s(b_e);kDo=r(B6t,"bart"),B6t.forEach(t),SDo=r($Ie," \u2014 "),DX=n($Ie,"A",{href:!0});var I6t=s(DX);RDo=r(I6t,"BartForConditionalGeneration"),I6t.forEach(t),PDo=r($Ie," (BART model)"),$Ie.forEach(t),BDo=i(Y),Fv=n(Y,"LI",{});var kIe=s(Fv);v_e=n(kIe,"STRONG",{});var N6t=s(v_e);IDo=r(N6t,"bert"),N6t.forEach(t),NDo=r(kIe," \u2014 "),GX=n(kIe,"A",{href:!0});var q6t=s(GX);qDo=r(q6t,"BertForMaskedLM"),q6t.forEach(t),jDo=r(kIe," (BERT model)"),kIe.forEach(t),DDo=i(Y),Tv=n(Y,"LI",{});var SIe=s(Tv);F_e=n(SIe,"STRONG",{});var j6t=s(F_e);GDo=r(j6t,"big_bird"),j6t.forEach(t),ODo=r(SIe," \u2014 "),OX=n(SIe,"A",{href:!0});var D6t=s(OX);VDo=r(D6t,"BigBirdForMaskedLM"),D6t.forEach(t),XDo=r(SIe," (BigBird model)"),SIe.forEach(t),zDo=i(Y),Mv=n(Y,"LI",{});var RIe=s(Mv);T_e=n(RIe,"STRONG",{});var G6t=s(T_e);WDo=r(G6t,"camembert"),G6t.forEach(t),QDo=r(RIe," \u2014 "),VX=n(RIe,"A",{href:!0});var O6t=s(VX);UDo=r(O6t,"CamembertForMaskedLM"),O6t.forEach(t),HDo=r(RIe," (CamemBERT model)"),RIe.forEach(t),JDo=i(Y),Ev=n(Y,"LI",{});var PIe=s(Ev);M_e=n(PIe,"STRONG",{});var V6t=s(M_e);YDo=r(V6t,"convbert"),V6t.forEach(t),KDo=r(PIe," \u2014 "),XX=n(PIe,"A",{href:!0});var X6t=s(XX);ZDo=r(X6t,"ConvBertForMaskedLM"),X6t.forEach(t),eGo=r(PIe," (ConvBERT model)"),PIe.forEach(t),oGo=i(Y),Cv=n(Y,"LI",{});var BIe=s(Cv);E_e=n(BIe,"STRONG",{});var z6t=s(E_e);rGo=r(z6t,"data2vec-text"),z6t.forEach(t),tGo=r(BIe," \u2014 "),zX=n(BIe,"A",{href:!0});var W6t=s(zX);aGo=r(W6t,"Data2VecTextForMaskedLM"),W6t.forEach(t),nGo=r(BIe," (Data2VecText model)"),BIe.forEach(t),sGo=i(Y),wv=n(Y,"LI",{});var IIe=s(wv);C_e=n(IIe,"STRONG",{});var Q6t=s(C_e);lGo=r(Q6t,"deberta"),Q6t.forEach(t),iGo=r(IIe," \u2014 "),WX=n(IIe,"A",{href:!0});var U6t=s(WX);dGo=r(U6t,"DebertaForMaskedLM"),U6t.forEach(t),cGo=r(IIe," (DeBERTa model)"),IIe.forEach(t),mGo=i(Y),Av=n(Y,"LI",{});var NIe=s(Av);w_e=n(NIe,"STRONG",{});var H6t=s(w_e);fGo=r(H6t,"deberta-v2"),H6t.forEach(t),gGo=r(NIe," \u2014 "),QX=n(NIe,"A",{href:!0});var J6t=s(QX);hGo=r(J6t,"DebertaV2ForMaskedLM"),J6t.forEach(t),uGo=r(NIe," (DeBERTa-v2 model)"),NIe.forEach(t),pGo=i(Y),Lv=n(Y,"LI",{});var qIe=s(Lv);A_e=n(qIe,"STRONG",{});var Y6t=s(A_e);_Go=r(Y6t,"distilbert"),Y6t.forEach(t),bGo=r(qIe," \u2014 "),UX=n(qIe,"A",{href:!0});var K6t=s(UX);vGo=r(K6t,"DistilBertForMaskedLM"),K6t.forEach(t),FGo=r(qIe," (DistilBERT model)"),qIe.forEach(t),TGo=i(Y),yv=n(Y,"LI",{});var jIe=s(yv);L_e=n(jIe,"STRONG",{});var Z6t=s(L_e);MGo=r(Z6t,"electra"),Z6t.forEach(t),EGo=r(jIe," \u2014 "),HX=n(jIe,"A",{href:!0});var eAt=s(HX);CGo=r(eAt,"ElectraForMaskedLM"),eAt.forEach(t),wGo=r(jIe," (ELECTRA model)"),jIe.forEach(t),AGo=i(Y),xv=n(Y,"LI",{});var DIe=s(xv);y_e=n(DIe,"STRONG",{});var oAt=s(y_e);LGo=r(oAt,"flaubert"),oAt.forEach(t),yGo=r(DIe," \u2014 "),JX=n(DIe,"A",{href:!0});var rAt=s(JX);xGo=r(rAt,"FlaubertWithLMHeadModel"),rAt.forEach(t),$Go=r(DIe," (FlauBERT model)"),DIe.forEach(t),kGo=i(Y),$v=n(Y,"LI",{});var GIe=s($v);x_e=n(GIe,"STRONG",{});var tAt=s(x_e);SGo=r(tAt,"fnet"),tAt.forEach(t),RGo=r(GIe," \u2014 "),YX=n(GIe,"A",{href:!0});var aAt=s(YX);PGo=r(aAt,"FNetForMaskedLM"),aAt.forEach(t),BGo=r(GIe," (FNet model)"),GIe.forEach(t),IGo=i(Y),kv=n(Y,"LI",{});var OIe=s(kv);$_e=n(OIe,"STRONG",{});var nAt=s($_e);NGo=r(nAt,"funnel"),nAt.forEach(t),qGo=r(OIe," \u2014 "),KX=n(OIe,"A",{href:!0});var sAt=s(KX);jGo=r(sAt,"FunnelForMaskedLM"),sAt.forEach(t),DGo=r(OIe," (Funnel Transformer model)"),OIe.forEach(t),GGo=i(Y),Sv=n(Y,"LI",{});var VIe=s(Sv);k_e=n(VIe,"STRONG",{});var lAt=s(k_e);OGo=r(lAt,"ibert"),lAt.forEach(t),VGo=r(VIe," \u2014 "),ZX=n(VIe,"A",{href:!0});var iAt=s(ZX);XGo=r(iAt,"IBertForMaskedLM"),iAt.forEach(t),zGo=r(VIe," (I-BERT model)"),VIe.forEach(t),WGo=i(Y),Rv=n(Y,"LI",{});var XIe=s(Rv);S_e=n(XIe,"STRONG",{});var dAt=s(S_e);QGo=r(dAt,"layoutlm"),dAt.forEach(t),UGo=r(XIe," \u2014 "),ez=n(XIe,"A",{href:!0});var cAt=s(ez);HGo=r(cAt,"LayoutLMForMaskedLM"),cAt.forEach(t),JGo=r(XIe," (LayoutLM model)"),XIe.forEach(t),YGo=i(Y),Pv=n(Y,"LI",{});var zIe=s(Pv);R_e=n(zIe,"STRONG",{});var mAt=s(R_e);KGo=r(mAt,"longformer"),mAt.forEach(t),ZGo=r(zIe," \u2014 "),oz=n(zIe,"A",{href:!0});var fAt=s(oz);eOo=r(fAt,"LongformerForMaskedLM"),fAt.forEach(t),oOo=r(zIe," (Longformer model)"),zIe.forEach(t),rOo=i(Y),Bv=n(Y,"LI",{});var WIe=s(Bv);P_e=n(WIe,"STRONG",{});var gAt=s(P_e);tOo=r(gAt,"luke"),gAt.forEach(t),aOo=r(WIe," \u2014 "),rz=n(WIe,"A",{href:!0});var hAt=s(rz);nOo=r(hAt,"LukeForMaskedLM"),hAt.forEach(t),sOo=r(WIe," (LUKE model)"),WIe.forEach(t),lOo=i(Y),Iv=n(Y,"LI",{});var QIe=s(Iv);B_e=n(QIe,"STRONG",{});var uAt=s(B_e);iOo=r(uAt,"mbart"),uAt.forEach(t),dOo=r(QIe," \u2014 "),tz=n(QIe,"A",{href:!0});var pAt=s(tz);cOo=r(pAt,"MBartForConditionalGeneration"),pAt.forEach(t),mOo=r(QIe," (mBART model)"),QIe.forEach(t),fOo=i(Y),Nv=n(Y,"LI",{});var UIe=s(Nv);I_e=n(UIe,"STRONG",{});var _At=s(I_e);gOo=r(_At,"megatron-bert"),_At.forEach(t),hOo=r(UIe," \u2014 "),az=n(UIe,"A",{href:!0});var bAt=s(az);uOo=r(bAt,"MegatronBertForMaskedLM"),bAt.forEach(t),pOo=r(UIe," (Megatron-BERT model)"),UIe.forEach(t),_Oo=i(Y),qv=n(Y,"LI",{});var HIe=s(qv);N_e=n(HIe,"STRONG",{});var vAt=s(N_e);bOo=r(vAt,"mobilebert"),vAt.forEach(t),vOo=r(HIe," \u2014 "),nz=n(HIe,"A",{href:!0});var FAt=s(nz);FOo=r(FAt,"MobileBertForMaskedLM"),FAt.forEach(t),TOo=r(HIe," (MobileBERT model)"),HIe.forEach(t),MOo=i(Y),jv=n(Y,"LI",{});var JIe=s(jv);q_e=n(JIe,"STRONG",{});var TAt=s(q_e);EOo=r(TAt,"mpnet"),TAt.forEach(t),COo=r(JIe," \u2014 "),sz=n(JIe,"A",{href:!0});var MAt=s(sz);wOo=r(MAt,"MPNetForMaskedLM"),MAt.forEach(t),AOo=r(JIe," (MPNet model)"),JIe.forEach(t),LOo=i(Y),Dv=n(Y,"LI",{});var YIe=s(Dv);j_e=n(YIe,"STRONG",{});var EAt=s(j_e);yOo=r(EAt,"mvp"),EAt.forEach(t),xOo=r(YIe," \u2014 "),lz=n(YIe,"A",{href:!0});var CAt=s(lz);$Oo=r(CAt,"MvpForConditionalGeneration"),CAt.forEach(t),kOo=r(YIe," (MVP model)"),YIe.forEach(t),SOo=i(Y),Gv=n(Y,"LI",{});var KIe=s(Gv);D_e=n(KIe,"STRONG",{});var wAt=s(D_e);ROo=r(wAt,"nezha"),wAt.forEach(t),POo=r(KIe," \u2014 "),iz=n(KIe,"A",{href:!0});var AAt=s(iz);BOo=r(AAt,"NezhaForMaskedLM"),AAt.forEach(t),IOo=r(KIe," (Nezha model)"),KIe.forEach(t),NOo=i(Y),Ov=n(Y,"LI",{});var ZIe=s(Ov);G_e=n(ZIe,"STRONG",{});var LAt=s(G_e);qOo=r(LAt,"nystromformer"),LAt.forEach(t),jOo=r(ZIe," \u2014 "),dz=n(ZIe,"A",{href:!0});var yAt=s(dz);DOo=r(yAt,"NystromformerForMaskedLM"),yAt.forEach(t),GOo=r(ZIe," (Nystr\xF6mformer model)"),ZIe.forEach(t),OOo=i(Y),Vv=n(Y,"LI",{});var eNe=s(Vv);O_e=n(eNe,"STRONG",{});var xAt=s(O_e);VOo=r(xAt,"perceiver"),xAt.forEach(t),XOo=r(eNe," \u2014 "),cz=n(eNe,"A",{href:!0});var $At=s(cz);zOo=r($At,"PerceiverForMaskedLM"),$At.forEach(t),WOo=r(eNe," (Perceiver model)"),eNe.forEach(t),QOo=i(Y),Xv=n(Y,"LI",{});var oNe=s(Xv);V_e=n(oNe,"STRONG",{});var kAt=s(V_e);UOo=r(kAt,"qdqbert"),kAt.forEach(t),HOo=r(oNe," \u2014 "),mz=n(oNe,"A",{href:!0});var SAt=s(mz);JOo=r(SAt,"QDQBertForMaskedLM"),SAt.forEach(t),YOo=r(oNe," (QDQBert model)"),oNe.forEach(t),KOo=i(Y),zv=n(Y,"LI",{});var rNe=s(zv);X_e=n(rNe,"STRONG",{});var RAt=s(X_e);ZOo=r(RAt,"reformer"),RAt.forEach(t),eVo=r(rNe," \u2014 "),fz=n(rNe,"A",{href:!0});var PAt=s(fz);oVo=r(PAt,"ReformerForMaskedLM"),PAt.forEach(t),rVo=r(rNe," (Reformer model)"),rNe.forEach(t),tVo=i(Y),Wv=n(Y,"LI",{});var tNe=s(Wv);z_e=n(tNe,"STRONG",{});var BAt=s(z_e);aVo=r(BAt,"rembert"),BAt.forEach(t),nVo=r(tNe," \u2014 "),gz=n(tNe,"A",{href:!0});var IAt=s(gz);sVo=r(IAt,"RemBertForMaskedLM"),IAt.forEach(t),lVo=r(tNe," (RemBERT model)"),tNe.forEach(t),iVo=i(Y),Qv=n(Y,"LI",{});var aNe=s(Qv);W_e=n(aNe,"STRONG",{});var NAt=s(W_e);dVo=r(NAt,"roberta"),NAt.forEach(t),cVo=r(aNe," \u2014 "),hz=n(aNe,"A",{href:!0});var qAt=s(hz);mVo=r(qAt,"RobertaForMaskedLM"),qAt.forEach(t),fVo=r(aNe," (RoBERTa model)"),aNe.forEach(t),gVo=i(Y),Uv=n(Y,"LI",{});var nNe=s(Uv);Q_e=n(nNe,"STRONG",{});var jAt=s(Q_e);hVo=r(jAt,"roformer"),jAt.forEach(t),uVo=r(nNe," \u2014 "),uz=n(nNe,"A",{href:!0});var DAt=s(uz);pVo=r(DAt,"RoFormerForMaskedLM"),DAt.forEach(t),_Vo=r(nNe," (RoFormer model)"),nNe.forEach(t),bVo=i(Y),Hv=n(Y,"LI",{});var sNe=s(Hv);U_e=n(sNe,"STRONG",{});var GAt=s(U_e);vVo=r(GAt,"squeezebert"),GAt.forEach(t),FVo=r(sNe," \u2014 "),pz=n(sNe,"A",{href:!0});var OAt=s(pz);TVo=r(OAt,"SqueezeBertForMaskedLM"),OAt.forEach(t),MVo=r(sNe," (SqueezeBERT model)"),sNe.forEach(t),EVo=i(Y),Jv=n(Y,"LI",{});var lNe=s(Jv);H_e=n(lNe,"STRONG",{});var VAt=s(H_e);CVo=r(VAt,"tapas"),VAt.forEach(t),wVo=r(lNe," \u2014 "),_z=n(lNe,"A",{href:!0});var XAt=s(_z);AVo=r(XAt,"TapasForMaskedLM"),XAt.forEach(t),LVo=r(lNe," (TAPAS model)"),lNe.forEach(t),yVo=i(Y),Yv=n(Y,"LI",{});var iNe=s(Yv);J_e=n(iNe,"STRONG",{});var zAt=s(J_e);xVo=r(zAt,"wav2vec2"),zAt.forEach(t),$Vo=r(iNe," \u2014 "),Y_e=n(iNe,"CODE",{});var WAt=s(Y_e);kVo=r(WAt,"Wav2Vec2ForMaskedLM"),WAt.forEach(t),SVo=r(iNe," (Wav2Vec2 model)"),iNe.forEach(t),RVo=i(Y),Kv=n(Y,"LI",{});var dNe=s(Kv);K_e=n(dNe,"STRONG",{});var QAt=s(K_e);PVo=r(QAt,"xlm"),QAt.forEach(t),BVo=r(dNe," \u2014 "),bz=n(dNe,"A",{href:!0});var UAt=s(bz);IVo=r(UAt,"XLMWithLMHeadModel"),UAt.forEach(t),NVo=r(dNe," (XLM model)"),dNe.forEach(t),qVo=i(Y),Zv=n(Y,"LI",{});var cNe=s(Zv);Z_e=n(cNe,"STRONG",{});var HAt=s(Z_e);jVo=r(HAt,"xlm-roberta"),HAt.forEach(t),DVo=r(cNe," \u2014 "),vz=n(cNe,"A",{href:!0});var JAt=s(vz);GVo=r(JAt,"XLMRobertaForMaskedLM"),JAt.forEach(t),OVo=r(cNe," (XLM-RoBERTa model)"),cNe.forEach(t),VVo=i(Y),e1=n(Y,"LI",{});var mNe=s(e1);e2e=n(mNe,"STRONG",{});var YAt=s(e2e);XVo=r(YAt,"xlm-roberta-xl"),YAt.forEach(t),zVo=r(mNe," \u2014 "),Fz=n(mNe,"A",{href:!0});var KAt=s(Fz);WVo=r(KAt,"XLMRobertaXLForMaskedLM"),KAt.forEach(t),QVo=r(mNe," (XLM-RoBERTa-XL model)"),mNe.forEach(t),UVo=i(Y),o1=n(Y,"LI",{});var fNe=s(o1);o2e=n(fNe,"STRONG",{});var ZAt=s(o2e);HVo=r(ZAt,"yoso"),ZAt.forEach(t),JVo=r(fNe," \u2014 "),Tz=n(fNe,"A",{href:!0});var e7t=s(Tz);YVo=r(e7t,"YosoForMaskedLM"),e7t.forEach(t),KVo=r(fNe," (YOSO model)"),fNe.forEach(t),Y.forEach(t),ZVo=i(pa),r1=n(pa,"P",{});var gNe=s(r1);eXo=r(gNe,"The model is set in evaluation mode by default using "),r2e=n(gNe,"CODE",{});var o7t=s(r2e);oXo=r(o7t,"model.eval()"),o7t.forEach(t),rXo=r(gNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t2e=n(gNe,"CODE",{});var r7t=s(t2e);tXo=r(r7t,"model.train()"),r7t.forEach(t),gNe.forEach(t),aXo=i(pa),T(t1.$$.fragment,pa),pa.forEach(t),_l.forEach(t),XUe=i(m),hd=n(m,"H2",{class:!0});var eYe=s(hd);a1=n(eYe,"A",{id:!0,class:!0,href:!0});var t7t=s(a1);a2e=n(t7t,"SPAN",{});var a7t=s(a2e);T(u9.$$.fragment,a7t),a7t.forEach(t),t7t.forEach(t),nXo=i(eYe),n2e=n(eYe,"SPAN",{});var n7t=s(n2e);sXo=r(n7t,"AutoModelForSeq2SeqLM"),n7t.forEach(t),eYe.forEach(t),zUe=i(m),Io=n(m,"DIV",{class:!0});var bl=s(Io);T(p9.$$.fragment,bl),lXo=i(bl),ud=n(bl,"P",{});var fne=s(ud);iXo=r(fne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Mz=n(fne,"A",{href:!0});var s7t=s(Mz);dXo=r(s7t,"from_pretrained()"),s7t.forEach(t),cXo=r(fne," class method or the "),Ez=n(fne,"A",{href:!0});var l7t=s(Ez);mXo=r(l7t,"from_config()"),l7t.forEach(t),fXo=r(fne,` class
method.`),fne.forEach(t),gXo=i(bl),_9=n(bl,"P",{});var oYe=s(_9);hXo=r(oYe,"This class cannot be instantiated directly using "),s2e=n(oYe,"CODE",{});var i7t=s(s2e);uXo=r(i7t,"__init__()"),i7t.forEach(t),pXo=r(oYe," (throws an error)."),oYe.forEach(t),_Xo=i(bl),pt=n(bl,"DIV",{class:!0});var $L=s(pt);T(b9.$$.fragment,$L),bXo=i($L),l2e=n($L,"P",{});var d7t=s(l2e);vXo=r(d7t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),d7t.forEach(t),FXo=i($L),pd=n($L,"P",{});var gne=s(pd);TXo=r(gne,`Note:
Loading a model from its configuration file does `),i2e=n(gne,"STRONG",{});var c7t=s(i2e);MXo=r(c7t,"not"),c7t.forEach(t),EXo=r(gne,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cz=n(gne,"A",{href:!0});var m7t=s(Cz);CXo=r(m7t,"from_pretrained()"),m7t.forEach(t),wXo=r(gne," to load the model weights."),gne.forEach(t),AXo=i($L),T(n1.$$.fragment,$L),$L.forEach(t),LXo=i(bl),ro=n(bl,"DIV",{class:!0});var _a=s(ro);T(v9.$$.fragment,_a),yXo=i(_a),d2e=n(_a,"P",{});var f7t=s(d2e);xXo=r(f7t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),f7t.forEach(t),$Xo=i(_a),Qa=n(_a,"P",{});var kL=s(Qa);kXo=r(kL,"The model class to instantiate is selected based on the "),c2e=n(kL,"CODE",{});var g7t=s(c2e);SXo=r(g7t,"model_type"),g7t.forEach(t),RXo=r(kL,` property of the config object (either
passed as an argument or loaded from `),m2e=n(kL,"CODE",{});var h7t=s(m2e);PXo=r(h7t,"pretrained_model_name_or_path"),h7t.forEach(t),BXo=r(kL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f2e=n(kL,"CODE",{});var u7t=s(f2e);IXo=r(u7t,"pretrained_model_name_or_path"),u7t.forEach(t),NXo=r(kL,":"),kL.forEach(t),qXo=i(_a),he=n(_a,"UL",{});var _e=s(he);s1=n(_e,"LI",{});var hNe=s(s1);g2e=n(hNe,"STRONG",{});var p7t=s(g2e);jXo=r(p7t,"bart"),p7t.forEach(t),DXo=r(hNe," \u2014 "),wz=n(hNe,"A",{href:!0});var _7t=s(wz);GXo=r(_7t,"BartForConditionalGeneration"),_7t.forEach(t),OXo=r(hNe," (BART model)"),hNe.forEach(t),VXo=i(_e),l1=n(_e,"LI",{});var uNe=s(l1);h2e=n(uNe,"STRONG",{});var b7t=s(h2e);XXo=r(b7t,"bigbird_pegasus"),b7t.forEach(t),zXo=r(uNe," \u2014 "),Az=n(uNe,"A",{href:!0});var v7t=s(Az);WXo=r(v7t,"BigBirdPegasusForConditionalGeneration"),v7t.forEach(t),QXo=r(uNe," (BigBird-Pegasus model)"),uNe.forEach(t),UXo=i(_e),i1=n(_e,"LI",{});var pNe=s(i1);u2e=n(pNe,"STRONG",{});var F7t=s(u2e);HXo=r(F7t,"blenderbot"),F7t.forEach(t),JXo=r(pNe," \u2014 "),Lz=n(pNe,"A",{href:!0});var T7t=s(Lz);YXo=r(T7t,"BlenderbotForConditionalGeneration"),T7t.forEach(t),KXo=r(pNe," (Blenderbot model)"),pNe.forEach(t),ZXo=i(_e),d1=n(_e,"LI",{});var _Ne=s(d1);p2e=n(_Ne,"STRONG",{});var M7t=s(p2e);ezo=r(M7t,"blenderbot-small"),M7t.forEach(t),ozo=r(_Ne," \u2014 "),yz=n(_Ne,"A",{href:!0});var E7t=s(yz);rzo=r(E7t,"BlenderbotSmallForConditionalGeneration"),E7t.forEach(t),tzo=r(_Ne," (BlenderbotSmall model)"),_Ne.forEach(t),azo=i(_e),c1=n(_e,"LI",{});var bNe=s(c1);_2e=n(bNe,"STRONG",{});var C7t=s(_2e);nzo=r(C7t,"encoder-decoder"),C7t.forEach(t),szo=r(bNe," \u2014 "),xz=n(bNe,"A",{href:!0});var w7t=s(xz);lzo=r(w7t,"EncoderDecoderModel"),w7t.forEach(t),izo=r(bNe," (Encoder decoder model)"),bNe.forEach(t),dzo=i(_e),m1=n(_e,"LI",{});var vNe=s(m1);b2e=n(vNe,"STRONG",{});var A7t=s(b2e);czo=r(A7t,"fsmt"),A7t.forEach(t),mzo=r(vNe," \u2014 "),$z=n(vNe,"A",{href:!0});var L7t=s($z);fzo=r(L7t,"FSMTForConditionalGeneration"),L7t.forEach(t),gzo=r(vNe," (FairSeq Machine-Translation model)"),vNe.forEach(t),hzo=i(_e),f1=n(_e,"LI",{});var FNe=s(f1);v2e=n(FNe,"STRONG",{});var y7t=s(v2e);uzo=r(y7t,"led"),y7t.forEach(t),pzo=r(FNe," \u2014 "),kz=n(FNe,"A",{href:!0});var x7t=s(kz);_zo=r(x7t,"LEDForConditionalGeneration"),x7t.forEach(t),bzo=r(FNe," (LED model)"),FNe.forEach(t),vzo=i(_e),g1=n(_e,"LI",{});var TNe=s(g1);F2e=n(TNe,"STRONG",{});var $7t=s(F2e);Fzo=r($7t,"longt5"),$7t.forEach(t),Tzo=r(TNe," \u2014 "),Sz=n(TNe,"A",{href:!0});var k7t=s(Sz);Mzo=r(k7t,"LongT5ForConditionalGeneration"),k7t.forEach(t),Ezo=r(TNe," (LongT5 model)"),TNe.forEach(t),Czo=i(_e),h1=n(_e,"LI",{});var MNe=s(h1);T2e=n(MNe,"STRONG",{});var S7t=s(T2e);wzo=r(S7t,"m2m_100"),S7t.forEach(t),Azo=r(MNe," \u2014 "),Rz=n(MNe,"A",{href:!0});var R7t=s(Rz);Lzo=r(R7t,"M2M100ForConditionalGeneration"),R7t.forEach(t),yzo=r(MNe," (M2M100 model)"),MNe.forEach(t),xzo=i(_e),u1=n(_e,"LI",{});var ENe=s(u1);M2e=n(ENe,"STRONG",{});var P7t=s(M2e);$zo=r(P7t,"marian"),P7t.forEach(t),kzo=r(ENe," \u2014 "),Pz=n(ENe,"A",{href:!0});var B7t=s(Pz);Szo=r(B7t,"MarianMTModel"),B7t.forEach(t),Rzo=r(ENe," (Marian model)"),ENe.forEach(t),Pzo=i(_e),p1=n(_e,"LI",{});var CNe=s(p1);E2e=n(CNe,"STRONG",{});var I7t=s(E2e);Bzo=r(I7t,"mbart"),I7t.forEach(t),Izo=r(CNe," \u2014 "),Bz=n(CNe,"A",{href:!0});var N7t=s(Bz);Nzo=r(N7t,"MBartForConditionalGeneration"),N7t.forEach(t),qzo=r(CNe," (mBART model)"),CNe.forEach(t),jzo=i(_e),_1=n(_e,"LI",{});var wNe=s(_1);C2e=n(wNe,"STRONG",{});var q7t=s(C2e);Dzo=r(q7t,"mt5"),q7t.forEach(t),Gzo=r(wNe," \u2014 "),Iz=n(wNe,"A",{href:!0});var j7t=s(Iz);Ozo=r(j7t,"MT5ForConditionalGeneration"),j7t.forEach(t),Vzo=r(wNe," (MT5 model)"),wNe.forEach(t),Xzo=i(_e),b1=n(_e,"LI",{});var ANe=s(b1);w2e=n(ANe,"STRONG",{});var D7t=s(w2e);zzo=r(D7t,"mvp"),D7t.forEach(t),Wzo=r(ANe," \u2014 "),Nz=n(ANe,"A",{href:!0});var G7t=s(Nz);Qzo=r(G7t,"MvpForConditionalGeneration"),G7t.forEach(t),Uzo=r(ANe," (MVP model)"),ANe.forEach(t),Hzo=i(_e),v1=n(_e,"LI",{});var LNe=s(v1);A2e=n(LNe,"STRONG",{});var O7t=s(A2e);Jzo=r(O7t,"nllb"),O7t.forEach(t),Yzo=r(LNe," \u2014 "),qz=n(LNe,"A",{href:!0});var V7t=s(qz);Kzo=r(V7t,"M2M100ForConditionalGeneration"),V7t.forEach(t),Zzo=r(LNe," (NLLB model)"),LNe.forEach(t),eWo=i(_e),F1=n(_e,"LI",{});var yNe=s(F1);L2e=n(yNe,"STRONG",{});var X7t=s(L2e);oWo=r(X7t,"pegasus"),X7t.forEach(t),rWo=r(yNe," \u2014 "),jz=n(yNe,"A",{href:!0});var z7t=s(jz);tWo=r(z7t,"PegasusForConditionalGeneration"),z7t.forEach(t),aWo=r(yNe," (Pegasus model)"),yNe.forEach(t),nWo=i(_e),T1=n(_e,"LI",{});var xNe=s(T1);y2e=n(xNe,"STRONG",{});var W7t=s(y2e);sWo=r(W7t,"plbart"),W7t.forEach(t),lWo=r(xNe," \u2014 "),Dz=n(xNe,"A",{href:!0});var Q7t=s(Dz);iWo=r(Q7t,"PLBartForConditionalGeneration"),Q7t.forEach(t),dWo=r(xNe," (PLBart model)"),xNe.forEach(t),cWo=i(_e),M1=n(_e,"LI",{});var $Ne=s(M1);x2e=n($Ne,"STRONG",{});var U7t=s(x2e);mWo=r(U7t,"prophetnet"),U7t.forEach(t),fWo=r($Ne," \u2014 "),Gz=n($Ne,"A",{href:!0});var H7t=s(Gz);gWo=r(H7t,"ProphetNetForConditionalGeneration"),H7t.forEach(t),hWo=r($Ne," (ProphetNet model)"),$Ne.forEach(t),uWo=i(_e),E1=n(_e,"LI",{});var kNe=s(E1);$2e=n(kNe,"STRONG",{});var J7t=s($2e);pWo=r(J7t,"t5"),J7t.forEach(t),_Wo=r(kNe," \u2014 "),Oz=n(kNe,"A",{href:!0});var Y7t=s(Oz);bWo=r(Y7t,"T5ForConditionalGeneration"),Y7t.forEach(t),vWo=r(kNe," (T5 model)"),kNe.forEach(t),FWo=i(_e),C1=n(_e,"LI",{});var SNe=s(C1);k2e=n(SNe,"STRONG",{});var K7t=s(k2e);TWo=r(K7t,"xlm-prophetnet"),K7t.forEach(t),MWo=r(SNe," \u2014 "),Vz=n(SNe,"A",{href:!0});var Z7t=s(Vz);EWo=r(Z7t,"XLMProphetNetForConditionalGeneration"),Z7t.forEach(t),CWo=r(SNe," (XLM-ProphetNet model)"),SNe.forEach(t),_e.forEach(t),wWo=i(_a),w1=n(_a,"P",{});var RNe=s(w1);AWo=r(RNe,"The model is set in evaluation mode by default using "),S2e=n(RNe,"CODE",{});var eLt=s(S2e);LWo=r(eLt,"model.eval()"),eLt.forEach(t),yWo=r(RNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R2e=n(RNe,"CODE",{});var oLt=s(R2e);xWo=r(oLt,"model.train()"),oLt.forEach(t),RNe.forEach(t),$Wo=i(_a),T(A1.$$.fragment,_a),_a.forEach(t),bl.forEach(t),WUe=i(m),_d=n(m,"H2",{class:!0});var rYe=s(_d);L1=n(rYe,"A",{id:!0,class:!0,href:!0});var rLt=s(L1);P2e=n(rLt,"SPAN",{});var tLt=s(P2e);T(F9.$$.fragment,tLt),tLt.forEach(t),rLt.forEach(t),kWo=i(rYe),B2e=n(rYe,"SPAN",{});var aLt=s(B2e);SWo=r(aLt,"AutoModelForSequenceClassification"),aLt.forEach(t),rYe.forEach(t),QUe=i(m),No=n(m,"DIV",{class:!0});var vl=s(No);T(T9.$$.fragment,vl),RWo=i(vl),bd=n(vl,"P",{});var hne=s(bd);PWo=r(hne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Xz=n(hne,"A",{href:!0});var nLt=s(Xz);BWo=r(nLt,"from_pretrained()"),nLt.forEach(t),IWo=r(hne," class method or the "),zz=n(hne,"A",{href:!0});var sLt=s(zz);NWo=r(sLt,"from_config()"),sLt.forEach(t),qWo=r(hne,` class
method.`),hne.forEach(t),jWo=i(vl),M9=n(vl,"P",{});var tYe=s(M9);DWo=r(tYe,"This class cannot be instantiated directly using "),I2e=n(tYe,"CODE",{});var lLt=s(I2e);GWo=r(lLt,"__init__()"),lLt.forEach(t),OWo=r(tYe," (throws an error)."),tYe.forEach(t),VWo=i(vl),_t=n(vl,"DIV",{class:!0});var SL=s(_t);T(E9.$$.fragment,SL),XWo=i(SL),N2e=n(SL,"P",{});var iLt=s(N2e);zWo=r(iLt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),iLt.forEach(t),WWo=i(SL),vd=n(SL,"P",{});var une=s(vd);QWo=r(une,`Note:
Loading a model from its configuration file does `),q2e=n(une,"STRONG",{});var dLt=s(q2e);UWo=r(dLt,"not"),dLt.forEach(t),HWo=r(une,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wz=n(une,"A",{href:!0});var cLt=s(Wz);JWo=r(cLt,"from_pretrained()"),cLt.forEach(t),YWo=r(une," to load the model weights."),une.forEach(t),KWo=i(SL),T(y1.$$.fragment,SL),SL.forEach(t),ZWo=i(vl),to=n(vl,"DIV",{class:!0});var ba=s(to);T(C9.$$.fragment,ba),eQo=i(ba),j2e=n(ba,"P",{});var mLt=s(j2e);oQo=r(mLt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),mLt.forEach(t),rQo=i(ba),Ua=n(ba,"P",{});var RL=s(Ua);tQo=r(RL,"The model class to instantiate is selected based on the "),D2e=n(RL,"CODE",{});var fLt=s(D2e);aQo=r(fLt,"model_type"),fLt.forEach(t),nQo=r(RL,` property of the config object (either
passed as an argument or loaded from `),G2e=n(RL,"CODE",{});var gLt=s(G2e);sQo=r(gLt,"pretrained_model_name_or_path"),gLt.forEach(t),lQo=r(RL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O2e=n(RL,"CODE",{});var hLt=s(O2e);iQo=r(hLt,"pretrained_model_name_or_path"),hLt.forEach(t),dQo=r(RL,":"),RL.forEach(t),cQo=i(ba),j=n(ba,"UL",{});var D=s(j);x1=n(D,"LI",{});var PNe=s(x1);V2e=n(PNe,"STRONG",{});var uLt=s(V2e);mQo=r(uLt,"albert"),uLt.forEach(t),fQo=r(PNe," \u2014 "),Qz=n(PNe,"A",{href:!0});var pLt=s(Qz);gQo=r(pLt,"AlbertForSequenceClassification"),pLt.forEach(t),hQo=r(PNe," (ALBERT model)"),PNe.forEach(t),uQo=i(D),$1=n(D,"LI",{});var BNe=s($1);X2e=n(BNe,"STRONG",{});var _Lt=s(X2e);pQo=r(_Lt,"bart"),_Lt.forEach(t),_Qo=r(BNe," \u2014 "),Uz=n(BNe,"A",{href:!0});var bLt=s(Uz);bQo=r(bLt,"BartForSequenceClassification"),bLt.forEach(t),vQo=r(BNe," (BART model)"),BNe.forEach(t),FQo=i(D),k1=n(D,"LI",{});var INe=s(k1);z2e=n(INe,"STRONG",{});var vLt=s(z2e);TQo=r(vLt,"bert"),vLt.forEach(t),MQo=r(INe," \u2014 "),Hz=n(INe,"A",{href:!0});var FLt=s(Hz);EQo=r(FLt,"BertForSequenceClassification"),FLt.forEach(t),CQo=r(INe," (BERT model)"),INe.forEach(t),wQo=i(D),S1=n(D,"LI",{});var NNe=s(S1);W2e=n(NNe,"STRONG",{});var TLt=s(W2e);AQo=r(TLt,"big_bird"),TLt.forEach(t),LQo=r(NNe," \u2014 "),Jz=n(NNe,"A",{href:!0});var MLt=s(Jz);yQo=r(MLt,"BigBirdForSequenceClassification"),MLt.forEach(t),xQo=r(NNe," (BigBird model)"),NNe.forEach(t),$Qo=i(D),R1=n(D,"LI",{});var qNe=s(R1);Q2e=n(qNe,"STRONG",{});var ELt=s(Q2e);kQo=r(ELt,"bigbird_pegasus"),ELt.forEach(t),SQo=r(qNe," \u2014 "),Yz=n(qNe,"A",{href:!0});var CLt=s(Yz);RQo=r(CLt,"BigBirdPegasusForSequenceClassification"),CLt.forEach(t),PQo=r(qNe," (BigBird-Pegasus model)"),qNe.forEach(t),BQo=i(D),P1=n(D,"LI",{});var jNe=s(P1);U2e=n(jNe,"STRONG",{});var wLt=s(U2e);IQo=r(wLt,"bloom"),wLt.forEach(t),NQo=r(jNe," \u2014 "),Kz=n(jNe,"A",{href:!0});var ALt=s(Kz);qQo=r(ALt,"BloomForSequenceClassification"),ALt.forEach(t),jQo=r(jNe," (BLOOM model)"),jNe.forEach(t),DQo=i(D),B1=n(D,"LI",{});var DNe=s(B1);H2e=n(DNe,"STRONG",{});var LLt=s(H2e);GQo=r(LLt,"camembert"),LLt.forEach(t),OQo=r(DNe," \u2014 "),Zz=n(DNe,"A",{href:!0});var yLt=s(Zz);VQo=r(yLt,"CamembertForSequenceClassification"),yLt.forEach(t),XQo=r(DNe," (CamemBERT model)"),DNe.forEach(t),zQo=i(D),I1=n(D,"LI",{});var GNe=s(I1);J2e=n(GNe,"STRONG",{});var xLt=s(J2e);WQo=r(xLt,"canine"),xLt.forEach(t),QQo=r(GNe," \u2014 "),eW=n(GNe,"A",{href:!0});var $Lt=s(eW);UQo=r($Lt,"CanineForSequenceClassification"),$Lt.forEach(t),HQo=r(GNe," (CANINE model)"),GNe.forEach(t),JQo=i(D),N1=n(D,"LI",{});var ONe=s(N1);Y2e=n(ONe,"STRONG",{});var kLt=s(Y2e);YQo=r(kLt,"convbert"),kLt.forEach(t),KQo=r(ONe," \u2014 "),oW=n(ONe,"A",{href:!0});var SLt=s(oW);ZQo=r(SLt,"ConvBertForSequenceClassification"),SLt.forEach(t),eUo=r(ONe," (ConvBERT model)"),ONe.forEach(t),oUo=i(D),q1=n(D,"LI",{});var VNe=s(q1);K2e=n(VNe,"STRONG",{});var RLt=s(K2e);rUo=r(RLt,"ctrl"),RLt.forEach(t),tUo=r(VNe," \u2014 "),rW=n(VNe,"A",{href:!0});var PLt=s(rW);aUo=r(PLt,"CTRLForSequenceClassification"),PLt.forEach(t),nUo=r(VNe," (CTRL model)"),VNe.forEach(t),sUo=i(D),j1=n(D,"LI",{});var XNe=s(j1);Z2e=n(XNe,"STRONG",{});var BLt=s(Z2e);lUo=r(BLt,"data2vec-text"),BLt.forEach(t),iUo=r(XNe," \u2014 "),tW=n(XNe,"A",{href:!0});var ILt=s(tW);dUo=r(ILt,"Data2VecTextForSequenceClassification"),ILt.forEach(t),cUo=r(XNe," (Data2VecText model)"),XNe.forEach(t),mUo=i(D),D1=n(D,"LI",{});var zNe=s(D1);ebe=n(zNe,"STRONG",{});var NLt=s(ebe);fUo=r(NLt,"deberta"),NLt.forEach(t),gUo=r(zNe," \u2014 "),aW=n(zNe,"A",{href:!0});var qLt=s(aW);hUo=r(qLt,"DebertaForSequenceClassification"),qLt.forEach(t),uUo=r(zNe," (DeBERTa model)"),zNe.forEach(t),pUo=i(D),G1=n(D,"LI",{});var WNe=s(G1);obe=n(WNe,"STRONG",{});var jLt=s(obe);_Uo=r(jLt,"deberta-v2"),jLt.forEach(t),bUo=r(WNe," \u2014 "),nW=n(WNe,"A",{href:!0});var DLt=s(nW);vUo=r(DLt,"DebertaV2ForSequenceClassification"),DLt.forEach(t),FUo=r(WNe," (DeBERTa-v2 model)"),WNe.forEach(t),TUo=i(D),O1=n(D,"LI",{});var QNe=s(O1);rbe=n(QNe,"STRONG",{});var GLt=s(rbe);MUo=r(GLt,"distilbert"),GLt.forEach(t),EUo=r(QNe," \u2014 "),sW=n(QNe,"A",{href:!0});var OLt=s(sW);CUo=r(OLt,"DistilBertForSequenceClassification"),OLt.forEach(t),wUo=r(QNe," (DistilBERT model)"),QNe.forEach(t),AUo=i(D),V1=n(D,"LI",{});var UNe=s(V1);tbe=n(UNe,"STRONG",{});var VLt=s(tbe);LUo=r(VLt,"electra"),VLt.forEach(t),yUo=r(UNe," \u2014 "),lW=n(UNe,"A",{href:!0});var XLt=s(lW);xUo=r(XLt,"ElectraForSequenceClassification"),XLt.forEach(t),$Uo=r(UNe," (ELECTRA model)"),UNe.forEach(t),kUo=i(D),X1=n(D,"LI",{});var HNe=s(X1);abe=n(HNe,"STRONG",{});var zLt=s(abe);SUo=r(zLt,"flaubert"),zLt.forEach(t),RUo=r(HNe," \u2014 "),iW=n(HNe,"A",{href:!0});var WLt=s(iW);PUo=r(WLt,"FlaubertForSequenceClassification"),WLt.forEach(t),BUo=r(HNe," (FlauBERT model)"),HNe.forEach(t),IUo=i(D),z1=n(D,"LI",{});var JNe=s(z1);nbe=n(JNe,"STRONG",{});var QLt=s(nbe);NUo=r(QLt,"fnet"),QLt.forEach(t),qUo=r(JNe," \u2014 "),dW=n(JNe,"A",{href:!0});var ULt=s(dW);jUo=r(ULt,"FNetForSequenceClassification"),ULt.forEach(t),DUo=r(JNe," (FNet model)"),JNe.forEach(t),GUo=i(D),W1=n(D,"LI",{});var YNe=s(W1);sbe=n(YNe,"STRONG",{});var HLt=s(sbe);OUo=r(HLt,"funnel"),HLt.forEach(t),VUo=r(YNe," \u2014 "),cW=n(YNe,"A",{href:!0});var JLt=s(cW);XUo=r(JLt,"FunnelForSequenceClassification"),JLt.forEach(t),zUo=r(YNe," (Funnel Transformer model)"),YNe.forEach(t),WUo=i(D),Q1=n(D,"LI",{});var KNe=s(Q1);lbe=n(KNe,"STRONG",{});var YLt=s(lbe);QUo=r(YLt,"gpt2"),YLt.forEach(t),UUo=r(KNe," \u2014 "),mW=n(KNe,"A",{href:!0});var KLt=s(mW);HUo=r(KLt,"GPT2ForSequenceClassification"),KLt.forEach(t),JUo=r(KNe," (OpenAI GPT-2 model)"),KNe.forEach(t),YUo=i(D),U1=n(D,"LI",{});var ZNe=s(U1);ibe=n(ZNe,"STRONG",{});var ZLt=s(ibe);KUo=r(ZLt,"gpt_neo"),ZLt.forEach(t),ZUo=r(ZNe," \u2014 "),fW=n(ZNe,"A",{href:!0});var eyt=s(fW);eHo=r(eyt,"GPTNeoForSequenceClassification"),eyt.forEach(t),oHo=r(ZNe," (GPT Neo model)"),ZNe.forEach(t),rHo=i(D),H1=n(D,"LI",{});var eqe=s(H1);dbe=n(eqe,"STRONG",{});var oyt=s(dbe);tHo=r(oyt,"gptj"),oyt.forEach(t),aHo=r(eqe," \u2014 "),gW=n(eqe,"A",{href:!0});var ryt=s(gW);nHo=r(ryt,"GPTJForSequenceClassification"),ryt.forEach(t),sHo=r(eqe," (GPT-J model)"),eqe.forEach(t),lHo=i(D),J1=n(D,"LI",{});var oqe=s(J1);cbe=n(oqe,"STRONG",{});var tyt=s(cbe);iHo=r(tyt,"ibert"),tyt.forEach(t),dHo=r(oqe," \u2014 "),hW=n(oqe,"A",{href:!0});var ayt=s(hW);cHo=r(ayt,"IBertForSequenceClassification"),ayt.forEach(t),mHo=r(oqe," (I-BERT model)"),oqe.forEach(t),fHo=i(D),Y1=n(D,"LI",{});var rqe=s(Y1);mbe=n(rqe,"STRONG",{});var nyt=s(mbe);gHo=r(nyt,"layoutlm"),nyt.forEach(t),hHo=r(rqe," \u2014 "),uW=n(rqe,"A",{href:!0});var syt=s(uW);uHo=r(syt,"LayoutLMForSequenceClassification"),syt.forEach(t),pHo=r(rqe," (LayoutLM model)"),rqe.forEach(t),_Ho=i(D),K1=n(D,"LI",{});var tqe=s(K1);fbe=n(tqe,"STRONG",{});var lyt=s(fbe);bHo=r(lyt,"layoutlmv2"),lyt.forEach(t),vHo=r(tqe," \u2014 "),pW=n(tqe,"A",{href:!0});var iyt=s(pW);FHo=r(iyt,"LayoutLMv2ForSequenceClassification"),iyt.forEach(t),THo=r(tqe," (LayoutLMv2 model)"),tqe.forEach(t),MHo=i(D),Z1=n(D,"LI",{});var aqe=s(Z1);gbe=n(aqe,"STRONG",{});var dyt=s(gbe);EHo=r(dyt,"layoutlmv3"),dyt.forEach(t),CHo=r(aqe," \u2014 "),_W=n(aqe,"A",{href:!0});var cyt=s(_W);wHo=r(cyt,"LayoutLMv3ForSequenceClassification"),cyt.forEach(t),AHo=r(aqe," (LayoutLMv3 model)"),aqe.forEach(t),LHo=i(D),eF=n(D,"LI",{});var nqe=s(eF);hbe=n(nqe,"STRONG",{});var myt=s(hbe);yHo=r(myt,"led"),myt.forEach(t),xHo=r(nqe," \u2014 "),bW=n(nqe,"A",{href:!0});var fyt=s(bW);$Ho=r(fyt,"LEDForSequenceClassification"),fyt.forEach(t),kHo=r(nqe," (LED model)"),nqe.forEach(t),SHo=i(D),oF=n(D,"LI",{});var sqe=s(oF);ube=n(sqe,"STRONG",{});var gyt=s(ube);RHo=r(gyt,"longformer"),gyt.forEach(t),PHo=r(sqe," \u2014 "),vW=n(sqe,"A",{href:!0});var hyt=s(vW);BHo=r(hyt,"LongformerForSequenceClassification"),hyt.forEach(t),IHo=r(sqe," (Longformer model)"),sqe.forEach(t),NHo=i(D),rF=n(D,"LI",{});var lqe=s(rF);pbe=n(lqe,"STRONG",{});var uyt=s(pbe);qHo=r(uyt,"luke"),uyt.forEach(t),jHo=r(lqe," \u2014 "),FW=n(lqe,"A",{href:!0});var pyt=s(FW);DHo=r(pyt,"LukeForSequenceClassification"),pyt.forEach(t),GHo=r(lqe," (LUKE model)"),lqe.forEach(t),OHo=i(D),tF=n(D,"LI",{});var iqe=s(tF);_be=n(iqe,"STRONG",{});var _yt=s(_be);VHo=r(_yt,"mbart"),_yt.forEach(t),XHo=r(iqe," \u2014 "),TW=n(iqe,"A",{href:!0});var byt=s(TW);zHo=r(byt,"MBartForSequenceClassification"),byt.forEach(t),WHo=r(iqe," (mBART model)"),iqe.forEach(t),QHo=i(D),aF=n(D,"LI",{});var dqe=s(aF);bbe=n(dqe,"STRONG",{});var vyt=s(bbe);UHo=r(vyt,"megatron-bert"),vyt.forEach(t),HHo=r(dqe," \u2014 "),MW=n(dqe,"A",{href:!0});var Fyt=s(MW);JHo=r(Fyt,"MegatronBertForSequenceClassification"),Fyt.forEach(t),YHo=r(dqe," (Megatron-BERT model)"),dqe.forEach(t),KHo=i(D),nF=n(D,"LI",{});var cqe=s(nF);vbe=n(cqe,"STRONG",{});var Tyt=s(vbe);ZHo=r(Tyt,"mobilebert"),Tyt.forEach(t),eJo=r(cqe," \u2014 "),EW=n(cqe,"A",{href:!0});var Myt=s(EW);oJo=r(Myt,"MobileBertForSequenceClassification"),Myt.forEach(t),rJo=r(cqe," (MobileBERT model)"),cqe.forEach(t),tJo=i(D),sF=n(D,"LI",{});var mqe=s(sF);Fbe=n(mqe,"STRONG",{});var Eyt=s(Fbe);aJo=r(Eyt,"mpnet"),Eyt.forEach(t),nJo=r(mqe," \u2014 "),CW=n(mqe,"A",{href:!0});var Cyt=s(CW);sJo=r(Cyt,"MPNetForSequenceClassification"),Cyt.forEach(t),lJo=r(mqe," (MPNet model)"),mqe.forEach(t),iJo=i(D),lF=n(D,"LI",{});var fqe=s(lF);Tbe=n(fqe,"STRONG",{});var wyt=s(Tbe);dJo=r(wyt,"mvp"),wyt.forEach(t),cJo=r(fqe," \u2014 "),wW=n(fqe,"A",{href:!0});var Ayt=s(wW);mJo=r(Ayt,"MvpForSequenceClassification"),Ayt.forEach(t),fJo=r(fqe," (MVP model)"),fqe.forEach(t),gJo=i(D),iF=n(D,"LI",{});var gqe=s(iF);Mbe=n(gqe,"STRONG",{});var Lyt=s(Mbe);hJo=r(Lyt,"nezha"),Lyt.forEach(t),uJo=r(gqe," \u2014 "),AW=n(gqe,"A",{href:!0});var yyt=s(AW);pJo=r(yyt,"NezhaForSequenceClassification"),yyt.forEach(t),_Jo=r(gqe," (Nezha model)"),gqe.forEach(t),bJo=i(D),dF=n(D,"LI",{});var hqe=s(dF);Ebe=n(hqe,"STRONG",{});var xyt=s(Ebe);vJo=r(xyt,"nystromformer"),xyt.forEach(t),FJo=r(hqe," \u2014 "),LW=n(hqe,"A",{href:!0});var $yt=s(LW);TJo=r($yt,"NystromformerForSequenceClassification"),$yt.forEach(t),MJo=r(hqe," (Nystr\xF6mformer model)"),hqe.forEach(t),EJo=i(D),cF=n(D,"LI",{});var uqe=s(cF);Cbe=n(uqe,"STRONG",{});var kyt=s(Cbe);CJo=r(kyt,"openai-gpt"),kyt.forEach(t),wJo=r(uqe," \u2014 "),yW=n(uqe,"A",{href:!0});var Syt=s(yW);AJo=r(Syt,"OpenAIGPTForSequenceClassification"),Syt.forEach(t),LJo=r(uqe," (OpenAI GPT model)"),uqe.forEach(t),yJo=i(D),mF=n(D,"LI",{});var pqe=s(mF);wbe=n(pqe,"STRONG",{});var Ryt=s(wbe);xJo=r(Ryt,"opt"),Ryt.forEach(t),$Jo=r(pqe," \u2014 "),xW=n(pqe,"A",{href:!0});var Pyt=s(xW);kJo=r(Pyt,"OPTForSequenceClassification"),Pyt.forEach(t),SJo=r(pqe," (OPT model)"),pqe.forEach(t),RJo=i(D),fF=n(D,"LI",{});var _qe=s(fF);Abe=n(_qe,"STRONG",{});var Byt=s(Abe);PJo=r(Byt,"perceiver"),Byt.forEach(t),BJo=r(_qe," \u2014 "),$W=n(_qe,"A",{href:!0});var Iyt=s($W);IJo=r(Iyt,"PerceiverForSequenceClassification"),Iyt.forEach(t),NJo=r(_qe," (Perceiver model)"),_qe.forEach(t),qJo=i(D),gF=n(D,"LI",{});var bqe=s(gF);Lbe=n(bqe,"STRONG",{});var Nyt=s(Lbe);jJo=r(Nyt,"plbart"),Nyt.forEach(t),DJo=r(bqe," \u2014 "),kW=n(bqe,"A",{href:!0});var qyt=s(kW);GJo=r(qyt,"PLBartForSequenceClassification"),qyt.forEach(t),OJo=r(bqe," (PLBart model)"),bqe.forEach(t),VJo=i(D),hF=n(D,"LI",{});var vqe=s(hF);ybe=n(vqe,"STRONG",{});var jyt=s(ybe);XJo=r(jyt,"qdqbert"),jyt.forEach(t),zJo=r(vqe," \u2014 "),SW=n(vqe,"A",{href:!0});var Dyt=s(SW);WJo=r(Dyt,"QDQBertForSequenceClassification"),Dyt.forEach(t),QJo=r(vqe," (QDQBert model)"),vqe.forEach(t),UJo=i(D),uF=n(D,"LI",{});var Fqe=s(uF);xbe=n(Fqe,"STRONG",{});var Gyt=s(xbe);HJo=r(Gyt,"reformer"),Gyt.forEach(t),JJo=r(Fqe," \u2014 "),RW=n(Fqe,"A",{href:!0});var Oyt=s(RW);YJo=r(Oyt,"ReformerForSequenceClassification"),Oyt.forEach(t),KJo=r(Fqe," (Reformer model)"),Fqe.forEach(t),ZJo=i(D),pF=n(D,"LI",{});var Tqe=s(pF);$be=n(Tqe,"STRONG",{});var Vyt=s($be);eYo=r(Vyt,"rembert"),Vyt.forEach(t),oYo=r(Tqe," \u2014 "),PW=n(Tqe,"A",{href:!0});var Xyt=s(PW);rYo=r(Xyt,"RemBertForSequenceClassification"),Xyt.forEach(t),tYo=r(Tqe," (RemBERT model)"),Tqe.forEach(t),aYo=i(D),_F=n(D,"LI",{});var Mqe=s(_F);kbe=n(Mqe,"STRONG",{});var zyt=s(kbe);nYo=r(zyt,"roberta"),zyt.forEach(t),sYo=r(Mqe," \u2014 "),BW=n(Mqe,"A",{href:!0});var Wyt=s(BW);lYo=r(Wyt,"RobertaForSequenceClassification"),Wyt.forEach(t),iYo=r(Mqe," (RoBERTa model)"),Mqe.forEach(t),dYo=i(D),bF=n(D,"LI",{});var Eqe=s(bF);Sbe=n(Eqe,"STRONG",{});var Qyt=s(Sbe);cYo=r(Qyt,"roformer"),Qyt.forEach(t),mYo=r(Eqe," \u2014 "),IW=n(Eqe,"A",{href:!0});var Uyt=s(IW);fYo=r(Uyt,"RoFormerForSequenceClassification"),Uyt.forEach(t),gYo=r(Eqe," (RoFormer model)"),Eqe.forEach(t),hYo=i(D),vF=n(D,"LI",{});var Cqe=s(vF);Rbe=n(Cqe,"STRONG",{});var Hyt=s(Rbe);uYo=r(Hyt,"squeezebert"),Hyt.forEach(t),pYo=r(Cqe," \u2014 "),NW=n(Cqe,"A",{href:!0});var Jyt=s(NW);_Yo=r(Jyt,"SqueezeBertForSequenceClassification"),Jyt.forEach(t),bYo=r(Cqe," (SqueezeBERT model)"),Cqe.forEach(t),vYo=i(D),FF=n(D,"LI",{});var wqe=s(FF);Pbe=n(wqe,"STRONG",{});var Yyt=s(Pbe);FYo=r(Yyt,"tapas"),Yyt.forEach(t),TYo=r(wqe," \u2014 "),qW=n(wqe,"A",{href:!0});var Kyt=s(qW);MYo=r(Kyt,"TapasForSequenceClassification"),Kyt.forEach(t),EYo=r(wqe," (TAPAS model)"),wqe.forEach(t),CYo=i(D),TF=n(D,"LI",{});var Aqe=s(TF);Bbe=n(Aqe,"STRONG",{});var Zyt=s(Bbe);wYo=r(Zyt,"transfo-xl"),Zyt.forEach(t),AYo=r(Aqe," \u2014 "),jW=n(Aqe,"A",{href:!0});var e8t=s(jW);LYo=r(e8t,"TransfoXLForSequenceClassification"),e8t.forEach(t),yYo=r(Aqe," (Transformer-XL model)"),Aqe.forEach(t),xYo=i(D),MF=n(D,"LI",{});var Lqe=s(MF);Ibe=n(Lqe,"STRONG",{});var o8t=s(Ibe);$Yo=r(o8t,"xlm"),o8t.forEach(t),kYo=r(Lqe," \u2014 "),DW=n(Lqe,"A",{href:!0});var r8t=s(DW);SYo=r(r8t,"XLMForSequenceClassification"),r8t.forEach(t),RYo=r(Lqe," (XLM model)"),Lqe.forEach(t),PYo=i(D),EF=n(D,"LI",{});var yqe=s(EF);Nbe=n(yqe,"STRONG",{});var t8t=s(Nbe);BYo=r(t8t,"xlm-roberta"),t8t.forEach(t),IYo=r(yqe," \u2014 "),GW=n(yqe,"A",{href:!0});var a8t=s(GW);NYo=r(a8t,"XLMRobertaForSequenceClassification"),a8t.forEach(t),qYo=r(yqe," (XLM-RoBERTa model)"),yqe.forEach(t),jYo=i(D),CF=n(D,"LI",{});var xqe=s(CF);qbe=n(xqe,"STRONG",{});var n8t=s(qbe);DYo=r(n8t,"xlm-roberta-xl"),n8t.forEach(t),GYo=r(xqe," \u2014 "),OW=n(xqe,"A",{href:!0});var s8t=s(OW);OYo=r(s8t,"XLMRobertaXLForSequenceClassification"),s8t.forEach(t),VYo=r(xqe," (XLM-RoBERTa-XL model)"),xqe.forEach(t),XYo=i(D),wF=n(D,"LI",{});var $qe=s(wF);jbe=n($qe,"STRONG",{});var l8t=s(jbe);zYo=r(l8t,"xlnet"),l8t.forEach(t),WYo=r($qe," \u2014 "),VW=n($qe,"A",{href:!0});var i8t=s(VW);QYo=r(i8t,"XLNetForSequenceClassification"),i8t.forEach(t),UYo=r($qe," (XLNet model)"),$qe.forEach(t),HYo=i(D),AF=n(D,"LI",{});var kqe=s(AF);Dbe=n(kqe,"STRONG",{});var d8t=s(Dbe);JYo=r(d8t,"yoso"),d8t.forEach(t),YYo=r(kqe," \u2014 "),XW=n(kqe,"A",{href:!0});var c8t=s(XW);KYo=r(c8t,"YosoForSequenceClassification"),c8t.forEach(t),ZYo=r(kqe," (YOSO model)"),kqe.forEach(t),D.forEach(t),eKo=i(ba),LF=n(ba,"P",{});var Sqe=s(LF);oKo=r(Sqe,"The model is set in evaluation mode by default using "),Gbe=n(Sqe,"CODE",{});var m8t=s(Gbe);rKo=r(m8t,"model.eval()"),m8t.forEach(t),tKo=r(Sqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Obe=n(Sqe,"CODE",{});var f8t=s(Obe);aKo=r(f8t,"model.train()"),f8t.forEach(t),Sqe.forEach(t),nKo=i(ba),T(yF.$$.fragment,ba),ba.forEach(t),vl.forEach(t),UUe=i(m),Fd=n(m,"H2",{class:!0});var aYe=s(Fd);xF=n(aYe,"A",{id:!0,class:!0,href:!0});var g8t=s(xF);Vbe=n(g8t,"SPAN",{});var h8t=s(Vbe);T(w9.$$.fragment,h8t),h8t.forEach(t),g8t.forEach(t),sKo=i(aYe),Xbe=n(aYe,"SPAN",{});var u8t=s(Xbe);lKo=r(u8t,"AutoModelForMultipleChoice"),u8t.forEach(t),aYe.forEach(t),HUe=i(m),qo=n(m,"DIV",{class:!0});var Fl=s(qo);T(A9.$$.fragment,Fl),iKo=i(Fl),Td=n(Fl,"P",{});var pne=s(Td);dKo=r(pne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),zW=n(pne,"A",{href:!0});var p8t=s(zW);cKo=r(p8t,"from_pretrained()"),p8t.forEach(t),mKo=r(pne," class method or the "),WW=n(pne,"A",{href:!0});var _8t=s(WW);fKo=r(_8t,"from_config()"),_8t.forEach(t),gKo=r(pne,` class
method.`),pne.forEach(t),hKo=i(Fl),L9=n(Fl,"P",{});var nYe=s(L9);uKo=r(nYe,"This class cannot be instantiated directly using "),zbe=n(nYe,"CODE",{});var b8t=s(zbe);pKo=r(b8t,"__init__()"),b8t.forEach(t),_Ko=r(nYe," (throws an error)."),nYe.forEach(t),bKo=i(Fl),bt=n(Fl,"DIV",{class:!0});var PL=s(bt);T(y9.$$.fragment,PL),vKo=i(PL),Wbe=n(PL,"P",{});var v8t=s(Wbe);FKo=r(v8t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),v8t.forEach(t),TKo=i(PL),Md=n(PL,"P",{});var _ne=s(Md);MKo=r(_ne,`Note:
Loading a model from its configuration file does `),Qbe=n(_ne,"STRONG",{});var F8t=s(Qbe);EKo=r(F8t,"not"),F8t.forEach(t),CKo=r(_ne,` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=n(_ne,"A",{href:!0});var T8t=s(QW);wKo=r(T8t,"from_pretrained()"),T8t.forEach(t),AKo=r(_ne," to load the model weights."),_ne.forEach(t),LKo=i(PL),T($F.$$.fragment,PL),PL.forEach(t),yKo=i(Fl),ao=n(Fl,"DIV",{class:!0});var va=s(ao);T(x9.$$.fragment,va),xKo=i(va),Ube=n(va,"P",{});var M8t=s(Ube);$Ko=r(M8t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),M8t.forEach(t),kKo=i(va),Ha=n(va,"P",{});var BL=s(Ha);SKo=r(BL,"The model class to instantiate is selected based on the "),Hbe=n(BL,"CODE",{});var E8t=s(Hbe);RKo=r(E8t,"model_type"),E8t.forEach(t),PKo=r(BL,` property of the config object (either
passed as an argument or loaded from `),Jbe=n(BL,"CODE",{});var C8t=s(Jbe);BKo=r(C8t,"pretrained_model_name_or_path"),C8t.forEach(t),IKo=r(BL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ybe=n(BL,"CODE",{});var w8t=s(Ybe);NKo=r(w8t,"pretrained_model_name_or_path"),w8t.forEach(t),qKo=r(BL,":"),BL.forEach(t),jKo=i(va),Z=n(va,"UL",{});var ee=s(Z);kF=n(ee,"LI",{});var Rqe=s(kF);Kbe=n(Rqe,"STRONG",{});var A8t=s(Kbe);DKo=r(A8t,"albert"),A8t.forEach(t),GKo=r(Rqe," \u2014 "),UW=n(Rqe,"A",{href:!0});var L8t=s(UW);OKo=r(L8t,"AlbertForMultipleChoice"),L8t.forEach(t),VKo=r(Rqe," (ALBERT model)"),Rqe.forEach(t),XKo=i(ee),SF=n(ee,"LI",{});var Pqe=s(SF);Zbe=n(Pqe,"STRONG",{});var y8t=s(Zbe);zKo=r(y8t,"bert"),y8t.forEach(t),WKo=r(Pqe," \u2014 "),HW=n(Pqe,"A",{href:!0});var x8t=s(HW);QKo=r(x8t,"BertForMultipleChoice"),x8t.forEach(t),UKo=r(Pqe," (BERT model)"),Pqe.forEach(t),HKo=i(ee),RF=n(ee,"LI",{});var Bqe=s(RF);eve=n(Bqe,"STRONG",{});var $8t=s(eve);JKo=r($8t,"big_bird"),$8t.forEach(t),YKo=r(Bqe," \u2014 "),JW=n(Bqe,"A",{href:!0});var k8t=s(JW);KKo=r(k8t,"BigBirdForMultipleChoice"),k8t.forEach(t),ZKo=r(Bqe," (BigBird model)"),Bqe.forEach(t),eZo=i(ee),PF=n(ee,"LI",{});var Iqe=s(PF);ove=n(Iqe,"STRONG",{});var S8t=s(ove);oZo=r(S8t,"camembert"),S8t.forEach(t),rZo=r(Iqe," \u2014 "),YW=n(Iqe,"A",{href:!0});var R8t=s(YW);tZo=r(R8t,"CamembertForMultipleChoice"),R8t.forEach(t),aZo=r(Iqe," (CamemBERT model)"),Iqe.forEach(t),nZo=i(ee),BF=n(ee,"LI",{});var Nqe=s(BF);rve=n(Nqe,"STRONG",{});var P8t=s(rve);sZo=r(P8t,"canine"),P8t.forEach(t),lZo=r(Nqe," \u2014 "),KW=n(Nqe,"A",{href:!0});var B8t=s(KW);iZo=r(B8t,"CanineForMultipleChoice"),B8t.forEach(t),dZo=r(Nqe," (CANINE model)"),Nqe.forEach(t),cZo=i(ee),IF=n(ee,"LI",{});var qqe=s(IF);tve=n(qqe,"STRONG",{});var I8t=s(tve);mZo=r(I8t,"convbert"),I8t.forEach(t),fZo=r(qqe," \u2014 "),ZW=n(qqe,"A",{href:!0});var N8t=s(ZW);gZo=r(N8t,"ConvBertForMultipleChoice"),N8t.forEach(t),hZo=r(qqe," (ConvBERT model)"),qqe.forEach(t),uZo=i(ee),NF=n(ee,"LI",{});var jqe=s(NF);ave=n(jqe,"STRONG",{});var q8t=s(ave);pZo=r(q8t,"data2vec-text"),q8t.forEach(t),_Zo=r(jqe," \u2014 "),eQ=n(jqe,"A",{href:!0});var j8t=s(eQ);bZo=r(j8t,"Data2VecTextForMultipleChoice"),j8t.forEach(t),vZo=r(jqe," (Data2VecText model)"),jqe.forEach(t),FZo=i(ee),qF=n(ee,"LI",{});var Dqe=s(qF);nve=n(Dqe,"STRONG",{});var D8t=s(nve);TZo=r(D8t,"deberta-v2"),D8t.forEach(t),MZo=r(Dqe," \u2014 "),oQ=n(Dqe,"A",{href:!0});var G8t=s(oQ);EZo=r(G8t,"DebertaV2ForMultipleChoice"),G8t.forEach(t),CZo=r(Dqe," (DeBERTa-v2 model)"),Dqe.forEach(t),wZo=i(ee),jF=n(ee,"LI",{});var Gqe=s(jF);sve=n(Gqe,"STRONG",{});var O8t=s(sve);AZo=r(O8t,"distilbert"),O8t.forEach(t),LZo=r(Gqe," \u2014 "),rQ=n(Gqe,"A",{href:!0});var V8t=s(rQ);yZo=r(V8t,"DistilBertForMultipleChoice"),V8t.forEach(t),xZo=r(Gqe," (DistilBERT model)"),Gqe.forEach(t),$Zo=i(ee),DF=n(ee,"LI",{});var Oqe=s(DF);lve=n(Oqe,"STRONG",{});var X8t=s(lve);kZo=r(X8t,"electra"),X8t.forEach(t),SZo=r(Oqe," \u2014 "),tQ=n(Oqe,"A",{href:!0});var z8t=s(tQ);RZo=r(z8t,"ElectraForMultipleChoice"),z8t.forEach(t),PZo=r(Oqe," (ELECTRA model)"),Oqe.forEach(t),BZo=i(ee),GF=n(ee,"LI",{});var Vqe=s(GF);ive=n(Vqe,"STRONG",{});var W8t=s(ive);IZo=r(W8t,"flaubert"),W8t.forEach(t),NZo=r(Vqe," \u2014 "),aQ=n(Vqe,"A",{href:!0});var Q8t=s(aQ);qZo=r(Q8t,"FlaubertForMultipleChoice"),Q8t.forEach(t),jZo=r(Vqe," (FlauBERT model)"),Vqe.forEach(t),DZo=i(ee),OF=n(ee,"LI",{});var Xqe=s(OF);dve=n(Xqe,"STRONG",{});var U8t=s(dve);GZo=r(U8t,"fnet"),U8t.forEach(t),OZo=r(Xqe," \u2014 "),nQ=n(Xqe,"A",{href:!0});var H8t=s(nQ);VZo=r(H8t,"FNetForMultipleChoice"),H8t.forEach(t),XZo=r(Xqe," (FNet model)"),Xqe.forEach(t),zZo=i(ee),VF=n(ee,"LI",{});var zqe=s(VF);cve=n(zqe,"STRONG",{});var J8t=s(cve);WZo=r(J8t,"funnel"),J8t.forEach(t),QZo=r(zqe," \u2014 "),sQ=n(zqe,"A",{href:!0});var Y8t=s(sQ);UZo=r(Y8t,"FunnelForMultipleChoice"),Y8t.forEach(t),HZo=r(zqe," (Funnel Transformer model)"),zqe.forEach(t),JZo=i(ee),XF=n(ee,"LI",{});var Wqe=s(XF);mve=n(Wqe,"STRONG",{});var K8t=s(mve);YZo=r(K8t,"ibert"),K8t.forEach(t),KZo=r(Wqe," \u2014 "),lQ=n(Wqe,"A",{href:!0});var Z8t=s(lQ);ZZo=r(Z8t,"IBertForMultipleChoice"),Z8t.forEach(t),eer=r(Wqe," (I-BERT model)"),Wqe.forEach(t),oer=i(ee),zF=n(ee,"LI",{});var Qqe=s(zF);fve=n(Qqe,"STRONG",{});var e9t=s(fve);rer=r(e9t,"longformer"),e9t.forEach(t),ter=r(Qqe," \u2014 "),iQ=n(Qqe,"A",{href:!0});var o9t=s(iQ);aer=r(o9t,"LongformerForMultipleChoice"),o9t.forEach(t),ner=r(Qqe," (Longformer model)"),Qqe.forEach(t),ser=i(ee),WF=n(ee,"LI",{});var Uqe=s(WF);gve=n(Uqe,"STRONG",{});var r9t=s(gve);ler=r(r9t,"luke"),r9t.forEach(t),ier=r(Uqe," \u2014 "),dQ=n(Uqe,"A",{href:!0});var t9t=s(dQ);der=r(t9t,"LukeForMultipleChoice"),t9t.forEach(t),cer=r(Uqe," (LUKE model)"),Uqe.forEach(t),mer=i(ee),QF=n(ee,"LI",{});var Hqe=s(QF);hve=n(Hqe,"STRONG",{});var a9t=s(hve);fer=r(a9t,"megatron-bert"),a9t.forEach(t),ger=r(Hqe," \u2014 "),cQ=n(Hqe,"A",{href:!0});var n9t=s(cQ);her=r(n9t,"MegatronBertForMultipleChoice"),n9t.forEach(t),uer=r(Hqe," (Megatron-BERT model)"),Hqe.forEach(t),per=i(ee),UF=n(ee,"LI",{});var Jqe=s(UF);uve=n(Jqe,"STRONG",{});var s9t=s(uve);_er=r(s9t,"mobilebert"),s9t.forEach(t),ber=r(Jqe," \u2014 "),mQ=n(Jqe,"A",{href:!0});var l9t=s(mQ);ver=r(l9t,"MobileBertForMultipleChoice"),l9t.forEach(t),Fer=r(Jqe," (MobileBERT model)"),Jqe.forEach(t),Ter=i(ee),HF=n(ee,"LI",{});var Yqe=s(HF);pve=n(Yqe,"STRONG",{});var i9t=s(pve);Mer=r(i9t,"mpnet"),i9t.forEach(t),Eer=r(Yqe," \u2014 "),fQ=n(Yqe,"A",{href:!0});var d9t=s(fQ);Cer=r(d9t,"MPNetForMultipleChoice"),d9t.forEach(t),wer=r(Yqe," (MPNet model)"),Yqe.forEach(t),Aer=i(ee),JF=n(ee,"LI",{});var Kqe=s(JF);_ve=n(Kqe,"STRONG",{});var c9t=s(_ve);Ler=r(c9t,"nezha"),c9t.forEach(t),yer=r(Kqe," \u2014 "),gQ=n(Kqe,"A",{href:!0});var m9t=s(gQ);xer=r(m9t,"NezhaForMultipleChoice"),m9t.forEach(t),$er=r(Kqe," (Nezha model)"),Kqe.forEach(t),ker=i(ee),YF=n(ee,"LI",{});var Zqe=s(YF);bve=n(Zqe,"STRONG",{});var f9t=s(bve);Ser=r(f9t,"nystromformer"),f9t.forEach(t),Rer=r(Zqe," \u2014 "),hQ=n(Zqe,"A",{href:!0});var g9t=s(hQ);Per=r(g9t,"NystromformerForMultipleChoice"),g9t.forEach(t),Ber=r(Zqe," (Nystr\xF6mformer model)"),Zqe.forEach(t),Ier=i(ee),KF=n(ee,"LI",{});var eje=s(KF);vve=n(eje,"STRONG",{});var h9t=s(vve);Ner=r(h9t,"qdqbert"),h9t.forEach(t),qer=r(eje," \u2014 "),uQ=n(eje,"A",{href:!0});var u9t=s(uQ);jer=r(u9t,"QDQBertForMultipleChoice"),u9t.forEach(t),Der=r(eje," (QDQBert model)"),eje.forEach(t),Ger=i(ee),ZF=n(ee,"LI",{});var oje=s(ZF);Fve=n(oje,"STRONG",{});var p9t=s(Fve);Oer=r(p9t,"rembert"),p9t.forEach(t),Ver=r(oje," \u2014 "),pQ=n(oje,"A",{href:!0});var _9t=s(pQ);Xer=r(_9t,"RemBertForMultipleChoice"),_9t.forEach(t),zer=r(oje," (RemBERT model)"),oje.forEach(t),Wer=i(ee),eT=n(ee,"LI",{});var rje=s(eT);Tve=n(rje,"STRONG",{});var b9t=s(Tve);Qer=r(b9t,"roberta"),b9t.forEach(t),Uer=r(rje," \u2014 "),_Q=n(rje,"A",{href:!0});var v9t=s(_Q);Her=r(v9t,"RobertaForMultipleChoice"),v9t.forEach(t),Jer=r(rje," (RoBERTa model)"),rje.forEach(t),Yer=i(ee),oT=n(ee,"LI",{});var tje=s(oT);Mve=n(tje,"STRONG",{});var F9t=s(Mve);Ker=r(F9t,"roformer"),F9t.forEach(t),Zer=r(tje," \u2014 "),bQ=n(tje,"A",{href:!0});var T9t=s(bQ);eor=r(T9t,"RoFormerForMultipleChoice"),T9t.forEach(t),oor=r(tje," (RoFormer model)"),tje.forEach(t),ror=i(ee),rT=n(ee,"LI",{});var aje=s(rT);Eve=n(aje,"STRONG",{});var M9t=s(Eve);tor=r(M9t,"squeezebert"),M9t.forEach(t),aor=r(aje," \u2014 "),vQ=n(aje,"A",{href:!0});var E9t=s(vQ);nor=r(E9t,"SqueezeBertForMultipleChoice"),E9t.forEach(t),sor=r(aje," (SqueezeBERT model)"),aje.forEach(t),lor=i(ee),tT=n(ee,"LI",{});var nje=s(tT);Cve=n(nje,"STRONG",{});var C9t=s(Cve);ior=r(C9t,"xlm"),C9t.forEach(t),dor=r(nje," \u2014 "),FQ=n(nje,"A",{href:!0});var w9t=s(FQ);cor=r(w9t,"XLMForMultipleChoice"),w9t.forEach(t),mor=r(nje," (XLM model)"),nje.forEach(t),gor=i(ee),aT=n(ee,"LI",{});var sje=s(aT);wve=n(sje,"STRONG",{});var A9t=s(wve);hor=r(A9t,"xlm-roberta"),A9t.forEach(t),uor=r(sje," \u2014 "),TQ=n(sje,"A",{href:!0});var L9t=s(TQ);por=r(L9t,"XLMRobertaForMultipleChoice"),L9t.forEach(t),_or=r(sje," (XLM-RoBERTa model)"),sje.forEach(t),bor=i(ee),nT=n(ee,"LI",{});var lje=s(nT);Ave=n(lje,"STRONG",{});var y9t=s(Ave);vor=r(y9t,"xlm-roberta-xl"),y9t.forEach(t),For=r(lje," \u2014 "),MQ=n(lje,"A",{href:!0});var x9t=s(MQ);Tor=r(x9t,"XLMRobertaXLForMultipleChoice"),x9t.forEach(t),Mor=r(lje," (XLM-RoBERTa-XL model)"),lje.forEach(t),Eor=i(ee),sT=n(ee,"LI",{});var ije=s(sT);Lve=n(ije,"STRONG",{});var $9t=s(Lve);Cor=r($9t,"xlnet"),$9t.forEach(t),wor=r(ije," \u2014 "),EQ=n(ije,"A",{href:!0});var k9t=s(EQ);Aor=r(k9t,"XLNetForMultipleChoice"),k9t.forEach(t),Lor=r(ije," (XLNet model)"),ije.forEach(t),yor=i(ee),lT=n(ee,"LI",{});var dje=s(lT);yve=n(dje,"STRONG",{});var S9t=s(yve);xor=r(S9t,"yoso"),S9t.forEach(t),$or=r(dje," \u2014 "),CQ=n(dje,"A",{href:!0});var R9t=s(CQ);kor=r(R9t,"YosoForMultipleChoice"),R9t.forEach(t),Sor=r(dje," (YOSO model)"),dje.forEach(t),ee.forEach(t),Ror=i(va),iT=n(va,"P",{});var cje=s(iT);Por=r(cje,"The model is set in evaluation mode by default using "),xve=n(cje,"CODE",{});var P9t=s(xve);Bor=r(P9t,"model.eval()"),P9t.forEach(t),Ior=r(cje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ve=n(cje,"CODE",{});var B9t=s($ve);Nor=r(B9t,"model.train()"),B9t.forEach(t),cje.forEach(t),qor=i(va),T(dT.$$.fragment,va),va.forEach(t),Fl.forEach(t),JUe=i(m),Ed=n(m,"H2",{class:!0});var sYe=s(Ed);cT=n(sYe,"A",{id:!0,class:!0,href:!0});var I9t=s(cT);kve=n(I9t,"SPAN",{});var N9t=s(kve);T($9.$$.fragment,N9t),N9t.forEach(t),I9t.forEach(t),jor=i(sYe),Sve=n(sYe,"SPAN",{});var q9t=s(Sve);Dor=r(q9t,"AutoModelForNextSentencePrediction"),q9t.forEach(t),sYe.forEach(t),YUe=i(m),jo=n(m,"DIV",{class:!0});var Tl=s(jo);T(k9.$$.fragment,Tl),Gor=i(Tl),Cd=n(Tl,"P",{});var bne=s(Cd);Oor=r(bne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),wQ=n(bne,"A",{href:!0});var j9t=s(wQ);Vor=r(j9t,"from_pretrained()"),j9t.forEach(t),Xor=r(bne," class method or the "),AQ=n(bne,"A",{href:!0});var D9t=s(AQ);zor=r(D9t,"from_config()"),D9t.forEach(t),Wor=r(bne,` class
method.`),bne.forEach(t),Qor=i(Tl),S9=n(Tl,"P",{});var lYe=s(S9);Uor=r(lYe,"This class cannot be instantiated directly using "),Rve=n(lYe,"CODE",{});var G9t=s(Rve);Hor=r(G9t,"__init__()"),G9t.forEach(t),Jor=r(lYe," (throws an error)."),lYe.forEach(t),Yor=i(Tl),vt=n(Tl,"DIV",{class:!0});var IL=s(vt);T(R9.$$.fragment,IL),Kor=i(IL),Pve=n(IL,"P",{});var O9t=s(Pve);Zor=r(O9t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),O9t.forEach(t),err=i(IL),wd=n(IL,"P",{});var vne=s(wd);orr=r(vne,`Note:
Loading a model from its configuration file does `),Bve=n(vne,"STRONG",{});var V9t=s(Bve);rrr=r(V9t,"not"),V9t.forEach(t),trr=r(vne,` load the model weights. It only affects the
model\u2019s configuration. Use `),LQ=n(vne,"A",{href:!0});var X9t=s(LQ);arr=r(X9t,"from_pretrained()"),X9t.forEach(t),nrr=r(vne," to load the model weights."),vne.forEach(t),srr=i(IL),T(mT.$$.fragment,IL),IL.forEach(t),lrr=i(Tl),no=n(Tl,"DIV",{class:!0});var Fa=s(no);T(P9.$$.fragment,Fa),irr=i(Fa),Ive=n(Fa,"P",{});var z9t=s(Ive);drr=r(z9t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),z9t.forEach(t),crr=i(Fa),Ja=n(Fa,"P",{});var NL=s(Ja);mrr=r(NL,"The model class to instantiate is selected based on the "),Nve=n(NL,"CODE",{});var W9t=s(Nve);frr=r(W9t,"model_type"),W9t.forEach(t),grr=r(NL,` property of the config object (either
passed as an argument or loaded from `),qve=n(NL,"CODE",{});var Q9t=s(qve);hrr=r(Q9t,"pretrained_model_name_or_path"),Q9t.forEach(t),urr=r(NL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jve=n(NL,"CODE",{});var U9t=s(jve);prr=r(U9t,"pretrained_model_name_or_path"),U9t.forEach(t),_rr=r(NL,":"),NL.forEach(t),brr=i(Fa),Do=n(Fa,"UL",{});var Ta=s(Do);fT=n(Ta,"LI",{});var mje=s(fT);Dve=n(mje,"STRONG",{});var H9t=s(Dve);vrr=r(H9t,"bert"),H9t.forEach(t),Frr=r(mje," \u2014 "),yQ=n(mje,"A",{href:!0});var J9t=s(yQ);Trr=r(J9t,"BertForNextSentencePrediction"),J9t.forEach(t),Mrr=r(mje," (BERT model)"),mje.forEach(t),Err=i(Ta),gT=n(Ta,"LI",{});var fje=s(gT);Gve=n(fje,"STRONG",{});var Y9t=s(Gve);Crr=r(Y9t,"fnet"),Y9t.forEach(t),wrr=r(fje," \u2014 "),xQ=n(fje,"A",{href:!0});var K9t=s(xQ);Arr=r(K9t,"FNetForNextSentencePrediction"),K9t.forEach(t),Lrr=r(fje," (FNet model)"),fje.forEach(t),yrr=i(Ta),hT=n(Ta,"LI",{});var gje=s(hT);Ove=n(gje,"STRONG",{});var Z9t=s(Ove);xrr=r(Z9t,"megatron-bert"),Z9t.forEach(t),$rr=r(gje," \u2014 "),$Q=n(gje,"A",{href:!0});var ext=s($Q);krr=r(ext,"MegatronBertForNextSentencePrediction"),ext.forEach(t),Srr=r(gje," (Megatron-BERT model)"),gje.forEach(t),Rrr=i(Ta),uT=n(Ta,"LI",{});var hje=s(uT);Vve=n(hje,"STRONG",{});var oxt=s(Vve);Prr=r(oxt,"mobilebert"),oxt.forEach(t),Brr=r(hje," \u2014 "),kQ=n(hje,"A",{href:!0});var rxt=s(kQ);Irr=r(rxt,"MobileBertForNextSentencePrediction"),rxt.forEach(t),Nrr=r(hje," (MobileBERT model)"),hje.forEach(t),qrr=i(Ta),pT=n(Ta,"LI",{});var uje=s(pT);Xve=n(uje,"STRONG",{});var txt=s(Xve);jrr=r(txt,"nezha"),txt.forEach(t),Drr=r(uje," \u2014 "),SQ=n(uje,"A",{href:!0});var axt=s(SQ);Grr=r(axt,"NezhaForNextSentencePrediction"),axt.forEach(t),Orr=r(uje," (Nezha model)"),uje.forEach(t),Vrr=i(Ta),_T=n(Ta,"LI",{});var pje=s(_T);zve=n(pje,"STRONG",{});var nxt=s(zve);Xrr=r(nxt,"qdqbert"),nxt.forEach(t),zrr=r(pje," \u2014 "),RQ=n(pje,"A",{href:!0});var sxt=s(RQ);Wrr=r(sxt,"QDQBertForNextSentencePrediction"),sxt.forEach(t),Qrr=r(pje," (QDQBert model)"),pje.forEach(t),Ta.forEach(t),Urr=i(Fa),bT=n(Fa,"P",{});var _je=s(bT);Hrr=r(_je,"The model is set in evaluation mode by default using "),Wve=n(_je,"CODE",{});var lxt=s(Wve);Jrr=r(lxt,"model.eval()"),lxt.forEach(t),Yrr=r(_je,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qve=n(_je,"CODE",{});var ixt=s(Qve);Krr=r(ixt,"model.train()"),ixt.forEach(t),_je.forEach(t),Zrr=i(Fa),T(vT.$$.fragment,Fa),Fa.forEach(t),Tl.forEach(t),KUe=i(m),Ad=n(m,"H2",{class:!0});var iYe=s(Ad);FT=n(iYe,"A",{id:!0,class:!0,href:!0});var dxt=s(FT);Uve=n(dxt,"SPAN",{});var cxt=s(Uve);T(B9.$$.fragment,cxt),cxt.forEach(t),dxt.forEach(t),etr=i(iYe),Hve=n(iYe,"SPAN",{});var mxt=s(Hve);otr=r(mxt,"AutoModelForTokenClassification"),mxt.forEach(t),iYe.forEach(t),ZUe=i(m),Go=n(m,"DIV",{class:!0});var Ml=s(Go);T(I9.$$.fragment,Ml),rtr=i(Ml),Ld=n(Ml,"P",{});var Fne=s(Ld);ttr=r(Fne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),PQ=n(Fne,"A",{href:!0});var fxt=s(PQ);atr=r(fxt,"from_pretrained()"),fxt.forEach(t),ntr=r(Fne," class method or the "),BQ=n(Fne,"A",{href:!0});var gxt=s(BQ);str=r(gxt,"from_config()"),gxt.forEach(t),ltr=r(Fne,` class
method.`),Fne.forEach(t),itr=i(Ml),N9=n(Ml,"P",{});var dYe=s(N9);dtr=r(dYe,"This class cannot be instantiated directly using "),Jve=n(dYe,"CODE",{});var hxt=s(Jve);ctr=r(hxt,"__init__()"),hxt.forEach(t),mtr=r(dYe," (throws an error)."),dYe.forEach(t),ftr=i(Ml),Ft=n(Ml,"DIV",{class:!0});var qL=s(Ft);T(q9.$$.fragment,qL),gtr=i(qL),Yve=n(qL,"P",{});var uxt=s(Yve);htr=r(uxt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),uxt.forEach(t),utr=i(qL),yd=n(qL,"P",{});var Tne=s(yd);ptr=r(Tne,`Note:
Loading a model from its configuration file does `),Kve=n(Tne,"STRONG",{});var pxt=s(Kve);_tr=r(pxt,"not"),pxt.forEach(t),btr=r(Tne,` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=n(Tne,"A",{href:!0});var _xt=s(IQ);vtr=r(_xt,"from_pretrained()"),_xt.forEach(t),Ftr=r(Tne," to load the model weights."),Tne.forEach(t),Ttr=i(qL),T(TT.$$.fragment,qL),qL.forEach(t),Mtr=i(Ml),so=n(Ml,"DIV",{class:!0});var Ma=s(so);T(j9.$$.fragment,Ma),Etr=i(Ma),Zve=n(Ma,"P",{});var bxt=s(Zve);Ctr=r(bxt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),bxt.forEach(t),wtr=i(Ma),Ya=n(Ma,"P",{});var jL=s(Ya);Atr=r(jL,"The model class to instantiate is selected based on the "),e1e=n(jL,"CODE",{});var vxt=s(e1e);Ltr=r(vxt,"model_type"),vxt.forEach(t),ytr=r(jL,` property of the config object (either
passed as an argument or loaded from `),o1e=n(jL,"CODE",{});var Fxt=s(o1e);xtr=r(Fxt,"pretrained_model_name_or_path"),Fxt.forEach(t),$tr=r(jL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r1e=n(jL,"CODE",{});var Txt=s(r1e);ktr=r(Txt,"pretrained_model_name_or_path"),Txt.forEach(t),Str=r(jL,":"),jL.forEach(t),Rtr=i(Ma),H=n(Ma,"UL",{});var K=s(H);MT=n(K,"LI",{});var bje=s(MT);t1e=n(bje,"STRONG",{});var Mxt=s(t1e);Ptr=r(Mxt,"albert"),Mxt.forEach(t),Btr=r(bje," \u2014 "),NQ=n(bje,"A",{href:!0});var Ext=s(NQ);Itr=r(Ext,"AlbertForTokenClassification"),Ext.forEach(t),Ntr=r(bje," (ALBERT model)"),bje.forEach(t),qtr=i(K),ET=n(K,"LI",{});var vje=s(ET);a1e=n(vje,"STRONG",{});var Cxt=s(a1e);jtr=r(Cxt,"bert"),Cxt.forEach(t),Dtr=r(vje," \u2014 "),qQ=n(vje,"A",{href:!0});var wxt=s(qQ);Gtr=r(wxt,"BertForTokenClassification"),wxt.forEach(t),Otr=r(vje," (BERT model)"),vje.forEach(t),Vtr=i(K),CT=n(K,"LI",{});var Fje=s(CT);n1e=n(Fje,"STRONG",{});var Axt=s(n1e);Xtr=r(Axt,"big_bird"),Axt.forEach(t),ztr=r(Fje," \u2014 "),jQ=n(Fje,"A",{href:!0});var Lxt=s(jQ);Wtr=r(Lxt,"BigBirdForTokenClassification"),Lxt.forEach(t),Qtr=r(Fje," (BigBird model)"),Fje.forEach(t),Utr=i(K),wT=n(K,"LI",{});var Tje=s(wT);s1e=n(Tje,"STRONG",{});var yxt=s(s1e);Htr=r(yxt,"bloom"),yxt.forEach(t),Jtr=r(Tje," \u2014 "),DQ=n(Tje,"A",{href:!0});var xxt=s(DQ);Ytr=r(xxt,"BloomForTokenClassification"),xxt.forEach(t),Ktr=r(Tje," (BLOOM model)"),Tje.forEach(t),Ztr=i(K),AT=n(K,"LI",{});var Mje=s(AT);l1e=n(Mje,"STRONG",{});var $xt=s(l1e);ear=r($xt,"camembert"),$xt.forEach(t),oar=r(Mje," \u2014 "),GQ=n(Mje,"A",{href:!0});var kxt=s(GQ);rar=r(kxt,"CamembertForTokenClassification"),kxt.forEach(t),tar=r(Mje," (CamemBERT model)"),Mje.forEach(t),aar=i(K),LT=n(K,"LI",{});var Eje=s(LT);i1e=n(Eje,"STRONG",{});var Sxt=s(i1e);nar=r(Sxt,"canine"),Sxt.forEach(t),sar=r(Eje," \u2014 "),OQ=n(Eje,"A",{href:!0});var Rxt=s(OQ);lar=r(Rxt,"CanineForTokenClassification"),Rxt.forEach(t),iar=r(Eje," (CANINE model)"),Eje.forEach(t),dar=i(K),yT=n(K,"LI",{});var Cje=s(yT);d1e=n(Cje,"STRONG",{});var Pxt=s(d1e);car=r(Pxt,"convbert"),Pxt.forEach(t),mar=r(Cje," \u2014 "),VQ=n(Cje,"A",{href:!0});var Bxt=s(VQ);far=r(Bxt,"ConvBertForTokenClassification"),Bxt.forEach(t),gar=r(Cje," (ConvBERT model)"),Cje.forEach(t),har=i(K),xT=n(K,"LI",{});var wje=s(xT);c1e=n(wje,"STRONG",{});var Ixt=s(c1e);uar=r(Ixt,"data2vec-text"),Ixt.forEach(t),par=r(wje," \u2014 "),XQ=n(wje,"A",{href:!0});var Nxt=s(XQ);_ar=r(Nxt,"Data2VecTextForTokenClassification"),Nxt.forEach(t),bar=r(wje," (Data2VecText model)"),wje.forEach(t),Far=i(K),$T=n(K,"LI",{});var Aje=s($T);m1e=n(Aje,"STRONG",{});var qxt=s(m1e);Tar=r(qxt,"deberta"),qxt.forEach(t),Mar=r(Aje," \u2014 "),zQ=n(Aje,"A",{href:!0});var jxt=s(zQ);Ear=r(jxt,"DebertaForTokenClassification"),jxt.forEach(t),Car=r(Aje," (DeBERTa model)"),Aje.forEach(t),war=i(K),kT=n(K,"LI",{});var Lje=s(kT);f1e=n(Lje,"STRONG",{});var Dxt=s(f1e);Aar=r(Dxt,"deberta-v2"),Dxt.forEach(t),Lar=r(Lje," \u2014 "),WQ=n(Lje,"A",{href:!0});var Gxt=s(WQ);yar=r(Gxt,"DebertaV2ForTokenClassification"),Gxt.forEach(t),xar=r(Lje," (DeBERTa-v2 model)"),Lje.forEach(t),$ar=i(K),ST=n(K,"LI",{});var yje=s(ST);g1e=n(yje,"STRONG",{});var Oxt=s(g1e);kar=r(Oxt,"distilbert"),Oxt.forEach(t),Sar=r(yje," \u2014 "),QQ=n(yje,"A",{href:!0});var Vxt=s(QQ);Rar=r(Vxt,"DistilBertForTokenClassification"),Vxt.forEach(t),Par=r(yje," (DistilBERT model)"),yje.forEach(t),Bar=i(K),RT=n(K,"LI",{});var xje=s(RT);h1e=n(xje,"STRONG",{});var Xxt=s(h1e);Iar=r(Xxt,"electra"),Xxt.forEach(t),Nar=r(xje," \u2014 "),UQ=n(xje,"A",{href:!0});var zxt=s(UQ);qar=r(zxt,"ElectraForTokenClassification"),zxt.forEach(t),jar=r(xje," (ELECTRA model)"),xje.forEach(t),Dar=i(K),PT=n(K,"LI",{});var $je=s(PT);u1e=n($je,"STRONG",{});var Wxt=s(u1e);Gar=r(Wxt,"flaubert"),Wxt.forEach(t),Oar=r($je," \u2014 "),HQ=n($je,"A",{href:!0});var Qxt=s(HQ);Var=r(Qxt,"FlaubertForTokenClassification"),Qxt.forEach(t),Xar=r($je," (FlauBERT model)"),$je.forEach(t),zar=i(K),BT=n(K,"LI",{});var kje=s(BT);p1e=n(kje,"STRONG",{});var Uxt=s(p1e);War=r(Uxt,"fnet"),Uxt.forEach(t),Qar=r(kje," \u2014 "),JQ=n(kje,"A",{href:!0});var Hxt=s(JQ);Uar=r(Hxt,"FNetForTokenClassification"),Hxt.forEach(t),Har=r(kje," (FNet model)"),kje.forEach(t),Jar=i(K),IT=n(K,"LI",{});var Sje=s(IT);_1e=n(Sje,"STRONG",{});var Jxt=s(_1e);Yar=r(Jxt,"funnel"),Jxt.forEach(t),Kar=r(Sje," \u2014 "),YQ=n(Sje,"A",{href:!0});var Yxt=s(YQ);Zar=r(Yxt,"FunnelForTokenClassification"),Yxt.forEach(t),enr=r(Sje," (Funnel Transformer model)"),Sje.forEach(t),onr=i(K),NT=n(K,"LI",{});var Rje=s(NT);b1e=n(Rje,"STRONG",{});var Kxt=s(b1e);rnr=r(Kxt,"gpt2"),Kxt.forEach(t),tnr=r(Rje," \u2014 "),KQ=n(Rje,"A",{href:!0});var Zxt=s(KQ);anr=r(Zxt,"GPT2ForTokenClassification"),Zxt.forEach(t),nnr=r(Rje," (OpenAI GPT-2 model)"),Rje.forEach(t),snr=i(K),qT=n(K,"LI",{});var Pje=s(qT);v1e=n(Pje,"STRONG",{});var e$t=s(v1e);lnr=r(e$t,"ibert"),e$t.forEach(t),inr=r(Pje," \u2014 "),ZQ=n(Pje,"A",{href:!0});var o$t=s(ZQ);dnr=r(o$t,"IBertForTokenClassification"),o$t.forEach(t),cnr=r(Pje," (I-BERT model)"),Pje.forEach(t),mnr=i(K),jT=n(K,"LI",{});var Bje=s(jT);F1e=n(Bje,"STRONG",{});var r$t=s(F1e);fnr=r(r$t,"layoutlm"),r$t.forEach(t),gnr=r(Bje," \u2014 "),eU=n(Bje,"A",{href:!0});var t$t=s(eU);hnr=r(t$t,"LayoutLMForTokenClassification"),t$t.forEach(t),unr=r(Bje," (LayoutLM model)"),Bje.forEach(t),pnr=i(K),DT=n(K,"LI",{});var Ije=s(DT);T1e=n(Ije,"STRONG",{});var a$t=s(T1e);_nr=r(a$t,"layoutlmv2"),a$t.forEach(t),bnr=r(Ije," \u2014 "),oU=n(Ije,"A",{href:!0});var n$t=s(oU);vnr=r(n$t,"LayoutLMv2ForTokenClassification"),n$t.forEach(t),Fnr=r(Ije," (LayoutLMv2 model)"),Ije.forEach(t),Tnr=i(K),GT=n(K,"LI",{});var Nje=s(GT);M1e=n(Nje,"STRONG",{});var s$t=s(M1e);Mnr=r(s$t,"layoutlmv3"),s$t.forEach(t),Enr=r(Nje," \u2014 "),rU=n(Nje,"A",{href:!0});var l$t=s(rU);Cnr=r(l$t,"LayoutLMv3ForTokenClassification"),l$t.forEach(t),wnr=r(Nje," (LayoutLMv3 model)"),Nje.forEach(t),Anr=i(K),OT=n(K,"LI",{});var qje=s(OT);E1e=n(qje,"STRONG",{});var i$t=s(E1e);Lnr=r(i$t,"longformer"),i$t.forEach(t),ynr=r(qje," \u2014 "),tU=n(qje,"A",{href:!0});var d$t=s(tU);xnr=r(d$t,"LongformerForTokenClassification"),d$t.forEach(t),$nr=r(qje," (Longformer model)"),qje.forEach(t),knr=i(K),VT=n(K,"LI",{});var jje=s(VT);C1e=n(jje,"STRONG",{});var c$t=s(C1e);Snr=r(c$t,"luke"),c$t.forEach(t),Rnr=r(jje," \u2014 "),aU=n(jje,"A",{href:!0});var m$t=s(aU);Pnr=r(m$t,"LukeForTokenClassification"),m$t.forEach(t),Bnr=r(jje," (LUKE model)"),jje.forEach(t),Inr=i(K),XT=n(K,"LI",{});var Dje=s(XT);w1e=n(Dje,"STRONG",{});var f$t=s(w1e);Nnr=r(f$t,"megatron-bert"),f$t.forEach(t),qnr=r(Dje," \u2014 "),nU=n(Dje,"A",{href:!0});var g$t=s(nU);jnr=r(g$t,"MegatronBertForTokenClassification"),g$t.forEach(t),Dnr=r(Dje," (Megatron-BERT model)"),Dje.forEach(t),Gnr=i(K),zT=n(K,"LI",{});var Gje=s(zT);A1e=n(Gje,"STRONG",{});var h$t=s(A1e);Onr=r(h$t,"mobilebert"),h$t.forEach(t),Vnr=r(Gje," \u2014 "),sU=n(Gje,"A",{href:!0});var u$t=s(sU);Xnr=r(u$t,"MobileBertForTokenClassification"),u$t.forEach(t),znr=r(Gje," (MobileBERT model)"),Gje.forEach(t),Wnr=i(K),WT=n(K,"LI",{});var Oje=s(WT);L1e=n(Oje,"STRONG",{});var p$t=s(L1e);Qnr=r(p$t,"mpnet"),p$t.forEach(t),Unr=r(Oje," \u2014 "),lU=n(Oje,"A",{href:!0});var _$t=s(lU);Hnr=r(_$t,"MPNetForTokenClassification"),_$t.forEach(t),Jnr=r(Oje," (MPNet model)"),Oje.forEach(t),Ynr=i(K),QT=n(K,"LI",{});var Vje=s(QT);y1e=n(Vje,"STRONG",{});var b$t=s(y1e);Knr=r(b$t,"nezha"),b$t.forEach(t),Znr=r(Vje," \u2014 "),iU=n(Vje,"A",{href:!0});var v$t=s(iU);esr=r(v$t,"NezhaForTokenClassification"),v$t.forEach(t),osr=r(Vje," (Nezha model)"),Vje.forEach(t),rsr=i(K),UT=n(K,"LI",{});var Xje=s(UT);x1e=n(Xje,"STRONG",{});var F$t=s(x1e);tsr=r(F$t,"nystromformer"),F$t.forEach(t),asr=r(Xje," \u2014 "),dU=n(Xje,"A",{href:!0});var T$t=s(dU);nsr=r(T$t,"NystromformerForTokenClassification"),T$t.forEach(t),ssr=r(Xje," (Nystr\xF6mformer model)"),Xje.forEach(t),lsr=i(K),HT=n(K,"LI",{});var zje=s(HT);$1e=n(zje,"STRONG",{});var M$t=s($1e);isr=r(M$t,"qdqbert"),M$t.forEach(t),dsr=r(zje," \u2014 "),cU=n(zje,"A",{href:!0});var E$t=s(cU);csr=r(E$t,"QDQBertForTokenClassification"),E$t.forEach(t),msr=r(zje," (QDQBert model)"),zje.forEach(t),fsr=i(K),JT=n(K,"LI",{});var Wje=s(JT);k1e=n(Wje,"STRONG",{});var C$t=s(k1e);gsr=r(C$t,"rembert"),C$t.forEach(t),hsr=r(Wje," \u2014 "),mU=n(Wje,"A",{href:!0});var w$t=s(mU);usr=r(w$t,"RemBertForTokenClassification"),w$t.forEach(t),psr=r(Wje," (RemBERT model)"),Wje.forEach(t),_sr=i(K),YT=n(K,"LI",{});var Qje=s(YT);S1e=n(Qje,"STRONG",{});var A$t=s(S1e);bsr=r(A$t,"roberta"),A$t.forEach(t),vsr=r(Qje," \u2014 "),fU=n(Qje,"A",{href:!0});var L$t=s(fU);Fsr=r(L$t,"RobertaForTokenClassification"),L$t.forEach(t),Tsr=r(Qje," (RoBERTa model)"),Qje.forEach(t),Msr=i(K),KT=n(K,"LI",{});var Uje=s(KT);R1e=n(Uje,"STRONG",{});var y$t=s(R1e);Esr=r(y$t,"roformer"),y$t.forEach(t),Csr=r(Uje," \u2014 "),gU=n(Uje,"A",{href:!0});var x$t=s(gU);wsr=r(x$t,"RoFormerForTokenClassification"),x$t.forEach(t),Asr=r(Uje," (RoFormer model)"),Uje.forEach(t),Lsr=i(K),ZT=n(K,"LI",{});var Hje=s(ZT);P1e=n(Hje,"STRONG",{});var $$t=s(P1e);ysr=r($$t,"squeezebert"),$$t.forEach(t),xsr=r(Hje," \u2014 "),hU=n(Hje,"A",{href:!0});var k$t=s(hU);$sr=r(k$t,"SqueezeBertForTokenClassification"),k$t.forEach(t),ksr=r(Hje," (SqueezeBERT model)"),Hje.forEach(t),Ssr=i(K),eM=n(K,"LI",{});var Jje=s(eM);B1e=n(Jje,"STRONG",{});var S$t=s(B1e);Rsr=r(S$t,"xlm"),S$t.forEach(t),Psr=r(Jje," \u2014 "),uU=n(Jje,"A",{href:!0});var R$t=s(uU);Bsr=r(R$t,"XLMForTokenClassification"),R$t.forEach(t),Isr=r(Jje," (XLM model)"),Jje.forEach(t),Nsr=i(K),oM=n(K,"LI",{});var Yje=s(oM);I1e=n(Yje,"STRONG",{});var P$t=s(I1e);qsr=r(P$t,"xlm-roberta"),P$t.forEach(t),jsr=r(Yje," \u2014 "),pU=n(Yje,"A",{href:!0});var B$t=s(pU);Dsr=r(B$t,"XLMRobertaForTokenClassification"),B$t.forEach(t),Gsr=r(Yje," (XLM-RoBERTa model)"),Yje.forEach(t),Osr=i(K),rM=n(K,"LI",{});var Kje=s(rM);N1e=n(Kje,"STRONG",{});var I$t=s(N1e);Vsr=r(I$t,"xlm-roberta-xl"),I$t.forEach(t),Xsr=r(Kje," \u2014 "),_U=n(Kje,"A",{href:!0});var N$t=s(_U);zsr=r(N$t,"XLMRobertaXLForTokenClassification"),N$t.forEach(t),Wsr=r(Kje," (XLM-RoBERTa-XL model)"),Kje.forEach(t),Qsr=i(K),tM=n(K,"LI",{});var Zje=s(tM);q1e=n(Zje,"STRONG",{});var q$t=s(q1e);Usr=r(q$t,"xlnet"),q$t.forEach(t),Hsr=r(Zje," \u2014 "),bU=n(Zje,"A",{href:!0});var j$t=s(bU);Jsr=r(j$t,"XLNetForTokenClassification"),j$t.forEach(t),Ysr=r(Zje," (XLNet model)"),Zje.forEach(t),Ksr=i(K),aM=n(K,"LI",{});var eDe=s(aM);j1e=n(eDe,"STRONG",{});var D$t=s(j1e);Zsr=r(D$t,"yoso"),D$t.forEach(t),elr=r(eDe," \u2014 "),vU=n(eDe,"A",{href:!0});var G$t=s(vU);olr=r(G$t,"YosoForTokenClassification"),G$t.forEach(t),rlr=r(eDe," (YOSO model)"),eDe.forEach(t),K.forEach(t),tlr=i(Ma),nM=n(Ma,"P",{});var oDe=s(nM);alr=r(oDe,"The model is set in evaluation mode by default using "),D1e=n(oDe,"CODE",{});var O$t=s(D1e);nlr=r(O$t,"model.eval()"),O$t.forEach(t),slr=r(oDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G1e=n(oDe,"CODE",{});var V$t=s(G1e);llr=r(V$t,"model.train()"),V$t.forEach(t),oDe.forEach(t),ilr=i(Ma),T(sM.$$.fragment,Ma),Ma.forEach(t),Ml.forEach(t),eHe=i(m),xd=n(m,"H2",{class:!0});var cYe=s(xd);lM=n(cYe,"A",{id:!0,class:!0,href:!0});var X$t=s(lM);O1e=n(X$t,"SPAN",{});var z$t=s(O1e);T(D9.$$.fragment,z$t),z$t.forEach(t),X$t.forEach(t),dlr=i(cYe),V1e=n(cYe,"SPAN",{});var W$t=s(V1e);clr=r(W$t,"AutoModelForQuestionAnswering"),W$t.forEach(t),cYe.forEach(t),oHe=i(m),Oo=n(m,"DIV",{class:!0});var El=s(Oo);T(G9.$$.fragment,El),mlr=i(El),$d=n(El,"P",{});var Mne=s($d);flr=r(Mne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),FU=n(Mne,"A",{href:!0});var Q$t=s(FU);glr=r(Q$t,"from_pretrained()"),Q$t.forEach(t),hlr=r(Mne," class method or the "),TU=n(Mne,"A",{href:!0});var U$t=s(TU);ulr=r(U$t,"from_config()"),U$t.forEach(t),plr=r(Mne,` class
method.`),Mne.forEach(t),_lr=i(El),O9=n(El,"P",{});var mYe=s(O9);blr=r(mYe,"This class cannot be instantiated directly using "),X1e=n(mYe,"CODE",{});var H$t=s(X1e);vlr=r(H$t,"__init__()"),H$t.forEach(t),Flr=r(mYe," (throws an error)."),mYe.forEach(t),Tlr=i(El),Tt=n(El,"DIV",{class:!0});var DL=s(Tt);T(V9.$$.fragment,DL),Mlr=i(DL),z1e=n(DL,"P",{});var J$t=s(z1e);Elr=r(J$t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),J$t.forEach(t),Clr=i(DL),kd=n(DL,"P",{});var Ene=s(kd);wlr=r(Ene,`Note:
Loading a model from its configuration file does `),W1e=n(Ene,"STRONG",{});var Y$t=s(W1e);Alr=r(Y$t,"not"),Y$t.forEach(t),Llr=r(Ene,` load the model weights. It only affects the
model\u2019s configuration. Use `),MU=n(Ene,"A",{href:!0});var K$t=s(MU);ylr=r(K$t,"from_pretrained()"),K$t.forEach(t),xlr=r(Ene," to load the model weights."),Ene.forEach(t),$lr=i(DL),T(iM.$$.fragment,DL),DL.forEach(t),klr=i(El),lo=n(El,"DIV",{class:!0});var Ea=s(lo);T(X9.$$.fragment,Ea),Slr=i(Ea),Q1e=n(Ea,"P",{});var Z$t=s(Q1e);Rlr=r(Z$t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Z$t.forEach(t),Plr=i(Ea),Ka=n(Ea,"P",{});var GL=s(Ka);Blr=r(GL,"The model class to instantiate is selected based on the "),U1e=n(GL,"CODE",{});var ekt=s(U1e);Ilr=r(ekt,"model_type"),ekt.forEach(t),Nlr=r(GL,` property of the config object (either
passed as an argument or loaded from `),H1e=n(GL,"CODE",{});var okt=s(H1e);qlr=r(okt,"pretrained_model_name_or_path"),okt.forEach(t),jlr=r(GL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J1e=n(GL,"CODE",{});var rkt=s(J1e);Dlr=r(rkt,"pretrained_model_name_or_path"),rkt.forEach(t),Glr=r(GL,":"),GL.forEach(t),Olr=i(Ea),V=n(Ea,"UL",{});var X=s(V);dM=n(X,"LI",{});var rDe=s(dM);Y1e=n(rDe,"STRONG",{});var tkt=s(Y1e);Vlr=r(tkt,"albert"),tkt.forEach(t),Xlr=r(rDe," \u2014 "),EU=n(rDe,"A",{href:!0});var akt=s(EU);zlr=r(akt,"AlbertForQuestionAnswering"),akt.forEach(t),Wlr=r(rDe," (ALBERT model)"),rDe.forEach(t),Qlr=i(X),cM=n(X,"LI",{});var tDe=s(cM);K1e=n(tDe,"STRONG",{});var nkt=s(K1e);Ulr=r(nkt,"bart"),nkt.forEach(t),Hlr=r(tDe," \u2014 "),CU=n(tDe,"A",{href:!0});var skt=s(CU);Jlr=r(skt,"BartForQuestionAnswering"),skt.forEach(t),Ylr=r(tDe," (BART model)"),tDe.forEach(t),Klr=i(X),mM=n(X,"LI",{});var aDe=s(mM);Z1e=n(aDe,"STRONG",{});var lkt=s(Z1e);Zlr=r(lkt,"bert"),lkt.forEach(t),eir=r(aDe," \u2014 "),wU=n(aDe,"A",{href:!0});var ikt=s(wU);oir=r(ikt,"BertForQuestionAnswering"),ikt.forEach(t),rir=r(aDe," (BERT model)"),aDe.forEach(t),tir=i(X),fM=n(X,"LI",{});var nDe=s(fM);eFe=n(nDe,"STRONG",{});var dkt=s(eFe);air=r(dkt,"big_bird"),dkt.forEach(t),nir=r(nDe," \u2014 "),AU=n(nDe,"A",{href:!0});var ckt=s(AU);sir=r(ckt,"BigBirdForQuestionAnswering"),ckt.forEach(t),lir=r(nDe," (BigBird model)"),nDe.forEach(t),iir=i(X),gM=n(X,"LI",{});var sDe=s(gM);oFe=n(sDe,"STRONG",{});var mkt=s(oFe);dir=r(mkt,"bigbird_pegasus"),mkt.forEach(t),cir=r(sDe," \u2014 "),LU=n(sDe,"A",{href:!0});var fkt=s(LU);mir=r(fkt,"BigBirdPegasusForQuestionAnswering"),fkt.forEach(t),fir=r(sDe," (BigBird-Pegasus model)"),sDe.forEach(t),gir=i(X),hM=n(X,"LI",{});var lDe=s(hM);rFe=n(lDe,"STRONG",{});var gkt=s(rFe);hir=r(gkt,"camembert"),gkt.forEach(t),uir=r(lDe," \u2014 "),yU=n(lDe,"A",{href:!0});var hkt=s(yU);pir=r(hkt,"CamembertForQuestionAnswering"),hkt.forEach(t),_ir=r(lDe," (CamemBERT model)"),lDe.forEach(t),bir=i(X),uM=n(X,"LI",{});var iDe=s(uM);tFe=n(iDe,"STRONG",{});var ukt=s(tFe);vir=r(ukt,"canine"),ukt.forEach(t),Fir=r(iDe," \u2014 "),xU=n(iDe,"A",{href:!0});var pkt=s(xU);Tir=r(pkt,"CanineForQuestionAnswering"),pkt.forEach(t),Mir=r(iDe," (CANINE model)"),iDe.forEach(t),Eir=i(X),pM=n(X,"LI",{});var dDe=s(pM);aFe=n(dDe,"STRONG",{});var _kt=s(aFe);Cir=r(_kt,"convbert"),_kt.forEach(t),wir=r(dDe," \u2014 "),$U=n(dDe,"A",{href:!0});var bkt=s($U);Air=r(bkt,"ConvBertForQuestionAnswering"),bkt.forEach(t),Lir=r(dDe," (ConvBERT model)"),dDe.forEach(t),yir=i(X),_M=n(X,"LI",{});var cDe=s(_M);nFe=n(cDe,"STRONG",{});var vkt=s(nFe);xir=r(vkt,"data2vec-text"),vkt.forEach(t),$ir=r(cDe," \u2014 "),kU=n(cDe,"A",{href:!0});var Fkt=s(kU);kir=r(Fkt,"Data2VecTextForQuestionAnswering"),Fkt.forEach(t),Sir=r(cDe," (Data2VecText model)"),cDe.forEach(t),Rir=i(X),bM=n(X,"LI",{});var mDe=s(bM);sFe=n(mDe,"STRONG",{});var Tkt=s(sFe);Pir=r(Tkt,"deberta"),Tkt.forEach(t),Bir=r(mDe," \u2014 "),SU=n(mDe,"A",{href:!0});var Mkt=s(SU);Iir=r(Mkt,"DebertaForQuestionAnswering"),Mkt.forEach(t),Nir=r(mDe," (DeBERTa model)"),mDe.forEach(t),qir=i(X),vM=n(X,"LI",{});var fDe=s(vM);lFe=n(fDe,"STRONG",{});var Ekt=s(lFe);jir=r(Ekt,"deberta-v2"),Ekt.forEach(t),Dir=r(fDe," \u2014 "),RU=n(fDe,"A",{href:!0});var Ckt=s(RU);Gir=r(Ckt,"DebertaV2ForQuestionAnswering"),Ckt.forEach(t),Oir=r(fDe," (DeBERTa-v2 model)"),fDe.forEach(t),Vir=i(X),FM=n(X,"LI",{});var gDe=s(FM);iFe=n(gDe,"STRONG",{});var wkt=s(iFe);Xir=r(wkt,"distilbert"),wkt.forEach(t),zir=r(gDe," \u2014 "),PU=n(gDe,"A",{href:!0});var Akt=s(PU);Wir=r(Akt,"DistilBertForQuestionAnswering"),Akt.forEach(t),Qir=r(gDe," (DistilBERT model)"),gDe.forEach(t),Uir=i(X),TM=n(X,"LI",{});var hDe=s(TM);dFe=n(hDe,"STRONG",{});var Lkt=s(dFe);Hir=r(Lkt,"electra"),Lkt.forEach(t),Jir=r(hDe," \u2014 "),BU=n(hDe,"A",{href:!0});var ykt=s(BU);Yir=r(ykt,"ElectraForQuestionAnswering"),ykt.forEach(t),Kir=r(hDe," (ELECTRA model)"),hDe.forEach(t),Zir=i(X),MM=n(X,"LI",{});var uDe=s(MM);cFe=n(uDe,"STRONG",{});var xkt=s(cFe);edr=r(xkt,"flaubert"),xkt.forEach(t),odr=r(uDe," \u2014 "),IU=n(uDe,"A",{href:!0});var $kt=s(IU);rdr=r($kt,"FlaubertForQuestionAnsweringSimple"),$kt.forEach(t),tdr=r(uDe," (FlauBERT model)"),uDe.forEach(t),adr=i(X),EM=n(X,"LI",{});var pDe=s(EM);mFe=n(pDe,"STRONG",{});var kkt=s(mFe);ndr=r(kkt,"fnet"),kkt.forEach(t),sdr=r(pDe," \u2014 "),NU=n(pDe,"A",{href:!0});var Skt=s(NU);ldr=r(Skt,"FNetForQuestionAnswering"),Skt.forEach(t),idr=r(pDe," (FNet model)"),pDe.forEach(t),ddr=i(X),CM=n(X,"LI",{});var _De=s(CM);fFe=n(_De,"STRONG",{});var Rkt=s(fFe);cdr=r(Rkt,"funnel"),Rkt.forEach(t),mdr=r(_De," \u2014 "),qU=n(_De,"A",{href:!0});var Pkt=s(qU);fdr=r(Pkt,"FunnelForQuestionAnswering"),Pkt.forEach(t),gdr=r(_De," (Funnel Transformer model)"),_De.forEach(t),hdr=i(X),wM=n(X,"LI",{});var bDe=s(wM);gFe=n(bDe,"STRONG",{});var Bkt=s(gFe);udr=r(Bkt,"gptj"),Bkt.forEach(t),pdr=r(bDe," \u2014 "),jU=n(bDe,"A",{href:!0});var Ikt=s(jU);_dr=r(Ikt,"GPTJForQuestionAnswering"),Ikt.forEach(t),bdr=r(bDe," (GPT-J model)"),bDe.forEach(t),vdr=i(X),AM=n(X,"LI",{});var vDe=s(AM);hFe=n(vDe,"STRONG",{});var Nkt=s(hFe);Fdr=r(Nkt,"ibert"),Nkt.forEach(t),Tdr=r(vDe," \u2014 "),DU=n(vDe,"A",{href:!0});var qkt=s(DU);Mdr=r(qkt,"IBertForQuestionAnswering"),qkt.forEach(t),Edr=r(vDe," (I-BERT model)"),vDe.forEach(t),Cdr=i(X),LM=n(X,"LI",{});var FDe=s(LM);uFe=n(FDe,"STRONG",{});var jkt=s(uFe);wdr=r(jkt,"layoutlmv2"),jkt.forEach(t),Adr=r(FDe," \u2014 "),GU=n(FDe,"A",{href:!0});var Dkt=s(GU);Ldr=r(Dkt,"LayoutLMv2ForQuestionAnswering"),Dkt.forEach(t),ydr=r(FDe," (LayoutLMv2 model)"),FDe.forEach(t),xdr=i(X),yM=n(X,"LI",{});var TDe=s(yM);pFe=n(TDe,"STRONG",{});var Gkt=s(pFe);$dr=r(Gkt,"layoutlmv3"),Gkt.forEach(t),kdr=r(TDe," \u2014 "),OU=n(TDe,"A",{href:!0});var Okt=s(OU);Sdr=r(Okt,"LayoutLMv3ForQuestionAnswering"),Okt.forEach(t),Rdr=r(TDe," (LayoutLMv3 model)"),TDe.forEach(t),Pdr=i(X),xM=n(X,"LI",{});var MDe=s(xM);_Fe=n(MDe,"STRONG",{});var Vkt=s(_Fe);Bdr=r(Vkt,"led"),Vkt.forEach(t),Idr=r(MDe," \u2014 "),VU=n(MDe,"A",{href:!0});var Xkt=s(VU);Ndr=r(Xkt,"LEDForQuestionAnswering"),Xkt.forEach(t),qdr=r(MDe," (LED model)"),MDe.forEach(t),jdr=i(X),$M=n(X,"LI",{});var EDe=s($M);bFe=n(EDe,"STRONG",{});var zkt=s(bFe);Ddr=r(zkt,"longformer"),zkt.forEach(t),Gdr=r(EDe," \u2014 "),XU=n(EDe,"A",{href:!0});var Wkt=s(XU);Odr=r(Wkt,"LongformerForQuestionAnswering"),Wkt.forEach(t),Vdr=r(EDe," (Longformer model)"),EDe.forEach(t),Xdr=i(X),kM=n(X,"LI",{});var CDe=s(kM);vFe=n(CDe,"STRONG",{});var Qkt=s(vFe);zdr=r(Qkt,"luke"),Qkt.forEach(t),Wdr=r(CDe," \u2014 "),zU=n(CDe,"A",{href:!0});var Ukt=s(zU);Qdr=r(Ukt,"LukeForQuestionAnswering"),Ukt.forEach(t),Udr=r(CDe," (LUKE model)"),CDe.forEach(t),Hdr=i(X),SM=n(X,"LI",{});var wDe=s(SM);FFe=n(wDe,"STRONG",{});var Hkt=s(FFe);Jdr=r(Hkt,"lxmert"),Hkt.forEach(t),Ydr=r(wDe," \u2014 "),WU=n(wDe,"A",{href:!0});var Jkt=s(WU);Kdr=r(Jkt,"LxmertForQuestionAnswering"),Jkt.forEach(t),Zdr=r(wDe," (LXMERT model)"),wDe.forEach(t),ecr=i(X),RM=n(X,"LI",{});var ADe=s(RM);TFe=n(ADe,"STRONG",{});var Ykt=s(TFe);ocr=r(Ykt,"mbart"),Ykt.forEach(t),rcr=r(ADe," \u2014 "),QU=n(ADe,"A",{href:!0});var Kkt=s(QU);tcr=r(Kkt,"MBartForQuestionAnswering"),Kkt.forEach(t),acr=r(ADe," (mBART model)"),ADe.forEach(t),ncr=i(X),PM=n(X,"LI",{});var LDe=s(PM);MFe=n(LDe,"STRONG",{});var Zkt=s(MFe);scr=r(Zkt,"megatron-bert"),Zkt.forEach(t),lcr=r(LDe," \u2014 "),UU=n(LDe,"A",{href:!0});var eSt=s(UU);icr=r(eSt,"MegatronBertForQuestionAnswering"),eSt.forEach(t),dcr=r(LDe," (Megatron-BERT model)"),LDe.forEach(t),ccr=i(X),BM=n(X,"LI",{});var yDe=s(BM);EFe=n(yDe,"STRONG",{});var oSt=s(EFe);mcr=r(oSt,"mobilebert"),oSt.forEach(t),fcr=r(yDe," \u2014 "),HU=n(yDe,"A",{href:!0});var rSt=s(HU);gcr=r(rSt,"MobileBertForQuestionAnswering"),rSt.forEach(t),hcr=r(yDe," (MobileBERT model)"),yDe.forEach(t),ucr=i(X),IM=n(X,"LI",{});var xDe=s(IM);CFe=n(xDe,"STRONG",{});var tSt=s(CFe);pcr=r(tSt,"mpnet"),tSt.forEach(t),_cr=r(xDe," \u2014 "),JU=n(xDe,"A",{href:!0});var aSt=s(JU);bcr=r(aSt,"MPNetForQuestionAnswering"),aSt.forEach(t),vcr=r(xDe," (MPNet model)"),xDe.forEach(t),Fcr=i(X),NM=n(X,"LI",{});var $De=s(NM);wFe=n($De,"STRONG",{});var nSt=s(wFe);Tcr=r(nSt,"mvp"),nSt.forEach(t),Mcr=r($De," \u2014 "),YU=n($De,"A",{href:!0});var sSt=s(YU);Ecr=r(sSt,"MvpForQuestionAnswering"),sSt.forEach(t),Ccr=r($De," (MVP model)"),$De.forEach(t),wcr=i(X),qM=n(X,"LI",{});var kDe=s(qM);AFe=n(kDe,"STRONG",{});var lSt=s(AFe);Acr=r(lSt,"nezha"),lSt.forEach(t),Lcr=r(kDe," \u2014 "),KU=n(kDe,"A",{href:!0});var iSt=s(KU);ycr=r(iSt,"NezhaForQuestionAnswering"),iSt.forEach(t),xcr=r(kDe," (Nezha model)"),kDe.forEach(t),$cr=i(X),jM=n(X,"LI",{});var SDe=s(jM);LFe=n(SDe,"STRONG",{});var dSt=s(LFe);kcr=r(dSt,"nystromformer"),dSt.forEach(t),Scr=r(SDe," \u2014 "),ZU=n(SDe,"A",{href:!0});var cSt=s(ZU);Rcr=r(cSt,"NystromformerForQuestionAnswering"),cSt.forEach(t),Pcr=r(SDe," (Nystr\xF6mformer model)"),SDe.forEach(t),Bcr=i(X),DM=n(X,"LI",{});var RDe=s(DM);yFe=n(RDe,"STRONG",{});var mSt=s(yFe);Icr=r(mSt,"qdqbert"),mSt.forEach(t),Ncr=r(RDe," \u2014 "),eH=n(RDe,"A",{href:!0});var fSt=s(eH);qcr=r(fSt,"QDQBertForQuestionAnswering"),fSt.forEach(t),jcr=r(RDe," (QDQBert model)"),RDe.forEach(t),Dcr=i(X),GM=n(X,"LI",{});var PDe=s(GM);xFe=n(PDe,"STRONG",{});var gSt=s(xFe);Gcr=r(gSt,"reformer"),gSt.forEach(t),Ocr=r(PDe," \u2014 "),oH=n(PDe,"A",{href:!0});var hSt=s(oH);Vcr=r(hSt,"ReformerForQuestionAnswering"),hSt.forEach(t),Xcr=r(PDe," (Reformer model)"),PDe.forEach(t),zcr=i(X),OM=n(X,"LI",{});var BDe=s(OM);$Fe=n(BDe,"STRONG",{});var uSt=s($Fe);Wcr=r(uSt,"rembert"),uSt.forEach(t),Qcr=r(BDe," \u2014 "),rH=n(BDe,"A",{href:!0});var pSt=s(rH);Ucr=r(pSt,"RemBertForQuestionAnswering"),pSt.forEach(t),Hcr=r(BDe," (RemBERT model)"),BDe.forEach(t),Jcr=i(X),VM=n(X,"LI",{});var IDe=s(VM);kFe=n(IDe,"STRONG",{});var _St=s(kFe);Ycr=r(_St,"roberta"),_St.forEach(t),Kcr=r(IDe," \u2014 "),tH=n(IDe,"A",{href:!0});var bSt=s(tH);Zcr=r(bSt,"RobertaForQuestionAnswering"),bSt.forEach(t),emr=r(IDe," (RoBERTa model)"),IDe.forEach(t),omr=i(X),XM=n(X,"LI",{});var NDe=s(XM);SFe=n(NDe,"STRONG",{});var vSt=s(SFe);rmr=r(vSt,"roformer"),vSt.forEach(t),tmr=r(NDe," \u2014 "),aH=n(NDe,"A",{href:!0});var FSt=s(aH);amr=r(FSt,"RoFormerForQuestionAnswering"),FSt.forEach(t),nmr=r(NDe," (RoFormer model)"),NDe.forEach(t),smr=i(X),zM=n(X,"LI",{});var qDe=s(zM);RFe=n(qDe,"STRONG",{});var TSt=s(RFe);lmr=r(TSt,"splinter"),TSt.forEach(t),imr=r(qDe," \u2014 "),nH=n(qDe,"A",{href:!0});var MSt=s(nH);dmr=r(MSt,"SplinterForQuestionAnswering"),MSt.forEach(t),cmr=r(qDe," (Splinter model)"),qDe.forEach(t),mmr=i(X),WM=n(X,"LI",{});var jDe=s(WM);PFe=n(jDe,"STRONG",{});var ESt=s(PFe);fmr=r(ESt,"squeezebert"),ESt.forEach(t),gmr=r(jDe," \u2014 "),sH=n(jDe,"A",{href:!0});var CSt=s(sH);hmr=r(CSt,"SqueezeBertForQuestionAnswering"),CSt.forEach(t),umr=r(jDe," (SqueezeBERT model)"),jDe.forEach(t),pmr=i(X),QM=n(X,"LI",{});var DDe=s(QM);BFe=n(DDe,"STRONG",{});var wSt=s(BFe);_mr=r(wSt,"xlm"),wSt.forEach(t),bmr=r(DDe," \u2014 "),lH=n(DDe,"A",{href:!0});var ASt=s(lH);vmr=r(ASt,"XLMForQuestionAnsweringSimple"),ASt.forEach(t),Fmr=r(DDe," (XLM model)"),DDe.forEach(t),Tmr=i(X),UM=n(X,"LI",{});var GDe=s(UM);IFe=n(GDe,"STRONG",{});var LSt=s(IFe);Mmr=r(LSt,"xlm-roberta"),LSt.forEach(t),Emr=r(GDe," \u2014 "),iH=n(GDe,"A",{href:!0});var ySt=s(iH);Cmr=r(ySt,"XLMRobertaForQuestionAnswering"),ySt.forEach(t),wmr=r(GDe," (XLM-RoBERTa model)"),GDe.forEach(t),Amr=i(X),HM=n(X,"LI",{});var ODe=s(HM);NFe=n(ODe,"STRONG",{});var xSt=s(NFe);Lmr=r(xSt,"xlm-roberta-xl"),xSt.forEach(t),ymr=r(ODe," \u2014 "),dH=n(ODe,"A",{href:!0});var $St=s(dH);xmr=r($St,"XLMRobertaXLForQuestionAnswering"),$St.forEach(t),$mr=r(ODe," (XLM-RoBERTa-XL model)"),ODe.forEach(t),kmr=i(X),JM=n(X,"LI",{});var VDe=s(JM);qFe=n(VDe,"STRONG",{});var kSt=s(qFe);Smr=r(kSt,"xlnet"),kSt.forEach(t),Rmr=r(VDe," \u2014 "),cH=n(VDe,"A",{href:!0});var SSt=s(cH);Pmr=r(SSt,"XLNetForQuestionAnsweringSimple"),SSt.forEach(t),Bmr=r(VDe," (XLNet model)"),VDe.forEach(t),Imr=i(X),YM=n(X,"LI",{});var XDe=s(YM);jFe=n(XDe,"STRONG",{});var RSt=s(jFe);Nmr=r(RSt,"yoso"),RSt.forEach(t),qmr=r(XDe," \u2014 "),mH=n(XDe,"A",{href:!0});var PSt=s(mH);jmr=r(PSt,"YosoForQuestionAnswering"),PSt.forEach(t),Dmr=r(XDe," (YOSO model)"),XDe.forEach(t),X.forEach(t),Gmr=i(Ea),KM=n(Ea,"P",{});var zDe=s(KM);Omr=r(zDe,"The model is set in evaluation mode by default using "),DFe=n(zDe,"CODE",{});var BSt=s(DFe);Vmr=r(BSt,"model.eval()"),BSt.forEach(t),Xmr=r(zDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),GFe=n(zDe,"CODE",{});var ISt=s(GFe);zmr=r(ISt,"model.train()"),ISt.forEach(t),zDe.forEach(t),Wmr=i(Ea),T(ZM.$$.fragment,Ea),Ea.forEach(t),El.forEach(t),rHe=i(m),Sd=n(m,"H2",{class:!0});var fYe=s(Sd);eE=n(fYe,"A",{id:!0,class:!0,href:!0});var NSt=s(eE);OFe=n(NSt,"SPAN",{});var qSt=s(OFe);T(z9.$$.fragment,qSt),qSt.forEach(t),NSt.forEach(t),Qmr=i(fYe),VFe=n(fYe,"SPAN",{});var jSt=s(VFe);Umr=r(jSt,"AutoModelForTableQuestionAnswering"),jSt.forEach(t),fYe.forEach(t),tHe=i(m),Vo=n(m,"DIV",{class:!0});var Cl=s(Vo);T(W9.$$.fragment,Cl),Hmr=i(Cl),Rd=n(Cl,"P",{});var Cne=s(Rd);Jmr=r(Cne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),fH=n(Cne,"A",{href:!0});var DSt=s(fH);Ymr=r(DSt,"from_pretrained()"),DSt.forEach(t),Kmr=r(Cne," class method or the "),gH=n(Cne,"A",{href:!0});var GSt=s(gH);Zmr=r(GSt,"from_config()"),GSt.forEach(t),efr=r(Cne,` class
method.`),Cne.forEach(t),ofr=i(Cl),Q9=n(Cl,"P",{});var gYe=s(Q9);rfr=r(gYe,"This class cannot be instantiated directly using "),XFe=n(gYe,"CODE",{});var OSt=s(XFe);tfr=r(OSt,"__init__()"),OSt.forEach(t),afr=r(gYe," (throws an error)."),gYe.forEach(t),nfr=i(Cl),Mt=n(Cl,"DIV",{class:!0});var OL=s(Mt);T(U9.$$.fragment,OL),sfr=i(OL),zFe=n(OL,"P",{});var VSt=s(zFe);lfr=r(VSt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),VSt.forEach(t),ifr=i(OL),Pd=n(OL,"P",{});var wne=s(Pd);dfr=r(wne,`Note:
Loading a model from its configuration file does `),WFe=n(wne,"STRONG",{});var XSt=s(WFe);cfr=r(XSt,"not"),XSt.forEach(t),mfr=r(wne,` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=n(wne,"A",{href:!0});var zSt=s(hH);ffr=r(zSt,"from_pretrained()"),zSt.forEach(t),gfr=r(wne," to load the model weights."),wne.forEach(t),hfr=i(OL),T(oE.$$.fragment,OL),OL.forEach(t),ufr=i(Cl),io=n(Cl,"DIV",{class:!0});var Ca=s(io);T(H9.$$.fragment,Ca),pfr=i(Ca),QFe=n(Ca,"P",{});var WSt=s(QFe);_fr=r(WSt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),WSt.forEach(t),bfr=i(Ca),Za=n(Ca,"P",{});var VL=s(Za);vfr=r(VL,"The model class to instantiate is selected based on the "),UFe=n(VL,"CODE",{});var QSt=s(UFe);Ffr=r(QSt,"model_type"),QSt.forEach(t),Tfr=r(VL,` property of the config object (either
passed as an argument or loaded from `),HFe=n(VL,"CODE",{});var USt=s(HFe);Mfr=r(USt,"pretrained_model_name_or_path"),USt.forEach(t),Efr=r(VL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JFe=n(VL,"CODE",{});var HSt=s(JFe);Cfr=r(HSt,"pretrained_model_name_or_path"),HSt.forEach(t),wfr=r(VL,":"),VL.forEach(t),Afr=i(Ca),YFe=n(Ca,"UL",{});var JSt=s(YFe);rE=n(JSt,"LI",{});var WDe=s(rE);KFe=n(WDe,"STRONG",{});var YSt=s(KFe);Lfr=r(YSt,"tapas"),YSt.forEach(t),yfr=r(WDe," \u2014 "),uH=n(WDe,"A",{href:!0});var KSt=s(uH);xfr=r(KSt,"TapasForQuestionAnswering"),KSt.forEach(t),$fr=r(WDe," (TAPAS model)"),WDe.forEach(t),JSt.forEach(t),kfr=i(Ca),tE=n(Ca,"P",{});var QDe=s(tE);Sfr=r(QDe,"The model is set in evaluation mode by default using "),ZFe=n(QDe,"CODE",{});var ZSt=s(ZFe);Rfr=r(ZSt,"model.eval()"),ZSt.forEach(t),Pfr=r(QDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eTe=n(QDe,"CODE",{});var eRt=s(eTe);Bfr=r(eRt,"model.train()"),eRt.forEach(t),QDe.forEach(t),Ifr=i(Ca),T(aE.$$.fragment,Ca),Ca.forEach(t),Cl.forEach(t),aHe=i(m),Bd=n(m,"H2",{class:!0});var hYe=s(Bd);nE=n(hYe,"A",{id:!0,class:!0,href:!0});var oRt=s(nE);oTe=n(oRt,"SPAN",{});var rRt=s(oTe);T(J9.$$.fragment,rRt),rRt.forEach(t),oRt.forEach(t),Nfr=i(hYe),rTe=n(hYe,"SPAN",{});var tRt=s(rTe);qfr=r(tRt,"AutoModelForImageClassification"),tRt.forEach(t),hYe.forEach(t),nHe=i(m),Xo=n(m,"DIV",{class:!0});var wl=s(Xo);T(Y9.$$.fragment,wl),jfr=i(wl),Id=n(wl,"P",{});var Ane=s(Id);Dfr=r(Ane,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pH=n(Ane,"A",{href:!0});var aRt=s(pH);Gfr=r(aRt,"from_pretrained()"),aRt.forEach(t),Ofr=r(Ane," class method or the "),_H=n(Ane,"A",{href:!0});var nRt=s(_H);Vfr=r(nRt,"from_config()"),nRt.forEach(t),Xfr=r(Ane,` class
method.`),Ane.forEach(t),zfr=i(wl),K9=n(wl,"P",{});var uYe=s(K9);Wfr=r(uYe,"This class cannot be instantiated directly using "),tTe=n(uYe,"CODE",{});var sRt=s(tTe);Qfr=r(sRt,"__init__()"),sRt.forEach(t),Ufr=r(uYe," (throws an error)."),uYe.forEach(t),Hfr=i(wl),Et=n(wl,"DIV",{class:!0});var XL=s(Et);T(Z9.$$.fragment,XL),Jfr=i(XL),aTe=n(XL,"P",{});var lRt=s(aTe);Yfr=r(lRt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),lRt.forEach(t),Kfr=i(XL),Nd=n(XL,"P",{});var Lne=s(Nd);Zfr=r(Lne,`Note:
Loading a model from its configuration file does `),nTe=n(Lne,"STRONG",{});var iRt=s(nTe);egr=r(iRt,"not"),iRt.forEach(t),ogr=r(Lne,` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=n(Lne,"A",{href:!0});var dRt=s(bH);rgr=r(dRt,"from_pretrained()"),dRt.forEach(t),tgr=r(Lne," to load the model weights."),Lne.forEach(t),agr=i(XL),T(sE.$$.fragment,XL),XL.forEach(t),ngr=i(wl),co=n(wl,"DIV",{class:!0});var wa=s(co);T(ex.$$.fragment,wa),sgr=i(wa),sTe=n(wa,"P",{});var cRt=s(sTe);lgr=r(cRt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),cRt.forEach(t),igr=i(wa),en=n(wa,"P",{});var zL=s(en);dgr=r(zL,"The model class to instantiate is selected based on the "),lTe=n(zL,"CODE",{});var mRt=s(lTe);cgr=r(mRt,"model_type"),mRt.forEach(t),mgr=r(zL,` property of the config object (either
passed as an argument or loaded from `),iTe=n(zL,"CODE",{});var fRt=s(iTe);fgr=r(fRt,"pretrained_model_name_or_path"),fRt.forEach(t),ggr=r(zL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dTe=n(zL,"CODE",{});var gRt=s(dTe);hgr=r(gRt,"pretrained_model_name_or_path"),gRt.forEach(t),ugr=r(zL,":"),zL.forEach(t),pgr=i(wa),be=n(wa,"UL",{});var Fe=s(be);lE=n(Fe,"LI",{});var UDe=s(lE);cTe=n(UDe,"STRONG",{});var hRt=s(cTe);_gr=r(hRt,"beit"),hRt.forEach(t),bgr=r(UDe," \u2014 "),vH=n(UDe,"A",{href:!0});var uRt=s(vH);vgr=r(uRt,"BeitForImageClassification"),uRt.forEach(t),Fgr=r(UDe," (BEiT model)"),UDe.forEach(t),Tgr=i(Fe),iE=n(Fe,"LI",{});var HDe=s(iE);mTe=n(HDe,"STRONG",{});var pRt=s(mTe);Mgr=r(pRt,"convnext"),pRt.forEach(t),Egr=r(HDe," \u2014 "),FH=n(HDe,"A",{href:!0});var _Rt=s(FH);Cgr=r(_Rt,"ConvNextForImageClassification"),_Rt.forEach(t),wgr=r(HDe," (ConvNeXT model)"),HDe.forEach(t),Agr=i(Fe),dE=n(Fe,"LI",{});var JDe=s(dE);fTe=n(JDe,"STRONG",{});var bRt=s(fTe);Lgr=r(bRt,"cvt"),bRt.forEach(t),ygr=r(JDe," \u2014 "),TH=n(JDe,"A",{href:!0});var vRt=s(TH);xgr=r(vRt,"CvtForImageClassification"),vRt.forEach(t),$gr=r(JDe," (CvT model)"),JDe.forEach(t),kgr=i(Fe),cE=n(Fe,"LI",{});var YDe=s(cE);gTe=n(YDe,"STRONG",{});var FRt=s(gTe);Sgr=r(FRt,"data2vec-vision"),FRt.forEach(t),Rgr=r(YDe," \u2014 "),MH=n(YDe,"A",{href:!0});var TRt=s(MH);Pgr=r(TRt,"Data2VecVisionForImageClassification"),TRt.forEach(t),Bgr=r(YDe," (Data2VecVision model)"),YDe.forEach(t),Igr=i(Fe),sl=n(Fe,"LI",{});var iP=s(sl);hTe=n(iP,"STRONG",{});var MRt=s(hTe);Ngr=r(MRt,"deit"),MRt.forEach(t),qgr=r(iP," \u2014 "),EH=n(iP,"A",{href:!0});var ERt=s(EH);jgr=r(ERt,"DeiTForImageClassification"),ERt.forEach(t),Dgr=r(iP," or "),CH=n(iP,"A",{href:!0});var CRt=s(CH);Ggr=r(CRt,"DeiTForImageClassificationWithTeacher"),CRt.forEach(t),Ogr=r(iP," (DeiT model)"),iP.forEach(t),Vgr=i(Fe),mE=n(Fe,"LI",{});var KDe=s(mE);uTe=n(KDe,"STRONG",{});var wRt=s(uTe);Xgr=r(wRt,"imagegpt"),wRt.forEach(t),zgr=r(KDe," \u2014 "),wH=n(KDe,"A",{href:!0});var ARt=s(wH);Wgr=r(ARt,"ImageGPTForImageClassification"),ARt.forEach(t),Qgr=r(KDe," (ImageGPT model)"),KDe.forEach(t),Ugr=i(Fe),ll=n(Fe,"LI",{});var dP=s(ll);pTe=n(dP,"STRONG",{});var LRt=s(pTe);Hgr=r(LRt,"levit"),LRt.forEach(t),Jgr=r(dP," \u2014 "),AH=n(dP,"A",{href:!0});var yRt=s(AH);Ygr=r(yRt,"LevitForImageClassification"),yRt.forEach(t),Kgr=r(dP," or "),LH=n(dP,"A",{href:!0});var xRt=s(LH);Zgr=r(xRt,"LevitForImageClassificationWithTeacher"),xRt.forEach(t),ehr=r(dP," (LeViT model)"),dP.forEach(t),ohr=i(Fe),fE=n(Fe,"LI",{});var ZDe=s(fE);_Te=n(ZDe,"STRONG",{});var $Rt=s(_Te);rhr=r($Rt,"mobilevit"),$Rt.forEach(t),thr=r(ZDe," \u2014 "),yH=n(ZDe,"A",{href:!0});var kRt=s(yH);ahr=r(kRt,"MobileViTForImageClassification"),kRt.forEach(t),nhr=r(ZDe," (MobileViT model)"),ZDe.forEach(t),shr=i(Fe),Ct=n(Fe,"LI",{});var Zm=s(Ct);bTe=n(Zm,"STRONG",{});var SRt=s(bTe);lhr=r(SRt,"perceiver"),SRt.forEach(t),ihr=r(Zm," \u2014 "),xH=n(Zm,"A",{href:!0});var RRt=s(xH);dhr=r(RRt,"PerceiverForImageClassificationLearned"),RRt.forEach(t),chr=r(Zm," or "),$H=n(Zm,"A",{href:!0});var PRt=s($H);mhr=r(PRt,"PerceiverForImageClassificationFourier"),PRt.forEach(t),fhr=r(Zm," or "),kH=n(Zm,"A",{href:!0});var BRt=s(kH);ghr=r(BRt,"PerceiverForImageClassificationConvProcessing"),BRt.forEach(t),hhr=r(Zm," (Perceiver model)"),Zm.forEach(t),uhr=i(Fe),gE=n(Fe,"LI",{});var eGe=s(gE);vTe=n(eGe,"STRONG",{});var IRt=s(vTe);phr=r(IRt,"poolformer"),IRt.forEach(t),_hr=r(eGe," \u2014 "),SH=n(eGe,"A",{href:!0});var NRt=s(SH);bhr=r(NRt,"PoolFormerForImageClassification"),NRt.forEach(t),vhr=r(eGe," (PoolFormer model)"),eGe.forEach(t),Fhr=i(Fe),hE=n(Fe,"LI",{});var oGe=s(hE);FTe=n(oGe,"STRONG",{});var qRt=s(FTe);Thr=r(qRt,"regnet"),qRt.forEach(t),Mhr=r(oGe," \u2014 "),RH=n(oGe,"A",{href:!0});var jRt=s(RH);Ehr=r(jRt,"RegNetForImageClassification"),jRt.forEach(t),Chr=r(oGe," (RegNet model)"),oGe.forEach(t),whr=i(Fe),uE=n(Fe,"LI",{});var rGe=s(uE);TTe=n(rGe,"STRONG",{});var DRt=s(TTe);Ahr=r(DRt,"resnet"),DRt.forEach(t),Lhr=r(rGe," \u2014 "),PH=n(rGe,"A",{href:!0});var GRt=s(PH);yhr=r(GRt,"ResNetForImageClassification"),GRt.forEach(t),xhr=r(rGe," (ResNet model)"),rGe.forEach(t),$hr=i(Fe),pE=n(Fe,"LI",{});var tGe=s(pE);MTe=n(tGe,"STRONG",{});var ORt=s(MTe);khr=r(ORt,"segformer"),ORt.forEach(t),Shr=r(tGe," \u2014 "),BH=n(tGe,"A",{href:!0});var VRt=s(BH);Rhr=r(VRt,"SegformerForImageClassification"),VRt.forEach(t),Phr=r(tGe," (SegFormer model)"),tGe.forEach(t),Bhr=i(Fe),_E=n(Fe,"LI",{});var aGe=s(_E);ETe=n(aGe,"STRONG",{});var XRt=s(ETe);Ihr=r(XRt,"swin"),XRt.forEach(t),Nhr=r(aGe," \u2014 "),IH=n(aGe,"A",{href:!0});var zRt=s(IH);qhr=r(zRt,"SwinForImageClassification"),zRt.forEach(t),jhr=r(aGe," (Swin Transformer model)"),aGe.forEach(t),Dhr=i(Fe),bE=n(Fe,"LI",{});var nGe=s(bE);CTe=n(nGe,"STRONG",{});var WRt=s(CTe);Ghr=r(WRt,"swinv2"),WRt.forEach(t),Ohr=r(nGe," \u2014 "),NH=n(nGe,"A",{href:!0});var QRt=s(NH);Vhr=r(QRt,"Swinv2ForImageClassification"),QRt.forEach(t),Xhr=r(nGe," (Swin Transformer V2 model)"),nGe.forEach(t),zhr=i(Fe),vE=n(Fe,"LI",{});var sGe=s(vE);wTe=n(sGe,"STRONG",{});var URt=s(wTe);Whr=r(URt,"van"),URt.forEach(t),Qhr=r(sGe," \u2014 "),qH=n(sGe,"A",{href:!0});var HRt=s(qH);Uhr=r(HRt,"VanForImageClassification"),HRt.forEach(t),Hhr=r(sGe," (VAN model)"),sGe.forEach(t),Jhr=i(Fe),FE=n(Fe,"LI",{});var lGe=s(FE);ATe=n(lGe,"STRONG",{});var JRt=s(ATe);Yhr=r(JRt,"vit"),JRt.forEach(t),Khr=r(lGe," \u2014 "),jH=n(lGe,"A",{href:!0});var YRt=s(jH);Zhr=r(YRt,"ViTForImageClassification"),YRt.forEach(t),eur=r(lGe," (ViT model)"),lGe.forEach(t),Fe.forEach(t),our=i(wa),TE=n(wa,"P",{});var iGe=s(TE);rur=r(iGe,"The model is set in evaluation mode by default using "),LTe=n(iGe,"CODE",{});var KRt=s(LTe);tur=r(KRt,"model.eval()"),KRt.forEach(t),aur=r(iGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yTe=n(iGe,"CODE",{});var ZRt=s(yTe);nur=r(ZRt,"model.train()"),ZRt.forEach(t),iGe.forEach(t),sur=i(wa),T(ME.$$.fragment,wa),wa.forEach(t),wl.forEach(t),sHe=i(m),qd=n(m,"H2",{class:!0});var pYe=s(qd);EE=n(pYe,"A",{id:!0,class:!0,href:!0});var ePt=s(EE);xTe=n(ePt,"SPAN",{});var oPt=s(xTe);T(ox.$$.fragment,oPt),oPt.forEach(t),ePt.forEach(t),lur=i(pYe),$Te=n(pYe,"SPAN",{});var rPt=s($Te);iur=r(rPt,"AutoModelForVideoClassification"),rPt.forEach(t),pYe.forEach(t),lHe=i(m),zo=n(m,"DIV",{class:!0});var Al=s(zo);T(rx.$$.fragment,Al),dur=i(Al),jd=n(Al,"P",{});var yne=s(jd);cur=r(yne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),DH=n(yne,"A",{href:!0});var tPt=s(DH);mur=r(tPt,"from_pretrained()"),tPt.forEach(t),fur=r(yne," class method or the "),GH=n(yne,"A",{href:!0});var aPt=s(GH);gur=r(aPt,"from_config()"),aPt.forEach(t),hur=r(yne,` class
method.`),yne.forEach(t),uur=i(Al),tx=n(Al,"P",{});var _Ye=s(tx);pur=r(_Ye,"This class cannot be instantiated directly using "),kTe=n(_Ye,"CODE",{});var nPt=s(kTe);_ur=r(nPt,"__init__()"),nPt.forEach(t),bur=r(_Ye," (throws an error)."),_Ye.forEach(t),vur=i(Al),wt=n(Al,"DIV",{class:!0});var WL=s(wt);T(ax.$$.fragment,WL),Fur=i(WL),STe=n(WL,"P",{});var sPt=s(STe);Tur=r(sPt,"Instantiates one of the model classes of the library (with a video classification head) from a configuration."),sPt.forEach(t),Mur=i(WL),Dd=n(WL,"P",{});var xne=s(Dd);Eur=r(xne,`Note:
Loading a model from its configuration file does `),RTe=n(xne,"STRONG",{});var lPt=s(RTe);Cur=r(lPt,"not"),lPt.forEach(t),wur=r(xne,` load the model weights. It only affects the
model\u2019s configuration. Use `),OH=n(xne,"A",{href:!0});var iPt=s(OH);Aur=r(iPt,"from_pretrained()"),iPt.forEach(t),Lur=r(xne," to load the model weights."),xne.forEach(t),yur=i(WL),T(CE.$$.fragment,WL),WL.forEach(t),xur=i(Al),mo=n(Al,"DIV",{class:!0});var Aa=s(mo);T(nx.$$.fragment,Aa),$ur=i(Aa),PTe=n(Aa,"P",{});var dPt=s(PTe);kur=r(dPt,"Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),dPt.forEach(t),Sur=i(Aa),on=n(Aa,"P",{});var QL=s(on);Rur=r(QL,"The model class to instantiate is selected based on the "),BTe=n(QL,"CODE",{});var cPt=s(BTe);Pur=r(cPt,"model_type"),cPt.forEach(t),Bur=r(QL,` property of the config object (either
passed as an argument or loaded from `),ITe=n(QL,"CODE",{});var mPt=s(ITe);Iur=r(mPt,"pretrained_model_name_or_path"),mPt.forEach(t),Nur=r(QL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NTe=n(QL,"CODE",{});var fPt=s(NTe);qur=r(fPt,"pretrained_model_name_or_path"),fPt.forEach(t),jur=r(QL,":"),QL.forEach(t),Dur=i(Aa),qTe=n(Aa,"UL",{});var gPt=s(qTe);wE=n(gPt,"LI",{});var dGe=s(wE);jTe=n(dGe,"STRONG",{});var hPt=s(jTe);Gur=r(hPt,"videomae"),hPt.forEach(t),Our=r(dGe," \u2014 "),VH=n(dGe,"A",{href:!0});var uPt=s(VH);Vur=r(uPt,"VideoMAEForVideoClassification"),uPt.forEach(t),Xur=r(dGe," (VideoMAE model)"),dGe.forEach(t),gPt.forEach(t),zur=i(Aa),AE=n(Aa,"P",{});var cGe=s(AE);Wur=r(cGe,"The model is set in evaluation mode by default using "),DTe=n(cGe,"CODE",{});var pPt=s(DTe);Qur=r(pPt,"model.eval()"),pPt.forEach(t),Uur=r(cGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),GTe=n(cGe,"CODE",{});var _Pt=s(GTe);Hur=r(_Pt,"model.train()"),_Pt.forEach(t),cGe.forEach(t),Jur=i(Aa),T(LE.$$.fragment,Aa),Aa.forEach(t),Al.forEach(t),iHe=i(m),Gd=n(m,"H2",{class:!0});var bYe=s(Gd);yE=n(bYe,"A",{id:!0,class:!0,href:!0});var bPt=s(yE);OTe=n(bPt,"SPAN",{});var vPt=s(OTe);T(sx.$$.fragment,vPt),vPt.forEach(t),bPt.forEach(t),Yur=i(bYe),VTe=n(bYe,"SPAN",{});var FPt=s(VTe);Kur=r(FPt,"AutoModelForVision2Seq"),FPt.forEach(t),bYe.forEach(t),dHe=i(m),Wo=n(m,"DIV",{class:!0});var Ll=s(Wo);T(lx.$$.fragment,Ll),Zur=i(Ll),Od=n(Ll,"P",{});var $ne=s(Od);epr=r($ne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),XH=n($ne,"A",{href:!0});var TPt=s(XH);opr=r(TPt,"from_pretrained()"),TPt.forEach(t),rpr=r($ne," class method or the "),zH=n($ne,"A",{href:!0});var MPt=s(zH);tpr=r(MPt,"from_config()"),MPt.forEach(t),apr=r($ne,` class
method.`),$ne.forEach(t),npr=i(Ll),ix=n(Ll,"P",{});var vYe=s(ix);spr=r(vYe,"This class cannot be instantiated directly using "),XTe=n(vYe,"CODE",{});var EPt=s(XTe);lpr=r(EPt,"__init__()"),EPt.forEach(t),ipr=r(vYe," (throws an error)."),vYe.forEach(t),dpr=i(Ll),At=n(Ll,"DIV",{class:!0});var UL=s(At);T(dx.$$.fragment,UL),cpr=i(UL),zTe=n(UL,"P",{});var CPt=s(zTe);mpr=r(CPt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),CPt.forEach(t),fpr=i(UL),Vd=n(UL,"P",{});var kne=s(Vd);gpr=r(kne,`Note:
Loading a model from its configuration file does `),WTe=n(kne,"STRONG",{});var wPt=s(WTe);hpr=r(wPt,"not"),wPt.forEach(t),upr=r(kne,` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=n(kne,"A",{href:!0});var APt=s(WH);ppr=r(APt,"from_pretrained()"),APt.forEach(t),_pr=r(kne," to load the model weights."),kne.forEach(t),bpr=i(UL),T(xE.$$.fragment,UL),UL.forEach(t),vpr=i(Ll),fo=n(Ll,"DIV",{class:!0});var La=s(fo);T(cx.$$.fragment,La),Fpr=i(La),QTe=n(La,"P",{});var LPt=s(QTe);Tpr=r(LPt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),LPt.forEach(t),Mpr=i(La),rn=n(La,"P",{});var HL=s(rn);Epr=r(HL,"The model class to instantiate is selected based on the "),UTe=n(HL,"CODE",{});var yPt=s(UTe);Cpr=r(yPt,"model_type"),yPt.forEach(t),wpr=r(HL,` property of the config object (either
passed as an argument or loaded from `),HTe=n(HL,"CODE",{});var xPt=s(HTe);Apr=r(xPt,"pretrained_model_name_or_path"),xPt.forEach(t),Lpr=r(HL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JTe=n(HL,"CODE",{});var $Pt=s(JTe);ypr=r($Pt,"pretrained_model_name_or_path"),$Pt.forEach(t),xpr=r(HL,":"),HL.forEach(t),$pr=i(La),YTe=n(La,"UL",{});var kPt=s(YTe);$E=n(kPt,"LI",{});var mGe=s($E);KTe=n(mGe,"STRONG",{});var SPt=s(KTe);kpr=r(SPt,"vision-encoder-decoder"),SPt.forEach(t),Spr=r(mGe," \u2014 "),QH=n(mGe,"A",{href:!0});var RPt=s(QH);Rpr=r(RPt,"VisionEncoderDecoderModel"),RPt.forEach(t),Ppr=r(mGe," (Vision Encoder decoder model)"),mGe.forEach(t),kPt.forEach(t),Bpr=i(La),kE=n(La,"P",{});var fGe=s(kE);Ipr=r(fGe,"The model is set in evaluation mode by default using "),ZTe=n(fGe,"CODE",{});var PPt=s(ZTe);Npr=r(PPt,"model.eval()"),PPt.forEach(t),qpr=r(fGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eMe=n(fGe,"CODE",{});var BPt=s(eMe);jpr=r(BPt,"model.train()"),BPt.forEach(t),fGe.forEach(t),Dpr=i(La),T(SE.$$.fragment,La),La.forEach(t),Ll.forEach(t),cHe=i(m),Xd=n(m,"H2",{class:!0});var FYe=s(Xd);RE=n(FYe,"A",{id:!0,class:!0,href:!0});var IPt=s(RE);oMe=n(IPt,"SPAN",{});var NPt=s(oMe);T(mx.$$.fragment,NPt),NPt.forEach(t),IPt.forEach(t),Gpr=i(FYe),rMe=n(FYe,"SPAN",{});var qPt=s(rMe);Opr=r(qPt,"AutoModelForVisualQuestionAnswering"),qPt.forEach(t),FYe.forEach(t),mHe=i(m),Qo=n(m,"DIV",{class:!0});var yl=s(Qo);T(fx.$$.fragment,yl),Vpr=i(yl),zd=n(yl,"P",{});var Sne=s(zd);Xpr=r(Sne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),UH=n(Sne,"A",{href:!0});var jPt=s(UH);zpr=r(jPt,"from_pretrained()"),jPt.forEach(t),Wpr=r(Sne," class method or the "),HH=n(Sne,"A",{href:!0});var DPt=s(HH);Qpr=r(DPt,"from_config()"),DPt.forEach(t),Upr=r(Sne,` class
method.`),Sne.forEach(t),Hpr=i(yl),gx=n(yl,"P",{});var TYe=s(gx);Jpr=r(TYe,"This class cannot be instantiated directly using "),tMe=n(TYe,"CODE",{});var GPt=s(tMe);Ypr=r(GPt,"__init__()"),GPt.forEach(t),Kpr=r(TYe," (throws an error)."),TYe.forEach(t),Zpr=i(yl),Lt=n(yl,"DIV",{class:!0});var JL=s(Lt);T(hx.$$.fragment,JL),e_r=i(JL),aMe=n(JL,"P",{});var OPt=s(aMe);o_r=r(OPt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),OPt.forEach(t),r_r=i(JL),Wd=n(JL,"P",{});var Rne=s(Wd);t_r=r(Rne,`Note:
Loading a model from its configuration file does `),nMe=n(Rne,"STRONG",{});var VPt=s(nMe);a_r=r(VPt,"not"),VPt.forEach(t),n_r=r(Rne,` load the model weights. It only affects the
model\u2019s configuration. Use `),JH=n(Rne,"A",{href:!0});var XPt=s(JH);s_r=r(XPt,"from_pretrained()"),XPt.forEach(t),l_r=r(Rne," to load the model weights."),Rne.forEach(t),i_r=i(JL),T(PE.$$.fragment,JL),JL.forEach(t),d_r=i(yl),go=n(yl,"DIV",{class:!0});var ya=s(go);T(ux.$$.fragment,ya),c_r=i(ya),sMe=n(ya,"P",{});var zPt=s(sMe);m_r=r(zPt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),zPt.forEach(t),f_r=i(ya),tn=n(ya,"P",{});var YL=s(tn);g_r=r(YL,"The model class to instantiate is selected based on the "),lMe=n(YL,"CODE",{});var WPt=s(lMe);h_r=r(WPt,"model_type"),WPt.forEach(t),u_r=r(YL,` property of the config object (either
passed as an argument or loaded from `),iMe=n(YL,"CODE",{});var QPt=s(iMe);p_r=r(QPt,"pretrained_model_name_or_path"),QPt.forEach(t),__r=r(YL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dMe=n(YL,"CODE",{});var UPt=s(dMe);b_r=r(UPt,"pretrained_model_name_or_path"),UPt.forEach(t),v_r=r(YL,":"),YL.forEach(t),F_r=i(ya),cMe=n(ya,"UL",{});var HPt=s(cMe);BE=n(HPt,"LI",{});var gGe=s(BE);mMe=n(gGe,"STRONG",{});var JPt=s(mMe);T_r=r(JPt,"vilt"),JPt.forEach(t),M_r=r(gGe," \u2014 "),YH=n(gGe,"A",{href:!0});var YPt=s(YH);E_r=r(YPt,"ViltForQuestionAnswering"),YPt.forEach(t),C_r=r(gGe," (ViLT model)"),gGe.forEach(t),HPt.forEach(t),w_r=i(ya),IE=n(ya,"P",{});var hGe=s(IE);A_r=r(hGe,"The model is set in evaluation mode by default using "),fMe=n(hGe,"CODE",{});var KPt=s(fMe);L_r=r(KPt,"model.eval()"),KPt.forEach(t),y_r=r(hGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gMe=n(hGe,"CODE",{});var ZPt=s(gMe);x_r=r(ZPt,"model.train()"),ZPt.forEach(t),hGe.forEach(t),$_r=i(ya),T(NE.$$.fragment,ya),ya.forEach(t),yl.forEach(t),fHe=i(m),Qd=n(m,"H2",{class:!0});var MYe=s(Qd);qE=n(MYe,"A",{id:!0,class:!0,href:!0});var eBt=s(qE);hMe=n(eBt,"SPAN",{});var oBt=s(hMe);T(px.$$.fragment,oBt),oBt.forEach(t),eBt.forEach(t),k_r=i(MYe),uMe=n(MYe,"SPAN",{});var rBt=s(uMe);S_r=r(rBt,"AutoModelForAudioClassification"),rBt.forEach(t),MYe.forEach(t),gHe=i(m),Uo=n(m,"DIV",{class:!0});var xl=s(Uo);T(_x.$$.fragment,xl),R_r=i(xl),Ud=n(xl,"P",{});var Pne=s(Ud);P_r=r(Pne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),KH=n(Pne,"A",{href:!0});var tBt=s(KH);B_r=r(tBt,"from_pretrained()"),tBt.forEach(t),I_r=r(Pne," class method or the "),ZH=n(Pne,"A",{href:!0});var aBt=s(ZH);N_r=r(aBt,"from_config()"),aBt.forEach(t),q_r=r(Pne,` class
method.`),Pne.forEach(t),j_r=i(xl),bx=n(xl,"P",{});var EYe=s(bx);D_r=r(EYe,"This class cannot be instantiated directly using "),pMe=n(EYe,"CODE",{});var nBt=s(pMe);G_r=r(nBt,"__init__()"),nBt.forEach(t),O_r=r(EYe," (throws an error)."),EYe.forEach(t),V_r=i(xl),yt=n(xl,"DIV",{class:!0});var KL=s(yt);T(vx.$$.fragment,KL),X_r=i(KL),_Me=n(KL,"P",{});var sBt=s(_Me);z_r=r(sBt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),sBt.forEach(t),W_r=i(KL),Hd=n(KL,"P",{});var Bne=s(Hd);Q_r=r(Bne,`Note:
Loading a model from its configuration file does `),bMe=n(Bne,"STRONG",{});var lBt=s(bMe);U_r=r(lBt,"not"),lBt.forEach(t),H_r=r(Bne,` load the model weights. It only affects the
model\u2019s configuration. Use `),eJ=n(Bne,"A",{href:!0});var iBt=s(eJ);J_r=r(iBt,"from_pretrained()"),iBt.forEach(t),Y_r=r(Bne," to load the model weights."),Bne.forEach(t),K_r=i(KL),T(jE.$$.fragment,KL),KL.forEach(t),Z_r=i(xl),ho=n(xl,"DIV",{class:!0});var xa=s(ho);T(Fx.$$.fragment,xa),e2r=i(xa),vMe=n(xa,"P",{});var dBt=s(vMe);o2r=r(dBt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),dBt.forEach(t),r2r=i(xa),an=n(xa,"P",{});var ZL=s(an);t2r=r(ZL,"The model class to instantiate is selected based on the "),FMe=n(ZL,"CODE",{});var cBt=s(FMe);a2r=r(cBt,"model_type"),cBt.forEach(t),n2r=r(ZL,` property of the config object (either
passed as an argument or loaded from `),TMe=n(ZL,"CODE",{});var mBt=s(TMe);s2r=r(mBt,"pretrained_model_name_or_path"),mBt.forEach(t),l2r=r(ZL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MMe=n(ZL,"CODE",{});var fBt=s(MMe);i2r=r(fBt,"pretrained_model_name_or_path"),fBt.forEach(t),d2r=r(ZL,":"),ZL.forEach(t),c2r=i(xa),Pe=n(xa,"UL",{});var We=s(Pe);DE=n(We,"LI",{});var uGe=s(DE);EMe=n(uGe,"STRONG",{});var gBt=s(EMe);m2r=r(gBt,"data2vec-audio"),gBt.forEach(t),f2r=r(uGe," \u2014 "),oJ=n(uGe,"A",{href:!0});var hBt=s(oJ);g2r=r(hBt,"Data2VecAudioForSequenceClassification"),hBt.forEach(t),h2r=r(uGe," (Data2VecAudio model)"),uGe.forEach(t),u2r=i(We),GE=n(We,"LI",{});var pGe=s(GE);CMe=n(pGe,"STRONG",{});var uBt=s(CMe);p2r=r(uBt,"hubert"),uBt.forEach(t),_2r=r(pGe," \u2014 "),rJ=n(pGe,"A",{href:!0});var pBt=s(rJ);b2r=r(pBt,"HubertForSequenceClassification"),pBt.forEach(t),v2r=r(pGe," (Hubert model)"),pGe.forEach(t),F2r=i(We),OE=n(We,"LI",{});var _Ge=s(OE);wMe=n(_Ge,"STRONG",{});var _Bt=s(wMe);T2r=r(_Bt,"sew"),_Bt.forEach(t),M2r=r(_Ge," \u2014 "),tJ=n(_Ge,"A",{href:!0});var bBt=s(tJ);E2r=r(bBt,"SEWForSequenceClassification"),bBt.forEach(t),C2r=r(_Ge," (SEW model)"),_Ge.forEach(t),w2r=i(We),VE=n(We,"LI",{});var bGe=s(VE);AMe=n(bGe,"STRONG",{});var vBt=s(AMe);A2r=r(vBt,"sew-d"),vBt.forEach(t),L2r=r(bGe," \u2014 "),aJ=n(bGe,"A",{href:!0});var FBt=s(aJ);y2r=r(FBt,"SEWDForSequenceClassification"),FBt.forEach(t),x2r=r(bGe," (SEW-D model)"),bGe.forEach(t),$2r=i(We),XE=n(We,"LI",{});var vGe=s(XE);LMe=n(vGe,"STRONG",{});var TBt=s(LMe);k2r=r(TBt,"unispeech"),TBt.forEach(t),S2r=r(vGe," \u2014 "),nJ=n(vGe,"A",{href:!0});var MBt=s(nJ);R2r=r(MBt,"UniSpeechForSequenceClassification"),MBt.forEach(t),P2r=r(vGe," (UniSpeech model)"),vGe.forEach(t),B2r=i(We),zE=n(We,"LI",{});var FGe=s(zE);yMe=n(FGe,"STRONG",{});var EBt=s(yMe);I2r=r(EBt,"unispeech-sat"),EBt.forEach(t),N2r=r(FGe," \u2014 "),sJ=n(FGe,"A",{href:!0});var CBt=s(sJ);q2r=r(CBt,"UniSpeechSatForSequenceClassification"),CBt.forEach(t),j2r=r(FGe," (UniSpeechSat model)"),FGe.forEach(t),D2r=i(We),WE=n(We,"LI",{});var TGe=s(WE);xMe=n(TGe,"STRONG",{});var wBt=s(xMe);G2r=r(wBt,"wav2vec2"),wBt.forEach(t),O2r=r(TGe," \u2014 "),lJ=n(TGe,"A",{href:!0});var ABt=s(lJ);V2r=r(ABt,"Wav2Vec2ForSequenceClassification"),ABt.forEach(t),X2r=r(TGe," (Wav2Vec2 model)"),TGe.forEach(t),z2r=i(We),QE=n(We,"LI",{});var MGe=s(QE);$Me=n(MGe,"STRONG",{});var LBt=s($Me);W2r=r(LBt,"wav2vec2-conformer"),LBt.forEach(t),Q2r=r(MGe," \u2014 "),iJ=n(MGe,"A",{href:!0});var yBt=s(iJ);U2r=r(yBt,"Wav2Vec2ConformerForSequenceClassification"),yBt.forEach(t),H2r=r(MGe," (Wav2Vec2-Conformer model)"),MGe.forEach(t),J2r=i(We),UE=n(We,"LI",{});var EGe=s(UE);kMe=n(EGe,"STRONG",{});var xBt=s(kMe);Y2r=r(xBt,"wavlm"),xBt.forEach(t),K2r=r(EGe," \u2014 "),dJ=n(EGe,"A",{href:!0});var $Bt=s(dJ);Z2r=r($Bt,"WavLMForSequenceClassification"),$Bt.forEach(t),ebr=r(EGe," (WavLM model)"),EGe.forEach(t),We.forEach(t),obr=i(xa),HE=n(xa,"P",{});var CGe=s(HE);rbr=r(CGe,"The model is set in evaluation mode by default using "),SMe=n(CGe,"CODE",{});var kBt=s(SMe);tbr=r(kBt,"model.eval()"),kBt.forEach(t),abr=r(CGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),RMe=n(CGe,"CODE",{});var SBt=s(RMe);nbr=r(SBt,"model.train()"),SBt.forEach(t),CGe.forEach(t),sbr=i(xa),T(JE.$$.fragment,xa),xa.forEach(t),xl.forEach(t),hHe=i(m),Jd=n(m,"H2",{class:!0});var CYe=s(Jd);YE=n(CYe,"A",{id:!0,class:!0,href:!0});var RBt=s(YE);PMe=n(RBt,"SPAN",{});var PBt=s(PMe);T(Tx.$$.fragment,PBt),PBt.forEach(t),RBt.forEach(t),lbr=i(CYe),BMe=n(CYe,"SPAN",{});var BBt=s(BMe);ibr=r(BBt,"AutoModelForAudioFrameClassification"),BBt.forEach(t),CYe.forEach(t),uHe=i(m),Ho=n(m,"DIV",{class:!0});var $l=s(Ho);T(Mx.$$.fragment,$l),dbr=i($l),Yd=n($l,"P",{});var Ine=s(Yd);cbr=r(Ine,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),cJ=n(Ine,"A",{href:!0});var IBt=s(cJ);mbr=r(IBt,"from_pretrained()"),IBt.forEach(t),fbr=r(Ine," class method or the "),mJ=n(Ine,"A",{href:!0});var NBt=s(mJ);gbr=r(NBt,"from_config()"),NBt.forEach(t),hbr=r(Ine,` class
method.`),Ine.forEach(t),ubr=i($l),Ex=n($l,"P",{});var wYe=s(Ex);pbr=r(wYe,"This class cannot be instantiated directly using "),IMe=n(wYe,"CODE",{});var qBt=s(IMe);_br=r(qBt,"__init__()"),qBt.forEach(t),bbr=r(wYe," (throws an error)."),wYe.forEach(t),vbr=i($l),xt=n($l,"DIV",{class:!0});var ey=s(xt);T(Cx.$$.fragment,ey),Fbr=i(ey),NMe=n(ey,"P",{});var jBt=s(NMe);Tbr=r(jBt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),jBt.forEach(t),Mbr=i(ey),Kd=n(ey,"P",{});var Nne=s(Kd);Ebr=r(Nne,`Note:
Loading a model from its configuration file does `),qMe=n(Nne,"STRONG",{});var DBt=s(qMe);Cbr=r(DBt,"not"),DBt.forEach(t),wbr=r(Nne,` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=n(Nne,"A",{href:!0});var GBt=s(fJ);Abr=r(GBt,"from_pretrained()"),GBt.forEach(t),Lbr=r(Nne," to load the model weights."),Nne.forEach(t),ybr=i(ey),T(KE.$$.fragment,ey),ey.forEach(t),xbr=i($l),uo=n($l,"DIV",{class:!0});var $a=s(uo);T(wx.$$.fragment,$a),$br=i($a),jMe=n($a,"P",{});var OBt=s(jMe);kbr=r(OBt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),OBt.forEach(t),Sbr=i($a),nn=n($a,"P",{});var oy=s(nn);Rbr=r(oy,"The model class to instantiate is selected based on the "),DMe=n(oy,"CODE",{});var VBt=s(DMe);Pbr=r(VBt,"model_type"),VBt.forEach(t),Bbr=r(oy,` property of the config object (either
passed as an argument or loaded from `),GMe=n(oy,"CODE",{});var XBt=s(GMe);Ibr=r(XBt,"pretrained_model_name_or_path"),XBt.forEach(t),Nbr=r(oy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OMe=n(oy,"CODE",{});var zBt=s(OMe);qbr=r(zBt,"pretrained_model_name_or_path"),zBt.forEach(t),jbr=r(oy,":"),oy.forEach(t),Dbr=i($a),st=n($a,"UL",{});var kl=s(st);ZE=n(kl,"LI",{});var wGe=s(ZE);VMe=n(wGe,"STRONG",{});var WBt=s(VMe);Gbr=r(WBt,"data2vec-audio"),WBt.forEach(t),Obr=r(wGe," \u2014 "),gJ=n(wGe,"A",{href:!0});var QBt=s(gJ);Vbr=r(QBt,"Data2VecAudioForAudioFrameClassification"),QBt.forEach(t),Xbr=r(wGe," (Data2VecAudio model)"),wGe.forEach(t),zbr=i(kl),e4=n(kl,"LI",{});var AGe=s(e4);XMe=n(AGe,"STRONG",{});var UBt=s(XMe);Wbr=r(UBt,"unispeech-sat"),UBt.forEach(t),Qbr=r(AGe," \u2014 "),hJ=n(AGe,"A",{href:!0});var HBt=s(hJ);Ubr=r(HBt,"UniSpeechSatForAudioFrameClassification"),HBt.forEach(t),Hbr=r(AGe," (UniSpeechSat model)"),AGe.forEach(t),Jbr=i(kl),o4=n(kl,"LI",{});var LGe=s(o4);zMe=n(LGe,"STRONG",{});var JBt=s(zMe);Ybr=r(JBt,"wav2vec2"),JBt.forEach(t),Kbr=r(LGe," \u2014 "),uJ=n(LGe,"A",{href:!0});var YBt=s(uJ);Zbr=r(YBt,"Wav2Vec2ForAudioFrameClassification"),YBt.forEach(t),evr=r(LGe," (Wav2Vec2 model)"),LGe.forEach(t),ovr=i(kl),r4=n(kl,"LI",{});var yGe=s(r4);WMe=n(yGe,"STRONG",{});var KBt=s(WMe);rvr=r(KBt,"wav2vec2-conformer"),KBt.forEach(t),tvr=r(yGe," \u2014 "),pJ=n(yGe,"A",{href:!0});var ZBt=s(pJ);avr=r(ZBt,"Wav2Vec2ConformerForAudioFrameClassification"),ZBt.forEach(t),nvr=r(yGe," (Wav2Vec2-Conformer model)"),yGe.forEach(t),svr=i(kl),t4=n(kl,"LI",{});var xGe=s(t4);QMe=n(xGe,"STRONG",{});var eIt=s(QMe);lvr=r(eIt,"wavlm"),eIt.forEach(t),ivr=r(xGe," \u2014 "),_J=n(xGe,"A",{href:!0});var oIt=s(_J);dvr=r(oIt,"WavLMForAudioFrameClassification"),oIt.forEach(t),cvr=r(xGe," (WavLM model)"),xGe.forEach(t),kl.forEach(t),mvr=i($a),a4=n($a,"P",{});var $Ge=s(a4);fvr=r($Ge,"The model is set in evaluation mode by default using "),UMe=n($Ge,"CODE",{});var rIt=s(UMe);gvr=r(rIt,"model.eval()"),rIt.forEach(t),hvr=r($Ge,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),HMe=n($Ge,"CODE",{});var tIt=s(HMe);uvr=r(tIt,"model.train()"),tIt.forEach(t),$Ge.forEach(t),pvr=i($a),T(n4.$$.fragment,$a),$a.forEach(t),$l.forEach(t),pHe=i(m),Zd=n(m,"H2",{class:!0});var AYe=s(Zd);s4=n(AYe,"A",{id:!0,class:!0,href:!0});var aIt=s(s4);JMe=n(aIt,"SPAN",{});var nIt=s(JMe);T(Ax.$$.fragment,nIt),nIt.forEach(t),aIt.forEach(t),_vr=i(AYe),YMe=n(AYe,"SPAN",{});var sIt=s(YMe);bvr=r(sIt,"AutoModelForCTC"),sIt.forEach(t),AYe.forEach(t),_He=i(m),Jo=n(m,"DIV",{class:!0});var Sl=s(Jo);T(Lx.$$.fragment,Sl),vvr=i(Sl),ec=n(Sl,"P",{});var qne=s(ec);Fvr=r(qne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),bJ=n(qne,"A",{href:!0});var lIt=s(bJ);Tvr=r(lIt,"from_pretrained()"),lIt.forEach(t),Mvr=r(qne," class method or the "),vJ=n(qne,"A",{href:!0});var iIt=s(vJ);Evr=r(iIt,"from_config()"),iIt.forEach(t),Cvr=r(qne,` class
method.`),qne.forEach(t),wvr=i(Sl),yx=n(Sl,"P",{});var LYe=s(yx);Avr=r(LYe,"This class cannot be instantiated directly using "),KMe=n(LYe,"CODE",{});var dIt=s(KMe);Lvr=r(dIt,"__init__()"),dIt.forEach(t),yvr=r(LYe," (throws an error)."),LYe.forEach(t),xvr=i(Sl),$t=n(Sl,"DIV",{class:!0});var ry=s($t);T(xx.$$.fragment,ry),$vr=i(ry),ZMe=n(ry,"P",{});var cIt=s(ZMe);kvr=r(cIt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),cIt.forEach(t),Svr=i(ry),oc=n(ry,"P",{});var jne=s(oc);Rvr=r(jne,`Note:
Loading a model from its configuration file does `),eEe=n(jne,"STRONG",{});var mIt=s(eEe);Pvr=r(mIt,"not"),mIt.forEach(t),Bvr=r(jne,` load the model weights. It only affects the
model\u2019s configuration. Use `),FJ=n(jne,"A",{href:!0});var fIt=s(FJ);Ivr=r(fIt,"from_pretrained()"),fIt.forEach(t),Nvr=r(jne," to load the model weights."),jne.forEach(t),qvr=i(ry),T(l4.$$.fragment,ry),ry.forEach(t),jvr=i(Sl),po=n(Sl,"DIV",{class:!0});var ka=s(po);T($x.$$.fragment,ka),Dvr=i(ka),oEe=n(ka,"P",{});var gIt=s(oEe);Gvr=r(gIt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),gIt.forEach(t),Ovr=i(ka),sn=n(ka,"P",{});var ty=s(sn);Vvr=r(ty,"The model class to instantiate is selected based on the "),rEe=n(ty,"CODE",{});var hIt=s(rEe);Xvr=r(hIt,"model_type"),hIt.forEach(t),zvr=r(ty,` property of the config object (either
passed as an argument or loaded from `),tEe=n(ty,"CODE",{});var uIt=s(tEe);Wvr=r(uIt,"pretrained_model_name_or_path"),uIt.forEach(t),Qvr=r(ty,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aEe=n(ty,"CODE",{});var pIt=s(aEe);Uvr=r(pIt,"pretrained_model_name_or_path"),pIt.forEach(t),Hvr=r(ty,":"),ty.forEach(t),Jvr=i(ka),Le=n(ka,"UL",{});var Ie=s(Le);i4=n(Ie,"LI",{});var kGe=s(i4);nEe=n(kGe,"STRONG",{});var _It=s(nEe);Yvr=r(_It,"data2vec-audio"),_It.forEach(t),Kvr=r(kGe," \u2014 "),TJ=n(kGe,"A",{href:!0});var bIt=s(TJ);Zvr=r(bIt,"Data2VecAudioForCTC"),bIt.forEach(t),e1r=r(kGe," (Data2VecAudio model)"),kGe.forEach(t),o1r=i(Ie),d4=n(Ie,"LI",{});var SGe=s(d4);sEe=n(SGe,"STRONG",{});var vIt=s(sEe);r1r=r(vIt,"hubert"),vIt.forEach(t),t1r=r(SGe," \u2014 "),MJ=n(SGe,"A",{href:!0});var FIt=s(MJ);a1r=r(FIt,"HubertForCTC"),FIt.forEach(t),n1r=r(SGe," (Hubert model)"),SGe.forEach(t),s1r=i(Ie),c4=n(Ie,"LI",{});var RGe=s(c4);lEe=n(RGe,"STRONG",{});var TIt=s(lEe);l1r=r(TIt,"mctct"),TIt.forEach(t),i1r=r(RGe," \u2014 "),EJ=n(RGe,"A",{href:!0});var MIt=s(EJ);d1r=r(MIt,"MCTCTForCTC"),MIt.forEach(t),c1r=r(RGe," (M-CTC-T model)"),RGe.forEach(t),m1r=i(Ie),m4=n(Ie,"LI",{});var PGe=s(m4);iEe=n(PGe,"STRONG",{});var EIt=s(iEe);f1r=r(EIt,"sew"),EIt.forEach(t),g1r=r(PGe," \u2014 "),CJ=n(PGe,"A",{href:!0});var CIt=s(CJ);h1r=r(CIt,"SEWForCTC"),CIt.forEach(t),u1r=r(PGe," (SEW model)"),PGe.forEach(t),p1r=i(Ie),f4=n(Ie,"LI",{});var BGe=s(f4);dEe=n(BGe,"STRONG",{});var wIt=s(dEe);_1r=r(wIt,"sew-d"),wIt.forEach(t),b1r=r(BGe," \u2014 "),wJ=n(BGe,"A",{href:!0});var AIt=s(wJ);v1r=r(AIt,"SEWDForCTC"),AIt.forEach(t),F1r=r(BGe," (SEW-D model)"),BGe.forEach(t),T1r=i(Ie),g4=n(Ie,"LI",{});var IGe=s(g4);cEe=n(IGe,"STRONG",{});var LIt=s(cEe);M1r=r(LIt,"unispeech"),LIt.forEach(t),E1r=r(IGe," \u2014 "),AJ=n(IGe,"A",{href:!0});var yIt=s(AJ);C1r=r(yIt,"UniSpeechForCTC"),yIt.forEach(t),w1r=r(IGe," (UniSpeech model)"),IGe.forEach(t),A1r=i(Ie),h4=n(Ie,"LI",{});var NGe=s(h4);mEe=n(NGe,"STRONG",{});var xIt=s(mEe);L1r=r(xIt,"unispeech-sat"),xIt.forEach(t),y1r=r(NGe," \u2014 "),LJ=n(NGe,"A",{href:!0});var $It=s(LJ);x1r=r($It,"UniSpeechSatForCTC"),$It.forEach(t),$1r=r(NGe," (UniSpeechSat model)"),NGe.forEach(t),k1r=i(Ie),u4=n(Ie,"LI",{});var qGe=s(u4);fEe=n(qGe,"STRONG",{});var kIt=s(fEe);S1r=r(kIt,"wav2vec2"),kIt.forEach(t),R1r=r(qGe," \u2014 "),yJ=n(qGe,"A",{href:!0});var SIt=s(yJ);P1r=r(SIt,"Wav2Vec2ForCTC"),SIt.forEach(t),B1r=r(qGe," (Wav2Vec2 model)"),qGe.forEach(t),I1r=i(Ie),p4=n(Ie,"LI",{});var jGe=s(p4);gEe=n(jGe,"STRONG",{});var RIt=s(gEe);N1r=r(RIt,"wav2vec2-conformer"),RIt.forEach(t),q1r=r(jGe," \u2014 "),xJ=n(jGe,"A",{href:!0});var PIt=s(xJ);j1r=r(PIt,"Wav2Vec2ConformerForCTC"),PIt.forEach(t),D1r=r(jGe," (Wav2Vec2-Conformer model)"),jGe.forEach(t),G1r=i(Ie),_4=n(Ie,"LI",{});var DGe=s(_4);hEe=n(DGe,"STRONG",{});var BIt=s(hEe);O1r=r(BIt,"wavlm"),BIt.forEach(t),V1r=r(DGe," \u2014 "),$J=n(DGe,"A",{href:!0});var IIt=s($J);X1r=r(IIt,"WavLMForCTC"),IIt.forEach(t),z1r=r(DGe," (WavLM model)"),DGe.forEach(t),Ie.forEach(t),W1r=i(ka),b4=n(ka,"P",{});var GGe=s(b4);Q1r=r(GGe,"The model is set in evaluation mode by default using "),uEe=n(GGe,"CODE",{});var NIt=s(uEe);U1r=r(NIt,"model.eval()"),NIt.forEach(t),H1r=r(GGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pEe=n(GGe,"CODE",{});var qIt=s(pEe);J1r=r(qIt,"model.train()"),qIt.forEach(t),GGe.forEach(t),Y1r=i(ka),T(v4.$$.fragment,ka),ka.forEach(t),Sl.forEach(t),bHe=i(m),rc=n(m,"H2",{class:!0});var yYe=s(rc);F4=n(yYe,"A",{id:!0,class:!0,href:!0});var jIt=s(F4);_Ee=n(jIt,"SPAN",{});var DIt=s(_Ee);T(kx.$$.fragment,DIt),DIt.forEach(t),jIt.forEach(t),K1r=i(yYe),bEe=n(yYe,"SPAN",{});var GIt=s(bEe);Z1r=r(GIt,"AutoModelForSpeechSeq2Seq"),GIt.forEach(t),yYe.forEach(t),vHe=i(m),Yo=n(m,"DIV",{class:!0});var Rl=s(Yo);T(Sx.$$.fragment,Rl),eFr=i(Rl),tc=n(Rl,"P",{});var Dne=s(tc);oFr=r(Dne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),kJ=n(Dne,"A",{href:!0});var OIt=s(kJ);rFr=r(OIt,"from_pretrained()"),OIt.forEach(t),tFr=r(Dne," class method or the "),SJ=n(Dne,"A",{href:!0});var VIt=s(SJ);aFr=r(VIt,"from_config()"),VIt.forEach(t),nFr=r(Dne,` class
method.`),Dne.forEach(t),sFr=i(Rl),Rx=n(Rl,"P",{});var xYe=s(Rx);lFr=r(xYe,"This class cannot be instantiated directly using "),vEe=n(xYe,"CODE",{});var XIt=s(vEe);iFr=r(XIt,"__init__()"),XIt.forEach(t),dFr=r(xYe," (throws an error)."),xYe.forEach(t),cFr=i(Rl),kt=n(Rl,"DIV",{class:!0});var ay=s(kt);T(Px.$$.fragment,ay),mFr=i(ay),FEe=n(ay,"P",{});var zIt=s(FEe);fFr=r(zIt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),zIt.forEach(t),gFr=i(ay),ac=n(ay,"P",{});var Gne=s(ac);hFr=r(Gne,`Note:
Loading a model from its configuration file does `),TEe=n(Gne,"STRONG",{});var WIt=s(TEe);uFr=r(WIt,"not"),WIt.forEach(t),pFr=r(Gne,` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=n(Gne,"A",{href:!0});var QIt=s(RJ);_Fr=r(QIt,"from_pretrained()"),QIt.forEach(t),bFr=r(Gne," to load the model weights."),Gne.forEach(t),vFr=i(ay),T(T4.$$.fragment,ay),ay.forEach(t),FFr=i(Rl),_o=n(Rl,"DIV",{class:!0});var Sa=s(_o);T(Bx.$$.fragment,Sa),TFr=i(Sa),MEe=n(Sa,"P",{});var UIt=s(MEe);MFr=r(UIt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),UIt.forEach(t),EFr=i(Sa),ln=n(Sa,"P",{});var ny=s(ln);CFr=r(ny,"The model class to instantiate is selected based on the "),EEe=n(ny,"CODE",{});var HIt=s(EEe);wFr=r(HIt,"model_type"),HIt.forEach(t),AFr=r(ny,` property of the config object (either
passed as an argument or loaded from `),CEe=n(ny,"CODE",{});var JIt=s(CEe);LFr=r(JIt,"pretrained_model_name_or_path"),JIt.forEach(t),yFr=r(ny,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wEe=n(ny,"CODE",{});var YIt=s(wEe);xFr=r(YIt,"pretrained_model_name_or_path"),YIt.forEach(t),$Fr=r(ny,":"),ny.forEach(t),kFr=i(Sa),Ix=n(Sa,"UL",{});var $Ye=s(Ix);M4=n($Ye,"LI",{});var OGe=s(M4);AEe=n(OGe,"STRONG",{});var KIt=s(AEe);SFr=r(KIt,"speech-encoder-decoder"),KIt.forEach(t),RFr=r(OGe," \u2014 "),PJ=n(OGe,"A",{href:!0});var ZIt=s(PJ);PFr=r(ZIt,"SpeechEncoderDecoderModel"),ZIt.forEach(t),BFr=r(OGe," (Speech Encoder decoder model)"),OGe.forEach(t),IFr=i($Ye),E4=n($Ye,"LI",{});var VGe=s(E4);LEe=n(VGe,"STRONG",{});var eNt=s(LEe);NFr=r(eNt,"speech_to_text"),eNt.forEach(t),qFr=r(VGe," \u2014 "),BJ=n(VGe,"A",{href:!0});var oNt=s(BJ);jFr=r(oNt,"Speech2TextForConditionalGeneration"),oNt.forEach(t),DFr=r(VGe," (Speech2Text model)"),VGe.forEach(t),$Ye.forEach(t),GFr=i(Sa),C4=n(Sa,"P",{});var XGe=s(C4);OFr=r(XGe,"The model is set in evaluation mode by default using "),yEe=n(XGe,"CODE",{});var rNt=s(yEe);VFr=r(rNt,"model.eval()"),rNt.forEach(t),XFr=r(XGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xEe=n(XGe,"CODE",{});var tNt=s(xEe);zFr=r(tNt,"model.train()"),tNt.forEach(t),XGe.forEach(t),WFr=i(Sa),T(w4.$$.fragment,Sa),Sa.forEach(t),Rl.forEach(t),FHe=i(m),nc=n(m,"H2",{class:!0});var kYe=s(nc);A4=n(kYe,"A",{id:!0,class:!0,href:!0});var aNt=s(A4);$Ee=n(aNt,"SPAN",{});var nNt=s($Ee);T(Nx.$$.fragment,nNt),nNt.forEach(t),aNt.forEach(t),QFr=i(kYe),kEe=n(kYe,"SPAN",{});var sNt=s(kEe);UFr=r(sNt,"AutoModelForAudioXVector"),sNt.forEach(t),kYe.forEach(t),THe=i(m),Ko=n(m,"DIV",{class:!0});var Pl=s(Ko);T(qx.$$.fragment,Pl),HFr=i(Pl),sc=n(Pl,"P",{});var One=s(sc);JFr=r(One,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),IJ=n(One,"A",{href:!0});var lNt=s(IJ);YFr=r(lNt,"from_pretrained()"),lNt.forEach(t),KFr=r(One," class method or the "),NJ=n(One,"A",{href:!0});var iNt=s(NJ);ZFr=r(iNt,"from_config()"),iNt.forEach(t),eTr=r(One,` class
method.`),One.forEach(t),oTr=i(Pl),jx=n(Pl,"P",{});var SYe=s(jx);rTr=r(SYe,"This class cannot be instantiated directly using "),SEe=n(SYe,"CODE",{});var dNt=s(SEe);tTr=r(dNt,"__init__()"),dNt.forEach(t),aTr=r(SYe," (throws an error)."),SYe.forEach(t),nTr=i(Pl),St=n(Pl,"DIV",{class:!0});var sy=s(St);T(Dx.$$.fragment,sy),sTr=i(sy),REe=n(sy,"P",{});var cNt=s(REe);lTr=r(cNt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),cNt.forEach(t),iTr=i(sy),lc=n(sy,"P",{});var Vne=s(lc);dTr=r(Vne,`Note:
Loading a model from its configuration file does `),PEe=n(Vne,"STRONG",{});var mNt=s(PEe);cTr=r(mNt,"not"),mNt.forEach(t),mTr=r(Vne,` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=n(Vne,"A",{href:!0});var fNt=s(qJ);fTr=r(fNt,"from_pretrained()"),fNt.forEach(t),gTr=r(Vne," to load the model weights."),Vne.forEach(t),hTr=i(sy),T(L4.$$.fragment,sy),sy.forEach(t),uTr=i(Pl),bo=n(Pl,"DIV",{class:!0});var Ra=s(bo);T(Gx.$$.fragment,Ra),pTr=i(Ra),BEe=n(Ra,"P",{});var gNt=s(BEe);_Tr=r(gNt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),gNt.forEach(t),bTr=i(Ra),dn=n(Ra,"P",{});var ly=s(dn);vTr=r(ly,"The model class to instantiate is selected based on the "),IEe=n(ly,"CODE",{});var hNt=s(IEe);FTr=r(hNt,"model_type"),hNt.forEach(t),TTr=r(ly,` property of the config object (either
passed as an argument or loaded from `),NEe=n(ly,"CODE",{});var uNt=s(NEe);MTr=r(uNt,"pretrained_model_name_or_path"),uNt.forEach(t),ETr=r(ly,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qEe=n(ly,"CODE",{});var pNt=s(qEe);CTr=r(pNt,"pretrained_model_name_or_path"),pNt.forEach(t),wTr=r(ly,":"),ly.forEach(t),ATr=i(Ra),lt=n(Ra,"UL",{});var Bl=s(lt);y4=n(Bl,"LI",{});var zGe=s(y4);jEe=n(zGe,"STRONG",{});var _Nt=s(jEe);LTr=r(_Nt,"data2vec-audio"),_Nt.forEach(t),yTr=r(zGe," \u2014 "),jJ=n(zGe,"A",{href:!0});var bNt=s(jJ);xTr=r(bNt,"Data2VecAudioForXVector"),bNt.forEach(t),$Tr=r(zGe," (Data2VecAudio model)"),zGe.forEach(t),kTr=i(Bl),x4=n(Bl,"LI",{});var WGe=s(x4);DEe=n(WGe,"STRONG",{});var vNt=s(DEe);STr=r(vNt,"unispeech-sat"),vNt.forEach(t),RTr=r(WGe," \u2014 "),DJ=n(WGe,"A",{href:!0});var FNt=s(DJ);PTr=r(FNt,"UniSpeechSatForXVector"),FNt.forEach(t),BTr=r(WGe," (UniSpeechSat model)"),WGe.forEach(t),ITr=i(Bl),$4=n(Bl,"LI",{});var QGe=s($4);GEe=n(QGe,"STRONG",{});var TNt=s(GEe);NTr=r(TNt,"wav2vec2"),TNt.forEach(t),qTr=r(QGe," \u2014 "),GJ=n(QGe,"A",{href:!0});var MNt=s(GJ);jTr=r(MNt,"Wav2Vec2ForXVector"),MNt.forEach(t),DTr=r(QGe," (Wav2Vec2 model)"),QGe.forEach(t),GTr=i(Bl),k4=n(Bl,"LI",{});var UGe=s(k4);OEe=n(UGe,"STRONG",{});var ENt=s(OEe);OTr=r(ENt,"wav2vec2-conformer"),ENt.forEach(t),VTr=r(UGe," \u2014 "),OJ=n(UGe,"A",{href:!0});var CNt=s(OJ);XTr=r(CNt,"Wav2Vec2ConformerForXVector"),CNt.forEach(t),zTr=r(UGe," (Wav2Vec2-Conformer model)"),UGe.forEach(t),WTr=i(Bl),S4=n(Bl,"LI",{});var HGe=s(S4);VEe=n(HGe,"STRONG",{});var wNt=s(VEe);QTr=r(wNt,"wavlm"),wNt.forEach(t),UTr=r(HGe," \u2014 "),VJ=n(HGe,"A",{href:!0});var ANt=s(VJ);HTr=r(ANt,"WavLMForXVector"),ANt.forEach(t),JTr=r(HGe," (WavLM model)"),HGe.forEach(t),Bl.forEach(t),YTr=i(Ra),R4=n(Ra,"P",{});var JGe=s(R4);KTr=r(JGe,"The model is set in evaluation mode by default using "),XEe=n(JGe,"CODE",{});var LNt=s(XEe);ZTr=r(LNt,"model.eval()"),LNt.forEach(t),eMr=r(JGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zEe=n(JGe,"CODE",{});var yNt=s(zEe);oMr=r(yNt,"model.train()"),yNt.forEach(t),JGe.forEach(t),rMr=i(Ra),T(P4.$$.fragment,Ra),Ra.forEach(t),Pl.forEach(t),MHe=i(m),ic=n(m,"H2",{class:!0});var RYe=s(ic);B4=n(RYe,"A",{id:!0,class:!0,href:!0});var xNt=s(B4);WEe=n(xNt,"SPAN",{});var $Nt=s(WEe);T(Ox.$$.fragment,$Nt),$Nt.forEach(t),xNt.forEach(t),tMr=i(RYe),QEe=n(RYe,"SPAN",{});var kNt=s(QEe);aMr=r(kNt,"AutoModelForMaskedImageModeling"),kNt.forEach(t),RYe.forEach(t),EHe=i(m),Zo=n(m,"DIV",{class:!0});var Il=s(Zo);T(Vx.$$.fragment,Il),nMr=i(Il),dc=n(Il,"P",{});var Xne=s(dc);sMr=r(Xne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),XJ=n(Xne,"A",{href:!0});var SNt=s(XJ);lMr=r(SNt,"from_pretrained()"),SNt.forEach(t),iMr=r(Xne," class method or the "),zJ=n(Xne,"A",{href:!0});var RNt=s(zJ);dMr=r(RNt,"from_config()"),RNt.forEach(t),cMr=r(Xne,` class
method.`),Xne.forEach(t),mMr=i(Il),Xx=n(Il,"P",{});var PYe=s(Xx);fMr=r(PYe,"This class cannot be instantiated directly using "),UEe=n(PYe,"CODE",{});var PNt=s(UEe);gMr=r(PNt,"__init__()"),PNt.forEach(t),hMr=r(PYe," (throws an error)."),PYe.forEach(t),uMr=i(Il),Rt=n(Il,"DIV",{class:!0});var iy=s(Rt);T(zx.$$.fragment,iy),pMr=i(iy),HEe=n(iy,"P",{});var BNt=s(HEe);_Mr=r(BNt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),BNt.forEach(t),bMr=i(iy),cc=n(iy,"P",{});var zne=s(cc);vMr=r(zne,`Note:
Loading a model from its configuration file does `),JEe=n(zne,"STRONG",{});var INt=s(JEe);FMr=r(INt,"not"),INt.forEach(t),TMr=r(zne,` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=n(zne,"A",{href:!0});var NNt=s(WJ);MMr=r(NNt,"from_pretrained()"),NNt.forEach(t),EMr=r(zne," to load the model weights."),zne.forEach(t),CMr=i(iy),T(I4.$$.fragment,iy),iy.forEach(t),wMr=i(Il),vo=n(Il,"DIV",{class:!0});var Pa=s(vo);T(Wx.$$.fragment,Pa),AMr=i(Pa),YEe=n(Pa,"P",{});var qNt=s(YEe);LMr=r(qNt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),qNt.forEach(t),yMr=i(Pa),cn=n(Pa,"P",{});var dy=s(cn);xMr=r(dy,"The model class to instantiate is selected based on the "),KEe=n(dy,"CODE",{});var jNt=s(KEe);$Mr=r(jNt,"model_type"),jNt.forEach(t),kMr=r(dy,` property of the config object (either
passed as an argument or loaded from `),ZEe=n(dy,"CODE",{});var DNt=s(ZEe);SMr=r(DNt,"pretrained_model_name_or_path"),DNt.forEach(t),RMr=r(dy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e4e=n(dy,"CODE",{});var GNt=s(e4e);PMr=r(GNt,"pretrained_model_name_or_path"),GNt.forEach(t),BMr=r(dy,":"),dy.forEach(t),IMr=i(Pa),mn=n(Pa,"UL",{});var cy=s(mn);N4=n(cy,"LI",{});var YGe=s(N4);o4e=n(YGe,"STRONG",{});var ONt=s(o4e);NMr=r(ONt,"deit"),ONt.forEach(t),qMr=r(YGe," \u2014 "),QJ=n(YGe,"A",{href:!0});var VNt=s(QJ);jMr=r(VNt,"DeiTForMaskedImageModeling"),VNt.forEach(t),DMr=r(YGe," (DeiT model)"),YGe.forEach(t),GMr=i(cy),q4=n(cy,"LI",{});var KGe=s(q4);r4e=n(KGe,"STRONG",{});var XNt=s(r4e);OMr=r(XNt,"swin"),XNt.forEach(t),VMr=r(KGe," \u2014 "),UJ=n(KGe,"A",{href:!0});var zNt=s(UJ);XMr=r(zNt,"SwinForMaskedImageModeling"),zNt.forEach(t),zMr=r(KGe," (Swin Transformer model)"),KGe.forEach(t),WMr=i(cy),j4=n(cy,"LI",{});var ZGe=s(j4);t4e=n(ZGe,"STRONG",{});var WNt=s(t4e);QMr=r(WNt,"swinv2"),WNt.forEach(t),UMr=r(ZGe," \u2014 "),HJ=n(ZGe,"A",{href:!0});var QNt=s(HJ);HMr=r(QNt,"Swinv2ForMaskedImageModeling"),QNt.forEach(t),JMr=r(ZGe," (Swin Transformer V2 model)"),ZGe.forEach(t),YMr=i(cy),D4=n(cy,"LI",{});var eOe=s(D4);a4e=n(eOe,"STRONG",{});var UNt=s(a4e);KMr=r(UNt,"vit"),UNt.forEach(t),ZMr=r(eOe," \u2014 "),JJ=n(eOe,"A",{href:!0});var HNt=s(JJ);eEr=r(HNt,"ViTForMaskedImageModeling"),HNt.forEach(t),oEr=r(eOe," (ViT model)"),eOe.forEach(t),cy.forEach(t),rEr=i(Pa),G4=n(Pa,"P",{});var oOe=s(G4);tEr=r(oOe,"The model is set in evaluation mode by default using "),n4e=n(oOe,"CODE",{});var JNt=s(n4e);aEr=r(JNt,"model.eval()"),JNt.forEach(t),nEr=r(oOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s4e=n(oOe,"CODE",{});var YNt=s(s4e);sEr=r(YNt,"model.train()"),YNt.forEach(t),oOe.forEach(t),lEr=i(Pa),T(O4.$$.fragment,Pa),Pa.forEach(t),Il.forEach(t),CHe=i(m),mc=n(m,"H2",{class:!0});var BYe=s(mc);V4=n(BYe,"A",{id:!0,class:!0,href:!0});var KNt=s(V4);l4e=n(KNt,"SPAN",{});var ZNt=s(l4e);T(Qx.$$.fragment,ZNt),ZNt.forEach(t),KNt.forEach(t),iEr=i(BYe),i4e=n(BYe,"SPAN",{});var eqt=s(i4e);dEr=r(eqt,"AutoModelForObjectDetection"),eqt.forEach(t),BYe.forEach(t),wHe=i(m),er=n(m,"DIV",{class:!0});var Nl=s(er);T(Ux.$$.fragment,Nl),cEr=i(Nl),fc=n(Nl,"P",{});var Wne=s(fc);mEr=r(Wne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),YJ=n(Wne,"A",{href:!0});var oqt=s(YJ);fEr=r(oqt,"from_pretrained()"),oqt.forEach(t),gEr=r(Wne," class method or the "),KJ=n(Wne,"A",{href:!0});var rqt=s(KJ);hEr=r(rqt,"from_config()"),rqt.forEach(t),uEr=r(Wne,` class
method.`),Wne.forEach(t),pEr=i(Nl),Hx=n(Nl,"P",{});var IYe=s(Hx);_Er=r(IYe,"This class cannot be instantiated directly using "),d4e=n(IYe,"CODE",{});var tqt=s(d4e);bEr=r(tqt,"__init__()"),tqt.forEach(t),vEr=r(IYe," (throws an error)."),IYe.forEach(t),FEr=i(Nl),Pt=n(Nl,"DIV",{class:!0});var my=s(Pt);T(Jx.$$.fragment,my),TEr=i(my),c4e=n(my,"P",{});var aqt=s(c4e);MEr=r(aqt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),aqt.forEach(t),EEr=i(my),gc=n(my,"P",{});var Qne=s(gc);CEr=r(Qne,`Note:
Loading a model from its configuration file does `),m4e=n(Qne,"STRONG",{});var nqt=s(m4e);wEr=r(nqt,"not"),nqt.forEach(t),AEr=r(Qne,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=n(Qne,"A",{href:!0});var sqt=s(ZJ);LEr=r(sqt,"from_pretrained()"),sqt.forEach(t),yEr=r(Qne," to load the model weights."),Qne.forEach(t),xEr=i(my),T(X4.$$.fragment,my),my.forEach(t),$Er=i(Nl),Fo=n(Nl,"DIV",{class:!0});var Ba=s(Fo);T(Yx.$$.fragment,Ba),kEr=i(Ba),f4e=n(Ba,"P",{});var lqt=s(f4e);SEr=r(lqt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),lqt.forEach(t),REr=i(Ba),fn=n(Ba,"P",{});var fy=s(fn);PEr=r(fy,"The model class to instantiate is selected based on the "),g4e=n(fy,"CODE",{});var iqt=s(g4e);BEr=r(iqt,"model_type"),iqt.forEach(t),IEr=r(fy,` property of the config object (either
passed as an argument or loaded from `),h4e=n(fy,"CODE",{});var dqt=s(h4e);NEr=r(dqt,"pretrained_model_name_or_path"),dqt.forEach(t),qEr=r(fy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u4e=n(fy,"CODE",{});var cqt=s(u4e);jEr=r(cqt,"pretrained_model_name_or_path"),cqt.forEach(t),DEr=r(fy,":"),fy.forEach(t),GEr=i(Ba),Kx=n(Ba,"UL",{});var NYe=s(Kx);z4=n(NYe,"LI",{});var rOe=s(z4);p4e=n(rOe,"STRONG",{});var mqt=s(p4e);OEr=r(mqt,"detr"),mqt.forEach(t),VEr=r(rOe," \u2014 "),eY=n(rOe,"A",{href:!0});var fqt=s(eY);XEr=r(fqt,"DetrForObjectDetection"),fqt.forEach(t),zEr=r(rOe," (DETR model)"),rOe.forEach(t),WEr=i(NYe),W4=n(NYe,"LI",{});var tOe=s(W4);_4e=n(tOe,"STRONG",{});var gqt=s(_4e);QEr=r(gqt,"yolos"),gqt.forEach(t),UEr=r(tOe," \u2014 "),oY=n(tOe,"A",{href:!0});var hqt=s(oY);HEr=r(hqt,"YolosForObjectDetection"),hqt.forEach(t),JEr=r(tOe," (YOLOS model)"),tOe.forEach(t),NYe.forEach(t),YEr=i(Ba),Q4=n(Ba,"P",{});var aOe=s(Q4);KEr=r(aOe,"The model is set in evaluation mode by default using "),b4e=n(aOe,"CODE",{});var uqt=s(b4e);ZEr=r(uqt,"model.eval()"),uqt.forEach(t),e4r=r(aOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v4e=n(aOe,"CODE",{});var pqt=s(v4e);o4r=r(pqt,"model.train()"),pqt.forEach(t),aOe.forEach(t),r4r=i(Ba),T(U4.$$.fragment,Ba),Ba.forEach(t),Nl.forEach(t),AHe=i(m),hc=n(m,"H2",{class:!0});var qYe=s(hc);H4=n(qYe,"A",{id:!0,class:!0,href:!0});var _qt=s(H4);F4e=n(_qt,"SPAN",{});var bqt=s(F4e);T(Zx.$$.fragment,bqt),bqt.forEach(t),_qt.forEach(t),t4r=i(qYe),T4e=n(qYe,"SPAN",{});var vqt=s(T4e);a4r=r(vqt,"AutoModelForImageSegmentation"),vqt.forEach(t),qYe.forEach(t),LHe=i(m),or=n(m,"DIV",{class:!0});var ql=s(or);T(e$.$$.fragment,ql),n4r=i(ql),uc=n(ql,"P",{});var Une=s(uc);s4r=r(Une,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),rY=n(Une,"A",{href:!0});var Fqt=s(rY);l4r=r(Fqt,"from_pretrained()"),Fqt.forEach(t),i4r=r(Une," class method or the "),tY=n(Une,"A",{href:!0});var Tqt=s(tY);d4r=r(Tqt,"from_config()"),Tqt.forEach(t),c4r=r(Une,` class
method.`),Une.forEach(t),m4r=i(ql),o$=n(ql,"P",{});var jYe=s(o$);f4r=r(jYe,"This class cannot be instantiated directly using "),M4e=n(jYe,"CODE",{});var Mqt=s(M4e);g4r=r(Mqt,"__init__()"),Mqt.forEach(t),h4r=r(jYe," (throws an error)."),jYe.forEach(t),u4r=i(ql),Bt=n(ql,"DIV",{class:!0});var gy=s(Bt);T(r$.$$.fragment,gy),p4r=i(gy),E4e=n(gy,"P",{});var Eqt=s(E4e);_4r=r(Eqt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Eqt.forEach(t),b4r=i(gy),pc=n(gy,"P",{});var Hne=s(pc);v4r=r(Hne,`Note:
Loading a model from its configuration file does `),C4e=n(Hne,"STRONG",{});var Cqt=s(C4e);F4r=r(Cqt,"not"),Cqt.forEach(t),T4r=r(Hne,` load the model weights. It only affects the
model\u2019s configuration. Use `),aY=n(Hne,"A",{href:!0});var wqt=s(aY);M4r=r(wqt,"from_pretrained()"),wqt.forEach(t),E4r=r(Hne," to load the model weights."),Hne.forEach(t),C4r=i(gy),T(J4.$$.fragment,gy),gy.forEach(t),w4r=i(ql),To=n(ql,"DIV",{class:!0});var Ia=s(To);T(t$.$$.fragment,Ia),A4r=i(Ia),w4e=n(Ia,"P",{});var Aqt=s(w4e);L4r=r(Aqt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Aqt.forEach(t),y4r=i(Ia),gn=n(Ia,"P",{});var hy=s(gn);x4r=r(hy,"The model class to instantiate is selected based on the "),A4e=n(hy,"CODE",{});var Lqt=s(A4e);$4r=r(Lqt,"model_type"),Lqt.forEach(t),k4r=r(hy,` property of the config object (either
passed as an argument or loaded from `),L4e=n(hy,"CODE",{});var yqt=s(L4e);S4r=r(yqt,"pretrained_model_name_or_path"),yqt.forEach(t),R4r=r(hy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y4e=n(hy,"CODE",{});var xqt=s(y4e);P4r=r(xqt,"pretrained_model_name_or_path"),xqt.forEach(t),B4r=r(hy,":"),hy.forEach(t),I4r=i(Ia),x4e=n(Ia,"UL",{});var $qt=s(x4e);Y4=n($qt,"LI",{});var nOe=s(Y4);$4e=n(nOe,"STRONG",{});var kqt=s($4e);N4r=r(kqt,"detr"),kqt.forEach(t),q4r=r(nOe," \u2014 "),nY=n(nOe,"A",{href:!0});var Sqt=s(nY);j4r=r(Sqt,"DetrForSegmentation"),Sqt.forEach(t),D4r=r(nOe," (DETR model)"),nOe.forEach(t),$qt.forEach(t),G4r=i(Ia),K4=n(Ia,"P",{});var sOe=s(K4);O4r=r(sOe,"The model is set in evaluation mode by default using "),k4e=n(sOe,"CODE",{});var Rqt=s(k4e);V4r=r(Rqt,"model.eval()"),Rqt.forEach(t),X4r=r(sOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S4e=n(sOe,"CODE",{});var Pqt=s(S4e);z4r=r(Pqt,"model.train()"),Pqt.forEach(t),sOe.forEach(t),W4r=i(Ia),T(Z4.$$.fragment,Ia),Ia.forEach(t),ql.forEach(t),yHe=i(m),_c=n(m,"H2",{class:!0});var DYe=s(_c);eC=n(DYe,"A",{id:!0,class:!0,href:!0});var Bqt=s(eC);R4e=n(Bqt,"SPAN",{});var Iqt=s(R4e);T(a$.$$.fragment,Iqt),Iqt.forEach(t),Bqt.forEach(t),Q4r=i(DYe),P4e=n(DYe,"SPAN",{});var Nqt=s(P4e);U4r=r(Nqt,"AutoModelForSemanticSegmentation"),Nqt.forEach(t),DYe.forEach(t),xHe=i(m),rr=n(m,"DIV",{class:!0});var jl=s(rr);T(n$.$$.fragment,jl),H4r=i(jl),bc=n(jl,"P",{});var Jne=s(bc);J4r=r(Jne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),sY=n(Jne,"A",{href:!0});var qqt=s(sY);Y4r=r(qqt,"from_pretrained()"),qqt.forEach(t),K4r=r(Jne," class method or the "),lY=n(Jne,"A",{href:!0});var jqt=s(lY);Z4r=r(jqt,"from_config()"),jqt.forEach(t),eCr=r(Jne,` class
method.`),Jne.forEach(t),oCr=i(jl),s$=n(jl,"P",{});var GYe=s(s$);rCr=r(GYe,"This class cannot be instantiated directly using "),B4e=n(GYe,"CODE",{});var Dqt=s(B4e);tCr=r(Dqt,"__init__()"),Dqt.forEach(t),aCr=r(GYe," (throws an error)."),GYe.forEach(t),nCr=i(jl),It=n(jl,"DIV",{class:!0});var uy=s(It);T(l$.$$.fragment,uy),sCr=i(uy),I4e=n(uy,"P",{});var Gqt=s(I4e);lCr=r(Gqt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Gqt.forEach(t),iCr=i(uy),vc=n(uy,"P",{});var Yne=s(vc);dCr=r(Yne,`Note:
Loading a model from its configuration file does `),N4e=n(Yne,"STRONG",{});var Oqt=s(N4e);cCr=r(Oqt,"not"),Oqt.forEach(t),mCr=r(Yne,` load the model weights. It only affects the
model\u2019s configuration. Use `),iY=n(Yne,"A",{href:!0});var Vqt=s(iY);fCr=r(Vqt,"from_pretrained()"),Vqt.forEach(t),gCr=r(Yne," to load the model weights."),Yne.forEach(t),hCr=i(uy),T(oC.$$.fragment,uy),uy.forEach(t),uCr=i(jl),Mo=n(jl,"DIV",{class:!0});var Na=s(Mo);T(i$.$$.fragment,Na),pCr=i(Na),q4e=n(Na,"P",{});var Xqt=s(q4e);_Cr=r(Xqt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Xqt.forEach(t),bCr=i(Na),hn=n(Na,"P",{});var py=s(hn);vCr=r(py,"The model class to instantiate is selected based on the "),j4e=n(py,"CODE",{});var zqt=s(j4e);FCr=r(zqt,"model_type"),zqt.forEach(t),TCr=r(py,` property of the config object (either
passed as an argument or loaded from `),D4e=n(py,"CODE",{});var Wqt=s(D4e);MCr=r(Wqt,"pretrained_model_name_or_path"),Wqt.forEach(t),ECr=r(py,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G4e=n(py,"CODE",{});var Qqt=s(G4e);CCr=r(Qqt,"pretrained_model_name_or_path"),Qqt.forEach(t),wCr=r(py,":"),py.forEach(t),ACr=i(Na),it=n(Na,"UL",{});var Dl=s(it);rC=n(Dl,"LI",{});var lOe=s(rC);O4e=n(lOe,"STRONG",{});var Uqt=s(O4e);LCr=r(Uqt,"beit"),Uqt.forEach(t),yCr=r(lOe," \u2014 "),dY=n(lOe,"A",{href:!0});var Hqt=s(dY);xCr=r(Hqt,"BeitForSemanticSegmentation"),Hqt.forEach(t),$Cr=r(lOe," (BEiT model)"),lOe.forEach(t),kCr=i(Dl),tC=n(Dl,"LI",{});var iOe=s(tC);V4e=n(iOe,"STRONG",{});var Jqt=s(V4e);SCr=r(Jqt,"data2vec-vision"),Jqt.forEach(t),RCr=r(iOe," \u2014 "),cY=n(iOe,"A",{href:!0});var Yqt=s(cY);PCr=r(Yqt,"Data2VecVisionForSemanticSegmentation"),Yqt.forEach(t),BCr=r(iOe," (Data2VecVision model)"),iOe.forEach(t),ICr=i(Dl),aC=n(Dl,"LI",{});var dOe=s(aC);X4e=n(dOe,"STRONG",{});var Kqt=s(X4e);NCr=r(Kqt,"dpt"),Kqt.forEach(t),qCr=r(dOe," \u2014 "),mY=n(dOe,"A",{href:!0});var Zqt=s(mY);jCr=r(Zqt,"DPTForSemanticSegmentation"),Zqt.forEach(t),DCr=r(dOe," (DPT model)"),dOe.forEach(t),GCr=i(Dl),nC=n(Dl,"LI",{});var cOe=s(nC);z4e=n(cOe,"STRONG",{});var ejt=s(z4e);OCr=r(ejt,"mobilevit"),ejt.forEach(t),VCr=r(cOe," \u2014 "),fY=n(cOe,"A",{href:!0});var ojt=s(fY);XCr=r(ojt,"MobileViTForSemanticSegmentation"),ojt.forEach(t),zCr=r(cOe," (MobileViT model)"),cOe.forEach(t),WCr=i(Dl),sC=n(Dl,"LI",{});var mOe=s(sC);W4e=n(mOe,"STRONG",{});var rjt=s(W4e);QCr=r(rjt,"segformer"),rjt.forEach(t),UCr=r(mOe," \u2014 "),gY=n(mOe,"A",{href:!0});var tjt=s(gY);HCr=r(tjt,"SegformerForSemanticSegmentation"),tjt.forEach(t),JCr=r(mOe," (SegFormer model)"),mOe.forEach(t),Dl.forEach(t),YCr=i(Na),lC=n(Na,"P",{});var fOe=s(lC);KCr=r(fOe,"The model is set in evaluation mode by default using "),Q4e=n(fOe,"CODE",{});var ajt=s(Q4e);ZCr=r(ajt,"model.eval()"),ajt.forEach(t),e3r=r(fOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U4e=n(fOe,"CODE",{});var njt=s(U4e);o3r=r(njt,"model.train()"),njt.forEach(t),fOe.forEach(t),r3r=i(Na),T(iC.$$.fragment,Na),Na.forEach(t),jl.forEach(t),$He=i(m),Fc=n(m,"H2",{class:!0});var OYe=s(Fc);dC=n(OYe,"A",{id:!0,class:!0,href:!0});var sjt=s(dC);H4e=n(sjt,"SPAN",{});var ljt=s(H4e);T(d$.$$.fragment,ljt),ljt.forEach(t),sjt.forEach(t),t3r=i(OYe),J4e=n(OYe,"SPAN",{});var ijt=s(J4e);a3r=r(ijt,"AutoModelForInstanceSegmentation"),ijt.forEach(t),OYe.forEach(t),kHe=i(m),tr=n(m,"DIV",{class:!0});var Gl=s(tr);T(c$.$$.fragment,Gl),n3r=i(Gl),Tc=n(Gl,"P",{});var Kne=s(Tc);s3r=r(Kne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),hY=n(Kne,"A",{href:!0});var djt=s(hY);l3r=r(djt,"from_pretrained()"),djt.forEach(t),i3r=r(Kne," class method or the "),uY=n(Kne,"A",{href:!0});var cjt=s(uY);d3r=r(cjt,"from_config()"),cjt.forEach(t),c3r=r(Kne,` class
method.`),Kne.forEach(t),m3r=i(Gl),m$=n(Gl,"P",{});var VYe=s(m$);f3r=r(VYe,"This class cannot be instantiated directly using "),Y4e=n(VYe,"CODE",{});var mjt=s(Y4e);g3r=r(mjt,"__init__()"),mjt.forEach(t),h3r=r(VYe," (throws an error)."),VYe.forEach(t),u3r=i(Gl),Nt=n(Gl,"DIV",{class:!0});var _y=s(Nt);T(f$.$$.fragment,_y),p3r=i(_y),K4e=n(_y,"P",{});var fjt=s(K4e);_3r=r(fjt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),fjt.forEach(t),b3r=i(_y),Mc=n(_y,"P",{});var Zne=s(Mc);v3r=r(Zne,`Note:
Loading a model from its configuration file does `),Z4e=n(Zne,"STRONG",{});var gjt=s(Z4e);F3r=r(gjt,"not"),gjt.forEach(t),T3r=r(Zne,` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=n(Zne,"A",{href:!0});var hjt=s(pY);M3r=r(hjt,"from_pretrained()"),hjt.forEach(t),E3r=r(Zne," to load the model weights."),Zne.forEach(t),C3r=i(_y),T(cC.$$.fragment,_y),_y.forEach(t),w3r=i(Gl),Eo=n(Gl,"DIV",{class:!0});var qa=s(Eo);T(g$.$$.fragment,qa),A3r=i(qa),eCe=n(qa,"P",{});var ujt=s(eCe);L3r=r(ujt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),ujt.forEach(t),y3r=i(qa),un=n(qa,"P",{});var by=s(un);x3r=r(by,"The model class to instantiate is selected based on the "),oCe=n(by,"CODE",{});var pjt=s(oCe);$3r=r(pjt,"model_type"),pjt.forEach(t),k3r=r(by,` property of the config object (either
passed as an argument or loaded from `),rCe=n(by,"CODE",{});var _jt=s(rCe);S3r=r(_jt,"pretrained_model_name_or_path"),_jt.forEach(t),R3r=r(by,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tCe=n(by,"CODE",{});var bjt=s(tCe);P3r=r(bjt,"pretrained_model_name_or_path"),bjt.forEach(t),B3r=r(by,":"),by.forEach(t),I3r=i(qa),aCe=n(qa,"UL",{});var vjt=s(aCe);mC=n(vjt,"LI",{});var gOe=s(mC);nCe=n(gOe,"STRONG",{});var Fjt=s(nCe);N3r=r(Fjt,"maskformer"),Fjt.forEach(t),q3r=r(gOe," \u2014 "),_Y=n(gOe,"A",{href:!0});var Tjt=s(_Y);j3r=r(Tjt,"MaskFormerForInstanceSegmentation"),Tjt.forEach(t),D3r=r(gOe," (MaskFormer model)"),gOe.forEach(t),vjt.forEach(t),G3r=i(qa),fC=n(qa,"P",{});var hOe=s(fC);O3r=r(hOe,"The model is set in evaluation mode by default using "),sCe=n(hOe,"CODE",{});var Mjt=s(sCe);V3r=r(Mjt,"model.eval()"),Mjt.forEach(t),X3r=r(hOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lCe=n(hOe,"CODE",{});var Ejt=s(lCe);z3r=r(Ejt,"model.train()"),Ejt.forEach(t),hOe.forEach(t),W3r=i(qa),T(gC.$$.fragment,qa),qa.forEach(t),Gl.forEach(t),SHe=i(m),Ec=n(m,"H2",{class:!0});var XYe=s(Ec);hC=n(XYe,"A",{id:!0,class:!0,href:!0});var Cjt=s(hC);iCe=n(Cjt,"SPAN",{});var wjt=s(iCe);T(h$.$$.fragment,wjt),wjt.forEach(t),Cjt.forEach(t),Q3r=i(XYe),dCe=n(XYe,"SPAN",{});var Ajt=s(dCe);U3r=r(Ajt,"TFAutoModel"),Ajt.forEach(t),XYe.forEach(t),RHe=i(m),ar=n(m,"DIV",{class:!0});var Ol=s(ar);T(u$.$$.fragment,Ol),H3r=i(Ol),Cc=n(Ol,"P",{});var ese=s(Cc);J3r=r(ese,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),bY=n(ese,"A",{href:!0});var Ljt=s(bY);Y3r=r(Ljt,"from_pretrained()"),Ljt.forEach(t),K3r=r(ese," class method or the "),vY=n(ese,"A",{href:!0});var yjt=s(vY);Z3r=r(yjt,"from_config()"),yjt.forEach(t),e5r=r(ese,` class
method.`),ese.forEach(t),o5r=i(Ol),p$=n(Ol,"P",{});var zYe=s(p$);r5r=r(zYe,"This class cannot be instantiated directly using "),cCe=n(zYe,"CODE",{});var xjt=s(cCe);t5r=r(xjt,"__init__()"),xjt.forEach(t),a5r=r(zYe," (throws an error)."),zYe.forEach(t),n5r=i(Ol),qt=n(Ol,"DIV",{class:!0});var vy=s(qt);T(_$.$$.fragment,vy),s5r=i(vy),mCe=n(vy,"P",{});var $jt=s(mCe);l5r=r($jt,"Instantiates one of the base model classes of the library from a configuration."),$jt.forEach(t),i5r=i(vy),wc=n(vy,"P",{});var ose=s(wc);d5r=r(ose,`Note:
Loading a model from its configuration file does `),fCe=n(ose,"STRONG",{});var kjt=s(fCe);c5r=r(kjt,"not"),kjt.forEach(t),m5r=r(ose,` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=n(ose,"A",{href:!0});var Sjt=s(FY);f5r=r(Sjt,"from_pretrained()"),Sjt.forEach(t),g5r=r(ose," to load the model weights."),ose.forEach(t),h5r=i(vy),T(uC.$$.fragment,vy),vy.forEach(t),u5r=i(Ol),Rr=n(Ol,"DIV",{class:!0});var Vl=s(Rr);T(b$.$$.fragment,Vl),p5r=i(Vl),gCe=n(Vl,"P",{});var Rjt=s(gCe);_5r=r(Rjt,"Instantiate one of the base model classes of the library from a pretrained model."),Rjt.forEach(t),b5r=i(Vl),pn=n(Vl,"P",{});var Fy=s(pn);v5r=r(Fy,"The model class to instantiate is selected based on the "),hCe=n(Fy,"CODE",{});var Pjt=s(hCe);F5r=r(Pjt,"model_type"),Pjt.forEach(t),T5r=r(Fy,` property of the config object (either
passed as an argument or loaded from `),uCe=n(Fy,"CODE",{});var Bjt=s(uCe);M5r=r(Bjt,"pretrained_model_name_or_path"),Bjt.forEach(t),E5r=r(Fy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pCe=n(Fy,"CODE",{});var Ijt=s(pCe);C5r=r(Ijt,"pretrained_model_name_or_path"),Ijt.forEach(t),w5r=r(Fy,":"),Fy.forEach(t),A5r=i(Vl),P=n(Vl,"UL",{});var I=s(P);pC=n(I,"LI",{});var uOe=s(pC);_Ce=n(uOe,"STRONG",{});var Njt=s(_Ce);L5r=r(Njt,"albert"),Njt.forEach(t),y5r=r(uOe," \u2014 "),TY=n(uOe,"A",{href:!0});var qjt=s(TY);x5r=r(qjt,"TFAlbertModel"),qjt.forEach(t),$5r=r(uOe," (ALBERT model)"),uOe.forEach(t),k5r=i(I),_C=n(I,"LI",{});var pOe=s(_C);bCe=n(pOe,"STRONG",{});var jjt=s(bCe);S5r=r(jjt,"bart"),jjt.forEach(t),R5r=r(pOe," \u2014 "),MY=n(pOe,"A",{href:!0});var Djt=s(MY);P5r=r(Djt,"TFBartModel"),Djt.forEach(t),B5r=r(pOe," (BART model)"),pOe.forEach(t),I5r=i(I),bC=n(I,"LI",{});var _Oe=s(bC);vCe=n(_Oe,"STRONG",{});var Gjt=s(vCe);N5r=r(Gjt,"bert"),Gjt.forEach(t),q5r=r(_Oe," \u2014 "),EY=n(_Oe,"A",{href:!0});var Ojt=s(EY);j5r=r(Ojt,"TFBertModel"),Ojt.forEach(t),D5r=r(_Oe," (BERT model)"),_Oe.forEach(t),G5r=i(I),vC=n(I,"LI",{});var bOe=s(vC);FCe=n(bOe,"STRONG",{});var Vjt=s(FCe);O5r=r(Vjt,"blenderbot"),Vjt.forEach(t),V5r=r(bOe," \u2014 "),CY=n(bOe,"A",{href:!0});var Xjt=s(CY);X5r=r(Xjt,"TFBlenderbotModel"),Xjt.forEach(t),z5r=r(bOe," (Blenderbot model)"),bOe.forEach(t),W5r=i(I),FC=n(I,"LI",{});var vOe=s(FC);TCe=n(vOe,"STRONG",{});var zjt=s(TCe);Q5r=r(zjt,"blenderbot-small"),zjt.forEach(t),U5r=r(vOe," \u2014 "),wY=n(vOe,"A",{href:!0});var Wjt=s(wY);H5r=r(Wjt,"TFBlenderbotSmallModel"),Wjt.forEach(t),J5r=r(vOe," (BlenderbotSmall model)"),vOe.forEach(t),Y5r=i(I),TC=n(I,"LI",{});var FOe=s(TC);MCe=n(FOe,"STRONG",{});var Qjt=s(MCe);K5r=r(Qjt,"camembert"),Qjt.forEach(t),Z5r=r(FOe," \u2014 "),AY=n(FOe,"A",{href:!0});var Ujt=s(AY);e0r=r(Ujt,"TFCamembertModel"),Ujt.forEach(t),o0r=r(FOe," (CamemBERT model)"),FOe.forEach(t),r0r=i(I),MC=n(I,"LI",{});var TOe=s(MC);ECe=n(TOe,"STRONG",{});var Hjt=s(ECe);t0r=r(Hjt,"clip"),Hjt.forEach(t),a0r=r(TOe," \u2014 "),LY=n(TOe,"A",{href:!0});var Jjt=s(LY);n0r=r(Jjt,"TFCLIPModel"),Jjt.forEach(t),s0r=r(TOe," (CLIP model)"),TOe.forEach(t),l0r=i(I),EC=n(I,"LI",{});var MOe=s(EC);CCe=n(MOe,"STRONG",{});var Yjt=s(CCe);i0r=r(Yjt,"convbert"),Yjt.forEach(t),d0r=r(MOe," \u2014 "),yY=n(MOe,"A",{href:!0});var Kjt=s(yY);c0r=r(Kjt,"TFConvBertModel"),Kjt.forEach(t),m0r=r(MOe," (ConvBERT model)"),MOe.forEach(t),f0r=i(I),CC=n(I,"LI",{});var EOe=s(CC);wCe=n(EOe,"STRONG",{});var Zjt=s(wCe);g0r=r(Zjt,"convnext"),Zjt.forEach(t),h0r=r(EOe," \u2014 "),xY=n(EOe,"A",{href:!0});var eDt=s(xY);u0r=r(eDt,"TFConvNextModel"),eDt.forEach(t),p0r=r(EOe," (ConvNeXT model)"),EOe.forEach(t),_0r=i(I),wC=n(I,"LI",{});var COe=s(wC);ACe=n(COe,"STRONG",{});var oDt=s(ACe);b0r=r(oDt,"ctrl"),oDt.forEach(t),v0r=r(COe," \u2014 "),$Y=n(COe,"A",{href:!0});var rDt=s($Y);F0r=r(rDt,"TFCTRLModel"),rDt.forEach(t),T0r=r(COe," (CTRL model)"),COe.forEach(t),M0r=i(I),AC=n(I,"LI",{});var wOe=s(AC);LCe=n(wOe,"STRONG",{});var tDt=s(LCe);E0r=r(tDt,"data2vec-vision"),tDt.forEach(t),C0r=r(wOe," \u2014 "),kY=n(wOe,"A",{href:!0});var aDt=s(kY);w0r=r(aDt,"TFData2VecVisionModel"),aDt.forEach(t),A0r=r(wOe," (Data2VecVision model)"),wOe.forEach(t),L0r=i(I),LC=n(I,"LI",{});var AOe=s(LC);yCe=n(AOe,"STRONG",{});var nDt=s(yCe);y0r=r(nDt,"deberta"),nDt.forEach(t),x0r=r(AOe," \u2014 "),SY=n(AOe,"A",{href:!0});var sDt=s(SY);$0r=r(sDt,"TFDebertaModel"),sDt.forEach(t),k0r=r(AOe," (DeBERTa model)"),AOe.forEach(t),S0r=i(I),yC=n(I,"LI",{});var LOe=s(yC);xCe=n(LOe,"STRONG",{});var lDt=s(xCe);R0r=r(lDt,"deberta-v2"),lDt.forEach(t),P0r=r(LOe," \u2014 "),RY=n(LOe,"A",{href:!0});var iDt=s(RY);B0r=r(iDt,"TFDebertaV2Model"),iDt.forEach(t),I0r=r(LOe," (DeBERTa-v2 model)"),LOe.forEach(t),N0r=i(I),xC=n(I,"LI",{});var yOe=s(xC);$Ce=n(yOe,"STRONG",{});var dDt=s($Ce);q0r=r(dDt,"deit"),dDt.forEach(t),j0r=r(yOe," \u2014 "),PY=n(yOe,"A",{href:!0});var cDt=s(PY);D0r=r(cDt,"TFDeiTModel"),cDt.forEach(t),G0r=r(yOe," (DeiT model)"),yOe.forEach(t),O0r=i(I),$C=n(I,"LI",{});var xOe=s($C);kCe=n(xOe,"STRONG",{});var mDt=s(kCe);V0r=r(mDt,"distilbert"),mDt.forEach(t),X0r=r(xOe," \u2014 "),BY=n(xOe,"A",{href:!0});var fDt=s(BY);z0r=r(fDt,"TFDistilBertModel"),fDt.forEach(t),W0r=r(xOe," (DistilBERT model)"),xOe.forEach(t),Q0r=i(I),kC=n(I,"LI",{});var $Oe=s(kC);SCe=n($Oe,"STRONG",{});var gDt=s(SCe);U0r=r(gDt,"dpr"),gDt.forEach(t),H0r=r($Oe," \u2014 "),IY=n($Oe,"A",{href:!0});var hDt=s(IY);J0r=r(hDt,"TFDPRQuestionEncoder"),hDt.forEach(t),Y0r=r($Oe," (DPR model)"),$Oe.forEach(t),K0r=i(I),SC=n(I,"LI",{});var kOe=s(SC);RCe=n(kOe,"STRONG",{});var uDt=s(RCe);Z0r=r(uDt,"electra"),uDt.forEach(t),ewr=r(kOe," \u2014 "),NY=n(kOe,"A",{href:!0});var pDt=s(NY);owr=r(pDt,"TFElectraModel"),pDt.forEach(t),rwr=r(kOe," (ELECTRA model)"),kOe.forEach(t),twr=i(I),RC=n(I,"LI",{});var SOe=s(RC);PCe=n(SOe,"STRONG",{});var _Dt=s(PCe);awr=r(_Dt,"flaubert"),_Dt.forEach(t),nwr=r(SOe," \u2014 "),qY=n(SOe,"A",{href:!0});var bDt=s(qY);swr=r(bDt,"TFFlaubertModel"),bDt.forEach(t),lwr=r(SOe," (FlauBERT model)"),SOe.forEach(t),iwr=i(I),il=n(I,"LI",{});var cP=s(il);BCe=n(cP,"STRONG",{});var vDt=s(BCe);dwr=r(vDt,"funnel"),vDt.forEach(t),cwr=r(cP," \u2014 "),jY=n(cP,"A",{href:!0});var FDt=s(jY);mwr=r(FDt,"TFFunnelModel"),FDt.forEach(t),fwr=r(cP," or "),DY=n(cP,"A",{href:!0});var TDt=s(DY);gwr=r(TDt,"TFFunnelBaseModel"),TDt.forEach(t),hwr=r(cP," (Funnel Transformer model)"),cP.forEach(t),uwr=i(I),PC=n(I,"LI",{});var ROe=s(PC);ICe=n(ROe,"STRONG",{});var MDt=s(ICe);pwr=r(MDt,"gpt2"),MDt.forEach(t),_wr=r(ROe," \u2014 "),GY=n(ROe,"A",{href:!0});var EDt=s(GY);bwr=r(EDt,"TFGPT2Model"),EDt.forEach(t),vwr=r(ROe," (OpenAI GPT-2 model)"),ROe.forEach(t),Fwr=i(I),BC=n(I,"LI",{});var POe=s(BC);NCe=n(POe,"STRONG",{});var CDt=s(NCe);Twr=r(CDt,"gptj"),CDt.forEach(t),Mwr=r(POe," \u2014 "),OY=n(POe,"A",{href:!0});var wDt=s(OY);Ewr=r(wDt,"TFGPTJModel"),wDt.forEach(t),Cwr=r(POe," (GPT-J model)"),POe.forEach(t),wwr=i(I),IC=n(I,"LI",{});var BOe=s(IC);qCe=n(BOe,"STRONG",{});var ADt=s(qCe);Awr=r(ADt,"hubert"),ADt.forEach(t),Lwr=r(BOe," \u2014 "),VY=n(BOe,"A",{href:!0});var LDt=s(VY);ywr=r(LDt,"TFHubertModel"),LDt.forEach(t),xwr=r(BOe," (Hubert model)"),BOe.forEach(t),$wr=i(I),NC=n(I,"LI",{});var IOe=s(NC);jCe=n(IOe,"STRONG",{});var yDt=s(jCe);kwr=r(yDt,"layoutlm"),yDt.forEach(t),Swr=r(IOe," \u2014 "),XY=n(IOe,"A",{href:!0});var xDt=s(XY);Rwr=r(xDt,"TFLayoutLMModel"),xDt.forEach(t),Pwr=r(IOe," (LayoutLM model)"),IOe.forEach(t),Bwr=i(I),qC=n(I,"LI",{});var NOe=s(qC);DCe=n(NOe,"STRONG",{});var $Dt=s(DCe);Iwr=r($Dt,"layoutlmv3"),$Dt.forEach(t),Nwr=r(NOe," \u2014 "),zY=n(NOe,"A",{href:!0});var kDt=s(zY);qwr=r(kDt,"TFLayoutLMv3Model"),kDt.forEach(t),jwr=r(NOe," (LayoutLMv3 model)"),NOe.forEach(t),Dwr=i(I),jC=n(I,"LI",{});var qOe=s(jC);GCe=n(qOe,"STRONG",{});var SDt=s(GCe);Gwr=r(SDt,"led"),SDt.forEach(t),Owr=r(qOe," \u2014 "),WY=n(qOe,"A",{href:!0});var RDt=s(WY);Vwr=r(RDt,"TFLEDModel"),RDt.forEach(t),Xwr=r(qOe," (LED model)"),qOe.forEach(t),zwr=i(I),DC=n(I,"LI",{});var jOe=s(DC);OCe=n(jOe,"STRONG",{});var PDt=s(OCe);Wwr=r(PDt,"longformer"),PDt.forEach(t),Qwr=r(jOe," \u2014 "),QY=n(jOe,"A",{href:!0});var BDt=s(QY);Uwr=r(BDt,"TFLongformerModel"),BDt.forEach(t),Hwr=r(jOe," (Longformer model)"),jOe.forEach(t),Jwr=i(I),GC=n(I,"LI",{});var DOe=s(GC);VCe=n(DOe,"STRONG",{});var IDt=s(VCe);Ywr=r(IDt,"lxmert"),IDt.forEach(t),Kwr=r(DOe," \u2014 "),UY=n(DOe,"A",{href:!0});var NDt=s(UY);Zwr=r(NDt,"TFLxmertModel"),NDt.forEach(t),e6r=r(DOe," (LXMERT model)"),DOe.forEach(t),o6r=i(I),OC=n(I,"LI",{});var GOe=s(OC);XCe=n(GOe,"STRONG",{});var qDt=s(XCe);r6r=r(qDt,"marian"),qDt.forEach(t),t6r=r(GOe," \u2014 "),HY=n(GOe,"A",{href:!0});var jDt=s(HY);a6r=r(jDt,"TFMarianModel"),jDt.forEach(t),n6r=r(GOe," (Marian model)"),GOe.forEach(t),s6r=i(I),VC=n(I,"LI",{});var OOe=s(VC);zCe=n(OOe,"STRONG",{});var DDt=s(zCe);l6r=r(DDt,"mbart"),DDt.forEach(t),i6r=r(OOe," \u2014 "),JY=n(OOe,"A",{href:!0});var GDt=s(JY);d6r=r(GDt,"TFMBartModel"),GDt.forEach(t),c6r=r(OOe," (mBART model)"),OOe.forEach(t),m6r=i(I),XC=n(I,"LI",{});var VOe=s(XC);WCe=n(VOe,"STRONG",{});var ODt=s(WCe);f6r=r(ODt,"mobilebert"),ODt.forEach(t),g6r=r(VOe," \u2014 "),YY=n(VOe,"A",{href:!0});var VDt=s(YY);h6r=r(VDt,"TFMobileBertModel"),VDt.forEach(t),u6r=r(VOe," (MobileBERT model)"),VOe.forEach(t),p6r=i(I),zC=n(I,"LI",{});var XOe=s(zC);QCe=n(XOe,"STRONG",{});var XDt=s(QCe);_6r=r(XDt,"mobilevit"),XDt.forEach(t),b6r=r(XOe," \u2014 "),KY=n(XOe,"A",{href:!0});var zDt=s(KY);v6r=r(zDt,"TFMobileViTModel"),zDt.forEach(t),F6r=r(XOe," (MobileViT model)"),XOe.forEach(t),T6r=i(I),WC=n(I,"LI",{});var zOe=s(WC);UCe=n(zOe,"STRONG",{});var WDt=s(UCe);M6r=r(WDt,"mpnet"),WDt.forEach(t),E6r=r(zOe," \u2014 "),ZY=n(zOe,"A",{href:!0});var QDt=s(ZY);C6r=r(QDt,"TFMPNetModel"),QDt.forEach(t),w6r=r(zOe," (MPNet model)"),zOe.forEach(t),A6r=i(I),QC=n(I,"LI",{});var WOe=s(QC);HCe=n(WOe,"STRONG",{});var UDt=s(HCe);L6r=r(UDt,"mt5"),UDt.forEach(t),y6r=r(WOe," \u2014 "),eK=n(WOe,"A",{href:!0});var HDt=s(eK);x6r=r(HDt,"TFMT5Model"),HDt.forEach(t),$6r=r(WOe," (MT5 model)"),WOe.forEach(t),k6r=i(I),UC=n(I,"LI",{});var QOe=s(UC);JCe=n(QOe,"STRONG",{});var JDt=s(JCe);S6r=r(JDt,"openai-gpt"),JDt.forEach(t),R6r=r(QOe," \u2014 "),oK=n(QOe,"A",{href:!0});var YDt=s(oK);P6r=r(YDt,"TFOpenAIGPTModel"),YDt.forEach(t),B6r=r(QOe," (OpenAI GPT model)"),QOe.forEach(t),I6r=i(I),HC=n(I,"LI",{});var UOe=s(HC);YCe=n(UOe,"STRONG",{});var KDt=s(YCe);N6r=r(KDt,"opt"),KDt.forEach(t),q6r=r(UOe," \u2014 "),rK=n(UOe,"A",{href:!0});var ZDt=s(rK);j6r=r(ZDt,"TFOPTModel"),ZDt.forEach(t),D6r=r(UOe," (OPT model)"),UOe.forEach(t),G6r=i(I),JC=n(I,"LI",{});var HOe=s(JC);KCe=n(HOe,"STRONG",{});var eGt=s(KCe);O6r=r(eGt,"pegasus"),eGt.forEach(t),V6r=r(HOe," \u2014 "),tK=n(HOe,"A",{href:!0});var oGt=s(tK);X6r=r(oGt,"TFPegasusModel"),oGt.forEach(t),z6r=r(HOe," (Pegasus model)"),HOe.forEach(t),W6r=i(I),YC=n(I,"LI",{});var JOe=s(YC);ZCe=n(JOe,"STRONG",{});var rGt=s(ZCe);Q6r=r(rGt,"regnet"),rGt.forEach(t),U6r=r(JOe," \u2014 "),aK=n(JOe,"A",{href:!0});var tGt=s(aK);H6r=r(tGt,"TFRegNetModel"),tGt.forEach(t),J6r=r(JOe," (RegNet model)"),JOe.forEach(t),Y6r=i(I),KC=n(I,"LI",{});var YOe=s(KC);e3e=n(YOe,"STRONG",{});var aGt=s(e3e);K6r=r(aGt,"rembert"),aGt.forEach(t),Z6r=r(YOe," \u2014 "),nK=n(YOe,"A",{href:!0});var nGt=s(nK);eAr=r(nGt,"TFRemBertModel"),nGt.forEach(t),oAr=r(YOe," (RemBERT model)"),YOe.forEach(t),rAr=i(I),ZC=n(I,"LI",{});var KOe=s(ZC);o3e=n(KOe,"STRONG",{});var sGt=s(o3e);tAr=r(sGt,"resnet"),sGt.forEach(t),aAr=r(KOe," \u2014 "),sK=n(KOe,"A",{href:!0});var lGt=s(sK);nAr=r(lGt,"TFResNetModel"),lGt.forEach(t),sAr=r(KOe," (ResNet model)"),KOe.forEach(t),lAr=i(I),e3=n(I,"LI",{});var ZOe=s(e3);r3e=n(ZOe,"STRONG",{});var iGt=s(r3e);iAr=r(iGt,"roberta"),iGt.forEach(t),dAr=r(ZOe," \u2014 "),lK=n(ZOe,"A",{href:!0});var dGt=s(lK);cAr=r(dGt,"TFRobertaModel"),dGt.forEach(t),mAr=r(ZOe," (RoBERTa model)"),ZOe.forEach(t),fAr=i(I),o3=n(I,"LI",{});var eVe=s(o3);t3e=n(eVe,"STRONG",{});var cGt=s(t3e);gAr=r(cGt,"roformer"),cGt.forEach(t),hAr=r(eVe," \u2014 "),iK=n(eVe,"A",{href:!0});var mGt=s(iK);uAr=r(mGt,"TFRoFormerModel"),mGt.forEach(t),pAr=r(eVe," (RoFormer model)"),eVe.forEach(t),_Ar=i(I),r3=n(I,"LI",{});var oVe=s(r3);a3e=n(oVe,"STRONG",{});var fGt=s(a3e);bAr=r(fGt,"segformer"),fGt.forEach(t),vAr=r(oVe," \u2014 "),dK=n(oVe,"A",{href:!0});var gGt=s(dK);FAr=r(gGt,"TFSegformerModel"),gGt.forEach(t),TAr=r(oVe," (SegFormer model)"),oVe.forEach(t),MAr=i(I),t3=n(I,"LI",{});var rVe=s(t3);n3e=n(rVe,"STRONG",{});var hGt=s(n3e);EAr=r(hGt,"speech_to_text"),hGt.forEach(t),CAr=r(rVe," \u2014 "),cK=n(rVe,"A",{href:!0});var uGt=s(cK);wAr=r(uGt,"TFSpeech2TextModel"),uGt.forEach(t),AAr=r(rVe," (Speech2Text model)"),rVe.forEach(t),LAr=i(I),a3=n(I,"LI",{});var tVe=s(a3);s3e=n(tVe,"STRONG",{});var pGt=s(s3e);yAr=r(pGt,"swin"),pGt.forEach(t),xAr=r(tVe," \u2014 "),mK=n(tVe,"A",{href:!0});var _Gt=s(mK);$Ar=r(_Gt,"TFSwinModel"),_Gt.forEach(t),kAr=r(tVe," (Swin Transformer model)"),tVe.forEach(t),SAr=i(I),n3=n(I,"LI",{});var aVe=s(n3);l3e=n(aVe,"STRONG",{});var bGt=s(l3e);RAr=r(bGt,"t5"),bGt.forEach(t),PAr=r(aVe," \u2014 "),fK=n(aVe,"A",{href:!0});var vGt=s(fK);BAr=r(vGt,"TFT5Model"),vGt.forEach(t),IAr=r(aVe," (T5 model)"),aVe.forEach(t),NAr=i(I),s3=n(I,"LI",{});var nVe=s(s3);i3e=n(nVe,"STRONG",{});var FGt=s(i3e);qAr=r(FGt,"tapas"),FGt.forEach(t),jAr=r(nVe," \u2014 "),gK=n(nVe,"A",{href:!0});var TGt=s(gK);DAr=r(TGt,"TFTapasModel"),TGt.forEach(t),GAr=r(nVe," (TAPAS model)"),nVe.forEach(t),OAr=i(I),l3=n(I,"LI",{});var sVe=s(l3);d3e=n(sVe,"STRONG",{});var MGt=s(d3e);VAr=r(MGt,"transfo-xl"),MGt.forEach(t),XAr=r(sVe," \u2014 "),hK=n(sVe,"A",{href:!0});var EGt=s(hK);zAr=r(EGt,"TFTransfoXLModel"),EGt.forEach(t),WAr=r(sVe," (Transformer-XL model)"),sVe.forEach(t),QAr=i(I),i3=n(I,"LI",{});var lVe=s(i3);c3e=n(lVe,"STRONG",{});var CGt=s(c3e);UAr=r(CGt,"vit"),CGt.forEach(t),HAr=r(lVe," \u2014 "),uK=n(lVe,"A",{href:!0});var wGt=s(uK);JAr=r(wGt,"TFViTModel"),wGt.forEach(t),YAr=r(lVe," (ViT model)"),lVe.forEach(t),KAr=i(I),d3=n(I,"LI",{});var iVe=s(d3);m3e=n(iVe,"STRONG",{});var AGt=s(m3e);ZAr=r(AGt,"vit_mae"),AGt.forEach(t),e7r=r(iVe," \u2014 "),pK=n(iVe,"A",{href:!0});var LGt=s(pK);o7r=r(LGt,"TFViTMAEModel"),LGt.forEach(t),r7r=r(iVe," (ViTMAE model)"),iVe.forEach(t),t7r=i(I),c3=n(I,"LI",{});var dVe=s(c3);f3e=n(dVe,"STRONG",{});var yGt=s(f3e);a7r=r(yGt,"wav2vec2"),yGt.forEach(t),n7r=r(dVe," \u2014 "),_K=n(dVe,"A",{href:!0});var xGt=s(_K);s7r=r(xGt,"TFWav2Vec2Model"),xGt.forEach(t),l7r=r(dVe," (Wav2Vec2 model)"),dVe.forEach(t),i7r=i(I),m3=n(I,"LI",{});var cVe=s(m3);g3e=n(cVe,"STRONG",{});var $Gt=s(g3e);d7r=r($Gt,"xglm"),$Gt.forEach(t),c7r=r(cVe," \u2014 "),bK=n(cVe,"A",{href:!0});var kGt=s(bK);m7r=r(kGt,"TFXGLMModel"),kGt.forEach(t),f7r=r(cVe," (XGLM model)"),cVe.forEach(t),g7r=i(I),f3=n(I,"LI",{});var mVe=s(f3);h3e=n(mVe,"STRONG",{});var SGt=s(h3e);h7r=r(SGt,"xlm"),SGt.forEach(t),u7r=r(mVe," \u2014 "),vK=n(mVe,"A",{href:!0});var RGt=s(vK);p7r=r(RGt,"TFXLMModel"),RGt.forEach(t),_7r=r(mVe," (XLM model)"),mVe.forEach(t),b7r=i(I),g3=n(I,"LI",{});var fVe=s(g3);u3e=n(fVe,"STRONG",{});var PGt=s(u3e);v7r=r(PGt,"xlm-roberta"),PGt.forEach(t),F7r=r(fVe," \u2014 "),FK=n(fVe,"A",{href:!0});var BGt=s(FK);T7r=r(BGt,"TFXLMRobertaModel"),BGt.forEach(t),M7r=r(fVe," (XLM-RoBERTa model)"),fVe.forEach(t),E7r=i(I),h3=n(I,"LI",{});var gVe=s(h3);p3e=n(gVe,"STRONG",{});var IGt=s(p3e);C7r=r(IGt,"xlnet"),IGt.forEach(t),w7r=r(gVe," \u2014 "),TK=n(gVe,"A",{href:!0});var NGt=s(TK);A7r=r(NGt,"TFXLNetModel"),NGt.forEach(t),L7r=r(gVe," (XLNet model)"),gVe.forEach(t),I.forEach(t),y7r=i(Vl),T(u3.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),PHe=i(m),Ac=n(m,"H2",{class:!0});var WYe=s(Ac);p3=n(WYe,"A",{id:!0,class:!0,href:!0});var qGt=s(p3);_3e=n(qGt,"SPAN",{});var jGt=s(_3e);T(v$.$$.fragment,jGt),jGt.forEach(t),qGt.forEach(t),x7r=i(WYe),b3e=n(WYe,"SPAN",{});var DGt=s(b3e);$7r=r(DGt,"TFAutoModelForPreTraining"),DGt.forEach(t),WYe.forEach(t),BHe=i(m),nr=n(m,"DIV",{class:!0});var Xl=s(nr);T(F$.$$.fragment,Xl),k7r=i(Xl),Lc=n(Xl,"P",{});var rse=s(Lc);S7r=r(rse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),MK=n(rse,"A",{href:!0});var GGt=s(MK);R7r=r(GGt,"from_pretrained()"),GGt.forEach(t),P7r=r(rse," class method or the "),EK=n(rse,"A",{href:!0});var OGt=s(EK);B7r=r(OGt,"from_config()"),OGt.forEach(t),I7r=r(rse,` class
method.`),rse.forEach(t),N7r=i(Xl),T$=n(Xl,"P",{});var QYe=s(T$);q7r=r(QYe,"This class cannot be instantiated directly using "),v3e=n(QYe,"CODE",{});var VGt=s(v3e);j7r=r(VGt,"__init__()"),VGt.forEach(t),D7r=r(QYe," (throws an error)."),QYe.forEach(t),G7r=i(Xl),jt=n(Xl,"DIV",{class:!0});var Ty=s(jt);T(M$.$$.fragment,Ty),O7r=i(Ty),F3e=n(Ty,"P",{});var XGt=s(F3e);V7r=r(XGt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),XGt.forEach(t),X7r=i(Ty),yc=n(Ty,"P",{});var tse=s(yc);z7r=r(tse,`Note:
Loading a model from its configuration file does `),T3e=n(tse,"STRONG",{});var zGt=s(T3e);W7r=r(zGt,"not"),zGt.forEach(t),Q7r=r(tse,` load the model weights. It only affects the
model\u2019s configuration. Use `),CK=n(tse,"A",{href:!0});var WGt=s(CK);U7r=r(WGt,"from_pretrained()"),WGt.forEach(t),H7r=r(tse," to load the model weights."),tse.forEach(t),J7r=i(Ty),T(_3.$$.fragment,Ty),Ty.forEach(t),Y7r=i(Xl),Pr=n(Xl,"DIV",{class:!0});var zl=s(Pr);T(E$.$$.fragment,zl),K7r=i(zl),M3e=n(zl,"P",{});var QGt=s(M3e);Z7r=r(QGt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),QGt.forEach(t),eLr=i(zl),_n=n(zl,"P",{});var My=s(_n);oLr=r(My,"The model class to instantiate is selected based on the "),E3e=n(My,"CODE",{});var UGt=s(E3e);rLr=r(UGt,"model_type"),UGt.forEach(t),tLr=r(My,` property of the config object (either
passed as an argument or loaded from `),C3e=n(My,"CODE",{});var HGt=s(C3e);aLr=r(HGt,"pretrained_model_name_or_path"),HGt.forEach(t),nLr=r(My,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w3e=n(My,"CODE",{});var JGt=s(w3e);sLr=r(JGt,"pretrained_model_name_or_path"),JGt.forEach(t),lLr=r(My,":"),My.forEach(t),iLr=i(zl),se=n(zl,"UL",{});var le=s(se);b3=n(le,"LI",{});var hVe=s(b3);A3e=n(hVe,"STRONG",{});var YGt=s(A3e);dLr=r(YGt,"albert"),YGt.forEach(t),cLr=r(hVe," \u2014 "),wK=n(hVe,"A",{href:!0});var KGt=s(wK);mLr=r(KGt,"TFAlbertForPreTraining"),KGt.forEach(t),fLr=r(hVe," (ALBERT model)"),hVe.forEach(t),gLr=i(le),v3=n(le,"LI",{});var uVe=s(v3);L3e=n(uVe,"STRONG",{});var ZGt=s(L3e);hLr=r(ZGt,"bart"),ZGt.forEach(t),uLr=r(uVe," \u2014 "),AK=n(uVe,"A",{href:!0});var eOt=s(AK);pLr=r(eOt,"TFBartForConditionalGeneration"),eOt.forEach(t),_Lr=r(uVe," (BART model)"),uVe.forEach(t),bLr=i(le),F3=n(le,"LI",{});var pVe=s(F3);y3e=n(pVe,"STRONG",{});var oOt=s(y3e);vLr=r(oOt,"bert"),oOt.forEach(t),FLr=r(pVe," \u2014 "),LK=n(pVe,"A",{href:!0});var rOt=s(LK);TLr=r(rOt,"TFBertForPreTraining"),rOt.forEach(t),MLr=r(pVe," (BERT model)"),pVe.forEach(t),ELr=i(le),T3=n(le,"LI",{});var _Ve=s(T3);x3e=n(_Ve,"STRONG",{});var tOt=s(x3e);CLr=r(tOt,"camembert"),tOt.forEach(t),wLr=r(_Ve," \u2014 "),yK=n(_Ve,"A",{href:!0});var aOt=s(yK);ALr=r(aOt,"TFCamembertForMaskedLM"),aOt.forEach(t),LLr=r(_Ve," (CamemBERT model)"),_Ve.forEach(t),yLr=i(le),M3=n(le,"LI",{});var bVe=s(M3);$3e=n(bVe,"STRONG",{});var nOt=s($3e);xLr=r(nOt,"ctrl"),nOt.forEach(t),$Lr=r(bVe," \u2014 "),xK=n(bVe,"A",{href:!0});var sOt=s(xK);kLr=r(sOt,"TFCTRLLMHeadModel"),sOt.forEach(t),SLr=r(bVe," (CTRL model)"),bVe.forEach(t),RLr=i(le),E3=n(le,"LI",{});var vVe=s(E3);k3e=n(vVe,"STRONG",{});var lOt=s(k3e);PLr=r(lOt,"distilbert"),lOt.forEach(t),BLr=r(vVe," \u2014 "),$K=n(vVe,"A",{href:!0});var iOt=s($K);ILr=r(iOt,"TFDistilBertForMaskedLM"),iOt.forEach(t),NLr=r(vVe," (DistilBERT model)"),vVe.forEach(t),qLr=i(le),C3=n(le,"LI",{});var FVe=s(C3);S3e=n(FVe,"STRONG",{});var dOt=s(S3e);jLr=r(dOt,"electra"),dOt.forEach(t),DLr=r(FVe," \u2014 "),kK=n(FVe,"A",{href:!0});var cOt=s(kK);GLr=r(cOt,"TFElectraForPreTraining"),cOt.forEach(t),OLr=r(FVe," (ELECTRA model)"),FVe.forEach(t),VLr=i(le),w3=n(le,"LI",{});var TVe=s(w3);R3e=n(TVe,"STRONG",{});var mOt=s(R3e);XLr=r(mOt,"flaubert"),mOt.forEach(t),zLr=r(TVe," \u2014 "),SK=n(TVe,"A",{href:!0});var fOt=s(SK);WLr=r(fOt,"TFFlaubertWithLMHeadModel"),fOt.forEach(t),QLr=r(TVe," (FlauBERT model)"),TVe.forEach(t),ULr=i(le),A3=n(le,"LI",{});var MVe=s(A3);P3e=n(MVe,"STRONG",{});var gOt=s(P3e);HLr=r(gOt,"funnel"),gOt.forEach(t),JLr=r(MVe," \u2014 "),RK=n(MVe,"A",{href:!0});var hOt=s(RK);YLr=r(hOt,"TFFunnelForPreTraining"),hOt.forEach(t),KLr=r(MVe," (Funnel Transformer model)"),MVe.forEach(t),ZLr=i(le),L3=n(le,"LI",{});var EVe=s(L3);B3e=n(EVe,"STRONG",{});var uOt=s(B3e);eyr=r(uOt,"gpt2"),uOt.forEach(t),oyr=r(EVe," \u2014 "),PK=n(EVe,"A",{href:!0});var pOt=s(PK);ryr=r(pOt,"TFGPT2LMHeadModel"),pOt.forEach(t),tyr=r(EVe," (OpenAI GPT-2 model)"),EVe.forEach(t),ayr=i(le),y3=n(le,"LI",{});var CVe=s(y3);I3e=n(CVe,"STRONG",{});var _Ot=s(I3e);nyr=r(_Ot,"layoutlm"),_Ot.forEach(t),syr=r(CVe," \u2014 "),BK=n(CVe,"A",{href:!0});var bOt=s(BK);lyr=r(bOt,"TFLayoutLMForMaskedLM"),bOt.forEach(t),iyr=r(CVe," (LayoutLM model)"),CVe.forEach(t),dyr=i(le),x3=n(le,"LI",{});var wVe=s(x3);N3e=n(wVe,"STRONG",{});var vOt=s(N3e);cyr=r(vOt,"lxmert"),vOt.forEach(t),myr=r(wVe," \u2014 "),IK=n(wVe,"A",{href:!0});var FOt=s(IK);fyr=r(FOt,"TFLxmertForPreTraining"),FOt.forEach(t),gyr=r(wVe," (LXMERT model)"),wVe.forEach(t),hyr=i(le),$3=n(le,"LI",{});var AVe=s($3);q3e=n(AVe,"STRONG",{});var TOt=s(q3e);uyr=r(TOt,"mobilebert"),TOt.forEach(t),pyr=r(AVe," \u2014 "),NK=n(AVe,"A",{href:!0});var MOt=s(NK);_yr=r(MOt,"TFMobileBertForPreTraining"),MOt.forEach(t),byr=r(AVe," (MobileBERT model)"),AVe.forEach(t),vyr=i(le),k3=n(le,"LI",{});var LVe=s(k3);j3e=n(LVe,"STRONG",{});var EOt=s(j3e);Fyr=r(EOt,"mpnet"),EOt.forEach(t),Tyr=r(LVe," \u2014 "),qK=n(LVe,"A",{href:!0});var COt=s(qK);Myr=r(COt,"TFMPNetForMaskedLM"),COt.forEach(t),Eyr=r(LVe," (MPNet model)"),LVe.forEach(t),Cyr=i(le),S3=n(le,"LI",{});var yVe=s(S3);D3e=n(yVe,"STRONG",{});var wOt=s(D3e);wyr=r(wOt,"openai-gpt"),wOt.forEach(t),Ayr=r(yVe," \u2014 "),jK=n(yVe,"A",{href:!0});var AOt=s(jK);Lyr=r(AOt,"TFOpenAIGPTLMHeadModel"),AOt.forEach(t),yyr=r(yVe," (OpenAI GPT model)"),yVe.forEach(t),xyr=i(le),R3=n(le,"LI",{});var xVe=s(R3);G3e=n(xVe,"STRONG",{});var LOt=s(G3e);$yr=r(LOt,"roberta"),LOt.forEach(t),kyr=r(xVe," \u2014 "),DK=n(xVe,"A",{href:!0});var yOt=s(DK);Syr=r(yOt,"TFRobertaForMaskedLM"),yOt.forEach(t),Ryr=r(xVe," (RoBERTa model)"),xVe.forEach(t),Pyr=i(le),P3=n(le,"LI",{});var $Ve=s(P3);O3e=n($Ve,"STRONG",{});var xOt=s(O3e);Byr=r(xOt,"t5"),xOt.forEach(t),Iyr=r($Ve," \u2014 "),GK=n($Ve,"A",{href:!0});var $Ot=s(GK);Nyr=r($Ot,"TFT5ForConditionalGeneration"),$Ot.forEach(t),qyr=r($Ve," (T5 model)"),$Ve.forEach(t),jyr=i(le),B3=n(le,"LI",{});var kVe=s(B3);V3e=n(kVe,"STRONG",{});var kOt=s(V3e);Dyr=r(kOt,"tapas"),kOt.forEach(t),Gyr=r(kVe," \u2014 "),OK=n(kVe,"A",{href:!0});var SOt=s(OK);Oyr=r(SOt,"TFTapasForMaskedLM"),SOt.forEach(t),Vyr=r(kVe," (TAPAS model)"),kVe.forEach(t),Xyr=i(le),I3=n(le,"LI",{});var SVe=s(I3);X3e=n(SVe,"STRONG",{});var ROt=s(X3e);zyr=r(ROt,"transfo-xl"),ROt.forEach(t),Wyr=r(SVe," \u2014 "),VK=n(SVe,"A",{href:!0});var POt=s(VK);Qyr=r(POt,"TFTransfoXLLMHeadModel"),POt.forEach(t),Uyr=r(SVe," (Transformer-XL model)"),SVe.forEach(t),Hyr=i(le),N3=n(le,"LI",{});var RVe=s(N3);z3e=n(RVe,"STRONG",{});var BOt=s(z3e);Jyr=r(BOt,"vit_mae"),BOt.forEach(t),Yyr=r(RVe," \u2014 "),XK=n(RVe,"A",{href:!0});var IOt=s(XK);Kyr=r(IOt,"TFViTMAEForPreTraining"),IOt.forEach(t),Zyr=r(RVe," (ViTMAE model)"),RVe.forEach(t),e8r=i(le),q3=n(le,"LI",{});var PVe=s(q3);W3e=n(PVe,"STRONG",{});var NOt=s(W3e);o8r=r(NOt,"xlm"),NOt.forEach(t),r8r=r(PVe," \u2014 "),zK=n(PVe,"A",{href:!0});var qOt=s(zK);t8r=r(qOt,"TFXLMWithLMHeadModel"),qOt.forEach(t),a8r=r(PVe," (XLM model)"),PVe.forEach(t),n8r=i(le),j3=n(le,"LI",{});var BVe=s(j3);Q3e=n(BVe,"STRONG",{});var jOt=s(Q3e);s8r=r(jOt,"xlm-roberta"),jOt.forEach(t),l8r=r(BVe," \u2014 "),WK=n(BVe,"A",{href:!0});var DOt=s(WK);i8r=r(DOt,"TFXLMRobertaForMaskedLM"),DOt.forEach(t),d8r=r(BVe," (XLM-RoBERTa model)"),BVe.forEach(t),c8r=i(le),D3=n(le,"LI",{});var IVe=s(D3);U3e=n(IVe,"STRONG",{});var GOt=s(U3e);m8r=r(GOt,"xlnet"),GOt.forEach(t),f8r=r(IVe," \u2014 "),QK=n(IVe,"A",{href:!0});var OOt=s(QK);g8r=r(OOt,"TFXLNetLMHeadModel"),OOt.forEach(t),h8r=r(IVe," (XLNet model)"),IVe.forEach(t),le.forEach(t),u8r=i(zl),T(G3.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),IHe=i(m),xc=n(m,"H2",{class:!0});var UYe=s(xc);O3=n(UYe,"A",{id:!0,class:!0,href:!0});var VOt=s(O3);H3e=n(VOt,"SPAN",{});var XOt=s(H3e);T(C$.$$.fragment,XOt),XOt.forEach(t),VOt.forEach(t),p8r=i(UYe),J3e=n(UYe,"SPAN",{});var zOt=s(J3e);_8r=r(zOt,"TFAutoModelForCausalLM"),zOt.forEach(t),UYe.forEach(t),NHe=i(m),sr=n(m,"DIV",{class:!0});var Wl=s(sr);T(w$.$$.fragment,Wl),b8r=i(Wl),$c=n(Wl,"P",{});var ase=s($c);v8r=r(ase,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),UK=n(ase,"A",{href:!0});var WOt=s(UK);F8r=r(WOt,"from_pretrained()"),WOt.forEach(t),T8r=r(ase," class method or the "),HK=n(ase,"A",{href:!0});var QOt=s(HK);M8r=r(QOt,"from_config()"),QOt.forEach(t),E8r=r(ase,` class
method.`),ase.forEach(t),C8r=i(Wl),A$=n(Wl,"P",{});var HYe=s(A$);w8r=r(HYe,"This class cannot be instantiated directly using "),Y3e=n(HYe,"CODE",{});var UOt=s(Y3e);A8r=r(UOt,"__init__()"),UOt.forEach(t),L8r=r(HYe," (throws an error)."),HYe.forEach(t),y8r=i(Wl),Dt=n(Wl,"DIV",{class:!0});var Ey=s(Dt);T(L$.$$.fragment,Ey),x8r=i(Ey),K3e=n(Ey,"P",{});var HOt=s(K3e);$8r=r(HOt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),HOt.forEach(t),k8r=i(Ey),kc=n(Ey,"P",{});var nse=s(kc);S8r=r(nse,`Note:
Loading a model from its configuration file does `),Z3e=n(nse,"STRONG",{});var JOt=s(Z3e);R8r=r(JOt,"not"),JOt.forEach(t),P8r=r(nse,` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=n(nse,"A",{href:!0});var YOt=s(JK);B8r=r(YOt,"from_pretrained()"),YOt.forEach(t),I8r=r(nse," to load the model weights."),nse.forEach(t),N8r=i(Ey),T(V3.$$.fragment,Ey),Ey.forEach(t),q8r=i(Wl),Br=n(Wl,"DIV",{class:!0});var Ql=s(Br);T(y$.$$.fragment,Ql),j8r=i(Ql),e5e=n(Ql,"P",{});var KOt=s(e5e);D8r=r(KOt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),KOt.forEach(t),G8r=i(Ql),bn=n(Ql,"P",{});var Cy=s(bn);O8r=r(Cy,"The model class to instantiate is selected based on the "),o5e=n(Cy,"CODE",{});var ZOt=s(o5e);V8r=r(ZOt,"model_type"),ZOt.forEach(t),X8r=r(Cy,` property of the config object (either
passed as an argument or loaded from `),r5e=n(Cy,"CODE",{});var eVt=s(r5e);z8r=r(eVt,"pretrained_model_name_or_path"),eVt.forEach(t),W8r=r(Cy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t5e=n(Cy,"CODE",{});var oVt=s(t5e);Q8r=r(oVt,"pretrained_model_name_or_path"),oVt.forEach(t),U8r=r(Cy,":"),Cy.forEach(t),H8r=i(Ql),Me=n(Ql,"UL",{});var Ce=s(Me);X3=n(Ce,"LI",{});var NVe=s(X3);a5e=n(NVe,"STRONG",{});var rVt=s(a5e);J8r=r(rVt,"bert"),rVt.forEach(t),Y8r=r(NVe," \u2014 "),YK=n(NVe,"A",{href:!0});var tVt=s(YK);K8r=r(tVt,"TFBertLMHeadModel"),tVt.forEach(t),Z8r=r(NVe," (BERT model)"),NVe.forEach(t),e9r=i(Ce),z3=n(Ce,"LI",{});var qVe=s(z3);n5e=n(qVe,"STRONG",{});var aVt=s(n5e);o9r=r(aVt,"camembert"),aVt.forEach(t),r9r=r(qVe," \u2014 "),KK=n(qVe,"A",{href:!0});var nVt=s(KK);t9r=r(nVt,"TFCamembertForCausalLM"),nVt.forEach(t),a9r=r(qVe," (CamemBERT model)"),qVe.forEach(t),n9r=i(Ce),W3=n(Ce,"LI",{});var jVe=s(W3);s5e=n(jVe,"STRONG",{});var sVt=s(s5e);s9r=r(sVt,"ctrl"),sVt.forEach(t),l9r=r(jVe," \u2014 "),ZK=n(jVe,"A",{href:!0});var lVt=s(ZK);i9r=r(lVt,"TFCTRLLMHeadModel"),lVt.forEach(t),d9r=r(jVe," (CTRL model)"),jVe.forEach(t),c9r=i(Ce),Q3=n(Ce,"LI",{});var DVe=s(Q3);l5e=n(DVe,"STRONG",{});var iVt=s(l5e);m9r=r(iVt,"gpt2"),iVt.forEach(t),f9r=r(DVe," \u2014 "),eZ=n(DVe,"A",{href:!0});var dVt=s(eZ);g9r=r(dVt,"TFGPT2LMHeadModel"),dVt.forEach(t),h9r=r(DVe," (OpenAI GPT-2 model)"),DVe.forEach(t),u9r=i(Ce),U3=n(Ce,"LI",{});var GVe=s(U3);i5e=n(GVe,"STRONG",{});var cVt=s(i5e);p9r=r(cVt,"gptj"),cVt.forEach(t),_9r=r(GVe," \u2014 "),oZ=n(GVe,"A",{href:!0});var mVt=s(oZ);b9r=r(mVt,"TFGPTJForCausalLM"),mVt.forEach(t),v9r=r(GVe," (GPT-J model)"),GVe.forEach(t),F9r=i(Ce),H3=n(Ce,"LI",{});var OVe=s(H3);d5e=n(OVe,"STRONG",{});var fVt=s(d5e);T9r=r(fVt,"openai-gpt"),fVt.forEach(t),M9r=r(OVe," \u2014 "),rZ=n(OVe,"A",{href:!0});var gVt=s(rZ);E9r=r(gVt,"TFOpenAIGPTLMHeadModel"),gVt.forEach(t),C9r=r(OVe," (OpenAI GPT model)"),OVe.forEach(t),w9r=i(Ce),J3=n(Ce,"LI",{});var VVe=s(J3);c5e=n(VVe,"STRONG",{});var hVt=s(c5e);A9r=r(hVt,"opt"),hVt.forEach(t),L9r=r(VVe," \u2014 "),tZ=n(VVe,"A",{href:!0});var uVt=s(tZ);y9r=r(uVt,"TFOPTForCausalLM"),uVt.forEach(t),x9r=r(VVe," (OPT model)"),VVe.forEach(t),$9r=i(Ce),Y3=n(Ce,"LI",{});var XVe=s(Y3);m5e=n(XVe,"STRONG",{});var pVt=s(m5e);k9r=r(pVt,"rembert"),pVt.forEach(t),S9r=r(XVe," \u2014 "),aZ=n(XVe,"A",{href:!0});var _Vt=s(aZ);R9r=r(_Vt,"TFRemBertForCausalLM"),_Vt.forEach(t),P9r=r(XVe," (RemBERT model)"),XVe.forEach(t),B9r=i(Ce),K3=n(Ce,"LI",{});var zVe=s(K3);f5e=n(zVe,"STRONG",{});var bVt=s(f5e);I9r=r(bVt,"roberta"),bVt.forEach(t),N9r=r(zVe," \u2014 "),nZ=n(zVe,"A",{href:!0});var vVt=s(nZ);q9r=r(vVt,"TFRobertaForCausalLM"),vVt.forEach(t),j9r=r(zVe," (RoBERTa model)"),zVe.forEach(t),D9r=i(Ce),Z3=n(Ce,"LI",{});var WVe=s(Z3);g5e=n(WVe,"STRONG",{});var FVt=s(g5e);G9r=r(FVt,"roformer"),FVt.forEach(t),O9r=r(WVe," \u2014 "),sZ=n(WVe,"A",{href:!0});var TVt=s(sZ);V9r=r(TVt,"TFRoFormerForCausalLM"),TVt.forEach(t),X9r=r(WVe," (RoFormer model)"),WVe.forEach(t),z9r=i(Ce),e5=n(Ce,"LI",{});var QVe=s(e5);h5e=n(QVe,"STRONG",{});var MVt=s(h5e);W9r=r(MVt,"transfo-xl"),MVt.forEach(t),Q9r=r(QVe," \u2014 "),lZ=n(QVe,"A",{href:!0});var EVt=s(lZ);U9r=r(EVt,"TFTransfoXLLMHeadModel"),EVt.forEach(t),H9r=r(QVe," (Transformer-XL model)"),QVe.forEach(t),J9r=i(Ce),o5=n(Ce,"LI",{});var UVe=s(o5);u5e=n(UVe,"STRONG",{});var CVt=s(u5e);Y9r=r(CVt,"xglm"),CVt.forEach(t),K9r=r(UVe," \u2014 "),iZ=n(UVe,"A",{href:!0});var wVt=s(iZ);Z9r=r(wVt,"TFXGLMForCausalLM"),wVt.forEach(t),exr=r(UVe," (XGLM model)"),UVe.forEach(t),oxr=i(Ce),r5=n(Ce,"LI",{});var HVe=s(r5);p5e=n(HVe,"STRONG",{});var AVt=s(p5e);rxr=r(AVt,"xlm"),AVt.forEach(t),txr=r(HVe," \u2014 "),dZ=n(HVe,"A",{href:!0});var LVt=s(dZ);axr=r(LVt,"TFXLMWithLMHeadModel"),LVt.forEach(t),nxr=r(HVe," (XLM model)"),HVe.forEach(t),sxr=i(Ce),t5=n(Ce,"LI",{});var JVe=s(t5);_5e=n(JVe,"STRONG",{});var yVt=s(_5e);lxr=r(yVt,"xlnet"),yVt.forEach(t),ixr=r(JVe," \u2014 "),cZ=n(JVe,"A",{href:!0});var xVt=s(cZ);dxr=r(xVt,"TFXLNetLMHeadModel"),xVt.forEach(t),cxr=r(JVe," (XLNet model)"),JVe.forEach(t),Ce.forEach(t),mxr=i(Ql),T(a5.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),qHe=i(m),Sc=n(m,"H2",{class:!0});var JYe=s(Sc);n5=n(JYe,"A",{id:!0,class:!0,href:!0});var $Vt=s(n5);b5e=n($Vt,"SPAN",{});var kVt=s(b5e);T(x$.$$.fragment,kVt),kVt.forEach(t),$Vt.forEach(t),fxr=i(JYe),v5e=n(JYe,"SPAN",{});var SVt=s(v5e);gxr=r(SVt,"TFAutoModelForImageClassification"),SVt.forEach(t),JYe.forEach(t),jHe=i(m),lr=n(m,"DIV",{class:!0});var Ul=s(lr);T($$.$$.fragment,Ul),hxr=i(Ul),Rc=n(Ul,"P",{});var sse=s(Rc);uxr=r(sse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),mZ=n(sse,"A",{href:!0});var RVt=s(mZ);pxr=r(RVt,"from_pretrained()"),RVt.forEach(t),_xr=r(sse," class method or the "),fZ=n(sse,"A",{href:!0});var PVt=s(fZ);bxr=r(PVt,"from_config()"),PVt.forEach(t),vxr=r(sse,` class
method.`),sse.forEach(t),Fxr=i(Ul),k$=n(Ul,"P",{});var YYe=s(k$);Txr=r(YYe,"This class cannot be instantiated directly using "),F5e=n(YYe,"CODE",{});var BVt=s(F5e);Mxr=r(BVt,"__init__()"),BVt.forEach(t),Exr=r(YYe," (throws an error)."),YYe.forEach(t),Cxr=i(Ul),Gt=n(Ul,"DIV",{class:!0});var wy=s(Gt);T(S$.$$.fragment,wy),wxr=i(wy),T5e=n(wy,"P",{});var IVt=s(T5e);Axr=r(IVt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),IVt.forEach(t),Lxr=i(wy),Pc=n(wy,"P",{});var lse=s(Pc);yxr=r(lse,`Note:
Loading a model from its configuration file does `),M5e=n(lse,"STRONG",{});var NVt=s(M5e);xxr=r(NVt,"not"),NVt.forEach(t),$xr=r(lse,` load the model weights. It only affects the
model\u2019s configuration. Use `),gZ=n(lse,"A",{href:!0});var qVt=s(gZ);kxr=r(qVt,"from_pretrained()"),qVt.forEach(t),Sxr=r(lse," to load the model weights."),lse.forEach(t),Rxr=i(wy),T(s5.$$.fragment,wy),wy.forEach(t),Pxr=i(Ul),Ir=n(Ul,"DIV",{class:!0});var Hl=s(Ir);T(R$.$$.fragment,Hl),Bxr=i(Hl),E5e=n(Hl,"P",{});var jVt=s(E5e);Ixr=r(jVt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),jVt.forEach(t),Nxr=i(Hl),vn=n(Hl,"P",{});var Ay=s(vn);qxr=r(Ay,"The model class to instantiate is selected based on the "),C5e=n(Ay,"CODE",{});var DVt=s(C5e);jxr=r(DVt,"model_type"),DVt.forEach(t),Dxr=r(Ay,` property of the config object (either
passed as an argument or loaded from `),w5e=n(Ay,"CODE",{});var GVt=s(w5e);Gxr=r(GVt,"pretrained_model_name_or_path"),GVt.forEach(t),Oxr=r(Ay,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A5e=n(Ay,"CODE",{});var OVt=s(A5e);Vxr=r(OVt,"pretrained_model_name_or_path"),OVt.forEach(t),Xxr=r(Ay,":"),Ay.forEach(t),zxr=i(Hl),Be=n(Hl,"UL",{});var Qe=s(Be);l5=n(Qe,"LI",{});var YVe=s(l5);L5e=n(YVe,"STRONG",{});var VVt=s(L5e);Wxr=r(VVt,"convnext"),VVt.forEach(t),Qxr=r(YVe," \u2014 "),hZ=n(YVe,"A",{href:!0});var XVt=s(hZ);Uxr=r(XVt,"TFConvNextForImageClassification"),XVt.forEach(t),Hxr=r(YVe," (ConvNeXT model)"),YVe.forEach(t),Jxr=i(Qe),i5=n(Qe,"LI",{});var KVe=s(i5);y5e=n(KVe,"STRONG",{});var zVt=s(y5e);Yxr=r(zVt,"data2vec-vision"),zVt.forEach(t),Kxr=r(KVe," \u2014 "),uZ=n(KVe,"A",{href:!0});var WVt=s(uZ);Zxr=r(WVt,"TFData2VecVisionForImageClassification"),WVt.forEach(t),e$r=r(KVe," (Data2VecVision model)"),KVe.forEach(t),o$r=i(Qe),dl=n(Qe,"LI",{});var mP=s(dl);x5e=n(mP,"STRONG",{});var QVt=s(x5e);r$r=r(QVt,"deit"),QVt.forEach(t),t$r=r(mP," \u2014 "),pZ=n(mP,"A",{href:!0});var UVt=s(pZ);a$r=r(UVt,"TFDeiTForImageClassification"),UVt.forEach(t),n$r=r(mP," or "),_Z=n(mP,"A",{href:!0});var HVt=s(_Z);s$r=r(HVt,"TFDeiTForImageClassificationWithTeacher"),HVt.forEach(t),l$r=r(mP," (DeiT model)"),mP.forEach(t),i$r=i(Qe),d5=n(Qe,"LI",{});var ZVe=s(d5);$5e=n(ZVe,"STRONG",{});var JVt=s($5e);d$r=r(JVt,"mobilevit"),JVt.forEach(t),c$r=r(ZVe," \u2014 "),bZ=n(ZVe,"A",{href:!0});var YVt=s(bZ);m$r=r(YVt,"TFMobileViTForImageClassification"),YVt.forEach(t),f$r=r(ZVe," (MobileViT model)"),ZVe.forEach(t),g$r=i(Qe),c5=n(Qe,"LI",{});var eXe=s(c5);k5e=n(eXe,"STRONG",{});var KVt=s(k5e);h$r=r(KVt,"regnet"),KVt.forEach(t),u$r=r(eXe," \u2014 "),vZ=n(eXe,"A",{href:!0});var ZVt=s(vZ);p$r=r(ZVt,"TFRegNetForImageClassification"),ZVt.forEach(t),_$r=r(eXe," (RegNet model)"),eXe.forEach(t),b$r=i(Qe),m5=n(Qe,"LI",{});var oXe=s(m5);S5e=n(oXe,"STRONG",{});var eXt=s(S5e);v$r=r(eXt,"resnet"),eXt.forEach(t),F$r=r(oXe," \u2014 "),FZ=n(oXe,"A",{href:!0});var oXt=s(FZ);T$r=r(oXt,"TFResNetForImageClassification"),oXt.forEach(t),M$r=r(oXe," (ResNet model)"),oXe.forEach(t),E$r=i(Qe),f5=n(Qe,"LI",{});var rXe=s(f5);R5e=n(rXe,"STRONG",{});var rXt=s(R5e);C$r=r(rXt,"segformer"),rXt.forEach(t),w$r=r(rXe," \u2014 "),TZ=n(rXe,"A",{href:!0});var tXt=s(TZ);A$r=r(tXt,"TFSegformerForImageClassification"),tXt.forEach(t),L$r=r(rXe," (SegFormer model)"),rXe.forEach(t),y$r=i(Qe),g5=n(Qe,"LI",{});var tXe=s(g5);P5e=n(tXe,"STRONG",{});var aXt=s(P5e);x$r=r(aXt,"swin"),aXt.forEach(t),$$r=r(tXe," \u2014 "),MZ=n(tXe,"A",{href:!0});var nXt=s(MZ);k$r=r(nXt,"TFSwinForImageClassification"),nXt.forEach(t),S$r=r(tXe," (Swin Transformer model)"),tXe.forEach(t),R$r=i(Qe),h5=n(Qe,"LI",{});var aXe=s(h5);B5e=n(aXe,"STRONG",{});var sXt=s(B5e);P$r=r(sXt,"vit"),sXt.forEach(t),B$r=r(aXe," \u2014 "),EZ=n(aXe,"A",{href:!0});var lXt=s(EZ);I$r=r(lXt,"TFViTForImageClassification"),lXt.forEach(t),N$r=r(aXe," (ViT model)"),aXe.forEach(t),Qe.forEach(t),q$r=i(Hl),T(u5.$$.fragment,Hl),Hl.forEach(t),Ul.forEach(t),DHe=i(m),Bc=n(m,"H2",{class:!0});var KYe=s(Bc);p5=n(KYe,"A",{id:!0,class:!0,href:!0});var iXt=s(p5);I5e=n(iXt,"SPAN",{});var dXt=s(I5e);T(P$.$$.fragment,dXt),dXt.forEach(t),iXt.forEach(t),j$r=i(KYe),N5e=n(KYe,"SPAN",{});var cXt=s(N5e);D$r=r(cXt,"TFAutoModelForSemanticSegmentation"),cXt.forEach(t),KYe.forEach(t),GHe=i(m),ir=n(m,"DIV",{class:!0});var Jl=s(ir);T(B$.$$.fragment,Jl),G$r=i(Jl),Ic=n(Jl,"P",{});var ise=s(Ic);O$r=r(ise,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),CZ=n(ise,"A",{href:!0});var mXt=s(CZ);V$r=r(mXt,"from_pretrained()"),mXt.forEach(t),X$r=r(ise," class method or the "),wZ=n(ise,"A",{href:!0});var fXt=s(wZ);z$r=r(fXt,"from_config()"),fXt.forEach(t),W$r=r(ise,` class
method.`),ise.forEach(t),Q$r=i(Jl),I$=n(Jl,"P",{});var ZYe=s(I$);U$r=r(ZYe,"This class cannot be instantiated directly using "),q5e=n(ZYe,"CODE",{});var gXt=s(q5e);H$r=r(gXt,"__init__()"),gXt.forEach(t),J$r=r(ZYe," (throws an error)."),ZYe.forEach(t),Y$r=i(Jl),Ot=n(Jl,"DIV",{class:!0});var Ly=s(Ot);T(N$.$$.fragment,Ly),K$r=i(Ly),j5e=n(Ly,"P",{});var hXt=s(j5e);Z$r=r(hXt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),hXt.forEach(t),ekr=i(Ly),Nc=n(Ly,"P",{});var dse=s(Nc);okr=r(dse,`Note:
Loading a model from its configuration file does `),D5e=n(dse,"STRONG",{});var uXt=s(D5e);rkr=r(uXt,"not"),uXt.forEach(t),tkr=r(dse,` load the model weights. It only affects the
model\u2019s configuration. Use `),AZ=n(dse,"A",{href:!0});var pXt=s(AZ);akr=r(pXt,"from_pretrained()"),pXt.forEach(t),nkr=r(dse," to load the model weights."),dse.forEach(t),skr=i(Ly),T(_5.$$.fragment,Ly),Ly.forEach(t),lkr=i(Jl),Nr=n(Jl,"DIV",{class:!0});var Yl=s(Nr);T(q$.$$.fragment,Yl),ikr=i(Yl),G5e=n(Yl,"P",{});var _Xt=s(G5e);dkr=r(_Xt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),_Xt.forEach(t),ckr=i(Yl),Fn=n(Yl,"P",{});var yy=s(Fn);mkr=r(yy,"The model class to instantiate is selected based on the "),O5e=n(yy,"CODE",{});var bXt=s(O5e);fkr=r(bXt,"model_type"),bXt.forEach(t),gkr=r(yy,` property of the config object (either
passed as an argument or loaded from `),V5e=n(yy,"CODE",{});var vXt=s(V5e);hkr=r(vXt,"pretrained_model_name_or_path"),vXt.forEach(t),ukr=r(yy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X5e=n(yy,"CODE",{});var FXt=s(X5e);pkr=r(FXt,"pretrained_model_name_or_path"),FXt.forEach(t),_kr=r(yy,":"),yy.forEach(t),bkr=i(Yl),qc=n(Yl,"UL",{});var cse=s(qc);b5=n(cse,"LI",{});var nXe=s(b5);z5e=n(nXe,"STRONG",{});var TXt=s(z5e);vkr=r(TXt,"data2vec-vision"),TXt.forEach(t),Fkr=r(nXe," \u2014 "),LZ=n(nXe,"A",{href:!0});var MXt=s(LZ);Tkr=r(MXt,"TFData2VecVisionForSemanticSegmentation"),MXt.forEach(t),Mkr=r(nXe," (Data2VecVision model)"),nXe.forEach(t),Ekr=i(cse),v5=n(cse,"LI",{});var sXe=s(v5);W5e=n(sXe,"STRONG",{});var EXt=s(W5e);Ckr=r(EXt,"mobilevit"),EXt.forEach(t),wkr=r(sXe," \u2014 "),yZ=n(sXe,"A",{href:!0});var CXt=s(yZ);Akr=r(CXt,"TFMobileViTForSemanticSegmentation"),CXt.forEach(t),Lkr=r(sXe," (MobileViT model)"),sXe.forEach(t),ykr=i(cse),F5=n(cse,"LI",{});var lXe=s(F5);Q5e=n(lXe,"STRONG",{});var wXt=s(Q5e);xkr=r(wXt,"segformer"),wXt.forEach(t),$kr=r(lXe," \u2014 "),xZ=n(lXe,"A",{href:!0});var AXt=s(xZ);kkr=r(AXt,"TFSegformerForSemanticSegmentation"),AXt.forEach(t),Skr=r(lXe," (SegFormer model)"),lXe.forEach(t),cse.forEach(t),Rkr=i(Yl),T(T5.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),OHe=i(m),jc=n(m,"H2",{class:!0});var eKe=s(jc);M5=n(eKe,"A",{id:!0,class:!0,href:!0});var LXt=s(M5);U5e=n(LXt,"SPAN",{});var yXt=s(U5e);T(j$.$$.fragment,yXt),yXt.forEach(t),LXt.forEach(t),Pkr=i(eKe),H5e=n(eKe,"SPAN",{});var xXt=s(H5e);Bkr=r(xXt,"TFAutoModelForMaskedLM"),xXt.forEach(t),eKe.forEach(t),VHe=i(m),dr=n(m,"DIV",{class:!0});var Kl=s(dr);T(D$.$$.fragment,Kl),Ikr=i(Kl),Dc=n(Kl,"P",{});var mse=s(Dc);Nkr=r(mse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$Z=n(mse,"A",{href:!0});var $Xt=s($Z);qkr=r($Xt,"from_pretrained()"),$Xt.forEach(t),jkr=r(mse," class method or the "),kZ=n(mse,"A",{href:!0});var kXt=s(kZ);Dkr=r(kXt,"from_config()"),kXt.forEach(t),Gkr=r(mse,` class
method.`),mse.forEach(t),Okr=i(Kl),G$=n(Kl,"P",{});var oKe=s(G$);Vkr=r(oKe,"This class cannot be instantiated directly using "),J5e=n(oKe,"CODE",{});var SXt=s(J5e);Xkr=r(SXt,"__init__()"),SXt.forEach(t),zkr=r(oKe," (throws an error)."),oKe.forEach(t),Wkr=i(Kl),Vt=n(Kl,"DIV",{class:!0});var xy=s(Vt);T(O$.$$.fragment,xy),Qkr=i(xy),Y5e=n(xy,"P",{});var RXt=s(Y5e);Ukr=r(RXt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),RXt.forEach(t),Hkr=i(xy),Gc=n(xy,"P",{});var fse=s(Gc);Jkr=r(fse,`Note:
Loading a model from its configuration file does `),K5e=n(fse,"STRONG",{});var PXt=s(K5e);Ykr=r(PXt,"not"),PXt.forEach(t),Kkr=r(fse,` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=n(fse,"A",{href:!0});var BXt=s(SZ);Zkr=r(BXt,"from_pretrained()"),BXt.forEach(t),eSr=r(fse," to load the model weights."),fse.forEach(t),oSr=i(xy),T(E5.$$.fragment,xy),xy.forEach(t),rSr=i(Kl),qr=n(Kl,"DIV",{class:!0});var Zl=s(qr);T(V$.$$.fragment,Zl),tSr=i(Zl),Z5e=n(Zl,"P",{});var IXt=s(Z5e);aSr=r(IXt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),IXt.forEach(t),nSr=i(Zl),Tn=n(Zl,"P",{});var $y=s(Tn);sSr=r($y,"The model class to instantiate is selected based on the "),e0e=n($y,"CODE",{});var NXt=s(e0e);lSr=r(NXt,"model_type"),NXt.forEach(t),iSr=r($y,` property of the config object (either
passed as an argument or loaded from `),o0e=n($y,"CODE",{});var qXt=s(o0e);dSr=r(qXt,"pretrained_model_name_or_path"),qXt.forEach(t),cSr=r($y,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r0e=n($y,"CODE",{});var jXt=s(r0e);mSr=r(jXt,"pretrained_model_name_or_path"),jXt.forEach(t),fSr=r($y,":"),$y.forEach(t),gSr=i(Zl),me=n(Zl,"UL",{});var pe=s(me);C5=n(pe,"LI",{});var iXe=s(C5);t0e=n(iXe,"STRONG",{});var DXt=s(t0e);hSr=r(DXt,"albert"),DXt.forEach(t),uSr=r(iXe," \u2014 "),RZ=n(iXe,"A",{href:!0});var GXt=s(RZ);pSr=r(GXt,"TFAlbertForMaskedLM"),GXt.forEach(t),_Sr=r(iXe," (ALBERT model)"),iXe.forEach(t),bSr=i(pe),w5=n(pe,"LI",{});var dXe=s(w5);a0e=n(dXe,"STRONG",{});var OXt=s(a0e);vSr=r(OXt,"bert"),OXt.forEach(t),FSr=r(dXe," \u2014 "),PZ=n(dXe,"A",{href:!0});var VXt=s(PZ);TSr=r(VXt,"TFBertForMaskedLM"),VXt.forEach(t),MSr=r(dXe," (BERT model)"),dXe.forEach(t),ESr=i(pe),A5=n(pe,"LI",{});var cXe=s(A5);n0e=n(cXe,"STRONG",{});var XXt=s(n0e);CSr=r(XXt,"camembert"),XXt.forEach(t),wSr=r(cXe," \u2014 "),BZ=n(cXe,"A",{href:!0});var zXt=s(BZ);ASr=r(zXt,"TFCamembertForMaskedLM"),zXt.forEach(t),LSr=r(cXe," (CamemBERT model)"),cXe.forEach(t),ySr=i(pe),L5=n(pe,"LI",{});var mXe=s(L5);s0e=n(mXe,"STRONG",{});var WXt=s(s0e);xSr=r(WXt,"convbert"),WXt.forEach(t),$Sr=r(mXe," \u2014 "),IZ=n(mXe,"A",{href:!0});var QXt=s(IZ);kSr=r(QXt,"TFConvBertForMaskedLM"),QXt.forEach(t),SSr=r(mXe," (ConvBERT model)"),mXe.forEach(t),RSr=i(pe),y5=n(pe,"LI",{});var fXe=s(y5);l0e=n(fXe,"STRONG",{});var UXt=s(l0e);PSr=r(UXt,"deberta"),UXt.forEach(t),BSr=r(fXe," \u2014 "),NZ=n(fXe,"A",{href:!0});var HXt=s(NZ);ISr=r(HXt,"TFDebertaForMaskedLM"),HXt.forEach(t),NSr=r(fXe," (DeBERTa model)"),fXe.forEach(t),qSr=i(pe),x5=n(pe,"LI",{});var gXe=s(x5);i0e=n(gXe,"STRONG",{});var JXt=s(i0e);jSr=r(JXt,"deberta-v2"),JXt.forEach(t),DSr=r(gXe," \u2014 "),qZ=n(gXe,"A",{href:!0});var YXt=s(qZ);GSr=r(YXt,"TFDebertaV2ForMaskedLM"),YXt.forEach(t),OSr=r(gXe," (DeBERTa-v2 model)"),gXe.forEach(t),VSr=i(pe),$5=n(pe,"LI",{});var hXe=s($5);d0e=n(hXe,"STRONG",{});var KXt=s(d0e);XSr=r(KXt,"distilbert"),KXt.forEach(t),zSr=r(hXe," \u2014 "),jZ=n(hXe,"A",{href:!0});var ZXt=s(jZ);WSr=r(ZXt,"TFDistilBertForMaskedLM"),ZXt.forEach(t),QSr=r(hXe," (DistilBERT model)"),hXe.forEach(t),USr=i(pe),k5=n(pe,"LI",{});var uXe=s(k5);c0e=n(uXe,"STRONG",{});var ezt=s(c0e);HSr=r(ezt,"electra"),ezt.forEach(t),JSr=r(uXe," \u2014 "),DZ=n(uXe,"A",{href:!0});var ozt=s(DZ);YSr=r(ozt,"TFElectraForMaskedLM"),ozt.forEach(t),KSr=r(uXe," (ELECTRA model)"),uXe.forEach(t),ZSr=i(pe),S5=n(pe,"LI",{});var pXe=s(S5);m0e=n(pXe,"STRONG",{});var rzt=s(m0e);eRr=r(rzt,"flaubert"),rzt.forEach(t),oRr=r(pXe," \u2014 "),GZ=n(pXe,"A",{href:!0});var tzt=s(GZ);rRr=r(tzt,"TFFlaubertWithLMHeadModel"),tzt.forEach(t),tRr=r(pXe," (FlauBERT model)"),pXe.forEach(t),aRr=i(pe),R5=n(pe,"LI",{});var _Xe=s(R5);f0e=n(_Xe,"STRONG",{});var azt=s(f0e);nRr=r(azt,"funnel"),azt.forEach(t),sRr=r(_Xe," \u2014 "),OZ=n(_Xe,"A",{href:!0});var nzt=s(OZ);lRr=r(nzt,"TFFunnelForMaskedLM"),nzt.forEach(t),iRr=r(_Xe," (Funnel Transformer model)"),_Xe.forEach(t),dRr=i(pe),P5=n(pe,"LI",{});var bXe=s(P5);g0e=n(bXe,"STRONG",{});var szt=s(g0e);cRr=r(szt,"layoutlm"),szt.forEach(t),mRr=r(bXe," \u2014 "),VZ=n(bXe,"A",{href:!0});var lzt=s(VZ);fRr=r(lzt,"TFLayoutLMForMaskedLM"),lzt.forEach(t),gRr=r(bXe," (LayoutLM model)"),bXe.forEach(t),hRr=i(pe),B5=n(pe,"LI",{});var vXe=s(B5);h0e=n(vXe,"STRONG",{});var izt=s(h0e);uRr=r(izt,"longformer"),izt.forEach(t),pRr=r(vXe," \u2014 "),XZ=n(vXe,"A",{href:!0});var dzt=s(XZ);_Rr=r(dzt,"TFLongformerForMaskedLM"),dzt.forEach(t),bRr=r(vXe," (Longformer model)"),vXe.forEach(t),vRr=i(pe),I5=n(pe,"LI",{});var FXe=s(I5);u0e=n(FXe,"STRONG",{});var czt=s(u0e);FRr=r(czt,"mobilebert"),czt.forEach(t),TRr=r(FXe," \u2014 "),zZ=n(FXe,"A",{href:!0});var mzt=s(zZ);MRr=r(mzt,"TFMobileBertForMaskedLM"),mzt.forEach(t),ERr=r(FXe," (MobileBERT model)"),FXe.forEach(t),CRr=i(pe),N5=n(pe,"LI",{});var TXe=s(N5);p0e=n(TXe,"STRONG",{});var fzt=s(p0e);wRr=r(fzt,"mpnet"),fzt.forEach(t),ARr=r(TXe," \u2014 "),WZ=n(TXe,"A",{href:!0});var gzt=s(WZ);LRr=r(gzt,"TFMPNetForMaskedLM"),gzt.forEach(t),yRr=r(TXe," (MPNet model)"),TXe.forEach(t),xRr=i(pe),q5=n(pe,"LI",{});var MXe=s(q5);_0e=n(MXe,"STRONG",{});var hzt=s(_0e);$Rr=r(hzt,"rembert"),hzt.forEach(t),kRr=r(MXe," \u2014 "),QZ=n(MXe,"A",{href:!0});var uzt=s(QZ);SRr=r(uzt,"TFRemBertForMaskedLM"),uzt.forEach(t),RRr=r(MXe," (RemBERT model)"),MXe.forEach(t),PRr=i(pe),j5=n(pe,"LI",{});var EXe=s(j5);b0e=n(EXe,"STRONG",{});var pzt=s(b0e);BRr=r(pzt,"roberta"),pzt.forEach(t),IRr=r(EXe," \u2014 "),UZ=n(EXe,"A",{href:!0});var _zt=s(UZ);NRr=r(_zt,"TFRobertaForMaskedLM"),_zt.forEach(t),qRr=r(EXe," (RoBERTa model)"),EXe.forEach(t),jRr=i(pe),D5=n(pe,"LI",{});var CXe=s(D5);v0e=n(CXe,"STRONG",{});var bzt=s(v0e);DRr=r(bzt,"roformer"),bzt.forEach(t),GRr=r(CXe," \u2014 "),HZ=n(CXe,"A",{href:!0});var vzt=s(HZ);ORr=r(vzt,"TFRoFormerForMaskedLM"),vzt.forEach(t),VRr=r(CXe," (RoFormer model)"),CXe.forEach(t),XRr=i(pe),G5=n(pe,"LI",{});var wXe=s(G5);F0e=n(wXe,"STRONG",{});var Fzt=s(F0e);zRr=r(Fzt,"tapas"),Fzt.forEach(t),WRr=r(wXe," \u2014 "),JZ=n(wXe,"A",{href:!0});var Tzt=s(JZ);QRr=r(Tzt,"TFTapasForMaskedLM"),Tzt.forEach(t),URr=r(wXe," (TAPAS model)"),wXe.forEach(t),HRr=i(pe),O5=n(pe,"LI",{});var AXe=s(O5);T0e=n(AXe,"STRONG",{});var Mzt=s(T0e);JRr=r(Mzt,"xlm"),Mzt.forEach(t),YRr=r(AXe," \u2014 "),YZ=n(AXe,"A",{href:!0});var Ezt=s(YZ);KRr=r(Ezt,"TFXLMWithLMHeadModel"),Ezt.forEach(t),ZRr=r(AXe," (XLM model)"),AXe.forEach(t),ePr=i(pe),V5=n(pe,"LI",{});var LXe=s(V5);M0e=n(LXe,"STRONG",{});var Czt=s(M0e);oPr=r(Czt,"xlm-roberta"),Czt.forEach(t),rPr=r(LXe," \u2014 "),KZ=n(LXe,"A",{href:!0});var wzt=s(KZ);tPr=r(wzt,"TFXLMRobertaForMaskedLM"),wzt.forEach(t),aPr=r(LXe," (XLM-RoBERTa model)"),LXe.forEach(t),pe.forEach(t),nPr=i(Zl),T(X5.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),XHe=i(m),Oc=n(m,"H2",{class:!0});var rKe=s(Oc);z5=n(rKe,"A",{id:!0,class:!0,href:!0});var Azt=s(z5);E0e=n(Azt,"SPAN",{});var Lzt=s(E0e);T(X$.$$.fragment,Lzt),Lzt.forEach(t),Azt.forEach(t),sPr=i(rKe),C0e=n(rKe,"SPAN",{});var yzt=s(C0e);lPr=r(yzt,"TFAutoModelForSeq2SeqLM"),yzt.forEach(t),rKe.forEach(t),zHe=i(m),cr=n(m,"DIV",{class:!0});var ei=s(cr);T(z$.$$.fragment,ei),iPr=i(ei),Vc=n(ei,"P",{});var gse=s(Vc);dPr=r(gse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ZZ=n(gse,"A",{href:!0});var xzt=s(ZZ);cPr=r(xzt,"from_pretrained()"),xzt.forEach(t),mPr=r(gse," class method or the "),eee=n(gse,"A",{href:!0});var $zt=s(eee);fPr=r($zt,"from_config()"),$zt.forEach(t),gPr=r(gse,` class
method.`),gse.forEach(t),hPr=i(ei),W$=n(ei,"P",{});var tKe=s(W$);uPr=r(tKe,"This class cannot be instantiated directly using "),w0e=n(tKe,"CODE",{});var kzt=s(w0e);pPr=r(kzt,"__init__()"),kzt.forEach(t),_Pr=r(tKe," (throws an error)."),tKe.forEach(t),bPr=i(ei),Xt=n(ei,"DIV",{class:!0});var ky=s(Xt);T(Q$.$$.fragment,ky),vPr=i(ky),A0e=n(ky,"P",{});var Szt=s(A0e);FPr=r(Szt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Szt.forEach(t),TPr=i(ky),Xc=n(ky,"P",{});var hse=s(Xc);MPr=r(hse,`Note:
Loading a model from its configuration file does `),L0e=n(hse,"STRONG",{});var Rzt=s(L0e);EPr=r(Rzt,"not"),Rzt.forEach(t),CPr=r(hse,` load the model weights. It only affects the
model\u2019s configuration. Use `),oee=n(hse,"A",{href:!0});var Pzt=s(oee);wPr=r(Pzt,"from_pretrained()"),Pzt.forEach(t),APr=r(hse," to load the model weights."),hse.forEach(t),LPr=i(ky),T(W5.$$.fragment,ky),ky.forEach(t),yPr=i(ei),jr=n(ei,"DIV",{class:!0});var oi=s(jr);T(U$.$$.fragment,oi),xPr=i(oi),y0e=n(oi,"P",{});var Bzt=s(y0e);$Pr=r(Bzt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Bzt.forEach(t),kPr=i(oi),Mn=n(oi,"P",{});var Sy=s(Mn);SPr=r(Sy,"The model class to instantiate is selected based on the "),x0e=n(Sy,"CODE",{});var Izt=s(x0e);RPr=r(Izt,"model_type"),Izt.forEach(t),PPr=r(Sy,` property of the config object (either
passed as an argument or loaded from `),$0e=n(Sy,"CODE",{});var Nzt=s($0e);BPr=r(Nzt,"pretrained_model_name_or_path"),Nzt.forEach(t),IPr=r(Sy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k0e=n(Sy,"CODE",{});var qzt=s(k0e);NPr=r(qzt,"pretrained_model_name_or_path"),qzt.forEach(t),qPr=r(Sy,":"),Sy.forEach(t),jPr=i(oi),ye=n(oi,"UL",{});var Ne=s(ye);Q5=n(Ne,"LI",{});var yXe=s(Q5);S0e=n(yXe,"STRONG",{});var jzt=s(S0e);DPr=r(jzt,"bart"),jzt.forEach(t),GPr=r(yXe," \u2014 "),ree=n(yXe,"A",{href:!0});var Dzt=s(ree);OPr=r(Dzt,"TFBartForConditionalGeneration"),Dzt.forEach(t),VPr=r(yXe," (BART model)"),yXe.forEach(t),XPr=i(Ne),U5=n(Ne,"LI",{});var xXe=s(U5);R0e=n(xXe,"STRONG",{});var Gzt=s(R0e);zPr=r(Gzt,"blenderbot"),Gzt.forEach(t),WPr=r(xXe," \u2014 "),tee=n(xXe,"A",{href:!0});var Ozt=s(tee);QPr=r(Ozt,"TFBlenderbotForConditionalGeneration"),Ozt.forEach(t),UPr=r(xXe," (Blenderbot model)"),xXe.forEach(t),HPr=i(Ne),H5=n(Ne,"LI",{});var $Xe=s(H5);P0e=n($Xe,"STRONG",{});var Vzt=s(P0e);JPr=r(Vzt,"blenderbot-small"),Vzt.forEach(t),YPr=r($Xe," \u2014 "),aee=n($Xe,"A",{href:!0});var Xzt=s(aee);KPr=r(Xzt,"TFBlenderbotSmallForConditionalGeneration"),Xzt.forEach(t),ZPr=r($Xe," (BlenderbotSmall model)"),$Xe.forEach(t),eBr=i(Ne),J5=n(Ne,"LI",{});var kXe=s(J5);B0e=n(kXe,"STRONG",{});var zzt=s(B0e);oBr=r(zzt,"encoder-decoder"),zzt.forEach(t),rBr=r(kXe," \u2014 "),nee=n(kXe,"A",{href:!0});var Wzt=s(nee);tBr=r(Wzt,"TFEncoderDecoderModel"),Wzt.forEach(t),aBr=r(kXe," (Encoder decoder model)"),kXe.forEach(t),nBr=i(Ne),Y5=n(Ne,"LI",{});var SXe=s(Y5);I0e=n(SXe,"STRONG",{});var Qzt=s(I0e);sBr=r(Qzt,"led"),Qzt.forEach(t),lBr=r(SXe," \u2014 "),see=n(SXe,"A",{href:!0});var Uzt=s(see);iBr=r(Uzt,"TFLEDForConditionalGeneration"),Uzt.forEach(t),dBr=r(SXe," (LED model)"),SXe.forEach(t),cBr=i(Ne),K5=n(Ne,"LI",{});var RXe=s(K5);N0e=n(RXe,"STRONG",{});var Hzt=s(N0e);mBr=r(Hzt,"marian"),Hzt.forEach(t),fBr=r(RXe," \u2014 "),lee=n(RXe,"A",{href:!0});var Jzt=s(lee);gBr=r(Jzt,"TFMarianMTModel"),Jzt.forEach(t),hBr=r(RXe," (Marian model)"),RXe.forEach(t),uBr=i(Ne),Z5=n(Ne,"LI",{});var PXe=s(Z5);q0e=n(PXe,"STRONG",{});var Yzt=s(q0e);pBr=r(Yzt,"mbart"),Yzt.forEach(t),_Br=r(PXe," \u2014 "),iee=n(PXe,"A",{href:!0});var Kzt=s(iee);bBr=r(Kzt,"TFMBartForConditionalGeneration"),Kzt.forEach(t),vBr=r(PXe," (mBART model)"),PXe.forEach(t),FBr=i(Ne),e0=n(Ne,"LI",{});var BXe=s(e0);j0e=n(BXe,"STRONG",{});var Zzt=s(j0e);TBr=r(Zzt,"mt5"),Zzt.forEach(t),MBr=r(BXe," \u2014 "),dee=n(BXe,"A",{href:!0});var eWt=s(dee);EBr=r(eWt,"TFMT5ForConditionalGeneration"),eWt.forEach(t),CBr=r(BXe," (MT5 model)"),BXe.forEach(t),wBr=i(Ne),o0=n(Ne,"LI",{});var IXe=s(o0);D0e=n(IXe,"STRONG",{});var oWt=s(D0e);ABr=r(oWt,"pegasus"),oWt.forEach(t),LBr=r(IXe," \u2014 "),cee=n(IXe,"A",{href:!0});var rWt=s(cee);yBr=r(rWt,"TFPegasusForConditionalGeneration"),rWt.forEach(t),xBr=r(IXe," (Pegasus model)"),IXe.forEach(t),$Br=i(Ne),r0=n(Ne,"LI",{});var NXe=s(r0);G0e=n(NXe,"STRONG",{});var tWt=s(G0e);kBr=r(tWt,"t5"),tWt.forEach(t),SBr=r(NXe," \u2014 "),mee=n(NXe,"A",{href:!0});var aWt=s(mee);RBr=r(aWt,"TFT5ForConditionalGeneration"),aWt.forEach(t),PBr=r(NXe," (T5 model)"),NXe.forEach(t),Ne.forEach(t),BBr=i(oi),T(t0.$$.fragment,oi),oi.forEach(t),ei.forEach(t),WHe=i(m),zc=n(m,"H2",{class:!0});var aKe=s(zc);a0=n(aKe,"A",{id:!0,class:!0,href:!0});var nWt=s(a0);O0e=n(nWt,"SPAN",{});var sWt=s(O0e);T(H$.$$.fragment,sWt),sWt.forEach(t),nWt.forEach(t),IBr=i(aKe),V0e=n(aKe,"SPAN",{});var lWt=s(V0e);NBr=r(lWt,"TFAutoModelForSequenceClassification"),lWt.forEach(t),aKe.forEach(t),QHe=i(m),mr=n(m,"DIV",{class:!0});var ri=s(mr);T(J$.$$.fragment,ri),qBr=i(ri),Wc=n(ri,"P",{});var use=s(Wc);jBr=r(use,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),fee=n(use,"A",{href:!0});var iWt=s(fee);DBr=r(iWt,"from_pretrained()"),iWt.forEach(t),GBr=r(use," class method or the "),gee=n(use,"A",{href:!0});var dWt=s(gee);OBr=r(dWt,"from_config()"),dWt.forEach(t),VBr=r(use,` class
method.`),use.forEach(t),XBr=i(ri),Y$=n(ri,"P",{});var nKe=s(Y$);zBr=r(nKe,"This class cannot be instantiated directly using "),X0e=n(nKe,"CODE",{});var cWt=s(X0e);WBr=r(cWt,"__init__()"),cWt.forEach(t),QBr=r(nKe," (throws an error)."),nKe.forEach(t),UBr=i(ri),zt=n(ri,"DIV",{class:!0});var Ry=s(zt);T(K$.$$.fragment,Ry),HBr=i(Ry),z0e=n(Ry,"P",{});var mWt=s(z0e);JBr=r(mWt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),mWt.forEach(t),YBr=i(Ry),Qc=n(Ry,"P",{});var pse=s(Qc);KBr=r(pse,`Note:
Loading a model from its configuration file does `),W0e=n(pse,"STRONG",{});var fWt=s(W0e);ZBr=r(fWt,"not"),fWt.forEach(t),eIr=r(pse,` load the model weights. It only affects the
model\u2019s configuration. Use `),hee=n(pse,"A",{href:!0});var gWt=s(hee);oIr=r(gWt,"from_pretrained()"),gWt.forEach(t),rIr=r(pse," to load the model weights."),pse.forEach(t),tIr=i(Ry),T(n0.$$.fragment,Ry),Ry.forEach(t),aIr=i(ri),Dr=n(ri,"DIV",{class:!0});var ti=s(Dr);T(Z$.$$.fragment,ti),nIr=i(ti),Q0e=n(ti,"P",{});var hWt=s(Q0e);sIr=r(hWt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),hWt.forEach(t),lIr=i(ti),En=n(ti,"P",{});var Py=s(En);iIr=r(Py,"The model class to instantiate is selected based on the "),U0e=n(Py,"CODE",{});var uWt=s(U0e);dIr=r(uWt,"model_type"),uWt.forEach(t),cIr=r(Py,` property of the config object (either
passed as an argument or loaded from `),H0e=n(Py,"CODE",{});var pWt=s(H0e);mIr=r(pWt,"pretrained_model_name_or_path"),pWt.forEach(t),fIr=r(Py,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J0e=n(Py,"CODE",{});var _Wt=s(J0e);gIr=r(_Wt,"pretrained_model_name_or_path"),_Wt.forEach(t),hIr=r(Py,":"),Py.forEach(t),uIr=i(ti),re=n(ti,"UL",{});var ae=s(re);s0=n(ae,"LI",{});var qXe=s(s0);Y0e=n(qXe,"STRONG",{});var bWt=s(Y0e);pIr=r(bWt,"albert"),bWt.forEach(t),_Ir=r(qXe," \u2014 "),uee=n(qXe,"A",{href:!0});var vWt=s(uee);bIr=r(vWt,"TFAlbertForSequenceClassification"),vWt.forEach(t),vIr=r(qXe," (ALBERT model)"),qXe.forEach(t),FIr=i(ae),l0=n(ae,"LI",{});var jXe=s(l0);K0e=n(jXe,"STRONG",{});var FWt=s(K0e);TIr=r(FWt,"bert"),FWt.forEach(t),MIr=r(jXe," \u2014 "),pee=n(jXe,"A",{href:!0});var TWt=s(pee);EIr=r(TWt,"TFBertForSequenceClassification"),TWt.forEach(t),CIr=r(jXe," (BERT model)"),jXe.forEach(t),wIr=i(ae),i0=n(ae,"LI",{});var DXe=s(i0);Z0e=n(DXe,"STRONG",{});var MWt=s(Z0e);AIr=r(MWt,"camembert"),MWt.forEach(t),LIr=r(DXe," \u2014 "),_ee=n(DXe,"A",{href:!0});var EWt=s(_ee);yIr=r(EWt,"TFCamembertForSequenceClassification"),EWt.forEach(t),xIr=r(DXe," (CamemBERT model)"),DXe.forEach(t),$Ir=i(ae),d0=n(ae,"LI",{});var GXe=s(d0);ewe=n(GXe,"STRONG",{});var CWt=s(ewe);kIr=r(CWt,"convbert"),CWt.forEach(t),SIr=r(GXe," \u2014 "),bee=n(GXe,"A",{href:!0});var wWt=s(bee);RIr=r(wWt,"TFConvBertForSequenceClassification"),wWt.forEach(t),PIr=r(GXe," (ConvBERT model)"),GXe.forEach(t),BIr=i(ae),c0=n(ae,"LI",{});var OXe=s(c0);owe=n(OXe,"STRONG",{});var AWt=s(owe);IIr=r(AWt,"ctrl"),AWt.forEach(t),NIr=r(OXe," \u2014 "),vee=n(OXe,"A",{href:!0});var LWt=s(vee);qIr=r(LWt,"TFCTRLForSequenceClassification"),LWt.forEach(t),jIr=r(OXe," (CTRL model)"),OXe.forEach(t),DIr=i(ae),m0=n(ae,"LI",{});var VXe=s(m0);rwe=n(VXe,"STRONG",{});var yWt=s(rwe);GIr=r(yWt,"deberta"),yWt.forEach(t),OIr=r(VXe," \u2014 "),Fee=n(VXe,"A",{href:!0});var xWt=s(Fee);VIr=r(xWt,"TFDebertaForSequenceClassification"),xWt.forEach(t),XIr=r(VXe," (DeBERTa model)"),VXe.forEach(t),zIr=i(ae),f0=n(ae,"LI",{});var XXe=s(f0);twe=n(XXe,"STRONG",{});var $Wt=s(twe);WIr=r($Wt,"deberta-v2"),$Wt.forEach(t),QIr=r(XXe," \u2014 "),Tee=n(XXe,"A",{href:!0});var kWt=s(Tee);UIr=r(kWt,"TFDebertaV2ForSequenceClassification"),kWt.forEach(t),HIr=r(XXe," (DeBERTa-v2 model)"),XXe.forEach(t),JIr=i(ae),g0=n(ae,"LI",{});var zXe=s(g0);awe=n(zXe,"STRONG",{});var SWt=s(awe);YIr=r(SWt,"distilbert"),SWt.forEach(t),KIr=r(zXe," \u2014 "),Mee=n(zXe,"A",{href:!0});var RWt=s(Mee);ZIr=r(RWt,"TFDistilBertForSequenceClassification"),RWt.forEach(t),eNr=r(zXe," (DistilBERT model)"),zXe.forEach(t),oNr=i(ae),h0=n(ae,"LI",{});var WXe=s(h0);nwe=n(WXe,"STRONG",{});var PWt=s(nwe);rNr=r(PWt,"electra"),PWt.forEach(t),tNr=r(WXe," \u2014 "),Eee=n(WXe,"A",{href:!0});var BWt=s(Eee);aNr=r(BWt,"TFElectraForSequenceClassification"),BWt.forEach(t),nNr=r(WXe," (ELECTRA model)"),WXe.forEach(t),sNr=i(ae),u0=n(ae,"LI",{});var QXe=s(u0);swe=n(QXe,"STRONG",{});var IWt=s(swe);lNr=r(IWt,"flaubert"),IWt.forEach(t),iNr=r(QXe," \u2014 "),Cee=n(QXe,"A",{href:!0});var NWt=s(Cee);dNr=r(NWt,"TFFlaubertForSequenceClassification"),NWt.forEach(t),cNr=r(QXe," (FlauBERT model)"),QXe.forEach(t),mNr=i(ae),p0=n(ae,"LI",{});var UXe=s(p0);lwe=n(UXe,"STRONG",{});var qWt=s(lwe);fNr=r(qWt,"funnel"),qWt.forEach(t),gNr=r(UXe," \u2014 "),wee=n(UXe,"A",{href:!0});var jWt=s(wee);hNr=r(jWt,"TFFunnelForSequenceClassification"),jWt.forEach(t),uNr=r(UXe," (Funnel Transformer model)"),UXe.forEach(t),pNr=i(ae),_0=n(ae,"LI",{});var HXe=s(_0);iwe=n(HXe,"STRONG",{});var DWt=s(iwe);_Nr=r(DWt,"gpt2"),DWt.forEach(t),bNr=r(HXe," \u2014 "),Aee=n(HXe,"A",{href:!0});var GWt=s(Aee);vNr=r(GWt,"TFGPT2ForSequenceClassification"),GWt.forEach(t),FNr=r(HXe," (OpenAI GPT-2 model)"),HXe.forEach(t),TNr=i(ae),b0=n(ae,"LI",{});var JXe=s(b0);dwe=n(JXe,"STRONG",{});var OWt=s(dwe);MNr=r(OWt,"gptj"),OWt.forEach(t),ENr=r(JXe," \u2014 "),Lee=n(JXe,"A",{href:!0});var VWt=s(Lee);CNr=r(VWt,"TFGPTJForSequenceClassification"),VWt.forEach(t),wNr=r(JXe," (GPT-J model)"),JXe.forEach(t),ANr=i(ae),v0=n(ae,"LI",{});var YXe=s(v0);cwe=n(YXe,"STRONG",{});var XWt=s(cwe);LNr=r(XWt,"layoutlm"),XWt.forEach(t),yNr=r(YXe," \u2014 "),yee=n(YXe,"A",{href:!0});var zWt=s(yee);xNr=r(zWt,"TFLayoutLMForSequenceClassification"),zWt.forEach(t),$Nr=r(YXe," (LayoutLM model)"),YXe.forEach(t),kNr=i(ae),F0=n(ae,"LI",{});var KXe=s(F0);mwe=n(KXe,"STRONG",{});var WWt=s(mwe);SNr=r(WWt,"layoutlmv3"),WWt.forEach(t),RNr=r(KXe," \u2014 "),xee=n(KXe,"A",{href:!0});var QWt=s(xee);PNr=r(QWt,"TFLayoutLMv3ForSequenceClassification"),QWt.forEach(t),BNr=r(KXe," (LayoutLMv3 model)"),KXe.forEach(t),INr=i(ae),T0=n(ae,"LI",{});var ZXe=s(T0);fwe=n(ZXe,"STRONG",{});var UWt=s(fwe);NNr=r(UWt,"longformer"),UWt.forEach(t),qNr=r(ZXe," \u2014 "),$ee=n(ZXe,"A",{href:!0});var HWt=s($ee);jNr=r(HWt,"TFLongformerForSequenceClassification"),HWt.forEach(t),DNr=r(ZXe," (Longformer model)"),ZXe.forEach(t),GNr=i(ae),M0=n(ae,"LI",{});var eze=s(M0);gwe=n(eze,"STRONG",{});var JWt=s(gwe);ONr=r(JWt,"mobilebert"),JWt.forEach(t),VNr=r(eze," \u2014 "),kee=n(eze,"A",{href:!0});var YWt=s(kee);XNr=r(YWt,"TFMobileBertForSequenceClassification"),YWt.forEach(t),zNr=r(eze," (MobileBERT model)"),eze.forEach(t),WNr=i(ae),E0=n(ae,"LI",{});var oze=s(E0);hwe=n(oze,"STRONG",{});var KWt=s(hwe);QNr=r(KWt,"mpnet"),KWt.forEach(t),UNr=r(oze," \u2014 "),See=n(oze,"A",{href:!0});var ZWt=s(See);HNr=r(ZWt,"TFMPNetForSequenceClassification"),ZWt.forEach(t),JNr=r(oze," (MPNet model)"),oze.forEach(t),YNr=i(ae),C0=n(ae,"LI",{});var rze=s(C0);uwe=n(rze,"STRONG",{});var eQt=s(uwe);KNr=r(eQt,"openai-gpt"),eQt.forEach(t),ZNr=r(rze," \u2014 "),Ree=n(rze,"A",{href:!0});var oQt=s(Ree);eqr=r(oQt,"TFOpenAIGPTForSequenceClassification"),oQt.forEach(t),oqr=r(rze," (OpenAI GPT model)"),rze.forEach(t),rqr=i(ae),w0=n(ae,"LI",{});var tze=s(w0);pwe=n(tze,"STRONG",{});var rQt=s(pwe);tqr=r(rQt,"rembert"),rQt.forEach(t),aqr=r(tze," \u2014 "),Pee=n(tze,"A",{href:!0});var tQt=s(Pee);nqr=r(tQt,"TFRemBertForSequenceClassification"),tQt.forEach(t),sqr=r(tze," (RemBERT model)"),tze.forEach(t),lqr=i(ae),A0=n(ae,"LI",{});var aze=s(A0);_we=n(aze,"STRONG",{});var aQt=s(_we);iqr=r(aQt,"roberta"),aQt.forEach(t),dqr=r(aze," \u2014 "),Bee=n(aze,"A",{href:!0});var nQt=s(Bee);cqr=r(nQt,"TFRobertaForSequenceClassification"),nQt.forEach(t),mqr=r(aze," (RoBERTa model)"),aze.forEach(t),fqr=i(ae),L0=n(ae,"LI",{});var nze=s(L0);bwe=n(nze,"STRONG",{});var sQt=s(bwe);gqr=r(sQt,"roformer"),sQt.forEach(t),hqr=r(nze," \u2014 "),Iee=n(nze,"A",{href:!0});var lQt=s(Iee);uqr=r(lQt,"TFRoFormerForSequenceClassification"),lQt.forEach(t),pqr=r(nze," (RoFormer model)"),nze.forEach(t),_qr=i(ae),y0=n(ae,"LI",{});var sze=s(y0);vwe=n(sze,"STRONG",{});var iQt=s(vwe);bqr=r(iQt,"tapas"),iQt.forEach(t),vqr=r(sze," \u2014 "),Nee=n(sze,"A",{href:!0});var dQt=s(Nee);Fqr=r(dQt,"TFTapasForSequenceClassification"),dQt.forEach(t),Tqr=r(sze," (TAPAS model)"),sze.forEach(t),Mqr=i(ae),x0=n(ae,"LI",{});var lze=s(x0);Fwe=n(lze,"STRONG",{});var cQt=s(Fwe);Eqr=r(cQt,"transfo-xl"),cQt.forEach(t),Cqr=r(lze," \u2014 "),qee=n(lze,"A",{href:!0});var mQt=s(qee);wqr=r(mQt,"TFTransfoXLForSequenceClassification"),mQt.forEach(t),Aqr=r(lze," (Transformer-XL model)"),lze.forEach(t),Lqr=i(ae),$0=n(ae,"LI",{});var ize=s($0);Twe=n(ize,"STRONG",{});var fQt=s(Twe);yqr=r(fQt,"xlm"),fQt.forEach(t),xqr=r(ize," \u2014 "),jee=n(ize,"A",{href:!0});var gQt=s(jee);$qr=r(gQt,"TFXLMForSequenceClassification"),gQt.forEach(t),kqr=r(ize," (XLM model)"),ize.forEach(t),Sqr=i(ae),k0=n(ae,"LI",{});var dze=s(k0);Mwe=n(dze,"STRONG",{});var hQt=s(Mwe);Rqr=r(hQt,"xlm-roberta"),hQt.forEach(t),Pqr=r(dze," \u2014 "),Dee=n(dze,"A",{href:!0});var uQt=s(Dee);Bqr=r(uQt,"TFXLMRobertaForSequenceClassification"),uQt.forEach(t),Iqr=r(dze," (XLM-RoBERTa model)"),dze.forEach(t),Nqr=i(ae),S0=n(ae,"LI",{});var cze=s(S0);Ewe=n(cze,"STRONG",{});var pQt=s(Ewe);qqr=r(pQt,"xlnet"),pQt.forEach(t),jqr=r(cze," \u2014 "),Gee=n(cze,"A",{href:!0});var _Qt=s(Gee);Dqr=r(_Qt,"TFXLNetForSequenceClassification"),_Qt.forEach(t),Gqr=r(cze," (XLNet model)"),cze.forEach(t),ae.forEach(t),Oqr=i(ti),T(R0.$$.fragment,ti),ti.forEach(t),ri.forEach(t),UHe=i(m),Uc=n(m,"H2",{class:!0});var sKe=s(Uc);P0=n(sKe,"A",{id:!0,class:!0,href:!0});var bQt=s(P0);Cwe=n(bQt,"SPAN",{});var vQt=s(Cwe);T(ek.$$.fragment,vQt),vQt.forEach(t),bQt.forEach(t),Vqr=i(sKe),wwe=n(sKe,"SPAN",{});var FQt=s(wwe);Xqr=r(FQt,"TFAutoModelForMultipleChoice"),FQt.forEach(t),sKe.forEach(t),HHe=i(m),fr=n(m,"DIV",{class:!0});var ai=s(fr);T(ok.$$.fragment,ai),zqr=i(ai),Hc=n(ai,"P",{});var _se=s(Hc);Wqr=r(_se,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Oee=n(_se,"A",{href:!0});var TQt=s(Oee);Qqr=r(TQt,"from_pretrained()"),TQt.forEach(t),Uqr=r(_se," class method or the "),Vee=n(_se,"A",{href:!0});var MQt=s(Vee);Hqr=r(MQt,"from_config()"),MQt.forEach(t),Jqr=r(_se,` class
method.`),_se.forEach(t),Yqr=i(ai),rk=n(ai,"P",{});var lKe=s(rk);Kqr=r(lKe,"This class cannot be instantiated directly using "),Awe=n(lKe,"CODE",{});var EQt=s(Awe);Zqr=r(EQt,"__init__()"),EQt.forEach(t),ejr=r(lKe," (throws an error)."),lKe.forEach(t),ojr=i(ai),Wt=n(ai,"DIV",{class:!0});var By=s(Wt);T(tk.$$.fragment,By),rjr=i(By),Lwe=n(By,"P",{});var CQt=s(Lwe);tjr=r(CQt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),CQt.forEach(t),ajr=i(By),Jc=n(By,"P",{});var bse=s(Jc);njr=r(bse,`Note:
Loading a model from its configuration file does `),ywe=n(bse,"STRONG",{});var wQt=s(ywe);sjr=r(wQt,"not"),wQt.forEach(t),ljr=r(bse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xee=n(bse,"A",{href:!0});var AQt=s(Xee);ijr=r(AQt,"from_pretrained()"),AQt.forEach(t),djr=r(bse," to load the model weights."),bse.forEach(t),cjr=i(By),T(B0.$$.fragment,By),By.forEach(t),mjr=i(ai),Gr=n(ai,"DIV",{class:!0});var ni=s(Gr);T(ak.$$.fragment,ni),fjr=i(ni),xwe=n(ni,"P",{});var LQt=s(xwe);gjr=r(LQt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),LQt.forEach(t),hjr=i(ni),Cn=n(ni,"P",{});var Iy=s(Cn);ujr=r(Iy,"The model class to instantiate is selected based on the "),$we=n(Iy,"CODE",{});var yQt=s($we);pjr=r(yQt,"model_type"),yQt.forEach(t),_jr=r(Iy,` property of the config object (either
passed as an argument or loaded from `),kwe=n(Iy,"CODE",{});var xQt=s(kwe);bjr=r(xQt,"pretrained_model_name_or_path"),xQt.forEach(t),vjr=r(Iy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Swe=n(Iy,"CODE",{});var $Qt=s(Swe);Fjr=r($Qt,"pretrained_model_name_or_path"),$Qt.forEach(t),Tjr=r(Iy,":"),Iy.forEach(t),Mjr=i(ni),ve=n(ni,"UL",{});var Te=s(ve);I0=n(Te,"LI",{});var mze=s(I0);Rwe=n(mze,"STRONG",{});var kQt=s(Rwe);Ejr=r(kQt,"albert"),kQt.forEach(t),Cjr=r(mze," \u2014 "),zee=n(mze,"A",{href:!0});var SQt=s(zee);wjr=r(SQt,"TFAlbertForMultipleChoice"),SQt.forEach(t),Ajr=r(mze," (ALBERT model)"),mze.forEach(t),Ljr=i(Te),N0=n(Te,"LI",{});var fze=s(N0);Pwe=n(fze,"STRONG",{});var RQt=s(Pwe);yjr=r(RQt,"bert"),RQt.forEach(t),xjr=r(fze," \u2014 "),Wee=n(fze,"A",{href:!0});var PQt=s(Wee);$jr=r(PQt,"TFBertForMultipleChoice"),PQt.forEach(t),kjr=r(fze," (BERT model)"),fze.forEach(t),Sjr=i(Te),q0=n(Te,"LI",{});var gze=s(q0);Bwe=n(gze,"STRONG",{});var BQt=s(Bwe);Rjr=r(BQt,"camembert"),BQt.forEach(t),Pjr=r(gze," \u2014 "),Qee=n(gze,"A",{href:!0});var IQt=s(Qee);Bjr=r(IQt,"TFCamembertForMultipleChoice"),IQt.forEach(t),Ijr=r(gze," (CamemBERT model)"),gze.forEach(t),Njr=i(Te),j0=n(Te,"LI",{});var hze=s(j0);Iwe=n(hze,"STRONG",{});var NQt=s(Iwe);qjr=r(NQt,"convbert"),NQt.forEach(t),jjr=r(hze," \u2014 "),Uee=n(hze,"A",{href:!0});var qQt=s(Uee);Djr=r(qQt,"TFConvBertForMultipleChoice"),qQt.forEach(t),Gjr=r(hze," (ConvBERT model)"),hze.forEach(t),Ojr=i(Te),D0=n(Te,"LI",{});var uze=s(D0);Nwe=n(uze,"STRONG",{});var jQt=s(Nwe);Vjr=r(jQt,"distilbert"),jQt.forEach(t),Xjr=r(uze," \u2014 "),Hee=n(uze,"A",{href:!0});var DQt=s(Hee);zjr=r(DQt,"TFDistilBertForMultipleChoice"),DQt.forEach(t),Wjr=r(uze," (DistilBERT model)"),uze.forEach(t),Qjr=i(Te),G0=n(Te,"LI",{});var pze=s(G0);qwe=n(pze,"STRONG",{});var GQt=s(qwe);Ujr=r(GQt,"electra"),GQt.forEach(t),Hjr=r(pze," \u2014 "),Jee=n(pze,"A",{href:!0});var OQt=s(Jee);Jjr=r(OQt,"TFElectraForMultipleChoice"),OQt.forEach(t),Yjr=r(pze," (ELECTRA model)"),pze.forEach(t),Kjr=i(Te),O0=n(Te,"LI",{});var _ze=s(O0);jwe=n(_ze,"STRONG",{});var VQt=s(jwe);Zjr=r(VQt,"flaubert"),VQt.forEach(t),eDr=r(_ze," \u2014 "),Yee=n(_ze,"A",{href:!0});var XQt=s(Yee);oDr=r(XQt,"TFFlaubertForMultipleChoice"),XQt.forEach(t),rDr=r(_ze," (FlauBERT model)"),_ze.forEach(t),tDr=i(Te),V0=n(Te,"LI",{});var bze=s(V0);Dwe=n(bze,"STRONG",{});var zQt=s(Dwe);aDr=r(zQt,"funnel"),zQt.forEach(t),nDr=r(bze," \u2014 "),Kee=n(bze,"A",{href:!0});var WQt=s(Kee);sDr=r(WQt,"TFFunnelForMultipleChoice"),WQt.forEach(t),lDr=r(bze," (Funnel Transformer model)"),bze.forEach(t),iDr=i(Te),X0=n(Te,"LI",{});var vze=s(X0);Gwe=n(vze,"STRONG",{});var QQt=s(Gwe);dDr=r(QQt,"longformer"),QQt.forEach(t),cDr=r(vze," \u2014 "),Zee=n(vze,"A",{href:!0});var UQt=s(Zee);mDr=r(UQt,"TFLongformerForMultipleChoice"),UQt.forEach(t),fDr=r(vze," (Longformer model)"),vze.forEach(t),gDr=i(Te),z0=n(Te,"LI",{});var Fze=s(z0);Owe=n(Fze,"STRONG",{});var HQt=s(Owe);hDr=r(HQt,"mobilebert"),HQt.forEach(t),uDr=r(Fze," \u2014 "),eoe=n(Fze,"A",{href:!0});var JQt=s(eoe);pDr=r(JQt,"TFMobileBertForMultipleChoice"),JQt.forEach(t),_Dr=r(Fze," (MobileBERT model)"),Fze.forEach(t),bDr=i(Te),W0=n(Te,"LI",{});var Tze=s(W0);Vwe=n(Tze,"STRONG",{});var YQt=s(Vwe);vDr=r(YQt,"mpnet"),YQt.forEach(t),FDr=r(Tze," \u2014 "),ooe=n(Tze,"A",{href:!0});var KQt=s(ooe);TDr=r(KQt,"TFMPNetForMultipleChoice"),KQt.forEach(t),MDr=r(Tze," (MPNet model)"),Tze.forEach(t),EDr=i(Te),Q0=n(Te,"LI",{});var Mze=s(Q0);Xwe=n(Mze,"STRONG",{});var ZQt=s(Xwe);CDr=r(ZQt,"rembert"),ZQt.forEach(t),wDr=r(Mze," \u2014 "),roe=n(Mze,"A",{href:!0});var eUt=s(roe);ADr=r(eUt,"TFRemBertForMultipleChoice"),eUt.forEach(t),LDr=r(Mze," (RemBERT model)"),Mze.forEach(t),yDr=i(Te),U0=n(Te,"LI",{});var Eze=s(U0);zwe=n(Eze,"STRONG",{});var oUt=s(zwe);xDr=r(oUt,"roberta"),oUt.forEach(t),$Dr=r(Eze," \u2014 "),toe=n(Eze,"A",{href:!0});var rUt=s(toe);kDr=r(rUt,"TFRobertaForMultipleChoice"),rUt.forEach(t),SDr=r(Eze," (RoBERTa model)"),Eze.forEach(t),RDr=i(Te),H0=n(Te,"LI",{});var Cze=s(H0);Wwe=n(Cze,"STRONG",{});var tUt=s(Wwe);PDr=r(tUt,"roformer"),tUt.forEach(t),BDr=r(Cze," \u2014 "),aoe=n(Cze,"A",{href:!0});var aUt=s(aoe);IDr=r(aUt,"TFRoFormerForMultipleChoice"),aUt.forEach(t),NDr=r(Cze," (RoFormer model)"),Cze.forEach(t),qDr=i(Te),J0=n(Te,"LI",{});var wze=s(J0);Qwe=n(wze,"STRONG",{});var nUt=s(Qwe);jDr=r(nUt,"xlm"),nUt.forEach(t),DDr=r(wze," \u2014 "),noe=n(wze,"A",{href:!0});var sUt=s(noe);GDr=r(sUt,"TFXLMForMultipleChoice"),sUt.forEach(t),ODr=r(wze," (XLM model)"),wze.forEach(t),VDr=i(Te),Y0=n(Te,"LI",{});var Aze=s(Y0);Uwe=n(Aze,"STRONG",{});var lUt=s(Uwe);XDr=r(lUt,"xlm-roberta"),lUt.forEach(t),zDr=r(Aze," \u2014 "),soe=n(Aze,"A",{href:!0});var iUt=s(soe);WDr=r(iUt,"TFXLMRobertaForMultipleChoice"),iUt.forEach(t),QDr=r(Aze," (XLM-RoBERTa model)"),Aze.forEach(t),UDr=i(Te),K0=n(Te,"LI",{});var Lze=s(K0);Hwe=n(Lze,"STRONG",{});var dUt=s(Hwe);HDr=r(dUt,"xlnet"),dUt.forEach(t),JDr=r(Lze," \u2014 "),loe=n(Lze,"A",{href:!0});var cUt=s(loe);YDr=r(cUt,"TFXLNetForMultipleChoice"),cUt.forEach(t),KDr=r(Lze," (XLNet model)"),Lze.forEach(t),Te.forEach(t),ZDr=i(ni),T(Z0.$$.fragment,ni),ni.forEach(t),ai.forEach(t),JHe=i(m),Yc=n(m,"H2",{class:!0});var iKe=s(Yc);ew=n(iKe,"A",{id:!0,class:!0,href:!0});var mUt=s(ew);Jwe=n(mUt,"SPAN",{});var fUt=s(Jwe);T(nk.$$.fragment,fUt),fUt.forEach(t),mUt.forEach(t),eGr=i(iKe),Ywe=n(iKe,"SPAN",{});var gUt=s(Ywe);oGr=r(gUt,"TFAutoModelForNextSentencePrediction"),gUt.forEach(t),iKe.forEach(t),YHe=i(m),gr=n(m,"DIV",{class:!0});var si=s(gr);T(sk.$$.fragment,si),rGr=i(si),Kc=n(si,"P",{});var vse=s(Kc);tGr=r(vse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ioe=n(vse,"A",{href:!0});var hUt=s(ioe);aGr=r(hUt,"from_pretrained()"),hUt.forEach(t),nGr=r(vse," class method or the "),doe=n(vse,"A",{href:!0});var uUt=s(doe);sGr=r(uUt,"from_config()"),uUt.forEach(t),lGr=r(vse,` class
method.`),vse.forEach(t),iGr=i(si),lk=n(si,"P",{});var dKe=s(lk);dGr=r(dKe,"This class cannot be instantiated directly using "),Kwe=n(dKe,"CODE",{});var pUt=s(Kwe);cGr=r(pUt,"__init__()"),pUt.forEach(t),mGr=r(dKe," (throws an error)."),dKe.forEach(t),fGr=i(si),Qt=n(si,"DIV",{class:!0});var Ny=s(Qt);T(ik.$$.fragment,Ny),gGr=i(Ny),Zwe=n(Ny,"P",{});var _Ut=s(Zwe);hGr=r(_Ut,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),_Ut.forEach(t),uGr=i(Ny),Zc=n(Ny,"P",{});var Fse=s(Zc);pGr=r(Fse,`Note:
Loading a model from its configuration file does `),e6e=n(Fse,"STRONG",{});var bUt=s(e6e);_Gr=r(bUt,"not"),bUt.forEach(t),bGr=r(Fse,` load the model weights. It only affects the
model\u2019s configuration. Use `),coe=n(Fse,"A",{href:!0});var vUt=s(coe);vGr=r(vUt,"from_pretrained()"),vUt.forEach(t),FGr=r(Fse," to load the model weights."),Fse.forEach(t),TGr=i(Ny),T(ow.$$.fragment,Ny),Ny.forEach(t),MGr=i(si),Or=n(si,"DIV",{class:!0});var li=s(Or);T(dk.$$.fragment,li),EGr=i(li),o6e=n(li,"P",{});var FUt=s(o6e);CGr=r(FUt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),FUt.forEach(t),wGr=i(li),wn=n(li,"P",{});var qy=s(wn);AGr=r(qy,"The model class to instantiate is selected based on the "),r6e=n(qy,"CODE",{});var TUt=s(r6e);LGr=r(TUt,"model_type"),TUt.forEach(t),yGr=r(qy,` property of the config object (either
passed as an argument or loaded from `),t6e=n(qy,"CODE",{});var MUt=s(t6e);xGr=r(MUt,"pretrained_model_name_or_path"),MUt.forEach(t),$Gr=r(qy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a6e=n(qy,"CODE",{});var EUt=s(a6e);kGr=r(EUt,"pretrained_model_name_or_path"),EUt.forEach(t),SGr=r(qy,":"),qy.forEach(t),RGr=i(li),ck=n(li,"UL",{});var cKe=s(ck);rw=n(cKe,"LI",{});var yze=s(rw);n6e=n(yze,"STRONG",{});var CUt=s(n6e);PGr=r(CUt,"bert"),CUt.forEach(t),BGr=r(yze," \u2014 "),moe=n(yze,"A",{href:!0});var wUt=s(moe);IGr=r(wUt,"TFBertForNextSentencePrediction"),wUt.forEach(t),NGr=r(yze," (BERT model)"),yze.forEach(t),qGr=i(cKe),tw=n(cKe,"LI",{});var xze=s(tw);s6e=n(xze,"STRONG",{});var AUt=s(s6e);jGr=r(AUt,"mobilebert"),AUt.forEach(t),DGr=r(xze," \u2014 "),foe=n(xze,"A",{href:!0});var LUt=s(foe);GGr=r(LUt,"TFMobileBertForNextSentencePrediction"),LUt.forEach(t),OGr=r(xze," (MobileBERT model)"),xze.forEach(t),cKe.forEach(t),VGr=i(li),T(aw.$$.fragment,li),li.forEach(t),si.forEach(t),KHe=i(m),em=n(m,"H2",{class:!0});var mKe=s(em);nw=n(mKe,"A",{id:!0,class:!0,href:!0});var yUt=s(nw);l6e=n(yUt,"SPAN",{});var xUt=s(l6e);T(mk.$$.fragment,xUt),xUt.forEach(t),yUt.forEach(t),XGr=i(mKe),i6e=n(mKe,"SPAN",{});var $Ut=s(i6e);zGr=r($Ut,"TFAutoModelForTableQuestionAnswering"),$Ut.forEach(t),mKe.forEach(t),ZHe=i(m),hr=n(m,"DIV",{class:!0});var ii=s(hr);T(fk.$$.fragment,ii),WGr=i(ii),om=n(ii,"P",{});var Tse=s(om);QGr=r(Tse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),goe=n(Tse,"A",{href:!0});var kUt=s(goe);UGr=r(kUt,"from_pretrained()"),kUt.forEach(t),HGr=r(Tse," class method or the "),hoe=n(Tse,"A",{href:!0});var SUt=s(hoe);JGr=r(SUt,"from_config()"),SUt.forEach(t),YGr=r(Tse,` class
method.`),Tse.forEach(t),KGr=i(ii),gk=n(ii,"P",{});var fKe=s(gk);ZGr=r(fKe,"This class cannot be instantiated directly using "),d6e=n(fKe,"CODE",{});var RUt=s(d6e);eOr=r(RUt,"__init__()"),RUt.forEach(t),oOr=r(fKe," (throws an error)."),fKe.forEach(t),rOr=i(ii),Ut=n(ii,"DIV",{class:!0});var jy=s(Ut);T(hk.$$.fragment,jy),tOr=i(jy),c6e=n(jy,"P",{});var PUt=s(c6e);aOr=r(PUt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),PUt.forEach(t),nOr=i(jy),rm=n(jy,"P",{});var Mse=s(rm);sOr=r(Mse,`Note:
Loading a model from its configuration file does `),m6e=n(Mse,"STRONG",{});var BUt=s(m6e);lOr=r(BUt,"not"),BUt.forEach(t),iOr=r(Mse,` load the model weights. It only affects the
model\u2019s configuration. Use `),uoe=n(Mse,"A",{href:!0});var IUt=s(uoe);dOr=r(IUt,"from_pretrained()"),IUt.forEach(t),cOr=r(Mse," to load the model weights."),Mse.forEach(t),mOr=i(jy),T(sw.$$.fragment,jy),jy.forEach(t),fOr=i(ii),Vr=n(ii,"DIV",{class:!0});var di=s(Vr);T(uk.$$.fragment,di),gOr=i(di),f6e=n(di,"P",{});var NUt=s(f6e);hOr=r(NUt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),NUt.forEach(t),uOr=i(di),An=n(di,"P",{});var Dy=s(An);pOr=r(Dy,"The model class to instantiate is selected based on the "),g6e=n(Dy,"CODE",{});var qUt=s(g6e);_Or=r(qUt,"model_type"),qUt.forEach(t),bOr=r(Dy,` property of the config object (either
passed as an argument or loaded from `),h6e=n(Dy,"CODE",{});var jUt=s(h6e);vOr=r(jUt,"pretrained_model_name_or_path"),jUt.forEach(t),FOr=r(Dy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u6e=n(Dy,"CODE",{});var DUt=s(u6e);TOr=r(DUt,"pretrained_model_name_or_path"),DUt.forEach(t),MOr=r(Dy,":"),Dy.forEach(t),EOr=i(di),p6e=n(di,"UL",{});var GUt=s(p6e);lw=n(GUt,"LI",{});var $ze=s(lw);_6e=n($ze,"STRONG",{});var OUt=s(_6e);COr=r(OUt,"tapas"),OUt.forEach(t),wOr=r($ze," \u2014 "),poe=n($ze,"A",{href:!0});var VUt=s(poe);AOr=r(VUt,"TFTapasForQuestionAnswering"),VUt.forEach(t),LOr=r($ze," (TAPAS model)"),$ze.forEach(t),GUt.forEach(t),yOr=i(di),T(iw.$$.fragment,di),di.forEach(t),ii.forEach(t),eJe=i(m),tm=n(m,"H2",{class:!0});var gKe=s(tm);dw=n(gKe,"A",{id:!0,class:!0,href:!0});var XUt=s(dw);b6e=n(XUt,"SPAN",{});var zUt=s(b6e);T(pk.$$.fragment,zUt),zUt.forEach(t),XUt.forEach(t),xOr=i(gKe),v6e=n(gKe,"SPAN",{});var WUt=s(v6e);$Or=r(WUt,"TFAutoModelForTokenClassification"),WUt.forEach(t),gKe.forEach(t),oJe=i(m),ur=n(m,"DIV",{class:!0});var ci=s(ur);T(_k.$$.fragment,ci),kOr=i(ci),am=n(ci,"P",{});var Ese=s(am);SOr=r(Ese,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),_oe=n(Ese,"A",{href:!0});var QUt=s(_oe);ROr=r(QUt,"from_pretrained()"),QUt.forEach(t),POr=r(Ese," class method or the "),boe=n(Ese,"A",{href:!0});var UUt=s(boe);BOr=r(UUt,"from_config()"),UUt.forEach(t),IOr=r(Ese,` class
method.`),Ese.forEach(t),NOr=i(ci),bk=n(ci,"P",{});var hKe=s(bk);qOr=r(hKe,"This class cannot be instantiated directly using "),F6e=n(hKe,"CODE",{});var HUt=s(F6e);jOr=r(HUt,"__init__()"),HUt.forEach(t),DOr=r(hKe," (throws an error)."),hKe.forEach(t),GOr=i(ci),Ht=n(ci,"DIV",{class:!0});var Gy=s(Ht);T(vk.$$.fragment,Gy),OOr=i(Gy),T6e=n(Gy,"P",{});var JUt=s(T6e);VOr=r(JUt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),JUt.forEach(t),XOr=i(Gy),nm=n(Gy,"P",{});var Cse=s(nm);zOr=r(Cse,`Note:
Loading a model from its configuration file does `),M6e=n(Cse,"STRONG",{});var YUt=s(M6e);WOr=r(YUt,"not"),YUt.forEach(t),QOr=r(Cse,` load the model weights. It only affects the
model\u2019s configuration. Use `),voe=n(Cse,"A",{href:!0});var KUt=s(voe);UOr=r(KUt,"from_pretrained()"),KUt.forEach(t),HOr=r(Cse," to load the model weights."),Cse.forEach(t),JOr=i(Gy),T(cw.$$.fragment,Gy),Gy.forEach(t),YOr=i(ci),Xr=n(ci,"DIV",{class:!0});var mi=s(Xr);T(Fk.$$.fragment,mi),KOr=i(mi),E6e=n(mi,"P",{});var ZUt=s(E6e);ZOr=r(ZUt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ZUt.forEach(t),eVr=i(mi),Ln=n(mi,"P",{});var Oy=s(Ln);oVr=r(Oy,"The model class to instantiate is selected based on the "),C6e=n(Oy,"CODE",{});var eHt=s(C6e);rVr=r(eHt,"model_type"),eHt.forEach(t),tVr=r(Oy,` property of the config object (either
passed as an argument or loaded from `),w6e=n(Oy,"CODE",{});var oHt=s(w6e);aVr=r(oHt,"pretrained_model_name_or_path"),oHt.forEach(t),nVr=r(Oy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A6e=n(Oy,"CODE",{});var rHt=s(A6e);sVr=r(rHt,"pretrained_model_name_or_path"),rHt.forEach(t),lVr=r(Oy,":"),Oy.forEach(t),iVr=i(mi),ie=n(mi,"UL",{});var fe=s(ie);mw=n(fe,"LI",{});var kze=s(mw);L6e=n(kze,"STRONG",{});var tHt=s(L6e);dVr=r(tHt,"albert"),tHt.forEach(t),cVr=r(kze," \u2014 "),Foe=n(kze,"A",{href:!0});var aHt=s(Foe);mVr=r(aHt,"TFAlbertForTokenClassification"),aHt.forEach(t),fVr=r(kze," (ALBERT model)"),kze.forEach(t),gVr=i(fe),fw=n(fe,"LI",{});var Sze=s(fw);y6e=n(Sze,"STRONG",{});var nHt=s(y6e);hVr=r(nHt,"bert"),nHt.forEach(t),uVr=r(Sze," \u2014 "),Toe=n(Sze,"A",{href:!0});var sHt=s(Toe);pVr=r(sHt,"TFBertForTokenClassification"),sHt.forEach(t),_Vr=r(Sze," (BERT model)"),Sze.forEach(t),bVr=i(fe),gw=n(fe,"LI",{});var Rze=s(gw);x6e=n(Rze,"STRONG",{});var lHt=s(x6e);vVr=r(lHt,"camembert"),lHt.forEach(t),FVr=r(Rze," \u2014 "),Moe=n(Rze,"A",{href:!0});var iHt=s(Moe);TVr=r(iHt,"TFCamembertForTokenClassification"),iHt.forEach(t),MVr=r(Rze," (CamemBERT model)"),Rze.forEach(t),EVr=i(fe),hw=n(fe,"LI",{});var Pze=s(hw);$6e=n(Pze,"STRONG",{});var dHt=s($6e);CVr=r(dHt,"convbert"),dHt.forEach(t),wVr=r(Pze," \u2014 "),Eoe=n(Pze,"A",{href:!0});var cHt=s(Eoe);AVr=r(cHt,"TFConvBertForTokenClassification"),cHt.forEach(t),LVr=r(Pze," (ConvBERT model)"),Pze.forEach(t),yVr=i(fe),uw=n(fe,"LI",{});var Bze=s(uw);k6e=n(Bze,"STRONG",{});var mHt=s(k6e);xVr=r(mHt,"deberta"),mHt.forEach(t),$Vr=r(Bze," \u2014 "),Coe=n(Bze,"A",{href:!0});var fHt=s(Coe);kVr=r(fHt,"TFDebertaForTokenClassification"),fHt.forEach(t),SVr=r(Bze," (DeBERTa model)"),Bze.forEach(t),RVr=i(fe),pw=n(fe,"LI",{});var Ize=s(pw);S6e=n(Ize,"STRONG",{});var gHt=s(S6e);PVr=r(gHt,"deberta-v2"),gHt.forEach(t),BVr=r(Ize," \u2014 "),woe=n(Ize,"A",{href:!0});var hHt=s(woe);IVr=r(hHt,"TFDebertaV2ForTokenClassification"),hHt.forEach(t),NVr=r(Ize," (DeBERTa-v2 model)"),Ize.forEach(t),qVr=i(fe),_w=n(fe,"LI",{});var Nze=s(_w);R6e=n(Nze,"STRONG",{});var uHt=s(R6e);jVr=r(uHt,"distilbert"),uHt.forEach(t),DVr=r(Nze," \u2014 "),Aoe=n(Nze,"A",{href:!0});var pHt=s(Aoe);GVr=r(pHt,"TFDistilBertForTokenClassification"),pHt.forEach(t),OVr=r(Nze," (DistilBERT model)"),Nze.forEach(t),VVr=i(fe),bw=n(fe,"LI",{});var qze=s(bw);P6e=n(qze,"STRONG",{});var _Ht=s(P6e);XVr=r(_Ht,"electra"),_Ht.forEach(t),zVr=r(qze," \u2014 "),Loe=n(qze,"A",{href:!0});var bHt=s(Loe);WVr=r(bHt,"TFElectraForTokenClassification"),bHt.forEach(t),QVr=r(qze," (ELECTRA model)"),qze.forEach(t),UVr=i(fe),vw=n(fe,"LI",{});var jze=s(vw);B6e=n(jze,"STRONG",{});var vHt=s(B6e);HVr=r(vHt,"flaubert"),vHt.forEach(t),JVr=r(jze," \u2014 "),yoe=n(jze,"A",{href:!0});var FHt=s(yoe);YVr=r(FHt,"TFFlaubertForTokenClassification"),FHt.forEach(t),KVr=r(jze," (FlauBERT model)"),jze.forEach(t),ZVr=i(fe),Fw=n(fe,"LI",{});var Dze=s(Fw);I6e=n(Dze,"STRONG",{});var THt=s(I6e);eXr=r(THt,"funnel"),THt.forEach(t),oXr=r(Dze," \u2014 "),xoe=n(Dze,"A",{href:!0});var MHt=s(xoe);rXr=r(MHt,"TFFunnelForTokenClassification"),MHt.forEach(t),tXr=r(Dze," (Funnel Transformer model)"),Dze.forEach(t),aXr=i(fe),Tw=n(fe,"LI",{});var Gze=s(Tw);N6e=n(Gze,"STRONG",{});var EHt=s(N6e);nXr=r(EHt,"layoutlm"),EHt.forEach(t),sXr=r(Gze," \u2014 "),$oe=n(Gze,"A",{href:!0});var CHt=s($oe);lXr=r(CHt,"TFLayoutLMForTokenClassification"),CHt.forEach(t),iXr=r(Gze," (LayoutLM model)"),Gze.forEach(t),dXr=i(fe),Mw=n(fe,"LI",{});var Oze=s(Mw);q6e=n(Oze,"STRONG",{});var wHt=s(q6e);cXr=r(wHt,"layoutlmv3"),wHt.forEach(t),mXr=r(Oze," \u2014 "),koe=n(Oze,"A",{href:!0});var AHt=s(koe);fXr=r(AHt,"TFLayoutLMv3ForTokenClassification"),AHt.forEach(t),gXr=r(Oze," (LayoutLMv3 model)"),Oze.forEach(t),hXr=i(fe),Ew=n(fe,"LI",{});var Vze=s(Ew);j6e=n(Vze,"STRONG",{});var LHt=s(j6e);uXr=r(LHt,"longformer"),LHt.forEach(t),pXr=r(Vze," \u2014 "),Soe=n(Vze,"A",{href:!0});var yHt=s(Soe);_Xr=r(yHt,"TFLongformerForTokenClassification"),yHt.forEach(t),bXr=r(Vze," (Longformer model)"),Vze.forEach(t),vXr=i(fe),Cw=n(fe,"LI",{});var Xze=s(Cw);D6e=n(Xze,"STRONG",{});var xHt=s(D6e);FXr=r(xHt,"mobilebert"),xHt.forEach(t),TXr=r(Xze," \u2014 "),Roe=n(Xze,"A",{href:!0});var $Ht=s(Roe);MXr=r($Ht,"TFMobileBertForTokenClassification"),$Ht.forEach(t),EXr=r(Xze," (MobileBERT model)"),Xze.forEach(t),CXr=i(fe),ww=n(fe,"LI",{});var zze=s(ww);G6e=n(zze,"STRONG",{});var kHt=s(G6e);wXr=r(kHt,"mpnet"),kHt.forEach(t),AXr=r(zze," \u2014 "),Poe=n(zze,"A",{href:!0});var SHt=s(Poe);LXr=r(SHt,"TFMPNetForTokenClassification"),SHt.forEach(t),yXr=r(zze," (MPNet model)"),zze.forEach(t),xXr=i(fe),Aw=n(fe,"LI",{});var Wze=s(Aw);O6e=n(Wze,"STRONG",{});var RHt=s(O6e);$Xr=r(RHt,"rembert"),RHt.forEach(t),kXr=r(Wze," \u2014 "),Boe=n(Wze,"A",{href:!0});var PHt=s(Boe);SXr=r(PHt,"TFRemBertForTokenClassification"),PHt.forEach(t),RXr=r(Wze," (RemBERT model)"),Wze.forEach(t),PXr=i(fe),Lw=n(fe,"LI",{});var Qze=s(Lw);V6e=n(Qze,"STRONG",{});var BHt=s(V6e);BXr=r(BHt,"roberta"),BHt.forEach(t),IXr=r(Qze," \u2014 "),Ioe=n(Qze,"A",{href:!0});var IHt=s(Ioe);NXr=r(IHt,"TFRobertaForTokenClassification"),IHt.forEach(t),qXr=r(Qze," (RoBERTa model)"),Qze.forEach(t),jXr=i(fe),yw=n(fe,"LI",{});var Uze=s(yw);X6e=n(Uze,"STRONG",{});var NHt=s(X6e);DXr=r(NHt,"roformer"),NHt.forEach(t),GXr=r(Uze," \u2014 "),Noe=n(Uze,"A",{href:!0});var qHt=s(Noe);OXr=r(qHt,"TFRoFormerForTokenClassification"),qHt.forEach(t),VXr=r(Uze," (RoFormer model)"),Uze.forEach(t),XXr=i(fe),xw=n(fe,"LI",{});var Hze=s(xw);z6e=n(Hze,"STRONG",{});var jHt=s(z6e);zXr=r(jHt,"xlm"),jHt.forEach(t),WXr=r(Hze," \u2014 "),qoe=n(Hze,"A",{href:!0});var DHt=s(qoe);QXr=r(DHt,"TFXLMForTokenClassification"),DHt.forEach(t),UXr=r(Hze," (XLM model)"),Hze.forEach(t),HXr=i(fe),$w=n(fe,"LI",{});var Jze=s($w);W6e=n(Jze,"STRONG",{});var GHt=s(W6e);JXr=r(GHt,"xlm-roberta"),GHt.forEach(t),YXr=r(Jze," \u2014 "),joe=n(Jze,"A",{href:!0});var OHt=s(joe);KXr=r(OHt,"TFXLMRobertaForTokenClassification"),OHt.forEach(t),ZXr=r(Jze," (XLM-RoBERTa model)"),Jze.forEach(t),ezr=i(fe),kw=n(fe,"LI",{});var Yze=s(kw);Q6e=n(Yze,"STRONG",{});var VHt=s(Q6e);ozr=r(VHt,"xlnet"),VHt.forEach(t),rzr=r(Yze," \u2014 "),Doe=n(Yze,"A",{href:!0});var XHt=s(Doe);tzr=r(XHt,"TFXLNetForTokenClassification"),XHt.forEach(t),azr=r(Yze," (XLNet model)"),Yze.forEach(t),fe.forEach(t),nzr=i(mi),T(Sw.$$.fragment,mi),mi.forEach(t),ci.forEach(t),rJe=i(m),sm=n(m,"H2",{class:!0});var uKe=s(sm);Rw=n(uKe,"A",{id:!0,class:!0,href:!0});var zHt=s(Rw);U6e=n(zHt,"SPAN",{});var WHt=s(U6e);T(Tk.$$.fragment,WHt),WHt.forEach(t),zHt.forEach(t),szr=i(uKe),H6e=n(uKe,"SPAN",{});var QHt=s(H6e);lzr=r(QHt,"TFAutoModelForQuestionAnswering"),QHt.forEach(t),uKe.forEach(t),tJe=i(m),pr=n(m,"DIV",{class:!0});var fi=s(pr);T(Mk.$$.fragment,fi),izr=i(fi),lm=n(fi,"P",{});var wse=s(lm);dzr=r(wse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Goe=n(wse,"A",{href:!0});var UHt=s(Goe);czr=r(UHt,"from_pretrained()"),UHt.forEach(t),mzr=r(wse," class method or the "),Ooe=n(wse,"A",{href:!0});var HHt=s(Ooe);fzr=r(HHt,"from_config()"),HHt.forEach(t),gzr=r(wse,` class
method.`),wse.forEach(t),hzr=i(fi),Ek=n(fi,"P",{});var pKe=s(Ek);uzr=r(pKe,"This class cannot be instantiated directly using "),J6e=n(pKe,"CODE",{});var JHt=s(J6e);pzr=r(JHt,"__init__()"),JHt.forEach(t),_zr=r(pKe," (throws an error)."),pKe.forEach(t),bzr=i(fi),Jt=n(fi,"DIV",{class:!0});var Vy=s(Jt);T(Ck.$$.fragment,Vy),vzr=i(Vy),Y6e=n(Vy,"P",{});var YHt=s(Y6e);Fzr=r(YHt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),YHt.forEach(t),Tzr=i(Vy),im=n(Vy,"P",{});var Ase=s(im);Mzr=r(Ase,`Note:
Loading a model from its configuration file does `),K6e=n(Ase,"STRONG",{});var KHt=s(K6e);Ezr=r(KHt,"not"),KHt.forEach(t),Czr=r(Ase,` load the model weights. It only affects the
model\u2019s configuration. Use `),Voe=n(Ase,"A",{href:!0});var ZHt=s(Voe);wzr=r(ZHt,"from_pretrained()"),ZHt.forEach(t),Azr=r(Ase," to load the model weights."),Ase.forEach(t),Lzr=i(Vy),T(Pw.$$.fragment,Vy),Vy.forEach(t),yzr=i(fi),zr=n(fi,"DIV",{class:!0});var gi=s(zr);T(wk.$$.fragment,gi),xzr=i(gi),Z6e=n(gi,"P",{});var eJt=s(Z6e);$zr=r(eJt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),eJt.forEach(t),kzr=i(gi),yn=n(gi,"P",{});var Xy=s(yn);Szr=r(Xy,"The model class to instantiate is selected based on the "),eAe=n(Xy,"CODE",{});var oJt=s(eAe);Rzr=r(oJt,"model_type"),oJt.forEach(t),Pzr=r(Xy,` property of the config object (either
passed as an argument or loaded from `),oAe=n(Xy,"CODE",{});var rJt=s(oAe);Bzr=r(rJt,"pretrained_model_name_or_path"),rJt.forEach(t),Izr=r(Xy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rAe=n(Xy,"CODE",{});var tJt=s(rAe);Nzr=r(tJt,"pretrained_model_name_or_path"),tJt.forEach(t),qzr=r(Xy,":"),Xy.forEach(t),jzr=i(gi),de=n(gi,"UL",{});var ge=s(de);Bw=n(ge,"LI",{});var Kze=s(Bw);tAe=n(Kze,"STRONG",{});var aJt=s(tAe);Dzr=r(aJt,"albert"),aJt.forEach(t),Gzr=r(Kze," \u2014 "),Xoe=n(Kze,"A",{href:!0});var nJt=s(Xoe);Ozr=r(nJt,"TFAlbertForQuestionAnswering"),nJt.forEach(t),Vzr=r(Kze," (ALBERT model)"),Kze.forEach(t),Xzr=i(ge),Iw=n(ge,"LI",{});var Zze=s(Iw);aAe=n(Zze,"STRONG",{});var sJt=s(aAe);zzr=r(sJt,"bert"),sJt.forEach(t),Wzr=r(Zze," \u2014 "),zoe=n(Zze,"A",{href:!0});var lJt=s(zoe);Qzr=r(lJt,"TFBertForQuestionAnswering"),lJt.forEach(t),Uzr=r(Zze," (BERT model)"),Zze.forEach(t),Hzr=i(ge),Nw=n(ge,"LI",{});var eWe=s(Nw);nAe=n(eWe,"STRONG",{});var iJt=s(nAe);Jzr=r(iJt,"camembert"),iJt.forEach(t),Yzr=r(eWe," \u2014 "),Woe=n(eWe,"A",{href:!0});var dJt=s(Woe);Kzr=r(dJt,"TFCamembertForQuestionAnswering"),dJt.forEach(t),Zzr=r(eWe," (CamemBERT model)"),eWe.forEach(t),eWr=i(ge),qw=n(ge,"LI",{});var oWe=s(qw);sAe=n(oWe,"STRONG",{});var cJt=s(sAe);oWr=r(cJt,"convbert"),cJt.forEach(t),rWr=r(oWe," \u2014 "),Qoe=n(oWe,"A",{href:!0});var mJt=s(Qoe);tWr=r(mJt,"TFConvBertForQuestionAnswering"),mJt.forEach(t),aWr=r(oWe," (ConvBERT model)"),oWe.forEach(t),nWr=i(ge),jw=n(ge,"LI",{});var rWe=s(jw);lAe=n(rWe,"STRONG",{});var fJt=s(lAe);sWr=r(fJt,"deberta"),fJt.forEach(t),lWr=r(rWe," \u2014 "),Uoe=n(rWe,"A",{href:!0});var gJt=s(Uoe);iWr=r(gJt,"TFDebertaForQuestionAnswering"),gJt.forEach(t),dWr=r(rWe," (DeBERTa model)"),rWe.forEach(t),cWr=i(ge),Dw=n(ge,"LI",{});var tWe=s(Dw);iAe=n(tWe,"STRONG",{});var hJt=s(iAe);mWr=r(hJt,"deberta-v2"),hJt.forEach(t),fWr=r(tWe," \u2014 "),Hoe=n(tWe,"A",{href:!0});var uJt=s(Hoe);gWr=r(uJt,"TFDebertaV2ForQuestionAnswering"),uJt.forEach(t),hWr=r(tWe," (DeBERTa-v2 model)"),tWe.forEach(t),uWr=i(ge),Gw=n(ge,"LI",{});var aWe=s(Gw);dAe=n(aWe,"STRONG",{});var pJt=s(dAe);pWr=r(pJt,"distilbert"),pJt.forEach(t),_Wr=r(aWe," \u2014 "),Joe=n(aWe,"A",{href:!0});var _Jt=s(Joe);bWr=r(_Jt,"TFDistilBertForQuestionAnswering"),_Jt.forEach(t),vWr=r(aWe," (DistilBERT model)"),aWe.forEach(t),FWr=i(ge),Ow=n(ge,"LI",{});var nWe=s(Ow);cAe=n(nWe,"STRONG",{});var bJt=s(cAe);TWr=r(bJt,"electra"),bJt.forEach(t),MWr=r(nWe," \u2014 "),Yoe=n(nWe,"A",{href:!0});var vJt=s(Yoe);EWr=r(vJt,"TFElectraForQuestionAnswering"),vJt.forEach(t),CWr=r(nWe," (ELECTRA model)"),nWe.forEach(t),wWr=i(ge),Vw=n(ge,"LI",{});var sWe=s(Vw);mAe=n(sWe,"STRONG",{});var FJt=s(mAe);AWr=r(FJt,"flaubert"),FJt.forEach(t),LWr=r(sWe," \u2014 "),Koe=n(sWe,"A",{href:!0});var TJt=s(Koe);yWr=r(TJt,"TFFlaubertForQuestionAnsweringSimple"),TJt.forEach(t),xWr=r(sWe," (FlauBERT model)"),sWe.forEach(t),$Wr=i(ge),Xw=n(ge,"LI",{});var lWe=s(Xw);fAe=n(lWe,"STRONG",{});var MJt=s(fAe);kWr=r(MJt,"funnel"),MJt.forEach(t),SWr=r(lWe," \u2014 "),Zoe=n(lWe,"A",{href:!0});var EJt=s(Zoe);RWr=r(EJt,"TFFunnelForQuestionAnswering"),EJt.forEach(t),PWr=r(lWe," (Funnel Transformer model)"),lWe.forEach(t),BWr=i(ge),zw=n(ge,"LI",{});var iWe=s(zw);gAe=n(iWe,"STRONG",{});var CJt=s(gAe);IWr=r(CJt,"gptj"),CJt.forEach(t),NWr=r(iWe," \u2014 "),ere=n(iWe,"A",{href:!0});var wJt=s(ere);qWr=r(wJt,"TFGPTJForQuestionAnswering"),wJt.forEach(t),jWr=r(iWe," (GPT-J model)"),iWe.forEach(t),DWr=i(ge),Ww=n(ge,"LI",{});var dWe=s(Ww);hAe=n(dWe,"STRONG",{});var AJt=s(hAe);GWr=r(AJt,"layoutlmv3"),AJt.forEach(t),OWr=r(dWe," \u2014 "),ore=n(dWe,"A",{href:!0});var LJt=s(ore);VWr=r(LJt,"TFLayoutLMv3ForQuestionAnswering"),LJt.forEach(t),XWr=r(dWe," (LayoutLMv3 model)"),dWe.forEach(t),zWr=i(ge),Qw=n(ge,"LI",{});var cWe=s(Qw);uAe=n(cWe,"STRONG",{});var yJt=s(uAe);WWr=r(yJt,"longformer"),yJt.forEach(t),QWr=r(cWe," \u2014 "),rre=n(cWe,"A",{href:!0});var xJt=s(rre);UWr=r(xJt,"TFLongformerForQuestionAnswering"),xJt.forEach(t),HWr=r(cWe," (Longformer model)"),cWe.forEach(t),JWr=i(ge),Uw=n(ge,"LI",{});var mWe=s(Uw);pAe=n(mWe,"STRONG",{});var $Jt=s(pAe);YWr=r($Jt,"mobilebert"),$Jt.forEach(t),KWr=r(mWe," \u2014 "),tre=n(mWe,"A",{href:!0});var kJt=s(tre);ZWr=r(kJt,"TFMobileBertForQuestionAnswering"),kJt.forEach(t),eQr=r(mWe," (MobileBERT model)"),mWe.forEach(t),oQr=i(ge),Hw=n(ge,"LI",{});var fWe=s(Hw);_Ae=n(fWe,"STRONG",{});var SJt=s(_Ae);rQr=r(SJt,"mpnet"),SJt.forEach(t),tQr=r(fWe," \u2014 "),are=n(fWe,"A",{href:!0});var RJt=s(are);aQr=r(RJt,"TFMPNetForQuestionAnswering"),RJt.forEach(t),nQr=r(fWe," (MPNet model)"),fWe.forEach(t),sQr=i(ge),Jw=n(ge,"LI",{});var gWe=s(Jw);bAe=n(gWe,"STRONG",{});var PJt=s(bAe);lQr=r(PJt,"rembert"),PJt.forEach(t),iQr=r(gWe," \u2014 "),nre=n(gWe,"A",{href:!0});var BJt=s(nre);dQr=r(BJt,"TFRemBertForQuestionAnswering"),BJt.forEach(t),cQr=r(gWe," (RemBERT model)"),gWe.forEach(t),mQr=i(ge),Yw=n(ge,"LI",{});var hWe=s(Yw);vAe=n(hWe,"STRONG",{});var IJt=s(vAe);fQr=r(IJt,"roberta"),IJt.forEach(t),gQr=r(hWe," \u2014 "),sre=n(hWe,"A",{href:!0});var NJt=s(sre);hQr=r(NJt,"TFRobertaForQuestionAnswering"),NJt.forEach(t),uQr=r(hWe," (RoBERTa model)"),hWe.forEach(t),pQr=i(ge),Kw=n(ge,"LI",{});var uWe=s(Kw);FAe=n(uWe,"STRONG",{});var qJt=s(FAe);_Qr=r(qJt,"roformer"),qJt.forEach(t),bQr=r(uWe," \u2014 "),lre=n(uWe,"A",{href:!0});var jJt=s(lre);vQr=r(jJt,"TFRoFormerForQuestionAnswering"),jJt.forEach(t),FQr=r(uWe," (RoFormer model)"),uWe.forEach(t),TQr=i(ge),Zw=n(ge,"LI",{});var pWe=s(Zw);TAe=n(pWe,"STRONG",{});var DJt=s(TAe);MQr=r(DJt,"xlm"),DJt.forEach(t),EQr=r(pWe," \u2014 "),ire=n(pWe,"A",{href:!0});var GJt=s(ire);CQr=r(GJt,"TFXLMForQuestionAnsweringSimple"),GJt.forEach(t),wQr=r(pWe," (XLM model)"),pWe.forEach(t),AQr=i(ge),e6=n(ge,"LI",{});var _We=s(e6);MAe=n(_We,"STRONG",{});var OJt=s(MAe);LQr=r(OJt,"xlm-roberta"),OJt.forEach(t),yQr=r(_We," \u2014 "),dre=n(_We,"A",{href:!0});var VJt=s(dre);xQr=r(VJt,"TFXLMRobertaForQuestionAnswering"),VJt.forEach(t),$Qr=r(_We," (XLM-RoBERTa model)"),_We.forEach(t),kQr=i(ge),o6=n(ge,"LI",{});var bWe=s(o6);EAe=n(bWe,"STRONG",{});var XJt=s(EAe);SQr=r(XJt,"xlnet"),XJt.forEach(t),RQr=r(bWe," \u2014 "),cre=n(bWe,"A",{href:!0});var zJt=s(cre);PQr=r(zJt,"TFXLNetForQuestionAnsweringSimple"),zJt.forEach(t),BQr=r(bWe," (XLNet model)"),bWe.forEach(t),ge.forEach(t),IQr=i(gi),T(r6.$$.fragment,gi),gi.forEach(t),fi.forEach(t),aJe=i(m),dm=n(m,"H2",{class:!0});var _Ke=s(dm);t6=n(_Ke,"A",{id:!0,class:!0,href:!0});var WJt=s(t6);CAe=n(WJt,"SPAN",{});var QJt=s(CAe);T(Ak.$$.fragment,QJt),QJt.forEach(t),WJt.forEach(t),NQr=i(_Ke),wAe=n(_Ke,"SPAN",{});var UJt=s(wAe);qQr=r(UJt,"TFAutoModelForVision2Seq"),UJt.forEach(t),_Ke.forEach(t),nJe=i(m),_r=n(m,"DIV",{class:!0});var hi=s(_r);T(Lk.$$.fragment,hi),jQr=i(hi),cm=n(hi,"P",{});var Lse=s(cm);DQr=r(Lse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mre=n(Lse,"A",{href:!0});var HJt=s(mre);GQr=r(HJt,"from_pretrained()"),HJt.forEach(t),OQr=r(Lse," class method or the "),fre=n(Lse,"A",{href:!0});var JJt=s(fre);VQr=r(JJt,"from_config()"),JJt.forEach(t),XQr=r(Lse,` class
method.`),Lse.forEach(t),zQr=i(hi),yk=n(hi,"P",{});var bKe=s(yk);WQr=r(bKe,"This class cannot be instantiated directly using "),AAe=n(bKe,"CODE",{});var YJt=s(AAe);QQr=r(YJt,"__init__()"),YJt.forEach(t),UQr=r(bKe," (throws an error)."),bKe.forEach(t),HQr=i(hi),Yt=n(hi,"DIV",{class:!0});var zy=s(Yt);T(xk.$$.fragment,zy),JQr=i(zy),LAe=n(zy,"P",{});var KJt=s(LAe);YQr=r(KJt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),KJt.forEach(t),KQr=i(zy),mm=n(zy,"P",{});var yse=s(mm);ZQr=r(yse,`Note:
Loading a model from its configuration file does `),yAe=n(yse,"STRONG",{});var ZJt=s(yAe);eUr=r(ZJt,"not"),ZJt.forEach(t),oUr=r(yse,` load the model weights. It only affects the
model\u2019s configuration. Use `),gre=n(yse,"A",{href:!0});var eYt=s(gre);rUr=r(eYt,"from_pretrained()"),eYt.forEach(t),tUr=r(yse," to load the model weights."),yse.forEach(t),aUr=i(zy),T(a6.$$.fragment,zy),zy.forEach(t),nUr=i(hi),Wr=n(hi,"DIV",{class:!0});var ui=s(Wr);T($k.$$.fragment,ui),sUr=i(ui),xAe=n(ui,"P",{});var oYt=s(xAe);lUr=r(oYt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),oYt.forEach(t),iUr=i(ui),xn=n(ui,"P",{});var Wy=s(xn);dUr=r(Wy,"The model class to instantiate is selected based on the "),$Ae=n(Wy,"CODE",{});var rYt=s($Ae);cUr=r(rYt,"model_type"),rYt.forEach(t),mUr=r(Wy,` property of the config object (either
passed as an argument or loaded from `),kAe=n(Wy,"CODE",{});var tYt=s(kAe);fUr=r(tYt,"pretrained_model_name_or_path"),tYt.forEach(t),gUr=r(Wy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SAe=n(Wy,"CODE",{});var aYt=s(SAe);hUr=r(aYt,"pretrained_model_name_or_path"),aYt.forEach(t),uUr=r(Wy,":"),Wy.forEach(t),pUr=i(ui),RAe=n(ui,"UL",{});var nYt=s(RAe);n6=n(nYt,"LI",{});var vWe=s(n6);PAe=n(vWe,"STRONG",{});var sYt=s(PAe);_Ur=r(sYt,"vision-encoder-decoder"),sYt.forEach(t),bUr=r(vWe," \u2014 "),hre=n(vWe,"A",{href:!0});var lYt=s(hre);vUr=r(lYt,"TFVisionEncoderDecoderModel"),lYt.forEach(t),FUr=r(vWe," (Vision Encoder decoder model)"),vWe.forEach(t),nYt.forEach(t),TUr=i(ui),T(s6.$$.fragment,ui),ui.forEach(t),hi.forEach(t),sJe=i(m),fm=n(m,"H2",{class:!0});var vKe=s(fm);l6=n(vKe,"A",{id:!0,class:!0,href:!0});var iYt=s(l6);BAe=n(iYt,"SPAN",{});var dYt=s(BAe);T(kk.$$.fragment,dYt),dYt.forEach(t),iYt.forEach(t),MUr=i(vKe),IAe=n(vKe,"SPAN",{});var cYt=s(IAe);EUr=r(cYt,"TFAutoModelForSpeechSeq2Seq"),cYt.forEach(t),vKe.forEach(t),lJe=i(m),br=n(m,"DIV",{class:!0});var pi=s(br);T(Sk.$$.fragment,pi),CUr=i(pi),gm=n(pi,"P",{});var xse=s(gm);wUr=r(xse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ure=n(xse,"A",{href:!0});var mYt=s(ure);AUr=r(mYt,"from_pretrained()"),mYt.forEach(t),LUr=r(xse," class method or the "),pre=n(xse,"A",{href:!0});var fYt=s(pre);yUr=r(fYt,"from_config()"),fYt.forEach(t),xUr=r(xse,` class
method.`),xse.forEach(t),$Ur=i(pi),Rk=n(pi,"P",{});var FKe=s(Rk);kUr=r(FKe,"This class cannot be instantiated directly using "),NAe=n(FKe,"CODE",{});var gYt=s(NAe);SUr=r(gYt,"__init__()"),gYt.forEach(t),RUr=r(FKe," (throws an error)."),FKe.forEach(t),PUr=i(pi),Kt=n(pi,"DIV",{class:!0});var Qy=s(Kt);T(Pk.$$.fragment,Qy),BUr=i(Qy),qAe=n(Qy,"P",{});var hYt=s(qAe);IUr=r(hYt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),hYt.forEach(t),NUr=i(Qy),hm=n(Qy,"P",{});var $se=s(hm);qUr=r($se,`Note:
Loading a model from its configuration file does `),jAe=n($se,"STRONG",{});var uYt=s(jAe);jUr=r(uYt,"not"),uYt.forEach(t),DUr=r($se,` load the model weights. It only affects the
model\u2019s configuration. Use `),_re=n($se,"A",{href:!0});var pYt=s(_re);GUr=r(pYt,"from_pretrained()"),pYt.forEach(t),OUr=r($se," to load the model weights."),$se.forEach(t),VUr=i(Qy),T(i6.$$.fragment,Qy),Qy.forEach(t),XUr=i(pi),Qr=n(pi,"DIV",{class:!0});var _i=s(Qr);T(Bk.$$.fragment,_i),zUr=i(_i),DAe=n(_i,"P",{});var _Yt=s(DAe);WUr=r(_Yt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),_Yt.forEach(t),QUr=i(_i),$n=n(_i,"P",{});var Uy=s($n);UUr=r(Uy,"The model class to instantiate is selected based on the "),GAe=n(Uy,"CODE",{});var bYt=s(GAe);HUr=r(bYt,"model_type"),bYt.forEach(t),JUr=r(Uy,` property of the config object (either
passed as an argument or loaded from `),OAe=n(Uy,"CODE",{});var vYt=s(OAe);YUr=r(vYt,"pretrained_model_name_or_path"),vYt.forEach(t),KUr=r(Uy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VAe=n(Uy,"CODE",{});var FYt=s(VAe);ZUr=r(FYt,"pretrained_model_name_or_path"),FYt.forEach(t),eHr=r(Uy,":"),Uy.forEach(t),oHr=i(_i),XAe=n(_i,"UL",{});var TYt=s(XAe);d6=n(TYt,"LI",{});var FWe=s(d6);zAe=n(FWe,"STRONG",{});var MYt=s(zAe);rHr=r(MYt,"speech_to_text"),MYt.forEach(t),tHr=r(FWe," \u2014 "),bre=n(FWe,"A",{href:!0});var EYt=s(bre);aHr=r(EYt,"TFSpeech2TextForConditionalGeneration"),EYt.forEach(t),nHr=r(FWe," (Speech2Text model)"),FWe.forEach(t),TYt.forEach(t),sHr=i(_i),T(c6.$$.fragment,_i),_i.forEach(t),pi.forEach(t),iJe=i(m),um=n(m,"H2",{class:!0});var TKe=s(um);m6=n(TKe,"A",{id:!0,class:!0,href:!0});var CYt=s(m6);WAe=n(CYt,"SPAN",{});var wYt=s(WAe);T(Ik.$$.fragment,wYt),wYt.forEach(t),CYt.forEach(t),lHr=i(TKe),QAe=n(TKe,"SPAN",{});var AYt=s(QAe);iHr=r(AYt,"FlaxAutoModel"),AYt.forEach(t),TKe.forEach(t),dJe=i(m),vr=n(m,"DIV",{class:!0});var bi=s(vr);T(Nk.$$.fragment,bi),dHr=i(bi),pm=n(bi,"P",{});var kse=s(pm);cHr=r(kse,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vre=n(kse,"A",{href:!0});var LYt=s(vre);mHr=r(LYt,"from_pretrained()"),LYt.forEach(t),fHr=r(kse," class method or the "),Fre=n(kse,"A",{href:!0});var yYt=s(Fre);gHr=r(yYt,"from_config()"),yYt.forEach(t),hHr=r(kse,` class
method.`),kse.forEach(t),uHr=i(bi),qk=n(bi,"P",{});var MKe=s(qk);pHr=r(MKe,"This class cannot be instantiated directly using "),UAe=n(MKe,"CODE",{});var xYt=s(UAe);_Hr=r(xYt,"__init__()"),xYt.forEach(t),bHr=r(MKe," (throws an error)."),MKe.forEach(t),vHr=i(bi),Zt=n(bi,"DIV",{class:!0});var Hy=s(Zt);T(jk.$$.fragment,Hy),FHr=i(Hy),HAe=n(Hy,"P",{});var $Yt=s(HAe);THr=r($Yt,"Instantiates one of the base model classes of the library from a configuration."),$Yt.forEach(t),MHr=i(Hy),_m=n(Hy,"P",{});var Sse=s(_m);EHr=r(Sse,`Note:
Loading a model from its configuration file does `),JAe=n(Sse,"STRONG",{});var kYt=s(JAe);CHr=r(kYt,"not"),kYt.forEach(t),wHr=r(Sse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tre=n(Sse,"A",{href:!0});var SYt=s(Tre);AHr=r(SYt,"from_pretrained()"),SYt.forEach(t),LHr=r(Sse," to load the model weights."),Sse.forEach(t),yHr=i(Hy),T(f6.$$.fragment,Hy),Hy.forEach(t),xHr=i(bi),Ur=n(bi,"DIV",{class:!0});var vi=s(Ur);T(Dk.$$.fragment,vi),$Hr=i(vi),YAe=n(vi,"P",{});var RYt=s(YAe);kHr=r(RYt,"Instantiate one of the base model classes of the library from a pretrained model."),RYt.forEach(t),SHr=i(vi),kn=n(vi,"P",{});var Jy=s(kn);RHr=r(Jy,"The model class to instantiate is selected based on the "),KAe=n(Jy,"CODE",{});var PYt=s(KAe);PHr=r(PYt,"model_type"),PYt.forEach(t),BHr=r(Jy,` property of the config object (either
passed as an argument or loaded from `),ZAe=n(Jy,"CODE",{});var BYt=s(ZAe);IHr=r(BYt,"pretrained_model_name_or_path"),BYt.forEach(t),NHr=r(Jy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e7e=n(Jy,"CODE",{});var IYt=s(e7e);qHr=r(IYt,"pretrained_model_name_or_path"),IYt.forEach(t),jHr=r(Jy,":"),Jy.forEach(t),DHr=i(vi),te=n(vi,"UL",{});var ne=s(te);g6=n(ne,"LI",{});var TWe=s(g6);o7e=n(TWe,"STRONG",{});var NYt=s(o7e);GHr=r(NYt,"albert"),NYt.forEach(t),OHr=r(TWe," \u2014 "),Mre=n(TWe,"A",{href:!0});var qYt=s(Mre);VHr=r(qYt,"FlaxAlbertModel"),qYt.forEach(t),XHr=r(TWe," (ALBERT model)"),TWe.forEach(t),zHr=i(ne),h6=n(ne,"LI",{});var MWe=s(h6);r7e=n(MWe,"STRONG",{});var jYt=s(r7e);WHr=r(jYt,"bart"),jYt.forEach(t),QHr=r(MWe," \u2014 "),Ere=n(MWe,"A",{href:!0});var DYt=s(Ere);UHr=r(DYt,"FlaxBartModel"),DYt.forEach(t),HHr=r(MWe," (BART model)"),MWe.forEach(t),JHr=i(ne),u6=n(ne,"LI",{});var EWe=s(u6);t7e=n(EWe,"STRONG",{});var GYt=s(t7e);YHr=r(GYt,"beit"),GYt.forEach(t),KHr=r(EWe," \u2014 "),Cre=n(EWe,"A",{href:!0});var OYt=s(Cre);ZHr=r(OYt,"FlaxBeitModel"),OYt.forEach(t),eJr=r(EWe," (BEiT model)"),EWe.forEach(t),oJr=i(ne),p6=n(ne,"LI",{});var CWe=s(p6);a7e=n(CWe,"STRONG",{});var VYt=s(a7e);rJr=r(VYt,"bert"),VYt.forEach(t),tJr=r(CWe," \u2014 "),wre=n(CWe,"A",{href:!0});var XYt=s(wre);aJr=r(XYt,"FlaxBertModel"),XYt.forEach(t),nJr=r(CWe," (BERT model)"),CWe.forEach(t),sJr=i(ne),_6=n(ne,"LI",{});var wWe=s(_6);n7e=n(wWe,"STRONG",{});var zYt=s(n7e);lJr=r(zYt,"big_bird"),zYt.forEach(t),iJr=r(wWe," \u2014 "),Are=n(wWe,"A",{href:!0});var WYt=s(Are);dJr=r(WYt,"FlaxBigBirdModel"),WYt.forEach(t),cJr=r(wWe," (BigBird model)"),wWe.forEach(t),mJr=i(ne),b6=n(ne,"LI",{});var AWe=s(b6);s7e=n(AWe,"STRONG",{});var QYt=s(s7e);fJr=r(QYt,"blenderbot"),QYt.forEach(t),gJr=r(AWe," \u2014 "),Lre=n(AWe,"A",{href:!0});var UYt=s(Lre);hJr=r(UYt,"FlaxBlenderbotModel"),UYt.forEach(t),uJr=r(AWe," (Blenderbot model)"),AWe.forEach(t),pJr=i(ne),v6=n(ne,"LI",{});var LWe=s(v6);l7e=n(LWe,"STRONG",{});var HYt=s(l7e);_Jr=r(HYt,"blenderbot-small"),HYt.forEach(t),bJr=r(LWe," \u2014 "),yre=n(LWe,"A",{href:!0});var JYt=s(yre);vJr=r(JYt,"FlaxBlenderbotSmallModel"),JYt.forEach(t),FJr=r(LWe," (BlenderbotSmall model)"),LWe.forEach(t),TJr=i(ne),F6=n(ne,"LI",{});var yWe=s(F6);i7e=n(yWe,"STRONG",{});var YYt=s(i7e);MJr=r(YYt,"clip"),YYt.forEach(t),EJr=r(yWe," \u2014 "),xre=n(yWe,"A",{href:!0});var KYt=s(xre);CJr=r(KYt,"FlaxCLIPModel"),KYt.forEach(t),wJr=r(yWe," (CLIP model)"),yWe.forEach(t),AJr=i(ne),T6=n(ne,"LI",{});var xWe=s(T6);d7e=n(xWe,"STRONG",{});var ZYt=s(d7e);LJr=r(ZYt,"distilbert"),ZYt.forEach(t),yJr=r(xWe," \u2014 "),$re=n(xWe,"A",{href:!0});var eKt=s($re);xJr=r(eKt,"FlaxDistilBertModel"),eKt.forEach(t),$Jr=r(xWe," (DistilBERT model)"),xWe.forEach(t),kJr=i(ne),M6=n(ne,"LI",{});var $We=s(M6);c7e=n($We,"STRONG",{});var oKt=s(c7e);SJr=r(oKt,"electra"),oKt.forEach(t),RJr=r($We," \u2014 "),kre=n($We,"A",{href:!0});var rKt=s(kre);PJr=r(rKt,"FlaxElectraModel"),rKt.forEach(t),BJr=r($We," (ELECTRA model)"),$We.forEach(t),IJr=i(ne),E6=n(ne,"LI",{});var kWe=s(E6);m7e=n(kWe,"STRONG",{});var tKt=s(m7e);NJr=r(tKt,"gpt2"),tKt.forEach(t),qJr=r(kWe," \u2014 "),Sre=n(kWe,"A",{href:!0});var aKt=s(Sre);jJr=r(aKt,"FlaxGPT2Model"),aKt.forEach(t),DJr=r(kWe," (OpenAI GPT-2 model)"),kWe.forEach(t),GJr=i(ne),C6=n(ne,"LI",{});var SWe=s(C6);f7e=n(SWe,"STRONG",{});var nKt=s(f7e);OJr=r(nKt,"gpt_neo"),nKt.forEach(t),VJr=r(SWe," \u2014 "),Rre=n(SWe,"A",{href:!0});var sKt=s(Rre);XJr=r(sKt,"FlaxGPTNeoModel"),sKt.forEach(t),zJr=r(SWe," (GPT Neo model)"),SWe.forEach(t),WJr=i(ne),w6=n(ne,"LI",{});var RWe=s(w6);g7e=n(RWe,"STRONG",{});var lKt=s(g7e);QJr=r(lKt,"gptj"),lKt.forEach(t),UJr=r(RWe," \u2014 "),Pre=n(RWe,"A",{href:!0});var iKt=s(Pre);HJr=r(iKt,"FlaxGPTJModel"),iKt.forEach(t),JJr=r(RWe," (GPT-J model)"),RWe.forEach(t),YJr=i(ne),A6=n(ne,"LI",{});var PWe=s(A6);h7e=n(PWe,"STRONG",{});var dKt=s(h7e);KJr=r(dKt,"longt5"),dKt.forEach(t),ZJr=r(PWe," \u2014 "),Bre=n(PWe,"A",{href:!0});var cKt=s(Bre);eYr=r(cKt,"FlaxLongT5Model"),cKt.forEach(t),oYr=r(PWe," (LongT5 model)"),PWe.forEach(t),rYr=i(ne),L6=n(ne,"LI",{});var BWe=s(L6);u7e=n(BWe,"STRONG",{});var mKt=s(u7e);tYr=r(mKt,"marian"),mKt.forEach(t),aYr=r(BWe," \u2014 "),Ire=n(BWe,"A",{href:!0});var fKt=s(Ire);nYr=r(fKt,"FlaxMarianModel"),fKt.forEach(t),sYr=r(BWe," (Marian model)"),BWe.forEach(t),lYr=i(ne),y6=n(ne,"LI",{});var IWe=s(y6);p7e=n(IWe,"STRONG",{});var gKt=s(p7e);iYr=r(gKt,"mbart"),gKt.forEach(t),dYr=r(IWe," \u2014 "),Nre=n(IWe,"A",{href:!0});var hKt=s(Nre);cYr=r(hKt,"FlaxMBartModel"),hKt.forEach(t),mYr=r(IWe," (mBART model)"),IWe.forEach(t),fYr=i(ne),x6=n(ne,"LI",{});var NWe=s(x6);_7e=n(NWe,"STRONG",{});var uKt=s(_7e);gYr=r(uKt,"mt5"),uKt.forEach(t),hYr=r(NWe," \u2014 "),qre=n(NWe,"A",{href:!0});var pKt=s(qre);uYr=r(pKt,"FlaxMT5Model"),pKt.forEach(t),pYr=r(NWe," (MT5 model)"),NWe.forEach(t),_Yr=i(ne),$6=n(ne,"LI",{});var qWe=s($6);b7e=n(qWe,"STRONG",{});var _Kt=s(b7e);bYr=r(_Kt,"opt"),_Kt.forEach(t),vYr=r(qWe," \u2014 "),jre=n(qWe,"A",{href:!0});var bKt=s(jre);FYr=r(bKt,"FlaxOPTModel"),bKt.forEach(t),TYr=r(qWe," (OPT model)"),qWe.forEach(t),MYr=i(ne),k6=n(ne,"LI",{});var jWe=s(k6);v7e=n(jWe,"STRONG",{});var vKt=s(v7e);EYr=r(vKt,"pegasus"),vKt.forEach(t),CYr=r(jWe," \u2014 "),Dre=n(jWe,"A",{href:!0});var FKt=s(Dre);wYr=r(FKt,"FlaxPegasusModel"),FKt.forEach(t),AYr=r(jWe," (Pegasus model)"),jWe.forEach(t),LYr=i(ne),S6=n(ne,"LI",{});var DWe=s(S6);F7e=n(DWe,"STRONG",{});var TKt=s(F7e);yYr=r(TKt,"roberta"),TKt.forEach(t),xYr=r(DWe," \u2014 "),Gre=n(DWe,"A",{href:!0});var MKt=s(Gre);$Yr=r(MKt,"FlaxRobertaModel"),MKt.forEach(t),kYr=r(DWe," (RoBERTa model)"),DWe.forEach(t),SYr=i(ne),R6=n(ne,"LI",{});var GWe=s(R6);T7e=n(GWe,"STRONG",{});var EKt=s(T7e);RYr=r(EKt,"roformer"),EKt.forEach(t),PYr=r(GWe," \u2014 "),Ore=n(GWe,"A",{href:!0});var CKt=s(Ore);BYr=r(CKt,"FlaxRoFormerModel"),CKt.forEach(t),IYr=r(GWe," (RoFormer model)"),GWe.forEach(t),NYr=i(ne),P6=n(ne,"LI",{});var OWe=s(P6);M7e=n(OWe,"STRONG",{});var wKt=s(M7e);qYr=r(wKt,"t5"),wKt.forEach(t),jYr=r(OWe," \u2014 "),Vre=n(OWe,"A",{href:!0});var AKt=s(Vre);DYr=r(AKt,"FlaxT5Model"),AKt.forEach(t),GYr=r(OWe," (T5 model)"),OWe.forEach(t),OYr=i(ne),B6=n(ne,"LI",{});var VWe=s(B6);E7e=n(VWe,"STRONG",{});var LKt=s(E7e);VYr=r(LKt,"vision-text-dual-encoder"),LKt.forEach(t),XYr=r(VWe," \u2014 "),Xre=n(VWe,"A",{href:!0});var yKt=s(Xre);zYr=r(yKt,"FlaxVisionTextDualEncoderModel"),yKt.forEach(t),WYr=r(VWe," (VisionTextDualEncoder model)"),VWe.forEach(t),QYr=i(ne),I6=n(ne,"LI",{});var XWe=s(I6);C7e=n(XWe,"STRONG",{});var xKt=s(C7e);UYr=r(xKt,"vit"),xKt.forEach(t),HYr=r(XWe," \u2014 "),zre=n(XWe,"A",{href:!0});var $Kt=s(zre);JYr=r($Kt,"FlaxViTModel"),$Kt.forEach(t),YYr=r(XWe," (ViT model)"),XWe.forEach(t),KYr=i(ne),N6=n(ne,"LI",{});var zWe=s(N6);w7e=n(zWe,"STRONG",{});var kKt=s(w7e);ZYr=r(kKt,"wav2vec2"),kKt.forEach(t),eKr=r(zWe," \u2014 "),Wre=n(zWe,"A",{href:!0});var SKt=s(Wre);oKr=r(SKt,"FlaxWav2Vec2Model"),SKt.forEach(t),rKr=r(zWe," (Wav2Vec2 model)"),zWe.forEach(t),tKr=i(ne),q6=n(ne,"LI",{});var WWe=s(q6);A7e=n(WWe,"STRONG",{});var RKt=s(A7e);aKr=r(RKt,"xglm"),RKt.forEach(t),nKr=r(WWe," \u2014 "),Qre=n(WWe,"A",{href:!0});var PKt=s(Qre);sKr=r(PKt,"FlaxXGLMModel"),PKt.forEach(t),lKr=r(WWe," (XGLM model)"),WWe.forEach(t),iKr=i(ne),j6=n(ne,"LI",{});var QWe=s(j6);L7e=n(QWe,"STRONG",{});var BKt=s(L7e);dKr=r(BKt,"xlm-roberta"),BKt.forEach(t),cKr=r(QWe," \u2014 "),Ure=n(QWe,"A",{href:!0});var IKt=s(Ure);mKr=r(IKt,"FlaxXLMRobertaModel"),IKt.forEach(t),fKr=r(QWe," (XLM-RoBERTa model)"),QWe.forEach(t),ne.forEach(t),gKr=i(vi),T(D6.$$.fragment,vi),vi.forEach(t),bi.forEach(t),cJe=i(m),bm=n(m,"H2",{class:!0});var EKe=s(bm);G6=n(EKe,"A",{id:!0,class:!0,href:!0});var NKt=s(G6);y7e=n(NKt,"SPAN",{});var qKt=s(y7e);T(Gk.$$.fragment,qKt),qKt.forEach(t),NKt.forEach(t),hKr=i(EKe),x7e=n(EKe,"SPAN",{});var jKt=s(x7e);uKr=r(jKt,"FlaxAutoModelForCausalLM"),jKt.forEach(t),EKe.forEach(t),mJe=i(m),Fr=n(m,"DIV",{class:!0});var Fi=s(Fr);T(Ok.$$.fragment,Fi),pKr=i(Fi),vm=n(Fi,"P",{});var Rse=s(vm);_Kr=r(Rse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Hre=n(Rse,"A",{href:!0});var DKt=s(Hre);bKr=r(DKt,"from_pretrained()"),DKt.forEach(t),vKr=r(Rse," class method or the "),Jre=n(Rse,"A",{href:!0});var GKt=s(Jre);FKr=r(GKt,"from_config()"),GKt.forEach(t),TKr=r(Rse,` class
method.`),Rse.forEach(t),MKr=i(Fi),Vk=n(Fi,"P",{});var CKe=s(Vk);EKr=r(CKe,"This class cannot be instantiated directly using "),$7e=n(CKe,"CODE",{});var OKt=s($7e);CKr=r(OKt,"__init__()"),OKt.forEach(t),wKr=r(CKe," (throws an error)."),CKe.forEach(t),AKr=i(Fi),ea=n(Fi,"DIV",{class:!0});var Yy=s(ea);T(Xk.$$.fragment,Yy),LKr=i(Yy),k7e=n(Yy,"P",{});var VKt=s(k7e);yKr=r(VKt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),VKt.forEach(t),xKr=i(Yy),Fm=n(Yy,"P",{});var Pse=s(Fm);$Kr=r(Pse,`Note:
Loading a model from its configuration file does `),S7e=n(Pse,"STRONG",{});var XKt=s(S7e);kKr=r(XKt,"not"),XKt.forEach(t),SKr=r(Pse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yre=n(Pse,"A",{href:!0});var zKt=s(Yre);RKr=r(zKt,"from_pretrained()"),zKt.forEach(t),PKr=r(Pse," to load the model weights."),Pse.forEach(t),BKr=i(Yy),T(O6.$$.fragment,Yy),Yy.forEach(t),IKr=i(Fi),Hr=n(Fi,"DIV",{class:!0});var Ti=s(Hr);T(zk.$$.fragment,Ti),NKr=i(Ti),R7e=n(Ti,"P",{});var WKt=s(R7e);qKr=r(WKt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),WKt.forEach(t),jKr=i(Ti),Sn=n(Ti,"P",{});var Ky=s(Sn);DKr=r(Ky,"The model class to instantiate is selected based on the "),P7e=n(Ky,"CODE",{});var QKt=s(P7e);GKr=r(QKt,"model_type"),QKt.forEach(t),OKr=r(Ky,` property of the config object (either
passed as an argument or loaded from `),B7e=n(Ky,"CODE",{});var UKt=s(B7e);VKr=r(UKt,"pretrained_model_name_or_path"),UKt.forEach(t),XKr=r(Ky,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I7e=n(Ky,"CODE",{});var HKt=s(I7e);zKr=r(HKt,"pretrained_model_name_or_path"),HKt.forEach(t),WKr=r(Ky,":"),Ky.forEach(t),QKr=i(Ti),xe=n(Ti,"UL",{});var qe=s(xe);V6=n(qe,"LI",{});var UWe=s(V6);N7e=n(UWe,"STRONG",{});var JKt=s(N7e);UKr=r(JKt,"bart"),JKt.forEach(t),HKr=r(UWe," \u2014 "),Kre=n(UWe,"A",{href:!0});var YKt=s(Kre);JKr=r(YKt,"FlaxBartForCausalLM"),YKt.forEach(t),YKr=r(UWe," (BART model)"),UWe.forEach(t),KKr=i(qe),X6=n(qe,"LI",{});var HWe=s(X6);q7e=n(HWe,"STRONG",{});var KKt=s(q7e);ZKr=r(KKt,"bert"),KKt.forEach(t),eZr=r(HWe," \u2014 "),Zre=n(HWe,"A",{href:!0});var ZKt=s(Zre);oZr=r(ZKt,"FlaxBertForCausalLM"),ZKt.forEach(t),rZr=r(HWe," (BERT model)"),HWe.forEach(t),tZr=i(qe),z6=n(qe,"LI",{});var JWe=s(z6);j7e=n(JWe,"STRONG",{});var eZt=s(j7e);aZr=r(eZt,"big_bird"),eZt.forEach(t),nZr=r(JWe," \u2014 "),ete=n(JWe,"A",{href:!0});var oZt=s(ete);sZr=r(oZt,"FlaxBigBirdForCausalLM"),oZt.forEach(t),lZr=r(JWe," (BigBird model)"),JWe.forEach(t),iZr=i(qe),W6=n(qe,"LI",{});var YWe=s(W6);D7e=n(YWe,"STRONG",{});var rZt=s(D7e);dZr=r(rZt,"electra"),rZt.forEach(t),cZr=r(YWe," \u2014 "),ote=n(YWe,"A",{href:!0});var tZt=s(ote);mZr=r(tZt,"FlaxElectraForCausalLM"),tZt.forEach(t),fZr=r(YWe," (ELECTRA model)"),YWe.forEach(t),gZr=i(qe),Q6=n(qe,"LI",{});var KWe=s(Q6);G7e=n(KWe,"STRONG",{});var aZt=s(G7e);hZr=r(aZt,"gpt2"),aZt.forEach(t),uZr=r(KWe," \u2014 "),rte=n(KWe,"A",{href:!0});var nZt=s(rte);pZr=r(nZt,"FlaxGPT2LMHeadModel"),nZt.forEach(t),_Zr=r(KWe," (OpenAI GPT-2 model)"),KWe.forEach(t),bZr=i(qe),U6=n(qe,"LI",{});var ZWe=s(U6);O7e=n(ZWe,"STRONG",{});var sZt=s(O7e);vZr=r(sZt,"gpt_neo"),sZt.forEach(t),FZr=r(ZWe," \u2014 "),tte=n(ZWe,"A",{href:!0});var lZt=s(tte);TZr=r(lZt,"FlaxGPTNeoForCausalLM"),lZt.forEach(t),MZr=r(ZWe," (GPT Neo model)"),ZWe.forEach(t),EZr=i(qe),H6=n(qe,"LI",{});var eQe=s(H6);V7e=n(eQe,"STRONG",{});var iZt=s(V7e);CZr=r(iZt,"gptj"),iZt.forEach(t),wZr=r(eQe," \u2014 "),ate=n(eQe,"A",{href:!0});var dZt=s(ate);AZr=r(dZt,"FlaxGPTJForCausalLM"),dZt.forEach(t),LZr=r(eQe," (GPT-J model)"),eQe.forEach(t),yZr=i(qe),J6=n(qe,"LI",{});var oQe=s(J6);X7e=n(oQe,"STRONG",{});var cZt=s(X7e);xZr=r(cZt,"opt"),cZt.forEach(t),$Zr=r(oQe," \u2014 "),nte=n(oQe,"A",{href:!0});var mZt=s(nte);kZr=r(mZt,"FlaxOPTForCausalLM"),mZt.forEach(t),SZr=r(oQe," (OPT model)"),oQe.forEach(t),RZr=i(qe),Y6=n(qe,"LI",{});var rQe=s(Y6);z7e=n(rQe,"STRONG",{});var fZt=s(z7e);PZr=r(fZt,"roberta"),fZt.forEach(t),BZr=r(rQe," \u2014 "),ste=n(rQe,"A",{href:!0});var gZt=s(ste);IZr=r(gZt,"FlaxRobertaForCausalLM"),gZt.forEach(t),NZr=r(rQe," (RoBERTa model)"),rQe.forEach(t),qZr=i(qe),K6=n(qe,"LI",{});var tQe=s(K6);W7e=n(tQe,"STRONG",{});var hZt=s(W7e);jZr=r(hZt,"xglm"),hZt.forEach(t),DZr=r(tQe," \u2014 "),lte=n(tQe,"A",{href:!0});var uZt=s(lte);GZr=r(uZt,"FlaxXGLMForCausalLM"),uZt.forEach(t),OZr=r(tQe," (XGLM model)"),tQe.forEach(t),qe.forEach(t),VZr=i(Ti),T(Z6.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),fJe=i(m),Tm=n(m,"H2",{class:!0});var wKe=s(Tm);eA=n(wKe,"A",{id:!0,class:!0,href:!0});var pZt=s(eA);Q7e=n(pZt,"SPAN",{});var _Zt=s(Q7e);T(Wk.$$.fragment,_Zt),_Zt.forEach(t),pZt.forEach(t),XZr=i(wKe),U7e=n(wKe,"SPAN",{});var bZt=s(U7e);zZr=r(bZt,"FlaxAutoModelForPreTraining"),bZt.forEach(t),wKe.forEach(t),gJe=i(m),Tr=n(m,"DIV",{class:!0});var Mi=s(Tr);T(Qk.$$.fragment,Mi),WZr=i(Mi),Mm=n(Mi,"P",{});var Bse=s(Mm);QZr=r(Bse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ite=n(Bse,"A",{href:!0});var vZt=s(ite);UZr=r(vZt,"from_pretrained()"),vZt.forEach(t),HZr=r(Bse," class method or the "),dte=n(Bse,"A",{href:!0});var FZt=s(dte);JZr=r(FZt,"from_config()"),FZt.forEach(t),YZr=r(Bse,` class
method.`),Bse.forEach(t),KZr=i(Mi),Uk=n(Mi,"P",{});var AKe=s(Uk);ZZr=r(AKe,"This class cannot be instantiated directly using "),H7e=n(AKe,"CODE",{});var TZt=s(H7e);eet=r(TZt,"__init__()"),TZt.forEach(t),oet=r(AKe," (throws an error)."),AKe.forEach(t),ret=i(Mi),oa=n(Mi,"DIV",{class:!0});var Zy=s(oa);T(Hk.$$.fragment,Zy),tet=i(Zy),J7e=n(Zy,"P",{});var MZt=s(J7e);aet=r(MZt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),MZt.forEach(t),net=i(Zy),Em=n(Zy,"P",{});var Ise=s(Em);set=r(Ise,`Note:
Loading a model from its configuration file does `),Y7e=n(Ise,"STRONG",{});var EZt=s(Y7e);iet=r(EZt,"not"),EZt.forEach(t),det=r(Ise,` load the model weights. It only affects the
model\u2019s configuration. Use `),cte=n(Ise,"A",{href:!0});var CZt=s(cte);cet=r(CZt,"from_pretrained()"),CZt.forEach(t),met=r(Ise," to load the model weights."),Ise.forEach(t),fet=i(Zy),T(oA.$$.fragment,Zy),Zy.forEach(t),get=i(Mi),Jr=n(Mi,"DIV",{class:!0});var Ei=s(Jr);T(Jk.$$.fragment,Ei),het=i(Ei),K7e=n(Ei,"P",{});var wZt=s(K7e);uet=r(wZt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wZt.forEach(t),pet=i(Ei),Rn=n(Ei,"P",{});var e8=s(Rn);_et=r(e8,"The model class to instantiate is selected based on the "),Z7e=n(e8,"CODE",{});var AZt=s(Z7e);bet=r(AZt,"model_type"),AZt.forEach(t),vet=r(e8,` property of the config object (either
passed as an argument or loaded from `),eLe=n(e8,"CODE",{});var LZt=s(eLe);Fet=r(LZt,"pretrained_model_name_or_path"),LZt.forEach(t),Tet=r(e8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oLe=n(e8,"CODE",{});var yZt=s(oLe);Met=r(yZt,"pretrained_model_name_or_path"),yZt.forEach(t),Eet=r(e8,":"),e8.forEach(t),Cet=i(Ei),Ee=n(Ei,"UL",{});var we=s(Ee);rA=n(we,"LI",{});var aQe=s(rA);rLe=n(aQe,"STRONG",{});var xZt=s(rLe);wet=r(xZt,"albert"),xZt.forEach(t),Aet=r(aQe," \u2014 "),mte=n(aQe,"A",{href:!0});var $Zt=s(mte);Let=r($Zt,"FlaxAlbertForPreTraining"),$Zt.forEach(t),yet=r(aQe," (ALBERT model)"),aQe.forEach(t),xet=i(we),tA=n(we,"LI",{});var nQe=s(tA);tLe=n(nQe,"STRONG",{});var kZt=s(tLe);$et=r(kZt,"bart"),kZt.forEach(t),ket=r(nQe," \u2014 "),fte=n(nQe,"A",{href:!0});var SZt=s(fte);Set=r(SZt,"FlaxBartForConditionalGeneration"),SZt.forEach(t),Ret=r(nQe," (BART model)"),nQe.forEach(t),Pet=i(we),aA=n(we,"LI",{});var sQe=s(aA);aLe=n(sQe,"STRONG",{});var RZt=s(aLe);Bet=r(RZt,"bert"),RZt.forEach(t),Iet=r(sQe," \u2014 "),gte=n(sQe,"A",{href:!0});var PZt=s(gte);Net=r(PZt,"FlaxBertForPreTraining"),PZt.forEach(t),qet=r(sQe," (BERT model)"),sQe.forEach(t),jet=i(we),nA=n(we,"LI",{});var lQe=s(nA);nLe=n(lQe,"STRONG",{});var BZt=s(nLe);Det=r(BZt,"big_bird"),BZt.forEach(t),Get=r(lQe," \u2014 "),hte=n(lQe,"A",{href:!0});var IZt=s(hte);Oet=r(IZt,"FlaxBigBirdForPreTraining"),IZt.forEach(t),Vet=r(lQe," (BigBird model)"),lQe.forEach(t),Xet=i(we),sA=n(we,"LI",{});var iQe=s(sA);sLe=n(iQe,"STRONG",{});var NZt=s(sLe);zet=r(NZt,"electra"),NZt.forEach(t),Wet=r(iQe," \u2014 "),ute=n(iQe,"A",{href:!0});var qZt=s(ute);Qet=r(qZt,"FlaxElectraForPreTraining"),qZt.forEach(t),Uet=r(iQe," (ELECTRA model)"),iQe.forEach(t),Het=i(we),lA=n(we,"LI",{});var dQe=s(lA);lLe=n(dQe,"STRONG",{});var jZt=s(lLe);Jet=r(jZt,"longt5"),jZt.forEach(t),Yet=r(dQe," \u2014 "),pte=n(dQe,"A",{href:!0});var DZt=s(pte);Ket=r(DZt,"FlaxLongT5ForConditionalGeneration"),DZt.forEach(t),Zet=r(dQe," (LongT5 model)"),dQe.forEach(t),eot=i(we),iA=n(we,"LI",{});var cQe=s(iA);iLe=n(cQe,"STRONG",{});var GZt=s(iLe);oot=r(GZt,"mbart"),GZt.forEach(t),rot=r(cQe," \u2014 "),_te=n(cQe,"A",{href:!0});var OZt=s(_te);tot=r(OZt,"FlaxMBartForConditionalGeneration"),OZt.forEach(t),aot=r(cQe," (mBART model)"),cQe.forEach(t),not=i(we),dA=n(we,"LI",{});var mQe=s(dA);dLe=n(mQe,"STRONG",{});var VZt=s(dLe);sot=r(VZt,"mt5"),VZt.forEach(t),lot=r(mQe," \u2014 "),bte=n(mQe,"A",{href:!0});var XZt=s(bte);iot=r(XZt,"FlaxMT5ForConditionalGeneration"),XZt.forEach(t),dot=r(mQe," (MT5 model)"),mQe.forEach(t),cot=i(we),cA=n(we,"LI",{});var fQe=s(cA);cLe=n(fQe,"STRONG",{});var zZt=s(cLe);mot=r(zZt,"roberta"),zZt.forEach(t),fot=r(fQe," \u2014 "),vte=n(fQe,"A",{href:!0});var WZt=s(vte);got=r(WZt,"FlaxRobertaForMaskedLM"),WZt.forEach(t),hot=r(fQe," (RoBERTa model)"),fQe.forEach(t),uot=i(we),mA=n(we,"LI",{});var gQe=s(mA);mLe=n(gQe,"STRONG",{});var QZt=s(mLe);pot=r(QZt,"roformer"),QZt.forEach(t),_ot=r(gQe," \u2014 "),Fte=n(gQe,"A",{href:!0});var UZt=s(Fte);bot=r(UZt,"FlaxRoFormerForMaskedLM"),UZt.forEach(t),vot=r(gQe," (RoFormer model)"),gQe.forEach(t),Fot=i(we),fA=n(we,"LI",{});var hQe=s(fA);fLe=n(hQe,"STRONG",{});var HZt=s(fLe);Tot=r(HZt,"t5"),HZt.forEach(t),Mot=r(hQe," \u2014 "),Tte=n(hQe,"A",{href:!0});var JZt=s(Tte);Eot=r(JZt,"FlaxT5ForConditionalGeneration"),JZt.forEach(t),Cot=r(hQe," (T5 model)"),hQe.forEach(t),wot=i(we),gA=n(we,"LI",{});var uQe=s(gA);gLe=n(uQe,"STRONG",{});var YZt=s(gLe);Aot=r(YZt,"wav2vec2"),YZt.forEach(t),Lot=r(uQe," \u2014 "),Mte=n(uQe,"A",{href:!0});var KZt=s(Mte);yot=r(KZt,"FlaxWav2Vec2ForPreTraining"),KZt.forEach(t),xot=r(uQe," (Wav2Vec2 model)"),uQe.forEach(t),$ot=i(we),hA=n(we,"LI",{});var pQe=s(hA);hLe=n(pQe,"STRONG",{});var ZZt=s(hLe);kot=r(ZZt,"xlm-roberta"),ZZt.forEach(t),Sot=r(pQe," \u2014 "),Ete=n(pQe,"A",{href:!0});var eea=s(Ete);Rot=r(eea,"FlaxXLMRobertaForMaskedLM"),eea.forEach(t),Pot=r(pQe," (XLM-RoBERTa model)"),pQe.forEach(t),we.forEach(t),Bot=i(Ei),T(uA.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),hJe=i(m),Cm=n(m,"H2",{class:!0});var LKe=s(Cm);pA=n(LKe,"A",{id:!0,class:!0,href:!0});var oea=s(pA);uLe=n(oea,"SPAN",{});var rea=s(uLe);T(Yk.$$.fragment,rea),rea.forEach(t),oea.forEach(t),Iot=i(LKe),pLe=n(LKe,"SPAN",{});var tea=s(pLe);Not=r(tea,"FlaxAutoModelForMaskedLM"),tea.forEach(t),LKe.forEach(t),uJe=i(m),Mr=n(m,"DIV",{class:!0});var Ci=s(Mr);T(Kk.$$.fragment,Ci),qot=i(Ci),wm=n(Ci,"P",{});var Nse=s(wm);jot=r(Nse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Cte=n(Nse,"A",{href:!0});var aea=s(Cte);Dot=r(aea,"from_pretrained()"),aea.forEach(t),Got=r(Nse," class method or the "),wte=n(Nse,"A",{href:!0});var nea=s(wte);Oot=r(nea,"from_config()"),nea.forEach(t),Vot=r(Nse,` class
method.`),Nse.forEach(t),Xot=i(Ci),Zk=n(Ci,"P",{});var yKe=s(Zk);zot=r(yKe,"This class cannot be instantiated directly using "),_Le=n(yKe,"CODE",{});var sea=s(_Le);Wot=r(sea,"__init__()"),sea.forEach(t),Qot=r(yKe," (throws an error)."),yKe.forEach(t),Uot=i(Ci),ra=n(Ci,"DIV",{class:!0});var o8=s(ra);T(eS.$$.fragment,o8),Hot=i(o8),bLe=n(o8,"P",{});var lea=s(bLe);Jot=r(lea,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lea.forEach(t),Yot=i(o8),Am=n(o8,"P",{});var qse=s(Am);Kot=r(qse,`Note:
Loading a model from its configuration file does `),vLe=n(qse,"STRONG",{});var iea=s(vLe);Zot=r(iea,"not"),iea.forEach(t),ert=r(qse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ate=n(qse,"A",{href:!0});var dea=s(Ate);ort=r(dea,"from_pretrained()"),dea.forEach(t),rrt=r(qse," to load the model weights."),qse.forEach(t),trt=i(o8),T(_A.$$.fragment,o8),o8.forEach(t),art=i(Ci),Yr=n(Ci,"DIV",{class:!0});var wi=s(Yr);T(oS.$$.fragment,wi),nrt=i(wi),FLe=n(wi,"P",{});var cea=s(FLe);srt=r(cea,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cea.forEach(t),lrt=i(wi),Pn=n(wi,"P",{});var r8=s(Pn);irt=r(r8,"The model class to instantiate is selected based on the "),TLe=n(r8,"CODE",{});var mea=s(TLe);drt=r(mea,"model_type"),mea.forEach(t),crt=r(r8,` property of the config object (either
passed as an argument or loaded from `),MLe=n(r8,"CODE",{});var fea=s(MLe);mrt=r(fea,"pretrained_model_name_or_path"),fea.forEach(t),frt=r(r8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ELe=n(r8,"CODE",{});var gea=s(ELe);grt=r(gea,"pretrained_model_name_or_path"),gea.forEach(t),hrt=r(r8,":"),r8.forEach(t),urt=i(wi),$e=n(wi,"UL",{});var je=s($e);bA=n(je,"LI",{});var _Qe=s(bA);CLe=n(_Qe,"STRONG",{});var hea=s(CLe);prt=r(hea,"albert"),hea.forEach(t),_rt=r(_Qe," \u2014 "),Lte=n(_Qe,"A",{href:!0});var uea=s(Lte);brt=r(uea,"FlaxAlbertForMaskedLM"),uea.forEach(t),vrt=r(_Qe," (ALBERT model)"),_Qe.forEach(t),Frt=i(je),vA=n(je,"LI",{});var bQe=s(vA);wLe=n(bQe,"STRONG",{});var pea=s(wLe);Trt=r(pea,"bart"),pea.forEach(t),Mrt=r(bQe," \u2014 "),yte=n(bQe,"A",{href:!0});var _ea=s(yte);Ert=r(_ea,"FlaxBartForConditionalGeneration"),_ea.forEach(t),Crt=r(bQe," (BART model)"),bQe.forEach(t),wrt=i(je),FA=n(je,"LI",{});var vQe=s(FA);ALe=n(vQe,"STRONG",{});var bea=s(ALe);Art=r(bea,"bert"),bea.forEach(t),Lrt=r(vQe," \u2014 "),xte=n(vQe,"A",{href:!0});var vea=s(xte);yrt=r(vea,"FlaxBertForMaskedLM"),vea.forEach(t),xrt=r(vQe," (BERT model)"),vQe.forEach(t),$rt=i(je),TA=n(je,"LI",{});var FQe=s(TA);LLe=n(FQe,"STRONG",{});var Fea=s(LLe);krt=r(Fea,"big_bird"),Fea.forEach(t),Srt=r(FQe," \u2014 "),$te=n(FQe,"A",{href:!0});var Tea=s($te);Rrt=r(Tea,"FlaxBigBirdForMaskedLM"),Tea.forEach(t),Prt=r(FQe," (BigBird model)"),FQe.forEach(t),Brt=i(je),MA=n(je,"LI",{});var TQe=s(MA);yLe=n(TQe,"STRONG",{});var Mea=s(yLe);Irt=r(Mea,"distilbert"),Mea.forEach(t),Nrt=r(TQe," \u2014 "),kte=n(TQe,"A",{href:!0});var Eea=s(kte);qrt=r(Eea,"FlaxDistilBertForMaskedLM"),Eea.forEach(t),jrt=r(TQe," (DistilBERT model)"),TQe.forEach(t),Drt=i(je),EA=n(je,"LI",{});var MQe=s(EA);xLe=n(MQe,"STRONG",{});var Cea=s(xLe);Grt=r(Cea,"electra"),Cea.forEach(t),Ort=r(MQe," \u2014 "),Ste=n(MQe,"A",{href:!0});var wea=s(Ste);Vrt=r(wea,"FlaxElectraForMaskedLM"),wea.forEach(t),Xrt=r(MQe," (ELECTRA model)"),MQe.forEach(t),zrt=i(je),CA=n(je,"LI",{});var EQe=s(CA);$Le=n(EQe,"STRONG",{});var Aea=s($Le);Wrt=r(Aea,"mbart"),Aea.forEach(t),Qrt=r(EQe," \u2014 "),Rte=n(EQe,"A",{href:!0});var Lea=s(Rte);Urt=r(Lea,"FlaxMBartForConditionalGeneration"),Lea.forEach(t),Hrt=r(EQe," (mBART model)"),EQe.forEach(t),Jrt=i(je),wA=n(je,"LI",{});var CQe=s(wA);kLe=n(CQe,"STRONG",{});var yea=s(kLe);Yrt=r(yea,"roberta"),yea.forEach(t),Krt=r(CQe," \u2014 "),Pte=n(CQe,"A",{href:!0});var xea=s(Pte);Zrt=r(xea,"FlaxRobertaForMaskedLM"),xea.forEach(t),ett=r(CQe," (RoBERTa model)"),CQe.forEach(t),ott=i(je),AA=n(je,"LI",{});var wQe=s(AA);SLe=n(wQe,"STRONG",{});var $ea=s(SLe);rtt=r($ea,"roformer"),$ea.forEach(t),ttt=r(wQe," \u2014 "),Bte=n(wQe,"A",{href:!0});var kea=s(Bte);att=r(kea,"FlaxRoFormerForMaskedLM"),kea.forEach(t),ntt=r(wQe," (RoFormer model)"),wQe.forEach(t),stt=i(je),LA=n(je,"LI",{});var AQe=s(LA);RLe=n(AQe,"STRONG",{});var Sea=s(RLe);ltt=r(Sea,"xlm-roberta"),Sea.forEach(t),itt=r(AQe," \u2014 "),Ite=n(AQe,"A",{href:!0});var Rea=s(Ite);dtt=r(Rea,"FlaxXLMRobertaForMaskedLM"),Rea.forEach(t),ctt=r(AQe," (XLM-RoBERTa model)"),AQe.forEach(t),je.forEach(t),mtt=i(wi),T(yA.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),pJe=i(m),Lm=n(m,"H2",{class:!0});var xKe=s(Lm);xA=n(xKe,"A",{id:!0,class:!0,href:!0});var Pea=s(xA);PLe=n(Pea,"SPAN",{});var Bea=s(PLe);T(rS.$$.fragment,Bea),Bea.forEach(t),Pea.forEach(t),ftt=i(xKe),BLe=n(xKe,"SPAN",{});var Iea=s(BLe);gtt=r(Iea,"FlaxAutoModelForSeq2SeqLM"),Iea.forEach(t),xKe.forEach(t),_Je=i(m),Er=n(m,"DIV",{class:!0});var Ai=s(Er);T(tS.$$.fragment,Ai),htt=i(Ai),ym=n(Ai,"P",{});var jse=s(ym);utt=r(jse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Nte=n(jse,"A",{href:!0});var Nea=s(Nte);ptt=r(Nea,"from_pretrained()"),Nea.forEach(t),_tt=r(jse," class method or the "),qte=n(jse,"A",{href:!0});var qea=s(qte);btt=r(qea,"from_config()"),qea.forEach(t),vtt=r(jse,` class
method.`),jse.forEach(t),Ftt=i(Ai),aS=n(Ai,"P",{});var $Ke=s(aS);Ttt=r($Ke,"This class cannot be instantiated directly using "),ILe=n($Ke,"CODE",{});var jea=s(ILe);Mtt=r(jea,"__init__()"),jea.forEach(t),Ett=r($Ke," (throws an error)."),$Ke.forEach(t),Ctt=i(Ai),ta=n(Ai,"DIV",{class:!0});var t8=s(ta);T(nS.$$.fragment,t8),wtt=i(t8),NLe=n(t8,"P",{});var Dea=s(NLe);Att=r(Dea,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Dea.forEach(t),Ltt=i(t8),xm=n(t8,"P",{});var Dse=s(xm);ytt=r(Dse,`Note:
Loading a model from its configuration file does `),qLe=n(Dse,"STRONG",{});var Gea=s(qLe);xtt=r(Gea,"not"),Gea.forEach(t),$tt=r(Dse,` load the model weights. It only affects the
model\u2019s configuration. Use `),jte=n(Dse,"A",{href:!0});var Oea=s(jte);ktt=r(Oea,"from_pretrained()"),Oea.forEach(t),Stt=r(Dse," to load the model weights."),Dse.forEach(t),Rtt=i(t8),T($A.$$.fragment,t8),t8.forEach(t),Ptt=i(Ai),Kr=n(Ai,"DIV",{class:!0});var Li=s(Kr);T(sS.$$.fragment,Li),Btt=i(Li),jLe=n(Li,"P",{});var Vea=s(jLe);Itt=r(Vea,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Vea.forEach(t),Ntt=i(Li),Bn=n(Li,"P",{});var a8=s(Bn);qtt=r(a8,"The model class to instantiate is selected based on the "),DLe=n(a8,"CODE",{});var Xea=s(DLe);jtt=r(Xea,"model_type"),Xea.forEach(t),Dtt=r(a8,` property of the config object (either
passed as an argument or loaded from `),GLe=n(a8,"CODE",{});var zea=s(GLe);Gtt=r(zea,"pretrained_model_name_or_path"),zea.forEach(t),Ott=r(a8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OLe=n(a8,"CODE",{});var Wea=s(OLe);Vtt=r(Wea,"pretrained_model_name_or_path"),Wea.forEach(t),Xtt=r(a8,":"),a8.forEach(t),ztt=i(Li),ke=n(Li,"UL",{});var De=s(ke);kA=n(De,"LI",{});var LQe=s(kA);VLe=n(LQe,"STRONG",{});var Qea=s(VLe);Wtt=r(Qea,"bart"),Qea.forEach(t),Qtt=r(LQe," \u2014 "),Dte=n(LQe,"A",{href:!0});var Uea=s(Dte);Utt=r(Uea,"FlaxBartForConditionalGeneration"),Uea.forEach(t),Htt=r(LQe," (BART model)"),LQe.forEach(t),Jtt=i(De),SA=n(De,"LI",{});var yQe=s(SA);XLe=n(yQe,"STRONG",{});var Hea=s(XLe);Ytt=r(Hea,"blenderbot"),Hea.forEach(t),Ktt=r(yQe," \u2014 "),Gte=n(yQe,"A",{href:!0});var Jea=s(Gte);Ztt=r(Jea,"FlaxBlenderbotForConditionalGeneration"),Jea.forEach(t),eat=r(yQe," (Blenderbot model)"),yQe.forEach(t),oat=i(De),RA=n(De,"LI",{});var xQe=s(RA);zLe=n(xQe,"STRONG",{});var Yea=s(zLe);rat=r(Yea,"blenderbot-small"),Yea.forEach(t),tat=r(xQe," \u2014 "),Ote=n(xQe,"A",{href:!0});var Kea=s(Ote);aat=r(Kea,"FlaxBlenderbotSmallForConditionalGeneration"),Kea.forEach(t),nat=r(xQe," (BlenderbotSmall model)"),xQe.forEach(t),sat=i(De),PA=n(De,"LI",{});var $Qe=s(PA);WLe=n($Qe,"STRONG",{});var Zea=s(WLe);lat=r(Zea,"encoder-decoder"),Zea.forEach(t),iat=r($Qe," \u2014 "),Vte=n($Qe,"A",{href:!0});var eoa=s(Vte);dat=r(eoa,"FlaxEncoderDecoderModel"),eoa.forEach(t),cat=r($Qe," (Encoder decoder model)"),$Qe.forEach(t),mat=i(De),BA=n(De,"LI",{});var kQe=s(BA);QLe=n(kQe,"STRONG",{});var ooa=s(QLe);fat=r(ooa,"longt5"),ooa.forEach(t),gat=r(kQe," \u2014 "),Xte=n(kQe,"A",{href:!0});var roa=s(Xte);hat=r(roa,"FlaxLongT5ForConditionalGeneration"),roa.forEach(t),uat=r(kQe," (LongT5 model)"),kQe.forEach(t),pat=i(De),IA=n(De,"LI",{});var SQe=s(IA);ULe=n(SQe,"STRONG",{});var toa=s(ULe);_at=r(toa,"marian"),toa.forEach(t),bat=r(SQe," \u2014 "),zte=n(SQe,"A",{href:!0});var aoa=s(zte);vat=r(aoa,"FlaxMarianMTModel"),aoa.forEach(t),Fat=r(SQe," (Marian model)"),SQe.forEach(t),Tat=i(De),NA=n(De,"LI",{});var RQe=s(NA);HLe=n(RQe,"STRONG",{});var noa=s(HLe);Mat=r(noa,"mbart"),noa.forEach(t),Eat=r(RQe," \u2014 "),Wte=n(RQe,"A",{href:!0});var soa=s(Wte);Cat=r(soa,"FlaxMBartForConditionalGeneration"),soa.forEach(t),wat=r(RQe," (mBART model)"),RQe.forEach(t),Aat=i(De),qA=n(De,"LI",{});var PQe=s(qA);JLe=n(PQe,"STRONG",{});var loa=s(JLe);Lat=r(loa,"mt5"),loa.forEach(t),yat=r(PQe," \u2014 "),Qte=n(PQe,"A",{href:!0});var ioa=s(Qte);xat=r(ioa,"FlaxMT5ForConditionalGeneration"),ioa.forEach(t),$at=r(PQe," (MT5 model)"),PQe.forEach(t),kat=i(De),jA=n(De,"LI",{});var BQe=s(jA);YLe=n(BQe,"STRONG",{});var doa=s(YLe);Sat=r(doa,"pegasus"),doa.forEach(t),Rat=r(BQe," \u2014 "),Ute=n(BQe,"A",{href:!0});var coa=s(Ute);Pat=r(coa,"FlaxPegasusForConditionalGeneration"),coa.forEach(t),Bat=r(BQe," (Pegasus model)"),BQe.forEach(t),Iat=i(De),DA=n(De,"LI",{});var IQe=s(DA);KLe=n(IQe,"STRONG",{});var moa=s(KLe);Nat=r(moa,"t5"),moa.forEach(t),qat=r(IQe," \u2014 "),Hte=n(IQe,"A",{href:!0});var foa=s(Hte);jat=r(foa,"FlaxT5ForConditionalGeneration"),foa.forEach(t),Dat=r(IQe," (T5 model)"),IQe.forEach(t),De.forEach(t),Gat=i(Li),T(GA.$$.fragment,Li),Li.forEach(t),Ai.forEach(t),bJe=i(m),$m=n(m,"H2",{class:!0});var kKe=s($m);OA=n(kKe,"A",{id:!0,class:!0,href:!0});var goa=s(OA);ZLe=n(goa,"SPAN",{});var hoa=s(ZLe);T(lS.$$.fragment,hoa),hoa.forEach(t),goa.forEach(t),Oat=i(kKe),eye=n(kKe,"SPAN",{});var uoa=s(eye);Vat=r(uoa,"FlaxAutoModelForSequenceClassification"),uoa.forEach(t),kKe.forEach(t),vJe=i(m),Cr=n(m,"DIV",{class:!0});var yi=s(Cr);T(iS.$$.fragment,yi),Xat=i(yi),km=n(yi,"P",{});var Gse=s(km);zat=r(Gse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Jte=n(Gse,"A",{href:!0});var poa=s(Jte);Wat=r(poa,"from_pretrained()"),poa.forEach(t),Qat=r(Gse," class method or the "),Yte=n(Gse,"A",{href:!0});var _oa=s(Yte);Uat=r(_oa,"from_config()"),_oa.forEach(t),Hat=r(Gse,` class
method.`),Gse.forEach(t),Jat=i(yi),dS=n(yi,"P",{});var SKe=s(dS);Yat=r(SKe,"This class cannot be instantiated directly using "),oye=n(SKe,"CODE",{});var boa=s(oye);Kat=r(boa,"__init__()"),boa.forEach(t),Zat=r(SKe," (throws an error)."),SKe.forEach(t),ent=i(yi),aa=n(yi,"DIV",{class:!0});var n8=s(aa);T(cS.$$.fragment,n8),ont=i(n8),rye=n(n8,"P",{});var voa=s(rye);rnt=r(voa,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),voa.forEach(t),tnt=i(n8),Sm=n(n8,"P",{});var Ose=s(Sm);ant=r(Ose,`Note:
Loading a model from its configuration file does `),tye=n(Ose,"STRONG",{});var Foa=s(tye);nnt=r(Foa,"not"),Foa.forEach(t),snt=r(Ose,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kte=n(Ose,"A",{href:!0});var Toa=s(Kte);lnt=r(Toa,"from_pretrained()"),Toa.forEach(t),int=r(Ose," to load the model weights."),Ose.forEach(t),dnt=i(n8),T(VA.$$.fragment,n8),n8.forEach(t),cnt=i(yi),Zr=n(yi,"DIV",{class:!0});var xi=s(Zr);T(mS.$$.fragment,xi),mnt=i(xi),aye=n(xi,"P",{});var Moa=s(aye);fnt=r(Moa,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Moa.forEach(t),gnt=i(xi),In=n(xi,"P",{});var s8=s(In);hnt=r(s8,"The model class to instantiate is selected based on the "),nye=n(s8,"CODE",{});var Eoa=s(nye);unt=r(Eoa,"model_type"),Eoa.forEach(t),pnt=r(s8,` property of the config object (either
passed as an argument or loaded from `),sye=n(s8,"CODE",{});var Coa=s(sye);_nt=r(Coa,"pretrained_model_name_or_path"),Coa.forEach(t),bnt=r(s8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lye=n(s8,"CODE",{});var woa=s(lye);vnt=r(woa,"pretrained_model_name_or_path"),woa.forEach(t),Fnt=r(s8,":"),s8.forEach(t),Tnt=i(xi),Se=n(xi,"UL",{});var Ge=s(Se);XA=n(Ge,"LI",{});var NQe=s(XA);iye=n(NQe,"STRONG",{});var Aoa=s(iye);Mnt=r(Aoa,"albert"),Aoa.forEach(t),Ent=r(NQe," \u2014 "),Zte=n(NQe,"A",{href:!0});var Loa=s(Zte);Cnt=r(Loa,"FlaxAlbertForSequenceClassification"),Loa.forEach(t),wnt=r(NQe," (ALBERT model)"),NQe.forEach(t),Ant=i(Ge),zA=n(Ge,"LI",{});var qQe=s(zA);dye=n(qQe,"STRONG",{});var yoa=s(dye);Lnt=r(yoa,"bart"),yoa.forEach(t),ynt=r(qQe," \u2014 "),eae=n(qQe,"A",{href:!0});var xoa=s(eae);xnt=r(xoa,"FlaxBartForSequenceClassification"),xoa.forEach(t),$nt=r(qQe," (BART model)"),qQe.forEach(t),knt=i(Ge),WA=n(Ge,"LI",{});var jQe=s(WA);cye=n(jQe,"STRONG",{});var $oa=s(cye);Snt=r($oa,"bert"),$oa.forEach(t),Rnt=r(jQe," \u2014 "),oae=n(jQe,"A",{href:!0});var koa=s(oae);Pnt=r(koa,"FlaxBertForSequenceClassification"),koa.forEach(t),Bnt=r(jQe," (BERT model)"),jQe.forEach(t),Int=i(Ge),QA=n(Ge,"LI",{});var DQe=s(QA);mye=n(DQe,"STRONG",{});var Soa=s(mye);Nnt=r(Soa,"big_bird"),Soa.forEach(t),qnt=r(DQe," \u2014 "),rae=n(DQe,"A",{href:!0});var Roa=s(rae);jnt=r(Roa,"FlaxBigBirdForSequenceClassification"),Roa.forEach(t),Dnt=r(DQe," (BigBird model)"),DQe.forEach(t),Gnt=i(Ge),UA=n(Ge,"LI",{});var GQe=s(UA);fye=n(GQe,"STRONG",{});var Poa=s(fye);Ont=r(Poa,"distilbert"),Poa.forEach(t),Vnt=r(GQe," \u2014 "),tae=n(GQe,"A",{href:!0});var Boa=s(tae);Xnt=r(Boa,"FlaxDistilBertForSequenceClassification"),Boa.forEach(t),znt=r(GQe," (DistilBERT model)"),GQe.forEach(t),Wnt=i(Ge),HA=n(Ge,"LI",{});var OQe=s(HA);gye=n(OQe,"STRONG",{});var Ioa=s(gye);Qnt=r(Ioa,"electra"),Ioa.forEach(t),Unt=r(OQe," \u2014 "),aae=n(OQe,"A",{href:!0});var Noa=s(aae);Hnt=r(Noa,"FlaxElectraForSequenceClassification"),Noa.forEach(t),Jnt=r(OQe," (ELECTRA model)"),OQe.forEach(t),Ynt=i(Ge),JA=n(Ge,"LI",{});var VQe=s(JA);hye=n(VQe,"STRONG",{});var qoa=s(hye);Knt=r(qoa,"mbart"),qoa.forEach(t),Znt=r(VQe," \u2014 "),nae=n(VQe,"A",{href:!0});var joa=s(nae);est=r(joa,"FlaxMBartForSequenceClassification"),joa.forEach(t),ost=r(VQe," (mBART model)"),VQe.forEach(t),rst=i(Ge),YA=n(Ge,"LI",{});var XQe=s(YA);uye=n(XQe,"STRONG",{});var Doa=s(uye);tst=r(Doa,"roberta"),Doa.forEach(t),ast=r(XQe," \u2014 "),sae=n(XQe,"A",{href:!0});var Goa=s(sae);nst=r(Goa,"FlaxRobertaForSequenceClassification"),Goa.forEach(t),sst=r(XQe," (RoBERTa model)"),XQe.forEach(t),lst=i(Ge),KA=n(Ge,"LI",{});var zQe=s(KA);pye=n(zQe,"STRONG",{});var Ooa=s(pye);ist=r(Ooa,"roformer"),Ooa.forEach(t),dst=r(zQe," \u2014 "),lae=n(zQe,"A",{href:!0});var Voa=s(lae);cst=r(Voa,"FlaxRoFormerForSequenceClassification"),Voa.forEach(t),mst=r(zQe," (RoFormer model)"),zQe.forEach(t),fst=i(Ge),ZA=n(Ge,"LI",{});var WQe=s(ZA);_ye=n(WQe,"STRONG",{});var Xoa=s(_ye);gst=r(Xoa,"xlm-roberta"),Xoa.forEach(t),hst=r(WQe," \u2014 "),iae=n(WQe,"A",{href:!0});var zoa=s(iae);ust=r(zoa,"FlaxXLMRobertaForSequenceClassification"),zoa.forEach(t),pst=r(WQe," (XLM-RoBERTa model)"),WQe.forEach(t),Ge.forEach(t),_st=i(xi),T(e7.$$.fragment,xi),xi.forEach(t),yi.forEach(t),FJe=i(m),Rm=n(m,"H2",{class:!0});var RKe=s(Rm);o7=n(RKe,"A",{id:!0,class:!0,href:!0});var Woa=s(o7);bye=n(Woa,"SPAN",{});var Qoa=s(bye);T(fS.$$.fragment,Qoa),Qoa.forEach(t),Woa.forEach(t),bst=i(RKe),vye=n(RKe,"SPAN",{});var Uoa=s(vye);vst=r(Uoa,"FlaxAutoModelForQuestionAnswering"),Uoa.forEach(t),RKe.forEach(t),TJe=i(m),wr=n(m,"DIV",{class:!0});var $i=s(wr);T(gS.$$.fragment,$i),Fst=i($i),Pm=n($i,"P",{});var Vse=s(Pm);Tst=r(Vse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dae=n(Vse,"A",{href:!0});var Hoa=s(dae);Mst=r(Hoa,"from_pretrained()"),Hoa.forEach(t),Est=r(Vse," class method or the "),cae=n(Vse,"A",{href:!0});var Joa=s(cae);Cst=r(Joa,"from_config()"),Joa.forEach(t),wst=r(Vse,` class
method.`),Vse.forEach(t),Ast=i($i),hS=n($i,"P",{});var PKe=s(hS);Lst=r(PKe,"This class cannot be instantiated directly using "),Fye=n(PKe,"CODE",{});var Yoa=s(Fye);yst=r(Yoa,"__init__()"),Yoa.forEach(t),xst=r(PKe," (throws an error)."),PKe.forEach(t),$st=i($i),na=n($i,"DIV",{class:!0});var l8=s(na);T(uS.$$.fragment,l8),kst=i(l8),Tye=n(l8,"P",{});var Koa=s(Tye);Sst=r(Koa,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Koa.forEach(t),Rst=i(l8),Bm=n(l8,"P",{});var Xse=s(Bm);Pst=r(Xse,`Note:
Loading a model from its configuration file does `),Mye=n(Xse,"STRONG",{});var Zoa=s(Mye);Bst=r(Zoa,"not"),Zoa.forEach(t),Ist=r(Xse,` load the model weights. It only affects the
model\u2019s configuration. Use `),mae=n(Xse,"A",{href:!0});var era=s(mae);Nst=r(era,"from_pretrained()"),era.forEach(t),qst=r(Xse," to load the model weights."),Xse.forEach(t),jst=i(l8),T(r7.$$.fragment,l8),l8.forEach(t),Dst=i($i),et=n($i,"DIV",{class:!0});var ki=s(et);T(pS.$$.fragment,ki),Gst=i(ki),Eye=n(ki,"P",{});var ora=s(Eye);Ost=r(ora,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ora.forEach(t),Vst=i(ki),Nn=n(ki,"P",{});var i8=s(Nn);Xst=r(i8,"The model class to instantiate is selected based on the "),Cye=n(i8,"CODE",{});var rra=s(Cye);zst=r(rra,"model_type"),rra.forEach(t),Wst=r(i8,` property of the config object (either
passed as an argument or loaded from `),wye=n(i8,"CODE",{});var tra=s(wye);Qst=r(tra,"pretrained_model_name_or_path"),tra.forEach(t),Ust=r(i8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aye=n(i8,"CODE",{});var ara=s(Aye);Hst=r(ara,"pretrained_model_name_or_path"),ara.forEach(t),Jst=r(i8,":"),i8.forEach(t),Yst=i(ki),Re=n(ki,"UL",{});var Oe=s(Re);t7=n(Oe,"LI",{});var QQe=s(t7);Lye=n(QQe,"STRONG",{});var nra=s(Lye);Kst=r(nra,"albert"),nra.forEach(t),Zst=r(QQe," \u2014 "),fae=n(QQe,"A",{href:!0});var sra=s(fae);elt=r(sra,"FlaxAlbertForQuestionAnswering"),sra.forEach(t),olt=r(QQe," (ALBERT model)"),QQe.forEach(t),rlt=i(Oe),a7=n(Oe,"LI",{});var UQe=s(a7);yye=n(UQe,"STRONG",{});var lra=s(yye);tlt=r(lra,"bart"),lra.forEach(t),alt=r(UQe," \u2014 "),gae=n(UQe,"A",{href:!0});var ira=s(gae);nlt=r(ira,"FlaxBartForQuestionAnswering"),ira.forEach(t),slt=r(UQe," (BART model)"),UQe.forEach(t),llt=i(Oe),n7=n(Oe,"LI",{});var HQe=s(n7);xye=n(HQe,"STRONG",{});var dra=s(xye);ilt=r(dra,"bert"),dra.forEach(t),dlt=r(HQe," \u2014 "),hae=n(HQe,"A",{href:!0});var cra=s(hae);clt=r(cra,"FlaxBertForQuestionAnswering"),cra.forEach(t),mlt=r(HQe," (BERT model)"),HQe.forEach(t),flt=i(Oe),s7=n(Oe,"LI",{});var JQe=s(s7);$ye=n(JQe,"STRONG",{});var mra=s($ye);glt=r(mra,"big_bird"),mra.forEach(t),hlt=r(JQe," \u2014 "),uae=n(JQe,"A",{href:!0});var fra=s(uae);ult=r(fra,"FlaxBigBirdForQuestionAnswering"),fra.forEach(t),plt=r(JQe," (BigBird model)"),JQe.forEach(t),_lt=i(Oe),l7=n(Oe,"LI",{});var YQe=s(l7);kye=n(YQe,"STRONG",{});var gra=s(kye);blt=r(gra,"distilbert"),gra.forEach(t),vlt=r(YQe," \u2014 "),pae=n(YQe,"A",{href:!0});var hra=s(pae);Flt=r(hra,"FlaxDistilBertForQuestionAnswering"),hra.forEach(t),Tlt=r(YQe," (DistilBERT model)"),YQe.forEach(t),Mlt=i(Oe),i7=n(Oe,"LI",{});var KQe=s(i7);Sye=n(KQe,"STRONG",{});var ura=s(Sye);Elt=r(ura,"electra"),ura.forEach(t),Clt=r(KQe," \u2014 "),_ae=n(KQe,"A",{href:!0});var pra=s(_ae);wlt=r(pra,"FlaxElectraForQuestionAnswering"),pra.forEach(t),Alt=r(KQe," (ELECTRA model)"),KQe.forEach(t),Llt=i(Oe),d7=n(Oe,"LI",{});var ZQe=s(d7);Rye=n(ZQe,"STRONG",{});var _ra=s(Rye);ylt=r(_ra,"mbart"),_ra.forEach(t),xlt=r(ZQe," \u2014 "),bae=n(ZQe,"A",{href:!0});var bra=s(bae);$lt=r(bra,"FlaxMBartForQuestionAnswering"),bra.forEach(t),klt=r(ZQe," (mBART model)"),ZQe.forEach(t),Slt=i(Oe),c7=n(Oe,"LI",{});var eUe=s(c7);Pye=n(eUe,"STRONG",{});var vra=s(Pye);Rlt=r(vra,"roberta"),vra.forEach(t),Plt=r(eUe," \u2014 "),vae=n(eUe,"A",{href:!0});var Fra=s(vae);Blt=r(Fra,"FlaxRobertaForQuestionAnswering"),Fra.forEach(t),Ilt=r(eUe," (RoBERTa model)"),eUe.forEach(t),Nlt=i(Oe),m7=n(Oe,"LI",{});var oUe=s(m7);Bye=n(oUe,"STRONG",{});var Tra=s(Bye);qlt=r(Tra,"roformer"),Tra.forEach(t),jlt=r(oUe," \u2014 "),Fae=n(oUe,"A",{href:!0});var Mra=s(Fae);Dlt=r(Mra,"FlaxRoFormerForQuestionAnswering"),Mra.forEach(t),Glt=r(oUe," (RoFormer model)"),oUe.forEach(t),Olt=i(Oe),f7=n(Oe,"LI",{});var rUe=s(f7);Iye=n(rUe,"STRONG",{});var Era=s(Iye);Vlt=r(Era,"xlm-roberta"),Era.forEach(t),Xlt=r(rUe," \u2014 "),Tae=n(rUe,"A",{href:!0});var Cra=s(Tae);zlt=r(Cra,"FlaxXLMRobertaForQuestionAnswering"),Cra.forEach(t),Wlt=r(rUe," (XLM-RoBERTa model)"),rUe.forEach(t),Oe.forEach(t),Qlt=i(ki),T(g7.$$.fragment,ki),ki.forEach(t),$i.forEach(t),MJe=i(m),Im=n(m,"H2",{class:!0});var BKe=s(Im);h7=n(BKe,"A",{id:!0,class:!0,href:!0});var wra=s(h7);Nye=n(wra,"SPAN",{});var Ara=s(Nye);T(_S.$$.fragment,Ara),Ara.forEach(t),wra.forEach(t),Ult=i(BKe),qye=n(BKe,"SPAN",{});var Lra=s(qye);Hlt=r(Lra,"FlaxAutoModelForTokenClassification"),Lra.forEach(t),BKe.forEach(t),EJe=i(m),Ar=n(m,"DIV",{class:!0});var Si=s(Ar);T(bS.$$.fragment,Si),Jlt=i(Si),Nm=n(Si,"P",{});var zse=s(Nm);Ylt=r(zse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Mae=n(zse,"A",{href:!0});var yra=s(Mae);Klt=r(yra,"from_pretrained()"),yra.forEach(t),Zlt=r(zse," class method or the "),Eae=n(zse,"A",{href:!0});var xra=s(Eae);eit=r(xra,"from_config()"),xra.forEach(t),oit=r(zse,` class
method.`),zse.forEach(t),rit=i(Si),vS=n(Si,"P",{});var IKe=s(vS);tit=r(IKe,"This class cannot be instantiated directly using "),jye=n(IKe,"CODE",{});var $ra=s(jye);ait=r($ra,"__init__()"),$ra.forEach(t),nit=r(IKe," (throws an error)."),IKe.forEach(t),sit=i(Si),sa=n(Si,"DIV",{class:!0});var d8=s(sa);T(FS.$$.fragment,d8),lit=i(d8),Dye=n(d8,"P",{});var kra=s(Dye);iit=r(kra,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),kra.forEach(t),dit=i(d8),qm=n(d8,"P",{});var Wse=s(qm);cit=r(Wse,`Note:
Loading a model from its configuration file does `),Gye=n(Wse,"STRONG",{});var Sra=s(Gye);mit=r(Sra,"not"),Sra.forEach(t),fit=r(Wse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cae=n(Wse,"A",{href:!0});var Rra=s(Cae);git=r(Rra,"from_pretrained()"),Rra.forEach(t),hit=r(Wse," to load the model weights."),Wse.forEach(t),uit=i(d8),T(u7.$$.fragment,d8),d8.forEach(t),pit=i(Si),ot=n(Si,"DIV",{class:!0});var Ri=s(ot);T(TS.$$.fragment,Ri),_it=i(Ri),Oye=n(Ri,"P",{});var Pra=s(Oye);bit=r(Pra,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Pra.forEach(t),vit=i(Ri),qn=n(Ri,"P",{});var c8=s(qn);Fit=r(c8,"The model class to instantiate is selected based on the "),Vye=n(c8,"CODE",{});var Bra=s(Vye);Tit=r(Bra,"model_type"),Bra.forEach(t),Mit=r(c8,` property of the config object (either
passed as an argument or loaded from `),Xye=n(c8,"CODE",{});var Ira=s(Xye);Eit=r(Ira,"pretrained_model_name_or_path"),Ira.forEach(t),Cit=r(c8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zye=n(c8,"CODE",{});var Nra=s(zye);wit=r(Nra,"pretrained_model_name_or_path"),Nra.forEach(t),Ait=r(c8,":"),c8.forEach(t),Lit=i(Ri),Xe=n(Ri,"UL",{});var Co=s(Xe);p7=n(Co,"LI",{});var tUe=s(p7);Wye=n(tUe,"STRONG",{});var qra=s(Wye);yit=r(qra,"albert"),qra.forEach(t),xit=r(tUe," \u2014 "),wae=n(tUe,"A",{href:!0});var jra=s(wae);$it=r(jra,"FlaxAlbertForTokenClassification"),jra.forEach(t),kit=r(tUe," (ALBERT model)"),tUe.forEach(t),Sit=i(Co),_7=n(Co,"LI",{});var aUe=s(_7);Qye=n(aUe,"STRONG",{});var Dra=s(Qye);Rit=r(Dra,"bert"),Dra.forEach(t),Pit=r(aUe," \u2014 "),Aae=n(aUe,"A",{href:!0});var Gra=s(Aae);Bit=r(Gra,"FlaxBertForTokenClassification"),Gra.forEach(t),Iit=r(aUe," (BERT model)"),aUe.forEach(t),Nit=i(Co),b7=n(Co,"LI",{});var nUe=s(b7);Uye=n(nUe,"STRONG",{});var Ora=s(Uye);qit=r(Ora,"big_bird"),Ora.forEach(t),jit=r(nUe," \u2014 "),Lae=n(nUe,"A",{href:!0});var Vra=s(Lae);Dit=r(Vra,"FlaxBigBirdForTokenClassification"),Vra.forEach(t),Git=r(nUe," (BigBird model)"),nUe.forEach(t),Oit=i(Co),v7=n(Co,"LI",{});var sUe=s(v7);Hye=n(sUe,"STRONG",{});var Xra=s(Hye);Vit=r(Xra,"distilbert"),Xra.forEach(t),Xit=r(sUe," \u2014 "),yae=n(sUe,"A",{href:!0});var zra=s(yae);zit=r(zra,"FlaxDistilBertForTokenClassification"),zra.forEach(t),Wit=r(sUe," (DistilBERT model)"),sUe.forEach(t),Qit=i(Co),F7=n(Co,"LI",{});var lUe=s(F7);Jye=n(lUe,"STRONG",{});var Wra=s(Jye);Uit=r(Wra,"electra"),Wra.forEach(t),Hit=r(lUe," \u2014 "),xae=n(lUe,"A",{href:!0});var Qra=s(xae);Jit=r(Qra,"FlaxElectraForTokenClassification"),Qra.forEach(t),Yit=r(lUe," (ELECTRA model)"),lUe.forEach(t),Kit=i(Co),T7=n(Co,"LI",{});var iUe=s(T7);Yye=n(iUe,"STRONG",{});var Ura=s(Yye);Zit=r(Ura,"roberta"),Ura.forEach(t),edt=r(iUe," \u2014 "),$ae=n(iUe,"A",{href:!0});var Hra=s($ae);odt=r(Hra,"FlaxRobertaForTokenClassification"),Hra.forEach(t),rdt=r(iUe," (RoBERTa model)"),iUe.forEach(t),tdt=i(Co),M7=n(Co,"LI",{});var dUe=s(M7);Kye=n(dUe,"STRONG",{});var Jra=s(Kye);adt=r(Jra,"roformer"),Jra.forEach(t),ndt=r(dUe," \u2014 "),kae=n(dUe,"A",{href:!0});var Yra=s(kae);sdt=r(Yra,"FlaxRoFormerForTokenClassification"),Yra.forEach(t),ldt=r(dUe," (RoFormer model)"),dUe.forEach(t),idt=i(Co),E7=n(Co,"LI",{});var cUe=s(E7);Zye=n(cUe,"STRONG",{});var Kra=s(Zye);ddt=r(Kra,"xlm-roberta"),Kra.forEach(t),cdt=r(cUe," \u2014 "),Sae=n(cUe,"A",{href:!0});var Zra=s(Sae);mdt=r(Zra,"FlaxXLMRobertaForTokenClassification"),Zra.forEach(t),fdt=r(cUe," (XLM-RoBERTa model)"),cUe.forEach(t),Co.forEach(t),gdt=i(Ri),T(C7.$$.fragment,Ri),Ri.forEach(t),Si.forEach(t),CJe=i(m),jm=n(m,"H2",{class:!0});var NKe=s(jm);w7=n(NKe,"A",{id:!0,class:!0,href:!0});var eta=s(w7);e8e=n(eta,"SPAN",{});var ota=s(e8e);T(MS.$$.fragment,ota),ota.forEach(t),eta.forEach(t),hdt=i(NKe),o8e=n(NKe,"SPAN",{});var rta=s(o8e);udt=r(rta,"FlaxAutoModelForMultipleChoice"),rta.forEach(t),NKe.forEach(t),wJe=i(m),Lr=n(m,"DIV",{class:!0});var Pi=s(Lr);T(ES.$$.fragment,Pi),pdt=i(Pi),Dm=n(Pi,"P",{});var Qse=s(Dm);_dt=r(Qse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Rae=n(Qse,"A",{href:!0});var tta=s(Rae);bdt=r(tta,"from_pretrained()"),tta.forEach(t),vdt=r(Qse," class method or the "),Pae=n(Qse,"A",{href:!0});var ata=s(Pae);Fdt=r(ata,"from_config()"),ata.forEach(t),Tdt=r(Qse,` class
method.`),Qse.forEach(t),Mdt=i(Pi),CS=n(Pi,"P",{});var qKe=s(CS);Edt=r(qKe,"This class cannot be instantiated directly using "),r8e=n(qKe,"CODE",{});var nta=s(r8e);Cdt=r(nta,"__init__()"),nta.forEach(t),wdt=r(qKe," (throws an error)."),qKe.forEach(t),Adt=i(Pi),la=n(Pi,"DIV",{class:!0});var m8=s(la);T(wS.$$.fragment,m8),Ldt=i(m8),t8e=n(m8,"P",{});var sta=s(t8e);ydt=r(sta,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),sta.forEach(t),xdt=i(m8),Gm=n(m8,"P",{});var Use=s(Gm);$dt=r(Use,`Note:
Loading a model from its configuration file does `),a8e=n(Use,"STRONG",{});var lta=s(a8e);kdt=r(lta,"not"),lta.forEach(t),Sdt=r(Use,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bae=n(Use,"A",{href:!0});var ita=s(Bae);Rdt=r(ita,"from_pretrained()"),ita.forEach(t),Pdt=r(Use," to load the model weights."),Use.forEach(t),Bdt=i(m8),T(A7.$$.fragment,m8),m8.forEach(t),Idt=i(Pi),rt=n(Pi,"DIV",{class:!0});var Bi=s(rt);T(AS.$$.fragment,Bi),Ndt=i(Bi),n8e=n(Bi,"P",{});var dta=s(n8e);qdt=r(dta,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),dta.forEach(t),jdt=i(Bi),jn=n(Bi,"P",{});var f8=s(jn);Ddt=r(f8,"The model class to instantiate is selected based on the "),s8e=n(f8,"CODE",{});var cta=s(s8e);Gdt=r(cta,"model_type"),cta.forEach(t),Odt=r(f8,` property of the config object (either
passed as an argument or loaded from `),l8e=n(f8,"CODE",{});var mta=s(l8e);Vdt=r(mta,"pretrained_model_name_or_path"),mta.forEach(t),Xdt=r(f8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i8e=n(f8,"CODE",{});var fta=s(i8e);zdt=r(fta,"pretrained_model_name_or_path"),fta.forEach(t),Wdt=r(f8,":"),f8.forEach(t),Qdt=i(Bi),ze=n(Bi,"UL",{});var wo=s(ze);L7=n(wo,"LI",{});var mUe=s(L7);d8e=n(mUe,"STRONG",{});var gta=s(d8e);Udt=r(gta,"albert"),gta.forEach(t),Hdt=r(mUe," \u2014 "),Iae=n(mUe,"A",{href:!0});var hta=s(Iae);Jdt=r(hta,"FlaxAlbertForMultipleChoice"),hta.forEach(t),Ydt=r(mUe," (ALBERT model)"),mUe.forEach(t),Kdt=i(wo),y7=n(wo,"LI",{});var fUe=s(y7);c8e=n(fUe,"STRONG",{});var uta=s(c8e);Zdt=r(uta,"bert"),uta.forEach(t),ect=r(fUe," \u2014 "),Nae=n(fUe,"A",{href:!0});var pta=s(Nae);oct=r(pta,"FlaxBertForMultipleChoice"),pta.forEach(t),rct=r(fUe," (BERT model)"),fUe.forEach(t),tct=i(wo),x7=n(wo,"LI",{});var gUe=s(x7);m8e=n(gUe,"STRONG",{});var _ta=s(m8e);act=r(_ta,"big_bird"),_ta.forEach(t),nct=r(gUe," \u2014 "),qae=n(gUe,"A",{href:!0});var bta=s(qae);sct=r(bta,"FlaxBigBirdForMultipleChoice"),bta.forEach(t),lct=r(gUe," (BigBird model)"),gUe.forEach(t),ict=i(wo),$7=n(wo,"LI",{});var hUe=s($7);f8e=n(hUe,"STRONG",{});var vta=s(f8e);dct=r(vta,"distilbert"),vta.forEach(t),cct=r(hUe," \u2014 "),jae=n(hUe,"A",{href:!0});var Fta=s(jae);mct=r(Fta,"FlaxDistilBertForMultipleChoice"),Fta.forEach(t),fct=r(hUe," (DistilBERT model)"),hUe.forEach(t),gct=i(wo),k7=n(wo,"LI",{});var uUe=s(k7);g8e=n(uUe,"STRONG",{});var Tta=s(g8e);hct=r(Tta,"electra"),Tta.forEach(t),uct=r(uUe," \u2014 "),Dae=n(uUe,"A",{href:!0});var Mta=s(Dae);pct=r(Mta,"FlaxElectraForMultipleChoice"),Mta.forEach(t),_ct=r(uUe," (ELECTRA model)"),uUe.forEach(t),bct=i(wo),S7=n(wo,"LI",{});var pUe=s(S7);h8e=n(pUe,"STRONG",{});var Eta=s(h8e);vct=r(Eta,"roberta"),Eta.forEach(t),Fct=r(pUe," \u2014 "),Gae=n(pUe,"A",{href:!0});var Cta=s(Gae);Tct=r(Cta,"FlaxRobertaForMultipleChoice"),Cta.forEach(t),Mct=r(pUe," (RoBERTa model)"),pUe.forEach(t),Ect=i(wo),R7=n(wo,"LI",{});var _Ue=s(R7);u8e=n(_Ue,"STRONG",{});var wta=s(u8e);Cct=r(wta,"roformer"),wta.forEach(t),wct=r(_Ue," \u2014 "),Oae=n(_Ue,"A",{href:!0});var Ata=s(Oae);Act=r(Ata,"FlaxRoFormerForMultipleChoice"),Ata.forEach(t),Lct=r(_Ue," (RoFormer model)"),_Ue.forEach(t),yct=i(wo),P7=n(wo,"LI",{});var bUe=s(P7);p8e=n(bUe,"STRONG",{});var Lta=s(p8e);xct=r(Lta,"xlm-roberta"),Lta.forEach(t),$ct=r(bUe," \u2014 "),Vae=n(bUe,"A",{href:!0});var yta=s(Vae);kct=r(yta,"FlaxXLMRobertaForMultipleChoice"),yta.forEach(t),Sct=r(bUe," (XLM-RoBERTa model)"),bUe.forEach(t),wo.forEach(t),Rct=i(Bi),T(B7.$$.fragment,Bi),Bi.forEach(t),Pi.forEach(t),AJe=i(m),Om=n(m,"H2",{class:!0});var jKe=s(Om);I7=n(jKe,"A",{id:!0,class:!0,href:!0});var xta=s(I7);_8e=n(xta,"SPAN",{});var $ta=s(_8e);T(LS.$$.fragment,$ta),$ta.forEach(t),xta.forEach(t),Pct=i(jKe),b8e=n(jKe,"SPAN",{});var kta=s(b8e);Bct=r(kta,"FlaxAutoModelForNextSentencePrediction"),kta.forEach(t),jKe.forEach(t),LJe=i(m),yr=n(m,"DIV",{class:!0});var Ii=s(yr);T(yS.$$.fragment,Ii),Ict=i(Ii),Vm=n(Ii,"P",{});var Hse=s(Vm);Nct=r(Hse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Xae=n(Hse,"A",{href:!0});var Sta=s(Xae);qct=r(Sta,"from_pretrained()"),Sta.forEach(t),jct=r(Hse," class method or the "),zae=n(Hse,"A",{href:!0});var Rta=s(zae);Dct=r(Rta,"from_config()"),Rta.forEach(t),Gct=r(Hse,` class
method.`),Hse.forEach(t),Oct=i(Ii),xS=n(Ii,"P",{});var DKe=s(xS);Vct=r(DKe,"This class cannot be instantiated directly using "),v8e=n(DKe,"CODE",{});var Pta=s(v8e);Xct=r(Pta,"__init__()"),Pta.forEach(t),zct=r(DKe," (throws an error)."),DKe.forEach(t),Wct=i(Ii),ia=n(Ii,"DIV",{class:!0});var g8=s(ia);T($S.$$.fragment,g8),Qct=i(g8),F8e=n(g8,"P",{});var Bta=s(F8e);Uct=r(Bta,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Bta.forEach(t),Hct=i(g8),Xm=n(g8,"P",{});var Jse=s(Xm);Jct=r(Jse,`Note:
Loading a model from its configuration file does `),T8e=n(Jse,"STRONG",{});var Ita=s(T8e);Yct=r(Ita,"not"),Ita.forEach(t),Kct=r(Jse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wae=n(Jse,"A",{href:!0});var Nta=s(Wae);Zct=r(Nta,"from_pretrained()"),Nta.forEach(t),emt=r(Jse," to load the model weights."),Jse.forEach(t),omt=i(g8),T(N7.$$.fragment,g8),g8.forEach(t),rmt=i(Ii),tt=n(Ii,"DIV",{class:!0});var Ni=s(tt);T(kS.$$.fragment,Ni),tmt=i(Ni),M8e=n(Ni,"P",{});var qta=s(M8e);amt=r(qta,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),qta.forEach(t),nmt=i(Ni),Dn=n(Ni,"P",{});var h8=s(Dn);smt=r(h8,"The model class to instantiate is selected based on the "),E8e=n(h8,"CODE",{});var jta=s(E8e);lmt=r(jta,"model_type"),jta.forEach(t),imt=r(h8,` property of the config object (either
passed as an argument or loaded from `),C8e=n(h8,"CODE",{});var Dta=s(C8e);dmt=r(Dta,"pretrained_model_name_or_path"),Dta.forEach(t),cmt=r(h8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w8e=n(h8,"CODE",{});var Gta=s(w8e);mmt=r(Gta,"pretrained_model_name_or_path"),Gta.forEach(t),fmt=r(h8,":"),h8.forEach(t),gmt=i(Ni),A8e=n(Ni,"UL",{});var Ota=s(A8e);q7=n(Ota,"LI",{});var vUe=s(q7);L8e=n(vUe,"STRONG",{});var Vta=s(L8e);hmt=r(Vta,"bert"),Vta.forEach(t),umt=r(vUe," \u2014 "),Qae=n(vUe,"A",{href:!0});var Xta=s(Qae);pmt=r(Xta,"FlaxBertForNextSentencePrediction"),Xta.forEach(t),_mt=r(vUe," (BERT model)"),vUe.forEach(t),Ota.forEach(t),bmt=i(Ni),T(j7.$$.fragment,Ni),Ni.forEach(t),Ii.forEach(t),yJe=i(m),zm=n(m,"H2",{class:!0});var GKe=s(zm);D7=n(GKe,"A",{id:!0,class:!0,href:!0});var zta=s(D7);y8e=n(zta,"SPAN",{});var Wta=s(y8e);T(SS.$$.fragment,Wta),Wta.forEach(t),zta.forEach(t),vmt=i(GKe),x8e=n(GKe,"SPAN",{});var Qta=s(x8e);Fmt=r(Qta,"FlaxAutoModelForImageClassification"),Qta.forEach(t),GKe.forEach(t),xJe=i(m),xr=n(m,"DIV",{class:!0});var qi=s(xr);T(RS.$$.fragment,qi),Tmt=i(qi),Wm=n(qi,"P",{});var Yse=s(Wm);Mmt=r(Yse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Uae=n(Yse,"A",{href:!0});var Uta=s(Uae);Emt=r(Uta,"from_pretrained()"),Uta.forEach(t),Cmt=r(Yse," class method or the "),Hae=n(Yse,"A",{href:!0});var Hta=s(Hae);wmt=r(Hta,"from_config()"),Hta.forEach(t),Amt=r(Yse,` class
method.`),Yse.forEach(t),Lmt=i(qi),PS=n(qi,"P",{});var OKe=s(PS);ymt=r(OKe,"This class cannot be instantiated directly using "),$8e=n(OKe,"CODE",{});var Jta=s($8e);xmt=r(Jta,"__init__()"),Jta.forEach(t),$mt=r(OKe," (throws an error)."),OKe.forEach(t),kmt=i(qi),da=n(qi,"DIV",{class:!0});var u8=s(da);T(BS.$$.fragment,u8),Smt=i(u8),k8e=n(u8,"P",{});var Yta=s(k8e);Rmt=r(Yta,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Yta.forEach(t),Pmt=i(u8),Qm=n(u8,"P",{});var Kse=s(Qm);Bmt=r(Kse,`Note:
Loading a model from its configuration file does `),S8e=n(Kse,"STRONG",{});var Kta=s(S8e);Imt=r(Kta,"not"),Kta.forEach(t),Nmt=r(Kse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jae=n(Kse,"A",{href:!0});var Zta=s(Jae);qmt=r(Zta,"from_pretrained()"),Zta.forEach(t),jmt=r(Kse," to load the model weights."),Kse.forEach(t),Dmt=i(u8),T(G7.$$.fragment,u8),u8.forEach(t),Gmt=i(qi),at=n(qi,"DIV",{class:!0});var ji=s(at);T(IS.$$.fragment,ji),Omt=i(ji),R8e=n(ji,"P",{});var eaa=s(R8e);Vmt=r(eaa,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),eaa.forEach(t),Xmt=i(ji),Gn=n(ji,"P",{});var p8=s(Gn);zmt=r(p8,"The model class to instantiate is selected based on the "),P8e=n(p8,"CODE",{});var oaa=s(P8e);Wmt=r(oaa,"model_type"),oaa.forEach(t),Qmt=r(p8,` property of the config object (either
passed as an argument or loaded from `),B8e=n(p8,"CODE",{});var raa=s(B8e);Umt=r(raa,"pretrained_model_name_or_path"),raa.forEach(t),Hmt=r(p8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I8e=n(p8,"CODE",{});var taa=s(I8e);Jmt=r(taa,"pretrained_model_name_or_path"),taa.forEach(t),Ymt=r(p8,":"),p8.forEach(t),Kmt=i(ji),NS=n(ji,"UL",{});var VKe=s(NS);O7=n(VKe,"LI",{});var FUe=s(O7);N8e=n(FUe,"STRONG",{});var aaa=s(N8e);Zmt=r(aaa,"beit"),aaa.forEach(t),eft=r(FUe," \u2014 "),Yae=n(FUe,"A",{href:!0});var naa=s(Yae);oft=r(naa,"FlaxBeitForImageClassification"),naa.forEach(t),rft=r(FUe," (BEiT model)"),FUe.forEach(t),tft=i(VKe),V7=n(VKe,"LI",{});var TUe=s(V7);q8e=n(TUe,"STRONG",{});var saa=s(q8e);aft=r(saa,"vit"),saa.forEach(t),nft=r(TUe," \u2014 "),Kae=n(TUe,"A",{href:!0});var laa=s(Kae);sft=r(laa,"FlaxViTForImageClassification"),laa.forEach(t),lft=r(TUe," (ViT model)"),TUe.forEach(t),VKe.forEach(t),ift=i(ji),T(X7.$$.fragment,ji),ji.forEach(t),qi.forEach(t),$Je=i(m),Um=n(m,"H2",{class:!0});var XKe=s(Um);z7=n(XKe,"A",{id:!0,class:!0,href:!0});var iaa=s(z7);j8e=n(iaa,"SPAN",{});var daa=s(j8e);T(qS.$$.fragment,daa),daa.forEach(t),iaa.forEach(t),dft=i(XKe),D8e=n(XKe,"SPAN",{});var caa=s(D8e);cft=r(caa,"FlaxAutoModelForVision2Seq"),caa.forEach(t),XKe.forEach(t),kJe=i(m),$r=n(m,"DIV",{class:!0});var Di=s($r);T(jS.$$.fragment,Di),mft=i(Di),Hm=n(Di,"P",{});var Zse=s(Hm);fft=r(Zse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Zae=n(Zse,"A",{href:!0});var maa=s(Zae);gft=r(maa,"from_pretrained()"),maa.forEach(t),hft=r(Zse," class method or the "),ene=n(Zse,"A",{href:!0});var faa=s(ene);uft=r(faa,"from_config()"),faa.forEach(t),pft=r(Zse,` class
method.`),Zse.forEach(t),_ft=i(Di),DS=n(Di,"P",{});var zKe=s(DS);bft=r(zKe,"This class cannot be instantiated directly using "),G8e=n(zKe,"CODE",{});var gaa=s(G8e);vft=r(gaa,"__init__()"),gaa.forEach(t),Fft=r(zKe," (throws an error)."),zKe.forEach(t),Tft=i(Di),ca=n(Di,"DIV",{class:!0});var _8=s(ca);T(GS.$$.fragment,_8),Mft=i(_8),O8e=n(_8,"P",{});var haa=s(O8e);Eft=r(haa,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),haa.forEach(t),Cft=i(_8),Jm=n(_8,"P",{});var ele=s(Jm);wft=r(ele,`Note:
Loading a model from its configuration file does `),V8e=n(ele,"STRONG",{});var uaa=s(V8e);Aft=r(uaa,"not"),uaa.forEach(t),Lft=r(ele,` load the model weights. It only affects the
model\u2019s configuration. Use `),one=n(ele,"A",{href:!0});var paa=s(one);yft=r(paa,"from_pretrained()"),paa.forEach(t),xft=r(ele," to load the model weights."),ele.forEach(t),$ft=i(_8),T(W7.$$.fragment,_8),_8.forEach(t),kft=i(Di),nt=n(Di,"DIV",{class:!0});var Gi=s(nt);T(OS.$$.fragment,Gi),Sft=i(Gi),X8e=n(Gi,"P",{});var _aa=s(X8e);Rft=r(_aa,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),_aa.forEach(t),Pft=i(Gi),On=n(Gi,"P",{});var b8=s(On);Bft=r(b8,"The model class to instantiate is selected based on the "),z8e=n(b8,"CODE",{});var baa=s(z8e);Ift=r(baa,"model_type"),baa.forEach(t),Nft=r(b8,` property of the config object (either
passed as an argument or loaded from `),W8e=n(b8,"CODE",{});var vaa=s(W8e);qft=r(vaa,"pretrained_model_name_or_path"),vaa.forEach(t),jft=r(b8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q8e=n(b8,"CODE",{});var Faa=s(Q8e);Dft=r(Faa,"pretrained_model_name_or_path"),Faa.forEach(t),Gft=r(b8,":"),b8.forEach(t),Oft=i(Gi),U8e=n(Gi,"UL",{});var Taa=s(U8e);Q7=n(Taa,"LI",{});var MUe=s(Q7);H8e=n(MUe,"STRONG",{});var Maa=s(H8e);Vft=r(Maa,"vision-encoder-decoder"),Maa.forEach(t),Xft=r(MUe," \u2014 "),rne=n(MUe,"A",{href:!0});var Eaa=s(rne);zft=r(Eaa,"FlaxVisionEncoderDecoderModel"),Eaa.forEach(t),Wft=r(MUe," (Vision Encoder decoder model)"),MUe.forEach(t),Taa.forEach(t),Qft=i(Gi),T(U7.$$.fragment,Gi),Gi.forEach(t),Di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Rsa)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(Xn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(Wn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c(Qn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(Ui,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(af,"id","extending-the-auto-classes"),c(af,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(af,"href","#extending-the-auto-classes"),c(Hi,"class","relative group"),c(sf,"id","transformers.AutoConfig"),c(sf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sf,"href","#transformers.AutoConfig"),c(Ji,"class","relative group"),c(bP,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(vP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(FP,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(TP,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(MP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(EP,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(CP,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(wP,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(AP,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(LP,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(yP,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig"),c(xP,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c($P,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(kP,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(SP,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig"),c(RP,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(PP,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(BP,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(IP,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig"),c(NP,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(qP,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(jP,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(DP,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(GP,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(OP,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(VP,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(XP,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(zP,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(WP,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinConfig"),c(QP,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(UP,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(HP,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(JP,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(YP,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(KP,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),c(ZP,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(eB,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(oB,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(rB,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(tB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(aB,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(nB,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(sB,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(lB,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig"),c(iB,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(dB,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(cB,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(mB,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(fB,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(gB,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(hB,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(uB,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig"),c(pB,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(_B,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config"),c(bB,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(vB,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(FB,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(TB,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(MB,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(EB,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(CB,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig"),c(wB,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(AB,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(LB,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(yB,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(xB,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c($B,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig"),c(kB,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig"),c(SB,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(RB,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(PB,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),c(BB,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig"),c(IB,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(NB,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(qB,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(jB,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(DB,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(GB,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(OB,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(VB,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(XB,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(zB,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(WB,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(QB,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(UB,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(HB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(JB,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(YB,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(KB,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(ZB,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(eI,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(oI,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(rI,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(tI,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(aI,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(nI,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(sI,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config"),c(lI,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(iI,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(dI,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(cI,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(mI,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(fI,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(gI,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(hI,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(uI,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig"),c(pI,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(_I,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(bI,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(vI,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(FI,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(TI,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(MI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(EI,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(CI,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(wI,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(AI,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(LI,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(yI,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(xI,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c($I,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(kI,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(SI,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ch,"id","transformers.AutoTokenizer"),c(Ch,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ch,"href","#transformers.AutoTokenizer"),c(Ki,"class","relative group"),c(RI,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(PI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(BI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(II,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(NI,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(qI,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(jI,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(DI,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(GI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(OI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(VI,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(XI,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(zI,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(WI,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(QI,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(UI,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(HI,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(JI,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(YI,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(KI,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(ZI,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(eN,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(oN,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(rN,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(tN,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(aN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(nN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(sN,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(lN,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(iN,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(dN,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(cN,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(mN,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(fN,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(gN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(hN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(uN,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(pN,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(_N,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(bN,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(vN,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(FN,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(TN,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(MN,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(EN,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(CN,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(wN,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(AN,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(LN,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(yN,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(xN,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c($N,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(kN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(SN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(RN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(PN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(BN,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(IN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(NN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(qN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(jN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(DN,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(GN,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(ON,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(VN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(XN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(zN,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(WN,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(QN,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(UN,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(HN,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(JN,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(YN,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(KN,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(ZN,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(eq,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(oq,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(rq,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(tq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(aq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(nq,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(sq,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(lq,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(iq,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(dq,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(cq,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(mq,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(fq,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(gq,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(hq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(uq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(pq,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(_q,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(bq,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(vq,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(Fq,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(Tq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(Mq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(Eq,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizer"),c(Cq,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(wq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(Aq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(Lq,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizer"),c(yq,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(xq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c($q,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(kq,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(Sq,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(Rq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(Pq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(Bq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(Iq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Nq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(qq,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(jq,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(Dq,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(Gq,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(Oq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(Vq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(Xq,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(zq,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(Wq,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(Qq,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(Uq,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(Hq,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(Jq,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(Yq,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(Kq,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(Zq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(ej,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(oj,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(rj,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(tj,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(aj,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(nj,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(sj,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(lj,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(ij,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(dj,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(cj,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(mj,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(fj,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(gj,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(hj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(uj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(pj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(_j,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(bj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(vj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(Fj,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(Tj,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(Mj,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(Ej,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(Cj,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(wj,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(Aj,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(Lj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(yj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(xj,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c($j,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(kj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(Sj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(su,"id","transformers.AutoFeatureExtractor"),c(su,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(su,"href","#transformers.AutoFeatureExtractor"),c(Zi,"class","relative group"),c(Rj,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(Pj,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(Bj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Ij,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Nj,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(qj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(jj,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(Dj,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(Gj,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(Oj,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutFeatureExtractor"),c(Vj,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(Xj,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(zj,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(Wj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Qj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Uj,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(Hj,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(Jj,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(Yj,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(Kj,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(Zj,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(eD,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(oD,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),c(rD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(tD,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(aD,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(nD,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(sD,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(lD,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(iD,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(dD,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(cD,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(mD,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEFeatureExtractor"),c(fD,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(gD,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(hD,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(uD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(pD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(_D,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uu,"id","transformers.AutoProcessor"),c(Uu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uu,"href","#transformers.AutoProcessor"),c(ed,"class","relative group"),c(bD,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(vD,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(FD,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutProcessor"),c(TD,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaProcessor"),c(MD,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(ED,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(CD,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(wD,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(AD,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTProcessor"),c(LD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(yD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(xD,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c($D,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(kD,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(SD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(RD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(PD,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(BD,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(ID,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ND,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_p,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bp,"id","transformers.AutoModel"),c(bp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bp,"href","#transformers.AutoModel"),c(rd,"class","relative group"),c(jD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(VD,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(XD,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(zD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(WD,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(QD,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(UD,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(HD,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(JD,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(YD,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel"),c(KD,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(ZD,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(eG,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(oG,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel"),c(rG,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(tG,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(aG,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(nG,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel"),c(sG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(lG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(iG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(dG,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(cG,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(mG,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(fG,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(gG,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(hG,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(uG,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinModel"),c(pG,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(_G,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(bG,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(vG,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(FG,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),c(TG,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(MG,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(EG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(CG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(wG,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(AG,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(LG,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(yG,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(xG,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c($G,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel"),c(kG,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(SG,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c(RG,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(PG,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(BG,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(IG,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(NG,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(qG,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitModel"),c(jG,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(DG,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model"),c(GG,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(OG,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(VG,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(XG,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(zG,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(WG,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(QG,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel"),c(UG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(HG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(JG,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel"),c(YG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(KG,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(ZG,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel"),c(eO,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel"),c(oO,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(rO,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(tO,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(aO,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),c(nO,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel"),c(sO,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(lO,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(iO,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(dO,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(cO,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(mO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(fO,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(gO,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(hO,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(uO,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(pO,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(_O,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(bO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(vO,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(FO,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(TO,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(MO,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(EO,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(CO,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(wO,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(AO,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model"),c(LO,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(yO,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(xO,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c($O,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(kO,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(SO,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(RO,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(PO,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEModel"),c(BO,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(IO,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(NO,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(qO,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(jO,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(DO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(GO,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(OO,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(VO,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(XO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(zO,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(WO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(QO,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(UO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(HO,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(JO,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x2,"id","transformers.AutoModelForPreTraining"),c(x2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x2,"href","#transformers.AutoModelForPreTraining"),c(nd,"class","relative group"),c(YO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eV,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(oV,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(rV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(tV,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(aV,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(nV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(sV,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(lV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(iV,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(dV,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(cV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(mV,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(fV,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(gV,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),c(hV,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(uV,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(pV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(_V,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(bV,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(vV,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(FV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(TV,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(MV,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(EV,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(CV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(wV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(AV,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(LV,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(yV,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(xV,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c($V,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(kV,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(SV,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(RV,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(PV,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(BV,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(IV,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(NV,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(qV,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForPreTraining"),c(jV,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(DV,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(GV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(OV,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(VV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(XV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(zV,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(WV,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ab,"id","transformers.AutoModelForCausalLM"),c(Ab,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ab,"href","#transformers.AutoModelForCausalLM"),c(id,"class","relative group"),c(QV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JV,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(YV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(KV,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(ZV,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(eX,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(oX,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(rX,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(tX,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(aX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(nX,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(sX,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(lX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(iX,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(dX,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(cX,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(mX,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(fX,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(gX,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(hX,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(uX,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(pX,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM"),c(_X,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(bX,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),c(vX,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(FX,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(TX,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(MX,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(EX,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(CX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(wX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(AX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(LX,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(yX,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(xX,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c($X,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(kX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(SX,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(RX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(PX,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(BX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pv,"id","transformers.AutoModelForMaskedLM"),c(pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pv,"href","#transformers.AutoModelForMaskedLM"),c(md,"class","relative group"),c(IX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jX,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(DX,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(GX,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(OX,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(VX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(XX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(zX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(WX,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(QX,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(UX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(HX,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(JX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(YX,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(KX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(ZX,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(ez,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(oz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(rz,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(tz,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(az,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(nz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(sz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(lz,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(iz,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(dz,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(cz,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(mz,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(fz,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(gz,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(hz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(uz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(pz,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(_z,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(bz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(vz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Fz,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Tz,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a1,"id","transformers.AutoModelForSeq2SeqLM"),c(a1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a1,"href","#transformers.AutoModelForSeq2SeqLM"),c(hd,"class","relative group"),c(Mz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ez,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wz,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Az,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(Lz,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(yz,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(xz,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c($z,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(kz,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Sz,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(Rz,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Pz,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(Bz,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Iz,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(Nz,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(qz,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(jz,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(Dz,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(Gz,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(Oz,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Vz,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L1,"id","transformers.AutoModelForSequenceClassification"),c(L1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L1,"href","#transformers.AutoModelForSequenceClassification"),c(_d,"class","relative group"),c(Xz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Wz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qz,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(Uz,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(Hz,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(Jz,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(Yz,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(Kz,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(Zz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(eW,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(oW,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(rW,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(tW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(aW,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(nW,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(sW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(lW,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(iW,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(dW,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(cW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(mW,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(fW,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(gW,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(hW,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(uW,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(pW,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(_W,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(bW,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(vW,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(FW,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForSequenceClassification"),c(TW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(MW,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(EW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(CW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(wW,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(AW,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(LW,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(yW,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(xW,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification"),c($W,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(kW,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(SW,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(RW,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(PW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(BW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(IW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(NW,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(qW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(jW,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(DW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(GW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(OW,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(VW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(XW,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xF,"id","transformers.AutoModelForMultipleChoice"),c(xF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xF,"href","#transformers.AutoModelForMultipleChoice"),c(Fd,"class","relative group"),c(zW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UW,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(HW,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(JW,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(YW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(KW,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(ZW,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(eQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(oQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(rQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(tQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(aQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(nQ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(sQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(lQ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(iQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(dQ,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMultipleChoice"),c(cQ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(mQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(fQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(gQ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(hQ,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(uQ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(pQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(_Q,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(bQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(vQ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(FQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(TQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(MQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(EQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(CQ,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cT,"id","transformers.AutoModelForNextSentencePrediction"),c(cT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cT,"href","#transformers.AutoModelForNextSentencePrediction"),c(Ed,"class","relative group"),c(wQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(xQ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c($Q,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(kQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(SQ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(RQ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FT,"id","transformers.AutoModelForTokenClassification"),c(FT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FT,"href","#transformers.AutoModelForTokenClassification"),c(Ad,"class","relative group"),c(PQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(qQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(jQ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(DQ,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(GQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(OQ,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(VQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(XQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(zQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(WQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(QQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(UQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(HQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(JQ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(YQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(KQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(ZQ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(eU,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(oU,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(rU,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(tU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(aU,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForTokenClassification"),c(nU,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(sU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(lU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(iU,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(dU,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(cU,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(mU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(fU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(gU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(hU,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(uU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(pU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(_U,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(bU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(vU,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lM,"id","transformers.AutoModelForQuestionAnswering"),c(lM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lM,"href","#transformers.AutoModelForQuestionAnswering"),c(xd,"class","relative group"),c(FU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EU,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(CU,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(wU,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(AU,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(LU,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(yU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(xU,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c($U,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(kU,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(SU,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(RU,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(PU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(BU,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(IU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(NU,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(qU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(jU,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(DU,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(GU,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(OU,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(VU,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(XU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(zU,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForQuestionAnswering"),c(WU,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(QU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(UU,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(HU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(JU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(YU,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(KU,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(ZU,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(eH,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(oH,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(rH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(tH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(aH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(nH,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(sH,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(lH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(iH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(dH,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(cH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(mH,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eE,"id","transformers.AutoModelForTableQuestionAnswering"),c(eE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eE,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Sd,"class","relative group"),c(fH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uH,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nE,"id","transformers.AutoModelForImageClassification"),c(nE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nE,"href","#transformers.AutoModelForImageClassification"),c(Bd,"class","relative group"),c(pH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_H,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vH,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(FH,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(TH,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification"),c(MH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(EH,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(CH,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(wH,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(AH,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification"),c(LH,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(yH,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(xH,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c($H,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(kH,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(SH,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(RH,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(PH,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(BH,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(IH,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(NH,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),c(qH,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(jH,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EE,"id","transformers.AutoModelForVideoClassification"),c(EE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EE,"href","#transformers.AutoModelForVideoClassification"),c(qd,"class","relative group"),c(DH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VH,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForVideoClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yE,"id","transformers.AutoModelForVision2Seq"),c(yE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yE,"href","#transformers.AutoModelForVision2Seq"),c(Gd,"class","relative group"),c(XH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QH,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RE,"id","transformers.AutoModelForVisualQuestionAnswering"),c(RE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RE,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Xd,"class","relative group"),c(UH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YH,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qE,"id","transformers.AutoModelForAudioClassification"),c(qE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qE,"href","#transformers.AutoModelForAudioClassification"),c(Qd,"class","relative group"),c(KH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oJ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(rJ,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(tJ,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(aJ,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(nJ,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(sJ,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(lJ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(iJ,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(dJ,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YE,"id","transformers.AutoModelForAudioFrameClassification"),c(YE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YE,"href","#transformers.AutoModelForAudioFrameClassification"),c(Jd,"class","relative group"),c(cJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gJ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(hJ,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(uJ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(pJ,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(_J,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s4,"id","transformers.AutoModelForCTC"),c(s4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s4,"href","#transformers.AutoModelForCTC"),c(Zd,"class","relative group"),c(bJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TJ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(MJ,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(EJ,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC"),c(CJ,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(wJ,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(AJ,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(LJ,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(yJ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(xJ,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c($J,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F4,"id","transformers.AutoModelForSpeechSeq2Seq"),c(F4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F4,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(rc,"class","relative group"),c(kJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PJ,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(BJ,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A4,"id","transformers.AutoModelForAudioXVector"),c(A4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A4,"href","#transformers.AutoModelForAudioXVector"),c(nc,"class","relative group"),c(IJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jJ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(DJ,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(GJ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(OJ,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(VJ,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B4,"id","transformers.AutoModelForMaskedImageModeling"),c(B4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B4,"href","#transformers.AutoModelForMaskedImageModeling"),c(ic,"class","relative group"),c(XJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QJ,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(UJ,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(HJ,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),c(JJ,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V4,"id","transformers.AutoModelForObjectDetection"),c(V4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V4,"href","#transformers.AutoModelForObjectDetection"),c(mc,"class","relative group"),c(YJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eY,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(oY,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H4,"id","transformers.AutoModelForImageSegmentation"),c(H4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H4,"href","#transformers.AutoModelForImageSegmentation"),c(hc,"class","relative group"),c(rY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nY,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eC,"id","transformers.AutoModelForSemanticSegmentation"),c(eC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eC,"href","#transformers.AutoModelForSemanticSegmentation"),c(_c,"class","relative group"),c(sY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dY,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(cY,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(mY,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(fY,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(gY,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dC,"id","transformers.AutoModelForInstanceSegmentation"),c(dC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dC,"href","#transformers.AutoModelForInstanceSegmentation"),c(Fc,"class","relative group"),c(hY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_Y,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hC,"id","transformers.TFAutoModel"),c(hC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hC,"href","#transformers.TFAutoModel"),c(Ec,"class","relative group"),c(bY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TY,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(MY,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(EY,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(CY,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(wY,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(AY,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(LY,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(yY,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(xY,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c($Y,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(kY,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(SY,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(RY,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(PY,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel"),c(BY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(IY,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(NY,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(qY,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(jY,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(DY,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(GY,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(OY,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(VY,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(XY,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(zY,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3Model"),c(WY,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(QY,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(UY,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(HY,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(JY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(YY,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(KY,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTModel"),c(ZY,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(eK,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(oK,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(rK,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel"),c(tK,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(aK,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel"),c(nK,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(sK,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel"),c(lK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(iK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(dK,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel"),c(cK,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(mK,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),c(fK,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(gK,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(hK,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(uK,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(pK,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(_K,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(bK,"href","/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMModel"),c(vK,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(FK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(TK,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p3,"id","transformers.TFAutoModelForPreTraining"),c(p3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p3,"href","#transformers.TFAutoModelForPreTraining"),c(Ac,"class","relative group"),c(MK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wK,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(AK,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(LK,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(yK,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(xK,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c($K,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(kK,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(SK,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(RK,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(PK,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(BK,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(IK,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(NK,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(qK,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(jK,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(DK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(GK,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(OK,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(VK,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(XK,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(zK,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(WK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(QK,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O3,"id","transformers.TFAutoModelForCausalLM"),c(O3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O3,"href","#transformers.TFAutoModelForCausalLM"),c(xc,"class","relative group"),c(UK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YK,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(KK,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(ZK,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(eZ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(oZ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(rZ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(tZ,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(aZ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(nZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(sZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(lZ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(iZ,"href","/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMForCausalLM"),c(dZ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(cZ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n5,"id","transformers.TFAutoModelForImageClassification"),c(n5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n5,"href","#transformers.TFAutoModelForImageClassification"),c(Sc,"class","relative group"),c(mZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hZ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(uZ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(pZ,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(_Z,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(bZ,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForImageClassification"),c(vZ,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(FZ,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(TZ,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),c(MZ,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(EZ,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p5,"id","transformers.TFAutoModelForSemanticSegmentation"),c(p5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p5,"href","#transformers.TFAutoModelForSemanticSegmentation"),c(Bc,"class","relative group"),c(CZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LZ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation"),c(yZ,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForSemanticSegmentation"),c(xZ,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M5,"id","transformers.TFAutoModelForMaskedLM"),c(M5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M5,"href","#transformers.TFAutoModelForMaskedLM"),c(jc,"class","relative group"),c($Z,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(PZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(BZ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(IZ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(NZ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(qZ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(jZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(DZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(GZ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(OZ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(VZ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(XZ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(zZ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(WZ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(QZ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(UZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(HZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(JZ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(YZ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(KZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z5,"id","transformers.TFAutoModelForSeq2SeqLM"),c(z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z5,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Oc,"class","relative group"),c(ZZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ree,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(tee,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(aee,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(nee,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(see,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(lee,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(iee,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(dee,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(cee,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(mee,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a0,"id","transformers.TFAutoModelForSequenceClassification"),c(a0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a0,"href","#transformers.TFAutoModelForSequenceClassification"),c(zc,"class","relative group"),c(fee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uee,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(pee,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(_ee,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(bee,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(vee,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(Fee,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(Tee,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(Mee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(Eee,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(Cee,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(wee,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(Aee,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(Lee,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(yee,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(xee,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForSequenceClassification"),c($ee,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(kee,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(See,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(Ree,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(Pee,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(Bee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(Iee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(Nee,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(qee,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(jee,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(Dee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(Gee,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P0,"id","transformers.TFAutoModelForMultipleChoice"),c(P0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P0,"href","#transformers.TFAutoModelForMultipleChoice"),c(Uc,"class","relative group"),c(Oee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Xee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zee,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(Wee,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(Qee,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(Uee,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(Hee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(Jee,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(Yee,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(Kee,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(Zee,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(eoe,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(ooe,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(roe,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(toe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(aoe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(noe,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(soe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(loe,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ew,"id","transformers.TFAutoModelForNextSentencePrediction"),c(ew,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ew,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Yc,"class","relative group"),c(ioe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(doe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(coe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(moe,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(foe,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nw,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(nw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nw,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(em,"class","relative group"),c(goe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(poe,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dw,"id","transformers.TFAutoModelForTokenClassification"),c(dw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dw,"href","#transformers.TFAutoModelForTokenClassification"),c(tm,"class","relative group"),c(_oe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(boe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(voe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Foe,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(Toe,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(Moe,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(Eoe,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(Coe,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(woe,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(Aoe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(Loe,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(yoe,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(xoe,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c($oe,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(koe,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForTokenClassification"),c(Soe,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(Roe,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(Poe,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(Boe,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(Ioe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(Noe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(qoe,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(joe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(Doe,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rw,"id","transformers.TFAutoModelForQuestionAnswering"),c(Rw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rw,"href","#transformers.TFAutoModelForQuestionAnswering"),c(sm,"class","relative group"),c(Goe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ooe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Voe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xoe,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(zoe,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(Woe,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(Qoe,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(Uoe,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(Hoe,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(Joe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(Yoe,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(Koe,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(Zoe,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(ere,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(ore,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForQuestionAnswering"),c(rre,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(tre,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(are,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(nre,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(sre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(lre,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(ire,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(dre,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(cre,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t6,"id","transformers.TFAutoModelForVision2Seq"),c(t6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t6,"href","#transformers.TFAutoModelForVision2Seq"),c(dm,"class","relative group"),c(mre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hre,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l6,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(l6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l6,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(fm,"class","relative group"),c(ure,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_re,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bre,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m6,"id","transformers.FlaxAutoModel"),c(m6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m6,"href","#transformers.FlaxAutoModel"),c(um,"class","relative group"),c(vre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mre,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(Ere,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(Cre,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(wre,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(Are,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(Lre,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(yre,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(xre,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c($re,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(kre,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(Sre,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(Rre,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(Pre,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(Bre,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(Ire,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(Nre,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(qre,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(jre,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel"),c(Dre,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(Gre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(Ore,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(Vre,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(Xre,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(zre,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(Wre,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(Qre,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(Ure,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G6,"id","transformers.FlaxAutoModelForCausalLM"),c(G6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G6,"href","#transformers.FlaxAutoModelForCausalLM"),c(bm,"class","relative group"),c(Hre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kre,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Zre,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(ete,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(ote,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(rte,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(tte,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(ate,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(nte,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(ste,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(lte,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eA,"id","transformers.FlaxAutoModelForPreTraining"),c(eA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eA,"href","#transformers.FlaxAutoModelForPreTraining"),c(Tm,"class","relative group"),c(ite,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mte,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(fte,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(gte,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(hte,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(ute,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(pte,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(_te,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(bte,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(vte,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Fte,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Tte,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Mte,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(Ete,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pA,"id","transformers.FlaxAutoModelForMaskedLM"),c(pA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pA,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Cm,"class","relative group"),c(Cte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ate,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lte,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(yte,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(xte,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c($te,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(kte,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(Ste,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(Rte,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Pte,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Bte,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Ite,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xA,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(xA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xA,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Lm,"class","relative group"),c(Nte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dte,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Gte,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(Ote,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(Vte,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(Xte,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(zte,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Wte,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Qte,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Ute,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Hte,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OA,"id","transformers.FlaxAutoModelForSequenceClassification"),c(OA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OA,"href","#transformers.FlaxAutoModelForSequenceClassification"),c($m,"class","relative group"),c(Jte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zte,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(eae,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(oae,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(rae,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(tae,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(aae,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(nae,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(sae,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(lae,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(iae,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o7,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(o7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o7,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Rm,"class","relative group"),c(dae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fae,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(gae,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(hae,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(uae,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(pae,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(_ae,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(bae,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(vae,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Fae,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Tae,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h7,"id","transformers.FlaxAutoModelForTokenClassification"),c(h7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h7,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Im,"class","relative group"),c(Mae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Eae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wae,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Aae,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Lae,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(yae,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(xae,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c($ae,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(kae,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(Sae,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w7,"id","transformers.FlaxAutoModelForMultipleChoice"),c(w7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w7,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(jm,"class","relative group"),c(Rae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iae,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Nae,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(qae,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(jae,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Dae,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Gae,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Oae,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Vae,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I7,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(I7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I7,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Om,"class","relative group"),c(Xae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Wae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qae,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D7,"id","transformers.FlaxAutoModelForImageClassification"),c(D7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D7,"href","#transformers.FlaxAutoModelForImageClassification"),c(zm,"class","relative group"),c(Uae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yae,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Kae,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z7,"id","transformers.FlaxAutoModelForVision2Seq"),c(z7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z7,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Um,"class","relative group"),c(Zae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ene,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(one,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rne,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,v,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,Ao),e(Ao,Oi),b(m,ef,_),b(m,mt,_),e(mt,Vi),e(mt,Xi),e(Xi,v8),e(mt,of),b(m,Ve,_),b(m,Ue,_),e(Ue,zi),e(Ue,Xn),e(Xn,F8),e(Ue,zn),e(Ue,Wn),e(Wn,T8),e(Ue,Wi),e(Ue,Qn),e(Qn,M8),e(Ue,Qi),b(m,rf,_),M(ja,m,_),b(m,He,_),b(m,Ae,_),e(Ae,fP),e(Ae,Ui),e(Ui,gP),e(Ae,hP),b(m,Lo,_),b(m,Da,_),e(Da,uP),e(Da,tf),e(tf,pP),e(Da,WKe),b(m,EUe,_),b(m,Hi,_),e(Hi,af),e(af,ole),M(E8,ole,null),e(Hi,QKe),e(Hi,rle),e(rle,UKe),b(m,CUe,_),b(m,Un,_),e(Un,HKe),e(Un,tle),e(tle,JKe),e(Un,YKe),e(Un,ale),e(ale,KKe),e(Un,ZKe),b(m,wUe,_),M(C8,m,_),b(m,AUe,_),b(m,_P,_),e(_P,eZe),b(m,LUe,_),M(nf,m,_),b(m,yUe,_),b(m,Ji,_),e(Ji,sf),e(sf,nle),M(w8,nle,null),e(Ji,oZe),e(Ji,sle),e(sle,rZe),b(m,xUe,_),b(m,yo,_),M(A8,yo,null),e(yo,tZe),e(yo,L8),e(L8,aZe),e(L8,bP),e(bP,nZe),e(L8,sZe),e(yo,lZe),e(yo,y8),e(y8,iZe),e(y8,lle),e(lle,dZe),e(y8,cZe),e(yo,mZe),e(yo,kr),M(x8,kr,null),e(kr,fZe),e(kr,ile),e(ile,gZe),e(kr,hZe),e(kr,Yi),e(Yi,uZe),e(Yi,dle),e(dle,pZe),e(Yi,_Ze),e(Yi,cle),e(cle,bZe),e(Yi,vZe),e(kr,FZe),e(kr,A),e(A,lf),e(lf,mle),e(mle,TZe),e(lf,MZe),e(lf,vP),e(vP,EZe),e(lf,CZe),e(A,wZe),e(A,df),e(df,fle),e(fle,AZe),e(df,LZe),e(df,FP),e(FP,yZe),e(df,xZe),e(A,$Ze),e(A,cf),e(cf,gle),e(gle,kZe),e(cf,SZe),e(cf,TP),e(TP,RZe),e(cf,PZe),e(A,BZe),e(A,mf),e(mf,hle),e(hle,IZe),e(mf,NZe),e(mf,MP),e(MP,qZe),e(mf,jZe),e(A,DZe),e(A,ff),e(ff,ule),e(ule,GZe),e(ff,OZe),e(ff,EP),e(EP,VZe),e(ff,XZe),e(A,zZe),e(A,gf),e(gf,ple),e(ple,WZe),e(gf,QZe),e(gf,CP),e(CP,UZe),e(gf,HZe),e(A,JZe),e(A,hf),e(hf,_le),e(_le,YZe),e(hf,KZe),e(hf,wP),e(wP,ZZe),e(hf,eeo),e(A,oeo),e(A,uf),e(uf,ble),e(ble,reo),e(uf,teo),e(uf,AP),e(AP,aeo),e(uf,neo),e(A,seo),e(A,pf),e(pf,vle),e(vle,leo),e(pf,ieo),e(pf,LP),e(LP,deo),e(pf,ceo),e(A,meo),e(A,_f),e(_f,Fle),e(Fle,feo),e(_f,geo),e(_f,yP),e(yP,heo),e(_f,ueo),e(A,peo),e(A,bf),e(bf,Tle),e(Tle,_eo),e(bf,beo),e(bf,xP),e(xP,veo),e(bf,Feo),e(A,Teo),e(A,vf),e(vf,Mle),e(Mle,Meo),e(vf,Eeo),e(vf,$P),e($P,Ceo),e(vf,weo),e(A,Aeo),e(A,Ff),e(Ff,Ele),e(Ele,Leo),e(Ff,yeo),e(Ff,kP),e(kP,xeo),e(Ff,$eo),e(A,keo),e(A,Tf),e(Tf,Cle),e(Cle,Seo),e(Tf,Reo),e(Tf,SP),e(SP,Peo),e(Tf,Beo),e(A,Ieo),e(A,Mf),e(Mf,wle),e(wle,Neo),e(Mf,qeo),e(Mf,RP),e(RP,jeo),e(Mf,Deo),e(A,Geo),e(A,Ef),e(Ef,Ale),e(Ale,Oeo),e(Ef,Veo),e(Ef,PP),e(PP,Xeo),e(Ef,zeo),e(A,Weo),e(A,Cf),e(Cf,Lle),e(Lle,Qeo),e(Cf,Ueo),e(Cf,BP),e(BP,Heo),e(Cf,Jeo),e(A,Yeo),e(A,wf),e(wf,yle),e(yle,Keo),e(wf,Zeo),e(wf,IP),e(IP,eoo),e(wf,ooo),e(A,roo),e(A,Af),e(Af,xle),e(xle,too),e(Af,aoo),e(Af,NP),e(NP,noo),e(Af,soo),e(A,loo),e(A,Lf),e(Lf,$le),e($le,ioo),e(Lf,doo),e(Lf,qP),e(qP,coo),e(Lf,moo),e(A,foo),e(A,yf),e(yf,kle),e(kle,goo),e(yf,hoo),e(yf,jP),e(jP,uoo),e(yf,poo),e(A,_oo),e(A,xf),e(xf,Sle),e(Sle,boo),e(xf,voo),e(xf,DP),e(DP,Foo),e(xf,Too),e(A,Moo),e(A,$f),e($f,Rle),e(Rle,Eoo),e($f,Coo),e($f,GP),e(GP,woo),e($f,Aoo),e(A,Loo),e(A,kf),e(kf,Ple),e(Ple,yoo),e(kf,xoo),e(kf,OP),e(OP,$oo),e(kf,koo),e(A,Soo),e(A,Sf),e(Sf,Ble),e(Ble,Roo),e(Sf,Poo),e(Sf,VP),e(VP,Boo),e(Sf,Ioo),e(A,Noo),e(A,Rf),e(Rf,Ile),e(Ile,qoo),e(Rf,joo),e(Rf,XP),e(XP,Doo),e(Rf,Goo),e(A,Ooo),e(A,Pf),e(Pf,Nle),e(Nle,Voo),e(Pf,Xoo),e(Pf,zP),e(zP,zoo),e(Pf,Woo),e(A,Qoo),e(A,Bf),e(Bf,qle),e(qle,Uoo),e(Bf,Hoo),e(Bf,WP),e(WP,Joo),e(Bf,Yoo),e(A,Koo),e(A,If),e(If,jle),e(jle,Zoo),e(If,ero),e(If,QP),e(QP,oro),e(If,rro),e(A,tro),e(A,Nf),e(Nf,Dle),e(Dle,aro),e(Nf,nro),e(Nf,UP),e(UP,sro),e(Nf,lro),e(A,iro),e(A,qf),e(qf,Gle),e(Gle,dro),e(qf,cro),e(qf,HP),e(HP,mro),e(qf,fro),e(A,gro),e(A,jf),e(jf,Ole),e(Ole,hro),e(jf,uro),e(jf,JP),e(JP,pro),e(jf,_ro),e(A,bro),e(A,Df),e(Df,Vle),e(Vle,vro),e(Df,Fro),e(Df,YP),e(YP,Tro),e(Df,Mro),e(A,Ero),e(A,Gf),e(Gf,Xle),e(Xle,Cro),e(Gf,wro),e(Gf,KP),e(KP,Aro),e(Gf,Lro),e(A,yro),e(A,Of),e(Of,zle),e(zle,xro),e(Of,$ro),e(Of,ZP),e(ZP,kro),e(Of,Sro),e(A,Rro),e(A,Vf),e(Vf,Wle),e(Wle,Pro),e(Vf,Bro),e(Vf,eB),e(eB,Iro),e(Vf,Nro),e(A,qro),e(A,Xf),e(Xf,Qle),e(Qle,jro),e(Xf,Dro),e(Xf,oB),e(oB,Gro),e(Xf,Oro),e(A,Vro),e(A,zf),e(zf,Ule),e(Ule,Xro),e(zf,zro),e(zf,rB),e(rB,Wro),e(zf,Qro),e(A,Uro),e(A,Wf),e(Wf,Hle),e(Hle,Hro),e(Wf,Jro),e(Wf,tB),e(tB,Yro),e(Wf,Kro),e(A,Zro),e(A,Qf),e(Qf,Jle),e(Jle,eto),e(Qf,oto),e(Qf,aB),e(aB,rto),e(Qf,tto),e(A,ato),e(A,Uf),e(Uf,Yle),e(Yle,nto),e(Uf,sto),e(Uf,nB),e(nB,lto),e(Uf,ito),e(A,dto),e(A,Hf),e(Hf,Kle),e(Kle,cto),e(Hf,mto),e(Hf,sB),e(sB,fto),e(Hf,gto),e(A,hto),e(A,Jf),e(Jf,Zle),e(Zle,uto),e(Jf,pto),e(Jf,lB),e(lB,_to),e(Jf,bto),e(A,vto),e(A,Yf),e(Yf,eie),e(eie,Fto),e(Yf,Tto),e(Yf,iB),e(iB,Mto),e(Yf,Eto),e(A,Cto),e(A,Kf),e(Kf,oie),e(oie,wto),e(Kf,Ato),e(Kf,dB),e(dB,Lto),e(Kf,yto),e(A,xto),e(A,Zf),e(Zf,rie),e(rie,$to),e(Zf,kto),e(Zf,cB),e(cB,Sto),e(Zf,Rto),e(A,Pto),e(A,eg),e(eg,tie),e(tie,Bto),e(eg,Ito),e(eg,mB),e(mB,Nto),e(eg,qto),e(A,jto),e(A,og),e(og,aie),e(aie,Dto),e(og,Gto),e(og,fB),e(fB,Oto),e(og,Vto),e(A,Xto),e(A,rg),e(rg,nie),e(nie,zto),e(rg,Wto),e(rg,gB),e(gB,Qto),e(rg,Uto),e(A,Hto),e(A,tg),e(tg,sie),e(sie,Jto),e(tg,Yto),e(tg,hB),e(hB,Kto),e(tg,Zto),e(A,eao),e(A,ag),e(ag,lie),e(lie,oao),e(ag,rao),e(ag,uB),e(uB,tao),e(ag,aao),e(A,nao),e(A,ng),e(ng,iie),e(iie,sao),e(ng,lao),e(ng,pB),e(pB,iao),e(ng,dao),e(A,cao),e(A,sg),e(sg,die),e(die,mao),e(sg,fao),e(sg,_B),e(_B,gao),e(sg,hao),e(A,uao),e(A,lg),e(lg,cie),e(cie,pao),e(lg,_ao),e(lg,bB),e(bB,bao),e(lg,vao),e(A,Fao),e(A,ig),e(ig,mie),e(mie,Tao),e(ig,Mao),e(ig,vB),e(vB,Eao),e(ig,Cao),e(A,wao),e(A,dg),e(dg,fie),e(fie,Aao),e(dg,Lao),e(dg,FB),e(FB,yao),e(dg,xao),e(A,$ao),e(A,cg),e(cg,gie),e(gie,kao),e(cg,Sao),e(cg,TB),e(TB,Rao),e(cg,Pao),e(A,Bao),e(A,mg),e(mg,hie),e(hie,Iao),e(mg,Nao),e(mg,MB),e(MB,qao),e(mg,jao),e(A,Dao),e(A,fg),e(fg,uie),e(uie,Gao),e(fg,Oao),e(fg,EB),e(EB,Vao),e(fg,Xao),e(A,zao),e(A,gg),e(gg,pie),e(pie,Wao),e(gg,Qao),e(gg,CB),e(CB,Uao),e(gg,Hao),e(A,Jao),e(A,hg),e(hg,_ie),e(_ie,Yao),e(hg,Kao),e(hg,wB),e(wB,Zao),e(hg,eno),e(A,ono),e(A,ug),e(ug,bie),e(bie,rno),e(ug,tno),e(ug,AB),e(AB,ano),e(ug,nno),e(A,sno),e(A,pg),e(pg,vie),e(vie,lno),e(pg,ino),e(pg,LB),e(LB,dno),e(pg,cno),e(A,mno),e(A,_g),e(_g,Fie),e(Fie,fno),e(_g,gno),e(_g,yB),e(yB,hno),e(_g,uno),e(A,pno),e(A,bg),e(bg,Tie),e(Tie,_no),e(bg,bno),e(bg,xB),e(xB,vno),e(bg,Fno),e(A,Tno),e(A,vg),e(vg,Mie),e(Mie,Mno),e(vg,Eno),e(vg,$B),e($B,Cno),e(vg,wno),e(A,Ano),e(A,Fg),e(Fg,Eie),e(Eie,Lno),e(Fg,yno),e(Fg,kB),e(kB,xno),e(Fg,$no),e(A,kno),e(A,Tg),e(Tg,Cie),e(Cie,Sno),e(Tg,Rno),e(Tg,SB),e(SB,Pno),e(Tg,Bno),e(A,Ino),e(A,Mg),e(Mg,wie),e(wie,Nno),e(Mg,qno),e(Mg,RB),e(RB,jno),e(Mg,Dno),e(A,Gno),e(A,Eg),e(Eg,Aie),e(Aie,Ono),e(Eg,Vno),e(Eg,PB),e(PB,Xno),e(Eg,zno),e(A,Wno),e(A,Cg),e(Cg,Lie),e(Lie,Qno),e(Cg,Uno),e(Cg,BB),e(BB,Hno),e(Cg,Jno),e(A,Yno),e(A,wg),e(wg,yie),e(yie,Kno),e(wg,Zno),e(wg,IB),e(IB,eso),e(wg,oso),e(A,rso),e(A,Ag),e(Ag,xie),e(xie,tso),e(Ag,aso),e(Ag,NB),e(NB,nso),e(Ag,sso),e(A,lso),e(A,Lg),e(Lg,$ie),e($ie,iso),e(Lg,dso),e(Lg,qB),e(qB,cso),e(Lg,mso),e(A,fso),e(A,yg),e(yg,kie),e(kie,gso),e(yg,hso),e(yg,jB),e(jB,uso),e(yg,pso),e(A,_so),e(A,xg),e(xg,Sie),e(Sie,bso),e(xg,vso),e(xg,DB),e(DB,Fso),e(xg,Tso),e(A,Mso),e(A,$g),e($g,Rie),e(Rie,Eso),e($g,Cso),e($g,GB),e(GB,wso),e($g,Aso),e(A,Lso),e(A,kg),e(kg,Pie),e(Pie,yso),e(kg,xso),e(kg,OB),e(OB,$so),e(kg,kso),e(A,Sso),e(A,Sg),e(Sg,Bie),e(Bie,Rso),e(Sg,Pso),e(Sg,VB),e(VB,Bso),e(Sg,Iso),e(A,Nso),e(A,Rg),e(Rg,Iie),e(Iie,qso),e(Rg,jso),e(Rg,XB),e(XB,Dso),e(Rg,Gso),e(A,Oso),e(A,Pg),e(Pg,Nie),e(Nie,Vso),e(Pg,Xso),e(Pg,zB),e(zB,zso),e(Pg,Wso),e(A,Qso),e(A,Bg),e(Bg,qie),e(qie,Uso),e(Bg,Hso),e(Bg,WB),e(WB,Jso),e(Bg,Yso),e(A,Kso),e(A,Ig),e(Ig,jie),e(jie,Zso),e(Ig,elo),e(Ig,QB),e(QB,olo),e(Ig,rlo),e(A,tlo),e(A,Ng),e(Ng,Die),e(Die,alo),e(Ng,nlo),e(Ng,UB),e(UB,slo),e(Ng,llo),e(A,ilo),e(A,qg),e(qg,Gie),e(Gie,dlo),e(qg,clo),e(qg,HB),e(HB,mlo),e(qg,flo),e(A,glo),e(A,jg),e(jg,Oie),e(Oie,hlo),e(jg,ulo),e(jg,JB),e(JB,plo),e(jg,_lo),e(A,blo),e(A,Dg),e(Dg,Vie),e(Vie,vlo),e(Dg,Flo),e(Dg,YB),e(YB,Tlo),e(Dg,Mlo),e(A,Elo),e(A,Gg),e(Gg,Xie),e(Xie,Clo),e(Gg,wlo),e(Gg,KB),e(KB,Alo),e(Gg,Llo),e(A,ylo),e(A,Og),e(Og,zie),e(zie,xlo),e(Og,$lo),e(Og,ZB),e(ZB,klo),e(Og,Slo),e(A,Rlo),e(A,Vg),e(Vg,Wie),e(Wie,Plo),e(Vg,Blo),e(Vg,eI),e(eI,Ilo),e(Vg,Nlo),e(A,qlo),e(A,Xg),e(Xg,Qie),e(Qie,jlo),e(Xg,Dlo),e(Xg,oI),e(oI,Glo),e(Xg,Olo),e(A,Vlo),e(A,zg),e(zg,Uie),e(Uie,Xlo),e(zg,zlo),e(zg,rI),e(rI,Wlo),e(zg,Qlo),e(A,Ulo),e(A,Wg),e(Wg,Hie),e(Hie,Hlo),e(Wg,Jlo),e(Wg,tI),e(tI,Ylo),e(Wg,Klo),e(A,Zlo),e(A,Qg),e(Qg,Jie),e(Jie,eio),e(Qg,oio),e(Qg,aI),e(aI,rio),e(Qg,tio),e(A,aio),e(A,Ug),e(Ug,Yie),e(Yie,nio),e(Ug,sio),e(Ug,nI),e(nI,lio),e(Ug,iio),e(A,dio),e(A,Hg),e(Hg,Kie),e(Kie,cio),e(Hg,mio),e(Hg,sI),e(sI,fio),e(Hg,gio),e(A,hio),e(A,Jg),e(Jg,Zie),e(Zie,uio),e(Jg,pio),e(Jg,lI),e(lI,_io),e(Jg,bio),e(A,vio),e(A,Yg),e(Yg,ede),e(ede,Fio),e(Yg,Tio),e(Yg,iI),e(iI,Mio),e(Yg,Eio),e(A,Cio),e(A,Kg),e(Kg,ode),e(ode,wio),e(Kg,Aio),e(Kg,dI),e(dI,Lio),e(Kg,yio),e(A,xio),e(A,Zg),e(Zg,rde),e(rde,$io),e(Zg,kio),e(Zg,cI),e(cI,Sio),e(Zg,Rio),e(A,Pio),e(A,eh),e(eh,tde),e(tde,Bio),e(eh,Iio),e(eh,mI),e(mI,Nio),e(eh,qio),e(A,jio),e(A,oh),e(oh,ade),e(ade,Dio),e(oh,Gio),e(oh,fI),e(fI,Oio),e(oh,Vio),e(A,Xio),e(A,rh),e(rh,nde),e(nde,zio),e(rh,Wio),e(rh,gI),e(gI,Qio),e(rh,Uio),e(A,Hio),e(A,th),e(th,sde),e(sde,Jio),e(th,Yio),e(th,hI),e(hI,Kio),e(th,Zio),e(A,edo),e(A,ah),e(ah,lde),e(lde,odo),e(ah,rdo),e(ah,uI),e(uI,tdo),e(ah,ado),e(A,ndo),e(A,nh),e(nh,ide),e(ide,sdo),e(nh,ldo),e(nh,pI),e(pI,ido),e(nh,ddo),e(A,cdo),e(A,sh),e(sh,dde),e(dde,mdo),e(sh,fdo),e(sh,_I),e(_I,gdo),e(sh,hdo),e(A,udo),e(A,lh),e(lh,cde),e(cde,pdo),e(lh,_do),e(lh,bI),e(bI,bdo),e(lh,vdo),e(A,Fdo),e(A,ih),e(ih,mde),e(mde,Tdo),e(ih,Mdo),e(ih,vI),e(vI,Edo),e(ih,Cdo),e(A,wdo),e(A,dh),e(dh,fde),e(fde,Ado),e(dh,Ldo),e(dh,FI),e(FI,ydo),e(dh,xdo),e(A,$do),e(A,ch),e(ch,gde),e(gde,kdo),e(ch,Sdo),e(ch,TI),e(TI,Rdo),e(ch,Pdo),e(A,Bdo),e(A,mh),e(mh,hde),e(hde,Ido),e(mh,Ndo),e(mh,MI),e(MI,qdo),e(mh,jdo),e(A,Ddo),e(A,fh),e(fh,ude),e(ude,Gdo),e(fh,Odo),e(fh,EI),e(EI,Vdo),e(fh,Xdo),e(A,zdo),e(A,gh),e(gh,pde),e(pde,Wdo),e(gh,Qdo),e(gh,CI),e(CI,Udo),e(gh,Hdo),e(A,Jdo),e(A,hh),e(hh,_de),e(_de,Ydo),e(hh,Kdo),e(hh,wI),e(wI,Zdo),e(hh,eco),e(A,oco),e(A,uh),e(uh,bde),e(bde,rco),e(uh,tco),e(uh,AI),e(AI,aco),e(uh,nco),e(A,sco),e(A,ph),e(ph,vde),e(vde,lco),e(ph,ico),e(ph,LI),e(LI,dco),e(ph,cco),e(A,mco),e(A,_h),e(_h,Fde),e(Fde,fco),e(_h,gco),e(_h,yI),e(yI,hco),e(_h,uco),e(A,pco),e(A,bh),e(bh,Tde),e(Tde,_co),e(bh,bco),e(bh,xI),e(xI,vco),e(bh,Fco),e(A,Tco),e(A,vh),e(vh,Mde),e(Mde,Mco),e(vh,Eco),e(vh,$I),e($I,Cco),e(vh,wco),e(A,Aco),e(A,Fh),e(Fh,Ede),e(Ede,Lco),e(Fh,yco),e(Fh,kI),e(kI,xco),e(Fh,$co),e(A,kco),e(A,Th),e(Th,Cde),e(Cde,Sco),e(Th,Rco),e(Th,SI),e(SI,Pco),e(Th,Bco),e(kr,Ico),M(Mh,kr,null),e(yo,Nco),e(yo,Eh),M($8,Eh,null),e(Eh,qco),e(Eh,wde),e(wde,jco),b(m,$Ue,_),b(m,Ki,_),e(Ki,Ch),e(Ch,Ade),M(k8,Ade,null),e(Ki,Dco),e(Ki,Lde),e(Lde,Gco),b(m,kUe,_),b(m,xo,_),M(S8,xo,null),e(xo,Oco),e(xo,R8),e(R8,Vco),e(R8,RI),e(RI,Xco),e(R8,zco),e(xo,Wco),e(xo,P8),e(P8,Qco),e(P8,yde),e(yde,Uco),e(P8,Hco),e(xo,Jco),e(xo,Sr),M(B8,Sr,null),e(Sr,Yco),e(Sr,xde),e(xde,Kco),e(Sr,Zco),e(Sr,Ga),e(Ga,emo),e(Ga,$de),e($de,omo),e(Ga,rmo),e(Ga,kde),e(kde,tmo),e(Ga,amo),e(Ga,Sde),e(Sde,nmo),e(Ga,smo),e(Sr,lmo),e(Sr,k),e(k,Hn),e(Hn,Rde),e(Rde,imo),e(Hn,dmo),e(Hn,PI),e(PI,cmo),e(Hn,mmo),e(Hn,BI),e(BI,fmo),e(Hn,gmo),e(k,hmo),e(k,Jn),e(Jn,Pde),e(Pde,umo),e(Jn,pmo),e(Jn,II),e(II,_mo),e(Jn,bmo),e(Jn,NI),e(NI,vmo),e(Jn,Fmo),e(k,Tmo),e(k,Yn),e(Yn,Bde),e(Bde,Mmo),e(Yn,Emo),e(Yn,qI),e(qI,Cmo),e(Yn,wmo),e(Yn,jI),e(jI,Amo),e(Yn,Lmo),e(k,ymo),e(k,wh),e(wh,Ide),e(Ide,xmo),e(wh,$mo),e(wh,DI),e(DI,kmo),e(wh,Smo),e(k,Rmo),e(k,Kn),e(Kn,Nde),e(Nde,Pmo),e(Kn,Bmo),e(Kn,GI),e(GI,Imo),e(Kn,Nmo),e(Kn,OI),e(OI,qmo),e(Kn,jmo),e(k,Dmo),e(k,Ah),e(Ah,qde),e(qde,Gmo),e(Ah,Omo),e(Ah,VI),e(VI,Vmo),e(Ah,Xmo),e(k,zmo),e(k,Lh),e(Lh,jde),e(jde,Wmo),e(Lh,Qmo),e(Lh,XI),e(XI,Umo),e(Lh,Hmo),e(k,Jmo),e(k,yh),e(yh,Dde),e(Dde,Ymo),e(yh,Kmo),e(yh,zI),e(zI,Zmo),e(yh,efo),e(k,ofo),e(k,Zn),e(Zn,Gde),e(Gde,rfo),e(Zn,tfo),e(Zn,WI),e(WI,afo),e(Zn,nfo),e(Zn,QI),e(QI,sfo),e(Zn,lfo),e(k,ifo),e(k,es),e(es,Ode),e(Ode,dfo),e(es,cfo),e(es,UI),e(UI,mfo),e(es,ffo),e(es,HI),e(HI,gfo),e(es,hfo),e(k,ufo),e(k,os),e(os,Vde),e(Vde,pfo),e(os,_fo),e(os,JI),e(JI,bfo),e(os,vfo),e(os,YI),e(YI,Ffo),e(os,Tfo),e(k,Mfo),e(k,xh),e(xh,Xde),e(Xde,Efo),e(xh,Cfo),e(xh,KI),e(KI,wfo),e(xh,Afo),e(k,Lfo),e(k,$h),e($h,zde),e(zde,yfo),e($h,xfo),e($h,ZI),e(ZI,$fo),e($h,kfo),e(k,Sfo),e(k,kh),e(kh,Wde),e(Wde,Rfo),e(kh,Pfo),e(kh,eN),e(eN,Bfo),e(kh,Ifo),e(k,Nfo),e(k,rs),e(rs,Qde),e(Qde,qfo),e(rs,jfo),e(rs,oN),e(oN,Dfo),e(rs,Gfo),e(rs,rN),e(rN,Ofo),e(rs,Vfo),e(k,Xfo),e(k,Sh),e(Sh,Ude),e(Ude,zfo),e(Sh,Wfo),e(Sh,tN),e(tN,Qfo),e(Sh,Ufo),e(k,Hfo),e(k,ts),e(ts,Hde),e(Hde,Jfo),e(ts,Yfo),e(ts,aN),e(aN,Kfo),e(ts,Zfo),e(ts,nN),e(nN,ego),e(ts,ogo),e(k,rgo),e(k,as),e(as,Jde),e(Jde,tgo),e(as,ago),e(as,sN),e(sN,ngo),e(as,sgo),e(as,lN),e(lN,lgo),e(as,igo),e(k,dgo),e(k,ns),e(ns,Yde),e(Yde,cgo),e(ns,mgo),e(ns,iN),e(iN,fgo),e(ns,ggo),e(ns,dN),e(dN,hgo),e(ns,ugo),e(k,pgo),e(k,ss),e(ss,Kde),e(Kde,_go),e(ss,bgo),e(ss,cN),e(cN,vgo),e(ss,Fgo),e(ss,mN),e(mN,Tgo),e(ss,Mgo),e(k,Ego),e(k,Rh),e(Rh,Zde),e(Zde,Cgo),e(Rh,wgo),e(Rh,fN),e(fN,Ago),e(Rh,Lgo),e(k,ygo),e(k,ls),e(ls,ece),e(ece,xgo),e(ls,$go),e(ls,gN),e(gN,kgo),e(ls,Sgo),e(ls,hN),e(hN,Rgo),e(ls,Pgo),e(k,Bgo),e(k,is),e(is,oce),e(oce,Igo),e(is,Ngo),e(is,uN),e(uN,qgo),e(is,jgo),e(is,pN),e(pN,Dgo),e(is,Ggo),e(k,Ogo),e(k,ds),e(ds,rce),e(rce,Vgo),e(ds,Xgo),e(ds,_N),e(_N,zgo),e(ds,Wgo),e(ds,bN),e(bN,Qgo),e(ds,Ugo),e(k,Hgo),e(k,cs),e(cs,tce),e(tce,Jgo),e(cs,Ygo),e(cs,vN),e(vN,Kgo),e(cs,Zgo),e(cs,FN),e(FN,eho),e(cs,oho),e(k,rho),e(k,ms),e(ms,ace),e(ace,tho),e(ms,aho),e(ms,TN),e(TN,nho),e(ms,sho),e(ms,MN),e(MN,lho),e(ms,iho),e(k,dho),e(k,fs),e(fs,nce),e(nce,cho),e(fs,mho),e(fs,EN),e(EN,fho),e(fs,gho),e(fs,CN),e(CN,hho),e(fs,uho),e(k,pho),e(k,Ph),e(Ph,sce),e(sce,_ho),e(Ph,bho),e(Ph,wN),e(wN,vho),e(Ph,Fho),e(k,Tho),e(k,gs),e(gs,lce),e(lce,Mho),e(gs,Eho),e(gs,AN),e(AN,Cho),e(gs,who),e(gs,LN),e(LN,Aho),e(gs,Lho),e(k,yho),e(k,Bh),e(Bh,ice),e(ice,xho),e(Bh,$ho),e(Bh,yN),e(yN,kho),e(Bh,Sho),e(k,Rho),e(k,hs),e(hs,dce),e(dce,Pho),e(hs,Bho),e(hs,xN),e(xN,Iho),e(hs,Nho),e(hs,$N),e($N,qho),e(hs,jho),e(k,Dho),e(k,us),e(us,cce),e(cce,Gho),e(us,Oho),e(us,kN),e(kN,Vho),e(us,Xho),e(us,SN),e(SN,zho),e(us,Who),e(k,Qho),e(k,ps),e(ps,mce),e(mce,Uho),e(ps,Hho),e(ps,RN),e(RN,Jho),e(ps,Yho),e(ps,PN),e(PN,Kho),e(ps,Zho),e(k,euo),e(k,Ih),e(Ih,fce),e(fce,ouo),e(Ih,ruo),e(Ih,BN),e(BN,tuo),e(Ih,auo),e(k,nuo),e(k,_s),e(_s,gce),e(gce,suo),e(_s,luo),e(_s,IN),e(IN,iuo),e(_s,duo),e(_s,NN),e(NN,cuo),e(_s,muo),e(k,fuo),e(k,bs),e(bs,hce),e(hce,guo),e(bs,huo),e(bs,qN),e(qN,uuo),e(bs,puo),e(bs,jN),e(jN,_uo),e(bs,buo),e(k,vuo),e(k,vs),e(vs,uce),e(uce,Fuo),e(vs,Tuo),e(vs,DN),e(DN,Muo),e(vs,Euo),e(vs,GN),e(GN,Cuo),e(vs,wuo),e(k,Auo),e(k,Nh),e(Nh,pce),e(pce,Luo),e(Nh,yuo),e(Nh,ON),e(ON,xuo),e(Nh,$uo),e(k,kuo),e(k,Fs),e(Fs,_ce),e(_ce,Suo),e(Fs,Ruo),e(Fs,VN),e(VN,Puo),e(Fs,Buo),e(Fs,XN),e(XN,Iuo),e(Fs,Nuo),e(k,quo),e(k,Ts),e(Ts,bce),e(bce,juo),e(Ts,Duo),e(Ts,zN),e(zN,Guo),e(Ts,Ouo),e(Ts,WN),e(WN,Vuo),e(Ts,Xuo),e(k,zuo),e(k,Ms),e(Ms,vce),e(vce,Wuo),e(Ms,Quo),e(Ms,QN),e(QN,Uuo),e(Ms,Huo),e(Ms,UN),e(UN,Juo),e(Ms,Yuo),e(k,Kuo),e(k,Es),e(Es,Fce),e(Fce,Zuo),e(Es,epo),e(Es,HN),e(HN,opo),e(Es,rpo),e(Es,JN),e(JN,tpo),e(Es,apo),e(k,npo),e(k,Cs),e(Cs,Tce),e(Tce,spo),e(Cs,lpo),e(Cs,YN),e(YN,ipo),e(Cs,dpo),e(Cs,KN),e(KN,cpo),e(Cs,mpo),e(k,fpo),e(k,ws),e(ws,Mce),e(Mce,gpo),e(ws,hpo),e(ws,ZN),e(ZN,upo),e(ws,ppo),e(ws,eq),e(eq,_po),e(ws,bpo),e(k,vpo),e(k,As),e(As,Ece),e(Ece,Fpo),e(As,Tpo),e(As,oq),e(oq,Mpo),e(As,Epo),e(As,rq),e(rq,Cpo),e(As,wpo),e(k,Apo),e(k,Ls),e(Ls,Cce),e(Cce,Lpo),e(Ls,ypo),e(Ls,tq),e(tq,xpo),e(Ls,$po),e(Ls,aq),e(aq,kpo),e(Ls,Spo),e(k,Rpo),e(k,qh),e(qh,wce),e(wce,Ppo),e(qh,Bpo),e(qh,nq),e(nq,Ipo),e(qh,Npo),e(k,qpo),e(k,ys),e(ys,Ace),e(Ace,jpo),e(ys,Dpo),e(ys,sq),e(sq,Gpo),e(ys,Opo),e(ys,lq),e(lq,Vpo),e(ys,Xpo),e(k,zpo),e(k,jh),e(jh,Lce),e(Lce,Wpo),e(jh,Qpo),e(jh,iq),e(iq,Upo),e(jh,Hpo),e(k,Jpo),e(k,Dh),e(Dh,yce),e(yce,Ypo),e(Dh,Kpo),e(Dh,dq),e(dq,Zpo),e(Dh,e_o),e(k,o_o),e(k,xs),e(xs,xce),e(xce,r_o),e(xs,t_o),e(xs,cq),e(cq,a_o),e(xs,n_o),e(xs,mq),e(mq,s_o),e(xs,l_o),e(k,i_o),e(k,$s),e($s,$ce),e($ce,d_o),e($s,c_o),e($s,fq),e(fq,m_o),e($s,f_o),e($s,gq),e(gq,g_o),e($s,h_o),e(k,u_o),e(k,ks),e(ks,kce),e(kce,p_o),e(ks,__o),e(ks,hq),e(hq,b_o),e(ks,v_o),e(ks,uq),e(uq,F_o),e(ks,T_o),e(k,M_o),e(k,Gh),e(Gh,Sce),e(Sce,E_o),e(Gh,C_o),e(Gh,pq),e(pq,w_o),e(Gh,A_o),e(k,L_o),e(k,Ss),e(Ss,Rce),e(Rce,y_o),e(Ss,x_o),e(Ss,_q),e(_q,$_o),e(Ss,k_o),e(Ss,bq),e(bq,S_o),e(Ss,R_o),e(k,P_o),e(k,Rs),e(Rs,Pce),e(Pce,B_o),e(Rs,I_o),e(Rs,vq),e(vq,N_o),e(Rs,q_o),e(Rs,Fq),e(Fq,j_o),e(Rs,D_o),e(k,G_o),e(k,Ps),e(Ps,Bce),e(Bce,O_o),e(Ps,V_o),e(Ps,Tq),e(Tq,X_o),e(Ps,z_o),e(Ps,Mq),e(Mq,W_o),e(Ps,Q_o),e(k,U_o),e(k,Bs),e(Bs,Ice),e(Ice,H_o),e(Bs,J_o),e(Bs,Eq),e(Eq,Y_o),e(Bs,K_o),e(Bs,Cq),e(Cq,Z_o),e(Bs,e2o),e(k,o2o),e(k,Is),e(Is,Nce),e(Nce,r2o),e(Is,t2o),e(Is,wq),e(wq,a2o),e(Is,n2o),e(Is,Aq),e(Aq,s2o),e(Is,l2o),e(k,i2o),e(k,Ns),e(Ns,qce),e(qce,d2o),e(Ns,c2o),e(Ns,Lq),e(Lq,m2o),e(Ns,f2o),e(Ns,yq),e(yq,g2o),e(Ns,h2o),e(k,u2o),e(k,qs),e(qs,jce),e(jce,p2o),e(qs,_2o),e(qs,xq),e(xq,b2o),e(qs,v2o),e(qs,$q),e($q,F2o),e(qs,T2o),e(k,M2o),e(k,js),e(js,Dce),e(Dce,E2o),e(js,C2o),e(js,kq),e(kq,w2o),e(js,A2o),e(js,Sq),e(Sq,L2o),e(js,y2o),e(k,x2o),e(k,Oh),e(Oh,Gce),e(Gce,$2o),e(Oh,k2o),e(Oh,Rq),e(Rq,S2o),e(Oh,R2o),e(k,P2o),e(k,Ds),e(Ds,Oce),e(Oce,B2o),e(Ds,I2o),e(Ds,Pq),e(Pq,N2o),e(Ds,q2o),e(Ds,Bq),e(Bq,j2o),e(Ds,D2o),e(k,G2o),e(k,Gs),e(Gs,Vce),e(Vce,O2o),e(Gs,V2o),e(Gs,Iq),e(Iq,X2o),e(Gs,z2o),e(Gs,Nq),e(Nq,W2o),e(Gs,Q2o),e(k,U2o),e(k,Vh),e(Vh,Xce),e(Xce,H2o),e(Vh,J2o),e(Vh,qq),e(qq,Y2o),e(Vh,K2o),e(k,Z2o),e(k,Xh),e(Xh,zce),e(zce,ebo),e(Xh,obo),e(Xh,jq),e(jq,rbo),e(Xh,tbo),e(k,abo),e(k,zh),e(zh,Wce),e(Wce,nbo),e(zh,sbo),e(zh,Dq),e(Dq,lbo),e(zh,ibo),e(k,dbo),e(k,Wh),e(Wh,Qce),e(Qce,cbo),e(Wh,mbo),e(Wh,Gq),e(Gq,fbo),e(Wh,gbo),e(k,hbo),e(k,Os),e(Os,Uce),e(Uce,ubo),e(Os,pbo),e(Os,Oq),e(Oq,_bo),e(Os,bbo),e(Os,Vq),e(Vq,vbo),e(Os,Fbo),e(k,Tbo),e(k,Qh),e(Qh,Hce),e(Hce,Mbo),e(Qh,Ebo),e(Qh,Xq),e(Xq,Cbo),e(Qh,wbo),e(k,Abo),e(k,Vs),e(Vs,Jce),e(Jce,Lbo),e(Vs,ybo),e(Vs,zq),e(zq,xbo),e(Vs,$bo),e(Vs,Wq),e(Wq,kbo),e(Vs,Sbo),e(k,Rbo),e(k,Xs),e(Xs,Yce),e(Yce,Pbo),e(Xs,Bbo),e(Xs,Qq),e(Qq,Ibo),e(Xs,Nbo),e(Xs,Uq),e(Uq,qbo),e(Xs,jbo),e(k,Dbo),e(k,zs),e(zs,Kce),e(Kce,Gbo),e(zs,Obo),e(zs,Hq),e(Hq,Vbo),e(zs,Xbo),e(zs,Jq),e(Jq,zbo),e(zs,Wbo),e(k,Qbo),e(k,Ws),e(Ws,Zce),e(Zce,Ubo),e(Ws,Hbo),e(Ws,Yq),e(Yq,Jbo),e(Ws,Ybo),e(Ws,Kq),e(Kq,Kbo),e(Ws,Zbo),e(k,evo),e(k,Qs),e(Qs,eme),e(eme,ovo),e(Qs,rvo),e(Qs,Zq),e(Zq,tvo),e(Qs,avo),e(Qs,ej),e(ej,nvo),e(Qs,svo),e(k,lvo),e(k,Us),e(Us,ome),e(ome,ivo),e(Us,dvo),e(Us,oj),e(oj,cvo),e(Us,mvo),e(Us,rj),e(rj,fvo),e(Us,gvo),e(k,hvo),e(k,Uh),e(Uh,rme),e(rme,uvo),e(Uh,pvo),e(Uh,tj),e(tj,_vo),e(Uh,bvo),e(k,vvo),e(k,Hh),e(Hh,tme),e(tme,Fvo),e(Hh,Tvo),e(Hh,aj),e(aj,Mvo),e(Hh,Evo),e(k,Cvo),e(k,Hs),e(Hs,ame),e(ame,wvo),e(Hs,Avo),e(Hs,nj),e(nj,Lvo),e(Hs,yvo),e(Hs,sj),e(sj,xvo),e(Hs,$vo),e(k,kvo),e(k,Js),e(Js,nme),e(nme,Svo),e(Js,Rvo),e(Js,lj),e(lj,Pvo),e(Js,Bvo),e(Js,ij),e(ij,Ivo),e(Js,Nvo),e(k,qvo),e(k,Ys),e(Ys,sme),e(sme,jvo),e(Ys,Dvo),e(Ys,dj),e(dj,Gvo),e(Ys,Ovo),e(Ys,cj),e(cj,Vvo),e(Ys,Xvo),e(k,zvo),e(k,Jh),e(Jh,lme),e(lme,Wvo),e(Jh,Qvo),e(Jh,mj),e(mj,Uvo),e(Jh,Hvo),e(k,Jvo),e(k,Yh),e(Yh,ime),e(ime,Yvo),e(Yh,Kvo),e(Yh,fj),e(fj,Zvo),e(Yh,e1o),e(k,o1o),e(k,Kh),e(Kh,dme),e(dme,r1o),e(Kh,t1o),e(Kh,gj),e(gj,a1o),e(Kh,n1o),e(k,s1o),e(k,Ks),e(Ks,cme),e(cme,l1o),e(Ks,i1o),e(Ks,hj),e(hj,d1o),e(Ks,c1o),e(Ks,uj),e(uj,m1o),e(Ks,f1o),e(k,g1o),e(k,Zs),e(Zs,mme),e(mme,h1o),e(Zs,u1o),e(Zs,pj),e(pj,p1o),e(Zs,_1o),e(Zs,_j),e(_j,b1o),e(Zs,v1o),e(k,F1o),e(k,Zh),e(Zh,fme),e(fme,T1o),e(Zh,M1o),e(Zh,bj),e(bj,E1o),e(Zh,C1o),e(k,w1o),e(k,eu),e(eu,gme),e(gme,A1o),e(eu,L1o),e(eu,vj),e(vj,y1o),e(eu,x1o),e(k,$1o),e(k,ou),e(ou,hme),e(hme,k1o),e(ou,S1o),e(ou,Fj),e(Fj,R1o),e(ou,P1o),e(k,B1o),e(k,el),e(el,ume),e(ume,I1o),e(el,N1o),e(el,Tj),e(Tj,q1o),e(el,j1o),e(el,Mj),e(Mj,D1o),e(el,G1o),e(k,O1o),e(k,ru),e(ru,pme),e(pme,V1o),e(ru,X1o),e(ru,Ej),e(Ej,z1o),e(ru,W1o),e(k,Q1o),e(k,tu),e(tu,_me),e(_me,U1o),e(tu,H1o),e(tu,Cj),e(Cj,J1o),e(tu,Y1o),e(k,K1o),e(k,ol),e(ol,bme),e(bme,Z1o),e(ol,eFo),e(ol,wj),e(wj,oFo),e(ol,rFo),e(ol,Aj),e(Aj,tFo),e(ol,aFo),e(k,nFo),e(k,rl),e(rl,vme),e(vme,sFo),e(rl,lFo),e(rl,Lj),e(Lj,iFo),e(rl,dFo),e(rl,yj),e(yj,cFo),e(rl,mFo),e(k,fFo),e(k,tl),e(tl,Fme),e(Fme,gFo),e(tl,hFo),e(tl,xj),e(xj,uFo),e(tl,pFo),e(tl,$j),e($j,_Fo),e(tl,bFo),e(k,vFo),e(k,al),e(al,Tme),e(Tme,FFo),e(al,TFo),e(al,kj),e(kj,MFo),e(al,EFo),e(al,Sj),e(Sj,CFo),e(al,wFo),e(Sr,AFo),M(au,Sr,null),e(xo,LFo),e(xo,nu),M(I8,nu,null),e(nu,yFo),e(nu,Mme),e(Mme,xFo),b(m,SUe,_),b(m,Zi,_),e(Zi,su),e(su,Eme),M(N8,Eme,null),e(Zi,$Fo),e(Zi,Cme),e(Cme,kFo),b(m,RUe,_),b(m,$o,_),M(q8,$o,null),e($o,SFo),e($o,j8),e(j8,RFo),e(j8,Rj),e(Rj,PFo),e(j8,BFo),e($o,IFo),e($o,D8),e(D8,NFo),e(D8,wme),e(wme,qFo),e(D8,jFo),e($o,DFo),e($o,Je),M(G8,Je,null),e(Je,GFo),e(Je,Ame),e(Ame,OFo),e(Je,VFo),e(Je,Oa),e(Oa,XFo),e(Oa,Lme),e(Lme,zFo),e(Oa,WFo),e(Oa,yme),e(yme,QFo),e(Oa,UFo),e(Oa,xme),e(xme,HFo),e(Oa,JFo),e(Je,YFo),e(Je,Q),e(Q,lu),e(lu,$me),e($me,KFo),e(lu,ZFo),e(lu,Pj),e(Pj,eTo),e(lu,oTo),e(Q,rTo),e(Q,iu),e(iu,kme),e(kme,tTo),e(iu,aTo),e(iu,Bj),e(Bj,nTo),e(iu,sTo),e(Q,lTo),e(Q,du),e(du,Sme),e(Sme,iTo),e(du,dTo),e(du,Ij),e(Ij,cTo),e(du,mTo),e(Q,fTo),e(Q,cu),e(cu,Rme),e(Rme,gTo),e(cu,hTo),e(cu,Nj),e(Nj,uTo),e(cu,pTo),e(Q,_To),e(Q,mu),e(mu,Pme),e(Pme,bTo),e(mu,vTo),e(mu,qj),e(qj,FTo),e(mu,TTo),e(Q,MTo),e(Q,fu),e(fu,Bme),e(Bme,ETo),e(fu,CTo),e(fu,jj),e(jj,wTo),e(fu,ATo),e(Q,LTo),e(Q,gu),e(gu,Ime),e(Ime,yTo),e(gu,xTo),e(gu,Dj),e(Dj,$To),e(gu,kTo),e(Q,STo),e(Q,hu),e(hu,Nme),e(Nme,RTo),e(hu,PTo),e(hu,Gj),e(Gj,BTo),e(hu,ITo),e(Q,NTo),e(Q,uu),e(uu,qme),e(qme,qTo),e(uu,jTo),e(uu,Oj),e(Oj,DTo),e(uu,GTo),e(Q,OTo),e(Q,pu),e(pu,jme),e(jme,VTo),e(pu,XTo),e(pu,Vj),e(Vj,zTo),e(pu,WTo),e(Q,QTo),e(Q,_u),e(_u,Dme),e(Dme,UTo),e(_u,HTo),e(_u,Xj),e(Xj,JTo),e(_u,YTo),e(Q,KTo),e(Q,bu),e(bu,Gme),e(Gme,ZTo),e(bu,eMo),e(bu,zj),e(zj,oMo),e(bu,rMo),e(Q,tMo),e(Q,vu),e(vu,Ome),e(Ome,aMo),e(vu,nMo),e(vu,Wj),e(Wj,sMo),e(vu,lMo),e(Q,iMo),e(Q,Fu),e(Fu,Vme),e(Vme,dMo),e(Fu,cMo),e(Fu,Qj),e(Qj,mMo),e(Fu,fMo),e(Q,gMo),e(Q,Tu),e(Tu,Xme),e(Xme,hMo),e(Tu,uMo),e(Tu,Uj),e(Uj,pMo),e(Tu,_Mo),e(Q,bMo),e(Q,Mu),e(Mu,zme),e(zme,vMo),e(Mu,FMo),e(Mu,Hj),e(Hj,TMo),e(Mu,MMo),e(Q,EMo),e(Q,Eu),e(Eu,Wme),e(Wme,CMo),e(Eu,wMo),e(Eu,Jj),e(Jj,AMo),e(Eu,LMo),e(Q,yMo),e(Q,Cu),e(Cu,Qme),e(Qme,xMo),e(Cu,$Mo),e(Cu,Yj),e(Yj,kMo),e(Cu,SMo),e(Q,RMo),e(Q,wu),e(wu,Ume),e(Ume,PMo),e(wu,BMo),e(wu,Kj),e(Kj,IMo),e(wu,NMo),e(Q,qMo),e(Q,Au),e(Au,Hme),e(Hme,jMo),e(Au,DMo),e(Au,Zj),e(Zj,GMo),e(Au,OMo),e(Q,VMo),e(Q,Lu),e(Lu,Jme),e(Jme,XMo),e(Lu,zMo),e(Lu,eD),e(eD,WMo),e(Lu,QMo),e(Q,UMo),e(Q,yu),e(yu,Yme),e(Yme,HMo),e(yu,JMo),e(yu,oD),e(oD,YMo),e(yu,KMo),e(Q,ZMo),e(Q,xu),e(xu,Kme),e(Kme,eEo),e(xu,oEo),e(xu,rD),e(rD,rEo),e(xu,tEo),e(Q,aEo),e(Q,$u),e($u,Zme),e(Zme,nEo),e($u,sEo),e($u,tD),e(tD,lEo),e($u,iEo),e(Q,dEo),e(Q,ku),e(ku,efe),e(efe,cEo),e(ku,mEo),e(ku,aD),e(aD,fEo),e(ku,gEo),e(Q,hEo),e(Q,Su),e(Su,ofe),e(ofe,uEo),e(Su,pEo),e(Su,nD),e(nD,_Eo),e(Su,bEo),e(Q,vEo),e(Q,Ru),e(Ru,rfe),e(rfe,FEo),e(Ru,TEo),e(Ru,sD),e(sD,MEo),e(Ru,EEo),e(Q,CEo),e(Q,Pu),e(Pu,tfe),e(tfe,wEo),e(Pu,AEo),e(Pu,lD),e(lD,LEo),e(Pu,yEo),e(Q,xEo),e(Q,Bu),e(Bu,afe),e(afe,$Eo),e(Bu,kEo),e(Bu,iD),e(iD,SEo),e(Bu,REo),e(Q,PEo),e(Q,Iu),e(Iu,nfe),e(nfe,BEo),e(Iu,IEo),e(Iu,dD),e(dD,NEo),e(Iu,qEo),e(Q,jEo),e(Q,Nu),e(Nu,sfe),e(sfe,DEo),e(Nu,GEo),e(Nu,cD),e(cD,OEo),e(Nu,VEo),e(Q,XEo),e(Q,qu),e(qu,lfe),e(lfe,zEo),e(qu,WEo),e(qu,mD),e(mD,QEo),e(qu,UEo),e(Q,HEo),e(Q,ju),e(ju,ife),e(ife,JEo),e(ju,YEo),e(ju,fD),e(fD,KEo),e(ju,ZEo),e(Q,e4o),e(Q,Du),e(Du,dfe),e(dfe,o4o),e(Du,r4o),e(Du,gD),e(gD,t4o),e(Du,a4o),e(Q,n4o),e(Q,Gu),e(Gu,cfe),e(cfe,s4o),e(Gu,l4o),e(Gu,hD),e(hD,i4o),e(Gu,d4o),e(Q,c4o),e(Q,Ou),e(Ou,mfe),e(mfe,m4o),e(Ou,f4o),e(Ou,uD),e(uD,g4o),e(Ou,h4o),e(Q,u4o),e(Q,Vu),e(Vu,ffe),e(ffe,p4o),e(Vu,_4o),e(Vu,pD),e(pD,b4o),e(Vu,v4o),e(Q,F4o),e(Q,Xu),e(Xu,gfe),e(gfe,T4o),e(Xu,M4o),e(Xu,_D),e(_D,E4o),e(Xu,C4o),e(Je,w4o),M(zu,Je,null),e(Je,A4o),M(Wu,Je,null),e($o,L4o),e($o,Qu),M(O8,Qu,null),e(Qu,y4o),e(Qu,hfe),e(hfe,x4o),b(m,PUe,_),b(m,ed,_),e(ed,Uu),e(Uu,ufe),M(V8,ufe,null),e(ed,$4o),e(ed,pfe),e(pfe,k4o),b(m,BUe,_),b(m,ko,_),M(X8,ko,null),e(ko,S4o),e(ko,z8),e(z8,R4o),e(z8,bD),e(bD,P4o),e(z8,B4o),e(ko,I4o),e(ko,W8),e(W8,N4o),e(W8,_fe),e(_fe,q4o),e(W8,j4o),e(ko,D4o),e(ko,Ye),M(Q8,Ye,null),e(Ye,G4o),e(Ye,bfe),e(bfe,O4o),e(Ye,V4o),e(Ye,od),e(od,X4o),e(od,vfe),e(vfe,z4o),e(od,W4o),e(od,Ffe),e(Ffe,Q4o),e(od,U4o),e(Ye,H4o),e(Ye,ce),e(ce,Hu),e(Hu,Tfe),e(Tfe,J4o),e(Hu,Y4o),e(Hu,vD),e(vD,K4o),e(Hu,Z4o),e(ce,eCo),e(ce,Ju),e(Ju,Mfe),e(Mfe,oCo),e(Ju,rCo),e(Ju,FD),e(FD,tCo),e(Ju,aCo),e(ce,nCo),e(ce,Yu),e(Yu,Efe),e(Efe,sCo),e(Yu,lCo),e(Yu,TD),e(TD,iCo),e(Yu,dCo),e(ce,cCo),e(ce,Ku),e(Ku,Cfe),e(Cfe,mCo),e(Ku,fCo),e(Ku,MD),e(MD,gCo),e(Ku,hCo),e(ce,uCo),e(ce,Zu),e(Zu,wfe),e(wfe,pCo),e(Zu,_Co),e(Zu,ED),e(ED,bCo),e(Zu,vCo),e(ce,FCo),e(ce,ep),e(ep,Afe),e(Afe,TCo),e(ep,MCo),e(ep,CD),e(CD,ECo),e(ep,CCo),e(ce,wCo),e(ce,op),e(op,Lfe),e(Lfe,ACo),e(op,LCo),e(op,wD),e(wD,yCo),e(op,xCo),e(ce,$Co),e(ce,rp),e(rp,yfe),e(yfe,kCo),e(rp,SCo),e(rp,AD),e(AD,RCo),e(rp,PCo),e(ce,BCo),e(ce,tp),e(tp,xfe),e(xfe,ICo),e(tp,NCo),e(tp,LD),e(LD,qCo),e(tp,jCo),e(ce,DCo),e(ce,ap),e(ap,$fe),e($fe,GCo),e(ap,OCo),e(ap,yD),e(yD,VCo),e(ap,XCo),e(ce,zCo),e(ce,np),e(np,kfe),e(kfe,WCo),e(np,QCo),e(np,xD),e(xD,UCo),e(np,HCo),e(ce,JCo),e(ce,sp),e(sp,Sfe),e(Sfe,YCo),e(sp,KCo),e(sp,$D),e($D,ZCo),e(sp,e3o),e(ce,o3o),e(ce,lp),e(lp,Rfe),e(Rfe,r3o),e(lp,t3o),e(lp,kD),e(kD,a3o),e(lp,n3o),e(ce,s3o),e(ce,ip),e(ip,Pfe),e(Pfe,l3o),e(ip,i3o),e(ip,SD),e(SD,d3o),e(ip,c3o),e(ce,m3o),e(ce,dp),e(dp,Bfe),e(Bfe,f3o),e(dp,g3o),e(dp,RD),e(RD,h3o),e(dp,u3o),e(ce,p3o),e(ce,cp),e(cp,Ife),e(Ife,_3o),e(cp,b3o),e(cp,PD),e(PD,v3o),e(cp,F3o),e(ce,T3o),e(ce,mp),e(mp,Nfe),e(Nfe,M3o),e(mp,E3o),e(mp,BD),e(BD,C3o),e(mp,w3o),e(ce,A3o),e(ce,fp),e(fp,qfe),e(qfe,L3o),e(fp,y3o),e(fp,ID),e(ID,x3o),e(fp,$3o),e(ce,k3o),e(ce,gp),e(gp,jfe),e(jfe,S3o),e(gp,R3o),e(gp,ND),e(ND,P3o),e(gp,B3o),e(ce,I3o),e(ce,hp),e(hp,Dfe),e(Dfe,N3o),e(hp,q3o),e(hp,qD),e(qD,j3o),e(hp,D3o),e(Ye,G3o),M(up,Ye,null),e(Ye,O3o),M(pp,Ye,null),e(ko,V3o),e(ko,_p),M(U8,_p,null),e(_p,X3o),e(_p,Gfe),e(Gfe,z3o),b(m,IUe,_),b(m,rd,_),e(rd,bp),e(bp,Ofe),M(H8,Ofe,null),e(rd,W3o),e(rd,Vfe),e(Vfe,Q3o),b(m,NUe,_),b(m,So,_),M(J8,So,null),e(So,U3o),e(So,td),e(td,H3o),e(td,jD),e(jD,J3o),e(td,Y3o),e(td,DD),e(DD,K3o),e(td,Z3o),e(So,e5o),e(So,Y8),e(Y8,o5o),e(Y8,Xfe),e(Xfe,r5o),e(Y8,t5o),e(So,a5o),e(So,ft),M(K8,ft,null),e(ft,n5o),e(ft,zfe),e(zfe,s5o),e(ft,l5o),e(ft,ad),e(ad,i5o),e(ad,Wfe),e(Wfe,d5o),e(ad,c5o),e(ad,GD),e(GD,m5o),e(ad,f5o),e(ft,g5o),M(vp,ft,null),e(So,h5o),e(So,Ke),M(Z8,Ke,null),e(Ke,u5o),e(Ke,Qfe),e(Qfe,p5o),e(Ke,_5o),e(Ke,Va),e(Va,b5o),e(Va,Ufe),e(Ufe,v5o),e(Va,F5o),e(Va,Hfe),e(Hfe,T5o),e(Va,M5o),e(Va,Jfe),e(Jfe,E5o),e(Va,C5o),e(Ke,w5o),e(Ke,y),e(y,Fp),e(Fp,Yfe),e(Yfe,A5o),e(Fp,L5o),e(Fp,OD),e(OD,y5o),e(Fp,x5o),e(y,$5o),e(y,Tp),e(Tp,Kfe),e(Kfe,k5o),e(Tp,S5o),e(Tp,VD),e(VD,R5o),e(Tp,P5o),e(y,B5o),e(y,Mp),e(Mp,Zfe),e(Zfe,I5o),e(Mp,N5o),e(Mp,XD),e(XD,q5o),e(Mp,j5o),e(y,D5o),e(y,Ep),e(Ep,ege),e(ege,G5o),e(Ep,O5o),e(Ep,zD),e(zD,V5o),e(Ep,X5o),e(y,z5o),e(y,Cp),e(Cp,oge),e(oge,W5o),e(Cp,Q5o),e(Cp,WD),e(WD,U5o),e(Cp,H5o),e(y,J5o),e(y,wp),e(wp,rge),e(rge,Y5o),e(wp,K5o),e(wp,QD),e(QD,Z5o),e(wp,e0o),e(y,o0o),e(y,Ap),e(Ap,tge),e(tge,r0o),e(Ap,t0o),e(Ap,UD),e(UD,a0o),e(Ap,n0o),e(y,s0o),e(y,Lp),e(Lp,age),e(age,l0o),e(Lp,i0o),e(Lp,HD),e(HD,d0o),e(Lp,c0o),e(y,m0o),e(y,yp),e(yp,nge),e(nge,f0o),e(yp,g0o),e(yp,JD),e(JD,h0o),e(yp,u0o),e(y,p0o),e(y,xp),e(xp,sge),e(sge,_0o),e(xp,b0o),e(xp,YD),e(YD,v0o),e(xp,F0o),e(y,T0o),e(y,$p),e($p,lge),e(lge,M0o),e($p,E0o),e($p,KD),e(KD,C0o),e($p,w0o),e(y,A0o),e(y,kp),e(kp,ige),e(ige,L0o),e(kp,y0o),e(kp,ZD),e(ZD,x0o),e(kp,$0o),e(y,k0o),e(y,Sp),e(Sp,dge),e(dge,S0o),e(Sp,R0o),e(Sp,eG),e(eG,P0o),e(Sp,B0o),e(y,I0o),e(y,Rp),e(Rp,cge),e(cge,N0o),e(Rp,q0o),e(Rp,oG),e(oG,j0o),e(Rp,D0o),e(y,G0o),e(y,Pp),e(Pp,mge),e(mge,O0o),e(Pp,V0o),e(Pp,rG),e(rG,X0o),e(Pp,z0o),e(y,W0o),e(y,Bp),e(Bp,fge),e(fge,Q0o),e(Bp,U0o),e(Bp,tG),e(tG,H0o),e(Bp,J0o),e(y,Y0o),e(y,Ip),e(Ip,gge),e(gge,K0o),e(Ip,Z0o),e(Ip,aG),e(aG,ewo),e(Ip,owo),e(y,rwo),e(y,Np),e(Np,hge),e(hge,two),e(Np,awo),e(Np,nG),e(nG,nwo),e(Np,swo),e(y,lwo),e(y,qp),e(qp,uge),e(uge,iwo),e(qp,dwo),e(qp,sG),e(sG,cwo),e(qp,mwo),e(y,fwo),e(y,jp),e(jp,pge),e(pge,gwo),e(jp,hwo),e(jp,lG),e(lG,uwo),e(jp,pwo),e(y,_wo),e(y,Dp),e(Dp,_ge),e(_ge,bwo),e(Dp,vwo),e(Dp,iG),e(iG,Fwo),e(Dp,Two),e(y,Mwo),e(y,Gp),e(Gp,bge),e(bge,Ewo),e(Gp,Cwo),e(Gp,dG),e(dG,wwo),e(Gp,Awo),e(y,Lwo),e(y,Op),e(Op,vge),e(vge,ywo),e(Op,xwo),e(Op,cG),e(cG,$wo),e(Op,kwo),e(y,Swo),e(y,Vp),e(Vp,Fge),e(Fge,Rwo),e(Vp,Pwo),e(Vp,mG),e(mG,Bwo),e(Vp,Iwo),e(y,Nwo),e(y,Xp),e(Xp,Tge),e(Tge,qwo),e(Xp,jwo),e(Xp,fG),e(fG,Dwo),e(Xp,Gwo),e(y,Owo),e(y,zp),e(zp,Mge),e(Mge,Vwo),e(zp,Xwo),e(zp,gG),e(gG,zwo),e(zp,Wwo),e(y,Qwo),e(y,Wp),e(Wp,Ege),e(Ege,Uwo),e(Wp,Hwo),e(Wp,hG),e(hG,Jwo),e(Wp,Ywo),e(y,Kwo),e(y,Qp),e(Qp,Cge),e(Cge,Zwo),e(Qp,e6o),e(Qp,uG),e(uG,o6o),e(Qp,r6o),e(y,t6o),e(y,Up),e(Up,wge),e(wge,a6o),e(Up,n6o),e(Up,pG),e(pG,s6o),e(Up,l6o),e(y,i6o),e(y,Hp),e(Hp,Age),e(Age,d6o),e(Hp,c6o),e(Hp,_G),e(_G,m6o),e(Hp,f6o),e(y,g6o),e(y,Jp),e(Jp,Lge),e(Lge,h6o),e(Jp,u6o),e(Jp,bG),e(bG,p6o),e(Jp,_6o),e(y,b6o),e(y,Yp),e(Yp,yge),e(yge,v6o),e(Yp,F6o),e(Yp,vG),e(vG,T6o),e(Yp,M6o),e(y,E6o),e(y,Kp),e(Kp,xge),e(xge,C6o),e(Kp,w6o),e(Kp,FG),e(FG,A6o),e(Kp,L6o),e(y,y6o),e(y,Zp),e(Zp,$ge),e($ge,x6o),e(Zp,$6o),e(Zp,TG),e(TG,k6o),e(Zp,S6o),e(y,R6o),e(y,e_),e(e_,kge),e(kge,P6o),e(e_,B6o),e(e_,MG),e(MG,I6o),e(e_,N6o),e(y,q6o),e(y,nl),e(nl,Sge),e(Sge,j6o),e(nl,D6o),e(nl,EG),e(EG,G6o),e(nl,O6o),e(nl,CG),e(CG,V6o),e(nl,X6o),e(y,z6o),e(y,o_),e(o_,Rge),e(Rge,W6o),e(o_,Q6o),e(o_,wG),e(wG,U6o),e(o_,H6o),e(y,J6o),e(y,r_),e(r_,Pge),e(Pge,Y6o),e(r_,K6o),e(r_,AG),e(AG,Z6o),e(r_,eAo),e(y,oAo),e(y,t_),e(t_,Bge),e(Bge,rAo),e(t_,tAo),e(t_,LG),e(LG,aAo),e(t_,nAo),e(y,sAo),e(y,a_),e(a_,Ige),e(Ige,lAo),e(a_,iAo),e(a_,yG),e(yG,dAo),e(a_,cAo),e(y,mAo),e(y,n_),e(n_,Nge),e(Nge,fAo),e(n_,gAo),e(n_,xG),e(xG,hAo),e(n_,uAo),e(y,pAo),e(y,s_),e(s_,qge),e(qge,_Ao),e(s_,bAo),e(s_,$G),e($G,vAo),e(s_,FAo),e(y,TAo),e(y,l_),e(l_,jge),e(jge,MAo),e(l_,EAo),e(l_,kG),e(kG,CAo),e(l_,wAo),e(y,AAo),e(y,i_),e(i_,Dge),e(Dge,LAo),e(i_,yAo),e(i_,SG),e(SG,xAo),e(i_,$Ao),e(y,kAo),e(y,d_),e(d_,Gge),e(Gge,SAo),e(d_,RAo),e(d_,RG),e(RG,PAo),e(d_,BAo),e(y,IAo),e(y,c_),e(c_,Oge),e(Oge,NAo),e(c_,qAo),e(c_,PG),e(PG,jAo),e(c_,DAo),e(y,GAo),e(y,m_),e(m_,Vge),e(Vge,OAo),e(m_,VAo),e(m_,BG),e(BG,XAo),e(m_,zAo),e(y,WAo),e(y,f_),e(f_,Xge),e(Xge,QAo),e(f_,UAo),e(f_,IG),e(IG,HAo),e(f_,JAo),e(y,YAo),e(y,g_),e(g_,zge),e(zge,KAo),e(g_,ZAo),e(g_,NG),e(NG,e7o),e(g_,o7o),e(y,r7o),e(y,h_),e(h_,Wge),e(Wge,t7o),e(h_,a7o),e(h_,qG),e(qG,n7o),e(h_,s7o),e(y,l7o),e(y,u_),e(u_,Qge),e(Qge,i7o),e(u_,d7o),e(u_,jG),e(jG,c7o),e(u_,m7o),e(y,f7o),e(y,p_),e(p_,Uge),e(Uge,g7o),e(p_,h7o),e(p_,DG),e(DG,u7o),e(p_,p7o),e(y,_7o),e(y,__),e(__,Hge),e(Hge,b7o),e(__,v7o),e(__,GG),e(GG,F7o),e(__,T7o),e(y,M7o),e(y,b_),e(b_,Jge),e(Jge,E7o),e(b_,C7o),e(b_,OG),e(OG,w7o),e(b_,A7o),e(y,L7o),e(y,v_),e(v_,Yge),e(Yge,y7o),e(v_,x7o),e(v_,VG),e(VG,$7o),e(v_,k7o),e(y,S7o),e(y,F_),e(F_,Kge),e(Kge,R7o),e(F_,P7o),e(F_,XG),e(XG,B7o),e(F_,I7o),e(y,N7o),e(y,T_),e(T_,Zge),e(Zge,q7o),e(T_,j7o),e(T_,zG),e(zG,D7o),e(T_,G7o),e(y,O7o),e(y,M_),e(M_,ehe),e(ehe,V7o),e(M_,X7o),e(M_,WG),e(WG,z7o),e(M_,W7o),e(y,Q7o),e(y,E_),e(E_,ohe),e(ohe,U7o),e(E_,H7o),e(E_,QG),e(QG,J7o),e(E_,Y7o),e(y,K7o),e(y,C_),e(C_,rhe),e(rhe,Z7o),e(C_,eLo),e(C_,UG),e(UG,oLo),e(C_,rLo),e(y,tLo),e(y,w_),e(w_,the),e(the,aLo),e(w_,nLo),e(w_,HG),e(HG,sLo),e(w_,lLo),e(y,iLo),e(y,A_),e(A_,ahe),e(ahe,dLo),e(A_,cLo),e(A_,JG),e(JG,mLo),e(A_,fLo),e(y,gLo),e(y,L_),e(L_,nhe),e(nhe,hLo),e(L_,uLo),e(L_,YG),e(YG,pLo),e(L_,_Lo),e(y,bLo),e(y,y_),e(y_,she),e(she,vLo),e(y_,FLo),e(y_,KG),e(KG,TLo),e(y_,MLo),e(y,ELo),e(y,x_),e(x_,lhe),e(lhe,CLo),e(x_,wLo),e(x_,ZG),e(ZG,ALo),e(x_,LLo),e(y,yLo),e(y,$_),e($_,ihe),e(ihe,xLo),e($_,$Lo),e($_,eO),e(eO,kLo),e($_,SLo),e(y,RLo),e(y,k_),e(k_,dhe),e(dhe,PLo),e(k_,BLo),e(k_,oO),e(oO,ILo),e(k_,NLo),e(y,qLo),e(y,S_),e(S_,che),e(che,jLo),e(S_,DLo),e(S_,rO),e(rO,GLo),e(S_,OLo),e(y,VLo),e(y,R_),e(R_,mhe),e(mhe,XLo),e(R_,zLo),e(R_,tO),e(tO,WLo),e(R_,QLo),e(y,ULo),e(y,P_),e(P_,fhe),e(fhe,HLo),e(P_,JLo),e(P_,aO),e(aO,YLo),e(P_,KLo),e(y,ZLo),e(y,B_),e(B_,ghe),e(ghe,eyo),e(B_,oyo),e(B_,nO),e(nO,ryo),e(B_,tyo),e(y,ayo),e(y,I_),e(I_,hhe),e(hhe,nyo),e(I_,syo),e(I_,sO),e(sO,lyo),e(I_,iyo),e(y,dyo),e(y,N_),e(N_,uhe),e(uhe,cyo),e(N_,myo),e(N_,lO),e(lO,fyo),e(N_,gyo),e(y,hyo),e(y,q_),e(q_,phe),e(phe,uyo),e(q_,pyo),e(q_,iO),e(iO,_yo),e(q_,byo),e(y,vyo),e(y,j_),e(j_,_he),e(_he,Fyo),e(j_,Tyo),e(j_,dO),e(dO,Myo),e(j_,Eyo),e(y,Cyo),e(y,D_),e(D_,bhe),e(bhe,wyo),e(D_,Ayo),e(D_,cO),e(cO,Lyo),e(D_,yyo),e(y,xyo),e(y,G_),e(G_,vhe),e(vhe,$yo),e(G_,kyo),e(G_,mO),e(mO,Syo),e(G_,Ryo),e(y,Pyo),e(y,O_),e(O_,Fhe),e(Fhe,Byo),e(O_,Iyo),e(O_,fO),e(fO,Nyo),e(O_,qyo),e(y,jyo),e(y,V_),e(V_,The),e(The,Dyo),e(V_,Gyo),e(V_,gO),e(gO,Oyo),e(V_,Vyo),e(y,Xyo),e(y,X_),e(X_,Mhe),e(Mhe,zyo),e(X_,Wyo),e(X_,hO),e(hO,Qyo),e(X_,Uyo),e(y,Hyo),e(y,z_),e(z_,Ehe),e(Ehe,Jyo),e(z_,Yyo),e(z_,uO),e(uO,Kyo),e(z_,Zyo),e(y,e8o),e(y,W_),e(W_,Che),e(Che,o8o),e(W_,r8o),e(W_,pO),e(pO,t8o),e(W_,a8o),e(y,n8o),e(y,Q_),e(Q_,whe),e(whe,s8o),e(Q_,l8o),e(Q_,_O),e(_O,i8o),e(Q_,d8o),e(y,c8o),e(y,U_),e(U_,Ahe),e(Ahe,m8o),e(U_,f8o),e(U_,bO),e(bO,g8o),e(U_,h8o),e(y,u8o),e(y,H_),e(H_,Lhe),e(Lhe,p8o),e(H_,_8o),e(H_,vO),e(vO,b8o),e(H_,v8o),e(y,F8o),e(y,J_),e(J_,yhe),e(yhe,T8o),e(J_,M8o),e(J_,FO),e(FO,E8o),e(J_,C8o),e(y,w8o),e(y,Y_),e(Y_,xhe),e(xhe,A8o),e(Y_,L8o),e(Y_,TO),e(TO,y8o),e(Y_,x8o),e(y,$8o),e(y,K_),e(K_,$he),e($he,k8o),e(K_,S8o),e(K_,MO),e(MO,R8o),e(K_,P8o),e(y,B8o),e(y,Z_),e(Z_,khe),e(khe,I8o),e(Z_,N8o),e(Z_,EO),e(EO,q8o),e(Z_,j8o),e(y,D8o),e(y,e2),e(e2,She),e(She,G8o),e(e2,O8o),e(e2,CO),e(CO,V8o),e(e2,X8o),e(y,z8o),e(y,o2),e(o2,Rhe),e(Rhe,W8o),e(o2,Q8o),e(o2,wO),e(wO,U8o),e(o2,H8o),e(y,J8o),e(y,r2),e(r2,Phe),e(Phe,Y8o),e(r2,K8o),e(r2,AO),e(AO,Z8o),e(r2,e9o),e(y,o9o),e(y,t2),e(t2,Bhe),e(Bhe,r9o),e(t2,t9o),e(t2,LO),e(LO,a9o),e(t2,n9o),e(y,s9o),e(y,a2),e(a2,Ihe),e(Ihe,l9o),e(a2,i9o),e(a2,yO),e(yO,d9o),e(a2,c9o),e(y,m9o),e(y,n2),e(n2,Nhe),e(Nhe,f9o),e(n2,g9o),e(n2,xO),e(xO,h9o),e(n2,u9o),e(y,p9o),e(y,s2),e(s2,qhe),e(qhe,_9o),e(s2,b9o),e(s2,$O),e($O,v9o),e(s2,F9o),e(y,T9o),e(y,l2),e(l2,jhe),e(jhe,M9o),e(l2,E9o),e(l2,kO),e(kO,C9o),e(l2,w9o),e(y,A9o),e(y,i2),e(i2,Dhe),e(Dhe,L9o),e(i2,y9o),e(i2,SO),e(SO,x9o),e(i2,$9o),e(y,k9o),e(y,d2),e(d2,Ghe),e(Ghe,S9o),e(d2,R9o),e(d2,RO),e(RO,P9o),e(d2,B9o),e(y,I9o),e(y,c2),e(c2,Ohe),e(Ohe,N9o),e(c2,q9o),e(c2,PO),e(PO,j9o),e(c2,D9o),e(y,G9o),e(y,m2),e(m2,Vhe),e(Vhe,O9o),e(m2,V9o),e(m2,BO),e(BO,X9o),e(m2,z9o),e(y,W9o),e(y,f2),e(f2,Xhe),e(Xhe,Q9o),e(f2,U9o),e(f2,IO),e(IO,H9o),e(f2,J9o),e(y,Y9o),e(y,g2),e(g2,zhe),e(zhe,K9o),e(g2,Z9o),e(g2,NO),e(NO,exo),e(g2,oxo),e(y,rxo),e(y,h2),e(h2,Whe),e(Whe,txo),e(h2,axo),e(h2,qO),e(qO,nxo),e(h2,sxo),e(y,lxo),e(y,u2),e(u2,Qhe),e(Qhe,ixo),e(u2,dxo),e(u2,jO),e(jO,cxo),e(u2,mxo),e(y,fxo),e(y,p2),e(p2,Uhe),e(Uhe,gxo),e(p2,hxo),e(p2,DO),e(DO,uxo),e(p2,pxo),e(y,_xo),e(y,_2),e(_2,Hhe),e(Hhe,bxo),e(_2,vxo),e(_2,GO),e(GO,Fxo),e(_2,Txo),e(y,Mxo),e(y,b2),e(b2,Jhe),e(Jhe,Exo),e(b2,Cxo),e(b2,OO),e(OO,wxo),e(b2,Axo),e(y,Lxo),e(y,v2),e(v2,Yhe),e(Yhe,yxo),e(v2,xxo),e(v2,VO),e(VO,$xo),e(v2,kxo),e(y,Sxo),e(y,F2),e(F2,Khe),e(Khe,Rxo),e(F2,Pxo),e(F2,XO),e(XO,Bxo),e(F2,Ixo),e(y,Nxo),e(y,T2),e(T2,Zhe),e(Zhe,qxo),e(T2,jxo),e(T2,zO),e(zO,Dxo),e(T2,Gxo),e(y,Oxo),e(y,M2),e(M2,eue),e(eue,Vxo),e(M2,Xxo),e(M2,WO),e(WO,zxo),e(M2,Wxo),e(y,Qxo),e(y,E2),e(E2,oue),e(oue,Uxo),e(E2,Hxo),e(E2,QO),e(QO,Jxo),e(E2,Yxo),e(y,Kxo),e(y,C2),e(C2,rue),e(rue,Zxo),e(C2,e$o),e(C2,UO),e(UO,o$o),e(C2,r$o),e(y,t$o),e(y,w2),e(w2,tue),e(tue,a$o),e(w2,n$o),e(w2,HO),e(HO,s$o),e(w2,l$o),e(y,i$o),e(y,A2),e(A2,aue),e(aue,d$o),e(A2,c$o),e(A2,JO),e(JO,m$o),e(A2,f$o),e(Ke,g$o),e(Ke,L2),e(L2,h$o),e(L2,nue),e(nue,u$o),e(L2,p$o),e(L2,sue),e(sue,_$o),e(Ke,b$o),M(y2,Ke,null),b(m,qUe,_),b(m,nd,_),e(nd,x2),e(x2,lue),M(e9,lue,null),e(nd,v$o),e(nd,iue),e(iue,F$o),b(m,jUe,_),b(m,Ro,_),M(o9,Ro,null),e(Ro,T$o),e(Ro,sd),e(sd,M$o),e(sd,YO),e(YO,E$o),e(sd,C$o),e(sd,KO),e(KO,w$o),e(sd,A$o),e(Ro,L$o),e(Ro,r9),e(r9,y$o),e(r9,due),e(due,x$o),e(r9,$$o),e(Ro,k$o),e(Ro,gt),M(t9,gt,null),e(gt,S$o),e(gt,cue),e(cue,R$o),e(gt,P$o),e(gt,ld),e(ld,B$o),e(ld,mue),e(mue,I$o),e(ld,N$o),e(ld,ZO),e(ZO,q$o),e(ld,j$o),e(gt,D$o),M($2,gt,null),e(Ro,G$o),e(Ro,Ze),M(a9,Ze,null),e(Ze,O$o),e(Ze,fue),e(fue,V$o),e(Ze,X$o),e(Ze,Xa),e(Xa,z$o),e(Xa,gue),e(gue,W$o),e(Xa,Q$o),e(Xa,hue),e(hue,U$o),e(Xa,H$o),e(Xa,uue),e(uue,J$o),e(Xa,Y$o),e(Ze,K$o),e(Ze,G),e(G,k2),e(k2,pue),e(pue,Z$o),e(k2,eko),e(k2,eV),e(eV,oko),e(k2,rko),e(G,tko),e(G,S2),e(S2,_ue),e(_ue,ako),e(S2,nko),e(S2,oV),e(oV,sko),e(S2,lko),e(G,iko),e(G,R2),e(R2,bue),e(bue,dko),e(R2,cko),e(R2,rV),e(rV,mko),e(R2,fko),e(G,gko),e(G,P2),e(P2,vue),e(vue,hko),e(P2,uko),e(P2,tV),e(tV,pko),e(P2,_ko),e(G,bko),e(G,B2),e(B2,Fue),e(Fue,vko),e(B2,Fko),e(B2,aV),e(aV,Tko),e(B2,Mko),e(G,Eko),e(G,I2),e(I2,Tue),e(Tue,Cko),e(I2,wko),e(I2,nV),e(nV,Ako),e(I2,Lko),e(G,yko),e(G,N2),e(N2,Mue),e(Mue,xko),e(N2,$ko),e(N2,sV),e(sV,kko),e(N2,Sko),e(G,Rko),e(G,q2),e(q2,Eue),e(Eue,Pko),e(q2,Bko),e(q2,lV),e(lV,Iko),e(q2,Nko),e(G,qko),e(G,j2),e(j2,Cue),e(Cue,jko),e(j2,Dko),e(j2,iV),e(iV,Gko),e(j2,Oko),e(G,Vko),e(G,D2),e(D2,wue),e(wue,Xko),e(D2,zko),e(D2,dV),e(dV,Wko),e(D2,Qko),e(G,Uko),e(G,G2),e(G2,Aue),e(Aue,Hko),e(G2,Jko),e(G2,cV),e(cV,Yko),e(G2,Kko),e(G,Zko),e(G,O2),e(O2,Lue),e(Lue,eSo),e(O2,oSo),e(O2,mV),e(mV,rSo),e(O2,tSo),e(G,aSo),e(G,V2),e(V2,yue),e(yue,nSo),e(V2,sSo),e(V2,fV),e(fV,lSo),e(V2,iSo),e(G,dSo),e(G,X2),e(X2,xue),e(xue,cSo),e(X2,mSo),e(X2,gV),e(gV,fSo),e(X2,gSo),e(G,hSo),e(G,z2),e(z2,$ue),e($ue,uSo),e(z2,pSo),e(z2,hV),e(hV,_So),e(z2,bSo),e(G,vSo),e(G,W2),e(W2,kue),e(kue,FSo),e(W2,TSo),e(W2,uV),e(uV,MSo),e(W2,ESo),e(G,CSo),e(G,Q2),e(Q2,Sue),e(Sue,wSo),e(Q2,ASo),e(Q2,pV),e(pV,LSo),e(Q2,ySo),e(G,xSo),e(G,U2),e(U2,Rue),e(Rue,$So),e(U2,kSo),e(U2,_V),e(_V,SSo),e(U2,RSo),e(G,PSo),e(G,H2),e(H2,Pue),e(Pue,BSo),e(H2,ISo),e(H2,bV),e(bV,NSo),e(H2,qSo),e(G,jSo),e(G,J2),e(J2,Bue),e(Bue,DSo),e(J2,GSo),e(J2,vV),e(vV,OSo),e(J2,VSo),e(G,XSo),e(G,Y2),e(Y2,Iue),e(Iue,zSo),e(Y2,WSo),e(Y2,FV),e(FV,QSo),e(Y2,USo),e(G,HSo),e(G,K2),e(K2,Nue),e(Nue,JSo),e(K2,YSo),e(K2,TV),e(TV,KSo),e(K2,ZSo),e(G,eRo),e(G,Z2),e(Z2,que),e(que,oRo),e(Z2,rRo),e(Z2,MV),e(MV,tRo),e(Z2,aRo),e(G,nRo),e(G,eb),e(eb,jue),e(jue,sRo),e(eb,lRo),e(eb,EV),e(EV,iRo),e(eb,dRo),e(G,cRo),e(G,ob),e(ob,Due),e(Due,mRo),e(ob,fRo),e(ob,CV),e(CV,gRo),e(ob,hRo),e(G,uRo),e(G,rb),e(rb,Gue),e(Gue,pRo),e(rb,_Ro),e(rb,wV),e(wV,bRo),e(rb,vRo),e(G,FRo),e(G,tb),e(tb,Oue),e(Oue,TRo),e(tb,MRo),e(tb,AV),e(AV,ERo),e(tb,CRo),e(G,wRo),e(G,ab),e(ab,Vue),e(Vue,ARo),e(ab,LRo),e(ab,LV),e(LV,yRo),e(ab,xRo),e(G,$Ro),e(G,nb),e(nb,Xue),e(Xue,kRo),e(nb,SRo),e(nb,yV),e(yV,RRo),e(nb,PRo),e(G,BRo),e(G,sb),e(sb,zue),e(zue,IRo),e(sb,NRo),e(sb,xV),e(xV,qRo),e(sb,jRo),e(G,DRo),e(G,lb),e(lb,Wue),e(Wue,GRo),e(lb,ORo),e(lb,$V),e($V,VRo),e(lb,XRo),e(G,zRo),e(G,ib),e(ib,Que),e(Que,WRo),e(ib,QRo),e(ib,kV),e(kV,URo),e(ib,HRo),e(G,JRo),e(G,db),e(db,Uue),e(Uue,YRo),e(db,KRo),e(db,SV),e(SV,ZRo),e(db,ePo),e(G,oPo),e(G,cb),e(cb,Hue),e(Hue,rPo),e(cb,tPo),e(cb,RV),e(RV,aPo),e(cb,nPo),e(G,sPo),e(G,mb),e(mb,Jue),e(Jue,lPo),e(mb,iPo),e(mb,PV),e(PV,dPo),e(mb,cPo),e(G,mPo),e(G,fb),e(fb,Yue),e(Yue,fPo),e(fb,gPo),e(fb,BV),e(BV,hPo),e(fb,uPo),e(G,pPo),e(G,gb),e(gb,Kue),e(Kue,_Po),e(gb,bPo),e(gb,IV),e(IV,vPo),e(gb,FPo),e(G,TPo),e(G,hb),e(hb,Zue),e(Zue,MPo),e(hb,EPo),e(hb,NV),e(NV,CPo),e(hb,wPo),e(G,APo),e(G,ub),e(ub,epe),e(epe,LPo),e(ub,yPo),e(ub,qV),e(qV,xPo),e(ub,$Po),e(G,kPo),e(G,pb),e(pb,ope),e(ope,SPo),e(pb,RPo),e(pb,jV),e(jV,PPo),e(pb,BPo),e(G,IPo),e(G,_b),e(_b,rpe),e(rpe,NPo),e(_b,qPo),e(_b,DV),e(DV,jPo),e(_b,DPo),e(G,GPo),e(G,bb),e(bb,tpe),e(tpe,OPo),e(bb,VPo),e(bb,GV),e(GV,XPo),e(bb,zPo),e(G,WPo),e(G,vb),e(vb,ape),e(ape,QPo),e(vb,UPo),e(vb,OV),e(OV,HPo),e(vb,JPo),e(G,YPo),e(G,Fb),e(Fb,npe),e(npe,KPo),e(Fb,ZPo),e(Fb,VV),e(VV,eBo),e(Fb,oBo),e(G,rBo),e(G,Tb),e(Tb,spe),e(spe,tBo),e(Tb,aBo),e(Tb,XV),e(XV,nBo),e(Tb,sBo),e(G,lBo),e(G,Mb),e(Mb,lpe),e(lpe,iBo),e(Mb,dBo),e(Mb,zV),e(zV,cBo),e(Mb,mBo),e(G,fBo),e(G,Eb),e(Eb,ipe),e(ipe,gBo),e(Eb,hBo),e(Eb,WV),e(WV,uBo),e(Eb,pBo),e(Ze,_Bo),e(Ze,Cb),e(Cb,bBo),e(Cb,dpe),e(dpe,vBo),e(Cb,FBo),e(Cb,cpe),e(cpe,TBo),e(Ze,MBo),M(wb,Ze,null),b(m,DUe,_),b(m,id,_),e(id,Ab),e(Ab,mpe),M(n9,mpe,null),e(id,EBo),e(id,fpe),e(fpe,CBo),b(m,GUe,_),b(m,Po,_),M(s9,Po,null),e(Po,wBo),e(Po,dd),e(dd,ABo),e(dd,QV),e(QV,LBo),e(dd,yBo),e(dd,UV),e(UV,xBo),e(dd,$Bo),e(Po,kBo),e(Po,l9),e(l9,SBo),e(l9,gpe),e(gpe,RBo),e(l9,PBo),e(Po,BBo),e(Po,ht),M(i9,ht,null),e(ht,IBo),e(ht,hpe),e(hpe,NBo),e(ht,qBo),e(ht,cd),e(cd,jBo),e(cd,upe),e(upe,DBo),e(cd,GBo),e(cd,HV),e(HV,OBo),e(cd,VBo),e(ht,XBo),M(Lb,ht,null),e(Po,zBo),e(Po,eo),M(d9,eo,null),e(eo,WBo),e(eo,ppe),e(ppe,QBo),e(eo,UBo),e(eo,za),e(za,HBo),e(za,_pe),e(_pe,JBo),e(za,YBo),e(za,bpe),e(bpe,KBo),e(za,ZBo),e(za,vpe),e(vpe,eIo),e(za,oIo),e(eo,rIo),e(eo,z),e(z,yb),e(yb,Fpe),e(Fpe,tIo),e(yb,aIo),e(yb,JV),e(JV,nIo),e(yb,sIo),e(z,lIo),e(z,xb),e(xb,Tpe),e(Tpe,iIo),e(xb,dIo),e(xb,YV),e(YV,cIo),e(xb,mIo),e(z,fIo),e(z,$b),e($b,Mpe),e(Mpe,gIo),e($b,hIo),e($b,KV),e(KV,uIo),e($b,pIo),e(z,_Io),e(z,kb),e(kb,Epe),e(Epe,bIo),e(kb,vIo),e(kb,ZV),e(ZV,FIo),e(kb,TIo),e(z,MIo),e(z,Sb),e(Sb,Cpe),e(Cpe,EIo),e(Sb,CIo),e(Sb,eX),e(eX,wIo),e(Sb,AIo),e(z,LIo),e(z,Rb),e(Rb,wpe),e(wpe,yIo),e(Rb,xIo),e(Rb,oX),e(oX,$Io),e(Rb,kIo),e(z,SIo),e(z,Pb),e(Pb,Ape),e(Ape,RIo),e(Pb,PIo),e(Pb,rX),e(rX,BIo),e(Pb,IIo),e(z,NIo),e(z,Bb),e(Bb,Lpe),e(Lpe,qIo),e(Bb,jIo),e(Bb,tX),e(tX,DIo),e(Bb,GIo),e(z,OIo),e(z,Ib),e(Ib,ype),e(ype,VIo),e(Ib,XIo),e(Ib,aX),e(aX,zIo),e(Ib,WIo),e(z,QIo),e(z,Nb),e(Nb,xpe),e(xpe,UIo),e(Nb,HIo),e(Nb,nX),e(nX,JIo),e(Nb,YIo),e(z,KIo),e(z,qb),e(qb,$pe),e($pe,ZIo),e(qb,eNo),e(qb,sX),e(sX,oNo),e(qb,rNo),e(z,tNo),e(z,jb),e(jb,kpe),e(kpe,aNo),e(jb,nNo),e(jb,lX),e(lX,sNo),e(jb,lNo),e(z,iNo),e(z,Db),e(Db,Spe),e(Spe,dNo),e(Db,cNo),e(Db,iX),e(iX,mNo),e(Db,fNo),e(z,gNo),e(z,Gb),e(Gb,Rpe),e(Rpe,hNo),e(Gb,uNo),e(Gb,dX),e(dX,pNo),e(Gb,_No),e(z,bNo),e(z,Ob),e(Ob,Ppe),e(Ppe,vNo),e(Ob,FNo),e(Ob,cX),e(cX,TNo),e(Ob,MNo),e(z,ENo),e(z,Vb),e(Vb,Bpe),e(Bpe,CNo),e(Vb,wNo),e(Vb,mX),e(mX,ANo),e(Vb,LNo),e(z,yNo),e(z,Xb),e(Xb,Ipe),e(Ipe,xNo),e(Xb,$No),e(Xb,fX),e(fX,kNo),e(Xb,SNo),e(z,RNo),e(z,zb),e(zb,Npe),e(Npe,PNo),e(zb,BNo),e(zb,gX),e(gX,INo),e(zb,NNo),e(z,qNo),e(z,Wb),e(Wb,qpe),e(qpe,jNo),e(Wb,DNo),e(Wb,hX),e(hX,GNo),e(Wb,ONo),e(z,VNo),e(z,Qb),e(Qb,jpe),e(jpe,XNo),e(Qb,zNo),e(Qb,uX),e(uX,WNo),e(Qb,QNo),e(z,UNo),e(z,Ub),e(Ub,Dpe),e(Dpe,HNo),e(Ub,JNo),e(Ub,pX),e(pX,YNo),e(Ub,KNo),e(z,ZNo),e(z,Hb),e(Hb,Gpe),e(Gpe,eqo),e(Hb,oqo),e(Hb,_X),e(_X,rqo),e(Hb,tqo),e(z,aqo),e(z,Jb),e(Jb,Ope),e(Ope,nqo),e(Jb,sqo),e(Jb,bX),e(bX,lqo),e(Jb,iqo),e(z,dqo),e(z,Yb),e(Yb,Vpe),e(Vpe,cqo),e(Yb,mqo),e(Yb,vX),e(vX,fqo),e(Yb,gqo),e(z,hqo),e(z,Kb),e(Kb,Xpe),e(Xpe,uqo),e(Kb,pqo),e(Kb,FX),e(FX,_qo),e(Kb,bqo),e(z,vqo),e(z,Zb),e(Zb,zpe),e(zpe,Fqo),e(Zb,Tqo),e(Zb,TX),e(TX,Mqo),e(Zb,Eqo),e(z,Cqo),e(z,ev),e(ev,Wpe),e(Wpe,wqo),e(ev,Aqo),e(ev,MX),e(MX,Lqo),e(ev,yqo),e(z,xqo),e(z,ov),e(ov,Qpe),e(Qpe,$qo),e(ov,kqo),e(ov,EX),e(EX,Sqo),e(ov,Rqo),e(z,Pqo),e(z,rv),e(rv,Upe),e(Upe,Bqo),e(rv,Iqo),e(rv,CX),e(CX,Nqo),e(rv,qqo),e(z,jqo),e(z,tv),e(tv,Hpe),e(Hpe,Dqo),e(tv,Gqo),e(tv,wX),e(wX,Oqo),e(tv,Vqo),e(z,Xqo),e(z,av),e(av,Jpe),e(Jpe,zqo),e(av,Wqo),e(av,AX),e(AX,Qqo),e(av,Uqo),e(z,Hqo),e(z,nv),e(nv,Ype),e(Ype,Jqo),e(nv,Yqo),e(nv,LX),e(LX,Kqo),e(nv,Zqo),e(z,ejo),e(z,sv),e(sv,Kpe),e(Kpe,ojo),e(sv,rjo),e(sv,yX),e(yX,tjo),e(sv,ajo),e(z,njo),e(z,lv),e(lv,Zpe),e(Zpe,sjo),e(lv,ljo),e(lv,xX),e(xX,ijo),e(lv,djo),e(z,cjo),e(z,iv),e(iv,e_e),e(e_e,mjo),e(iv,fjo),e(iv,$X),e($X,gjo),e(iv,hjo),e(z,ujo),e(z,dv),e(dv,o_e),e(o_e,pjo),e(dv,_jo),e(dv,kX),e(kX,bjo),e(dv,vjo),e(z,Fjo),e(z,cv),e(cv,r_e),e(r_e,Tjo),e(cv,Mjo),e(cv,SX),e(SX,Ejo),e(cv,Cjo),e(z,wjo),e(z,mv),e(mv,t_e),e(t_e,Ajo),e(mv,Ljo),e(mv,RX),e(RX,yjo),e(mv,xjo),e(z,$jo),e(z,fv),e(fv,a_e),e(a_e,kjo),e(fv,Sjo),e(fv,PX),e(PX,Rjo),e(fv,Pjo),e(z,Bjo),e(z,gv),e(gv,n_e),e(n_e,Ijo),e(gv,Njo),e(gv,BX),e(BX,qjo),e(gv,jjo),e(eo,Djo),e(eo,hv),e(hv,Gjo),e(hv,s_e),e(s_e,Ojo),e(hv,Vjo),e(hv,l_e),e(l_e,Xjo),e(eo,zjo),M(uv,eo,null),b(m,OUe,_),b(m,md,_),e(md,pv),e(pv,i_e),M(c9,i_e,null),e(md,Wjo),e(md,d_e),e(d_e,Qjo),b(m,VUe,_),b(m,Bo,_),M(m9,Bo,null),e(Bo,Ujo),e(Bo,fd),e(fd,Hjo),e(fd,IX),e(IX,Jjo),e(fd,Yjo),e(fd,NX),e(NX,Kjo),e(fd,Zjo),e(Bo,eDo),e(Bo,f9),e(f9,oDo),e(f9,c_e),e(c_e,rDo),e(f9,tDo),e(Bo,aDo),e(Bo,ut),M(g9,ut,null),e(ut,nDo),e(ut,m_e),e(m_e,sDo),e(ut,lDo),e(ut,gd),e(gd,iDo),e(gd,f_e),e(f_e,dDo),e(gd,cDo),e(gd,qX),e(qX,mDo),e(gd,fDo),e(ut,gDo),M(_v,ut,null),e(Bo,hDo),e(Bo,oo),M(h9,oo,null),e(oo,uDo),e(oo,g_e),e(g_e,pDo),e(oo,_Do),e(oo,Wa),e(Wa,bDo),e(Wa,h_e),e(h_e,vDo),e(Wa,FDo),e(Wa,u_e),e(u_e,TDo),e(Wa,MDo),e(Wa,p_e),e(p_e,EDo),e(Wa,CDo),e(oo,wDo),e(oo,U),e(U,bv),e(bv,__e),e(__e,ADo),e(bv,LDo),e(bv,jX),e(jX,yDo),e(bv,xDo),e(U,$Do),e(U,vv),e(vv,b_e),e(b_e,kDo),e(vv,SDo),e(vv,DX),e(DX,RDo),e(vv,PDo),e(U,BDo),e(U,Fv),e(Fv,v_e),e(v_e,IDo),e(Fv,NDo),e(Fv,GX),e(GX,qDo),e(Fv,jDo),e(U,DDo),e(U,Tv),e(Tv,F_e),e(F_e,GDo),e(Tv,ODo),e(Tv,OX),e(OX,VDo),e(Tv,XDo),e(U,zDo),e(U,Mv),e(Mv,T_e),e(T_e,WDo),e(Mv,QDo),e(Mv,VX),e(VX,UDo),e(Mv,HDo),e(U,JDo),e(U,Ev),e(Ev,M_e),e(M_e,YDo),e(Ev,KDo),e(Ev,XX),e(XX,ZDo),e(Ev,eGo),e(U,oGo),e(U,Cv),e(Cv,E_e),e(E_e,rGo),e(Cv,tGo),e(Cv,zX),e(zX,aGo),e(Cv,nGo),e(U,sGo),e(U,wv),e(wv,C_e),e(C_e,lGo),e(wv,iGo),e(wv,WX),e(WX,dGo),e(wv,cGo),e(U,mGo),e(U,Av),e(Av,w_e),e(w_e,fGo),e(Av,gGo),e(Av,QX),e(QX,hGo),e(Av,uGo),e(U,pGo),e(U,Lv),e(Lv,A_e),e(A_e,_Go),e(Lv,bGo),e(Lv,UX),e(UX,vGo),e(Lv,FGo),e(U,TGo),e(U,yv),e(yv,L_e),e(L_e,MGo),e(yv,EGo),e(yv,HX),e(HX,CGo),e(yv,wGo),e(U,AGo),e(U,xv),e(xv,y_e),e(y_e,LGo),e(xv,yGo),e(xv,JX),e(JX,xGo),e(xv,$Go),e(U,kGo),e(U,$v),e($v,x_e),e(x_e,SGo),e($v,RGo),e($v,YX),e(YX,PGo),e($v,BGo),e(U,IGo),e(U,kv),e(kv,$_e),e($_e,NGo),e(kv,qGo),e(kv,KX),e(KX,jGo),e(kv,DGo),e(U,GGo),e(U,Sv),e(Sv,k_e),e(k_e,OGo),e(Sv,VGo),e(Sv,ZX),e(ZX,XGo),e(Sv,zGo),e(U,WGo),e(U,Rv),e(Rv,S_e),e(S_e,QGo),e(Rv,UGo),e(Rv,ez),e(ez,HGo),e(Rv,JGo),e(U,YGo),e(U,Pv),e(Pv,R_e),e(R_e,KGo),e(Pv,ZGo),e(Pv,oz),e(oz,eOo),e(Pv,oOo),e(U,rOo),e(U,Bv),e(Bv,P_e),e(P_e,tOo),e(Bv,aOo),e(Bv,rz),e(rz,nOo),e(Bv,sOo),e(U,lOo),e(U,Iv),e(Iv,B_e),e(B_e,iOo),e(Iv,dOo),e(Iv,tz),e(tz,cOo),e(Iv,mOo),e(U,fOo),e(U,Nv),e(Nv,I_e),e(I_e,gOo),e(Nv,hOo),e(Nv,az),e(az,uOo),e(Nv,pOo),e(U,_Oo),e(U,qv),e(qv,N_e),e(N_e,bOo),e(qv,vOo),e(qv,nz),e(nz,FOo),e(qv,TOo),e(U,MOo),e(U,jv),e(jv,q_e),e(q_e,EOo),e(jv,COo),e(jv,sz),e(sz,wOo),e(jv,AOo),e(U,LOo),e(U,Dv),e(Dv,j_e),e(j_e,yOo),e(Dv,xOo),e(Dv,lz),e(lz,$Oo),e(Dv,kOo),e(U,SOo),e(U,Gv),e(Gv,D_e),e(D_e,ROo),e(Gv,POo),e(Gv,iz),e(iz,BOo),e(Gv,IOo),e(U,NOo),e(U,Ov),e(Ov,G_e),e(G_e,qOo),e(Ov,jOo),e(Ov,dz),e(dz,DOo),e(Ov,GOo),e(U,OOo),e(U,Vv),e(Vv,O_e),e(O_e,VOo),e(Vv,XOo),e(Vv,cz),e(cz,zOo),e(Vv,WOo),e(U,QOo),e(U,Xv),e(Xv,V_e),e(V_e,UOo),e(Xv,HOo),e(Xv,mz),e(mz,JOo),e(Xv,YOo),e(U,KOo),e(U,zv),e(zv,X_e),e(X_e,ZOo),e(zv,eVo),e(zv,fz),e(fz,oVo),e(zv,rVo),e(U,tVo),e(U,Wv),e(Wv,z_e),e(z_e,aVo),e(Wv,nVo),e(Wv,gz),e(gz,sVo),e(Wv,lVo),e(U,iVo),e(U,Qv),e(Qv,W_e),e(W_e,dVo),e(Qv,cVo),e(Qv,hz),e(hz,mVo),e(Qv,fVo),e(U,gVo),e(U,Uv),e(Uv,Q_e),e(Q_e,hVo),e(Uv,uVo),e(Uv,uz),e(uz,pVo),e(Uv,_Vo),e(U,bVo),e(U,Hv),e(Hv,U_e),e(U_e,vVo),e(Hv,FVo),e(Hv,pz),e(pz,TVo),e(Hv,MVo),e(U,EVo),e(U,Jv),e(Jv,H_e),e(H_e,CVo),e(Jv,wVo),e(Jv,_z),e(_z,AVo),e(Jv,LVo),e(U,yVo),e(U,Yv),e(Yv,J_e),e(J_e,xVo),e(Yv,$Vo),e(Yv,Y_e),e(Y_e,kVo),e(Yv,SVo),e(U,RVo),e(U,Kv),e(Kv,K_e),e(K_e,PVo),e(Kv,BVo),e(Kv,bz),e(bz,IVo),e(Kv,NVo),e(U,qVo),e(U,Zv),e(Zv,Z_e),e(Z_e,jVo),e(Zv,DVo),e(Zv,vz),e(vz,GVo),e(Zv,OVo),e(U,VVo),e(U,e1),e(e1,e2e),e(e2e,XVo),e(e1,zVo),e(e1,Fz),e(Fz,WVo),e(e1,QVo),e(U,UVo),e(U,o1),e(o1,o2e),e(o2e,HVo),e(o1,JVo),e(o1,Tz),e(Tz,YVo),e(o1,KVo),e(oo,ZVo),e(oo,r1),e(r1,eXo),e(r1,r2e),e(r2e,oXo),e(r1,rXo),e(r1,t2e),e(t2e,tXo),e(oo,aXo),M(t1,oo,null),b(m,XUe,_),b(m,hd,_),e(hd,a1),e(a1,a2e),M(u9,a2e,null),e(hd,nXo),e(hd,n2e),e(n2e,sXo),b(m,zUe,_),b(m,Io,_),M(p9,Io,null),e(Io,lXo),e(Io,ud),e(ud,iXo),e(ud,Mz),e(Mz,dXo),e(ud,cXo),e(ud,Ez),e(Ez,mXo),e(ud,fXo),e(Io,gXo),e(Io,_9),e(_9,hXo),e(_9,s2e),e(s2e,uXo),e(_9,pXo),e(Io,_Xo),e(Io,pt),M(b9,pt,null),e(pt,bXo),e(pt,l2e),e(l2e,vXo),e(pt,FXo),e(pt,pd),e(pd,TXo),e(pd,i2e),e(i2e,MXo),e(pd,EXo),e(pd,Cz),e(Cz,CXo),e(pd,wXo),e(pt,AXo),M(n1,pt,null),e(Io,LXo),e(Io,ro),M(v9,ro,null),e(ro,yXo),e(ro,d2e),e(d2e,xXo),e(ro,$Xo),e(ro,Qa),e(Qa,kXo),e(Qa,c2e),e(c2e,SXo),e(Qa,RXo),e(Qa,m2e),e(m2e,PXo),e(Qa,BXo),e(Qa,f2e),e(f2e,IXo),e(Qa,NXo),e(ro,qXo),e(ro,he),e(he,s1),e(s1,g2e),e(g2e,jXo),e(s1,DXo),e(s1,wz),e(wz,GXo),e(s1,OXo),e(he,VXo),e(he,l1),e(l1,h2e),e(h2e,XXo),e(l1,zXo),e(l1,Az),e(Az,WXo),e(l1,QXo),e(he,UXo),e(he,i1),e(i1,u2e),e(u2e,HXo),e(i1,JXo),e(i1,Lz),e(Lz,YXo),e(i1,KXo),e(he,ZXo),e(he,d1),e(d1,p2e),e(p2e,ezo),e(d1,ozo),e(d1,yz),e(yz,rzo),e(d1,tzo),e(he,azo),e(he,c1),e(c1,_2e),e(_2e,nzo),e(c1,szo),e(c1,xz),e(xz,lzo),e(c1,izo),e(he,dzo),e(he,m1),e(m1,b2e),e(b2e,czo),e(m1,mzo),e(m1,$z),e($z,fzo),e(m1,gzo),e(he,hzo),e(he,f1),e(f1,v2e),e(v2e,uzo),e(f1,pzo),e(f1,kz),e(kz,_zo),e(f1,bzo),e(he,vzo),e(he,g1),e(g1,F2e),e(F2e,Fzo),e(g1,Tzo),e(g1,Sz),e(Sz,Mzo),e(g1,Ezo),e(he,Czo),e(he,h1),e(h1,T2e),e(T2e,wzo),e(h1,Azo),e(h1,Rz),e(Rz,Lzo),e(h1,yzo),e(he,xzo),e(he,u1),e(u1,M2e),e(M2e,$zo),e(u1,kzo),e(u1,Pz),e(Pz,Szo),e(u1,Rzo),e(he,Pzo),e(he,p1),e(p1,E2e),e(E2e,Bzo),e(p1,Izo),e(p1,Bz),e(Bz,Nzo),e(p1,qzo),e(he,jzo),e(he,_1),e(_1,C2e),e(C2e,Dzo),e(_1,Gzo),e(_1,Iz),e(Iz,Ozo),e(_1,Vzo),e(he,Xzo),e(he,b1),e(b1,w2e),e(w2e,zzo),e(b1,Wzo),e(b1,Nz),e(Nz,Qzo),e(b1,Uzo),e(he,Hzo),e(he,v1),e(v1,A2e),e(A2e,Jzo),e(v1,Yzo),e(v1,qz),e(qz,Kzo),e(v1,Zzo),e(he,eWo),e(he,F1),e(F1,L2e),e(L2e,oWo),e(F1,rWo),e(F1,jz),e(jz,tWo),e(F1,aWo),e(he,nWo),e(he,T1),e(T1,y2e),e(y2e,sWo),e(T1,lWo),e(T1,Dz),e(Dz,iWo),e(T1,dWo),e(he,cWo),e(he,M1),e(M1,x2e),e(x2e,mWo),e(M1,fWo),e(M1,Gz),e(Gz,gWo),e(M1,hWo),e(he,uWo),e(he,E1),e(E1,$2e),e($2e,pWo),e(E1,_Wo),e(E1,Oz),e(Oz,bWo),e(E1,vWo),e(he,FWo),e(he,C1),e(C1,k2e),e(k2e,TWo),e(C1,MWo),e(C1,Vz),e(Vz,EWo),e(C1,CWo),e(ro,wWo),e(ro,w1),e(w1,AWo),e(w1,S2e),e(S2e,LWo),e(w1,yWo),e(w1,R2e),e(R2e,xWo),e(ro,$Wo),M(A1,ro,null),b(m,WUe,_),b(m,_d,_),e(_d,L1),e(L1,P2e),M(F9,P2e,null),e(_d,kWo),e(_d,B2e),e(B2e,SWo),b(m,QUe,_),b(m,No,_),M(T9,No,null),e(No,RWo),e(No,bd),e(bd,PWo),e(bd,Xz),e(Xz,BWo),e(bd,IWo),e(bd,zz),e(zz,NWo),e(bd,qWo),e(No,jWo),e(No,M9),e(M9,DWo),e(M9,I2e),e(I2e,GWo),e(M9,OWo),e(No,VWo),e(No,_t),M(E9,_t,null),e(_t,XWo),e(_t,N2e),e(N2e,zWo),e(_t,WWo),e(_t,vd),e(vd,QWo),e(vd,q2e),e(q2e,UWo),e(vd,HWo),e(vd,Wz),e(Wz,JWo),e(vd,YWo),e(_t,KWo),M(y1,_t,null),e(No,ZWo),e(No,to),M(C9,to,null),e(to,eQo),e(to,j2e),e(j2e,oQo),e(to,rQo),e(to,Ua),e(Ua,tQo),e(Ua,D2e),e(D2e,aQo),e(Ua,nQo),e(Ua,G2e),e(G2e,sQo),e(Ua,lQo),e(Ua,O2e),e(O2e,iQo),e(Ua,dQo),e(to,cQo),e(to,j),e(j,x1),e(x1,V2e),e(V2e,mQo),e(x1,fQo),e(x1,Qz),e(Qz,gQo),e(x1,hQo),e(j,uQo),e(j,$1),e($1,X2e),e(X2e,pQo),e($1,_Qo),e($1,Uz),e(Uz,bQo),e($1,vQo),e(j,FQo),e(j,k1),e(k1,z2e),e(z2e,TQo),e(k1,MQo),e(k1,Hz),e(Hz,EQo),e(k1,CQo),e(j,wQo),e(j,S1),e(S1,W2e),e(W2e,AQo),e(S1,LQo),e(S1,Jz),e(Jz,yQo),e(S1,xQo),e(j,$Qo),e(j,R1),e(R1,Q2e),e(Q2e,kQo),e(R1,SQo),e(R1,Yz),e(Yz,RQo),e(R1,PQo),e(j,BQo),e(j,P1),e(P1,U2e),e(U2e,IQo),e(P1,NQo),e(P1,Kz),e(Kz,qQo),e(P1,jQo),e(j,DQo),e(j,B1),e(B1,H2e),e(H2e,GQo),e(B1,OQo),e(B1,Zz),e(Zz,VQo),e(B1,XQo),e(j,zQo),e(j,I1),e(I1,J2e),e(J2e,WQo),e(I1,QQo),e(I1,eW),e(eW,UQo),e(I1,HQo),e(j,JQo),e(j,N1),e(N1,Y2e),e(Y2e,YQo),e(N1,KQo),e(N1,oW),e(oW,ZQo),e(N1,eUo),e(j,oUo),e(j,q1),e(q1,K2e),e(K2e,rUo),e(q1,tUo),e(q1,rW),e(rW,aUo),e(q1,nUo),e(j,sUo),e(j,j1),e(j1,Z2e),e(Z2e,lUo),e(j1,iUo),e(j1,tW),e(tW,dUo),e(j1,cUo),e(j,mUo),e(j,D1),e(D1,ebe),e(ebe,fUo),e(D1,gUo),e(D1,aW),e(aW,hUo),e(D1,uUo),e(j,pUo),e(j,G1),e(G1,obe),e(obe,_Uo),e(G1,bUo),e(G1,nW),e(nW,vUo),e(G1,FUo),e(j,TUo),e(j,O1),e(O1,rbe),e(rbe,MUo),e(O1,EUo),e(O1,sW),e(sW,CUo),e(O1,wUo),e(j,AUo),e(j,V1),e(V1,tbe),e(tbe,LUo),e(V1,yUo),e(V1,lW),e(lW,xUo),e(V1,$Uo),e(j,kUo),e(j,X1),e(X1,abe),e(abe,SUo),e(X1,RUo),e(X1,iW),e(iW,PUo),e(X1,BUo),e(j,IUo),e(j,z1),e(z1,nbe),e(nbe,NUo),e(z1,qUo),e(z1,dW),e(dW,jUo),e(z1,DUo),e(j,GUo),e(j,W1),e(W1,sbe),e(sbe,OUo),e(W1,VUo),e(W1,cW),e(cW,XUo),e(W1,zUo),e(j,WUo),e(j,Q1),e(Q1,lbe),e(lbe,QUo),e(Q1,UUo),e(Q1,mW),e(mW,HUo),e(Q1,JUo),e(j,YUo),e(j,U1),e(U1,ibe),e(ibe,KUo),e(U1,ZUo),e(U1,fW),e(fW,eHo),e(U1,oHo),e(j,rHo),e(j,H1),e(H1,dbe),e(dbe,tHo),e(H1,aHo),e(H1,gW),e(gW,nHo),e(H1,sHo),e(j,lHo),e(j,J1),e(J1,cbe),e(cbe,iHo),e(J1,dHo),e(J1,hW),e(hW,cHo),e(J1,mHo),e(j,fHo),e(j,Y1),e(Y1,mbe),e(mbe,gHo),e(Y1,hHo),e(Y1,uW),e(uW,uHo),e(Y1,pHo),e(j,_Ho),e(j,K1),e(K1,fbe),e(fbe,bHo),e(K1,vHo),e(K1,pW),e(pW,FHo),e(K1,THo),e(j,MHo),e(j,Z1),e(Z1,gbe),e(gbe,EHo),e(Z1,CHo),e(Z1,_W),e(_W,wHo),e(Z1,AHo),e(j,LHo),e(j,eF),e(eF,hbe),e(hbe,yHo),e(eF,xHo),e(eF,bW),e(bW,$Ho),e(eF,kHo),e(j,SHo),e(j,oF),e(oF,ube),e(ube,RHo),e(oF,PHo),e(oF,vW),e(vW,BHo),e(oF,IHo),e(j,NHo),e(j,rF),e(rF,pbe),e(pbe,qHo),e(rF,jHo),e(rF,FW),e(FW,DHo),e(rF,GHo),e(j,OHo),e(j,tF),e(tF,_be),e(_be,VHo),e(tF,XHo),e(tF,TW),e(TW,zHo),e(tF,WHo),e(j,QHo),e(j,aF),e(aF,bbe),e(bbe,UHo),e(aF,HHo),e(aF,MW),e(MW,JHo),e(aF,YHo),e(j,KHo),e(j,nF),e(nF,vbe),e(vbe,ZHo),e(nF,eJo),e(nF,EW),e(EW,oJo),e(nF,rJo),e(j,tJo),e(j,sF),e(sF,Fbe),e(Fbe,aJo),e(sF,nJo),e(sF,CW),e(CW,sJo),e(sF,lJo),e(j,iJo),e(j,lF),e(lF,Tbe),e(Tbe,dJo),e(lF,cJo),e(lF,wW),e(wW,mJo),e(lF,fJo),e(j,gJo),e(j,iF),e(iF,Mbe),e(Mbe,hJo),e(iF,uJo),e(iF,AW),e(AW,pJo),e(iF,_Jo),e(j,bJo),e(j,dF),e(dF,Ebe),e(Ebe,vJo),e(dF,FJo),e(dF,LW),e(LW,TJo),e(dF,MJo),e(j,EJo),e(j,cF),e(cF,Cbe),e(Cbe,CJo),e(cF,wJo),e(cF,yW),e(yW,AJo),e(cF,LJo),e(j,yJo),e(j,mF),e(mF,wbe),e(wbe,xJo),e(mF,$Jo),e(mF,xW),e(xW,kJo),e(mF,SJo),e(j,RJo),e(j,fF),e(fF,Abe),e(Abe,PJo),e(fF,BJo),e(fF,$W),e($W,IJo),e(fF,NJo),e(j,qJo),e(j,gF),e(gF,Lbe),e(Lbe,jJo),e(gF,DJo),e(gF,kW),e(kW,GJo),e(gF,OJo),e(j,VJo),e(j,hF),e(hF,ybe),e(ybe,XJo),e(hF,zJo),e(hF,SW),e(SW,WJo),e(hF,QJo),e(j,UJo),e(j,uF),e(uF,xbe),e(xbe,HJo),e(uF,JJo),e(uF,RW),e(RW,YJo),e(uF,KJo),e(j,ZJo),e(j,pF),e(pF,$be),e($be,eYo),e(pF,oYo),e(pF,PW),e(PW,rYo),e(pF,tYo),e(j,aYo),e(j,_F),e(_F,kbe),e(kbe,nYo),e(_F,sYo),e(_F,BW),e(BW,lYo),e(_F,iYo),e(j,dYo),e(j,bF),e(bF,Sbe),e(Sbe,cYo),e(bF,mYo),e(bF,IW),e(IW,fYo),e(bF,gYo),e(j,hYo),e(j,vF),e(vF,Rbe),e(Rbe,uYo),e(vF,pYo),e(vF,NW),e(NW,_Yo),e(vF,bYo),e(j,vYo),e(j,FF),e(FF,Pbe),e(Pbe,FYo),e(FF,TYo),e(FF,qW),e(qW,MYo),e(FF,EYo),e(j,CYo),e(j,TF),e(TF,Bbe),e(Bbe,wYo),e(TF,AYo),e(TF,jW),e(jW,LYo),e(TF,yYo),e(j,xYo),e(j,MF),e(MF,Ibe),e(Ibe,$Yo),e(MF,kYo),e(MF,DW),e(DW,SYo),e(MF,RYo),e(j,PYo),e(j,EF),e(EF,Nbe),e(Nbe,BYo),e(EF,IYo),e(EF,GW),e(GW,NYo),e(EF,qYo),e(j,jYo),e(j,CF),e(CF,qbe),e(qbe,DYo),e(CF,GYo),e(CF,OW),e(OW,OYo),e(CF,VYo),e(j,XYo),e(j,wF),e(wF,jbe),e(jbe,zYo),e(wF,WYo),e(wF,VW),e(VW,QYo),e(wF,UYo),e(j,HYo),e(j,AF),e(AF,Dbe),e(Dbe,JYo),e(AF,YYo),e(AF,XW),e(XW,KYo),e(AF,ZYo),e(to,eKo),e(to,LF),e(LF,oKo),e(LF,Gbe),e(Gbe,rKo),e(LF,tKo),e(LF,Obe),e(Obe,aKo),e(to,nKo),M(yF,to,null),b(m,UUe,_),b(m,Fd,_),e(Fd,xF),e(xF,Vbe),M(w9,Vbe,null),e(Fd,sKo),e(Fd,Xbe),e(Xbe,lKo),b(m,HUe,_),b(m,qo,_),M(A9,qo,null),e(qo,iKo),e(qo,Td),e(Td,dKo),e(Td,zW),e(zW,cKo),e(Td,mKo),e(Td,WW),e(WW,fKo),e(Td,gKo),e(qo,hKo),e(qo,L9),e(L9,uKo),e(L9,zbe),e(zbe,pKo),e(L9,_Ko),e(qo,bKo),e(qo,bt),M(y9,bt,null),e(bt,vKo),e(bt,Wbe),e(Wbe,FKo),e(bt,TKo),e(bt,Md),e(Md,MKo),e(Md,Qbe),e(Qbe,EKo),e(Md,CKo),e(Md,QW),e(QW,wKo),e(Md,AKo),e(bt,LKo),M($F,bt,null),e(qo,yKo),e(qo,ao),M(x9,ao,null),e(ao,xKo),e(ao,Ube),e(Ube,$Ko),e(ao,kKo),e(ao,Ha),e(Ha,SKo),e(Ha,Hbe),e(Hbe,RKo),e(Ha,PKo),e(Ha,Jbe),e(Jbe,BKo),e(Ha,IKo),e(Ha,Ybe),e(Ybe,NKo),e(Ha,qKo),e(ao,jKo),e(ao,Z),e(Z,kF),e(kF,Kbe),e(Kbe,DKo),e(kF,GKo),e(kF,UW),e(UW,OKo),e(kF,VKo),e(Z,XKo),e(Z,SF),e(SF,Zbe),e(Zbe,zKo),e(SF,WKo),e(SF,HW),e(HW,QKo),e(SF,UKo),e(Z,HKo),e(Z,RF),e(RF,eve),e(eve,JKo),e(RF,YKo),e(RF,JW),e(JW,KKo),e(RF,ZKo),e(Z,eZo),e(Z,PF),e(PF,ove),e(ove,oZo),e(PF,rZo),e(PF,YW),e(YW,tZo),e(PF,aZo),e(Z,nZo),e(Z,BF),e(BF,rve),e(rve,sZo),e(BF,lZo),e(BF,KW),e(KW,iZo),e(BF,dZo),e(Z,cZo),e(Z,IF),e(IF,tve),e(tve,mZo),e(IF,fZo),e(IF,ZW),e(ZW,gZo),e(IF,hZo),e(Z,uZo),e(Z,NF),e(NF,ave),e(ave,pZo),e(NF,_Zo),e(NF,eQ),e(eQ,bZo),e(NF,vZo),e(Z,FZo),e(Z,qF),e(qF,nve),e(nve,TZo),e(qF,MZo),e(qF,oQ),e(oQ,EZo),e(qF,CZo),e(Z,wZo),e(Z,jF),e(jF,sve),e(sve,AZo),e(jF,LZo),e(jF,rQ),e(rQ,yZo),e(jF,xZo),e(Z,$Zo),e(Z,DF),e(DF,lve),e(lve,kZo),e(DF,SZo),e(DF,tQ),e(tQ,RZo),e(DF,PZo),e(Z,BZo),e(Z,GF),e(GF,ive),e(ive,IZo),e(GF,NZo),e(GF,aQ),e(aQ,qZo),e(GF,jZo),e(Z,DZo),e(Z,OF),e(OF,dve),e(dve,GZo),e(OF,OZo),e(OF,nQ),e(nQ,VZo),e(OF,XZo),e(Z,zZo),e(Z,VF),e(VF,cve),e(cve,WZo),e(VF,QZo),e(VF,sQ),e(sQ,UZo),e(VF,HZo),e(Z,JZo),e(Z,XF),e(XF,mve),e(mve,YZo),e(XF,KZo),e(XF,lQ),e(lQ,ZZo),e(XF,eer),e(Z,oer),e(Z,zF),e(zF,fve),e(fve,rer),e(zF,ter),e(zF,iQ),e(iQ,aer),e(zF,ner),e(Z,ser),e(Z,WF),e(WF,gve),e(gve,ler),e(WF,ier),e(WF,dQ),e(dQ,der),e(WF,cer),e(Z,mer),e(Z,QF),e(QF,hve),e(hve,fer),e(QF,ger),e(QF,cQ),e(cQ,her),e(QF,uer),e(Z,per),e(Z,UF),e(UF,uve),e(uve,_er),e(UF,ber),e(UF,mQ),e(mQ,ver),e(UF,Fer),e(Z,Ter),e(Z,HF),e(HF,pve),e(pve,Mer),e(HF,Eer),e(HF,fQ),e(fQ,Cer),e(HF,wer),e(Z,Aer),e(Z,JF),e(JF,_ve),e(_ve,Ler),e(JF,yer),e(JF,gQ),e(gQ,xer),e(JF,$er),e(Z,ker),e(Z,YF),e(YF,bve),e(bve,Ser),e(YF,Rer),e(YF,hQ),e(hQ,Per),e(YF,Ber),e(Z,Ier),e(Z,KF),e(KF,vve),e(vve,Ner),e(KF,qer),e(KF,uQ),e(uQ,jer),e(KF,Der),e(Z,Ger),e(Z,ZF),e(ZF,Fve),e(Fve,Oer),e(ZF,Ver),e(ZF,pQ),e(pQ,Xer),e(ZF,zer),e(Z,Wer),e(Z,eT),e(eT,Tve),e(Tve,Qer),e(eT,Uer),e(eT,_Q),e(_Q,Her),e(eT,Jer),e(Z,Yer),e(Z,oT),e(oT,Mve),e(Mve,Ker),e(oT,Zer),e(oT,bQ),e(bQ,eor),e(oT,oor),e(Z,ror),e(Z,rT),e(rT,Eve),e(Eve,tor),e(rT,aor),e(rT,vQ),e(vQ,nor),e(rT,sor),e(Z,lor),e(Z,tT),e(tT,Cve),e(Cve,ior),e(tT,dor),e(tT,FQ),e(FQ,cor),e(tT,mor),e(Z,gor),e(Z,aT),e(aT,wve),e(wve,hor),e(aT,uor),e(aT,TQ),e(TQ,por),e(aT,_or),e(Z,bor),e(Z,nT),e(nT,Ave),e(Ave,vor),e(nT,For),e(nT,MQ),e(MQ,Tor),e(nT,Mor),e(Z,Eor),e(Z,sT),e(sT,Lve),e(Lve,Cor),e(sT,wor),e(sT,EQ),e(EQ,Aor),e(sT,Lor),e(Z,yor),e(Z,lT),e(lT,yve),e(yve,xor),e(lT,$or),e(lT,CQ),e(CQ,kor),e(lT,Sor),e(ao,Ror),e(ao,iT),e(iT,Por),e(iT,xve),e(xve,Bor),e(iT,Ior),e(iT,$ve),e($ve,Nor),e(ao,qor),M(dT,ao,null),b(m,JUe,_),b(m,Ed,_),e(Ed,cT),e(cT,kve),M($9,kve,null),e(Ed,jor),e(Ed,Sve),e(Sve,Dor),b(m,YUe,_),b(m,jo,_),M(k9,jo,null),e(jo,Gor),e(jo,Cd),e(Cd,Oor),e(Cd,wQ),e(wQ,Vor),e(Cd,Xor),e(Cd,AQ),e(AQ,zor),e(Cd,Wor),e(jo,Qor),e(jo,S9),e(S9,Uor),e(S9,Rve),e(Rve,Hor),e(S9,Jor),e(jo,Yor),e(jo,vt),M(R9,vt,null),e(vt,Kor),e(vt,Pve),e(Pve,Zor),e(vt,err),e(vt,wd),e(wd,orr),e(wd,Bve),e(Bve,rrr),e(wd,trr),e(wd,LQ),e(LQ,arr),e(wd,nrr),e(vt,srr),M(mT,vt,null),e(jo,lrr),e(jo,no),M(P9,no,null),e(no,irr),e(no,Ive),e(Ive,drr),e(no,crr),e(no,Ja),e(Ja,mrr),e(Ja,Nve),e(Nve,frr),e(Ja,grr),e(Ja,qve),e(qve,hrr),e(Ja,urr),e(Ja,jve),e(jve,prr),e(Ja,_rr),e(no,brr),e(no,Do),e(Do,fT),e(fT,Dve),e(Dve,vrr),e(fT,Frr),e(fT,yQ),e(yQ,Trr),e(fT,Mrr),e(Do,Err),e(Do,gT),e(gT,Gve),e(Gve,Crr),e(gT,wrr),e(gT,xQ),e(xQ,Arr),e(gT,Lrr),e(Do,yrr),e(Do,hT),e(hT,Ove),e(Ove,xrr),e(hT,$rr),e(hT,$Q),e($Q,krr),e(hT,Srr),e(Do,Rrr),e(Do,uT),e(uT,Vve),e(Vve,Prr),e(uT,Brr),e(uT,kQ),e(kQ,Irr),e(uT,Nrr),e(Do,qrr),e(Do,pT),e(pT,Xve),e(Xve,jrr),e(pT,Drr),e(pT,SQ),e(SQ,Grr),e(pT,Orr),e(Do,Vrr),e(Do,_T),e(_T,zve),e(zve,Xrr),e(_T,zrr),e(_T,RQ),e(RQ,Wrr),e(_T,Qrr),e(no,Urr),e(no,bT),e(bT,Hrr),e(bT,Wve),e(Wve,Jrr),e(bT,Yrr),e(bT,Qve),e(Qve,Krr),e(no,Zrr),M(vT,no,null),b(m,KUe,_),b(m,Ad,_),e(Ad,FT),e(FT,Uve),M(B9,Uve,null),e(Ad,etr),e(Ad,Hve),e(Hve,otr),b(m,ZUe,_),b(m,Go,_),M(I9,Go,null),e(Go,rtr),e(Go,Ld),e(Ld,ttr),e(Ld,PQ),e(PQ,atr),e(Ld,ntr),e(Ld,BQ),e(BQ,str),e(Ld,ltr),e(Go,itr),e(Go,N9),e(N9,dtr),e(N9,Jve),e(Jve,ctr),e(N9,mtr),e(Go,ftr),e(Go,Ft),M(q9,Ft,null),e(Ft,gtr),e(Ft,Yve),e(Yve,htr),e(Ft,utr),e(Ft,yd),e(yd,ptr),e(yd,Kve),e(Kve,_tr),e(yd,btr),e(yd,IQ),e(IQ,vtr),e(yd,Ftr),e(Ft,Ttr),M(TT,Ft,null),e(Go,Mtr),e(Go,so),M(j9,so,null),e(so,Etr),e(so,Zve),e(Zve,Ctr),e(so,wtr),e(so,Ya),e(Ya,Atr),e(Ya,e1e),e(e1e,Ltr),e(Ya,ytr),e(Ya,o1e),e(o1e,xtr),e(Ya,$tr),e(Ya,r1e),e(r1e,ktr),e(Ya,Str),e(so,Rtr),e(so,H),e(H,MT),e(MT,t1e),e(t1e,Ptr),e(MT,Btr),e(MT,NQ),e(NQ,Itr),e(MT,Ntr),e(H,qtr),e(H,ET),e(ET,a1e),e(a1e,jtr),e(ET,Dtr),e(ET,qQ),e(qQ,Gtr),e(ET,Otr),e(H,Vtr),e(H,CT),e(CT,n1e),e(n1e,Xtr),e(CT,ztr),e(CT,jQ),e(jQ,Wtr),e(CT,Qtr),e(H,Utr),e(H,wT),e(wT,s1e),e(s1e,Htr),e(wT,Jtr),e(wT,DQ),e(DQ,Ytr),e(wT,Ktr),e(H,Ztr),e(H,AT),e(AT,l1e),e(l1e,ear),e(AT,oar),e(AT,GQ),e(GQ,rar),e(AT,tar),e(H,aar),e(H,LT),e(LT,i1e),e(i1e,nar),e(LT,sar),e(LT,OQ),e(OQ,lar),e(LT,iar),e(H,dar),e(H,yT),e(yT,d1e),e(d1e,car),e(yT,mar),e(yT,VQ),e(VQ,far),e(yT,gar),e(H,har),e(H,xT),e(xT,c1e),e(c1e,uar),e(xT,par),e(xT,XQ),e(XQ,_ar),e(xT,bar),e(H,Far),e(H,$T),e($T,m1e),e(m1e,Tar),e($T,Mar),e($T,zQ),e(zQ,Ear),e($T,Car),e(H,war),e(H,kT),e(kT,f1e),e(f1e,Aar),e(kT,Lar),e(kT,WQ),e(WQ,yar),e(kT,xar),e(H,$ar),e(H,ST),e(ST,g1e),e(g1e,kar),e(ST,Sar),e(ST,QQ),e(QQ,Rar),e(ST,Par),e(H,Bar),e(H,RT),e(RT,h1e),e(h1e,Iar),e(RT,Nar),e(RT,UQ),e(UQ,qar),e(RT,jar),e(H,Dar),e(H,PT),e(PT,u1e),e(u1e,Gar),e(PT,Oar),e(PT,HQ),e(HQ,Var),e(PT,Xar),e(H,zar),e(H,BT),e(BT,p1e),e(p1e,War),e(BT,Qar),e(BT,JQ),e(JQ,Uar),e(BT,Har),e(H,Jar),e(H,IT),e(IT,_1e),e(_1e,Yar),e(IT,Kar),e(IT,YQ),e(YQ,Zar),e(IT,enr),e(H,onr),e(H,NT),e(NT,b1e),e(b1e,rnr),e(NT,tnr),e(NT,KQ),e(KQ,anr),e(NT,nnr),e(H,snr),e(H,qT),e(qT,v1e),e(v1e,lnr),e(qT,inr),e(qT,ZQ),e(ZQ,dnr),e(qT,cnr),e(H,mnr),e(H,jT),e(jT,F1e),e(F1e,fnr),e(jT,gnr),e(jT,eU),e(eU,hnr),e(jT,unr),e(H,pnr),e(H,DT),e(DT,T1e),e(T1e,_nr),e(DT,bnr),e(DT,oU),e(oU,vnr),e(DT,Fnr),e(H,Tnr),e(H,GT),e(GT,M1e),e(M1e,Mnr),e(GT,Enr),e(GT,rU),e(rU,Cnr),e(GT,wnr),e(H,Anr),e(H,OT),e(OT,E1e),e(E1e,Lnr),e(OT,ynr),e(OT,tU),e(tU,xnr),e(OT,$nr),e(H,knr),e(H,VT),e(VT,C1e),e(C1e,Snr),e(VT,Rnr),e(VT,aU),e(aU,Pnr),e(VT,Bnr),e(H,Inr),e(H,XT),e(XT,w1e),e(w1e,Nnr),e(XT,qnr),e(XT,nU),e(nU,jnr),e(XT,Dnr),e(H,Gnr),e(H,zT),e(zT,A1e),e(A1e,Onr),e(zT,Vnr),e(zT,sU),e(sU,Xnr),e(zT,znr),e(H,Wnr),e(H,WT),e(WT,L1e),e(L1e,Qnr),e(WT,Unr),e(WT,lU),e(lU,Hnr),e(WT,Jnr),e(H,Ynr),e(H,QT),e(QT,y1e),e(y1e,Knr),e(QT,Znr),e(QT,iU),e(iU,esr),e(QT,osr),e(H,rsr),e(H,UT),e(UT,x1e),e(x1e,tsr),e(UT,asr),e(UT,dU),e(dU,nsr),e(UT,ssr),e(H,lsr),e(H,HT),e(HT,$1e),e($1e,isr),e(HT,dsr),e(HT,cU),e(cU,csr),e(HT,msr),e(H,fsr),e(H,JT),e(JT,k1e),e(k1e,gsr),e(JT,hsr),e(JT,mU),e(mU,usr),e(JT,psr),e(H,_sr),e(H,YT),e(YT,S1e),e(S1e,bsr),e(YT,vsr),e(YT,fU),e(fU,Fsr),e(YT,Tsr),e(H,Msr),e(H,KT),e(KT,R1e),e(R1e,Esr),e(KT,Csr),e(KT,gU),e(gU,wsr),e(KT,Asr),e(H,Lsr),e(H,ZT),e(ZT,P1e),e(P1e,ysr),e(ZT,xsr),e(ZT,hU),e(hU,$sr),e(ZT,ksr),e(H,Ssr),e(H,eM),e(eM,B1e),e(B1e,Rsr),e(eM,Psr),e(eM,uU),e(uU,Bsr),e(eM,Isr),e(H,Nsr),e(H,oM),e(oM,I1e),e(I1e,qsr),e(oM,jsr),e(oM,pU),e(pU,Dsr),e(oM,Gsr),e(H,Osr),e(H,rM),e(rM,N1e),e(N1e,Vsr),e(rM,Xsr),e(rM,_U),e(_U,zsr),e(rM,Wsr),e(H,Qsr),e(H,tM),e(tM,q1e),e(q1e,Usr),e(tM,Hsr),e(tM,bU),e(bU,Jsr),e(tM,Ysr),e(H,Ksr),e(H,aM),e(aM,j1e),e(j1e,Zsr),e(aM,elr),e(aM,vU),e(vU,olr),e(aM,rlr),e(so,tlr),e(so,nM),e(nM,alr),e(nM,D1e),e(D1e,nlr),e(nM,slr),e(nM,G1e),e(G1e,llr),e(so,ilr),M(sM,so,null),b(m,eHe,_),b(m,xd,_),e(xd,lM),e(lM,O1e),M(D9,O1e,null),e(xd,dlr),e(xd,V1e),e(V1e,clr),b(m,oHe,_),b(m,Oo,_),M(G9,Oo,null),e(Oo,mlr),e(Oo,$d),e($d,flr),e($d,FU),e(FU,glr),e($d,hlr),e($d,TU),e(TU,ulr),e($d,plr),e(Oo,_lr),e(Oo,O9),e(O9,blr),e(O9,X1e),e(X1e,vlr),e(O9,Flr),e(Oo,Tlr),e(Oo,Tt),M(V9,Tt,null),e(Tt,Mlr),e(Tt,z1e),e(z1e,Elr),e(Tt,Clr),e(Tt,kd),e(kd,wlr),e(kd,W1e),e(W1e,Alr),e(kd,Llr),e(kd,MU),e(MU,ylr),e(kd,xlr),e(Tt,$lr),M(iM,Tt,null),e(Oo,klr),e(Oo,lo),M(X9,lo,null),e(lo,Slr),e(lo,Q1e),e(Q1e,Rlr),e(lo,Plr),e(lo,Ka),e(Ka,Blr),e(Ka,U1e),e(U1e,Ilr),e(Ka,Nlr),e(Ka,H1e),e(H1e,qlr),e(Ka,jlr),e(Ka,J1e),e(J1e,Dlr),e(Ka,Glr),e(lo,Olr),e(lo,V),e(V,dM),e(dM,Y1e),e(Y1e,Vlr),e(dM,Xlr),e(dM,EU),e(EU,zlr),e(dM,Wlr),e(V,Qlr),e(V,cM),e(cM,K1e),e(K1e,Ulr),e(cM,Hlr),e(cM,CU),e(CU,Jlr),e(cM,Ylr),e(V,Klr),e(V,mM),e(mM,Z1e),e(Z1e,Zlr),e(mM,eir),e(mM,wU),e(wU,oir),e(mM,rir),e(V,tir),e(V,fM),e(fM,eFe),e(eFe,air),e(fM,nir),e(fM,AU),e(AU,sir),e(fM,lir),e(V,iir),e(V,gM),e(gM,oFe),e(oFe,dir),e(gM,cir),e(gM,LU),e(LU,mir),e(gM,fir),e(V,gir),e(V,hM),e(hM,rFe),e(rFe,hir),e(hM,uir),e(hM,yU),e(yU,pir),e(hM,_ir),e(V,bir),e(V,uM),e(uM,tFe),e(tFe,vir),e(uM,Fir),e(uM,xU),e(xU,Tir),e(uM,Mir),e(V,Eir),e(V,pM),e(pM,aFe),e(aFe,Cir),e(pM,wir),e(pM,$U),e($U,Air),e(pM,Lir),e(V,yir),e(V,_M),e(_M,nFe),e(nFe,xir),e(_M,$ir),e(_M,kU),e(kU,kir),e(_M,Sir),e(V,Rir),e(V,bM),e(bM,sFe),e(sFe,Pir),e(bM,Bir),e(bM,SU),e(SU,Iir),e(bM,Nir),e(V,qir),e(V,vM),e(vM,lFe),e(lFe,jir),e(vM,Dir),e(vM,RU),e(RU,Gir),e(vM,Oir),e(V,Vir),e(V,FM),e(FM,iFe),e(iFe,Xir),e(FM,zir),e(FM,PU),e(PU,Wir),e(FM,Qir),e(V,Uir),e(V,TM),e(TM,dFe),e(dFe,Hir),e(TM,Jir),e(TM,BU),e(BU,Yir),e(TM,Kir),e(V,Zir),e(V,MM),e(MM,cFe),e(cFe,edr),e(MM,odr),e(MM,IU),e(IU,rdr),e(MM,tdr),e(V,adr),e(V,EM),e(EM,mFe),e(mFe,ndr),e(EM,sdr),e(EM,NU),e(NU,ldr),e(EM,idr),e(V,ddr),e(V,CM),e(CM,fFe),e(fFe,cdr),e(CM,mdr),e(CM,qU),e(qU,fdr),e(CM,gdr),e(V,hdr),e(V,wM),e(wM,gFe),e(gFe,udr),e(wM,pdr),e(wM,jU),e(jU,_dr),e(wM,bdr),e(V,vdr),e(V,AM),e(AM,hFe),e(hFe,Fdr),e(AM,Tdr),e(AM,DU),e(DU,Mdr),e(AM,Edr),e(V,Cdr),e(V,LM),e(LM,uFe),e(uFe,wdr),e(LM,Adr),e(LM,GU),e(GU,Ldr),e(LM,ydr),e(V,xdr),e(V,yM),e(yM,pFe),e(pFe,$dr),e(yM,kdr),e(yM,OU),e(OU,Sdr),e(yM,Rdr),e(V,Pdr),e(V,xM),e(xM,_Fe),e(_Fe,Bdr),e(xM,Idr),e(xM,VU),e(VU,Ndr),e(xM,qdr),e(V,jdr),e(V,$M),e($M,bFe),e(bFe,Ddr),e($M,Gdr),e($M,XU),e(XU,Odr),e($M,Vdr),e(V,Xdr),e(V,kM),e(kM,vFe),e(vFe,zdr),e(kM,Wdr),e(kM,zU),e(zU,Qdr),e(kM,Udr),e(V,Hdr),e(V,SM),e(SM,FFe),e(FFe,Jdr),e(SM,Ydr),e(SM,WU),e(WU,Kdr),e(SM,Zdr),e(V,ecr),e(V,RM),e(RM,TFe),e(TFe,ocr),e(RM,rcr),e(RM,QU),e(QU,tcr),e(RM,acr),e(V,ncr),e(V,PM),e(PM,MFe),e(MFe,scr),e(PM,lcr),e(PM,UU),e(UU,icr),e(PM,dcr),e(V,ccr),e(V,BM),e(BM,EFe),e(EFe,mcr),e(BM,fcr),e(BM,HU),e(HU,gcr),e(BM,hcr),e(V,ucr),e(V,IM),e(IM,CFe),e(CFe,pcr),e(IM,_cr),e(IM,JU),e(JU,bcr),e(IM,vcr),e(V,Fcr),e(V,NM),e(NM,wFe),e(wFe,Tcr),e(NM,Mcr),e(NM,YU),e(YU,Ecr),e(NM,Ccr),e(V,wcr),e(V,qM),e(qM,AFe),e(AFe,Acr),e(qM,Lcr),e(qM,KU),e(KU,ycr),e(qM,xcr),e(V,$cr),e(V,jM),e(jM,LFe),e(LFe,kcr),e(jM,Scr),e(jM,ZU),e(ZU,Rcr),e(jM,Pcr),e(V,Bcr),e(V,DM),e(DM,yFe),e(yFe,Icr),e(DM,Ncr),e(DM,eH),e(eH,qcr),e(DM,jcr),e(V,Dcr),e(V,GM),e(GM,xFe),e(xFe,Gcr),e(GM,Ocr),e(GM,oH),e(oH,Vcr),e(GM,Xcr),e(V,zcr),e(V,OM),e(OM,$Fe),e($Fe,Wcr),e(OM,Qcr),e(OM,rH),e(rH,Ucr),e(OM,Hcr),e(V,Jcr),e(V,VM),e(VM,kFe),e(kFe,Ycr),e(VM,Kcr),e(VM,tH),e(tH,Zcr),e(VM,emr),e(V,omr),e(V,XM),e(XM,SFe),e(SFe,rmr),e(XM,tmr),e(XM,aH),e(aH,amr),e(XM,nmr),e(V,smr),e(V,zM),e(zM,RFe),e(RFe,lmr),e(zM,imr),e(zM,nH),e(nH,dmr),e(zM,cmr),e(V,mmr),e(V,WM),e(WM,PFe),e(PFe,fmr),e(WM,gmr),e(WM,sH),e(sH,hmr),e(WM,umr),e(V,pmr),e(V,QM),e(QM,BFe),e(BFe,_mr),e(QM,bmr),e(QM,lH),e(lH,vmr),e(QM,Fmr),e(V,Tmr),e(V,UM),e(UM,IFe),e(IFe,Mmr),e(UM,Emr),e(UM,iH),e(iH,Cmr),e(UM,wmr),e(V,Amr),e(V,HM),e(HM,NFe),e(NFe,Lmr),e(HM,ymr),e(HM,dH),e(dH,xmr),e(HM,$mr),e(V,kmr),e(V,JM),e(JM,qFe),e(qFe,Smr),e(JM,Rmr),e(JM,cH),e(cH,Pmr),e(JM,Bmr),e(V,Imr),e(V,YM),e(YM,jFe),e(jFe,Nmr),e(YM,qmr),e(YM,mH),e(mH,jmr),e(YM,Dmr),e(lo,Gmr),e(lo,KM),e(KM,Omr),e(KM,DFe),e(DFe,Vmr),e(KM,Xmr),e(KM,GFe),e(GFe,zmr),e(lo,Wmr),M(ZM,lo,null),b(m,rHe,_),b(m,Sd,_),e(Sd,eE),e(eE,OFe),M(z9,OFe,null),e(Sd,Qmr),e(Sd,VFe),e(VFe,Umr),b(m,tHe,_),b(m,Vo,_),M(W9,Vo,null),e(Vo,Hmr),e(Vo,Rd),e(Rd,Jmr),e(Rd,fH),e(fH,Ymr),e(Rd,Kmr),e(Rd,gH),e(gH,Zmr),e(Rd,efr),e(Vo,ofr),e(Vo,Q9),e(Q9,rfr),e(Q9,XFe),e(XFe,tfr),e(Q9,afr),e(Vo,nfr),e(Vo,Mt),M(U9,Mt,null),e(Mt,sfr),e(Mt,zFe),e(zFe,lfr),e(Mt,ifr),e(Mt,Pd),e(Pd,dfr),e(Pd,WFe),e(WFe,cfr),e(Pd,mfr),e(Pd,hH),e(hH,ffr),e(Pd,gfr),e(Mt,hfr),M(oE,Mt,null),e(Vo,ufr),e(Vo,io),M(H9,io,null),e(io,pfr),e(io,QFe),e(QFe,_fr),e(io,bfr),e(io,Za),e(Za,vfr),e(Za,UFe),e(UFe,Ffr),e(Za,Tfr),e(Za,HFe),e(HFe,Mfr),e(Za,Efr),e(Za,JFe),e(JFe,Cfr),e(Za,wfr),e(io,Afr),e(io,YFe),e(YFe,rE),e(rE,KFe),e(KFe,Lfr),e(rE,yfr),e(rE,uH),e(uH,xfr),e(rE,$fr),e(io,kfr),e(io,tE),e(tE,Sfr),e(tE,ZFe),e(ZFe,Rfr),e(tE,Pfr),e(tE,eTe),e(eTe,Bfr),e(io,Ifr),M(aE,io,null),b(m,aHe,_),b(m,Bd,_),e(Bd,nE),e(nE,oTe),M(J9,oTe,null),e(Bd,Nfr),e(Bd,rTe),e(rTe,qfr),b(m,nHe,_),b(m,Xo,_),M(Y9,Xo,null),e(Xo,jfr),e(Xo,Id),e(Id,Dfr),e(Id,pH),e(pH,Gfr),e(Id,Ofr),e(Id,_H),e(_H,Vfr),e(Id,Xfr),e(Xo,zfr),e(Xo,K9),e(K9,Wfr),e(K9,tTe),e(tTe,Qfr),e(K9,Ufr),e(Xo,Hfr),e(Xo,Et),M(Z9,Et,null),e(Et,Jfr),e(Et,aTe),e(aTe,Yfr),e(Et,Kfr),e(Et,Nd),e(Nd,Zfr),e(Nd,nTe),e(nTe,egr),e(Nd,ogr),e(Nd,bH),e(bH,rgr),e(Nd,tgr),e(Et,agr),M(sE,Et,null),e(Xo,ngr),e(Xo,co),M(ex,co,null),e(co,sgr),e(co,sTe),e(sTe,lgr),e(co,igr),e(co,en),e(en,dgr),e(en,lTe),e(lTe,cgr),e(en,mgr),e(en,iTe),e(iTe,fgr),e(en,ggr),e(en,dTe),e(dTe,hgr),e(en,ugr),e(co,pgr),e(co,be),e(be,lE),e(lE,cTe),e(cTe,_gr),e(lE,bgr),e(lE,vH),e(vH,vgr),e(lE,Fgr),e(be,Tgr),e(be,iE),e(iE,mTe),e(mTe,Mgr),e(iE,Egr),e(iE,FH),e(FH,Cgr),e(iE,wgr),e(be,Agr),e(be,dE),e(dE,fTe),e(fTe,Lgr),e(dE,ygr),e(dE,TH),e(TH,xgr),e(dE,$gr),e(be,kgr),e(be,cE),e(cE,gTe),e(gTe,Sgr),e(cE,Rgr),e(cE,MH),e(MH,Pgr),e(cE,Bgr),e(be,Igr),e(be,sl),e(sl,hTe),e(hTe,Ngr),e(sl,qgr),e(sl,EH),e(EH,jgr),e(sl,Dgr),e(sl,CH),e(CH,Ggr),e(sl,Ogr),e(be,Vgr),e(be,mE),e(mE,uTe),e(uTe,Xgr),e(mE,zgr),e(mE,wH),e(wH,Wgr),e(mE,Qgr),e(be,Ugr),e(be,ll),e(ll,pTe),e(pTe,Hgr),e(ll,Jgr),e(ll,AH),e(AH,Ygr),e(ll,Kgr),e(ll,LH),e(LH,Zgr),e(ll,ehr),e(be,ohr),e(be,fE),e(fE,_Te),e(_Te,rhr),e(fE,thr),e(fE,yH),e(yH,ahr),e(fE,nhr),e(be,shr),e(be,Ct),e(Ct,bTe),e(bTe,lhr),e(Ct,ihr),e(Ct,xH),e(xH,dhr),e(Ct,chr),e(Ct,$H),e($H,mhr),e(Ct,fhr),e(Ct,kH),e(kH,ghr),e(Ct,hhr),e(be,uhr),e(be,gE),e(gE,vTe),e(vTe,phr),e(gE,_hr),e(gE,SH),e(SH,bhr),e(gE,vhr),e(be,Fhr),e(be,hE),e(hE,FTe),e(FTe,Thr),e(hE,Mhr),e(hE,RH),e(RH,Ehr),e(hE,Chr),e(be,whr),e(be,uE),e(uE,TTe),e(TTe,Ahr),e(uE,Lhr),e(uE,PH),e(PH,yhr),e(uE,xhr),e(be,$hr),e(be,pE),e(pE,MTe),e(MTe,khr),e(pE,Shr),e(pE,BH),e(BH,Rhr),e(pE,Phr),e(be,Bhr),e(be,_E),e(_E,ETe),e(ETe,Ihr),e(_E,Nhr),e(_E,IH),e(IH,qhr),e(_E,jhr),e(be,Dhr),e(be,bE),e(bE,CTe),e(CTe,Ghr),e(bE,Ohr),e(bE,NH),e(NH,Vhr),e(bE,Xhr),e(be,zhr),e(be,vE),e(vE,wTe),e(wTe,Whr),e(vE,Qhr),e(vE,qH),e(qH,Uhr),e(vE,Hhr),e(be,Jhr),e(be,FE),e(FE,ATe),e(ATe,Yhr),e(FE,Khr),e(FE,jH),e(jH,Zhr),e(FE,eur),e(co,our),e(co,TE),e(TE,rur),e(TE,LTe),e(LTe,tur),e(TE,aur),e(TE,yTe),e(yTe,nur),e(co,sur),M(ME,co,null),b(m,sHe,_),b(m,qd,_),e(qd,EE),e(EE,xTe),M(ox,xTe,null),e(qd,lur),e(qd,$Te),e($Te,iur),b(m,lHe,_),b(m,zo,_),M(rx,zo,null),e(zo,dur),e(zo,jd),e(jd,cur),e(jd,DH),e(DH,mur),e(jd,fur),e(jd,GH),e(GH,gur),e(jd,hur),e(zo,uur),e(zo,tx),e(tx,pur),e(tx,kTe),e(kTe,_ur),e(tx,bur),e(zo,vur),e(zo,wt),M(ax,wt,null),e(wt,Fur),e(wt,STe),e(STe,Tur),e(wt,Mur),e(wt,Dd),e(Dd,Eur),e(Dd,RTe),e(RTe,Cur),e(Dd,wur),e(Dd,OH),e(OH,Aur),e(Dd,Lur),e(wt,yur),M(CE,wt,null),e(zo,xur),e(zo,mo),M(nx,mo,null),e(mo,$ur),e(mo,PTe),e(PTe,kur),e(mo,Sur),e(mo,on),e(on,Rur),e(on,BTe),e(BTe,Pur),e(on,Bur),e(on,ITe),e(ITe,Iur),e(on,Nur),e(on,NTe),e(NTe,qur),e(on,jur),e(mo,Dur),e(mo,qTe),e(qTe,wE),e(wE,jTe),e(jTe,Gur),e(wE,Our),e(wE,VH),e(VH,Vur),e(wE,Xur),e(mo,zur),e(mo,AE),e(AE,Wur),e(AE,DTe),e(DTe,Qur),e(AE,Uur),e(AE,GTe),e(GTe,Hur),e(mo,Jur),M(LE,mo,null),b(m,iHe,_),b(m,Gd,_),e(Gd,yE),e(yE,OTe),M(sx,OTe,null),e(Gd,Yur),e(Gd,VTe),e(VTe,Kur),b(m,dHe,_),b(m,Wo,_),M(lx,Wo,null),e(Wo,Zur),e(Wo,Od),e(Od,epr),e(Od,XH),e(XH,opr),e(Od,rpr),e(Od,zH),e(zH,tpr),e(Od,apr),e(Wo,npr),e(Wo,ix),e(ix,spr),e(ix,XTe),e(XTe,lpr),e(ix,ipr),e(Wo,dpr),e(Wo,At),M(dx,At,null),e(At,cpr),e(At,zTe),e(zTe,mpr),e(At,fpr),e(At,Vd),e(Vd,gpr),e(Vd,WTe),e(WTe,hpr),e(Vd,upr),e(Vd,WH),e(WH,ppr),e(Vd,_pr),e(At,bpr),M(xE,At,null),e(Wo,vpr),e(Wo,fo),M(cx,fo,null),e(fo,Fpr),e(fo,QTe),e(QTe,Tpr),e(fo,Mpr),e(fo,rn),e(rn,Epr),e(rn,UTe),e(UTe,Cpr),e(rn,wpr),e(rn,HTe),e(HTe,Apr),e(rn,Lpr),e(rn,JTe),e(JTe,ypr),e(rn,xpr),e(fo,$pr),e(fo,YTe),e(YTe,$E),e($E,KTe),e(KTe,kpr),e($E,Spr),e($E,QH),e(QH,Rpr),e($E,Ppr),e(fo,Bpr),e(fo,kE),e(kE,Ipr),e(kE,ZTe),e(ZTe,Npr),e(kE,qpr),e(kE,eMe),e(eMe,jpr),e(fo,Dpr),M(SE,fo,null),b(m,cHe,_),b(m,Xd,_),e(Xd,RE),e(RE,oMe),M(mx,oMe,null),e(Xd,Gpr),e(Xd,rMe),e(rMe,Opr),b(m,mHe,_),b(m,Qo,_),M(fx,Qo,null),e(Qo,Vpr),e(Qo,zd),e(zd,Xpr),e(zd,UH),e(UH,zpr),e(zd,Wpr),e(zd,HH),e(HH,Qpr),e(zd,Upr),e(Qo,Hpr),e(Qo,gx),e(gx,Jpr),e(gx,tMe),e(tMe,Ypr),e(gx,Kpr),e(Qo,Zpr),e(Qo,Lt),M(hx,Lt,null),e(Lt,e_r),e(Lt,aMe),e(aMe,o_r),e(Lt,r_r),e(Lt,Wd),e(Wd,t_r),e(Wd,nMe),e(nMe,a_r),e(Wd,n_r),e(Wd,JH),e(JH,s_r),e(Wd,l_r),e(Lt,i_r),M(PE,Lt,null),e(Qo,d_r),e(Qo,go),M(ux,go,null),e(go,c_r),e(go,sMe),e(sMe,m_r),e(go,f_r),e(go,tn),e(tn,g_r),e(tn,lMe),e(lMe,h_r),e(tn,u_r),e(tn,iMe),e(iMe,p_r),e(tn,__r),e(tn,dMe),e(dMe,b_r),e(tn,v_r),e(go,F_r),e(go,cMe),e(cMe,BE),e(BE,mMe),e(mMe,T_r),e(BE,M_r),e(BE,YH),e(YH,E_r),e(BE,C_r),e(go,w_r),e(go,IE),e(IE,A_r),e(IE,fMe),e(fMe,L_r),e(IE,y_r),e(IE,gMe),e(gMe,x_r),e(go,$_r),M(NE,go,null),b(m,fHe,_),b(m,Qd,_),e(Qd,qE),e(qE,hMe),M(px,hMe,null),e(Qd,k_r),e(Qd,uMe),e(uMe,S_r),b(m,gHe,_),b(m,Uo,_),M(_x,Uo,null),e(Uo,R_r),e(Uo,Ud),e(Ud,P_r),e(Ud,KH),e(KH,B_r),e(Ud,I_r),e(Ud,ZH),e(ZH,N_r),e(Ud,q_r),e(Uo,j_r),e(Uo,bx),e(bx,D_r),e(bx,pMe),e(pMe,G_r),e(bx,O_r),e(Uo,V_r),e(Uo,yt),M(vx,yt,null),e(yt,X_r),e(yt,_Me),e(_Me,z_r),e(yt,W_r),e(yt,Hd),e(Hd,Q_r),e(Hd,bMe),e(bMe,U_r),e(Hd,H_r),e(Hd,eJ),e(eJ,J_r),e(Hd,Y_r),e(yt,K_r),M(jE,yt,null),e(Uo,Z_r),e(Uo,ho),M(Fx,ho,null),e(ho,e2r),e(ho,vMe),e(vMe,o2r),e(ho,r2r),e(ho,an),e(an,t2r),e(an,FMe),e(FMe,a2r),e(an,n2r),e(an,TMe),e(TMe,s2r),e(an,l2r),e(an,MMe),e(MMe,i2r),e(an,d2r),e(ho,c2r),e(ho,Pe),e(Pe,DE),e(DE,EMe),e(EMe,m2r),e(DE,f2r),e(DE,oJ),e(oJ,g2r),e(DE,h2r),e(Pe,u2r),e(Pe,GE),e(GE,CMe),e(CMe,p2r),e(GE,_2r),e(GE,rJ),e(rJ,b2r),e(GE,v2r),e(Pe,F2r),e(Pe,OE),e(OE,wMe),e(wMe,T2r),e(OE,M2r),e(OE,tJ),e(tJ,E2r),e(OE,C2r),e(Pe,w2r),e(Pe,VE),e(VE,AMe),e(AMe,A2r),e(VE,L2r),e(VE,aJ),e(aJ,y2r),e(VE,x2r),e(Pe,$2r),e(Pe,XE),e(XE,LMe),e(LMe,k2r),e(XE,S2r),e(XE,nJ),e(nJ,R2r),e(XE,P2r),e(Pe,B2r),e(Pe,zE),e(zE,yMe),e(yMe,I2r),e(zE,N2r),e(zE,sJ),e(sJ,q2r),e(zE,j2r),e(Pe,D2r),e(Pe,WE),e(WE,xMe),e(xMe,G2r),e(WE,O2r),e(WE,lJ),e(lJ,V2r),e(WE,X2r),e(Pe,z2r),e(Pe,QE),e(QE,$Me),e($Me,W2r),e(QE,Q2r),e(QE,iJ),e(iJ,U2r),e(QE,H2r),e(Pe,J2r),e(Pe,UE),e(UE,kMe),e(kMe,Y2r),e(UE,K2r),e(UE,dJ),e(dJ,Z2r),e(UE,ebr),e(ho,obr),e(ho,HE),e(HE,rbr),e(HE,SMe),e(SMe,tbr),e(HE,abr),e(HE,RMe),e(RMe,nbr),e(ho,sbr),M(JE,ho,null),b(m,hHe,_),b(m,Jd,_),e(Jd,YE),e(YE,PMe),M(Tx,PMe,null),e(Jd,lbr),e(Jd,BMe),e(BMe,ibr),b(m,uHe,_),b(m,Ho,_),M(Mx,Ho,null),e(Ho,dbr),e(Ho,Yd),e(Yd,cbr),e(Yd,cJ),e(cJ,mbr),e(Yd,fbr),e(Yd,mJ),e(mJ,gbr),e(Yd,hbr),e(Ho,ubr),e(Ho,Ex),e(Ex,pbr),e(Ex,IMe),e(IMe,_br),e(Ex,bbr),e(Ho,vbr),e(Ho,xt),M(Cx,xt,null),e(xt,Fbr),e(xt,NMe),e(NMe,Tbr),e(xt,Mbr),e(xt,Kd),e(Kd,Ebr),e(Kd,qMe),e(qMe,Cbr),e(Kd,wbr),e(Kd,fJ),e(fJ,Abr),e(Kd,Lbr),e(xt,ybr),M(KE,xt,null),e(Ho,xbr),e(Ho,uo),M(wx,uo,null),e(uo,$br),e(uo,jMe),e(jMe,kbr),e(uo,Sbr),e(uo,nn),e(nn,Rbr),e(nn,DMe),e(DMe,Pbr),e(nn,Bbr),e(nn,GMe),e(GMe,Ibr),e(nn,Nbr),e(nn,OMe),e(OMe,qbr),e(nn,jbr),e(uo,Dbr),e(uo,st),e(st,ZE),e(ZE,VMe),e(VMe,Gbr),e(ZE,Obr),e(ZE,gJ),e(gJ,Vbr),e(ZE,Xbr),e(st,zbr),e(st,e4),e(e4,XMe),e(XMe,Wbr),e(e4,Qbr),e(e4,hJ),e(hJ,Ubr),e(e4,Hbr),e(st,Jbr),e(st,o4),e(o4,zMe),e(zMe,Ybr),e(o4,Kbr),e(o4,uJ),e(uJ,Zbr),e(o4,evr),e(st,ovr),e(st,r4),e(r4,WMe),e(WMe,rvr),e(r4,tvr),e(r4,pJ),e(pJ,avr),e(r4,nvr),e(st,svr),e(st,t4),e(t4,QMe),e(QMe,lvr),e(t4,ivr),e(t4,_J),e(_J,dvr),e(t4,cvr),e(uo,mvr),e(uo,a4),e(a4,fvr),e(a4,UMe),e(UMe,gvr),e(a4,hvr),e(a4,HMe),e(HMe,uvr),e(uo,pvr),M(n4,uo,null),b(m,pHe,_),b(m,Zd,_),e(Zd,s4),e(s4,JMe),M(Ax,JMe,null),e(Zd,_vr),e(Zd,YMe),e(YMe,bvr),b(m,_He,_),b(m,Jo,_),M(Lx,Jo,null),e(Jo,vvr),e(Jo,ec),e(ec,Fvr),e(ec,bJ),e(bJ,Tvr),e(ec,Mvr),e(ec,vJ),e(vJ,Evr),e(ec,Cvr),e(Jo,wvr),e(Jo,yx),e(yx,Avr),e(yx,KMe),e(KMe,Lvr),e(yx,yvr),e(Jo,xvr),e(Jo,$t),M(xx,$t,null),e($t,$vr),e($t,ZMe),e(ZMe,kvr),e($t,Svr),e($t,oc),e(oc,Rvr),e(oc,eEe),e(eEe,Pvr),e(oc,Bvr),e(oc,FJ),e(FJ,Ivr),e(oc,Nvr),e($t,qvr),M(l4,$t,null),e(Jo,jvr),e(Jo,po),M($x,po,null),e(po,Dvr),e(po,oEe),e(oEe,Gvr),e(po,Ovr),e(po,sn),e(sn,Vvr),e(sn,rEe),e(rEe,Xvr),e(sn,zvr),e(sn,tEe),e(tEe,Wvr),e(sn,Qvr),e(sn,aEe),e(aEe,Uvr),e(sn,Hvr),e(po,Jvr),e(po,Le),e(Le,i4),e(i4,nEe),e(nEe,Yvr),e(i4,Kvr),e(i4,TJ),e(TJ,Zvr),e(i4,e1r),e(Le,o1r),e(Le,d4),e(d4,sEe),e(sEe,r1r),e(d4,t1r),e(d4,MJ),e(MJ,a1r),e(d4,n1r),e(Le,s1r),e(Le,c4),e(c4,lEe),e(lEe,l1r),e(c4,i1r),e(c4,EJ),e(EJ,d1r),e(c4,c1r),e(Le,m1r),e(Le,m4),e(m4,iEe),e(iEe,f1r),e(m4,g1r),e(m4,CJ),e(CJ,h1r),e(m4,u1r),e(Le,p1r),e(Le,f4),e(f4,dEe),e(dEe,_1r),e(f4,b1r),e(f4,wJ),e(wJ,v1r),e(f4,F1r),e(Le,T1r),e(Le,g4),e(g4,cEe),e(cEe,M1r),e(g4,E1r),e(g4,AJ),e(AJ,C1r),e(g4,w1r),e(Le,A1r),e(Le,h4),e(h4,mEe),e(mEe,L1r),e(h4,y1r),e(h4,LJ),e(LJ,x1r),e(h4,$1r),e(Le,k1r),e(Le,u4),e(u4,fEe),e(fEe,S1r),e(u4,R1r),e(u4,yJ),e(yJ,P1r),e(u4,B1r),e(Le,I1r),e(Le,p4),e(p4,gEe),e(gEe,N1r),e(p4,q1r),e(p4,xJ),e(xJ,j1r),e(p4,D1r),e(Le,G1r),e(Le,_4),e(_4,hEe),e(hEe,O1r),e(_4,V1r),e(_4,$J),e($J,X1r),e(_4,z1r),e(po,W1r),e(po,b4),e(b4,Q1r),e(b4,uEe),e(uEe,U1r),e(b4,H1r),e(b4,pEe),e(pEe,J1r),e(po,Y1r),M(v4,po,null),b(m,bHe,_),b(m,rc,_),e(rc,F4),e(F4,_Ee),M(kx,_Ee,null),e(rc,K1r),e(rc,bEe),e(bEe,Z1r),b(m,vHe,_),b(m,Yo,_),M(Sx,Yo,null),e(Yo,eFr),e(Yo,tc),e(tc,oFr),e(tc,kJ),e(kJ,rFr),e(tc,tFr),e(tc,SJ),e(SJ,aFr),e(tc,nFr),e(Yo,sFr),e(Yo,Rx),e(Rx,lFr),e(Rx,vEe),e(vEe,iFr),e(Rx,dFr),e(Yo,cFr),e(Yo,kt),M(Px,kt,null),e(kt,mFr),e(kt,FEe),e(FEe,fFr),e(kt,gFr),e(kt,ac),e(ac,hFr),e(ac,TEe),e(TEe,uFr),e(ac,pFr),e(ac,RJ),e(RJ,_Fr),e(ac,bFr),e(kt,vFr),M(T4,kt,null),e(Yo,FFr),e(Yo,_o),M(Bx,_o,null),e(_o,TFr),e(_o,MEe),e(MEe,MFr),e(_o,EFr),e(_o,ln),e(ln,CFr),e(ln,EEe),e(EEe,wFr),e(ln,AFr),e(ln,CEe),e(CEe,LFr),e(ln,yFr),e(ln,wEe),e(wEe,xFr),e(ln,$Fr),e(_o,kFr),e(_o,Ix),e(Ix,M4),e(M4,AEe),e(AEe,SFr),e(M4,RFr),e(M4,PJ),e(PJ,PFr),e(M4,BFr),e(Ix,IFr),e(Ix,E4),e(E4,LEe),e(LEe,NFr),e(E4,qFr),e(E4,BJ),e(BJ,jFr),e(E4,DFr),e(_o,GFr),e(_o,C4),e(C4,OFr),e(C4,yEe),e(yEe,VFr),e(C4,XFr),e(C4,xEe),e(xEe,zFr),e(_o,WFr),M(w4,_o,null),b(m,FHe,_),b(m,nc,_),e(nc,A4),e(A4,$Ee),M(Nx,$Ee,null),e(nc,QFr),e(nc,kEe),e(kEe,UFr),b(m,THe,_),b(m,Ko,_),M(qx,Ko,null),e(Ko,HFr),e(Ko,sc),e(sc,JFr),e(sc,IJ),e(IJ,YFr),e(sc,KFr),e(sc,NJ),e(NJ,ZFr),e(sc,eTr),e(Ko,oTr),e(Ko,jx),e(jx,rTr),e(jx,SEe),e(SEe,tTr),e(jx,aTr),e(Ko,nTr),e(Ko,St),M(Dx,St,null),e(St,sTr),e(St,REe),e(REe,lTr),e(St,iTr),e(St,lc),e(lc,dTr),e(lc,PEe),e(PEe,cTr),e(lc,mTr),e(lc,qJ),e(qJ,fTr),e(lc,gTr),e(St,hTr),M(L4,St,null),e(Ko,uTr),e(Ko,bo),M(Gx,bo,null),e(bo,pTr),e(bo,BEe),e(BEe,_Tr),e(bo,bTr),e(bo,dn),e(dn,vTr),e(dn,IEe),e(IEe,FTr),e(dn,TTr),e(dn,NEe),e(NEe,MTr),e(dn,ETr),e(dn,qEe),e(qEe,CTr),e(dn,wTr),e(bo,ATr),e(bo,lt),e(lt,y4),e(y4,jEe),e(jEe,LTr),e(y4,yTr),e(y4,jJ),e(jJ,xTr),e(y4,$Tr),e(lt,kTr),e(lt,x4),e(x4,DEe),e(DEe,STr),e(x4,RTr),e(x4,DJ),e(DJ,PTr),e(x4,BTr),e(lt,ITr),e(lt,$4),e($4,GEe),e(GEe,NTr),e($4,qTr),e($4,GJ),e(GJ,jTr),e($4,DTr),e(lt,GTr),e(lt,k4),e(k4,OEe),e(OEe,OTr),e(k4,VTr),e(k4,OJ),e(OJ,XTr),e(k4,zTr),e(lt,WTr),e(lt,S4),e(S4,VEe),e(VEe,QTr),e(S4,UTr),e(S4,VJ),e(VJ,HTr),e(S4,JTr),e(bo,YTr),e(bo,R4),e(R4,KTr),e(R4,XEe),e(XEe,ZTr),e(R4,eMr),e(R4,zEe),e(zEe,oMr),e(bo,rMr),M(P4,bo,null),b(m,MHe,_),b(m,ic,_),e(ic,B4),e(B4,WEe),M(Ox,WEe,null),e(ic,tMr),e(ic,QEe),e(QEe,aMr),b(m,EHe,_),b(m,Zo,_),M(Vx,Zo,null),e(Zo,nMr),e(Zo,dc),e(dc,sMr),e(dc,XJ),e(XJ,lMr),e(dc,iMr),e(dc,zJ),e(zJ,dMr),e(dc,cMr),e(Zo,mMr),e(Zo,Xx),e(Xx,fMr),e(Xx,UEe),e(UEe,gMr),e(Xx,hMr),e(Zo,uMr),e(Zo,Rt),M(zx,Rt,null),e(Rt,pMr),e(Rt,HEe),e(HEe,_Mr),e(Rt,bMr),e(Rt,cc),e(cc,vMr),e(cc,JEe),e(JEe,FMr),e(cc,TMr),e(cc,WJ),e(WJ,MMr),e(cc,EMr),e(Rt,CMr),M(I4,Rt,null),e(Zo,wMr),e(Zo,vo),M(Wx,vo,null),e(vo,AMr),e(vo,YEe),e(YEe,LMr),e(vo,yMr),e(vo,cn),e(cn,xMr),e(cn,KEe),e(KEe,$Mr),e(cn,kMr),e(cn,ZEe),e(ZEe,SMr),e(cn,RMr),e(cn,e4e),e(e4e,PMr),e(cn,BMr),e(vo,IMr),e(vo,mn),e(mn,N4),e(N4,o4e),e(o4e,NMr),e(N4,qMr),e(N4,QJ),e(QJ,jMr),e(N4,DMr),e(mn,GMr),e(mn,q4),e(q4,r4e),e(r4e,OMr),e(q4,VMr),e(q4,UJ),e(UJ,XMr),e(q4,zMr),e(mn,WMr),e(mn,j4),e(j4,t4e),e(t4e,QMr),e(j4,UMr),e(j4,HJ),e(HJ,HMr),e(j4,JMr),e(mn,YMr),e(mn,D4),e(D4,a4e),e(a4e,KMr),e(D4,ZMr),e(D4,JJ),e(JJ,eEr),e(D4,oEr),e(vo,rEr),e(vo,G4),e(G4,tEr),e(G4,n4e),e(n4e,aEr),e(G4,nEr),e(G4,s4e),e(s4e,sEr),e(vo,lEr),M(O4,vo,null),b(m,CHe,_),b(m,mc,_),e(mc,V4),e(V4,l4e),M(Qx,l4e,null),e(mc,iEr),e(mc,i4e),e(i4e,dEr),b(m,wHe,_),b(m,er,_),M(Ux,er,null),e(er,cEr),e(er,fc),e(fc,mEr),e(fc,YJ),e(YJ,fEr),e(fc,gEr),e(fc,KJ),e(KJ,hEr),e(fc,uEr),e(er,pEr),e(er,Hx),e(Hx,_Er),e(Hx,d4e),e(d4e,bEr),e(Hx,vEr),e(er,FEr),e(er,Pt),M(Jx,Pt,null),e(Pt,TEr),e(Pt,c4e),e(c4e,MEr),e(Pt,EEr),e(Pt,gc),e(gc,CEr),e(gc,m4e),e(m4e,wEr),e(gc,AEr),e(gc,ZJ),e(ZJ,LEr),e(gc,yEr),e(Pt,xEr),M(X4,Pt,null),e(er,$Er),e(er,Fo),M(Yx,Fo,null),e(Fo,kEr),e(Fo,f4e),e(f4e,SEr),e(Fo,REr),e(Fo,fn),e(fn,PEr),e(fn,g4e),e(g4e,BEr),e(fn,IEr),e(fn,h4e),e(h4e,NEr),e(fn,qEr),e(fn,u4e),e(u4e,jEr),e(fn,DEr),e(Fo,GEr),e(Fo,Kx),e(Kx,z4),e(z4,p4e),e(p4e,OEr),e(z4,VEr),e(z4,eY),e(eY,XEr),e(z4,zEr),e(Kx,WEr),e(Kx,W4),e(W4,_4e),e(_4e,QEr),e(W4,UEr),e(W4,oY),e(oY,HEr),e(W4,JEr),e(Fo,YEr),e(Fo,Q4),e(Q4,KEr),e(Q4,b4e),e(b4e,ZEr),e(Q4,e4r),e(Q4,v4e),e(v4e,o4r),e(Fo,r4r),M(U4,Fo,null),b(m,AHe,_),b(m,hc,_),e(hc,H4),e(H4,F4e),M(Zx,F4e,null),e(hc,t4r),e(hc,T4e),e(T4e,a4r),b(m,LHe,_),b(m,or,_),M(e$,or,null),e(or,n4r),e(or,uc),e(uc,s4r),e(uc,rY),e(rY,l4r),e(uc,i4r),e(uc,tY),e(tY,d4r),e(uc,c4r),e(or,m4r),e(or,o$),e(o$,f4r),e(o$,M4e),e(M4e,g4r),e(o$,h4r),e(or,u4r),e(or,Bt),M(r$,Bt,null),e(Bt,p4r),e(Bt,E4e),e(E4e,_4r),e(Bt,b4r),e(Bt,pc),e(pc,v4r),e(pc,C4e),e(C4e,F4r),e(pc,T4r),e(pc,aY),e(aY,M4r),e(pc,E4r),e(Bt,C4r),M(J4,Bt,null),e(or,w4r),e(or,To),M(t$,To,null),e(To,A4r),e(To,w4e),e(w4e,L4r),e(To,y4r),e(To,gn),e(gn,x4r),e(gn,A4e),e(A4e,$4r),e(gn,k4r),e(gn,L4e),e(L4e,S4r),e(gn,R4r),e(gn,y4e),e(y4e,P4r),e(gn,B4r),e(To,I4r),e(To,x4e),e(x4e,Y4),e(Y4,$4e),e($4e,N4r),e(Y4,q4r),e(Y4,nY),e(nY,j4r),e(Y4,D4r),e(To,G4r),e(To,K4),e(K4,O4r),e(K4,k4e),e(k4e,V4r),e(K4,X4r),e(K4,S4e),e(S4e,z4r),e(To,W4r),M(Z4,To,null),b(m,yHe,_),b(m,_c,_),e(_c,eC),e(eC,R4e),M(a$,R4e,null),e(_c,Q4r),e(_c,P4e),e(P4e,U4r),b(m,xHe,_),b(m,rr,_),M(n$,rr,null),e(rr,H4r),e(rr,bc),e(bc,J4r),e(bc,sY),e(sY,Y4r),e(bc,K4r),e(bc,lY),e(lY,Z4r),e(bc,eCr),e(rr,oCr),e(rr,s$),e(s$,rCr),e(s$,B4e),e(B4e,tCr),e(s$,aCr),e(rr,nCr),e(rr,It),M(l$,It,null),e(It,sCr),e(It,I4e),e(I4e,lCr),e(It,iCr),e(It,vc),e(vc,dCr),e(vc,N4e),e(N4e,cCr),e(vc,mCr),e(vc,iY),e(iY,fCr),e(vc,gCr),e(It,hCr),M(oC,It,null),e(rr,uCr),e(rr,Mo),M(i$,Mo,null),e(Mo,pCr),e(Mo,q4e),e(q4e,_Cr),e(Mo,bCr),e(Mo,hn),e(hn,vCr),e(hn,j4e),e(j4e,FCr),e(hn,TCr),e(hn,D4e),e(D4e,MCr),e(hn,ECr),e(hn,G4e),e(G4e,CCr),e(hn,wCr),e(Mo,ACr),e(Mo,it),e(it,rC),e(rC,O4e),e(O4e,LCr),e(rC,yCr),e(rC,dY),e(dY,xCr),e(rC,$Cr),e(it,kCr),e(it,tC),e(tC,V4e),e(V4e,SCr),e(tC,RCr),e(tC,cY),e(cY,PCr),e(tC,BCr),e(it,ICr),e(it,aC),e(aC,X4e),e(X4e,NCr),e(aC,qCr),e(aC,mY),e(mY,jCr),e(aC,DCr),e(it,GCr),e(it,nC),e(nC,z4e),e(z4e,OCr),e(nC,VCr),e(nC,fY),e(fY,XCr),e(nC,zCr),e(it,WCr),e(it,sC),e(sC,W4e),e(W4e,QCr),e(sC,UCr),e(sC,gY),e(gY,HCr),e(sC,JCr),e(Mo,YCr),e(Mo,lC),e(lC,KCr),e(lC,Q4e),e(Q4e,ZCr),e(lC,e3r),e(lC,U4e),e(U4e,o3r),e(Mo,r3r),M(iC,Mo,null),b(m,$He,_),b(m,Fc,_),e(Fc,dC),e(dC,H4e),M(d$,H4e,null),e(Fc,t3r),e(Fc,J4e),e(J4e,a3r),b(m,kHe,_),b(m,tr,_),M(c$,tr,null),e(tr,n3r),e(tr,Tc),e(Tc,s3r),e(Tc,hY),e(hY,l3r),e(Tc,i3r),e(Tc,uY),e(uY,d3r),e(Tc,c3r),e(tr,m3r),e(tr,m$),e(m$,f3r),e(m$,Y4e),e(Y4e,g3r),e(m$,h3r),e(tr,u3r),e(tr,Nt),M(f$,Nt,null),e(Nt,p3r),e(Nt,K4e),e(K4e,_3r),e(Nt,b3r),e(Nt,Mc),e(Mc,v3r),e(Mc,Z4e),e(Z4e,F3r),e(Mc,T3r),e(Mc,pY),e(pY,M3r),e(Mc,E3r),e(Nt,C3r),M(cC,Nt,null),e(tr,w3r),e(tr,Eo),M(g$,Eo,null),e(Eo,A3r),e(Eo,eCe),e(eCe,L3r),e(Eo,y3r),e(Eo,un),e(un,x3r),e(un,oCe),e(oCe,$3r),e(un,k3r),e(un,rCe),e(rCe,S3r),e(un,R3r),e(un,tCe),e(tCe,P3r),e(un,B3r),e(Eo,I3r),e(Eo,aCe),e(aCe,mC),e(mC,nCe),e(nCe,N3r),e(mC,q3r),e(mC,_Y),e(_Y,j3r),e(mC,D3r),e(Eo,G3r),e(Eo,fC),e(fC,O3r),e(fC,sCe),e(sCe,V3r),e(fC,X3r),e(fC,lCe),e(lCe,z3r),e(Eo,W3r),M(gC,Eo,null),b(m,SHe,_),b(m,Ec,_),e(Ec,hC),e(hC,iCe),M(h$,iCe,null),e(Ec,Q3r),e(Ec,dCe),e(dCe,U3r),b(m,RHe,_),b(m,ar,_),M(u$,ar,null),e(ar,H3r),e(ar,Cc),e(Cc,J3r),e(Cc,bY),e(bY,Y3r),e(Cc,K3r),e(Cc,vY),e(vY,Z3r),e(Cc,e5r),e(ar,o5r),e(ar,p$),e(p$,r5r),e(p$,cCe),e(cCe,t5r),e(p$,a5r),e(ar,n5r),e(ar,qt),M(_$,qt,null),e(qt,s5r),e(qt,mCe),e(mCe,l5r),e(qt,i5r),e(qt,wc),e(wc,d5r),e(wc,fCe),e(fCe,c5r),e(wc,m5r),e(wc,FY),e(FY,f5r),e(wc,g5r),e(qt,h5r),M(uC,qt,null),e(ar,u5r),e(ar,Rr),M(b$,Rr,null),e(Rr,p5r),e(Rr,gCe),e(gCe,_5r),e(Rr,b5r),e(Rr,pn),e(pn,v5r),e(pn,hCe),e(hCe,F5r),e(pn,T5r),e(pn,uCe),e(uCe,M5r),e(pn,E5r),e(pn,pCe),e(pCe,C5r),e(pn,w5r),e(Rr,A5r),e(Rr,P),e(P,pC),e(pC,_Ce),e(_Ce,L5r),e(pC,y5r),e(pC,TY),e(TY,x5r),e(pC,$5r),e(P,k5r),e(P,_C),e(_C,bCe),e(bCe,S5r),e(_C,R5r),e(_C,MY),e(MY,P5r),e(_C,B5r),e(P,I5r),e(P,bC),e(bC,vCe),e(vCe,N5r),e(bC,q5r),e(bC,EY),e(EY,j5r),e(bC,D5r),e(P,G5r),e(P,vC),e(vC,FCe),e(FCe,O5r),e(vC,V5r),e(vC,CY),e(CY,X5r),e(vC,z5r),e(P,W5r),e(P,FC),e(FC,TCe),e(TCe,Q5r),e(FC,U5r),e(FC,wY),e(wY,H5r),e(FC,J5r),e(P,Y5r),e(P,TC),e(TC,MCe),e(MCe,K5r),e(TC,Z5r),e(TC,AY),e(AY,e0r),e(TC,o0r),e(P,r0r),e(P,MC),e(MC,ECe),e(ECe,t0r),e(MC,a0r),e(MC,LY),e(LY,n0r),e(MC,s0r),e(P,l0r),e(P,EC),e(EC,CCe),e(CCe,i0r),e(EC,d0r),e(EC,yY),e(yY,c0r),e(EC,m0r),e(P,f0r),e(P,CC),e(CC,wCe),e(wCe,g0r),e(CC,h0r),e(CC,xY),e(xY,u0r),e(CC,p0r),e(P,_0r),e(P,wC),e(wC,ACe),e(ACe,b0r),e(wC,v0r),e(wC,$Y),e($Y,F0r),e(wC,T0r),e(P,M0r),e(P,AC),e(AC,LCe),e(LCe,E0r),e(AC,C0r),e(AC,kY),e(kY,w0r),e(AC,A0r),e(P,L0r),e(P,LC),e(LC,yCe),e(yCe,y0r),e(LC,x0r),e(LC,SY),e(SY,$0r),e(LC,k0r),e(P,S0r),e(P,yC),e(yC,xCe),e(xCe,R0r),e(yC,P0r),e(yC,RY),e(RY,B0r),e(yC,I0r),e(P,N0r),e(P,xC),e(xC,$Ce),e($Ce,q0r),e(xC,j0r),e(xC,PY),e(PY,D0r),e(xC,G0r),e(P,O0r),e(P,$C),e($C,kCe),e(kCe,V0r),e($C,X0r),e($C,BY),e(BY,z0r),e($C,W0r),e(P,Q0r),e(P,kC),e(kC,SCe),e(SCe,U0r),e(kC,H0r),e(kC,IY),e(IY,J0r),e(kC,Y0r),e(P,K0r),e(P,SC),e(SC,RCe),e(RCe,Z0r),e(SC,ewr),e(SC,NY),e(NY,owr),e(SC,rwr),e(P,twr),e(P,RC),e(RC,PCe),e(PCe,awr),e(RC,nwr),e(RC,qY),e(qY,swr),e(RC,lwr),e(P,iwr),e(P,il),e(il,BCe),e(BCe,dwr),e(il,cwr),e(il,jY),e(jY,mwr),e(il,fwr),e(il,DY),e(DY,gwr),e(il,hwr),e(P,uwr),e(P,PC),e(PC,ICe),e(ICe,pwr),e(PC,_wr),e(PC,GY),e(GY,bwr),e(PC,vwr),e(P,Fwr),e(P,BC),e(BC,NCe),e(NCe,Twr),e(BC,Mwr),e(BC,OY),e(OY,Ewr),e(BC,Cwr),e(P,wwr),e(P,IC),e(IC,qCe),e(qCe,Awr),e(IC,Lwr),e(IC,VY),e(VY,ywr),e(IC,xwr),e(P,$wr),e(P,NC),e(NC,jCe),e(jCe,kwr),e(NC,Swr),e(NC,XY),e(XY,Rwr),e(NC,Pwr),e(P,Bwr),e(P,qC),e(qC,DCe),e(DCe,Iwr),e(qC,Nwr),e(qC,zY),e(zY,qwr),e(qC,jwr),e(P,Dwr),e(P,jC),e(jC,GCe),e(GCe,Gwr),e(jC,Owr),e(jC,WY),e(WY,Vwr),e(jC,Xwr),e(P,zwr),e(P,DC),e(DC,OCe),e(OCe,Wwr),e(DC,Qwr),e(DC,QY),e(QY,Uwr),e(DC,Hwr),e(P,Jwr),e(P,GC),e(GC,VCe),e(VCe,Ywr),e(GC,Kwr),e(GC,UY),e(UY,Zwr),e(GC,e6r),e(P,o6r),e(P,OC),e(OC,XCe),e(XCe,r6r),e(OC,t6r),e(OC,HY),e(HY,a6r),e(OC,n6r),e(P,s6r),e(P,VC),e(VC,zCe),e(zCe,l6r),e(VC,i6r),e(VC,JY),e(JY,d6r),e(VC,c6r),e(P,m6r),e(P,XC),e(XC,WCe),e(WCe,f6r),e(XC,g6r),e(XC,YY),e(YY,h6r),e(XC,u6r),e(P,p6r),e(P,zC),e(zC,QCe),e(QCe,_6r),e(zC,b6r),e(zC,KY),e(KY,v6r),e(zC,F6r),e(P,T6r),e(P,WC),e(WC,UCe),e(UCe,M6r),e(WC,E6r),e(WC,ZY),e(ZY,C6r),e(WC,w6r),e(P,A6r),e(P,QC),e(QC,HCe),e(HCe,L6r),e(QC,y6r),e(QC,eK),e(eK,x6r),e(QC,$6r),e(P,k6r),e(P,UC),e(UC,JCe),e(JCe,S6r),e(UC,R6r),e(UC,oK),e(oK,P6r),e(UC,B6r),e(P,I6r),e(P,HC),e(HC,YCe),e(YCe,N6r),e(HC,q6r),e(HC,rK),e(rK,j6r),e(HC,D6r),e(P,G6r),e(P,JC),e(JC,KCe),e(KCe,O6r),e(JC,V6r),e(JC,tK),e(tK,X6r),e(JC,z6r),e(P,W6r),e(P,YC),e(YC,ZCe),e(ZCe,Q6r),e(YC,U6r),e(YC,aK),e(aK,H6r),e(YC,J6r),e(P,Y6r),e(P,KC),e(KC,e3e),e(e3e,K6r),e(KC,Z6r),e(KC,nK),e(nK,eAr),e(KC,oAr),e(P,rAr),e(P,ZC),e(ZC,o3e),e(o3e,tAr),e(ZC,aAr),e(ZC,sK),e(sK,nAr),e(ZC,sAr),e(P,lAr),e(P,e3),e(e3,r3e),e(r3e,iAr),e(e3,dAr),e(e3,lK),e(lK,cAr),e(e3,mAr),e(P,fAr),e(P,o3),e(o3,t3e),e(t3e,gAr),e(o3,hAr),e(o3,iK),e(iK,uAr),e(o3,pAr),e(P,_Ar),e(P,r3),e(r3,a3e),e(a3e,bAr),e(r3,vAr),e(r3,dK),e(dK,FAr),e(r3,TAr),e(P,MAr),e(P,t3),e(t3,n3e),e(n3e,EAr),e(t3,CAr),e(t3,cK),e(cK,wAr),e(t3,AAr),e(P,LAr),e(P,a3),e(a3,s3e),e(s3e,yAr),e(a3,xAr),e(a3,mK),e(mK,$Ar),e(a3,kAr),e(P,SAr),e(P,n3),e(n3,l3e),e(l3e,RAr),e(n3,PAr),e(n3,fK),e(fK,BAr),e(n3,IAr),e(P,NAr),e(P,s3),e(s3,i3e),e(i3e,qAr),e(s3,jAr),e(s3,gK),e(gK,DAr),e(s3,GAr),e(P,OAr),e(P,l3),e(l3,d3e),e(d3e,VAr),e(l3,XAr),e(l3,hK),e(hK,zAr),e(l3,WAr),e(P,QAr),e(P,i3),e(i3,c3e),e(c3e,UAr),e(i3,HAr),e(i3,uK),e(uK,JAr),e(i3,YAr),e(P,KAr),e(P,d3),e(d3,m3e),e(m3e,ZAr),e(d3,e7r),e(d3,pK),e(pK,o7r),e(d3,r7r),e(P,t7r),e(P,c3),e(c3,f3e),e(f3e,a7r),e(c3,n7r),e(c3,_K),e(_K,s7r),e(c3,l7r),e(P,i7r),e(P,m3),e(m3,g3e),e(g3e,d7r),e(m3,c7r),e(m3,bK),e(bK,m7r),e(m3,f7r),e(P,g7r),e(P,f3),e(f3,h3e),e(h3e,h7r),e(f3,u7r),e(f3,vK),e(vK,p7r),e(f3,_7r),e(P,b7r),e(P,g3),e(g3,u3e),e(u3e,v7r),e(g3,F7r),e(g3,FK),e(FK,T7r),e(g3,M7r),e(P,E7r),e(P,h3),e(h3,p3e),e(p3e,C7r),e(h3,w7r),e(h3,TK),e(TK,A7r),e(h3,L7r),e(Rr,y7r),M(u3,Rr,null),b(m,PHe,_),b(m,Ac,_),e(Ac,p3),e(p3,_3e),M(v$,_3e,null),e(Ac,x7r),e(Ac,b3e),e(b3e,$7r),b(m,BHe,_),b(m,nr,_),M(F$,nr,null),e(nr,k7r),e(nr,Lc),e(Lc,S7r),e(Lc,MK),e(MK,R7r),e(Lc,P7r),e(Lc,EK),e(EK,B7r),e(Lc,I7r),e(nr,N7r),e(nr,T$),e(T$,q7r),e(T$,v3e),e(v3e,j7r),e(T$,D7r),e(nr,G7r),e(nr,jt),M(M$,jt,null),e(jt,O7r),e(jt,F3e),e(F3e,V7r),e(jt,X7r),e(jt,yc),e(yc,z7r),e(yc,T3e),e(T3e,W7r),e(yc,Q7r),e(yc,CK),e(CK,U7r),e(yc,H7r),e(jt,J7r),M(_3,jt,null),e(nr,Y7r),e(nr,Pr),M(E$,Pr,null),e(Pr,K7r),e(Pr,M3e),e(M3e,Z7r),e(Pr,eLr),e(Pr,_n),e(_n,oLr),e(_n,E3e),e(E3e,rLr),e(_n,tLr),e(_n,C3e),e(C3e,aLr),e(_n,nLr),e(_n,w3e),e(w3e,sLr),e(_n,lLr),e(Pr,iLr),e(Pr,se),e(se,b3),e(b3,A3e),e(A3e,dLr),e(b3,cLr),e(b3,wK),e(wK,mLr),e(b3,fLr),e(se,gLr),e(se,v3),e(v3,L3e),e(L3e,hLr),e(v3,uLr),e(v3,AK),e(AK,pLr),e(v3,_Lr),e(se,bLr),e(se,F3),e(F3,y3e),e(y3e,vLr),e(F3,FLr),e(F3,LK),e(LK,TLr),e(F3,MLr),e(se,ELr),e(se,T3),e(T3,x3e),e(x3e,CLr),e(T3,wLr),e(T3,yK),e(yK,ALr),e(T3,LLr),e(se,yLr),e(se,M3),e(M3,$3e),e($3e,xLr),e(M3,$Lr),e(M3,xK),e(xK,kLr),e(M3,SLr),e(se,RLr),e(se,E3),e(E3,k3e),e(k3e,PLr),e(E3,BLr),e(E3,$K),e($K,ILr),e(E3,NLr),e(se,qLr),e(se,C3),e(C3,S3e),e(S3e,jLr),e(C3,DLr),e(C3,kK),e(kK,GLr),e(C3,OLr),e(se,VLr),e(se,w3),e(w3,R3e),e(R3e,XLr),e(w3,zLr),e(w3,SK),e(SK,WLr),e(w3,QLr),e(se,ULr),e(se,A3),e(A3,P3e),e(P3e,HLr),e(A3,JLr),e(A3,RK),e(RK,YLr),e(A3,KLr),e(se,ZLr),e(se,L3),e(L3,B3e),e(B3e,eyr),e(L3,oyr),e(L3,PK),e(PK,ryr),e(L3,tyr),e(se,ayr),e(se,y3),e(y3,I3e),e(I3e,nyr),e(y3,syr),e(y3,BK),e(BK,lyr),e(y3,iyr),e(se,dyr),e(se,x3),e(x3,N3e),e(N3e,cyr),e(x3,myr),e(x3,IK),e(IK,fyr),e(x3,gyr),e(se,hyr),e(se,$3),e($3,q3e),e(q3e,uyr),e($3,pyr),e($3,NK),e(NK,_yr),e($3,byr),e(se,vyr),e(se,k3),e(k3,j3e),e(j3e,Fyr),e(k3,Tyr),e(k3,qK),e(qK,Myr),e(k3,Eyr),e(se,Cyr),e(se,S3),e(S3,D3e),e(D3e,wyr),e(S3,Ayr),e(S3,jK),e(jK,Lyr),e(S3,yyr),e(se,xyr),e(se,R3),e(R3,G3e),e(G3e,$yr),e(R3,kyr),e(R3,DK),e(DK,Syr),e(R3,Ryr),e(se,Pyr),e(se,P3),e(P3,O3e),e(O3e,Byr),e(P3,Iyr),e(P3,GK),e(GK,Nyr),e(P3,qyr),e(se,jyr),e(se,B3),e(B3,V3e),e(V3e,Dyr),e(B3,Gyr),e(B3,OK),e(OK,Oyr),e(B3,Vyr),e(se,Xyr),e(se,I3),e(I3,X3e),e(X3e,zyr),e(I3,Wyr),e(I3,VK),e(VK,Qyr),e(I3,Uyr),e(se,Hyr),e(se,N3),e(N3,z3e),e(z3e,Jyr),e(N3,Yyr),e(N3,XK),e(XK,Kyr),e(N3,Zyr),e(se,e8r),e(se,q3),e(q3,W3e),e(W3e,o8r),e(q3,r8r),e(q3,zK),e(zK,t8r),e(q3,a8r),e(se,n8r),e(se,j3),e(j3,Q3e),e(Q3e,s8r),e(j3,l8r),e(j3,WK),e(WK,i8r),e(j3,d8r),e(se,c8r),e(se,D3),e(D3,U3e),e(U3e,m8r),e(D3,f8r),e(D3,QK),e(QK,g8r),e(D3,h8r),e(Pr,u8r),M(G3,Pr,null),b(m,IHe,_),b(m,xc,_),e(xc,O3),e(O3,H3e),M(C$,H3e,null),e(xc,p8r),e(xc,J3e),e(J3e,_8r),b(m,NHe,_),b(m,sr,_),M(w$,sr,null),e(sr,b8r),e(sr,$c),e($c,v8r),e($c,UK),e(UK,F8r),e($c,T8r),e($c,HK),e(HK,M8r),e($c,E8r),e(sr,C8r),e(sr,A$),e(A$,w8r),e(A$,Y3e),e(Y3e,A8r),e(A$,L8r),e(sr,y8r),e(sr,Dt),M(L$,Dt,null),e(Dt,x8r),e(Dt,K3e),e(K3e,$8r),e(Dt,k8r),e(Dt,kc),e(kc,S8r),e(kc,Z3e),e(Z3e,R8r),e(kc,P8r),e(kc,JK),e(JK,B8r),e(kc,I8r),e(Dt,N8r),M(V3,Dt,null),e(sr,q8r),e(sr,Br),M(y$,Br,null),e(Br,j8r),e(Br,e5e),e(e5e,D8r),e(Br,G8r),e(Br,bn),e(bn,O8r),e(bn,o5e),e(o5e,V8r),e(bn,X8r),e(bn,r5e),e(r5e,z8r),e(bn,W8r),e(bn,t5e),e(t5e,Q8r),e(bn,U8r),e(Br,H8r),e(Br,Me),e(Me,X3),e(X3,a5e),e(a5e,J8r),e(X3,Y8r),e(X3,YK),e(YK,K8r),e(X3,Z8r),e(Me,e9r),e(Me,z3),e(z3,n5e),e(n5e,o9r),e(z3,r9r),e(z3,KK),e(KK,t9r),e(z3,a9r),e(Me,n9r),e(Me,W3),e(W3,s5e),e(s5e,s9r),e(W3,l9r),e(W3,ZK),e(ZK,i9r),e(W3,d9r),e(Me,c9r),e(Me,Q3),e(Q3,l5e),e(l5e,m9r),e(Q3,f9r),e(Q3,eZ),e(eZ,g9r),e(Q3,h9r),e(Me,u9r),e(Me,U3),e(U3,i5e),e(i5e,p9r),e(U3,_9r),e(U3,oZ),e(oZ,b9r),e(U3,v9r),e(Me,F9r),e(Me,H3),e(H3,d5e),e(d5e,T9r),e(H3,M9r),e(H3,rZ),e(rZ,E9r),e(H3,C9r),e(Me,w9r),e(Me,J3),e(J3,c5e),e(c5e,A9r),e(J3,L9r),e(J3,tZ),e(tZ,y9r),e(J3,x9r),e(Me,$9r),e(Me,Y3),e(Y3,m5e),e(m5e,k9r),e(Y3,S9r),e(Y3,aZ),e(aZ,R9r),e(Y3,P9r),e(Me,B9r),e(Me,K3),e(K3,f5e),e(f5e,I9r),e(K3,N9r),e(K3,nZ),e(nZ,q9r),e(K3,j9r),e(Me,D9r),e(Me,Z3),e(Z3,g5e),e(g5e,G9r),e(Z3,O9r),e(Z3,sZ),e(sZ,V9r),e(Z3,X9r),e(Me,z9r),e(Me,e5),e(e5,h5e),e(h5e,W9r),e(e5,Q9r),e(e5,lZ),e(lZ,U9r),e(e5,H9r),e(Me,J9r),e(Me,o5),e(o5,u5e),e(u5e,Y9r),e(o5,K9r),e(o5,iZ),e(iZ,Z9r),e(o5,exr),e(Me,oxr),e(Me,r5),e(r5,p5e),e(p5e,rxr),e(r5,txr),e(r5,dZ),e(dZ,axr),e(r5,nxr),e(Me,sxr),e(Me,t5),e(t5,_5e),e(_5e,lxr),e(t5,ixr),e(t5,cZ),e(cZ,dxr),e(t5,cxr),e(Br,mxr),M(a5,Br,null),b(m,qHe,_),b(m,Sc,_),e(Sc,n5),e(n5,b5e),M(x$,b5e,null),e(Sc,fxr),e(Sc,v5e),e(v5e,gxr),b(m,jHe,_),b(m,lr,_),M($$,lr,null),e(lr,hxr),e(lr,Rc),e(Rc,uxr),e(Rc,mZ),e(mZ,pxr),e(Rc,_xr),e(Rc,fZ),e(fZ,bxr),e(Rc,vxr),e(lr,Fxr),e(lr,k$),e(k$,Txr),e(k$,F5e),e(F5e,Mxr),e(k$,Exr),e(lr,Cxr),e(lr,Gt),M(S$,Gt,null),e(Gt,wxr),e(Gt,T5e),e(T5e,Axr),e(Gt,Lxr),e(Gt,Pc),e(Pc,yxr),e(Pc,M5e),e(M5e,xxr),e(Pc,$xr),e(Pc,gZ),e(gZ,kxr),e(Pc,Sxr),e(Gt,Rxr),M(s5,Gt,null),e(lr,Pxr),e(lr,Ir),M(R$,Ir,null),e(Ir,Bxr),e(Ir,E5e),e(E5e,Ixr),e(Ir,Nxr),e(Ir,vn),e(vn,qxr),e(vn,C5e),e(C5e,jxr),e(vn,Dxr),e(vn,w5e),e(w5e,Gxr),e(vn,Oxr),e(vn,A5e),e(A5e,Vxr),e(vn,Xxr),e(Ir,zxr),e(Ir,Be),e(Be,l5),e(l5,L5e),e(L5e,Wxr),e(l5,Qxr),e(l5,hZ),e(hZ,Uxr),e(l5,Hxr),e(Be,Jxr),e(Be,i5),e(i5,y5e),e(y5e,Yxr),e(i5,Kxr),e(i5,uZ),e(uZ,Zxr),e(i5,e$r),e(Be,o$r),e(Be,dl),e(dl,x5e),e(x5e,r$r),e(dl,t$r),e(dl,pZ),e(pZ,a$r),e(dl,n$r),e(dl,_Z),e(_Z,s$r),e(dl,l$r),e(Be,i$r),e(Be,d5),e(d5,$5e),e($5e,d$r),e(d5,c$r),e(d5,bZ),e(bZ,m$r),e(d5,f$r),e(Be,g$r),e(Be,c5),e(c5,k5e),e(k5e,h$r),e(c5,u$r),e(c5,vZ),e(vZ,p$r),e(c5,_$r),e(Be,b$r),e(Be,m5),e(m5,S5e),e(S5e,v$r),e(m5,F$r),e(m5,FZ),e(FZ,T$r),e(m5,M$r),e(Be,E$r),e(Be,f5),e(f5,R5e),e(R5e,C$r),e(f5,w$r),e(f5,TZ),e(TZ,A$r),e(f5,L$r),e(Be,y$r),e(Be,g5),e(g5,P5e),e(P5e,x$r),e(g5,$$r),e(g5,MZ),e(MZ,k$r),e(g5,S$r),e(Be,R$r),e(Be,h5),e(h5,B5e),e(B5e,P$r),e(h5,B$r),e(h5,EZ),e(EZ,I$r),e(h5,N$r),e(Ir,q$r),M(u5,Ir,null),b(m,DHe,_),b(m,Bc,_),e(Bc,p5),e(p5,I5e),M(P$,I5e,null),e(Bc,j$r),e(Bc,N5e),e(N5e,D$r),b(m,GHe,_),b(m,ir,_),M(B$,ir,null),e(ir,G$r),e(ir,Ic),e(Ic,O$r),e(Ic,CZ),e(CZ,V$r),e(Ic,X$r),e(Ic,wZ),e(wZ,z$r),e(Ic,W$r),e(ir,Q$r),e(ir,I$),e(I$,U$r),e(I$,q5e),e(q5e,H$r),e(I$,J$r),e(ir,Y$r),e(ir,Ot),M(N$,Ot,null),e(Ot,K$r),e(Ot,j5e),e(j5e,Z$r),e(Ot,ekr),e(Ot,Nc),e(Nc,okr),e(Nc,D5e),e(D5e,rkr),e(Nc,tkr),e(Nc,AZ),e(AZ,akr),e(Nc,nkr),e(Ot,skr),M(_5,Ot,null),e(ir,lkr),e(ir,Nr),M(q$,Nr,null),e(Nr,ikr),e(Nr,G5e),e(G5e,dkr),e(Nr,ckr),e(Nr,Fn),e(Fn,mkr),e(Fn,O5e),e(O5e,fkr),e(Fn,gkr),e(Fn,V5e),e(V5e,hkr),e(Fn,ukr),e(Fn,X5e),e(X5e,pkr),e(Fn,_kr),e(Nr,bkr),e(Nr,qc),e(qc,b5),e(b5,z5e),e(z5e,vkr),e(b5,Fkr),e(b5,LZ),e(LZ,Tkr),e(b5,Mkr),e(qc,Ekr),e(qc,v5),e(v5,W5e),e(W5e,Ckr),e(v5,wkr),e(v5,yZ),e(yZ,Akr),e(v5,Lkr),e(qc,ykr),e(qc,F5),e(F5,Q5e),e(Q5e,xkr),e(F5,$kr),e(F5,xZ),e(xZ,kkr),e(F5,Skr),e(Nr,Rkr),M(T5,Nr,null),b(m,OHe,_),b(m,jc,_),e(jc,M5),e(M5,U5e),M(j$,U5e,null),e(jc,Pkr),e(jc,H5e),e(H5e,Bkr),b(m,VHe,_),b(m,dr,_),M(D$,dr,null),e(dr,Ikr),e(dr,Dc),e(Dc,Nkr),e(Dc,$Z),e($Z,qkr),e(Dc,jkr),e(Dc,kZ),e(kZ,Dkr),e(Dc,Gkr),e(dr,Okr),e(dr,G$),e(G$,Vkr),e(G$,J5e),e(J5e,Xkr),e(G$,zkr),e(dr,Wkr),e(dr,Vt),M(O$,Vt,null),e(Vt,Qkr),e(Vt,Y5e),e(Y5e,Ukr),e(Vt,Hkr),e(Vt,Gc),e(Gc,Jkr),e(Gc,K5e),e(K5e,Ykr),e(Gc,Kkr),e(Gc,SZ),e(SZ,Zkr),e(Gc,eSr),e(Vt,oSr),M(E5,Vt,null),e(dr,rSr),e(dr,qr),M(V$,qr,null),e(qr,tSr),e(qr,Z5e),e(Z5e,aSr),e(qr,nSr),e(qr,Tn),e(Tn,sSr),e(Tn,e0e),e(e0e,lSr),e(Tn,iSr),e(Tn,o0e),e(o0e,dSr),e(Tn,cSr),e(Tn,r0e),e(r0e,mSr),e(Tn,fSr),e(qr,gSr),e(qr,me),e(me,C5),e(C5,t0e),e(t0e,hSr),e(C5,uSr),e(C5,RZ),e(RZ,pSr),e(C5,_Sr),e(me,bSr),e(me,w5),e(w5,a0e),e(a0e,vSr),e(w5,FSr),e(w5,PZ),e(PZ,TSr),e(w5,MSr),e(me,ESr),e(me,A5),e(A5,n0e),e(n0e,CSr),e(A5,wSr),e(A5,BZ),e(BZ,ASr),e(A5,LSr),e(me,ySr),e(me,L5),e(L5,s0e),e(s0e,xSr),e(L5,$Sr),e(L5,IZ),e(IZ,kSr),e(L5,SSr),e(me,RSr),e(me,y5),e(y5,l0e),e(l0e,PSr),e(y5,BSr),e(y5,NZ),e(NZ,ISr),e(y5,NSr),e(me,qSr),e(me,x5),e(x5,i0e),e(i0e,jSr),e(x5,DSr),e(x5,qZ),e(qZ,GSr),e(x5,OSr),e(me,VSr),e(me,$5),e($5,d0e),e(d0e,XSr),e($5,zSr),e($5,jZ),e(jZ,WSr),e($5,QSr),e(me,USr),e(me,k5),e(k5,c0e),e(c0e,HSr),e(k5,JSr),e(k5,DZ),e(DZ,YSr),e(k5,KSr),e(me,ZSr),e(me,S5),e(S5,m0e),e(m0e,eRr),e(S5,oRr),e(S5,GZ),e(GZ,rRr),e(S5,tRr),e(me,aRr),e(me,R5),e(R5,f0e),e(f0e,nRr),e(R5,sRr),e(R5,OZ),e(OZ,lRr),e(R5,iRr),e(me,dRr),e(me,P5),e(P5,g0e),e(g0e,cRr),e(P5,mRr),e(P5,VZ),e(VZ,fRr),e(P5,gRr),e(me,hRr),e(me,B5),e(B5,h0e),e(h0e,uRr),e(B5,pRr),e(B5,XZ),e(XZ,_Rr),e(B5,bRr),e(me,vRr),e(me,I5),e(I5,u0e),e(u0e,FRr),e(I5,TRr),e(I5,zZ),e(zZ,MRr),e(I5,ERr),e(me,CRr),e(me,N5),e(N5,p0e),e(p0e,wRr),e(N5,ARr),e(N5,WZ),e(WZ,LRr),e(N5,yRr),e(me,xRr),e(me,q5),e(q5,_0e),e(_0e,$Rr),e(q5,kRr),e(q5,QZ),e(QZ,SRr),e(q5,RRr),e(me,PRr),e(me,j5),e(j5,b0e),e(b0e,BRr),e(j5,IRr),e(j5,UZ),e(UZ,NRr),e(j5,qRr),e(me,jRr),e(me,D5),e(D5,v0e),e(v0e,DRr),e(D5,GRr),e(D5,HZ),e(HZ,ORr),e(D5,VRr),e(me,XRr),e(me,G5),e(G5,F0e),e(F0e,zRr),e(G5,WRr),e(G5,JZ),e(JZ,QRr),e(G5,URr),e(me,HRr),e(me,O5),e(O5,T0e),e(T0e,JRr),e(O5,YRr),e(O5,YZ),e(YZ,KRr),e(O5,ZRr),e(me,ePr),e(me,V5),e(V5,M0e),e(M0e,oPr),e(V5,rPr),e(V5,KZ),e(KZ,tPr),e(V5,aPr),e(qr,nPr),M(X5,qr,null),b(m,XHe,_),b(m,Oc,_),e(Oc,z5),e(z5,E0e),M(X$,E0e,null),e(Oc,sPr),e(Oc,C0e),e(C0e,lPr),b(m,zHe,_),b(m,cr,_),M(z$,cr,null),e(cr,iPr),e(cr,Vc),e(Vc,dPr),e(Vc,ZZ),e(ZZ,cPr),e(Vc,mPr),e(Vc,eee),e(eee,fPr),e(Vc,gPr),e(cr,hPr),e(cr,W$),e(W$,uPr),e(W$,w0e),e(w0e,pPr),e(W$,_Pr),e(cr,bPr),e(cr,Xt),M(Q$,Xt,null),e(Xt,vPr),e(Xt,A0e),e(A0e,FPr),e(Xt,TPr),e(Xt,Xc),e(Xc,MPr),e(Xc,L0e),e(L0e,EPr),e(Xc,CPr),e(Xc,oee),e(oee,wPr),e(Xc,APr),e(Xt,LPr),M(W5,Xt,null),e(cr,yPr),e(cr,jr),M(U$,jr,null),e(jr,xPr),e(jr,y0e),e(y0e,$Pr),e(jr,kPr),e(jr,Mn),e(Mn,SPr),e(Mn,x0e),e(x0e,RPr),e(Mn,PPr),e(Mn,$0e),e($0e,BPr),e(Mn,IPr),e(Mn,k0e),e(k0e,NPr),e(Mn,qPr),e(jr,jPr),e(jr,ye),e(ye,Q5),e(Q5,S0e),e(S0e,DPr),e(Q5,GPr),e(Q5,ree),e(ree,OPr),e(Q5,VPr),e(ye,XPr),e(ye,U5),e(U5,R0e),e(R0e,zPr),e(U5,WPr),e(U5,tee),e(tee,QPr),e(U5,UPr),e(ye,HPr),e(ye,H5),e(H5,P0e),e(P0e,JPr),e(H5,YPr),e(H5,aee),e(aee,KPr),e(H5,ZPr),e(ye,eBr),e(ye,J5),e(J5,B0e),e(B0e,oBr),e(J5,rBr),e(J5,nee),e(nee,tBr),e(J5,aBr),e(ye,nBr),e(ye,Y5),e(Y5,I0e),e(I0e,sBr),e(Y5,lBr),e(Y5,see),e(see,iBr),e(Y5,dBr),e(ye,cBr),e(ye,K5),e(K5,N0e),e(N0e,mBr),e(K5,fBr),e(K5,lee),e(lee,gBr),e(K5,hBr),e(ye,uBr),e(ye,Z5),e(Z5,q0e),e(q0e,pBr),e(Z5,_Br),e(Z5,iee),e(iee,bBr),e(Z5,vBr),e(ye,FBr),e(ye,e0),e(e0,j0e),e(j0e,TBr),e(e0,MBr),e(e0,dee),e(dee,EBr),e(e0,CBr),e(ye,wBr),e(ye,o0),e(o0,D0e),e(D0e,ABr),e(o0,LBr),e(o0,cee),e(cee,yBr),e(o0,xBr),e(ye,$Br),e(ye,r0),e(r0,G0e),e(G0e,kBr),e(r0,SBr),e(r0,mee),e(mee,RBr),e(r0,PBr),e(jr,BBr),M(t0,jr,null),b(m,WHe,_),b(m,zc,_),e(zc,a0),e(a0,O0e),M(H$,O0e,null),e(zc,IBr),e(zc,V0e),e(V0e,NBr),b(m,QHe,_),b(m,mr,_),M(J$,mr,null),e(mr,qBr),e(mr,Wc),e(Wc,jBr),e(Wc,fee),e(fee,DBr),e(Wc,GBr),e(Wc,gee),e(gee,OBr),e(Wc,VBr),e(mr,XBr),e(mr,Y$),e(Y$,zBr),e(Y$,X0e),e(X0e,WBr),e(Y$,QBr),e(mr,UBr),e(mr,zt),M(K$,zt,null),e(zt,HBr),e(zt,z0e),e(z0e,JBr),e(zt,YBr),e(zt,Qc),e(Qc,KBr),e(Qc,W0e),e(W0e,ZBr),e(Qc,eIr),e(Qc,hee),e(hee,oIr),e(Qc,rIr),e(zt,tIr),M(n0,zt,null),e(mr,aIr),e(mr,Dr),M(Z$,Dr,null),e(Dr,nIr),e(Dr,Q0e),e(Q0e,sIr),e(Dr,lIr),e(Dr,En),e(En,iIr),e(En,U0e),e(U0e,dIr),e(En,cIr),e(En,H0e),e(H0e,mIr),e(En,fIr),e(En,J0e),e(J0e,gIr),e(En,hIr),e(Dr,uIr),e(Dr,re),e(re,s0),e(s0,Y0e),e(Y0e,pIr),e(s0,_Ir),e(s0,uee),e(uee,bIr),e(s0,vIr),e(re,FIr),e(re,l0),e(l0,K0e),e(K0e,TIr),e(l0,MIr),e(l0,pee),e(pee,EIr),e(l0,CIr),e(re,wIr),e(re,i0),e(i0,Z0e),e(Z0e,AIr),e(i0,LIr),e(i0,_ee),e(_ee,yIr),e(i0,xIr),e(re,$Ir),e(re,d0),e(d0,ewe),e(ewe,kIr),e(d0,SIr),e(d0,bee),e(bee,RIr),e(d0,PIr),e(re,BIr),e(re,c0),e(c0,owe),e(owe,IIr),e(c0,NIr),e(c0,vee),e(vee,qIr),e(c0,jIr),e(re,DIr),e(re,m0),e(m0,rwe),e(rwe,GIr),e(m0,OIr),e(m0,Fee),e(Fee,VIr),e(m0,XIr),e(re,zIr),e(re,f0),e(f0,twe),e(twe,WIr),e(f0,QIr),e(f0,Tee),e(Tee,UIr),e(f0,HIr),e(re,JIr),e(re,g0),e(g0,awe),e(awe,YIr),e(g0,KIr),e(g0,Mee),e(Mee,ZIr),e(g0,eNr),e(re,oNr),e(re,h0),e(h0,nwe),e(nwe,rNr),e(h0,tNr),e(h0,Eee),e(Eee,aNr),e(h0,nNr),e(re,sNr),e(re,u0),e(u0,swe),e(swe,lNr),e(u0,iNr),e(u0,Cee),e(Cee,dNr),e(u0,cNr),e(re,mNr),e(re,p0),e(p0,lwe),e(lwe,fNr),e(p0,gNr),e(p0,wee),e(wee,hNr),e(p0,uNr),e(re,pNr),e(re,_0),e(_0,iwe),e(iwe,_Nr),e(_0,bNr),e(_0,Aee),e(Aee,vNr),e(_0,FNr),e(re,TNr),e(re,b0),e(b0,dwe),e(dwe,MNr),e(b0,ENr),e(b0,Lee),e(Lee,CNr),e(b0,wNr),e(re,ANr),e(re,v0),e(v0,cwe),e(cwe,LNr),e(v0,yNr),e(v0,yee),e(yee,xNr),e(v0,$Nr),e(re,kNr),e(re,F0),e(F0,mwe),e(mwe,SNr),e(F0,RNr),e(F0,xee),e(xee,PNr),e(F0,BNr),e(re,INr),e(re,T0),e(T0,fwe),e(fwe,NNr),e(T0,qNr),e(T0,$ee),e($ee,jNr),e(T0,DNr),e(re,GNr),e(re,M0),e(M0,gwe),e(gwe,ONr),e(M0,VNr),e(M0,kee),e(kee,XNr),e(M0,zNr),e(re,WNr),e(re,E0),e(E0,hwe),e(hwe,QNr),e(E0,UNr),e(E0,See),e(See,HNr),e(E0,JNr),e(re,YNr),e(re,C0),e(C0,uwe),e(uwe,KNr),e(C0,ZNr),e(C0,Ree),e(Ree,eqr),e(C0,oqr),e(re,rqr),e(re,w0),e(w0,pwe),e(pwe,tqr),e(w0,aqr),e(w0,Pee),e(Pee,nqr),e(w0,sqr),e(re,lqr),e(re,A0),e(A0,_we),e(_we,iqr),e(A0,dqr),e(A0,Bee),e(Bee,cqr),e(A0,mqr),e(re,fqr),e(re,L0),e(L0,bwe),e(bwe,gqr),e(L0,hqr),e(L0,Iee),e(Iee,uqr),e(L0,pqr),e(re,_qr),e(re,y0),e(y0,vwe),e(vwe,bqr),e(y0,vqr),e(y0,Nee),e(Nee,Fqr),e(y0,Tqr),e(re,Mqr),e(re,x0),e(x0,Fwe),e(Fwe,Eqr),e(x0,Cqr),e(x0,qee),e(qee,wqr),e(x0,Aqr),e(re,Lqr),e(re,$0),e($0,Twe),e(Twe,yqr),e($0,xqr),e($0,jee),e(jee,$qr),e($0,kqr),e(re,Sqr),e(re,k0),e(k0,Mwe),e(Mwe,Rqr),e(k0,Pqr),e(k0,Dee),e(Dee,Bqr),e(k0,Iqr),e(re,Nqr),e(re,S0),e(S0,Ewe),e(Ewe,qqr),e(S0,jqr),e(S0,Gee),e(Gee,Dqr),e(S0,Gqr),e(Dr,Oqr),M(R0,Dr,null),b(m,UHe,_),b(m,Uc,_),e(Uc,P0),e(P0,Cwe),M(ek,Cwe,null),e(Uc,Vqr),e(Uc,wwe),e(wwe,Xqr),b(m,HHe,_),b(m,fr,_),M(ok,fr,null),e(fr,zqr),e(fr,Hc),e(Hc,Wqr),e(Hc,Oee),e(Oee,Qqr),e(Hc,Uqr),e(Hc,Vee),e(Vee,Hqr),e(Hc,Jqr),e(fr,Yqr),e(fr,rk),e(rk,Kqr),e(rk,Awe),e(Awe,Zqr),e(rk,ejr),e(fr,ojr),e(fr,Wt),M(tk,Wt,null),e(Wt,rjr),e(Wt,Lwe),e(Lwe,tjr),e(Wt,ajr),e(Wt,Jc),e(Jc,njr),e(Jc,ywe),e(ywe,sjr),e(Jc,ljr),e(Jc,Xee),e(Xee,ijr),e(Jc,djr),e(Wt,cjr),M(B0,Wt,null),e(fr,mjr),e(fr,Gr),M(ak,Gr,null),e(Gr,fjr),e(Gr,xwe),e(xwe,gjr),e(Gr,hjr),e(Gr,Cn),e(Cn,ujr),e(Cn,$we),e($we,pjr),e(Cn,_jr),e(Cn,kwe),e(kwe,bjr),e(Cn,vjr),e(Cn,Swe),e(Swe,Fjr),e(Cn,Tjr),e(Gr,Mjr),e(Gr,ve),e(ve,I0),e(I0,Rwe),e(Rwe,Ejr),e(I0,Cjr),e(I0,zee),e(zee,wjr),e(I0,Ajr),e(ve,Ljr),e(ve,N0),e(N0,Pwe),e(Pwe,yjr),e(N0,xjr),e(N0,Wee),e(Wee,$jr),e(N0,kjr),e(ve,Sjr),e(ve,q0),e(q0,Bwe),e(Bwe,Rjr),e(q0,Pjr),e(q0,Qee),e(Qee,Bjr),e(q0,Ijr),e(ve,Njr),e(ve,j0),e(j0,Iwe),e(Iwe,qjr),e(j0,jjr),e(j0,Uee),e(Uee,Djr),e(j0,Gjr),e(ve,Ojr),e(ve,D0),e(D0,Nwe),e(Nwe,Vjr),e(D0,Xjr),e(D0,Hee),e(Hee,zjr),e(D0,Wjr),e(ve,Qjr),e(ve,G0),e(G0,qwe),e(qwe,Ujr),e(G0,Hjr),e(G0,Jee),e(Jee,Jjr),e(G0,Yjr),e(ve,Kjr),e(ve,O0),e(O0,jwe),e(jwe,Zjr),e(O0,eDr),e(O0,Yee),e(Yee,oDr),e(O0,rDr),e(ve,tDr),e(ve,V0),e(V0,Dwe),e(Dwe,aDr),e(V0,nDr),e(V0,Kee),e(Kee,sDr),e(V0,lDr),e(ve,iDr),e(ve,X0),e(X0,Gwe),e(Gwe,dDr),e(X0,cDr),e(X0,Zee),e(Zee,mDr),e(X0,fDr),e(ve,gDr),e(ve,z0),e(z0,Owe),e(Owe,hDr),e(z0,uDr),e(z0,eoe),e(eoe,pDr),e(z0,_Dr),e(ve,bDr),e(ve,W0),e(W0,Vwe),e(Vwe,vDr),e(W0,FDr),e(W0,ooe),e(ooe,TDr),e(W0,MDr),e(ve,EDr),e(ve,Q0),e(Q0,Xwe),e(Xwe,CDr),e(Q0,wDr),e(Q0,roe),e(roe,ADr),e(Q0,LDr),e(ve,yDr),e(ve,U0),e(U0,zwe),e(zwe,xDr),e(U0,$Dr),e(U0,toe),e(toe,kDr),e(U0,SDr),e(ve,RDr),e(ve,H0),e(H0,Wwe),e(Wwe,PDr),e(H0,BDr),e(H0,aoe),e(aoe,IDr),e(H0,NDr),e(ve,qDr),e(ve,J0),e(J0,Qwe),e(Qwe,jDr),e(J0,DDr),e(J0,noe),e(noe,GDr),e(J0,ODr),e(ve,VDr),e(ve,Y0),e(Y0,Uwe),e(Uwe,XDr),e(Y0,zDr),e(Y0,soe),e(soe,WDr),e(Y0,QDr),e(ve,UDr),e(ve,K0),e(K0,Hwe),e(Hwe,HDr),e(K0,JDr),e(K0,loe),e(loe,YDr),e(K0,KDr),e(Gr,ZDr),M(Z0,Gr,null),b(m,JHe,_),b(m,Yc,_),e(Yc,ew),e(ew,Jwe),M(nk,Jwe,null),e(Yc,eGr),e(Yc,Ywe),e(Ywe,oGr),b(m,YHe,_),b(m,gr,_),M(sk,gr,null),e(gr,rGr),e(gr,Kc),e(Kc,tGr),e(Kc,ioe),e(ioe,aGr),e(Kc,nGr),e(Kc,doe),e(doe,sGr),e(Kc,lGr),e(gr,iGr),e(gr,lk),e(lk,dGr),e(lk,Kwe),e(Kwe,cGr),e(lk,mGr),e(gr,fGr),e(gr,Qt),M(ik,Qt,null),e(Qt,gGr),e(Qt,Zwe),e(Zwe,hGr),e(Qt,uGr),e(Qt,Zc),e(Zc,pGr),e(Zc,e6e),e(e6e,_Gr),e(Zc,bGr),e(Zc,coe),e(coe,vGr),e(Zc,FGr),e(Qt,TGr),M(ow,Qt,null),e(gr,MGr),e(gr,Or),M(dk,Or,null),e(Or,EGr),e(Or,o6e),e(o6e,CGr),e(Or,wGr),e(Or,wn),e(wn,AGr),e(wn,r6e),e(r6e,LGr),e(wn,yGr),e(wn,t6e),e(t6e,xGr),e(wn,$Gr),e(wn,a6e),e(a6e,kGr),e(wn,SGr),e(Or,RGr),e(Or,ck),e(ck,rw),e(rw,n6e),e(n6e,PGr),e(rw,BGr),e(rw,moe),e(moe,IGr),e(rw,NGr),e(ck,qGr),e(ck,tw),e(tw,s6e),e(s6e,jGr),e(tw,DGr),e(tw,foe),e(foe,GGr),e(tw,OGr),e(Or,VGr),M(aw,Or,null),b(m,KHe,_),b(m,em,_),e(em,nw),e(nw,l6e),M(mk,l6e,null),e(em,XGr),e(em,i6e),e(i6e,zGr),b(m,ZHe,_),b(m,hr,_),M(fk,hr,null),e(hr,WGr),e(hr,om),e(om,QGr),e(om,goe),e(goe,UGr),e(om,HGr),e(om,hoe),e(hoe,JGr),e(om,YGr),e(hr,KGr),e(hr,gk),e(gk,ZGr),e(gk,d6e),e(d6e,eOr),e(gk,oOr),e(hr,rOr),e(hr,Ut),M(hk,Ut,null),e(Ut,tOr),e(Ut,c6e),e(c6e,aOr),e(Ut,nOr),e(Ut,rm),e(rm,sOr),e(rm,m6e),e(m6e,lOr),e(rm,iOr),e(rm,uoe),e(uoe,dOr),e(rm,cOr),e(Ut,mOr),M(sw,Ut,null),e(hr,fOr),e(hr,Vr),M(uk,Vr,null),e(Vr,gOr),e(Vr,f6e),e(f6e,hOr),e(Vr,uOr),e(Vr,An),e(An,pOr),e(An,g6e),e(g6e,_Or),e(An,bOr),e(An,h6e),e(h6e,vOr),e(An,FOr),e(An,u6e),e(u6e,TOr),e(An,MOr),e(Vr,EOr),e(Vr,p6e),e(p6e,lw),e(lw,_6e),e(_6e,COr),e(lw,wOr),e(lw,poe),e(poe,AOr),e(lw,LOr),e(Vr,yOr),M(iw,Vr,null),b(m,eJe,_),b(m,tm,_),e(tm,dw),e(dw,b6e),M(pk,b6e,null),e(tm,xOr),e(tm,v6e),e(v6e,$Or),b(m,oJe,_),b(m,ur,_),M(_k,ur,null),e(ur,kOr),e(ur,am),e(am,SOr),e(am,_oe),e(_oe,ROr),e(am,POr),e(am,boe),e(boe,BOr),e(am,IOr),e(ur,NOr),e(ur,bk),e(bk,qOr),e(bk,F6e),e(F6e,jOr),e(bk,DOr),e(ur,GOr),e(ur,Ht),M(vk,Ht,null),e(Ht,OOr),e(Ht,T6e),e(T6e,VOr),e(Ht,XOr),e(Ht,nm),e(nm,zOr),e(nm,M6e),e(M6e,WOr),e(nm,QOr),e(nm,voe),e(voe,UOr),e(nm,HOr),e(Ht,JOr),M(cw,Ht,null),e(ur,YOr),e(ur,Xr),M(Fk,Xr,null),e(Xr,KOr),e(Xr,E6e),e(E6e,ZOr),e(Xr,eVr),e(Xr,Ln),e(Ln,oVr),e(Ln,C6e),e(C6e,rVr),e(Ln,tVr),e(Ln,w6e),e(w6e,aVr),e(Ln,nVr),e(Ln,A6e),e(A6e,sVr),e(Ln,lVr),e(Xr,iVr),e(Xr,ie),e(ie,mw),e(mw,L6e),e(L6e,dVr),e(mw,cVr),e(mw,Foe),e(Foe,mVr),e(mw,fVr),e(ie,gVr),e(ie,fw),e(fw,y6e),e(y6e,hVr),e(fw,uVr),e(fw,Toe),e(Toe,pVr),e(fw,_Vr),e(ie,bVr),e(ie,gw),e(gw,x6e),e(x6e,vVr),e(gw,FVr),e(gw,Moe),e(Moe,TVr),e(gw,MVr),e(ie,EVr),e(ie,hw),e(hw,$6e),e($6e,CVr),e(hw,wVr),e(hw,Eoe),e(Eoe,AVr),e(hw,LVr),e(ie,yVr),e(ie,uw),e(uw,k6e),e(k6e,xVr),e(uw,$Vr),e(uw,Coe),e(Coe,kVr),e(uw,SVr),e(ie,RVr),e(ie,pw),e(pw,S6e),e(S6e,PVr),e(pw,BVr),e(pw,woe),e(woe,IVr),e(pw,NVr),e(ie,qVr),e(ie,_w),e(_w,R6e),e(R6e,jVr),e(_w,DVr),e(_w,Aoe),e(Aoe,GVr),e(_w,OVr),e(ie,VVr),e(ie,bw),e(bw,P6e),e(P6e,XVr),e(bw,zVr),e(bw,Loe),e(Loe,WVr),e(bw,QVr),e(ie,UVr),e(ie,vw),e(vw,B6e),e(B6e,HVr),e(vw,JVr),e(vw,yoe),e(yoe,YVr),e(vw,KVr),e(ie,ZVr),e(ie,Fw),e(Fw,I6e),e(I6e,eXr),e(Fw,oXr),e(Fw,xoe),e(xoe,rXr),e(Fw,tXr),e(ie,aXr),e(ie,Tw),e(Tw,N6e),e(N6e,nXr),e(Tw,sXr),e(Tw,$oe),e($oe,lXr),e(Tw,iXr),e(ie,dXr),e(ie,Mw),e(Mw,q6e),e(q6e,cXr),e(Mw,mXr),e(Mw,koe),e(koe,fXr),e(Mw,gXr),e(ie,hXr),e(ie,Ew),e(Ew,j6e),e(j6e,uXr),e(Ew,pXr),e(Ew,Soe),e(Soe,_Xr),e(Ew,bXr),e(ie,vXr),e(ie,Cw),e(Cw,D6e),e(D6e,FXr),e(Cw,TXr),e(Cw,Roe),e(Roe,MXr),e(Cw,EXr),e(ie,CXr),e(ie,ww),e(ww,G6e),e(G6e,wXr),e(ww,AXr),e(ww,Poe),e(Poe,LXr),e(ww,yXr),e(ie,xXr),e(ie,Aw),e(Aw,O6e),e(O6e,$Xr),e(Aw,kXr),e(Aw,Boe),e(Boe,SXr),e(Aw,RXr),e(ie,PXr),e(ie,Lw),e(Lw,V6e),e(V6e,BXr),e(Lw,IXr),e(Lw,Ioe),e(Ioe,NXr),e(Lw,qXr),e(ie,jXr),e(ie,yw),e(yw,X6e),e(X6e,DXr),e(yw,GXr),e(yw,Noe),e(Noe,OXr),e(yw,VXr),e(ie,XXr),e(ie,xw),e(xw,z6e),e(z6e,zXr),e(xw,WXr),e(xw,qoe),e(qoe,QXr),e(xw,UXr),e(ie,HXr),e(ie,$w),e($w,W6e),e(W6e,JXr),e($w,YXr),e($w,joe),e(joe,KXr),e($w,ZXr),e(ie,ezr),e(ie,kw),e(kw,Q6e),e(Q6e,ozr),e(kw,rzr),e(kw,Doe),e(Doe,tzr),e(kw,azr),e(Xr,nzr),M(Sw,Xr,null),b(m,rJe,_),b(m,sm,_),e(sm,Rw),e(Rw,U6e),M(Tk,U6e,null),e(sm,szr),e(sm,H6e),e(H6e,lzr),b(m,tJe,_),b(m,pr,_),M(Mk,pr,null),e(pr,izr),e(pr,lm),e(lm,dzr),e(lm,Goe),e(Goe,czr),e(lm,mzr),e(lm,Ooe),e(Ooe,fzr),e(lm,gzr),e(pr,hzr),e(pr,Ek),e(Ek,uzr),e(Ek,J6e),e(J6e,pzr),e(Ek,_zr),e(pr,bzr),e(pr,Jt),M(Ck,Jt,null),e(Jt,vzr),e(Jt,Y6e),e(Y6e,Fzr),e(Jt,Tzr),e(Jt,im),e(im,Mzr),e(im,K6e),e(K6e,Ezr),e(im,Czr),e(im,Voe),e(Voe,wzr),e(im,Azr),e(Jt,Lzr),M(Pw,Jt,null),e(pr,yzr),e(pr,zr),M(wk,zr,null),e(zr,xzr),e(zr,Z6e),e(Z6e,$zr),e(zr,kzr),e(zr,yn),e(yn,Szr),e(yn,eAe),e(eAe,Rzr),e(yn,Pzr),e(yn,oAe),e(oAe,Bzr),e(yn,Izr),e(yn,rAe),e(rAe,Nzr),e(yn,qzr),e(zr,jzr),e(zr,de),e(de,Bw),e(Bw,tAe),e(tAe,Dzr),e(Bw,Gzr),e(Bw,Xoe),e(Xoe,Ozr),e(Bw,Vzr),e(de,Xzr),e(de,Iw),e(Iw,aAe),e(aAe,zzr),e(Iw,Wzr),e(Iw,zoe),e(zoe,Qzr),e(Iw,Uzr),e(de,Hzr),e(de,Nw),e(Nw,nAe),e(nAe,Jzr),e(Nw,Yzr),e(Nw,Woe),e(Woe,Kzr),e(Nw,Zzr),e(de,eWr),e(de,qw),e(qw,sAe),e(sAe,oWr),e(qw,rWr),e(qw,Qoe),e(Qoe,tWr),e(qw,aWr),e(de,nWr),e(de,jw),e(jw,lAe),e(lAe,sWr),e(jw,lWr),e(jw,Uoe),e(Uoe,iWr),e(jw,dWr),e(de,cWr),e(de,Dw),e(Dw,iAe),e(iAe,mWr),e(Dw,fWr),e(Dw,Hoe),e(Hoe,gWr),e(Dw,hWr),e(de,uWr),e(de,Gw),e(Gw,dAe),e(dAe,pWr),e(Gw,_Wr),e(Gw,Joe),e(Joe,bWr),e(Gw,vWr),e(de,FWr),e(de,Ow),e(Ow,cAe),e(cAe,TWr),e(Ow,MWr),e(Ow,Yoe),e(Yoe,EWr),e(Ow,CWr),e(de,wWr),e(de,Vw),e(Vw,mAe),e(mAe,AWr),e(Vw,LWr),e(Vw,Koe),e(Koe,yWr),e(Vw,xWr),e(de,$Wr),e(de,Xw),e(Xw,fAe),e(fAe,kWr),e(Xw,SWr),e(Xw,Zoe),e(Zoe,RWr),e(Xw,PWr),e(de,BWr),e(de,zw),e(zw,gAe),e(gAe,IWr),e(zw,NWr),e(zw,ere),e(ere,qWr),e(zw,jWr),e(de,DWr),e(de,Ww),e(Ww,hAe),e(hAe,GWr),e(Ww,OWr),e(Ww,ore),e(ore,VWr),e(Ww,XWr),e(de,zWr),e(de,Qw),e(Qw,uAe),e(uAe,WWr),e(Qw,QWr),e(Qw,rre),e(rre,UWr),e(Qw,HWr),e(de,JWr),e(de,Uw),e(Uw,pAe),e(pAe,YWr),e(Uw,KWr),e(Uw,tre),e(tre,ZWr),e(Uw,eQr),e(de,oQr),e(de,Hw),e(Hw,_Ae),e(_Ae,rQr),e(Hw,tQr),e(Hw,are),e(are,aQr),e(Hw,nQr),e(de,sQr),e(de,Jw),e(Jw,bAe),e(bAe,lQr),e(Jw,iQr),e(Jw,nre),e(nre,dQr),e(Jw,cQr),e(de,mQr),e(de,Yw),e(Yw,vAe),e(vAe,fQr),e(Yw,gQr),e(Yw,sre),e(sre,hQr),e(Yw,uQr),e(de,pQr),e(de,Kw),e(Kw,FAe),e(FAe,_Qr),e(Kw,bQr),e(Kw,lre),e(lre,vQr),e(Kw,FQr),e(de,TQr),e(de,Zw),e(Zw,TAe),e(TAe,MQr),e(Zw,EQr),e(Zw,ire),e(ire,CQr),e(Zw,wQr),e(de,AQr),e(de,e6),e(e6,MAe),e(MAe,LQr),e(e6,yQr),e(e6,dre),e(dre,xQr),e(e6,$Qr),e(de,kQr),e(de,o6),e(o6,EAe),e(EAe,SQr),e(o6,RQr),e(o6,cre),e(cre,PQr),e(o6,BQr),e(zr,IQr),M(r6,zr,null),b(m,aJe,_),b(m,dm,_),e(dm,t6),e(t6,CAe),M(Ak,CAe,null),e(dm,NQr),e(dm,wAe),e(wAe,qQr),b(m,nJe,_),b(m,_r,_),M(Lk,_r,null),e(_r,jQr),e(_r,cm),e(cm,DQr),e(cm,mre),e(mre,GQr),e(cm,OQr),e(cm,fre),e(fre,VQr),e(cm,XQr),e(_r,zQr),e(_r,yk),e(yk,WQr),e(yk,AAe),e(AAe,QQr),e(yk,UQr),e(_r,HQr),e(_r,Yt),M(xk,Yt,null),e(Yt,JQr),e(Yt,LAe),e(LAe,YQr),e(Yt,KQr),e(Yt,mm),e(mm,ZQr),e(mm,yAe),e(yAe,eUr),e(mm,oUr),e(mm,gre),e(gre,rUr),e(mm,tUr),e(Yt,aUr),M(a6,Yt,null),e(_r,nUr),e(_r,Wr),M($k,Wr,null),e(Wr,sUr),e(Wr,xAe),e(xAe,lUr),e(Wr,iUr),e(Wr,xn),e(xn,dUr),e(xn,$Ae),e($Ae,cUr),e(xn,mUr),e(xn,kAe),e(kAe,fUr),e(xn,gUr),e(xn,SAe),e(SAe,hUr),e(xn,uUr),e(Wr,pUr),e(Wr,RAe),e(RAe,n6),e(n6,PAe),e(PAe,_Ur),e(n6,bUr),e(n6,hre),e(hre,vUr),e(n6,FUr),e(Wr,TUr),M(s6,Wr,null),b(m,sJe,_),b(m,fm,_),e(fm,l6),e(l6,BAe),M(kk,BAe,null),e(fm,MUr),e(fm,IAe),e(IAe,EUr),b(m,lJe,_),b(m,br,_),M(Sk,br,null),e(br,CUr),e(br,gm),e(gm,wUr),e(gm,ure),e(ure,AUr),e(gm,LUr),e(gm,pre),e(pre,yUr),e(gm,xUr),e(br,$Ur),e(br,Rk),e(Rk,kUr),e(Rk,NAe),e(NAe,SUr),e(Rk,RUr),e(br,PUr),e(br,Kt),M(Pk,Kt,null),e(Kt,BUr),e(Kt,qAe),e(qAe,IUr),e(Kt,NUr),e(Kt,hm),e(hm,qUr),e(hm,jAe),e(jAe,jUr),e(hm,DUr),e(hm,_re),e(_re,GUr),e(hm,OUr),e(Kt,VUr),M(i6,Kt,null),e(br,XUr),e(br,Qr),M(Bk,Qr,null),e(Qr,zUr),e(Qr,DAe),e(DAe,WUr),e(Qr,QUr),e(Qr,$n),e($n,UUr),e($n,GAe),e(GAe,HUr),e($n,JUr),e($n,OAe),e(OAe,YUr),e($n,KUr),e($n,VAe),e(VAe,ZUr),e($n,eHr),e(Qr,oHr),e(Qr,XAe),e(XAe,d6),e(d6,zAe),e(zAe,rHr),e(d6,tHr),e(d6,bre),e(bre,aHr),e(d6,nHr),e(Qr,sHr),M(c6,Qr,null),b(m,iJe,_),b(m,um,_),e(um,m6),e(m6,WAe),M(Ik,WAe,null),e(um,lHr),e(um,QAe),e(QAe,iHr),b(m,dJe,_),b(m,vr,_),M(Nk,vr,null),e(vr,dHr),e(vr,pm),e(pm,cHr),e(pm,vre),e(vre,mHr),e(pm,fHr),e(pm,Fre),e(Fre,gHr),e(pm,hHr),e(vr,uHr),e(vr,qk),e(qk,pHr),e(qk,UAe),e(UAe,_Hr),e(qk,bHr),e(vr,vHr),e(vr,Zt),M(jk,Zt,null),e(Zt,FHr),e(Zt,HAe),e(HAe,THr),e(Zt,MHr),e(Zt,_m),e(_m,EHr),e(_m,JAe),e(JAe,CHr),e(_m,wHr),e(_m,Tre),e(Tre,AHr),e(_m,LHr),e(Zt,yHr),M(f6,Zt,null),e(vr,xHr),e(vr,Ur),M(Dk,Ur,null),e(Ur,$Hr),e(Ur,YAe),e(YAe,kHr),e(Ur,SHr),e(Ur,kn),e(kn,RHr),e(kn,KAe),e(KAe,PHr),e(kn,BHr),e(kn,ZAe),e(ZAe,IHr),e(kn,NHr),e(kn,e7e),e(e7e,qHr),e(kn,jHr),e(Ur,DHr),e(Ur,te),e(te,g6),e(g6,o7e),e(o7e,GHr),e(g6,OHr),e(g6,Mre),e(Mre,VHr),e(g6,XHr),e(te,zHr),e(te,h6),e(h6,r7e),e(r7e,WHr),e(h6,QHr),e(h6,Ere),e(Ere,UHr),e(h6,HHr),e(te,JHr),e(te,u6),e(u6,t7e),e(t7e,YHr),e(u6,KHr),e(u6,Cre),e(Cre,ZHr),e(u6,eJr),e(te,oJr),e(te,p6),e(p6,a7e),e(a7e,rJr),e(p6,tJr),e(p6,wre),e(wre,aJr),e(p6,nJr),e(te,sJr),e(te,_6),e(_6,n7e),e(n7e,lJr),e(_6,iJr),e(_6,Are),e(Are,dJr),e(_6,cJr),e(te,mJr),e(te,b6),e(b6,s7e),e(s7e,fJr),e(b6,gJr),e(b6,Lre),e(Lre,hJr),e(b6,uJr),e(te,pJr),e(te,v6),e(v6,l7e),e(l7e,_Jr),e(v6,bJr),e(v6,yre),e(yre,vJr),e(v6,FJr),e(te,TJr),e(te,F6),e(F6,i7e),e(i7e,MJr),e(F6,EJr),e(F6,xre),e(xre,CJr),e(F6,wJr),e(te,AJr),e(te,T6),e(T6,d7e),e(d7e,LJr),e(T6,yJr),e(T6,$re),e($re,xJr),e(T6,$Jr),e(te,kJr),e(te,M6),e(M6,c7e),e(c7e,SJr),e(M6,RJr),e(M6,kre),e(kre,PJr),e(M6,BJr),e(te,IJr),e(te,E6),e(E6,m7e),e(m7e,NJr),e(E6,qJr),e(E6,Sre),e(Sre,jJr),e(E6,DJr),e(te,GJr),e(te,C6),e(C6,f7e),e(f7e,OJr),e(C6,VJr),e(C6,Rre),e(Rre,XJr),e(C6,zJr),e(te,WJr),e(te,w6),e(w6,g7e),e(g7e,QJr),e(w6,UJr),e(w6,Pre),e(Pre,HJr),e(w6,JJr),e(te,YJr),e(te,A6),e(A6,h7e),e(h7e,KJr),e(A6,ZJr),e(A6,Bre),e(Bre,eYr),e(A6,oYr),e(te,rYr),e(te,L6),e(L6,u7e),e(u7e,tYr),e(L6,aYr),e(L6,Ire),e(Ire,nYr),e(L6,sYr),e(te,lYr),e(te,y6),e(y6,p7e),e(p7e,iYr),e(y6,dYr),e(y6,Nre),e(Nre,cYr),e(y6,mYr),e(te,fYr),e(te,x6),e(x6,_7e),e(_7e,gYr),e(x6,hYr),e(x6,qre),e(qre,uYr),e(x6,pYr),e(te,_Yr),e(te,$6),e($6,b7e),e(b7e,bYr),e($6,vYr),e($6,jre),e(jre,FYr),e($6,TYr),e(te,MYr),e(te,k6),e(k6,v7e),e(v7e,EYr),e(k6,CYr),e(k6,Dre),e(Dre,wYr),e(k6,AYr),e(te,LYr),e(te,S6),e(S6,F7e),e(F7e,yYr),e(S6,xYr),e(S6,Gre),e(Gre,$Yr),e(S6,kYr),e(te,SYr),e(te,R6),e(R6,T7e),e(T7e,RYr),e(R6,PYr),e(R6,Ore),e(Ore,BYr),e(R6,IYr),e(te,NYr),e(te,P6),e(P6,M7e),e(M7e,qYr),e(P6,jYr),e(P6,Vre),e(Vre,DYr),e(P6,GYr),e(te,OYr),e(te,B6),e(B6,E7e),e(E7e,VYr),e(B6,XYr),e(B6,Xre),e(Xre,zYr),e(B6,WYr),e(te,QYr),e(te,I6),e(I6,C7e),e(C7e,UYr),e(I6,HYr),e(I6,zre),e(zre,JYr),e(I6,YYr),e(te,KYr),e(te,N6),e(N6,w7e),e(w7e,ZYr),e(N6,eKr),e(N6,Wre),e(Wre,oKr),e(N6,rKr),e(te,tKr),e(te,q6),e(q6,A7e),e(A7e,aKr),e(q6,nKr),e(q6,Qre),e(Qre,sKr),e(q6,lKr),e(te,iKr),e(te,j6),e(j6,L7e),e(L7e,dKr),e(j6,cKr),e(j6,Ure),e(Ure,mKr),e(j6,fKr),e(Ur,gKr),M(D6,Ur,null),b(m,cJe,_),b(m,bm,_),e(bm,G6),e(G6,y7e),M(Gk,y7e,null),e(bm,hKr),e(bm,x7e),e(x7e,uKr),b(m,mJe,_),b(m,Fr,_),M(Ok,Fr,null),e(Fr,pKr),e(Fr,vm),e(vm,_Kr),e(vm,Hre),e(Hre,bKr),e(vm,vKr),e(vm,Jre),e(Jre,FKr),e(vm,TKr),e(Fr,MKr),e(Fr,Vk),e(Vk,EKr),e(Vk,$7e),e($7e,CKr),e(Vk,wKr),e(Fr,AKr),e(Fr,ea),M(Xk,ea,null),e(ea,LKr),e(ea,k7e),e(k7e,yKr),e(ea,xKr),e(ea,Fm),e(Fm,$Kr),e(Fm,S7e),e(S7e,kKr),e(Fm,SKr),e(Fm,Yre),e(Yre,RKr),e(Fm,PKr),e(ea,BKr),M(O6,ea,null),e(Fr,IKr),e(Fr,Hr),M(zk,Hr,null),e(Hr,NKr),e(Hr,R7e),e(R7e,qKr),e(Hr,jKr),e(Hr,Sn),e(Sn,DKr),e(Sn,P7e),e(P7e,GKr),e(Sn,OKr),e(Sn,B7e),e(B7e,VKr),e(Sn,XKr),e(Sn,I7e),e(I7e,zKr),e(Sn,WKr),e(Hr,QKr),e(Hr,xe),e(xe,V6),e(V6,N7e),e(N7e,UKr),e(V6,HKr),e(V6,Kre),e(Kre,JKr),e(V6,YKr),e(xe,KKr),e(xe,X6),e(X6,q7e),e(q7e,ZKr),e(X6,eZr),e(X6,Zre),e(Zre,oZr),e(X6,rZr),e(xe,tZr),e(xe,z6),e(z6,j7e),e(j7e,aZr),e(z6,nZr),e(z6,ete),e(ete,sZr),e(z6,lZr),e(xe,iZr),e(xe,W6),e(W6,D7e),e(D7e,dZr),e(W6,cZr),e(W6,ote),e(ote,mZr),e(W6,fZr),e(xe,gZr),e(xe,Q6),e(Q6,G7e),e(G7e,hZr),e(Q6,uZr),e(Q6,rte),e(rte,pZr),e(Q6,_Zr),e(xe,bZr),e(xe,U6),e(U6,O7e),e(O7e,vZr),e(U6,FZr),e(U6,tte),e(tte,TZr),e(U6,MZr),e(xe,EZr),e(xe,H6),e(H6,V7e),e(V7e,CZr),e(H6,wZr),e(H6,ate),e(ate,AZr),e(H6,LZr),e(xe,yZr),e(xe,J6),e(J6,X7e),e(X7e,xZr),e(J6,$Zr),e(J6,nte),e(nte,kZr),e(J6,SZr),e(xe,RZr),e(xe,Y6),e(Y6,z7e),e(z7e,PZr),e(Y6,BZr),e(Y6,ste),e(ste,IZr),e(Y6,NZr),e(xe,qZr),e(xe,K6),e(K6,W7e),e(W7e,jZr),e(K6,DZr),e(K6,lte),e(lte,GZr),e(K6,OZr),e(Hr,VZr),M(Z6,Hr,null),b(m,fJe,_),b(m,Tm,_),e(Tm,eA),e(eA,Q7e),M(Wk,Q7e,null),e(Tm,XZr),e(Tm,U7e),e(U7e,zZr),b(m,gJe,_),b(m,Tr,_),M(Qk,Tr,null),e(Tr,WZr),e(Tr,Mm),e(Mm,QZr),e(Mm,ite),e(ite,UZr),e(Mm,HZr),e(Mm,dte),e(dte,JZr),e(Mm,YZr),e(Tr,KZr),e(Tr,Uk),e(Uk,ZZr),e(Uk,H7e),e(H7e,eet),e(Uk,oet),e(Tr,ret),e(Tr,oa),M(Hk,oa,null),e(oa,tet),e(oa,J7e),e(J7e,aet),e(oa,net),e(oa,Em),e(Em,set),e(Em,Y7e),e(Y7e,iet),e(Em,det),e(Em,cte),e(cte,cet),e(Em,met),e(oa,fet),M(oA,oa,null),e(Tr,get),e(Tr,Jr),M(Jk,Jr,null),e(Jr,het),e(Jr,K7e),e(K7e,uet),e(Jr,pet),e(Jr,Rn),e(Rn,_et),e(Rn,Z7e),e(Z7e,bet),e(Rn,vet),e(Rn,eLe),e(eLe,Fet),e(Rn,Tet),e(Rn,oLe),e(oLe,Met),e(Rn,Eet),e(Jr,Cet),e(Jr,Ee),e(Ee,rA),e(rA,rLe),e(rLe,wet),e(rA,Aet),e(rA,mte),e(mte,Let),e(rA,yet),e(Ee,xet),e(Ee,tA),e(tA,tLe),e(tLe,$et),e(tA,ket),e(tA,fte),e(fte,Set),e(tA,Ret),e(Ee,Pet),e(Ee,aA),e(aA,aLe),e(aLe,Bet),e(aA,Iet),e(aA,gte),e(gte,Net),e(aA,qet),e(Ee,jet),e(Ee,nA),e(nA,nLe),e(nLe,Det),e(nA,Get),e(nA,hte),e(hte,Oet),e(nA,Vet),e(Ee,Xet),e(Ee,sA),e(sA,sLe),e(sLe,zet),e(sA,Wet),e(sA,ute),e(ute,Qet),e(sA,Uet),e(Ee,Het),e(Ee,lA),e(lA,lLe),e(lLe,Jet),e(lA,Yet),e(lA,pte),e(pte,Ket),e(lA,Zet),e(Ee,eot),e(Ee,iA),e(iA,iLe),e(iLe,oot),e(iA,rot),e(iA,_te),e(_te,tot),e(iA,aot),e(Ee,not),e(Ee,dA),e(dA,dLe),e(dLe,sot),e(dA,lot),e(dA,bte),e(bte,iot),e(dA,dot),e(Ee,cot),e(Ee,cA),e(cA,cLe),e(cLe,mot),e(cA,fot),e(cA,vte),e(vte,got),e(cA,hot),e(Ee,uot),e(Ee,mA),e(mA,mLe),e(mLe,pot),e(mA,_ot),e(mA,Fte),e(Fte,bot),e(mA,vot),e(Ee,Fot),e(Ee,fA),e(fA,fLe),e(fLe,Tot),e(fA,Mot),e(fA,Tte),e(Tte,Eot),e(fA,Cot),e(Ee,wot),e(Ee,gA),e(gA,gLe),e(gLe,Aot),e(gA,Lot),e(gA,Mte),e(Mte,yot),e(gA,xot),e(Ee,$ot),e(Ee,hA),e(hA,hLe),e(hLe,kot),e(hA,Sot),e(hA,Ete),e(Ete,Rot),e(hA,Pot),e(Jr,Bot),M(uA,Jr,null),b(m,hJe,_),b(m,Cm,_),e(Cm,pA),e(pA,uLe),M(Yk,uLe,null),e(Cm,Iot),e(Cm,pLe),e(pLe,Not),b(m,uJe,_),b(m,Mr,_),M(Kk,Mr,null),e(Mr,qot),e(Mr,wm),e(wm,jot),e(wm,Cte),e(Cte,Dot),e(wm,Got),e(wm,wte),e(wte,Oot),e(wm,Vot),e(Mr,Xot),e(Mr,Zk),e(Zk,zot),e(Zk,_Le),e(_Le,Wot),e(Zk,Qot),e(Mr,Uot),e(Mr,ra),M(eS,ra,null),e(ra,Hot),e(ra,bLe),e(bLe,Jot),e(ra,Yot),e(ra,Am),e(Am,Kot),e(Am,vLe),e(vLe,Zot),e(Am,ert),e(Am,Ate),e(Ate,ort),e(Am,rrt),e(ra,trt),M(_A,ra,null),e(Mr,art),e(Mr,Yr),M(oS,Yr,null),e(Yr,nrt),e(Yr,FLe),e(FLe,srt),e(Yr,lrt),e(Yr,Pn),e(Pn,irt),e(Pn,TLe),e(TLe,drt),e(Pn,crt),e(Pn,MLe),e(MLe,mrt),e(Pn,frt),e(Pn,ELe),e(ELe,grt),e(Pn,hrt),e(Yr,urt),e(Yr,$e),e($e,bA),e(bA,CLe),e(CLe,prt),e(bA,_rt),e(bA,Lte),e(Lte,brt),e(bA,vrt),e($e,Frt),e($e,vA),e(vA,wLe),e(wLe,Trt),e(vA,Mrt),e(vA,yte),e(yte,Ert),e(vA,Crt),e($e,wrt),e($e,FA),e(FA,ALe),e(ALe,Art),e(FA,Lrt),e(FA,xte),e(xte,yrt),e(FA,xrt),e($e,$rt),e($e,TA),e(TA,LLe),e(LLe,krt),e(TA,Srt),e(TA,$te),e($te,Rrt),e(TA,Prt),e($e,Brt),e($e,MA),e(MA,yLe),e(yLe,Irt),e(MA,Nrt),e(MA,kte),e(kte,qrt),e(MA,jrt),e($e,Drt),e($e,EA),e(EA,xLe),e(xLe,Grt),e(EA,Ort),e(EA,Ste),e(Ste,Vrt),e(EA,Xrt),e($e,zrt),e($e,CA),e(CA,$Le),e($Le,Wrt),e(CA,Qrt),e(CA,Rte),e(Rte,Urt),e(CA,Hrt),e($e,Jrt),e($e,wA),e(wA,kLe),e(kLe,Yrt),e(wA,Krt),e(wA,Pte),e(Pte,Zrt),e(wA,ett),e($e,ott),e($e,AA),e(AA,SLe),e(SLe,rtt),e(AA,ttt),e(AA,Bte),e(Bte,att),e(AA,ntt),e($e,stt),e($e,LA),e(LA,RLe),e(RLe,ltt),e(LA,itt),e(LA,Ite),e(Ite,dtt),e(LA,ctt),e(Yr,mtt),M(yA,Yr,null),b(m,pJe,_),b(m,Lm,_),e(Lm,xA),e(xA,PLe),M(rS,PLe,null),e(Lm,ftt),e(Lm,BLe),e(BLe,gtt),b(m,_Je,_),b(m,Er,_),M(tS,Er,null),e(Er,htt),e(Er,ym),e(ym,utt),e(ym,Nte),e(Nte,ptt),e(ym,_tt),e(ym,qte),e(qte,btt),e(ym,vtt),e(Er,Ftt),e(Er,aS),e(aS,Ttt),e(aS,ILe),e(ILe,Mtt),e(aS,Ett),e(Er,Ctt),e(Er,ta),M(nS,ta,null),e(ta,wtt),e(ta,NLe),e(NLe,Att),e(ta,Ltt),e(ta,xm),e(xm,ytt),e(xm,qLe),e(qLe,xtt),e(xm,$tt),e(xm,jte),e(jte,ktt),e(xm,Stt),e(ta,Rtt),M($A,ta,null),e(Er,Ptt),e(Er,Kr),M(sS,Kr,null),e(Kr,Btt),e(Kr,jLe),e(jLe,Itt),e(Kr,Ntt),e(Kr,Bn),e(Bn,qtt),e(Bn,DLe),e(DLe,jtt),e(Bn,Dtt),e(Bn,GLe),e(GLe,Gtt),e(Bn,Ott),e(Bn,OLe),e(OLe,Vtt),e(Bn,Xtt),e(Kr,ztt),e(Kr,ke),e(ke,kA),e(kA,VLe),e(VLe,Wtt),e(kA,Qtt),e(kA,Dte),e(Dte,Utt),e(kA,Htt),e(ke,Jtt),e(ke,SA),e(SA,XLe),e(XLe,Ytt),e(SA,Ktt),e(SA,Gte),e(Gte,Ztt),e(SA,eat),e(ke,oat),e(ke,RA),e(RA,zLe),e(zLe,rat),e(RA,tat),e(RA,Ote),e(Ote,aat),e(RA,nat),e(ke,sat),e(ke,PA),e(PA,WLe),e(WLe,lat),e(PA,iat),e(PA,Vte),e(Vte,dat),e(PA,cat),e(ke,mat),e(ke,BA),e(BA,QLe),e(QLe,fat),e(BA,gat),e(BA,Xte),e(Xte,hat),e(BA,uat),e(ke,pat),e(ke,IA),e(IA,ULe),e(ULe,_at),e(IA,bat),e(IA,zte),e(zte,vat),e(IA,Fat),e(ke,Tat),e(ke,NA),e(NA,HLe),e(HLe,Mat),e(NA,Eat),e(NA,Wte),e(Wte,Cat),e(NA,wat),e(ke,Aat),e(ke,qA),e(qA,JLe),e(JLe,Lat),e(qA,yat),e(qA,Qte),e(Qte,xat),e(qA,$at),e(ke,kat),e(ke,jA),e(jA,YLe),e(YLe,Sat),e(jA,Rat),e(jA,Ute),e(Ute,Pat),e(jA,Bat),e(ke,Iat),e(ke,DA),e(DA,KLe),e(KLe,Nat),e(DA,qat),e(DA,Hte),e(Hte,jat),e(DA,Dat),e(Kr,Gat),M(GA,Kr,null),b(m,bJe,_),b(m,$m,_),e($m,OA),e(OA,ZLe),M(lS,ZLe,null),e($m,Oat),e($m,eye),e(eye,Vat),b(m,vJe,_),b(m,Cr,_),M(iS,Cr,null),e(Cr,Xat),e(Cr,km),e(km,zat),e(km,Jte),e(Jte,Wat),e(km,Qat),e(km,Yte),e(Yte,Uat),e(km,Hat),e(Cr,Jat),e(Cr,dS),e(dS,Yat),e(dS,oye),e(oye,Kat),e(dS,Zat),e(Cr,ent),e(Cr,aa),M(cS,aa,null),e(aa,ont),e(aa,rye),e(rye,rnt),e(aa,tnt),e(aa,Sm),e(Sm,ant),e(Sm,tye),e(tye,nnt),e(Sm,snt),e(Sm,Kte),e(Kte,lnt),e(Sm,int),e(aa,dnt),M(VA,aa,null),e(Cr,cnt),e(Cr,Zr),M(mS,Zr,null),e(Zr,mnt),e(Zr,aye),e(aye,fnt),e(Zr,gnt),e(Zr,In),e(In,hnt),e(In,nye),e(nye,unt),e(In,pnt),e(In,sye),e(sye,_nt),e(In,bnt),e(In,lye),e(lye,vnt),e(In,Fnt),e(Zr,Tnt),e(Zr,Se),e(Se,XA),e(XA,iye),e(iye,Mnt),e(XA,Ent),e(XA,Zte),e(Zte,Cnt),e(XA,wnt),e(Se,Ant),e(Se,zA),e(zA,dye),e(dye,Lnt),e(zA,ynt),e(zA,eae),e(eae,xnt),e(zA,$nt),e(Se,knt),e(Se,WA),e(WA,cye),e(cye,Snt),e(WA,Rnt),e(WA,oae),e(oae,Pnt),e(WA,Bnt),e(Se,Int),e(Se,QA),e(QA,mye),e(mye,Nnt),e(QA,qnt),e(QA,rae),e(rae,jnt),e(QA,Dnt),e(Se,Gnt),e(Se,UA),e(UA,fye),e(fye,Ont),e(UA,Vnt),e(UA,tae),e(tae,Xnt),e(UA,znt),e(Se,Wnt),e(Se,HA),e(HA,gye),e(gye,Qnt),e(HA,Unt),e(HA,aae),e(aae,Hnt),e(HA,Jnt),e(Se,Ynt),e(Se,JA),e(JA,hye),e(hye,Knt),e(JA,Znt),e(JA,nae),e(nae,est),e(JA,ost),e(Se,rst),e(Se,YA),e(YA,uye),e(uye,tst),e(YA,ast),e(YA,sae),e(sae,nst),e(YA,sst),e(Se,lst),e(Se,KA),e(KA,pye),e(pye,ist),e(KA,dst),e(KA,lae),e(lae,cst),e(KA,mst),e(Se,fst),e(Se,ZA),e(ZA,_ye),e(_ye,gst),e(ZA,hst),e(ZA,iae),e(iae,ust),e(ZA,pst),e(Zr,_st),M(e7,Zr,null),b(m,FJe,_),b(m,Rm,_),e(Rm,o7),e(o7,bye),M(fS,bye,null),e(Rm,bst),e(Rm,vye),e(vye,vst),b(m,TJe,_),b(m,wr,_),M(gS,wr,null),e(wr,Fst),e(wr,Pm),e(Pm,Tst),e(Pm,dae),e(dae,Mst),e(Pm,Est),e(Pm,cae),e(cae,Cst),e(Pm,wst),e(wr,Ast),e(wr,hS),e(hS,Lst),e(hS,Fye),e(Fye,yst),e(hS,xst),e(wr,$st),e(wr,na),M(uS,na,null),e(na,kst),e(na,Tye),e(Tye,Sst),e(na,Rst),e(na,Bm),e(Bm,Pst),e(Bm,Mye),e(Mye,Bst),e(Bm,Ist),e(Bm,mae),e(mae,Nst),e(Bm,qst),e(na,jst),M(r7,na,null),e(wr,Dst),e(wr,et),M(pS,et,null),e(et,Gst),e(et,Eye),e(Eye,Ost),e(et,Vst),e(et,Nn),e(Nn,Xst),e(Nn,Cye),e(Cye,zst),e(Nn,Wst),e(Nn,wye),e(wye,Qst),e(Nn,Ust),e(Nn,Aye),e(Aye,Hst),e(Nn,Jst),e(et,Yst),e(et,Re),e(Re,t7),e(t7,Lye),e(Lye,Kst),e(t7,Zst),e(t7,fae),e(fae,elt),e(t7,olt),e(Re,rlt),e(Re,a7),e(a7,yye),e(yye,tlt),e(a7,alt),e(a7,gae),e(gae,nlt),e(a7,slt),e(Re,llt),e(Re,n7),e(n7,xye),e(xye,ilt),e(n7,dlt),e(n7,hae),e(hae,clt),e(n7,mlt),e(Re,flt),e(Re,s7),e(s7,$ye),e($ye,glt),e(s7,hlt),e(s7,uae),e(uae,ult),e(s7,plt),e(Re,_lt),e(Re,l7),e(l7,kye),e(kye,blt),e(l7,vlt),e(l7,pae),e(pae,Flt),e(l7,Tlt),e(Re,Mlt),e(Re,i7),e(i7,Sye),e(Sye,Elt),e(i7,Clt),e(i7,_ae),e(_ae,wlt),e(i7,Alt),e(Re,Llt),e(Re,d7),e(d7,Rye),e(Rye,ylt),e(d7,xlt),e(d7,bae),e(bae,$lt),e(d7,klt),e(Re,Slt),e(Re,c7),e(c7,Pye),e(Pye,Rlt),e(c7,Plt),e(c7,vae),e(vae,Blt),e(c7,Ilt),e(Re,Nlt),e(Re,m7),e(m7,Bye),e(Bye,qlt),e(m7,jlt),e(m7,Fae),e(Fae,Dlt),e(m7,Glt),e(Re,Olt),e(Re,f7),e(f7,Iye),e(Iye,Vlt),e(f7,Xlt),e(f7,Tae),e(Tae,zlt),e(f7,Wlt),e(et,Qlt),M(g7,et,null),b(m,MJe,_),b(m,Im,_),e(Im,h7),e(h7,Nye),M(_S,Nye,null),e(Im,Ult),e(Im,qye),e(qye,Hlt),b(m,EJe,_),b(m,Ar,_),M(bS,Ar,null),e(Ar,Jlt),e(Ar,Nm),e(Nm,Ylt),e(Nm,Mae),e(Mae,Klt),e(Nm,Zlt),e(Nm,Eae),e(Eae,eit),e(Nm,oit),e(Ar,rit),e(Ar,vS),e(vS,tit),e(vS,jye),e(jye,ait),e(vS,nit),e(Ar,sit),e(Ar,sa),M(FS,sa,null),e(sa,lit),e(sa,Dye),e(Dye,iit),e(sa,dit),e(sa,qm),e(qm,cit),e(qm,Gye),e(Gye,mit),e(qm,fit),e(qm,Cae),e(Cae,git),e(qm,hit),e(sa,uit),M(u7,sa,null),e(Ar,pit),e(Ar,ot),M(TS,ot,null),e(ot,_it),e(ot,Oye),e(Oye,bit),e(ot,vit),e(ot,qn),e(qn,Fit),e(qn,Vye),e(Vye,Tit),e(qn,Mit),e(qn,Xye),e(Xye,Eit),e(qn,Cit),e(qn,zye),e(zye,wit),e(qn,Ait),e(ot,Lit),e(ot,Xe),e(Xe,p7),e(p7,Wye),e(Wye,yit),e(p7,xit),e(p7,wae),e(wae,$it),e(p7,kit),e(Xe,Sit),e(Xe,_7),e(_7,Qye),e(Qye,Rit),e(_7,Pit),e(_7,Aae),e(Aae,Bit),e(_7,Iit),e(Xe,Nit),e(Xe,b7),e(b7,Uye),e(Uye,qit),e(b7,jit),e(b7,Lae),e(Lae,Dit),e(b7,Git),e(Xe,Oit),e(Xe,v7),e(v7,Hye),e(Hye,Vit),e(v7,Xit),e(v7,yae),e(yae,zit),e(v7,Wit),e(Xe,Qit),e(Xe,F7),e(F7,Jye),e(Jye,Uit),e(F7,Hit),e(F7,xae),e(xae,Jit),e(F7,Yit),e(Xe,Kit),e(Xe,T7),e(T7,Yye),e(Yye,Zit),e(T7,edt),e(T7,$ae),e($ae,odt),e(T7,rdt),e(Xe,tdt),e(Xe,M7),e(M7,Kye),e(Kye,adt),e(M7,ndt),e(M7,kae),e(kae,sdt),e(M7,ldt),e(Xe,idt),e(Xe,E7),e(E7,Zye),e(Zye,ddt),e(E7,cdt),e(E7,Sae),e(Sae,mdt),e(E7,fdt),e(ot,gdt),M(C7,ot,null),b(m,CJe,_),b(m,jm,_),e(jm,w7),e(w7,e8e),M(MS,e8e,null),e(jm,hdt),e(jm,o8e),e(o8e,udt),b(m,wJe,_),b(m,Lr,_),M(ES,Lr,null),e(Lr,pdt),e(Lr,Dm),e(Dm,_dt),e(Dm,Rae),e(Rae,bdt),e(Dm,vdt),e(Dm,Pae),e(Pae,Fdt),e(Dm,Tdt),e(Lr,Mdt),e(Lr,CS),e(CS,Edt),e(CS,r8e),e(r8e,Cdt),e(CS,wdt),e(Lr,Adt),e(Lr,la),M(wS,la,null),e(la,Ldt),e(la,t8e),e(t8e,ydt),e(la,xdt),e(la,Gm),e(Gm,$dt),e(Gm,a8e),e(a8e,kdt),e(Gm,Sdt),e(Gm,Bae),e(Bae,Rdt),e(Gm,Pdt),e(la,Bdt),M(A7,la,null),e(Lr,Idt),e(Lr,rt),M(AS,rt,null),e(rt,Ndt),e(rt,n8e),e(n8e,qdt),e(rt,jdt),e(rt,jn),e(jn,Ddt),e(jn,s8e),e(s8e,Gdt),e(jn,Odt),e(jn,l8e),e(l8e,Vdt),e(jn,Xdt),e(jn,i8e),e(i8e,zdt),e(jn,Wdt),e(rt,Qdt),e(rt,ze),e(ze,L7),e(L7,d8e),e(d8e,Udt),e(L7,Hdt),e(L7,Iae),e(Iae,Jdt),e(L7,Ydt),e(ze,Kdt),e(ze,y7),e(y7,c8e),e(c8e,Zdt),e(y7,ect),e(y7,Nae),e(Nae,oct),e(y7,rct),e(ze,tct),e(ze,x7),e(x7,m8e),e(m8e,act),e(x7,nct),e(x7,qae),e(qae,sct),e(x7,lct),e(ze,ict),e(ze,$7),e($7,f8e),e(f8e,dct),e($7,cct),e($7,jae),e(jae,mct),e($7,fct),e(ze,gct),e(ze,k7),e(k7,g8e),e(g8e,hct),e(k7,uct),e(k7,Dae),e(Dae,pct),e(k7,_ct),e(ze,bct),e(ze,S7),e(S7,h8e),e(h8e,vct),e(S7,Fct),e(S7,Gae),e(Gae,Tct),e(S7,Mct),e(ze,Ect),e(ze,R7),e(R7,u8e),e(u8e,Cct),e(R7,wct),e(R7,Oae),e(Oae,Act),e(R7,Lct),e(ze,yct),e(ze,P7),e(P7,p8e),e(p8e,xct),e(P7,$ct),e(P7,Vae),e(Vae,kct),e(P7,Sct),e(rt,Rct),M(B7,rt,null),b(m,AJe,_),b(m,Om,_),e(Om,I7),e(I7,_8e),M(LS,_8e,null),e(Om,Pct),e(Om,b8e),e(b8e,Bct),b(m,LJe,_),b(m,yr,_),M(yS,yr,null),e(yr,Ict),e(yr,Vm),e(Vm,Nct),e(Vm,Xae),e(Xae,qct),e(Vm,jct),e(Vm,zae),e(zae,Dct),e(Vm,Gct),e(yr,Oct),e(yr,xS),e(xS,Vct),e(xS,v8e),e(v8e,Xct),e(xS,zct),e(yr,Wct),e(yr,ia),M($S,ia,null),e(ia,Qct),e(ia,F8e),e(F8e,Uct),e(ia,Hct),e(ia,Xm),e(Xm,Jct),e(Xm,T8e),e(T8e,Yct),e(Xm,Kct),e(Xm,Wae),e(Wae,Zct),e(Xm,emt),e(ia,omt),M(N7,ia,null),e(yr,rmt),e(yr,tt),M(kS,tt,null),e(tt,tmt),e(tt,M8e),e(M8e,amt),e(tt,nmt),e(tt,Dn),e(Dn,smt),e(Dn,E8e),e(E8e,lmt),e(Dn,imt),e(Dn,C8e),e(C8e,dmt),e(Dn,cmt),e(Dn,w8e),e(w8e,mmt),e(Dn,fmt),e(tt,gmt),e(tt,A8e),e(A8e,q7),e(q7,L8e),e(L8e,hmt),e(q7,umt),e(q7,Qae),e(Qae,pmt),e(q7,_mt),e(tt,bmt),M(j7,tt,null),b(m,yJe,_),b(m,zm,_),e(zm,D7),e(D7,y8e),M(SS,y8e,null),e(zm,vmt),e(zm,x8e),e(x8e,Fmt),b(m,xJe,_),b(m,xr,_),M(RS,xr,null),e(xr,Tmt),e(xr,Wm),e(Wm,Mmt),e(Wm,Uae),e(Uae,Emt),e(Wm,Cmt),e(Wm,Hae),e(Hae,wmt),e(Wm,Amt),e(xr,Lmt),e(xr,PS),e(PS,ymt),e(PS,$8e),e($8e,xmt),e(PS,$mt),e(xr,kmt),e(xr,da),M(BS,da,null),e(da,Smt),e(da,k8e),e(k8e,Rmt),e(da,Pmt),e(da,Qm),e(Qm,Bmt),e(Qm,S8e),e(S8e,Imt),e(Qm,Nmt),e(Qm,Jae),e(Jae,qmt),e(Qm,jmt),e(da,Dmt),M(G7,da,null),e(xr,Gmt),e(xr,at),M(IS,at,null),e(at,Omt),e(at,R8e),e(R8e,Vmt),e(at,Xmt),e(at,Gn),e(Gn,zmt),e(Gn,P8e),e(P8e,Wmt),e(Gn,Qmt),e(Gn,B8e),e(B8e,Umt),e(Gn,Hmt),e(Gn,I8e),e(I8e,Jmt),e(Gn,Ymt),e(at,Kmt),e(at,NS),e(NS,O7),e(O7,N8e),e(N8e,Zmt),e(O7,eft),e(O7,Yae),e(Yae,oft),e(O7,rft),e(NS,tft),e(NS,V7),e(V7,q8e),e(q8e,aft),e(V7,nft),e(V7,Kae),e(Kae,sft),e(V7,lft),e(at,ift),M(X7,at,null),b(m,$Je,_),b(m,Um,_),e(Um,z7),e(z7,j8e),M(qS,j8e,null),e(Um,dft),e(Um,D8e),e(D8e,cft),b(m,kJe,_),b(m,$r,_),M(jS,$r,null),e($r,mft),e($r,Hm),e(Hm,fft),e(Hm,Zae),e(Zae,gft),e(Hm,hft),e(Hm,ene),e(ene,uft),e(Hm,pft),e($r,_ft),e($r,DS),e(DS,bft),e(DS,G8e),e(G8e,vft),e(DS,Fft),e($r,Tft),e($r,ca),M(GS,ca,null),e(ca,Mft),e(ca,O8e),e(O8e,Eft),e(ca,Cft),e(ca,Jm),e(Jm,wft),e(Jm,V8e),e(V8e,Aft),e(Jm,Lft),e(Jm,one),e(one,yft),e(Jm,xft),e(ca,$ft),M(W7,ca,null),e($r,kft),e($r,nt),M(OS,nt,null),e(nt,Sft),e(nt,X8e),e(X8e,Rft),e(nt,Pft),e(nt,On),e(On,Bft),e(On,z8e),e(z8e,Ift),e(On,Nft),e(On,W8e),e(W8e,qft),e(On,jft),e(On,Q8e),e(Q8e,Dft),e(On,Gft),e(nt,Oft),e(nt,U8e),e(U8e,Q7),e(Q7,H8e),e(H8e,Vft),e(Q7,Xft),e(Q7,rne),e(rne,zft),e(Q7,Wft),e(nt,Qft),M(U7,nt,null),SJe=!0},p(m,[_]){const VS={};_&2&&(VS.$$scope={dirty:_,ctx:m}),nf.$set(VS);const J8e={};_&2&&(J8e.$$scope={dirty:_,ctx:m}),Mh.$set(J8e);const Y8e={};_&2&&(Y8e.$$scope={dirty:_,ctx:m}),au.$set(Y8e);const K8e={};_&2&&(K8e.$$scope={dirty:_,ctx:m}),zu.$set(K8e);const XS={};_&2&&(XS.$$scope={dirty:_,ctx:m}),Wu.$set(XS);const Z8e={};_&2&&(Z8e.$$scope={dirty:_,ctx:m}),up.$set(Z8e);const Vn={};_&2&&(Vn.$$scope={dirty:_,ctx:m}),pp.$set(Vn);const e9e={};_&2&&(e9e.$$scope={dirty:_,ctx:m}),vp.$set(e9e);const o9e={};_&2&&(o9e.$$scope={dirty:_,ctx:m}),y2.$set(o9e);const r9e={};_&2&&(r9e.$$scope={dirty:_,ctx:m}),$2.$set(r9e);const zS={};_&2&&(zS.$$scope={dirty:_,ctx:m}),wb.$set(zS);const t9e={};_&2&&(t9e.$$scope={dirty:_,ctx:m}),Lb.$set(t9e);const WS={};_&2&&(WS.$$scope={dirty:_,ctx:m}),uv.$set(WS);const a9e={};_&2&&(a9e.$$scope={dirty:_,ctx:m}),_v.$set(a9e);const QS={};_&2&&(QS.$$scope={dirty:_,ctx:m}),t1.$set(QS);const n9e={};_&2&&(n9e.$$scope={dirty:_,ctx:m}),n1.$set(n9e);const s9e={};_&2&&(s9e.$$scope={dirty:_,ctx:m}),A1.$set(s9e);const l9e={};_&2&&(l9e.$$scope={dirty:_,ctx:m}),y1.$set(l9e);const Ym={};_&2&&(Ym.$$scope={dirty:_,ctx:m}),yF.$set(Ym);const i9e={};_&2&&(i9e.$$scope={dirty:_,ctx:m}),$F.$set(i9e);const d9e={};_&2&&(d9e.$$scope={dirty:_,ctx:m}),dT.$set(d9e);const c9e={};_&2&&(c9e.$$scope={dirty:_,ctx:m}),mT.$set(c9e);const US={};_&2&&(US.$$scope={dirty:_,ctx:m}),vT.$set(US);const m9e={};_&2&&(m9e.$$scope={dirty:_,ctx:m}),TT.$set(m9e);const f9e={};_&2&&(f9e.$$scope={dirty:_,ctx:m}),sM.$set(f9e);const g9e={};_&2&&(g9e.$$scope={dirty:_,ctx:m}),iM.$set(g9e);const dt={};_&2&&(dt.$$scope={dirty:_,ctx:m}),ZM.$set(dt);const HS={};_&2&&(HS.$$scope={dirty:_,ctx:m}),oE.$set(HS);const h9e={};_&2&&(h9e.$$scope={dirty:_,ctx:m}),aE.$set(h9e);const JS={};_&2&&(JS.$$scope={dirty:_,ctx:m}),sE.$set(JS);const u9e={};_&2&&(u9e.$$scope={dirty:_,ctx:m}),ME.$set(u9e);const ct={};_&2&&(ct.$$scope={dirty:_,ctx:m}),CE.$set(ct);const p9e={};_&2&&(p9e.$$scope={dirty:_,ctx:m}),LE.$set(p9e);const Km={};_&2&&(Km.$$scope={dirty:_,ctx:m}),xE.$set(Km);const _9e={};_&2&&(_9e.$$scope={dirty:_,ctx:m}),SE.$set(_9e);const b9e={};_&2&&(b9e.$$scope={dirty:_,ctx:m}),PE.$set(b9e);const L={};_&2&&(L.$$scope={dirty:_,ctx:m}),NE.$set(L);const H7={};_&2&&(H7.$$scope={dirty:_,ctx:m}),jE.$set(H7);const v9e={};_&2&&(v9e.$$scope={dirty:_,ctx:m}),JE.$set(v9e);const F9e={};_&2&&(F9e.$$scope={dirty:_,ctx:m}),KE.$set(F9e);const J7={};_&2&&(J7.$$scope={dirty:_,ctx:m}),n4.$set(J7);const T9e={};_&2&&(T9e.$$scope={dirty:_,ctx:m}),l4.$set(T9e);const M9e={};_&2&&(M9e.$$scope={dirty:_,ctx:m}),v4.$set(M9e);const Y7={};_&2&&(Y7.$$scope={dirty:_,ctx:m}),T4.$set(Y7);const E9e={};_&2&&(E9e.$$scope={dirty:_,ctx:m}),w4.$set(E9e);const C9e={};_&2&&(C9e.$$scope={dirty:_,ctx:m}),L4.$set(C9e);const K7={};_&2&&(K7.$$scope={dirty:_,ctx:m}),P4.$set(K7);const w9e={};_&2&&(w9e.$$scope={dirty:_,ctx:m}),I4.$set(w9e);const A9e={};_&2&&(A9e.$$scope={dirty:_,ctx:m}),O4.$set(A9e);const Z7={};_&2&&(Z7.$$scope={dirty:_,ctx:m}),X4.$set(Z7);const L9e={};_&2&&(L9e.$$scope={dirty:_,ctx:m}),U4.$set(L9e);const y9e={};_&2&&(y9e.$$scope={dirty:_,ctx:m}),J4.$set(y9e);const eL={};_&2&&(eL.$$scope={dirty:_,ctx:m}),Z4.$set(eL);const x9e={};_&2&&(x9e.$$scope={dirty:_,ctx:m}),oC.$set(x9e);const $9e={};_&2&&($9e.$$scope={dirty:_,ctx:m}),iC.$set($9e);const oL={};_&2&&(oL.$$scope={dirty:_,ctx:m}),cC.$set(oL);const k9e={};_&2&&(k9e.$$scope={dirty:_,ctx:m}),gC.$set(k9e);const S9e={};_&2&&(S9e.$$scope={dirty:_,ctx:m}),uC.$set(S9e);const rL={};_&2&&(rL.$$scope={dirty:_,ctx:m}),u3.$set(rL);const R9e={};_&2&&(R9e.$$scope={dirty:_,ctx:m}),_3.$set(R9e);const P9e={};_&2&&(P9e.$$scope={dirty:_,ctx:m}),G3.$set(P9e);const tL={};_&2&&(tL.$$scope={dirty:_,ctx:m}),V3.$set(tL);const B9e={};_&2&&(B9e.$$scope={dirty:_,ctx:m}),a5.$set(B9e);const I9e={};_&2&&(I9e.$$scope={dirty:_,ctx:m}),s5.$set(I9e);const aL={};_&2&&(aL.$$scope={dirty:_,ctx:m}),u5.$set(aL);const N9e={};_&2&&(N9e.$$scope={dirty:_,ctx:m}),_5.$set(N9e);const q9e={};_&2&&(q9e.$$scope={dirty:_,ctx:m}),T5.$set(q9e);const nL={};_&2&&(nL.$$scope={dirty:_,ctx:m}),E5.$set(nL);const j9e={};_&2&&(j9e.$$scope={dirty:_,ctx:m}),X5.$set(j9e);const D9e={};_&2&&(D9e.$$scope={dirty:_,ctx:m}),W5.$set(D9e);const sL={};_&2&&(sL.$$scope={dirty:_,ctx:m}),t0.$set(sL);const G9e={};_&2&&(G9e.$$scope={dirty:_,ctx:m}),n0.$set(G9e);const O9e={};_&2&&(O9e.$$scope={dirty:_,ctx:m}),R0.$set(O9e);const lL={};_&2&&(lL.$$scope={dirty:_,ctx:m}),B0.$set(lL);const V9e={};_&2&&(V9e.$$scope={dirty:_,ctx:m}),Z0.$set(V9e);const X9e={};_&2&&(X9e.$$scope={dirty:_,ctx:m}),ow.$set(X9e);const iL={};_&2&&(iL.$$scope={dirty:_,ctx:m}),aw.$set(iL);const z9e={};_&2&&(z9e.$$scope={dirty:_,ctx:m}),sw.$set(z9e);const W9e={};_&2&&(W9e.$$scope={dirty:_,ctx:m}),iw.$set(W9e);const dL={};_&2&&(dL.$$scope={dirty:_,ctx:m}),cw.$set(dL);const Q9e={};_&2&&(Q9e.$$scope={dirty:_,ctx:m}),Sw.$set(Q9e);const U9e={};_&2&&(U9e.$$scope={dirty:_,ctx:m}),Pw.$set(U9e);const cL={};_&2&&(cL.$$scope={dirty:_,ctx:m}),r6.$set(cL);const H9e={};_&2&&(H9e.$$scope={dirty:_,ctx:m}),a6.$set(H9e);const J9e={};_&2&&(J9e.$$scope={dirty:_,ctx:m}),s6.$set(J9e);const mL={};_&2&&(mL.$$scope={dirty:_,ctx:m}),i6.$set(mL);const Y9e={};_&2&&(Y9e.$$scope={dirty:_,ctx:m}),c6.$set(Y9e);const K9e={};_&2&&(K9e.$$scope={dirty:_,ctx:m}),f6.$set(K9e);const fL={};_&2&&(fL.$$scope={dirty:_,ctx:m}),D6.$set(fL);const Z9e={};_&2&&(Z9e.$$scope={dirty:_,ctx:m}),O6.$set(Z9e);const exe={};_&2&&(exe.$$scope={dirty:_,ctx:m}),Z6.$set(exe);const gL={};_&2&&(gL.$$scope={dirty:_,ctx:m}),oA.$set(gL);const oxe={};_&2&&(oxe.$$scope={dirty:_,ctx:m}),uA.$set(oxe);const rxe={};_&2&&(rxe.$$scope={dirty:_,ctx:m}),_A.$set(rxe);const hL={};_&2&&(hL.$$scope={dirty:_,ctx:m}),yA.$set(hL);const txe={};_&2&&(txe.$$scope={dirty:_,ctx:m}),$A.$set(txe);const axe={};_&2&&(axe.$$scope={dirty:_,ctx:m}),GA.$set(axe);const uL={};_&2&&(uL.$$scope={dirty:_,ctx:m}),VA.$set(uL);const nxe={};_&2&&(nxe.$$scope={dirty:_,ctx:m}),e7.$set(nxe);const sxe={};_&2&&(sxe.$$scope={dirty:_,ctx:m}),r7.$set(sxe);const pL={};_&2&&(pL.$$scope={dirty:_,ctx:m}),g7.$set(pL);const lxe={};_&2&&(lxe.$$scope={dirty:_,ctx:m}),u7.$set(lxe);const ixe={};_&2&&(ixe.$$scope={dirty:_,ctx:m}),C7.$set(ixe);const _L={};_&2&&(_L.$$scope={dirty:_,ctx:m}),A7.$set(_L);const dxe={};_&2&&(dxe.$$scope={dirty:_,ctx:m}),B7.$set(dxe);const cxe={};_&2&&(cxe.$$scope={dirty:_,ctx:m}),N7.$set(cxe);const bL={};_&2&&(bL.$$scope={dirty:_,ctx:m}),j7.$set(bL);const mxe={};_&2&&(mxe.$$scope={dirty:_,ctx:m}),G7.$set(mxe);const fxe={};_&2&&(fxe.$$scope={dirty:_,ctx:m}),X7.$set(fxe);const vL={};_&2&&(vL.$$scope={dirty:_,ctx:m}),W7.$set(vL);const gxe={};_&2&&(gxe.$$scope={dirty:_,ctx:m}),U7.$set(gxe)},i(m){SJe||(E(d.$$.fragment,m),E(ja.$$.fragment,m),E(E8.$$.fragment,m),E(C8.$$.fragment,m),E(nf.$$.fragment,m),E(w8.$$.fragment,m),E(A8.$$.fragment,m),E(x8.$$.fragment,m),E(Mh.$$.fragment,m),E($8.$$.fragment,m),E(k8.$$.fragment,m),E(S8.$$.fragment,m),E(B8.$$.fragment,m),E(au.$$.fragment,m),E(I8.$$.fragment,m),E(N8.$$.fragment,m),E(q8.$$.fragment,m),E(G8.$$.fragment,m),E(zu.$$.fragment,m),E(Wu.$$.fragment,m),E(O8.$$.fragment,m),E(V8.$$.fragment,m),E(X8.$$.fragment,m),E(Q8.$$.fragment,m),E(up.$$.fragment,m),E(pp.$$.fragment,m),E(U8.$$.fragment,m),E(H8.$$.fragment,m),E(J8.$$.fragment,m),E(K8.$$.fragment,m),E(vp.$$.fragment,m),E(Z8.$$.fragment,m),E(y2.$$.fragment,m),E(e9.$$.fragment,m),E(o9.$$.fragment,m),E(t9.$$.fragment,m),E($2.$$.fragment,m),E(a9.$$.fragment,m),E(wb.$$.fragment,m),E(n9.$$.fragment,m),E(s9.$$.fragment,m),E(i9.$$.fragment,m),E(Lb.$$.fragment,m),E(d9.$$.fragment,m),E(uv.$$.fragment,m),E(c9.$$.fragment,m),E(m9.$$.fragment,m),E(g9.$$.fragment,m),E(_v.$$.fragment,m),E(h9.$$.fragment,m),E(t1.$$.fragment,m),E(u9.$$.fragment,m),E(p9.$$.fragment,m),E(b9.$$.fragment,m),E(n1.$$.fragment,m),E(v9.$$.fragment,m),E(A1.$$.fragment,m),E(F9.$$.fragment,m),E(T9.$$.fragment,m),E(E9.$$.fragment,m),E(y1.$$.fragment,m),E(C9.$$.fragment,m),E(yF.$$.fragment,m),E(w9.$$.fragment,m),E(A9.$$.fragment,m),E(y9.$$.fragment,m),E($F.$$.fragment,m),E(x9.$$.fragment,m),E(dT.$$.fragment,m),E($9.$$.fragment,m),E(k9.$$.fragment,m),E(R9.$$.fragment,m),E(mT.$$.fragment,m),E(P9.$$.fragment,m),E(vT.$$.fragment,m),E(B9.$$.fragment,m),E(I9.$$.fragment,m),E(q9.$$.fragment,m),E(TT.$$.fragment,m),E(j9.$$.fragment,m),E(sM.$$.fragment,m),E(D9.$$.fragment,m),E(G9.$$.fragment,m),E(V9.$$.fragment,m),E(iM.$$.fragment,m),E(X9.$$.fragment,m),E(ZM.$$.fragment,m),E(z9.$$.fragment,m),E(W9.$$.fragment,m),E(U9.$$.fragment,m),E(oE.$$.fragment,m),E(H9.$$.fragment,m),E(aE.$$.fragment,m),E(J9.$$.fragment,m),E(Y9.$$.fragment,m),E(Z9.$$.fragment,m),E(sE.$$.fragment,m),E(ex.$$.fragment,m),E(ME.$$.fragment,m),E(ox.$$.fragment,m),E(rx.$$.fragment,m),E(ax.$$.fragment,m),E(CE.$$.fragment,m),E(nx.$$.fragment,m),E(LE.$$.fragment,m),E(sx.$$.fragment,m),E(lx.$$.fragment,m),E(dx.$$.fragment,m),E(xE.$$.fragment,m),E(cx.$$.fragment,m),E(SE.$$.fragment,m),E(mx.$$.fragment,m),E(fx.$$.fragment,m),E(hx.$$.fragment,m),E(PE.$$.fragment,m),E(ux.$$.fragment,m),E(NE.$$.fragment,m),E(px.$$.fragment,m),E(_x.$$.fragment,m),E(vx.$$.fragment,m),E(jE.$$.fragment,m),E(Fx.$$.fragment,m),E(JE.$$.fragment,m),E(Tx.$$.fragment,m),E(Mx.$$.fragment,m),E(Cx.$$.fragment,m),E(KE.$$.fragment,m),E(wx.$$.fragment,m),E(n4.$$.fragment,m),E(Ax.$$.fragment,m),E(Lx.$$.fragment,m),E(xx.$$.fragment,m),E(l4.$$.fragment,m),E($x.$$.fragment,m),E(v4.$$.fragment,m),E(kx.$$.fragment,m),E(Sx.$$.fragment,m),E(Px.$$.fragment,m),E(T4.$$.fragment,m),E(Bx.$$.fragment,m),E(w4.$$.fragment,m),E(Nx.$$.fragment,m),E(qx.$$.fragment,m),E(Dx.$$.fragment,m),E(L4.$$.fragment,m),E(Gx.$$.fragment,m),E(P4.$$.fragment,m),E(Ox.$$.fragment,m),E(Vx.$$.fragment,m),E(zx.$$.fragment,m),E(I4.$$.fragment,m),E(Wx.$$.fragment,m),E(O4.$$.fragment,m),E(Qx.$$.fragment,m),E(Ux.$$.fragment,m),E(Jx.$$.fragment,m),E(X4.$$.fragment,m),E(Yx.$$.fragment,m),E(U4.$$.fragment,m),E(Zx.$$.fragment,m),E(e$.$$.fragment,m),E(r$.$$.fragment,m),E(J4.$$.fragment,m),E(t$.$$.fragment,m),E(Z4.$$.fragment,m),E(a$.$$.fragment,m),E(n$.$$.fragment,m),E(l$.$$.fragment,m),E(oC.$$.fragment,m),E(i$.$$.fragment,m),E(iC.$$.fragment,m),E(d$.$$.fragment,m),E(c$.$$.fragment,m),E(f$.$$.fragment,m),E(cC.$$.fragment,m),E(g$.$$.fragment,m),E(gC.$$.fragment,m),E(h$.$$.fragment,m),E(u$.$$.fragment,m),E(_$.$$.fragment,m),E(uC.$$.fragment,m),E(b$.$$.fragment,m),E(u3.$$.fragment,m),E(v$.$$.fragment,m),E(F$.$$.fragment,m),E(M$.$$.fragment,m),E(_3.$$.fragment,m),E(E$.$$.fragment,m),E(G3.$$.fragment,m),E(C$.$$.fragment,m),E(w$.$$.fragment,m),E(L$.$$.fragment,m),E(V3.$$.fragment,m),E(y$.$$.fragment,m),E(a5.$$.fragment,m),E(x$.$$.fragment,m),E($$.$$.fragment,m),E(S$.$$.fragment,m),E(s5.$$.fragment,m),E(R$.$$.fragment,m),E(u5.$$.fragment,m),E(P$.$$.fragment,m),E(B$.$$.fragment,m),E(N$.$$.fragment,m),E(_5.$$.fragment,m),E(q$.$$.fragment,m),E(T5.$$.fragment,m),E(j$.$$.fragment,m),E(D$.$$.fragment,m),E(O$.$$.fragment,m),E(E5.$$.fragment,m),E(V$.$$.fragment,m),E(X5.$$.fragment,m),E(X$.$$.fragment,m),E(z$.$$.fragment,m),E(Q$.$$.fragment,m),E(W5.$$.fragment,m),E(U$.$$.fragment,m),E(t0.$$.fragment,m),E(H$.$$.fragment,m),E(J$.$$.fragment,m),E(K$.$$.fragment,m),E(n0.$$.fragment,m),E(Z$.$$.fragment,m),E(R0.$$.fragment,m),E(ek.$$.fragment,m),E(ok.$$.fragment,m),E(tk.$$.fragment,m),E(B0.$$.fragment,m),E(ak.$$.fragment,m),E(Z0.$$.fragment,m),E(nk.$$.fragment,m),E(sk.$$.fragment,m),E(ik.$$.fragment,m),E(ow.$$.fragment,m),E(dk.$$.fragment,m),E(aw.$$.fragment,m),E(mk.$$.fragment,m),E(fk.$$.fragment,m),E(hk.$$.fragment,m),E(sw.$$.fragment,m),E(uk.$$.fragment,m),E(iw.$$.fragment,m),E(pk.$$.fragment,m),E(_k.$$.fragment,m),E(vk.$$.fragment,m),E(cw.$$.fragment,m),E(Fk.$$.fragment,m),E(Sw.$$.fragment,m),E(Tk.$$.fragment,m),E(Mk.$$.fragment,m),E(Ck.$$.fragment,m),E(Pw.$$.fragment,m),E(wk.$$.fragment,m),E(r6.$$.fragment,m),E(Ak.$$.fragment,m),E(Lk.$$.fragment,m),E(xk.$$.fragment,m),E(a6.$$.fragment,m),E($k.$$.fragment,m),E(s6.$$.fragment,m),E(kk.$$.fragment,m),E(Sk.$$.fragment,m),E(Pk.$$.fragment,m),E(i6.$$.fragment,m),E(Bk.$$.fragment,m),E(c6.$$.fragment,m),E(Ik.$$.fragment,m),E(Nk.$$.fragment,m),E(jk.$$.fragment,m),E(f6.$$.fragment,m),E(Dk.$$.fragment,m),E(D6.$$.fragment,m),E(Gk.$$.fragment,m),E(Ok.$$.fragment,m),E(Xk.$$.fragment,m),E(O6.$$.fragment,m),E(zk.$$.fragment,m),E(Z6.$$.fragment,m),E(Wk.$$.fragment,m),E(Qk.$$.fragment,m),E(Hk.$$.fragment,m),E(oA.$$.fragment,m),E(Jk.$$.fragment,m),E(uA.$$.fragment,m),E(Yk.$$.fragment,m),E(Kk.$$.fragment,m),E(eS.$$.fragment,m),E(_A.$$.fragment,m),E(oS.$$.fragment,m),E(yA.$$.fragment,m),E(rS.$$.fragment,m),E(tS.$$.fragment,m),E(nS.$$.fragment,m),E($A.$$.fragment,m),E(sS.$$.fragment,m),E(GA.$$.fragment,m),E(lS.$$.fragment,m),E(iS.$$.fragment,m),E(cS.$$.fragment,m),E(VA.$$.fragment,m),E(mS.$$.fragment,m),E(e7.$$.fragment,m),E(fS.$$.fragment,m),E(gS.$$.fragment,m),E(uS.$$.fragment,m),E(r7.$$.fragment,m),E(pS.$$.fragment,m),E(g7.$$.fragment,m),E(_S.$$.fragment,m),E(bS.$$.fragment,m),E(FS.$$.fragment,m),E(u7.$$.fragment,m),E(TS.$$.fragment,m),E(C7.$$.fragment,m),E(MS.$$.fragment,m),E(ES.$$.fragment,m),E(wS.$$.fragment,m),E(A7.$$.fragment,m),E(AS.$$.fragment,m),E(B7.$$.fragment,m),E(LS.$$.fragment,m),E(yS.$$.fragment,m),E($S.$$.fragment,m),E(N7.$$.fragment,m),E(kS.$$.fragment,m),E(j7.$$.fragment,m),E(SS.$$.fragment,m),E(RS.$$.fragment,m),E(BS.$$.fragment,m),E(G7.$$.fragment,m),E(IS.$$.fragment,m),E(X7.$$.fragment,m),E(qS.$$.fragment,m),E(jS.$$.fragment,m),E(GS.$$.fragment,m),E(W7.$$.fragment,m),E(OS.$$.fragment,m),E(U7.$$.fragment,m),SJe=!0)},o(m){C(d.$$.fragment,m),C(ja.$$.fragment,m),C(E8.$$.fragment,m),C(C8.$$.fragment,m),C(nf.$$.fragment,m),C(w8.$$.fragment,m),C(A8.$$.fragment,m),C(x8.$$.fragment,m),C(Mh.$$.fragment,m),C($8.$$.fragment,m),C(k8.$$.fragment,m),C(S8.$$.fragment,m),C(B8.$$.fragment,m),C(au.$$.fragment,m),C(I8.$$.fragment,m),C(N8.$$.fragment,m),C(q8.$$.fragment,m),C(G8.$$.fragment,m),C(zu.$$.fragment,m),C(Wu.$$.fragment,m),C(O8.$$.fragment,m),C(V8.$$.fragment,m),C(X8.$$.fragment,m),C(Q8.$$.fragment,m),C(up.$$.fragment,m),C(pp.$$.fragment,m),C(U8.$$.fragment,m),C(H8.$$.fragment,m),C(J8.$$.fragment,m),C(K8.$$.fragment,m),C(vp.$$.fragment,m),C(Z8.$$.fragment,m),C(y2.$$.fragment,m),C(e9.$$.fragment,m),C(o9.$$.fragment,m),C(t9.$$.fragment,m),C($2.$$.fragment,m),C(a9.$$.fragment,m),C(wb.$$.fragment,m),C(n9.$$.fragment,m),C(s9.$$.fragment,m),C(i9.$$.fragment,m),C(Lb.$$.fragment,m),C(d9.$$.fragment,m),C(uv.$$.fragment,m),C(c9.$$.fragment,m),C(m9.$$.fragment,m),C(g9.$$.fragment,m),C(_v.$$.fragment,m),C(h9.$$.fragment,m),C(t1.$$.fragment,m),C(u9.$$.fragment,m),C(p9.$$.fragment,m),C(b9.$$.fragment,m),C(n1.$$.fragment,m),C(v9.$$.fragment,m),C(A1.$$.fragment,m),C(F9.$$.fragment,m),C(T9.$$.fragment,m),C(E9.$$.fragment,m),C(y1.$$.fragment,m),C(C9.$$.fragment,m),C(yF.$$.fragment,m),C(w9.$$.fragment,m),C(A9.$$.fragment,m),C(y9.$$.fragment,m),C($F.$$.fragment,m),C(x9.$$.fragment,m),C(dT.$$.fragment,m),C($9.$$.fragment,m),C(k9.$$.fragment,m),C(R9.$$.fragment,m),C(mT.$$.fragment,m),C(P9.$$.fragment,m),C(vT.$$.fragment,m),C(B9.$$.fragment,m),C(I9.$$.fragment,m),C(q9.$$.fragment,m),C(TT.$$.fragment,m),C(j9.$$.fragment,m),C(sM.$$.fragment,m),C(D9.$$.fragment,m),C(G9.$$.fragment,m),C(V9.$$.fragment,m),C(iM.$$.fragment,m),C(X9.$$.fragment,m),C(ZM.$$.fragment,m),C(z9.$$.fragment,m),C(W9.$$.fragment,m),C(U9.$$.fragment,m),C(oE.$$.fragment,m),C(H9.$$.fragment,m),C(aE.$$.fragment,m),C(J9.$$.fragment,m),C(Y9.$$.fragment,m),C(Z9.$$.fragment,m),C(sE.$$.fragment,m),C(ex.$$.fragment,m),C(ME.$$.fragment,m),C(ox.$$.fragment,m),C(rx.$$.fragment,m),C(ax.$$.fragment,m),C(CE.$$.fragment,m),C(nx.$$.fragment,m),C(LE.$$.fragment,m),C(sx.$$.fragment,m),C(lx.$$.fragment,m),C(dx.$$.fragment,m),C(xE.$$.fragment,m),C(cx.$$.fragment,m),C(SE.$$.fragment,m),C(mx.$$.fragment,m),C(fx.$$.fragment,m),C(hx.$$.fragment,m),C(PE.$$.fragment,m),C(ux.$$.fragment,m),C(NE.$$.fragment,m),C(px.$$.fragment,m),C(_x.$$.fragment,m),C(vx.$$.fragment,m),C(jE.$$.fragment,m),C(Fx.$$.fragment,m),C(JE.$$.fragment,m),C(Tx.$$.fragment,m),C(Mx.$$.fragment,m),C(Cx.$$.fragment,m),C(KE.$$.fragment,m),C(wx.$$.fragment,m),C(n4.$$.fragment,m),C(Ax.$$.fragment,m),C(Lx.$$.fragment,m),C(xx.$$.fragment,m),C(l4.$$.fragment,m),C($x.$$.fragment,m),C(v4.$$.fragment,m),C(kx.$$.fragment,m),C(Sx.$$.fragment,m),C(Px.$$.fragment,m),C(T4.$$.fragment,m),C(Bx.$$.fragment,m),C(w4.$$.fragment,m),C(Nx.$$.fragment,m),C(qx.$$.fragment,m),C(Dx.$$.fragment,m),C(L4.$$.fragment,m),C(Gx.$$.fragment,m),C(P4.$$.fragment,m),C(Ox.$$.fragment,m),C(Vx.$$.fragment,m),C(zx.$$.fragment,m),C(I4.$$.fragment,m),C(Wx.$$.fragment,m),C(O4.$$.fragment,m),C(Qx.$$.fragment,m),C(Ux.$$.fragment,m),C(Jx.$$.fragment,m),C(X4.$$.fragment,m),C(Yx.$$.fragment,m),C(U4.$$.fragment,m),C(Zx.$$.fragment,m),C(e$.$$.fragment,m),C(r$.$$.fragment,m),C(J4.$$.fragment,m),C(t$.$$.fragment,m),C(Z4.$$.fragment,m),C(a$.$$.fragment,m),C(n$.$$.fragment,m),C(l$.$$.fragment,m),C(oC.$$.fragment,m),C(i$.$$.fragment,m),C(iC.$$.fragment,m),C(d$.$$.fragment,m),C(c$.$$.fragment,m),C(f$.$$.fragment,m),C(cC.$$.fragment,m),C(g$.$$.fragment,m),C(gC.$$.fragment,m),C(h$.$$.fragment,m),C(u$.$$.fragment,m),C(_$.$$.fragment,m),C(uC.$$.fragment,m),C(b$.$$.fragment,m),C(u3.$$.fragment,m),C(v$.$$.fragment,m),C(F$.$$.fragment,m),C(M$.$$.fragment,m),C(_3.$$.fragment,m),C(E$.$$.fragment,m),C(G3.$$.fragment,m),C(C$.$$.fragment,m),C(w$.$$.fragment,m),C(L$.$$.fragment,m),C(V3.$$.fragment,m),C(y$.$$.fragment,m),C(a5.$$.fragment,m),C(x$.$$.fragment,m),C($$.$$.fragment,m),C(S$.$$.fragment,m),C(s5.$$.fragment,m),C(R$.$$.fragment,m),C(u5.$$.fragment,m),C(P$.$$.fragment,m),C(B$.$$.fragment,m),C(N$.$$.fragment,m),C(_5.$$.fragment,m),C(q$.$$.fragment,m),C(T5.$$.fragment,m),C(j$.$$.fragment,m),C(D$.$$.fragment,m),C(O$.$$.fragment,m),C(E5.$$.fragment,m),C(V$.$$.fragment,m),C(X5.$$.fragment,m),C(X$.$$.fragment,m),C(z$.$$.fragment,m),C(Q$.$$.fragment,m),C(W5.$$.fragment,m),C(U$.$$.fragment,m),C(t0.$$.fragment,m),C(H$.$$.fragment,m),C(J$.$$.fragment,m),C(K$.$$.fragment,m),C(n0.$$.fragment,m),C(Z$.$$.fragment,m),C(R0.$$.fragment,m),C(ek.$$.fragment,m),C(ok.$$.fragment,m),C(tk.$$.fragment,m),C(B0.$$.fragment,m),C(ak.$$.fragment,m),C(Z0.$$.fragment,m),C(nk.$$.fragment,m),C(sk.$$.fragment,m),C(ik.$$.fragment,m),C(ow.$$.fragment,m),C(dk.$$.fragment,m),C(aw.$$.fragment,m),C(mk.$$.fragment,m),C(fk.$$.fragment,m),C(hk.$$.fragment,m),C(sw.$$.fragment,m),C(uk.$$.fragment,m),C(iw.$$.fragment,m),C(pk.$$.fragment,m),C(_k.$$.fragment,m),C(vk.$$.fragment,m),C(cw.$$.fragment,m),C(Fk.$$.fragment,m),C(Sw.$$.fragment,m),C(Tk.$$.fragment,m),C(Mk.$$.fragment,m),C(Ck.$$.fragment,m),C(Pw.$$.fragment,m),C(wk.$$.fragment,m),C(r6.$$.fragment,m),C(Ak.$$.fragment,m),C(Lk.$$.fragment,m),C(xk.$$.fragment,m),C(a6.$$.fragment,m),C($k.$$.fragment,m),C(s6.$$.fragment,m),C(kk.$$.fragment,m),C(Sk.$$.fragment,m),C(Pk.$$.fragment,m),C(i6.$$.fragment,m),C(Bk.$$.fragment,m),C(c6.$$.fragment,m),C(Ik.$$.fragment,m),C(Nk.$$.fragment,m),C(jk.$$.fragment,m),C(f6.$$.fragment,m),C(Dk.$$.fragment,m),C(D6.$$.fragment,m),C(Gk.$$.fragment,m),C(Ok.$$.fragment,m),C(Xk.$$.fragment,m),C(O6.$$.fragment,m),C(zk.$$.fragment,m),C(Z6.$$.fragment,m),C(Wk.$$.fragment,m),C(Qk.$$.fragment,m),C(Hk.$$.fragment,m),C(oA.$$.fragment,m),C(Jk.$$.fragment,m),C(uA.$$.fragment,m),C(Yk.$$.fragment,m),C(Kk.$$.fragment,m),C(eS.$$.fragment,m),C(_A.$$.fragment,m),C(oS.$$.fragment,m),C(yA.$$.fragment,m),C(rS.$$.fragment,m),C(tS.$$.fragment,m),C(nS.$$.fragment,m),C($A.$$.fragment,m),C(sS.$$.fragment,m),C(GA.$$.fragment,m),C(lS.$$.fragment,m),C(iS.$$.fragment,m),C(cS.$$.fragment,m),C(VA.$$.fragment,m),C(mS.$$.fragment,m),C(e7.$$.fragment,m),C(fS.$$.fragment,m),C(gS.$$.fragment,m),C(uS.$$.fragment,m),C(r7.$$.fragment,m),C(pS.$$.fragment,m),C(g7.$$.fragment,m),C(_S.$$.fragment,m),C(bS.$$.fragment,m),C(FS.$$.fragment,m),C(u7.$$.fragment,m),C(TS.$$.fragment,m),C(C7.$$.fragment,m),C(MS.$$.fragment,m),C(ES.$$.fragment,m),C(wS.$$.fragment,m),C(A7.$$.fragment,m),C(AS.$$.fragment,m),C(B7.$$.fragment,m),C(LS.$$.fragment,m),C(yS.$$.fragment,m),C($S.$$.fragment,m),C(N7.$$.fragment,m),C(kS.$$.fragment,m),C(j7.$$.fragment,m),C(SS.$$.fragment,m),C(RS.$$.fragment,m),C(BS.$$.fragment,m),C(G7.$$.fragment,m),C(IS.$$.fragment,m),C(X7.$$.fragment,m),C(qS.$$.fragment,m),C(jS.$$.fragment,m),C(GS.$$.fragment,m),C(W7.$$.fragment,m),C(OS.$$.fragment,m),C(U7.$$.fragment,m),SJe=!1},d(m){t(g),m&&t(v),m&&t(u),w(d),m&&t(ef),m&&t(mt),m&&t(Ve),m&&t(Ue),m&&t(rf),w(ja,m),m&&t(He),m&&t(Ae),m&&t(Lo),m&&t(Da),m&&t(EUe),m&&t(Hi),w(E8),m&&t(CUe),m&&t(Un),m&&t(wUe),w(C8,m),m&&t(AUe),m&&t(_P),m&&t(LUe),w(nf,m),m&&t(yUe),m&&t(Ji),w(w8),m&&t(xUe),m&&t(yo),w(A8),w(x8),w(Mh),w($8),m&&t($Ue),m&&t(Ki),w(k8),m&&t(kUe),m&&t(xo),w(S8),w(B8),w(au),w(I8),m&&t(SUe),m&&t(Zi),w(N8),m&&t(RUe),m&&t($o),w(q8),w(G8),w(zu),w(Wu),w(O8),m&&t(PUe),m&&t(ed),w(V8),m&&t(BUe),m&&t(ko),w(X8),w(Q8),w(up),w(pp),w(U8),m&&t(IUe),m&&t(rd),w(H8),m&&t(NUe),m&&t(So),w(J8),w(K8),w(vp),w(Z8),w(y2),m&&t(qUe),m&&t(nd),w(e9),m&&t(jUe),m&&t(Ro),w(o9),w(t9),w($2),w(a9),w(wb),m&&t(DUe),m&&t(id),w(n9),m&&t(GUe),m&&t(Po),w(s9),w(i9),w(Lb),w(d9),w(uv),m&&t(OUe),m&&t(md),w(c9),m&&t(VUe),m&&t(Bo),w(m9),w(g9),w(_v),w(h9),w(t1),m&&t(XUe),m&&t(hd),w(u9),m&&t(zUe),m&&t(Io),w(p9),w(b9),w(n1),w(v9),w(A1),m&&t(WUe),m&&t(_d),w(F9),m&&t(QUe),m&&t(No),w(T9),w(E9),w(y1),w(C9),w(yF),m&&t(UUe),m&&t(Fd),w(w9),m&&t(HUe),m&&t(qo),w(A9),w(y9),w($F),w(x9),w(dT),m&&t(JUe),m&&t(Ed),w($9),m&&t(YUe),m&&t(jo),w(k9),w(R9),w(mT),w(P9),w(vT),m&&t(KUe),m&&t(Ad),w(B9),m&&t(ZUe),m&&t(Go),w(I9),w(q9),w(TT),w(j9),w(sM),m&&t(eHe),m&&t(xd),w(D9),m&&t(oHe),m&&t(Oo),w(G9),w(V9),w(iM),w(X9),w(ZM),m&&t(rHe),m&&t(Sd),w(z9),m&&t(tHe),m&&t(Vo),w(W9),w(U9),w(oE),w(H9),w(aE),m&&t(aHe),m&&t(Bd),w(J9),m&&t(nHe),m&&t(Xo),w(Y9),w(Z9),w(sE),w(ex),w(ME),m&&t(sHe),m&&t(qd),w(ox),m&&t(lHe),m&&t(zo),w(rx),w(ax),w(CE),w(nx),w(LE),m&&t(iHe),m&&t(Gd),w(sx),m&&t(dHe),m&&t(Wo),w(lx),w(dx),w(xE),w(cx),w(SE),m&&t(cHe),m&&t(Xd),w(mx),m&&t(mHe),m&&t(Qo),w(fx),w(hx),w(PE),w(ux),w(NE),m&&t(fHe),m&&t(Qd),w(px),m&&t(gHe),m&&t(Uo),w(_x),w(vx),w(jE),w(Fx),w(JE),m&&t(hHe),m&&t(Jd),w(Tx),m&&t(uHe),m&&t(Ho),w(Mx),w(Cx),w(KE),w(wx),w(n4),m&&t(pHe),m&&t(Zd),w(Ax),m&&t(_He),m&&t(Jo),w(Lx),w(xx),w(l4),w($x),w(v4),m&&t(bHe),m&&t(rc),w(kx),m&&t(vHe),m&&t(Yo),w(Sx),w(Px),w(T4),w(Bx),w(w4),m&&t(FHe),m&&t(nc),w(Nx),m&&t(THe),m&&t(Ko),w(qx),w(Dx),w(L4),w(Gx),w(P4),m&&t(MHe),m&&t(ic),w(Ox),m&&t(EHe),m&&t(Zo),w(Vx),w(zx),w(I4),w(Wx),w(O4),m&&t(CHe),m&&t(mc),w(Qx),m&&t(wHe),m&&t(er),w(Ux),w(Jx),w(X4),w(Yx),w(U4),m&&t(AHe),m&&t(hc),w(Zx),m&&t(LHe),m&&t(or),w(e$),w(r$),w(J4),w(t$),w(Z4),m&&t(yHe),m&&t(_c),w(a$),m&&t(xHe),m&&t(rr),w(n$),w(l$),w(oC),w(i$),w(iC),m&&t($He),m&&t(Fc),w(d$),m&&t(kHe),m&&t(tr),w(c$),w(f$),w(cC),w(g$),w(gC),m&&t(SHe),m&&t(Ec),w(h$),m&&t(RHe),m&&t(ar),w(u$),w(_$),w(uC),w(b$),w(u3),m&&t(PHe),m&&t(Ac),w(v$),m&&t(BHe),m&&t(nr),w(F$),w(M$),w(_3),w(E$),w(G3),m&&t(IHe),m&&t(xc),w(C$),m&&t(NHe),m&&t(sr),w(w$),w(L$),w(V3),w(y$),w(a5),m&&t(qHe),m&&t(Sc),w(x$),m&&t(jHe),m&&t(lr),w($$),w(S$),w(s5),w(R$),w(u5),m&&t(DHe),m&&t(Bc),w(P$),m&&t(GHe),m&&t(ir),w(B$),w(N$),w(_5),w(q$),w(T5),m&&t(OHe),m&&t(jc),w(j$),m&&t(VHe),m&&t(dr),w(D$),w(O$),w(E5),w(V$),w(X5),m&&t(XHe),m&&t(Oc),w(X$),m&&t(zHe),m&&t(cr),w(z$),w(Q$),w(W5),w(U$),w(t0),m&&t(WHe),m&&t(zc),w(H$),m&&t(QHe),m&&t(mr),w(J$),w(K$),w(n0),w(Z$),w(R0),m&&t(UHe),m&&t(Uc),w(ek),m&&t(HHe),m&&t(fr),w(ok),w(tk),w(B0),w(ak),w(Z0),m&&t(JHe),m&&t(Yc),w(nk),m&&t(YHe),m&&t(gr),w(sk),w(ik),w(ow),w(dk),w(aw),m&&t(KHe),m&&t(em),w(mk),m&&t(ZHe),m&&t(hr),w(fk),w(hk),w(sw),w(uk),w(iw),m&&t(eJe),m&&t(tm),w(pk),m&&t(oJe),m&&t(ur),w(_k),w(vk),w(cw),w(Fk),w(Sw),m&&t(rJe),m&&t(sm),w(Tk),m&&t(tJe),m&&t(pr),w(Mk),w(Ck),w(Pw),w(wk),w(r6),m&&t(aJe),m&&t(dm),w(Ak),m&&t(nJe),m&&t(_r),w(Lk),w(xk),w(a6),w($k),w(s6),m&&t(sJe),m&&t(fm),w(kk),m&&t(lJe),m&&t(br),w(Sk),w(Pk),w(i6),w(Bk),w(c6),m&&t(iJe),m&&t(um),w(Ik),m&&t(dJe),m&&t(vr),w(Nk),w(jk),w(f6),w(Dk),w(D6),m&&t(cJe),m&&t(bm),w(Gk),m&&t(mJe),m&&t(Fr),w(Ok),w(Xk),w(O6),w(zk),w(Z6),m&&t(fJe),m&&t(Tm),w(Wk),m&&t(gJe),m&&t(Tr),w(Qk),w(Hk),w(oA),w(Jk),w(uA),m&&t(hJe),m&&t(Cm),w(Yk),m&&t(uJe),m&&t(Mr),w(Kk),w(eS),w(_A),w(oS),w(yA),m&&t(pJe),m&&t(Lm),w(rS),m&&t(_Je),m&&t(Er),w(tS),w(nS),w($A),w(sS),w(GA),m&&t(bJe),m&&t($m),w(lS),m&&t(vJe),m&&t(Cr),w(iS),w(cS),w(VA),w(mS),w(e7),m&&t(FJe),m&&t(Rm),w(fS),m&&t(TJe),m&&t(wr),w(gS),w(uS),w(r7),w(pS),w(g7),m&&t(MJe),m&&t(Im),w(_S),m&&t(EJe),m&&t(Ar),w(bS),w(FS),w(u7),w(TS),w(C7),m&&t(CJe),m&&t(jm),w(MS),m&&t(wJe),m&&t(Lr),w(ES),w(wS),w(A7),w(AS),w(B7),m&&t(AJe),m&&t(Om),w(LS),m&&t(LJe),m&&t(yr),w(yS),w($S),w(N7),w(kS),w(j7),m&&t(yJe),m&&t(zm),w(SS),m&&t(xJe),m&&t(xr),w(RS),w(BS),w(G7),w(IS),w(X7),m&&t($Je),m&&t(Um),w(qS),m&&t(kJe),m&&t($r),w(jS),w(GS),w(W7),w(OS),w(U7)}}}const Rsa={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVideoClassification",title:"AutoModelForVideoClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForSemanticSegmentation",title:"TFAutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Psa($){return yaa(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Gsa extends Caa{constructor(g){super();waa(this,g,Psa,Ssa,Aaa,{})}}export{Gsa as default,Rsa as metadata};
