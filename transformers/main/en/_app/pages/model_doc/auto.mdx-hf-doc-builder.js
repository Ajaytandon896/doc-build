import{S as lkt,i as ikt,s as dkt,e as a,k as l,w as F,t as o,M as ckt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as mkt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as TXr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as te}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function fkt(L){let g,v,u,f,p,d,h,Mo,mi,hm,rt,fi,gi,Ly,um,De,We,hi,yn,xy,Ln,xn,$y,ui,$n,ky,pi,pm,Ca;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),mi=a("code"),hm=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),fi=a("code"),gi=o('"new-model"'),Ly=o(")."),um=l(),De=a("p"),We=o("Likewise, if your "),hi=a("code"),yn=o("NewModel"),xy=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),$y=o(`, make sure its
`),ui=a("code"),$n=o("config_class"),ky=o(` attribute is set to the same class you use when registering the model (here
`),pi=a("code"),pm=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var J$=s(u);f=r(J$,"NewModelConfig"),J$.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var _i=s(d);h=r(_i,"PretrainedConfig"),_i.forEach(t),Mo=r(Ae,`, make sure its
`),mi=n(Ae,"CODE",{});var Y$=s(mi);hm=r(Y$,"model_type"),Y$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),fi=n(Ae,"CODE",{});var K$=s(fi);gi=r(K$,'"new-model"'),K$.forEach(t),Ly=r(Ae,")."),Ae.forEach(t),um=i(Qe),De=n(Qe,"P",{});var Eo=s(De);We=r(Eo,"Likewise, if your "),hi=n(Eo,"CODE",{});var wa=s(hi);yn=r(wa,"NewModel"),wa.forEach(t),xy=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var Z$=s(Ln);xn=r(Z$,"PreTrainedModel"),Z$.forEach(t),$y=r(Eo,`, make sure its
`),ui=n(Eo,"CODE",{});var _m=s(ui);$n=r(_m,"config_class"),_m.forEach(t),ky=r(Eo,` attribute is set to the same class you use when registering the model (here
`),pi=n(Eo,"CODE",{});var ek=s(pi);pm=r(ek,"NewModelConfig"),ek.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,Mo),e(g,mi),e(mi,hm),e(g,rt),e(g,fi),e(fi,gi),e(g,Ly),b(Qe,um,Ae),b(Qe,De,Ae),e(De,We),e(De,hi),e(hi,yn),e(De,xy),e(De,Ln),e(Ln,xn),e(De,$y),e(De,ui),e(ui,$n),e(De,ky),e(De,pi),e(pi,pm),e(De,Ca)},d(Qe){Qe&&t(g),Qe&&t(um),Qe&&t(De)}}}function gkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ukt(L){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Mo=s(u);f=r(Mo,"use_auth_token=True"),Mo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function pkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _kt(L){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Mo=s(u);f=r(Mo,"use_auth_token=True"),Mo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function bkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Fkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Tkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Mkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ekt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ckt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Akt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ykt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Lkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $kt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Skt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Rkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Pkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Bkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ikt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Nkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Dkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Gkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Okt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Vkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Xkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Wkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Qkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Hkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ukt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Jkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ykt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Kkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Zkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _St(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function FSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function TSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function MSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ESt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function CSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ASt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ySt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function LSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $St(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function SSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function RSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function PSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function BSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ISt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function NSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function DSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function GSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function OSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function VSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function XSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function WSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function QSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function HSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function USt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function JSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function YSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function KSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ZSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eRt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oRt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rRt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tRt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aRt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nRt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sRt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lRt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iRt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dRt(L){let g,v,u,f,p,d,h,Mo,mi,hm,rt,fi,gi,Ly,um,De,We,hi,yn,xy,Ln,xn,$y,ui,$n,ky,pi,pm,Ca,Qe,Ae,J$,_i,Y$,K$,Eo,wa,Z$,_m,ek,xOe,bqe,bi,bm,poe,Sy,$Oe,_oe,kOe,vqe,kn,SOe,boe,ROe,POe,voe,BOe,IOe,Fqe,Ry,Tqe,ok,NOe,Mqe,vm,Eqe,vi,Fm,Foe,Py,qOe,Toe,jOe,Cqe,Co,By,DOe,Iy,GOe,rk,OOe,VOe,XOe,Ny,zOe,Moe,WOe,QOe,HOe,Er,qy,UOe,Eoe,JOe,YOe,Fi,KOe,Coe,ZOe,eVe,woe,oVe,rVe,tVe,A,Tm,Aoe,aVe,nVe,tk,sVe,lVe,iVe,Mm,yoe,dVe,cVe,ak,mVe,fVe,gVe,Em,Loe,hVe,uVe,nk,pVe,_Ve,bVe,Cm,xoe,vVe,FVe,sk,TVe,MVe,EVe,wm,$oe,CVe,wVe,lk,AVe,yVe,LVe,Am,koe,xVe,$Ve,ik,kVe,SVe,RVe,ym,Soe,PVe,BVe,dk,IVe,NVe,qVe,Lm,Roe,jVe,DVe,ck,GVe,OVe,VVe,xm,Poe,XVe,zVe,mk,WVe,QVe,HVe,$m,Boe,UVe,JVe,fk,YVe,KVe,ZVe,km,Ioe,eXe,oXe,gk,rXe,tXe,aXe,Sm,Noe,nXe,sXe,hk,lXe,iXe,dXe,Rm,qoe,cXe,mXe,uk,fXe,gXe,hXe,Pm,joe,uXe,pXe,pk,_Xe,bXe,vXe,Bm,Doe,FXe,TXe,_k,MXe,EXe,CXe,Im,Goe,wXe,AXe,bk,yXe,LXe,xXe,Nm,Ooe,$Xe,kXe,vk,SXe,RXe,PXe,qm,Voe,BXe,IXe,Fk,NXe,qXe,jXe,jm,Xoe,DXe,GXe,Tk,OXe,VXe,XXe,Dm,zoe,zXe,WXe,Mk,QXe,HXe,UXe,Gm,Woe,JXe,YXe,Ek,KXe,ZXe,eze,Om,Qoe,oze,rze,Ck,tze,aze,nze,Vm,Hoe,sze,lze,wk,ize,dze,cze,Xm,Uoe,mze,fze,Ak,gze,hze,uze,zm,Joe,pze,_ze,yk,bze,vze,Fze,Wm,Yoe,Tze,Mze,Lk,Eze,Cze,wze,Qm,Koe,Aze,yze,xk,Lze,xze,$ze,Hm,Zoe,kze,Sze,$k,Rze,Pze,Bze,Um,ere,Ize,Nze,kk,qze,jze,Dze,Jm,ore,Gze,Oze,Sk,Vze,Xze,zze,Ym,rre,Wze,Qze,Rk,Hze,Uze,Jze,Km,tre,Yze,Kze,Pk,Zze,eWe,oWe,Zm,are,rWe,tWe,Bk,aWe,nWe,sWe,ef,nre,lWe,iWe,Ik,dWe,cWe,mWe,of,sre,fWe,gWe,Nk,hWe,uWe,pWe,rf,lre,_We,bWe,qk,vWe,FWe,TWe,tf,ire,MWe,EWe,jk,CWe,wWe,AWe,af,dre,yWe,LWe,Dk,xWe,$We,kWe,nf,cre,SWe,RWe,Gk,PWe,BWe,IWe,sf,mre,NWe,qWe,Ok,jWe,DWe,GWe,lf,fre,OWe,VWe,Vk,XWe,zWe,WWe,df,gre,QWe,HWe,Xk,UWe,JWe,YWe,cf,hre,KWe,ZWe,zk,eQe,oQe,rQe,mf,ure,tQe,aQe,Wk,nQe,sQe,lQe,ff,pre,iQe,dQe,Qk,cQe,mQe,fQe,gf,_re,gQe,hQe,Hk,uQe,pQe,_Qe,hf,bre,bQe,vQe,Uk,FQe,TQe,MQe,uf,vre,EQe,CQe,Jk,wQe,AQe,yQe,pf,Fre,LQe,xQe,Yk,$Qe,kQe,SQe,_f,Tre,RQe,PQe,Kk,BQe,IQe,NQe,bf,Mre,qQe,jQe,Zk,DQe,GQe,OQe,vf,Ere,VQe,XQe,eS,zQe,WQe,QQe,Ff,Cre,HQe,UQe,oS,JQe,YQe,KQe,Tf,wre,ZQe,eHe,rS,oHe,rHe,tHe,Mf,Are,aHe,nHe,tS,sHe,lHe,iHe,Ef,yre,dHe,cHe,aS,mHe,fHe,gHe,Cf,Lre,hHe,uHe,nS,pHe,_He,bHe,wf,xre,vHe,FHe,sS,THe,MHe,EHe,Af,$re,CHe,wHe,lS,AHe,yHe,LHe,yf,kre,xHe,$He,iS,kHe,SHe,RHe,Lf,Sre,PHe,BHe,dS,IHe,NHe,qHe,xf,Rre,jHe,DHe,cS,GHe,OHe,VHe,$f,Pre,XHe,zHe,mS,WHe,QHe,HHe,kf,Bre,UHe,JHe,fS,YHe,KHe,ZHe,Sf,Ire,eUe,oUe,gS,rUe,tUe,aUe,Rf,Nre,nUe,sUe,hS,lUe,iUe,dUe,Pf,qre,cUe,mUe,uS,fUe,gUe,hUe,Bf,jre,uUe,pUe,pS,_Ue,bUe,vUe,If,Dre,FUe,TUe,_S,MUe,EUe,CUe,Nf,Gre,wUe,AUe,bS,yUe,LUe,xUe,qf,Ore,$Ue,kUe,vS,SUe,RUe,PUe,jf,Vre,BUe,IUe,FS,NUe,qUe,jUe,Df,Xre,DUe,GUe,TS,OUe,VUe,XUe,Gf,zre,zUe,WUe,MS,QUe,HUe,UUe,Of,Wre,JUe,YUe,ES,KUe,ZUe,eJe,Vf,Qre,oJe,rJe,CS,tJe,aJe,nJe,Xf,Hre,sJe,lJe,wS,iJe,dJe,cJe,zf,Ure,mJe,fJe,AS,gJe,hJe,uJe,Wf,Jre,pJe,_Je,yS,bJe,vJe,FJe,Qf,Yre,TJe,MJe,LS,EJe,CJe,wJe,Hf,Kre,AJe,yJe,xS,LJe,xJe,$Je,Uf,Zre,kJe,SJe,$S,RJe,PJe,BJe,Jf,ete,IJe,NJe,kS,qJe,jJe,DJe,Yf,ote,GJe,OJe,SS,VJe,XJe,zJe,Kf,rte,WJe,QJe,RS,HJe,UJe,JJe,Zf,tte,YJe,KJe,PS,ZJe,eYe,oYe,eg,ate,rYe,tYe,BS,aYe,nYe,sYe,og,nte,lYe,iYe,IS,dYe,cYe,mYe,rg,ste,fYe,gYe,NS,hYe,uYe,pYe,tg,lte,_Ye,bYe,qS,vYe,FYe,TYe,ag,ite,MYe,EYe,jS,CYe,wYe,AYe,ng,dte,yYe,LYe,DS,xYe,$Ye,kYe,sg,cte,SYe,RYe,GS,PYe,BYe,IYe,lg,mte,NYe,qYe,OS,jYe,DYe,GYe,ig,fte,OYe,VYe,VS,XYe,zYe,WYe,dg,gte,QYe,HYe,XS,UYe,JYe,YYe,cg,hte,KYe,ZYe,zS,eKe,oKe,rKe,mg,ute,tKe,aKe,WS,nKe,sKe,lKe,fg,pte,iKe,dKe,QS,cKe,mKe,fKe,gg,_te,gKe,hKe,HS,uKe,pKe,_Ke,hg,bte,bKe,vKe,US,FKe,TKe,MKe,ug,vte,EKe,CKe,JS,wKe,AKe,yKe,pg,Fte,LKe,xKe,YS,$Ke,kKe,SKe,_g,Tte,RKe,PKe,KS,BKe,IKe,NKe,bg,Mte,qKe,jKe,ZS,DKe,GKe,OKe,vg,Ete,VKe,XKe,eR,zKe,WKe,QKe,Fg,Cte,HKe,UKe,oR,JKe,YKe,KKe,Tg,wte,ZKe,eZe,rR,oZe,rZe,tZe,Mg,Ate,aZe,nZe,tR,sZe,lZe,iZe,Eg,dZe,Cg,jy,cZe,yte,mZe,wqe,Ti,wg,Lte,Dy,fZe,xte,gZe,Aqe,wo,Gy,hZe,Oy,uZe,aR,pZe,_Ze,bZe,Vy,vZe,$te,FZe,TZe,MZe,Cr,Xy,EZe,kte,CZe,wZe,Aa,AZe,Ste,yZe,LZe,Rte,xZe,$Ze,Pte,kZe,SZe,RZe,k,Sn,Bte,PZe,BZe,nR,IZe,NZe,sR,qZe,jZe,DZe,Rn,Ite,GZe,OZe,lR,VZe,XZe,iR,zZe,WZe,QZe,Pn,Nte,HZe,UZe,dR,JZe,YZe,cR,KZe,ZZe,eeo,Ag,qte,oeo,reo,mR,teo,aeo,neo,Bn,jte,seo,leo,fR,ieo,deo,gR,ceo,meo,feo,yg,Dte,geo,heo,hR,ueo,peo,_eo,Lg,Gte,beo,veo,uR,Feo,Teo,Meo,xg,Ote,Eeo,Ceo,pR,weo,Aeo,yeo,In,Vte,Leo,xeo,_R,$eo,keo,bR,Seo,Reo,Peo,Nn,Xte,Beo,Ieo,vR,Neo,qeo,FR,jeo,Deo,Geo,qn,zte,Oeo,Veo,TR,Xeo,zeo,MR,Weo,Qeo,Heo,$g,Wte,Ueo,Jeo,ER,Yeo,Keo,Zeo,kg,Qte,eoo,ooo,CR,roo,too,aoo,jn,Hte,noo,soo,wR,loo,ioo,AR,doo,coo,moo,Sg,Ute,foo,goo,yR,hoo,uoo,poo,Dn,Jte,_oo,boo,LR,voo,Foo,xR,Too,Moo,Eoo,Gn,Yte,Coo,woo,$R,Aoo,yoo,kR,Loo,xoo,$oo,On,Kte,koo,Soo,SR,Roo,Poo,RR,Boo,Ioo,Noo,Rg,Zte,qoo,joo,PR,Doo,Goo,Ooo,Vn,eae,Voo,Xoo,BR,zoo,Woo,IR,Qoo,Hoo,Uoo,Xn,oae,Joo,Yoo,NR,Koo,Zoo,qR,ero,oro,rro,zn,rae,tro,aro,jR,nro,sro,DR,lro,iro,dro,Wn,tae,cro,mro,GR,fro,gro,OR,hro,uro,pro,Qn,aae,_ro,bro,VR,vro,Fro,XR,Tro,Mro,Ero,Hn,nae,Cro,wro,zR,Aro,yro,WR,Lro,xro,$ro,Pg,sae,kro,Sro,QR,Rro,Pro,Bro,Un,lae,Iro,Nro,HR,qro,jro,UR,Dro,Gro,Oro,Bg,iae,Vro,Xro,JR,zro,Wro,Qro,Jn,dae,Hro,Uro,YR,Jro,Yro,KR,Kro,Zro,eto,Yn,cae,oto,rto,ZR,tto,ato,eP,nto,sto,lto,Kn,mae,ito,dto,oP,cto,mto,rP,fto,gto,hto,Ig,fae,uto,pto,tP,_to,bto,vto,Zn,gae,Fto,Tto,aP,Mto,Eto,nP,Cto,wto,Ato,es,hae,yto,Lto,sP,xto,$to,lP,kto,Sto,Rto,Ng,uae,Pto,Bto,iP,Ito,Nto,qto,os,pae,jto,Dto,dP,Gto,Oto,cP,Vto,Xto,zto,rs,_ae,Wto,Qto,mP,Hto,Uto,fP,Jto,Yto,Kto,ts,bae,Zto,eao,gP,oao,rao,hP,tao,aao,nao,as,vae,sao,lao,uP,iao,dao,pP,cao,mao,fao,ns,Fae,gao,hao,_P,uao,pao,bP,_ao,bao,vao,ss,Tae,Fao,Tao,vP,Mao,Eao,FP,Cao,wao,Aao,ls,Mae,yao,Lao,TP,xao,$ao,MP,kao,Sao,Rao,qg,Eae,Pao,Bao,EP,Iao,Nao,qao,is,Cae,jao,Dao,CP,Gao,Oao,wP,Vao,Xao,zao,jg,wae,Wao,Qao,AP,Hao,Uao,Jao,Dg,Aae,Yao,Kao,yP,Zao,eno,ono,ds,yae,rno,tno,LP,ano,nno,xP,sno,lno,ino,cs,Lae,dno,cno,$P,mno,fno,kP,gno,hno,uno,ms,xae,pno,_no,SP,bno,vno,RP,Fno,Tno,Mno,Gg,$ae,Eno,Cno,PP,wno,Ano,yno,fs,kae,Lno,xno,BP,$no,kno,IP,Sno,Rno,Pno,gs,Sae,Bno,Ino,NP,Nno,qno,qP,jno,Dno,Gno,hs,Rae,Ono,Vno,jP,Xno,zno,DP,Wno,Qno,Hno,us,Pae,Uno,Jno,GP,Yno,Kno,OP,Zno,eso,oso,ps,Bae,rso,tso,VP,aso,nso,XP,sso,lso,iso,Og,Iae,dso,cso,zP,mso,fso,gso,_s,Nae,hso,uso,WP,pso,_so,QP,bso,vso,Fso,Vg,qae,Tso,Mso,HP,Eso,Cso,wso,Xg,jae,Aso,yso,UP,Lso,xso,$so,zg,Dae,kso,Sso,JP,Rso,Pso,Bso,Wg,Gae,Iso,Nso,YP,qso,jso,Dso,bs,Oae,Gso,Oso,KP,Vso,Xso,ZP,zso,Wso,Qso,Qg,Vae,Hso,Uso,eB,Jso,Yso,Kso,vs,Xae,Zso,elo,oB,olo,rlo,rB,tlo,alo,nlo,Fs,zae,slo,llo,tB,ilo,dlo,aB,clo,mlo,flo,Ts,Wae,glo,hlo,nB,ulo,plo,sB,_lo,blo,vlo,Ms,Qae,Flo,Tlo,lB,Mlo,Elo,iB,Clo,wlo,Alo,Es,Hae,ylo,Llo,dB,xlo,$lo,cB,klo,Slo,Rlo,Cs,Uae,Plo,Blo,mB,Ilo,Nlo,fB,qlo,jlo,Dlo,Hg,Jae,Glo,Olo,gB,Vlo,Xlo,zlo,Ug,Yae,Wlo,Qlo,hB,Hlo,Ulo,Jlo,ws,Kae,Ylo,Klo,uB,Zlo,eio,pB,oio,rio,tio,As,Zae,aio,nio,_B,sio,lio,bB,iio,dio,cio,ys,ene,mio,fio,vB,gio,hio,FB,uio,pio,_io,Jg,one,bio,vio,TB,Fio,Tio,Mio,Yg,rne,Eio,Cio,MB,wio,Aio,yio,Kg,tne,Lio,xio,EB,$io,kio,Sio,Ls,ane,Rio,Pio,CB,Bio,Iio,wB,Nio,qio,jio,Zg,nne,Dio,Gio,AB,Oio,Vio,Xio,eh,sne,zio,Wio,yB,Qio,Hio,Uio,oh,lne,Jio,Yio,LB,Kio,Zio,edo,xs,ine,odo,rdo,xB,tdo,ado,$B,ndo,sdo,ldo,rh,dne,ido,ddo,kB,cdo,mdo,fdo,th,cne,gdo,hdo,SB,udo,pdo,_do,$s,mne,bdo,vdo,RB,Fdo,Tdo,PB,Mdo,Edo,Cdo,ks,fne,wdo,Ado,BB,ydo,Ldo,IB,xdo,$do,kdo,Ss,gne,Sdo,Rdo,NB,Pdo,Bdo,qB,Ido,Ndo,qdo,Rs,hne,jdo,Ddo,jB,Gdo,Odo,DB,Vdo,Xdo,zdo,ah,Wdo,nh,zy,Qdo,une,Hdo,yqe,Mi,sh,pne,Wy,Udo,_ne,Jdo,Lqe,Ao,Qy,Ydo,Hy,Kdo,GB,Zdo,eco,oco,Uy,rco,bne,tco,aco,nco,He,Jy,sco,vne,lco,ico,ya,dco,Fne,cco,mco,Tne,fco,gco,Mne,hco,uco,pco,Y,lh,Ene,_co,bco,OB,vco,Fco,Tco,ih,Cne,Mco,Eco,VB,Cco,wco,Aco,dh,wne,yco,Lco,XB,xco,$co,kco,ch,Ane,Sco,Rco,zB,Pco,Bco,Ico,mh,yne,Nco,qco,WB,jco,Dco,Gco,fh,Lne,Oco,Vco,QB,Xco,zco,Wco,gh,xne,Qco,Hco,HB,Uco,Jco,Yco,hh,$ne,Kco,Zco,UB,emo,omo,rmo,uh,kne,tmo,amo,JB,nmo,smo,lmo,ph,Sne,imo,dmo,YB,cmo,mmo,fmo,_h,Rne,gmo,hmo,KB,umo,pmo,_mo,bh,Pne,bmo,vmo,ZB,Fmo,Tmo,Mmo,vh,Bne,Emo,Cmo,eI,wmo,Amo,ymo,Fh,Ine,Lmo,xmo,oI,$mo,kmo,Smo,Th,Nne,Rmo,Pmo,rI,Bmo,Imo,Nmo,Mh,qne,qmo,jmo,tI,Dmo,Gmo,Omo,Eh,jne,Vmo,Xmo,aI,zmo,Wmo,Qmo,Ch,Dne,Hmo,Umo,nI,Jmo,Ymo,Kmo,wh,Gne,Zmo,efo,sI,ofo,rfo,tfo,Ah,One,afo,nfo,lI,sfo,lfo,ifo,yh,Vne,dfo,cfo,iI,mfo,ffo,gfo,Lh,Xne,hfo,ufo,dI,pfo,_fo,bfo,xh,zne,vfo,Ffo,cI,Tfo,Mfo,Efo,$h,Wne,Cfo,wfo,mI,Afo,yfo,Lfo,kh,Qne,xfo,$fo,fI,kfo,Sfo,Rfo,Sh,Hne,Pfo,Bfo,gI,Ifo,Nfo,qfo,Rh,Une,jfo,Dfo,hI,Gfo,Ofo,Vfo,Ph,Jne,Xfo,zfo,uI,Wfo,Qfo,Hfo,Bh,Yne,Ufo,Jfo,pI,Yfo,Kfo,Zfo,Ih,ego,Nh,ogo,qh,Yy,rgo,Kne,tgo,xqe,Ei,jh,Zne,Ky,ago,ese,ngo,$qe,yo,Zy,sgo,eL,lgo,_I,igo,dgo,cgo,oL,mgo,ose,fgo,ggo,hgo,Ue,rL,ugo,rse,pgo,_go,Ci,bgo,tse,vgo,Fgo,ase,Tgo,Mgo,Ego,he,Dh,nse,Cgo,wgo,bI,Ago,ygo,Lgo,Gh,sse,xgo,$go,lse,kgo,Sgo,Rgo,Oh,ise,Pgo,Bgo,vI,Igo,Ngo,qgo,Vh,dse,jgo,Dgo,FI,Ggo,Ogo,Vgo,Xh,cse,Xgo,zgo,TI,Wgo,Qgo,Hgo,zh,mse,Ugo,Jgo,MI,Ygo,Kgo,Zgo,Wh,fse,eho,oho,EI,rho,tho,aho,Qh,gse,nho,sho,CI,lho,iho,dho,Hh,hse,cho,mho,wI,fho,gho,hho,Uh,use,uho,pho,AI,_ho,bho,vho,Jh,pse,Fho,Tho,yI,Mho,Eho,Cho,Yh,_se,who,Aho,LI,yho,Lho,xho,Kh,bse,$ho,kho,xI,Sho,Rho,Pho,Zh,vse,Bho,Iho,$I,Nho,qho,jho,eu,Fse,Dho,Gho,kI,Oho,Vho,Xho,ou,Tse,zho,Who,SI,Qho,Hho,Uho,ru,Mse,Jho,Yho,RI,Kho,Zho,euo,tu,ouo,au,ruo,nu,tL,tuo,Ese,auo,kqe,wi,su,Cse,aL,nuo,wse,suo,Sqe,Lo,nL,luo,Ai,iuo,PI,duo,cuo,BI,muo,fuo,guo,sL,huo,Ase,uuo,puo,_uo,tt,lL,buo,yse,vuo,Fuo,yi,Tuo,Lse,Muo,Euo,II,Cuo,wuo,Auo,lu,yuo,Je,iL,Luo,xse,xuo,$uo,La,kuo,$se,Suo,Ruo,kse,Puo,Buo,Sse,Iuo,Nuo,quo,x,iu,Rse,juo,Duo,NI,Guo,Ouo,Vuo,du,Pse,Xuo,zuo,qI,Wuo,Quo,Huo,cu,Bse,Uuo,Juo,jI,Yuo,Kuo,Zuo,mu,Ise,epo,opo,DI,rpo,tpo,apo,fu,Nse,npo,spo,GI,lpo,ipo,dpo,gu,qse,cpo,mpo,OI,fpo,gpo,hpo,hu,jse,upo,ppo,VI,_po,bpo,vpo,uu,Dse,Fpo,Tpo,XI,Mpo,Epo,Cpo,pu,Gse,wpo,Apo,zI,ypo,Lpo,xpo,_u,Ose,$po,kpo,WI,Spo,Rpo,Ppo,bu,Vse,Bpo,Ipo,QI,Npo,qpo,jpo,vu,Xse,Dpo,Gpo,HI,Opo,Vpo,Xpo,Fu,zse,zpo,Wpo,UI,Qpo,Hpo,Upo,Tu,Wse,Jpo,Ypo,JI,Kpo,Zpo,e_o,Mu,Qse,o_o,r_o,YI,t_o,a_o,n_o,Eu,Hse,s_o,l_o,KI,i_o,d_o,c_o,Cu,Use,m_o,f_o,ZI,g_o,h_o,u_o,wu,Jse,p_o,__o,eN,b_o,v_o,F_o,Au,Yse,T_o,M_o,oN,E_o,C_o,w_o,yu,Kse,A_o,y_o,rN,L_o,x_o,$_o,Lu,Zse,k_o,S_o,tN,R_o,P_o,B_o,xu,ele,I_o,N_o,aN,q_o,j_o,D_o,$u,ole,G_o,O_o,nN,V_o,X_o,z_o,ku,rle,W_o,Q_o,sN,H_o,U_o,J_o,Su,tle,Y_o,K_o,lN,Z_o,ebo,obo,Ru,ale,rbo,tbo,iN,abo,nbo,sbo,Pu,nle,lbo,ibo,dN,dbo,cbo,mbo,Bu,sle,fbo,gbo,cN,hbo,ubo,pbo,Iu,lle,_bo,bbo,mN,vbo,Fbo,Tbo,Nu,ile,Mbo,Ebo,fN,Cbo,wbo,Abo,qu,dle,ybo,Lbo,gN,xbo,$bo,kbo,ju,cle,Sbo,Rbo,hN,Pbo,Bbo,Ibo,Ps,mle,Nbo,qbo,uN,jbo,Dbo,pN,Gbo,Obo,Vbo,Du,fle,Xbo,zbo,_N,Wbo,Qbo,Hbo,Gu,gle,Ubo,Jbo,bN,Ybo,Kbo,Zbo,Ou,hle,e2o,o2o,vN,r2o,t2o,a2o,Vu,ule,n2o,s2o,FN,l2o,i2o,d2o,Xu,ple,c2o,m2o,TN,f2o,g2o,h2o,zu,_le,u2o,p2o,MN,_2o,b2o,v2o,Wu,ble,F2o,T2o,EN,M2o,E2o,C2o,Qu,vle,w2o,A2o,CN,y2o,L2o,x2o,Hu,Fle,$2o,k2o,wN,S2o,R2o,P2o,Uu,Tle,B2o,I2o,AN,N2o,q2o,j2o,Ju,Mle,D2o,G2o,yN,O2o,V2o,X2o,Yu,Ele,z2o,W2o,LN,Q2o,H2o,U2o,Ku,Cle,J2o,Y2o,xN,K2o,Z2o,evo,Zu,wle,ovo,rvo,$N,tvo,avo,nvo,ep,Ale,svo,lvo,kN,ivo,dvo,cvo,op,yle,mvo,fvo,SN,gvo,hvo,uvo,rp,Lle,pvo,_vo,RN,bvo,vvo,Fvo,tp,xle,Tvo,Mvo,PN,Evo,Cvo,wvo,ap,$le,Avo,yvo,BN,Lvo,xvo,$vo,np,kle,kvo,Svo,IN,Rvo,Pvo,Bvo,sp,Sle,Ivo,Nvo,NN,qvo,jvo,Dvo,lp,Rle,Gvo,Ovo,qN,Vvo,Xvo,zvo,ip,Ple,Wvo,Qvo,jN,Hvo,Uvo,Jvo,dp,Ble,Yvo,Kvo,DN,Zvo,eFo,oFo,cp,Ile,rFo,tFo,GN,aFo,nFo,sFo,mp,Nle,lFo,iFo,ON,dFo,cFo,mFo,fp,qle,fFo,gFo,VN,hFo,uFo,pFo,gp,jle,_Fo,bFo,XN,vFo,FFo,TFo,hp,Dle,MFo,EFo,zN,CFo,wFo,AFo,up,Gle,yFo,LFo,WN,xFo,$Fo,kFo,pp,Ole,SFo,RFo,QN,PFo,BFo,IFo,_p,Vle,NFo,qFo,HN,jFo,DFo,GFo,bp,Xle,OFo,VFo,UN,XFo,zFo,WFo,vp,zle,QFo,HFo,JN,UFo,JFo,YFo,Fp,Wle,KFo,ZFo,YN,e1o,o1o,r1o,Tp,Qle,t1o,a1o,KN,n1o,s1o,l1o,Mp,Hle,i1o,d1o,ZN,c1o,m1o,f1o,Ep,Ule,g1o,h1o,eq,u1o,p1o,_1o,Cp,Jle,b1o,v1o,oq,F1o,T1o,M1o,wp,Yle,E1o,C1o,rq,w1o,A1o,y1o,Ap,Kle,L1o,x1o,tq,$1o,k1o,S1o,yp,Zle,R1o,P1o,aq,B1o,I1o,N1o,Lp,eie,q1o,j1o,nq,D1o,G1o,O1o,xp,oie,V1o,X1o,sq,z1o,W1o,Q1o,$p,rie,H1o,U1o,lq,J1o,Y1o,K1o,kp,tie,Z1o,eTo,iq,oTo,rTo,tTo,Sp,aie,aTo,nTo,dq,sTo,lTo,iTo,Rp,nie,dTo,cTo,cq,mTo,fTo,gTo,Pp,sie,hTo,uTo,mq,pTo,_To,bTo,Bp,lie,vTo,FTo,fq,TTo,MTo,ETo,Ip,iie,CTo,wTo,gq,ATo,yTo,LTo,Np,die,xTo,$To,hq,kTo,STo,RTo,qp,cie,PTo,BTo,uq,ITo,NTo,qTo,jp,mie,jTo,DTo,pq,GTo,OTo,VTo,Dp,fie,XTo,zTo,_q,WTo,QTo,HTo,Gp,gie,UTo,JTo,bq,YTo,KTo,ZTo,Op,hie,eMo,oMo,vq,rMo,tMo,aMo,Vp,uie,nMo,sMo,Fq,lMo,iMo,dMo,Xp,pie,cMo,mMo,Tq,fMo,gMo,hMo,zp,_ie,uMo,pMo,Mq,_Mo,bMo,vMo,Wp,bie,FMo,TMo,Eq,MMo,EMo,CMo,Qp,vie,wMo,AMo,Cq,yMo,LMo,xMo,Hp,Fie,$Mo,kMo,wq,SMo,RMo,PMo,Up,Tie,BMo,IMo,Aq,NMo,qMo,jMo,Jp,Mie,DMo,GMo,yq,OMo,VMo,XMo,Yp,Eie,zMo,WMo,Lq,QMo,HMo,UMo,Kp,Cie,JMo,YMo,xq,KMo,ZMo,e4o,Zp,wie,o4o,r4o,$q,t4o,a4o,n4o,e_,Aie,s4o,l4o,kq,i4o,d4o,c4o,o_,m4o,yie,f4o,g4o,Lie,h4o,u4o,r_,Rqe,Li,t_,xie,dL,p4o,$ie,_4o,Pqe,xo,cL,b4o,xi,v4o,Sq,F4o,T4o,Rq,M4o,E4o,C4o,mL,w4o,kie,A4o,y4o,L4o,at,fL,x4o,Sie,$4o,k4o,$i,S4o,Rie,R4o,P4o,Pq,B4o,I4o,N4o,a_,q4o,Ye,gL,j4o,Pie,D4o,G4o,xa,O4o,Bie,V4o,X4o,Iie,z4o,W4o,Nie,Q4o,H4o,U4o,G,n_,qie,J4o,Y4o,Bq,K4o,Z4o,eEo,s_,jie,oEo,rEo,Iq,tEo,aEo,nEo,l_,Die,sEo,lEo,Nq,iEo,dEo,cEo,i_,Gie,mEo,fEo,qq,gEo,hEo,uEo,d_,Oie,pEo,_Eo,jq,bEo,vEo,FEo,c_,Vie,TEo,MEo,Dq,EEo,CEo,wEo,m_,Xie,AEo,yEo,Gq,LEo,xEo,$Eo,f_,zie,kEo,SEo,Oq,REo,PEo,BEo,g_,Wie,IEo,NEo,Vq,qEo,jEo,DEo,h_,Qie,GEo,OEo,Xq,VEo,XEo,zEo,u_,Hie,WEo,QEo,zq,HEo,UEo,JEo,p_,Uie,YEo,KEo,Wq,ZEo,eCo,oCo,__,Jie,rCo,tCo,Qq,aCo,nCo,sCo,b_,Yie,lCo,iCo,Hq,dCo,cCo,mCo,v_,Kie,fCo,gCo,Uq,hCo,uCo,pCo,F_,Zie,_Co,bCo,Jq,vCo,FCo,TCo,T_,ede,MCo,ECo,Yq,CCo,wCo,ACo,M_,ode,yCo,LCo,Kq,xCo,$Co,kCo,E_,rde,SCo,RCo,Zq,PCo,BCo,ICo,C_,tde,NCo,qCo,ej,jCo,DCo,GCo,w_,ade,OCo,VCo,oj,XCo,zCo,WCo,A_,nde,QCo,HCo,rj,UCo,JCo,YCo,y_,sde,KCo,ZCo,tj,e5o,o5o,r5o,L_,lde,t5o,a5o,aj,n5o,s5o,l5o,x_,ide,i5o,d5o,nj,c5o,m5o,f5o,$_,dde,g5o,h5o,sj,u5o,p5o,_5o,k_,cde,b5o,v5o,lj,F5o,T5o,M5o,S_,mde,E5o,C5o,ij,w5o,A5o,y5o,R_,fde,L5o,x5o,dj,$5o,k5o,S5o,P_,gde,R5o,P5o,cj,B5o,I5o,N5o,B_,hde,q5o,j5o,mj,D5o,G5o,O5o,I_,ude,V5o,X5o,fj,z5o,W5o,Q5o,N_,pde,H5o,U5o,gj,J5o,Y5o,K5o,q_,_de,Z5o,e3o,hj,o3o,r3o,t3o,j_,bde,a3o,n3o,uj,s3o,l3o,i3o,D_,vde,d3o,c3o,pj,m3o,f3o,g3o,G_,Fde,h3o,u3o,_j,p3o,_3o,b3o,O_,Tde,v3o,F3o,bj,T3o,M3o,E3o,V_,Mde,C3o,w3o,vj,A3o,y3o,L3o,X_,Ede,x3o,$3o,Fj,k3o,S3o,R3o,z_,Cde,P3o,B3o,Tj,I3o,N3o,q3o,W_,wde,j3o,D3o,Mj,G3o,O3o,V3o,Q_,X3o,Ade,z3o,W3o,yde,Q3o,H3o,H_,Bqe,ki,U_,Lde,hL,U3o,xde,J3o,Iqe,$o,uL,Y3o,Si,K3o,Ej,Z3o,ewo,Cj,owo,rwo,two,pL,awo,$de,nwo,swo,lwo,nt,_L,iwo,kde,dwo,cwo,Ri,mwo,Sde,fwo,gwo,wj,hwo,uwo,pwo,J_,_wo,Ke,bL,bwo,Rde,vwo,Fwo,$a,Two,Pde,Mwo,Ewo,Bde,Cwo,wwo,Ide,Awo,ywo,Lwo,z,Y_,Nde,xwo,$wo,Aj,kwo,Swo,Rwo,K_,qde,Pwo,Bwo,yj,Iwo,Nwo,qwo,Z_,jde,jwo,Dwo,Lj,Gwo,Owo,Vwo,eb,Dde,Xwo,zwo,xj,Wwo,Qwo,Hwo,ob,Gde,Uwo,Jwo,$j,Ywo,Kwo,Zwo,rb,Ode,e0o,o0o,kj,r0o,t0o,a0o,tb,Vde,n0o,s0o,Sj,l0o,i0o,d0o,ab,Xde,c0o,m0o,Rj,f0o,g0o,h0o,nb,zde,u0o,p0o,Pj,_0o,b0o,v0o,sb,Wde,F0o,T0o,Bj,M0o,E0o,C0o,lb,Qde,w0o,A0o,Ij,y0o,L0o,x0o,ib,Hde,$0o,k0o,Nj,S0o,R0o,P0o,db,Ude,B0o,I0o,qj,N0o,q0o,j0o,cb,Jde,D0o,G0o,jj,O0o,V0o,X0o,mb,Yde,z0o,W0o,Dj,Q0o,H0o,U0o,fb,Kde,J0o,Y0o,Gj,K0o,Z0o,e6o,gb,Zde,o6o,r6o,Oj,t6o,a6o,n6o,hb,ece,s6o,l6o,Vj,i6o,d6o,c6o,ub,oce,m6o,f6o,Xj,g6o,h6o,u6o,pb,rce,p6o,_6o,zj,b6o,v6o,F6o,_b,tce,T6o,M6o,Wj,E6o,C6o,w6o,bb,ace,A6o,y6o,Qj,L6o,x6o,$6o,vb,nce,k6o,S6o,Hj,R6o,P6o,B6o,Fb,sce,I6o,N6o,Uj,q6o,j6o,D6o,Tb,lce,G6o,O6o,Jj,V6o,X6o,z6o,Mb,ice,W6o,Q6o,Yj,H6o,U6o,J6o,Eb,dce,Y6o,K6o,Kj,Z6o,eAo,oAo,Cb,cce,rAo,tAo,Zj,aAo,nAo,sAo,wb,mce,lAo,iAo,eD,dAo,cAo,mAo,Ab,fce,fAo,gAo,oD,hAo,uAo,pAo,yb,gce,_Ao,bAo,rD,vAo,FAo,TAo,Lb,hce,MAo,EAo,tD,CAo,wAo,AAo,xb,uce,yAo,LAo,aD,xAo,$Ao,kAo,$b,pce,SAo,RAo,nD,PAo,BAo,IAo,kb,_ce,NAo,qAo,sD,jAo,DAo,GAo,Sb,bce,OAo,VAo,lD,XAo,zAo,WAo,Rb,vce,QAo,HAo,iD,UAo,JAo,YAo,Pb,KAo,Fce,ZAo,eyo,Tce,oyo,ryo,Bb,Nqe,Pi,Ib,Mce,vL,tyo,Ece,ayo,qqe,ko,FL,nyo,Bi,syo,dD,lyo,iyo,cD,dyo,cyo,myo,TL,fyo,Cce,gyo,hyo,uyo,st,ML,pyo,wce,_yo,byo,Ii,vyo,Ace,Fyo,Tyo,mD,Myo,Eyo,Cyo,Nb,wyo,Ze,EL,Ayo,yce,yyo,Lyo,ka,xyo,Lce,$yo,kyo,xce,Syo,Ryo,$ce,Pyo,Byo,Iyo,W,qb,kce,Nyo,qyo,fD,jyo,Dyo,Gyo,jb,Sce,Oyo,Vyo,gD,Xyo,zyo,Wyo,Db,Rce,Qyo,Hyo,hD,Uyo,Jyo,Yyo,Gb,Pce,Kyo,Zyo,uD,eLo,oLo,rLo,Ob,Bce,tLo,aLo,pD,nLo,sLo,lLo,Vb,Ice,iLo,dLo,_D,cLo,mLo,fLo,Xb,Nce,gLo,hLo,bD,uLo,pLo,_Lo,zb,qce,bLo,vLo,vD,FLo,TLo,MLo,Wb,jce,ELo,CLo,FD,wLo,ALo,yLo,Qb,Dce,LLo,xLo,TD,$Lo,kLo,SLo,Hb,Gce,RLo,PLo,MD,BLo,ILo,NLo,Ub,Oce,qLo,jLo,ED,DLo,GLo,OLo,Jb,Vce,VLo,XLo,CD,zLo,WLo,QLo,Yb,Xce,HLo,ULo,wD,JLo,YLo,KLo,Kb,zce,ZLo,e8o,AD,o8o,r8o,t8o,Zb,Wce,a8o,n8o,yD,s8o,l8o,i8o,e2,Qce,d8o,c8o,LD,m8o,f8o,g8o,o2,Hce,h8o,u8o,xD,p8o,_8o,b8o,r2,Uce,v8o,F8o,$D,T8o,M8o,E8o,t2,Jce,C8o,w8o,kD,A8o,y8o,L8o,a2,Yce,x8o,$8o,SD,k8o,S8o,R8o,n2,Kce,P8o,B8o,RD,I8o,N8o,q8o,s2,Zce,j8o,D8o,PD,G8o,O8o,V8o,l2,eme,X8o,z8o,BD,W8o,Q8o,H8o,i2,ome,U8o,J8o,ID,Y8o,K8o,Z8o,d2,rme,e7o,o7o,ND,r7o,t7o,a7o,c2,tme,n7o,s7o,qD,l7o,i7o,d7o,m2,ame,c7o,m7o,jD,f7o,g7o,h7o,f2,nme,u7o,p7o,DD,_7o,b7o,v7o,g2,sme,F7o,T7o,GD,M7o,E7o,C7o,h2,lme,w7o,A7o,OD,y7o,L7o,x7o,u2,ime,$7o,k7o,dme,S7o,R7o,P7o,p2,cme,B7o,I7o,VD,N7o,q7o,j7o,_2,mme,D7o,G7o,XD,O7o,V7o,X7o,b2,fme,z7o,W7o,zD,Q7o,H7o,U7o,v2,gme,J7o,Y7o,WD,K7o,Z7o,e9o,F2,o9o,hme,r9o,t9o,ume,a9o,n9o,T2,jqe,Ni,M2,pme,CL,s9o,_me,l9o,Dqe,So,wL,i9o,qi,d9o,QD,c9o,m9o,HD,f9o,g9o,h9o,AL,u9o,bme,p9o,_9o,b9o,lt,yL,v9o,vme,F9o,T9o,ji,M9o,Fme,E9o,C9o,UD,w9o,A9o,y9o,E2,L9o,eo,LL,x9o,Tme,$9o,k9o,Sa,S9o,Mme,R9o,P9o,Eme,B9o,I9o,Cme,N9o,q9o,j9o,pe,C2,wme,D9o,G9o,JD,O9o,V9o,X9o,w2,Ame,z9o,W9o,YD,Q9o,H9o,U9o,A2,yme,J9o,Y9o,KD,K9o,Z9o,exo,y2,Lme,oxo,rxo,ZD,txo,axo,nxo,L2,xme,sxo,lxo,eG,ixo,dxo,cxo,x2,$me,mxo,fxo,oG,gxo,hxo,uxo,$2,kme,pxo,_xo,rG,bxo,vxo,Fxo,k2,Sme,Txo,Mxo,tG,Exo,Cxo,wxo,S2,Rme,Axo,yxo,aG,Lxo,xxo,$xo,R2,Pme,kxo,Sxo,nG,Rxo,Pxo,Bxo,P2,Bme,Ixo,Nxo,sG,qxo,jxo,Dxo,B2,Ime,Gxo,Oxo,lG,Vxo,Xxo,zxo,I2,Nme,Wxo,Qxo,iG,Hxo,Uxo,Jxo,N2,qme,Yxo,Kxo,dG,Zxo,e$o,o$o,q2,jme,r$o,t$o,cG,a$o,n$o,s$o,j2,Dme,l$o,i$o,mG,d$o,c$o,m$o,D2,f$o,Gme,g$o,h$o,Ome,u$o,p$o,G2,Gqe,Di,O2,Vme,xL,_$o,Xme,b$o,Oqe,Ro,$L,v$o,Gi,F$o,fG,T$o,M$o,gG,E$o,C$o,w$o,kL,A$o,zme,y$o,L$o,x$o,it,SL,$$o,Wme,k$o,S$o,Oi,R$o,Qme,P$o,B$o,hG,I$o,N$o,q$o,V2,j$o,oo,RL,D$o,Hme,G$o,O$o,Ra,V$o,Ume,X$o,z$o,Jme,W$o,Q$o,Yme,H$o,U$o,J$o,N,X2,Kme,Y$o,K$o,uG,Z$o,eko,oko,z2,Zme,rko,tko,pG,ako,nko,sko,W2,efe,lko,iko,_G,dko,cko,mko,Q2,ofe,fko,gko,bG,hko,uko,pko,H2,rfe,_ko,bko,vG,vko,Fko,Tko,U2,tfe,Mko,Eko,FG,Cko,wko,Ako,J2,afe,yko,Lko,TG,xko,$ko,kko,Y2,nfe,Sko,Rko,MG,Pko,Bko,Iko,K2,sfe,Nko,qko,EG,jko,Dko,Gko,Z2,lfe,Oko,Vko,CG,Xko,zko,Wko,ev,ife,Qko,Hko,wG,Uko,Jko,Yko,ov,dfe,Kko,Zko,AG,eSo,oSo,rSo,rv,cfe,tSo,aSo,yG,nSo,sSo,lSo,tv,mfe,iSo,dSo,LG,cSo,mSo,fSo,av,ffe,gSo,hSo,xG,uSo,pSo,_So,nv,gfe,bSo,vSo,$G,FSo,TSo,MSo,sv,hfe,ESo,CSo,kG,wSo,ASo,ySo,lv,ufe,LSo,xSo,SG,$So,kSo,SSo,iv,pfe,RSo,PSo,RG,BSo,ISo,NSo,dv,_fe,qSo,jSo,PG,DSo,GSo,OSo,cv,bfe,VSo,XSo,BG,zSo,WSo,QSo,mv,vfe,HSo,USo,IG,JSo,YSo,KSo,fv,Ffe,ZSo,eRo,NG,oRo,rRo,tRo,gv,Tfe,aRo,nRo,qG,sRo,lRo,iRo,hv,Mfe,dRo,cRo,jG,mRo,fRo,gRo,uv,Efe,hRo,uRo,DG,pRo,_Ro,bRo,pv,Cfe,vRo,FRo,GG,TRo,MRo,ERo,_v,wfe,CRo,wRo,OG,ARo,yRo,LRo,bv,Afe,xRo,$Ro,VG,kRo,SRo,RRo,vv,yfe,PRo,BRo,XG,IRo,NRo,qRo,Fv,Lfe,jRo,DRo,zG,GRo,ORo,VRo,Tv,xfe,XRo,zRo,WG,WRo,QRo,HRo,Mv,$fe,URo,JRo,QG,YRo,KRo,ZRo,Ev,kfe,ePo,oPo,HG,rPo,tPo,aPo,Cv,Sfe,nPo,sPo,UG,lPo,iPo,dPo,wv,Rfe,cPo,mPo,JG,fPo,gPo,hPo,Av,Pfe,uPo,pPo,YG,_Po,bPo,vPo,yv,Bfe,FPo,TPo,KG,MPo,EPo,CPo,Lv,Ife,wPo,APo,ZG,yPo,LPo,xPo,xv,Nfe,$Po,kPo,eO,SPo,RPo,PPo,$v,qfe,BPo,IPo,oO,NPo,qPo,jPo,kv,jfe,DPo,GPo,rO,OPo,VPo,XPo,Sv,Dfe,zPo,WPo,tO,QPo,HPo,UPo,Rv,Gfe,JPo,YPo,aO,KPo,ZPo,eBo,Pv,Ofe,oBo,rBo,nO,tBo,aBo,nBo,Bv,Vfe,sBo,lBo,sO,iBo,dBo,cBo,Iv,Xfe,mBo,fBo,lO,gBo,hBo,uBo,Nv,pBo,zfe,_Bo,bBo,Wfe,vBo,FBo,qv,Vqe,Vi,jv,Qfe,PL,TBo,Hfe,MBo,Xqe,Po,BL,EBo,Xi,CBo,iO,wBo,ABo,dO,yBo,LBo,xBo,IL,$Bo,Ufe,kBo,SBo,RBo,dt,NL,PBo,Jfe,BBo,IBo,zi,NBo,Yfe,qBo,jBo,cO,DBo,GBo,OBo,Dv,VBo,ro,qL,XBo,Kfe,zBo,WBo,Pa,QBo,Zfe,HBo,UBo,ege,JBo,YBo,oge,KBo,ZBo,eIo,K,Gv,rge,oIo,rIo,mO,tIo,aIo,nIo,Ov,tge,sIo,lIo,fO,iIo,dIo,cIo,Vv,age,mIo,fIo,gO,gIo,hIo,uIo,Xv,nge,pIo,_Io,hO,bIo,vIo,FIo,zv,sge,TIo,MIo,uO,EIo,CIo,wIo,Wv,lge,AIo,yIo,pO,LIo,xIo,$Io,Qv,ige,kIo,SIo,_O,RIo,PIo,BIo,Hv,dge,IIo,NIo,bO,qIo,jIo,DIo,Uv,cge,GIo,OIo,vO,VIo,XIo,zIo,Jv,mge,WIo,QIo,FO,HIo,UIo,JIo,Yv,fge,YIo,KIo,TO,ZIo,eNo,oNo,Kv,gge,rNo,tNo,MO,aNo,nNo,sNo,Zv,hge,lNo,iNo,EO,dNo,cNo,mNo,eF,uge,fNo,gNo,CO,hNo,uNo,pNo,oF,pge,_No,bNo,wO,vNo,FNo,TNo,rF,_ge,MNo,ENo,AO,CNo,wNo,ANo,tF,bge,yNo,LNo,yO,xNo,$No,kNo,aF,vge,SNo,RNo,LO,PNo,BNo,INo,nF,Fge,NNo,qNo,xO,jNo,DNo,GNo,sF,Tge,ONo,VNo,$O,XNo,zNo,WNo,lF,Mge,QNo,HNo,kO,UNo,JNo,YNo,iF,Ege,KNo,ZNo,SO,eqo,oqo,rqo,dF,Cge,tqo,aqo,RO,nqo,sqo,lqo,cF,wge,iqo,dqo,PO,cqo,mqo,fqo,mF,Age,gqo,hqo,BO,uqo,pqo,_qo,fF,yge,bqo,vqo,IO,Fqo,Tqo,Mqo,gF,Lge,Eqo,Cqo,NO,wqo,Aqo,yqo,hF,xge,Lqo,xqo,qO,$qo,kqo,Sqo,uF,$ge,Rqo,Pqo,jO,Bqo,Iqo,Nqo,pF,qqo,kge,jqo,Dqo,Sge,Gqo,Oqo,_F,zqe,Wi,bF,Rge,jL,Vqo,Pge,Xqo,Wqe,Bo,DL,zqo,Qi,Wqo,DO,Qqo,Hqo,GO,Uqo,Jqo,Yqo,GL,Kqo,Bge,Zqo,ejo,ojo,ct,OL,rjo,Ige,tjo,ajo,Hi,njo,Nge,sjo,ljo,OO,ijo,djo,cjo,vF,mjo,to,VL,fjo,qge,gjo,hjo,Ba,ujo,jge,pjo,_jo,Dge,bjo,vjo,Gge,Fjo,Tjo,Mjo,Yr,FF,Oge,Ejo,Cjo,VO,wjo,Ajo,yjo,TF,Vge,Ljo,xjo,XO,$jo,kjo,Sjo,MF,Xge,Rjo,Pjo,zO,Bjo,Ijo,Njo,EF,zge,qjo,jjo,WO,Djo,Gjo,Ojo,CF,Wge,Vjo,Xjo,QO,zjo,Wjo,Qjo,wF,Hjo,Qge,Ujo,Jjo,Hge,Yjo,Kjo,AF,Qqe,Ui,yF,Uge,XL,Zjo,Jge,eDo,Hqe,Io,zL,oDo,Ji,rDo,HO,tDo,aDo,UO,nDo,sDo,lDo,WL,iDo,Yge,dDo,cDo,mDo,mt,QL,fDo,Kge,gDo,hDo,Yi,uDo,Zge,pDo,_Do,JO,bDo,vDo,FDo,LF,TDo,ao,HL,MDo,ehe,EDo,CDo,Ia,wDo,ohe,ADo,yDo,rhe,LDo,xDo,the,$Do,kDo,SDo,U,xF,ahe,RDo,PDo,YO,BDo,IDo,NDo,$F,nhe,qDo,jDo,KO,DDo,GDo,ODo,kF,she,VDo,XDo,ZO,zDo,WDo,QDo,SF,lhe,HDo,UDo,eV,JDo,YDo,KDo,RF,ihe,ZDo,eGo,oV,oGo,rGo,tGo,PF,dhe,aGo,nGo,rV,sGo,lGo,iGo,BF,che,dGo,cGo,tV,mGo,fGo,gGo,IF,mhe,hGo,uGo,aV,pGo,_Go,bGo,NF,fhe,vGo,FGo,nV,TGo,MGo,EGo,qF,ghe,CGo,wGo,sV,AGo,yGo,LGo,jF,hhe,xGo,$Go,lV,kGo,SGo,RGo,DF,uhe,PGo,BGo,iV,IGo,NGo,qGo,GF,phe,jGo,DGo,dV,GGo,OGo,VGo,OF,_he,XGo,zGo,cV,WGo,QGo,HGo,VF,bhe,UGo,JGo,mV,YGo,KGo,ZGo,XF,vhe,eOo,oOo,fV,rOo,tOo,aOo,zF,Fhe,nOo,sOo,gV,lOo,iOo,dOo,WF,The,cOo,mOo,hV,fOo,gOo,hOo,QF,Mhe,uOo,pOo,uV,_Oo,bOo,vOo,HF,Ehe,FOo,TOo,pV,MOo,EOo,COo,UF,Che,wOo,AOo,_V,yOo,LOo,xOo,JF,whe,$Oo,kOo,bV,SOo,ROo,POo,YF,Ahe,BOo,IOo,vV,NOo,qOo,jOo,KF,yhe,DOo,GOo,FV,OOo,VOo,XOo,ZF,Lhe,zOo,WOo,TV,QOo,HOo,UOo,e1,xhe,JOo,YOo,MV,KOo,ZOo,eVo,o1,$he,oVo,rVo,EV,tVo,aVo,nVo,r1,khe,sVo,lVo,CV,iVo,dVo,cVo,t1,She,mVo,fVo,wV,gVo,hVo,uVo,a1,Rhe,pVo,_Vo,AV,bVo,vVo,FVo,n1,Phe,TVo,MVo,yV,EVo,CVo,wVo,s1,Bhe,AVo,yVo,LV,LVo,xVo,$Vo,l1,Ihe,kVo,SVo,xV,RVo,PVo,BVo,i1,Nhe,IVo,NVo,$V,qVo,jVo,DVo,d1,GVo,qhe,OVo,VVo,jhe,XVo,zVo,c1,Uqe,Ki,m1,Dhe,UL,WVo,Ghe,QVo,Jqe,No,JL,HVo,Zi,UVo,kV,JVo,YVo,SV,KVo,ZVo,eXo,YL,oXo,Ohe,rXo,tXo,aXo,ft,KL,nXo,Vhe,sXo,lXo,ed,iXo,Xhe,dXo,cXo,RV,mXo,fXo,gXo,f1,hXo,no,ZL,uXo,zhe,pXo,_Xo,Na,bXo,Whe,vXo,FXo,Qhe,TXo,MXo,Hhe,EXo,CXo,wXo,V,g1,Uhe,AXo,yXo,PV,LXo,xXo,$Xo,h1,Jhe,kXo,SXo,BV,RXo,PXo,BXo,u1,Yhe,IXo,NXo,IV,qXo,jXo,DXo,p1,Khe,GXo,OXo,NV,VXo,XXo,zXo,_1,Zhe,WXo,QXo,qV,HXo,UXo,JXo,b1,eue,YXo,KXo,jV,ZXo,ezo,ozo,v1,oue,rzo,tzo,DV,azo,nzo,szo,F1,rue,lzo,izo,GV,dzo,czo,mzo,T1,tue,fzo,gzo,OV,hzo,uzo,pzo,M1,aue,_zo,bzo,VV,vzo,Fzo,Tzo,E1,nue,Mzo,Ezo,XV,Czo,wzo,Azo,C1,sue,yzo,Lzo,zV,xzo,$zo,kzo,w1,lue,Szo,Rzo,WV,Pzo,Bzo,Izo,A1,iue,Nzo,qzo,QV,jzo,Dzo,Gzo,y1,due,Ozo,Vzo,HV,Xzo,zzo,Wzo,L1,cue,Qzo,Hzo,UV,Uzo,Jzo,Yzo,x1,mue,Kzo,Zzo,JV,eWo,oWo,rWo,$1,fue,tWo,aWo,YV,nWo,sWo,lWo,k1,gue,iWo,dWo,KV,cWo,mWo,fWo,S1,hue,gWo,hWo,ZV,uWo,pWo,_Wo,R1,uue,bWo,vWo,eX,FWo,TWo,MWo,P1,pue,EWo,CWo,oX,wWo,AWo,yWo,B1,_ue,LWo,xWo,rX,$Wo,kWo,SWo,I1,bue,RWo,PWo,tX,BWo,IWo,NWo,N1,vue,qWo,jWo,aX,DWo,GWo,OWo,q1,Fue,VWo,XWo,nX,zWo,WWo,QWo,j1,Tue,HWo,UWo,sX,JWo,YWo,KWo,D1,Mue,ZWo,eQo,lX,oQo,rQo,tQo,G1,Eue,aQo,nQo,iX,sQo,lQo,iQo,O1,Cue,dQo,cQo,dX,mQo,fQo,gQo,V1,wue,hQo,uQo,cX,pQo,_Qo,bQo,X1,Aue,vQo,FQo,mX,TQo,MQo,EQo,z1,yue,CQo,wQo,fX,AQo,yQo,LQo,W1,Lue,xQo,$Qo,gX,kQo,SQo,RQo,Q1,xue,PQo,BQo,hX,IQo,NQo,qQo,H1,$ue,jQo,DQo,uX,GQo,OQo,VQo,U1,kue,XQo,zQo,pX,WQo,QQo,HQo,J1,Sue,UQo,JQo,_X,YQo,KQo,ZQo,Y1,Rue,eHo,oHo,bX,rHo,tHo,aHo,K1,Pue,nHo,sHo,vX,lHo,iHo,dHo,Z1,cHo,Bue,mHo,fHo,Iue,gHo,hHo,eT,Yqe,od,oT,Nue,e8,uHo,que,pHo,Kqe,qo,o8,_Ho,rd,bHo,FX,vHo,FHo,TX,THo,MHo,EHo,r8,CHo,jue,wHo,AHo,yHo,gt,t8,LHo,Due,xHo,$Ho,td,kHo,Gue,SHo,RHo,MX,PHo,BHo,IHo,rT,NHo,so,a8,qHo,Oue,jHo,DHo,qa,GHo,Vue,OHo,VHo,Xue,XHo,zHo,zue,WHo,QHo,HHo,Wue,tT,Que,UHo,JHo,EX,YHo,KHo,ZHo,aT,eUo,Hue,oUo,rUo,Uue,tUo,aUo,nT,Zqe,ad,sT,Jue,n8,nUo,Yue,sUo,eje,jo,s8,lUo,nd,iUo,CX,dUo,cUo,wX,mUo,fUo,gUo,l8,hUo,Kue,uUo,pUo,_Uo,ht,i8,bUo,Zue,vUo,FUo,sd,TUo,epe,MUo,EUo,AX,CUo,wUo,AUo,lT,yUo,lo,d8,LUo,ope,xUo,$Uo,ja,kUo,rpe,SUo,RUo,tpe,PUo,BUo,ape,IUo,NUo,qUo,Fe,iT,npe,jUo,DUo,yX,GUo,OUo,VUo,dT,spe,XUo,zUo,LX,WUo,QUo,HUo,cT,lpe,UUo,JUo,xX,YUo,KUo,ZUo,mT,ipe,eJo,oJo,$X,rJo,tJo,aJo,Bs,dpe,nJo,sJo,kX,lJo,iJo,SX,dJo,cJo,mJo,fT,cpe,fJo,gJo,RX,hJo,uJo,pJo,ut,mpe,_Jo,bJo,PX,vJo,FJo,BX,TJo,MJo,IX,EJo,CJo,wJo,gT,fpe,AJo,yJo,NX,LJo,xJo,$Jo,hT,gpe,kJo,SJo,qX,RJo,PJo,BJo,uT,hpe,IJo,NJo,jX,qJo,jJo,DJo,pT,upe,GJo,OJo,DX,VJo,XJo,zJo,_T,ppe,WJo,QJo,GX,HJo,UJo,JJo,bT,_pe,YJo,KJo,OX,ZJo,eYo,oYo,vT,bpe,rYo,tYo,VX,aYo,nYo,sYo,FT,lYo,vpe,iYo,dYo,Fpe,cYo,mYo,TT,oje,ld,MT,Tpe,c8,fYo,Mpe,gYo,rje,Do,m8,hYo,id,uYo,XX,pYo,_Yo,zX,bYo,vYo,FYo,f8,TYo,Epe,MYo,EYo,CYo,pt,g8,wYo,Cpe,AYo,yYo,dd,LYo,wpe,xYo,$Yo,WX,kYo,SYo,RYo,ET,PYo,io,h8,BYo,Ape,IYo,NYo,Da,qYo,ype,jYo,DYo,Lpe,GYo,OYo,xpe,VYo,XYo,zYo,$pe,CT,kpe,WYo,QYo,QX,HYo,UYo,JYo,wT,YYo,Spe,KYo,ZYo,Rpe,eKo,oKo,AT,tje,cd,yT,Ppe,u8,rKo,Bpe,tKo,aje,Go,p8,aKo,md,nKo,HX,sKo,lKo,UX,iKo,dKo,cKo,_8,mKo,Ipe,fKo,gKo,hKo,_t,b8,uKo,Npe,pKo,_Ko,fd,bKo,qpe,vKo,FKo,JX,TKo,MKo,EKo,LT,CKo,co,v8,wKo,jpe,AKo,yKo,Ga,LKo,Dpe,xKo,$Ko,Gpe,kKo,SKo,Ope,RKo,PKo,BKo,Se,xT,Vpe,IKo,NKo,YX,qKo,jKo,DKo,$T,Xpe,GKo,OKo,KX,VKo,XKo,zKo,kT,zpe,WKo,QKo,ZX,HKo,UKo,JKo,ST,Wpe,YKo,KKo,ez,ZKo,eZo,oZo,RT,Qpe,rZo,tZo,oz,aZo,nZo,sZo,PT,Hpe,lZo,iZo,rz,dZo,cZo,mZo,BT,Upe,fZo,gZo,tz,hZo,uZo,pZo,IT,Jpe,_Zo,bZo,az,vZo,FZo,TZo,NT,Ype,MZo,EZo,nz,CZo,wZo,AZo,qT,yZo,Kpe,LZo,xZo,Zpe,$Zo,kZo,jT,nje,gd,DT,e_e,F8,SZo,o_e,RZo,sje,Oo,T8,PZo,hd,BZo,sz,IZo,NZo,lz,qZo,jZo,DZo,M8,GZo,r_e,OZo,VZo,XZo,bt,E8,zZo,t_e,WZo,QZo,ud,HZo,a_e,UZo,JZo,iz,YZo,KZo,ZZo,GT,eer,mo,C8,oer,n_e,rer,ter,Oa,aer,s_e,ner,ser,l_e,ler,ier,i_e,der,cer,mer,Kr,OT,d_e,fer,ger,dz,her,uer,per,VT,c_e,_er,ber,cz,ver,Fer,Ter,XT,m_e,Mer,Eer,mz,Cer,wer,Aer,zT,f_e,yer,Ler,fz,xer,$er,ker,WT,g_e,Ser,Rer,gz,Per,Ber,Ier,QT,Ner,h_e,qer,jer,u_e,Der,Ger,HT,lje,pd,UT,p_e,w8,Oer,__e,Ver,ije,Vo,A8,Xer,_d,zer,hz,Wer,Qer,uz,Her,Uer,Jer,y8,Yer,b_e,Ker,Zer,eor,vt,L8,oor,v_e,ror,tor,bd,aor,F_e,nor,sor,pz,lor,ior,dor,JT,cor,fo,x8,mor,T_e,gor,hor,Va,uor,M_e,por,_or,E_e,bor,vor,C_e,For,Tor,Mor,Re,YT,w_e,Eor,Cor,_z,wor,Aor,yor,KT,A_e,Lor,xor,bz,$or,kor,Sor,ZT,y_e,Ror,Por,vz,Bor,Ior,Nor,eM,L_e,qor,jor,Fz,Dor,Gor,Oor,oM,x_e,Vor,Xor,Tz,zor,Wor,Qor,rM,$_e,Hor,Uor,Mz,Jor,Yor,Kor,tM,k_e,Zor,err,Ez,orr,rrr,trr,aM,S_e,arr,nrr,Cz,srr,lrr,irr,nM,R_e,drr,crr,wz,mrr,frr,grr,sM,hrr,P_e,urr,prr,B_e,_rr,brr,lM,dje,vd,iM,I_e,$8,vrr,N_e,Frr,cje,Xo,k8,Trr,Fd,Mrr,Az,Err,Crr,yz,wrr,Arr,yrr,S8,Lrr,q_e,xrr,$rr,krr,Ft,R8,Srr,j_e,Rrr,Prr,Td,Brr,D_e,Irr,Nrr,Lz,qrr,jrr,Drr,dM,Grr,go,P8,Orr,G_e,Vrr,Xrr,Xa,zrr,O_e,Wrr,Qrr,V_e,Hrr,Urr,X_e,Jrr,Yrr,Krr,B8,cM,z_e,Zrr,etr,xz,otr,rtr,ttr,mM,W_e,atr,ntr,$z,str,ltr,itr,fM,dtr,Q_e,ctr,mtr,H_e,ftr,gtr,gM,mje,Md,hM,U_e,I8,htr,J_e,utr,fje,zo,N8,ptr,Ed,_tr,kz,btr,vtr,Sz,Ftr,Ttr,Mtr,q8,Etr,Y_e,Ctr,wtr,Atr,Tt,j8,ytr,K_e,Ltr,xtr,Cd,$tr,Z_e,ktr,Str,Rz,Rtr,Ptr,Btr,uM,Itr,ho,D8,Ntr,ebe,qtr,jtr,za,Dtr,obe,Gtr,Otr,rbe,Vtr,Xtr,tbe,ztr,Wtr,Qtr,Zr,pM,abe,Htr,Utr,Pz,Jtr,Ytr,Ktr,_M,nbe,Ztr,ear,Bz,oar,rar,tar,bM,sbe,aar,nar,Iz,sar,lar,iar,vM,lbe,dar,car,Nz,mar,far,gar,FM,ibe,har,uar,qz,par,_ar,bar,TM,Far,dbe,Tar,Mar,cbe,Ear,Car,MM,gje,wd,EM,mbe,G8,war,fbe,Aar,hje,Wo,O8,yar,Ad,Lar,jz,xar,$ar,Dz,kar,Sar,Rar,V8,Par,gbe,Bar,Iar,Nar,Mt,X8,qar,hbe,jar,Dar,yd,Gar,ube,Oar,Var,Gz,Xar,zar,War,CM,Qar,uo,z8,Har,pbe,Uar,Jar,Wa,Yar,_be,Kar,Zar,bbe,enr,onr,vbe,rnr,tnr,anr,Ld,wM,Fbe,nnr,snr,Oz,lnr,inr,dnr,AM,Tbe,cnr,mnr,Vz,fnr,gnr,hnr,yM,Mbe,unr,pnr,Xz,_nr,bnr,vnr,LM,Fnr,Ebe,Tnr,Mnr,Cbe,Enr,Cnr,xM,uje,xd,$M,wbe,W8,wnr,Abe,Anr,pje,Qo,Q8,ynr,$d,Lnr,zz,xnr,$nr,Wz,knr,Snr,Rnr,H8,Pnr,ybe,Bnr,Inr,Nnr,Et,U8,qnr,Lbe,jnr,Dnr,kd,Gnr,xbe,Onr,Vnr,Qz,Xnr,znr,Wnr,kM,Qnr,po,J8,Hnr,$be,Unr,Jnr,Qa,Ynr,kbe,Knr,Znr,Sbe,esr,osr,Rbe,rsr,tsr,asr,Y8,SM,Pbe,nsr,ssr,Hz,lsr,isr,dsr,RM,Bbe,csr,msr,Uz,fsr,gsr,hsr,PM,usr,Ibe,psr,_sr,Nbe,bsr,vsr,BM,_je,Sd,IM,qbe,K8,Fsr,jbe,Tsr,bje,Ho,Z8,Msr,Rd,Esr,Jz,Csr,wsr,Yz,Asr,ysr,Lsr,e7,xsr,Dbe,$sr,ksr,Ssr,Ct,o7,Rsr,Gbe,Psr,Bsr,Pd,Isr,Obe,Nsr,qsr,Kz,jsr,Dsr,Gsr,NM,Osr,_o,r7,Vsr,Vbe,Xsr,zsr,Ha,Wsr,Xbe,Qsr,Hsr,zbe,Usr,Jsr,Wbe,Ysr,Ksr,Zsr,Qbe,qM,Hbe,elr,olr,Zz,rlr,tlr,alr,jM,nlr,Ube,slr,llr,Jbe,ilr,dlr,DM,vje,Bd,GM,Ybe,t7,clr,Kbe,mlr,Fje,Uo,a7,flr,Id,glr,eW,hlr,ulr,oW,plr,_lr,blr,n7,vlr,Zbe,Flr,Tlr,Mlr,wt,s7,Elr,e2e,Clr,wlr,Nd,Alr,o2e,ylr,Llr,rW,xlr,$lr,klr,OM,Slr,bo,l7,Rlr,r2e,Plr,Blr,Ua,Ilr,t2e,Nlr,qlr,a2e,jlr,Dlr,n2e,Glr,Olr,Vlr,Ja,VM,s2e,Xlr,zlr,tW,Wlr,Qlr,Hlr,XM,l2e,Ulr,Jlr,aW,Ylr,Klr,Zlr,zM,i2e,eir,oir,nW,rir,tir,air,WM,d2e,nir,sir,sW,lir,iir,dir,QM,cir,c2e,mir,fir,m2e,gir,hir,HM,Tje,qd,UM,f2e,i7,uir,g2e,pir,Mje,Jo,d7,_ir,jd,bir,lW,vir,Fir,iW,Tir,Mir,Eir,c7,Cir,h2e,wir,Air,yir,At,m7,Lir,u2e,xir,$ir,Dd,kir,p2e,Sir,Rir,dW,Pir,Bir,Iir,JM,Nir,vo,f7,qir,_2e,jir,Dir,Ya,Gir,b2e,Oir,Vir,v2e,Xir,zir,F2e,Wir,Qir,Hir,T2e,YM,M2e,Uir,Jir,cW,Yir,Kir,Zir,KM,edr,E2e,odr,rdr,C2e,tdr,adr,ZM,Eje,Gd,e4,w2e,g7,ndr,A2e,sdr,Cje,Yo,h7,ldr,Od,idr,mW,ddr,cdr,fW,mdr,fdr,gdr,u7,hdr,y2e,udr,pdr,_dr,yt,p7,bdr,L2e,vdr,Fdr,Vd,Tdr,x2e,Mdr,Edr,gW,Cdr,wdr,Adr,o4,ydr,wr,_7,Ldr,$2e,xdr,$dr,Ka,kdr,k2e,Sdr,Rdr,S2e,Pdr,Bdr,R2e,Idr,Ndr,qdr,q,r4,P2e,jdr,Ddr,hW,Gdr,Odr,Vdr,t4,B2e,Xdr,zdr,uW,Wdr,Qdr,Hdr,a4,I2e,Udr,Jdr,pW,Ydr,Kdr,Zdr,n4,N2e,ecr,ocr,_W,rcr,tcr,acr,s4,q2e,ncr,scr,bW,lcr,icr,dcr,l4,j2e,ccr,mcr,vW,fcr,gcr,hcr,i4,D2e,ucr,pcr,FW,_cr,bcr,vcr,d4,G2e,Fcr,Tcr,TW,Mcr,Ecr,Ccr,c4,O2e,wcr,Acr,MW,ycr,Lcr,xcr,m4,V2e,$cr,kcr,EW,Scr,Rcr,Pcr,f4,X2e,Bcr,Icr,CW,Ncr,qcr,jcr,g4,z2e,Dcr,Gcr,wW,Ocr,Vcr,Xcr,h4,W2e,zcr,Wcr,AW,Qcr,Hcr,Ucr,u4,Q2e,Jcr,Ycr,yW,Kcr,Zcr,emr,p4,H2e,omr,rmr,LW,tmr,amr,nmr,_4,U2e,smr,lmr,xW,imr,dmr,cmr,b4,J2e,mmr,fmr,$W,gmr,hmr,umr,Is,Y2e,pmr,_mr,kW,bmr,vmr,SW,Fmr,Tmr,Mmr,v4,K2e,Emr,Cmr,RW,wmr,Amr,ymr,F4,Z2e,Lmr,xmr,PW,$mr,kmr,Smr,T4,eve,Rmr,Pmr,BW,Bmr,Imr,Nmr,M4,ove,qmr,jmr,IW,Dmr,Gmr,Omr,E4,rve,Vmr,Xmr,NW,zmr,Wmr,Qmr,C4,tve,Hmr,Umr,qW,Jmr,Ymr,Kmr,w4,ave,Zmr,efr,jW,ofr,rfr,tfr,A4,nve,afr,nfr,DW,sfr,lfr,ifr,y4,sve,dfr,cfr,GW,mfr,ffr,gfr,L4,lve,hfr,ufr,OW,pfr,_fr,bfr,x4,ive,vfr,Ffr,VW,Tfr,Mfr,Efr,$4,dve,Cfr,wfr,XW,Afr,yfr,Lfr,k4,cve,xfr,$fr,zW,kfr,Sfr,Rfr,S4,mve,Pfr,Bfr,WW,Ifr,Nfr,qfr,R4,fve,jfr,Dfr,QW,Gfr,Ofr,Vfr,P4,gve,Xfr,zfr,HW,Wfr,Qfr,Hfr,B4,hve,Ufr,Jfr,UW,Yfr,Kfr,Zfr,I4,uve,egr,ogr,JW,rgr,tgr,agr,N4,pve,ngr,sgr,YW,lgr,igr,dgr,q4,_ve,cgr,mgr,KW,fgr,ggr,hgr,j4,bve,ugr,pgr,ZW,_gr,bgr,vgr,D4,vve,Fgr,Tgr,eQ,Mgr,Egr,Cgr,G4,Fve,wgr,Agr,oQ,ygr,Lgr,xgr,O4,Tve,$gr,kgr,rQ,Sgr,Rgr,Pgr,V4,Mve,Bgr,Igr,tQ,Ngr,qgr,jgr,X4,Eve,Dgr,Ggr,aQ,Ogr,Vgr,Xgr,z4,Cve,zgr,Wgr,nQ,Qgr,Hgr,Ugr,W4,wve,Jgr,Ygr,sQ,Kgr,Zgr,ehr,Q4,Ave,ohr,rhr,lQ,thr,ahr,nhr,H4,wje,Xd,U4,yve,b7,shr,Lve,lhr,Aje,Ko,v7,ihr,zd,dhr,iQ,chr,mhr,dQ,fhr,ghr,hhr,F7,uhr,xve,phr,_hr,bhr,Lt,T7,vhr,$ve,Fhr,Thr,Wd,Mhr,kve,Ehr,Chr,cQ,whr,Ahr,yhr,J4,Lhr,Ar,M7,xhr,Sve,$hr,khr,Za,Shr,Rve,Rhr,Phr,Pve,Bhr,Ihr,Bve,Nhr,qhr,jhr,se,Y4,Ive,Dhr,Ghr,mQ,Ohr,Vhr,Xhr,K4,Nve,zhr,Whr,fQ,Qhr,Hhr,Uhr,Z4,qve,Jhr,Yhr,gQ,Khr,Zhr,eur,eE,jve,our,rur,hQ,tur,aur,nur,oE,Dve,sur,lur,uQ,iur,dur,cur,rE,Gve,mur,fur,pQ,gur,hur,uur,tE,Ove,pur,_ur,_Q,bur,vur,Fur,aE,Vve,Tur,Mur,bQ,Eur,Cur,wur,nE,Xve,Aur,yur,vQ,Lur,xur,$ur,sE,zve,kur,Sur,FQ,Rur,Pur,Bur,lE,Wve,Iur,Nur,TQ,qur,jur,Dur,iE,Qve,Gur,Our,MQ,Vur,Xur,zur,dE,Hve,Wur,Qur,EQ,Hur,Uur,Jur,cE,Uve,Yur,Kur,CQ,Zur,epr,opr,mE,Jve,rpr,tpr,wQ,apr,npr,spr,fE,Yve,lpr,ipr,AQ,dpr,cpr,mpr,gE,Kve,fpr,gpr,yQ,hpr,upr,ppr,hE,Zve,_pr,bpr,LQ,vpr,Fpr,Tpr,uE,eFe,Mpr,Epr,xQ,Cpr,wpr,Apr,pE,oFe,ypr,Lpr,$Q,xpr,$pr,kpr,_E,rFe,Spr,Rpr,kQ,Ppr,Bpr,Ipr,bE,tFe,Npr,qpr,SQ,jpr,Dpr,Gpr,vE,aFe,Opr,Vpr,RQ,Xpr,zpr,Wpr,FE,yje,Qd,TE,nFe,E7,Qpr,sFe,Hpr,Lje,Zo,C7,Upr,Hd,Jpr,PQ,Ypr,Kpr,BQ,Zpr,e_r,o_r,w7,r_r,lFe,t_r,a_r,n_r,xt,A7,s_r,iFe,l_r,i_r,Ud,d_r,dFe,c_r,m_r,IQ,f_r,g_r,h_r,ME,u_r,yr,y7,p_r,cFe,__r,b_r,en,v_r,mFe,F_r,T_r,fFe,M_r,E_r,gFe,C_r,w_r,A_r,Te,EE,hFe,y_r,L_r,NQ,x_r,$_r,k_r,CE,uFe,S_r,R_r,qQ,P_r,B_r,I_r,wE,pFe,N_r,q_r,jQ,j_r,D_r,G_r,AE,_Fe,O_r,V_r,DQ,X_r,z_r,W_r,yE,bFe,Q_r,H_r,GQ,U_r,J_r,Y_r,LE,vFe,K_r,Z_r,OQ,ebr,obr,rbr,xE,FFe,tbr,abr,VQ,nbr,sbr,lbr,$E,TFe,ibr,dbr,XQ,cbr,mbr,fbr,kE,MFe,gbr,hbr,zQ,ubr,pbr,_br,SE,EFe,bbr,vbr,WQ,Fbr,Tbr,Mbr,RE,CFe,Ebr,Cbr,QQ,wbr,Abr,ybr,PE,wFe,Lbr,xbr,HQ,$br,kbr,Sbr,BE,AFe,Rbr,Pbr,UQ,Bbr,Ibr,Nbr,IE,xje,Jd,NE,yFe,L7,qbr,LFe,jbr,$je,er,x7,Dbr,Yd,Gbr,JQ,Obr,Vbr,YQ,Xbr,zbr,Wbr,$7,Qbr,xFe,Hbr,Ubr,Jbr,$t,k7,Ybr,$Fe,Kbr,Zbr,Kd,e2r,kFe,o2r,r2r,KQ,t2r,a2r,n2r,qE,s2r,Lr,S7,l2r,SFe,i2r,d2r,on,c2r,RFe,m2r,f2r,PFe,g2r,h2r,BFe,u2r,p2r,_2r,rn,jE,IFe,b2r,v2r,ZQ,F2r,T2r,M2r,DE,NFe,E2r,C2r,eH,w2r,A2r,y2r,GE,qFe,L2r,x2r,oH,$2r,k2r,S2r,OE,jFe,R2r,P2r,rH,B2r,I2r,N2r,VE,kje,Zd,XE,DFe,R7,q2r,GFe,j2r,Sje,or,P7,D2r,ec,G2r,tH,O2r,V2r,aH,X2r,z2r,W2r,B7,Q2r,OFe,H2r,U2r,J2r,kt,I7,Y2r,VFe,K2r,Z2r,oc,evr,XFe,ovr,rvr,nH,tvr,avr,nvr,zE,svr,xr,N7,lvr,zFe,ivr,dvr,tn,cvr,WFe,mvr,fvr,QFe,gvr,hvr,HFe,uvr,pvr,_vr,ie,WE,UFe,bvr,vvr,sH,Fvr,Tvr,Mvr,QE,JFe,Evr,Cvr,lH,wvr,Avr,yvr,HE,YFe,Lvr,xvr,iH,$vr,kvr,Svr,UE,KFe,Rvr,Pvr,dH,Bvr,Ivr,Nvr,JE,ZFe,qvr,jvr,cH,Dvr,Gvr,Ovr,YE,e1e,Vvr,Xvr,mH,zvr,Wvr,Qvr,KE,o1e,Hvr,Uvr,fH,Jvr,Yvr,Kvr,ZE,r1e,Zvr,eFr,gH,oFr,rFr,tFr,eC,t1e,aFr,nFr,hH,sFr,lFr,iFr,oC,a1e,dFr,cFr,uH,mFr,fFr,gFr,rC,n1e,hFr,uFr,pH,pFr,_Fr,bFr,tC,s1e,vFr,FFr,_H,TFr,MFr,EFr,aC,l1e,CFr,wFr,bH,AFr,yFr,LFr,nC,i1e,xFr,$Fr,vH,kFr,SFr,RFr,sC,d1e,PFr,BFr,FH,IFr,NFr,qFr,lC,c1e,jFr,DFr,TH,GFr,OFr,VFr,iC,m1e,XFr,zFr,MH,WFr,QFr,HFr,dC,f1e,UFr,JFr,EH,YFr,KFr,ZFr,cC,g1e,e1r,o1r,CH,r1r,t1r,a1r,mC,h1e,n1r,s1r,wH,l1r,i1r,d1r,fC,Rje,rc,gC,u1e,q7,c1r,p1e,m1r,Pje,rr,j7,f1r,tc,g1r,AH,h1r,u1r,yH,p1r,_1r,b1r,D7,v1r,_1e,F1r,T1r,M1r,St,G7,E1r,b1e,C1r,w1r,ac,A1r,v1e,y1r,L1r,LH,x1r,$1r,k1r,hC,S1r,$r,O7,R1r,F1e,P1r,B1r,an,I1r,T1e,N1r,q1r,M1e,j1r,D1r,E1e,G1r,O1r,V1r,ye,uC,C1e,X1r,z1r,xH,W1r,Q1r,H1r,pC,w1e,U1r,J1r,$H,Y1r,K1r,Z1r,_C,A1e,eTr,oTr,kH,rTr,tTr,aTr,bC,y1e,nTr,sTr,SH,lTr,iTr,dTr,vC,L1e,cTr,mTr,RH,fTr,gTr,hTr,FC,x1e,uTr,pTr,PH,_Tr,bTr,vTr,TC,$1e,FTr,TTr,BH,MTr,ETr,CTr,MC,k1e,wTr,ATr,IH,yTr,LTr,xTr,EC,S1e,$Tr,kTr,NH,STr,RTr,PTr,CC,R1e,BTr,ITr,qH,NTr,qTr,jTr,wC,Bje,nc,AC,P1e,V7,DTr,B1e,GTr,Ije,tr,X7,OTr,sc,VTr,jH,XTr,zTr,DH,WTr,QTr,HTr,z7,UTr,I1e,JTr,YTr,KTr,Rt,W7,ZTr,N1e,eMr,oMr,lc,rMr,q1e,tMr,aMr,GH,nMr,sMr,lMr,yC,iMr,kr,Q7,dMr,j1e,cMr,mMr,nn,fMr,D1e,gMr,hMr,G1e,uMr,pMr,O1e,_Mr,bMr,vMr,oe,LC,V1e,FMr,TMr,OH,MMr,EMr,CMr,xC,X1e,wMr,AMr,VH,yMr,LMr,xMr,$C,z1e,$Mr,kMr,XH,SMr,RMr,PMr,kC,W1e,BMr,IMr,zH,NMr,qMr,jMr,SC,Q1e,DMr,GMr,WH,OMr,VMr,XMr,RC,H1e,zMr,WMr,QH,QMr,HMr,UMr,PC,U1e,JMr,YMr,HH,KMr,ZMr,e4r,BC,J1e,o4r,r4r,UH,t4r,a4r,n4r,IC,Y1e,s4r,l4r,JH,i4r,d4r,c4r,NC,K1e,m4r,f4r,YH,g4r,h4r,u4r,qC,Z1e,p4r,_4r,KH,b4r,v4r,F4r,jC,eTe,T4r,M4r,ZH,E4r,C4r,w4r,DC,oTe,A4r,y4r,eU,L4r,x4r,$4r,GC,rTe,k4r,S4r,oU,R4r,P4r,B4r,OC,tTe,I4r,N4r,rU,q4r,j4r,D4r,VC,aTe,G4r,O4r,tU,V4r,X4r,z4r,XC,nTe,W4r,Q4r,aU,H4r,U4r,J4r,zC,sTe,Y4r,K4r,nU,Z4r,eEr,oEr,WC,lTe,rEr,tEr,sU,aEr,nEr,sEr,QC,iTe,lEr,iEr,lU,dEr,cEr,mEr,HC,dTe,fEr,gEr,iU,hEr,uEr,pEr,UC,cTe,_Er,bEr,dU,vEr,FEr,TEr,JC,mTe,MEr,EEr,cU,CEr,wEr,AEr,YC,fTe,yEr,LEr,mU,xEr,$Er,kEr,KC,gTe,SEr,REr,fU,PEr,BEr,IEr,ZC,hTe,NEr,qEr,gU,jEr,DEr,GEr,e5,Nje,ic,o5,uTe,H7,OEr,pTe,VEr,qje,ar,U7,XEr,dc,zEr,hU,WEr,QEr,uU,HEr,UEr,JEr,J7,YEr,_Te,KEr,ZEr,eCr,Pt,Y7,oCr,bTe,rCr,tCr,cc,aCr,vTe,nCr,sCr,pU,lCr,iCr,dCr,r5,cCr,Sr,K7,mCr,FTe,fCr,gCr,sn,hCr,TTe,uCr,pCr,MTe,_Cr,bCr,ETe,vCr,FCr,TCr,ue,t5,CTe,MCr,ECr,_U,CCr,wCr,ACr,a5,wTe,yCr,LCr,bU,xCr,$Cr,kCr,n5,ATe,SCr,RCr,vU,PCr,BCr,ICr,s5,yTe,NCr,qCr,FU,jCr,DCr,GCr,l5,LTe,OCr,VCr,TU,XCr,zCr,WCr,i5,xTe,QCr,HCr,MU,UCr,JCr,YCr,d5,$Te,KCr,ZCr,EU,e5r,o5r,r5r,c5,kTe,t5r,a5r,CU,n5r,s5r,l5r,m5,STe,i5r,d5r,wU,c5r,m5r,f5r,f5,RTe,g5r,h5r,AU,u5r,p5r,_5r,g5,PTe,b5r,v5r,yU,F5r,T5r,M5r,h5,BTe,E5r,C5r,LU,w5r,A5r,y5r,u5,ITe,L5r,x5r,xU,$5r,k5r,S5r,p5,NTe,R5r,P5r,$U,B5r,I5r,N5r,_5,qTe,q5r,j5r,kU,D5r,G5r,O5r,b5,jTe,V5r,X5r,SU,z5r,W5r,Q5r,v5,DTe,H5r,U5r,RU,J5r,Y5r,K5r,F5,jje,mc,T5,GTe,Z7,Z5r,OTe,e3r,Dje,nr,e9,o3r,fc,r3r,PU,t3r,a3r,BU,n3r,s3r,l3r,o9,i3r,VTe,d3r,c3r,m3r,Bt,r9,f3r,XTe,g3r,h3r,gc,u3r,zTe,p3r,_3r,IU,b3r,v3r,F3r,M5,T3r,Rr,t9,M3r,WTe,E3r,C3r,ln,w3r,QTe,A3r,y3r,HTe,L3r,x3r,UTe,$3r,k3r,S3r,a9,E5,JTe,R3r,P3r,NU,B3r,I3r,N3r,C5,YTe,q3r,j3r,qU,D3r,G3r,O3r,w5,Gje,hc,A5,KTe,n9,V3r,ZTe,X3r,Oje,sr,s9,z3r,uc,W3r,jU,Q3r,H3r,DU,U3r,J3r,Y3r,l9,K3r,eMe,Z3r,ewr,owr,It,i9,rwr,oMe,twr,awr,pc,nwr,rMe,swr,lwr,GU,iwr,dwr,cwr,y5,mwr,Pr,d9,fwr,tMe,gwr,hwr,dn,uwr,aMe,pwr,_wr,nMe,bwr,vwr,sMe,Fwr,Twr,Mwr,lMe,L5,iMe,Ewr,Cwr,OU,wwr,Awr,ywr,x5,Vje,_c,$5,dMe,c9,Lwr,cMe,xwr,Xje,lr,m9,$wr,bc,kwr,VU,Swr,Rwr,XU,Pwr,Bwr,Iwr,f9,Nwr,mMe,qwr,jwr,Dwr,Nt,g9,Gwr,fMe,Owr,Vwr,vc,Xwr,gMe,zwr,Wwr,zU,Qwr,Hwr,Uwr,k5,Jwr,Br,h9,Ywr,hMe,Kwr,Zwr,cn,e0r,uMe,o0r,r0r,pMe,t0r,a0r,_Me,n0r,s0r,l0r,de,S5,bMe,i0r,d0r,WU,c0r,m0r,f0r,R5,vMe,g0r,h0r,QU,u0r,p0r,_0r,P5,FMe,b0r,v0r,HU,F0r,T0r,M0r,B5,TMe,E0r,C0r,UU,w0r,A0r,y0r,I5,MMe,L0r,x0r,JU,$0r,k0r,S0r,N5,EMe,R0r,P0r,YU,B0r,I0r,N0r,q5,CMe,q0r,j0r,KU,D0r,G0r,O0r,j5,wMe,V0r,X0r,ZU,z0r,W0r,Q0r,D5,AMe,H0r,U0r,eJ,J0r,Y0r,K0r,G5,yMe,Z0r,e6r,oJ,o6r,r6r,t6r,O5,LMe,a6r,n6r,rJ,s6r,l6r,i6r,V5,xMe,d6r,c6r,tJ,m6r,f6r,g6r,X5,$Me,h6r,u6r,aJ,p6r,_6r,b6r,z5,kMe,v6r,F6r,nJ,T6r,M6r,E6r,W5,SMe,C6r,w6r,sJ,A6r,y6r,L6r,Q5,RMe,x6r,$6r,lJ,k6r,S6r,R6r,H5,PMe,P6r,B6r,iJ,I6r,N6r,q6r,U5,BMe,j6r,D6r,dJ,G6r,O6r,V6r,J5,IMe,X6r,z6r,cJ,W6r,Q6r,H6r,Y5,NMe,U6r,J6r,mJ,Y6r,K6r,Z6r,K5,zje,Fc,Z5,qMe,u9,eAr,jMe,oAr,Wje,ir,p9,rAr,Tc,tAr,fJ,aAr,nAr,gJ,sAr,lAr,iAr,_9,dAr,DMe,cAr,mAr,fAr,qt,b9,gAr,GMe,hAr,uAr,Mc,pAr,OMe,_Ar,bAr,hJ,vAr,FAr,TAr,e3,MAr,Ir,v9,EAr,VMe,CAr,wAr,mn,AAr,XMe,yAr,LAr,zMe,xAr,$Ar,WMe,kAr,SAr,RAr,ce,o3,QMe,PAr,BAr,uJ,IAr,NAr,qAr,r3,HMe,jAr,DAr,pJ,GAr,OAr,VAr,t3,UMe,XAr,zAr,_J,WAr,QAr,HAr,a3,JMe,UAr,JAr,bJ,YAr,KAr,ZAr,n3,YMe,eyr,oyr,vJ,ryr,tyr,ayr,s3,KMe,nyr,syr,FJ,lyr,iyr,dyr,l3,ZMe,cyr,myr,TJ,fyr,gyr,hyr,i3,e4e,uyr,pyr,MJ,_yr,byr,vyr,d3,o4e,Fyr,Tyr,EJ,Myr,Eyr,Cyr,c3,r4e,wyr,Ayr,CJ,yyr,Lyr,xyr,m3,t4e,$yr,kyr,wJ,Syr,Ryr,Pyr,f3,a4e,Byr,Iyr,AJ,Nyr,qyr,jyr,g3,n4e,Dyr,Gyr,yJ,Oyr,Vyr,Xyr,h3,s4e,zyr,Wyr,LJ,Qyr,Hyr,Uyr,u3,l4e,Jyr,Yyr,xJ,Kyr,Zyr,eLr,p3,i4e,oLr,rLr,$J,tLr,aLr,nLr,_3,d4e,sLr,lLr,kJ,iLr,dLr,cLr,b3,c4e,mLr,fLr,SJ,gLr,hLr,uLr,v3,m4e,pLr,_Lr,RJ,bLr,vLr,FLr,F3,f4e,TLr,MLr,PJ,ELr,CLr,wLr,T3,Qje,Ec,M3,g4e,F9,ALr,h4e,yLr,Hje,dr,T9,LLr,Cc,xLr,BJ,$Lr,kLr,IJ,SLr,RLr,PLr,M9,BLr,u4e,ILr,NLr,qLr,jt,E9,jLr,p4e,DLr,GLr,wc,OLr,_4e,VLr,XLr,NJ,zLr,WLr,QLr,E3,HLr,Nr,C9,ULr,b4e,JLr,YLr,fn,KLr,v4e,ZLr,e8r,F4e,o8r,r8r,T4e,t8r,a8r,n8r,M4e,C3,E4e,s8r,l8r,qJ,i8r,d8r,c8r,w3,Uje,Ac,A3,C4e,w9,m8r,w4e,f8r,Jje,cr,A9,g8r,yc,h8r,jJ,u8r,p8r,DJ,_8r,b8r,v8r,y9,F8r,A4e,T8r,M8r,E8r,Dt,L9,C8r,y4e,w8r,A8r,Lc,y8r,L4e,L8r,x8r,GJ,$8r,k8r,S8r,y3,R8r,qr,x9,P8r,x4e,B8r,I8r,gn,N8r,$4e,q8r,j8r,k4e,D8r,G8r,S4e,O8r,V8r,X8r,R4e,L3,P4e,z8r,W8r,OJ,Q8r,H8r,U8r,x3,Yje,xc,$3,B4e,$9,J8r,I4e,Y8r,Kje,mr,k9,K8r,$c,Z8r,VJ,e7r,o7r,XJ,r7r,t7r,a7r,S9,n7r,N4e,s7r,l7r,i7r,Gt,R9,d7r,q4e,c7r,m7r,kc,f7r,j4e,g7r,h7r,zJ,u7r,p7r,_7r,k3,b7r,jr,P9,v7r,D4e,F7r,T7r,hn,M7r,G4e,E7r,C7r,O4e,w7r,A7r,V4e,y7r,L7r,x7r,re,S3,X4e,$7r,k7r,WJ,S7r,R7r,P7r,R3,z4e,B7r,I7r,QJ,N7r,q7r,j7r,P3,W4e,D7r,G7r,HJ,O7r,V7r,X7r,B3,Q4e,z7r,W7r,UJ,Q7r,H7r,U7r,I3,H4e,J7r,Y7r,JJ,K7r,Z7r,e9r,N3,U4e,o9r,r9r,YJ,t9r,a9r,n9r,q3,J4e,s9r,l9r,KJ,i9r,d9r,c9r,j3,Y4e,m9r,f9r,ZJ,g9r,h9r,u9r,D3,K4e,p9r,_9r,eY,b9r,v9r,F9r,G3,Z4e,T9r,M9r,oY,E9r,C9r,w9r,O3,eEe,A9r,y9r,rY,L9r,x9r,$9r,V3,oEe,k9r,S9r,tY,R9r,P9r,B9r,X3,rEe,I9r,N9r,aY,q9r,j9r,D9r,z3,tEe,G9r,O9r,nY,V9r,X9r,z9r,W3,aEe,W9r,Q9r,sY,H9r,U9r,J9r,Q3,nEe,Y9r,K9r,lY,Z9r,exr,oxr,H3,sEe,rxr,txr,iY,axr,nxr,sxr,U3,lEe,lxr,ixr,dY,dxr,cxr,mxr,J3,iEe,fxr,gxr,cY,hxr,uxr,pxr,Y3,dEe,_xr,bxr,mY,vxr,Fxr,Txr,K3,cEe,Mxr,Exr,fY,Cxr,wxr,Axr,Z3,mEe,yxr,Lxr,gY,xxr,$xr,kxr,ew,fEe,Sxr,Rxr,hY,Pxr,Bxr,Ixr,ow,gEe,Nxr,qxr,uY,jxr,Dxr,Gxr,rw,hEe,Oxr,Vxr,pY,Xxr,zxr,Wxr,tw,uEe,Qxr,Hxr,_Y,Uxr,Jxr,Yxr,aw,Zje,Sc,nw,pEe,B9,Kxr,_Ee,Zxr,eDe,fr,I9,e$r,Rc,o$r,bY,r$r,t$r,vY,a$r,n$r,s$r,N9,l$r,bEe,i$r,d$r,c$r,Ot,q9,m$r,vEe,f$r,g$r,Pc,h$r,FEe,u$r,p$r,FY,_$r,b$r,v$r,sw,F$r,Dr,j9,T$r,TEe,M$r,E$r,un,C$r,MEe,w$r,A$r,EEe,y$r,L$r,CEe,x$r,$$r,k$r,Le,lw,wEe,S$r,R$r,TY,P$r,B$r,I$r,iw,AEe,N$r,q$r,MY,j$r,D$r,G$r,dw,yEe,O$r,V$r,EY,X$r,z$r,W$r,cw,LEe,Q$r,H$r,CY,U$r,J$r,Y$r,mw,xEe,K$r,Z$r,wY,ekr,okr,rkr,fw,$Ee,tkr,akr,AY,nkr,skr,lkr,gw,kEe,ikr,dkr,yY,ckr,mkr,fkr,hw,SEe,gkr,hkr,LY,ukr,pkr,_kr,uw,REe,bkr,vkr,xY,Fkr,Tkr,Mkr,pw,PEe,Ekr,Ckr,$Y,wkr,Akr,ykr,_w,oDe,Bc,bw,BEe,D9,Lkr,IEe,xkr,rDe,gr,G9,$kr,Ic,kkr,kY,Skr,Rkr,SY,Pkr,Bkr,Ikr,O9,Nkr,NEe,qkr,jkr,Dkr,Vt,V9,Gkr,qEe,Okr,Vkr,Nc,Xkr,jEe,zkr,Wkr,RY,Qkr,Hkr,Ukr,vw,Jkr,Gr,X9,Ykr,DEe,Kkr,Zkr,pn,eSr,GEe,oSr,rSr,OEe,tSr,aSr,VEe,nSr,sSr,lSr,Ee,Fw,XEe,iSr,dSr,PY,cSr,mSr,fSr,Tw,zEe,gSr,hSr,BY,uSr,pSr,_Sr,Mw,WEe,bSr,vSr,IY,FSr,TSr,MSr,Ew,QEe,ESr,CSr,NY,wSr,ASr,ySr,Cw,HEe,LSr,xSr,qY,$Sr,kSr,SSr,ww,UEe,RSr,PSr,jY,BSr,ISr,NSr,Aw,JEe,qSr,jSr,DY,DSr,GSr,OSr,yw,YEe,VSr,XSr,GY,zSr,WSr,QSr,Lw,KEe,HSr,USr,OY,JSr,YSr,KSr,xw,ZEe,ZSr,eRr,VY,oRr,rRr,tRr,$w,eCe,aRr,nRr,XY,sRr,lRr,iRr,kw,oCe,dRr,cRr,zY,mRr,fRr,gRr,Sw,tDe,qc,Rw,rCe,z9,hRr,tCe,uRr,aDe,hr,W9,pRr,jc,_Rr,WY,bRr,vRr,QY,FRr,TRr,MRr,Q9,ERr,aCe,CRr,wRr,ARr,Xt,H9,yRr,nCe,LRr,xRr,Dc,$Rr,sCe,kRr,SRr,HY,RRr,PRr,BRr,Pw,IRr,Or,U9,NRr,lCe,qRr,jRr,_n,DRr,iCe,GRr,ORr,dCe,VRr,XRr,cCe,zRr,WRr,QRr,xe,Bw,mCe,HRr,URr,UY,JRr,YRr,KRr,Iw,fCe,ZRr,ePr,JY,oPr,rPr,tPr,Nw,gCe,aPr,nPr,YY,sPr,lPr,iPr,qw,hCe,dPr,cPr,KY,mPr,fPr,gPr,jw,uCe,hPr,uPr,ZY,pPr,_Pr,bPr,Dw,pCe,vPr,FPr,eK,TPr,MPr,EPr,Gw,_Ce,CPr,wPr,oK,APr,yPr,LPr,Ow,bCe,xPr,$Pr,rK,kPr,SPr,RPr,Vw,vCe,PPr,BPr,tK,IPr,NPr,qPr,Xw,FCe,jPr,DPr,aK,GPr,OPr,VPr,zw,nDe,Gc,Ww,TCe,J9,XPr,MCe,zPr,sDe,ur,Y9,WPr,Oc,QPr,nK,HPr,UPr,sK,JPr,YPr,KPr,K9,ZPr,ECe,eBr,oBr,rBr,zt,Z9,tBr,CCe,aBr,nBr,Vc,sBr,wCe,lBr,iBr,lK,dBr,cBr,mBr,Qw,fBr,Vr,ex,gBr,ACe,hBr,uBr,bn,pBr,yCe,_Br,bBr,LCe,vBr,FBr,xCe,TBr,MBr,EBr,Pe,Hw,$Ce,CBr,wBr,iK,ABr,yBr,LBr,Uw,kCe,xBr,$Br,dK,kBr,SBr,RBr,Jw,SCe,PBr,BBr,cK,IBr,NBr,qBr,Yw,RCe,jBr,DBr,mK,GBr,OBr,VBr,Kw,PCe,XBr,zBr,fK,WBr,QBr,HBr,Zw,BCe,UBr,JBr,gK,YBr,KBr,ZBr,e0,ICe,eIr,oIr,hK,rIr,tIr,aIr,o0,NCe,nIr,sIr,uK,lIr,iIr,dIr,r0,qCe,cIr,mIr,pK,fIr,gIr,hIr,t0,lDe,Xc,a0,jCe,ox,uIr,DCe,pIr,iDe,pr,rx,_Ir,zc,bIr,_K,vIr,FIr,bK,TIr,MIr,EIr,tx,CIr,GCe,wIr,AIr,yIr,Wt,ax,LIr,OCe,xIr,$Ir,Wc,kIr,VCe,SIr,RIr,vK,PIr,BIr,IIr,n0,NIr,Xr,nx,qIr,XCe,jIr,DIr,vn,GIr,zCe,OIr,VIr,WCe,XIr,zIr,QCe,WIr,QIr,HIr,$e,s0,HCe,UIr,JIr,FK,YIr,KIr,ZIr,l0,UCe,eNr,oNr,TK,rNr,tNr,aNr,i0,JCe,nNr,sNr,MK,lNr,iNr,dNr,d0,YCe,cNr,mNr,EK,fNr,gNr,hNr,c0,KCe,uNr,pNr,CK,_Nr,bNr,vNr,m0,ZCe,FNr,TNr,wK,MNr,ENr,CNr,f0,e5e,wNr,ANr,AK,yNr,LNr,xNr,g0,o5e,$Nr,kNr,yK,SNr,RNr,PNr,h0,r5e,BNr,INr,LK,NNr,qNr,jNr,u0,t5e,DNr,GNr,xK,ONr,VNr,XNr,p0,dDe,Qc,_0,a5e,sx,zNr,n5e,WNr,cDe,_r,lx,QNr,Hc,HNr,$K,UNr,JNr,kK,YNr,KNr,ZNr,ix,eqr,s5e,oqr,rqr,tqr,Qt,dx,aqr,l5e,nqr,sqr,Uc,lqr,i5e,iqr,dqr,SK,cqr,mqr,fqr,b0,gqr,zr,cx,hqr,d5e,uqr,pqr,Fn,_qr,c5e,bqr,vqr,m5e,Fqr,Tqr,f5e,Mqr,Eqr,Cqr,ke,v0,g5e,wqr,Aqr,RK,yqr,Lqr,xqr,F0,h5e,$qr,kqr,PK,Sqr,Rqr,Pqr,T0,u5e,Bqr,Iqr,BK,Nqr,qqr,jqr,M0,p5e,Dqr,Gqr,IK,Oqr,Vqr,Xqr,E0,_5e,zqr,Wqr,NK,Qqr,Hqr,Uqr,C0,b5e,Jqr,Yqr,qK,Kqr,Zqr,ejr,w0,v5e,ojr,rjr,jK,tjr,ajr,njr,A0,F5e,sjr,ljr,DK,ijr,djr,cjr,y0,T5e,mjr,fjr,GK,gjr,hjr,ujr,L0,M5e,pjr,_jr,OK,bjr,vjr,Fjr,x0,mDe,Jc,$0,E5e,mx,Tjr,C5e,Mjr,fDe,br,fx,Ejr,Yc,Cjr,VK,wjr,Ajr,XK,yjr,Ljr,xjr,gx,$jr,w5e,kjr,Sjr,Rjr,Ht,hx,Pjr,A5e,Bjr,Ijr,Kc,Njr,y5e,qjr,jjr,zK,Djr,Gjr,Ojr,k0,Vjr,Wr,ux,Xjr,L5e,zjr,Wjr,Tn,Qjr,x5e,Hjr,Ujr,$5e,Jjr,Yjr,k5e,Kjr,Zjr,eDr,Ge,S0,S5e,oDr,rDr,WK,tDr,aDr,nDr,R0,R5e,sDr,lDr,QK,iDr,dDr,cDr,P0,P5e,mDr,fDr,HK,gDr,hDr,uDr,B0,B5e,pDr,_Dr,UK,bDr,vDr,FDr,I0,I5e,TDr,MDr,JK,EDr,CDr,wDr,N0,N5e,ADr,yDr,YK,LDr,xDr,$Dr,q0,q5e,kDr,SDr,KK,RDr,PDr,BDr,j0,j5e,IDr,NDr,ZK,qDr,jDr,DDr,D0,gDe,Zc,G0,D5e,px,GDr,G5e,ODr,hDe,vr,_x,VDr,em,XDr,eZ,zDr,WDr,oZ,QDr,HDr,UDr,bx,JDr,O5e,YDr,KDr,ZDr,Ut,vx,eGr,V5e,oGr,rGr,om,tGr,X5e,aGr,nGr,rZ,sGr,lGr,iGr,O0,dGr,Qr,Fx,cGr,z5e,mGr,fGr,Mn,gGr,W5e,hGr,uGr,Q5e,pGr,_Gr,H5e,bGr,vGr,FGr,Oe,V0,U5e,TGr,MGr,tZ,EGr,CGr,wGr,X0,J5e,AGr,yGr,aZ,LGr,xGr,$Gr,z0,Y5e,kGr,SGr,nZ,RGr,PGr,BGr,W0,K5e,IGr,NGr,sZ,qGr,jGr,DGr,Q0,Z5e,GGr,OGr,lZ,VGr,XGr,zGr,H0,e3e,WGr,QGr,iZ,HGr,UGr,JGr,U0,o3e,YGr,KGr,dZ,ZGr,eOr,oOr,J0,r3e,rOr,tOr,cZ,aOr,nOr,sOr,Y0,uDe,rm,K0,t3e,Tx,lOr,a3e,iOr,pDe,Fr,Mx,dOr,tm,cOr,mZ,mOr,fOr,fZ,gOr,hOr,uOr,Ex,pOr,n3e,_Or,bOr,vOr,Jt,Cx,FOr,s3e,TOr,MOr,am,EOr,l3e,COr,wOr,gZ,AOr,yOr,LOr,Z0,xOr,Hr,wx,$Or,i3e,kOr,SOr,En,ROr,d3e,POr,BOr,c3e,IOr,NOr,m3e,qOr,jOr,DOr,f3e,e6,g3e,GOr,OOr,hZ,VOr,XOr,zOr,o6,_De,nm,r6,h3e,Ax,WOr,u3e,QOr,bDe,Tr,yx,HOr,sm,UOr,uZ,JOr,YOr,pZ,KOr,ZOr,eVr,Lx,oVr,p3e,rVr,tVr,aVr,Yt,xx,nVr,_3e,sVr,lVr,lm,iVr,b3e,dVr,cVr,_Z,mVr,fVr,gVr,t6,hVr,Ur,$x,uVr,v3e,pVr,_Vr,Cn,bVr,F3e,vVr,FVr,T3e,TVr,MVr,M3e,EVr,CVr,wVr,kx,a6,E3e,AVr,yVr,bZ,LVr,xVr,$Vr,n6,C3e,kVr,SVr,vZ,RVr,PVr,BVr,s6,vDe,im,l6,w3e,Sx,IVr,A3e,NVr,FDe,Mr,Rx,qVr,dm,jVr,FZ,DVr,GVr,TZ,OVr,VVr,XVr,Px,zVr,y3e,WVr,QVr,HVr,Kt,Bx,UVr,L3e,JVr,YVr,cm,KVr,x3e,ZVr,eXr,MZ,oXr,rXr,tXr,i6,aXr,Jr,Ix,nXr,$3e,sXr,lXr,wn,iXr,k3e,dXr,cXr,S3e,mXr,fXr,R3e,gXr,hXr,uXr,P3e,d6,B3e,pXr,_Xr,EZ,bXr,vXr,FXr,c6,TDe;return d=new te({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),Sy=new te({}),Ry=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),vm=new TXr({props:{warning:!0,$$slots:{default:[fkt]},$$scope:{ctx:L}}}),Py=new te({}),By=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L584"}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L607"}}),Eg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[gkt]},$$scope:{ctx:L}}}),jy=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L730"}}),Dy=new te({}),Gy=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L390"}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L404"}}),ah=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[hkt]},$$scope:{ctx:L}}}),zy=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L603"}}),Wy=new te({}),Qy=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L190"}}),Jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L204"}}),Ih=new TXr({props:{$$slots:{default:[ukt]},$$scope:{ctx:L}}}),Nh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[pkt]},$$scope:{ctx:L}}}),Yy=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L331"}}),Ky=new te({}),Zy=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L88"}}),rL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L102"}}),tu=new TXr({props:{$$slots:{default:[_kt]},$$scope:{ctx:L}}}),au=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[bkt]},$$scope:{ctx:L}}}),tL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L255"}}),aL=new te({}),nL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L737"}}),lL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),lu=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[vkt]},$$scope:{ctx:L}}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),r_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[Fkt]},$$scope:{ctx:L}}}),dL=new te({}),cL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L744"}}),fL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),a_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Tkt]},$$scope:{ctx:L}}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),H_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Mkt]},$$scope:{ctx:L}}}),hL=new te({}),uL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L759"}}),_L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),J_=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Ekt]},$$scope:{ctx:L}}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Bb=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Ckt]},$$scope:{ctx:L}}}),vL=new te({}),FL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L766"}}),ML=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Nb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[wkt]},$$scope:{ctx:L}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),T2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Akt]},$$scope:{ctx:L}}}),CL=new te({}),wL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L773"}}),yL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),E2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[ykt]},$$scope:{ctx:L}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),G2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Lkt]},$$scope:{ctx:L}}}),xL=new te({}),$L=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L782"}}),SL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),V2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[xkt]},$$scope:{ctx:L}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),qv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[$kt]},$$scope:{ctx:L}}}),PL=new te({}),BL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L816"}}),NL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Dv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[kkt]},$$scope:{ctx:L}}}),qL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_F=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Skt]},$$scope:{ctx:L}}}),jL=new te({}),DL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L823"}}),OL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),vF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Rkt]},$$scope:{ctx:L}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),AF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Pkt]},$$scope:{ctx:L}}}),XL=new te({}),zL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L809"}}),QL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),LF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Bkt]},$$scope:{ctx:L}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),c1=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Ikt]},$$scope:{ctx:L}}}),UL=new te({}),JL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L791"}}),KL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),f1=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Nkt]},$$scope:{ctx:L}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),eT=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[qkt]},$$scope:{ctx:L}}}),e8=new te({}),o8=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L798"}}),t8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),rT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[jkt]},$$scope:{ctx:L}}}),a8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),nT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Dkt]},$$scope:{ctx:L}}}),n8=new te({}),s8=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L832"}}),i8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),lT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Gkt]},$$scope:{ctx:L}}}),d8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),TT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Okt]},$$scope:{ctx:L}}}),c8=new te({}),m8=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L871"}}),g8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ET=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Vkt]},$$scope:{ctx:L}}}),h8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),AT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Xkt]},$$scope:{ctx:L}}}),u8=new te({}),p8=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L878"}}),b8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),LT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[zkt]},$$scope:{ctx:L}}}),v8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),jT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Wkt]},$$scope:{ctx:L}}}),F8=new te({}),T8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L901"}}),E8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),GT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Qkt]},$$scope:{ctx:L}}}),C8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),HT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Hkt]},$$scope:{ctx:L}}}),w8=new te({}),A8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L885"}}),L8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),JT=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Ukt]},$$scope:{ctx:L}}}),x8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),lM=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Jkt]},$$scope:{ctx:L}}}),$8=new te({}),k8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L892"}}),R8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),dM=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Ykt]},$$scope:{ctx:L}}}),P8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),gM=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Kkt]},$$scope:{ctx:L}}}),I8=new te({}),N8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L910"}}),j8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),uM=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Zkt]},$$scope:{ctx:L}}}),D8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),MM=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[eSt]},$$scope:{ctx:L}}}),G8=new te({}),O8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L917"}}),X8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),CM=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[oSt]},$$scope:{ctx:L}}}),z8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),xM=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[rSt]},$$scope:{ctx:L}}}),W8=new te({}),Q8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L864"}}),U8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),kM=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[tSt]},$$scope:{ctx:L}}}),J8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),BM=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[aSt]},$$scope:{ctx:L}}}),K8=new te({}),Z8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L839"}}),o7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),NM=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[nSt]},$$scope:{ctx:L}}}),r7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),DM=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[sSt]},$$scope:{ctx:L}}}),t7=new te({}),a7=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L846"}}),s7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),OM=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[lSt]},$$scope:{ctx:L}}}),l7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),HM=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[iSt]},$$scope:{ctx:L}}}),i7=new te({}),d7=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L855"}}),m7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),JM=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[dSt]},$$scope:{ctx:L}}}),f7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ZM=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[cSt]},$$scope:{ctx:L}}}),g7=new te({}),h7=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),p7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),o4=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[mSt]},$$scope:{ctx:L}}}),_7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),H4=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[fSt]},$$scope:{ctx:L}}}),b7=new te({}),v7=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),T7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),J4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[gSt]},$$scope:{ctx:L}}}),M7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),FE=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[hSt]},$$scope:{ctx:L}}}),E7=new te({}),C7=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L418"}}),A7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ME=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[uSt]},$$scope:{ctx:L}}}),y7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),IE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[pSt]},$$scope:{ctx:L}}}),L7=new te({}),x7=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L434"}}),k7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),qE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[_St]},$$scope:{ctx:L}}}),S7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),VE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[bSt]},$$scope:{ctx:L}}}),R7=new te({}),P7=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L450"}}),I7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),zE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[vSt]},$$scope:{ctx:L}}}),N7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),fC=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[FSt]},$$scope:{ctx:L}}}),q7=new te({}),j7=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L457"}}),G7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),hC=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[TSt]},$$scope:{ctx:L}}}),O7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),wC=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[MSt]},$$scope:{ctx:L}}}),V7=new te({}),X7=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),W7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),yC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[ESt]},$$scope:{ctx:L}}}),Q7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),e5=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[CSt]},$$scope:{ctx:L}}}),H7=new te({}),U7=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L502"}}),Y7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),r5=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[wSt]},$$scope:{ctx:L}}}),K7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),F5=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[ASt]},$$scope:{ctx:L}}}),Z7=new te({}),e9=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L509"}}),r9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),M5=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[ySt]},$$scope:{ctx:L}}}),t9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),w5=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[LSt]},$$scope:{ctx:L}}}),n9=new te({}),s9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L482"}}),i9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),y5=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[xSt]},$$scope:{ctx:L}}}),d9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),x5=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[$St]},$$scope:{ctx:L}}}),c9=new te({}),m9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L493"}}),g9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),k5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[kSt]},$$scope:{ctx:L}}}),h9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),K5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[SSt]},$$scope:{ctx:L}}}),u9=new te({}),p9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L475"}}),b9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),e3=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[RSt]},$$scope:{ctx:L}}}),v9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),T3=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[PSt]},$$scope:{ctx:L}}}),F9=new te({}),T9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L443"}}),E9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),E3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[BSt]},$$scope:{ctx:L}}}),C9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),w3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[ISt]},$$scope:{ctx:L}}}),w9=new te({}),A9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L518"}}),L9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),y3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[NSt]},$$scope:{ctx:L}}}),x9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),x3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[qSt]},$$scope:{ctx:L}}}),$9=new te({}),k9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),R9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),k3=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[jSt]},$$scope:{ctx:L}}}),P9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),aw=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[DSt]},$$scope:{ctx:L}}}),B9=new te({}),I9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),q9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),sw=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[GSt]},$$scope:{ctx:L}}}),j9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_w=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[OSt]},$$scope:{ctx:L}}}),D9=new te({}),G9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),V9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),vw=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[VSt]},$$scope:{ctx:L}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Sw=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[XSt]},$$scope:{ctx:L}}}),z9=new te({}),W9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),H9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Pw=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[zSt]},$$scope:{ctx:L}}}),U9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),zw=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[WSt]},$$scope:{ctx:L}}}),J9=new te({}),Y9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L271"}}),Z9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Qw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[QSt]},$$scope:{ctx:L}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),t0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[HSt]},$$scope:{ctx:L}}}),ox=new te({}),rx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L280"}}),ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),n0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[USt]},$$scope:{ctx:L}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),p0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[JSt]},$$scope:{ctx:L}}}),sx=new te({}),lx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),dx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),b0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[YSt]},$$scope:{ctx:L}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),x0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[KSt]},$$scope:{ctx:L}}}),mx=new te({}),fx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L296"}}),hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),k0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[ZSt]},$$scope:{ctx:L}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),D0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[eRt]},$$scope:{ctx:L}}}),px=new te({}),_x=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L305"}}),vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),O0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[oRt]},$$scope:{ctx:L}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Y0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[rRt]},$$scope:{ctx:L}}}),Tx=new te({}),Mx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L312"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Z0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[tRt]},$$scope:{ctx:L}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),o6=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[aRt]},$$scope:{ctx:L}}}),Ax=new te({}),yx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L321"}}),xx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),t6=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[nRt]},$$scope:{ctx:L}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),s6=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[sRt]},$$scope:{ctx:L}}}),Sx=new te({}),Rx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L330"}}),Bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),i6=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[lRt]},$$scope:{ctx:L}}}),Ix=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),c6=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[iRt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),mi=o("Auto Classes"),hm=l(),rt=a("p"),fi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=a("code"),Ly=o("from_pretrained()"),um=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),De=l(),We=a("p"),hi=o("Instantiating one of "),yn=a("a"),xy=o("AutoConfig"),Ln=o(", "),xn=a("a"),$y=o("AutoModel"),ui=o(`, and
`),$n=a("a"),ky=o("AutoTokenizer"),pi=o(" will directly create a class of the relevant architecture. For instance"),pm=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),J$=o("will create a model that is an instance of "),_i=a("a"),Y$=o("BertModel"),K$=o("."),Eo=l(),wa=a("p"),Z$=o("There is one class of "),_m=a("code"),ek=o("AutoModel"),xOe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),bqe=l(),bi=a("h2"),bm=a("a"),poe=a("span"),F(Sy.$$.fragment),$Oe=l(),_oe=a("span"),kOe=o("Extending the Auto Classes"),vqe=l(),kn=a("p"),SOe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),boe=a("code"),ROe=o("NewModel"),POe=o(", make sure you have a "),voe=a("code"),BOe=o("NewModelConfig"),IOe=o(` then you can add those to the auto
classes like this:`),Fqe=l(),F(Ry.$$.fragment),Tqe=l(),ok=a("p"),NOe=o("You will then be able to use the auto classes like you would usually do!"),Mqe=l(),F(vm.$$.fragment),Eqe=l(),vi=a("h2"),Fm=a("a"),Foe=a("span"),F(Py.$$.fragment),qOe=l(),Toe=a("span"),jOe=o("AutoConfig"),Cqe=l(),Co=a("div"),F(By.$$.fragment),DOe=l(),Iy=a("p"),GOe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),rk=a("a"),OOe=o("from_pretrained()"),VOe=o(" class method."),XOe=l(),Ny=a("p"),zOe=o("This class cannot be instantiated directly using "),Moe=a("code"),WOe=o("__init__()"),QOe=o(" (throws an error)."),HOe=l(),Er=a("div"),F(qy.$$.fragment),UOe=l(),Eoe=a("p"),JOe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),YOe=l(),Fi=a("p"),KOe=o("The configuration class to instantiate is selected based on the "),Coe=a("code"),ZOe=o("model_type"),eVe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),woe=a("code"),oVe=o("pretrained_model_name_or_path"),rVe=o(":"),tVe=l(),A=a("ul"),Tm=a("li"),Aoe=a("strong"),aVe=o("albert"),nVe=o(" \u2014 "),tk=a("a"),sVe=o("AlbertConfig"),lVe=o(" (ALBERT model)"),iVe=l(),Mm=a("li"),yoe=a("strong"),dVe=o("bart"),cVe=o(" \u2014 "),ak=a("a"),mVe=o("BartConfig"),fVe=o(" (BART model)"),gVe=l(),Em=a("li"),Loe=a("strong"),hVe=o("beit"),uVe=o(" \u2014 "),nk=a("a"),pVe=o("BeitConfig"),_Ve=o(" (BEiT model)"),bVe=l(),Cm=a("li"),xoe=a("strong"),vVe=o("bert"),FVe=o(" \u2014 "),sk=a("a"),TVe=o("BertConfig"),MVe=o(" (BERT model)"),EVe=l(),wm=a("li"),$oe=a("strong"),CVe=o("bert-generation"),wVe=o(" \u2014 "),lk=a("a"),AVe=o("BertGenerationConfig"),yVe=o(" (Bert Generation model)"),LVe=l(),Am=a("li"),koe=a("strong"),xVe=o("big_bird"),$Ve=o(" \u2014 "),ik=a("a"),kVe=o("BigBirdConfig"),SVe=o(" (BigBird model)"),RVe=l(),ym=a("li"),Soe=a("strong"),PVe=o("bigbird_pegasus"),BVe=o(" \u2014 "),dk=a("a"),IVe=o("BigBirdPegasusConfig"),NVe=o(" (BigBirdPegasus model)"),qVe=l(),Lm=a("li"),Roe=a("strong"),jVe=o("blenderbot"),DVe=o(" \u2014 "),ck=a("a"),GVe=o("BlenderbotConfig"),OVe=o(" (Blenderbot model)"),VVe=l(),xm=a("li"),Poe=a("strong"),XVe=o("blenderbot-small"),zVe=o(" \u2014 "),mk=a("a"),WVe=o("BlenderbotSmallConfig"),QVe=o(" (BlenderbotSmall model)"),HVe=l(),$m=a("li"),Boe=a("strong"),UVe=o("camembert"),JVe=o(" \u2014 "),fk=a("a"),YVe=o("CamembertConfig"),KVe=o(" (CamemBERT model)"),ZVe=l(),km=a("li"),Ioe=a("strong"),eXe=o("canine"),oXe=o(" \u2014 "),gk=a("a"),rXe=o("CanineConfig"),tXe=o(" (Canine model)"),aXe=l(),Sm=a("li"),Noe=a("strong"),nXe=o("clip"),sXe=o(" \u2014 "),hk=a("a"),lXe=o("CLIPConfig"),iXe=o(" (CLIP model)"),dXe=l(),Rm=a("li"),qoe=a("strong"),cXe=o("convbert"),mXe=o(" \u2014 "),uk=a("a"),fXe=o("ConvBertConfig"),gXe=o(" (ConvBERT model)"),hXe=l(),Pm=a("li"),joe=a("strong"),uXe=o("convnext"),pXe=o(" \u2014 "),pk=a("a"),_Xe=o("ConvNextConfig"),bXe=o(" (ConvNext model)"),vXe=l(),Bm=a("li"),Doe=a("strong"),FXe=o("ctrl"),TXe=o(" \u2014 "),_k=a("a"),MXe=o("CTRLConfig"),EXe=o(" (CTRL model)"),CXe=l(),Im=a("li"),Goe=a("strong"),wXe=o("cvt"),AXe=o(" \u2014 "),bk=a("a"),yXe=o("CvtConfig"),LXe=o(" (CvT model)"),xXe=l(),Nm=a("li"),Ooe=a("strong"),$Xe=o("data2vec-audio"),kXe=o(" \u2014 "),vk=a("a"),SXe=o("Data2VecAudioConfig"),RXe=o(" (Data2VecAudio model)"),PXe=l(),qm=a("li"),Voe=a("strong"),BXe=o("data2vec-text"),IXe=o(" \u2014 "),Fk=a("a"),NXe=o("Data2VecTextConfig"),qXe=o(" (Data2VecText model)"),jXe=l(),jm=a("li"),Xoe=a("strong"),DXe=o("data2vec-vision"),GXe=o(" \u2014 "),Tk=a("a"),OXe=o("Data2VecVisionConfig"),VXe=o(" (Data2VecVision model)"),XXe=l(),Dm=a("li"),zoe=a("strong"),zXe=o("deberta"),WXe=o(" \u2014 "),Mk=a("a"),QXe=o("DebertaConfig"),HXe=o(" (DeBERTa model)"),UXe=l(),Gm=a("li"),Woe=a("strong"),JXe=o("deberta-v2"),YXe=o(" \u2014 "),Ek=a("a"),KXe=o("DebertaV2Config"),ZXe=o(" (DeBERTa-v2 model)"),eze=l(),Om=a("li"),Qoe=a("strong"),oze=o("decision_transformer"),rze=o(" \u2014 "),Ck=a("a"),tze=o("DecisionTransformerConfig"),aze=o(" (Decision Transformer model)"),nze=l(),Vm=a("li"),Hoe=a("strong"),sze=o("deit"),lze=o(" \u2014 "),wk=a("a"),ize=o("DeiTConfig"),dze=o(" (DeiT model)"),cze=l(),Xm=a("li"),Uoe=a("strong"),mze=o("detr"),fze=o(" \u2014 "),Ak=a("a"),gze=o("DetrConfig"),hze=o(" (DETR model)"),uze=l(),zm=a("li"),Joe=a("strong"),pze=o("distilbert"),_ze=o(" \u2014 "),yk=a("a"),bze=o("DistilBertConfig"),vze=o(" (DistilBERT model)"),Fze=l(),Wm=a("li"),Yoe=a("strong"),Tze=o("dpr"),Mze=o(" \u2014 "),Lk=a("a"),Eze=o("DPRConfig"),Cze=o(" (DPR model)"),wze=l(),Qm=a("li"),Koe=a("strong"),Aze=o("dpt"),yze=o(" \u2014 "),xk=a("a"),Lze=o("DPTConfig"),xze=o(" (DPT model)"),$ze=l(),Hm=a("li"),Zoe=a("strong"),kze=o("electra"),Sze=o(" \u2014 "),$k=a("a"),Rze=o("ElectraConfig"),Pze=o(" (ELECTRA model)"),Bze=l(),Um=a("li"),ere=a("strong"),Ize=o("encoder-decoder"),Nze=o(" \u2014 "),kk=a("a"),qze=o("EncoderDecoderConfig"),jze=o(" (Encoder decoder model)"),Dze=l(),Jm=a("li"),ore=a("strong"),Gze=o("flaubert"),Oze=o(" \u2014 "),Sk=a("a"),Vze=o("FlaubertConfig"),Xze=o(" (FlauBERT model)"),zze=l(),Ym=a("li"),rre=a("strong"),Wze=o("flava"),Qze=o(" \u2014 "),Rk=a("a"),Hze=o("FlavaConfig"),Uze=o(" (Flava model)"),Jze=l(),Km=a("li"),tre=a("strong"),Yze=o("fnet"),Kze=o(" \u2014 "),Pk=a("a"),Zze=o("FNetConfig"),eWe=o(" (FNet model)"),oWe=l(),Zm=a("li"),are=a("strong"),rWe=o("fsmt"),tWe=o(" \u2014 "),Bk=a("a"),aWe=o("FSMTConfig"),nWe=o(" (FairSeq Machine-Translation model)"),sWe=l(),ef=a("li"),nre=a("strong"),lWe=o("funnel"),iWe=o(" \u2014 "),Ik=a("a"),dWe=o("FunnelConfig"),cWe=o(" (Funnel Transformer model)"),mWe=l(),of=a("li"),sre=a("strong"),fWe=o("glpn"),gWe=o(" \u2014 "),Nk=a("a"),hWe=o("GLPNConfig"),uWe=o(" (GLPN model)"),pWe=l(),rf=a("li"),lre=a("strong"),_We=o("gpt2"),bWe=o(" \u2014 "),qk=a("a"),vWe=o("GPT2Config"),FWe=o(" (OpenAI GPT-2 model)"),TWe=l(),tf=a("li"),ire=a("strong"),MWe=o("gpt_neo"),EWe=o(" \u2014 "),jk=a("a"),CWe=o("GPTNeoConfig"),wWe=o(" (GPT Neo model)"),AWe=l(),af=a("li"),dre=a("strong"),yWe=o("gpt_neox"),LWe=o(" \u2014 "),Dk=a("a"),xWe=o("GPTNeoXConfig"),$We=o(" (GPT NeoX model)"),kWe=l(),nf=a("li"),cre=a("strong"),SWe=o("gptj"),RWe=o(" \u2014 "),Gk=a("a"),PWe=o("GPTJConfig"),BWe=o(" (GPT-J model)"),IWe=l(),sf=a("li"),mre=a("strong"),NWe=o("hubert"),qWe=o(" \u2014 "),Ok=a("a"),jWe=o("HubertConfig"),DWe=o(" (Hubert model)"),GWe=l(),lf=a("li"),fre=a("strong"),OWe=o("ibert"),VWe=o(" \u2014 "),Vk=a("a"),XWe=o("IBertConfig"),zWe=o(" (I-BERT model)"),WWe=l(),df=a("li"),gre=a("strong"),QWe=o("imagegpt"),HWe=o(" \u2014 "),Xk=a("a"),UWe=o("ImageGPTConfig"),JWe=o(" (ImageGPT model)"),YWe=l(),cf=a("li"),hre=a("strong"),KWe=o("layoutlm"),ZWe=o(" \u2014 "),zk=a("a"),eQe=o("LayoutLMConfig"),oQe=o(" (LayoutLM model)"),rQe=l(),mf=a("li"),ure=a("strong"),tQe=o("layoutlmv2"),aQe=o(" \u2014 "),Wk=a("a"),nQe=o("LayoutLMv2Config"),sQe=o(" (LayoutLMv2 model)"),lQe=l(),ff=a("li"),pre=a("strong"),iQe=o("layoutlmv3"),dQe=o(" \u2014 "),Qk=a("a"),cQe=o("LayoutLMv3Config"),mQe=o(" (LayoutLMv3 model)"),fQe=l(),gf=a("li"),_re=a("strong"),gQe=o("led"),hQe=o(" \u2014 "),Hk=a("a"),uQe=o("LEDConfig"),pQe=o(" (LED model)"),_Qe=l(),hf=a("li"),bre=a("strong"),bQe=o("longformer"),vQe=o(" \u2014 "),Uk=a("a"),FQe=o("LongformerConfig"),TQe=o(" (Longformer model)"),MQe=l(),uf=a("li"),vre=a("strong"),EQe=o("luke"),CQe=o(" \u2014 "),Jk=a("a"),wQe=o("LukeConfig"),AQe=o(" (LUKE model)"),yQe=l(),pf=a("li"),Fre=a("strong"),LQe=o("lxmert"),xQe=o(" \u2014 "),Yk=a("a"),$Qe=o("LxmertConfig"),kQe=o(" (LXMERT model)"),SQe=l(),_f=a("li"),Tre=a("strong"),RQe=o("m2m_100"),PQe=o(" \u2014 "),Kk=a("a"),BQe=o("M2M100Config"),IQe=o(" (M2M100 model)"),NQe=l(),bf=a("li"),Mre=a("strong"),qQe=o("marian"),jQe=o(" \u2014 "),Zk=a("a"),DQe=o("MarianConfig"),GQe=o(" (Marian model)"),OQe=l(),vf=a("li"),Ere=a("strong"),VQe=o("maskformer"),XQe=o(" \u2014 "),eS=a("a"),zQe=o("MaskFormerConfig"),WQe=o(" (MaskFormer model)"),QQe=l(),Ff=a("li"),Cre=a("strong"),HQe=o("mbart"),UQe=o(" \u2014 "),oS=a("a"),JQe=o("MBartConfig"),YQe=o(" (mBART model)"),KQe=l(),Tf=a("li"),wre=a("strong"),ZQe=o("megatron-bert"),eHe=o(" \u2014 "),rS=a("a"),oHe=o("MegatronBertConfig"),rHe=o(" (MegatronBert model)"),tHe=l(),Mf=a("li"),Are=a("strong"),aHe=o("mobilebert"),nHe=o(" \u2014 "),tS=a("a"),sHe=o("MobileBertConfig"),lHe=o(" (MobileBERT model)"),iHe=l(),Ef=a("li"),yre=a("strong"),dHe=o("mpnet"),cHe=o(" \u2014 "),aS=a("a"),mHe=o("MPNetConfig"),fHe=o(" (MPNet model)"),gHe=l(),Cf=a("li"),Lre=a("strong"),hHe=o("mt5"),uHe=o(" \u2014 "),nS=a("a"),pHe=o("MT5Config"),_He=o(" (mT5 model)"),bHe=l(),wf=a("li"),xre=a("strong"),vHe=o("nystromformer"),FHe=o(" \u2014 "),sS=a("a"),THe=o("NystromformerConfig"),MHe=o(" (Nystromformer model)"),EHe=l(),Af=a("li"),$re=a("strong"),CHe=o("openai-gpt"),wHe=o(" \u2014 "),lS=a("a"),AHe=o("OpenAIGPTConfig"),yHe=o(" (OpenAI GPT model)"),LHe=l(),yf=a("li"),kre=a("strong"),xHe=o("opt"),$He=o(" \u2014 "),iS=a("a"),kHe=o("OPTConfig"),SHe=o(" (OPT model)"),RHe=l(),Lf=a("li"),Sre=a("strong"),PHe=o("pegasus"),BHe=o(" \u2014 "),dS=a("a"),IHe=o("PegasusConfig"),NHe=o(" (Pegasus model)"),qHe=l(),xf=a("li"),Rre=a("strong"),jHe=o("perceiver"),DHe=o(" \u2014 "),cS=a("a"),GHe=o("PerceiverConfig"),OHe=o(" (Perceiver model)"),VHe=l(),$f=a("li"),Pre=a("strong"),XHe=o("plbart"),zHe=o(" \u2014 "),mS=a("a"),WHe=o("PLBartConfig"),QHe=o(" (PLBart model)"),HHe=l(),kf=a("li"),Bre=a("strong"),UHe=o("poolformer"),JHe=o(" \u2014 "),fS=a("a"),YHe=o("PoolFormerConfig"),KHe=o(" (PoolFormer model)"),ZHe=l(),Sf=a("li"),Ire=a("strong"),eUe=o("prophetnet"),oUe=o(" \u2014 "),gS=a("a"),rUe=o("ProphetNetConfig"),tUe=o(" (ProphetNet model)"),aUe=l(),Rf=a("li"),Nre=a("strong"),nUe=o("qdqbert"),sUe=o(" \u2014 "),hS=a("a"),lUe=o("QDQBertConfig"),iUe=o(" (QDQBert model)"),dUe=l(),Pf=a("li"),qre=a("strong"),cUe=o("rag"),mUe=o(" \u2014 "),uS=a("a"),fUe=o("RagConfig"),gUe=o(" (RAG model)"),hUe=l(),Bf=a("li"),jre=a("strong"),uUe=o("realm"),pUe=o(" \u2014 "),pS=a("a"),_Ue=o("RealmConfig"),bUe=o(" (Realm model)"),vUe=l(),If=a("li"),Dre=a("strong"),FUe=o("reformer"),TUe=o(" \u2014 "),_S=a("a"),MUe=o("ReformerConfig"),EUe=o(" (Reformer model)"),CUe=l(),Nf=a("li"),Gre=a("strong"),wUe=o("regnet"),AUe=o(" \u2014 "),bS=a("a"),yUe=o("RegNetConfig"),LUe=o(" (RegNet model)"),xUe=l(),qf=a("li"),Ore=a("strong"),$Ue=o("rembert"),kUe=o(" \u2014 "),vS=a("a"),SUe=o("RemBertConfig"),RUe=o(" (RemBERT model)"),PUe=l(),jf=a("li"),Vre=a("strong"),BUe=o("resnet"),IUe=o(" \u2014 "),FS=a("a"),NUe=o("ResNetConfig"),qUe=o(" (ResNet model)"),jUe=l(),Df=a("li"),Xre=a("strong"),DUe=o("retribert"),GUe=o(" \u2014 "),TS=a("a"),OUe=o("RetriBertConfig"),VUe=o(" (RetriBERT model)"),XUe=l(),Gf=a("li"),zre=a("strong"),zUe=o("roberta"),WUe=o(" \u2014 "),MS=a("a"),QUe=o("RobertaConfig"),HUe=o(" (RoBERTa model)"),UUe=l(),Of=a("li"),Wre=a("strong"),JUe=o("roformer"),YUe=o(" \u2014 "),ES=a("a"),KUe=o("RoFormerConfig"),ZUe=o(" (RoFormer model)"),eJe=l(),Vf=a("li"),Qre=a("strong"),oJe=o("segformer"),rJe=o(" \u2014 "),CS=a("a"),tJe=o("SegformerConfig"),aJe=o(" (SegFormer model)"),nJe=l(),Xf=a("li"),Hre=a("strong"),sJe=o("sew"),lJe=o(" \u2014 "),wS=a("a"),iJe=o("SEWConfig"),dJe=o(" (SEW model)"),cJe=l(),zf=a("li"),Ure=a("strong"),mJe=o("sew-d"),fJe=o(" \u2014 "),AS=a("a"),gJe=o("SEWDConfig"),hJe=o(" (SEW-D model)"),uJe=l(),Wf=a("li"),Jre=a("strong"),pJe=o("speech-encoder-decoder"),_Je=o(" \u2014 "),yS=a("a"),bJe=o("SpeechEncoderDecoderConfig"),vJe=o(" (Speech Encoder decoder model)"),FJe=l(),Qf=a("li"),Yre=a("strong"),TJe=o("speech_to_text"),MJe=o(" \u2014 "),LS=a("a"),EJe=o("Speech2TextConfig"),CJe=o(" (Speech2Text model)"),wJe=l(),Hf=a("li"),Kre=a("strong"),AJe=o("speech_to_text_2"),yJe=o(" \u2014 "),xS=a("a"),LJe=o("Speech2Text2Config"),xJe=o(" (Speech2Text2 model)"),$Je=l(),Uf=a("li"),Zre=a("strong"),kJe=o("splinter"),SJe=o(" \u2014 "),$S=a("a"),RJe=o("SplinterConfig"),PJe=o(" (Splinter model)"),BJe=l(),Jf=a("li"),ete=a("strong"),IJe=o("squeezebert"),NJe=o(" \u2014 "),kS=a("a"),qJe=o("SqueezeBertConfig"),jJe=o(" (SqueezeBERT model)"),DJe=l(),Yf=a("li"),ote=a("strong"),GJe=o("swin"),OJe=o(" \u2014 "),SS=a("a"),VJe=o("SwinConfig"),XJe=o(" (Swin model)"),zJe=l(),Kf=a("li"),rte=a("strong"),WJe=o("t5"),QJe=o(" \u2014 "),RS=a("a"),HJe=o("T5Config"),UJe=o(" (T5 model)"),JJe=l(),Zf=a("li"),tte=a("strong"),YJe=o("tapas"),KJe=o(" \u2014 "),PS=a("a"),ZJe=o("TapasConfig"),eYe=o(" (TAPAS model)"),oYe=l(),eg=a("li"),ate=a("strong"),rYe=o("trajectory_transformer"),tYe=o(" \u2014 "),BS=a("a"),aYe=o("TrajectoryTransformerConfig"),nYe=o(" (Trajectory Transformer model)"),sYe=l(),og=a("li"),nte=a("strong"),lYe=o("transfo-xl"),iYe=o(" \u2014 "),IS=a("a"),dYe=o("TransfoXLConfig"),cYe=o(" (Transformer-XL model)"),mYe=l(),rg=a("li"),ste=a("strong"),fYe=o("trocr"),gYe=o(" \u2014 "),NS=a("a"),hYe=o("TrOCRConfig"),uYe=o(" (TrOCR model)"),pYe=l(),tg=a("li"),lte=a("strong"),_Ye=o("unispeech"),bYe=o(" \u2014 "),qS=a("a"),vYe=o("UniSpeechConfig"),FYe=o(" (UniSpeech model)"),TYe=l(),ag=a("li"),ite=a("strong"),MYe=o("unispeech-sat"),EYe=o(" \u2014 "),jS=a("a"),CYe=o("UniSpeechSatConfig"),wYe=o(" (UniSpeechSat model)"),AYe=l(),ng=a("li"),dte=a("strong"),yYe=o("van"),LYe=o(" \u2014 "),DS=a("a"),xYe=o("VanConfig"),$Ye=o(" (VAN model)"),kYe=l(),sg=a("li"),cte=a("strong"),SYe=o("vilt"),RYe=o(" \u2014 "),GS=a("a"),PYe=o("ViltConfig"),BYe=o(" (ViLT model)"),IYe=l(),lg=a("li"),mte=a("strong"),NYe=o("vision-encoder-decoder"),qYe=o(" \u2014 "),OS=a("a"),jYe=o("VisionEncoderDecoderConfig"),DYe=o(" (Vision Encoder decoder model)"),GYe=l(),ig=a("li"),fte=a("strong"),OYe=o("vision-text-dual-encoder"),VYe=o(" \u2014 "),VS=a("a"),XYe=o("VisionTextDualEncoderConfig"),zYe=o(" (VisionTextDualEncoder model)"),WYe=l(),dg=a("li"),gte=a("strong"),QYe=o("visual_bert"),HYe=o(" \u2014 "),XS=a("a"),UYe=o("VisualBertConfig"),JYe=o(" (VisualBert model)"),YYe=l(),cg=a("li"),hte=a("strong"),KYe=o("vit"),ZYe=o(" \u2014 "),zS=a("a"),eKe=o("ViTConfig"),oKe=o(" (ViT model)"),rKe=l(),mg=a("li"),ute=a("strong"),tKe=o("vit_mae"),aKe=o(" \u2014 "),WS=a("a"),nKe=o("ViTMAEConfig"),sKe=o(" (ViTMAE model)"),lKe=l(),fg=a("li"),pte=a("strong"),iKe=o("wav2vec2"),dKe=o(" \u2014 "),QS=a("a"),cKe=o("Wav2Vec2Config"),mKe=o(" (Wav2Vec2 model)"),fKe=l(),gg=a("li"),_te=a("strong"),gKe=o("wav2vec2-conformer"),hKe=o(" \u2014 "),HS=a("a"),uKe=o("Wav2Vec2ConformerConfig"),pKe=o(" (Wav2Vec2-Conformer model)"),_Ke=l(),hg=a("li"),bte=a("strong"),bKe=o("wavlm"),vKe=o(" \u2014 "),US=a("a"),FKe=o("WavLMConfig"),TKe=o(" (WavLM model)"),MKe=l(),ug=a("li"),vte=a("strong"),EKe=o("xglm"),CKe=o(" \u2014 "),JS=a("a"),wKe=o("XGLMConfig"),AKe=o(" (XGLM model)"),yKe=l(),pg=a("li"),Fte=a("strong"),LKe=o("xlm"),xKe=o(" \u2014 "),YS=a("a"),$Ke=o("XLMConfig"),kKe=o(" (XLM model)"),SKe=l(),_g=a("li"),Tte=a("strong"),RKe=o("xlm-prophetnet"),PKe=o(" \u2014 "),KS=a("a"),BKe=o("XLMProphetNetConfig"),IKe=o(" (XLMProphetNet model)"),NKe=l(),bg=a("li"),Mte=a("strong"),qKe=o("xlm-roberta"),jKe=o(" \u2014 "),ZS=a("a"),DKe=o("XLMRobertaConfig"),GKe=o(" (XLM-RoBERTa model)"),OKe=l(),vg=a("li"),Ete=a("strong"),VKe=o("xlm-roberta-xl"),XKe=o(" \u2014 "),eR=a("a"),zKe=o("XLMRobertaXLConfig"),WKe=o(" (XLM-RoBERTa-XL model)"),QKe=l(),Fg=a("li"),Cte=a("strong"),HKe=o("xlnet"),UKe=o(" \u2014 "),oR=a("a"),JKe=o("XLNetConfig"),YKe=o(" (XLNet model)"),KKe=l(),Tg=a("li"),wte=a("strong"),ZKe=o("yolos"),eZe=o(" \u2014 "),rR=a("a"),oZe=o("YolosConfig"),rZe=o(" (YOLOS model)"),tZe=l(),Mg=a("li"),Ate=a("strong"),aZe=o("yoso"),nZe=o(" \u2014 "),tR=a("a"),sZe=o("YosoConfig"),lZe=o(" (YOSO model)"),iZe=l(),F(Eg.$$.fragment),dZe=l(),Cg=a("div"),F(jy.$$.fragment),cZe=l(),yte=a("p"),mZe=o("Register a new configuration for this class."),wqe=l(),Ti=a("h2"),wg=a("a"),Lte=a("span"),F(Dy.$$.fragment),fZe=l(),xte=a("span"),gZe=o("AutoTokenizer"),Aqe=l(),wo=a("div"),F(Gy.$$.fragment),hZe=l(),Oy=a("p"),uZe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),aR=a("a"),pZe=o("AutoTokenizer.from_pretrained()"),_Ze=o(" class method."),bZe=l(),Vy=a("p"),vZe=o("This class cannot be instantiated directly using "),$te=a("code"),FZe=o("__init__()"),TZe=o(" (throws an error)."),MZe=l(),Cr=a("div"),F(Xy.$$.fragment),EZe=l(),kte=a("p"),CZe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),wZe=l(),Aa=a("p"),AZe=o("The tokenizer class to instantiate is selected based on the "),Ste=a("code"),yZe=o("model_type"),LZe=o(` property of the config object (either
passed as an argument or loaded from `),Rte=a("code"),xZe=o("pretrained_model_name_or_path"),$Ze=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pte=a("code"),kZe=o("pretrained_model_name_or_path"),SZe=o(":"),RZe=l(),k=a("ul"),Sn=a("li"),Bte=a("strong"),PZe=o("albert"),BZe=o(" \u2014 "),nR=a("a"),IZe=o("AlbertTokenizer"),NZe=o(" or "),sR=a("a"),qZe=o("AlbertTokenizerFast"),jZe=o(" (ALBERT model)"),DZe=l(),Rn=a("li"),Ite=a("strong"),GZe=o("bart"),OZe=o(" \u2014 "),lR=a("a"),VZe=o("BartTokenizer"),XZe=o(" or "),iR=a("a"),zZe=o("BartTokenizerFast"),WZe=o(" (BART model)"),QZe=l(),Pn=a("li"),Nte=a("strong"),HZe=o("barthez"),UZe=o(" \u2014 "),dR=a("a"),JZe=o("BarthezTokenizer"),YZe=o(" or "),cR=a("a"),KZe=o("BarthezTokenizerFast"),ZZe=o(" (BARThez model)"),eeo=l(),Ag=a("li"),qte=a("strong"),oeo=o("bartpho"),reo=o(" \u2014 "),mR=a("a"),teo=o("BartphoTokenizer"),aeo=o(" (BARTpho model)"),neo=l(),Bn=a("li"),jte=a("strong"),seo=o("bert"),leo=o(" \u2014 "),fR=a("a"),ieo=o("BertTokenizer"),deo=o(" or "),gR=a("a"),ceo=o("BertTokenizerFast"),meo=o(" (BERT model)"),feo=l(),yg=a("li"),Dte=a("strong"),geo=o("bert-generation"),heo=o(" \u2014 "),hR=a("a"),ueo=o("BertGenerationTokenizer"),peo=o(" (Bert Generation model)"),_eo=l(),Lg=a("li"),Gte=a("strong"),beo=o("bert-japanese"),veo=o(" \u2014 "),uR=a("a"),Feo=o("BertJapaneseTokenizer"),Teo=o(" (BertJapanese model)"),Meo=l(),xg=a("li"),Ote=a("strong"),Eeo=o("bertweet"),Ceo=o(" \u2014 "),pR=a("a"),weo=o("BertweetTokenizer"),Aeo=o(" (Bertweet model)"),yeo=l(),In=a("li"),Vte=a("strong"),Leo=o("big_bird"),xeo=o(" \u2014 "),_R=a("a"),$eo=o("BigBirdTokenizer"),keo=o(" or "),bR=a("a"),Seo=o("BigBirdTokenizerFast"),Reo=o(" (BigBird model)"),Peo=l(),Nn=a("li"),Xte=a("strong"),Beo=o("bigbird_pegasus"),Ieo=o(" \u2014 "),vR=a("a"),Neo=o("PegasusTokenizer"),qeo=o(" or "),FR=a("a"),jeo=o("PegasusTokenizerFast"),Deo=o(" (BigBirdPegasus model)"),Geo=l(),qn=a("li"),zte=a("strong"),Oeo=o("blenderbot"),Veo=o(" \u2014 "),TR=a("a"),Xeo=o("BlenderbotTokenizer"),zeo=o(" or "),MR=a("a"),Weo=o("BlenderbotTokenizerFast"),Qeo=o(" (Blenderbot model)"),Heo=l(),$g=a("li"),Wte=a("strong"),Ueo=o("blenderbot-small"),Jeo=o(" \u2014 "),ER=a("a"),Yeo=o("BlenderbotSmallTokenizer"),Keo=o(" (BlenderbotSmall model)"),Zeo=l(),kg=a("li"),Qte=a("strong"),eoo=o("byt5"),ooo=o(" \u2014 "),CR=a("a"),roo=o("ByT5Tokenizer"),too=o(" (ByT5 model)"),aoo=l(),jn=a("li"),Hte=a("strong"),noo=o("camembert"),soo=o(" \u2014 "),wR=a("a"),loo=o("CamembertTokenizer"),ioo=o(" or "),AR=a("a"),doo=o("CamembertTokenizerFast"),coo=o(" (CamemBERT model)"),moo=l(),Sg=a("li"),Ute=a("strong"),foo=o("canine"),goo=o(" \u2014 "),yR=a("a"),hoo=o("CanineTokenizer"),uoo=o(" (Canine model)"),poo=l(),Dn=a("li"),Jte=a("strong"),_oo=o("clip"),boo=o(" \u2014 "),LR=a("a"),voo=o("CLIPTokenizer"),Foo=o(" or "),xR=a("a"),Too=o("CLIPTokenizerFast"),Moo=o(" (CLIP model)"),Eoo=l(),Gn=a("li"),Yte=a("strong"),Coo=o("convbert"),woo=o(" \u2014 "),$R=a("a"),Aoo=o("ConvBertTokenizer"),yoo=o(" or "),kR=a("a"),Loo=o("ConvBertTokenizerFast"),xoo=o(" (ConvBERT model)"),$oo=l(),On=a("li"),Kte=a("strong"),koo=o("cpm"),Soo=o(" \u2014 "),SR=a("a"),Roo=o("CpmTokenizer"),Poo=o(" or "),RR=a("a"),Boo=o("CpmTokenizerFast"),Ioo=o(" (CPM model)"),Noo=l(),Rg=a("li"),Zte=a("strong"),qoo=o("ctrl"),joo=o(" \u2014 "),PR=a("a"),Doo=o("CTRLTokenizer"),Goo=o(" (CTRL model)"),Ooo=l(),Vn=a("li"),eae=a("strong"),Voo=o("data2vec-text"),Xoo=o(" \u2014 "),BR=a("a"),zoo=o("RobertaTokenizer"),Woo=o(" or "),IR=a("a"),Qoo=o("RobertaTokenizerFast"),Hoo=o(" (Data2VecText model)"),Uoo=l(),Xn=a("li"),oae=a("strong"),Joo=o("deberta"),Yoo=o(" \u2014 "),NR=a("a"),Koo=o("DebertaTokenizer"),Zoo=o(" or "),qR=a("a"),ero=o("DebertaTokenizerFast"),oro=o(" (DeBERTa model)"),rro=l(),zn=a("li"),rae=a("strong"),tro=o("deberta-v2"),aro=o(" \u2014 "),jR=a("a"),nro=o("DebertaV2Tokenizer"),sro=o(" or "),DR=a("a"),lro=o("DebertaV2TokenizerFast"),iro=o(" (DeBERTa-v2 model)"),dro=l(),Wn=a("li"),tae=a("strong"),cro=o("distilbert"),mro=o(" \u2014 "),GR=a("a"),fro=o("DistilBertTokenizer"),gro=o(" or "),OR=a("a"),hro=o("DistilBertTokenizerFast"),uro=o(" (DistilBERT model)"),pro=l(),Qn=a("li"),aae=a("strong"),_ro=o("dpr"),bro=o(" \u2014 "),VR=a("a"),vro=o("DPRQuestionEncoderTokenizer"),Fro=o(" or "),XR=a("a"),Tro=o("DPRQuestionEncoderTokenizerFast"),Mro=o(" (DPR model)"),Ero=l(),Hn=a("li"),nae=a("strong"),Cro=o("electra"),wro=o(" \u2014 "),zR=a("a"),Aro=o("ElectraTokenizer"),yro=o(" or "),WR=a("a"),Lro=o("ElectraTokenizerFast"),xro=o(" (ELECTRA model)"),$ro=l(),Pg=a("li"),sae=a("strong"),kro=o("flaubert"),Sro=o(" \u2014 "),QR=a("a"),Rro=o("FlaubertTokenizer"),Pro=o(" (FlauBERT model)"),Bro=l(),Un=a("li"),lae=a("strong"),Iro=o("fnet"),Nro=o(" \u2014 "),HR=a("a"),qro=o("FNetTokenizer"),jro=o(" or "),UR=a("a"),Dro=o("FNetTokenizerFast"),Gro=o(" (FNet model)"),Oro=l(),Bg=a("li"),iae=a("strong"),Vro=o("fsmt"),Xro=o(" \u2014 "),JR=a("a"),zro=o("FSMTTokenizer"),Wro=o(" (FairSeq Machine-Translation model)"),Qro=l(),Jn=a("li"),dae=a("strong"),Hro=o("funnel"),Uro=o(" \u2014 "),YR=a("a"),Jro=o("FunnelTokenizer"),Yro=o(" or "),KR=a("a"),Kro=o("FunnelTokenizerFast"),Zro=o(" (Funnel Transformer model)"),eto=l(),Yn=a("li"),cae=a("strong"),oto=o("gpt2"),rto=o(" \u2014 "),ZR=a("a"),tto=o("GPT2Tokenizer"),ato=o(" or "),eP=a("a"),nto=o("GPT2TokenizerFast"),sto=o(" (OpenAI GPT-2 model)"),lto=l(),Kn=a("li"),mae=a("strong"),ito=o("gpt_neo"),dto=o(" \u2014 "),oP=a("a"),cto=o("GPT2Tokenizer"),mto=o(" or "),rP=a("a"),fto=o("GPT2TokenizerFast"),gto=o(" (GPT Neo model)"),hto=l(),Ig=a("li"),fae=a("strong"),uto=o("gpt_neox"),pto=o(" \u2014 "),tP=a("a"),_to=o("GPTNeoXTokenizerFast"),bto=o(" (GPT NeoX model)"),vto=l(),Zn=a("li"),gae=a("strong"),Fto=o("gptj"),Tto=o(" \u2014 "),aP=a("a"),Mto=o("GPT2Tokenizer"),Eto=o(" or "),nP=a("a"),Cto=o("GPT2TokenizerFast"),wto=o(" (GPT-J model)"),Ato=l(),es=a("li"),hae=a("strong"),yto=o("herbert"),Lto=o(" \u2014 "),sP=a("a"),xto=o("HerbertTokenizer"),$to=o(" or "),lP=a("a"),kto=o("HerbertTokenizerFast"),Sto=o(" (HerBERT model)"),Rto=l(),Ng=a("li"),uae=a("strong"),Pto=o("hubert"),Bto=o(" \u2014 "),iP=a("a"),Ito=o("Wav2Vec2CTCTokenizer"),Nto=o(" (Hubert model)"),qto=l(),os=a("li"),pae=a("strong"),jto=o("ibert"),Dto=o(" \u2014 "),dP=a("a"),Gto=o("RobertaTokenizer"),Oto=o(" or "),cP=a("a"),Vto=o("RobertaTokenizerFast"),Xto=o(" (I-BERT model)"),zto=l(),rs=a("li"),_ae=a("strong"),Wto=o("layoutlm"),Qto=o(" \u2014 "),mP=a("a"),Hto=o("LayoutLMTokenizer"),Uto=o(" or "),fP=a("a"),Jto=o("LayoutLMTokenizerFast"),Yto=o(" (LayoutLM model)"),Kto=l(),ts=a("li"),bae=a("strong"),Zto=o("layoutlmv2"),eao=o(" \u2014 "),gP=a("a"),oao=o("LayoutLMv2Tokenizer"),rao=o(" or "),hP=a("a"),tao=o("LayoutLMv2TokenizerFast"),aao=o(" (LayoutLMv2 model)"),nao=l(),as=a("li"),vae=a("strong"),sao=o("layoutlmv3"),lao=o(" \u2014 "),uP=a("a"),iao=o("LayoutLMv3Tokenizer"),dao=o(" or "),pP=a("a"),cao=o("LayoutLMv3TokenizerFast"),mao=o(" (LayoutLMv3 model)"),fao=l(),ns=a("li"),Fae=a("strong"),gao=o("layoutxlm"),hao=o(" \u2014 "),_P=a("a"),uao=o("LayoutXLMTokenizer"),pao=o(" or "),bP=a("a"),_ao=o("LayoutXLMTokenizerFast"),bao=o(" (LayoutXLM model)"),vao=l(),ss=a("li"),Tae=a("strong"),Fao=o("led"),Tao=o(" \u2014 "),vP=a("a"),Mao=o("LEDTokenizer"),Eao=o(" or "),FP=a("a"),Cao=o("LEDTokenizerFast"),wao=o(" (LED model)"),Aao=l(),ls=a("li"),Mae=a("strong"),yao=o("longformer"),Lao=o(" \u2014 "),TP=a("a"),xao=o("LongformerTokenizer"),$ao=o(" or "),MP=a("a"),kao=o("LongformerTokenizerFast"),Sao=o(" (Longformer model)"),Rao=l(),qg=a("li"),Eae=a("strong"),Pao=o("luke"),Bao=o(" \u2014 "),EP=a("a"),Iao=o("LukeTokenizer"),Nao=o(" (LUKE model)"),qao=l(),is=a("li"),Cae=a("strong"),jao=o("lxmert"),Dao=o(" \u2014 "),CP=a("a"),Gao=o("LxmertTokenizer"),Oao=o(" or "),wP=a("a"),Vao=o("LxmertTokenizerFast"),Xao=o(" (LXMERT model)"),zao=l(),jg=a("li"),wae=a("strong"),Wao=o("m2m_100"),Qao=o(" \u2014 "),AP=a("a"),Hao=o("M2M100Tokenizer"),Uao=o(" (M2M100 model)"),Jao=l(),Dg=a("li"),Aae=a("strong"),Yao=o("marian"),Kao=o(" \u2014 "),yP=a("a"),Zao=o("MarianTokenizer"),eno=o(" (Marian model)"),ono=l(),ds=a("li"),yae=a("strong"),rno=o("mbart"),tno=o(" \u2014 "),LP=a("a"),ano=o("MBartTokenizer"),nno=o(" or "),xP=a("a"),sno=o("MBartTokenizerFast"),lno=o(" (mBART model)"),ino=l(),cs=a("li"),Lae=a("strong"),dno=o("mbart50"),cno=o(" \u2014 "),$P=a("a"),mno=o("MBart50Tokenizer"),fno=o(" or "),kP=a("a"),gno=o("MBart50TokenizerFast"),hno=o(" (mBART-50 model)"),uno=l(),ms=a("li"),xae=a("strong"),pno=o("megatron-bert"),_no=o(" \u2014 "),SP=a("a"),bno=o("BertTokenizer"),vno=o(" or "),RP=a("a"),Fno=o("BertTokenizerFast"),Tno=o(" (MegatronBert model)"),Mno=l(),Gg=a("li"),$ae=a("strong"),Eno=o("mluke"),Cno=o(" \u2014 "),PP=a("a"),wno=o("MLukeTokenizer"),Ano=o(" (mLUKE model)"),yno=l(),fs=a("li"),kae=a("strong"),Lno=o("mobilebert"),xno=o(" \u2014 "),BP=a("a"),$no=o("MobileBertTokenizer"),kno=o(" or "),IP=a("a"),Sno=o("MobileBertTokenizerFast"),Rno=o(" (MobileBERT model)"),Pno=l(),gs=a("li"),Sae=a("strong"),Bno=o("mpnet"),Ino=o(" \u2014 "),NP=a("a"),Nno=o("MPNetTokenizer"),qno=o(" or "),qP=a("a"),jno=o("MPNetTokenizerFast"),Dno=o(" (MPNet model)"),Gno=l(),hs=a("li"),Rae=a("strong"),Ono=o("mt5"),Vno=o(" \u2014 "),jP=a("a"),Xno=o("MT5Tokenizer"),zno=o(" or "),DP=a("a"),Wno=o("MT5TokenizerFast"),Qno=o(" (mT5 model)"),Hno=l(),us=a("li"),Pae=a("strong"),Uno=o("nystromformer"),Jno=o(" \u2014 "),GP=a("a"),Yno=o("AlbertTokenizer"),Kno=o(" or "),OP=a("a"),Zno=o("AlbertTokenizerFast"),eso=o(" (Nystromformer model)"),oso=l(),ps=a("li"),Bae=a("strong"),rso=o("openai-gpt"),tso=o(" \u2014 "),VP=a("a"),aso=o("OpenAIGPTTokenizer"),nso=o(" or "),XP=a("a"),sso=o("OpenAIGPTTokenizerFast"),lso=o(" (OpenAI GPT model)"),iso=l(),Og=a("li"),Iae=a("strong"),dso=o("opt"),cso=o(" \u2014 "),zP=a("a"),mso=o("GPT2Tokenizer"),fso=o(" (OPT model)"),gso=l(),_s=a("li"),Nae=a("strong"),hso=o("pegasus"),uso=o(" \u2014 "),WP=a("a"),pso=o("PegasusTokenizer"),_so=o(" or "),QP=a("a"),bso=o("PegasusTokenizerFast"),vso=o(" (Pegasus model)"),Fso=l(),Vg=a("li"),qae=a("strong"),Tso=o("perceiver"),Mso=o(" \u2014 "),HP=a("a"),Eso=o("PerceiverTokenizer"),Cso=o(" (Perceiver model)"),wso=l(),Xg=a("li"),jae=a("strong"),Aso=o("phobert"),yso=o(" \u2014 "),UP=a("a"),Lso=o("PhobertTokenizer"),xso=o(" (PhoBERT model)"),$so=l(),zg=a("li"),Dae=a("strong"),kso=o("plbart"),Sso=o(" \u2014 "),JP=a("a"),Rso=o("PLBartTokenizer"),Pso=o(" (PLBart model)"),Bso=l(),Wg=a("li"),Gae=a("strong"),Iso=o("prophetnet"),Nso=o(" \u2014 "),YP=a("a"),qso=o("ProphetNetTokenizer"),jso=o(" (ProphetNet model)"),Dso=l(),bs=a("li"),Oae=a("strong"),Gso=o("qdqbert"),Oso=o(" \u2014 "),KP=a("a"),Vso=o("BertTokenizer"),Xso=o(" or "),ZP=a("a"),zso=o("BertTokenizerFast"),Wso=o(" (QDQBert model)"),Qso=l(),Qg=a("li"),Vae=a("strong"),Hso=o("rag"),Uso=o(" \u2014 "),eB=a("a"),Jso=o("RagTokenizer"),Yso=o(" (RAG model)"),Kso=l(),vs=a("li"),Xae=a("strong"),Zso=o("realm"),elo=o(" \u2014 "),oB=a("a"),olo=o("RealmTokenizer"),rlo=o(" or "),rB=a("a"),tlo=o("RealmTokenizerFast"),alo=o(" (Realm model)"),nlo=l(),Fs=a("li"),zae=a("strong"),slo=o("reformer"),llo=o(" \u2014 "),tB=a("a"),ilo=o("ReformerTokenizer"),dlo=o(" or "),aB=a("a"),clo=o("ReformerTokenizerFast"),mlo=o(" (Reformer model)"),flo=l(),Ts=a("li"),Wae=a("strong"),glo=o("rembert"),hlo=o(" \u2014 "),nB=a("a"),ulo=o("RemBertTokenizer"),plo=o(" or "),sB=a("a"),_lo=o("RemBertTokenizerFast"),blo=o(" (RemBERT model)"),vlo=l(),Ms=a("li"),Qae=a("strong"),Flo=o("retribert"),Tlo=o(" \u2014 "),lB=a("a"),Mlo=o("RetriBertTokenizer"),Elo=o(" or "),iB=a("a"),Clo=o("RetriBertTokenizerFast"),wlo=o(" (RetriBERT model)"),Alo=l(),Es=a("li"),Hae=a("strong"),ylo=o("roberta"),Llo=o(" \u2014 "),dB=a("a"),xlo=o("RobertaTokenizer"),$lo=o(" or "),cB=a("a"),klo=o("RobertaTokenizerFast"),Slo=o(" (RoBERTa model)"),Rlo=l(),Cs=a("li"),Uae=a("strong"),Plo=o("roformer"),Blo=o(" \u2014 "),mB=a("a"),Ilo=o("RoFormerTokenizer"),Nlo=o(" or "),fB=a("a"),qlo=o("RoFormerTokenizerFast"),jlo=o(" (RoFormer model)"),Dlo=l(),Hg=a("li"),Jae=a("strong"),Glo=o("speech_to_text"),Olo=o(" \u2014 "),gB=a("a"),Vlo=o("Speech2TextTokenizer"),Xlo=o(" (Speech2Text model)"),zlo=l(),Ug=a("li"),Yae=a("strong"),Wlo=o("speech_to_text_2"),Qlo=o(" \u2014 "),hB=a("a"),Hlo=o("Speech2Text2Tokenizer"),Ulo=o(" (Speech2Text2 model)"),Jlo=l(),ws=a("li"),Kae=a("strong"),Ylo=o("splinter"),Klo=o(" \u2014 "),uB=a("a"),Zlo=o("SplinterTokenizer"),eio=o(" or "),pB=a("a"),oio=o("SplinterTokenizerFast"),rio=o(" (Splinter model)"),tio=l(),As=a("li"),Zae=a("strong"),aio=o("squeezebert"),nio=o(" \u2014 "),_B=a("a"),sio=o("SqueezeBertTokenizer"),lio=o(" or "),bB=a("a"),iio=o("SqueezeBertTokenizerFast"),dio=o(" (SqueezeBERT model)"),cio=l(),ys=a("li"),ene=a("strong"),mio=o("t5"),fio=o(" \u2014 "),vB=a("a"),gio=o("T5Tokenizer"),hio=o(" or "),FB=a("a"),uio=o("T5TokenizerFast"),pio=o(" (T5 model)"),_io=l(),Jg=a("li"),one=a("strong"),bio=o("tapas"),vio=o(" \u2014 "),TB=a("a"),Fio=o("TapasTokenizer"),Tio=o(" (TAPAS model)"),Mio=l(),Yg=a("li"),rne=a("strong"),Eio=o("tapex"),Cio=o(" \u2014 "),MB=a("a"),wio=o("TapexTokenizer"),Aio=o(" (TAPEX model)"),yio=l(),Kg=a("li"),tne=a("strong"),Lio=o("transfo-xl"),xio=o(" \u2014 "),EB=a("a"),$io=o("TransfoXLTokenizer"),kio=o(" (Transformer-XL model)"),Sio=l(),Ls=a("li"),ane=a("strong"),Rio=o("visual_bert"),Pio=o(" \u2014 "),CB=a("a"),Bio=o("BertTokenizer"),Iio=o(" or "),wB=a("a"),Nio=o("BertTokenizerFast"),qio=o(" (VisualBert model)"),jio=l(),Zg=a("li"),nne=a("strong"),Dio=o("wav2vec2"),Gio=o(" \u2014 "),AB=a("a"),Oio=o("Wav2Vec2CTCTokenizer"),Vio=o(" (Wav2Vec2 model)"),Xio=l(),eh=a("li"),sne=a("strong"),zio=o("wav2vec2-conformer"),Wio=o(" \u2014 "),yB=a("a"),Qio=o("Wav2Vec2CTCTokenizer"),Hio=o(" (Wav2Vec2-Conformer model)"),Uio=l(),oh=a("li"),lne=a("strong"),Jio=o("wav2vec2_phoneme"),Yio=o(" \u2014 "),LB=a("a"),Kio=o("Wav2Vec2PhonemeCTCTokenizer"),Zio=o(" (Wav2Vec2Phoneme model)"),edo=l(),xs=a("li"),ine=a("strong"),odo=o("xglm"),rdo=o(" \u2014 "),xB=a("a"),tdo=o("XGLMTokenizer"),ado=o(" or "),$B=a("a"),ndo=o("XGLMTokenizerFast"),sdo=o(" (XGLM model)"),ldo=l(),rh=a("li"),dne=a("strong"),ido=o("xlm"),ddo=o(" \u2014 "),kB=a("a"),cdo=o("XLMTokenizer"),mdo=o(" (XLM model)"),fdo=l(),th=a("li"),cne=a("strong"),gdo=o("xlm-prophetnet"),hdo=o(" \u2014 "),SB=a("a"),udo=o("XLMProphetNetTokenizer"),pdo=o(" (XLMProphetNet model)"),_do=l(),$s=a("li"),mne=a("strong"),bdo=o("xlm-roberta"),vdo=o(" \u2014 "),RB=a("a"),Fdo=o("XLMRobertaTokenizer"),Tdo=o(" or "),PB=a("a"),Mdo=o("XLMRobertaTokenizerFast"),Edo=o(" (XLM-RoBERTa model)"),Cdo=l(),ks=a("li"),fne=a("strong"),wdo=o("xlm-roberta-xl"),Ado=o(" \u2014 "),BB=a("a"),ydo=o("RobertaTokenizer"),Ldo=o(" or "),IB=a("a"),xdo=o("RobertaTokenizerFast"),$do=o(" (XLM-RoBERTa-XL model)"),kdo=l(),Ss=a("li"),gne=a("strong"),Sdo=o("xlnet"),Rdo=o(" \u2014 "),NB=a("a"),Pdo=o("XLNetTokenizer"),Bdo=o(" or "),qB=a("a"),Ido=o("XLNetTokenizerFast"),Ndo=o(" (XLNet model)"),qdo=l(),Rs=a("li"),hne=a("strong"),jdo=o("yoso"),Ddo=o(" \u2014 "),jB=a("a"),Gdo=o("AlbertTokenizer"),Odo=o(" or "),DB=a("a"),Vdo=o("AlbertTokenizerFast"),Xdo=o(" (YOSO model)"),zdo=l(),F(ah.$$.fragment),Wdo=l(),nh=a("div"),F(zy.$$.fragment),Qdo=l(),une=a("p"),Hdo=o("Register a new tokenizer in this mapping."),yqe=l(),Mi=a("h2"),sh=a("a"),pne=a("span"),F(Wy.$$.fragment),Udo=l(),_ne=a("span"),Jdo=o("AutoFeatureExtractor"),Lqe=l(),Ao=a("div"),F(Qy.$$.fragment),Ydo=l(),Hy=a("p"),Kdo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),GB=a("a"),Zdo=o("AutoFeatureExtractor.from_pretrained()"),eco=o(" class method."),oco=l(),Uy=a("p"),rco=o("This class cannot be instantiated directly using "),bne=a("code"),tco=o("__init__()"),aco=o(" (throws an error)."),nco=l(),He=a("div"),F(Jy.$$.fragment),sco=l(),vne=a("p"),lco=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),ico=l(),ya=a("p"),dco=o("The feature extractor class to instantiate is selected based on the "),Fne=a("code"),cco=o("model_type"),mco=o(` property of the config object
(either passed as an argument or loaded from `),Tne=a("code"),fco=o("pretrained_model_name_or_path"),gco=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Mne=a("code"),hco=o("pretrained_model_name_or_path"),uco=o(":"),pco=l(),Y=a("ul"),lh=a("li"),Ene=a("strong"),_co=o("beit"),bco=o(" \u2014 "),OB=a("a"),vco=o("BeitFeatureExtractor"),Fco=o(" (BEiT model)"),Tco=l(),ih=a("li"),Cne=a("strong"),Mco=o("clip"),Eco=o(" \u2014 "),VB=a("a"),Cco=o("CLIPFeatureExtractor"),wco=o(" (CLIP model)"),Aco=l(),dh=a("li"),wne=a("strong"),yco=o("convnext"),Lco=o(" \u2014 "),XB=a("a"),xco=o("ConvNextFeatureExtractor"),$co=o(" (ConvNext model)"),kco=l(),ch=a("li"),Ane=a("strong"),Sco=o("cvt"),Rco=o(" \u2014 "),zB=a("a"),Pco=o("ConvNextFeatureExtractor"),Bco=o(" (CvT model)"),Ico=l(),mh=a("li"),yne=a("strong"),Nco=o("data2vec-audio"),qco=o(" \u2014 "),WB=a("a"),jco=o("Wav2Vec2FeatureExtractor"),Dco=o(" (Data2VecAudio model)"),Gco=l(),fh=a("li"),Lne=a("strong"),Oco=o("data2vec-vision"),Vco=o(" \u2014 "),QB=a("a"),Xco=o("BeitFeatureExtractor"),zco=o(" (Data2VecVision model)"),Wco=l(),gh=a("li"),xne=a("strong"),Qco=o("deit"),Hco=o(" \u2014 "),HB=a("a"),Uco=o("DeiTFeatureExtractor"),Jco=o(" (DeiT model)"),Yco=l(),hh=a("li"),$ne=a("strong"),Kco=o("detr"),Zco=o(" \u2014 "),UB=a("a"),emo=o("DetrFeatureExtractor"),omo=o(" (DETR model)"),rmo=l(),uh=a("li"),kne=a("strong"),tmo=o("dpt"),amo=o(" \u2014 "),JB=a("a"),nmo=o("DPTFeatureExtractor"),smo=o(" (DPT model)"),lmo=l(),ph=a("li"),Sne=a("strong"),imo=o("flava"),dmo=o(" \u2014 "),YB=a("a"),cmo=o("FlavaFeatureExtractor"),mmo=o(" (Flava model)"),fmo=l(),_h=a("li"),Rne=a("strong"),gmo=o("glpn"),hmo=o(" \u2014 "),KB=a("a"),umo=o("GLPNFeatureExtractor"),pmo=o(" (GLPN model)"),_mo=l(),bh=a("li"),Pne=a("strong"),bmo=o("hubert"),vmo=o(" \u2014 "),ZB=a("a"),Fmo=o("Wav2Vec2FeatureExtractor"),Tmo=o(" (Hubert model)"),Mmo=l(),vh=a("li"),Bne=a("strong"),Emo=o("imagegpt"),Cmo=o(" \u2014 "),eI=a("a"),wmo=o("ImageGPTFeatureExtractor"),Amo=o(" (ImageGPT model)"),ymo=l(),Fh=a("li"),Ine=a("strong"),Lmo=o("layoutlmv2"),xmo=o(" \u2014 "),oI=a("a"),$mo=o("LayoutLMv2FeatureExtractor"),kmo=o(" (LayoutLMv2 model)"),Smo=l(),Th=a("li"),Nne=a("strong"),Rmo=o("layoutlmv3"),Pmo=o(" \u2014 "),rI=a("a"),Bmo=o("LayoutLMv3FeatureExtractor"),Imo=o(" (LayoutLMv3 model)"),Nmo=l(),Mh=a("li"),qne=a("strong"),qmo=o("maskformer"),jmo=o(" \u2014 "),tI=a("a"),Dmo=o("MaskFormerFeatureExtractor"),Gmo=o(" (MaskFormer model)"),Omo=l(),Eh=a("li"),jne=a("strong"),Vmo=o("perceiver"),Xmo=o(" \u2014 "),aI=a("a"),zmo=o("PerceiverFeatureExtractor"),Wmo=o(" (Perceiver model)"),Qmo=l(),Ch=a("li"),Dne=a("strong"),Hmo=o("poolformer"),Umo=o(" \u2014 "),nI=a("a"),Jmo=o("PoolFormerFeatureExtractor"),Ymo=o(" (PoolFormer model)"),Kmo=l(),wh=a("li"),Gne=a("strong"),Zmo=o("regnet"),efo=o(" \u2014 "),sI=a("a"),ofo=o("ConvNextFeatureExtractor"),rfo=o(" (RegNet model)"),tfo=l(),Ah=a("li"),One=a("strong"),afo=o("resnet"),nfo=o(" \u2014 "),lI=a("a"),sfo=o("ConvNextFeatureExtractor"),lfo=o(" (ResNet model)"),ifo=l(),yh=a("li"),Vne=a("strong"),dfo=o("segformer"),cfo=o(" \u2014 "),iI=a("a"),mfo=o("SegformerFeatureExtractor"),ffo=o(" (SegFormer model)"),gfo=l(),Lh=a("li"),Xne=a("strong"),hfo=o("speech_to_text"),ufo=o(" \u2014 "),dI=a("a"),pfo=o("Speech2TextFeatureExtractor"),_fo=o(" (Speech2Text model)"),bfo=l(),xh=a("li"),zne=a("strong"),vfo=o("swin"),Ffo=o(" \u2014 "),cI=a("a"),Tfo=o("ViTFeatureExtractor"),Mfo=o(" (Swin model)"),Efo=l(),$h=a("li"),Wne=a("strong"),Cfo=o("van"),wfo=o(" \u2014 "),mI=a("a"),Afo=o("ConvNextFeatureExtractor"),yfo=o(" (VAN model)"),Lfo=l(),kh=a("li"),Qne=a("strong"),xfo=o("vit"),$fo=o(" \u2014 "),fI=a("a"),kfo=o("ViTFeatureExtractor"),Sfo=o(" (ViT model)"),Rfo=l(),Sh=a("li"),Hne=a("strong"),Pfo=o("vit_mae"),Bfo=o(" \u2014 "),gI=a("a"),Ifo=o("ViTFeatureExtractor"),Nfo=o(" (ViTMAE model)"),qfo=l(),Rh=a("li"),Une=a("strong"),jfo=o("wav2vec2"),Dfo=o(" \u2014 "),hI=a("a"),Gfo=o("Wav2Vec2FeatureExtractor"),Ofo=o(" (Wav2Vec2 model)"),Vfo=l(),Ph=a("li"),Jne=a("strong"),Xfo=o("wav2vec2-conformer"),zfo=o(" \u2014 "),uI=a("a"),Wfo=o("Wav2Vec2FeatureExtractor"),Qfo=o(" (Wav2Vec2-Conformer model)"),Hfo=l(),Bh=a("li"),Yne=a("strong"),Ufo=o("yolos"),Jfo=o(" \u2014 "),pI=a("a"),Yfo=o("YolosFeatureExtractor"),Kfo=o(" (YOLOS model)"),Zfo=l(),F(Ih.$$.fragment),ego=l(),F(Nh.$$.fragment),ogo=l(),qh=a("div"),F(Yy.$$.fragment),rgo=l(),Kne=a("p"),tgo=o("Register a new feature extractor for this class."),xqe=l(),Ei=a("h2"),jh=a("a"),Zne=a("span"),F(Ky.$$.fragment),ago=l(),ese=a("span"),ngo=o("AutoProcessor"),$qe=l(),yo=a("div"),F(Zy.$$.fragment),sgo=l(),eL=a("p"),lgo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),_I=a("a"),igo=o("AutoProcessor.from_pretrained()"),dgo=o(" class method."),cgo=l(),oL=a("p"),mgo=o("This class cannot be instantiated directly using "),ose=a("code"),fgo=o("__init__()"),ggo=o(" (throws an error)."),hgo=l(),Ue=a("div"),F(rL.$$.fragment),ugo=l(),rse=a("p"),pgo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),_go=l(),Ci=a("p"),bgo=o("The processor class to instantiate is selected based on the "),tse=a("code"),vgo=o("model_type"),Fgo=o(` property of the config object (either
passed as an argument or loaded from `),ase=a("code"),Tgo=o("pretrained_model_name_or_path"),Mgo=o(" if possible):"),Ego=l(),he=a("ul"),Dh=a("li"),nse=a("strong"),Cgo=o("clip"),wgo=o(" \u2014 "),bI=a("a"),Ago=o("CLIPProcessor"),ygo=o(" (CLIP model)"),Lgo=l(),Gh=a("li"),sse=a("strong"),xgo=o("flava"),$go=o(" \u2014 "),lse=a("code"),kgo=o("FLAVAProcessor"),Sgo=o(" (Flava model)"),Rgo=l(),Oh=a("li"),ise=a("strong"),Pgo=o("layoutlmv2"),Bgo=o(" \u2014 "),vI=a("a"),Igo=o("LayoutLMv2Processor"),Ngo=o(" (LayoutLMv2 model)"),qgo=l(),Vh=a("li"),dse=a("strong"),jgo=o("layoutlmv3"),Dgo=o(" \u2014 "),FI=a("a"),Ggo=o("LayoutLMv3Processor"),Ogo=o(" (LayoutLMv3 model)"),Vgo=l(),Xh=a("li"),cse=a("strong"),Xgo=o("layoutxlm"),zgo=o(" \u2014 "),TI=a("a"),Wgo=o("LayoutXLMProcessor"),Qgo=o(" (LayoutXLM model)"),Hgo=l(),zh=a("li"),mse=a("strong"),Ugo=o("sew"),Jgo=o(" \u2014 "),MI=a("a"),Ygo=o("Wav2Vec2Processor"),Kgo=o(" (SEW model)"),Zgo=l(),Wh=a("li"),fse=a("strong"),eho=o("sew-d"),oho=o(" \u2014 "),EI=a("a"),rho=o("Wav2Vec2Processor"),tho=o(" (SEW-D model)"),aho=l(),Qh=a("li"),gse=a("strong"),nho=o("speech_to_text"),sho=o(" \u2014 "),CI=a("a"),lho=o("Speech2TextProcessor"),iho=o(" (Speech2Text model)"),dho=l(),Hh=a("li"),hse=a("strong"),cho=o("speech_to_text_2"),mho=o(" \u2014 "),wI=a("a"),fho=o("Speech2Text2Processor"),gho=o(" (Speech2Text2 model)"),hho=l(),Uh=a("li"),use=a("strong"),uho=o("trocr"),pho=o(" \u2014 "),AI=a("a"),_ho=o("TrOCRProcessor"),bho=o(" (TrOCR model)"),vho=l(),Jh=a("li"),pse=a("strong"),Fho=o("unispeech"),Tho=o(" \u2014 "),yI=a("a"),Mho=o("Wav2Vec2Processor"),Eho=o(" (UniSpeech model)"),Cho=l(),Yh=a("li"),_se=a("strong"),who=o("unispeech-sat"),Aho=o(" \u2014 "),LI=a("a"),yho=o("Wav2Vec2Processor"),Lho=o(" (UniSpeechSat model)"),xho=l(),Kh=a("li"),bse=a("strong"),$ho=o("vilt"),kho=o(" \u2014 "),xI=a("a"),Sho=o("ViltProcessor"),Rho=o(" (ViLT model)"),Pho=l(),Zh=a("li"),vse=a("strong"),Bho=o("vision-text-dual-encoder"),Iho=o(" \u2014 "),$I=a("a"),Nho=o("VisionTextDualEncoderProcessor"),qho=o(" (VisionTextDualEncoder model)"),jho=l(),eu=a("li"),Fse=a("strong"),Dho=o("wav2vec2"),Gho=o(" \u2014 "),kI=a("a"),Oho=o("Wav2Vec2Processor"),Vho=o(" (Wav2Vec2 model)"),Xho=l(),ou=a("li"),Tse=a("strong"),zho=o("wav2vec2-conformer"),Who=o(" \u2014 "),SI=a("a"),Qho=o("Wav2Vec2Processor"),Hho=o(" (Wav2Vec2-Conformer model)"),Uho=l(),ru=a("li"),Mse=a("strong"),Jho=o("wavlm"),Yho=o(" \u2014 "),RI=a("a"),Kho=o("Wav2Vec2Processor"),Zho=o(" (WavLM model)"),euo=l(),F(tu.$$.fragment),ouo=l(),F(au.$$.fragment),ruo=l(),nu=a("div"),F(tL.$$.fragment),tuo=l(),Ese=a("p"),auo=o("Register a new processor for this class."),kqe=l(),wi=a("h2"),su=a("a"),Cse=a("span"),F(aL.$$.fragment),nuo=l(),wse=a("span"),suo=o("AutoModel"),Sqe=l(),Lo=a("div"),F(nL.$$.fragment),luo=l(),Ai=a("p"),iuo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),PI=a("a"),duo=o("from_pretrained()"),cuo=o(" class method or the "),BI=a("a"),muo=o("from_config()"),fuo=o(` class
method.`),guo=l(),sL=a("p"),huo=o("This class cannot be instantiated directly using "),Ase=a("code"),uuo=o("__init__()"),puo=o(" (throws an error)."),_uo=l(),tt=a("div"),F(lL.$$.fragment),buo=l(),yse=a("p"),vuo=o("Instantiates one of the base model classes of the library from a configuration."),Fuo=l(),yi=a("p"),Tuo=o(`Note:
Loading a model from its configuration file does `),Lse=a("strong"),Muo=o("not"),Euo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),II=a("a"),Cuo=o("from_pretrained()"),wuo=o(" to load the model weights."),Auo=l(),F(lu.$$.fragment),yuo=l(),Je=a("div"),F(iL.$$.fragment),Luo=l(),xse=a("p"),xuo=o("Instantiate one of the base model classes of the library from a pretrained model."),$uo=l(),La=a("p"),kuo=o("The model class to instantiate is selected based on the "),$se=a("code"),Suo=o("model_type"),Ruo=o(` property of the config object (either
passed as an argument or loaded from `),kse=a("code"),Puo=o("pretrained_model_name_or_path"),Buo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sse=a("code"),Iuo=o("pretrained_model_name_or_path"),Nuo=o(":"),quo=l(),x=a("ul"),iu=a("li"),Rse=a("strong"),juo=o("albert"),Duo=o(" \u2014 "),NI=a("a"),Guo=o("AlbertModel"),Ouo=o(" (ALBERT model)"),Vuo=l(),du=a("li"),Pse=a("strong"),Xuo=o("bart"),zuo=o(" \u2014 "),qI=a("a"),Wuo=o("BartModel"),Quo=o(" (BART model)"),Huo=l(),cu=a("li"),Bse=a("strong"),Uuo=o("beit"),Juo=o(" \u2014 "),jI=a("a"),Yuo=o("BeitModel"),Kuo=o(" (BEiT model)"),Zuo=l(),mu=a("li"),Ise=a("strong"),epo=o("bert"),opo=o(" \u2014 "),DI=a("a"),rpo=o("BertModel"),tpo=o(" (BERT model)"),apo=l(),fu=a("li"),Nse=a("strong"),npo=o("bert-generation"),spo=o(" \u2014 "),GI=a("a"),lpo=o("BertGenerationEncoder"),ipo=o(" (Bert Generation model)"),dpo=l(),gu=a("li"),qse=a("strong"),cpo=o("big_bird"),mpo=o(" \u2014 "),OI=a("a"),fpo=o("BigBirdModel"),gpo=o(" (BigBird model)"),hpo=l(),hu=a("li"),jse=a("strong"),upo=o("bigbird_pegasus"),ppo=o(" \u2014 "),VI=a("a"),_po=o("BigBirdPegasusModel"),bpo=o(" (BigBirdPegasus model)"),vpo=l(),uu=a("li"),Dse=a("strong"),Fpo=o("blenderbot"),Tpo=o(" \u2014 "),XI=a("a"),Mpo=o("BlenderbotModel"),Epo=o(" (Blenderbot model)"),Cpo=l(),pu=a("li"),Gse=a("strong"),wpo=o("blenderbot-small"),Apo=o(" \u2014 "),zI=a("a"),ypo=o("BlenderbotSmallModel"),Lpo=o(" (BlenderbotSmall model)"),xpo=l(),_u=a("li"),Ose=a("strong"),$po=o("camembert"),kpo=o(" \u2014 "),WI=a("a"),Spo=o("CamembertModel"),Rpo=o(" (CamemBERT model)"),Ppo=l(),bu=a("li"),Vse=a("strong"),Bpo=o("canine"),Ipo=o(" \u2014 "),QI=a("a"),Npo=o("CanineModel"),qpo=o(" (Canine model)"),jpo=l(),vu=a("li"),Xse=a("strong"),Dpo=o("clip"),Gpo=o(" \u2014 "),HI=a("a"),Opo=o("CLIPModel"),Vpo=o(" (CLIP model)"),Xpo=l(),Fu=a("li"),zse=a("strong"),zpo=o("convbert"),Wpo=o(" \u2014 "),UI=a("a"),Qpo=o("ConvBertModel"),Hpo=o(" (ConvBERT model)"),Upo=l(),Tu=a("li"),Wse=a("strong"),Jpo=o("convnext"),Ypo=o(" \u2014 "),JI=a("a"),Kpo=o("ConvNextModel"),Zpo=o(" (ConvNext model)"),e_o=l(),Mu=a("li"),Qse=a("strong"),o_o=o("ctrl"),r_o=o(" \u2014 "),YI=a("a"),t_o=o("CTRLModel"),a_o=o(" (CTRL model)"),n_o=l(),Eu=a("li"),Hse=a("strong"),s_o=o("cvt"),l_o=o(" \u2014 "),KI=a("a"),i_o=o("CvtModel"),d_o=o(" (CvT model)"),c_o=l(),Cu=a("li"),Use=a("strong"),m_o=o("data2vec-audio"),f_o=o(" \u2014 "),ZI=a("a"),g_o=o("Data2VecAudioModel"),h_o=o(" (Data2VecAudio model)"),u_o=l(),wu=a("li"),Jse=a("strong"),p_o=o("data2vec-text"),__o=o(" \u2014 "),eN=a("a"),b_o=o("Data2VecTextModel"),v_o=o(" (Data2VecText model)"),F_o=l(),Au=a("li"),Yse=a("strong"),T_o=o("data2vec-vision"),M_o=o(" \u2014 "),oN=a("a"),E_o=o("Data2VecVisionModel"),C_o=o(" (Data2VecVision model)"),w_o=l(),yu=a("li"),Kse=a("strong"),A_o=o("deberta"),y_o=o(" \u2014 "),rN=a("a"),L_o=o("DebertaModel"),x_o=o(" (DeBERTa model)"),$_o=l(),Lu=a("li"),Zse=a("strong"),k_o=o("deberta-v2"),S_o=o(" \u2014 "),tN=a("a"),R_o=o("DebertaV2Model"),P_o=o(" (DeBERTa-v2 model)"),B_o=l(),xu=a("li"),ele=a("strong"),I_o=o("decision_transformer"),N_o=o(" \u2014 "),aN=a("a"),q_o=o("DecisionTransformerModel"),j_o=o(" (Decision Transformer model)"),D_o=l(),$u=a("li"),ole=a("strong"),G_o=o("deit"),O_o=o(" \u2014 "),nN=a("a"),V_o=o("DeiTModel"),X_o=o(" (DeiT model)"),z_o=l(),ku=a("li"),rle=a("strong"),W_o=o("detr"),Q_o=o(" \u2014 "),sN=a("a"),H_o=o("DetrModel"),U_o=o(" (DETR model)"),J_o=l(),Su=a("li"),tle=a("strong"),Y_o=o("distilbert"),K_o=o(" \u2014 "),lN=a("a"),Z_o=o("DistilBertModel"),ebo=o(" (DistilBERT model)"),obo=l(),Ru=a("li"),ale=a("strong"),rbo=o("dpr"),tbo=o(" \u2014 "),iN=a("a"),abo=o("DPRQuestionEncoder"),nbo=o(" (DPR model)"),sbo=l(),Pu=a("li"),nle=a("strong"),lbo=o("dpt"),ibo=o(" \u2014 "),dN=a("a"),dbo=o("DPTModel"),cbo=o(" (DPT model)"),mbo=l(),Bu=a("li"),sle=a("strong"),fbo=o("electra"),gbo=o(" \u2014 "),cN=a("a"),hbo=o("ElectraModel"),ubo=o(" (ELECTRA model)"),pbo=l(),Iu=a("li"),lle=a("strong"),_bo=o("flaubert"),bbo=o(" \u2014 "),mN=a("a"),vbo=o("FlaubertModel"),Fbo=o(" (FlauBERT model)"),Tbo=l(),Nu=a("li"),ile=a("strong"),Mbo=o("flava"),Ebo=o(" \u2014 "),fN=a("a"),Cbo=o("FlavaModel"),wbo=o(" (Flava model)"),Abo=l(),qu=a("li"),dle=a("strong"),ybo=o("fnet"),Lbo=o(" \u2014 "),gN=a("a"),xbo=o("FNetModel"),$bo=o(" (FNet model)"),kbo=l(),ju=a("li"),cle=a("strong"),Sbo=o("fsmt"),Rbo=o(" \u2014 "),hN=a("a"),Pbo=o("FSMTModel"),Bbo=o(" (FairSeq Machine-Translation model)"),Ibo=l(),Ps=a("li"),mle=a("strong"),Nbo=o("funnel"),qbo=o(" \u2014 "),uN=a("a"),jbo=o("FunnelModel"),Dbo=o(" or "),pN=a("a"),Gbo=o("FunnelBaseModel"),Obo=o(" (Funnel Transformer model)"),Vbo=l(),Du=a("li"),fle=a("strong"),Xbo=o("glpn"),zbo=o(" \u2014 "),_N=a("a"),Wbo=o("GLPNModel"),Qbo=o(" (GLPN model)"),Hbo=l(),Gu=a("li"),gle=a("strong"),Ubo=o("gpt2"),Jbo=o(" \u2014 "),bN=a("a"),Ybo=o("GPT2Model"),Kbo=o(" (OpenAI GPT-2 model)"),Zbo=l(),Ou=a("li"),hle=a("strong"),e2o=o("gpt_neo"),o2o=o(" \u2014 "),vN=a("a"),r2o=o("GPTNeoModel"),t2o=o(" (GPT Neo model)"),a2o=l(),Vu=a("li"),ule=a("strong"),n2o=o("gpt_neox"),s2o=o(" \u2014 "),FN=a("a"),l2o=o("GPTNeoXModel"),i2o=o(" (GPT NeoX model)"),d2o=l(),Xu=a("li"),ple=a("strong"),c2o=o("gptj"),m2o=o(" \u2014 "),TN=a("a"),f2o=o("GPTJModel"),g2o=o(" (GPT-J model)"),h2o=l(),zu=a("li"),_le=a("strong"),u2o=o("hubert"),p2o=o(" \u2014 "),MN=a("a"),_2o=o("HubertModel"),b2o=o(" (Hubert model)"),v2o=l(),Wu=a("li"),ble=a("strong"),F2o=o("ibert"),T2o=o(" \u2014 "),EN=a("a"),M2o=o("IBertModel"),E2o=o(" (I-BERT model)"),C2o=l(),Qu=a("li"),vle=a("strong"),w2o=o("imagegpt"),A2o=o(" \u2014 "),CN=a("a"),y2o=o("ImageGPTModel"),L2o=o(" (ImageGPT model)"),x2o=l(),Hu=a("li"),Fle=a("strong"),$2o=o("layoutlm"),k2o=o(" \u2014 "),wN=a("a"),S2o=o("LayoutLMModel"),R2o=o(" (LayoutLM model)"),P2o=l(),Uu=a("li"),Tle=a("strong"),B2o=o("layoutlmv2"),I2o=o(" \u2014 "),AN=a("a"),N2o=o("LayoutLMv2Model"),q2o=o(" (LayoutLMv2 model)"),j2o=l(),Ju=a("li"),Mle=a("strong"),D2o=o("layoutlmv3"),G2o=o(" \u2014 "),yN=a("a"),O2o=o("LayoutLMv3Model"),V2o=o(" (LayoutLMv3 model)"),X2o=l(),Yu=a("li"),Ele=a("strong"),z2o=o("led"),W2o=o(" \u2014 "),LN=a("a"),Q2o=o("LEDModel"),H2o=o(" (LED model)"),U2o=l(),Ku=a("li"),Cle=a("strong"),J2o=o("longformer"),Y2o=o(" \u2014 "),xN=a("a"),K2o=o("LongformerModel"),Z2o=o(" (Longformer model)"),evo=l(),Zu=a("li"),wle=a("strong"),ovo=o("luke"),rvo=o(" \u2014 "),$N=a("a"),tvo=o("LukeModel"),avo=o(" (LUKE model)"),nvo=l(),ep=a("li"),Ale=a("strong"),svo=o("lxmert"),lvo=o(" \u2014 "),kN=a("a"),ivo=o("LxmertModel"),dvo=o(" (LXMERT model)"),cvo=l(),op=a("li"),yle=a("strong"),mvo=o("m2m_100"),fvo=o(" \u2014 "),SN=a("a"),gvo=o("M2M100Model"),hvo=o(" (M2M100 model)"),uvo=l(),rp=a("li"),Lle=a("strong"),pvo=o("marian"),_vo=o(" \u2014 "),RN=a("a"),bvo=o("MarianModel"),vvo=o(" (Marian model)"),Fvo=l(),tp=a("li"),xle=a("strong"),Tvo=o("maskformer"),Mvo=o(" \u2014 "),PN=a("a"),Evo=o("MaskFormerModel"),Cvo=o(" (MaskFormer model)"),wvo=l(),ap=a("li"),$le=a("strong"),Avo=o("mbart"),yvo=o(" \u2014 "),BN=a("a"),Lvo=o("MBartModel"),xvo=o(" (mBART model)"),$vo=l(),np=a("li"),kle=a("strong"),kvo=o("megatron-bert"),Svo=o(" \u2014 "),IN=a("a"),Rvo=o("MegatronBertModel"),Pvo=o(" (MegatronBert model)"),Bvo=l(),sp=a("li"),Sle=a("strong"),Ivo=o("mobilebert"),Nvo=o(" \u2014 "),NN=a("a"),qvo=o("MobileBertModel"),jvo=o(" (MobileBERT model)"),Dvo=l(),lp=a("li"),Rle=a("strong"),Gvo=o("mpnet"),Ovo=o(" \u2014 "),qN=a("a"),Vvo=o("MPNetModel"),Xvo=o(" (MPNet model)"),zvo=l(),ip=a("li"),Ple=a("strong"),Wvo=o("mt5"),Qvo=o(" \u2014 "),jN=a("a"),Hvo=o("MT5Model"),Uvo=o(" (mT5 model)"),Jvo=l(),dp=a("li"),Ble=a("strong"),Yvo=o("nystromformer"),Kvo=o(" \u2014 "),DN=a("a"),Zvo=o("NystromformerModel"),eFo=o(" (Nystromformer model)"),oFo=l(),cp=a("li"),Ile=a("strong"),rFo=o("openai-gpt"),tFo=o(" \u2014 "),GN=a("a"),aFo=o("OpenAIGPTModel"),nFo=o(" (OpenAI GPT model)"),sFo=l(),mp=a("li"),Nle=a("strong"),lFo=o("opt"),iFo=o(" \u2014 "),ON=a("a"),dFo=o("OPTModel"),cFo=o(" (OPT model)"),mFo=l(),fp=a("li"),qle=a("strong"),fFo=o("pegasus"),gFo=o(" \u2014 "),VN=a("a"),hFo=o("PegasusModel"),uFo=o(" (Pegasus model)"),pFo=l(),gp=a("li"),jle=a("strong"),_Fo=o("perceiver"),bFo=o(" \u2014 "),XN=a("a"),vFo=o("PerceiverModel"),FFo=o(" (Perceiver model)"),TFo=l(),hp=a("li"),Dle=a("strong"),MFo=o("plbart"),EFo=o(" \u2014 "),zN=a("a"),CFo=o("PLBartModel"),wFo=o(" (PLBart model)"),AFo=l(),up=a("li"),Gle=a("strong"),yFo=o("poolformer"),LFo=o(" \u2014 "),WN=a("a"),xFo=o("PoolFormerModel"),$Fo=o(" (PoolFormer model)"),kFo=l(),pp=a("li"),Ole=a("strong"),SFo=o("prophetnet"),RFo=o(" \u2014 "),QN=a("a"),PFo=o("ProphetNetModel"),BFo=o(" (ProphetNet model)"),IFo=l(),_p=a("li"),Vle=a("strong"),NFo=o("qdqbert"),qFo=o(" \u2014 "),HN=a("a"),jFo=o("QDQBertModel"),DFo=o(" (QDQBert model)"),GFo=l(),bp=a("li"),Xle=a("strong"),OFo=o("reformer"),VFo=o(" \u2014 "),UN=a("a"),XFo=o("ReformerModel"),zFo=o(" (Reformer model)"),WFo=l(),vp=a("li"),zle=a("strong"),QFo=o("regnet"),HFo=o(" \u2014 "),JN=a("a"),UFo=o("RegNetModel"),JFo=o(" (RegNet model)"),YFo=l(),Fp=a("li"),Wle=a("strong"),KFo=o("rembert"),ZFo=o(" \u2014 "),YN=a("a"),e1o=o("RemBertModel"),o1o=o(" (RemBERT model)"),r1o=l(),Tp=a("li"),Qle=a("strong"),t1o=o("resnet"),a1o=o(" \u2014 "),KN=a("a"),n1o=o("ResNetModel"),s1o=o(" (ResNet model)"),l1o=l(),Mp=a("li"),Hle=a("strong"),i1o=o("retribert"),d1o=o(" \u2014 "),ZN=a("a"),c1o=o("RetriBertModel"),m1o=o(" (RetriBERT model)"),f1o=l(),Ep=a("li"),Ule=a("strong"),g1o=o("roberta"),h1o=o(" \u2014 "),eq=a("a"),u1o=o("RobertaModel"),p1o=o(" (RoBERTa model)"),_1o=l(),Cp=a("li"),Jle=a("strong"),b1o=o("roformer"),v1o=o(" \u2014 "),oq=a("a"),F1o=o("RoFormerModel"),T1o=o(" (RoFormer model)"),M1o=l(),wp=a("li"),Yle=a("strong"),E1o=o("segformer"),C1o=o(" \u2014 "),rq=a("a"),w1o=o("SegformerModel"),A1o=o(" (SegFormer model)"),y1o=l(),Ap=a("li"),Kle=a("strong"),L1o=o("sew"),x1o=o(" \u2014 "),tq=a("a"),$1o=o("SEWModel"),k1o=o(" (SEW model)"),S1o=l(),yp=a("li"),Zle=a("strong"),R1o=o("sew-d"),P1o=o(" \u2014 "),aq=a("a"),B1o=o("SEWDModel"),I1o=o(" (SEW-D model)"),N1o=l(),Lp=a("li"),eie=a("strong"),q1o=o("speech_to_text"),j1o=o(" \u2014 "),nq=a("a"),D1o=o("Speech2TextModel"),G1o=o(" (Speech2Text model)"),O1o=l(),xp=a("li"),oie=a("strong"),V1o=o("splinter"),X1o=o(" \u2014 "),sq=a("a"),z1o=o("SplinterModel"),W1o=o(" (Splinter model)"),Q1o=l(),$p=a("li"),rie=a("strong"),H1o=o("squeezebert"),U1o=o(" \u2014 "),lq=a("a"),J1o=o("SqueezeBertModel"),Y1o=o(" (SqueezeBERT model)"),K1o=l(),kp=a("li"),tie=a("strong"),Z1o=o("swin"),eTo=o(" \u2014 "),iq=a("a"),oTo=o("SwinModel"),rTo=o(" (Swin model)"),tTo=l(),Sp=a("li"),aie=a("strong"),aTo=o("t5"),nTo=o(" \u2014 "),dq=a("a"),sTo=o("T5Model"),lTo=o(" (T5 model)"),iTo=l(),Rp=a("li"),nie=a("strong"),dTo=o("tapas"),cTo=o(" \u2014 "),cq=a("a"),mTo=o("TapasModel"),fTo=o(" (TAPAS model)"),gTo=l(),Pp=a("li"),sie=a("strong"),hTo=o("trajectory_transformer"),uTo=o(" \u2014 "),mq=a("a"),pTo=o("TrajectoryTransformerModel"),_To=o(" (Trajectory Transformer model)"),bTo=l(),Bp=a("li"),lie=a("strong"),vTo=o("transfo-xl"),FTo=o(" \u2014 "),fq=a("a"),TTo=o("TransfoXLModel"),MTo=o(" (Transformer-XL model)"),ETo=l(),Ip=a("li"),iie=a("strong"),CTo=o("unispeech"),wTo=o(" \u2014 "),gq=a("a"),ATo=o("UniSpeechModel"),yTo=o(" (UniSpeech model)"),LTo=l(),Np=a("li"),die=a("strong"),xTo=o("unispeech-sat"),$To=o(" \u2014 "),hq=a("a"),kTo=o("UniSpeechSatModel"),STo=o(" (UniSpeechSat model)"),RTo=l(),qp=a("li"),cie=a("strong"),PTo=o("van"),BTo=o(" \u2014 "),uq=a("a"),ITo=o("VanModel"),NTo=o(" (VAN model)"),qTo=l(),jp=a("li"),mie=a("strong"),jTo=o("vilt"),DTo=o(" \u2014 "),pq=a("a"),GTo=o("ViltModel"),OTo=o(" (ViLT model)"),VTo=l(),Dp=a("li"),fie=a("strong"),XTo=o("vision-text-dual-encoder"),zTo=o(" \u2014 "),_q=a("a"),WTo=o("VisionTextDualEncoderModel"),QTo=o(" (VisionTextDualEncoder model)"),HTo=l(),Gp=a("li"),gie=a("strong"),UTo=o("visual_bert"),JTo=o(" \u2014 "),bq=a("a"),YTo=o("VisualBertModel"),KTo=o(" (VisualBert model)"),ZTo=l(),Op=a("li"),hie=a("strong"),eMo=o("vit"),oMo=o(" \u2014 "),vq=a("a"),rMo=o("ViTModel"),tMo=o(" (ViT model)"),aMo=l(),Vp=a("li"),uie=a("strong"),nMo=o("vit_mae"),sMo=o(" \u2014 "),Fq=a("a"),lMo=o("ViTMAEModel"),iMo=o(" (ViTMAE model)"),dMo=l(),Xp=a("li"),pie=a("strong"),cMo=o("wav2vec2"),mMo=o(" \u2014 "),Tq=a("a"),fMo=o("Wav2Vec2Model"),gMo=o(" (Wav2Vec2 model)"),hMo=l(),zp=a("li"),_ie=a("strong"),uMo=o("wav2vec2-conformer"),pMo=o(" \u2014 "),Mq=a("a"),_Mo=o("Wav2Vec2ConformerModel"),bMo=o(" (Wav2Vec2-Conformer model)"),vMo=l(),Wp=a("li"),bie=a("strong"),FMo=o("wavlm"),TMo=o(" \u2014 "),Eq=a("a"),MMo=o("WavLMModel"),EMo=o(" (WavLM model)"),CMo=l(),Qp=a("li"),vie=a("strong"),wMo=o("xglm"),AMo=o(" \u2014 "),Cq=a("a"),yMo=o("XGLMModel"),LMo=o(" (XGLM model)"),xMo=l(),Hp=a("li"),Fie=a("strong"),$Mo=o("xlm"),kMo=o(" \u2014 "),wq=a("a"),SMo=o("XLMModel"),RMo=o(" (XLM model)"),PMo=l(),Up=a("li"),Tie=a("strong"),BMo=o("xlm-prophetnet"),IMo=o(" \u2014 "),Aq=a("a"),NMo=o("XLMProphetNetModel"),qMo=o(" (XLMProphetNet model)"),jMo=l(),Jp=a("li"),Mie=a("strong"),DMo=o("xlm-roberta"),GMo=o(" \u2014 "),yq=a("a"),OMo=o("XLMRobertaModel"),VMo=o(" (XLM-RoBERTa model)"),XMo=l(),Yp=a("li"),Eie=a("strong"),zMo=o("xlm-roberta-xl"),WMo=o(" \u2014 "),Lq=a("a"),QMo=o("XLMRobertaXLModel"),HMo=o(" (XLM-RoBERTa-XL model)"),UMo=l(),Kp=a("li"),Cie=a("strong"),JMo=o("xlnet"),YMo=o(" \u2014 "),xq=a("a"),KMo=o("XLNetModel"),ZMo=o(" (XLNet model)"),e4o=l(),Zp=a("li"),wie=a("strong"),o4o=o("yolos"),r4o=o(" \u2014 "),$q=a("a"),t4o=o("YolosModel"),a4o=o(" (YOLOS model)"),n4o=l(),e_=a("li"),Aie=a("strong"),s4o=o("yoso"),l4o=o(" \u2014 "),kq=a("a"),i4o=o("YosoModel"),d4o=o(" (YOSO model)"),c4o=l(),o_=a("p"),m4o=o("The model is set in evaluation mode by default using "),yie=a("code"),f4o=o("model.eval()"),g4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lie=a("code"),h4o=o("model.train()"),u4o=l(),F(r_.$$.fragment),Rqe=l(),Li=a("h2"),t_=a("a"),xie=a("span"),F(dL.$$.fragment),p4o=l(),$ie=a("span"),_4o=o("AutoModelForPreTraining"),Pqe=l(),xo=a("div"),F(cL.$$.fragment),b4o=l(),xi=a("p"),v4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Sq=a("a"),F4o=o("from_pretrained()"),T4o=o(" class method or the "),Rq=a("a"),M4o=o("from_config()"),E4o=o(` class
method.`),C4o=l(),mL=a("p"),w4o=o("This class cannot be instantiated directly using "),kie=a("code"),A4o=o("__init__()"),y4o=o(" (throws an error)."),L4o=l(),at=a("div"),F(fL.$$.fragment),x4o=l(),Sie=a("p"),$4o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),k4o=l(),$i=a("p"),S4o=o(`Note:
Loading a model from its configuration file does `),Rie=a("strong"),R4o=o("not"),P4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pq=a("a"),B4o=o("from_pretrained()"),I4o=o(" to load the model weights."),N4o=l(),F(a_.$$.fragment),q4o=l(),Ye=a("div"),F(gL.$$.fragment),j4o=l(),Pie=a("p"),D4o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),G4o=l(),xa=a("p"),O4o=o("The model class to instantiate is selected based on the "),Bie=a("code"),V4o=o("model_type"),X4o=o(` property of the config object (either
passed as an argument or loaded from `),Iie=a("code"),z4o=o("pretrained_model_name_or_path"),W4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nie=a("code"),Q4o=o("pretrained_model_name_or_path"),H4o=o(":"),U4o=l(),G=a("ul"),n_=a("li"),qie=a("strong"),J4o=o("albert"),Y4o=o(" \u2014 "),Bq=a("a"),K4o=o("AlbertForPreTraining"),Z4o=o(" (ALBERT model)"),eEo=l(),s_=a("li"),jie=a("strong"),oEo=o("bart"),rEo=o(" \u2014 "),Iq=a("a"),tEo=o("BartForConditionalGeneration"),aEo=o(" (BART model)"),nEo=l(),l_=a("li"),Die=a("strong"),sEo=o("bert"),lEo=o(" \u2014 "),Nq=a("a"),iEo=o("BertForPreTraining"),dEo=o(" (BERT model)"),cEo=l(),i_=a("li"),Gie=a("strong"),mEo=o("big_bird"),fEo=o(" \u2014 "),qq=a("a"),gEo=o("BigBirdForPreTraining"),hEo=o(" (BigBird model)"),uEo=l(),d_=a("li"),Oie=a("strong"),pEo=o("camembert"),_Eo=o(" \u2014 "),jq=a("a"),bEo=o("CamembertForMaskedLM"),vEo=o(" (CamemBERT model)"),FEo=l(),c_=a("li"),Vie=a("strong"),TEo=o("ctrl"),MEo=o(" \u2014 "),Dq=a("a"),EEo=o("CTRLLMHeadModel"),CEo=o(" (CTRL model)"),wEo=l(),m_=a("li"),Xie=a("strong"),AEo=o("data2vec-text"),yEo=o(" \u2014 "),Gq=a("a"),LEo=o("Data2VecTextForMaskedLM"),xEo=o(" (Data2VecText model)"),$Eo=l(),f_=a("li"),zie=a("strong"),kEo=o("deberta"),SEo=o(" \u2014 "),Oq=a("a"),REo=o("DebertaForMaskedLM"),PEo=o(" (DeBERTa model)"),BEo=l(),g_=a("li"),Wie=a("strong"),IEo=o("deberta-v2"),NEo=o(" \u2014 "),Vq=a("a"),qEo=o("DebertaV2ForMaskedLM"),jEo=o(" (DeBERTa-v2 model)"),DEo=l(),h_=a("li"),Qie=a("strong"),GEo=o("distilbert"),OEo=o(" \u2014 "),Xq=a("a"),VEo=o("DistilBertForMaskedLM"),XEo=o(" (DistilBERT model)"),zEo=l(),u_=a("li"),Hie=a("strong"),WEo=o("electra"),QEo=o(" \u2014 "),zq=a("a"),HEo=o("ElectraForPreTraining"),UEo=o(" (ELECTRA model)"),JEo=l(),p_=a("li"),Uie=a("strong"),YEo=o("flaubert"),KEo=o(" \u2014 "),Wq=a("a"),ZEo=o("FlaubertWithLMHeadModel"),eCo=o(" (FlauBERT model)"),oCo=l(),__=a("li"),Jie=a("strong"),rCo=o("flava"),tCo=o(" \u2014 "),Qq=a("a"),aCo=o("FlavaForPreTraining"),nCo=o(" (Flava model)"),sCo=l(),b_=a("li"),Yie=a("strong"),lCo=o("fnet"),iCo=o(" \u2014 "),Hq=a("a"),dCo=o("FNetForPreTraining"),cCo=o(" (FNet model)"),mCo=l(),v_=a("li"),Kie=a("strong"),fCo=o("fsmt"),gCo=o(" \u2014 "),Uq=a("a"),hCo=o("FSMTForConditionalGeneration"),uCo=o(" (FairSeq Machine-Translation model)"),pCo=l(),F_=a("li"),Zie=a("strong"),_Co=o("funnel"),bCo=o(" \u2014 "),Jq=a("a"),vCo=o("FunnelForPreTraining"),FCo=o(" (Funnel Transformer model)"),TCo=l(),T_=a("li"),ede=a("strong"),MCo=o("gpt2"),ECo=o(" \u2014 "),Yq=a("a"),CCo=o("GPT2LMHeadModel"),wCo=o(" (OpenAI GPT-2 model)"),ACo=l(),M_=a("li"),ode=a("strong"),yCo=o("ibert"),LCo=o(" \u2014 "),Kq=a("a"),xCo=o("IBertForMaskedLM"),$Co=o(" (I-BERT model)"),kCo=l(),E_=a("li"),rde=a("strong"),SCo=o("layoutlm"),RCo=o(" \u2014 "),Zq=a("a"),PCo=o("LayoutLMForMaskedLM"),BCo=o(" (LayoutLM model)"),ICo=l(),C_=a("li"),tde=a("strong"),NCo=o("longformer"),qCo=o(" \u2014 "),ej=a("a"),jCo=o("LongformerForMaskedLM"),DCo=o(" (Longformer model)"),GCo=l(),w_=a("li"),ade=a("strong"),OCo=o("lxmert"),VCo=o(" \u2014 "),oj=a("a"),XCo=o("LxmertForPreTraining"),zCo=o(" (LXMERT model)"),WCo=l(),A_=a("li"),nde=a("strong"),QCo=o("megatron-bert"),HCo=o(" \u2014 "),rj=a("a"),UCo=o("MegatronBertForPreTraining"),JCo=o(" (MegatronBert model)"),YCo=l(),y_=a("li"),sde=a("strong"),KCo=o("mobilebert"),ZCo=o(" \u2014 "),tj=a("a"),e5o=o("MobileBertForPreTraining"),o5o=o(" (MobileBERT model)"),r5o=l(),L_=a("li"),lde=a("strong"),t5o=o("mpnet"),a5o=o(" \u2014 "),aj=a("a"),n5o=o("MPNetForMaskedLM"),s5o=o(" (MPNet model)"),l5o=l(),x_=a("li"),ide=a("strong"),i5o=o("openai-gpt"),d5o=o(" \u2014 "),nj=a("a"),c5o=o("OpenAIGPTLMHeadModel"),m5o=o(" (OpenAI GPT model)"),f5o=l(),$_=a("li"),dde=a("strong"),g5o=o("retribert"),h5o=o(" \u2014 "),sj=a("a"),u5o=o("RetriBertModel"),p5o=o(" (RetriBERT model)"),_5o=l(),k_=a("li"),cde=a("strong"),b5o=o("roberta"),v5o=o(" \u2014 "),lj=a("a"),F5o=o("RobertaForMaskedLM"),T5o=o(" (RoBERTa model)"),M5o=l(),S_=a("li"),mde=a("strong"),E5o=o("splinter"),C5o=o(" \u2014 "),ij=a("a"),w5o=o("SplinterForPreTraining"),A5o=o(" (Splinter model)"),y5o=l(),R_=a("li"),fde=a("strong"),L5o=o("squeezebert"),x5o=o(" \u2014 "),dj=a("a"),$5o=o("SqueezeBertForMaskedLM"),k5o=o(" (SqueezeBERT model)"),S5o=l(),P_=a("li"),gde=a("strong"),R5o=o("t5"),P5o=o(" \u2014 "),cj=a("a"),B5o=o("T5ForConditionalGeneration"),I5o=o(" (T5 model)"),N5o=l(),B_=a("li"),hde=a("strong"),q5o=o("tapas"),j5o=o(" \u2014 "),mj=a("a"),D5o=o("TapasForMaskedLM"),G5o=o(" (TAPAS model)"),O5o=l(),I_=a("li"),ude=a("strong"),V5o=o("transfo-xl"),X5o=o(" \u2014 "),fj=a("a"),z5o=o("TransfoXLLMHeadModel"),W5o=o(" (Transformer-XL model)"),Q5o=l(),N_=a("li"),pde=a("strong"),H5o=o("unispeech"),U5o=o(" \u2014 "),gj=a("a"),J5o=o("UniSpeechForPreTraining"),Y5o=o(" (UniSpeech model)"),K5o=l(),q_=a("li"),_de=a("strong"),Z5o=o("unispeech-sat"),e3o=o(" \u2014 "),hj=a("a"),o3o=o("UniSpeechSatForPreTraining"),r3o=o(" (UniSpeechSat model)"),t3o=l(),j_=a("li"),bde=a("strong"),a3o=o("visual_bert"),n3o=o(" \u2014 "),uj=a("a"),s3o=o("VisualBertForPreTraining"),l3o=o(" (VisualBert model)"),i3o=l(),D_=a("li"),vde=a("strong"),d3o=o("vit_mae"),c3o=o(" \u2014 "),pj=a("a"),m3o=o("ViTMAEForPreTraining"),f3o=o(" (ViTMAE model)"),g3o=l(),G_=a("li"),Fde=a("strong"),h3o=o("wav2vec2"),u3o=o(" \u2014 "),_j=a("a"),p3o=o("Wav2Vec2ForPreTraining"),_3o=o(" (Wav2Vec2 model)"),b3o=l(),O_=a("li"),Tde=a("strong"),v3o=o("wav2vec2-conformer"),F3o=o(" \u2014 "),bj=a("a"),T3o=o("Wav2Vec2ConformerForPreTraining"),M3o=o(" (Wav2Vec2-Conformer model)"),E3o=l(),V_=a("li"),Mde=a("strong"),C3o=o("xlm"),w3o=o(" \u2014 "),vj=a("a"),A3o=o("XLMWithLMHeadModel"),y3o=o(" (XLM model)"),L3o=l(),X_=a("li"),Ede=a("strong"),x3o=o("xlm-roberta"),$3o=o(" \u2014 "),Fj=a("a"),k3o=o("XLMRobertaForMaskedLM"),S3o=o(" (XLM-RoBERTa model)"),R3o=l(),z_=a("li"),Cde=a("strong"),P3o=o("xlm-roberta-xl"),B3o=o(" \u2014 "),Tj=a("a"),I3o=o("XLMRobertaXLForMaskedLM"),N3o=o(" (XLM-RoBERTa-XL model)"),q3o=l(),W_=a("li"),wde=a("strong"),j3o=o("xlnet"),D3o=o(" \u2014 "),Mj=a("a"),G3o=o("XLNetLMHeadModel"),O3o=o(" (XLNet model)"),V3o=l(),Q_=a("p"),X3o=o("The model is set in evaluation mode by default using "),Ade=a("code"),z3o=o("model.eval()"),W3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yde=a("code"),Q3o=o("model.train()"),H3o=l(),F(H_.$$.fragment),Bqe=l(),ki=a("h2"),U_=a("a"),Lde=a("span"),F(hL.$$.fragment),U3o=l(),xde=a("span"),J3o=o("AutoModelForCausalLM"),Iqe=l(),$o=a("div"),F(uL.$$.fragment),Y3o=l(),Si=a("p"),K3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Ej=a("a"),Z3o=o("from_pretrained()"),ewo=o(" class method or the "),Cj=a("a"),owo=o("from_config()"),rwo=o(` class
method.`),two=l(),pL=a("p"),awo=o("This class cannot be instantiated directly using "),$de=a("code"),nwo=o("__init__()"),swo=o(" (throws an error)."),lwo=l(),nt=a("div"),F(_L.$$.fragment),iwo=l(),kde=a("p"),dwo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),cwo=l(),Ri=a("p"),mwo=o(`Note:
Loading a model from its configuration file does `),Sde=a("strong"),fwo=o("not"),gwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wj=a("a"),hwo=o("from_pretrained()"),uwo=o(" to load the model weights."),pwo=l(),F(J_.$$.fragment),_wo=l(),Ke=a("div"),F(bL.$$.fragment),bwo=l(),Rde=a("p"),vwo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Fwo=l(),$a=a("p"),Two=o("The model class to instantiate is selected based on the "),Pde=a("code"),Mwo=o("model_type"),Ewo=o(` property of the config object (either
passed as an argument or loaded from `),Bde=a("code"),Cwo=o("pretrained_model_name_or_path"),wwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ide=a("code"),Awo=o("pretrained_model_name_or_path"),ywo=o(":"),Lwo=l(),z=a("ul"),Y_=a("li"),Nde=a("strong"),xwo=o("bart"),$wo=o(" \u2014 "),Aj=a("a"),kwo=o("BartForCausalLM"),Swo=o(" (BART model)"),Rwo=l(),K_=a("li"),qde=a("strong"),Pwo=o("bert"),Bwo=o(" \u2014 "),yj=a("a"),Iwo=o("BertLMHeadModel"),Nwo=o(" (BERT model)"),qwo=l(),Z_=a("li"),jde=a("strong"),jwo=o("bert-generation"),Dwo=o(" \u2014 "),Lj=a("a"),Gwo=o("BertGenerationDecoder"),Owo=o(" (Bert Generation model)"),Vwo=l(),eb=a("li"),Dde=a("strong"),Xwo=o("big_bird"),zwo=o(" \u2014 "),xj=a("a"),Wwo=o("BigBirdForCausalLM"),Qwo=o(" (BigBird model)"),Hwo=l(),ob=a("li"),Gde=a("strong"),Uwo=o("bigbird_pegasus"),Jwo=o(" \u2014 "),$j=a("a"),Ywo=o("BigBirdPegasusForCausalLM"),Kwo=o(" (BigBirdPegasus model)"),Zwo=l(),rb=a("li"),Ode=a("strong"),e0o=o("blenderbot"),o0o=o(" \u2014 "),kj=a("a"),r0o=o("BlenderbotForCausalLM"),t0o=o(" (Blenderbot model)"),a0o=l(),tb=a("li"),Vde=a("strong"),n0o=o("blenderbot-small"),s0o=o(" \u2014 "),Sj=a("a"),l0o=o("BlenderbotSmallForCausalLM"),i0o=o(" (BlenderbotSmall model)"),d0o=l(),ab=a("li"),Xde=a("strong"),c0o=o("camembert"),m0o=o(" \u2014 "),Rj=a("a"),f0o=o("CamembertForCausalLM"),g0o=o(" (CamemBERT model)"),h0o=l(),nb=a("li"),zde=a("strong"),u0o=o("ctrl"),p0o=o(" \u2014 "),Pj=a("a"),_0o=o("CTRLLMHeadModel"),b0o=o(" (CTRL model)"),v0o=l(),sb=a("li"),Wde=a("strong"),F0o=o("data2vec-text"),T0o=o(" \u2014 "),Bj=a("a"),M0o=o("Data2VecTextForCausalLM"),E0o=o(" (Data2VecText model)"),C0o=l(),lb=a("li"),Qde=a("strong"),w0o=o("electra"),A0o=o(" \u2014 "),Ij=a("a"),y0o=o("ElectraForCausalLM"),L0o=o(" (ELECTRA model)"),x0o=l(),ib=a("li"),Hde=a("strong"),$0o=o("gpt2"),k0o=o(" \u2014 "),Nj=a("a"),S0o=o("GPT2LMHeadModel"),R0o=o(" (OpenAI GPT-2 model)"),P0o=l(),db=a("li"),Ude=a("strong"),B0o=o("gpt_neo"),I0o=o(" \u2014 "),qj=a("a"),N0o=o("GPTNeoForCausalLM"),q0o=o(" (GPT Neo model)"),j0o=l(),cb=a("li"),Jde=a("strong"),D0o=o("gpt_neox"),G0o=o(" \u2014 "),jj=a("a"),O0o=o("GPTNeoXForCausalLM"),V0o=o(" (GPT NeoX model)"),X0o=l(),mb=a("li"),Yde=a("strong"),z0o=o("gptj"),W0o=o(" \u2014 "),Dj=a("a"),Q0o=o("GPTJForCausalLM"),H0o=o(" (GPT-J model)"),U0o=l(),fb=a("li"),Kde=a("strong"),J0o=o("marian"),Y0o=o(" \u2014 "),Gj=a("a"),K0o=o("MarianForCausalLM"),Z0o=o(" (Marian model)"),e6o=l(),gb=a("li"),Zde=a("strong"),o6o=o("mbart"),r6o=o(" \u2014 "),Oj=a("a"),t6o=o("MBartForCausalLM"),a6o=o(" (mBART model)"),n6o=l(),hb=a("li"),ece=a("strong"),s6o=o("megatron-bert"),l6o=o(" \u2014 "),Vj=a("a"),i6o=o("MegatronBertForCausalLM"),d6o=o(" (MegatronBert model)"),c6o=l(),ub=a("li"),oce=a("strong"),m6o=o("openai-gpt"),f6o=o(" \u2014 "),Xj=a("a"),g6o=o("OpenAIGPTLMHeadModel"),h6o=o(" (OpenAI GPT model)"),u6o=l(),pb=a("li"),rce=a("strong"),p6o=o("opt"),_6o=o(" \u2014 "),zj=a("a"),b6o=o("OPTForCausalLM"),v6o=o(" (OPT model)"),F6o=l(),_b=a("li"),tce=a("strong"),T6o=o("pegasus"),M6o=o(" \u2014 "),Wj=a("a"),E6o=o("PegasusForCausalLM"),C6o=o(" (Pegasus model)"),w6o=l(),bb=a("li"),ace=a("strong"),A6o=o("plbart"),y6o=o(" \u2014 "),Qj=a("a"),L6o=o("PLBartForCausalLM"),x6o=o(" (PLBart model)"),$6o=l(),vb=a("li"),nce=a("strong"),k6o=o("prophetnet"),S6o=o(" \u2014 "),Hj=a("a"),R6o=o("ProphetNetForCausalLM"),P6o=o(" (ProphetNet model)"),B6o=l(),Fb=a("li"),sce=a("strong"),I6o=o("qdqbert"),N6o=o(" \u2014 "),Uj=a("a"),q6o=o("QDQBertLMHeadModel"),j6o=o(" (QDQBert model)"),D6o=l(),Tb=a("li"),lce=a("strong"),G6o=o("reformer"),O6o=o(" \u2014 "),Jj=a("a"),V6o=o("ReformerModelWithLMHead"),X6o=o(" (Reformer model)"),z6o=l(),Mb=a("li"),ice=a("strong"),W6o=o("rembert"),Q6o=o(" \u2014 "),Yj=a("a"),H6o=o("RemBertForCausalLM"),U6o=o(" (RemBERT model)"),J6o=l(),Eb=a("li"),dce=a("strong"),Y6o=o("roberta"),K6o=o(" \u2014 "),Kj=a("a"),Z6o=o("RobertaForCausalLM"),eAo=o(" (RoBERTa model)"),oAo=l(),Cb=a("li"),cce=a("strong"),rAo=o("roformer"),tAo=o(" \u2014 "),Zj=a("a"),aAo=o("RoFormerForCausalLM"),nAo=o(" (RoFormer model)"),sAo=l(),wb=a("li"),mce=a("strong"),lAo=o("speech_to_text_2"),iAo=o(" \u2014 "),eD=a("a"),dAo=o("Speech2Text2ForCausalLM"),cAo=o(" (Speech2Text2 model)"),mAo=l(),Ab=a("li"),fce=a("strong"),fAo=o("transfo-xl"),gAo=o(" \u2014 "),oD=a("a"),hAo=o("TransfoXLLMHeadModel"),uAo=o(" (Transformer-XL model)"),pAo=l(),yb=a("li"),gce=a("strong"),_Ao=o("trocr"),bAo=o(" \u2014 "),rD=a("a"),vAo=o("TrOCRForCausalLM"),FAo=o(" (TrOCR model)"),TAo=l(),Lb=a("li"),hce=a("strong"),MAo=o("xglm"),EAo=o(" \u2014 "),tD=a("a"),CAo=o("XGLMForCausalLM"),wAo=o(" (XGLM model)"),AAo=l(),xb=a("li"),uce=a("strong"),yAo=o("xlm"),LAo=o(" \u2014 "),aD=a("a"),xAo=o("XLMWithLMHeadModel"),$Ao=o(" (XLM model)"),kAo=l(),$b=a("li"),pce=a("strong"),SAo=o("xlm-prophetnet"),RAo=o(" \u2014 "),nD=a("a"),PAo=o("XLMProphetNetForCausalLM"),BAo=o(" (XLMProphetNet model)"),IAo=l(),kb=a("li"),_ce=a("strong"),NAo=o("xlm-roberta"),qAo=o(" \u2014 "),sD=a("a"),jAo=o("XLMRobertaForCausalLM"),DAo=o(" (XLM-RoBERTa model)"),GAo=l(),Sb=a("li"),bce=a("strong"),OAo=o("xlm-roberta-xl"),VAo=o(" \u2014 "),lD=a("a"),XAo=o("XLMRobertaXLForCausalLM"),zAo=o(" (XLM-RoBERTa-XL model)"),WAo=l(),Rb=a("li"),vce=a("strong"),QAo=o("xlnet"),HAo=o(" \u2014 "),iD=a("a"),UAo=o("XLNetLMHeadModel"),JAo=o(" (XLNet model)"),YAo=l(),Pb=a("p"),KAo=o("The model is set in evaluation mode by default using "),Fce=a("code"),ZAo=o("model.eval()"),eyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tce=a("code"),oyo=o("model.train()"),ryo=l(),F(Bb.$$.fragment),Nqe=l(),Pi=a("h2"),Ib=a("a"),Mce=a("span"),F(vL.$$.fragment),tyo=l(),Ece=a("span"),ayo=o("AutoModelForMaskedLM"),qqe=l(),ko=a("div"),F(FL.$$.fragment),nyo=l(),Bi=a("p"),syo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),dD=a("a"),lyo=o("from_pretrained()"),iyo=o(" class method or the "),cD=a("a"),dyo=o("from_config()"),cyo=o(` class
method.`),myo=l(),TL=a("p"),fyo=o("This class cannot be instantiated directly using "),Cce=a("code"),gyo=o("__init__()"),hyo=o(" (throws an error)."),uyo=l(),st=a("div"),F(ML.$$.fragment),pyo=l(),wce=a("p"),_yo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),byo=l(),Ii=a("p"),vyo=o(`Note:
Loading a model from its configuration file does `),Ace=a("strong"),Fyo=o("not"),Tyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mD=a("a"),Myo=o("from_pretrained()"),Eyo=o(" to load the model weights."),Cyo=l(),F(Nb.$$.fragment),wyo=l(),Ze=a("div"),F(EL.$$.fragment),Ayo=l(),yce=a("p"),yyo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Lyo=l(),ka=a("p"),xyo=o("The model class to instantiate is selected based on the "),Lce=a("code"),$yo=o("model_type"),kyo=o(` property of the config object (either
passed as an argument or loaded from `),xce=a("code"),Syo=o("pretrained_model_name_or_path"),Ryo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ce=a("code"),Pyo=o("pretrained_model_name_or_path"),Byo=o(":"),Iyo=l(),W=a("ul"),qb=a("li"),kce=a("strong"),Nyo=o("albert"),qyo=o(" \u2014 "),fD=a("a"),jyo=o("AlbertForMaskedLM"),Dyo=o(" (ALBERT model)"),Gyo=l(),jb=a("li"),Sce=a("strong"),Oyo=o("bart"),Vyo=o(" \u2014 "),gD=a("a"),Xyo=o("BartForConditionalGeneration"),zyo=o(" (BART model)"),Wyo=l(),Db=a("li"),Rce=a("strong"),Qyo=o("bert"),Hyo=o(" \u2014 "),hD=a("a"),Uyo=o("BertForMaskedLM"),Jyo=o(" (BERT model)"),Yyo=l(),Gb=a("li"),Pce=a("strong"),Kyo=o("big_bird"),Zyo=o(" \u2014 "),uD=a("a"),eLo=o("BigBirdForMaskedLM"),oLo=o(" (BigBird model)"),rLo=l(),Ob=a("li"),Bce=a("strong"),tLo=o("camembert"),aLo=o(" \u2014 "),pD=a("a"),nLo=o("CamembertForMaskedLM"),sLo=o(" (CamemBERT model)"),lLo=l(),Vb=a("li"),Ice=a("strong"),iLo=o("convbert"),dLo=o(" \u2014 "),_D=a("a"),cLo=o("ConvBertForMaskedLM"),mLo=o(" (ConvBERT model)"),fLo=l(),Xb=a("li"),Nce=a("strong"),gLo=o("data2vec-text"),hLo=o(" \u2014 "),bD=a("a"),uLo=o("Data2VecTextForMaskedLM"),pLo=o(" (Data2VecText model)"),_Lo=l(),zb=a("li"),qce=a("strong"),bLo=o("deberta"),vLo=o(" \u2014 "),vD=a("a"),FLo=o("DebertaForMaskedLM"),TLo=o(" (DeBERTa model)"),MLo=l(),Wb=a("li"),jce=a("strong"),ELo=o("deberta-v2"),CLo=o(" \u2014 "),FD=a("a"),wLo=o("DebertaV2ForMaskedLM"),ALo=o(" (DeBERTa-v2 model)"),yLo=l(),Qb=a("li"),Dce=a("strong"),LLo=o("distilbert"),xLo=o(" \u2014 "),TD=a("a"),$Lo=o("DistilBertForMaskedLM"),kLo=o(" (DistilBERT model)"),SLo=l(),Hb=a("li"),Gce=a("strong"),RLo=o("electra"),PLo=o(" \u2014 "),MD=a("a"),BLo=o("ElectraForMaskedLM"),ILo=o(" (ELECTRA model)"),NLo=l(),Ub=a("li"),Oce=a("strong"),qLo=o("flaubert"),jLo=o(" \u2014 "),ED=a("a"),DLo=o("FlaubertWithLMHeadModel"),GLo=o(" (FlauBERT model)"),OLo=l(),Jb=a("li"),Vce=a("strong"),VLo=o("fnet"),XLo=o(" \u2014 "),CD=a("a"),zLo=o("FNetForMaskedLM"),WLo=o(" (FNet model)"),QLo=l(),Yb=a("li"),Xce=a("strong"),HLo=o("funnel"),ULo=o(" \u2014 "),wD=a("a"),JLo=o("FunnelForMaskedLM"),YLo=o(" (Funnel Transformer model)"),KLo=l(),Kb=a("li"),zce=a("strong"),ZLo=o("ibert"),e8o=o(" \u2014 "),AD=a("a"),o8o=o("IBertForMaskedLM"),r8o=o(" (I-BERT model)"),t8o=l(),Zb=a("li"),Wce=a("strong"),a8o=o("layoutlm"),n8o=o(" \u2014 "),yD=a("a"),s8o=o("LayoutLMForMaskedLM"),l8o=o(" (LayoutLM model)"),i8o=l(),e2=a("li"),Qce=a("strong"),d8o=o("longformer"),c8o=o(" \u2014 "),LD=a("a"),m8o=o("LongformerForMaskedLM"),f8o=o(" (Longformer model)"),g8o=l(),o2=a("li"),Hce=a("strong"),h8o=o("luke"),u8o=o(" \u2014 "),xD=a("a"),p8o=o("LukeForMaskedLM"),_8o=o(" (LUKE model)"),b8o=l(),r2=a("li"),Uce=a("strong"),v8o=o("mbart"),F8o=o(" \u2014 "),$D=a("a"),T8o=o("MBartForConditionalGeneration"),M8o=o(" (mBART model)"),E8o=l(),t2=a("li"),Jce=a("strong"),C8o=o("megatron-bert"),w8o=o(" \u2014 "),kD=a("a"),A8o=o("MegatronBertForMaskedLM"),y8o=o(" (MegatronBert model)"),L8o=l(),a2=a("li"),Yce=a("strong"),x8o=o("mobilebert"),$8o=o(" \u2014 "),SD=a("a"),k8o=o("MobileBertForMaskedLM"),S8o=o(" (MobileBERT model)"),R8o=l(),n2=a("li"),Kce=a("strong"),P8o=o("mpnet"),B8o=o(" \u2014 "),RD=a("a"),I8o=o("MPNetForMaskedLM"),N8o=o(" (MPNet model)"),q8o=l(),s2=a("li"),Zce=a("strong"),j8o=o("nystromformer"),D8o=o(" \u2014 "),PD=a("a"),G8o=o("NystromformerForMaskedLM"),O8o=o(" (Nystromformer model)"),V8o=l(),l2=a("li"),eme=a("strong"),X8o=o("perceiver"),z8o=o(" \u2014 "),BD=a("a"),W8o=o("PerceiverForMaskedLM"),Q8o=o(" (Perceiver model)"),H8o=l(),i2=a("li"),ome=a("strong"),U8o=o("qdqbert"),J8o=o(" \u2014 "),ID=a("a"),Y8o=o("QDQBertForMaskedLM"),K8o=o(" (QDQBert model)"),Z8o=l(),d2=a("li"),rme=a("strong"),e7o=o("reformer"),o7o=o(" \u2014 "),ND=a("a"),r7o=o("ReformerForMaskedLM"),t7o=o(" (Reformer model)"),a7o=l(),c2=a("li"),tme=a("strong"),n7o=o("rembert"),s7o=o(" \u2014 "),qD=a("a"),l7o=o("RemBertForMaskedLM"),i7o=o(" (RemBERT model)"),d7o=l(),m2=a("li"),ame=a("strong"),c7o=o("roberta"),m7o=o(" \u2014 "),jD=a("a"),f7o=o("RobertaForMaskedLM"),g7o=o(" (RoBERTa model)"),h7o=l(),f2=a("li"),nme=a("strong"),u7o=o("roformer"),p7o=o(" \u2014 "),DD=a("a"),_7o=o("RoFormerForMaskedLM"),b7o=o(" (RoFormer model)"),v7o=l(),g2=a("li"),sme=a("strong"),F7o=o("squeezebert"),T7o=o(" \u2014 "),GD=a("a"),M7o=o("SqueezeBertForMaskedLM"),E7o=o(" (SqueezeBERT model)"),C7o=l(),h2=a("li"),lme=a("strong"),w7o=o("tapas"),A7o=o(" \u2014 "),OD=a("a"),y7o=o("TapasForMaskedLM"),L7o=o(" (TAPAS model)"),x7o=l(),u2=a("li"),ime=a("strong"),$7o=o("wav2vec2"),k7o=o(" \u2014 "),dme=a("code"),S7o=o("Wav2Vec2ForMaskedLM"),R7o=o(" (Wav2Vec2 model)"),P7o=l(),p2=a("li"),cme=a("strong"),B7o=o("xlm"),I7o=o(" \u2014 "),VD=a("a"),N7o=o("XLMWithLMHeadModel"),q7o=o(" (XLM model)"),j7o=l(),_2=a("li"),mme=a("strong"),D7o=o("xlm-roberta"),G7o=o(" \u2014 "),XD=a("a"),O7o=o("XLMRobertaForMaskedLM"),V7o=o(" (XLM-RoBERTa model)"),X7o=l(),b2=a("li"),fme=a("strong"),z7o=o("xlm-roberta-xl"),W7o=o(" \u2014 "),zD=a("a"),Q7o=o("XLMRobertaXLForMaskedLM"),H7o=o(" (XLM-RoBERTa-XL model)"),U7o=l(),v2=a("li"),gme=a("strong"),J7o=o("yoso"),Y7o=o(" \u2014 "),WD=a("a"),K7o=o("YosoForMaskedLM"),Z7o=o(" (YOSO model)"),e9o=l(),F2=a("p"),o9o=o("The model is set in evaluation mode by default using "),hme=a("code"),r9o=o("model.eval()"),t9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ume=a("code"),a9o=o("model.train()"),n9o=l(),F(T2.$$.fragment),jqe=l(),Ni=a("h2"),M2=a("a"),pme=a("span"),F(CL.$$.fragment),s9o=l(),_me=a("span"),l9o=o("AutoModelForSeq2SeqLM"),Dqe=l(),So=a("div"),F(wL.$$.fragment),i9o=l(),qi=a("p"),d9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),QD=a("a"),c9o=o("from_pretrained()"),m9o=o(" class method or the "),HD=a("a"),f9o=o("from_config()"),g9o=o(` class
method.`),h9o=l(),AL=a("p"),u9o=o("This class cannot be instantiated directly using "),bme=a("code"),p9o=o("__init__()"),_9o=o(" (throws an error)."),b9o=l(),lt=a("div"),F(yL.$$.fragment),v9o=l(),vme=a("p"),F9o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),T9o=l(),ji=a("p"),M9o=o(`Note:
Loading a model from its configuration file does `),Fme=a("strong"),E9o=o("not"),C9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UD=a("a"),w9o=o("from_pretrained()"),A9o=o(" to load the model weights."),y9o=l(),F(E2.$$.fragment),L9o=l(),eo=a("div"),F(LL.$$.fragment),x9o=l(),Tme=a("p"),$9o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),k9o=l(),Sa=a("p"),S9o=o("The model class to instantiate is selected based on the "),Mme=a("code"),R9o=o("model_type"),P9o=o(` property of the config object (either
passed as an argument or loaded from `),Eme=a("code"),B9o=o("pretrained_model_name_or_path"),I9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cme=a("code"),N9o=o("pretrained_model_name_or_path"),q9o=o(":"),j9o=l(),pe=a("ul"),C2=a("li"),wme=a("strong"),D9o=o("bart"),G9o=o(" \u2014 "),JD=a("a"),O9o=o("BartForConditionalGeneration"),V9o=o(" (BART model)"),X9o=l(),w2=a("li"),Ame=a("strong"),z9o=o("bigbird_pegasus"),W9o=o(" \u2014 "),YD=a("a"),Q9o=o("BigBirdPegasusForConditionalGeneration"),H9o=o(" (BigBirdPegasus model)"),U9o=l(),A2=a("li"),yme=a("strong"),J9o=o("blenderbot"),Y9o=o(" \u2014 "),KD=a("a"),K9o=o("BlenderbotForConditionalGeneration"),Z9o=o(" (Blenderbot model)"),exo=l(),y2=a("li"),Lme=a("strong"),oxo=o("blenderbot-small"),rxo=o(" \u2014 "),ZD=a("a"),txo=o("BlenderbotSmallForConditionalGeneration"),axo=o(" (BlenderbotSmall model)"),nxo=l(),L2=a("li"),xme=a("strong"),sxo=o("encoder-decoder"),lxo=o(" \u2014 "),eG=a("a"),ixo=o("EncoderDecoderModel"),dxo=o(" (Encoder decoder model)"),cxo=l(),x2=a("li"),$me=a("strong"),mxo=o("fsmt"),fxo=o(" \u2014 "),oG=a("a"),gxo=o("FSMTForConditionalGeneration"),hxo=o(" (FairSeq Machine-Translation model)"),uxo=l(),$2=a("li"),kme=a("strong"),pxo=o("led"),_xo=o(" \u2014 "),rG=a("a"),bxo=o("LEDForConditionalGeneration"),vxo=o(" (LED model)"),Fxo=l(),k2=a("li"),Sme=a("strong"),Txo=o("m2m_100"),Mxo=o(" \u2014 "),tG=a("a"),Exo=o("M2M100ForConditionalGeneration"),Cxo=o(" (M2M100 model)"),wxo=l(),S2=a("li"),Rme=a("strong"),Axo=o("marian"),yxo=o(" \u2014 "),aG=a("a"),Lxo=o("MarianMTModel"),xxo=o(" (Marian model)"),$xo=l(),R2=a("li"),Pme=a("strong"),kxo=o("mbart"),Sxo=o(" \u2014 "),nG=a("a"),Rxo=o("MBartForConditionalGeneration"),Pxo=o(" (mBART model)"),Bxo=l(),P2=a("li"),Bme=a("strong"),Ixo=o("mt5"),Nxo=o(" \u2014 "),sG=a("a"),qxo=o("MT5ForConditionalGeneration"),jxo=o(" (mT5 model)"),Dxo=l(),B2=a("li"),Ime=a("strong"),Gxo=o("pegasus"),Oxo=o(" \u2014 "),lG=a("a"),Vxo=o("PegasusForConditionalGeneration"),Xxo=o(" (Pegasus model)"),zxo=l(),I2=a("li"),Nme=a("strong"),Wxo=o("plbart"),Qxo=o(" \u2014 "),iG=a("a"),Hxo=o("PLBartForConditionalGeneration"),Uxo=o(" (PLBart model)"),Jxo=l(),N2=a("li"),qme=a("strong"),Yxo=o("prophetnet"),Kxo=o(" \u2014 "),dG=a("a"),Zxo=o("ProphetNetForConditionalGeneration"),e$o=o(" (ProphetNet model)"),o$o=l(),q2=a("li"),jme=a("strong"),r$o=o("t5"),t$o=o(" \u2014 "),cG=a("a"),a$o=o("T5ForConditionalGeneration"),n$o=o(" (T5 model)"),s$o=l(),j2=a("li"),Dme=a("strong"),l$o=o("xlm-prophetnet"),i$o=o(" \u2014 "),mG=a("a"),d$o=o("XLMProphetNetForConditionalGeneration"),c$o=o(" (XLMProphetNet model)"),m$o=l(),D2=a("p"),f$o=o("The model is set in evaluation mode by default using "),Gme=a("code"),g$o=o("model.eval()"),h$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ome=a("code"),u$o=o("model.train()"),p$o=l(),F(G2.$$.fragment),Gqe=l(),Di=a("h2"),O2=a("a"),Vme=a("span"),F(xL.$$.fragment),_$o=l(),Xme=a("span"),b$o=o("AutoModelForSequenceClassification"),Oqe=l(),Ro=a("div"),F($L.$$.fragment),v$o=l(),Gi=a("p"),F$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),fG=a("a"),T$o=o("from_pretrained()"),M$o=o(" class method or the "),gG=a("a"),E$o=o("from_config()"),C$o=o(` class
method.`),w$o=l(),kL=a("p"),A$o=o("This class cannot be instantiated directly using "),zme=a("code"),y$o=o("__init__()"),L$o=o(" (throws an error)."),x$o=l(),it=a("div"),F(SL.$$.fragment),$$o=l(),Wme=a("p"),k$o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),S$o=l(),Oi=a("p"),R$o=o(`Note:
Loading a model from its configuration file does `),Qme=a("strong"),P$o=o("not"),B$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hG=a("a"),I$o=o("from_pretrained()"),N$o=o(" to load the model weights."),q$o=l(),F(V2.$$.fragment),j$o=l(),oo=a("div"),F(RL.$$.fragment),D$o=l(),Hme=a("p"),G$o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),O$o=l(),Ra=a("p"),V$o=o("The model class to instantiate is selected based on the "),Ume=a("code"),X$o=o("model_type"),z$o=o(` property of the config object (either
passed as an argument or loaded from `),Jme=a("code"),W$o=o("pretrained_model_name_or_path"),Q$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yme=a("code"),H$o=o("pretrained_model_name_or_path"),U$o=o(":"),J$o=l(),N=a("ul"),X2=a("li"),Kme=a("strong"),Y$o=o("albert"),K$o=o(" \u2014 "),uG=a("a"),Z$o=o("AlbertForSequenceClassification"),eko=o(" (ALBERT model)"),oko=l(),z2=a("li"),Zme=a("strong"),rko=o("bart"),tko=o(" \u2014 "),pG=a("a"),ako=o("BartForSequenceClassification"),nko=o(" (BART model)"),sko=l(),W2=a("li"),efe=a("strong"),lko=o("bert"),iko=o(" \u2014 "),_G=a("a"),dko=o("BertForSequenceClassification"),cko=o(" (BERT model)"),mko=l(),Q2=a("li"),ofe=a("strong"),fko=o("big_bird"),gko=o(" \u2014 "),bG=a("a"),hko=o("BigBirdForSequenceClassification"),uko=o(" (BigBird model)"),pko=l(),H2=a("li"),rfe=a("strong"),_ko=o("bigbird_pegasus"),bko=o(" \u2014 "),vG=a("a"),vko=o("BigBirdPegasusForSequenceClassification"),Fko=o(" (BigBirdPegasus model)"),Tko=l(),U2=a("li"),tfe=a("strong"),Mko=o("camembert"),Eko=o(" \u2014 "),FG=a("a"),Cko=o("CamembertForSequenceClassification"),wko=o(" (CamemBERT model)"),Ako=l(),J2=a("li"),afe=a("strong"),yko=o("canine"),Lko=o(" \u2014 "),TG=a("a"),xko=o("CanineForSequenceClassification"),$ko=o(" (Canine model)"),kko=l(),Y2=a("li"),nfe=a("strong"),Sko=o("convbert"),Rko=o(" \u2014 "),MG=a("a"),Pko=o("ConvBertForSequenceClassification"),Bko=o(" (ConvBERT model)"),Iko=l(),K2=a("li"),sfe=a("strong"),Nko=o("ctrl"),qko=o(" \u2014 "),EG=a("a"),jko=o("CTRLForSequenceClassification"),Dko=o(" (CTRL model)"),Gko=l(),Z2=a("li"),lfe=a("strong"),Oko=o("data2vec-text"),Vko=o(" \u2014 "),CG=a("a"),Xko=o("Data2VecTextForSequenceClassification"),zko=o(" (Data2VecText model)"),Wko=l(),ev=a("li"),ife=a("strong"),Qko=o("deberta"),Hko=o(" \u2014 "),wG=a("a"),Uko=o("DebertaForSequenceClassification"),Jko=o(" (DeBERTa model)"),Yko=l(),ov=a("li"),dfe=a("strong"),Kko=o("deberta-v2"),Zko=o(" \u2014 "),AG=a("a"),eSo=o("DebertaV2ForSequenceClassification"),oSo=o(" (DeBERTa-v2 model)"),rSo=l(),rv=a("li"),cfe=a("strong"),tSo=o("distilbert"),aSo=o(" \u2014 "),yG=a("a"),nSo=o("DistilBertForSequenceClassification"),sSo=o(" (DistilBERT model)"),lSo=l(),tv=a("li"),mfe=a("strong"),iSo=o("electra"),dSo=o(" \u2014 "),LG=a("a"),cSo=o("ElectraForSequenceClassification"),mSo=o(" (ELECTRA model)"),fSo=l(),av=a("li"),ffe=a("strong"),gSo=o("flaubert"),hSo=o(" \u2014 "),xG=a("a"),uSo=o("FlaubertForSequenceClassification"),pSo=o(" (FlauBERT model)"),_So=l(),nv=a("li"),gfe=a("strong"),bSo=o("fnet"),vSo=o(" \u2014 "),$G=a("a"),FSo=o("FNetForSequenceClassification"),TSo=o(" (FNet model)"),MSo=l(),sv=a("li"),hfe=a("strong"),ESo=o("funnel"),CSo=o(" \u2014 "),kG=a("a"),wSo=o("FunnelForSequenceClassification"),ASo=o(" (Funnel Transformer model)"),ySo=l(),lv=a("li"),ufe=a("strong"),LSo=o("gpt2"),xSo=o(" \u2014 "),SG=a("a"),$So=o("GPT2ForSequenceClassification"),kSo=o(" (OpenAI GPT-2 model)"),SSo=l(),iv=a("li"),pfe=a("strong"),RSo=o("gpt_neo"),PSo=o(" \u2014 "),RG=a("a"),BSo=o("GPTNeoForSequenceClassification"),ISo=o(" (GPT Neo model)"),NSo=l(),dv=a("li"),_fe=a("strong"),qSo=o("gptj"),jSo=o(" \u2014 "),PG=a("a"),DSo=o("GPTJForSequenceClassification"),GSo=o(" (GPT-J model)"),OSo=l(),cv=a("li"),bfe=a("strong"),VSo=o("ibert"),XSo=o(" \u2014 "),BG=a("a"),zSo=o("IBertForSequenceClassification"),WSo=o(" (I-BERT model)"),QSo=l(),mv=a("li"),vfe=a("strong"),HSo=o("layoutlm"),USo=o(" \u2014 "),IG=a("a"),JSo=o("LayoutLMForSequenceClassification"),YSo=o(" (LayoutLM model)"),KSo=l(),fv=a("li"),Ffe=a("strong"),ZSo=o("layoutlmv2"),eRo=o(" \u2014 "),NG=a("a"),oRo=o("LayoutLMv2ForSequenceClassification"),rRo=o(" (LayoutLMv2 model)"),tRo=l(),gv=a("li"),Tfe=a("strong"),aRo=o("layoutlmv3"),nRo=o(" \u2014 "),qG=a("a"),sRo=o("LayoutLMv3ForSequenceClassification"),lRo=o(" (LayoutLMv3 model)"),iRo=l(),hv=a("li"),Mfe=a("strong"),dRo=o("led"),cRo=o(" \u2014 "),jG=a("a"),mRo=o("LEDForSequenceClassification"),fRo=o(" (LED model)"),gRo=l(),uv=a("li"),Efe=a("strong"),hRo=o("longformer"),uRo=o(" \u2014 "),DG=a("a"),pRo=o("LongformerForSequenceClassification"),_Ro=o(" (Longformer model)"),bRo=l(),pv=a("li"),Cfe=a("strong"),vRo=o("mbart"),FRo=o(" \u2014 "),GG=a("a"),TRo=o("MBartForSequenceClassification"),MRo=o(" (mBART model)"),ERo=l(),_v=a("li"),wfe=a("strong"),CRo=o("megatron-bert"),wRo=o(" \u2014 "),OG=a("a"),ARo=o("MegatronBertForSequenceClassification"),yRo=o(" (MegatronBert model)"),LRo=l(),bv=a("li"),Afe=a("strong"),xRo=o("mobilebert"),$Ro=o(" \u2014 "),VG=a("a"),kRo=o("MobileBertForSequenceClassification"),SRo=o(" (MobileBERT model)"),RRo=l(),vv=a("li"),yfe=a("strong"),PRo=o("mpnet"),BRo=o(" \u2014 "),XG=a("a"),IRo=o("MPNetForSequenceClassification"),NRo=o(" (MPNet model)"),qRo=l(),Fv=a("li"),Lfe=a("strong"),jRo=o("nystromformer"),DRo=o(" \u2014 "),zG=a("a"),GRo=o("NystromformerForSequenceClassification"),ORo=o(" (Nystromformer model)"),VRo=l(),Tv=a("li"),xfe=a("strong"),XRo=o("openai-gpt"),zRo=o(" \u2014 "),WG=a("a"),WRo=o("OpenAIGPTForSequenceClassification"),QRo=o(" (OpenAI GPT model)"),HRo=l(),Mv=a("li"),$fe=a("strong"),URo=o("perceiver"),JRo=o(" \u2014 "),QG=a("a"),YRo=o("PerceiverForSequenceClassification"),KRo=o(" (Perceiver model)"),ZRo=l(),Ev=a("li"),kfe=a("strong"),ePo=o("plbart"),oPo=o(" \u2014 "),HG=a("a"),rPo=o("PLBartForSequenceClassification"),tPo=o(" (PLBart model)"),aPo=l(),Cv=a("li"),Sfe=a("strong"),nPo=o("qdqbert"),sPo=o(" \u2014 "),UG=a("a"),lPo=o("QDQBertForSequenceClassification"),iPo=o(" (QDQBert model)"),dPo=l(),wv=a("li"),Rfe=a("strong"),cPo=o("reformer"),mPo=o(" \u2014 "),JG=a("a"),fPo=o("ReformerForSequenceClassification"),gPo=o(" (Reformer model)"),hPo=l(),Av=a("li"),Pfe=a("strong"),uPo=o("rembert"),pPo=o(" \u2014 "),YG=a("a"),_Po=o("RemBertForSequenceClassification"),bPo=o(" (RemBERT model)"),vPo=l(),yv=a("li"),Bfe=a("strong"),FPo=o("roberta"),TPo=o(" \u2014 "),KG=a("a"),MPo=o("RobertaForSequenceClassification"),EPo=o(" (RoBERTa model)"),CPo=l(),Lv=a("li"),Ife=a("strong"),wPo=o("roformer"),APo=o(" \u2014 "),ZG=a("a"),yPo=o("RoFormerForSequenceClassification"),LPo=o(" (RoFormer model)"),xPo=l(),xv=a("li"),Nfe=a("strong"),$Po=o("squeezebert"),kPo=o(" \u2014 "),eO=a("a"),SPo=o("SqueezeBertForSequenceClassification"),RPo=o(" (SqueezeBERT model)"),PPo=l(),$v=a("li"),qfe=a("strong"),BPo=o("tapas"),IPo=o(" \u2014 "),oO=a("a"),NPo=o("TapasForSequenceClassification"),qPo=o(" (TAPAS model)"),jPo=l(),kv=a("li"),jfe=a("strong"),DPo=o("transfo-xl"),GPo=o(" \u2014 "),rO=a("a"),OPo=o("TransfoXLForSequenceClassification"),VPo=o(" (Transformer-XL model)"),XPo=l(),Sv=a("li"),Dfe=a("strong"),zPo=o("xlm"),WPo=o(" \u2014 "),tO=a("a"),QPo=o("XLMForSequenceClassification"),HPo=o(" (XLM model)"),UPo=l(),Rv=a("li"),Gfe=a("strong"),JPo=o("xlm-roberta"),YPo=o(" \u2014 "),aO=a("a"),KPo=o("XLMRobertaForSequenceClassification"),ZPo=o(" (XLM-RoBERTa model)"),eBo=l(),Pv=a("li"),Ofe=a("strong"),oBo=o("xlm-roberta-xl"),rBo=o(" \u2014 "),nO=a("a"),tBo=o("XLMRobertaXLForSequenceClassification"),aBo=o(" (XLM-RoBERTa-XL model)"),nBo=l(),Bv=a("li"),Vfe=a("strong"),sBo=o("xlnet"),lBo=o(" \u2014 "),sO=a("a"),iBo=o("XLNetForSequenceClassification"),dBo=o(" (XLNet model)"),cBo=l(),Iv=a("li"),Xfe=a("strong"),mBo=o("yoso"),fBo=o(" \u2014 "),lO=a("a"),gBo=o("YosoForSequenceClassification"),hBo=o(" (YOSO model)"),uBo=l(),Nv=a("p"),pBo=o("The model is set in evaluation mode by default using "),zfe=a("code"),_Bo=o("model.eval()"),bBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wfe=a("code"),vBo=o("model.train()"),FBo=l(),F(qv.$$.fragment),Vqe=l(),Vi=a("h2"),jv=a("a"),Qfe=a("span"),F(PL.$$.fragment),TBo=l(),Hfe=a("span"),MBo=o("AutoModelForMultipleChoice"),Xqe=l(),Po=a("div"),F(BL.$$.fragment),EBo=l(),Xi=a("p"),CBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),iO=a("a"),wBo=o("from_pretrained()"),ABo=o(" class method or the "),dO=a("a"),yBo=o("from_config()"),LBo=o(` class
method.`),xBo=l(),IL=a("p"),$Bo=o("This class cannot be instantiated directly using "),Ufe=a("code"),kBo=o("__init__()"),SBo=o(" (throws an error)."),RBo=l(),dt=a("div"),F(NL.$$.fragment),PBo=l(),Jfe=a("p"),BBo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),IBo=l(),zi=a("p"),NBo=o(`Note:
Loading a model from its configuration file does `),Yfe=a("strong"),qBo=o("not"),jBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cO=a("a"),DBo=o("from_pretrained()"),GBo=o(" to load the model weights."),OBo=l(),F(Dv.$$.fragment),VBo=l(),ro=a("div"),F(qL.$$.fragment),XBo=l(),Kfe=a("p"),zBo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),WBo=l(),Pa=a("p"),QBo=o("The model class to instantiate is selected based on the "),Zfe=a("code"),HBo=o("model_type"),UBo=o(` property of the config object (either
passed as an argument or loaded from `),ege=a("code"),JBo=o("pretrained_model_name_or_path"),YBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oge=a("code"),KBo=o("pretrained_model_name_or_path"),ZBo=o(":"),eIo=l(),K=a("ul"),Gv=a("li"),rge=a("strong"),oIo=o("albert"),rIo=o(" \u2014 "),mO=a("a"),tIo=o("AlbertForMultipleChoice"),aIo=o(" (ALBERT model)"),nIo=l(),Ov=a("li"),tge=a("strong"),sIo=o("bert"),lIo=o(" \u2014 "),fO=a("a"),iIo=o("BertForMultipleChoice"),dIo=o(" (BERT model)"),cIo=l(),Vv=a("li"),age=a("strong"),mIo=o("big_bird"),fIo=o(" \u2014 "),gO=a("a"),gIo=o("BigBirdForMultipleChoice"),hIo=o(" (BigBird model)"),uIo=l(),Xv=a("li"),nge=a("strong"),pIo=o("camembert"),_Io=o(" \u2014 "),hO=a("a"),bIo=o("CamembertForMultipleChoice"),vIo=o(" (CamemBERT model)"),FIo=l(),zv=a("li"),sge=a("strong"),TIo=o("canine"),MIo=o(" \u2014 "),uO=a("a"),EIo=o("CanineForMultipleChoice"),CIo=o(" (Canine model)"),wIo=l(),Wv=a("li"),lge=a("strong"),AIo=o("convbert"),yIo=o(" \u2014 "),pO=a("a"),LIo=o("ConvBertForMultipleChoice"),xIo=o(" (ConvBERT model)"),$Io=l(),Qv=a("li"),ige=a("strong"),kIo=o("data2vec-text"),SIo=o(" \u2014 "),_O=a("a"),RIo=o("Data2VecTextForMultipleChoice"),PIo=o(" (Data2VecText model)"),BIo=l(),Hv=a("li"),dge=a("strong"),IIo=o("deberta-v2"),NIo=o(" \u2014 "),bO=a("a"),qIo=o("DebertaV2ForMultipleChoice"),jIo=o(" (DeBERTa-v2 model)"),DIo=l(),Uv=a("li"),cge=a("strong"),GIo=o("distilbert"),OIo=o(" \u2014 "),vO=a("a"),VIo=o("DistilBertForMultipleChoice"),XIo=o(" (DistilBERT model)"),zIo=l(),Jv=a("li"),mge=a("strong"),WIo=o("electra"),QIo=o(" \u2014 "),FO=a("a"),HIo=o("ElectraForMultipleChoice"),UIo=o(" (ELECTRA model)"),JIo=l(),Yv=a("li"),fge=a("strong"),YIo=o("flaubert"),KIo=o(" \u2014 "),TO=a("a"),ZIo=o("FlaubertForMultipleChoice"),eNo=o(" (FlauBERT model)"),oNo=l(),Kv=a("li"),gge=a("strong"),rNo=o("fnet"),tNo=o(" \u2014 "),MO=a("a"),aNo=o("FNetForMultipleChoice"),nNo=o(" (FNet model)"),sNo=l(),Zv=a("li"),hge=a("strong"),lNo=o("funnel"),iNo=o(" \u2014 "),EO=a("a"),dNo=o("FunnelForMultipleChoice"),cNo=o(" (Funnel Transformer model)"),mNo=l(),eF=a("li"),uge=a("strong"),fNo=o("ibert"),gNo=o(" \u2014 "),CO=a("a"),hNo=o("IBertForMultipleChoice"),uNo=o(" (I-BERT model)"),pNo=l(),oF=a("li"),pge=a("strong"),_No=o("longformer"),bNo=o(" \u2014 "),wO=a("a"),vNo=o("LongformerForMultipleChoice"),FNo=o(" (Longformer model)"),TNo=l(),rF=a("li"),_ge=a("strong"),MNo=o("megatron-bert"),ENo=o(" \u2014 "),AO=a("a"),CNo=o("MegatronBertForMultipleChoice"),wNo=o(" (MegatronBert model)"),ANo=l(),tF=a("li"),bge=a("strong"),yNo=o("mobilebert"),LNo=o(" \u2014 "),yO=a("a"),xNo=o("MobileBertForMultipleChoice"),$No=o(" (MobileBERT model)"),kNo=l(),aF=a("li"),vge=a("strong"),SNo=o("mpnet"),RNo=o(" \u2014 "),LO=a("a"),PNo=o("MPNetForMultipleChoice"),BNo=o(" (MPNet model)"),INo=l(),nF=a("li"),Fge=a("strong"),NNo=o("nystromformer"),qNo=o(" \u2014 "),xO=a("a"),jNo=o("NystromformerForMultipleChoice"),DNo=o(" (Nystromformer model)"),GNo=l(),sF=a("li"),Tge=a("strong"),ONo=o("qdqbert"),VNo=o(" \u2014 "),$O=a("a"),XNo=o("QDQBertForMultipleChoice"),zNo=o(" (QDQBert model)"),WNo=l(),lF=a("li"),Mge=a("strong"),QNo=o("rembert"),HNo=o(" \u2014 "),kO=a("a"),UNo=o("RemBertForMultipleChoice"),JNo=o(" (RemBERT model)"),YNo=l(),iF=a("li"),Ege=a("strong"),KNo=o("roberta"),ZNo=o(" \u2014 "),SO=a("a"),eqo=o("RobertaForMultipleChoice"),oqo=o(" (RoBERTa model)"),rqo=l(),dF=a("li"),Cge=a("strong"),tqo=o("roformer"),aqo=o(" \u2014 "),RO=a("a"),nqo=o("RoFormerForMultipleChoice"),sqo=o(" (RoFormer model)"),lqo=l(),cF=a("li"),wge=a("strong"),iqo=o("squeezebert"),dqo=o(" \u2014 "),PO=a("a"),cqo=o("SqueezeBertForMultipleChoice"),mqo=o(" (SqueezeBERT model)"),fqo=l(),mF=a("li"),Age=a("strong"),gqo=o("xlm"),hqo=o(" \u2014 "),BO=a("a"),uqo=o("XLMForMultipleChoice"),pqo=o(" (XLM model)"),_qo=l(),fF=a("li"),yge=a("strong"),bqo=o("xlm-roberta"),vqo=o(" \u2014 "),IO=a("a"),Fqo=o("XLMRobertaForMultipleChoice"),Tqo=o(" (XLM-RoBERTa model)"),Mqo=l(),gF=a("li"),Lge=a("strong"),Eqo=o("xlm-roberta-xl"),Cqo=o(" \u2014 "),NO=a("a"),wqo=o("XLMRobertaXLForMultipleChoice"),Aqo=o(" (XLM-RoBERTa-XL model)"),yqo=l(),hF=a("li"),xge=a("strong"),Lqo=o("xlnet"),xqo=o(" \u2014 "),qO=a("a"),$qo=o("XLNetForMultipleChoice"),kqo=o(" (XLNet model)"),Sqo=l(),uF=a("li"),$ge=a("strong"),Rqo=o("yoso"),Pqo=o(" \u2014 "),jO=a("a"),Bqo=o("YosoForMultipleChoice"),Iqo=o(" (YOSO model)"),Nqo=l(),pF=a("p"),qqo=o("The model is set in evaluation mode by default using "),kge=a("code"),jqo=o("model.eval()"),Dqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sge=a("code"),Gqo=o("model.train()"),Oqo=l(),F(_F.$$.fragment),zqe=l(),Wi=a("h2"),bF=a("a"),Rge=a("span"),F(jL.$$.fragment),Vqo=l(),Pge=a("span"),Xqo=o("AutoModelForNextSentencePrediction"),Wqe=l(),Bo=a("div"),F(DL.$$.fragment),zqo=l(),Qi=a("p"),Wqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),DO=a("a"),Qqo=o("from_pretrained()"),Hqo=o(" class method or the "),GO=a("a"),Uqo=o("from_config()"),Jqo=o(` class
method.`),Yqo=l(),GL=a("p"),Kqo=o("This class cannot be instantiated directly using "),Bge=a("code"),Zqo=o("__init__()"),ejo=o(" (throws an error)."),ojo=l(),ct=a("div"),F(OL.$$.fragment),rjo=l(),Ige=a("p"),tjo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ajo=l(),Hi=a("p"),njo=o(`Note:
Loading a model from its configuration file does `),Nge=a("strong"),sjo=o("not"),ljo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OO=a("a"),ijo=o("from_pretrained()"),djo=o(" to load the model weights."),cjo=l(),F(vF.$$.fragment),mjo=l(),to=a("div"),F(VL.$$.fragment),fjo=l(),qge=a("p"),gjo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),hjo=l(),Ba=a("p"),ujo=o("The model class to instantiate is selected based on the "),jge=a("code"),pjo=o("model_type"),_jo=o(` property of the config object (either
passed as an argument or loaded from `),Dge=a("code"),bjo=o("pretrained_model_name_or_path"),vjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gge=a("code"),Fjo=o("pretrained_model_name_or_path"),Tjo=o(":"),Mjo=l(),Yr=a("ul"),FF=a("li"),Oge=a("strong"),Ejo=o("bert"),Cjo=o(" \u2014 "),VO=a("a"),wjo=o("BertForNextSentencePrediction"),Ajo=o(" (BERT model)"),yjo=l(),TF=a("li"),Vge=a("strong"),Ljo=o("fnet"),xjo=o(" \u2014 "),XO=a("a"),$jo=o("FNetForNextSentencePrediction"),kjo=o(" (FNet model)"),Sjo=l(),MF=a("li"),Xge=a("strong"),Rjo=o("megatron-bert"),Pjo=o(" \u2014 "),zO=a("a"),Bjo=o("MegatronBertForNextSentencePrediction"),Ijo=o(" (MegatronBert model)"),Njo=l(),EF=a("li"),zge=a("strong"),qjo=o("mobilebert"),jjo=o(" \u2014 "),WO=a("a"),Djo=o("MobileBertForNextSentencePrediction"),Gjo=o(" (MobileBERT model)"),Ojo=l(),CF=a("li"),Wge=a("strong"),Vjo=o("qdqbert"),Xjo=o(" \u2014 "),QO=a("a"),zjo=o("QDQBertForNextSentencePrediction"),Wjo=o(" (QDQBert model)"),Qjo=l(),wF=a("p"),Hjo=o("The model is set in evaluation mode by default using "),Qge=a("code"),Ujo=o("model.eval()"),Jjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hge=a("code"),Yjo=o("model.train()"),Kjo=l(),F(AF.$$.fragment),Qqe=l(),Ui=a("h2"),yF=a("a"),Uge=a("span"),F(XL.$$.fragment),Zjo=l(),Jge=a("span"),eDo=o("AutoModelForTokenClassification"),Hqe=l(),Io=a("div"),F(zL.$$.fragment),oDo=l(),Ji=a("p"),rDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),HO=a("a"),tDo=o("from_pretrained()"),aDo=o(" class method or the "),UO=a("a"),nDo=o("from_config()"),sDo=o(` class
method.`),lDo=l(),WL=a("p"),iDo=o("This class cannot be instantiated directly using "),Yge=a("code"),dDo=o("__init__()"),cDo=o(" (throws an error)."),mDo=l(),mt=a("div"),F(QL.$$.fragment),fDo=l(),Kge=a("p"),gDo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hDo=l(),Yi=a("p"),uDo=o(`Note:
Loading a model from its configuration file does `),Zge=a("strong"),pDo=o("not"),_Do=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JO=a("a"),bDo=o("from_pretrained()"),vDo=o(" to load the model weights."),FDo=l(),F(LF.$$.fragment),TDo=l(),ao=a("div"),F(HL.$$.fragment),MDo=l(),ehe=a("p"),EDo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),CDo=l(),Ia=a("p"),wDo=o("The model class to instantiate is selected based on the "),ohe=a("code"),ADo=o("model_type"),yDo=o(` property of the config object (either
passed as an argument or loaded from `),rhe=a("code"),LDo=o("pretrained_model_name_or_path"),xDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),the=a("code"),$Do=o("pretrained_model_name_or_path"),kDo=o(":"),SDo=l(),U=a("ul"),xF=a("li"),ahe=a("strong"),RDo=o("albert"),PDo=o(" \u2014 "),YO=a("a"),BDo=o("AlbertForTokenClassification"),IDo=o(" (ALBERT model)"),NDo=l(),$F=a("li"),nhe=a("strong"),qDo=o("bert"),jDo=o(" \u2014 "),KO=a("a"),DDo=o("BertForTokenClassification"),GDo=o(" (BERT model)"),ODo=l(),kF=a("li"),she=a("strong"),VDo=o("big_bird"),XDo=o(" \u2014 "),ZO=a("a"),zDo=o("BigBirdForTokenClassification"),WDo=o(" (BigBird model)"),QDo=l(),SF=a("li"),lhe=a("strong"),HDo=o("camembert"),UDo=o(" \u2014 "),eV=a("a"),JDo=o("CamembertForTokenClassification"),YDo=o(" (CamemBERT model)"),KDo=l(),RF=a("li"),ihe=a("strong"),ZDo=o("canine"),eGo=o(" \u2014 "),oV=a("a"),oGo=o("CanineForTokenClassification"),rGo=o(" (Canine model)"),tGo=l(),PF=a("li"),dhe=a("strong"),aGo=o("convbert"),nGo=o(" \u2014 "),rV=a("a"),sGo=o("ConvBertForTokenClassification"),lGo=o(" (ConvBERT model)"),iGo=l(),BF=a("li"),che=a("strong"),dGo=o("data2vec-text"),cGo=o(" \u2014 "),tV=a("a"),mGo=o("Data2VecTextForTokenClassification"),fGo=o(" (Data2VecText model)"),gGo=l(),IF=a("li"),mhe=a("strong"),hGo=o("deberta"),uGo=o(" \u2014 "),aV=a("a"),pGo=o("DebertaForTokenClassification"),_Go=o(" (DeBERTa model)"),bGo=l(),NF=a("li"),fhe=a("strong"),vGo=o("deberta-v2"),FGo=o(" \u2014 "),nV=a("a"),TGo=o("DebertaV2ForTokenClassification"),MGo=o(" (DeBERTa-v2 model)"),EGo=l(),qF=a("li"),ghe=a("strong"),CGo=o("distilbert"),wGo=o(" \u2014 "),sV=a("a"),AGo=o("DistilBertForTokenClassification"),yGo=o(" (DistilBERT model)"),LGo=l(),jF=a("li"),hhe=a("strong"),xGo=o("electra"),$Go=o(" \u2014 "),lV=a("a"),kGo=o("ElectraForTokenClassification"),SGo=o(" (ELECTRA model)"),RGo=l(),DF=a("li"),uhe=a("strong"),PGo=o("flaubert"),BGo=o(" \u2014 "),iV=a("a"),IGo=o("FlaubertForTokenClassification"),NGo=o(" (FlauBERT model)"),qGo=l(),GF=a("li"),phe=a("strong"),jGo=o("fnet"),DGo=o(" \u2014 "),dV=a("a"),GGo=o("FNetForTokenClassification"),OGo=o(" (FNet model)"),VGo=l(),OF=a("li"),_he=a("strong"),XGo=o("funnel"),zGo=o(" \u2014 "),cV=a("a"),WGo=o("FunnelForTokenClassification"),QGo=o(" (Funnel Transformer model)"),HGo=l(),VF=a("li"),bhe=a("strong"),UGo=o("gpt2"),JGo=o(" \u2014 "),mV=a("a"),YGo=o("GPT2ForTokenClassification"),KGo=o(" (OpenAI GPT-2 model)"),ZGo=l(),XF=a("li"),vhe=a("strong"),eOo=o("ibert"),oOo=o(" \u2014 "),fV=a("a"),rOo=o("IBertForTokenClassification"),tOo=o(" (I-BERT model)"),aOo=l(),zF=a("li"),Fhe=a("strong"),nOo=o("layoutlm"),sOo=o(" \u2014 "),gV=a("a"),lOo=o("LayoutLMForTokenClassification"),iOo=o(" (LayoutLM model)"),dOo=l(),WF=a("li"),The=a("strong"),cOo=o("layoutlmv2"),mOo=o(" \u2014 "),hV=a("a"),fOo=o("LayoutLMv2ForTokenClassification"),gOo=o(" (LayoutLMv2 model)"),hOo=l(),QF=a("li"),Mhe=a("strong"),uOo=o("layoutlmv3"),pOo=o(" \u2014 "),uV=a("a"),_Oo=o("LayoutLMv3ForTokenClassification"),bOo=o(" (LayoutLMv3 model)"),vOo=l(),HF=a("li"),Ehe=a("strong"),FOo=o("longformer"),TOo=o(" \u2014 "),pV=a("a"),MOo=o("LongformerForTokenClassification"),EOo=o(" (Longformer model)"),COo=l(),UF=a("li"),Che=a("strong"),wOo=o("megatron-bert"),AOo=o(" \u2014 "),_V=a("a"),yOo=o("MegatronBertForTokenClassification"),LOo=o(" (MegatronBert model)"),xOo=l(),JF=a("li"),whe=a("strong"),$Oo=o("mobilebert"),kOo=o(" \u2014 "),bV=a("a"),SOo=o("MobileBertForTokenClassification"),ROo=o(" (MobileBERT model)"),POo=l(),YF=a("li"),Ahe=a("strong"),BOo=o("mpnet"),IOo=o(" \u2014 "),vV=a("a"),NOo=o("MPNetForTokenClassification"),qOo=o(" (MPNet model)"),jOo=l(),KF=a("li"),yhe=a("strong"),DOo=o("nystromformer"),GOo=o(" \u2014 "),FV=a("a"),OOo=o("NystromformerForTokenClassification"),VOo=o(" (Nystromformer model)"),XOo=l(),ZF=a("li"),Lhe=a("strong"),zOo=o("qdqbert"),WOo=o(" \u2014 "),TV=a("a"),QOo=o("QDQBertForTokenClassification"),HOo=o(" (QDQBert model)"),UOo=l(),e1=a("li"),xhe=a("strong"),JOo=o("rembert"),YOo=o(" \u2014 "),MV=a("a"),KOo=o("RemBertForTokenClassification"),ZOo=o(" (RemBERT model)"),eVo=l(),o1=a("li"),$he=a("strong"),oVo=o("roberta"),rVo=o(" \u2014 "),EV=a("a"),tVo=o("RobertaForTokenClassification"),aVo=o(" (RoBERTa model)"),nVo=l(),r1=a("li"),khe=a("strong"),sVo=o("roformer"),lVo=o(" \u2014 "),CV=a("a"),iVo=o("RoFormerForTokenClassification"),dVo=o(" (RoFormer model)"),cVo=l(),t1=a("li"),She=a("strong"),mVo=o("squeezebert"),fVo=o(" \u2014 "),wV=a("a"),gVo=o("SqueezeBertForTokenClassification"),hVo=o(" (SqueezeBERT model)"),uVo=l(),a1=a("li"),Rhe=a("strong"),pVo=o("xlm"),_Vo=o(" \u2014 "),AV=a("a"),bVo=o("XLMForTokenClassification"),vVo=o(" (XLM model)"),FVo=l(),n1=a("li"),Phe=a("strong"),TVo=o("xlm-roberta"),MVo=o(" \u2014 "),yV=a("a"),EVo=o("XLMRobertaForTokenClassification"),CVo=o(" (XLM-RoBERTa model)"),wVo=l(),s1=a("li"),Bhe=a("strong"),AVo=o("xlm-roberta-xl"),yVo=o(" \u2014 "),LV=a("a"),LVo=o("XLMRobertaXLForTokenClassification"),xVo=o(" (XLM-RoBERTa-XL model)"),$Vo=l(),l1=a("li"),Ihe=a("strong"),kVo=o("xlnet"),SVo=o(" \u2014 "),xV=a("a"),RVo=o("XLNetForTokenClassification"),PVo=o(" (XLNet model)"),BVo=l(),i1=a("li"),Nhe=a("strong"),IVo=o("yoso"),NVo=o(" \u2014 "),$V=a("a"),qVo=o("YosoForTokenClassification"),jVo=o(" (YOSO model)"),DVo=l(),d1=a("p"),GVo=o("The model is set in evaluation mode by default using "),qhe=a("code"),OVo=o("model.eval()"),VVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jhe=a("code"),XVo=o("model.train()"),zVo=l(),F(c1.$$.fragment),Uqe=l(),Ki=a("h2"),m1=a("a"),Dhe=a("span"),F(UL.$$.fragment),WVo=l(),Ghe=a("span"),QVo=o("AutoModelForQuestionAnswering"),Jqe=l(),No=a("div"),F(JL.$$.fragment),HVo=l(),Zi=a("p"),UVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),kV=a("a"),JVo=o("from_pretrained()"),YVo=o(" class method or the "),SV=a("a"),KVo=o("from_config()"),ZVo=o(` class
method.`),eXo=l(),YL=a("p"),oXo=o("This class cannot be instantiated directly using "),Ohe=a("code"),rXo=o("__init__()"),tXo=o(" (throws an error)."),aXo=l(),ft=a("div"),F(KL.$$.fragment),nXo=l(),Vhe=a("p"),sXo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),lXo=l(),ed=a("p"),iXo=o(`Note:
Loading a model from its configuration file does `),Xhe=a("strong"),dXo=o("not"),cXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=a("a"),mXo=o("from_pretrained()"),fXo=o(" to load the model weights."),gXo=l(),F(f1.$$.fragment),hXo=l(),no=a("div"),F(ZL.$$.fragment),uXo=l(),zhe=a("p"),pXo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_Xo=l(),Na=a("p"),bXo=o("The model class to instantiate is selected based on the "),Whe=a("code"),vXo=o("model_type"),FXo=o(` property of the config object (either
passed as an argument or loaded from `),Qhe=a("code"),TXo=o("pretrained_model_name_or_path"),MXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hhe=a("code"),EXo=o("pretrained_model_name_or_path"),CXo=o(":"),wXo=l(),V=a("ul"),g1=a("li"),Uhe=a("strong"),AXo=o("albert"),yXo=o(" \u2014 "),PV=a("a"),LXo=o("AlbertForQuestionAnswering"),xXo=o(" (ALBERT model)"),$Xo=l(),h1=a("li"),Jhe=a("strong"),kXo=o("bart"),SXo=o(" \u2014 "),BV=a("a"),RXo=o("BartForQuestionAnswering"),PXo=o(" (BART model)"),BXo=l(),u1=a("li"),Yhe=a("strong"),IXo=o("bert"),NXo=o(" \u2014 "),IV=a("a"),qXo=o("BertForQuestionAnswering"),jXo=o(" (BERT model)"),DXo=l(),p1=a("li"),Khe=a("strong"),GXo=o("big_bird"),OXo=o(" \u2014 "),NV=a("a"),VXo=o("BigBirdForQuestionAnswering"),XXo=o(" (BigBird model)"),zXo=l(),_1=a("li"),Zhe=a("strong"),WXo=o("bigbird_pegasus"),QXo=o(" \u2014 "),qV=a("a"),HXo=o("BigBirdPegasusForQuestionAnswering"),UXo=o(" (BigBirdPegasus model)"),JXo=l(),b1=a("li"),eue=a("strong"),YXo=o("camembert"),KXo=o(" \u2014 "),jV=a("a"),ZXo=o("CamembertForQuestionAnswering"),ezo=o(" (CamemBERT model)"),ozo=l(),v1=a("li"),oue=a("strong"),rzo=o("canine"),tzo=o(" \u2014 "),DV=a("a"),azo=o("CanineForQuestionAnswering"),nzo=o(" (Canine model)"),szo=l(),F1=a("li"),rue=a("strong"),lzo=o("convbert"),izo=o(" \u2014 "),GV=a("a"),dzo=o("ConvBertForQuestionAnswering"),czo=o(" (ConvBERT model)"),mzo=l(),T1=a("li"),tue=a("strong"),fzo=o("data2vec-text"),gzo=o(" \u2014 "),OV=a("a"),hzo=o("Data2VecTextForQuestionAnswering"),uzo=o(" (Data2VecText model)"),pzo=l(),M1=a("li"),aue=a("strong"),_zo=o("deberta"),bzo=o(" \u2014 "),VV=a("a"),vzo=o("DebertaForQuestionAnswering"),Fzo=o(" (DeBERTa model)"),Tzo=l(),E1=a("li"),nue=a("strong"),Mzo=o("deberta-v2"),Ezo=o(" \u2014 "),XV=a("a"),Czo=o("DebertaV2ForQuestionAnswering"),wzo=o(" (DeBERTa-v2 model)"),Azo=l(),C1=a("li"),sue=a("strong"),yzo=o("distilbert"),Lzo=o(" \u2014 "),zV=a("a"),xzo=o("DistilBertForQuestionAnswering"),$zo=o(" (DistilBERT model)"),kzo=l(),w1=a("li"),lue=a("strong"),Szo=o("electra"),Rzo=o(" \u2014 "),WV=a("a"),Pzo=o("ElectraForQuestionAnswering"),Bzo=o(" (ELECTRA model)"),Izo=l(),A1=a("li"),iue=a("strong"),Nzo=o("flaubert"),qzo=o(" \u2014 "),QV=a("a"),jzo=o("FlaubertForQuestionAnsweringSimple"),Dzo=o(" (FlauBERT model)"),Gzo=l(),y1=a("li"),due=a("strong"),Ozo=o("fnet"),Vzo=o(" \u2014 "),HV=a("a"),Xzo=o("FNetForQuestionAnswering"),zzo=o(" (FNet model)"),Wzo=l(),L1=a("li"),cue=a("strong"),Qzo=o("funnel"),Hzo=o(" \u2014 "),UV=a("a"),Uzo=o("FunnelForQuestionAnswering"),Jzo=o(" (Funnel Transformer model)"),Yzo=l(),x1=a("li"),mue=a("strong"),Kzo=o("gptj"),Zzo=o(" \u2014 "),JV=a("a"),eWo=o("GPTJForQuestionAnswering"),oWo=o(" (GPT-J model)"),rWo=l(),$1=a("li"),fue=a("strong"),tWo=o("ibert"),aWo=o(" \u2014 "),YV=a("a"),nWo=o("IBertForQuestionAnswering"),sWo=o(" (I-BERT model)"),lWo=l(),k1=a("li"),gue=a("strong"),iWo=o("layoutlmv2"),dWo=o(" \u2014 "),KV=a("a"),cWo=o("LayoutLMv2ForQuestionAnswering"),mWo=o(" (LayoutLMv2 model)"),fWo=l(),S1=a("li"),hue=a("strong"),gWo=o("layoutlmv3"),hWo=o(" \u2014 "),ZV=a("a"),uWo=o("LayoutLMv3ForQuestionAnswering"),pWo=o(" (LayoutLMv3 model)"),_Wo=l(),R1=a("li"),uue=a("strong"),bWo=o("led"),vWo=o(" \u2014 "),eX=a("a"),FWo=o("LEDForQuestionAnswering"),TWo=o(" (LED model)"),MWo=l(),P1=a("li"),pue=a("strong"),EWo=o("longformer"),CWo=o(" \u2014 "),oX=a("a"),wWo=o("LongformerForQuestionAnswering"),AWo=o(" (Longformer model)"),yWo=l(),B1=a("li"),_ue=a("strong"),LWo=o("lxmert"),xWo=o(" \u2014 "),rX=a("a"),$Wo=o("LxmertForQuestionAnswering"),kWo=o(" (LXMERT model)"),SWo=l(),I1=a("li"),bue=a("strong"),RWo=o("mbart"),PWo=o(" \u2014 "),tX=a("a"),BWo=o("MBartForQuestionAnswering"),IWo=o(" (mBART model)"),NWo=l(),N1=a("li"),vue=a("strong"),qWo=o("megatron-bert"),jWo=o(" \u2014 "),aX=a("a"),DWo=o("MegatronBertForQuestionAnswering"),GWo=o(" (MegatronBert model)"),OWo=l(),q1=a("li"),Fue=a("strong"),VWo=o("mobilebert"),XWo=o(" \u2014 "),nX=a("a"),zWo=o("MobileBertForQuestionAnswering"),WWo=o(" (MobileBERT model)"),QWo=l(),j1=a("li"),Tue=a("strong"),HWo=o("mpnet"),UWo=o(" \u2014 "),sX=a("a"),JWo=o("MPNetForQuestionAnswering"),YWo=o(" (MPNet model)"),KWo=l(),D1=a("li"),Mue=a("strong"),ZWo=o("nystromformer"),eQo=o(" \u2014 "),lX=a("a"),oQo=o("NystromformerForQuestionAnswering"),rQo=o(" (Nystromformer model)"),tQo=l(),G1=a("li"),Eue=a("strong"),aQo=o("qdqbert"),nQo=o(" \u2014 "),iX=a("a"),sQo=o("QDQBertForQuestionAnswering"),lQo=o(" (QDQBert model)"),iQo=l(),O1=a("li"),Cue=a("strong"),dQo=o("reformer"),cQo=o(" \u2014 "),dX=a("a"),mQo=o("ReformerForQuestionAnswering"),fQo=o(" (Reformer model)"),gQo=l(),V1=a("li"),wue=a("strong"),hQo=o("rembert"),uQo=o(" \u2014 "),cX=a("a"),pQo=o("RemBertForQuestionAnswering"),_Qo=o(" (RemBERT model)"),bQo=l(),X1=a("li"),Aue=a("strong"),vQo=o("roberta"),FQo=o(" \u2014 "),mX=a("a"),TQo=o("RobertaForQuestionAnswering"),MQo=o(" (RoBERTa model)"),EQo=l(),z1=a("li"),yue=a("strong"),CQo=o("roformer"),wQo=o(" \u2014 "),fX=a("a"),AQo=o("RoFormerForQuestionAnswering"),yQo=o(" (RoFormer model)"),LQo=l(),W1=a("li"),Lue=a("strong"),xQo=o("splinter"),$Qo=o(" \u2014 "),gX=a("a"),kQo=o("SplinterForQuestionAnswering"),SQo=o(" (Splinter model)"),RQo=l(),Q1=a("li"),xue=a("strong"),PQo=o("squeezebert"),BQo=o(" \u2014 "),hX=a("a"),IQo=o("SqueezeBertForQuestionAnswering"),NQo=o(" (SqueezeBERT model)"),qQo=l(),H1=a("li"),$ue=a("strong"),jQo=o("xlm"),DQo=o(" \u2014 "),uX=a("a"),GQo=o("XLMForQuestionAnsweringSimple"),OQo=o(" (XLM model)"),VQo=l(),U1=a("li"),kue=a("strong"),XQo=o("xlm-roberta"),zQo=o(" \u2014 "),pX=a("a"),WQo=o("XLMRobertaForQuestionAnswering"),QQo=o(" (XLM-RoBERTa model)"),HQo=l(),J1=a("li"),Sue=a("strong"),UQo=o("xlm-roberta-xl"),JQo=o(" \u2014 "),_X=a("a"),YQo=o("XLMRobertaXLForQuestionAnswering"),KQo=o(" (XLM-RoBERTa-XL model)"),ZQo=l(),Y1=a("li"),Rue=a("strong"),eHo=o("xlnet"),oHo=o(" \u2014 "),bX=a("a"),rHo=o("XLNetForQuestionAnsweringSimple"),tHo=o(" (XLNet model)"),aHo=l(),K1=a("li"),Pue=a("strong"),nHo=o("yoso"),sHo=o(" \u2014 "),vX=a("a"),lHo=o("YosoForQuestionAnswering"),iHo=o(" (YOSO model)"),dHo=l(),Z1=a("p"),cHo=o("The model is set in evaluation mode by default using "),Bue=a("code"),mHo=o("model.eval()"),fHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Iue=a("code"),gHo=o("model.train()"),hHo=l(),F(eT.$$.fragment),Yqe=l(),od=a("h2"),oT=a("a"),Nue=a("span"),F(e8.$$.fragment),uHo=l(),que=a("span"),pHo=o("AutoModelForTableQuestionAnswering"),Kqe=l(),qo=a("div"),F(o8.$$.fragment),_Ho=l(),rd=a("p"),bHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),FX=a("a"),vHo=o("from_pretrained()"),FHo=o(" class method or the "),TX=a("a"),THo=o("from_config()"),MHo=o(` class
method.`),EHo=l(),r8=a("p"),CHo=o("This class cannot be instantiated directly using "),jue=a("code"),wHo=o("__init__()"),AHo=o(" (throws an error)."),yHo=l(),gt=a("div"),F(t8.$$.fragment),LHo=l(),Due=a("p"),xHo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),$Ho=l(),td=a("p"),kHo=o(`Note:
Loading a model from its configuration file does `),Gue=a("strong"),SHo=o("not"),RHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=a("a"),PHo=o("from_pretrained()"),BHo=o(" to load the model weights."),IHo=l(),F(rT.$$.fragment),NHo=l(),so=a("div"),F(a8.$$.fragment),qHo=l(),Oue=a("p"),jHo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),DHo=l(),qa=a("p"),GHo=o("The model class to instantiate is selected based on the "),Vue=a("code"),OHo=o("model_type"),VHo=o(` property of the config object (either
passed as an argument or loaded from `),Xue=a("code"),XHo=o("pretrained_model_name_or_path"),zHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zue=a("code"),WHo=o("pretrained_model_name_or_path"),QHo=o(":"),HHo=l(),Wue=a("ul"),tT=a("li"),Que=a("strong"),UHo=o("tapas"),JHo=o(" \u2014 "),EX=a("a"),YHo=o("TapasForQuestionAnswering"),KHo=o(" (TAPAS model)"),ZHo=l(),aT=a("p"),eUo=o("The model is set in evaluation mode by default using "),Hue=a("code"),oUo=o("model.eval()"),rUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uue=a("code"),tUo=o("model.train()"),aUo=l(),F(nT.$$.fragment),Zqe=l(),ad=a("h2"),sT=a("a"),Jue=a("span"),F(n8.$$.fragment),nUo=l(),Yue=a("span"),sUo=o("AutoModelForImageClassification"),eje=l(),jo=a("div"),F(s8.$$.fragment),lUo=l(),nd=a("p"),iUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),CX=a("a"),dUo=o("from_pretrained()"),cUo=o(" class method or the "),wX=a("a"),mUo=o("from_config()"),fUo=o(` class
method.`),gUo=l(),l8=a("p"),hUo=o("This class cannot be instantiated directly using "),Kue=a("code"),uUo=o("__init__()"),pUo=o(" (throws an error)."),_Uo=l(),ht=a("div"),F(i8.$$.fragment),bUo=l(),Zue=a("p"),vUo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),FUo=l(),sd=a("p"),TUo=o(`Note:
Loading a model from its configuration file does `),epe=a("strong"),MUo=o("not"),EUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AX=a("a"),CUo=o("from_pretrained()"),wUo=o(" to load the model weights."),AUo=l(),F(lT.$$.fragment),yUo=l(),lo=a("div"),F(d8.$$.fragment),LUo=l(),ope=a("p"),xUo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),$Uo=l(),ja=a("p"),kUo=o("The model class to instantiate is selected based on the "),rpe=a("code"),SUo=o("model_type"),RUo=o(` property of the config object (either
passed as an argument or loaded from `),tpe=a("code"),PUo=o("pretrained_model_name_or_path"),BUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ape=a("code"),IUo=o("pretrained_model_name_or_path"),NUo=o(":"),qUo=l(),Fe=a("ul"),iT=a("li"),npe=a("strong"),jUo=o("beit"),DUo=o(" \u2014 "),yX=a("a"),GUo=o("BeitForImageClassification"),OUo=o(" (BEiT model)"),VUo=l(),dT=a("li"),spe=a("strong"),XUo=o("convnext"),zUo=o(" \u2014 "),LX=a("a"),WUo=o("ConvNextForImageClassification"),QUo=o(" (ConvNext model)"),HUo=l(),cT=a("li"),lpe=a("strong"),UUo=o("cvt"),JUo=o(" \u2014 "),xX=a("a"),YUo=o("CvtForImageClassification"),KUo=o(" (CvT model)"),ZUo=l(),mT=a("li"),ipe=a("strong"),eJo=o("data2vec-vision"),oJo=o(" \u2014 "),$X=a("a"),rJo=o("Data2VecVisionForImageClassification"),tJo=o(" (Data2VecVision model)"),aJo=l(),Bs=a("li"),dpe=a("strong"),nJo=o("deit"),sJo=o(" \u2014 "),kX=a("a"),lJo=o("DeiTForImageClassification"),iJo=o(" or "),SX=a("a"),dJo=o("DeiTForImageClassificationWithTeacher"),cJo=o(" (DeiT model)"),mJo=l(),fT=a("li"),cpe=a("strong"),fJo=o("imagegpt"),gJo=o(" \u2014 "),RX=a("a"),hJo=o("ImageGPTForImageClassification"),uJo=o(" (ImageGPT model)"),pJo=l(),ut=a("li"),mpe=a("strong"),_Jo=o("perceiver"),bJo=o(" \u2014 "),PX=a("a"),vJo=o("PerceiverForImageClassificationLearned"),FJo=o(" or "),BX=a("a"),TJo=o("PerceiverForImageClassificationFourier"),MJo=o(" or "),IX=a("a"),EJo=o("PerceiverForImageClassificationConvProcessing"),CJo=o(" (Perceiver model)"),wJo=l(),gT=a("li"),fpe=a("strong"),AJo=o("poolformer"),yJo=o(" \u2014 "),NX=a("a"),LJo=o("PoolFormerForImageClassification"),xJo=o(" (PoolFormer model)"),$Jo=l(),hT=a("li"),gpe=a("strong"),kJo=o("regnet"),SJo=o(" \u2014 "),qX=a("a"),RJo=o("RegNetForImageClassification"),PJo=o(" (RegNet model)"),BJo=l(),uT=a("li"),hpe=a("strong"),IJo=o("resnet"),NJo=o(" \u2014 "),jX=a("a"),qJo=o("ResNetForImageClassification"),jJo=o(" (ResNet model)"),DJo=l(),pT=a("li"),upe=a("strong"),GJo=o("segformer"),OJo=o(" \u2014 "),DX=a("a"),VJo=o("SegformerForImageClassification"),XJo=o(" (SegFormer model)"),zJo=l(),_T=a("li"),ppe=a("strong"),WJo=o("swin"),QJo=o(" \u2014 "),GX=a("a"),HJo=o("SwinForImageClassification"),UJo=o(" (Swin model)"),JJo=l(),bT=a("li"),_pe=a("strong"),YJo=o("van"),KJo=o(" \u2014 "),OX=a("a"),ZJo=o("VanForImageClassification"),eYo=o(" (VAN model)"),oYo=l(),vT=a("li"),bpe=a("strong"),rYo=o("vit"),tYo=o(" \u2014 "),VX=a("a"),aYo=o("ViTForImageClassification"),nYo=o(" (ViT model)"),sYo=l(),FT=a("p"),lYo=o("The model is set in evaluation mode by default using "),vpe=a("code"),iYo=o("model.eval()"),dYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fpe=a("code"),cYo=o("model.train()"),mYo=l(),F(TT.$$.fragment),oje=l(),ld=a("h2"),MT=a("a"),Tpe=a("span"),F(c8.$$.fragment),fYo=l(),Mpe=a("span"),gYo=o("AutoModelForVision2Seq"),rje=l(),Do=a("div"),F(m8.$$.fragment),hYo=l(),id=a("p"),uYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),XX=a("a"),pYo=o("from_pretrained()"),_Yo=o(" class method or the "),zX=a("a"),bYo=o("from_config()"),vYo=o(` class
method.`),FYo=l(),f8=a("p"),TYo=o("This class cannot be instantiated directly using "),Epe=a("code"),MYo=o("__init__()"),EYo=o(" (throws an error)."),CYo=l(),pt=a("div"),F(g8.$$.fragment),wYo=l(),Cpe=a("p"),AYo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),yYo=l(),dd=a("p"),LYo=o(`Note:
Loading a model from its configuration file does `),wpe=a("strong"),xYo=o("not"),$Yo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=a("a"),kYo=o("from_pretrained()"),SYo=o(" to load the model weights."),RYo=l(),F(ET.$$.fragment),PYo=l(),io=a("div"),F(h8.$$.fragment),BYo=l(),Ape=a("p"),IYo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),NYo=l(),Da=a("p"),qYo=o("The model class to instantiate is selected based on the "),ype=a("code"),jYo=o("model_type"),DYo=o(` property of the config object (either
passed as an argument or loaded from `),Lpe=a("code"),GYo=o("pretrained_model_name_or_path"),OYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xpe=a("code"),VYo=o("pretrained_model_name_or_path"),XYo=o(":"),zYo=l(),$pe=a("ul"),CT=a("li"),kpe=a("strong"),WYo=o("vision-encoder-decoder"),QYo=o(" \u2014 "),QX=a("a"),HYo=o("VisionEncoderDecoderModel"),UYo=o(" (Vision Encoder decoder model)"),JYo=l(),wT=a("p"),YYo=o("The model is set in evaluation mode by default using "),Spe=a("code"),KYo=o("model.eval()"),ZYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rpe=a("code"),eKo=o("model.train()"),oKo=l(),F(AT.$$.fragment),tje=l(),cd=a("h2"),yT=a("a"),Ppe=a("span"),F(u8.$$.fragment),rKo=l(),Bpe=a("span"),tKo=o("AutoModelForAudioClassification"),aje=l(),Go=a("div"),F(p8.$$.fragment),aKo=l(),md=a("p"),nKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),HX=a("a"),sKo=o("from_pretrained()"),lKo=o(" class method or the "),UX=a("a"),iKo=o("from_config()"),dKo=o(` class
method.`),cKo=l(),_8=a("p"),mKo=o("This class cannot be instantiated directly using "),Ipe=a("code"),fKo=o("__init__()"),gKo=o(" (throws an error)."),hKo=l(),_t=a("div"),F(b8.$$.fragment),uKo=l(),Npe=a("p"),pKo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),_Ko=l(),fd=a("p"),bKo=o(`Note:
Loading a model from its configuration file does `),qpe=a("strong"),vKo=o("not"),FKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JX=a("a"),TKo=o("from_pretrained()"),MKo=o(" to load the model weights."),EKo=l(),F(LT.$$.fragment),CKo=l(),co=a("div"),F(v8.$$.fragment),wKo=l(),jpe=a("p"),AKo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),yKo=l(),Ga=a("p"),LKo=o("The model class to instantiate is selected based on the "),Dpe=a("code"),xKo=o("model_type"),$Ko=o(` property of the config object (either
passed as an argument or loaded from `),Gpe=a("code"),kKo=o("pretrained_model_name_or_path"),SKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ope=a("code"),RKo=o("pretrained_model_name_or_path"),PKo=o(":"),BKo=l(),Se=a("ul"),xT=a("li"),Vpe=a("strong"),IKo=o("data2vec-audio"),NKo=o(" \u2014 "),YX=a("a"),qKo=o("Data2VecAudioForSequenceClassification"),jKo=o(" (Data2VecAudio model)"),DKo=l(),$T=a("li"),Xpe=a("strong"),GKo=o("hubert"),OKo=o(" \u2014 "),KX=a("a"),VKo=o("HubertForSequenceClassification"),XKo=o(" (Hubert model)"),zKo=l(),kT=a("li"),zpe=a("strong"),WKo=o("sew"),QKo=o(" \u2014 "),ZX=a("a"),HKo=o("SEWForSequenceClassification"),UKo=o(" (SEW model)"),JKo=l(),ST=a("li"),Wpe=a("strong"),YKo=o("sew-d"),KKo=o(" \u2014 "),ez=a("a"),ZKo=o("SEWDForSequenceClassification"),eZo=o(" (SEW-D model)"),oZo=l(),RT=a("li"),Qpe=a("strong"),rZo=o("unispeech"),tZo=o(" \u2014 "),oz=a("a"),aZo=o("UniSpeechForSequenceClassification"),nZo=o(" (UniSpeech model)"),sZo=l(),PT=a("li"),Hpe=a("strong"),lZo=o("unispeech-sat"),iZo=o(" \u2014 "),rz=a("a"),dZo=o("UniSpeechSatForSequenceClassification"),cZo=o(" (UniSpeechSat model)"),mZo=l(),BT=a("li"),Upe=a("strong"),fZo=o("wav2vec2"),gZo=o(" \u2014 "),tz=a("a"),hZo=o("Wav2Vec2ForSequenceClassification"),uZo=o(" (Wav2Vec2 model)"),pZo=l(),IT=a("li"),Jpe=a("strong"),_Zo=o("wav2vec2-conformer"),bZo=o(" \u2014 "),az=a("a"),vZo=o("Wav2Vec2ConformerForSequenceClassification"),FZo=o(" (Wav2Vec2-Conformer model)"),TZo=l(),NT=a("li"),Ype=a("strong"),MZo=o("wavlm"),EZo=o(" \u2014 "),nz=a("a"),CZo=o("WavLMForSequenceClassification"),wZo=o(" (WavLM model)"),AZo=l(),qT=a("p"),yZo=o("The model is set in evaluation mode by default using "),Kpe=a("code"),LZo=o("model.eval()"),xZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zpe=a("code"),$Zo=o("model.train()"),kZo=l(),F(jT.$$.fragment),nje=l(),gd=a("h2"),DT=a("a"),e_e=a("span"),F(F8.$$.fragment),SZo=l(),o_e=a("span"),RZo=o("AutoModelForAudioFrameClassification"),sje=l(),Oo=a("div"),F(T8.$$.fragment),PZo=l(),hd=a("p"),BZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),sz=a("a"),IZo=o("from_pretrained()"),NZo=o(" class method or the "),lz=a("a"),qZo=o("from_config()"),jZo=o(` class
method.`),DZo=l(),M8=a("p"),GZo=o("This class cannot be instantiated directly using "),r_e=a("code"),OZo=o("__init__()"),VZo=o(" (throws an error)."),XZo=l(),bt=a("div"),F(E8.$$.fragment),zZo=l(),t_e=a("p"),WZo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),QZo=l(),ud=a("p"),HZo=o(`Note:
Loading a model from its configuration file does `),a_e=a("strong"),UZo=o("not"),JZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iz=a("a"),YZo=o("from_pretrained()"),KZo=o(" to load the model weights."),ZZo=l(),F(GT.$$.fragment),eer=l(),mo=a("div"),F(C8.$$.fragment),oer=l(),n_e=a("p"),rer=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),ter=l(),Oa=a("p"),aer=o("The model class to instantiate is selected based on the "),s_e=a("code"),ner=o("model_type"),ser=o(` property of the config object (either
passed as an argument or loaded from `),l_e=a("code"),ler=o("pretrained_model_name_or_path"),ier=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i_e=a("code"),der=o("pretrained_model_name_or_path"),cer=o(":"),mer=l(),Kr=a("ul"),OT=a("li"),d_e=a("strong"),fer=o("data2vec-audio"),ger=o(" \u2014 "),dz=a("a"),her=o("Data2VecAudioForAudioFrameClassification"),uer=o(" (Data2VecAudio model)"),per=l(),VT=a("li"),c_e=a("strong"),_er=o("unispeech-sat"),ber=o(" \u2014 "),cz=a("a"),ver=o("UniSpeechSatForAudioFrameClassification"),Fer=o(" (UniSpeechSat model)"),Ter=l(),XT=a("li"),m_e=a("strong"),Mer=o("wav2vec2"),Eer=o(" \u2014 "),mz=a("a"),Cer=o("Wav2Vec2ForAudioFrameClassification"),wer=o(" (Wav2Vec2 model)"),Aer=l(),zT=a("li"),f_e=a("strong"),yer=o("wav2vec2-conformer"),Ler=o(" \u2014 "),fz=a("a"),xer=o("Wav2Vec2ConformerForAudioFrameClassification"),$er=o(" (Wav2Vec2-Conformer model)"),ker=l(),WT=a("li"),g_e=a("strong"),Ser=o("wavlm"),Rer=o(" \u2014 "),gz=a("a"),Per=o("WavLMForAudioFrameClassification"),Ber=o(" (WavLM model)"),Ier=l(),QT=a("p"),Ner=o("The model is set in evaluation mode by default using "),h_e=a("code"),qer=o("model.eval()"),jer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u_e=a("code"),Der=o("model.train()"),Ger=l(),F(HT.$$.fragment),lje=l(),pd=a("h2"),UT=a("a"),p_e=a("span"),F(w8.$$.fragment),Oer=l(),__e=a("span"),Ver=o("AutoModelForCTC"),ije=l(),Vo=a("div"),F(A8.$$.fragment),Xer=l(),_d=a("p"),zer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),hz=a("a"),Wer=o("from_pretrained()"),Qer=o(" class method or the "),uz=a("a"),Her=o("from_config()"),Uer=o(` class
method.`),Jer=l(),y8=a("p"),Yer=o("This class cannot be instantiated directly using "),b_e=a("code"),Ker=o("__init__()"),Zer=o(" (throws an error)."),eor=l(),vt=a("div"),F(L8.$$.fragment),oor=l(),v_e=a("p"),ror=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),tor=l(),bd=a("p"),aor=o(`Note:
Loading a model from its configuration file does `),F_e=a("strong"),nor=o("not"),sor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=a("a"),lor=o("from_pretrained()"),ior=o(" to load the model weights."),dor=l(),F(JT.$$.fragment),cor=l(),fo=a("div"),F(x8.$$.fragment),mor=l(),T_e=a("p"),gor=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),hor=l(),Va=a("p"),uor=o("The model class to instantiate is selected based on the "),M_e=a("code"),por=o("model_type"),_or=o(` property of the config object (either
passed as an argument or loaded from `),E_e=a("code"),bor=o("pretrained_model_name_or_path"),vor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C_e=a("code"),For=o("pretrained_model_name_or_path"),Tor=o(":"),Mor=l(),Re=a("ul"),YT=a("li"),w_e=a("strong"),Eor=o("data2vec-audio"),Cor=o(" \u2014 "),_z=a("a"),wor=o("Data2VecAudioForCTC"),Aor=o(" (Data2VecAudio model)"),yor=l(),KT=a("li"),A_e=a("strong"),Lor=o("hubert"),xor=o(" \u2014 "),bz=a("a"),$or=o("HubertForCTC"),kor=o(" (Hubert model)"),Sor=l(),ZT=a("li"),y_e=a("strong"),Ror=o("sew"),Por=o(" \u2014 "),vz=a("a"),Bor=o("SEWForCTC"),Ior=o(" (SEW model)"),Nor=l(),eM=a("li"),L_e=a("strong"),qor=o("sew-d"),jor=o(" \u2014 "),Fz=a("a"),Dor=o("SEWDForCTC"),Gor=o(" (SEW-D model)"),Oor=l(),oM=a("li"),x_e=a("strong"),Vor=o("unispeech"),Xor=o(" \u2014 "),Tz=a("a"),zor=o("UniSpeechForCTC"),Wor=o(" (UniSpeech model)"),Qor=l(),rM=a("li"),$_e=a("strong"),Hor=o("unispeech-sat"),Uor=o(" \u2014 "),Mz=a("a"),Jor=o("UniSpeechSatForCTC"),Yor=o(" (UniSpeechSat model)"),Kor=l(),tM=a("li"),k_e=a("strong"),Zor=o("wav2vec2"),err=o(" \u2014 "),Ez=a("a"),orr=o("Wav2Vec2ForCTC"),rrr=o(" (Wav2Vec2 model)"),trr=l(),aM=a("li"),S_e=a("strong"),arr=o("wav2vec2-conformer"),nrr=o(" \u2014 "),Cz=a("a"),srr=o("Wav2Vec2ConformerForCTC"),lrr=o(" (Wav2Vec2-Conformer model)"),irr=l(),nM=a("li"),R_e=a("strong"),drr=o("wavlm"),crr=o(" \u2014 "),wz=a("a"),mrr=o("WavLMForCTC"),frr=o(" (WavLM model)"),grr=l(),sM=a("p"),hrr=o("The model is set in evaluation mode by default using "),P_e=a("code"),urr=o("model.eval()"),prr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B_e=a("code"),_rr=o("model.train()"),brr=l(),F(lM.$$.fragment),dje=l(),vd=a("h2"),iM=a("a"),I_e=a("span"),F($8.$$.fragment),vrr=l(),N_e=a("span"),Frr=o("AutoModelForSpeechSeq2Seq"),cje=l(),Xo=a("div"),F(k8.$$.fragment),Trr=l(),Fd=a("p"),Mrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Az=a("a"),Err=o("from_pretrained()"),Crr=o(" class method or the "),yz=a("a"),wrr=o("from_config()"),Arr=o(` class
method.`),yrr=l(),S8=a("p"),Lrr=o("This class cannot be instantiated directly using "),q_e=a("code"),xrr=o("__init__()"),$rr=o(" (throws an error)."),krr=l(),Ft=a("div"),F(R8.$$.fragment),Srr=l(),j_e=a("p"),Rrr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Prr=l(),Td=a("p"),Brr=o(`Note:
Loading a model from its configuration file does `),D_e=a("strong"),Irr=o("not"),Nrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lz=a("a"),qrr=o("from_pretrained()"),jrr=o(" to load the model weights."),Drr=l(),F(dM.$$.fragment),Grr=l(),go=a("div"),F(P8.$$.fragment),Orr=l(),G_e=a("p"),Vrr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Xrr=l(),Xa=a("p"),zrr=o("The model class to instantiate is selected based on the "),O_e=a("code"),Wrr=o("model_type"),Qrr=o(` property of the config object (either
passed as an argument or loaded from `),V_e=a("code"),Hrr=o("pretrained_model_name_or_path"),Urr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X_e=a("code"),Jrr=o("pretrained_model_name_or_path"),Yrr=o(":"),Krr=l(),B8=a("ul"),cM=a("li"),z_e=a("strong"),Zrr=o("speech-encoder-decoder"),etr=o(" \u2014 "),xz=a("a"),otr=o("SpeechEncoderDecoderModel"),rtr=o(" (Speech Encoder decoder model)"),ttr=l(),mM=a("li"),W_e=a("strong"),atr=o("speech_to_text"),ntr=o(" \u2014 "),$z=a("a"),str=o("Speech2TextForConditionalGeneration"),ltr=o(" (Speech2Text model)"),itr=l(),fM=a("p"),dtr=o("The model is set in evaluation mode by default using "),Q_e=a("code"),ctr=o("model.eval()"),mtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H_e=a("code"),ftr=o("model.train()"),gtr=l(),F(gM.$$.fragment),mje=l(),Md=a("h2"),hM=a("a"),U_e=a("span"),F(I8.$$.fragment),htr=l(),J_e=a("span"),utr=o("AutoModelForAudioXVector"),fje=l(),zo=a("div"),F(N8.$$.fragment),ptr=l(),Ed=a("p"),_tr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),kz=a("a"),btr=o("from_pretrained()"),vtr=o(" class method or the "),Sz=a("a"),Ftr=o("from_config()"),Ttr=o(` class
method.`),Mtr=l(),q8=a("p"),Etr=o("This class cannot be instantiated directly using "),Y_e=a("code"),Ctr=o("__init__()"),wtr=o(" (throws an error)."),Atr=l(),Tt=a("div"),F(j8.$$.fragment),ytr=l(),K_e=a("p"),Ltr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),xtr=l(),Cd=a("p"),$tr=o(`Note:
Loading a model from its configuration file does `),Z_e=a("strong"),ktr=o("not"),Str=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rz=a("a"),Rtr=o("from_pretrained()"),Ptr=o(" to load the model weights."),Btr=l(),F(uM.$$.fragment),Itr=l(),ho=a("div"),F(D8.$$.fragment),Ntr=l(),ebe=a("p"),qtr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),jtr=l(),za=a("p"),Dtr=o("The model class to instantiate is selected based on the "),obe=a("code"),Gtr=o("model_type"),Otr=o(` property of the config object (either
passed as an argument or loaded from `),rbe=a("code"),Vtr=o("pretrained_model_name_or_path"),Xtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tbe=a("code"),ztr=o("pretrained_model_name_or_path"),Wtr=o(":"),Qtr=l(),Zr=a("ul"),pM=a("li"),abe=a("strong"),Htr=o("data2vec-audio"),Utr=o(" \u2014 "),Pz=a("a"),Jtr=o("Data2VecAudioForXVector"),Ytr=o(" (Data2VecAudio model)"),Ktr=l(),_M=a("li"),nbe=a("strong"),Ztr=o("unispeech-sat"),ear=o(" \u2014 "),Bz=a("a"),oar=o("UniSpeechSatForXVector"),rar=o(" (UniSpeechSat model)"),tar=l(),bM=a("li"),sbe=a("strong"),aar=o("wav2vec2"),nar=o(" \u2014 "),Iz=a("a"),sar=o("Wav2Vec2ForXVector"),lar=o(" (Wav2Vec2 model)"),iar=l(),vM=a("li"),lbe=a("strong"),dar=o("wav2vec2-conformer"),car=o(" \u2014 "),Nz=a("a"),mar=o("Wav2Vec2ConformerForXVector"),far=o(" (Wav2Vec2-Conformer model)"),gar=l(),FM=a("li"),ibe=a("strong"),har=o("wavlm"),uar=o(" \u2014 "),qz=a("a"),par=o("WavLMForXVector"),_ar=o(" (WavLM model)"),bar=l(),TM=a("p"),Far=o("The model is set in evaluation mode by default using "),dbe=a("code"),Tar=o("model.eval()"),Mar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cbe=a("code"),Ear=o("model.train()"),Car=l(),F(MM.$$.fragment),gje=l(),wd=a("h2"),EM=a("a"),mbe=a("span"),F(G8.$$.fragment),war=l(),fbe=a("span"),Aar=o("AutoModelForMaskedImageModeling"),hje=l(),Wo=a("div"),F(O8.$$.fragment),yar=l(),Ad=a("p"),Lar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),jz=a("a"),xar=o("from_pretrained()"),$ar=o(" class method or the "),Dz=a("a"),kar=o("from_config()"),Sar=o(` class
method.`),Rar=l(),V8=a("p"),Par=o("This class cannot be instantiated directly using "),gbe=a("code"),Bar=o("__init__()"),Iar=o(" (throws an error)."),Nar=l(),Mt=a("div"),F(X8.$$.fragment),qar=l(),hbe=a("p"),jar=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Dar=l(),yd=a("p"),Gar=o(`Note:
Loading a model from its configuration file does `),ube=a("strong"),Oar=o("not"),Var=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=a("a"),Xar=o("from_pretrained()"),zar=o(" to load the model weights."),War=l(),F(CM.$$.fragment),Qar=l(),uo=a("div"),F(z8.$$.fragment),Har=l(),pbe=a("p"),Uar=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Jar=l(),Wa=a("p"),Yar=o("The model class to instantiate is selected based on the "),_be=a("code"),Kar=o("model_type"),Zar=o(` property of the config object (either
passed as an argument or loaded from `),bbe=a("code"),enr=o("pretrained_model_name_or_path"),onr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vbe=a("code"),rnr=o("pretrained_model_name_or_path"),tnr=o(":"),anr=l(),Ld=a("ul"),wM=a("li"),Fbe=a("strong"),nnr=o("deit"),snr=o(" \u2014 "),Oz=a("a"),lnr=o("DeiTForMaskedImageModeling"),inr=o(" (DeiT model)"),dnr=l(),AM=a("li"),Tbe=a("strong"),cnr=o("swin"),mnr=o(" \u2014 "),Vz=a("a"),fnr=o("SwinForMaskedImageModeling"),gnr=o(" (Swin model)"),hnr=l(),yM=a("li"),Mbe=a("strong"),unr=o("vit"),pnr=o(" \u2014 "),Xz=a("a"),_nr=o("ViTForMaskedImageModeling"),bnr=o(" (ViT model)"),vnr=l(),LM=a("p"),Fnr=o("The model is set in evaluation mode by default using "),Ebe=a("code"),Tnr=o("model.eval()"),Mnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cbe=a("code"),Enr=o("model.train()"),Cnr=l(),F(xM.$$.fragment),uje=l(),xd=a("h2"),$M=a("a"),wbe=a("span"),F(W8.$$.fragment),wnr=l(),Abe=a("span"),Anr=o("AutoModelForObjectDetection"),pje=l(),Qo=a("div"),F(Q8.$$.fragment),ynr=l(),$d=a("p"),Lnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),zz=a("a"),xnr=o("from_pretrained()"),$nr=o(" class method or the "),Wz=a("a"),knr=o("from_config()"),Snr=o(` class
method.`),Rnr=l(),H8=a("p"),Pnr=o("This class cannot be instantiated directly using "),ybe=a("code"),Bnr=o("__init__()"),Inr=o(" (throws an error)."),Nnr=l(),Et=a("div"),F(U8.$$.fragment),qnr=l(),Lbe=a("p"),jnr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Dnr=l(),kd=a("p"),Gnr=o(`Note:
Loading a model from its configuration file does `),xbe=a("strong"),Onr=o("not"),Vnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=a("a"),Xnr=o("from_pretrained()"),znr=o(" to load the model weights."),Wnr=l(),F(kM.$$.fragment),Qnr=l(),po=a("div"),F(J8.$$.fragment),Hnr=l(),$be=a("p"),Unr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Jnr=l(),Qa=a("p"),Ynr=o("The model class to instantiate is selected based on the "),kbe=a("code"),Knr=o("model_type"),Znr=o(` property of the config object (either
passed as an argument or loaded from `),Sbe=a("code"),esr=o("pretrained_model_name_or_path"),osr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rbe=a("code"),rsr=o("pretrained_model_name_or_path"),tsr=o(":"),asr=l(),Y8=a("ul"),SM=a("li"),Pbe=a("strong"),nsr=o("detr"),ssr=o(" \u2014 "),Hz=a("a"),lsr=o("DetrForObjectDetection"),isr=o(" (DETR model)"),dsr=l(),RM=a("li"),Bbe=a("strong"),csr=o("yolos"),msr=o(" \u2014 "),Uz=a("a"),fsr=o("YolosForObjectDetection"),gsr=o(" (YOLOS model)"),hsr=l(),PM=a("p"),usr=o("The model is set in evaluation mode by default using "),Ibe=a("code"),psr=o("model.eval()"),_sr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nbe=a("code"),bsr=o("model.train()"),vsr=l(),F(BM.$$.fragment),_je=l(),Sd=a("h2"),IM=a("a"),qbe=a("span"),F(K8.$$.fragment),Fsr=l(),jbe=a("span"),Tsr=o("AutoModelForImageSegmentation"),bje=l(),Ho=a("div"),F(Z8.$$.fragment),Msr=l(),Rd=a("p"),Esr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Jz=a("a"),Csr=o("from_pretrained()"),wsr=o(" class method or the "),Yz=a("a"),Asr=o("from_config()"),ysr=o(` class
method.`),Lsr=l(),e7=a("p"),xsr=o("This class cannot be instantiated directly using "),Dbe=a("code"),$sr=o("__init__()"),ksr=o(" (throws an error)."),Ssr=l(),Ct=a("div"),F(o7.$$.fragment),Rsr=l(),Gbe=a("p"),Psr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Bsr=l(),Pd=a("p"),Isr=o(`Note:
Loading a model from its configuration file does `),Obe=a("strong"),Nsr=o("not"),qsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kz=a("a"),jsr=o("from_pretrained()"),Dsr=o(" to load the model weights."),Gsr=l(),F(NM.$$.fragment),Osr=l(),_o=a("div"),F(r7.$$.fragment),Vsr=l(),Vbe=a("p"),Xsr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),zsr=l(),Ha=a("p"),Wsr=o("The model class to instantiate is selected based on the "),Xbe=a("code"),Qsr=o("model_type"),Hsr=o(` property of the config object (either
passed as an argument or loaded from `),zbe=a("code"),Usr=o("pretrained_model_name_or_path"),Jsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wbe=a("code"),Ysr=o("pretrained_model_name_or_path"),Ksr=o(":"),Zsr=l(),Qbe=a("ul"),qM=a("li"),Hbe=a("strong"),elr=o("detr"),olr=o(" \u2014 "),Zz=a("a"),rlr=o("DetrForSegmentation"),tlr=o(" (DETR model)"),alr=l(),jM=a("p"),nlr=o("The model is set in evaluation mode by default using "),Ube=a("code"),slr=o("model.eval()"),llr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jbe=a("code"),ilr=o("model.train()"),dlr=l(),F(DM.$$.fragment),vje=l(),Bd=a("h2"),GM=a("a"),Ybe=a("span"),F(t7.$$.fragment),clr=l(),Kbe=a("span"),mlr=o("AutoModelForSemanticSegmentation"),Fje=l(),Uo=a("div"),F(a7.$$.fragment),flr=l(),Id=a("p"),glr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),eW=a("a"),hlr=o("from_pretrained()"),ulr=o(" class method or the "),oW=a("a"),plr=o("from_config()"),_lr=o(` class
method.`),blr=l(),n7=a("p"),vlr=o("This class cannot be instantiated directly using "),Zbe=a("code"),Flr=o("__init__()"),Tlr=o(" (throws an error)."),Mlr=l(),wt=a("div"),F(s7.$$.fragment),Elr=l(),e2e=a("p"),Clr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),wlr=l(),Nd=a("p"),Alr=o(`Note:
Loading a model from its configuration file does `),o2e=a("strong"),ylr=o("not"),Llr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=a("a"),xlr=o("from_pretrained()"),$lr=o(" to load the model weights."),klr=l(),F(OM.$$.fragment),Slr=l(),bo=a("div"),F(l7.$$.fragment),Rlr=l(),r2e=a("p"),Plr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Blr=l(),Ua=a("p"),Ilr=o("The model class to instantiate is selected based on the "),t2e=a("code"),Nlr=o("model_type"),qlr=o(` property of the config object (either
passed as an argument or loaded from `),a2e=a("code"),jlr=o("pretrained_model_name_or_path"),Dlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n2e=a("code"),Glr=o("pretrained_model_name_or_path"),Olr=o(":"),Vlr=l(),Ja=a("ul"),VM=a("li"),s2e=a("strong"),Xlr=o("beit"),zlr=o(" \u2014 "),tW=a("a"),Wlr=o("BeitForSemanticSegmentation"),Qlr=o(" (BEiT model)"),Hlr=l(),XM=a("li"),l2e=a("strong"),Ulr=o("data2vec-vision"),Jlr=o(" \u2014 "),aW=a("a"),Ylr=o("Data2VecVisionForSemanticSegmentation"),Klr=o(" (Data2VecVision model)"),Zlr=l(),zM=a("li"),i2e=a("strong"),eir=o("dpt"),oir=o(" \u2014 "),nW=a("a"),rir=o("DPTForSemanticSegmentation"),tir=o(" (DPT model)"),air=l(),WM=a("li"),d2e=a("strong"),nir=o("segformer"),sir=o(" \u2014 "),sW=a("a"),lir=o("SegformerForSemanticSegmentation"),iir=o(" (SegFormer model)"),dir=l(),QM=a("p"),cir=o("The model is set in evaluation mode by default using "),c2e=a("code"),mir=o("model.eval()"),fir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m2e=a("code"),gir=o("model.train()"),hir=l(),F(HM.$$.fragment),Tje=l(),qd=a("h2"),UM=a("a"),f2e=a("span"),F(i7.$$.fragment),uir=l(),g2e=a("span"),pir=o("AutoModelForInstanceSegmentation"),Mje=l(),Jo=a("div"),F(d7.$$.fragment),_ir=l(),jd=a("p"),bir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),lW=a("a"),vir=o("from_pretrained()"),Fir=o(" class method or the "),iW=a("a"),Tir=o("from_config()"),Mir=o(` class
method.`),Eir=l(),c7=a("p"),Cir=o("This class cannot be instantiated directly using "),h2e=a("code"),wir=o("__init__()"),Air=o(" (throws an error)."),yir=l(),At=a("div"),F(m7.$$.fragment),Lir=l(),u2e=a("p"),xir=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),$ir=l(),Dd=a("p"),kir=o(`Note:
Loading a model from its configuration file does `),p2e=a("strong"),Sir=o("not"),Rir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=a("a"),Pir=o("from_pretrained()"),Bir=o(" to load the model weights."),Iir=l(),F(JM.$$.fragment),Nir=l(),vo=a("div"),F(f7.$$.fragment),qir=l(),_2e=a("p"),jir=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Dir=l(),Ya=a("p"),Gir=o("The model class to instantiate is selected based on the "),b2e=a("code"),Oir=o("model_type"),Vir=o(` property of the config object (either
passed as an argument or loaded from `),v2e=a("code"),Xir=o("pretrained_model_name_or_path"),zir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F2e=a("code"),Wir=o("pretrained_model_name_or_path"),Qir=o(":"),Hir=l(),T2e=a("ul"),YM=a("li"),M2e=a("strong"),Uir=o("maskformer"),Jir=o(" \u2014 "),cW=a("a"),Yir=o("MaskFormerForInstanceSegmentation"),Kir=o(" (MaskFormer model)"),Zir=l(),KM=a("p"),edr=o("The model is set in evaluation mode by default using "),E2e=a("code"),odr=o("model.eval()"),rdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C2e=a("code"),tdr=o("model.train()"),adr=l(),F(ZM.$$.fragment),Eje=l(),Gd=a("h2"),e4=a("a"),w2e=a("span"),F(g7.$$.fragment),ndr=l(),A2e=a("span"),sdr=o("TFAutoModel"),Cje=l(),Yo=a("div"),F(h7.$$.fragment),ldr=l(),Od=a("p"),idr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mW=a("a"),ddr=o("from_pretrained()"),cdr=o(" class method or the "),fW=a("a"),mdr=o("from_config()"),fdr=o(` class
method.`),gdr=l(),u7=a("p"),hdr=o("This class cannot be instantiated directly using "),y2e=a("code"),udr=o("__init__()"),pdr=o(" (throws an error)."),_dr=l(),yt=a("div"),F(p7.$$.fragment),bdr=l(),L2e=a("p"),vdr=o("Instantiates one of the base model classes of the library from a configuration."),Fdr=l(),Vd=a("p"),Tdr=o(`Note:
Loading a model from its configuration file does `),x2e=a("strong"),Mdr=o("not"),Edr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=a("a"),Cdr=o("from_pretrained()"),wdr=o(" to load the model weights."),Adr=l(),F(o4.$$.fragment),ydr=l(),wr=a("div"),F(_7.$$.fragment),Ldr=l(),$2e=a("p"),xdr=o("Instantiate one of the base model classes of the library from a pretrained model."),$dr=l(),Ka=a("p"),kdr=o("The model class to instantiate is selected based on the "),k2e=a("code"),Sdr=o("model_type"),Rdr=o(` property of the config object (either
passed as an argument or loaded from `),S2e=a("code"),Pdr=o("pretrained_model_name_or_path"),Bdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R2e=a("code"),Idr=o("pretrained_model_name_or_path"),Ndr=o(":"),qdr=l(),q=a("ul"),r4=a("li"),P2e=a("strong"),jdr=o("albert"),Ddr=o(" \u2014 "),hW=a("a"),Gdr=o("TFAlbertModel"),Odr=o(" (ALBERT model)"),Vdr=l(),t4=a("li"),B2e=a("strong"),Xdr=o("bart"),zdr=o(" \u2014 "),uW=a("a"),Wdr=o("TFBartModel"),Qdr=o(" (BART model)"),Hdr=l(),a4=a("li"),I2e=a("strong"),Udr=o("bert"),Jdr=o(" \u2014 "),pW=a("a"),Ydr=o("TFBertModel"),Kdr=o(" (BERT model)"),Zdr=l(),n4=a("li"),N2e=a("strong"),ecr=o("blenderbot"),ocr=o(" \u2014 "),_W=a("a"),rcr=o("TFBlenderbotModel"),tcr=o(" (Blenderbot model)"),acr=l(),s4=a("li"),q2e=a("strong"),ncr=o("blenderbot-small"),scr=o(" \u2014 "),bW=a("a"),lcr=o("TFBlenderbotSmallModel"),icr=o(" (BlenderbotSmall model)"),dcr=l(),l4=a("li"),j2e=a("strong"),ccr=o("camembert"),mcr=o(" \u2014 "),vW=a("a"),fcr=o("TFCamembertModel"),gcr=o(" (CamemBERT model)"),hcr=l(),i4=a("li"),D2e=a("strong"),ucr=o("clip"),pcr=o(" \u2014 "),FW=a("a"),_cr=o("TFCLIPModel"),bcr=o(" (CLIP model)"),vcr=l(),d4=a("li"),G2e=a("strong"),Fcr=o("convbert"),Tcr=o(" \u2014 "),TW=a("a"),Mcr=o("TFConvBertModel"),Ecr=o(" (ConvBERT model)"),Ccr=l(),c4=a("li"),O2e=a("strong"),wcr=o("convnext"),Acr=o(" \u2014 "),MW=a("a"),ycr=o("TFConvNextModel"),Lcr=o(" (ConvNext model)"),xcr=l(),m4=a("li"),V2e=a("strong"),$cr=o("ctrl"),kcr=o(" \u2014 "),EW=a("a"),Scr=o("TFCTRLModel"),Rcr=o(" (CTRL model)"),Pcr=l(),f4=a("li"),X2e=a("strong"),Bcr=o("data2vec-vision"),Icr=o(" \u2014 "),CW=a("a"),Ncr=o("TFData2VecVisionModel"),qcr=o(" (Data2VecVision model)"),jcr=l(),g4=a("li"),z2e=a("strong"),Dcr=o("deberta"),Gcr=o(" \u2014 "),wW=a("a"),Ocr=o("TFDebertaModel"),Vcr=o(" (DeBERTa model)"),Xcr=l(),h4=a("li"),W2e=a("strong"),zcr=o("deberta-v2"),Wcr=o(" \u2014 "),AW=a("a"),Qcr=o("TFDebertaV2Model"),Hcr=o(" (DeBERTa-v2 model)"),Ucr=l(),u4=a("li"),Q2e=a("strong"),Jcr=o("distilbert"),Ycr=o(" \u2014 "),yW=a("a"),Kcr=o("TFDistilBertModel"),Zcr=o(" (DistilBERT model)"),emr=l(),p4=a("li"),H2e=a("strong"),omr=o("dpr"),rmr=o(" \u2014 "),LW=a("a"),tmr=o("TFDPRQuestionEncoder"),amr=o(" (DPR model)"),nmr=l(),_4=a("li"),U2e=a("strong"),smr=o("electra"),lmr=o(" \u2014 "),xW=a("a"),imr=o("TFElectraModel"),dmr=o(" (ELECTRA model)"),cmr=l(),b4=a("li"),J2e=a("strong"),mmr=o("flaubert"),fmr=o(" \u2014 "),$W=a("a"),gmr=o("TFFlaubertModel"),hmr=o(" (FlauBERT model)"),umr=l(),Is=a("li"),Y2e=a("strong"),pmr=o("funnel"),_mr=o(" \u2014 "),kW=a("a"),bmr=o("TFFunnelModel"),vmr=o(" or "),SW=a("a"),Fmr=o("TFFunnelBaseModel"),Tmr=o(" (Funnel Transformer model)"),Mmr=l(),v4=a("li"),K2e=a("strong"),Emr=o("gpt2"),Cmr=o(" \u2014 "),RW=a("a"),wmr=o("TFGPT2Model"),Amr=o(" (OpenAI GPT-2 model)"),ymr=l(),F4=a("li"),Z2e=a("strong"),Lmr=o("gptj"),xmr=o(" \u2014 "),PW=a("a"),$mr=o("TFGPTJModel"),kmr=o(" (GPT-J model)"),Smr=l(),T4=a("li"),eve=a("strong"),Rmr=o("hubert"),Pmr=o(" \u2014 "),BW=a("a"),Bmr=o("TFHubertModel"),Imr=o(" (Hubert model)"),Nmr=l(),M4=a("li"),ove=a("strong"),qmr=o("layoutlm"),jmr=o(" \u2014 "),IW=a("a"),Dmr=o("TFLayoutLMModel"),Gmr=o(" (LayoutLM model)"),Omr=l(),E4=a("li"),rve=a("strong"),Vmr=o("led"),Xmr=o(" \u2014 "),NW=a("a"),zmr=o("TFLEDModel"),Wmr=o(" (LED model)"),Qmr=l(),C4=a("li"),tve=a("strong"),Hmr=o("longformer"),Umr=o(" \u2014 "),qW=a("a"),Jmr=o("TFLongformerModel"),Ymr=o(" (Longformer model)"),Kmr=l(),w4=a("li"),ave=a("strong"),Zmr=o("lxmert"),efr=o(" \u2014 "),jW=a("a"),ofr=o("TFLxmertModel"),rfr=o(" (LXMERT model)"),tfr=l(),A4=a("li"),nve=a("strong"),afr=o("marian"),nfr=o(" \u2014 "),DW=a("a"),sfr=o("TFMarianModel"),lfr=o(" (Marian model)"),ifr=l(),y4=a("li"),sve=a("strong"),dfr=o("mbart"),cfr=o(" \u2014 "),GW=a("a"),mfr=o("TFMBartModel"),ffr=o(" (mBART model)"),gfr=l(),L4=a("li"),lve=a("strong"),hfr=o("mobilebert"),ufr=o(" \u2014 "),OW=a("a"),pfr=o("TFMobileBertModel"),_fr=o(" (MobileBERT model)"),bfr=l(),x4=a("li"),ive=a("strong"),vfr=o("mpnet"),Ffr=o(" \u2014 "),VW=a("a"),Tfr=o("TFMPNetModel"),Mfr=o(" (MPNet model)"),Efr=l(),$4=a("li"),dve=a("strong"),Cfr=o("mt5"),wfr=o(" \u2014 "),XW=a("a"),Afr=o("TFMT5Model"),yfr=o(" (mT5 model)"),Lfr=l(),k4=a("li"),cve=a("strong"),xfr=o("openai-gpt"),$fr=o(" \u2014 "),zW=a("a"),kfr=o("TFOpenAIGPTModel"),Sfr=o(" (OpenAI GPT model)"),Rfr=l(),S4=a("li"),mve=a("strong"),Pfr=o("opt"),Bfr=o(" \u2014 "),WW=a("a"),Ifr=o("TFOPTModel"),Nfr=o(" (OPT model)"),qfr=l(),R4=a("li"),fve=a("strong"),jfr=o("pegasus"),Dfr=o(" \u2014 "),QW=a("a"),Gfr=o("TFPegasusModel"),Ofr=o(" (Pegasus model)"),Vfr=l(),P4=a("li"),gve=a("strong"),Xfr=o("rembert"),zfr=o(" \u2014 "),HW=a("a"),Wfr=o("TFRemBertModel"),Qfr=o(" (RemBERT model)"),Hfr=l(),B4=a("li"),hve=a("strong"),Ufr=o("roberta"),Jfr=o(" \u2014 "),UW=a("a"),Yfr=o("TFRobertaModel"),Kfr=o(" (RoBERTa model)"),Zfr=l(),I4=a("li"),uve=a("strong"),egr=o("roformer"),ogr=o(" \u2014 "),JW=a("a"),rgr=o("TFRoFormerModel"),tgr=o(" (RoFormer model)"),agr=l(),N4=a("li"),pve=a("strong"),ngr=o("speech_to_text"),sgr=o(" \u2014 "),YW=a("a"),lgr=o("TFSpeech2TextModel"),igr=o(" (Speech2Text model)"),dgr=l(),q4=a("li"),_ve=a("strong"),cgr=o("swin"),mgr=o(" \u2014 "),KW=a("a"),fgr=o("TFSwinModel"),ggr=o(" (Swin model)"),hgr=l(),j4=a("li"),bve=a("strong"),ugr=o("t5"),pgr=o(" \u2014 "),ZW=a("a"),_gr=o("TFT5Model"),bgr=o(" (T5 model)"),vgr=l(),D4=a("li"),vve=a("strong"),Fgr=o("tapas"),Tgr=o(" \u2014 "),eQ=a("a"),Mgr=o("TFTapasModel"),Egr=o(" (TAPAS model)"),Cgr=l(),G4=a("li"),Fve=a("strong"),wgr=o("transfo-xl"),Agr=o(" \u2014 "),oQ=a("a"),ygr=o("TFTransfoXLModel"),Lgr=o(" (Transformer-XL model)"),xgr=l(),O4=a("li"),Tve=a("strong"),$gr=o("vit"),kgr=o(" \u2014 "),rQ=a("a"),Sgr=o("TFViTModel"),Rgr=o(" (ViT model)"),Pgr=l(),V4=a("li"),Mve=a("strong"),Bgr=o("vit_mae"),Igr=o(" \u2014 "),tQ=a("a"),Ngr=o("TFViTMAEModel"),qgr=o(" (ViTMAE model)"),jgr=l(),X4=a("li"),Eve=a("strong"),Dgr=o("wav2vec2"),Ggr=o(" \u2014 "),aQ=a("a"),Ogr=o("TFWav2Vec2Model"),Vgr=o(" (Wav2Vec2 model)"),Xgr=l(),z4=a("li"),Cve=a("strong"),zgr=o("xlm"),Wgr=o(" \u2014 "),nQ=a("a"),Qgr=o("TFXLMModel"),Hgr=o(" (XLM model)"),Ugr=l(),W4=a("li"),wve=a("strong"),Jgr=o("xlm-roberta"),Ygr=o(" \u2014 "),sQ=a("a"),Kgr=o("TFXLMRobertaModel"),Zgr=o(" (XLM-RoBERTa model)"),ehr=l(),Q4=a("li"),Ave=a("strong"),ohr=o("xlnet"),rhr=o(" \u2014 "),lQ=a("a"),thr=o("TFXLNetModel"),ahr=o(" (XLNet model)"),nhr=l(),F(H4.$$.fragment),wje=l(),Xd=a("h2"),U4=a("a"),yve=a("span"),F(b7.$$.fragment),shr=l(),Lve=a("span"),lhr=o("TFAutoModelForPreTraining"),Aje=l(),Ko=a("div"),F(v7.$$.fragment),ihr=l(),zd=a("p"),dhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),iQ=a("a"),chr=o("from_pretrained()"),mhr=o(" class method or the "),dQ=a("a"),fhr=o("from_config()"),ghr=o(` class
method.`),hhr=l(),F7=a("p"),uhr=o("This class cannot be instantiated directly using "),xve=a("code"),phr=o("__init__()"),_hr=o(" (throws an error)."),bhr=l(),Lt=a("div"),F(T7.$$.fragment),vhr=l(),$ve=a("p"),Fhr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Thr=l(),Wd=a("p"),Mhr=o(`Note:
Loading a model from its configuration file does `),kve=a("strong"),Ehr=o("not"),Chr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cQ=a("a"),whr=o("from_pretrained()"),Ahr=o(" to load the model weights."),yhr=l(),F(J4.$$.fragment),Lhr=l(),Ar=a("div"),F(M7.$$.fragment),xhr=l(),Sve=a("p"),$hr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),khr=l(),Za=a("p"),Shr=o("The model class to instantiate is selected based on the "),Rve=a("code"),Rhr=o("model_type"),Phr=o(` property of the config object (either
passed as an argument or loaded from `),Pve=a("code"),Bhr=o("pretrained_model_name_or_path"),Ihr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=a("code"),Nhr=o("pretrained_model_name_or_path"),qhr=o(":"),jhr=l(),se=a("ul"),Y4=a("li"),Ive=a("strong"),Dhr=o("albert"),Ghr=o(" \u2014 "),mQ=a("a"),Ohr=o("TFAlbertForPreTraining"),Vhr=o(" (ALBERT model)"),Xhr=l(),K4=a("li"),Nve=a("strong"),zhr=o("bart"),Whr=o(" \u2014 "),fQ=a("a"),Qhr=o("TFBartForConditionalGeneration"),Hhr=o(" (BART model)"),Uhr=l(),Z4=a("li"),qve=a("strong"),Jhr=o("bert"),Yhr=o(" \u2014 "),gQ=a("a"),Khr=o("TFBertForPreTraining"),Zhr=o(" (BERT model)"),eur=l(),eE=a("li"),jve=a("strong"),our=o("camembert"),rur=o(" \u2014 "),hQ=a("a"),tur=o("TFCamembertForMaskedLM"),aur=o(" (CamemBERT model)"),nur=l(),oE=a("li"),Dve=a("strong"),sur=o("ctrl"),lur=o(" \u2014 "),uQ=a("a"),iur=o("TFCTRLLMHeadModel"),dur=o(" (CTRL model)"),cur=l(),rE=a("li"),Gve=a("strong"),mur=o("distilbert"),fur=o(" \u2014 "),pQ=a("a"),gur=o("TFDistilBertForMaskedLM"),hur=o(" (DistilBERT model)"),uur=l(),tE=a("li"),Ove=a("strong"),pur=o("electra"),_ur=o(" \u2014 "),_Q=a("a"),bur=o("TFElectraForPreTraining"),vur=o(" (ELECTRA model)"),Fur=l(),aE=a("li"),Vve=a("strong"),Tur=o("flaubert"),Mur=o(" \u2014 "),bQ=a("a"),Eur=o("TFFlaubertWithLMHeadModel"),Cur=o(" (FlauBERT model)"),wur=l(),nE=a("li"),Xve=a("strong"),Aur=o("funnel"),yur=o(" \u2014 "),vQ=a("a"),Lur=o("TFFunnelForPreTraining"),xur=o(" (Funnel Transformer model)"),$ur=l(),sE=a("li"),zve=a("strong"),kur=o("gpt2"),Sur=o(" \u2014 "),FQ=a("a"),Rur=o("TFGPT2LMHeadModel"),Pur=o(" (OpenAI GPT-2 model)"),Bur=l(),lE=a("li"),Wve=a("strong"),Iur=o("layoutlm"),Nur=o(" \u2014 "),TQ=a("a"),qur=o("TFLayoutLMForMaskedLM"),jur=o(" (LayoutLM model)"),Dur=l(),iE=a("li"),Qve=a("strong"),Gur=o("lxmert"),Our=o(" \u2014 "),MQ=a("a"),Vur=o("TFLxmertForPreTraining"),Xur=o(" (LXMERT model)"),zur=l(),dE=a("li"),Hve=a("strong"),Wur=o("mobilebert"),Qur=o(" \u2014 "),EQ=a("a"),Hur=o("TFMobileBertForPreTraining"),Uur=o(" (MobileBERT model)"),Jur=l(),cE=a("li"),Uve=a("strong"),Yur=o("mpnet"),Kur=o(" \u2014 "),CQ=a("a"),Zur=o("TFMPNetForMaskedLM"),epr=o(" (MPNet model)"),opr=l(),mE=a("li"),Jve=a("strong"),rpr=o("openai-gpt"),tpr=o(" \u2014 "),wQ=a("a"),apr=o("TFOpenAIGPTLMHeadModel"),npr=o(" (OpenAI GPT model)"),spr=l(),fE=a("li"),Yve=a("strong"),lpr=o("roberta"),ipr=o(" \u2014 "),AQ=a("a"),dpr=o("TFRobertaForMaskedLM"),cpr=o(" (RoBERTa model)"),mpr=l(),gE=a("li"),Kve=a("strong"),fpr=o("t5"),gpr=o(" \u2014 "),yQ=a("a"),hpr=o("TFT5ForConditionalGeneration"),upr=o(" (T5 model)"),ppr=l(),hE=a("li"),Zve=a("strong"),_pr=o("tapas"),bpr=o(" \u2014 "),LQ=a("a"),vpr=o("TFTapasForMaskedLM"),Fpr=o(" (TAPAS model)"),Tpr=l(),uE=a("li"),eFe=a("strong"),Mpr=o("transfo-xl"),Epr=o(" \u2014 "),xQ=a("a"),Cpr=o("TFTransfoXLLMHeadModel"),wpr=o(" (Transformer-XL model)"),Apr=l(),pE=a("li"),oFe=a("strong"),ypr=o("vit_mae"),Lpr=o(" \u2014 "),$Q=a("a"),xpr=o("TFViTMAEForPreTraining"),$pr=o(" (ViTMAE model)"),kpr=l(),_E=a("li"),rFe=a("strong"),Spr=o("xlm"),Rpr=o(" \u2014 "),kQ=a("a"),Ppr=o("TFXLMWithLMHeadModel"),Bpr=o(" (XLM model)"),Ipr=l(),bE=a("li"),tFe=a("strong"),Npr=o("xlm-roberta"),qpr=o(" \u2014 "),SQ=a("a"),jpr=o("TFXLMRobertaForMaskedLM"),Dpr=o(" (XLM-RoBERTa model)"),Gpr=l(),vE=a("li"),aFe=a("strong"),Opr=o("xlnet"),Vpr=o(" \u2014 "),RQ=a("a"),Xpr=o("TFXLNetLMHeadModel"),zpr=o(" (XLNet model)"),Wpr=l(),F(FE.$$.fragment),yje=l(),Qd=a("h2"),TE=a("a"),nFe=a("span"),F(E7.$$.fragment),Qpr=l(),sFe=a("span"),Hpr=o("TFAutoModelForCausalLM"),Lje=l(),Zo=a("div"),F(C7.$$.fragment),Upr=l(),Hd=a("p"),Jpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),PQ=a("a"),Ypr=o("from_pretrained()"),Kpr=o(" class method or the "),BQ=a("a"),Zpr=o("from_config()"),e_r=o(` class
method.`),o_r=l(),w7=a("p"),r_r=o("This class cannot be instantiated directly using "),lFe=a("code"),t_r=o("__init__()"),a_r=o(" (throws an error)."),n_r=l(),xt=a("div"),F(A7.$$.fragment),s_r=l(),iFe=a("p"),l_r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),i_r=l(),Ud=a("p"),d_r=o(`Note:
Loading a model from its configuration file does `),dFe=a("strong"),c_r=o("not"),m_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=a("a"),f_r=o("from_pretrained()"),g_r=o(" to load the model weights."),h_r=l(),F(ME.$$.fragment),u_r=l(),yr=a("div"),F(y7.$$.fragment),p_r=l(),cFe=a("p"),__r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),b_r=l(),en=a("p"),v_r=o("The model class to instantiate is selected based on the "),mFe=a("code"),F_r=o("model_type"),T_r=o(` property of the config object (either
passed as an argument or loaded from `),fFe=a("code"),M_r=o("pretrained_model_name_or_path"),E_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gFe=a("code"),C_r=o("pretrained_model_name_or_path"),w_r=o(":"),A_r=l(),Te=a("ul"),EE=a("li"),hFe=a("strong"),y_r=o("bert"),L_r=o(" \u2014 "),NQ=a("a"),x_r=o("TFBertLMHeadModel"),$_r=o(" (BERT model)"),k_r=l(),CE=a("li"),uFe=a("strong"),S_r=o("camembert"),R_r=o(" \u2014 "),qQ=a("a"),P_r=o("TFCamembertForCausalLM"),B_r=o(" (CamemBERT model)"),I_r=l(),wE=a("li"),pFe=a("strong"),N_r=o("ctrl"),q_r=o(" \u2014 "),jQ=a("a"),j_r=o("TFCTRLLMHeadModel"),D_r=o(" (CTRL model)"),G_r=l(),AE=a("li"),_Fe=a("strong"),O_r=o("gpt2"),V_r=o(" \u2014 "),DQ=a("a"),X_r=o("TFGPT2LMHeadModel"),z_r=o(" (OpenAI GPT-2 model)"),W_r=l(),yE=a("li"),bFe=a("strong"),Q_r=o("gptj"),H_r=o(" \u2014 "),GQ=a("a"),U_r=o("TFGPTJForCausalLM"),J_r=o(" (GPT-J model)"),Y_r=l(),LE=a("li"),vFe=a("strong"),K_r=o("openai-gpt"),Z_r=o(" \u2014 "),OQ=a("a"),ebr=o("TFOpenAIGPTLMHeadModel"),obr=o(" (OpenAI GPT model)"),rbr=l(),xE=a("li"),FFe=a("strong"),tbr=o("opt"),abr=o(" \u2014 "),VQ=a("a"),nbr=o("TFOPTForCausalLM"),sbr=o(" (OPT model)"),lbr=l(),$E=a("li"),TFe=a("strong"),ibr=o("rembert"),dbr=o(" \u2014 "),XQ=a("a"),cbr=o("TFRemBertForCausalLM"),mbr=o(" (RemBERT model)"),fbr=l(),kE=a("li"),MFe=a("strong"),gbr=o("roberta"),hbr=o(" \u2014 "),zQ=a("a"),ubr=o("TFRobertaForCausalLM"),pbr=o(" (RoBERTa model)"),_br=l(),SE=a("li"),EFe=a("strong"),bbr=o("roformer"),vbr=o(" \u2014 "),WQ=a("a"),Fbr=o("TFRoFormerForCausalLM"),Tbr=o(" (RoFormer model)"),Mbr=l(),RE=a("li"),CFe=a("strong"),Ebr=o("transfo-xl"),Cbr=o(" \u2014 "),QQ=a("a"),wbr=o("TFTransfoXLLMHeadModel"),Abr=o(" (Transformer-XL model)"),ybr=l(),PE=a("li"),wFe=a("strong"),Lbr=o("xlm"),xbr=o(" \u2014 "),HQ=a("a"),$br=o("TFXLMWithLMHeadModel"),kbr=o(" (XLM model)"),Sbr=l(),BE=a("li"),AFe=a("strong"),Rbr=o("xlnet"),Pbr=o(" \u2014 "),UQ=a("a"),Bbr=o("TFXLNetLMHeadModel"),Ibr=o(" (XLNet model)"),Nbr=l(),F(IE.$$.fragment),xje=l(),Jd=a("h2"),NE=a("a"),yFe=a("span"),F(L7.$$.fragment),qbr=l(),LFe=a("span"),jbr=o("TFAutoModelForImageClassification"),$je=l(),er=a("div"),F(x7.$$.fragment),Dbr=l(),Yd=a("p"),Gbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),JQ=a("a"),Obr=o("from_pretrained()"),Vbr=o(" class method or the "),YQ=a("a"),Xbr=o("from_config()"),zbr=o(` class
method.`),Wbr=l(),$7=a("p"),Qbr=o("This class cannot be instantiated directly using "),xFe=a("code"),Hbr=o("__init__()"),Ubr=o(" (throws an error)."),Jbr=l(),$t=a("div"),F(k7.$$.fragment),Ybr=l(),$Fe=a("p"),Kbr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Zbr=l(),Kd=a("p"),e2r=o(`Note:
Loading a model from its configuration file does `),kFe=a("strong"),o2r=o("not"),r2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KQ=a("a"),t2r=o("from_pretrained()"),a2r=o(" to load the model weights."),n2r=l(),F(qE.$$.fragment),s2r=l(),Lr=a("div"),F(S7.$$.fragment),l2r=l(),SFe=a("p"),i2r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),d2r=l(),on=a("p"),c2r=o("The model class to instantiate is selected based on the "),RFe=a("code"),m2r=o("model_type"),f2r=o(` property of the config object (either
passed as an argument or loaded from `),PFe=a("code"),g2r=o("pretrained_model_name_or_path"),h2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=a("code"),u2r=o("pretrained_model_name_or_path"),p2r=o(":"),_2r=l(),rn=a("ul"),jE=a("li"),IFe=a("strong"),b2r=o("convnext"),v2r=o(" \u2014 "),ZQ=a("a"),F2r=o("TFConvNextForImageClassification"),T2r=o(" (ConvNext model)"),M2r=l(),DE=a("li"),NFe=a("strong"),E2r=o("data2vec-vision"),C2r=o(" \u2014 "),eH=a("a"),w2r=o("TFData2VecVisionForImageClassification"),A2r=o(" (Data2VecVision model)"),y2r=l(),GE=a("li"),qFe=a("strong"),L2r=o("swin"),x2r=o(" \u2014 "),oH=a("a"),$2r=o("TFSwinForImageClassification"),k2r=o(" (Swin model)"),S2r=l(),OE=a("li"),jFe=a("strong"),R2r=o("vit"),P2r=o(" \u2014 "),rH=a("a"),B2r=o("TFViTForImageClassification"),I2r=o(" (ViT model)"),N2r=l(),F(VE.$$.fragment),kje=l(),Zd=a("h2"),XE=a("a"),DFe=a("span"),F(R7.$$.fragment),q2r=l(),GFe=a("span"),j2r=o("TFAutoModelForMaskedLM"),Sje=l(),or=a("div"),F(P7.$$.fragment),D2r=l(),ec=a("p"),G2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),tH=a("a"),O2r=o("from_pretrained()"),V2r=o(" class method or the "),aH=a("a"),X2r=o("from_config()"),z2r=o(` class
method.`),W2r=l(),B7=a("p"),Q2r=o("This class cannot be instantiated directly using "),OFe=a("code"),H2r=o("__init__()"),U2r=o(" (throws an error)."),J2r=l(),kt=a("div"),F(I7.$$.fragment),Y2r=l(),VFe=a("p"),K2r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Z2r=l(),oc=a("p"),evr=o(`Note:
Loading a model from its configuration file does `),XFe=a("strong"),ovr=o("not"),rvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nH=a("a"),tvr=o("from_pretrained()"),avr=o(" to load the model weights."),nvr=l(),F(zE.$$.fragment),svr=l(),xr=a("div"),F(N7.$$.fragment),lvr=l(),zFe=a("p"),ivr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),dvr=l(),tn=a("p"),cvr=o("The model class to instantiate is selected based on the "),WFe=a("code"),mvr=o("model_type"),fvr=o(` property of the config object (either
passed as an argument or loaded from `),QFe=a("code"),gvr=o("pretrained_model_name_or_path"),hvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HFe=a("code"),uvr=o("pretrained_model_name_or_path"),pvr=o(":"),_vr=l(),ie=a("ul"),WE=a("li"),UFe=a("strong"),bvr=o("albert"),vvr=o(" \u2014 "),sH=a("a"),Fvr=o("TFAlbertForMaskedLM"),Tvr=o(" (ALBERT model)"),Mvr=l(),QE=a("li"),JFe=a("strong"),Evr=o("bert"),Cvr=o(" \u2014 "),lH=a("a"),wvr=o("TFBertForMaskedLM"),Avr=o(" (BERT model)"),yvr=l(),HE=a("li"),YFe=a("strong"),Lvr=o("camembert"),xvr=o(" \u2014 "),iH=a("a"),$vr=o("TFCamembertForMaskedLM"),kvr=o(" (CamemBERT model)"),Svr=l(),UE=a("li"),KFe=a("strong"),Rvr=o("convbert"),Pvr=o(" \u2014 "),dH=a("a"),Bvr=o("TFConvBertForMaskedLM"),Ivr=o(" (ConvBERT model)"),Nvr=l(),JE=a("li"),ZFe=a("strong"),qvr=o("deberta"),jvr=o(" \u2014 "),cH=a("a"),Dvr=o("TFDebertaForMaskedLM"),Gvr=o(" (DeBERTa model)"),Ovr=l(),YE=a("li"),e1e=a("strong"),Vvr=o("deberta-v2"),Xvr=o(" \u2014 "),mH=a("a"),zvr=o("TFDebertaV2ForMaskedLM"),Wvr=o(" (DeBERTa-v2 model)"),Qvr=l(),KE=a("li"),o1e=a("strong"),Hvr=o("distilbert"),Uvr=o(" \u2014 "),fH=a("a"),Jvr=o("TFDistilBertForMaskedLM"),Yvr=o(" (DistilBERT model)"),Kvr=l(),ZE=a("li"),r1e=a("strong"),Zvr=o("electra"),eFr=o(" \u2014 "),gH=a("a"),oFr=o("TFElectraForMaskedLM"),rFr=o(" (ELECTRA model)"),tFr=l(),eC=a("li"),t1e=a("strong"),aFr=o("flaubert"),nFr=o(" \u2014 "),hH=a("a"),sFr=o("TFFlaubertWithLMHeadModel"),lFr=o(" (FlauBERT model)"),iFr=l(),oC=a("li"),a1e=a("strong"),dFr=o("funnel"),cFr=o(" \u2014 "),uH=a("a"),mFr=o("TFFunnelForMaskedLM"),fFr=o(" (Funnel Transformer model)"),gFr=l(),rC=a("li"),n1e=a("strong"),hFr=o("layoutlm"),uFr=o(" \u2014 "),pH=a("a"),pFr=o("TFLayoutLMForMaskedLM"),_Fr=o(" (LayoutLM model)"),bFr=l(),tC=a("li"),s1e=a("strong"),vFr=o("longformer"),FFr=o(" \u2014 "),_H=a("a"),TFr=o("TFLongformerForMaskedLM"),MFr=o(" (Longformer model)"),EFr=l(),aC=a("li"),l1e=a("strong"),CFr=o("mobilebert"),wFr=o(" \u2014 "),bH=a("a"),AFr=o("TFMobileBertForMaskedLM"),yFr=o(" (MobileBERT model)"),LFr=l(),nC=a("li"),i1e=a("strong"),xFr=o("mpnet"),$Fr=o(" \u2014 "),vH=a("a"),kFr=o("TFMPNetForMaskedLM"),SFr=o(" (MPNet model)"),RFr=l(),sC=a("li"),d1e=a("strong"),PFr=o("rembert"),BFr=o(" \u2014 "),FH=a("a"),IFr=o("TFRemBertForMaskedLM"),NFr=o(" (RemBERT model)"),qFr=l(),lC=a("li"),c1e=a("strong"),jFr=o("roberta"),DFr=o(" \u2014 "),TH=a("a"),GFr=o("TFRobertaForMaskedLM"),OFr=o(" (RoBERTa model)"),VFr=l(),iC=a("li"),m1e=a("strong"),XFr=o("roformer"),zFr=o(" \u2014 "),MH=a("a"),WFr=o("TFRoFormerForMaskedLM"),QFr=o(" (RoFormer model)"),HFr=l(),dC=a("li"),f1e=a("strong"),UFr=o("tapas"),JFr=o(" \u2014 "),EH=a("a"),YFr=o("TFTapasForMaskedLM"),KFr=o(" (TAPAS model)"),ZFr=l(),cC=a("li"),g1e=a("strong"),e1r=o("xlm"),o1r=o(" \u2014 "),CH=a("a"),r1r=o("TFXLMWithLMHeadModel"),t1r=o(" (XLM model)"),a1r=l(),mC=a("li"),h1e=a("strong"),n1r=o("xlm-roberta"),s1r=o(" \u2014 "),wH=a("a"),l1r=o("TFXLMRobertaForMaskedLM"),i1r=o(" (XLM-RoBERTa model)"),d1r=l(),F(fC.$$.fragment),Rje=l(),rc=a("h2"),gC=a("a"),u1e=a("span"),F(q7.$$.fragment),c1r=l(),p1e=a("span"),m1r=o("TFAutoModelForSeq2SeqLM"),Pje=l(),rr=a("div"),F(j7.$$.fragment),f1r=l(),tc=a("p"),g1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),AH=a("a"),h1r=o("from_pretrained()"),u1r=o(" class method or the "),yH=a("a"),p1r=o("from_config()"),_1r=o(` class
method.`),b1r=l(),D7=a("p"),v1r=o("This class cannot be instantiated directly using "),_1e=a("code"),F1r=o("__init__()"),T1r=o(" (throws an error)."),M1r=l(),St=a("div"),F(G7.$$.fragment),E1r=l(),b1e=a("p"),C1r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),w1r=l(),ac=a("p"),A1r=o(`Note:
Loading a model from its configuration file does `),v1e=a("strong"),y1r=o("not"),L1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=a("a"),x1r=o("from_pretrained()"),$1r=o(" to load the model weights."),k1r=l(),F(hC.$$.fragment),S1r=l(),$r=a("div"),F(O7.$$.fragment),R1r=l(),F1e=a("p"),P1r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),B1r=l(),an=a("p"),I1r=o("The model class to instantiate is selected based on the "),T1e=a("code"),N1r=o("model_type"),q1r=o(` property of the config object (either
passed as an argument or loaded from `),M1e=a("code"),j1r=o("pretrained_model_name_or_path"),D1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E1e=a("code"),G1r=o("pretrained_model_name_or_path"),O1r=o(":"),V1r=l(),ye=a("ul"),uC=a("li"),C1e=a("strong"),X1r=o("bart"),z1r=o(" \u2014 "),xH=a("a"),W1r=o("TFBartForConditionalGeneration"),Q1r=o(" (BART model)"),H1r=l(),pC=a("li"),w1e=a("strong"),U1r=o("blenderbot"),J1r=o(" \u2014 "),$H=a("a"),Y1r=o("TFBlenderbotForConditionalGeneration"),K1r=o(" (Blenderbot model)"),Z1r=l(),_C=a("li"),A1e=a("strong"),eTr=o("blenderbot-small"),oTr=o(" \u2014 "),kH=a("a"),rTr=o("TFBlenderbotSmallForConditionalGeneration"),tTr=o(" (BlenderbotSmall model)"),aTr=l(),bC=a("li"),y1e=a("strong"),nTr=o("encoder-decoder"),sTr=o(" \u2014 "),SH=a("a"),lTr=o("TFEncoderDecoderModel"),iTr=o(" (Encoder decoder model)"),dTr=l(),vC=a("li"),L1e=a("strong"),cTr=o("led"),mTr=o(" \u2014 "),RH=a("a"),fTr=o("TFLEDForConditionalGeneration"),gTr=o(" (LED model)"),hTr=l(),FC=a("li"),x1e=a("strong"),uTr=o("marian"),pTr=o(" \u2014 "),PH=a("a"),_Tr=o("TFMarianMTModel"),bTr=o(" (Marian model)"),vTr=l(),TC=a("li"),$1e=a("strong"),FTr=o("mbart"),TTr=o(" \u2014 "),BH=a("a"),MTr=o("TFMBartForConditionalGeneration"),ETr=o(" (mBART model)"),CTr=l(),MC=a("li"),k1e=a("strong"),wTr=o("mt5"),ATr=o(" \u2014 "),IH=a("a"),yTr=o("TFMT5ForConditionalGeneration"),LTr=o(" (mT5 model)"),xTr=l(),EC=a("li"),S1e=a("strong"),$Tr=o("pegasus"),kTr=o(" \u2014 "),NH=a("a"),STr=o("TFPegasusForConditionalGeneration"),RTr=o(" (Pegasus model)"),PTr=l(),CC=a("li"),R1e=a("strong"),BTr=o("t5"),ITr=o(" \u2014 "),qH=a("a"),NTr=o("TFT5ForConditionalGeneration"),qTr=o(" (T5 model)"),jTr=l(),F(wC.$$.fragment),Bje=l(),nc=a("h2"),AC=a("a"),P1e=a("span"),F(V7.$$.fragment),DTr=l(),B1e=a("span"),GTr=o("TFAutoModelForSequenceClassification"),Ije=l(),tr=a("div"),F(X7.$$.fragment),OTr=l(),sc=a("p"),VTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jH=a("a"),XTr=o("from_pretrained()"),zTr=o(" class method or the "),DH=a("a"),WTr=o("from_config()"),QTr=o(` class
method.`),HTr=l(),z7=a("p"),UTr=o("This class cannot be instantiated directly using "),I1e=a("code"),JTr=o("__init__()"),YTr=o(" (throws an error)."),KTr=l(),Rt=a("div"),F(W7.$$.fragment),ZTr=l(),N1e=a("p"),eMr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),oMr=l(),lc=a("p"),rMr=o(`Note:
Loading a model from its configuration file does `),q1e=a("strong"),tMr=o("not"),aMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=a("a"),nMr=o("from_pretrained()"),sMr=o(" to load the model weights."),lMr=l(),F(yC.$$.fragment),iMr=l(),kr=a("div"),F(Q7.$$.fragment),dMr=l(),j1e=a("p"),cMr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),mMr=l(),nn=a("p"),fMr=o("The model class to instantiate is selected based on the "),D1e=a("code"),gMr=o("model_type"),hMr=o(` property of the config object (either
passed as an argument or loaded from `),G1e=a("code"),uMr=o("pretrained_model_name_or_path"),pMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O1e=a("code"),_Mr=o("pretrained_model_name_or_path"),bMr=o(":"),vMr=l(),oe=a("ul"),LC=a("li"),V1e=a("strong"),FMr=o("albert"),TMr=o(" \u2014 "),OH=a("a"),MMr=o("TFAlbertForSequenceClassification"),EMr=o(" (ALBERT model)"),CMr=l(),xC=a("li"),X1e=a("strong"),wMr=o("bert"),AMr=o(" \u2014 "),VH=a("a"),yMr=o("TFBertForSequenceClassification"),LMr=o(" (BERT model)"),xMr=l(),$C=a("li"),z1e=a("strong"),$Mr=o("camembert"),kMr=o(" \u2014 "),XH=a("a"),SMr=o("TFCamembertForSequenceClassification"),RMr=o(" (CamemBERT model)"),PMr=l(),kC=a("li"),W1e=a("strong"),BMr=o("convbert"),IMr=o(" \u2014 "),zH=a("a"),NMr=o("TFConvBertForSequenceClassification"),qMr=o(" (ConvBERT model)"),jMr=l(),SC=a("li"),Q1e=a("strong"),DMr=o("ctrl"),GMr=o(" \u2014 "),WH=a("a"),OMr=o("TFCTRLForSequenceClassification"),VMr=o(" (CTRL model)"),XMr=l(),RC=a("li"),H1e=a("strong"),zMr=o("deberta"),WMr=o(" \u2014 "),QH=a("a"),QMr=o("TFDebertaForSequenceClassification"),HMr=o(" (DeBERTa model)"),UMr=l(),PC=a("li"),U1e=a("strong"),JMr=o("deberta-v2"),YMr=o(" \u2014 "),HH=a("a"),KMr=o("TFDebertaV2ForSequenceClassification"),ZMr=o(" (DeBERTa-v2 model)"),e4r=l(),BC=a("li"),J1e=a("strong"),o4r=o("distilbert"),r4r=o(" \u2014 "),UH=a("a"),t4r=o("TFDistilBertForSequenceClassification"),a4r=o(" (DistilBERT model)"),n4r=l(),IC=a("li"),Y1e=a("strong"),s4r=o("electra"),l4r=o(" \u2014 "),JH=a("a"),i4r=o("TFElectraForSequenceClassification"),d4r=o(" (ELECTRA model)"),c4r=l(),NC=a("li"),K1e=a("strong"),m4r=o("flaubert"),f4r=o(" \u2014 "),YH=a("a"),g4r=o("TFFlaubertForSequenceClassification"),h4r=o(" (FlauBERT model)"),u4r=l(),qC=a("li"),Z1e=a("strong"),p4r=o("funnel"),_4r=o(" \u2014 "),KH=a("a"),b4r=o("TFFunnelForSequenceClassification"),v4r=o(" (Funnel Transformer model)"),F4r=l(),jC=a("li"),eTe=a("strong"),T4r=o("gpt2"),M4r=o(" \u2014 "),ZH=a("a"),E4r=o("TFGPT2ForSequenceClassification"),C4r=o(" (OpenAI GPT-2 model)"),w4r=l(),DC=a("li"),oTe=a("strong"),A4r=o("gptj"),y4r=o(" \u2014 "),eU=a("a"),L4r=o("TFGPTJForSequenceClassification"),x4r=o(" (GPT-J model)"),$4r=l(),GC=a("li"),rTe=a("strong"),k4r=o("layoutlm"),S4r=o(" \u2014 "),oU=a("a"),R4r=o("TFLayoutLMForSequenceClassification"),P4r=o(" (LayoutLM model)"),B4r=l(),OC=a("li"),tTe=a("strong"),I4r=o("longformer"),N4r=o(" \u2014 "),rU=a("a"),q4r=o("TFLongformerForSequenceClassification"),j4r=o(" (Longformer model)"),D4r=l(),VC=a("li"),aTe=a("strong"),G4r=o("mobilebert"),O4r=o(" \u2014 "),tU=a("a"),V4r=o("TFMobileBertForSequenceClassification"),X4r=o(" (MobileBERT model)"),z4r=l(),XC=a("li"),nTe=a("strong"),W4r=o("mpnet"),Q4r=o(" \u2014 "),aU=a("a"),H4r=o("TFMPNetForSequenceClassification"),U4r=o(" (MPNet model)"),J4r=l(),zC=a("li"),sTe=a("strong"),Y4r=o("openai-gpt"),K4r=o(" \u2014 "),nU=a("a"),Z4r=o("TFOpenAIGPTForSequenceClassification"),eEr=o(" (OpenAI GPT model)"),oEr=l(),WC=a("li"),lTe=a("strong"),rEr=o("rembert"),tEr=o(" \u2014 "),sU=a("a"),aEr=o("TFRemBertForSequenceClassification"),nEr=o(" (RemBERT model)"),sEr=l(),QC=a("li"),iTe=a("strong"),lEr=o("roberta"),iEr=o(" \u2014 "),lU=a("a"),dEr=o("TFRobertaForSequenceClassification"),cEr=o(" (RoBERTa model)"),mEr=l(),HC=a("li"),dTe=a("strong"),fEr=o("roformer"),gEr=o(" \u2014 "),iU=a("a"),hEr=o("TFRoFormerForSequenceClassification"),uEr=o(" (RoFormer model)"),pEr=l(),UC=a("li"),cTe=a("strong"),_Er=o("tapas"),bEr=o(" \u2014 "),dU=a("a"),vEr=o("TFTapasForSequenceClassification"),FEr=o(" (TAPAS model)"),TEr=l(),JC=a("li"),mTe=a("strong"),MEr=o("transfo-xl"),EEr=o(" \u2014 "),cU=a("a"),CEr=o("TFTransfoXLForSequenceClassification"),wEr=o(" (Transformer-XL model)"),AEr=l(),YC=a("li"),fTe=a("strong"),yEr=o("xlm"),LEr=o(" \u2014 "),mU=a("a"),xEr=o("TFXLMForSequenceClassification"),$Er=o(" (XLM model)"),kEr=l(),KC=a("li"),gTe=a("strong"),SEr=o("xlm-roberta"),REr=o(" \u2014 "),fU=a("a"),PEr=o("TFXLMRobertaForSequenceClassification"),BEr=o(" (XLM-RoBERTa model)"),IEr=l(),ZC=a("li"),hTe=a("strong"),NEr=o("xlnet"),qEr=o(" \u2014 "),gU=a("a"),jEr=o("TFXLNetForSequenceClassification"),DEr=o(" (XLNet model)"),GEr=l(),F(e5.$$.fragment),Nje=l(),ic=a("h2"),o5=a("a"),uTe=a("span"),F(H7.$$.fragment),OEr=l(),pTe=a("span"),VEr=o("TFAutoModelForMultipleChoice"),qje=l(),ar=a("div"),F(U7.$$.fragment),XEr=l(),dc=a("p"),zEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hU=a("a"),WEr=o("from_pretrained()"),QEr=o(" class method or the "),uU=a("a"),HEr=o("from_config()"),UEr=o(` class
method.`),JEr=l(),J7=a("p"),YEr=o("This class cannot be instantiated directly using "),_Te=a("code"),KEr=o("__init__()"),ZEr=o(" (throws an error)."),eCr=l(),Pt=a("div"),F(Y7.$$.fragment),oCr=l(),bTe=a("p"),rCr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),tCr=l(),cc=a("p"),aCr=o(`Note:
Loading a model from its configuration file does `),vTe=a("strong"),nCr=o("not"),sCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=a("a"),lCr=o("from_pretrained()"),iCr=o(" to load the model weights."),dCr=l(),F(r5.$$.fragment),cCr=l(),Sr=a("div"),F(K7.$$.fragment),mCr=l(),FTe=a("p"),fCr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gCr=l(),sn=a("p"),hCr=o("The model class to instantiate is selected based on the "),TTe=a("code"),uCr=o("model_type"),pCr=o(` property of the config object (either
passed as an argument or loaded from `),MTe=a("code"),_Cr=o("pretrained_model_name_or_path"),bCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=a("code"),vCr=o("pretrained_model_name_or_path"),FCr=o(":"),TCr=l(),ue=a("ul"),t5=a("li"),CTe=a("strong"),MCr=o("albert"),ECr=o(" \u2014 "),_U=a("a"),CCr=o("TFAlbertForMultipleChoice"),wCr=o(" (ALBERT model)"),ACr=l(),a5=a("li"),wTe=a("strong"),yCr=o("bert"),LCr=o(" \u2014 "),bU=a("a"),xCr=o("TFBertForMultipleChoice"),$Cr=o(" (BERT model)"),kCr=l(),n5=a("li"),ATe=a("strong"),SCr=o("camembert"),RCr=o(" \u2014 "),vU=a("a"),PCr=o("TFCamembertForMultipleChoice"),BCr=o(" (CamemBERT model)"),ICr=l(),s5=a("li"),yTe=a("strong"),NCr=o("convbert"),qCr=o(" \u2014 "),FU=a("a"),jCr=o("TFConvBertForMultipleChoice"),DCr=o(" (ConvBERT model)"),GCr=l(),l5=a("li"),LTe=a("strong"),OCr=o("distilbert"),VCr=o(" \u2014 "),TU=a("a"),XCr=o("TFDistilBertForMultipleChoice"),zCr=o(" (DistilBERT model)"),WCr=l(),i5=a("li"),xTe=a("strong"),QCr=o("electra"),HCr=o(" \u2014 "),MU=a("a"),UCr=o("TFElectraForMultipleChoice"),JCr=o(" (ELECTRA model)"),YCr=l(),d5=a("li"),$Te=a("strong"),KCr=o("flaubert"),ZCr=o(" \u2014 "),EU=a("a"),e5r=o("TFFlaubertForMultipleChoice"),o5r=o(" (FlauBERT model)"),r5r=l(),c5=a("li"),kTe=a("strong"),t5r=o("funnel"),a5r=o(" \u2014 "),CU=a("a"),n5r=o("TFFunnelForMultipleChoice"),s5r=o(" (Funnel Transformer model)"),l5r=l(),m5=a("li"),STe=a("strong"),i5r=o("longformer"),d5r=o(" \u2014 "),wU=a("a"),c5r=o("TFLongformerForMultipleChoice"),m5r=o(" (Longformer model)"),f5r=l(),f5=a("li"),RTe=a("strong"),g5r=o("mobilebert"),h5r=o(" \u2014 "),AU=a("a"),u5r=o("TFMobileBertForMultipleChoice"),p5r=o(" (MobileBERT model)"),_5r=l(),g5=a("li"),PTe=a("strong"),b5r=o("mpnet"),v5r=o(" \u2014 "),yU=a("a"),F5r=o("TFMPNetForMultipleChoice"),T5r=o(" (MPNet model)"),M5r=l(),h5=a("li"),BTe=a("strong"),E5r=o("rembert"),C5r=o(" \u2014 "),LU=a("a"),w5r=o("TFRemBertForMultipleChoice"),A5r=o(" (RemBERT model)"),y5r=l(),u5=a("li"),ITe=a("strong"),L5r=o("roberta"),x5r=o(" \u2014 "),xU=a("a"),$5r=o("TFRobertaForMultipleChoice"),k5r=o(" (RoBERTa model)"),S5r=l(),p5=a("li"),NTe=a("strong"),R5r=o("roformer"),P5r=o(" \u2014 "),$U=a("a"),B5r=o("TFRoFormerForMultipleChoice"),I5r=o(" (RoFormer model)"),N5r=l(),_5=a("li"),qTe=a("strong"),q5r=o("xlm"),j5r=o(" \u2014 "),kU=a("a"),D5r=o("TFXLMForMultipleChoice"),G5r=o(" (XLM model)"),O5r=l(),b5=a("li"),jTe=a("strong"),V5r=o("xlm-roberta"),X5r=o(" \u2014 "),SU=a("a"),z5r=o("TFXLMRobertaForMultipleChoice"),W5r=o(" (XLM-RoBERTa model)"),Q5r=l(),v5=a("li"),DTe=a("strong"),H5r=o("xlnet"),U5r=o(" \u2014 "),RU=a("a"),J5r=o("TFXLNetForMultipleChoice"),Y5r=o(" (XLNet model)"),K5r=l(),F(F5.$$.fragment),jje=l(),mc=a("h2"),T5=a("a"),GTe=a("span"),F(Z7.$$.fragment),Z5r=l(),OTe=a("span"),e3r=o("TFAutoModelForNextSentencePrediction"),Dje=l(),nr=a("div"),F(e9.$$.fragment),o3r=l(),fc=a("p"),r3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),PU=a("a"),t3r=o("from_pretrained()"),a3r=o(" class method or the "),BU=a("a"),n3r=o("from_config()"),s3r=o(` class
method.`),l3r=l(),o9=a("p"),i3r=o("This class cannot be instantiated directly using "),VTe=a("code"),d3r=o("__init__()"),c3r=o(" (throws an error)."),m3r=l(),Bt=a("div"),F(r9.$$.fragment),f3r=l(),XTe=a("p"),g3r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),h3r=l(),gc=a("p"),u3r=o(`Note:
Loading a model from its configuration file does `),zTe=a("strong"),p3r=o("not"),_3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IU=a("a"),b3r=o("from_pretrained()"),v3r=o(" to load the model weights."),F3r=l(),F(M5.$$.fragment),T3r=l(),Rr=a("div"),F(t9.$$.fragment),M3r=l(),WTe=a("p"),E3r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),C3r=l(),ln=a("p"),w3r=o("The model class to instantiate is selected based on the "),QTe=a("code"),A3r=o("model_type"),y3r=o(` property of the config object (either
passed as an argument or loaded from `),HTe=a("code"),L3r=o("pretrained_model_name_or_path"),x3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UTe=a("code"),$3r=o("pretrained_model_name_or_path"),k3r=o(":"),S3r=l(),a9=a("ul"),E5=a("li"),JTe=a("strong"),R3r=o("bert"),P3r=o(" \u2014 "),NU=a("a"),B3r=o("TFBertForNextSentencePrediction"),I3r=o(" (BERT model)"),N3r=l(),C5=a("li"),YTe=a("strong"),q3r=o("mobilebert"),j3r=o(" \u2014 "),qU=a("a"),D3r=o("TFMobileBertForNextSentencePrediction"),G3r=o(" (MobileBERT model)"),O3r=l(),F(w5.$$.fragment),Gje=l(),hc=a("h2"),A5=a("a"),KTe=a("span"),F(n9.$$.fragment),V3r=l(),ZTe=a("span"),X3r=o("TFAutoModelForTableQuestionAnswering"),Oje=l(),sr=a("div"),F(s9.$$.fragment),z3r=l(),uc=a("p"),W3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),jU=a("a"),Q3r=o("from_pretrained()"),H3r=o(" class method or the "),DU=a("a"),U3r=o("from_config()"),J3r=o(` class
method.`),Y3r=l(),l9=a("p"),K3r=o("This class cannot be instantiated directly using "),eMe=a("code"),Z3r=o("__init__()"),ewr=o(" (throws an error)."),owr=l(),It=a("div"),F(i9.$$.fragment),rwr=l(),oMe=a("p"),twr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),awr=l(),pc=a("p"),nwr=o(`Note:
Loading a model from its configuration file does `),rMe=a("strong"),swr=o("not"),lwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=a("a"),iwr=o("from_pretrained()"),dwr=o(" to load the model weights."),cwr=l(),F(y5.$$.fragment),mwr=l(),Pr=a("div"),F(d9.$$.fragment),fwr=l(),tMe=a("p"),gwr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),hwr=l(),dn=a("p"),uwr=o("The model class to instantiate is selected based on the "),aMe=a("code"),pwr=o("model_type"),_wr=o(` property of the config object (either
passed as an argument or loaded from `),nMe=a("code"),bwr=o("pretrained_model_name_or_path"),vwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sMe=a("code"),Fwr=o("pretrained_model_name_or_path"),Twr=o(":"),Mwr=l(),lMe=a("ul"),L5=a("li"),iMe=a("strong"),Ewr=o("tapas"),Cwr=o(" \u2014 "),OU=a("a"),wwr=o("TFTapasForQuestionAnswering"),Awr=o(" (TAPAS model)"),ywr=l(),F(x5.$$.fragment),Vje=l(),_c=a("h2"),$5=a("a"),dMe=a("span"),F(c9.$$.fragment),Lwr=l(),cMe=a("span"),xwr=o("TFAutoModelForTokenClassification"),Xje=l(),lr=a("div"),F(m9.$$.fragment),$wr=l(),bc=a("p"),kwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VU=a("a"),Swr=o("from_pretrained()"),Rwr=o(" class method or the "),XU=a("a"),Pwr=o("from_config()"),Bwr=o(` class
method.`),Iwr=l(),f9=a("p"),Nwr=o("This class cannot be instantiated directly using "),mMe=a("code"),qwr=o("__init__()"),jwr=o(" (throws an error)."),Dwr=l(),Nt=a("div"),F(g9.$$.fragment),Gwr=l(),fMe=a("p"),Owr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Vwr=l(),vc=a("p"),Xwr=o(`Note:
Loading a model from its configuration file does `),gMe=a("strong"),zwr=o("not"),Wwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zU=a("a"),Qwr=o("from_pretrained()"),Hwr=o(" to load the model weights."),Uwr=l(),F(k5.$$.fragment),Jwr=l(),Br=a("div"),F(h9.$$.fragment),Ywr=l(),hMe=a("p"),Kwr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Zwr=l(),cn=a("p"),e0r=o("The model class to instantiate is selected based on the "),uMe=a("code"),o0r=o("model_type"),r0r=o(` property of the config object (either
passed as an argument or loaded from `),pMe=a("code"),t0r=o("pretrained_model_name_or_path"),a0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Me=a("code"),n0r=o("pretrained_model_name_or_path"),s0r=o(":"),l0r=l(),de=a("ul"),S5=a("li"),bMe=a("strong"),i0r=o("albert"),d0r=o(" \u2014 "),WU=a("a"),c0r=o("TFAlbertForTokenClassification"),m0r=o(" (ALBERT model)"),f0r=l(),R5=a("li"),vMe=a("strong"),g0r=o("bert"),h0r=o(" \u2014 "),QU=a("a"),u0r=o("TFBertForTokenClassification"),p0r=o(" (BERT model)"),_0r=l(),P5=a("li"),FMe=a("strong"),b0r=o("camembert"),v0r=o(" \u2014 "),HU=a("a"),F0r=o("TFCamembertForTokenClassification"),T0r=o(" (CamemBERT model)"),M0r=l(),B5=a("li"),TMe=a("strong"),E0r=o("convbert"),C0r=o(" \u2014 "),UU=a("a"),w0r=o("TFConvBertForTokenClassification"),A0r=o(" (ConvBERT model)"),y0r=l(),I5=a("li"),MMe=a("strong"),L0r=o("deberta"),x0r=o(" \u2014 "),JU=a("a"),$0r=o("TFDebertaForTokenClassification"),k0r=o(" (DeBERTa model)"),S0r=l(),N5=a("li"),EMe=a("strong"),R0r=o("deberta-v2"),P0r=o(" \u2014 "),YU=a("a"),B0r=o("TFDebertaV2ForTokenClassification"),I0r=o(" (DeBERTa-v2 model)"),N0r=l(),q5=a("li"),CMe=a("strong"),q0r=o("distilbert"),j0r=o(" \u2014 "),KU=a("a"),D0r=o("TFDistilBertForTokenClassification"),G0r=o(" (DistilBERT model)"),O0r=l(),j5=a("li"),wMe=a("strong"),V0r=o("electra"),X0r=o(" \u2014 "),ZU=a("a"),z0r=o("TFElectraForTokenClassification"),W0r=o(" (ELECTRA model)"),Q0r=l(),D5=a("li"),AMe=a("strong"),H0r=o("flaubert"),U0r=o(" \u2014 "),eJ=a("a"),J0r=o("TFFlaubertForTokenClassification"),Y0r=o(" (FlauBERT model)"),K0r=l(),G5=a("li"),yMe=a("strong"),Z0r=o("funnel"),e6r=o(" \u2014 "),oJ=a("a"),o6r=o("TFFunnelForTokenClassification"),r6r=o(" (Funnel Transformer model)"),t6r=l(),O5=a("li"),LMe=a("strong"),a6r=o("layoutlm"),n6r=o(" \u2014 "),rJ=a("a"),s6r=o("TFLayoutLMForTokenClassification"),l6r=o(" (LayoutLM model)"),i6r=l(),V5=a("li"),xMe=a("strong"),d6r=o("longformer"),c6r=o(" \u2014 "),tJ=a("a"),m6r=o("TFLongformerForTokenClassification"),f6r=o(" (Longformer model)"),g6r=l(),X5=a("li"),$Me=a("strong"),h6r=o("mobilebert"),u6r=o(" \u2014 "),aJ=a("a"),p6r=o("TFMobileBertForTokenClassification"),_6r=o(" (MobileBERT model)"),b6r=l(),z5=a("li"),kMe=a("strong"),v6r=o("mpnet"),F6r=o(" \u2014 "),nJ=a("a"),T6r=o("TFMPNetForTokenClassification"),M6r=o(" (MPNet model)"),E6r=l(),W5=a("li"),SMe=a("strong"),C6r=o("rembert"),w6r=o(" \u2014 "),sJ=a("a"),A6r=o("TFRemBertForTokenClassification"),y6r=o(" (RemBERT model)"),L6r=l(),Q5=a("li"),RMe=a("strong"),x6r=o("roberta"),$6r=o(" \u2014 "),lJ=a("a"),k6r=o("TFRobertaForTokenClassification"),S6r=o(" (RoBERTa model)"),R6r=l(),H5=a("li"),PMe=a("strong"),P6r=o("roformer"),B6r=o(" \u2014 "),iJ=a("a"),I6r=o("TFRoFormerForTokenClassification"),N6r=o(" (RoFormer model)"),q6r=l(),U5=a("li"),BMe=a("strong"),j6r=o("xlm"),D6r=o(" \u2014 "),dJ=a("a"),G6r=o("TFXLMForTokenClassification"),O6r=o(" (XLM model)"),V6r=l(),J5=a("li"),IMe=a("strong"),X6r=o("xlm-roberta"),z6r=o(" \u2014 "),cJ=a("a"),W6r=o("TFXLMRobertaForTokenClassification"),Q6r=o(" (XLM-RoBERTa model)"),H6r=l(),Y5=a("li"),NMe=a("strong"),U6r=o("xlnet"),J6r=o(" \u2014 "),mJ=a("a"),Y6r=o("TFXLNetForTokenClassification"),K6r=o(" (XLNet model)"),Z6r=l(),F(K5.$$.fragment),zje=l(),Fc=a("h2"),Z5=a("a"),qMe=a("span"),F(u9.$$.fragment),eAr=l(),jMe=a("span"),oAr=o("TFAutoModelForQuestionAnswering"),Wje=l(),ir=a("div"),F(p9.$$.fragment),rAr=l(),Tc=a("p"),tAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),fJ=a("a"),aAr=o("from_pretrained()"),nAr=o(" class method or the "),gJ=a("a"),sAr=o("from_config()"),lAr=o(` class
method.`),iAr=l(),_9=a("p"),dAr=o("This class cannot be instantiated directly using "),DMe=a("code"),cAr=o("__init__()"),mAr=o(" (throws an error)."),fAr=l(),qt=a("div"),F(b9.$$.fragment),gAr=l(),GMe=a("p"),hAr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),uAr=l(),Mc=a("p"),pAr=o(`Note:
Loading a model from its configuration file does `),OMe=a("strong"),_Ar=o("not"),bAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=a("a"),vAr=o("from_pretrained()"),FAr=o(" to load the model weights."),TAr=l(),F(e3.$$.fragment),MAr=l(),Ir=a("div"),F(v9.$$.fragment),EAr=l(),VMe=a("p"),CAr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),wAr=l(),mn=a("p"),AAr=o("The model class to instantiate is selected based on the "),XMe=a("code"),yAr=o("model_type"),LAr=o(` property of the config object (either
passed as an argument or loaded from `),zMe=a("code"),xAr=o("pretrained_model_name_or_path"),$Ar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WMe=a("code"),kAr=o("pretrained_model_name_or_path"),SAr=o(":"),RAr=l(),ce=a("ul"),o3=a("li"),QMe=a("strong"),PAr=o("albert"),BAr=o(" \u2014 "),uJ=a("a"),IAr=o("TFAlbertForQuestionAnswering"),NAr=o(" (ALBERT model)"),qAr=l(),r3=a("li"),HMe=a("strong"),jAr=o("bert"),DAr=o(" \u2014 "),pJ=a("a"),GAr=o("TFBertForQuestionAnswering"),OAr=o(" (BERT model)"),VAr=l(),t3=a("li"),UMe=a("strong"),XAr=o("camembert"),zAr=o(" \u2014 "),_J=a("a"),WAr=o("TFCamembertForQuestionAnswering"),QAr=o(" (CamemBERT model)"),HAr=l(),a3=a("li"),JMe=a("strong"),UAr=o("convbert"),JAr=o(" \u2014 "),bJ=a("a"),YAr=o("TFConvBertForQuestionAnswering"),KAr=o(" (ConvBERT model)"),ZAr=l(),n3=a("li"),YMe=a("strong"),eyr=o("deberta"),oyr=o(" \u2014 "),vJ=a("a"),ryr=o("TFDebertaForQuestionAnswering"),tyr=o(" (DeBERTa model)"),ayr=l(),s3=a("li"),KMe=a("strong"),nyr=o("deberta-v2"),syr=o(" \u2014 "),FJ=a("a"),lyr=o("TFDebertaV2ForQuestionAnswering"),iyr=o(" (DeBERTa-v2 model)"),dyr=l(),l3=a("li"),ZMe=a("strong"),cyr=o("distilbert"),myr=o(" \u2014 "),TJ=a("a"),fyr=o("TFDistilBertForQuestionAnswering"),gyr=o(" (DistilBERT model)"),hyr=l(),i3=a("li"),e4e=a("strong"),uyr=o("electra"),pyr=o(" \u2014 "),MJ=a("a"),_yr=o("TFElectraForQuestionAnswering"),byr=o(" (ELECTRA model)"),vyr=l(),d3=a("li"),o4e=a("strong"),Fyr=o("flaubert"),Tyr=o(" \u2014 "),EJ=a("a"),Myr=o("TFFlaubertForQuestionAnsweringSimple"),Eyr=o(" (FlauBERT model)"),Cyr=l(),c3=a("li"),r4e=a("strong"),wyr=o("funnel"),Ayr=o(" \u2014 "),CJ=a("a"),yyr=o("TFFunnelForQuestionAnswering"),Lyr=o(" (Funnel Transformer model)"),xyr=l(),m3=a("li"),t4e=a("strong"),$yr=o("gptj"),kyr=o(" \u2014 "),wJ=a("a"),Syr=o("TFGPTJForQuestionAnswering"),Ryr=o(" (GPT-J model)"),Pyr=l(),f3=a("li"),a4e=a("strong"),Byr=o("longformer"),Iyr=o(" \u2014 "),AJ=a("a"),Nyr=o("TFLongformerForQuestionAnswering"),qyr=o(" (Longformer model)"),jyr=l(),g3=a("li"),n4e=a("strong"),Dyr=o("mobilebert"),Gyr=o(" \u2014 "),yJ=a("a"),Oyr=o("TFMobileBertForQuestionAnswering"),Vyr=o(" (MobileBERT model)"),Xyr=l(),h3=a("li"),s4e=a("strong"),zyr=o("mpnet"),Wyr=o(" \u2014 "),LJ=a("a"),Qyr=o("TFMPNetForQuestionAnswering"),Hyr=o(" (MPNet model)"),Uyr=l(),u3=a("li"),l4e=a("strong"),Jyr=o("rembert"),Yyr=o(" \u2014 "),xJ=a("a"),Kyr=o("TFRemBertForQuestionAnswering"),Zyr=o(" (RemBERT model)"),eLr=l(),p3=a("li"),i4e=a("strong"),oLr=o("roberta"),rLr=o(" \u2014 "),$J=a("a"),tLr=o("TFRobertaForQuestionAnswering"),aLr=o(" (RoBERTa model)"),nLr=l(),_3=a("li"),d4e=a("strong"),sLr=o("roformer"),lLr=o(" \u2014 "),kJ=a("a"),iLr=o("TFRoFormerForQuestionAnswering"),dLr=o(" (RoFormer model)"),cLr=l(),b3=a("li"),c4e=a("strong"),mLr=o("xlm"),fLr=o(" \u2014 "),SJ=a("a"),gLr=o("TFXLMForQuestionAnsweringSimple"),hLr=o(" (XLM model)"),uLr=l(),v3=a("li"),m4e=a("strong"),pLr=o("xlm-roberta"),_Lr=o(" \u2014 "),RJ=a("a"),bLr=o("TFXLMRobertaForQuestionAnswering"),vLr=o(" (XLM-RoBERTa model)"),FLr=l(),F3=a("li"),f4e=a("strong"),TLr=o("xlnet"),MLr=o(" \u2014 "),PJ=a("a"),ELr=o("TFXLNetForQuestionAnsweringSimple"),CLr=o(" (XLNet model)"),wLr=l(),F(T3.$$.fragment),Qje=l(),Ec=a("h2"),M3=a("a"),g4e=a("span"),F(F9.$$.fragment),ALr=l(),h4e=a("span"),yLr=o("TFAutoModelForVision2Seq"),Hje=l(),dr=a("div"),F(T9.$$.fragment),LLr=l(),Cc=a("p"),xLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),BJ=a("a"),$Lr=o("from_pretrained()"),kLr=o(" class method or the "),IJ=a("a"),SLr=o("from_config()"),RLr=o(` class
method.`),PLr=l(),M9=a("p"),BLr=o("This class cannot be instantiated directly using "),u4e=a("code"),ILr=o("__init__()"),NLr=o(" (throws an error)."),qLr=l(),jt=a("div"),F(E9.$$.fragment),jLr=l(),p4e=a("p"),DLr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),GLr=l(),wc=a("p"),OLr=o(`Note:
Loading a model from its configuration file does `),_4e=a("strong"),VLr=o("not"),XLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NJ=a("a"),zLr=o("from_pretrained()"),WLr=o(" to load the model weights."),QLr=l(),F(E3.$$.fragment),HLr=l(),Nr=a("div"),F(C9.$$.fragment),ULr=l(),b4e=a("p"),JLr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),YLr=l(),fn=a("p"),KLr=o("The model class to instantiate is selected based on the "),v4e=a("code"),ZLr=o("model_type"),e8r=o(` property of the config object (either
passed as an argument or loaded from `),F4e=a("code"),o8r=o("pretrained_model_name_or_path"),r8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T4e=a("code"),t8r=o("pretrained_model_name_or_path"),a8r=o(":"),n8r=l(),M4e=a("ul"),C3=a("li"),E4e=a("strong"),s8r=o("vision-encoder-decoder"),l8r=o(" \u2014 "),qJ=a("a"),i8r=o("TFVisionEncoderDecoderModel"),d8r=o(" (Vision Encoder decoder model)"),c8r=l(),F(w3.$$.fragment),Uje=l(),Ac=a("h2"),A3=a("a"),C4e=a("span"),F(w9.$$.fragment),m8r=l(),w4e=a("span"),f8r=o("TFAutoModelForSpeechSeq2Seq"),Jje=l(),cr=a("div"),F(A9.$$.fragment),g8r=l(),yc=a("p"),h8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),jJ=a("a"),u8r=o("from_pretrained()"),p8r=o(" class method or the "),DJ=a("a"),_8r=o("from_config()"),b8r=o(` class
method.`),v8r=l(),y9=a("p"),F8r=o("This class cannot be instantiated directly using "),A4e=a("code"),T8r=o("__init__()"),M8r=o(" (throws an error)."),E8r=l(),Dt=a("div"),F(L9.$$.fragment),C8r=l(),y4e=a("p"),w8r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),A8r=l(),Lc=a("p"),y8r=o(`Note:
Loading a model from its configuration file does `),L4e=a("strong"),L8r=o("not"),x8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=a("a"),$8r=o("from_pretrained()"),k8r=o(" to load the model weights."),S8r=l(),F(y3.$$.fragment),R8r=l(),qr=a("div"),F(x9.$$.fragment),P8r=l(),x4e=a("p"),B8r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),I8r=l(),gn=a("p"),N8r=o("The model class to instantiate is selected based on the "),$4e=a("code"),q8r=o("model_type"),j8r=o(` property of the config object (either
passed as an argument or loaded from `),k4e=a("code"),D8r=o("pretrained_model_name_or_path"),G8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S4e=a("code"),O8r=o("pretrained_model_name_or_path"),V8r=o(":"),X8r=l(),R4e=a("ul"),L3=a("li"),P4e=a("strong"),z8r=o("speech_to_text"),W8r=o(" \u2014 "),OJ=a("a"),Q8r=o("TFSpeech2TextForConditionalGeneration"),H8r=o(" (Speech2Text model)"),U8r=l(),F(x3.$$.fragment),Yje=l(),xc=a("h2"),$3=a("a"),B4e=a("span"),F($9.$$.fragment),J8r=l(),I4e=a("span"),Y8r=o("FlaxAutoModel"),Kje=l(),mr=a("div"),F(k9.$$.fragment),K8r=l(),$c=a("p"),Z8r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),VJ=a("a"),e7r=o("from_pretrained()"),o7r=o(" class method or the "),XJ=a("a"),r7r=o("from_config()"),t7r=o(` class
method.`),a7r=l(),S9=a("p"),n7r=o("This class cannot be instantiated directly using "),N4e=a("code"),s7r=o("__init__()"),l7r=o(" (throws an error)."),i7r=l(),Gt=a("div"),F(R9.$$.fragment),d7r=l(),q4e=a("p"),c7r=o("Instantiates one of the base model classes of the library from a configuration."),m7r=l(),kc=a("p"),f7r=o(`Note:
Loading a model from its configuration file does `),j4e=a("strong"),g7r=o("not"),h7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=a("a"),u7r=o("from_pretrained()"),p7r=o(" to load the model weights."),_7r=l(),F(k3.$$.fragment),b7r=l(),jr=a("div"),F(P9.$$.fragment),v7r=l(),D4e=a("p"),F7r=o("Instantiate one of the base model classes of the library from a pretrained model."),T7r=l(),hn=a("p"),M7r=o("The model class to instantiate is selected based on the "),G4e=a("code"),E7r=o("model_type"),C7r=o(` property of the config object (either
passed as an argument or loaded from `),O4e=a("code"),w7r=o("pretrained_model_name_or_path"),A7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V4e=a("code"),y7r=o("pretrained_model_name_or_path"),L7r=o(":"),x7r=l(),re=a("ul"),S3=a("li"),X4e=a("strong"),$7r=o("albert"),k7r=o(" \u2014 "),WJ=a("a"),S7r=o("FlaxAlbertModel"),R7r=o(" (ALBERT model)"),P7r=l(),R3=a("li"),z4e=a("strong"),B7r=o("bart"),I7r=o(" \u2014 "),QJ=a("a"),N7r=o("FlaxBartModel"),q7r=o(" (BART model)"),j7r=l(),P3=a("li"),W4e=a("strong"),D7r=o("beit"),G7r=o(" \u2014 "),HJ=a("a"),O7r=o("FlaxBeitModel"),V7r=o(" (BEiT model)"),X7r=l(),B3=a("li"),Q4e=a("strong"),z7r=o("bert"),W7r=o(" \u2014 "),UJ=a("a"),Q7r=o("FlaxBertModel"),H7r=o(" (BERT model)"),U7r=l(),I3=a("li"),H4e=a("strong"),J7r=o("big_bird"),Y7r=o(" \u2014 "),JJ=a("a"),K7r=o("FlaxBigBirdModel"),Z7r=o(" (BigBird model)"),e9r=l(),N3=a("li"),U4e=a("strong"),o9r=o("blenderbot"),r9r=o(" \u2014 "),YJ=a("a"),t9r=o("FlaxBlenderbotModel"),a9r=o(" (Blenderbot model)"),n9r=l(),q3=a("li"),J4e=a("strong"),s9r=o("blenderbot-small"),l9r=o(" \u2014 "),KJ=a("a"),i9r=o("FlaxBlenderbotSmallModel"),d9r=o(" (BlenderbotSmall model)"),c9r=l(),j3=a("li"),Y4e=a("strong"),m9r=o("clip"),f9r=o(" \u2014 "),ZJ=a("a"),g9r=o("FlaxCLIPModel"),h9r=o(" (CLIP model)"),u9r=l(),D3=a("li"),K4e=a("strong"),p9r=o("distilbert"),_9r=o(" \u2014 "),eY=a("a"),b9r=o("FlaxDistilBertModel"),v9r=o(" (DistilBERT model)"),F9r=l(),G3=a("li"),Z4e=a("strong"),T9r=o("electra"),M9r=o(" \u2014 "),oY=a("a"),E9r=o("FlaxElectraModel"),C9r=o(" (ELECTRA model)"),w9r=l(),O3=a("li"),eEe=a("strong"),A9r=o("gpt2"),y9r=o(" \u2014 "),rY=a("a"),L9r=o("FlaxGPT2Model"),x9r=o(" (OpenAI GPT-2 model)"),$9r=l(),V3=a("li"),oEe=a("strong"),k9r=o("gpt_neo"),S9r=o(" \u2014 "),tY=a("a"),R9r=o("FlaxGPTNeoModel"),P9r=o(" (GPT Neo model)"),B9r=l(),X3=a("li"),rEe=a("strong"),I9r=o("gptj"),N9r=o(" \u2014 "),aY=a("a"),q9r=o("FlaxGPTJModel"),j9r=o(" (GPT-J model)"),D9r=l(),z3=a("li"),tEe=a("strong"),G9r=o("marian"),O9r=o(" \u2014 "),nY=a("a"),V9r=o("FlaxMarianModel"),X9r=o(" (Marian model)"),z9r=l(),W3=a("li"),aEe=a("strong"),W9r=o("mbart"),Q9r=o(" \u2014 "),sY=a("a"),H9r=o("FlaxMBartModel"),U9r=o(" (mBART model)"),J9r=l(),Q3=a("li"),nEe=a("strong"),Y9r=o("mt5"),K9r=o(" \u2014 "),lY=a("a"),Z9r=o("FlaxMT5Model"),exr=o(" (mT5 model)"),oxr=l(),H3=a("li"),sEe=a("strong"),rxr=o("opt"),txr=o(" \u2014 "),iY=a("a"),axr=o("FlaxOPTModel"),nxr=o(" (OPT model)"),sxr=l(),U3=a("li"),lEe=a("strong"),lxr=o("pegasus"),ixr=o(" \u2014 "),dY=a("a"),dxr=o("FlaxPegasusModel"),cxr=o(" (Pegasus model)"),mxr=l(),J3=a("li"),iEe=a("strong"),fxr=o("roberta"),gxr=o(" \u2014 "),cY=a("a"),hxr=o("FlaxRobertaModel"),uxr=o(" (RoBERTa model)"),pxr=l(),Y3=a("li"),dEe=a("strong"),_xr=o("roformer"),bxr=o(" \u2014 "),mY=a("a"),vxr=o("FlaxRoFormerModel"),Fxr=o(" (RoFormer model)"),Txr=l(),K3=a("li"),cEe=a("strong"),Mxr=o("t5"),Exr=o(" \u2014 "),fY=a("a"),Cxr=o("FlaxT5Model"),wxr=o(" (T5 model)"),Axr=l(),Z3=a("li"),mEe=a("strong"),yxr=o("vision-text-dual-encoder"),Lxr=o(" \u2014 "),gY=a("a"),xxr=o("FlaxVisionTextDualEncoderModel"),$xr=o(" (VisionTextDualEncoder model)"),kxr=l(),ew=a("li"),fEe=a("strong"),Sxr=o("vit"),Rxr=o(" \u2014 "),hY=a("a"),Pxr=o("FlaxViTModel"),Bxr=o(" (ViT model)"),Ixr=l(),ow=a("li"),gEe=a("strong"),Nxr=o("wav2vec2"),qxr=o(" \u2014 "),uY=a("a"),jxr=o("FlaxWav2Vec2Model"),Dxr=o(" (Wav2Vec2 model)"),Gxr=l(),rw=a("li"),hEe=a("strong"),Oxr=o("xglm"),Vxr=o(" \u2014 "),pY=a("a"),Xxr=o("FlaxXGLMModel"),zxr=o(" (XGLM model)"),Wxr=l(),tw=a("li"),uEe=a("strong"),Qxr=o("xlm-roberta"),Hxr=o(" \u2014 "),_Y=a("a"),Uxr=o("FlaxXLMRobertaModel"),Jxr=o(" (XLM-RoBERTa model)"),Yxr=l(),F(aw.$$.fragment),Zje=l(),Sc=a("h2"),nw=a("a"),pEe=a("span"),F(B9.$$.fragment),Kxr=l(),_Ee=a("span"),Zxr=o("FlaxAutoModelForCausalLM"),eDe=l(),fr=a("div"),F(I9.$$.fragment),e$r=l(),Rc=a("p"),o$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bY=a("a"),r$r=o("from_pretrained()"),t$r=o(" class method or the "),vY=a("a"),a$r=o("from_config()"),n$r=o(` class
method.`),s$r=l(),N9=a("p"),l$r=o("This class cannot be instantiated directly using "),bEe=a("code"),i$r=o("__init__()"),d$r=o(" (throws an error)."),c$r=l(),Ot=a("div"),F(q9.$$.fragment),m$r=l(),vEe=a("p"),f$r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),g$r=l(),Pc=a("p"),h$r=o(`Note:
Loading a model from its configuration file does `),FEe=a("strong"),u$r=o("not"),p$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=a("a"),_$r=o("from_pretrained()"),b$r=o(" to load the model weights."),v$r=l(),F(sw.$$.fragment),F$r=l(),Dr=a("div"),F(j9.$$.fragment),T$r=l(),TEe=a("p"),M$r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),E$r=l(),un=a("p"),C$r=o("The model class to instantiate is selected based on the "),MEe=a("code"),w$r=o("model_type"),A$r=o(` property of the config object (either
passed as an argument or loaded from `),EEe=a("code"),y$r=o("pretrained_model_name_or_path"),L$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CEe=a("code"),x$r=o("pretrained_model_name_or_path"),$$r=o(":"),k$r=l(),Le=a("ul"),lw=a("li"),wEe=a("strong"),S$r=o("bart"),R$r=o(" \u2014 "),TY=a("a"),P$r=o("FlaxBartForCausalLM"),B$r=o(" (BART model)"),I$r=l(),iw=a("li"),AEe=a("strong"),N$r=o("bert"),q$r=o(" \u2014 "),MY=a("a"),j$r=o("FlaxBertForCausalLM"),D$r=o(" (BERT model)"),G$r=l(),dw=a("li"),yEe=a("strong"),O$r=o("big_bird"),V$r=o(" \u2014 "),EY=a("a"),X$r=o("FlaxBigBirdForCausalLM"),z$r=o(" (BigBird model)"),W$r=l(),cw=a("li"),LEe=a("strong"),Q$r=o("electra"),H$r=o(" \u2014 "),CY=a("a"),U$r=o("FlaxElectraForCausalLM"),J$r=o(" (ELECTRA model)"),Y$r=l(),mw=a("li"),xEe=a("strong"),K$r=o("gpt2"),Z$r=o(" \u2014 "),wY=a("a"),ekr=o("FlaxGPT2LMHeadModel"),okr=o(" (OpenAI GPT-2 model)"),rkr=l(),fw=a("li"),$Ee=a("strong"),tkr=o("gpt_neo"),akr=o(" \u2014 "),AY=a("a"),nkr=o("FlaxGPTNeoForCausalLM"),skr=o(" (GPT Neo model)"),lkr=l(),gw=a("li"),kEe=a("strong"),ikr=o("gptj"),dkr=o(" \u2014 "),yY=a("a"),ckr=o("FlaxGPTJForCausalLM"),mkr=o(" (GPT-J model)"),fkr=l(),hw=a("li"),SEe=a("strong"),gkr=o("opt"),hkr=o(" \u2014 "),LY=a("a"),ukr=o("FlaxOPTForCausalLM"),pkr=o(" (OPT model)"),_kr=l(),uw=a("li"),REe=a("strong"),bkr=o("roberta"),vkr=o(" \u2014 "),xY=a("a"),Fkr=o("FlaxRobertaForCausalLM"),Tkr=o(" (RoBERTa model)"),Mkr=l(),pw=a("li"),PEe=a("strong"),Ekr=o("xglm"),Ckr=o(" \u2014 "),$Y=a("a"),wkr=o("FlaxXGLMForCausalLM"),Akr=o(" (XGLM model)"),ykr=l(),F(_w.$$.fragment),oDe=l(),Bc=a("h2"),bw=a("a"),BEe=a("span"),F(D9.$$.fragment),Lkr=l(),IEe=a("span"),xkr=o("FlaxAutoModelForPreTraining"),rDe=l(),gr=a("div"),F(G9.$$.fragment),$kr=l(),Ic=a("p"),kkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kY=a("a"),Skr=o("from_pretrained()"),Rkr=o(" class method or the "),SY=a("a"),Pkr=o("from_config()"),Bkr=o(` class
method.`),Ikr=l(),O9=a("p"),Nkr=o("This class cannot be instantiated directly using "),NEe=a("code"),qkr=o("__init__()"),jkr=o(" (throws an error)."),Dkr=l(),Vt=a("div"),F(V9.$$.fragment),Gkr=l(),qEe=a("p"),Okr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Vkr=l(),Nc=a("p"),Xkr=o(`Note:
Loading a model from its configuration file does `),jEe=a("strong"),zkr=o("not"),Wkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=a("a"),Qkr=o("from_pretrained()"),Hkr=o(" to load the model weights."),Ukr=l(),F(vw.$$.fragment),Jkr=l(),Gr=a("div"),F(X9.$$.fragment),Ykr=l(),DEe=a("p"),Kkr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Zkr=l(),pn=a("p"),eSr=o("The model class to instantiate is selected based on the "),GEe=a("code"),oSr=o("model_type"),rSr=o(` property of the config object (either
passed as an argument or loaded from `),OEe=a("code"),tSr=o("pretrained_model_name_or_path"),aSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VEe=a("code"),nSr=o("pretrained_model_name_or_path"),sSr=o(":"),lSr=l(),Ee=a("ul"),Fw=a("li"),XEe=a("strong"),iSr=o("albert"),dSr=o(" \u2014 "),PY=a("a"),cSr=o("FlaxAlbertForPreTraining"),mSr=o(" (ALBERT model)"),fSr=l(),Tw=a("li"),zEe=a("strong"),gSr=o("bart"),hSr=o(" \u2014 "),BY=a("a"),uSr=o("FlaxBartForConditionalGeneration"),pSr=o(" (BART model)"),_Sr=l(),Mw=a("li"),WEe=a("strong"),bSr=o("bert"),vSr=o(" \u2014 "),IY=a("a"),FSr=o("FlaxBertForPreTraining"),TSr=o(" (BERT model)"),MSr=l(),Ew=a("li"),QEe=a("strong"),ESr=o("big_bird"),CSr=o(" \u2014 "),NY=a("a"),wSr=o("FlaxBigBirdForPreTraining"),ASr=o(" (BigBird model)"),ySr=l(),Cw=a("li"),HEe=a("strong"),LSr=o("electra"),xSr=o(" \u2014 "),qY=a("a"),$Sr=o("FlaxElectraForPreTraining"),kSr=o(" (ELECTRA model)"),SSr=l(),ww=a("li"),UEe=a("strong"),RSr=o("mbart"),PSr=o(" \u2014 "),jY=a("a"),BSr=o("FlaxMBartForConditionalGeneration"),ISr=o(" (mBART model)"),NSr=l(),Aw=a("li"),JEe=a("strong"),qSr=o("mt5"),jSr=o(" \u2014 "),DY=a("a"),DSr=o("FlaxMT5ForConditionalGeneration"),GSr=o(" (mT5 model)"),OSr=l(),yw=a("li"),YEe=a("strong"),VSr=o("roberta"),XSr=o(" \u2014 "),GY=a("a"),zSr=o("FlaxRobertaForMaskedLM"),WSr=o(" (RoBERTa model)"),QSr=l(),Lw=a("li"),KEe=a("strong"),HSr=o("roformer"),USr=o(" \u2014 "),OY=a("a"),JSr=o("FlaxRoFormerForMaskedLM"),YSr=o(" (RoFormer model)"),KSr=l(),xw=a("li"),ZEe=a("strong"),ZSr=o("t5"),eRr=o(" \u2014 "),VY=a("a"),oRr=o("FlaxT5ForConditionalGeneration"),rRr=o(" (T5 model)"),tRr=l(),$w=a("li"),eCe=a("strong"),aRr=o("wav2vec2"),nRr=o(" \u2014 "),XY=a("a"),sRr=o("FlaxWav2Vec2ForPreTraining"),lRr=o(" (Wav2Vec2 model)"),iRr=l(),kw=a("li"),oCe=a("strong"),dRr=o("xlm-roberta"),cRr=o(" \u2014 "),zY=a("a"),mRr=o("FlaxXLMRobertaForMaskedLM"),fRr=o(" (XLM-RoBERTa model)"),gRr=l(),F(Sw.$$.fragment),tDe=l(),qc=a("h2"),Rw=a("a"),rCe=a("span"),F(z9.$$.fragment),hRr=l(),tCe=a("span"),uRr=o("FlaxAutoModelForMaskedLM"),aDe=l(),hr=a("div"),F(W9.$$.fragment),pRr=l(),jc=a("p"),_Rr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),WY=a("a"),bRr=o("from_pretrained()"),vRr=o(" class method or the "),QY=a("a"),FRr=o("from_config()"),TRr=o(` class
method.`),MRr=l(),Q9=a("p"),ERr=o("This class cannot be instantiated directly using "),aCe=a("code"),CRr=o("__init__()"),wRr=o(" (throws an error)."),ARr=l(),Xt=a("div"),F(H9.$$.fragment),yRr=l(),nCe=a("p"),LRr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),xRr=l(),Dc=a("p"),$Rr=o(`Note:
Loading a model from its configuration file does `),sCe=a("strong"),kRr=o("not"),SRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=a("a"),RRr=o("from_pretrained()"),PRr=o(" to load the model weights."),BRr=l(),F(Pw.$$.fragment),IRr=l(),Or=a("div"),F(U9.$$.fragment),NRr=l(),lCe=a("p"),qRr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),jRr=l(),_n=a("p"),DRr=o("The model class to instantiate is selected based on the "),iCe=a("code"),GRr=o("model_type"),ORr=o(` property of the config object (either
passed as an argument or loaded from `),dCe=a("code"),VRr=o("pretrained_model_name_or_path"),XRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cCe=a("code"),zRr=o("pretrained_model_name_or_path"),WRr=o(":"),QRr=l(),xe=a("ul"),Bw=a("li"),mCe=a("strong"),HRr=o("albert"),URr=o(" \u2014 "),UY=a("a"),JRr=o("FlaxAlbertForMaskedLM"),YRr=o(" (ALBERT model)"),KRr=l(),Iw=a("li"),fCe=a("strong"),ZRr=o("bart"),ePr=o(" \u2014 "),JY=a("a"),oPr=o("FlaxBartForConditionalGeneration"),rPr=o(" (BART model)"),tPr=l(),Nw=a("li"),gCe=a("strong"),aPr=o("bert"),nPr=o(" \u2014 "),YY=a("a"),sPr=o("FlaxBertForMaskedLM"),lPr=o(" (BERT model)"),iPr=l(),qw=a("li"),hCe=a("strong"),dPr=o("big_bird"),cPr=o(" \u2014 "),KY=a("a"),mPr=o("FlaxBigBirdForMaskedLM"),fPr=o(" (BigBird model)"),gPr=l(),jw=a("li"),uCe=a("strong"),hPr=o("distilbert"),uPr=o(" \u2014 "),ZY=a("a"),pPr=o("FlaxDistilBertForMaskedLM"),_Pr=o(" (DistilBERT model)"),bPr=l(),Dw=a("li"),pCe=a("strong"),vPr=o("electra"),FPr=o(" \u2014 "),eK=a("a"),TPr=o("FlaxElectraForMaskedLM"),MPr=o(" (ELECTRA model)"),EPr=l(),Gw=a("li"),_Ce=a("strong"),CPr=o("mbart"),wPr=o(" \u2014 "),oK=a("a"),APr=o("FlaxMBartForConditionalGeneration"),yPr=o(" (mBART model)"),LPr=l(),Ow=a("li"),bCe=a("strong"),xPr=o("roberta"),$Pr=o(" \u2014 "),rK=a("a"),kPr=o("FlaxRobertaForMaskedLM"),SPr=o(" (RoBERTa model)"),RPr=l(),Vw=a("li"),vCe=a("strong"),PPr=o("roformer"),BPr=o(" \u2014 "),tK=a("a"),IPr=o("FlaxRoFormerForMaskedLM"),NPr=o(" (RoFormer model)"),qPr=l(),Xw=a("li"),FCe=a("strong"),jPr=o("xlm-roberta"),DPr=o(" \u2014 "),aK=a("a"),GPr=o("FlaxXLMRobertaForMaskedLM"),OPr=o(" (XLM-RoBERTa model)"),VPr=l(),F(zw.$$.fragment),nDe=l(),Gc=a("h2"),Ww=a("a"),TCe=a("span"),F(J9.$$.fragment),XPr=l(),MCe=a("span"),zPr=o("FlaxAutoModelForSeq2SeqLM"),sDe=l(),ur=a("div"),F(Y9.$$.fragment),WPr=l(),Oc=a("p"),QPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nK=a("a"),HPr=o("from_pretrained()"),UPr=o(" class method or the "),sK=a("a"),JPr=o("from_config()"),YPr=o(` class
method.`),KPr=l(),K9=a("p"),ZPr=o("This class cannot be instantiated directly using "),ECe=a("code"),eBr=o("__init__()"),oBr=o(" (throws an error)."),rBr=l(),zt=a("div"),F(Z9.$$.fragment),tBr=l(),CCe=a("p"),aBr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),nBr=l(),Vc=a("p"),sBr=o(`Note:
Loading a model from its configuration file does `),wCe=a("strong"),lBr=o("not"),iBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lK=a("a"),dBr=o("from_pretrained()"),cBr=o(" to load the model weights."),mBr=l(),F(Qw.$$.fragment),fBr=l(),Vr=a("div"),F(ex.$$.fragment),gBr=l(),ACe=a("p"),hBr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),uBr=l(),bn=a("p"),pBr=o("The model class to instantiate is selected based on the "),yCe=a("code"),_Br=o("model_type"),bBr=o(` property of the config object (either
passed as an argument or loaded from `),LCe=a("code"),vBr=o("pretrained_model_name_or_path"),FBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xCe=a("code"),TBr=o("pretrained_model_name_or_path"),MBr=o(":"),EBr=l(),Pe=a("ul"),Hw=a("li"),$Ce=a("strong"),CBr=o("bart"),wBr=o(" \u2014 "),iK=a("a"),ABr=o("FlaxBartForConditionalGeneration"),yBr=o(" (BART model)"),LBr=l(),Uw=a("li"),kCe=a("strong"),xBr=o("blenderbot"),$Br=o(" \u2014 "),dK=a("a"),kBr=o("FlaxBlenderbotForConditionalGeneration"),SBr=o(" (Blenderbot model)"),RBr=l(),Jw=a("li"),SCe=a("strong"),PBr=o("blenderbot-small"),BBr=o(" \u2014 "),cK=a("a"),IBr=o("FlaxBlenderbotSmallForConditionalGeneration"),NBr=o(" (BlenderbotSmall model)"),qBr=l(),Yw=a("li"),RCe=a("strong"),jBr=o("encoder-decoder"),DBr=o(" \u2014 "),mK=a("a"),GBr=o("FlaxEncoderDecoderModel"),OBr=o(" (Encoder decoder model)"),VBr=l(),Kw=a("li"),PCe=a("strong"),XBr=o("marian"),zBr=o(" \u2014 "),fK=a("a"),WBr=o("FlaxMarianMTModel"),QBr=o(" (Marian model)"),HBr=l(),Zw=a("li"),BCe=a("strong"),UBr=o("mbart"),JBr=o(" \u2014 "),gK=a("a"),YBr=o("FlaxMBartForConditionalGeneration"),KBr=o(" (mBART model)"),ZBr=l(),e0=a("li"),ICe=a("strong"),eIr=o("mt5"),oIr=o(" \u2014 "),hK=a("a"),rIr=o("FlaxMT5ForConditionalGeneration"),tIr=o(" (mT5 model)"),aIr=l(),o0=a("li"),NCe=a("strong"),nIr=o("pegasus"),sIr=o(" \u2014 "),uK=a("a"),lIr=o("FlaxPegasusForConditionalGeneration"),iIr=o(" (Pegasus model)"),dIr=l(),r0=a("li"),qCe=a("strong"),cIr=o("t5"),mIr=o(" \u2014 "),pK=a("a"),fIr=o("FlaxT5ForConditionalGeneration"),gIr=o(" (T5 model)"),hIr=l(),F(t0.$$.fragment),lDe=l(),Xc=a("h2"),a0=a("a"),jCe=a("span"),F(ox.$$.fragment),uIr=l(),DCe=a("span"),pIr=o("FlaxAutoModelForSequenceClassification"),iDe=l(),pr=a("div"),F(rx.$$.fragment),_Ir=l(),zc=a("p"),bIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),_K=a("a"),vIr=o("from_pretrained()"),FIr=o(" class method or the "),bK=a("a"),TIr=o("from_config()"),MIr=o(` class
method.`),EIr=l(),tx=a("p"),CIr=o("This class cannot be instantiated directly using "),GCe=a("code"),wIr=o("__init__()"),AIr=o(" (throws an error)."),yIr=l(),Wt=a("div"),F(ax.$$.fragment),LIr=l(),OCe=a("p"),xIr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),$Ir=l(),Wc=a("p"),kIr=o(`Note:
Loading a model from its configuration file does `),VCe=a("strong"),SIr=o("not"),RIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=a("a"),PIr=o("from_pretrained()"),BIr=o(" to load the model weights."),IIr=l(),F(n0.$$.fragment),NIr=l(),Xr=a("div"),F(nx.$$.fragment),qIr=l(),XCe=a("p"),jIr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),DIr=l(),vn=a("p"),GIr=o("The model class to instantiate is selected based on the "),zCe=a("code"),OIr=o("model_type"),VIr=o(` property of the config object (either
passed as an argument or loaded from `),WCe=a("code"),XIr=o("pretrained_model_name_or_path"),zIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QCe=a("code"),WIr=o("pretrained_model_name_or_path"),QIr=o(":"),HIr=l(),$e=a("ul"),s0=a("li"),HCe=a("strong"),UIr=o("albert"),JIr=o(" \u2014 "),FK=a("a"),YIr=o("FlaxAlbertForSequenceClassification"),KIr=o(" (ALBERT model)"),ZIr=l(),l0=a("li"),UCe=a("strong"),eNr=o("bart"),oNr=o(" \u2014 "),TK=a("a"),rNr=o("FlaxBartForSequenceClassification"),tNr=o(" (BART model)"),aNr=l(),i0=a("li"),JCe=a("strong"),nNr=o("bert"),sNr=o(" \u2014 "),MK=a("a"),lNr=o("FlaxBertForSequenceClassification"),iNr=o(" (BERT model)"),dNr=l(),d0=a("li"),YCe=a("strong"),cNr=o("big_bird"),mNr=o(" \u2014 "),EK=a("a"),fNr=o("FlaxBigBirdForSequenceClassification"),gNr=o(" (BigBird model)"),hNr=l(),c0=a("li"),KCe=a("strong"),uNr=o("distilbert"),pNr=o(" \u2014 "),CK=a("a"),_Nr=o("FlaxDistilBertForSequenceClassification"),bNr=o(" (DistilBERT model)"),vNr=l(),m0=a("li"),ZCe=a("strong"),FNr=o("electra"),TNr=o(" \u2014 "),wK=a("a"),MNr=o("FlaxElectraForSequenceClassification"),ENr=o(" (ELECTRA model)"),CNr=l(),f0=a("li"),e5e=a("strong"),wNr=o("mbart"),ANr=o(" \u2014 "),AK=a("a"),yNr=o("FlaxMBartForSequenceClassification"),LNr=o(" (mBART model)"),xNr=l(),g0=a("li"),o5e=a("strong"),$Nr=o("roberta"),kNr=o(" \u2014 "),yK=a("a"),SNr=o("FlaxRobertaForSequenceClassification"),RNr=o(" (RoBERTa model)"),PNr=l(),h0=a("li"),r5e=a("strong"),BNr=o("roformer"),INr=o(" \u2014 "),LK=a("a"),NNr=o("FlaxRoFormerForSequenceClassification"),qNr=o(" (RoFormer model)"),jNr=l(),u0=a("li"),t5e=a("strong"),DNr=o("xlm-roberta"),GNr=o(" \u2014 "),xK=a("a"),ONr=o("FlaxXLMRobertaForSequenceClassification"),VNr=o(" (XLM-RoBERTa model)"),XNr=l(),F(p0.$$.fragment),dDe=l(),Qc=a("h2"),_0=a("a"),a5e=a("span"),F(sx.$$.fragment),zNr=l(),n5e=a("span"),WNr=o("FlaxAutoModelForQuestionAnswering"),cDe=l(),_r=a("div"),F(lx.$$.fragment),QNr=l(),Hc=a("p"),HNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$K=a("a"),UNr=o("from_pretrained()"),JNr=o(" class method or the "),kK=a("a"),YNr=o("from_config()"),KNr=o(` class
method.`),ZNr=l(),ix=a("p"),eqr=o("This class cannot be instantiated directly using "),s5e=a("code"),oqr=o("__init__()"),rqr=o(" (throws an error)."),tqr=l(),Qt=a("div"),F(dx.$$.fragment),aqr=l(),l5e=a("p"),nqr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),sqr=l(),Uc=a("p"),lqr=o(`Note:
Loading a model from its configuration file does `),i5e=a("strong"),iqr=o("not"),dqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SK=a("a"),cqr=o("from_pretrained()"),mqr=o(" to load the model weights."),fqr=l(),F(b0.$$.fragment),gqr=l(),zr=a("div"),F(cx.$$.fragment),hqr=l(),d5e=a("p"),uqr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),pqr=l(),Fn=a("p"),_qr=o("The model class to instantiate is selected based on the "),c5e=a("code"),bqr=o("model_type"),vqr=o(` property of the config object (either
passed as an argument or loaded from `),m5e=a("code"),Fqr=o("pretrained_model_name_or_path"),Tqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f5e=a("code"),Mqr=o("pretrained_model_name_or_path"),Eqr=o(":"),Cqr=l(),ke=a("ul"),v0=a("li"),g5e=a("strong"),wqr=o("albert"),Aqr=o(" \u2014 "),RK=a("a"),yqr=o("FlaxAlbertForQuestionAnswering"),Lqr=o(" (ALBERT model)"),xqr=l(),F0=a("li"),h5e=a("strong"),$qr=o("bart"),kqr=o(" \u2014 "),PK=a("a"),Sqr=o("FlaxBartForQuestionAnswering"),Rqr=o(" (BART model)"),Pqr=l(),T0=a("li"),u5e=a("strong"),Bqr=o("bert"),Iqr=o(" \u2014 "),BK=a("a"),Nqr=o("FlaxBertForQuestionAnswering"),qqr=o(" (BERT model)"),jqr=l(),M0=a("li"),p5e=a("strong"),Dqr=o("big_bird"),Gqr=o(" \u2014 "),IK=a("a"),Oqr=o("FlaxBigBirdForQuestionAnswering"),Vqr=o(" (BigBird model)"),Xqr=l(),E0=a("li"),_5e=a("strong"),zqr=o("distilbert"),Wqr=o(" \u2014 "),NK=a("a"),Qqr=o("FlaxDistilBertForQuestionAnswering"),Hqr=o(" (DistilBERT model)"),Uqr=l(),C0=a("li"),b5e=a("strong"),Jqr=o("electra"),Yqr=o(" \u2014 "),qK=a("a"),Kqr=o("FlaxElectraForQuestionAnswering"),Zqr=o(" (ELECTRA model)"),ejr=l(),w0=a("li"),v5e=a("strong"),ojr=o("mbart"),rjr=o(" \u2014 "),jK=a("a"),tjr=o("FlaxMBartForQuestionAnswering"),ajr=o(" (mBART model)"),njr=l(),A0=a("li"),F5e=a("strong"),sjr=o("roberta"),ljr=o(" \u2014 "),DK=a("a"),ijr=o("FlaxRobertaForQuestionAnswering"),djr=o(" (RoBERTa model)"),cjr=l(),y0=a("li"),T5e=a("strong"),mjr=o("roformer"),fjr=o(" \u2014 "),GK=a("a"),gjr=o("FlaxRoFormerForQuestionAnswering"),hjr=o(" (RoFormer model)"),ujr=l(),L0=a("li"),M5e=a("strong"),pjr=o("xlm-roberta"),_jr=o(" \u2014 "),OK=a("a"),bjr=o("FlaxXLMRobertaForQuestionAnswering"),vjr=o(" (XLM-RoBERTa model)"),Fjr=l(),F(x0.$$.fragment),mDe=l(),Jc=a("h2"),$0=a("a"),E5e=a("span"),F(mx.$$.fragment),Tjr=l(),C5e=a("span"),Mjr=o("FlaxAutoModelForTokenClassification"),fDe=l(),br=a("div"),F(fx.$$.fragment),Ejr=l(),Yc=a("p"),Cjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VK=a("a"),wjr=o("from_pretrained()"),Ajr=o(" class method or the "),XK=a("a"),yjr=o("from_config()"),Ljr=o(` class
method.`),xjr=l(),gx=a("p"),$jr=o("This class cannot be instantiated directly using "),w5e=a("code"),kjr=o("__init__()"),Sjr=o(" (throws an error)."),Rjr=l(),Ht=a("div"),F(hx.$$.fragment),Pjr=l(),A5e=a("p"),Bjr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ijr=l(),Kc=a("p"),Njr=o(`Note:
Loading a model from its configuration file does `),y5e=a("strong"),qjr=o("not"),jjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zK=a("a"),Djr=o("from_pretrained()"),Gjr=o(" to load the model weights."),Ojr=l(),F(k0.$$.fragment),Vjr=l(),Wr=a("div"),F(ux.$$.fragment),Xjr=l(),L5e=a("p"),zjr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Wjr=l(),Tn=a("p"),Qjr=o("The model class to instantiate is selected based on the "),x5e=a("code"),Hjr=o("model_type"),Ujr=o(` property of the config object (either
passed as an argument or loaded from `),$5e=a("code"),Jjr=o("pretrained_model_name_or_path"),Yjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k5e=a("code"),Kjr=o("pretrained_model_name_or_path"),Zjr=o(":"),eDr=l(),Ge=a("ul"),S0=a("li"),S5e=a("strong"),oDr=o("albert"),rDr=o(" \u2014 "),WK=a("a"),tDr=o("FlaxAlbertForTokenClassification"),aDr=o(" (ALBERT model)"),nDr=l(),R0=a("li"),R5e=a("strong"),sDr=o("bert"),lDr=o(" \u2014 "),QK=a("a"),iDr=o("FlaxBertForTokenClassification"),dDr=o(" (BERT model)"),cDr=l(),P0=a("li"),P5e=a("strong"),mDr=o("big_bird"),fDr=o(" \u2014 "),HK=a("a"),gDr=o("FlaxBigBirdForTokenClassification"),hDr=o(" (BigBird model)"),uDr=l(),B0=a("li"),B5e=a("strong"),pDr=o("distilbert"),_Dr=o(" \u2014 "),UK=a("a"),bDr=o("FlaxDistilBertForTokenClassification"),vDr=o(" (DistilBERT model)"),FDr=l(),I0=a("li"),I5e=a("strong"),TDr=o("electra"),MDr=o(" \u2014 "),JK=a("a"),EDr=o("FlaxElectraForTokenClassification"),CDr=o(" (ELECTRA model)"),wDr=l(),N0=a("li"),N5e=a("strong"),ADr=o("roberta"),yDr=o(" \u2014 "),YK=a("a"),LDr=o("FlaxRobertaForTokenClassification"),xDr=o(" (RoBERTa model)"),$Dr=l(),q0=a("li"),q5e=a("strong"),kDr=o("roformer"),SDr=o(" \u2014 "),KK=a("a"),RDr=o("FlaxRoFormerForTokenClassification"),PDr=o(" (RoFormer model)"),BDr=l(),j0=a("li"),j5e=a("strong"),IDr=o("xlm-roberta"),NDr=o(" \u2014 "),ZK=a("a"),qDr=o("FlaxXLMRobertaForTokenClassification"),jDr=o(" (XLM-RoBERTa model)"),DDr=l(),F(D0.$$.fragment),gDe=l(),Zc=a("h2"),G0=a("a"),D5e=a("span"),F(px.$$.fragment),GDr=l(),G5e=a("span"),ODr=o("FlaxAutoModelForMultipleChoice"),hDe=l(),vr=a("div"),F(_x.$$.fragment),VDr=l(),em=a("p"),XDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),eZ=a("a"),zDr=o("from_pretrained()"),WDr=o(" class method or the "),oZ=a("a"),QDr=o("from_config()"),HDr=o(` class
method.`),UDr=l(),bx=a("p"),JDr=o("This class cannot be instantiated directly using "),O5e=a("code"),YDr=o("__init__()"),KDr=o(" (throws an error)."),ZDr=l(),Ut=a("div"),F(vx.$$.fragment),eGr=l(),V5e=a("p"),oGr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),rGr=l(),om=a("p"),tGr=o(`Note:
Loading a model from its configuration file does `),X5e=a("strong"),aGr=o("not"),nGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rZ=a("a"),sGr=o("from_pretrained()"),lGr=o(" to load the model weights."),iGr=l(),F(O0.$$.fragment),dGr=l(),Qr=a("div"),F(Fx.$$.fragment),cGr=l(),z5e=a("p"),mGr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),fGr=l(),Mn=a("p"),gGr=o("The model class to instantiate is selected based on the "),W5e=a("code"),hGr=o("model_type"),uGr=o(` property of the config object (either
passed as an argument or loaded from `),Q5e=a("code"),pGr=o("pretrained_model_name_or_path"),_Gr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H5e=a("code"),bGr=o("pretrained_model_name_or_path"),vGr=o(":"),FGr=l(),Oe=a("ul"),V0=a("li"),U5e=a("strong"),TGr=o("albert"),MGr=o(" \u2014 "),tZ=a("a"),EGr=o("FlaxAlbertForMultipleChoice"),CGr=o(" (ALBERT model)"),wGr=l(),X0=a("li"),J5e=a("strong"),AGr=o("bert"),yGr=o(" \u2014 "),aZ=a("a"),LGr=o("FlaxBertForMultipleChoice"),xGr=o(" (BERT model)"),$Gr=l(),z0=a("li"),Y5e=a("strong"),kGr=o("big_bird"),SGr=o(" \u2014 "),nZ=a("a"),RGr=o("FlaxBigBirdForMultipleChoice"),PGr=o(" (BigBird model)"),BGr=l(),W0=a("li"),K5e=a("strong"),IGr=o("distilbert"),NGr=o(" \u2014 "),sZ=a("a"),qGr=o("FlaxDistilBertForMultipleChoice"),jGr=o(" (DistilBERT model)"),DGr=l(),Q0=a("li"),Z5e=a("strong"),GGr=o("electra"),OGr=o(" \u2014 "),lZ=a("a"),VGr=o("FlaxElectraForMultipleChoice"),XGr=o(" (ELECTRA model)"),zGr=l(),H0=a("li"),e3e=a("strong"),WGr=o("roberta"),QGr=o(" \u2014 "),iZ=a("a"),HGr=o("FlaxRobertaForMultipleChoice"),UGr=o(" (RoBERTa model)"),JGr=l(),U0=a("li"),o3e=a("strong"),YGr=o("roformer"),KGr=o(" \u2014 "),dZ=a("a"),ZGr=o("FlaxRoFormerForMultipleChoice"),eOr=o(" (RoFormer model)"),oOr=l(),J0=a("li"),r3e=a("strong"),rOr=o("xlm-roberta"),tOr=o(" \u2014 "),cZ=a("a"),aOr=o("FlaxXLMRobertaForMultipleChoice"),nOr=o(" (XLM-RoBERTa model)"),sOr=l(),F(Y0.$$.fragment),uDe=l(),rm=a("h2"),K0=a("a"),t3e=a("span"),F(Tx.$$.fragment),lOr=l(),a3e=a("span"),iOr=o("FlaxAutoModelForNextSentencePrediction"),pDe=l(),Fr=a("div"),F(Mx.$$.fragment),dOr=l(),tm=a("p"),cOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),mZ=a("a"),mOr=o("from_pretrained()"),fOr=o(" class method or the "),fZ=a("a"),gOr=o("from_config()"),hOr=o(` class
method.`),uOr=l(),Ex=a("p"),pOr=o("This class cannot be instantiated directly using "),n3e=a("code"),_Or=o("__init__()"),bOr=o(" (throws an error)."),vOr=l(),Jt=a("div"),F(Cx.$$.fragment),FOr=l(),s3e=a("p"),TOr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),MOr=l(),am=a("p"),EOr=o(`Note:
Loading a model from its configuration file does `),l3e=a("strong"),COr=o("not"),wOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gZ=a("a"),AOr=o("from_pretrained()"),yOr=o(" to load the model weights."),LOr=l(),F(Z0.$$.fragment),xOr=l(),Hr=a("div"),F(wx.$$.fragment),$Or=l(),i3e=a("p"),kOr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),SOr=l(),En=a("p"),ROr=o("The model class to instantiate is selected based on the "),d3e=a("code"),POr=o("model_type"),BOr=o(` property of the config object (either
passed as an argument or loaded from `),c3e=a("code"),IOr=o("pretrained_model_name_or_path"),NOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m3e=a("code"),qOr=o("pretrained_model_name_or_path"),jOr=o(":"),DOr=l(),f3e=a("ul"),e6=a("li"),g3e=a("strong"),GOr=o("bert"),OOr=o(" \u2014 "),hZ=a("a"),VOr=o("FlaxBertForNextSentencePrediction"),XOr=o(" (BERT model)"),zOr=l(),F(o6.$$.fragment),_De=l(),nm=a("h2"),r6=a("a"),h3e=a("span"),F(Ax.$$.fragment),WOr=l(),u3e=a("span"),QOr=o("FlaxAutoModelForImageClassification"),bDe=l(),Tr=a("div"),F(yx.$$.fragment),HOr=l(),sm=a("p"),UOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),uZ=a("a"),JOr=o("from_pretrained()"),YOr=o(" class method or the "),pZ=a("a"),KOr=o("from_config()"),ZOr=o(` class
method.`),eVr=l(),Lx=a("p"),oVr=o("This class cannot be instantiated directly using "),p3e=a("code"),rVr=o("__init__()"),tVr=o(" (throws an error)."),aVr=l(),Yt=a("div"),F(xx.$$.fragment),nVr=l(),_3e=a("p"),sVr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),lVr=l(),lm=a("p"),iVr=o(`Note:
Loading a model from its configuration file does `),b3e=a("strong"),dVr=o("not"),cVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Z=a("a"),mVr=o("from_pretrained()"),fVr=o(" to load the model weights."),gVr=l(),F(t6.$$.fragment),hVr=l(),Ur=a("div"),F($x.$$.fragment),uVr=l(),v3e=a("p"),pVr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_Vr=l(),Cn=a("p"),bVr=o("The model class to instantiate is selected based on the "),F3e=a("code"),vVr=o("model_type"),FVr=o(` property of the config object (either
passed as an argument or loaded from `),T3e=a("code"),TVr=o("pretrained_model_name_or_path"),MVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M3e=a("code"),EVr=o("pretrained_model_name_or_path"),CVr=o(":"),wVr=l(),kx=a("ul"),a6=a("li"),E3e=a("strong"),AVr=o("beit"),yVr=o(" \u2014 "),bZ=a("a"),LVr=o("FlaxBeitForImageClassification"),xVr=o(" (BEiT model)"),$Vr=l(),n6=a("li"),C3e=a("strong"),kVr=o("vit"),SVr=o(" \u2014 "),vZ=a("a"),RVr=o("FlaxViTForImageClassification"),PVr=o(" (ViT model)"),BVr=l(),F(s6.$$.fragment),vDe=l(),im=a("h2"),l6=a("a"),w3e=a("span"),F(Sx.$$.fragment),IVr=l(),A3e=a("span"),NVr=o("FlaxAutoModelForVision2Seq"),FDe=l(),Mr=a("div"),F(Rx.$$.fragment),qVr=l(),dm=a("p"),jVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),FZ=a("a"),DVr=o("from_pretrained()"),GVr=o(" class method or the "),TZ=a("a"),OVr=o("from_config()"),VVr=o(` class
method.`),XVr=l(),Px=a("p"),zVr=o("This class cannot be instantiated directly using "),y3e=a("code"),WVr=o("__init__()"),QVr=o(" (throws an error)."),HVr=l(),Kt=a("div"),F(Bx.$$.fragment),UVr=l(),L3e=a("p"),JVr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),YVr=l(),cm=a("p"),KVr=o(`Note:
Loading a model from its configuration file does `),x3e=a("strong"),ZVr=o("not"),eXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MZ=a("a"),oXr=o("from_pretrained()"),rXr=o(" to load the model weights."),tXr=l(),F(i6.$$.fragment),aXr=l(),Jr=a("div"),F(Ix.$$.fragment),nXr=l(),$3e=a("p"),sXr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lXr=l(),wn=a("p"),iXr=o("The model class to instantiate is selected based on the "),k3e=a("code"),dXr=o("model_type"),cXr=o(` property of the config object (either
passed as an argument or loaded from `),S3e=a("code"),mXr=o("pretrained_model_name_or_path"),fXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R3e=a("code"),gXr=o("pretrained_model_name_or_path"),hXr=o(":"),uXr=l(),P3e=a("ul"),d6=a("li"),B3e=a("strong"),pXr=o("vision-encoder-decoder"),_Xr=o(" \u2014 "),EZ=a("a"),bXr=o("FlaxVisionEncoderDecoderModel"),vXr=o(" (Vision Encoder decoder model)"),FXr=l(),F(c6.$$.fragment),this.h()},l(m){const _=ckt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(m),u=n(m,"H1",{class:!0});var Nx=s(u);f=n(Nx,"A",{id:!0,class:!0,href:!0});var I3e=s(f);p=n(I3e,"SPAN",{});var N3e=s(p);T(d.$$.fragment,N3e),N3e.forEach(t),I3e.forEach(t),h=i(Nx),Mo=n(Nx,"SPAN",{});var q3e=s(Mo);mi=r(q3e,"Auto Classes"),q3e.forEach(t),Nx.forEach(t),hm=i(m),rt=n(m,"P",{});var qx=s(rt);fi=r(qx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=n(qx,"CODE",{});var j3e=s(gi);Ly=r(j3e,"from_pretrained()"),j3e.forEach(t),um=r(qx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qx.forEach(t),De=i(m),We=n(m,"P",{});var An=s(We);hi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var D3e=s(yn);xy=r(D3e,"AutoConfig"),D3e.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var G3e=s(xn);$y=r(G3e,"AutoModel"),G3e.forEach(t),ui=r(An,`, and
`),$n=n(An,"A",{href:!0});var O3e=s($n);ky=r(O3e,"AutoTokenizer"),O3e.forEach(t),pi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),pm=i(m),T(Ca.$$.fragment,m),Qe=i(m),Ae=n(m,"P",{});var jx=s(Ae);J$=r(jx,"will create a model that is an instance of "),_i=n(jx,"A",{href:!0});var V3e=s(_i);Y$=r(V3e,"BertModel"),V3e.forEach(t),K$=r(jx,"."),jx.forEach(t),Eo=i(m),wa=n(m,"P",{});var Dx=s(wa);Z$=r(Dx,"There is one class of "),_m=n(Dx,"CODE",{});var X3e=s(_m);ek=r(X3e,"AutoModel"),X3e.forEach(t),xOe=r(Dx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Dx.forEach(t),bqe=i(m),bi=n(m,"H2",{class:!0});var Gx=s(bi);bm=n(Gx,"A",{id:!0,class:!0,href:!0});var z3e=s(bm);poe=n(z3e,"SPAN",{});var W3e=s(poe);T(Sy.$$.fragment,W3e),W3e.forEach(t),z3e.forEach(t),$Oe=i(Gx),_oe=n(Gx,"SPAN",{});var Q3e=s(_oe);kOe=r(Q3e,"Extending the Auto Classes"),Q3e.forEach(t),Gx.forEach(t),vqe=i(m),kn=n(m,"P",{});var mm=s(kn);SOe=r(mm,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),boe=n(mm,"CODE",{});var H3e=s(boe);ROe=r(H3e,"NewModel"),H3e.forEach(t),POe=r(mm,", make sure you have a "),voe=n(mm,"CODE",{});var U3e=s(voe);BOe=r(U3e,"NewModelConfig"),U3e.forEach(t),IOe=r(mm,` then you can add those to the auto
classes like this:`),mm.forEach(t),Fqe=i(m),T(Ry.$$.fragment,m),Tqe=i(m),ok=n(m,"P",{});var J3e=s(ok);NOe=r(J3e,"You will then be able to use the auto classes like you would usually do!"),J3e.forEach(t),Mqe=i(m),T(vm.$$.fragment,m),Eqe=i(m),vi=n(m,"H2",{class:!0});var Ox=s(vi);Fm=n(Ox,"A",{id:!0,class:!0,href:!0});var Y3e=s(Fm);Foe=n(Y3e,"SPAN",{});var K3e=s(Foe);T(Py.$$.fragment,K3e),K3e.forEach(t),Y3e.forEach(t),qOe=i(Ox),Toe=n(Ox,"SPAN",{});var Z3e=s(Toe);jOe=r(Z3e,"AutoConfig"),Z3e.forEach(t),Ox.forEach(t),Cqe=i(m),Co=n(m,"DIV",{class:!0});var et=s(Co);T(By.$$.fragment,et),DOe=i(et),Iy=n(et,"P",{});var Vx=s(Iy);GOe=r(Vx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),rk=n(Vx,"A",{href:!0});var ewe=s(rk);OOe=r(ewe,"from_pretrained()"),ewe.forEach(t),VOe=r(Vx," class method."),Vx.forEach(t),XOe=i(et),Ny=n(et,"P",{});var Xx=s(Ny);zOe=r(Xx,"This class cannot be instantiated directly using "),Moe=n(Xx,"CODE",{});var owe=s(Moe);WOe=r(owe,"__init__()"),owe.forEach(t),QOe=r(Xx," (throws an error)."),Xx.forEach(t),HOe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(qy.$$.fragment,ot),UOe=i(ot),Eoe=n(ot,"P",{});var rwe=s(Eoe);JOe=r(rwe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),rwe.forEach(t),YOe=i(ot),Fi=n(ot,"P",{});var fm=s(Fi);KOe=r(fm,"The configuration class to instantiate is selected based on the "),Coe=n(fm,"CODE",{});var twe=s(Coe);ZOe=r(twe,"model_type"),twe.forEach(t),eVe=r(fm,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),woe=n(fm,"CODE",{});var awe=s(woe);oVe=r(awe,"pretrained_model_name_or_path"),awe.forEach(t),rVe=r(fm,":"),fm.forEach(t),tVe=i(ot),A=n(ot,"UL",{});var y=s(A);Tm=n(y,"LI",{});var m6=s(Tm);Aoe=n(m6,"STRONG",{});var nwe=s(Aoe);aVe=r(nwe,"albert"),nwe.forEach(t),nVe=r(m6," \u2014 "),tk=n(m6,"A",{href:!0});var swe=s(tk);sVe=r(swe,"AlbertConfig"),swe.forEach(t),lVe=r(m6," (ALBERT model)"),m6.forEach(t),iVe=i(y),Mm=n(y,"LI",{});var f6=s(Mm);yoe=n(f6,"STRONG",{});var lwe=s(yoe);dVe=r(lwe,"bart"),lwe.forEach(t),cVe=r(f6," \u2014 "),ak=n(f6,"A",{href:!0});var iwe=s(ak);mVe=r(iwe,"BartConfig"),iwe.forEach(t),fVe=r(f6," (BART model)"),f6.forEach(t),gVe=i(y),Em=n(y,"LI",{});var g6=s(Em);Loe=n(g6,"STRONG",{});var dwe=s(Loe);hVe=r(dwe,"beit"),dwe.forEach(t),uVe=r(g6," \u2014 "),nk=n(g6,"A",{href:!0});var cwe=s(nk);pVe=r(cwe,"BeitConfig"),cwe.forEach(t),_Ve=r(g6," (BEiT model)"),g6.forEach(t),bVe=i(y),Cm=n(y,"LI",{});var h6=s(Cm);xoe=n(h6,"STRONG",{});var mwe=s(xoe);vVe=r(mwe,"bert"),mwe.forEach(t),FVe=r(h6," \u2014 "),sk=n(h6,"A",{href:!0});var fwe=s(sk);TVe=r(fwe,"BertConfig"),fwe.forEach(t),MVe=r(h6," (BERT model)"),h6.forEach(t),EVe=i(y),wm=n(y,"LI",{});var u6=s(wm);$oe=n(u6,"STRONG",{});var gwe=s($oe);CVe=r(gwe,"bert-generation"),gwe.forEach(t),wVe=r(u6," \u2014 "),lk=n(u6,"A",{href:!0});var hwe=s(lk);AVe=r(hwe,"BertGenerationConfig"),hwe.forEach(t),yVe=r(u6," (Bert Generation model)"),u6.forEach(t),LVe=i(y),Am=n(y,"LI",{});var p6=s(Am);koe=n(p6,"STRONG",{});var uwe=s(koe);xVe=r(uwe,"big_bird"),uwe.forEach(t),$Ve=r(p6," \u2014 "),ik=n(p6,"A",{href:!0});var pwe=s(ik);kVe=r(pwe,"BigBirdConfig"),pwe.forEach(t),SVe=r(p6," (BigBird model)"),p6.forEach(t),RVe=i(y),ym=n(y,"LI",{});var _6=s(ym);Soe=n(_6,"STRONG",{});var _we=s(Soe);PVe=r(_we,"bigbird_pegasus"),_we.forEach(t),BVe=r(_6," \u2014 "),dk=n(_6,"A",{href:!0});var bwe=s(dk);IVe=r(bwe,"BigBirdPegasusConfig"),bwe.forEach(t),NVe=r(_6," (BigBirdPegasus model)"),_6.forEach(t),qVe=i(y),Lm=n(y,"LI",{});var b6=s(Lm);Roe=n(b6,"STRONG",{});var vwe=s(Roe);jVe=r(vwe,"blenderbot"),vwe.forEach(t),DVe=r(b6," \u2014 "),ck=n(b6,"A",{href:!0});var Fwe=s(ck);GVe=r(Fwe,"BlenderbotConfig"),Fwe.forEach(t),OVe=r(b6," (Blenderbot model)"),b6.forEach(t),VVe=i(y),xm=n(y,"LI",{});var v6=s(xm);Poe=n(v6,"STRONG",{});var Twe=s(Poe);XVe=r(Twe,"blenderbot-small"),Twe.forEach(t),zVe=r(v6," \u2014 "),mk=n(v6,"A",{href:!0});var Mwe=s(mk);WVe=r(Mwe,"BlenderbotSmallConfig"),Mwe.forEach(t),QVe=r(v6," (BlenderbotSmall model)"),v6.forEach(t),HVe=i(y),$m=n(y,"LI",{});var F6=s($m);Boe=n(F6,"STRONG",{});var Ewe=s(Boe);UVe=r(Ewe,"camembert"),Ewe.forEach(t),JVe=r(F6," \u2014 "),fk=n(F6,"A",{href:!0});var Cwe=s(fk);YVe=r(Cwe,"CamembertConfig"),Cwe.forEach(t),KVe=r(F6," (CamemBERT model)"),F6.forEach(t),ZVe=i(y),km=n(y,"LI",{});var T6=s(km);Ioe=n(T6,"STRONG",{});var wwe=s(Ioe);eXe=r(wwe,"canine"),wwe.forEach(t),oXe=r(T6," \u2014 "),gk=n(T6,"A",{href:!0});var Awe=s(gk);rXe=r(Awe,"CanineConfig"),Awe.forEach(t),tXe=r(T6," (Canine model)"),T6.forEach(t),aXe=i(y),Sm=n(y,"LI",{});var M6=s(Sm);Noe=n(M6,"STRONG",{});var ywe=s(Noe);nXe=r(ywe,"clip"),ywe.forEach(t),sXe=r(M6," \u2014 "),hk=n(M6,"A",{href:!0});var Lwe=s(hk);lXe=r(Lwe,"CLIPConfig"),Lwe.forEach(t),iXe=r(M6," (CLIP model)"),M6.forEach(t),dXe=i(y),Rm=n(y,"LI",{});var E6=s(Rm);qoe=n(E6,"STRONG",{});var xwe=s(qoe);cXe=r(xwe,"convbert"),xwe.forEach(t),mXe=r(E6," \u2014 "),uk=n(E6,"A",{href:!0});var $we=s(uk);fXe=r($we,"ConvBertConfig"),$we.forEach(t),gXe=r(E6," (ConvBERT model)"),E6.forEach(t),hXe=i(y),Pm=n(y,"LI",{});var C6=s(Pm);joe=n(C6,"STRONG",{});var kwe=s(joe);uXe=r(kwe,"convnext"),kwe.forEach(t),pXe=r(C6," \u2014 "),pk=n(C6,"A",{href:!0});var Swe=s(pk);_Xe=r(Swe,"ConvNextConfig"),Swe.forEach(t),bXe=r(C6," (ConvNext model)"),C6.forEach(t),vXe=i(y),Bm=n(y,"LI",{});var w6=s(Bm);Doe=n(w6,"STRONG",{});var Rwe=s(Doe);FXe=r(Rwe,"ctrl"),Rwe.forEach(t),TXe=r(w6," \u2014 "),_k=n(w6,"A",{href:!0});var Pwe=s(_k);MXe=r(Pwe,"CTRLConfig"),Pwe.forEach(t),EXe=r(w6," (CTRL model)"),w6.forEach(t),CXe=i(y),Im=n(y,"LI",{});var A6=s(Im);Goe=n(A6,"STRONG",{});var Bwe=s(Goe);wXe=r(Bwe,"cvt"),Bwe.forEach(t),AXe=r(A6," \u2014 "),bk=n(A6,"A",{href:!0});var Iwe=s(bk);yXe=r(Iwe,"CvtConfig"),Iwe.forEach(t),LXe=r(A6," (CvT model)"),A6.forEach(t),xXe=i(y),Nm=n(y,"LI",{});var y6=s(Nm);Ooe=n(y6,"STRONG",{});var Nwe=s(Ooe);$Xe=r(Nwe,"data2vec-audio"),Nwe.forEach(t),kXe=r(y6," \u2014 "),vk=n(y6,"A",{href:!0});var qwe=s(vk);SXe=r(qwe,"Data2VecAudioConfig"),qwe.forEach(t),RXe=r(y6," (Data2VecAudio model)"),y6.forEach(t),PXe=i(y),qm=n(y,"LI",{});var L6=s(qm);Voe=n(L6,"STRONG",{});var jwe=s(Voe);BXe=r(jwe,"data2vec-text"),jwe.forEach(t),IXe=r(L6," \u2014 "),Fk=n(L6,"A",{href:!0});var Dwe=s(Fk);NXe=r(Dwe,"Data2VecTextConfig"),Dwe.forEach(t),qXe=r(L6," (Data2VecText model)"),L6.forEach(t),jXe=i(y),jm=n(y,"LI",{});var x6=s(jm);Xoe=n(x6,"STRONG",{});var Gwe=s(Xoe);DXe=r(Gwe,"data2vec-vision"),Gwe.forEach(t),GXe=r(x6," \u2014 "),Tk=n(x6,"A",{href:!0});var Owe=s(Tk);OXe=r(Owe,"Data2VecVisionConfig"),Owe.forEach(t),VXe=r(x6," (Data2VecVision model)"),x6.forEach(t),XXe=i(y),Dm=n(y,"LI",{});var $6=s(Dm);zoe=n($6,"STRONG",{});var Vwe=s(zoe);zXe=r(Vwe,"deberta"),Vwe.forEach(t),WXe=r($6," \u2014 "),Mk=n($6,"A",{href:!0});var Xwe=s(Mk);QXe=r(Xwe,"DebertaConfig"),Xwe.forEach(t),HXe=r($6," (DeBERTa model)"),$6.forEach(t),UXe=i(y),Gm=n(y,"LI",{});var k6=s(Gm);Woe=n(k6,"STRONG",{});var zwe=s(Woe);JXe=r(zwe,"deberta-v2"),zwe.forEach(t),YXe=r(k6," \u2014 "),Ek=n(k6,"A",{href:!0});var Wwe=s(Ek);KXe=r(Wwe,"DebertaV2Config"),Wwe.forEach(t),ZXe=r(k6," (DeBERTa-v2 model)"),k6.forEach(t),eze=i(y),Om=n(y,"LI",{});var S6=s(Om);Qoe=n(S6,"STRONG",{});var Qwe=s(Qoe);oze=r(Qwe,"decision_transformer"),Qwe.forEach(t),rze=r(S6," \u2014 "),Ck=n(S6,"A",{href:!0});var Hwe=s(Ck);tze=r(Hwe,"DecisionTransformerConfig"),Hwe.forEach(t),aze=r(S6," (Decision Transformer model)"),S6.forEach(t),nze=i(y),Vm=n(y,"LI",{});var R6=s(Vm);Hoe=n(R6,"STRONG",{});var Uwe=s(Hoe);sze=r(Uwe,"deit"),Uwe.forEach(t),lze=r(R6," \u2014 "),wk=n(R6,"A",{href:!0});var MXr=s(wk);ize=r(MXr,"DeiTConfig"),MXr.forEach(t),dze=r(R6," (DeiT model)"),R6.forEach(t),cze=i(y),Xm=n(y,"LI",{});var Jwe=s(Xm);Uoe=n(Jwe,"STRONG",{});var EXr=s(Uoe);mze=r(EXr,"detr"),EXr.forEach(t),fze=r(Jwe," \u2014 "),Ak=n(Jwe,"A",{href:!0});var CXr=s(Ak);gze=r(CXr,"DetrConfig"),CXr.forEach(t),hze=r(Jwe," (DETR model)"),Jwe.forEach(t),uze=i(y),zm=n(y,"LI",{});var Ywe=s(zm);Joe=n(Ywe,"STRONG",{});var wXr=s(Joe);pze=r(wXr,"distilbert"),wXr.forEach(t),_ze=r(Ywe," \u2014 "),yk=n(Ywe,"A",{href:!0});var AXr=s(yk);bze=r(AXr,"DistilBertConfig"),AXr.forEach(t),vze=r(Ywe," (DistilBERT model)"),Ywe.forEach(t),Fze=i(y),Wm=n(y,"LI",{});var Kwe=s(Wm);Yoe=n(Kwe,"STRONG",{});var yXr=s(Yoe);Tze=r(yXr,"dpr"),yXr.forEach(t),Mze=r(Kwe," \u2014 "),Lk=n(Kwe,"A",{href:!0});var LXr=s(Lk);Eze=r(LXr,"DPRConfig"),LXr.forEach(t),Cze=r(Kwe," (DPR model)"),Kwe.forEach(t),wze=i(y),Qm=n(y,"LI",{});var Zwe=s(Qm);Koe=n(Zwe,"STRONG",{});var xXr=s(Koe);Aze=r(xXr,"dpt"),xXr.forEach(t),yze=r(Zwe," \u2014 "),xk=n(Zwe,"A",{href:!0});var $Xr=s(xk);Lze=r($Xr,"DPTConfig"),$Xr.forEach(t),xze=r(Zwe," (DPT model)"),Zwe.forEach(t),$ze=i(y),Hm=n(y,"LI",{});var e0e=s(Hm);Zoe=n(e0e,"STRONG",{});var kXr=s(Zoe);kze=r(kXr,"electra"),kXr.forEach(t),Sze=r(e0e," \u2014 "),$k=n(e0e,"A",{href:!0});var SXr=s($k);Rze=r(SXr,"ElectraConfig"),SXr.forEach(t),Pze=r(e0e," (ELECTRA model)"),e0e.forEach(t),Bze=i(y),Um=n(y,"LI",{});var o0e=s(Um);ere=n(o0e,"STRONG",{});var RXr=s(ere);Ize=r(RXr,"encoder-decoder"),RXr.forEach(t),Nze=r(o0e," \u2014 "),kk=n(o0e,"A",{href:!0});var PXr=s(kk);qze=r(PXr,"EncoderDecoderConfig"),PXr.forEach(t),jze=r(o0e," (Encoder decoder model)"),o0e.forEach(t),Dze=i(y),Jm=n(y,"LI",{});var r0e=s(Jm);ore=n(r0e,"STRONG",{});var BXr=s(ore);Gze=r(BXr,"flaubert"),BXr.forEach(t),Oze=r(r0e," \u2014 "),Sk=n(r0e,"A",{href:!0});var IXr=s(Sk);Vze=r(IXr,"FlaubertConfig"),IXr.forEach(t),Xze=r(r0e," (FlauBERT model)"),r0e.forEach(t),zze=i(y),Ym=n(y,"LI",{});var t0e=s(Ym);rre=n(t0e,"STRONG",{});var NXr=s(rre);Wze=r(NXr,"flava"),NXr.forEach(t),Qze=r(t0e," \u2014 "),Rk=n(t0e,"A",{href:!0});var qXr=s(Rk);Hze=r(qXr,"FlavaConfig"),qXr.forEach(t),Uze=r(t0e," (Flava model)"),t0e.forEach(t),Jze=i(y),Km=n(y,"LI",{});var a0e=s(Km);tre=n(a0e,"STRONG",{});var jXr=s(tre);Yze=r(jXr,"fnet"),jXr.forEach(t),Kze=r(a0e," \u2014 "),Pk=n(a0e,"A",{href:!0});var DXr=s(Pk);Zze=r(DXr,"FNetConfig"),DXr.forEach(t),eWe=r(a0e," (FNet model)"),a0e.forEach(t),oWe=i(y),Zm=n(y,"LI",{});var n0e=s(Zm);are=n(n0e,"STRONG",{});var GXr=s(are);rWe=r(GXr,"fsmt"),GXr.forEach(t),tWe=r(n0e," \u2014 "),Bk=n(n0e,"A",{href:!0});var OXr=s(Bk);aWe=r(OXr,"FSMTConfig"),OXr.forEach(t),nWe=r(n0e," (FairSeq Machine-Translation model)"),n0e.forEach(t),sWe=i(y),ef=n(y,"LI",{});var s0e=s(ef);nre=n(s0e,"STRONG",{});var VXr=s(nre);lWe=r(VXr,"funnel"),VXr.forEach(t),iWe=r(s0e," \u2014 "),Ik=n(s0e,"A",{href:!0});var XXr=s(Ik);dWe=r(XXr,"FunnelConfig"),XXr.forEach(t),cWe=r(s0e," (Funnel Transformer model)"),s0e.forEach(t),mWe=i(y),of=n(y,"LI",{});var l0e=s(of);sre=n(l0e,"STRONG",{});var zXr=s(sre);fWe=r(zXr,"glpn"),zXr.forEach(t),gWe=r(l0e," \u2014 "),Nk=n(l0e,"A",{href:!0});var WXr=s(Nk);hWe=r(WXr,"GLPNConfig"),WXr.forEach(t),uWe=r(l0e," (GLPN model)"),l0e.forEach(t),pWe=i(y),rf=n(y,"LI",{});var i0e=s(rf);lre=n(i0e,"STRONG",{});var QXr=s(lre);_We=r(QXr,"gpt2"),QXr.forEach(t),bWe=r(i0e," \u2014 "),qk=n(i0e,"A",{href:!0});var HXr=s(qk);vWe=r(HXr,"GPT2Config"),HXr.forEach(t),FWe=r(i0e," (OpenAI GPT-2 model)"),i0e.forEach(t),TWe=i(y),tf=n(y,"LI",{});var d0e=s(tf);ire=n(d0e,"STRONG",{});var UXr=s(ire);MWe=r(UXr,"gpt_neo"),UXr.forEach(t),EWe=r(d0e," \u2014 "),jk=n(d0e,"A",{href:!0});var JXr=s(jk);CWe=r(JXr,"GPTNeoConfig"),JXr.forEach(t),wWe=r(d0e," (GPT Neo model)"),d0e.forEach(t),AWe=i(y),af=n(y,"LI",{});var c0e=s(af);dre=n(c0e,"STRONG",{});var YXr=s(dre);yWe=r(YXr,"gpt_neox"),YXr.forEach(t),LWe=r(c0e," \u2014 "),Dk=n(c0e,"A",{href:!0});var KXr=s(Dk);xWe=r(KXr,"GPTNeoXConfig"),KXr.forEach(t),$We=r(c0e," (GPT NeoX model)"),c0e.forEach(t),kWe=i(y),nf=n(y,"LI",{});var m0e=s(nf);cre=n(m0e,"STRONG",{});var ZXr=s(cre);SWe=r(ZXr,"gptj"),ZXr.forEach(t),RWe=r(m0e," \u2014 "),Gk=n(m0e,"A",{href:!0});var ezr=s(Gk);PWe=r(ezr,"GPTJConfig"),ezr.forEach(t),BWe=r(m0e," (GPT-J model)"),m0e.forEach(t),IWe=i(y),sf=n(y,"LI",{});var f0e=s(sf);mre=n(f0e,"STRONG",{});var ozr=s(mre);NWe=r(ozr,"hubert"),ozr.forEach(t),qWe=r(f0e," \u2014 "),Ok=n(f0e,"A",{href:!0});var rzr=s(Ok);jWe=r(rzr,"HubertConfig"),rzr.forEach(t),DWe=r(f0e," (Hubert model)"),f0e.forEach(t),GWe=i(y),lf=n(y,"LI",{});var g0e=s(lf);fre=n(g0e,"STRONG",{});var tzr=s(fre);OWe=r(tzr,"ibert"),tzr.forEach(t),VWe=r(g0e," \u2014 "),Vk=n(g0e,"A",{href:!0});var azr=s(Vk);XWe=r(azr,"IBertConfig"),azr.forEach(t),zWe=r(g0e," (I-BERT model)"),g0e.forEach(t),WWe=i(y),df=n(y,"LI",{});var h0e=s(df);gre=n(h0e,"STRONG",{});var nzr=s(gre);QWe=r(nzr,"imagegpt"),nzr.forEach(t),HWe=r(h0e," \u2014 "),Xk=n(h0e,"A",{href:!0});var szr=s(Xk);UWe=r(szr,"ImageGPTConfig"),szr.forEach(t),JWe=r(h0e," (ImageGPT model)"),h0e.forEach(t),YWe=i(y),cf=n(y,"LI",{});var u0e=s(cf);hre=n(u0e,"STRONG",{});var lzr=s(hre);KWe=r(lzr,"layoutlm"),lzr.forEach(t),ZWe=r(u0e," \u2014 "),zk=n(u0e,"A",{href:!0});var izr=s(zk);eQe=r(izr,"LayoutLMConfig"),izr.forEach(t),oQe=r(u0e," (LayoutLM model)"),u0e.forEach(t),rQe=i(y),mf=n(y,"LI",{});var p0e=s(mf);ure=n(p0e,"STRONG",{});var dzr=s(ure);tQe=r(dzr,"layoutlmv2"),dzr.forEach(t),aQe=r(p0e," \u2014 "),Wk=n(p0e,"A",{href:!0});var czr=s(Wk);nQe=r(czr,"LayoutLMv2Config"),czr.forEach(t),sQe=r(p0e," (LayoutLMv2 model)"),p0e.forEach(t),lQe=i(y),ff=n(y,"LI",{});var _0e=s(ff);pre=n(_0e,"STRONG",{});var mzr=s(pre);iQe=r(mzr,"layoutlmv3"),mzr.forEach(t),dQe=r(_0e," \u2014 "),Qk=n(_0e,"A",{href:!0});var fzr=s(Qk);cQe=r(fzr,"LayoutLMv3Config"),fzr.forEach(t),mQe=r(_0e," (LayoutLMv3 model)"),_0e.forEach(t),fQe=i(y),gf=n(y,"LI",{});var b0e=s(gf);_re=n(b0e,"STRONG",{});var gzr=s(_re);gQe=r(gzr,"led"),gzr.forEach(t),hQe=r(b0e," \u2014 "),Hk=n(b0e,"A",{href:!0});var hzr=s(Hk);uQe=r(hzr,"LEDConfig"),hzr.forEach(t),pQe=r(b0e," (LED model)"),b0e.forEach(t),_Qe=i(y),hf=n(y,"LI",{});var v0e=s(hf);bre=n(v0e,"STRONG",{});var uzr=s(bre);bQe=r(uzr,"longformer"),uzr.forEach(t),vQe=r(v0e," \u2014 "),Uk=n(v0e,"A",{href:!0});var pzr=s(Uk);FQe=r(pzr,"LongformerConfig"),pzr.forEach(t),TQe=r(v0e," (Longformer model)"),v0e.forEach(t),MQe=i(y),uf=n(y,"LI",{});var F0e=s(uf);vre=n(F0e,"STRONG",{});var _zr=s(vre);EQe=r(_zr,"luke"),_zr.forEach(t),CQe=r(F0e," \u2014 "),Jk=n(F0e,"A",{href:!0});var bzr=s(Jk);wQe=r(bzr,"LukeConfig"),bzr.forEach(t),AQe=r(F0e," (LUKE model)"),F0e.forEach(t),yQe=i(y),pf=n(y,"LI",{});var T0e=s(pf);Fre=n(T0e,"STRONG",{});var vzr=s(Fre);LQe=r(vzr,"lxmert"),vzr.forEach(t),xQe=r(T0e," \u2014 "),Yk=n(T0e,"A",{href:!0});var Fzr=s(Yk);$Qe=r(Fzr,"LxmertConfig"),Fzr.forEach(t),kQe=r(T0e," (LXMERT model)"),T0e.forEach(t),SQe=i(y),_f=n(y,"LI",{});var M0e=s(_f);Tre=n(M0e,"STRONG",{});var Tzr=s(Tre);RQe=r(Tzr,"m2m_100"),Tzr.forEach(t),PQe=r(M0e," \u2014 "),Kk=n(M0e,"A",{href:!0});var Mzr=s(Kk);BQe=r(Mzr,"M2M100Config"),Mzr.forEach(t),IQe=r(M0e," (M2M100 model)"),M0e.forEach(t),NQe=i(y),bf=n(y,"LI",{});var E0e=s(bf);Mre=n(E0e,"STRONG",{});var Ezr=s(Mre);qQe=r(Ezr,"marian"),Ezr.forEach(t),jQe=r(E0e," \u2014 "),Zk=n(E0e,"A",{href:!0});var Czr=s(Zk);DQe=r(Czr,"MarianConfig"),Czr.forEach(t),GQe=r(E0e," (Marian model)"),E0e.forEach(t),OQe=i(y),vf=n(y,"LI",{});var C0e=s(vf);Ere=n(C0e,"STRONG",{});var wzr=s(Ere);VQe=r(wzr,"maskformer"),wzr.forEach(t),XQe=r(C0e," \u2014 "),eS=n(C0e,"A",{href:!0});var Azr=s(eS);zQe=r(Azr,"MaskFormerConfig"),Azr.forEach(t),WQe=r(C0e," (MaskFormer model)"),C0e.forEach(t),QQe=i(y),Ff=n(y,"LI",{});var w0e=s(Ff);Cre=n(w0e,"STRONG",{});var yzr=s(Cre);HQe=r(yzr,"mbart"),yzr.forEach(t),UQe=r(w0e," \u2014 "),oS=n(w0e,"A",{href:!0});var Lzr=s(oS);JQe=r(Lzr,"MBartConfig"),Lzr.forEach(t),YQe=r(w0e," (mBART model)"),w0e.forEach(t),KQe=i(y),Tf=n(y,"LI",{});var A0e=s(Tf);wre=n(A0e,"STRONG",{});var xzr=s(wre);ZQe=r(xzr,"megatron-bert"),xzr.forEach(t),eHe=r(A0e," \u2014 "),rS=n(A0e,"A",{href:!0});var $zr=s(rS);oHe=r($zr,"MegatronBertConfig"),$zr.forEach(t),rHe=r(A0e," (MegatronBert model)"),A0e.forEach(t),tHe=i(y),Mf=n(y,"LI",{});var y0e=s(Mf);Are=n(y0e,"STRONG",{});var kzr=s(Are);aHe=r(kzr,"mobilebert"),kzr.forEach(t),nHe=r(y0e," \u2014 "),tS=n(y0e,"A",{href:!0});var Szr=s(tS);sHe=r(Szr,"MobileBertConfig"),Szr.forEach(t),lHe=r(y0e," (MobileBERT model)"),y0e.forEach(t),iHe=i(y),Ef=n(y,"LI",{});var L0e=s(Ef);yre=n(L0e,"STRONG",{});var Rzr=s(yre);dHe=r(Rzr,"mpnet"),Rzr.forEach(t),cHe=r(L0e," \u2014 "),aS=n(L0e,"A",{href:!0});var Pzr=s(aS);mHe=r(Pzr,"MPNetConfig"),Pzr.forEach(t),fHe=r(L0e," (MPNet model)"),L0e.forEach(t),gHe=i(y),Cf=n(y,"LI",{});var x0e=s(Cf);Lre=n(x0e,"STRONG",{});var Bzr=s(Lre);hHe=r(Bzr,"mt5"),Bzr.forEach(t),uHe=r(x0e," \u2014 "),nS=n(x0e,"A",{href:!0});var Izr=s(nS);pHe=r(Izr,"MT5Config"),Izr.forEach(t),_He=r(x0e," (mT5 model)"),x0e.forEach(t),bHe=i(y),wf=n(y,"LI",{});var $0e=s(wf);xre=n($0e,"STRONG",{});var Nzr=s(xre);vHe=r(Nzr,"nystromformer"),Nzr.forEach(t),FHe=r($0e," \u2014 "),sS=n($0e,"A",{href:!0});var qzr=s(sS);THe=r(qzr,"NystromformerConfig"),qzr.forEach(t),MHe=r($0e," (Nystromformer model)"),$0e.forEach(t),EHe=i(y),Af=n(y,"LI",{});var k0e=s(Af);$re=n(k0e,"STRONG",{});var jzr=s($re);CHe=r(jzr,"openai-gpt"),jzr.forEach(t),wHe=r(k0e," \u2014 "),lS=n(k0e,"A",{href:!0});var Dzr=s(lS);AHe=r(Dzr,"OpenAIGPTConfig"),Dzr.forEach(t),yHe=r(k0e," (OpenAI GPT model)"),k0e.forEach(t),LHe=i(y),yf=n(y,"LI",{});var S0e=s(yf);kre=n(S0e,"STRONG",{});var Gzr=s(kre);xHe=r(Gzr,"opt"),Gzr.forEach(t),$He=r(S0e," \u2014 "),iS=n(S0e,"A",{href:!0});var Ozr=s(iS);kHe=r(Ozr,"OPTConfig"),Ozr.forEach(t),SHe=r(S0e," (OPT model)"),S0e.forEach(t),RHe=i(y),Lf=n(y,"LI",{});var R0e=s(Lf);Sre=n(R0e,"STRONG",{});var Vzr=s(Sre);PHe=r(Vzr,"pegasus"),Vzr.forEach(t),BHe=r(R0e," \u2014 "),dS=n(R0e,"A",{href:!0});var Xzr=s(dS);IHe=r(Xzr,"PegasusConfig"),Xzr.forEach(t),NHe=r(R0e," (Pegasus model)"),R0e.forEach(t),qHe=i(y),xf=n(y,"LI",{});var P0e=s(xf);Rre=n(P0e,"STRONG",{});var zzr=s(Rre);jHe=r(zzr,"perceiver"),zzr.forEach(t),DHe=r(P0e," \u2014 "),cS=n(P0e,"A",{href:!0});var Wzr=s(cS);GHe=r(Wzr,"PerceiverConfig"),Wzr.forEach(t),OHe=r(P0e," (Perceiver model)"),P0e.forEach(t),VHe=i(y),$f=n(y,"LI",{});var B0e=s($f);Pre=n(B0e,"STRONG",{});var Qzr=s(Pre);XHe=r(Qzr,"plbart"),Qzr.forEach(t),zHe=r(B0e," \u2014 "),mS=n(B0e,"A",{href:!0});var Hzr=s(mS);WHe=r(Hzr,"PLBartConfig"),Hzr.forEach(t),QHe=r(B0e," (PLBart model)"),B0e.forEach(t),HHe=i(y),kf=n(y,"LI",{});var I0e=s(kf);Bre=n(I0e,"STRONG",{});var Uzr=s(Bre);UHe=r(Uzr,"poolformer"),Uzr.forEach(t),JHe=r(I0e," \u2014 "),fS=n(I0e,"A",{href:!0});var Jzr=s(fS);YHe=r(Jzr,"PoolFormerConfig"),Jzr.forEach(t),KHe=r(I0e," (PoolFormer model)"),I0e.forEach(t),ZHe=i(y),Sf=n(y,"LI",{});var N0e=s(Sf);Ire=n(N0e,"STRONG",{});var Yzr=s(Ire);eUe=r(Yzr,"prophetnet"),Yzr.forEach(t),oUe=r(N0e," \u2014 "),gS=n(N0e,"A",{href:!0});var Kzr=s(gS);rUe=r(Kzr,"ProphetNetConfig"),Kzr.forEach(t),tUe=r(N0e," (ProphetNet model)"),N0e.forEach(t),aUe=i(y),Rf=n(y,"LI",{});var q0e=s(Rf);Nre=n(q0e,"STRONG",{});var Zzr=s(Nre);nUe=r(Zzr,"qdqbert"),Zzr.forEach(t),sUe=r(q0e," \u2014 "),hS=n(q0e,"A",{href:!0});var eWr=s(hS);lUe=r(eWr,"QDQBertConfig"),eWr.forEach(t),iUe=r(q0e," (QDQBert model)"),q0e.forEach(t),dUe=i(y),Pf=n(y,"LI",{});var j0e=s(Pf);qre=n(j0e,"STRONG",{});var oWr=s(qre);cUe=r(oWr,"rag"),oWr.forEach(t),mUe=r(j0e," \u2014 "),uS=n(j0e,"A",{href:!0});var rWr=s(uS);fUe=r(rWr,"RagConfig"),rWr.forEach(t),gUe=r(j0e," (RAG model)"),j0e.forEach(t),hUe=i(y),Bf=n(y,"LI",{});var D0e=s(Bf);jre=n(D0e,"STRONG",{});var tWr=s(jre);uUe=r(tWr,"realm"),tWr.forEach(t),pUe=r(D0e," \u2014 "),pS=n(D0e,"A",{href:!0});var aWr=s(pS);_Ue=r(aWr,"RealmConfig"),aWr.forEach(t),bUe=r(D0e," (Realm model)"),D0e.forEach(t),vUe=i(y),If=n(y,"LI",{});var G0e=s(If);Dre=n(G0e,"STRONG",{});var nWr=s(Dre);FUe=r(nWr,"reformer"),nWr.forEach(t),TUe=r(G0e," \u2014 "),_S=n(G0e,"A",{href:!0});var sWr=s(_S);MUe=r(sWr,"ReformerConfig"),sWr.forEach(t),EUe=r(G0e," (Reformer model)"),G0e.forEach(t),CUe=i(y),Nf=n(y,"LI",{});var O0e=s(Nf);Gre=n(O0e,"STRONG",{});var lWr=s(Gre);wUe=r(lWr,"regnet"),lWr.forEach(t),AUe=r(O0e," \u2014 "),bS=n(O0e,"A",{href:!0});var iWr=s(bS);yUe=r(iWr,"RegNetConfig"),iWr.forEach(t),LUe=r(O0e," (RegNet model)"),O0e.forEach(t),xUe=i(y),qf=n(y,"LI",{});var V0e=s(qf);Ore=n(V0e,"STRONG",{});var dWr=s(Ore);$Ue=r(dWr,"rembert"),dWr.forEach(t),kUe=r(V0e," \u2014 "),vS=n(V0e,"A",{href:!0});var cWr=s(vS);SUe=r(cWr,"RemBertConfig"),cWr.forEach(t),RUe=r(V0e," (RemBERT model)"),V0e.forEach(t),PUe=i(y),jf=n(y,"LI",{});var X0e=s(jf);Vre=n(X0e,"STRONG",{});var mWr=s(Vre);BUe=r(mWr,"resnet"),mWr.forEach(t),IUe=r(X0e," \u2014 "),FS=n(X0e,"A",{href:!0});var fWr=s(FS);NUe=r(fWr,"ResNetConfig"),fWr.forEach(t),qUe=r(X0e," (ResNet model)"),X0e.forEach(t),jUe=i(y),Df=n(y,"LI",{});var z0e=s(Df);Xre=n(z0e,"STRONG",{});var gWr=s(Xre);DUe=r(gWr,"retribert"),gWr.forEach(t),GUe=r(z0e," \u2014 "),TS=n(z0e,"A",{href:!0});var hWr=s(TS);OUe=r(hWr,"RetriBertConfig"),hWr.forEach(t),VUe=r(z0e," (RetriBERT model)"),z0e.forEach(t),XUe=i(y),Gf=n(y,"LI",{});var W0e=s(Gf);zre=n(W0e,"STRONG",{});var uWr=s(zre);zUe=r(uWr,"roberta"),uWr.forEach(t),WUe=r(W0e," \u2014 "),MS=n(W0e,"A",{href:!0});var pWr=s(MS);QUe=r(pWr,"RobertaConfig"),pWr.forEach(t),HUe=r(W0e," (RoBERTa model)"),W0e.forEach(t),UUe=i(y),Of=n(y,"LI",{});var Q0e=s(Of);Wre=n(Q0e,"STRONG",{});var _Wr=s(Wre);JUe=r(_Wr,"roformer"),_Wr.forEach(t),YUe=r(Q0e," \u2014 "),ES=n(Q0e,"A",{href:!0});var bWr=s(ES);KUe=r(bWr,"RoFormerConfig"),bWr.forEach(t),ZUe=r(Q0e," (RoFormer model)"),Q0e.forEach(t),eJe=i(y),Vf=n(y,"LI",{});var H0e=s(Vf);Qre=n(H0e,"STRONG",{});var vWr=s(Qre);oJe=r(vWr,"segformer"),vWr.forEach(t),rJe=r(H0e," \u2014 "),CS=n(H0e,"A",{href:!0});var FWr=s(CS);tJe=r(FWr,"SegformerConfig"),FWr.forEach(t),aJe=r(H0e," (SegFormer model)"),H0e.forEach(t),nJe=i(y),Xf=n(y,"LI",{});var U0e=s(Xf);Hre=n(U0e,"STRONG",{});var TWr=s(Hre);sJe=r(TWr,"sew"),TWr.forEach(t),lJe=r(U0e," \u2014 "),wS=n(U0e,"A",{href:!0});var MWr=s(wS);iJe=r(MWr,"SEWConfig"),MWr.forEach(t),dJe=r(U0e," (SEW model)"),U0e.forEach(t),cJe=i(y),zf=n(y,"LI",{});var J0e=s(zf);Ure=n(J0e,"STRONG",{});var EWr=s(Ure);mJe=r(EWr,"sew-d"),EWr.forEach(t),fJe=r(J0e," \u2014 "),AS=n(J0e,"A",{href:!0});var CWr=s(AS);gJe=r(CWr,"SEWDConfig"),CWr.forEach(t),hJe=r(J0e," (SEW-D model)"),J0e.forEach(t),uJe=i(y),Wf=n(y,"LI",{});var Y0e=s(Wf);Jre=n(Y0e,"STRONG",{});var wWr=s(Jre);pJe=r(wWr,"speech-encoder-decoder"),wWr.forEach(t),_Je=r(Y0e," \u2014 "),yS=n(Y0e,"A",{href:!0});var AWr=s(yS);bJe=r(AWr,"SpeechEncoderDecoderConfig"),AWr.forEach(t),vJe=r(Y0e," (Speech Encoder decoder model)"),Y0e.forEach(t),FJe=i(y),Qf=n(y,"LI",{});var K0e=s(Qf);Yre=n(K0e,"STRONG",{});var yWr=s(Yre);TJe=r(yWr,"speech_to_text"),yWr.forEach(t),MJe=r(K0e," \u2014 "),LS=n(K0e,"A",{href:!0});var LWr=s(LS);EJe=r(LWr,"Speech2TextConfig"),LWr.forEach(t),CJe=r(K0e," (Speech2Text model)"),K0e.forEach(t),wJe=i(y),Hf=n(y,"LI",{});var Z0e=s(Hf);Kre=n(Z0e,"STRONG",{});var xWr=s(Kre);AJe=r(xWr,"speech_to_text_2"),xWr.forEach(t),yJe=r(Z0e," \u2014 "),xS=n(Z0e,"A",{href:!0});var $Wr=s(xS);LJe=r($Wr,"Speech2Text2Config"),$Wr.forEach(t),xJe=r(Z0e," (Speech2Text2 model)"),Z0e.forEach(t),$Je=i(y),Uf=n(y,"LI",{});var e6e=s(Uf);Zre=n(e6e,"STRONG",{});var kWr=s(Zre);kJe=r(kWr,"splinter"),kWr.forEach(t),SJe=r(e6e," \u2014 "),$S=n(e6e,"A",{href:!0});var SWr=s($S);RJe=r(SWr,"SplinterConfig"),SWr.forEach(t),PJe=r(e6e," (Splinter model)"),e6e.forEach(t),BJe=i(y),Jf=n(y,"LI",{});var o6e=s(Jf);ete=n(o6e,"STRONG",{});var RWr=s(ete);IJe=r(RWr,"squeezebert"),RWr.forEach(t),NJe=r(o6e," \u2014 "),kS=n(o6e,"A",{href:!0});var PWr=s(kS);qJe=r(PWr,"SqueezeBertConfig"),PWr.forEach(t),jJe=r(o6e," (SqueezeBERT model)"),o6e.forEach(t),DJe=i(y),Yf=n(y,"LI",{});var r6e=s(Yf);ote=n(r6e,"STRONG",{});var BWr=s(ote);GJe=r(BWr,"swin"),BWr.forEach(t),OJe=r(r6e," \u2014 "),SS=n(r6e,"A",{href:!0});var IWr=s(SS);VJe=r(IWr,"SwinConfig"),IWr.forEach(t),XJe=r(r6e," (Swin model)"),r6e.forEach(t),zJe=i(y),Kf=n(y,"LI",{});var t6e=s(Kf);rte=n(t6e,"STRONG",{});var NWr=s(rte);WJe=r(NWr,"t5"),NWr.forEach(t),QJe=r(t6e," \u2014 "),RS=n(t6e,"A",{href:!0});var qWr=s(RS);HJe=r(qWr,"T5Config"),qWr.forEach(t),UJe=r(t6e," (T5 model)"),t6e.forEach(t),JJe=i(y),Zf=n(y,"LI",{});var a6e=s(Zf);tte=n(a6e,"STRONG",{});var jWr=s(tte);YJe=r(jWr,"tapas"),jWr.forEach(t),KJe=r(a6e," \u2014 "),PS=n(a6e,"A",{href:!0});var DWr=s(PS);ZJe=r(DWr,"TapasConfig"),DWr.forEach(t),eYe=r(a6e," (TAPAS model)"),a6e.forEach(t),oYe=i(y),eg=n(y,"LI",{});var n6e=s(eg);ate=n(n6e,"STRONG",{});var GWr=s(ate);rYe=r(GWr,"trajectory_transformer"),GWr.forEach(t),tYe=r(n6e," \u2014 "),BS=n(n6e,"A",{href:!0});var OWr=s(BS);aYe=r(OWr,"TrajectoryTransformerConfig"),OWr.forEach(t),nYe=r(n6e," (Trajectory Transformer model)"),n6e.forEach(t),sYe=i(y),og=n(y,"LI",{});var s6e=s(og);nte=n(s6e,"STRONG",{});var VWr=s(nte);lYe=r(VWr,"transfo-xl"),VWr.forEach(t),iYe=r(s6e," \u2014 "),IS=n(s6e,"A",{href:!0});var XWr=s(IS);dYe=r(XWr,"TransfoXLConfig"),XWr.forEach(t),cYe=r(s6e," (Transformer-XL model)"),s6e.forEach(t),mYe=i(y),rg=n(y,"LI",{});var l6e=s(rg);ste=n(l6e,"STRONG",{});var zWr=s(ste);fYe=r(zWr,"trocr"),zWr.forEach(t),gYe=r(l6e," \u2014 "),NS=n(l6e,"A",{href:!0});var WWr=s(NS);hYe=r(WWr,"TrOCRConfig"),WWr.forEach(t),uYe=r(l6e," (TrOCR model)"),l6e.forEach(t),pYe=i(y),tg=n(y,"LI",{});var i6e=s(tg);lte=n(i6e,"STRONG",{});var QWr=s(lte);_Ye=r(QWr,"unispeech"),QWr.forEach(t),bYe=r(i6e," \u2014 "),qS=n(i6e,"A",{href:!0});var HWr=s(qS);vYe=r(HWr,"UniSpeechConfig"),HWr.forEach(t),FYe=r(i6e," (UniSpeech model)"),i6e.forEach(t),TYe=i(y),ag=n(y,"LI",{});var d6e=s(ag);ite=n(d6e,"STRONG",{});var UWr=s(ite);MYe=r(UWr,"unispeech-sat"),UWr.forEach(t),EYe=r(d6e," \u2014 "),jS=n(d6e,"A",{href:!0});var JWr=s(jS);CYe=r(JWr,"UniSpeechSatConfig"),JWr.forEach(t),wYe=r(d6e," (UniSpeechSat model)"),d6e.forEach(t),AYe=i(y),ng=n(y,"LI",{});var c6e=s(ng);dte=n(c6e,"STRONG",{});var YWr=s(dte);yYe=r(YWr,"van"),YWr.forEach(t),LYe=r(c6e," \u2014 "),DS=n(c6e,"A",{href:!0});var KWr=s(DS);xYe=r(KWr,"VanConfig"),KWr.forEach(t),$Ye=r(c6e," (VAN model)"),c6e.forEach(t),kYe=i(y),sg=n(y,"LI",{});var m6e=s(sg);cte=n(m6e,"STRONG",{});var ZWr=s(cte);SYe=r(ZWr,"vilt"),ZWr.forEach(t),RYe=r(m6e," \u2014 "),GS=n(m6e,"A",{href:!0});var eQr=s(GS);PYe=r(eQr,"ViltConfig"),eQr.forEach(t),BYe=r(m6e," (ViLT model)"),m6e.forEach(t),IYe=i(y),lg=n(y,"LI",{});var f6e=s(lg);mte=n(f6e,"STRONG",{});var oQr=s(mte);NYe=r(oQr,"vision-encoder-decoder"),oQr.forEach(t),qYe=r(f6e," \u2014 "),OS=n(f6e,"A",{href:!0});var rQr=s(OS);jYe=r(rQr,"VisionEncoderDecoderConfig"),rQr.forEach(t),DYe=r(f6e," (Vision Encoder decoder model)"),f6e.forEach(t),GYe=i(y),ig=n(y,"LI",{});var g6e=s(ig);fte=n(g6e,"STRONG",{});var tQr=s(fte);OYe=r(tQr,"vision-text-dual-encoder"),tQr.forEach(t),VYe=r(g6e," \u2014 "),VS=n(g6e,"A",{href:!0});var aQr=s(VS);XYe=r(aQr,"VisionTextDualEncoderConfig"),aQr.forEach(t),zYe=r(g6e," (VisionTextDualEncoder model)"),g6e.forEach(t),WYe=i(y),dg=n(y,"LI",{});var h6e=s(dg);gte=n(h6e,"STRONG",{});var nQr=s(gte);QYe=r(nQr,"visual_bert"),nQr.forEach(t),HYe=r(h6e," \u2014 "),XS=n(h6e,"A",{href:!0});var sQr=s(XS);UYe=r(sQr,"VisualBertConfig"),sQr.forEach(t),JYe=r(h6e," (VisualBert model)"),h6e.forEach(t),YYe=i(y),cg=n(y,"LI",{});var u6e=s(cg);hte=n(u6e,"STRONG",{});var lQr=s(hte);KYe=r(lQr,"vit"),lQr.forEach(t),ZYe=r(u6e," \u2014 "),zS=n(u6e,"A",{href:!0});var iQr=s(zS);eKe=r(iQr,"ViTConfig"),iQr.forEach(t),oKe=r(u6e," (ViT model)"),u6e.forEach(t),rKe=i(y),mg=n(y,"LI",{});var p6e=s(mg);ute=n(p6e,"STRONG",{});var dQr=s(ute);tKe=r(dQr,"vit_mae"),dQr.forEach(t),aKe=r(p6e," \u2014 "),WS=n(p6e,"A",{href:!0});var cQr=s(WS);nKe=r(cQr,"ViTMAEConfig"),cQr.forEach(t),sKe=r(p6e," (ViTMAE model)"),p6e.forEach(t),lKe=i(y),fg=n(y,"LI",{});var _6e=s(fg);pte=n(_6e,"STRONG",{});var mQr=s(pte);iKe=r(mQr,"wav2vec2"),mQr.forEach(t),dKe=r(_6e," \u2014 "),QS=n(_6e,"A",{href:!0});var fQr=s(QS);cKe=r(fQr,"Wav2Vec2Config"),fQr.forEach(t),mKe=r(_6e," (Wav2Vec2 model)"),_6e.forEach(t),fKe=i(y),gg=n(y,"LI",{});var b6e=s(gg);_te=n(b6e,"STRONG",{});var gQr=s(_te);gKe=r(gQr,"wav2vec2-conformer"),gQr.forEach(t),hKe=r(b6e," \u2014 "),HS=n(b6e,"A",{href:!0});var hQr=s(HS);uKe=r(hQr,"Wav2Vec2ConformerConfig"),hQr.forEach(t),pKe=r(b6e," (Wav2Vec2-Conformer model)"),b6e.forEach(t),_Ke=i(y),hg=n(y,"LI",{});var v6e=s(hg);bte=n(v6e,"STRONG",{});var uQr=s(bte);bKe=r(uQr,"wavlm"),uQr.forEach(t),vKe=r(v6e," \u2014 "),US=n(v6e,"A",{href:!0});var pQr=s(US);FKe=r(pQr,"WavLMConfig"),pQr.forEach(t),TKe=r(v6e," (WavLM model)"),v6e.forEach(t),MKe=i(y),ug=n(y,"LI",{});var F6e=s(ug);vte=n(F6e,"STRONG",{});var _Qr=s(vte);EKe=r(_Qr,"xglm"),_Qr.forEach(t),CKe=r(F6e," \u2014 "),JS=n(F6e,"A",{href:!0});var bQr=s(JS);wKe=r(bQr,"XGLMConfig"),bQr.forEach(t),AKe=r(F6e," (XGLM model)"),F6e.forEach(t),yKe=i(y),pg=n(y,"LI",{});var T6e=s(pg);Fte=n(T6e,"STRONG",{});var vQr=s(Fte);LKe=r(vQr,"xlm"),vQr.forEach(t),xKe=r(T6e," \u2014 "),YS=n(T6e,"A",{href:!0});var FQr=s(YS);$Ke=r(FQr,"XLMConfig"),FQr.forEach(t),kKe=r(T6e," (XLM model)"),T6e.forEach(t),SKe=i(y),_g=n(y,"LI",{});var M6e=s(_g);Tte=n(M6e,"STRONG",{});var TQr=s(Tte);RKe=r(TQr,"xlm-prophetnet"),TQr.forEach(t),PKe=r(M6e," \u2014 "),KS=n(M6e,"A",{href:!0});var MQr=s(KS);BKe=r(MQr,"XLMProphetNetConfig"),MQr.forEach(t),IKe=r(M6e," (XLMProphetNet model)"),M6e.forEach(t),NKe=i(y),bg=n(y,"LI",{});var E6e=s(bg);Mte=n(E6e,"STRONG",{});var EQr=s(Mte);qKe=r(EQr,"xlm-roberta"),EQr.forEach(t),jKe=r(E6e," \u2014 "),ZS=n(E6e,"A",{href:!0});var CQr=s(ZS);DKe=r(CQr,"XLMRobertaConfig"),CQr.forEach(t),GKe=r(E6e," (XLM-RoBERTa model)"),E6e.forEach(t),OKe=i(y),vg=n(y,"LI",{});var C6e=s(vg);Ete=n(C6e,"STRONG",{});var wQr=s(Ete);VKe=r(wQr,"xlm-roberta-xl"),wQr.forEach(t),XKe=r(C6e," \u2014 "),eR=n(C6e,"A",{href:!0});var AQr=s(eR);zKe=r(AQr,"XLMRobertaXLConfig"),AQr.forEach(t),WKe=r(C6e," (XLM-RoBERTa-XL model)"),C6e.forEach(t),QKe=i(y),Fg=n(y,"LI",{});var w6e=s(Fg);Cte=n(w6e,"STRONG",{});var yQr=s(Cte);HKe=r(yQr,"xlnet"),yQr.forEach(t),UKe=r(w6e," \u2014 "),oR=n(w6e,"A",{href:!0});var LQr=s(oR);JKe=r(LQr,"XLNetConfig"),LQr.forEach(t),YKe=r(w6e," (XLNet model)"),w6e.forEach(t),KKe=i(y),Tg=n(y,"LI",{});var A6e=s(Tg);wte=n(A6e,"STRONG",{});var xQr=s(wte);ZKe=r(xQr,"yolos"),xQr.forEach(t),eZe=r(A6e," \u2014 "),rR=n(A6e,"A",{href:!0});var $Qr=s(rR);oZe=r($Qr,"YolosConfig"),$Qr.forEach(t),rZe=r(A6e," (YOLOS model)"),A6e.forEach(t),tZe=i(y),Mg=n(y,"LI",{});var y6e=s(Mg);Ate=n(y6e,"STRONG",{});var kQr=s(Ate);aZe=r(kQr,"yoso"),kQr.forEach(t),nZe=r(y6e," \u2014 "),tR=n(y6e,"A",{href:!0});var SQr=s(tR);sZe=r(SQr,"YosoConfig"),SQr.forEach(t),lZe=r(y6e," (YOSO model)"),y6e.forEach(t),y.forEach(t),iZe=i(ot),T(Eg.$$.fragment,ot),ot.forEach(t),dZe=i(et),Cg=n(et,"DIV",{class:!0});var MDe=s(Cg);T(jy.$$.fragment,MDe),cZe=i(MDe),yte=n(MDe,"P",{});var RQr=s(yte);mZe=r(RQr,"Register a new configuration for this class."),RQr.forEach(t),MDe.forEach(t),et.forEach(t),wqe=i(m),Ti=n(m,"H2",{class:!0});var EDe=s(Ti);wg=n(EDe,"A",{id:!0,class:!0,href:!0});var PQr=s(wg);Lte=n(PQr,"SPAN",{});var BQr=s(Lte);T(Dy.$$.fragment,BQr),BQr.forEach(t),PQr.forEach(t),fZe=i(EDe),xte=n(EDe,"SPAN",{});var IQr=s(xte);gZe=r(IQr,"AutoTokenizer"),IQr.forEach(t),EDe.forEach(t),Aqe=i(m),wo=n(m,"DIV",{class:!0});var Ns=s(wo);T(Gy.$$.fragment,Ns),hZe=i(Ns),Oy=n(Ns,"P",{});var CDe=s(Oy);uZe=r(CDe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),aR=n(CDe,"A",{href:!0});var NQr=s(aR);pZe=r(NQr,"AutoTokenizer.from_pretrained()"),NQr.forEach(t),_Ze=r(CDe," class method."),CDe.forEach(t),bZe=i(Ns),Vy=n(Ns,"P",{});var wDe=s(Vy);vZe=r(wDe,"This class cannot be instantiated directly using "),$te=n(wDe,"CODE",{});var qQr=s($te);FZe=r(qQr,"__init__()"),qQr.forEach(t),TZe=r(wDe," (throws an error)."),wDe.forEach(t),MZe=i(Ns),Cr=n(Ns,"DIV",{class:!0});var qs=s(Cr);T(Xy.$$.fragment,qs),EZe=i(qs),kte=n(qs,"P",{});var jQr=s(kte);CZe=r(jQr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),jQr.forEach(t),wZe=i(qs),Aa=n(qs,"P",{});var P6=s(Aa);AZe=r(P6,"The tokenizer class to instantiate is selected based on the "),Ste=n(P6,"CODE",{});var DQr=s(Ste);yZe=r(DQr,"model_type"),DQr.forEach(t),LZe=r(P6,` property of the config object (either
passed as an argument or loaded from `),Rte=n(P6,"CODE",{});var GQr=s(Rte);xZe=r(GQr,"pretrained_model_name_or_path"),GQr.forEach(t),$Ze=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pte=n(P6,"CODE",{});var OQr=s(Pte);kZe=r(OQr,"pretrained_model_name_or_path"),OQr.forEach(t),SZe=r(P6,":"),P6.forEach(t),RZe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var zx=s(Sn);Bte=n(zx,"STRONG",{});var VQr=s(Bte);PZe=r(VQr,"albert"),VQr.forEach(t),BZe=r(zx," \u2014 "),nR=n(zx,"A",{href:!0});var XQr=s(nR);IZe=r(XQr,"AlbertTokenizer"),XQr.forEach(t),NZe=r(zx," or "),sR=n(zx,"A",{href:!0});var zQr=s(sR);qZe=r(zQr,"AlbertTokenizerFast"),zQr.forEach(t),jZe=r(zx," (ALBERT model)"),zx.forEach(t),DZe=i(S),Rn=n(S,"LI",{});var Wx=s(Rn);Ite=n(Wx,"STRONG",{});var WQr=s(Ite);GZe=r(WQr,"bart"),WQr.forEach(t),OZe=r(Wx," \u2014 "),lR=n(Wx,"A",{href:!0});var QQr=s(lR);VZe=r(QQr,"BartTokenizer"),QQr.forEach(t),XZe=r(Wx," or "),iR=n(Wx,"A",{href:!0});var HQr=s(iR);zZe=r(HQr,"BartTokenizerFast"),HQr.forEach(t),WZe=r(Wx," (BART model)"),Wx.forEach(t),QZe=i(S),Pn=n(S,"LI",{});var Qx=s(Pn);Nte=n(Qx,"STRONG",{});var UQr=s(Nte);HZe=r(UQr,"barthez"),UQr.forEach(t),UZe=r(Qx," \u2014 "),dR=n(Qx,"A",{href:!0});var JQr=s(dR);JZe=r(JQr,"BarthezTokenizer"),JQr.forEach(t),YZe=r(Qx," or "),cR=n(Qx,"A",{href:!0});var YQr=s(cR);KZe=r(YQr,"BarthezTokenizerFast"),YQr.forEach(t),ZZe=r(Qx," (BARThez model)"),Qx.forEach(t),eeo=i(S),Ag=n(S,"LI",{});var L6e=s(Ag);qte=n(L6e,"STRONG",{});var KQr=s(qte);oeo=r(KQr,"bartpho"),KQr.forEach(t),reo=r(L6e," \u2014 "),mR=n(L6e,"A",{href:!0});var ZQr=s(mR);teo=r(ZQr,"BartphoTokenizer"),ZQr.forEach(t),aeo=r(L6e," (BARTpho model)"),L6e.forEach(t),neo=i(S),Bn=n(S,"LI",{});var Hx=s(Bn);jte=n(Hx,"STRONG",{});var eHr=s(jte);seo=r(eHr,"bert"),eHr.forEach(t),leo=r(Hx," \u2014 "),fR=n(Hx,"A",{href:!0});var oHr=s(fR);ieo=r(oHr,"BertTokenizer"),oHr.forEach(t),deo=r(Hx," or "),gR=n(Hx,"A",{href:!0});var rHr=s(gR);ceo=r(rHr,"BertTokenizerFast"),rHr.forEach(t),meo=r(Hx," (BERT model)"),Hx.forEach(t),feo=i(S),yg=n(S,"LI",{});var x6e=s(yg);Dte=n(x6e,"STRONG",{});var tHr=s(Dte);geo=r(tHr,"bert-generation"),tHr.forEach(t),heo=r(x6e," \u2014 "),hR=n(x6e,"A",{href:!0});var aHr=s(hR);ueo=r(aHr,"BertGenerationTokenizer"),aHr.forEach(t),peo=r(x6e," (Bert Generation model)"),x6e.forEach(t),_eo=i(S),Lg=n(S,"LI",{});var $6e=s(Lg);Gte=n($6e,"STRONG",{});var nHr=s(Gte);beo=r(nHr,"bert-japanese"),nHr.forEach(t),veo=r($6e," \u2014 "),uR=n($6e,"A",{href:!0});var sHr=s(uR);Feo=r(sHr,"BertJapaneseTokenizer"),sHr.forEach(t),Teo=r($6e," (BertJapanese model)"),$6e.forEach(t),Meo=i(S),xg=n(S,"LI",{});var k6e=s(xg);Ote=n(k6e,"STRONG",{});var lHr=s(Ote);Eeo=r(lHr,"bertweet"),lHr.forEach(t),Ceo=r(k6e," \u2014 "),pR=n(k6e,"A",{href:!0});var iHr=s(pR);weo=r(iHr,"BertweetTokenizer"),iHr.forEach(t),Aeo=r(k6e," (Bertweet model)"),k6e.forEach(t),yeo=i(S),In=n(S,"LI",{});var Ux=s(In);Vte=n(Ux,"STRONG",{});var dHr=s(Vte);Leo=r(dHr,"big_bird"),dHr.forEach(t),xeo=r(Ux," \u2014 "),_R=n(Ux,"A",{href:!0});var cHr=s(_R);$eo=r(cHr,"BigBirdTokenizer"),cHr.forEach(t),keo=r(Ux," or "),bR=n(Ux,"A",{href:!0});var mHr=s(bR);Seo=r(mHr,"BigBirdTokenizerFast"),mHr.forEach(t),Reo=r(Ux," (BigBird model)"),Ux.forEach(t),Peo=i(S),Nn=n(S,"LI",{});var Jx=s(Nn);Xte=n(Jx,"STRONG",{});var fHr=s(Xte);Beo=r(fHr,"bigbird_pegasus"),fHr.forEach(t),Ieo=r(Jx," \u2014 "),vR=n(Jx,"A",{href:!0});var gHr=s(vR);Neo=r(gHr,"PegasusTokenizer"),gHr.forEach(t),qeo=r(Jx," or "),FR=n(Jx,"A",{href:!0});var hHr=s(FR);jeo=r(hHr,"PegasusTokenizerFast"),hHr.forEach(t),Deo=r(Jx," (BigBirdPegasus model)"),Jx.forEach(t),Geo=i(S),qn=n(S,"LI",{});var Yx=s(qn);zte=n(Yx,"STRONG",{});var uHr=s(zte);Oeo=r(uHr,"blenderbot"),uHr.forEach(t),Veo=r(Yx," \u2014 "),TR=n(Yx,"A",{href:!0});var pHr=s(TR);Xeo=r(pHr,"BlenderbotTokenizer"),pHr.forEach(t),zeo=r(Yx," or "),MR=n(Yx,"A",{href:!0});var _Hr=s(MR);Weo=r(_Hr,"BlenderbotTokenizerFast"),_Hr.forEach(t),Qeo=r(Yx," (Blenderbot model)"),Yx.forEach(t),Heo=i(S),$g=n(S,"LI",{});var S6e=s($g);Wte=n(S6e,"STRONG",{});var bHr=s(Wte);Ueo=r(bHr,"blenderbot-small"),bHr.forEach(t),Jeo=r(S6e," \u2014 "),ER=n(S6e,"A",{href:!0});var vHr=s(ER);Yeo=r(vHr,"BlenderbotSmallTokenizer"),vHr.forEach(t),Keo=r(S6e," (BlenderbotSmall model)"),S6e.forEach(t),Zeo=i(S),kg=n(S,"LI",{});var R6e=s(kg);Qte=n(R6e,"STRONG",{});var FHr=s(Qte);eoo=r(FHr,"byt5"),FHr.forEach(t),ooo=r(R6e," \u2014 "),CR=n(R6e,"A",{href:!0});var THr=s(CR);roo=r(THr,"ByT5Tokenizer"),THr.forEach(t),too=r(R6e," (ByT5 model)"),R6e.forEach(t),aoo=i(S),jn=n(S,"LI",{});var Kx=s(jn);Hte=n(Kx,"STRONG",{});var MHr=s(Hte);noo=r(MHr,"camembert"),MHr.forEach(t),soo=r(Kx," \u2014 "),wR=n(Kx,"A",{href:!0});var EHr=s(wR);loo=r(EHr,"CamembertTokenizer"),EHr.forEach(t),ioo=r(Kx," or "),AR=n(Kx,"A",{href:!0});var CHr=s(AR);doo=r(CHr,"CamembertTokenizerFast"),CHr.forEach(t),coo=r(Kx," (CamemBERT model)"),Kx.forEach(t),moo=i(S),Sg=n(S,"LI",{});var P6e=s(Sg);Ute=n(P6e,"STRONG",{});var wHr=s(Ute);foo=r(wHr,"canine"),wHr.forEach(t),goo=r(P6e," \u2014 "),yR=n(P6e,"A",{href:!0});var AHr=s(yR);hoo=r(AHr,"CanineTokenizer"),AHr.forEach(t),uoo=r(P6e," (Canine model)"),P6e.forEach(t),poo=i(S),Dn=n(S,"LI",{});var Zx=s(Dn);Jte=n(Zx,"STRONG",{});var yHr=s(Jte);_oo=r(yHr,"clip"),yHr.forEach(t),boo=r(Zx," \u2014 "),LR=n(Zx,"A",{href:!0});var LHr=s(LR);voo=r(LHr,"CLIPTokenizer"),LHr.forEach(t),Foo=r(Zx," or "),xR=n(Zx,"A",{href:!0});var xHr=s(xR);Too=r(xHr,"CLIPTokenizerFast"),xHr.forEach(t),Moo=r(Zx," (CLIP model)"),Zx.forEach(t),Eoo=i(S),Gn=n(S,"LI",{});var e$=s(Gn);Yte=n(e$,"STRONG",{});var $Hr=s(Yte);Coo=r($Hr,"convbert"),$Hr.forEach(t),woo=r(e$," \u2014 "),$R=n(e$,"A",{href:!0});var kHr=s($R);Aoo=r(kHr,"ConvBertTokenizer"),kHr.forEach(t),yoo=r(e$," or "),kR=n(e$,"A",{href:!0});var SHr=s(kR);Loo=r(SHr,"ConvBertTokenizerFast"),SHr.forEach(t),xoo=r(e$," (ConvBERT model)"),e$.forEach(t),$oo=i(S),On=n(S,"LI",{});var o$=s(On);Kte=n(o$,"STRONG",{});var RHr=s(Kte);koo=r(RHr,"cpm"),RHr.forEach(t),Soo=r(o$," \u2014 "),SR=n(o$,"A",{href:!0});var PHr=s(SR);Roo=r(PHr,"CpmTokenizer"),PHr.forEach(t),Poo=r(o$," or "),RR=n(o$,"A",{href:!0});var BHr=s(RR);Boo=r(BHr,"CpmTokenizerFast"),BHr.forEach(t),Ioo=r(o$," (CPM model)"),o$.forEach(t),Noo=i(S),Rg=n(S,"LI",{});var B6e=s(Rg);Zte=n(B6e,"STRONG",{});var IHr=s(Zte);qoo=r(IHr,"ctrl"),IHr.forEach(t),joo=r(B6e," \u2014 "),PR=n(B6e,"A",{href:!0});var NHr=s(PR);Doo=r(NHr,"CTRLTokenizer"),NHr.forEach(t),Goo=r(B6e," (CTRL model)"),B6e.forEach(t),Ooo=i(S),Vn=n(S,"LI",{});var r$=s(Vn);eae=n(r$,"STRONG",{});var qHr=s(eae);Voo=r(qHr,"data2vec-text"),qHr.forEach(t),Xoo=r(r$," \u2014 "),BR=n(r$,"A",{href:!0});var jHr=s(BR);zoo=r(jHr,"RobertaTokenizer"),jHr.forEach(t),Woo=r(r$," or "),IR=n(r$,"A",{href:!0});var DHr=s(IR);Qoo=r(DHr,"RobertaTokenizerFast"),DHr.forEach(t),Hoo=r(r$," (Data2VecText model)"),r$.forEach(t),Uoo=i(S),Xn=n(S,"LI",{});var t$=s(Xn);oae=n(t$,"STRONG",{});var GHr=s(oae);Joo=r(GHr,"deberta"),GHr.forEach(t),Yoo=r(t$," \u2014 "),NR=n(t$,"A",{href:!0});var OHr=s(NR);Koo=r(OHr,"DebertaTokenizer"),OHr.forEach(t),Zoo=r(t$," or "),qR=n(t$,"A",{href:!0});var VHr=s(qR);ero=r(VHr,"DebertaTokenizerFast"),VHr.forEach(t),oro=r(t$," (DeBERTa model)"),t$.forEach(t),rro=i(S),zn=n(S,"LI",{});var a$=s(zn);rae=n(a$,"STRONG",{});var XHr=s(rae);tro=r(XHr,"deberta-v2"),XHr.forEach(t),aro=r(a$," \u2014 "),jR=n(a$,"A",{href:!0});var zHr=s(jR);nro=r(zHr,"DebertaV2Tokenizer"),zHr.forEach(t),sro=r(a$," or "),DR=n(a$,"A",{href:!0});var WHr=s(DR);lro=r(WHr,"DebertaV2TokenizerFast"),WHr.forEach(t),iro=r(a$," (DeBERTa-v2 model)"),a$.forEach(t),dro=i(S),Wn=n(S,"LI",{});var n$=s(Wn);tae=n(n$,"STRONG",{});var QHr=s(tae);cro=r(QHr,"distilbert"),QHr.forEach(t),mro=r(n$," \u2014 "),GR=n(n$,"A",{href:!0});var HHr=s(GR);fro=r(HHr,"DistilBertTokenizer"),HHr.forEach(t),gro=r(n$," or "),OR=n(n$,"A",{href:!0});var UHr=s(OR);hro=r(UHr,"DistilBertTokenizerFast"),UHr.forEach(t),uro=r(n$," (DistilBERT model)"),n$.forEach(t),pro=i(S),Qn=n(S,"LI",{});var s$=s(Qn);aae=n(s$,"STRONG",{});var JHr=s(aae);_ro=r(JHr,"dpr"),JHr.forEach(t),bro=r(s$," \u2014 "),VR=n(s$,"A",{href:!0});var YHr=s(VR);vro=r(YHr,"DPRQuestionEncoderTokenizer"),YHr.forEach(t),Fro=r(s$," or "),XR=n(s$,"A",{href:!0});var KHr=s(XR);Tro=r(KHr,"DPRQuestionEncoderTokenizerFast"),KHr.forEach(t),Mro=r(s$," (DPR model)"),s$.forEach(t),Ero=i(S),Hn=n(S,"LI",{});var l$=s(Hn);nae=n(l$,"STRONG",{});var ZHr=s(nae);Cro=r(ZHr,"electra"),ZHr.forEach(t),wro=r(l$," \u2014 "),zR=n(l$,"A",{href:!0});var eUr=s(zR);Aro=r(eUr,"ElectraTokenizer"),eUr.forEach(t),yro=r(l$," or "),WR=n(l$,"A",{href:!0});var oUr=s(WR);Lro=r(oUr,"ElectraTokenizerFast"),oUr.forEach(t),xro=r(l$," (ELECTRA model)"),l$.forEach(t),$ro=i(S),Pg=n(S,"LI",{});var I6e=s(Pg);sae=n(I6e,"STRONG",{});var rUr=s(sae);kro=r(rUr,"flaubert"),rUr.forEach(t),Sro=r(I6e," \u2014 "),QR=n(I6e,"A",{href:!0});var tUr=s(QR);Rro=r(tUr,"FlaubertTokenizer"),tUr.forEach(t),Pro=r(I6e," (FlauBERT model)"),I6e.forEach(t),Bro=i(S),Un=n(S,"LI",{});var i$=s(Un);lae=n(i$,"STRONG",{});var aUr=s(lae);Iro=r(aUr,"fnet"),aUr.forEach(t),Nro=r(i$," \u2014 "),HR=n(i$,"A",{href:!0});var nUr=s(HR);qro=r(nUr,"FNetTokenizer"),nUr.forEach(t),jro=r(i$," or "),UR=n(i$,"A",{href:!0});var sUr=s(UR);Dro=r(sUr,"FNetTokenizerFast"),sUr.forEach(t),Gro=r(i$," (FNet model)"),i$.forEach(t),Oro=i(S),Bg=n(S,"LI",{});var N6e=s(Bg);iae=n(N6e,"STRONG",{});var lUr=s(iae);Vro=r(lUr,"fsmt"),lUr.forEach(t),Xro=r(N6e," \u2014 "),JR=n(N6e,"A",{href:!0});var iUr=s(JR);zro=r(iUr,"FSMTTokenizer"),iUr.forEach(t),Wro=r(N6e," (FairSeq Machine-Translation model)"),N6e.forEach(t),Qro=i(S),Jn=n(S,"LI",{});var d$=s(Jn);dae=n(d$,"STRONG",{});var dUr=s(dae);Hro=r(dUr,"funnel"),dUr.forEach(t),Uro=r(d$," \u2014 "),YR=n(d$,"A",{href:!0});var cUr=s(YR);Jro=r(cUr,"FunnelTokenizer"),cUr.forEach(t),Yro=r(d$," or "),KR=n(d$,"A",{href:!0});var mUr=s(KR);Kro=r(mUr,"FunnelTokenizerFast"),mUr.forEach(t),Zro=r(d$," (Funnel Transformer model)"),d$.forEach(t),eto=i(S),Yn=n(S,"LI",{});var c$=s(Yn);cae=n(c$,"STRONG",{});var fUr=s(cae);oto=r(fUr,"gpt2"),fUr.forEach(t),rto=r(c$," \u2014 "),ZR=n(c$,"A",{href:!0});var gUr=s(ZR);tto=r(gUr,"GPT2Tokenizer"),gUr.forEach(t),ato=r(c$," or "),eP=n(c$,"A",{href:!0});var hUr=s(eP);nto=r(hUr,"GPT2TokenizerFast"),hUr.forEach(t),sto=r(c$," (OpenAI GPT-2 model)"),c$.forEach(t),lto=i(S),Kn=n(S,"LI",{});var m$=s(Kn);mae=n(m$,"STRONG",{});var uUr=s(mae);ito=r(uUr,"gpt_neo"),uUr.forEach(t),dto=r(m$," \u2014 "),oP=n(m$,"A",{href:!0});var pUr=s(oP);cto=r(pUr,"GPT2Tokenizer"),pUr.forEach(t),mto=r(m$," or "),rP=n(m$,"A",{href:!0});var _Ur=s(rP);fto=r(_Ur,"GPT2TokenizerFast"),_Ur.forEach(t),gto=r(m$," (GPT Neo model)"),m$.forEach(t),hto=i(S),Ig=n(S,"LI",{});var q6e=s(Ig);fae=n(q6e,"STRONG",{});var bUr=s(fae);uto=r(bUr,"gpt_neox"),bUr.forEach(t),pto=r(q6e," \u2014 "),tP=n(q6e,"A",{href:!0});var vUr=s(tP);_to=r(vUr,"GPTNeoXTokenizerFast"),vUr.forEach(t),bto=r(q6e," (GPT NeoX model)"),q6e.forEach(t),vto=i(S),Zn=n(S,"LI",{});var f$=s(Zn);gae=n(f$,"STRONG",{});var FUr=s(gae);Fto=r(FUr,"gptj"),FUr.forEach(t),Tto=r(f$," \u2014 "),aP=n(f$,"A",{href:!0});var TUr=s(aP);Mto=r(TUr,"GPT2Tokenizer"),TUr.forEach(t),Eto=r(f$," or "),nP=n(f$,"A",{href:!0});var MUr=s(nP);Cto=r(MUr,"GPT2TokenizerFast"),MUr.forEach(t),wto=r(f$," (GPT-J model)"),f$.forEach(t),Ato=i(S),es=n(S,"LI",{});var g$=s(es);hae=n(g$,"STRONG",{});var EUr=s(hae);yto=r(EUr,"herbert"),EUr.forEach(t),Lto=r(g$," \u2014 "),sP=n(g$,"A",{href:!0});var CUr=s(sP);xto=r(CUr,"HerbertTokenizer"),CUr.forEach(t),$to=r(g$," or "),lP=n(g$,"A",{href:!0});var wUr=s(lP);kto=r(wUr,"HerbertTokenizerFast"),wUr.forEach(t),Sto=r(g$," (HerBERT model)"),g$.forEach(t),Rto=i(S),Ng=n(S,"LI",{});var j6e=s(Ng);uae=n(j6e,"STRONG",{});var AUr=s(uae);Pto=r(AUr,"hubert"),AUr.forEach(t),Bto=r(j6e," \u2014 "),iP=n(j6e,"A",{href:!0});var yUr=s(iP);Ito=r(yUr,"Wav2Vec2CTCTokenizer"),yUr.forEach(t),Nto=r(j6e," (Hubert model)"),j6e.forEach(t),qto=i(S),os=n(S,"LI",{});var h$=s(os);pae=n(h$,"STRONG",{});var LUr=s(pae);jto=r(LUr,"ibert"),LUr.forEach(t),Dto=r(h$," \u2014 "),dP=n(h$,"A",{href:!0});var xUr=s(dP);Gto=r(xUr,"RobertaTokenizer"),xUr.forEach(t),Oto=r(h$," or "),cP=n(h$,"A",{href:!0});var $Ur=s(cP);Vto=r($Ur,"RobertaTokenizerFast"),$Ur.forEach(t),Xto=r(h$," (I-BERT model)"),h$.forEach(t),zto=i(S),rs=n(S,"LI",{});var u$=s(rs);_ae=n(u$,"STRONG",{});var kUr=s(_ae);Wto=r(kUr,"layoutlm"),kUr.forEach(t),Qto=r(u$," \u2014 "),mP=n(u$,"A",{href:!0});var SUr=s(mP);Hto=r(SUr,"LayoutLMTokenizer"),SUr.forEach(t),Uto=r(u$," or "),fP=n(u$,"A",{href:!0});var RUr=s(fP);Jto=r(RUr,"LayoutLMTokenizerFast"),RUr.forEach(t),Yto=r(u$," (LayoutLM model)"),u$.forEach(t),Kto=i(S),ts=n(S,"LI",{});var p$=s(ts);bae=n(p$,"STRONG",{});var PUr=s(bae);Zto=r(PUr,"layoutlmv2"),PUr.forEach(t),eao=r(p$," \u2014 "),gP=n(p$,"A",{href:!0});var BUr=s(gP);oao=r(BUr,"LayoutLMv2Tokenizer"),BUr.forEach(t),rao=r(p$," or "),hP=n(p$,"A",{href:!0});var IUr=s(hP);tao=r(IUr,"LayoutLMv2TokenizerFast"),IUr.forEach(t),aao=r(p$," (LayoutLMv2 model)"),p$.forEach(t),nao=i(S),as=n(S,"LI",{});var _$=s(as);vae=n(_$,"STRONG",{});var NUr=s(vae);sao=r(NUr,"layoutlmv3"),NUr.forEach(t),lao=r(_$," \u2014 "),uP=n(_$,"A",{href:!0});var qUr=s(uP);iao=r(qUr,"LayoutLMv3Tokenizer"),qUr.forEach(t),dao=r(_$," or "),pP=n(_$,"A",{href:!0});var jUr=s(pP);cao=r(jUr,"LayoutLMv3TokenizerFast"),jUr.forEach(t),mao=r(_$," (LayoutLMv3 model)"),_$.forEach(t),fao=i(S),ns=n(S,"LI",{});var b$=s(ns);Fae=n(b$,"STRONG",{});var DUr=s(Fae);gao=r(DUr,"layoutxlm"),DUr.forEach(t),hao=r(b$," \u2014 "),_P=n(b$,"A",{href:!0});var GUr=s(_P);uao=r(GUr,"LayoutXLMTokenizer"),GUr.forEach(t),pao=r(b$," or "),bP=n(b$,"A",{href:!0});var OUr=s(bP);_ao=r(OUr,"LayoutXLMTokenizerFast"),OUr.forEach(t),bao=r(b$," (LayoutXLM model)"),b$.forEach(t),vao=i(S),ss=n(S,"LI",{});var v$=s(ss);Tae=n(v$,"STRONG",{});var VUr=s(Tae);Fao=r(VUr,"led"),VUr.forEach(t),Tao=r(v$," \u2014 "),vP=n(v$,"A",{href:!0});var XUr=s(vP);Mao=r(XUr,"LEDTokenizer"),XUr.forEach(t),Eao=r(v$," or "),FP=n(v$,"A",{href:!0});var zUr=s(FP);Cao=r(zUr,"LEDTokenizerFast"),zUr.forEach(t),wao=r(v$," (LED model)"),v$.forEach(t),Aao=i(S),ls=n(S,"LI",{});var F$=s(ls);Mae=n(F$,"STRONG",{});var WUr=s(Mae);yao=r(WUr,"longformer"),WUr.forEach(t),Lao=r(F$," \u2014 "),TP=n(F$,"A",{href:!0});var QUr=s(TP);xao=r(QUr,"LongformerTokenizer"),QUr.forEach(t),$ao=r(F$," or "),MP=n(F$,"A",{href:!0});var HUr=s(MP);kao=r(HUr,"LongformerTokenizerFast"),HUr.forEach(t),Sao=r(F$," (Longformer model)"),F$.forEach(t),Rao=i(S),qg=n(S,"LI",{});var D6e=s(qg);Eae=n(D6e,"STRONG",{});var UUr=s(Eae);Pao=r(UUr,"luke"),UUr.forEach(t),Bao=r(D6e," \u2014 "),EP=n(D6e,"A",{href:!0});var JUr=s(EP);Iao=r(JUr,"LukeTokenizer"),JUr.forEach(t),Nao=r(D6e," (LUKE model)"),D6e.forEach(t),qao=i(S),is=n(S,"LI",{});var T$=s(is);Cae=n(T$,"STRONG",{});var YUr=s(Cae);jao=r(YUr,"lxmert"),YUr.forEach(t),Dao=r(T$," \u2014 "),CP=n(T$,"A",{href:!0});var KUr=s(CP);Gao=r(KUr,"LxmertTokenizer"),KUr.forEach(t),Oao=r(T$," or "),wP=n(T$,"A",{href:!0});var ZUr=s(wP);Vao=r(ZUr,"LxmertTokenizerFast"),ZUr.forEach(t),Xao=r(T$," (LXMERT model)"),T$.forEach(t),zao=i(S),jg=n(S,"LI",{});var G6e=s(jg);wae=n(G6e,"STRONG",{});var eJr=s(wae);Wao=r(eJr,"m2m_100"),eJr.forEach(t),Qao=r(G6e," \u2014 "),AP=n(G6e,"A",{href:!0});var oJr=s(AP);Hao=r(oJr,"M2M100Tokenizer"),oJr.forEach(t),Uao=r(G6e," (M2M100 model)"),G6e.forEach(t),Jao=i(S),Dg=n(S,"LI",{});var O6e=s(Dg);Aae=n(O6e,"STRONG",{});var rJr=s(Aae);Yao=r(rJr,"marian"),rJr.forEach(t),Kao=r(O6e," \u2014 "),yP=n(O6e,"A",{href:!0});var tJr=s(yP);Zao=r(tJr,"MarianTokenizer"),tJr.forEach(t),eno=r(O6e," (Marian model)"),O6e.forEach(t),ono=i(S),ds=n(S,"LI",{});var M$=s(ds);yae=n(M$,"STRONG",{});var aJr=s(yae);rno=r(aJr,"mbart"),aJr.forEach(t),tno=r(M$," \u2014 "),LP=n(M$,"A",{href:!0});var nJr=s(LP);ano=r(nJr,"MBartTokenizer"),nJr.forEach(t),nno=r(M$," or "),xP=n(M$,"A",{href:!0});var sJr=s(xP);sno=r(sJr,"MBartTokenizerFast"),sJr.forEach(t),lno=r(M$," (mBART model)"),M$.forEach(t),ino=i(S),cs=n(S,"LI",{});var E$=s(cs);Lae=n(E$,"STRONG",{});var lJr=s(Lae);dno=r(lJr,"mbart50"),lJr.forEach(t),cno=r(E$," \u2014 "),$P=n(E$,"A",{href:!0});var iJr=s($P);mno=r(iJr,"MBart50Tokenizer"),iJr.forEach(t),fno=r(E$," or "),kP=n(E$,"A",{href:!0});var dJr=s(kP);gno=r(dJr,"MBart50TokenizerFast"),dJr.forEach(t),hno=r(E$," (mBART-50 model)"),E$.forEach(t),uno=i(S),ms=n(S,"LI",{});var C$=s(ms);xae=n(C$,"STRONG",{});var cJr=s(xae);pno=r(cJr,"megatron-bert"),cJr.forEach(t),_no=r(C$," \u2014 "),SP=n(C$,"A",{href:!0});var mJr=s(SP);bno=r(mJr,"BertTokenizer"),mJr.forEach(t),vno=r(C$," or "),RP=n(C$,"A",{href:!0});var fJr=s(RP);Fno=r(fJr,"BertTokenizerFast"),fJr.forEach(t),Tno=r(C$," (MegatronBert model)"),C$.forEach(t),Mno=i(S),Gg=n(S,"LI",{});var V6e=s(Gg);$ae=n(V6e,"STRONG",{});var gJr=s($ae);Eno=r(gJr,"mluke"),gJr.forEach(t),Cno=r(V6e," \u2014 "),PP=n(V6e,"A",{href:!0});var hJr=s(PP);wno=r(hJr,"MLukeTokenizer"),hJr.forEach(t),Ano=r(V6e," (mLUKE model)"),V6e.forEach(t),yno=i(S),fs=n(S,"LI",{});var w$=s(fs);kae=n(w$,"STRONG",{});var uJr=s(kae);Lno=r(uJr,"mobilebert"),uJr.forEach(t),xno=r(w$," \u2014 "),BP=n(w$,"A",{href:!0});var pJr=s(BP);$no=r(pJr,"MobileBertTokenizer"),pJr.forEach(t),kno=r(w$," or "),IP=n(w$,"A",{href:!0});var _Jr=s(IP);Sno=r(_Jr,"MobileBertTokenizerFast"),_Jr.forEach(t),Rno=r(w$," (MobileBERT model)"),w$.forEach(t),Pno=i(S),gs=n(S,"LI",{});var A$=s(gs);Sae=n(A$,"STRONG",{});var bJr=s(Sae);Bno=r(bJr,"mpnet"),bJr.forEach(t),Ino=r(A$," \u2014 "),NP=n(A$,"A",{href:!0});var vJr=s(NP);Nno=r(vJr,"MPNetTokenizer"),vJr.forEach(t),qno=r(A$," or "),qP=n(A$,"A",{href:!0});var FJr=s(qP);jno=r(FJr,"MPNetTokenizerFast"),FJr.forEach(t),Dno=r(A$," (MPNet model)"),A$.forEach(t),Gno=i(S),hs=n(S,"LI",{});var y$=s(hs);Rae=n(y$,"STRONG",{});var TJr=s(Rae);Ono=r(TJr,"mt5"),TJr.forEach(t),Vno=r(y$," \u2014 "),jP=n(y$,"A",{href:!0});var MJr=s(jP);Xno=r(MJr,"MT5Tokenizer"),MJr.forEach(t),zno=r(y$," or "),DP=n(y$,"A",{href:!0});var EJr=s(DP);Wno=r(EJr,"MT5TokenizerFast"),EJr.forEach(t),Qno=r(y$," (mT5 model)"),y$.forEach(t),Hno=i(S),us=n(S,"LI",{});var L$=s(us);Pae=n(L$,"STRONG",{});var CJr=s(Pae);Uno=r(CJr,"nystromformer"),CJr.forEach(t),Jno=r(L$," \u2014 "),GP=n(L$,"A",{href:!0});var wJr=s(GP);Yno=r(wJr,"AlbertTokenizer"),wJr.forEach(t),Kno=r(L$," or "),OP=n(L$,"A",{href:!0});var AJr=s(OP);Zno=r(AJr,"AlbertTokenizerFast"),AJr.forEach(t),eso=r(L$," (Nystromformer model)"),L$.forEach(t),oso=i(S),ps=n(S,"LI",{});var x$=s(ps);Bae=n(x$,"STRONG",{});var yJr=s(Bae);rso=r(yJr,"openai-gpt"),yJr.forEach(t),tso=r(x$," \u2014 "),VP=n(x$,"A",{href:!0});var LJr=s(VP);aso=r(LJr,"OpenAIGPTTokenizer"),LJr.forEach(t),nso=r(x$," or "),XP=n(x$,"A",{href:!0});var xJr=s(XP);sso=r(xJr,"OpenAIGPTTokenizerFast"),xJr.forEach(t),lso=r(x$," (OpenAI GPT model)"),x$.forEach(t),iso=i(S),Og=n(S,"LI",{});var X6e=s(Og);Iae=n(X6e,"STRONG",{});var $Jr=s(Iae);dso=r($Jr,"opt"),$Jr.forEach(t),cso=r(X6e," \u2014 "),zP=n(X6e,"A",{href:!0});var kJr=s(zP);mso=r(kJr,"GPT2Tokenizer"),kJr.forEach(t),fso=r(X6e," (OPT model)"),X6e.forEach(t),gso=i(S),_s=n(S,"LI",{});var $$=s(_s);Nae=n($$,"STRONG",{});var SJr=s(Nae);hso=r(SJr,"pegasus"),SJr.forEach(t),uso=r($$," \u2014 "),WP=n($$,"A",{href:!0});var RJr=s(WP);pso=r(RJr,"PegasusTokenizer"),RJr.forEach(t),_so=r($$," or "),QP=n($$,"A",{href:!0});var PJr=s(QP);bso=r(PJr,"PegasusTokenizerFast"),PJr.forEach(t),vso=r($$," (Pegasus model)"),$$.forEach(t),Fso=i(S),Vg=n(S,"LI",{});var z6e=s(Vg);qae=n(z6e,"STRONG",{});var BJr=s(qae);Tso=r(BJr,"perceiver"),BJr.forEach(t),Mso=r(z6e," \u2014 "),HP=n(z6e,"A",{href:!0});var IJr=s(HP);Eso=r(IJr,"PerceiverTokenizer"),IJr.forEach(t),Cso=r(z6e," (Perceiver model)"),z6e.forEach(t),wso=i(S),Xg=n(S,"LI",{});var W6e=s(Xg);jae=n(W6e,"STRONG",{});var NJr=s(jae);Aso=r(NJr,"phobert"),NJr.forEach(t),yso=r(W6e," \u2014 "),UP=n(W6e,"A",{href:!0});var qJr=s(UP);Lso=r(qJr,"PhobertTokenizer"),qJr.forEach(t),xso=r(W6e," (PhoBERT model)"),W6e.forEach(t),$so=i(S),zg=n(S,"LI",{});var Q6e=s(zg);Dae=n(Q6e,"STRONG",{});var jJr=s(Dae);kso=r(jJr,"plbart"),jJr.forEach(t),Sso=r(Q6e," \u2014 "),JP=n(Q6e,"A",{href:!0});var DJr=s(JP);Rso=r(DJr,"PLBartTokenizer"),DJr.forEach(t),Pso=r(Q6e," (PLBart model)"),Q6e.forEach(t),Bso=i(S),Wg=n(S,"LI",{});var H6e=s(Wg);Gae=n(H6e,"STRONG",{});var GJr=s(Gae);Iso=r(GJr,"prophetnet"),GJr.forEach(t),Nso=r(H6e," \u2014 "),YP=n(H6e,"A",{href:!0});var OJr=s(YP);qso=r(OJr,"ProphetNetTokenizer"),OJr.forEach(t),jso=r(H6e," (ProphetNet model)"),H6e.forEach(t),Dso=i(S),bs=n(S,"LI",{});var k$=s(bs);Oae=n(k$,"STRONG",{});var VJr=s(Oae);Gso=r(VJr,"qdqbert"),VJr.forEach(t),Oso=r(k$," \u2014 "),KP=n(k$,"A",{href:!0});var XJr=s(KP);Vso=r(XJr,"BertTokenizer"),XJr.forEach(t),Xso=r(k$," or "),ZP=n(k$,"A",{href:!0});var zJr=s(ZP);zso=r(zJr,"BertTokenizerFast"),zJr.forEach(t),Wso=r(k$," (QDQBert model)"),k$.forEach(t),Qso=i(S),Qg=n(S,"LI",{});var U6e=s(Qg);Vae=n(U6e,"STRONG",{});var WJr=s(Vae);Hso=r(WJr,"rag"),WJr.forEach(t),Uso=r(U6e," \u2014 "),eB=n(U6e,"A",{href:!0});var QJr=s(eB);Jso=r(QJr,"RagTokenizer"),QJr.forEach(t),Yso=r(U6e," (RAG model)"),U6e.forEach(t),Kso=i(S),vs=n(S,"LI",{});var S$=s(vs);Xae=n(S$,"STRONG",{});var HJr=s(Xae);Zso=r(HJr,"realm"),HJr.forEach(t),elo=r(S$," \u2014 "),oB=n(S$,"A",{href:!0});var UJr=s(oB);olo=r(UJr,"RealmTokenizer"),UJr.forEach(t),rlo=r(S$," or "),rB=n(S$,"A",{href:!0});var JJr=s(rB);tlo=r(JJr,"RealmTokenizerFast"),JJr.forEach(t),alo=r(S$," (Realm model)"),S$.forEach(t),nlo=i(S),Fs=n(S,"LI",{});var R$=s(Fs);zae=n(R$,"STRONG",{});var YJr=s(zae);slo=r(YJr,"reformer"),YJr.forEach(t),llo=r(R$," \u2014 "),tB=n(R$,"A",{href:!0});var KJr=s(tB);ilo=r(KJr,"ReformerTokenizer"),KJr.forEach(t),dlo=r(R$," or "),aB=n(R$,"A",{href:!0});var ZJr=s(aB);clo=r(ZJr,"ReformerTokenizerFast"),ZJr.forEach(t),mlo=r(R$," (Reformer model)"),R$.forEach(t),flo=i(S),Ts=n(S,"LI",{});var P$=s(Ts);Wae=n(P$,"STRONG",{});var eYr=s(Wae);glo=r(eYr,"rembert"),eYr.forEach(t),hlo=r(P$," \u2014 "),nB=n(P$,"A",{href:!0});var oYr=s(nB);ulo=r(oYr,"RemBertTokenizer"),oYr.forEach(t),plo=r(P$," or "),sB=n(P$,"A",{href:!0});var rYr=s(sB);_lo=r(rYr,"RemBertTokenizerFast"),rYr.forEach(t),blo=r(P$," (RemBERT model)"),P$.forEach(t),vlo=i(S),Ms=n(S,"LI",{});var B$=s(Ms);Qae=n(B$,"STRONG",{});var tYr=s(Qae);Flo=r(tYr,"retribert"),tYr.forEach(t),Tlo=r(B$," \u2014 "),lB=n(B$,"A",{href:!0});var aYr=s(lB);Mlo=r(aYr,"RetriBertTokenizer"),aYr.forEach(t),Elo=r(B$," or "),iB=n(B$,"A",{href:!0});var nYr=s(iB);Clo=r(nYr,"RetriBertTokenizerFast"),nYr.forEach(t),wlo=r(B$," (RetriBERT model)"),B$.forEach(t),Alo=i(S),Es=n(S,"LI",{});var I$=s(Es);Hae=n(I$,"STRONG",{});var sYr=s(Hae);ylo=r(sYr,"roberta"),sYr.forEach(t),Llo=r(I$," \u2014 "),dB=n(I$,"A",{href:!0});var lYr=s(dB);xlo=r(lYr,"RobertaTokenizer"),lYr.forEach(t),$lo=r(I$," or "),cB=n(I$,"A",{href:!0});var iYr=s(cB);klo=r(iYr,"RobertaTokenizerFast"),iYr.forEach(t),Slo=r(I$," (RoBERTa model)"),I$.forEach(t),Rlo=i(S),Cs=n(S,"LI",{});var N$=s(Cs);Uae=n(N$,"STRONG",{});var dYr=s(Uae);Plo=r(dYr,"roformer"),dYr.forEach(t),Blo=r(N$," \u2014 "),mB=n(N$,"A",{href:!0});var cYr=s(mB);Ilo=r(cYr,"RoFormerTokenizer"),cYr.forEach(t),Nlo=r(N$," or "),fB=n(N$,"A",{href:!0});var mYr=s(fB);qlo=r(mYr,"RoFormerTokenizerFast"),mYr.forEach(t),jlo=r(N$," (RoFormer model)"),N$.forEach(t),Dlo=i(S),Hg=n(S,"LI",{});var J6e=s(Hg);Jae=n(J6e,"STRONG",{});var fYr=s(Jae);Glo=r(fYr,"speech_to_text"),fYr.forEach(t),Olo=r(J6e," \u2014 "),gB=n(J6e,"A",{href:!0});var gYr=s(gB);Vlo=r(gYr,"Speech2TextTokenizer"),gYr.forEach(t),Xlo=r(J6e," (Speech2Text model)"),J6e.forEach(t),zlo=i(S),Ug=n(S,"LI",{});var Y6e=s(Ug);Yae=n(Y6e,"STRONG",{});var hYr=s(Yae);Wlo=r(hYr,"speech_to_text_2"),hYr.forEach(t),Qlo=r(Y6e," \u2014 "),hB=n(Y6e,"A",{href:!0});var uYr=s(hB);Hlo=r(uYr,"Speech2Text2Tokenizer"),uYr.forEach(t),Ulo=r(Y6e," (Speech2Text2 model)"),Y6e.forEach(t),Jlo=i(S),ws=n(S,"LI",{});var q$=s(ws);Kae=n(q$,"STRONG",{});var pYr=s(Kae);Ylo=r(pYr,"splinter"),pYr.forEach(t),Klo=r(q$," \u2014 "),uB=n(q$,"A",{href:!0});var _Yr=s(uB);Zlo=r(_Yr,"SplinterTokenizer"),_Yr.forEach(t),eio=r(q$," or "),pB=n(q$,"A",{href:!0});var bYr=s(pB);oio=r(bYr,"SplinterTokenizerFast"),bYr.forEach(t),rio=r(q$," (Splinter model)"),q$.forEach(t),tio=i(S),As=n(S,"LI",{});var j$=s(As);Zae=n(j$,"STRONG",{});var vYr=s(Zae);aio=r(vYr,"squeezebert"),vYr.forEach(t),nio=r(j$," \u2014 "),_B=n(j$,"A",{href:!0});var FYr=s(_B);sio=r(FYr,"SqueezeBertTokenizer"),FYr.forEach(t),lio=r(j$," or "),bB=n(j$,"A",{href:!0});var TYr=s(bB);iio=r(TYr,"SqueezeBertTokenizerFast"),TYr.forEach(t),dio=r(j$," (SqueezeBERT model)"),j$.forEach(t),cio=i(S),ys=n(S,"LI",{});var D$=s(ys);ene=n(D$,"STRONG",{});var MYr=s(ene);mio=r(MYr,"t5"),MYr.forEach(t),fio=r(D$," \u2014 "),vB=n(D$,"A",{href:!0});var EYr=s(vB);gio=r(EYr,"T5Tokenizer"),EYr.forEach(t),hio=r(D$," or "),FB=n(D$,"A",{href:!0});var CYr=s(FB);uio=r(CYr,"T5TokenizerFast"),CYr.forEach(t),pio=r(D$," (T5 model)"),D$.forEach(t),_io=i(S),Jg=n(S,"LI",{});var K6e=s(Jg);one=n(K6e,"STRONG",{});var wYr=s(one);bio=r(wYr,"tapas"),wYr.forEach(t),vio=r(K6e," \u2014 "),TB=n(K6e,"A",{href:!0});var AYr=s(TB);Fio=r(AYr,"TapasTokenizer"),AYr.forEach(t),Tio=r(K6e," (TAPAS model)"),K6e.forEach(t),Mio=i(S),Yg=n(S,"LI",{});var Z6e=s(Yg);rne=n(Z6e,"STRONG",{});var yYr=s(rne);Eio=r(yYr,"tapex"),yYr.forEach(t),Cio=r(Z6e," \u2014 "),MB=n(Z6e,"A",{href:!0});var LYr=s(MB);wio=r(LYr,"TapexTokenizer"),LYr.forEach(t),Aio=r(Z6e," (TAPEX model)"),Z6e.forEach(t),yio=i(S),Kg=n(S,"LI",{});var eAe=s(Kg);tne=n(eAe,"STRONG",{});var xYr=s(tne);Lio=r(xYr,"transfo-xl"),xYr.forEach(t),xio=r(eAe," \u2014 "),EB=n(eAe,"A",{href:!0});var $Yr=s(EB);$io=r($Yr,"TransfoXLTokenizer"),$Yr.forEach(t),kio=r(eAe," (Transformer-XL model)"),eAe.forEach(t),Sio=i(S),Ls=n(S,"LI",{});var G$=s(Ls);ane=n(G$,"STRONG",{});var kYr=s(ane);Rio=r(kYr,"visual_bert"),kYr.forEach(t),Pio=r(G$," \u2014 "),CB=n(G$,"A",{href:!0});var SYr=s(CB);Bio=r(SYr,"BertTokenizer"),SYr.forEach(t),Iio=r(G$," or "),wB=n(G$,"A",{href:!0});var RYr=s(wB);Nio=r(RYr,"BertTokenizerFast"),RYr.forEach(t),qio=r(G$," (VisualBert model)"),G$.forEach(t),jio=i(S),Zg=n(S,"LI",{});var oAe=s(Zg);nne=n(oAe,"STRONG",{});var PYr=s(nne);Dio=r(PYr,"wav2vec2"),PYr.forEach(t),Gio=r(oAe," \u2014 "),AB=n(oAe,"A",{href:!0});var BYr=s(AB);Oio=r(BYr,"Wav2Vec2CTCTokenizer"),BYr.forEach(t),Vio=r(oAe," (Wav2Vec2 model)"),oAe.forEach(t),Xio=i(S),eh=n(S,"LI",{});var rAe=s(eh);sne=n(rAe,"STRONG",{});var IYr=s(sne);zio=r(IYr,"wav2vec2-conformer"),IYr.forEach(t),Wio=r(rAe," \u2014 "),yB=n(rAe,"A",{href:!0});var NYr=s(yB);Qio=r(NYr,"Wav2Vec2CTCTokenizer"),NYr.forEach(t),Hio=r(rAe," (Wav2Vec2-Conformer model)"),rAe.forEach(t),Uio=i(S),oh=n(S,"LI",{});var tAe=s(oh);lne=n(tAe,"STRONG",{});var qYr=s(lne);Jio=r(qYr,"wav2vec2_phoneme"),qYr.forEach(t),Yio=r(tAe," \u2014 "),LB=n(tAe,"A",{href:!0});var jYr=s(LB);Kio=r(jYr,"Wav2Vec2PhonemeCTCTokenizer"),jYr.forEach(t),Zio=r(tAe," (Wav2Vec2Phoneme model)"),tAe.forEach(t),edo=i(S),xs=n(S,"LI",{});var O$=s(xs);ine=n(O$,"STRONG",{});var DYr=s(ine);odo=r(DYr,"xglm"),DYr.forEach(t),rdo=r(O$," \u2014 "),xB=n(O$,"A",{href:!0});var GYr=s(xB);tdo=r(GYr,"XGLMTokenizer"),GYr.forEach(t),ado=r(O$," or "),$B=n(O$,"A",{href:!0});var OYr=s($B);ndo=r(OYr,"XGLMTokenizerFast"),OYr.forEach(t),sdo=r(O$," (XGLM model)"),O$.forEach(t),ldo=i(S),rh=n(S,"LI",{});var aAe=s(rh);dne=n(aAe,"STRONG",{});var VYr=s(dne);ido=r(VYr,"xlm"),VYr.forEach(t),ddo=r(aAe," \u2014 "),kB=n(aAe,"A",{href:!0});var XYr=s(kB);cdo=r(XYr,"XLMTokenizer"),XYr.forEach(t),mdo=r(aAe," (XLM model)"),aAe.forEach(t),fdo=i(S),th=n(S,"LI",{});var nAe=s(th);cne=n(nAe,"STRONG",{});var zYr=s(cne);gdo=r(zYr,"xlm-prophetnet"),zYr.forEach(t),hdo=r(nAe," \u2014 "),SB=n(nAe,"A",{href:!0});var WYr=s(SB);udo=r(WYr,"XLMProphetNetTokenizer"),WYr.forEach(t),pdo=r(nAe," (XLMProphetNet model)"),nAe.forEach(t),_do=i(S),$s=n(S,"LI",{});var V$=s($s);mne=n(V$,"STRONG",{});var QYr=s(mne);bdo=r(QYr,"xlm-roberta"),QYr.forEach(t),vdo=r(V$," \u2014 "),RB=n(V$,"A",{href:!0});var HYr=s(RB);Fdo=r(HYr,"XLMRobertaTokenizer"),HYr.forEach(t),Tdo=r(V$," or "),PB=n(V$,"A",{href:!0});var UYr=s(PB);Mdo=r(UYr,"XLMRobertaTokenizerFast"),UYr.forEach(t),Edo=r(V$," (XLM-RoBERTa model)"),V$.forEach(t),Cdo=i(S),ks=n(S,"LI",{});var X$=s(ks);fne=n(X$,"STRONG",{});var JYr=s(fne);wdo=r(JYr,"xlm-roberta-xl"),JYr.forEach(t),Ado=r(X$," \u2014 "),BB=n(X$,"A",{href:!0});var YYr=s(BB);ydo=r(YYr,"RobertaTokenizer"),YYr.forEach(t),Ldo=r(X$," or "),IB=n(X$,"A",{href:!0});var KYr=s(IB);xdo=r(KYr,"RobertaTokenizerFast"),KYr.forEach(t),$do=r(X$," (XLM-RoBERTa-XL model)"),X$.forEach(t),kdo=i(S),Ss=n(S,"LI",{});var z$=s(Ss);gne=n(z$,"STRONG",{});var ZYr=s(gne);Sdo=r(ZYr,"xlnet"),ZYr.forEach(t),Rdo=r(z$," \u2014 "),NB=n(z$,"A",{href:!0});var eKr=s(NB);Pdo=r(eKr,"XLNetTokenizer"),eKr.forEach(t),Bdo=r(z$," or "),qB=n(z$,"A",{href:!0});var oKr=s(qB);Ido=r(oKr,"XLNetTokenizerFast"),oKr.forEach(t),Ndo=r(z$," (XLNet model)"),z$.forEach(t),qdo=i(S),Rs=n(S,"LI",{});var W$=s(Rs);hne=n(W$,"STRONG",{});var rKr=s(hne);jdo=r(rKr,"yoso"),rKr.forEach(t),Ddo=r(W$," \u2014 "),jB=n(W$,"A",{href:!0});var tKr=s(jB);Gdo=r(tKr,"AlbertTokenizer"),tKr.forEach(t),Odo=r(W$," or "),DB=n(W$,"A",{href:!0});var aKr=s(DB);Vdo=r(aKr,"AlbertTokenizerFast"),aKr.forEach(t),Xdo=r(W$," (YOSO model)"),W$.forEach(t),S.forEach(t),zdo=i(qs),T(ah.$$.fragment,qs),qs.forEach(t),Wdo=i(Ns),nh=n(Ns,"DIV",{class:!0});var ADe=s(nh);T(zy.$$.fragment,ADe),Qdo=i(ADe),une=n(ADe,"P",{});var nKr=s(une);Hdo=r(nKr,"Register a new tokenizer in this mapping."),nKr.forEach(t),ADe.forEach(t),Ns.forEach(t),yqe=i(m),Mi=n(m,"H2",{class:!0});var yDe=s(Mi);sh=n(yDe,"A",{id:!0,class:!0,href:!0});var sKr=s(sh);pne=n(sKr,"SPAN",{});var lKr=s(pne);T(Wy.$$.fragment,lKr),lKr.forEach(t),sKr.forEach(t),Udo=i(yDe),_ne=n(yDe,"SPAN",{});var iKr=s(_ne);Jdo=r(iKr,"AutoFeatureExtractor"),iKr.forEach(t),yDe.forEach(t),Lqe=i(m),Ao=n(m,"DIV",{class:!0});var js=s(Ao);T(Qy.$$.fragment,js),Ydo=i(js),Hy=n(js,"P",{});var LDe=s(Hy);Kdo=r(LDe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),GB=n(LDe,"A",{href:!0});var dKr=s(GB);Zdo=r(dKr,"AutoFeatureExtractor.from_pretrained()"),dKr.forEach(t),eco=r(LDe," class method."),LDe.forEach(t),oco=i(js),Uy=n(js,"P",{});var xDe=s(Uy);rco=r(xDe,"This class cannot be instantiated directly using "),bne=n(xDe,"CODE",{});var cKr=s(bne);tco=r(cKr,"__init__()"),cKr.forEach(t),aco=r(xDe," (throws an error)."),xDe.forEach(t),nco=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(Jy.$$.fragment,Zt),sco=i(Zt),vne=n(Zt,"P",{});var mKr=s(vne);lco=r(mKr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),mKr.forEach(t),ico=i(Zt),ya=n(Zt,"P",{});var B6=s(ya);dco=r(B6,"The feature extractor class to instantiate is selected based on the "),Fne=n(B6,"CODE",{});var fKr=s(Fne);cco=r(fKr,"model_type"),fKr.forEach(t),mco=r(B6,` property of the config object
(either passed as an argument or loaded from `),Tne=n(B6,"CODE",{});var gKr=s(Tne);fco=r(gKr,"pretrained_model_name_or_path"),gKr.forEach(t),gco=r(B6,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Mne=n(B6,"CODE",{});var hKr=s(Mne);hco=r(hKr,"pretrained_model_name_or_path"),hKr.forEach(t),uco=r(B6,":"),B6.forEach(t),pco=i(Zt),Y=n(Zt,"UL",{});var Z=s(Y);lh=n(Z,"LI",{});var sAe=s(lh);Ene=n(sAe,"STRONG",{});var uKr=s(Ene);_co=r(uKr,"beit"),uKr.forEach(t),bco=r(sAe," \u2014 "),OB=n(sAe,"A",{href:!0});var pKr=s(OB);vco=r(pKr,"BeitFeatureExtractor"),pKr.forEach(t),Fco=r(sAe," (BEiT model)"),sAe.forEach(t),Tco=i(Z),ih=n(Z,"LI",{});var lAe=s(ih);Cne=n(lAe,"STRONG",{});var _Kr=s(Cne);Mco=r(_Kr,"clip"),_Kr.forEach(t),Eco=r(lAe," \u2014 "),VB=n(lAe,"A",{href:!0});var bKr=s(VB);Cco=r(bKr,"CLIPFeatureExtractor"),bKr.forEach(t),wco=r(lAe," (CLIP model)"),lAe.forEach(t),Aco=i(Z),dh=n(Z,"LI",{});var iAe=s(dh);wne=n(iAe,"STRONG",{});var vKr=s(wne);yco=r(vKr,"convnext"),vKr.forEach(t),Lco=r(iAe," \u2014 "),XB=n(iAe,"A",{href:!0});var FKr=s(XB);xco=r(FKr,"ConvNextFeatureExtractor"),FKr.forEach(t),$co=r(iAe," (ConvNext model)"),iAe.forEach(t),kco=i(Z),ch=n(Z,"LI",{});var dAe=s(ch);Ane=n(dAe,"STRONG",{});var TKr=s(Ane);Sco=r(TKr,"cvt"),TKr.forEach(t),Rco=r(dAe," \u2014 "),zB=n(dAe,"A",{href:!0});var MKr=s(zB);Pco=r(MKr,"ConvNextFeatureExtractor"),MKr.forEach(t),Bco=r(dAe," (CvT model)"),dAe.forEach(t),Ico=i(Z),mh=n(Z,"LI",{});var cAe=s(mh);yne=n(cAe,"STRONG",{});var EKr=s(yne);Nco=r(EKr,"data2vec-audio"),EKr.forEach(t),qco=r(cAe," \u2014 "),WB=n(cAe,"A",{href:!0});var CKr=s(WB);jco=r(CKr,"Wav2Vec2FeatureExtractor"),CKr.forEach(t),Dco=r(cAe," (Data2VecAudio model)"),cAe.forEach(t),Gco=i(Z),fh=n(Z,"LI",{});var mAe=s(fh);Lne=n(mAe,"STRONG",{});var wKr=s(Lne);Oco=r(wKr,"data2vec-vision"),wKr.forEach(t),Vco=r(mAe," \u2014 "),QB=n(mAe,"A",{href:!0});var AKr=s(QB);Xco=r(AKr,"BeitFeatureExtractor"),AKr.forEach(t),zco=r(mAe," (Data2VecVision model)"),mAe.forEach(t),Wco=i(Z),gh=n(Z,"LI",{});var fAe=s(gh);xne=n(fAe,"STRONG",{});var yKr=s(xne);Qco=r(yKr,"deit"),yKr.forEach(t),Hco=r(fAe," \u2014 "),HB=n(fAe,"A",{href:!0});var LKr=s(HB);Uco=r(LKr,"DeiTFeatureExtractor"),LKr.forEach(t),Jco=r(fAe," (DeiT model)"),fAe.forEach(t),Yco=i(Z),hh=n(Z,"LI",{});var gAe=s(hh);$ne=n(gAe,"STRONG",{});var xKr=s($ne);Kco=r(xKr,"detr"),xKr.forEach(t),Zco=r(gAe," \u2014 "),UB=n(gAe,"A",{href:!0});var $Kr=s(UB);emo=r($Kr,"DetrFeatureExtractor"),$Kr.forEach(t),omo=r(gAe," (DETR model)"),gAe.forEach(t),rmo=i(Z),uh=n(Z,"LI",{});var hAe=s(uh);kne=n(hAe,"STRONG",{});var kKr=s(kne);tmo=r(kKr,"dpt"),kKr.forEach(t),amo=r(hAe," \u2014 "),JB=n(hAe,"A",{href:!0});var SKr=s(JB);nmo=r(SKr,"DPTFeatureExtractor"),SKr.forEach(t),smo=r(hAe," (DPT model)"),hAe.forEach(t),lmo=i(Z),ph=n(Z,"LI",{});var uAe=s(ph);Sne=n(uAe,"STRONG",{});var RKr=s(Sne);imo=r(RKr,"flava"),RKr.forEach(t),dmo=r(uAe," \u2014 "),YB=n(uAe,"A",{href:!0});var PKr=s(YB);cmo=r(PKr,"FlavaFeatureExtractor"),PKr.forEach(t),mmo=r(uAe," (Flava model)"),uAe.forEach(t),fmo=i(Z),_h=n(Z,"LI",{});var pAe=s(_h);Rne=n(pAe,"STRONG",{});var BKr=s(Rne);gmo=r(BKr,"glpn"),BKr.forEach(t),hmo=r(pAe," \u2014 "),KB=n(pAe,"A",{href:!0});var IKr=s(KB);umo=r(IKr,"GLPNFeatureExtractor"),IKr.forEach(t),pmo=r(pAe," (GLPN model)"),pAe.forEach(t),_mo=i(Z),bh=n(Z,"LI",{});var _Ae=s(bh);Pne=n(_Ae,"STRONG",{});var NKr=s(Pne);bmo=r(NKr,"hubert"),NKr.forEach(t),vmo=r(_Ae," \u2014 "),ZB=n(_Ae,"A",{href:!0});var qKr=s(ZB);Fmo=r(qKr,"Wav2Vec2FeatureExtractor"),qKr.forEach(t),Tmo=r(_Ae," (Hubert model)"),_Ae.forEach(t),Mmo=i(Z),vh=n(Z,"LI",{});var bAe=s(vh);Bne=n(bAe,"STRONG",{});var jKr=s(Bne);Emo=r(jKr,"imagegpt"),jKr.forEach(t),Cmo=r(bAe," \u2014 "),eI=n(bAe,"A",{href:!0});var DKr=s(eI);wmo=r(DKr,"ImageGPTFeatureExtractor"),DKr.forEach(t),Amo=r(bAe," (ImageGPT model)"),bAe.forEach(t),ymo=i(Z),Fh=n(Z,"LI",{});var vAe=s(Fh);Ine=n(vAe,"STRONG",{});var GKr=s(Ine);Lmo=r(GKr,"layoutlmv2"),GKr.forEach(t),xmo=r(vAe," \u2014 "),oI=n(vAe,"A",{href:!0});var OKr=s(oI);$mo=r(OKr,"LayoutLMv2FeatureExtractor"),OKr.forEach(t),kmo=r(vAe," (LayoutLMv2 model)"),vAe.forEach(t),Smo=i(Z),Th=n(Z,"LI",{});var FAe=s(Th);Nne=n(FAe,"STRONG",{});var VKr=s(Nne);Rmo=r(VKr,"layoutlmv3"),VKr.forEach(t),Pmo=r(FAe," \u2014 "),rI=n(FAe,"A",{href:!0});var XKr=s(rI);Bmo=r(XKr,"LayoutLMv3FeatureExtractor"),XKr.forEach(t),Imo=r(FAe," (LayoutLMv3 model)"),FAe.forEach(t),Nmo=i(Z),Mh=n(Z,"LI",{});var TAe=s(Mh);qne=n(TAe,"STRONG",{});var zKr=s(qne);qmo=r(zKr,"maskformer"),zKr.forEach(t),jmo=r(TAe," \u2014 "),tI=n(TAe,"A",{href:!0});var WKr=s(tI);Dmo=r(WKr,"MaskFormerFeatureExtractor"),WKr.forEach(t),Gmo=r(TAe," (MaskFormer model)"),TAe.forEach(t),Omo=i(Z),Eh=n(Z,"LI",{});var MAe=s(Eh);jne=n(MAe,"STRONG",{});var QKr=s(jne);Vmo=r(QKr,"perceiver"),QKr.forEach(t),Xmo=r(MAe," \u2014 "),aI=n(MAe,"A",{href:!0});var HKr=s(aI);zmo=r(HKr,"PerceiverFeatureExtractor"),HKr.forEach(t),Wmo=r(MAe," (Perceiver model)"),MAe.forEach(t),Qmo=i(Z),Ch=n(Z,"LI",{});var EAe=s(Ch);Dne=n(EAe,"STRONG",{});var UKr=s(Dne);Hmo=r(UKr,"poolformer"),UKr.forEach(t),Umo=r(EAe," \u2014 "),nI=n(EAe,"A",{href:!0});var JKr=s(nI);Jmo=r(JKr,"PoolFormerFeatureExtractor"),JKr.forEach(t),Ymo=r(EAe," (PoolFormer model)"),EAe.forEach(t),Kmo=i(Z),wh=n(Z,"LI",{});var CAe=s(wh);Gne=n(CAe,"STRONG",{});var YKr=s(Gne);Zmo=r(YKr,"regnet"),YKr.forEach(t),efo=r(CAe," \u2014 "),sI=n(CAe,"A",{href:!0});var KKr=s(sI);ofo=r(KKr,"ConvNextFeatureExtractor"),KKr.forEach(t),rfo=r(CAe," (RegNet model)"),CAe.forEach(t),tfo=i(Z),Ah=n(Z,"LI",{});var wAe=s(Ah);One=n(wAe,"STRONG",{});var ZKr=s(One);afo=r(ZKr,"resnet"),ZKr.forEach(t),nfo=r(wAe," \u2014 "),lI=n(wAe,"A",{href:!0});var eZr=s(lI);sfo=r(eZr,"ConvNextFeatureExtractor"),eZr.forEach(t),lfo=r(wAe," (ResNet model)"),wAe.forEach(t),ifo=i(Z),yh=n(Z,"LI",{});var AAe=s(yh);Vne=n(AAe,"STRONG",{});var oZr=s(Vne);dfo=r(oZr,"segformer"),oZr.forEach(t),cfo=r(AAe," \u2014 "),iI=n(AAe,"A",{href:!0});var rZr=s(iI);mfo=r(rZr,"SegformerFeatureExtractor"),rZr.forEach(t),ffo=r(AAe," (SegFormer model)"),AAe.forEach(t),gfo=i(Z),Lh=n(Z,"LI",{});var yAe=s(Lh);Xne=n(yAe,"STRONG",{});var tZr=s(Xne);hfo=r(tZr,"speech_to_text"),tZr.forEach(t),ufo=r(yAe," \u2014 "),dI=n(yAe,"A",{href:!0});var aZr=s(dI);pfo=r(aZr,"Speech2TextFeatureExtractor"),aZr.forEach(t),_fo=r(yAe," (Speech2Text model)"),yAe.forEach(t),bfo=i(Z),xh=n(Z,"LI",{});var LAe=s(xh);zne=n(LAe,"STRONG",{});var nZr=s(zne);vfo=r(nZr,"swin"),nZr.forEach(t),Ffo=r(LAe," \u2014 "),cI=n(LAe,"A",{href:!0});var sZr=s(cI);Tfo=r(sZr,"ViTFeatureExtractor"),sZr.forEach(t),Mfo=r(LAe," (Swin model)"),LAe.forEach(t),Efo=i(Z),$h=n(Z,"LI",{});var xAe=s($h);Wne=n(xAe,"STRONG",{});var lZr=s(Wne);Cfo=r(lZr,"van"),lZr.forEach(t),wfo=r(xAe," \u2014 "),mI=n(xAe,"A",{href:!0});var iZr=s(mI);Afo=r(iZr,"ConvNextFeatureExtractor"),iZr.forEach(t),yfo=r(xAe," (VAN model)"),xAe.forEach(t),Lfo=i(Z),kh=n(Z,"LI",{});var $Ae=s(kh);Qne=n($Ae,"STRONG",{});var dZr=s(Qne);xfo=r(dZr,"vit"),dZr.forEach(t),$fo=r($Ae," \u2014 "),fI=n($Ae,"A",{href:!0});var cZr=s(fI);kfo=r(cZr,"ViTFeatureExtractor"),cZr.forEach(t),Sfo=r($Ae," (ViT model)"),$Ae.forEach(t),Rfo=i(Z),Sh=n(Z,"LI",{});var kAe=s(Sh);Hne=n(kAe,"STRONG",{});var mZr=s(Hne);Pfo=r(mZr,"vit_mae"),mZr.forEach(t),Bfo=r(kAe," \u2014 "),gI=n(kAe,"A",{href:!0});var fZr=s(gI);Ifo=r(fZr,"ViTFeatureExtractor"),fZr.forEach(t),Nfo=r(kAe," (ViTMAE model)"),kAe.forEach(t),qfo=i(Z),Rh=n(Z,"LI",{});var SAe=s(Rh);Une=n(SAe,"STRONG",{});var gZr=s(Une);jfo=r(gZr,"wav2vec2"),gZr.forEach(t),Dfo=r(SAe," \u2014 "),hI=n(SAe,"A",{href:!0});var hZr=s(hI);Gfo=r(hZr,"Wav2Vec2FeatureExtractor"),hZr.forEach(t),Ofo=r(SAe," (Wav2Vec2 model)"),SAe.forEach(t),Vfo=i(Z),Ph=n(Z,"LI",{});var RAe=s(Ph);Jne=n(RAe,"STRONG",{});var uZr=s(Jne);Xfo=r(uZr,"wav2vec2-conformer"),uZr.forEach(t),zfo=r(RAe," \u2014 "),uI=n(RAe,"A",{href:!0});var pZr=s(uI);Wfo=r(pZr,"Wav2Vec2FeatureExtractor"),pZr.forEach(t),Qfo=r(RAe," (Wav2Vec2-Conformer model)"),RAe.forEach(t),Hfo=i(Z),Bh=n(Z,"LI",{});var PAe=s(Bh);Yne=n(PAe,"STRONG",{});var _Zr=s(Yne);Ufo=r(_Zr,"yolos"),_Zr.forEach(t),Jfo=r(PAe," \u2014 "),pI=n(PAe,"A",{href:!0});var bZr=s(pI);Yfo=r(bZr,"YolosFeatureExtractor"),bZr.forEach(t),Kfo=r(PAe," (YOLOS model)"),PAe.forEach(t),Z.forEach(t),Zfo=i(Zt),T(Ih.$$.fragment,Zt),ego=i(Zt),T(Nh.$$.fragment,Zt),Zt.forEach(t),ogo=i(js),qh=n(js,"DIV",{class:!0});var $De=s(qh);T(Yy.$$.fragment,$De),rgo=i($De),Kne=n($De,"P",{});var vZr=s(Kne);tgo=r(vZr,"Register a new feature extractor for this class."),vZr.forEach(t),$De.forEach(t),js.forEach(t),xqe=i(m),Ei=n(m,"H2",{class:!0});var kDe=s(Ei);jh=n(kDe,"A",{id:!0,class:!0,href:!0});var FZr=s(jh);Zne=n(FZr,"SPAN",{});var TZr=s(Zne);T(Ky.$$.fragment,TZr),TZr.forEach(t),FZr.forEach(t),ago=i(kDe),ese=n(kDe,"SPAN",{});var MZr=s(ese);ngo=r(MZr,"AutoProcessor"),MZr.forEach(t),kDe.forEach(t),$qe=i(m),yo=n(m,"DIV",{class:!0});var Ds=s(yo);T(Zy.$$.fragment,Ds),sgo=i(Ds),eL=n(Ds,"P",{});var SDe=s(eL);lgo=r(SDe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),_I=n(SDe,"A",{href:!0});var EZr=s(_I);igo=r(EZr,"AutoProcessor.from_pretrained()"),EZr.forEach(t),dgo=r(SDe," class method."),SDe.forEach(t),cgo=i(Ds),oL=n(Ds,"P",{});var RDe=s(oL);mgo=r(RDe,"This class cannot be instantiated directly using "),ose=n(RDe,"CODE",{});var CZr=s(ose);fgo=r(CZr,"__init__()"),CZr.forEach(t),ggo=r(RDe," (throws an error)."),RDe.forEach(t),hgo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(rL.$$.fragment,ea),ugo=i(ea),rse=n(ea,"P",{});var wZr=s(rse);pgo=r(wZr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),wZr.forEach(t),_go=i(ea),Ci=n(ea,"P",{});var CZ=s(Ci);bgo=r(CZ,"The processor class to instantiate is selected based on the "),tse=n(CZ,"CODE",{});var AZr=s(tse);vgo=r(AZr,"model_type"),AZr.forEach(t),Fgo=r(CZ,` property of the config object (either
passed as an argument or loaded from `),ase=n(CZ,"CODE",{});var yZr=s(ase);Tgo=r(yZr,"pretrained_model_name_or_path"),yZr.forEach(t),Mgo=r(CZ," if possible):"),CZ.forEach(t),Ego=i(ea),he=n(ea,"UL",{});var _e=s(he);Dh=n(_e,"LI",{});var BAe=s(Dh);nse=n(BAe,"STRONG",{});var LZr=s(nse);Cgo=r(LZr,"clip"),LZr.forEach(t),wgo=r(BAe," \u2014 "),bI=n(BAe,"A",{href:!0});var xZr=s(bI);Ago=r(xZr,"CLIPProcessor"),xZr.forEach(t),ygo=r(BAe," (CLIP model)"),BAe.forEach(t),Lgo=i(_e),Gh=n(_e,"LI",{});var IAe=s(Gh);sse=n(IAe,"STRONG",{});var $Zr=s(sse);xgo=r($Zr,"flava"),$Zr.forEach(t),$go=r(IAe," \u2014 "),lse=n(IAe,"CODE",{});var kZr=s(lse);kgo=r(kZr,"FLAVAProcessor"),kZr.forEach(t),Sgo=r(IAe," (Flava model)"),IAe.forEach(t),Rgo=i(_e),Oh=n(_e,"LI",{});var NAe=s(Oh);ise=n(NAe,"STRONG",{});var SZr=s(ise);Pgo=r(SZr,"layoutlmv2"),SZr.forEach(t),Bgo=r(NAe," \u2014 "),vI=n(NAe,"A",{href:!0});var RZr=s(vI);Igo=r(RZr,"LayoutLMv2Processor"),RZr.forEach(t),Ngo=r(NAe," (LayoutLMv2 model)"),NAe.forEach(t),qgo=i(_e),Vh=n(_e,"LI",{});var qAe=s(Vh);dse=n(qAe,"STRONG",{});var PZr=s(dse);jgo=r(PZr,"layoutlmv3"),PZr.forEach(t),Dgo=r(qAe," \u2014 "),FI=n(qAe,"A",{href:!0});var BZr=s(FI);Ggo=r(BZr,"LayoutLMv3Processor"),BZr.forEach(t),Ogo=r(qAe," (LayoutLMv3 model)"),qAe.forEach(t),Vgo=i(_e),Xh=n(_e,"LI",{});var jAe=s(Xh);cse=n(jAe,"STRONG",{});var IZr=s(cse);Xgo=r(IZr,"layoutxlm"),IZr.forEach(t),zgo=r(jAe," \u2014 "),TI=n(jAe,"A",{href:!0});var NZr=s(TI);Wgo=r(NZr,"LayoutXLMProcessor"),NZr.forEach(t),Qgo=r(jAe," (LayoutXLM model)"),jAe.forEach(t),Hgo=i(_e),zh=n(_e,"LI",{});var DAe=s(zh);mse=n(DAe,"STRONG",{});var qZr=s(mse);Ugo=r(qZr,"sew"),qZr.forEach(t),Jgo=r(DAe," \u2014 "),MI=n(DAe,"A",{href:!0});var jZr=s(MI);Ygo=r(jZr,"Wav2Vec2Processor"),jZr.forEach(t),Kgo=r(DAe," (SEW model)"),DAe.forEach(t),Zgo=i(_e),Wh=n(_e,"LI",{});var GAe=s(Wh);fse=n(GAe,"STRONG",{});var DZr=s(fse);eho=r(DZr,"sew-d"),DZr.forEach(t),oho=r(GAe," \u2014 "),EI=n(GAe,"A",{href:!0});var GZr=s(EI);rho=r(GZr,"Wav2Vec2Processor"),GZr.forEach(t),tho=r(GAe," (SEW-D model)"),GAe.forEach(t),aho=i(_e),Qh=n(_e,"LI",{});var OAe=s(Qh);gse=n(OAe,"STRONG",{});var OZr=s(gse);nho=r(OZr,"speech_to_text"),OZr.forEach(t),sho=r(OAe," \u2014 "),CI=n(OAe,"A",{href:!0});var VZr=s(CI);lho=r(VZr,"Speech2TextProcessor"),VZr.forEach(t),iho=r(OAe," (Speech2Text model)"),OAe.forEach(t),dho=i(_e),Hh=n(_e,"LI",{});var VAe=s(Hh);hse=n(VAe,"STRONG",{});var XZr=s(hse);cho=r(XZr,"speech_to_text_2"),XZr.forEach(t),mho=r(VAe," \u2014 "),wI=n(VAe,"A",{href:!0});var zZr=s(wI);fho=r(zZr,"Speech2Text2Processor"),zZr.forEach(t),gho=r(VAe," (Speech2Text2 model)"),VAe.forEach(t),hho=i(_e),Uh=n(_e,"LI",{});var XAe=s(Uh);use=n(XAe,"STRONG",{});var WZr=s(use);uho=r(WZr,"trocr"),WZr.forEach(t),pho=r(XAe," \u2014 "),AI=n(XAe,"A",{href:!0});var QZr=s(AI);_ho=r(QZr,"TrOCRProcessor"),QZr.forEach(t),bho=r(XAe," (TrOCR model)"),XAe.forEach(t),vho=i(_e),Jh=n(_e,"LI",{});var zAe=s(Jh);pse=n(zAe,"STRONG",{});var HZr=s(pse);Fho=r(HZr,"unispeech"),HZr.forEach(t),Tho=r(zAe," \u2014 "),yI=n(zAe,"A",{href:!0});var UZr=s(yI);Mho=r(UZr,"Wav2Vec2Processor"),UZr.forEach(t),Eho=r(zAe," (UniSpeech model)"),zAe.forEach(t),Cho=i(_e),Yh=n(_e,"LI",{});var WAe=s(Yh);_se=n(WAe,"STRONG",{});var JZr=s(_se);who=r(JZr,"unispeech-sat"),JZr.forEach(t),Aho=r(WAe," \u2014 "),LI=n(WAe,"A",{href:!0});var YZr=s(LI);yho=r(YZr,"Wav2Vec2Processor"),YZr.forEach(t),Lho=r(WAe," (UniSpeechSat model)"),WAe.forEach(t),xho=i(_e),Kh=n(_e,"LI",{});var QAe=s(Kh);bse=n(QAe,"STRONG",{});var KZr=s(bse);$ho=r(KZr,"vilt"),KZr.forEach(t),kho=r(QAe," \u2014 "),xI=n(QAe,"A",{href:!0});var ZZr=s(xI);Sho=r(ZZr,"ViltProcessor"),ZZr.forEach(t),Rho=r(QAe," (ViLT model)"),QAe.forEach(t),Pho=i(_e),Zh=n(_e,"LI",{});var HAe=s(Zh);vse=n(HAe,"STRONG",{});var eet=s(vse);Bho=r(eet,"vision-text-dual-encoder"),eet.forEach(t),Iho=r(HAe," \u2014 "),$I=n(HAe,"A",{href:!0});var oet=s($I);Nho=r(oet,"VisionTextDualEncoderProcessor"),oet.forEach(t),qho=r(HAe," (VisionTextDualEncoder model)"),HAe.forEach(t),jho=i(_e),eu=n(_e,"LI",{});var UAe=s(eu);Fse=n(UAe,"STRONG",{});var ret=s(Fse);Dho=r(ret,"wav2vec2"),ret.forEach(t),Gho=r(UAe," \u2014 "),kI=n(UAe,"A",{href:!0});var tet=s(kI);Oho=r(tet,"Wav2Vec2Processor"),tet.forEach(t),Vho=r(UAe," (Wav2Vec2 model)"),UAe.forEach(t),Xho=i(_e),ou=n(_e,"LI",{});var JAe=s(ou);Tse=n(JAe,"STRONG",{});var aet=s(Tse);zho=r(aet,"wav2vec2-conformer"),aet.forEach(t),Who=r(JAe," \u2014 "),SI=n(JAe,"A",{href:!0});var net=s(SI);Qho=r(net,"Wav2Vec2Processor"),net.forEach(t),Hho=r(JAe," (Wav2Vec2-Conformer model)"),JAe.forEach(t),Uho=i(_e),ru=n(_e,"LI",{});var YAe=s(ru);Mse=n(YAe,"STRONG",{});var set=s(Mse);Jho=r(set,"wavlm"),set.forEach(t),Yho=r(YAe," \u2014 "),RI=n(YAe,"A",{href:!0});var iet=s(RI);Kho=r(iet,"Wav2Vec2Processor"),iet.forEach(t),Zho=r(YAe," (WavLM model)"),YAe.forEach(t),_e.forEach(t),euo=i(ea),T(tu.$$.fragment,ea),ouo=i(ea),T(au.$$.fragment,ea),ea.forEach(t),ruo=i(Ds),nu=n(Ds,"DIV",{class:!0});var PDe=s(nu);T(tL.$$.fragment,PDe),tuo=i(PDe),Ese=n(PDe,"P",{});var det=s(Ese);auo=r(det,"Register a new processor for this class."),det.forEach(t),PDe.forEach(t),Ds.forEach(t),kqe=i(m),wi=n(m,"H2",{class:!0});var BDe=s(wi);su=n(BDe,"A",{id:!0,class:!0,href:!0});var cet=s(su);Cse=n(cet,"SPAN",{});var met=s(Cse);T(aL.$$.fragment,met),met.forEach(t),cet.forEach(t),nuo=i(BDe),wse=n(BDe,"SPAN",{});var fet=s(wse);suo=r(fet,"AutoModel"),fet.forEach(t),BDe.forEach(t),Sqe=i(m),Lo=n(m,"DIV",{class:!0});var Gs=s(Lo);T(nL.$$.fragment,Gs),luo=i(Gs),Ai=n(Gs,"P",{});var wZ=s(Ai);iuo=r(wZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),PI=n(wZ,"A",{href:!0});var get=s(PI);duo=r(get,"from_pretrained()"),get.forEach(t),cuo=r(wZ," class method or the "),BI=n(wZ,"A",{href:!0});var het=s(BI);muo=r(het,"from_config()"),het.forEach(t),fuo=r(wZ,` class
method.`),wZ.forEach(t),guo=i(Gs),sL=n(Gs,"P",{});var IDe=s(sL);huo=r(IDe,"This class cannot be instantiated directly using "),Ase=n(IDe,"CODE",{});var uet=s(Ase);uuo=r(uet,"__init__()"),uet.forEach(t),puo=r(IDe," (throws an error)."),IDe.forEach(t),_uo=i(Gs),tt=n(Gs,"DIV",{class:!0});var I6=s(tt);T(lL.$$.fragment,I6),buo=i(I6),yse=n(I6,"P",{});var pet=s(yse);vuo=r(pet,"Instantiates one of the base model classes of the library from a configuration."),pet.forEach(t),Fuo=i(I6),yi=n(I6,"P",{});var AZ=s(yi);Tuo=r(AZ,`Note:
Loading a model from its configuration file does `),Lse=n(AZ,"STRONG",{});var _et=s(Lse);Muo=r(_et,"not"),_et.forEach(t),Euo=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),II=n(AZ,"A",{href:!0});var bet=s(II);Cuo=r(bet,"from_pretrained()"),bet.forEach(t),wuo=r(AZ," to load the model weights."),AZ.forEach(t),Auo=i(I6),T(lu.$$.fragment,I6),I6.forEach(t),yuo=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(iL.$$.fragment,oa),Luo=i(oa),xse=n(oa,"P",{});var vet=s(xse);xuo=r(vet,"Instantiate one of the base model classes of the library from a pretrained model."),vet.forEach(t),$uo=i(oa),La=n(oa,"P",{});var N6=s(La);kuo=r(N6,"The model class to instantiate is selected based on the "),$se=n(N6,"CODE",{});var Fet=s($se);Suo=r(Fet,"model_type"),Fet.forEach(t),Ruo=r(N6,` property of the config object (either
passed as an argument or loaded from `),kse=n(N6,"CODE",{});var Tet=s(kse);Puo=r(Tet,"pretrained_model_name_or_path"),Tet.forEach(t),Buo=r(N6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sse=n(N6,"CODE",{});var Met=s(Sse);Iuo=r(Met,"pretrained_model_name_or_path"),Met.forEach(t),Nuo=r(N6,":"),N6.forEach(t),quo=i(oa),x=n(oa,"UL",{});var $=s(x);iu=n($,"LI",{});var KAe=s(iu);Rse=n(KAe,"STRONG",{});var Eet=s(Rse);juo=r(Eet,"albert"),Eet.forEach(t),Duo=r(KAe," \u2014 "),NI=n(KAe,"A",{href:!0});var Cet=s(NI);Guo=r(Cet,"AlbertModel"),Cet.forEach(t),Ouo=r(KAe," (ALBERT model)"),KAe.forEach(t),Vuo=i($),du=n($,"LI",{});var ZAe=s(du);Pse=n(ZAe,"STRONG",{});var wet=s(Pse);Xuo=r(wet,"bart"),wet.forEach(t),zuo=r(ZAe," \u2014 "),qI=n(ZAe,"A",{href:!0});var Aet=s(qI);Wuo=r(Aet,"BartModel"),Aet.forEach(t),Quo=r(ZAe," (BART model)"),ZAe.forEach(t),Huo=i($),cu=n($,"LI",{});var eye=s(cu);Bse=n(eye,"STRONG",{});var yet=s(Bse);Uuo=r(yet,"beit"),yet.forEach(t),Juo=r(eye," \u2014 "),jI=n(eye,"A",{href:!0});var Let=s(jI);Yuo=r(Let,"BeitModel"),Let.forEach(t),Kuo=r(eye," (BEiT model)"),eye.forEach(t),Zuo=i($),mu=n($,"LI",{});var oye=s(mu);Ise=n(oye,"STRONG",{});var xet=s(Ise);epo=r(xet,"bert"),xet.forEach(t),opo=r(oye," \u2014 "),DI=n(oye,"A",{href:!0});var $et=s(DI);rpo=r($et,"BertModel"),$et.forEach(t),tpo=r(oye," (BERT model)"),oye.forEach(t),apo=i($),fu=n($,"LI",{});var rye=s(fu);Nse=n(rye,"STRONG",{});var ket=s(Nse);npo=r(ket,"bert-generation"),ket.forEach(t),spo=r(rye," \u2014 "),GI=n(rye,"A",{href:!0});var Set=s(GI);lpo=r(Set,"BertGenerationEncoder"),Set.forEach(t),ipo=r(rye," (Bert Generation model)"),rye.forEach(t),dpo=i($),gu=n($,"LI",{});var tye=s(gu);qse=n(tye,"STRONG",{});var Ret=s(qse);cpo=r(Ret,"big_bird"),Ret.forEach(t),mpo=r(tye," \u2014 "),OI=n(tye,"A",{href:!0});var Pet=s(OI);fpo=r(Pet,"BigBirdModel"),Pet.forEach(t),gpo=r(tye," (BigBird model)"),tye.forEach(t),hpo=i($),hu=n($,"LI",{});var aye=s(hu);jse=n(aye,"STRONG",{});var Bet=s(jse);upo=r(Bet,"bigbird_pegasus"),Bet.forEach(t),ppo=r(aye," \u2014 "),VI=n(aye,"A",{href:!0});var Iet=s(VI);_po=r(Iet,"BigBirdPegasusModel"),Iet.forEach(t),bpo=r(aye," (BigBirdPegasus model)"),aye.forEach(t),vpo=i($),uu=n($,"LI",{});var nye=s(uu);Dse=n(nye,"STRONG",{});var Net=s(Dse);Fpo=r(Net,"blenderbot"),Net.forEach(t),Tpo=r(nye," \u2014 "),XI=n(nye,"A",{href:!0});var qet=s(XI);Mpo=r(qet,"BlenderbotModel"),qet.forEach(t),Epo=r(nye," (Blenderbot model)"),nye.forEach(t),Cpo=i($),pu=n($,"LI",{});var sye=s(pu);Gse=n(sye,"STRONG",{});var jet=s(Gse);wpo=r(jet,"blenderbot-small"),jet.forEach(t),Apo=r(sye," \u2014 "),zI=n(sye,"A",{href:!0});var Det=s(zI);ypo=r(Det,"BlenderbotSmallModel"),Det.forEach(t),Lpo=r(sye," (BlenderbotSmall model)"),sye.forEach(t),xpo=i($),_u=n($,"LI",{});var lye=s(_u);Ose=n(lye,"STRONG",{});var Get=s(Ose);$po=r(Get,"camembert"),Get.forEach(t),kpo=r(lye," \u2014 "),WI=n(lye,"A",{href:!0});var Oet=s(WI);Spo=r(Oet,"CamembertModel"),Oet.forEach(t),Rpo=r(lye," (CamemBERT model)"),lye.forEach(t),Ppo=i($),bu=n($,"LI",{});var iye=s(bu);Vse=n(iye,"STRONG",{});var Vet=s(Vse);Bpo=r(Vet,"canine"),Vet.forEach(t),Ipo=r(iye," \u2014 "),QI=n(iye,"A",{href:!0});var Xet=s(QI);Npo=r(Xet,"CanineModel"),Xet.forEach(t),qpo=r(iye," (Canine model)"),iye.forEach(t),jpo=i($),vu=n($,"LI",{});var dye=s(vu);Xse=n(dye,"STRONG",{});var zet=s(Xse);Dpo=r(zet,"clip"),zet.forEach(t),Gpo=r(dye," \u2014 "),HI=n(dye,"A",{href:!0});var Wet=s(HI);Opo=r(Wet,"CLIPModel"),Wet.forEach(t),Vpo=r(dye," (CLIP model)"),dye.forEach(t),Xpo=i($),Fu=n($,"LI",{});var cye=s(Fu);zse=n(cye,"STRONG",{});var Qet=s(zse);zpo=r(Qet,"convbert"),Qet.forEach(t),Wpo=r(cye," \u2014 "),UI=n(cye,"A",{href:!0});var Het=s(UI);Qpo=r(Het,"ConvBertModel"),Het.forEach(t),Hpo=r(cye," (ConvBERT model)"),cye.forEach(t),Upo=i($),Tu=n($,"LI",{});var mye=s(Tu);Wse=n(mye,"STRONG",{});var Uet=s(Wse);Jpo=r(Uet,"convnext"),Uet.forEach(t),Ypo=r(mye," \u2014 "),JI=n(mye,"A",{href:!0});var Jet=s(JI);Kpo=r(Jet,"ConvNextModel"),Jet.forEach(t),Zpo=r(mye," (ConvNext model)"),mye.forEach(t),e_o=i($),Mu=n($,"LI",{});var fye=s(Mu);Qse=n(fye,"STRONG",{});var Yet=s(Qse);o_o=r(Yet,"ctrl"),Yet.forEach(t),r_o=r(fye," \u2014 "),YI=n(fye,"A",{href:!0});var Ket=s(YI);t_o=r(Ket,"CTRLModel"),Ket.forEach(t),a_o=r(fye," (CTRL model)"),fye.forEach(t),n_o=i($),Eu=n($,"LI",{});var gye=s(Eu);Hse=n(gye,"STRONG",{});var Zet=s(Hse);s_o=r(Zet,"cvt"),Zet.forEach(t),l_o=r(gye," \u2014 "),KI=n(gye,"A",{href:!0});var eot=s(KI);i_o=r(eot,"CvtModel"),eot.forEach(t),d_o=r(gye," (CvT model)"),gye.forEach(t),c_o=i($),Cu=n($,"LI",{});var hye=s(Cu);Use=n(hye,"STRONG",{});var oot=s(Use);m_o=r(oot,"data2vec-audio"),oot.forEach(t),f_o=r(hye," \u2014 "),ZI=n(hye,"A",{href:!0});var rot=s(ZI);g_o=r(rot,"Data2VecAudioModel"),rot.forEach(t),h_o=r(hye," (Data2VecAudio model)"),hye.forEach(t),u_o=i($),wu=n($,"LI",{});var uye=s(wu);Jse=n(uye,"STRONG",{});var tot=s(Jse);p_o=r(tot,"data2vec-text"),tot.forEach(t),__o=r(uye," \u2014 "),eN=n(uye,"A",{href:!0});var aot=s(eN);b_o=r(aot,"Data2VecTextModel"),aot.forEach(t),v_o=r(uye," (Data2VecText model)"),uye.forEach(t),F_o=i($),Au=n($,"LI",{});var pye=s(Au);Yse=n(pye,"STRONG",{});var not=s(Yse);T_o=r(not,"data2vec-vision"),not.forEach(t),M_o=r(pye," \u2014 "),oN=n(pye,"A",{href:!0});var sot=s(oN);E_o=r(sot,"Data2VecVisionModel"),sot.forEach(t),C_o=r(pye," (Data2VecVision model)"),pye.forEach(t),w_o=i($),yu=n($,"LI",{});var _ye=s(yu);Kse=n(_ye,"STRONG",{});var lot=s(Kse);A_o=r(lot,"deberta"),lot.forEach(t),y_o=r(_ye," \u2014 "),rN=n(_ye,"A",{href:!0});var iot=s(rN);L_o=r(iot,"DebertaModel"),iot.forEach(t),x_o=r(_ye," (DeBERTa model)"),_ye.forEach(t),$_o=i($),Lu=n($,"LI",{});var bye=s(Lu);Zse=n(bye,"STRONG",{});var dot=s(Zse);k_o=r(dot,"deberta-v2"),dot.forEach(t),S_o=r(bye," \u2014 "),tN=n(bye,"A",{href:!0});var cot=s(tN);R_o=r(cot,"DebertaV2Model"),cot.forEach(t),P_o=r(bye," (DeBERTa-v2 model)"),bye.forEach(t),B_o=i($),xu=n($,"LI",{});var vye=s(xu);ele=n(vye,"STRONG",{});var mot=s(ele);I_o=r(mot,"decision_transformer"),mot.forEach(t),N_o=r(vye," \u2014 "),aN=n(vye,"A",{href:!0});var fot=s(aN);q_o=r(fot,"DecisionTransformerModel"),fot.forEach(t),j_o=r(vye," (Decision Transformer model)"),vye.forEach(t),D_o=i($),$u=n($,"LI",{});var Fye=s($u);ole=n(Fye,"STRONG",{});var got=s(ole);G_o=r(got,"deit"),got.forEach(t),O_o=r(Fye," \u2014 "),nN=n(Fye,"A",{href:!0});var hot=s(nN);V_o=r(hot,"DeiTModel"),hot.forEach(t),X_o=r(Fye," (DeiT model)"),Fye.forEach(t),z_o=i($),ku=n($,"LI",{});var Tye=s(ku);rle=n(Tye,"STRONG",{});var uot=s(rle);W_o=r(uot,"detr"),uot.forEach(t),Q_o=r(Tye," \u2014 "),sN=n(Tye,"A",{href:!0});var pot=s(sN);H_o=r(pot,"DetrModel"),pot.forEach(t),U_o=r(Tye," (DETR model)"),Tye.forEach(t),J_o=i($),Su=n($,"LI",{});var Mye=s(Su);tle=n(Mye,"STRONG",{});var _ot=s(tle);Y_o=r(_ot,"distilbert"),_ot.forEach(t),K_o=r(Mye," \u2014 "),lN=n(Mye,"A",{href:!0});var bot=s(lN);Z_o=r(bot,"DistilBertModel"),bot.forEach(t),ebo=r(Mye," (DistilBERT model)"),Mye.forEach(t),obo=i($),Ru=n($,"LI",{});var Eye=s(Ru);ale=n(Eye,"STRONG",{});var vot=s(ale);rbo=r(vot,"dpr"),vot.forEach(t),tbo=r(Eye," \u2014 "),iN=n(Eye,"A",{href:!0});var Fot=s(iN);abo=r(Fot,"DPRQuestionEncoder"),Fot.forEach(t),nbo=r(Eye," (DPR model)"),Eye.forEach(t),sbo=i($),Pu=n($,"LI",{});var Cye=s(Pu);nle=n(Cye,"STRONG",{});var Tot=s(nle);lbo=r(Tot,"dpt"),Tot.forEach(t),ibo=r(Cye," \u2014 "),dN=n(Cye,"A",{href:!0});var Mot=s(dN);dbo=r(Mot,"DPTModel"),Mot.forEach(t),cbo=r(Cye," (DPT model)"),Cye.forEach(t),mbo=i($),Bu=n($,"LI",{});var wye=s(Bu);sle=n(wye,"STRONG",{});var Eot=s(sle);fbo=r(Eot,"electra"),Eot.forEach(t),gbo=r(wye," \u2014 "),cN=n(wye,"A",{href:!0});var Cot=s(cN);hbo=r(Cot,"ElectraModel"),Cot.forEach(t),ubo=r(wye," (ELECTRA model)"),wye.forEach(t),pbo=i($),Iu=n($,"LI",{});var Aye=s(Iu);lle=n(Aye,"STRONG",{});var wot=s(lle);_bo=r(wot,"flaubert"),wot.forEach(t),bbo=r(Aye," \u2014 "),mN=n(Aye,"A",{href:!0});var Aot=s(mN);vbo=r(Aot,"FlaubertModel"),Aot.forEach(t),Fbo=r(Aye," (FlauBERT model)"),Aye.forEach(t),Tbo=i($),Nu=n($,"LI",{});var yye=s(Nu);ile=n(yye,"STRONG",{});var yot=s(ile);Mbo=r(yot,"flava"),yot.forEach(t),Ebo=r(yye," \u2014 "),fN=n(yye,"A",{href:!0});var Lot=s(fN);Cbo=r(Lot,"FlavaModel"),Lot.forEach(t),wbo=r(yye," (Flava model)"),yye.forEach(t),Abo=i($),qu=n($,"LI",{});var Lye=s(qu);dle=n(Lye,"STRONG",{});var xot=s(dle);ybo=r(xot,"fnet"),xot.forEach(t),Lbo=r(Lye," \u2014 "),gN=n(Lye,"A",{href:!0});var $ot=s(gN);xbo=r($ot,"FNetModel"),$ot.forEach(t),$bo=r(Lye," (FNet model)"),Lye.forEach(t),kbo=i($),ju=n($,"LI",{});var xye=s(ju);cle=n(xye,"STRONG",{});var kot=s(cle);Sbo=r(kot,"fsmt"),kot.forEach(t),Rbo=r(xye," \u2014 "),hN=n(xye,"A",{href:!0});var Sot=s(hN);Pbo=r(Sot,"FSMTModel"),Sot.forEach(t),Bbo=r(xye," (FairSeq Machine-Translation model)"),xye.forEach(t),Ibo=i($),Ps=n($,"LI",{});var Q$=s(Ps);mle=n(Q$,"STRONG",{});var Rot=s(mle);Nbo=r(Rot,"funnel"),Rot.forEach(t),qbo=r(Q$," \u2014 "),uN=n(Q$,"A",{href:!0});var Pot=s(uN);jbo=r(Pot,"FunnelModel"),Pot.forEach(t),Dbo=r(Q$," or "),pN=n(Q$,"A",{href:!0});var Bot=s(pN);Gbo=r(Bot,"FunnelBaseModel"),Bot.forEach(t),Obo=r(Q$," (Funnel Transformer model)"),Q$.forEach(t),Vbo=i($),Du=n($,"LI",{});var $ye=s(Du);fle=n($ye,"STRONG",{});var Iot=s(fle);Xbo=r(Iot,"glpn"),Iot.forEach(t),zbo=r($ye," \u2014 "),_N=n($ye,"A",{href:!0});var Not=s(_N);Wbo=r(Not,"GLPNModel"),Not.forEach(t),Qbo=r($ye," (GLPN model)"),$ye.forEach(t),Hbo=i($),Gu=n($,"LI",{});var kye=s(Gu);gle=n(kye,"STRONG",{});var qot=s(gle);Ubo=r(qot,"gpt2"),qot.forEach(t),Jbo=r(kye," \u2014 "),bN=n(kye,"A",{href:!0});var jot=s(bN);Ybo=r(jot,"GPT2Model"),jot.forEach(t),Kbo=r(kye," (OpenAI GPT-2 model)"),kye.forEach(t),Zbo=i($),Ou=n($,"LI",{});var Sye=s(Ou);hle=n(Sye,"STRONG",{});var Dot=s(hle);e2o=r(Dot,"gpt_neo"),Dot.forEach(t),o2o=r(Sye," \u2014 "),vN=n(Sye,"A",{href:!0});var Got=s(vN);r2o=r(Got,"GPTNeoModel"),Got.forEach(t),t2o=r(Sye," (GPT Neo model)"),Sye.forEach(t),a2o=i($),Vu=n($,"LI",{});var Rye=s(Vu);ule=n(Rye,"STRONG",{});var Oot=s(ule);n2o=r(Oot,"gpt_neox"),Oot.forEach(t),s2o=r(Rye," \u2014 "),FN=n(Rye,"A",{href:!0});var Vot=s(FN);l2o=r(Vot,"GPTNeoXModel"),Vot.forEach(t),i2o=r(Rye," (GPT NeoX model)"),Rye.forEach(t),d2o=i($),Xu=n($,"LI",{});var Pye=s(Xu);ple=n(Pye,"STRONG",{});var Xot=s(ple);c2o=r(Xot,"gptj"),Xot.forEach(t),m2o=r(Pye," \u2014 "),TN=n(Pye,"A",{href:!0});var zot=s(TN);f2o=r(zot,"GPTJModel"),zot.forEach(t),g2o=r(Pye," (GPT-J model)"),Pye.forEach(t),h2o=i($),zu=n($,"LI",{});var Bye=s(zu);_le=n(Bye,"STRONG",{});var Wot=s(_le);u2o=r(Wot,"hubert"),Wot.forEach(t),p2o=r(Bye," \u2014 "),MN=n(Bye,"A",{href:!0});var Qot=s(MN);_2o=r(Qot,"HubertModel"),Qot.forEach(t),b2o=r(Bye," (Hubert model)"),Bye.forEach(t),v2o=i($),Wu=n($,"LI",{});var Iye=s(Wu);ble=n(Iye,"STRONG",{});var Hot=s(ble);F2o=r(Hot,"ibert"),Hot.forEach(t),T2o=r(Iye," \u2014 "),EN=n(Iye,"A",{href:!0});var Uot=s(EN);M2o=r(Uot,"IBertModel"),Uot.forEach(t),E2o=r(Iye," (I-BERT model)"),Iye.forEach(t),C2o=i($),Qu=n($,"LI",{});var Nye=s(Qu);vle=n(Nye,"STRONG",{});var Jot=s(vle);w2o=r(Jot,"imagegpt"),Jot.forEach(t),A2o=r(Nye," \u2014 "),CN=n(Nye,"A",{href:!0});var Yot=s(CN);y2o=r(Yot,"ImageGPTModel"),Yot.forEach(t),L2o=r(Nye," (ImageGPT model)"),Nye.forEach(t),x2o=i($),Hu=n($,"LI",{});var qye=s(Hu);Fle=n(qye,"STRONG",{});var Kot=s(Fle);$2o=r(Kot,"layoutlm"),Kot.forEach(t),k2o=r(qye," \u2014 "),wN=n(qye,"A",{href:!0});var Zot=s(wN);S2o=r(Zot,"LayoutLMModel"),Zot.forEach(t),R2o=r(qye," (LayoutLM model)"),qye.forEach(t),P2o=i($),Uu=n($,"LI",{});var jye=s(Uu);Tle=n(jye,"STRONG",{});var ert=s(Tle);B2o=r(ert,"layoutlmv2"),ert.forEach(t),I2o=r(jye," \u2014 "),AN=n(jye,"A",{href:!0});var ort=s(AN);N2o=r(ort,"LayoutLMv2Model"),ort.forEach(t),q2o=r(jye," (LayoutLMv2 model)"),jye.forEach(t),j2o=i($),Ju=n($,"LI",{});var Dye=s(Ju);Mle=n(Dye,"STRONG",{});var rrt=s(Mle);D2o=r(rrt,"layoutlmv3"),rrt.forEach(t),G2o=r(Dye," \u2014 "),yN=n(Dye,"A",{href:!0});var trt=s(yN);O2o=r(trt,"LayoutLMv3Model"),trt.forEach(t),V2o=r(Dye," (LayoutLMv3 model)"),Dye.forEach(t),X2o=i($),Yu=n($,"LI",{});var Gye=s(Yu);Ele=n(Gye,"STRONG",{});var art=s(Ele);z2o=r(art,"led"),art.forEach(t),W2o=r(Gye," \u2014 "),LN=n(Gye,"A",{href:!0});var nrt=s(LN);Q2o=r(nrt,"LEDModel"),nrt.forEach(t),H2o=r(Gye," (LED model)"),Gye.forEach(t),U2o=i($),Ku=n($,"LI",{});var Oye=s(Ku);Cle=n(Oye,"STRONG",{});var srt=s(Cle);J2o=r(srt,"longformer"),srt.forEach(t),Y2o=r(Oye," \u2014 "),xN=n(Oye,"A",{href:!0});var lrt=s(xN);K2o=r(lrt,"LongformerModel"),lrt.forEach(t),Z2o=r(Oye," (Longformer model)"),Oye.forEach(t),evo=i($),Zu=n($,"LI",{});var Vye=s(Zu);wle=n(Vye,"STRONG",{});var irt=s(wle);ovo=r(irt,"luke"),irt.forEach(t),rvo=r(Vye," \u2014 "),$N=n(Vye,"A",{href:!0});var drt=s($N);tvo=r(drt,"LukeModel"),drt.forEach(t),avo=r(Vye," (LUKE model)"),Vye.forEach(t),nvo=i($),ep=n($,"LI",{});var Xye=s(ep);Ale=n(Xye,"STRONG",{});var crt=s(Ale);svo=r(crt,"lxmert"),crt.forEach(t),lvo=r(Xye," \u2014 "),kN=n(Xye,"A",{href:!0});var mrt=s(kN);ivo=r(mrt,"LxmertModel"),mrt.forEach(t),dvo=r(Xye," (LXMERT model)"),Xye.forEach(t),cvo=i($),op=n($,"LI",{});var zye=s(op);yle=n(zye,"STRONG",{});var frt=s(yle);mvo=r(frt,"m2m_100"),frt.forEach(t),fvo=r(zye," \u2014 "),SN=n(zye,"A",{href:!0});var grt=s(SN);gvo=r(grt,"M2M100Model"),grt.forEach(t),hvo=r(zye," (M2M100 model)"),zye.forEach(t),uvo=i($),rp=n($,"LI",{});var Wye=s(rp);Lle=n(Wye,"STRONG",{});var hrt=s(Lle);pvo=r(hrt,"marian"),hrt.forEach(t),_vo=r(Wye," \u2014 "),RN=n(Wye,"A",{href:!0});var urt=s(RN);bvo=r(urt,"MarianModel"),urt.forEach(t),vvo=r(Wye," (Marian model)"),Wye.forEach(t),Fvo=i($),tp=n($,"LI",{});var Qye=s(tp);xle=n(Qye,"STRONG",{});var prt=s(xle);Tvo=r(prt,"maskformer"),prt.forEach(t),Mvo=r(Qye," \u2014 "),PN=n(Qye,"A",{href:!0});var _rt=s(PN);Evo=r(_rt,"MaskFormerModel"),_rt.forEach(t),Cvo=r(Qye," (MaskFormer model)"),Qye.forEach(t),wvo=i($),ap=n($,"LI",{});var Hye=s(ap);$le=n(Hye,"STRONG",{});var brt=s($le);Avo=r(brt,"mbart"),brt.forEach(t),yvo=r(Hye," \u2014 "),BN=n(Hye,"A",{href:!0});var vrt=s(BN);Lvo=r(vrt,"MBartModel"),vrt.forEach(t),xvo=r(Hye," (mBART model)"),Hye.forEach(t),$vo=i($),np=n($,"LI",{});var Uye=s(np);kle=n(Uye,"STRONG",{});var Frt=s(kle);kvo=r(Frt,"megatron-bert"),Frt.forEach(t),Svo=r(Uye," \u2014 "),IN=n(Uye,"A",{href:!0});var Trt=s(IN);Rvo=r(Trt,"MegatronBertModel"),Trt.forEach(t),Pvo=r(Uye," (MegatronBert model)"),Uye.forEach(t),Bvo=i($),sp=n($,"LI",{});var Jye=s(sp);Sle=n(Jye,"STRONG",{});var Mrt=s(Sle);Ivo=r(Mrt,"mobilebert"),Mrt.forEach(t),Nvo=r(Jye," \u2014 "),NN=n(Jye,"A",{href:!0});var Ert=s(NN);qvo=r(Ert,"MobileBertModel"),Ert.forEach(t),jvo=r(Jye," (MobileBERT model)"),Jye.forEach(t),Dvo=i($),lp=n($,"LI",{});var Yye=s(lp);Rle=n(Yye,"STRONG",{});var Crt=s(Rle);Gvo=r(Crt,"mpnet"),Crt.forEach(t),Ovo=r(Yye," \u2014 "),qN=n(Yye,"A",{href:!0});var wrt=s(qN);Vvo=r(wrt,"MPNetModel"),wrt.forEach(t),Xvo=r(Yye," (MPNet model)"),Yye.forEach(t),zvo=i($),ip=n($,"LI",{});var Kye=s(ip);Ple=n(Kye,"STRONG",{});var Art=s(Ple);Wvo=r(Art,"mt5"),Art.forEach(t),Qvo=r(Kye," \u2014 "),jN=n(Kye,"A",{href:!0});var yrt=s(jN);Hvo=r(yrt,"MT5Model"),yrt.forEach(t),Uvo=r(Kye," (mT5 model)"),Kye.forEach(t),Jvo=i($),dp=n($,"LI",{});var Zye=s(dp);Ble=n(Zye,"STRONG",{});var Lrt=s(Ble);Yvo=r(Lrt,"nystromformer"),Lrt.forEach(t),Kvo=r(Zye," \u2014 "),DN=n(Zye,"A",{href:!0});var xrt=s(DN);Zvo=r(xrt,"NystromformerModel"),xrt.forEach(t),eFo=r(Zye," (Nystromformer model)"),Zye.forEach(t),oFo=i($),cp=n($,"LI",{});var eLe=s(cp);Ile=n(eLe,"STRONG",{});var $rt=s(Ile);rFo=r($rt,"openai-gpt"),$rt.forEach(t),tFo=r(eLe," \u2014 "),GN=n(eLe,"A",{href:!0});var krt=s(GN);aFo=r(krt,"OpenAIGPTModel"),krt.forEach(t),nFo=r(eLe," (OpenAI GPT model)"),eLe.forEach(t),sFo=i($),mp=n($,"LI",{});var oLe=s(mp);Nle=n(oLe,"STRONG",{});var Srt=s(Nle);lFo=r(Srt,"opt"),Srt.forEach(t),iFo=r(oLe," \u2014 "),ON=n(oLe,"A",{href:!0});var Rrt=s(ON);dFo=r(Rrt,"OPTModel"),Rrt.forEach(t),cFo=r(oLe," (OPT model)"),oLe.forEach(t),mFo=i($),fp=n($,"LI",{});var rLe=s(fp);qle=n(rLe,"STRONG",{});var Prt=s(qle);fFo=r(Prt,"pegasus"),Prt.forEach(t),gFo=r(rLe," \u2014 "),VN=n(rLe,"A",{href:!0});var Brt=s(VN);hFo=r(Brt,"PegasusModel"),Brt.forEach(t),uFo=r(rLe," (Pegasus model)"),rLe.forEach(t),pFo=i($),gp=n($,"LI",{});var tLe=s(gp);jle=n(tLe,"STRONG",{});var Irt=s(jle);_Fo=r(Irt,"perceiver"),Irt.forEach(t),bFo=r(tLe," \u2014 "),XN=n(tLe,"A",{href:!0});var Nrt=s(XN);vFo=r(Nrt,"PerceiverModel"),Nrt.forEach(t),FFo=r(tLe," (Perceiver model)"),tLe.forEach(t),TFo=i($),hp=n($,"LI",{});var aLe=s(hp);Dle=n(aLe,"STRONG",{});var qrt=s(Dle);MFo=r(qrt,"plbart"),qrt.forEach(t),EFo=r(aLe," \u2014 "),zN=n(aLe,"A",{href:!0});var jrt=s(zN);CFo=r(jrt,"PLBartModel"),jrt.forEach(t),wFo=r(aLe," (PLBart model)"),aLe.forEach(t),AFo=i($),up=n($,"LI",{});var nLe=s(up);Gle=n(nLe,"STRONG",{});var Drt=s(Gle);yFo=r(Drt,"poolformer"),Drt.forEach(t),LFo=r(nLe," \u2014 "),WN=n(nLe,"A",{href:!0});var Grt=s(WN);xFo=r(Grt,"PoolFormerModel"),Grt.forEach(t),$Fo=r(nLe," (PoolFormer model)"),nLe.forEach(t),kFo=i($),pp=n($,"LI",{});var sLe=s(pp);Ole=n(sLe,"STRONG",{});var Ort=s(Ole);SFo=r(Ort,"prophetnet"),Ort.forEach(t),RFo=r(sLe," \u2014 "),QN=n(sLe,"A",{href:!0});var Vrt=s(QN);PFo=r(Vrt,"ProphetNetModel"),Vrt.forEach(t),BFo=r(sLe," (ProphetNet model)"),sLe.forEach(t),IFo=i($),_p=n($,"LI",{});var lLe=s(_p);Vle=n(lLe,"STRONG",{});var Xrt=s(Vle);NFo=r(Xrt,"qdqbert"),Xrt.forEach(t),qFo=r(lLe," \u2014 "),HN=n(lLe,"A",{href:!0});var zrt=s(HN);jFo=r(zrt,"QDQBertModel"),zrt.forEach(t),DFo=r(lLe," (QDQBert model)"),lLe.forEach(t),GFo=i($),bp=n($,"LI",{});var iLe=s(bp);Xle=n(iLe,"STRONG",{});var Wrt=s(Xle);OFo=r(Wrt,"reformer"),Wrt.forEach(t),VFo=r(iLe," \u2014 "),UN=n(iLe,"A",{href:!0});var Qrt=s(UN);XFo=r(Qrt,"ReformerModel"),Qrt.forEach(t),zFo=r(iLe," (Reformer model)"),iLe.forEach(t),WFo=i($),vp=n($,"LI",{});var dLe=s(vp);zle=n(dLe,"STRONG",{});var Hrt=s(zle);QFo=r(Hrt,"regnet"),Hrt.forEach(t),HFo=r(dLe," \u2014 "),JN=n(dLe,"A",{href:!0});var Urt=s(JN);UFo=r(Urt,"RegNetModel"),Urt.forEach(t),JFo=r(dLe," (RegNet model)"),dLe.forEach(t),YFo=i($),Fp=n($,"LI",{});var cLe=s(Fp);Wle=n(cLe,"STRONG",{});var Jrt=s(Wle);KFo=r(Jrt,"rembert"),Jrt.forEach(t),ZFo=r(cLe," \u2014 "),YN=n(cLe,"A",{href:!0});var Yrt=s(YN);e1o=r(Yrt,"RemBertModel"),Yrt.forEach(t),o1o=r(cLe," (RemBERT model)"),cLe.forEach(t),r1o=i($),Tp=n($,"LI",{});var mLe=s(Tp);Qle=n(mLe,"STRONG",{});var Krt=s(Qle);t1o=r(Krt,"resnet"),Krt.forEach(t),a1o=r(mLe," \u2014 "),KN=n(mLe,"A",{href:!0});var Zrt=s(KN);n1o=r(Zrt,"ResNetModel"),Zrt.forEach(t),s1o=r(mLe," (ResNet model)"),mLe.forEach(t),l1o=i($),Mp=n($,"LI",{});var fLe=s(Mp);Hle=n(fLe,"STRONG",{});var ett=s(Hle);i1o=r(ett,"retribert"),ett.forEach(t),d1o=r(fLe," \u2014 "),ZN=n(fLe,"A",{href:!0});var ott=s(ZN);c1o=r(ott,"RetriBertModel"),ott.forEach(t),m1o=r(fLe," (RetriBERT model)"),fLe.forEach(t),f1o=i($),Ep=n($,"LI",{});var gLe=s(Ep);Ule=n(gLe,"STRONG",{});var rtt=s(Ule);g1o=r(rtt,"roberta"),rtt.forEach(t),h1o=r(gLe," \u2014 "),eq=n(gLe,"A",{href:!0});var ttt=s(eq);u1o=r(ttt,"RobertaModel"),ttt.forEach(t),p1o=r(gLe," (RoBERTa model)"),gLe.forEach(t),_1o=i($),Cp=n($,"LI",{});var hLe=s(Cp);Jle=n(hLe,"STRONG",{});var att=s(Jle);b1o=r(att,"roformer"),att.forEach(t),v1o=r(hLe," \u2014 "),oq=n(hLe,"A",{href:!0});var ntt=s(oq);F1o=r(ntt,"RoFormerModel"),ntt.forEach(t),T1o=r(hLe," (RoFormer model)"),hLe.forEach(t),M1o=i($),wp=n($,"LI",{});var uLe=s(wp);Yle=n(uLe,"STRONG",{});var stt=s(Yle);E1o=r(stt,"segformer"),stt.forEach(t),C1o=r(uLe," \u2014 "),rq=n(uLe,"A",{href:!0});var ltt=s(rq);w1o=r(ltt,"SegformerModel"),ltt.forEach(t),A1o=r(uLe," (SegFormer model)"),uLe.forEach(t),y1o=i($),Ap=n($,"LI",{});var pLe=s(Ap);Kle=n(pLe,"STRONG",{});var itt=s(Kle);L1o=r(itt,"sew"),itt.forEach(t),x1o=r(pLe," \u2014 "),tq=n(pLe,"A",{href:!0});var dtt=s(tq);$1o=r(dtt,"SEWModel"),dtt.forEach(t),k1o=r(pLe," (SEW model)"),pLe.forEach(t),S1o=i($),yp=n($,"LI",{});var _Le=s(yp);Zle=n(_Le,"STRONG",{});var ctt=s(Zle);R1o=r(ctt,"sew-d"),ctt.forEach(t),P1o=r(_Le," \u2014 "),aq=n(_Le,"A",{href:!0});var mtt=s(aq);B1o=r(mtt,"SEWDModel"),mtt.forEach(t),I1o=r(_Le," (SEW-D model)"),_Le.forEach(t),N1o=i($),Lp=n($,"LI",{});var bLe=s(Lp);eie=n(bLe,"STRONG",{});var ftt=s(eie);q1o=r(ftt,"speech_to_text"),ftt.forEach(t),j1o=r(bLe," \u2014 "),nq=n(bLe,"A",{href:!0});var gtt=s(nq);D1o=r(gtt,"Speech2TextModel"),gtt.forEach(t),G1o=r(bLe," (Speech2Text model)"),bLe.forEach(t),O1o=i($),xp=n($,"LI",{});var vLe=s(xp);oie=n(vLe,"STRONG",{});var htt=s(oie);V1o=r(htt,"splinter"),htt.forEach(t),X1o=r(vLe," \u2014 "),sq=n(vLe,"A",{href:!0});var utt=s(sq);z1o=r(utt,"SplinterModel"),utt.forEach(t),W1o=r(vLe," (Splinter model)"),vLe.forEach(t),Q1o=i($),$p=n($,"LI",{});var FLe=s($p);rie=n(FLe,"STRONG",{});var ptt=s(rie);H1o=r(ptt,"squeezebert"),ptt.forEach(t),U1o=r(FLe," \u2014 "),lq=n(FLe,"A",{href:!0});var _tt=s(lq);J1o=r(_tt,"SqueezeBertModel"),_tt.forEach(t),Y1o=r(FLe," (SqueezeBERT model)"),FLe.forEach(t),K1o=i($),kp=n($,"LI",{});var TLe=s(kp);tie=n(TLe,"STRONG",{});var btt=s(tie);Z1o=r(btt,"swin"),btt.forEach(t),eTo=r(TLe," \u2014 "),iq=n(TLe,"A",{href:!0});var vtt=s(iq);oTo=r(vtt,"SwinModel"),vtt.forEach(t),rTo=r(TLe," (Swin model)"),TLe.forEach(t),tTo=i($),Sp=n($,"LI",{});var MLe=s(Sp);aie=n(MLe,"STRONG",{});var Ftt=s(aie);aTo=r(Ftt,"t5"),Ftt.forEach(t),nTo=r(MLe," \u2014 "),dq=n(MLe,"A",{href:!0});var Ttt=s(dq);sTo=r(Ttt,"T5Model"),Ttt.forEach(t),lTo=r(MLe," (T5 model)"),MLe.forEach(t),iTo=i($),Rp=n($,"LI",{});var ELe=s(Rp);nie=n(ELe,"STRONG",{});var Mtt=s(nie);dTo=r(Mtt,"tapas"),Mtt.forEach(t),cTo=r(ELe," \u2014 "),cq=n(ELe,"A",{href:!0});var Ett=s(cq);mTo=r(Ett,"TapasModel"),Ett.forEach(t),fTo=r(ELe," (TAPAS model)"),ELe.forEach(t),gTo=i($),Pp=n($,"LI",{});var CLe=s(Pp);sie=n(CLe,"STRONG",{});var Ctt=s(sie);hTo=r(Ctt,"trajectory_transformer"),Ctt.forEach(t),uTo=r(CLe," \u2014 "),mq=n(CLe,"A",{href:!0});var wtt=s(mq);pTo=r(wtt,"TrajectoryTransformerModel"),wtt.forEach(t),_To=r(CLe," (Trajectory Transformer model)"),CLe.forEach(t),bTo=i($),Bp=n($,"LI",{});var wLe=s(Bp);lie=n(wLe,"STRONG",{});var Att=s(lie);vTo=r(Att,"transfo-xl"),Att.forEach(t),FTo=r(wLe," \u2014 "),fq=n(wLe,"A",{href:!0});var ytt=s(fq);TTo=r(ytt,"TransfoXLModel"),ytt.forEach(t),MTo=r(wLe," (Transformer-XL model)"),wLe.forEach(t),ETo=i($),Ip=n($,"LI",{});var ALe=s(Ip);iie=n(ALe,"STRONG",{});var Ltt=s(iie);CTo=r(Ltt,"unispeech"),Ltt.forEach(t),wTo=r(ALe," \u2014 "),gq=n(ALe,"A",{href:!0});var xtt=s(gq);ATo=r(xtt,"UniSpeechModel"),xtt.forEach(t),yTo=r(ALe," (UniSpeech model)"),ALe.forEach(t),LTo=i($),Np=n($,"LI",{});var yLe=s(Np);die=n(yLe,"STRONG",{});var $tt=s(die);xTo=r($tt,"unispeech-sat"),$tt.forEach(t),$To=r(yLe," \u2014 "),hq=n(yLe,"A",{href:!0});var ktt=s(hq);kTo=r(ktt,"UniSpeechSatModel"),ktt.forEach(t),STo=r(yLe," (UniSpeechSat model)"),yLe.forEach(t),RTo=i($),qp=n($,"LI",{});var LLe=s(qp);cie=n(LLe,"STRONG",{});var Stt=s(cie);PTo=r(Stt,"van"),Stt.forEach(t),BTo=r(LLe," \u2014 "),uq=n(LLe,"A",{href:!0});var Rtt=s(uq);ITo=r(Rtt,"VanModel"),Rtt.forEach(t),NTo=r(LLe," (VAN model)"),LLe.forEach(t),qTo=i($),jp=n($,"LI",{});var xLe=s(jp);mie=n(xLe,"STRONG",{});var Ptt=s(mie);jTo=r(Ptt,"vilt"),Ptt.forEach(t),DTo=r(xLe," \u2014 "),pq=n(xLe,"A",{href:!0});var Btt=s(pq);GTo=r(Btt,"ViltModel"),Btt.forEach(t),OTo=r(xLe," (ViLT model)"),xLe.forEach(t),VTo=i($),Dp=n($,"LI",{});var $Le=s(Dp);fie=n($Le,"STRONG",{});var Itt=s(fie);XTo=r(Itt,"vision-text-dual-encoder"),Itt.forEach(t),zTo=r($Le," \u2014 "),_q=n($Le,"A",{href:!0});var Ntt=s(_q);WTo=r(Ntt,"VisionTextDualEncoderModel"),Ntt.forEach(t),QTo=r($Le," (VisionTextDualEncoder model)"),$Le.forEach(t),HTo=i($),Gp=n($,"LI",{});var kLe=s(Gp);gie=n(kLe,"STRONG",{});var qtt=s(gie);UTo=r(qtt,"visual_bert"),qtt.forEach(t),JTo=r(kLe," \u2014 "),bq=n(kLe,"A",{href:!0});var jtt=s(bq);YTo=r(jtt,"VisualBertModel"),jtt.forEach(t),KTo=r(kLe," (VisualBert model)"),kLe.forEach(t),ZTo=i($),Op=n($,"LI",{});var SLe=s(Op);hie=n(SLe,"STRONG",{});var Dtt=s(hie);eMo=r(Dtt,"vit"),Dtt.forEach(t),oMo=r(SLe," \u2014 "),vq=n(SLe,"A",{href:!0});var Gtt=s(vq);rMo=r(Gtt,"ViTModel"),Gtt.forEach(t),tMo=r(SLe," (ViT model)"),SLe.forEach(t),aMo=i($),Vp=n($,"LI",{});var RLe=s(Vp);uie=n(RLe,"STRONG",{});var Ott=s(uie);nMo=r(Ott,"vit_mae"),Ott.forEach(t),sMo=r(RLe," \u2014 "),Fq=n(RLe,"A",{href:!0});var Vtt=s(Fq);lMo=r(Vtt,"ViTMAEModel"),Vtt.forEach(t),iMo=r(RLe," (ViTMAE model)"),RLe.forEach(t),dMo=i($),Xp=n($,"LI",{});var PLe=s(Xp);pie=n(PLe,"STRONG",{});var Xtt=s(pie);cMo=r(Xtt,"wav2vec2"),Xtt.forEach(t),mMo=r(PLe," \u2014 "),Tq=n(PLe,"A",{href:!0});var ztt=s(Tq);fMo=r(ztt,"Wav2Vec2Model"),ztt.forEach(t),gMo=r(PLe," (Wav2Vec2 model)"),PLe.forEach(t),hMo=i($),zp=n($,"LI",{});var BLe=s(zp);_ie=n(BLe,"STRONG",{});var Wtt=s(_ie);uMo=r(Wtt,"wav2vec2-conformer"),Wtt.forEach(t),pMo=r(BLe," \u2014 "),Mq=n(BLe,"A",{href:!0});var Qtt=s(Mq);_Mo=r(Qtt,"Wav2Vec2ConformerModel"),Qtt.forEach(t),bMo=r(BLe," (Wav2Vec2-Conformer model)"),BLe.forEach(t),vMo=i($),Wp=n($,"LI",{});var ILe=s(Wp);bie=n(ILe,"STRONG",{});var Htt=s(bie);FMo=r(Htt,"wavlm"),Htt.forEach(t),TMo=r(ILe," \u2014 "),Eq=n(ILe,"A",{href:!0});var Utt=s(Eq);MMo=r(Utt,"WavLMModel"),Utt.forEach(t),EMo=r(ILe," (WavLM model)"),ILe.forEach(t),CMo=i($),Qp=n($,"LI",{});var NLe=s(Qp);vie=n(NLe,"STRONG",{});var Jtt=s(vie);wMo=r(Jtt,"xglm"),Jtt.forEach(t),AMo=r(NLe," \u2014 "),Cq=n(NLe,"A",{href:!0});var Ytt=s(Cq);yMo=r(Ytt,"XGLMModel"),Ytt.forEach(t),LMo=r(NLe," (XGLM model)"),NLe.forEach(t),xMo=i($),Hp=n($,"LI",{});var qLe=s(Hp);Fie=n(qLe,"STRONG",{});var Ktt=s(Fie);$Mo=r(Ktt,"xlm"),Ktt.forEach(t),kMo=r(qLe," \u2014 "),wq=n(qLe,"A",{href:!0});var Ztt=s(wq);SMo=r(Ztt,"XLMModel"),Ztt.forEach(t),RMo=r(qLe," (XLM model)"),qLe.forEach(t),PMo=i($),Up=n($,"LI",{});var jLe=s(Up);Tie=n(jLe,"STRONG",{});var eat=s(Tie);BMo=r(eat,"xlm-prophetnet"),eat.forEach(t),IMo=r(jLe," \u2014 "),Aq=n(jLe,"A",{href:!0});var oat=s(Aq);NMo=r(oat,"XLMProphetNetModel"),oat.forEach(t),qMo=r(jLe," (XLMProphetNet model)"),jLe.forEach(t),jMo=i($),Jp=n($,"LI",{});var DLe=s(Jp);Mie=n(DLe,"STRONG",{});var rat=s(Mie);DMo=r(rat,"xlm-roberta"),rat.forEach(t),GMo=r(DLe," \u2014 "),yq=n(DLe,"A",{href:!0});var tat=s(yq);OMo=r(tat,"XLMRobertaModel"),tat.forEach(t),VMo=r(DLe," (XLM-RoBERTa model)"),DLe.forEach(t),XMo=i($),Yp=n($,"LI",{});var GLe=s(Yp);Eie=n(GLe,"STRONG",{});var aat=s(Eie);zMo=r(aat,"xlm-roberta-xl"),aat.forEach(t),WMo=r(GLe," \u2014 "),Lq=n(GLe,"A",{href:!0});var nat=s(Lq);QMo=r(nat,"XLMRobertaXLModel"),nat.forEach(t),HMo=r(GLe," (XLM-RoBERTa-XL model)"),GLe.forEach(t),UMo=i($),Kp=n($,"LI",{});var OLe=s(Kp);Cie=n(OLe,"STRONG",{});var sat=s(Cie);JMo=r(sat,"xlnet"),sat.forEach(t),YMo=r(OLe," \u2014 "),xq=n(OLe,"A",{href:!0});var lat=s(xq);KMo=r(lat,"XLNetModel"),lat.forEach(t),ZMo=r(OLe," (XLNet model)"),OLe.forEach(t),e4o=i($),Zp=n($,"LI",{});var VLe=s(Zp);wie=n(VLe,"STRONG",{});var iat=s(wie);o4o=r(iat,"yolos"),iat.forEach(t),r4o=r(VLe," \u2014 "),$q=n(VLe,"A",{href:!0});var dat=s($q);t4o=r(dat,"YolosModel"),dat.forEach(t),a4o=r(VLe," (YOLOS model)"),VLe.forEach(t),n4o=i($),e_=n($,"LI",{});var XLe=s(e_);Aie=n(XLe,"STRONG",{});var cat=s(Aie);s4o=r(cat,"yoso"),cat.forEach(t),l4o=r(XLe," \u2014 "),kq=n(XLe,"A",{href:!0});var mat=s(kq);i4o=r(mat,"YosoModel"),mat.forEach(t),d4o=r(XLe," (YOSO model)"),XLe.forEach(t),$.forEach(t),c4o=i(oa),o_=n(oa,"P",{});var zLe=s(o_);m4o=r(zLe,"The model is set in evaluation mode by default using "),yie=n(zLe,"CODE",{});var fat=s(yie);f4o=r(fat,"model.eval()"),fat.forEach(t),g4o=r(zLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lie=n(zLe,"CODE",{});var gat=s(Lie);h4o=r(gat,"model.train()"),gat.forEach(t),zLe.forEach(t),u4o=i(oa),T(r_.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),Rqe=i(m),Li=n(m,"H2",{class:!0});var NDe=s(Li);t_=n(NDe,"A",{id:!0,class:!0,href:!0});var hat=s(t_);xie=n(hat,"SPAN",{});var uat=s(xie);T(dL.$$.fragment,uat),uat.forEach(t),hat.forEach(t),p4o=i(NDe),$ie=n(NDe,"SPAN",{});var pat=s($ie);_4o=r(pat,"AutoModelForPreTraining"),pat.forEach(t),NDe.forEach(t),Pqe=i(m),xo=n(m,"DIV",{class:!0});var Os=s(xo);T(cL.$$.fragment,Os),b4o=i(Os),xi=n(Os,"P",{});var yZ=s(xi);v4o=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Sq=n(yZ,"A",{href:!0});var _at=s(Sq);F4o=r(_at,"from_pretrained()"),_at.forEach(t),T4o=r(yZ," class method or the "),Rq=n(yZ,"A",{href:!0});var bat=s(Rq);M4o=r(bat,"from_config()"),bat.forEach(t),E4o=r(yZ,` class
method.`),yZ.forEach(t),C4o=i(Os),mL=n(Os,"P",{});var qDe=s(mL);w4o=r(qDe,"This class cannot be instantiated directly using "),kie=n(qDe,"CODE",{});var vat=s(kie);A4o=r(vat,"__init__()"),vat.forEach(t),y4o=r(qDe," (throws an error)."),qDe.forEach(t),L4o=i(Os),at=n(Os,"DIV",{class:!0});var q6=s(at);T(fL.$$.fragment,q6),x4o=i(q6),Sie=n(q6,"P",{});var Fat=s(Sie);$4o=r(Fat,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Fat.forEach(t),k4o=i(q6),$i=n(q6,"P",{});var LZ=s($i);S4o=r(LZ,`Note:
Loading a model from its configuration file does `),Rie=n(LZ,"STRONG",{});var Tat=s(Rie);R4o=r(Tat,"not"),Tat.forEach(t),P4o=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pq=n(LZ,"A",{href:!0});var Mat=s(Pq);B4o=r(Mat,"from_pretrained()"),Mat.forEach(t),I4o=r(LZ," to load the model weights."),LZ.forEach(t),N4o=i(q6),T(a_.$$.fragment,q6),q6.forEach(t),q4o=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(gL.$$.fragment,ra),j4o=i(ra),Pie=n(ra,"P",{});var Eat=s(Pie);D4o=r(Eat,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Eat.forEach(t),G4o=i(ra),xa=n(ra,"P",{});var j6=s(xa);O4o=r(j6,"The model class to instantiate is selected based on the "),Bie=n(j6,"CODE",{});var Cat=s(Bie);V4o=r(Cat,"model_type"),Cat.forEach(t),X4o=r(j6,` property of the config object (either
passed as an argument or loaded from `),Iie=n(j6,"CODE",{});var wat=s(Iie);z4o=r(wat,"pretrained_model_name_or_path"),wat.forEach(t),W4o=r(j6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nie=n(j6,"CODE",{});var Aat=s(Nie);Q4o=r(Aat,"pretrained_model_name_or_path"),Aat.forEach(t),H4o=r(j6,":"),j6.forEach(t),U4o=i(ra),G=n(ra,"UL",{});var O=s(G);n_=n(O,"LI",{});var WLe=s(n_);qie=n(WLe,"STRONG",{});var yat=s(qie);J4o=r(yat,"albert"),yat.forEach(t),Y4o=r(WLe," \u2014 "),Bq=n(WLe,"A",{href:!0});var Lat=s(Bq);K4o=r(Lat,"AlbertForPreTraining"),Lat.forEach(t),Z4o=r(WLe," (ALBERT model)"),WLe.forEach(t),eEo=i(O),s_=n(O,"LI",{});var QLe=s(s_);jie=n(QLe,"STRONG",{});var xat=s(jie);oEo=r(xat,"bart"),xat.forEach(t),rEo=r(QLe," \u2014 "),Iq=n(QLe,"A",{href:!0});var $at=s(Iq);tEo=r($at,"BartForConditionalGeneration"),$at.forEach(t),aEo=r(QLe," (BART model)"),QLe.forEach(t),nEo=i(O),l_=n(O,"LI",{});var HLe=s(l_);Die=n(HLe,"STRONG",{});var kat=s(Die);sEo=r(kat,"bert"),kat.forEach(t),lEo=r(HLe," \u2014 "),Nq=n(HLe,"A",{href:!0});var Sat=s(Nq);iEo=r(Sat,"BertForPreTraining"),Sat.forEach(t),dEo=r(HLe," (BERT model)"),HLe.forEach(t),cEo=i(O),i_=n(O,"LI",{});var ULe=s(i_);Gie=n(ULe,"STRONG",{});var Rat=s(Gie);mEo=r(Rat,"big_bird"),Rat.forEach(t),fEo=r(ULe," \u2014 "),qq=n(ULe,"A",{href:!0});var Pat=s(qq);gEo=r(Pat,"BigBirdForPreTraining"),Pat.forEach(t),hEo=r(ULe," (BigBird model)"),ULe.forEach(t),uEo=i(O),d_=n(O,"LI",{});var JLe=s(d_);Oie=n(JLe,"STRONG",{});var Bat=s(Oie);pEo=r(Bat,"camembert"),Bat.forEach(t),_Eo=r(JLe," \u2014 "),jq=n(JLe,"A",{href:!0});var Iat=s(jq);bEo=r(Iat,"CamembertForMaskedLM"),Iat.forEach(t),vEo=r(JLe," (CamemBERT model)"),JLe.forEach(t),FEo=i(O),c_=n(O,"LI",{});var YLe=s(c_);Vie=n(YLe,"STRONG",{});var Nat=s(Vie);TEo=r(Nat,"ctrl"),Nat.forEach(t),MEo=r(YLe," \u2014 "),Dq=n(YLe,"A",{href:!0});var qat=s(Dq);EEo=r(qat,"CTRLLMHeadModel"),qat.forEach(t),CEo=r(YLe," (CTRL model)"),YLe.forEach(t),wEo=i(O),m_=n(O,"LI",{});var KLe=s(m_);Xie=n(KLe,"STRONG",{});var jat=s(Xie);AEo=r(jat,"data2vec-text"),jat.forEach(t),yEo=r(KLe," \u2014 "),Gq=n(KLe,"A",{href:!0});var Dat=s(Gq);LEo=r(Dat,"Data2VecTextForMaskedLM"),Dat.forEach(t),xEo=r(KLe," (Data2VecText model)"),KLe.forEach(t),$Eo=i(O),f_=n(O,"LI",{});var ZLe=s(f_);zie=n(ZLe,"STRONG",{});var Gat=s(zie);kEo=r(Gat,"deberta"),Gat.forEach(t),SEo=r(ZLe," \u2014 "),Oq=n(ZLe,"A",{href:!0});var Oat=s(Oq);REo=r(Oat,"DebertaForMaskedLM"),Oat.forEach(t),PEo=r(ZLe," (DeBERTa model)"),ZLe.forEach(t),BEo=i(O),g_=n(O,"LI",{});var e8e=s(g_);Wie=n(e8e,"STRONG",{});var Vat=s(Wie);IEo=r(Vat,"deberta-v2"),Vat.forEach(t),NEo=r(e8e," \u2014 "),Vq=n(e8e,"A",{href:!0});var Xat=s(Vq);qEo=r(Xat,"DebertaV2ForMaskedLM"),Xat.forEach(t),jEo=r(e8e," (DeBERTa-v2 model)"),e8e.forEach(t),DEo=i(O),h_=n(O,"LI",{});var o8e=s(h_);Qie=n(o8e,"STRONG",{});var zat=s(Qie);GEo=r(zat,"distilbert"),zat.forEach(t),OEo=r(o8e," \u2014 "),Xq=n(o8e,"A",{href:!0});var Wat=s(Xq);VEo=r(Wat,"DistilBertForMaskedLM"),Wat.forEach(t),XEo=r(o8e," (DistilBERT model)"),o8e.forEach(t),zEo=i(O),u_=n(O,"LI",{});var r8e=s(u_);Hie=n(r8e,"STRONG",{});var Qat=s(Hie);WEo=r(Qat,"electra"),Qat.forEach(t),QEo=r(r8e," \u2014 "),zq=n(r8e,"A",{href:!0});var Hat=s(zq);HEo=r(Hat,"ElectraForPreTraining"),Hat.forEach(t),UEo=r(r8e," (ELECTRA model)"),r8e.forEach(t),JEo=i(O),p_=n(O,"LI",{});var t8e=s(p_);Uie=n(t8e,"STRONG",{});var Uat=s(Uie);YEo=r(Uat,"flaubert"),Uat.forEach(t),KEo=r(t8e," \u2014 "),Wq=n(t8e,"A",{href:!0});var Jat=s(Wq);ZEo=r(Jat,"FlaubertWithLMHeadModel"),Jat.forEach(t),eCo=r(t8e," (FlauBERT model)"),t8e.forEach(t),oCo=i(O),__=n(O,"LI",{});var a8e=s(__);Jie=n(a8e,"STRONG",{});var Yat=s(Jie);rCo=r(Yat,"flava"),Yat.forEach(t),tCo=r(a8e," \u2014 "),Qq=n(a8e,"A",{href:!0});var Kat=s(Qq);aCo=r(Kat,"FlavaForPreTraining"),Kat.forEach(t),nCo=r(a8e," (Flava model)"),a8e.forEach(t),sCo=i(O),b_=n(O,"LI",{});var n8e=s(b_);Yie=n(n8e,"STRONG",{});var Zat=s(Yie);lCo=r(Zat,"fnet"),Zat.forEach(t),iCo=r(n8e," \u2014 "),Hq=n(n8e,"A",{href:!0});var ent=s(Hq);dCo=r(ent,"FNetForPreTraining"),ent.forEach(t),cCo=r(n8e," (FNet model)"),n8e.forEach(t),mCo=i(O),v_=n(O,"LI",{});var s8e=s(v_);Kie=n(s8e,"STRONG",{});var ont=s(Kie);fCo=r(ont,"fsmt"),ont.forEach(t),gCo=r(s8e," \u2014 "),Uq=n(s8e,"A",{href:!0});var rnt=s(Uq);hCo=r(rnt,"FSMTForConditionalGeneration"),rnt.forEach(t),uCo=r(s8e," (FairSeq Machine-Translation model)"),s8e.forEach(t),pCo=i(O),F_=n(O,"LI",{});var l8e=s(F_);Zie=n(l8e,"STRONG",{});var tnt=s(Zie);_Co=r(tnt,"funnel"),tnt.forEach(t),bCo=r(l8e," \u2014 "),Jq=n(l8e,"A",{href:!0});var ant=s(Jq);vCo=r(ant,"FunnelForPreTraining"),ant.forEach(t),FCo=r(l8e," (Funnel Transformer model)"),l8e.forEach(t),TCo=i(O),T_=n(O,"LI",{});var i8e=s(T_);ede=n(i8e,"STRONG",{});var nnt=s(ede);MCo=r(nnt,"gpt2"),nnt.forEach(t),ECo=r(i8e," \u2014 "),Yq=n(i8e,"A",{href:!0});var snt=s(Yq);CCo=r(snt,"GPT2LMHeadModel"),snt.forEach(t),wCo=r(i8e," (OpenAI GPT-2 model)"),i8e.forEach(t),ACo=i(O),M_=n(O,"LI",{});var d8e=s(M_);ode=n(d8e,"STRONG",{});var lnt=s(ode);yCo=r(lnt,"ibert"),lnt.forEach(t),LCo=r(d8e," \u2014 "),Kq=n(d8e,"A",{href:!0});var int=s(Kq);xCo=r(int,"IBertForMaskedLM"),int.forEach(t),$Co=r(d8e," (I-BERT model)"),d8e.forEach(t),kCo=i(O),E_=n(O,"LI",{});var c8e=s(E_);rde=n(c8e,"STRONG",{});var dnt=s(rde);SCo=r(dnt,"layoutlm"),dnt.forEach(t),RCo=r(c8e," \u2014 "),Zq=n(c8e,"A",{href:!0});var cnt=s(Zq);PCo=r(cnt,"LayoutLMForMaskedLM"),cnt.forEach(t),BCo=r(c8e," (LayoutLM model)"),c8e.forEach(t),ICo=i(O),C_=n(O,"LI",{});var m8e=s(C_);tde=n(m8e,"STRONG",{});var mnt=s(tde);NCo=r(mnt,"longformer"),mnt.forEach(t),qCo=r(m8e," \u2014 "),ej=n(m8e,"A",{href:!0});var fnt=s(ej);jCo=r(fnt,"LongformerForMaskedLM"),fnt.forEach(t),DCo=r(m8e," (Longformer model)"),m8e.forEach(t),GCo=i(O),w_=n(O,"LI",{});var f8e=s(w_);ade=n(f8e,"STRONG",{});var gnt=s(ade);OCo=r(gnt,"lxmert"),gnt.forEach(t),VCo=r(f8e," \u2014 "),oj=n(f8e,"A",{href:!0});var hnt=s(oj);XCo=r(hnt,"LxmertForPreTraining"),hnt.forEach(t),zCo=r(f8e," (LXMERT model)"),f8e.forEach(t),WCo=i(O),A_=n(O,"LI",{});var g8e=s(A_);nde=n(g8e,"STRONG",{});var unt=s(nde);QCo=r(unt,"megatron-bert"),unt.forEach(t),HCo=r(g8e," \u2014 "),rj=n(g8e,"A",{href:!0});var pnt=s(rj);UCo=r(pnt,"MegatronBertForPreTraining"),pnt.forEach(t),JCo=r(g8e," (MegatronBert model)"),g8e.forEach(t),YCo=i(O),y_=n(O,"LI",{});var h8e=s(y_);sde=n(h8e,"STRONG",{});var _nt=s(sde);KCo=r(_nt,"mobilebert"),_nt.forEach(t),ZCo=r(h8e," \u2014 "),tj=n(h8e,"A",{href:!0});var bnt=s(tj);e5o=r(bnt,"MobileBertForPreTraining"),bnt.forEach(t),o5o=r(h8e," (MobileBERT model)"),h8e.forEach(t),r5o=i(O),L_=n(O,"LI",{});var u8e=s(L_);lde=n(u8e,"STRONG",{});var vnt=s(lde);t5o=r(vnt,"mpnet"),vnt.forEach(t),a5o=r(u8e," \u2014 "),aj=n(u8e,"A",{href:!0});var Fnt=s(aj);n5o=r(Fnt,"MPNetForMaskedLM"),Fnt.forEach(t),s5o=r(u8e," (MPNet model)"),u8e.forEach(t),l5o=i(O),x_=n(O,"LI",{});var p8e=s(x_);ide=n(p8e,"STRONG",{});var Tnt=s(ide);i5o=r(Tnt,"openai-gpt"),Tnt.forEach(t),d5o=r(p8e," \u2014 "),nj=n(p8e,"A",{href:!0});var Mnt=s(nj);c5o=r(Mnt,"OpenAIGPTLMHeadModel"),Mnt.forEach(t),m5o=r(p8e," (OpenAI GPT model)"),p8e.forEach(t),f5o=i(O),$_=n(O,"LI",{});var _8e=s($_);dde=n(_8e,"STRONG",{});var Ent=s(dde);g5o=r(Ent,"retribert"),Ent.forEach(t),h5o=r(_8e," \u2014 "),sj=n(_8e,"A",{href:!0});var Cnt=s(sj);u5o=r(Cnt,"RetriBertModel"),Cnt.forEach(t),p5o=r(_8e," (RetriBERT model)"),_8e.forEach(t),_5o=i(O),k_=n(O,"LI",{});var b8e=s(k_);cde=n(b8e,"STRONG",{});var wnt=s(cde);b5o=r(wnt,"roberta"),wnt.forEach(t),v5o=r(b8e," \u2014 "),lj=n(b8e,"A",{href:!0});var Ant=s(lj);F5o=r(Ant,"RobertaForMaskedLM"),Ant.forEach(t),T5o=r(b8e," (RoBERTa model)"),b8e.forEach(t),M5o=i(O),S_=n(O,"LI",{});var v8e=s(S_);mde=n(v8e,"STRONG",{});var ynt=s(mde);E5o=r(ynt,"splinter"),ynt.forEach(t),C5o=r(v8e," \u2014 "),ij=n(v8e,"A",{href:!0});var Lnt=s(ij);w5o=r(Lnt,"SplinterForPreTraining"),Lnt.forEach(t),A5o=r(v8e," (Splinter model)"),v8e.forEach(t),y5o=i(O),R_=n(O,"LI",{});var F8e=s(R_);fde=n(F8e,"STRONG",{});var xnt=s(fde);L5o=r(xnt,"squeezebert"),xnt.forEach(t),x5o=r(F8e," \u2014 "),dj=n(F8e,"A",{href:!0});var $nt=s(dj);$5o=r($nt,"SqueezeBertForMaskedLM"),$nt.forEach(t),k5o=r(F8e," (SqueezeBERT model)"),F8e.forEach(t),S5o=i(O),P_=n(O,"LI",{});var T8e=s(P_);gde=n(T8e,"STRONG",{});var knt=s(gde);R5o=r(knt,"t5"),knt.forEach(t),P5o=r(T8e," \u2014 "),cj=n(T8e,"A",{href:!0});var Snt=s(cj);B5o=r(Snt,"T5ForConditionalGeneration"),Snt.forEach(t),I5o=r(T8e," (T5 model)"),T8e.forEach(t),N5o=i(O),B_=n(O,"LI",{});var M8e=s(B_);hde=n(M8e,"STRONG",{});var Rnt=s(hde);q5o=r(Rnt,"tapas"),Rnt.forEach(t),j5o=r(M8e," \u2014 "),mj=n(M8e,"A",{href:!0});var Pnt=s(mj);D5o=r(Pnt,"TapasForMaskedLM"),Pnt.forEach(t),G5o=r(M8e," (TAPAS model)"),M8e.forEach(t),O5o=i(O),I_=n(O,"LI",{});var E8e=s(I_);ude=n(E8e,"STRONG",{});var Bnt=s(ude);V5o=r(Bnt,"transfo-xl"),Bnt.forEach(t),X5o=r(E8e," \u2014 "),fj=n(E8e,"A",{href:!0});var Int=s(fj);z5o=r(Int,"TransfoXLLMHeadModel"),Int.forEach(t),W5o=r(E8e," (Transformer-XL model)"),E8e.forEach(t),Q5o=i(O),N_=n(O,"LI",{});var C8e=s(N_);pde=n(C8e,"STRONG",{});var Nnt=s(pde);H5o=r(Nnt,"unispeech"),Nnt.forEach(t),U5o=r(C8e," \u2014 "),gj=n(C8e,"A",{href:!0});var qnt=s(gj);J5o=r(qnt,"UniSpeechForPreTraining"),qnt.forEach(t),Y5o=r(C8e," (UniSpeech model)"),C8e.forEach(t),K5o=i(O),q_=n(O,"LI",{});var w8e=s(q_);_de=n(w8e,"STRONG",{});var jnt=s(_de);Z5o=r(jnt,"unispeech-sat"),jnt.forEach(t),e3o=r(w8e," \u2014 "),hj=n(w8e,"A",{href:!0});var Dnt=s(hj);o3o=r(Dnt,"UniSpeechSatForPreTraining"),Dnt.forEach(t),r3o=r(w8e," (UniSpeechSat model)"),w8e.forEach(t),t3o=i(O),j_=n(O,"LI",{});var A8e=s(j_);bde=n(A8e,"STRONG",{});var Gnt=s(bde);a3o=r(Gnt,"visual_bert"),Gnt.forEach(t),n3o=r(A8e," \u2014 "),uj=n(A8e,"A",{href:!0});var Ont=s(uj);s3o=r(Ont,"VisualBertForPreTraining"),Ont.forEach(t),l3o=r(A8e," (VisualBert model)"),A8e.forEach(t),i3o=i(O),D_=n(O,"LI",{});var y8e=s(D_);vde=n(y8e,"STRONG",{});var Vnt=s(vde);d3o=r(Vnt,"vit_mae"),Vnt.forEach(t),c3o=r(y8e," \u2014 "),pj=n(y8e,"A",{href:!0});var Xnt=s(pj);m3o=r(Xnt,"ViTMAEForPreTraining"),Xnt.forEach(t),f3o=r(y8e," (ViTMAE model)"),y8e.forEach(t),g3o=i(O),G_=n(O,"LI",{});var L8e=s(G_);Fde=n(L8e,"STRONG",{});var znt=s(Fde);h3o=r(znt,"wav2vec2"),znt.forEach(t),u3o=r(L8e," \u2014 "),_j=n(L8e,"A",{href:!0});var Wnt=s(_j);p3o=r(Wnt,"Wav2Vec2ForPreTraining"),Wnt.forEach(t),_3o=r(L8e," (Wav2Vec2 model)"),L8e.forEach(t),b3o=i(O),O_=n(O,"LI",{});var x8e=s(O_);Tde=n(x8e,"STRONG",{});var Qnt=s(Tde);v3o=r(Qnt,"wav2vec2-conformer"),Qnt.forEach(t),F3o=r(x8e," \u2014 "),bj=n(x8e,"A",{href:!0});var Hnt=s(bj);T3o=r(Hnt,"Wav2Vec2ConformerForPreTraining"),Hnt.forEach(t),M3o=r(x8e," (Wav2Vec2-Conformer model)"),x8e.forEach(t),E3o=i(O),V_=n(O,"LI",{});var $8e=s(V_);Mde=n($8e,"STRONG",{});var Unt=s(Mde);C3o=r(Unt,"xlm"),Unt.forEach(t),w3o=r($8e," \u2014 "),vj=n($8e,"A",{href:!0});var Jnt=s(vj);A3o=r(Jnt,"XLMWithLMHeadModel"),Jnt.forEach(t),y3o=r($8e," (XLM model)"),$8e.forEach(t),L3o=i(O),X_=n(O,"LI",{});var k8e=s(X_);Ede=n(k8e,"STRONG",{});var Ynt=s(Ede);x3o=r(Ynt,"xlm-roberta"),Ynt.forEach(t),$3o=r(k8e," \u2014 "),Fj=n(k8e,"A",{href:!0});var Knt=s(Fj);k3o=r(Knt,"XLMRobertaForMaskedLM"),Knt.forEach(t),S3o=r(k8e," (XLM-RoBERTa model)"),k8e.forEach(t),R3o=i(O),z_=n(O,"LI",{});var S8e=s(z_);Cde=n(S8e,"STRONG",{});var Znt=s(Cde);P3o=r(Znt,"xlm-roberta-xl"),Znt.forEach(t),B3o=r(S8e," \u2014 "),Tj=n(S8e,"A",{href:!0});var est=s(Tj);I3o=r(est,"XLMRobertaXLForMaskedLM"),est.forEach(t),N3o=r(S8e," (XLM-RoBERTa-XL model)"),S8e.forEach(t),q3o=i(O),W_=n(O,"LI",{});var R8e=s(W_);wde=n(R8e,"STRONG",{});var ost=s(wde);j3o=r(ost,"xlnet"),ost.forEach(t),D3o=r(R8e," \u2014 "),Mj=n(R8e,"A",{href:!0});var rst=s(Mj);G3o=r(rst,"XLNetLMHeadModel"),rst.forEach(t),O3o=r(R8e," (XLNet model)"),R8e.forEach(t),O.forEach(t),V3o=i(ra),Q_=n(ra,"P",{});var P8e=s(Q_);X3o=r(P8e,"The model is set in evaluation mode by default using "),Ade=n(P8e,"CODE",{});var tst=s(Ade);z3o=r(tst,"model.eval()"),tst.forEach(t),W3o=r(P8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yde=n(P8e,"CODE",{});var ast=s(yde);Q3o=r(ast,"model.train()"),ast.forEach(t),P8e.forEach(t),H3o=i(ra),T(H_.$$.fragment,ra),ra.forEach(t),Os.forEach(t),Bqe=i(m),ki=n(m,"H2",{class:!0});var jDe=s(ki);U_=n(jDe,"A",{id:!0,class:!0,href:!0});var nst=s(U_);Lde=n(nst,"SPAN",{});var sst=s(Lde);T(hL.$$.fragment,sst),sst.forEach(t),nst.forEach(t),U3o=i(jDe),xde=n(jDe,"SPAN",{});var lst=s(xde);J3o=r(lst,"AutoModelForCausalLM"),lst.forEach(t),jDe.forEach(t),Iqe=i(m),$o=n(m,"DIV",{class:!0});var Vs=s($o);T(uL.$$.fragment,Vs),Y3o=i(Vs),Si=n(Vs,"P",{});var xZ=s(Si);K3o=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Ej=n(xZ,"A",{href:!0});var ist=s(Ej);Z3o=r(ist,"from_pretrained()"),ist.forEach(t),ewo=r(xZ," class method or the "),Cj=n(xZ,"A",{href:!0});var dst=s(Cj);owo=r(dst,"from_config()"),dst.forEach(t),rwo=r(xZ,` class
method.`),xZ.forEach(t),two=i(Vs),pL=n(Vs,"P",{});var DDe=s(pL);awo=r(DDe,"This class cannot be instantiated directly using "),$de=n(DDe,"CODE",{});var cst=s($de);nwo=r(cst,"__init__()"),cst.forEach(t),swo=r(DDe," (throws an error)."),DDe.forEach(t),lwo=i(Vs),nt=n(Vs,"DIV",{class:!0});var D6=s(nt);T(_L.$$.fragment,D6),iwo=i(D6),kde=n(D6,"P",{});var mst=s(kde);dwo=r(mst,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),mst.forEach(t),cwo=i(D6),Ri=n(D6,"P",{});var $Z=s(Ri);mwo=r($Z,`Note:
Loading a model from its configuration file does `),Sde=n($Z,"STRONG",{});var fst=s(Sde);fwo=r(fst,"not"),fst.forEach(t),gwo=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),wj=n($Z,"A",{href:!0});var gst=s(wj);hwo=r(gst,"from_pretrained()"),gst.forEach(t),uwo=r($Z," to load the model weights."),$Z.forEach(t),pwo=i(D6),T(J_.$$.fragment,D6),D6.forEach(t),_wo=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(bL.$$.fragment,ta),bwo=i(ta),Rde=n(ta,"P",{});var hst=s(Rde);vwo=r(hst,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hst.forEach(t),Fwo=i(ta),$a=n(ta,"P",{});var G6=s($a);Two=r(G6,"The model class to instantiate is selected based on the "),Pde=n(G6,"CODE",{});var ust=s(Pde);Mwo=r(ust,"model_type"),ust.forEach(t),Ewo=r(G6,` property of the config object (either
passed as an argument or loaded from `),Bde=n(G6,"CODE",{});var pst=s(Bde);Cwo=r(pst,"pretrained_model_name_or_path"),pst.forEach(t),wwo=r(G6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ide=n(G6,"CODE",{});var _st=s(Ide);Awo=r(_st,"pretrained_model_name_or_path"),_st.forEach(t),ywo=r(G6,":"),G6.forEach(t),Lwo=i(ta),z=n(ta,"UL",{});var Q=s(z);Y_=n(Q,"LI",{});var B8e=s(Y_);Nde=n(B8e,"STRONG",{});var bst=s(Nde);xwo=r(bst,"bart"),bst.forEach(t),$wo=r(B8e," \u2014 "),Aj=n(B8e,"A",{href:!0});var vst=s(Aj);kwo=r(vst,"BartForCausalLM"),vst.forEach(t),Swo=r(B8e," (BART model)"),B8e.forEach(t),Rwo=i(Q),K_=n(Q,"LI",{});var I8e=s(K_);qde=n(I8e,"STRONG",{});var Fst=s(qde);Pwo=r(Fst,"bert"),Fst.forEach(t),Bwo=r(I8e," \u2014 "),yj=n(I8e,"A",{href:!0});var Tst=s(yj);Iwo=r(Tst,"BertLMHeadModel"),Tst.forEach(t),Nwo=r(I8e," (BERT model)"),I8e.forEach(t),qwo=i(Q),Z_=n(Q,"LI",{});var N8e=s(Z_);jde=n(N8e,"STRONG",{});var Mst=s(jde);jwo=r(Mst,"bert-generation"),Mst.forEach(t),Dwo=r(N8e," \u2014 "),Lj=n(N8e,"A",{href:!0});var Est=s(Lj);Gwo=r(Est,"BertGenerationDecoder"),Est.forEach(t),Owo=r(N8e," (Bert Generation model)"),N8e.forEach(t),Vwo=i(Q),eb=n(Q,"LI",{});var q8e=s(eb);Dde=n(q8e,"STRONG",{});var Cst=s(Dde);Xwo=r(Cst,"big_bird"),Cst.forEach(t),zwo=r(q8e," \u2014 "),xj=n(q8e,"A",{href:!0});var wst=s(xj);Wwo=r(wst,"BigBirdForCausalLM"),wst.forEach(t),Qwo=r(q8e," (BigBird model)"),q8e.forEach(t),Hwo=i(Q),ob=n(Q,"LI",{});var j8e=s(ob);Gde=n(j8e,"STRONG",{});var Ast=s(Gde);Uwo=r(Ast,"bigbird_pegasus"),Ast.forEach(t),Jwo=r(j8e," \u2014 "),$j=n(j8e,"A",{href:!0});var yst=s($j);Ywo=r(yst,"BigBirdPegasusForCausalLM"),yst.forEach(t),Kwo=r(j8e," (BigBirdPegasus model)"),j8e.forEach(t),Zwo=i(Q),rb=n(Q,"LI",{});var D8e=s(rb);Ode=n(D8e,"STRONG",{});var Lst=s(Ode);e0o=r(Lst,"blenderbot"),Lst.forEach(t),o0o=r(D8e," \u2014 "),kj=n(D8e,"A",{href:!0});var xst=s(kj);r0o=r(xst,"BlenderbotForCausalLM"),xst.forEach(t),t0o=r(D8e," (Blenderbot model)"),D8e.forEach(t),a0o=i(Q),tb=n(Q,"LI",{});var G8e=s(tb);Vde=n(G8e,"STRONG",{});var $st=s(Vde);n0o=r($st,"blenderbot-small"),$st.forEach(t),s0o=r(G8e," \u2014 "),Sj=n(G8e,"A",{href:!0});var kst=s(Sj);l0o=r(kst,"BlenderbotSmallForCausalLM"),kst.forEach(t),i0o=r(G8e," (BlenderbotSmall model)"),G8e.forEach(t),d0o=i(Q),ab=n(Q,"LI",{});var O8e=s(ab);Xde=n(O8e,"STRONG",{});var Sst=s(Xde);c0o=r(Sst,"camembert"),Sst.forEach(t),m0o=r(O8e," \u2014 "),Rj=n(O8e,"A",{href:!0});var Rst=s(Rj);f0o=r(Rst,"CamembertForCausalLM"),Rst.forEach(t),g0o=r(O8e," (CamemBERT model)"),O8e.forEach(t),h0o=i(Q),nb=n(Q,"LI",{});var V8e=s(nb);zde=n(V8e,"STRONG",{});var Pst=s(zde);u0o=r(Pst,"ctrl"),Pst.forEach(t),p0o=r(V8e," \u2014 "),Pj=n(V8e,"A",{href:!0});var Bst=s(Pj);_0o=r(Bst,"CTRLLMHeadModel"),Bst.forEach(t),b0o=r(V8e," (CTRL model)"),V8e.forEach(t),v0o=i(Q),sb=n(Q,"LI",{});var X8e=s(sb);Wde=n(X8e,"STRONG",{});var Ist=s(Wde);F0o=r(Ist,"data2vec-text"),Ist.forEach(t),T0o=r(X8e," \u2014 "),Bj=n(X8e,"A",{href:!0});var Nst=s(Bj);M0o=r(Nst,"Data2VecTextForCausalLM"),Nst.forEach(t),E0o=r(X8e," (Data2VecText model)"),X8e.forEach(t),C0o=i(Q),lb=n(Q,"LI",{});var z8e=s(lb);Qde=n(z8e,"STRONG",{});var qst=s(Qde);w0o=r(qst,"electra"),qst.forEach(t),A0o=r(z8e," \u2014 "),Ij=n(z8e,"A",{href:!0});var jst=s(Ij);y0o=r(jst,"ElectraForCausalLM"),jst.forEach(t),L0o=r(z8e," (ELECTRA model)"),z8e.forEach(t),x0o=i(Q),ib=n(Q,"LI",{});var W8e=s(ib);Hde=n(W8e,"STRONG",{});var Dst=s(Hde);$0o=r(Dst,"gpt2"),Dst.forEach(t),k0o=r(W8e," \u2014 "),Nj=n(W8e,"A",{href:!0});var Gst=s(Nj);S0o=r(Gst,"GPT2LMHeadModel"),Gst.forEach(t),R0o=r(W8e," (OpenAI GPT-2 model)"),W8e.forEach(t),P0o=i(Q),db=n(Q,"LI",{});var Q8e=s(db);Ude=n(Q8e,"STRONG",{});var Ost=s(Ude);B0o=r(Ost,"gpt_neo"),Ost.forEach(t),I0o=r(Q8e," \u2014 "),qj=n(Q8e,"A",{href:!0});var Vst=s(qj);N0o=r(Vst,"GPTNeoForCausalLM"),Vst.forEach(t),q0o=r(Q8e," (GPT Neo model)"),Q8e.forEach(t),j0o=i(Q),cb=n(Q,"LI",{});var H8e=s(cb);Jde=n(H8e,"STRONG",{});var Xst=s(Jde);D0o=r(Xst,"gpt_neox"),Xst.forEach(t),G0o=r(H8e," \u2014 "),jj=n(H8e,"A",{href:!0});var zst=s(jj);O0o=r(zst,"GPTNeoXForCausalLM"),zst.forEach(t),V0o=r(H8e," (GPT NeoX model)"),H8e.forEach(t),X0o=i(Q),mb=n(Q,"LI",{});var U8e=s(mb);Yde=n(U8e,"STRONG",{});var Wst=s(Yde);z0o=r(Wst,"gptj"),Wst.forEach(t),W0o=r(U8e," \u2014 "),Dj=n(U8e,"A",{href:!0});var Qst=s(Dj);Q0o=r(Qst,"GPTJForCausalLM"),Qst.forEach(t),H0o=r(U8e," (GPT-J model)"),U8e.forEach(t),U0o=i(Q),fb=n(Q,"LI",{});var J8e=s(fb);Kde=n(J8e,"STRONG",{});var Hst=s(Kde);J0o=r(Hst,"marian"),Hst.forEach(t),Y0o=r(J8e," \u2014 "),Gj=n(J8e,"A",{href:!0});var Ust=s(Gj);K0o=r(Ust,"MarianForCausalLM"),Ust.forEach(t),Z0o=r(J8e," (Marian model)"),J8e.forEach(t),e6o=i(Q),gb=n(Q,"LI",{});var Y8e=s(gb);Zde=n(Y8e,"STRONG",{});var Jst=s(Zde);o6o=r(Jst,"mbart"),Jst.forEach(t),r6o=r(Y8e," \u2014 "),Oj=n(Y8e,"A",{href:!0});var Yst=s(Oj);t6o=r(Yst,"MBartForCausalLM"),Yst.forEach(t),a6o=r(Y8e," (mBART model)"),Y8e.forEach(t),n6o=i(Q),hb=n(Q,"LI",{});var K8e=s(hb);ece=n(K8e,"STRONG",{});var Kst=s(ece);s6o=r(Kst,"megatron-bert"),Kst.forEach(t),l6o=r(K8e," \u2014 "),Vj=n(K8e,"A",{href:!0});var Zst=s(Vj);i6o=r(Zst,"MegatronBertForCausalLM"),Zst.forEach(t),d6o=r(K8e," (MegatronBert model)"),K8e.forEach(t),c6o=i(Q),ub=n(Q,"LI",{});var Z8e=s(ub);oce=n(Z8e,"STRONG",{});var elt=s(oce);m6o=r(elt,"openai-gpt"),elt.forEach(t),f6o=r(Z8e," \u2014 "),Xj=n(Z8e,"A",{href:!0});var olt=s(Xj);g6o=r(olt,"OpenAIGPTLMHeadModel"),olt.forEach(t),h6o=r(Z8e," (OpenAI GPT model)"),Z8e.forEach(t),u6o=i(Q),pb=n(Q,"LI",{});var e7e=s(pb);rce=n(e7e,"STRONG",{});var rlt=s(rce);p6o=r(rlt,"opt"),rlt.forEach(t),_6o=r(e7e," \u2014 "),zj=n(e7e,"A",{href:!0});var tlt=s(zj);b6o=r(tlt,"OPTForCausalLM"),tlt.forEach(t),v6o=r(e7e," (OPT model)"),e7e.forEach(t),F6o=i(Q),_b=n(Q,"LI",{});var o7e=s(_b);tce=n(o7e,"STRONG",{});var alt=s(tce);T6o=r(alt,"pegasus"),alt.forEach(t),M6o=r(o7e," \u2014 "),Wj=n(o7e,"A",{href:!0});var nlt=s(Wj);E6o=r(nlt,"PegasusForCausalLM"),nlt.forEach(t),C6o=r(o7e," (Pegasus model)"),o7e.forEach(t),w6o=i(Q),bb=n(Q,"LI",{});var r7e=s(bb);ace=n(r7e,"STRONG",{});var slt=s(ace);A6o=r(slt,"plbart"),slt.forEach(t),y6o=r(r7e," \u2014 "),Qj=n(r7e,"A",{href:!0});var llt=s(Qj);L6o=r(llt,"PLBartForCausalLM"),llt.forEach(t),x6o=r(r7e," (PLBart model)"),r7e.forEach(t),$6o=i(Q),vb=n(Q,"LI",{});var t7e=s(vb);nce=n(t7e,"STRONG",{});var ilt=s(nce);k6o=r(ilt,"prophetnet"),ilt.forEach(t),S6o=r(t7e," \u2014 "),Hj=n(t7e,"A",{href:!0});var dlt=s(Hj);R6o=r(dlt,"ProphetNetForCausalLM"),dlt.forEach(t),P6o=r(t7e," (ProphetNet model)"),t7e.forEach(t),B6o=i(Q),Fb=n(Q,"LI",{});var a7e=s(Fb);sce=n(a7e,"STRONG",{});var clt=s(sce);I6o=r(clt,"qdqbert"),clt.forEach(t),N6o=r(a7e," \u2014 "),Uj=n(a7e,"A",{href:!0});var mlt=s(Uj);q6o=r(mlt,"QDQBertLMHeadModel"),mlt.forEach(t),j6o=r(a7e," (QDQBert model)"),a7e.forEach(t),D6o=i(Q),Tb=n(Q,"LI",{});var n7e=s(Tb);lce=n(n7e,"STRONG",{});var flt=s(lce);G6o=r(flt,"reformer"),flt.forEach(t),O6o=r(n7e," \u2014 "),Jj=n(n7e,"A",{href:!0});var glt=s(Jj);V6o=r(glt,"ReformerModelWithLMHead"),glt.forEach(t),X6o=r(n7e," (Reformer model)"),n7e.forEach(t),z6o=i(Q),Mb=n(Q,"LI",{});var s7e=s(Mb);ice=n(s7e,"STRONG",{});var hlt=s(ice);W6o=r(hlt,"rembert"),hlt.forEach(t),Q6o=r(s7e," \u2014 "),Yj=n(s7e,"A",{href:!0});var ult=s(Yj);H6o=r(ult,"RemBertForCausalLM"),ult.forEach(t),U6o=r(s7e," (RemBERT model)"),s7e.forEach(t),J6o=i(Q),Eb=n(Q,"LI",{});var l7e=s(Eb);dce=n(l7e,"STRONG",{});var plt=s(dce);Y6o=r(plt,"roberta"),plt.forEach(t),K6o=r(l7e," \u2014 "),Kj=n(l7e,"A",{href:!0});var _lt=s(Kj);Z6o=r(_lt,"RobertaForCausalLM"),_lt.forEach(t),eAo=r(l7e," (RoBERTa model)"),l7e.forEach(t),oAo=i(Q),Cb=n(Q,"LI",{});var i7e=s(Cb);cce=n(i7e,"STRONG",{});var blt=s(cce);rAo=r(blt,"roformer"),blt.forEach(t),tAo=r(i7e," \u2014 "),Zj=n(i7e,"A",{href:!0});var vlt=s(Zj);aAo=r(vlt,"RoFormerForCausalLM"),vlt.forEach(t),nAo=r(i7e," (RoFormer model)"),i7e.forEach(t),sAo=i(Q),wb=n(Q,"LI",{});var d7e=s(wb);mce=n(d7e,"STRONG",{});var Flt=s(mce);lAo=r(Flt,"speech_to_text_2"),Flt.forEach(t),iAo=r(d7e," \u2014 "),eD=n(d7e,"A",{href:!0});var Tlt=s(eD);dAo=r(Tlt,"Speech2Text2ForCausalLM"),Tlt.forEach(t),cAo=r(d7e," (Speech2Text2 model)"),d7e.forEach(t),mAo=i(Q),Ab=n(Q,"LI",{});var c7e=s(Ab);fce=n(c7e,"STRONG",{});var Mlt=s(fce);fAo=r(Mlt,"transfo-xl"),Mlt.forEach(t),gAo=r(c7e," \u2014 "),oD=n(c7e,"A",{href:!0});var Elt=s(oD);hAo=r(Elt,"TransfoXLLMHeadModel"),Elt.forEach(t),uAo=r(c7e," (Transformer-XL model)"),c7e.forEach(t),pAo=i(Q),yb=n(Q,"LI",{});var m7e=s(yb);gce=n(m7e,"STRONG",{});var Clt=s(gce);_Ao=r(Clt,"trocr"),Clt.forEach(t),bAo=r(m7e," \u2014 "),rD=n(m7e,"A",{href:!0});var wlt=s(rD);vAo=r(wlt,"TrOCRForCausalLM"),wlt.forEach(t),FAo=r(m7e," (TrOCR model)"),m7e.forEach(t),TAo=i(Q),Lb=n(Q,"LI",{});var f7e=s(Lb);hce=n(f7e,"STRONG",{});var Alt=s(hce);MAo=r(Alt,"xglm"),Alt.forEach(t),EAo=r(f7e," \u2014 "),tD=n(f7e,"A",{href:!0});var ylt=s(tD);CAo=r(ylt,"XGLMForCausalLM"),ylt.forEach(t),wAo=r(f7e," (XGLM model)"),f7e.forEach(t),AAo=i(Q),xb=n(Q,"LI",{});var g7e=s(xb);uce=n(g7e,"STRONG",{});var Llt=s(uce);yAo=r(Llt,"xlm"),Llt.forEach(t),LAo=r(g7e," \u2014 "),aD=n(g7e,"A",{href:!0});var xlt=s(aD);xAo=r(xlt,"XLMWithLMHeadModel"),xlt.forEach(t),$Ao=r(g7e," (XLM model)"),g7e.forEach(t),kAo=i(Q),$b=n(Q,"LI",{});var h7e=s($b);pce=n(h7e,"STRONG",{});var $lt=s(pce);SAo=r($lt,"xlm-prophetnet"),$lt.forEach(t),RAo=r(h7e," \u2014 "),nD=n(h7e,"A",{href:!0});var klt=s(nD);PAo=r(klt,"XLMProphetNetForCausalLM"),klt.forEach(t),BAo=r(h7e," (XLMProphetNet model)"),h7e.forEach(t),IAo=i(Q),kb=n(Q,"LI",{});var u7e=s(kb);_ce=n(u7e,"STRONG",{});var Slt=s(_ce);NAo=r(Slt,"xlm-roberta"),Slt.forEach(t),qAo=r(u7e," \u2014 "),sD=n(u7e,"A",{href:!0});var Rlt=s(sD);jAo=r(Rlt,"XLMRobertaForCausalLM"),Rlt.forEach(t),DAo=r(u7e," (XLM-RoBERTa model)"),u7e.forEach(t),GAo=i(Q),Sb=n(Q,"LI",{});var p7e=s(Sb);bce=n(p7e,"STRONG",{});var Plt=s(bce);OAo=r(Plt,"xlm-roberta-xl"),Plt.forEach(t),VAo=r(p7e," \u2014 "),lD=n(p7e,"A",{href:!0});var Blt=s(lD);XAo=r(Blt,"XLMRobertaXLForCausalLM"),Blt.forEach(t),zAo=r(p7e," (XLM-RoBERTa-XL model)"),p7e.forEach(t),WAo=i(Q),Rb=n(Q,"LI",{});var _7e=s(Rb);vce=n(_7e,"STRONG",{});var Ilt=s(vce);QAo=r(Ilt,"xlnet"),Ilt.forEach(t),HAo=r(_7e," \u2014 "),iD=n(_7e,"A",{href:!0});var Nlt=s(iD);UAo=r(Nlt,"XLNetLMHeadModel"),Nlt.forEach(t),JAo=r(_7e," (XLNet model)"),_7e.forEach(t),Q.forEach(t),YAo=i(ta),Pb=n(ta,"P",{});var b7e=s(Pb);KAo=r(b7e,"The model is set in evaluation mode by default using "),Fce=n(b7e,"CODE",{});var qlt=s(Fce);ZAo=r(qlt,"model.eval()"),qlt.forEach(t),eyo=r(b7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tce=n(b7e,"CODE",{});var jlt=s(Tce);oyo=r(jlt,"model.train()"),jlt.forEach(t),b7e.forEach(t),ryo=i(ta),T(Bb.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),Nqe=i(m),Pi=n(m,"H2",{class:!0});var GDe=s(Pi);Ib=n(GDe,"A",{id:!0,class:!0,href:!0});var Dlt=s(Ib);Mce=n(Dlt,"SPAN",{});var Glt=s(Mce);T(vL.$$.fragment,Glt),Glt.forEach(t),Dlt.forEach(t),tyo=i(GDe),Ece=n(GDe,"SPAN",{});var Olt=s(Ece);ayo=r(Olt,"AutoModelForMaskedLM"),Olt.forEach(t),GDe.forEach(t),qqe=i(m),ko=n(m,"DIV",{class:!0});var Xs=s(ko);T(FL.$$.fragment,Xs),nyo=i(Xs),Bi=n(Xs,"P",{});var kZ=s(Bi);syo=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),dD=n(kZ,"A",{href:!0});var Vlt=s(dD);lyo=r(Vlt,"from_pretrained()"),Vlt.forEach(t),iyo=r(kZ," class method or the "),cD=n(kZ,"A",{href:!0});var Xlt=s(cD);dyo=r(Xlt,"from_config()"),Xlt.forEach(t),cyo=r(kZ,` class
method.`),kZ.forEach(t),myo=i(Xs),TL=n(Xs,"P",{});var ODe=s(TL);fyo=r(ODe,"This class cannot be instantiated directly using "),Cce=n(ODe,"CODE",{});var zlt=s(Cce);gyo=r(zlt,"__init__()"),zlt.forEach(t),hyo=r(ODe," (throws an error)."),ODe.forEach(t),uyo=i(Xs),st=n(Xs,"DIV",{class:!0});var O6=s(st);T(ML.$$.fragment,O6),pyo=i(O6),wce=n(O6,"P",{});var Wlt=s(wce);_yo=r(Wlt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Wlt.forEach(t),byo=i(O6),Ii=n(O6,"P",{});var SZ=s(Ii);vyo=r(SZ,`Note:
Loading a model from its configuration file does `),Ace=n(SZ,"STRONG",{});var Qlt=s(Ace);Fyo=r(Qlt,"not"),Qlt.forEach(t),Tyo=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mD=n(SZ,"A",{href:!0});var Hlt=s(mD);Myo=r(Hlt,"from_pretrained()"),Hlt.forEach(t),Eyo=r(SZ," to load the model weights."),SZ.forEach(t),Cyo=i(O6),T(Nb.$$.fragment,O6),O6.forEach(t),wyo=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(EL.$$.fragment,aa),Ayo=i(aa),yce=n(aa,"P",{});var Ult=s(yce);yyo=r(Ult,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ult.forEach(t),Lyo=i(aa),ka=n(aa,"P",{});var V6=s(ka);xyo=r(V6,"The model class to instantiate is selected based on the "),Lce=n(V6,"CODE",{});var Jlt=s(Lce);$yo=r(Jlt,"model_type"),Jlt.forEach(t),kyo=r(V6,` property of the config object (either
passed as an argument or loaded from `),xce=n(V6,"CODE",{});var Ylt=s(xce);Syo=r(Ylt,"pretrained_model_name_or_path"),Ylt.forEach(t),Ryo=r(V6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ce=n(V6,"CODE",{});var Klt=s($ce);Pyo=r(Klt,"pretrained_model_name_or_path"),Klt.forEach(t),Byo=r(V6,":"),V6.forEach(t),Iyo=i(aa),W=n(aa,"UL",{});var H=s(W);qb=n(H,"LI",{});var v7e=s(qb);kce=n(v7e,"STRONG",{});var Zlt=s(kce);Nyo=r(Zlt,"albert"),Zlt.forEach(t),qyo=r(v7e," \u2014 "),fD=n(v7e,"A",{href:!0});var eit=s(fD);jyo=r(eit,"AlbertForMaskedLM"),eit.forEach(t),Dyo=r(v7e," (ALBERT model)"),v7e.forEach(t),Gyo=i(H),jb=n(H,"LI",{});var F7e=s(jb);Sce=n(F7e,"STRONG",{});var oit=s(Sce);Oyo=r(oit,"bart"),oit.forEach(t),Vyo=r(F7e," \u2014 "),gD=n(F7e,"A",{href:!0});var rit=s(gD);Xyo=r(rit,"BartForConditionalGeneration"),rit.forEach(t),zyo=r(F7e," (BART model)"),F7e.forEach(t),Wyo=i(H),Db=n(H,"LI",{});var T7e=s(Db);Rce=n(T7e,"STRONG",{});var tit=s(Rce);Qyo=r(tit,"bert"),tit.forEach(t),Hyo=r(T7e," \u2014 "),hD=n(T7e,"A",{href:!0});var ait=s(hD);Uyo=r(ait,"BertForMaskedLM"),ait.forEach(t),Jyo=r(T7e," (BERT model)"),T7e.forEach(t),Yyo=i(H),Gb=n(H,"LI",{});var M7e=s(Gb);Pce=n(M7e,"STRONG",{});var nit=s(Pce);Kyo=r(nit,"big_bird"),nit.forEach(t),Zyo=r(M7e," \u2014 "),uD=n(M7e,"A",{href:!0});var sit=s(uD);eLo=r(sit,"BigBirdForMaskedLM"),sit.forEach(t),oLo=r(M7e," (BigBird model)"),M7e.forEach(t),rLo=i(H),Ob=n(H,"LI",{});var E7e=s(Ob);Bce=n(E7e,"STRONG",{});var lit=s(Bce);tLo=r(lit,"camembert"),lit.forEach(t),aLo=r(E7e," \u2014 "),pD=n(E7e,"A",{href:!0});var iit=s(pD);nLo=r(iit,"CamembertForMaskedLM"),iit.forEach(t),sLo=r(E7e," (CamemBERT model)"),E7e.forEach(t),lLo=i(H),Vb=n(H,"LI",{});var C7e=s(Vb);Ice=n(C7e,"STRONG",{});var dit=s(Ice);iLo=r(dit,"convbert"),dit.forEach(t),dLo=r(C7e," \u2014 "),_D=n(C7e,"A",{href:!0});var cit=s(_D);cLo=r(cit,"ConvBertForMaskedLM"),cit.forEach(t),mLo=r(C7e," (ConvBERT model)"),C7e.forEach(t),fLo=i(H),Xb=n(H,"LI",{});var w7e=s(Xb);Nce=n(w7e,"STRONG",{});var mit=s(Nce);gLo=r(mit,"data2vec-text"),mit.forEach(t),hLo=r(w7e," \u2014 "),bD=n(w7e,"A",{href:!0});var fit=s(bD);uLo=r(fit,"Data2VecTextForMaskedLM"),fit.forEach(t),pLo=r(w7e," (Data2VecText model)"),w7e.forEach(t),_Lo=i(H),zb=n(H,"LI",{});var A7e=s(zb);qce=n(A7e,"STRONG",{});var git=s(qce);bLo=r(git,"deberta"),git.forEach(t),vLo=r(A7e," \u2014 "),vD=n(A7e,"A",{href:!0});var hit=s(vD);FLo=r(hit,"DebertaForMaskedLM"),hit.forEach(t),TLo=r(A7e," (DeBERTa model)"),A7e.forEach(t),MLo=i(H),Wb=n(H,"LI",{});var y7e=s(Wb);jce=n(y7e,"STRONG",{});var uit=s(jce);ELo=r(uit,"deberta-v2"),uit.forEach(t),CLo=r(y7e," \u2014 "),FD=n(y7e,"A",{href:!0});var pit=s(FD);wLo=r(pit,"DebertaV2ForMaskedLM"),pit.forEach(t),ALo=r(y7e," (DeBERTa-v2 model)"),y7e.forEach(t),yLo=i(H),Qb=n(H,"LI",{});var L7e=s(Qb);Dce=n(L7e,"STRONG",{});var _it=s(Dce);LLo=r(_it,"distilbert"),_it.forEach(t),xLo=r(L7e," \u2014 "),TD=n(L7e,"A",{href:!0});var bit=s(TD);$Lo=r(bit,"DistilBertForMaskedLM"),bit.forEach(t),kLo=r(L7e," (DistilBERT model)"),L7e.forEach(t),SLo=i(H),Hb=n(H,"LI",{});var x7e=s(Hb);Gce=n(x7e,"STRONG",{});var vit=s(Gce);RLo=r(vit,"electra"),vit.forEach(t),PLo=r(x7e," \u2014 "),MD=n(x7e,"A",{href:!0});var Fit=s(MD);BLo=r(Fit,"ElectraForMaskedLM"),Fit.forEach(t),ILo=r(x7e," (ELECTRA model)"),x7e.forEach(t),NLo=i(H),Ub=n(H,"LI",{});var $7e=s(Ub);Oce=n($7e,"STRONG",{});var Tit=s(Oce);qLo=r(Tit,"flaubert"),Tit.forEach(t),jLo=r($7e," \u2014 "),ED=n($7e,"A",{href:!0});var Mit=s(ED);DLo=r(Mit,"FlaubertWithLMHeadModel"),Mit.forEach(t),GLo=r($7e," (FlauBERT model)"),$7e.forEach(t),OLo=i(H),Jb=n(H,"LI",{});var k7e=s(Jb);Vce=n(k7e,"STRONG",{});var Eit=s(Vce);VLo=r(Eit,"fnet"),Eit.forEach(t),XLo=r(k7e," \u2014 "),CD=n(k7e,"A",{href:!0});var Cit=s(CD);zLo=r(Cit,"FNetForMaskedLM"),Cit.forEach(t),WLo=r(k7e," (FNet model)"),k7e.forEach(t),QLo=i(H),Yb=n(H,"LI",{});var S7e=s(Yb);Xce=n(S7e,"STRONG",{});var wit=s(Xce);HLo=r(wit,"funnel"),wit.forEach(t),ULo=r(S7e," \u2014 "),wD=n(S7e,"A",{href:!0});var Ait=s(wD);JLo=r(Ait,"FunnelForMaskedLM"),Ait.forEach(t),YLo=r(S7e," (Funnel Transformer model)"),S7e.forEach(t),KLo=i(H),Kb=n(H,"LI",{});var R7e=s(Kb);zce=n(R7e,"STRONG",{});var yit=s(zce);ZLo=r(yit,"ibert"),yit.forEach(t),e8o=r(R7e," \u2014 "),AD=n(R7e,"A",{href:!0});var Lit=s(AD);o8o=r(Lit,"IBertForMaskedLM"),Lit.forEach(t),r8o=r(R7e," (I-BERT model)"),R7e.forEach(t),t8o=i(H),Zb=n(H,"LI",{});var P7e=s(Zb);Wce=n(P7e,"STRONG",{});var xit=s(Wce);a8o=r(xit,"layoutlm"),xit.forEach(t),n8o=r(P7e," \u2014 "),yD=n(P7e,"A",{href:!0});var $it=s(yD);s8o=r($it,"LayoutLMForMaskedLM"),$it.forEach(t),l8o=r(P7e," (LayoutLM model)"),P7e.forEach(t),i8o=i(H),e2=n(H,"LI",{});var B7e=s(e2);Qce=n(B7e,"STRONG",{});var kit=s(Qce);d8o=r(kit,"longformer"),kit.forEach(t),c8o=r(B7e," \u2014 "),LD=n(B7e,"A",{href:!0});var Sit=s(LD);m8o=r(Sit,"LongformerForMaskedLM"),Sit.forEach(t),f8o=r(B7e," (Longformer model)"),B7e.forEach(t),g8o=i(H),o2=n(H,"LI",{});var I7e=s(o2);Hce=n(I7e,"STRONG",{});var Rit=s(Hce);h8o=r(Rit,"luke"),Rit.forEach(t),u8o=r(I7e," \u2014 "),xD=n(I7e,"A",{href:!0});var Pit=s(xD);p8o=r(Pit,"LukeForMaskedLM"),Pit.forEach(t),_8o=r(I7e," (LUKE model)"),I7e.forEach(t),b8o=i(H),r2=n(H,"LI",{});var N7e=s(r2);Uce=n(N7e,"STRONG",{});var Bit=s(Uce);v8o=r(Bit,"mbart"),Bit.forEach(t),F8o=r(N7e," \u2014 "),$D=n(N7e,"A",{href:!0});var Iit=s($D);T8o=r(Iit,"MBartForConditionalGeneration"),Iit.forEach(t),M8o=r(N7e," (mBART model)"),N7e.forEach(t),E8o=i(H),t2=n(H,"LI",{});var q7e=s(t2);Jce=n(q7e,"STRONG",{});var Nit=s(Jce);C8o=r(Nit,"megatron-bert"),Nit.forEach(t),w8o=r(q7e," \u2014 "),kD=n(q7e,"A",{href:!0});var qit=s(kD);A8o=r(qit,"MegatronBertForMaskedLM"),qit.forEach(t),y8o=r(q7e," (MegatronBert model)"),q7e.forEach(t),L8o=i(H),a2=n(H,"LI",{});var j7e=s(a2);Yce=n(j7e,"STRONG",{});var jit=s(Yce);x8o=r(jit,"mobilebert"),jit.forEach(t),$8o=r(j7e," \u2014 "),SD=n(j7e,"A",{href:!0});var Dit=s(SD);k8o=r(Dit,"MobileBertForMaskedLM"),Dit.forEach(t),S8o=r(j7e," (MobileBERT model)"),j7e.forEach(t),R8o=i(H),n2=n(H,"LI",{});var D7e=s(n2);Kce=n(D7e,"STRONG",{});var Git=s(Kce);P8o=r(Git,"mpnet"),Git.forEach(t),B8o=r(D7e," \u2014 "),RD=n(D7e,"A",{href:!0});var Oit=s(RD);I8o=r(Oit,"MPNetForMaskedLM"),Oit.forEach(t),N8o=r(D7e," (MPNet model)"),D7e.forEach(t),q8o=i(H),s2=n(H,"LI",{});var G7e=s(s2);Zce=n(G7e,"STRONG",{});var Vit=s(Zce);j8o=r(Vit,"nystromformer"),Vit.forEach(t),D8o=r(G7e," \u2014 "),PD=n(G7e,"A",{href:!0});var Xit=s(PD);G8o=r(Xit,"NystromformerForMaskedLM"),Xit.forEach(t),O8o=r(G7e," (Nystromformer model)"),G7e.forEach(t),V8o=i(H),l2=n(H,"LI",{});var O7e=s(l2);eme=n(O7e,"STRONG",{});var zit=s(eme);X8o=r(zit,"perceiver"),zit.forEach(t),z8o=r(O7e," \u2014 "),BD=n(O7e,"A",{href:!0});var Wit=s(BD);W8o=r(Wit,"PerceiverForMaskedLM"),Wit.forEach(t),Q8o=r(O7e," (Perceiver model)"),O7e.forEach(t),H8o=i(H),i2=n(H,"LI",{});var V7e=s(i2);ome=n(V7e,"STRONG",{});var Qit=s(ome);U8o=r(Qit,"qdqbert"),Qit.forEach(t),J8o=r(V7e," \u2014 "),ID=n(V7e,"A",{href:!0});var Hit=s(ID);Y8o=r(Hit,"QDQBertForMaskedLM"),Hit.forEach(t),K8o=r(V7e," (QDQBert model)"),V7e.forEach(t),Z8o=i(H),d2=n(H,"LI",{});var X7e=s(d2);rme=n(X7e,"STRONG",{});var Uit=s(rme);e7o=r(Uit,"reformer"),Uit.forEach(t),o7o=r(X7e," \u2014 "),ND=n(X7e,"A",{href:!0});var Jit=s(ND);r7o=r(Jit,"ReformerForMaskedLM"),Jit.forEach(t),t7o=r(X7e," (Reformer model)"),X7e.forEach(t),a7o=i(H),c2=n(H,"LI",{});var z7e=s(c2);tme=n(z7e,"STRONG",{});var Yit=s(tme);n7o=r(Yit,"rembert"),Yit.forEach(t),s7o=r(z7e," \u2014 "),qD=n(z7e,"A",{href:!0});var Kit=s(qD);l7o=r(Kit,"RemBertForMaskedLM"),Kit.forEach(t),i7o=r(z7e," (RemBERT model)"),z7e.forEach(t),d7o=i(H),m2=n(H,"LI",{});var W7e=s(m2);ame=n(W7e,"STRONG",{});var Zit=s(ame);c7o=r(Zit,"roberta"),Zit.forEach(t),m7o=r(W7e," \u2014 "),jD=n(W7e,"A",{href:!0});var edt=s(jD);f7o=r(edt,"RobertaForMaskedLM"),edt.forEach(t),g7o=r(W7e," (RoBERTa model)"),W7e.forEach(t),h7o=i(H),f2=n(H,"LI",{});var Q7e=s(f2);nme=n(Q7e,"STRONG",{});var odt=s(nme);u7o=r(odt,"roformer"),odt.forEach(t),p7o=r(Q7e," \u2014 "),DD=n(Q7e,"A",{href:!0});var rdt=s(DD);_7o=r(rdt,"RoFormerForMaskedLM"),rdt.forEach(t),b7o=r(Q7e," (RoFormer model)"),Q7e.forEach(t),v7o=i(H),g2=n(H,"LI",{});var H7e=s(g2);sme=n(H7e,"STRONG",{});var tdt=s(sme);F7o=r(tdt,"squeezebert"),tdt.forEach(t),T7o=r(H7e," \u2014 "),GD=n(H7e,"A",{href:!0});var adt=s(GD);M7o=r(adt,"SqueezeBertForMaskedLM"),adt.forEach(t),E7o=r(H7e," (SqueezeBERT model)"),H7e.forEach(t),C7o=i(H),h2=n(H,"LI",{});var U7e=s(h2);lme=n(U7e,"STRONG",{});var ndt=s(lme);w7o=r(ndt,"tapas"),ndt.forEach(t),A7o=r(U7e," \u2014 "),OD=n(U7e,"A",{href:!0});var sdt=s(OD);y7o=r(sdt,"TapasForMaskedLM"),sdt.forEach(t),L7o=r(U7e," (TAPAS model)"),U7e.forEach(t),x7o=i(H),u2=n(H,"LI",{});var J7e=s(u2);ime=n(J7e,"STRONG",{});var ldt=s(ime);$7o=r(ldt,"wav2vec2"),ldt.forEach(t),k7o=r(J7e," \u2014 "),dme=n(J7e,"CODE",{});var idt=s(dme);S7o=r(idt,"Wav2Vec2ForMaskedLM"),idt.forEach(t),R7o=r(J7e," (Wav2Vec2 model)"),J7e.forEach(t),P7o=i(H),p2=n(H,"LI",{});var Y7e=s(p2);cme=n(Y7e,"STRONG",{});var ddt=s(cme);B7o=r(ddt,"xlm"),ddt.forEach(t),I7o=r(Y7e," \u2014 "),VD=n(Y7e,"A",{href:!0});var cdt=s(VD);N7o=r(cdt,"XLMWithLMHeadModel"),cdt.forEach(t),q7o=r(Y7e," (XLM model)"),Y7e.forEach(t),j7o=i(H),_2=n(H,"LI",{});var K7e=s(_2);mme=n(K7e,"STRONG",{});var mdt=s(mme);D7o=r(mdt,"xlm-roberta"),mdt.forEach(t),G7o=r(K7e," \u2014 "),XD=n(K7e,"A",{href:!0});var fdt=s(XD);O7o=r(fdt,"XLMRobertaForMaskedLM"),fdt.forEach(t),V7o=r(K7e," (XLM-RoBERTa model)"),K7e.forEach(t),X7o=i(H),b2=n(H,"LI",{});var Z7e=s(b2);fme=n(Z7e,"STRONG",{});var gdt=s(fme);z7o=r(gdt,"xlm-roberta-xl"),gdt.forEach(t),W7o=r(Z7e," \u2014 "),zD=n(Z7e,"A",{href:!0});var hdt=s(zD);Q7o=r(hdt,"XLMRobertaXLForMaskedLM"),hdt.forEach(t),H7o=r(Z7e," (XLM-RoBERTa-XL model)"),Z7e.forEach(t),U7o=i(H),v2=n(H,"LI",{});var e9e=s(v2);gme=n(e9e,"STRONG",{});var udt=s(gme);J7o=r(udt,"yoso"),udt.forEach(t),Y7o=r(e9e," \u2014 "),WD=n(e9e,"A",{href:!0});var pdt=s(WD);K7o=r(pdt,"YosoForMaskedLM"),pdt.forEach(t),Z7o=r(e9e," (YOSO model)"),e9e.forEach(t),H.forEach(t),e9o=i(aa),F2=n(aa,"P",{});var o9e=s(F2);o9o=r(o9e,"The model is set in evaluation mode by default using "),hme=n(o9e,"CODE",{});var _dt=s(hme);r9o=r(_dt,"model.eval()"),_dt.forEach(t),t9o=r(o9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ume=n(o9e,"CODE",{});var bdt=s(ume);a9o=r(bdt,"model.train()"),bdt.forEach(t),o9e.forEach(t),n9o=i(aa),T(T2.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),jqe=i(m),Ni=n(m,"H2",{class:!0});var VDe=s(Ni);M2=n(VDe,"A",{id:!0,class:!0,href:!0});var vdt=s(M2);pme=n(vdt,"SPAN",{});var Fdt=s(pme);T(CL.$$.fragment,Fdt),Fdt.forEach(t),vdt.forEach(t),s9o=i(VDe),_me=n(VDe,"SPAN",{});var Tdt=s(_me);l9o=r(Tdt,"AutoModelForSeq2SeqLM"),Tdt.forEach(t),VDe.forEach(t),Dqe=i(m),So=n(m,"DIV",{class:!0});var zs=s(So);T(wL.$$.fragment,zs),i9o=i(zs),qi=n(zs,"P",{});var RZ=s(qi);d9o=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),QD=n(RZ,"A",{href:!0});var Mdt=s(QD);c9o=r(Mdt,"from_pretrained()"),Mdt.forEach(t),m9o=r(RZ," class method or the "),HD=n(RZ,"A",{href:!0});var Edt=s(HD);f9o=r(Edt,"from_config()"),Edt.forEach(t),g9o=r(RZ,` class
method.`),RZ.forEach(t),h9o=i(zs),AL=n(zs,"P",{});var XDe=s(AL);u9o=r(XDe,"This class cannot be instantiated directly using "),bme=n(XDe,"CODE",{});var Cdt=s(bme);p9o=r(Cdt,"__init__()"),Cdt.forEach(t),_9o=r(XDe," (throws an error)."),XDe.forEach(t),b9o=i(zs),lt=n(zs,"DIV",{class:!0});var X6=s(lt);T(yL.$$.fragment,X6),v9o=i(X6),vme=n(X6,"P",{});var wdt=s(vme);F9o=r(wdt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),wdt.forEach(t),T9o=i(X6),ji=n(X6,"P",{});var PZ=s(ji);M9o=r(PZ,`Note:
Loading a model from its configuration file does `),Fme=n(PZ,"STRONG",{});var Adt=s(Fme);E9o=r(Adt,"not"),Adt.forEach(t),C9o=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UD=n(PZ,"A",{href:!0});var ydt=s(UD);w9o=r(ydt,"from_pretrained()"),ydt.forEach(t),A9o=r(PZ," to load the model weights."),PZ.forEach(t),y9o=i(X6),T(E2.$$.fragment,X6),X6.forEach(t),L9o=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(LL.$$.fragment,na),x9o=i(na),Tme=n(na,"P",{});var Ldt=s(Tme);$9o=r(Ldt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ldt.forEach(t),k9o=i(na),Sa=n(na,"P",{});var z6=s(Sa);S9o=r(z6,"The model class to instantiate is selected based on the "),Mme=n(z6,"CODE",{});var xdt=s(Mme);R9o=r(xdt,"model_type"),xdt.forEach(t),P9o=r(z6,` property of the config object (either
passed as an argument or loaded from `),Eme=n(z6,"CODE",{});var $dt=s(Eme);B9o=r($dt,"pretrained_model_name_or_path"),$dt.forEach(t),I9o=r(z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cme=n(z6,"CODE",{});var kdt=s(Cme);N9o=r(kdt,"pretrained_model_name_or_path"),kdt.forEach(t),q9o=r(z6,":"),z6.forEach(t),j9o=i(na),pe=n(na,"UL",{});var ve=s(pe);C2=n(ve,"LI",{});var r9e=s(C2);wme=n(r9e,"STRONG",{});var Sdt=s(wme);D9o=r(Sdt,"bart"),Sdt.forEach(t),G9o=r(r9e," \u2014 "),JD=n(r9e,"A",{href:!0});var Rdt=s(JD);O9o=r(Rdt,"BartForConditionalGeneration"),Rdt.forEach(t),V9o=r(r9e," (BART model)"),r9e.forEach(t),X9o=i(ve),w2=n(ve,"LI",{});var t9e=s(w2);Ame=n(t9e,"STRONG",{});var Pdt=s(Ame);z9o=r(Pdt,"bigbird_pegasus"),Pdt.forEach(t),W9o=r(t9e," \u2014 "),YD=n(t9e,"A",{href:!0});var Bdt=s(YD);Q9o=r(Bdt,"BigBirdPegasusForConditionalGeneration"),Bdt.forEach(t),H9o=r(t9e," (BigBirdPegasus model)"),t9e.forEach(t),U9o=i(ve),A2=n(ve,"LI",{});var a9e=s(A2);yme=n(a9e,"STRONG",{});var Idt=s(yme);J9o=r(Idt,"blenderbot"),Idt.forEach(t),Y9o=r(a9e," \u2014 "),KD=n(a9e,"A",{href:!0});var Ndt=s(KD);K9o=r(Ndt,"BlenderbotForConditionalGeneration"),Ndt.forEach(t),Z9o=r(a9e," (Blenderbot model)"),a9e.forEach(t),exo=i(ve),y2=n(ve,"LI",{});var n9e=s(y2);Lme=n(n9e,"STRONG",{});var qdt=s(Lme);oxo=r(qdt,"blenderbot-small"),qdt.forEach(t),rxo=r(n9e," \u2014 "),ZD=n(n9e,"A",{href:!0});var jdt=s(ZD);txo=r(jdt,"BlenderbotSmallForConditionalGeneration"),jdt.forEach(t),axo=r(n9e," (BlenderbotSmall model)"),n9e.forEach(t),nxo=i(ve),L2=n(ve,"LI",{});var s9e=s(L2);xme=n(s9e,"STRONG",{});var Ddt=s(xme);sxo=r(Ddt,"encoder-decoder"),Ddt.forEach(t),lxo=r(s9e," \u2014 "),eG=n(s9e,"A",{href:!0});var Gdt=s(eG);ixo=r(Gdt,"EncoderDecoderModel"),Gdt.forEach(t),dxo=r(s9e," (Encoder decoder model)"),s9e.forEach(t),cxo=i(ve),x2=n(ve,"LI",{});var l9e=s(x2);$me=n(l9e,"STRONG",{});var Odt=s($me);mxo=r(Odt,"fsmt"),Odt.forEach(t),fxo=r(l9e," \u2014 "),oG=n(l9e,"A",{href:!0});var Vdt=s(oG);gxo=r(Vdt,"FSMTForConditionalGeneration"),Vdt.forEach(t),hxo=r(l9e," (FairSeq Machine-Translation model)"),l9e.forEach(t),uxo=i(ve),$2=n(ve,"LI",{});var i9e=s($2);kme=n(i9e,"STRONG",{});var Xdt=s(kme);pxo=r(Xdt,"led"),Xdt.forEach(t),_xo=r(i9e," \u2014 "),rG=n(i9e,"A",{href:!0});var zdt=s(rG);bxo=r(zdt,"LEDForConditionalGeneration"),zdt.forEach(t),vxo=r(i9e," (LED model)"),i9e.forEach(t),Fxo=i(ve),k2=n(ve,"LI",{});var d9e=s(k2);Sme=n(d9e,"STRONG",{});var Wdt=s(Sme);Txo=r(Wdt,"m2m_100"),Wdt.forEach(t),Mxo=r(d9e," \u2014 "),tG=n(d9e,"A",{href:!0});var Qdt=s(tG);Exo=r(Qdt,"M2M100ForConditionalGeneration"),Qdt.forEach(t),Cxo=r(d9e," (M2M100 model)"),d9e.forEach(t),wxo=i(ve),S2=n(ve,"LI",{});var c9e=s(S2);Rme=n(c9e,"STRONG",{});var Hdt=s(Rme);Axo=r(Hdt,"marian"),Hdt.forEach(t),yxo=r(c9e," \u2014 "),aG=n(c9e,"A",{href:!0});var Udt=s(aG);Lxo=r(Udt,"MarianMTModel"),Udt.forEach(t),xxo=r(c9e," (Marian model)"),c9e.forEach(t),$xo=i(ve),R2=n(ve,"LI",{});var m9e=s(R2);Pme=n(m9e,"STRONG",{});var Jdt=s(Pme);kxo=r(Jdt,"mbart"),Jdt.forEach(t),Sxo=r(m9e," \u2014 "),nG=n(m9e,"A",{href:!0});var Ydt=s(nG);Rxo=r(Ydt,"MBartForConditionalGeneration"),Ydt.forEach(t),Pxo=r(m9e," (mBART model)"),m9e.forEach(t),Bxo=i(ve),P2=n(ve,"LI",{});var f9e=s(P2);Bme=n(f9e,"STRONG",{});var Kdt=s(Bme);Ixo=r(Kdt,"mt5"),Kdt.forEach(t),Nxo=r(f9e," \u2014 "),sG=n(f9e,"A",{href:!0});var Zdt=s(sG);qxo=r(Zdt,"MT5ForConditionalGeneration"),Zdt.forEach(t),jxo=r(f9e," (mT5 model)"),f9e.forEach(t),Dxo=i(ve),B2=n(ve,"LI",{});var g9e=s(B2);Ime=n(g9e,"STRONG",{});var ect=s(Ime);Gxo=r(ect,"pegasus"),ect.forEach(t),Oxo=r(g9e," \u2014 "),lG=n(g9e,"A",{href:!0});var oct=s(lG);Vxo=r(oct,"PegasusForConditionalGeneration"),oct.forEach(t),Xxo=r(g9e," (Pegasus model)"),g9e.forEach(t),zxo=i(ve),I2=n(ve,"LI",{});var h9e=s(I2);Nme=n(h9e,"STRONG",{});var rct=s(Nme);Wxo=r(rct,"plbart"),rct.forEach(t),Qxo=r(h9e," \u2014 "),iG=n(h9e,"A",{href:!0});var tct=s(iG);Hxo=r(tct,"PLBartForConditionalGeneration"),tct.forEach(t),Uxo=r(h9e," (PLBart model)"),h9e.forEach(t),Jxo=i(ve),N2=n(ve,"LI",{});var u9e=s(N2);qme=n(u9e,"STRONG",{});var act=s(qme);Yxo=r(act,"prophetnet"),act.forEach(t),Kxo=r(u9e," \u2014 "),dG=n(u9e,"A",{href:!0});var nct=s(dG);Zxo=r(nct,"ProphetNetForConditionalGeneration"),nct.forEach(t),e$o=r(u9e," (ProphetNet model)"),u9e.forEach(t),o$o=i(ve),q2=n(ve,"LI",{});var p9e=s(q2);jme=n(p9e,"STRONG",{});var sct=s(jme);r$o=r(sct,"t5"),sct.forEach(t),t$o=r(p9e," \u2014 "),cG=n(p9e,"A",{href:!0});var lct=s(cG);a$o=r(lct,"T5ForConditionalGeneration"),lct.forEach(t),n$o=r(p9e," (T5 model)"),p9e.forEach(t),s$o=i(ve),j2=n(ve,"LI",{});var _9e=s(j2);Dme=n(_9e,"STRONG",{});var ict=s(Dme);l$o=r(ict,"xlm-prophetnet"),ict.forEach(t),i$o=r(_9e," \u2014 "),mG=n(_9e,"A",{href:!0});var dct=s(mG);d$o=r(dct,"XLMProphetNetForConditionalGeneration"),dct.forEach(t),c$o=r(_9e," (XLMProphetNet model)"),_9e.forEach(t),ve.forEach(t),m$o=i(na),D2=n(na,"P",{});var b9e=s(D2);f$o=r(b9e,"The model is set in evaluation mode by default using "),Gme=n(b9e,"CODE",{});var cct=s(Gme);g$o=r(cct,"model.eval()"),cct.forEach(t),h$o=r(b9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ome=n(b9e,"CODE",{});var mct=s(Ome);u$o=r(mct,"model.train()"),mct.forEach(t),b9e.forEach(t),p$o=i(na),T(G2.$$.fragment,na),na.forEach(t),zs.forEach(t),Gqe=i(m),Di=n(m,"H2",{class:!0});var zDe=s(Di);O2=n(zDe,"A",{id:!0,class:!0,href:!0});var fct=s(O2);Vme=n(fct,"SPAN",{});var gct=s(Vme);T(xL.$$.fragment,gct),gct.forEach(t),fct.forEach(t),_$o=i(zDe),Xme=n(zDe,"SPAN",{});var hct=s(Xme);b$o=r(hct,"AutoModelForSequenceClassification"),hct.forEach(t),zDe.forEach(t),Oqe=i(m),Ro=n(m,"DIV",{class:!0});var Ws=s(Ro);T($L.$$.fragment,Ws),v$o=i(Ws),Gi=n(Ws,"P",{});var BZ=s(Gi);F$o=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),fG=n(BZ,"A",{href:!0});var uct=s(fG);T$o=r(uct,"from_pretrained()"),uct.forEach(t),M$o=r(BZ," class method or the "),gG=n(BZ,"A",{href:!0});var pct=s(gG);E$o=r(pct,"from_config()"),pct.forEach(t),C$o=r(BZ,` class
method.`),BZ.forEach(t),w$o=i(Ws),kL=n(Ws,"P",{});var WDe=s(kL);A$o=r(WDe,"This class cannot be instantiated directly using "),zme=n(WDe,"CODE",{});var _ct=s(zme);y$o=r(_ct,"__init__()"),_ct.forEach(t),L$o=r(WDe," (throws an error)."),WDe.forEach(t),x$o=i(Ws),it=n(Ws,"DIV",{class:!0});var W6=s(it);T(SL.$$.fragment,W6),$$o=i(W6),Wme=n(W6,"P",{});var bct=s(Wme);k$o=r(bct,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),bct.forEach(t),S$o=i(W6),Oi=n(W6,"P",{});var IZ=s(Oi);R$o=r(IZ,`Note:
Loading a model from its configuration file does `),Qme=n(IZ,"STRONG",{});var vct=s(Qme);P$o=r(vct,"not"),vct.forEach(t),B$o=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hG=n(IZ,"A",{href:!0});var Fct=s(hG);I$o=r(Fct,"from_pretrained()"),Fct.forEach(t),N$o=r(IZ," to load the model weights."),IZ.forEach(t),q$o=i(W6),T(V2.$$.fragment,W6),W6.forEach(t),j$o=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(RL.$$.fragment,sa),D$o=i(sa),Hme=n(sa,"P",{});var Tct=s(Hme);G$o=r(Tct,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Tct.forEach(t),O$o=i(sa),Ra=n(sa,"P",{});var Q6=s(Ra);V$o=r(Q6,"The model class to instantiate is selected based on the "),Ume=n(Q6,"CODE",{});var Mct=s(Ume);X$o=r(Mct,"model_type"),Mct.forEach(t),z$o=r(Q6,` property of the config object (either
passed as an argument or loaded from `),Jme=n(Q6,"CODE",{});var Ect=s(Jme);W$o=r(Ect,"pretrained_model_name_or_path"),Ect.forEach(t),Q$o=r(Q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yme=n(Q6,"CODE",{});var Cct=s(Yme);H$o=r(Cct,"pretrained_model_name_or_path"),Cct.forEach(t),U$o=r(Q6,":"),Q6.forEach(t),J$o=i(sa),N=n(sa,"UL",{});var j=s(N);X2=n(j,"LI",{});var v9e=s(X2);Kme=n(v9e,"STRONG",{});var wct=s(Kme);Y$o=r(wct,"albert"),wct.forEach(t),K$o=r(v9e," \u2014 "),uG=n(v9e,"A",{href:!0});var Act=s(uG);Z$o=r(Act,"AlbertForSequenceClassification"),Act.forEach(t),eko=r(v9e," (ALBERT model)"),v9e.forEach(t),oko=i(j),z2=n(j,"LI",{});var F9e=s(z2);Zme=n(F9e,"STRONG",{});var yct=s(Zme);rko=r(yct,"bart"),yct.forEach(t),tko=r(F9e," \u2014 "),pG=n(F9e,"A",{href:!0});var Lct=s(pG);ako=r(Lct,"BartForSequenceClassification"),Lct.forEach(t),nko=r(F9e," (BART model)"),F9e.forEach(t),sko=i(j),W2=n(j,"LI",{});var T9e=s(W2);efe=n(T9e,"STRONG",{});var xct=s(efe);lko=r(xct,"bert"),xct.forEach(t),iko=r(T9e," \u2014 "),_G=n(T9e,"A",{href:!0});var $ct=s(_G);dko=r($ct,"BertForSequenceClassification"),$ct.forEach(t),cko=r(T9e," (BERT model)"),T9e.forEach(t),mko=i(j),Q2=n(j,"LI",{});var M9e=s(Q2);ofe=n(M9e,"STRONG",{});var kct=s(ofe);fko=r(kct,"big_bird"),kct.forEach(t),gko=r(M9e," \u2014 "),bG=n(M9e,"A",{href:!0});var Sct=s(bG);hko=r(Sct,"BigBirdForSequenceClassification"),Sct.forEach(t),uko=r(M9e," (BigBird model)"),M9e.forEach(t),pko=i(j),H2=n(j,"LI",{});var E9e=s(H2);rfe=n(E9e,"STRONG",{});var Rct=s(rfe);_ko=r(Rct,"bigbird_pegasus"),Rct.forEach(t),bko=r(E9e," \u2014 "),vG=n(E9e,"A",{href:!0});var Pct=s(vG);vko=r(Pct,"BigBirdPegasusForSequenceClassification"),Pct.forEach(t),Fko=r(E9e," (BigBirdPegasus model)"),E9e.forEach(t),Tko=i(j),U2=n(j,"LI",{});var C9e=s(U2);tfe=n(C9e,"STRONG",{});var Bct=s(tfe);Mko=r(Bct,"camembert"),Bct.forEach(t),Eko=r(C9e," \u2014 "),FG=n(C9e,"A",{href:!0});var Ict=s(FG);Cko=r(Ict,"CamembertForSequenceClassification"),Ict.forEach(t),wko=r(C9e," (CamemBERT model)"),C9e.forEach(t),Ako=i(j),J2=n(j,"LI",{});var w9e=s(J2);afe=n(w9e,"STRONG",{});var Nct=s(afe);yko=r(Nct,"canine"),Nct.forEach(t),Lko=r(w9e," \u2014 "),TG=n(w9e,"A",{href:!0});var qct=s(TG);xko=r(qct,"CanineForSequenceClassification"),qct.forEach(t),$ko=r(w9e," (Canine model)"),w9e.forEach(t),kko=i(j),Y2=n(j,"LI",{});var A9e=s(Y2);nfe=n(A9e,"STRONG",{});var jct=s(nfe);Sko=r(jct,"convbert"),jct.forEach(t),Rko=r(A9e," \u2014 "),MG=n(A9e,"A",{href:!0});var Dct=s(MG);Pko=r(Dct,"ConvBertForSequenceClassification"),Dct.forEach(t),Bko=r(A9e," (ConvBERT model)"),A9e.forEach(t),Iko=i(j),K2=n(j,"LI",{});var y9e=s(K2);sfe=n(y9e,"STRONG",{});var Gct=s(sfe);Nko=r(Gct,"ctrl"),Gct.forEach(t),qko=r(y9e," \u2014 "),EG=n(y9e,"A",{href:!0});var Oct=s(EG);jko=r(Oct,"CTRLForSequenceClassification"),Oct.forEach(t),Dko=r(y9e," (CTRL model)"),y9e.forEach(t),Gko=i(j),Z2=n(j,"LI",{});var L9e=s(Z2);lfe=n(L9e,"STRONG",{});var Vct=s(lfe);Oko=r(Vct,"data2vec-text"),Vct.forEach(t),Vko=r(L9e," \u2014 "),CG=n(L9e,"A",{href:!0});var Xct=s(CG);Xko=r(Xct,"Data2VecTextForSequenceClassification"),Xct.forEach(t),zko=r(L9e," (Data2VecText model)"),L9e.forEach(t),Wko=i(j),ev=n(j,"LI",{});var x9e=s(ev);ife=n(x9e,"STRONG",{});var zct=s(ife);Qko=r(zct,"deberta"),zct.forEach(t),Hko=r(x9e," \u2014 "),wG=n(x9e,"A",{href:!0});var Wct=s(wG);Uko=r(Wct,"DebertaForSequenceClassification"),Wct.forEach(t),Jko=r(x9e," (DeBERTa model)"),x9e.forEach(t),Yko=i(j),ov=n(j,"LI",{});var $9e=s(ov);dfe=n($9e,"STRONG",{});var Qct=s(dfe);Kko=r(Qct,"deberta-v2"),Qct.forEach(t),Zko=r($9e," \u2014 "),AG=n($9e,"A",{href:!0});var Hct=s(AG);eSo=r(Hct,"DebertaV2ForSequenceClassification"),Hct.forEach(t),oSo=r($9e," (DeBERTa-v2 model)"),$9e.forEach(t),rSo=i(j),rv=n(j,"LI",{});var k9e=s(rv);cfe=n(k9e,"STRONG",{});var Uct=s(cfe);tSo=r(Uct,"distilbert"),Uct.forEach(t),aSo=r(k9e," \u2014 "),yG=n(k9e,"A",{href:!0});var Jct=s(yG);nSo=r(Jct,"DistilBertForSequenceClassification"),Jct.forEach(t),sSo=r(k9e," (DistilBERT model)"),k9e.forEach(t),lSo=i(j),tv=n(j,"LI",{});var S9e=s(tv);mfe=n(S9e,"STRONG",{});var Yct=s(mfe);iSo=r(Yct,"electra"),Yct.forEach(t),dSo=r(S9e," \u2014 "),LG=n(S9e,"A",{href:!0});var Kct=s(LG);cSo=r(Kct,"ElectraForSequenceClassification"),Kct.forEach(t),mSo=r(S9e," (ELECTRA model)"),S9e.forEach(t),fSo=i(j),av=n(j,"LI",{});var R9e=s(av);ffe=n(R9e,"STRONG",{});var Zct=s(ffe);gSo=r(Zct,"flaubert"),Zct.forEach(t),hSo=r(R9e," \u2014 "),xG=n(R9e,"A",{href:!0});var emt=s(xG);uSo=r(emt,"FlaubertForSequenceClassification"),emt.forEach(t),pSo=r(R9e," (FlauBERT model)"),R9e.forEach(t),_So=i(j),nv=n(j,"LI",{});var P9e=s(nv);gfe=n(P9e,"STRONG",{});var omt=s(gfe);bSo=r(omt,"fnet"),omt.forEach(t),vSo=r(P9e," \u2014 "),$G=n(P9e,"A",{href:!0});var rmt=s($G);FSo=r(rmt,"FNetForSequenceClassification"),rmt.forEach(t),TSo=r(P9e," (FNet model)"),P9e.forEach(t),MSo=i(j),sv=n(j,"LI",{});var B9e=s(sv);hfe=n(B9e,"STRONG",{});var tmt=s(hfe);ESo=r(tmt,"funnel"),tmt.forEach(t),CSo=r(B9e," \u2014 "),kG=n(B9e,"A",{href:!0});var amt=s(kG);wSo=r(amt,"FunnelForSequenceClassification"),amt.forEach(t),ASo=r(B9e," (Funnel Transformer model)"),B9e.forEach(t),ySo=i(j),lv=n(j,"LI",{});var I9e=s(lv);ufe=n(I9e,"STRONG",{});var nmt=s(ufe);LSo=r(nmt,"gpt2"),nmt.forEach(t),xSo=r(I9e," \u2014 "),SG=n(I9e,"A",{href:!0});var smt=s(SG);$So=r(smt,"GPT2ForSequenceClassification"),smt.forEach(t),kSo=r(I9e," (OpenAI GPT-2 model)"),I9e.forEach(t),SSo=i(j),iv=n(j,"LI",{});var N9e=s(iv);pfe=n(N9e,"STRONG",{});var lmt=s(pfe);RSo=r(lmt,"gpt_neo"),lmt.forEach(t),PSo=r(N9e," \u2014 "),RG=n(N9e,"A",{href:!0});var imt=s(RG);BSo=r(imt,"GPTNeoForSequenceClassification"),imt.forEach(t),ISo=r(N9e," (GPT Neo model)"),N9e.forEach(t),NSo=i(j),dv=n(j,"LI",{});var q9e=s(dv);_fe=n(q9e,"STRONG",{});var dmt=s(_fe);qSo=r(dmt,"gptj"),dmt.forEach(t),jSo=r(q9e," \u2014 "),PG=n(q9e,"A",{href:!0});var cmt=s(PG);DSo=r(cmt,"GPTJForSequenceClassification"),cmt.forEach(t),GSo=r(q9e," (GPT-J model)"),q9e.forEach(t),OSo=i(j),cv=n(j,"LI",{});var j9e=s(cv);bfe=n(j9e,"STRONG",{});var mmt=s(bfe);VSo=r(mmt,"ibert"),mmt.forEach(t),XSo=r(j9e," \u2014 "),BG=n(j9e,"A",{href:!0});var fmt=s(BG);zSo=r(fmt,"IBertForSequenceClassification"),fmt.forEach(t),WSo=r(j9e," (I-BERT model)"),j9e.forEach(t),QSo=i(j),mv=n(j,"LI",{});var D9e=s(mv);vfe=n(D9e,"STRONG",{});var gmt=s(vfe);HSo=r(gmt,"layoutlm"),gmt.forEach(t),USo=r(D9e," \u2014 "),IG=n(D9e,"A",{href:!0});var hmt=s(IG);JSo=r(hmt,"LayoutLMForSequenceClassification"),hmt.forEach(t),YSo=r(D9e," (LayoutLM model)"),D9e.forEach(t),KSo=i(j),fv=n(j,"LI",{});var G9e=s(fv);Ffe=n(G9e,"STRONG",{});var umt=s(Ffe);ZSo=r(umt,"layoutlmv2"),umt.forEach(t),eRo=r(G9e," \u2014 "),NG=n(G9e,"A",{href:!0});var pmt=s(NG);oRo=r(pmt,"LayoutLMv2ForSequenceClassification"),pmt.forEach(t),rRo=r(G9e," (LayoutLMv2 model)"),G9e.forEach(t),tRo=i(j),gv=n(j,"LI",{});var O9e=s(gv);Tfe=n(O9e,"STRONG",{});var _mt=s(Tfe);aRo=r(_mt,"layoutlmv3"),_mt.forEach(t),nRo=r(O9e," \u2014 "),qG=n(O9e,"A",{href:!0});var bmt=s(qG);sRo=r(bmt,"LayoutLMv3ForSequenceClassification"),bmt.forEach(t),lRo=r(O9e," (LayoutLMv3 model)"),O9e.forEach(t),iRo=i(j),hv=n(j,"LI",{});var V9e=s(hv);Mfe=n(V9e,"STRONG",{});var vmt=s(Mfe);dRo=r(vmt,"led"),vmt.forEach(t),cRo=r(V9e," \u2014 "),jG=n(V9e,"A",{href:!0});var Fmt=s(jG);mRo=r(Fmt,"LEDForSequenceClassification"),Fmt.forEach(t),fRo=r(V9e," (LED model)"),V9e.forEach(t),gRo=i(j),uv=n(j,"LI",{});var X9e=s(uv);Efe=n(X9e,"STRONG",{});var Tmt=s(Efe);hRo=r(Tmt,"longformer"),Tmt.forEach(t),uRo=r(X9e," \u2014 "),DG=n(X9e,"A",{href:!0});var Mmt=s(DG);pRo=r(Mmt,"LongformerForSequenceClassification"),Mmt.forEach(t),_Ro=r(X9e," (Longformer model)"),X9e.forEach(t),bRo=i(j),pv=n(j,"LI",{});var z9e=s(pv);Cfe=n(z9e,"STRONG",{});var Emt=s(Cfe);vRo=r(Emt,"mbart"),Emt.forEach(t),FRo=r(z9e," \u2014 "),GG=n(z9e,"A",{href:!0});var Cmt=s(GG);TRo=r(Cmt,"MBartForSequenceClassification"),Cmt.forEach(t),MRo=r(z9e," (mBART model)"),z9e.forEach(t),ERo=i(j),_v=n(j,"LI",{});var W9e=s(_v);wfe=n(W9e,"STRONG",{});var wmt=s(wfe);CRo=r(wmt,"megatron-bert"),wmt.forEach(t),wRo=r(W9e," \u2014 "),OG=n(W9e,"A",{href:!0});var Amt=s(OG);ARo=r(Amt,"MegatronBertForSequenceClassification"),Amt.forEach(t),yRo=r(W9e," (MegatronBert model)"),W9e.forEach(t),LRo=i(j),bv=n(j,"LI",{});var Q9e=s(bv);Afe=n(Q9e,"STRONG",{});var ymt=s(Afe);xRo=r(ymt,"mobilebert"),ymt.forEach(t),$Ro=r(Q9e," \u2014 "),VG=n(Q9e,"A",{href:!0});var Lmt=s(VG);kRo=r(Lmt,"MobileBertForSequenceClassification"),Lmt.forEach(t),SRo=r(Q9e," (MobileBERT model)"),Q9e.forEach(t),RRo=i(j),vv=n(j,"LI",{});var H9e=s(vv);yfe=n(H9e,"STRONG",{});var xmt=s(yfe);PRo=r(xmt,"mpnet"),xmt.forEach(t),BRo=r(H9e," \u2014 "),XG=n(H9e,"A",{href:!0});var $mt=s(XG);IRo=r($mt,"MPNetForSequenceClassification"),$mt.forEach(t),NRo=r(H9e," (MPNet model)"),H9e.forEach(t),qRo=i(j),Fv=n(j,"LI",{});var U9e=s(Fv);Lfe=n(U9e,"STRONG",{});var kmt=s(Lfe);jRo=r(kmt,"nystromformer"),kmt.forEach(t),DRo=r(U9e," \u2014 "),zG=n(U9e,"A",{href:!0});var Smt=s(zG);GRo=r(Smt,"NystromformerForSequenceClassification"),Smt.forEach(t),ORo=r(U9e," (Nystromformer model)"),U9e.forEach(t),VRo=i(j),Tv=n(j,"LI",{});var J9e=s(Tv);xfe=n(J9e,"STRONG",{});var Rmt=s(xfe);XRo=r(Rmt,"openai-gpt"),Rmt.forEach(t),zRo=r(J9e," \u2014 "),WG=n(J9e,"A",{href:!0});var Pmt=s(WG);WRo=r(Pmt,"OpenAIGPTForSequenceClassification"),Pmt.forEach(t),QRo=r(J9e," (OpenAI GPT model)"),J9e.forEach(t),HRo=i(j),Mv=n(j,"LI",{});var Y9e=s(Mv);$fe=n(Y9e,"STRONG",{});var Bmt=s($fe);URo=r(Bmt,"perceiver"),Bmt.forEach(t),JRo=r(Y9e," \u2014 "),QG=n(Y9e,"A",{href:!0});var Imt=s(QG);YRo=r(Imt,"PerceiverForSequenceClassification"),Imt.forEach(t),KRo=r(Y9e," (Perceiver model)"),Y9e.forEach(t),ZRo=i(j),Ev=n(j,"LI",{});var K9e=s(Ev);kfe=n(K9e,"STRONG",{});var Nmt=s(kfe);ePo=r(Nmt,"plbart"),Nmt.forEach(t),oPo=r(K9e," \u2014 "),HG=n(K9e,"A",{href:!0});var qmt=s(HG);rPo=r(qmt,"PLBartForSequenceClassification"),qmt.forEach(t),tPo=r(K9e," (PLBart model)"),K9e.forEach(t),aPo=i(j),Cv=n(j,"LI",{});var Z9e=s(Cv);Sfe=n(Z9e,"STRONG",{});var jmt=s(Sfe);nPo=r(jmt,"qdqbert"),jmt.forEach(t),sPo=r(Z9e," \u2014 "),UG=n(Z9e,"A",{href:!0});var Dmt=s(UG);lPo=r(Dmt,"QDQBertForSequenceClassification"),Dmt.forEach(t),iPo=r(Z9e," (QDQBert model)"),Z9e.forEach(t),dPo=i(j),wv=n(j,"LI",{});var exe=s(wv);Rfe=n(exe,"STRONG",{});var Gmt=s(Rfe);cPo=r(Gmt,"reformer"),Gmt.forEach(t),mPo=r(exe," \u2014 "),JG=n(exe,"A",{href:!0});var Omt=s(JG);fPo=r(Omt,"ReformerForSequenceClassification"),Omt.forEach(t),gPo=r(exe," (Reformer model)"),exe.forEach(t),hPo=i(j),Av=n(j,"LI",{});var oxe=s(Av);Pfe=n(oxe,"STRONG",{});var Vmt=s(Pfe);uPo=r(Vmt,"rembert"),Vmt.forEach(t),pPo=r(oxe," \u2014 "),YG=n(oxe,"A",{href:!0});var Xmt=s(YG);_Po=r(Xmt,"RemBertForSequenceClassification"),Xmt.forEach(t),bPo=r(oxe," (RemBERT model)"),oxe.forEach(t),vPo=i(j),yv=n(j,"LI",{});var rxe=s(yv);Bfe=n(rxe,"STRONG",{});var zmt=s(Bfe);FPo=r(zmt,"roberta"),zmt.forEach(t),TPo=r(rxe," \u2014 "),KG=n(rxe,"A",{href:!0});var Wmt=s(KG);MPo=r(Wmt,"RobertaForSequenceClassification"),Wmt.forEach(t),EPo=r(rxe," (RoBERTa model)"),rxe.forEach(t),CPo=i(j),Lv=n(j,"LI",{});var txe=s(Lv);Ife=n(txe,"STRONG",{});var Qmt=s(Ife);wPo=r(Qmt,"roformer"),Qmt.forEach(t),APo=r(txe," \u2014 "),ZG=n(txe,"A",{href:!0});var Hmt=s(ZG);yPo=r(Hmt,"RoFormerForSequenceClassification"),Hmt.forEach(t),LPo=r(txe," (RoFormer model)"),txe.forEach(t),xPo=i(j),xv=n(j,"LI",{});var axe=s(xv);Nfe=n(axe,"STRONG",{});var Umt=s(Nfe);$Po=r(Umt,"squeezebert"),Umt.forEach(t),kPo=r(axe," \u2014 "),eO=n(axe,"A",{href:!0});var Jmt=s(eO);SPo=r(Jmt,"SqueezeBertForSequenceClassification"),Jmt.forEach(t),RPo=r(axe," (SqueezeBERT model)"),axe.forEach(t),PPo=i(j),$v=n(j,"LI",{});var nxe=s($v);qfe=n(nxe,"STRONG",{});var Ymt=s(qfe);BPo=r(Ymt,"tapas"),Ymt.forEach(t),IPo=r(nxe," \u2014 "),oO=n(nxe,"A",{href:!0});var Kmt=s(oO);NPo=r(Kmt,"TapasForSequenceClassification"),Kmt.forEach(t),qPo=r(nxe," (TAPAS model)"),nxe.forEach(t),jPo=i(j),kv=n(j,"LI",{});var sxe=s(kv);jfe=n(sxe,"STRONG",{});var Zmt=s(jfe);DPo=r(Zmt,"transfo-xl"),Zmt.forEach(t),GPo=r(sxe," \u2014 "),rO=n(sxe,"A",{href:!0});var eft=s(rO);OPo=r(eft,"TransfoXLForSequenceClassification"),eft.forEach(t),VPo=r(sxe," (Transformer-XL model)"),sxe.forEach(t),XPo=i(j),Sv=n(j,"LI",{});var lxe=s(Sv);Dfe=n(lxe,"STRONG",{});var oft=s(Dfe);zPo=r(oft,"xlm"),oft.forEach(t),WPo=r(lxe," \u2014 "),tO=n(lxe,"A",{href:!0});var rft=s(tO);QPo=r(rft,"XLMForSequenceClassification"),rft.forEach(t),HPo=r(lxe," (XLM model)"),lxe.forEach(t),UPo=i(j),Rv=n(j,"LI",{});var ixe=s(Rv);Gfe=n(ixe,"STRONG",{});var tft=s(Gfe);JPo=r(tft,"xlm-roberta"),tft.forEach(t),YPo=r(ixe," \u2014 "),aO=n(ixe,"A",{href:!0});var aft=s(aO);KPo=r(aft,"XLMRobertaForSequenceClassification"),aft.forEach(t),ZPo=r(ixe," (XLM-RoBERTa model)"),ixe.forEach(t),eBo=i(j),Pv=n(j,"LI",{});var dxe=s(Pv);Ofe=n(dxe,"STRONG",{});var nft=s(Ofe);oBo=r(nft,"xlm-roberta-xl"),nft.forEach(t),rBo=r(dxe," \u2014 "),nO=n(dxe,"A",{href:!0});var sft=s(nO);tBo=r(sft,"XLMRobertaXLForSequenceClassification"),sft.forEach(t),aBo=r(dxe," (XLM-RoBERTa-XL model)"),dxe.forEach(t),nBo=i(j),Bv=n(j,"LI",{});var cxe=s(Bv);Vfe=n(cxe,"STRONG",{});var lft=s(Vfe);sBo=r(lft,"xlnet"),lft.forEach(t),lBo=r(cxe," \u2014 "),sO=n(cxe,"A",{href:!0});var ift=s(sO);iBo=r(ift,"XLNetForSequenceClassification"),ift.forEach(t),dBo=r(cxe," (XLNet model)"),cxe.forEach(t),cBo=i(j),Iv=n(j,"LI",{});var mxe=s(Iv);Xfe=n(mxe,"STRONG",{});var dft=s(Xfe);mBo=r(dft,"yoso"),dft.forEach(t),fBo=r(mxe," \u2014 "),lO=n(mxe,"A",{href:!0});var cft=s(lO);gBo=r(cft,"YosoForSequenceClassification"),cft.forEach(t),hBo=r(mxe," (YOSO model)"),mxe.forEach(t),j.forEach(t),uBo=i(sa),Nv=n(sa,"P",{});var fxe=s(Nv);pBo=r(fxe,"The model is set in evaluation mode by default using "),zfe=n(fxe,"CODE",{});var mft=s(zfe);_Bo=r(mft,"model.eval()"),mft.forEach(t),bBo=r(fxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wfe=n(fxe,"CODE",{});var fft=s(Wfe);vBo=r(fft,"model.train()"),fft.forEach(t),fxe.forEach(t),FBo=i(sa),T(qv.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),Vqe=i(m),Vi=n(m,"H2",{class:!0});var QDe=s(Vi);jv=n(QDe,"A",{id:!0,class:!0,href:!0});var gft=s(jv);Qfe=n(gft,"SPAN",{});var hft=s(Qfe);T(PL.$$.fragment,hft),hft.forEach(t),gft.forEach(t),TBo=i(QDe),Hfe=n(QDe,"SPAN",{});var uft=s(Hfe);MBo=r(uft,"AutoModelForMultipleChoice"),uft.forEach(t),QDe.forEach(t),Xqe=i(m),Po=n(m,"DIV",{class:!0});var Qs=s(Po);T(BL.$$.fragment,Qs),EBo=i(Qs),Xi=n(Qs,"P",{});var NZ=s(Xi);CBo=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),iO=n(NZ,"A",{href:!0});var pft=s(iO);wBo=r(pft,"from_pretrained()"),pft.forEach(t),ABo=r(NZ," class method or the "),dO=n(NZ,"A",{href:!0});var _ft=s(dO);yBo=r(_ft,"from_config()"),_ft.forEach(t),LBo=r(NZ,` class
method.`),NZ.forEach(t),xBo=i(Qs),IL=n(Qs,"P",{});var HDe=s(IL);$Bo=r(HDe,"This class cannot be instantiated directly using "),Ufe=n(HDe,"CODE",{});var bft=s(Ufe);kBo=r(bft,"__init__()"),bft.forEach(t),SBo=r(HDe," (throws an error)."),HDe.forEach(t),RBo=i(Qs),dt=n(Qs,"DIV",{class:!0});var H6=s(dt);T(NL.$$.fragment,H6),PBo=i(H6),Jfe=n(H6,"P",{});var vft=s(Jfe);BBo=r(vft,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vft.forEach(t),IBo=i(H6),zi=n(H6,"P",{});var qZ=s(zi);NBo=r(qZ,`Note:
Loading a model from its configuration file does `),Yfe=n(qZ,"STRONG",{});var Fft=s(Yfe);qBo=r(Fft,"not"),Fft.forEach(t),jBo=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cO=n(qZ,"A",{href:!0});var Tft=s(cO);DBo=r(Tft,"from_pretrained()"),Tft.forEach(t),GBo=r(qZ," to load the model weights."),qZ.forEach(t),OBo=i(H6),T(Dv.$$.fragment,H6),H6.forEach(t),VBo=i(Qs),ro=n(Qs,"DIV",{class:!0});var la=s(ro);T(qL.$$.fragment,la),XBo=i(la),Kfe=n(la,"P",{});var Mft=s(Kfe);zBo=r(Mft,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Mft.forEach(t),WBo=i(la),Pa=n(la,"P",{});var U6=s(Pa);QBo=r(U6,"The model class to instantiate is selected based on the "),Zfe=n(U6,"CODE",{});var Eft=s(Zfe);HBo=r(Eft,"model_type"),Eft.forEach(t),UBo=r(U6,` property of the config object (either
passed as an argument or loaded from `),ege=n(U6,"CODE",{});var Cft=s(ege);JBo=r(Cft,"pretrained_model_name_or_path"),Cft.forEach(t),YBo=r(U6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oge=n(U6,"CODE",{});var wft=s(oge);KBo=r(wft,"pretrained_model_name_or_path"),wft.forEach(t),ZBo=r(U6,":"),U6.forEach(t),eIo=i(la),K=n(la,"UL",{});var ee=s(K);Gv=n(ee,"LI",{});var gxe=s(Gv);rge=n(gxe,"STRONG",{});var Aft=s(rge);oIo=r(Aft,"albert"),Aft.forEach(t),rIo=r(gxe," \u2014 "),mO=n(gxe,"A",{href:!0});var yft=s(mO);tIo=r(yft,"AlbertForMultipleChoice"),yft.forEach(t),aIo=r(gxe," (ALBERT model)"),gxe.forEach(t),nIo=i(ee),Ov=n(ee,"LI",{});var hxe=s(Ov);tge=n(hxe,"STRONG",{});var Lft=s(tge);sIo=r(Lft,"bert"),Lft.forEach(t),lIo=r(hxe," \u2014 "),fO=n(hxe,"A",{href:!0});var xft=s(fO);iIo=r(xft,"BertForMultipleChoice"),xft.forEach(t),dIo=r(hxe," (BERT model)"),hxe.forEach(t),cIo=i(ee),Vv=n(ee,"LI",{});var uxe=s(Vv);age=n(uxe,"STRONG",{});var $ft=s(age);mIo=r($ft,"big_bird"),$ft.forEach(t),fIo=r(uxe," \u2014 "),gO=n(uxe,"A",{href:!0});var kft=s(gO);gIo=r(kft,"BigBirdForMultipleChoice"),kft.forEach(t),hIo=r(uxe," (BigBird model)"),uxe.forEach(t),uIo=i(ee),Xv=n(ee,"LI",{});var pxe=s(Xv);nge=n(pxe,"STRONG",{});var Sft=s(nge);pIo=r(Sft,"camembert"),Sft.forEach(t),_Io=r(pxe," \u2014 "),hO=n(pxe,"A",{href:!0});var Rft=s(hO);bIo=r(Rft,"CamembertForMultipleChoice"),Rft.forEach(t),vIo=r(pxe," (CamemBERT model)"),pxe.forEach(t),FIo=i(ee),zv=n(ee,"LI",{});var _xe=s(zv);sge=n(_xe,"STRONG",{});var Pft=s(sge);TIo=r(Pft,"canine"),Pft.forEach(t),MIo=r(_xe," \u2014 "),uO=n(_xe,"A",{href:!0});var Bft=s(uO);EIo=r(Bft,"CanineForMultipleChoice"),Bft.forEach(t),CIo=r(_xe," (Canine model)"),_xe.forEach(t),wIo=i(ee),Wv=n(ee,"LI",{});var bxe=s(Wv);lge=n(bxe,"STRONG",{});var Ift=s(lge);AIo=r(Ift,"convbert"),Ift.forEach(t),yIo=r(bxe," \u2014 "),pO=n(bxe,"A",{href:!0});var Nft=s(pO);LIo=r(Nft,"ConvBertForMultipleChoice"),Nft.forEach(t),xIo=r(bxe," (ConvBERT model)"),bxe.forEach(t),$Io=i(ee),Qv=n(ee,"LI",{});var vxe=s(Qv);ige=n(vxe,"STRONG",{});var qft=s(ige);kIo=r(qft,"data2vec-text"),qft.forEach(t),SIo=r(vxe," \u2014 "),_O=n(vxe,"A",{href:!0});var jft=s(_O);RIo=r(jft,"Data2VecTextForMultipleChoice"),jft.forEach(t),PIo=r(vxe," (Data2VecText model)"),vxe.forEach(t),BIo=i(ee),Hv=n(ee,"LI",{});var Fxe=s(Hv);dge=n(Fxe,"STRONG",{});var Dft=s(dge);IIo=r(Dft,"deberta-v2"),Dft.forEach(t),NIo=r(Fxe," \u2014 "),bO=n(Fxe,"A",{href:!0});var Gft=s(bO);qIo=r(Gft,"DebertaV2ForMultipleChoice"),Gft.forEach(t),jIo=r(Fxe," (DeBERTa-v2 model)"),Fxe.forEach(t),DIo=i(ee),Uv=n(ee,"LI",{});var Txe=s(Uv);cge=n(Txe,"STRONG",{});var Oft=s(cge);GIo=r(Oft,"distilbert"),Oft.forEach(t),OIo=r(Txe," \u2014 "),vO=n(Txe,"A",{href:!0});var Vft=s(vO);VIo=r(Vft,"DistilBertForMultipleChoice"),Vft.forEach(t),XIo=r(Txe," (DistilBERT model)"),Txe.forEach(t),zIo=i(ee),Jv=n(ee,"LI",{});var Mxe=s(Jv);mge=n(Mxe,"STRONG",{});var Xft=s(mge);WIo=r(Xft,"electra"),Xft.forEach(t),QIo=r(Mxe," \u2014 "),FO=n(Mxe,"A",{href:!0});var zft=s(FO);HIo=r(zft,"ElectraForMultipleChoice"),zft.forEach(t),UIo=r(Mxe," (ELECTRA model)"),Mxe.forEach(t),JIo=i(ee),Yv=n(ee,"LI",{});var Exe=s(Yv);fge=n(Exe,"STRONG",{});var Wft=s(fge);YIo=r(Wft,"flaubert"),Wft.forEach(t),KIo=r(Exe," \u2014 "),TO=n(Exe,"A",{href:!0});var Qft=s(TO);ZIo=r(Qft,"FlaubertForMultipleChoice"),Qft.forEach(t),eNo=r(Exe," (FlauBERT model)"),Exe.forEach(t),oNo=i(ee),Kv=n(ee,"LI",{});var Cxe=s(Kv);gge=n(Cxe,"STRONG",{});var Hft=s(gge);rNo=r(Hft,"fnet"),Hft.forEach(t),tNo=r(Cxe," \u2014 "),MO=n(Cxe,"A",{href:!0});var Uft=s(MO);aNo=r(Uft,"FNetForMultipleChoice"),Uft.forEach(t),nNo=r(Cxe," (FNet model)"),Cxe.forEach(t),sNo=i(ee),Zv=n(ee,"LI",{});var wxe=s(Zv);hge=n(wxe,"STRONG",{});var Jft=s(hge);lNo=r(Jft,"funnel"),Jft.forEach(t),iNo=r(wxe," \u2014 "),EO=n(wxe,"A",{href:!0});var Yft=s(EO);dNo=r(Yft,"FunnelForMultipleChoice"),Yft.forEach(t),cNo=r(wxe," (Funnel Transformer model)"),wxe.forEach(t),mNo=i(ee),eF=n(ee,"LI",{});var Axe=s(eF);uge=n(Axe,"STRONG",{});var Kft=s(uge);fNo=r(Kft,"ibert"),Kft.forEach(t),gNo=r(Axe," \u2014 "),CO=n(Axe,"A",{href:!0});var Zft=s(CO);hNo=r(Zft,"IBertForMultipleChoice"),Zft.forEach(t),uNo=r(Axe," (I-BERT model)"),Axe.forEach(t),pNo=i(ee),oF=n(ee,"LI",{});var yxe=s(oF);pge=n(yxe,"STRONG",{});var egt=s(pge);_No=r(egt,"longformer"),egt.forEach(t),bNo=r(yxe," \u2014 "),wO=n(yxe,"A",{href:!0});var ogt=s(wO);vNo=r(ogt,"LongformerForMultipleChoice"),ogt.forEach(t),FNo=r(yxe," (Longformer model)"),yxe.forEach(t),TNo=i(ee),rF=n(ee,"LI",{});var Lxe=s(rF);_ge=n(Lxe,"STRONG",{});var rgt=s(_ge);MNo=r(rgt,"megatron-bert"),rgt.forEach(t),ENo=r(Lxe," \u2014 "),AO=n(Lxe,"A",{href:!0});var tgt=s(AO);CNo=r(tgt,"MegatronBertForMultipleChoice"),tgt.forEach(t),wNo=r(Lxe," (MegatronBert model)"),Lxe.forEach(t),ANo=i(ee),tF=n(ee,"LI",{});var xxe=s(tF);bge=n(xxe,"STRONG",{});var agt=s(bge);yNo=r(agt,"mobilebert"),agt.forEach(t),LNo=r(xxe," \u2014 "),yO=n(xxe,"A",{href:!0});var ngt=s(yO);xNo=r(ngt,"MobileBertForMultipleChoice"),ngt.forEach(t),$No=r(xxe," (MobileBERT model)"),xxe.forEach(t),kNo=i(ee),aF=n(ee,"LI",{});var $xe=s(aF);vge=n($xe,"STRONG",{});var sgt=s(vge);SNo=r(sgt,"mpnet"),sgt.forEach(t),RNo=r($xe," \u2014 "),LO=n($xe,"A",{href:!0});var lgt=s(LO);PNo=r(lgt,"MPNetForMultipleChoice"),lgt.forEach(t),BNo=r($xe," (MPNet model)"),$xe.forEach(t),INo=i(ee),nF=n(ee,"LI",{});var kxe=s(nF);Fge=n(kxe,"STRONG",{});var igt=s(Fge);NNo=r(igt,"nystromformer"),igt.forEach(t),qNo=r(kxe," \u2014 "),xO=n(kxe,"A",{href:!0});var dgt=s(xO);jNo=r(dgt,"NystromformerForMultipleChoice"),dgt.forEach(t),DNo=r(kxe," (Nystromformer model)"),kxe.forEach(t),GNo=i(ee),sF=n(ee,"LI",{});var Sxe=s(sF);Tge=n(Sxe,"STRONG",{});var cgt=s(Tge);ONo=r(cgt,"qdqbert"),cgt.forEach(t),VNo=r(Sxe," \u2014 "),$O=n(Sxe,"A",{href:!0});var mgt=s($O);XNo=r(mgt,"QDQBertForMultipleChoice"),mgt.forEach(t),zNo=r(Sxe," (QDQBert model)"),Sxe.forEach(t),WNo=i(ee),lF=n(ee,"LI",{});var Rxe=s(lF);Mge=n(Rxe,"STRONG",{});var fgt=s(Mge);QNo=r(fgt,"rembert"),fgt.forEach(t),HNo=r(Rxe," \u2014 "),kO=n(Rxe,"A",{href:!0});var ggt=s(kO);UNo=r(ggt,"RemBertForMultipleChoice"),ggt.forEach(t),JNo=r(Rxe," (RemBERT model)"),Rxe.forEach(t),YNo=i(ee),iF=n(ee,"LI",{});var Pxe=s(iF);Ege=n(Pxe,"STRONG",{});var hgt=s(Ege);KNo=r(hgt,"roberta"),hgt.forEach(t),ZNo=r(Pxe," \u2014 "),SO=n(Pxe,"A",{href:!0});var ugt=s(SO);eqo=r(ugt,"RobertaForMultipleChoice"),ugt.forEach(t),oqo=r(Pxe," (RoBERTa model)"),Pxe.forEach(t),rqo=i(ee),dF=n(ee,"LI",{});var Bxe=s(dF);Cge=n(Bxe,"STRONG",{});var pgt=s(Cge);tqo=r(pgt,"roformer"),pgt.forEach(t),aqo=r(Bxe," \u2014 "),RO=n(Bxe,"A",{href:!0});var _gt=s(RO);nqo=r(_gt,"RoFormerForMultipleChoice"),_gt.forEach(t),sqo=r(Bxe," (RoFormer model)"),Bxe.forEach(t),lqo=i(ee),cF=n(ee,"LI",{});var Ixe=s(cF);wge=n(Ixe,"STRONG",{});var bgt=s(wge);iqo=r(bgt,"squeezebert"),bgt.forEach(t),dqo=r(Ixe," \u2014 "),PO=n(Ixe,"A",{href:!0});var vgt=s(PO);cqo=r(vgt,"SqueezeBertForMultipleChoice"),vgt.forEach(t),mqo=r(Ixe," (SqueezeBERT model)"),Ixe.forEach(t),fqo=i(ee),mF=n(ee,"LI",{});var Nxe=s(mF);Age=n(Nxe,"STRONG",{});var Fgt=s(Age);gqo=r(Fgt,"xlm"),Fgt.forEach(t),hqo=r(Nxe," \u2014 "),BO=n(Nxe,"A",{href:!0});var Tgt=s(BO);uqo=r(Tgt,"XLMForMultipleChoice"),Tgt.forEach(t),pqo=r(Nxe," (XLM model)"),Nxe.forEach(t),_qo=i(ee),fF=n(ee,"LI",{});var qxe=s(fF);yge=n(qxe,"STRONG",{});var Mgt=s(yge);bqo=r(Mgt,"xlm-roberta"),Mgt.forEach(t),vqo=r(qxe," \u2014 "),IO=n(qxe,"A",{href:!0});var Egt=s(IO);Fqo=r(Egt,"XLMRobertaForMultipleChoice"),Egt.forEach(t),Tqo=r(qxe," (XLM-RoBERTa model)"),qxe.forEach(t),Mqo=i(ee),gF=n(ee,"LI",{});var jxe=s(gF);Lge=n(jxe,"STRONG",{});var Cgt=s(Lge);Eqo=r(Cgt,"xlm-roberta-xl"),Cgt.forEach(t),Cqo=r(jxe," \u2014 "),NO=n(jxe,"A",{href:!0});var wgt=s(NO);wqo=r(wgt,"XLMRobertaXLForMultipleChoice"),wgt.forEach(t),Aqo=r(jxe," (XLM-RoBERTa-XL model)"),jxe.forEach(t),yqo=i(ee),hF=n(ee,"LI",{});var Dxe=s(hF);xge=n(Dxe,"STRONG",{});var Agt=s(xge);Lqo=r(Agt,"xlnet"),Agt.forEach(t),xqo=r(Dxe," \u2014 "),qO=n(Dxe,"A",{href:!0});var ygt=s(qO);$qo=r(ygt,"XLNetForMultipleChoice"),ygt.forEach(t),kqo=r(Dxe," (XLNet model)"),Dxe.forEach(t),Sqo=i(ee),uF=n(ee,"LI",{});var Gxe=s(uF);$ge=n(Gxe,"STRONG",{});var Lgt=s($ge);Rqo=r(Lgt,"yoso"),Lgt.forEach(t),Pqo=r(Gxe," \u2014 "),jO=n(Gxe,"A",{href:!0});var xgt=s(jO);Bqo=r(xgt,"YosoForMultipleChoice"),xgt.forEach(t),Iqo=r(Gxe," (YOSO model)"),Gxe.forEach(t),ee.forEach(t),Nqo=i(la),pF=n(la,"P",{});var Oxe=s(pF);qqo=r(Oxe,"The model is set in evaluation mode by default using "),kge=n(Oxe,"CODE",{});var $gt=s(kge);jqo=r($gt,"model.eval()"),$gt.forEach(t),Dqo=r(Oxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sge=n(Oxe,"CODE",{});var kgt=s(Sge);Gqo=r(kgt,"model.train()"),kgt.forEach(t),Oxe.forEach(t),Oqo=i(la),T(_F.$$.fragment,la),la.forEach(t),Qs.forEach(t),zqe=i(m),Wi=n(m,"H2",{class:!0});var UDe=s(Wi);bF=n(UDe,"A",{id:!0,class:!0,href:!0});var Sgt=s(bF);Rge=n(Sgt,"SPAN",{});var Rgt=s(Rge);T(jL.$$.fragment,Rgt),Rgt.forEach(t),Sgt.forEach(t),Vqo=i(UDe),Pge=n(UDe,"SPAN",{});var Pgt=s(Pge);Xqo=r(Pgt,"AutoModelForNextSentencePrediction"),Pgt.forEach(t),UDe.forEach(t),Wqe=i(m),Bo=n(m,"DIV",{class:!0});var Hs=s(Bo);T(DL.$$.fragment,Hs),zqo=i(Hs),Qi=n(Hs,"P",{});var jZ=s(Qi);Wqo=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),DO=n(jZ,"A",{href:!0});var Bgt=s(DO);Qqo=r(Bgt,"from_pretrained()"),Bgt.forEach(t),Hqo=r(jZ," class method or the "),GO=n(jZ,"A",{href:!0});var Igt=s(GO);Uqo=r(Igt,"from_config()"),Igt.forEach(t),Jqo=r(jZ,` class
method.`),jZ.forEach(t),Yqo=i(Hs),GL=n(Hs,"P",{});var JDe=s(GL);Kqo=r(JDe,"This class cannot be instantiated directly using "),Bge=n(JDe,"CODE",{});var Ngt=s(Bge);Zqo=r(Ngt,"__init__()"),Ngt.forEach(t),ejo=r(JDe," (throws an error)."),JDe.forEach(t),ojo=i(Hs),ct=n(Hs,"DIV",{class:!0});var J6=s(ct);T(OL.$$.fragment,J6),rjo=i(J6),Ige=n(J6,"P",{});var qgt=s(Ige);tjo=r(qgt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),qgt.forEach(t),ajo=i(J6),Hi=n(J6,"P",{});var DZ=s(Hi);njo=r(DZ,`Note:
Loading a model from its configuration file does `),Nge=n(DZ,"STRONG",{});var jgt=s(Nge);sjo=r(jgt,"not"),jgt.forEach(t),ljo=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OO=n(DZ,"A",{href:!0});var Dgt=s(OO);ijo=r(Dgt,"from_pretrained()"),Dgt.forEach(t),djo=r(DZ," to load the model weights."),DZ.forEach(t),cjo=i(J6),T(vF.$$.fragment,J6),J6.forEach(t),mjo=i(Hs),to=n(Hs,"DIV",{class:!0});var ia=s(to);T(VL.$$.fragment,ia),fjo=i(ia),qge=n(ia,"P",{});var Ggt=s(qge);gjo=r(Ggt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Ggt.forEach(t),hjo=i(ia),Ba=n(ia,"P",{});var Y6=s(Ba);ujo=r(Y6,"The model class to instantiate is selected based on the "),jge=n(Y6,"CODE",{});var Ogt=s(jge);pjo=r(Ogt,"model_type"),Ogt.forEach(t),_jo=r(Y6,` property of the config object (either
passed as an argument or loaded from `),Dge=n(Y6,"CODE",{});var Vgt=s(Dge);bjo=r(Vgt,"pretrained_model_name_or_path"),Vgt.forEach(t),vjo=r(Y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gge=n(Y6,"CODE",{});var Xgt=s(Gge);Fjo=r(Xgt,"pretrained_model_name_or_path"),Xgt.forEach(t),Tjo=r(Y6,":"),Y6.forEach(t),Mjo=i(ia),Yr=n(ia,"UL",{});var Us=s(Yr);FF=n(Us,"LI",{});var Vxe=s(FF);Oge=n(Vxe,"STRONG",{});var zgt=s(Oge);Ejo=r(zgt,"bert"),zgt.forEach(t),Cjo=r(Vxe," \u2014 "),VO=n(Vxe,"A",{href:!0});var Wgt=s(VO);wjo=r(Wgt,"BertForNextSentencePrediction"),Wgt.forEach(t),Ajo=r(Vxe," (BERT model)"),Vxe.forEach(t),yjo=i(Us),TF=n(Us,"LI",{});var Xxe=s(TF);Vge=n(Xxe,"STRONG",{});var Qgt=s(Vge);Ljo=r(Qgt,"fnet"),Qgt.forEach(t),xjo=r(Xxe," \u2014 "),XO=n(Xxe,"A",{href:!0});var Hgt=s(XO);$jo=r(Hgt,"FNetForNextSentencePrediction"),Hgt.forEach(t),kjo=r(Xxe," (FNet model)"),Xxe.forEach(t),Sjo=i(Us),MF=n(Us,"LI",{});var zxe=s(MF);Xge=n(zxe,"STRONG",{});var Ugt=s(Xge);Rjo=r(Ugt,"megatron-bert"),Ugt.forEach(t),Pjo=r(zxe," \u2014 "),zO=n(zxe,"A",{href:!0});var Jgt=s(zO);Bjo=r(Jgt,"MegatronBertForNextSentencePrediction"),Jgt.forEach(t),Ijo=r(zxe," (MegatronBert model)"),zxe.forEach(t),Njo=i(Us),EF=n(Us,"LI",{});var Wxe=s(EF);zge=n(Wxe,"STRONG",{});var Ygt=s(zge);qjo=r(Ygt,"mobilebert"),Ygt.forEach(t),jjo=r(Wxe," \u2014 "),WO=n(Wxe,"A",{href:!0});var Kgt=s(WO);Djo=r(Kgt,"MobileBertForNextSentencePrediction"),Kgt.forEach(t),Gjo=r(Wxe," (MobileBERT model)"),Wxe.forEach(t),Ojo=i(Us),CF=n(Us,"LI",{});var Qxe=s(CF);Wge=n(Qxe,"STRONG",{});var Zgt=s(Wge);Vjo=r(Zgt,"qdqbert"),Zgt.forEach(t),Xjo=r(Qxe," \u2014 "),QO=n(Qxe,"A",{href:!0});var eht=s(QO);zjo=r(eht,"QDQBertForNextSentencePrediction"),eht.forEach(t),Wjo=r(Qxe," (QDQBert model)"),Qxe.forEach(t),Us.forEach(t),Qjo=i(ia),wF=n(ia,"P",{});var Hxe=s(wF);Hjo=r(Hxe,"The model is set in evaluation mode by default using "),Qge=n(Hxe,"CODE",{});var oht=s(Qge);Ujo=r(oht,"model.eval()"),oht.forEach(t),Jjo=r(Hxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hge=n(Hxe,"CODE",{});var rht=s(Hge);Yjo=r(rht,"model.train()"),rht.forEach(t),Hxe.forEach(t),Kjo=i(ia),T(AF.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),Qqe=i(m),Ui=n(m,"H2",{class:!0});var YDe=s(Ui);yF=n(YDe,"A",{id:!0,class:!0,href:!0});var tht=s(yF);Uge=n(tht,"SPAN",{});var aht=s(Uge);T(XL.$$.fragment,aht),aht.forEach(t),tht.forEach(t),Zjo=i(YDe),Jge=n(YDe,"SPAN",{});var nht=s(Jge);eDo=r(nht,"AutoModelForTokenClassification"),nht.forEach(t),YDe.forEach(t),Hqe=i(m),Io=n(m,"DIV",{class:!0});var Js=s(Io);T(zL.$$.fragment,Js),oDo=i(Js),Ji=n(Js,"P",{});var GZ=s(Ji);rDo=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),HO=n(GZ,"A",{href:!0});var sht=s(HO);tDo=r(sht,"from_pretrained()"),sht.forEach(t),aDo=r(GZ," class method or the "),UO=n(GZ,"A",{href:!0});var lht=s(UO);nDo=r(lht,"from_config()"),lht.forEach(t),sDo=r(GZ,` class
method.`),GZ.forEach(t),lDo=i(Js),WL=n(Js,"P",{});var KDe=s(WL);iDo=r(KDe,"This class cannot be instantiated directly using "),Yge=n(KDe,"CODE",{});var iht=s(Yge);dDo=r(iht,"__init__()"),iht.forEach(t),cDo=r(KDe," (throws an error)."),KDe.forEach(t),mDo=i(Js),mt=n(Js,"DIV",{class:!0});var K6=s(mt);T(QL.$$.fragment,K6),fDo=i(K6),Kge=n(K6,"P",{});var dht=s(Kge);gDo=r(dht,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),dht.forEach(t),hDo=i(K6),Yi=n(K6,"P",{});var OZ=s(Yi);uDo=r(OZ,`Note:
Loading a model from its configuration file does `),Zge=n(OZ,"STRONG",{});var cht=s(Zge);pDo=r(cht,"not"),cht.forEach(t),_Do=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JO=n(OZ,"A",{href:!0});var mht=s(JO);bDo=r(mht,"from_pretrained()"),mht.forEach(t),vDo=r(OZ," to load the model weights."),OZ.forEach(t),FDo=i(K6),T(LF.$$.fragment,K6),K6.forEach(t),TDo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(HL.$$.fragment,da),MDo=i(da),ehe=n(da,"P",{});var fht=s(ehe);EDo=r(fht,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),fht.forEach(t),CDo=i(da),Ia=n(da,"P",{});var Z6=s(Ia);wDo=r(Z6,"The model class to instantiate is selected based on the "),ohe=n(Z6,"CODE",{});var ght=s(ohe);ADo=r(ght,"model_type"),ght.forEach(t),yDo=r(Z6,` property of the config object (either
passed as an argument or loaded from `),rhe=n(Z6,"CODE",{});var hht=s(rhe);LDo=r(hht,"pretrained_model_name_or_path"),hht.forEach(t),xDo=r(Z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),the=n(Z6,"CODE",{});var uht=s(the);$Do=r(uht,"pretrained_model_name_or_path"),uht.forEach(t),kDo=r(Z6,":"),Z6.forEach(t),SDo=i(da),U=n(da,"UL",{});var J=s(U);xF=n(J,"LI",{});var Uxe=s(xF);ahe=n(Uxe,"STRONG",{});var pht=s(ahe);RDo=r(pht,"albert"),pht.forEach(t),PDo=r(Uxe," \u2014 "),YO=n(Uxe,"A",{href:!0});var _ht=s(YO);BDo=r(_ht,"AlbertForTokenClassification"),_ht.forEach(t),IDo=r(Uxe," (ALBERT model)"),Uxe.forEach(t),NDo=i(J),$F=n(J,"LI",{});var Jxe=s($F);nhe=n(Jxe,"STRONG",{});var bht=s(nhe);qDo=r(bht,"bert"),bht.forEach(t),jDo=r(Jxe," \u2014 "),KO=n(Jxe,"A",{href:!0});var vht=s(KO);DDo=r(vht,"BertForTokenClassification"),vht.forEach(t),GDo=r(Jxe," (BERT model)"),Jxe.forEach(t),ODo=i(J),kF=n(J,"LI",{});var Yxe=s(kF);she=n(Yxe,"STRONG",{});var Fht=s(she);VDo=r(Fht,"big_bird"),Fht.forEach(t),XDo=r(Yxe," \u2014 "),ZO=n(Yxe,"A",{href:!0});var Tht=s(ZO);zDo=r(Tht,"BigBirdForTokenClassification"),Tht.forEach(t),WDo=r(Yxe," (BigBird model)"),Yxe.forEach(t),QDo=i(J),SF=n(J,"LI",{});var Kxe=s(SF);lhe=n(Kxe,"STRONG",{});var Mht=s(lhe);HDo=r(Mht,"camembert"),Mht.forEach(t),UDo=r(Kxe," \u2014 "),eV=n(Kxe,"A",{href:!0});var Eht=s(eV);JDo=r(Eht,"CamembertForTokenClassification"),Eht.forEach(t),YDo=r(Kxe," (CamemBERT model)"),Kxe.forEach(t),KDo=i(J),RF=n(J,"LI",{});var Zxe=s(RF);ihe=n(Zxe,"STRONG",{});var Cht=s(ihe);ZDo=r(Cht,"canine"),Cht.forEach(t),eGo=r(Zxe," \u2014 "),oV=n(Zxe,"A",{href:!0});var wht=s(oV);oGo=r(wht,"CanineForTokenClassification"),wht.forEach(t),rGo=r(Zxe," (Canine model)"),Zxe.forEach(t),tGo=i(J),PF=n(J,"LI",{});var e$e=s(PF);dhe=n(e$e,"STRONG",{});var Aht=s(dhe);aGo=r(Aht,"convbert"),Aht.forEach(t),nGo=r(e$e," \u2014 "),rV=n(e$e,"A",{href:!0});var yht=s(rV);sGo=r(yht,"ConvBertForTokenClassification"),yht.forEach(t),lGo=r(e$e," (ConvBERT model)"),e$e.forEach(t),iGo=i(J),BF=n(J,"LI",{});var o$e=s(BF);che=n(o$e,"STRONG",{});var Lht=s(che);dGo=r(Lht,"data2vec-text"),Lht.forEach(t),cGo=r(o$e," \u2014 "),tV=n(o$e,"A",{href:!0});var xht=s(tV);mGo=r(xht,"Data2VecTextForTokenClassification"),xht.forEach(t),fGo=r(o$e," (Data2VecText model)"),o$e.forEach(t),gGo=i(J),IF=n(J,"LI",{});var r$e=s(IF);mhe=n(r$e,"STRONG",{});var $ht=s(mhe);hGo=r($ht,"deberta"),$ht.forEach(t),uGo=r(r$e," \u2014 "),aV=n(r$e,"A",{href:!0});var kht=s(aV);pGo=r(kht,"DebertaForTokenClassification"),kht.forEach(t),_Go=r(r$e," (DeBERTa model)"),r$e.forEach(t),bGo=i(J),NF=n(J,"LI",{});var t$e=s(NF);fhe=n(t$e,"STRONG",{});var Sht=s(fhe);vGo=r(Sht,"deberta-v2"),Sht.forEach(t),FGo=r(t$e," \u2014 "),nV=n(t$e,"A",{href:!0});var Rht=s(nV);TGo=r(Rht,"DebertaV2ForTokenClassification"),Rht.forEach(t),MGo=r(t$e," (DeBERTa-v2 model)"),t$e.forEach(t),EGo=i(J),qF=n(J,"LI",{});var a$e=s(qF);ghe=n(a$e,"STRONG",{});var Pht=s(ghe);CGo=r(Pht,"distilbert"),Pht.forEach(t),wGo=r(a$e," \u2014 "),sV=n(a$e,"A",{href:!0});var Bht=s(sV);AGo=r(Bht,"DistilBertForTokenClassification"),Bht.forEach(t),yGo=r(a$e," (DistilBERT model)"),a$e.forEach(t),LGo=i(J),jF=n(J,"LI",{});var n$e=s(jF);hhe=n(n$e,"STRONG",{});var Iht=s(hhe);xGo=r(Iht,"electra"),Iht.forEach(t),$Go=r(n$e," \u2014 "),lV=n(n$e,"A",{href:!0});var Nht=s(lV);kGo=r(Nht,"ElectraForTokenClassification"),Nht.forEach(t),SGo=r(n$e," (ELECTRA model)"),n$e.forEach(t),RGo=i(J),DF=n(J,"LI",{});var s$e=s(DF);uhe=n(s$e,"STRONG",{});var qht=s(uhe);PGo=r(qht,"flaubert"),qht.forEach(t),BGo=r(s$e," \u2014 "),iV=n(s$e,"A",{href:!0});var jht=s(iV);IGo=r(jht,"FlaubertForTokenClassification"),jht.forEach(t),NGo=r(s$e," (FlauBERT model)"),s$e.forEach(t),qGo=i(J),GF=n(J,"LI",{});var l$e=s(GF);phe=n(l$e,"STRONG",{});var Dht=s(phe);jGo=r(Dht,"fnet"),Dht.forEach(t),DGo=r(l$e," \u2014 "),dV=n(l$e,"A",{href:!0});var Ght=s(dV);GGo=r(Ght,"FNetForTokenClassification"),Ght.forEach(t),OGo=r(l$e," (FNet model)"),l$e.forEach(t),VGo=i(J),OF=n(J,"LI",{});var i$e=s(OF);_he=n(i$e,"STRONG",{});var Oht=s(_he);XGo=r(Oht,"funnel"),Oht.forEach(t),zGo=r(i$e," \u2014 "),cV=n(i$e,"A",{href:!0});var Vht=s(cV);WGo=r(Vht,"FunnelForTokenClassification"),Vht.forEach(t),QGo=r(i$e," (Funnel Transformer model)"),i$e.forEach(t),HGo=i(J),VF=n(J,"LI",{});var d$e=s(VF);bhe=n(d$e,"STRONG",{});var Xht=s(bhe);UGo=r(Xht,"gpt2"),Xht.forEach(t),JGo=r(d$e," \u2014 "),mV=n(d$e,"A",{href:!0});var zht=s(mV);YGo=r(zht,"GPT2ForTokenClassification"),zht.forEach(t),KGo=r(d$e," (OpenAI GPT-2 model)"),d$e.forEach(t),ZGo=i(J),XF=n(J,"LI",{});var c$e=s(XF);vhe=n(c$e,"STRONG",{});var Wht=s(vhe);eOo=r(Wht,"ibert"),Wht.forEach(t),oOo=r(c$e," \u2014 "),fV=n(c$e,"A",{href:!0});var Qht=s(fV);rOo=r(Qht,"IBertForTokenClassification"),Qht.forEach(t),tOo=r(c$e," (I-BERT model)"),c$e.forEach(t),aOo=i(J),zF=n(J,"LI",{});var m$e=s(zF);Fhe=n(m$e,"STRONG",{});var Hht=s(Fhe);nOo=r(Hht,"layoutlm"),Hht.forEach(t),sOo=r(m$e," \u2014 "),gV=n(m$e,"A",{href:!0});var Uht=s(gV);lOo=r(Uht,"LayoutLMForTokenClassification"),Uht.forEach(t),iOo=r(m$e," (LayoutLM model)"),m$e.forEach(t),dOo=i(J),WF=n(J,"LI",{});var f$e=s(WF);The=n(f$e,"STRONG",{});var Jht=s(The);cOo=r(Jht,"layoutlmv2"),Jht.forEach(t),mOo=r(f$e," \u2014 "),hV=n(f$e,"A",{href:!0});var Yht=s(hV);fOo=r(Yht,"LayoutLMv2ForTokenClassification"),Yht.forEach(t),gOo=r(f$e," (LayoutLMv2 model)"),f$e.forEach(t),hOo=i(J),QF=n(J,"LI",{});var g$e=s(QF);Mhe=n(g$e,"STRONG",{});var Kht=s(Mhe);uOo=r(Kht,"layoutlmv3"),Kht.forEach(t),pOo=r(g$e," \u2014 "),uV=n(g$e,"A",{href:!0});var Zht=s(uV);_Oo=r(Zht,"LayoutLMv3ForTokenClassification"),Zht.forEach(t),bOo=r(g$e," (LayoutLMv3 model)"),g$e.forEach(t),vOo=i(J),HF=n(J,"LI",{});var h$e=s(HF);Ehe=n(h$e,"STRONG",{});var eut=s(Ehe);FOo=r(eut,"longformer"),eut.forEach(t),TOo=r(h$e," \u2014 "),pV=n(h$e,"A",{href:!0});var out=s(pV);MOo=r(out,"LongformerForTokenClassification"),out.forEach(t),EOo=r(h$e," (Longformer model)"),h$e.forEach(t),COo=i(J),UF=n(J,"LI",{});var u$e=s(UF);Che=n(u$e,"STRONG",{});var rut=s(Che);wOo=r(rut,"megatron-bert"),rut.forEach(t),AOo=r(u$e," \u2014 "),_V=n(u$e,"A",{href:!0});var tut=s(_V);yOo=r(tut,"MegatronBertForTokenClassification"),tut.forEach(t),LOo=r(u$e," (MegatronBert model)"),u$e.forEach(t),xOo=i(J),JF=n(J,"LI",{});var p$e=s(JF);whe=n(p$e,"STRONG",{});var aut=s(whe);$Oo=r(aut,"mobilebert"),aut.forEach(t),kOo=r(p$e," \u2014 "),bV=n(p$e,"A",{href:!0});var nut=s(bV);SOo=r(nut,"MobileBertForTokenClassification"),nut.forEach(t),ROo=r(p$e," (MobileBERT model)"),p$e.forEach(t),POo=i(J),YF=n(J,"LI",{});var _$e=s(YF);Ahe=n(_$e,"STRONG",{});var sut=s(Ahe);BOo=r(sut,"mpnet"),sut.forEach(t),IOo=r(_$e," \u2014 "),vV=n(_$e,"A",{href:!0});var lut=s(vV);NOo=r(lut,"MPNetForTokenClassification"),lut.forEach(t),qOo=r(_$e," (MPNet model)"),_$e.forEach(t),jOo=i(J),KF=n(J,"LI",{});var b$e=s(KF);yhe=n(b$e,"STRONG",{});var iut=s(yhe);DOo=r(iut,"nystromformer"),iut.forEach(t),GOo=r(b$e," \u2014 "),FV=n(b$e,"A",{href:!0});var dut=s(FV);OOo=r(dut,"NystromformerForTokenClassification"),dut.forEach(t),VOo=r(b$e," (Nystromformer model)"),b$e.forEach(t),XOo=i(J),ZF=n(J,"LI",{});var v$e=s(ZF);Lhe=n(v$e,"STRONG",{});var cut=s(Lhe);zOo=r(cut,"qdqbert"),cut.forEach(t),WOo=r(v$e," \u2014 "),TV=n(v$e,"A",{href:!0});var mut=s(TV);QOo=r(mut,"QDQBertForTokenClassification"),mut.forEach(t),HOo=r(v$e," (QDQBert model)"),v$e.forEach(t),UOo=i(J),e1=n(J,"LI",{});var F$e=s(e1);xhe=n(F$e,"STRONG",{});var fut=s(xhe);JOo=r(fut,"rembert"),fut.forEach(t),YOo=r(F$e," \u2014 "),MV=n(F$e,"A",{href:!0});var gut=s(MV);KOo=r(gut,"RemBertForTokenClassification"),gut.forEach(t),ZOo=r(F$e," (RemBERT model)"),F$e.forEach(t),eVo=i(J),o1=n(J,"LI",{});var T$e=s(o1);$he=n(T$e,"STRONG",{});var hut=s($he);oVo=r(hut,"roberta"),hut.forEach(t),rVo=r(T$e," \u2014 "),EV=n(T$e,"A",{href:!0});var uut=s(EV);tVo=r(uut,"RobertaForTokenClassification"),uut.forEach(t),aVo=r(T$e," (RoBERTa model)"),T$e.forEach(t),nVo=i(J),r1=n(J,"LI",{});var M$e=s(r1);khe=n(M$e,"STRONG",{});var put=s(khe);sVo=r(put,"roformer"),put.forEach(t),lVo=r(M$e," \u2014 "),CV=n(M$e,"A",{href:!0});var _ut=s(CV);iVo=r(_ut,"RoFormerForTokenClassification"),_ut.forEach(t),dVo=r(M$e," (RoFormer model)"),M$e.forEach(t),cVo=i(J),t1=n(J,"LI",{});var E$e=s(t1);She=n(E$e,"STRONG",{});var but=s(She);mVo=r(but,"squeezebert"),but.forEach(t),fVo=r(E$e," \u2014 "),wV=n(E$e,"A",{href:!0});var vut=s(wV);gVo=r(vut,"SqueezeBertForTokenClassification"),vut.forEach(t),hVo=r(E$e," (SqueezeBERT model)"),E$e.forEach(t),uVo=i(J),a1=n(J,"LI",{});var C$e=s(a1);Rhe=n(C$e,"STRONG",{});var Fut=s(Rhe);pVo=r(Fut,"xlm"),Fut.forEach(t),_Vo=r(C$e," \u2014 "),AV=n(C$e,"A",{href:!0});var Tut=s(AV);bVo=r(Tut,"XLMForTokenClassification"),Tut.forEach(t),vVo=r(C$e," (XLM model)"),C$e.forEach(t),FVo=i(J),n1=n(J,"LI",{});var w$e=s(n1);Phe=n(w$e,"STRONG",{});var Mut=s(Phe);TVo=r(Mut,"xlm-roberta"),Mut.forEach(t),MVo=r(w$e," \u2014 "),yV=n(w$e,"A",{href:!0});var Eut=s(yV);EVo=r(Eut,"XLMRobertaForTokenClassification"),Eut.forEach(t),CVo=r(w$e," (XLM-RoBERTa model)"),w$e.forEach(t),wVo=i(J),s1=n(J,"LI",{});var A$e=s(s1);Bhe=n(A$e,"STRONG",{});var Cut=s(Bhe);AVo=r(Cut,"xlm-roberta-xl"),Cut.forEach(t),yVo=r(A$e," \u2014 "),LV=n(A$e,"A",{href:!0});var wut=s(LV);LVo=r(wut,"XLMRobertaXLForTokenClassification"),wut.forEach(t),xVo=r(A$e," (XLM-RoBERTa-XL model)"),A$e.forEach(t),$Vo=i(J),l1=n(J,"LI",{});var y$e=s(l1);Ihe=n(y$e,"STRONG",{});var Aut=s(Ihe);kVo=r(Aut,"xlnet"),Aut.forEach(t),SVo=r(y$e," \u2014 "),xV=n(y$e,"A",{href:!0});var yut=s(xV);RVo=r(yut,"XLNetForTokenClassification"),yut.forEach(t),PVo=r(y$e," (XLNet model)"),y$e.forEach(t),BVo=i(J),i1=n(J,"LI",{});var L$e=s(i1);Nhe=n(L$e,"STRONG",{});var Lut=s(Nhe);IVo=r(Lut,"yoso"),Lut.forEach(t),NVo=r(L$e," \u2014 "),$V=n(L$e,"A",{href:!0});var xut=s($V);qVo=r(xut,"YosoForTokenClassification"),xut.forEach(t),jVo=r(L$e," (YOSO model)"),L$e.forEach(t),J.forEach(t),DVo=i(da),d1=n(da,"P",{});var x$e=s(d1);GVo=r(x$e,"The model is set in evaluation mode by default using "),qhe=n(x$e,"CODE",{});var $ut=s(qhe);OVo=r($ut,"model.eval()"),$ut.forEach(t),VVo=r(x$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jhe=n(x$e,"CODE",{});var kut=s(jhe);XVo=r(kut,"model.train()"),kut.forEach(t),x$e.forEach(t),zVo=i(da),T(c1.$$.fragment,da),da.forEach(t),Js.forEach(t),Uqe=i(m),Ki=n(m,"H2",{class:!0});var ZDe=s(Ki);m1=n(ZDe,"A",{id:!0,class:!0,href:!0});var Sut=s(m1);Dhe=n(Sut,"SPAN",{});var Rut=s(Dhe);T(UL.$$.fragment,Rut),Rut.forEach(t),Sut.forEach(t),WVo=i(ZDe),Ghe=n(ZDe,"SPAN",{});var Put=s(Ghe);QVo=r(Put,"AutoModelForQuestionAnswering"),Put.forEach(t),ZDe.forEach(t),Jqe=i(m),No=n(m,"DIV",{class:!0});var Ys=s(No);T(JL.$$.fragment,Ys),HVo=i(Ys),Zi=n(Ys,"P",{});var VZ=s(Zi);UVo=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),kV=n(VZ,"A",{href:!0});var But=s(kV);JVo=r(But,"from_pretrained()"),But.forEach(t),YVo=r(VZ," class method or the "),SV=n(VZ,"A",{href:!0});var Iut=s(SV);KVo=r(Iut,"from_config()"),Iut.forEach(t),ZVo=r(VZ,` class
method.`),VZ.forEach(t),eXo=i(Ys),YL=n(Ys,"P",{});var eGe=s(YL);oXo=r(eGe,"This class cannot be instantiated directly using "),Ohe=n(eGe,"CODE",{});var Nut=s(Ohe);rXo=r(Nut,"__init__()"),Nut.forEach(t),tXo=r(eGe," (throws an error)."),eGe.forEach(t),aXo=i(Ys),ft=n(Ys,"DIV",{class:!0});var eA=s(ft);T(KL.$$.fragment,eA),nXo=i(eA),Vhe=n(eA,"P",{});var qut=s(Vhe);sXo=r(qut,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),qut.forEach(t),lXo=i(eA),ed=n(eA,"P",{});var XZ=s(ed);iXo=r(XZ,`Note:
Loading a model from its configuration file does `),Xhe=n(XZ,"STRONG",{});var jut=s(Xhe);dXo=r(jut,"not"),jut.forEach(t),cXo=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=n(XZ,"A",{href:!0});var Dut=s(RV);mXo=r(Dut,"from_pretrained()"),Dut.forEach(t),fXo=r(XZ," to load the model weights."),XZ.forEach(t),gXo=i(eA),T(f1.$$.fragment,eA),eA.forEach(t),hXo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(ZL.$$.fragment,ca),uXo=i(ca),zhe=n(ca,"P",{});var Gut=s(zhe);pXo=r(Gut,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Gut.forEach(t),_Xo=i(ca),Na=n(ca,"P",{});var oA=s(Na);bXo=r(oA,"The model class to instantiate is selected based on the "),Whe=n(oA,"CODE",{});var Out=s(Whe);vXo=r(Out,"model_type"),Out.forEach(t),FXo=r(oA,` property of the config object (either
passed as an argument or loaded from `),Qhe=n(oA,"CODE",{});var Vut=s(Qhe);TXo=r(Vut,"pretrained_model_name_or_path"),Vut.forEach(t),MXo=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hhe=n(oA,"CODE",{});var Xut=s(Hhe);EXo=r(Xut,"pretrained_model_name_or_path"),Xut.forEach(t),CXo=r(oA,":"),oA.forEach(t),wXo=i(ca),V=n(ca,"UL",{});var X=s(V);g1=n(X,"LI",{});var $$e=s(g1);Uhe=n($$e,"STRONG",{});var zut=s(Uhe);AXo=r(zut,"albert"),zut.forEach(t),yXo=r($$e," \u2014 "),PV=n($$e,"A",{href:!0});var Wut=s(PV);LXo=r(Wut,"AlbertForQuestionAnswering"),Wut.forEach(t),xXo=r($$e," (ALBERT model)"),$$e.forEach(t),$Xo=i(X),h1=n(X,"LI",{});var k$e=s(h1);Jhe=n(k$e,"STRONG",{});var Qut=s(Jhe);kXo=r(Qut,"bart"),Qut.forEach(t),SXo=r(k$e," \u2014 "),BV=n(k$e,"A",{href:!0});var Hut=s(BV);RXo=r(Hut,"BartForQuestionAnswering"),Hut.forEach(t),PXo=r(k$e," (BART model)"),k$e.forEach(t),BXo=i(X),u1=n(X,"LI",{});var S$e=s(u1);Yhe=n(S$e,"STRONG",{});var Uut=s(Yhe);IXo=r(Uut,"bert"),Uut.forEach(t),NXo=r(S$e," \u2014 "),IV=n(S$e,"A",{href:!0});var Jut=s(IV);qXo=r(Jut,"BertForQuestionAnswering"),Jut.forEach(t),jXo=r(S$e," (BERT model)"),S$e.forEach(t),DXo=i(X),p1=n(X,"LI",{});var R$e=s(p1);Khe=n(R$e,"STRONG",{});var Yut=s(Khe);GXo=r(Yut,"big_bird"),Yut.forEach(t),OXo=r(R$e," \u2014 "),NV=n(R$e,"A",{href:!0});var Kut=s(NV);VXo=r(Kut,"BigBirdForQuestionAnswering"),Kut.forEach(t),XXo=r(R$e," (BigBird model)"),R$e.forEach(t),zXo=i(X),_1=n(X,"LI",{});var P$e=s(_1);Zhe=n(P$e,"STRONG",{});var Zut=s(Zhe);WXo=r(Zut,"bigbird_pegasus"),Zut.forEach(t),QXo=r(P$e," \u2014 "),qV=n(P$e,"A",{href:!0});var ept=s(qV);HXo=r(ept,"BigBirdPegasusForQuestionAnswering"),ept.forEach(t),UXo=r(P$e," (BigBirdPegasus model)"),P$e.forEach(t),JXo=i(X),b1=n(X,"LI",{});var B$e=s(b1);eue=n(B$e,"STRONG",{});var opt=s(eue);YXo=r(opt,"camembert"),opt.forEach(t),KXo=r(B$e," \u2014 "),jV=n(B$e,"A",{href:!0});var rpt=s(jV);ZXo=r(rpt,"CamembertForQuestionAnswering"),rpt.forEach(t),ezo=r(B$e," (CamemBERT model)"),B$e.forEach(t),ozo=i(X),v1=n(X,"LI",{});var I$e=s(v1);oue=n(I$e,"STRONG",{});var tpt=s(oue);rzo=r(tpt,"canine"),tpt.forEach(t),tzo=r(I$e," \u2014 "),DV=n(I$e,"A",{href:!0});var apt=s(DV);azo=r(apt,"CanineForQuestionAnswering"),apt.forEach(t),nzo=r(I$e," (Canine model)"),I$e.forEach(t),szo=i(X),F1=n(X,"LI",{});var N$e=s(F1);rue=n(N$e,"STRONG",{});var npt=s(rue);lzo=r(npt,"convbert"),npt.forEach(t),izo=r(N$e," \u2014 "),GV=n(N$e,"A",{href:!0});var spt=s(GV);dzo=r(spt,"ConvBertForQuestionAnswering"),spt.forEach(t),czo=r(N$e," (ConvBERT model)"),N$e.forEach(t),mzo=i(X),T1=n(X,"LI",{});var q$e=s(T1);tue=n(q$e,"STRONG",{});var lpt=s(tue);fzo=r(lpt,"data2vec-text"),lpt.forEach(t),gzo=r(q$e," \u2014 "),OV=n(q$e,"A",{href:!0});var ipt=s(OV);hzo=r(ipt,"Data2VecTextForQuestionAnswering"),ipt.forEach(t),uzo=r(q$e," (Data2VecText model)"),q$e.forEach(t),pzo=i(X),M1=n(X,"LI",{});var j$e=s(M1);aue=n(j$e,"STRONG",{});var dpt=s(aue);_zo=r(dpt,"deberta"),dpt.forEach(t),bzo=r(j$e," \u2014 "),VV=n(j$e,"A",{href:!0});var cpt=s(VV);vzo=r(cpt,"DebertaForQuestionAnswering"),cpt.forEach(t),Fzo=r(j$e," (DeBERTa model)"),j$e.forEach(t),Tzo=i(X),E1=n(X,"LI",{});var D$e=s(E1);nue=n(D$e,"STRONG",{});var mpt=s(nue);Mzo=r(mpt,"deberta-v2"),mpt.forEach(t),Ezo=r(D$e," \u2014 "),XV=n(D$e,"A",{href:!0});var fpt=s(XV);Czo=r(fpt,"DebertaV2ForQuestionAnswering"),fpt.forEach(t),wzo=r(D$e," (DeBERTa-v2 model)"),D$e.forEach(t),Azo=i(X),C1=n(X,"LI",{});var G$e=s(C1);sue=n(G$e,"STRONG",{});var gpt=s(sue);yzo=r(gpt,"distilbert"),gpt.forEach(t),Lzo=r(G$e," \u2014 "),zV=n(G$e,"A",{href:!0});var hpt=s(zV);xzo=r(hpt,"DistilBertForQuestionAnswering"),hpt.forEach(t),$zo=r(G$e," (DistilBERT model)"),G$e.forEach(t),kzo=i(X),w1=n(X,"LI",{});var O$e=s(w1);lue=n(O$e,"STRONG",{});var upt=s(lue);Szo=r(upt,"electra"),upt.forEach(t),Rzo=r(O$e," \u2014 "),WV=n(O$e,"A",{href:!0});var ppt=s(WV);Pzo=r(ppt,"ElectraForQuestionAnswering"),ppt.forEach(t),Bzo=r(O$e," (ELECTRA model)"),O$e.forEach(t),Izo=i(X),A1=n(X,"LI",{});var V$e=s(A1);iue=n(V$e,"STRONG",{});var _pt=s(iue);Nzo=r(_pt,"flaubert"),_pt.forEach(t),qzo=r(V$e," \u2014 "),QV=n(V$e,"A",{href:!0});var bpt=s(QV);jzo=r(bpt,"FlaubertForQuestionAnsweringSimple"),bpt.forEach(t),Dzo=r(V$e," (FlauBERT model)"),V$e.forEach(t),Gzo=i(X),y1=n(X,"LI",{});var X$e=s(y1);due=n(X$e,"STRONG",{});var vpt=s(due);Ozo=r(vpt,"fnet"),vpt.forEach(t),Vzo=r(X$e," \u2014 "),HV=n(X$e,"A",{href:!0});var Fpt=s(HV);Xzo=r(Fpt,"FNetForQuestionAnswering"),Fpt.forEach(t),zzo=r(X$e," (FNet model)"),X$e.forEach(t),Wzo=i(X),L1=n(X,"LI",{});var z$e=s(L1);cue=n(z$e,"STRONG",{});var Tpt=s(cue);Qzo=r(Tpt,"funnel"),Tpt.forEach(t),Hzo=r(z$e," \u2014 "),UV=n(z$e,"A",{href:!0});var Mpt=s(UV);Uzo=r(Mpt,"FunnelForQuestionAnswering"),Mpt.forEach(t),Jzo=r(z$e," (Funnel Transformer model)"),z$e.forEach(t),Yzo=i(X),x1=n(X,"LI",{});var W$e=s(x1);mue=n(W$e,"STRONG",{});var Ept=s(mue);Kzo=r(Ept,"gptj"),Ept.forEach(t),Zzo=r(W$e," \u2014 "),JV=n(W$e,"A",{href:!0});var Cpt=s(JV);eWo=r(Cpt,"GPTJForQuestionAnswering"),Cpt.forEach(t),oWo=r(W$e," (GPT-J model)"),W$e.forEach(t),rWo=i(X),$1=n(X,"LI",{});var Q$e=s($1);fue=n(Q$e,"STRONG",{});var wpt=s(fue);tWo=r(wpt,"ibert"),wpt.forEach(t),aWo=r(Q$e," \u2014 "),YV=n(Q$e,"A",{href:!0});var Apt=s(YV);nWo=r(Apt,"IBertForQuestionAnswering"),Apt.forEach(t),sWo=r(Q$e," (I-BERT model)"),Q$e.forEach(t),lWo=i(X),k1=n(X,"LI",{});var H$e=s(k1);gue=n(H$e,"STRONG",{});var ypt=s(gue);iWo=r(ypt,"layoutlmv2"),ypt.forEach(t),dWo=r(H$e," \u2014 "),KV=n(H$e,"A",{href:!0});var Lpt=s(KV);cWo=r(Lpt,"LayoutLMv2ForQuestionAnswering"),Lpt.forEach(t),mWo=r(H$e," (LayoutLMv2 model)"),H$e.forEach(t),fWo=i(X),S1=n(X,"LI",{});var U$e=s(S1);hue=n(U$e,"STRONG",{});var xpt=s(hue);gWo=r(xpt,"layoutlmv3"),xpt.forEach(t),hWo=r(U$e," \u2014 "),ZV=n(U$e,"A",{href:!0});var $pt=s(ZV);uWo=r($pt,"LayoutLMv3ForQuestionAnswering"),$pt.forEach(t),pWo=r(U$e," (LayoutLMv3 model)"),U$e.forEach(t),_Wo=i(X),R1=n(X,"LI",{});var J$e=s(R1);uue=n(J$e,"STRONG",{});var kpt=s(uue);bWo=r(kpt,"led"),kpt.forEach(t),vWo=r(J$e," \u2014 "),eX=n(J$e,"A",{href:!0});var Spt=s(eX);FWo=r(Spt,"LEDForQuestionAnswering"),Spt.forEach(t),TWo=r(J$e," (LED model)"),J$e.forEach(t),MWo=i(X),P1=n(X,"LI",{});var Y$e=s(P1);pue=n(Y$e,"STRONG",{});var Rpt=s(pue);EWo=r(Rpt,"longformer"),Rpt.forEach(t),CWo=r(Y$e," \u2014 "),oX=n(Y$e,"A",{href:!0});var Ppt=s(oX);wWo=r(Ppt,"LongformerForQuestionAnswering"),Ppt.forEach(t),AWo=r(Y$e," (Longformer model)"),Y$e.forEach(t),yWo=i(X),B1=n(X,"LI",{});var K$e=s(B1);_ue=n(K$e,"STRONG",{});var Bpt=s(_ue);LWo=r(Bpt,"lxmert"),Bpt.forEach(t),xWo=r(K$e," \u2014 "),rX=n(K$e,"A",{href:!0});var Ipt=s(rX);$Wo=r(Ipt,"LxmertForQuestionAnswering"),Ipt.forEach(t),kWo=r(K$e," (LXMERT model)"),K$e.forEach(t),SWo=i(X),I1=n(X,"LI",{});var Z$e=s(I1);bue=n(Z$e,"STRONG",{});var Npt=s(bue);RWo=r(Npt,"mbart"),Npt.forEach(t),PWo=r(Z$e," \u2014 "),tX=n(Z$e,"A",{href:!0});var qpt=s(tX);BWo=r(qpt,"MBartForQuestionAnswering"),qpt.forEach(t),IWo=r(Z$e," (mBART model)"),Z$e.forEach(t),NWo=i(X),N1=n(X,"LI",{});var eke=s(N1);vue=n(eke,"STRONG",{});var jpt=s(vue);qWo=r(jpt,"megatron-bert"),jpt.forEach(t),jWo=r(eke," \u2014 "),aX=n(eke,"A",{href:!0});var Dpt=s(aX);DWo=r(Dpt,"MegatronBertForQuestionAnswering"),Dpt.forEach(t),GWo=r(eke," (MegatronBert model)"),eke.forEach(t),OWo=i(X),q1=n(X,"LI",{});var oke=s(q1);Fue=n(oke,"STRONG",{});var Gpt=s(Fue);VWo=r(Gpt,"mobilebert"),Gpt.forEach(t),XWo=r(oke," \u2014 "),nX=n(oke,"A",{href:!0});var Opt=s(nX);zWo=r(Opt,"MobileBertForQuestionAnswering"),Opt.forEach(t),WWo=r(oke," (MobileBERT model)"),oke.forEach(t),QWo=i(X),j1=n(X,"LI",{});var rke=s(j1);Tue=n(rke,"STRONG",{});var Vpt=s(Tue);HWo=r(Vpt,"mpnet"),Vpt.forEach(t),UWo=r(rke," \u2014 "),sX=n(rke,"A",{href:!0});var Xpt=s(sX);JWo=r(Xpt,"MPNetForQuestionAnswering"),Xpt.forEach(t),YWo=r(rke," (MPNet model)"),rke.forEach(t),KWo=i(X),D1=n(X,"LI",{});var tke=s(D1);Mue=n(tke,"STRONG",{});var zpt=s(Mue);ZWo=r(zpt,"nystromformer"),zpt.forEach(t),eQo=r(tke," \u2014 "),lX=n(tke,"A",{href:!0});var Wpt=s(lX);oQo=r(Wpt,"NystromformerForQuestionAnswering"),Wpt.forEach(t),rQo=r(tke," (Nystromformer model)"),tke.forEach(t),tQo=i(X),G1=n(X,"LI",{});var ake=s(G1);Eue=n(ake,"STRONG",{});var Qpt=s(Eue);aQo=r(Qpt,"qdqbert"),Qpt.forEach(t),nQo=r(ake," \u2014 "),iX=n(ake,"A",{href:!0});var Hpt=s(iX);sQo=r(Hpt,"QDQBertForQuestionAnswering"),Hpt.forEach(t),lQo=r(ake," (QDQBert model)"),ake.forEach(t),iQo=i(X),O1=n(X,"LI",{});var nke=s(O1);Cue=n(nke,"STRONG",{});var Upt=s(Cue);dQo=r(Upt,"reformer"),Upt.forEach(t),cQo=r(nke," \u2014 "),dX=n(nke,"A",{href:!0});var Jpt=s(dX);mQo=r(Jpt,"ReformerForQuestionAnswering"),Jpt.forEach(t),fQo=r(nke," (Reformer model)"),nke.forEach(t),gQo=i(X),V1=n(X,"LI",{});var ske=s(V1);wue=n(ske,"STRONG",{});var Ypt=s(wue);hQo=r(Ypt,"rembert"),Ypt.forEach(t),uQo=r(ske," \u2014 "),cX=n(ske,"A",{href:!0});var Kpt=s(cX);pQo=r(Kpt,"RemBertForQuestionAnswering"),Kpt.forEach(t),_Qo=r(ske," (RemBERT model)"),ske.forEach(t),bQo=i(X),X1=n(X,"LI",{});var lke=s(X1);Aue=n(lke,"STRONG",{});var Zpt=s(Aue);vQo=r(Zpt,"roberta"),Zpt.forEach(t),FQo=r(lke," \u2014 "),mX=n(lke,"A",{href:!0});var e_t=s(mX);TQo=r(e_t,"RobertaForQuestionAnswering"),e_t.forEach(t),MQo=r(lke," (RoBERTa model)"),lke.forEach(t),EQo=i(X),z1=n(X,"LI",{});var ike=s(z1);yue=n(ike,"STRONG",{});var o_t=s(yue);CQo=r(o_t,"roformer"),o_t.forEach(t),wQo=r(ike," \u2014 "),fX=n(ike,"A",{href:!0});var r_t=s(fX);AQo=r(r_t,"RoFormerForQuestionAnswering"),r_t.forEach(t),yQo=r(ike," (RoFormer model)"),ike.forEach(t),LQo=i(X),W1=n(X,"LI",{});var dke=s(W1);Lue=n(dke,"STRONG",{});var t_t=s(Lue);xQo=r(t_t,"splinter"),t_t.forEach(t),$Qo=r(dke," \u2014 "),gX=n(dke,"A",{href:!0});var a_t=s(gX);kQo=r(a_t,"SplinterForQuestionAnswering"),a_t.forEach(t),SQo=r(dke," (Splinter model)"),dke.forEach(t),RQo=i(X),Q1=n(X,"LI",{});var cke=s(Q1);xue=n(cke,"STRONG",{});var n_t=s(xue);PQo=r(n_t,"squeezebert"),n_t.forEach(t),BQo=r(cke," \u2014 "),hX=n(cke,"A",{href:!0});var s_t=s(hX);IQo=r(s_t,"SqueezeBertForQuestionAnswering"),s_t.forEach(t),NQo=r(cke," (SqueezeBERT model)"),cke.forEach(t),qQo=i(X),H1=n(X,"LI",{});var mke=s(H1);$ue=n(mke,"STRONG",{});var l_t=s($ue);jQo=r(l_t,"xlm"),l_t.forEach(t),DQo=r(mke," \u2014 "),uX=n(mke,"A",{href:!0});var i_t=s(uX);GQo=r(i_t,"XLMForQuestionAnsweringSimple"),i_t.forEach(t),OQo=r(mke," (XLM model)"),mke.forEach(t),VQo=i(X),U1=n(X,"LI",{});var fke=s(U1);kue=n(fke,"STRONG",{});var d_t=s(kue);XQo=r(d_t,"xlm-roberta"),d_t.forEach(t),zQo=r(fke," \u2014 "),pX=n(fke,"A",{href:!0});var c_t=s(pX);WQo=r(c_t,"XLMRobertaForQuestionAnswering"),c_t.forEach(t),QQo=r(fke," (XLM-RoBERTa model)"),fke.forEach(t),HQo=i(X),J1=n(X,"LI",{});var gke=s(J1);Sue=n(gke,"STRONG",{});var m_t=s(Sue);UQo=r(m_t,"xlm-roberta-xl"),m_t.forEach(t),JQo=r(gke," \u2014 "),_X=n(gke,"A",{href:!0});var f_t=s(_X);YQo=r(f_t,"XLMRobertaXLForQuestionAnswering"),f_t.forEach(t),KQo=r(gke," (XLM-RoBERTa-XL model)"),gke.forEach(t),ZQo=i(X),Y1=n(X,"LI",{});var hke=s(Y1);Rue=n(hke,"STRONG",{});var g_t=s(Rue);eHo=r(g_t,"xlnet"),g_t.forEach(t),oHo=r(hke," \u2014 "),bX=n(hke,"A",{href:!0});var h_t=s(bX);rHo=r(h_t,"XLNetForQuestionAnsweringSimple"),h_t.forEach(t),tHo=r(hke," (XLNet model)"),hke.forEach(t),aHo=i(X),K1=n(X,"LI",{});var uke=s(K1);Pue=n(uke,"STRONG",{});var u_t=s(Pue);nHo=r(u_t,"yoso"),u_t.forEach(t),sHo=r(uke," \u2014 "),vX=n(uke,"A",{href:!0});var p_t=s(vX);lHo=r(p_t,"YosoForQuestionAnswering"),p_t.forEach(t),iHo=r(uke," (YOSO model)"),uke.forEach(t),X.forEach(t),dHo=i(ca),Z1=n(ca,"P",{});var pke=s(Z1);cHo=r(pke,"The model is set in evaluation mode by default using "),Bue=n(pke,"CODE",{});var __t=s(Bue);mHo=r(__t,"model.eval()"),__t.forEach(t),fHo=r(pke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Iue=n(pke,"CODE",{});var b_t=s(Iue);gHo=r(b_t,"model.train()"),b_t.forEach(t),pke.forEach(t),hHo=i(ca),T(eT.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),Yqe=i(m),od=n(m,"H2",{class:!0});var oGe=s(od);oT=n(oGe,"A",{id:!0,class:!0,href:!0});var v_t=s(oT);Nue=n(v_t,"SPAN",{});var F_t=s(Nue);T(e8.$$.fragment,F_t),F_t.forEach(t),v_t.forEach(t),uHo=i(oGe),que=n(oGe,"SPAN",{});var T_t=s(que);pHo=r(T_t,"AutoModelForTableQuestionAnswering"),T_t.forEach(t),oGe.forEach(t),Kqe=i(m),qo=n(m,"DIV",{class:!0});var Ks=s(qo);T(o8.$$.fragment,Ks),_Ho=i(Ks),rd=n(Ks,"P",{});var zZ=s(rd);bHo=r(zZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),FX=n(zZ,"A",{href:!0});var M_t=s(FX);vHo=r(M_t,"from_pretrained()"),M_t.forEach(t),FHo=r(zZ," class method or the "),TX=n(zZ,"A",{href:!0});var E_t=s(TX);THo=r(E_t,"from_config()"),E_t.forEach(t),MHo=r(zZ,` class
method.`),zZ.forEach(t),EHo=i(Ks),r8=n(Ks,"P",{});var rGe=s(r8);CHo=r(rGe,"This class cannot be instantiated directly using "),jue=n(rGe,"CODE",{});var C_t=s(jue);wHo=r(C_t,"__init__()"),C_t.forEach(t),AHo=r(rGe," (throws an error)."),rGe.forEach(t),yHo=i(Ks),gt=n(Ks,"DIV",{class:!0});var rA=s(gt);T(t8.$$.fragment,rA),LHo=i(rA),Due=n(rA,"P",{});var w_t=s(Due);xHo=r(w_t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),w_t.forEach(t),$Ho=i(rA),td=n(rA,"P",{});var WZ=s(td);kHo=r(WZ,`Note:
Loading a model from its configuration file does `),Gue=n(WZ,"STRONG",{});var A_t=s(Gue);SHo=r(A_t,"not"),A_t.forEach(t),RHo=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=n(WZ,"A",{href:!0});var y_t=s(MX);PHo=r(y_t,"from_pretrained()"),y_t.forEach(t),BHo=r(WZ," to load the model weights."),WZ.forEach(t),IHo=i(rA),T(rT.$$.fragment,rA),rA.forEach(t),NHo=i(Ks),so=n(Ks,"DIV",{class:!0});var ma=s(so);T(a8.$$.fragment,ma),qHo=i(ma),Oue=n(ma,"P",{});var L_t=s(Oue);jHo=r(L_t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),L_t.forEach(t),DHo=i(ma),qa=n(ma,"P",{});var tA=s(qa);GHo=r(tA,"The model class to instantiate is selected based on the "),Vue=n(tA,"CODE",{});var x_t=s(Vue);OHo=r(x_t,"model_type"),x_t.forEach(t),VHo=r(tA,` property of the config object (either
passed as an argument or loaded from `),Xue=n(tA,"CODE",{});var $_t=s(Xue);XHo=r($_t,"pretrained_model_name_or_path"),$_t.forEach(t),zHo=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zue=n(tA,"CODE",{});var k_t=s(zue);WHo=r(k_t,"pretrained_model_name_or_path"),k_t.forEach(t),QHo=r(tA,":"),tA.forEach(t),HHo=i(ma),Wue=n(ma,"UL",{});var S_t=s(Wue);tT=n(S_t,"LI",{});var _ke=s(tT);Que=n(_ke,"STRONG",{});var R_t=s(Que);UHo=r(R_t,"tapas"),R_t.forEach(t),JHo=r(_ke," \u2014 "),EX=n(_ke,"A",{href:!0});var P_t=s(EX);YHo=r(P_t,"TapasForQuestionAnswering"),P_t.forEach(t),KHo=r(_ke," (TAPAS model)"),_ke.forEach(t),S_t.forEach(t),ZHo=i(ma),aT=n(ma,"P",{});var bke=s(aT);eUo=r(bke,"The model is set in evaluation mode by default using "),Hue=n(bke,"CODE",{});var B_t=s(Hue);oUo=r(B_t,"model.eval()"),B_t.forEach(t),rUo=r(bke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uue=n(bke,"CODE",{});var I_t=s(Uue);tUo=r(I_t,"model.train()"),I_t.forEach(t),bke.forEach(t),aUo=i(ma),T(nT.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),Zqe=i(m),ad=n(m,"H2",{class:!0});var tGe=s(ad);sT=n(tGe,"A",{id:!0,class:!0,href:!0});var N_t=s(sT);Jue=n(N_t,"SPAN",{});var q_t=s(Jue);T(n8.$$.fragment,q_t),q_t.forEach(t),N_t.forEach(t),nUo=i(tGe),Yue=n(tGe,"SPAN",{});var j_t=s(Yue);sUo=r(j_t,"AutoModelForImageClassification"),j_t.forEach(t),tGe.forEach(t),eje=i(m),jo=n(m,"DIV",{class:!0});var Zs=s(jo);T(s8.$$.fragment,Zs),lUo=i(Zs),nd=n(Zs,"P",{});var QZ=s(nd);iUo=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),CX=n(QZ,"A",{href:!0});var D_t=s(CX);dUo=r(D_t,"from_pretrained()"),D_t.forEach(t),cUo=r(QZ," class method or the "),wX=n(QZ,"A",{href:!0});var G_t=s(wX);mUo=r(G_t,"from_config()"),G_t.forEach(t),fUo=r(QZ,` class
method.`),QZ.forEach(t),gUo=i(Zs),l8=n(Zs,"P",{});var aGe=s(l8);hUo=r(aGe,"This class cannot be instantiated directly using "),Kue=n(aGe,"CODE",{});var O_t=s(Kue);uUo=r(O_t,"__init__()"),O_t.forEach(t),pUo=r(aGe," (throws an error)."),aGe.forEach(t),_Uo=i(Zs),ht=n(Zs,"DIV",{class:!0});var aA=s(ht);T(i8.$$.fragment,aA),bUo=i(aA),Zue=n(aA,"P",{});var V_t=s(Zue);vUo=r(V_t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),V_t.forEach(t),FUo=i(aA),sd=n(aA,"P",{});var HZ=s(sd);TUo=r(HZ,`Note:
Loading a model from its configuration file does `),epe=n(HZ,"STRONG",{});var X_t=s(epe);MUo=r(X_t,"not"),X_t.forEach(t),EUo=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AX=n(HZ,"A",{href:!0});var z_t=s(AX);CUo=r(z_t,"from_pretrained()"),z_t.forEach(t),wUo=r(HZ," to load the model weights."),HZ.forEach(t),AUo=i(aA),T(lT.$$.fragment,aA),aA.forEach(t),yUo=i(Zs),lo=n(Zs,"DIV",{class:!0});var fa=s(lo);T(d8.$$.fragment,fa),LUo=i(fa),ope=n(fa,"P",{});var W_t=s(ope);xUo=r(W_t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),W_t.forEach(t),$Uo=i(fa),ja=n(fa,"P",{});var nA=s(ja);kUo=r(nA,"The model class to instantiate is selected based on the "),rpe=n(nA,"CODE",{});var Q_t=s(rpe);SUo=r(Q_t,"model_type"),Q_t.forEach(t),RUo=r(nA,` property of the config object (either
passed as an argument or loaded from `),tpe=n(nA,"CODE",{});var H_t=s(tpe);PUo=r(H_t,"pretrained_model_name_or_path"),H_t.forEach(t),BUo=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ape=n(nA,"CODE",{});var U_t=s(ape);IUo=r(U_t,"pretrained_model_name_or_path"),U_t.forEach(t),NUo=r(nA,":"),nA.forEach(t),qUo=i(fa),Fe=n(fa,"UL",{});var Me=s(Fe);iT=n(Me,"LI",{});var vke=s(iT);npe=n(vke,"STRONG",{});var J_t=s(npe);jUo=r(J_t,"beit"),J_t.forEach(t),DUo=r(vke," \u2014 "),yX=n(vke,"A",{href:!0});var Y_t=s(yX);GUo=r(Y_t,"BeitForImageClassification"),Y_t.forEach(t),OUo=r(vke," (BEiT model)"),vke.forEach(t),VUo=i(Me),dT=n(Me,"LI",{});var Fke=s(dT);spe=n(Fke,"STRONG",{});var K_t=s(spe);XUo=r(K_t,"convnext"),K_t.forEach(t),zUo=r(Fke," \u2014 "),LX=n(Fke,"A",{href:!0});var Z_t=s(LX);WUo=r(Z_t,"ConvNextForImageClassification"),Z_t.forEach(t),QUo=r(Fke," (ConvNext model)"),Fke.forEach(t),HUo=i(Me),cT=n(Me,"LI",{});var Tke=s(cT);lpe=n(Tke,"STRONG",{});var ebt=s(lpe);UUo=r(ebt,"cvt"),ebt.forEach(t),JUo=r(Tke," \u2014 "),xX=n(Tke,"A",{href:!0});var obt=s(xX);YUo=r(obt,"CvtForImageClassification"),obt.forEach(t),KUo=r(Tke," (CvT model)"),Tke.forEach(t),ZUo=i(Me),mT=n(Me,"LI",{});var Mke=s(mT);ipe=n(Mke,"STRONG",{});var rbt=s(ipe);eJo=r(rbt,"data2vec-vision"),rbt.forEach(t),oJo=r(Mke," \u2014 "),$X=n(Mke,"A",{href:!0});var tbt=s($X);rJo=r(tbt,"Data2VecVisionForImageClassification"),tbt.forEach(t),tJo=r(Mke," (Data2VecVision model)"),Mke.forEach(t),aJo=i(Me),Bs=n(Me,"LI",{});var H$=s(Bs);dpe=n(H$,"STRONG",{});var abt=s(dpe);nJo=r(abt,"deit"),abt.forEach(t),sJo=r(H$," \u2014 "),kX=n(H$,"A",{href:!0});var nbt=s(kX);lJo=r(nbt,"DeiTForImageClassification"),nbt.forEach(t),iJo=r(H$," or "),SX=n(H$,"A",{href:!0});var sbt=s(SX);dJo=r(sbt,"DeiTForImageClassificationWithTeacher"),sbt.forEach(t),cJo=r(H$," (DeiT model)"),H$.forEach(t),mJo=i(Me),fT=n(Me,"LI",{});var Eke=s(fT);cpe=n(Eke,"STRONG",{});var lbt=s(cpe);fJo=r(lbt,"imagegpt"),lbt.forEach(t),gJo=r(Eke," \u2014 "),RX=n(Eke,"A",{href:!0});var ibt=s(RX);hJo=r(ibt,"ImageGPTForImageClassification"),ibt.forEach(t),uJo=r(Eke," (ImageGPT model)"),Eke.forEach(t),pJo=i(Me),ut=n(Me,"LI",{});var gm=s(ut);mpe=n(gm,"STRONG",{});var dbt=s(mpe);_Jo=r(dbt,"perceiver"),dbt.forEach(t),bJo=r(gm," \u2014 "),PX=n(gm,"A",{href:!0});var cbt=s(PX);vJo=r(cbt,"PerceiverForImageClassificationLearned"),cbt.forEach(t),FJo=r(gm," or "),BX=n(gm,"A",{href:!0});var mbt=s(BX);TJo=r(mbt,"PerceiverForImageClassificationFourier"),mbt.forEach(t),MJo=r(gm," or "),IX=n(gm,"A",{href:!0});var fbt=s(IX);EJo=r(fbt,"PerceiverForImageClassificationConvProcessing"),fbt.forEach(t),CJo=r(gm," (Perceiver model)"),gm.forEach(t),wJo=i(Me),gT=n(Me,"LI",{});var Cke=s(gT);fpe=n(Cke,"STRONG",{});var gbt=s(fpe);AJo=r(gbt,"poolformer"),gbt.forEach(t),yJo=r(Cke," \u2014 "),NX=n(Cke,"A",{href:!0});var hbt=s(NX);LJo=r(hbt,"PoolFormerForImageClassification"),hbt.forEach(t),xJo=r(Cke," (PoolFormer model)"),Cke.forEach(t),$Jo=i(Me),hT=n(Me,"LI",{});var wke=s(hT);gpe=n(wke,"STRONG",{});var ubt=s(gpe);kJo=r(ubt,"regnet"),ubt.forEach(t),SJo=r(wke," \u2014 "),qX=n(wke,"A",{href:!0});var pbt=s(qX);RJo=r(pbt,"RegNetForImageClassification"),pbt.forEach(t),PJo=r(wke," (RegNet model)"),wke.forEach(t),BJo=i(Me),uT=n(Me,"LI",{});var Ake=s(uT);hpe=n(Ake,"STRONG",{});var _bt=s(hpe);IJo=r(_bt,"resnet"),_bt.forEach(t),NJo=r(Ake," \u2014 "),jX=n(Ake,"A",{href:!0});var bbt=s(jX);qJo=r(bbt,"ResNetForImageClassification"),bbt.forEach(t),jJo=r(Ake," (ResNet model)"),Ake.forEach(t),DJo=i(Me),pT=n(Me,"LI",{});var yke=s(pT);upe=n(yke,"STRONG",{});var vbt=s(upe);GJo=r(vbt,"segformer"),vbt.forEach(t),OJo=r(yke," \u2014 "),DX=n(yke,"A",{href:!0});var Fbt=s(DX);VJo=r(Fbt,"SegformerForImageClassification"),Fbt.forEach(t),XJo=r(yke," (SegFormer model)"),yke.forEach(t),zJo=i(Me),_T=n(Me,"LI",{});var Lke=s(_T);ppe=n(Lke,"STRONG",{});var Tbt=s(ppe);WJo=r(Tbt,"swin"),Tbt.forEach(t),QJo=r(Lke," \u2014 "),GX=n(Lke,"A",{href:!0});var Mbt=s(GX);HJo=r(Mbt,"SwinForImageClassification"),Mbt.forEach(t),UJo=r(Lke," (Swin model)"),Lke.forEach(t),JJo=i(Me),bT=n(Me,"LI",{});var xke=s(bT);_pe=n(xke,"STRONG",{});var Ebt=s(_pe);YJo=r(Ebt,"van"),Ebt.forEach(t),KJo=r(xke," \u2014 "),OX=n(xke,"A",{href:!0});var Cbt=s(OX);ZJo=r(Cbt,"VanForImageClassification"),Cbt.forEach(t),eYo=r(xke," (VAN model)"),xke.forEach(t),oYo=i(Me),vT=n(Me,"LI",{});var $ke=s(vT);bpe=n($ke,"STRONG",{});var wbt=s(bpe);rYo=r(wbt,"vit"),wbt.forEach(t),tYo=r($ke," \u2014 "),VX=n($ke,"A",{href:!0});var Abt=s(VX);aYo=r(Abt,"ViTForImageClassification"),Abt.forEach(t),nYo=r($ke," (ViT model)"),$ke.forEach(t),Me.forEach(t),sYo=i(fa),FT=n(fa,"P",{});var kke=s(FT);lYo=r(kke,"The model is set in evaluation mode by default using "),vpe=n(kke,"CODE",{});var ybt=s(vpe);iYo=r(ybt,"model.eval()"),ybt.forEach(t),dYo=r(kke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fpe=n(kke,"CODE",{});var Lbt=s(Fpe);cYo=r(Lbt,"model.train()"),Lbt.forEach(t),kke.forEach(t),mYo=i(fa),T(TT.$$.fragment,fa),fa.forEach(t),Zs.forEach(t),oje=i(m),ld=n(m,"H2",{class:!0});var nGe=s(ld);MT=n(nGe,"A",{id:!0,class:!0,href:!0});var xbt=s(MT);Tpe=n(xbt,"SPAN",{});var $bt=s(Tpe);T(c8.$$.fragment,$bt),$bt.forEach(t),xbt.forEach(t),fYo=i(nGe),Mpe=n(nGe,"SPAN",{});var kbt=s(Mpe);gYo=r(kbt,"AutoModelForVision2Seq"),kbt.forEach(t),nGe.forEach(t),rje=i(m),Do=n(m,"DIV",{class:!0});var el=s(Do);T(m8.$$.fragment,el),hYo=i(el),id=n(el,"P",{});var UZ=s(id);uYo=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),XX=n(UZ,"A",{href:!0});var Sbt=s(XX);pYo=r(Sbt,"from_pretrained()"),Sbt.forEach(t),_Yo=r(UZ," class method or the "),zX=n(UZ,"A",{href:!0});var Rbt=s(zX);bYo=r(Rbt,"from_config()"),Rbt.forEach(t),vYo=r(UZ,` class
method.`),UZ.forEach(t),FYo=i(el),f8=n(el,"P",{});var sGe=s(f8);TYo=r(sGe,"This class cannot be instantiated directly using "),Epe=n(sGe,"CODE",{});var Pbt=s(Epe);MYo=r(Pbt,"__init__()"),Pbt.forEach(t),EYo=r(sGe," (throws an error)."),sGe.forEach(t),CYo=i(el),pt=n(el,"DIV",{class:!0});var sA=s(pt);T(g8.$$.fragment,sA),wYo=i(sA),Cpe=n(sA,"P",{});var Bbt=s(Cpe);AYo=r(Bbt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Bbt.forEach(t),yYo=i(sA),dd=n(sA,"P",{});var JZ=s(dd);LYo=r(JZ,`Note:
Loading a model from its configuration file does `),wpe=n(JZ,"STRONG",{});var Ibt=s(wpe);xYo=r(Ibt,"not"),Ibt.forEach(t),$Yo=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=n(JZ,"A",{href:!0});var Nbt=s(WX);kYo=r(Nbt,"from_pretrained()"),Nbt.forEach(t),SYo=r(JZ," to load the model weights."),JZ.forEach(t),RYo=i(sA),T(ET.$$.fragment,sA),sA.forEach(t),PYo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(h8.$$.fragment,ga),BYo=i(ga),Ape=n(ga,"P",{});var qbt=s(Ape);IYo=r(qbt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),qbt.forEach(t),NYo=i(ga),Da=n(ga,"P",{});var lA=s(Da);qYo=r(lA,"The model class to instantiate is selected based on the "),ype=n(lA,"CODE",{});var jbt=s(ype);jYo=r(jbt,"model_type"),jbt.forEach(t),DYo=r(lA,` property of the config object (either
passed as an argument or loaded from `),Lpe=n(lA,"CODE",{});var Dbt=s(Lpe);GYo=r(Dbt,"pretrained_model_name_or_path"),Dbt.forEach(t),OYo=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xpe=n(lA,"CODE",{});var Gbt=s(xpe);VYo=r(Gbt,"pretrained_model_name_or_path"),Gbt.forEach(t),XYo=r(lA,":"),lA.forEach(t),zYo=i(ga),$pe=n(ga,"UL",{});var Obt=s($pe);CT=n(Obt,"LI",{});var Ske=s(CT);kpe=n(Ske,"STRONG",{});var Vbt=s(kpe);WYo=r(Vbt,"vision-encoder-decoder"),Vbt.forEach(t),QYo=r(Ske," \u2014 "),QX=n(Ske,"A",{href:!0});var Xbt=s(QX);HYo=r(Xbt,"VisionEncoderDecoderModel"),Xbt.forEach(t),UYo=r(Ske," (Vision Encoder decoder model)"),Ske.forEach(t),Obt.forEach(t),JYo=i(ga),wT=n(ga,"P",{});var Rke=s(wT);YYo=r(Rke,"The model is set in evaluation mode by default using "),Spe=n(Rke,"CODE",{});var zbt=s(Spe);KYo=r(zbt,"model.eval()"),zbt.forEach(t),ZYo=r(Rke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rpe=n(Rke,"CODE",{});var Wbt=s(Rpe);eKo=r(Wbt,"model.train()"),Wbt.forEach(t),Rke.forEach(t),oKo=i(ga),T(AT.$$.fragment,ga),ga.forEach(t),el.forEach(t),tje=i(m),cd=n(m,"H2",{class:!0});var lGe=s(cd);yT=n(lGe,"A",{id:!0,class:!0,href:!0});var Qbt=s(yT);Ppe=n(Qbt,"SPAN",{});var Hbt=s(Ppe);T(u8.$$.fragment,Hbt),Hbt.forEach(t),Qbt.forEach(t),rKo=i(lGe),Bpe=n(lGe,"SPAN",{});var Ubt=s(Bpe);tKo=r(Ubt,"AutoModelForAudioClassification"),Ubt.forEach(t),lGe.forEach(t),aje=i(m),Go=n(m,"DIV",{class:!0});var ol=s(Go);T(p8.$$.fragment,ol),aKo=i(ol),md=n(ol,"P",{});var YZ=s(md);nKo=r(YZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),HX=n(YZ,"A",{href:!0});var Jbt=s(HX);sKo=r(Jbt,"from_pretrained()"),Jbt.forEach(t),lKo=r(YZ," class method or the "),UX=n(YZ,"A",{href:!0});var Ybt=s(UX);iKo=r(Ybt,"from_config()"),Ybt.forEach(t),dKo=r(YZ,` class
method.`),YZ.forEach(t),cKo=i(ol),_8=n(ol,"P",{});var iGe=s(_8);mKo=r(iGe,"This class cannot be instantiated directly using "),Ipe=n(iGe,"CODE",{});var Kbt=s(Ipe);fKo=r(Kbt,"__init__()"),Kbt.forEach(t),gKo=r(iGe," (throws an error)."),iGe.forEach(t),hKo=i(ol),_t=n(ol,"DIV",{class:!0});var iA=s(_t);T(b8.$$.fragment,iA),uKo=i(iA),Npe=n(iA,"P",{});var Zbt=s(Npe);pKo=r(Zbt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Zbt.forEach(t),_Ko=i(iA),fd=n(iA,"P",{});var KZ=s(fd);bKo=r(KZ,`Note:
Loading a model from its configuration file does `),qpe=n(KZ,"STRONG",{});var e2t=s(qpe);vKo=r(e2t,"not"),e2t.forEach(t),FKo=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JX=n(KZ,"A",{href:!0});var o2t=s(JX);TKo=r(o2t,"from_pretrained()"),o2t.forEach(t),MKo=r(KZ," to load the model weights."),KZ.forEach(t),EKo=i(iA),T(LT.$$.fragment,iA),iA.forEach(t),CKo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(v8.$$.fragment,ha),wKo=i(ha),jpe=n(ha,"P",{});var r2t=s(jpe);AKo=r(r2t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),r2t.forEach(t),yKo=i(ha),Ga=n(ha,"P",{});var dA=s(Ga);LKo=r(dA,"The model class to instantiate is selected based on the "),Dpe=n(dA,"CODE",{});var t2t=s(Dpe);xKo=r(t2t,"model_type"),t2t.forEach(t),$Ko=r(dA,` property of the config object (either
passed as an argument or loaded from `),Gpe=n(dA,"CODE",{});var a2t=s(Gpe);kKo=r(a2t,"pretrained_model_name_or_path"),a2t.forEach(t),SKo=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ope=n(dA,"CODE",{});var n2t=s(Ope);RKo=r(n2t,"pretrained_model_name_or_path"),n2t.forEach(t),PKo=r(dA,":"),dA.forEach(t),BKo=i(ha),Se=n(ha,"UL",{});var Ve=s(Se);xT=n(Ve,"LI",{});var Pke=s(xT);Vpe=n(Pke,"STRONG",{});var s2t=s(Vpe);IKo=r(s2t,"data2vec-audio"),s2t.forEach(t),NKo=r(Pke," \u2014 "),YX=n(Pke,"A",{href:!0});var l2t=s(YX);qKo=r(l2t,"Data2VecAudioForSequenceClassification"),l2t.forEach(t),jKo=r(Pke," (Data2VecAudio model)"),Pke.forEach(t),DKo=i(Ve),$T=n(Ve,"LI",{});var Bke=s($T);Xpe=n(Bke,"STRONG",{});var i2t=s(Xpe);GKo=r(i2t,"hubert"),i2t.forEach(t),OKo=r(Bke," \u2014 "),KX=n(Bke,"A",{href:!0});var d2t=s(KX);VKo=r(d2t,"HubertForSequenceClassification"),d2t.forEach(t),XKo=r(Bke," (Hubert model)"),Bke.forEach(t),zKo=i(Ve),kT=n(Ve,"LI",{});var Ike=s(kT);zpe=n(Ike,"STRONG",{});var c2t=s(zpe);WKo=r(c2t,"sew"),c2t.forEach(t),QKo=r(Ike," \u2014 "),ZX=n(Ike,"A",{href:!0});var m2t=s(ZX);HKo=r(m2t,"SEWForSequenceClassification"),m2t.forEach(t),UKo=r(Ike," (SEW model)"),Ike.forEach(t),JKo=i(Ve),ST=n(Ve,"LI",{});var Nke=s(ST);Wpe=n(Nke,"STRONG",{});var f2t=s(Wpe);YKo=r(f2t,"sew-d"),f2t.forEach(t),KKo=r(Nke," \u2014 "),ez=n(Nke,"A",{href:!0});var g2t=s(ez);ZKo=r(g2t,"SEWDForSequenceClassification"),g2t.forEach(t),eZo=r(Nke," (SEW-D model)"),Nke.forEach(t),oZo=i(Ve),RT=n(Ve,"LI",{});var qke=s(RT);Qpe=n(qke,"STRONG",{});var h2t=s(Qpe);rZo=r(h2t,"unispeech"),h2t.forEach(t),tZo=r(qke," \u2014 "),oz=n(qke,"A",{href:!0});var u2t=s(oz);aZo=r(u2t,"UniSpeechForSequenceClassification"),u2t.forEach(t),nZo=r(qke," (UniSpeech model)"),qke.forEach(t),sZo=i(Ve),PT=n(Ve,"LI",{});var jke=s(PT);Hpe=n(jke,"STRONG",{});var p2t=s(Hpe);lZo=r(p2t,"unispeech-sat"),p2t.forEach(t),iZo=r(jke," \u2014 "),rz=n(jke,"A",{href:!0});var _2t=s(rz);dZo=r(_2t,"UniSpeechSatForSequenceClassification"),_2t.forEach(t),cZo=r(jke," (UniSpeechSat model)"),jke.forEach(t),mZo=i(Ve),BT=n(Ve,"LI",{});var Dke=s(BT);Upe=n(Dke,"STRONG",{});var b2t=s(Upe);fZo=r(b2t,"wav2vec2"),b2t.forEach(t),gZo=r(Dke," \u2014 "),tz=n(Dke,"A",{href:!0});var v2t=s(tz);hZo=r(v2t,"Wav2Vec2ForSequenceClassification"),v2t.forEach(t),uZo=r(Dke," (Wav2Vec2 model)"),Dke.forEach(t),pZo=i(Ve),IT=n(Ve,"LI",{});var Gke=s(IT);Jpe=n(Gke,"STRONG",{});var F2t=s(Jpe);_Zo=r(F2t,"wav2vec2-conformer"),F2t.forEach(t),bZo=r(Gke," \u2014 "),az=n(Gke,"A",{href:!0});var T2t=s(az);vZo=r(T2t,"Wav2Vec2ConformerForSequenceClassification"),T2t.forEach(t),FZo=r(Gke," (Wav2Vec2-Conformer model)"),Gke.forEach(t),TZo=i(Ve),NT=n(Ve,"LI",{});var Oke=s(NT);Ype=n(Oke,"STRONG",{});var M2t=s(Ype);MZo=r(M2t,"wavlm"),M2t.forEach(t),EZo=r(Oke," \u2014 "),nz=n(Oke,"A",{href:!0});var E2t=s(nz);CZo=r(E2t,"WavLMForSequenceClassification"),E2t.forEach(t),wZo=r(Oke," (WavLM model)"),Oke.forEach(t),Ve.forEach(t),AZo=i(ha),qT=n(ha,"P",{});var Vke=s(qT);yZo=r(Vke,"The model is set in evaluation mode by default using "),Kpe=n(Vke,"CODE",{});var C2t=s(Kpe);LZo=r(C2t,"model.eval()"),C2t.forEach(t),xZo=r(Vke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zpe=n(Vke,"CODE",{});var w2t=s(Zpe);$Zo=r(w2t,"model.train()"),w2t.forEach(t),Vke.forEach(t),kZo=i(ha),T(jT.$$.fragment,ha),ha.forEach(t),ol.forEach(t),nje=i(m),gd=n(m,"H2",{class:!0});var dGe=s(gd);DT=n(dGe,"A",{id:!0,class:!0,href:!0});var A2t=s(DT);e_e=n(A2t,"SPAN",{});var y2t=s(e_e);T(F8.$$.fragment,y2t),y2t.forEach(t),A2t.forEach(t),SZo=i(dGe),o_e=n(dGe,"SPAN",{});var L2t=s(o_e);RZo=r(L2t,"AutoModelForAudioFrameClassification"),L2t.forEach(t),dGe.forEach(t),sje=i(m),Oo=n(m,"DIV",{class:!0});var rl=s(Oo);T(T8.$$.fragment,rl),PZo=i(rl),hd=n(rl,"P",{});var ZZ=s(hd);BZo=r(ZZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),sz=n(ZZ,"A",{href:!0});var x2t=s(sz);IZo=r(x2t,"from_pretrained()"),x2t.forEach(t),NZo=r(ZZ," class method or the "),lz=n(ZZ,"A",{href:!0});var $2t=s(lz);qZo=r($2t,"from_config()"),$2t.forEach(t),jZo=r(ZZ,` class
method.`),ZZ.forEach(t),DZo=i(rl),M8=n(rl,"P",{});var cGe=s(M8);GZo=r(cGe,"This class cannot be instantiated directly using "),r_e=n(cGe,"CODE",{});var k2t=s(r_e);OZo=r(k2t,"__init__()"),k2t.forEach(t),VZo=r(cGe," (throws an error)."),cGe.forEach(t),XZo=i(rl),bt=n(rl,"DIV",{class:!0});var cA=s(bt);T(E8.$$.fragment,cA),zZo=i(cA),t_e=n(cA,"P",{});var S2t=s(t_e);WZo=r(S2t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),S2t.forEach(t),QZo=i(cA),ud=n(cA,"P",{});var eee=s(ud);HZo=r(eee,`Note:
Loading a model from its configuration file does `),a_e=n(eee,"STRONG",{});var R2t=s(a_e);UZo=r(R2t,"not"),R2t.forEach(t),JZo=r(eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),iz=n(eee,"A",{href:!0});var P2t=s(iz);YZo=r(P2t,"from_pretrained()"),P2t.forEach(t),KZo=r(eee," to load the model weights."),eee.forEach(t),ZZo=i(cA),T(GT.$$.fragment,cA),cA.forEach(t),eer=i(rl),mo=n(rl,"DIV",{class:!0});var ua=s(mo);T(C8.$$.fragment,ua),oer=i(ua),n_e=n(ua,"P",{});var B2t=s(n_e);rer=r(B2t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),B2t.forEach(t),ter=i(ua),Oa=n(ua,"P",{});var mA=s(Oa);aer=r(mA,"The model class to instantiate is selected based on the "),s_e=n(mA,"CODE",{});var I2t=s(s_e);ner=r(I2t,"model_type"),I2t.forEach(t),ser=r(mA,` property of the config object (either
passed as an argument or loaded from `),l_e=n(mA,"CODE",{});var N2t=s(l_e);ler=r(N2t,"pretrained_model_name_or_path"),N2t.forEach(t),ier=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i_e=n(mA,"CODE",{});var q2t=s(i_e);der=r(q2t,"pretrained_model_name_or_path"),q2t.forEach(t),cer=r(mA,":"),mA.forEach(t),mer=i(ua),Kr=n(ua,"UL",{});var tl=s(Kr);OT=n(tl,"LI",{});var Xke=s(OT);d_e=n(Xke,"STRONG",{});var j2t=s(d_e);fer=r(j2t,"data2vec-audio"),j2t.forEach(t),ger=r(Xke," \u2014 "),dz=n(Xke,"A",{href:!0});var D2t=s(dz);her=r(D2t,"Data2VecAudioForAudioFrameClassification"),D2t.forEach(t),uer=r(Xke," (Data2VecAudio model)"),Xke.forEach(t),per=i(tl),VT=n(tl,"LI",{});var zke=s(VT);c_e=n(zke,"STRONG",{});var G2t=s(c_e);_er=r(G2t,"unispeech-sat"),G2t.forEach(t),ber=r(zke," \u2014 "),cz=n(zke,"A",{href:!0});var O2t=s(cz);ver=r(O2t,"UniSpeechSatForAudioFrameClassification"),O2t.forEach(t),Fer=r(zke," (UniSpeechSat model)"),zke.forEach(t),Ter=i(tl),XT=n(tl,"LI",{});var Wke=s(XT);m_e=n(Wke,"STRONG",{});var V2t=s(m_e);Mer=r(V2t,"wav2vec2"),V2t.forEach(t),Eer=r(Wke," \u2014 "),mz=n(Wke,"A",{href:!0});var X2t=s(mz);Cer=r(X2t,"Wav2Vec2ForAudioFrameClassification"),X2t.forEach(t),wer=r(Wke," (Wav2Vec2 model)"),Wke.forEach(t),Aer=i(tl),zT=n(tl,"LI",{});var Qke=s(zT);f_e=n(Qke,"STRONG",{});var z2t=s(f_e);yer=r(z2t,"wav2vec2-conformer"),z2t.forEach(t),Ler=r(Qke," \u2014 "),fz=n(Qke,"A",{href:!0});var W2t=s(fz);xer=r(W2t,"Wav2Vec2ConformerForAudioFrameClassification"),W2t.forEach(t),$er=r(Qke," (Wav2Vec2-Conformer model)"),Qke.forEach(t),ker=i(tl),WT=n(tl,"LI",{});var Hke=s(WT);g_e=n(Hke,"STRONG",{});var Q2t=s(g_e);Ser=r(Q2t,"wavlm"),Q2t.forEach(t),Rer=r(Hke," \u2014 "),gz=n(Hke,"A",{href:!0});var H2t=s(gz);Per=r(H2t,"WavLMForAudioFrameClassification"),H2t.forEach(t),Ber=r(Hke," (WavLM model)"),Hke.forEach(t),tl.forEach(t),Ier=i(ua),QT=n(ua,"P",{});var Uke=s(QT);Ner=r(Uke,"The model is set in evaluation mode by default using "),h_e=n(Uke,"CODE",{});var U2t=s(h_e);qer=r(U2t,"model.eval()"),U2t.forEach(t),jer=r(Uke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u_e=n(Uke,"CODE",{});var J2t=s(u_e);Der=r(J2t,"model.train()"),J2t.forEach(t),Uke.forEach(t),Ger=i(ua),T(HT.$$.fragment,ua),ua.forEach(t),rl.forEach(t),lje=i(m),pd=n(m,"H2",{class:!0});var mGe=s(pd);UT=n(mGe,"A",{id:!0,class:!0,href:!0});var Y2t=s(UT);p_e=n(Y2t,"SPAN",{});var K2t=s(p_e);T(w8.$$.fragment,K2t),K2t.forEach(t),Y2t.forEach(t),Oer=i(mGe),__e=n(mGe,"SPAN",{});var Z2t=s(__e);Ver=r(Z2t,"AutoModelForCTC"),Z2t.forEach(t),mGe.forEach(t),ije=i(m),Vo=n(m,"DIV",{class:!0});var al=s(Vo);T(A8.$$.fragment,al),Xer=i(al),_d=n(al,"P",{});var oee=s(_d);zer=r(oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),hz=n(oee,"A",{href:!0});var evt=s(hz);Wer=r(evt,"from_pretrained()"),evt.forEach(t),Qer=r(oee," class method or the "),uz=n(oee,"A",{href:!0});var ovt=s(uz);Her=r(ovt,"from_config()"),ovt.forEach(t),Uer=r(oee,` class
method.`),oee.forEach(t),Jer=i(al),y8=n(al,"P",{});var fGe=s(y8);Yer=r(fGe,"This class cannot be instantiated directly using "),b_e=n(fGe,"CODE",{});var rvt=s(b_e);Ker=r(rvt,"__init__()"),rvt.forEach(t),Zer=r(fGe," (throws an error)."),fGe.forEach(t),eor=i(al),vt=n(al,"DIV",{class:!0});var fA=s(vt);T(L8.$$.fragment,fA),oor=i(fA),v_e=n(fA,"P",{});var tvt=s(v_e);ror=r(tvt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),tvt.forEach(t),tor=i(fA),bd=n(fA,"P",{});var ree=s(bd);aor=r(ree,`Note:
Loading a model from its configuration file does `),F_e=n(ree,"STRONG",{});var avt=s(F_e);nor=r(avt,"not"),avt.forEach(t),sor=r(ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=n(ree,"A",{href:!0});var nvt=s(pz);lor=r(nvt,"from_pretrained()"),nvt.forEach(t),ior=r(ree," to load the model weights."),ree.forEach(t),dor=i(fA),T(JT.$$.fragment,fA),fA.forEach(t),cor=i(al),fo=n(al,"DIV",{class:!0});var pa=s(fo);T(x8.$$.fragment,pa),mor=i(pa),T_e=n(pa,"P",{});var svt=s(T_e);gor=r(svt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),svt.forEach(t),hor=i(pa),Va=n(pa,"P",{});var gA=s(Va);uor=r(gA,"The model class to instantiate is selected based on the "),M_e=n(gA,"CODE",{});var lvt=s(M_e);por=r(lvt,"model_type"),lvt.forEach(t),_or=r(gA,` property of the config object (either
passed as an argument or loaded from `),E_e=n(gA,"CODE",{});var ivt=s(E_e);bor=r(ivt,"pretrained_model_name_or_path"),ivt.forEach(t),vor=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C_e=n(gA,"CODE",{});var dvt=s(C_e);For=r(dvt,"pretrained_model_name_or_path"),dvt.forEach(t),Tor=r(gA,":"),gA.forEach(t),Mor=i(pa),Re=n(pa,"UL",{});var Xe=s(Re);YT=n(Xe,"LI",{});var Jke=s(YT);w_e=n(Jke,"STRONG",{});var cvt=s(w_e);Eor=r(cvt,"data2vec-audio"),cvt.forEach(t),Cor=r(Jke," \u2014 "),_z=n(Jke,"A",{href:!0});var mvt=s(_z);wor=r(mvt,"Data2VecAudioForCTC"),mvt.forEach(t),Aor=r(Jke," (Data2VecAudio model)"),Jke.forEach(t),yor=i(Xe),KT=n(Xe,"LI",{});var Yke=s(KT);A_e=n(Yke,"STRONG",{});var fvt=s(A_e);Lor=r(fvt,"hubert"),fvt.forEach(t),xor=r(Yke," \u2014 "),bz=n(Yke,"A",{href:!0});var gvt=s(bz);$or=r(gvt,"HubertForCTC"),gvt.forEach(t),kor=r(Yke," (Hubert model)"),Yke.forEach(t),Sor=i(Xe),ZT=n(Xe,"LI",{});var Kke=s(ZT);y_e=n(Kke,"STRONG",{});var hvt=s(y_e);Ror=r(hvt,"sew"),hvt.forEach(t),Por=r(Kke," \u2014 "),vz=n(Kke,"A",{href:!0});var uvt=s(vz);Bor=r(uvt,"SEWForCTC"),uvt.forEach(t),Ior=r(Kke," (SEW model)"),Kke.forEach(t),Nor=i(Xe),eM=n(Xe,"LI",{});var Zke=s(eM);L_e=n(Zke,"STRONG",{});var pvt=s(L_e);qor=r(pvt,"sew-d"),pvt.forEach(t),jor=r(Zke," \u2014 "),Fz=n(Zke,"A",{href:!0});var _vt=s(Fz);Dor=r(_vt,"SEWDForCTC"),_vt.forEach(t),Gor=r(Zke," (SEW-D model)"),Zke.forEach(t),Oor=i(Xe),oM=n(Xe,"LI",{});var eSe=s(oM);x_e=n(eSe,"STRONG",{});var bvt=s(x_e);Vor=r(bvt,"unispeech"),bvt.forEach(t),Xor=r(eSe," \u2014 "),Tz=n(eSe,"A",{href:!0});var vvt=s(Tz);zor=r(vvt,"UniSpeechForCTC"),vvt.forEach(t),Wor=r(eSe," (UniSpeech model)"),eSe.forEach(t),Qor=i(Xe),rM=n(Xe,"LI",{});var oSe=s(rM);$_e=n(oSe,"STRONG",{});var Fvt=s($_e);Hor=r(Fvt,"unispeech-sat"),Fvt.forEach(t),Uor=r(oSe," \u2014 "),Mz=n(oSe,"A",{href:!0});var Tvt=s(Mz);Jor=r(Tvt,"UniSpeechSatForCTC"),Tvt.forEach(t),Yor=r(oSe," (UniSpeechSat model)"),oSe.forEach(t),Kor=i(Xe),tM=n(Xe,"LI",{});var rSe=s(tM);k_e=n(rSe,"STRONG",{});var Mvt=s(k_e);Zor=r(Mvt,"wav2vec2"),Mvt.forEach(t),err=r(rSe," \u2014 "),Ez=n(rSe,"A",{href:!0});var Evt=s(Ez);orr=r(Evt,"Wav2Vec2ForCTC"),Evt.forEach(t),rrr=r(rSe," (Wav2Vec2 model)"),rSe.forEach(t),trr=i(Xe),aM=n(Xe,"LI",{});var tSe=s(aM);S_e=n(tSe,"STRONG",{});var Cvt=s(S_e);arr=r(Cvt,"wav2vec2-conformer"),Cvt.forEach(t),nrr=r(tSe," \u2014 "),Cz=n(tSe,"A",{href:!0});var wvt=s(Cz);srr=r(wvt,"Wav2Vec2ConformerForCTC"),wvt.forEach(t),lrr=r(tSe," (Wav2Vec2-Conformer model)"),tSe.forEach(t),irr=i(Xe),nM=n(Xe,"LI",{});var aSe=s(nM);R_e=n(aSe,"STRONG",{});var Avt=s(R_e);drr=r(Avt,"wavlm"),Avt.forEach(t),crr=r(aSe," \u2014 "),wz=n(aSe,"A",{href:!0});var yvt=s(wz);mrr=r(yvt,"WavLMForCTC"),yvt.forEach(t),frr=r(aSe," (WavLM model)"),aSe.forEach(t),Xe.forEach(t),grr=i(pa),sM=n(pa,"P",{});var nSe=s(sM);hrr=r(nSe,"The model is set in evaluation mode by default using "),P_e=n(nSe,"CODE",{});var Lvt=s(P_e);urr=r(Lvt,"model.eval()"),Lvt.forEach(t),prr=r(nSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B_e=n(nSe,"CODE",{});var xvt=s(B_e);_rr=r(xvt,"model.train()"),xvt.forEach(t),nSe.forEach(t),brr=i(pa),T(lM.$$.fragment,pa),pa.forEach(t),al.forEach(t),dje=i(m),vd=n(m,"H2",{class:!0});var gGe=s(vd);iM=n(gGe,"A",{id:!0,class:!0,href:!0});var $vt=s(iM);I_e=n($vt,"SPAN",{});var kvt=s(I_e);T($8.$$.fragment,kvt),kvt.forEach(t),$vt.forEach(t),vrr=i(gGe),N_e=n(gGe,"SPAN",{});var Svt=s(N_e);Frr=r(Svt,"AutoModelForSpeechSeq2Seq"),Svt.forEach(t),gGe.forEach(t),cje=i(m),Xo=n(m,"DIV",{class:!0});var nl=s(Xo);T(k8.$$.fragment,nl),Trr=i(nl),Fd=n(nl,"P",{});var tee=s(Fd);Mrr=r(tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Az=n(tee,"A",{href:!0});var Rvt=s(Az);Err=r(Rvt,"from_pretrained()"),Rvt.forEach(t),Crr=r(tee," class method or the "),yz=n(tee,"A",{href:!0});var Pvt=s(yz);wrr=r(Pvt,"from_config()"),Pvt.forEach(t),Arr=r(tee,` class
method.`),tee.forEach(t),yrr=i(nl),S8=n(nl,"P",{});var hGe=s(S8);Lrr=r(hGe,"This class cannot be instantiated directly using "),q_e=n(hGe,"CODE",{});var Bvt=s(q_e);xrr=r(Bvt,"__init__()"),Bvt.forEach(t),$rr=r(hGe," (throws an error)."),hGe.forEach(t),krr=i(nl),Ft=n(nl,"DIV",{class:!0});var hA=s(Ft);T(R8.$$.fragment,hA),Srr=i(hA),j_e=n(hA,"P",{});var Ivt=s(j_e);Rrr=r(Ivt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Ivt.forEach(t),Prr=i(hA),Td=n(hA,"P",{});var aee=s(Td);Brr=r(aee,`Note:
Loading a model from its configuration file does `),D_e=n(aee,"STRONG",{});var Nvt=s(D_e);Irr=r(Nvt,"not"),Nvt.forEach(t),Nrr=r(aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lz=n(aee,"A",{href:!0});var qvt=s(Lz);qrr=r(qvt,"from_pretrained()"),qvt.forEach(t),jrr=r(aee," to load the model weights."),aee.forEach(t),Drr=i(hA),T(dM.$$.fragment,hA),hA.forEach(t),Grr=i(nl),go=n(nl,"DIV",{class:!0});var _a=s(go);T(P8.$$.fragment,_a),Orr=i(_a),G_e=n(_a,"P",{});var jvt=s(G_e);Vrr=r(jvt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),jvt.forEach(t),Xrr=i(_a),Xa=n(_a,"P",{});var uA=s(Xa);zrr=r(uA,"The model class to instantiate is selected based on the "),O_e=n(uA,"CODE",{});var Dvt=s(O_e);Wrr=r(Dvt,"model_type"),Dvt.forEach(t),Qrr=r(uA,` property of the config object (either
passed as an argument or loaded from `),V_e=n(uA,"CODE",{});var Gvt=s(V_e);Hrr=r(Gvt,"pretrained_model_name_or_path"),Gvt.forEach(t),Urr=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X_e=n(uA,"CODE",{});var Ovt=s(X_e);Jrr=r(Ovt,"pretrained_model_name_or_path"),Ovt.forEach(t),Yrr=r(uA,":"),uA.forEach(t),Krr=i(_a),B8=n(_a,"UL",{});var uGe=s(B8);cM=n(uGe,"LI",{});var sSe=s(cM);z_e=n(sSe,"STRONG",{});var Vvt=s(z_e);Zrr=r(Vvt,"speech-encoder-decoder"),Vvt.forEach(t),etr=r(sSe," \u2014 "),xz=n(sSe,"A",{href:!0});var Xvt=s(xz);otr=r(Xvt,"SpeechEncoderDecoderModel"),Xvt.forEach(t),rtr=r(sSe," (Speech Encoder decoder model)"),sSe.forEach(t),ttr=i(uGe),mM=n(uGe,"LI",{});var lSe=s(mM);W_e=n(lSe,"STRONG",{});var zvt=s(W_e);atr=r(zvt,"speech_to_text"),zvt.forEach(t),ntr=r(lSe," \u2014 "),$z=n(lSe,"A",{href:!0});var Wvt=s($z);str=r(Wvt,"Speech2TextForConditionalGeneration"),Wvt.forEach(t),ltr=r(lSe," (Speech2Text model)"),lSe.forEach(t),uGe.forEach(t),itr=i(_a),fM=n(_a,"P",{});var iSe=s(fM);dtr=r(iSe,"The model is set in evaluation mode by default using "),Q_e=n(iSe,"CODE",{});var Qvt=s(Q_e);ctr=r(Qvt,"model.eval()"),Qvt.forEach(t),mtr=r(iSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H_e=n(iSe,"CODE",{});var Hvt=s(H_e);ftr=r(Hvt,"model.train()"),Hvt.forEach(t),iSe.forEach(t),gtr=i(_a),T(gM.$$.fragment,_a),_a.forEach(t),nl.forEach(t),mje=i(m),Md=n(m,"H2",{class:!0});var pGe=s(Md);hM=n(pGe,"A",{id:!0,class:!0,href:!0});var Uvt=s(hM);U_e=n(Uvt,"SPAN",{});var Jvt=s(U_e);T(I8.$$.fragment,Jvt),Jvt.forEach(t),Uvt.forEach(t),htr=i(pGe),J_e=n(pGe,"SPAN",{});var Yvt=s(J_e);utr=r(Yvt,"AutoModelForAudioXVector"),Yvt.forEach(t),pGe.forEach(t),fje=i(m),zo=n(m,"DIV",{class:!0});var sl=s(zo);T(N8.$$.fragment,sl),ptr=i(sl),Ed=n(sl,"P",{});var nee=s(Ed);_tr=r(nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),kz=n(nee,"A",{href:!0});var Kvt=s(kz);btr=r(Kvt,"from_pretrained()"),Kvt.forEach(t),vtr=r(nee," class method or the "),Sz=n(nee,"A",{href:!0});var Zvt=s(Sz);Ftr=r(Zvt,"from_config()"),Zvt.forEach(t),Ttr=r(nee,` class
method.`),nee.forEach(t),Mtr=i(sl),q8=n(sl,"P",{});var _Ge=s(q8);Etr=r(_Ge,"This class cannot be instantiated directly using "),Y_e=n(_Ge,"CODE",{});var eFt=s(Y_e);Ctr=r(eFt,"__init__()"),eFt.forEach(t),wtr=r(_Ge," (throws an error)."),_Ge.forEach(t),Atr=i(sl),Tt=n(sl,"DIV",{class:!0});var pA=s(Tt);T(j8.$$.fragment,pA),ytr=i(pA),K_e=n(pA,"P",{});var oFt=s(K_e);Ltr=r(oFt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),oFt.forEach(t),xtr=i(pA),Cd=n(pA,"P",{});var see=s(Cd);$tr=r(see,`Note:
Loading a model from its configuration file does `),Z_e=n(see,"STRONG",{});var rFt=s(Z_e);ktr=r(rFt,"not"),rFt.forEach(t),Str=r(see,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rz=n(see,"A",{href:!0});var tFt=s(Rz);Rtr=r(tFt,"from_pretrained()"),tFt.forEach(t),Ptr=r(see," to load the model weights."),see.forEach(t),Btr=i(pA),T(uM.$$.fragment,pA),pA.forEach(t),Itr=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T(D8.$$.fragment,ba),Ntr=i(ba),ebe=n(ba,"P",{});var aFt=s(ebe);qtr=r(aFt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),aFt.forEach(t),jtr=i(ba),za=n(ba,"P",{});var _A=s(za);Dtr=r(_A,"The model class to instantiate is selected based on the "),obe=n(_A,"CODE",{});var nFt=s(obe);Gtr=r(nFt,"model_type"),nFt.forEach(t),Otr=r(_A,` property of the config object (either
passed as an argument or loaded from `),rbe=n(_A,"CODE",{});var sFt=s(rbe);Vtr=r(sFt,"pretrained_model_name_or_path"),sFt.forEach(t),Xtr=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tbe=n(_A,"CODE",{});var lFt=s(tbe);ztr=r(lFt,"pretrained_model_name_or_path"),lFt.forEach(t),Wtr=r(_A,":"),_A.forEach(t),Qtr=i(ba),Zr=n(ba,"UL",{});var ll=s(Zr);pM=n(ll,"LI",{});var dSe=s(pM);abe=n(dSe,"STRONG",{});var iFt=s(abe);Htr=r(iFt,"data2vec-audio"),iFt.forEach(t),Utr=r(dSe," \u2014 "),Pz=n(dSe,"A",{href:!0});var dFt=s(Pz);Jtr=r(dFt,"Data2VecAudioForXVector"),dFt.forEach(t),Ytr=r(dSe," (Data2VecAudio model)"),dSe.forEach(t),Ktr=i(ll),_M=n(ll,"LI",{});var cSe=s(_M);nbe=n(cSe,"STRONG",{});var cFt=s(nbe);Ztr=r(cFt,"unispeech-sat"),cFt.forEach(t),ear=r(cSe," \u2014 "),Bz=n(cSe,"A",{href:!0});var mFt=s(Bz);oar=r(mFt,"UniSpeechSatForXVector"),mFt.forEach(t),rar=r(cSe," (UniSpeechSat model)"),cSe.forEach(t),tar=i(ll),bM=n(ll,"LI",{});var mSe=s(bM);sbe=n(mSe,"STRONG",{});var fFt=s(sbe);aar=r(fFt,"wav2vec2"),fFt.forEach(t),nar=r(mSe," \u2014 "),Iz=n(mSe,"A",{href:!0});var gFt=s(Iz);sar=r(gFt,"Wav2Vec2ForXVector"),gFt.forEach(t),lar=r(mSe," (Wav2Vec2 model)"),mSe.forEach(t),iar=i(ll),vM=n(ll,"LI",{});var fSe=s(vM);lbe=n(fSe,"STRONG",{});var hFt=s(lbe);dar=r(hFt,"wav2vec2-conformer"),hFt.forEach(t),car=r(fSe," \u2014 "),Nz=n(fSe,"A",{href:!0});var uFt=s(Nz);mar=r(uFt,"Wav2Vec2ConformerForXVector"),uFt.forEach(t),far=r(fSe," (Wav2Vec2-Conformer model)"),fSe.forEach(t),gar=i(ll),FM=n(ll,"LI",{});var gSe=s(FM);ibe=n(gSe,"STRONG",{});var pFt=s(ibe);har=r(pFt,"wavlm"),pFt.forEach(t),uar=r(gSe," \u2014 "),qz=n(gSe,"A",{href:!0});var _Ft=s(qz);par=r(_Ft,"WavLMForXVector"),_Ft.forEach(t),_ar=r(gSe," (WavLM model)"),gSe.forEach(t),ll.forEach(t),bar=i(ba),TM=n(ba,"P",{});var hSe=s(TM);Far=r(hSe,"The model is set in evaluation mode by default using "),dbe=n(hSe,"CODE",{});var bFt=s(dbe);Tar=r(bFt,"model.eval()"),bFt.forEach(t),Mar=r(hSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cbe=n(hSe,"CODE",{});var vFt=s(cbe);Ear=r(vFt,"model.train()"),vFt.forEach(t),hSe.forEach(t),Car=i(ba),T(MM.$$.fragment,ba),ba.forEach(t),sl.forEach(t),gje=i(m),wd=n(m,"H2",{class:!0});var bGe=s(wd);EM=n(bGe,"A",{id:!0,class:!0,href:!0});var FFt=s(EM);mbe=n(FFt,"SPAN",{});var TFt=s(mbe);T(G8.$$.fragment,TFt),TFt.forEach(t),FFt.forEach(t),war=i(bGe),fbe=n(bGe,"SPAN",{});var MFt=s(fbe);Aar=r(MFt,"AutoModelForMaskedImageModeling"),MFt.forEach(t),bGe.forEach(t),hje=i(m),Wo=n(m,"DIV",{class:!0});var il=s(Wo);T(O8.$$.fragment,il),yar=i(il),Ad=n(il,"P",{});var lee=s(Ad);Lar=r(lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),jz=n(lee,"A",{href:!0});var EFt=s(jz);xar=r(EFt,"from_pretrained()"),EFt.forEach(t),$ar=r(lee," class method or the "),Dz=n(lee,"A",{href:!0});var CFt=s(Dz);kar=r(CFt,"from_config()"),CFt.forEach(t),Sar=r(lee,` class
method.`),lee.forEach(t),Rar=i(il),V8=n(il,"P",{});var vGe=s(V8);Par=r(vGe,"This class cannot be instantiated directly using "),gbe=n(vGe,"CODE",{});var wFt=s(gbe);Bar=r(wFt,"__init__()"),wFt.forEach(t),Iar=r(vGe," (throws an error)."),vGe.forEach(t),Nar=i(il),Mt=n(il,"DIV",{class:!0});var bA=s(Mt);T(X8.$$.fragment,bA),qar=i(bA),hbe=n(bA,"P",{});var AFt=s(hbe);jar=r(AFt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),AFt.forEach(t),Dar=i(bA),yd=n(bA,"P",{});var iee=s(yd);Gar=r(iee,`Note:
Loading a model from its configuration file does `),ube=n(iee,"STRONG",{});var yFt=s(ube);Oar=r(yFt,"not"),yFt.forEach(t),Var=r(iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=n(iee,"A",{href:!0});var LFt=s(Gz);Xar=r(LFt,"from_pretrained()"),LFt.forEach(t),zar=r(iee," to load the model weights."),iee.forEach(t),War=i(bA),T(CM.$$.fragment,bA),bA.forEach(t),Qar=i(il),uo=n(il,"DIV",{class:!0});var va=s(uo);T(z8.$$.fragment,va),Har=i(va),pbe=n(va,"P",{});var xFt=s(pbe);Uar=r(xFt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),xFt.forEach(t),Jar=i(va),Wa=n(va,"P",{});var vA=s(Wa);Yar=r(vA,"The model class to instantiate is selected based on the "),_be=n(vA,"CODE",{});var $Ft=s(_be);Kar=r($Ft,"model_type"),$Ft.forEach(t),Zar=r(vA,` property of the config object (either
passed as an argument or loaded from `),bbe=n(vA,"CODE",{});var kFt=s(bbe);enr=r(kFt,"pretrained_model_name_or_path"),kFt.forEach(t),onr=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vbe=n(vA,"CODE",{});var SFt=s(vbe);rnr=r(SFt,"pretrained_model_name_or_path"),SFt.forEach(t),tnr=r(vA,":"),vA.forEach(t),anr=i(va),Ld=n(va,"UL",{});var dee=s(Ld);wM=n(dee,"LI",{});var uSe=s(wM);Fbe=n(uSe,"STRONG",{});var RFt=s(Fbe);nnr=r(RFt,"deit"),RFt.forEach(t),snr=r(uSe," \u2014 "),Oz=n(uSe,"A",{href:!0});var PFt=s(Oz);lnr=r(PFt,"DeiTForMaskedImageModeling"),PFt.forEach(t),inr=r(uSe," (DeiT model)"),uSe.forEach(t),dnr=i(dee),AM=n(dee,"LI",{});var pSe=s(AM);Tbe=n(pSe,"STRONG",{});var BFt=s(Tbe);cnr=r(BFt,"swin"),BFt.forEach(t),mnr=r(pSe," \u2014 "),Vz=n(pSe,"A",{href:!0});var IFt=s(Vz);fnr=r(IFt,"SwinForMaskedImageModeling"),IFt.forEach(t),gnr=r(pSe," (Swin model)"),pSe.forEach(t),hnr=i(dee),yM=n(dee,"LI",{});var _Se=s(yM);Mbe=n(_Se,"STRONG",{});var NFt=s(Mbe);unr=r(NFt,"vit"),NFt.forEach(t),pnr=r(_Se," \u2014 "),Xz=n(_Se,"A",{href:!0});var qFt=s(Xz);_nr=r(qFt,"ViTForMaskedImageModeling"),qFt.forEach(t),bnr=r(_Se," (ViT model)"),_Se.forEach(t),dee.forEach(t),vnr=i(va),LM=n(va,"P",{});var bSe=s(LM);Fnr=r(bSe,"The model is set in evaluation mode by default using "),Ebe=n(bSe,"CODE",{});var jFt=s(Ebe);Tnr=r(jFt,"model.eval()"),jFt.forEach(t),Mnr=r(bSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cbe=n(bSe,"CODE",{});var DFt=s(Cbe);Enr=r(DFt,"model.train()"),DFt.forEach(t),bSe.forEach(t),Cnr=i(va),T(xM.$$.fragment,va),va.forEach(t),il.forEach(t),uje=i(m),xd=n(m,"H2",{class:!0});var FGe=s(xd);$M=n(FGe,"A",{id:!0,class:!0,href:!0});var GFt=s($M);wbe=n(GFt,"SPAN",{});var OFt=s(wbe);T(W8.$$.fragment,OFt),OFt.forEach(t),GFt.forEach(t),wnr=i(FGe),Abe=n(FGe,"SPAN",{});var VFt=s(Abe);Anr=r(VFt,"AutoModelForObjectDetection"),VFt.forEach(t),FGe.forEach(t),pje=i(m),Qo=n(m,"DIV",{class:!0});var dl=s(Qo);T(Q8.$$.fragment,dl),ynr=i(dl),$d=n(dl,"P",{});var cee=s($d);Lnr=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),zz=n(cee,"A",{href:!0});var XFt=s(zz);xnr=r(XFt,"from_pretrained()"),XFt.forEach(t),$nr=r(cee," class method or the "),Wz=n(cee,"A",{href:!0});var zFt=s(Wz);knr=r(zFt,"from_config()"),zFt.forEach(t),Snr=r(cee,` class
method.`),cee.forEach(t),Rnr=i(dl),H8=n(dl,"P",{});var TGe=s(H8);Pnr=r(TGe,"This class cannot be instantiated directly using "),ybe=n(TGe,"CODE",{});var WFt=s(ybe);Bnr=r(WFt,"__init__()"),WFt.forEach(t),Inr=r(TGe," (throws an error)."),TGe.forEach(t),Nnr=i(dl),Et=n(dl,"DIV",{class:!0});var FA=s(Et);T(U8.$$.fragment,FA),qnr=i(FA),Lbe=n(FA,"P",{});var QFt=s(Lbe);jnr=r(QFt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),QFt.forEach(t),Dnr=i(FA),kd=n(FA,"P",{});var mee=s(kd);Gnr=r(mee,`Note:
Loading a model from its configuration file does `),xbe=n(mee,"STRONG",{});var HFt=s(xbe);Onr=r(HFt,"not"),HFt.forEach(t),Vnr=r(mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=n(mee,"A",{href:!0});var UFt=s(Qz);Xnr=r(UFt,"from_pretrained()"),UFt.forEach(t),znr=r(mee," to load the model weights."),mee.forEach(t),Wnr=i(FA),T(kM.$$.fragment,FA),FA.forEach(t),Qnr=i(dl),po=n(dl,"DIV",{class:!0});var Fa=s(po);T(J8.$$.fragment,Fa),Hnr=i(Fa),$be=n(Fa,"P",{});var JFt=s($be);Unr=r(JFt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),JFt.forEach(t),Jnr=i(Fa),Qa=n(Fa,"P",{});var TA=s(Qa);Ynr=r(TA,"The model class to instantiate is selected based on the "),kbe=n(TA,"CODE",{});var YFt=s(kbe);Knr=r(YFt,"model_type"),YFt.forEach(t),Znr=r(TA,` property of the config object (either
passed as an argument or loaded from `),Sbe=n(TA,"CODE",{});var KFt=s(Sbe);esr=r(KFt,"pretrained_model_name_or_path"),KFt.forEach(t),osr=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rbe=n(TA,"CODE",{});var ZFt=s(Rbe);rsr=r(ZFt,"pretrained_model_name_or_path"),ZFt.forEach(t),tsr=r(TA,":"),TA.forEach(t),asr=i(Fa),Y8=n(Fa,"UL",{});var MGe=s(Y8);SM=n(MGe,"LI",{});var vSe=s(SM);Pbe=n(vSe,"STRONG",{});var e1t=s(Pbe);nsr=r(e1t,"detr"),e1t.forEach(t),ssr=r(vSe," \u2014 "),Hz=n(vSe,"A",{href:!0});var o1t=s(Hz);lsr=r(o1t,"DetrForObjectDetection"),o1t.forEach(t),isr=r(vSe," (DETR model)"),vSe.forEach(t),dsr=i(MGe),RM=n(MGe,"LI",{});var FSe=s(RM);Bbe=n(FSe,"STRONG",{});var r1t=s(Bbe);csr=r(r1t,"yolos"),r1t.forEach(t),msr=r(FSe," \u2014 "),Uz=n(FSe,"A",{href:!0});var t1t=s(Uz);fsr=r(t1t,"YolosForObjectDetection"),t1t.forEach(t),gsr=r(FSe," (YOLOS model)"),FSe.forEach(t),MGe.forEach(t),hsr=i(Fa),PM=n(Fa,"P",{});var TSe=s(PM);usr=r(TSe,"The model is set in evaluation mode by default using "),Ibe=n(TSe,"CODE",{});var a1t=s(Ibe);psr=r(a1t,"model.eval()"),a1t.forEach(t),_sr=r(TSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nbe=n(TSe,"CODE",{});var n1t=s(Nbe);bsr=r(n1t,"model.train()"),n1t.forEach(t),TSe.forEach(t),vsr=i(Fa),T(BM.$$.fragment,Fa),Fa.forEach(t),dl.forEach(t),_je=i(m),Sd=n(m,"H2",{class:!0});var EGe=s(Sd);IM=n(EGe,"A",{id:!0,class:!0,href:!0});var s1t=s(IM);qbe=n(s1t,"SPAN",{});var l1t=s(qbe);T(K8.$$.fragment,l1t),l1t.forEach(t),s1t.forEach(t),Fsr=i(EGe),jbe=n(EGe,"SPAN",{});var i1t=s(jbe);Tsr=r(i1t,"AutoModelForImageSegmentation"),i1t.forEach(t),EGe.forEach(t),bje=i(m),Ho=n(m,"DIV",{class:!0});var cl=s(Ho);T(Z8.$$.fragment,cl),Msr=i(cl),Rd=n(cl,"P",{});var fee=s(Rd);Esr=r(fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Jz=n(fee,"A",{href:!0});var d1t=s(Jz);Csr=r(d1t,"from_pretrained()"),d1t.forEach(t),wsr=r(fee," class method or the "),Yz=n(fee,"A",{href:!0});var c1t=s(Yz);Asr=r(c1t,"from_config()"),c1t.forEach(t),ysr=r(fee,` class
method.`),fee.forEach(t),Lsr=i(cl),e7=n(cl,"P",{});var CGe=s(e7);xsr=r(CGe,"This class cannot be instantiated directly using "),Dbe=n(CGe,"CODE",{});var m1t=s(Dbe);$sr=r(m1t,"__init__()"),m1t.forEach(t),ksr=r(CGe," (throws an error)."),CGe.forEach(t),Ssr=i(cl),Ct=n(cl,"DIV",{class:!0});var MA=s(Ct);T(o7.$$.fragment,MA),Rsr=i(MA),Gbe=n(MA,"P",{});var f1t=s(Gbe);Psr=r(f1t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),f1t.forEach(t),Bsr=i(MA),Pd=n(MA,"P",{});var gee=s(Pd);Isr=r(gee,`Note:
Loading a model from its configuration file does `),Obe=n(gee,"STRONG",{});var g1t=s(Obe);Nsr=r(g1t,"not"),g1t.forEach(t),qsr=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kz=n(gee,"A",{href:!0});var h1t=s(Kz);jsr=r(h1t,"from_pretrained()"),h1t.forEach(t),Dsr=r(gee," to load the model weights."),gee.forEach(t),Gsr=i(MA),T(NM.$$.fragment,MA),MA.forEach(t),Osr=i(cl),_o=n(cl,"DIV",{class:!0});var Ta=s(_o);T(r7.$$.fragment,Ta),Vsr=i(Ta),Vbe=n(Ta,"P",{});var u1t=s(Vbe);Xsr=r(u1t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),u1t.forEach(t),zsr=i(Ta),Ha=n(Ta,"P",{});var EA=s(Ha);Wsr=r(EA,"The model class to instantiate is selected based on the "),Xbe=n(EA,"CODE",{});var p1t=s(Xbe);Qsr=r(p1t,"model_type"),p1t.forEach(t),Hsr=r(EA,` property of the config object (either
passed as an argument or loaded from `),zbe=n(EA,"CODE",{});var _1t=s(zbe);Usr=r(_1t,"pretrained_model_name_or_path"),_1t.forEach(t),Jsr=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wbe=n(EA,"CODE",{});var b1t=s(Wbe);Ysr=r(b1t,"pretrained_model_name_or_path"),b1t.forEach(t),Ksr=r(EA,":"),EA.forEach(t),Zsr=i(Ta),Qbe=n(Ta,"UL",{});var v1t=s(Qbe);qM=n(v1t,"LI",{});var MSe=s(qM);Hbe=n(MSe,"STRONG",{});var F1t=s(Hbe);elr=r(F1t,"detr"),F1t.forEach(t),olr=r(MSe," \u2014 "),Zz=n(MSe,"A",{href:!0});var T1t=s(Zz);rlr=r(T1t,"DetrForSegmentation"),T1t.forEach(t),tlr=r(MSe," (DETR model)"),MSe.forEach(t),v1t.forEach(t),alr=i(Ta),jM=n(Ta,"P",{});var ESe=s(jM);nlr=r(ESe,"The model is set in evaluation mode by default using "),Ube=n(ESe,"CODE",{});var M1t=s(Ube);slr=r(M1t,"model.eval()"),M1t.forEach(t),llr=r(ESe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jbe=n(ESe,"CODE",{});var E1t=s(Jbe);ilr=r(E1t,"model.train()"),E1t.forEach(t),ESe.forEach(t),dlr=i(Ta),T(DM.$$.fragment,Ta),Ta.forEach(t),cl.forEach(t),vje=i(m),Bd=n(m,"H2",{class:!0});var wGe=s(Bd);GM=n(wGe,"A",{id:!0,class:!0,href:!0});var C1t=s(GM);Ybe=n(C1t,"SPAN",{});var w1t=s(Ybe);T(t7.$$.fragment,w1t),w1t.forEach(t),C1t.forEach(t),clr=i(wGe),Kbe=n(wGe,"SPAN",{});var A1t=s(Kbe);mlr=r(A1t,"AutoModelForSemanticSegmentation"),A1t.forEach(t),wGe.forEach(t),Fje=i(m),Uo=n(m,"DIV",{class:!0});var ml=s(Uo);T(a7.$$.fragment,ml),flr=i(ml),Id=n(ml,"P",{});var hee=s(Id);glr=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),eW=n(hee,"A",{href:!0});var y1t=s(eW);hlr=r(y1t,"from_pretrained()"),y1t.forEach(t),ulr=r(hee," class method or the "),oW=n(hee,"A",{href:!0});var L1t=s(oW);plr=r(L1t,"from_config()"),L1t.forEach(t),_lr=r(hee,` class
method.`),hee.forEach(t),blr=i(ml),n7=n(ml,"P",{});var AGe=s(n7);vlr=r(AGe,"This class cannot be instantiated directly using "),Zbe=n(AGe,"CODE",{});var x1t=s(Zbe);Flr=r(x1t,"__init__()"),x1t.forEach(t),Tlr=r(AGe," (throws an error)."),AGe.forEach(t),Mlr=i(ml),wt=n(ml,"DIV",{class:!0});var CA=s(wt);T(s7.$$.fragment,CA),Elr=i(CA),e2e=n(CA,"P",{});var $1t=s(e2e);Clr=r($1t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),$1t.forEach(t),wlr=i(CA),Nd=n(CA,"P",{});var uee=s(Nd);Alr=r(uee,`Note:
Loading a model from its configuration file does `),o2e=n(uee,"STRONG",{});var k1t=s(o2e);ylr=r(k1t,"not"),k1t.forEach(t),Llr=r(uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=n(uee,"A",{href:!0});var S1t=s(rW);xlr=r(S1t,"from_pretrained()"),S1t.forEach(t),$lr=r(uee," to load the model weights."),uee.forEach(t),klr=i(CA),T(OM.$$.fragment,CA),CA.forEach(t),Slr=i(ml),bo=n(ml,"DIV",{class:!0});var Ma=s(bo);T(l7.$$.fragment,Ma),Rlr=i(Ma),r2e=n(Ma,"P",{});var R1t=s(r2e);Plr=r(R1t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),R1t.forEach(t),Blr=i(Ma),Ua=n(Ma,"P",{});var wA=s(Ua);Ilr=r(wA,"The model class to instantiate is selected based on the "),t2e=n(wA,"CODE",{});var P1t=s(t2e);Nlr=r(P1t,"model_type"),P1t.forEach(t),qlr=r(wA,` property of the config object (either
passed as an argument or loaded from `),a2e=n(wA,"CODE",{});var B1t=s(a2e);jlr=r(B1t,"pretrained_model_name_or_path"),B1t.forEach(t),Dlr=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n2e=n(wA,"CODE",{});var I1t=s(n2e);Glr=r(I1t,"pretrained_model_name_or_path"),I1t.forEach(t),Olr=r(wA,":"),wA.forEach(t),Vlr=i(Ma),Ja=n(Ma,"UL",{});var AA=s(Ja);VM=n(AA,"LI",{});var CSe=s(VM);s2e=n(CSe,"STRONG",{});var N1t=s(s2e);Xlr=r(N1t,"beit"),N1t.forEach(t),zlr=r(CSe," \u2014 "),tW=n(CSe,"A",{href:!0});var q1t=s(tW);Wlr=r(q1t,"BeitForSemanticSegmentation"),q1t.forEach(t),Qlr=r(CSe," (BEiT model)"),CSe.forEach(t),Hlr=i(AA),XM=n(AA,"LI",{});var wSe=s(XM);l2e=n(wSe,"STRONG",{});var j1t=s(l2e);Ulr=r(j1t,"data2vec-vision"),j1t.forEach(t),Jlr=r(wSe," \u2014 "),aW=n(wSe,"A",{href:!0});var D1t=s(aW);Ylr=r(D1t,"Data2VecVisionForSemanticSegmentation"),D1t.forEach(t),Klr=r(wSe," (Data2VecVision model)"),wSe.forEach(t),Zlr=i(AA),zM=n(AA,"LI",{});var ASe=s(zM);i2e=n(ASe,"STRONG",{});var G1t=s(i2e);eir=r(G1t,"dpt"),G1t.forEach(t),oir=r(ASe," \u2014 "),nW=n(ASe,"A",{href:!0});var O1t=s(nW);rir=r(O1t,"DPTForSemanticSegmentation"),O1t.forEach(t),tir=r(ASe," (DPT model)"),ASe.forEach(t),air=i(AA),WM=n(AA,"LI",{});var ySe=s(WM);d2e=n(ySe,"STRONG",{});var V1t=s(d2e);nir=r(V1t,"segformer"),V1t.forEach(t),sir=r(ySe," \u2014 "),sW=n(ySe,"A",{href:!0});var X1t=s(sW);lir=r(X1t,"SegformerForSemanticSegmentation"),X1t.forEach(t),iir=r(ySe," (SegFormer model)"),ySe.forEach(t),AA.forEach(t),dir=i(Ma),QM=n(Ma,"P",{});var LSe=s(QM);cir=r(LSe,"The model is set in evaluation mode by default using "),c2e=n(LSe,"CODE",{});var z1t=s(c2e);mir=r(z1t,"model.eval()"),z1t.forEach(t),fir=r(LSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m2e=n(LSe,"CODE",{});var W1t=s(m2e);gir=r(W1t,"model.train()"),W1t.forEach(t),LSe.forEach(t),hir=i(Ma),T(HM.$$.fragment,Ma),Ma.forEach(t),ml.forEach(t),Tje=i(m),qd=n(m,"H2",{class:!0});var yGe=s(qd);UM=n(yGe,"A",{id:!0,class:!0,href:!0});var Q1t=s(UM);f2e=n(Q1t,"SPAN",{});var H1t=s(f2e);T(i7.$$.fragment,H1t),H1t.forEach(t),Q1t.forEach(t),uir=i(yGe),g2e=n(yGe,"SPAN",{});var U1t=s(g2e);pir=r(U1t,"AutoModelForInstanceSegmentation"),U1t.forEach(t),yGe.forEach(t),Mje=i(m),Jo=n(m,"DIV",{class:!0});var fl=s(Jo);T(d7.$$.fragment,fl),_ir=i(fl),jd=n(fl,"P",{});var pee=s(jd);bir=r(pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),lW=n(pee,"A",{href:!0});var J1t=s(lW);vir=r(J1t,"from_pretrained()"),J1t.forEach(t),Fir=r(pee," class method or the "),iW=n(pee,"A",{href:!0});var Y1t=s(iW);Tir=r(Y1t,"from_config()"),Y1t.forEach(t),Mir=r(pee,` class
method.`),pee.forEach(t),Eir=i(fl),c7=n(fl,"P",{});var LGe=s(c7);Cir=r(LGe,"This class cannot be instantiated directly using "),h2e=n(LGe,"CODE",{});var K1t=s(h2e);wir=r(K1t,"__init__()"),K1t.forEach(t),Air=r(LGe," (throws an error)."),LGe.forEach(t),yir=i(fl),At=n(fl,"DIV",{class:!0});var yA=s(At);T(m7.$$.fragment,yA),Lir=i(yA),u2e=n(yA,"P",{});var Z1t=s(u2e);xir=r(Z1t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Z1t.forEach(t),$ir=i(yA),Dd=n(yA,"P",{});var _ee=s(Dd);kir=r(_ee,`Note:
Loading a model from its configuration file does `),p2e=n(_ee,"STRONG",{});var eTt=s(p2e);Sir=r(eTt,"not"),eTt.forEach(t),Rir=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=n(_ee,"A",{href:!0});var oTt=s(dW);Pir=r(oTt,"from_pretrained()"),oTt.forEach(t),Bir=r(_ee," to load the model weights."),_ee.forEach(t),Iir=i(yA),T(JM.$$.fragment,yA),yA.forEach(t),Nir=i(fl),vo=n(fl,"DIV",{class:!0});var Ea=s(vo);T(f7.$$.fragment,Ea),qir=i(Ea),_2e=n(Ea,"P",{});var rTt=s(_2e);jir=r(rTt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),rTt.forEach(t),Dir=i(Ea),Ya=n(Ea,"P",{});var LA=s(Ya);Gir=r(LA,"The model class to instantiate is selected based on the "),b2e=n(LA,"CODE",{});var tTt=s(b2e);Oir=r(tTt,"model_type"),tTt.forEach(t),Vir=r(LA,` property of the config object (either
passed as an argument or loaded from `),v2e=n(LA,"CODE",{});var aTt=s(v2e);Xir=r(aTt,"pretrained_model_name_or_path"),aTt.forEach(t),zir=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F2e=n(LA,"CODE",{});var nTt=s(F2e);Wir=r(nTt,"pretrained_model_name_or_path"),nTt.forEach(t),Qir=r(LA,":"),LA.forEach(t),Hir=i(Ea),T2e=n(Ea,"UL",{});var sTt=s(T2e);YM=n(sTt,"LI",{});var xSe=s(YM);M2e=n(xSe,"STRONG",{});var lTt=s(M2e);Uir=r(lTt,"maskformer"),lTt.forEach(t),Jir=r(xSe," \u2014 "),cW=n(xSe,"A",{href:!0});var iTt=s(cW);Yir=r(iTt,"MaskFormerForInstanceSegmentation"),iTt.forEach(t),Kir=r(xSe," (MaskFormer model)"),xSe.forEach(t),sTt.forEach(t),Zir=i(Ea),KM=n(Ea,"P",{});var $Se=s(KM);edr=r($Se,"The model is set in evaluation mode by default using "),E2e=n($Se,"CODE",{});var dTt=s(E2e);odr=r(dTt,"model.eval()"),dTt.forEach(t),rdr=r($Se,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C2e=n($Se,"CODE",{});var cTt=s(C2e);tdr=r(cTt,"model.train()"),cTt.forEach(t),$Se.forEach(t),adr=i(Ea),T(ZM.$$.fragment,Ea),Ea.forEach(t),fl.forEach(t),Eje=i(m),Gd=n(m,"H2",{class:!0});var xGe=s(Gd);e4=n(xGe,"A",{id:!0,class:!0,href:!0});var mTt=s(e4);w2e=n(mTt,"SPAN",{});var fTt=s(w2e);T(g7.$$.fragment,fTt),fTt.forEach(t),mTt.forEach(t),ndr=i(xGe),A2e=n(xGe,"SPAN",{});var gTt=s(A2e);sdr=r(gTt,"TFAutoModel"),gTt.forEach(t),xGe.forEach(t),Cje=i(m),Yo=n(m,"DIV",{class:!0});var gl=s(Yo);T(h7.$$.fragment,gl),ldr=i(gl),Od=n(gl,"P",{});var bee=s(Od);idr=r(bee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mW=n(bee,"A",{href:!0});var hTt=s(mW);ddr=r(hTt,"from_pretrained()"),hTt.forEach(t),cdr=r(bee," class method or the "),fW=n(bee,"A",{href:!0});var uTt=s(fW);mdr=r(uTt,"from_config()"),uTt.forEach(t),fdr=r(bee,` class
method.`),bee.forEach(t),gdr=i(gl),u7=n(gl,"P",{});var $Ge=s(u7);hdr=r($Ge,"This class cannot be instantiated directly using "),y2e=n($Ge,"CODE",{});var pTt=s(y2e);udr=r(pTt,"__init__()"),pTt.forEach(t),pdr=r($Ge," (throws an error)."),$Ge.forEach(t),_dr=i(gl),yt=n(gl,"DIV",{class:!0});var xA=s(yt);T(p7.$$.fragment,xA),bdr=i(xA),L2e=n(xA,"P",{});var _Tt=s(L2e);vdr=r(_Tt,"Instantiates one of the base model classes of the library from a configuration."),_Tt.forEach(t),Fdr=i(xA),Vd=n(xA,"P",{});var vee=s(Vd);Tdr=r(vee,`Note:
Loading a model from its configuration file does `),x2e=n(vee,"STRONG",{});var bTt=s(x2e);Mdr=r(bTt,"not"),bTt.forEach(t),Edr=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=n(vee,"A",{href:!0});var vTt=s(gW);Cdr=r(vTt,"from_pretrained()"),vTt.forEach(t),wdr=r(vee," to load the model weights."),vee.forEach(t),Adr=i(xA),T(o4.$$.fragment,xA),xA.forEach(t),ydr=i(gl),wr=n(gl,"DIV",{class:!0});var hl=s(wr);T(_7.$$.fragment,hl),Ldr=i(hl),$2e=n(hl,"P",{});var FTt=s($2e);xdr=r(FTt,"Instantiate one of the base model classes of the library from a pretrained model."),FTt.forEach(t),$dr=i(hl),Ka=n(hl,"P",{});var $A=s(Ka);kdr=r($A,"The model class to instantiate is selected based on the "),k2e=n($A,"CODE",{});var TTt=s(k2e);Sdr=r(TTt,"model_type"),TTt.forEach(t),Rdr=r($A,` property of the config object (either
passed as an argument or loaded from `),S2e=n($A,"CODE",{});var MTt=s(S2e);Pdr=r(MTt,"pretrained_model_name_or_path"),MTt.forEach(t),Bdr=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R2e=n($A,"CODE",{});var ETt=s(R2e);Idr=r(ETt,"pretrained_model_name_or_path"),ETt.forEach(t),Ndr=r($A,":"),$A.forEach(t),qdr=i(hl),q=n(hl,"UL",{});var D=s(q);r4=n(D,"LI",{});var kSe=s(r4);P2e=n(kSe,"STRONG",{});var CTt=s(P2e);jdr=r(CTt,"albert"),CTt.forEach(t),Ddr=r(kSe," \u2014 "),hW=n(kSe,"A",{href:!0});var wTt=s(hW);Gdr=r(wTt,"TFAlbertModel"),wTt.forEach(t),Odr=r(kSe," (ALBERT model)"),kSe.forEach(t),Vdr=i(D),t4=n(D,"LI",{});var SSe=s(t4);B2e=n(SSe,"STRONG",{});var ATt=s(B2e);Xdr=r(ATt,"bart"),ATt.forEach(t),zdr=r(SSe," \u2014 "),uW=n(SSe,"A",{href:!0});var yTt=s(uW);Wdr=r(yTt,"TFBartModel"),yTt.forEach(t),Qdr=r(SSe," (BART model)"),SSe.forEach(t),Hdr=i(D),a4=n(D,"LI",{});var RSe=s(a4);I2e=n(RSe,"STRONG",{});var LTt=s(I2e);Udr=r(LTt,"bert"),LTt.forEach(t),Jdr=r(RSe," \u2014 "),pW=n(RSe,"A",{href:!0});var xTt=s(pW);Ydr=r(xTt,"TFBertModel"),xTt.forEach(t),Kdr=r(RSe," (BERT model)"),RSe.forEach(t),Zdr=i(D),n4=n(D,"LI",{});var PSe=s(n4);N2e=n(PSe,"STRONG",{});var $Tt=s(N2e);ecr=r($Tt,"blenderbot"),$Tt.forEach(t),ocr=r(PSe," \u2014 "),_W=n(PSe,"A",{href:!0});var kTt=s(_W);rcr=r(kTt,"TFBlenderbotModel"),kTt.forEach(t),tcr=r(PSe," (Blenderbot model)"),PSe.forEach(t),acr=i(D),s4=n(D,"LI",{});var BSe=s(s4);q2e=n(BSe,"STRONG",{});var STt=s(q2e);ncr=r(STt,"blenderbot-small"),STt.forEach(t),scr=r(BSe," \u2014 "),bW=n(BSe,"A",{href:!0});var RTt=s(bW);lcr=r(RTt,"TFBlenderbotSmallModel"),RTt.forEach(t),icr=r(BSe," (BlenderbotSmall model)"),BSe.forEach(t),dcr=i(D),l4=n(D,"LI",{});var ISe=s(l4);j2e=n(ISe,"STRONG",{});var PTt=s(j2e);ccr=r(PTt,"camembert"),PTt.forEach(t),mcr=r(ISe," \u2014 "),vW=n(ISe,"A",{href:!0});var BTt=s(vW);fcr=r(BTt,"TFCamembertModel"),BTt.forEach(t),gcr=r(ISe," (CamemBERT model)"),ISe.forEach(t),hcr=i(D),i4=n(D,"LI",{});var NSe=s(i4);D2e=n(NSe,"STRONG",{});var ITt=s(D2e);ucr=r(ITt,"clip"),ITt.forEach(t),pcr=r(NSe," \u2014 "),FW=n(NSe,"A",{href:!0});var NTt=s(FW);_cr=r(NTt,"TFCLIPModel"),NTt.forEach(t),bcr=r(NSe," (CLIP model)"),NSe.forEach(t),vcr=i(D),d4=n(D,"LI",{});var qSe=s(d4);G2e=n(qSe,"STRONG",{});var qTt=s(G2e);Fcr=r(qTt,"convbert"),qTt.forEach(t),Tcr=r(qSe," \u2014 "),TW=n(qSe,"A",{href:!0});var jTt=s(TW);Mcr=r(jTt,"TFConvBertModel"),jTt.forEach(t),Ecr=r(qSe," (ConvBERT model)"),qSe.forEach(t),Ccr=i(D),c4=n(D,"LI",{});var jSe=s(c4);O2e=n(jSe,"STRONG",{});var DTt=s(O2e);wcr=r(DTt,"convnext"),DTt.forEach(t),Acr=r(jSe," \u2014 "),MW=n(jSe,"A",{href:!0});var GTt=s(MW);ycr=r(GTt,"TFConvNextModel"),GTt.forEach(t),Lcr=r(jSe," (ConvNext model)"),jSe.forEach(t),xcr=i(D),m4=n(D,"LI",{});var DSe=s(m4);V2e=n(DSe,"STRONG",{});var OTt=s(V2e);$cr=r(OTt,"ctrl"),OTt.forEach(t),kcr=r(DSe," \u2014 "),EW=n(DSe,"A",{href:!0});var VTt=s(EW);Scr=r(VTt,"TFCTRLModel"),VTt.forEach(t),Rcr=r(DSe," (CTRL model)"),DSe.forEach(t),Pcr=i(D),f4=n(D,"LI",{});var GSe=s(f4);X2e=n(GSe,"STRONG",{});var XTt=s(X2e);Bcr=r(XTt,"data2vec-vision"),XTt.forEach(t),Icr=r(GSe," \u2014 "),CW=n(GSe,"A",{href:!0});var zTt=s(CW);Ncr=r(zTt,"TFData2VecVisionModel"),zTt.forEach(t),qcr=r(GSe," (Data2VecVision model)"),GSe.forEach(t),jcr=i(D),g4=n(D,"LI",{});var OSe=s(g4);z2e=n(OSe,"STRONG",{});var WTt=s(z2e);Dcr=r(WTt,"deberta"),WTt.forEach(t),Gcr=r(OSe," \u2014 "),wW=n(OSe,"A",{href:!0});var QTt=s(wW);Ocr=r(QTt,"TFDebertaModel"),QTt.forEach(t),Vcr=r(OSe," (DeBERTa model)"),OSe.forEach(t),Xcr=i(D),h4=n(D,"LI",{});var VSe=s(h4);W2e=n(VSe,"STRONG",{});var HTt=s(W2e);zcr=r(HTt,"deberta-v2"),HTt.forEach(t),Wcr=r(VSe," \u2014 "),AW=n(VSe,"A",{href:!0});var UTt=s(AW);Qcr=r(UTt,"TFDebertaV2Model"),UTt.forEach(t),Hcr=r(VSe," (DeBERTa-v2 model)"),VSe.forEach(t),Ucr=i(D),u4=n(D,"LI",{});var XSe=s(u4);Q2e=n(XSe,"STRONG",{});var JTt=s(Q2e);Jcr=r(JTt,"distilbert"),JTt.forEach(t),Ycr=r(XSe," \u2014 "),yW=n(XSe,"A",{href:!0});var YTt=s(yW);Kcr=r(YTt,"TFDistilBertModel"),YTt.forEach(t),Zcr=r(XSe," (DistilBERT model)"),XSe.forEach(t),emr=i(D),p4=n(D,"LI",{});var zSe=s(p4);H2e=n(zSe,"STRONG",{});var KTt=s(H2e);omr=r(KTt,"dpr"),KTt.forEach(t),rmr=r(zSe," \u2014 "),LW=n(zSe,"A",{href:!0});var ZTt=s(LW);tmr=r(ZTt,"TFDPRQuestionEncoder"),ZTt.forEach(t),amr=r(zSe," (DPR model)"),zSe.forEach(t),nmr=i(D),_4=n(D,"LI",{});var WSe=s(_4);U2e=n(WSe,"STRONG",{});var eMt=s(U2e);smr=r(eMt,"electra"),eMt.forEach(t),lmr=r(WSe," \u2014 "),xW=n(WSe,"A",{href:!0});var oMt=s(xW);imr=r(oMt,"TFElectraModel"),oMt.forEach(t),dmr=r(WSe," (ELECTRA model)"),WSe.forEach(t),cmr=i(D),b4=n(D,"LI",{});var QSe=s(b4);J2e=n(QSe,"STRONG",{});var rMt=s(J2e);mmr=r(rMt,"flaubert"),rMt.forEach(t),fmr=r(QSe," \u2014 "),$W=n(QSe,"A",{href:!0});var tMt=s($W);gmr=r(tMt,"TFFlaubertModel"),tMt.forEach(t),hmr=r(QSe," (FlauBERT model)"),QSe.forEach(t),umr=i(D),Is=n(D,"LI",{});var U$=s(Is);Y2e=n(U$,"STRONG",{});var aMt=s(Y2e);pmr=r(aMt,"funnel"),aMt.forEach(t),_mr=r(U$," \u2014 "),kW=n(U$,"A",{href:!0});var nMt=s(kW);bmr=r(nMt,"TFFunnelModel"),nMt.forEach(t),vmr=r(U$," or "),SW=n(U$,"A",{href:!0});var sMt=s(SW);Fmr=r(sMt,"TFFunnelBaseModel"),sMt.forEach(t),Tmr=r(U$," (Funnel Transformer model)"),U$.forEach(t),Mmr=i(D),v4=n(D,"LI",{});var HSe=s(v4);K2e=n(HSe,"STRONG",{});var lMt=s(K2e);Emr=r(lMt,"gpt2"),lMt.forEach(t),Cmr=r(HSe," \u2014 "),RW=n(HSe,"A",{href:!0});var iMt=s(RW);wmr=r(iMt,"TFGPT2Model"),iMt.forEach(t),Amr=r(HSe," (OpenAI GPT-2 model)"),HSe.forEach(t),ymr=i(D),F4=n(D,"LI",{});var USe=s(F4);Z2e=n(USe,"STRONG",{});var dMt=s(Z2e);Lmr=r(dMt,"gptj"),dMt.forEach(t),xmr=r(USe," \u2014 "),PW=n(USe,"A",{href:!0});var cMt=s(PW);$mr=r(cMt,"TFGPTJModel"),cMt.forEach(t),kmr=r(USe," (GPT-J model)"),USe.forEach(t),Smr=i(D),T4=n(D,"LI",{});var JSe=s(T4);eve=n(JSe,"STRONG",{});var mMt=s(eve);Rmr=r(mMt,"hubert"),mMt.forEach(t),Pmr=r(JSe," \u2014 "),BW=n(JSe,"A",{href:!0});var fMt=s(BW);Bmr=r(fMt,"TFHubertModel"),fMt.forEach(t),Imr=r(JSe," (Hubert model)"),JSe.forEach(t),Nmr=i(D),M4=n(D,"LI",{});var YSe=s(M4);ove=n(YSe,"STRONG",{});var gMt=s(ove);qmr=r(gMt,"layoutlm"),gMt.forEach(t),jmr=r(YSe," \u2014 "),IW=n(YSe,"A",{href:!0});var hMt=s(IW);Dmr=r(hMt,"TFLayoutLMModel"),hMt.forEach(t),Gmr=r(YSe," (LayoutLM model)"),YSe.forEach(t),Omr=i(D),E4=n(D,"LI",{});var KSe=s(E4);rve=n(KSe,"STRONG",{});var uMt=s(rve);Vmr=r(uMt,"led"),uMt.forEach(t),Xmr=r(KSe," \u2014 "),NW=n(KSe,"A",{href:!0});var pMt=s(NW);zmr=r(pMt,"TFLEDModel"),pMt.forEach(t),Wmr=r(KSe," (LED model)"),KSe.forEach(t),Qmr=i(D),C4=n(D,"LI",{});var ZSe=s(C4);tve=n(ZSe,"STRONG",{});var _Mt=s(tve);Hmr=r(_Mt,"longformer"),_Mt.forEach(t),Umr=r(ZSe," \u2014 "),qW=n(ZSe,"A",{href:!0});var bMt=s(qW);Jmr=r(bMt,"TFLongformerModel"),bMt.forEach(t),Ymr=r(ZSe," (Longformer model)"),ZSe.forEach(t),Kmr=i(D),w4=n(D,"LI",{});var eRe=s(w4);ave=n(eRe,"STRONG",{});var vMt=s(ave);Zmr=r(vMt,"lxmert"),vMt.forEach(t),efr=r(eRe," \u2014 "),jW=n(eRe,"A",{href:!0});var FMt=s(jW);ofr=r(FMt,"TFLxmertModel"),FMt.forEach(t),rfr=r(eRe," (LXMERT model)"),eRe.forEach(t),tfr=i(D),A4=n(D,"LI",{});var oRe=s(A4);nve=n(oRe,"STRONG",{});var TMt=s(nve);afr=r(TMt,"marian"),TMt.forEach(t),nfr=r(oRe," \u2014 "),DW=n(oRe,"A",{href:!0});var MMt=s(DW);sfr=r(MMt,"TFMarianModel"),MMt.forEach(t),lfr=r(oRe," (Marian model)"),oRe.forEach(t),ifr=i(D),y4=n(D,"LI",{});var rRe=s(y4);sve=n(rRe,"STRONG",{});var EMt=s(sve);dfr=r(EMt,"mbart"),EMt.forEach(t),cfr=r(rRe," \u2014 "),GW=n(rRe,"A",{href:!0});var CMt=s(GW);mfr=r(CMt,"TFMBartModel"),CMt.forEach(t),ffr=r(rRe," (mBART model)"),rRe.forEach(t),gfr=i(D),L4=n(D,"LI",{});var tRe=s(L4);lve=n(tRe,"STRONG",{});var wMt=s(lve);hfr=r(wMt,"mobilebert"),wMt.forEach(t),ufr=r(tRe," \u2014 "),OW=n(tRe,"A",{href:!0});var AMt=s(OW);pfr=r(AMt,"TFMobileBertModel"),AMt.forEach(t),_fr=r(tRe," (MobileBERT model)"),tRe.forEach(t),bfr=i(D),x4=n(D,"LI",{});var aRe=s(x4);ive=n(aRe,"STRONG",{});var yMt=s(ive);vfr=r(yMt,"mpnet"),yMt.forEach(t),Ffr=r(aRe," \u2014 "),VW=n(aRe,"A",{href:!0});var LMt=s(VW);Tfr=r(LMt,"TFMPNetModel"),LMt.forEach(t),Mfr=r(aRe," (MPNet model)"),aRe.forEach(t),Efr=i(D),$4=n(D,"LI",{});var nRe=s($4);dve=n(nRe,"STRONG",{});var xMt=s(dve);Cfr=r(xMt,"mt5"),xMt.forEach(t),wfr=r(nRe," \u2014 "),XW=n(nRe,"A",{href:!0});var $Mt=s(XW);Afr=r($Mt,"TFMT5Model"),$Mt.forEach(t),yfr=r(nRe," (mT5 model)"),nRe.forEach(t),Lfr=i(D),k4=n(D,"LI",{});var sRe=s(k4);cve=n(sRe,"STRONG",{});var kMt=s(cve);xfr=r(kMt,"openai-gpt"),kMt.forEach(t),$fr=r(sRe," \u2014 "),zW=n(sRe,"A",{href:!0});var SMt=s(zW);kfr=r(SMt,"TFOpenAIGPTModel"),SMt.forEach(t),Sfr=r(sRe," (OpenAI GPT model)"),sRe.forEach(t),Rfr=i(D),S4=n(D,"LI",{});var lRe=s(S4);mve=n(lRe,"STRONG",{});var RMt=s(mve);Pfr=r(RMt,"opt"),RMt.forEach(t),Bfr=r(lRe," \u2014 "),WW=n(lRe,"A",{href:!0});var PMt=s(WW);Ifr=r(PMt,"TFOPTModel"),PMt.forEach(t),Nfr=r(lRe," (OPT model)"),lRe.forEach(t),qfr=i(D),R4=n(D,"LI",{});var iRe=s(R4);fve=n(iRe,"STRONG",{});var BMt=s(fve);jfr=r(BMt,"pegasus"),BMt.forEach(t),Dfr=r(iRe," \u2014 "),QW=n(iRe,"A",{href:!0});var IMt=s(QW);Gfr=r(IMt,"TFPegasusModel"),IMt.forEach(t),Ofr=r(iRe," (Pegasus model)"),iRe.forEach(t),Vfr=i(D),P4=n(D,"LI",{});var dRe=s(P4);gve=n(dRe,"STRONG",{});var NMt=s(gve);Xfr=r(NMt,"rembert"),NMt.forEach(t),zfr=r(dRe," \u2014 "),HW=n(dRe,"A",{href:!0});var qMt=s(HW);Wfr=r(qMt,"TFRemBertModel"),qMt.forEach(t),Qfr=r(dRe," (RemBERT model)"),dRe.forEach(t),Hfr=i(D),B4=n(D,"LI",{});var cRe=s(B4);hve=n(cRe,"STRONG",{});var jMt=s(hve);Ufr=r(jMt,"roberta"),jMt.forEach(t),Jfr=r(cRe," \u2014 "),UW=n(cRe,"A",{href:!0});var DMt=s(UW);Yfr=r(DMt,"TFRobertaModel"),DMt.forEach(t),Kfr=r(cRe," (RoBERTa model)"),cRe.forEach(t),Zfr=i(D),I4=n(D,"LI",{});var mRe=s(I4);uve=n(mRe,"STRONG",{});var GMt=s(uve);egr=r(GMt,"roformer"),GMt.forEach(t),ogr=r(mRe," \u2014 "),JW=n(mRe,"A",{href:!0});var OMt=s(JW);rgr=r(OMt,"TFRoFormerModel"),OMt.forEach(t),tgr=r(mRe," (RoFormer model)"),mRe.forEach(t),agr=i(D),N4=n(D,"LI",{});var fRe=s(N4);pve=n(fRe,"STRONG",{});var VMt=s(pve);ngr=r(VMt,"speech_to_text"),VMt.forEach(t),sgr=r(fRe," \u2014 "),YW=n(fRe,"A",{href:!0});var XMt=s(YW);lgr=r(XMt,"TFSpeech2TextModel"),XMt.forEach(t),igr=r(fRe," (Speech2Text model)"),fRe.forEach(t),dgr=i(D),q4=n(D,"LI",{});var gRe=s(q4);_ve=n(gRe,"STRONG",{});var zMt=s(_ve);cgr=r(zMt,"swin"),zMt.forEach(t),mgr=r(gRe," \u2014 "),KW=n(gRe,"A",{href:!0});var WMt=s(KW);fgr=r(WMt,"TFSwinModel"),WMt.forEach(t),ggr=r(gRe," (Swin model)"),gRe.forEach(t),hgr=i(D),j4=n(D,"LI",{});var hRe=s(j4);bve=n(hRe,"STRONG",{});var QMt=s(bve);ugr=r(QMt,"t5"),QMt.forEach(t),pgr=r(hRe," \u2014 "),ZW=n(hRe,"A",{href:!0});var HMt=s(ZW);_gr=r(HMt,"TFT5Model"),HMt.forEach(t),bgr=r(hRe," (T5 model)"),hRe.forEach(t),vgr=i(D),D4=n(D,"LI",{});var uRe=s(D4);vve=n(uRe,"STRONG",{});var UMt=s(vve);Fgr=r(UMt,"tapas"),UMt.forEach(t),Tgr=r(uRe," \u2014 "),eQ=n(uRe,"A",{href:!0});var JMt=s(eQ);Mgr=r(JMt,"TFTapasModel"),JMt.forEach(t),Egr=r(uRe," (TAPAS model)"),uRe.forEach(t),Cgr=i(D),G4=n(D,"LI",{});var pRe=s(G4);Fve=n(pRe,"STRONG",{});var YMt=s(Fve);wgr=r(YMt,"transfo-xl"),YMt.forEach(t),Agr=r(pRe," \u2014 "),oQ=n(pRe,"A",{href:!0});var KMt=s(oQ);ygr=r(KMt,"TFTransfoXLModel"),KMt.forEach(t),Lgr=r(pRe," (Transformer-XL model)"),pRe.forEach(t),xgr=i(D),O4=n(D,"LI",{});var _Re=s(O4);Tve=n(_Re,"STRONG",{});var ZMt=s(Tve);$gr=r(ZMt,"vit"),ZMt.forEach(t),kgr=r(_Re," \u2014 "),rQ=n(_Re,"A",{href:!0});var e4t=s(rQ);Sgr=r(e4t,"TFViTModel"),e4t.forEach(t),Rgr=r(_Re," (ViT model)"),_Re.forEach(t),Pgr=i(D),V4=n(D,"LI",{});var bRe=s(V4);Mve=n(bRe,"STRONG",{});var o4t=s(Mve);Bgr=r(o4t,"vit_mae"),o4t.forEach(t),Igr=r(bRe," \u2014 "),tQ=n(bRe,"A",{href:!0});var r4t=s(tQ);Ngr=r(r4t,"TFViTMAEModel"),r4t.forEach(t),qgr=r(bRe," (ViTMAE model)"),bRe.forEach(t),jgr=i(D),X4=n(D,"LI",{});var vRe=s(X4);Eve=n(vRe,"STRONG",{});var t4t=s(Eve);Dgr=r(t4t,"wav2vec2"),t4t.forEach(t),Ggr=r(vRe," \u2014 "),aQ=n(vRe,"A",{href:!0});var a4t=s(aQ);Ogr=r(a4t,"TFWav2Vec2Model"),a4t.forEach(t),Vgr=r(vRe," (Wav2Vec2 model)"),vRe.forEach(t),Xgr=i(D),z4=n(D,"LI",{});var FRe=s(z4);Cve=n(FRe,"STRONG",{});var n4t=s(Cve);zgr=r(n4t,"xlm"),n4t.forEach(t),Wgr=r(FRe," \u2014 "),nQ=n(FRe,"A",{href:!0});var s4t=s(nQ);Qgr=r(s4t,"TFXLMModel"),s4t.forEach(t),Hgr=r(FRe," (XLM model)"),FRe.forEach(t),Ugr=i(D),W4=n(D,"LI",{});var TRe=s(W4);wve=n(TRe,"STRONG",{});var l4t=s(wve);Jgr=r(l4t,"xlm-roberta"),l4t.forEach(t),Ygr=r(TRe," \u2014 "),sQ=n(TRe,"A",{href:!0});var i4t=s(sQ);Kgr=r(i4t,"TFXLMRobertaModel"),i4t.forEach(t),Zgr=r(TRe," (XLM-RoBERTa model)"),TRe.forEach(t),ehr=i(D),Q4=n(D,"LI",{});var MRe=s(Q4);Ave=n(MRe,"STRONG",{});var d4t=s(Ave);ohr=r(d4t,"xlnet"),d4t.forEach(t),rhr=r(MRe," \u2014 "),lQ=n(MRe,"A",{href:!0});var c4t=s(lQ);thr=r(c4t,"TFXLNetModel"),c4t.forEach(t),ahr=r(MRe," (XLNet model)"),MRe.forEach(t),D.forEach(t),nhr=i(hl),T(H4.$$.fragment,hl),hl.forEach(t),gl.forEach(t),wje=i(m),Xd=n(m,"H2",{class:!0});var kGe=s(Xd);U4=n(kGe,"A",{id:!0,class:!0,href:!0});var m4t=s(U4);yve=n(m4t,"SPAN",{});var f4t=s(yve);T(b7.$$.fragment,f4t),f4t.forEach(t),m4t.forEach(t),shr=i(kGe),Lve=n(kGe,"SPAN",{});var g4t=s(Lve);lhr=r(g4t,"TFAutoModelForPreTraining"),g4t.forEach(t),kGe.forEach(t),Aje=i(m),Ko=n(m,"DIV",{class:!0});var ul=s(Ko);T(v7.$$.fragment,ul),ihr=i(ul),zd=n(ul,"P",{});var Fee=s(zd);dhr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),iQ=n(Fee,"A",{href:!0});var h4t=s(iQ);chr=r(h4t,"from_pretrained()"),h4t.forEach(t),mhr=r(Fee," class method or the "),dQ=n(Fee,"A",{href:!0});var u4t=s(dQ);fhr=r(u4t,"from_config()"),u4t.forEach(t),ghr=r(Fee,` class
method.`),Fee.forEach(t),hhr=i(ul),F7=n(ul,"P",{});var SGe=s(F7);uhr=r(SGe,"This class cannot be instantiated directly using "),xve=n(SGe,"CODE",{});var p4t=s(xve);phr=r(p4t,"__init__()"),p4t.forEach(t),_hr=r(SGe," (throws an error)."),SGe.forEach(t),bhr=i(ul),Lt=n(ul,"DIV",{class:!0});var kA=s(Lt);T(T7.$$.fragment,kA),vhr=i(kA),$ve=n(kA,"P",{});var _4t=s($ve);Fhr=r(_4t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_4t.forEach(t),Thr=i(kA),Wd=n(kA,"P",{});var Tee=s(Wd);Mhr=r(Tee,`Note:
Loading a model from its configuration file does `),kve=n(Tee,"STRONG",{});var b4t=s(kve);Ehr=r(b4t,"not"),b4t.forEach(t),Chr=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),cQ=n(Tee,"A",{href:!0});var v4t=s(cQ);whr=r(v4t,"from_pretrained()"),v4t.forEach(t),Ahr=r(Tee," to load the model weights."),Tee.forEach(t),yhr=i(kA),T(J4.$$.fragment,kA),kA.forEach(t),Lhr=i(ul),Ar=n(ul,"DIV",{class:!0});var pl=s(Ar);T(M7.$$.fragment,pl),xhr=i(pl),Sve=n(pl,"P",{});var F4t=s(Sve);$hr=r(F4t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),F4t.forEach(t),khr=i(pl),Za=n(pl,"P",{});var SA=s(Za);Shr=r(SA,"The model class to instantiate is selected based on the "),Rve=n(SA,"CODE",{});var T4t=s(Rve);Rhr=r(T4t,"model_type"),T4t.forEach(t),Phr=r(SA,` property of the config object (either
passed as an argument or loaded from `),Pve=n(SA,"CODE",{});var M4t=s(Pve);Bhr=r(M4t,"pretrained_model_name_or_path"),M4t.forEach(t),Ihr=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=n(SA,"CODE",{});var E4t=s(Bve);Nhr=r(E4t,"pretrained_model_name_or_path"),E4t.forEach(t),qhr=r(SA,":"),SA.forEach(t),jhr=i(pl),se=n(pl,"UL",{});var le=s(se);Y4=n(le,"LI",{});var ERe=s(Y4);Ive=n(ERe,"STRONG",{});var C4t=s(Ive);Dhr=r(C4t,"albert"),C4t.forEach(t),Ghr=r(ERe," \u2014 "),mQ=n(ERe,"A",{href:!0});var w4t=s(mQ);Ohr=r(w4t,"TFAlbertForPreTraining"),w4t.forEach(t),Vhr=r(ERe," (ALBERT model)"),ERe.forEach(t),Xhr=i(le),K4=n(le,"LI",{});var CRe=s(K4);Nve=n(CRe,"STRONG",{});var A4t=s(Nve);zhr=r(A4t,"bart"),A4t.forEach(t),Whr=r(CRe," \u2014 "),fQ=n(CRe,"A",{href:!0});var y4t=s(fQ);Qhr=r(y4t,"TFBartForConditionalGeneration"),y4t.forEach(t),Hhr=r(CRe," (BART model)"),CRe.forEach(t),Uhr=i(le),Z4=n(le,"LI",{});var wRe=s(Z4);qve=n(wRe,"STRONG",{});var L4t=s(qve);Jhr=r(L4t,"bert"),L4t.forEach(t),Yhr=r(wRe," \u2014 "),gQ=n(wRe,"A",{href:!0});var x4t=s(gQ);Khr=r(x4t,"TFBertForPreTraining"),x4t.forEach(t),Zhr=r(wRe," (BERT model)"),wRe.forEach(t),eur=i(le),eE=n(le,"LI",{});var ARe=s(eE);jve=n(ARe,"STRONG",{});var $4t=s(jve);our=r($4t,"camembert"),$4t.forEach(t),rur=r(ARe," \u2014 "),hQ=n(ARe,"A",{href:!0});var k4t=s(hQ);tur=r(k4t,"TFCamembertForMaskedLM"),k4t.forEach(t),aur=r(ARe," (CamemBERT model)"),ARe.forEach(t),nur=i(le),oE=n(le,"LI",{});var yRe=s(oE);Dve=n(yRe,"STRONG",{});var S4t=s(Dve);sur=r(S4t,"ctrl"),S4t.forEach(t),lur=r(yRe," \u2014 "),uQ=n(yRe,"A",{href:!0});var R4t=s(uQ);iur=r(R4t,"TFCTRLLMHeadModel"),R4t.forEach(t),dur=r(yRe," (CTRL model)"),yRe.forEach(t),cur=i(le),rE=n(le,"LI",{});var LRe=s(rE);Gve=n(LRe,"STRONG",{});var P4t=s(Gve);mur=r(P4t,"distilbert"),P4t.forEach(t),fur=r(LRe," \u2014 "),pQ=n(LRe,"A",{href:!0});var B4t=s(pQ);gur=r(B4t,"TFDistilBertForMaskedLM"),B4t.forEach(t),hur=r(LRe," (DistilBERT model)"),LRe.forEach(t),uur=i(le),tE=n(le,"LI",{});var xRe=s(tE);Ove=n(xRe,"STRONG",{});var I4t=s(Ove);pur=r(I4t,"electra"),I4t.forEach(t),_ur=r(xRe," \u2014 "),_Q=n(xRe,"A",{href:!0});var N4t=s(_Q);bur=r(N4t,"TFElectraForPreTraining"),N4t.forEach(t),vur=r(xRe," (ELECTRA model)"),xRe.forEach(t),Fur=i(le),aE=n(le,"LI",{});var $Re=s(aE);Vve=n($Re,"STRONG",{});var q4t=s(Vve);Tur=r(q4t,"flaubert"),q4t.forEach(t),Mur=r($Re," \u2014 "),bQ=n($Re,"A",{href:!0});var j4t=s(bQ);Eur=r(j4t,"TFFlaubertWithLMHeadModel"),j4t.forEach(t),Cur=r($Re," (FlauBERT model)"),$Re.forEach(t),wur=i(le),nE=n(le,"LI",{});var kRe=s(nE);Xve=n(kRe,"STRONG",{});var D4t=s(Xve);Aur=r(D4t,"funnel"),D4t.forEach(t),yur=r(kRe," \u2014 "),vQ=n(kRe,"A",{href:!0});var G4t=s(vQ);Lur=r(G4t,"TFFunnelForPreTraining"),G4t.forEach(t),xur=r(kRe," (Funnel Transformer model)"),kRe.forEach(t),$ur=i(le),sE=n(le,"LI",{});var SRe=s(sE);zve=n(SRe,"STRONG",{});var O4t=s(zve);kur=r(O4t,"gpt2"),O4t.forEach(t),Sur=r(SRe," \u2014 "),FQ=n(SRe,"A",{href:!0});var V4t=s(FQ);Rur=r(V4t,"TFGPT2LMHeadModel"),V4t.forEach(t),Pur=r(SRe," (OpenAI GPT-2 model)"),SRe.forEach(t),Bur=i(le),lE=n(le,"LI",{});var RRe=s(lE);Wve=n(RRe,"STRONG",{});var X4t=s(Wve);Iur=r(X4t,"layoutlm"),X4t.forEach(t),Nur=r(RRe," \u2014 "),TQ=n(RRe,"A",{href:!0});var z4t=s(TQ);qur=r(z4t,"TFLayoutLMForMaskedLM"),z4t.forEach(t),jur=r(RRe," (LayoutLM model)"),RRe.forEach(t),Dur=i(le),iE=n(le,"LI",{});var PRe=s(iE);Qve=n(PRe,"STRONG",{});var W4t=s(Qve);Gur=r(W4t,"lxmert"),W4t.forEach(t),Our=r(PRe," \u2014 "),MQ=n(PRe,"A",{href:!0});var Q4t=s(MQ);Vur=r(Q4t,"TFLxmertForPreTraining"),Q4t.forEach(t),Xur=r(PRe," (LXMERT model)"),PRe.forEach(t),zur=i(le),dE=n(le,"LI",{});var BRe=s(dE);Hve=n(BRe,"STRONG",{});var H4t=s(Hve);Wur=r(H4t,"mobilebert"),H4t.forEach(t),Qur=r(BRe," \u2014 "),EQ=n(BRe,"A",{href:!0});var U4t=s(EQ);Hur=r(U4t,"TFMobileBertForPreTraining"),U4t.forEach(t),Uur=r(BRe," (MobileBERT model)"),BRe.forEach(t),Jur=i(le),cE=n(le,"LI",{});var IRe=s(cE);Uve=n(IRe,"STRONG",{});var J4t=s(Uve);Yur=r(J4t,"mpnet"),J4t.forEach(t),Kur=r(IRe," \u2014 "),CQ=n(IRe,"A",{href:!0});var Y4t=s(CQ);Zur=r(Y4t,"TFMPNetForMaskedLM"),Y4t.forEach(t),epr=r(IRe," (MPNet model)"),IRe.forEach(t),opr=i(le),mE=n(le,"LI",{});var NRe=s(mE);Jve=n(NRe,"STRONG",{});var K4t=s(Jve);rpr=r(K4t,"openai-gpt"),K4t.forEach(t),tpr=r(NRe," \u2014 "),wQ=n(NRe,"A",{href:!0});var Z4t=s(wQ);apr=r(Z4t,"TFOpenAIGPTLMHeadModel"),Z4t.forEach(t),npr=r(NRe," (OpenAI GPT model)"),NRe.forEach(t),spr=i(le),fE=n(le,"LI",{});var qRe=s(fE);Yve=n(qRe,"STRONG",{});var eEt=s(Yve);lpr=r(eEt,"roberta"),eEt.forEach(t),ipr=r(qRe," \u2014 "),AQ=n(qRe,"A",{href:!0});var oEt=s(AQ);dpr=r(oEt,"TFRobertaForMaskedLM"),oEt.forEach(t),cpr=r(qRe," (RoBERTa model)"),qRe.forEach(t),mpr=i(le),gE=n(le,"LI",{});var jRe=s(gE);Kve=n(jRe,"STRONG",{});var rEt=s(Kve);fpr=r(rEt,"t5"),rEt.forEach(t),gpr=r(jRe," \u2014 "),yQ=n(jRe,"A",{href:!0});var tEt=s(yQ);hpr=r(tEt,"TFT5ForConditionalGeneration"),tEt.forEach(t),upr=r(jRe," (T5 model)"),jRe.forEach(t),ppr=i(le),hE=n(le,"LI",{});var DRe=s(hE);Zve=n(DRe,"STRONG",{});var aEt=s(Zve);_pr=r(aEt,"tapas"),aEt.forEach(t),bpr=r(DRe," \u2014 "),LQ=n(DRe,"A",{href:!0});var nEt=s(LQ);vpr=r(nEt,"TFTapasForMaskedLM"),nEt.forEach(t),Fpr=r(DRe," (TAPAS model)"),DRe.forEach(t),Tpr=i(le),uE=n(le,"LI",{});var GRe=s(uE);eFe=n(GRe,"STRONG",{});var sEt=s(eFe);Mpr=r(sEt,"transfo-xl"),sEt.forEach(t),Epr=r(GRe," \u2014 "),xQ=n(GRe,"A",{href:!0});var lEt=s(xQ);Cpr=r(lEt,"TFTransfoXLLMHeadModel"),lEt.forEach(t),wpr=r(GRe," (Transformer-XL model)"),GRe.forEach(t),Apr=i(le),pE=n(le,"LI",{});var ORe=s(pE);oFe=n(ORe,"STRONG",{});var iEt=s(oFe);ypr=r(iEt,"vit_mae"),iEt.forEach(t),Lpr=r(ORe," \u2014 "),$Q=n(ORe,"A",{href:!0});var dEt=s($Q);xpr=r(dEt,"TFViTMAEForPreTraining"),dEt.forEach(t),$pr=r(ORe," (ViTMAE model)"),ORe.forEach(t),kpr=i(le),_E=n(le,"LI",{});var VRe=s(_E);rFe=n(VRe,"STRONG",{});var cEt=s(rFe);Spr=r(cEt,"xlm"),cEt.forEach(t),Rpr=r(VRe," \u2014 "),kQ=n(VRe,"A",{href:!0});var mEt=s(kQ);Ppr=r(mEt,"TFXLMWithLMHeadModel"),mEt.forEach(t),Bpr=r(VRe," (XLM model)"),VRe.forEach(t),Ipr=i(le),bE=n(le,"LI",{});var XRe=s(bE);tFe=n(XRe,"STRONG",{});var fEt=s(tFe);Npr=r(fEt,"xlm-roberta"),fEt.forEach(t),qpr=r(XRe," \u2014 "),SQ=n(XRe,"A",{href:!0});var gEt=s(SQ);jpr=r(gEt,"TFXLMRobertaForMaskedLM"),gEt.forEach(t),Dpr=r(XRe," (XLM-RoBERTa model)"),XRe.forEach(t),Gpr=i(le),vE=n(le,"LI",{});var zRe=s(vE);aFe=n(zRe,"STRONG",{});var hEt=s(aFe);Opr=r(hEt,"xlnet"),hEt.forEach(t),Vpr=r(zRe," \u2014 "),RQ=n(zRe,"A",{href:!0});var uEt=s(RQ);Xpr=r(uEt,"TFXLNetLMHeadModel"),uEt.forEach(t),zpr=r(zRe," (XLNet model)"),zRe.forEach(t),le.forEach(t),Wpr=i(pl),T(FE.$$.fragment,pl),pl.forEach(t),ul.forEach(t),yje=i(m),Qd=n(m,"H2",{class:!0});var RGe=s(Qd);TE=n(RGe,"A",{id:!0,class:!0,href:!0});var pEt=s(TE);nFe=n(pEt,"SPAN",{});var _Et=s(nFe);T(E7.$$.fragment,_Et),_Et.forEach(t),pEt.forEach(t),Qpr=i(RGe),sFe=n(RGe,"SPAN",{});var bEt=s(sFe);Hpr=r(bEt,"TFAutoModelForCausalLM"),bEt.forEach(t),RGe.forEach(t),Lje=i(m),Zo=n(m,"DIV",{class:!0});var _l=s(Zo);T(C7.$$.fragment,_l),Upr=i(_l),Hd=n(_l,"P",{});var Mee=s(Hd);Jpr=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),PQ=n(Mee,"A",{href:!0});var vEt=s(PQ);Ypr=r(vEt,"from_pretrained()"),vEt.forEach(t),Kpr=r(Mee," class method or the "),BQ=n(Mee,"A",{href:!0});var FEt=s(BQ);Zpr=r(FEt,"from_config()"),FEt.forEach(t),e_r=r(Mee,` class
method.`),Mee.forEach(t),o_r=i(_l),w7=n(_l,"P",{});var PGe=s(w7);r_r=r(PGe,"This class cannot be instantiated directly using "),lFe=n(PGe,"CODE",{});var TEt=s(lFe);t_r=r(TEt,"__init__()"),TEt.forEach(t),a_r=r(PGe," (throws an error)."),PGe.forEach(t),n_r=i(_l),xt=n(_l,"DIV",{class:!0});var RA=s(xt);T(A7.$$.fragment,RA),s_r=i(RA),iFe=n(RA,"P",{});var MEt=s(iFe);l_r=r(MEt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),MEt.forEach(t),i_r=i(RA),Ud=n(RA,"P",{});var Eee=s(Ud);d_r=r(Eee,`Note:
Loading a model from its configuration file does `),dFe=n(Eee,"STRONG",{});var EEt=s(dFe);c_r=r(EEt,"not"),EEt.forEach(t),m_r=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=n(Eee,"A",{href:!0});var CEt=s(IQ);f_r=r(CEt,"from_pretrained()"),CEt.forEach(t),g_r=r(Eee," to load the model weights."),Eee.forEach(t),h_r=i(RA),T(ME.$$.fragment,RA),RA.forEach(t),u_r=i(_l),yr=n(_l,"DIV",{class:!0});var bl=s(yr);T(y7.$$.fragment,bl),p_r=i(bl),cFe=n(bl,"P",{});var wEt=s(cFe);__r=r(wEt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),wEt.forEach(t),b_r=i(bl),en=n(bl,"P",{});var PA=s(en);v_r=r(PA,"The model class to instantiate is selected based on the "),mFe=n(PA,"CODE",{});var AEt=s(mFe);F_r=r(AEt,"model_type"),AEt.forEach(t),T_r=r(PA,` property of the config object (either
passed as an argument or loaded from `),fFe=n(PA,"CODE",{});var yEt=s(fFe);M_r=r(yEt,"pretrained_model_name_or_path"),yEt.forEach(t),E_r=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gFe=n(PA,"CODE",{});var LEt=s(gFe);C_r=r(LEt,"pretrained_model_name_or_path"),LEt.forEach(t),w_r=r(PA,":"),PA.forEach(t),A_r=i(bl),Te=n(bl,"UL",{});var Ce=s(Te);EE=n(Ce,"LI",{});var WRe=s(EE);hFe=n(WRe,"STRONG",{});var xEt=s(hFe);y_r=r(xEt,"bert"),xEt.forEach(t),L_r=r(WRe," \u2014 "),NQ=n(WRe,"A",{href:!0});var $Et=s(NQ);x_r=r($Et,"TFBertLMHeadModel"),$Et.forEach(t),$_r=r(WRe," (BERT model)"),WRe.forEach(t),k_r=i(Ce),CE=n(Ce,"LI",{});var QRe=s(CE);uFe=n(QRe,"STRONG",{});var kEt=s(uFe);S_r=r(kEt,"camembert"),kEt.forEach(t),R_r=r(QRe," \u2014 "),qQ=n(QRe,"A",{href:!0});var SEt=s(qQ);P_r=r(SEt,"TFCamembertForCausalLM"),SEt.forEach(t),B_r=r(QRe," (CamemBERT model)"),QRe.forEach(t),I_r=i(Ce),wE=n(Ce,"LI",{});var HRe=s(wE);pFe=n(HRe,"STRONG",{});var REt=s(pFe);N_r=r(REt,"ctrl"),REt.forEach(t),q_r=r(HRe," \u2014 "),jQ=n(HRe,"A",{href:!0});var PEt=s(jQ);j_r=r(PEt,"TFCTRLLMHeadModel"),PEt.forEach(t),D_r=r(HRe," (CTRL model)"),HRe.forEach(t),G_r=i(Ce),AE=n(Ce,"LI",{});var URe=s(AE);_Fe=n(URe,"STRONG",{});var BEt=s(_Fe);O_r=r(BEt,"gpt2"),BEt.forEach(t),V_r=r(URe," \u2014 "),DQ=n(URe,"A",{href:!0});var IEt=s(DQ);X_r=r(IEt,"TFGPT2LMHeadModel"),IEt.forEach(t),z_r=r(URe," (OpenAI GPT-2 model)"),URe.forEach(t),W_r=i(Ce),yE=n(Ce,"LI",{});var JRe=s(yE);bFe=n(JRe,"STRONG",{});var NEt=s(bFe);Q_r=r(NEt,"gptj"),NEt.forEach(t),H_r=r(JRe," \u2014 "),GQ=n(JRe,"A",{href:!0});var qEt=s(GQ);U_r=r(qEt,"TFGPTJForCausalLM"),qEt.forEach(t),J_r=r(JRe," (GPT-J model)"),JRe.forEach(t),Y_r=i(Ce),LE=n(Ce,"LI",{});var YRe=s(LE);vFe=n(YRe,"STRONG",{});var jEt=s(vFe);K_r=r(jEt,"openai-gpt"),jEt.forEach(t),Z_r=r(YRe," \u2014 "),OQ=n(YRe,"A",{href:!0});var DEt=s(OQ);ebr=r(DEt,"TFOpenAIGPTLMHeadModel"),DEt.forEach(t),obr=r(YRe," (OpenAI GPT model)"),YRe.forEach(t),rbr=i(Ce),xE=n(Ce,"LI",{});var KRe=s(xE);FFe=n(KRe,"STRONG",{});var GEt=s(FFe);tbr=r(GEt,"opt"),GEt.forEach(t),abr=r(KRe," \u2014 "),VQ=n(KRe,"A",{href:!0});var OEt=s(VQ);nbr=r(OEt,"TFOPTForCausalLM"),OEt.forEach(t),sbr=r(KRe," (OPT model)"),KRe.forEach(t),lbr=i(Ce),$E=n(Ce,"LI",{});var ZRe=s($E);TFe=n(ZRe,"STRONG",{});var VEt=s(TFe);ibr=r(VEt,"rembert"),VEt.forEach(t),dbr=r(ZRe," \u2014 "),XQ=n(ZRe,"A",{href:!0});var XEt=s(XQ);cbr=r(XEt,"TFRemBertForCausalLM"),XEt.forEach(t),mbr=r(ZRe," (RemBERT model)"),ZRe.forEach(t),fbr=i(Ce),kE=n(Ce,"LI",{});var ePe=s(kE);MFe=n(ePe,"STRONG",{});var zEt=s(MFe);gbr=r(zEt,"roberta"),zEt.forEach(t),hbr=r(ePe," \u2014 "),zQ=n(ePe,"A",{href:!0});var WEt=s(zQ);ubr=r(WEt,"TFRobertaForCausalLM"),WEt.forEach(t),pbr=r(ePe," (RoBERTa model)"),ePe.forEach(t),_br=i(Ce),SE=n(Ce,"LI",{});var oPe=s(SE);EFe=n(oPe,"STRONG",{});var QEt=s(EFe);bbr=r(QEt,"roformer"),QEt.forEach(t),vbr=r(oPe," \u2014 "),WQ=n(oPe,"A",{href:!0});var HEt=s(WQ);Fbr=r(HEt,"TFRoFormerForCausalLM"),HEt.forEach(t),Tbr=r(oPe," (RoFormer model)"),oPe.forEach(t),Mbr=i(Ce),RE=n(Ce,"LI",{});var rPe=s(RE);CFe=n(rPe,"STRONG",{});var UEt=s(CFe);Ebr=r(UEt,"transfo-xl"),UEt.forEach(t),Cbr=r(rPe," \u2014 "),QQ=n(rPe,"A",{href:!0});var JEt=s(QQ);wbr=r(JEt,"TFTransfoXLLMHeadModel"),JEt.forEach(t),Abr=r(rPe," (Transformer-XL model)"),rPe.forEach(t),ybr=i(Ce),PE=n(Ce,"LI",{});var tPe=s(PE);wFe=n(tPe,"STRONG",{});var YEt=s(wFe);Lbr=r(YEt,"xlm"),YEt.forEach(t),xbr=r(tPe," \u2014 "),HQ=n(tPe,"A",{href:!0});var KEt=s(HQ);$br=r(KEt,"TFXLMWithLMHeadModel"),KEt.forEach(t),kbr=r(tPe," (XLM model)"),tPe.forEach(t),Sbr=i(Ce),BE=n(Ce,"LI",{});var aPe=s(BE);AFe=n(aPe,"STRONG",{});var ZEt=s(AFe);Rbr=r(ZEt,"xlnet"),ZEt.forEach(t),Pbr=r(aPe," \u2014 "),UQ=n(aPe,"A",{href:!0});var eCt=s(UQ);Bbr=r(eCt,"TFXLNetLMHeadModel"),eCt.forEach(t),Ibr=r(aPe," (XLNet model)"),aPe.forEach(t),Ce.forEach(t),Nbr=i(bl),T(IE.$$.fragment,bl),bl.forEach(t),_l.forEach(t),xje=i(m),Jd=n(m,"H2",{class:!0});var BGe=s(Jd);NE=n(BGe,"A",{id:!0,class:!0,href:!0});var oCt=s(NE);yFe=n(oCt,"SPAN",{});var rCt=s(yFe);T(L7.$$.fragment,rCt),rCt.forEach(t),oCt.forEach(t),qbr=i(BGe),LFe=n(BGe,"SPAN",{});var tCt=s(LFe);jbr=r(tCt,"TFAutoModelForImageClassification"),tCt.forEach(t),BGe.forEach(t),$je=i(m),er=n(m,"DIV",{class:!0});var vl=s(er);T(x7.$$.fragment,vl),Dbr=i(vl),Yd=n(vl,"P",{});var Cee=s(Yd);Gbr=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),JQ=n(Cee,"A",{href:!0});var aCt=s(JQ);Obr=r(aCt,"from_pretrained()"),aCt.forEach(t),Vbr=r(Cee," class method or the "),YQ=n(Cee,"A",{href:!0});var nCt=s(YQ);Xbr=r(nCt,"from_config()"),nCt.forEach(t),zbr=r(Cee,` class
method.`),Cee.forEach(t),Wbr=i(vl),$7=n(vl,"P",{});var IGe=s($7);Qbr=r(IGe,"This class cannot be instantiated directly using "),xFe=n(IGe,"CODE",{});var sCt=s(xFe);Hbr=r(sCt,"__init__()"),sCt.forEach(t),Ubr=r(IGe," (throws an error)."),IGe.forEach(t),Jbr=i(vl),$t=n(vl,"DIV",{class:!0});var BA=s($t);T(k7.$$.fragment,BA),Ybr=i(BA),$Fe=n(BA,"P",{});var lCt=s($Fe);Kbr=r(lCt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),lCt.forEach(t),Zbr=i(BA),Kd=n(BA,"P",{});var wee=s(Kd);e2r=r(wee,`Note:
Loading a model from its configuration file does `),kFe=n(wee,"STRONG",{});var iCt=s(kFe);o2r=r(iCt,"not"),iCt.forEach(t),r2r=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),KQ=n(wee,"A",{href:!0});var dCt=s(KQ);t2r=r(dCt,"from_pretrained()"),dCt.forEach(t),a2r=r(wee," to load the model weights."),wee.forEach(t),n2r=i(BA),T(qE.$$.fragment,BA),BA.forEach(t),s2r=i(vl),Lr=n(vl,"DIV",{class:!0});var Fl=s(Lr);T(S7.$$.fragment,Fl),l2r=i(Fl),SFe=n(Fl,"P",{});var cCt=s(SFe);i2r=r(cCt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),cCt.forEach(t),d2r=i(Fl),on=n(Fl,"P",{});var IA=s(on);c2r=r(IA,"The model class to instantiate is selected based on the "),RFe=n(IA,"CODE",{});var mCt=s(RFe);m2r=r(mCt,"model_type"),mCt.forEach(t),f2r=r(IA,` property of the config object (either
passed as an argument or loaded from `),PFe=n(IA,"CODE",{});var fCt=s(PFe);g2r=r(fCt,"pretrained_model_name_or_path"),fCt.forEach(t),h2r=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=n(IA,"CODE",{});var gCt=s(BFe);u2r=r(gCt,"pretrained_model_name_or_path"),gCt.forEach(t),p2r=r(IA,":"),IA.forEach(t),_2r=i(Fl),rn=n(Fl,"UL",{});var NA=s(rn);jE=n(NA,"LI",{});var nPe=s(jE);IFe=n(nPe,"STRONG",{});var hCt=s(IFe);b2r=r(hCt,"convnext"),hCt.forEach(t),v2r=r(nPe," \u2014 "),ZQ=n(nPe,"A",{href:!0});var uCt=s(ZQ);F2r=r(uCt,"TFConvNextForImageClassification"),uCt.forEach(t),T2r=r(nPe," (ConvNext model)"),nPe.forEach(t),M2r=i(NA),DE=n(NA,"LI",{});var sPe=s(DE);NFe=n(sPe,"STRONG",{});var pCt=s(NFe);E2r=r(pCt,"data2vec-vision"),pCt.forEach(t),C2r=r(sPe," \u2014 "),eH=n(sPe,"A",{href:!0});var _Ct=s(eH);w2r=r(_Ct,"TFData2VecVisionForImageClassification"),_Ct.forEach(t),A2r=r(sPe," (Data2VecVision model)"),sPe.forEach(t),y2r=i(NA),GE=n(NA,"LI",{});var lPe=s(GE);qFe=n(lPe,"STRONG",{});var bCt=s(qFe);L2r=r(bCt,"swin"),bCt.forEach(t),x2r=r(lPe," \u2014 "),oH=n(lPe,"A",{href:!0});var vCt=s(oH);$2r=r(vCt,"TFSwinForImageClassification"),vCt.forEach(t),k2r=r(lPe," (Swin model)"),lPe.forEach(t),S2r=i(NA),OE=n(NA,"LI",{});var iPe=s(OE);jFe=n(iPe,"STRONG",{});var FCt=s(jFe);R2r=r(FCt,"vit"),FCt.forEach(t),P2r=r(iPe," \u2014 "),rH=n(iPe,"A",{href:!0});var TCt=s(rH);B2r=r(TCt,"TFViTForImageClassification"),TCt.forEach(t),I2r=r(iPe," (ViT model)"),iPe.forEach(t),NA.forEach(t),N2r=i(Fl),T(VE.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),kje=i(m),Zd=n(m,"H2",{class:!0});var NGe=s(Zd);XE=n(NGe,"A",{id:!0,class:!0,href:!0});var MCt=s(XE);DFe=n(MCt,"SPAN",{});var ECt=s(DFe);T(R7.$$.fragment,ECt),ECt.forEach(t),MCt.forEach(t),q2r=i(NGe),GFe=n(NGe,"SPAN",{});var CCt=s(GFe);j2r=r(CCt,"TFAutoModelForMaskedLM"),CCt.forEach(t),NGe.forEach(t),Sje=i(m),or=n(m,"DIV",{class:!0});var Tl=s(or);T(P7.$$.fragment,Tl),D2r=i(Tl),ec=n(Tl,"P",{});var Aee=s(ec);G2r=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),tH=n(Aee,"A",{href:!0});var wCt=s(tH);O2r=r(wCt,"from_pretrained()"),wCt.forEach(t),V2r=r(Aee," class method or the "),aH=n(Aee,"A",{href:!0});var ACt=s(aH);X2r=r(ACt,"from_config()"),ACt.forEach(t),z2r=r(Aee,` class
method.`),Aee.forEach(t),W2r=i(Tl),B7=n(Tl,"P",{});var qGe=s(B7);Q2r=r(qGe,"This class cannot be instantiated directly using "),OFe=n(qGe,"CODE",{});var yCt=s(OFe);H2r=r(yCt,"__init__()"),yCt.forEach(t),U2r=r(qGe," (throws an error)."),qGe.forEach(t),J2r=i(Tl),kt=n(Tl,"DIV",{class:!0});var qA=s(kt);T(I7.$$.fragment,qA),Y2r=i(qA),VFe=n(qA,"P",{});var LCt=s(VFe);K2r=r(LCt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),LCt.forEach(t),Z2r=i(qA),oc=n(qA,"P",{});var yee=s(oc);evr=r(yee,`Note:
Loading a model from its configuration file does `),XFe=n(yee,"STRONG",{});var xCt=s(XFe);ovr=r(xCt,"not"),xCt.forEach(t),rvr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),nH=n(yee,"A",{href:!0});var $Ct=s(nH);tvr=r($Ct,"from_pretrained()"),$Ct.forEach(t),avr=r(yee," to load the model weights."),yee.forEach(t),nvr=i(qA),T(zE.$$.fragment,qA),qA.forEach(t),svr=i(Tl),xr=n(Tl,"DIV",{class:!0});var Ml=s(xr);T(N7.$$.fragment,Ml),lvr=i(Ml),zFe=n(Ml,"P",{});var kCt=s(zFe);ivr=r(kCt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kCt.forEach(t),dvr=i(Ml),tn=n(Ml,"P",{});var jA=s(tn);cvr=r(jA,"The model class to instantiate is selected based on the "),WFe=n(jA,"CODE",{});var SCt=s(WFe);mvr=r(SCt,"model_type"),SCt.forEach(t),fvr=r(jA,` property of the config object (either
passed as an argument or loaded from `),QFe=n(jA,"CODE",{});var RCt=s(QFe);gvr=r(RCt,"pretrained_model_name_or_path"),RCt.forEach(t),hvr=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HFe=n(jA,"CODE",{});var PCt=s(HFe);uvr=r(PCt,"pretrained_model_name_or_path"),PCt.forEach(t),pvr=r(jA,":"),jA.forEach(t),_vr=i(Ml),ie=n(Ml,"UL",{});var me=s(ie);WE=n(me,"LI",{});var dPe=s(WE);UFe=n(dPe,"STRONG",{});var BCt=s(UFe);bvr=r(BCt,"albert"),BCt.forEach(t),vvr=r(dPe," \u2014 "),sH=n(dPe,"A",{href:!0});var ICt=s(sH);Fvr=r(ICt,"TFAlbertForMaskedLM"),ICt.forEach(t),Tvr=r(dPe," (ALBERT model)"),dPe.forEach(t),Mvr=i(me),QE=n(me,"LI",{});var cPe=s(QE);JFe=n(cPe,"STRONG",{});var NCt=s(JFe);Evr=r(NCt,"bert"),NCt.forEach(t),Cvr=r(cPe," \u2014 "),lH=n(cPe,"A",{href:!0});var qCt=s(lH);wvr=r(qCt,"TFBertForMaskedLM"),qCt.forEach(t),Avr=r(cPe," (BERT model)"),cPe.forEach(t),yvr=i(me),HE=n(me,"LI",{});var mPe=s(HE);YFe=n(mPe,"STRONG",{});var jCt=s(YFe);Lvr=r(jCt,"camembert"),jCt.forEach(t),xvr=r(mPe," \u2014 "),iH=n(mPe,"A",{href:!0});var DCt=s(iH);$vr=r(DCt,"TFCamembertForMaskedLM"),DCt.forEach(t),kvr=r(mPe," (CamemBERT model)"),mPe.forEach(t),Svr=i(me),UE=n(me,"LI",{});var fPe=s(UE);KFe=n(fPe,"STRONG",{});var GCt=s(KFe);Rvr=r(GCt,"convbert"),GCt.forEach(t),Pvr=r(fPe," \u2014 "),dH=n(fPe,"A",{href:!0});var OCt=s(dH);Bvr=r(OCt,"TFConvBertForMaskedLM"),OCt.forEach(t),Ivr=r(fPe," (ConvBERT model)"),fPe.forEach(t),Nvr=i(me),JE=n(me,"LI",{});var gPe=s(JE);ZFe=n(gPe,"STRONG",{});var VCt=s(ZFe);qvr=r(VCt,"deberta"),VCt.forEach(t),jvr=r(gPe," \u2014 "),cH=n(gPe,"A",{href:!0});var XCt=s(cH);Dvr=r(XCt,"TFDebertaForMaskedLM"),XCt.forEach(t),Gvr=r(gPe," (DeBERTa model)"),gPe.forEach(t),Ovr=i(me),YE=n(me,"LI",{});var hPe=s(YE);e1e=n(hPe,"STRONG",{});var zCt=s(e1e);Vvr=r(zCt,"deberta-v2"),zCt.forEach(t),Xvr=r(hPe," \u2014 "),mH=n(hPe,"A",{href:!0});var WCt=s(mH);zvr=r(WCt,"TFDebertaV2ForMaskedLM"),WCt.forEach(t),Wvr=r(hPe," (DeBERTa-v2 model)"),hPe.forEach(t),Qvr=i(me),KE=n(me,"LI",{});var uPe=s(KE);o1e=n(uPe,"STRONG",{});var QCt=s(o1e);Hvr=r(QCt,"distilbert"),QCt.forEach(t),Uvr=r(uPe," \u2014 "),fH=n(uPe,"A",{href:!0});var HCt=s(fH);Jvr=r(HCt,"TFDistilBertForMaskedLM"),HCt.forEach(t),Yvr=r(uPe," (DistilBERT model)"),uPe.forEach(t),Kvr=i(me),ZE=n(me,"LI",{});var pPe=s(ZE);r1e=n(pPe,"STRONG",{});var UCt=s(r1e);Zvr=r(UCt,"electra"),UCt.forEach(t),eFr=r(pPe," \u2014 "),gH=n(pPe,"A",{href:!0});var JCt=s(gH);oFr=r(JCt,"TFElectraForMaskedLM"),JCt.forEach(t),rFr=r(pPe," (ELECTRA model)"),pPe.forEach(t),tFr=i(me),eC=n(me,"LI",{});var _Pe=s(eC);t1e=n(_Pe,"STRONG",{});var YCt=s(t1e);aFr=r(YCt,"flaubert"),YCt.forEach(t),nFr=r(_Pe," \u2014 "),hH=n(_Pe,"A",{href:!0});var KCt=s(hH);sFr=r(KCt,"TFFlaubertWithLMHeadModel"),KCt.forEach(t),lFr=r(_Pe," (FlauBERT model)"),_Pe.forEach(t),iFr=i(me),oC=n(me,"LI",{});var bPe=s(oC);a1e=n(bPe,"STRONG",{});var ZCt=s(a1e);dFr=r(ZCt,"funnel"),ZCt.forEach(t),cFr=r(bPe," \u2014 "),uH=n(bPe,"A",{href:!0});var e5t=s(uH);mFr=r(e5t,"TFFunnelForMaskedLM"),e5t.forEach(t),fFr=r(bPe," (Funnel Transformer model)"),bPe.forEach(t),gFr=i(me),rC=n(me,"LI",{});var vPe=s(rC);n1e=n(vPe,"STRONG",{});var o5t=s(n1e);hFr=r(o5t,"layoutlm"),o5t.forEach(t),uFr=r(vPe," \u2014 "),pH=n(vPe,"A",{href:!0});var r5t=s(pH);pFr=r(r5t,"TFLayoutLMForMaskedLM"),r5t.forEach(t),_Fr=r(vPe," (LayoutLM model)"),vPe.forEach(t),bFr=i(me),tC=n(me,"LI",{});var FPe=s(tC);s1e=n(FPe,"STRONG",{});var t5t=s(s1e);vFr=r(t5t,"longformer"),t5t.forEach(t),FFr=r(FPe," \u2014 "),_H=n(FPe,"A",{href:!0});var a5t=s(_H);TFr=r(a5t,"TFLongformerForMaskedLM"),a5t.forEach(t),MFr=r(FPe," (Longformer model)"),FPe.forEach(t),EFr=i(me),aC=n(me,"LI",{});var TPe=s(aC);l1e=n(TPe,"STRONG",{});var n5t=s(l1e);CFr=r(n5t,"mobilebert"),n5t.forEach(t),wFr=r(TPe," \u2014 "),bH=n(TPe,"A",{href:!0});var s5t=s(bH);AFr=r(s5t,"TFMobileBertForMaskedLM"),s5t.forEach(t),yFr=r(TPe," (MobileBERT model)"),TPe.forEach(t),LFr=i(me),nC=n(me,"LI",{});var MPe=s(nC);i1e=n(MPe,"STRONG",{});var l5t=s(i1e);xFr=r(l5t,"mpnet"),l5t.forEach(t),$Fr=r(MPe," \u2014 "),vH=n(MPe,"A",{href:!0});var i5t=s(vH);kFr=r(i5t,"TFMPNetForMaskedLM"),i5t.forEach(t),SFr=r(MPe," (MPNet model)"),MPe.forEach(t),RFr=i(me),sC=n(me,"LI",{});var EPe=s(sC);d1e=n(EPe,"STRONG",{});var d5t=s(d1e);PFr=r(d5t,"rembert"),d5t.forEach(t),BFr=r(EPe," \u2014 "),FH=n(EPe,"A",{href:!0});var c5t=s(FH);IFr=r(c5t,"TFRemBertForMaskedLM"),c5t.forEach(t),NFr=r(EPe," (RemBERT model)"),EPe.forEach(t),qFr=i(me),lC=n(me,"LI",{});var CPe=s(lC);c1e=n(CPe,"STRONG",{});var m5t=s(c1e);jFr=r(m5t,"roberta"),m5t.forEach(t),DFr=r(CPe," \u2014 "),TH=n(CPe,"A",{href:!0});var f5t=s(TH);GFr=r(f5t,"TFRobertaForMaskedLM"),f5t.forEach(t),OFr=r(CPe," (RoBERTa model)"),CPe.forEach(t),VFr=i(me),iC=n(me,"LI",{});var wPe=s(iC);m1e=n(wPe,"STRONG",{});var g5t=s(m1e);XFr=r(g5t,"roformer"),g5t.forEach(t),zFr=r(wPe," \u2014 "),MH=n(wPe,"A",{href:!0});var h5t=s(MH);WFr=r(h5t,"TFRoFormerForMaskedLM"),h5t.forEach(t),QFr=r(wPe," (RoFormer model)"),wPe.forEach(t),HFr=i(me),dC=n(me,"LI",{});var APe=s(dC);f1e=n(APe,"STRONG",{});var u5t=s(f1e);UFr=r(u5t,"tapas"),u5t.forEach(t),JFr=r(APe," \u2014 "),EH=n(APe,"A",{href:!0});var p5t=s(EH);YFr=r(p5t,"TFTapasForMaskedLM"),p5t.forEach(t),KFr=r(APe," (TAPAS model)"),APe.forEach(t),ZFr=i(me),cC=n(me,"LI",{});var yPe=s(cC);g1e=n(yPe,"STRONG",{});var _5t=s(g1e);e1r=r(_5t,"xlm"),_5t.forEach(t),o1r=r(yPe," \u2014 "),CH=n(yPe,"A",{href:!0});var b5t=s(CH);r1r=r(b5t,"TFXLMWithLMHeadModel"),b5t.forEach(t),t1r=r(yPe," (XLM model)"),yPe.forEach(t),a1r=i(me),mC=n(me,"LI",{});var LPe=s(mC);h1e=n(LPe,"STRONG",{});var v5t=s(h1e);n1r=r(v5t,"xlm-roberta"),v5t.forEach(t),s1r=r(LPe," \u2014 "),wH=n(LPe,"A",{href:!0});var F5t=s(wH);l1r=r(F5t,"TFXLMRobertaForMaskedLM"),F5t.forEach(t),i1r=r(LPe," (XLM-RoBERTa model)"),LPe.forEach(t),me.forEach(t),d1r=i(Ml),T(fC.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),Rje=i(m),rc=n(m,"H2",{class:!0});var jGe=s(rc);gC=n(jGe,"A",{id:!0,class:!0,href:!0});var T5t=s(gC);u1e=n(T5t,"SPAN",{});var M5t=s(u1e);T(q7.$$.fragment,M5t),M5t.forEach(t),T5t.forEach(t),c1r=i(jGe),p1e=n(jGe,"SPAN",{});var E5t=s(p1e);m1r=r(E5t,"TFAutoModelForSeq2SeqLM"),E5t.forEach(t),jGe.forEach(t),Pje=i(m),rr=n(m,"DIV",{class:!0});var El=s(rr);T(j7.$$.fragment,El),f1r=i(El),tc=n(El,"P",{});var Lee=s(tc);g1r=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),AH=n(Lee,"A",{href:!0});var C5t=s(AH);h1r=r(C5t,"from_pretrained()"),C5t.forEach(t),u1r=r(Lee," class method or the "),yH=n(Lee,"A",{href:!0});var w5t=s(yH);p1r=r(w5t,"from_config()"),w5t.forEach(t),_1r=r(Lee,` class
method.`),Lee.forEach(t),b1r=i(El),D7=n(El,"P",{});var DGe=s(D7);v1r=r(DGe,"This class cannot be instantiated directly using "),_1e=n(DGe,"CODE",{});var A5t=s(_1e);F1r=r(A5t,"__init__()"),A5t.forEach(t),T1r=r(DGe," (throws an error)."),DGe.forEach(t),M1r=i(El),St=n(El,"DIV",{class:!0});var DA=s(St);T(G7.$$.fragment,DA),E1r=i(DA),b1e=n(DA,"P",{});var y5t=s(b1e);C1r=r(y5t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),y5t.forEach(t),w1r=i(DA),ac=n(DA,"P",{});var xee=s(ac);A1r=r(xee,`Note:
Loading a model from its configuration file does `),v1e=n(xee,"STRONG",{});var L5t=s(v1e);y1r=r(L5t,"not"),L5t.forEach(t),L1r=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=n(xee,"A",{href:!0});var x5t=s(LH);x1r=r(x5t,"from_pretrained()"),x5t.forEach(t),$1r=r(xee," to load the model weights."),xee.forEach(t),k1r=i(DA),T(hC.$$.fragment,DA),DA.forEach(t),S1r=i(El),$r=n(El,"DIV",{class:!0});var Cl=s($r);T(O7.$$.fragment,Cl),R1r=i(Cl),F1e=n(Cl,"P",{});var $5t=s(F1e);P1r=r($5t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$5t.forEach(t),B1r=i(Cl),an=n(Cl,"P",{});var GA=s(an);I1r=r(GA,"The model class to instantiate is selected based on the "),T1e=n(GA,"CODE",{});var k5t=s(T1e);N1r=r(k5t,"model_type"),k5t.forEach(t),q1r=r(GA,` property of the config object (either
passed as an argument or loaded from `),M1e=n(GA,"CODE",{});var S5t=s(M1e);j1r=r(S5t,"pretrained_model_name_or_path"),S5t.forEach(t),D1r=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E1e=n(GA,"CODE",{});var R5t=s(E1e);G1r=r(R5t,"pretrained_model_name_or_path"),R5t.forEach(t),O1r=r(GA,":"),GA.forEach(t),V1r=i(Cl),ye=n(Cl,"UL",{});var Be=s(ye);uC=n(Be,"LI",{});var xPe=s(uC);C1e=n(xPe,"STRONG",{});var P5t=s(C1e);X1r=r(P5t,"bart"),P5t.forEach(t),z1r=r(xPe," \u2014 "),xH=n(xPe,"A",{href:!0});var B5t=s(xH);W1r=r(B5t,"TFBartForConditionalGeneration"),B5t.forEach(t),Q1r=r(xPe," (BART model)"),xPe.forEach(t),H1r=i(Be),pC=n(Be,"LI",{});var $Pe=s(pC);w1e=n($Pe,"STRONG",{});var I5t=s(w1e);U1r=r(I5t,"blenderbot"),I5t.forEach(t),J1r=r($Pe," \u2014 "),$H=n($Pe,"A",{href:!0});var N5t=s($H);Y1r=r(N5t,"TFBlenderbotForConditionalGeneration"),N5t.forEach(t),K1r=r($Pe," (Blenderbot model)"),$Pe.forEach(t),Z1r=i(Be),_C=n(Be,"LI",{});var kPe=s(_C);A1e=n(kPe,"STRONG",{});var q5t=s(A1e);eTr=r(q5t,"blenderbot-small"),q5t.forEach(t),oTr=r(kPe," \u2014 "),kH=n(kPe,"A",{href:!0});var j5t=s(kH);rTr=r(j5t,"TFBlenderbotSmallForConditionalGeneration"),j5t.forEach(t),tTr=r(kPe," (BlenderbotSmall model)"),kPe.forEach(t),aTr=i(Be),bC=n(Be,"LI",{});var SPe=s(bC);y1e=n(SPe,"STRONG",{});var D5t=s(y1e);nTr=r(D5t,"encoder-decoder"),D5t.forEach(t),sTr=r(SPe," \u2014 "),SH=n(SPe,"A",{href:!0});var G5t=s(SH);lTr=r(G5t,"TFEncoderDecoderModel"),G5t.forEach(t),iTr=r(SPe," (Encoder decoder model)"),SPe.forEach(t),dTr=i(Be),vC=n(Be,"LI",{});var RPe=s(vC);L1e=n(RPe,"STRONG",{});var O5t=s(L1e);cTr=r(O5t,"led"),O5t.forEach(t),mTr=r(RPe," \u2014 "),RH=n(RPe,"A",{href:!0});var V5t=s(RH);fTr=r(V5t,"TFLEDForConditionalGeneration"),V5t.forEach(t),gTr=r(RPe," (LED model)"),RPe.forEach(t),hTr=i(Be),FC=n(Be,"LI",{});var PPe=s(FC);x1e=n(PPe,"STRONG",{});var X5t=s(x1e);uTr=r(X5t,"marian"),X5t.forEach(t),pTr=r(PPe," \u2014 "),PH=n(PPe,"A",{href:!0});var z5t=s(PH);_Tr=r(z5t,"TFMarianMTModel"),z5t.forEach(t),bTr=r(PPe," (Marian model)"),PPe.forEach(t),vTr=i(Be),TC=n(Be,"LI",{});var BPe=s(TC);$1e=n(BPe,"STRONG",{});var W5t=s($1e);FTr=r(W5t,"mbart"),W5t.forEach(t),TTr=r(BPe," \u2014 "),BH=n(BPe,"A",{href:!0});var Q5t=s(BH);MTr=r(Q5t,"TFMBartForConditionalGeneration"),Q5t.forEach(t),ETr=r(BPe," (mBART model)"),BPe.forEach(t),CTr=i(Be),MC=n(Be,"LI",{});var IPe=s(MC);k1e=n(IPe,"STRONG",{});var H5t=s(k1e);wTr=r(H5t,"mt5"),H5t.forEach(t),ATr=r(IPe," \u2014 "),IH=n(IPe,"A",{href:!0});var U5t=s(IH);yTr=r(U5t,"TFMT5ForConditionalGeneration"),U5t.forEach(t),LTr=r(IPe," (mT5 model)"),IPe.forEach(t),xTr=i(Be),EC=n(Be,"LI",{});var NPe=s(EC);S1e=n(NPe,"STRONG",{});var J5t=s(S1e);$Tr=r(J5t,"pegasus"),J5t.forEach(t),kTr=r(NPe," \u2014 "),NH=n(NPe,"A",{href:!0});var Y5t=s(NH);STr=r(Y5t,"TFPegasusForConditionalGeneration"),Y5t.forEach(t),RTr=r(NPe," (Pegasus model)"),NPe.forEach(t),PTr=i(Be),CC=n(Be,"LI",{});var qPe=s(CC);R1e=n(qPe,"STRONG",{});var K5t=s(R1e);BTr=r(K5t,"t5"),K5t.forEach(t),ITr=r(qPe," \u2014 "),qH=n(qPe,"A",{href:!0});var Z5t=s(qH);NTr=r(Z5t,"TFT5ForConditionalGeneration"),Z5t.forEach(t),qTr=r(qPe," (T5 model)"),qPe.forEach(t),Be.forEach(t),jTr=i(Cl),T(wC.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),Bje=i(m),nc=n(m,"H2",{class:!0});var GGe=s(nc);AC=n(GGe,"A",{id:!0,class:!0,href:!0});var e3t=s(AC);P1e=n(e3t,"SPAN",{});var o3t=s(P1e);T(V7.$$.fragment,o3t),o3t.forEach(t),e3t.forEach(t),DTr=i(GGe),B1e=n(GGe,"SPAN",{});var r3t=s(B1e);GTr=r(r3t,"TFAutoModelForSequenceClassification"),r3t.forEach(t),GGe.forEach(t),Ije=i(m),tr=n(m,"DIV",{class:!0});var wl=s(tr);T(X7.$$.fragment,wl),OTr=i(wl),sc=n(wl,"P",{});var $ee=s(sc);VTr=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jH=n($ee,"A",{href:!0});var t3t=s(jH);XTr=r(t3t,"from_pretrained()"),t3t.forEach(t),zTr=r($ee," class method or the "),DH=n($ee,"A",{href:!0});var a3t=s(DH);WTr=r(a3t,"from_config()"),a3t.forEach(t),QTr=r($ee,` class
method.`),$ee.forEach(t),HTr=i(wl),z7=n(wl,"P",{});var OGe=s(z7);UTr=r(OGe,"This class cannot be instantiated directly using "),I1e=n(OGe,"CODE",{});var n3t=s(I1e);JTr=r(n3t,"__init__()"),n3t.forEach(t),YTr=r(OGe," (throws an error)."),OGe.forEach(t),KTr=i(wl),Rt=n(wl,"DIV",{class:!0});var OA=s(Rt);T(W7.$$.fragment,OA),ZTr=i(OA),N1e=n(OA,"P",{});var s3t=s(N1e);eMr=r(s3t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),s3t.forEach(t),oMr=i(OA),lc=n(OA,"P",{});var kee=s(lc);rMr=r(kee,`Note:
Loading a model from its configuration file does `),q1e=n(kee,"STRONG",{});var l3t=s(q1e);tMr=r(l3t,"not"),l3t.forEach(t),aMr=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=n(kee,"A",{href:!0});var i3t=s(GH);nMr=r(i3t,"from_pretrained()"),i3t.forEach(t),sMr=r(kee," to load the model weights."),kee.forEach(t),lMr=i(OA),T(yC.$$.fragment,OA),OA.forEach(t),iMr=i(wl),kr=n(wl,"DIV",{class:!0});var Al=s(kr);T(Q7.$$.fragment,Al),dMr=i(Al),j1e=n(Al,"P",{});var d3t=s(j1e);cMr=r(d3t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),d3t.forEach(t),mMr=i(Al),nn=n(Al,"P",{});var VA=s(nn);fMr=r(VA,"The model class to instantiate is selected based on the "),D1e=n(VA,"CODE",{});var c3t=s(D1e);gMr=r(c3t,"model_type"),c3t.forEach(t),hMr=r(VA,` property of the config object (either
passed as an argument or loaded from `),G1e=n(VA,"CODE",{});var m3t=s(G1e);uMr=r(m3t,"pretrained_model_name_or_path"),m3t.forEach(t),pMr=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O1e=n(VA,"CODE",{});var f3t=s(O1e);_Mr=r(f3t,"pretrained_model_name_or_path"),f3t.forEach(t),bMr=r(VA,":"),VA.forEach(t),vMr=i(Al),oe=n(Al,"UL",{});var ae=s(oe);LC=n(ae,"LI",{});var jPe=s(LC);V1e=n(jPe,"STRONG",{});var g3t=s(V1e);FMr=r(g3t,"albert"),g3t.forEach(t),TMr=r(jPe," \u2014 "),OH=n(jPe,"A",{href:!0});var h3t=s(OH);MMr=r(h3t,"TFAlbertForSequenceClassification"),h3t.forEach(t),EMr=r(jPe," (ALBERT model)"),jPe.forEach(t),CMr=i(ae),xC=n(ae,"LI",{});var DPe=s(xC);X1e=n(DPe,"STRONG",{});var u3t=s(X1e);wMr=r(u3t,"bert"),u3t.forEach(t),AMr=r(DPe," \u2014 "),VH=n(DPe,"A",{href:!0});var p3t=s(VH);yMr=r(p3t,"TFBertForSequenceClassification"),p3t.forEach(t),LMr=r(DPe," (BERT model)"),DPe.forEach(t),xMr=i(ae),$C=n(ae,"LI",{});var GPe=s($C);z1e=n(GPe,"STRONG",{});var _3t=s(z1e);$Mr=r(_3t,"camembert"),_3t.forEach(t),kMr=r(GPe," \u2014 "),XH=n(GPe,"A",{href:!0});var b3t=s(XH);SMr=r(b3t,"TFCamembertForSequenceClassification"),b3t.forEach(t),RMr=r(GPe," (CamemBERT model)"),GPe.forEach(t),PMr=i(ae),kC=n(ae,"LI",{});var OPe=s(kC);W1e=n(OPe,"STRONG",{});var v3t=s(W1e);BMr=r(v3t,"convbert"),v3t.forEach(t),IMr=r(OPe," \u2014 "),zH=n(OPe,"A",{href:!0});var F3t=s(zH);NMr=r(F3t,"TFConvBertForSequenceClassification"),F3t.forEach(t),qMr=r(OPe," (ConvBERT model)"),OPe.forEach(t),jMr=i(ae),SC=n(ae,"LI",{});var VPe=s(SC);Q1e=n(VPe,"STRONG",{});var T3t=s(Q1e);DMr=r(T3t,"ctrl"),T3t.forEach(t),GMr=r(VPe," \u2014 "),WH=n(VPe,"A",{href:!0});var M3t=s(WH);OMr=r(M3t,"TFCTRLForSequenceClassification"),M3t.forEach(t),VMr=r(VPe," (CTRL model)"),VPe.forEach(t),XMr=i(ae),RC=n(ae,"LI",{});var XPe=s(RC);H1e=n(XPe,"STRONG",{});var E3t=s(H1e);zMr=r(E3t,"deberta"),E3t.forEach(t),WMr=r(XPe," \u2014 "),QH=n(XPe,"A",{href:!0});var C3t=s(QH);QMr=r(C3t,"TFDebertaForSequenceClassification"),C3t.forEach(t),HMr=r(XPe," (DeBERTa model)"),XPe.forEach(t),UMr=i(ae),PC=n(ae,"LI",{});var zPe=s(PC);U1e=n(zPe,"STRONG",{});var w3t=s(U1e);JMr=r(w3t,"deberta-v2"),w3t.forEach(t),YMr=r(zPe," \u2014 "),HH=n(zPe,"A",{href:!0});var A3t=s(HH);KMr=r(A3t,"TFDebertaV2ForSequenceClassification"),A3t.forEach(t),ZMr=r(zPe," (DeBERTa-v2 model)"),zPe.forEach(t),e4r=i(ae),BC=n(ae,"LI",{});var WPe=s(BC);J1e=n(WPe,"STRONG",{});var y3t=s(J1e);o4r=r(y3t,"distilbert"),y3t.forEach(t),r4r=r(WPe," \u2014 "),UH=n(WPe,"A",{href:!0});var L3t=s(UH);t4r=r(L3t,"TFDistilBertForSequenceClassification"),L3t.forEach(t),a4r=r(WPe," (DistilBERT model)"),WPe.forEach(t),n4r=i(ae),IC=n(ae,"LI",{});var QPe=s(IC);Y1e=n(QPe,"STRONG",{});var x3t=s(Y1e);s4r=r(x3t,"electra"),x3t.forEach(t),l4r=r(QPe," \u2014 "),JH=n(QPe,"A",{href:!0});var $3t=s(JH);i4r=r($3t,"TFElectraForSequenceClassification"),$3t.forEach(t),d4r=r(QPe," (ELECTRA model)"),QPe.forEach(t),c4r=i(ae),NC=n(ae,"LI",{});var HPe=s(NC);K1e=n(HPe,"STRONG",{});var k3t=s(K1e);m4r=r(k3t,"flaubert"),k3t.forEach(t),f4r=r(HPe," \u2014 "),YH=n(HPe,"A",{href:!0});var S3t=s(YH);g4r=r(S3t,"TFFlaubertForSequenceClassification"),S3t.forEach(t),h4r=r(HPe," (FlauBERT model)"),HPe.forEach(t),u4r=i(ae),qC=n(ae,"LI",{});var UPe=s(qC);Z1e=n(UPe,"STRONG",{});var R3t=s(Z1e);p4r=r(R3t,"funnel"),R3t.forEach(t),_4r=r(UPe," \u2014 "),KH=n(UPe,"A",{href:!0});var P3t=s(KH);b4r=r(P3t,"TFFunnelForSequenceClassification"),P3t.forEach(t),v4r=r(UPe," (Funnel Transformer model)"),UPe.forEach(t),F4r=i(ae),jC=n(ae,"LI",{});var JPe=s(jC);eTe=n(JPe,"STRONG",{});var B3t=s(eTe);T4r=r(B3t,"gpt2"),B3t.forEach(t),M4r=r(JPe," \u2014 "),ZH=n(JPe,"A",{href:!0});var I3t=s(ZH);E4r=r(I3t,"TFGPT2ForSequenceClassification"),I3t.forEach(t),C4r=r(JPe," (OpenAI GPT-2 model)"),JPe.forEach(t),w4r=i(ae),DC=n(ae,"LI",{});var YPe=s(DC);oTe=n(YPe,"STRONG",{});var N3t=s(oTe);A4r=r(N3t,"gptj"),N3t.forEach(t),y4r=r(YPe," \u2014 "),eU=n(YPe,"A",{href:!0});var q3t=s(eU);L4r=r(q3t,"TFGPTJForSequenceClassification"),q3t.forEach(t),x4r=r(YPe," (GPT-J model)"),YPe.forEach(t),$4r=i(ae),GC=n(ae,"LI",{});var KPe=s(GC);rTe=n(KPe,"STRONG",{});var j3t=s(rTe);k4r=r(j3t,"layoutlm"),j3t.forEach(t),S4r=r(KPe," \u2014 "),oU=n(KPe,"A",{href:!0});var D3t=s(oU);R4r=r(D3t,"TFLayoutLMForSequenceClassification"),D3t.forEach(t),P4r=r(KPe," (LayoutLM model)"),KPe.forEach(t),B4r=i(ae),OC=n(ae,"LI",{});var ZPe=s(OC);tTe=n(ZPe,"STRONG",{});var G3t=s(tTe);I4r=r(G3t,"longformer"),G3t.forEach(t),N4r=r(ZPe," \u2014 "),rU=n(ZPe,"A",{href:!0});var O3t=s(rU);q4r=r(O3t,"TFLongformerForSequenceClassification"),O3t.forEach(t),j4r=r(ZPe," (Longformer model)"),ZPe.forEach(t),D4r=i(ae),VC=n(ae,"LI",{});var eBe=s(VC);aTe=n(eBe,"STRONG",{});var V3t=s(aTe);G4r=r(V3t,"mobilebert"),V3t.forEach(t),O4r=r(eBe," \u2014 "),tU=n(eBe,"A",{href:!0});var X3t=s(tU);V4r=r(X3t,"TFMobileBertForSequenceClassification"),X3t.forEach(t),X4r=r(eBe," (MobileBERT model)"),eBe.forEach(t),z4r=i(ae),XC=n(ae,"LI",{});var oBe=s(XC);nTe=n(oBe,"STRONG",{});var z3t=s(nTe);W4r=r(z3t,"mpnet"),z3t.forEach(t),Q4r=r(oBe," \u2014 "),aU=n(oBe,"A",{href:!0});var W3t=s(aU);H4r=r(W3t,"TFMPNetForSequenceClassification"),W3t.forEach(t),U4r=r(oBe," (MPNet model)"),oBe.forEach(t),J4r=i(ae),zC=n(ae,"LI",{});var rBe=s(zC);sTe=n(rBe,"STRONG",{});var Q3t=s(sTe);Y4r=r(Q3t,"openai-gpt"),Q3t.forEach(t),K4r=r(rBe," \u2014 "),nU=n(rBe,"A",{href:!0});var H3t=s(nU);Z4r=r(H3t,"TFOpenAIGPTForSequenceClassification"),H3t.forEach(t),eEr=r(rBe," (OpenAI GPT model)"),rBe.forEach(t),oEr=i(ae),WC=n(ae,"LI",{});var tBe=s(WC);lTe=n(tBe,"STRONG",{});var U3t=s(lTe);rEr=r(U3t,"rembert"),U3t.forEach(t),tEr=r(tBe," \u2014 "),sU=n(tBe,"A",{href:!0});var J3t=s(sU);aEr=r(J3t,"TFRemBertForSequenceClassification"),J3t.forEach(t),nEr=r(tBe," (RemBERT model)"),tBe.forEach(t),sEr=i(ae),QC=n(ae,"LI",{});var aBe=s(QC);iTe=n(aBe,"STRONG",{});var Y3t=s(iTe);lEr=r(Y3t,"roberta"),Y3t.forEach(t),iEr=r(aBe," \u2014 "),lU=n(aBe,"A",{href:!0});var K3t=s(lU);dEr=r(K3t,"TFRobertaForSequenceClassification"),K3t.forEach(t),cEr=r(aBe," (RoBERTa model)"),aBe.forEach(t),mEr=i(ae),HC=n(ae,"LI",{});var nBe=s(HC);dTe=n(nBe,"STRONG",{});var Z3t=s(dTe);fEr=r(Z3t,"roformer"),Z3t.forEach(t),gEr=r(nBe," \u2014 "),iU=n(nBe,"A",{href:!0});var ewt=s(iU);hEr=r(ewt,"TFRoFormerForSequenceClassification"),ewt.forEach(t),uEr=r(nBe," (RoFormer model)"),nBe.forEach(t),pEr=i(ae),UC=n(ae,"LI",{});var sBe=s(UC);cTe=n(sBe,"STRONG",{});var owt=s(cTe);_Er=r(owt,"tapas"),owt.forEach(t),bEr=r(sBe," \u2014 "),dU=n(sBe,"A",{href:!0});var rwt=s(dU);vEr=r(rwt,"TFTapasForSequenceClassification"),rwt.forEach(t),FEr=r(sBe," (TAPAS model)"),sBe.forEach(t),TEr=i(ae),JC=n(ae,"LI",{});var lBe=s(JC);mTe=n(lBe,"STRONG",{});var twt=s(mTe);MEr=r(twt,"transfo-xl"),twt.forEach(t),EEr=r(lBe," \u2014 "),cU=n(lBe,"A",{href:!0});var awt=s(cU);CEr=r(awt,"TFTransfoXLForSequenceClassification"),awt.forEach(t),wEr=r(lBe," (Transformer-XL model)"),lBe.forEach(t),AEr=i(ae),YC=n(ae,"LI",{});var iBe=s(YC);fTe=n(iBe,"STRONG",{});var nwt=s(fTe);yEr=r(nwt,"xlm"),nwt.forEach(t),LEr=r(iBe," \u2014 "),mU=n(iBe,"A",{href:!0});var swt=s(mU);xEr=r(swt,"TFXLMForSequenceClassification"),swt.forEach(t),$Er=r(iBe," (XLM model)"),iBe.forEach(t),kEr=i(ae),KC=n(ae,"LI",{});var dBe=s(KC);gTe=n(dBe,"STRONG",{});var lwt=s(gTe);SEr=r(lwt,"xlm-roberta"),lwt.forEach(t),REr=r(dBe," \u2014 "),fU=n(dBe,"A",{href:!0});var iwt=s(fU);PEr=r(iwt,"TFXLMRobertaForSequenceClassification"),iwt.forEach(t),BEr=r(dBe," (XLM-RoBERTa model)"),dBe.forEach(t),IEr=i(ae),ZC=n(ae,"LI",{});var cBe=s(ZC);hTe=n(cBe,"STRONG",{});var dwt=s(hTe);NEr=r(dwt,"xlnet"),dwt.forEach(t),qEr=r(cBe," \u2014 "),gU=n(cBe,"A",{href:!0});var cwt=s(gU);jEr=r(cwt,"TFXLNetForSequenceClassification"),cwt.forEach(t),DEr=r(cBe," (XLNet model)"),cBe.forEach(t),ae.forEach(t),GEr=i(Al),T(e5.$$.fragment,Al),Al.forEach(t),wl.forEach(t),Nje=i(m),ic=n(m,"H2",{class:!0});var VGe=s(ic);o5=n(VGe,"A",{id:!0,class:!0,href:!0});var mwt=s(o5);uTe=n(mwt,"SPAN",{});var fwt=s(uTe);T(H7.$$.fragment,fwt),fwt.forEach(t),mwt.forEach(t),OEr=i(VGe),pTe=n(VGe,"SPAN",{});var gwt=s(pTe);VEr=r(gwt,"TFAutoModelForMultipleChoice"),gwt.forEach(t),VGe.forEach(t),qje=i(m),ar=n(m,"DIV",{class:!0});var yl=s(ar);T(U7.$$.fragment,yl),XEr=i(yl),dc=n(yl,"P",{});var See=s(dc);zEr=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hU=n(See,"A",{href:!0});var hwt=s(hU);WEr=r(hwt,"from_pretrained()"),hwt.forEach(t),QEr=r(See," class method or the "),uU=n(See,"A",{href:!0});var uwt=s(uU);HEr=r(uwt,"from_config()"),uwt.forEach(t),UEr=r(See,` class
method.`),See.forEach(t),JEr=i(yl),J7=n(yl,"P",{});var XGe=s(J7);YEr=r(XGe,"This class cannot be instantiated directly using "),_Te=n(XGe,"CODE",{});var pwt=s(_Te);KEr=r(pwt,"__init__()"),pwt.forEach(t),ZEr=r(XGe," (throws an error)."),XGe.forEach(t),eCr=i(yl),Pt=n(yl,"DIV",{class:!0});var XA=s(Pt);T(Y7.$$.fragment,XA),oCr=i(XA),bTe=n(XA,"P",{});var _wt=s(bTe);rCr=r(_wt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),_wt.forEach(t),tCr=i(XA),cc=n(XA,"P",{});var Ree=s(cc);aCr=r(Ree,`Note:
Loading a model from its configuration file does `),vTe=n(Ree,"STRONG",{});var bwt=s(vTe);nCr=r(bwt,"not"),bwt.forEach(t),sCr=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=n(Ree,"A",{href:!0});var vwt=s(pU);lCr=r(vwt,"from_pretrained()"),vwt.forEach(t),iCr=r(Ree," to load the model weights."),Ree.forEach(t),dCr=i(XA),T(r5.$$.fragment,XA),XA.forEach(t),cCr=i(yl),Sr=n(yl,"DIV",{class:!0});var Ll=s(Sr);T(K7.$$.fragment,Ll),mCr=i(Ll),FTe=n(Ll,"P",{});var Fwt=s(FTe);fCr=r(Fwt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Fwt.forEach(t),gCr=i(Ll),sn=n(Ll,"P",{});var zA=s(sn);hCr=r(zA,"The model class to instantiate is selected based on the "),TTe=n(zA,"CODE",{});var Twt=s(TTe);uCr=r(Twt,"model_type"),Twt.forEach(t),pCr=r(zA,` property of the config object (either
passed as an argument or loaded from `),MTe=n(zA,"CODE",{});var Mwt=s(MTe);_Cr=r(Mwt,"pretrained_model_name_or_path"),Mwt.forEach(t),bCr=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=n(zA,"CODE",{});var Ewt=s(ETe);vCr=r(Ewt,"pretrained_model_name_or_path"),Ewt.forEach(t),FCr=r(zA,":"),zA.forEach(t),TCr=i(Ll),ue=n(Ll,"UL",{});var be=s(ue);t5=n(be,"LI",{});var mBe=s(t5);CTe=n(mBe,"STRONG",{});var Cwt=s(CTe);MCr=r(Cwt,"albert"),Cwt.forEach(t),ECr=r(mBe," \u2014 "),_U=n(mBe,"A",{href:!0});var wwt=s(_U);CCr=r(wwt,"TFAlbertForMultipleChoice"),wwt.forEach(t),wCr=r(mBe," (ALBERT model)"),mBe.forEach(t),ACr=i(be),a5=n(be,"LI",{});var fBe=s(a5);wTe=n(fBe,"STRONG",{});var Awt=s(wTe);yCr=r(Awt,"bert"),Awt.forEach(t),LCr=r(fBe," \u2014 "),bU=n(fBe,"A",{href:!0});var ywt=s(bU);xCr=r(ywt,"TFBertForMultipleChoice"),ywt.forEach(t),$Cr=r(fBe," (BERT model)"),fBe.forEach(t),kCr=i(be),n5=n(be,"LI",{});var gBe=s(n5);ATe=n(gBe,"STRONG",{});var Lwt=s(ATe);SCr=r(Lwt,"camembert"),Lwt.forEach(t),RCr=r(gBe," \u2014 "),vU=n(gBe,"A",{href:!0});var xwt=s(vU);PCr=r(xwt,"TFCamembertForMultipleChoice"),xwt.forEach(t),BCr=r(gBe," (CamemBERT model)"),gBe.forEach(t),ICr=i(be),s5=n(be,"LI",{});var hBe=s(s5);yTe=n(hBe,"STRONG",{});var $wt=s(yTe);NCr=r($wt,"convbert"),$wt.forEach(t),qCr=r(hBe," \u2014 "),FU=n(hBe,"A",{href:!0});var kwt=s(FU);jCr=r(kwt,"TFConvBertForMultipleChoice"),kwt.forEach(t),DCr=r(hBe," (ConvBERT model)"),hBe.forEach(t),GCr=i(be),l5=n(be,"LI",{});var uBe=s(l5);LTe=n(uBe,"STRONG",{});var Swt=s(LTe);OCr=r(Swt,"distilbert"),Swt.forEach(t),VCr=r(uBe," \u2014 "),TU=n(uBe,"A",{href:!0});var Rwt=s(TU);XCr=r(Rwt,"TFDistilBertForMultipleChoice"),Rwt.forEach(t),zCr=r(uBe," (DistilBERT model)"),uBe.forEach(t),WCr=i(be),i5=n(be,"LI",{});var pBe=s(i5);xTe=n(pBe,"STRONG",{});var Pwt=s(xTe);QCr=r(Pwt,"electra"),Pwt.forEach(t),HCr=r(pBe," \u2014 "),MU=n(pBe,"A",{href:!0});var Bwt=s(MU);UCr=r(Bwt,"TFElectraForMultipleChoice"),Bwt.forEach(t),JCr=r(pBe," (ELECTRA model)"),pBe.forEach(t),YCr=i(be),d5=n(be,"LI",{});var _Be=s(d5);$Te=n(_Be,"STRONG",{});var Iwt=s($Te);KCr=r(Iwt,"flaubert"),Iwt.forEach(t),ZCr=r(_Be," \u2014 "),EU=n(_Be,"A",{href:!0});var Nwt=s(EU);e5r=r(Nwt,"TFFlaubertForMultipleChoice"),Nwt.forEach(t),o5r=r(_Be," (FlauBERT model)"),_Be.forEach(t),r5r=i(be),c5=n(be,"LI",{});var bBe=s(c5);kTe=n(bBe,"STRONG",{});var qwt=s(kTe);t5r=r(qwt,"funnel"),qwt.forEach(t),a5r=r(bBe," \u2014 "),CU=n(bBe,"A",{href:!0});var jwt=s(CU);n5r=r(jwt,"TFFunnelForMultipleChoice"),jwt.forEach(t),s5r=r(bBe," (Funnel Transformer model)"),bBe.forEach(t),l5r=i(be),m5=n(be,"LI",{});var vBe=s(m5);STe=n(vBe,"STRONG",{});var Dwt=s(STe);i5r=r(Dwt,"longformer"),Dwt.forEach(t),d5r=r(vBe," \u2014 "),wU=n(vBe,"A",{href:!0});var Gwt=s(wU);c5r=r(Gwt,"TFLongformerForMultipleChoice"),Gwt.forEach(t),m5r=r(vBe," (Longformer model)"),vBe.forEach(t),f5r=i(be),f5=n(be,"LI",{});var FBe=s(f5);RTe=n(FBe,"STRONG",{});var Owt=s(RTe);g5r=r(Owt,"mobilebert"),Owt.forEach(t),h5r=r(FBe," \u2014 "),AU=n(FBe,"A",{href:!0});var Vwt=s(AU);u5r=r(Vwt,"TFMobileBertForMultipleChoice"),Vwt.forEach(t),p5r=r(FBe," (MobileBERT model)"),FBe.forEach(t),_5r=i(be),g5=n(be,"LI",{});var TBe=s(g5);PTe=n(TBe,"STRONG",{});var Xwt=s(PTe);b5r=r(Xwt,"mpnet"),Xwt.forEach(t),v5r=r(TBe," \u2014 "),yU=n(TBe,"A",{href:!0});var zwt=s(yU);F5r=r(zwt,"TFMPNetForMultipleChoice"),zwt.forEach(t),T5r=r(TBe," (MPNet model)"),TBe.forEach(t),M5r=i(be),h5=n(be,"LI",{});var MBe=s(h5);BTe=n(MBe,"STRONG",{});var Wwt=s(BTe);E5r=r(Wwt,"rembert"),Wwt.forEach(t),C5r=r(MBe," \u2014 "),LU=n(MBe,"A",{href:!0});var Qwt=s(LU);w5r=r(Qwt,"TFRemBertForMultipleChoice"),Qwt.forEach(t),A5r=r(MBe," (RemBERT model)"),MBe.forEach(t),y5r=i(be),u5=n(be,"LI",{});var EBe=s(u5);ITe=n(EBe,"STRONG",{});var Hwt=s(ITe);L5r=r(Hwt,"roberta"),Hwt.forEach(t),x5r=r(EBe," \u2014 "),xU=n(EBe,"A",{href:!0});var Uwt=s(xU);$5r=r(Uwt,"TFRobertaForMultipleChoice"),Uwt.forEach(t),k5r=r(EBe," (RoBERTa model)"),EBe.forEach(t),S5r=i(be),p5=n(be,"LI",{});var CBe=s(p5);NTe=n(CBe,"STRONG",{});var Jwt=s(NTe);R5r=r(Jwt,"roformer"),Jwt.forEach(t),P5r=r(CBe," \u2014 "),$U=n(CBe,"A",{href:!0});var Ywt=s($U);B5r=r(Ywt,"TFRoFormerForMultipleChoice"),Ywt.forEach(t),I5r=r(CBe," (RoFormer model)"),CBe.forEach(t),N5r=i(be),_5=n(be,"LI",{});var wBe=s(_5);qTe=n(wBe,"STRONG",{});var Kwt=s(qTe);q5r=r(Kwt,"xlm"),Kwt.forEach(t),j5r=r(wBe," \u2014 "),kU=n(wBe,"A",{href:!0});var Zwt=s(kU);D5r=r(Zwt,"TFXLMForMultipleChoice"),Zwt.forEach(t),G5r=r(wBe," (XLM model)"),wBe.forEach(t),O5r=i(be),b5=n(be,"LI",{});var ABe=s(b5);jTe=n(ABe,"STRONG",{});var e0t=s(jTe);V5r=r(e0t,"xlm-roberta"),e0t.forEach(t),X5r=r(ABe," \u2014 "),SU=n(ABe,"A",{href:!0});var o0t=s(SU);z5r=r(o0t,"TFXLMRobertaForMultipleChoice"),o0t.forEach(t),W5r=r(ABe," (XLM-RoBERTa model)"),ABe.forEach(t),Q5r=i(be),v5=n(be,"LI",{});var yBe=s(v5);DTe=n(yBe,"STRONG",{});var r0t=s(DTe);H5r=r(r0t,"xlnet"),r0t.forEach(t),U5r=r(yBe," \u2014 "),RU=n(yBe,"A",{href:!0});var t0t=s(RU);J5r=r(t0t,"TFXLNetForMultipleChoice"),t0t.forEach(t),Y5r=r(yBe," (XLNet model)"),yBe.forEach(t),be.forEach(t),K5r=i(Ll),T(F5.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),jje=i(m),mc=n(m,"H2",{class:!0});var zGe=s(mc);T5=n(zGe,"A",{id:!0,class:!0,href:!0});var a0t=s(T5);GTe=n(a0t,"SPAN",{});var n0t=s(GTe);T(Z7.$$.fragment,n0t),n0t.forEach(t),a0t.forEach(t),Z5r=i(zGe),OTe=n(zGe,"SPAN",{});var s0t=s(OTe);e3r=r(s0t,"TFAutoModelForNextSentencePrediction"),s0t.forEach(t),zGe.forEach(t),Dje=i(m),nr=n(m,"DIV",{class:!0});var xl=s(nr);T(e9.$$.fragment,xl),o3r=i(xl),fc=n(xl,"P",{});var Pee=s(fc);r3r=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),PU=n(Pee,"A",{href:!0});var l0t=s(PU);t3r=r(l0t,"from_pretrained()"),l0t.forEach(t),a3r=r(Pee," class method or the "),BU=n(Pee,"A",{href:!0});var i0t=s(BU);n3r=r(i0t,"from_config()"),i0t.forEach(t),s3r=r(Pee,` class
method.`),Pee.forEach(t),l3r=i(xl),o9=n(xl,"P",{});var WGe=s(o9);i3r=r(WGe,"This class cannot be instantiated directly using "),VTe=n(WGe,"CODE",{});var d0t=s(VTe);d3r=r(d0t,"__init__()"),d0t.forEach(t),c3r=r(WGe," (throws an error)."),WGe.forEach(t),m3r=i(xl),Bt=n(xl,"DIV",{class:!0});var WA=s(Bt);T(r9.$$.fragment,WA),f3r=i(WA),XTe=n(WA,"P",{});var c0t=s(XTe);g3r=r(c0t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),c0t.forEach(t),h3r=i(WA),gc=n(WA,"P",{});var Bee=s(gc);u3r=r(Bee,`Note:
Loading a model from its configuration file does `),zTe=n(Bee,"STRONG",{});var m0t=s(zTe);p3r=r(m0t,"not"),m0t.forEach(t),_3r=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),IU=n(Bee,"A",{href:!0});var f0t=s(IU);b3r=r(f0t,"from_pretrained()"),f0t.forEach(t),v3r=r(Bee," to load the model weights."),Bee.forEach(t),F3r=i(WA),T(M5.$$.fragment,WA),WA.forEach(t),T3r=i(xl),Rr=n(xl,"DIV",{class:!0});var $l=s(Rr);T(t9.$$.fragment,$l),M3r=i($l),WTe=n($l,"P",{});var g0t=s(WTe);E3r=r(g0t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),g0t.forEach(t),C3r=i($l),ln=n($l,"P",{});var QA=s(ln);w3r=r(QA,"The model class to instantiate is selected based on the "),QTe=n(QA,"CODE",{});var h0t=s(QTe);A3r=r(h0t,"model_type"),h0t.forEach(t),y3r=r(QA,` property of the config object (either
passed as an argument or loaded from `),HTe=n(QA,"CODE",{});var u0t=s(HTe);L3r=r(u0t,"pretrained_model_name_or_path"),u0t.forEach(t),x3r=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UTe=n(QA,"CODE",{});var p0t=s(UTe);$3r=r(p0t,"pretrained_model_name_or_path"),p0t.forEach(t),k3r=r(QA,":"),QA.forEach(t),S3r=i($l),a9=n($l,"UL",{});var QGe=s(a9);E5=n(QGe,"LI",{});var LBe=s(E5);JTe=n(LBe,"STRONG",{});var _0t=s(JTe);R3r=r(_0t,"bert"),_0t.forEach(t),P3r=r(LBe," \u2014 "),NU=n(LBe,"A",{href:!0});var b0t=s(NU);B3r=r(b0t,"TFBertForNextSentencePrediction"),b0t.forEach(t),I3r=r(LBe," (BERT model)"),LBe.forEach(t),N3r=i(QGe),C5=n(QGe,"LI",{});var xBe=s(C5);YTe=n(xBe,"STRONG",{});var v0t=s(YTe);q3r=r(v0t,"mobilebert"),v0t.forEach(t),j3r=r(xBe," \u2014 "),qU=n(xBe,"A",{href:!0});var F0t=s(qU);D3r=r(F0t,"TFMobileBertForNextSentencePrediction"),F0t.forEach(t),G3r=r(xBe," (MobileBERT model)"),xBe.forEach(t),QGe.forEach(t),O3r=i($l),T(w5.$$.fragment,$l),$l.forEach(t),xl.forEach(t),Gje=i(m),hc=n(m,"H2",{class:!0});var HGe=s(hc);A5=n(HGe,"A",{id:!0,class:!0,href:!0});var T0t=s(A5);KTe=n(T0t,"SPAN",{});var M0t=s(KTe);T(n9.$$.fragment,M0t),M0t.forEach(t),T0t.forEach(t),V3r=i(HGe),ZTe=n(HGe,"SPAN",{});var E0t=s(ZTe);X3r=r(E0t,"TFAutoModelForTableQuestionAnswering"),E0t.forEach(t),HGe.forEach(t),Oje=i(m),sr=n(m,"DIV",{class:!0});var kl=s(sr);T(s9.$$.fragment,kl),z3r=i(kl),uc=n(kl,"P",{});var Iee=s(uc);W3r=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),jU=n(Iee,"A",{href:!0});var C0t=s(jU);Q3r=r(C0t,"from_pretrained()"),C0t.forEach(t),H3r=r(Iee," class method or the "),DU=n(Iee,"A",{href:!0});var w0t=s(DU);U3r=r(w0t,"from_config()"),w0t.forEach(t),J3r=r(Iee,` class
method.`),Iee.forEach(t),Y3r=i(kl),l9=n(kl,"P",{});var UGe=s(l9);K3r=r(UGe,"This class cannot be instantiated directly using "),eMe=n(UGe,"CODE",{});var A0t=s(eMe);Z3r=r(A0t,"__init__()"),A0t.forEach(t),ewr=r(UGe," (throws an error)."),UGe.forEach(t),owr=i(kl),It=n(kl,"DIV",{class:!0});var HA=s(It);T(i9.$$.fragment,HA),rwr=i(HA),oMe=n(HA,"P",{});var y0t=s(oMe);twr=r(y0t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),y0t.forEach(t),awr=i(HA),pc=n(HA,"P",{});var Nee=s(pc);nwr=r(Nee,`Note:
Loading a model from its configuration file does `),rMe=n(Nee,"STRONG",{});var L0t=s(rMe);swr=r(L0t,"not"),L0t.forEach(t),lwr=r(Nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=n(Nee,"A",{href:!0});var x0t=s(GU);iwr=r(x0t,"from_pretrained()"),x0t.forEach(t),dwr=r(Nee," to load the model weights."),Nee.forEach(t),cwr=i(HA),T(y5.$$.fragment,HA),HA.forEach(t),mwr=i(kl),Pr=n(kl,"DIV",{class:!0});var Sl=s(Pr);T(d9.$$.fragment,Sl),fwr=i(Sl),tMe=n(Sl,"P",{});var $0t=s(tMe);gwr=r($0t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$0t.forEach(t),hwr=i(Sl),dn=n(Sl,"P",{});var UA=s(dn);uwr=r(UA,"The model class to instantiate is selected based on the "),aMe=n(UA,"CODE",{});var k0t=s(aMe);pwr=r(k0t,"model_type"),k0t.forEach(t),_wr=r(UA,` property of the config object (either
passed as an argument or loaded from `),nMe=n(UA,"CODE",{});var S0t=s(nMe);bwr=r(S0t,"pretrained_model_name_or_path"),S0t.forEach(t),vwr=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sMe=n(UA,"CODE",{});var R0t=s(sMe);Fwr=r(R0t,"pretrained_model_name_or_path"),R0t.forEach(t),Twr=r(UA,":"),UA.forEach(t),Mwr=i(Sl),lMe=n(Sl,"UL",{});var P0t=s(lMe);L5=n(P0t,"LI",{});var $Be=s(L5);iMe=n($Be,"STRONG",{});var B0t=s(iMe);Ewr=r(B0t,"tapas"),B0t.forEach(t),Cwr=r($Be," \u2014 "),OU=n($Be,"A",{href:!0});var I0t=s(OU);wwr=r(I0t,"TFTapasForQuestionAnswering"),I0t.forEach(t),Awr=r($Be," (TAPAS model)"),$Be.forEach(t),P0t.forEach(t),ywr=i(Sl),T(x5.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),Vje=i(m),_c=n(m,"H2",{class:!0});var JGe=s(_c);$5=n(JGe,"A",{id:!0,class:!0,href:!0});var N0t=s($5);dMe=n(N0t,"SPAN",{});var q0t=s(dMe);T(c9.$$.fragment,q0t),q0t.forEach(t),N0t.forEach(t),Lwr=i(JGe),cMe=n(JGe,"SPAN",{});var j0t=s(cMe);xwr=r(j0t,"TFAutoModelForTokenClassification"),j0t.forEach(t),JGe.forEach(t),Xje=i(m),lr=n(m,"DIV",{class:!0});var Rl=s(lr);T(m9.$$.fragment,Rl),$wr=i(Rl),bc=n(Rl,"P",{});var qee=s(bc);kwr=r(qee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VU=n(qee,"A",{href:!0});var D0t=s(VU);Swr=r(D0t,"from_pretrained()"),D0t.forEach(t),Rwr=r(qee," class method or the "),XU=n(qee,"A",{href:!0});var G0t=s(XU);Pwr=r(G0t,"from_config()"),G0t.forEach(t),Bwr=r(qee,` class
method.`),qee.forEach(t),Iwr=i(Rl),f9=n(Rl,"P",{});var YGe=s(f9);Nwr=r(YGe,"This class cannot be instantiated directly using "),mMe=n(YGe,"CODE",{});var O0t=s(mMe);qwr=r(O0t,"__init__()"),O0t.forEach(t),jwr=r(YGe," (throws an error)."),YGe.forEach(t),Dwr=i(Rl),Nt=n(Rl,"DIV",{class:!0});var JA=s(Nt);T(g9.$$.fragment,JA),Gwr=i(JA),fMe=n(JA,"P",{});var V0t=s(fMe);Owr=r(V0t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),V0t.forEach(t),Vwr=i(JA),vc=n(JA,"P",{});var jee=s(vc);Xwr=r(jee,`Note:
Loading a model from its configuration file does `),gMe=n(jee,"STRONG",{});var X0t=s(gMe);zwr=r(X0t,"not"),X0t.forEach(t),Wwr=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),zU=n(jee,"A",{href:!0});var z0t=s(zU);Qwr=r(z0t,"from_pretrained()"),z0t.forEach(t),Hwr=r(jee," to load the model weights."),jee.forEach(t),Uwr=i(JA),T(k5.$$.fragment,JA),JA.forEach(t),Jwr=i(Rl),Br=n(Rl,"DIV",{class:!0});var Pl=s(Br);T(h9.$$.fragment,Pl),Ywr=i(Pl),hMe=n(Pl,"P",{});var W0t=s(hMe);Kwr=r(W0t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),W0t.forEach(t),Zwr=i(Pl),cn=n(Pl,"P",{});var YA=s(cn);e0r=r(YA,"The model class to instantiate is selected based on the "),uMe=n(YA,"CODE",{});var Q0t=s(uMe);o0r=r(Q0t,"model_type"),Q0t.forEach(t),r0r=r(YA,` property of the config object (either
passed as an argument or loaded from `),pMe=n(YA,"CODE",{});var H0t=s(pMe);t0r=r(H0t,"pretrained_model_name_or_path"),H0t.forEach(t),a0r=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Me=n(YA,"CODE",{});var U0t=s(_Me);n0r=r(U0t,"pretrained_model_name_or_path"),U0t.forEach(t),s0r=r(YA,":"),YA.forEach(t),l0r=i(Pl),de=n(Pl,"UL",{});var fe=s(de);S5=n(fe,"LI",{});var kBe=s(S5);bMe=n(kBe,"STRONG",{});var J0t=s(bMe);i0r=r(J0t,"albert"),J0t.forEach(t),d0r=r(kBe," \u2014 "),WU=n(kBe,"A",{href:!0});var Y0t=s(WU);c0r=r(Y0t,"TFAlbertForTokenClassification"),Y0t.forEach(t),m0r=r(kBe," (ALBERT model)"),kBe.forEach(t),f0r=i(fe),R5=n(fe,"LI",{});var SBe=s(R5);vMe=n(SBe,"STRONG",{});var K0t=s(vMe);g0r=r(K0t,"bert"),K0t.forEach(t),h0r=r(SBe," \u2014 "),QU=n(SBe,"A",{href:!0});var Z0t=s(QU);u0r=r(Z0t,"TFBertForTokenClassification"),Z0t.forEach(t),p0r=r(SBe," (BERT model)"),SBe.forEach(t),_0r=i(fe),P5=n(fe,"LI",{});var RBe=s(P5);FMe=n(RBe,"STRONG",{});var e6t=s(FMe);b0r=r(e6t,"camembert"),e6t.forEach(t),v0r=r(RBe," \u2014 "),HU=n(RBe,"A",{href:!0});var o6t=s(HU);F0r=r(o6t,"TFCamembertForTokenClassification"),o6t.forEach(t),T0r=r(RBe," (CamemBERT model)"),RBe.forEach(t),M0r=i(fe),B5=n(fe,"LI",{});var PBe=s(B5);TMe=n(PBe,"STRONG",{});var r6t=s(TMe);E0r=r(r6t,"convbert"),r6t.forEach(t),C0r=r(PBe," \u2014 "),UU=n(PBe,"A",{href:!0});var t6t=s(UU);w0r=r(t6t,"TFConvBertForTokenClassification"),t6t.forEach(t),A0r=r(PBe," (ConvBERT model)"),PBe.forEach(t),y0r=i(fe),I5=n(fe,"LI",{});var BBe=s(I5);MMe=n(BBe,"STRONG",{});var a6t=s(MMe);L0r=r(a6t,"deberta"),a6t.forEach(t),x0r=r(BBe," \u2014 "),JU=n(BBe,"A",{href:!0});var n6t=s(JU);$0r=r(n6t,"TFDebertaForTokenClassification"),n6t.forEach(t),k0r=r(BBe," (DeBERTa model)"),BBe.forEach(t),S0r=i(fe),N5=n(fe,"LI",{});var IBe=s(N5);EMe=n(IBe,"STRONG",{});var s6t=s(EMe);R0r=r(s6t,"deberta-v2"),s6t.forEach(t),P0r=r(IBe," \u2014 "),YU=n(IBe,"A",{href:!0});var l6t=s(YU);B0r=r(l6t,"TFDebertaV2ForTokenClassification"),l6t.forEach(t),I0r=r(IBe," (DeBERTa-v2 model)"),IBe.forEach(t),N0r=i(fe),q5=n(fe,"LI",{});var NBe=s(q5);CMe=n(NBe,"STRONG",{});var i6t=s(CMe);q0r=r(i6t,"distilbert"),i6t.forEach(t),j0r=r(NBe," \u2014 "),KU=n(NBe,"A",{href:!0});var d6t=s(KU);D0r=r(d6t,"TFDistilBertForTokenClassification"),d6t.forEach(t),G0r=r(NBe," (DistilBERT model)"),NBe.forEach(t),O0r=i(fe),j5=n(fe,"LI",{});var qBe=s(j5);wMe=n(qBe,"STRONG",{});var c6t=s(wMe);V0r=r(c6t,"electra"),c6t.forEach(t),X0r=r(qBe," \u2014 "),ZU=n(qBe,"A",{href:!0});var m6t=s(ZU);z0r=r(m6t,"TFElectraForTokenClassification"),m6t.forEach(t),W0r=r(qBe," (ELECTRA model)"),qBe.forEach(t),Q0r=i(fe),D5=n(fe,"LI",{});var jBe=s(D5);AMe=n(jBe,"STRONG",{});var f6t=s(AMe);H0r=r(f6t,"flaubert"),f6t.forEach(t),U0r=r(jBe," \u2014 "),eJ=n(jBe,"A",{href:!0});var g6t=s(eJ);J0r=r(g6t,"TFFlaubertForTokenClassification"),g6t.forEach(t),Y0r=r(jBe," (FlauBERT model)"),jBe.forEach(t),K0r=i(fe),G5=n(fe,"LI",{});var DBe=s(G5);yMe=n(DBe,"STRONG",{});var h6t=s(yMe);Z0r=r(h6t,"funnel"),h6t.forEach(t),e6r=r(DBe," \u2014 "),oJ=n(DBe,"A",{href:!0});var u6t=s(oJ);o6r=r(u6t,"TFFunnelForTokenClassification"),u6t.forEach(t),r6r=r(DBe," (Funnel Transformer model)"),DBe.forEach(t),t6r=i(fe),O5=n(fe,"LI",{});var GBe=s(O5);LMe=n(GBe,"STRONG",{});var p6t=s(LMe);a6r=r(p6t,"layoutlm"),p6t.forEach(t),n6r=r(GBe," \u2014 "),rJ=n(GBe,"A",{href:!0});var _6t=s(rJ);s6r=r(_6t,"TFLayoutLMForTokenClassification"),_6t.forEach(t),l6r=r(GBe," (LayoutLM model)"),GBe.forEach(t),i6r=i(fe),V5=n(fe,"LI",{});var OBe=s(V5);xMe=n(OBe,"STRONG",{});var b6t=s(xMe);d6r=r(b6t,"longformer"),b6t.forEach(t),c6r=r(OBe," \u2014 "),tJ=n(OBe,"A",{href:!0});var v6t=s(tJ);m6r=r(v6t,"TFLongformerForTokenClassification"),v6t.forEach(t),f6r=r(OBe," (Longformer model)"),OBe.forEach(t),g6r=i(fe),X5=n(fe,"LI",{});var VBe=s(X5);$Me=n(VBe,"STRONG",{});var F6t=s($Me);h6r=r(F6t,"mobilebert"),F6t.forEach(t),u6r=r(VBe," \u2014 "),aJ=n(VBe,"A",{href:!0});var T6t=s(aJ);p6r=r(T6t,"TFMobileBertForTokenClassification"),T6t.forEach(t),_6r=r(VBe," (MobileBERT model)"),VBe.forEach(t),b6r=i(fe),z5=n(fe,"LI",{});var XBe=s(z5);kMe=n(XBe,"STRONG",{});var M6t=s(kMe);v6r=r(M6t,"mpnet"),M6t.forEach(t),F6r=r(XBe," \u2014 "),nJ=n(XBe,"A",{href:!0});var E6t=s(nJ);T6r=r(E6t,"TFMPNetForTokenClassification"),E6t.forEach(t),M6r=r(XBe," (MPNet model)"),XBe.forEach(t),E6r=i(fe),W5=n(fe,"LI",{});var zBe=s(W5);SMe=n(zBe,"STRONG",{});var C6t=s(SMe);C6r=r(C6t,"rembert"),C6t.forEach(t),w6r=r(zBe," \u2014 "),sJ=n(zBe,"A",{href:!0});var w6t=s(sJ);A6r=r(w6t,"TFRemBertForTokenClassification"),w6t.forEach(t),y6r=r(zBe," (RemBERT model)"),zBe.forEach(t),L6r=i(fe),Q5=n(fe,"LI",{});var WBe=s(Q5);RMe=n(WBe,"STRONG",{});var A6t=s(RMe);x6r=r(A6t,"roberta"),A6t.forEach(t),$6r=r(WBe," \u2014 "),lJ=n(WBe,"A",{href:!0});var y6t=s(lJ);k6r=r(y6t,"TFRobertaForTokenClassification"),y6t.forEach(t),S6r=r(WBe," (RoBERTa model)"),WBe.forEach(t),R6r=i(fe),H5=n(fe,"LI",{});var QBe=s(H5);PMe=n(QBe,"STRONG",{});var L6t=s(PMe);P6r=r(L6t,"roformer"),L6t.forEach(t),B6r=r(QBe," \u2014 "),iJ=n(QBe,"A",{href:!0});var x6t=s(iJ);I6r=r(x6t,"TFRoFormerForTokenClassification"),x6t.forEach(t),N6r=r(QBe," (RoFormer model)"),QBe.forEach(t),q6r=i(fe),U5=n(fe,"LI",{});var HBe=s(U5);BMe=n(HBe,"STRONG",{});var $6t=s(BMe);j6r=r($6t,"xlm"),$6t.forEach(t),D6r=r(HBe," \u2014 "),dJ=n(HBe,"A",{href:!0});var k6t=s(dJ);G6r=r(k6t,"TFXLMForTokenClassification"),k6t.forEach(t),O6r=r(HBe," (XLM model)"),HBe.forEach(t),V6r=i(fe),J5=n(fe,"LI",{});var UBe=s(J5);IMe=n(UBe,"STRONG",{});var S6t=s(IMe);X6r=r(S6t,"xlm-roberta"),S6t.forEach(t),z6r=r(UBe," \u2014 "),cJ=n(UBe,"A",{href:!0});var R6t=s(cJ);W6r=r(R6t,"TFXLMRobertaForTokenClassification"),R6t.forEach(t),Q6r=r(UBe," (XLM-RoBERTa model)"),UBe.forEach(t),H6r=i(fe),Y5=n(fe,"LI",{});var JBe=s(Y5);NMe=n(JBe,"STRONG",{});var P6t=s(NMe);U6r=r(P6t,"xlnet"),P6t.forEach(t),J6r=r(JBe," \u2014 "),mJ=n(JBe,"A",{href:!0});var B6t=s(mJ);Y6r=r(B6t,"TFXLNetForTokenClassification"),B6t.forEach(t),K6r=r(JBe," (XLNet model)"),JBe.forEach(t),fe.forEach(t),Z6r=i(Pl),T(K5.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),zje=i(m),Fc=n(m,"H2",{class:!0});var KGe=s(Fc);Z5=n(KGe,"A",{id:!0,class:!0,href:!0});var I6t=s(Z5);qMe=n(I6t,"SPAN",{});var N6t=s(qMe);T(u9.$$.fragment,N6t),N6t.forEach(t),I6t.forEach(t),eAr=i(KGe),jMe=n(KGe,"SPAN",{});var q6t=s(jMe);oAr=r(q6t,"TFAutoModelForQuestionAnswering"),q6t.forEach(t),KGe.forEach(t),Wje=i(m),ir=n(m,"DIV",{class:!0});var Bl=s(ir);T(p9.$$.fragment,Bl),rAr=i(Bl),Tc=n(Bl,"P",{});var Dee=s(Tc);tAr=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),fJ=n(Dee,"A",{href:!0});var j6t=s(fJ);aAr=r(j6t,"from_pretrained()"),j6t.forEach(t),nAr=r(Dee," class method or the "),gJ=n(Dee,"A",{href:!0});var D6t=s(gJ);sAr=r(D6t,"from_config()"),D6t.forEach(t),lAr=r(Dee,` class
method.`),Dee.forEach(t),iAr=i(Bl),_9=n(Bl,"P",{});var ZGe=s(_9);dAr=r(ZGe,"This class cannot be instantiated directly using "),DMe=n(ZGe,"CODE",{});var G6t=s(DMe);cAr=r(G6t,"__init__()"),G6t.forEach(t),mAr=r(ZGe," (throws an error)."),ZGe.forEach(t),fAr=i(Bl),qt=n(Bl,"DIV",{class:!0});var KA=s(qt);T(b9.$$.fragment,KA),gAr=i(KA),GMe=n(KA,"P",{});var O6t=s(GMe);hAr=r(O6t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),O6t.forEach(t),uAr=i(KA),Mc=n(KA,"P",{});var Gee=s(Mc);pAr=r(Gee,`Note:
Loading a model from its configuration file does `),OMe=n(Gee,"STRONG",{});var V6t=s(OMe);_Ar=r(V6t,"not"),V6t.forEach(t),bAr=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=n(Gee,"A",{href:!0});var X6t=s(hJ);vAr=r(X6t,"from_pretrained()"),X6t.forEach(t),FAr=r(Gee," to load the model weights."),Gee.forEach(t),TAr=i(KA),T(e3.$$.fragment,KA),KA.forEach(t),MAr=i(Bl),Ir=n(Bl,"DIV",{class:!0});var Il=s(Ir);T(v9.$$.fragment,Il),EAr=i(Il),VMe=n(Il,"P",{});var z6t=s(VMe);CAr=r(z6t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),z6t.forEach(t),wAr=i(Il),mn=n(Il,"P",{});var ZA=s(mn);AAr=r(ZA,"The model class to instantiate is selected based on the "),XMe=n(ZA,"CODE",{});var W6t=s(XMe);yAr=r(W6t,"model_type"),W6t.forEach(t),LAr=r(ZA,` property of the config object (either
passed as an argument or loaded from `),zMe=n(ZA,"CODE",{});var Q6t=s(zMe);xAr=r(Q6t,"pretrained_model_name_or_path"),Q6t.forEach(t),$Ar=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WMe=n(ZA,"CODE",{});var H6t=s(WMe);kAr=r(H6t,"pretrained_model_name_or_path"),H6t.forEach(t),SAr=r(ZA,":"),ZA.forEach(t),RAr=i(Il),ce=n(Il,"UL",{});var ge=s(ce);o3=n(ge,"LI",{});var YBe=s(o3);QMe=n(YBe,"STRONG",{});var U6t=s(QMe);PAr=r(U6t,"albert"),U6t.forEach(t),BAr=r(YBe," \u2014 "),uJ=n(YBe,"A",{href:!0});var J6t=s(uJ);IAr=r(J6t,"TFAlbertForQuestionAnswering"),J6t.forEach(t),NAr=r(YBe," (ALBERT model)"),YBe.forEach(t),qAr=i(ge),r3=n(ge,"LI",{});var KBe=s(r3);HMe=n(KBe,"STRONG",{});var Y6t=s(HMe);jAr=r(Y6t,"bert"),Y6t.forEach(t),DAr=r(KBe," \u2014 "),pJ=n(KBe,"A",{href:!0});var K6t=s(pJ);GAr=r(K6t,"TFBertForQuestionAnswering"),K6t.forEach(t),OAr=r(KBe," (BERT model)"),KBe.forEach(t),VAr=i(ge),t3=n(ge,"LI",{});var ZBe=s(t3);UMe=n(ZBe,"STRONG",{});var Z6t=s(UMe);XAr=r(Z6t,"camembert"),Z6t.forEach(t),zAr=r(ZBe," \u2014 "),_J=n(ZBe,"A",{href:!0});var eAt=s(_J);WAr=r(eAt,"TFCamembertForQuestionAnswering"),eAt.forEach(t),QAr=r(ZBe," (CamemBERT model)"),ZBe.forEach(t),HAr=i(ge),a3=n(ge,"LI",{});var eIe=s(a3);JMe=n(eIe,"STRONG",{});var oAt=s(JMe);UAr=r(oAt,"convbert"),oAt.forEach(t),JAr=r(eIe," \u2014 "),bJ=n(eIe,"A",{href:!0});var rAt=s(bJ);YAr=r(rAt,"TFConvBertForQuestionAnswering"),rAt.forEach(t),KAr=r(eIe," (ConvBERT model)"),eIe.forEach(t),ZAr=i(ge),n3=n(ge,"LI",{});var oIe=s(n3);YMe=n(oIe,"STRONG",{});var tAt=s(YMe);eyr=r(tAt,"deberta"),tAt.forEach(t),oyr=r(oIe," \u2014 "),vJ=n(oIe,"A",{href:!0});var aAt=s(vJ);ryr=r(aAt,"TFDebertaForQuestionAnswering"),aAt.forEach(t),tyr=r(oIe," (DeBERTa model)"),oIe.forEach(t),ayr=i(ge),s3=n(ge,"LI",{});var rIe=s(s3);KMe=n(rIe,"STRONG",{});var nAt=s(KMe);nyr=r(nAt,"deberta-v2"),nAt.forEach(t),syr=r(rIe," \u2014 "),FJ=n(rIe,"A",{href:!0});var sAt=s(FJ);lyr=r(sAt,"TFDebertaV2ForQuestionAnswering"),sAt.forEach(t),iyr=r(rIe," (DeBERTa-v2 model)"),rIe.forEach(t),dyr=i(ge),l3=n(ge,"LI",{});var tIe=s(l3);ZMe=n(tIe,"STRONG",{});var lAt=s(ZMe);cyr=r(lAt,"distilbert"),lAt.forEach(t),myr=r(tIe," \u2014 "),TJ=n(tIe,"A",{href:!0});var iAt=s(TJ);fyr=r(iAt,"TFDistilBertForQuestionAnswering"),iAt.forEach(t),gyr=r(tIe," (DistilBERT model)"),tIe.forEach(t),hyr=i(ge),i3=n(ge,"LI",{});var aIe=s(i3);e4e=n(aIe,"STRONG",{});var dAt=s(e4e);uyr=r(dAt,"electra"),dAt.forEach(t),pyr=r(aIe," \u2014 "),MJ=n(aIe,"A",{href:!0});var cAt=s(MJ);_yr=r(cAt,"TFElectraForQuestionAnswering"),cAt.forEach(t),byr=r(aIe," (ELECTRA model)"),aIe.forEach(t),vyr=i(ge),d3=n(ge,"LI",{});var nIe=s(d3);o4e=n(nIe,"STRONG",{});var mAt=s(o4e);Fyr=r(mAt,"flaubert"),mAt.forEach(t),Tyr=r(nIe," \u2014 "),EJ=n(nIe,"A",{href:!0});var fAt=s(EJ);Myr=r(fAt,"TFFlaubertForQuestionAnsweringSimple"),fAt.forEach(t),Eyr=r(nIe," (FlauBERT model)"),nIe.forEach(t),Cyr=i(ge),c3=n(ge,"LI",{});var sIe=s(c3);r4e=n(sIe,"STRONG",{});var gAt=s(r4e);wyr=r(gAt,"funnel"),gAt.forEach(t),Ayr=r(sIe," \u2014 "),CJ=n(sIe,"A",{href:!0});var hAt=s(CJ);yyr=r(hAt,"TFFunnelForQuestionAnswering"),hAt.forEach(t),Lyr=r(sIe," (Funnel Transformer model)"),sIe.forEach(t),xyr=i(ge),m3=n(ge,"LI",{});var lIe=s(m3);t4e=n(lIe,"STRONG",{});var uAt=s(t4e);$yr=r(uAt,"gptj"),uAt.forEach(t),kyr=r(lIe," \u2014 "),wJ=n(lIe,"A",{href:!0});var pAt=s(wJ);Syr=r(pAt,"TFGPTJForQuestionAnswering"),pAt.forEach(t),Ryr=r(lIe," (GPT-J model)"),lIe.forEach(t),Pyr=i(ge),f3=n(ge,"LI",{});var iIe=s(f3);a4e=n(iIe,"STRONG",{});var _At=s(a4e);Byr=r(_At,"longformer"),_At.forEach(t),Iyr=r(iIe," \u2014 "),AJ=n(iIe,"A",{href:!0});var bAt=s(AJ);Nyr=r(bAt,"TFLongformerForQuestionAnswering"),bAt.forEach(t),qyr=r(iIe," (Longformer model)"),iIe.forEach(t),jyr=i(ge),g3=n(ge,"LI",{});var dIe=s(g3);n4e=n(dIe,"STRONG",{});var vAt=s(n4e);Dyr=r(vAt,"mobilebert"),vAt.forEach(t),Gyr=r(dIe," \u2014 "),yJ=n(dIe,"A",{href:!0});var FAt=s(yJ);Oyr=r(FAt,"TFMobileBertForQuestionAnswering"),FAt.forEach(t),Vyr=r(dIe," (MobileBERT model)"),dIe.forEach(t),Xyr=i(ge),h3=n(ge,"LI",{});var cIe=s(h3);s4e=n(cIe,"STRONG",{});var TAt=s(s4e);zyr=r(TAt,"mpnet"),TAt.forEach(t),Wyr=r(cIe," \u2014 "),LJ=n(cIe,"A",{href:!0});var MAt=s(LJ);Qyr=r(MAt,"TFMPNetForQuestionAnswering"),MAt.forEach(t),Hyr=r(cIe," (MPNet model)"),cIe.forEach(t),Uyr=i(ge),u3=n(ge,"LI",{});var mIe=s(u3);l4e=n(mIe,"STRONG",{});var EAt=s(l4e);Jyr=r(EAt,"rembert"),EAt.forEach(t),Yyr=r(mIe," \u2014 "),xJ=n(mIe,"A",{href:!0});var CAt=s(xJ);Kyr=r(CAt,"TFRemBertForQuestionAnswering"),CAt.forEach(t),Zyr=r(mIe," (RemBERT model)"),mIe.forEach(t),eLr=i(ge),p3=n(ge,"LI",{});var fIe=s(p3);i4e=n(fIe,"STRONG",{});var wAt=s(i4e);oLr=r(wAt,"roberta"),wAt.forEach(t),rLr=r(fIe," \u2014 "),$J=n(fIe,"A",{href:!0});var AAt=s($J);tLr=r(AAt,"TFRobertaForQuestionAnswering"),AAt.forEach(t),aLr=r(fIe," (RoBERTa model)"),fIe.forEach(t),nLr=i(ge),_3=n(ge,"LI",{});var gIe=s(_3);d4e=n(gIe,"STRONG",{});var yAt=s(d4e);sLr=r(yAt,"roformer"),yAt.forEach(t),lLr=r(gIe," \u2014 "),kJ=n(gIe,"A",{href:!0});var LAt=s(kJ);iLr=r(LAt,"TFRoFormerForQuestionAnswering"),LAt.forEach(t),dLr=r(gIe," (RoFormer model)"),gIe.forEach(t),cLr=i(ge),b3=n(ge,"LI",{});var hIe=s(b3);c4e=n(hIe,"STRONG",{});var xAt=s(c4e);mLr=r(xAt,"xlm"),xAt.forEach(t),fLr=r(hIe," \u2014 "),SJ=n(hIe,"A",{href:!0});var $At=s(SJ);gLr=r($At,"TFXLMForQuestionAnsweringSimple"),$At.forEach(t),hLr=r(hIe," (XLM model)"),hIe.forEach(t),uLr=i(ge),v3=n(ge,"LI",{});var uIe=s(v3);m4e=n(uIe,"STRONG",{});var kAt=s(m4e);pLr=r(kAt,"xlm-roberta"),kAt.forEach(t),_Lr=r(uIe," \u2014 "),RJ=n(uIe,"A",{href:!0});var SAt=s(RJ);bLr=r(SAt,"TFXLMRobertaForQuestionAnswering"),SAt.forEach(t),vLr=r(uIe," (XLM-RoBERTa model)"),uIe.forEach(t),FLr=i(ge),F3=n(ge,"LI",{});var pIe=s(F3);f4e=n(pIe,"STRONG",{});var RAt=s(f4e);TLr=r(RAt,"xlnet"),RAt.forEach(t),MLr=r(pIe," \u2014 "),PJ=n(pIe,"A",{href:!0});var PAt=s(PJ);ELr=r(PAt,"TFXLNetForQuestionAnsweringSimple"),PAt.forEach(t),CLr=r(pIe," (XLNet model)"),pIe.forEach(t),ge.forEach(t),wLr=i(Il),T(T3.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),Qje=i(m),Ec=n(m,"H2",{class:!0});var eOe=s(Ec);M3=n(eOe,"A",{id:!0,class:!0,href:!0});var BAt=s(M3);g4e=n(BAt,"SPAN",{});var IAt=s(g4e);T(F9.$$.fragment,IAt),IAt.forEach(t),BAt.forEach(t),ALr=i(eOe),h4e=n(eOe,"SPAN",{});var NAt=s(h4e);yLr=r(NAt,"TFAutoModelForVision2Seq"),NAt.forEach(t),eOe.forEach(t),Hje=i(m),dr=n(m,"DIV",{class:!0});var Nl=s(dr);T(T9.$$.fragment,Nl),LLr=i(Nl),Cc=n(Nl,"P",{});var Oee=s(Cc);xLr=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),BJ=n(Oee,"A",{href:!0});var qAt=s(BJ);$Lr=r(qAt,"from_pretrained()"),qAt.forEach(t),kLr=r(Oee," class method or the "),IJ=n(Oee,"A",{href:!0});var jAt=s(IJ);SLr=r(jAt,"from_config()"),jAt.forEach(t),RLr=r(Oee,` class
method.`),Oee.forEach(t),PLr=i(Nl),M9=n(Nl,"P",{});var oOe=s(M9);BLr=r(oOe,"This class cannot be instantiated directly using "),u4e=n(oOe,"CODE",{});var DAt=s(u4e);ILr=r(DAt,"__init__()"),DAt.forEach(t),NLr=r(oOe," (throws an error)."),oOe.forEach(t),qLr=i(Nl),jt=n(Nl,"DIV",{class:!0});var ey=s(jt);T(E9.$$.fragment,ey),jLr=i(ey),p4e=n(ey,"P",{});var GAt=s(p4e);DLr=r(GAt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),GAt.forEach(t),GLr=i(ey),wc=n(ey,"P",{});var Vee=s(wc);OLr=r(Vee,`Note:
Loading a model from its configuration file does `),_4e=n(Vee,"STRONG",{});var OAt=s(_4e);VLr=r(OAt,"not"),OAt.forEach(t),XLr=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),NJ=n(Vee,"A",{href:!0});var VAt=s(NJ);zLr=r(VAt,"from_pretrained()"),VAt.forEach(t),WLr=r(Vee," to load the model weights."),Vee.forEach(t),QLr=i(ey),T(E3.$$.fragment,ey),ey.forEach(t),HLr=i(Nl),Nr=n(Nl,"DIV",{class:!0});var ql=s(Nr);T(C9.$$.fragment,ql),ULr=i(ql),b4e=n(ql,"P",{});var XAt=s(b4e);JLr=r(XAt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),XAt.forEach(t),YLr=i(ql),fn=n(ql,"P",{});var oy=s(fn);KLr=r(oy,"The model class to instantiate is selected based on the "),v4e=n(oy,"CODE",{});var zAt=s(v4e);ZLr=r(zAt,"model_type"),zAt.forEach(t),e8r=r(oy,` property of the config object (either
passed as an argument or loaded from `),F4e=n(oy,"CODE",{});var WAt=s(F4e);o8r=r(WAt,"pretrained_model_name_or_path"),WAt.forEach(t),r8r=r(oy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T4e=n(oy,"CODE",{});var QAt=s(T4e);t8r=r(QAt,"pretrained_model_name_or_path"),QAt.forEach(t),a8r=r(oy,":"),oy.forEach(t),n8r=i(ql),M4e=n(ql,"UL",{});var HAt=s(M4e);C3=n(HAt,"LI",{});var _Ie=s(C3);E4e=n(_Ie,"STRONG",{});var UAt=s(E4e);s8r=r(UAt,"vision-encoder-decoder"),UAt.forEach(t),l8r=r(_Ie," \u2014 "),qJ=n(_Ie,"A",{href:!0});var JAt=s(qJ);i8r=r(JAt,"TFVisionEncoderDecoderModel"),JAt.forEach(t),d8r=r(_Ie," (Vision Encoder decoder model)"),_Ie.forEach(t),HAt.forEach(t),c8r=i(ql),T(w3.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),Uje=i(m),Ac=n(m,"H2",{class:!0});var rOe=s(Ac);A3=n(rOe,"A",{id:!0,class:!0,href:!0});var YAt=s(A3);C4e=n(YAt,"SPAN",{});var KAt=s(C4e);T(w9.$$.fragment,KAt),KAt.forEach(t),YAt.forEach(t),m8r=i(rOe),w4e=n(rOe,"SPAN",{});var ZAt=s(w4e);f8r=r(ZAt,"TFAutoModelForSpeechSeq2Seq"),ZAt.forEach(t),rOe.forEach(t),Jje=i(m),cr=n(m,"DIV",{class:!0});var jl=s(cr);T(A9.$$.fragment,jl),g8r=i(jl),yc=n(jl,"P",{});var Xee=s(yc);h8r=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),jJ=n(Xee,"A",{href:!0});var eyt=s(jJ);u8r=r(eyt,"from_pretrained()"),eyt.forEach(t),p8r=r(Xee," class method or the "),DJ=n(Xee,"A",{href:!0});var oyt=s(DJ);_8r=r(oyt,"from_config()"),oyt.forEach(t),b8r=r(Xee,` class
method.`),Xee.forEach(t),v8r=i(jl),y9=n(jl,"P",{});var tOe=s(y9);F8r=r(tOe,"This class cannot be instantiated directly using "),A4e=n(tOe,"CODE",{});var ryt=s(A4e);T8r=r(ryt,"__init__()"),ryt.forEach(t),M8r=r(tOe," (throws an error)."),tOe.forEach(t),E8r=i(jl),Dt=n(jl,"DIV",{class:!0});var ry=s(Dt);T(L9.$$.fragment,ry),C8r=i(ry),y4e=n(ry,"P",{});var tyt=s(y4e);w8r=r(tyt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),tyt.forEach(t),A8r=i(ry),Lc=n(ry,"P",{});var zee=s(Lc);y8r=r(zee,`Note:
Loading a model from its configuration file does `),L4e=n(zee,"STRONG",{});var ayt=s(L4e);L8r=r(ayt,"not"),ayt.forEach(t),x8r=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=n(zee,"A",{href:!0});var nyt=s(GJ);$8r=r(nyt,"from_pretrained()"),nyt.forEach(t),k8r=r(zee," to load the model weights."),zee.forEach(t),S8r=i(ry),T(y3.$$.fragment,ry),ry.forEach(t),R8r=i(jl),qr=n(jl,"DIV",{class:!0});var Dl=s(qr);T(x9.$$.fragment,Dl),P8r=i(Dl),x4e=n(Dl,"P",{});var syt=s(x4e);B8r=r(syt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),syt.forEach(t),I8r=i(Dl),gn=n(Dl,"P",{});var ty=s(gn);N8r=r(ty,"The model class to instantiate is selected based on the "),$4e=n(ty,"CODE",{});var lyt=s($4e);q8r=r(lyt,"model_type"),lyt.forEach(t),j8r=r(ty,` property of the config object (either
passed as an argument or loaded from `),k4e=n(ty,"CODE",{});var iyt=s(k4e);D8r=r(iyt,"pretrained_model_name_or_path"),iyt.forEach(t),G8r=r(ty,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S4e=n(ty,"CODE",{});var dyt=s(S4e);O8r=r(dyt,"pretrained_model_name_or_path"),dyt.forEach(t),V8r=r(ty,":"),ty.forEach(t),X8r=i(Dl),R4e=n(Dl,"UL",{});var cyt=s(R4e);L3=n(cyt,"LI",{});var bIe=s(L3);P4e=n(bIe,"STRONG",{});var myt=s(P4e);z8r=r(myt,"speech_to_text"),myt.forEach(t),W8r=r(bIe," \u2014 "),OJ=n(bIe,"A",{href:!0});var fyt=s(OJ);Q8r=r(fyt,"TFSpeech2TextForConditionalGeneration"),fyt.forEach(t),H8r=r(bIe," (Speech2Text model)"),bIe.forEach(t),cyt.forEach(t),U8r=i(Dl),T(x3.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),Yje=i(m),xc=n(m,"H2",{class:!0});var aOe=s(xc);$3=n(aOe,"A",{id:!0,class:!0,href:!0});var gyt=s($3);B4e=n(gyt,"SPAN",{});var hyt=s(B4e);T($9.$$.fragment,hyt),hyt.forEach(t),gyt.forEach(t),J8r=i(aOe),I4e=n(aOe,"SPAN",{});var uyt=s(I4e);Y8r=r(uyt,"FlaxAutoModel"),uyt.forEach(t),aOe.forEach(t),Kje=i(m),mr=n(m,"DIV",{class:!0});var Gl=s(mr);T(k9.$$.fragment,Gl),K8r=i(Gl),$c=n(Gl,"P",{});var Wee=s($c);Z8r=r(Wee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),VJ=n(Wee,"A",{href:!0});var pyt=s(VJ);e7r=r(pyt,"from_pretrained()"),pyt.forEach(t),o7r=r(Wee," class method or the "),XJ=n(Wee,"A",{href:!0});var _yt=s(XJ);r7r=r(_yt,"from_config()"),_yt.forEach(t),t7r=r(Wee,` class
method.`),Wee.forEach(t),a7r=i(Gl),S9=n(Gl,"P",{});var nOe=s(S9);n7r=r(nOe,"This class cannot be instantiated directly using "),N4e=n(nOe,"CODE",{});var byt=s(N4e);s7r=r(byt,"__init__()"),byt.forEach(t),l7r=r(nOe," (throws an error)."),nOe.forEach(t),i7r=i(Gl),Gt=n(Gl,"DIV",{class:!0});var ay=s(Gt);T(R9.$$.fragment,ay),d7r=i(ay),q4e=n(ay,"P",{});var vyt=s(q4e);c7r=r(vyt,"Instantiates one of the base model classes of the library from a configuration."),vyt.forEach(t),m7r=i(ay),kc=n(ay,"P",{});var Qee=s(kc);f7r=r(Qee,`Note:
Loading a model from its configuration file does `),j4e=n(Qee,"STRONG",{});var Fyt=s(j4e);g7r=r(Fyt,"not"),Fyt.forEach(t),h7r=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=n(Qee,"A",{href:!0});var Tyt=s(zJ);u7r=r(Tyt,"from_pretrained()"),Tyt.forEach(t),p7r=r(Qee," to load the model weights."),Qee.forEach(t),_7r=i(ay),T(k3.$$.fragment,ay),ay.forEach(t),b7r=i(Gl),jr=n(Gl,"DIV",{class:!0});var Ol=s(jr);T(P9.$$.fragment,Ol),v7r=i(Ol),D4e=n(Ol,"P",{});var Myt=s(D4e);F7r=r(Myt,"Instantiate one of the base model classes of the library from a pretrained model."),Myt.forEach(t),T7r=i(Ol),hn=n(Ol,"P",{});var ny=s(hn);M7r=r(ny,"The model class to instantiate is selected based on the "),G4e=n(ny,"CODE",{});var Eyt=s(G4e);E7r=r(Eyt,"model_type"),Eyt.forEach(t),C7r=r(ny,` property of the config object (either
passed as an argument or loaded from `),O4e=n(ny,"CODE",{});var Cyt=s(O4e);w7r=r(Cyt,"pretrained_model_name_or_path"),Cyt.forEach(t),A7r=r(ny,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V4e=n(ny,"CODE",{});var wyt=s(V4e);y7r=r(wyt,"pretrained_model_name_or_path"),wyt.forEach(t),L7r=r(ny,":"),ny.forEach(t),x7r=i(Ol),re=n(Ol,"UL",{});var ne=s(re);S3=n(ne,"LI",{});var vIe=s(S3);X4e=n(vIe,"STRONG",{});var Ayt=s(X4e);$7r=r(Ayt,"albert"),Ayt.forEach(t),k7r=r(vIe," \u2014 "),WJ=n(vIe,"A",{href:!0});var yyt=s(WJ);S7r=r(yyt,"FlaxAlbertModel"),yyt.forEach(t),R7r=r(vIe," (ALBERT model)"),vIe.forEach(t),P7r=i(ne),R3=n(ne,"LI",{});var FIe=s(R3);z4e=n(FIe,"STRONG",{});var Lyt=s(z4e);B7r=r(Lyt,"bart"),Lyt.forEach(t),I7r=r(FIe," \u2014 "),QJ=n(FIe,"A",{href:!0});var xyt=s(QJ);N7r=r(xyt,"FlaxBartModel"),xyt.forEach(t),q7r=r(FIe," (BART model)"),FIe.forEach(t),j7r=i(ne),P3=n(ne,"LI",{});var TIe=s(P3);W4e=n(TIe,"STRONG",{});var $yt=s(W4e);D7r=r($yt,"beit"),$yt.forEach(t),G7r=r(TIe," \u2014 "),HJ=n(TIe,"A",{href:!0});var kyt=s(HJ);O7r=r(kyt,"FlaxBeitModel"),kyt.forEach(t),V7r=r(TIe," (BEiT model)"),TIe.forEach(t),X7r=i(ne),B3=n(ne,"LI",{});var MIe=s(B3);Q4e=n(MIe,"STRONG",{});var Syt=s(Q4e);z7r=r(Syt,"bert"),Syt.forEach(t),W7r=r(MIe," \u2014 "),UJ=n(MIe,"A",{href:!0});var Ryt=s(UJ);Q7r=r(Ryt,"FlaxBertModel"),Ryt.forEach(t),H7r=r(MIe," (BERT model)"),MIe.forEach(t),U7r=i(ne),I3=n(ne,"LI",{});var EIe=s(I3);H4e=n(EIe,"STRONG",{});var Pyt=s(H4e);J7r=r(Pyt,"big_bird"),Pyt.forEach(t),Y7r=r(EIe," \u2014 "),JJ=n(EIe,"A",{href:!0});var Byt=s(JJ);K7r=r(Byt,"FlaxBigBirdModel"),Byt.forEach(t),Z7r=r(EIe," (BigBird model)"),EIe.forEach(t),e9r=i(ne),N3=n(ne,"LI",{});var CIe=s(N3);U4e=n(CIe,"STRONG",{});var Iyt=s(U4e);o9r=r(Iyt,"blenderbot"),Iyt.forEach(t),r9r=r(CIe," \u2014 "),YJ=n(CIe,"A",{href:!0});var Nyt=s(YJ);t9r=r(Nyt,"FlaxBlenderbotModel"),Nyt.forEach(t),a9r=r(CIe," (Blenderbot model)"),CIe.forEach(t),n9r=i(ne),q3=n(ne,"LI",{});var wIe=s(q3);J4e=n(wIe,"STRONG",{});var qyt=s(J4e);s9r=r(qyt,"blenderbot-small"),qyt.forEach(t),l9r=r(wIe," \u2014 "),KJ=n(wIe,"A",{href:!0});var jyt=s(KJ);i9r=r(jyt,"FlaxBlenderbotSmallModel"),jyt.forEach(t),d9r=r(wIe," (BlenderbotSmall model)"),wIe.forEach(t),c9r=i(ne),j3=n(ne,"LI",{});var AIe=s(j3);Y4e=n(AIe,"STRONG",{});var Dyt=s(Y4e);m9r=r(Dyt,"clip"),Dyt.forEach(t),f9r=r(AIe," \u2014 "),ZJ=n(AIe,"A",{href:!0});var Gyt=s(ZJ);g9r=r(Gyt,"FlaxCLIPModel"),Gyt.forEach(t),h9r=r(AIe," (CLIP model)"),AIe.forEach(t),u9r=i(ne),D3=n(ne,"LI",{});var yIe=s(D3);K4e=n(yIe,"STRONG",{});var Oyt=s(K4e);p9r=r(Oyt,"distilbert"),Oyt.forEach(t),_9r=r(yIe," \u2014 "),eY=n(yIe,"A",{href:!0});var Vyt=s(eY);b9r=r(Vyt,"FlaxDistilBertModel"),Vyt.forEach(t),v9r=r(yIe," (DistilBERT model)"),yIe.forEach(t),F9r=i(ne),G3=n(ne,"LI",{});var LIe=s(G3);Z4e=n(LIe,"STRONG",{});var Xyt=s(Z4e);T9r=r(Xyt,"electra"),Xyt.forEach(t),M9r=r(LIe," \u2014 "),oY=n(LIe,"A",{href:!0});var zyt=s(oY);E9r=r(zyt,"FlaxElectraModel"),zyt.forEach(t),C9r=r(LIe," (ELECTRA model)"),LIe.forEach(t),w9r=i(ne),O3=n(ne,"LI",{});var xIe=s(O3);eEe=n(xIe,"STRONG",{});var Wyt=s(eEe);A9r=r(Wyt,"gpt2"),Wyt.forEach(t),y9r=r(xIe," \u2014 "),rY=n(xIe,"A",{href:!0});var Qyt=s(rY);L9r=r(Qyt,"FlaxGPT2Model"),Qyt.forEach(t),x9r=r(xIe," (OpenAI GPT-2 model)"),xIe.forEach(t),$9r=i(ne),V3=n(ne,"LI",{});var $Ie=s(V3);oEe=n($Ie,"STRONG",{});var Hyt=s(oEe);k9r=r(Hyt,"gpt_neo"),Hyt.forEach(t),S9r=r($Ie," \u2014 "),tY=n($Ie,"A",{href:!0});var Uyt=s(tY);R9r=r(Uyt,"FlaxGPTNeoModel"),Uyt.forEach(t),P9r=r($Ie," (GPT Neo model)"),$Ie.forEach(t),B9r=i(ne),X3=n(ne,"LI",{});var kIe=s(X3);rEe=n(kIe,"STRONG",{});var Jyt=s(rEe);I9r=r(Jyt,"gptj"),Jyt.forEach(t),N9r=r(kIe," \u2014 "),aY=n(kIe,"A",{href:!0});var Yyt=s(aY);q9r=r(Yyt,"FlaxGPTJModel"),Yyt.forEach(t),j9r=r(kIe," (GPT-J model)"),kIe.forEach(t),D9r=i(ne),z3=n(ne,"LI",{});var SIe=s(z3);tEe=n(SIe,"STRONG",{});var Kyt=s(tEe);G9r=r(Kyt,"marian"),Kyt.forEach(t),O9r=r(SIe," \u2014 "),nY=n(SIe,"A",{href:!0});var Zyt=s(nY);V9r=r(Zyt,"FlaxMarianModel"),Zyt.forEach(t),X9r=r(SIe," (Marian model)"),SIe.forEach(t),z9r=i(ne),W3=n(ne,"LI",{});var RIe=s(W3);aEe=n(RIe,"STRONG",{});var eLt=s(aEe);W9r=r(eLt,"mbart"),eLt.forEach(t),Q9r=r(RIe," \u2014 "),sY=n(RIe,"A",{href:!0});var oLt=s(sY);H9r=r(oLt,"FlaxMBartModel"),oLt.forEach(t),U9r=r(RIe," (mBART model)"),RIe.forEach(t),J9r=i(ne),Q3=n(ne,"LI",{});var PIe=s(Q3);nEe=n(PIe,"STRONG",{});var rLt=s(nEe);Y9r=r(rLt,"mt5"),rLt.forEach(t),K9r=r(PIe," \u2014 "),lY=n(PIe,"A",{href:!0});var tLt=s(lY);Z9r=r(tLt,"FlaxMT5Model"),tLt.forEach(t),exr=r(PIe," (mT5 model)"),PIe.forEach(t),oxr=i(ne),H3=n(ne,"LI",{});var BIe=s(H3);sEe=n(BIe,"STRONG",{});var aLt=s(sEe);rxr=r(aLt,"opt"),aLt.forEach(t),txr=r(BIe," \u2014 "),iY=n(BIe,"A",{href:!0});var nLt=s(iY);axr=r(nLt,"FlaxOPTModel"),nLt.forEach(t),nxr=r(BIe," (OPT model)"),BIe.forEach(t),sxr=i(ne),U3=n(ne,"LI",{});var IIe=s(U3);lEe=n(IIe,"STRONG",{});var sLt=s(lEe);lxr=r(sLt,"pegasus"),sLt.forEach(t),ixr=r(IIe," \u2014 "),dY=n(IIe,"A",{href:!0});var lLt=s(dY);dxr=r(lLt,"FlaxPegasusModel"),lLt.forEach(t),cxr=r(IIe," (Pegasus model)"),IIe.forEach(t),mxr=i(ne),J3=n(ne,"LI",{});var NIe=s(J3);iEe=n(NIe,"STRONG",{});var iLt=s(iEe);fxr=r(iLt,"roberta"),iLt.forEach(t),gxr=r(NIe," \u2014 "),cY=n(NIe,"A",{href:!0});var dLt=s(cY);hxr=r(dLt,"FlaxRobertaModel"),dLt.forEach(t),uxr=r(NIe," (RoBERTa model)"),NIe.forEach(t),pxr=i(ne),Y3=n(ne,"LI",{});var qIe=s(Y3);dEe=n(qIe,"STRONG",{});var cLt=s(dEe);_xr=r(cLt,"roformer"),cLt.forEach(t),bxr=r(qIe," \u2014 "),mY=n(qIe,"A",{href:!0});var mLt=s(mY);vxr=r(mLt,"FlaxRoFormerModel"),mLt.forEach(t),Fxr=r(qIe," (RoFormer model)"),qIe.forEach(t),Txr=i(ne),K3=n(ne,"LI",{});var jIe=s(K3);cEe=n(jIe,"STRONG",{});var fLt=s(cEe);Mxr=r(fLt,"t5"),fLt.forEach(t),Exr=r(jIe," \u2014 "),fY=n(jIe,"A",{href:!0});var gLt=s(fY);Cxr=r(gLt,"FlaxT5Model"),gLt.forEach(t),wxr=r(jIe," (T5 model)"),jIe.forEach(t),Axr=i(ne),Z3=n(ne,"LI",{});var DIe=s(Z3);mEe=n(DIe,"STRONG",{});var hLt=s(mEe);yxr=r(hLt,"vision-text-dual-encoder"),hLt.forEach(t),Lxr=r(DIe," \u2014 "),gY=n(DIe,"A",{href:!0});var uLt=s(gY);xxr=r(uLt,"FlaxVisionTextDualEncoderModel"),uLt.forEach(t),$xr=r(DIe," (VisionTextDualEncoder model)"),DIe.forEach(t),kxr=i(ne),ew=n(ne,"LI",{});var GIe=s(ew);fEe=n(GIe,"STRONG",{});var pLt=s(fEe);Sxr=r(pLt,"vit"),pLt.forEach(t),Rxr=r(GIe," \u2014 "),hY=n(GIe,"A",{href:!0});var _Lt=s(hY);Pxr=r(_Lt,"FlaxViTModel"),_Lt.forEach(t),Bxr=r(GIe," (ViT model)"),GIe.forEach(t),Ixr=i(ne),ow=n(ne,"LI",{});var OIe=s(ow);gEe=n(OIe,"STRONG",{});var bLt=s(gEe);Nxr=r(bLt,"wav2vec2"),bLt.forEach(t),qxr=r(OIe," \u2014 "),uY=n(OIe,"A",{href:!0});var vLt=s(uY);jxr=r(vLt,"FlaxWav2Vec2Model"),vLt.forEach(t),Dxr=r(OIe," (Wav2Vec2 model)"),OIe.forEach(t),Gxr=i(ne),rw=n(ne,"LI",{});var VIe=s(rw);hEe=n(VIe,"STRONG",{});var FLt=s(hEe);Oxr=r(FLt,"xglm"),FLt.forEach(t),Vxr=r(VIe," \u2014 "),pY=n(VIe,"A",{href:!0});var TLt=s(pY);Xxr=r(TLt,"FlaxXGLMModel"),TLt.forEach(t),zxr=r(VIe," (XGLM model)"),VIe.forEach(t),Wxr=i(ne),tw=n(ne,"LI",{});var XIe=s(tw);uEe=n(XIe,"STRONG",{});var MLt=s(uEe);Qxr=r(MLt,"xlm-roberta"),MLt.forEach(t),Hxr=r(XIe," \u2014 "),_Y=n(XIe,"A",{href:!0});var ELt=s(_Y);Uxr=r(ELt,"FlaxXLMRobertaModel"),ELt.forEach(t),Jxr=r(XIe," (XLM-RoBERTa model)"),XIe.forEach(t),ne.forEach(t),Yxr=i(Ol),T(aw.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),Zje=i(m),Sc=n(m,"H2",{class:!0});var sOe=s(Sc);nw=n(sOe,"A",{id:!0,class:!0,href:!0});var CLt=s(nw);pEe=n(CLt,"SPAN",{});var wLt=s(pEe);T(B9.$$.fragment,wLt),wLt.forEach(t),CLt.forEach(t),Kxr=i(sOe),_Ee=n(sOe,"SPAN",{});var ALt=s(_Ee);Zxr=r(ALt,"FlaxAutoModelForCausalLM"),ALt.forEach(t),sOe.forEach(t),eDe=i(m),fr=n(m,"DIV",{class:!0});var Vl=s(fr);T(I9.$$.fragment,Vl),e$r=i(Vl),Rc=n(Vl,"P",{});var Hee=s(Rc);o$r=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bY=n(Hee,"A",{href:!0});var yLt=s(bY);r$r=r(yLt,"from_pretrained()"),yLt.forEach(t),t$r=r(Hee," class method or the "),vY=n(Hee,"A",{href:!0});var LLt=s(vY);a$r=r(LLt,"from_config()"),LLt.forEach(t),n$r=r(Hee,` class
method.`),Hee.forEach(t),s$r=i(Vl),N9=n(Vl,"P",{});var lOe=s(N9);l$r=r(lOe,"This class cannot be instantiated directly using "),bEe=n(lOe,"CODE",{});var xLt=s(bEe);i$r=r(xLt,"__init__()"),xLt.forEach(t),d$r=r(lOe," (throws an error)."),lOe.forEach(t),c$r=i(Vl),Ot=n(Vl,"DIV",{class:!0});var sy=s(Ot);T(q9.$$.fragment,sy),m$r=i(sy),vEe=n(sy,"P",{});var $Lt=s(vEe);f$r=r($Lt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$Lt.forEach(t),g$r=i(sy),Pc=n(sy,"P",{});var Uee=s(Pc);h$r=r(Uee,`Note:
Loading a model from its configuration file does `),FEe=n(Uee,"STRONG",{});var kLt=s(FEe);u$r=r(kLt,"not"),kLt.forEach(t),p$r=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=n(Uee,"A",{href:!0});var SLt=s(FY);_$r=r(SLt,"from_pretrained()"),SLt.forEach(t),b$r=r(Uee," to load the model weights."),Uee.forEach(t),v$r=i(sy),T(sw.$$.fragment,sy),sy.forEach(t),F$r=i(Vl),Dr=n(Vl,"DIV",{class:!0});var Xl=s(Dr);T(j9.$$.fragment,Xl),T$r=i(Xl),TEe=n(Xl,"P",{});var RLt=s(TEe);M$r=r(RLt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),RLt.forEach(t),E$r=i(Xl),un=n(Xl,"P",{});var ly=s(un);C$r=r(ly,"The model class to instantiate is selected based on the "),MEe=n(ly,"CODE",{});var PLt=s(MEe);w$r=r(PLt,"model_type"),PLt.forEach(t),A$r=r(ly,` property of the config object (either
passed as an argument or loaded from `),EEe=n(ly,"CODE",{});var BLt=s(EEe);y$r=r(BLt,"pretrained_model_name_or_path"),BLt.forEach(t),L$r=r(ly,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CEe=n(ly,"CODE",{});var ILt=s(CEe);x$r=r(ILt,"pretrained_model_name_or_path"),ILt.forEach(t),$$r=r(ly,":"),ly.forEach(t),k$r=i(Xl),Le=n(Xl,"UL",{});var Ie=s(Le);lw=n(Ie,"LI",{});var zIe=s(lw);wEe=n(zIe,"STRONG",{});var NLt=s(wEe);S$r=r(NLt,"bart"),NLt.forEach(t),R$r=r(zIe," \u2014 "),TY=n(zIe,"A",{href:!0});var qLt=s(TY);P$r=r(qLt,"FlaxBartForCausalLM"),qLt.forEach(t),B$r=r(zIe," (BART model)"),zIe.forEach(t),I$r=i(Ie),iw=n(Ie,"LI",{});var WIe=s(iw);AEe=n(WIe,"STRONG",{});var jLt=s(AEe);N$r=r(jLt,"bert"),jLt.forEach(t),q$r=r(WIe," \u2014 "),MY=n(WIe,"A",{href:!0});var DLt=s(MY);j$r=r(DLt,"FlaxBertForCausalLM"),DLt.forEach(t),D$r=r(WIe," (BERT model)"),WIe.forEach(t),G$r=i(Ie),dw=n(Ie,"LI",{});var QIe=s(dw);yEe=n(QIe,"STRONG",{});var GLt=s(yEe);O$r=r(GLt,"big_bird"),GLt.forEach(t),V$r=r(QIe," \u2014 "),EY=n(QIe,"A",{href:!0});var OLt=s(EY);X$r=r(OLt,"FlaxBigBirdForCausalLM"),OLt.forEach(t),z$r=r(QIe," (BigBird model)"),QIe.forEach(t),W$r=i(Ie),cw=n(Ie,"LI",{});var HIe=s(cw);LEe=n(HIe,"STRONG",{});var VLt=s(LEe);Q$r=r(VLt,"electra"),VLt.forEach(t),H$r=r(HIe," \u2014 "),CY=n(HIe,"A",{href:!0});var XLt=s(CY);U$r=r(XLt,"FlaxElectraForCausalLM"),XLt.forEach(t),J$r=r(HIe," (ELECTRA model)"),HIe.forEach(t),Y$r=i(Ie),mw=n(Ie,"LI",{});var UIe=s(mw);xEe=n(UIe,"STRONG",{});var zLt=s(xEe);K$r=r(zLt,"gpt2"),zLt.forEach(t),Z$r=r(UIe," \u2014 "),wY=n(UIe,"A",{href:!0});var WLt=s(wY);ekr=r(WLt,"FlaxGPT2LMHeadModel"),WLt.forEach(t),okr=r(UIe," (OpenAI GPT-2 model)"),UIe.forEach(t),rkr=i(Ie),fw=n(Ie,"LI",{});var JIe=s(fw);$Ee=n(JIe,"STRONG",{});var QLt=s($Ee);tkr=r(QLt,"gpt_neo"),QLt.forEach(t),akr=r(JIe," \u2014 "),AY=n(JIe,"A",{href:!0});var HLt=s(AY);nkr=r(HLt,"FlaxGPTNeoForCausalLM"),HLt.forEach(t),skr=r(JIe," (GPT Neo model)"),JIe.forEach(t),lkr=i(Ie),gw=n(Ie,"LI",{});var YIe=s(gw);kEe=n(YIe,"STRONG",{});var ULt=s(kEe);ikr=r(ULt,"gptj"),ULt.forEach(t),dkr=r(YIe," \u2014 "),yY=n(YIe,"A",{href:!0});var JLt=s(yY);ckr=r(JLt,"FlaxGPTJForCausalLM"),JLt.forEach(t),mkr=r(YIe," (GPT-J model)"),YIe.forEach(t),fkr=i(Ie),hw=n(Ie,"LI",{});var KIe=s(hw);SEe=n(KIe,"STRONG",{});var YLt=s(SEe);gkr=r(YLt,"opt"),YLt.forEach(t),hkr=r(KIe," \u2014 "),LY=n(KIe,"A",{href:!0});var KLt=s(LY);ukr=r(KLt,"FlaxOPTForCausalLM"),KLt.forEach(t),pkr=r(KIe," (OPT model)"),KIe.forEach(t),_kr=i(Ie),uw=n(Ie,"LI",{});var ZIe=s(uw);REe=n(ZIe,"STRONG",{});var ZLt=s(REe);bkr=r(ZLt,"roberta"),ZLt.forEach(t),vkr=r(ZIe," \u2014 "),xY=n(ZIe,"A",{href:!0});var e8t=s(xY);Fkr=r(e8t,"FlaxRobertaForCausalLM"),e8t.forEach(t),Tkr=r(ZIe," (RoBERTa model)"),ZIe.forEach(t),Mkr=i(Ie),pw=n(Ie,"LI",{});var eNe=s(pw);PEe=n(eNe,"STRONG",{});var o8t=s(PEe);Ekr=r(o8t,"xglm"),o8t.forEach(t),Ckr=r(eNe," \u2014 "),$Y=n(eNe,"A",{href:!0});var r8t=s($Y);wkr=r(r8t,"FlaxXGLMForCausalLM"),r8t.forEach(t),Akr=r(eNe," (XGLM model)"),eNe.forEach(t),Ie.forEach(t),ykr=i(Xl),T(_w.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),oDe=i(m),Bc=n(m,"H2",{class:!0});var iOe=s(Bc);bw=n(iOe,"A",{id:!0,class:!0,href:!0});var t8t=s(bw);BEe=n(t8t,"SPAN",{});var a8t=s(BEe);T(D9.$$.fragment,a8t),a8t.forEach(t),t8t.forEach(t),Lkr=i(iOe),IEe=n(iOe,"SPAN",{});var n8t=s(IEe);xkr=r(n8t,"FlaxAutoModelForPreTraining"),n8t.forEach(t),iOe.forEach(t),rDe=i(m),gr=n(m,"DIV",{class:!0});var zl=s(gr);T(G9.$$.fragment,zl),$kr=i(zl),Ic=n(zl,"P",{});var Jee=s(Ic);kkr=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kY=n(Jee,"A",{href:!0});var s8t=s(kY);Skr=r(s8t,"from_pretrained()"),s8t.forEach(t),Rkr=r(Jee," class method or the "),SY=n(Jee,"A",{href:!0});var l8t=s(SY);Pkr=r(l8t,"from_config()"),l8t.forEach(t),Bkr=r(Jee,` class
method.`),Jee.forEach(t),Ikr=i(zl),O9=n(zl,"P",{});var dOe=s(O9);Nkr=r(dOe,"This class cannot be instantiated directly using "),NEe=n(dOe,"CODE",{});var i8t=s(NEe);qkr=r(i8t,"__init__()"),i8t.forEach(t),jkr=r(dOe," (throws an error)."),dOe.forEach(t),Dkr=i(zl),Vt=n(zl,"DIV",{class:!0});var iy=s(Vt);T(V9.$$.fragment,iy),Gkr=i(iy),qEe=n(iy,"P",{});var d8t=s(qEe);Okr=r(d8t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),d8t.forEach(t),Vkr=i(iy),Nc=n(iy,"P",{});var Yee=s(Nc);Xkr=r(Yee,`Note:
Loading a model from its configuration file does `),jEe=n(Yee,"STRONG",{});var c8t=s(jEe);zkr=r(c8t,"not"),c8t.forEach(t),Wkr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=n(Yee,"A",{href:!0});var m8t=s(RY);Qkr=r(m8t,"from_pretrained()"),m8t.forEach(t),Hkr=r(Yee," to load the model weights."),Yee.forEach(t),Ukr=i(iy),T(vw.$$.fragment,iy),iy.forEach(t),Jkr=i(zl),Gr=n(zl,"DIV",{class:!0});var Wl=s(Gr);T(X9.$$.fragment,Wl),Ykr=i(Wl),DEe=n(Wl,"P",{});var f8t=s(DEe);Kkr=r(f8t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),f8t.forEach(t),Zkr=i(Wl),pn=n(Wl,"P",{});var dy=s(pn);eSr=r(dy,"The model class to instantiate is selected based on the "),GEe=n(dy,"CODE",{});var g8t=s(GEe);oSr=r(g8t,"model_type"),g8t.forEach(t),rSr=r(dy,` property of the config object (either
passed as an argument or loaded from `),OEe=n(dy,"CODE",{});var h8t=s(OEe);tSr=r(h8t,"pretrained_model_name_or_path"),h8t.forEach(t),aSr=r(dy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VEe=n(dy,"CODE",{});var u8t=s(VEe);nSr=r(u8t,"pretrained_model_name_or_path"),u8t.forEach(t),sSr=r(dy,":"),dy.forEach(t),lSr=i(Wl),Ee=n(Wl,"UL",{});var we=s(Ee);Fw=n(we,"LI",{});var oNe=s(Fw);XEe=n(oNe,"STRONG",{});var p8t=s(XEe);iSr=r(p8t,"albert"),p8t.forEach(t),dSr=r(oNe," \u2014 "),PY=n(oNe,"A",{href:!0});var _8t=s(PY);cSr=r(_8t,"FlaxAlbertForPreTraining"),_8t.forEach(t),mSr=r(oNe," (ALBERT model)"),oNe.forEach(t),fSr=i(we),Tw=n(we,"LI",{});var rNe=s(Tw);zEe=n(rNe,"STRONG",{});var b8t=s(zEe);gSr=r(b8t,"bart"),b8t.forEach(t),hSr=r(rNe," \u2014 "),BY=n(rNe,"A",{href:!0});var v8t=s(BY);uSr=r(v8t,"FlaxBartForConditionalGeneration"),v8t.forEach(t),pSr=r(rNe," (BART model)"),rNe.forEach(t),_Sr=i(we),Mw=n(we,"LI",{});var tNe=s(Mw);WEe=n(tNe,"STRONG",{});var F8t=s(WEe);bSr=r(F8t,"bert"),F8t.forEach(t),vSr=r(tNe," \u2014 "),IY=n(tNe,"A",{href:!0});var T8t=s(IY);FSr=r(T8t,"FlaxBertForPreTraining"),T8t.forEach(t),TSr=r(tNe," (BERT model)"),tNe.forEach(t),MSr=i(we),Ew=n(we,"LI",{});var aNe=s(Ew);QEe=n(aNe,"STRONG",{});var M8t=s(QEe);ESr=r(M8t,"big_bird"),M8t.forEach(t),CSr=r(aNe," \u2014 "),NY=n(aNe,"A",{href:!0});var E8t=s(NY);wSr=r(E8t,"FlaxBigBirdForPreTraining"),E8t.forEach(t),ASr=r(aNe," (BigBird model)"),aNe.forEach(t),ySr=i(we),Cw=n(we,"LI",{});var nNe=s(Cw);HEe=n(nNe,"STRONG",{});var C8t=s(HEe);LSr=r(C8t,"electra"),C8t.forEach(t),xSr=r(nNe," \u2014 "),qY=n(nNe,"A",{href:!0});var w8t=s(qY);$Sr=r(w8t,"FlaxElectraForPreTraining"),w8t.forEach(t),kSr=r(nNe," (ELECTRA model)"),nNe.forEach(t),SSr=i(we),ww=n(we,"LI",{});var sNe=s(ww);UEe=n(sNe,"STRONG",{});var A8t=s(UEe);RSr=r(A8t,"mbart"),A8t.forEach(t),PSr=r(sNe," \u2014 "),jY=n(sNe,"A",{href:!0});var y8t=s(jY);BSr=r(y8t,"FlaxMBartForConditionalGeneration"),y8t.forEach(t),ISr=r(sNe," (mBART model)"),sNe.forEach(t),NSr=i(we),Aw=n(we,"LI",{});var lNe=s(Aw);JEe=n(lNe,"STRONG",{});var L8t=s(JEe);qSr=r(L8t,"mt5"),L8t.forEach(t),jSr=r(lNe," \u2014 "),DY=n(lNe,"A",{href:!0});var x8t=s(DY);DSr=r(x8t,"FlaxMT5ForConditionalGeneration"),x8t.forEach(t),GSr=r(lNe," (mT5 model)"),lNe.forEach(t),OSr=i(we),yw=n(we,"LI",{});var iNe=s(yw);YEe=n(iNe,"STRONG",{});var $8t=s(YEe);VSr=r($8t,"roberta"),$8t.forEach(t),XSr=r(iNe," \u2014 "),GY=n(iNe,"A",{href:!0});var k8t=s(GY);zSr=r(k8t,"FlaxRobertaForMaskedLM"),k8t.forEach(t),WSr=r(iNe," (RoBERTa model)"),iNe.forEach(t),QSr=i(we),Lw=n(we,"LI",{});var dNe=s(Lw);KEe=n(dNe,"STRONG",{});var S8t=s(KEe);HSr=r(S8t,"roformer"),S8t.forEach(t),USr=r(dNe," \u2014 "),OY=n(dNe,"A",{href:!0});var R8t=s(OY);JSr=r(R8t,"FlaxRoFormerForMaskedLM"),R8t.forEach(t),YSr=r(dNe," (RoFormer model)"),dNe.forEach(t),KSr=i(we),xw=n(we,"LI",{});var cNe=s(xw);ZEe=n(cNe,"STRONG",{});var P8t=s(ZEe);ZSr=r(P8t,"t5"),P8t.forEach(t),eRr=r(cNe," \u2014 "),VY=n(cNe,"A",{href:!0});var B8t=s(VY);oRr=r(B8t,"FlaxT5ForConditionalGeneration"),B8t.forEach(t),rRr=r(cNe," (T5 model)"),cNe.forEach(t),tRr=i(we),$w=n(we,"LI",{});var mNe=s($w);eCe=n(mNe,"STRONG",{});var I8t=s(eCe);aRr=r(I8t,"wav2vec2"),I8t.forEach(t),nRr=r(mNe," \u2014 "),XY=n(mNe,"A",{href:!0});var N8t=s(XY);sRr=r(N8t,"FlaxWav2Vec2ForPreTraining"),N8t.forEach(t),lRr=r(mNe," (Wav2Vec2 model)"),mNe.forEach(t),iRr=i(we),kw=n(we,"LI",{});var fNe=s(kw);oCe=n(fNe,"STRONG",{});var q8t=s(oCe);dRr=r(q8t,"xlm-roberta"),q8t.forEach(t),cRr=r(fNe," \u2014 "),zY=n(fNe,"A",{href:!0});var j8t=s(zY);mRr=r(j8t,"FlaxXLMRobertaForMaskedLM"),j8t.forEach(t),fRr=r(fNe," (XLM-RoBERTa model)"),fNe.forEach(t),we.forEach(t),gRr=i(Wl),T(Sw.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),tDe=i(m),qc=n(m,"H2",{class:!0});var cOe=s(qc);Rw=n(cOe,"A",{id:!0,class:!0,href:!0});var D8t=s(Rw);rCe=n(D8t,"SPAN",{});var G8t=s(rCe);T(z9.$$.fragment,G8t),G8t.forEach(t),D8t.forEach(t),hRr=i(cOe),tCe=n(cOe,"SPAN",{});var O8t=s(tCe);uRr=r(O8t,"FlaxAutoModelForMaskedLM"),O8t.forEach(t),cOe.forEach(t),aDe=i(m),hr=n(m,"DIV",{class:!0});var Ql=s(hr);T(W9.$$.fragment,Ql),pRr=i(Ql),jc=n(Ql,"P",{});var Kee=s(jc);_Rr=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),WY=n(Kee,"A",{href:!0});var V8t=s(WY);bRr=r(V8t,"from_pretrained()"),V8t.forEach(t),vRr=r(Kee," class method or the "),QY=n(Kee,"A",{href:!0});var X8t=s(QY);FRr=r(X8t,"from_config()"),X8t.forEach(t),TRr=r(Kee,` class
method.`),Kee.forEach(t),MRr=i(Ql),Q9=n(Ql,"P",{});var mOe=s(Q9);ERr=r(mOe,"This class cannot be instantiated directly using "),aCe=n(mOe,"CODE",{});var z8t=s(aCe);CRr=r(z8t,"__init__()"),z8t.forEach(t),wRr=r(mOe," (throws an error)."),mOe.forEach(t),ARr=i(Ql),Xt=n(Ql,"DIV",{class:!0});var cy=s(Xt);T(H9.$$.fragment,cy),yRr=i(cy),nCe=n(cy,"P",{});var W8t=s(nCe);LRr=r(W8t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),W8t.forEach(t),xRr=i(cy),Dc=n(cy,"P",{});var Zee=s(Dc);$Rr=r(Zee,`Note:
Loading a model from its configuration file does `),sCe=n(Zee,"STRONG",{});var Q8t=s(sCe);kRr=r(Q8t,"not"),Q8t.forEach(t),SRr=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=n(Zee,"A",{href:!0});var H8t=s(HY);RRr=r(H8t,"from_pretrained()"),H8t.forEach(t),PRr=r(Zee," to load the model weights."),Zee.forEach(t),BRr=i(cy),T(Pw.$$.fragment,cy),cy.forEach(t),IRr=i(Ql),Or=n(Ql,"DIV",{class:!0});var Hl=s(Or);T(U9.$$.fragment,Hl),NRr=i(Hl),lCe=n(Hl,"P",{});var U8t=s(lCe);qRr=r(U8t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),U8t.forEach(t),jRr=i(Hl),_n=n(Hl,"P",{});var my=s(_n);DRr=r(my,"The model class to instantiate is selected based on the "),iCe=n(my,"CODE",{});var J8t=s(iCe);GRr=r(J8t,"model_type"),J8t.forEach(t),ORr=r(my,` property of the config object (either
passed as an argument or loaded from `),dCe=n(my,"CODE",{});var Y8t=s(dCe);VRr=r(Y8t,"pretrained_model_name_or_path"),Y8t.forEach(t),XRr=r(my,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cCe=n(my,"CODE",{});var K8t=s(cCe);zRr=r(K8t,"pretrained_model_name_or_path"),K8t.forEach(t),WRr=r(my,":"),my.forEach(t),QRr=i(Hl),xe=n(Hl,"UL",{});var Ne=s(xe);Bw=n(Ne,"LI",{});var gNe=s(Bw);mCe=n(gNe,"STRONG",{});var Z8t=s(mCe);HRr=r(Z8t,"albert"),Z8t.forEach(t),URr=r(gNe," \u2014 "),UY=n(gNe,"A",{href:!0});var e7t=s(UY);JRr=r(e7t,"FlaxAlbertForMaskedLM"),e7t.forEach(t),YRr=r(gNe," (ALBERT model)"),gNe.forEach(t),KRr=i(Ne),Iw=n(Ne,"LI",{});var hNe=s(Iw);fCe=n(hNe,"STRONG",{});var o7t=s(fCe);ZRr=r(o7t,"bart"),o7t.forEach(t),ePr=r(hNe," \u2014 "),JY=n(hNe,"A",{href:!0});var r7t=s(JY);oPr=r(r7t,"FlaxBartForConditionalGeneration"),r7t.forEach(t),rPr=r(hNe," (BART model)"),hNe.forEach(t),tPr=i(Ne),Nw=n(Ne,"LI",{});var uNe=s(Nw);gCe=n(uNe,"STRONG",{});var t7t=s(gCe);aPr=r(t7t,"bert"),t7t.forEach(t),nPr=r(uNe," \u2014 "),YY=n(uNe,"A",{href:!0});var a7t=s(YY);sPr=r(a7t,"FlaxBertForMaskedLM"),a7t.forEach(t),lPr=r(uNe," (BERT model)"),uNe.forEach(t),iPr=i(Ne),qw=n(Ne,"LI",{});var pNe=s(qw);hCe=n(pNe,"STRONG",{});var n7t=s(hCe);dPr=r(n7t,"big_bird"),n7t.forEach(t),cPr=r(pNe," \u2014 "),KY=n(pNe,"A",{href:!0});var s7t=s(KY);mPr=r(s7t,"FlaxBigBirdForMaskedLM"),s7t.forEach(t),fPr=r(pNe," (BigBird model)"),pNe.forEach(t),gPr=i(Ne),jw=n(Ne,"LI",{});var _Ne=s(jw);uCe=n(_Ne,"STRONG",{});var l7t=s(uCe);hPr=r(l7t,"distilbert"),l7t.forEach(t),uPr=r(_Ne," \u2014 "),ZY=n(_Ne,"A",{href:!0});var i7t=s(ZY);pPr=r(i7t,"FlaxDistilBertForMaskedLM"),i7t.forEach(t),_Pr=r(_Ne," (DistilBERT model)"),_Ne.forEach(t),bPr=i(Ne),Dw=n(Ne,"LI",{});var bNe=s(Dw);pCe=n(bNe,"STRONG",{});var d7t=s(pCe);vPr=r(d7t,"electra"),d7t.forEach(t),FPr=r(bNe," \u2014 "),eK=n(bNe,"A",{href:!0});var c7t=s(eK);TPr=r(c7t,"FlaxElectraForMaskedLM"),c7t.forEach(t),MPr=r(bNe," (ELECTRA model)"),bNe.forEach(t),EPr=i(Ne),Gw=n(Ne,"LI",{});var vNe=s(Gw);_Ce=n(vNe,"STRONG",{});var m7t=s(_Ce);CPr=r(m7t,"mbart"),m7t.forEach(t),wPr=r(vNe," \u2014 "),oK=n(vNe,"A",{href:!0});var f7t=s(oK);APr=r(f7t,"FlaxMBartForConditionalGeneration"),f7t.forEach(t),yPr=r(vNe," (mBART model)"),vNe.forEach(t),LPr=i(Ne),Ow=n(Ne,"LI",{});var FNe=s(Ow);bCe=n(FNe,"STRONG",{});var g7t=s(bCe);xPr=r(g7t,"roberta"),g7t.forEach(t),$Pr=r(FNe," \u2014 "),rK=n(FNe,"A",{href:!0});var h7t=s(rK);kPr=r(h7t,"FlaxRobertaForMaskedLM"),h7t.forEach(t),SPr=r(FNe," (RoBERTa model)"),FNe.forEach(t),RPr=i(Ne),Vw=n(Ne,"LI",{});var TNe=s(Vw);vCe=n(TNe,"STRONG",{});var u7t=s(vCe);PPr=r(u7t,"roformer"),u7t.forEach(t),BPr=r(TNe," \u2014 "),tK=n(TNe,"A",{href:!0});var p7t=s(tK);IPr=r(p7t,"FlaxRoFormerForMaskedLM"),p7t.forEach(t),NPr=r(TNe," (RoFormer model)"),TNe.forEach(t),qPr=i(Ne),Xw=n(Ne,"LI",{});var MNe=s(Xw);FCe=n(MNe,"STRONG",{});var _7t=s(FCe);jPr=r(_7t,"xlm-roberta"),_7t.forEach(t),DPr=r(MNe," \u2014 "),aK=n(MNe,"A",{href:!0});var b7t=s(aK);GPr=r(b7t,"FlaxXLMRobertaForMaskedLM"),b7t.forEach(t),OPr=r(MNe," (XLM-RoBERTa model)"),MNe.forEach(t),Ne.forEach(t),VPr=i(Hl),T(zw.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),nDe=i(m),Gc=n(m,"H2",{class:!0});var fOe=s(Gc);Ww=n(fOe,"A",{id:!0,class:!0,href:!0});var v7t=s(Ww);TCe=n(v7t,"SPAN",{});var F7t=s(TCe);T(J9.$$.fragment,F7t),F7t.forEach(t),v7t.forEach(t),XPr=i(fOe),MCe=n(fOe,"SPAN",{});var T7t=s(MCe);zPr=r(T7t,"FlaxAutoModelForSeq2SeqLM"),T7t.forEach(t),fOe.forEach(t),sDe=i(m),ur=n(m,"DIV",{class:!0});var Ul=s(ur);T(Y9.$$.fragment,Ul),WPr=i(Ul),Oc=n(Ul,"P",{});var eoe=s(Oc);QPr=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nK=n(eoe,"A",{href:!0});var M7t=s(nK);HPr=r(M7t,"from_pretrained()"),M7t.forEach(t),UPr=r(eoe," class method or the "),sK=n(eoe,"A",{href:!0});var E7t=s(sK);JPr=r(E7t,"from_config()"),E7t.forEach(t),YPr=r(eoe,` class
method.`),eoe.forEach(t),KPr=i(Ul),K9=n(Ul,"P",{});var gOe=s(K9);ZPr=r(gOe,"This class cannot be instantiated directly using "),ECe=n(gOe,"CODE",{});var C7t=s(ECe);eBr=r(C7t,"__init__()"),C7t.forEach(t),oBr=r(gOe," (throws an error)."),gOe.forEach(t),rBr=i(Ul),zt=n(Ul,"DIV",{class:!0});var fy=s(zt);T(Z9.$$.fragment,fy),tBr=i(fy),CCe=n(fy,"P",{});var w7t=s(CCe);aBr=r(w7t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),w7t.forEach(t),nBr=i(fy),Vc=n(fy,"P",{});var ooe=s(Vc);sBr=r(ooe,`Note:
Loading a model from its configuration file does `),wCe=n(ooe,"STRONG",{});var A7t=s(wCe);lBr=r(A7t,"not"),A7t.forEach(t),iBr=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),lK=n(ooe,"A",{href:!0});var y7t=s(lK);dBr=r(y7t,"from_pretrained()"),y7t.forEach(t),cBr=r(ooe," to load the model weights."),ooe.forEach(t),mBr=i(fy),T(Qw.$$.fragment,fy),fy.forEach(t),fBr=i(Ul),Vr=n(Ul,"DIV",{class:!0});var Jl=s(Vr);T(ex.$$.fragment,Jl),gBr=i(Jl),ACe=n(Jl,"P",{});var L7t=s(ACe);hBr=r(L7t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),L7t.forEach(t),uBr=i(Jl),bn=n(Jl,"P",{});var gy=s(bn);pBr=r(gy,"The model class to instantiate is selected based on the "),yCe=n(gy,"CODE",{});var x7t=s(yCe);_Br=r(x7t,"model_type"),x7t.forEach(t),bBr=r(gy,` property of the config object (either
passed as an argument or loaded from `),LCe=n(gy,"CODE",{});var $7t=s(LCe);vBr=r($7t,"pretrained_model_name_or_path"),$7t.forEach(t),FBr=r(gy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xCe=n(gy,"CODE",{});var k7t=s(xCe);TBr=r(k7t,"pretrained_model_name_or_path"),k7t.forEach(t),MBr=r(gy,":"),gy.forEach(t),EBr=i(Jl),Pe=n(Jl,"UL",{});var ze=s(Pe);Hw=n(ze,"LI",{});var ENe=s(Hw);$Ce=n(ENe,"STRONG",{});var S7t=s($Ce);CBr=r(S7t,"bart"),S7t.forEach(t),wBr=r(ENe," \u2014 "),iK=n(ENe,"A",{href:!0});var R7t=s(iK);ABr=r(R7t,"FlaxBartForConditionalGeneration"),R7t.forEach(t),yBr=r(ENe," (BART model)"),ENe.forEach(t),LBr=i(ze),Uw=n(ze,"LI",{});var CNe=s(Uw);kCe=n(CNe,"STRONG",{});var P7t=s(kCe);xBr=r(P7t,"blenderbot"),P7t.forEach(t),$Br=r(CNe," \u2014 "),dK=n(CNe,"A",{href:!0});var B7t=s(dK);kBr=r(B7t,"FlaxBlenderbotForConditionalGeneration"),B7t.forEach(t),SBr=r(CNe," (Blenderbot model)"),CNe.forEach(t),RBr=i(ze),Jw=n(ze,"LI",{});var wNe=s(Jw);SCe=n(wNe,"STRONG",{});var I7t=s(SCe);PBr=r(I7t,"blenderbot-small"),I7t.forEach(t),BBr=r(wNe," \u2014 "),cK=n(wNe,"A",{href:!0});var N7t=s(cK);IBr=r(N7t,"FlaxBlenderbotSmallForConditionalGeneration"),N7t.forEach(t),NBr=r(wNe," (BlenderbotSmall model)"),wNe.forEach(t),qBr=i(ze),Yw=n(ze,"LI",{});var ANe=s(Yw);RCe=n(ANe,"STRONG",{});var q7t=s(RCe);jBr=r(q7t,"encoder-decoder"),q7t.forEach(t),DBr=r(ANe," \u2014 "),mK=n(ANe,"A",{href:!0});var j7t=s(mK);GBr=r(j7t,"FlaxEncoderDecoderModel"),j7t.forEach(t),OBr=r(ANe," (Encoder decoder model)"),ANe.forEach(t),VBr=i(ze),Kw=n(ze,"LI",{});var yNe=s(Kw);PCe=n(yNe,"STRONG",{});var D7t=s(PCe);XBr=r(D7t,"marian"),D7t.forEach(t),zBr=r(yNe," \u2014 "),fK=n(yNe,"A",{href:!0});var G7t=s(fK);WBr=r(G7t,"FlaxMarianMTModel"),G7t.forEach(t),QBr=r(yNe," (Marian model)"),yNe.forEach(t),HBr=i(ze),Zw=n(ze,"LI",{});var LNe=s(Zw);BCe=n(LNe,"STRONG",{});var O7t=s(BCe);UBr=r(O7t,"mbart"),O7t.forEach(t),JBr=r(LNe," \u2014 "),gK=n(LNe,"A",{href:!0});var V7t=s(gK);YBr=r(V7t,"FlaxMBartForConditionalGeneration"),V7t.forEach(t),KBr=r(LNe," (mBART model)"),LNe.forEach(t),ZBr=i(ze),e0=n(ze,"LI",{});var xNe=s(e0);ICe=n(xNe,"STRONG",{});var X7t=s(ICe);eIr=r(X7t,"mt5"),X7t.forEach(t),oIr=r(xNe," \u2014 "),hK=n(xNe,"A",{href:!0});var z7t=s(hK);rIr=r(z7t,"FlaxMT5ForConditionalGeneration"),z7t.forEach(t),tIr=r(xNe," (mT5 model)"),xNe.forEach(t),aIr=i(ze),o0=n(ze,"LI",{});var $Ne=s(o0);NCe=n($Ne,"STRONG",{});var W7t=s(NCe);nIr=r(W7t,"pegasus"),W7t.forEach(t),sIr=r($Ne," \u2014 "),uK=n($Ne,"A",{href:!0});var Q7t=s(uK);lIr=r(Q7t,"FlaxPegasusForConditionalGeneration"),Q7t.forEach(t),iIr=r($Ne," (Pegasus model)"),$Ne.forEach(t),dIr=i(ze),r0=n(ze,"LI",{});var kNe=s(r0);qCe=n(kNe,"STRONG",{});var H7t=s(qCe);cIr=r(H7t,"t5"),H7t.forEach(t),mIr=r(kNe," \u2014 "),pK=n(kNe,"A",{href:!0});var U7t=s(pK);fIr=r(U7t,"FlaxT5ForConditionalGeneration"),U7t.forEach(t),gIr=r(kNe," (T5 model)"),kNe.forEach(t),ze.forEach(t),hIr=i(Jl),T(t0.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),lDe=i(m),Xc=n(m,"H2",{class:!0});var hOe=s(Xc);a0=n(hOe,"A",{id:!0,class:!0,href:!0});var J7t=s(a0);jCe=n(J7t,"SPAN",{});var Y7t=s(jCe);T(ox.$$.fragment,Y7t),Y7t.forEach(t),J7t.forEach(t),uIr=i(hOe),DCe=n(hOe,"SPAN",{});var K7t=s(DCe);pIr=r(K7t,"FlaxAutoModelForSequenceClassification"),K7t.forEach(t),hOe.forEach(t),iDe=i(m),pr=n(m,"DIV",{class:!0});var Yl=s(pr);T(rx.$$.fragment,Yl),_Ir=i(Yl),zc=n(Yl,"P",{});var roe=s(zc);bIr=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),_K=n(roe,"A",{href:!0});var Z7t=s(_K);vIr=r(Z7t,"from_pretrained()"),Z7t.forEach(t),FIr=r(roe," class method or the "),bK=n(roe,"A",{href:!0});var e9t=s(bK);TIr=r(e9t,"from_config()"),e9t.forEach(t),MIr=r(roe,` class
method.`),roe.forEach(t),EIr=i(Yl),tx=n(Yl,"P",{});var uOe=s(tx);CIr=r(uOe,"This class cannot be instantiated directly using "),GCe=n(uOe,"CODE",{});var o9t=s(GCe);wIr=r(o9t,"__init__()"),o9t.forEach(t),AIr=r(uOe," (throws an error)."),uOe.forEach(t),yIr=i(Yl),Wt=n(Yl,"DIV",{class:!0});var hy=s(Wt);T(ax.$$.fragment,hy),LIr=i(hy),OCe=n(hy,"P",{});var r9t=s(OCe);xIr=r(r9t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),r9t.forEach(t),$Ir=i(hy),Wc=n(hy,"P",{});var toe=s(Wc);kIr=r(toe,`Note:
Loading a model from its configuration file does `),VCe=n(toe,"STRONG",{});var t9t=s(VCe);SIr=r(t9t,"not"),t9t.forEach(t),RIr=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=n(toe,"A",{href:!0});var a9t=s(vK);PIr=r(a9t,"from_pretrained()"),a9t.forEach(t),BIr=r(toe," to load the model weights."),toe.forEach(t),IIr=i(hy),T(n0.$$.fragment,hy),hy.forEach(t),NIr=i(Yl),Xr=n(Yl,"DIV",{class:!0});var Kl=s(Xr);T(nx.$$.fragment,Kl),qIr=i(Kl),XCe=n(Kl,"P",{});var n9t=s(XCe);jIr=r(n9t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),n9t.forEach(t),DIr=i(Kl),vn=n(Kl,"P",{});var uy=s(vn);GIr=r(uy,"The model class to instantiate is selected based on the "),zCe=n(uy,"CODE",{});var s9t=s(zCe);OIr=r(s9t,"model_type"),s9t.forEach(t),VIr=r(uy,` property of the config object (either
passed as an argument or loaded from `),WCe=n(uy,"CODE",{});var l9t=s(WCe);XIr=r(l9t,"pretrained_model_name_or_path"),l9t.forEach(t),zIr=r(uy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QCe=n(uy,"CODE",{});var i9t=s(QCe);WIr=r(i9t,"pretrained_model_name_or_path"),i9t.forEach(t),QIr=r(uy,":"),uy.forEach(t),HIr=i(Kl),$e=n(Kl,"UL",{});var qe=s($e);s0=n(qe,"LI",{});var SNe=s(s0);HCe=n(SNe,"STRONG",{});var d9t=s(HCe);UIr=r(d9t,"albert"),d9t.forEach(t),JIr=r(SNe," \u2014 "),FK=n(SNe,"A",{href:!0});var c9t=s(FK);YIr=r(c9t,"FlaxAlbertForSequenceClassification"),c9t.forEach(t),KIr=r(SNe," (ALBERT model)"),SNe.forEach(t),ZIr=i(qe),l0=n(qe,"LI",{});var RNe=s(l0);UCe=n(RNe,"STRONG",{});var m9t=s(UCe);eNr=r(m9t,"bart"),m9t.forEach(t),oNr=r(RNe," \u2014 "),TK=n(RNe,"A",{href:!0});var f9t=s(TK);rNr=r(f9t,"FlaxBartForSequenceClassification"),f9t.forEach(t),tNr=r(RNe," (BART model)"),RNe.forEach(t),aNr=i(qe),i0=n(qe,"LI",{});var PNe=s(i0);JCe=n(PNe,"STRONG",{});var g9t=s(JCe);nNr=r(g9t,"bert"),g9t.forEach(t),sNr=r(PNe," \u2014 "),MK=n(PNe,"A",{href:!0});var h9t=s(MK);lNr=r(h9t,"FlaxBertForSequenceClassification"),h9t.forEach(t),iNr=r(PNe," (BERT model)"),PNe.forEach(t),dNr=i(qe),d0=n(qe,"LI",{});var BNe=s(d0);YCe=n(BNe,"STRONG",{});var u9t=s(YCe);cNr=r(u9t,"big_bird"),u9t.forEach(t),mNr=r(BNe," \u2014 "),EK=n(BNe,"A",{href:!0});var p9t=s(EK);fNr=r(p9t,"FlaxBigBirdForSequenceClassification"),p9t.forEach(t),gNr=r(BNe," (BigBird model)"),BNe.forEach(t),hNr=i(qe),c0=n(qe,"LI",{});var INe=s(c0);KCe=n(INe,"STRONG",{});var _9t=s(KCe);uNr=r(_9t,"distilbert"),_9t.forEach(t),pNr=r(INe," \u2014 "),CK=n(INe,"A",{href:!0});var b9t=s(CK);_Nr=r(b9t,"FlaxDistilBertForSequenceClassification"),b9t.forEach(t),bNr=r(INe," (DistilBERT model)"),INe.forEach(t),vNr=i(qe),m0=n(qe,"LI",{});var NNe=s(m0);ZCe=n(NNe,"STRONG",{});var v9t=s(ZCe);FNr=r(v9t,"electra"),v9t.forEach(t),TNr=r(NNe," \u2014 "),wK=n(NNe,"A",{href:!0});var F9t=s(wK);MNr=r(F9t,"FlaxElectraForSequenceClassification"),F9t.forEach(t),ENr=r(NNe," (ELECTRA model)"),NNe.forEach(t),CNr=i(qe),f0=n(qe,"LI",{});var qNe=s(f0);e5e=n(qNe,"STRONG",{});var T9t=s(e5e);wNr=r(T9t,"mbart"),T9t.forEach(t),ANr=r(qNe," \u2014 "),AK=n(qNe,"A",{href:!0});var M9t=s(AK);yNr=r(M9t,"FlaxMBartForSequenceClassification"),M9t.forEach(t),LNr=r(qNe," (mBART model)"),qNe.forEach(t),xNr=i(qe),g0=n(qe,"LI",{});var jNe=s(g0);o5e=n(jNe,"STRONG",{});var E9t=s(o5e);$Nr=r(E9t,"roberta"),E9t.forEach(t),kNr=r(jNe," \u2014 "),yK=n(jNe,"A",{href:!0});var C9t=s(yK);SNr=r(C9t,"FlaxRobertaForSequenceClassification"),C9t.forEach(t),RNr=r(jNe," (RoBERTa model)"),jNe.forEach(t),PNr=i(qe),h0=n(qe,"LI",{});var DNe=s(h0);r5e=n(DNe,"STRONG",{});var w9t=s(r5e);BNr=r(w9t,"roformer"),w9t.forEach(t),INr=r(DNe," \u2014 "),LK=n(DNe,"A",{href:!0});var A9t=s(LK);NNr=r(A9t,"FlaxRoFormerForSequenceClassification"),A9t.forEach(t),qNr=r(DNe," (RoFormer model)"),DNe.forEach(t),jNr=i(qe),u0=n(qe,"LI",{});var GNe=s(u0);t5e=n(GNe,"STRONG",{});var y9t=s(t5e);DNr=r(y9t,"xlm-roberta"),y9t.forEach(t),GNr=r(GNe," \u2014 "),xK=n(GNe,"A",{href:!0});var L9t=s(xK);ONr=r(L9t,"FlaxXLMRobertaForSequenceClassification"),L9t.forEach(t),VNr=r(GNe," (XLM-RoBERTa model)"),GNe.forEach(t),qe.forEach(t),XNr=i(Kl),T(p0.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),dDe=i(m),Qc=n(m,"H2",{class:!0});var pOe=s(Qc);_0=n(pOe,"A",{id:!0,class:!0,href:!0});var x9t=s(_0);a5e=n(x9t,"SPAN",{});var $9t=s(a5e);T(sx.$$.fragment,$9t),$9t.forEach(t),x9t.forEach(t),zNr=i(pOe),n5e=n(pOe,"SPAN",{});var k9t=s(n5e);WNr=r(k9t,"FlaxAutoModelForQuestionAnswering"),k9t.forEach(t),pOe.forEach(t),cDe=i(m),_r=n(m,"DIV",{class:!0});var Zl=s(_r);T(lx.$$.fragment,Zl),QNr=i(Zl),Hc=n(Zl,"P",{});var aoe=s(Hc);HNr=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$K=n(aoe,"A",{href:!0});var S9t=s($K);UNr=r(S9t,"from_pretrained()"),S9t.forEach(t),JNr=r(aoe," class method or the "),kK=n(aoe,"A",{href:!0});var R9t=s(kK);YNr=r(R9t,"from_config()"),R9t.forEach(t),KNr=r(aoe,` class
method.`),aoe.forEach(t),ZNr=i(Zl),ix=n(Zl,"P",{});var _Oe=s(ix);eqr=r(_Oe,"This class cannot be instantiated directly using "),s5e=n(_Oe,"CODE",{});var P9t=s(s5e);oqr=r(P9t,"__init__()"),P9t.forEach(t),rqr=r(_Oe," (throws an error)."),_Oe.forEach(t),tqr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var py=s(Qt);T(dx.$$.fragment,py),aqr=i(py),l5e=n(py,"P",{});var B9t=s(l5e);nqr=r(B9t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),B9t.forEach(t),sqr=i(py),Uc=n(py,"P",{});var noe=s(Uc);lqr=r(noe,`Note:
Loading a model from its configuration file does `),i5e=n(noe,"STRONG",{});var I9t=s(i5e);iqr=r(I9t,"not"),I9t.forEach(t),dqr=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),SK=n(noe,"A",{href:!0});var N9t=s(SK);cqr=r(N9t,"from_pretrained()"),N9t.forEach(t),mqr=r(noe," to load the model weights."),noe.forEach(t),fqr=i(py),T(b0.$$.fragment,py),py.forEach(t),gqr=i(Zl),zr=n(Zl,"DIV",{class:!0});var ei=s(zr);T(cx.$$.fragment,ei),hqr=i(ei),d5e=n(ei,"P",{});var q9t=s(d5e);uqr=r(q9t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),q9t.forEach(t),pqr=i(ei),Fn=n(ei,"P",{});var _y=s(Fn);_qr=r(_y,"The model class to instantiate is selected based on the "),c5e=n(_y,"CODE",{});var j9t=s(c5e);bqr=r(j9t,"model_type"),j9t.forEach(t),vqr=r(_y,` property of the config object (either
passed as an argument or loaded from `),m5e=n(_y,"CODE",{});var D9t=s(m5e);Fqr=r(D9t,"pretrained_model_name_or_path"),D9t.forEach(t),Tqr=r(_y,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f5e=n(_y,"CODE",{});var G9t=s(f5e);Mqr=r(G9t,"pretrained_model_name_or_path"),G9t.forEach(t),Eqr=r(_y,":"),_y.forEach(t),Cqr=i(ei),ke=n(ei,"UL",{});var je=s(ke);v0=n(je,"LI",{});var ONe=s(v0);g5e=n(ONe,"STRONG",{});var O9t=s(g5e);wqr=r(O9t,"albert"),O9t.forEach(t),Aqr=r(ONe," \u2014 "),RK=n(ONe,"A",{href:!0});var V9t=s(RK);yqr=r(V9t,"FlaxAlbertForQuestionAnswering"),V9t.forEach(t),Lqr=r(ONe," (ALBERT model)"),ONe.forEach(t),xqr=i(je),F0=n(je,"LI",{});var VNe=s(F0);h5e=n(VNe,"STRONG",{});var X9t=s(h5e);$qr=r(X9t,"bart"),X9t.forEach(t),kqr=r(VNe," \u2014 "),PK=n(VNe,"A",{href:!0});var z9t=s(PK);Sqr=r(z9t,"FlaxBartForQuestionAnswering"),z9t.forEach(t),Rqr=r(VNe," (BART model)"),VNe.forEach(t),Pqr=i(je),T0=n(je,"LI",{});var XNe=s(T0);u5e=n(XNe,"STRONG",{});var W9t=s(u5e);Bqr=r(W9t,"bert"),W9t.forEach(t),Iqr=r(XNe," \u2014 "),BK=n(XNe,"A",{href:!0});var Q9t=s(BK);Nqr=r(Q9t,"FlaxBertForQuestionAnswering"),Q9t.forEach(t),qqr=r(XNe," (BERT model)"),XNe.forEach(t),jqr=i(je),M0=n(je,"LI",{});var zNe=s(M0);p5e=n(zNe,"STRONG",{});var H9t=s(p5e);Dqr=r(H9t,"big_bird"),H9t.forEach(t),Gqr=r(zNe," \u2014 "),IK=n(zNe,"A",{href:!0});var U9t=s(IK);Oqr=r(U9t,"FlaxBigBirdForQuestionAnswering"),U9t.forEach(t),Vqr=r(zNe," (BigBird model)"),zNe.forEach(t),Xqr=i(je),E0=n(je,"LI",{});var WNe=s(E0);_5e=n(WNe,"STRONG",{});var J9t=s(_5e);zqr=r(J9t,"distilbert"),J9t.forEach(t),Wqr=r(WNe," \u2014 "),NK=n(WNe,"A",{href:!0});var Y9t=s(NK);Qqr=r(Y9t,"FlaxDistilBertForQuestionAnswering"),Y9t.forEach(t),Hqr=r(WNe," (DistilBERT model)"),WNe.forEach(t),Uqr=i(je),C0=n(je,"LI",{});var QNe=s(C0);b5e=n(QNe,"STRONG",{});var K9t=s(b5e);Jqr=r(K9t,"electra"),K9t.forEach(t),Yqr=r(QNe," \u2014 "),qK=n(QNe,"A",{href:!0});var Z9t=s(qK);Kqr=r(Z9t,"FlaxElectraForQuestionAnswering"),Z9t.forEach(t),Zqr=r(QNe," (ELECTRA model)"),QNe.forEach(t),ejr=i(je),w0=n(je,"LI",{});var HNe=s(w0);v5e=n(HNe,"STRONG",{});var ext=s(v5e);ojr=r(ext,"mbart"),ext.forEach(t),rjr=r(HNe," \u2014 "),jK=n(HNe,"A",{href:!0});var oxt=s(jK);tjr=r(oxt,"FlaxMBartForQuestionAnswering"),oxt.forEach(t),ajr=r(HNe," (mBART model)"),HNe.forEach(t),njr=i(je),A0=n(je,"LI",{});var UNe=s(A0);F5e=n(UNe,"STRONG",{});var rxt=s(F5e);sjr=r(rxt,"roberta"),rxt.forEach(t),ljr=r(UNe," \u2014 "),DK=n(UNe,"A",{href:!0});var txt=s(DK);ijr=r(txt,"FlaxRobertaForQuestionAnswering"),txt.forEach(t),djr=r(UNe," (RoBERTa model)"),UNe.forEach(t),cjr=i(je),y0=n(je,"LI",{});var JNe=s(y0);T5e=n(JNe,"STRONG",{});var axt=s(T5e);mjr=r(axt,"roformer"),axt.forEach(t),fjr=r(JNe," \u2014 "),GK=n(JNe,"A",{href:!0});var nxt=s(GK);gjr=r(nxt,"FlaxRoFormerForQuestionAnswering"),nxt.forEach(t),hjr=r(JNe," (RoFormer model)"),JNe.forEach(t),ujr=i(je),L0=n(je,"LI",{});var YNe=s(L0);M5e=n(YNe,"STRONG",{});var sxt=s(M5e);pjr=r(sxt,"xlm-roberta"),sxt.forEach(t),_jr=r(YNe," \u2014 "),OK=n(YNe,"A",{href:!0});var lxt=s(OK);bjr=r(lxt,"FlaxXLMRobertaForQuestionAnswering"),lxt.forEach(t),vjr=r(YNe," (XLM-RoBERTa model)"),YNe.forEach(t),je.forEach(t),Fjr=i(ei),T(x0.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),mDe=i(m),Jc=n(m,"H2",{class:!0});var bOe=s(Jc);$0=n(bOe,"A",{id:!0,class:!0,href:!0});var ixt=s($0);E5e=n(ixt,"SPAN",{});var dxt=s(E5e);T(mx.$$.fragment,dxt),dxt.forEach(t),ixt.forEach(t),Tjr=i(bOe),C5e=n(bOe,"SPAN",{});var cxt=s(C5e);Mjr=r(cxt,"FlaxAutoModelForTokenClassification"),cxt.forEach(t),bOe.forEach(t),fDe=i(m),br=n(m,"DIV",{class:!0});var oi=s(br);T(fx.$$.fragment,oi),Ejr=i(oi),Yc=n(oi,"P",{});var soe=s(Yc);Cjr=r(soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VK=n(soe,"A",{href:!0});var mxt=s(VK);wjr=r(mxt,"from_pretrained()"),mxt.forEach(t),Ajr=r(soe," class method or the "),XK=n(soe,"A",{href:!0});var fxt=s(XK);yjr=r(fxt,"from_config()"),fxt.forEach(t),Ljr=r(soe,` class
method.`),soe.forEach(t),xjr=i(oi),gx=n(oi,"P",{});var vOe=s(gx);$jr=r(vOe,"This class cannot be instantiated directly using "),w5e=n(vOe,"CODE",{});var gxt=s(w5e);kjr=r(gxt,"__init__()"),gxt.forEach(t),Sjr=r(vOe," (throws an error)."),vOe.forEach(t),Rjr=i(oi),Ht=n(oi,"DIV",{class:!0});var by=s(Ht);T(hx.$$.fragment,by),Pjr=i(by),A5e=n(by,"P",{});var hxt=s(A5e);Bjr=r(hxt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hxt.forEach(t),Ijr=i(by),Kc=n(by,"P",{});var loe=s(Kc);Njr=r(loe,`Note:
Loading a model from its configuration file does `),y5e=n(loe,"STRONG",{});var uxt=s(y5e);qjr=r(uxt,"not"),uxt.forEach(t),jjr=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),zK=n(loe,"A",{href:!0});var pxt=s(zK);Djr=r(pxt,"from_pretrained()"),pxt.forEach(t),Gjr=r(loe," to load the model weights."),loe.forEach(t),Ojr=i(by),T(k0.$$.fragment,by),by.forEach(t),Vjr=i(oi),Wr=n(oi,"DIV",{class:!0});var ri=s(Wr);T(ux.$$.fragment,ri),Xjr=i(ri),L5e=n(ri,"P",{});var _xt=s(L5e);zjr=r(_xt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_xt.forEach(t),Wjr=i(ri),Tn=n(ri,"P",{});var vy=s(Tn);Qjr=r(vy,"The model class to instantiate is selected based on the "),x5e=n(vy,"CODE",{});var bxt=s(x5e);Hjr=r(bxt,"model_type"),bxt.forEach(t),Ujr=r(vy,` property of the config object (either
passed as an argument or loaded from `),$5e=n(vy,"CODE",{});var vxt=s($5e);Jjr=r(vxt,"pretrained_model_name_or_path"),vxt.forEach(t),Yjr=r(vy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k5e=n(vy,"CODE",{});var Fxt=s(k5e);Kjr=r(Fxt,"pretrained_model_name_or_path"),Fxt.forEach(t),Zjr=r(vy,":"),vy.forEach(t),eDr=i(ri),Ge=n(ri,"UL",{});var Fo=s(Ge);S0=n(Fo,"LI",{});var KNe=s(S0);S5e=n(KNe,"STRONG",{});var Txt=s(S5e);oDr=r(Txt,"albert"),Txt.forEach(t),rDr=r(KNe," \u2014 "),WK=n(KNe,"A",{href:!0});var Mxt=s(WK);tDr=r(Mxt,"FlaxAlbertForTokenClassification"),Mxt.forEach(t),aDr=r(KNe," (ALBERT model)"),KNe.forEach(t),nDr=i(Fo),R0=n(Fo,"LI",{});var ZNe=s(R0);R5e=n(ZNe,"STRONG",{});var Ext=s(R5e);sDr=r(Ext,"bert"),Ext.forEach(t),lDr=r(ZNe," \u2014 "),QK=n(ZNe,"A",{href:!0});var Cxt=s(QK);iDr=r(Cxt,"FlaxBertForTokenClassification"),Cxt.forEach(t),dDr=r(ZNe," (BERT model)"),ZNe.forEach(t),cDr=i(Fo),P0=n(Fo,"LI",{});var eqe=s(P0);P5e=n(eqe,"STRONG",{});var wxt=s(P5e);mDr=r(wxt,"big_bird"),wxt.forEach(t),fDr=r(eqe," \u2014 "),HK=n(eqe,"A",{href:!0});var Axt=s(HK);gDr=r(Axt,"FlaxBigBirdForTokenClassification"),Axt.forEach(t),hDr=r(eqe," (BigBird model)"),eqe.forEach(t),uDr=i(Fo),B0=n(Fo,"LI",{});var oqe=s(B0);B5e=n(oqe,"STRONG",{});var yxt=s(B5e);pDr=r(yxt,"distilbert"),yxt.forEach(t),_Dr=r(oqe," \u2014 "),UK=n(oqe,"A",{href:!0});var Lxt=s(UK);bDr=r(Lxt,"FlaxDistilBertForTokenClassification"),Lxt.forEach(t),vDr=r(oqe," (DistilBERT model)"),oqe.forEach(t),FDr=i(Fo),I0=n(Fo,"LI",{});var rqe=s(I0);I5e=n(rqe,"STRONG",{});var xxt=s(I5e);TDr=r(xxt,"electra"),xxt.forEach(t),MDr=r(rqe," \u2014 "),JK=n(rqe,"A",{href:!0});var $xt=s(JK);EDr=r($xt,"FlaxElectraForTokenClassification"),$xt.forEach(t),CDr=r(rqe," (ELECTRA model)"),rqe.forEach(t),wDr=i(Fo),N0=n(Fo,"LI",{});var tqe=s(N0);N5e=n(tqe,"STRONG",{});var kxt=s(N5e);ADr=r(kxt,"roberta"),kxt.forEach(t),yDr=r(tqe," \u2014 "),YK=n(tqe,"A",{href:!0});var Sxt=s(YK);LDr=r(Sxt,"FlaxRobertaForTokenClassification"),Sxt.forEach(t),xDr=r(tqe," (RoBERTa model)"),tqe.forEach(t),$Dr=i(Fo),q0=n(Fo,"LI",{});var aqe=s(q0);q5e=n(aqe,"STRONG",{});var Rxt=s(q5e);kDr=r(Rxt,"roformer"),Rxt.forEach(t),SDr=r(aqe," \u2014 "),KK=n(aqe,"A",{href:!0});var Pxt=s(KK);RDr=r(Pxt,"FlaxRoFormerForTokenClassification"),Pxt.forEach(t),PDr=r(aqe," (RoFormer model)"),aqe.forEach(t),BDr=i(Fo),j0=n(Fo,"LI",{});var nqe=s(j0);j5e=n(nqe,"STRONG",{});var Bxt=s(j5e);IDr=r(Bxt,"xlm-roberta"),Bxt.forEach(t),NDr=r(nqe," \u2014 "),ZK=n(nqe,"A",{href:!0});var Ixt=s(ZK);qDr=r(Ixt,"FlaxXLMRobertaForTokenClassification"),Ixt.forEach(t),jDr=r(nqe," (XLM-RoBERTa model)"),nqe.forEach(t),Fo.forEach(t),DDr=i(ri),T(D0.$$.fragment,ri),ri.forEach(t),oi.forEach(t),gDe=i(m),Zc=n(m,"H2",{class:!0});var FOe=s(Zc);G0=n(FOe,"A",{id:!0,class:!0,href:!0});var Nxt=s(G0);D5e=n(Nxt,"SPAN",{});var qxt=s(D5e);T(px.$$.fragment,qxt),qxt.forEach(t),Nxt.forEach(t),GDr=i(FOe),G5e=n(FOe,"SPAN",{});var jxt=s(G5e);ODr=r(jxt,"FlaxAutoModelForMultipleChoice"),jxt.forEach(t),FOe.forEach(t),hDe=i(m),vr=n(m,"DIV",{class:!0});var ti=s(vr);T(_x.$$.fragment,ti),VDr=i(ti),em=n(ti,"P",{});var ioe=s(em);XDr=r(ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),eZ=n(ioe,"A",{href:!0});var Dxt=s(eZ);zDr=r(Dxt,"from_pretrained()"),Dxt.forEach(t),WDr=r(ioe," class method or the "),oZ=n(ioe,"A",{href:!0});var Gxt=s(oZ);QDr=r(Gxt,"from_config()"),Gxt.forEach(t),HDr=r(ioe,` class
method.`),ioe.forEach(t),UDr=i(ti),bx=n(ti,"P",{});var TOe=s(bx);JDr=r(TOe,"This class cannot be instantiated directly using "),O5e=n(TOe,"CODE",{});var Oxt=s(O5e);YDr=r(Oxt,"__init__()"),Oxt.forEach(t),KDr=r(TOe," (throws an error)."),TOe.forEach(t),ZDr=i(ti),Ut=n(ti,"DIV",{class:!0});var Fy=s(Ut);T(vx.$$.fragment,Fy),eGr=i(Fy),V5e=n(Fy,"P",{});var Vxt=s(V5e);oGr=r(Vxt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Vxt.forEach(t),rGr=i(Fy),om=n(Fy,"P",{});var doe=s(om);tGr=r(doe,`Note:
Loading a model from its configuration file does `),X5e=n(doe,"STRONG",{});var Xxt=s(X5e);aGr=r(Xxt,"not"),Xxt.forEach(t),nGr=r(doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),rZ=n(doe,"A",{href:!0});var zxt=s(rZ);sGr=r(zxt,"from_pretrained()"),zxt.forEach(t),lGr=r(doe," to load the model weights."),doe.forEach(t),iGr=i(Fy),T(O0.$$.fragment,Fy),Fy.forEach(t),dGr=i(ti),Qr=n(ti,"DIV",{class:!0});var ai=s(Qr);T(Fx.$$.fragment,ai),cGr=i(ai),z5e=n(ai,"P",{});var Wxt=s(z5e);mGr=r(Wxt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Wxt.forEach(t),fGr=i(ai),Mn=n(ai,"P",{});var Ty=s(Mn);gGr=r(Ty,"The model class to instantiate is selected based on the "),W5e=n(Ty,"CODE",{});var Qxt=s(W5e);hGr=r(Qxt,"model_type"),Qxt.forEach(t),uGr=r(Ty,` property of the config object (either
passed as an argument or loaded from `),Q5e=n(Ty,"CODE",{});var Hxt=s(Q5e);pGr=r(Hxt,"pretrained_model_name_or_path"),Hxt.forEach(t),_Gr=r(Ty,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H5e=n(Ty,"CODE",{});var Uxt=s(H5e);bGr=r(Uxt,"pretrained_model_name_or_path"),Uxt.forEach(t),vGr=r(Ty,":"),Ty.forEach(t),FGr=i(ai),Oe=n(ai,"UL",{});var To=s(Oe);V0=n(To,"LI",{});var sqe=s(V0);U5e=n(sqe,"STRONG",{});var Jxt=s(U5e);TGr=r(Jxt,"albert"),Jxt.forEach(t),MGr=r(sqe," \u2014 "),tZ=n(sqe,"A",{href:!0});var Yxt=s(tZ);EGr=r(Yxt,"FlaxAlbertForMultipleChoice"),Yxt.forEach(t),CGr=r(sqe," (ALBERT model)"),sqe.forEach(t),wGr=i(To),X0=n(To,"LI",{});var lqe=s(X0);J5e=n(lqe,"STRONG",{});var Kxt=s(J5e);AGr=r(Kxt,"bert"),Kxt.forEach(t),yGr=r(lqe," \u2014 "),aZ=n(lqe,"A",{href:!0});var Zxt=s(aZ);LGr=r(Zxt,"FlaxBertForMultipleChoice"),Zxt.forEach(t),xGr=r(lqe," (BERT model)"),lqe.forEach(t),$Gr=i(To),z0=n(To,"LI",{});var iqe=s(z0);Y5e=n(iqe,"STRONG",{});var e$t=s(Y5e);kGr=r(e$t,"big_bird"),e$t.forEach(t),SGr=r(iqe," \u2014 "),nZ=n(iqe,"A",{href:!0});var o$t=s(nZ);RGr=r(o$t,"FlaxBigBirdForMultipleChoice"),o$t.forEach(t),PGr=r(iqe," (BigBird model)"),iqe.forEach(t),BGr=i(To),W0=n(To,"LI",{});var dqe=s(W0);K5e=n(dqe,"STRONG",{});var r$t=s(K5e);IGr=r(r$t,"distilbert"),r$t.forEach(t),NGr=r(dqe," \u2014 "),sZ=n(dqe,"A",{href:!0});var t$t=s(sZ);qGr=r(t$t,"FlaxDistilBertForMultipleChoice"),t$t.forEach(t),jGr=r(dqe," (DistilBERT model)"),dqe.forEach(t),DGr=i(To),Q0=n(To,"LI",{});var cqe=s(Q0);Z5e=n(cqe,"STRONG",{});var a$t=s(Z5e);GGr=r(a$t,"electra"),a$t.forEach(t),OGr=r(cqe," \u2014 "),lZ=n(cqe,"A",{href:!0});var n$t=s(lZ);VGr=r(n$t,"FlaxElectraForMultipleChoice"),n$t.forEach(t),XGr=r(cqe," (ELECTRA model)"),cqe.forEach(t),zGr=i(To),H0=n(To,"LI",{});var mqe=s(H0);e3e=n(mqe,"STRONG",{});var s$t=s(e3e);WGr=r(s$t,"roberta"),s$t.forEach(t),QGr=r(mqe," \u2014 "),iZ=n(mqe,"A",{href:!0});var l$t=s(iZ);HGr=r(l$t,"FlaxRobertaForMultipleChoice"),l$t.forEach(t),UGr=r(mqe," (RoBERTa model)"),mqe.forEach(t),JGr=i(To),U0=n(To,"LI",{});var fqe=s(U0);o3e=n(fqe,"STRONG",{});var i$t=s(o3e);YGr=r(i$t,"roformer"),i$t.forEach(t),KGr=r(fqe," \u2014 "),dZ=n(fqe,"A",{href:!0});var d$t=s(dZ);ZGr=r(d$t,"FlaxRoFormerForMultipleChoice"),d$t.forEach(t),eOr=r(fqe," (RoFormer model)"),fqe.forEach(t),oOr=i(To),J0=n(To,"LI",{});var gqe=s(J0);r3e=n(gqe,"STRONG",{});var c$t=s(r3e);rOr=r(c$t,"xlm-roberta"),c$t.forEach(t),tOr=r(gqe," \u2014 "),cZ=n(gqe,"A",{href:!0});var m$t=s(cZ);aOr=r(m$t,"FlaxXLMRobertaForMultipleChoice"),m$t.forEach(t),nOr=r(gqe," (XLM-RoBERTa model)"),gqe.forEach(t),To.forEach(t),sOr=i(ai),T(Y0.$$.fragment,ai),ai.forEach(t),ti.forEach(t),uDe=i(m),rm=n(m,"H2",{class:!0});var MOe=s(rm);K0=n(MOe,"A",{id:!0,class:!0,href:!0});var f$t=s(K0);t3e=n(f$t,"SPAN",{});var g$t=s(t3e);T(Tx.$$.fragment,g$t),g$t.forEach(t),f$t.forEach(t),lOr=i(MOe),a3e=n(MOe,"SPAN",{});var h$t=s(a3e);iOr=r(h$t,"FlaxAutoModelForNextSentencePrediction"),h$t.forEach(t),MOe.forEach(t),pDe=i(m),Fr=n(m,"DIV",{class:!0});var ni=s(Fr);T(Mx.$$.fragment,ni),dOr=i(ni),tm=n(ni,"P",{});var coe=s(tm);cOr=r(coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),mZ=n(coe,"A",{href:!0});var u$t=s(mZ);mOr=r(u$t,"from_pretrained()"),u$t.forEach(t),fOr=r(coe," class method or the "),fZ=n(coe,"A",{href:!0});var p$t=s(fZ);gOr=r(p$t,"from_config()"),p$t.forEach(t),hOr=r(coe,` class
method.`),coe.forEach(t),uOr=i(ni),Ex=n(ni,"P",{});var EOe=s(Ex);pOr=r(EOe,"This class cannot be instantiated directly using "),n3e=n(EOe,"CODE",{});var _$t=s(n3e);_Or=r(_$t,"__init__()"),_$t.forEach(t),bOr=r(EOe," (throws an error)."),EOe.forEach(t),vOr=i(ni),Jt=n(ni,"DIV",{class:!0});var My=s(Jt);T(Cx.$$.fragment,My),FOr=i(My),s3e=n(My,"P",{});var b$t=s(s3e);TOr=r(b$t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),b$t.forEach(t),MOr=i(My),am=n(My,"P",{});var moe=s(am);EOr=r(moe,`Note:
Loading a model from its configuration file does `),l3e=n(moe,"STRONG",{});var v$t=s(l3e);COr=r(v$t,"not"),v$t.forEach(t),wOr=r(moe,` load the model weights. It only affects the
model\u2019s configuration. Use `),gZ=n(moe,"A",{href:!0});var F$t=s(gZ);AOr=r(F$t,"from_pretrained()"),F$t.forEach(t),yOr=r(moe," to load the model weights."),moe.forEach(t),LOr=i(My),T(Z0.$$.fragment,My),My.forEach(t),xOr=i(ni),Hr=n(ni,"DIV",{class:!0});var si=s(Hr);T(wx.$$.fragment,si),$Or=i(si),i3e=n(si,"P",{});var T$t=s(i3e);kOr=r(T$t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),T$t.forEach(t),SOr=i(si),En=n(si,"P",{});var Ey=s(En);ROr=r(Ey,"The model class to instantiate is selected based on the "),d3e=n(Ey,"CODE",{});var M$t=s(d3e);POr=r(M$t,"model_type"),M$t.forEach(t),BOr=r(Ey,` property of the config object (either
passed as an argument or loaded from `),c3e=n(Ey,"CODE",{});var E$t=s(c3e);IOr=r(E$t,"pretrained_model_name_or_path"),E$t.forEach(t),NOr=r(Ey,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m3e=n(Ey,"CODE",{});var C$t=s(m3e);qOr=r(C$t,"pretrained_model_name_or_path"),C$t.forEach(t),jOr=r(Ey,":"),Ey.forEach(t),DOr=i(si),f3e=n(si,"UL",{});var w$t=s(f3e);e6=n(w$t,"LI",{});var hqe=s(e6);g3e=n(hqe,"STRONG",{});var A$t=s(g3e);GOr=r(A$t,"bert"),A$t.forEach(t),OOr=r(hqe," \u2014 "),hZ=n(hqe,"A",{href:!0});var y$t=s(hZ);VOr=r(y$t,"FlaxBertForNextSentencePrediction"),y$t.forEach(t),XOr=r(hqe," (BERT model)"),hqe.forEach(t),w$t.forEach(t),zOr=i(si),T(o6.$$.fragment,si),si.forEach(t),ni.forEach(t),_De=i(m),nm=n(m,"H2",{class:!0});var COe=s(nm);r6=n(COe,"A",{id:!0,class:!0,href:!0});var L$t=s(r6);h3e=n(L$t,"SPAN",{});var x$t=s(h3e);T(Ax.$$.fragment,x$t),x$t.forEach(t),L$t.forEach(t),WOr=i(COe),u3e=n(COe,"SPAN",{});var $$t=s(u3e);QOr=r($$t,"FlaxAutoModelForImageClassification"),$$t.forEach(t),COe.forEach(t),bDe=i(m),Tr=n(m,"DIV",{class:!0});var li=s(Tr);T(yx.$$.fragment,li),HOr=i(li),sm=n(li,"P",{});var foe=s(sm);UOr=r(foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),uZ=n(foe,"A",{href:!0});var k$t=s(uZ);JOr=r(k$t,"from_pretrained()"),k$t.forEach(t),YOr=r(foe," class method or the "),pZ=n(foe,"A",{href:!0});var S$t=s(pZ);KOr=r(S$t,"from_config()"),S$t.forEach(t),ZOr=r(foe,` class
method.`),foe.forEach(t),eVr=i(li),Lx=n(li,"P",{});var wOe=s(Lx);oVr=r(wOe,"This class cannot be instantiated directly using "),p3e=n(wOe,"CODE",{});var R$t=s(p3e);rVr=r(R$t,"__init__()"),R$t.forEach(t),tVr=r(wOe," (throws an error)."),wOe.forEach(t),aVr=i(li),Yt=n(li,"DIV",{class:!0});var Cy=s(Yt);T(xx.$$.fragment,Cy),nVr=i(Cy),_3e=n(Cy,"P",{});var P$t=s(_3e);sVr=r(P$t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),P$t.forEach(t),lVr=i(Cy),lm=n(Cy,"P",{});var goe=s(lm);iVr=r(goe,`Note:
Loading a model from its configuration file does `),b3e=n(goe,"STRONG",{});var B$t=s(b3e);dVr=r(B$t,"not"),B$t.forEach(t),cVr=r(goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Z=n(goe,"A",{href:!0});var I$t=s(_Z);mVr=r(I$t,"from_pretrained()"),I$t.forEach(t),fVr=r(goe," to load the model weights."),goe.forEach(t),gVr=i(Cy),T(t6.$$.fragment,Cy),Cy.forEach(t),hVr=i(li),Ur=n(li,"DIV",{class:!0});var ii=s(Ur);T($x.$$.fragment,ii),uVr=i(ii),v3e=n(ii,"P",{});var N$t=s(v3e);pVr=r(N$t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),N$t.forEach(t),_Vr=i(ii),Cn=n(ii,"P",{});var wy=s(Cn);bVr=r(wy,"The model class to instantiate is selected based on the "),F3e=n(wy,"CODE",{});var q$t=s(F3e);vVr=r(q$t,"model_type"),q$t.forEach(t),FVr=r(wy,` property of the config object (either
passed as an argument or loaded from `),T3e=n(wy,"CODE",{});var j$t=s(T3e);TVr=r(j$t,"pretrained_model_name_or_path"),j$t.forEach(t),MVr=r(wy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M3e=n(wy,"CODE",{});var D$t=s(M3e);EVr=r(D$t,"pretrained_model_name_or_path"),D$t.forEach(t),CVr=r(wy,":"),wy.forEach(t),wVr=i(ii),kx=n(ii,"UL",{});var AOe=s(kx);a6=n(AOe,"LI",{});var uqe=s(a6);E3e=n(uqe,"STRONG",{});var G$t=s(E3e);AVr=r(G$t,"beit"),G$t.forEach(t),yVr=r(uqe," \u2014 "),bZ=n(uqe,"A",{href:!0});var O$t=s(bZ);LVr=r(O$t,"FlaxBeitForImageClassification"),O$t.forEach(t),xVr=r(uqe," (BEiT model)"),uqe.forEach(t),$Vr=i(AOe),n6=n(AOe,"LI",{});var pqe=s(n6);C3e=n(pqe,"STRONG",{});var V$t=s(C3e);kVr=r(V$t,"vit"),V$t.forEach(t),SVr=r(pqe," \u2014 "),vZ=n(pqe,"A",{href:!0});var X$t=s(vZ);RVr=r(X$t,"FlaxViTForImageClassification"),X$t.forEach(t),PVr=r(pqe," (ViT model)"),pqe.forEach(t),AOe.forEach(t),BVr=i(ii),T(s6.$$.fragment,ii),ii.forEach(t),li.forEach(t),vDe=i(m),im=n(m,"H2",{class:!0});var yOe=s(im);l6=n(yOe,"A",{id:!0,class:!0,href:!0});var z$t=s(l6);w3e=n(z$t,"SPAN",{});var W$t=s(w3e);T(Sx.$$.fragment,W$t),W$t.forEach(t),z$t.forEach(t),IVr=i(yOe),A3e=n(yOe,"SPAN",{});var Q$t=s(A3e);NVr=r(Q$t,"FlaxAutoModelForVision2Seq"),Q$t.forEach(t),yOe.forEach(t),FDe=i(m),Mr=n(m,"DIV",{class:!0});var di=s(Mr);T(Rx.$$.fragment,di),qVr=i(di),dm=n(di,"P",{});var hoe=s(dm);jVr=r(hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),FZ=n(hoe,"A",{href:!0});var H$t=s(FZ);DVr=r(H$t,"from_pretrained()"),H$t.forEach(t),GVr=r(hoe," class method or the "),TZ=n(hoe,"A",{href:!0});var U$t=s(TZ);OVr=r(U$t,"from_config()"),U$t.forEach(t),VVr=r(hoe,` class
method.`),hoe.forEach(t),XVr=i(di),Px=n(di,"P",{});var LOe=s(Px);zVr=r(LOe,"This class cannot be instantiated directly using "),y3e=n(LOe,"CODE",{});var J$t=s(y3e);WVr=r(J$t,"__init__()"),J$t.forEach(t),QVr=r(LOe," (throws an error)."),LOe.forEach(t),HVr=i(di),Kt=n(di,"DIV",{class:!0});var Ay=s(Kt);T(Bx.$$.fragment,Ay),UVr=i(Ay),L3e=n(Ay,"P",{});var Y$t=s(L3e);JVr=r(Y$t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Y$t.forEach(t),YVr=i(Ay),cm=n(Ay,"P",{});var uoe=s(cm);KVr=r(uoe,`Note:
Loading a model from its configuration file does `),x3e=n(uoe,"STRONG",{});var K$t=s(x3e);ZVr=r(K$t,"not"),K$t.forEach(t),eXr=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),MZ=n(uoe,"A",{href:!0});var Z$t=s(MZ);oXr=r(Z$t,"from_pretrained()"),Z$t.forEach(t),rXr=r(uoe," to load the model weights."),uoe.forEach(t),tXr=i(Ay),T(i6.$$.fragment,Ay),Ay.forEach(t),aXr=i(di),Jr=n(di,"DIV",{class:!0});var ci=s(Jr);T(Ix.$$.fragment,ci),nXr=i(ci),$3e=n(ci,"P",{});var ekt=s($3e);sXr=r(ekt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ekt.forEach(t),lXr=i(ci),wn=n(ci,"P",{});var yy=s(wn);iXr=r(yy,"The model class to instantiate is selected based on the "),k3e=n(yy,"CODE",{});var okt=s(k3e);dXr=r(okt,"model_type"),okt.forEach(t),cXr=r(yy,` property of the config object (either
passed as an argument or loaded from `),S3e=n(yy,"CODE",{});var rkt=s(S3e);mXr=r(rkt,"pretrained_model_name_or_path"),rkt.forEach(t),fXr=r(yy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R3e=n(yy,"CODE",{});var tkt=s(R3e);gXr=r(tkt,"pretrained_model_name_or_path"),tkt.forEach(t),hXr=r(yy,":"),yy.forEach(t),uXr=i(ci),P3e=n(ci,"UL",{});var akt=s(P3e);d6=n(akt,"LI",{});var _qe=s(d6);B3e=n(_qe,"STRONG",{});var nkt=s(B3e);pXr=r(nkt,"vision-encoder-decoder"),nkt.forEach(t),_Xr=r(_qe," \u2014 "),EZ=n(_qe,"A",{href:!0});var skt=s(EZ);bXr=r(skt,"FlaxVisionEncoderDecoderModel"),skt.forEach(t),vXr=r(_qe," (Vision Encoder decoder model)"),_qe.forEach(t),akt.forEach(t),FXr=i(ci),T(c6.$$.fragment,ci),ci.forEach(t),di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(cRt)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(yn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(_i,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(bm,"id","extending-the-auto-classes"),c(bm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bm,"href","#extending-the-auto-classes"),c(bi,"class","relative group"),c(Fm,"id","transformers.AutoConfig"),c(Fm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fm,"href","#transformers.AutoConfig"),c(vi,"class","relative group"),c(rk,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(tk,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(ak,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(nk,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(sk,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(lk,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(ik,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(dk,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(ck,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(mk,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(fk,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(gk,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(hk,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(uk,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(pk,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(_k,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(bk,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig"),c(vk,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(Fk,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Tk,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(Mk,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(Ek,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(Ck,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(wk,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(Ak,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(yk,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(Lk,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(xk,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c($k,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(kk,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Sk,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Rk,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),c(Pk,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(Bk,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(Ik,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(Nk,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(qk,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(jk,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Dk,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(Gk,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(Ok,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(Vk,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(Xk,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(zk,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Wk,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Qk,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(Hk,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(Uk,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(Jk,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(Yk,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(Kk,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(Zk,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(eS,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(oS,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(rS,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(tS,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(aS,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(nS,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(sS,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(lS,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(iS,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),c(dS,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(cS,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(mS,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(fS,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(gS,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(hS,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(uS,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(pS,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(_S,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(bS,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(vS,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(FS,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(TS,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(MS,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(ES,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(CS,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(wS,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(AS,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(yS,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(LS,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(xS,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c($S,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(kS,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(SS,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(RS,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(PS,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(BS,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(IS,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(NS,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(qS,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(jS,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(DS,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(GS,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(OS,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(VS,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(XS,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(zS,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(WS,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(QS,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(HS,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(US,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(JS,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(YS,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(KS,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(ZS,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(eR,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(oR,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(rR,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(tR,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wg,"id","transformers.AutoTokenizer"),c(wg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wg,"href","#transformers.AutoTokenizer"),c(Ti,"class","relative group"),c(aR,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(nR,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(sR,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(lR,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(iR,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(dR,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(cR,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(mR,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(fR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(gR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(hR,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(uR,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(pR,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(_R,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(bR,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(vR,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(FR,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(TR,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(MR,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(ER,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(CR,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(wR,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(AR,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(yR,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(LR,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(xR,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c($R,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(kR,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(SR,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(RR,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(PR,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(BR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(IR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(NR,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(qR,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(jR,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(DR,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(GR,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(OR,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(VR,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(XR,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(zR,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(WR,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(QR,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(HR,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(UR,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(JR,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(YR,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(KR,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(ZR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(eP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(oP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(rP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(tP,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(aP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(nP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(sP,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(lP,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(iP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(dP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(cP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(mP,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(fP,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(gP,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(hP,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(uP,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(pP,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(_P,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(bP,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(vP,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(FP,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(TP,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(MP,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(EP,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(CP,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(wP,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(AP,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(yP,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(LP,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(xP,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c($P,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(kP,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(SP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(RP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(PP,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(BP,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(IP,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(NP,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(qP,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(jP,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(DP,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(GP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(OP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(VP,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(XP,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(zP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(WP,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(QP,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(HP,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(UP,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(JP,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(YP,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(KP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(ZP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(eB,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(oB,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(rB,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(tB,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(aB,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(nB,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(sB,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(lB,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(iB,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(dB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(cB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(mB,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(fB,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(gB,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(hB,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(uB,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(pB,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(_B,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(bB,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(vB,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(FB,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(TB,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(MB,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(EB,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(CB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(wB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(AB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(yB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(LB,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(xB,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c($B,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(kB,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(SB,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(RB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(PB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(BB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(IB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(NB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(qB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(jB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(DB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sh,"id","transformers.AutoFeatureExtractor"),c(sh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sh,"href","#transformers.AutoFeatureExtractor"),c(Mi,"class","relative group"),c(GB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(OB,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(VB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(XB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(zB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(WB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(QB,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(HB,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(UB,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(JB,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(YB,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(KB,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(ZB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(eI,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(oI,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(rI,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(tI,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(aI,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(nI,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(sI,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(lI,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(iI,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(dI,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(cI,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(mI,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(fI,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(gI,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(hI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(uI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(pI,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jh,"id","transformers.AutoProcessor"),c(jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jh,"href","#transformers.AutoProcessor"),c(Ei,"class","relative group"),c(_I,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(bI,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(vI,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(FI,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(TI,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(MI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(EI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(CI,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(wI,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(AI,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(yI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(LI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(xI,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c($I,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(kI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(SI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(RI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(su,"id","transformers.AutoModel"),c(su,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(su,"href","#transformers.AutoModel"),c(wi,"class","relative group"),c(PI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(II,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(qI,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(jI,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(DI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(GI,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(OI,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(VI,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(XI,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(zI,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(WI,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(QI,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(HI,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(UI,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(JI,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(YI,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(KI,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel"),c(ZI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(eN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(oN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(rN,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(tN,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(aN,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(nN,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(sN,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(lN,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(iN,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(dN,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(cN,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(mN,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(fN,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),c(gN,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(hN,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(uN,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(pN,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(_N,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(bN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(vN,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(FN,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(TN,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(MN,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(EN,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c(CN,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(wN,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(AN,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(yN,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(LN,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(xN,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c($N,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(kN,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(SN,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(RN,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(PN,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(BN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(IN,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(NN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(qN,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(jN,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(DN,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(GN,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(ON,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),c(VN,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(XN,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(zN,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(WN,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(QN,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(HN,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(UN,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(JN,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(YN,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(KN,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(ZN,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(eq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(oq,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(rq,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(tq,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(aq,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(nq,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(sq,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(lq,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(iq,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(dq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(cq,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(mq,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(fq,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(gq,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(hq,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(uq,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(pq,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(_q,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(bq,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(vq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(Fq,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Tq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Mq,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Eq,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(Cq,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(wq,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(Aq,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(yq,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Lq,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(xq,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c($q,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(kq,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t_,"id","transformers.AutoModelForPreTraining"),c(t_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t_,"href","#transformers.AutoModelForPreTraining"),c(Li,"class","relative group"),c(Sq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Iq,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Nq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(qq,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(jq,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Dq,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Gq,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Oq,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Vq,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Xq,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(zq,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(Wq,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Qq,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),c(Hq,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Uq,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Jq,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Yq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Kq,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Zq,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(ej,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(oj,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(rj,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(tj,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(aj,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(nj,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(sj,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(lj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(ij,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(dj,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(cj,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(mj,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(fj,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(gj,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(hj,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(uj,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(pj,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(_j,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(bj,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(vj,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Fj,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Tj,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Mj,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U_,"id","transformers.AutoModelForCausalLM"),c(U_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U_,"href","#transformers.AutoModelForCausalLM"),c(ki,"class","relative group"),c(Ej,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Aj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(yj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(Lj,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(xj,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c($j,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(kj,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Sj,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Rj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Pj,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Bj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Ij,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Nj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(qj,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(jj,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(Dj,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Gj,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(Oj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Vj,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Xj,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(zj,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),c(Wj,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(Qj,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Hj,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(Uj,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(Jj,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Yj,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(Kj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Zj,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(eD,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(oD,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(rD,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(tD,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(aD,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(nD,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(sD,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(lD,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(iD,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ib,"id","transformers.AutoModelForMaskedLM"),c(Ib,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ib,"href","#transformers.AutoModelForMaskedLM"),c(Pi,"class","relative group"),c(dD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(gD,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(hD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(uD,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(pD,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(_D,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(bD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(vD,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(FD,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(TD,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(MD,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(ED,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(CD,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(wD,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(AD,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(yD,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(LD,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(xD,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c($D,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(kD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(SD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(RD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(PD,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(BD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(ID,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(ND,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(qD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(jD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(DD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(GD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(OD,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(VD,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(XD,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(zD,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(WD,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M2,"id","transformers.AutoModelForSeq2SeqLM"),c(M2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M2,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ni,"class","relative group"),c(QD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JD,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(YD,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(KD,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(ZD,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(eG,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(oG,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(rG,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(tG,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(aG,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(nG,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(sG,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(lG,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(iG,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(dG,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(cG,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(mG,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O2,"id","transformers.AutoModelForSequenceClassification"),c(O2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O2,"href","#transformers.AutoModelForSequenceClassification"),c(Di,"class","relative group"),c(fG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(pG,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(_G,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(bG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(vG,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(FG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(TG,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(MG,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(EG,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(CG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(wG,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(AG,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(yG,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(LG,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(xG,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c($G,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(kG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(SG,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(RG,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(PG,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(BG,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(IG,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(NG,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(qG,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(jG,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(DG,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(GG,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(OG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(VG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(XG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(zG,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(WG,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(QG,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(HG,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(UG,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(JG,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(YG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(KG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(ZG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(eO,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(oO,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(rO,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(tO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(aO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(nO,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(sO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(lO,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jv,"id","transformers.AutoModelForMultipleChoice"),c(jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jv,"href","#transformers.AutoModelForMultipleChoice"),c(Vi,"class","relative group"),c(iO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(fO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(gO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(hO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(uO,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(pO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(_O,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(bO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(vO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(FO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(TO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(MO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(EO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(CO,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(wO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(AO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(yO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(LO,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(xO,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c($O,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(kO,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(SO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(RO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(PO,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(BO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(IO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(NO,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(qO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(jO,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bF,"id","transformers.AutoModelForNextSentencePrediction"),c(bF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bF,"href","#transformers.AutoModelForNextSentencePrediction"),c(Wi,"class","relative group"),c(DO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(XO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(zO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(WO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(QO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yF,"id","transformers.AutoModelForTokenClassification"),c(yF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yF,"href","#transformers.AutoModelForTokenClassification"),c(Ui,"class","relative group"),c(HO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(KO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(ZO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(eV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(oV,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(rV,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(tV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(aV,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(nV,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(sV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(lV,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(iV,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(dV,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(cV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(mV,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(fV,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(gV,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(hV,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(uV,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(pV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(_V,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(bV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(vV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(FV,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(TV,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(MV,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(EV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(CV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(wV,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(AV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(yV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(LV,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(xV,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c($V,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m1,"id","transformers.AutoModelForQuestionAnswering"),c(m1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m1,"href","#transformers.AutoModelForQuestionAnswering"),c(Ki,"class","relative group"),c(kV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PV,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(BV,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(IV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(NV,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(qV,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(jV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(DV,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(GV,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(OV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(VV,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(XV,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(zV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(WV,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(QV,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(HV,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(UV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(JV,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(YV,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(KV,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(ZV,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(eX,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(oX,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(rX,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(tX,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(aX,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(nX,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(sX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(lX,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(iX,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(dX,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(cX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(mX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(fX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(gX,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(hX,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(uX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(pX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(_X,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(bX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(vX,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oT,"id","transformers.AutoModelForTableQuestionAnswering"),c(oT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oT,"href","#transformers.AutoModelForTableQuestionAnswering"),c(od,"class","relative group"),c(FX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EX,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sT,"id","transformers.AutoModelForImageClassification"),c(sT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sT,"href","#transformers.AutoModelForImageClassification"),c(ad,"class","relative group"),c(CX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yX,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(LX,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(xX,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification"),c($X,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(kX,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(SX,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(RX,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(PX,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(BX,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(IX,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(NX,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(qX,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(jX,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(DX,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(GX,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(OX,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(VX,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MT,"id","transformers.AutoModelForVision2Seq"),c(MT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MT,"href","#transformers.AutoModelForVision2Seq"),c(ld,"class","relative group"),c(XX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QX,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yT,"id","transformers.AutoModelForAudioClassification"),c(yT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yT,"href","#transformers.AutoModelForAudioClassification"),c(cd,"class","relative group"),c(HX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(KX,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(ZX,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(ez,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(oz,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(rz,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(tz,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(az,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(nz,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DT,"id","transformers.AutoModelForAudioFrameClassification"),c(DT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DT,"href","#transformers.AutoModelForAudioFrameClassification"),c(gd,"class","relative group"),c(sz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(cz,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(mz,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(fz,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(gz,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UT,"id","transformers.AutoModelForCTC"),c(UT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UT,"href","#transformers.AutoModelForCTC"),c(pd,"class","relative group"),c(hz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_z,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(bz,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(vz,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(Fz,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(Tz,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(Mz,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(Ez,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(Cz,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(wz,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iM,"id","transformers.AutoModelForSpeechSeq2Seq"),c(iM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iM,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(vd,"class","relative group"),c(Az,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xz,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c($z,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hM,"id","transformers.AutoModelForAudioXVector"),c(hM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hM,"href","#transformers.AutoModelForAudioXVector"),c(Md,"class","relative group"),c(kz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(Bz,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(Iz,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(Nz,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(qz,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EM,"id","transformers.AutoModelForMaskedImageModeling"),c(EM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EM,"href","#transformers.AutoModelForMaskedImageModeling"),c(wd,"class","relative group"),c(jz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oz,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(Vz,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(Xz,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($M,"id","transformers.AutoModelForObjectDetection"),c($M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($M,"href","#transformers.AutoModelForObjectDetection"),c(xd,"class","relative group"),c(zz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hz,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(Uz,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IM,"id","transformers.AutoModelForImageSegmentation"),c(IM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IM,"href","#transformers.AutoModelForImageSegmentation"),c(Sd,"class","relative group"),c(Jz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zz,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GM,"id","transformers.AutoModelForSemanticSegmentation"),c(GM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GM,"href","#transformers.AutoModelForSemanticSegmentation"),c(Bd,"class","relative group"),c(eW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tW,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(aW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(nW,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(sW,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UM,"id","transformers.AutoModelForInstanceSegmentation"),c(UM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UM,"href","#transformers.AutoModelForInstanceSegmentation"),c(qd,"class","relative group"),c(lW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cW,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e4,"id","transformers.TFAutoModel"),c(e4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e4,"href","#transformers.TFAutoModel"),c(Gd,"class","relative group"),c(mW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hW,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(uW,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(pW,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(_W,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(bW,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(vW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(FW,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(TW,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(MW,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(EW,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(CW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(wW,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(AW,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(yW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(LW,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(xW,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c($W,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(kW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(SW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(RW,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(PW,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(BW,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(IW,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(NW,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(qW,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(jW,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(DW,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(GW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(OW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(VW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(XW,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(zW,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(WW,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel"),c(QW,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(HW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(UW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(JW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(YW,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(KW,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),c(ZW,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(eQ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(oQ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(rQ,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(tQ,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(aQ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(nQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(sQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(lQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U4,"id","transformers.TFAutoModelForPreTraining"),c(U4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U4,"href","#transformers.TFAutoModelForPreTraining"),c(Xd,"class","relative group"),c(iQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(fQ,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(gQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(hQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(uQ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(pQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(_Q,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(bQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(vQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(FQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(TQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(MQ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(EQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(CQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(wQ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(AQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(yQ,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(LQ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(xQ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c($Q,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(kQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(SQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(RQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TE,"id","transformers.TFAutoModelForCausalLM"),c(TE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TE,"href","#transformers.TFAutoModelForCausalLM"),c(Qd,"class","relative group"),c(PQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(qQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(jQ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(DQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(GQ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(OQ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(VQ,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(XQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(zQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(WQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(QQ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(HQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(UQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NE,"id","transformers.TFAutoModelForImageClassification"),c(NE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NE,"href","#transformers.TFAutoModelForImageClassification"),c(Jd,"class","relative group"),c(JQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZQ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(eH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(oH,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(rH,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XE,"id","transformers.TFAutoModelForMaskedLM"),c(XE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XE,"href","#transformers.TFAutoModelForMaskedLM"),c(Zd,"class","relative group"),c(tH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sH,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(lH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(iH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(dH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(cH,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(mH,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(fH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(gH,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(hH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(uH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(pH,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(_H,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(bH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(vH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(FH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(TH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(MH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(EH,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(CH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(wH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gC,"id","transformers.TFAutoModelForSeq2SeqLM"),c(gC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gC,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(rc,"class","relative group"),c(AH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xH,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c($H,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(kH,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(SH,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(RH,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(PH,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(BH,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(IH,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(NH,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(qH,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AC,"id","transformers.TFAutoModelForSequenceClassification"),c(AC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AC,"href","#transformers.TFAutoModelForSequenceClassification"),c(nc,"class","relative group"),c(jH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OH,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(VH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(XH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(zH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(WH,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(QH,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(HH,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(UH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(JH,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(YH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(KH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(ZH,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(eU,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(oU,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(rU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(tU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(aU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(nU,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(sU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(lU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(iU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(dU,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(cU,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(mU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(fU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(gU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o5,"id","transformers.TFAutoModelForMultipleChoice"),c(o5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o5,"href","#transformers.TFAutoModelForMultipleChoice"),c(ic,"class","relative group"),c(hU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_U,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(bU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(vU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(FU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(TU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(MU,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(EU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(CU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(wU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(AU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(yU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(LU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(xU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c($U,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(kU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(SU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(RU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T5,"id","transformers.TFAutoModelForNextSentencePrediction"),c(T5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T5,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(mc,"class","relative group"),c(PU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(qU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A5,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(A5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A5,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(hc,"class","relative group"),c(jU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OU,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($5,"id","transformers.TFAutoModelForTokenClassification"),c($5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($5,"href","#transformers.TFAutoModelForTokenClassification"),c(_c,"class","relative group"),c(VU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WU,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(QU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(HU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(UU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(JU,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(YU,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(KU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(ZU,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(eJ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(oJ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(rJ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(tJ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(aJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(nJ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(sJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(lJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(iJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(dJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(cJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(mJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z5,"id","transformers.TFAutoModelForQuestionAnswering"),c(Z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z5,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Fc,"class","relative group"),c(fJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(pJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(_J,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(bJ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(vJ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(FJ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(TJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(MJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(EJ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(CJ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(wJ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(AJ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(yJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(LJ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(xJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c($J,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(kJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(SJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(RJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(PJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M3,"id","transformers.TFAutoModelForVision2Seq"),c(M3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M3,"href","#transformers.TFAutoModelForVision2Seq"),c(Ec,"class","relative group"),c(BJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qJ,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A3,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(A3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A3,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ac,"class","relative group"),c(jJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OJ,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($3,"id","transformers.FlaxAutoModel"),c($3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($3,"href","#transformers.FlaxAutoModel"),c(xc,"class","relative group"),c(VJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(QJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(HJ,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(UJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(JJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(YJ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(KJ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(ZJ,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(eY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(oY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(rY,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(tY,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(aY,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(nY,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(sY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(lY,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(iY,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel"),c(dY,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(cY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(mY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(fY,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(gY,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(hY,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(uY,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(pY,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(_Y,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nw,"id","transformers.FlaxAutoModelForCausalLM"),c(nw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nw,"href","#transformers.FlaxAutoModelForCausalLM"),c(Sc,"class","relative group"),c(bY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(MY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(EY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(CY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(wY,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(AY,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(yY,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(LY,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(xY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c($Y,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bw,"id","transformers.FlaxAutoModelForPreTraining"),c(bw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bw,"href","#transformers.FlaxAutoModelForPreTraining"),c(Bc,"class","relative group"),c(kY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(BY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(IY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(NY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(qY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(jY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(DY,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(GY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(OY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(VY,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(XY,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(zY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rw,"id","transformers.FlaxAutoModelForMaskedLM"),c(Rw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rw,"href","#transformers.FlaxAutoModelForMaskedLM"),c(qc,"class","relative group"),c(WY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(JY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(YY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(KY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(ZY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(eK,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(oK,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(rK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(tK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(aK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ww,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(Ww,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ww,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c(nK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iK,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(dK,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(cK,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(mK,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(fK,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(gK,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(hK,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(uK,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(pK,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a0,"id","transformers.FlaxAutoModelForSequenceClassification"),c(a0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a0,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(_K,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FK,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(TK,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(MK,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(EK,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(CK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(wK,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(AK,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(yK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(LK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(xK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_0,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(_0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Qc,"class","relative group"),c($K,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RK,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(PK,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(BK,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(IK,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(NK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(qK,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(jK,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(DK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(GK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(OK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($0,"id","transformers.FlaxAutoModelForTokenClassification"),c($0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Jc,"class","relative group"),c(VK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WK,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(QK,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(HK,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(UK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(JK,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(YK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(KK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(ZK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(G0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Zc,"class","relative group"),c(eZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(aZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(nZ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(sZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(lZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(iZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(dZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(cZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K0,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(K0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K0,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(rm,"class","relative group"),c(mZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r6,"id","transformers.FlaxAutoModelForImageClassification"),c(r6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r6,"href","#transformers.FlaxAutoModelForImageClassification"),c(nm,"class","relative group"),c(uZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_Z,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bZ,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(vZ,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l6,"id","transformers.FlaxAutoModelForVision2Seq"),c(l6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l6,"href","#transformers.FlaxAutoModelForVision2Seq"),c(im,"class","relative group"),c(FZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EZ,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,v,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,Mo),e(Mo,mi),b(m,hm,_),b(m,rt,_),e(rt,fi),e(rt,gi),e(gi,Ly),e(rt,um),b(m,De,_),b(m,We,_),e(We,hi),e(We,yn),e(yn,xy),e(We,Ln),e(We,xn),e(xn,$y),e(We,ui),e(We,$n),e($n,ky),e(We,pi),b(m,pm,_),M(Ca,m,_),b(m,Qe,_),b(m,Ae,_),e(Ae,J$),e(Ae,_i),e(_i,Y$),e(Ae,K$),b(m,Eo,_),b(m,wa,_),e(wa,Z$),e(wa,_m),e(_m,ek),e(wa,xOe),b(m,bqe,_),b(m,bi,_),e(bi,bm),e(bm,poe),M(Sy,poe,null),e(bi,$Oe),e(bi,_oe),e(_oe,kOe),b(m,vqe,_),b(m,kn,_),e(kn,SOe),e(kn,boe),e(boe,ROe),e(kn,POe),e(kn,voe),e(voe,BOe),e(kn,IOe),b(m,Fqe,_),M(Ry,m,_),b(m,Tqe,_),b(m,ok,_),e(ok,NOe),b(m,Mqe,_),M(vm,m,_),b(m,Eqe,_),b(m,vi,_),e(vi,Fm),e(Fm,Foe),M(Py,Foe,null),e(vi,qOe),e(vi,Toe),e(Toe,jOe),b(m,Cqe,_),b(m,Co,_),M(By,Co,null),e(Co,DOe),e(Co,Iy),e(Iy,GOe),e(Iy,rk),e(rk,OOe),e(Iy,VOe),e(Co,XOe),e(Co,Ny),e(Ny,zOe),e(Ny,Moe),e(Moe,WOe),e(Ny,QOe),e(Co,HOe),e(Co,Er),M(qy,Er,null),e(Er,UOe),e(Er,Eoe),e(Eoe,JOe),e(Er,YOe),e(Er,Fi),e(Fi,KOe),e(Fi,Coe),e(Coe,ZOe),e(Fi,eVe),e(Fi,woe),e(woe,oVe),e(Fi,rVe),e(Er,tVe),e(Er,A),e(A,Tm),e(Tm,Aoe),e(Aoe,aVe),e(Tm,nVe),e(Tm,tk),e(tk,sVe),e(Tm,lVe),e(A,iVe),e(A,Mm),e(Mm,yoe),e(yoe,dVe),e(Mm,cVe),e(Mm,ak),e(ak,mVe),e(Mm,fVe),e(A,gVe),e(A,Em),e(Em,Loe),e(Loe,hVe),e(Em,uVe),e(Em,nk),e(nk,pVe),e(Em,_Ve),e(A,bVe),e(A,Cm),e(Cm,xoe),e(xoe,vVe),e(Cm,FVe),e(Cm,sk),e(sk,TVe),e(Cm,MVe),e(A,EVe),e(A,wm),e(wm,$oe),e($oe,CVe),e(wm,wVe),e(wm,lk),e(lk,AVe),e(wm,yVe),e(A,LVe),e(A,Am),e(Am,koe),e(koe,xVe),e(Am,$Ve),e(Am,ik),e(ik,kVe),e(Am,SVe),e(A,RVe),e(A,ym),e(ym,Soe),e(Soe,PVe),e(ym,BVe),e(ym,dk),e(dk,IVe),e(ym,NVe),e(A,qVe),e(A,Lm),e(Lm,Roe),e(Roe,jVe),e(Lm,DVe),e(Lm,ck),e(ck,GVe),e(Lm,OVe),e(A,VVe),e(A,xm),e(xm,Poe),e(Poe,XVe),e(xm,zVe),e(xm,mk),e(mk,WVe),e(xm,QVe),e(A,HVe),e(A,$m),e($m,Boe),e(Boe,UVe),e($m,JVe),e($m,fk),e(fk,YVe),e($m,KVe),e(A,ZVe),e(A,km),e(km,Ioe),e(Ioe,eXe),e(km,oXe),e(km,gk),e(gk,rXe),e(km,tXe),e(A,aXe),e(A,Sm),e(Sm,Noe),e(Noe,nXe),e(Sm,sXe),e(Sm,hk),e(hk,lXe),e(Sm,iXe),e(A,dXe),e(A,Rm),e(Rm,qoe),e(qoe,cXe),e(Rm,mXe),e(Rm,uk),e(uk,fXe),e(Rm,gXe),e(A,hXe),e(A,Pm),e(Pm,joe),e(joe,uXe),e(Pm,pXe),e(Pm,pk),e(pk,_Xe),e(Pm,bXe),e(A,vXe),e(A,Bm),e(Bm,Doe),e(Doe,FXe),e(Bm,TXe),e(Bm,_k),e(_k,MXe),e(Bm,EXe),e(A,CXe),e(A,Im),e(Im,Goe),e(Goe,wXe),e(Im,AXe),e(Im,bk),e(bk,yXe),e(Im,LXe),e(A,xXe),e(A,Nm),e(Nm,Ooe),e(Ooe,$Xe),e(Nm,kXe),e(Nm,vk),e(vk,SXe),e(Nm,RXe),e(A,PXe),e(A,qm),e(qm,Voe),e(Voe,BXe),e(qm,IXe),e(qm,Fk),e(Fk,NXe),e(qm,qXe),e(A,jXe),e(A,jm),e(jm,Xoe),e(Xoe,DXe),e(jm,GXe),e(jm,Tk),e(Tk,OXe),e(jm,VXe),e(A,XXe),e(A,Dm),e(Dm,zoe),e(zoe,zXe),e(Dm,WXe),e(Dm,Mk),e(Mk,QXe),e(Dm,HXe),e(A,UXe),e(A,Gm),e(Gm,Woe),e(Woe,JXe),e(Gm,YXe),e(Gm,Ek),e(Ek,KXe),e(Gm,ZXe),e(A,eze),e(A,Om),e(Om,Qoe),e(Qoe,oze),e(Om,rze),e(Om,Ck),e(Ck,tze),e(Om,aze),e(A,nze),e(A,Vm),e(Vm,Hoe),e(Hoe,sze),e(Vm,lze),e(Vm,wk),e(wk,ize),e(Vm,dze),e(A,cze),e(A,Xm),e(Xm,Uoe),e(Uoe,mze),e(Xm,fze),e(Xm,Ak),e(Ak,gze),e(Xm,hze),e(A,uze),e(A,zm),e(zm,Joe),e(Joe,pze),e(zm,_ze),e(zm,yk),e(yk,bze),e(zm,vze),e(A,Fze),e(A,Wm),e(Wm,Yoe),e(Yoe,Tze),e(Wm,Mze),e(Wm,Lk),e(Lk,Eze),e(Wm,Cze),e(A,wze),e(A,Qm),e(Qm,Koe),e(Koe,Aze),e(Qm,yze),e(Qm,xk),e(xk,Lze),e(Qm,xze),e(A,$ze),e(A,Hm),e(Hm,Zoe),e(Zoe,kze),e(Hm,Sze),e(Hm,$k),e($k,Rze),e(Hm,Pze),e(A,Bze),e(A,Um),e(Um,ere),e(ere,Ize),e(Um,Nze),e(Um,kk),e(kk,qze),e(Um,jze),e(A,Dze),e(A,Jm),e(Jm,ore),e(ore,Gze),e(Jm,Oze),e(Jm,Sk),e(Sk,Vze),e(Jm,Xze),e(A,zze),e(A,Ym),e(Ym,rre),e(rre,Wze),e(Ym,Qze),e(Ym,Rk),e(Rk,Hze),e(Ym,Uze),e(A,Jze),e(A,Km),e(Km,tre),e(tre,Yze),e(Km,Kze),e(Km,Pk),e(Pk,Zze),e(Km,eWe),e(A,oWe),e(A,Zm),e(Zm,are),e(are,rWe),e(Zm,tWe),e(Zm,Bk),e(Bk,aWe),e(Zm,nWe),e(A,sWe),e(A,ef),e(ef,nre),e(nre,lWe),e(ef,iWe),e(ef,Ik),e(Ik,dWe),e(ef,cWe),e(A,mWe),e(A,of),e(of,sre),e(sre,fWe),e(of,gWe),e(of,Nk),e(Nk,hWe),e(of,uWe),e(A,pWe),e(A,rf),e(rf,lre),e(lre,_We),e(rf,bWe),e(rf,qk),e(qk,vWe),e(rf,FWe),e(A,TWe),e(A,tf),e(tf,ire),e(ire,MWe),e(tf,EWe),e(tf,jk),e(jk,CWe),e(tf,wWe),e(A,AWe),e(A,af),e(af,dre),e(dre,yWe),e(af,LWe),e(af,Dk),e(Dk,xWe),e(af,$We),e(A,kWe),e(A,nf),e(nf,cre),e(cre,SWe),e(nf,RWe),e(nf,Gk),e(Gk,PWe),e(nf,BWe),e(A,IWe),e(A,sf),e(sf,mre),e(mre,NWe),e(sf,qWe),e(sf,Ok),e(Ok,jWe),e(sf,DWe),e(A,GWe),e(A,lf),e(lf,fre),e(fre,OWe),e(lf,VWe),e(lf,Vk),e(Vk,XWe),e(lf,zWe),e(A,WWe),e(A,df),e(df,gre),e(gre,QWe),e(df,HWe),e(df,Xk),e(Xk,UWe),e(df,JWe),e(A,YWe),e(A,cf),e(cf,hre),e(hre,KWe),e(cf,ZWe),e(cf,zk),e(zk,eQe),e(cf,oQe),e(A,rQe),e(A,mf),e(mf,ure),e(ure,tQe),e(mf,aQe),e(mf,Wk),e(Wk,nQe),e(mf,sQe),e(A,lQe),e(A,ff),e(ff,pre),e(pre,iQe),e(ff,dQe),e(ff,Qk),e(Qk,cQe),e(ff,mQe),e(A,fQe),e(A,gf),e(gf,_re),e(_re,gQe),e(gf,hQe),e(gf,Hk),e(Hk,uQe),e(gf,pQe),e(A,_Qe),e(A,hf),e(hf,bre),e(bre,bQe),e(hf,vQe),e(hf,Uk),e(Uk,FQe),e(hf,TQe),e(A,MQe),e(A,uf),e(uf,vre),e(vre,EQe),e(uf,CQe),e(uf,Jk),e(Jk,wQe),e(uf,AQe),e(A,yQe),e(A,pf),e(pf,Fre),e(Fre,LQe),e(pf,xQe),e(pf,Yk),e(Yk,$Qe),e(pf,kQe),e(A,SQe),e(A,_f),e(_f,Tre),e(Tre,RQe),e(_f,PQe),e(_f,Kk),e(Kk,BQe),e(_f,IQe),e(A,NQe),e(A,bf),e(bf,Mre),e(Mre,qQe),e(bf,jQe),e(bf,Zk),e(Zk,DQe),e(bf,GQe),e(A,OQe),e(A,vf),e(vf,Ere),e(Ere,VQe),e(vf,XQe),e(vf,eS),e(eS,zQe),e(vf,WQe),e(A,QQe),e(A,Ff),e(Ff,Cre),e(Cre,HQe),e(Ff,UQe),e(Ff,oS),e(oS,JQe),e(Ff,YQe),e(A,KQe),e(A,Tf),e(Tf,wre),e(wre,ZQe),e(Tf,eHe),e(Tf,rS),e(rS,oHe),e(Tf,rHe),e(A,tHe),e(A,Mf),e(Mf,Are),e(Are,aHe),e(Mf,nHe),e(Mf,tS),e(tS,sHe),e(Mf,lHe),e(A,iHe),e(A,Ef),e(Ef,yre),e(yre,dHe),e(Ef,cHe),e(Ef,aS),e(aS,mHe),e(Ef,fHe),e(A,gHe),e(A,Cf),e(Cf,Lre),e(Lre,hHe),e(Cf,uHe),e(Cf,nS),e(nS,pHe),e(Cf,_He),e(A,bHe),e(A,wf),e(wf,xre),e(xre,vHe),e(wf,FHe),e(wf,sS),e(sS,THe),e(wf,MHe),e(A,EHe),e(A,Af),e(Af,$re),e($re,CHe),e(Af,wHe),e(Af,lS),e(lS,AHe),e(Af,yHe),e(A,LHe),e(A,yf),e(yf,kre),e(kre,xHe),e(yf,$He),e(yf,iS),e(iS,kHe),e(yf,SHe),e(A,RHe),e(A,Lf),e(Lf,Sre),e(Sre,PHe),e(Lf,BHe),e(Lf,dS),e(dS,IHe),e(Lf,NHe),e(A,qHe),e(A,xf),e(xf,Rre),e(Rre,jHe),e(xf,DHe),e(xf,cS),e(cS,GHe),e(xf,OHe),e(A,VHe),e(A,$f),e($f,Pre),e(Pre,XHe),e($f,zHe),e($f,mS),e(mS,WHe),e($f,QHe),e(A,HHe),e(A,kf),e(kf,Bre),e(Bre,UHe),e(kf,JHe),e(kf,fS),e(fS,YHe),e(kf,KHe),e(A,ZHe),e(A,Sf),e(Sf,Ire),e(Ire,eUe),e(Sf,oUe),e(Sf,gS),e(gS,rUe),e(Sf,tUe),e(A,aUe),e(A,Rf),e(Rf,Nre),e(Nre,nUe),e(Rf,sUe),e(Rf,hS),e(hS,lUe),e(Rf,iUe),e(A,dUe),e(A,Pf),e(Pf,qre),e(qre,cUe),e(Pf,mUe),e(Pf,uS),e(uS,fUe),e(Pf,gUe),e(A,hUe),e(A,Bf),e(Bf,jre),e(jre,uUe),e(Bf,pUe),e(Bf,pS),e(pS,_Ue),e(Bf,bUe),e(A,vUe),e(A,If),e(If,Dre),e(Dre,FUe),e(If,TUe),e(If,_S),e(_S,MUe),e(If,EUe),e(A,CUe),e(A,Nf),e(Nf,Gre),e(Gre,wUe),e(Nf,AUe),e(Nf,bS),e(bS,yUe),e(Nf,LUe),e(A,xUe),e(A,qf),e(qf,Ore),e(Ore,$Ue),e(qf,kUe),e(qf,vS),e(vS,SUe),e(qf,RUe),e(A,PUe),e(A,jf),e(jf,Vre),e(Vre,BUe),e(jf,IUe),e(jf,FS),e(FS,NUe),e(jf,qUe),e(A,jUe),e(A,Df),e(Df,Xre),e(Xre,DUe),e(Df,GUe),e(Df,TS),e(TS,OUe),e(Df,VUe),e(A,XUe),e(A,Gf),e(Gf,zre),e(zre,zUe),e(Gf,WUe),e(Gf,MS),e(MS,QUe),e(Gf,HUe),e(A,UUe),e(A,Of),e(Of,Wre),e(Wre,JUe),e(Of,YUe),e(Of,ES),e(ES,KUe),e(Of,ZUe),e(A,eJe),e(A,Vf),e(Vf,Qre),e(Qre,oJe),e(Vf,rJe),e(Vf,CS),e(CS,tJe),e(Vf,aJe),e(A,nJe),e(A,Xf),e(Xf,Hre),e(Hre,sJe),e(Xf,lJe),e(Xf,wS),e(wS,iJe),e(Xf,dJe),e(A,cJe),e(A,zf),e(zf,Ure),e(Ure,mJe),e(zf,fJe),e(zf,AS),e(AS,gJe),e(zf,hJe),e(A,uJe),e(A,Wf),e(Wf,Jre),e(Jre,pJe),e(Wf,_Je),e(Wf,yS),e(yS,bJe),e(Wf,vJe),e(A,FJe),e(A,Qf),e(Qf,Yre),e(Yre,TJe),e(Qf,MJe),e(Qf,LS),e(LS,EJe),e(Qf,CJe),e(A,wJe),e(A,Hf),e(Hf,Kre),e(Kre,AJe),e(Hf,yJe),e(Hf,xS),e(xS,LJe),e(Hf,xJe),e(A,$Je),e(A,Uf),e(Uf,Zre),e(Zre,kJe),e(Uf,SJe),e(Uf,$S),e($S,RJe),e(Uf,PJe),e(A,BJe),e(A,Jf),e(Jf,ete),e(ete,IJe),e(Jf,NJe),e(Jf,kS),e(kS,qJe),e(Jf,jJe),e(A,DJe),e(A,Yf),e(Yf,ote),e(ote,GJe),e(Yf,OJe),e(Yf,SS),e(SS,VJe),e(Yf,XJe),e(A,zJe),e(A,Kf),e(Kf,rte),e(rte,WJe),e(Kf,QJe),e(Kf,RS),e(RS,HJe),e(Kf,UJe),e(A,JJe),e(A,Zf),e(Zf,tte),e(tte,YJe),e(Zf,KJe),e(Zf,PS),e(PS,ZJe),e(Zf,eYe),e(A,oYe),e(A,eg),e(eg,ate),e(ate,rYe),e(eg,tYe),e(eg,BS),e(BS,aYe),e(eg,nYe),e(A,sYe),e(A,og),e(og,nte),e(nte,lYe),e(og,iYe),e(og,IS),e(IS,dYe),e(og,cYe),e(A,mYe),e(A,rg),e(rg,ste),e(ste,fYe),e(rg,gYe),e(rg,NS),e(NS,hYe),e(rg,uYe),e(A,pYe),e(A,tg),e(tg,lte),e(lte,_Ye),e(tg,bYe),e(tg,qS),e(qS,vYe),e(tg,FYe),e(A,TYe),e(A,ag),e(ag,ite),e(ite,MYe),e(ag,EYe),e(ag,jS),e(jS,CYe),e(ag,wYe),e(A,AYe),e(A,ng),e(ng,dte),e(dte,yYe),e(ng,LYe),e(ng,DS),e(DS,xYe),e(ng,$Ye),e(A,kYe),e(A,sg),e(sg,cte),e(cte,SYe),e(sg,RYe),e(sg,GS),e(GS,PYe),e(sg,BYe),e(A,IYe),e(A,lg),e(lg,mte),e(mte,NYe),e(lg,qYe),e(lg,OS),e(OS,jYe),e(lg,DYe),e(A,GYe),e(A,ig),e(ig,fte),e(fte,OYe),e(ig,VYe),e(ig,VS),e(VS,XYe),e(ig,zYe),e(A,WYe),e(A,dg),e(dg,gte),e(gte,QYe),e(dg,HYe),e(dg,XS),e(XS,UYe),e(dg,JYe),e(A,YYe),e(A,cg),e(cg,hte),e(hte,KYe),e(cg,ZYe),e(cg,zS),e(zS,eKe),e(cg,oKe),e(A,rKe),e(A,mg),e(mg,ute),e(ute,tKe),e(mg,aKe),e(mg,WS),e(WS,nKe),e(mg,sKe),e(A,lKe),e(A,fg),e(fg,pte),e(pte,iKe),e(fg,dKe),e(fg,QS),e(QS,cKe),e(fg,mKe),e(A,fKe),e(A,gg),e(gg,_te),e(_te,gKe),e(gg,hKe),e(gg,HS),e(HS,uKe),e(gg,pKe),e(A,_Ke),e(A,hg),e(hg,bte),e(bte,bKe),e(hg,vKe),e(hg,US),e(US,FKe),e(hg,TKe),e(A,MKe),e(A,ug),e(ug,vte),e(vte,EKe),e(ug,CKe),e(ug,JS),e(JS,wKe),e(ug,AKe),e(A,yKe),e(A,pg),e(pg,Fte),e(Fte,LKe),e(pg,xKe),e(pg,YS),e(YS,$Ke),e(pg,kKe),e(A,SKe),e(A,_g),e(_g,Tte),e(Tte,RKe),e(_g,PKe),e(_g,KS),e(KS,BKe),e(_g,IKe),e(A,NKe),e(A,bg),e(bg,Mte),e(Mte,qKe),e(bg,jKe),e(bg,ZS),e(ZS,DKe),e(bg,GKe),e(A,OKe),e(A,vg),e(vg,Ete),e(Ete,VKe),e(vg,XKe),e(vg,eR),e(eR,zKe),e(vg,WKe),e(A,QKe),e(A,Fg),e(Fg,Cte),e(Cte,HKe),e(Fg,UKe),e(Fg,oR),e(oR,JKe),e(Fg,YKe),e(A,KKe),e(A,Tg),e(Tg,wte),e(wte,ZKe),e(Tg,eZe),e(Tg,rR),e(rR,oZe),e(Tg,rZe),e(A,tZe),e(A,Mg),e(Mg,Ate),e(Ate,aZe),e(Mg,nZe),e(Mg,tR),e(tR,sZe),e(Mg,lZe),e(Er,iZe),M(Eg,Er,null),e(Co,dZe),e(Co,Cg),M(jy,Cg,null),e(Cg,cZe),e(Cg,yte),e(yte,mZe),b(m,wqe,_),b(m,Ti,_),e(Ti,wg),e(wg,Lte),M(Dy,Lte,null),e(Ti,fZe),e(Ti,xte),e(xte,gZe),b(m,Aqe,_),b(m,wo,_),M(Gy,wo,null),e(wo,hZe),e(wo,Oy),e(Oy,uZe),e(Oy,aR),e(aR,pZe),e(Oy,_Ze),e(wo,bZe),e(wo,Vy),e(Vy,vZe),e(Vy,$te),e($te,FZe),e(Vy,TZe),e(wo,MZe),e(wo,Cr),M(Xy,Cr,null),e(Cr,EZe),e(Cr,kte),e(kte,CZe),e(Cr,wZe),e(Cr,Aa),e(Aa,AZe),e(Aa,Ste),e(Ste,yZe),e(Aa,LZe),e(Aa,Rte),e(Rte,xZe),e(Aa,$Ze),e(Aa,Pte),e(Pte,kZe),e(Aa,SZe),e(Cr,RZe),e(Cr,k),e(k,Sn),e(Sn,Bte),e(Bte,PZe),e(Sn,BZe),e(Sn,nR),e(nR,IZe),e(Sn,NZe),e(Sn,sR),e(sR,qZe),e(Sn,jZe),e(k,DZe),e(k,Rn),e(Rn,Ite),e(Ite,GZe),e(Rn,OZe),e(Rn,lR),e(lR,VZe),e(Rn,XZe),e(Rn,iR),e(iR,zZe),e(Rn,WZe),e(k,QZe),e(k,Pn),e(Pn,Nte),e(Nte,HZe),e(Pn,UZe),e(Pn,dR),e(dR,JZe),e(Pn,YZe),e(Pn,cR),e(cR,KZe),e(Pn,ZZe),e(k,eeo),e(k,Ag),e(Ag,qte),e(qte,oeo),e(Ag,reo),e(Ag,mR),e(mR,teo),e(Ag,aeo),e(k,neo),e(k,Bn),e(Bn,jte),e(jte,seo),e(Bn,leo),e(Bn,fR),e(fR,ieo),e(Bn,deo),e(Bn,gR),e(gR,ceo),e(Bn,meo),e(k,feo),e(k,yg),e(yg,Dte),e(Dte,geo),e(yg,heo),e(yg,hR),e(hR,ueo),e(yg,peo),e(k,_eo),e(k,Lg),e(Lg,Gte),e(Gte,beo),e(Lg,veo),e(Lg,uR),e(uR,Feo),e(Lg,Teo),e(k,Meo),e(k,xg),e(xg,Ote),e(Ote,Eeo),e(xg,Ceo),e(xg,pR),e(pR,weo),e(xg,Aeo),e(k,yeo),e(k,In),e(In,Vte),e(Vte,Leo),e(In,xeo),e(In,_R),e(_R,$eo),e(In,keo),e(In,bR),e(bR,Seo),e(In,Reo),e(k,Peo),e(k,Nn),e(Nn,Xte),e(Xte,Beo),e(Nn,Ieo),e(Nn,vR),e(vR,Neo),e(Nn,qeo),e(Nn,FR),e(FR,jeo),e(Nn,Deo),e(k,Geo),e(k,qn),e(qn,zte),e(zte,Oeo),e(qn,Veo),e(qn,TR),e(TR,Xeo),e(qn,zeo),e(qn,MR),e(MR,Weo),e(qn,Qeo),e(k,Heo),e(k,$g),e($g,Wte),e(Wte,Ueo),e($g,Jeo),e($g,ER),e(ER,Yeo),e($g,Keo),e(k,Zeo),e(k,kg),e(kg,Qte),e(Qte,eoo),e(kg,ooo),e(kg,CR),e(CR,roo),e(kg,too),e(k,aoo),e(k,jn),e(jn,Hte),e(Hte,noo),e(jn,soo),e(jn,wR),e(wR,loo),e(jn,ioo),e(jn,AR),e(AR,doo),e(jn,coo),e(k,moo),e(k,Sg),e(Sg,Ute),e(Ute,foo),e(Sg,goo),e(Sg,yR),e(yR,hoo),e(Sg,uoo),e(k,poo),e(k,Dn),e(Dn,Jte),e(Jte,_oo),e(Dn,boo),e(Dn,LR),e(LR,voo),e(Dn,Foo),e(Dn,xR),e(xR,Too),e(Dn,Moo),e(k,Eoo),e(k,Gn),e(Gn,Yte),e(Yte,Coo),e(Gn,woo),e(Gn,$R),e($R,Aoo),e(Gn,yoo),e(Gn,kR),e(kR,Loo),e(Gn,xoo),e(k,$oo),e(k,On),e(On,Kte),e(Kte,koo),e(On,Soo),e(On,SR),e(SR,Roo),e(On,Poo),e(On,RR),e(RR,Boo),e(On,Ioo),e(k,Noo),e(k,Rg),e(Rg,Zte),e(Zte,qoo),e(Rg,joo),e(Rg,PR),e(PR,Doo),e(Rg,Goo),e(k,Ooo),e(k,Vn),e(Vn,eae),e(eae,Voo),e(Vn,Xoo),e(Vn,BR),e(BR,zoo),e(Vn,Woo),e(Vn,IR),e(IR,Qoo),e(Vn,Hoo),e(k,Uoo),e(k,Xn),e(Xn,oae),e(oae,Joo),e(Xn,Yoo),e(Xn,NR),e(NR,Koo),e(Xn,Zoo),e(Xn,qR),e(qR,ero),e(Xn,oro),e(k,rro),e(k,zn),e(zn,rae),e(rae,tro),e(zn,aro),e(zn,jR),e(jR,nro),e(zn,sro),e(zn,DR),e(DR,lro),e(zn,iro),e(k,dro),e(k,Wn),e(Wn,tae),e(tae,cro),e(Wn,mro),e(Wn,GR),e(GR,fro),e(Wn,gro),e(Wn,OR),e(OR,hro),e(Wn,uro),e(k,pro),e(k,Qn),e(Qn,aae),e(aae,_ro),e(Qn,bro),e(Qn,VR),e(VR,vro),e(Qn,Fro),e(Qn,XR),e(XR,Tro),e(Qn,Mro),e(k,Ero),e(k,Hn),e(Hn,nae),e(nae,Cro),e(Hn,wro),e(Hn,zR),e(zR,Aro),e(Hn,yro),e(Hn,WR),e(WR,Lro),e(Hn,xro),e(k,$ro),e(k,Pg),e(Pg,sae),e(sae,kro),e(Pg,Sro),e(Pg,QR),e(QR,Rro),e(Pg,Pro),e(k,Bro),e(k,Un),e(Un,lae),e(lae,Iro),e(Un,Nro),e(Un,HR),e(HR,qro),e(Un,jro),e(Un,UR),e(UR,Dro),e(Un,Gro),e(k,Oro),e(k,Bg),e(Bg,iae),e(iae,Vro),e(Bg,Xro),e(Bg,JR),e(JR,zro),e(Bg,Wro),e(k,Qro),e(k,Jn),e(Jn,dae),e(dae,Hro),e(Jn,Uro),e(Jn,YR),e(YR,Jro),e(Jn,Yro),e(Jn,KR),e(KR,Kro),e(Jn,Zro),e(k,eto),e(k,Yn),e(Yn,cae),e(cae,oto),e(Yn,rto),e(Yn,ZR),e(ZR,tto),e(Yn,ato),e(Yn,eP),e(eP,nto),e(Yn,sto),e(k,lto),e(k,Kn),e(Kn,mae),e(mae,ito),e(Kn,dto),e(Kn,oP),e(oP,cto),e(Kn,mto),e(Kn,rP),e(rP,fto),e(Kn,gto),e(k,hto),e(k,Ig),e(Ig,fae),e(fae,uto),e(Ig,pto),e(Ig,tP),e(tP,_to),e(Ig,bto),e(k,vto),e(k,Zn),e(Zn,gae),e(gae,Fto),e(Zn,Tto),e(Zn,aP),e(aP,Mto),e(Zn,Eto),e(Zn,nP),e(nP,Cto),e(Zn,wto),e(k,Ato),e(k,es),e(es,hae),e(hae,yto),e(es,Lto),e(es,sP),e(sP,xto),e(es,$to),e(es,lP),e(lP,kto),e(es,Sto),e(k,Rto),e(k,Ng),e(Ng,uae),e(uae,Pto),e(Ng,Bto),e(Ng,iP),e(iP,Ito),e(Ng,Nto),e(k,qto),e(k,os),e(os,pae),e(pae,jto),e(os,Dto),e(os,dP),e(dP,Gto),e(os,Oto),e(os,cP),e(cP,Vto),e(os,Xto),e(k,zto),e(k,rs),e(rs,_ae),e(_ae,Wto),e(rs,Qto),e(rs,mP),e(mP,Hto),e(rs,Uto),e(rs,fP),e(fP,Jto),e(rs,Yto),e(k,Kto),e(k,ts),e(ts,bae),e(bae,Zto),e(ts,eao),e(ts,gP),e(gP,oao),e(ts,rao),e(ts,hP),e(hP,tao),e(ts,aao),e(k,nao),e(k,as),e(as,vae),e(vae,sao),e(as,lao),e(as,uP),e(uP,iao),e(as,dao),e(as,pP),e(pP,cao),e(as,mao),e(k,fao),e(k,ns),e(ns,Fae),e(Fae,gao),e(ns,hao),e(ns,_P),e(_P,uao),e(ns,pao),e(ns,bP),e(bP,_ao),e(ns,bao),e(k,vao),e(k,ss),e(ss,Tae),e(Tae,Fao),e(ss,Tao),e(ss,vP),e(vP,Mao),e(ss,Eao),e(ss,FP),e(FP,Cao),e(ss,wao),e(k,Aao),e(k,ls),e(ls,Mae),e(Mae,yao),e(ls,Lao),e(ls,TP),e(TP,xao),e(ls,$ao),e(ls,MP),e(MP,kao),e(ls,Sao),e(k,Rao),e(k,qg),e(qg,Eae),e(Eae,Pao),e(qg,Bao),e(qg,EP),e(EP,Iao),e(qg,Nao),e(k,qao),e(k,is),e(is,Cae),e(Cae,jao),e(is,Dao),e(is,CP),e(CP,Gao),e(is,Oao),e(is,wP),e(wP,Vao),e(is,Xao),e(k,zao),e(k,jg),e(jg,wae),e(wae,Wao),e(jg,Qao),e(jg,AP),e(AP,Hao),e(jg,Uao),e(k,Jao),e(k,Dg),e(Dg,Aae),e(Aae,Yao),e(Dg,Kao),e(Dg,yP),e(yP,Zao),e(Dg,eno),e(k,ono),e(k,ds),e(ds,yae),e(yae,rno),e(ds,tno),e(ds,LP),e(LP,ano),e(ds,nno),e(ds,xP),e(xP,sno),e(ds,lno),e(k,ino),e(k,cs),e(cs,Lae),e(Lae,dno),e(cs,cno),e(cs,$P),e($P,mno),e(cs,fno),e(cs,kP),e(kP,gno),e(cs,hno),e(k,uno),e(k,ms),e(ms,xae),e(xae,pno),e(ms,_no),e(ms,SP),e(SP,bno),e(ms,vno),e(ms,RP),e(RP,Fno),e(ms,Tno),e(k,Mno),e(k,Gg),e(Gg,$ae),e($ae,Eno),e(Gg,Cno),e(Gg,PP),e(PP,wno),e(Gg,Ano),e(k,yno),e(k,fs),e(fs,kae),e(kae,Lno),e(fs,xno),e(fs,BP),e(BP,$no),e(fs,kno),e(fs,IP),e(IP,Sno),e(fs,Rno),e(k,Pno),e(k,gs),e(gs,Sae),e(Sae,Bno),e(gs,Ino),e(gs,NP),e(NP,Nno),e(gs,qno),e(gs,qP),e(qP,jno),e(gs,Dno),e(k,Gno),e(k,hs),e(hs,Rae),e(Rae,Ono),e(hs,Vno),e(hs,jP),e(jP,Xno),e(hs,zno),e(hs,DP),e(DP,Wno),e(hs,Qno),e(k,Hno),e(k,us),e(us,Pae),e(Pae,Uno),e(us,Jno),e(us,GP),e(GP,Yno),e(us,Kno),e(us,OP),e(OP,Zno),e(us,eso),e(k,oso),e(k,ps),e(ps,Bae),e(Bae,rso),e(ps,tso),e(ps,VP),e(VP,aso),e(ps,nso),e(ps,XP),e(XP,sso),e(ps,lso),e(k,iso),e(k,Og),e(Og,Iae),e(Iae,dso),e(Og,cso),e(Og,zP),e(zP,mso),e(Og,fso),e(k,gso),e(k,_s),e(_s,Nae),e(Nae,hso),e(_s,uso),e(_s,WP),e(WP,pso),e(_s,_so),e(_s,QP),e(QP,bso),e(_s,vso),e(k,Fso),e(k,Vg),e(Vg,qae),e(qae,Tso),e(Vg,Mso),e(Vg,HP),e(HP,Eso),e(Vg,Cso),e(k,wso),e(k,Xg),e(Xg,jae),e(jae,Aso),e(Xg,yso),e(Xg,UP),e(UP,Lso),e(Xg,xso),e(k,$so),e(k,zg),e(zg,Dae),e(Dae,kso),e(zg,Sso),e(zg,JP),e(JP,Rso),e(zg,Pso),e(k,Bso),e(k,Wg),e(Wg,Gae),e(Gae,Iso),e(Wg,Nso),e(Wg,YP),e(YP,qso),e(Wg,jso),e(k,Dso),e(k,bs),e(bs,Oae),e(Oae,Gso),e(bs,Oso),e(bs,KP),e(KP,Vso),e(bs,Xso),e(bs,ZP),e(ZP,zso),e(bs,Wso),e(k,Qso),e(k,Qg),e(Qg,Vae),e(Vae,Hso),e(Qg,Uso),e(Qg,eB),e(eB,Jso),e(Qg,Yso),e(k,Kso),e(k,vs),e(vs,Xae),e(Xae,Zso),e(vs,elo),e(vs,oB),e(oB,olo),e(vs,rlo),e(vs,rB),e(rB,tlo),e(vs,alo),e(k,nlo),e(k,Fs),e(Fs,zae),e(zae,slo),e(Fs,llo),e(Fs,tB),e(tB,ilo),e(Fs,dlo),e(Fs,aB),e(aB,clo),e(Fs,mlo),e(k,flo),e(k,Ts),e(Ts,Wae),e(Wae,glo),e(Ts,hlo),e(Ts,nB),e(nB,ulo),e(Ts,plo),e(Ts,sB),e(sB,_lo),e(Ts,blo),e(k,vlo),e(k,Ms),e(Ms,Qae),e(Qae,Flo),e(Ms,Tlo),e(Ms,lB),e(lB,Mlo),e(Ms,Elo),e(Ms,iB),e(iB,Clo),e(Ms,wlo),e(k,Alo),e(k,Es),e(Es,Hae),e(Hae,ylo),e(Es,Llo),e(Es,dB),e(dB,xlo),e(Es,$lo),e(Es,cB),e(cB,klo),e(Es,Slo),e(k,Rlo),e(k,Cs),e(Cs,Uae),e(Uae,Plo),e(Cs,Blo),e(Cs,mB),e(mB,Ilo),e(Cs,Nlo),e(Cs,fB),e(fB,qlo),e(Cs,jlo),e(k,Dlo),e(k,Hg),e(Hg,Jae),e(Jae,Glo),e(Hg,Olo),e(Hg,gB),e(gB,Vlo),e(Hg,Xlo),e(k,zlo),e(k,Ug),e(Ug,Yae),e(Yae,Wlo),e(Ug,Qlo),e(Ug,hB),e(hB,Hlo),e(Ug,Ulo),e(k,Jlo),e(k,ws),e(ws,Kae),e(Kae,Ylo),e(ws,Klo),e(ws,uB),e(uB,Zlo),e(ws,eio),e(ws,pB),e(pB,oio),e(ws,rio),e(k,tio),e(k,As),e(As,Zae),e(Zae,aio),e(As,nio),e(As,_B),e(_B,sio),e(As,lio),e(As,bB),e(bB,iio),e(As,dio),e(k,cio),e(k,ys),e(ys,ene),e(ene,mio),e(ys,fio),e(ys,vB),e(vB,gio),e(ys,hio),e(ys,FB),e(FB,uio),e(ys,pio),e(k,_io),e(k,Jg),e(Jg,one),e(one,bio),e(Jg,vio),e(Jg,TB),e(TB,Fio),e(Jg,Tio),e(k,Mio),e(k,Yg),e(Yg,rne),e(rne,Eio),e(Yg,Cio),e(Yg,MB),e(MB,wio),e(Yg,Aio),e(k,yio),e(k,Kg),e(Kg,tne),e(tne,Lio),e(Kg,xio),e(Kg,EB),e(EB,$io),e(Kg,kio),e(k,Sio),e(k,Ls),e(Ls,ane),e(ane,Rio),e(Ls,Pio),e(Ls,CB),e(CB,Bio),e(Ls,Iio),e(Ls,wB),e(wB,Nio),e(Ls,qio),e(k,jio),e(k,Zg),e(Zg,nne),e(nne,Dio),e(Zg,Gio),e(Zg,AB),e(AB,Oio),e(Zg,Vio),e(k,Xio),e(k,eh),e(eh,sne),e(sne,zio),e(eh,Wio),e(eh,yB),e(yB,Qio),e(eh,Hio),e(k,Uio),e(k,oh),e(oh,lne),e(lne,Jio),e(oh,Yio),e(oh,LB),e(LB,Kio),e(oh,Zio),e(k,edo),e(k,xs),e(xs,ine),e(ine,odo),e(xs,rdo),e(xs,xB),e(xB,tdo),e(xs,ado),e(xs,$B),e($B,ndo),e(xs,sdo),e(k,ldo),e(k,rh),e(rh,dne),e(dne,ido),e(rh,ddo),e(rh,kB),e(kB,cdo),e(rh,mdo),e(k,fdo),e(k,th),e(th,cne),e(cne,gdo),e(th,hdo),e(th,SB),e(SB,udo),e(th,pdo),e(k,_do),e(k,$s),e($s,mne),e(mne,bdo),e($s,vdo),e($s,RB),e(RB,Fdo),e($s,Tdo),e($s,PB),e(PB,Mdo),e($s,Edo),e(k,Cdo),e(k,ks),e(ks,fne),e(fne,wdo),e(ks,Ado),e(ks,BB),e(BB,ydo),e(ks,Ldo),e(ks,IB),e(IB,xdo),e(ks,$do),e(k,kdo),e(k,Ss),e(Ss,gne),e(gne,Sdo),e(Ss,Rdo),e(Ss,NB),e(NB,Pdo),e(Ss,Bdo),e(Ss,qB),e(qB,Ido),e(Ss,Ndo),e(k,qdo),e(k,Rs),e(Rs,hne),e(hne,jdo),e(Rs,Ddo),e(Rs,jB),e(jB,Gdo),e(Rs,Odo),e(Rs,DB),e(DB,Vdo),e(Rs,Xdo),e(Cr,zdo),M(ah,Cr,null),e(wo,Wdo),e(wo,nh),M(zy,nh,null),e(nh,Qdo),e(nh,une),e(une,Hdo),b(m,yqe,_),b(m,Mi,_),e(Mi,sh),e(sh,pne),M(Wy,pne,null),e(Mi,Udo),e(Mi,_ne),e(_ne,Jdo),b(m,Lqe,_),b(m,Ao,_),M(Qy,Ao,null),e(Ao,Ydo),e(Ao,Hy),e(Hy,Kdo),e(Hy,GB),e(GB,Zdo),e(Hy,eco),e(Ao,oco),e(Ao,Uy),e(Uy,rco),e(Uy,bne),e(bne,tco),e(Uy,aco),e(Ao,nco),e(Ao,He),M(Jy,He,null),e(He,sco),e(He,vne),e(vne,lco),e(He,ico),e(He,ya),e(ya,dco),e(ya,Fne),e(Fne,cco),e(ya,mco),e(ya,Tne),e(Tne,fco),e(ya,gco),e(ya,Mne),e(Mne,hco),e(ya,uco),e(He,pco),e(He,Y),e(Y,lh),e(lh,Ene),e(Ene,_co),e(lh,bco),e(lh,OB),e(OB,vco),e(lh,Fco),e(Y,Tco),e(Y,ih),e(ih,Cne),e(Cne,Mco),e(ih,Eco),e(ih,VB),e(VB,Cco),e(ih,wco),e(Y,Aco),e(Y,dh),e(dh,wne),e(wne,yco),e(dh,Lco),e(dh,XB),e(XB,xco),e(dh,$co),e(Y,kco),e(Y,ch),e(ch,Ane),e(Ane,Sco),e(ch,Rco),e(ch,zB),e(zB,Pco),e(ch,Bco),e(Y,Ico),e(Y,mh),e(mh,yne),e(yne,Nco),e(mh,qco),e(mh,WB),e(WB,jco),e(mh,Dco),e(Y,Gco),e(Y,fh),e(fh,Lne),e(Lne,Oco),e(fh,Vco),e(fh,QB),e(QB,Xco),e(fh,zco),e(Y,Wco),e(Y,gh),e(gh,xne),e(xne,Qco),e(gh,Hco),e(gh,HB),e(HB,Uco),e(gh,Jco),e(Y,Yco),e(Y,hh),e(hh,$ne),e($ne,Kco),e(hh,Zco),e(hh,UB),e(UB,emo),e(hh,omo),e(Y,rmo),e(Y,uh),e(uh,kne),e(kne,tmo),e(uh,amo),e(uh,JB),e(JB,nmo),e(uh,smo),e(Y,lmo),e(Y,ph),e(ph,Sne),e(Sne,imo),e(ph,dmo),e(ph,YB),e(YB,cmo),e(ph,mmo),e(Y,fmo),e(Y,_h),e(_h,Rne),e(Rne,gmo),e(_h,hmo),e(_h,KB),e(KB,umo),e(_h,pmo),e(Y,_mo),e(Y,bh),e(bh,Pne),e(Pne,bmo),e(bh,vmo),e(bh,ZB),e(ZB,Fmo),e(bh,Tmo),e(Y,Mmo),e(Y,vh),e(vh,Bne),e(Bne,Emo),e(vh,Cmo),e(vh,eI),e(eI,wmo),e(vh,Amo),e(Y,ymo),e(Y,Fh),e(Fh,Ine),e(Ine,Lmo),e(Fh,xmo),e(Fh,oI),e(oI,$mo),e(Fh,kmo),e(Y,Smo),e(Y,Th),e(Th,Nne),e(Nne,Rmo),e(Th,Pmo),e(Th,rI),e(rI,Bmo),e(Th,Imo),e(Y,Nmo),e(Y,Mh),e(Mh,qne),e(qne,qmo),e(Mh,jmo),e(Mh,tI),e(tI,Dmo),e(Mh,Gmo),e(Y,Omo),e(Y,Eh),e(Eh,jne),e(jne,Vmo),e(Eh,Xmo),e(Eh,aI),e(aI,zmo),e(Eh,Wmo),e(Y,Qmo),e(Y,Ch),e(Ch,Dne),e(Dne,Hmo),e(Ch,Umo),e(Ch,nI),e(nI,Jmo),e(Ch,Ymo),e(Y,Kmo),e(Y,wh),e(wh,Gne),e(Gne,Zmo),e(wh,efo),e(wh,sI),e(sI,ofo),e(wh,rfo),e(Y,tfo),e(Y,Ah),e(Ah,One),e(One,afo),e(Ah,nfo),e(Ah,lI),e(lI,sfo),e(Ah,lfo),e(Y,ifo),e(Y,yh),e(yh,Vne),e(Vne,dfo),e(yh,cfo),e(yh,iI),e(iI,mfo),e(yh,ffo),e(Y,gfo),e(Y,Lh),e(Lh,Xne),e(Xne,hfo),e(Lh,ufo),e(Lh,dI),e(dI,pfo),e(Lh,_fo),e(Y,bfo),e(Y,xh),e(xh,zne),e(zne,vfo),e(xh,Ffo),e(xh,cI),e(cI,Tfo),e(xh,Mfo),e(Y,Efo),e(Y,$h),e($h,Wne),e(Wne,Cfo),e($h,wfo),e($h,mI),e(mI,Afo),e($h,yfo),e(Y,Lfo),e(Y,kh),e(kh,Qne),e(Qne,xfo),e(kh,$fo),e(kh,fI),e(fI,kfo),e(kh,Sfo),e(Y,Rfo),e(Y,Sh),e(Sh,Hne),e(Hne,Pfo),e(Sh,Bfo),e(Sh,gI),e(gI,Ifo),e(Sh,Nfo),e(Y,qfo),e(Y,Rh),e(Rh,Une),e(Une,jfo),e(Rh,Dfo),e(Rh,hI),e(hI,Gfo),e(Rh,Ofo),e(Y,Vfo),e(Y,Ph),e(Ph,Jne),e(Jne,Xfo),e(Ph,zfo),e(Ph,uI),e(uI,Wfo),e(Ph,Qfo),e(Y,Hfo),e(Y,Bh),e(Bh,Yne),e(Yne,Ufo),e(Bh,Jfo),e(Bh,pI),e(pI,Yfo),e(Bh,Kfo),e(He,Zfo),M(Ih,He,null),e(He,ego),M(Nh,He,null),e(Ao,ogo),e(Ao,qh),M(Yy,qh,null),e(qh,rgo),e(qh,Kne),e(Kne,tgo),b(m,xqe,_),b(m,Ei,_),e(Ei,jh),e(jh,Zne),M(Ky,Zne,null),e(Ei,ago),e(Ei,ese),e(ese,ngo),b(m,$qe,_),b(m,yo,_),M(Zy,yo,null),e(yo,sgo),e(yo,eL),e(eL,lgo),e(eL,_I),e(_I,igo),e(eL,dgo),e(yo,cgo),e(yo,oL),e(oL,mgo),e(oL,ose),e(ose,fgo),e(oL,ggo),e(yo,hgo),e(yo,Ue),M(rL,Ue,null),e(Ue,ugo),e(Ue,rse),e(rse,pgo),e(Ue,_go),e(Ue,Ci),e(Ci,bgo),e(Ci,tse),e(tse,vgo),e(Ci,Fgo),e(Ci,ase),e(ase,Tgo),e(Ci,Mgo),e(Ue,Ego),e(Ue,he),e(he,Dh),e(Dh,nse),e(nse,Cgo),e(Dh,wgo),e(Dh,bI),e(bI,Ago),e(Dh,ygo),e(he,Lgo),e(he,Gh),e(Gh,sse),e(sse,xgo),e(Gh,$go),e(Gh,lse),e(lse,kgo),e(Gh,Sgo),e(he,Rgo),e(he,Oh),e(Oh,ise),e(ise,Pgo),e(Oh,Bgo),e(Oh,vI),e(vI,Igo),e(Oh,Ngo),e(he,qgo),e(he,Vh),e(Vh,dse),e(dse,jgo),e(Vh,Dgo),e(Vh,FI),e(FI,Ggo),e(Vh,Ogo),e(he,Vgo),e(he,Xh),e(Xh,cse),e(cse,Xgo),e(Xh,zgo),e(Xh,TI),e(TI,Wgo),e(Xh,Qgo),e(he,Hgo),e(he,zh),e(zh,mse),e(mse,Ugo),e(zh,Jgo),e(zh,MI),e(MI,Ygo),e(zh,Kgo),e(he,Zgo),e(he,Wh),e(Wh,fse),e(fse,eho),e(Wh,oho),e(Wh,EI),e(EI,rho),e(Wh,tho),e(he,aho),e(he,Qh),e(Qh,gse),e(gse,nho),e(Qh,sho),e(Qh,CI),e(CI,lho),e(Qh,iho),e(he,dho),e(he,Hh),e(Hh,hse),e(hse,cho),e(Hh,mho),e(Hh,wI),e(wI,fho),e(Hh,gho),e(he,hho),e(he,Uh),e(Uh,use),e(use,uho),e(Uh,pho),e(Uh,AI),e(AI,_ho),e(Uh,bho),e(he,vho),e(he,Jh),e(Jh,pse),e(pse,Fho),e(Jh,Tho),e(Jh,yI),e(yI,Mho),e(Jh,Eho),e(he,Cho),e(he,Yh),e(Yh,_se),e(_se,who),e(Yh,Aho),e(Yh,LI),e(LI,yho),e(Yh,Lho),e(he,xho),e(he,Kh),e(Kh,bse),e(bse,$ho),e(Kh,kho),e(Kh,xI),e(xI,Sho),e(Kh,Rho),e(he,Pho),e(he,Zh),e(Zh,vse),e(vse,Bho),e(Zh,Iho),e(Zh,$I),e($I,Nho),e(Zh,qho),e(he,jho),e(he,eu),e(eu,Fse),e(Fse,Dho),e(eu,Gho),e(eu,kI),e(kI,Oho),e(eu,Vho),e(he,Xho),e(he,ou),e(ou,Tse),e(Tse,zho),e(ou,Who),e(ou,SI),e(SI,Qho),e(ou,Hho),e(he,Uho),e(he,ru),e(ru,Mse),e(Mse,Jho),e(ru,Yho),e(ru,RI),e(RI,Kho),e(ru,Zho),e(Ue,euo),M(tu,Ue,null),e(Ue,ouo),M(au,Ue,null),e(yo,ruo),e(yo,nu),M(tL,nu,null),e(nu,tuo),e(nu,Ese),e(Ese,auo),b(m,kqe,_),b(m,wi,_),e(wi,su),e(su,Cse),M(aL,Cse,null),e(wi,nuo),e(wi,wse),e(wse,suo),b(m,Sqe,_),b(m,Lo,_),M(nL,Lo,null),e(Lo,luo),e(Lo,Ai),e(Ai,iuo),e(Ai,PI),e(PI,duo),e(Ai,cuo),e(Ai,BI),e(BI,muo),e(Ai,fuo),e(Lo,guo),e(Lo,sL),e(sL,huo),e(sL,Ase),e(Ase,uuo),e(sL,puo),e(Lo,_uo),e(Lo,tt),M(lL,tt,null),e(tt,buo),e(tt,yse),e(yse,vuo),e(tt,Fuo),e(tt,yi),e(yi,Tuo),e(yi,Lse),e(Lse,Muo),e(yi,Euo),e(yi,II),e(II,Cuo),e(yi,wuo),e(tt,Auo),M(lu,tt,null),e(Lo,yuo),e(Lo,Je),M(iL,Je,null),e(Je,Luo),e(Je,xse),e(xse,xuo),e(Je,$uo),e(Je,La),e(La,kuo),e(La,$se),e($se,Suo),e(La,Ruo),e(La,kse),e(kse,Puo),e(La,Buo),e(La,Sse),e(Sse,Iuo),e(La,Nuo),e(Je,quo),e(Je,x),e(x,iu),e(iu,Rse),e(Rse,juo),e(iu,Duo),e(iu,NI),e(NI,Guo),e(iu,Ouo),e(x,Vuo),e(x,du),e(du,Pse),e(Pse,Xuo),e(du,zuo),e(du,qI),e(qI,Wuo),e(du,Quo),e(x,Huo),e(x,cu),e(cu,Bse),e(Bse,Uuo),e(cu,Juo),e(cu,jI),e(jI,Yuo),e(cu,Kuo),e(x,Zuo),e(x,mu),e(mu,Ise),e(Ise,epo),e(mu,opo),e(mu,DI),e(DI,rpo),e(mu,tpo),e(x,apo),e(x,fu),e(fu,Nse),e(Nse,npo),e(fu,spo),e(fu,GI),e(GI,lpo),e(fu,ipo),e(x,dpo),e(x,gu),e(gu,qse),e(qse,cpo),e(gu,mpo),e(gu,OI),e(OI,fpo),e(gu,gpo),e(x,hpo),e(x,hu),e(hu,jse),e(jse,upo),e(hu,ppo),e(hu,VI),e(VI,_po),e(hu,bpo),e(x,vpo),e(x,uu),e(uu,Dse),e(Dse,Fpo),e(uu,Tpo),e(uu,XI),e(XI,Mpo),e(uu,Epo),e(x,Cpo),e(x,pu),e(pu,Gse),e(Gse,wpo),e(pu,Apo),e(pu,zI),e(zI,ypo),e(pu,Lpo),e(x,xpo),e(x,_u),e(_u,Ose),e(Ose,$po),e(_u,kpo),e(_u,WI),e(WI,Spo),e(_u,Rpo),e(x,Ppo),e(x,bu),e(bu,Vse),e(Vse,Bpo),e(bu,Ipo),e(bu,QI),e(QI,Npo),e(bu,qpo),e(x,jpo),e(x,vu),e(vu,Xse),e(Xse,Dpo),e(vu,Gpo),e(vu,HI),e(HI,Opo),e(vu,Vpo),e(x,Xpo),e(x,Fu),e(Fu,zse),e(zse,zpo),e(Fu,Wpo),e(Fu,UI),e(UI,Qpo),e(Fu,Hpo),e(x,Upo),e(x,Tu),e(Tu,Wse),e(Wse,Jpo),e(Tu,Ypo),e(Tu,JI),e(JI,Kpo),e(Tu,Zpo),e(x,e_o),e(x,Mu),e(Mu,Qse),e(Qse,o_o),e(Mu,r_o),e(Mu,YI),e(YI,t_o),e(Mu,a_o),e(x,n_o),e(x,Eu),e(Eu,Hse),e(Hse,s_o),e(Eu,l_o),e(Eu,KI),e(KI,i_o),e(Eu,d_o),e(x,c_o),e(x,Cu),e(Cu,Use),e(Use,m_o),e(Cu,f_o),e(Cu,ZI),e(ZI,g_o),e(Cu,h_o),e(x,u_o),e(x,wu),e(wu,Jse),e(Jse,p_o),e(wu,__o),e(wu,eN),e(eN,b_o),e(wu,v_o),e(x,F_o),e(x,Au),e(Au,Yse),e(Yse,T_o),e(Au,M_o),e(Au,oN),e(oN,E_o),e(Au,C_o),e(x,w_o),e(x,yu),e(yu,Kse),e(Kse,A_o),e(yu,y_o),e(yu,rN),e(rN,L_o),e(yu,x_o),e(x,$_o),e(x,Lu),e(Lu,Zse),e(Zse,k_o),e(Lu,S_o),e(Lu,tN),e(tN,R_o),e(Lu,P_o),e(x,B_o),e(x,xu),e(xu,ele),e(ele,I_o),e(xu,N_o),e(xu,aN),e(aN,q_o),e(xu,j_o),e(x,D_o),e(x,$u),e($u,ole),e(ole,G_o),e($u,O_o),e($u,nN),e(nN,V_o),e($u,X_o),e(x,z_o),e(x,ku),e(ku,rle),e(rle,W_o),e(ku,Q_o),e(ku,sN),e(sN,H_o),e(ku,U_o),e(x,J_o),e(x,Su),e(Su,tle),e(tle,Y_o),e(Su,K_o),e(Su,lN),e(lN,Z_o),e(Su,ebo),e(x,obo),e(x,Ru),e(Ru,ale),e(ale,rbo),e(Ru,tbo),e(Ru,iN),e(iN,abo),e(Ru,nbo),e(x,sbo),e(x,Pu),e(Pu,nle),e(nle,lbo),e(Pu,ibo),e(Pu,dN),e(dN,dbo),e(Pu,cbo),e(x,mbo),e(x,Bu),e(Bu,sle),e(sle,fbo),e(Bu,gbo),e(Bu,cN),e(cN,hbo),e(Bu,ubo),e(x,pbo),e(x,Iu),e(Iu,lle),e(lle,_bo),e(Iu,bbo),e(Iu,mN),e(mN,vbo),e(Iu,Fbo),e(x,Tbo),e(x,Nu),e(Nu,ile),e(ile,Mbo),e(Nu,Ebo),e(Nu,fN),e(fN,Cbo),e(Nu,wbo),e(x,Abo),e(x,qu),e(qu,dle),e(dle,ybo),e(qu,Lbo),e(qu,gN),e(gN,xbo),e(qu,$bo),e(x,kbo),e(x,ju),e(ju,cle),e(cle,Sbo),e(ju,Rbo),e(ju,hN),e(hN,Pbo),e(ju,Bbo),e(x,Ibo),e(x,Ps),e(Ps,mle),e(mle,Nbo),e(Ps,qbo),e(Ps,uN),e(uN,jbo),e(Ps,Dbo),e(Ps,pN),e(pN,Gbo),e(Ps,Obo),e(x,Vbo),e(x,Du),e(Du,fle),e(fle,Xbo),e(Du,zbo),e(Du,_N),e(_N,Wbo),e(Du,Qbo),e(x,Hbo),e(x,Gu),e(Gu,gle),e(gle,Ubo),e(Gu,Jbo),e(Gu,bN),e(bN,Ybo),e(Gu,Kbo),e(x,Zbo),e(x,Ou),e(Ou,hle),e(hle,e2o),e(Ou,o2o),e(Ou,vN),e(vN,r2o),e(Ou,t2o),e(x,a2o),e(x,Vu),e(Vu,ule),e(ule,n2o),e(Vu,s2o),e(Vu,FN),e(FN,l2o),e(Vu,i2o),e(x,d2o),e(x,Xu),e(Xu,ple),e(ple,c2o),e(Xu,m2o),e(Xu,TN),e(TN,f2o),e(Xu,g2o),e(x,h2o),e(x,zu),e(zu,_le),e(_le,u2o),e(zu,p2o),e(zu,MN),e(MN,_2o),e(zu,b2o),e(x,v2o),e(x,Wu),e(Wu,ble),e(ble,F2o),e(Wu,T2o),e(Wu,EN),e(EN,M2o),e(Wu,E2o),e(x,C2o),e(x,Qu),e(Qu,vle),e(vle,w2o),e(Qu,A2o),e(Qu,CN),e(CN,y2o),e(Qu,L2o),e(x,x2o),e(x,Hu),e(Hu,Fle),e(Fle,$2o),e(Hu,k2o),e(Hu,wN),e(wN,S2o),e(Hu,R2o),e(x,P2o),e(x,Uu),e(Uu,Tle),e(Tle,B2o),e(Uu,I2o),e(Uu,AN),e(AN,N2o),e(Uu,q2o),e(x,j2o),e(x,Ju),e(Ju,Mle),e(Mle,D2o),e(Ju,G2o),e(Ju,yN),e(yN,O2o),e(Ju,V2o),e(x,X2o),e(x,Yu),e(Yu,Ele),e(Ele,z2o),e(Yu,W2o),e(Yu,LN),e(LN,Q2o),e(Yu,H2o),e(x,U2o),e(x,Ku),e(Ku,Cle),e(Cle,J2o),e(Ku,Y2o),e(Ku,xN),e(xN,K2o),e(Ku,Z2o),e(x,evo),e(x,Zu),e(Zu,wle),e(wle,ovo),e(Zu,rvo),e(Zu,$N),e($N,tvo),e(Zu,avo),e(x,nvo),e(x,ep),e(ep,Ale),e(Ale,svo),e(ep,lvo),e(ep,kN),e(kN,ivo),e(ep,dvo),e(x,cvo),e(x,op),e(op,yle),e(yle,mvo),e(op,fvo),e(op,SN),e(SN,gvo),e(op,hvo),e(x,uvo),e(x,rp),e(rp,Lle),e(Lle,pvo),e(rp,_vo),e(rp,RN),e(RN,bvo),e(rp,vvo),e(x,Fvo),e(x,tp),e(tp,xle),e(xle,Tvo),e(tp,Mvo),e(tp,PN),e(PN,Evo),e(tp,Cvo),e(x,wvo),e(x,ap),e(ap,$le),e($le,Avo),e(ap,yvo),e(ap,BN),e(BN,Lvo),e(ap,xvo),e(x,$vo),e(x,np),e(np,kle),e(kle,kvo),e(np,Svo),e(np,IN),e(IN,Rvo),e(np,Pvo),e(x,Bvo),e(x,sp),e(sp,Sle),e(Sle,Ivo),e(sp,Nvo),e(sp,NN),e(NN,qvo),e(sp,jvo),e(x,Dvo),e(x,lp),e(lp,Rle),e(Rle,Gvo),e(lp,Ovo),e(lp,qN),e(qN,Vvo),e(lp,Xvo),e(x,zvo),e(x,ip),e(ip,Ple),e(Ple,Wvo),e(ip,Qvo),e(ip,jN),e(jN,Hvo),e(ip,Uvo),e(x,Jvo),e(x,dp),e(dp,Ble),e(Ble,Yvo),e(dp,Kvo),e(dp,DN),e(DN,Zvo),e(dp,eFo),e(x,oFo),e(x,cp),e(cp,Ile),e(Ile,rFo),e(cp,tFo),e(cp,GN),e(GN,aFo),e(cp,nFo),e(x,sFo),e(x,mp),e(mp,Nle),e(Nle,lFo),e(mp,iFo),e(mp,ON),e(ON,dFo),e(mp,cFo),e(x,mFo),e(x,fp),e(fp,qle),e(qle,fFo),e(fp,gFo),e(fp,VN),e(VN,hFo),e(fp,uFo),e(x,pFo),e(x,gp),e(gp,jle),e(jle,_Fo),e(gp,bFo),e(gp,XN),e(XN,vFo),e(gp,FFo),e(x,TFo),e(x,hp),e(hp,Dle),e(Dle,MFo),e(hp,EFo),e(hp,zN),e(zN,CFo),e(hp,wFo),e(x,AFo),e(x,up),e(up,Gle),e(Gle,yFo),e(up,LFo),e(up,WN),e(WN,xFo),e(up,$Fo),e(x,kFo),e(x,pp),e(pp,Ole),e(Ole,SFo),e(pp,RFo),e(pp,QN),e(QN,PFo),e(pp,BFo),e(x,IFo),e(x,_p),e(_p,Vle),e(Vle,NFo),e(_p,qFo),e(_p,HN),e(HN,jFo),e(_p,DFo),e(x,GFo),e(x,bp),e(bp,Xle),e(Xle,OFo),e(bp,VFo),e(bp,UN),e(UN,XFo),e(bp,zFo),e(x,WFo),e(x,vp),e(vp,zle),e(zle,QFo),e(vp,HFo),e(vp,JN),e(JN,UFo),e(vp,JFo),e(x,YFo),e(x,Fp),e(Fp,Wle),e(Wle,KFo),e(Fp,ZFo),e(Fp,YN),e(YN,e1o),e(Fp,o1o),e(x,r1o),e(x,Tp),e(Tp,Qle),e(Qle,t1o),e(Tp,a1o),e(Tp,KN),e(KN,n1o),e(Tp,s1o),e(x,l1o),e(x,Mp),e(Mp,Hle),e(Hle,i1o),e(Mp,d1o),e(Mp,ZN),e(ZN,c1o),e(Mp,m1o),e(x,f1o),e(x,Ep),e(Ep,Ule),e(Ule,g1o),e(Ep,h1o),e(Ep,eq),e(eq,u1o),e(Ep,p1o),e(x,_1o),e(x,Cp),e(Cp,Jle),e(Jle,b1o),e(Cp,v1o),e(Cp,oq),e(oq,F1o),e(Cp,T1o),e(x,M1o),e(x,wp),e(wp,Yle),e(Yle,E1o),e(wp,C1o),e(wp,rq),e(rq,w1o),e(wp,A1o),e(x,y1o),e(x,Ap),e(Ap,Kle),e(Kle,L1o),e(Ap,x1o),e(Ap,tq),e(tq,$1o),e(Ap,k1o),e(x,S1o),e(x,yp),e(yp,Zle),e(Zle,R1o),e(yp,P1o),e(yp,aq),e(aq,B1o),e(yp,I1o),e(x,N1o),e(x,Lp),e(Lp,eie),e(eie,q1o),e(Lp,j1o),e(Lp,nq),e(nq,D1o),e(Lp,G1o),e(x,O1o),e(x,xp),e(xp,oie),e(oie,V1o),e(xp,X1o),e(xp,sq),e(sq,z1o),e(xp,W1o),e(x,Q1o),e(x,$p),e($p,rie),e(rie,H1o),e($p,U1o),e($p,lq),e(lq,J1o),e($p,Y1o),e(x,K1o),e(x,kp),e(kp,tie),e(tie,Z1o),e(kp,eTo),e(kp,iq),e(iq,oTo),e(kp,rTo),e(x,tTo),e(x,Sp),e(Sp,aie),e(aie,aTo),e(Sp,nTo),e(Sp,dq),e(dq,sTo),e(Sp,lTo),e(x,iTo),e(x,Rp),e(Rp,nie),e(nie,dTo),e(Rp,cTo),e(Rp,cq),e(cq,mTo),e(Rp,fTo),e(x,gTo),e(x,Pp),e(Pp,sie),e(sie,hTo),e(Pp,uTo),e(Pp,mq),e(mq,pTo),e(Pp,_To),e(x,bTo),e(x,Bp),e(Bp,lie),e(lie,vTo),e(Bp,FTo),e(Bp,fq),e(fq,TTo),e(Bp,MTo),e(x,ETo),e(x,Ip),e(Ip,iie),e(iie,CTo),e(Ip,wTo),e(Ip,gq),e(gq,ATo),e(Ip,yTo),e(x,LTo),e(x,Np),e(Np,die),e(die,xTo),e(Np,$To),e(Np,hq),e(hq,kTo),e(Np,STo),e(x,RTo),e(x,qp),e(qp,cie),e(cie,PTo),e(qp,BTo),e(qp,uq),e(uq,ITo),e(qp,NTo),e(x,qTo),e(x,jp),e(jp,mie),e(mie,jTo),e(jp,DTo),e(jp,pq),e(pq,GTo),e(jp,OTo),e(x,VTo),e(x,Dp),e(Dp,fie),e(fie,XTo),e(Dp,zTo),e(Dp,_q),e(_q,WTo),e(Dp,QTo),e(x,HTo),e(x,Gp),e(Gp,gie),e(gie,UTo),e(Gp,JTo),e(Gp,bq),e(bq,YTo),e(Gp,KTo),e(x,ZTo),e(x,Op),e(Op,hie),e(hie,eMo),e(Op,oMo),e(Op,vq),e(vq,rMo),e(Op,tMo),e(x,aMo),e(x,Vp),e(Vp,uie),e(uie,nMo),e(Vp,sMo),e(Vp,Fq),e(Fq,lMo),e(Vp,iMo),e(x,dMo),e(x,Xp),e(Xp,pie),e(pie,cMo),e(Xp,mMo),e(Xp,Tq),e(Tq,fMo),e(Xp,gMo),e(x,hMo),e(x,zp),e(zp,_ie),e(_ie,uMo),e(zp,pMo),e(zp,Mq),e(Mq,_Mo),e(zp,bMo),e(x,vMo),e(x,Wp),e(Wp,bie),e(bie,FMo),e(Wp,TMo),e(Wp,Eq),e(Eq,MMo),e(Wp,EMo),e(x,CMo),e(x,Qp),e(Qp,vie),e(vie,wMo),e(Qp,AMo),e(Qp,Cq),e(Cq,yMo),e(Qp,LMo),e(x,xMo),e(x,Hp),e(Hp,Fie),e(Fie,$Mo),e(Hp,kMo),e(Hp,wq),e(wq,SMo),e(Hp,RMo),e(x,PMo),e(x,Up),e(Up,Tie),e(Tie,BMo),e(Up,IMo),e(Up,Aq),e(Aq,NMo),e(Up,qMo),e(x,jMo),e(x,Jp),e(Jp,Mie),e(Mie,DMo),e(Jp,GMo),e(Jp,yq),e(yq,OMo),e(Jp,VMo),e(x,XMo),e(x,Yp),e(Yp,Eie),e(Eie,zMo),e(Yp,WMo),e(Yp,Lq),e(Lq,QMo),e(Yp,HMo),e(x,UMo),e(x,Kp),e(Kp,Cie),e(Cie,JMo),e(Kp,YMo),e(Kp,xq),e(xq,KMo),e(Kp,ZMo),e(x,e4o),e(x,Zp),e(Zp,wie),e(wie,o4o),e(Zp,r4o),e(Zp,$q),e($q,t4o),e(Zp,a4o),e(x,n4o),e(x,e_),e(e_,Aie),e(Aie,s4o),e(e_,l4o),e(e_,kq),e(kq,i4o),e(e_,d4o),e(Je,c4o),e(Je,o_),e(o_,m4o),e(o_,yie),e(yie,f4o),e(o_,g4o),e(o_,Lie),e(Lie,h4o),e(Je,u4o),M(r_,Je,null),b(m,Rqe,_),b(m,Li,_),e(Li,t_),e(t_,xie),M(dL,xie,null),e(Li,p4o),e(Li,$ie),e($ie,_4o),b(m,Pqe,_),b(m,xo,_),M(cL,xo,null),e(xo,b4o),e(xo,xi),e(xi,v4o),e(xi,Sq),e(Sq,F4o),e(xi,T4o),e(xi,Rq),e(Rq,M4o),e(xi,E4o),e(xo,C4o),e(xo,mL),e(mL,w4o),e(mL,kie),e(kie,A4o),e(mL,y4o),e(xo,L4o),e(xo,at),M(fL,at,null),e(at,x4o),e(at,Sie),e(Sie,$4o),e(at,k4o),e(at,$i),e($i,S4o),e($i,Rie),e(Rie,R4o),e($i,P4o),e($i,Pq),e(Pq,B4o),e($i,I4o),e(at,N4o),M(a_,at,null),e(xo,q4o),e(xo,Ye),M(gL,Ye,null),e(Ye,j4o),e(Ye,Pie),e(Pie,D4o),e(Ye,G4o),e(Ye,xa),e(xa,O4o),e(xa,Bie),e(Bie,V4o),e(xa,X4o),e(xa,Iie),e(Iie,z4o),e(xa,W4o),e(xa,Nie),e(Nie,Q4o),e(xa,H4o),e(Ye,U4o),e(Ye,G),e(G,n_),e(n_,qie),e(qie,J4o),e(n_,Y4o),e(n_,Bq),e(Bq,K4o),e(n_,Z4o),e(G,eEo),e(G,s_),e(s_,jie),e(jie,oEo),e(s_,rEo),e(s_,Iq),e(Iq,tEo),e(s_,aEo),e(G,nEo),e(G,l_),e(l_,Die),e(Die,sEo),e(l_,lEo),e(l_,Nq),e(Nq,iEo),e(l_,dEo),e(G,cEo),e(G,i_),e(i_,Gie),e(Gie,mEo),e(i_,fEo),e(i_,qq),e(qq,gEo),e(i_,hEo),e(G,uEo),e(G,d_),e(d_,Oie),e(Oie,pEo),e(d_,_Eo),e(d_,jq),e(jq,bEo),e(d_,vEo),e(G,FEo),e(G,c_),e(c_,Vie),e(Vie,TEo),e(c_,MEo),e(c_,Dq),e(Dq,EEo),e(c_,CEo),e(G,wEo),e(G,m_),e(m_,Xie),e(Xie,AEo),e(m_,yEo),e(m_,Gq),e(Gq,LEo),e(m_,xEo),e(G,$Eo),e(G,f_),e(f_,zie),e(zie,kEo),e(f_,SEo),e(f_,Oq),e(Oq,REo),e(f_,PEo),e(G,BEo),e(G,g_),e(g_,Wie),e(Wie,IEo),e(g_,NEo),e(g_,Vq),e(Vq,qEo),e(g_,jEo),e(G,DEo),e(G,h_),e(h_,Qie),e(Qie,GEo),e(h_,OEo),e(h_,Xq),e(Xq,VEo),e(h_,XEo),e(G,zEo),e(G,u_),e(u_,Hie),e(Hie,WEo),e(u_,QEo),e(u_,zq),e(zq,HEo),e(u_,UEo),e(G,JEo),e(G,p_),e(p_,Uie),e(Uie,YEo),e(p_,KEo),e(p_,Wq),e(Wq,ZEo),e(p_,eCo),e(G,oCo),e(G,__),e(__,Jie),e(Jie,rCo),e(__,tCo),e(__,Qq),e(Qq,aCo),e(__,nCo),e(G,sCo),e(G,b_),e(b_,Yie),e(Yie,lCo),e(b_,iCo),e(b_,Hq),e(Hq,dCo),e(b_,cCo),e(G,mCo),e(G,v_),e(v_,Kie),e(Kie,fCo),e(v_,gCo),e(v_,Uq),e(Uq,hCo),e(v_,uCo),e(G,pCo),e(G,F_),e(F_,Zie),e(Zie,_Co),e(F_,bCo),e(F_,Jq),e(Jq,vCo),e(F_,FCo),e(G,TCo),e(G,T_),e(T_,ede),e(ede,MCo),e(T_,ECo),e(T_,Yq),e(Yq,CCo),e(T_,wCo),e(G,ACo),e(G,M_),e(M_,ode),e(ode,yCo),e(M_,LCo),e(M_,Kq),e(Kq,xCo),e(M_,$Co),e(G,kCo),e(G,E_),e(E_,rde),e(rde,SCo),e(E_,RCo),e(E_,Zq),e(Zq,PCo),e(E_,BCo),e(G,ICo),e(G,C_),e(C_,tde),e(tde,NCo),e(C_,qCo),e(C_,ej),e(ej,jCo),e(C_,DCo),e(G,GCo),e(G,w_),e(w_,ade),e(ade,OCo),e(w_,VCo),e(w_,oj),e(oj,XCo),e(w_,zCo),e(G,WCo),e(G,A_),e(A_,nde),e(nde,QCo),e(A_,HCo),e(A_,rj),e(rj,UCo),e(A_,JCo),e(G,YCo),e(G,y_),e(y_,sde),e(sde,KCo),e(y_,ZCo),e(y_,tj),e(tj,e5o),e(y_,o5o),e(G,r5o),e(G,L_),e(L_,lde),e(lde,t5o),e(L_,a5o),e(L_,aj),e(aj,n5o),e(L_,s5o),e(G,l5o),e(G,x_),e(x_,ide),e(ide,i5o),e(x_,d5o),e(x_,nj),e(nj,c5o),e(x_,m5o),e(G,f5o),e(G,$_),e($_,dde),e(dde,g5o),e($_,h5o),e($_,sj),e(sj,u5o),e($_,p5o),e(G,_5o),e(G,k_),e(k_,cde),e(cde,b5o),e(k_,v5o),e(k_,lj),e(lj,F5o),e(k_,T5o),e(G,M5o),e(G,S_),e(S_,mde),e(mde,E5o),e(S_,C5o),e(S_,ij),e(ij,w5o),e(S_,A5o),e(G,y5o),e(G,R_),e(R_,fde),e(fde,L5o),e(R_,x5o),e(R_,dj),e(dj,$5o),e(R_,k5o),e(G,S5o),e(G,P_),e(P_,gde),e(gde,R5o),e(P_,P5o),e(P_,cj),e(cj,B5o),e(P_,I5o),e(G,N5o),e(G,B_),e(B_,hde),e(hde,q5o),e(B_,j5o),e(B_,mj),e(mj,D5o),e(B_,G5o),e(G,O5o),e(G,I_),e(I_,ude),e(ude,V5o),e(I_,X5o),e(I_,fj),e(fj,z5o),e(I_,W5o),e(G,Q5o),e(G,N_),e(N_,pde),e(pde,H5o),e(N_,U5o),e(N_,gj),e(gj,J5o),e(N_,Y5o),e(G,K5o),e(G,q_),e(q_,_de),e(_de,Z5o),e(q_,e3o),e(q_,hj),e(hj,o3o),e(q_,r3o),e(G,t3o),e(G,j_),e(j_,bde),e(bde,a3o),e(j_,n3o),e(j_,uj),e(uj,s3o),e(j_,l3o),e(G,i3o),e(G,D_),e(D_,vde),e(vde,d3o),e(D_,c3o),e(D_,pj),e(pj,m3o),e(D_,f3o),e(G,g3o),e(G,G_),e(G_,Fde),e(Fde,h3o),e(G_,u3o),e(G_,_j),e(_j,p3o),e(G_,_3o),e(G,b3o),e(G,O_),e(O_,Tde),e(Tde,v3o),e(O_,F3o),e(O_,bj),e(bj,T3o),e(O_,M3o),e(G,E3o),e(G,V_),e(V_,Mde),e(Mde,C3o),e(V_,w3o),e(V_,vj),e(vj,A3o),e(V_,y3o),e(G,L3o),e(G,X_),e(X_,Ede),e(Ede,x3o),e(X_,$3o),e(X_,Fj),e(Fj,k3o),e(X_,S3o),e(G,R3o),e(G,z_),e(z_,Cde),e(Cde,P3o),e(z_,B3o),e(z_,Tj),e(Tj,I3o),e(z_,N3o),e(G,q3o),e(G,W_),e(W_,wde),e(wde,j3o),e(W_,D3o),e(W_,Mj),e(Mj,G3o),e(W_,O3o),e(Ye,V3o),e(Ye,Q_),e(Q_,X3o),e(Q_,Ade),e(Ade,z3o),e(Q_,W3o),e(Q_,yde),e(yde,Q3o),e(Ye,H3o),M(H_,Ye,null),b(m,Bqe,_),b(m,ki,_),e(ki,U_),e(U_,Lde),M(hL,Lde,null),e(ki,U3o),e(ki,xde),e(xde,J3o),b(m,Iqe,_),b(m,$o,_),M(uL,$o,null),e($o,Y3o),e($o,Si),e(Si,K3o),e(Si,Ej),e(Ej,Z3o),e(Si,ewo),e(Si,Cj),e(Cj,owo),e(Si,rwo),e($o,two),e($o,pL),e(pL,awo),e(pL,$de),e($de,nwo),e(pL,swo),e($o,lwo),e($o,nt),M(_L,nt,null),e(nt,iwo),e(nt,kde),e(kde,dwo),e(nt,cwo),e(nt,Ri),e(Ri,mwo),e(Ri,Sde),e(Sde,fwo),e(Ri,gwo),e(Ri,wj),e(wj,hwo),e(Ri,uwo),e(nt,pwo),M(J_,nt,null),e($o,_wo),e($o,Ke),M(bL,Ke,null),e(Ke,bwo),e(Ke,Rde),e(Rde,vwo),e(Ke,Fwo),e(Ke,$a),e($a,Two),e($a,Pde),e(Pde,Mwo),e($a,Ewo),e($a,Bde),e(Bde,Cwo),e($a,wwo),e($a,Ide),e(Ide,Awo),e($a,ywo),e(Ke,Lwo),e(Ke,z),e(z,Y_),e(Y_,Nde),e(Nde,xwo),e(Y_,$wo),e(Y_,Aj),e(Aj,kwo),e(Y_,Swo),e(z,Rwo),e(z,K_),e(K_,qde),e(qde,Pwo),e(K_,Bwo),e(K_,yj),e(yj,Iwo),e(K_,Nwo),e(z,qwo),e(z,Z_),e(Z_,jde),e(jde,jwo),e(Z_,Dwo),e(Z_,Lj),e(Lj,Gwo),e(Z_,Owo),e(z,Vwo),e(z,eb),e(eb,Dde),e(Dde,Xwo),e(eb,zwo),e(eb,xj),e(xj,Wwo),e(eb,Qwo),e(z,Hwo),e(z,ob),e(ob,Gde),e(Gde,Uwo),e(ob,Jwo),e(ob,$j),e($j,Ywo),e(ob,Kwo),e(z,Zwo),e(z,rb),e(rb,Ode),e(Ode,e0o),e(rb,o0o),e(rb,kj),e(kj,r0o),e(rb,t0o),e(z,a0o),e(z,tb),e(tb,Vde),e(Vde,n0o),e(tb,s0o),e(tb,Sj),e(Sj,l0o),e(tb,i0o),e(z,d0o),e(z,ab),e(ab,Xde),e(Xde,c0o),e(ab,m0o),e(ab,Rj),e(Rj,f0o),e(ab,g0o),e(z,h0o),e(z,nb),e(nb,zde),e(zde,u0o),e(nb,p0o),e(nb,Pj),e(Pj,_0o),e(nb,b0o),e(z,v0o),e(z,sb),e(sb,Wde),e(Wde,F0o),e(sb,T0o),e(sb,Bj),e(Bj,M0o),e(sb,E0o),e(z,C0o),e(z,lb),e(lb,Qde),e(Qde,w0o),e(lb,A0o),e(lb,Ij),e(Ij,y0o),e(lb,L0o),e(z,x0o),e(z,ib),e(ib,Hde),e(Hde,$0o),e(ib,k0o),e(ib,Nj),e(Nj,S0o),e(ib,R0o),e(z,P0o),e(z,db),e(db,Ude),e(Ude,B0o),e(db,I0o),e(db,qj),e(qj,N0o),e(db,q0o),e(z,j0o),e(z,cb),e(cb,Jde),e(Jde,D0o),e(cb,G0o),e(cb,jj),e(jj,O0o),e(cb,V0o),e(z,X0o),e(z,mb),e(mb,Yde),e(Yde,z0o),e(mb,W0o),e(mb,Dj),e(Dj,Q0o),e(mb,H0o),e(z,U0o),e(z,fb),e(fb,Kde),e(Kde,J0o),e(fb,Y0o),e(fb,Gj),e(Gj,K0o),e(fb,Z0o),e(z,e6o),e(z,gb),e(gb,Zde),e(Zde,o6o),e(gb,r6o),e(gb,Oj),e(Oj,t6o),e(gb,a6o),e(z,n6o),e(z,hb),e(hb,ece),e(ece,s6o),e(hb,l6o),e(hb,Vj),e(Vj,i6o),e(hb,d6o),e(z,c6o),e(z,ub),e(ub,oce),e(oce,m6o),e(ub,f6o),e(ub,Xj),e(Xj,g6o),e(ub,h6o),e(z,u6o),e(z,pb),e(pb,rce),e(rce,p6o),e(pb,_6o),e(pb,zj),e(zj,b6o),e(pb,v6o),e(z,F6o),e(z,_b),e(_b,tce),e(tce,T6o),e(_b,M6o),e(_b,Wj),e(Wj,E6o),e(_b,C6o),e(z,w6o),e(z,bb),e(bb,ace),e(ace,A6o),e(bb,y6o),e(bb,Qj),e(Qj,L6o),e(bb,x6o),e(z,$6o),e(z,vb),e(vb,nce),e(nce,k6o),e(vb,S6o),e(vb,Hj),e(Hj,R6o),e(vb,P6o),e(z,B6o),e(z,Fb),e(Fb,sce),e(sce,I6o),e(Fb,N6o),e(Fb,Uj),e(Uj,q6o),e(Fb,j6o),e(z,D6o),e(z,Tb),e(Tb,lce),e(lce,G6o),e(Tb,O6o),e(Tb,Jj),e(Jj,V6o),e(Tb,X6o),e(z,z6o),e(z,Mb),e(Mb,ice),e(ice,W6o),e(Mb,Q6o),e(Mb,Yj),e(Yj,H6o),e(Mb,U6o),e(z,J6o),e(z,Eb),e(Eb,dce),e(dce,Y6o),e(Eb,K6o),e(Eb,Kj),e(Kj,Z6o),e(Eb,eAo),e(z,oAo),e(z,Cb),e(Cb,cce),e(cce,rAo),e(Cb,tAo),e(Cb,Zj),e(Zj,aAo),e(Cb,nAo),e(z,sAo),e(z,wb),e(wb,mce),e(mce,lAo),e(wb,iAo),e(wb,eD),e(eD,dAo),e(wb,cAo),e(z,mAo),e(z,Ab),e(Ab,fce),e(fce,fAo),e(Ab,gAo),e(Ab,oD),e(oD,hAo),e(Ab,uAo),e(z,pAo),e(z,yb),e(yb,gce),e(gce,_Ao),e(yb,bAo),e(yb,rD),e(rD,vAo),e(yb,FAo),e(z,TAo),e(z,Lb),e(Lb,hce),e(hce,MAo),e(Lb,EAo),e(Lb,tD),e(tD,CAo),e(Lb,wAo),e(z,AAo),e(z,xb),e(xb,uce),e(uce,yAo),e(xb,LAo),e(xb,aD),e(aD,xAo),e(xb,$Ao),e(z,kAo),e(z,$b),e($b,pce),e(pce,SAo),e($b,RAo),e($b,nD),e(nD,PAo),e($b,BAo),e(z,IAo),e(z,kb),e(kb,_ce),e(_ce,NAo),e(kb,qAo),e(kb,sD),e(sD,jAo),e(kb,DAo),e(z,GAo),e(z,Sb),e(Sb,bce),e(bce,OAo),e(Sb,VAo),e(Sb,lD),e(lD,XAo),e(Sb,zAo),e(z,WAo),e(z,Rb),e(Rb,vce),e(vce,QAo),e(Rb,HAo),e(Rb,iD),e(iD,UAo),e(Rb,JAo),e(Ke,YAo),e(Ke,Pb),e(Pb,KAo),e(Pb,Fce),e(Fce,ZAo),e(Pb,eyo),e(Pb,Tce),e(Tce,oyo),e(Ke,ryo),M(Bb,Ke,null),b(m,Nqe,_),b(m,Pi,_),e(Pi,Ib),e(Ib,Mce),M(vL,Mce,null),e(Pi,tyo),e(Pi,Ece),e(Ece,ayo),b(m,qqe,_),b(m,ko,_),M(FL,ko,null),e(ko,nyo),e(ko,Bi),e(Bi,syo),e(Bi,dD),e(dD,lyo),e(Bi,iyo),e(Bi,cD),e(cD,dyo),e(Bi,cyo),e(ko,myo),e(ko,TL),e(TL,fyo),e(TL,Cce),e(Cce,gyo),e(TL,hyo),e(ko,uyo),e(ko,st),M(ML,st,null),e(st,pyo),e(st,wce),e(wce,_yo),e(st,byo),e(st,Ii),e(Ii,vyo),e(Ii,Ace),e(Ace,Fyo),e(Ii,Tyo),e(Ii,mD),e(mD,Myo),e(Ii,Eyo),e(st,Cyo),M(Nb,st,null),e(ko,wyo),e(ko,Ze),M(EL,Ze,null),e(Ze,Ayo),e(Ze,yce),e(yce,yyo),e(Ze,Lyo),e(Ze,ka),e(ka,xyo),e(ka,Lce),e(Lce,$yo),e(ka,kyo),e(ka,xce),e(xce,Syo),e(ka,Ryo),e(ka,$ce),e($ce,Pyo),e(ka,Byo),e(Ze,Iyo),e(Ze,W),e(W,qb),e(qb,kce),e(kce,Nyo),e(qb,qyo),e(qb,fD),e(fD,jyo),e(qb,Dyo),e(W,Gyo),e(W,jb),e(jb,Sce),e(Sce,Oyo),e(jb,Vyo),e(jb,gD),e(gD,Xyo),e(jb,zyo),e(W,Wyo),e(W,Db),e(Db,Rce),e(Rce,Qyo),e(Db,Hyo),e(Db,hD),e(hD,Uyo),e(Db,Jyo),e(W,Yyo),e(W,Gb),e(Gb,Pce),e(Pce,Kyo),e(Gb,Zyo),e(Gb,uD),e(uD,eLo),e(Gb,oLo),e(W,rLo),e(W,Ob),e(Ob,Bce),e(Bce,tLo),e(Ob,aLo),e(Ob,pD),e(pD,nLo),e(Ob,sLo),e(W,lLo),e(W,Vb),e(Vb,Ice),e(Ice,iLo),e(Vb,dLo),e(Vb,_D),e(_D,cLo),e(Vb,mLo),e(W,fLo),e(W,Xb),e(Xb,Nce),e(Nce,gLo),e(Xb,hLo),e(Xb,bD),e(bD,uLo),e(Xb,pLo),e(W,_Lo),e(W,zb),e(zb,qce),e(qce,bLo),e(zb,vLo),e(zb,vD),e(vD,FLo),e(zb,TLo),e(W,MLo),e(W,Wb),e(Wb,jce),e(jce,ELo),e(Wb,CLo),e(Wb,FD),e(FD,wLo),e(Wb,ALo),e(W,yLo),e(W,Qb),e(Qb,Dce),e(Dce,LLo),e(Qb,xLo),e(Qb,TD),e(TD,$Lo),e(Qb,kLo),e(W,SLo),e(W,Hb),e(Hb,Gce),e(Gce,RLo),e(Hb,PLo),e(Hb,MD),e(MD,BLo),e(Hb,ILo),e(W,NLo),e(W,Ub),e(Ub,Oce),e(Oce,qLo),e(Ub,jLo),e(Ub,ED),e(ED,DLo),e(Ub,GLo),e(W,OLo),e(W,Jb),e(Jb,Vce),e(Vce,VLo),e(Jb,XLo),e(Jb,CD),e(CD,zLo),e(Jb,WLo),e(W,QLo),e(W,Yb),e(Yb,Xce),e(Xce,HLo),e(Yb,ULo),e(Yb,wD),e(wD,JLo),e(Yb,YLo),e(W,KLo),e(W,Kb),e(Kb,zce),e(zce,ZLo),e(Kb,e8o),e(Kb,AD),e(AD,o8o),e(Kb,r8o),e(W,t8o),e(W,Zb),e(Zb,Wce),e(Wce,a8o),e(Zb,n8o),e(Zb,yD),e(yD,s8o),e(Zb,l8o),e(W,i8o),e(W,e2),e(e2,Qce),e(Qce,d8o),e(e2,c8o),e(e2,LD),e(LD,m8o),e(e2,f8o),e(W,g8o),e(W,o2),e(o2,Hce),e(Hce,h8o),e(o2,u8o),e(o2,xD),e(xD,p8o),e(o2,_8o),e(W,b8o),e(W,r2),e(r2,Uce),e(Uce,v8o),e(r2,F8o),e(r2,$D),e($D,T8o),e(r2,M8o),e(W,E8o),e(W,t2),e(t2,Jce),e(Jce,C8o),e(t2,w8o),e(t2,kD),e(kD,A8o),e(t2,y8o),e(W,L8o),e(W,a2),e(a2,Yce),e(Yce,x8o),e(a2,$8o),e(a2,SD),e(SD,k8o),e(a2,S8o),e(W,R8o),e(W,n2),e(n2,Kce),e(Kce,P8o),e(n2,B8o),e(n2,RD),e(RD,I8o),e(n2,N8o),e(W,q8o),e(W,s2),e(s2,Zce),e(Zce,j8o),e(s2,D8o),e(s2,PD),e(PD,G8o),e(s2,O8o),e(W,V8o),e(W,l2),e(l2,eme),e(eme,X8o),e(l2,z8o),e(l2,BD),e(BD,W8o),e(l2,Q8o),e(W,H8o),e(W,i2),e(i2,ome),e(ome,U8o),e(i2,J8o),e(i2,ID),e(ID,Y8o),e(i2,K8o),e(W,Z8o),e(W,d2),e(d2,rme),e(rme,e7o),e(d2,o7o),e(d2,ND),e(ND,r7o),e(d2,t7o),e(W,a7o),e(W,c2),e(c2,tme),e(tme,n7o),e(c2,s7o),e(c2,qD),e(qD,l7o),e(c2,i7o),e(W,d7o),e(W,m2),e(m2,ame),e(ame,c7o),e(m2,m7o),e(m2,jD),e(jD,f7o),e(m2,g7o),e(W,h7o),e(W,f2),e(f2,nme),e(nme,u7o),e(f2,p7o),e(f2,DD),e(DD,_7o),e(f2,b7o),e(W,v7o),e(W,g2),e(g2,sme),e(sme,F7o),e(g2,T7o),e(g2,GD),e(GD,M7o),e(g2,E7o),e(W,C7o),e(W,h2),e(h2,lme),e(lme,w7o),e(h2,A7o),e(h2,OD),e(OD,y7o),e(h2,L7o),e(W,x7o),e(W,u2),e(u2,ime),e(ime,$7o),e(u2,k7o),e(u2,dme),e(dme,S7o),e(u2,R7o),e(W,P7o),e(W,p2),e(p2,cme),e(cme,B7o),e(p2,I7o),e(p2,VD),e(VD,N7o),e(p2,q7o),e(W,j7o),e(W,_2),e(_2,mme),e(mme,D7o),e(_2,G7o),e(_2,XD),e(XD,O7o),e(_2,V7o),e(W,X7o),e(W,b2),e(b2,fme),e(fme,z7o),e(b2,W7o),e(b2,zD),e(zD,Q7o),e(b2,H7o),e(W,U7o),e(W,v2),e(v2,gme),e(gme,J7o),e(v2,Y7o),e(v2,WD),e(WD,K7o),e(v2,Z7o),e(Ze,e9o),e(Ze,F2),e(F2,o9o),e(F2,hme),e(hme,r9o),e(F2,t9o),e(F2,ume),e(ume,a9o),e(Ze,n9o),M(T2,Ze,null),b(m,jqe,_),b(m,Ni,_),e(Ni,M2),e(M2,pme),M(CL,pme,null),e(Ni,s9o),e(Ni,_me),e(_me,l9o),b(m,Dqe,_),b(m,So,_),M(wL,So,null),e(So,i9o),e(So,qi),e(qi,d9o),e(qi,QD),e(QD,c9o),e(qi,m9o),e(qi,HD),e(HD,f9o),e(qi,g9o),e(So,h9o),e(So,AL),e(AL,u9o),e(AL,bme),e(bme,p9o),e(AL,_9o),e(So,b9o),e(So,lt),M(yL,lt,null),e(lt,v9o),e(lt,vme),e(vme,F9o),e(lt,T9o),e(lt,ji),e(ji,M9o),e(ji,Fme),e(Fme,E9o),e(ji,C9o),e(ji,UD),e(UD,w9o),e(ji,A9o),e(lt,y9o),M(E2,lt,null),e(So,L9o),e(So,eo),M(LL,eo,null),e(eo,x9o),e(eo,Tme),e(Tme,$9o),e(eo,k9o),e(eo,Sa),e(Sa,S9o),e(Sa,Mme),e(Mme,R9o),e(Sa,P9o),e(Sa,Eme),e(Eme,B9o),e(Sa,I9o),e(Sa,Cme),e(Cme,N9o),e(Sa,q9o),e(eo,j9o),e(eo,pe),e(pe,C2),e(C2,wme),e(wme,D9o),e(C2,G9o),e(C2,JD),e(JD,O9o),e(C2,V9o),e(pe,X9o),e(pe,w2),e(w2,Ame),e(Ame,z9o),e(w2,W9o),e(w2,YD),e(YD,Q9o),e(w2,H9o),e(pe,U9o),e(pe,A2),e(A2,yme),e(yme,J9o),e(A2,Y9o),e(A2,KD),e(KD,K9o),e(A2,Z9o),e(pe,exo),e(pe,y2),e(y2,Lme),e(Lme,oxo),e(y2,rxo),e(y2,ZD),e(ZD,txo),e(y2,axo),e(pe,nxo),e(pe,L2),e(L2,xme),e(xme,sxo),e(L2,lxo),e(L2,eG),e(eG,ixo),e(L2,dxo),e(pe,cxo),e(pe,x2),e(x2,$me),e($me,mxo),e(x2,fxo),e(x2,oG),e(oG,gxo),e(x2,hxo),e(pe,uxo),e(pe,$2),e($2,kme),e(kme,pxo),e($2,_xo),e($2,rG),e(rG,bxo),e($2,vxo),e(pe,Fxo),e(pe,k2),e(k2,Sme),e(Sme,Txo),e(k2,Mxo),e(k2,tG),e(tG,Exo),e(k2,Cxo),e(pe,wxo),e(pe,S2),e(S2,Rme),e(Rme,Axo),e(S2,yxo),e(S2,aG),e(aG,Lxo),e(S2,xxo),e(pe,$xo),e(pe,R2),e(R2,Pme),e(Pme,kxo),e(R2,Sxo),e(R2,nG),e(nG,Rxo),e(R2,Pxo),e(pe,Bxo),e(pe,P2),e(P2,Bme),e(Bme,Ixo),e(P2,Nxo),e(P2,sG),e(sG,qxo),e(P2,jxo),e(pe,Dxo),e(pe,B2),e(B2,Ime),e(Ime,Gxo),e(B2,Oxo),e(B2,lG),e(lG,Vxo),e(B2,Xxo),e(pe,zxo),e(pe,I2),e(I2,Nme),e(Nme,Wxo),e(I2,Qxo),e(I2,iG),e(iG,Hxo),e(I2,Uxo),e(pe,Jxo),e(pe,N2),e(N2,qme),e(qme,Yxo),e(N2,Kxo),e(N2,dG),e(dG,Zxo),e(N2,e$o),e(pe,o$o),e(pe,q2),e(q2,jme),e(jme,r$o),e(q2,t$o),e(q2,cG),e(cG,a$o),e(q2,n$o),e(pe,s$o),e(pe,j2),e(j2,Dme),e(Dme,l$o),e(j2,i$o),e(j2,mG),e(mG,d$o),e(j2,c$o),e(eo,m$o),e(eo,D2),e(D2,f$o),e(D2,Gme),e(Gme,g$o),e(D2,h$o),e(D2,Ome),e(Ome,u$o),e(eo,p$o),M(G2,eo,null),b(m,Gqe,_),b(m,Di,_),e(Di,O2),e(O2,Vme),M(xL,Vme,null),e(Di,_$o),e(Di,Xme),e(Xme,b$o),b(m,Oqe,_),b(m,Ro,_),M($L,Ro,null),e(Ro,v$o),e(Ro,Gi),e(Gi,F$o),e(Gi,fG),e(fG,T$o),e(Gi,M$o),e(Gi,gG),e(gG,E$o),e(Gi,C$o),e(Ro,w$o),e(Ro,kL),e(kL,A$o),e(kL,zme),e(zme,y$o),e(kL,L$o),e(Ro,x$o),e(Ro,it),M(SL,it,null),e(it,$$o),e(it,Wme),e(Wme,k$o),e(it,S$o),e(it,Oi),e(Oi,R$o),e(Oi,Qme),e(Qme,P$o),e(Oi,B$o),e(Oi,hG),e(hG,I$o),e(Oi,N$o),e(it,q$o),M(V2,it,null),e(Ro,j$o),e(Ro,oo),M(RL,oo,null),e(oo,D$o),e(oo,Hme),e(Hme,G$o),e(oo,O$o),e(oo,Ra),e(Ra,V$o),e(Ra,Ume),e(Ume,X$o),e(Ra,z$o),e(Ra,Jme),e(Jme,W$o),e(Ra,Q$o),e(Ra,Yme),e(Yme,H$o),e(Ra,U$o),e(oo,J$o),e(oo,N),e(N,X2),e(X2,Kme),e(Kme,Y$o),e(X2,K$o),e(X2,uG),e(uG,Z$o),e(X2,eko),e(N,oko),e(N,z2),e(z2,Zme),e(Zme,rko),e(z2,tko),e(z2,pG),e(pG,ako),e(z2,nko),e(N,sko),e(N,W2),e(W2,efe),e(efe,lko),e(W2,iko),e(W2,_G),e(_G,dko),e(W2,cko),e(N,mko),e(N,Q2),e(Q2,ofe),e(ofe,fko),e(Q2,gko),e(Q2,bG),e(bG,hko),e(Q2,uko),e(N,pko),e(N,H2),e(H2,rfe),e(rfe,_ko),e(H2,bko),e(H2,vG),e(vG,vko),e(H2,Fko),e(N,Tko),e(N,U2),e(U2,tfe),e(tfe,Mko),e(U2,Eko),e(U2,FG),e(FG,Cko),e(U2,wko),e(N,Ako),e(N,J2),e(J2,afe),e(afe,yko),e(J2,Lko),e(J2,TG),e(TG,xko),e(J2,$ko),e(N,kko),e(N,Y2),e(Y2,nfe),e(nfe,Sko),e(Y2,Rko),e(Y2,MG),e(MG,Pko),e(Y2,Bko),e(N,Iko),e(N,K2),e(K2,sfe),e(sfe,Nko),e(K2,qko),e(K2,EG),e(EG,jko),e(K2,Dko),e(N,Gko),e(N,Z2),e(Z2,lfe),e(lfe,Oko),e(Z2,Vko),e(Z2,CG),e(CG,Xko),e(Z2,zko),e(N,Wko),e(N,ev),e(ev,ife),e(ife,Qko),e(ev,Hko),e(ev,wG),e(wG,Uko),e(ev,Jko),e(N,Yko),e(N,ov),e(ov,dfe),e(dfe,Kko),e(ov,Zko),e(ov,AG),e(AG,eSo),e(ov,oSo),e(N,rSo),e(N,rv),e(rv,cfe),e(cfe,tSo),e(rv,aSo),e(rv,yG),e(yG,nSo),e(rv,sSo),e(N,lSo),e(N,tv),e(tv,mfe),e(mfe,iSo),e(tv,dSo),e(tv,LG),e(LG,cSo),e(tv,mSo),e(N,fSo),e(N,av),e(av,ffe),e(ffe,gSo),e(av,hSo),e(av,xG),e(xG,uSo),e(av,pSo),e(N,_So),e(N,nv),e(nv,gfe),e(gfe,bSo),e(nv,vSo),e(nv,$G),e($G,FSo),e(nv,TSo),e(N,MSo),e(N,sv),e(sv,hfe),e(hfe,ESo),e(sv,CSo),e(sv,kG),e(kG,wSo),e(sv,ASo),e(N,ySo),e(N,lv),e(lv,ufe),e(ufe,LSo),e(lv,xSo),e(lv,SG),e(SG,$So),e(lv,kSo),e(N,SSo),e(N,iv),e(iv,pfe),e(pfe,RSo),e(iv,PSo),e(iv,RG),e(RG,BSo),e(iv,ISo),e(N,NSo),e(N,dv),e(dv,_fe),e(_fe,qSo),e(dv,jSo),e(dv,PG),e(PG,DSo),e(dv,GSo),e(N,OSo),e(N,cv),e(cv,bfe),e(bfe,VSo),e(cv,XSo),e(cv,BG),e(BG,zSo),e(cv,WSo),e(N,QSo),e(N,mv),e(mv,vfe),e(vfe,HSo),e(mv,USo),e(mv,IG),e(IG,JSo),e(mv,YSo),e(N,KSo),e(N,fv),e(fv,Ffe),e(Ffe,ZSo),e(fv,eRo),e(fv,NG),e(NG,oRo),e(fv,rRo),e(N,tRo),e(N,gv),e(gv,Tfe),e(Tfe,aRo),e(gv,nRo),e(gv,qG),e(qG,sRo),e(gv,lRo),e(N,iRo),e(N,hv),e(hv,Mfe),e(Mfe,dRo),e(hv,cRo),e(hv,jG),e(jG,mRo),e(hv,fRo),e(N,gRo),e(N,uv),e(uv,Efe),e(Efe,hRo),e(uv,uRo),e(uv,DG),e(DG,pRo),e(uv,_Ro),e(N,bRo),e(N,pv),e(pv,Cfe),e(Cfe,vRo),e(pv,FRo),e(pv,GG),e(GG,TRo),e(pv,MRo),e(N,ERo),e(N,_v),e(_v,wfe),e(wfe,CRo),e(_v,wRo),e(_v,OG),e(OG,ARo),e(_v,yRo),e(N,LRo),e(N,bv),e(bv,Afe),e(Afe,xRo),e(bv,$Ro),e(bv,VG),e(VG,kRo),e(bv,SRo),e(N,RRo),e(N,vv),e(vv,yfe),e(yfe,PRo),e(vv,BRo),e(vv,XG),e(XG,IRo),e(vv,NRo),e(N,qRo),e(N,Fv),e(Fv,Lfe),e(Lfe,jRo),e(Fv,DRo),e(Fv,zG),e(zG,GRo),e(Fv,ORo),e(N,VRo),e(N,Tv),e(Tv,xfe),e(xfe,XRo),e(Tv,zRo),e(Tv,WG),e(WG,WRo),e(Tv,QRo),e(N,HRo),e(N,Mv),e(Mv,$fe),e($fe,URo),e(Mv,JRo),e(Mv,QG),e(QG,YRo),e(Mv,KRo),e(N,ZRo),e(N,Ev),e(Ev,kfe),e(kfe,ePo),e(Ev,oPo),e(Ev,HG),e(HG,rPo),e(Ev,tPo),e(N,aPo),e(N,Cv),e(Cv,Sfe),e(Sfe,nPo),e(Cv,sPo),e(Cv,UG),e(UG,lPo),e(Cv,iPo),e(N,dPo),e(N,wv),e(wv,Rfe),e(Rfe,cPo),e(wv,mPo),e(wv,JG),e(JG,fPo),e(wv,gPo),e(N,hPo),e(N,Av),e(Av,Pfe),e(Pfe,uPo),e(Av,pPo),e(Av,YG),e(YG,_Po),e(Av,bPo),e(N,vPo),e(N,yv),e(yv,Bfe),e(Bfe,FPo),e(yv,TPo),e(yv,KG),e(KG,MPo),e(yv,EPo),e(N,CPo),e(N,Lv),e(Lv,Ife),e(Ife,wPo),e(Lv,APo),e(Lv,ZG),e(ZG,yPo),e(Lv,LPo),e(N,xPo),e(N,xv),e(xv,Nfe),e(Nfe,$Po),e(xv,kPo),e(xv,eO),e(eO,SPo),e(xv,RPo),e(N,PPo),e(N,$v),e($v,qfe),e(qfe,BPo),e($v,IPo),e($v,oO),e(oO,NPo),e($v,qPo),e(N,jPo),e(N,kv),e(kv,jfe),e(jfe,DPo),e(kv,GPo),e(kv,rO),e(rO,OPo),e(kv,VPo),e(N,XPo),e(N,Sv),e(Sv,Dfe),e(Dfe,zPo),e(Sv,WPo),e(Sv,tO),e(tO,QPo),e(Sv,HPo),e(N,UPo),e(N,Rv),e(Rv,Gfe),e(Gfe,JPo),e(Rv,YPo),e(Rv,aO),e(aO,KPo),e(Rv,ZPo),e(N,eBo),e(N,Pv),e(Pv,Ofe),e(Ofe,oBo),e(Pv,rBo),e(Pv,nO),e(nO,tBo),e(Pv,aBo),e(N,nBo),e(N,Bv),e(Bv,Vfe),e(Vfe,sBo),e(Bv,lBo),e(Bv,sO),e(sO,iBo),e(Bv,dBo),e(N,cBo),e(N,Iv),e(Iv,Xfe),e(Xfe,mBo),e(Iv,fBo),e(Iv,lO),e(lO,gBo),e(Iv,hBo),e(oo,uBo),e(oo,Nv),e(Nv,pBo),e(Nv,zfe),e(zfe,_Bo),e(Nv,bBo),e(Nv,Wfe),e(Wfe,vBo),e(oo,FBo),M(qv,oo,null),b(m,Vqe,_),b(m,Vi,_),e(Vi,jv),e(jv,Qfe),M(PL,Qfe,null),e(Vi,TBo),e(Vi,Hfe),e(Hfe,MBo),b(m,Xqe,_),b(m,Po,_),M(BL,Po,null),e(Po,EBo),e(Po,Xi),e(Xi,CBo),e(Xi,iO),e(iO,wBo),e(Xi,ABo),e(Xi,dO),e(dO,yBo),e(Xi,LBo),e(Po,xBo),e(Po,IL),e(IL,$Bo),e(IL,Ufe),e(Ufe,kBo),e(IL,SBo),e(Po,RBo),e(Po,dt),M(NL,dt,null),e(dt,PBo),e(dt,Jfe),e(Jfe,BBo),e(dt,IBo),e(dt,zi),e(zi,NBo),e(zi,Yfe),e(Yfe,qBo),e(zi,jBo),e(zi,cO),e(cO,DBo),e(zi,GBo),e(dt,OBo),M(Dv,dt,null),e(Po,VBo),e(Po,ro),M(qL,ro,null),e(ro,XBo),e(ro,Kfe),e(Kfe,zBo),e(ro,WBo),e(ro,Pa),e(Pa,QBo),e(Pa,Zfe),e(Zfe,HBo),e(Pa,UBo),e(Pa,ege),e(ege,JBo),e(Pa,YBo),e(Pa,oge),e(oge,KBo),e(Pa,ZBo),e(ro,eIo),e(ro,K),e(K,Gv),e(Gv,rge),e(rge,oIo),e(Gv,rIo),e(Gv,mO),e(mO,tIo),e(Gv,aIo),e(K,nIo),e(K,Ov),e(Ov,tge),e(tge,sIo),e(Ov,lIo),e(Ov,fO),e(fO,iIo),e(Ov,dIo),e(K,cIo),e(K,Vv),e(Vv,age),e(age,mIo),e(Vv,fIo),e(Vv,gO),e(gO,gIo),e(Vv,hIo),e(K,uIo),e(K,Xv),e(Xv,nge),e(nge,pIo),e(Xv,_Io),e(Xv,hO),e(hO,bIo),e(Xv,vIo),e(K,FIo),e(K,zv),e(zv,sge),e(sge,TIo),e(zv,MIo),e(zv,uO),e(uO,EIo),e(zv,CIo),e(K,wIo),e(K,Wv),e(Wv,lge),e(lge,AIo),e(Wv,yIo),e(Wv,pO),e(pO,LIo),e(Wv,xIo),e(K,$Io),e(K,Qv),e(Qv,ige),e(ige,kIo),e(Qv,SIo),e(Qv,_O),e(_O,RIo),e(Qv,PIo),e(K,BIo),e(K,Hv),e(Hv,dge),e(dge,IIo),e(Hv,NIo),e(Hv,bO),e(bO,qIo),e(Hv,jIo),e(K,DIo),e(K,Uv),e(Uv,cge),e(cge,GIo),e(Uv,OIo),e(Uv,vO),e(vO,VIo),e(Uv,XIo),e(K,zIo),e(K,Jv),e(Jv,mge),e(mge,WIo),e(Jv,QIo),e(Jv,FO),e(FO,HIo),e(Jv,UIo),e(K,JIo),e(K,Yv),e(Yv,fge),e(fge,YIo),e(Yv,KIo),e(Yv,TO),e(TO,ZIo),e(Yv,eNo),e(K,oNo),e(K,Kv),e(Kv,gge),e(gge,rNo),e(Kv,tNo),e(Kv,MO),e(MO,aNo),e(Kv,nNo),e(K,sNo),e(K,Zv),e(Zv,hge),e(hge,lNo),e(Zv,iNo),e(Zv,EO),e(EO,dNo),e(Zv,cNo),e(K,mNo),e(K,eF),e(eF,uge),e(uge,fNo),e(eF,gNo),e(eF,CO),e(CO,hNo),e(eF,uNo),e(K,pNo),e(K,oF),e(oF,pge),e(pge,_No),e(oF,bNo),e(oF,wO),e(wO,vNo),e(oF,FNo),e(K,TNo),e(K,rF),e(rF,_ge),e(_ge,MNo),e(rF,ENo),e(rF,AO),e(AO,CNo),e(rF,wNo),e(K,ANo),e(K,tF),e(tF,bge),e(bge,yNo),e(tF,LNo),e(tF,yO),e(yO,xNo),e(tF,$No),e(K,kNo),e(K,aF),e(aF,vge),e(vge,SNo),e(aF,RNo),e(aF,LO),e(LO,PNo),e(aF,BNo),e(K,INo),e(K,nF),e(nF,Fge),e(Fge,NNo),e(nF,qNo),e(nF,xO),e(xO,jNo),e(nF,DNo),e(K,GNo),e(K,sF),e(sF,Tge),e(Tge,ONo),e(sF,VNo),e(sF,$O),e($O,XNo),e(sF,zNo),e(K,WNo),e(K,lF),e(lF,Mge),e(Mge,QNo),e(lF,HNo),e(lF,kO),e(kO,UNo),e(lF,JNo),e(K,YNo),e(K,iF),e(iF,Ege),e(Ege,KNo),e(iF,ZNo),e(iF,SO),e(SO,eqo),e(iF,oqo),e(K,rqo),e(K,dF),e(dF,Cge),e(Cge,tqo),e(dF,aqo),e(dF,RO),e(RO,nqo),e(dF,sqo),e(K,lqo),e(K,cF),e(cF,wge),e(wge,iqo),e(cF,dqo),e(cF,PO),e(PO,cqo),e(cF,mqo),e(K,fqo),e(K,mF),e(mF,Age),e(Age,gqo),e(mF,hqo),e(mF,BO),e(BO,uqo),e(mF,pqo),e(K,_qo),e(K,fF),e(fF,yge),e(yge,bqo),e(fF,vqo),e(fF,IO),e(IO,Fqo),e(fF,Tqo),e(K,Mqo),e(K,gF),e(gF,Lge),e(Lge,Eqo),e(gF,Cqo),e(gF,NO),e(NO,wqo),e(gF,Aqo),e(K,yqo),e(K,hF),e(hF,xge),e(xge,Lqo),e(hF,xqo),e(hF,qO),e(qO,$qo),e(hF,kqo),e(K,Sqo),e(K,uF),e(uF,$ge),e($ge,Rqo),e(uF,Pqo),e(uF,jO),e(jO,Bqo),e(uF,Iqo),e(ro,Nqo),e(ro,pF),e(pF,qqo),e(pF,kge),e(kge,jqo),e(pF,Dqo),e(pF,Sge),e(Sge,Gqo),e(ro,Oqo),M(_F,ro,null),b(m,zqe,_),b(m,Wi,_),e(Wi,bF),e(bF,Rge),M(jL,Rge,null),e(Wi,Vqo),e(Wi,Pge),e(Pge,Xqo),b(m,Wqe,_),b(m,Bo,_),M(DL,Bo,null),e(Bo,zqo),e(Bo,Qi),e(Qi,Wqo),e(Qi,DO),e(DO,Qqo),e(Qi,Hqo),e(Qi,GO),e(GO,Uqo),e(Qi,Jqo),e(Bo,Yqo),e(Bo,GL),e(GL,Kqo),e(GL,Bge),e(Bge,Zqo),e(GL,ejo),e(Bo,ojo),e(Bo,ct),M(OL,ct,null),e(ct,rjo),e(ct,Ige),e(Ige,tjo),e(ct,ajo),e(ct,Hi),e(Hi,njo),e(Hi,Nge),e(Nge,sjo),e(Hi,ljo),e(Hi,OO),e(OO,ijo),e(Hi,djo),e(ct,cjo),M(vF,ct,null),e(Bo,mjo),e(Bo,to),M(VL,to,null),e(to,fjo),e(to,qge),e(qge,gjo),e(to,hjo),e(to,Ba),e(Ba,ujo),e(Ba,jge),e(jge,pjo),e(Ba,_jo),e(Ba,Dge),e(Dge,bjo),e(Ba,vjo),e(Ba,Gge),e(Gge,Fjo),e(Ba,Tjo),e(to,Mjo),e(to,Yr),e(Yr,FF),e(FF,Oge),e(Oge,Ejo),e(FF,Cjo),e(FF,VO),e(VO,wjo),e(FF,Ajo),e(Yr,yjo),e(Yr,TF),e(TF,Vge),e(Vge,Ljo),e(TF,xjo),e(TF,XO),e(XO,$jo),e(TF,kjo),e(Yr,Sjo),e(Yr,MF),e(MF,Xge),e(Xge,Rjo),e(MF,Pjo),e(MF,zO),e(zO,Bjo),e(MF,Ijo),e(Yr,Njo),e(Yr,EF),e(EF,zge),e(zge,qjo),e(EF,jjo),e(EF,WO),e(WO,Djo),e(EF,Gjo),e(Yr,Ojo),e(Yr,CF),e(CF,Wge),e(Wge,Vjo),e(CF,Xjo),e(CF,QO),e(QO,zjo),e(CF,Wjo),e(to,Qjo),e(to,wF),e(wF,Hjo),e(wF,Qge),e(Qge,Ujo),e(wF,Jjo),e(wF,Hge),e(Hge,Yjo),e(to,Kjo),M(AF,to,null),b(m,Qqe,_),b(m,Ui,_),e(Ui,yF),e(yF,Uge),M(XL,Uge,null),e(Ui,Zjo),e(Ui,Jge),e(Jge,eDo),b(m,Hqe,_),b(m,Io,_),M(zL,Io,null),e(Io,oDo),e(Io,Ji),e(Ji,rDo),e(Ji,HO),e(HO,tDo),e(Ji,aDo),e(Ji,UO),e(UO,nDo),e(Ji,sDo),e(Io,lDo),e(Io,WL),e(WL,iDo),e(WL,Yge),e(Yge,dDo),e(WL,cDo),e(Io,mDo),e(Io,mt),M(QL,mt,null),e(mt,fDo),e(mt,Kge),e(Kge,gDo),e(mt,hDo),e(mt,Yi),e(Yi,uDo),e(Yi,Zge),e(Zge,pDo),e(Yi,_Do),e(Yi,JO),e(JO,bDo),e(Yi,vDo),e(mt,FDo),M(LF,mt,null),e(Io,TDo),e(Io,ao),M(HL,ao,null),e(ao,MDo),e(ao,ehe),e(ehe,EDo),e(ao,CDo),e(ao,Ia),e(Ia,wDo),e(Ia,ohe),e(ohe,ADo),e(Ia,yDo),e(Ia,rhe),e(rhe,LDo),e(Ia,xDo),e(Ia,the),e(the,$Do),e(Ia,kDo),e(ao,SDo),e(ao,U),e(U,xF),e(xF,ahe),e(ahe,RDo),e(xF,PDo),e(xF,YO),e(YO,BDo),e(xF,IDo),e(U,NDo),e(U,$F),e($F,nhe),e(nhe,qDo),e($F,jDo),e($F,KO),e(KO,DDo),e($F,GDo),e(U,ODo),e(U,kF),e(kF,she),e(she,VDo),e(kF,XDo),e(kF,ZO),e(ZO,zDo),e(kF,WDo),e(U,QDo),e(U,SF),e(SF,lhe),e(lhe,HDo),e(SF,UDo),e(SF,eV),e(eV,JDo),e(SF,YDo),e(U,KDo),e(U,RF),e(RF,ihe),e(ihe,ZDo),e(RF,eGo),e(RF,oV),e(oV,oGo),e(RF,rGo),e(U,tGo),e(U,PF),e(PF,dhe),e(dhe,aGo),e(PF,nGo),e(PF,rV),e(rV,sGo),e(PF,lGo),e(U,iGo),e(U,BF),e(BF,che),e(che,dGo),e(BF,cGo),e(BF,tV),e(tV,mGo),e(BF,fGo),e(U,gGo),e(U,IF),e(IF,mhe),e(mhe,hGo),e(IF,uGo),e(IF,aV),e(aV,pGo),e(IF,_Go),e(U,bGo),e(U,NF),e(NF,fhe),e(fhe,vGo),e(NF,FGo),e(NF,nV),e(nV,TGo),e(NF,MGo),e(U,EGo),e(U,qF),e(qF,ghe),e(ghe,CGo),e(qF,wGo),e(qF,sV),e(sV,AGo),e(qF,yGo),e(U,LGo),e(U,jF),e(jF,hhe),e(hhe,xGo),e(jF,$Go),e(jF,lV),e(lV,kGo),e(jF,SGo),e(U,RGo),e(U,DF),e(DF,uhe),e(uhe,PGo),e(DF,BGo),e(DF,iV),e(iV,IGo),e(DF,NGo),e(U,qGo),e(U,GF),e(GF,phe),e(phe,jGo),e(GF,DGo),e(GF,dV),e(dV,GGo),e(GF,OGo),e(U,VGo),e(U,OF),e(OF,_he),e(_he,XGo),e(OF,zGo),e(OF,cV),e(cV,WGo),e(OF,QGo),e(U,HGo),e(U,VF),e(VF,bhe),e(bhe,UGo),e(VF,JGo),e(VF,mV),e(mV,YGo),e(VF,KGo),e(U,ZGo),e(U,XF),e(XF,vhe),e(vhe,eOo),e(XF,oOo),e(XF,fV),e(fV,rOo),e(XF,tOo),e(U,aOo),e(U,zF),e(zF,Fhe),e(Fhe,nOo),e(zF,sOo),e(zF,gV),e(gV,lOo),e(zF,iOo),e(U,dOo),e(U,WF),e(WF,The),e(The,cOo),e(WF,mOo),e(WF,hV),e(hV,fOo),e(WF,gOo),e(U,hOo),e(U,QF),e(QF,Mhe),e(Mhe,uOo),e(QF,pOo),e(QF,uV),e(uV,_Oo),e(QF,bOo),e(U,vOo),e(U,HF),e(HF,Ehe),e(Ehe,FOo),e(HF,TOo),e(HF,pV),e(pV,MOo),e(HF,EOo),e(U,COo),e(U,UF),e(UF,Che),e(Che,wOo),e(UF,AOo),e(UF,_V),e(_V,yOo),e(UF,LOo),e(U,xOo),e(U,JF),e(JF,whe),e(whe,$Oo),e(JF,kOo),e(JF,bV),e(bV,SOo),e(JF,ROo),e(U,POo),e(U,YF),e(YF,Ahe),e(Ahe,BOo),e(YF,IOo),e(YF,vV),e(vV,NOo),e(YF,qOo),e(U,jOo),e(U,KF),e(KF,yhe),e(yhe,DOo),e(KF,GOo),e(KF,FV),e(FV,OOo),e(KF,VOo),e(U,XOo),e(U,ZF),e(ZF,Lhe),e(Lhe,zOo),e(ZF,WOo),e(ZF,TV),e(TV,QOo),e(ZF,HOo),e(U,UOo),e(U,e1),e(e1,xhe),e(xhe,JOo),e(e1,YOo),e(e1,MV),e(MV,KOo),e(e1,ZOo),e(U,eVo),e(U,o1),e(o1,$he),e($he,oVo),e(o1,rVo),e(o1,EV),e(EV,tVo),e(o1,aVo),e(U,nVo),e(U,r1),e(r1,khe),e(khe,sVo),e(r1,lVo),e(r1,CV),e(CV,iVo),e(r1,dVo),e(U,cVo),e(U,t1),e(t1,She),e(She,mVo),e(t1,fVo),e(t1,wV),e(wV,gVo),e(t1,hVo),e(U,uVo),e(U,a1),e(a1,Rhe),e(Rhe,pVo),e(a1,_Vo),e(a1,AV),e(AV,bVo),e(a1,vVo),e(U,FVo),e(U,n1),e(n1,Phe),e(Phe,TVo),e(n1,MVo),e(n1,yV),e(yV,EVo),e(n1,CVo),e(U,wVo),e(U,s1),e(s1,Bhe),e(Bhe,AVo),e(s1,yVo),e(s1,LV),e(LV,LVo),e(s1,xVo),e(U,$Vo),e(U,l1),e(l1,Ihe),e(Ihe,kVo),e(l1,SVo),e(l1,xV),e(xV,RVo),e(l1,PVo),e(U,BVo),e(U,i1),e(i1,Nhe),e(Nhe,IVo),e(i1,NVo),e(i1,$V),e($V,qVo),e(i1,jVo),e(ao,DVo),e(ao,d1),e(d1,GVo),e(d1,qhe),e(qhe,OVo),e(d1,VVo),e(d1,jhe),e(jhe,XVo),e(ao,zVo),M(c1,ao,null),b(m,Uqe,_),b(m,Ki,_),e(Ki,m1),e(m1,Dhe),M(UL,Dhe,null),e(Ki,WVo),e(Ki,Ghe),e(Ghe,QVo),b(m,Jqe,_),b(m,No,_),M(JL,No,null),e(No,HVo),e(No,Zi),e(Zi,UVo),e(Zi,kV),e(kV,JVo),e(Zi,YVo),e(Zi,SV),e(SV,KVo),e(Zi,ZVo),e(No,eXo),e(No,YL),e(YL,oXo),e(YL,Ohe),e(Ohe,rXo),e(YL,tXo),e(No,aXo),e(No,ft),M(KL,ft,null),e(ft,nXo),e(ft,Vhe),e(Vhe,sXo),e(ft,lXo),e(ft,ed),e(ed,iXo),e(ed,Xhe),e(Xhe,dXo),e(ed,cXo),e(ed,RV),e(RV,mXo),e(ed,fXo),e(ft,gXo),M(f1,ft,null),e(No,hXo),e(No,no),M(ZL,no,null),e(no,uXo),e(no,zhe),e(zhe,pXo),e(no,_Xo),e(no,Na),e(Na,bXo),e(Na,Whe),e(Whe,vXo),e(Na,FXo),e(Na,Qhe),e(Qhe,TXo),e(Na,MXo),e(Na,Hhe),e(Hhe,EXo),e(Na,CXo),e(no,wXo),e(no,V),e(V,g1),e(g1,Uhe),e(Uhe,AXo),e(g1,yXo),e(g1,PV),e(PV,LXo),e(g1,xXo),e(V,$Xo),e(V,h1),e(h1,Jhe),e(Jhe,kXo),e(h1,SXo),e(h1,BV),e(BV,RXo),e(h1,PXo),e(V,BXo),e(V,u1),e(u1,Yhe),e(Yhe,IXo),e(u1,NXo),e(u1,IV),e(IV,qXo),e(u1,jXo),e(V,DXo),e(V,p1),e(p1,Khe),e(Khe,GXo),e(p1,OXo),e(p1,NV),e(NV,VXo),e(p1,XXo),e(V,zXo),e(V,_1),e(_1,Zhe),e(Zhe,WXo),e(_1,QXo),e(_1,qV),e(qV,HXo),e(_1,UXo),e(V,JXo),e(V,b1),e(b1,eue),e(eue,YXo),e(b1,KXo),e(b1,jV),e(jV,ZXo),e(b1,ezo),e(V,ozo),e(V,v1),e(v1,oue),e(oue,rzo),e(v1,tzo),e(v1,DV),e(DV,azo),e(v1,nzo),e(V,szo),e(V,F1),e(F1,rue),e(rue,lzo),e(F1,izo),e(F1,GV),e(GV,dzo),e(F1,czo),e(V,mzo),e(V,T1),e(T1,tue),e(tue,fzo),e(T1,gzo),e(T1,OV),e(OV,hzo),e(T1,uzo),e(V,pzo),e(V,M1),e(M1,aue),e(aue,_zo),e(M1,bzo),e(M1,VV),e(VV,vzo),e(M1,Fzo),e(V,Tzo),e(V,E1),e(E1,nue),e(nue,Mzo),e(E1,Ezo),e(E1,XV),e(XV,Czo),e(E1,wzo),e(V,Azo),e(V,C1),e(C1,sue),e(sue,yzo),e(C1,Lzo),e(C1,zV),e(zV,xzo),e(C1,$zo),e(V,kzo),e(V,w1),e(w1,lue),e(lue,Szo),e(w1,Rzo),e(w1,WV),e(WV,Pzo),e(w1,Bzo),e(V,Izo),e(V,A1),e(A1,iue),e(iue,Nzo),e(A1,qzo),e(A1,QV),e(QV,jzo),e(A1,Dzo),e(V,Gzo),e(V,y1),e(y1,due),e(due,Ozo),e(y1,Vzo),e(y1,HV),e(HV,Xzo),e(y1,zzo),e(V,Wzo),e(V,L1),e(L1,cue),e(cue,Qzo),e(L1,Hzo),e(L1,UV),e(UV,Uzo),e(L1,Jzo),e(V,Yzo),e(V,x1),e(x1,mue),e(mue,Kzo),e(x1,Zzo),e(x1,JV),e(JV,eWo),e(x1,oWo),e(V,rWo),e(V,$1),e($1,fue),e(fue,tWo),e($1,aWo),e($1,YV),e(YV,nWo),e($1,sWo),e(V,lWo),e(V,k1),e(k1,gue),e(gue,iWo),e(k1,dWo),e(k1,KV),e(KV,cWo),e(k1,mWo),e(V,fWo),e(V,S1),e(S1,hue),e(hue,gWo),e(S1,hWo),e(S1,ZV),e(ZV,uWo),e(S1,pWo),e(V,_Wo),e(V,R1),e(R1,uue),e(uue,bWo),e(R1,vWo),e(R1,eX),e(eX,FWo),e(R1,TWo),e(V,MWo),e(V,P1),e(P1,pue),e(pue,EWo),e(P1,CWo),e(P1,oX),e(oX,wWo),e(P1,AWo),e(V,yWo),e(V,B1),e(B1,_ue),e(_ue,LWo),e(B1,xWo),e(B1,rX),e(rX,$Wo),e(B1,kWo),e(V,SWo),e(V,I1),e(I1,bue),e(bue,RWo),e(I1,PWo),e(I1,tX),e(tX,BWo),e(I1,IWo),e(V,NWo),e(V,N1),e(N1,vue),e(vue,qWo),e(N1,jWo),e(N1,aX),e(aX,DWo),e(N1,GWo),e(V,OWo),e(V,q1),e(q1,Fue),e(Fue,VWo),e(q1,XWo),e(q1,nX),e(nX,zWo),e(q1,WWo),e(V,QWo),e(V,j1),e(j1,Tue),e(Tue,HWo),e(j1,UWo),e(j1,sX),e(sX,JWo),e(j1,YWo),e(V,KWo),e(V,D1),e(D1,Mue),e(Mue,ZWo),e(D1,eQo),e(D1,lX),e(lX,oQo),e(D1,rQo),e(V,tQo),e(V,G1),e(G1,Eue),e(Eue,aQo),e(G1,nQo),e(G1,iX),e(iX,sQo),e(G1,lQo),e(V,iQo),e(V,O1),e(O1,Cue),e(Cue,dQo),e(O1,cQo),e(O1,dX),e(dX,mQo),e(O1,fQo),e(V,gQo),e(V,V1),e(V1,wue),e(wue,hQo),e(V1,uQo),e(V1,cX),e(cX,pQo),e(V1,_Qo),e(V,bQo),e(V,X1),e(X1,Aue),e(Aue,vQo),e(X1,FQo),e(X1,mX),e(mX,TQo),e(X1,MQo),e(V,EQo),e(V,z1),e(z1,yue),e(yue,CQo),e(z1,wQo),e(z1,fX),e(fX,AQo),e(z1,yQo),e(V,LQo),e(V,W1),e(W1,Lue),e(Lue,xQo),e(W1,$Qo),e(W1,gX),e(gX,kQo),e(W1,SQo),e(V,RQo),e(V,Q1),e(Q1,xue),e(xue,PQo),e(Q1,BQo),e(Q1,hX),e(hX,IQo),e(Q1,NQo),e(V,qQo),e(V,H1),e(H1,$ue),e($ue,jQo),e(H1,DQo),e(H1,uX),e(uX,GQo),e(H1,OQo),e(V,VQo),e(V,U1),e(U1,kue),e(kue,XQo),e(U1,zQo),e(U1,pX),e(pX,WQo),e(U1,QQo),e(V,HQo),e(V,J1),e(J1,Sue),e(Sue,UQo),e(J1,JQo),e(J1,_X),e(_X,YQo),e(J1,KQo),e(V,ZQo),e(V,Y1),e(Y1,Rue),e(Rue,eHo),e(Y1,oHo),e(Y1,bX),e(bX,rHo),e(Y1,tHo),e(V,aHo),e(V,K1),e(K1,Pue),e(Pue,nHo),e(K1,sHo),e(K1,vX),e(vX,lHo),e(K1,iHo),e(no,dHo),e(no,Z1),e(Z1,cHo),e(Z1,Bue),e(Bue,mHo),e(Z1,fHo),e(Z1,Iue),e(Iue,gHo),e(no,hHo),M(eT,no,null),b(m,Yqe,_),b(m,od,_),e(od,oT),e(oT,Nue),M(e8,Nue,null),e(od,uHo),e(od,que),e(que,pHo),b(m,Kqe,_),b(m,qo,_),M(o8,qo,null),e(qo,_Ho),e(qo,rd),e(rd,bHo),e(rd,FX),e(FX,vHo),e(rd,FHo),e(rd,TX),e(TX,THo),e(rd,MHo),e(qo,EHo),e(qo,r8),e(r8,CHo),e(r8,jue),e(jue,wHo),e(r8,AHo),e(qo,yHo),e(qo,gt),M(t8,gt,null),e(gt,LHo),e(gt,Due),e(Due,xHo),e(gt,$Ho),e(gt,td),e(td,kHo),e(td,Gue),e(Gue,SHo),e(td,RHo),e(td,MX),e(MX,PHo),e(td,BHo),e(gt,IHo),M(rT,gt,null),e(qo,NHo),e(qo,so),M(a8,so,null),e(so,qHo),e(so,Oue),e(Oue,jHo),e(so,DHo),e(so,qa),e(qa,GHo),e(qa,Vue),e(Vue,OHo),e(qa,VHo),e(qa,Xue),e(Xue,XHo),e(qa,zHo),e(qa,zue),e(zue,WHo),e(qa,QHo),e(so,HHo),e(so,Wue),e(Wue,tT),e(tT,Que),e(Que,UHo),e(tT,JHo),e(tT,EX),e(EX,YHo),e(tT,KHo),e(so,ZHo),e(so,aT),e(aT,eUo),e(aT,Hue),e(Hue,oUo),e(aT,rUo),e(aT,Uue),e(Uue,tUo),e(so,aUo),M(nT,so,null),b(m,Zqe,_),b(m,ad,_),e(ad,sT),e(sT,Jue),M(n8,Jue,null),e(ad,nUo),e(ad,Yue),e(Yue,sUo),b(m,eje,_),b(m,jo,_),M(s8,jo,null),e(jo,lUo),e(jo,nd),e(nd,iUo),e(nd,CX),e(CX,dUo),e(nd,cUo),e(nd,wX),e(wX,mUo),e(nd,fUo),e(jo,gUo),e(jo,l8),e(l8,hUo),e(l8,Kue),e(Kue,uUo),e(l8,pUo),e(jo,_Uo),e(jo,ht),M(i8,ht,null),e(ht,bUo),e(ht,Zue),e(Zue,vUo),e(ht,FUo),e(ht,sd),e(sd,TUo),e(sd,epe),e(epe,MUo),e(sd,EUo),e(sd,AX),e(AX,CUo),e(sd,wUo),e(ht,AUo),M(lT,ht,null),e(jo,yUo),e(jo,lo),M(d8,lo,null),e(lo,LUo),e(lo,ope),e(ope,xUo),e(lo,$Uo),e(lo,ja),e(ja,kUo),e(ja,rpe),e(rpe,SUo),e(ja,RUo),e(ja,tpe),e(tpe,PUo),e(ja,BUo),e(ja,ape),e(ape,IUo),e(ja,NUo),e(lo,qUo),e(lo,Fe),e(Fe,iT),e(iT,npe),e(npe,jUo),e(iT,DUo),e(iT,yX),e(yX,GUo),e(iT,OUo),e(Fe,VUo),e(Fe,dT),e(dT,spe),e(spe,XUo),e(dT,zUo),e(dT,LX),e(LX,WUo),e(dT,QUo),e(Fe,HUo),e(Fe,cT),e(cT,lpe),e(lpe,UUo),e(cT,JUo),e(cT,xX),e(xX,YUo),e(cT,KUo),e(Fe,ZUo),e(Fe,mT),e(mT,ipe),e(ipe,eJo),e(mT,oJo),e(mT,$X),e($X,rJo),e(mT,tJo),e(Fe,aJo),e(Fe,Bs),e(Bs,dpe),e(dpe,nJo),e(Bs,sJo),e(Bs,kX),e(kX,lJo),e(Bs,iJo),e(Bs,SX),e(SX,dJo),e(Bs,cJo),e(Fe,mJo),e(Fe,fT),e(fT,cpe),e(cpe,fJo),e(fT,gJo),e(fT,RX),e(RX,hJo),e(fT,uJo),e(Fe,pJo),e(Fe,ut),e(ut,mpe),e(mpe,_Jo),e(ut,bJo),e(ut,PX),e(PX,vJo),e(ut,FJo),e(ut,BX),e(BX,TJo),e(ut,MJo),e(ut,IX),e(IX,EJo),e(ut,CJo),e(Fe,wJo),e(Fe,gT),e(gT,fpe),e(fpe,AJo),e(gT,yJo),e(gT,NX),e(NX,LJo),e(gT,xJo),e(Fe,$Jo),e(Fe,hT),e(hT,gpe),e(gpe,kJo),e(hT,SJo),e(hT,qX),e(qX,RJo),e(hT,PJo),e(Fe,BJo),e(Fe,uT),e(uT,hpe),e(hpe,IJo),e(uT,NJo),e(uT,jX),e(jX,qJo),e(uT,jJo),e(Fe,DJo),e(Fe,pT),e(pT,upe),e(upe,GJo),e(pT,OJo),e(pT,DX),e(DX,VJo),e(pT,XJo),e(Fe,zJo),e(Fe,_T),e(_T,ppe),e(ppe,WJo),e(_T,QJo),e(_T,GX),e(GX,HJo),e(_T,UJo),e(Fe,JJo),e(Fe,bT),e(bT,_pe),e(_pe,YJo),e(bT,KJo),e(bT,OX),e(OX,ZJo),e(bT,eYo),e(Fe,oYo),e(Fe,vT),e(vT,bpe),e(bpe,rYo),e(vT,tYo),e(vT,VX),e(VX,aYo),e(vT,nYo),e(lo,sYo),e(lo,FT),e(FT,lYo),e(FT,vpe),e(vpe,iYo),e(FT,dYo),e(FT,Fpe),e(Fpe,cYo),e(lo,mYo),M(TT,lo,null),b(m,oje,_),b(m,ld,_),e(ld,MT),e(MT,Tpe),M(c8,Tpe,null),e(ld,fYo),e(ld,Mpe),e(Mpe,gYo),b(m,rje,_),b(m,Do,_),M(m8,Do,null),e(Do,hYo),e(Do,id),e(id,uYo),e(id,XX),e(XX,pYo),e(id,_Yo),e(id,zX),e(zX,bYo),e(id,vYo),e(Do,FYo),e(Do,f8),e(f8,TYo),e(f8,Epe),e(Epe,MYo),e(f8,EYo),e(Do,CYo),e(Do,pt),M(g8,pt,null),e(pt,wYo),e(pt,Cpe),e(Cpe,AYo),e(pt,yYo),e(pt,dd),e(dd,LYo),e(dd,wpe),e(wpe,xYo),e(dd,$Yo),e(dd,WX),e(WX,kYo),e(dd,SYo),e(pt,RYo),M(ET,pt,null),e(Do,PYo),e(Do,io),M(h8,io,null),e(io,BYo),e(io,Ape),e(Ape,IYo),e(io,NYo),e(io,Da),e(Da,qYo),e(Da,ype),e(ype,jYo),e(Da,DYo),e(Da,Lpe),e(Lpe,GYo),e(Da,OYo),e(Da,xpe),e(xpe,VYo),e(Da,XYo),e(io,zYo),e(io,$pe),e($pe,CT),e(CT,kpe),e(kpe,WYo),e(CT,QYo),e(CT,QX),e(QX,HYo),e(CT,UYo),e(io,JYo),e(io,wT),e(wT,YYo),e(wT,Spe),e(Spe,KYo),e(wT,ZYo),e(wT,Rpe),e(Rpe,eKo),e(io,oKo),M(AT,io,null),b(m,tje,_),b(m,cd,_),e(cd,yT),e(yT,Ppe),M(u8,Ppe,null),e(cd,rKo),e(cd,Bpe),e(Bpe,tKo),b(m,aje,_),b(m,Go,_),M(p8,Go,null),e(Go,aKo),e(Go,md),e(md,nKo),e(md,HX),e(HX,sKo),e(md,lKo),e(md,UX),e(UX,iKo),e(md,dKo),e(Go,cKo),e(Go,_8),e(_8,mKo),e(_8,Ipe),e(Ipe,fKo),e(_8,gKo),e(Go,hKo),e(Go,_t),M(b8,_t,null),e(_t,uKo),e(_t,Npe),e(Npe,pKo),e(_t,_Ko),e(_t,fd),e(fd,bKo),e(fd,qpe),e(qpe,vKo),e(fd,FKo),e(fd,JX),e(JX,TKo),e(fd,MKo),e(_t,EKo),M(LT,_t,null),e(Go,CKo),e(Go,co),M(v8,co,null),e(co,wKo),e(co,jpe),e(jpe,AKo),e(co,yKo),e(co,Ga),e(Ga,LKo),e(Ga,Dpe),e(Dpe,xKo),e(Ga,$Ko),e(Ga,Gpe),e(Gpe,kKo),e(Ga,SKo),e(Ga,Ope),e(Ope,RKo),e(Ga,PKo),e(co,BKo),e(co,Se),e(Se,xT),e(xT,Vpe),e(Vpe,IKo),e(xT,NKo),e(xT,YX),e(YX,qKo),e(xT,jKo),e(Se,DKo),e(Se,$T),e($T,Xpe),e(Xpe,GKo),e($T,OKo),e($T,KX),e(KX,VKo),e($T,XKo),e(Se,zKo),e(Se,kT),e(kT,zpe),e(zpe,WKo),e(kT,QKo),e(kT,ZX),e(ZX,HKo),e(kT,UKo),e(Se,JKo),e(Se,ST),e(ST,Wpe),e(Wpe,YKo),e(ST,KKo),e(ST,ez),e(ez,ZKo),e(ST,eZo),e(Se,oZo),e(Se,RT),e(RT,Qpe),e(Qpe,rZo),e(RT,tZo),e(RT,oz),e(oz,aZo),e(RT,nZo),e(Se,sZo),e(Se,PT),e(PT,Hpe),e(Hpe,lZo),e(PT,iZo),e(PT,rz),e(rz,dZo),e(PT,cZo),e(Se,mZo),e(Se,BT),e(BT,Upe),e(Upe,fZo),e(BT,gZo),e(BT,tz),e(tz,hZo),e(BT,uZo),e(Se,pZo),e(Se,IT),e(IT,Jpe),e(Jpe,_Zo),e(IT,bZo),e(IT,az),e(az,vZo),e(IT,FZo),e(Se,TZo),e(Se,NT),e(NT,Ype),e(Ype,MZo),e(NT,EZo),e(NT,nz),e(nz,CZo),e(NT,wZo),e(co,AZo),e(co,qT),e(qT,yZo),e(qT,Kpe),e(Kpe,LZo),e(qT,xZo),e(qT,Zpe),e(Zpe,$Zo),e(co,kZo),M(jT,co,null),b(m,nje,_),b(m,gd,_),e(gd,DT),e(DT,e_e),M(F8,e_e,null),e(gd,SZo),e(gd,o_e),e(o_e,RZo),b(m,sje,_),b(m,Oo,_),M(T8,Oo,null),e(Oo,PZo),e(Oo,hd),e(hd,BZo),e(hd,sz),e(sz,IZo),e(hd,NZo),e(hd,lz),e(lz,qZo),e(hd,jZo),e(Oo,DZo),e(Oo,M8),e(M8,GZo),e(M8,r_e),e(r_e,OZo),e(M8,VZo),e(Oo,XZo),e(Oo,bt),M(E8,bt,null),e(bt,zZo),e(bt,t_e),e(t_e,WZo),e(bt,QZo),e(bt,ud),e(ud,HZo),e(ud,a_e),e(a_e,UZo),e(ud,JZo),e(ud,iz),e(iz,YZo),e(ud,KZo),e(bt,ZZo),M(GT,bt,null),e(Oo,eer),e(Oo,mo),M(C8,mo,null),e(mo,oer),e(mo,n_e),e(n_e,rer),e(mo,ter),e(mo,Oa),e(Oa,aer),e(Oa,s_e),e(s_e,ner),e(Oa,ser),e(Oa,l_e),e(l_e,ler),e(Oa,ier),e(Oa,i_e),e(i_e,der),e(Oa,cer),e(mo,mer),e(mo,Kr),e(Kr,OT),e(OT,d_e),e(d_e,fer),e(OT,ger),e(OT,dz),e(dz,her),e(OT,uer),e(Kr,per),e(Kr,VT),e(VT,c_e),e(c_e,_er),e(VT,ber),e(VT,cz),e(cz,ver),e(VT,Fer),e(Kr,Ter),e(Kr,XT),e(XT,m_e),e(m_e,Mer),e(XT,Eer),e(XT,mz),e(mz,Cer),e(XT,wer),e(Kr,Aer),e(Kr,zT),e(zT,f_e),e(f_e,yer),e(zT,Ler),e(zT,fz),e(fz,xer),e(zT,$er),e(Kr,ker),e(Kr,WT),e(WT,g_e),e(g_e,Ser),e(WT,Rer),e(WT,gz),e(gz,Per),e(WT,Ber),e(mo,Ier),e(mo,QT),e(QT,Ner),e(QT,h_e),e(h_e,qer),e(QT,jer),e(QT,u_e),e(u_e,Der),e(mo,Ger),M(HT,mo,null),b(m,lje,_),b(m,pd,_),e(pd,UT),e(UT,p_e),M(w8,p_e,null),e(pd,Oer),e(pd,__e),e(__e,Ver),b(m,ije,_),b(m,Vo,_),M(A8,Vo,null),e(Vo,Xer),e(Vo,_d),e(_d,zer),e(_d,hz),e(hz,Wer),e(_d,Qer),e(_d,uz),e(uz,Her),e(_d,Uer),e(Vo,Jer),e(Vo,y8),e(y8,Yer),e(y8,b_e),e(b_e,Ker),e(y8,Zer),e(Vo,eor),e(Vo,vt),M(L8,vt,null),e(vt,oor),e(vt,v_e),e(v_e,ror),e(vt,tor),e(vt,bd),e(bd,aor),e(bd,F_e),e(F_e,nor),e(bd,sor),e(bd,pz),e(pz,lor),e(bd,ior),e(vt,dor),M(JT,vt,null),e(Vo,cor),e(Vo,fo),M(x8,fo,null),e(fo,mor),e(fo,T_e),e(T_e,gor),e(fo,hor),e(fo,Va),e(Va,uor),e(Va,M_e),e(M_e,por),e(Va,_or),e(Va,E_e),e(E_e,bor),e(Va,vor),e(Va,C_e),e(C_e,For),e(Va,Tor),e(fo,Mor),e(fo,Re),e(Re,YT),e(YT,w_e),e(w_e,Eor),e(YT,Cor),e(YT,_z),e(_z,wor),e(YT,Aor),e(Re,yor),e(Re,KT),e(KT,A_e),e(A_e,Lor),e(KT,xor),e(KT,bz),e(bz,$or),e(KT,kor),e(Re,Sor),e(Re,ZT),e(ZT,y_e),e(y_e,Ror),e(ZT,Por),e(ZT,vz),e(vz,Bor),e(ZT,Ior),e(Re,Nor),e(Re,eM),e(eM,L_e),e(L_e,qor),e(eM,jor),e(eM,Fz),e(Fz,Dor),e(eM,Gor),e(Re,Oor),e(Re,oM),e(oM,x_e),e(x_e,Vor),e(oM,Xor),e(oM,Tz),e(Tz,zor),e(oM,Wor),e(Re,Qor),e(Re,rM),e(rM,$_e),e($_e,Hor),e(rM,Uor),e(rM,Mz),e(Mz,Jor),e(rM,Yor),e(Re,Kor),e(Re,tM),e(tM,k_e),e(k_e,Zor),e(tM,err),e(tM,Ez),e(Ez,orr),e(tM,rrr),e(Re,trr),e(Re,aM),e(aM,S_e),e(S_e,arr),e(aM,nrr),e(aM,Cz),e(Cz,srr),e(aM,lrr),e(Re,irr),e(Re,nM),e(nM,R_e),e(R_e,drr),e(nM,crr),e(nM,wz),e(wz,mrr),e(nM,frr),e(fo,grr),e(fo,sM),e(sM,hrr),e(sM,P_e),e(P_e,urr),e(sM,prr),e(sM,B_e),e(B_e,_rr),e(fo,brr),M(lM,fo,null),b(m,dje,_),b(m,vd,_),e(vd,iM),e(iM,I_e),M($8,I_e,null),e(vd,vrr),e(vd,N_e),e(N_e,Frr),b(m,cje,_),b(m,Xo,_),M(k8,Xo,null),e(Xo,Trr),e(Xo,Fd),e(Fd,Mrr),e(Fd,Az),e(Az,Err),e(Fd,Crr),e(Fd,yz),e(yz,wrr),e(Fd,Arr),e(Xo,yrr),e(Xo,S8),e(S8,Lrr),e(S8,q_e),e(q_e,xrr),e(S8,$rr),e(Xo,krr),e(Xo,Ft),M(R8,Ft,null),e(Ft,Srr),e(Ft,j_e),e(j_e,Rrr),e(Ft,Prr),e(Ft,Td),e(Td,Brr),e(Td,D_e),e(D_e,Irr),e(Td,Nrr),e(Td,Lz),e(Lz,qrr),e(Td,jrr),e(Ft,Drr),M(dM,Ft,null),e(Xo,Grr),e(Xo,go),M(P8,go,null),e(go,Orr),e(go,G_e),e(G_e,Vrr),e(go,Xrr),e(go,Xa),e(Xa,zrr),e(Xa,O_e),e(O_e,Wrr),e(Xa,Qrr),e(Xa,V_e),e(V_e,Hrr),e(Xa,Urr),e(Xa,X_e),e(X_e,Jrr),e(Xa,Yrr),e(go,Krr),e(go,B8),e(B8,cM),e(cM,z_e),e(z_e,Zrr),e(cM,etr),e(cM,xz),e(xz,otr),e(cM,rtr),e(B8,ttr),e(B8,mM),e(mM,W_e),e(W_e,atr),e(mM,ntr),e(mM,$z),e($z,str),e(mM,ltr),e(go,itr),e(go,fM),e(fM,dtr),e(fM,Q_e),e(Q_e,ctr),e(fM,mtr),e(fM,H_e),e(H_e,ftr),e(go,gtr),M(gM,go,null),b(m,mje,_),b(m,Md,_),e(Md,hM),e(hM,U_e),M(I8,U_e,null),e(Md,htr),e(Md,J_e),e(J_e,utr),b(m,fje,_),b(m,zo,_),M(N8,zo,null),e(zo,ptr),e(zo,Ed),e(Ed,_tr),e(Ed,kz),e(kz,btr),e(Ed,vtr),e(Ed,Sz),e(Sz,Ftr),e(Ed,Ttr),e(zo,Mtr),e(zo,q8),e(q8,Etr),e(q8,Y_e),e(Y_e,Ctr),e(q8,wtr),e(zo,Atr),e(zo,Tt),M(j8,Tt,null),e(Tt,ytr),e(Tt,K_e),e(K_e,Ltr),e(Tt,xtr),e(Tt,Cd),e(Cd,$tr),e(Cd,Z_e),e(Z_e,ktr),e(Cd,Str),e(Cd,Rz),e(Rz,Rtr),e(Cd,Ptr),e(Tt,Btr),M(uM,Tt,null),e(zo,Itr),e(zo,ho),M(D8,ho,null),e(ho,Ntr),e(ho,ebe),e(ebe,qtr),e(ho,jtr),e(ho,za),e(za,Dtr),e(za,obe),e(obe,Gtr),e(za,Otr),e(za,rbe),e(rbe,Vtr),e(za,Xtr),e(za,tbe),e(tbe,ztr),e(za,Wtr),e(ho,Qtr),e(ho,Zr),e(Zr,pM),e(pM,abe),e(abe,Htr),e(pM,Utr),e(pM,Pz),e(Pz,Jtr),e(pM,Ytr),e(Zr,Ktr),e(Zr,_M),e(_M,nbe),e(nbe,Ztr),e(_M,ear),e(_M,Bz),e(Bz,oar),e(_M,rar),e(Zr,tar),e(Zr,bM),e(bM,sbe),e(sbe,aar),e(bM,nar),e(bM,Iz),e(Iz,sar),e(bM,lar),e(Zr,iar),e(Zr,vM),e(vM,lbe),e(lbe,dar),e(vM,car),e(vM,Nz),e(Nz,mar),e(vM,far),e(Zr,gar),e(Zr,FM),e(FM,ibe),e(ibe,har),e(FM,uar),e(FM,qz),e(qz,par),e(FM,_ar),e(ho,bar),e(ho,TM),e(TM,Far),e(TM,dbe),e(dbe,Tar),e(TM,Mar),e(TM,cbe),e(cbe,Ear),e(ho,Car),M(MM,ho,null),b(m,gje,_),b(m,wd,_),e(wd,EM),e(EM,mbe),M(G8,mbe,null),e(wd,war),e(wd,fbe),e(fbe,Aar),b(m,hje,_),b(m,Wo,_),M(O8,Wo,null),e(Wo,yar),e(Wo,Ad),e(Ad,Lar),e(Ad,jz),e(jz,xar),e(Ad,$ar),e(Ad,Dz),e(Dz,kar),e(Ad,Sar),e(Wo,Rar),e(Wo,V8),e(V8,Par),e(V8,gbe),e(gbe,Bar),e(V8,Iar),e(Wo,Nar),e(Wo,Mt),M(X8,Mt,null),e(Mt,qar),e(Mt,hbe),e(hbe,jar),e(Mt,Dar),e(Mt,yd),e(yd,Gar),e(yd,ube),e(ube,Oar),e(yd,Var),e(yd,Gz),e(Gz,Xar),e(yd,zar),e(Mt,War),M(CM,Mt,null),e(Wo,Qar),e(Wo,uo),M(z8,uo,null),e(uo,Har),e(uo,pbe),e(pbe,Uar),e(uo,Jar),e(uo,Wa),e(Wa,Yar),e(Wa,_be),e(_be,Kar),e(Wa,Zar),e(Wa,bbe),e(bbe,enr),e(Wa,onr),e(Wa,vbe),e(vbe,rnr),e(Wa,tnr),e(uo,anr),e(uo,Ld),e(Ld,wM),e(wM,Fbe),e(Fbe,nnr),e(wM,snr),e(wM,Oz),e(Oz,lnr),e(wM,inr),e(Ld,dnr),e(Ld,AM),e(AM,Tbe),e(Tbe,cnr),e(AM,mnr),e(AM,Vz),e(Vz,fnr),e(AM,gnr),e(Ld,hnr),e(Ld,yM),e(yM,Mbe),e(Mbe,unr),e(yM,pnr),e(yM,Xz),e(Xz,_nr),e(yM,bnr),e(uo,vnr),e(uo,LM),e(LM,Fnr),e(LM,Ebe),e(Ebe,Tnr),e(LM,Mnr),e(LM,Cbe),e(Cbe,Enr),e(uo,Cnr),M(xM,uo,null),b(m,uje,_),b(m,xd,_),e(xd,$M),e($M,wbe),M(W8,wbe,null),e(xd,wnr),e(xd,Abe),e(Abe,Anr),b(m,pje,_),b(m,Qo,_),M(Q8,Qo,null),e(Qo,ynr),e(Qo,$d),e($d,Lnr),e($d,zz),e(zz,xnr),e($d,$nr),e($d,Wz),e(Wz,knr),e($d,Snr),e(Qo,Rnr),e(Qo,H8),e(H8,Pnr),e(H8,ybe),e(ybe,Bnr),e(H8,Inr),e(Qo,Nnr),e(Qo,Et),M(U8,Et,null),e(Et,qnr),e(Et,Lbe),e(Lbe,jnr),e(Et,Dnr),e(Et,kd),e(kd,Gnr),e(kd,xbe),e(xbe,Onr),e(kd,Vnr),e(kd,Qz),e(Qz,Xnr),e(kd,znr),e(Et,Wnr),M(kM,Et,null),e(Qo,Qnr),e(Qo,po),M(J8,po,null),e(po,Hnr),e(po,$be),e($be,Unr),e(po,Jnr),e(po,Qa),e(Qa,Ynr),e(Qa,kbe),e(kbe,Knr),e(Qa,Znr),e(Qa,Sbe),e(Sbe,esr),e(Qa,osr),e(Qa,Rbe),e(Rbe,rsr),e(Qa,tsr),e(po,asr),e(po,Y8),e(Y8,SM),e(SM,Pbe),e(Pbe,nsr),e(SM,ssr),e(SM,Hz),e(Hz,lsr),e(SM,isr),e(Y8,dsr),e(Y8,RM),e(RM,Bbe),e(Bbe,csr),e(RM,msr),e(RM,Uz),e(Uz,fsr),e(RM,gsr),e(po,hsr),e(po,PM),e(PM,usr),e(PM,Ibe),e(Ibe,psr),e(PM,_sr),e(PM,Nbe),e(Nbe,bsr),e(po,vsr),M(BM,po,null),b(m,_je,_),b(m,Sd,_),e(Sd,IM),e(IM,qbe),M(K8,qbe,null),e(Sd,Fsr),e(Sd,jbe),e(jbe,Tsr),b(m,bje,_),b(m,Ho,_),M(Z8,Ho,null),e(Ho,Msr),e(Ho,Rd),e(Rd,Esr),e(Rd,Jz),e(Jz,Csr),e(Rd,wsr),e(Rd,Yz),e(Yz,Asr),e(Rd,ysr),e(Ho,Lsr),e(Ho,e7),e(e7,xsr),e(e7,Dbe),e(Dbe,$sr),e(e7,ksr),e(Ho,Ssr),e(Ho,Ct),M(o7,Ct,null),e(Ct,Rsr),e(Ct,Gbe),e(Gbe,Psr),e(Ct,Bsr),e(Ct,Pd),e(Pd,Isr),e(Pd,Obe),e(Obe,Nsr),e(Pd,qsr),e(Pd,Kz),e(Kz,jsr),e(Pd,Dsr),e(Ct,Gsr),M(NM,Ct,null),e(Ho,Osr),e(Ho,_o),M(r7,_o,null),e(_o,Vsr),e(_o,Vbe),e(Vbe,Xsr),e(_o,zsr),e(_o,Ha),e(Ha,Wsr),e(Ha,Xbe),e(Xbe,Qsr),e(Ha,Hsr),e(Ha,zbe),e(zbe,Usr),e(Ha,Jsr),e(Ha,Wbe),e(Wbe,Ysr),e(Ha,Ksr),e(_o,Zsr),e(_o,Qbe),e(Qbe,qM),e(qM,Hbe),e(Hbe,elr),e(qM,olr),e(qM,Zz),e(Zz,rlr),e(qM,tlr),e(_o,alr),e(_o,jM),e(jM,nlr),e(jM,Ube),e(Ube,slr),e(jM,llr),e(jM,Jbe),e(Jbe,ilr),e(_o,dlr),M(DM,_o,null),b(m,vje,_),b(m,Bd,_),e(Bd,GM),e(GM,Ybe),M(t7,Ybe,null),e(Bd,clr),e(Bd,Kbe),e(Kbe,mlr),b(m,Fje,_),b(m,Uo,_),M(a7,Uo,null),e(Uo,flr),e(Uo,Id),e(Id,glr),e(Id,eW),e(eW,hlr),e(Id,ulr),e(Id,oW),e(oW,plr),e(Id,_lr),e(Uo,blr),e(Uo,n7),e(n7,vlr),e(n7,Zbe),e(Zbe,Flr),e(n7,Tlr),e(Uo,Mlr),e(Uo,wt),M(s7,wt,null),e(wt,Elr),e(wt,e2e),e(e2e,Clr),e(wt,wlr),e(wt,Nd),e(Nd,Alr),e(Nd,o2e),e(o2e,ylr),e(Nd,Llr),e(Nd,rW),e(rW,xlr),e(Nd,$lr),e(wt,klr),M(OM,wt,null),e(Uo,Slr),e(Uo,bo),M(l7,bo,null),e(bo,Rlr),e(bo,r2e),e(r2e,Plr),e(bo,Blr),e(bo,Ua),e(Ua,Ilr),e(Ua,t2e),e(t2e,Nlr),e(Ua,qlr),e(Ua,a2e),e(a2e,jlr),e(Ua,Dlr),e(Ua,n2e),e(n2e,Glr),e(Ua,Olr),e(bo,Vlr),e(bo,Ja),e(Ja,VM),e(VM,s2e),e(s2e,Xlr),e(VM,zlr),e(VM,tW),e(tW,Wlr),e(VM,Qlr),e(Ja,Hlr),e(Ja,XM),e(XM,l2e),e(l2e,Ulr),e(XM,Jlr),e(XM,aW),e(aW,Ylr),e(XM,Klr),e(Ja,Zlr),e(Ja,zM),e(zM,i2e),e(i2e,eir),e(zM,oir),e(zM,nW),e(nW,rir),e(zM,tir),e(Ja,air),e(Ja,WM),e(WM,d2e),e(d2e,nir),e(WM,sir),e(WM,sW),e(sW,lir),e(WM,iir),e(bo,dir),e(bo,QM),e(QM,cir),e(QM,c2e),e(c2e,mir),e(QM,fir),e(QM,m2e),e(m2e,gir),e(bo,hir),M(HM,bo,null),b(m,Tje,_),b(m,qd,_),e(qd,UM),e(UM,f2e),M(i7,f2e,null),e(qd,uir),e(qd,g2e),e(g2e,pir),b(m,Mje,_),b(m,Jo,_),M(d7,Jo,null),e(Jo,_ir),e(Jo,jd),e(jd,bir),e(jd,lW),e(lW,vir),e(jd,Fir),e(jd,iW),e(iW,Tir),e(jd,Mir),e(Jo,Eir),e(Jo,c7),e(c7,Cir),e(c7,h2e),e(h2e,wir),e(c7,Air),e(Jo,yir),e(Jo,At),M(m7,At,null),e(At,Lir),e(At,u2e),e(u2e,xir),e(At,$ir),e(At,Dd),e(Dd,kir),e(Dd,p2e),e(p2e,Sir),e(Dd,Rir),e(Dd,dW),e(dW,Pir),e(Dd,Bir),e(At,Iir),M(JM,At,null),e(Jo,Nir),e(Jo,vo),M(f7,vo,null),e(vo,qir),e(vo,_2e),e(_2e,jir),e(vo,Dir),e(vo,Ya),e(Ya,Gir),e(Ya,b2e),e(b2e,Oir),e(Ya,Vir),e(Ya,v2e),e(v2e,Xir),e(Ya,zir),e(Ya,F2e),e(F2e,Wir),e(Ya,Qir),e(vo,Hir),e(vo,T2e),e(T2e,YM),e(YM,M2e),e(M2e,Uir),e(YM,Jir),e(YM,cW),e(cW,Yir),e(YM,Kir),e(vo,Zir),e(vo,KM),e(KM,edr),e(KM,E2e),e(E2e,odr),e(KM,rdr),e(KM,C2e),e(C2e,tdr),e(vo,adr),M(ZM,vo,null),b(m,Eje,_),b(m,Gd,_),e(Gd,e4),e(e4,w2e),M(g7,w2e,null),e(Gd,ndr),e(Gd,A2e),e(A2e,sdr),b(m,Cje,_),b(m,Yo,_),M(h7,Yo,null),e(Yo,ldr),e(Yo,Od),e(Od,idr),e(Od,mW),e(mW,ddr),e(Od,cdr),e(Od,fW),e(fW,mdr),e(Od,fdr),e(Yo,gdr),e(Yo,u7),e(u7,hdr),e(u7,y2e),e(y2e,udr),e(u7,pdr),e(Yo,_dr),e(Yo,yt),M(p7,yt,null),e(yt,bdr),e(yt,L2e),e(L2e,vdr),e(yt,Fdr),e(yt,Vd),e(Vd,Tdr),e(Vd,x2e),e(x2e,Mdr),e(Vd,Edr),e(Vd,gW),e(gW,Cdr),e(Vd,wdr),e(yt,Adr),M(o4,yt,null),e(Yo,ydr),e(Yo,wr),M(_7,wr,null),e(wr,Ldr),e(wr,$2e),e($2e,xdr),e(wr,$dr),e(wr,Ka),e(Ka,kdr),e(Ka,k2e),e(k2e,Sdr),e(Ka,Rdr),e(Ka,S2e),e(S2e,Pdr),e(Ka,Bdr),e(Ka,R2e),e(R2e,Idr),e(Ka,Ndr),e(wr,qdr),e(wr,q),e(q,r4),e(r4,P2e),e(P2e,jdr),e(r4,Ddr),e(r4,hW),e(hW,Gdr),e(r4,Odr),e(q,Vdr),e(q,t4),e(t4,B2e),e(B2e,Xdr),e(t4,zdr),e(t4,uW),e(uW,Wdr),e(t4,Qdr),e(q,Hdr),e(q,a4),e(a4,I2e),e(I2e,Udr),e(a4,Jdr),e(a4,pW),e(pW,Ydr),e(a4,Kdr),e(q,Zdr),e(q,n4),e(n4,N2e),e(N2e,ecr),e(n4,ocr),e(n4,_W),e(_W,rcr),e(n4,tcr),e(q,acr),e(q,s4),e(s4,q2e),e(q2e,ncr),e(s4,scr),e(s4,bW),e(bW,lcr),e(s4,icr),e(q,dcr),e(q,l4),e(l4,j2e),e(j2e,ccr),e(l4,mcr),e(l4,vW),e(vW,fcr),e(l4,gcr),e(q,hcr),e(q,i4),e(i4,D2e),e(D2e,ucr),e(i4,pcr),e(i4,FW),e(FW,_cr),e(i4,bcr),e(q,vcr),e(q,d4),e(d4,G2e),e(G2e,Fcr),e(d4,Tcr),e(d4,TW),e(TW,Mcr),e(d4,Ecr),e(q,Ccr),e(q,c4),e(c4,O2e),e(O2e,wcr),e(c4,Acr),e(c4,MW),e(MW,ycr),e(c4,Lcr),e(q,xcr),e(q,m4),e(m4,V2e),e(V2e,$cr),e(m4,kcr),e(m4,EW),e(EW,Scr),e(m4,Rcr),e(q,Pcr),e(q,f4),e(f4,X2e),e(X2e,Bcr),e(f4,Icr),e(f4,CW),e(CW,Ncr),e(f4,qcr),e(q,jcr),e(q,g4),e(g4,z2e),e(z2e,Dcr),e(g4,Gcr),e(g4,wW),e(wW,Ocr),e(g4,Vcr),e(q,Xcr),e(q,h4),e(h4,W2e),e(W2e,zcr),e(h4,Wcr),e(h4,AW),e(AW,Qcr),e(h4,Hcr),e(q,Ucr),e(q,u4),e(u4,Q2e),e(Q2e,Jcr),e(u4,Ycr),e(u4,yW),e(yW,Kcr),e(u4,Zcr),e(q,emr),e(q,p4),e(p4,H2e),e(H2e,omr),e(p4,rmr),e(p4,LW),e(LW,tmr),e(p4,amr),e(q,nmr),e(q,_4),e(_4,U2e),e(U2e,smr),e(_4,lmr),e(_4,xW),e(xW,imr),e(_4,dmr),e(q,cmr),e(q,b4),e(b4,J2e),e(J2e,mmr),e(b4,fmr),e(b4,$W),e($W,gmr),e(b4,hmr),e(q,umr),e(q,Is),e(Is,Y2e),e(Y2e,pmr),e(Is,_mr),e(Is,kW),e(kW,bmr),e(Is,vmr),e(Is,SW),e(SW,Fmr),e(Is,Tmr),e(q,Mmr),e(q,v4),e(v4,K2e),e(K2e,Emr),e(v4,Cmr),e(v4,RW),e(RW,wmr),e(v4,Amr),e(q,ymr),e(q,F4),e(F4,Z2e),e(Z2e,Lmr),e(F4,xmr),e(F4,PW),e(PW,$mr),e(F4,kmr),e(q,Smr),e(q,T4),e(T4,eve),e(eve,Rmr),e(T4,Pmr),e(T4,BW),e(BW,Bmr),e(T4,Imr),e(q,Nmr),e(q,M4),e(M4,ove),e(ove,qmr),e(M4,jmr),e(M4,IW),e(IW,Dmr),e(M4,Gmr),e(q,Omr),e(q,E4),e(E4,rve),e(rve,Vmr),e(E4,Xmr),e(E4,NW),e(NW,zmr),e(E4,Wmr),e(q,Qmr),e(q,C4),e(C4,tve),e(tve,Hmr),e(C4,Umr),e(C4,qW),e(qW,Jmr),e(C4,Ymr),e(q,Kmr),e(q,w4),e(w4,ave),e(ave,Zmr),e(w4,efr),e(w4,jW),e(jW,ofr),e(w4,rfr),e(q,tfr),e(q,A4),e(A4,nve),e(nve,afr),e(A4,nfr),e(A4,DW),e(DW,sfr),e(A4,lfr),e(q,ifr),e(q,y4),e(y4,sve),e(sve,dfr),e(y4,cfr),e(y4,GW),e(GW,mfr),e(y4,ffr),e(q,gfr),e(q,L4),e(L4,lve),e(lve,hfr),e(L4,ufr),e(L4,OW),e(OW,pfr),e(L4,_fr),e(q,bfr),e(q,x4),e(x4,ive),e(ive,vfr),e(x4,Ffr),e(x4,VW),e(VW,Tfr),e(x4,Mfr),e(q,Efr),e(q,$4),e($4,dve),e(dve,Cfr),e($4,wfr),e($4,XW),e(XW,Afr),e($4,yfr),e(q,Lfr),e(q,k4),e(k4,cve),e(cve,xfr),e(k4,$fr),e(k4,zW),e(zW,kfr),e(k4,Sfr),e(q,Rfr),e(q,S4),e(S4,mve),e(mve,Pfr),e(S4,Bfr),e(S4,WW),e(WW,Ifr),e(S4,Nfr),e(q,qfr),e(q,R4),e(R4,fve),e(fve,jfr),e(R4,Dfr),e(R4,QW),e(QW,Gfr),e(R4,Ofr),e(q,Vfr),e(q,P4),e(P4,gve),e(gve,Xfr),e(P4,zfr),e(P4,HW),e(HW,Wfr),e(P4,Qfr),e(q,Hfr),e(q,B4),e(B4,hve),e(hve,Ufr),e(B4,Jfr),e(B4,UW),e(UW,Yfr),e(B4,Kfr),e(q,Zfr),e(q,I4),e(I4,uve),e(uve,egr),e(I4,ogr),e(I4,JW),e(JW,rgr),e(I4,tgr),e(q,agr),e(q,N4),e(N4,pve),e(pve,ngr),e(N4,sgr),e(N4,YW),e(YW,lgr),e(N4,igr),e(q,dgr),e(q,q4),e(q4,_ve),e(_ve,cgr),e(q4,mgr),e(q4,KW),e(KW,fgr),e(q4,ggr),e(q,hgr),e(q,j4),e(j4,bve),e(bve,ugr),e(j4,pgr),e(j4,ZW),e(ZW,_gr),e(j4,bgr),e(q,vgr),e(q,D4),e(D4,vve),e(vve,Fgr),e(D4,Tgr),e(D4,eQ),e(eQ,Mgr),e(D4,Egr),e(q,Cgr),e(q,G4),e(G4,Fve),e(Fve,wgr),e(G4,Agr),e(G4,oQ),e(oQ,ygr),e(G4,Lgr),e(q,xgr),e(q,O4),e(O4,Tve),e(Tve,$gr),e(O4,kgr),e(O4,rQ),e(rQ,Sgr),e(O4,Rgr),e(q,Pgr),e(q,V4),e(V4,Mve),e(Mve,Bgr),e(V4,Igr),e(V4,tQ),e(tQ,Ngr),e(V4,qgr),e(q,jgr),e(q,X4),e(X4,Eve),e(Eve,Dgr),e(X4,Ggr),e(X4,aQ),e(aQ,Ogr),e(X4,Vgr),e(q,Xgr),e(q,z4),e(z4,Cve),e(Cve,zgr),e(z4,Wgr),e(z4,nQ),e(nQ,Qgr),e(z4,Hgr),e(q,Ugr),e(q,W4),e(W4,wve),e(wve,Jgr),e(W4,Ygr),e(W4,sQ),e(sQ,Kgr),e(W4,Zgr),e(q,ehr),e(q,Q4),e(Q4,Ave),e(Ave,ohr),e(Q4,rhr),e(Q4,lQ),e(lQ,thr),e(Q4,ahr),e(wr,nhr),M(H4,wr,null),b(m,wje,_),b(m,Xd,_),e(Xd,U4),e(U4,yve),M(b7,yve,null),e(Xd,shr),e(Xd,Lve),e(Lve,lhr),b(m,Aje,_),b(m,Ko,_),M(v7,Ko,null),e(Ko,ihr),e(Ko,zd),e(zd,dhr),e(zd,iQ),e(iQ,chr),e(zd,mhr),e(zd,dQ),e(dQ,fhr),e(zd,ghr),e(Ko,hhr),e(Ko,F7),e(F7,uhr),e(F7,xve),e(xve,phr),e(F7,_hr),e(Ko,bhr),e(Ko,Lt),M(T7,Lt,null),e(Lt,vhr),e(Lt,$ve),e($ve,Fhr),e(Lt,Thr),e(Lt,Wd),e(Wd,Mhr),e(Wd,kve),e(kve,Ehr),e(Wd,Chr),e(Wd,cQ),e(cQ,whr),e(Wd,Ahr),e(Lt,yhr),M(J4,Lt,null),e(Ko,Lhr),e(Ko,Ar),M(M7,Ar,null),e(Ar,xhr),e(Ar,Sve),e(Sve,$hr),e(Ar,khr),e(Ar,Za),e(Za,Shr),e(Za,Rve),e(Rve,Rhr),e(Za,Phr),e(Za,Pve),e(Pve,Bhr),e(Za,Ihr),e(Za,Bve),e(Bve,Nhr),e(Za,qhr),e(Ar,jhr),e(Ar,se),e(se,Y4),e(Y4,Ive),e(Ive,Dhr),e(Y4,Ghr),e(Y4,mQ),e(mQ,Ohr),e(Y4,Vhr),e(se,Xhr),e(se,K4),e(K4,Nve),e(Nve,zhr),e(K4,Whr),e(K4,fQ),e(fQ,Qhr),e(K4,Hhr),e(se,Uhr),e(se,Z4),e(Z4,qve),e(qve,Jhr),e(Z4,Yhr),e(Z4,gQ),e(gQ,Khr),e(Z4,Zhr),e(se,eur),e(se,eE),e(eE,jve),e(jve,our),e(eE,rur),e(eE,hQ),e(hQ,tur),e(eE,aur),e(se,nur),e(se,oE),e(oE,Dve),e(Dve,sur),e(oE,lur),e(oE,uQ),e(uQ,iur),e(oE,dur),e(se,cur),e(se,rE),e(rE,Gve),e(Gve,mur),e(rE,fur),e(rE,pQ),e(pQ,gur),e(rE,hur),e(se,uur),e(se,tE),e(tE,Ove),e(Ove,pur),e(tE,_ur),e(tE,_Q),e(_Q,bur),e(tE,vur),e(se,Fur),e(se,aE),e(aE,Vve),e(Vve,Tur),e(aE,Mur),e(aE,bQ),e(bQ,Eur),e(aE,Cur),e(se,wur),e(se,nE),e(nE,Xve),e(Xve,Aur),e(nE,yur),e(nE,vQ),e(vQ,Lur),e(nE,xur),e(se,$ur),e(se,sE),e(sE,zve),e(zve,kur),e(sE,Sur),e(sE,FQ),e(FQ,Rur),e(sE,Pur),e(se,Bur),e(se,lE),e(lE,Wve),e(Wve,Iur),e(lE,Nur),e(lE,TQ),e(TQ,qur),e(lE,jur),e(se,Dur),e(se,iE),e(iE,Qve),e(Qve,Gur),e(iE,Our),e(iE,MQ),e(MQ,Vur),e(iE,Xur),e(se,zur),e(se,dE),e(dE,Hve),e(Hve,Wur),e(dE,Qur),e(dE,EQ),e(EQ,Hur),e(dE,Uur),e(se,Jur),e(se,cE),e(cE,Uve),e(Uve,Yur),e(cE,Kur),e(cE,CQ),e(CQ,Zur),e(cE,epr),e(se,opr),e(se,mE),e(mE,Jve),e(Jve,rpr),e(mE,tpr),e(mE,wQ),e(wQ,apr),e(mE,npr),e(se,spr),e(se,fE),e(fE,Yve),e(Yve,lpr),e(fE,ipr),e(fE,AQ),e(AQ,dpr),e(fE,cpr),e(se,mpr),e(se,gE),e(gE,Kve),e(Kve,fpr),e(gE,gpr),e(gE,yQ),e(yQ,hpr),e(gE,upr),e(se,ppr),e(se,hE),e(hE,Zve),e(Zve,_pr),e(hE,bpr),e(hE,LQ),e(LQ,vpr),e(hE,Fpr),e(se,Tpr),e(se,uE),e(uE,eFe),e(eFe,Mpr),e(uE,Epr),e(uE,xQ),e(xQ,Cpr),e(uE,wpr),e(se,Apr),e(se,pE),e(pE,oFe),e(oFe,ypr),e(pE,Lpr),e(pE,$Q),e($Q,xpr),e(pE,$pr),e(se,kpr),e(se,_E),e(_E,rFe),e(rFe,Spr),e(_E,Rpr),e(_E,kQ),e(kQ,Ppr),e(_E,Bpr),e(se,Ipr),e(se,bE),e(bE,tFe),e(tFe,Npr),e(bE,qpr),e(bE,SQ),e(SQ,jpr),e(bE,Dpr),e(se,Gpr),e(se,vE),e(vE,aFe),e(aFe,Opr),e(vE,Vpr),e(vE,RQ),e(RQ,Xpr),e(vE,zpr),e(Ar,Wpr),M(FE,Ar,null),b(m,yje,_),b(m,Qd,_),e(Qd,TE),e(TE,nFe),M(E7,nFe,null),e(Qd,Qpr),e(Qd,sFe),e(sFe,Hpr),b(m,Lje,_),b(m,Zo,_),M(C7,Zo,null),e(Zo,Upr),e(Zo,Hd),e(Hd,Jpr),e(Hd,PQ),e(PQ,Ypr),e(Hd,Kpr),e(Hd,BQ),e(BQ,Zpr),e(Hd,e_r),e(Zo,o_r),e(Zo,w7),e(w7,r_r),e(w7,lFe),e(lFe,t_r),e(w7,a_r),e(Zo,n_r),e(Zo,xt),M(A7,xt,null),e(xt,s_r),e(xt,iFe),e(iFe,l_r),e(xt,i_r),e(xt,Ud),e(Ud,d_r),e(Ud,dFe),e(dFe,c_r),e(Ud,m_r),e(Ud,IQ),e(IQ,f_r),e(Ud,g_r),e(xt,h_r),M(ME,xt,null),e(Zo,u_r),e(Zo,yr),M(y7,yr,null),e(yr,p_r),e(yr,cFe),e(cFe,__r),e(yr,b_r),e(yr,en),e(en,v_r),e(en,mFe),e(mFe,F_r),e(en,T_r),e(en,fFe),e(fFe,M_r),e(en,E_r),e(en,gFe),e(gFe,C_r),e(en,w_r),e(yr,A_r),e(yr,Te),e(Te,EE),e(EE,hFe),e(hFe,y_r),e(EE,L_r),e(EE,NQ),e(NQ,x_r),e(EE,$_r),e(Te,k_r),e(Te,CE),e(CE,uFe),e(uFe,S_r),e(CE,R_r),e(CE,qQ),e(qQ,P_r),e(CE,B_r),e(Te,I_r),e(Te,wE),e(wE,pFe),e(pFe,N_r),e(wE,q_r),e(wE,jQ),e(jQ,j_r),e(wE,D_r),e(Te,G_r),e(Te,AE),e(AE,_Fe),e(_Fe,O_r),e(AE,V_r),e(AE,DQ),e(DQ,X_r),e(AE,z_r),e(Te,W_r),e(Te,yE),e(yE,bFe),e(bFe,Q_r),e(yE,H_r),e(yE,GQ),e(GQ,U_r),e(yE,J_r),e(Te,Y_r),e(Te,LE),e(LE,vFe),e(vFe,K_r),e(LE,Z_r),e(LE,OQ),e(OQ,ebr),e(LE,obr),e(Te,rbr),e(Te,xE),e(xE,FFe),e(FFe,tbr),e(xE,abr),e(xE,VQ),e(VQ,nbr),e(xE,sbr),e(Te,lbr),e(Te,$E),e($E,TFe),e(TFe,ibr),e($E,dbr),e($E,XQ),e(XQ,cbr),e($E,mbr),e(Te,fbr),e(Te,kE),e(kE,MFe),e(MFe,gbr),e(kE,hbr),e(kE,zQ),e(zQ,ubr),e(kE,pbr),e(Te,_br),e(Te,SE),e(SE,EFe),e(EFe,bbr),e(SE,vbr),e(SE,WQ),e(WQ,Fbr),e(SE,Tbr),e(Te,Mbr),e(Te,RE),e(RE,CFe),e(CFe,Ebr),e(RE,Cbr),e(RE,QQ),e(QQ,wbr),e(RE,Abr),e(Te,ybr),e(Te,PE),e(PE,wFe),e(wFe,Lbr),e(PE,xbr),e(PE,HQ),e(HQ,$br),e(PE,kbr),e(Te,Sbr),e(Te,BE),e(BE,AFe),e(AFe,Rbr),e(BE,Pbr),e(BE,UQ),e(UQ,Bbr),e(BE,Ibr),e(yr,Nbr),M(IE,yr,null),b(m,xje,_),b(m,Jd,_),e(Jd,NE),e(NE,yFe),M(L7,yFe,null),e(Jd,qbr),e(Jd,LFe),e(LFe,jbr),b(m,$je,_),b(m,er,_),M(x7,er,null),e(er,Dbr),e(er,Yd),e(Yd,Gbr),e(Yd,JQ),e(JQ,Obr),e(Yd,Vbr),e(Yd,YQ),e(YQ,Xbr),e(Yd,zbr),e(er,Wbr),e(er,$7),e($7,Qbr),e($7,xFe),e(xFe,Hbr),e($7,Ubr),e(er,Jbr),e(er,$t),M(k7,$t,null),e($t,Ybr),e($t,$Fe),e($Fe,Kbr),e($t,Zbr),e($t,Kd),e(Kd,e2r),e(Kd,kFe),e(kFe,o2r),e(Kd,r2r),e(Kd,KQ),e(KQ,t2r),e(Kd,a2r),e($t,n2r),M(qE,$t,null),e(er,s2r),e(er,Lr),M(S7,Lr,null),e(Lr,l2r),e(Lr,SFe),e(SFe,i2r),e(Lr,d2r),e(Lr,on),e(on,c2r),e(on,RFe),e(RFe,m2r),e(on,f2r),e(on,PFe),e(PFe,g2r),e(on,h2r),e(on,BFe),e(BFe,u2r),e(on,p2r),e(Lr,_2r),e(Lr,rn),e(rn,jE),e(jE,IFe),e(IFe,b2r),e(jE,v2r),e(jE,ZQ),e(ZQ,F2r),e(jE,T2r),e(rn,M2r),e(rn,DE),e(DE,NFe),e(NFe,E2r),e(DE,C2r),e(DE,eH),e(eH,w2r),e(DE,A2r),e(rn,y2r),e(rn,GE),e(GE,qFe),e(qFe,L2r),e(GE,x2r),e(GE,oH),e(oH,$2r),e(GE,k2r),e(rn,S2r),e(rn,OE),e(OE,jFe),e(jFe,R2r),e(OE,P2r),e(OE,rH),e(rH,B2r),e(OE,I2r),e(Lr,N2r),M(VE,Lr,null),b(m,kje,_),b(m,Zd,_),e(Zd,XE),e(XE,DFe),M(R7,DFe,null),e(Zd,q2r),e(Zd,GFe),e(GFe,j2r),b(m,Sje,_),b(m,or,_),M(P7,or,null),e(or,D2r),e(or,ec),e(ec,G2r),e(ec,tH),e(tH,O2r),e(ec,V2r),e(ec,aH),e(aH,X2r),e(ec,z2r),e(or,W2r),e(or,B7),e(B7,Q2r),e(B7,OFe),e(OFe,H2r),e(B7,U2r),e(or,J2r),e(or,kt),M(I7,kt,null),e(kt,Y2r),e(kt,VFe),e(VFe,K2r),e(kt,Z2r),e(kt,oc),e(oc,evr),e(oc,XFe),e(XFe,ovr),e(oc,rvr),e(oc,nH),e(nH,tvr),e(oc,avr),e(kt,nvr),M(zE,kt,null),e(or,svr),e(or,xr),M(N7,xr,null),e(xr,lvr),e(xr,zFe),e(zFe,ivr),e(xr,dvr),e(xr,tn),e(tn,cvr),e(tn,WFe),e(WFe,mvr),e(tn,fvr),e(tn,QFe),e(QFe,gvr),e(tn,hvr),e(tn,HFe),e(HFe,uvr),e(tn,pvr),e(xr,_vr),e(xr,ie),e(ie,WE),e(WE,UFe),e(UFe,bvr),e(WE,vvr),e(WE,sH),e(sH,Fvr),e(WE,Tvr),e(ie,Mvr),e(ie,QE),e(QE,JFe),e(JFe,Evr),e(QE,Cvr),e(QE,lH),e(lH,wvr),e(QE,Avr),e(ie,yvr),e(ie,HE),e(HE,YFe),e(YFe,Lvr),e(HE,xvr),e(HE,iH),e(iH,$vr),e(HE,kvr),e(ie,Svr),e(ie,UE),e(UE,KFe),e(KFe,Rvr),e(UE,Pvr),e(UE,dH),e(dH,Bvr),e(UE,Ivr),e(ie,Nvr),e(ie,JE),e(JE,ZFe),e(ZFe,qvr),e(JE,jvr),e(JE,cH),e(cH,Dvr),e(JE,Gvr),e(ie,Ovr),e(ie,YE),e(YE,e1e),e(e1e,Vvr),e(YE,Xvr),e(YE,mH),e(mH,zvr),e(YE,Wvr),e(ie,Qvr),e(ie,KE),e(KE,o1e),e(o1e,Hvr),e(KE,Uvr),e(KE,fH),e(fH,Jvr),e(KE,Yvr),e(ie,Kvr),e(ie,ZE),e(ZE,r1e),e(r1e,Zvr),e(ZE,eFr),e(ZE,gH),e(gH,oFr),e(ZE,rFr),e(ie,tFr),e(ie,eC),e(eC,t1e),e(t1e,aFr),e(eC,nFr),e(eC,hH),e(hH,sFr),e(eC,lFr),e(ie,iFr),e(ie,oC),e(oC,a1e),e(a1e,dFr),e(oC,cFr),e(oC,uH),e(uH,mFr),e(oC,fFr),e(ie,gFr),e(ie,rC),e(rC,n1e),e(n1e,hFr),e(rC,uFr),e(rC,pH),e(pH,pFr),e(rC,_Fr),e(ie,bFr),e(ie,tC),e(tC,s1e),e(s1e,vFr),e(tC,FFr),e(tC,_H),e(_H,TFr),e(tC,MFr),e(ie,EFr),e(ie,aC),e(aC,l1e),e(l1e,CFr),e(aC,wFr),e(aC,bH),e(bH,AFr),e(aC,yFr),e(ie,LFr),e(ie,nC),e(nC,i1e),e(i1e,xFr),e(nC,$Fr),e(nC,vH),e(vH,kFr),e(nC,SFr),e(ie,RFr),e(ie,sC),e(sC,d1e),e(d1e,PFr),e(sC,BFr),e(sC,FH),e(FH,IFr),e(sC,NFr),e(ie,qFr),e(ie,lC),e(lC,c1e),e(c1e,jFr),e(lC,DFr),e(lC,TH),e(TH,GFr),e(lC,OFr),e(ie,VFr),e(ie,iC),e(iC,m1e),e(m1e,XFr),e(iC,zFr),e(iC,MH),e(MH,WFr),e(iC,QFr),e(ie,HFr),e(ie,dC),e(dC,f1e),e(f1e,UFr),e(dC,JFr),e(dC,EH),e(EH,YFr),e(dC,KFr),e(ie,ZFr),e(ie,cC),e(cC,g1e),e(g1e,e1r),e(cC,o1r),e(cC,CH),e(CH,r1r),e(cC,t1r),e(ie,a1r),e(ie,mC),e(mC,h1e),e(h1e,n1r),e(mC,s1r),e(mC,wH),e(wH,l1r),e(mC,i1r),e(xr,d1r),M(fC,xr,null),b(m,Rje,_),b(m,rc,_),e(rc,gC),e(gC,u1e),M(q7,u1e,null),e(rc,c1r),e(rc,p1e),e(p1e,m1r),b(m,Pje,_),b(m,rr,_),M(j7,rr,null),e(rr,f1r),e(rr,tc),e(tc,g1r),e(tc,AH),e(AH,h1r),e(tc,u1r),e(tc,yH),e(yH,p1r),e(tc,_1r),e(rr,b1r),e(rr,D7),e(D7,v1r),e(D7,_1e),e(_1e,F1r),e(D7,T1r),e(rr,M1r),e(rr,St),M(G7,St,null),e(St,E1r),e(St,b1e),e(b1e,C1r),e(St,w1r),e(St,ac),e(ac,A1r),e(ac,v1e),e(v1e,y1r),e(ac,L1r),e(ac,LH),e(LH,x1r),e(ac,$1r),e(St,k1r),M(hC,St,null),e(rr,S1r),e(rr,$r),M(O7,$r,null),e($r,R1r),e($r,F1e),e(F1e,P1r),e($r,B1r),e($r,an),e(an,I1r),e(an,T1e),e(T1e,N1r),e(an,q1r),e(an,M1e),e(M1e,j1r),e(an,D1r),e(an,E1e),e(E1e,G1r),e(an,O1r),e($r,V1r),e($r,ye),e(ye,uC),e(uC,C1e),e(C1e,X1r),e(uC,z1r),e(uC,xH),e(xH,W1r),e(uC,Q1r),e(ye,H1r),e(ye,pC),e(pC,w1e),e(w1e,U1r),e(pC,J1r),e(pC,$H),e($H,Y1r),e(pC,K1r),e(ye,Z1r),e(ye,_C),e(_C,A1e),e(A1e,eTr),e(_C,oTr),e(_C,kH),e(kH,rTr),e(_C,tTr),e(ye,aTr),e(ye,bC),e(bC,y1e),e(y1e,nTr),e(bC,sTr),e(bC,SH),e(SH,lTr),e(bC,iTr),e(ye,dTr),e(ye,vC),e(vC,L1e),e(L1e,cTr),e(vC,mTr),e(vC,RH),e(RH,fTr),e(vC,gTr),e(ye,hTr),e(ye,FC),e(FC,x1e),e(x1e,uTr),e(FC,pTr),e(FC,PH),e(PH,_Tr),e(FC,bTr),e(ye,vTr),e(ye,TC),e(TC,$1e),e($1e,FTr),e(TC,TTr),e(TC,BH),e(BH,MTr),e(TC,ETr),e(ye,CTr),e(ye,MC),e(MC,k1e),e(k1e,wTr),e(MC,ATr),e(MC,IH),e(IH,yTr),e(MC,LTr),e(ye,xTr),e(ye,EC),e(EC,S1e),e(S1e,$Tr),e(EC,kTr),e(EC,NH),e(NH,STr),e(EC,RTr),e(ye,PTr),e(ye,CC),e(CC,R1e),e(R1e,BTr),e(CC,ITr),e(CC,qH),e(qH,NTr),e(CC,qTr),e($r,jTr),M(wC,$r,null),b(m,Bje,_),b(m,nc,_),e(nc,AC),e(AC,P1e),M(V7,P1e,null),e(nc,DTr),e(nc,B1e),e(B1e,GTr),b(m,Ije,_),b(m,tr,_),M(X7,tr,null),e(tr,OTr),e(tr,sc),e(sc,VTr),e(sc,jH),e(jH,XTr),e(sc,zTr),e(sc,DH),e(DH,WTr),e(sc,QTr),e(tr,HTr),e(tr,z7),e(z7,UTr),e(z7,I1e),e(I1e,JTr),e(z7,YTr),e(tr,KTr),e(tr,Rt),M(W7,Rt,null),e(Rt,ZTr),e(Rt,N1e),e(N1e,eMr),e(Rt,oMr),e(Rt,lc),e(lc,rMr),e(lc,q1e),e(q1e,tMr),e(lc,aMr),e(lc,GH),e(GH,nMr),e(lc,sMr),e(Rt,lMr),M(yC,Rt,null),e(tr,iMr),e(tr,kr),M(Q7,kr,null),e(kr,dMr),e(kr,j1e),e(j1e,cMr),e(kr,mMr),e(kr,nn),e(nn,fMr),e(nn,D1e),e(D1e,gMr),e(nn,hMr),e(nn,G1e),e(G1e,uMr),e(nn,pMr),e(nn,O1e),e(O1e,_Mr),e(nn,bMr),e(kr,vMr),e(kr,oe),e(oe,LC),e(LC,V1e),e(V1e,FMr),e(LC,TMr),e(LC,OH),e(OH,MMr),e(LC,EMr),e(oe,CMr),e(oe,xC),e(xC,X1e),e(X1e,wMr),e(xC,AMr),e(xC,VH),e(VH,yMr),e(xC,LMr),e(oe,xMr),e(oe,$C),e($C,z1e),e(z1e,$Mr),e($C,kMr),e($C,XH),e(XH,SMr),e($C,RMr),e(oe,PMr),e(oe,kC),e(kC,W1e),e(W1e,BMr),e(kC,IMr),e(kC,zH),e(zH,NMr),e(kC,qMr),e(oe,jMr),e(oe,SC),e(SC,Q1e),e(Q1e,DMr),e(SC,GMr),e(SC,WH),e(WH,OMr),e(SC,VMr),e(oe,XMr),e(oe,RC),e(RC,H1e),e(H1e,zMr),e(RC,WMr),e(RC,QH),e(QH,QMr),e(RC,HMr),e(oe,UMr),e(oe,PC),e(PC,U1e),e(U1e,JMr),e(PC,YMr),e(PC,HH),e(HH,KMr),e(PC,ZMr),e(oe,e4r),e(oe,BC),e(BC,J1e),e(J1e,o4r),e(BC,r4r),e(BC,UH),e(UH,t4r),e(BC,a4r),e(oe,n4r),e(oe,IC),e(IC,Y1e),e(Y1e,s4r),e(IC,l4r),e(IC,JH),e(JH,i4r),e(IC,d4r),e(oe,c4r),e(oe,NC),e(NC,K1e),e(K1e,m4r),e(NC,f4r),e(NC,YH),e(YH,g4r),e(NC,h4r),e(oe,u4r),e(oe,qC),e(qC,Z1e),e(Z1e,p4r),e(qC,_4r),e(qC,KH),e(KH,b4r),e(qC,v4r),e(oe,F4r),e(oe,jC),e(jC,eTe),e(eTe,T4r),e(jC,M4r),e(jC,ZH),e(ZH,E4r),e(jC,C4r),e(oe,w4r),e(oe,DC),e(DC,oTe),e(oTe,A4r),e(DC,y4r),e(DC,eU),e(eU,L4r),e(DC,x4r),e(oe,$4r),e(oe,GC),e(GC,rTe),e(rTe,k4r),e(GC,S4r),e(GC,oU),e(oU,R4r),e(GC,P4r),e(oe,B4r),e(oe,OC),e(OC,tTe),e(tTe,I4r),e(OC,N4r),e(OC,rU),e(rU,q4r),e(OC,j4r),e(oe,D4r),e(oe,VC),e(VC,aTe),e(aTe,G4r),e(VC,O4r),e(VC,tU),e(tU,V4r),e(VC,X4r),e(oe,z4r),e(oe,XC),e(XC,nTe),e(nTe,W4r),e(XC,Q4r),e(XC,aU),e(aU,H4r),e(XC,U4r),e(oe,J4r),e(oe,zC),e(zC,sTe),e(sTe,Y4r),e(zC,K4r),e(zC,nU),e(nU,Z4r),e(zC,eEr),e(oe,oEr),e(oe,WC),e(WC,lTe),e(lTe,rEr),e(WC,tEr),e(WC,sU),e(sU,aEr),e(WC,nEr),e(oe,sEr),e(oe,QC),e(QC,iTe),e(iTe,lEr),e(QC,iEr),e(QC,lU),e(lU,dEr),e(QC,cEr),e(oe,mEr),e(oe,HC),e(HC,dTe),e(dTe,fEr),e(HC,gEr),e(HC,iU),e(iU,hEr),e(HC,uEr),e(oe,pEr),e(oe,UC),e(UC,cTe),e(cTe,_Er),e(UC,bEr),e(UC,dU),e(dU,vEr),e(UC,FEr),e(oe,TEr),e(oe,JC),e(JC,mTe),e(mTe,MEr),e(JC,EEr),e(JC,cU),e(cU,CEr),e(JC,wEr),e(oe,AEr),e(oe,YC),e(YC,fTe),e(fTe,yEr),e(YC,LEr),e(YC,mU),e(mU,xEr),e(YC,$Er),e(oe,kEr),e(oe,KC),e(KC,gTe),e(gTe,SEr),e(KC,REr),e(KC,fU),e(fU,PEr),e(KC,BEr),e(oe,IEr),e(oe,ZC),e(ZC,hTe),e(hTe,NEr),e(ZC,qEr),e(ZC,gU),e(gU,jEr),e(ZC,DEr),e(kr,GEr),M(e5,kr,null),b(m,Nje,_),b(m,ic,_),e(ic,o5),e(o5,uTe),M(H7,uTe,null),e(ic,OEr),e(ic,pTe),e(pTe,VEr),b(m,qje,_),b(m,ar,_),M(U7,ar,null),e(ar,XEr),e(ar,dc),e(dc,zEr),e(dc,hU),e(hU,WEr),e(dc,QEr),e(dc,uU),e(uU,HEr),e(dc,UEr),e(ar,JEr),e(ar,J7),e(J7,YEr),e(J7,_Te),e(_Te,KEr),e(J7,ZEr),e(ar,eCr),e(ar,Pt),M(Y7,Pt,null),e(Pt,oCr),e(Pt,bTe),e(bTe,rCr),e(Pt,tCr),e(Pt,cc),e(cc,aCr),e(cc,vTe),e(vTe,nCr),e(cc,sCr),e(cc,pU),e(pU,lCr),e(cc,iCr),e(Pt,dCr),M(r5,Pt,null),e(ar,cCr),e(ar,Sr),M(K7,Sr,null),e(Sr,mCr),e(Sr,FTe),e(FTe,fCr),e(Sr,gCr),e(Sr,sn),e(sn,hCr),e(sn,TTe),e(TTe,uCr),e(sn,pCr),e(sn,MTe),e(MTe,_Cr),e(sn,bCr),e(sn,ETe),e(ETe,vCr),e(sn,FCr),e(Sr,TCr),e(Sr,ue),e(ue,t5),e(t5,CTe),e(CTe,MCr),e(t5,ECr),e(t5,_U),e(_U,CCr),e(t5,wCr),e(ue,ACr),e(ue,a5),e(a5,wTe),e(wTe,yCr),e(a5,LCr),e(a5,bU),e(bU,xCr),e(a5,$Cr),e(ue,kCr),e(ue,n5),e(n5,ATe),e(ATe,SCr),e(n5,RCr),e(n5,vU),e(vU,PCr),e(n5,BCr),e(ue,ICr),e(ue,s5),e(s5,yTe),e(yTe,NCr),e(s5,qCr),e(s5,FU),e(FU,jCr),e(s5,DCr),e(ue,GCr),e(ue,l5),e(l5,LTe),e(LTe,OCr),e(l5,VCr),e(l5,TU),e(TU,XCr),e(l5,zCr),e(ue,WCr),e(ue,i5),e(i5,xTe),e(xTe,QCr),e(i5,HCr),e(i5,MU),e(MU,UCr),e(i5,JCr),e(ue,YCr),e(ue,d5),e(d5,$Te),e($Te,KCr),e(d5,ZCr),e(d5,EU),e(EU,e5r),e(d5,o5r),e(ue,r5r),e(ue,c5),e(c5,kTe),e(kTe,t5r),e(c5,a5r),e(c5,CU),e(CU,n5r),e(c5,s5r),e(ue,l5r),e(ue,m5),e(m5,STe),e(STe,i5r),e(m5,d5r),e(m5,wU),e(wU,c5r),e(m5,m5r),e(ue,f5r),e(ue,f5),e(f5,RTe),e(RTe,g5r),e(f5,h5r),e(f5,AU),e(AU,u5r),e(f5,p5r),e(ue,_5r),e(ue,g5),e(g5,PTe),e(PTe,b5r),e(g5,v5r),e(g5,yU),e(yU,F5r),e(g5,T5r),e(ue,M5r),e(ue,h5),e(h5,BTe),e(BTe,E5r),e(h5,C5r),e(h5,LU),e(LU,w5r),e(h5,A5r),e(ue,y5r),e(ue,u5),e(u5,ITe),e(ITe,L5r),e(u5,x5r),e(u5,xU),e(xU,$5r),e(u5,k5r),e(ue,S5r),e(ue,p5),e(p5,NTe),e(NTe,R5r),e(p5,P5r),e(p5,$U),e($U,B5r),e(p5,I5r),e(ue,N5r),e(ue,_5),e(_5,qTe),e(qTe,q5r),e(_5,j5r),e(_5,kU),e(kU,D5r),e(_5,G5r),e(ue,O5r),e(ue,b5),e(b5,jTe),e(jTe,V5r),e(b5,X5r),e(b5,SU),e(SU,z5r),e(b5,W5r),e(ue,Q5r),e(ue,v5),e(v5,DTe),e(DTe,H5r),e(v5,U5r),e(v5,RU),e(RU,J5r),e(v5,Y5r),e(Sr,K5r),M(F5,Sr,null),b(m,jje,_),b(m,mc,_),e(mc,T5),e(T5,GTe),M(Z7,GTe,null),e(mc,Z5r),e(mc,OTe),e(OTe,e3r),b(m,Dje,_),b(m,nr,_),M(e9,nr,null),e(nr,o3r),e(nr,fc),e(fc,r3r),e(fc,PU),e(PU,t3r),e(fc,a3r),e(fc,BU),e(BU,n3r),e(fc,s3r),e(nr,l3r),e(nr,o9),e(o9,i3r),e(o9,VTe),e(VTe,d3r),e(o9,c3r),e(nr,m3r),e(nr,Bt),M(r9,Bt,null),e(Bt,f3r),e(Bt,XTe),e(XTe,g3r),e(Bt,h3r),e(Bt,gc),e(gc,u3r),e(gc,zTe),e(zTe,p3r),e(gc,_3r),e(gc,IU),e(IU,b3r),e(gc,v3r),e(Bt,F3r),M(M5,Bt,null),e(nr,T3r),e(nr,Rr),M(t9,Rr,null),e(Rr,M3r),e(Rr,WTe),e(WTe,E3r),e(Rr,C3r),e(Rr,ln),e(ln,w3r),e(ln,QTe),e(QTe,A3r),e(ln,y3r),e(ln,HTe),e(HTe,L3r),e(ln,x3r),e(ln,UTe),e(UTe,$3r),e(ln,k3r),e(Rr,S3r),e(Rr,a9),e(a9,E5),e(E5,JTe),e(JTe,R3r),e(E5,P3r),e(E5,NU),e(NU,B3r),e(E5,I3r),e(a9,N3r),e(a9,C5),e(C5,YTe),e(YTe,q3r),e(C5,j3r),e(C5,qU),e(qU,D3r),e(C5,G3r),e(Rr,O3r),M(w5,Rr,null),b(m,Gje,_),b(m,hc,_),e(hc,A5),e(A5,KTe),M(n9,KTe,null),e(hc,V3r),e(hc,ZTe),e(ZTe,X3r),b(m,Oje,_),b(m,sr,_),M(s9,sr,null),e(sr,z3r),e(sr,uc),e(uc,W3r),e(uc,jU),e(jU,Q3r),e(uc,H3r),e(uc,DU),e(DU,U3r),e(uc,J3r),e(sr,Y3r),e(sr,l9),e(l9,K3r),e(l9,eMe),e(eMe,Z3r),e(l9,ewr),e(sr,owr),e(sr,It),M(i9,It,null),e(It,rwr),e(It,oMe),e(oMe,twr),e(It,awr),e(It,pc),e(pc,nwr),e(pc,rMe),e(rMe,swr),e(pc,lwr),e(pc,GU),e(GU,iwr),e(pc,dwr),e(It,cwr),M(y5,It,null),e(sr,mwr),e(sr,Pr),M(d9,Pr,null),e(Pr,fwr),e(Pr,tMe),e(tMe,gwr),e(Pr,hwr),e(Pr,dn),e(dn,uwr),e(dn,aMe),e(aMe,pwr),e(dn,_wr),e(dn,nMe),e(nMe,bwr),e(dn,vwr),e(dn,sMe),e(sMe,Fwr),e(dn,Twr),e(Pr,Mwr),e(Pr,lMe),e(lMe,L5),e(L5,iMe),e(iMe,Ewr),e(L5,Cwr),e(L5,OU),e(OU,wwr),e(L5,Awr),e(Pr,ywr),M(x5,Pr,null),b(m,Vje,_),b(m,_c,_),e(_c,$5),e($5,dMe),M(c9,dMe,null),e(_c,Lwr),e(_c,cMe),e(cMe,xwr),b(m,Xje,_),b(m,lr,_),M(m9,lr,null),e(lr,$wr),e(lr,bc),e(bc,kwr),e(bc,VU),e(VU,Swr),e(bc,Rwr),e(bc,XU),e(XU,Pwr),e(bc,Bwr),e(lr,Iwr),e(lr,f9),e(f9,Nwr),e(f9,mMe),e(mMe,qwr),e(f9,jwr),e(lr,Dwr),e(lr,Nt),M(g9,Nt,null),e(Nt,Gwr),e(Nt,fMe),e(fMe,Owr),e(Nt,Vwr),e(Nt,vc),e(vc,Xwr),e(vc,gMe),e(gMe,zwr),e(vc,Wwr),e(vc,zU),e(zU,Qwr),e(vc,Hwr),e(Nt,Uwr),M(k5,Nt,null),e(lr,Jwr),e(lr,Br),M(h9,Br,null),e(Br,Ywr),e(Br,hMe),e(hMe,Kwr),e(Br,Zwr),e(Br,cn),e(cn,e0r),e(cn,uMe),e(uMe,o0r),e(cn,r0r),e(cn,pMe),e(pMe,t0r),e(cn,a0r),e(cn,_Me),e(_Me,n0r),e(cn,s0r),e(Br,l0r),e(Br,de),e(de,S5),e(S5,bMe),e(bMe,i0r),e(S5,d0r),e(S5,WU),e(WU,c0r),e(S5,m0r),e(de,f0r),e(de,R5),e(R5,vMe),e(vMe,g0r),e(R5,h0r),e(R5,QU),e(QU,u0r),e(R5,p0r),e(de,_0r),e(de,P5),e(P5,FMe),e(FMe,b0r),e(P5,v0r),e(P5,HU),e(HU,F0r),e(P5,T0r),e(de,M0r),e(de,B5),e(B5,TMe),e(TMe,E0r),e(B5,C0r),e(B5,UU),e(UU,w0r),e(B5,A0r),e(de,y0r),e(de,I5),e(I5,MMe),e(MMe,L0r),e(I5,x0r),e(I5,JU),e(JU,$0r),e(I5,k0r),e(de,S0r),e(de,N5),e(N5,EMe),e(EMe,R0r),e(N5,P0r),e(N5,YU),e(YU,B0r),e(N5,I0r),e(de,N0r),e(de,q5),e(q5,CMe),e(CMe,q0r),e(q5,j0r),e(q5,KU),e(KU,D0r),e(q5,G0r),e(de,O0r),e(de,j5),e(j5,wMe),e(wMe,V0r),e(j5,X0r),e(j5,ZU),e(ZU,z0r),e(j5,W0r),e(de,Q0r),e(de,D5),e(D5,AMe),e(AMe,H0r),e(D5,U0r),e(D5,eJ),e(eJ,J0r),e(D5,Y0r),e(de,K0r),e(de,G5),e(G5,yMe),e(yMe,Z0r),e(G5,e6r),e(G5,oJ),e(oJ,o6r),e(G5,r6r),e(de,t6r),e(de,O5),e(O5,LMe),e(LMe,a6r),e(O5,n6r),e(O5,rJ),e(rJ,s6r),e(O5,l6r),e(de,i6r),e(de,V5),e(V5,xMe),e(xMe,d6r),e(V5,c6r),e(V5,tJ),e(tJ,m6r),e(V5,f6r),e(de,g6r),e(de,X5),e(X5,$Me),e($Me,h6r),e(X5,u6r),e(X5,aJ),e(aJ,p6r),e(X5,_6r),e(de,b6r),e(de,z5),e(z5,kMe),e(kMe,v6r),e(z5,F6r),e(z5,nJ),e(nJ,T6r),e(z5,M6r),e(de,E6r),e(de,W5),e(W5,SMe),e(SMe,C6r),e(W5,w6r),e(W5,sJ),e(sJ,A6r),e(W5,y6r),e(de,L6r),e(de,Q5),e(Q5,RMe),e(RMe,x6r),e(Q5,$6r),e(Q5,lJ),e(lJ,k6r),e(Q5,S6r),e(de,R6r),e(de,H5),e(H5,PMe),e(PMe,P6r),e(H5,B6r),e(H5,iJ),e(iJ,I6r),e(H5,N6r),e(de,q6r),e(de,U5),e(U5,BMe),e(BMe,j6r),e(U5,D6r),e(U5,dJ),e(dJ,G6r),e(U5,O6r),e(de,V6r),e(de,J5),e(J5,IMe),e(IMe,X6r),e(J5,z6r),e(J5,cJ),e(cJ,W6r),e(J5,Q6r),e(de,H6r),e(de,Y5),e(Y5,NMe),e(NMe,U6r),e(Y5,J6r),e(Y5,mJ),e(mJ,Y6r),e(Y5,K6r),e(Br,Z6r),M(K5,Br,null),b(m,zje,_),b(m,Fc,_),e(Fc,Z5),e(Z5,qMe),M(u9,qMe,null),e(Fc,eAr),e(Fc,jMe),e(jMe,oAr),b(m,Wje,_),b(m,ir,_),M(p9,ir,null),e(ir,rAr),e(ir,Tc),e(Tc,tAr),e(Tc,fJ),e(fJ,aAr),e(Tc,nAr),e(Tc,gJ),e(gJ,sAr),e(Tc,lAr),e(ir,iAr),e(ir,_9),e(_9,dAr),e(_9,DMe),e(DMe,cAr),e(_9,mAr),e(ir,fAr),e(ir,qt),M(b9,qt,null),e(qt,gAr),e(qt,GMe),e(GMe,hAr),e(qt,uAr),e(qt,Mc),e(Mc,pAr),e(Mc,OMe),e(OMe,_Ar),e(Mc,bAr),e(Mc,hJ),e(hJ,vAr),e(Mc,FAr),e(qt,TAr),M(e3,qt,null),e(ir,MAr),e(ir,Ir),M(v9,Ir,null),e(Ir,EAr),e(Ir,VMe),e(VMe,CAr),e(Ir,wAr),e(Ir,mn),e(mn,AAr),e(mn,XMe),e(XMe,yAr),e(mn,LAr),e(mn,zMe),e(zMe,xAr),e(mn,$Ar),e(mn,WMe),e(WMe,kAr),e(mn,SAr),e(Ir,RAr),e(Ir,ce),e(ce,o3),e(o3,QMe),e(QMe,PAr),e(o3,BAr),e(o3,uJ),e(uJ,IAr),e(o3,NAr),e(ce,qAr),e(ce,r3),e(r3,HMe),e(HMe,jAr),e(r3,DAr),e(r3,pJ),e(pJ,GAr),e(r3,OAr),e(ce,VAr),e(ce,t3),e(t3,UMe),e(UMe,XAr),e(t3,zAr),e(t3,_J),e(_J,WAr),e(t3,QAr),e(ce,HAr),e(ce,a3),e(a3,JMe),e(JMe,UAr),e(a3,JAr),e(a3,bJ),e(bJ,YAr),e(a3,KAr),e(ce,ZAr),e(ce,n3),e(n3,YMe),e(YMe,eyr),e(n3,oyr),e(n3,vJ),e(vJ,ryr),e(n3,tyr),e(ce,ayr),e(ce,s3),e(s3,KMe),e(KMe,nyr),e(s3,syr),e(s3,FJ),e(FJ,lyr),e(s3,iyr),e(ce,dyr),e(ce,l3),e(l3,ZMe),e(ZMe,cyr),e(l3,myr),e(l3,TJ),e(TJ,fyr),e(l3,gyr),e(ce,hyr),e(ce,i3),e(i3,e4e),e(e4e,uyr),e(i3,pyr),e(i3,MJ),e(MJ,_yr),e(i3,byr),e(ce,vyr),e(ce,d3),e(d3,o4e),e(o4e,Fyr),e(d3,Tyr),e(d3,EJ),e(EJ,Myr),e(d3,Eyr),e(ce,Cyr),e(ce,c3),e(c3,r4e),e(r4e,wyr),e(c3,Ayr),e(c3,CJ),e(CJ,yyr),e(c3,Lyr),e(ce,xyr),e(ce,m3),e(m3,t4e),e(t4e,$yr),e(m3,kyr),e(m3,wJ),e(wJ,Syr),e(m3,Ryr),e(ce,Pyr),e(ce,f3),e(f3,a4e),e(a4e,Byr),e(f3,Iyr),e(f3,AJ),e(AJ,Nyr),e(f3,qyr),e(ce,jyr),e(ce,g3),e(g3,n4e),e(n4e,Dyr),e(g3,Gyr),e(g3,yJ),e(yJ,Oyr),e(g3,Vyr),e(ce,Xyr),e(ce,h3),e(h3,s4e),e(s4e,zyr),e(h3,Wyr),e(h3,LJ),e(LJ,Qyr),e(h3,Hyr),e(ce,Uyr),e(ce,u3),e(u3,l4e),e(l4e,Jyr),e(u3,Yyr),e(u3,xJ),e(xJ,Kyr),e(u3,Zyr),e(ce,eLr),e(ce,p3),e(p3,i4e),e(i4e,oLr),e(p3,rLr),e(p3,$J),e($J,tLr),e(p3,aLr),e(ce,nLr),e(ce,_3),e(_3,d4e),e(d4e,sLr),e(_3,lLr),e(_3,kJ),e(kJ,iLr),e(_3,dLr),e(ce,cLr),e(ce,b3),e(b3,c4e),e(c4e,mLr),e(b3,fLr),e(b3,SJ),e(SJ,gLr),e(b3,hLr),e(ce,uLr),e(ce,v3),e(v3,m4e),e(m4e,pLr),e(v3,_Lr),e(v3,RJ),e(RJ,bLr),e(v3,vLr),e(ce,FLr),e(ce,F3),e(F3,f4e),e(f4e,TLr),e(F3,MLr),e(F3,PJ),e(PJ,ELr),e(F3,CLr),e(Ir,wLr),M(T3,Ir,null),b(m,Qje,_),b(m,Ec,_),e(Ec,M3),e(M3,g4e),M(F9,g4e,null),e(Ec,ALr),e(Ec,h4e),e(h4e,yLr),b(m,Hje,_),b(m,dr,_),M(T9,dr,null),e(dr,LLr),e(dr,Cc),e(Cc,xLr),e(Cc,BJ),e(BJ,$Lr),e(Cc,kLr),e(Cc,IJ),e(IJ,SLr),e(Cc,RLr),e(dr,PLr),e(dr,M9),e(M9,BLr),e(M9,u4e),e(u4e,ILr),e(M9,NLr),e(dr,qLr),e(dr,jt),M(E9,jt,null),e(jt,jLr),e(jt,p4e),e(p4e,DLr),e(jt,GLr),e(jt,wc),e(wc,OLr),e(wc,_4e),e(_4e,VLr),e(wc,XLr),e(wc,NJ),e(NJ,zLr),e(wc,WLr),e(jt,QLr),M(E3,jt,null),e(dr,HLr),e(dr,Nr),M(C9,Nr,null),e(Nr,ULr),e(Nr,b4e),e(b4e,JLr),e(Nr,YLr),e(Nr,fn),e(fn,KLr),e(fn,v4e),e(v4e,ZLr),e(fn,e8r),e(fn,F4e),e(F4e,o8r),e(fn,r8r),e(fn,T4e),e(T4e,t8r),e(fn,a8r),e(Nr,n8r),e(Nr,M4e),e(M4e,C3),e(C3,E4e),e(E4e,s8r),e(C3,l8r),e(C3,qJ),e(qJ,i8r),e(C3,d8r),e(Nr,c8r),M(w3,Nr,null),b(m,Uje,_),b(m,Ac,_),e(Ac,A3),e(A3,C4e),M(w9,C4e,null),e(Ac,m8r),e(Ac,w4e),e(w4e,f8r),b(m,Jje,_),b(m,cr,_),M(A9,cr,null),e(cr,g8r),e(cr,yc),e(yc,h8r),e(yc,jJ),e(jJ,u8r),e(yc,p8r),e(yc,DJ),e(DJ,_8r),e(yc,b8r),e(cr,v8r),e(cr,y9),e(y9,F8r),e(y9,A4e),e(A4e,T8r),e(y9,M8r),e(cr,E8r),e(cr,Dt),M(L9,Dt,null),e(Dt,C8r),e(Dt,y4e),e(y4e,w8r),e(Dt,A8r),e(Dt,Lc),e(Lc,y8r),e(Lc,L4e),e(L4e,L8r),e(Lc,x8r),e(Lc,GJ),e(GJ,$8r),e(Lc,k8r),e(Dt,S8r),M(y3,Dt,null),e(cr,R8r),e(cr,qr),M(x9,qr,null),e(qr,P8r),e(qr,x4e),e(x4e,B8r),e(qr,I8r),e(qr,gn),e(gn,N8r),e(gn,$4e),e($4e,q8r),e(gn,j8r),e(gn,k4e),e(k4e,D8r),e(gn,G8r),e(gn,S4e),e(S4e,O8r),e(gn,V8r),e(qr,X8r),e(qr,R4e),e(R4e,L3),e(L3,P4e),e(P4e,z8r),e(L3,W8r),e(L3,OJ),e(OJ,Q8r),e(L3,H8r),e(qr,U8r),M(x3,qr,null),b(m,Yje,_),b(m,xc,_),e(xc,$3),e($3,B4e),M($9,B4e,null),e(xc,J8r),e(xc,I4e),e(I4e,Y8r),b(m,Kje,_),b(m,mr,_),M(k9,mr,null),e(mr,K8r),e(mr,$c),e($c,Z8r),e($c,VJ),e(VJ,e7r),e($c,o7r),e($c,XJ),e(XJ,r7r),e($c,t7r),e(mr,a7r),e(mr,S9),e(S9,n7r),e(S9,N4e),e(N4e,s7r),e(S9,l7r),e(mr,i7r),e(mr,Gt),M(R9,Gt,null),e(Gt,d7r),e(Gt,q4e),e(q4e,c7r),e(Gt,m7r),e(Gt,kc),e(kc,f7r),e(kc,j4e),e(j4e,g7r),e(kc,h7r),e(kc,zJ),e(zJ,u7r),e(kc,p7r),e(Gt,_7r),M(k3,Gt,null),e(mr,b7r),e(mr,jr),M(P9,jr,null),e(jr,v7r),e(jr,D4e),e(D4e,F7r),e(jr,T7r),e(jr,hn),e(hn,M7r),e(hn,G4e),e(G4e,E7r),e(hn,C7r),e(hn,O4e),e(O4e,w7r),e(hn,A7r),e(hn,V4e),e(V4e,y7r),e(hn,L7r),e(jr,x7r),e(jr,re),e(re,S3),e(S3,X4e),e(X4e,$7r),e(S3,k7r),e(S3,WJ),e(WJ,S7r),e(S3,R7r),e(re,P7r),e(re,R3),e(R3,z4e),e(z4e,B7r),e(R3,I7r),e(R3,QJ),e(QJ,N7r),e(R3,q7r),e(re,j7r),e(re,P3),e(P3,W4e),e(W4e,D7r),e(P3,G7r),e(P3,HJ),e(HJ,O7r),e(P3,V7r),e(re,X7r),e(re,B3),e(B3,Q4e),e(Q4e,z7r),e(B3,W7r),e(B3,UJ),e(UJ,Q7r),e(B3,H7r),e(re,U7r),e(re,I3),e(I3,H4e),e(H4e,J7r),e(I3,Y7r),e(I3,JJ),e(JJ,K7r),e(I3,Z7r),e(re,e9r),e(re,N3),e(N3,U4e),e(U4e,o9r),e(N3,r9r),e(N3,YJ),e(YJ,t9r),e(N3,a9r),e(re,n9r),e(re,q3),e(q3,J4e),e(J4e,s9r),e(q3,l9r),e(q3,KJ),e(KJ,i9r),e(q3,d9r),e(re,c9r),e(re,j3),e(j3,Y4e),e(Y4e,m9r),e(j3,f9r),e(j3,ZJ),e(ZJ,g9r),e(j3,h9r),e(re,u9r),e(re,D3),e(D3,K4e),e(K4e,p9r),e(D3,_9r),e(D3,eY),e(eY,b9r),e(D3,v9r),e(re,F9r),e(re,G3),e(G3,Z4e),e(Z4e,T9r),e(G3,M9r),e(G3,oY),e(oY,E9r),e(G3,C9r),e(re,w9r),e(re,O3),e(O3,eEe),e(eEe,A9r),e(O3,y9r),e(O3,rY),e(rY,L9r),e(O3,x9r),e(re,$9r),e(re,V3),e(V3,oEe),e(oEe,k9r),e(V3,S9r),e(V3,tY),e(tY,R9r),e(V3,P9r),e(re,B9r),e(re,X3),e(X3,rEe),e(rEe,I9r),e(X3,N9r),e(X3,aY),e(aY,q9r),e(X3,j9r),e(re,D9r),e(re,z3),e(z3,tEe),e(tEe,G9r),e(z3,O9r),e(z3,nY),e(nY,V9r),e(z3,X9r),e(re,z9r),e(re,W3),e(W3,aEe),e(aEe,W9r),e(W3,Q9r),e(W3,sY),e(sY,H9r),e(W3,U9r),e(re,J9r),e(re,Q3),e(Q3,nEe),e(nEe,Y9r),e(Q3,K9r),e(Q3,lY),e(lY,Z9r),e(Q3,exr),e(re,oxr),e(re,H3),e(H3,sEe),e(sEe,rxr),e(H3,txr),e(H3,iY),e(iY,axr),e(H3,nxr),e(re,sxr),e(re,U3),e(U3,lEe),e(lEe,lxr),e(U3,ixr),e(U3,dY),e(dY,dxr),e(U3,cxr),e(re,mxr),e(re,J3),e(J3,iEe),e(iEe,fxr),e(J3,gxr),e(J3,cY),e(cY,hxr),e(J3,uxr),e(re,pxr),e(re,Y3),e(Y3,dEe),e(dEe,_xr),e(Y3,bxr),e(Y3,mY),e(mY,vxr),e(Y3,Fxr),e(re,Txr),e(re,K3),e(K3,cEe),e(cEe,Mxr),e(K3,Exr),e(K3,fY),e(fY,Cxr),e(K3,wxr),e(re,Axr),e(re,Z3),e(Z3,mEe),e(mEe,yxr),e(Z3,Lxr),e(Z3,gY),e(gY,xxr),e(Z3,$xr),e(re,kxr),e(re,ew),e(ew,fEe),e(fEe,Sxr),e(ew,Rxr),e(ew,hY),e(hY,Pxr),e(ew,Bxr),e(re,Ixr),e(re,ow),e(ow,gEe),e(gEe,Nxr),e(ow,qxr),e(ow,uY),e(uY,jxr),e(ow,Dxr),e(re,Gxr),e(re,rw),e(rw,hEe),e(hEe,Oxr),e(rw,Vxr),e(rw,pY),e(pY,Xxr),e(rw,zxr),e(re,Wxr),e(re,tw),e(tw,uEe),e(uEe,Qxr),e(tw,Hxr),e(tw,_Y),e(_Y,Uxr),e(tw,Jxr),e(jr,Yxr),M(aw,jr,null),b(m,Zje,_),b(m,Sc,_),e(Sc,nw),e(nw,pEe),M(B9,pEe,null),e(Sc,Kxr),e(Sc,_Ee),e(_Ee,Zxr),b(m,eDe,_),b(m,fr,_),M(I9,fr,null),e(fr,e$r),e(fr,Rc),e(Rc,o$r),e(Rc,bY),e(bY,r$r),e(Rc,t$r),e(Rc,vY),e(vY,a$r),e(Rc,n$r),e(fr,s$r),e(fr,N9),e(N9,l$r),e(N9,bEe),e(bEe,i$r),e(N9,d$r),e(fr,c$r),e(fr,Ot),M(q9,Ot,null),e(Ot,m$r),e(Ot,vEe),e(vEe,f$r),e(Ot,g$r),e(Ot,Pc),e(Pc,h$r),e(Pc,FEe),e(FEe,u$r),e(Pc,p$r),e(Pc,FY),e(FY,_$r),e(Pc,b$r),e(Ot,v$r),M(sw,Ot,null),e(fr,F$r),e(fr,Dr),M(j9,Dr,null),e(Dr,T$r),e(Dr,TEe),e(TEe,M$r),e(Dr,E$r),e(Dr,un),e(un,C$r),e(un,MEe),e(MEe,w$r),e(un,A$r),e(un,EEe),e(EEe,y$r),e(un,L$r),e(un,CEe),e(CEe,x$r),e(un,$$r),e(Dr,k$r),e(Dr,Le),e(Le,lw),e(lw,wEe),e(wEe,S$r),e(lw,R$r),e(lw,TY),e(TY,P$r),e(lw,B$r),e(Le,I$r),e(Le,iw),e(iw,AEe),e(AEe,N$r),e(iw,q$r),e(iw,MY),e(MY,j$r),e(iw,D$r),e(Le,G$r),e(Le,dw),e(dw,yEe),e(yEe,O$r),e(dw,V$r),e(dw,EY),e(EY,X$r),e(dw,z$r),e(Le,W$r),e(Le,cw),e(cw,LEe),e(LEe,Q$r),e(cw,H$r),e(cw,CY),e(CY,U$r),e(cw,J$r),e(Le,Y$r),e(Le,mw),e(mw,xEe),e(xEe,K$r),e(mw,Z$r),e(mw,wY),e(wY,ekr),e(mw,okr),e(Le,rkr),e(Le,fw),e(fw,$Ee),e($Ee,tkr),e(fw,akr),e(fw,AY),e(AY,nkr),e(fw,skr),e(Le,lkr),e(Le,gw),e(gw,kEe),e(kEe,ikr),e(gw,dkr),e(gw,yY),e(yY,ckr),e(gw,mkr),e(Le,fkr),e(Le,hw),e(hw,SEe),e(SEe,gkr),e(hw,hkr),e(hw,LY),e(LY,ukr),e(hw,pkr),e(Le,_kr),e(Le,uw),e(uw,REe),e(REe,bkr),e(uw,vkr),e(uw,xY),e(xY,Fkr),e(uw,Tkr),e(Le,Mkr),e(Le,pw),e(pw,PEe),e(PEe,Ekr),e(pw,Ckr),e(pw,$Y),e($Y,wkr),e(pw,Akr),e(Dr,ykr),M(_w,Dr,null),b(m,oDe,_),b(m,Bc,_),e(Bc,bw),e(bw,BEe),M(D9,BEe,null),e(Bc,Lkr),e(Bc,IEe),e(IEe,xkr),b(m,rDe,_),b(m,gr,_),M(G9,gr,null),e(gr,$kr),e(gr,Ic),e(Ic,kkr),e(Ic,kY),e(kY,Skr),e(Ic,Rkr),e(Ic,SY),e(SY,Pkr),e(Ic,Bkr),e(gr,Ikr),e(gr,O9),e(O9,Nkr),e(O9,NEe),e(NEe,qkr),e(O9,jkr),e(gr,Dkr),e(gr,Vt),M(V9,Vt,null),e(Vt,Gkr),e(Vt,qEe),e(qEe,Okr),e(Vt,Vkr),e(Vt,Nc),e(Nc,Xkr),e(Nc,jEe),e(jEe,zkr),e(Nc,Wkr),e(Nc,RY),e(RY,Qkr),e(Nc,Hkr),e(Vt,Ukr),M(vw,Vt,null),e(gr,Jkr),e(gr,Gr),M(X9,Gr,null),e(Gr,Ykr),e(Gr,DEe),e(DEe,Kkr),e(Gr,Zkr),e(Gr,pn),e(pn,eSr),e(pn,GEe),e(GEe,oSr),e(pn,rSr),e(pn,OEe),e(OEe,tSr),e(pn,aSr),e(pn,VEe),e(VEe,nSr),e(pn,sSr),e(Gr,lSr),e(Gr,Ee),e(Ee,Fw),e(Fw,XEe),e(XEe,iSr),e(Fw,dSr),e(Fw,PY),e(PY,cSr),e(Fw,mSr),e(Ee,fSr),e(Ee,Tw),e(Tw,zEe),e(zEe,gSr),e(Tw,hSr),e(Tw,BY),e(BY,uSr),e(Tw,pSr),e(Ee,_Sr),e(Ee,Mw),e(Mw,WEe),e(WEe,bSr),e(Mw,vSr),e(Mw,IY),e(IY,FSr),e(Mw,TSr),e(Ee,MSr),e(Ee,Ew),e(Ew,QEe),e(QEe,ESr),e(Ew,CSr),e(Ew,NY),e(NY,wSr),e(Ew,ASr),e(Ee,ySr),e(Ee,Cw),e(Cw,HEe),e(HEe,LSr),e(Cw,xSr),e(Cw,qY),e(qY,$Sr),e(Cw,kSr),e(Ee,SSr),e(Ee,ww),e(ww,UEe),e(UEe,RSr),e(ww,PSr),e(ww,jY),e(jY,BSr),e(ww,ISr),e(Ee,NSr),e(Ee,Aw),e(Aw,JEe),e(JEe,qSr),e(Aw,jSr),e(Aw,DY),e(DY,DSr),e(Aw,GSr),e(Ee,OSr),e(Ee,yw),e(yw,YEe),e(YEe,VSr),e(yw,XSr),e(yw,GY),e(GY,zSr),e(yw,WSr),e(Ee,QSr),e(Ee,Lw),e(Lw,KEe),e(KEe,HSr),e(Lw,USr),e(Lw,OY),e(OY,JSr),e(Lw,YSr),e(Ee,KSr),e(Ee,xw),e(xw,ZEe),e(ZEe,ZSr),e(xw,eRr),e(xw,VY),e(VY,oRr),e(xw,rRr),e(Ee,tRr),e(Ee,$w),e($w,eCe),e(eCe,aRr),e($w,nRr),e($w,XY),e(XY,sRr),e($w,lRr),e(Ee,iRr),e(Ee,kw),e(kw,oCe),e(oCe,dRr),e(kw,cRr),e(kw,zY),e(zY,mRr),e(kw,fRr),e(Gr,gRr),M(Sw,Gr,null),b(m,tDe,_),b(m,qc,_),e(qc,Rw),e(Rw,rCe),M(z9,rCe,null),e(qc,hRr),e(qc,tCe),e(tCe,uRr),b(m,aDe,_),b(m,hr,_),M(W9,hr,null),e(hr,pRr),e(hr,jc),e(jc,_Rr),e(jc,WY),e(WY,bRr),e(jc,vRr),e(jc,QY),e(QY,FRr),e(jc,TRr),e(hr,MRr),e(hr,Q9),e(Q9,ERr),e(Q9,aCe),e(aCe,CRr),e(Q9,wRr),e(hr,ARr),e(hr,Xt),M(H9,Xt,null),e(Xt,yRr),e(Xt,nCe),e(nCe,LRr),e(Xt,xRr),e(Xt,Dc),e(Dc,$Rr),e(Dc,sCe),e(sCe,kRr),e(Dc,SRr),e(Dc,HY),e(HY,RRr),e(Dc,PRr),e(Xt,BRr),M(Pw,Xt,null),e(hr,IRr),e(hr,Or),M(U9,Or,null),e(Or,NRr),e(Or,lCe),e(lCe,qRr),e(Or,jRr),e(Or,_n),e(_n,DRr),e(_n,iCe),e(iCe,GRr),e(_n,ORr),e(_n,dCe),e(dCe,VRr),e(_n,XRr),e(_n,cCe),e(cCe,zRr),e(_n,WRr),e(Or,QRr),e(Or,xe),e(xe,Bw),e(Bw,mCe),e(mCe,HRr),e(Bw,URr),e(Bw,UY),e(UY,JRr),e(Bw,YRr),e(xe,KRr),e(xe,Iw),e(Iw,fCe),e(fCe,ZRr),e(Iw,ePr),e(Iw,JY),e(JY,oPr),e(Iw,rPr),e(xe,tPr),e(xe,Nw),e(Nw,gCe),e(gCe,aPr),e(Nw,nPr),e(Nw,YY),e(YY,sPr),e(Nw,lPr),e(xe,iPr),e(xe,qw),e(qw,hCe),e(hCe,dPr),e(qw,cPr),e(qw,KY),e(KY,mPr),e(qw,fPr),e(xe,gPr),e(xe,jw),e(jw,uCe),e(uCe,hPr),e(jw,uPr),e(jw,ZY),e(ZY,pPr),e(jw,_Pr),e(xe,bPr),e(xe,Dw),e(Dw,pCe),e(pCe,vPr),e(Dw,FPr),e(Dw,eK),e(eK,TPr),e(Dw,MPr),e(xe,EPr),e(xe,Gw),e(Gw,_Ce),e(_Ce,CPr),e(Gw,wPr),e(Gw,oK),e(oK,APr),e(Gw,yPr),e(xe,LPr),e(xe,Ow),e(Ow,bCe),e(bCe,xPr),e(Ow,$Pr),e(Ow,rK),e(rK,kPr),e(Ow,SPr),e(xe,RPr),e(xe,Vw),e(Vw,vCe),e(vCe,PPr),e(Vw,BPr),e(Vw,tK),e(tK,IPr),e(Vw,NPr),e(xe,qPr),e(xe,Xw),e(Xw,FCe),e(FCe,jPr),e(Xw,DPr),e(Xw,aK),e(aK,GPr),e(Xw,OPr),e(Or,VPr),M(zw,Or,null),b(m,nDe,_),b(m,Gc,_),e(Gc,Ww),e(Ww,TCe),M(J9,TCe,null),e(Gc,XPr),e(Gc,MCe),e(MCe,zPr),b(m,sDe,_),b(m,ur,_),M(Y9,ur,null),e(ur,WPr),e(ur,Oc),e(Oc,QPr),e(Oc,nK),e(nK,HPr),e(Oc,UPr),e(Oc,sK),e(sK,JPr),e(Oc,YPr),e(ur,KPr),e(ur,K9),e(K9,ZPr),e(K9,ECe),e(ECe,eBr),e(K9,oBr),e(ur,rBr),e(ur,zt),M(Z9,zt,null),e(zt,tBr),e(zt,CCe),e(CCe,aBr),e(zt,nBr),e(zt,Vc),e(Vc,sBr),e(Vc,wCe),e(wCe,lBr),e(Vc,iBr),e(Vc,lK),e(lK,dBr),e(Vc,cBr),e(zt,mBr),M(Qw,zt,null),e(ur,fBr),e(ur,Vr),M(ex,Vr,null),e(Vr,gBr),e(Vr,ACe),e(ACe,hBr),e(Vr,uBr),e(Vr,bn),e(bn,pBr),e(bn,yCe),e(yCe,_Br),e(bn,bBr),e(bn,LCe),e(LCe,vBr),e(bn,FBr),e(bn,xCe),e(xCe,TBr),e(bn,MBr),e(Vr,EBr),e(Vr,Pe),e(Pe,Hw),e(Hw,$Ce),e($Ce,CBr),e(Hw,wBr),e(Hw,iK),e(iK,ABr),e(Hw,yBr),e(Pe,LBr),e(Pe,Uw),e(Uw,kCe),e(kCe,xBr),e(Uw,$Br),e(Uw,dK),e(dK,kBr),e(Uw,SBr),e(Pe,RBr),e(Pe,Jw),e(Jw,SCe),e(SCe,PBr),e(Jw,BBr),e(Jw,cK),e(cK,IBr),e(Jw,NBr),e(Pe,qBr),e(Pe,Yw),e(Yw,RCe),e(RCe,jBr),e(Yw,DBr),e(Yw,mK),e(mK,GBr),e(Yw,OBr),e(Pe,VBr),e(Pe,Kw),e(Kw,PCe),e(PCe,XBr),e(Kw,zBr),e(Kw,fK),e(fK,WBr),e(Kw,QBr),e(Pe,HBr),e(Pe,Zw),e(Zw,BCe),e(BCe,UBr),e(Zw,JBr),e(Zw,gK),e(gK,YBr),e(Zw,KBr),e(Pe,ZBr),e(Pe,e0),e(e0,ICe),e(ICe,eIr),e(e0,oIr),e(e0,hK),e(hK,rIr),e(e0,tIr),e(Pe,aIr),e(Pe,o0),e(o0,NCe),e(NCe,nIr),e(o0,sIr),e(o0,uK),e(uK,lIr),e(o0,iIr),e(Pe,dIr),e(Pe,r0),e(r0,qCe),e(qCe,cIr),e(r0,mIr),e(r0,pK),e(pK,fIr),e(r0,gIr),e(Vr,hIr),M(t0,Vr,null),b(m,lDe,_),b(m,Xc,_),e(Xc,a0),e(a0,jCe),M(ox,jCe,null),e(Xc,uIr),e(Xc,DCe),e(DCe,pIr),b(m,iDe,_),b(m,pr,_),M(rx,pr,null),e(pr,_Ir),e(pr,zc),e(zc,bIr),e(zc,_K),e(_K,vIr),e(zc,FIr),e(zc,bK),e(bK,TIr),e(zc,MIr),e(pr,EIr),e(pr,tx),e(tx,CIr),e(tx,GCe),e(GCe,wIr),e(tx,AIr),e(pr,yIr),e(pr,Wt),M(ax,Wt,null),e(Wt,LIr),e(Wt,OCe),e(OCe,xIr),e(Wt,$Ir),e(Wt,Wc),e(Wc,kIr),e(Wc,VCe),e(VCe,SIr),e(Wc,RIr),e(Wc,vK),e(vK,PIr),e(Wc,BIr),e(Wt,IIr),M(n0,Wt,null),e(pr,NIr),e(pr,Xr),M(nx,Xr,null),e(Xr,qIr),e(Xr,XCe),e(XCe,jIr),e(Xr,DIr),e(Xr,vn),e(vn,GIr),e(vn,zCe),e(zCe,OIr),e(vn,VIr),e(vn,WCe),e(WCe,XIr),e(vn,zIr),e(vn,QCe),e(QCe,WIr),e(vn,QIr),e(Xr,HIr),e(Xr,$e),e($e,s0),e(s0,HCe),e(HCe,UIr),e(s0,JIr),e(s0,FK),e(FK,YIr),e(s0,KIr),e($e,ZIr),e($e,l0),e(l0,UCe),e(UCe,eNr),e(l0,oNr),e(l0,TK),e(TK,rNr),e(l0,tNr),e($e,aNr),e($e,i0),e(i0,JCe),e(JCe,nNr),e(i0,sNr),e(i0,MK),e(MK,lNr),e(i0,iNr),e($e,dNr),e($e,d0),e(d0,YCe),e(YCe,cNr),e(d0,mNr),e(d0,EK),e(EK,fNr),e(d0,gNr),e($e,hNr),e($e,c0),e(c0,KCe),e(KCe,uNr),e(c0,pNr),e(c0,CK),e(CK,_Nr),e(c0,bNr),e($e,vNr),e($e,m0),e(m0,ZCe),e(ZCe,FNr),e(m0,TNr),e(m0,wK),e(wK,MNr),e(m0,ENr),e($e,CNr),e($e,f0),e(f0,e5e),e(e5e,wNr),e(f0,ANr),e(f0,AK),e(AK,yNr),e(f0,LNr),e($e,xNr),e($e,g0),e(g0,o5e),e(o5e,$Nr),e(g0,kNr),e(g0,yK),e(yK,SNr),e(g0,RNr),e($e,PNr),e($e,h0),e(h0,r5e),e(r5e,BNr),e(h0,INr),e(h0,LK),e(LK,NNr),e(h0,qNr),e($e,jNr),e($e,u0),e(u0,t5e),e(t5e,DNr),e(u0,GNr),e(u0,xK),e(xK,ONr),e(u0,VNr),e(Xr,XNr),M(p0,Xr,null),b(m,dDe,_),b(m,Qc,_),e(Qc,_0),e(_0,a5e),M(sx,a5e,null),e(Qc,zNr),e(Qc,n5e),e(n5e,WNr),b(m,cDe,_),b(m,_r,_),M(lx,_r,null),e(_r,QNr),e(_r,Hc),e(Hc,HNr),e(Hc,$K),e($K,UNr),e(Hc,JNr),e(Hc,kK),e(kK,YNr),e(Hc,KNr),e(_r,ZNr),e(_r,ix),e(ix,eqr),e(ix,s5e),e(s5e,oqr),e(ix,rqr),e(_r,tqr),e(_r,Qt),M(dx,Qt,null),e(Qt,aqr),e(Qt,l5e),e(l5e,nqr),e(Qt,sqr),e(Qt,Uc),e(Uc,lqr),e(Uc,i5e),e(i5e,iqr),e(Uc,dqr),e(Uc,SK),e(SK,cqr),e(Uc,mqr),e(Qt,fqr),M(b0,Qt,null),e(_r,gqr),e(_r,zr),M(cx,zr,null),e(zr,hqr),e(zr,d5e),e(d5e,uqr),e(zr,pqr),e(zr,Fn),e(Fn,_qr),e(Fn,c5e),e(c5e,bqr),e(Fn,vqr),e(Fn,m5e),e(m5e,Fqr),e(Fn,Tqr),e(Fn,f5e),e(f5e,Mqr),e(Fn,Eqr),e(zr,Cqr),e(zr,ke),e(ke,v0),e(v0,g5e),e(g5e,wqr),e(v0,Aqr),e(v0,RK),e(RK,yqr),e(v0,Lqr),e(ke,xqr),e(ke,F0),e(F0,h5e),e(h5e,$qr),e(F0,kqr),e(F0,PK),e(PK,Sqr),e(F0,Rqr),e(ke,Pqr),e(ke,T0),e(T0,u5e),e(u5e,Bqr),e(T0,Iqr),e(T0,BK),e(BK,Nqr),e(T0,qqr),e(ke,jqr),e(ke,M0),e(M0,p5e),e(p5e,Dqr),e(M0,Gqr),e(M0,IK),e(IK,Oqr),e(M0,Vqr),e(ke,Xqr),e(ke,E0),e(E0,_5e),e(_5e,zqr),e(E0,Wqr),e(E0,NK),e(NK,Qqr),e(E0,Hqr),e(ke,Uqr),e(ke,C0),e(C0,b5e),e(b5e,Jqr),e(C0,Yqr),e(C0,qK),e(qK,Kqr),e(C0,Zqr),e(ke,ejr),e(ke,w0),e(w0,v5e),e(v5e,ojr),e(w0,rjr),e(w0,jK),e(jK,tjr),e(w0,ajr),e(ke,njr),e(ke,A0),e(A0,F5e),e(F5e,sjr),e(A0,ljr),e(A0,DK),e(DK,ijr),e(A0,djr),e(ke,cjr),e(ke,y0),e(y0,T5e),e(T5e,mjr),e(y0,fjr),e(y0,GK),e(GK,gjr),e(y0,hjr),e(ke,ujr),e(ke,L0),e(L0,M5e),e(M5e,pjr),e(L0,_jr),e(L0,OK),e(OK,bjr),e(L0,vjr),e(zr,Fjr),M(x0,zr,null),b(m,mDe,_),b(m,Jc,_),e(Jc,$0),e($0,E5e),M(mx,E5e,null),e(Jc,Tjr),e(Jc,C5e),e(C5e,Mjr),b(m,fDe,_),b(m,br,_),M(fx,br,null),e(br,Ejr),e(br,Yc),e(Yc,Cjr),e(Yc,VK),e(VK,wjr),e(Yc,Ajr),e(Yc,XK),e(XK,yjr),e(Yc,Ljr),e(br,xjr),e(br,gx),e(gx,$jr),e(gx,w5e),e(w5e,kjr),e(gx,Sjr),e(br,Rjr),e(br,Ht),M(hx,Ht,null),e(Ht,Pjr),e(Ht,A5e),e(A5e,Bjr),e(Ht,Ijr),e(Ht,Kc),e(Kc,Njr),e(Kc,y5e),e(y5e,qjr),e(Kc,jjr),e(Kc,zK),e(zK,Djr),e(Kc,Gjr),e(Ht,Ojr),M(k0,Ht,null),e(br,Vjr),e(br,Wr),M(ux,Wr,null),e(Wr,Xjr),e(Wr,L5e),e(L5e,zjr),e(Wr,Wjr),e(Wr,Tn),e(Tn,Qjr),e(Tn,x5e),e(x5e,Hjr),e(Tn,Ujr),e(Tn,$5e),e($5e,Jjr),e(Tn,Yjr),e(Tn,k5e),e(k5e,Kjr),e(Tn,Zjr),e(Wr,eDr),e(Wr,Ge),e(Ge,S0),e(S0,S5e),e(S5e,oDr),e(S0,rDr),e(S0,WK),e(WK,tDr),e(S0,aDr),e(Ge,nDr),e(Ge,R0),e(R0,R5e),e(R5e,sDr),e(R0,lDr),e(R0,QK),e(QK,iDr),e(R0,dDr),e(Ge,cDr),e(Ge,P0),e(P0,P5e),e(P5e,mDr),e(P0,fDr),e(P0,HK),e(HK,gDr),e(P0,hDr),e(Ge,uDr),e(Ge,B0),e(B0,B5e),e(B5e,pDr),e(B0,_Dr),e(B0,UK),e(UK,bDr),e(B0,vDr),e(Ge,FDr),e(Ge,I0),e(I0,I5e),e(I5e,TDr),e(I0,MDr),e(I0,JK),e(JK,EDr),e(I0,CDr),e(Ge,wDr),e(Ge,N0),e(N0,N5e),e(N5e,ADr),e(N0,yDr),e(N0,YK),e(YK,LDr),e(N0,xDr),e(Ge,$Dr),e(Ge,q0),e(q0,q5e),e(q5e,kDr),e(q0,SDr),e(q0,KK),e(KK,RDr),e(q0,PDr),e(Ge,BDr),e(Ge,j0),e(j0,j5e),e(j5e,IDr),e(j0,NDr),e(j0,ZK),e(ZK,qDr),e(j0,jDr),e(Wr,DDr),M(D0,Wr,null),b(m,gDe,_),b(m,Zc,_),e(Zc,G0),e(G0,D5e),M(px,D5e,null),e(Zc,GDr),e(Zc,G5e),e(G5e,ODr),b(m,hDe,_),b(m,vr,_),M(_x,vr,null),e(vr,VDr),e(vr,em),e(em,XDr),e(em,eZ),e(eZ,zDr),e(em,WDr),e(em,oZ),e(oZ,QDr),e(em,HDr),e(vr,UDr),e(vr,bx),e(bx,JDr),e(bx,O5e),e(O5e,YDr),e(bx,KDr),e(vr,ZDr),e(vr,Ut),M(vx,Ut,null),e(Ut,eGr),e(Ut,V5e),e(V5e,oGr),e(Ut,rGr),e(Ut,om),e(om,tGr),e(om,X5e),e(X5e,aGr),e(om,nGr),e(om,rZ),e(rZ,sGr),e(om,lGr),e(Ut,iGr),M(O0,Ut,null),e(vr,dGr),e(vr,Qr),M(Fx,Qr,null),e(Qr,cGr),e(Qr,z5e),e(z5e,mGr),e(Qr,fGr),e(Qr,Mn),e(Mn,gGr),e(Mn,W5e),e(W5e,hGr),e(Mn,uGr),e(Mn,Q5e),e(Q5e,pGr),e(Mn,_Gr),e(Mn,H5e),e(H5e,bGr),e(Mn,vGr),e(Qr,FGr),e(Qr,Oe),e(Oe,V0),e(V0,U5e),e(U5e,TGr),e(V0,MGr),e(V0,tZ),e(tZ,EGr),e(V0,CGr),e(Oe,wGr),e(Oe,X0),e(X0,J5e),e(J5e,AGr),e(X0,yGr),e(X0,aZ),e(aZ,LGr),e(X0,xGr),e(Oe,$Gr),e(Oe,z0),e(z0,Y5e),e(Y5e,kGr),e(z0,SGr),e(z0,nZ),e(nZ,RGr),e(z0,PGr),e(Oe,BGr),e(Oe,W0),e(W0,K5e),e(K5e,IGr),e(W0,NGr),e(W0,sZ),e(sZ,qGr),e(W0,jGr),e(Oe,DGr),e(Oe,Q0),e(Q0,Z5e),e(Z5e,GGr),e(Q0,OGr),e(Q0,lZ),e(lZ,VGr),e(Q0,XGr),e(Oe,zGr),e(Oe,H0),e(H0,e3e),e(e3e,WGr),e(H0,QGr),e(H0,iZ),e(iZ,HGr),e(H0,UGr),e(Oe,JGr),e(Oe,U0),e(U0,o3e),e(o3e,YGr),e(U0,KGr),e(U0,dZ),e(dZ,ZGr),e(U0,eOr),e(Oe,oOr),e(Oe,J0),e(J0,r3e),e(r3e,rOr),e(J0,tOr),e(J0,cZ),e(cZ,aOr),e(J0,nOr),e(Qr,sOr),M(Y0,Qr,null),b(m,uDe,_),b(m,rm,_),e(rm,K0),e(K0,t3e),M(Tx,t3e,null),e(rm,lOr),e(rm,a3e),e(a3e,iOr),b(m,pDe,_),b(m,Fr,_),M(Mx,Fr,null),e(Fr,dOr),e(Fr,tm),e(tm,cOr),e(tm,mZ),e(mZ,mOr),e(tm,fOr),e(tm,fZ),e(fZ,gOr),e(tm,hOr),e(Fr,uOr),e(Fr,Ex),e(Ex,pOr),e(Ex,n3e),e(n3e,_Or),e(Ex,bOr),e(Fr,vOr),e(Fr,Jt),M(Cx,Jt,null),e(Jt,FOr),e(Jt,s3e),e(s3e,TOr),e(Jt,MOr),e(Jt,am),e(am,EOr),e(am,l3e),e(l3e,COr),e(am,wOr),e(am,gZ),e(gZ,AOr),e(am,yOr),e(Jt,LOr),M(Z0,Jt,null),e(Fr,xOr),e(Fr,Hr),M(wx,Hr,null),e(Hr,$Or),e(Hr,i3e),e(i3e,kOr),e(Hr,SOr),e(Hr,En),e(En,ROr),e(En,d3e),e(d3e,POr),e(En,BOr),e(En,c3e),e(c3e,IOr),e(En,NOr),e(En,m3e),e(m3e,qOr),e(En,jOr),e(Hr,DOr),e(Hr,f3e),e(f3e,e6),e(e6,g3e),e(g3e,GOr),e(e6,OOr),e(e6,hZ),e(hZ,VOr),e(e6,XOr),e(Hr,zOr),M(o6,Hr,null),b(m,_De,_),b(m,nm,_),e(nm,r6),e(r6,h3e),M(Ax,h3e,null),e(nm,WOr),e(nm,u3e),e(u3e,QOr),b(m,bDe,_),b(m,Tr,_),M(yx,Tr,null),e(Tr,HOr),e(Tr,sm),e(sm,UOr),e(sm,uZ),e(uZ,JOr),e(sm,YOr),e(sm,pZ),e(pZ,KOr),e(sm,ZOr),e(Tr,eVr),e(Tr,Lx),e(Lx,oVr),e(Lx,p3e),e(p3e,rVr),e(Lx,tVr),e(Tr,aVr),e(Tr,Yt),M(xx,Yt,null),e(Yt,nVr),e(Yt,_3e),e(_3e,sVr),e(Yt,lVr),e(Yt,lm),e(lm,iVr),e(lm,b3e),e(b3e,dVr),e(lm,cVr),e(lm,_Z),e(_Z,mVr),e(lm,fVr),e(Yt,gVr),M(t6,Yt,null),e(Tr,hVr),e(Tr,Ur),M($x,Ur,null),e(Ur,uVr),e(Ur,v3e),e(v3e,pVr),e(Ur,_Vr),e(Ur,Cn),e(Cn,bVr),e(Cn,F3e),e(F3e,vVr),e(Cn,FVr),e(Cn,T3e),e(T3e,TVr),e(Cn,MVr),e(Cn,M3e),e(M3e,EVr),e(Cn,CVr),e(Ur,wVr),e(Ur,kx),e(kx,a6),e(a6,E3e),e(E3e,AVr),e(a6,yVr),e(a6,bZ),e(bZ,LVr),e(a6,xVr),e(kx,$Vr),e(kx,n6),e(n6,C3e),e(C3e,kVr),e(n6,SVr),e(n6,vZ),e(vZ,RVr),e(n6,PVr),e(Ur,BVr),M(s6,Ur,null),b(m,vDe,_),b(m,im,_),e(im,l6),e(l6,w3e),M(Sx,w3e,null),e(im,IVr),e(im,A3e),e(A3e,NVr),b(m,FDe,_),b(m,Mr,_),M(Rx,Mr,null),e(Mr,qVr),e(Mr,dm),e(dm,jVr),e(dm,FZ),e(FZ,DVr),e(dm,GVr),e(dm,TZ),e(TZ,OVr),e(dm,VVr),e(Mr,XVr),e(Mr,Px),e(Px,zVr),e(Px,y3e),e(y3e,WVr),e(Px,QVr),e(Mr,HVr),e(Mr,Kt),M(Bx,Kt,null),e(Kt,UVr),e(Kt,L3e),e(L3e,JVr),e(Kt,YVr),e(Kt,cm),e(cm,KVr),e(cm,x3e),e(x3e,ZVr),e(cm,eXr),e(cm,MZ),e(MZ,oXr),e(cm,rXr),e(Kt,tXr),M(i6,Kt,null),e(Mr,aXr),e(Mr,Jr),M(Ix,Jr,null),e(Jr,nXr),e(Jr,$3e),e($3e,sXr),e(Jr,lXr),e(Jr,wn),e(wn,iXr),e(wn,k3e),e(k3e,dXr),e(wn,cXr),e(wn,S3e),e(S3e,mXr),e(wn,fXr),e(wn,R3e),e(R3e,gXr),e(wn,hXr),e(Jr,uXr),e(Jr,P3e),e(P3e,d6),e(d6,B3e),e(B3e,pXr),e(d6,_Xr),e(d6,EZ),e(EZ,bXr),e(d6,vXr),e(Jr,FXr),M(c6,Jr,null),TDe=!0},p(m,[_]){const Nx={};_&2&&(Nx.$$scope={dirty:_,ctx:m}),vm.$set(Nx);const I3e={};_&2&&(I3e.$$scope={dirty:_,ctx:m}),Eg.$set(I3e);const N3e={};_&2&&(N3e.$$scope={dirty:_,ctx:m}),ah.$set(N3e);const q3e={};_&2&&(q3e.$$scope={dirty:_,ctx:m}),Ih.$set(q3e);const qx={};_&2&&(qx.$$scope={dirty:_,ctx:m}),Nh.$set(qx);const j3e={};_&2&&(j3e.$$scope={dirty:_,ctx:m}),tu.$set(j3e);const An={};_&2&&(An.$$scope={dirty:_,ctx:m}),au.$set(An);const D3e={};_&2&&(D3e.$$scope={dirty:_,ctx:m}),lu.$set(D3e);const G3e={};_&2&&(G3e.$$scope={dirty:_,ctx:m}),r_.$set(G3e);const O3e={};_&2&&(O3e.$$scope={dirty:_,ctx:m}),a_.$set(O3e);const jx={};_&2&&(jx.$$scope={dirty:_,ctx:m}),H_.$set(jx);const V3e={};_&2&&(V3e.$$scope={dirty:_,ctx:m}),J_.$set(V3e);const Dx={};_&2&&(Dx.$$scope={dirty:_,ctx:m}),Bb.$set(Dx);const X3e={};_&2&&(X3e.$$scope={dirty:_,ctx:m}),Nb.$set(X3e);const Gx={};_&2&&(Gx.$$scope={dirty:_,ctx:m}),T2.$set(Gx);const z3e={};_&2&&(z3e.$$scope={dirty:_,ctx:m}),E2.$set(z3e);const W3e={};_&2&&(W3e.$$scope={dirty:_,ctx:m}),G2.$set(W3e);const Q3e={};_&2&&(Q3e.$$scope={dirty:_,ctx:m}),V2.$set(Q3e);const mm={};_&2&&(mm.$$scope={dirty:_,ctx:m}),qv.$set(mm);const H3e={};_&2&&(H3e.$$scope={dirty:_,ctx:m}),Dv.$set(H3e);const U3e={};_&2&&(U3e.$$scope={dirty:_,ctx:m}),_F.$set(U3e);const J3e={};_&2&&(J3e.$$scope={dirty:_,ctx:m}),vF.$set(J3e);const Ox={};_&2&&(Ox.$$scope={dirty:_,ctx:m}),AF.$set(Ox);const Y3e={};_&2&&(Y3e.$$scope={dirty:_,ctx:m}),LF.$set(Y3e);const K3e={};_&2&&(K3e.$$scope={dirty:_,ctx:m}),c1.$set(K3e);const Z3e={};_&2&&(Z3e.$$scope={dirty:_,ctx:m}),f1.$set(Z3e);const et={};_&2&&(et.$$scope={dirty:_,ctx:m}),eT.$set(et);const Vx={};_&2&&(Vx.$$scope={dirty:_,ctx:m}),rT.$set(Vx);const ewe={};_&2&&(ewe.$$scope={dirty:_,ctx:m}),nT.$set(ewe);const Xx={};_&2&&(Xx.$$scope={dirty:_,ctx:m}),lT.$set(Xx);const owe={};_&2&&(owe.$$scope={dirty:_,ctx:m}),TT.$set(owe);const ot={};_&2&&(ot.$$scope={dirty:_,ctx:m}),ET.$set(ot);const rwe={};_&2&&(rwe.$$scope={dirty:_,ctx:m}),AT.$set(rwe);const fm={};_&2&&(fm.$$scope={dirty:_,ctx:m}),LT.$set(fm);const twe={};_&2&&(twe.$$scope={dirty:_,ctx:m}),jT.$set(twe);const awe={};_&2&&(awe.$$scope={dirty:_,ctx:m}),GT.$set(awe);const y={};_&2&&(y.$$scope={dirty:_,ctx:m}),HT.$set(y);const m6={};_&2&&(m6.$$scope={dirty:_,ctx:m}),JT.$set(m6);const nwe={};_&2&&(nwe.$$scope={dirty:_,ctx:m}),lM.$set(nwe);const swe={};_&2&&(swe.$$scope={dirty:_,ctx:m}),dM.$set(swe);const f6={};_&2&&(f6.$$scope={dirty:_,ctx:m}),gM.$set(f6);const lwe={};_&2&&(lwe.$$scope={dirty:_,ctx:m}),uM.$set(lwe);const iwe={};_&2&&(iwe.$$scope={dirty:_,ctx:m}),MM.$set(iwe);const g6={};_&2&&(g6.$$scope={dirty:_,ctx:m}),CM.$set(g6);const dwe={};_&2&&(dwe.$$scope={dirty:_,ctx:m}),xM.$set(dwe);const cwe={};_&2&&(cwe.$$scope={dirty:_,ctx:m}),kM.$set(cwe);const h6={};_&2&&(h6.$$scope={dirty:_,ctx:m}),BM.$set(h6);const mwe={};_&2&&(mwe.$$scope={dirty:_,ctx:m}),NM.$set(mwe);const fwe={};_&2&&(fwe.$$scope={dirty:_,ctx:m}),DM.$set(fwe);const u6={};_&2&&(u6.$$scope={dirty:_,ctx:m}),OM.$set(u6);const gwe={};_&2&&(gwe.$$scope={dirty:_,ctx:m}),HM.$set(gwe);const hwe={};_&2&&(hwe.$$scope={dirty:_,ctx:m}),JM.$set(hwe);const p6={};_&2&&(p6.$$scope={dirty:_,ctx:m}),ZM.$set(p6);const uwe={};_&2&&(uwe.$$scope={dirty:_,ctx:m}),o4.$set(uwe);const pwe={};_&2&&(pwe.$$scope={dirty:_,ctx:m}),H4.$set(pwe);const _6={};_&2&&(_6.$$scope={dirty:_,ctx:m}),J4.$set(_6);const _we={};_&2&&(_we.$$scope={dirty:_,ctx:m}),FE.$set(_we);const bwe={};_&2&&(bwe.$$scope={dirty:_,ctx:m}),ME.$set(bwe);const b6={};_&2&&(b6.$$scope={dirty:_,ctx:m}),IE.$set(b6);const vwe={};_&2&&(vwe.$$scope={dirty:_,ctx:m}),qE.$set(vwe);const Fwe={};_&2&&(Fwe.$$scope={dirty:_,ctx:m}),VE.$set(Fwe);const v6={};_&2&&(v6.$$scope={dirty:_,ctx:m}),zE.$set(v6);const Twe={};_&2&&(Twe.$$scope={dirty:_,ctx:m}),fC.$set(Twe);const Mwe={};_&2&&(Mwe.$$scope={dirty:_,ctx:m}),hC.$set(Mwe);const F6={};_&2&&(F6.$$scope={dirty:_,ctx:m}),wC.$set(F6);const Ewe={};_&2&&(Ewe.$$scope={dirty:_,ctx:m}),yC.$set(Ewe);const Cwe={};_&2&&(Cwe.$$scope={dirty:_,ctx:m}),e5.$set(Cwe);const T6={};_&2&&(T6.$$scope={dirty:_,ctx:m}),r5.$set(T6);const wwe={};_&2&&(wwe.$$scope={dirty:_,ctx:m}),F5.$set(wwe);const Awe={};_&2&&(Awe.$$scope={dirty:_,ctx:m}),M5.$set(Awe);const M6={};_&2&&(M6.$$scope={dirty:_,ctx:m}),w5.$set(M6);const ywe={};_&2&&(ywe.$$scope={dirty:_,ctx:m}),y5.$set(ywe);const Lwe={};_&2&&(Lwe.$$scope={dirty:_,ctx:m}),x5.$set(Lwe);const E6={};_&2&&(E6.$$scope={dirty:_,ctx:m}),k5.$set(E6);const xwe={};_&2&&(xwe.$$scope={dirty:_,ctx:m}),K5.$set(xwe);const $we={};_&2&&($we.$$scope={dirty:_,ctx:m}),e3.$set($we);const C6={};_&2&&(C6.$$scope={dirty:_,ctx:m}),T3.$set(C6);const kwe={};_&2&&(kwe.$$scope={dirty:_,ctx:m}),E3.$set(kwe);const Swe={};_&2&&(Swe.$$scope={dirty:_,ctx:m}),w3.$set(Swe);const w6={};_&2&&(w6.$$scope={dirty:_,ctx:m}),y3.$set(w6);const Rwe={};_&2&&(Rwe.$$scope={dirty:_,ctx:m}),x3.$set(Rwe);const Pwe={};_&2&&(Pwe.$$scope={dirty:_,ctx:m}),k3.$set(Pwe);const A6={};_&2&&(A6.$$scope={dirty:_,ctx:m}),aw.$set(A6);const Bwe={};_&2&&(Bwe.$$scope={dirty:_,ctx:m}),sw.$set(Bwe);const Iwe={};_&2&&(Iwe.$$scope={dirty:_,ctx:m}),_w.$set(Iwe);const y6={};_&2&&(y6.$$scope={dirty:_,ctx:m}),vw.$set(y6);const Nwe={};_&2&&(Nwe.$$scope={dirty:_,ctx:m}),Sw.$set(Nwe);const qwe={};_&2&&(qwe.$$scope={dirty:_,ctx:m}),Pw.$set(qwe);const L6={};_&2&&(L6.$$scope={dirty:_,ctx:m}),zw.$set(L6);const jwe={};_&2&&(jwe.$$scope={dirty:_,ctx:m}),Qw.$set(jwe);const Dwe={};_&2&&(Dwe.$$scope={dirty:_,ctx:m}),t0.$set(Dwe);const x6={};_&2&&(x6.$$scope={dirty:_,ctx:m}),n0.$set(x6);const Gwe={};_&2&&(Gwe.$$scope={dirty:_,ctx:m}),p0.$set(Gwe);const Owe={};_&2&&(Owe.$$scope={dirty:_,ctx:m}),b0.$set(Owe);const $6={};_&2&&($6.$$scope={dirty:_,ctx:m}),x0.$set($6);const Vwe={};_&2&&(Vwe.$$scope={dirty:_,ctx:m}),k0.$set(Vwe);const Xwe={};_&2&&(Xwe.$$scope={dirty:_,ctx:m}),D0.$set(Xwe);const k6={};_&2&&(k6.$$scope={dirty:_,ctx:m}),O0.$set(k6);const zwe={};_&2&&(zwe.$$scope={dirty:_,ctx:m}),Y0.$set(zwe);const Wwe={};_&2&&(Wwe.$$scope={dirty:_,ctx:m}),Z0.$set(Wwe);const S6={};_&2&&(S6.$$scope={dirty:_,ctx:m}),o6.$set(S6);const Qwe={};_&2&&(Qwe.$$scope={dirty:_,ctx:m}),t6.$set(Qwe);const Hwe={};_&2&&(Hwe.$$scope={dirty:_,ctx:m}),s6.$set(Hwe);const R6={};_&2&&(R6.$$scope={dirty:_,ctx:m}),i6.$set(R6);const Uwe={};_&2&&(Uwe.$$scope={dirty:_,ctx:m}),c6.$set(Uwe)},i(m){TDe||(E(d.$$.fragment,m),E(Ca.$$.fragment,m),E(Sy.$$.fragment,m),E(Ry.$$.fragment,m),E(vm.$$.fragment,m),E(Py.$$.fragment,m),E(By.$$.fragment,m),E(qy.$$.fragment,m),E(Eg.$$.fragment,m),E(jy.$$.fragment,m),E(Dy.$$.fragment,m),E(Gy.$$.fragment,m),E(Xy.$$.fragment,m),E(ah.$$.fragment,m),E(zy.$$.fragment,m),E(Wy.$$.fragment,m),E(Qy.$$.fragment,m),E(Jy.$$.fragment,m),E(Ih.$$.fragment,m),E(Nh.$$.fragment,m),E(Yy.$$.fragment,m),E(Ky.$$.fragment,m),E(Zy.$$.fragment,m),E(rL.$$.fragment,m),E(tu.$$.fragment,m),E(au.$$.fragment,m),E(tL.$$.fragment,m),E(aL.$$.fragment,m),E(nL.$$.fragment,m),E(lL.$$.fragment,m),E(lu.$$.fragment,m),E(iL.$$.fragment,m),E(r_.$$.fragment,m),E(dL.$$.fragment,m),E(cL.$$.fragment,m),E(fL.$$.fragment,m),E(a_.$$.fragment,m),E(gL.$$.fragment,m),E(H_.$$.fragment,m),E(hL.$$.fragment,m),E(uL.$$.fragment,m),E(_L.$$.fragment,m),E(J_.$$.fragment,m),E(bL.$$.fragment,m),E(Bb.$$.fragment,m),E(vL.$$.fragment,m),E(FL.$$.fragment,m),E(ML.$$.fragment,m),E(Nb.$$.fragment,m),E(EL.$$.fragment,m),E(T2.$$.fragment,m),E(CL.$$.fragment,m),E(wL.$$.fragment,m),E(yL.$$.fragment,m),E(E2.$$.fragment,m),E(LL.$$.fragment,m),E(G2.$$.fragment,m),E(xL.$$.fragment,m),E($L.$$.fragment,m),E(SL.$$.fragment,m),E(V2.$$.fragment,m),E(RL.$$.fragment,m),E(qv.$$.fragment,m),E(PL.$$.fragment,m),E(BL.$$.fragment,m),E(NL.$$.fragment,m),E(Dv.$$.fragment,m),E(qL.$$.fragment,m),E(_F.$$.fragment,m),E(jL.$$.fragment,m),E(DL.$$.fragment,m),E(OL.$$.fragment,m),E(vF.$$.fragment,m),E(VL.$$.fragment,m),E(AF.$$.fragment,m),E(XL.$$.fragment,m),E(zL.$$.fragment,m),E(QL.$$.fragment,m),E(LF.$$.fragment,m),E(HL.$$.fragment,m),E(c1.$$.fragment,m),E(UL.$$.fragment,m),E(JL.$$.fragment,m),E(KL.$$.fragment,m),E(f1.$$.fragment,m),E(ZL.$$.fragment,m),E(eT.$$.fragment,m),E(e8.$$.fragment,m),E(o8.$$.fragment,m),E(t8.$$.fragment,m),E(rT.$$.fragment,m),E(a8.$$.fragment,m),E(nT.$$.fragment,m),E(n8.$$.fragment,m),E(s8.$$.fragment,m),E(i8.$$.fragment,m),E(lT.$$.fragment,m),E(d8.$$.fragment,m),E(TT.$$.fragment,m),E(c8.$$.fragment,m),E(m8.$$.fragment,m),E(g8.$$.fragment,m),E(ET.$$.fragment,m),E(h8.$$.fragment,m),E(AT.$$.fragment,m),E(u8.$$.fragment,m),E(p8.$$.fragment,m),E(b8.$$.fragment,m),E(LT.$$.fragment,m),E(v8.$$.fragment,m),E(jT.$$.fragment,m),E(F8.$$.fragment,m),E(T8.$$.fragment,m),E(E8.$$.fragment,m),E(GT.$$.fragment,m),E(C8.$$.fragment,m),E(HT.$$.fragment,m),E(w8.$$.fragment,m),E(A8.$$.fragment,m),E(L8.$$.fragment,m),E(JT.$$.fragment,m),E(x8.$$.fragment,m),E(lM.$$.fragment,m),E($8.$$.fragment,m),E(k8.$$.fragment,m),E(R8.$$.fragment,m),E(dM.$$.fragment,m),E(P8.$$.fragment,m),E(gM.$$.fragment,m),E(I8.$$.fragment,m),E(N8.$$.fragment,m),E(j8.$$.fragment,m),E(uM.$$.fragment,m),E(D8.$$.fragment,m),E(MM.$$.fragment,m),E(G8.$$.fragment,m),E(O8.$$.fragment,m),E(X8.$$.fragment,m),E(CM.$$.fragment,m),E(z8.$$.fragment,m),E(xM.$$.fragment,m),E(W8.$$.fragment,m),E(Q8.$$.fragment,m),E(U8.$$.fragment,m),E(kM.$$.fragment,m),E(J8.$$.fragment,m),E(BM.$$.fragment,m),E(K8.$$.fragment,m),E(Z8.$$.fragment,m),E(o7.$$.fragment,m),E(NM.$$.fragment,m),E(r7.$$.fragment,m),E(DM.$$.fragment,m),E(t7.$$.fragment,m),E(a7.$$.fragment,m),E(s7.$$.fragment,m),E(OM.$$.fragment,m),E(l7.$$.fragment,m),E(HM.$$.fragment,m),E(i7.$$.fragment,m),E(d7.$$.fragment,m),E(m7.$$.fragment,m),E(JM.$$.fragment,m),E(f7.$$.fragment,m),E(ZM.$$.fragment,m),E(g7.$$.fragment,m),E(h7.$$.fragment,m),E(p7.$$.fragment,m),E(o4.$$.fragment,m),E(_7.$$.fragment,m),E(H4.$$.fragment,m),E(b7.$$.fragment,m),E(v7.$$.fragment,m),E(T7.$$.fragment,m),E(J4.$$.fragment,m),E(M7.$$.fragment,m),E(FE.$$.fragment,m),E(E7.$$.fragment,m),E(C7.$$.fragment,m),E(A7.$$.fragment,m),E(ME.$$.fragment,m),E(y7.$$.fragment,m),E(IE.$$.fragment,m),E(L7.$$.fragment,m),E(x7.$$.fragment,m),E(k7.$$.fragment,m),E(qE.$$.fragment,m),E(S7.$$.fragment,m),E(VE.$$.fragment,m),E(R7.$$.fragment,m),E(P7.$$.fragment,m),E(I7.$$.fragment,m),E(zE.$$.fragment,m),E(N7.$$.fragment,m),E(fC.$$.fragment,m),E(q7.$$.fragment,m),E(j7.$$.fragment,m),E(G7.$$.fragment,m),E(hC.$$.fragment,m),E(O7.$$.fragment,m),E(wC.$$.fragment,m),E(V7.$$.fragment,m),E(X7.$$.fragment,m),E(W7.$$.fragment,m),E(yC.$$.fragment,m),E(Q7.$$.fragment,m),E(e5.$$.fragment,m),E(H7.$$.fragment,m),E(U7.$$.fragment,m),E(Y7.$$.fragment,m),E(r5.$$.fragment,m),E(K7.$$.fragment,m),E(F5.$$.fragment,m),E(Z7.$$.fragment,m),E(e9.$$.fragment,m),E(r9.$$.fragment,m),E(M5.$$.fragment,m),E(t9.$$.fragment,m),E(w5.$$.fragment,m),E(n9.$$.fragment,m),E(s9.$$.fragment,m),E(i9.$$.fragment,m),E(y5.$$.fragment,m),E(d9.$$.fragment,m),E(x5.$$.fragment,m),E(c9.$$.fragment,m),E(m9.$$.fragment,m),E(g9.$$.fragment,m),E(k5.$$.fragment,m),E(h9.$$.fragment,m),E(K5.$$.fragment,m),E(u9.$$.fragment,m),E(p9.$$.fragment,m),E(b9.$$.fragment,m),E(e3.$$.fragment,m),E(v9.$$.fragment,m),E(T3.$$.fragment,m),E(F9.$$.fragment,m),E(T9.$$.fragment,m),E(E9.$$.fragment,m),E(E3.$$.fragment,m),E(C9.$$.fragment,m),E(w3.$$.fragment,m),E(w9.$$.fragment,m),E(A9.$$.fragment,m),E(L9.$$.fragment,m),E(y3.$$.fragment,m),E(x9.$$.fragment,m),E(x3.$$.fragment,m),E($9.$$.fragment,m),E(k9.$$.fragment,m),E(R9.$$.fragment,m),E(k3.$$.fragment,m),E(P9.$$.fragment,m),E(aw.$$.fragment,m),E(B9.$$.fragment,m),E(I9.$$.fragment,m),E(q9.$$.fragment,m),E(sw.$$.fragment,m),E(j9.$$.fragment,m),E(_w.$$.fragment,m),E(D9.$$.fragment,m),E(G9.$$.fragment,m),E(V9.$$.fragment,m),E(vw.$$.fragment,m),E(X9.$$.fragment,m),E(Sw.$$.fragment,m),E(z9.$$.fragment,m),E(W9.$$.fragment,m),E(H9.$$.fragment,m),E(Pw.$$.fragment,m),E(U9.$$.fragment,m),E(zw.$$.fragment,m),E(J9.$$.fragment,m),E(Y9.$$.fragment,m),E(Z9.$$.fragment,m),E(Qw.$$.fragment,m),E(ex.$$.fragment,m),E(t0.$$.fragment,m),E(ox.$$.fragment,m),E(rx.$$.fragment,m),E(ax.$$.fragment,m),E(n0.$$.fragment,m),E(nx.$$.fragment,m),E(p0.$$.fragment,m),E(sx.$$.fragment,m),E(lx.$$.fragment,m),E(dx.$$.fragment,m),E(b0.$$.fragment,m),E(cx.$$.fragment,m),E(x0.$$.fragment,m),E(mx.$$.fragment,m),E(fx.$$.fragment,m),E(hx.$$.fragment,m),E(k0.$$.fragment,m),E(ux.$$.fragment,m),E(D0.$$.fragment,m),E(px.$$.fragment,m),E(_x.$$.fragment,m),E(vx.$$.fragment,m),E(O0.$$.fragment,m),E(Fx.$$.fragment,m),E(Y0.$$.fragment,m),E(Tx.$$.fragment,m),E(Mx.$$.fragment,m),E(Cx.$$.fragment,m),E(Z0.$$.fragment,m),E(wx.$$.fragment,m),E(o6.$$.fragment,m),E(Ax.$$.fragment,m),E(yx.$$.fragment,m),E(xx.$$.fragment,m),E(t6.$$.fragment,m),E($x.$$.fragment,m),E(s6.$$.fragment,m),E(Sx.$$.fragment,m),E(Rx.$$.fragment,m),E(Bx.$$.fragment,m),E(i6.$$.fragment,m),E(Ix.$$.fragment,m),E(c6.$$.fragment,m),TDe=!0)},o(m){C(d.$$.fragment,m),C(Ca.$$.fragment,m),C(Sy.$$.fragment,m),C(Ry.$$.fragment,m),C(vm.$$.fragment,m),C(Py.$$.fragment,m),C(By.$$.fragment,m),C(qy.$$.fragment,m),C(Eg.$$.fragment,m),C(jy.$$.fragment,m),C(Dy.$$.fragment,m),C(Gy.$$.fragment,m),C(Xy.$$.fragment,m),C(ah.$$.fragment,m),C(zy.$$.fragment,m),C(Wy.$$.fragment,m),C(Qy.$$.fragment,m),C(Jy.$$.fragment,m),C(Ih.$$.fragment,m),C(Nh.$$.fragment,m),C(Yy.$$.fragment,m),C(Ky.$$.fragment,m),C(Zy.$$.fragment,m),C(rL.$$.fragment,m),C(tu.$$.fragment,m),C(au.$$.fragment,m),C(tL.$$.fragment,m),C(aL.$$.fragment,m),C(nL.$$.fragment,m),C(lL.$$.fragment,m),C(lu.$$.fragment,m),C(iL.$$.fragment,m),C(r_.$$.fragment,m),C(dL.$$.fragment,m),C(cL.$$.fragment,m),C(fL.$$.fragment,m),C(a_.$$.fragment,m),C(gL.$$.fragment,m),C(H_.$$.fragment,m),C(hL.$$.fragment,m),C(uL.$$.fragment,m),C(_L.$$.fragment,m),C(J_.$$.fragment,m),C(bL.$$.fragment,m),C(Bb.$$.fragment,m),C(vL.$$.fragment,m),C(FL.$$.fragment,m),C(ML.$$.fragment,m),C(Nb.$$.fragment,m),C(EL.$$.fragment,m),C(T2.$$.fragment,m),C(CL.$$.fragment,m),C(wL.$$.fragment,m),C(yL.$$.fragment,m),C(E2.$$.fragment,m),C(LL.$$.fragment,m),C(G2.$$.fragment,m),C(xL.$$.fragment,m),C($L.$$.fragment,m),C(SL.$$.fragment,m),C(V2.$$.fragment,m),C(RL.$$.fragment,m),C(qv.$$.fragment,m),C(PL.$$.fragment,m),C(BL.$$.fragment,m),C(NL.$$.fragment,m),C(Dv.$$.fragment,m),C(qL.$$.fragment,m),C(_F.$$.fragment,m),C(jL.$$.fragment,m),C(DL.$$.fragment,m),C(OL.$$.fragment,m),C(vF.$$.fragment,m),C(VL.$$.fragment,m),C(AF.$$.fragment,m),C(XL.$$.fragment,m),C(zL.$$.fragment,m),C(QL.$$.fragment,m),C(LF.$$.fragment,m),C(HL.$$.fragment,m),C(c1.$$.fragment,m),C(UL.$$.fragment,m),C(JL.$$.fragment,m),C(KL.$$.fragment,m),C(f1.$$.fragment,m),C(ZL.$$.fragment,m),C(eT.$$.fragment,m),C(e8.$$.fragment,m),C(o8.$$.fragment,m),C(t8.$$.fragment,m),C(rT.$$.fragment,m),C(a8.$$.fragment,m),C(nT.$$.fragment,m),C(n8.$$.fragment,m),C(s8.$$.fragment,m),C(i8.$$.fragment,m),C(lT.$$.fragment,m),C(d8.$$.fragment,m),C(TT.$$.fragment,m),C(c8.$$.fragment,m),C(m8.$$.fragment,m),C(g8.$$.fragment,m),C(ET.$$.fragment,m),C(h8.$$.fragment,m),C(AT.$$.fragment,m),C(u8.$$.fragment,m),C(p8.$$.fragment,m),C(b8.$$.fragment,m),C(LT.$$.fragment,m),C(v8.$$.fragment,m),C(jT.$$.fragment,m),C(F8.$$.fragment,m),C(T8.$$.fragment,m),C(E8.$$.fragment,m),C(GT.$$.fragment,m),C(C8.$$.fragment,m),C(HT.$$.fragment,m),C(w8.$$.fragment,m),C(A8.$$.fragment,m),C(L8.$$.fragment,m),C(JT.$$.fragment,m),C(x8.$$.fragment,m),C(lM.$$.fragment,m),C($8.$$.fragment,m),C(k8.$$.fragment,m),C(R8.$$.fragment,m),C(dM.$$.fragment,m),C(P8.$$.fragment,m),C(gM.$$.fragment,m),C(I8.$$.fragment,m),C(N8.$$.fragment,m),C(j8.$$.fragment,m),C(uM.$$.fragment,m),C(D8.$$.fragment,m),C(MM.$$.fragment,m),C(G8.$$.fragment,m),C(O8.$$.fragment,m),C(X8.$$.fragment,m),C(CM.$$.fragment,m),C(z8.$$.fragment,m),C(xM.$$.fragment,m),C(W8.$$.fragment,m),C(Q8.$$.fragment,m),C(U8.$$.fragment,m),C(kM.$$.fragment,m),C(J8.$$.fragment,m),C(BM.$$.fragment,m),C(K8.$$.fragment,m),C(Z8.$$.fragment,m),C(o7.$$.fragment,m),C(NM.$$.fragment,m),C(r7.$$.fragment,m),C(DM.$$.fragment,m),C(t7.$$.fragment,m),C(a7.$$.fragment,m),C(s7.$$.fragment,m),C(OM.$$.fragment,m),C(l7.$$.fragment,m),C(HM.$$.fragment,m),C(i7.$$.fragment,m),C(d7.$$.fragment,m),C(m7.$$.fragment,m),C(JM.$$.fragment,m),C(f7.$$.fragment,m),C(ZM.$$.fragment,m),C(g7.$$.fragment,m),C(h7.$$.fragment,m),C(p7.$$.fragment,m),C(o4.$$.fragment,m),C(_7.$$.fragment,m),C(H4.$$.fragment,m),C(b7.$$.fragment,m),C(v7.$$.fragment,m),C(T7.$$.fragment,m),C(J4.$$.fragment,m),C(M7.$$.fragment,m),C(FE.$$.fragment,m),C(E7.$$.fragment,m),C(C7.$$.fragment,m),C(A7.$$.fragment,m),C(ME.$$.fragment,m),C(y7.$$.fragment,m),C(IE.$$.fragment,m),C(L7.$$.fragment,m),C(x7.$$.fragment,m),C(k7.$$.fragment,m),C(qE.$$.fragment,m),C(S7.$$.fragment,m),C(VE.$$.fragment,m),C(R7.$$.fragment,m),C(P7.$$.fragment,m),C(I7.$$.fragment,m),C(zE.$$.fragment,m),C(N7.$$.fragment,m),C(fC.$$.fragment,m),C(q7.$$.fragment,m),C(j7.$$.fragment,m),C(G7.$$.fragment,m),C(hC.$$.fragment,m),C(O7.$$.fragment,m),C(wC.$$.fragment,m),C(V7.$$.fragment,m),C(X7.$$.fragment,m),C(W7.$$.fragment,m),C(yC.$$.fragment,m),C(Q7.$$.fragment,m),C(e5.$$.fragment,m),C(H7.$$.fragment,m),C(U7.$$.fragment,m),C(Y7.$$.fragment,m),C(r5.$$.fragment,m),C(K7.$$.fragment,m),C(F5.$$.fragment,m),C(Z7.$$.fragment,m),C(e9.$$.fragment,m),C(r9.$$.fragment,m),C(M5.$$.fragment,m),C(t9.$$.fragment,m),C(w5.$$.fragment,m),C(n9.$$.fragment,m),C(s9.$$.fragment,m),C(i9.$$.fragment,m),C(y5.$$.fragment,m),C(d9.$$.fragment,m),C(x5.$$.fragment,m),C(c9.$$.fragment,m),C(m9.$$.fragment,m),C(g9.$$.fragment,m),C(k5.$$.fragment,m),C(h9.$$.fragment,m),C(K5.$$.fragment,m),C(u9.$$.fragment,m),C(p9.$$.fragment,m),C(b9.$$.fragment,m),C(e3.$$.fragment,m),C(v9.$$.fragment,m),C(T3.$$.fragment,m),C(F9.$$.fragment,m),C(T9.$$.fragment,m),C(E9.$$.fragment,m),C(E3.$$.fragment,m),C(C9.$$.fragment,m),C(w3.$$.fragment,m),C(w9.$$.fragment,m),C(A9.$$.fragment,m),C(L9.$$.fragment,m),C(y3.$$.fragment,m),C(x9.$$.fragment,m),C(x3.$$.fragment,m),C($9.$$.fragment,m),C(k9.$$.fragment,m),C(R9.$$.fragment,m),C(k3.$$.fragment,m),C(P9.$$.fragment,m),C(aw.$$.fragment,m),C(B9.$$.fragment,m),C(I9.$$.fragment,m),C(q9.$$.fragment,m),C(sw.$$.fragment,m),C(j9.$$.fragment,m),C(_w.$$.fragment,m),C(D9.$$.fragment,m),C(G9.$$.fragment,m),C(V9.$$.fragment,m),C(vw.$$.fragment,m),C(X9.$$.fragment,m),C(Sw.$$.fragment,m),C(z9.$$.fragment,m),C(W9.$$.fragment,m),C(H9.$$.fragment,m),C(Pw.$$.fragment,m),C(U9.$$.fragment,m),C(zw.$$.fragment,m),C(J9.$$.fragment,m),C(Y9.$$.fragment,m),C(Z9.$$.fragment,m),C(Qw.$$.fragment,m),C(ex.$$.fragment,m),C(t0.$$.fragment,m),C(ox.$$.fragment,m),C(rx.$$.fragment,m),C(ax.$$.fragment,m),C(n0.$$.fragment,m),C(nx.$$.fragment,m),C(p0.$$.fragment,m),C(sx.$$.fragment,m),C(lx.$$.fragment,m),C(dx.$$.fragment,m),C(b0.$$.fragment,m),C(cx.$$.fragment,m),C(x0.$$.fragment,m),C(mx.$$.fragment,m),C(fx.$$.fragment,m),C(hx.$$.fragment,m),C(k0.$$.fragment,m),C(ux.$$.fragment,m),C(D0.$$.fragment,m),C(px.$$.fragment,m),C(_x.$$.fragment,m),C(vx.$$.fragment,m),C(O0.$$.fragment,m),C(Fx.$$.fragment,m),C(Y0.$$.fragment,m),C(Tx.$$.fragment,m),C(Mx.$$.fragment,m),C(Cx.$$.fragment,m),C(Z0.$$.fragment,m),C(wx.$$.fragment,m),C(o6.$$.fragment,m),C(Ax.$$.fragment,m),C(yx.$$.fragment,m),C(xx.$$.fragment,m),C(t6.$$.fragment,m),C($x.$$.fragment,m),C(s6.$$.fragment,m),C(Sx.$$.fragment,m),C(Rx.$$.fragment,m),C(Bx.$$.fragment,m),C(i6.$$.fragment,m),C(Ix.$$.fragment,m),C(c6.$$.fragment,m),TDe=!1},d(m){t(g),m&&t(v),m&&t(u),w(d),m&&t(hm),m&&t(rt),m&&t(De),m&&t(We),m&&t(pm),w(Ca,m),m&&t(Qe),m&&t(Ae),m&&t(Eo),m&&t(wa),m&&t(bqe),m&&t(bi),w(Sy),m&&t(vqe),m&&t(kn),m&&t(Fqe),w(Ry,m),m&&t(Tqe),m&&t(ok),m&&t(Mqe),w(vm,m),m&&t(Eqe),m&&t(vi),w(Py),m&&t(Cqe),m&&t(Co),w(By),w(qy),w(Eg),w(jy),m&&t(wqe),m&&t(Ti),w(Dy),m&&t(Aqe),m&&t(wo),w(Gy),w(Xy),w(ah),w(zy),m&&t(yqe),m&&t(Mi),w(Wy),m&&t(Lqe),m&&t(Ao),w(Qy),w(Jy),w(Ih),w(Nh),w(Yy),m&&t(xqe),m&&t(Ei),w(Ky),m&&t($qe),m&&t(yo),w(Zy),w(rL),w(tu),w(au),w(tL),m&&t(kqe),m&&t(wi),w(aL),m&&t(Sqe),m&&t(Lo),w(nL),w(lL),w(lu),w(iL),w(r_),m&&t(Rqe),m&&t(Li),w(dL),m&&t(Pqe),m&&t(xo),w(cL),w(fL),w(a_),w(gL),w(H_),m&&t(Bqe),m&&t(ki),w(hL),m&&t(Iqe),m&&t($o),w(uL),w(_L),w(J_),w(bL),w(Bb),m&&t(Nqe),m&&t(Pi),w(vL),m&&t(qqe),m&&t(ko),w(FL),w(ML),w(Nb),w(EL),w(T2),m&&t(jqe),m&&t(Ni),w(CL),m&&t(Dqe),m&&t(So),w(wL),w(yL),w(E2),w(LL),w(G2),m&&t(Gqe),m&&t(Di),w(xL),m&&t(Oqe),m&&t(Ro),w($L),w(SL),w(V2),w(RL),w(qv),m&&t(Vqe),m&&t(Vi),w(PL),m&&t(Xqe),m&&t(Po),w(BL),w(NL),w(Dv),w(qL),w(_F),m&&t(zqe),m&&t(Wi),w(jL),m&&t(Wqe),m&&t(Bo),w(DL),w(OL),w(vF),w(VL),w(AF),m&&t(Qqe),m&&t(Ui),w(XL),m&&t(Hqe),m&&t(Io),w(zL),w(QL),w(LF),w(HL),w(c1),m&&t(Uqe),m&&t(Ki),w(UL),m&&t(Jqe),m&&t(No),w(JL),w(KL),w(f1),w(ZL),w(eT),m&&t(Yqe),m&&t(od),w(e8),m&&t(Kqe),m&&t(qo),w(o8),w(t8),w(rT),w(a8),w(nT),m&&t(Zqe),m&&t(ad),w(n8),m&&t(eje),m&&t(jo),w(s8),w(i8),w(lT),w(d8),w(TT),m&&t(oje),m&&t(ld),w(c8),m&&t(rje),m&&t(Do),w(m8),w(g8),w(ET),w(h8),w(AT),m&&t(tje),m&&t(cd),w(u8),m&&t(aje),m&&t(Go),w(p8),w(b8),w(LT),w(v8),w(jT),m&&t(nje),m&&t(gd),w(F8),m&&t(sje),m&&t(Oo),w(T8),w(E8),w(GT),w(C8),w(HT),m&&t(lje),m&&t(pd),w(w8),m&&t(ije),m&&t(Vo),w(A8),w(L8),w(JT),w(x8),w(lM),m&&t(dje),m&&t(vd),w($8),m&&t(cje),m&&t(Xo),w(k8),w(R8),w(dM),w(P8),w(gM),m&&t(mje),m&&t(Md),w(I8),m&&t(fje),m&&t(zo),w(N8),w(j8),w(uM),w(D8),w(MM),m&&t(gje),m&&t(wd),w(G8),m&&t(hje),m&&t(Wo),w(O8),w(X8),w(CM),w(z8),w(xM),m&&t(uje),m&&t(xd),w(W8),m&&t(pje),m&&t(Qo),w(Q8),w(U8),w(kM),w(J8),w(BM),m&&t(_je),m&&t(Sd),w(K8),m&&t(bje),m&&t(Ho),w(Z8),w(o7),w(NM),w(r7),w(DM),m&&t(vje),m&&t(Bd),w(t7),m&&t(Fje),m&&t(Uo),w(a7),w(s7),w(OM),w(l7),w(HM),m&&t(Tje),m&&t(qd),w(i7),m&&t(Mje),m&&t(Jo),w(d7),w(m7),w(JM),w(f7),w(ZM),m&&t(Eje),m&&t(Gd),w(g7),m&&t(Cje),m&&t(Yo),w(h7),w(p7),w(o4),w(_7),w(H4),m&&t(wje),m&&t(Xd),w(b7),m&&t(Aje),m&&t(Ko),w(v7),w(T7),w(J4),w(M7),w(FE),m&&t(yje),m&&t(Qd),w(E7),m&&t(Lje),m&&t(Zo),w(C7),w(A7),w(ME),w(y7),w(IE),m&&t(xje),m&&t(Jd),w(L7),m&&t($je),m&&t(er),w(x7),w(k7),w(qE),w(S7),w(VE),m&&t(kje),m&&t(Zd),w(R7),m&&t(Sje),m&&t(or),w(P7),w(I7),w(zE),w(N7),w(fC),m&&t(Rje),m&&t(rc),w(q7),m&&t(Pje),m&&t(rr),w(j7),w(G7),w(hC),w(O7),w(wC),m&&t(Bje),m&&t(nc),w(V7),m&&t(Ije),m&&t(tr),w(X7),w(W7),w(yC),w(Q7),w(e5),m&&t(Nje),m&&t(ic),w(H7),m&&t(qje),m&&t(ar),w(U7),w(Y7),w(r5),w(K7),w(F5),m&&t(jje),m&&t(mc),w(Z7),m&&t(Dje),m&&t(nr),w(e9),w(r9),w(M5),w(t9),w(w5),m&&t(Gje),m&&t(hc),w(n9),m&&t(Oje),m&&t(sr),w(s9),w(i9),w(y5),w(d9),w(x5),m&&t(Vje),m&&t(_c),w(c9),m&&t(Xje),m&&t(lr),w(m9),w(g9),w(k5),w(h9),w(K5),m&&t(zje),m&&t(Fc),w(u9),m&&t(Wje),m&&t(ir),w(p9),w(b9),w(e3),w(v9),w(T3),m&&t(Qje),m&&t(Ec),w(F9),m&&t(Hje),m&&t(dr),w(T9),w(E9),w(E3),w(C9),w(w3),m&&t(Uje),m&&t(Ac),w(w9),m&&t(Jje),m&&t(cr),w(A9),w(L9),w(y3),w(x9),w(x3),m&&t(Yje),m&&t(xc),w($9),m&&t(Kje),m&&t(mr),w(k9),w(R9),w(k3),w(P9),w(aw),m&&t(Zje),m&&t(Sc),w(B9),m&&t(eDe),m&&t(fr),w(I9),w(q9),w(sw),w(j9),w(_w),m&&t(oDe),m&&t(Bc),w(D9),m&&t(rDe),m&&t(gr),w(G9),w(V9),w(vw),w(X9),w(Sw),m&&t(tDe),m&&t(qc),w(z9),m&&t(aDe),m&&t(hr),w(W9),w(H9),w(Pw),w(U9),w(zw),m&&t(nDe),m&&t(Gc),w(J9),m&&t(sDe),m&&t(ur),w(Y9),w(Z9),w(Qw),w(ex),w(t0),m&&t(lDe),m&&t(Xc),w(ox),m&&t(iDe),m&&t(pr),w(rx),w(ax),w(n0),w(nx),w(p0),m&&t(dDe),m&&t(Qc),w(sx),m&&t(cDe),m&&t(_r),w(lx),w(dx),w(b0),w(cx),w(x0),m&&t(mDe),m&&t(Jc),w(mx),m&&t(fDe),m&&t(br),w(fx),w(hx),w(k0),w(ux),w(D0),m&&t(gDe),m&&t(Zc),w(px),m&&t(hDe),m&&t(vr),w(_x),w(vx),w(O0),w(Fx),w(Y0),m&&t(uDe),m&&t(rm),w(Tx),m&&t(pDe),m&&t(Fr),w(Mx),w(Cx),w(Z0),w(wx),w(o6),m&&t(_De),m&&t(nm),w(Ax),m&&t(bDe),m&&t(Tr),w(yx),w(xx),w(t6),w($x),w(s6),m&&t(vDe),m&&t(im),w(Sx),m&&t(FDe),m&&t(Mr),w(Rx),w(Bx),w(i6),w(Ix),w(c6)}}}const cRt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function mRt(L){return mkt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class bRt extends lkt{constructor(g){super();ikt(this,g,mRt,dRt,dkt,{})}}export{bRt as default,cRt as metadata};
